
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010200 <_vector_start>:
   10200:	20000c50 	.word	0x20000c50
   10204:	000117e9 	.word	0x000117e9
   10208:	00014ae7 	.word	0x00014ae7
   1020c:	00011819 	.word	0x00011819
   10210:	00011819 	.word	0x00011819
   10214:	00011819 	.word	0x00011819
   10218:	00011819 	.word	0x00011819
   1021c:	00011819 	.word	0x00011819
	...
   1022c:	000115f9 	.word	0x000115f9
   10230:	00011819 	.word	0x00011819
   10234:	00000000 	.word	0x00000000
   10238:	000115a1 	.word	0x000115a1
   1023c:	000149cd 	.word	0x000149cd

00010240 <_irq_vector_table>:
   10240:	000117a9 000117a9 000117a9 000117a9     ................
   10250:	000117a9 000117a9 000117a9 000117a9     ................
   10260:	000117a9 000117a9 000117a9 000117a9     ................
   10270:	000117a9 000117a9 000117a9 000117a9     ................
   10280:	000117a9 000117a9 000117a9 000117a9     ................
   10290:	000117a9 000117a9 000117a9 000117a9     ................
   102a0:	000117a9 000117a9 000117a9 000117a9     ................
   102b0:	000117a9 000117a9 000117a9 000117a9     ................
   102c0:	000117a9 000117a9 000117a9 000117a9     ................
   102d0:	000117a9 000117a9 000117a9 000117a9     ................
   102e0:	000117a9 000117a9 000117a9 000117a9     ................
   102f0:	000117a9 000117a9 000117a9 000117a9     ................
   10300:	000117a9 000117a9 000117a9 000117a9     ................
   10310:	000117a9 000117a9 000117a9 000117a9     ................
   10320:	000117a9 000117a9 000117a9 000117a9     ................
   10330:	000117a9 000117a9 000117a9 000117a9     ................
   10340:	000117a9                                ....

00010344 <_vector_end>:
	...

00010400 <m_firmware_info>:
   10400:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   10410:	00007e00 00000001 00010200 00010200     .~..............
   10420:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0001043c <__aeabi_uldivmod>:
   1043c:	b953      	cbnz	r3, 10454 <__aeabi_uldivmod+0x18>
   1043e:	b94a      	cbnz	r2, 10454 <__aeabi_uldivmod+0x18>
   10440:	2900      	cmp	r1, #0
   10442:	bf08      	it	eq
   10444:	2800      	cmpeq	r0, #0
   10446:	bf1c      	itt	ne
   10448:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1044c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   10450:	f000 b970 	b.w	10734 <__aeabi_idiv0>
   10454:	f1ad 0c08 	sub.w	ip, sp, #8
   10458:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1045c:	f000 f806 	bl	1046c <__udivmoddi4>
   10460:	f8dd e004 	ldr.w	lr, [sp, #4]
   10464:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10468:	b004      	add	sp, #16
   1046a:	4770      	bx	lr

0001046c <__udivmoddi4>:
   1046c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10470:	9e09      	ldr	r6, [sp, #36]	; 0x24
   10472:	4604      	mov	r4, r0
   10474:	4689      	mov	r9, r1
   10476:	2b00      	cmp	r3, #0
   10478:	f040 8083 	bne.w	10582 <__udivmoddi4+0x116>
   1047c:	428a      	cmp	r2, r1
   1047e:	4615      	mov	r5, r2
   10480:	d945      	bls.n	1050e <__udivmoddi4+0xa2>
   10482:	fab2 f282 	clz	r2, r2
   10486:	b14a      	cbz	r2, 1049c <__udivmoddi4+0x30>
   10488:	f1c2 0720 	rsb	r7, r2, #32
   1048c:	fa01 f302 	lsl.w	r3, r1, r2
   10490:	4095      	lsls	r5, r2
   10492:	4094      	lsls	r4, r2
   10494:	fa20 f707 	lsr.w	r7, r0, r7
   10498:	ea47 0903 	orr.w	r9, r7, r3
   1049c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   104a0:	0c23      	lsrs	r3, r4, #16
   104a2:	fa1f f885 	uxth.w	r8, r5
   104a6:	fbb9 fcfe 	udiv	ip, r9, lr
   104aa:	fb0e 991c 	mls	r9, lr, ip, r9
   104ae:	fb0c f108 	mul.w	r1, ip, r8
   104b2:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
   104b6:	4299      	cmp	r1, r3
   104b8:	d90a      	bls.n	104d0 <__udivmoddi4+0x64>
   104ba:	18eb      	adds	r3, r5, r3
   104bc:	bf2c      	ite	cs
   104be:	2001      	movcs	r0, #1
   104c0:	2000      	movcc	r0, #0
   104c2:	4299      	cmp	r1, r3
   104c4:	d902      	bls.n	104cc <__udivmoddi4+0x60>
   104c6:	2800      	cmp	r0, #0
   104c8:	f000 811d 	beq.w	10706 <__udivmoddi4+0x29a>
   104cc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   104d0:	1a59      	subs	r1, r3, r1
   104d2:	b2a3      	uxth	r3, r4
   104d4:	fbb1 f0fe 	udiv	r0, r1, lr
   104d8:	fb0e 1110 	mls	r1, lr, r0, r1
   104dc:	fb00 f808 	mul.w	r8, r0, r8
   104e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   104e4:	45a0      	cmp	r8, r4
   104e6:	d905      	bls.n	104f4 <__udivmoddi4+0x88>
   104e8:	192c      	adds	r4, r5, r4
   104ea:	d202      	bcs.n	104f2 <__udivmoddi4+0x86>
   104ec:	45a0      	cmp	r8, r4
   104ee:	f200 810e 	bhi.w	1070e <__udivmoddi4+0x2a2>
   104f2:	3801      	subs	r0, #1
   104f4:	eba4 0408 	sub.w	r4, r4, r8
   104f8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   104fc:	2700      	movs	r7, #0
   104fe:	b11e      	cbz	r6, 10508 <__udivmoddi4+0x9c>
   10500:	40d4      	lsrs	r4, r2
   10502:	2300      	movs	r3, #0
   10504:	e9c6 4300 	strd	r4, r3, [r6]
   10508:	4639      	mov	r1, r7
   1050a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1050e:	2a00      	cmp	r2, #0
   10510:	d051      	beq.n	105b6 <__udivmoddi4+0x14a>
   10512:	fab2 f282 	clz	r2, r2
   10516:	2a00      	cmp	r2, #0
   10518:	f040 80af 	bne.w	1067a <__udivmoddi4+0x20e>
   1051c:	1b49      	subs	r1, r1, r5
   1051e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   10522:	fa1f f885 	uxth.w	r8, r5
   10526:	2701      	movs	r7, #1
   10528:	0c23      	lsrs	r3, r4, #16
   1052a:	fbb1 fcfe 	udiv	ip, r1, lr
   1052e:	fb0e 111c 	mls	r1, lr, ip, r1
   10532:	fb08 f00c 	mul.w	r0, r8, ip
   10536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1053a:	4298      	cmp	r0, r3
   1053c:	d90a      	bls.n	10554 <__udivmoddi4+0xe8>
   1053e:	18eb      	adds	r3, r5, r3
   10540:	bf2c      	ite	cs
   10542:	2101      	movcs	r1, #1
   10544:	2100      	movcc	r1, #0
   10546:	4298      	cmp	r0, r3
   10548:	d902      	bls.n	10550 <__udivmoddi4+0xe4>
   1054a:	2900      	cmp	r1, #0
   1054c:	f000 80d7 	beq.w	106fe <__udivmoddi4+0x292>
   10550:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   10554:	1a19      	subs	r1, r3, r0
   10556:	b2a3      	uxth	r3, r4
   10558:	fbb1 f0fe 	udiv	r0, r1, lr
   1055c:	fb0e 1110 	mls	r1, lr, r0, r1
   10560:	fb08 f800 	mul.w	r8, r8, r0
   10564:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   10568:	45a0      	cmp	r8, r4
   1056a:	d905      	bls.n	10578 <__udivmoddi4+0x10c>
   1056c:	192c      	adds	r4, r5, r4
   1056e:	d202      	bcs.n	10576 <__udivmoddi4+0x10a>
   10570:	45a0      	cmp	r8, r4
   10572:	f200 80c1 	bhi.w	106f8 <__udivmoddi4+0x28c>
   10576:	3801      	subs	r0, #1
   10578:	eba4 0408 	sub.w	r4, r4, r8
   1057c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   10580:	e7bd      	b.n	104fe <__udivmoddi4+0x92>
   10582:	428b      	cmp	r3, r1
   10584:	d908      	bls.n	10598 <__udivmoddi4+0x12c>
   10586:	2e00      	cmp	r6, #0
   10588:	d074      	beq.n	10674 <__udivmoddi4+0x208>
   1058a:	2700      	movs	r7, #0
   1058c:	e9c6 0100 	strd	r0, r1, [r6]
   10590:	4638      	mov	r0, r7
   10592:	4639      	mov	r1, r7
   10594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10598:	fab3 f783 	clz	r7, r3
   1059c:	b967      	cbnz	r7, 105b8 <__udivmoddi4+0x14c>
   1059e:	428b      	cmp	r3, r1
   105a0:	f0c0 80a4 	bcc.w	106ec <__udivmoddi4+0x280>
   105a4:	4282      	cmp	r2, r0
   105a6:	f240 80a1 	bls.w	106ec <__udivmoddi4+0x280>
   105aa:	4638      	mov	r0, r7
   105ac:	2e00      	cmp	r6, #0
   105ae:	d0ab      	beq.n	10508 <__udivmoddi4+0x9c>
   105b0:	e9c6 4900 	strd	r4, r9, [r6]
   105b4:	e7a8      	b.n	10508 <__udivmoddi4+0x9c>
   105b6:	deff      	udf	#255	; 0xff
   105b8:	f1c7 0520 	rsb	r5, r7, #32
   105bc:	40bb      	lsls	r3, r7
   105be:	fa02 fc07 	lsl.w	ip, r2, r7
   105c2:	fa01 f407 	lsl.w	r4, r1, r7
   105c6:	40ea      	lsrs	r2, r5
   105c8:	fa20 f805 	lsr.w	r8, r0, r5
   105cc:	40e9      	lsrs	r1, r5
   105ce:	fa00 fe07 	lsl.w	lr, r0, r7
   105d2:	431a      	orrs	r2, r3
   105d4:	ea48 0404 	orr.w	r4, r8, r4
   105d8:	ea4f 4812 	mov.w	r8, r2, lsr #16
   105dc:	0c20      	lsrs	r0, r4, #16
   105de:	fa1f f982 	uxth.w	r9, r2
   105e2:	fbb1 faf8 	udiv	sl, r1, r8
   105e6:	fb08 111a 	mls	r1, r8, sl, r1
   105ea:	fb0a fb09 	mul.w	fp, sl, r9
   105ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   105f2:	458b      	cmp	fp, r1
   105f4:	d90a      	bls.n	1060c <__udivmoddi4+0x1a0>
   105f6:	1851      	adds	r1, r2, r1
   105f8:	bf2c      	ite	cs
   105fa:	2301      	movcs	r3, #1
   105fc:	2300      	movcc	r3, #0
   105fe:	458b      	cmp	fp, r1
   10600:	d902      	bls.n	10608 <__udivmoddi4+0x19c>
   10602:	2b00      	cmp	r3, #0
   10604:	f000 8088 	beq.w	10718 <__udivmoddi4+0x2ac>
   10608:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1060c:	eba1 010b 	sub.w	r1, r1, fp
   10610:	b2a4      	uxth	r4, r4
   10612:	fbb1 f0f8 	udiv	r0, r1, r8
   10616:	fb08 1110 	mls	r1, r8, r0, r1
   1061a:	fb00 f909 	mul.w	r9, r0, r9
   1061e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   10622:	4589      	cmp	r9, r1
   10624:	d904      	bls.n	10630 <__udivmoddi4+0x1c4>
   10626:	1851      	adds	r1, r2, r1
   10628:	d201      	bcs.n	1062e <__udivmoddi4+0x1c2>
   1062a:	4589      	cmp	r9, r1
   1062c:	d87b      	bhi.n	10726 <__udivmoddi4+0x2ba>
   1062e:	3801      	subs	r0, #1
   10630:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   10634:	eba1 0109 	sub.w	r1, r1, r9
   10638:	fba0 890c 	umull	r8, r9, r0, ip
   1063c:	4549      	cmp	r1, r9
   1063e:	4644      	mov	r4, r8
   10640:	464b      	mov	r3, r9
   10642:	d302      	bcc.n	1064a <__udivmoddi4+0x1de>
   10644:	d106      	bne.n	10654 <__udivmoddi4+0x1e8>
   10646:	45c6      	cmp	lr, r8
   10648:	d204      	bcs.n	10654 <__udivmoddi4+0x1e8>
   1064a:	3801      	subs	r0, #1
   1064c:	ebb8 040c 	subs.w	r4, r8, ip
   10650:	eb69 0302 	sbc.w	r3, r9, r2
   10654:	2e00      	cmp	r6, #0
   10656:	d05d      	beq.n	10714 <__udivmoddi4+0x2a8>
   10658:	ebbe 0204 	subs.w	r2, lr, r4
   1065c:	eb61 0103 	sbc.w	r1, r1, r3
   10660:	fa01 f505 	lsl.w	r5, r1, r5
   10664:	fa22 f307 	lsr.w	r3, r2, r7
   10668:	40f9      	lsrs	r1, r7
   1066a:	2700      	movs	r7, #0
   1066c:	431d      	orrs	r5, r3
   1066e:	e9c6 5100 	strd	r5, r1, [r6]
   10672:	e749      	b.n	10508 <__udivmoddi4+0x9c>
   10674:	4637      	mov	r7, r6
   10676:	4630      	mov	r0, r6
   10678:	e746      	b.n	10508 <__udivmoddi4+0x9c>
   1067a:	f1c2 0020 	rsb	r0, r2, #32
   1067e:	4095      	lsls	r5, r2
   10680:	fa01 f702 	lsl.w	r7, r1, r2
   10684:	fa21 f300 	lsr.w	r3, r1, r0
   10688:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1068c:	fa24 f100 	lsr.w	r1, r4, r0
   10690:	fa1f f885 	uxth.w	r8, r5
   10694:	4094      	lsls	r4, r2
   10696:	4339      	orrs	r1, r7
   10698:	fbb3 f0fe 	udiv	r0, r3, lr
   1069c:	0c0f      	lsrs	r7, r1, #16
   1069e:	fb0e 3310 	mls	r3, lr, r0, r3
   106a2:	fb00 fc08 	mul.w	ip, r0, r8
   106a6:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   106aa:	459c      	cmp	ip, r3
   106ac:	d907      	bls.n	106be <__udivmoddi4+0x252>
   106ae:	18eb      	adds	r3, r5, r3
   106b0:	bf2c      	ite	cs
   106b2:	2701      	movcs	r7, #1
   106b4:	2700      	movcc	r7, #0
   106b6:	459c      	cmp	ip, r3
   106b8:	d900      	bls.n	106bc <__udivmoddi4+0x250>
   106ba:	b38f      	cbz	r7, 10720 <__udivmoddi4+0x2b4>
   106bc:	3801      	subs	r0, #1
   106be:	eba3 030c 	sub.w	r3, r3, ip
   106c2:	b289      	uxth	r1, r1
   106c4:	fbb3 f7fe 	udiv	r7, r3, lr
   106c8:	fb0e 3317 	mls	r3, lr, r7, r3
   106cc:	fb07 fc08 	mul.w	ip, r7, r8
   106d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   106d4:	458c      	cmp	ip, r1
   106d6:	d904      	bls.n	106e2 <__udivmoddi4+0x276>
   106d8:	1869      	adds	r1, r5, r1
   106da:	d201      	bcs.n	106e0 <__udivmoddi4+0x274>
   106dc:	458c      	cmp	ip, r1
   106de:	d825      	bhi.n	1072c <__udivmoddi4+0x2c0>
   106e0:	3f01      	subs	r7, #1
   106e2:	eba1 010c 	sub.w	r1, r1, ip
   106e6:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
   106ea:	e71d      	b.n	10528 <__udivmoddi4+0xbc>
   106ec:	1a84      	subs	r4, r0, r2
   106ee:	eb61 0303 	sbc.w	r3, r1, r3
   106f2:	2001      	movs	r0, #1
   106f4:	4699      	mov	r9, r3
   106f6:	e759      	b.n	105ac <__udivmoddi4+0x140>
   106f8:	3802      	subs	r0, #2
   106fa:	442c      	add	r4, r5
   106fc:	e73c      	b.n	10578 <__udivmoddi4+0x10c>
   106fe:	f1ac 0c02 	sub.w	ip, ip, #2
   10702:	442b      	add	r3, r5
   10704:	e726      	b.n	10554 <__udivmoddi4+0xe8>
   10706:	f1ac 0c02 	sub.w	ip, ip, #2
   1070a:	442b      	add	r3, r5
   1070c:	e6e0      	b.n	104d0 <__udivmoddi4+0x64>
   1070e:	3802      	subs	r0, #2
   10710:	442c      	add	r4, r5
   10712:	e6ef      	b.n	104f4 <__udivmoddi4+0x88>
   10714:	4637      	mov	r7, r6
   10716:	e6f7      	b.n	10508 <__udivmoddi4+0x9c>
   10718:	f1aa 0a02 	sub.w	sl, sl, #2
   1071c:	4411      	add	r1, r2
   1071e:	e775      	b.n	1060c <__udivmoddi4+0x1a0>
   10720:	3802      	subs	r0, #2
   10722:	442b      	add	r3, r5
   10724:	e7cb      	b.n	106be <__udivmoddi4+0x252>
   10726:	3802      	subs	r0, #2
   10728:	4411      	add	r1, r2
   1072a:	e781      	b.n	10630 <__udivmoddi4+0x1c4>
   1072c:	3f02      	subs	r7, #2
   1072e:	4429      	add	r1, r5
   10730:	e7d7      	b.n	106e2 <__udivmoddi4+0x276>
   10732:	bf00      	nop

00010734 <__aeabi_idiv0>:
   10734:	4770      	bx	lr
   10736:	bf00      	nop

00010738 <__gnu_cmse_nonsecure_call>:
   10738:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
   1073c:	4627      	mov	r7, r4
   1073e:	46a0      	mov	r8, r4
   10740:	46a1      	mov	r9, r4
   10742:	46a2      	mov	sl, r4
   10744:	46a3      	mov	fp, r4
   10746:	46a4      	mov	ip, r4
   10748:	ed2d 8b10 	vpush	{d8-d15}
   1074c:	f04f 0500 	mov.w	r5, #0
   10750:	ec45 5b18 	vmov	d8, r5, r5
   10754:	ec45 5a19 	vmov	s18, s19, r5, r5
   10758:	ec45 5a1a 	vmov	s20, s21, r5, r5
   1075c:	ec45 5a1b 	vmov	s22, s23, r5, r5
   10760:	ec45 5a1c 	vmov	s24, s25, r5, r5
   10764:	ec45 5a1d 	vmov	s26, s27, r5, r5
   10768:	ec45 5a1e 	vmov	s28, s29, r5, r5
   1076c:	ec45 5a1f 	vmov	s30, s31, r5, r5
   10770:	eef1 5a10 	vmrs	r5, fpscr
   10774:	f64f 7660 	movw	r6, #65376	; 0xff60
   10778:	f6c0 76ff 	movt	r6, #4095	; 0xfff
   1077c:	4035      	ands	r5, r6
   1077e:	eee1 5a10 	vmsr	fpscr, r5
   10782:	f384 8800 	msr	CPSR_f, r4
   10786:	4625      	mov	r5, r4
   10788:	4626      	mov	r6, r4
   1078a:	47a4      	blxns	r4
   1078c:	ecbd 8b10 	vpop	{d8-d15}
   10790:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

00010794 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   10794:	680b      	ldr	r3, [r1, #0]
   10796:	3301      	adds	r3, #1
   10798:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   1079a:	4b01      	ldr	r3, [pc, #4]	; (107a0 <char_out+0xc>)
   1079c:	681b      	ldr	r3, [r3, #0]
   1079e:	4718      	bx	r3
   107a0:	20000000 	.word	0x20000000

000107a4 <print_digits.part.0>:
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
   107a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107a8:	b087      	sub	sp, #28
   107aa:	460f      	mov	r7, r1
   107ac:	4619      	mov	r1, r3
		buf[i] = "0123456789abcdef"[num % base];
   107ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
   107b0:	4606      	mov	r6, r0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   107b2:	2514      	movs	r5, #20
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
   107b4:	4610      	mov	r0, r2
		buf[i] = "0123456789abcdef"[num % base];
   107b6:	4698      	mov	r8, r3
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
   107b8:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   107bc:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
		buf[i] = "0123456789abcdef"[num % base];
   107c0:	4c1c      	ldr	r4, [pc, #112]	; (10834 <print_digits.part.0+0x90>)
   107c2:	ea4f 79e3 	mov.w	r9, r3, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   107c6:	ea50 0301 	orrs.w	r3, r0, r1
   107ca:	d11a      	bne.n	10802 <print_digits.part.0+0x5e>
	if (i == DIGITS_BUFLEN - 1) {
   107cc:	2d14      	cmp	r5, #20
		buf[i] = '0';
   107ce:	bf08      	it	eq
   107d0:	2330      	moveq	r3, #48	; 0x30
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   107d2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
   107d4:	bf18      	it	ne
   107d6:	3501      	addne	r5, #1
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   107d8:	442c      	add	r4, r5
		buf[i] = '0';
   107da:	bf08      	it	eq
   107dc:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   107e0:	2c15      	cmp	r4, #21
   107e2:	d017      	beq.n	10814 <print_digits.part.0+0x70>
   107e4:	3c15      	subs	r4, #21
	for (/**/; pad > 0 && pad_before; pad--) {
   107e6:	2c00      	cmp	r4, #0
   107e8:	dc16      	bgt.n	10818 <print_digits.part.0+0x74>
		out(buf[i], ctx);
   107ea:	f81d 0005 	ldrb.w	r0, [sp, r5]
   107ee:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
   107f0:	3501      	adds	r5, #1
		out(buf[i], ctx);
   107f2:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
   107f4:	2d15      	cmp	r5, #21
   107f6:	d1f8      	bne.n	107ea <print_digits.part.0+0x46>
	for (/**/; pad > 0; pad--) {
   107f8:	2c00      	cmp	r4, #0
   107fa:	dc15      	bgt.n	10828 <print_digits.part.0+0x84>
}
   107fc:	b007      	add	sp, #28
   107fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
   10802:	4642      	mov	r2, r8
   10804:	464b      	mov	r3, r9
   10806:	f7ff fe19 	bl	1043c <__aeabi_uldivmod>
   1080a:	5ca3      	ldrb	r3, [r4, r2]
   1080c:	f80d 3005 	strb.w	r3, [sp, r5]
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   10810:	3d01      	subs	r5, #1
   10812:	e7d8      	b.n	107c6 <print_digits.part.0+0x22>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   10814:	2400      	movs	r4, #0
   10816:	e7e8      	b.n	107ea <print_digits.part.0+0x46>
	for (/**/; pad > 0 && pad_before; pad--) {
   10818:	f1bb 0f00 	cmp.w	fp, #0
   1081c:	d0e5      	beq.n	107ea <print_digits.part.0+0x46>
		out(pad_char, ctx);
   1081e:	4639      	mov	r1, r7
   10820:	4650      	mov	r0, sl
   10822:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
   10824:	3c01      	subs	r4, #1
   10826:	e7de      	b.n	107e6 <print_digits.part.0+0x42>
		out(pad_char, ctx);
   10828:	4639      	mov	r1, r7
   1082a:	4650      	mov	r0, sl
   1082c:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
   1082e:	3c01      	subs	r4, #1
   10830:	e7e2      	b.n	107f8 <print_digits.part.0+0x54>
   10832:	bf00      	nop
   10834:	0001551c 	.word	0x0001551c

00010838 <__printk_hook_install>:
	_char_out = fn;
   10838:	4b01      	ldr	r3, [pc, #4]	; (10840 <__printk_hook_install+0x8>)
   1083a:	6018      	str	r0, [r3, #0]
}
   1083c:	4770      	bx	lr
   1083e:	bf00      	nop
   10840:	20000000 	.word	0x20000000

00010844 <vprintk>:
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
	struct out_context ctx = { 0 };
   10844:	2300      	movs	r3, #0
{
   10846:	b507      	push	{r0, r1, r2, lr}
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
   10848:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   1084a:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
   1084c:	4803      	ldr	r0, [pc, #12]	; (1085c <vprintk+0x18>)
   1084e:	460b      	mov	r3, r1
   10850:	a901      	add	r1, sp, #4
   10852:	f003 fd6e 	bl	14332 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   10856:	b003      	add	sp, #12
   10858:	f85d fb04 	ldr.w	pc, [sp], #4
   1085c:	00010795 	.word	0x00010795

00010860 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   10860:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10864:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
   10868:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   1086a:	f019 0808 	ands.w	r8, r9, #8
   1086e:	d00d      	beq.n	1088c <process_event+0x2c>
		if (evt == EVT_COMPLETE) {
   10870:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   10872:	bf0c      	ite	eq
   10874:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   10878:	f049 0920 	orrne.w	r9, r9, #32
   1087c:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   10880:	f382 8811 	msr	BASEPRI, r2
   10884:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   10888:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1088c:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   10890:	2902      	cmp	r1, #2
   10892:	d107      	bne.n	108a4 <process_event+0x44>
			evt = process_recheck(mgr);
   10894:	4620      	mov	r0, r4
   10896:	f003 fe6d 	bl	14574 <process_recheck>
		if (evt == EVT_NOP) {
   1089a:	2800      	cmp	r0, #0
   1089c:	d0f0      	beq.n	10880 <process_event+0x20>
		if (evt == EVT_COMPLETE) {
   1089e:	2801      	cmp	r0, #1
   108a0:	8b23      	ldrh	r3, [r4, #24]
   108a2:	d14a      	bne.n	1093a <process_event+0xda>
			res = mgr->last_res;
   108a4:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   108a6:	8b23      	ldrh	r3, [r4, #24]
	if (res < 0) {
   108a8:	2f00      	cmp	r7, #0
   108aa:	da15      	bge.n	108d8 <process_event+0x78>
		*clients = mgr->clients;
   108ac:	6825      	ldr	r5, [r4, #0]
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   108ae:	e9c4 8800 	strd	r8, r8, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   108b2:	f023 0307 	bic.w	r3, r3, #7
   108b6:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   108ba:	8323      	strh	r3, [r4, #24]
		onoff_transition_fn transit = NULL;
   108bc:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   108be:	8b23      	ldrh	r3, [r4, #24]
   108c0:	f003 0a07 	and.w	sl, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   108c4:	45ca      	cmp	sl, r9
   108c6:	d002      	beq.n	108ce <process_event+0x6e>
		if (do_monitors
   108c8:	68a1      	ldr	r1, [r4, #8]
   108ca:	2900      	cmp	r1, #0
   108cc:	d156      	bne.n	1097c <process_event+0x11c>
		    || !sys_slist_is_empty(&clients)
   108ce:	b90d      	cbnz	r5, 108d4 <process_event+0x74>
		    || (transit != NULL)) {
   108d0:	2e00      	cmp	r6, #0
   108d2:	d06d      	beq.n	109b0 <process_event+0x150>
   108d4:	2100      	movs	r1, #0
   108d6:	e052      	b.n	1097e <process_event+0x11e>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   108d8:	f003 0107 	and.w	r1, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   108dc:	1f48      	subs	r0, r1, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   108de:	2801      	cmp	r0, #1
   108e0:	d81c      	bhi.n	1091c <process_event+0xbc>
		*clients = mgr->clients;
   108e2:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   108e6:	2906      	cmp	r1, #6
		*clients = mgr->clients;
   108e8:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   108ea:	b29b      	uxth	r3, r3
	list->tail = NULL;
   108ec:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   108f0:	d10a      	bne.n	10908 <process_event+0xa8>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   108f2:	b13d      	cbz	r5, 10904 <process_event+0xa4>
   108f4:	4628      	mov	r0, r5
   108f6:	8b61      	ldrh	r1, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   108f8:	6800      	ldr	r0, [r0, #0]
				mgr->refs += 1U;
   108fa:	3101      	adds	r1, #1
   108fc:	b289      	uxth	r1, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   108fe:	2800      	cmp	r0, #0
   10900:	d1fa      	bne.n	108f8 <process_event+0x98>
   10902:	8361      	strh	r1, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10904:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   10908:	8323      	strh	r3, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   1090a:	4620      	mov	r0, r4
   1090c:	f003 fe32 	bl	14574 <process_recheck>
   10910:	2800      	cmp	r0, #0
   10912:	d0d3      	beq.n	108bc <process_event+0x5c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10914:	8b23      	ldrh	r3, [r4, #24]
   10916:	f043 0320 	orr.w	r3, r3, #32
   1091a:	e7ce      	b.n	108ba <process_event+0x5a>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1091c:	2904      	cmp	r1, #4
   1091e:	d10a      	bne.n	10936 <process_event+0xd6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10920:	f023 0307 	bic.w	r3, r3, #7
   10924:	b299      	uxth	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   10926:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   10928:	4620      	mov	r0, r4
   1092a:	f003 fe23 	bl	14574 <process_recheck>
   1092e:	b110      	cbz	r0, 10936 <process_event+0xd6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10930:	f041 0120 	orr.w	r1, r1, #32
   10934:	8321      	strh	r1, [r4, #24]
   10936:	2500      	movs	r5, #0
   10938:	e7c0      	b.n	108bc <process_event+0x5c>
		} else if (evt == EVT_START) {
   1093a:	2803      	cmp	r0, #3
   1093c:	d109      	bne.n	10952 <process_event+0xf2>
			transit = mgr->transitions->start;
   1093e:	6921      	ldr	r1, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10940:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   10944:	680e      	ldr	r6, [r1, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10946:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   1094a:	2500      	movs	r5, #0
   1094c:	8323      	strh	r3, [r4, #24]
		res = 0;
   1094e:	462f      	mov	r7, r5
   10950:	e7b5      	b.n	108be <process_event+0x5e>
		} else if (evt == EVT_STOP) {
   10952:	2804      	cmp	r0, #4
   10954:	d106      	bne.n	10964 <process_event+0x104>
			transit = mgr->transitions->stop;
   10956:	6921      	ldr	r1, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10958:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   1095c:	684e      	ldr	r6, [r1, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1095e:	f043 0304 	orr.w	r3, r3, #4
   10962:	e7f2      	b.n	1094a <process_event+0xea>
		} else if (evt == EVT_RESET) {
   10964:	2805      	cmp	r0, #5
   10966:	d106      	bne.n	10976 <process_event+0x116>
			transit = mgr->transitions->reset;
   10968:	6921      	ldr	r1, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1096a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   1096e:	688e      	ldr	r6, [r1, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10970:	f043 0305 	orr.w	r3, r3, #5
   10974:	e7e9      	b.n	1094a <process_event+0xea>
   10976:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   10978:	462e      	mov	r6, r5
   1097a:	e7e8      	b.n	1094e <process_event+0xee>
				   && !sys_slist_is_empty(&mgr->monitors);
   1097c:	2101      	movs	r1, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1097e:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   10982:	8323      	strh	r3, [r4, #24]
   10984:	f382 8811 	msr	BASEPRI, r2
   10988:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   1098c:	b9f9      	cbnz	r1, 109ce <process_event+0x16e>
	while (!sys_slist_is_empty(list)) {
   1098e:	bb85      	cbnz	r5, 109f2 <process_event+0x192>
			if (transit != NULL) {
   10990:	b116      	cbz	r6, 10998 <process_event+0x138>
				transit(mgr, transition_complete);
   10992:	4921      	ldr	r1, [pc, #132]	; (10a18 <process_event+0x1b8>)
   10994:	4620      	mov	r0, r4
   10996:	47b0      	blx	r6
	__asm__ volatile(
   10998:	f04f 0320 	mov.w	r3, #32
   1099c:	f3ef 8211 	mrs	r2, BASEPRI
   109a0:	f383 8811 	msr	BASEPRI, r3
   109a4:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   109a8:	8b23      	ldrh	r3, [r4, #24]
   109aa:	f023 0308 	bic.w	r3, r3, #8
   109ae:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   109b0:	8b23      	ldrh	r3, [r4, #24]
   109b2:	06d9      	lsls	r1, r3, #27
   109b4:	d527      	bpl.n	10a06 <process_event+0x1a6>
			evt = EVT_COMPLETE;
   109b6:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   109b8:	f023 0310 	bic.w	r3, r3, #16
   109bc:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   109be:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   109c2:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   109c6:	2900      	cmp	r1, #0
   109c8:	f47f af62 	bne.w	10890 <process_event+0x30>
out:
   109cc:	e758      	b.n	10880 <process_event+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   109ce:	68a1      	ldr	r1, [r4, #8]
   109d0:	2900      	cmp	r1, #0
   109d2:	d0dc      	beq.n	1098e <process_event+0x12e>
   109d4:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
   109d8:	f8d1 b004 	ldr.w	fp, [r1, #4]
   109dc:	463b      	mov	r3, r7
   109de:	4652      	mov	r2, sl
   109e0:	4620      	mov	r0, r4
   109e2:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   109e4:	f1b9 0f00 	cmp.w	r9, #0
   109e8:	d0d1      	beq.n	1098e <process_event+0x12e>
   109ea:	4649      	mov	r1, r9
   109ec:	f8d9 9000 	ldr.w	r9, [r9]
   109f0:	e7f2      	b.n	109d8 <process_event+0x178>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   109f2:	f8d5 9000 	ldr.w	r9, [r5]
		notify_one(mgr, cli, state, res);
   109f6:	4629      	mov	r1, r5
   109f8:	463b      	mov	r3, r7
   109fa:	4652      	mov	r2, sl
   109fc:	4620      	mov	r0, r4
   109fe:	f003 fdd5 	bl	145ac <notify_one>
	while (!sys_slist_is_empty(list)) {
   10a02:	464d      	mov	r5, r9
   10a04:	e7c3      	b.n	1098e <process_event+0x12e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   10a06:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   10a0a:	bf1e      	ittt	ne
   10a0c:	f023 0320 	bicne.w	r3, r3, #32
   10a10:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   10a12:	2102      	movne	r1, #2
   10a14:	e7d3      	b.n	109be <process_event+0x15e>
   10a16:	bf00      	nop
   10a18:	000145d9 	.word	0x000145d9

00010a1c <nordicsemi_nrf91_init>:
   10a1c:	f04f 0220 	mov.w	r2, #32
   10a20:	f3ef 8311 	mrs	r3, BASEPRI
   10a24:	f382 8811 	msr	BASEPRI, r2
   10a28:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   10a2c:	2101      	movs	r1, #1
   10a2e:	4a04      	ldr	r2, [pc, #16]	; (10a40 <nordicsemi_nrf91_init+0x24>)
   10a30:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   10a34:	f383 8811 	msr	BASEPRI, r3
   10a38:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   10a3c:	2000      	movs	r0, #0
   10a3e:	4770      	bx	lr
   10a40:	50039000 	.word	0x50039000

00010a44 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   10a44:	b120      	cbz	r0, 10a50 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   10a46:	4b03      	ldr	r3, [pc, #12]	; (10a54 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   10a48:	0180      	lsls	r0, r0, #6
   10a4a:	f043 0301 	orr.w	r3, r3, #1
   10a4e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   10a50:	4770      	bx	lr
   10a52:	bf00      	nop
   10a54:	00015280 	.word	0x00015280

00010a58 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   10a58:	b508      	push	{r3, lr}
   10a5a:	4604      	mov	r4, r0
	__asm__ volatile(
   10a5c:	f04f 0220 	mov.w	r2, #32
   10a60:	f3ef 8311 	mrs	r3, BASEPRI
   10a64:	f382 8811 	msr	BASEPRI, r2
   10a68:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   10a6c:	f003 ffb0 	bl	149d0 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   10a70:	4620      	mov	r0, r4
   10a72:	f000 ffef 	bl	11a54 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   10a76:	4803      	ldr	r0, [pc, #12]	; (10a84 <sys_reboot+0x2c>)
   10a78:	f003 fd6f 	bl	1455a <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   10a7c:	f000 fe42 	bl	11704 <arch_cpu_idle>
   10a80:	e7fc      	b.n	10a7c <sys_reboot+0x24>
   10a82:	bf00      	nop
   10a84:	0001552d 	.word	0x0001552d

00010a88 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   10a88:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   10a8a:	4807      	ldr	r0, [pc, #28]	; (10aa8 <uart_console_init+0x20>)
   10a8c:	f001 fd54 	bl	12538 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
   10a90:	4c06      	ldr	r4, [pc, #24]	; (10aac <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   10a92:	4b07      	ldr	r3, [pc, #28]	; (10ab0 <uart_console_init+0x28>)
   10a94:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   10a96:	4620      	mov	r0, r4
   10a98:	f001 fa0e 	bl	11eb8 <__stdout_hook_install>
	__printk_hook_install(console_out);
   10a9c:	4620      	mov	r0, r4
   10a9e:	f7ff fecb 	bl	10838 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   10aa2:	2000      	movs	r0, #0
   10aa4:	bd10      	pop	{r4, pc}
   10aa6:	bf00      	nop
   10aa8:	00015556 	.word	0x00015556
   10aac:	00010ab5 	.word	0x00010ab5
   10ab0:	20000248 	.word	0x20000248

00010ab4 <console_out>:
	if ('\n' == c) {
   10ab4:	280a      	cmp	r0, #10
{
   10ab6:	b538      	push	{r3, r4, r5, lr}
   10ab8:	4604      	mov	r4, r0
   10aba:	4d07      	ldr	r5, [pc, #28]	; (10ad8 <console_out+0x24>)
	if ('\n' == c) {
   10abc:	d104      	bne.n	10ac8 <console_out+0x14>
   10abe:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   10ac0:	6883      	ldr	r3, [r0, #8]
   10ac2:	210d      	movs	r1, #13
   10ac4:	685b      	ldr	r3, [r3, #4]
   10ac6:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   10ac8:	6828      	ldr	r0, [r5, #0]
   10aca:	6883      	ldr	r3, [r0, #8]
   10acc:	b2e1      	uxtb	r1, r4
   10ace:	685b      	ldr	r3, [r3, #4]
   10ad0:	4798      	blx	r3
}
   10ad2:	4620      	mov	r0, r4
   10ad4:	bd38      	pop	{r3, r4, r5, pc}
   10ad6:	bf00      	nop
   10ad8:	20000248 	.word	0x20000248

00010adc <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = DEVICE_GET(clock_nrf)->data;
	size_t offset = (size_t)(mgr - data->mgr);
   10adc:	4a0e      	ldr	r2, [pc, #56]	; (10b18 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   10ade:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   10ae0:	1a84      	subs	r4, r0, r2
{
   10ae2:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   10ae4:	200c      	movs	r0, #12
{
   10ae6:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
   10ae8:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   10aea:	10a3      	asrs	r3, r4, #2
   10aec:	4c0b      	ldr	r4, [pc, #44]	; (10b1c <onoff_stop+0x40>)
   10aee:	435c      	muls	r4, r3
   10af0:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
   10af2:	fb00 2004 	mla	r0, r0, r4, r2
   10af6:	4408      	add	r0, r1
   10af8:	f003 fed9 	bl	148ae <set_off_state>
	if (err < 0) {
   10afc:	1e01      	subs	r1, r0, #0
   10afe:	db05      	blt.n	10b0c <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   10b00:	4b07      	ldr	r3, [pc, #28]	; (10b20 <onoff_stop+0x44>)
   10b02:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   10b06:	6863      	ldr	r3, [r4, #4]
   10b08:	4798      	blx	r3
	return 0;
   10b0a:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   10b0c:	4628      	mov	r0, r5
   10b0e:	4633      	mov	r3, r6
}
   10b10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   10b14:	4718      	bx	r3
   10b16:	bf00      	nop
   10b18:	2000025c 	.word	0x2000025c
   10b1c:	b6db6db7 	.word	0xb6db6db7
   10b20:	0001529c 	.word	0x0001529c

00010b24 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   10b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   10b28:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
   10b2a:	4e10      	ldr	r6, [pc, #64]	; (10b6c <onoff_start+0x48>)
{
   10b2c:	4680      	mov	r8, r0
	size_t offset = (size_t)(mgr - data->mgr);
   10b2e:	1b84      	subs	r4, r0, r6
   10b30:	10a3      	asrs	r3, r4, #2
   10b32:	4c0f      	ldr	r4, [pc, #60]	; (10b70 <onoff_start+0x4c>)
{
   10b34:	460f      	mov	r7, r1
	size_t offset = (size_t)(mgr - data->mgr);
   10b36:	435c      	muls	r4, r3
   10b38:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
   10b3a:	4365      	muls	r5, r4
   10b3c:	f105 0040 	add.w	r0, r5, #64	; 0x40
   10b40:	2140      	movs	r1, #64	; 0x40
   10b42:	4430      	add	r0, r6
   10b44:	f003 fecc 	bl	148e0 <set_starting_state>
	if (err < 0) {
   10b48:	1e01      	subs	r1, r0, #0
   10b4a:	db09      	blt.n	10b60 <onoff_start+0x3c>
	subdata->cb = data->cb;
   10b4c:	4a09      	ldr	r2, [pc, #36]	; (10b74 <onoff_start+0x50>)
   10b4e:	1973      	adds	r3, r6, r5
	subdata->user_data = data->user_data;
   10b50:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   10b54:	4b08      	ldr	r3, [pc, #32]	; (10b78 <onoff_start+0x54>)
   10b56:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  &data, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   10b5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   10b5e:	4718      	bx	r3
		notify(mgr, err);
   10b60:	4640      	mov	r0, r8
   10b62:	463b      	mov	r3, r7
}
   10b64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   10b68:	4718      	bx	r3
   10b6a:	bf00      	nop
   10b6c:	2000025c 	.word	0x2000025c
   10b70:	b6db6db7 	.word	0xb6db6db7
   10b74:	00014943 	.word	0x00014943
   10b78:	0001529c 	.word	0x0001529c

00010b7c <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
   10b7c:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   10b7e:	2200      	movs	r2, #0
   10b80:	2101      	movs	r1, #1
{
   10b82:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   10b84:	2005      	movs	r0, #5
   10b86:	f000 fd65 	bl	11654 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   10b8a:	2005      	movs	r0, #5
   10b8c:	f000 fd44 	bl	11618 <arch_irq_enable>
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
		nrf_gpio_pin_mcu_select(PIN_XL2,
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
	}
#endif
	nrfx_err = nrfx_clock_init(clock_event_handler);
   10b90:	480f      	ldr	r0, [pc, #60]	; (10bd0 <clk_init+0x54>)
   10b92:	f001 fbdb 	bl	1234c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   10b96:	4b0f      	ldr	r3, [pc, #60]	; (10bd4 <clk_init+0x58>)
   10b98:	4298      	cmp	r0, r3
   10b9a:	d115      	bne.n	10bc8 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   10b9c:	f004 f8cb 	bl	14d36 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   10ba0:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   10ba2:	490d      	ldr	r1, [pc, #52]	; (10bd8 <clk_init+0x5c>)
   10ba4:	4630      	mov	r0, r6
   10ba6:	f003 fd35 	bl	14614 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   10baa:	2800      	cmp	r0, #0
   10bac:	db0b      	blt.n	10bc6 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   10bae:	2501      	movs	r5, #1
   10bb0:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   10bb2:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   10bb4:	4908      	ldr	r1, [pc, #32]	; (10bd8 <clk_init+0x5c>)
   10bb6:	f104 001c 	add.w	r0, r4, #28
   10bba:	f003 fd2b 	bl	14614 <onoff_manager_init>
		if (err < 0) {
   10bbe:	2800      	cmp	r0, #0
   10bc0:	db01      	blt.n	10bc6 <clk_init+0x4a>
	}

	return 0;
   10bc2:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   10bc4:	64e5      	str	r5, [r4, #76]	; 0x4c
}
   10bc6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   10bc8:	f06f 0004 	mvn.w	r0, #4
   10bcc:	e7fb      	b.n	10bc6 <clk_init+0x4a>
   10bce:	bf00      	nop
   10bd0:	00010c75 	.word	0x00010c75
   10bd4:	0bad0000 	.word	0x0bad0000
   10bd8:	000152ac 	.word	0x000152ac

00010bdc <clkstarted_handle.constprop.10>:
static void clkstarted_handle(const struct device *dev,
   10bdc:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   10bde:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   10be0:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   10be2:	434b      	muls	r3, r1
   10be4:	4808      	ldr	r0, [pc, #32]	; (10c08 <clkstarted_handle.constprop.10+0x2c>)
static void clkstarted_handle(const struct device *dev,
   10be6:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   10be8:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   10bea:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
   10bec:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   10bf0:	4418      	add	r0, r3
	sub_data->cb = NULL;
   10bf2:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   10bf4:	f003 fe92 	bl	1491c <set_on_state>
	if (callback) {
   10bf8:	b12d      	cbz	r5, 10c06 <clkstarted_handle.constprop.10+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   10bfa:	4632      	mov	r2, r6
   10bfc:	462b      	mov	r3, r5
}
   10bfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   10c02:	4802      	ldr	r0, [pc, #8]	; (10c0c <clkstarted_handle.constprop.10+0x30>)
   10c04:	4718      	bx	r3
}
   10c06:	bd70      	pop	{r4, r5, r6, pc}
   10c08:	2000025c 	.word	0x2000025c
   10c0c:	2000009c 	.word	0x2000009c

00010c10 <generic_hfclk_start>:
{
   10c10:	b508      	push	{r3, lr}
   10c12:	f04f 0320 	mov.w	r3, #32
   10c16:	f3ef 8111 	mrs	r1, BASEPRI
   10c1a:	f383 8811 	msr	BASEPRI, r3
   10c1e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   10c22:	4a12      	ldr	r2, [pc, #72]	; (10c6c <generic_hfclk_start+0x5c>)
   10c24:	6813      	ldr	r3, [r2, #0]
   10c26:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   10c2a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   10c2e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   10c30:	d00c      	beq.n	10c4c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   10c32:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   10c36:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   10c3a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   10c3e:	f013 0301 	ands.w	r3, r3, #1
   10c42:	d003      	beq.n	10c4c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   10c44:	480a      	ldr	r0, [pc, #40]	; (10c70 <generic_hfclk_start+0x60>)
   10c46:	f003 fe69 	bl	1491c <set_on_state>
			already_started = true;
   10c4a:	2301      	movs	r3, #1
	__asm__ volatile(
   10c4c:	f381 8811 	msr	BASEPRI, r1
   10c50:	f3bf 8f6f 	isb	sy
	if (already_started) {
   10c54:	b123      	cbz	r3, 10c60 <generic_hfclk_start+0x50>
}
   10c56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
   10c5a:	2000      	movs	r0, #0
   10c5c:	f7ff bfbe 	b.w	10bdc <clkstarted_handle.constprop.10>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   10c60:	2001      	movs	r0, #1
}
   10c62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   10c66:	f001 bb81 	b.w	1236c <nrfx_clock_start>
   10c6a:	bf00      	nop
   10c6c:	200002ac 	.word	0x200002ac
   10c70:	2000029c 	.word	0x2000029c

00010c74 <clock_event_handler>:
	switch (event) {
   10c74:	b110      	cbz	r0, 10c7c <clock_event_handler+0x8>
   10c76:	2801      	cmp	r0, #1
   10c78:	d004      	beq.n	10c84 <clock_event_handler+0x10>
   10c7a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   10c7c:	4b03      	ldr	r3, [pc, #12]	; (10c8c <clock_event_handler+0x18>)
   10c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   10c80:	075b      	lsls	r3, r3, #29
   10c82:	d101      	bne.n	10c88 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   10c84:	f7ff bfaa 	b.w	10bdc <clkstarted_handle.constprop.10>
}
   10c88:	4770      	bx	lr
   10c8a:	bf00      	nop
   10c8c:	2000025c 	.word	0x2000025c

00010c90 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10c90:	4b07      	ldr	r3, [pc, #28]	; (10cb0 <generic_hfclk_stop+0x20>)
   10c92:	e8d3 2fef 	ldaex	r2, [r3]
   10c96:	f022 0102 	bic.w	r1, r2, #2
   10c9a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   10c9e:	2800      	cmp	r0, #0
   10ca0:	d1f7      	bne.n	10c92 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   10ca2:	07d3      	lsls	r3, r2, #31
   10ca4:	d402      	bmi.n	10cac <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   10ca6:	2001      	movs	r0, #1
   10ca8:	f001 bb92 	b.w	123d0 <nrfx_clock_stop>
}
   10cac:	4770      	bx	lr
   10cae:	bf00      	nop
   10cb0:	200002ac 	.word	0x200002ac

00010cb4 <api_blocking_start>:
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   10cb4:	2300      	movs	r3, #0
   10cb6:	2201      	movs	r2, #1
{
   10cb8:	b510      	push	{r4, lr}
   10cba:	b088      	sub	sp, #32
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   10cbc:	e9cd 3206 	strd	r3, r2, [sp, #24]
	struct clock_control_async_data data = {
   10cc0:	9301      	str	r3, [sp, #4]
   10cc2:	4b09      	ldr	r3, [pc, #36]	; (10ce8 <api_blocking_start+0x34>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   10cc4:	ac04      	add	r4, sp, #16
	err = api_start(dev, subsys, &data);
   10cc6:	aa01      	add	r2, sp, #4
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   10cc8:	e9cd 4404 	strd	r4, r4, [sp, #16]
	struct clock_control_async_data data = {
   10ccc:	e9cd 3402 	strd	r3, r4, [sp, #8]
	err = api_start(dev, subsys, &data);
   10cd0:	f003 fe5e 	bl	14990 <api_start>
	if (err < 0) {
   10cd4:	2800      	cmp	r0, #0
   10cd6:	db05      	blt.n	10ce4 <api_blocking_start+0x30>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   10cd8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   10cdc:	2300      	movs	r3, #0
   10cde:	4620      	mov	r0, r4
   10ce0:	f002 f9f2 	bl	130c8 <z_impl_k_sem_take>
}
   10ce4:	b008      	add	sp, #32
   10ce6:	bd10      	pop	{r4, pc}
   10ce8:	00014957 	.word	0x00014957

00010cec <z_nrf_clock_control_lf_on>:
{
   10cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10cf0:	2201      	movs	r2, #1
   10cf2:	4605      	mov	r5, r0
   10cf4:	4938      	ldr	r1, [pc, #224]	; (10dd8 <z_nrf_clock_control_lf_on+0xec>)
   10cf6:	e8d1 3fef 	ldaex	r3, [r1]
   10cfa:	e8c1 2fe0 	stlex	r0, r2, [r1]
   10cfe:	2800      	cmp	r0, #0
   10d00:	d1f9      	bne.n	10cf6 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   10d02:	b933      	cbnz	r3, 10d12 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   10d04:	4935      	ldr	r1, [pc, #212]	; (10ddc <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   10d06:	4836      	ldr	r0, [pc, #216]	; (10de0 <z_nrf_clock_control_lf_on+0xf4>)
   10d08:	604b      	str	r3, [r1, #4]
   10d0a:	60cb      	str	r3, [r1, #12]
   10d0c:	608a      	str	r2, [r1, #8]
   10d0e:	f003 fc94 	bl	1463a <onoff_request>
	switch (start_mode) {
   10d12:	1e6b      	subs	r3, r5, #1
   10d14:	2b01      	cmp	r3, #1
   10d16:	d830      	bhi.n	10d7a <z_nrf_clock_control_lf_on+0x8e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   10d18:	2d01      	cmp	r5, #1
   10d1a:	d107      	bne.n	10d2c <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   10d1c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   10d20:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   10d24:	f003 0303 	and.w	r3, r3, #3
   10d28:	2b02      	cmp	r3, #2
   10d2a:	d026      	beq.n	10d7a <z_nrf_clock_control_lf_on+0x8e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   10d2c:	f004 f8f3 	bl	14f16 <k_is_in_isr>
   10d30:	b918      	cbnz	r0, 10d3a <z_nrf_clock_control_lf_on+0x4e>
	return !z_sys_post_kernel;
   10d32:	4b2c      	ldr	r3, [pc, #176]	; (10de4 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   10d34:	781b      	ldrb	r3, [r3, #0]
   10d36:	2b00      	cmp	r3, #0
   10d38:	d146      	bne.n	10dc8 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   10d3a:	f04f 0320 	mov.w	r3, #32
   10d3e:	f3ef 8911 	mrs	r9, BASEPRI
   10d42:	f383 8811 	msr	BASEPRI, r3
   10d46:	f3bf 8f6f 	isb	sy
   10d4a:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   10d4c:	4e26      	ldr	r6, [pc, #152]	; (10de8 <z_nrf_clock_control_lf_on+0xfc>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10d4e:	4f27      	ldr	r7, [pc, #156]	; (10dec <z_nrf_clock_control_lf_on+0x100>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10d50:	f8df 809c 	ldr.w	r8, [pc, #156]	; 10df0 <z_nrf_clock_control_lf_on+0x104>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   10d54:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   10d58:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   10d5c:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   10d60:	03d2      	lsls	r2, r2, #15
   10d62:	d50c      	bpl.n	10d7e <z_nrf_clock_control_lf_on+0x92>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   10d64:	f003 0303 	and.w	r3, r3, #3
   10d68:	2b02      	cmp	r3, #2
   10d6a:	d001      	beq.n	10d70 <z_nrf_clock_control_lf_on+0x84>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   10d6c:	2d01      	cmp	r5, #1
   10d6e:	d106      	bne.n	10d7e <z_nrf_clock_control_lf_on+0x92>
	if (isr_mode) {
   10d70:	b324      	cbz	r4, 10dbc <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   10d72:	f389 8811 	msr	BASEPRI, r9
   10d76:	f3bf 8f6f 	isb	sy
}
   10d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
   10d7e:	b1c4      	cbz	r4, 10db2 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   10d80:	4648      	mov	r0, r9
   10d82:	f000 fccd 	bl	11720 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   10d86:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   10d8a:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   10d8e:	b2db      	uxtb	r3, r3
   10d90:	2b01      	cmp	r3, #1
   10d92:	d1df      	bne.n	10d54 <z_nrf_clock_control_lf_on+0x68>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   10d94:	6831      	ldr	r1, [r6, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   10d96:	2900      	cmp	r1, #0
   10d98:	d0dc      	beq.n	10d54 <z_nrf_clock_control_lf_on+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10d9a:	2100      	movs	r1, #0
   10d9c:	6031      	str	r1, [r6, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   10d9e:	6831      	ldr	r1, [r6, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   10da0:	2102      	movs	r1, #2
   10da2:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   10da6:	2220      	movs	r2, #32
   10da8:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10dac:	f8c8 3000 	str.w	r3, [r8]
   10db0:	e7d0      	b.n	10d54 <z_nrf_clock_control_lf_on+0x68>
	return z_impl_k_sleep(timeout);
   10db2:	2100      	movs	r1, #0
   10db4:	2021      	movs	r0, #33	; 0x21
   10db6:	f002 f941 	bl	1303c <z_impl_k_sleep>
   10dba:	e7e4      	b.n	10d86 <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENSET = mask;
   10dbc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   10dc0:	2202      	movs	r2, #2
   10dc2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		__ASSERT_NO_MSG(false);
   10dc6:	e7d8      	b.n	10d7a <z_nrf_clock_control_lf_on+0x8e>
    p_reg->INTENCLR = mask;
   10dc8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   10dcc:	2202      	movs	r2, #2
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   10dce:	4604      	mov	r4, r0
   10dd0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   10dd4:	4681      	mov	r9, r0
   10dd6:	e7b9      	b.n	10d4c <z_nrf_clock_control_lf_on+0x60>
   10dd8:	200002b0 	.word	0x200002b0
   10ddc:	2000024c 	.word	0x2000024c
   10de0:	20000278 	.word	0x20000278
   10de4:	2000084d 	.word	0x2000084d
   10de8:	50005104 	.word	0x50005104
   10dec:	e000e100 	.word	0xe000e100
   10df0:	50005008 	.word	0x50005008

00010df4 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
   10df4:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   10df6:	4b08      	ldr	r3, [pc, #32]	; (10e18 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   10df8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   10dfc:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   10e00:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   10e04:	4290      	cmp	r0, r2
   10e06:	d100      	bne.n	10e0a <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   10e08:	4770      	bx	lr
   10e0a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   10e0e:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   10e10:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   10e14:	e7f2      	b.n	10dfc <handle_next_cycle_case+0x8>
   10e16:	bf00      	nop
   10e18:	50015000 	.word	0x50015000

00010e1c <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10e1c:	2200      	movs	r2, #0
   10e1e:	4b07      	ldr	r3, [pc, #28]	; (10e3c <rtc_nrf_isr+0x20>)
   10e20:	601a      	str	r2, [r3, #0]
   10e22:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   10e24:	4a06      	ldr	r2, [pc, #24]	; (10e40 <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
   10e26:	4b07      	ldr	r3, [pc, #28]	; (10e44 <rtc_nrf_isr+0x28>)
   10e28:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
   10e2c:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   10e2e:	1ac0      	subs	r0, r0, r3
   10e30:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   10e34:	4403      	add	r3, r0
   10e36:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
   10e38:	f002 bad2 	b.w	133e0 <z_clock_announce>
   10e3c:	50015140 	.word	0x50015140
   10e40:	200002b4 	.word	0x200002b4
   10e44:	50015000 	.word	0x50015000

00010e48 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
   10e48:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   10e4a:	2400      	movs	r4, #0
   10e4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10e50:	4d0e      	ldr	r5, [pc, #56]	; (10e8c <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10e52:	4b0f      	ldr	r3, [pc, #60]	; (10e90 <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
   10e54:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10e58:	601c      	str	r4, [r3, #0]
   10e5a:	681b      	ldr	r3, [r3, #0]
   10e5c:	4b0d      	ldr	r3, [pc, #52]	; (10e94 <z_clock_driver_init+0x4c>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
   10e5e:	2101      	movs	r1, #1
   10e60:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   10e64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   10e68:	4622      	mov	r2, r4
   10e6a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   10e6e:	2015      	movs	r0, #21
   10e70:	f000 fbf0 	bl	11654 <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
   10e74:	2015      	movs	r0, #21
   10e76:	f000 fbcf 	bl	11618 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   10e7a:	2301      	movs	r3, #1
   10e7c:	4a06      	ldr	r2, [pc, #24]	; (10e98 <z_clock_driver_init+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
   10e7e:	2002      	movs	r0, #2
   10e80:	6013      	str	r3, [r2, #0]
   10e82:	602b      	str	r3, [r5, #0]
   10e84:	f7ff ff32 	bl	10cec <z_nrf_clock_control_lf_on>

	return 0;
}
   10e88:	4620      	mov	r0, r4
   10e8a:	bd38      	pop	{r3, r4, r5, pc}
   10e8c:	50015000 	.word	0x50015000
   10e90:	50015140 	.word	0x50015140
   10e94:	e000e100 	.word	0xe000e100
   10e98:	50015008 	.word	0x50015008

00010e9c <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
   10e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
   10e9e:	4b2d      	ldr	r3, [pc, #180]	; (10f54 <z_clock_set_timeout+0xb8>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   10ea0:	4c2d      	ldr	r4, [pc, #180]	; (10f58 <z_clock_set_timeout+0xbc>)
   10ea2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
   10ea6:	4b2d      	ldr	r3, [pc, #180]	; (10f5c <z_clock_set_timeout+0xc0>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   10ea8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   10eac:	bf08      	it	eq
   10eae:	4620      	moveq	r0, r4
	uint32_t unannounced = counter_sub(counter(), last_count);
   10eb0:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   10eb2:	1a52      	subs	r2, r2, r1
   10eb4:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   10eb8:	0212      	lsls	r2, r2, #8
   10eba:	d438      	bmi.n	10f2e <z_clock_set_timeout+0x92>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
   10ebc:	3801      	subs	r0, #1
   10ebe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   10ec2:	42a0      	cmp	r0, r4
   10ec4:	bfa8      	it	ge
   10ec6:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   10ec8:	3301      	adds	r3, #1
   10eca:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   10ecc:	42a0      	cmp	r0, r4
   10ece:	bf94      	ite	ls
   10ed0:	180c      	addls	r4, r1, r0
   10ed2:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
   10ed4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10ed8:	2600      	movs	r6, #0
    p_reg->INTENCLR = mask;
   10eda:	4a1e      	ldr	r2, [pc, #120]	; (10f54 <z_clock_set_timeout+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10edc:	4d20      	ldr	r5, [pc, #128]	; (10f60 <z_clock_set_timeout+0xc4>)
    p_reg->INTENCLR = mask;
   10ede:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
     return p_reg->COUNTER;
   10ee2:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
    return p_reg->CC[ch];
   10ee6:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10eea:	602e      	str	r6, [r5, #0]
	return (a - b) & COUNTER_MAX;
   10eec:	1a5b      	subs	r3, r3, r1
   10eee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   10ef2:	682f      	ldr	r7, [r5, #0]
	if (counter_sub(prev_val, now) == 1) {
   10ef4:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   10ef6:	f021 477f 	bic.w	r7, r1, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   10efa:	f8c2 7540 	str.w	r7, [r2, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   10efe:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
   10f02:	d104      	bne.n	10f0e <z_clock_set_timeout+0x72>
	z_impl_k_busy_wait(usec_to_wait);
   10f04:	200f      	movs	r0, #15
   10f06:	f004 f80c 	bl	14f22 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10f0a:	602e      	str	r6, [r5, #0]
   10f0c:	682b      	ldr	r3, [r5, #0]
   10f0e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10f12:	4b14      	ldr	r3, [pc, #80]	; (10f64 <z_clock_set_timeout+0xc8>)
   10f14:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   10f18:	4b0e      	ldr	r3, [pc, #56]	; (10f54 <z_clock_set_timeout+0xb8>)
   10f1a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   10f1e:	1a22      	subs	r2, r4, r0
   10f20:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (diff == 1) {
   10f24:	2a01      	cmp	r2, #1
   10f26:	d104      	bne.n	10f32 <z_clock_set_timeout+0x96>
		handle_next_cycle_case(t);
   10f28:	f7ff ff64 	bl	10df4 <handle_next_cycle_case>
   10f2c:	e00b      	b.n	10f46 <z_clock_set_timeout+0xaa>
		ticks = 0;
   10f2e:	2000      	movs	r0, #0
   10f30:	e7ca      	b.n	10ec8 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   10f32:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   10f36:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
   10f3a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   10f3e:	1a24      	subs	r4, r4, r0
   10f40:	3c02      	subs	r4, #2
	if (diff > MAX_CYCLES) {
   10f42:	0223      	lsls	r3, r4, #8
   10f44:	d4f0      	bmi.n	10f28 <z_clock_set_timeout+0x8c>
    p_reg->INTENSET = mask;
   10f46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   10f4a:	4b02      	ldr	r3, [pc, #8]	; (10f54 <z_clock_set_timeout+0xb8>)
   10f4c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
   10f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10f52:	bf00      	nop
   10f54:	50015000 	.word	0x50015000
   10f58:	007fffff 	.word	0x007fffff
   10f5c:	200002b4 	.word	0x200002b4
   10f60:	50015140 	.word	0x50015140
   10f64:	e000e100 	.word	0xe000e100

00010f68 <z_clock_elapsed>:
	__asm__ volatile(
   10f68:	f04f 0220 	mov.w	r2, #32
   10f6c:	f3ef 8311 	mrs	r3, BASEPRI
   10f70:	f382 8811 	msr	BASEPRI, r2
   10f74:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
   10f78:	4a06      	ldr	r2, [pc, #24]	; (10f94 <z_clock_elapsed+0x2c>)
   10f7a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   10f7e:	4a06      	ldr	r2, [pc, #24]	; (10f98 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
   10f80:	6812      	ldr	r2, [r2, #0]
   10f82:	1a80      	subs	r0, r0, r2
   10f84:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
   10f88:	f383 8811 	msr	BASEPRI, r3
   10f8c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   10f90:	4770      	bx	lr
   10f92:	bf00      	nop
   10f94:	50015000 	.word	0x50015000
   10f98:	200002b4 	.word	0x200002b4

00010f9c <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, uint32_t perm)
{
   10f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
   10f9e:	2800      	cmp	r0, #0
{
   10fa0:	461c      	mov	r4, r3

	for (size_t i = start; i < end; i++) {
   10fa2:	460d      	mov	r5, r1
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
   10fa4:	bf14      	ite	ne
   10fa6:	f44f 5300 	movne.w	r3, #8192	; 0x2000
   10faa:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
	for (size_t i = start; i < end; i++) {
   10fae:	4e20      	ldr	r6, [pc, #128]	; (11030 <config_regions+0x94>)
   10fb0:	4295      	cmp	r5, r2
   10fb2:	d332      	bcc.n	1101a <config_regions+0x7e>
		} else {
			NRF_SPU->FLASHREGION[i].PERM = perm;
		}
	}

	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
   10fb4:	fb02 f003 	mul.w	r0, r2, r3
   10fb8:	3a01      	subs	r2, #1
   10fba:	9000      	str	r0, [sp, #0]
   10fbc:	434b      	muls	r3, r1
   10fbe:	481d      	ldr	r0, [pc, #116]	; (11034 <config_regions+0x98>)
   10fc0:	f003 facb 	bl	1455a <printk>
				region_size * start, region_size * end);
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
   10fc4:	4b1c      	ldr	r3, [pc, #112]	; (11038 <config_regions+0x9c>)
   10fc6:	f014 0f10 	tst.w	r4, #16
   10fca:	491c      	ldr	r1, [pc, #112]	; (1103c <config_regions+0xa0>)
   10fcc:	481c      	ldr	r0, [pc, #112]	; (11040 <config_regions+0xa4>)
   10fce:	bf08      	it	eq
   10fd0:	4619      	moveq	r1, r3
   10fd2:	f003 fac2 	bl	1455a <printk>
								"Non-Secure\t");
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
   10fd6:	f014 0f04 	tst.w	r4, #4
   10fda:	bf14      	ite	ne
   10fdc:	2172      	movne	r1, #114	; 0x72
   10fde:	212d      	moveq	r1, #45	; 0x2d
   10fe0:	4818      	ldr	r0, [pc, #96]	; (11044 <config_regions+0xa8>)
   10fe2:	f003 faba 	bl	1455a <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
   10fe6:	f014 0f02 	tst.w	r4, #2
   10fea:	bf14      	ite	ne
   10fec:	2177      	movne	r1, #119	; 0x77
   10fee:	212d      	moveq	r1, #45	; 0x2d
   10ff0:	4814      	ldr	r0, [pc, #80]	; (11044 <config_regions+0xa8>)
   10ff2:	f003 fab2 	bl	1455a <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
   10ff6:	f014 0f01 	tst.w	r4, #1
   10ffa:	bf0c      	ite	eq
   10ffc:	212d      	moveq	r1, #45	; 0x2d
   10ffe:	2178      	movne	r1, #120	; 0x78
   11000:	4810      	ldr	r0, [pc, #64]	; (11044 <config_regions+0xa8>)
   11002:	f003 faaa 	bl	1455a <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
   11006:	216c      	movs	r1, #108	; 0x6c
   11008:	480e      	ldr	r0, [pc, #56]	; (11044 <config_regions+0xa8>)
   1100a:	f003 faa6 	bl	1455a <printk>
	PRINT("\n");
   1100e:	480e      	ldr	r0, [pc, #56]	; (11048 <config_regions+0xac>)
}
   11010:	b003      	add	sp, #12
   11012:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
   11016:	f003 baa0 	b.w	1455a <printk>
		if (ram) {
   1101a:	b128      	cbz	r0, 11028 <config_regions+0x8c>
			NRF_SPU->RAMREGION[i].PERM = perm;
   1101c:	f505 77e0 	add.w	r7, r5, #448	; 0x1c0
			NRF_SPU->FLASHREGION[i].PERM = perm;
   11020:	f846 4027 	str.w	r4, [r6, r7, lsl #2]
	for (size_t i = start; i < end; i++) {
   11024:	3501      	adds	r5, #1
   11026:	e7c3      	b.n	10fb0 <config_regions+0x14>
			NRF_SPU->FLASHREGION[i].PERM = perm;
   11028:	f505 77c0 	add.w	r7, r5, #384	; 0x180
   1102c:	e7f8      	b.n	11020 <config_regions+0x84>
   1102e:	bf00      	nop
   11030:	50003000 	.word	0x50003000
   11034:	0001557c 	.word	0x0001557c
   11038:	00015570 	.word	0x00015570
   1103c:	00015567 	.word	0x00015567
   11040:	00015686 	.word	0x00015686
   11044:	00015596 	.word	0x00015596
   11048:	000158d1 	.word	0x000158d1

0001104c <spm_config_peripheral.constprop.1>:
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int spm_config_peripheral(uint8_t id, bool dma_present)
   1104c:	b508      	push	{r3, lr}
	 * Assign DMA capabilities and lock down the attribution.
	 *
	 * Note: the function assumes that the peripheral ID matches
	 * the IRQ line.
	 */
	NVIC_DisableIRQ(id);
   1104e:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   11050:	2b00      	cmp	r3, #0
   11052:	db0c      	blt.n	1106e <spm_config_peripheral.constprop.1+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11054:	2201      	movs	r2, #1
   11056:	f000 011f 	and.w	r1, r0, #31
   1105a:	408a      	lsls	r2, r1
   1105c:	095b      	lsrs	r3, r3, #5
   1105e:	4910      	ldr	r1, [pc, #64]	; (110a0 <spm_config_peripheral.constprop.1+0x54>)
   11060:	3320      	adds	r3, #32
   11062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   11066:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1106a:	f3bf 8f6f 	isb	sy
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
   1106e:	0083      	lsls	r3, r0, #2
   11070:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
   11074:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
   11078:	2831      	cmp	r0, #49	; 0x31
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
   1107a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
   1107e:	d006      	beq.n	1108e <spm_config_peripheral.constprop.1+0x42>
	return present && (usel || split);
   11080:	2a00      	cmp	r2, #0
   11082:	da07      	bge.n	11094 <spm_config_peripheral.constprop.1+0x48>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
   11084:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
   11088:	3a02      	subs	r2, #2
   1108a:	2a01      	cmp	r2, #1
   1108c:	d802      	bhi.n	11094 <spm_config_peripheral.constprop.1+0x48>

	if (usel_or_split(id)) {
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
   1108e:	4a05      	ldr	r2, [pc, #20]	; (110a4 <spm_config_peripheral.constprop.1+0x58>)
   11090:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
   11094:	2101      	movs	r1, #1
   11096:	f003 fcee 	bl	14a76 <irq_target_state_set>
	return 0;
}
   1109a:	2000      	movs	r0, #0
   1109c:	bd08      	pop	{r3, pc}
   1109e:	bf00      	nop
   110a0:	e000e100 	.word	0xe000e100
   110a4:	80000100 	.word	0x80000100

000110a8 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
   110a8:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	uint32_t *vtor_ns = (uint32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
   110aa:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
{
   110ae:	b085      	sub	sp, #20
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
   110b0:	4d2e      	ldr	r5, [pc, #184]	; (1116c <spm_jump+0xc4>)
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
   110b2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   110b6:	482e      	ldr	r0, [pc, #184]	; (11170 <spm_jump+0xc8>)
   110b8:	f003 fa4f 	bl	1455a <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
   110bc:	6821      	ldr	r1, [r4, #0]
   110be:	482d      	ldr	r0, [pc, #180]	; (11174 <spm_jump+0xcc>)
   110c0:	f003 fa4b 	bl	1455a <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
   110c4:	6829      	ldr	r1, [r5, #0]
   110c6:	482c      	ldr	r0, [pc, #176]	; (11178 <spm_jump+0xd0>)
   110c8:	f003 fa47 	bl	1455a <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
   110cc:	2210      	movs	r2, #16
   110ce:	2100      	movs	r1, #0
   110d0:	4668      	mov	r0, sp
   110d2:	f003 fd97 	bl	14c04 <memset>
		.vtor_ns = (uint32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
   110d6:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
   110d8:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
   110da:	9300      	str	r3, [sp, #0]
   110dc:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
   110de:	f000 fe75 	bl	11dcc <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
   110e2:	2001      	movs	r0, #1
   110e4:	f000 fea2 	bl	11e2c <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
   110e8:	2000      	movs	r0, #0
   110ea:	f000 fe8b 	bl	11e04 <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
   110ee:	2000      	movs	r0, #0
   110f0:	f000 feb0 	bl	11e54 <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
   110f4:	2101      	movs	r1, #1
   110f6:	2000      	movs	r0, #0
   110f8:	f000 feca 	bl	11e90 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
   110fc:	f000 febe 	bl	11e7c <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
   11100:	682c      	ldr	r4, [r5, #0]

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
   11102:	481e      	ldr	r0, [pc, #120]	; (1117c <spm_jump+0xd4>)
   11104:	f003 fa29 	bl	1455a <printk>
		/* Note: Move UARTE0 before jumping, if it is
		 * to be used on the Non-Secure domain.
		 */

		/* Configure UARTE0 as non-secure */
		spm_config_peripheral(
   11108:	2008      	movs	r0, #8
   1110a:	f7ff ff9f 	bl	1104c <spm_config_peripheral.constprop.1>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
   1110e:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
   11112:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11116:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
   1111a:	0864      	lsrs	r4, r4, #1
   1111c:	0064      	lsls	r4, r4, #1
   1111e:	4620      	mov	r0, r4
   11120:	4621      	mov	r1, r4
   11122:	4622      	mov	r2, r4
   11124:	4623      	mov	r3, r4
   11126:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1112a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   1112e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
   11132:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
   11136:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
   1113a:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
   1113e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   11142:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   11146:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   1114a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   1114e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   11152:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   11156:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1115a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   1115e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   11162:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   11166:	f7ff fae7 	bl	10738 <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
   1116a:	bf00      	nop
   1116c:	0001c204 	.word	0x0001c204
   11170:	0001569d 	.word	0x0001569d
   11174:	000156b4 	.word	0x000156b4
   11178:	000156c9 	.word	0x000156c9
   1117c:	000156e7 	.word	0x000156e7

00011180 <spm_config>:
		      (uint32_t)reset_ns);
	}
}

void spm_config(void)
{
   11180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
   11184:	483b      	ldr	r0, [pc, #236]	; (11274 <spm_config+0xf4>)
   11186:	f003 f9e8 	bl	1455a <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
   1118a:	2100      	movs	r1, #0
   1118c:	f240 1317 	movw	r3, #279	; 0x117
   11190:	4608      	mov	r0, r1
   11192:	2203      	movs	r2, #3
   11194:	f7ff ff02 	bl	10f9c <config_regions>
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
   11198:	f240 1307 	movw	r3, #263	; 0x107
   1119c:	2220      	movs	r2, #32
   1119e:	2103      	movs	r1, #3
   111a0:	2000      	movs	r0, #0
   111a2:	f7ff fefb 	bl	10f9c <config_regions>
	PRINT("\n");
   111a6:	4834      	ldr	r0, [pc, #208]	; (11278 <spm_config+0xf8>)
   111a8:	f003 f9d7 	bl	1455a <printk>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
   111ac:	4b33      	ldr	r3, [pc, #204]	; (1127c <spm_config+0xfc>)
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
   111ae:	4a34      	ldr	r2, [pc, #208]	; (11280 <spm_config+0x100>)
   111b0:	f3c3 31c4 	ubfx	r1, r3, #15, #5
   111b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
   111b8:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
   111bc:	f3c3 1343 	ubfx	r3, r3, #5, #4
    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
   111c0:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
   111c4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
   111c8:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
   111cc:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
   111d0:	482c      	ldr	r0, [pc, #176]	; (11284 <spm_config+0x104>)
   111d2:	0152      	lsls	r2, r2, #5
   111d4:	f003 f9c1 	bl	1455a <printk>
	PRINT("\n");
   111d8:	4827      	ldr	r0, [pc, #156]	; (11278 <spm_config+0xf8>)
   111da:	f003 f9be 	bl	1455a <printk>
	int err = spm_secure_services_init();
   111de:	f003 fbf8 	bl	149d2 <spm_secure_services_init>
	if (err != 0) {
   111e2:	4601      	mov	r1, r0
   111e4:	b110      	cbz	r0, 111ec <spm_config+0x6c>
		PRINT("Could not initialize secure services (err %d).\n", err);
   111e6:	4828      	ldr	r0, [pc, #160]	; (11288 <spm_config+0x108>)
   111e8:	f003 f9b7 	bl	1455a <printk>
	NRF_SPU->DPPI[0].PERM = mask;
   111ec:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
   111ee:	4827      	ldr	r0, [pc, #156]	; (1128c <spm_config+0x10c>)
   111f0:	f003 f9b3 	bl	1455a <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
   111f4:	f240 1317 	movw	r3, #279	; 0x117
   111f8:	2208      	movs	r2, #8
   111fa:	2100      	movs	r1, #0
   111fc:	2001      	movs	r0, #1
   111fe:	f7ff fecd 	bl	10f9c <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
   11202:	4d1f      	ldr	r5, [pc, #124]	; (11280 <spm_config+0x100>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
   11204:	f240 1307 	movw	r3, #263	; 0x107
   11208:	2220      	movs	r2, #32
   1120a:	2108      	movs	r1, #8
   1120c:	2001      	movs	r0, #1
   1120e:	f7ff fec5 	bl	10f9c <config_regions>
	PRINT("\n");
   11212:	4819      	ldr	r0, [pc, #100]	; (11278 <spm_config+0xf8>)
   11214:	f003 f9a1 	bl	1455a <printk>
	NRF_SPU->DPPI[0].PERM = mask;
   11218:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
   1121c:	481c      	ldr	r0, [pc, #112]	; (11290 <spm_config+0x110>)
   1121e:	f003 f99c 	bl	1455a <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
   11222:	4f1c      	ldr	r7, [pc, #112]	; (11294 <spm_config+0x114>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
   11224:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
   11228:	f8df 807c 	ldr.w	r8, [pc, #124]	; 112a8 <spm_config+0x128>
   1122c:	4d1a      	ldr	r5, [pc, #104]	; (11298 <spm_config+0x118>)
   1122e:	f8df 907c 	ldr.w	r9, [pc, #124]	; 112ac <spm_config+0x12c>
   11232:	796e      	ldrb	r6, [r5, #5]
   11234:	682a      	ldr	r2, [r5, #0]
   11236:	2e00      	cmp	r6, #0
   11238:	bf14      	ite	ne
   1123a:	463b      	movne	r3, r7
   1123c:	4643      	moveq	r3, r8
   1123e:	4621      	mov	r1, r4
   11240:	4648      	mov	r0, r9
   11242:	f003 f98a 	bl	1455a <printk>
		if (!periph[i].nonsecure) {
   11246:	b966      	cbnz	r6, 11262 <spm_config+0xe2>
			PRINT("\tSKIP\n");
   11248:	4814      	ldr	r0, [pc, #80]	; (1129c <spm_config+0x11c>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
   1124a:	3401      	adds	r4, #1
			PRINT("\tOK\n");
   1124c:	f003 f985 	bl	1455a <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
   11250:	2c1a      	cmp	r4, #26
   11252:	f105 0508 	add.w	r5, r5, #8
   11256:	d1ec      	bne.n	11232 <spm_config+0xb2>
	PRINT("\n");
   11258:	4807      	ldr	r0, [pc, #28]	; (11278 <spm_config+0xf8>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
   1125a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
   1125e:	f003 b97c 	b.w	1455a <printk>
		err = spm_config_peripheral(periph[i].id, false);
   11262:	7928      	ldrb	r0, [r5, #4]
   11264:	f7ff fef2 	bl	1104c <spm_config_peripheral.constprop.1>
		if (err) {
   11268:	b108      	cbz	r0, 1126e <spm_config+0xee>
			PRINT("\tERROR\n");
   1126a:	480d      	ldr	r0, [pc, #52]	; (112a0 <spm_config+0x120>)
   1126c:	e7ed      	b.n	1124a <spm_config+0xca>
			PRINT("\tOK\n");
   1126e:	480d      	ldr	r0, [pc, #52]	; (112a4 <spm_config+0x124>)
   11270:	e7eb      	b.n	1124a <spm_config+0xca>
   11272:	bf00      	nop
   11274:	000155a4 	.word	0x000155a4
   11278:	000158d1 	.word	0x000158d1
   1127c:	00017fe0 	.word	0x00017fe0
   11280:	50003000 	.word	0x50003000
   11284:	000155c8 	.word	0x000155c8
   11288:	0001560e 	.word	0x0001560e
   1128c:	0001563e 	.word	0x0001563e
   11290:	00015660 	.word	0x00015660
   11294:	00015599 	.word	0x00015599
   11298:	000152b8 	.word	0x000152b8
   1129c:	00015689 	.word	0x00015689
   112a0:	00015690 	.word	0x00015690
   112a4:	00015698 	.word	0x00015698
   112a8:	00015574 	.word	0x00015574
   112ac:	0001567c 	.word	0x0001567c

000112b0 <__acle_se_spm_request_read>:
};


__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read(void *destination, uint32_t addr, size_t len)
{
   112b0:	b510      	push	{r4, lr}
		 .size = FICR_PUBLIC_SIZE},
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
   112b2:	2800      	cmp	r0, #0
   112b4:	d050      	beq.n	11358 <__acle_se_spm_request_read+0xa8>
   112b6:	2a00      	cmp	r2, #0
   112b8:	d04e      	beq.n	11358 <__acle_se_spm_request_read+0xa8>

	for (size_t i = 0; i < ARRAY_SIZE(ranges); i++) {
		uint32_t start = ranges[i].start;
		uint32_t size = ranges[i].size;

		if (addr >= start && addr + len <= start + size) {
   112ba:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   112be:	d348      	bcc.n	11352 <__acle_se_spm_request_read+0xa2>
   112c0:	1853      	adds	r3, r2, r1
   112c2:	f5b3 3f81 	cmp.w	r3, #66048	; 0x10200
   112c6:	d906      	bls.n	112d6 <__acle_se_spm_request_read+0x26>
   112c8:	4c25      	ldr	r4, [pc, #148]	; (11360 <__acle_se_spm_request_read+0xb0>)
   112ca:	42a1      	cmp	r1, r4
   112cc:	d93b      	bls.n	11346 <__acle_se_spm_request_read+0x96>
   112ce:	f604 241d 	addw	r4, r4, #2589	; 0xa1d
   112d2:	42a3      	cmp	r3, r4
   112d4:	d83a      	bhi.n	1134c <__acle_se_spm_request_read+0x9c>
			memcpy(destination, (const void *)addr, len);
   112d6:	f003 fc6b 	bl	14bb0 <memcpy>
			return 0;
   112da:	2000      	movs	r0, #0
		}
	}

	return -EPERM;
}
   112dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   112e0:	4671      	mov	r1, lr
   112e2:	4672      	mov	r2, lr
   112e4:	4673      	mov	r3, lr
   112e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   112ea:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   112ee:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
   112f2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
   112f6:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
   112fa:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
   112fe:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   11302:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   11306:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   1130a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   1130e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   11312:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   11316:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1131a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   1131e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   11322:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   11326:	f38e 8c00 	msr	CPSR_fs, lr
   1132a:	b410      	push	{r4}
   1132c:	eef1 ca10 	vmrs	ip, fpscr
   11330:	f64f 7460 	movw	r4, #65376	; 0xff60
   11334:	f6c0 74ff 	movt	r4, #4095	; 0xfff
   11338:	ea0c 0c04 	and.w	ip, ip, r4
   1133c:	eee1 ca10 	vmsr	fpscr, ip
   11340:	bc10      	pop	{r4}
   11342:	46f4      	mov	ip, lr
   11344:	4774      	bxns	lr
		if (addr >= start && addr + len <= start + size) {
   11346:	4c07      	ldr	r4, [pc, #28]	; (11364 <__acle_se_spm_request_read+0xb4>)
   11348:	42a1      	cmp	r1, r4
   1134a:	d902      	bls.n	11352 <__acle_se_spm_request_read+0xa2>
   1134c:	4c06      	ldr	r4, [pc, #24]	; (11368 <__acle_se_spm_request_read+0xb8>)
   1134e:	42a3      	cmp	r3, r4
   11350:	d9c1      	bls.n	112d6 <__acle_se_spm_request_read+0x26>
	return -EPERM;
   11352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11356:	e7c1      	b.n	112dc <__acle_se_spm_request_read+0x2c>
		return -EINVAL;
   11358:	f06f 0015 	mvn.w	r0, #21
   1135c:	e7be      	b.n	112dc <__acle_se_spm_request_read+0x2c>
   1135e:	bf00      	nop
   11360:	00ff0203 	.word	0x00ff0203
   11364:	00ff012f 	.word	0x00ff012f
   11368:	00ff0138 	.word	0x00ff0138

0001136c <__acle_se_spm_firmware_info>:


#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info(uint32_t fw_address, struct fw_info *info)
{
   1136c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11370:	4683      	mov	fp, r0
   11372:	b085      	sub	sp, #20
	const struct fw_info *tmp_info;

	if (info == NULL) {
   11374:	4689      	mov	r9, r1
   11376:	2900      	cmp	r1, #0
   11378:	d051      	beq.n	1141e <__acle_se_spm_firmware_info+0xb2>
 */
static inline const struct fw_info *fw_info_find(uint32_t firmware_address)
{
	const struct fw_info *finfo;

	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
   1137a:	2700      	movs	r7, #0
   1137c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 11430 <__acle_se_spm_firmware_info+0xc4>
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
   11380:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 11434 <__acle_se_spm_firmware_info+0xc8>
   11384:	ae01      	add	r6, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
   11386:	f85a 4b04 	ldr.w	r4, [sl], #4
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
   1138a:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
   1138e:	445c      	add	r4, fp
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
   11390:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
   11394:	220c      	movs	r2, #12
   11396:	4631      	mov	r1, r6
   11398:	4620      	mov	r0, r4
   1139a:	f003 fbe2 	bl	14b62 <memcmp>
   1139e:	4605      	mov	r5, r0
   113a0:	b908      	cbnz	r0, 113a6 <__acle_se_spm_firmware_info+0x3a>
		if (finfo) {
   113a2:	2c00      	cmp	r4, #0
   113a4:	d13e      	bne.n	11424 <__acle_se_spm_firmware_info+0xb8>
	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
   113a6:	3701      	adds	r7, #1
   113a8:	2f05      	cmp	r7, #5
   113aa:	d1ec      	bne.n	11386 <__acle_se_spm_firmware_info+0x1a>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
   113ac:	f06f 050d 	mvn.w	r5, #13
}
   113b0:	4628      	mov	r0, r5
   113b2:	b005      	add	sp, #20
   113b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   113b8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   113bc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
   113c0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
   113c4:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
   113c8:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
   113cc:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   113d0:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   113d4:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   113d8:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   113dc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   113e0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   113e4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   113e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   113ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   113f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113f4:	4671      	mov	r1, lr
   113f6:	4672      	mov	r2, lr
   113f8:	4673      	mov	r3, lr
   113fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   113fe:	f38e 8c00 	msr	CPSR_fs, lr
   11402:	b410      	push	{r4}
   11404:	eef1 ca10 	vmrs	ip, fpscr
   11408:	f64f 7460 	movw	r4, #65376	; 0xff60
   1140c:	f6c0 74ff 	movt	r4, #4095	; 0xfff
   11410:	ea0c 0c04 	and.w	ip, ip, r4
   11414:	eee1 ca10 	vmsr	fpscr, ip
   11418:	bc10      	pop	{r4}
   1141a:	46f4      	mov	ip, lr
   1141c:	4774      	bxns	lr
		return -EINVAL;
   1141e:	f06f 0515 	mvn.w	r5, #21
   11422:	e7c5      	b.n	113b0 <__acle_se_spm_firmware_info+0x44>
		memcpy(info, tmp_info, sizeof(*tmp_info));
   11424:	223c      	movs	r2, #60	; 0x3c
   11426:	4621      	mov	r1, r4
   11428:	4648      	mov	r0, r9
   1142a:	f003 fbc1 	bl	14bb0 <memcpy>
		return 0;
   1142e:	e7bf      	b.n	113b0 <__acle_se_spm_firmware_info+0x44>
   11430:	00015388 	.word	0x00015388
   11434:	00015230 	.word	0x00015230

00011438 <nrf_cc310_platform_abort_init>:

/** @brief Function to initialize the nrf_cc310_platform abort APIs.
 */
void nrf_cc310_platform_abort_init(void)
{
	nrf_cc310_platform_set_abort(&apis);
   11438:	4801      	ldr	r0, [pc, #4]	; (11440 <nrf_cc310_platform_abort_init+0x8>)
   1143a:	f002 ba71 	b.w	13920 <nrf_cc310_platform_set_abort>
   1143e:	bf00      	nop
   11440:	0001539c 	.word	0x0001539c

00011444 <mutex_unlock>:
}


/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock(nrf_cc310_platform_mutex_t *mutex) {
   11444:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   11446:	b130      	cbz	r0, 11456 <mutex_unlock+0x12>
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    }

    /* Ensure that the mutex has been initialized */
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
   11448:	6843      	ldr	r3, [r0, #4]
   1144a:	b13b      	cbz	r3, 1145c <mutex_unlock+0x18>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    }

    p_mutex = (struct k_mutex *)mutex->mutex;
   1144c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   1144e:	f001 fa79 	bl	12944 <z_impl_k_mutex_unlock>

    k_mutex_unlock(p_mutex);
    return NRF_CC310_PLATFORM_SUCCESS;
   11452:	2000      	movs	r0, #0
}
   11454:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
   11456:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1145a:	e7fb      	b.n	11454 <mutex_unlock+0x10>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   1145c:	4800      	ldr	r0, [pc, #0]	; (11460 <mutex_unlock+0x1c>)
   1145e:	e7f9      	b.n	11454 <mutex_unlock+0x10>
   11460:	ffff8fea 	.word	0xffff8fea

00011464 <mutex_free>:
static void mutex_free(nrf_cc310_platform_mutex_t *mutex) {
   11464:	b538      	push	{r3, r4, r5, lr}
    if (mutex == NULL) {
   11466:	4604      	mov	r4, r0
   11468:	b918      	cbnz	r0, 11472 <mutex_free+0xe>
        platform_abort_apis.abort_fn(
   1146a:	4b0b      	ldr	r3, [pc, #44]	; (11498 <mutex_free+0x34>)
   1146c:	480b      	ldr	r0, [pc, #44]	; (1149c <mutex_free+0x38>)
   1146e:	685b      	ldr	r3, [r3, #4]
   11470:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
   11472:	6865      	ldr	r5, [r4, #4]
   11474:	b155      	cbz	r5, 1148c <mutex_free+0x28>
    if ((mutex->flags & NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED) == 0) {
   11476:	f015 0502 	ands.w	r5, r5, #2
   1147a:	6820      	ldr	r0, [r4, #0]
   1147c:	d107      	bne.n	1148e <mutex_free+0x2a>
        k_mem_slab_free(&mutex_slab, mutex->mutex);
   1147e:	4601      	mov	r1, r0
   11480:	4807      	ldr	r0, [pc, #28]	; (114a0 <mutex_free+0x3c>)
   11482:	f001 f9bd 	bl	12800 <k_mem_slab_free>
        mutex->mutex = NULL;
   11486:	6025      	str	r5, [r4, #0]
    mutex->flags = NRF_CC310_PLATFORM_MUTEX_MASK_INVALID;
   11488:	2300      	movs	r3, #0
   1148a:	6063      	str	r3, [r4, #4]
}
   1148c:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   1148e:	2214      	movs	r2, #20
   11490:	2100      	movs	r1, #0
   11492:	f003 fbb7 	bl	14c04 <memset>
   11496:	e7f7      	b.n	11488 <mutex_free+0x24>
   11498:	20000070 	.word	0x20000070
   1149c:	0001580e 	.word	0x0001580e
   114a0:	200002b8 	.word	0x200002b8

000114a4 <mutex_init>:
static void mutex_init(nrf_cc310_platform_mutex_t *mutex) {
   114a4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   114a6:	4604      	mov	r4, r0
   114a8:	b918      	cbnz	r0, 114b2 <mutex_init+0xe>
        platform_abort_apis.abort_fn(
   114aa:	4b14      	ldr	r3, [pc, #80]	; (114fc <mutex_init+0x58>)
   114ac:	4814      	ldr	r0, [pc, #80]	; (11500 <mutex_init+0x5c>)
   114ae:	685b      	ldr	r3, [r3, #4]
   114b0:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID &&
   114b2:	6863      	ldr	r3, [r4, #4]
   114b4:	b9cb      	cbnz	r3, 114ea <mutex_init+0x46>
   114b6:	6823      	ldr	r3, [r4, #0]
   114b8:	b9bb      	cbnz	r3, 114ea <mutex_init+0x46>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   114ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   114be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   114c2:	4621      	mov	r1, r4
   114c4:	480f      	ldr	r0, [pc, #60]	; (11504 <mutex_init+0x60>)
   114c6:	f001 f969 	bl	1279c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   114ca:	b908      	cbnz	r0, 114d0 <mutex_init+0x2c>
   114cc:	6823      	ldr	r3, [r4, #0]
   114ce:	b91b      	cbnz	r3, 114d8 <mutex_init+0x34>
            platform_abort_apis.abort_fn(
   114d0:	4b0a      	ldr	r3, [pc, #40]	; (114fc <mutex_init+0x58>)
   114d2:	480d      	ldr	r0, [pc, #52]	; (11508 <mutex_init+0x64>)
   114d4:	685b      	ldr	r3, [r3, #4]
   114d6:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   114d8:	2214      	movs	r2, #20
   114da:	2100      	movs	r1, #0
   114dc:	6820      	ldr	r0, [r4, #0]
   114de:	f003 fb91 	bl	14c04 <memset>
        mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   114e2:	6863      	ldr	r3, [r4, #4]
   114e4:	f043 0302 	orr.w	r3, r3, #2
   114e8:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   114ea:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   114ec:	f003 fc66 	bl	14dbc <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_VALID;
   114f0:	6863      	ldr	r3, [r4, #4]
   114f2:	f043 0301 	orr.w	r3, r3, #1
   114f6:	6063      	str	r3, [r4, #4]
}
   114f8:	bd10      	pop	{r4, pc}
   114fa:	bf00      	nop
   114fc:	20000070 	.word	0x20000070
   11500:	0001580e 	.word	0x0001580e
   11504:	200002b8 	.word	0x200002b8
   11508:	00015834 	.word	0x00015834

0001150c <mutex_lock>:
static int32_t mutex_lock(nrf_cc310_platform_mutex_t *mutex) {
   1150c:	b508      	push	{r3, lr}
    if(mutex == NULL) {
   1150e:	b168      	cbz	r0, 1152c <mutex_lock+0x20>
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
   11510:	6843      	ldr	r3, [r0, #4]
   11512:	b173      	cbz	r3, 11532 <mutex_lock+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
   11514:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   11516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1151a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1151e:	f001 f999 	bl	12854 <z_impl_k_mutex_lock>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
   11522:	4b05      	ldr	r3, [pc, #20]	; (11538 <mutex_lock+0x2c>)
    if (ret == 0) {
   11524:	2800      	cmp	r0, #0
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
   11526:	bf18      	it	ne
   11528:	4618      	movne	r0, r3
}
   1152a:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
   1152c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   11530:	e7fb      	b.n	1152a <mutex_lock+0x1e>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   11532:	4802      	ldr	r0, [pc, #8]	; (1153c <mutex_lock+0x30>)
   11534:	e7f9      	b.n	1152a <mutex_lock+0x1e>
   11536:	bf00      	nop
   11538:	ffff8fe9 	.word	0xffff8fe9
   1153c:	ffff8fea 	.word	0xffff8fea

00011540 <nrf_cc310_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc310_platform mutex APIs
 */
void nrf_cc310_platform_mutex_init(void)
{
   11540:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   11542:	4906      	ldr	r1, [pc, #24]	; (1155c <nrf_cc310_platform_mutex_init+0x1c>)
   11544:	2340      	movs	r3, #64	; 0x40
   11546:	2214      	movs	r2, #20
   11548:	4805      	ldr	r0, [pc, #20]	; (11560 <nrf_cc310_platform_mutex_init+0x20>)
   1154a:	f003 fc1c 	bl	14d86 <k_mem_slab_init>
            mutex_slab_buffer,
            sizeof(struct k_mutex),
            NUM_MUTEXES);

    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
}
   1154e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
   11552:	4904      	ldr	r1, [pc, #16]	; (11564 <nrf_cc310_platform_mutex_init+0x24>)
   11554:	4804      	ldr	r0, [pc, #16]	; (11568 <nrf_cc310_platform_mutex_init+0x28>)
   11556:	f002 ba1b 	b.w	13990 <nrf_cc310_platform_set_mutexes>
   1155a:	bf00      	nop
   1155c:	200002d4 	.word	0x200002d4
   11560:	200002b8 	.word	0x200002b8
   11564:	000153b4 	.word	0x000153b4
   11568:	000153a4 	.word	0x000153a4

0001156c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   1156c:	4a09      	ldr	r2, [pc, #36]	; (11594 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1156e:	490a      	ldr	r1, [pc, #40]	; (11598 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   11570:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   11572:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   11574:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   11576:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11578:	4908      	ldr	r1, [pc, #32]	; (1159c <arch_swap+0x30>)
   1157a:	684b      	ldr	r3, [r1, #4]
   1157c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   11580:	604b      	str	r3, [r1, #4]
   11582:	2300      	movs	r3, #0
   11584:	f383 8811 	msr	BASEPRI, r3
   11588:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1158c:	6893      	ldr	r3, [r2, #8]
}
   1158e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   11590:	4770      	bx	lr
   11592:	bf00      	nop
   11594:	200007f0 	.word	0x200007f0
   11598:	00015428 	.word	0x00015428
   1159c:	e000ed00 	.word	0xe000ed00

000115a0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   115a0:	4913      	ldr	r1, [pc, #76]	; (115f0 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   115a2:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   115a4:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
   115a8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   115aa:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   115ae:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   115b2:	2020      	movs	r0, #32
    msr BASEPRI, r0
   115b4:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   115b8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   115bc:	4f0d      	ldr	r7, [pc, #52]	; (115f4 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   115be:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   115c2:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   115c4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   115c6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   115c8:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   115ca:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   115cc:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   115ce:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   115d2:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
   115d6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   115da:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   115de:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   115e2:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   115e4:	f003 fa75 	bl	14ad2 <configure_builtin_stack_guard>
    pop {r2, lr}
   115e8:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   115ec:	4770      	bx	lr
   115ee:	0000      	.short	0x0000
    ldr r1, =_kernel
   115f0:	200007f0 	.word	0x200007f0
    ldr v4, =_SCS_ICSR
   115f4:	e000ed04 	.word	0xe000ed04

000115f8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   115f8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   115fc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   115fe:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   11602:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   11606:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   11608:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1160c:	2902      	cmp	r1, #2
    beq _oops
   1160e:	d0ff      	beq.n	11610 <_oops>

00011610 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   11610:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   11612:	f003 fa64 	bl	14ade <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   11616:	bd01      	pop	{r0, pc}

00011618 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   11618:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   1161a:	2b00      	cmp	r3, #0
   1161c:	db08      	blt.n	11630 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1161e:	2201      	movs	r2, #1
   11620:	f000 001f 	and.w	r0, r0, #31
   11624:	fa02 f000 	lsl.w	r0, r2, r0
   11628:	4a02      	ldr	r2, [pc, #8]	; (11634 <arch_irq_enable+0x1c>)
   1162a:	095b      	lsrs	r3, r3, #5
   1162c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   11630:	4770      	bx	lr
   11632:	bf00      	nop
   11634:	e000e100 	.word	0xe000e100

00011638 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   11638:	4b05      	ldr	r3, [pc, #20]	; (11650 <arch_irq_is_enabled+0x18>)
   1163a:	0942      	lsrs	r2, r0, #5
   1163c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   11640:	2301      	movs	r3, #1
   11642:	f000 001f 	and.w	r0, r0, #31
   11646:	fa03 f000 	lsl.w	r0, r3, r0
}
   1164a:	4010      	ands	r0, r2
   1164c:	4770      	bx	lr
   1164e:	bf00      	nop
   11650:	e000e100 	.word	0xe000e100

00011654 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   11654:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   11656:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
   11658:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1165c:	bfa8      	it	ge
   1165e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
   11662:	ea4f 1141 	mov.w	r1, r1, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11666:	bfb8      	it	lt
   11668:	4b05      	ldrlt	r3, [pc, #20]	; (11680 <z_arm_irq_priority_set+0x2c>)
   1166a:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1166c:	bfab      	itete	ge
   1166e:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11672:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11676:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1167a:	5419      	strblt	r1, [r3, r0]
}
   1167c:	4770      	bx	lr
   1167e:	bf00      	nop
   11680:	e000ed14 	.word	0xe000ed14

00011684 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   11684:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   11688:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   1168a:	490b      	ldr	r1, [pc, #44]	; (116b8 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
   1168c:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   11690:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   11692:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   11696:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1169a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   1169c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   116a0:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   116a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   116a8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   116ac:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   116ae:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   116b0:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
   116b2:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   116b4:	4770      	bx	lr
   116b6:	bf00      	nop
   116b8:	000146cd 	.word	0x000146cd

000116bc <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   116bc:	b508      	push	{r3, lr}
   116be:	4604      	mov	r4, r0
   116c0:	460e      	mov	r6, r1
   116c2:	4615      	mov	r5, r2
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   116c4:	2300      	movs	r3, #0
   116c6:	eee1 3a10 	vmsr	fpscr, r3
	z_arm_configure_static_mpu_regions();
   116ca:	f000 fa0d 	bl	11ae8 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   116ce:	4b09      	ldr	r3, [pc, #36]	; (116f4 <arch_switch_to_main_thread+0x38>)
   116d0:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   116d2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   116d4:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   116d8:	4628      	mov	r0, r5
   116da:	f386 8809 	msr	PSP, r6
   116de:	2100      	movs	r1, #0
   116e0:	b663      	cpsie	if
   116e2:	f381 8811 	msr	BASEPRI, r1
   116e6:	f3bf 8f6f 	isb	sy
   116ea:	2200      	movs	r2, #0
   116ec:	2300      	movs	r3, #0
   116ee:	f002 ffed 	bl	146cc <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   116f2:	bf00      	nop
   116f4:	200007f0 	.word	0x200007f0

000116f8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   116f8:	4901      	ldr	r1, [pc, #4]	; (11700 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   116fa:	2210      	movs	r2, #16
	str	r2, [r1]
   116fc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   116fe:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   11700:	e000ed10 	.word	0xe000ed10

00011704 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   11704:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   11706:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   11708:	f380 8811 	msr	BASEPRI, r0
	isb
   1170c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   11710:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   11714:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   11716:	b662      	cpsie	i
	isb
   11718:	f3bf 8f6f 	isb	sy

	bx	lr
   1171c:	4770      	bx	lr
   1171e:	bf00      	nop

00011720 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   11720:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   11722:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   11724:	f381 8811 	msr	BASEPRI, r1

	wfe
   11728:	bf20      	wfe

	msr	BASEPRI, r0
   1172a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1172e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   11730:	4770      	bx	lr
   11732:	bf00      	nop

00011734 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   11734:	bf30      	wfi
    b z_SysNmiOnReset
   11736:	f7ff bffd 	b.w	11734 <z_SysNmiOnReset>
   1173a:	bf00      	nop

0001173c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1173c:	4a17      	ldr	r2, [pc, #92]	; (1179c <z_arm_prep_c+0x60>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   1173e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11740:	4b17      	ldr	r3, [pc, #92]	; (117a0 <z_arm_prep_c+0x64>)
   11742:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   11746:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   11748:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1174c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   11750:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   11754:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   11758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   1175c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   11760:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   11764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
   11768:	4a0e      	ldr	r2, [pc, #56]	; (117a4 <z_arm_prep_c+0x68>)
   1176a:	6853      	ldr	r3, [r2, #4]
   1176c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
   11770:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   11772:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11776:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   1177a:	2300      	movs	r3, #0
   1177c:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   11780:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   11784:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   11788:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   1178c:	f000 ff16 	bl	125bc <z_bss_zero>
	z_data_copy();
   11790:	f000 ff1e 	bl	125d0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   11794:	f000 f970 	bl	11a78 <z_arm_interrupt_init>
	z_cstart();
   11798:	f000 ff58 	bl	1264c <z_cstart>
   1179c:	00010200 	.word	0x00010200
   117a0:	e000ed00 	.word	0xe000ed00
   117a4:	e000ef30 	.word	0xe000ef30

000117a8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   117a8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   117aa:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   117ac:	4a0b      	ldr	r2, [pc, #44]	; (117dc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   117ae:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   117b0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   117b2:	bf1e      	ittt	ne
	movne	r1, #0
   117b4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   117b6:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   117b8:	f003 fae3 	blne	14d82 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   117bc:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   117be:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   117c2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   117c6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   117ca:	4905      	ldr	r1, [pc, #20]	; (117e0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   117cc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   117ce:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   117d0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   117d2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   117d6:	4903      	ldr	r1, [pc, #12]	; (117e4 <_isr_wrapper+0x3c>)
	bx r1
   117d8:	4708      	bx	r1
   117da:	0000      	.short	0x0000
	ldr r2, =_kernel
   117dc:	200007f0 	.word	0x200007f0
	ldr r1, =_sw_isr_table
   117e0:	00015024 	.word	0x00015024
	ldr r1, =z_arm_int_exit
   117e4:	00011a39 	.word	0x00011a39

000117e8 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   117e8:	f003 f856 	bl	14898 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   117ec:	2020      	movs	r0, #32
    msr BASEPRI, r0
   117ee:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   117f2:	4808      	ldr	r0, [pc, #32]	; (11814 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   117f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   117f8:	1840      	adds	r0, r0, r1
    msr PSP, r0
   117fa:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   117fe:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   11802:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   11804:	4308      	orrs	r0, r1
    msr CONTROL, r0
   11806:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1180a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1180e:	f7ff ff95 	bl	1173c <z_arm_prep_c>
   11812:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   11814:	20000d90 	.word	0x20000d90

00011818 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   11818:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1181c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   11820:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   11822:	4672      	mov	r2, lr
	bl z_arm_fault
   11824:	f000 f870 	bl	11908 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   11828:	bd01      	pop	{r0, pc}
   1182a:	bf00      	nop

0001182c <mem_manage_fault.isra.2>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1182c:	4b0c      	ldr	r3, [pc, #48]	; (11860 <mem_manage_fault.isra.2+0x34>)
   1182e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   11830:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   11832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11834:	0792      	lsls	r2, r2, #30
   11836:	d508      	bpl.n	1184a <mem_manage_fault.isra.2+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
   11838:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1183a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1183c:	0612      	lsls	r2, r2, #24
   1183e:	d504      	bpl.n	1184a <mem_manage_fault.isra.2+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
   11840:	b118      	cbz	r0, 1184a <mem_manage_fault.isra.2+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   11842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   11848:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
   1184a:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1184c:	4b04      	ldr	r3, [pc, #16]	; (11860 <mem_manage_fault.isra.2+0x34>)
   1184e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   11850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   11852:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   11854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11856:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   1185a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   1185c:	7008      	strb	r0, [r1, #0]

	return reason;
}
   1185e:	4770      	bx	lr
   11860:	e000ed00 	.word	0xe000ed00

00011864 <bus_fault.isra.3>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   11864:	4b0d      	ldr	r3, [pc, #52]	; (1189c <bus_fault.isra.3+0x38>)
   11866:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   11868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1186a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1186c:	0592      	lsls	r2, r2, #22
   1186e:	d508      	bpl.n	11882 <bus_fault.isra.3+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   11870:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   11872:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11874:	0412      	lsls	r2, r2, #16
   11876:	d504      	bpl.n	11882 <bus_fault.isra.3+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
   11878:	b118      	cbz	r0, 11882 <bus_fault.isra.3+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1187a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1187c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   11880:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
   11882:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   11884:	4b05      	ldr	r3, [pc, #20]	; (1189c <bus_fault.isra.3+0x38>)
   11886:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   11888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1188a:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1188c:	bf58      	it	pl
   1188e:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   11890:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11892:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   11896:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   11898:	7008      	strb	r0, [r1, #0]

	return reason;
}
   1189a:	4770      	bx	lr
   1189c:	e000ed00 	.word	0xe000ed00

000118a0 <usage_fault.isra.4>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   118a0:	4b09      	ldr	r3, [pc, #36]	; (118c8 <usage_fault.isra.4+0x28>)
   118a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   118a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   118a6:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   118a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   118aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   118ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   118ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   118b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   118b2:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   118b6:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   118ba:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
   118be:	bf18      	it	ne
   118c0:	2002      	movne	r0, #2
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   118c2:	629a      	str	r2, [r3, #40]	; 0x28
}
   118c4:	4770      	bx	lr
   118c6:	bf00      	nop
   118c8:	e000ed00 	.word	0xe000ed00

000118cc <secure_fault.isra.5>:
 */
static void secure_fault(const z_arch_esf_t *esf)
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
   118cc:	4b0d      	ldr	r3, [pc, #52]	; (11904 <secure_fault.isra.5+0x38>)
   118ce:	699a      	ldr	r2, [r3, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
   118d0:	695a      	ldr	r2, [r3, #20]
		PR_EXC("  Address: 0x%x", sfar);
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
   118d2:	695a      	ldr	r2, [r3, #20]
   118d4:	07d0      	lsls	r0, r2, #31
   118d6:	d40f      	bmi.n	118f8 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid entry point");
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
   118d8:	695a      	ldr	r2, [r3, #20]
   118da:	0791      	lsls	r1, r2, #30
   118dc:	d40c      	bmi.n	118f8 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid integrity signature");
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
   118de:	695a      	ldr	r2, [r3, #20]
   118e0:	0752      	lsls	r2, r2, #29
   118e2:	d409      	bmi.n	118f8 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid exception return");
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
   118e4:	695a      	ldr	r2, [r3, #20]
   118e6:	0710      	lsls	r0, r2, #28
   118e8:	d406      	bmi.n	118f8 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Attribution unit violation");
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
   118ea:	695a      	ldr	r2, [r3, #20]
   118ec:	06d1      	lsls	r1, r2, #27
   118ee:	d403      	bmi.n	118f8 <secure_fault.isra.5+0x2c>
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
   118f0:	695a      	ldr	r2, [r3, #20]
   118f2:	0692      	lsls	r2, r2, #26
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
   118f4:	bf58      	it	pl
   118f6:	695a      	ldrpl	r2, [r3, #20]
		PR_FAULT_INFO("  Lazy state error");
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
   118f8:	695a      	ldr	r2, [r3, #20]
   118fa:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   118fe:	615a      	str	r2, [r3, #20]
}
   11900:	4770      	bx	lr
   11902:	bf00      	nop
   11904:	e000edd0 	.word	0xe000edd0

00011908 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   11908:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1190a:	4b41      	ldr	r3, [pc, #260]	; (11a10 <z_arm_fault+0x108>)
{
   1190c:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1190e:	685b      	ldr	r3, [r3, #4]
   11910:	2500      	movs	r5, #0
   11912:	f3c3 0308 	ubfx	r3, r3, #0, #9
   11916:	f385 8811 	msr	BASEPRI, r5
   1191a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1191e:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
   11922:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
   11926:	d11e      	bne.n	11966 <z_arm_fault+0x5e>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
   11928:	f012 0401 	ands.w	r4, r2, #1
   1192c:	d01a      	beq.n	11964 <z_arm_fault+0x5c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   1192e:	0656      	lsls	r6, r2, #25
   11930:	f002 0408 	and.w	r4, r2, #8
   11934:	d467      	bmi.n	11a06 <z_arm_fault+0xfe>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   11936:	f082 0204 	eor.w	r2, r2, #4
   1193a:	f3c2 0580 	ubfx	r5, r2, #2, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1193e:	b164      	cbz	r4, 1195a <z_arm_fault+0x52>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
   11940:	f3ef 8689 	mrs	r6, PSP_NS
	*recoverable = false;
   11944:	2200      	movs	r2, #0
	switch (fault) {
   11946:	3b03      	subs	r3, #3
	*recoverable = false;
   11948:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   1194c:	2b04      	cmp	r3, #4
   1194e:	d84b      	bhi.n	119e8 <z_arm_fault+0xe0>
   11950:	e8df f003 	tbb	[pc, r3]
   11954:	41504c0b 	.word	0x41504c0b
   11958:	48          	.byte	0x48
   11959:	00          	.byte	0x00
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
   1195a:	f3ef 8688 	mrs	r6, MSP_NS
  return(result);
   1195e:	e7f1      	b.n	11944 <z_arm_fault+0x3c>
			ptr_esf =  (z_arch_esf_t *)psp;
   11960:	460e      	mov	r6, r1
   11962:	e7ef      	b.n	11944 <z_arm_fault+0x3c>
	*nested_exc = false;
   11964:	4625      	mov	r5, r4
		return NULL;
   11966:	462e      	mov	r6, r5
   11968:	e7ec      	b.n	11944 <z_arm_fault+0x3c>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1196a:	4b29      	ldr	r3, [pc, #164]	; (11a10 <z_arm_fault+0x108>)
   1196c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1196e:	0792      	lsls	r2, r2, #30
   11970:	d43a      	bmi.n	119e8 <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   11972:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   11974:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   11978:	d008      	beq.n	1198c <z_arm_fault+0x84>
		if (SCB_MMFSR != 0) {
   1197a:	3328      	adds	r3, #40	; 0x28
   1197c:	781b      	ldrb	r3, [r3, #0]
   1197e:	b1eb      	cbz	r3, 119bc <z_arm_fault+0xb4>
			reason = mem_manage_fault(esf, 1, recoverable);
   11980:	2001      	movs	r0, #1
   11982:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   11986:	f7ff ff51 	bl	1182c <mem_manage_fault.isra.2>
   1198a:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1198c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11990:	b993      	cbnz	r3, 119b8 <z_arm_fault+0xb0>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   11992:	2220      	movs	r2, #32
   11994:	4631      	mov	r1, r6
   11996:	a802      	add	r0, sp, #8
   11998:	f003 f90a 	bl	14bb0 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1199c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1199e:	b36d      	cbz	r5, 119fc <z_arm_fault+0xf4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   119a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
   119a4:	b922      	cbnz	r2, 119b0 <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   119a6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   119aa:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   119ae:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   119b0:	a902      	add	r1, sp, #8
   119b2:	4620      	mov	r0, r4
   119b4:	f003 f891 	bl	14ada <z_arm_fatal_error>
}
   119b8:	b00b      	add	sp, #44	; 0x2c
   119ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
   119bc:	4b15      	ldr	r3, [pc, #84]	; (11a14 <z_arm_fault+0x10c>)
   119be:	781b      	ldrb	r3, [r3, #0]
   119c0:	b12b      	cbz	r3, 119ce <z_arm_fault+0xc6>
			reason = bus_fault(esf, 1, recoverable);
   119c2:	2001      	movs	r0, #1
   119c4:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   119c8:	f7ff ff4c 	bl	11864 <bus_fault.isra.3>
   119cc:	e7dd      	b.n	1198a <z_arm_fault+0x82>
		} else if (SCB_UFSR != 0) {
   119ce:	4b12      	ldr	r3, [pc, #72]	; (11a18 <z_arm_fault+0x110>)
   119d0:	881f      	ldrh	r7, [r3, #0]
   119d2:	b2bf      	uxth	r7, r7
   119d4:	b117      	cbz	r7, 119dc <z_arm_fault+0xd4>
		reason = usage_fault(esf);
   119d6:	f7ff ff63 	bl	118a0 <usage_fault.isra.4>
   119da:	e7d6      	b.n	1198a <z_arm_fault+0x82>
		} else if (SAU->SFSR != 0) {
   119dc:	4b0f      	ldr	r3, [pc, #60]	; (11a1c <z_arm_fault+0x114>)
   119de:	695c      	ldr	r4, [r3, #20]
   119e0:	2c00      	cmp	r4, #0
   119e2:	d0d3      	beq.n	1198c <z_arm_fault+0x84>
		secure_fault(esf);
   119e4:	f7ff ff72 	bl	118cc <secure_fault.isra.5>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   119e8:	2400      	movs	r4, #0
   119ea:	e7cf      	b.n	1198c <z_arm_fault+0x84>
		reason = mem_manage_fault(esf, 0, recoverable);
   119ec:	f10d 0107 	add.w	r1, sp, #7
   119f0:	2000      	movs	r0, #0
   119f2:	e7c8      	b.n	11986 <z_arm_fault+0x7e>
		reason = bus_fault(esf, 0, recoverable);
   119f4:	f10d 0107 	add.w	r1, sp, #7
   119f8:	2000      	movs	r0, #0
   119fa:	e7e5      	b.n	119c8 <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   119fc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   11a00:	f023 0301 	bic.w	r3, r3, #1
   11a04:	e7d3      	b.n	119ae <z_arm_fault+0xa6>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   11a06:	2c00      	cmp	r4, #0
   11a08:	d1aa      	bne.n	11960 <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)msp;
   11a0a:	4606      	mov	r6, r0
			*nested_exc = true;
   11a0c:	2501      	movs	r5, #1
   11a0e:	e799      	b.n	11944 <z_arm_fault+0x3c>
   11a10:	e000ed00 	.word	0xe000ed00
   11a14:	e000ed29 	.word	0xe000ed29
   11a18:	e000ed2a 	.word	0xe000ed2a
   11a1c:	e000edd0 	.word	0xe000edd0

00011a20 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   11a20:	4b04      	ldr	r3, [pc, #16]	; (11a34 <z_arm_fault_init+0x14>)
   11a22:	695a      	ldr	r2, [r3, #20]
   11a24:	f042 0210 	orr.w	r2, r2, #16
   11a28:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   11a2a:	695a      	ldr	r2, [r3, #20]
   11a2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   11a30:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   11a32:	4770      	bx	lr
   11a34:	e000ed00 	.word	0xe000ed00

00011a38 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   11a38:	4b04      	ldr	r3, [pc, #16]	; (11a4c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   11a3a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   11a3c:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   11a3e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   11a40:	d003      	beq.n	11a4a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   11a42:	4903      	ldr	r1, [pc, #12]	; (11a50 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   11a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   11a48:	600a      	str	r2, [r1, #0]

00011a4a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   11a4a:	4770      	bx	lr
	ldr r3, =_kernel
   11a4c:	200007f0 	.word	0x200007f0
	ldr r1, =_SCS_ICSR
   11a50:	e000ed04 	.word	0xe000ed04

00011a54 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   11a54:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   11a58:	4905      	ldr	r1, [pc, #20]	; (11a70 <sys_arch_reboot+0x1c>)
   11a5a:	4b06      	ldr	r3, [pc, #24]	; (11a74 <sys_arch_reboot+0x20>)
   11a5c:	68ca      	ldr	r2, [r1, #12]
   11a5e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11a62:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   11a64:	60cb      	str	r3, [r1, #12]
   11a66:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   11a6a:	bf00      	nop
   11a6c:	e7fd      	b.n	11a6a <sys_arch_reboot+0x16>
   11a6e:	bf00      	nop
   11a70:	e000ed00 	.word	0xe000ed00
   11a74:	05fa0004 	.word	0x05fa0004

00011a78 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   11a78:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11a7a:	2120      	movs	r1, #32
   11a7c:	4803      	ldr	r0, [pc, #12]	; (11a8c <z_arm_interrupt_init+0x14>)
   11a7e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   11a80:	3301      	adds	r3, #1
   11a82:	2b41      	cmp	r3, #65	; 0x41
   11a84:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   11a88:	d1f9      	bne.n	11a7e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   11a8a:	4770      	bx	lr
   11a8c:	e000e100 	.word	0xe000e100

00011a90 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   11a90:	b510      	push	{r4, lr}
   11a92:	4604      	mov	r4, r0
	z_thread_single_abort(thread);
   11a94:	f001 f956 	bl	12d44 <z_thread_single_abort>

	if (_current == thread) {
   11a98:	4b11      	ldr	r3, [pc, #68]	; (11ae0 <z_impl_k_thread_abort+0x50>)
   11a9a:	689b      	ldr	r3, [r3, #8]
   11a9c:	42a3      	cmp	r3, r4
   11a9e:	d107      	bne.n	11ab0 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   11aa0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   11aa4:	b183      	cbz	r3, 11ac8 <z_impl_k_thread_abort+0x38>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11aa6:	4a0f      	ldr	r2, [pc, #60]	; (11ae4 <z_impl_k_thread_abort+0x54>)
   11aa8:	6853      	ldr	r3, [r2, #4]
   11aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   11aae:	6053      	str	r3, [r2, #4]
	__asm__ volatile(
   11ab0:	f04f 0320 	mov.w	r3, #32
   11ab4:	f3ef 8011 	mrs	r0, BASEPRI
   11ab8:	f383 8811 	msr	BASEPRI, r3
   11abc:	f3bf 8f6f 	isb	sy
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   11ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   11ac4:	f003 b981 	b.w	14dca <z_reschedule_irqlock>
   11ac8:	f04f 0320 	mov.w	r3, #32
   11acc:	f3ef 8011 	mrs	r0, BASEPRI
   11ad0:	f383 8811 	msr	BASEPRI, r3
   11ad4:	f3bf 8f6f 	isb	sy

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
   11ad8:	f7ff fd48 	bl	1156c <arch_swap>
	return ret;
   11adc:	e7e8      	b.n	11ab0 <z_impl_k_thread_abort+0x20>
   11ade:	bf00      	nop
   11ae0:	200007f0 	.word	0x200007f0
   11ae4:	e000ed00 	.word	0xe000ed00

00011ae8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   11ae8:	b510      	push	{r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   11aea:	4b0e      	ldr	r3, [pc, #56]	; (11b24 <z_arm_configure_static_mpu_regions+0x3c>)
{
   11aec:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   11aee:	9302      	str	r3, [sp, #8]
   11af0:	4b0d      	ldr	r3, [pc, #52]	; (11b28 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   11af2:	4c0e      	ldr	r4, [pc, #56]	; (11b2c <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   11af4:	9303      	str	r3, [sp, #12]
   11af6:	4b0e      	ldr	r3, [pc, #56]	; (11b30 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   11af8:	4a0e      	ldr	r2, [pc, #56]	; (11b34 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   11afa:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   11afc:	ab02      	add	r3, sp, #8
   11afe:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   11b00:	a801      	add	r0, sp, #4
   11b02:	4623      	mov	r3, r4
   11b04:	2101      	movs	r1, #1
   11b06:	f000 f903 	bl	11d10 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   11b0a:	2300      	movs	r3, #0
   11b0c:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   11b0e:	4b0a      	ldr	r3, [pc, #40]	; (11b38 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11b10:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   11b12:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11b14:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   11b16:	9305      	str	r3, [sp, #20]
   11b18:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11b1a:	f000 f903 	bl	11d24 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   11b1e:	b008      	add	sp, #32
   11b20:	bd10      	pop	{r4, pc}
   11b22:	bf00      	nop
   11b24:	20000000 	.word	0x20000000
   11b28:	00000000 	.word	0x00000000
   11b2c:	20010000 	.word	0x20010000
   11b30:	00010006 	.word	0x00010006
   11b34:	20000000 	.word	0x20000000
   11b38:	20000140 	.word	0x20000140

00011b3c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   11b3c:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   11b3e:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   11b40:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   11b42:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   11b46:	f004 031f 	and.w	r3, r4, #31
   11b4a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   11b4c:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   11b4e:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   11b50:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   11b54:	4904      	ldr	r1, [pc, #16]	; (11b68 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   11b56:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   11b5a:	f043 0301 	orr.w	r3, r3, #1
   11b5e:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   11b60:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   11b62:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   11b64:	bd10      	pop	{r4, pc}
   11b66:	bf00      	nop
   11b68:	e000ed90 	.word	0xe000ed90

00011b6c <mpu_configure_regions_and_partition.constprop.1>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   11b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b70:	4680      	mov	r8, r0
   11b72:	4689      	mov	r9, r1
   11b74:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   11b76:	2700      	movs	r7, #0
	MPU->RNR = index;
   11b78:	4d48      	ldr	r5, [pc, #288]	; (11c9c <mpu_configure_regions_and_partition.constprop.1+0x130>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   11b7a:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   11b7c:	454f      	cmp	r7, r9
   11b7e:	da07      	bge.n	11b90 <mpu_configure_regions_and_partition.constprop.1+0x24>
		if (regions[i]->size == 0U) {
   11b80:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
   11b84:	685e      	ldr	r6, [r3, #4]
   11b86:	b3c6      	cbz	r6, 11bfa <mpu_configure_regions_and_partition.constprop.1+0x8e>
		&&
   11b88:	2e1f      	cmp	r6, #31
   11b8a:	d805      	bhi.n	11b98 <mpu_configure_regions_and_partition.constprop.1+0x2c>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   11b8c:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   11b90:	4620      	mov	r0, r4
   11b92:	b005      	add	sp, #20
   11b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
   11b98:	06f2      	lsls	r2, r6, #27
   11b9a:	d1f7      	bne.n	11b8c <mpu_configure_regions_and_partition.constprop.1+0x20>
		((part->start &
   11b9c:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   11ba0:	f01a 0f1f 	tst.w	sl, #31
   11ba4:	d1f2      	bne.n	11b8c <mpu_configure_regions_and_partition.constprop.1+0x20>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11ba6:	4650      	mov	r0, sl
   11ba8:	f002 ffc6 	bl	14b38 <arm_cmse_mpu_region_get>
   11bac:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11bae:	eb06 000a 	add.w	r0, r6, sl
   11bb2:	3801      	subs	r0, #1
   11bb4:	f002 ffc0 	bl	14b38 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11bb8:	4583      	cmp	fp, r0
   11bba:	d1e7      	bne.n	11b8c <mpu_configure_regions_and_partition.constprop.1+0x20>
		if ((u_reg_index == -EINVAL) ||
   11bbc:	f11b 0f16 	cmn.w	fp, #22
   11bc0:	d0e4      	beq.n	11b8c <mpu_configure_regions_and_partition.constprop.1+0x20>
			(u_reg_index > (reg_index - 1))) {
   11bc2:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   11bc4:	455b      	cmp	r3, fp
   11bc6:	dbe1      	blt.n	11b8c <mpu_configure_regions_and_partition.constprop.1+0x20>
	MPU->RNR = index;
   11bc8:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   11bcc:	68e8      	ldr	r0, [r5, #12]
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   11bce:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	MPU->RNR = index;
   11bd2:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   11bd6:	692e      	ldr	r6, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   11bd8:	f020 001f 	bic.w	r0, r0, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   11bdc:	e9d1 3200 	ldrd	r3, r2, [r1]
   11be0:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   11be2:	4298      	cmp	r0, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   11be4:	f046 061f 	orr.w	r6, r6, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   11be8:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
   11bec:	d118      	bne.n	11c20 <mpu_configure_regions_and_partition.constprop.1+0xb4>
   11bee:	4556      	cmp	r6, sl
   11bf0:	d105      	bne.n	11bfe <mpu_configure_regions_and_partition.constprop.1+0x92>
			mpu_configure_region(u_reg_index, regions[i]);
   11bf2:	fa5f f08b 	uxtb.w	r0, fp
   11bf6:	f002 ff7d 	bl	14af4 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   11bfa:	3701      	adds	r7, #1
   11bfc:	e7be      	b.n	11b7c <mpu_configure_regions_and_partition.constprop.1+0x10>
	MPU->RNR = index;
   11bfe:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   11c02:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   11c04:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   11c08:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   11c0c:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   11c0e:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   11c10:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   11c12:	f002 ff6f 	bl	14af4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   11c16:	f110 0f16 	cmn.w	r0, #22
   11c1a:	d0b7      	beq.n	11b8c <mpu_configure_regions_and_partition.constprop.1+0x20>
			reg_index++;
   11c1c:	1c44      	adds	r4, r0, #1
   11c1e:	e7ec      	b.n	11bfa <mpu_configure_regions_and_partition.constprop.1+0x8e>
	MPU->RNR = index;
   11c20:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   11c24:	692a      	ldr	r2, [r5, #16]
   11c26:	3b01      	subs	r3, #1
   11c28:	f023 031f 	bic.w	r3, r3, #31
   11c2c:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   11c30:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   11c32:	4556      	cmp	r6, sl
   11c34:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   11c36:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   11c38:	d0eb      	beq.n	11c12 <mpu_configure_regions_and_partition.constprop.1+0xa6>
				mpu_configure_region(reg_index, regions[i]);
   11c3a:	f002 ff5b 	bl	14af4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   11c3e:	f110 0f16 	cmn.w	r0, #22
   11c42:	d0a3      	beq.n	11b8c <mpu_configure_regions_and_partition.constprop.1+0x20>
	MPU->RNR = index;
   11c44:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   11c48:	68ea      	ldr	r2, [r5, #12]
   11c4a:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   11c4e:	3e01      	subs	r6, #1
	attr->rbar = MPU->RBAR &
   11c50:	f362 0304 	bfi	r3, r2, #0, #5
   11c54:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   11c58:	692b      	ldr	r3, [r5, #16]
   11c5a:	f89d 2008 	ldrb.w	r2, [sp, #8]
   11c5e:	085b      	lsrs	r3, r3, #1
   11c60:	f363 1247 	bfi	r2, r3, #5, #3
   11c64:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   11c68:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
   11c6c:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
   11c6e:	e9d2 3200 	ldrd	r3, r2, [r2]
   11c72:	4413      	add	r3, r2
   11c74:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   11c76:	f023 031f 	bic.w	r3, r3, #31
   11c7a:	441e      	add	r6, r3
   11c7c:	eba6 060a 	sub.w	r6, r6, sl
   11c80:	b2c4      	uxtb	r4, r0
   11c82:	f026 061f 	bic.w	r6, r6, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
   11c86:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
   11c88:	9603      	str	r6, [sp, #12]
   11c8a:	f63f af7f 	bhi.w	11b8c <mpu_configure_regions_and_partition.constprop.1+0x20>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   11c8e:	4620      	mov	r0, r4
   11c90:	4669      	mov	r1, sp
   11c92:	f7ff ff53 	bl	11b3c <region_init>
			reg_index++;
   11c96:	3401      	adds	r4, #1
   11c98:	e7af      	b.n	11bfa <mpu_configure_regions_and_partition.constprop.1+0x8e>
   11c9a:	bf00      	nop
   11c9c:	e000ed90 	.word	0xe000ed90

00011ca0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   11ca0:	2205      	movs	r2, #5
   11ca2:	4b03      	ldr	r3, [pc, #12]	; (11cb0 <arm_core_mpu_enable+0x10>)
   11ca4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   11ca6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11caa:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   11cae:	4770      	bx	lr
   11cb0:	e000ed90 	.word	0xe000ed90

00011cb4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   11cb4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   11cb8:	2200      	movs	r2, #0
   11cba:	4b01      	ldr	r3, [pc, #4]	; (11cc0 <arm_core_mpu_disable+0xc>)
   11cbc:	605a      	str	r2, [r3, #4]
}
   11cbe:	4770      	bx	lr
   11cc0:	e000ed90 	.word	0xe000ed90

00011cc4 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
   11cc4:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   11cc6:	4d0e      	ldr	r5, [pc, #56]	; (11d00 <arm_mpu_init+0x3c>)
   11cc8:	682e      	ldr	r6, [r5, #0]
   11cca:	2e10      	cmp	r6, #16
   11ccc:	d815      	bhi.n	11cfa <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11cce:	2400      	movs	r4, #0
	arm_core_mpu_disable();
   11cd0:	f7ff fff0 	bl	11cb4 <arm_core_mpu_disable>
	MPU->MAIR0 =
   11cd4:	4b0b      	ldr	r3, [pc, #44]	; (11d04 <arm_mpu_init+0x40>)
   11cd6:	4a0c      	ldr	r2, [pc, #48]	; (11d08 <arm_mpu_init+0x44>)
   11cd8:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11cda:	42a6      	cmp	r6, r4
   11cdc:	d105      	bne.n	11cea <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   11cde:	4b0b      	ldr	r3, [pc, #44]	; (11d0c <arm_mpu_init+0x48>)
   11ce0:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
   11ce2:	f7ff ffdd 	bl	11ca0 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   11ce6:	2000      	movs	r0, #0
}
   11ce8:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   11cea:	6869      	ldr	r1, [r5, #4]
   11cec:	4620      	mov	r0, r4
   11cee:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   11cf2:	f7ff ff23 	bl	11b3c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11cf6:	3401      	adds	r4, #1
   11cf8:	e7ef      	b.n	11cda <arm_mpu_init+0x16>
		return -1;
   11cfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11cfe:	e7f3      	b.n	11ce8 <arm_mpu_init+0x24>
   11d00:	000153c8 	.word	0x000153c8
   11d04:	e000ed90 	.word	0xe000ed90
   11d08:	0044ffaa 	.word	0x0044ffaa
   11d0c:	2000084c 	.word	0x2000084c

00011d10 <arm_core_mpu_configure_static_mpu_regions>:
{
   11d10:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   11d12:	4c03      	ldr	r4, [pc, #12]	; (11d20 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   11d14:	7822      	ldrb	r2, [r4, #0]
   11d16:	f7ff ff29 	bl	11b6c <mpu_configure_regions_and_partition.constprop.1>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   11d1a:	7020      	strb	r0, [r4, #0]
}
   11d1c:	bd10      	pop	{r4, pc}
   11d1e:	bf00      	nop
   11d20:	2000084c 	.word	0x2000084c

00011d24 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   11d24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d28:	4c25      	ldr	r4, [pc, #148]	; (11dc0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>)
   11d2a:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11d2c:	4680      	mov	r8, r0
   11d2e:	2700      	movs	r7, #0
   11d30:	46a1      	mov	r9, r4
	attr->rbar = MPU->RBAR &
   11d32:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
   11d36:	4d23      	ldr	r5, [pc, #140]	; (11dc4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11d38:	4557      	cmp	r7, sl
   11d3a:	da1a      	bge.n	11d72 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   11d3c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   11d40:	9301      	str	r3, [sp, #4]
   11d42:	2b00      	cmp	r3, #0
   11d44:	d036      	beq.n	11db4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   11d46:	f8d8 1000 	ldr.w	r1, [r8]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11d4a:	4608      	mov	r0, r1
   11d4c:	9100      	str	r1, [sp, #0]
   11d4e:	f002 fef3 	bl	14b38 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11d52:	e9dd 1300 	ldrd	r1, r3, [sp]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11d56:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11d58:	1858      	adds	r0, r3, r1
   11d5a:	3801      	subs	r0, #1
   11d5c:	f002 feec 	bl	14b38 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11d60:	4286      	cmp	r6, r0
   11d62:	4a19      	ldr	r2, [pc, #100]	; (11dc8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
   11d64:	d008      	beq.n	11d78 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   11d66:	2314      	movs	r3, #20
   11d68:	435f      	muls	r7, r3
   11d6a:	f06f 0315 	mvn.w	r3, #21
   11d6e:	f849 3007 	str.w	r3, [r9, r7]
}
   11d72:	b003      	add	sp, #12
   11d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   11d78:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
   11d7c:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   11d7e:	d0f8      	beq.n	11d72 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   11d80:	7813      	ldrb	r3, [r2, #0]
   11d82:	42b3      	cmp	r3, r6
   11d84:	ddf5      	ble.n	11d72 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   11d86:	fb0b 9307 	mla	r3, fp, r7, r9
	MPU->RNR = index;
   11d8a:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
   11d8c:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
   11d8e:	68e8      	ldr	r0, [r5, #12]
   11d90:	7b19      	ldrb	r1, [r3, #12]
   11d92:	f360 0104 	bfi	r1, r0, #0, #5
   11d96:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   11d98:	6929      	ldr	r1, [r5, #16]
   11d9a:	7b18      	ldrb	r0, [r3, #12]
   11d9c:	0849      	lsrs	r1, r1, #1
   11d9e:	f361 1047 	bfi	r0, r1, #5, #3
   11da2:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   11da4:	68eb      	ldr	r3, [r5, #12]
   11da6:	f023 031f 	bic.w	r3, r3, #31
   11daa:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   11dac:	692b      	ldr	r3, [r5, #16]
   11dae:	f023 031f 	bic.w	r3, r3, #31
   11db2:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11db4:	3701      	adds	r7, #1
   11db6:	3414      	adds	r4, #20
   11db8:	f108 080c 	add.w	r8, r8, #12
   11dbc:	e7bc      	b.n	11d38 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   11dbe:	bf00      	nop
   11dc0:	200007d4 	.word	0x200007d4
   11dc4:	e000ed90 	.word	0xe000ed90
   11dc8:	2000084c 	.word	0x2000084c

00011dcc <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
   11dcc:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
   11dce:	4b0c      	ldr	r3, [pc, #48]	; (11e00 <tz_nonsecure_state_setup+0x34>)
   11dd0:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
   11dd2:	6803      	ldr	r3, [r0, #0]
   11dd4:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
   11dd8:	6843      	ldr	r3, [r0, #4]
   11dda:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
   11dde:	7b02      	ldrb	r2, [r0, #12]
   11de0:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
   11de4:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
   11de8:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
   11dec:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
   11dee:	bf48      	it	mi
   11df0:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
   11df4:	b109      	cbz	r1, 11dfa <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
   11df6:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
   11dfa:	f383 8894 	msr	CONTROL_NS, r3
}
   11dfe:	4770      	bx	lr
   11e00:	e002ed00 	.word	0xe002ed00

00011e04 <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   11e04:	4a08      	ldr	r2, [pc, #32]	; (11e28 <tz_nbanked_exception_target_state_set+0x24>)
   11e06:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
   11e08:	b148      	cbz	r0, 11e1e <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
   11e0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   11e0e:	041b      	lsls	r3, r3, #16
   11e10:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   11e12:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   11e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
   11e1a:	60d3      	str	r3, [r2, #12]
}
   11e1c:	4770      	bx	lr
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   11e1e:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
   11e20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   11e24:	e7f5      	b.n	11e12 <tz_nbanked_exception_target_state_set+0xe>
   11e26:	bf00      	nop
   11e28:	e000ed00 	.word	0xe000ed00

00011e2c <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   11e2c:	4a08      	ldr	r2, [pc, #32]	; (11e50 <tz_nonsecure_exception_prio_config+0x24>)
   11e2e:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
   11e30:	b140      	cbz	r0, 11e44 <tz_nonsecure_exception_prio_config+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   11e32:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
   11e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   11e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   11e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
   11e40:	60d3      	str	r3, [r2, #12]
}
   11e42:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
   11e44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   11e48:	041b      	lsls	r3, r3, #16
   11e4a:	0c1b      	lsrs	r3, r3, #16
   11e4c:	e7f4      	b.n	11e38 <tz_nonsecure_exception_prio_config+0xc>
   11e4e:	bf00      	nop
   11e50:	e000ed00 	.word	0xe000ed00

00011e54 <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   11e54:	4a08      	ldr	r2, [pc, #32]	; (11e78 <tz_nonsecure_system_reset_req_block+0x24>)
   11e56:	68d3      	ldr	r3, [r2, #12]
	if (block) {
   11e58:	b140      	cbz	r0, 11e6c <tz_nonsecure_system_reset_req_block+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   11e5a:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
   11e5c:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   11e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   11e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
   11e68:	60d3      	str	r3, [r2, #12]
}
   11e6a:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
   11e6c:	f023 0308 	bic.w	r3, r3, #8
   11e70:	041b      	lsls	r3, r3, #16
   11e72:	0c1b      	lsrs	r3, r3, #16
   11e74:	e7f4      	b.n	11e60 <tz_nonsecure_system_reset_req_block+0xc>
   11e76:	bf00      	nop
   11e78:	e000ed00 	.word	0xe000ed00

00011e7c <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
   11e7c:	4a03      	ldr	r2, [pc, #12]	; (11e8c <tz_nonsecure_fpu_access_enable+0x10>)
   11e7e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   11e82:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
   11e86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
   11e8a:	4770      	bx	lr
   11e8c:	e000ed00 	.word	0xe000ed00

00011e90 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
   11e90:	4b08      	ldr	r3, [pc, #32]	; (11eb4 <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
   11e92:	681a      	ldr	r2, [r3, #0]
   11e94:	b118      	cbz	r0, 11e9e <tz_sau_configure+0xe>
   11e96:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
   11e9a:	601a      	str	r2, [r3, #0]
		}
	}
}
   11e9c:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
   11e9e:	f022 0201 	bic.w	r2, r2, #1
   11ea2:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
   11ea4:	681a      	ldr	r2, [r3, #0]
		if (allns) {
   11ea6:	b111      	cbz	r1, 11eae <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
   11ea8:	f042 0202 	orr.w	r2, r2, #2
   11eac:	e7f5      	b.n	11e9a <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
   11eae:	f022 0202 	bic.w	r2, r2, #2
   11eb2:	e7f2      	b.n	11e9a <tz_sau_configure+0xa>
   11eb4:	e000edd0 	.word	0xe000edd0

00011eb8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   11eb8:	4b01      	ldr	r3, [pc, #4]	; (11ec0 <__stdout_hook_install+0x8>)
   11eba:	6018      	str	r0, [r3, #0]
}
   11ebc:	4770      	bx	lr
   11ebe:	bf00      	nop
   11ec0:	20000024 	.word	0x20000024

00011ec4 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   11ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   11ec6:	794b      	ldrb	r3, [r1, #5]
   11ec8:	2b01      	cmp	r3, #1
   11eca:	d027      	beq.n	11f1c <uarte_nrfx_configure+0x58>
   11ecc:	2b03      	cmp	r3, #3
   11ece:	d122      	bne.n	11f16 <uarte_nrfx_configure+0x52>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   11ed0:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   11ed2:	798b      	ldrb	r3, [r1, #6]
   11ed4:	2b03      	cmp	r3, #3
   11ed6:	d11e      	bne.n	11f16 <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   11ed8:	79cc      	ldrb	r4, [r1, #7]
   11eda:	b124      	cbz	r4, 11ee6 <uarte_nrfx_configure+0x22>
   11edc:	2c01      	cmp	r4, #1
   11ede:	d11a      	bne.n	11f16 <uarte_nrfx_configure+0x52>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   11ee0:	6843      	ldr	r3, [r0, #4]
   11ee2:	791b      	ldrb	r3, [r3, #4]
   11ee4:	b1bb      	cbz	r3, 11f16 <uarte_nrfx_configure+0x52>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   11ee6:	790a      	ldrb	r2, [r1, #4]
   11ee8:	b112      	cbz	r2, 11ef0 <uarte_nrfx_configure+0x2c>
   11eea:	2a02      	cmp	r2, #2
   11eec:	d113      	bne.n	11f16 <uarte_nrfx_configure+0x52>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   11eee:	220e      	movs	r2, #14
	switch (baudrate) {
   11ef0:	f647 2712 	movw	r7, #31250	; 0x7a12
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   11ef4:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   11ef6:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   11ef8:	42bb      	cmp	r3, r7
	return config->uarte_regs;
   11efa:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   11efc:	d063      	beq.n	11fc6 <uarte_nrfx_configure+0x102>
   11efe:	d829      	bhi.n	11f54 <uarte_nrfx_configure+0x90>
   11f00:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   11f04:	d062      	beq.n	11fcc <uarte_nrfx_configure+0x108>
   11f06:	d814      	bhi.n	11f32 <uarte_nrfx_configure+0x6e>
   11f08:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   11f0c:	d060      	beq.n	11fd0 <uarte_nrfx_configure+0x10c>
   11f0e:	d807      	bhi.n	11f20 <uarte_nrfx_configure+0x5c>
   11f10:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   11f14:	d05f      	beq.n	11fd6 <uarte_nrfx_configure+0x112>
		return -ENOTSUP;
   11f16:	f06f 0022 	mvn.w	r0, #34	; 0x22
   11f1a:	e053      	b.n	11fc4 <uarte_nrfx_configure+0x100>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   11f1c:	2600      	movs	r6, #0
   11f1e:	e7d8      	b.n	11ed2 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   11f20:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   11f24:	d05a      	beq.n	11fdc <uarte_nrfx_configure+0x118>
   11f26:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   11f2a:	d1f4      	bne.n	11f16 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   11f2c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   11f30:	e03c      	b.n	11fac <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   11f32:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   11f36:	d054      	beq.n	11fe2 <uarte_nrfx_configure+0x11e>
   11f38:	d804      	bhi.n	11f44 <uarte_nrfx_configure+0x80>
   11f3a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11f3e:	d1ea      	bne.n	11f16 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   11f40:	4b33      	ldr	r3, [pc, #204]	; (12010 <uarte_nrfx_configure+0x14c>)
   11f42:	e033      	b.n	11fac <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   11f44:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   11f48:	d04d      	beq.n	11fe6 <uarte_nrfx_configure+0x122>
   11f4a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   11f4e:	d1e2      	bne.n	11f16 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   11f50:	4b30      	ldr	r3, [pc, #192]	; (12014 <uarte_nrfx_configure+0x150>)
   11f52:	e02b      	b.n	11fac <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   11f54:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   11f58:	d047      	beq.n	11fea <uarte_nrfx_configure+0x126>
   11f5a:	d812      	bhi.n	11f82 <uarte_nrfx_configure+0xbe>
   11f5c:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   11f60:	42bb      	cmp	r3, r7
   11f62:	d045      	beq.n	11ff0 <uarte_nrfx_configure+0x12c>
   11f64:	d805      	bhi.n	11f72 <uarte_nrfx_configure+0xae>
   11f66:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   11f6a:	d1d4      	bne.n	11f16 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   11f6c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   11f70:	e01c      	b.n	11fac <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   11f72:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   11f76:	d03e      	beq.n	11ff6 <uarte_nrfx_configure+0x132>
   11f78:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   11f7c:	d1cb      	bne.n	11f16 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   11f7e:	4b26      	ldr	r3, [pc, #152]	; (12018 <uarte_nrfx_configure+0x154>)
   11f80:	e014      	b.n	11fac <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   11f82:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   11f86:	d039      	beq.n	11ffc <uarte_nrfx_configure+0x138>
   11f88:	d808      	bhi.n	11f9c <uarte_nrfx_configure+0xd8>
   11f8a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   11f8e:	d038      	beq.n	12002 <uarte_nrfx_configure+0x13e>
   11f90:	4f22      	ldr	r7, [pc, #136]	; (1201c <uarte_nrfx_configure+0x158>)
   11f92:	42bb      	cmp	r3, r7
   11f94:	d1bf      	bne.n	11f16 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   11f96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   11f9a:	e007      	b.n	11fac <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   11f9c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   11fa0:	d032      	beq.n	12008 <uarte_nrfx_configure+0x144>
   11fa2:	4f1f      	ldr	r7, [pc, #124]	; (12020 <uarte_nrfx_configure+0x15c>)
   11fa4:	42bb      	cmp	r3, r7
   11fa6:	d1b6      	bne.n	11f16 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   11fa8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   11fac:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   11fb0:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   11fb2:	4334      	orrs	r4, r6
   11fb4:	4322      	orrs	r2, r4
   11fb6:	3304      	adds	r3, #4
   11fb8:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   11fba:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   11fbe:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   11fc2:	2000      	movs	r0, #0
}
   11fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   11fc6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   11fca:	e7ef      	b.n	11fac <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   11fcc:	4b15      	ldr	r3, [pc, #84]	; (12024 <uarte_nrfx_configure+0x160>)
   11fce:	e7ed      	b.n	11fac <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00027000;
   11fd0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   11fd4:	e7ea      	b.n	11fac <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00014000;
   11fd6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   11fda:	e7e7      	b.n	11fac <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   11fdc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   11fe0:	e7e4      	b.n	11fac <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   11fe2:	4b11      	ldr	r3, [pc, #68]	; (12028 <uarte_nrfx_configure+0x164>)
   11fe4:	e7e2      	b.n	11fac <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   11fe6:	4b11      	ldr	r3, [pc, #68]	; (1202c <uarte_nrfx_configure+0x168>)
   11fe8:	e7e0      	b.n	11fac <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   11fea:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   11fee:	e7dd      	b.n	11fac <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   11ff0:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   11ff4:	e7da      	b.n	11fac <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   11ff6:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   11ffa:	e7d7      	b.n	11fac <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   11ffc:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   12000:	e7d4      	b.n	11fac <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   12002:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   12006:	e7d1      	b.n	11fac <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   12008:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1200c:	e7ce      	b.n	11fac <uarte_nrfx_configure+0xe8>
   1200e:	bf00      	nop
   12010:	00275000 	.word	0x00275000
   12014:	0075c000 	.word	0x0075c000
   12018:	013a9000 	.word	0x013a9000
   1201c:	0003d090 	.word	0x0003d090
   12020:	000f4240 	.word	0x000f4240
   12024:	0013b000 	.word	0x0013b000
   12028:	003af000 	.word	0x003af000
   1202c:	004ea000 	.word	0x004ea000

00012030 <uarte_instance_init.isra.2>:
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(const struct device *dev,
   12030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	nrf_uarte_disable(uarte);

	data->dev = dev;

	nrf_gpio_pin_write(config->pseltxd, 1);
   12032:	680f      	ldr	r7, [r1, #0]
static int uarte_instance_init(const struct device *dev,
   12034:	460d      	mov	r5, r1

NRF_STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   12036:	2101      	movs	r1, #1
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   12038:	f04f 0c00 	mov.w	ip, #0
	return config->uarte_regs;
   1203c:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1203e:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   12040:	681c      	ldr	r4, [r3, #0]
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   12042:	f007 021f 	and.w	r2, r7, #31
    p_reg->OUTSET = set_mask;
   12046:	4b25      	ldr	r3, [pc, #148]	; (120dc <uarte_instance_init.isra.2+0xac>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   12048:	4091      	lsls	r1, r2
   1204a:	f8c4 c500 	str.w	ip, [r4, #1280]	; 0x500
	data->dev = dev;
   1204e:	6030      	str	r0, [r6, #0]
    p_reg->OUTSET = set_mask;
   12050:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   12052:	2103      	movs	r1, #3
   12054:	3280      	adds	r2, #128	; 0x80
   12056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   1205a:	686a      	ldr	r2, [r5, #4]
   1205c:	1c51      	adds	r1, r2, #1
    *p_pin = pin_number & 0x1F;
   1205e:	bf1e      	ittt	ne
   12060:	f002 011f 	andne.w	r1, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   12064:	3180      	addne	r1, #128	; 0x80
   12066:	f843 c021 	strne.w	ip, [r3, r1, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   1206a:	68a9      	ldr	r1, [r5, #8]
    p_reg->PSEL.TXD = pseltxd;
   1206c:	f8c4 750c 	str.w	r7, [r4, #1292]	; 0x50c
   12070:	1c4f      	adds	r7, r1, #1
   12072:	bf18      	it	ne
   12074:	2700      	movne	r7, #0
    p_reg->PSEL.RXD = pselrxd;
   12076:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
   1207a:	bf1e      	ittt	ne
   1207c:	f001 021f 	andne.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   12080:	3280      	addne	r2, #128	; 0x80
   12082:	f843 7022 	strne.w	r7, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   12086:	68ef      	ldr	r7, [r5, #12]
   12088:	1c7a      	adds	r2, r7, #1
   1208a:	d00c      	beq.n	120a6 <uarte_instance_init.isra.2+0x76>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1208c:	f04f 0c01 	mov.w	ip, #1
    *p_pin = pin_number & 0x1F;
   12090:	f007 021f 	and.w	r2, r7, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   12094:	fa0c fc02 	lsl.w	ip, ip, r2
    p_reg->OUTSET = set_mask;
   12098:	f8c3 c008 	str.w	ip, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1209c:	f04f 0c03 	mov.w	ip, #3
   120a0:	3280      	adds	r2, #128	; 0x80
   120a2:	f843 c022 	str.w	ip, [r3, r2, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   120a6:	f8c4 7508 	str.w	r7, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   120aa:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   120ae:	68c1      	ldr	r1, [r0, #12]
   120b0:	3104      	adds	r1, #4
   120b2:	f7ff ff07 	bl	11ec4 <uarte_nrfx_configure>
	if (err) {
   120b6:	b980      	cbnz	r0, 120da <uarte_instance_init.isra.2+0xaa>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   120b8:	2308      	movs	r3, #8
   120ba:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   120be:	686b      	ldr	r3, [r5, #4]
   120c0:	3301      	adds	r3, #1
   120c2:	d00a      	beq.n	120da <uarte_instance_init.isra.2+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   120c4:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
   120c8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
   120cc:	2301      	movs	r3, #1
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   120ce:	3610      	adds	r6, #16
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   120d0:	f8c4 6534 	str.w	r6, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   120d4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   120d8:	6023      	str	r3, [r4, #0]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
   120da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   120dc:	50842500 	.word	0x50842500

000120e0 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   120e0:	b530      	push	{r4, r5, lr}
   120e2:	b085      	sub	sp, #20
   120e4:	4605      	mov	r5, r0
   120e6:	466c      	mov	r4, sp
   120e8:	4b04      	ldr	r3, [pc, #16]	; (120fc <uarte_0_init+0x1c>)
   120ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   120ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   120f0:	4621      	mov	r1, r4
   120f2:	4628      	mov	r0, r5
   120f4:	f7ff ff9c 	bl	12030 <uarte_instance_init.isra.2>
   120f8:	b005      	add	sp, #20
   120fa:	bd30      	pop	{r4, r5, pc}
   120fc:	0001523c 	.word	0x0001523c

00012100 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   12100:	b530      	push	{r4, r5, lr}
   12102:	b085      	sub	sp, #20
   12104:	4605      	mov	r5, r0
   12106:	466c      	mov	r4, sp
   12108:	4b04      	ldr	r3, [pc, #16]	; (1211c <uarte_1_init+0x1c>)
   1210a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1210c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   12110:	4621      	mov	r1, r4
   12112:	4628      	mov	r0, r5
   12114:	f7ff ff8c 	bl	12030 <uarte_instance_init.isra.2>
   12118:	b005      	add	sp, #20
   1211a:	bd30      	pop	{r4, r5, pc}
   1211c:	0001524c 	.word	0x0001524c

00012120 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   12120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   12124:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   12126:	4c21      	ldr	r4, [pc, #132]	; (121ac <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   12128:	4e21      	ldr	r6, [pc, #132]	; (121b0 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1212a:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   1212e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 121b8 <check_ext_api_requests+0x98>
{
   12132:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   12134:	45a8      	cmp	r8, r5
   12136:	d803      	bhi.n	12140 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   12138:	2000      	movs	r0, #0
   1213a:	b005      	add	sp, #20
   1213c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   12140:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12142:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   12146:	681f      	ldr	r7, [r3, #0]
   12148:	ab01      	add	r3, sp, #4
   1214a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   1214e:	220c      	movs	r2, #12
   12150:	4619      	mov	r1, r3
   12152:	4638      	mov	r0, r7
   12154:	f002 fd05 	bl	14b62 <memcmp>
   12158:	b990      	cbnz	r0, 12180 <check_ext_api_requests+0x60>
   1215a:	b18f      	cbz	r7, 12180 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   1215c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   1215e:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   12160:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   12162:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   12164:	4291      	cmp	r1, r2
   12166:	d10b      	bne.n	12180 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   12168:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   1216a:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   1216c:	4291      	cmp	r1, r2
   1216e:	d807      	bhi.n	12180 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   12170:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   12172:	4291      	cmp	r1, r2
   12174:	d904      	bls.n	12180 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   12176:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   12178:	695b      	ldr	r3, [r3, #20]
   1217a:	ea32 0303 	bics.w	r3, r2, r3
   1217e:	d00a      	beq.n	12196 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   12180:	6a27      	ldr	r7, [r4, #32]
   12182:	b167      	cbz	r7, 1219e <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   12184:	480b      	ldr	r0, [pc, #44]	; (121b4 <check_ext_api_requests+0x94>)
   12186:	f002 f9e8 	bl	1455a <printk>
			k_panic();
   1218a:	4040      	eors	r0, r0
   1218c:	f380 8811 	msr	BASEPRI, r0
   12190:	f04f 0004 	mov.w	r0, #4
   12194:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   12196:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   12198:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   1219a:	441c      	add	r4, r3
   1219c:	e7ca      	b.n	12134 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   1219e:	4648      	mov	r0, r9
   121a0:	f002 f9db 	bl	1455a <printk>
			*ext_api_req->ext_api = NULL;
   121a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   121a6:	601f      	str	r7, [r3, #0]
   121a8:	e7f5      	b.n	12196 <check_ext_api_requests+0x76>
   121aa:	bf00      	nop
   121ac:	0001043c 	.word	0x0001043c
   121b0:	0001525c 	.word	0x0001525c
   121b4:	00015877 	.word	0x00015877
   121b8:	000158a0 	.word	0x000158a0

000121bc <nrf91_errata_14>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
   121bc:	4b05      	ldr	r3, [pc, #20]	; (121d4 <nrf91_errata_14+0x18>)
   121be:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   121c0:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
   121c2:	681b      	ldr	r3, [r3, #0]
   121c4:	2b09      	cmp	r3, #9
   121c6:	d103      	bne.n	121d0 <nrf91_errata_14+0x14>
            {
                switch(var2)
   121c8:	1e43      	subs	r3, r0, #1
   121ca:	4258      	negs	r0, r3
   121cc:	4158      	adcs	r0, r3
   121ce:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   121d0:	2000      	movs	r0, #0
    #endif
}
   121d2:	4770      	bx	lr
   121d4:	00ff0134 	.word	0x00ff0134

000121d8 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
   121d8:	4a4f      	ldr	r2, [pc, #316]	; (12318 <SystemInit+0x140>)
{
   121da:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
   121dc:	6813      	ldr	r3, [r2, #0]
   121de:	f043 0302 	orr.w	r3, r3, #2
   121e2:	6013      	str	r3, [r2, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   121e4:	4b4d      	ldr	r3, [pc, #308]	; (1231c <SystemInit+0x144>)
            if (var1 == 0x09)
   121e6:	681b      	ldr	r3, [r3, #0]
   121e8:	2b09      	cmp	r3, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
   121ea:	bf01      	itttt	eq
   121ec:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
   121f0:	2200      	moveq	r2, #0
   121f2:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
   121f6:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
   121fa:	f7ff ffdf 	bl	121bc <nrf91_errata_14>
   121fe:	b130      	cbz	r0, 1220e <SystemInit+0x36>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
   12200:	2301      	movs	r3, #1
   12202:	4a47      	ldr	r2, [pc, #284]	; (12320 <SystemInit+0x148>)
   12204:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
   12206:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
   1220a:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   1220e:	4b43      	ldr	r3, [pc, #268]	; (1231c <SystemInit+0x144>)
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
   12210:	681b      	ldr	r3, [r3, #0]
   12212:	2b09      	cmp	r3, #9
   12214:	d107      	bne.n	12226 <SystemInit+0x4e>
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
   12216:	4b43      	ldr	r3, [pc, #268]	; (12324 <SystemInit+0x14c>)
            {
                switch(var2)
   12218:	681b      	ldr	r3, [r3, #0]
   1221a:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
   1221c:	bf1e      	ittt	ne
   1221e:	2201      	movne	r2, #1
   12220:	4b41      	ldrne	r3, [pc, #260]	; (12328 <SystemInit+0x150>)
   12222:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
   12226:	f7ff ffc9 	bl	121bc <nrf91_errata_14>
   1222a:	b110      	cbz	r0, 12232 <SystemInit+0x5a>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
   1222c:	220e      	movs	r2, #14
   1222e:	4b3f      	ldr	r3, [pc, #252]	; (1232c <SystemInit+0x154>)
   12230:	601a      	str	r2, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   12232:	4b3a      	ldr	r3, [pc, #232]	; (1231c <SystemInit+0x144>)
            if (var1 == 0x09)
   12234:	681b      	ldr	r3, [r3, #0]
   12236:	2b09      	cmp	r3, #9
   12238:	d104      	bne.n	12244 <SystemInit+0x6c>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
   1223a:	2200      	movs	r2, #0
   1223c:	4b3c      	ldr	r3, [pc, #240]	; (12330 <SystemInit+0x158>)
   1223e:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
   12240:	2201      	movs	r2, #1
   12242:	605a      	str	r2, [r3, #4]
{
   12244:	2200      	movs	r2, #0
   12246:	00d3      	lsls	r3, r2, #3
   12248:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   1224c:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
   12250:	3101      	adds	r1, #1
   12252:	d008      	beq.n	12266 <SystemInit+0x8e>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
   12254:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   12258:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
   1225a:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   1225e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
   12262:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   12264:	d1ef      	bne.n	12246 <SystemInit+0x6e>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
   12266:	4b33      	ldr	r3, [pc, #204]	; (12334 <SystemInit+0x15c>)
   12268:	69da      	ldr	r2, [r3, #28]
   1226a:	07d1      	lsls	r1, r2, #31
   1226c:	d53b      	bpl.n	122e6 <SystemInit+0x10e>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   1226e:	4b32      	ldr	r3, [pc, #200]	; (12338 <SystemInit+0x160>)
   12270:	4619      	mov	r1, r3
   12272:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   12276:	2a01      	cmp	r2, #1
   12278:	d1fb      	bne.n	12272 <SystemInit+0x9a>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
   1227a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   1227e:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
   12282:	2b01      	cmp	r3, #1
   12284:	d1fb      	bne.n	1227e <SystemInit+0xa6>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
   12286:	4b2b      	ldr	r3, [pc, #172]	; (12334 <SystemInit+0x15c>)
   12288:	69da      	ldr	r2, [r3, #28]
   1228a:	07d2      	lsls	r2, r2, #31
   1228c:	d508      	bpl.n	122a0 <SystemInit+0xc8>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
   1228e:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   12290:	4929      	ldr	r1, [pc, #164]	; (12338 <SystemInit+0x160>)
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
   12292:	f022 0201 	bic.w	r2, r2, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
   12296:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   12298:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
   1229c:	2a01      	cmp	r2, #1
   1229e:	d1fb      	bne.n	12298 <SystemInit+0xc0>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
   122a0:	6a1a      	ldr	r2, [r3, #32]
   122a2:	3201      	adds	r2, #1
   122a4:	d10a      	bne.n	122bc <SystemInit+0xe4>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
   122a6:	6a1a      	ldr	r2, [r3, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
   122a8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   122ac:	f042 0220 	orr.w	r2, r2, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
   122b0:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   122b2:	4a21      	ldr	r2, [pc, #132]	; (12338 <SystemInit+0x160>)
   122b4:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   122b8:	2b01      	cmp	r3, #1
   122ba:	d1fb      	bne.n	122b4 <SystemInit+0xdc>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
   122bc:	2200      	movs	r2, #0
   122be:	4b1e      	ldr	r3, [pc, #120]	; (12338 <SystemInit+0x160>)
   122c0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   122c4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   122c8:	2a01      	cmp	r2, #1
   122ca:	d1fb      	bne.n	122c4 <SystemInit+0xec>
  __ASM volatile ("dsb 0xF":::"memory");
   122cc:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   122d0:	491a      	ldr	r1, [pc, #104]	; (1233c <SystemInit+0x164>)
   122d2:	4b1b      	ldr	r3, [pc, #108]	; (12340 <SystemInit+0x168>)
   122d4:	68ca      	ldr	r2, [r1, #12]
   122d6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   122da:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   122dc:	60cb      	str	r3, [r1, #12]
   122de:	f3bf 8f4f 	dsb	sy
    __NOP();
   122e2:	bf00      	nop
   122e4:	e7fd      	b.n	122e2 <SystemInit+0x10a>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
   122e6:	6a1b      	ldr	r3, [r3, #32]
   122e8:	3301      	adds	r3, #1
   122ea:	d0c0      	beq.n	1226e <SystemInit+0x96>
        SCB->NSACR |= (3UL << 10);
   122ec:	4b13      	ldr	r3, [pc, #76]	; (1233c <SystemInit+0x164>)
   122ee:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
   122f2:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
   122f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   122fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   122fe:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   12302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   12306:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1230a:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   1230e:	4b0d      	ldr	r3, [pc, #52]	; (12344 <SystemInit+0x16c>)
   12310:	4a0d      	ldr	r2, [pc, #52]	; (12348 <SystemInit+0x170>)
   12312:	601a      	str	r2, [r3, #0]
}
   12314:	bd08      	pop	{r3, pc}
   12316:	bf00      	nop
   12318:	e000edd0 	.word	0xe000edd0
   1231c:	00ff0130 	.word	0x00ff0130
   12320:	50004a38 	.word	0x50004a38
   12324:	00ff0134 	.word	0x00ff0134
   12328:	50004000 	.word	0x50004000
   1232c:	5003aee4 	.word	0x5003aee4
   12330:	5000470c 	.word	0x5000470c
   12334:	00ff8000 	.word	0x00ff8000
   12338:	50039000 	.word	0x50039000
   1233c:	e000ed00 	.word	0xe000ed00
   12340:	05fa0004 	.word	0x05fa0004
   12344:	20000050 	.word	0x20000050
   12348:	03d09000 	.word	0x03d09000

0001234c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1234c:	4b04      	ldr	r3, [pc, #16]	; (12360 <nrfx_clock_init+0x14>)
   1234e:	791a      	ldrb	r2, [r3, #4]
   12350:	b922      	cbnz	r2, 1235c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   12352:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   12354:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   12356:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   12358:	4802      	ldr	r0, [pc, #8]	; (12364 <nrfx_clock_init+0x18>)
   1235a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1235c:	4802      	ldr	r0, [pc, #8]	; (12368 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1235e:	4770      	bx	lr
   12360:	200007e8 	.word	0x200007e8
   12364:	0bad0000 	.word	0x0bad0000
   12368:	0bad000c 	.word	0x0bad000c

0001236c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1236c:	b110      	cbz	r0, 12374 <nrfx_clock_start+0x8>
   1236e:	2801      	cmp	r0, #1
   12370:	d020      	beq.n	123b4 <nrfx_clock_start+0x48>
   12372:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   12374:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   12378:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1237c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   12380:	03c9      	lsls	r1, r1, #15
   12382:	d511      	bpl.n	123a8 <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   12384:	f003 0303 	and.w	r3, r3, #3
   12388:	2b02      	cmp	r3, #2
   1238a:	d10d      	bne.n	123a8 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1238c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12390:	2200      	movs	r2, #0
   12392:	4b0d      	ldr	r3, [pc, #52]	; (123c8 <nrfx_clock_start+0x5c>)
   12394:	601a      	str	r2, [r3, #0]
   12396:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   12398:	2202      	movs	r2, #2
   1239a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1239e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   123a2:	2201      	movs	r2, #1
   123a4:	609a      	str	r2, [r3, #8]
   123a6:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   123a8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   123ac:	2201      	movs	r2, #1
   123ae:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   123b2:	e7ed      	b.n	12390 <nrfx_clock_start+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   123b4:	2200      	movs	r2, #0
   123b6:	4b05      	ldr	r3, [pc, #20]	; (123cc <nrfx_clock_start+0x60>)
   123b8:	601a      	str	r2, [r3, #0]
   123ba:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   123bc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   123c0:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   123c4:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   123c6:	4770      	bx	lr
   123c8:	50005104 	.word	0x50005104
   123cc:	50005100 	.word	0x50005100

000123d0 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   123d0:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   123d2:	b110      	cbz	r0, 123da <nrfx_clock_stop+0xa>
   123d4:	2801      	cmp	r0, #1
   123d6:	d018      	beq.n	1240a <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   123d8:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   123da:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   123de:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   123e0:	2101      	movs	r1, #1
   123e2:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   123e6:	461c      	mov	r4, r3
    p_reg->INTENCLR = mask;
   123e8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   123ec:	4a15      	ldr	r2, [pc, #84]	; (12444 <nrfx_clock_stop+0x74>)
   123ee:	6010      	str	r0, [r2, #0]
   123f0:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   123f2:	4a15      	ldr	r2, [pc, #84]	; (12448 <nrfx_clock_stop+0x78>)
   123f4:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   123f6:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   123fa:	03db      	lsls	r3, r3, #15
   123fc:	d5ec      	bpl.n	123d8 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   123fe:	2001      	movs	r0, #1
   12400:	f002 fc97 	bl	14d32 <nrfx_busy_wait>
   12404:	3d01      	subs	r5, #1
   12406:	d1f6      	bne.n	123f6 <nrfx_clock_stop+0x26>
   12408:	e7e6      	b.n	123d8 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   1240a:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1240e:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12410:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12414:	4b0d      	ldr	r3, [pc, #52]	; (1244c <nrfx_clock_stop+0x7c>)
    p_reg->INTENCLR = mask;
   12416:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1241a:	601a      	str	r2, [r3, #0]
   1241c:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1241e:	4b0c      	ldr	r3, [pc, #48]	; (12450 <nrfx_clock_stop+0x80>)
   12420:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   12422:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   12426:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1242a:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1242e:	03d2      	lsls	r2, r2, #15
   12430:	d5d2      	bpl.n	123d8 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   12432:	2b00      	cmp	r3, #0
   12434:	d0d0      	beq.n	123d8 <nrfx_clock_stop+0x8>
   12436:	2001      	movs	r0, #1
   12438:	f002 fc7b 	bl	14d32 <nrfx_busy_wait>
   1243c:	3d01      	subs	r5, #1
   1243e:	d1f0      	bne.n	12422 <nrfx_clock_stop+0x52>
   12440:	e7ca      	b.n	123d8 <nrfx_clock_stop+0x8>
   12442:	bf00      	nop
   12444:	50005104 	.word	0x50005104
   12448:	5000500c 	.word	0x5000500c
   1244c:	50005100 	.word	0x50005100
   12450:	50005004 	.word	0x50005004

00012454 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   12454:	4b16      	ldr	r3, [pc, #88]	; (124b0 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   12456:	b510      	push	{r4, lr}
   12458:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1245a:	b152      	cbz	r2, 12472 <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1245c:	2000      	movs	r0, #0
   1245e:	6018      	str	r0, [r3, #0]
   12460:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   12462:	2201      	movs	r2, #1
   12464:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   12468:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1246c:	4b11      	ldr	r3, [pc, #68]	; (124b4 <nrfx_power_clock_irq_handler+0x60>)
   1246e:	681b      	ldr	r3, [r3, #0]
   12470:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   12472:	4b11      	ldr	r3, [pc, #68]	; (124b8 <nrfx_power_clock_irq_handler+0x64>)
   12474:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   12476:	b18a      	cbz	r2, 1249c <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12478:	2200      	movs	r2, #0
   1247a:	601a      	str	r2, [r3, #0]
   1247c:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1247e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   12482:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   12486:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1248a:	f002 0203 	and.w	r2, r2, #3
   1248e:	2a01      	cmp	r2, #1
   12490:	f04f 0102 	mov.w	r1, #2
   12494:	d103      	bne.n	1249e <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
   12496:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1249a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1249c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   1249e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   124a2:	4b04      	ldr	r3, [pc, #16]	; (124b4 <nrfx_power_clock_irq_handler+0x60>)
   124a4:	2001      	movs	r0, #1
}
   124a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   124aa:	681b      	ldr	r3, [r3, #0]
   124ac:	4718      	bx	r3
   124ae:	bf00      	nop
   124b0:	50005100 	.word	0x50005100
   124b4:	200007e8 	.word	0x200007e8
   124b8:	50005104 	.word	0x50005104

000124bc <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   124bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   124be:	4b10      	ldr	r3, [pc, #64]	; (12500 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   124c0:	4f10      	ldr	r7, [pc, #64]	; (12504 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   124c2:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   124c6:	3001      	adds	r0, #1
   124c8:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   124cc:	42ae      	cmp	r6, r5
   124ce:	d800      	bhi.n	124d2 <z_sys_init_run_level+0x16>
		}
	}
}
   124d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   124d2:	e9d5 3400 	ldrd	r3, r4, [r5]
   124d6:	4620      	mov	r0, r4
   124d8:	4798      	blx	r3
   124da:	b170      	cbz	r0, 124fa <z_sys_init_run_level+0x3e>
   124dc:	b16c      	cbz	r4, 124fa <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   124de:	2301      	movs	r3, #1
				(dev - __device_start));
   124e0:	1be4      	subs	r4, r4, r7
   124e2:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   124e4:	4a08      	ldr	r2, [pc, #32]	; (12508 <z_sys_init_run_level+0x4c>)
   124e6:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   124e8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   124ec:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   124f0:	fa03 f404 	lsl.w	r4, r3, r4
   124f4:	4304      	orrs	r4, r0
   124f6:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   124fa:	3508      	adds	r5, #8
   124fc:	e7e6      	b.n	124cc <z_sys_init_run_level+0x10>
   124fe:	bf00      	nop
   12500:	00015414 	.word	0x00015414
   12504:	2000009c 	.word	0x2000009c
   12508:	200000ec 	.word	0x200000ec

0001250c <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   1250c:	4b08      	ldr	r3, [pc, #32]	; (12530 <z_device_ready+0x24>)
   1250e:	1ac0      	subs	r0, r0, r3
   12510:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   12512:	4b08      	ldr	r3, [pc, #32]	; (12534 <z_device_ready+0x28>)
   12514:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   12516:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   1251a:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1251c:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   12520:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   12524:	4210      	tst	r0, r2
}
   12526:	bf0c      	ite	eq
   12528:	4618      	moveq	r0, r3
   1252a:	2000      	movne	r0, #0
   1252c:	4770      	bx	lr
   1252e:	bf00      	nop
   12530:	2000009c 	.word	0x2000009c
   12534:	200000ec 	.word	0x200000ec

00012538 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   12538:	4911      	ldr	r1, [pc, #68]	; (12580 <z_impl_device_get_binding+0x48>)
{
   1253a:	b570      	push	{r4, r5, r6, lr}
   1253c:	4605      	mov	r5, r0
   1253e:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   12540:	4c10      	ldr	r4, [pc, #64]	; (12584 <z_impl_device_get_binding+0x4c>)
   12542:	428c      	cmp	r4, r1
   12544:	d104      	bne.n	12550 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   12546:	4c0f      	ldr	r4, [pc, #60]	; (12584 <z_impl_device_get_binding+0x4c>)
   12548:	42b4      	cmp	r4, r6
   1254a:	d10a      	bne.n	12562 <z_impl_device_get_binding+0x2a>
	return NULL;
   1254c:	2400      	movs	r4, #0
   1254e:	e014      	b.n	1257a <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   12550:	4620      	mov	r0, r4
   12552:	f7ff ffdb 	bl	1250c <z_device_ready>
   12556:	b110      	cbz	r0, 1255e <z_impl_device_get_binding+0x26>
   12558:	6823      	ldr	r3, [r4, #0]
   1255a:	42ab      	cmp	r3, r5
   1255c:	d00d      	beq.n	1257a <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   1255e:	3410      	adds	r4, #16
   12560:	e7ef      	b.n	12542 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   12562:	4620      	mov	r0, r4
   12564:	f7ff ffd2 	bl	1250c <z_device_ready>
   12568:	b908      	cbnz	r0, 1256e <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   1256a:	3410      	adds	r4, #16
   1256c:	e7ec      	b.n	12548 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1256e:	6821      	ldr	r1, [r4, #0]
   12570:	4628      	mov	r0, r5
   12572:	f002 faea 	bl	14b4a <strcmp>
   12576:	2800      	cmp	r0, #0
   12578:	d1f7      	bne.n	1256a <z_impl_device_get_binding+0x32>
}
   1257a:	4620      	mov	r0, r4
   1257c:	bd70      	pop	{r4, r5, r6, pc}
   1257e:	bf00      	nop
   12580:	200000ec 	.word	0x200000ec
   12584:	2000009c 	.word	0x2000009c

00012588 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   12588:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1258a:	4d0b      	ldr	r5, [pc, #44]	; (125b8 <idle+0x30>)
   1258c:	f04f 0220 	mov.w	r2, #32
   12590:	f3ef 8311 	mrs	r3, BASEPRI
   12594:	f382 8811 	msr	BASEPRI, r2
   12598:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1259c:	f002 fcd9 	bl	14f52 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   125a0:	2101      	movs	r1, #1
	int32_t ticks = z_get_next_timeout_expiry();
   125a2:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   125a4:	2802      	cmp	r0, #2
   125a6:	bfd8      	it	le
   125a8:	4608      	movle	r0, r1
   125aa:	f002 fce2 	bl	14f72 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   125ae:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
   125b0:	f7ff f8a8 	bl	11704 <arch_cpu_idle>
   125b4:	e7ea      	b.n	1258c <idle+0x4>
   125b6:	bf00      	nop
   125b8:	200007f0 	.word	0x200007f0

000125bc <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   125bc:	4802      	ldr	r0, [pc, #8]	; (125c8 <z_bss_zero+0xc>)
   125be:	4a03      	ldr	r2, [pc, #12]	; (125cc <z_bss_zero+0x10>)
   125c0:	2100      	movs	r1, #0
   125c2:	1a12      	subs	r2, r2, r0
   125c4:	f002 bb1e 	b.w	14c04 <memset>
   125c8:	20000140 	.word	0x20000140
   125cc:	20000850 	.word	0x20000850

000125d0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   125d0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   125d2:	4806      	ldr	r0, [pc, #24]	; (125ec <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   125d4:	4a06      	ldr	r2, [pc, #24]	; (125f0 <z_data_copy+0x20>)
   125d6:	4907      	ldr	r1, [pc, #28]	; (125f4 <z_data_copy+0x24>)
   125d8:	1a12      	subs	r2, r2, r0
   125da:	f002 fae9 	bl	14bb0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   125de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   125e2:	4a05      	ldr	r2, [pc, #20]	; (125f8 <z_data_copy+0x28>)
   125e4:	4905      	ldr	r1, [pc, #20]	; (125fc <z_data_copy+0x2c>)
   125e6:	4806      	ldr	r0, [pc, #24]	; (12600 <z_data_copy+0x30>)
   125e8:	f002 bae2 	b.w	14bb0 <memcpy>
   125ec:	20000000 	.word	0x20000000
   125f0:	20000140 	.word	0x20000140
   125f4:	00015934 	.word	0x00015934
   125f8:	00000000 	.word	0x00000000
   125fc:	00015934 	.word	0x00015934
   12600:	20000000 	.word	0x20000000

00012604 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   12604:	2201      	movs	r2, #1
{
   12606:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   12608:	4b0b      	ldr	r3, [pc, #44]	; (12638 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1260a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1260c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1260e:	f7ff ff55 	bl	124bc <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   12612:	4a0a      	ldr	r2, [pc, #40]	; (1263c <bg_thread_main+0x38>)
   12614:	490a      	ldr	r1, [pc, #40]	; (12640 <bg_thread_main+0x3c>)
   12616:	480b      	ldr	r0, [pc, #44]	; (12644 <bg_thread_main+0x40>)
   12618:	f001 ff9f 	bl	1455a <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1261c:	2003      	movs	r0, #3
   1261e:	f7ff ff4d 	bl	124bc <z_sys_init_run_level>

	z_init_static_threads();
   12622:	f000 fda9 	bl	13178 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   12626:	f001 fe5d 	bl	142e4 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1262a:	4a07      	ldr	r2, [pc, #28]	; (12648 <bg_thread_main+0x44>)
   1262c:	7b13      	ldrb	r3, [r2, #12]
   1262e:	f023 0301 	bic.w	r3, r3, #1
   12632:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   12634:	bd08      	pop	{r3, pc}
   12636:	bf00      	nop
   12638:	2000084d 	.word	0x2000084d
   1263c:	0001556f 	.word	0x0001556f
   12640:	000158de 	.word	0x000158de
   12644:	00015901 	.word	0x00015901
   12648:	200001c0 	.word	0x200001c0

0001264c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1264c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   12650:	4b37      	ldr	r3, [pc, #220]	; (12730 <z_cstart+0xe4>)
   12652:	b0a7      	sub	sp, #156	; 0x9c
	uint32_t msp =
   12654:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   12658:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   1265c:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12660:	2400      	movs	r4, #0
   12662:	23e0      	movs	r3, #224	; 0xe0
   12664:	4d33      	ldr	r5, [pc, #204]	; (12734 <z_cstart+0xe8>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   12666:	f04f 0b01 	mov.w	fp, #1
   1266a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1266e:	77ec      	strb	r4, [r5, #31]
   12670:	762c      	strb	r4, [r5, #24]
   12672:	766c      	strb	r4, [r5, #25]
   12674:	76ac      	strb	r4, [r5, #26]
   12676:	76ec      	strb	r4, [r5, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   12678:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   1267a:	4e2f      	ldr	r6, [pc, #188]	; (12738 <z_cstart+0xec>)
   1267c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   12680:	626b      	str	r3, [r5, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
   12682:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   12684:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 12754 <z_cstart+0x108>
   12688:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   1268c:	626b      	str	r3, [r5, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
   1268e:	63ac      	str	r4, [r5, #56]	; 0x38

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   12690:	f7ff f9c6 	bl	11a20 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   12694:	f7ff f830 	bl	116f8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   12698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1269c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1269e:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   126a0:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   126a4:	4d25      	ldr	r5, [pc, #148]	; (1273c <z_cstart+0xf0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   126a6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   126aa:	ab06      	add	r3, sp, #24
   126ac:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   126ae:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   126b0:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
   126b4:	f7ff ff02 	bl	124bc <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   126b8:	2001      	movs	r0, #1
   126ba:	f7ff feff 	bl	124bc <z_sys_init_run_level>
	z_sched_init();
   126be:	f000 fc65 	bl	12f8c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   126c2:	4b1f      	ldr	r3, [pc, #124]	; (12740 <z_cstart+0xf4>)
	_kernel.ready_q.cache = &z_main_thread;
   126c4:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   126c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   126ca:	491e      	ldr	r1, [pc, #120]	; (12744 <z_cstart+0xf8>)
   126cc:	9305      	str	r3, [sp, #20]
   126ce:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   126d2:	4643      	mov	r3, r8
   126d4:	e9cd 4401 	strd	r4, r4, [sp, #4]
   126d8:	9400      	str	r4, [sp, #0]
   126da:	4630      	mov	r0, r6
   126dc:	f000 fd1e 	bl	1311c <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   126e0:	7b73      	ldrb	r3, [r6, #13]
   126e2:	4682      	mov	sl, r0
   126e4:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   126e8:	4630      	mov	r0, r6
   126ea:	7373      	strb	r3, [r6, #13]
   126ec:	f002 fb96 	bl	14e1c <z_ready_thread>
	z_setup_new_thread(thread, stack,
   126f0:	230f      	movs	r3, #15
   126f2:	4f15      	ldr	r7, [pc, #84]	; (12748 <z_cstart+0xfc>)
   126f4:	e9cd 4302 	strd	r4, r3, [sp, #8]
   126f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   126fc:	4b13      	ldr	r3, [pc, #76]	; (1274c <z_cstart+0x100>)
   126fe:	4914      	ldr	r1, [pc, #80]	; (12750 <z_cstart+0x104>)
   12700:	e9cd b404 	strd	fp, r4, [sp, #16]
   12704:	e9cd 4400 	strd	r4, r4, [sp]
   12708:	4638      	mov	r0, r7
   1270a:	f000 fd07 	bl	1311c <z_setup_new_thread>
   1270e:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   12710:	60ef      	str	r7, [r5, #12]
   12712:	f023 0304 	bic.w	r3, r3, #4
   12716:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   12718:	f105 0318 	add.w	r3, r5, #24
		_kernel.cpus[i].id = i;
   1271c:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   1271e:	f8c5 9004 	str.w	r9, [r5, #4]
	list->tail = (sys_dnode_t *)list;
   12722:	e9c5 3306 	strd	r3, r3, [r5, #24]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   12726:	4642      	mov	r2, r8
   12728:	4651      	mov	r1, sl
   1272a:	4630      	mov	r0, r6
   1272c:	f7fe ffc6 	bl	116bc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   12730:	20000d90 	.word	0x20000d90
   12734:	e000ed00 	.word	0xe000ed00
   12738:	200001c0 	.word	0x200001c0
   1273c:	200007f0 	.word	0x200007f0
   12740:	00015928 	.word	0x00015928
   12744:	20000850 	.word	0x20000850
   12748:	20000140 	.word	0x20000140
   1274c:	00012589 	.word	0x00012589
   12750:	20000c50 	.word	0x20000c50
   12754:	00012605 	.word	0x00012605

00012758 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   12758:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1275a:	4b0e      	ldr	r3, [pc, #56]	; (12794 <init_mem_slab_module+0x3c>)
   1275c:	4c0e      	ldr	r4, [pc, #56]	; (12798 <init_mem_slab_module+0x40>)
   1275e:	42a3      	cmp	r3, r4
   12760:	d301      	bcc.n	12766 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   12762:	2000      	movs	r0, #0
	return rc;
}
   12764:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   12766:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1276a:	ea41 0200 	orr.w	r2, r1, r0
   1276e:	f012 0203 	ands.w	r2, r2, #3
   12772:	d10b      	bne.n	1278c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   12774:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   12776:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   12778:	42aa      	cmp	r2, r5
   1277a:	d101      	bne.n	12780 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1277c:	331c      	adds	r3, #28
   1277e:	e7ee      	b.n	1275e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   12780:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   12782:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   12784:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   12786:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   12788:	4401      	add	r1, r0
   1278a:	e7f5      	b.n	12778 <init_mem_slab_module+0x20>
		return -EINVAL;
   1278c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   12790:	e7e8      	b.n	12764 <init_mem_slab_module+0xc>
   12792:	bf00      	nop
   12794:	200000f0 	.word	0x200000f0
   12798:	200000f0 	.word	0x200000f0

0001279c <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1279c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1279e:	460c      	mov	r4, r1
   127a0:	4616      	mov	r6, r2
   127a2:	461f      	mov	r7, r3
   127a4:	f04f 0320 	mov.w	r3, #32
   127a8:	f3ef 8111 	mrs	r1, BASEPRI
   127ac:	f383 8811 	msr	BASEPRI, r3
   127b0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   127b4:	6943      	ldr	r3, [r0, #20]
   127b6:	b15b      	cbz	r3, 127d0 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   127b8:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   127ba:	681b      	ldr	r3, [r3, #0]
   127bc:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   127be:	6983      	ldr	r3, [r0, #24]
   127c0:	3301      	adds	r3, #1
   127c2:	6183      	str	r3, [r0, #24]
		result = 0;
   127c4:	2000      	movs	r0, #0
	__asm__ volatile(
   127c6:	f381 8811 	msr	BASEPRI, r1
   127ca:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   127ce:	e011      	b.n	127f4 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   127d0:	ea56 0207 	orrs.w	r2, r6, r7
   127d4:	d103      	bne.n	127de <k_mem_slab_alloc+0x42>
		*mem = NULL;
   127d6:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   127d8:	f06f 000b 	mvn.w	r0, #11
   127dc:	e7f3      	b.n	127c6 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   127de:	4602      	mov	r2, r0
   127e0:	e9cd 6700 	strd	r6, r7, [sp]
   127e4:	4804      	ldr	r0, [pc, #16]	; (127f8 <k_mem_slab_alloc+0x5c>)
   127e6:	f000 fb4b 	bl	12e80 <z_pend_curr>
		if (result == 0) {
   127ea:	b918      	cbnz	r0, 127f4 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   127ec:	4b03      	ldr	r3, [pc, #12]	; (127fc <k_mem_slab_alloc+0x60>)
   127ee:	689b      	ldr	r3, [r3, #8]
   127f0:	695b      	ldr	r3, [r3, #20]
   127f2:	6023      	str	r3, [r4, #0]
}
   127f4:	b002      	add	sp, #8
   127f6:	bdd0      	pop	{r4, r6, r7, pc}
   127f8:	2000084e 	.word	0x2000084e
   127fc:	200007f0 	.word	0x200007f0

00012800 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   12800:	b570      	push	{r4, r5, r6, lr}
   12802:	4604      	mov	r4, r0
   12804:	460d      	mov	r5, r1
	__asm__ volatile(
   12806:	f04f 0320 	mov.w	r3, #32
   1280a:	f3ef 8611 	mrs	r6, BASEPRI
   1280e:	f383 8811 	msr	BASEPRI, r3
   12812:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   12816:	f002 fb59 	bl	14ecc <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1281a:	b158      	cbz	r0, 12834 <k_mem_slab_free+0x34>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1281c:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1281e:	682a      	ldr	r2, [r5, #0]
   12820:	67c1      	str	r1, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   12822:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
   12824:	f002 fafa 	bl	14e1c <z_ready_thread>
		z_reschedule(&lock, key);
   12828:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1282a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1282e:	4808      	ldr	r0, [pc, #32]	; (12850 <k_mem_slab_free+0x50>)
   12830:	f000 b910 	b.w	12a54 <z_reschedule>
		**(char ***)mem = slab->free_list;
   12834:	682b      	ldr	r3, [r5, #0]
   12836:	6962      	ldr	r2, [r4, #20]
   12838:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1283a:	682b      	ldr	r3, [r5, #0]
   1283c:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1283e:	69a3      	ldr	r3, [r4, #24]
   12840:	3b01      	subs	r3, #1
   12842:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   12844:	f386 8811 	msr	BASEPRI, r6
   12848:	f3bf 8f6f 	isb	sy
}
   1284c:	bd70      	pop	{r4, r5, r6, pc}
   1284e:	bf00      	nop
   12850:	2000084e 	.word	0x2000084e

00012854 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   12854:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12858:	4604      	mov	r4, r0
   1285a:	4616      	mov	r6, r2
   1285c:	461f      	mov	r7, r3
	__asm__ volatile(
   1285e:	f04f 0320 	mov.w	r3, #32
   12862:	f3ef 8811 	mrs	r8, BASEPRI
   12866:	f383 8811 	msr	BASEPRI, r3
   1286a:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1286e:	68c3      	ldr	r3, [r0, #12]
   12870:	4a32      	ldr	r2, [pc, #200]	; (1293c <z_impl_k_mutex_lock+0xe8>)
   12872:	b16b      	cbz	r3, 12890 <z_impl_k_mutex_lock+0x3c>
   12874:	6880      	ldr	r0, [r0, #8]
   12876:	6891      	ldr	r1, [r2, #8]
   12878:	4288      	cmp	r0, r1
   1287a:	d019      	beq.n	128b0 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1287c:	ea56 0307 	orrs.w	r3, r6, r7
   12880:	d118      	bne.n	128b4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   12882:	f388 8811 	msr	BASEPRI, r8
   12886:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1288a:	f06f 000f 	mvn.w	r0, #15
   1288e:	e00c      	b.n	128aa <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   12890:	6891      	ldr	r1, [r2, #8]
   12892:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   12896:	3301      	adds	r3, #1
   12898:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1289a:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1289c:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   1289e:	60a3      	str	r3, [r4, #8]
   128a0:	f388 8811 	msr	BASEPRI, r8
   128a4:	f3bf 8f6f 	isb	sy
		return 0;
   128a8:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   128aa:	b002      	add	sp, #8
   128ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   128b0:	6921      	ldr	r1, [r4, #16]
   128b2:	e7f0      	b.n	12896 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   128b4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   128b8:	f991 100e 	ldrsb.w	r1, [r1, #14]
   128bc:	4299      	cmp	r1, r3
   128be:	bfa8      	it	ge
   128c0:	4619      	movge	r1, r3
   128c2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   128c6:	4299      	cmp	r1, r3
   128c8:	da2c      	bge.n	12924 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   128ca:	f000 fb1b 	bl	12f04 <z_set_prio>
   128ce:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   128d0:	e9cd 6700 	strd	r6, r7, [sp]
   128d4:	4622      	mov	r2, r4
   128d6:	4641      	mov	r1, r8
   128d8:	4819      	ldr	r0, [pc, #100]	; (12940 <z_impl_k_mutex_lock+0xec>)
   128da:	f000 fad1 	bl	12e80 <z_pend_curr>
	if (got_mutex == 0) {
   128de:	2800      	cmp	r0, #0
   128e0:	d0e3      	beq.n	128aa <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   128e2:	f04f 0320 	mov.w	r3, #32
   128e6:	f3ef 8611 	mrs	r6, BASEPRI
   128ea:	f383 8811 	msr	BASEPRI, r3
   128ee:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   128f2:	6823      	ldr	r3, [r4, #0]
   128f4:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   128f6:	42a3      	cmp	r3, r4
   128f8:	d007      	beq.n	1290a <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   128fa:	b133      	cbz	r3, 1290a <z_impl_k_mutex_lock+0xb6>
   128fc:	f993 300e 	ldrsb.w	r3, [r3, #14]
   12900:	4299      	cmp	r1, r3
   12902:	bfa8      	it	ge
   12904:	4619      	movge	r1, r3
   12906:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1290a:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1290c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   12910:	4299      	cmp	r1, r3
   12912:	d109      	bne.n	12928 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   12914:	b16d      	cbz	r5, 12932 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   12916:	4631      	mov	r1, r6
   12918:	4809      	ldr	r0, [pc, #36]	; (12940 <z_impl_k_mutex_lock+0xec>)
   1291a:	f000 f89b 	bl	12a54 <z_reschedule>
	return -EAGAIN;
   1291e:	f06f 000a 	mvn.w	r0, #10
   12922:	e7c2      	b.n	128aa <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   12924:	2500      	movs	r5, #0
   12926:	e7d3      	b.n	128d0 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   12928:	f000 faec 	bl	12f04 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1292c:	2800      	cmp	r0, #0
   1292e:	d1f2      	bne.n	12916 <z_impl_k_mutex_lock+0xc2>
   12930:	e7f0      	b.n	12914 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   12932:	f386 8811 	msr	BASEPRI, r6
   12936:	f3bf 8f6f 	isb	sy
   1293a:	e7f0      	b.n	1291e <z_impl_k_mutex_lock+0xca>
   1293c:	200007f0 	.word	0x200007f0
   12940:	2000084e 	.word	0x2000084e

00012944 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   12944:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   12946:	6883      	ldr	r3, [r0, #8]
{
   12948:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1294a:	2b00      	cmp	r3, #0
   1294c:	d036      	beq.n	129bc <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1294e:	4a1e      	ldr	r2, [pc, #120]	; (129c8 <z_impl_k_mutex_unlock+0x84>)
   12950:	6892      	ldr	r2, [r2, #8]
   12952:	4293      	cmp	r3, r2
   12954:	d135      	bne.n	129c2 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   12956:	7bda      	ldrb	r2, [r3, #15]
   12958:	3a01      	subs	r2, #1
   1295a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1295c:	68c3      	ldr	r3, [r0, #12]
   1295e:	2b01      	cmp	r3, #1
   12960:	d005      	beq.n	1296e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   12962:	3b01      	subs	r3, #1
   12964:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   12966:	f000 f8d5 	bl	12b14 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1296a:	2000      	movs	r0, #0
}
   1296c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1296e:	f04f 0320 	mov.w	r3, #32
   12972:	f3ef 8511 	mrs	r5, BASEPRI
   12976:	f383 8811 	msr	BASEPRI, r3
   1297a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1297e:	6901      	ldr	r1, [r0, #16]
   12980:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   12982:	f990 300e 	ldrsb.w	r3, [r0, #14]
   12986:	4299      	cmp	r1, r3
   12988:	d001      	beq.n	1298e <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1298a:	f000 fabb 	bl	12f04 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1298e:	4620      	mov	r0, r4
   12990:	f002 fa9c 	bl	14ecc <z_unpend_first_thread>
	mutex->owner = new_owner;
   12994:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   12996:	b158      	cbz	r0, 129b0 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   12998:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1299c:	6122      	str	r2, [r4, #16]
   1299e:	2200      	movs	r2, #0
   129a0:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   129a2:	f002 fa3b 	bl	14e1c <z_ready_thread>
		z_reschedule(&lock, key);
   129a6:	4629      	mov	r1, r5
   129a8:	4808      	ldr	r0, [pc, #32]	; (129cc <z_impl_k_mutex_unlock+0x88>)
   129aa:	f000 f853 	bl	12a54 <z_reschedule>
   129ae:	e7da      	b.n	12966 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   129b0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   129b2:	f385 8811 	msr	BASEPRI, r5
   129b6:	f3bf 8f6f 	isb	sy
   129ba:	e7d4      	b.n	12966 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   129bc:	f06f 0015 	mvn.w	r0, #21
   129c0:	e7d4      	b.n	1296c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   129c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   129c6:	e7d1      	b.n	1296c <z_impl_k_mutex_unlock+0x28>
   129c8:	200007f0 	.word	0x200007f0
   129cc:	2000084e 	.word	0x2000084e

000129d0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   129d0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   129d2:	4c08      	ldr	r4, [pc, #32]	; (129f4 <z_reset_time_slice+0x24>)
   129d4:	6823      	ldr	r3, [r4, #0]
   129d6:	b15b      	cbz	r3, 129f0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   129d8:	f7fe fac6 	bl	10f68 <z_clock_elapsed>
   129dc:	6823      	ldr	r3, [r4, #0]
   129de:	4a06      	ldr	r2, [pc, #24]	; (129f8 <z_reset_time_slice+0x28>)
   129e0:	4418      	add	r0, r3
   129e2:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   129e4:	2100      	movs	r1, #0
	}
}
   129e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   129ea:	4618      	mov	r0, r3
   129ec:	f002 bac1 	b.w	14f72 <z_set_timeout_expiry>
}
   129f0:	bd10      	pop	{r4, pc}
   129f2:	bf00      	nop
   129f4:	20000828 	.word	0x20000828
   129f8:	200007f0 	.word	0x200007f0

000129fc <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   129fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   129fe:	460d      	mov	r5, r1
	__asm__ volatile(
   12a00:	f04f 0320 	mov.w	r3, #32
   12a04:	f3ef 8411 	mrs	r4, BASEPRI
   12a08:	f383 8811 	msr	BASEPRI, r3
   12a0c:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   12a10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   12a14:	f240 36e7 	movw	r6, #999	; 0x3e7
   12a18:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   12a1a:	2200      	movs	r2, #0
   12a1c:	fbe1 6700 	umlal	r6, r7, r1, r0
   12a20:	4b09      	ldr	r3, [pc, #36]	; (12a48 <k_sched_time_slice_set+0x4c>)
   12a22:	4630      	mov	r0, r6
   12a24:	611a      	str	r2, [r3, #16]
   12a26:	4639      	mov	r1, r7
   12a28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12a2c:	2300      	movs	r3, #0
   12a2e:	f7fd fd05 	bl	1043c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   12a32:	4b06      	ldr	r3, [pc, #24]	; (12a4c <k_sched_time_slice_set+0x50>)
   12a34:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   12a36:	4b06      	ldr	r3, [pc, #24]	; (12a50 <k_sched_time_slice_set+0x54>)
   12a38:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   12a3a:	f7ff ffc9 	bl	129d0 <z_reset_time_slice>
	__asm__ volatile(
   12a3e:	f384 8811 	msr	BASEPRI, r4
   12a42:	f3bf 8f6f 	isb	sy
	}
}
   12a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12a48:	200007f0 	.word	0x200007f0
   12a4c:	20000828 	.word	0x20000828
   12a50:	20000824 	.word	0x20000824

00012a54 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   12a54:	b949      	cbnz	r1, 12a6a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   12a56:	f3ef 8005 	mrs	r0, IPSR
   12a5a:	b930      	cbnz	r0, 12a6a <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   12a5c:	4b05      	ldr	r3, [pc, #20]	; (12a74 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   12a5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   12a60:	689b      	ldr	r3, [r3, #8]
   12a62:	429a      	cmp	r2, r3
   12a64:	d001      	beq.n	12a6a <z_reschedule+0x16>
	ret = arch_swap(key);
   12a66:	f7fe bd81 	b.w	1156c <arch_swap>
   12a6a:	f381 8811 	msr	BASEPRI, r1
   12a6e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   12a72:	4770      	bx	lr
   12a74:	200007f0 	.word	0x200007f0

00012a78 <k_sched_lock>:
	__asm__ volatile(
   12a78:	f04f 0320 	mov.w	r3, #32
   12a7c:	f3ef 8111 	mrs	r1, BASEPRI
   12a80:	f383 8811 	msr	BASEPRI, r3
   12a84:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   12a88:	4b04      	ldr	r3, [pc, #16]	; (12a9c <k_sched_lock+0x24>)
   12a8a:	689a      	ldr	r2, [r3, #8]
   12a8c:	7bd3      	ldrb	r3, [r2, #15]
   12a8e:	3b01      	subs	r3, #1
   12a90:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   12a92:	f381 8811 	msr	BASEPRI, r1
   12a96:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   12a9a:	4770      	bx	lr
   12a9c:	200007f0 	.word	0x200007f0

00012aa0 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   12aa0:	4b09      	ldr	r3, [pc, #36]	; (12ac8 <z_priq_dumb_remove+0x28>)
   12aa2:	f103 0228 	add.w	r2, r3, #40	; 0x28
   12aa6:	4282      	cmp	r2, r0
   12aa8:	d105      	bne.n	12ab6 <z_priq_dumb_remove+0x16>
   12aaa:	689b      	ldr	r3, [r3, #8]
   12aac:	428b      	cmp	r3, r1
   12aae:	d102      	bne.n	12ab6 <z_priq_dumb_remove+0x16>
   12ab0:	7b4b      	ldrb	r3, [r1, #13]
   12ab2:	06db      	lsls	r3, r3, #27
   12ab4:	d106      	bne.n	12ac4 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   12ab6:	e9d1 3200 	ldrd	r3, r2, [r1]
   12aba:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   12abc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   12abe:	2300      	movs	r3, #0
	node->prev = NULL;
   12ac0:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   12ac4:	4770      	bx	lr
   12ac6:	bf00      	nop
   12ac8:	200007f0 	.word	0x200007f0

00012acc <update_cache>:
{
   12acc:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   12ace:	4c10      	ldr	r4, [pc, #64]	; (12b10 <update_cache+0x44>)
{
   12ad0:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   12ad2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   12ad6:	f002 f99b 	bl	14e10 <z_priq_dumb_best>
   12ada:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   12adc:	68a3      	ldr	r3, [r4, #8]
   12ade:	7b59      	ldrb	r1, [r3, #13]
   12ae0:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   12ae2:	bf44      	itt	mi
   12ae4:	f041 0108 	orrmi.w	r1, r1, #8
   12ae8:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   12aea:	b905      	cbnz	r5, 12aee <update_cache+0x22>
   12aec:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   12aee:	b94e      	cbnz	r6, 12b04 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   12af0:	7b5a      	ldrb	r2, [r3, #13]
   12af2:	06d2      	lsls	r2, r2, #27
   12af4:	d106      	bne.n	12b04 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   12af6:	69aa      	ldr	r2, [r5, #24]
   12af8:	b922      	cbnz	r2, 12b04 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   12afa:	89da      	ldrh	r2, [r3, #14]
   12afc:	2a7f      	cmp	r2, #127	; 0x7f
   12afe:	d901      	bls.n	12b04 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   12b00:	6263      	str	r3, [r4, #36]	; 0x24
}
   12b02:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   12b04:	42ab      	cmp	r3, r5
   12b06:	d001      	beq.n	12b0c <update_cache+0x40>
			z_reset_time_slice();
   12b08:	f7ff ff62 	bl	129d0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   12b0c:	6265      	str	r5, [r4, #36]	; 0x24
}
   12b0e:	e7f8      	b.n	12b02 <update_cache+0x36>
   12b10:	200007f0 	.word	0x200007f0

00012b14 <k_sched_unlock>:
{
   12b14:	b510      	push	{r4, lr}
	__asm__ volatile(
   12b16:	f04f 0320 	mov.w	r3, #32
   12b1a:	f3ef 8411 	mrs	r4, BASEPRI
   12b1e:	f383 8811 	msr	BASEPRI, r3
   12b22:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   12b26:	4b08      	ldr	r3, [pc, #32]	; (12b48 <k_sched_unlock+0x34>)
		update_cache(0);
   12b28:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   12b2a:	689a      	ldr	r2, [r3, #8]
   12b2c:	7bd3      	ldrb	r3, [r2, #15]
   12b2e:	3301      	adds	r3, #1
   12b30:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   12b32:	f7ff ffcb 	bl	12acc <update_cache>
	__asm__ volatile(
   12b36:	f384 8811 	msr	BASEPRI, r4
   12b3a:	f3bf 8f6f 	isb	sy
}
   12b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   12b42:	f002 b94e 	b.w	14de2 <z_reschedule_unlocked>
   12b46:	bf00      	nop
   12b48:	200007f0 	.word	0x200007f0

00012b4c <ready_thread>:
{
   12b4c:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   12b4e:	7b43      	ldrb	r3, [r0, #13]
   12b50:	06db      	lsls	r3, r3, #27
   12b52:	d127      	bne.n	12ba4 <ready_thread+0x58>
	if (z_is_thread_ready(thread)) {
   12b54:	6983      	ldr	r3, [r0, #24]
   12b56:	bb2b      	cbnz	r3, 12ba4 <ready_thread+0x58>
	return list->head == list;
   12b58:	4a13      	ldr	r2, [pc, #76]	; (12ba8 <ready_thread+0x5c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12b5a:	f102 0128 	add.w	r1, r2, #40	; 0x28
   12b5e:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
   12b62:	428b      	cmp	r3, r1
   12b64:	d018      	beq.n	12b98 <ready_thread+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   12b66:	b1bb      	cbz	r3, 12b98 <ready_thread+0x4c>
	if (thread_1->base.prio < thread_2->base.prio) {
   12b68:	f990 500e 	ldrsb.w	r5, [r0, #14]
   12b6c:	f993 600e 	ldrsb.w	r6, [r3, #14]
   12b70:	42ae      	cmp	r6, r5
   12b72:	dd0c      	ble.n	12b8e <ready_thread+0x42>
	node->prev = successor->prev;
   12b74:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   12b76:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   12b7a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   12b7c:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   12b7e:	7b43      	ldrb	r3, [r0, #13]
   12b80:	f063 037f 	orn	r3, r3, #127	; 0x7f
   12b84:	7343      	strb	r3, [r0, #13]
}
   12b86:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   12b88:	2000      	movs	r0, #0
   12b8a:	f7ff bf9f 	b.w	12acc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   12b8e:	429c      	cmp	r4, r3
   12b90:	d002      	beq.n	12b98 <ready_thread+0x4c>
   12b92:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   12b94:	2b00      	cmp	r3, #0
   12b96:	d1e9      	bne.n	12b6c <ready_thread+0x20>
	node->prev = list->tail;
   12b98:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   12b9c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   12b9e:	6018      	str	r0, [r3, #0]
	list->tail = node;
   12ba0:	62d0      	str	r0, [r2, #44]	; 0x2c
   12ba2:	e7ec      	b.n	12b7e <ready_thread+0x32>
}
   12ba4:	bc70      	pop	{r4, r5, r6}
   12ba6:	4770      	bx	lr
   12ba8:	200007f0 	.word	0x200007f0

00012bac <z_sched_start>:
{
   12bac:	b510      	push	{r4, lr}
	__asm__ volatile(
   12bae:	f04f 0320 	mov.w	r3, #32
   12bb2:	f3ef 8411 	mrs	r4, BASEPRI
   12bb6:	f383 8811 	msr	BASEPRI, r3
   12bba:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   12bbe:	7b43      	ldrb	r3, [r0, #13]
   12bc0:	0759      	lsls	r1, r3, #29
   12bc2:	d404      	bmi.n	12bce <z_sched_start+0x22>
	__asm__ volatile(
   12bc4:	f384 8811 	msr	BASEPRI, r4
   12bc8:	f3bf 8f6f 	isb	sy
}
   12bcc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   12bce:	f023 0304 	bic.w	r3, r3, #4
   12bd2:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   12bd4:	f7ff ffba 	bl	12b4c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   12bd8:	4621      	mov	r1, r4
}
   12bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   12bde:	4801      	ldr	r0, [pc, #4]	; (12be4 <z_sched_start+0x38>)
   12be0:	f7ff bf38 	b.w	12a54 <z_reschedule>
   12be4:	2000084e 	.word	0x2000084e

00012be8 <move_thread_to_end_of_prio_q>:
{
   12be8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   12bea:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   12bee:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   12bf0:	2b00      	cmp	r3, #0
   12bf2:	da03      	bge.n	12bfc <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   12bf4:	4601      	mov	r1, r0
   12bf6:	4816      	ldr	r0, [pc, #88]	; (12c50 <move_thread_to_end_of_prio_q+0x68>)
   12bf8:	f7ff ff52 	bl	12aa0 <z_priq_dumb_remove>
	return list->head == list;
   12bfc:	4a15      	ldr	r2, [pc, #84]	; (12c54 <move_thread_to_end_of_prio_q+0x6c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12bfe:	f102 0128 	add.w	r1, r2, #40	; 0x28
   12c02:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   12c06:	428b      	cmp	r3, r1
   12c08:	d01c      	beq.n	12c44 <move_thread_to_end_of_prio_q+0x5c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   12c0a:	b1db      	cbz	r3, 12c44 <move_thread_to_end_of_prio_q+0x5c>
	if (thread_1->base.prio < thread_2->base.prio) {
   12c0c:	f994 500e 	ldrsb.w	r5, [r4, #14]
   12c10:	f993 600e 	ldrsb.w	r6, [r3, #14]
   12c14:	42ae      	cmp	r6, r5
   12c16:	dd10      	ble.n	12c3a <move_thread_to_end_of_prio_q+0x52>
	node->prev = successor->prev;
   12c18:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   12c1a:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   12c1e:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   12c20:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   12c22:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   12c24:	6890      	ldr	r0, [r2, #8]
   12c26:	f063 037f 	orn	r3, r3, #127	; 0x7f
   12c2a:	7363      	strb	r3, [r4, #13]
   12c2c:	1b03      	subs	r3, r0, r4
   12c2e:	4258      	negs	r0, r3
   12c30:	4158      	adcs	r0, r3
}
   12c32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   12c36:	f7ff bf49 	b.w	12acc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   12c3a:	4298      	cmp	r0, r3
   12c3c:	d002      	beq.n	12c44 <move_thread_to_end_of_prio_q+0x5c>
   12c3e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   12c40:	2b00      	cmp	r3, #0
   12c42:	d1e5      	bne.n	12c10 <move_thread_to_end_of_prio_q+0x28>
	node->prev = list->tail;
   12c44:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   12c48:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   12c4a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   12c4c:	62d4      	str	r4, [r2, #44]	; 0x2c
   12c4e:	e7e8      	b.n	12c22 <move_thread_to_end_of_prio_q+0x3a>
   12c50:	20000818 	.word	0x20000818
   12c54:	200007f0 	.word	0x200007f0

00012c58 <z_time_slice>:
{
   12c58:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   12c5a:	f04f 0320 	mov.w	r3, #32
   12c5e:	f3ef 8411 	mrs	r4, BASEPRI
   12c62:	f383 8811 	msr	BASEPRI, r3
   12c66:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   12c6a:	4a17      	ldr	r2, [pc, #92]	; (12cc8 <z_time_slice+0x70>)
   12c6c:	4917      	ldr	r1, [pc, #92]	; (12ccc <z_time_slice+0x74>)
   12c6e:	6893      	ldr	r3, [r2, #8]
   12c70:	680d      	ldr	r5, [r1, #0]
   12c72:	42ab      	cmp	r3, r5
   12c74:	4615      	mov	r5, r2
   12c76:	d106      	bne.n	12c86 <z_time_slice+0x2e>
			z_reset_time_slice();
   12c78:	f7ff feaa 	bl	129d0 <z_reset_time_slice>
	__asm__ volatile(
   12c7c:	f384 8811 	msr	BASEPRI, r4
   12c80:	f3bf 8f6f 	isb	sy
}
   12c84:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   12c86:	2600      	movs	r6, #0
   12c88:	600e      	str	r6, [r1, #0]
	if (slice_time && sliceable(_current)) {
   12c8a:	4911      	ldr	r1, [pc, #68]	; (12cd0 <z_time_slice+0x78>)
   12c8c:	6809      	ldr	r1, [r1, #0]
   12c8e:	b1c1      	cbz	r1, 12cc2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   12c90:	89d9      	ldrh	r1, [r3, #14]
   12c92:	297f      	cmp	r1, #127	; 0x7f
   12c94:	d815      	bhi.n	12cc2 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   12c96:	7b59      	ldrb	r1, [r3, #13]
   12c98:	06c9      	lsls	r1, r1, #27
   12c9a:	d112      	bne.n	12cc2 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   12c9c:	490d      	ldr	r1, [pc, #52]	; (12cd4 <z_time_slice+0x7c>)
   12c9e:	f993 600e 	ldrsb.w	r6, [r3, #14]
   12ca2:	6809      	ldr	r1, [r1, #0]
   12ca4:	428e      	cmp	r6, r1
   12ca6:	db0c      	blt.n	12cc2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   12ca8:	490b      	ldr	r1, [pc, #44]	; (12cd8 <z_time_slice+0x80>)
   12caa:	428b      	cmp	r3, r1
   12cac:	d009      	beq.n	12cc2 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   12cae:	6911      	ldr	r1, [r2, #16]
   12cb0:	4281      	cmp	r1, r0
   12cb2:	dc03      	bgt.n	12cbc <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   12cb4:	4618      	mov	r0, r3
   12cb6:	f7ff ff97 	bl	12be8 <move_thread_to_end_of_prio_q>
   12cba:	e7dd      	b.n	12c78 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   12cbc:	1a09      	subs	r1, r1, r0
   12cbe:	6111      	str	r1, [r2, #16]
   12cc0:	e7dc      	b.n	12c7c <z_time_slice+0x24>
		_current_cpu->slice_ticks = 0;
   12cc2:	2300      	movs	r3, #0
   12cc4:	612b      	str	r3, [r5, #16]
   12cc6:	e7d9      	b.n	12c7c <z_time_slice+0x24>
   12cc8:	200007f0 	.word	0x200007f0
   12ccc:	20000820 	.word	0x20000820
   12cd0:	20000828 	.word	0x20000828
   12cd4:	20000824 	.word	0x20000824
   12cd8:	20000140 	.word	0x20000140

00012cdc <z_impl_k_thread_suspend>:
{
   12cdc:	b570      	push	{r4, r5, r6, lr}
   12cde:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   12ce0:	3018      	adds	r0, #24
   12ce2:	f002 f920 	bl	14f26 <z_abort_timeout>
	__asm__ volatile(
   12ce6:	f04f 0320 	mov.w	r3, #32
   12cea:	f3ef 8611 	mrs	r6, BASEPRI
   12cee:	f383 8811 	msr	BASEPRI, r3
   12cf2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   12cf6:	f994 300d 	ldrsb.w	r3, [r4, #13]
   12cfa:	2b00      	cmp	r3, #0
   12cfc:	da07      	bge.n	12d0e <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   12cfe:	4621      	mov	r1, r4
   12d00:	480e      	ldr	r0, [pc, #56]	; (12d3c <z_impl_k_thread_suspend+0x60>)
   12d02:	f7ff fecd 	bl	12aa0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   12d06:	7b63      	ldrb	r3, [r4, #13]
   12d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   12d0c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   12d0e:	4d0c      	ldr	r5, [pc, #48]	; (12d40 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   12d10:	7b63      	ldrb	r3, [r4, #13]
   12d12:	68a8      	ldr	r0, [r5, #8]
   12d14:	f043 0310 	orr.w	r3, r3, #16
   12d18:	7363      	strb	r3, [r4, #13]
   12d1a:	1b03      	subs	r3, r0, r4
   12d1c:	4258      	negs	r0, r3
   12d1e:	4158      	adcs	r0, r3
   12d20:	f7ff fed4 	bl	12acc <update_cache>
	__asm__ volatile(
   12d24:	f386 8811 	msr	BASEPRI, r6
   12d28:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   12d2c:	68ab      	ldr	r3, [r5, #8]
   12d2e:	42a3      	cmp	r3, r4
   12d30:	d103      	bne.n	12d3a <z_impl_k_thread_suspend+0x5e>
}
   12d32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   12d36:	f002 b854 	b.w	14de2 <z_reschedule_unlocked>
}
   12d3a:	bd70      	pop	{r4, r5, r6, pc}
   12d3c:	20000818 	.word	0x20000818
   12d40:	200007f0 	.word	0x200007f0

00012d44 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   12d44:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
   12d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12d4a:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   12d4c:	b103      	cbz	r3, 12d50 <z_thread_single_abort+0xc>
		thread->fn_abort();
   12d4e:	4798      	blx	r3
   12d50:	f104 0018 	add.w	r0, r4, #24
   12d54:	f002 f8e7 	bl	14f26 <z_abort_timeout>
	__asm__ volatile(
   12d58:	f04f 0320 	mov.w	r3, #32
   12d5c:	f3ef 8611 	mrs	r6, BASEPRI
   12d60:	f383 8811 	msr	BASEPRI, r3
   12d64:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   12d68:	7b63      	ldrb	r3, [r4, #13]
   12d6a:	06d8      	lsls	r0, r3, #27
   12d6c:	d123      	bne.n	12db6 <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
   12d6e:	69a2      	ldr	r2, [r4, #24]
   12d70:	bb0a      	cbnz	r2, 12db6 <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
   12d72:	0619      	lsls	r1, r3, #24
   12d74:	d507      	bpl.n	12d86 <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
   12d76:	4621      	mov	r1, r4
   12d78:	481e      	ldr	r0, [pc, #120]	; (12df4 <z_thread_single_abort+0xb0>)
   12d7a:	f7ff fe91 	bl	12aa0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   12d7e:	7b63      	ldrb	r3, [r4, #13]
   12d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   12d84:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   12d86:	4b1c      	ldr	r3, [pc, #112]	; (12df8 <z_thread_single_abort+0xb4>)
   12d88:	6898      	ldr	r0, [r3, #8]
   12d8a:	1b02      	subs	r2, r0, r4
   12d8c:	4250      	negs	r0, r2
   12d8e:	4150      	adcs	r0, r2
   12d90:	f7ff fe9c 	bl	12acc <update_cache>
			waiter->base.pended_on = NULL;
   12d94:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   12d96:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   12d98:	f104 0830 	add.w	r8, r4, #48	; 0x30
   12d9c:	f043 0308 	orr.w	r3, r3, #8
   12da0:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   12da2:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12da4:	4545      	cmp	r5, r8
   12da6:	d000      	beq.n	12daa <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   12da8:	b995      	cbnz	r5, 12dd0 <z_thread_single_abort+0x8c>
	__asm__ volatile(
   12daa:	f386 8811 	msr	BASEPRI, r6
   12dae:	f3bf 8f6f 	isb	sy
}
   12db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   12db6:	079b      	lsls	r3, r3, #30
   12db8:	d5ec      	bpl.n	12d94 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
   12dba:	4621      	mov	r1, r4
   12dbc:	68a0      	ldr	r0, [r4, #8]
   12dbe:	f7ff fe6f 	bl	12aa0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   12dc2:	7b63      	ldrb	r3, [r4, #13]
   12dc4:	f023 0302 	bic.w	r3, r3, #2
   12dc8:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   12dca:	2300      	movs	r3, #0
   12dcc:	60a3      	str	r3, [r4, #8]
   12dce:	e7e1      	b.n	12d94 <z_thread_single_abort+0x50>
   12dd0:	f105 0018 	add.w	r0, r5, #24
   12dd4:	f002 f8a7 	bl	14f26 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   12dd8:	68a8      	ldr	r0, [r5, #8]
   12dda:	4629      	mov	r1, r5
   12ddc:	f7ff fe60 	bl	12aa0 <z_priq_dumb_remove>
   12de0:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   12de2:	60af      	str	r7, [r5, #8]
   12de4:	f023 0302 	bic.w	r3, r3, #2
   12de8:	736b      	strb	r3, [r5, #13]
   12dea:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
   12dec:	4628      	mov	r0, r5
   12dee:	f7ff fead 	bl	12b4c <ready_thread>
   12df2:	e7d6      	b.n	12da2 <z_thread_single_abort+0x5e>
   12df4:	20000818 	.word	0x20000818
   12df8:	200007f0 	.word	0x200007f0

00012dfc <unready_thread>:
{
   12dfc:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   12dfe:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   12e02:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   12e04:	2b00      	cmp	r3, #0
   12e06:	da07      	bge.n	12e18 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   12e08:	4601      	mov	r1, r0
   12e0a:	4808      	ldr	r0, [pc, #32]	; (12e2c <unready_thread+0x30>)
   12e0c:	f7ff fe48 	bl	12aa0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   12e10:	7b63      	ldrb	r3, [r4, #13]
   12e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   12e16:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   12e18:	4b05      	ldr	r3, [pc, #20]	; (12e30 <unready_thread+0x34>)
   12e1a:	6898      	ldr	r0, [r3, #8]
   12e1c:	1b03      	subs	r3, r0, r4
   12e1e:	4258      	negs	r0, r3
   12e20:	4158      	adcs	r0, r3
}
   12e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   12e26:	f7ff be51 	b.w	12acc <update_cache>
   12e2a:	bf00      	nop
   12e2c:	20000818 	.word	0x20000818
   12e30:	200007f0 	.word	0x200007f0

00012e34 <pend>:
{
   12e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12e38:	4606      	mov	r6, r0
   12e3a:	4614      	mov	r4, r2
   12e3c:	461d      	mov	r5, r3
	__asm__ volatile(
   12e3e:	f04f 0320 	mov.w	r3, #32
   12e42:	f3ef 8711 	mrs	r7, BASEPRI
   12e46:	f383 8811 	msr	BASEPRI, r3
   12e4a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   12e4e:	f002 f815 	bl	14e7c <add_to_waitq_locked>
	__asm__ volatile(
   12e52:	f387 8811 	msr	BASEPRI, r7
   12e56:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   12e5a:	1c6b      	adds	r3, r5, #1
   12e5c:	bf08      	it	eq
   12e5e:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   12e62:	d008      	beq.n	12e76 <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   12e64:	4622      	mov	r2, r4
   12e66:	462b      	mov	r3, r5
   12e68:	f106 0018 	add.w	r0, r6, #24
   12e6c:	4903      	ldr	r1, [pc, #12]	; (12e7c <pend+0x48>)
}
   12e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12e72:	f000 ba2b 	b.w	132cc <z_add_timeout>
   12e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12e7a:	bf00      	nop
   12e7c:	00014e3d 	.word	0x00014e3d

00012e80 <z_pend_curr>:
{
   12e80:	b510      	push	{r4, lr}
   12e82:	460c      	mov	r4, r1
	pending_current = _current;
   12e84:	4b06      	ldr	r3, [pc, #24]	; (12ea0 <z_pend_curr+0x20>)
{
   12e86:	4611      	mov	r1, r2
	pending_current = _current;
   12e88:	6898      	ldr	r0, [r3, #8]
   12e8a:	4b06      	ldr	r3, [pc, #24]	; (12ea4 <z_pend_curr+0x24>)
   12e8c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   12e8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   12e92:	f7ff ffcf 	bl	12e34 <pend>
   12e96:	4620      	mov	r0, r4
}
   12e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12e9c:	f7fe bb66 	b.w	1156c <arch_swap>
   12ea0:	200007f0 	.word	0x200007f0
   12ea4:	20000820 	.word	0x20000820

00012ea8 <z_tick_sleep.part.21>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
   12ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12eaa:	4606      	mov	r6, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   12eac:	f002 f87b 	bl	14fa6 <z_tick_get_32>
   12eb0:	1834      	adds	r4, r6, r0
	__asm__ volatile(
   12eb2:	f04f 0320 	mov.w	r3, #32
   12eb6:	f3ef 8711 	mrs	r7, BASEPRI
   12eba:	f383 8811 	msr	BASEPRI, r3
   12ebe:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   12ec2:	4d0d      	ldr	r5, [pc, #52]	; (12ef8 <z_tick_sleep.part.21+0x50>)
   12ec4:	4b0d      	ldr	r3, [pc, #52]	; (12efc <z_tick_sleep.part.21+0x54>)
   12ec6:	68a8      	ldr	r0, [r5, #8]
   12ec8:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   12eca:	f7ff ff97 	bl	12dfc <unready_thread>
	z_add_thread_timeout(_current, timeout);
   12ece:	68a8      	ldr	r0, [r5, #8]
   12ed0:	490b      	ldr	r1, [pc, #44]	; (12f00 <z_tick_sleep.part.21+0x58>)
   12ed2:	4632      	mov	r2, r6
   12ed4:	17f3      	asrs	r3, r6, #31
   12ed6:	3018      	adds	r0, #24
   12ed8:	f000 f9f8 	bl	132cc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   12edc:	68aa      	ldr	r2, [r5, #8]
   12ede:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   12ee0:	7b53      	ldrb	r3, [r2, #13]
   12ee2:	f043 0310 	orr.w	r3, r3, #16
   12ee6:	7353      	strb	r3, [r2, #13]
   12ee8:	f7fe fb40 	bl	1156c <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   12eec:	f002 f85b 	bl	14fa6 <z_tick_get_32>
   12ef0:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   12ef2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   12ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12ef8:	200007f0 	.word	0x200007f0
   12efc:	20000820 	.word	0x20000820
   12f00:	00014e3d 	.word	0x00014e3d

00012f04 <z_set_prio>:
{
   12f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12f08:	4604      	mov	r4, r0
   12f0a:	f04f 0320 	mov.w	r3, #32
   12f0e:	f3ef 8811 	mrs	r8, BASEPRI
   12f12:	f383 8811 	msr	BASEPRI, r3
   12f16:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   12f1a:	7b43      	ldrb	r3, [r0, #13]
   12f1c:	b24e      	sxtb	r6, r1
   12f1e:	06db      	lsls	r3, r3, #27
   12f20:	d12e      	bne.n	12f80 <z_set_prio+0x7c>
		if (need_sched) {
   12f22:	6983      	ldr	r3, [r0, #24]
   12f24:	bb63      	cbnz	r3, 12f80 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   12f26:	4d18      	ldr	r5, [pc, #96]	; (12f88 <z_set_prio+0x84>)
   12f28:	4601      	mov	r1, r0
   12f2a:	f105 0728 	add.w	r7, r5, #40	; 0x28
   12f2e:	4638      	mov	r0, r7
   12f30:	f7ff fdb6 	bl	12aa0 <z_priq_dumb_remove>
	return list->head == list;
   12f34:	6aab      	ldr	r3, [r5, #40]	; 0x28
				thread->base.prio = prio;
   12f36:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12f38:	42bb      	cmp	r3, r7
   12f3a:	462a      	mov	r2, r5
   12f3c:	d019      	beq.n	12f72 <z_set_prio+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   12f3e:	b1c3      	cbz	r3, 12f72 <z_set_prio+0x6e>
   12f40:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   12f42:	f993 000e 	ldrsb.w	r0, [r3, #14]
   12f46:	42b0      	cmp	r0, r6
   12f48:	dd0e      	ble.n	12f68 <z_set_prio+0x64>
	node->prev = successor->prev;
   12f4a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   12f4c:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   12f50:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   12f52:	605c      	str	r4, [r3, #4]
			update_cache(1);
   12f54:	2001      	movs	r0, #1
   12f56:	f7ff fdb9 	bl	12acc <update_cache>
   12f5a:	2001      	movs	r0, #1
	__asm__ volatile(
   12f5c:	f388 8811 	msr	BASEPRI, r8
   12f60:	f3bf 8f6f 	isb	sy
}
   12f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (node == list->tail) ? NULL : node->next;
   12f68:	4299      	cmp	r1, r3
   12f6a:	d002      	beq.n	12f72 <z_set_prio+0x6e>
   12f6c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   12f6e:	2b00      	cmp	r3, #0
   12f70:	d1e7      	bne.n	12f42 <z_set_prio+0x3e>
	node->prev = list->tail;
   12f72:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
   12f74:	6027      	str	r7, [r4, #0]
	node->prev = list->tail;
   12f76:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   12f78:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   12f7a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   12f7c:	62d4      	str	r4, [r2, #44]	; 0x2c
   12f7e:	e7e9      	b.n	12f54 <z_set_prio+0x50>
			thread->base.prio = prio;
   12f80:	73a6      	strb	r6, [r4, #14]
   12f82:	2000      	movs	r0, #0
   12f84:	e7ea      	b.n	12f5c <z_set_prio+0x58>
   12f86:	bf00      	nop
   12f88:	200007f0 	.word	0x200007f0

00012f8c <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   12f8c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   12f8e:	4b04      	ldr	r3, [pc, #16]	; (12fa0 <z_sched_init+0x14>)
   12f90:	4608      	mov	r0, r1
   12f92:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   12f96:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   12f9a:	f7ff bd2f 	b.w	129fc <k_sched_time_slice_set>
   12f9e:	bf00      	nop
   12fa0:	200007f0 	.word	0x200007f0

00012fa4 <z_impl_k_yield>:
{
   12fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   12fa6:	4c23      	ldr	r4, [pc, #140]	; (13034 <z_impl_k_yield+0x90>)
   12fa8:	4b23      	ldr	r3, [pc, #140]	; (13038 <z_impl_k_yield+0x94>)
   12faa:	68a2      	ldr	r2, [r4, #8]
   12fac:	429a      	cmp	r2, r3
   12fae:	d029      	beq.n	13004 <z_impl_k_yield+0x60>
	__asm__ volatile(
   12fb0:	f04f 0320 	mov.w	r3, #32
   12fb4:	f3ef 8611 	mrs	r6, BASEPRI
   12fb8:	f383 8811 	msr	BASEPRI, r3
   12fbc:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   12fc0:	f104 0528 	add.w	r5, r4, #40	; 0x28
   12fc4:	68a1      	ldr	r1, [r4, #8]
   12fc6:	4628      	mov	r0, r5
   12fc8:	f7ff fd6a 	bl	12aa0 <z_priq_dumb_remove>
	return list->head == list;
   12fcc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   12fce:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12fd0:	42aa      	cmp	r2, r5
   12fd2:	d028      	beq.n	13026 <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   12fd4:	b33a      	cbz	r2, 13026 <z_impl_k_yield+0x82>
   12fd6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
   12fd8:	f993 100e 	ldrsb.w	r1, [r3, #14]
   12fdc:	f992 700e 	ldrsb.w	r7, [r2, #14]
   12fe0:	428f      	cmp	r7, r1
   12fe2:	dd1b      	ble.n	1301c <z_impl_k_yield+0x78>
	node->prev = successor->prev;
   12fe4:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   12fe6:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   12fea:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   12fec:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   12fee:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
   12ff0:	2001      	movs	r0, #1
   12ff2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   12ff6:	735a      	strb	r2, [r3, #13]
   12ff8:	f7ff fd68 	bl	12acc <update_cache>
	__asm__ volatile(
   12ffc:	f386 8811 	msr	BASEPRI, r6
   13000:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   13004:	f04f 0320 	mov.w	r3, #32
   13008:	f3ef 8011 	mrs	r0, BASEPRI
   1300c:	f383 8811 	msr	BASEPRI, r3
   13010:	f3bf 8f6f 	isb	sy
}
   13014:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   13018:	f7fe baa8 	b.w	1156c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1301c:	4282      	cmp	r2, r0
   1301e:	d002      	beq.n	13026 <z_impl_k_yield+0x82>
   13020:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13022:	2a00      	cmp	r2, #0
   13024:	d1da      	bne.n	12fdc <z_impl_k_yield+0x38>
	node->prev = list->tail;
   13026:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
   13028:	601d      	str	r5, [r3, #0]
	node->prev = list->tail;
   1302a:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1302c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1302e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   13030:	62e3      	str	r3, [r4, #44]	; 0x2c
   13032:	e7dc      	b.n	12fee <z_impl_k_yield+0x4a>
   13034:	200007f0 	.word	0x200007f0
   13038:	20000140 	.word	0x20000140

0001303c <z_impl_k_sleep>:
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1303c:	3101      	adds	r1, #1
   1303e:	bf08      	it	eq
   13040:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   13044:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   13046:	d106      	bne.n	13056 <z_impl_k_sleep+0x1a>
		k_thread_suspend(_current);
   13048:	4b0b      	ldr	r3, [pc, #44]	; (13078 <z_impl_k_sleep+0x3c>)
   1304a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1304c:	f7ff fe46 	bl	12cdc <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   13050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   13054:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   13056:	4604      	mov	r4, r0
	if (ticks == 0) {
   13058:	b948      	cbnz	r0, 1306e <z_impl_k_sleep+0x32>
	z_impl_k_yield();
   1305a:	f7ff ffa3 	bl	12fa4 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
   1305e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   13062:	fb84 3400 	smull	r3, r4, r4, r0
   13066:	0bd8      	lsrs	r0, r3, #15
   13068:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1306c:	e7f2      	b.n	13054 <z_impl_k_sleep+0x18>
   1306e:	f7ff ff1b 	bl	12ea8 <z_tick_sleep.part.21>
   13072:	4604      	mov	r4, r0
   13074:	e7f3      	b.n	1305e <z_impl_k_sleep+0x22>
   13076:	bf00      	nop
   13078:	200007f0 	.word	0x200007f0

0001307c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1307c:	4b01      	ldr	r3, [pc, #4]	; (13084 <z_impl_k_current_get+0x8>)
   1307e:	6898      	ldr	r0, [r3, #8]
   13080:	4770      	bx	lr
   13082:	bf00      	nop
   13084:	200007f0 	.word	0x200007f0

00013088 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   13088:	b538      	push	{r3, r4, r5, lr}
   1308a:	4604      	mov	r4, r0
   1308c:	f04f 0320 	mov.w	r3, #32
   13090:	f3ef 8511 	mrs	r5, BASEPRI
   13094:	f383 8811 	msr	BASEPRI, r3
   13098:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   1309c:	f001 ff16 	bl	14ecc <z_unpend_first_thread>

	if (thread != NULL) {
   130a0:	b148      	cbz	r0, 130b6 <z_impl_k_sem_give+0x2e>
   130a2:	2200      	movs	r2, #0
   130a4:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   130a6:	f001 feb9 	bl	14e1c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   130aa:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   130ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   130b0:	4804      	ldr	r0, [pc, #16]	; (130c4 <z_impl_k_sem_give+0x3c>)
   130b2:	f7ff bccf 	b.w	12a54 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   130b6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   130ba:	429a      	cmp	r2, r3
   130bc:	bf18      	it	ne
   130be:	3301      	addne	r3, #1
   130c0:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
   130c2:	e7f2      	b.n	130aa <z_impl_k_sem_give+0x22>
   130c4:	2000084e 	.word	0x2000084e

000130c8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   130c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   130ca:	4614      	mov	r4, r2
   130cc:	461d      	mov	r5, r3
   130ce:	f04f 0320 	mov.w	r3, #32
   130d2:	f3ef 8111 	mrs	r1, BASEPRI
   130d6:	f383 8811 	msr	BASEPRI, r3
   130da:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   130de:	6883      	ldr	r3, [r0, #8]
   130e0:	b143      	cbz	r3, 130f4 <z_impl_k_sem_take+0x2c>
		sem->count--;
   130e2:	3b01      	subs	r3, #1
   130e4:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   130e6:	f381 8811 	msr	BASEPRI, r1
   130ea:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   130ee:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   130f0:	b003      	add	sp, #12
   130f2:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   130f4:	ea54 0305 	orrs.w	r3, r4, r5
   130f8:	d106      	bne.n	13108 <z_impl_k_sem_take+0x40>
   130fa:	f381 8811 	msr	BASEPRI, r1
   130fe:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   13102:	f06f 000f 	mvn.w	r0, #15
		goto out;
   13106:	e7f3      	b.n	130f0 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   13108:	4602      	mov	r2, r0
   1310a:	e9cd 4500 	strd	r4, r5, [sp]
   1310e:	4802      	ldr	r0, [pc, #8]	; (13118 <z_impl_k_sem_take+0x50>)
   13110:	f7ff feb6 	bl	12e80 <z_pend_curr>
	return ret;
   13114:	e7ec      	b.n	130f0 <z_impl_k_sem_take+0x28>
   13116:	bf00      	nop
   13118:	2000084e 	.word	0x2000084e

0001311c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1311c:	b5f0      	push	{r4, r5, r6, r7, lr}
	sys_dlist_init(&w->waitq);
   1311e:	f100 0530 	add.w	r5, r0, #48	; 0x30
   13122:	b085      	sub	sp, #20
	list->tail = (sys_dnode_t *)list;
   13124:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   13128:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   1312a:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
   1312c:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1312e:	2504      	movs	r5, #4
   13130:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
   13132:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   13134:	3207      	adds	r2, #7
	thread_base->prio = priority;
   13136:	7385      	strb	r5, [r0, #14]

	thread_base->sched_locked = 0U;
   13138:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1313a:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   1313e:	e9c0 121a 	strd	r1, r2, [r0, #104]	; 0x68
	stack_ptr = (char *)stack + stack_obj_size;
   13142:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   13144:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
   13146:	73c5      	strb	r5, [r0, #15]
	node->prev = NULL;
   13148:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.delta = delta;
   1314c:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1314e:	9202      	str	r2, [sp, #8]
   13150:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13152:	9201      	str	r2, [sp, #4]
   13154:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13156:	9200      	str	r2, [sp, #0]
   13158:	4632      	mov	r2, r6
   1315a:	f7fe fa93 	bl	11684 <arch_new_thread>
	if (!_current) {
   1315e:	4b05      	ldr	r3, [pc, #20]	; (13174 <z_setup_new_thread+0x58>)
	new_thread->fn_abort = NULL;
   13160:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   13164:	689b      	ldr	r3, [r3, #8]
   13166:	b103      	cbz	r3, 1316a <z_setup_new_thread+0x4e>
	new_thread->resource_pool = _current->resource_pool;
   13168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   1316a:	4630      	mov	r0, r6
   1316c:	6763      	str	r3, [r4, #116]	; 0x74
   1316e:	b005      	add	sp, #20
   13170:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13172:	bf00      	nop
   13174:	200007f0 	.word	0x200007f0

00013178 <z_init_static_threads>:
{
   13178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1317c:	4e2a      	ldr	r6, [pc, #168]	; (13228 <z_init_static_threads+0xb0>)
   1317e:	4d2b      	ldr	r5, [pc, #172]	; (1322c <z_init_static_threads+0xb4>)
   13180:	46b0      	mov	r8, r6
{
   13182:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   13184:	42b5      	cmp	r5, r6
   13186:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1318a:	d310      	bcc.n	131ae <z_init_static_threads+0x36>
	k_sched_lock();
   1318c:	f7ff fc74 	bl	12a78 <k_sched_lock>
   13190:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   13194:	f240 36e7 	movw	r6, #999	; 0x3e7
   13198:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   1319a:	4c24      	ldr	r4, [pc, #144]	; (1322c <z_init_static_threads+0xb4>)
   1319c:	f8df a090 	ldr.w	sl, [pc, #144]	; 13230 <z_init_static_threads+0xb8>
   131a0:	4544      	cmp	r4, r8
   131a2:	d321      	bcc.n	131e8 <z_init_static_threads+0x70>
}
   131a4:	b006      	add	sp, #24
   131a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   131aa:	f7ff bcb3 	b.w	12b14 <k_sched_unlock>
		z_setup_new_thread(
   131ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
   131b2:	9305      	str	r3, [sp, #20]
   131b4:	f854 3c10 	ldr.w	r3, [r4, #-16]
   131b8:	9304      	str	r3, [sp, #16]
   131ba:	f854 3c14 	ldr.w	r3, [r4, #-20]
   131be:	9303      	str	r3, [sp, #12]
   131c0:	f854 3c18 	ldr.w	r3, [r4, #-24]
   131c4:	9302      	str	r3, [sp, #8]
   131c6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   131ca:	9301      	str	r3, [sp, #4]
   131cc:	f854 3c20 	ldr.w	r3, [r4, #-32]
   131d0:	9300      	str	r3, [sp, #0]
   131d2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   131d6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   131da:	f7ff ff9f 	bl	1311c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   131de:	f854 3c30 	ldr.w	r3, [r4, #-48]
   131e2:	65dd      	str	r5, [r3, #92]	; 0x5c
   131e4:	4625      	mov	r5, r4
   131e6:	e7cd      	b.n	13184 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   131e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   131ea:	1c5a      	adds	r2, r3, #1
   131ec:	d00d      	beq.n	1320a <z_init_static_threads+0x92>
   131ee:	4630      	mov	r0, r6
   131f0:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
   131f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   131f6:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   131fa:	42b9      	cmp	r1, r7
   131fc:	bf08      	it	eq
   131fe:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   13200:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   13202:	d104      	bne.n	1320e <z_init_static_threads+0x96>
	z_sched_start(thread);
   13204:	4628      	mov	r0, r5
   13206:	f7ff fcd1 	bl	12bac <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1320a:	3430      	adds	r4, #48	; 0x30
   1320c:	e7c8      	b.n	131a0 <z_init_static_threads+0x28>
   1320e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13212:	2300      	movs	r3, #0
   13214:	f7fd f912 	bl	1043c <__aeabi_uldivmod>
   13218:	4602      	mov	r2, r0
   1321a:	460b      	mov	r3, r1
   1321c:	f105 0018 	add.w	r0, r5, #24
   13220:	4651      	mov	r1, sl
   13222:	f000 f853 	bl	132cc <z_add_timeout>
   13226:	e7f0      	b.n	1320a <z_init_static_threads+0x92>
   13228:	200000f0 	.word	0x200000f0
   1322c:	200000f0 	.word	0x200000f0
   13230:	00014e3d 	.word	0x00014e3d

00013234 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   13234:	4b03      	ldr	r3, [pc, #12]	; (13244 <elapsed+0x10>)
   13236:	681b      	ldr	r3, [r3, #0]
   13238:	b90b      	cbnz	r3, 1323e <elapsed+0xa>
   1323a:	f7fd be95 	b.w	10f68 <z_clock_elapsed>
}
   1323e:	2000      	movs	r0, #0
   13240:	4770      	bx	lr
   13242:	bf00      	nop
   13244:	2000082c 	.word	0x2000082c

00013248 <remove_timeout>:
{
   13248:	b530      	push	{r4, r5, lr}
   1324a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1324c:	b168      	cbz	r0, 1326a <remove_timeout+0x22>
   1324e:	4a0a      	ldr	r2, [pc, #40]	; (13278 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   13250:	6852      	ldr	r2, [r2, #4]
   13252:	4290      	cmp	r0, r2
   13254:	d009      	beq.n	1326a <remove_timeout+0x22>
	if (next(t) != NULL) {
   13256:	b143      	cbz	r3, 1326a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   13258:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1325c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   13260:	1912      	adds	r2, r2, r4
   13262:	eb45 0101 	adc.w	r1, r5, r1
   13266:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   1326a:	6842      	ldr	r2, [r0, #4]
   1326c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1326e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   13270:	2300      	movs	r3, #0
	node->prev = NULL;
   13272:	e9c0 3300 	strd	r3, r3, [r0]
}
   13276:	bd30      	pop	{r4, r5, pc}
   13278:	20000054 	.word	0x20000054

0001327c <next_timeout>:

static int32_t next_timeout(void)
{
   1327c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1327e:	4b11      	ldr	r3, [pc, #68]	; (132c4 <next_timeout+0x48>)
   13280:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13282:	429c      	cmp	r4, r3
   13284:	bf08      	it	eq
   13286:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   13288:	f7ff ffd4 	bl	13234 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   1328c:	b1b4      	cbz	r4, 132bc <next_timeout+0x40>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   1328e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   13292:	1a14      	subs	r4, r2, r0
   13294:	eb63 75e0 	sbc.w	r5, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   13298:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   1329c:	f175 0300 	sbcs.w	r3, r5, #0
   132a0:	da0c      	bge.n	132bc <next_timeout+0x40>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   132a2:	2c00      	cmp	r4, #0
   132a4:	f175 0300 	sbcs.w	r3, r5, #0
   132a8:	4620      	mov	r0, r4
   132aa:	da00      	bge.n	132ae <next_timeout+0x32>
   132ac:	2000      	movs	r0, #0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   132ae:	4b06      	ldr	r3, [pc, #24]	; (132c8 <next_timeout+0x4c>)
   132b0:	691b      	ldr	r3, [r3, #16]
   132b2:	b113      	cbz	r3, 132ba <next_timeout+0x3e>
   132b4:	4298      	cmp	r0, r3
   132b6:	bfa8      	it	ge
   132b8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   132ba:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   132bc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   132c0:	e7f5      	b.n	132ae <next_timeout+0x32>
   132c2:	bf00      	nop
   132c4:	20000054 	.word	0x20000054
   132c8:	200007f0 	.word	0x200007f0

000132cc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   132cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132d0:	9101      	str	r1, [sp, #4]
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   132d2:	1c59      	adds	r1, r3, #1
   132d4:	bf08      	it	eq
   132d6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   132da:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   132dc:	d06e      	beq.n	133bc <z_add_timeout+0xf0>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
   132de:	1c54      	adds	r4, r2, #1
   132e0:	f143 0500 	adc.w	r5, r3, #0

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   132e4:	f06f 0301 	mvn.w	r3, #1
   132e8:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   132ec:	ebb3 0804 	subs.w	r8, r3, r4
   132f0:	eb6b 0905 	sbc.w	r9, fp, r5
   132f4:	f1b8 0f00 	cmp.w	r8, #0
   132f8:	f179 0300 	sbcs.w	r3, r9, #0
   132fc:	db0f      	blt.n	1331e <z_add_timeout+0x52>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   132fe:	f7ff ff99 	bl	13234 <elapsed>
   13302:	f06f 0301 	mvn.w	r3, #1
   13306:	4a34      	ldr	r2, [pc, #208]	; (133d8 <z_add_timeout+0x10c>)
   13308:	e9d2 1c00 	ldrd	r1, ip, [r2]
   1330c:	1a5b      	subs	r3, r3, r1
   1330e:	eb6b 020c 	sbc.w	r2, fp, ip
   13312:	1b1e      	subs	r6, r3, r4
   13314:	eb62 0705 	sbc.w	r7, r2, r5
   13318:	1a34      	subs	r4, r6, r0
   1331a:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1331e:	9b01      	ldr	r3, [sp, #4]
   13320:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   13324:	f04f 0320 	mov.w	r3, #32
   13328:	f3ef 8611 	mrs	r6, BASEPRI
   1332c:	f383 8811 	msr	BASEPRI, r3
   13330:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   13334:	f7ff ff7e 	bl	13234 <elapsed>
	ticks = MAX(1, ticks);
   13338:	2c01      	cmp	r4, #1
   1333a:	f175 0300 	sbcs.w	r3, r5, #0
   1333e:	4621      	mov	r1, r4
   13340:	bfb8      	it	lt
   13342:	2101      	movlt	r1, #1
   13344:	462a      	mov	r2, r5
   13346:	bfb8      	it	lt
   13348:	2200      	movlt	r2, #0
	return list->head == list;
   1334a:	4b24      	ldr	r3, [pc, #144]	; (133dc <z_add_timeout+0x110>)
		to->dticks = ticks + elapsed();
   1334c:	180c      	adds	r4, r1, r0
   1334e:	eb42 75e0 	adc.w	r5, r2, r0, asr #31
   13352:	681a      	ldr	r2, [r3, #0]
   13354:	e9ca 4504 	strd	r4, r5, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13358:	429a      	cmp	r2, r3
   1335a:	d001      	beq.n	13360 <z_add_timeout+0x94>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1335c:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1335e:	b952      	cbnz	r2, 13376 <z_add_timeout+0xaa>
	node->prev = list->tail;
   13360:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   13362:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   13366:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   1336a:	685a      	ldr	r2, [r3, #4]
   1336c:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   13370:	f8c3 a004 	str.w	sl, [r3, #4]
   13374:	e014      	b.n	133a0 <z_add_timeout+0xd4>
			if (t->dticks > to->dticks) {
   13376:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   1337a:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   1337e:	4544      	cmp	r4, r8
   13380:	eb75 0109 	sbcs.w	r1, r5, r9
   13384:	da1d      	bge.n	133c2 <z_add_timeout+0xf6>
				t->dticks -= to->dticks;
   13386:	ebb8 0004 	subs.w	r0, r8, r4
   1338a:	eb69 0105 	sbc.w	r1, r9, r5
   1338e:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   13392:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   13394:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   13398:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   1339c:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   133a0:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   133a2:	429a      	cmp	r2, r3
   133a4:	d006      	beq.n	133b4 <z_add_timeout+0xe8>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   133a6:	4592      	cmp	sl, r2
   133a8:	d104      	bne.n	133b4 <z_add_timeout+0xe8>
			z_clock_set_timeout(next_timeout(), false);
   133aa:	f7ff ff67 	bl	1327c <next_timeout>
   133ae:	2100      	movs	r1, #0
   133b0:	f7fd fd74 	bl	10e9c <z_clock_set_timeout>
	__asm__ volatile(
   133b4:	f386 8811 	msr	BASEPRI, r6
   133b8:	f3bf 8f6f 	isb	sy
		}
	}
}
   133bc:	b003      	add	sp, #12
   133be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   133c2:	ebb4 0008 	subs.w	r0, r4, r8
   133c6:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   133ca:	42ba      	cmp	r2, r7
   133cc:	e9ca 0104 	strd	r0, r1, [sl, #16]
   133d0:	d0c6      	beq.n	13360 <z_add_timeout+0x94>
   133d2:	6812      	ldr	r2, [r2, #0]
   133d4:	e7c3      	b.n	1335e <z_add_timeout+0x92>
   133d6:	bf00      	nop
   133d8:	20000240 	.word	0x20000240
   133dc:	20000054 	.word	0x20000054

000133e0 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   133e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133e4:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   133e6:	f7ff fc37 	bl	12c58 <z_time_slice>
	__asm__ volatile(
   133ea:	f04f 0320 	mov.w	r3, #32
   133ee:	f3ef 8511 	mrs	r5, BASEPRI
   133f2:	f383 8811 	msr	BASEPRI, r3
   133f6:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   133fa:	4b2c      	ldr	r3, [pc, #176]	; (134ac <z_clock_announce+0xcc>)
   133fc:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 134b0 <z_clock_announce+0xd0>
   13400:	4698      	mov	r8, r3
   13402:	46cb      	mov	fp, r9
	return list->head == list;
   13404:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 134b4 <z_clock_announce+0xd4>
   13408:	601c      	str	r4, [r3, #0]
   1340a:	f8d8 c000 	ldr.w	ip, [r8]
   1340e:	f8da 4000 	ldr.w	r4, [sl]
   13412:	4666      	mov	r6, ip
   13414:	e9d9 2300 	ldrd	r2, r3, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13418:	4554      	cmp	r4, sl
   1341a:	e9cd 2300 	strd	r2, r3, [sp]
   1341e:	ea4f 77e6 	mov.w	r7, r6, asr #31
   13422:	d00c      	beq.n	1343e <z_clock_announce+0x5e>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   13424:	b15c      	cbz	r4, 1343e <z_clock_announce+0x5e>
   13426:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1342a:	458c      	cmp	ip, r1
   1342c:	eb77 0302 	sbcs.w	r3, r7, r2
   13430:	da1b      	bge.n	1346a <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   13432:	ebb1 000c 	subs.w	r0, r1, ip
   13436:	eb62 0107 	sbc.w	r1, r2, r7
   1343a:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1343e:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   13440:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
   13442:	f8c8 4000 	str.w	r4, [r8]
	curr_tick += announce_remaining;
   13446:	18f2      	adds	r2, r6, r3
   13448:	9b01      	ldr	r3, [sp, #4]
   1344a:	eb47 0303 	adc.w	r3, r7, r3
   1344e:	e9cb 2300 	strd	r2, r3, [fp]

	z_clock_set_timeout(next_timeout(), false);
   13452:	f7ff ff13 	bl	1327c <next_timeout>
   13456:	4621      	mov	r1, r4
   13458:	f7fd fd20 	bl	10e9c <z_clock_set_timeout>
	__asm__ volatile(
   1345c:	f385 8811 	msr	BASEPRI, r5
   13460:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   13464:	b003      	add	sp, #12
   13466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   1346a:	2200      	movs	r2, #0
		curr_tick += dt;
   1346c:	e9dd 6700 	ldrd	r6, r7, [sp]
		t->dticks = 0;
   13470:	2300      	movs	r3, #0
		curr_tick += dt;
   13472:	1876      	adds	r6, r6, r1
		announce_remaining -= dt;
   13474:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   13478:	eb47 77e1 	adc.w	r7, r7, r1, asr #31
		announce_remaining -= dt;
   1347c:	f8c8 0000 	str.w	r0, [r8]
		t->dticks = 0;
   13480:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   13484:	4620      	mov	r0, r4
		curr_tick += dt;
   13486:	e9c9 6700 	strd	r6, r7, [r9]
		remove_timeout(t);
   1348a:	f7ff fedd 	bl	13248 <remove_timeout>
   1348e:	f385 8811 	msr	BASEPRI, r5
   13492:	f3bf 8f6f 	isb	sy
		t->fn(t);
   13496:	68a3      	ldr	r3, [r4, #8]
   13498:	4798      	blx	r3
	__asm__ volatile(
   1349a:	f04f 0320 	mov.w	r3, #32
   1349e:	f3ef 8511 	mrs	r5, BASEPRI
   134a2:	f383 8811 	msr	BASEPRI, r3
   134a6:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   134aa:	e7ae      	b.n	1340a <z_clock_announce+0x2a>
   134ac:	2000082c 	.word	0x2000082c
   134b0:	20000240 	.word	0x20000240
   134b4:	20000054 	.word	0x20000054

000134b8 <z_tick_get>:

int64_t z_tick_get(void)
{
   134b8:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   134bc:	f04f 0320 	mov.w	r3, #32
   134c0:	f3ef 8411 	mrs	r4, BASEPRI
   134c4:	f383 8811 	msr	BASEPRI, r3
   134c8:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   134cc:	f7fd fd4c 	bl	10f68 <z_clock_elapsed>
   134d0:	4b07      	ldr	r3, [pc, #28]	; (134f0 <z_tick_get+0x38>)
   134d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   134d6:	eb12 0b00 	adds.w	fp, r2, r0
   134da:	f143 0c00 	adc.w	ip, r3, #0
   134de:	4658      	mov	r0, fp
   134e0:	4661      	mov	r1, ip
	__asm__ volatile(
   134e2:	f384 8811 	msr	BASEPRI, r4
   134e6:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   134ea:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   134ee:	bf00      	nop
   134f0:	20000240 	.word	0x20000240

000134f4 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   134f4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   134f6:	4c06      	ldr	r4, [pc, #24]	; (13510 <statics_init+0x1c>)
   134f8:	4d06      	ldr	r5, [pc, #24]	; (13514 <statics_init+0x20>)
   134fa:	42ac      	cmp	r4, r5
   134fc:	d301      	bcc.n	13502 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   134fe:	2000      	movs	r0, #0
   13500:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   13502:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   13506:	4620      	mov	r0, r4
   13508:	f001 fd51 	bl	14fae <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1350c:	3414      	adds	r4, #20
   1350e:	e7f4      	b.n	134fa <statics_init+0x6>
   13510:	200000f0 	.word	0x200000f0
   13514:	200000f0 	.word	0x200000f0

00013518 <CC_PalMemCopyPlat>:
   13518:	f001 bb33 	b.w	14b82 <memmove>

0001351c <CC_PalMemSetZeroPlat>:
   1351c:	460a      	mov	r2, r1
   1351e:	2100      	movs	r1, #0
   13520:	f001 bb70 	b.w	14c04 <memset>

00013524 <CC_PalInit>:
   13524:	b510      	push	{r4, lr}
   13526:	4811      	ldr	r0, [pc, #68]	; (1356c <CC_PalInit+0x48>)
   13528:	f000 f848 	bl	135bc <CC_PalMutexCreate>
   1352c:	b100      	cbz	r0, 13530 <CC_PalInit+0xc>
   1352e:	bd10      	pop	{r4, pc}
   13530:	480f      	ldr	r0, [pc, #60]	; (13570 <CC_PalInit+0x4c>)
   13532:	f000 f843 	bl	135bc <CC_PalMutexCreate>
   13536:	2800      	cmp	r0, #0
   13538:	d1f9      	bne.n	1352e <CC_PalInit+0xa>
   1353a:	4c0e      	ldr	r4, [pc, #56]	; (13574 <CC_PalInit+0x50>)
   1353c:	4620      	mov	r0, r4
   1353e:	f000 f83d 	bl	135bc <CC_PalMutexCreate>
   13542:	2800      	cmp	r0, #0
   13544:	d1f3      	bne.n	1352e <CC_PalInit+0xa>
   13546:	4b0c      	ldr	r3, [pc, #48]	; (13578 <CC_PalInit+0x54>)
   13548:	480c      	ldr	r0, [pc, #48]	; (1357c <CC_PalInit+0x58>)
   1354a:	601c      	str	r4, [r3, #0]
   1354c:	f000 f836 	bl	135bc <CC_PalMutexCreate>
   13550:	4601      	mov	r1, r0
   13552:	2800      	cmp	r0, #0
   13554:	d1eb      	bne.n	1352e <CC_PalInit+0xa>
   13556:	f000 f82d 	bl	135b4 <CC_PalDmaInit>
   1355a:	4604      	mov	r4, r0
   1355c:	b108      	cbz	r0, 13562 <CC_PalInit+0x3e>
   1355e:	4620      	mov	r0, r4
   13560:	bd10      	pop	{r4, pc}
   13562:	f000 f851 	bl	13608 <CC_PalPowerSaveModeInit>
   13566:	4620      	mov	r0, r4
   13568:	e7fa      	b.n	13560 <CC_PalInit+0x3c>
   1356a:	bf00      	nop
   1356c:	20000068 	.word	0x20000068
   13570:	2000005c 	.word	0x2000005c
   13574:	20000064 	.word	0x20000064
   13578:	2000006c 	.word	0x2000006c
   1357c:	20000060 	.word	0x20000060

00013580 <CC_PalTerminate>:
   13580:	b508      	push	{r3, lr}
   13582:	4808      	ldr	r0, [pc, #32]	; (135a4 <CC_PalTerminate+0x24>)
   13584:	f000 f824 	bl	135d0 <CC_PalMutexDestroy>
   13588:	4807      	ldr	r0, [pc, #28]	; (135a8 <CC_PalTerminate+0x28>)
   1358a:	f000 f821 	bl	135d0 <CC_PalMutexDestroy>
   1358e:	4807      	ldr	r0, [pc, #28]	; (135ac <CC_PalTerminate+0x2c>)
   13590:	f000 f81e 	bl	135d0 <CC_PalMutexDestroy>
   13594:	4806      	ldr	r0, [pc, #24]	; (135b0 <CC_PalTerminate+0x30>)
   13596:	f000 f81b 	bl	135d0 <CC_PalMutexDestroy>
   1359a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1359e:	f000 b80b 	b.w	135b8 <CC_PalDmaTerminate>
   135a2:	bf00      	nop
   135a4:	20000068 	.word	0x20000068
   135a8:	2000005c 	.word	0x2000005c
   135ac:	20000064 	.word	0x20000064
   135b0:	20000060 	.word	0x20000060

000135b4 <CC_PalDmaInit>:
   135b4:	2000      	movs	r0, #0
   135b6:	4770      	bx	lr

000135b8 <CC_PalDmaTerminate>:
   135b8:	4770      	bx	lr
   135ba:	bf00      	nop

000135bc <CC_PalMutexCreate>:
   135bc:	b508      	push	{r3, lr}
   135be:	4b03      	ldr	r3, [pc, #12]	; (135cc <CC_PalMutexCreate+0x10>)
   135c0:	6802      	ldr	r2, [r0, #0]
   135c2:	681b      	ldr	r3, [r3, #0]
   135c4:	6810      	ldr	r0, [r2, #0]
   135c6:	4798      	blx	r3
   135c8:	2000      	movs	r0, #0
   135ca:	bd08      	pop	{r3, pc}
   135cc:	20000078 	.word	0x20000078

000135d0 <CC_PalMutexDestroy>:
   135d0:	b508      	push	{r3, lr}
   135d2:	4b03      	ldr	r3, [pc, #12]	; (135e0 <CC_PalMutexDestroy+0x10>)
   135d4:	6802      	ldr	r2, [r0, #0]
   135d6:	685b      	ldr	r3, [r3, #4]
   135d8:	6810      	ldr	r0, [r2, #0]
   135da:	4798      	blx	r3
   135dc:	2000      	movs	r0, #0
   135de:	bd08      	pop	{r3, pc}
   135e0:	20000078 	.word	0x20000078

000135e4 <CC_PalMutexLock>:
   135e4:	6802      	ldr	r2, [r0, #0]
   135e6:	4b02      	ldr	r3, [pc, #8]	; (135f0 <CC_PalMutexLock+0xc>)
   135e8:	6810      	ldr	r0, [r2, #0]
   135ea:	689b      	ldr	r3, [r3, #8]
   135ec:	4718      	bx	r3
   135ee:	bf00      	nop
   135f0:	20000078 	.word	0x20000078

000135f4 <CC_PalMutexUnlock>:
   135f4:	b508      	push	{r3, lr}
   135f6:	4b03      	ldr	r3, [pc, #12]	; (13604 <CC_PalMutexUnlock+0x10>)
   135f8:	6802      	ldr	r2, [r0, #0]
   135fa:	68db      	ldr	r3, [r3, #12]
   135fc:	6810      	ldr	r0, [r2, #0]
   135fe:	4798      	blx	r3
   13600:	2000      	movs	r0, #0
   13602:	bd08      	pop	{r3, pc}
   13604:	20000078 	.word	0x20000078

00013608 <CC_PalPowerSaveModeInit>:
   13608:	b570      	push	{r4, r5, r6, lr}
   1360a:	4c09      	ldr	r4, [pc, #36]	; (13630 <CC_PalPowerSaveModeInit+0x28>)
   1360c:	4d09      	ldr	r5, [pc, #36]	; (13634 <CC_PalPowerSaveModeInit+0x2c>)
   1360e:	6920      	ldr	r0, [r4, #16]
   13610:	68ab      	ldr	r3, [r5, #8]
   13612:	4798      	blx	r3
   13614:	b118      	cbz	r0, 1361e <CC_PalPowerSaveModeInit+0x16>
   13616:	4b08      	ldr	r3, [pc, #32]	; (13638 <CC_PalPowerSaveModeInit+0x30>)
   13618:	4808      	ldr	r0, [pc, #32]	; (1363c <CC_PalPowerSaveModeInit+0x34>)
   1361a:	685b      	ldr	r3, [r3, #4]
   1361c:	4798      	blx	r3
   1361e:	2100      	movs	r1, #0
   13620:	4a07      	ldr	r2, [pc, #28]	; (13640 <CC_PalPowerSaveModeInit+0x38>)
   13622:	68eb      	ldr	r3, [r5, #12]
   13624:	6011      	str	r1, [r2, #0]
   13626:	6920      	ldr	r0, [r4, #16]
   13628:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1362c:	4718      	bx	r3
   1362e:	bf00      	nop
   13630:	20000088 	.word	0x20000088
   13634:	20000078 	.word	0x20000078
   13638:	20000070 	.word	0x20000070
   1363c:	0001542c 	.word	0x0001542c
   13640:	20000830 	.word	0x20000830

00013644 <CC_PalPowerSaveModeSelect>:
   13644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13646:	4c1a      	ldr	r4, [pc, #104]	; (136b0 <CC_PalPowerSaveModeSelect+0x6c>)
   13648:	4d1a      	ldr	r5, [pc, #104]	; (136b4 <CC_PalPowerSaveModeSelect+0x70>)
   1364a:	4607      	mov	r7, r0
   1364c:	68ab      	ldr	r3, [r5, #8]
   1364e:	6920      	ldr	r0, [r4, #16]
   13650:	4798      	blx	r3
   13652:	b9e8      	cbnz	r0, 13690 <CC_PalPowerSaveModeSelect+0x4c>
   13654:	4e18      	ldr	r6, [pc, #96]	; (136b8 <CC_PalPowerSaveModeSelect+0x74>)
   13656:	6833      	ldr	r3, [r6, #0]
   13658:	b97f      	cbnz	r7, 1367a <CC_PalPowerSaveModeSelect+0x36>
   1365a:	b93b      	cbnz	r3, 1366c <CC_PalPowerSaveModeSelect+0x28>
   1365c:	2001      	movs	r0, #1
   1365e:	4a17      	ldr	r2, [pc, #92]	; (136bc <CC_PalPowerSaveModeSelect+0x78>)
   13660:	4917      	ldr	r1, [pc, #92]	; (136c0 <CC_PalPowerSaveModeSelect+0x7c>)
   13662:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
   13666:	680a      	ldr	r2, [r1, #0]
   13668:	2a00      	cmp	r2, #0
   1366a:	d1fc      	bne.n	13666 <CC_PalPowerSaveModeSelect+0x22>
   1366c:	3301      	adds	r3, #1
   1366e:	6033      	str	r3, [r6, #0]
   13670:	68eb      	ldr	r3, [r5, #12]
   13672:	6920      	ldr	r0, [r4, #16]
   13674:	4798      	blx	r3
   13676:	2000      	movs	r0, #0
   13678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1367a:	2b00      	cmp	r3, #0
   1367c:	d0f8      	beq.n	13670 <CC_PalPowerSaveModeSelect+0x2c>
   1367e:	2b01      	cmp	r3, #1
   13680:	d008      	beq.n	13694 <CC_PalPowerSaveModeSelect+0x50>
   13682:	3b01      	subs	r3, #1
   13684:	6033      	str	r3, [r6, #0]
   13686:	6920      	ldr	r0, [r4, #16]
   13688:	68eb      	ldr	r3, [r5, #12]
   1368a:	4798      	blx	r3
   1368c:	2000      	movs	r0, #0
   1368e:	e7f3      	b.n	13678 <CC_PalPowerSaveModeSelect+0x34>
   13690:	480c      	ldr	r0, [pc, #48]	; (136c4 <CC_PalPowerSaveModeSelect+0x80>)
   13692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13694:	4a0a      	ldr	r2, [pc, #40]	; (136c0 <CC_PalPowerSaveModeSelect+0x7c>)
   13696:	6813      	ldr	r3, [r2, #0]
   13698:	2b00      	cmp	r3, #0
   1369a:	d1fc      	bne.n	13696 <CC_PalPowerSaveModeSelect+0x52>
   1369c:	4a07      	ldr	r2, [pc, #28]	; (136bc <CC_PalPowerSaveModeSelect+0x78>)
   1369e:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   136a2:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   136a6:	f000 f821 	bl	136ec <CC_HalMaskInterrupt>
   136aa:	6833      	ldr	r3, [r6, #0]
   136ac:	e7e9      	b.n	13682 <CC_PalPowerSaveModeSelect+0x3e>
   136ae:	bf00      	nop
   136b0:	20000088 	.word	0x20000088
   136b4:	20000078 	.word	0x20000078
   136b8:	20000830 	.word	0x20000830
   136bc:	50840000 	.word	0x50840000
   136c0:	50841910 	.word	0x50841910
   136c4:	ffff8fe9 	.word	0xffff8fe9

000136c8 <CC_HalInit>:
   136c8:	2000      	movs	r0, #0
   136ca:	4770      	bx	lr

000136cc <CC_HalTerminate>:
   136cc:	2000      	movs	r0, #0
   136ce:	4770      	bx	lr

000136d0 <CC_HalClearInterruptBit>:
   136d0:	0543      	lsls	r3, r0, #21
   136d2:	d503      	bpl.n	136dc <CC_HalClearInterruptBit+0xc>
   136d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   136d8:	4b02      	ldr	r3, [pc, #8]	; (136e4 <CC_HalClearInterruptBit+0x14>)
   136da:	601a      	str	r2, [r3, #0]
   136dc:	4b02      	ldr	r3, [pc, #8]	; (136e8 <CC_HalClearInterruptBit+0x18>)
   136de:	6018      	str	r0, [r3, #0]
   136e0:	4770      	bx	lr
   136e2:	bf00      	nop
   136e4:	50841108 	.word	0x50841108
   136e8:	50841a08 	.word	0x50841a08

000136ec <CC_HalMaskInterrupt>:
   136ec:	4b01      	ldr	r3, [pc, #4]	; (136f4 <CC_HalMaskInterrupt+0x8>)
   136ee:	6018      	str	r0, [r3, #0]
   136f0:	4770      	bx	lr
   136f2:	bf00      	nop
   136f4:	50841a04 	.word	0x50841a04

000136f8 <CC_HalWaitInterruptRND>:
   136f8:	b108      	cbz	r0, 136fe <CC_HalWaitInterruptRND+0x6>
   136fa:	f000 b803 	b.w	13704 <CC_PalWaitInterruptRND>
   136fe:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   13702:	4770      	bx	lr

00013704 <CC_PalWaitInterruptRND>:
   13704:	4602      	mov	r2, r0
   13706:	4807      	ldr	r0, [pc, #28]	; (13724 <CC_PalWaitInterruptRND+0x20>)
   13708:	6803      	ldr	r3, [r0, #0]
   1370a:	4213      	tst	r3, r2
   1370c:	d0fc      	beq.n	13708 <CC_PalWaitInterruptRND+0x4>
   1370e:	b121      	cbz	r1, 1371a <CC_PalWaitInterruptRND+0x16>
   13710:	4b05      	ldr	r3, [pc, #20]	; (13728 <CC_PalWaitInterruptRND+0x24>)
   13712:	4806      	ldr	r0, [pc, #24]	; (1372c <CC_PalWaitInterruptRND+0x28>)
   13714:	681b      	ldr	r3, [r3, #0]
   13716:	600b      	str	r3, [r1, #0]
   13718:	6003      	str	r3, [r0, #0]
   1371a:	4b05      	ldr	r3, [pc, #20]	; (13730 <CC_PalWaitInterruptRND+0x2c>)
   1371c:	2000      	movs	r0, #0
   1371e:	601a      	str	r2, [r3, #0]
   13720:	4770      	bx	lr
   13722:	bf00      	nop
   13724:	50841a00 	.word	0x50841a00
   13728:	50841104 	.word	0x50841104
   1372c:	50841108 	.word	0x50841108
   13730:	50841a08 	.word	0x50841a08

00013734 <mbedtls_platform_setup>:
   13734:	f000 b8a0 	b.w	13878 <nrf_cc310_platform_init>

00013738 <mbedtls_platform_zeroize>:
   13738:	b130      	cbz	r0, 13748 <mbedtls_platform_zeroize+0x10>
   1373a:	b129      	cbz	r1, 13748 <mbedtls_platform_zeroize+0x10>
   1373c:	2300      	movs	r3, #0
   1373e:	4401      	add	r1, r0
   13740:	7003      	strb	r3, [r0, #0]
   13742:	3001      	adds	r0, #1
   13744:	4281      	cmp	r1, r0
   13746:	d1fb      	bne.n	13740 <mbedtls_platform_zeroize+0x8>
   13748:	4770      	bx	lr
   1374a:	bf00      	nop

0001374c <mbedtls_hardware_poll>:
   1374c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13750:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
   13754:	460f      	mov	r7, r1
   13756:	9205      	str	r2, [sp, #20]
   13758:	2100      	movs	r1, #0
   1375a:	4614      	mov	r4, r2
   1375c:	a812      	add	r0, sp, #72	; 0x48
   1375e:	f44f 7208 	mov.w	r2, #544	; 0x220
   13762:	461e      	mov	r6, r3
   13764:	f001 fa4e 	bl	14c04 <memset>
   13768:	2300      	movs	r3, #0
   1376a:	a808      	add	r0, sp, #32
   1376c:	4619      	mov	r1, r3
   1376e:	2228      	movs	r2, #40	; 0x28
   13770:	9306      	str	r3, [sp, #24]
   13772:	f001 fa47 	bl	14c04 <memset>
   13776:	2f00      	cmp	r7, #0
   13778:	d03c      	beq.n	137f4 <mbedtls_hardware_poll+0xa8>
   1377a:	2e00      	cmp	r6, #0
   1377c:	d03a      	beq.n	137f4 <mbedtls_hardware_poll+0xa8>
   1377e:	2c00      	cmp	r4, #0
   13780:	d038      	beq.n	137f4 <mbedtls_hardware_poll+0xa8>
   13782:	2104      	movs	r1, #4
   13784:	a806      	add	r0, sp, #24
   13786:	f7ff fec9 	bl	1351c <CC_PalMemSetZeroPlat>
   1378a:	a808      	add	r0, sp, #32
   1378c:	2128      	movs	r1, #40	; 0x28
   1378e:	f7ff fec5 	bl	1351c <CC_PalMemSetZeroPlat>
   13792:	a808      	add	r0, sp, #32
   13794:	f000 f832 	bl	137fc <RNG_PLAT_SetUserRngParameters>
   13798:	b178      	cbz	r0, 137ba <mbedtls_hardware_poll+0x6e>
   1379a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1379e:	a812      	add	r0, sp, #72	; 0x48
   137a0:	f44f 7108 	mov.w	r1, #544	; 0x220
   137a4:	f7ff ffc8 	bl	13738 <mbedtls_platform_zeroize>
   137a8:	a806      	add	r0, sp, #24
   137aa:	2104      	movs	r1, #4
   137ac:	f7ff ffc4 	bl	13738 <mbedtls_platform_zeroize>
   137b0:	4628      	mov	r0, r5
   137b2:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
   137b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   137ba:	ab12      	add	r3, sp, #72	; 0x48
   137bc:	f10d 081c 	add.w	r8, sp, #28
   137c0:	9003      	str	r0, [sp, #12]
   137c2:	e9cd 6301 	strd	r6, r3, [sp, #4]
   137c6:	4602      	mov	r2, r0
   137c8:	ab05      	add	r3, sp, #20
   137ca:	a908      	add	r1, sp, #32
   137cc:	f8cd 8000 	str.w	r8, [sp]
   137d0:	a806      	add	r0, sp, #24
   137d2:	f000 fce9 	bl	141a8 <LLF_RND_GetTrngSource>
   137d6:	2800      	cmp	r0, #0
   137d8:	d1df      	bne.n	1379a <mbedtls_hardware_poll+0x4e>
   137da:	6833      	ldr	r3, [r6, #0]
   137dc:	42a3      	cmp	r3, r4
   137de:	d3dc      	bcc.n	1379a <mbedtls_hardware_poll+0x4e>
   137e0:	f8d8 1000 	ldr.w	r1, [r8]
   137e4:	4605      	mov	r5, r0
   137e6:	3108      	adds	r1, #8
   137e8:	4638      	mov	r0, r7
   137ea:	4622      	mov	r2, r4
   137ec:	f7ff fe94 	bl	13518 <CC_PalMemCopyPlat>
   137f0:	6034      	str	r4, [r6, #0]
   137f2:	e7d4      	b.n	1379e <mbedtls_hardware_poll+0x52>
   137f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   137f8:	e7da      	b.n	137b0 <mbedtls_hardware_poll+0x64>
   137fa:	bf00      	nop

000137fc <RNG_PLAT_SetUserRngParameters>:
   137fc:	231c      	movs	r3, #28
   137fe:	b530      	push	{r4, r5, lr}
   13800:	b083      	sub	sp, #12
   13802:	a902      	add	r1, sp, #8
   13804:	f841 3d04 	str.w	r3, [r1, #-4]!
   13808:	4604      	mov	r4, r0
   1380a:	f000 f9b1 	bl	13b70 <CC_PalTrngParamGet>
   1380e:	4605      	mov	r5, r0
   13810:	b9d8      	cbnz	r0, 1384a <RNG_PLAT_SetUserRngParameters+0x4e>
   13812:	9b01      	ldr	r3, [sp, #4]
   13814:	2b1c      	cmp	r3, #28
   13816:	d11b      	bne.n	13850 <RNG_PLAT_SetUserRngParameters+0x54>
   13818:	e9d4 3200 	ldrd	r3, r2, [r4]
   1381c:	2101      	movs	r1, #1
   1381e:	3300      	adds	r3, #0
   13820:	61e1      	str	r1, [r4, #28]
   13822:	bf18      	it	ne
   13824:	2301      	movne	r3, #1
   13826:	b10a      	cbz	r2, 1382c <RNG_PLAT_SetUserRngParameters+0x30>
   13828:	f043 0302 	orr.w	r3, r3, #2
   1382c:	68a2      	ldr	r2, [r4, #8]
   1382e:	b932      	cbnz	r2, 1383e <RNG_PLAT_SetUserRngParameters+0x42>
   13830:	68e2      	ldr	r2, [r4, #12]
   13832:	b9aa      	cbnz	r2, 13860 <RNG_PLAT_SetUserRngParameters+0x64>
   13834:	e9c4 3208 	strd	r3, r2, [r4, #32]
   13838:	b93b      	cbnz	r3, 1384a <RNG_PLAT_SetUserRngParameters+0x4e>
   1383a:	4d0d      	ldr	r5, [pc, #52]	; (13870 <RNG_PLAT_SetUserRngParameters+0x74>)
   1383c:	e009      	b.n	13852 <RNG_PLAT_SetUserRngParameters+0x56>
   1383e:	68e2      	ldr	r2, [r4, #12]
   13840:	f043 0304 	orr.w	r3, r3, #4
   13844:	b962      	cbnz	r2, 13860 <RNG_PLAT_SetUserRngParameters+0x64>
   13846:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1384a:	4628      	mov	r0, r5
   1384c:	b003      	add	sp, #12
   1384e:	bd30      	pop	{r4, r5, pc}
   13850:	4d08      	ldr	r5, [pc, #32]	; (13874 <RNG_PLAT_SetUserRngParameters+0x78>)
   13852:	4620      	mov	r0, r4
   13854:	211c      	movs	r1, #28
   13856:	f7ff fe61 	bl	1351c <CC_PalMemSetZeroPlat>
   1385a:	4628      	mov	r0, r5
   1385c:	b003      	add	sp, #12
   1385e:	bd30      	pop	{r4, r5, pc}
   13860:	2200      	movs	r2, #0
   13862:	4628      	mov	r0, r5
   13864:	f043 0308 	orr.w	r3, r3, #8
   13868:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1386c:	b003      	add	sp, #12
   1386e:	bd30      	pop	{r4, r5, pc}
   13870:	00f00c0e 	.word	0x00f00c0e
   13874:	00f00c37 	.word	0x00f00c37

00013878 <nrf_cc310_platform_init>:
   13878:	b510      	push	{r4, lr}
   1387a:	4c0c      	ldr	r4, [pc, #48]	; (138ac <nrf_cc310_platform_init+0x34>)
   1387c:	6823      	ldr	r3, [r4, #0]
   1387e:	b113      	cbz	r3, 13886 <nrf_cc310_platform_init+0xe>
   13880:	4b0b      	ldr	r3, [pc, #44]	; (138b0 <nrf_cc310_platform_init+0x38>)
   13882:	681b      	ldr	r3, [r3, #0]
   13884:	b96b      	cbnz	r3, 138a2 <nrf_cc310_platform_init+0x2a>
   13886:	f000 f931 	bl	13aec <CC_LibInit>
   1388a:	b138      	cbz	r0, 1389c <nrf_cc310_platform_init+0x24>
   1388c:	3801      	subs	r0, #1
   1388e:	2806      	cmp	r0, #6
   13890:	bf96      	itet	ls
   13892:	4b08      	ldrls	r3, [pc, #32]	; (138b4 <nrf_cc310_platform_init+0x3c>)
   13894:	4808      	ldrhi	r0, [pc, #32]	; (138b8 <nrf_cc310_platform_init+0x40>)
   13896:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   1389a:	bd10      	pop	{r4, pc}
   1389c:	2201      	movs	r2, #1
   1389e:	4b04      	ldr	r3, [pc, #16]	; (138b0 <nrf_cc310_platform_init+0x38>)
   138a0:	601a      	str	r2, [r3, #0]
   138a2:	2301      	movs	r3, #1
   138a4:	2000      	movs	r0, #0
   138a6:	6023      	str	r3, [r4, #0]
   138a8:	bd10      	pop	{r4, pc}
   138aa:	bf00      	nop
   138ac:	20000834 	.word	0x20000834
   138b0:	20000838 	.word	0x20000838
   138b4:	0001544c 	.word	0x0001544c
   138b8:	ffff8ffe 	.word	0xffff8ffe

000138bc <nrf_cc310_platform_init_no_rng>:
   138bc:	b510      	push	{r4, lr}
   138be:	4c09      	ldr	r4, [pc, #36]	; (138e4 <nrf_cc310_platform_init_no_rng+0x28>)
   138c0:	6823      	ldr	r3, [r4, #0]
   138c2:	b11b      	cbz	r3, 138cc <nrf_cc310_platform_init_no_rng+0x10>
   138c4:	2301      	movs	r3, #1
   138c6:	2000      	movs	r0, #0
   138c8:	6023      	str	r3, [r4, #0]
   138ca:	bd10      	pop	{r4, pc}
   138cc:	f000 f87c 	bl	139c8 <CC_LibInitNoRng>
   138d0:	2800      	cmp	r0, #0
   138d2:	d0f7      	beq.n	138c4 <nrf_cc310_platform_init_no_rng+0x8>
   138d4:	3801      	subs	r0, #1
   138d6:	2806      	cmp	r0, #6
   138d8:	bf96      	itet	ls
   138da:	4b03      	ldrls	r3, [pc, #12]	; (138e8 <nrf_cc310_platform_init_no_rng+0x2c>)
   138dc:	4803      	ldrhi	r0, [pc, #12]	; (138ec <nrf_cc310_platform_init_no_rng+0x30>)
   138de:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   138e2:	bd10      	pop	{r4, pc}
   138e4:	20000834 	.word	0x20000834
   138e8:	0001544c 	.word	0x0001544c
   138ec:	ffff8ffe 	.word	0xffff8ffe

000138f0 <nrf_cc310_platform_abort>:
   138f0:	f3bf 8f4f 	dsb	sy
   138f4:	4905      	ldr	r1, [pc, #20]	; (1390c <nrf_cc310_platform_abort+0x1c>)
   138f6:	4b06      	ldr	r3, [pc, #24]	; (13910 <nrf_cc310_platform_abort+0x20>)
   138f8:	68ca      	ldr	r2, [r1, #12]
   138fa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   138fe:	4313      	orrs	r3, r2
   13900:	60cb      	str	r3, [r1, #12]
   13902:	f3bf 8f4f 	dsb	sy
   13906:	bf00      	nop
   13908:	e7fd      	b.n	13906 <nrf_cc310_platform_abort+0x16>
   1390a:	bf00      	nop
   1390c:	e000ed00 	.word	0xe000ed00
   13910:	05fa0004 	.word	0x05fa0004

00013914 <CC_PalAbort>:
   13914:	4b01      	ldr	r3, [pc, #4]	; (1391c <CC_PalAbort+0x8>)
   13916:	685b      	ldr	r3, [r3, #4]
   13918:	4718      	bx	r3
   1391a:	bf00      	nop
   1391c:	20000070 	.word	0x20000070

00013920 <nrf_cc310_platform_set_abort>:
   13920:	4b02      	ldr	r3, [pc, #8]	; (1392c <nrf_cc310_platform_set_abort+0xc>)
   13922:	e9d0 1200 	ldrd	r1, r2, [r0]
   13926:	e9c3 1200 	strd	r1, r2, [r3]
   1392a:	4770      	bx	lr
   1392c:	20000070 	.word	0x20000070

00013930 <mutex_free>:
   13930:	4770      	bx	lr
   13932:	bf00      	nop

00013934 <mutex_unlock>:
   13934:	b510      	push	{r4, lr}
   13936:	4604      	mov	r4, r0
   13938:	b120      	cbz	r0, 13944 <mutex_unlock+0x10>
   1393a:	f3bf 8f5f 	dmb	sy
   1393e:	2000      	movs	r0, #0
   13940:	6020      	str	r0, [r4, #0]
   13942:	bd10      	pop	{r4, pc}
   13944:	4803      	ldr	r0, [pc, #12]	; (13954 <mutex_unlock+0x20>)
   13946:	f7ff ffe5 	bl	13914 <CC_PalAbort>
   1394a:	f3bf 8f5f 	dmb	sy
   1394e:	2000      	movs	r0, #0
   13950:	6020      	str	r0, [r4, #0]
   13952:	bd10      	pop	{r4, pc}
   13954:	0001548c 	.word	0x0001548c

00013958 <mutex_init>:
   13958:	b510      	push	{r4, lr}
   1395a:	4604      	mov	r4, r0
   1395c:	b110      	cbz	r0, 13964 <mutex_init+0xc>
   1395e:	2300      	movs	r3, #0
   13960:	6023      	str	r3, [r4, #0]
   13962:	bd10      	pop	{r4, pc}
   13964:	4802      	ldr	r0, [pc, #8]	; (13970 <mutex_init+0x18>)
   13966:	f7ff ffd5 	bl	13914 <CC_PalAbort>
   1396a:	2300      	movs	r3, #0
   1396c:	6023      	str	r3, [r4, #0]
   1396e:	bd10      	pop	{r4, pc}
   13970:	00015468 	.word	0x00015468

00013974 <mutex_lock>:
   13974:	b150      	cbz	r0, 1398c <mutex_lock+0x18>
   13976:	2201      	movs	r2, #1
   13978:	e8d0 3fef 	ldaex	r3, [r0]
   1397c:	e8c0 2fe1 	stlex	r1, r2, [r0]
   13980:	2900      	cmp	r1, #0
   13982:	d1f9      	bne.n	13978 <mutex_lock+0x4>
   13984:	2b01      	cmp	r3, #1
   13986:	d0f7      	beq.n	13978 <mutex_lock+0x4>
   13988:	f3bf 8f5f 	dmb	sy
   1398c:	2000      	movs	r0, #0
   1398e:	4770      	bx	lr

00013990 <nrf_cc310_platform_set_mutexes>:
   13990:	b470      	push	{r4, r5, r6}
   13992:	4b0b      	ldr	r3, [pc, #44]	; (139c0 <nrf_cc310_platform_set_mutexes+0x30>)
   13994:	6806      	ldr	r6, [r0, #0]
   13996:	68c2      	ldr	r2, [r0, #12]
   13998:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
   1399c:	e9c3 4202 	strd	r4, r2, [r3, #8]
   139a0:	e9c3 6500 	strd	r6, r5, [r3]
   139a4:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
   139a8:	680e      	ldr	r6, [r1, #0]
   139aa:	4b06      	ldr	r3, [pc, #24]	; (139c4 <nrf_cc310_platform_set_mutexes+0x34>)
   139ac:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
   139b0:	e9c3 6500 	strd	r6, r5, [r3]
   139b4:	e9c3 4002 	strd	r4, r0, [r3, #8]
   139b8:	611a      	str	r2, [r3, #16]
   139ba:	bc70      	pop	{r4, r5, r6}
   139bc:	4770      	bx	lr
   139be:	bf00      	nop
   139c0:	20000078 	.word	0x20000078
   139c4:	20000088 	.word	0x20000088

000139c8 <CC_LibInitNoRng>:
   139c8:	b510      	push	{r4, lr}
   139ca:	f7ff fe7d 	bl	136c8 <CC_HalInit>
   139ce:	b970      	cbnz	r0, 139ee <CC_LibInitNoRng+0x26>
   139d0:	f7ff fda8 	bl	13524 <CC_PalInit>
   139d4:	b980      	cbnz	r0, 139f8 <CC_LibInitNoRng+0x30>
   139d6:	f7ff fe35 	bl	13644 <CC_PalPowerSaveModeSelect>
   139da:	b980      	cbnz	r0, 139fe <CC_LibInitNoRng+0x36>
   139dc:	4b11      	ldr	r3, [pc, #68]	; (13a24 <CC_LibInitNoRng+0x5c>)
   139de:	681b      	ldr	r3, [r3, #0]
   139e0:	0e1b      	lsrs	r3, r3, #24
   139e2:	2bf0      	cmp	r3, #240	; 0xf0
   139e4:	d00d      	beq.n	13a02 <CC_LibInitNoRng+0x3a>
   139e6:	2406      	movs	r4, #6
   139e8:	f7ff fe70 	bl	136cc <CC_HalTerminate>
   139ec:	e000      	b.n	139f0 <CC_LibInitNoRng+0x28>
   139ee:	2403      	movs	r4, #3
   139f0:	f7ff fdc6 	bl	13580 <CC_PalTerminate>
   139f4:	4620      	mov	r0, r4
   139f6:	bd10      	pop	{r4, pc}
   139f8:	2404      	movs	r4, #4
   139fa:	4620      	mov	r0, r4
   139fc:	bd10      	pop	{r4, pc}
   139fe:	2400      	movs	r4, #0
   13a00:	e7f2      	b.n	139e8 <CC_LibInitNoRng+0x20>
   13a02:	4a09      	ldr	r2, [pc, #36]	; (13a28 <CC_LibInitNoRng+0x60>)
   13a04:	4b09      	ldr	r3, [pc, #36]	; (13a2c <CC_LibInitNoRng+0x64>)
   13a06:	6812      	ldr	r2, [r2, #0]
   13a08:	429a      	cmp	r2, r3
   13a0a:	d001      	beq.n	13a10 <CC_LibInitNoRng+0x48>
   13a0c:	2407      	movs	r4, #7
   13a0e:	e7eb      	b.n	139e8 <CC_LibInitNoRng+0x20>
   13a10:	2001      	movs	r0, #1
   13a12:	f7ff fe17 	bl	13644 <CC_PalPowerSaveModeSelect>
   13a16:	2800      	cmp	r0, #0
   13a18:	d1f1      	bne.n	139fe <CC_LibInitNoRng+0x36>
   13a1a:	4b05      	ldr	r3, [pc, #20]	; (13a30 <CC_LibInitNoRng+0x68>)
   13a1c:	4604      	mov	r4, r0
   13a1e:	6018      	str	r0, [r3, #0]
   13a20:	e7e8      	b.n	139f4 <CC_LibInitNoRng+0x2c>
   13a22:	bf00      	nop
   13a24:	50841928 	.word	0x50841928
   13a28:	50841a24 	.word	0x50841a24
   13a2c:	20e00000 	.word	0x20e00000
   13a30:	50841a0c 	.word	0x50841a0c

00013a34 <CC_LibInitRngModule>:
   13a34:	b530      	push	{r4, r5, lr}
   13a36:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
   13a3a:	f44f 7208 	mov.w	r2, #544	; 0x220
   13a3e:	2100      	movs	r1, #0
   13a40:	a80c      	add	r0, sp, #48	; 0x30
   13a42:	f001 f8df 	bl	14c04 <memset>
   13a46:	2300      	movs	r3, #0
   13a48:	a802      	add	r0, sp, #8
   13a4a:	4619      	mov	r1, r3
   13a4c:	2228      	movs	r2, #40	; 0x28
   13a4e:	9301      	str	r3, [sp, #4]
   13a50:	f001 f8d8 	bl	14c04 <memset>
   13a54:	a802      	add	r0, sp, #8
   13a56:	f7ff fed1 	bl	137fc <RNG_PLAT_SetUserRngParameters>
   13a5a:	b118      	cbz	r0, 13a64 <CC_LibInitRngModule+0x30>
   13a5c:	2005      	movs	r0, #5
   13a5e:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   13a62:	bd30      	pop	{r4, r5, pc}
   13a64:	4d1c      	ldr	r5, [pc, #112]	; (13ad8 <CC_LibInitRngModule+0xa4>)
   13a66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13a6a:	6828      	ldr	r0, [r5, #0]
   13a6c:	f7ff fdba 	bl	135e4 <CC_PalMutexLock>
   13a70:	4604      	mov	r4, r0
   13a72:	b9f0      	cbnz	r0, 13ab2 <CC_LibInitRngModule+0x7e>
   13a74:	2000      	movs	r0, #0
   13a76:	f7ff fde5 	bl	13644 <CC_PalPowerSaveModeSelect>
   13a7a:	b9b0      	cbnz	r0, 13aaa <CC_LibInitRngModule+0x76>
   13a7c:	aa0c      	add	r2, sp, #48	; 0x30
   13a7e:	a902      	add	r1, sp, #8
   13a80:	a801      	add	r0, sp, #4
   13a82:	f000 fbd5 	bl	14230 <LLF_RND_RunTrngStartupTest>
   13a86:	4604      	mov	r4, r0
   13a88:	2001      	movs	r0, #1
   13a8a:	f7ff fddb 	bl	13644 <CC_PalPowerSaveModeSelect>
   13a8e:	b9f0      	cbnz	r0, 13ace <CC_LibInitRngModule+0x9a>
   13a90:	6828      	ldr	r0, [r5, #0]
   13a92:	f7ff fdaf 	bl	135f4 <CC_PalMutexUnlock>
   13a96:	b110      	cbz	r0, 13a9e <CC_LibInitRngModule+0x6a>
   13a98:	4810      	ldr	r0, [pc, #64]	; (13adc <CC_LibInitRngModule+0xa8>)
   13a9a:	f7ff ff3b 	bl	13914 <CC_PalAbort>
   13a9e:	4620      	mov	r0, r4
   13aa0:	2c00      	cmp	r4, #0
   13aa2:	d1db      	bne.n	13a5c <CC_LibInitRngModule+0x28>
   13aa4:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   13aa8:	bd30      	pop	{r4, r5, pc}
   13aaa:	480d      	ldr	r0, [pc, #52]	; (13ae0 <CC_LibInitRngModule+0xac>)
   13aac:	f7ff ff32 	bl	13914 <CC_PalAbort>
   13ab0:	e7e4      	b.n	13a7c <CC_LibInitRngModule+0x48>
   13ab2:	480c      	ldr	r0, [pc, #48]	; (13ae4 <CC_LibInitRngModule+0xb0>)
   13ab4:	f7ff ff2e 	bl	13914 <CC_PalAbort>
   13ab8:	2c01      	cmp	r4, #1
   13aba:	d1db      	bne.n	13a74 <CC_LibInitRngModule+0x40>
   13abc:	6828      	ldr	r0, [r5, #0]
   13abe:	f7ff fd99 	bl	135f4 <CC_PalMutexUnlock>
   13ac2:	2800      	cmp	r0, #0
   13ac4:	d0ca      	beq.n	13a5c <CC_LibInitRngModule+0x28>
   13ac6:	4805      	ldr	r0, [pc, #20]	; (13adc <CC_LibInitRngModule+0xa8>)
   13ac8:	f7ff ff24 	bl	13914 <CC_PalAbort>
   13acc:	e7c6      	b.n	13a5c <CC_LibInitRngModule+0x28>
   13ace:	4806      	ldr	r0, [pc, #24]	; (13ae8 <CC_LibInitRngModule+0xb4>)
   13ad0:	f7ff ff20 	bl	13914 <CC_PalAbort>
   13ad4:	e7dc      	b.n	13a90 <CC_LibInitRngModule+0x5c>
   13ad6:	bf00      	nop
   13ad8:	2000006c 	.word	0x2000006c
   13adc:	000154c4 	.word	0x000154c4
   13ae0:	000154dc 	.word	0x000154dc
   13ae4:	000154ac 	.word	0x000154ac
   13ae8:	000154fc 	.word	0x000154fc

00013aec <CC_LibInit>:
   13aec:	b508      	push	{r3, lr}
   13aee:	f7ff fdeb 	bl	136c8 <CC_HalInit>
   13af2:	b118      	cbz	r0, 13afc <CC_LibInit+0x10>
   13af4:	f7ff fd44 	bl	13580 <CC_PalTerminate>
   13af8:	2003      	movs	r0, #3
   13afa:	bd08      	pop	{r3, pc}
   13afc:	f7ff fd12 	bl	13524 <CC_PalInit>
   13b00:	b968      	cbnz	r0, 13b1e <CC_LibInit+0x32>
   13b02:	f7ff fd9f 	bl	13644 <CC_PalPowerSaveModeSelect>
   13b06:	b960      	cbnz	r0, 13b22 <CC_LibInit+0x36>
   13b08:	4b15      	ldr	r3, [pc, #84]	; (13b60 <CC_LibInit+0x74>)
   13b0a:	681b      	ldr	r3, [r3, #0]
   13b0c:	0e1b      	lsrs	r3, r3, #24
   13b0e:	2bf0      	cmp	r3, #240	; 0xf0
   13b10:	d012      	beq.n	13b38 <CC_LibInit+0x4c>
   13b12:	f7ff fddb 	bl	136cc <CC_HalTerminate>
   13b16:	f7ff fd33 	bl	13580 <CC_PalTerminate>
   13b1a:	2006      	movs	r0, #6
   13b1c:	bd08      	pop	{r3, pc}
   13b1e:	2004      	movs	r0, #4
   13b20:	bd08      	pop	{r3, pc}
   13b22:	f7ff fdd3 	bl	136cc <CC_HalTerminate>
   13b26:	f7ff fd2b 	bl	13580 <CC_PalTerminate>
   13b2a:	f7ff ff83 	bl	13a34 <CC_LibInitRngModule>
   13b2e:	2800      	cmp	r0, #0
   13b30:	bf0c      	ite	eq
   13b32:	2000      	moveq	r0, #0
   13b34:	2005      	movne	r0, #5
   13b36:	bd08      	pop	{r3, pc}
   13b38:	4a0a      	ldr	r2, [pc, #40]	; (13b64 <CC_LibInit+0x78>)
   13b3a:	4b0b      	ldr	r3, [pc, #44]	; (13b68 <CC_LibInit+0x7c>)
   13b3c:	6812      	ldr	r2, [r2, #0]
   13b3e:	429a      	cmp	r2, r3
   13b40:	d005      	beq.n	13b4e <CC_LibInit+0x62>
   13b42:	f7ff fdc3 	bl	136cc <CC_HalTerminate>
   13b46:	f7ff fd1b 	bl	13580 <CC_PalTerminate>
   13b4a:	2007      	movs	r0, #7
   13b4c:	bd08      	pop	{r3, pc}
   13b4e:	2001      	movs	r0, #1
   13b50:	f7ff fd78 	bl	13644 <CC_PalPowerSaveModeSelect>
   13b54:	2800      	cmp	r0, #0
   13b56:	d1e4      	bne.n	13b22 <CC_LibInit+0x36>
   13b58:	4b04      	ldr	r3, [pc, #16]	; (13b6c <CC_LibInit+0x80>)
   13b5a:	6018      	str	r0, [r3, #0]
   13b5c:	e7e5      	b.n	13b2a <CC_LibInit+0x3e>
   13b5e:	bf00      	nop
   13b60:	50841928 	.word	0x50841928
   13b64:	50841a24 	.word	0x50841a24
   13b68:	20e00000 	.word	0x20e00000
   13b6c:	50841a0c 	.word	0x50841a0c

00013b70 <CC_PalTrngParamGet>:
   13b70:	b118      	cbz	r0, 13b7a <CC_PalTrngParamGet+0xa>
   13b72:	b111      	cbz	r1, 13b7a <CC_PalTrngParamGet+0xa>
   13b74:	680b      	ldr	r3, [r1, #0]
   13b76:	2b1c      	cmp	r3, #28
   13b78:	d001      	beq.n	13b7e <CC_PalTrngParamGet+0xe>
   13b7a:	2001      	movs	r0, #1
   13b7c:	4770      	bx	lr
   13b7e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13b82:	4a3a      	ldr	r2, [pc, #232]	; (13c6c <CC_PalTrngParamGet+0xfc>)
   13b84:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
   13b88:	4291      	cmp	r1, r2
   13b8a:	d05a      	beq.n	13c42 <CC_PalTrngParamGet+0xd2>
   13b8c:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   13b90:	3201      	adds	r2, #1
   13b92:	d056      	beq.n	13c42 <CC_PalTrngParamGet+0xd2>
   13b94:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   13b98:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13b9c:	6002      	str	r2, [r0, #0]
   13b9e:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
   13ba2:	4a33      	ldr	r2, [pc, #204]	; (13c70 <CC_PalTrngParamGet+0x100>)
   13ba4:	4291      	cmp	r1, r2
   13ba6:	d05e      	beq.n	13c66 <CC_PalTrngParamGet+0xf6>
   13ba8:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   13bac:	3201      	adds	r2, #1
   13bae:	d05a      	beq.n	13c66 <CC_PalTrngParamGet+0xf6>
   13bb0:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   13bb4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13bb8:	6042      	str	r2, [r0, #4]
   13bba:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   13bbe:	f512 7f94 	cmn.w	r2, #296	; 0x128
   13bc2:	d04d      	beq.n	13c60 <CC_PalTrngParamGet+0xf0>
   13bc4:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   13bc8:	3201      	adds	r2, #1
   13bca:	d049      	beq.n	13c60 <CC_PalTrngParamGet+0xf0>
   13bcc:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   13bd0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13bd4:	6082      	str	r2, [r0, #8]
   13bd6:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
   13bda:	4a26      	ldr	r2, [pc, #152]	; (13c74 <CC_PalTrngParamGet+0x104>)
   13bdc:	4291      	cmp	r1, r2
   13bde:	d03c      	beq.n	13c5a <CC_PalTrngParamGet+0xea>
   13be0:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   13be4:	3201      	adds	r2, #1
   13be6:	d038      	beq.n	13c5a <CC_PalTrngParamGet+0xea>
   13be8:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   13bec:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13bf0:	60c2      	str	r2, [r0, #12]
   13bf2:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   13bf6:	3270      	adds	r2, #112	; 0x70
   13bf8:	d02d      	beq.n	13c56 <CC_PalTrngParamGet+0xe6>
   13bfa:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   13bfe:	3201      	adds	r2, #1
   13c00:	d029      	beq.n	13c56 <CC_PalTrngParamGet+0xe6>
   13c02:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   13c06:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13c0a:	6102      	str	r2, [r0, #16]
   13c0c:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   13c10:	32af      	adds	r2, #175	; 0xaf
   13c12:	d01e      	beq.n	13c52 <CC_PalTrngParamGet+0xe2>
   13c14:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   13c18:	3201      	adds	r2, #1
   13c1a:	d01a      	beq.n	13c52 <CC_PalTrngParamGet+0xe2>
   13c1c:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   13c20:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13c24:	6142      	str	r2, [r0, #20]
   13c26:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
   13c2a:	4a13      	ldr	r2, [pc, #76]	; (13c78 <CC_PalTrngParamGet+0x108>)
   13c2c:	4291      	cmp	r1, r2
   13c2e:	d00b      	beq.n	13c48 <CC_PalTrngParamGet+0xd8>
   13c30:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   13c34:	3201      	adds	r2, #1
   13c36:	d007      	beq.n	13c48 <CC_PalTrngParamGet+0xd8>
   13c38:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
   13c3c:	6183      	str	r3, [r0, #24]
   13c3e:	2000      	movs	r0, #0
   13c40:	4770      	bx	lr
   13c42:	f640 02fc 	movw	r2, #2300	; 0x8fc
   13c46:	e7a7      	b.n	13b98 <CC_PalTrngParamGet+0x28>
   13c48:	f240 3337 	movw	r3, #823	; 0x337
   13c4c:	6183      	str	r3, [r0, #24]
   13c4e:	2000      	movs	r0, #0
   13c50:	4770      	bx	lr
   13c52:	2251      	movs	r2, #81	; 0x51
   13c54:	e7e4      	b.n	13c20 <CC_PalTrngParamGet+0xb0>
   13c56:	2290      	movs	r2, #144	; 0x90
   13c58:	e7d5      	b.n	13c06 <CC_PalTrngParamGet+0x96>
   13c5a:	f642 1204 	movw	r2, #10500	; 0x2904
   13c5e:	e7c5      	b.n	13bec <CC_PalTrngParamGet+0x7c>
   13c60:	f640 62d8 	movw	r2, #3800	; 0xed8
   13c64:	e7b4      	b.n	13bd0 <CC_PalTrngParamGet+0x60>
   13c66:	f242 02d0 	movw	r2, #8400	; 0x20d0
   13c6a:	e7a3      	b.n	13bb4 <CC_PalTrngParamGet+0x44>
   13c6c:	fffff8fc 	.word	0xfffff8fc
   13c70:	ffff20d0 	.word	0xffff20d0
   13c74:	ffff2904 	.word	0xffff2904
   13c78:	fffff337 	.word	0xfffff337

00013c7c <LLF_RND_AdaptiveProportionTest>:
   13c7c:	b3a8      	cbz	r0, 13cea <LLF_RND_AdaptiveProportionTest+0x6e>
   13c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13c82:	1e4c      	subs	r4, r1, #1
   13c84:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   13c88:	d22c      	bcs.n	13ce4 <LLF_RND_AdaptiveProportionTest+0x68>
   13c8a:	b35b      	cbz	r3, 13ce4 <LLF_RND_AdaptiveProportionTest+0x68>
   13c8c:	b352      	cbz	r2, 13ce4 <LLF_RND_AdaptiveProportionTest+0x68>
   13c8e:	f04f 0c00 	mov.w	ip, #0
   13c92:	00c9      	lsls	r1, r1, #3
   13c94:	46e6      	mov	lr, ip
   13c96:	4665      	mov	r5, ip
   13c98:	4664      	mov	r4, ip
   13c9a:	1e4f      	subs	r7, r1, #1
   13c9c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   13ca0:	e00c      	b.n	13cbc <LLF_RND_AdaptiveProportionTest+0x40>
   13ca2:	42ab      	cmp	r3, r5
   13ca4:	d016      	beq.n	13cd4 <LLF_RND_AdaptiveProportionTest+0x58>
   13ca6:	458e      	cmp	lr, r1
   13ca8:	d101      	bne.n	13cae <LLF_RND_AdaptiveProportionTest+0x32>
   13caa:	f10c 0c01 	add.w	ip, ip, #1
   13cae:	45a8      	cmp	r8, r5
   13cb0:	d016      	beq.n	13ce0 <LLF_RND_AdaptiveProportionTest+0x64>
   13cb2:	3401      	adds	r4, #1
   13cb4:	42bc      	cmp	r4, r7
   13cb6:	f105 0501 	add.w	r5, r5, #1
   13cba:	d818      	bhi.n	13cee <LLF_RND_AdaptiveProportionTest+0x72>
   13cbc:	0961      	lsrs	r1, r4, #5
   13cbe:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   13cc2:	f004 061f 	and.w	r6, r4, #31
   13cc6:	40f1      	lsrs	r1, r6
   13cc8:	2e1f      	cmp	r6, #31
   13cca:	bf18      	it	ne
   13ccc:	f001 0101 	andne.w	r1, r1, #1
   13cd0:	2c00      	cmp	r4, #0
   13cd2:	d1e6      	bne.n	13ca2 <LLF_RND_AdaptiveProportionTest+0x26>
   13cd4:	2500      	movs	r5, #0
   13cd6:	45a8      	cmp	r8, r5
   13cd8:	468e      	mov	lr, r1
   13cda:	f04f 0c01 	mov.w	ip, #1
   13cde:	d1e8      	bne.n	13cb2 <LLF_RND_AdaptiveProportionTest+0x36>
   13ce0:	4562      	cmp	r2, ip
   13ce2:	d2e6      	bcs.n	13cb2 <LLF_RND_AdaptiveProportionTest+0x36>
   13ce4:	4803      	ldr	r0, [pc, #12]	; (13cf4 <LLF_RND_AdaptiveProportionTest+0x78>)
   13ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13cea:	4802      	ldr	r0, [pc, #8]	; (13cf4 <LLF_RND_AdaptiveProportionTest+0x78>)
   13cec:	4770      	bx	lr
   13cee:	2000      	movs	r0, #0
   13cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13cf4:	00f10c37 	.word	0x00f10c37

00013cf8 <getTrngSource>:
   13cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cfc:	b08f      	sub	sp, #60	; 0x3c
   13cfe:	460d      	mov	r5, r1
   13d00:	e9dd 4119 	ldrd	r4, r1, [sp, #100]	; 0x64
   13d04:	4683      	mov	fp, r0
   13d06:	2900      	cmp	r1, #0
   13d08:	d157      	bne.n	13dba <getTrngSource+0xc2>
   13d0a:	6929      	ldr	r1, [r5, #16]
   13d0c:	9103      	str	r1, [sp, #12]
   13d0e:	2100      	movs	r1, #0
   13d10:	601c      	str	r4, [r3, #0]
   13d12:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13d14:	6019      	str	r1, [r3, #0]
   13d16:	2a00      	cmp	r2, #0
   13d18:	f000 8122 	beq.w	13f60 <getTrngSource+0x268>
   13d1c:	4a81      	ldr	r2, [pc, #516]	; (13f24 <getTrngSource+0x22c>)
   13d1e:	4b82      	ldr	r3, [pc, #520]	; (13f28 <getTrngSource+0x230>)
   13d20:	6811      	ldr	r1, [r2, #0]
   13d22:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   13d24:	681b      	ldr	r3, [r3, #0]
   13d26:	429a      	cmp	r2, r3
   13d28:	d157      	bne.n	13dda <getTrngSource+0xe2>
   13d2a:	290a      	cmp	r1, #10
   13d2c:	d155      	bne.n	13dda <getTrngSource+0xe2>
   13d2e:	f89b 3003 	ldrb.w	r3, [fp, #3]
   13d32:	9306      	str	r3, [sp, #24]
   13d34:	9903      	ldr	r1, [sp, #12]
   13d36:	2304      	movs	r3, #4
   13d38:	4608      	mov	r0, r1
   13d3a:	4a7c      	ldr	r2, [pc, #496]	; (13f2c <getTrngSource+0x234>)
   13d3c:	9302      	str	r3, [sp, #8]
   13d3e:	fba2 0200 	umull	r0, r2, r2, r0
   13d42:	0892      	lsrs	r2, r2, #2
   13d44:	00cb      	lsls	r3, r1, #3
   13d46:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   13d4a:	f104 0008 	add.w	r0, r4, #8
   13d4e:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
   13d52:	3b01      	subs	r3, #1
   13d54:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 13f28 <getTrngSource+0x230>
   13d58:	f8df a200 	ldr.w	sl, [pc, #512]	; 13f5c <getTrngSource+0x264>
   13d5c:	9004      	str	r0, [sp, #16]
   13d5e:	9200      	str	r2, [sp, #0]
   13d60:	9305      	str	r3, [sp, #20]
   13d62:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13d64:	9c03      	ldr	r4, [sp, #12]
   13d66:	601c      	str	r4, [r3, #0]
   13d68:	2c00      	cmp	r4, #0
   13d6a:	f000 80cc 	beq.w	13f06 <getTrngSource+0x20e>
   13d6e:	2600      	movs	r6, #0
   13d70:	9f04      	ldr	r7, [sp, #16]
   13d72:	f000 faa9 	bl	142c8 <LLF_RND_TurnOffTrng>
   13d76:	2300      	movs	r3, #0
   13d78:	9307      	str	r3, [sp, #28]
   13d7a:	9b06      	ldr	r3, [sp, #24]
   13d7c:	f1bb 0f00 	cmp.w	fp, #0
   13d80:	d03a      	beq.n	13df8 <getTrngSource+0x100>
   13d82:	2d00      	cmp	r5, #0
   13d84:	d034      	beq.n	13df0 <getTrngSource+0xf8>
   13d86:	bb53      	cbnz	r3, 13dde <getTrngSource+0xe6>
   13d88:	005b      	lsls	r3, r3, #1
   13d8a:	9306      	str	r3, [sp, #24]
   13d8c:	f1bb 0f00 	cmp.w	fp, #0
   13d90:	d036      	beq.n	13e00 <getTrngSource+0x108>
   13d92:	2d00      	cmp	r5, #0
   13d94:	d034      	beq.n	13e00 <getTrngSource+0x108>
   13d96:	b1e3      	cbz	r3, 13dd2 <getTrngSource+0xda>
   13d98:	a906      	add	r1, sp, #24
   13d9a:	4628      	mov	r0, r5
   13d9c:	f000 fa84 	bl	142a8 <LLF_RND_GetFastestRosc>
   13da0:	2800      	cmp	r0, #0
   13da2:	f000 817d 	beq.w	140a0 <getTrngSource+0x3a8>
   13da6:	4b62      	ldr	r3, [pc, #392]	; (13f30 <getTrngSource+0x238>)
   13da8:	4298      	cmp	r0, r3
   13daa:	d012      	beq.n	13dd2 <getTrngSource+0xda>
   13dac:	9000      	str	r0, [sp, #0]
   13dae:	f000 fa8b 	bl	142c8 <LLF_RND_TurnOffTrng>
   13db2:	9800      	ldr	r0, [sp, #0]
   13db4:	b00f      	add	sp, #60	; 0x3c
   13db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dba:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
   13dbe:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   13dc2:	3001      	adds	r0, #1
   13dc4:	bf0c      	ite	eq
   13dc6:	f44f 7104 	moveq.w	r1, #528	; 0x210
   13dca:	f8d1 1c0c 	ldrne.w	r1, [r1, #3084]	; 0xc0c
   13dce:	9103      	str	r1, [sp, #12]
   13dd0:	e79d      	b.n	13d0e <getTrngSource+0x16>
   13dd2:	6a2b      	ldr	r3, [r5, #32]
   13dd4:	b973      	cbnz	r3, 13df4 <getTrngSource+0xfc>
   13dd6:	4856      	ldr	r0, [pc, #344]	; (13f30 <getTrngSource+0x238>)
   13dd8:	e7e8      	b.n	13dac <getTrngSource+0xb4>
   13dda:	4856      	ldr	r0, [pc, #344]	; (13f34 <getTrngSource+0x23c>)
   13ddc:	e7e6      	b.n	13dac <getTrngSource+0xb4>
   13dde:	a906      	add	r1, sp, #24
   13de0:	4628      	mov	r0, r5
   13de2:	f000 fa61 	bl	142a8 <LLF_RND_GetFastestRosc>
   13de6:	b168      	cbz	r0, 13e04 <getTrngSource+0x10c>
   13de8:	4b53      	ldr	r3, [pc, #332]	; (13f38 <getTrngSource+0x240>)
   13dea:	4298      	cmp	r0, r3
   13dec:	d0de      	beq.n	13dac <getTrngSource+0xb4>
   13dee:	9b06      	ldr	r3, [sp, #24]
   13df0:	2b08      	cmp	r3, #8
   13df2:	d1c9      	bne.n	13d88 <getTrngSource+0x90>
   13df4:	4851      	ldr	r0, [pc, #324]	; (13f3c <getTrngSource+0x244>)
   13df6:	e7d9      	b.n	13dac <getTrngSource+0xb4>
   13df8:	2b08      	cmp	r3, #8
   13dfa:	d0fb      	beq.n	13df4 <getTrngSource+0xfc>
   13dfc:	005b      	lsls	r3, r3, #1
   13dfe:	9306      	str	r3, [sp, #24]
   13e00:	484f      	ldr	r0, [pc, #316]	; (13f40 <getTrngSource+0x248>)
   13e02:	e7d3      	b.n	13dac <getTrngSource+0xb4>
   13e04:	4629      	mov	r1, r5
   13e06:	9806      	ldr	r0, [sp, #24]
   13e08:	f000 fa30 	bl	1426c <LLF_RND_GetRoscSampleCnt>
   13e0c:	2800      	cmp	r0, #0
   13e0e:	d1eb      	bne.n	13de8 <getTrngSource+0xf0>
   13e10:	9b06      	ldr	r3, [sp, #24]
   13e12:	2b08      	cmp	r3, #8
   13e14:	f000 810e 	beq.w	14034 <getTrngSource+0x33c>
   13e18:	2b04      	cmp	r3, #4
   13e1a:	f000 8131 	beq.w	14080 <getTrngSource+0x388>
   13e1e:	f1a3 0302 	sub.w	r3, r3, #2
   13e22:	fab3 f383 	clz	r3, r3
   13e26:	095b      	lsrs	r3, r3, #5
   13e28:	9301      	str	r3, [sp, #4]
   13e2a:	2301      	movs	r3, #1
   13e2c:	4619      	mov	r1, r3
   13e2e:	4a45      	ldr	r2, [pc, #276]	; (13f44 <getTrngSource+0x24c>)
   13e30:	6013      	str	r3, [r2, #0]
   13e32:	f842 3c84 	str.w	r3, [r2, #-132]
   13e36:	4b43      	ldr	r3, [pc, #268]	; (13f44 <getTrngSource+0x24c>)
   13e38:	6019      	str	r1, [r3, #0]
   13e3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13e3c:	f8c9 3000 	str.w	r3, [r9]
   13e40:	f8d9 2000 	ldr.w	r2, [r9]
   13e44:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13e46:	429a      	cmp	r2, r3
   13e48:	d1f5      	bne.n	13e36 <getTrngSource+0x13e>
   13e4a:	f04f 0800 	mov.w	r8, #0
   13e4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13e52:	f8ca 8000 	str.w	r8, [sl]
   13e56:	f7ff fc3b 	bl	136d0 <CC_HalClearInterruptBit>
   13e5a:	4a3b      	ldr	r2, [pc, #236]	; (13f48 <getTrngSource+0x250>)
   13e5c:	4b3b      	ldr	r3, [pc, #236]	; (13f4c <getTrngSource+0x254>)
   13e5e:	4640      	mov	r0, r8
   13e60:	601a      	str	r2, [r3, #0]
   13e62:	f7ff fc43 	bl	136ec <CC_HalMaskInterrupt>
   13e66:	220a      	movs	r2, #10
   13e68:	9801      	ldr	r0, [sp, #4]
   13e6a:	4939      	ldr	r1, [pc, #228]	; (13f50 <getTrngSource+0x258>)
   13e6c:	4b2d      	ldr	r3, [pc, #180]	; (13f24 <getTrngSource+0x22c>)
   13e6e:	6008      	str	r0, [r1, #0]
   13e70:	601a      	str	r2, [r3, #0]
   13e72:	692a      	ldr	r2, [r5, #16]
   13e74:	f1a8 3855 	sub.w	r8, r8, #1431655765	; 0x55555555
   13e78:	fba8 1202 	umull	r1, r2, r8, r2
   13e7c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13e7e:	0912      	lsrs	r2, r2, #4
   13e80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13e84:	03db      	lsls	r3, r3, #15
   13e86:	fb03 f302 	mul.w	r3, r3, r2
   13e8a:	4a32      	ldr	r2, [pc, #200]	; (13f54 <getTrngSource+0x25c>)
   13e8c:	099b      	lsrs	r3, r3, #6
   13e8e:	6013      	str	r3, [r2, #0]
   13e90:	2301      	movs	r3, #1
   13e92:	f8ca 3000 	str.w	r3, [sl]
   13e96:	9906      	ldr	r1, [sp, #24]
   13e98:	f8db 2000 	ldr.w	r2, [fp]
   13e9c:	020b      	lsls	r3, r1, #8
   13e9e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   13ea2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   13ea6:	4313      	orrs	r3, r2
   13ea8:	f8cb 3000 	str.w	r3, [fp]
   13eac:	a807      	add	r0, sp, #28
   13eae:	f000 f9cd 	bl	1424c <LLF_RND_WaitRngInterrupt>
   13eb2:	2800      	cmp	r0, #0
   13eb4:	d198      	bne.n	13de8 <getTrngSource+0xf0>
   13eb6:	4b28      	ldr	r3, [pc, #160]	; (13f58 <getTrngSource+0x260>)
   13eb8:	fba8 2804 	umull	r2, r8, r8, r4
   13ebc:	681a      	ldr	r2, [r3, #0]
   13ebe:	3314      	adds	r3, #20
   13ec0:	9208      	str	r2, [sp, #32]
   13ec2:	f853 2c10 	ldr.w	r2, [r3, #-16]
   13ec6:	ebb6 0f98 	cmp.w	r6, r8, lsr #2
   13eca:	9209      	str	r2, [sp, #36]	; 0x24
   13ecc:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   13ed0:	920a      	str	r2, [sp, #40]	; 0x28
   13ed2:	f853 2c08 	ldr.w	r2, [r3, #-8]
   13ed6:	920b      	str	r2, [sp, #44]	; 0x2c
   13ed8:	f853 2c04 	ldr.w	r2, [r3, #-4]
   13edc:	920c      	str	r2, [sp, #48]	; 0x30
   13ede:	681b      	ldr	r3, [r3, #0]
   13ee0:	930d      	str	r3, [sp, #52]	; 0x34
   13ee2:	d101      	bne.n	13ee8 <getTrngSource+0x1f0>
   13ee4:	9b00      	ldr	r3, [sp, #0]
   13ee6:	b99b      	cbnz	r3, 13f10 <getTrngSource+0x218>
   13ee8:	4638      	mov	r0, r7
   13eea:	2218      	movs	r2, #24
   13eec:	a908      	add	r1, sp, #32
   13eee:	f7ff fb13 	bl	13518 <CC_PalMemCopyPlat>
   13ef2:	3c18      	subs	r4, #24
   13ef4:	3718      	adds	r7, #24
   13ef6:	3601      	adds	r6, #1
   13ef8:	2c00      	cmp	r4, #0
   13efa:	f47f af3a 	bne.w	13d72 <getTrngSource+0x7a>
   13efe:	9b04      	ldr	r3, [sp, #16]
   13f00:	2b00      	cmp	r3, #0
   13f02:	f040 809a 	bne.w	1403a <getTrngSource+0x342>
   13f06:	2300      	movs	r3, #0
   13f08:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13f0a:	6013      	str	r3, [r2, #0]
   13f0c:	9b06      	ldr	r3, [sp, #24]
   13f0e:	e76f      	b.n	13df0 <getTrngSource+0xf8>
   13f10:	461a      	mov	r2, r3
   13f12:	4638      	mov	r0, r7
   13f14:	a908      	add	r1, sp, #32
   13f16:	1ae4      	subs	r4, r4, r3
   13f18:	f7ff fafe 	bl	13518 <CC_PalMemCopyPlat>
   13f1c:	9b00      	ldr	r3, [sp, #0]
   13f1e:	441f      	add	r7, r3
   13f20:	e7e9      	b.n	13ef6 <getTrngSource+0x1fe>
   13f22:	bf00      	nop
   13f24:	50841138 	.word	0x50841138
   13f28:	50841130 	.word	0x50841130
   13f2c:	aaaaaaab 	.word	0xaaaaaaab
   13f30:	00f10c31 	.word	0x00f10c31
   13f34:	00f10c30 	.word	0x00f10c30
   13f38:	00f10c02 	.word	0x00f10c02
   13f3c:	00f10c32 	.word	0x00f10c32
   13f40:	00f10c35 	.word	0x00f10c35
   13f44:	508411c4 	.word	0x508411c4
   13f48:	0ffffffe 	.word	0x0ffffffe
   13f4c:	50841100 	.word	0x50841100
   13f50:	5084110c 	.word	0x5084110c
   13f54:	508411d8 	.word	0x508411d8
   13f58:	50841114 	.word	0x50841114
   13f5c:	5084112c 	.word	0x5084112c
   13f60:	f1bb 0f00 	cmp.w	fp, #0
   13f64:	f43f af4c 	beq.w	13e00 <getTrngSource+0x108>
   13f68:	2d00      	cmp	r5, #0
   13f6a:	f43f af49 	beq.w	13e00 <getTrngSource+0x108>
   13f6e:	2301      	movs	r3, #1
   13f70:	a90e      	add	r1, sp, #56	; 0x38
   13f72:	f841 3d20 	str.w	r3, [r1, #-32]!
   13f76:	f8cb 2000 	str.w	r2, [fp]
   13f7a:	4628      	mov	r0, r5
   13f7c:	f000 f994 	bl	142a8 <LLF_RND_GetFastestRosc>
   13f80:	2800      	cmp	r0, #0
   13f82:	f47f af13 	bne.w	13dac <getTrngSource+0xb4>
   13f86:	4629      	mov	r1, r5
   13f88:	9806      	ldr	r0, [sp, #24]
   13f8a:	f000 f96f 	bl	1426c <LLF_RND_GetRoscSampleCnt>
   13f8e:	2800      	cmp	r0, #0
   13f90:	f47f af0c 	bne.w	13dac <getTrngSource+0xb4>
   13f94:	9f06      	ldr	r7, [sp, #24]
   13f96:	2f08      	cmp	r7, #8
   13f98:	f000 80eb 	beq.w	14172 <getTrngSource+0x47a>
   13f9c:	2f04      	cmp	r7, #4
   13f9e:	f000 80ea 	beq.w	14176 <getTrngSource+0x47e>
   13fa2:	f1a7 0702 	sub.w	r7, r7, #2
   13fa6:	fab7 f787 	clz	r7, r7
   13faa:	097f      	lsrs	r7, r7, #5
   13fac:	2201      	movs	r2, #1
   13fae:	4616      	mov	r6, r2
   13fb0:	4b73      	ldr	r3, [pc, #460]	; (14180 <getTrngSource+0x488>)
   13fb2:	4974      	ldr	r1, [pc, #464]	; (14184 <getTrngSource+0x48c>)
   13fb4:	601a      	str	r2, [r3, #0]
   13fb6:	4618      	mov	r0, r3
   13fb8:	600a      	str	r2, [r1, #0]
   13fba:	3b94      	subs	r3, #148	; 0x94
   13fbc:	6006      	str	r6, [r0, #0]
   13fbe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   13fc0:	601a      	str	r2, [r3, #0]
   13fc2:	6819      	ldr	r1, [r3, #0]
   13fc4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   13fc6:	4291      	cmp	r1, r2
   13fc8:	d1f8      	bne.n	13fbc <getTrngSource+0x2c4>
   13fca:	f04f 0800 	mov.w	r8, #0
   13fce:	4b6e      	ldr	r3, [pc, #440]	; (14188 <getTrngSource+0x490>)
   13fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13fd4:	f8c3 8000 	str.w	r8, [r3]
   13fd8:	f7ff fb7a 	bl	136d0 <CC_HalClearInterruptBit>
   13fdc:	4b6b      	ldr	r3, [pc, #428]	; (1418c <getTrngSource+0x494>)
   13fde:	4a6c      	ldr	r2, [pc, #432]	; (14190 <getTrngSource+0x498>)
   13fe0:	4640      	mov	r0, r8
   13fe2:	601a      	str	r2, [r3, #0]
   13fe4:	f7ff fb82 	bl	136ec <CC_HalMaskInterrupt>
   13fe8:	220a      	movs	r2, #10
   13fea:	496a      	ldr	r1, [pc, #424]	; (14194 <getTrngSource+0x49c>)
   13fec:	4b6a      	ldr	r3, [pc, #424]	; (14198 <getTrngSource+0x4a0>)
   13fee:	600f      	str	r7, [r1, #0]
   13ff0:	601a      	str	r2, [r3, #0]
   13ff2:	991a      	ldr	r1, [sp, #104]	; 0x68
   13ff4:	692b      	ldr	r3, [r5, #16]
   13ff6:	2901      	cmp	r1, #1
   13ff8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   13ffa:	f000 80b1 	beq.w	14160 <getTrngSource+0x468>
   13ffe:	4967      	ldr	r1, [pc, #412]	; (1419c <getTrngSource+0x4a4>)
   14000:	fba1 1303 	umull	r1, r3, r1, r3
   14004:	091b      	lsrs	r3, r3, #4
   14006:	2101      	movs	r1, #1
   14008:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1400c:	03d2      	lsls	r2, r2, #15
   1400e:	fb03 f302 	mul.w	r3, r3, r2
   14012:	4a63      	ldr	r2, [pc, #396]	; (141a0 <getTrngSource+0x4a8>)
   14014:	099b      	lsrs	r3, r3, #6
   14016:	6013      	str	r3, [r2, #0]
   14018:	4b5b      	ldr	r3, [pc, #364]	; (14188 <getTrngSource+0x490>)
   1401a:	6019      	str	r1, [r3, #0]
   1401c:	9906      	ldr	r1, [sp, #24]
   1401e:	f8db 2000 	ldr.w	r2, [fp]
   14022:	020b      	lsls	r3, r1, #8
   14024:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   14028:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1402c:	4313      	orrs	r3, r2
   1402e:	f8cb 3000 	str.w	r3, [fp]
   14032:	e67f      	b.n	13d34 <getTrngSource+0x3c>
   14034:	2303      	movs	r3, #3
   14036:	9301      	str	r3, [sp, #4]
   14038:	e6f7      	b.n	13e2a <getTrngSource+0x132>
   1403a:	9b03      	ldr	r3, [sp, #12]
   1403c:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   14040:	f63f af61 	bhi.w	13f06 <getTrngSource+0x20e>
   14044:	e9dd 7c04 	ldrd	r7, ip, [sp, #16]
   14048:	4620      	mov	r0, r4
   1404a:	4623      	mov	r3, r4
   1404c:	696e      	ldr	r6, [r5, #20]
   1404e:	e004      	b.n	1405a <getTrngSource+0x362>
   14050:	2001      	movs	r0, #1
   14052:	3301      	adds	r3, #1
   14054:	4563      	cmp	r3, ip
   14056:	4614      	mov	r4, r2
   14058:	d815      	bhi.n	14086 <getTrngSource+0x38e>
   1405a:	095a      	lsrs	r2, r3, #5
   1405c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
   14060:	f003 011f 	and.w	r1, r3, #31
   14064:	40ca      	lsrs	r2, r1
   14066:	291f      	cmp	r1, #31
   14068:	bf18      	it	ne
   1406a:	f002 0201 	andne.w	r2, r2, #1
   1406e:	2b00      	cmp	r3, #0
   14070:	d0ee      	beq.n	14050 <getTrngSource+0x358>
   14072:	42a2      	cmp	r2, r4
   14074:	d1ec      	bne.n	14050 <getTrngSource+0x358>
   14076:	3001      	adds	r0, #1
   14078:	4286      	cmp	r6, r0
   1407a:	d1ea      	bne.n	14052 <getTrngSource+0x35a>
   1407c:	4849      	ldr	r0, [pc, #292]	; (141a4 <getTrngSource+0x4ac>)
   1407e:	e00b      	b.n	14098 <getTrngSource+0x3a0>
   14080:	2302      	movs	r3, #2
   14082:	9301      	str	r3, [sp, #4]
   14084:	e6d1      	b.n	13e2a <getTrngSource+0x132>
   14086:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1408a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
   1408e:	69aa      	ldr	r2, [r5, #24]
   14090:	f7ff fdf4 	bl	13c7c <LLF_RND_AdaptiveProportionTest>
   14094:	2800      	cmp	r0, #0
   14096:	d05d      	beq.n	14154 <getTrngSource+0x45c>
   14098:	2300      	movs	r3, #0
   1409a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1409c:	6013      	str	r3, [r2, #0]
   1409e:	e6a3      	b.n	13de8 <getTrngSource+0xf0>
   140a0:	4629      	mov	r1, r5
   140a2:	9806      	ldr	r0, [sp, #24]
   140a4:	f000 f8e2 	bl	1426c <LLF_RND_GetRoscSampleCnt>
   140a8:	2800      	cmp	r0, #0
   140aa:	f47f ae7c 	bne.w	13da6 <getTrngSource+0xae>
   140ae:	9c06      	ldr	r4, [sp, #24]
   140b0:	2c08      	cmp	r4, #8
   140b2:	d051      	beq.n	14158 <getTrngSource+0x460>
   140b4:	2c04      	cmp	r4, #4
   140b6:	d051      	beq.n	1415c <getTrngSource+0x464>
   140b8:	f1a4 0402 	sub.w	r4, r4, #2
   140bc:	fab4 f484 	clz	r4, r4
   140c0:	0964      	lsrs	r4, r4, #5
   140c2:	2301      	movs	r3, #1
   140c4:	461e      	mov	r6, r3
   140c6:	4619      	mov	r1, r3
   140c8:	4a2d      	ldr	r2, [pc, #180]	; (14180 <getTrngSource+0x488>)
   140ca:	6013      	str	r3, [r2, #0]
   140cc:	f842 3c84 	str.w	r3, [r2, #-132]
   140d0:	4b2b      	ldr	r3, [pc, #172]	; (14180 <getTrngSource+0x488>)
   140d2:	6019      	str	r1, [r3, #0]
   140d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   140d6:	f8c9 3000 	str.w	r3, [r9]
   140da:	f8d9 2000 	ldr.w	r2, [r9]
   140de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   140e0:	429a      	cmp	r2, r3
   140e2:	d1f5      	bne.n	140d0 <getTrngSource+0x3d8>
   140e4:	2700      	movs	r7, #0
   140e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   140ea:	f8ca 7000 	str.w	r7, [sl]
   140ee:	f7ff faef 	bl	136d0 <CC_HalClearInterruptBit>
   140f2:	4b26      	ldr	r3, [pc, #152]	; (1418c <getTrngSource+0x494>)
   140f4:	4a26      	ldr	r2, [pc, #152]	; (14190 <getTrngSource+0x498>)
   140f6:	4638      	mov	r0, r7
   140f8:	601a      	str	r2, [r3, #0]
   140fa:	f7ff faf7 	bl	136ec <CC_HalMaskInterrupt>
   140fe:	220a      	movs	r2, #10
   14100:	4924      	ldr	r1, [pc, #144]	; (14194 <getTrngSource+0x49c>)
   14102:	4b25      	ldr	r3, [pc, #148]	; (14198 <getTrngSource+0x4a0>)
   14104:	600c      	str	r4, [r1, #0]
   14106:	601a      	str	r2, [r3, #0]
   14108:	692a      	ldr	r2, [r5, #16]
   1410a:	4924      	ldr	r1, [pc, #144]	; (1419c <getTrngSource+0x4a4>)
   1410c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1410e:	fba1 1202 	umull	r1, r2, r1, r2
   14112:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14116:	0912      	lsrs	r2, r2, #4
   14118:	03db      	lsls	r3, r3, #15
   1411a:	fb03 f302 	mul.w	r3, r3, r2
   1411e:	4a20      	ldr	r2, [pc, #128]	; (141a0 <getTrngSource+0x4a8>)
   14120:	099b      	lsrs	r3, r3, #6
   14122:	6013      	str	r3, [r2, #0]
   14124:	f8ca 6000 	str.w	r6, [sl]
   14128:	9b06      	ldr	r3, [sp, #24]
   1412a:	f8db 1000 	ldr.w	r1, [fp]
   1412e:	021a      	lsls	r2, r3, #8
   14130:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
   14134:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
   14138:	431a      	orrs	r2, r3
   1413a:	0a13      	lsrs	r3, r2, #8
   1413c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   14140:	4313      	orrs	r3, r2
   14142:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   14146:	f8cb 3000 	str.w	r3, [fp]
   1414a:	9b02      	ldr	r3, [sp, #8]
   1414c:	3b01      	subs	r3, #1
   1414e:	9302      	str	r3, [sp, #8]
   14150:	f47f ae07 	bne.w	13d62 <getTrngSource+0x6a>
   14154:	2000      	movs	r0, #0
   14156:	e629      	b.n	13dac <getTrngSource+0xb4>
   14158:	2403      	movs	r4, #3
   1415a:	e7b2      	b.n	140c2 <getTrngSource+0x3ca>
   1415c:	2402      	movs	r4, #2
   1415e:	e7b0      	b.n	140c2 <getTrngSource+0x3ca>
   14160:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   14164:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   14168:	3101      	adds	r1, #1
   1416a:	d006      	beq.n	1417a <getTrngSource+0x482>
   1416c:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   14170:	e745      	b.n	13ffe <getTrngSource+0x306>
   14172:	2703      	movs	r7, #3
   14174:	e71a      	b.n	13fac <getTrngSource+0x2b4>
   14176:	2702      	movs	r7, #2
   14178:	e718      	b.n	13fac <getTrngSource+0x2b4>
   1417a:	2316      	movs	r3, #22
   1417c:	e743      	b.n	14006 <getTrngSource+0x30e>
   1417e:	bf00      	nop
   14180:	508411c4 	.word	0x508411c4
   14184:	50841140 	.word	0x50841140
   14188:	5084112c 	.word	0x5084112c
   1418c:	50841100 	.word	0x50841100
   14190:	0ffffffe 	.word	0x0ffffffe
   14194:	5084110c 	.word	0x5084110c
   14198:	50841138 	.word	0x50841138
   1419c:	aaaaaaab 	.word	0xaaaaaaab
   141a0:	508411d8 	.word	0x508411d8
   141a4:	00f10c36 	.word	0x00f10c36

000141a8 <LLF_RND_GetTrngSource>:
   141a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   141ac:	4c1b      	ldr	r4, [pc, #108]	; (1421c <LLF_RND_GetTrngSource+0x74>)
   141ae:	b085      	sub	sp, #20
   141b0:	4607      	mov	r7, r0
   141b2:	e9dd 560d 	ldrd	r5, r6, [sp, #52]	; 0x34
   141b6:	4688      	mov	r8, r1
   141b8:	6820      	ldr	r0, [r4, #0]
   141ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   141be:	4691      	mov	r9, r2
   141c0:	f7ff fa10 	bl	135e4 <CC_PalMutexLock>
   141c4:	bb28      	cbnz	r0, 14212 <LLF_RND_GetTrngSource+0x6a>
   141c6:	2000      	movs	r0, #0
   141c8:	f7ff fa3c 	bl	13644 <CC_PalPowerSaveModeSelect>
   141cc:	b9e8      	cbnz	r0, 1420a <LLF_RND_GetTrngSource+0x62>
   141ce:	2300      	movs	r3, #0
   141d0:	e9cd 5600 	strd	r5, r6, [sp]
   141d4:	9302      	str	r3, [sp, #8]
   141d6:	464a      	mov	r2, r9
   141d8:	4641      	mov	r1, r8
   141da:	4638      	mov	r0, r7
   141dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   141de:	f7ff fd8b 	bl	13cf8 <getTrngSource>
   141e2:	4605      	mov	r5, r0
   141e4:	2001      	movs	r0, #1
   141e6:	f7ff fa2d 	bl	13644 <CC_PalPowerSaveModeSelect>
   141ea:	b950      	cbnz	r0, 14202 <LLF_RND_GetTrngSource+0x5a>
   141ec:	6820      	ldr	r0, [r4, #0]
   141ee:	f7ff fa01 	bl	135f4 <CC_PalMutexUnlock>
   141f2:	b110      	cbz	r0, 141fa <LLF_RND_GetTrngSource+0x52>
   141f4:	480a      	ldr	r0, [pc, #40]	; (14220 <LLF_RND_GetTrngSource+0x78>)
   141f6:	f7ff fb8d 	bl	13914 <CC_PalAbort>
   141fa:	4628      	mov	r0, r5
   141fc:	b005      	add	sp, #20
   141fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14202:	4808      	ldr	r0, [pc, #32]	; (14224 <LLF_RND_GetTrngSource+0x7c>)
   14204:	f7ff fb86 	bl	13914 <CC_PalAbort>
   14208:	e7f0      	b.n	141ec <LLF_RND_GetTrngSource+0x44>
   1420a:	4807      	ldr	r0, [pc, #28]	; (14228 <LLF_RND_GetTrngSource+0x80>)
   1420c:	f7ff fb82 	bl	13914 <CC_PalAbort>
   14210:	e7dd      	b.n	141ce <LLF_RND_GetTrngSource+0x26>
   14212:	4806      	ldr	r0, [pc, #24]	; (1422c <LLF_RND_GetTrngSource+0x84>)
   14214:	f7ff fb7e 	bl	13914 <CC_PalAbort>
   14218:	e7d5      	b.n	141c6 <LLF_RND_GetTrngSource+0x1e>
   1421a:	bf00      	nop
   1421c:	2000006c 	.word	0x2000006c
   14220:	000154c4 	.word	0x000154c4
   14224:	000154fc 	.word	0x000154fc
   14228:	000154dc 	.word	0x000154dc
   1422c:	000154ac 	.word	0x000154ac

00014230 <LLF_RND_RunTrngStartupTest>:
   14230:	b510      	push	{r4, lr}
   14232:	2401      	movs	r4, #1
   14234:	b086      	sub	sp, #24
   14236:	ab05      	add	r3, sp, #20
   14238:	e9cd 2401 	strd	r2, r4, [sp, #4]
   1423c:	9300      	str	r3, [sp, #0]
   1423e:	2200      	movs	r2, #0
   14240:	ab04      	add	r3, sp, #16
   14242:	f7ff fd59 	bl	13cf8 <getTrngSource>
   14246:	b006      	add	sp, #24
   14248:	bd10      	pop	{r4, pc}
   1424a:	bf00      	nop

0001424c <LLF_RND_WaitRngInterrupt>:
   1424c:	b508      	push	{r3, lr}
   1424e:	4601      	mov	r1, r0
   14250:	f44f 6080 	mov.w	r0, #1024	; 0x400
   14254:	f7ff fa50 	bl	136f8 <CC_HalWaitInterruptRND>
   14258:	2300      	movs	r3, #0
   1425a:	4902      	ldr	r1, [pc, #8]	; (14264 <LLF_RND_WaitRngInterrupt+0x18>)
   1425c:	4a02      	ldr	r2, [pc, #8]	; (14268 <LLF_RND_WaitRngInterrupt+0x1c>)
   1425e:	600b      	str	r3, [r1, #0]
   14260:	6013      	str	r3, [r2, #0]
   14262:	bd08      	pop	{r3, pc}
   14264:	508411c8 	.word	0x508411c8
   14268:	5084112c 	.word	0x5084112c

0001426c <LLF_RND_GetRoscSampleCnt>:
   1426c:	3801      	subs	r0, #1
   1426e:	2807      	cmp	r0, #7
   14270:	d815      	bhi.n	1429e <LLF_RND_GetRoscSampleCnt+0x32>
   14272:	e8df f000 	tbb	[pc, r0]
   14276:	0c10      	.short	0x0c10
   14278:	14140814 	.word	0x14140814
   1427c:	0414      	.short	0x0414
   1427e:	68cb      	ldr	r3, [r1, #12]
   14280:	2000      	movs	r0, #0
   14282:	624b      	str	r3, [r1, #36]	; 0x24
   14284:	4770      	bx	lr
   14286:	688b      	ldr	r3, [r1, #8]
   14288:	2000      	movs	r0, #0
   1428a:	624b      	str	r3, [r1, #36]	; 0x24
   1428c:	4770      	bx	lr
   1428e:	684b      	ldr	r3, [r1, #4]
   14290:	2000      	movs	r0, #0
   14292:	624b      	str	r3, [r1, #36]	; 0x24
   14294:	4770      	bx	lr
   14296:	680b      	ldr	r3, [r1, #0]
   14298:	2000      	movs	r0, #0
   1429a:	624b      	str	r3, [r1, #36]	; 0x24
   1429c:	4770      	bx	lr
   1429e:	4801      	ldr	r0, [pc, #4]	; (142a4 <LLF_RND_GetRoscSampleCnt+0x38>)
   142a0:	4770      	bx	lr
   142a2:	bf00      	nop
   142a4:	00f10c31 	.word	0x00f10c31

000142a8 <LLF_RND_GetFastestRosc>:
   142a8:	680b      	ldr	r3, [r1, #0]
   142aa:	e002      	b.n	142b2 <LLF_RND_GetFastestRosc+0xa>
   142ac:	2b08      	cmp	r3, #8
   142ae:	600b      	str	r3, [r1, #0]
   142b0:	d806      	bhi.n	142c0 <LLF_RND_GetFastestRosc+0x18>
   142b2:	6a02      	ldr	r2, [r0, #32]
   142b4:	4213      	tst	r3, r2
   142b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
   142ba:	d0f7      	beq.n	142ac <LLF_RND_GetFastestRosc+0x4>
   142bc:	2000      	movs	r0, #0
   142be:	4770      	bx	lr
   142c0:	4800      	ldr	r0, [pc, #0]	; (142c4 <LLF_RND_GetFastestRosc+0x1c>)
   142c2:	4770      	bx	lr
   142c4:	00f10c31 	.word	0x00f10c31

000142c8 <LLF_RND_TurnOffTrng>:
   142c8:	2300      	movs	r3, #0
   142ca:	4904      	ldr	r1, [pc, #16]	; (142dc <LLF_RND_TurnOffTrng+0x14>)
   142cc:	4a04      	ldr	r2, [pc, #16]	; (142e0 <LLF_RND_TurnOffTrng+0x18>)
   142ce:	600b      	str	r3, [r1, #0]
   142d0:	f44f 6080 	mov.w	r0, #1024	; 0x400
   142d4:	6013      	str	r3, [r2, #0]
   142d6:	f7ff b9fb 	b.w	136d0 <CC_HalClearInterruptBit>
   142da:	bf00      	nop
   142dc:	5084112c 	.word	0x5084112c
   142e0:	508411c4 	.word	0x508411c4

000142e4 <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
   142e4:	b508      	push	{r3, lr}
	spm_config();
   142e6:	f7fc ff4b 	bl	11180 <spm_config>
	spm_jump();
}
   142ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
   142ee:	f7fc bedb 	b.w	110a8 <spm_jump>

000142f2 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   142f2:	b160      	cbz	r0, 1430e <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   142f4:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   142f6:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   142fa:	2b01      	cmp	r3, #1
   142fc:	d003      	beq.n	14306 <sys_notify_validate+0x14>
   142fe:	2b03      	cmp	r3, #3
   14300:	d105      	bne.n	1430e <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   14302:	6803      	ldr	r3, [r0, #0]
   14304:	b11b      	cbz	r3, 1430e <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   14306:	2300      	movs	r3, #0
   14308:	6083      	str	r3, [r0, #8]
   1430a:	4618      	mov	r0, r3
   1430c:	4770      	bx	lr
		return -EINVAL;
   1430e:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   14312:	4770      	bx	lr

00014314 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   14314:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   14316:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
   14318:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1431c:	2a03      	cmp	r2, #3
   1431e:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
   14322:	6081      	str	r1, [r0, #8]
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   14324:	bf0c      	ite	eq
   14326:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   14328:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1432a:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1432c:	4770      	bx	lr

0001432e <arch_printk_char_out>:
}
   1432e:	2000      	movs	r0, #0
   14330:	4770      	bx	lr

00014332 <z_vprintk>:
{
   14332:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   14336:	2500      	movs	r5, #0
{
   14338:	4606      	mov	r6, r0
   1433a:	460f      	mov	r7, r1
   1433c:	461c      	mov	r4, r3
	int min_width = -1;
   1433e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   14342:	46a8      	mov	r8, r5
{
   14344:	b087      	sub	sp, #28
   14346:	f102 3bff 	add.w	fp, r2, #4294967295	; 0xffffffff
			might_format = 0;
   1434a:	f04f 0a00 	mov.w	sl, #0
					break;
   1434e:	e007      	b.n	14360 <z_vprintk+0x2e>
		if (!might_format) {
   14350:	f1ba 0f00 	cmp.w	sl, #0
   14354:	d10b      	bne.n	1436e <z_vprintk+0x3c>
			if (*fmt != '%') {
   14356:	2825      	cmp	r0, #37	; 0x25
   14358:	f000 80f0 	beq.w	1453c <z_vprintk+0x20a>
				out((int)*fmt, ctx);
   1435c:	4639      	mov	r1, r7
   1435e:	47b0      	blx	r6
	while (*fmt) {
   14360:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
   14364:	2800      	cmp	r0, #0
   14366:	d1f3      	bne.n	14350 <z_vprintk+0x1e>
}
   14368:	b007      	add	sp, #28
   1436a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   1436e:	2864      	cmp	r0, #100	; 0x64
   14370:	d06c      	beq.n	1444c <z_vprintk+0x11a>
   14372:	d81a      	bhi.n	143aa <z_vprintk+0x78>
   14374:	2839      	cmp	r0, #57	; 0x39
   14376:	d80a      	bhi.n	1438e <z_vprintk+0x5c>
   14378:	2831      	cmp	r0, #49	; 0x31
   1437a:	d25e      	bcs.n	1443a <z_vprintk+0x108>
   1437c:	282d      	cmp	r0, #45	; 0x2d
   1437e:	f000 80e4 	beq.w	1454a <z_vprintk+0x218>
   14382:	2830      	cmp	r0, #48	; 0x30
   14384:	d04a      	beq.n	1441c <z_vprintk+0xea>
   14386:	2825      	cmp	r0, #37	; 0x25
   14388:	d107      	bne.n	1439a <z_vprintk+0x68>
				out((int)'%', ctx);
   1438a:	4639      	mov	r1, r7
   1438c:	e00b      	b.n	143a6 <z_vprintk+0x74>
			switch (*fmt) {
   1438e:	2858      	cmp	r0, #88	; 0x58
   14390:	f000 80a5 	beq.w	144de <z_vprintk+0x1ac>
   14394:	2863      	cmp	r0, #99	; 0x63
   14396:	f000 80cd 	beq.w	14534 <z_vprintk+0x202>
					out((int)'%', ctx);
   1439a:	4639      	mov	r1, r7
   1439c:	2025      	movs	r0, #37	; 0x25
   1439e:	47b0      	blx	r6
					out((int)*fmt, ctx);
   143a0:	4639      	mov	r1, r7
   143a2:	f89b 0000 	ldrb.w	r0, [fp]
   143a6:	47b0      	blx	r6
   143a8:	e7cf      	b.n	1434a <z_vprintk+0x18>
			switch (*fmt) {
   143aa:	2870      	cmp	r0, #112	; 0x70
   143ac:	f000 808d 	beq.w	144ca <z_vprintk+0x198>
   143b0:	d80d      	bhi.n	143ce <z_vprintk+0x9c>
   143b2:	2869      	cmp	r0, #105	; 0x69
   143b4:	d04a      	beq.n	1444c <z_vprintk+0x11a>
   143b6:	286c      	cmp	r0, #108	; 0x6c
   143b8:	d103      	bne.n	143c2 <z_vprintk+0x90>
				} else if (*fmt == 'l' && length_mod == 'l') {
   143ba:	2d6c      	cmp	r5, #108	; 0x6c
   143bc:	d12a      	bne.n	14414 <z_vprintk+0xe2>
					length_mod = 'L';
   143be:	254c      	movs	r5, #76	; 0x4c
   143c0:	e7ce      	b.n	14360 <z_vprintk+0x2e>
			switch (*fmt) {
   143c2:	2868      	cmp	r0, #104	; 0x68
   143c4:	d1e9      	bne.n	1439a <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   143c6:	2d68      	cmp	r5, #104	; 0x68
   143c8:	d124      	bne.n	14414 <z_vprintk+0xe2>
					length_mod = 'H';
   143ca:	2548      	movs	r5, #72	; 0x48
   143cc:	e7c8      	b.n	14360 <z_vprintk+0x2e>
			switch (*fmt) {
   143ce:	2875      	cmp	r0, #117	; 0x75
   143d0:	d03c      	beq.n	1444c <z_vprintk+0x11a>
   143d2:	d81b      	bhi.n	1440c <z_vprintk+0xda>
   143d4:	2873      	cmp	r0, #115	; 0x73
   143d6:	d1e0      	bne.n	1439a <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   143d8:	f854 3b04 	ldr.w	r3, [r4], #4
				while (*s) {
   143dc:	469a      	mov	sl, r3
   143de:	4652      	mov	r2, sl
   143e0:	f81a 0b01 	ldrb.w	r0, [sl], #1
   143e4:	2800      	cmp	r0, #0
   143e6:	f040 80a0 	bne.w	1452a <z_vprintk+0x1f8>
				if (padding == PAD_SPACE_AFTER) {
   143ea:	f1b8 0f03 	cmp.w	r8, #3
   143ee:	f040 80b2 	bne.w	14556 <z_vprintk+0x224>
					int remaining = min_width - (s - start);
   143f2:	eba2 0a03 	sub.w	sl, r2, r3
   143f6:	eba9 0a0a 	sub.w	sl, r9, sl
					while (remaining-- > 0) {
   143fa:	f1ba 0f00 	cmp.w	sl, #0
   143fe:	dda4      	ble.n	1434a <z_vprintk+0x18>
						out(' ', ctx);
   14400:	4639      	mov	r1, r7
   14402:	2020      	movs	r0, #32
   14404:	47b0      	blx	r6
   14406:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1440a:	e7f6      	b.n	143fa <z_vprintk+0xc8>
			switch (*fmt) {
   1440c:	2878      	cmp	r0, #120	; 0x78
   1440e:	d066      	beq.n	144de <z_vprintk+0x1ac>
   14410:	287a      	cmp	r0, #122	; 0x7a
   14412:	d1c2      	bne.n	1439a <z_vprintk+0x68>
				} else if (length_mod == 0) {
   14414:	2d00      	cmp	r5, #0
   14416:	d1c0      	bne.n	1439a <z_vprintk+0x68>
   14418:	4605      	mov	r5, r0
   1441a:	e7a1      	b.n	14360 <z_vprintk+0x2e>
				if (min_width < 0 && padding == PAD_NONE) {
   1441c:	f1b9 0f00 	cmp.w	r9, #0
   14420:	da0e      	bge.n	14440 <z_vprintk+0x10e>
   14422:	f1b8 0f00 	cmp.w	r8, #0
   14426:	f000 8093 	beq.w	14550 <z_vprintk+0x21e>
					min_width = *fmt - '0';
   1442a:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   1442e:	f1b8 0f00 	cmp.w	r8, #0
   14432:	bf08      	it	eq
   14434:	f04f 0802 	moveq.w	r8, #2
   14438:	e792      	b.n	14360 <z_vprintk+0x2e>
				if (min_width < 0) {
   1443a:	f1b9 0f00 	cmp.w	r9, #0
   1443e:	dbf4      	blt.n	1442a <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
   14440:	230a      	movs	r3, #10
   14442:	fb03 0909 	mla	r9, r3, r9, r0
   14446:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   1444a:	e7f0      	b.n	1442e <z_vprintk+0xfc>
				if (length_mod == 'z') {
   1444c:	2d7a      	cmp	r5, #122	; 0x7a
   1444e:	d106      	bne.n	1445e <z_vprintk+0x12c>
					d = va_arg(ap, long);
   14450:	46a2      	mov	sl, r4
   14452:	f85a 2b04 	ldr.w	r2, [sl], #4
   14456:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
   14458:	2875      	cmp	r0, #117	; 0x75
   1445a:	d125      	bne.n	144a8 <z_vprintk+0x176>
   1445c:	e00f      	b.n	1447e <z_vprintk+0x14c>
				} else if (length_mod == 'l') {
   1445e:	2d6c      	cmp	r5, #108	; 0x6c
   14460:	d0f6      	beq.n	14450 <z_vprintk+0x11e>
				} else if (length_mod == 'L') {
   14462:	2d4c      	cmp	r5, #76	; 0x4c
   14464:	d105      	bne.n	14472 <z_vprintk+0x140>
					long long lld = va_arg(ap, long long);
   14466:	3407      	adds	r4, #7
   14468:	f024 0a07 	bic.w	sl, r4, #7
					d = (printk_val_t) lld;
   1446c:	e8fa 2302 	ldrd	r2, r3, [sl], #8
   14470:	e7f2      	b.n	14458 <z_vprintk+0x126>
				} else if (*fmt == 'u') {
   14472:	2875      	cmp	r0, #117	; 0x75
   14474:	f104 0a04 	add.w	sl, r4, #4
					d = va_arg(ap, unsigned int);
   14478:	6822      	ldr	r2, [r4, #0]
				} else if (*fmt == 'u') {
   1447a:	d114      	bne.n	144a6 <z_vprintk+0x174>
					d = va_arg(ap, unsigned int);
   1447c:	2300      	movs	r3, #0
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
   1447e:	f1b8 0103 	subs.w	r1, r8, #3
   14482:	bf18      	it	ne
   14484:	2101      	movne	r1, #1
   14486:	f1b8 0f01 	cmp.w	r8, #1
   1448a:	bf0c      	ite	eq
   1448c:	2030      	moveq	r0, #48	; 0x30
   1448e:	2020      	movne	r0, #32
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   14490:	9101      	str	r1, [sp, #4]
   14492:	210a      	movs	r1, #10
   14494:	e9cd 0902 	strd	r0, r9, [sp, #8]
   14498:	9100      	str	r1, [sp, #0]
   1449a:	4630      	mov	r0, r6
   1449c:	4639      	mov	r1, r7
   1449e:	f7fc f981 	bl	107a4 <print_digits.part.0>
   144a2:	4654      	mov	r4, sl
   144a4:	e751      	b.n	1434a <z_vprintk+0x18>
					d = va_arg(ap, int);
   144a6:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
   144a8:	2a00      	cmp	r2, #0
   144aa:	f173 0100 	sbcs.w	r1, r3, #0
   144ae:	dae6      	bge.n	1447e <z_vprintk+0x14c>
					out((int)'-', ctx);
   144b0:	4639      	mov	r1, r7
   144b2:	202d      	movs	r0, #45	; 0x2d
   144b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   144b8:	47b0      	blx	r6
					d = -d;
   144ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   144be:	4252      	negs	r2, r2
   144c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
   144c4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   144c8:	e7d9      	b.n	1447e <z_vprintk+0x14c>
				out('0', ctx);
   144ca:	4639      	mov	r1, r7
   144cc:	2030      	movs	r0, #48	; 0x30
   144ce:	47b0      	blx	r6
				out('x', ctx);
   144d0:	4639      	mov	r1, r7
   144d2:	2078      	movs	r0, #120	; 0x78
   144d4:	47b0      	blx	r6
				min_width = sizeof(void *) * 2;
   144d6:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
   144da:	f04f 0801 	mov.w	r8, #1
				if (*fmt == 'p') {
   144de:	f89b 3000 	ldrb.w	r3, [fp]
   144e2:	2b70      	cmp	r3, #112	; 0x70
   144e4:	d103      	bne.n	144ee <z_vprintk+0x1bc>
					x = va_arg(ap, unsigned int);
   144e6:	f854 2b04 	ldr.w	r2, [r4], #4
   144ea:	2300      	movs	r3, #0
   144ec:	e00a      	b.n	14504 <z_vprintk+0x1d2>
				} else if (length_mod == 'l') {
   144ee:	2d6c      	cmp	r5, #108	; 0x6c
   144f0:	d0f9      	beq.n	144e6 <z_vprintk+0x1b4>
				} else if (length_mod == 'L') {
   144f2:	2d4c      	cmp	r5, #76	; 0x4c
   144f4:	d1f7      	bne.n	144e6 <z_vprintk+0x1b4>
					x = va_arg(ap, unsigned long long);
   144f6:	3407      	adds	r4, #7
   144f8:	f024 0307 	bic.w	r3, r4, #7
   144fc:	461c      	mov	r4, r3
   144fe:	685b      	ldr	r3, [r3, #4]
   14500:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
   14504:	f1b8 0103 	subs.w	r1, r8, #3
   14508:	bf18      	it	ne
   1450a:	2101      	movne	r1, #1
   1450c:	f1b8 0f01 	cmp.w	r8, #1
   14510:	bf0c      	ite	eq
   14512:	2030      	moveq	r0, #48	; 0x30
   14514:	2020      	movne	r0, #32
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   14516:	9101      	str	r1, [sp, #4]
   14518:	2110      	movs	r1, #16
   1451a:	e9cd 0902 	strd	r0, r9, [sp, #8]
   1451e:	9100      	str	r1, [sp, #0]
   14520:	4630      	mov	r0, r6
   14522:	4639      	mov	r1, r7
   14524:	f7fc f93e 	bl	107a4 <print_digits.part.0>
   14528:	e70f      	b.n	1434a <z_vprintk+0x18>
					out((int)(*s++), ctx);
   1452a:	4639      	mov	r1, r7
   1452c:	9304      	str	r3, [sp, #16]
   1452e:	47b0      	blx	r6
   14530:	9b04      	ldr	r3, [sp, #16]
   14532:	e754      	b.n	143de <z_vprintk+0xac>
				out(c, ctx);
   14534:	4639      	mov	r1, r7
   14536:	f854 0b04 	ldr.w	r0, [r4], #4
   1453a:	e734      	b.n	143a6 <z_vprintk+0x74>
				length_mod = 0;
   1453c:	4655      	mov	r5, sl
				padding = PAD_NONE;
   1453e:	46d0      	mov	r8, sl
				min_width = -1;
   14540:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
   14544:	f04f 0a01 	mov.w	sl, #1
   14548:	e70a      	b.n	14360 <z_vprintk+0x2e>
				padding = PAD_SPACE_AFTER;
   1454a:	f04f 0803 	mov.w	r8, #3
   1454e:	e707      	b.n	14360 <z_vprintk+0x2e>
					padding = PAD_ZERO_BEFORE;
   14550:	f04f 0801 	mov.w	r8, #1
   14554:	e704      	b.n	14360 <z_vprintk+0x2e>
			might_format = 0;
   14556:	4682      	mov	sl, r0
   14558:	e702      	b.n	14360 <z_vprintk+0x2e>

0001455a <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
   1455a:	b40f      	push	{r0, r1, r2, r3}
   1455c:	b507      	push	{r0, r1, r2, lr}
   1455e:	a904      	add	r1, sp, #16
   14560:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   14564:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
   14566:	f7fc f96d 	bl	10844 <vprintk>
	}
	va_end(ap);
}
   1456a:	b003      	add	sp, #12
   1456c:	f85d eb04 	ldr.w	lr, [sp], #4
   14570:	b004      	add	sp, #16
   14572:	4770      	bx	lr

00014574 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   14574:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   14576:	f013 0307 	ands.w	r3, r3, #7
   1457a:	d105      	bne.n	14588 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1457c:	6803      	ldr	r3, [r0, #0]
   1457e:	2b00      	cmp	r3, #0
		evt = EVT_START;
   14580:	bf0c      	ite	eq
   14582:	2000      	moveq	r0, #0
   14584:	2003      	movne	r0, #3
   14586:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   14588:	2b02      	cmp	r3, #2
   1458a:	d105      	bne.n	14598 <process_recheck+0x24>
		   && (mgr->refs == 0)) {
   1458c:	8b43      	ldrh	r3, [r0, #26]
   1458e:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   14590:	bf14      	ite	ne
   14592:	2000      	movne	r0, #0
   14594:	2004      	moveq	r0, #4
   14596:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   14598:	2b01      	cmp	r3, #1
   1459a:	d105      	bne.n	145a8 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1459c:	6803      	ldr	r3, [r0, #0]
   1459e:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   145a0:	bf0c      	ite	eq
   145a2:	2000      	moveq	r0, #0
   145a4:	2005      	movne	r0, #5
   145a6:	4770      	bx	lr
	int evt = EVT_NOP;
   145a8:	2000      	movs	r0, #0
}
   145aa:	4770      	bx	lr

000145ac <notify_one>:
{
   145ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   145b0:	460d      	mov	r5, r1
   145b2:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   145b4:	4619      	mov	r1, r3
   145b6:	1d28      	adds	r0, r5, #4
{
   145b8:	4690      	mov	r8, r2
   145ba:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   145bc:	f7ff feaa 	bl	14314 <sys_notify_finalize>
	if (cb) {
   145c0:	4604      	mov	r4, r0
   145c2:	b138      	cbz	r0, 145d4 <notify_one+0x28>
		cb(mgr, cli, state, res);
   145c4:	4633      	mov	r3, r6
   145c6:	4642      	mov	r2, r8
   145c8:	4629      	mov	r1, r5
   145ca:	4638      	mov	r0, r7
   145cc:	46a4      	mov	ip, r4
}
   145ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   145d2:	4760      	bx	ip
}
   145d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000145d8 <transition_complete>:
{
   145d8:	b410      	push	{r4}
	__asm__ volatile(
   145da:	f04f 0420 	mov.w	r4, #32
   145de:	f3ef 8211 	mrs	r2, BASEPRI
   145e2:	f384 8811 	msr	BASEPRI, r4
   145e6:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   145ea:	6141      	str	r1, [r0, #20]
}
   145ec:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
   145f0:	2101      	movs	r1, #1
   145f2:	f7fc b935 	b.w	10860 <process_event>

000145f6 <validate_args>:
{
   145f6:	b510      	push	{r4, lr}
   145f8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   145fa:	b140      	cbz	r0, 1460e <validate_args+0x18>
   145fc:	b139      	cbz	r1, 1460e <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   145fe:	1d08      	adds	r0, r1, #4
   14600:	f7ff fe77 	bl	142f2 <sys_notify_validate>
	if ((rv == 0)
   14604:	b928      	cbnz	r0, 14612 <validate_args+0x1c>
	    && ((cli->notify.flags
   14606:	68a3      	ldr	r3, [r4, #8]
   14608:	f033 0303 	bics.w	r3, r3, #3
   1460c:	d001      	beq.n	14612 <validate_args+0x1c>
		rv = -EINVAL;
   1460e:	f06f 0015 	mvn.w	r0, #21
}
   14612:	bd10      	pop	{r4, pc}

00014614 <onoff_manager_init>:
{
   14614:	b538      	push	{r3, r4, r5, lr}
   14616:	460c      	mov	r4, r1
	if ((mgr == NULL)
   14618:	4605      	mov	r5, r0
   1461a:	b158      	cbz	r0, 14634 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1461c:	b151      	cbz	r1, 14634 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1461e:	680b      	ldr	r3, [r1, #0]
   14620:	b143      	cbz	r3, 14634 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   14622:	684b      	ldr	r3, [r1, #4]
   14624:	b133      	cbz	r3, 14634 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   14626:	221c      	movs	r2, #28
   14628:	2100      	movs	r1, #0
   1462a:	f000 faeb 	bl	14c04 <memset>
	return 0;
   1462e:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   14630:	612c      	str	r4, [r5, #16]
}
   14632:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   14634:	f06f 0015 	mvn.w	r0, #21
   14638:	e7fb      	b.n	14632 <onoff_manager_init+0x1e>

0001463a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1463a:	b570      	push	{r4, r5, r6, lr}
   1463c:	4604      	mov	r4, r0
   1463e:	460d      	mov	r5, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   14640:	f7ff ffd9 	bl	145f6 <validate_args>

	if (rv < 0) {
   14644:	1e06      	subs	r6, r0, #0
   14646:	db31      	blt.n	146ac <onoff_request+0x72>
   14648:	f04f 0320 	mov.w	r3, #32
   1464c:	f3ef 8111 	mrs	r1, BASEPRI
   14650:	f383 8811 	msr	BASEPRI, r3
   14654:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   14658:	f64f 76ff 	movw	r6, #65535	; 0xffff
   1465c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1465e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   14660:	42b3      	cmp	r3, r6
   14662:	f000 0207 	and.w	r2, r0, #7
   14666:	d02e      	beq.n	146c6 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   14668:	2a02      	cmp	r2, #2
   1466a:	d10e      	bne.n	1468a <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1466c:	3301      	adds	r3, #1
   1466e:	8363      	strh	r3, [r4, #26]
	rv = state;
   14670:	4616      	mov	r6, r2
		notify = true;
   14672:	2301      	movs	r3, #1
	__asm__ volatile(
   14674:	f381 8811 	msr	BASEPRI, r1
   14678:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1467c:	b1b3      	cbz	r3, 146ac <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1467e:	2300      	movs	r3, #0
   14680:	4629      	mov	r1, r5
   14682:	4620      	mov	r0, r4
   14684:	f7ff ff92 	bl	145ac <notify_one>
   14688:	e010      	b.n	146ac <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1468a:	0783      	lsls	r3, r0, #30
   1468c:	d001      	beq.n	14692 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1468e:	2a06      	cmp	r2, #6
   14690:	d10e      	bne.n	146b0 <onoff_request+0x76>
	parent->next = child;
   14692:	2300      	movs	r3, #0
   14694:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   14696:	6863      	ldr	r3, [r4, #4]
   14698:	b993      	cbnz	r3, 146c0 <onoff_request+0x86>
	list->head = node;
   1469a:	e9c4 5500 	strd	r5, r5, [r4]
	if (start) {
   1469e:	4616      	mov	r6, r2
   146a0:	b962      	cbnz	r2, 146bc <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   146a2:	460a      	mov	r2, r1
   146a4:	4620      	mov	r0, r4
   146a6:	2102      	movs	r1, #2
   146a8:	f7fc f8da 	bl	10860 <process_event>
		}
	}

	return rv;
}
   146ac:	4630      	mov	r0, r6
   146ae:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   146b0:	2a05      	cmp	r2, #5
   146b2:	bf0c      	ite	eq
   146b4:	f06f 0622 	mvneq.w	r6, #34	; 0x22
   146b8:	f06f 0604 	mvnne.w	r6, #4
   146bc:	2300      	movs	r3, #0
   146be:	e7d9      	b.n	14674 <onoff_request+0x3a>
	parent->next = child;
   146c0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   146c2:	6065      	str	r5, [r4, #4]
   146c4:	e7eb      	b.n	1469e <onoff_request+0x64>
		rv = -EAGAIN;
   146c6:	f06f 060a 	mvn.w	r6, #10
   146ca:	e7f7      	b.n	146bc <onoff_request+0x82>

000146cc <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   146cc:	4604      	mov	r4, r0
   146ce:	b508      	push	{r3, lr}
   146d0:	4608      	mov	r0, r1
   146d2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   146d4:	461a      	mov	r2, r3
   146d6:	47a0      	blx	r4
	return z_impl_k_current_get();
   146d8:	f7fe fcd0 	bl	1307c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   146dc:	f7fd f9d8 	bl	11a90 <z_impl_k_thread_abort>

000146e0 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   146e0:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   146e2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   146e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   146ea:	bf2c      	ite	cs
   146ec:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   146f0:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   146f4:	4770      	bx	lr

000146f6 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   146f6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   146fa:	6880      	ldr	r0, [r0, #8]
   146fc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   14700:	bf2c      	ite	cs
   14702:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   14706:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1470a:	4770      	bx	lr

0001470c <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1470c:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1470e:	2201      	movs	r2, #1
   14710:	f7ff ffe6 	bl	146e0 <chunk_field>
}
   14714:	0840      	lsrs	r0, r0, #1
   14716:	bd08      	pop	{r3, pc}

00014718 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   14718:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1471a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1471e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   14722:	d308      	bcc.n	14736 <set_chunk_used+0x1e>
		if (used) {
   14724:	684b      	ldr	r3, [r1, #4]
   14726:	b11a      	cbz	r2, 14730 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
   14728:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
   1472c:	604b      	str	r3, [r1, #4]
   1472e:	4770      	bx	lr
   14730:	f023 0301 	bic.w	r3, r3, #1
   14734:	e7fa      	b.n	1472c <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   14736:	884b      	ldrh	r3, [r1, #2]
   14738:	b11a      	cbz	r2, 14742 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
   1473a:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   1473e:	804b      	strh	r3, [r1, #2]
		}
	}
}
   14740:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   14742:	f023 0301 	bic.w	r3, r3, #1
   14746:	e7fa      	b.n	1473e <set_chunk_used+0x26>

00014748 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   14748:	0053      	lsls	r3, r2, #1
   1474a:	2201      	movs	r2, #1
   1474c:	f7ff bfd3 	b.w	146f6 <chunk_set>

00014750 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   14750:	6883      	ldr	r3, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   14752:	1c48      	adds	r0, r1, #1
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   14754:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   14758:	bf2c      	ite	cs
   1475a:	2302      	movcs	r3, #2
   1475c:	2301      	movcc	r3, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1475e:	1ac0      	subs	r0, r0, r3
	return 31 - __builtin_clz(usable_sz);
   14760:	fab0 f080 	clz	r0, r0
}
   14764:	f1c0 001f 	rsb	r0, r0, #31
   14768:	4770      	bx	lr

0001476a <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1476a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1476e:	4604      	mov	r4, r0
   14770:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   14772:	f7ff ffcb 	bl	1470c <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   14776:	68a3      	ldr	r3, [r4, #8]
   14778:	4601      	mov	r1, r0
   1477a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1477e:	d301      	bcc.n	14784 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   14780:	2801      	cmp	r0, #1
   14782:	d035      	beq.n	147f0 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   14784:	4620      	mov	r0, r4
   14786:	f7ff ffe3 	bl	14750 <bucket_idx>
	if (b->next == 0) {
   1478a:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1478e:	6916      	ldr	r6, [r2, #16]
   14790:	b99e      	cbnz	r6, 147ba <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   14792:	2301      	movs	r3, #1
   14794:	fa03 f000 	lsl.w	r0, r3, r0
   14798:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1479a:	4629      	mov	r1, r5
   1479c:	4303      	orrs	r3, r0
   1479e:	60e3      	str	r3, [r4, #12]
   147a0:	4620      	mov	r0, r4
		b->next = c;
   147a2:	6115      	str	r5, [r2, #16]
   147a4:	462b      	mov	r3, r5
   147a6:	2202      	movs	r2, #2
   147a8:	f7ff ffa5 	bl	146f6 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   147ac:	2203      	movs	r2, #3
   147ae:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   147b0:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
   147b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   147b6:	f7ff bf9e 	b.w	146f6 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   147ba:	2202      	movs	r2, #2
   147bc:	4631      	mov	r1, r6
   147be:	4620      	mov	r0, r4
   147c0:	f7ff ff8e 	bl	146e0 <chunk_field>
   147c4:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   147c6:	4603      	mov	r3, r0
   147c8:	2202      	movs	r2, #2
   147ca:	4629      	mov	r1, r5
   147cc:	4620      	mov	r0, r4
   147ce:	f7ff ff92 	bl	146f6 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   147d2:	4633      	mov	r3, r6
   147d4:	2203      	movs	r2, #3
   147d6:	4629      	mov	r1, r5
   147d8:	4620      	mov	r0, r4
   147da:	f7ff ff8c 	bl	146f6 <chunk_set>
   147de:	2203      	movs	r2, #3
   147e0:	4639      	mov	r1, r7
   147e2:	462b      	mov	r3, r5
   147e4:	4620      	mov	r0, r4
   147e6:	f7ff ff86 	bl	146f6 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   147ea:	2202      	movs	r2, #2
   147ec:	4631      	mov	r1, r6
   147ee:	e7df      	b.n	147b0 <free_list_add+0x46>
   147f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000147f4 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   147f4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   147f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   147fa:	bf2c      	ite	cs
   147fc:	2508      	movcs	r5, #8
   147fe:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   14800:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
   14802:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
   14804:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   14806:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   14808:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1480a:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1480e:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   14812:	1b2d      	subs	r5, r5, r4
   14814:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
   14816:	6004      	str	r4, [r0, #0]
	h->len = buf_sz;
	h->avail_buckets = 0;

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   14818:	4629      	mov	r1, r5
	h->chunk0_hdr_area = 0;
   1481a:	e9c4 2300 	strd	r2, r3, [r4]
	h->avail_buckets = 0;
   1481e:	e9c4 5202 	strd	r5, r2, [r4, #8]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   14822:	4620      	mov	r0, r4
   14824:	f7ff ff94 	bl	14750 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   14828:	4613      	mov	r3, r2
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1482a:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   1482c:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1482e:	1c47      	adds	r7, r0, #1
   14830:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
   14832:	f104 0110 	add.w	r1, r4, #16
   14836:	42bb      	cmp	r3, r7
   14838:	db29      	blt.n	1488e <sys_heap_init+0x9a>
		h->buckets[i].next = 0;
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1483a:	4632      	mov	r2, r6
   1483c:	4620      	mov	r0, r4
   1483e:	2100      	movs	r1, #0
   14840:	f7ff ff82 	bl	14748 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   14844:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   14846:	4620      	mov	r0, r4
   14848:	2201      	movs	r2, #1
   1484a:	2100      	movs	r1, #0
   1484c:	f7ff ff64 	bl	14718 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   14850:	463a      	mov	r2, r7
   14852:	4631      	mov	r1, r6
   14854:	f7ff ff78 	bl	14748 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   14858:	4633      	mov	r3, r6
   1485a:	4631      	mov	r1, r6
   1485c:	4620      	mov	r0, r4
   1485e:	2200      	movs	r2, #0
   14860:	f7ff ff49 	bl	146f6 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   14864:	4629      	mov	r1, r5
   14866:	4620      	mov	r0, r4
   14868:	2200      	movs	r2, #0
   1486a:	f7ff ff6d 	bl	14748 <set_chunk_size>
   1486e:	463b      	mov	r3, r7
   14870:	4629      	mov	r1, r5
   14872:	4620      	mov	r0, r4
   14874:	2200      	movs	r2, #0
   14876:	f7ff ff3e 	bl	146f6 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   1487a:	4629      	mov	r1, r5
   1487c:	4620      	mov	r0, r4
   1487e:	2201      	movs	r2, #1
   14880:	f7ff ff4a 	bl	14718 <set_chunk_used>

	free_list_add(h, chunk0_size);
   14884:	4631      	mov	r1, r6
}
   14886:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1488a:	f7ff bf6e 	b.w	1476a <free_list_add>
		h->buckets[i].next = 0;
   1488e:	f841 2b04 	str.w	r2, [r1], #4
	for (int i = 0; i < nb_buckets; i++) {
   14892:	3301      	adds	r3, #1
   14894:	e7cf      	b.n	14836 <sys_heap_init+0x42>

00014896 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   14896:	4770      	bx	lr

00014898 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   14898:	f7fd bc9e 	b.w	121d8 <SystemInit>

0001489c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1489c:	230c      	movs	r3, #12
   1489e:	68c2      	ldr	r2, [r0, #12]
   148a0:	b2c9      	uxtb	r1, r1
   148a2:	fb01 2303 	mla	r3, r1, r3, r2
   148a6:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   148a8:	f000 0007 	and.w	r0, r0, #7
   148ac:	4770      	bx	lr

000148ae <set_off_state>:
	__asm__ volatile(
   148ae:	f04f 0320 	mov.w	r3, #32
   148b2:	f3ef 8211 	mrs	r2, BASEPRI
   148b6:	f383 8811 	msr	BASEPRI, r3
   148ba:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   148be:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   148c0:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   148c4:	d001      	beq.n	148ca <set_off_state+0x1c>
   148c6:	428b      	cmp	r3, r1
   148c8:	d107      	bne.n	148da <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   148ca:	2301      	movs	r3, #1
   148cc:	6003      	str	r3, [r0, #0]
	int err = 0;
   148ce:	2000      	movs	r0, #0
	__asm__ volatile(
   148d0:	f382 8811 	msr	BASEPRI, r2
   148d4:	f3bf 8f6f 	isb	sy
}
   148d8:	4770      	bx	lr
		err = -EPERM;
   148da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   148de:	e7f7      	b.n	148d0 <set_off_state+0x22>

000148e0 <set_starting_state>:
{
   148e0:	b510      	push	{r4, lr}
	__asm__ volatile(
   148e2:	f04f 0320 	mov.w	r3, #32
   148e6:	f3ef 8211 	mrs	r2, BASEPRI
   148ea:	f383 8811 	msr	BASEPRI, r3
   148ee:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   148f2:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   148f4:	f003 0407 	and.w	r4, r3, #7
   148f8:	2c01      	cmp	r4, #1
   148fa:	d106      	bne.n	1490a <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   148fc:	6001      	str	r1, [r0, #0]
	int err = 0;
   148fe:	2000      	movs	r0, #0
	__asm__ volatile(
   14900:	f382 8811 	msr	BASEPRI, r2
   14904:	f3bf 8f6f 	isb	sy
}
   14908:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1490a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1490e:	428b      	cmp	r3, r1
		err = -EBUSY;
   14910:	bf14      	ite	ne
   14912:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   14916:	f06f 000f 	mvneq.w	r0, #15
   1491a:	e7f1      	b.n	14900 <set_starting_state+0x20>

0001491c <set_on_state>:
	__asm__ volatile(
   1491c:	f04f 0320 	mov.w	r3, #32
   14920:	f3ef 8211 	mrs	r2, BASEPRI
   14924:	f383 8811 	msr	BASEPRI, r3
   14928:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1492c:	6803      	ldr	r3, [r0, #0]
   1492e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   14932:	f043 0302 	orr.w	r3, r3, #2
   14936:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   14938:	f382 8811 	msr	BASEPRI, r2
   1493c:	f3bf 8f6f 	isb	sy
}
   14940:	4770      	bx	lr

00014942 <onoff_started_callback>:
	return &data->mgr[type];
   14942:	68c3      	ldr	r3, [r0, #12]
	notify(mgr, 0);
   14944:	201c      	movs	r0, #28
{
   14946:	b410      	push	{r4}
	return &data->mgr[type];
   14948:	b2cc      	uxtb	r4, r1
	notify(mgr, 0);
   1494a:	fb04 3000 	mla	r0, r4, r0, r3
   1494e:	2100      	movs	r1, #0
}
   14950:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
   14954:	4710      	bx	r2

00014956 <blocking_start_callback>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   14956:	4610      	mov	r0, r2
   14958:	f7fe bb96 	b.w	13088 <z_impl_k_sem_give>

0001495c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1495c:	2000      	movs	r0, #0
   1495e:	f7fd bd37 	b.w	123d0 <nrfx_clock_stop>

00014962 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   14962:	2000      	movs	r0, #0
   14964:	f7fd bd02 	b.w	1236c <nrfx_clock_start>

00014968 <api_stop>:
{
   14968:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
   1496a:	230c      	movs	r3, #12
   1496c:	b2cc      	uxtb	r4, r1
   1496e:	4363      	muls	r3, r4
{
   14970:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   14972:	68c0      	ldr	r0, [r0, #12]
   14974:	3340      	adds	r3, #64	; 0x40
   14976:	2180      	movs	r1, #128	; 0x80
   14978:	4418      	add	r0, r3
   1497a:	f7ff ff98 	bl	148ae <set_off_state>
	if (err < 0) {
   1497e:	2800      	cmp	r0, #0
   14980:	db05      	blt.n	1498e <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   14982:	6869      	ldr	r1, [r5, #4]
   14984:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
   14988:	684b      	ldr	r3, [r1, #4]
   1498a:	4798      	blx	r3
	return 0;
   1498c:	2000      	movs	r0, #0
}
   1498e:	bd38      	pop	{r3, r4, r5, pc}

00014990 <api_start>:
{
   14990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   14994:	250c      	movs	r5, #12
   14996:	b2ce      	uxtb	r6, r1
   14998:	4375      	muls	r5, r6
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1499a:	68c4      	ldr	r4, [r0, #12]
{
   1499c:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   1499e:	f105 0040 	add.w	r0, r5, #64	; 0x40
   149a2:	2180      	movs	r1, #128	; 0x80
   149a4:	4420      	add	r0, r4
{
   149a6:	4690      	mov	r8, r2
	err = set_starting_state(&subdata->flags, ctx);
   149a8:	f7ff ff9a 	bl	148e0 <set_starting_state>
	if (err < 0) {
   149ac:	2800      	cmp	r0, #0
   149ae:	db0b      	blt.n	149c8 <api_start+0x38>
	subdata->cb = data->cb;
   149b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   149b4:	442c      	add	r4, r5
   149b6:	63a3      	str	r3, [r4, #56]	; 0x38
	subdata->user_data = data->user_data;
   149b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   149bc:	63e3      	str	r3, [r4, #60]	; 0x3c
	 get_sub_config(dev, type)->start();
   149be:	687b      	ldr	r3, [r7, #4]
   149c0:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
   149c4:	4798      	blx	r3
	return 0;
   149c6:	2000      	movs	r0, #0
}
   149c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000149cc <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   149cc:	4770      	bx	lr

000149ce <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   149ce:	4770      	bx	lr

000149d0 <sys_clock_disable>:
   149d0:	4770      	bx	lr

000149d2 <spm_secure_services_init>:
	mbedtls_platform_context platform_ctx = {0};
   149d2:	2300      	movs	r3, #0
{
   149d4:	b507      	push	{r0, r1, r2, lr}
	err = mbedtls_platform_setup(&platform_ctx);
   149d6:	a801      	add	r0, sp, #4
	mbedtls_platform_context platform_ctx = {0};
   149d8:	f88d 3004 	strb.w	r3, [sp, #4]
	err = mbedtls_platform_setup(&platform_ctx);
   149dc:	f7fe feaa 	bl	13734 <mbedtls_platform_setup>
}
   149e0:	b003      	add	sp, #12
   149e2:	f85d fb04 	ldr.w	pc, [sp], #4

000149e6 <__acle_se_spm_request_random_number>:
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
   149e6:	2990      	cmp	r1, #144	; 0x90
{
   149e8:	b508      	push	{r3, lr}
   149ea:	4613      	mov	r3, r2
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
   149ec:	d139      	bne.n	14a62 <__acle_se_spm_request_random_number+0x7c>
	err = mbedtls_hardware_poll(NULL, output, len, olen);
   149ee:	460a      	mov	r2, r1
   149f0:	4601      	mov	r1, r0
   149f2:	2000      	movs	r0, #0
   149f4:	f7fe feaa 	bl	1374c <mbedtls_hardware_poll>
}
   149f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   149fc:	4671      	mov	r1, lr
   149fe:	4672      	mov	r2, lr
   14a00:	4673      	mov	r3, lr
   14a02:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   14a06:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   14a0a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
   14a0e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
   14a12:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
   14a16:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
   14a1a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   14a1e:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   14a22:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   14a26:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   14a2a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   14a2e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   14a32:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   14a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   14a3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   14a3e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   14a42:	f38e 8c00 	msr	CPSR_fs, lr
   14a46:	b410      	push	{r4}
   14a48:	eef1 ca10 	vmrs	ip, fpscr
   14a4c:	f64f 7460 	movw	r4, #65376	; 0xff60
   14a50:	f6c0 74ff 	movt	r4, #4095	; 0xfff
   14a54:	ea0c 0c04 	and.w	ip, ip, r4
   14a58:	eee1 ca10 	vmsr	fpscr, ip
   14a5c:	bc10      	pop	{r4}
   14a5e:	46f4      	mov	ip, lr
   14a60:	4774      	bxns	lr
		return -EINVAL;
   14a62:	f06f 0015 	mvn.w	r0, #21
   14a66:	e7c7      	b.n	149f8 <__acle_se_spm_request_random_number+0x12>

00014a68 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
   14a68:	2000      	movs	r0, #0
   14a6a:	f7fb bff5 	b.w	10a58 <sys_reboot>

00014a6e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   14a6e:	2100      	movs	r1, #0
   14a70:	2001      	movs	r0, #1
   14a72:	f000 b832 	b.w	14ada <z_arm_fatal_error>

00014a76 <irq_target_state_set>:
irq_target_state_t irq_target_state_set(unsigned int irq,
	irq_target_state_t irq_target_state)
{
	uint32_t result;

	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
   14a76:	b243      	sxtb	r3, r0
   14a78:	b9c9      	cbnz	r1, 14aae <irq_target_state_set+0x38>
  if ((int32_t)(IRQn) >= 0)
   14a7a:	2b00      	cmp	r3, #0
   14a7c:	db15      	blt.n	14aaa <irq_target_state_set+0x34>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   14a7e:	2101      	movs	r1, #1
   14a80:	095b      	lsrs	r3, r3, #5
   14a82:	009b      	lsls	r3, r3, #2
   14a84:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   14a88:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   14a8c:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
   14a90:	f000 001f 	and.w	r0, r0, #31
   14a94:	4081      	lsls	r1, r0
   14a96:	ea22 0201 	bic.w	r2, r2, r1
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   14a9a:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
   14a9e:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
   14aa2:	40c1      	lsrs	r1, r0
   14aa4:	f001 0101 	and.w	r1, r1, #1
		/* Set target to Non-Secure */
		result = NVIC_SetTargetState(irq);
	}

	if (result) {
		return IRQ_TARGET_STATE_NON_SECURE;
   14aa8:	b2c9      	uxtb	r1, r1
	} else {
		return IRQ_TARGET_STATE_SECURE;
	}
}
   14aaa:	4608      	mov	r0, r1
   14aac:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
   14aae:	2b00      	cmp	r3, #0
   14ab0:	db0d      	blt.n	14ace <irq_target_state_set+0x58>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   14ab2:	2201      	movs	r2, #1
   14ab4:	095b      	lsrs	r3, r3, #5
   14ab6:	009b      	lsls	r3, r3, #2
   14ab8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   14abc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   14ac0:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
   14ac4:	f000 001f 	and.w	r0, r0, #31
   14ac8:	4082      	lsls	r2, r0
   14aca:	430a      	orrs	r2, r1
   14acc:	e7e5      	b.n	14a9a <irq_target_state_set+0x24>
		return IRQ_TARGET_STATE_SECURE;
   14ace:	2100      	movs	r1, #0
   14ad0:	e7eb      	b.n	14aaa <irq_target_state_set+0x34>

00014ad2 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   14ad2:	6e83      	ldr	r3, [r0, #104]	; 0x68
   14ad4:	f383 880b 	msr	PSPLIM, r3
}
   14ad8:	4770      	bx	lr

00014ada <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   14ada:	f000 b937 	b.w	14d4c <z_fatal_error>

00014ade <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   14ade:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   14ae0:	6800      	ldr	r0, [r0, #0]
   14ae2:	f000 b933 	b.w	14d4c <z_fatal_error>

00014ae6 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   14ae6:	b508      	push	{r3, lr}
	handler();
   14ae8:	f7fc fe24 	bl	11734 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   14aec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   14af0:	f7fc bfa2 	b.w	11a38 <z_arm_exc_exit>

00014af4 <mpu_configure_region>:
{
   14af4:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
   14af6:	680b      	ldr	r3, [r1, #0]
{
   14af8:	b085      	sub	sp, #20
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   14afa:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
   14afc:	f89d 2008 	ldrb.w	r2, [sp, #8]
   14b00:	890d      	ldrh	r5, [r1, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   14b02:	3c01      	subs	r4, #1
	region_conf.base = new_region->start;
   14b04:	9300      	str	r3, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   14b06:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   14b08:	f023 031f 	bic.w	r3, r3, #31
   14b0c:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   14b0e:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   14b12:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   14b16:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   14b1a:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
   14b1c:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   14b20:	9303      	str	r3, [sp, #12]
   14b22:	4604      	mov	r4, r0
   14b24:	d805      	bhi.n	14b32 <mpu_configure_region+0x3e>
	region_init(index, region_conf);
   14b26:	4669      	mov	r1, sp
   14b28:	f7fd f808 	bl	11b3c <region_init>
}
   14b2c:	4620      	mov	r0, r4
   14b2e:	b005      	add	sp, #20
   14b30:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   14b32:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
   14b36:	e7f9      	b.n	14b2c <mpu_configure_region+0x38>

00014b38 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   14b38:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   14b3c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   14b40:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   14b42:	bf08      	it	eq
   14b44:	f06f 0015 	mvneq.w	r0, #21
   14b48:	4770      	bx	lr

00014b4a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   14b4a:	3801      	subs	r0, #1
   14b4c:	3901      	subs	r1, #1
   14b4e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   14b52:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   14b56:	4293      	cmp	r3, r2
   14b58:	d101      	bne.n	14b5e <strcmp+0x14>
   14b5a:	2b00      	cmp	r3, #0
   14b5c:	d1f7      	bne.n	14b4e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   14b5e:	1a98      	subs	r0, r3, r2
   14b60:	4770      	bx	lr

00014b62 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   14b62:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   14b64:	b15a      	cbz	r2, 14b7e <memcmp+0x1c>
   14b66:	3901      	subs	r1, #1
   14b68:	1884      	adds	r4, r0, r2
   14b6a:	f810 2b01 	ldrb.w	r2, [r0], #1
   14b6e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   14b72:	42a0      	cmp	r0, r4
   14b74:	d001      	beq.n	14b7a <memcmp+0x18>
   14b76:	429a      	cmp	r2, r3
   14b78:	d0f7      	beq.n	14b6a <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   14b7a:	1ad0      	subs	r0, r2, r3
}
   14b7c:	bd10      	pop	{r4, pc}
		return 0;
   14b7e:	4610      	mov	r0, r2
   14b80:	e7fc      	b.n	14b7c <memcmp+0x1a>

00014b82 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   14b82:	1a43      	subs	r3, r0, r1
   14b84:	4293      	cmp	r3, r2
{
   14b86:	b510      	push	{r4, lr}
   14b88:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   14b8c:	d308      	bcc.n	14ba0 <memmove+0x1e>
	char *dest = d;
   14b8e:	4602      	mov	r2, r0
   14b90:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   14b92:	429a      	cmp	r2, r3
   14b94:	d00b      	beq.n	14bae <memmove+0x2c>
			*dest = *src;
   14b96:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   14b9a:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   14b9e:	e7f8      	b.n	14b92 <memmove+0x10>
   14ba0:	440a      	add	r2, r1
			dest[n] = src[n];
   14ba2:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
   14ba6:	428a      	cmp	r2, r1
			dest[n] = src[n];
   14ba8:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   14bac:	d1f9      	bne.n	14ba2 <memmove+0x20>
		}
	}

	return d;
}
   14bae:	bd10      	pop	{r4, pc}

00014bb0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   14bb0:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   14bb2:	ea81 0400 	eor.w	r4, r1, r0
   14bb6:	07a5      	lsls	r5, r4, #30
   14bb8:	4603      	mov	r3, r0
   14bba:	d00b      	beq.n	14bd4 <memcpy+0x24>
   14bbc:	3b01      	subs	r3, #1
   14bbe:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   14bc0:	4291      	cmp	r1, r2
   14bc2:	d11a      	bne.n	14bfa <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   14bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   14bc6:	2a00      	cmp	r2, #0
   14bc8:	d0fc      	beq.n	14bc4 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   14bca:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   14bce:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   14bd0:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   14bd4:	079c      	lsls	r4, r3, #30
   14bd6:	d1f6      	bne.n	14bc6 <memcpy+0x16>
   14bd8:	0895      	lsrs	r5, r2, #2
   14bda:	00ac      	lsls	r4, r5, #2
   14bdc:	1f1e      	subs	r6, r3, #4
   14bde:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   14be0:	42b9      	cmp	r1, r7
   14be2:	d105      	bne.n	14bf0 <memcpy+0x40>
   14be4:	f06f 0603 	mvn.w	r6, #3
   14be8:	4423      	add	r3, r4
   14bea:	fb06 2205 	mla	r2, r6, r5, r2
   14bee:	e7e5      	b.n	14bbc <memcpy+0xc>
			*(d_word++) = *(s_word++);
   14bf0:	f851 cb04 	ldr.w	ip, [r1], #4
   14bf4:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
   14bf8:	e7f2      	b.n	14be0 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
   14bfa:	f811 4b01 	ldrb.w	r4, [r1], #1
   14bfe:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   14c02:	e7dd      	b.n	14bc0 <memcpy+0x10>

00014c04 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   14c04:	4603      	mov	r3, r0
{
   14c06:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   14c08:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   14c0a:	079c      	lsls	r4, r3, #30
   14c0c:	d110      	bne.n	14c30 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   14c0e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   14c12:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   14c16:	0894      	lsrs	r4, r2, #2
   14c18:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   14c1c:	42b3      	cmp	r3, r6
   14c1e:	d10d      	bne.n	14c3c <memset+0x38>
   14c20:	f06f 0503 	mvn.w	r5, #3
   14c24:	fb05 2404 	mla	r4, r5, r4, r2
   14c28:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   14c2a:	42a3      	cmp	r3, r4
   14c2c:	d109      	bne.n	14c42 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   14c2e:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   14c30:	2a00      	cmp	r2, #0
   14c32:	d0fc      	beq.n	14c2e <memset+0x2a>
		*(d_byte++) = c_byte;
   14c34:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   14c38:	3a01      	subs	r2, #1
   14c3a:	e7e6      	b.n	14c0a <memset+0x6>
		*(d_word++) = c_word;
   14c3c:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   14c40:	e7ec      	b.n	14c1c <memset+0x18>
		*(d_byte++) = c_byte;
   14c42:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   14c46:	e7f0      	b.n	14c2a <memset+0x26>

00014c48 <_stdout_hook_default>:
}
   14c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14c4c:	4770      	bx	lr

00014c4e <uarte_nrfx_config_get>:
{
   14c4e:	460a      	mov	r2, r1
	*cfg = get_dev_data(dev)->uart_config;
   14c50:	68c3      	ldr	r3, [r0, #12]
   14c52:	3304      	adds	r3, #4
   14c54:	e893 0003 	ldmia.w	r3, {r0, r1}
   14c58:	e882 0003 	stmia.w	r2, {r0, r1}
}
   14c5c:	2000      	movs	r0, #0
   14c5e:	4770      	bx	lr

00014c60 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   14c60:	6843      	ldr	r3, [r0, #4]
   14c62:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   14c64:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   14c68:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   14c6c:	4770      	bx	lr

00014c6e <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   14c6e:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   14c70:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   14c72:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14c74:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   14c78:	b148      	cbz	r0, 14c8e <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14c7a:	2000      	movs	r0, #0
	*c = data->rx_data;
   14c7c:	7c12      	ldrb	r2, [r2, #16]
   14c7e:	700a      	strb	r2, [r1, #0]
   14c80:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   14c84:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14c88:	2201      	movs	r2, #1
   14c8a:	601a      	str	r2, [r3, #0]
	return 0;
   14c8c:	4770      	bx	lr
		return -1;
   14c8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   14c92:	4770      	bx	lr

00014c94 <uarte_nrfx_poll_out>:
{
   14c94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   14c98:	6843      	ldr	r3, [r0, #4]
{
   14c9a:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   14c9e:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   14ca0:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   14ca2:	f000 f938 	bl	14f16 <k_is_in_isr>
   14ca6:	bb98      	cbnz	r0, 14d10 <uarte_nrfx_poll_out+0x7c>
   14ca8:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14caa:	f04f 0801 	mov.w	r8, #1
   14cae:	f106 070c 	add.w	r7, r6, #12
   14cb2:	e8d7 3fef 	ldaex	r3, [r7]
   14cb6:	2b00      	cmp	r3, #0
   14cb8:	d103      	bne.n	14cc2 <uarte_nrfx_poll_out+0x2e>
   14cba:	e8c7 8fe2 	stlex	r2, r8, [r7]
   14cbe:	2a00      	cmp	r2, #0
   14cc0:	d1f7      	bne.n	14cb2 <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
   14cc2:	d007      	beq.n	14cd4 <uarte_nrfx_poll_out+0x40>
	return z_impl_k_sleep(timeout);
   14cc4:	2021      	movs	r0, #33	; 0x21
   14cc6:	2100      	movs	r1, #0
   14cc8:	3d01      	subs	r5, #1
   14cca:	f7fe f9b7 	bl	1303c <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   14cce:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   14cd2:	d1ee      	bne.n	14cb2 <uarte_nrfx_poll_out+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14cd4:	2300      	movs	r3, #0
   14cd6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14cda:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   14cde:	f10d 0307 	add.w	r3, sp, #7
   14ce2:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   14ce6:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14ce8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   14cec:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14cf0:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14cf2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   14cf6:	b923      	cbnz	r3, 14d02 <uarte_nrfx_poll_out+0x6e>
   14cf8:	2001      	movs	r0, #1
   14cfa:	f000 f81a 	bl	14d32 <nrfx_busy_wait>
   14cfe:	3d01      	subs	r5, #1
   14d00:	d1f7      	bne.n	14cf2 <uarte_nrfx_poll_out+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14d02:	2301      	movs	r3, #1
   14d04:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   14d06:	2300      	movs	r3, #0
   14d08:	60f3      	str	r3, [r6, #12]
}
   14d0a:	b002      	add	sp, #8
   14d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   14d10:	2301      	movs	r3, #1
   14d12:	60f3      	str	r3, [r6, #12]
   14d14:	e7de      	b.n	14cd4 <uarte_nrfx_poll_out+0x40>

00014d16 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   14d16:	b508      	push	{r3, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
   14d18:	2000      	movs	r0, #0
   14d1a:	f7fc fe9b 	bl	11a54 <sys_arch_reboot>

00014d1e <hw_cc310_init>:
#include <nrf_cc310_platform.h>

#if CONFIG_HW_CC310

static int hw_cc310_init(const struct device *dev)
{
   14d1e:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc310_platform_abort_init();
   14d20:	f7fc fb8a 	bl	11438 <nrf_cc310_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc310_platform_mutex_init();
   14d24:	f7fc fc0c 	bl	11540 <nrf_cc310_platform_mutex_init>
	res = nrf_cc310_platform_init();
#else
	res = nrf_cc310_platform_init_no_rng();
#endif
	return res;
}
   14d28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc310_platform_init_no_rng();
   14d2c:	f7fe bdc6 	b.w	138bc <nrf_cc310_platform_init_no_rng>

00014d30 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   14d30:	4700      	bx	r0

00014d32 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   14d32:	f000 b8f6 	b.w	14f22 <z_impl_k_busy_wait>

00014d36 <nrfx_clock_enable>:
{
   14d36:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   14d38:	2005      	movs	r0, #5
   14d3a:	f7fc fc7d 	bl	11638 <arch_irq_is_enabled>
   14d3e:	b920      	cbnz	r0, 14d4a <nrfx_clock_enable+0x14>
}
   14d40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   14d44:	2005      	movs	r0, #5
   14d46:	f7fc bc67 	b.w	11618 <arch_irq_enable>
   14d4a:	bd08      	pop	{r3, pc}

00014d4c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14d4e:	4606      	mov	r6, r0
   14d50:	460f      	mov	r7, r1
	__asm__ volatile(
   14d52:	f04f 0320 	mov.w	r3, #32
   14d56:	f3ef 8511 	mrs	r5, BASEPRI
   14d5a:	f383 8811 	msr	BASEPRI, r3
   14d5e:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   14d62:	f7fe f98b 	bl	1307c <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   14d66:	4639      	mov	r1, r7
   14d68:	4604      	mov	r4, r0
   14d6a:	4630      	mov	r0, r6
   14d6c:	f7ff ffd3 	bl	14d16 <k_sys_fatal_error_handler>
	__asm__ volatile(
   14d70:	f385 8811 	msr	BASEPRI, r5
   14d74:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   14d78:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   14d7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14d7e:	f7fc be87 	b.w	11a90 <z_impl_k_thread_abort>

00014d82 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   14d82:	f7ff be24 	b.w	149ce <z_clock_idle_exit>

00014d86 <k_mem_slab_init>:
{
   14d86:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   14d88:	2400      	movs	r4, #0
   14d8a:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   14d8c:	ea41 0402 	orr.w	r4, r1, r2
   14d90:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   14d94:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   14d98:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   14d9a:	d10c      	bne.n	14db6 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   14d9c:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   14d9e:	42a3      	cmp	r3, r4
   14da0:	d103      	bne.n	14daa <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
   14da2:	e9c0 0000 	strd	r0, r0, [r0]
   14da6:	2000      	movs	r0, #0
}
   14da8:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   14daa:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   14dac:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   14dae:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   14db0:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   14db2:	4411      	add	r1, r2
   14db4:	e7f3      	b.n	14d9e <k_mem_slab_init+0x18>
		return -EINVAL;
   14db6:	f06f 0015 	mvn.w	r0, #21
	return rc;
   14dba:	e7f5      	b.n	14da8 <k_mem_slab_init+0x22>

00014dbc <z_impl_k_mutex_init>:
{
   14dbc:	4603      	mov	r3, r0
	mutex->owner = NULL;
   14dbe:	2000      	movs	r0, #0
   14dc0:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   14dc4:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   14dc8:	4770      	bx	lr

00014dca <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   14dca:	4603      	mov	r3, r0
   14dcc:	b920      	cbnz	r0, 14dd8 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14dce:	f3ef 8205 	mrs	r2, IPSR
   14dd2:	b90a      	cbnz	r2, 14dd8 <z_reschedule_irqlock+0xe>
   14dd4:	f7fc bbca 	b.w	1156c <arch_swap>
   14dd8:	f383 8811 	msr	BASEPRI, r3
   14ddc:	f3bf 8f6f 	isb	sy
}
   14de0:	4770      	bx	lr

00014de2 <z_reschedule_unlocked>:
	__asm__ volatile(
   14de2:	f04f 0320 	mov.w	r3, #32
   14de6:	f3ef 8011 	mrs	r0, BASEPRI
   14dea:	f383 8811 	msr	BASEPRI, r3
   14dee:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   14df2:	f7ff bfea 	b.w	14dca <z_reschedule_irqlock>

00014df6 <unpend_thread_no_timeout>:
{
   14df6:	b510      	push	{r4, lr}
   14df8:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   14dfa:	4601      	mov	r1, r0
   14dfc:	6880      	ldr	r0, [r0, #8]
   14dfe:	f7fd fe4f 	bl	12aa0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   14e02:	7b63      	ldrb	r3, [r4, #13]
   14e04:	f023 0302 	bic.w	r3, r3, #2
   14e08:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   14e0a:	2300      	movs	r3, #0
   14e0c:	60a3      	str	r3, [r4, #8]
}
   14e0e:	bd10      	pop	{r4, pc}

00014e10 <z_priq_dumb_best>:
	return list->head == list;
   14e10:	6803      	ldr	r3, [r0, #0]
}
   14e12:	4298      	cmp	r0, r3
   14e14:	bf14      	ite	ne
   14e16:	4618      	movne	r0, r3
   14e18:	2000      	moveq	r0, #0
   14e1a:	4770      	bx	lr

00014e1c <z_ready_thread>:
{
   14e1c:	b510      	push	{r4, lr}
   14e1e:	f04f 0320 	mov.w	r3, #32
   14e22:	f3ef 8411 	mrs	r4, BASEPRI
   14e26:	f383 8811 	msr	BASEPRI, r3
   14e2a:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   14e2e:	f7fd fe8d 	bl	12b4c <ready_thread>
	__asm__ volatile(
   14e32:	f384 8811 	msr	BASEPRI, r4
   14e36:	f3bf 8f6f 	isb	sy
}
   14e3a:	bd10      	pop	{r4, pc}

00014e3c <z_thread_timeout>:
{
   14e3c:	b570      	push	{r4, r5, r6, lr}
   14e3e:	4604      	mov	r4, r0
	__asm__ volatile(
   14e40:	f04f 0320 	mov.w	r3, #32
   14e44:	f3ef 8611 	mrs	r6, BASEPRI
   14e48:	f383 8811 	msr	BASEPRI, r3
   14e4c:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   14e50:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   14e54:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
   14e58:	b113      	cbz	r3, 14e60 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   14e5a:	4628      	mov	r0, r5
   14e5c:	f7ff ffcb 	bl	14df6 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   14e60:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
   14e64:	4628      	mov	r0, r5
   14e66:	f023 0314 	bic.w	r3, r3, #20
   14e6a:	f804 3c0b 	strb.w	r3, [r4, #-11]
   14e6e:	f7fd fe6d 	bl	12b4c <ready_thread>
	__asm__ volatile(
   14e72:	f386 8811 	msr	BASEPRI, r6
   14e76:	f3bf 8f6f 	isb	sy
}
   14e7a:	bd70      	pop	{r4, r5, r6, pc}

00014e7c <add_to_waitq_locked>:
{
   14e7c:	b538      	push	{r3, r4, r5, lr}
   14e7e:	4604      	mov	r4, r0
   14e80:	460d      	mov	r5, r1
	unready_thread(thread);
   14e82:	f7fd ffbb 	bl	12dfc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   14e86:	7b63      	ldrb	r3, [r4, #13]
   14e88:	f043 0302 	orr.w	r3, r3, #2
   14e8c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   14e8e:	b17d      	cbz	r5, 14eb0 <add_to_waitq_locked+0x34>
   14e90:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   14e92:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14e94:	429d      	cmp	r5, r3
   14e96:	d012      	beq.n	14ebe <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14e98:	b18b      	cbz	r3, 14ebe <add_to_waitq_locked+0x42>
	if (thread_1->base.prio < thread_2->base.prio) {
   14e9a:	f994 200e 	ldrsb.w	r2, [r4, #14]
   14e9e:	f993 100e 	ldrsb.w	r1, [r3, #14]
   14ea2:	4291      	cmp	r1, r2
   14ea4:	dd05      	ble.n	14eb2 <add_to_waitq_locked+0x36>
	node->prev = successor->prev;
   14ea6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   14ea8:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   14eac:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   14eae:	605c      	str	r4, [r3, #4]
}
   14eb0:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   14eb2:	6869      	ldr	r1, [r5, #4]
   14eb4:	428b      	cmp	r3, r1
   14eb6:	d002      	beq.n	14ebe <add_to_waitq_locked+0x42>
   14eb8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14eba:	2b00      	cmp	r3, #0
   14ebc:	d1ef      	bne.n	14e9e <add_to_waitq_locked+0x22>
	node->prev = list->tail;
   14ebe:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   14ec0:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   14ec2:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   14ec4:	686b      	ldr	r3, [r5, #4]
   14ec6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   14ec8:	606c      	str	r4, [r5, #4]
}
   14eca:	e7f1      	b.n	14eb0 <add_to_waitq_locked+0x34>

00014ecc <z_unpend_first_thread>:
{
   14ecc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   14ece:	f04f 0320 	mov.w	r3, #32
   14ed2:	f3ef 8211 	mrs	r2, BASEPRI
   14ed6:	f383 8811 	msr	BASEPRI, r3
   14eda:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   14ede:	f7ff ff97 	bl	14e10 <z_priq_dumb_best>
   14ee2:	4604      	mov	r4, r0
	__asm__ volatile(
   14ee4:	f382 8811 	msr	BASEPRI, r2
   14ee8:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   14eec:	b188      	cbz	r0, 14f12 <z_unpend_first_thread+0x46>
	__asm__ volatile(
   14eee:	f04f 0320 	mov.w	r3, #32
   14ef2:	f3ef 8511 	mrs	r5, BASEPRI
   14ef6:	f383 8811 	msr	BASEPRI, r3
   14efa:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   14efe:	f7ff ff7a 	bl	14df6 <unpend_thread_no_timeout>
	__asm__ volatile(
   14f02:	f385 8811 	msr	BASEPRI, r5
   14f06:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   14f0a:	f104 0018 	add.w	r0, r4, #24
   14f0e:	f000 f80a 	bl	14f26 <z_abort_timeout>
}
   14f12:	4620      	mov	r0, r4
   14f14:	bd38      	pop	{r3, r4, r5, pc}

00014f16 <k_is_in_isr>:
   14f16:	f3ef 8005 	mrs	r0, IPSR
}
   14f1a:	3000      	adds	r0, #0
   14f1c:	bf18      	it	ne
   14f1e:	2001      	movne	r0, #1
   14f20:	4770      	bx	lr

00014f22 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   14f22:	f7fb bd8f 	b.w	10a44 <arch_busy_wait>

00014f26 <z_abort_timeout>:
{
   14f26:	b510      	push	{r4, lr}
	__asm__ volatile(
   14f28:	f04f 0220 	mov.w	r2, #32
   14f2c:	f3ef 8411 	mrs	r4, BASEPRI
   14f30:	f382 8811 	msr	BASEPRI, r2
   14f34:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   14f38:	6803      	ldr	r3, [r0, #0]
   14f3a:	b13b      	cbz	r3, 14f4c <z_abort_timeout+0x26>
			remove_timeout(to);
   14f3c:	f7fe f984 	bl	13248 <remove_timeout>
			ret = 0;
   14f40:	2000      	movs	r0, #0
	__asm__ volatile(
   14f42:	f384 8811 	msr	BASEPRI, r4
   14f46:	f3bf 8f6f 	isb	sy
}
   14f4a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   14f4c:	f06f 0015 	mvn.w	r0, #21
   14f50:	e7f7      	b.n	14f42 <z_abort_timeout+0x1c>

00014f52 <z_get_next_timeout_expiry>:
{
   14f52:	b510      	push	{r4, lr}
	__asm__ volatile(
   14f54:	f04f 0320 	mov.w	r3, #32
   14f58:	f3ef 8411 	mrs	r4, BASEPRI
   14f5c:	f383 8811 	msr	BASEPRI, r3
   14f60:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   14f64:	f7fe f98a 	bl	1327c <next_timeout>
	__asm__ volatile(
   14f68:	f384 8811 	msr	BASEPRI, r4
   14f6c:	f3bf 8f6f 	isb	sy
}
   14f70:	bd10      	pop	{r4, pc}

00014f72 <z_set_timeout_expiry>:
{
   14f72:	b570      	push	{r4, r5, r6, lr}
   14f74:	4604      	mov	r4, r0
   14f76:	460e      	mov	r6, r1
	__asm__ volatile(
   14f78:	f04f 0320 	mov.w	r3, #32
   14f7c:	f3ef 8511 	mrs	r5, BASEPRI
   14f80:	f383 8811 	msr	BASEPRI, r3
   14f84:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   14f88:	f7fe f978 	bl	1327c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   14f8c:	2801      	cmp	r0, #1
   14f8e:	dd05      	ble.n	14f9c <z_set_timeout_expiry+0x2a>
   14f90:	42a0      	cmp	r0, r4
   14f92:	dd03      	ble.n	14f9c <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   14f94:	4631      	mov	r1, r6
   14f96:	4620      	mov	r0, r4
   14f98:	f7fb ff80 	bl	10e9c <z_clock_set_timeout>
	__asm__ volatile(
   14f9c:	f385 8811 	msr	BASEPRI, r5
   14fa0:	f3bf 8f6f 	isb	sy
}
   14fa4:	bd70      	pop	{r4, r5, r6, pc}

00014fa6 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   14fa6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   14fa8:	f7fe fa86 	bl	134b8 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   14fac:	bd08      	pop	{r3, pc}

00014fae <k_heap_init>:
{
   14fae:	b410      	push	{r4}
   14fb0:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   14fb4:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   14fb8:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   14fbc:	f7ff bc1a 	b.w	147f4 <sys_heap_init>

00014fc0 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   14fc0:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

00015a80 <spm_request_read-0x2560>:
	...

00017fe0 <spm_request_read>:
   17fe0:	e97f e97f 	sg
   17fe4:	f7f9 b964 	b.w	112b0 <__acle_se_spm_request_read>

00017fe8 <spm_firmware_info>:
   17fe8:	e97f e97f 	sg
   17fec:	f7f9 b9be 	b.w	1136c <__acle_se_spm_firmware_info>

00017ff0 <spm_request_random_number>:
   17ff0:	e97f e97f 	sg
   17ff4:	f7fc bcf7 	b.w	149e6 <__acle_se_spm_request_random_number>
	...
