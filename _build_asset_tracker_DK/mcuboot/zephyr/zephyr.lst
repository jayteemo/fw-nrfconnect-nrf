
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20005038 	.word	0x20005038
}
   4:	00002655 	.word	0x00002655
   8:	00006531 	.word	0x00006531
   c:	00002685 	.word	0x00002685
  10:	00002685 	.word	0x00002685
  14:	00002685 	.word	0x00002685
  18:	00002685 	.word	0x00002685
  1c:	00002685 	.word	0x00002685
	...
  2c:	0000250d 	.word	0x0000250d
  30:	00002685 	.word	0x00002685
  34:	00000000 	.word	0x00000000
  38:	000024c5 	.word	0x000024c5
  3c:	00006481 	.word	0x00006481

00000040 <_irq_vector_table>:
  40:	0000262d 0000262d 0000262d 0000262d     -&..-&..-&..-&..
  50:	0000262d 0000262d 0000262d 0000262d     -&..-&..-&..-&..
  60:	0000262d 0000262d 0000262d 0000262d     -&..-&..-&..-&..
  70:	0000262d 0000262d 0000262d 0000262d     -&..-&..-&..-&..
  80:	0000262d 0000262d 0000262d 0000262d     -&..-&..-&..-&..
  90:	0000262d 0000262d 0000262d 0000262d     -&..-&..-&..-&..
  a0:	0000262d 0000262d 0000262d 0000262d     -&..-&..-&..-&..
  b0:	0000262d 0000262d 0000262d 0000262d     -&..-&..-&..-&..
  c0:	0000262d 0000262d 0000262d 0000262d     -&..-&..-&..-&..
  d0:	0000262d 0000262d 0000262d 0000262d     -&..-&..-&..-&..
  e0:	0000262d 0000262d 0000262d 0000262d     -&..-&..-&..-&..
  f0:	0000262d 0000262d 0000262d 0000262d     -&..-&..-&..-&..
 100:	0000262d 0000262d 0000262d 0000262d     -&..-&..-&..-&..
 110:	0000262d 0000262d 0000262d 0000262d     -&..-&..-&..-&..
 120:	0000262d 0000262d 0000262d 0000262d     -&..-&..-&..-&..
 130:	0000262d 0000262d 0000262d 0000262d     -&..-&..-&..-&..
 140:	0000262d                                -&..

Disassembly of section text:

00000144 <__aeabi_uldivmod>:
     144:	b953      	cbnz	r3, 15c <__aeabi_uldivmod+0x18>
     146:	b94a      	cbnz	r2, 15c <__aeabi_uldivmod+0x18>
     148:	2900      	cmp	r1, #0
     14a:	bf08      	it	eq
     14c:	2800      	cmpeq	r0, #0
     14e:	bf1c      	itt	ne
     150:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     154:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     158:	f000 b970 	b.w	43c <__aeabi_idiv0>
     15c:	f1ad 0c08 	sub.w	ip, sp, #8
     160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     164:	f000 f806 	bl	174 <__udivmoddi4>
     168:	f8dd e004 	ldr.w	lr, [sp, #4]
     16c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     170:	b004      	add	sp, #16
     172:	4770      	bx	lr

00000174 <__udivmoddi4>:
     174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     178:	9e09      	ldr	r6, [sp, #36]	; 0x24
     17a:	4604      	mov	r4, r0
     17c:	4689      	mov	r9, r1
     17e:	2b00      	cmp	r3, #0
     180:	f040 8083 	bne.w	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     184:	428a      	cmp	r2, r1
     186:	4615      	mov	r5, r2
     188:	d945      	bls.n	216 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x16>
     18a:	fab2 f282 	clz	r2, r2
     18e:	b14a      	cbz	r2, 1a4 <__udivmoddi4+0x30>
     190:	f1c2 0720 	rsb	r7, r2, #32
     194:	fa01 f302 	lsl.w	r3, r1, r2
     198:	4095      	lsls	r5, r2
     19a:	4094      	lsls	r4, r2
     19c:	fa20 f707 	lsr.w	r7, r0, r7
     1a0:	ea47 0903 	orr.w	r9, r7, r3
     1a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1a8:	0c23      	lsrs	r3, r4, #16
     1aa:	fa1f f885 	uxth.w	r8, r5
     1ae:	fbb9 fcfe 	udiv	ip, r9, lr
     1b2:	fb0e 991c 	mls	r9, lr, ip, r9
     1b6:	fb0c f108 	mul.w	r1, ip, r8
     1ba:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
     1be:	4299      	cmp	r1, r3
     1c0:	d90a      	bls.n	1d8 <__udivmoddi4+0x64>
     1c2:	18eb      	adds	r3, r5, r3
     1c4:	bf2c      	ite	cs
     1c6:	2001      	movcs	r0, #1
     1c8:	2000      	movcc	r0, #0
     1ca:	4299      	cmp	r1, r3
     1cc:	d902      	bls.n	1d4 <__udivmoddi4+0x60>
     1ce:	2800      	cmp	r0, #0
     1d0:	f000 811d 	beq.w	40e <CONFIG_FLASH_SIZE+0xe>
     1d4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
     1d8:	1a59      	subs	r1, r3, r1
     1da:	b2a3      	uxth	r3, r4
     1dc:	fbb1 f0fe 	udiv	r0, r1, lr
     1e0:	fb0e 1110 	mls	r1, lr, r0, r1
     1e4:	fb00 f808 	mul.w	r8, r0, r8
     1e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     1ec:	45a0      	cmp	r8, r4
     1ee:	d905      	bls.n	1fc <__udivmoddi4+0x88>
     1f0:	192c      	adds	r4, r5, r4
     1f2:	d202      	bcs.n	1fa <__udivmoddi4+0x86>
     1f4:	45a0      	cmp	r8, r4
     1f6:	f200 810e 	bhi.w	416 <CONFIG_FLASH_SIZE+0x16>
     1fa:	3801      	subs	r0, #1
     1fc:	eba4 0408 	sub.w	r4, r4, r8
     200:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     204:	2700      	movs	r7, #0
     206:	b11e      	cbz	r6, 210 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x10>
     208:	40d4      	lsrs	r4, r2
     20a:	2300      	movs	r3, #0
     20c:	e9c6 4300 	strd	r4, r3, [r6]
     210:	4639      	mov	r1, r7
     212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     216:	2a00      	cmp	r2, #0
     218:	d051      	beq.n	2be <CONFIG_PM_PARTITION_SIZE_PROVISION+0x3e>
     21a:	fab2 f282 	clz	r2, r2
     21e:	2a00      	cmp	r2, #0
     220:	f040 80af 	bne.w	382 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x102>
     224:	1b49      	subs	r1, r1, r5
     226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     22a:	fa1f f885 	uxth.w	r8, r5
     22e:	2701      	movs	r7, #1
     230:	0c23      	lsrs	r3, r4, #16
     232:	fbb1 fcfe 	udiv	ip, r1, lr
     236:	fb0e 111c 	mls	r1, lr, ip, r1
     23a:	fb08 f00c 	mul.w	r0, r8, ip
     23e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     242:	4298      	cmp	r0, r3
     244:	d90a      	bls.n	25c <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x5c>
     246:	18eb      	adds	r3, r5, r3
     248:	bf2c      	ite	cs
     24a:	2101      	movcs	r1, #1
     24c:	2100      	movcc	r1, #0
     24e:	4298      	cmp	r0, r3
     250:	d902      	bls.n	258 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x58>
     252:	2900      	cmp	r1, #0
     254:	f000 80d7 	beq.w	406 <CONFIG_FLASH_SIZE+0x6>
     258:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
     25c:	1a19      	subs	r1, r3, r0
     25e:	b2a3      	uxth	r3, r4
     260:	fbb1 f0fe 	udiv	r0, r1, lr
     264:	fb0e 1110 	mls	r1, lr, r0, r1
     268:	fb08 f800 	mul.w	r8, r8, r0
     26c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     270:	45a0      	cmp	r8, r4
     272:	d905      	bls.n	280 <CONFIG_PM_PARTITION_SIZE_PROVISION>
     274:	192c      	adds	r4, r5, r4
     276:	d202      	bcs.n	27e <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x7e>
     278:	45a0      	cmp	r8, r4
     27a:	f200 80c1 	bhi.w	400 <CONFIG_FLASH_SIZE>
     27e:	3801      	subs	r0, #1
     280:	eba4 0408 	sub.w	r4, r4, r8
     284:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     288:	e7bd      	b.n	206 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x6>
     28a:	428b      	cmp	r3, r1
     28c:	d908      	bls.n	2a0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x20>
     28e:	2e00      	cmp	r6, #0
     290:	d074      	beq.n	37c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xfc>
     292:	2700      	movs	r7, #0
     294:	e9c6 0100 	strd	r0, r1, [r6]
     298:	4638      	mov	r0, r7
     29a:	4639      	mov	r1, r7
     29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     2a0:	fab3 f783 	clz	r7, r3
     2a4:	b967      	cbnz	r7, 2c0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x40>
     2a6:	428b      	cmp	r3, r1
     2a8:	f0c0 80a4 	bcc.w	3f4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x174>
     2ac:	4282      	cmp	r2, r0
     2ae:	f240 80a1 	bls.w	3f4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x174>
     2b2:	4638      	mov	r0, r7
     2b4:	2e00      	cmp	r6, #0
     2b6:	d0ab      	beq.n	210 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x10>
     2b8:	e9c6 4900 	strd	r4, r9, [r6]
     2bc:	e7a8      	b.n	210 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x10>
     2be:	deff      	udf	#255	; 0xff
     2c0:	f1c7 0520 	rsb	r5, r7, #32
     2c4:	40bb      	lsls	r3, r7
     2c6:	fa02 fc07 	lsl.w	ip, r2, r7
     2ca:	fa01 f407 	lsl.w	r4, r1, r7
     2ce:	40ea      	lsrs	r2, r5
     2d0:	fa20 f805 	lsr.w	r8, r0, r5
     2d4:	40e9      	lsrs	r1, r5
     2d6:	fa00 fe07 	lsl.w	lr, r0, r7
     2da:	431a      	orrs	r2, r3
     2dc:	ea48 0404 	orr.w	r4, r8, r4
     2e0:	ea4f 4812 	mov.w	r8, r2, lsr #16
     2e4:	0c20      	lsrs	r0, r4, #16
     2e6:	fa1f f982 	uxth.w	r9, r2
     2ea:	fbb1 faf8 	udiv	sl, r1, r8
     2ee:	fb08 111a 	mls	r1, r8, sl, r1
     2f2:	fb0a fb09 	mul.w	fp, sl, r9
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	458b      	cmp	fp, r1
     2fc:	d90a      	bls.n	314 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x94>
     2fe:	1851      	adds	r1, r2, r1
     300:	bf2c      	ite	cs
     302:	2301      	movcs	r3, #1
     304:	2300      	movcc	r3, #0
     306:	458b      	cmp	fp, r1
     308:	d902      	bls.n	310 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x90>
     30a:	2b00      	cmp	r3, #0
     30c:	f000 8088 	beq.w	420 <CONFIG_FLASH_SIZE+0x20>
     310:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
     314:	eba1 010b 	sub.w	r1, r1, fp
     318:	b2a4      	uxth	r4, r4
     31a:	fbb1 f0f8 	udiv	r0, r1, r8
     31e:	fb08 1110 	mls	r1, r8, r0, r1
     322:	fb00 f909 	mul.w	r9, r0, r9
     326:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
     32a:	4589      	cmp	r9, r1
     32c:	d904      	bls.n	338 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb8>
     32e:	1851      	adds	r1, r2, r1
     330:	d201      	bcs.n	336 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb6>
     332:	4589      	cmp	r9, r1
     334:	d87b      	bhi.n	42e <CONFIG_FLASH_SIZE+0x2e>
     336:	3801      	subs	r0, #1
     338:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     33c:	eba1 0109 	sub.w	r1, r1, r9
     340:	fba0 890c 	umull	r8, r9, r0, ip
     344:	4549      	cmp	r1, r9
     346:	4644      	mov	r4, r8
     348:	464b      	mov	r3, r9
     34a:	d302      	bcc.n	352 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd2>
     34c:	d106      	bne.n	35c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xdc>
     34e:	45c6      	cmp	lr, r8
     350:	d204      	bcs.n	35c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xdc>
     352:	3801      	subs	r0, #1
     354:	ebb8 040c 	subs.w	r4, r8, ip
     358:	eb69 0302 	sbc.w	r3, r9, r2
     35c:	2e00      	cmp	r6, #0
     35e:	d05d      	beq.n	41c <CONFIG_FLASH_SIZE+0x1c>
     360:	ebbe 0204 	subs.w	r2, lr, r4
     364:	eb61 0103 	sbc.w	r1, r1, r3
     368:	fa01 f505 	lsl.w	r5, r1, r5
     36c:	fa22 f307 	lsr.w	r3, r2, r7
     370:	40f9      	lsrs	r1, r7
     372:	2700      	movs	r7, #0
     374:	431d      	orrs	r5, r3
     376:	e9c6 5100 	strd	r5, r1, [r6]
     37a:	e749      	b.n	210 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x10>
     37c:	4637      	mov	r7, r6
     37e:	4630      	mov	r0, r6
     380:	e746      	b.n	210 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x10>
     382:	f1c2 0020 	rsb	r0, r2, #32
     386:	4095      	lsls	r5, r2
     388:	fa01 f702 	lsl.w	r7, r1, r2
     38c:	fa21 f300 	lsr.w	r3, r1, r0
     390:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     394:	fa24 f100 	lsr.w	r1, r4, r0
     398:	fa1f f885 	uxth.w	r8, r5
     39c:	4094      	lsls	r4, r2
     39e:	4339      	orrs	r1, r7
     3a0:	fbb3 f0fe 	udiv	r0, r3, lr
     3a4:	0c0f      	lsrs	r7, r1, #16
     3a6:	fb0e 3310 	mls	r3, lr, r0, r3
     3aa:	fb00 fc08 	mul.w	ip, r0, r8
     3ae:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
     3b2:	459c      	cmp	ip, r3
     3b4:	d907      	bls.n	3c6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x146>
     3b6:	18eb      	adds	r3, r5, r3
     3b8:	bf2c      	ite	cs
     3ba:	2701      	movcs	r7, #1
     3bc:	2700      	movcc	r7, #0
     3be:	459c      	cmp	ip, r3
     3c0:	d900      	bls.n	3c4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x144>
     3c2:	b38f      	cbz	r7, 428 <CONFIG_FLASH_SIZE+0x28>
     3c4:	3801      	subs	r0, #1
     3c6:	eba3 030c 	sub.w	r3, r3, ip
     3ca:	b289      	uxth	r1, r1
     3cc:	fbb3 f7fe 	udiv	r7, r3, lr
     3d0:	fb0e 3317 	mls	r3, lr, r7, r3
     3d4:	fb07 fc08 	mul.w	ip, r7, r8
     3d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3dc:	458c      	cmp	ip, r1
     3de:	d904      	bls.n	3ea <CONFIG_PM_PARTITION_SIZE_PROVISION+0x16a>
     3e0:	1869      	adds	r1, r5, r1
     3e2:	d201      	bcs.n	3e8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x168>
     3e4:	458c      	cmp	ip, r1
     3e6:	d825      	bhi.n	434 <CONFIG_FLASH_SIZE+0x34>
     3e8:	3f01      	subs	r7, #1
     3ea:	eba1 010c 	sub.w	r1, r1, ip
     3ee:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
     3f2:	e71d      	b.n	230 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x30>
     3f4:	1a84      	subs	r4, r0, r2
     3f6:	eb61 0303 	sbc.w	r3, r1, r3
     3fa:	2001      	movs	r0, #1
     3fc:	4699      	mov	r9, r3
     3fe:	e759      	b.n	2b4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x34>
     400:	3802      	subs	r0, #2
     402:	442c      	add	r4, r5
     404:	e73c      	b.n	280 <CONFIG_PM_PARTITION_SIZE_PROVISION>
     406:	f1ac 0c02 	sub.w	ip, ip, #2
     40a:	442b      	add	r3, r5
     40c:	e726      	b.n	25c <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x5c>
     40e:	f1ac 0c02 	sub.w	ip, ip, #2
     412:	442b      	add	r3, r5
     414:	e6e0      	b.n	1d8 <__udivmoddi4+0x64>
     416:	3802      	subs	r0, #2
     418:	442c      	add	r4, r5
     41a:	e6ef      	b.n	1fc <__udivmoddi4+0x88>
     41c:	4637      	mov	r7, r6
     41e:	e6f7      	b.n	210 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x10>
     420:	f1aa 0a02 	sub.w	sl, sl, #2
     424:	4411      	add	r1, r2
     426:	e775      	b.n	314 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x94>
     428:	3802      	subs	r0, #2
     42a:	442b      	add	r3, r5
     42c:	e7cb      	b.n	3c6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x146>
     42e:	3802      	subs	r0, #2
     430:	4411      	add	r1, r2
     432:	e781      	b.n	338 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb8>
     434:	3f02      	subs	r7, #2
     436:	4429      	add	r1, r5
     438:	e7d7      	b.n	3ea <CONFIG_PM_PARTITION_SIZE_PROVISION+0x16a>
     43a:	bf00      	nop

0000043c <__aeabi_idiv0>:
     43c:	4770      	bx	lr
     43e:	bf00      	nop

00000440 <main>:
}
#endif/* defined(CONFIG_LOG) && !defined(CONFIG_LOG_IMMEDIATE) &&\
        !defined(CONFIG_LOG_PROCESS_THREAD) */

void main(void)
{
     440:	b530      	push	{r4, r5, lr}
     442:	b085      	sub	sp, #20
    struct boot_rsp rsp;
    int rc;

    BOOT_LOG_INF("Starting bootloader");
     444:	f04f 0000 	mov.w	r0, #0
     448:	2303      	movs	r3, #3
     44a:	f363 0002 	bfi	r0, r3, #0, #3
     44e:	f36f 00c5 	bfc	r0, #3, #3
     452:	4b3e      	ldr	r3, [pc, #248]	; (54c <main+0x10c>)
     454:	4a3e      	ldr	r2, [pc, #248]	; (550 <main+0x110>)
     456:	1a9b      	subs	r3, r3, r2
     458:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     45c:	f363 108f 	bfi	r0, r3, #6, #10
     460:	493c      	ldr	r1, [pc, #240]	; (554 <main+0x114>)
     462:	f005 fdca 	bl	5ffa <log_string_sync>

    os_heap_init();
     466:	f000 f8b5 	bl	5d4 <os_heap_init>

    ZEPHYR_BOOT_LOG_START();

#if (!defined(CONFIG_XTENSA) && defined(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL))
    if (!flash_device_get_binding(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL)) {
     46a:	483b      	ldr	r0, [pc, #236]	; (558 <main+0x118>)
     46c:	f000 f882 	bl	574 <flash_device_get_binding>
     470:	b1a8      	cbz	r0, 49e <main+0x5e>
        wait_for_usb_dfu();
        BOOT_LOG_INF("USB DFU wait time elapsed");
    }
#endif

    rc = boot_go(&rsp);
     472:	a801      	add	r0, sp, #4
     474:	f000 fdce 	bl	1014 <boot_go>
    if (rc != 0) {
     478:	b310      	cbz	r0, 4c0 <main+0x80>
        BOOT_LOG_ERR("Unable to find bootable image");
     47a:	f04f 0000 	mov.w	r0, #0
     47e:	2301      	movs	r3, #1
     480:	f363 0002 	bfi	r0, r3, #0, #3
     484:	f36f 00c5 	bfc	r0, #3, #3
     488:	4b30      	ldr	r3, [pc, #192]	; (54c <main+0x10c>)
     48a:	4a31      	ldr	r2, [pc, #196]	; (550 <main+0x110>)
     48c:	1a9b      	subs	r3, r3, r2
     48e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     492:	f363 108f 	bfi	r0, r3, #6, #10
     496:	4931      	ldr	r1, [pc, #196]	; (55c <main+0x11c>)
     498:	f005 fdaf 	bl	5ffa <log_string_sync>
        while (1)
            ;
     49c:	e7fe      	b.n	49c <main+0x5c>
        BOOT_LOG_ERR("Flash device %s not found",
     49e:	2301      	movs	r3, #1
     4a0:	f363 0002 	bfi	r0, r3, #0, #3
     4a4:	f36f 00c5 	bfc	r0, #3, #3
     4a8:	4b28      	ldr	r3, [pc, #160]	; (54c <main+0x10c>)
     4aa:	4a29      	ldr	r2, [pc, #164]	; (550 <main+0x110>)
     4ac:	1a9b      	subs	r3, r3, r2
     4ae:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     4b2:	f363 108f 	bfi	r0, r3, #6, #10
     4b6:	4a28      	ldr	r2, [pc, #160]	; (558 <main+0x118>)
     4b8:	4929      	ldr	r1, [pc, #164]	; (560 <main+0x120>)
     4ba:	f005 fd9e 	bl	5ffa <log_string_sync>
            ;
     4be:	e7fe      	b.n	4be <main+0x7e>
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     4c0:	2503      	movs	r5, #3
     4c2:	f04f 0000 	mov.w	r0, #0
     4c6:	f365 0002 	bfi	r0, r5, #0, #3
     4ca:	f36f 00c5 	bfc	r0, #3, #3
     4ce:	4c1f      	ldr	r4, [pc, #124]	; (54c <main+0x10c>)
     4d0:	4b1f      	ldr	r3, [pc, #124]	; (550 <main+0x110>)
     4d2:	1ae4      	subs	r4, r4, r3
     4d4:	f3c4 04c9 	ubfx	r4, r4, #3, #10
     4d8:	f364 108f 	bfi	r0, r4, #6, #10
     4dc:	9a03      	ldr	r2, [sp, #12]
     4de:	4921      	ldr	r1, [pc, #132]	; (564 <main+0x124>)
     4e0:	f005 fd8b 	bl	5ffa <log_string_sync>
                 rsp.br_image_off);

    BOOT_LOG_INF("Jumping to the first image slot");
     4e4:	f04f 0000 	mov.w	r0, #0
     4e8:	f365 0002 	bfi	r0, r5, #0, #3
     4ec:	f36f 00c5 	bfc	r0, #3, #3
     4f0:	f364 108f 	bfi	r0, r4, #6, #10
     4f4:	491c      	ldr	r1, [pc, #112]	; (568 <main+0x128>)
     4f6:	f005 fd80 	bl	5ffa <log_string_sync>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     4fa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     4fe:	2000      	movs	r0, #0
     500:	f002 ff6a 	bl	33d8 <fprotect_area>

    if (rc != 0) {
     504:	b160      	cbz	r0, 520 <main+0xe0>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
     506:	f04f 0000 	mov.w	r0, #0
     50a:	2301      	movs	r3, #1
     50c:	f363 0002 	bfi	r0, r3, #0, #3
     510:	f36f 00c5 	bfc	r0, #3, #3
     514:	f364 108f 	bfi	r0, r4, #6, #10
     518:	4914      	ldr	r1, [pc, #80]	; (56c <main+0x12c>)
     51a:	f005 fd6e 	bl	5ffa <log_string_sync>
        while (1)
            ;
     51e:	e7fe      	b.n	51e <main+0xde>
    pcd_lock_ram();
#endif

    ZEPHYR_BOOT_LOG_STOP();

    do_boot(&rsp);
     520:	a801      	add	r0, sp, #4
     522:	f004 fbd7 	bl	4cd4 <do_boot>

    BOOT_LOG_ERR("Never should get here");
     526:	f04f 0000 	mov.w	r0, #0
     52a:	2301      	movs	r3, #1
     52c:	f363 0002 	bfi	r0, r3, #0, #3
     530:	f36f 00c5 	bfc	r0, #3, #3
     534:	4b05      	ldr	r3, [pc, #20]	; (54c <main+0x10c>)
     536:	4a06      	ldr	r2, [pc, #24]	; (550 <main+0x110>)
     538:	1a9b      	subs	r3, r3, r2
     53a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     53e:	f363 108f 	bfi	r0, r3, #6, #10
     542:	490b      	ldr	r1, [pc, #44]	; (570 <main+0x130>)
     544:	f005 fd59 	bl	5ffa <log_string_sync>
    while (1)
        ;
     548:	e7fe      	b.n	548 <main+0x108>
     54a:	bf00      	nop
     54c:	00008aa8 	.word	0x00008aa8
     550:	00008aa0 	.word	0x00008aa0
     554:	00008b08 	.word	0x00008b08
     558:	00008b1c 	.word	0x00008b1c
     55c:	00008b4c 	.word	0x00008b4c
     560:	00008b30 	.word	0x00008b30
     564:	00008b6c 	.word	0x00008b6c
     568:	00008b98 	.word	0x00008b98
     56c:	00008bb8 	.word	0x00008bb8
     570:	00008be8 	.word	0x00008be8

00000574 <flash_device_get_binding>:
#endif

static const struct device *flash_dev;

const struct device *flash_device_get_binding(char *dev_name)
{
     574:	b508      	push	{r3, lr}
    if (!flash_dev) {
     576:	4b05      	ldr	r3, [pc, #20]	; (58c <flash_device_get_binding+0x18>)
     578:	681b      	ldr	r3, [r3, #0]
     57a:	b113      	cbz	r3, 582 <flash_device_get_binding+0xe>
        flash_dev = device_get_binding(dev_name);
    }
    return flash_dev;
}
     57c:	4b03      	ldr	r3, [pc, #12]	; (58c <flash_device_get_binding+0x18>)
     57e:	6818      	ldr	r0, [r3, #0]
     580:	bd08      	pop	{r3, pc}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     582:	f004 f8c9 	bl	4718 <z_impl_device_get_binding>
        flash_dev = device_get_binding(dev_name);
     586:	4b01      	ldr	r3, [pc, #4]	; (58c <flash_device_get_binding+0x18>)
     588:	6018      	str	r0, [r3, #0]
     58a:	e7f7      	b.n	57c <flash_device_get_binding+0x8>
     58c:	20000180 	.word	0x20000180

00000590 <flash_device_base>:

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    if (fd_id != FLASH_DEVICE_ID) {
     590:	b910      	cbnz	r0, 598 <flash_device_base+0x8>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
    }
    *ret = FLASH_DEVICE_BASE;
     592:	2000      	movs	r0, #0
     594:	6008      	str	r0, [r1, #0]
    return 0;
}
     596:	4770      	bx	lr
{
     598:	b508      	push	{r3, lr}
     59a:	4602      	mov	r2, r0
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     59c:	f04f 0000 	mov.w	r0, #0
     5a0:	2301      	movs	r3, #1
     5a2:	f363 0002 	bfi	r0, r3, #0, #3
     5a6:	f36f 00c5 	bfc	r0, #3, #3
     5aa:	4b07      	ldr	r3, [pc, #28]	; (5c8 <flash_device_base+0x38>)
     5ac:	4907      	ldr	r1, [pc, #28]	; (5cc <flash_device_base+0x3c>)
     5ae:	1a5b      	subs	r3, r3, r1
     5b0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     5b4:	f363 108f 	bfi	r0, r3, #6, #10
     5b8:	2300      	movs	r3, #0
     5ba:	4905      	ldr	r1, [pc, #20]	; (5d0 <flash_device_base+0x40>)
     5bc:	f005 fd1d 	bl	5ffa <log_string_sync>
        return -EINVAL;
     5c0:	f06f 0015 	mvn.w	r0, #21
}
     5c4:	bd08      	pop	{r3, pc}
     5c6:	bf00      	nop
     5c8:	00008aa8 	.word	0x00008aa8
     5cc:	00008aa0 	.word	0x00008aa0
     5d0:	00008c08 	.word	0x00008c08

000005d4 <os_heap_init>:

/*
 * Initialize mbedtls to be able to use the local heap.
 */
void os_heap_init(void)
{
     5d4:	b508      	push	{r3, lr}
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
     5d6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
     5da:	4802      	ldr	r0, [pc, #8]	; (5e4 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x8>)
     5dc:	f003 fb06 	bl	3bec <mbedtls_memory_buffer_alloc_init>
}
     5e0:	bd08      	pop	{r3, pc}
     5e2:	bf00      	nop
     5e4:	20000184 	.word	0x20000184

000005e8 <bootutil_find_key>:

#ifdef EXPECTED_SIG_TLV
#if !defined(MCUBOOT_HW_KEY)
static int
bootutil_find_key(uint8_t *keyhash, uint8_t keyhash_len)
{
     5e8:	b570      	push	{r4, r5, r6, lr}
     5ea:	b0a4      	sub	sp, #144	; 0x90
    bootutil_sha256_context sha256_ctx;
    int i;
    const struct bootutil_key *key;
    uint8_t hash[32];

    if (keyhash_len > 32) {
     5ec:	2920      	cmp	r1, #32
     5ee:	d828      	bhi.n	642 <bootutil_find_key+0x5a>
     5f0:	460d      	mov	r5, r1
     5f2:	4606      	mov	r6, r0
        return -1;
    }

    for (i = 0; i < bootutil_key_cnt; i++) {
     5f4:	2400      	movs	r4, #0
     5f6:	4b14      	ldr	r3, [pc, #80]	; (648 <bootutil_find_key+0x60>)
     5f8:	681b      	ldr	r3, [r3, #0]
     5fa:	42a3      	cmp	r3, r4
     5fc:	dd1c      	ble.n	638 <bootutil_find_key+0x50>
#ifdef MCUBOOT_USE_MBED_TLS
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
     5fe:	a809      	add	r0, sp, #36	; 0x24
     600:	f007 ff0c 	bl	841c <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     604:	2100      	movs	r1, #0
     606:	a809      	add	r0, sp, #36	; 0x24
     608:	f003 fc1e 	bl	3e48 <mbedtls_sha256_starts_ret>
        key = &bootutil_keys[i];
        bootutil_sha256_init(&sha256_ctx);
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     60c:	4b0f      	ldr	r3, [pc, #60]	; (64c <bootutil_find_key+0x64>)
     60e:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
     612:	6852      	ldr	r2, [r2, #4]

static inline void bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
     614:	6812      	ldr	r2, [r2, #0]
     616:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
     61a:	a809      	add	r0, sp, #36	; 0x24
     61c:	f007 ff04 	bl	8428 <mbedtls_sha256_update_ret>
}

static inline void bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    (void)mbedtls_sha256_finish_ret(ctx, output);
     620:	a901      	add	r1, sp, #4
     622:	a809      	add	r0, sp, #36	; 0x24
     624:	f007 ff43 	bl	84ae <mbedtls_sha256_finish_ret>
        bootutil_sha256_finish(&sha256_ctx, hash);
        if (!memcmp(hash, keyhash, keyhash_len)) {
     628:	462a      	mov	r2, r5
     62a:	4631      	mov	r1, r6
     62c:	a801      	add	r0, sp, #4
     62e:	f005 ffe7 	bl	6600 <memcmp>
     632:	b118      	cbz	r0, 63c <bootutil_find_key+0x54>
    for (i = 0; i < bootutil_key_cnt; i++) {
     634:	3401      	adds	r4, #1
     636:	e7de      	b.n	5f6 <bootutil_find_key+0xe>
            return i;
        }
    }
    return -1;
     638:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
     63c:	4620      	mov	r0, r4
     63e:	b024      	add	sp, #144	; 0x90
     640:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
     642:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     646:	e7f9      	b.n	63c <bootutil_find_key+0x54>
     648:	00008c2c 	.word	0x00008c2c
     64c:	00008c30 	.word	0x00008c30

00000650 <bootutil_img_validate>:
int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     654:	b0d6      	sub	sp, #344	; 0x158
     656:	4617      	mov	r7, r2
     658:	461d      	mov	r5, r3
    uint32_t security_cnt = UINT32_MAX;
    uint32_t img_security_cnt = 0;
    int32_t security_counter_valid = 0;
#endif

    rc = bootutil_img_hash(enc_state, image_index, hdr, fap, tmp_buf,
     65a:	9c5f      	ldr	r4, [sp, #380]	; 0x17c
     65c:	9404      	str	r4, [sp, #16]
     65e:	9c5e      	ldr	r4, [sp, #376]	; 0x178
     660:	9403      	str	r4, [sp, #12]
     662:	ac06      	add	r4, sp, #24
     664:	9402      	str	r4, [sp, #8]
     666:	9c5d      	ldr	r4, [sp, #372]	; 0x174
     668:	9401      	str	r4, [sp, #4]
     66a:	9c5c      	ldr	r4, [sp, #368]	; 0x170
     66c:	9400      	str	r4, [sp, #0]
     66e:	f004 fb78 	bl	4d62 <bootutil_img_hash>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
     672:	4606      	mov	r6, r0
     674:	2800      	cmp	r0, #0
     676:	f040 8082 	bne.w	77e <bootutil_img_validate+0x12e>
        return rc;
    }

    if (out_hash) {
     67a:	9b60      	ldr	r3, [sp, #384]	; 0x180
     67c:	b123      	cbz	r3, 688 <bootutil_img_validate+0x38>
        memcpy(out_hash, hash, 32);
     67e:	2220      	movs	r2, #32
     680:	a906      	add	r1, sp, #24
     682:	4618      	mov	r0, r3
     684:	f005 ffd3 	bl	662e <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     688:	2300      	movs	r3, #0
     68a:	9300      	str	r3, [sp, #0]
     68c:	f64f 73ff 	movw	r3, #65535	; 0xffff
     690:	462a      	mov	r2, r5
     692:	4639      	mov	r1, r7
     694:	a84e      	add	r0, sp, #312	; 0x138
     696:	f004 fba3 	bl	4de0 <bootutil_tlv_iter_begin>
    if (rc) {
     69a:	4606      	mov	r6, r0
     69c:	2800      	cmp	r0, #0
     69e:	d16e      	bne.n	77e <bootutil_img_validate+0x12e>
    int valid_signature = 0;
     6a0:	4607      	mov	r7, r0
    int sha256_valid = 0;
     6a2:	4680      	mov	r8, r0
    int key_id = -1;
     6a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     6a8:	e01d      	b.n	6e6 <bootutil_img_validate+0x96>
             */
#endif /* !MCUBOOT_HW_KEY */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
                key_id = -1;
     6aa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     6ae:	e01a      	b.n	6e6 <bootutil_img_validate+0x96>
     6b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     6b4:	e017      	b.n	6e6 <bootutil_img_validate+0x96>
            }
            rc = bootutil_verify_sig(hash, sizeof(hash), buf, len, key_id);
            if (rc == 0) {
                valid_signature = 1;
            }
            key_id = -1;
     6b6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
                valid_signature = 1;
     6ba:	2701      	movs	r7, #1
     6bc:	e013      	b.n	6e6 <bootutil_img_validate+0x96>
            if (len != sizeof(hash)) {
     6be:	f8bd 3152 	ldrh.w	r3, [sp, #338]	; 0x152
     6c2:	2b20      	cmp	r3, #32
     6c4:	d15f      	bne.n	786 <bootutil_img_validate+0x136>
            rc = flash_area_read(fap, off, buf, sizeof hash);
     6c6:	aa0e      	add	r2, sp, #56	; 0x38
     6c8:	9955      	ldr	r1, [sp, #340]	; 0x154
     6ca:	4628      	mov	r0, r5
     6cc:	f005 fd7e 	bl	61cc <flash_area_read>
            if (rc) {
     6d0:	2800      	cmp	r0, #0
     6d2:	d15b      	bne.n	78c <bootutil_img_validate+0x13c>
            if (memcmp(hash, buf, sizeof(hash))) {
     6d4:	2220      	movs	r2, #32
     6d6:	a90e      	add	r1, sp, #56	; 0x38
     6d8:	a806      	add	r0, sp, #24
     6da:	f005 ff91 	bl	6600 <memcmp>
     6de:	2800      	cmp	r0, #0
     6e0:	d156      	bne.n	790 <bootutil_img_validate+0x140>
            sha256_valid = 1;
     6e2:	f04f 0801 	mov.w	r8, #1
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     6e6:	ab54      	add	r3, sp, #336	; 0x150
     6e8:	f50d 72a9 	add.w	r2, sp, #338	; 0x152
     6ec:	a955      	add	r1, sp, #340	; 0x154
     6ee:	a84e      	add	r0, sp, #312	; 0x138
     6f0:	f004 fbdb 	bl	4eaa <bootutil_tlv_iter_next>
        if (rc < 0) {
     6f4:	2800      	cmp	r0, #0
     6f6:	db40      	blt.n	77a <bootutil_img_validate+0x12a>
        } else if (rc > 0) {
     6f8:	dc38      	bgt.n	76c <bootutil_img_validate+0x11c>
        if (type == IMAGE_TLV_SHA256) {
     6fa:	f8bd 3150 	ldrh.w	r3, [sp, #336]	; 0x150
     6fe:	2b10      	cmp	r3, #16
     700:	d0dd      	beq.n	6be <bootutil_img_validate+0x6e>
        } else if (type == IMAGE_TLV_KEYHASH) {
     702:	2b01      	cmp	r3, #1
     704:	d021      	beq.n	74a <bootutil_img_validate+0xfa>
        } else if (type == EXPECTED_SIG_TLV) {
     706:	2b20      	cmp	r3, #32
     708:	d1ed      	bne.n	6e6 <bootutil_img_validate+0x96>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     70a:	2c00      	cmp	r4, #0
     70c:	dbcd      	blt.n	6aa <bootutil_img_validate+0x5a>
     70e:	4b29      	ldr	r3, [pc, #164]	; (7b4 <bootutil_img_validate+0x164>)
     710:	681b      	ldr	r3, [r3, #0]
     712:	42a3      	cmp	r3, r4
     714:	ddcc      	ble.n	6b0 <bootutil_img_validate+0x60>
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     716:	f8bd 3152 	ldrh.w	r3, [sp, #338]	; 0x152
     71a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     71e:	d13f      	bne.n	7a0 <bootutil_img_validate+0x150>
            rc = flash_area_read(fap, off, buf, len);
     720:	aa0e      	add	r2, sp, #56	; 0x38
     722:	9955      	ldr	r1, [sp, #340]	; 0x154
     724:	4628      	mov	r0, r5
     726:	f005 fd51 	bl	61cc <flash_area_read>
            if (rc) {
     72a:	2800      	cmp	r0, #0
     72c:	d13b      	bne.n	7a6 <bootutil_img_validate+0x156>
            rc = bootutil_verify_sig(hash, sizeof(hash), buf, len, key_id);
     72e:	b2e4      	uxtb	r4, r4
     730:	9400      	str	r4, [sp, #0]
     732:	f8bd 3152 	ldrh.w	r3, [sp, #338]	; 0x152
     736:	aa0e      	add	r2, sp, #56	; 0x38
     738:	2120      	movs	r1, #32
     73a:	a806      	add	r0, sp, #24
     73c:	f000 f8b0 	bl	8a0 <bootutil_verify_sig>
            if (rc == 0) {
     740:	2800      	cmp	r0, #0
     742:	d0b8      	beq.n	6b6 <bootutil_img_validate+0x66>
            key_id = -1;
     744:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     748:	e7cd      	b.n	6e6 <bootutil_img_validate+0x96>
            if (len > 32) {
     74a:	f8bd 3152 	ldrh.w	r3, [sp, #338]	; 0x152
     74e:	2b20      	cmp	r3, #32
     750:	d821      	bhi.n	796 <bootutil_img_validate+0x146>
            rc = flash_area_read(fap, off, buf, len);
     752:	aa0e      	add	r2, sp, #56	; 0x38
     754:	9955      	ldr	r1, [sp, #340]	; 0x154
     756:	4628      	mov	r0, r5
     758:	f005 fd38 	bl	61cc <flash_area_read>
            if (rc) {
     75c:	b9f0      	cbnz	r0, 79c <bootutil_img_validate+0x14c>
            key_id = bootutil_find_key(buf, len);
     75e:	f89d 1152 	ldrb.w	r1, [sp, #338]	; 0x152
     762:	a80e      	add	r0, sp, #56	; 0x38
     764:	f7ff ff40 	bl	5e8 <bootutil_find_key>
     768:	4604      	mov	r4, r0
     76a:	e7bc      	b.n	6e6 <bootutil_img_validate+0x96>
            security_counter_valid = 1;
#endif /* MCUBOOT_HW_ROLLBACK_PROT */
        }
    }

    if (!sha256_valid) {
     76c:	f1b8 0f00 	cmp.w	r8, #0
     770:	d01c      	beq.n	7ac <bootutil_img_validate+0x15c>
        return -1;
#ifdef EXPECTED_SIG_TLV
    } else if (!valid_signature) {
     772:	b927      	cbnz	r7, 77e <bootutil_img_validate+0x12e>
        return -1;
     774:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
     778:	e001      	b.n	77e <bootutil_img_validate+0x12e>
            return -1;
     77a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
        return -1;
#endif
    }

    return 0;
}
     77e:	4630      	mov	r0, r6
     780:	b056      	add	sp, #344	; 0x158
     782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                return -1;
     786:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
     78a:	e7f8      	b.n	77e <bootutil_img_validate+0x12e>
                return rc;
     78c:	4606      	mov	r6, r0
     78e:	e7f6      	b.n	77e <bootutil_img_validate+0x12e>
                return -1;
     790:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
     794:	e7f3      	b.n	77e <bootutil_img_validate+0x12e>
                return -1;
     796:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
     79a:	e7f0      	b.n	77e <bootutil_img_validate+0x12e>
                return rc;
     79c:	4606      	mov	r6, r0
     79e:	e7ee      	b.n	77e <bootutil_img_validate+0x12e>
                return -1;
     7a0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
     7a4:	e7eb      	b.n	77e <bootutil_img_validate+0x12e>
                return -1;
     7a6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
     7aa:	e7e8      	b.n	77e <bootutil_img_validate+0x12e>
        return -1;
     7ac:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
     7b0:	e7e5      	b.n	77e <bootutil_img_validate+0x12e>
     7b2:	bf00      	nop
     7b4:	00008c2c 	.word	0x00008c2c

000007b8 <bootutil_cmp_rsasig>:
 * values.
 */
static int
bootutil_cmp_rsasig(mbedtls_rsa_context *ctx, uint8_t *hash, uint32_t hlen,
  uint8_t *sig)
{
     7b8:	b570      	push	{r4, r5, r6, lr}
     7ba:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
    uint8_t em[MBEDTLS_MPI_MAX_SIZE];
    uint8_t db_mask[PSS_MASK_LEN];
    uint8_t h2[PSS_HLEN];
    int i;

    if (ctx->len != PSS_EMLEN || PSS_EMLEN > MBEDTLS_MPI_MAX_SIZE) {
     7be:	6844      	ldr	r4, [r0, #4]
     7c0:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
     7c4:	d155      	bne.n	872 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x72>
        return -1;
    }

    if (hlen != PSS_HLEN) {
     7c6:	2a20      	cmp	r2, #32
     7c8:	d156      	bne.n	878 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x78>
     7ca:	460e      	mov	r6, r1
        return -1;
    }

    if (mbedtls_rsa_public(ctx, sig, em)) {
     7cc:	aa41      	add	r2, sp, #260	; 0x104
     7ce:	4619      	mov	r1, r3
     7d0:	f003 faf8 	bl	3dc4 <mbedtls_rsa_public>
     7d4:	4605      	mov	r5, r0
     7d6:	2800      	cmp	r0, #0
     7d8:	d151      	bne.n	87e <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x7e>
     */

    /* Step 4.  If the rightmost octet of EM does have the value
     * 0xbc, output inconsistent and stop.
     */
    if (em[PSS_EMLEN - 1] != 0xbc) {
     7da:	f89d 3203 	ldrb.w	r3, [sp, #515]	; 0x203
     7de:	2bbc      	cmp	r3, #188	; 0xbc
     7e0:	d150      	bne.n	884 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x84>
     *
     * 8emLen - emBits is zero, so there is nothing to test here.
     */

    /* Step 7.  let dbMask = MGF(H, emLen - hLen - 1). */
    pss_mgf1(db_mask, &em[PSS_HASH_OFFSET]);
     7e2:	f20d 11e3 	addw	r1, sp, #483	; 0x1e3
     7e6:	a809      	add	r0, sp, #36	; 0x24
     7e8:	f004 fc0d 	bl	5006 <pss_mgf1>

    /* Step 8.  let DB = maskedDB xor dbMask.
     * To avoid needing an additional buffer, store the 'db' in the
     * same buffer as db_mask.  From now, to the end of this function,
     * db_mask refers to the unmasked 'db'. */
    for (i = 0; i < PSS_MASK_LEN; i++) {
     7ec:	462b      	mov	r3, r5
     7ee:	2bde      	cmp	r3, #222	; 0xde
     7f0:	dc07      	bgt.n	802 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x2>
        db_mask[i] ^= em[i];
     7f2:	aa41      	add	r2, sp, #260	; 0x104
     7f4:	5cd2      	ldrb	r2, [r2, r3]
     7f6:	a809      	add	r0, sp, #36	; 0x24
     7f8:	5cc4      	ldrb	r4, [r0, r3]
     7fa:	4062      	eors	r2, r4
     7fc:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < PSS_MASK_LEN; i++) {
     7fe:	3301      	adds	r3, #1
     800:	e7f5      	b.n	7ee <bootutil_cmp_rsasig+0x36>

    /* Step 9.  Set the leftmost 8emLen - emBits bits of the leftmost
     * octet in DB to zero.
     * pycrypto seems to always make the emBits 2047, so we need to
     * clear the top bit. */
    db_mask[0] &= 0x7F;
     802:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
     806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     80a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

    /* Step 10.  If the emLen - hLen - sLen - 2 leftmost octets of DB
     * are not zero or if the octet at position emLen - hLen - sLen -
     * 1 (the leftmost position is "position 1") does not have
     * hexadecimal value 0x01, output "inconsistent" and stop. */
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
     80e:	2dbd      	cmp	r5, #189	; 0xbd
     810:	dc05      	bgt.n	81e <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x1e>
        if (db_mask[i] != 0) {
     812:	ab09      	add	r3, sp, #36	; 0x24
     814:	5d5b      	ldrb	r3, [r3, r5]
     816:	2b00      	cmp	r3, #0
     818:	d137      	bne.n	88a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x8a>
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
     81a:	3501      	adds	r5, #1
     81c:	e7f7      	b.n	80e <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0xe>
            return -1;
        }
    }

    if (db_mask[PSS_MASK_ONE_POS] != 1) {
     81e:	f89d 30e2 	ldrb.w	r3, [sp, #226]	; 0xe2
     822:	2b01      	cmp	r3, #1
     824:	d137      	bne.n	896 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x96>
    mbedtls_sha256_init(ctx);
     826:	a881      	add	r0, sp, #516	; 0x204
     828:	f007 fdf8 	bl	841c <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     82c:	2100      	movs	r1, #0
     82e:	a881      	add	r0, sp, #516	; 0x204
     830:	f003 fb0a 	bl	3e48 <mbedtls_sha256_starts_ret>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
     834:	2208      	movs	r2, #8
     836:	4919      	ldr	r1, [pc, #100]	; (89c <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x9c>)
     838:	a881      	add	r0, sp, #516	; 0x204
     83a:	f007 fdf5 	bl	8428 <mbedtls_sha256_update_ret>
     83e:	2220      	movs	r2, #32
     840:	4631      	mov	r1, r6
     842:	a881      	add	r0, sp, #516	; 0x204
     844:	f007 fdf0 	bl	8428 <mbedtls_sha256_update_ret>
     848:	2220      	movs	r2, #32
     84a:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
     84e:	a881      	add	r0, sp, #516	; 0x204
     850:	f007 fdea 	bl	8428 <mbedtls_sha256_update_ret>
    (void)mbedtls_sha256_finish_ret(ctx, output);
     854:	a901      	add	r1, sp, #4
     856:	a881      	add	r0, sp, #516	; 0x204
     858:	f007 fe29 	bl	84ae <mbedtls_sha256_finish_ret>
    bootutil_sha256_update(&shactx, &db_mask[PSS_MASK_SALT_POS], PSS_SLEN);
    bootutil_sha256_finish(&shactx, h2);

    /* Step 14.  If H = H', output "consistent".  Otherwise, output
     * "inconsistent". */
    if (memcmp(h2, &em[PSS_HASH_OFFSET], PSS_HLEN) != 0) {
     85c:	2220      	movs	r2, #32
     85e:	f20d 11e3 	addw	r1, sp, #483	; 0x1e3
     862:	a801      	add	r0, sp, #4
     864:	f005 fecc 	bl	6600 <memcmp>
     868:	4603      	mov	r3, r0
     86a:	b180      	cbz	r0, 88e <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x8e>
        return -1;
     86c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     870:	e00d      	b.n	88e <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x8e>
        return -1;
     872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     876:	e00a      	b.n	88e <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x8e>
        return -1;
     878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     87c:	e007      	b.n	88e <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x8e>
        return -1;
     87e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     882:	e004      	b.n	88e <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x8e>
        return -1;
     884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     888:	e001      	b.n	88e <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x8e>
            return -1;
     88a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }

    return 0;
}
     88e:	4618      	mov	r0, r3
     890:	f50d 7d1c 	add.w	sp, sp, #624	; 0x270
     894:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
     896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     89a:	e7f8      	b.n	88e <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x8e>
     89c:	00008c38 	.word	0x00008c38

000008a0 <bootutil_verify_sig>:

int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     8a4:	b0ac      	sub	sp, #176	; 0xb0
     8a6:	4606      	mov	r6, r0
     8a8:	460f      	mov	r7, r1
     8aa:	4690      	mov	r8, r2
     8ac:	461d      	mov	r5, r3
     8ae:	f89d 40c8 	ldrb.w	r4, [sp, #200]	; 0xc8
    mbedtls_rsa_context ctx;
    int rc;
    uint8_t *cp;
    uint8_t *end;

    mbedtls_rsa_init(&ctx, 0, 0);
     8b2:	2200      	movs	r2, #0
     8b4:	4611      	mov	r1, r2
     8b6:	a801      	add	r0, sp, #4
     8b8:	f007 fd6a 	bl	8390 <mbedtls_rsa_init>

    cp = (uint8_t *)bootutil_keys[key_id].key;
     8bc:	4b11      	ldr	r3, [pc, #68]	; (904 <bootutil_verify_sig+0x64>)
     8be:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
     8c2:	9200      	str	r2, [sp, #0]
    end = cp + *bootutil_keys[key_id].len;
     8c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
     8c8:	685b      	ldr	r3, [r3, #4]
     8ca:	681b      	ldr	r3, [r3, #0]

    rc = bootutil_parse_rsakey(&ctx, &cp, end);
     8cc:	441a      	add	r2, r3
     8ce:	4669      	mov	r1, sp
     8d0:	a801      	add	r0, sp, #4
     8d2:	f004 fb46 	bl	4f62 <bootutil_parse_rsakey>
    if (rc || slen != ctx.len) {
     8d6:	4604      	mov	r4, r0
     8d8:	b910      	cbnz	r0, 8e0 <bootutil_verify_sig+0x40>
     8da:	9b02      	ldr	r3, [sp, #8]
     8dc:	42ab      	cmp	r3, r5
     8de:	d006      	beq.n	8ee <bootutil_verify_sig+0x4e>
        mbedtls_rsa_free(&ctx);
     8e0:	a801      	add	r0, sp, #4
     8e2:	f007 fd63 	bl	83ac <mbedtls_rsa_free>
    }
    rc = bootutil_cmp_rsasig(&ctx, hash, hlen, sig);
    mbedtls_rsa_free(&ctx);

    return rc;
}
     8e6:	4620      	mov	r0, r4
     8e8:	b02c      	add	sp, #176	; 0xb0
     8ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = bootutil_cmp_rsasig(&ctx, hash, hlen, sig);
     8ee:	4643      	mov	r3, r8
     8f0:	463a      	mov	r2, r7
     8f2:	4631      	mov	r1, r6
     8f4:	a801      	add	r0, sp, #4
     8f6:	f7ff ff5f 	bl	7b8 <bootutil_cmp_rsasig>
     8fa:	4604      	mov	r4, r0
    mbedtls_rsa_free(&ctx);
     8fc:	a801      	add	r0, sp, #4
     8fe:	f007 fd55 	bl	83ac <mbedtls_rsa_free>
    return rc;
     902:	e7f0      	b.n	8e6 <bootutil_verify_sig+0x46>
     904:	00008c30 	.word	0x00008c30

00000908 <boot_magic_decode>:
#define BOOT_SWAP_TABLES_COUNT \
    (sizeof boot_swap_tables / sizeof boot_swap_tables[0])

static int
boot_magic_decode(const uint32_t *magic)
{
     908:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     90a:	2210      	movs	r2, #16
     90c:	4903      	ldr	r1, [pc, #12]	; (91c <boot_magic_decode+0x14>)
     90e:	f005 fe77 	bl	6600 <memcmp>
     912:	b108      	cbz	r0, 918 <boot_magic_decode+0x10>
        return BOOT_MAGIC_GOOD;
    }
    return BOOT_MAGIC_BAD;
     914:	2002      	movs	r0, #2
}
     916:	bd08      	pop	{r3, pc}
        return BOOT_MAGIC_GOOD;
     918:	2001      	movs	r0, #1
     91a:	e7fc      	b.n	916 <boot_magic_decode+0xe>
     91c:	00008c40 	.word	0x00008c40

00000920 <boot_find_status>:
 *
 * @returns 0 on success, -1 on errors
 */
static int
boot_find_status(int image_index, const struct flash_area **fap)
{
     920:	b570      	push	{r4, r5, r6, lr}
     922:	b086      	sub	sp, #24
     924:	460e      	mov	r6, r1
    uint32_t magic[BOOT_MAGIC_ARR_SZ];
    uint32_t off;
    uint8_t areas[2] = {
     926:	2400      	movs	r4, #0
     928:	f8ad 4004 	strh.w	r4, [sp, #4]
     92c:	2303      	movs	r3, #3
     92e:	f88d 3004 	strb.w	r3, [sp, #4]
     * Both "slots" can end up being temporary storage for a swap and it
     * is assumed that if magic is valid then other metadata is too,
     * because magic is always written in the last step.
     */

    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     932:	e007      	b.n	944 <boot_find_status+0x24>
        }

        off = boot_magic_off(*fap);
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
        if (rc != 0) {
            flash_area_close(*fap);
     934:	6830      	ldr	r0, [r6, #0]
     936:	f005 fc48 	bl	61ca <flash_area_close>
            return rc;
     93a:	e023      	b.n	984 <boot_find_status+0x64>

        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
            return 0;
        }

        flash_area_close(*fap);
     93c:	6830      	ldr	r0, [r6, #0]
     93e:	f005 fc44 	bl	61ca <flash_area_close>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     942:	3401      	adds	r4, #1
     944:	2c01      	cmp	r4, #1
     946:	d81b      	bhi.n	980 <boot_find_status+0x60>
        rc = flash_area_open(areas[i], fap);
     948:	4631      	mov	r1, r6
     94a:	ab06      	add	r3, sp, #24
     94c:	4423      	add	r3, r4
     94e:	f813 0c14 	ldrb.w	r0, [r3, #-20]
     952:	f001 faf3 	bl	1f3c <flash_area_open>
        if (rc != 0) {
     956:	4605      	mov	r5, r0
     958:	b9a0      	cbnz	r0, 984 <boot_find_status+0x64>
        off = boot_magic_off(*fap);
     95a:	6830      	ldr	r0, [r6, #0]
    return fap->fa_size - BOOT_MAGIC_SZ;
     95c:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     95e:	2310      	movs	r3, #16
     960:	aa02      	add	r2, sp, #8
     962:	3910      	subs	r1, #16
     964:	f005 fc32 	bl	61cc <flash_area_read>
        if (rc != 0) {
     968:	4605      	mov	r5, r0
     96a:	2800      	cmp	r0, #0
     96c:	d1e2      	bne.n	934 <boot_find_status+0x14>
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     96e:	2210      	movs	r2, #16
     970:	4906      	ldr	r1, [pc, #24]	; (98c <boot_find_status+0x6c>)
     972:	a802      	add	r0, sp, #8
     974:	f005 fe44 	bl	6600 <memcmp>
     978:	4605      	mov	r5, r0
     97a:	2800      	cmp	r0, #0
     97c:	d1de      	bne.n	93c <boot_find_status+0x1c>
     97e:	e001      	b.n	984 <boot_find_status+0x64>
    }

    /* If we got here, no magic was found */
    return -1;
     980:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
     984:	4628      	mov	r0, r5
     986:	b006      	add	sp, #24
     988:	bd70      	pop	{r4, r5, r6, pc}
     98a:	bf00      	nop
     98c:	00008c40 	.word	0x00008c40

00000990 <boot_write_magic>:
}
#endif

int
boot_write_magic(const struct flash_area *fap)
{
     990:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
     992:	6881      	ldr	r1, [r0, #8]
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
     994:	2310      	movs	r3, #16
     996:	4a05      	ldr	r2, [pc, #20]	; (9ac <boot_write_magic+0x1c>)
     998:	3910      	subs	r1, #16
     99a:	f005 fc36 	bl	620a <flash_area_write>
    if (rc != 0) {
     99e:	4603      	mov	r3, r0
     9a0:	b908      	cbnz	r0, 9a6 <boot_write_magic+0x16>
        return BOOT_EFLASH;
    }

    return 0;
}
     9a2:	4618      	mov	r0, r3
     9a4:	bd08      	pop	{r3, pc}
        return BOOT_EFLASH;
     9a6:	2301      	movs	r3, #1
     9a8:	e7fb      	b.n	9a2 <boot_write_magic+0x12>
     9aa:	bf00      	nop
     9ac:	00008c40 	.word	0x00008c40

000009b0 <boot_swap_type_multi>:
}
#endif

int
boot_swap_type_multi(int image_index)
{
     9b0:	b530      	push	{r4, r5, lr}
     9b2:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
     9b4:	a902      	add	r1, sp, #8
     9b6:	2003      	movs	r0, #3
     9b8:	f004 fc2d 	bl	5216 <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
     9bc:	2800      	cmp	r0, #0
     9be:	d16d      	bne.n	a9c <boot_swap_type_multi+0xec>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
     9c0:	4669      	mov	r1, sp
     9c2:	2007      	movs	r0, #7
     9c4:	f004 fc27 	bl	5216 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
     9c8:	2800      	cmp	r0, #0
     9ca:	d169      	bne.n	aa0 <boot_swap_type_multi+0xf0>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
     9cc:	2400      	movs	r4, #0
     9ce:	e007      	b.n	9e0 <boot_swap_type_multi+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
     9d0:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
     9d2:	2b04      	cmp	r3, #4
     9d4:	d028      	beq.n	a28 <boot_swap_type_multi+0x78>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
     9d6:	f89d 200a 	ldrb.w	r2, [sp, #10]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
     9da:	4293      	cmp	r3, r2
     9dc:	d024      	beq.n	a28 <boot_swap_type_multi+0x78>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
     9de:	3401      	adds	r4, #1
     9e0:	2c02      	cmp	r4, #2
     9e2:	d847      	bhi.n	a74 <boot_swap_type_multi+0xc4>
        table = boot_swap_tables + i;
     9e4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
     9e8:	005b      	lsls	r3, r3, #1
     9ea:	4a2e      	ldr	r2, [pc, #184]	; (aa4 <boot_swap_type_multi+0xf4>)
     9ec:	18d5      	adds	r5, r2, r3
        if (boot_magic_compatible_check(table->magic_primary_slot,
     9ee:	f89d 1008 	ldrb.w	r1, [sp, #8]
     9f2:	5cd0      	ldrb	r0, [r2, r3]
     9f4:	f004 fb7c 	bl	50f0 <boot_magic_compatible_check>
     9f8:	2800      	cmp	r0, #0
     9fa:	d0f0      	beq.n	9de <boot_swap_type_multi+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
     9fc:	f89d 1000 	ldrb.w	r1, [sp]
     a00:	7868      	ldrb	r0, [r5, #1]
     a02:	f004 fb75 	bl	50f0 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
     a06:	2800      	cmp	r0, #0
     a08:	d0e9      	beq.n	9de <boot_swap_type_multi+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
     a0a:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
     a0c:	2b04      	cmp	r3, #4
     a0e:	d003      	beq.n	a18 <boot_swap_type_multi+0x68>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
     a10:	f89d 200b 	ldrb.w	r2, [sp, #11]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
     a14:	4293      	cmp	r3, r2
     a16:	d1e2      	bne.n	9de <boot_swap_type_multi+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
     a18:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
     a1a:	2b04      	cmp	r3, #4
     a1c:	d0d8      	beq.n	9d0 <boot_swap_type_multi+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
     a1e:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
     a22:	4293      	cmp	r3, r2
     a24:	d1db      	bne.n	9de <boot_swap_type_multi+0x2e>
     a26:	e7d3      	b.n	9d0 <boot_swap_type_multi+0x20>
            BOOT_LOG_INF("Swap type: %s",
     a28:	f04f 0000 	mov.w	r0, #0
     a2c:	2303      	movs	r3, #3
     a2e:	f363 0002 	bfi	r0, r3, #0, #3
     a32:	f36f 00c5 	bfc	r0, #3, #3
     a36:	4b1c      	ldr	r3, [pc, #112]	; (aa8 <boot_swap_type_multi+0xf8>)
     a38:	4a1c      	ldr	r2, [pc, #112]	; (aac <boot_swap_type_multi+0xfc>)
     a3a:	1a9b      	subs	r3, r3, r2
     a3c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     a40:	f363 108f 	bfi	r0, r3, #6, #10
     a44:	796b      	ldrb	r3, [r5, #5]
     a46:	2b02      	cmp	r3, #2
     a48:	d007      	beq.n	a5a <boot_swap_type_multi+0xaa>
     a4a:	2b03      	cmp	r3, #3
     a4c:	d010      	beq.n	a70 <boot_swap_type_multi+0xc0>
     a4e:	2b04      	cmp	r3, #4
     a50:	d001      	beq.n	a56 <boot_swap_type_multi+0xa6>
     a52:	4a17      	ldr	r2, [pc, #92]	; (ab0 <boot_swap_type_multi+0x100>)
     a54:	e002      	b.n	a5c <boot_swap_type_multi+0xac>
     a56:	4a17      	ldr	r2, [pc, #92]	; (ab4 <boot_swap_type_multi+0x104>)
     a58:	e000      	b.n	a5c <boot_swap_type_multi+0xac>
     a5a:	4a17      	ldr	r2, [pc, #92]	; (ab8 <boot_swap_type_multi+0x108>)
     a5c:	4917      	ldr	r1, [pc, #92]	; (abc <boot_swap_type_multi+0x10c>)
     a5e:	f005 facc 	bl	5ffa <log_string_sync>
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
     a62:	7968      	ldrb	r0, [r5, #5]
                    table->swap_type != BOOT_SWAP_TYPE_PERM &&
     a64:	1e83      	subs	r3, r0, #2
     a66:	b2db      	uxtb	r3, r3
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
     a68:	2b02      	cmp	r3, #2
     a6a:	d915      	bls.n	a98 <boot_swap_type_multi+0xe8>
                    table->swap_type != BOOT_SWAP_TYPE_REVERT) {
                return BOOT_SWAP_TYPE_PANIC;
     a6c:	20ff      	movs	r0, #255	; 0xff
     a6e:	e013      	b.n	a98 <boot_swap_type_multi+0xe8>
            BOOT_LOG_INF("Swap type: %s",
     a70:	4a13      	ldr	r2, [pc, #76]	; (ac0 <boot_swap_type_multi+0x110>)
     a72:	e7f3      	b.n	a5c <boot_swap_type_multi+0xac>
            }
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
     a74:	f04f 0000 	mov.w	r0, #0
     a78:	2303      	movs	r3, #3
     a7a:	f363 0002 	bfi	r0, r3, #0, #3
     a7e:	f36f 00c5 	bfc	r0, #3, #3
     a82:	4b09      	ldr	r3, [pc, #36]	; (aa8 <boot_swap_type_multi+0xf8>)
     a84:	4a09      	ldr	r2, [pc, #36]	; (aac <boot_swap_type_multi+0xfc>)
     a86:	1a9b      	subs	r3, r3, r2
     a88:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     a8c:	f363 108f 	bfi	r0, r3, #6, #10
     a90:	490c      	ldr	r1, [pc, #48]	; (ac4 <boot_swap_type_multi+0x114>)
     a92:	f005 fab2 	bl	5ffa <log_string_sync>
    return BOOT_SWAP_TYPE_NONE;
     a96:	2001      	movs	r0, #1
}
     a98:	b005      	add	sp, #20
     a9a:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
     a9c:	20ff      	movs	r0, #255	; 0xff
     a9e:	e7fb      	b.n	a98 <boot_swap_type_multi+0xe8>
        return BOOT_SWAP_TYPE_PANIC;
     aa0:	20ff      	movs	r0, #255	; 0xff
     aa2:	e7f9      	b.n	a98 <boot_swap_type_multi+0xe8>
     aa4:	00008c50 	.word	0x00008c50
     aa8:	00008aa8 	.word	0x00008aa8
     aac:	00008aa0 	.word	0x00008aa0
     ab0:	00008c74 	.word	0x00008c74
     ab4:	00008c88 	.word	0x00008c88
     ab8:	00008c64 	.word	0x00008c64
     abc:	00008c90 	.word	0x00008c90
     ac0:	00008c6c 	.word	0x00008c6c
     ac4:	00008ca0 	.word	0x00008ca0

00000ac8 <boot_is_header_valid>:
static bool
boot_is_header_valid(const struct image_header *hdr, const struct flash_area *fap)
{
    uint32_t size;

    if (hdr->ih_magic != IMAGE_MAGIC) {
     ac8:	6802      	ldr	r2, [r0, #0]
     aca:	4b0e      	ldr	r3, [pc, #56]	; (b04 <boot_is_header_valid+0x3c>)
     acc:	429a      	cmp	r2, r3
     ace:	d10d      	bne.n	aec <boot_is_header_valid+0x24>
        return false;
    }

    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     ad0:	68c2      	ldr	r2, [r0, #12]
     ad2:	8903      	ldrh	r3, [r0, #8]
{
    /*
     * "a + b <= UINT32_MAX", subtract 'b' from both sides to avoid
     * the overflow.
     */
    if (a > UINT32_MAX - b) {
     ad4:	43d8      	mvns	r0, r3
     ad6:	4282      	cmp	r2, r0
     ad8:	d80c      	bhi.n	af4 <boot_is_header_valid+0x2c>
{
     ada:	b410      	push	{r4}
        return false;
    } else {
        *dest = a + b;
     adc:	18d4      	adds	r4, r2, r3
        return true;
     ade:	2001      	movs	r0, #1
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     ae0:	b110      	cbz	r0, ae8 <boot_is_header_valid+0x20>
        return false;
    }

    if (size >= fap->fa_size) {
     ae2:	688b      	ldr	r3, [r1, #8]
     ae4:	42a3      	cmp	r3, r4
     ae6:	d903      	bls.n	af0 <boot_is_header_valid+0x28>
        return false;
    }

    return true;
}
     ae8:	bc10      	pop	{r4}
     aea:	4770      	bx	lr
        return false;
     aec:	2000      	movs	r0, #0
     aee:	4770      	bx	lr
        return false;
     af0:	2000      	movs	r0, #0
     af2:	e7f9      	b.n	ae8 <boot_is_header_valid+0x20>
        return false;
     af4:	2000      	movs	r0, #0
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     af6:	b110      	cbz	r0, afe <boot_is_header_valid+0x36>
    if (size >= fap->fa_size) {
     af8:	688b      	ldr	r3, [r1, #8]
     afa:	42a3      	cmp	r3, r4
     afc:	d900      	bls.n	b00 <boot_is_header_valid+0x38>
}
     afe:	4770      	bx	lr
        return false;
     b00:	2000      	movs	r0, #0
     b02:	4770      	bx	lr
     b04:	96f3b83d 	.word	0x96f3b83d

00000b08 <boot_image_check>:
{
     b08:	b500      	push	{lr}
     b0a:	b087      	sub	sp, #28
    if (bootutil_img_validate(BOOT_CURR_ENC(state), image_index, hdr, fap, tmpbuf,
     b0c:	2000      	movs	r0, #0
     b0e:	9004      	str	r0, [sp, #16]
     b10:	9003      	str	r0, [sp, #12]
     b12:	9002      	str	r0, [sp, #8]
     b14:	f44f 7380 	mov.w	r3, #256	; 0x100
     b18:	9301      	str	r3, [sp, #4]
     b1a:	4b07      	ldr	r3, [pc, #28]	; (b38 <boot_image_check+0x30>)
     b1c:	9300      	str	r3, [sp, #0]
     b1e:	4613      	mov	r3, r2
     b20:	460a      	mov	r2, r1
     b22:	4601      	mov	r1, r0
     b24:	f7ff fd94 	bl	650 <bootutil_img_validate>
     b28:	4603      	mov	r3, r0
     b2a:	b918      	cbnz	r0, b34 <boot_image_check+0x2c>
}
     b2c:	4618      	mov	r0, r3
     b2e:	b007      	add	sp, #28
     b30:	f85d fb04 	ldr.w	pc, [sp], #4
        return BOOT_EBADIMAGE;
     b34:	2303      	movs	r3, #3
     b36:	e7f9      	b.n	b2c <boot_image_check+0x24>
     b38:	200025e4 	.word	0x200025e4

00000b3c <boot_validate_slot>:
 *         -1 on any errors
 */
static int
boot_validate_slot(struct boot_loader_state *state, int slot,
                   struct boot_status *bs)
{
     b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     b40:	b082      	sub	sp, #8
     b42:	4605      	mov	r5, r0
     b44:	460c      	mov	r4, r1
     b46:	4617      	mov	r7, r2
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     b48:	2000      	movs	r0, #0
     b4a:	f004 f8e8 	bl	4d1e <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     b4e:	a901      	add	r1, sp, #4
     b50:	b2c0      	uxtb	r0, r0
     b52:	f001 f9f3 	bl	1f3c <flash_area_open>
    if (rc != 0) {
     b56:	b128      	cbz	r0, b64 <boot_validate_slot+0x28>
        return -1;
     b58:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    rc = 0;

out:
    flash_area_close(fap);
    return rc;
}
     b5c:	4628      	mov	r0, r5
     b5e:	b002      	add	sp, #8
     b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     b64:	202c      	movs	r0, #44	; 0x2c
     b66:	fb00 5604 	mla	r6, r0, r4, r5
    if (boot_check_header_erased(state, slot) == 0 ||
     b6a:	4621      	mov	r1, r4
     b6c:	4628      	mov	r0, r5
     b6e:	f004 fc0e 	bl	538e <boot_check_header_erased>
     b72:	b300      	cbz	r0, bb6 <boot_validate_slot+0x7a>
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     b74:	6933      	ldr	r3, [r6, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     b76:	f013 0f10 	tst.w	r3, #16
     b7a:	d11c      	bne.n	bb6 <boot_validate_slot+0x7a>
    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
     b7c:	f8dd 8004 	ldr.w	r8, [sp, #4]
     b80:	4641      	mov	r1, r8
     b82:	4630      	mov	r0, r6
     b84:	f7ff ffa0 	bl	ac8 <boot_is_header_valid>
     b88:	bb00      	cbnz	r0, bcc <boot_validate_slot+0x90>
        if ((slot != BOOT_PRIMARY_SLOT) || IS_IN_XIP_MODE()) {
     b8a:	bb4c      	cbnz	r4, be0 <boot_validate_slot+0xa4>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     b8c:	f04f 0000 	mov.w	r0, #0
     b90:	2301      	movs	r3, #1
     b92:	f363 0002 	bfi	r0, r3, #0, #3
     b96:	f36f 00c5 	bfc	r0, #3, #3
     b9a:	4b15      	ldr	r3, [pc, #84]	; (bf0 <boot_validate_slot+0xb4>)
     b9c:	4a15      	ldr	r2, [pc, #84]	; (bf4 <boot_validate_slot+0xb8>)
     b9e:	1a9b      	subs	r3, r3, r2
     ba0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     ba4:	f363 108f 	bfi	r0, r3, #6, #10
     ba8:	bb04      	cbnz	r4, bec <boot_validate_slot+0xb0>
     baa:	4a13      	ldr	r2, [pc, #76]	; (bf8 <boot_validate_slot+0xbc>)
     bac:	4913      	ldr	r1, [pc, #76]	; (bfc <boot_validate_slot+0xc0>)
     bae:	f005 fa24 	bl	5ffa <log_string_sync>
        rc = 1;
     bb2:	2501      	movs	r5, #1
        goto out;
     bb4:	e001      	b.n	bba <boot_validate_slot+0x7e>
        if (slot != BOOT_PRIMARY_SLOT) {
     bb6:	b924      	cbnz	r4, bc2 <boot_validate_slot+0x86>
        rc = 1;
     bb8:	2501      	movs	r5, #1
    flash_area_close(fap);
     bba:	9801      	ldr	r0, [sp, #4]
     bbc:	f005 fb05 	bl	61ca <flash_area_close>
    return rc;
     bc0:	e7cc      	b.n	b5c <boot_validate_slot+0x20>
            swap_erase_trailer_sectors(state, fap);
     bc2:	9901      	ldr	r1, [sp, #4]
     bc4:	4628      	mov	r0, r5
     bc6:	f004 fcef 	bl	55a8 <swap_erase_trailer_sectors>
     bca:	e7f5      	b.n	bb8 <boot_validate_slot+0x7c>
    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
     bcc:	463b      	mov	r3, r7
     bce:	4642      	mov	r2, r8
     bd0:	4631      	mov	r1, r6
     bd2:	4628      	mov	r0, r5
     bd4:	f7ff ff98 	bl	b08 <boot_image_check>
     bd8:	4605      	mov	r5, r0
     bda:	2800      	cmp	r0, #0
     bdc:	d0ed      	beq.n	bba <boot_validate_slot+0x7e>
     bde:	e7d4      	b.n	b8a <boot_validate_slot+0x4e>
            flash_area_erase(fap, 0, fap->fa_size);
     be0:	9801      	ldr	r0, [sp, #4]
     be2:	6882      	ldr	r2, [r0, #8]
     be4:	2100      	movs	r1, #0
     be6:	f005 fb40 	bl	626a <flash_area_erase>
     bea:	e7cf      	b.n	b8c <boot_validate_slot+0x50>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     bec:	4a04      	ldr	r2, [pc, #16]	; (c00 <boot_validate_slot+0xc4>)
     bee:	e7dd      	b.n	bac <boot_validate_slot+0x70>
     bf0:	00008aa8 	.word	0x00008aa8
     bf4:	00008aa0 	.word	0x00008aa0
     bf8:	00008d80 	.word	0x00008d80
     bfc:	00008d88 	.word	0x00008d88
     c00:	00008d74 	.word	0x00008d74

00000c04 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     c04:	b530      	push	{r4, r5, lr}
     c06:	b083      	sub	sp, #12
     c08:	4605      	mov	r5, r0
     c0a:	460c      	mov	r4, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     c0c:	2300      	movs	r3, #0
     c0e:	9300      	str	r3, [sp, #0]
     c10:	9301      	str	r3, [sp, #4]
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     c12:	4608      	mov	r0, r1
     c14:	f004 fc5b 	bl	54ce <boot_status_is_reset>
     c18:	b330      	cbz	r0, c68 <boot_swap_image+0x64>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     c1a:	682a      	ldr	r2, [r5, #0]
     c1c:	4b1f      	ldr	r3, [pc, #124]	; (c9c <boot_swap_image+0x98>)
     c1e:	429a      	cmp	r2, r3
     c20:	d016      	beq.n	c50 <boot_swap_image+0x4c>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     c22:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     c24:	4b1d      	ldr	r3, [pc, #116]	; (c9c <boot_swap_image+0x98>)
     c26:	429a      	cmp	r2, r3
     c28:	d018      	beq.n	c5c <boot_swap_image+0x58>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
     c2a:	9b01      	ldr	r3, [sp, #4]
     c2c:	9a00      	ldr	r2, [sp, #0]
     c2e:	4293      	cmp	r3, r2
     c30:	d900      	bls.n	c34 <boot_swap_image+0x30>
            copy_size = size;
     c32:	9300      	str	r3, [sp, #0]
        }

        bs->swap_size = copy_size;
     c34:	9b00      	ldr	r3, [sp, #0]
     c36:	60a3      	str	r3, [r4, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
     c38:	9a00      	ldr	r2, [sp, #0]
     c3a:	4621      	mov	r1, r4
     c3c:	4628      	mov	r0, r5
     c3e:	f000 fcaf 	bl	15a0 <swap_run>

#ifdef MCUBOOT_VALIDATE_PRIMARY_SLOT
    extern int boot_status_fails;
    if (boot_status_fails > 0) {
     c42:	4b17      	ldr	r3, [pc, #92]	; (ca0 <boot_swap_image+0x9c>)
     c44:	681a      	ldr	r2, [r3, #0]
     c46:	2a00      	cmp	r2, #0
     c48:	dc16      	bgt.n	c78 <boot_swap_image+0x74>
                     boot_status_fails);
    }
#endif

    return 0;
}
     c4a:	2000      	movs	r0, #0
     c4c:	b003      	add	sp, #12
     c4e:	bd30      	pop	{r4, r5, pc}
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     c50:	466a      	mov	r2, sp
     c52:	2100      	movs	r1, #0
     c54:	4628      	mov	r0, r5
     c56:	f004 fb43 	bl	52e0 <boot_read_image_size>
     c5a:	e7e2      	b.n	c22 <boot_swap_image+0x1e>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     c5c:	aa01      	add	r2, sp, #4
     c5e:	2101      	movs	r1, #1
     c60:	4628      	mov	r0, r5
     c62:	f004 fb3d 	bl	52e0 <boot_read_image_size>
     c66:	e7e0      	b.n	c2a <boot_swap_image+0x26>
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     c68:	f104 0108 	add.w	r1, r4, #8
     c6c:	2000      	movs	r0, #0
     c6e:	f004 fae7 	bl	5240 <boot_read_swap_size>
        copy_size = bs->swap_size;
     c72:	68a3      	ldr	r3, [r4, #8]
     c74:	9300      	str	r3, [sp, #0]
     c76:	e7df      	b.n	c38 <boot_swap_image+0x34>
        BOOT_LOG_WRN("%d status write fails performing the swap",
     c78:	f04f 0000 	mov.w	r0, #0
     c7c:	2302      	movs	r3, #2
     c7e:	f363 0002 	bfi	r0, r3, #0, #3
     c82:	f36f 00c5 	bfc	r0, #3, #3
     c86:	4b07      	ldr	r3, [pc, #28]	; (ca4 <boot_swap_image+0xa0>)
     c88:	4907      	ldr	r1, [pc, #28]	; (ca8 <boot_swap_image+0xa4>)
     c8a:	1a5b      	subs	r3, r3, r1
     c8c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     c90:	f363 108f 	bfi	r0, r3, #6, #10
     c94:	4905      	ldr	r1, [pc, #20]	; (cac <boot_swap_image+0xa8>)
     c96:	f005 f9b0 	bl	5ffa <log_string_sync>
     c9a:	e7d6      	b.n	c4a <boot_swap_image+0x46>
     c9c:	96f3b83d 	.word	0x96f3b83d
     ca0:	200026e4 	.word	0x200026e4
     ca4:	00008aa8 	.word	0x00008aa8
     ca8:	00008aa0 	.word	0x00008aa0
     cac:	00008d48 	.word	0x00008d48

00000cb0 <boot_complete_partial_swap>:
 */
#if !defined(MCUBOOT_OVERWRITE_ONLY)
static int
boot_complete_partial_swap(struct boot_loader_state *state,
        struct boot_status *bs)
{
     cb0:	b538      	push	{r3, r4, r5, lr}
     cb2:	4604      	mov	r4, r0
     cb4:	460d      	mov	r5, r1
    int rc;

    /* Determine the type of swap operation being resumed from the
     * `swap-type` trailer field.
     */
    rc = boot_swap_image(state, bs);
     cb6:	f7ff ffa5 	bl	c04 <boot_swap_image>
     cba:	4602      	mov	r2, r0
    assert(rc == 0);

    BOOT_SWAP_TYPE(state) = bs->swap_type;
     cbc:	79eb      	ldrb	r3, [r5, #7]
     cbe:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

    /* The following states need image_ok be explicitly set after the
     * swap was finished to avoid a new revert.
     */
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     cc2:	3b03      	subs	r3, #3
     cc4:	b2db      	uxtb	r3, r3
     cc6:	2b01      	cmp	r3, #1
     cc8:	d90c      	bls.n	ce4 <boot_complete_partial_swap+0x34>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     cca:	79eb      	ldrb	r3, [r5, #7]
     ccc:	2b02      	cmp	r3, #2
     cce:	d013      	beq.n	cf8 <boot_complete_partial_swap+0x48>
     cd0:	2b04      	cmp	r3, #4
     cd2:	d011      	beq.n	cf8 <boot_complete_partial_swap+0x48>
     cd4:	2b03      	cmp	r3, #3
     cd6:	d00f      	beq.n	cf8 <boot_complete_partial_swap+0x48>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     cd8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     cdc:	2bff      	cmp	r3, #255	; 0xff
     cde:	d015      	beq.n	d0c <boot_complete_partial_swap+0x5c>
        /* Loop forever... */
        while (1) {}
    }

    return rc;
}
     ce0:	4610      	mov	r0, r2
     ce2:	bd38      	pop	{r3, r4, r5, pc}
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     ce4:	2000      	movs	r0, #0
     ce6:	f004 fd05 	bl	56f4 <swap_set_image_ok>
        if (rc != 0) {
     cea:	4602      	mov	r2, r0
     cec:	2800      	cmp	r0, #0
     cee:	d0ec      	beq.n	cca <boot_complete_partial_swap+0x1a>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     cf0:	23ff      	movs	r3, #255	; 0xff
     cf2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     cf6:	e7e8      	b.n	cca <boot_complete_partial_swap+0x1a>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     cf8:	2000      	movs	r0, #0
     cfa:	f004 fce8 	bl	56ce <swap_set_copy_done>
        if (rc != 0) {
     cfe:	4602      	mov	r2, r0
     d00:	2800      	cmp	r0, #0
     d02:	d0e9      	beq.n	cd8 <boot_complete_partial_swap+0x28>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     d04:	23ff      	movs	r3, #255	; 0xff
     d06:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     d0a:	e7e5      	b.n	cd8 <boot_complete_partial_swap+0x28>
        BOOT_LOG_ERR("panic!");
     d0c:	f04f 0000 	mov.w	r0, #0
     d10:	2301      	movs	r3, #1
     d12:	f363 0002 	bfi	r0, r3, #0, #3
     d16:	f36f 00c5 	bfc	r0, #3, #3
     d1a:	4b05      	ldr	r3, [pc, #20]	; (d30 <boot_complete_partial_swap+0x80>)
     d1c:	4a05      	ldr	r2, [pc, #20]	; (d34 <boot_complete_partial_swap+0x84>)
     d1e:	1a9b      	subs	r3, r3, r2
     d20:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     d24:	f363 108f 	bfi	r0, r3, #6, #10
     d28:	4903      	ldr	r1, [pc, #12]	; (d38 <boot_complete_partial_swap+0x88>)
     d2a:	f005 f966 	bl	5ffa <log_string_sync>
        while (1) {}
     d2e:	e7fe      	b.n	d2e <boot_complete_partial_swap+0x7e>
     d30:	00008aa8 	.word	0x00008aa8
     d34:	00008aa0 	.word	0x00008aa0
     d38:	00008cb0 	.word	0x00008cb0

00000d3c <boot_prepare_image_for_update>:
 *                              boot status can be written to.
 */
static void
boot_prepare_image_for_update(struct boot_loader_state *state,
                              struct boot_status *bs)
{
     d3c:	b538      	push	{r3, r4, r5, lr}
     d3e:	4604      	mov	r4, r0
     d40:	460d      	mov	r5, r1
    int rc;

    /* Determine the sector layout of the image slots and scratch area. */
    rc = boot_read_sectors(state);
     d42:	f004 fb6d 	bl	5420 <boot_read_sectors>
    if (rc != 0) {
     d46:	b968      	cbnz	r0, d64 <boot_prepare_image_for_update+0x28>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
        return;
    }

    /* Attempt to read an image header from each slot. */
    rc = boot_read_image_headers(state, false, NULL);
     d48:	2200      	movs	r2, #0
     d4a:	4611      	mov	r1, r2
     d4c:	4620      	mov	r0, r4
     d4e:	f004 fb7d 	bl	544c <boot_read_image_headers>
    if (rc != 0) {
     d52:	b9e8      	cbnz	r0, d90 <boot_prepare_image_for_update+0x54>
    }

    /* If the current image's slots aren't compatible, no swap is possible.
     * Just boot into primary slot.
     */
    if (boot_slots_compatible(state)) {
     d54:	4620      	mov	r0, r4
     d56:	f000 fadd 	bl	1314 <boot_slots_compatible>
     d5a:	bb78      	cbnz	r0, dbc <boot_prepare_image_for_update+0x80>
            }
#endif
        }
    } else {
        /* In that case if slots are not compatible. */
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     d5c:	2301      	movs	r3, #1
     d5e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     d62:	e014      	b.n	d8e <boot_prepare_image_for_update+0x52>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
     d64:	f04f 0000 	mov.w	r0, #0
     d68:	2302      	movs	r3, #2
     d6a:	f363 0002 	bfi	r0, r3, #0, #3
     d6e:	f36f 00c5 	bfc	r0, #3, #3
     d72:	4b47      	ldr	r3, [pc, #284]	; (e90 <boot_prepare_image_for_update+0x154>)
     d74:	4a47      	ldr	r2, [pc, #284]	; (e94 <boot_prepare_image_for_update+0x158>)
     d76:	1a9b      	subs	r3, r3, r2
     d78:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     d7c:	f363 108f 	bfi	r0, r3, #6, #10
     d80:	2280      	movs	r2, #128	; 0x80
     d82:	4945      	ldr	r1, [pc, #276]	; (e98 <boot_prepare_image_for_update+0x15c>)
     d84:	f005 f939 	bl	5ffa <log_string_sync>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     d88:	2301      	movs	r3, #1
     d8a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    }
}
     d8e:	bd38      	pop	{r3, r4, r5, pc}
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     d90:	f04f 0000 	mov.w	r0, #0
     d94:	2302      	movs	r3, #2
     d96:	f363 0002 	bfi	r0, r3, #0, #3
     d9a:	f36f 00c5 	bfc	r0, #3, #3
     d9e:	4b3c      	ldr	r3, [pc, #240]	; (e90 <boot_prepare_image_for_update+0x154>)
     da0:	4a3c      	ldr	r2, [pc, #240]	; (e94 <boot_prepare_image_for_update+0x158>)
     da2:	1a9b      	subs	r3, r3, r2
     da4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     da8:	f363 108f 	bfi	r0, r3, #6, #10
     dac:	2200      	movs	r2, #0
     dae:	493b      	ldr	r1, [pc, #236]	; (e9c <boot_prepare_image_for_update+0x160>)
     db0:	f005 f923 	bl	5ffa <log_string_sync>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     db4:	2301      	movs	r3, #1
     db6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        return;
     dba:	e7e8      	b.n	d8e <boot_prepare_image_for_update+0x52>
        boot_status_reset(bs);
     dbc:	4628      	mov	r0, r5
     dbe:	f004 fb7c 	bl	54ba <boot_status_reset>
        rc = swap_read_status(state, bs);
     dc2:	4629      	mov	r1, r5
     dc4:	4620      	mov	r0, r4
     dc6:	f004 fc49 	bl	565c <swap_read_status>
        if (rc != 0) {
     dca:	b9e8      	cbnz	r0, e08 <boot_prepare_image_for_update+0xcc>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     dcc:	4628      	mov	r0, r5
     dce:	f004 fb7e 	bl	54ce <boot_status_is_reset>
     dd2:	f080 0101 	eor.w	r1, r0, #1
     dd6:	462a      	mov	r2, r5
     dd8:	b2c9      	uxtb	r1, r1
     dda:	4620      	mov	r0, r4
     ddc:	f004 fb36 	bl	544c <boot_read_image_headers>
        if (rc != 0) {
     de0:	bb40      	cbnz	r0, e34 <boot_prepare_image_for_update+0xf8>
        if (!boot_status_is_reset(bs)) {
     de2:	4628      	mov	r0, r5
     de4:	f004 fb73 	bl	54ce <boot_status_is_reset>
     de8:	2800      	cmp	r0, #0
     dea:	d039      	beq.n	e60 <boot_prepare_image_for_update+0x124>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     dec:	79eb      	ldrb	r3, [r5, #7]
     dee:	2b01      	cmp	r3, #1
     df0:	d043      	beq.n	e7a <boot_prepare_image_for_update+0x13e>
            } else if (boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs) != 0) {
     df2:	462a      	mov	r2, r5
     df4:	2101      	movs	r1, #1
     df6:	4620      	mov	r0, r4
     df8:	f7ff fea0 	bl	b3c <boot_validate_slot>
     dfc:	2800      	cmp	r0, #0
     dfe:	d043      	beq.n	e88 <boot_prepare_image_for_update+0x14c>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     e00:	2305      	movs	r3, #5
     e02:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     e06:	e7c2      	b.n	d8e <boot_prepare_image_for_update+0x52>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     e08:	f04f 0000 	mov.w	r0, #0
     e0c:	2302      	movs	r3, #2
     e0e:	f363 0002 	bfi	r0, r3, #0, #3
     e12:	f36f 00c5 	bfc	r0, #3, #3
     e16:	4b1e      	ldr	r3, [pc, #120]	; (e90 <boot_prepare_image_for_update+0x154>)
     e18:	4a1e      	ldr	r2, [pc, #120]	; (e94 <boot_prepare_image_for_update+0x158>)
     e1a:	1a9b      	subs	r3, r3, r2
     e1c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     e20:	f363 108f 	bfi	r0, r3, #6, #10
     e24:	2200      	movs	r2, #0
     e26:	491e      	ldr	r1, [pc, #120]	; (ea0 <boot_prepare_image_for_update+0x164>)
     e28:	f005 f8e7 	bl	5ffa <log_string_sync>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     e2c:	2301      	movs	r3, #1
     e2e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
            return;
     e32:	e7ac      	b.n	d8e <boot_prepare_image_for_update+0x52>
            BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     e34:	f04f 0000 	mov.w	r0, #0
     e38:	2302      	movs	r3, #2
     e3a:	f363 0002 	bfi	r0, r3, #0, #3
     e3e:	f36f 00c5 	bfc	r0, #3, #3
     e42:	4b13      	ldr	r3, [pc, #76]	; (e90 <boot_prepare_image_for_update+0x154>)
     e44:	4a13      	ldr	r2, [pc, #76]	; (e94 <boot_prepare_image_for_update+0x158>)
     e46:	1a9b      	subs	r3, r3, r2
     e48:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     e4c:	f363 108f 	bfi	r0, r3, #6, #10
     e50:	2200      	movs	r2, #0
     e52:	4912      	ldr	r1, [pc, #72]	; (e9c <boot_prepare_image_for_update+0x160>)
     e54:	f005 f8d1 	bl	5ffa <log_string_sync>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     e58:	2301      	movs	r3, #1
     e5a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
            return;
     e5e:	e796      	b.n	d8e <boot_prepare_image_for_update+0x52>
            rc = boot_complete_partial_swap(state, bs);
     e60:	4629      	mov	r1, r5
     e62:	4620      	mov	r0, r4
     e64:	f7ff ff24 	bl	cb0 <boot_complete_partial_swap>
            rc = boot_read_image_headers(state, false, bs);
     e68:	462a      	mov	r2, r5
     e6a:	2100      	movs	r1, #0
     e6c:	4620      	mov	r0, r4
     e6e:	f004 faed 	bl	544c <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     e72:	2301      	movs	r3, #1
     e74:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     e78:	e789      	b.n	d8e <boot_prepare_image_for_update+0x52>
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     e7a:	4629      	mov	r1, r5
     e7c:	4620      	mov	r0, r4
     e7e:	f004 fb00 	bl	5482 <boot_validated_swap_type>
     e82:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
     e86:	e782      	b.n	d8e <boot_prepare_image_for_update+0x52>
                BOOT_SWAP_TYPE(state) = bs->swap_type;
     e88:	79eb      	ldrb	r3, [r5, #7]
     e8a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     e8e:	e77e      	b.n	d8e <boot_prepare_image_for_update+0x52>
     e90:	00008aa8 	.word	0x00008aa8
     e94:	00008aa0 	.word	0x00008aa0
     e98:	00008cb8 	.word	0x00008cb8
     e9c:	00008cf8 	.word	0x00008cf8
     ea0:	00008d20 	.word	0x00008d20

00000ea4 <boot_copy_region>:
{
     ea4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ea8:	4688      	mov	r8, r1
     eaa:	4692      	mov	sl, r2
     eac:	461f      	mov	r7, r3
     eae:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
     eb2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bytes_copied = 0;
     eb4:	2500      	movs	r5, #0
    while (bytes_copied < sz) {
     eb6:	e00f      	b.n	ed8 <boot_copy_region+0x34>
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     eb8:	4623      	mov	r3, r4
     eba:	4a0f      	ldr	r2, [pc, #60]	; (ef8 <boot_copy_region+0x54>)
     ebc:	19e9      	adds	r1, r5, r7
     ebe:	4640      	mov	r0, r8
     ec0:	f005 f984 	bl	61cc <flash_area_read>
        if (rc != 0) {
     ec4:	b9a0      	cbnz	r0, ef0 <boot_copy_region+0x4c>
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     ec6:	4623      	mov	r3, r4
     ec8:	4a0b      	ldr	r2, [pc, #44]	; (ef8 <boot_copy_region+0x54>)
     eca:	eb05 0109 	add.w	r1, r5, r9
     ece:	4650      	mov	r0, sl
     ed0:	f005 f99b 	bl	620a <flash_area_write>
        if (rc != 0) {
     ed4:	b970      	cbnz	r0, ef4 <boot_copy_region+0x50>
        bytes_copied += chunk_sz;
     ed6:	4425      	add	r5, r4
    while (bytes_copied < sz) {
     ed8:	42b5      	cmp	r5, r6
     eda:	d206      	bcs.n	eea <boot_copy_region+0x46>
        if (sz - bytes_copied > sizeof buf) {
     edc:	1b74      	subs	r4, r6, r5
     ede:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
     ee2:	d9e9      	bls.n	eb8 <boot_copy_region+0x14>
            chunk_sz = sizeof buf;
     ee4:	f44f 6480 	mov.w	r4, #1024	; 0x400
     ee8:	e7e6      	b.n	eb8 <boot_copy_region+0x14>
    return 0;
     eea:	2000      	movs	r0, #0
}
     eec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return BOOT_EFLASH;
     ef0:	2001      	movs	r0, #1
     ef2:	e7fb      	b.n	eec <boot_copy_region+0x48>
            return BOOT_EFLASH;
     ef4:	2001      	movs	r0, #1
     ef6:	e7f9      	b.n	eec <boot_copy_region+0x48>
     ef8:	200019e4 	.word	0x200019e4

00000efc <context_boot_go>:

int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     efc:	b5f0      	push	{r4, r5, r6, r7, lr}
     efe:	b085      	sub	sp, #20
     f00:	4604      	mov	r4, r0
     f02:	460e      	mov	r6, r1
    TARGET_STATIC boot_sector_t secondary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
#if MCUBOOT_SWAP_USING_SCRATCH
    TARGET_STATIC boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];
#endif

    memset(state, 0, sizeof(struct boot_loader_state));
     f04:	2260      	movs	r2, #96	; 0x60
     f06:	2100      	movs	r1, #0
     f08:	f005 fbb4 	bl	6674 <memset>
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     f0c:	4b3c      	ldr	r3, [pc, #240]	; (1000 <context_boot_go+0x104>)
     f0e:	6263      	str	r3, [r4, #36]	; 0x24
            primary_slot_sectors[image_index];
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     f10:	4b3c      	ldr	r3, [pc, #240]	; (1004 <context_boot_go+0x108>)
     f12:	6523      	str	r3, [r4, #80]	; 0x50
#endif

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
     f14:	2500      	movs	r5, #0
     f16:	e00c      	b.n	f32 <context_boot_go+0x36>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     f18:	4629      	mov	r1, r5
     f1a:	2000      	movs	r0, #0
     f1c:	f003 feff 	bl	4d1e <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     f20:	212c      	movs	r1, #44	; 0x2c
     f22:	fb01 f105 	mul.w	r1, r1, r5
     f26:	3120      	adds	r1, #32
     f28:	4421      	add	r1, r4
     f2a:	b2c0      	uxtb	r0, r0
     f2c:	f001 f806 	bl	1f3c <flash_area_open>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
     f30:	3501      	adds	r5, #1
     f32:	2d01      	cmp	r5, #1
     f34:	d9f0      	bls.n	f18 <context_boot_go+0x1c>
                             &BOOT_SCRATCH_AREA(state));
        assert(rc == 0);
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);
     f36:	4669      	mov	r1, sp
     f38:	4620      	mov	r0, r4
     f3a:	f7ff feff 	bl	d3c <boot_prepare_image_for_update>

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     f3e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
        /* Indicate that swap is not aborted */
        boot_status_reset(&bs);
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
     f42:	f88d 3007 	strb.w	r3, [sp, #7]

        switch (BOOT_SWAP_TYPE(state)) {
     f46:	3b01      	subs	r3, #1
     f48:	2b04      	cmp	r3, #4
     f4a:	d833      	bhi.n	fb4 <context_boot_go+0xb8>
     f4c:	e8df f003 	tbb	[pc, r3]
     f50:	03030307 	.word	0x03030307
     f54:	29          	.byte	0x29
     f55:	00          	.byte	0x00
            break;

        case BOOT_SWAP_TYPE_TEST:          /* fallthrough */
        case BOOT_SWAP_TYPE_PERM:          /* fallthrough */
        case BOOT_SWAP_TYPE_REVERT:
            rc = boot_perform_update(state, &bs);
     f56:	4669      	mov	r1, sp
     f58:	4620      	mov	r0, r4
     f5a:	f004 fac9 	bl	54f0 <boot_perform_update>

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     f5e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     f62:	2bff      	cmp	r3, #255	; 0xff
     f64:	d02a      	beq.n	fbc <context_boot_go+0xc0>
    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     f66:	2b01      	cmp	r3, #1
     f68:	d006      	beq.n	f78 <context_boot_go+0x7c>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
     f6a:	466a      	mov	r2, sp
     f6c:	2100      	movs	r1, #0
     f6e:	4620      	mov	r0, r4
     f70:	f004 fa6c 	bl	544c <boot_read_image_headers>
            if (rc != 0) {
     f74:	4607      	mov	r7, r0
     f76:	b990      	cbnz	r0, f9e <context_boot_go+0xa2>
	 * primary.
	 */
	if (BOOT_CURR_IMG(state) == 0)
#endif
	{
		rc = boot_validate_slot(state, BOOT_PRIMARY_SLOT, NULL);
     f78:	2200      	movs	r2, #0
     f7a:	4611      	mov	r1, r2
     f7c:	4620      	mov	r0, r4
     f7e:	f7ff fddd 	bl	b3c <boot_validate_slot>
		if (rc != 0) {
     f82:	4607      	mov	r7, r0
     f84:	bb60      	cbnz	r0, fe0 <context_boot_go+0xe4>
    /*
     * Since the boot_status struct stores plaintext encryption keys, reset
     * them here to avoid the possibility of jumping into an image that could
     * easily recover them.
     */
    memset(&bs, 0, sizeof(struct boot_status));
     f86:	2210      	movs	r2, #16
     f88:	2100      	movs	r1, #0
     f8a:	4668      	mov	r0, sp
     f8c:	f005 fb72 	bl	6674 <memset>

    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
     f90:	6a23      	ldr	r3, [r4, #32]
     f92:	785b      	ldrb	r3, [r3, #1]
     f94:	7133      	strb	r3, [r6, #4]
 * Offset of the slot from the beginning of the flash device.
 */
static inline uint32_t
boot_img_slot_off(struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).area->fa_off;
     f96:	6a23      	ldr	r3, [r4, #32]
     f98:	685b      	ldr	r3, [r3, #4]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
     f9a:	60b3      	str	r3, [r6, #8]
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
     f9c:	6034      	str	r4, [r6, #0]
out:
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
#if MCUBOOT_SWAP_USING_SCRATCH
        flash_area_close(BOOT_SCRATCH_AREA(state));
#endif
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
     f9e:	2500      	movs	r5, #0
     fa0:	e029      	b.n	ff6 <context_boot_go+0xfa>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     fa2:	2000      	movs	r0, #0
     fa4:	f004 fba6 	bl	56f4 <swap_set_image_ok>
            if (rc != 0) {
     fa8:	2800      	cmp	r0, #0
     faa:	d0d8      	beq.n	f5e <context_boot_go+0x62>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     fac:	23ff      	movs	r3, #255	; 0xff
     fae:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     fb2:	e7d4      	b.n	f5e <context_boot_go+0x62>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     fb4:	23ff      	movs	r3, #255	; 0xff
     fb6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     fba:	e7d0      	b.n	f5e <context_boot_go+0x62>
            BOOT_LOG_ERR("panic!");
     fbc:	f04f 0000 	mov.w	r0, #0
     fc0:	2301      	movs	r3, #1
     fc2:	f363 0002 	bfi	r0, r3, #0, #3
     fc6:	f36f 00c5 	bfc	r0, #3, #3
     fca:	4b0f      	ldr	r3, [pc, #60]	; (1008 <context_boot_go+0x10c>)
     fcc:	4a0f      	ldr	r2, [pc, #60]	; (100c <context_boot_go+0x110>)
     fce:	1a9b      	subs	r3, r3, r2
     fd0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
     fd4:	f363 108f 	bfi	r0, r3, #6, #10
     fd8:	490d      	ldr	r1, [pc, #52]	; (1010 <context_boot_go+0x114>)
     fda:	f005 f80e 	bl	5ffa <log_string_sync>
            while (1) {}
     fde:	e7fe      	b.n	fde <context_boot_go+0xe2>
			rc = BOOT_EBADIMAGE;
     fe0:	2703      	movs	r7, #3
     fe2:	e7dc      	b.n	f9e <context_boot_go+0xa2>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     fe4:	f1c5 0301 	rsb	r3, r5, #1
     fe8:	222c      	movs	r2, #44	; 0x2c
     fea:	fb02 4303 	mla	r3, r2, r3, r4
     fee:	6a18      	ldr	r0, [r3, #32]
     ff0:	f005 f8eb 	bl	61ca <flash_area_close>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
     ff4:	3501      	adds	r5, #1
     ff6:	2d01      	cmp	r5, #1
     ff8:	d9f4      	bls.n	fe4 <context_boot_go+0xe8>
        }
    }
    return rc;
}
     ffa:	4638      	mov	r0, r7
     ffc:	b005      	add	sp, #20
     ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1000:	20001de4 	.word	0x20001de4
    1004:	200021e4 	.word	0x200021e4
    1008:	00008aa8 	.word	0x00008aa8
    100c:	00008aa0 	.word	0x00008aa0
    1010:	00008cb0 	.word	0x00008cb0

00001014 <boot_go>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
boot_go(struct boot_rsp *rsp)
{
    1014:	b508      	push	{r3, lr}
    return context_boot_go(&boot_data, rsp);
    1016:	4601      	mov	r1, r0
    1018:	4801      	ldr	r0, [pc, #4]	; (1020 <boot_go+0xc>)
    101a:	f7ff ff6f 	bl	efc <context_boot_go>
}
    101e:	bd08      	pop	{r3, pc}
    1020:	20001984 	.word	0x20001984

00001024 <boot_move_sector_up>:
 */
static void
boot_move_sector_up(int idx, uint32_t sz, struct boot_loader_state *state,
        struct boot_status *bs, const struct flash_area *fap_pri,
        const struct flash_area *fap_sec)
{
    1024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1028:	b082      	sub	sp, #8
    102a:	4688      	mov	r8, r1
    102c:	4616      	mov	r6, r2
    102e:	461c      	mov	r4, r3

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    1030:	6a53      	ldr	r3, [r2, #36]	; 0x24
    1032:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]
           BOOT_IMG(state, slot).sectors[0].fs_off;
    1036:	681a      	ldr	r2, [r3, #0]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    1038:	1aad      	subs	r5, r5, r2
     * would be enough
     */

    /* Calculate offset from start of image area. */
    new_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx);
    old_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx - 1);
    103a:	3801      	subs	r0, #1
    103c:	f853 7030 	ldr.w	r7, [r3, r0, lsl #3]
    1040:	1abf      	subs	r7, r7, r2

    if (bs->idx == BOOT_STATUS_IDX_0) {
    1042:	6823      	ldr	r3, [r4, #0]
    1044:	2b01      	cmp	r3, #1
    1046:	d01c      	beq.n	1082 <boot_move_sector_up+0x5e>

        rc = swap_erase_trailer_sectors(state, fap_sec);
        assert(rc == 0);
    }

    rc = boot_erase_region(fap_pri, new_off, sz);
    1048:	4642      	mov	r2, r8
    104a:	4629      	mov	r1, r5
    104c:	9808      	ldr	r0, [sp, #32]
    104e:	f004 faa7 	bl	55a0 <boot_erase_region>
    assert(rc == 0);

    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
    1052:	f8cd 8004 	str.w	r8, [sp, #4]
    1056:	9500      	str	r5, [sp, #0]
    1058:	463b      	mov	r3, r7
    105a:	9a08      	ldr	r2, [sp, #32]
    105c:	4611      	mov	r1, r2
    105e:	4630      	mov	r0, r6
    1060:	f7ff ff20 	bl	ea4 <boot_copy_region>
    assert(rc == 0);

    rc = boot_write_status(state, bs);
    1064:	4621      	mov	r1, r4
    1066:	4630      	mov	r0, r6
    1068:	f004 fa67 	bl	553a <boot_write_status>

    bs->idx++;
    106c:	6823      	ldr	r3, [r4, #0]
    106e:	3301      	adds	r3, #1
    1070:	6023      	str	r3, [r4, #0]
    BOOT_STATUS_ASSERT(rc == 0);
    1072:	b118      	cbz	r0, 107c <boot_move_sector_up+0x58>
    1074:	4a0c      	ldr	r2, [pc, #48]	; (10a8 <boot_move_sector_up+0x84>)
    1076:	6813      	ldr	r3, [r2, #0]
    1078:	3301      	adds	r3, #1
    107a:	6013      	str	r3, [r2, #0]
}
    107c:	b002      	add	sp, #8
    107e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    1082:	68e3      	ldr	r3, [r4, #12]
    1084:	2b02      	cmp	r3, #2
    1086:	d104      	bne.n	1092 <boot_move_sector_up+0x6e>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    1088:	9909      	ldr	r1, [sp, #36]	; 0x24
    108a:	4630      	mov	r0, r6
    108c:	f004 fa8c 	bl	55a8 <swap_erase_trailer_sectors>
    1090:	e7da      	b.n	1048 <boot_move_sector_up+0x24>
            rc = swap_erase_trailer_sectors(state, fap_pri);
    1092:	9908      	ldr	r1, [sp, #32]
    1094:	4630      	mov	r0, r6
    1096:	f004 fa87 	bl	55a8 <swap_erase_trailer_sectors>
            rc = swap_status_init(state, fap_pri, bs);
    109a:	4622      	mov	r2, r4
    109c:	9908      	ldr	r1, [sp, #32]
    109e:	4630      	mov	r0, r6
    10a0:	f004 faba 	bl	5618 <swap_status_init>
    10a4:	e7f0      	b.n	1088 <boot_move_sector_up+0x64>
    10a6:	bf00      	nop
    10a8:	200026e4 	.word	0x200026e4

000010ac <boot_swap_sectors>:

static void
boot_swap_sectors(int idx, uint32_t sz, struct boot_loader_state *state,
        struct boot_status *bs, const struct flash_area *fap_pri,
        const struct flash_area *fap_sec)
{
    10ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    10b0:	b083      	sub	sp, #12
    10b2:	4688      	mov	r8, r1
    10b4:	4615      	mov	r5, r2
    10b6:	461c      	mov	r4, r3
    10b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
    10ba:	f852 7030 	ldr.w	r7, [r2, r0, lsl #3]
           BOOT_IMG(state, slot).sectors[0].fs_off;
    10be:	6813      	ldr	r3, [r2, #0]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    10c0:	1aff      	subs	r7, r7, r3
    uint32_t pri_up_off;
    uint32_t sec_off;
    int rc;

    pri_up_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx);
    pri_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx - 1);
    10c2:	3801      	subs	r0, #1
    10c4:	f852 6030 	ldr.w	r6, [r2, r0, lsl #3]
    10c8:	1af6      	subs	r6, r6, r3
    10ca:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    10cc:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
           BOOT_IMG(state, slot).sectors[0].fs_off;
    10d0:	6813      	ldr	r3, [r2, #0]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    10d2:	eba1 0903 	sub.w	r9, r1, r3
    sec_off = boot_img_sector_off(state, BOOT_SECONDARY_SLOT, idx - 1);

    if (bs->state == BOOT_STATUS_STATE_0) {
    10d6:	7923      	ldrb	r3, [r4, #4]
    10d8:	2b01      	cmp	r3, #1
    10da:	d005      	beq.n	10e8 <boot_swap_sectors+0x3c>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_1;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_1) {
    10dc:	7923      	ldrb	r3, [r4, #4]
    10de:	2b02      	cmp	r3, #2
    10e0:	d01d      	beq.n	111e <boot_swap_sectors+0x72>
        rc = boot_write_status(state, bs);
        bs->idx++;
        bs->state = BOOT_STATUS_STATE_0;
        BOOT_STATUS_ASSERT(rc == 0);
    }
}
    10e2:	b003      	add	sp, #12
    10e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rc = boot_erase_region(fap_pri, pri_off, sz);
    10e8:	4642      	mov	r2, r8
    10ea:	4631      	mov	r1, r6
    10ec:	980a      	ldr	r0, [sp, #40]	; 0x28
    10ee:	f004 fa57 	bl	55a0 <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
    10f2:	f8cd 8004 	str.w	r8, [sp, #4]
    10f6:	9600      	str	r6, [sp, #0]
    10f8:	464b      	mov	r3, r9
    10fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    10fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    10fe:	4628      	mov	r0, r5
    1100:	f7ff fed0 	bl	ea4 <boot_copy_region>
        rc = boot_write_status(state, bs);
    1104:	4621      	mov	r1, r4
    1106:	4628      	mov	r0, r5
    1108:	f004 fa17 	bl	553a <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    110c:	2302      	movs	r3, #2
    110e:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    1110:	2800      	cmp	r0, #0
    1112:	d0e3      	beq.n	10dc <boot_swap_sectors+0x30>
    1114:	4a11      	ldr	r2, [pc, #68]	; (115c <boot_swap_sectors+0xb0>)
    1116:	6813      	ldr	r3, [r2, #0]
    1118:	3301      	adds	r3, #1
    111a:	6013      	str	r3, [r2, #0]
    111c:	e7de      	b.n	10dc <boot_swap_sectors+0x30>
        rc = boot_erase_region(fap_sec, sec_off, sz);
    111e:	4642      	mov	r2, r8
    1120:	4649      	mov	r1, r9
    1122:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1124:	f004 fa3c 	bl	55a0 <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
    1128:	f8cd 8004 	str.w	r8, [sp, #4]
    112c:	f8cd 9000 	str.w	r9, [sp]
    1130:	463b      	mov	r3, r7
    1132:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1134:	990a      	ldr	r1, [sp, #40]	; 0x28
    1136:	4628      	mov	r0, r5
    1138:	f7ff feb4 	bl	ea4 <boot_copy_region>
        rc = boot_write_status(state, bs);
    113c:	4621      	mov	r1, r4
    113e:	4628      	mov	r0, r5
    1140:	f004 f9fb 	bl	553a <boot_write_status>
        bs->idx++;
    1144:	6823      	ldr	r3, [r4, #0]
    1146:	3301      	adds	r3, #1
    1148:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    114a:	2301      	movs	r3, #1
    114c:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    114e:	2800      	cmp	r0, #0
    1150:	d0c7      	beq.n	10e2 <boot_swap_sectors+0x36>
    1152:	4a02      	ldr	r2, [pc, #8]	; (115c <boot_swap_sectors+0xb0>)
    1154:	6813      	ldr	r3, [r2, #0]
    1156:	3301      	adds	r3, #1
    1158:	6013      	str	r3, [r2, #0]
}
    115a:	e7c2      	b.n	10e2 <boot_swap_sectors+0x36>
    115c:	200026e4 	.word	0x200026e4

00001160 <boot_read_image_header>:
{
    1160:	b570      	push	{r4, r5, r6, lr}
    1162:	b082      	sub	sp, #8
    1164:	4616      	mov	r6, r2
    if (bs) {
    1166:	461c      	mov	r4, r3
    1168:	2b00      	cmp	r3, #0
    116a:	d036      	beq.n	11da <boot_read_image_header+0x7a>
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    116c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    116e:	685d      	ldr	r5, [r3, #4]
        if (bs->op == BOOT_STATUS_OP_MOVE) {
    1170:	7963      	ldrb	r3, [r4, #5]
    1172:	2b01      	cmp	r3, #1
    1174:	d011      	beq.n	119a <boot_read_image_header+0x3a>
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
    1176:	2b02      	cmp	r3, #2
    1178:	d017      	beq.n	11aa <boot_read_image_header+0x4a>
    off = 0;
    117a:	2500      	movs	r5, #0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    117c:	2000      	movs	r0, #0
    117e:	f003 fdce 	bl	4d1e <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    1182:	a901      	add	r1, sp, #4
    1184:	b2c0      	uxtb	r0, r0
    1186:	f000 fed9 	bl	1f3c <flash_area_open>
    if (rc != 0) {
    118a:	b368      	cbz	r0, 11e8 <boot_read_image_header+0x88>
        rc = BOOT_EFLASH;
    118c:	2501      	movs	r5, #1
    flash_area_close(fap);
    118e:	9801      	ldr	r0, [sp, #4]
    1190:	f005 f81b 	bl	61ca <flash_area_close>
}
    1194:	4628      	mov	r0, r5
    1196:	b002      	add	sp, #8
    1198:	bd70      	pop	{r4, r5, r6, pc}
            if (slot == 0 && bs->idx > g_last_idx) {
    119a:	bb01      	cbnz	r1, 11de <boot_read_image_header+0x7e>
    119c:	6822      	ldr	r2, [r4, #0]
    119e:	4b1c      	ldr	r3, [pc, #112]	; (1210 <boot_read_image_header+0xb0>)
    11a0:	681b      	ldr	r3, [r3, #0]
    11a2:	429a      	cmp	r2, r3
    11a4:	d8ea      	bhi.n	117c <boot_read_image_header+0x1c>
    off = 0;
    11a6:	2500      	movs	r5, #0
    11a8:	e7e8      	b.n	117c <boot_read_image_header+0x1c>
            if (bs->idx > 1 && bs->idx <= g_last_idx) {
    11aa:	6823      	ldr	r3, [r4, #0]
    11ac:	2b01      	cmp	r3, #1
    11ae:	d907      	bls.n	11c0 <boot_read_image_header+0x60>
    11b0:	4a17      	ldr	r2, [pc, #92]	; (1210 <boot_read_image_header+0xb0>)
    11b2:	6812      	ldr	r2, [r2, #0]
    11b4:	4293      	cmp	r3, r2
    11b6:	d803      	bhi.n	11c0 <boot_read_image_header+0x60>
                if (slot == 0) {
    11b8:	b999      	cbnz	r1, 11e2 <boot_read_image_header+0x82>
    off = 0;
    11ba:	2500      	movs	r5, #0
                    slot = 1;
    11bc:	2101      	movs	r1, #1
    11be:	e7dd      	b.n	117c <boot_read_image_header+0x1c>
            } else if (bs->idx == 1) {
    11c0:	2b01      	cmp	r3, #1
    11c2:	d001      	beq.n	11c8 <boot_read_image_header+0x68>
    off = 0;
    11c4:	2500      	movs	r5, #0
    11c6:	e7d9      	b.n	117c <boot_read_image_header+0x1c>
                if (slot == 0) {
    11c8:	b101      	cbz	r1, 11cc <boot_read_image_header+0x6c>
    off = 0;
    11ca:	2500      	movs	r5, #0
                if (slot == 1 && bs->state == 2) {
    11cc:	2901      	cmp	r1, #1
    11ce:	d1d5      	bne.n	117c <boot_read_image_header+0x1c>
    11d0:	7923      	ldrb	r3, [r4, #4]
    11d2:	2b02      	cmp	r3, #2
    11d4:	d1d2      	bne.n	117c <boot_read_image_header+0x1c>
                    slot = 0;
    11d6:	2100      	movs	r1, #0
    11d8:	e7d0      	b.n	117c <boot_read_image_header+0x1c>
    off = 0;
    11da:	2500      	movs	r5, #0
    11dc:	e7ce      	b.n	117c <boot_read_image_header+0x1c>
    11de:	2500      	movs	r5, #0
    11e0:	e7cc      	b.n	117c <boot_read_image_header+0x1c>
    11e2:	2500      	movs	r5, #0
                    slot = 0;
    11e4:	4629      	mov	r1, r5
    11e6:	e7c9      	b.n	117c <boot_read_image_header+0x1c>
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
    11e8:	2320      	movs	r3, #32
    11ea:	4632      	mov	r2, r6
    11ec:	4629      	mov	r1, r5
    11ee:	9801      	ldr	r0, [sp, #4]
    11f0:	f004 ffec 	bl	61cc <flash_area_read>
    if (rc != 0) {
    11f4:	4605      	mov	r5, r0
    11f6:	b940      	cbnz	r0, 120a <boot_read_image_header+0xaa>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
    11f8:	2c00      	cmp	r4, #0
    11fa:	d0c8      	beq.n	118e <boot_read_image_header+0x2e>
    11fc:	6832      	ldr	r2, [r6, #0]
    11fe:	4b05      	ldr	r3, [pc, #20]	; (1214 <boot_read_image_header+0xb4>)
    1200:	429a      	cmp	r2, r3
    1202:	d0c4      	beq.n	118e <boot_read_image_header+0x2e>
        rc = -1;
    1204:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    1208:	e7c1      	b.n	118e <boot_read_image_header+0x2e>
        rc = BOOT_EFLASH;
    120a:	2501      	movs	r5, #1
    120c:	e7bf      	b.n	118e <boot_read_image_header+0x2e>
    120e:	bf00      	nop
    1210:	20000000 	.word	0x20000000
    1214:	96f3b83d 	.word	0x96f3b83d

00001218 <swap_read_status_bytes>:
{
    1218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    121c:	b085      	sub	sp, #20
    121e:	4606      	mov	r6, r0
    1220:	460d      	mov	r5, r1
    1222:	9201      	str	r2, [sp, #4]
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    1224:	4601      	mov	r1, r0
    1226:	2000      	movs	r0, #0
    1228:	f003 ff7b 	bl	5122 <boot_status_entries>
    if (max_entries < 0) {
    122c:	1e04      	subs	r4, r0, #0
    122e:	db62      	blt.n	12f6 <swap_read_status_bytes+0xde>
    write_sz = BOOT_WRITE_SZ(state);
    1230:	f8d5 a05c 	ldr.w	sl, [r5, #92]	; 0x5c
    off = boot_status_off(fap);
    1234:	4630      	mov	r0, r6
    1236:	f003 ff82 	bl	513e <boot_status_off>
    123a:	4681      	mov	r9, r0
    erased_sections = 0;
    123c:	f04f 0b00 	mov.w	fp, #0
    last_rc = 1;
    1240:	2701      	movs	r7, #1
    found_idx = -1;
    1242:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    for (i = max_entries; i > 0; i--) {
    1246:	e005      	b.n	1254 <swap_read_status_bytes+0x3c>
            if (rc != last_rc) {
    1248:	4287      	cmp	r7, r0
    124a:	d001      	beq.n	1250 <swap_read_status_bytes+0x38>
                erased_sections++;
    124c:	f10b 0b01 	add.w	fp, fp, #1
                found_idx = i;
    1250:	462c      	mov	r4, r5
    1252:	4607      	mov	r7, r0
    for (i = max_entries; i > 0; i--) {
    1254:	2c00      	cmp	r4, #0
    1256:	dd13      	ble.n	1280 <swap_read_status_bytes+0x68>
        rc = flash_area_read_is_empty(fap, off + (i - 1) * write_sz, &status, 1);
    1258:	1e65      	subs	r5, r4, #1
    125a:	fa5f f18a 	uxtb.w	r1, sl
    125e:	2301      	movs	r3, #1
    1260:	f10d 020f 	add.w	r2, sp, #15
    1264:	fb05 9101 	mla	r1, r5, r1, r9
    1268:	4630      	mov	r0, r6
    126a:	f003 fd64 	bl	4d36 <flash_area_read_is_empty>
        if (rc < 0) {
    126e:	2800      	cmp	r0, #0
    1270:	db43      	blt.n	12fa <swap_read_status_bytes+0xe2>
        if (rc == 1) {
    1272:	2801      	cmp	r0, #1
    1274:	d0e8      	beq.n	1248 <swap_read_status_bytes+0x30>
            if (found_idx == -1) {
    1276:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    127a:	d1e9      	bne.n	1250 <swap_read_status_bytes+0x38>
                found_idx = i;
    127c:	46a0      	mov	r8, r4
    127e:	e7e7      	b.n	1250 <swap_read_status_bytes+0x38>
    if (erased_sections > 1) {
    1280:	f1bb 0f01 	cmp.w	fp, #1
    1284:	dc0e      	bgt.n	12a4 <swap_read_status_bytes+0x8c>
    if (found_idx == -1) {
    1286:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    128a:	d03a      	beq.n	1302 <swap_read_status_bytes+0xea>
    } else if (found_idx < move_entries) {
    128c:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
    1290:	dc1a      	bgt.n	12c8 <swap_read_status_bytes+0xb0>
        bs->op = BOOT_STATUS_OP_MOVE;
    1292:	2301      	movs	r3, #1
    1294:	9901      	ldr	r1, [sp, #4]
    1296:	714b      	strb	r3, [r1, #5]
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
    1298:	eb08 0203 	add.w	r2, r8, r3
    129c:	600a      	str	r2, [r1, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
    129e:	710b      	strb	r3, [r1, #4]
    return 0;
    12a0:	2000      	movs	r0, #0
    12a2:	e02b      	b.n	12fc <swap_read_status_bytes+0xe4>
        BOOT_LOG_ERR("Detected inconsistent status!");
    12a4:	f04f 0000 	mov.w	r0, #0
    12a8:	2301      	movs	r3, #1
    12aa:	f363 0002 	bfi	r0, r3, #0, #3
    12ae:	f36f 00c5 	bfc	r0, #3, #3
    12b2:	4b15      	ldr	r3, [pc, #84]	; (1308 <swap_read_status_bytes+0xf0>)
    12b4:	4a15      	ldr	r2, [pc, #84]	; (130c <swap_read_status_bytes+0xf4>)
    12b6:	1a9b      	subs	r3, r3, r2
    12b8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    12bc:	f363 108f 	bfi	r0, r3, #6, #10
    12c0:	4913      	ldr	r1, [pc, #76]	; (1310 <swap_read_status_bytes+0xf8>)
    12c2:	f004 fe9a 	bl	5ffa <log_string_sync>
    12c6:	e7de      	b.n	1286 <swap_read_status_bytes+0x6e>
        bs->op = BOOT_STATUS_OP_SWAP;
    12c8:	2302      	movs	r3, #2
    12ca:	9a01      	ldr	r2, [sp, #4]
    12cc:	7153      	strb	r3, [r2, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
    12ce:	f1a8 0880 	sub.w	r8, r8, #128	; 0x80
    12d2:	eb08 73d8 	add.w	r3, r8, r8, lsr #31
    12d6:	105b      	asrs	r3, r3, #1
    12d8:	3301      	adds	r3, #1
    12da:	6013      	str	r3, [r2, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    12dc:	f1b8 0f00 	cmp.w	r8, #0
    12e0:	f008 0801 	and.w	r8, r8, #1
    12e4:	bfb8      	it	lt
    12e6:	f1c8 0800 	rsblt	r8, r8, #0
    12ea:	f108 0801 	add.w	r8, r8, #1
    12ee:	f882 8004 	strb.w	r8, [r2, #4]
    return 0;
    12f2:	2000      	movs	r0, #0
    12f4:	e002      	b.n	12fc <swap_read_status_bytes+0xe4>
        return BOOT_EBADARGS;
    12f6:	2007      	movs	r0, #7
    12f8:	e000      	b.n	12fc <swap_read_status_bytes+0xe4>
            return BOOT_EFLASH;
    12fa:	2001      	movs	r0, #1
}
    12fc:	b005      	add	sp, #20
    12fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0;
    1302:	2000      	movs	r0, #0
    1304:	e7fa      	b.n	12fc <swap_read_status_bytes+0xe4>
    1306:	bf00      	nop
    1308:	00008aa8 	.word	0x00008aa8
    130c:	00008aa0 	.word	0x00008aa0
    1310:	00008e44 	.word	0x00008e44

00001314 <boot_slots_compatible>:
{
    1314:	b570      	push	{r4, r5, r6, lr}
    return BOOT_IMG(state, slot).num_sectors;
    1316:	6a86      	ldr	r6, [r0, #40]	; 0x28
    1318:	6d45      	ldr	r5, [r0, #84]	; 0x54
    if ((num_sectors_pri != num_sectors_sec) &&
    131a:	42ae      	cmp	r6, r5
    131c:	d002      	beq.n	1324 <boot_slots_compatible+0x10>
            (num_sectors_pri != (num_sectors_sec + 1))) {
    131e:	1c6b      	adds	r3, r5, #1
    if ((num_sectors_pri != num_sectors_sec) &&
    1320:	42b3      	cmp	r3, r6
    1322:	d110      	bne.n	1346 <boot_slots_compatible+0x32>
    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
    1324:	2e80      	cmp	r6, #128	; 0x80
    1326:	d821      	bhi.n	136c <boot_slots_compatible+0x58>
    for (i = 0; i < num_sectors_sec; i++) {
    1328:	2300      	movs	r3, #0
    size_t sector_sz_pri = 0;
    132a:	4619      	mov	r1, r3
    for (i = 0; i < num_sectors_sec; i++) {
    132c:	42ab      	cmp	r3, r5
    132e:	d243      	bcs.n	13b8 <boot_slots_compatible+0xa4>
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    1330:	6a41      	ldr	r1, [r0, #36]	; 0x24
    1332:	00dc      	lsls	r4, r3, #3
    1334:	4421      	add	r1, r4
    1336:	6849      	ldr	r1, [r1, #4]
    1338:	6d02      	ldr	r2, [r0, #80]	; 0x50
    133a:	4422      	add	r2, r4
    133c:	6852      	ldr	r2, [r2, #4]
        if (sector_sz_pri != sector_sz_sec) {
    133e:	428a      	cmp	r2, r1
    1340:	d127      	bne.n	1392 <boot_slots_compatible+0x7e>
    for (i = 0; i < num_sectors_sec; i++) {
    1342:	3301      	adds	r3, #1
    1344:	e7f2      	b.n	132c <boot_slots_compatible+0x18>
        BOOT_LOG_WRN("Cannot upgrade: not a compatible amount of sectors");
    1346:	f04f 0000 	mov.w	r0, #0
    134a:	2302      	movs	r3, #2
    134c:	f363 0002 	bfi	r0, r3, #0, #3
    1350:	f36f 00c5 	bfc	r0, #3, #3
    1354:	4b28      	ldr	r3, [pc, #160]	; (13f8 <boot_slots_compatible+0xe4>)
    1356:	4a29      	ldr	r2, [pc, #164]	; (13fc <boot_slots_compatible+0xe8>)
    1358:	1a9b      	subs	r3, r3, r2
    135a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    135e:	f363 108f 	bfi	r0, r3, #6, #10
    1362:	4927      	ldr	r1, [pc, #156]	; (1400 <boot_slots_compatible+0xec>)
    1364:	f004 fe49 	bl	5ffa <log_string_sync>
        return 0;
    1368:	2000      	movs	r0, #0
    136a:	e024      	b.n	13b6 <boot_slots_compatible+0xa2>
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
    136c:	f04f 0000 	mov.w	r0, #0
    1370:	2302      	movs	r3, #2
    1372:	f363 0002 	bfi	r0, r3, #0, #3
    1376:	f36f 00c5 	bfc	r0, #3, #3
    137a:	4b1f      	ldr	r3, [pc, #124]	; (13f8 <boot_slots_compatible+0xe4>)
    137c:	4a1f      	ldr	r2, [pc, #124]	; (13fc <boot_slots_compatible+0xe8>)
    137e:	1a9b      	subs	r3, r3, r2
    1380:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    1384:	f363 108f 	bfi	r0, r3, #6, #10
    1388:	491e      	ldr	r1, [pc, #120]	; (1404 <boot_slots_compatible+0xf0>)
    138a:	f004 fe36 	bl	5ffa <log_string_sync>
        return 0;
    138e:	2000      	movs	r0, #0
    1390:	e011      	b.n	13b6 <boot_slots_compatible+0xa2>
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
    1392:	f04f 0000 	mov.w	r0, #0
    1396:	2302      	movs	r3, #2
    1398:	f363 0002 	bfi	r0, r3, #0, #3
    139c:	f36f 00c5 	bfc	r0, #3, #3
    13a0:	4b15      	ldr	r3, [pc, #84]	; (13f8 <boot_slots_compatible+0xe4>)
    13a2:	4a16      	ldr	r2, [pc, #88]	; (13fc <boot_slots_compatible+0xe8>)
    13a4:	1a9b      	subs	r3, r3, r2
    13a6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    13aa:	f363 108f 	bfi	r0, r3, #6, #10
    13ae:	4916      	ldr	r1, [pc, #88]	; (1408 <boot_slots_compatible+0xf4>)
    13b0:	f004 fe23 	bl	5ffa <log_string_sync>
            return 0;
    13b4:	2000      	movs	r0, #0
}
    13b6:	bd70      	pop	{r4, r5, r6, pc}
    if (num_sectors_pri > num_sectors_sec) {
    13b8:	42ae      	cmp	r6, r5
    13ba:	d91a      	bls.n	13f2 <boot_slots_compatible+0xde>
    13bc:	6a42      	ldr	r2, [r0, #36]	; 0x24
    13be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    13c2:	685b      	ldr	r3, [r3, #4]
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
    13c4:	4299      	cmp	r1, r3
    13c6:	d101      	bne.n	13cc <boot_slots_compatible+0xb8>
    return 1;
    13c8:	2001      	movs	r0, #1
    13ca:	e7f4      	b.n	13b6 <boot_slots_compatible+0xa2>
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
    13cc:	f04f 0000 	mov.w	r0, #0
    13d0:	2302      	movs	r3, #2
    13d2:	f363 0002 	bfi	r0, r3, #0, #3
    13d6:	f36f 00c5 	bfc	r0, #3, #3
    13da:	4b07      	ldr	r3, [pc, #28]	; (13f8 <boot_slots_compatible+0xe4>)
    13dc:	4a07      	ldr	r2, [pc, #28]	; (13fc <boot_slots_compatible+0xe8>)
    13de:	1a9b      	subs	r3, r3, r2
    13e0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    13e4:	f363 108f 	bfi	r0, r3, #6, #10
    13e8:	4907      	ldr	r1, [pc, #28]	; (1408 <boot_slots_compatible+0xf4>)
    13ea:	f004 fe06 	bl	5ffa <log_string_sync>
            return 0;
    13ee:	2000      	movs	r0, #0
    13f0:	e7e1      	b.n	13b6 <boot_slots_compatible+0xa2>
    return 1;
    13f2:	2001      	movs	r0, #1
    13f4:	e7df      	b.n	13b6 <boot_slots_compatible+0xa2>
    13f6:	bf00      	nop
    13f8:	00008aa8 	.word	0x00008aa8
    13fc:	00008aa0 	.word	0x00008aa0
    1400:	00008dac 	.word	0x00008dac
    1404:	00008de0 	.word	0x00008de0
    1408:	00008e0c 	.word	0x00008e0c

0000140c <swap_status_source>:
{
    140c:	b510      	push	{r4, lr}
    140e:	b086      	sub	sp, #24
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    1410:	a904      	add	r1, sp, #16
    1412:	2003      	movs	r0, #3
    1414:	f003 feff 	bl	5216 <boot_read_swap_state_by_id>
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    1418:	f04f 0000 	mov.w	r0, #0
    141c:	2303      	movs	r3, #3
    141e:	f363 0002 	bfi	r0, r3, #0, #3
    1422:	f36f 00c5 	bfc	r0, #3, #3
    1426:	4b26      	ldr	r3, [pc, #152]	; (14c0 <swap_status_source+0xb4>)
    1428:	4a26      	ldr	r2, [pc, #152]	; (14c4 <swap_status_source+0xb8>)
    142a:	1a9b      	subs	r3, r3, r2
    142c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    1430:	f363 108f 	bfi	r0, r3, #6, #10
    1434:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1438:	2b01      	cmp	r3, #1
    143a:	d02d      	beq.n	1498 <swap_status_source+0x8c>
    143c:	2b03      	cmp	r3, #3
    143e:	d029      	beq.n	1494 <swap_status_source+0x88>
    1440:	4b21      	ldr	r3, [pc, #132]	; (14c8 <swap_status_source+0xbc>)
    1442:	f89d 2011 	ldrb.w	r2, [sp, #17]
    1446:	f89d 1012 	ldrb.w	r1, [sp, #18]
    144a:	f89d 4013 	ldrb.w	r4, [sp, #19]
    144e:	9402      	str	r4, [sp, #8]
    1450:	9101      	str	r1, [sp, #4]
    1452:	9200      	str	r2, [sp, #0]
    1454:	4a1d      	ldr	r2, [pc, #116]	; (14cc <swap_status_source+0xc0>)
    1456:	491e      	ldr	r1, [pc, #120]	; (14d0 <swap_status_source+0xc4>)
    1458:	f004 fdcf 	bl	5ffa <log_string_sync>
    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
    145c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1460:	2b01      	cmp	r3, #1
    1462:	d103      	bne.n	146c <swap_status_source+0x60>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET) {
    1464:	f89d 3012 	ldrb.w	r3, [sp, #18]
    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
    1468:	2b03      	cmp	r3, #3
    146a:	d017      	beq.n	149c <swap_status_source+0x90>
    BOOT_LOG_INF("Boot source: none");
    146c:	f04f 0000 	mov.w	r0, #0
    1470:	2303      	movs	r3, #3
    1472:	f363 0002 	bfi	r0, r3, #0, #3
    1476:	f36f 00c5 	bfc	r0, #3, #3
    147a:	4b11      	ldr	r3, [pc, #68]	; (14c0 <swap_status_source+0xb4>)
    147c:	4a11      	ldr	r2, [pc, #68]	; (14c4 <swap_status_source+0xb8>)
    147e:	1a9b      	subs	r3, r3, r2
    1480:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    1484:	f363 108f 	bfi	r0, r3, #6, #10
    1488:	4912      	ldr	r1, [pc, #72]	; (14d4 <swap_status_source+0xc8>)
    148a:	f004 fdb6 	bl	5ffa <log_string_sync>
    return BOOT_STATUS_SOURCE_NONE;
    148e:	2000      	movs	r0, #0
}
    1490:	b006      	add	sp, #24
    1492:	bd10      	pop	{r4, pc}
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    1494:	4b10      	ldr	r3, [pc, #64]	; (14d8 <swap_status_source+0xcc>)
    1496:	e7d4      	b.n	1442 <swap_status_source+0x36>
    1498:	4b10      	ldr	r3, [pc, #64]	; (14dc <swap_status_source+0xd0>)
    149a:	e7d2      	b.n	1442 <swap_status_source+0x36>
        BOOT_LOG_INF("Boot source: primary slot");
    149c:	f04f 0000 	mov.w	r0, #0
    14a0:	f363 0002 	bfi	r0, r3, #0, #3
    14a4:	f36f 00c5 	bfc	r0, #3, #3
    14a8:	4b05      	ldr	r3, [pc, #20]	; (14c0 <swap_status_source+0xb4>)
    14aa:	4a06      	ldr	r2, [pc, #24]	; (14c4 <swap_status_source+0xb8>)
    14ac:	1a9b      	subs	r3, r3, r2
    14ae:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    14b2:	f363 108f 	bfi	r0, r3, #6, #10
    14b6:	490a      	ldr	r1, [pc, #40]	; (14e0 <swap_status_source+0xd4>)
    14b8:	f004 fd9f 	bl	5ffa <log_string_sync>
        return source;
    14bc:	2002      	movs	r0, #2
    14be:	e7e7      	b.n	1490 <swap_status_source+0x84>
    14c0:	00008aa8 	.word	0x00008aa8
    14c4:	00008aa0 	.word	0x00008aa0
    14c8:	00008e90 	.word	0x00008e90
    14cc:	00008ea4 	.word	0x00008ea4
    14d0:	00008eb4 	.word	0x00008eb4
    14d4:	00008f0c 	.word	0x00008f0c
    14d8:	00008e9c 	.word	0x00008e9c
    14dc:	00008e94 	.word	0x00008e94
    14e0:	00008ef0 	.word	0x00008ef0

000014e4 <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec, uint8_t sec_id)
{
    14e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    14e6:	b087      	sub	sp, #28
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    14e8:	684c      	ldr	r4, [r1, #4]
    14ea:	f004 24ff 	and.w	r4, r4, #4278255360	; 0xff00ff00
    14ee:	4d24      	ldr	r5, [pc, #144]	; (1580 <fixup_revert+0x9c>)
    14f0:	42ac      	cmp	r4, r5
    14f2:	d102      	bne.n	14fa <fixup_revert+0x16>
        bs->op != BOOT_STATUS_OP_MOVE ||
        bs->idx != BOOT_STATUS_IDX_0) {
    14f4:	680c      	ldr	r4, [r1, #0]
        bs->op != BOOT_STATUS_OP_MOVE ||
    14f6:	2c01      	cmp	r4, #1
    14f8:	d001      	beq.n	14fe <fixup_revert+0x1a>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
        assert(rc == 0);
    }
}
    14fa:	b007      	add	sp, #28
    14fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14fe:	4616      	mov	r6, r2
    1500:	460c      	mov	r4, r1
    1502:	4605      	mov	r5, r0
    rc = boot_read_swap_state_by_id(sec_id, &swap_state);
    1504:	a904      	add	r1, sp, #16
    1506:	4618      	mov	r0, r3
    1508:	f003 fe85 	bl	5216 <boot_read_swap_state_by_id>
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    150c:	f04f 0000 	mov.w	r0, #0
    1510:	2303      	movs	r3, #3
    1512:	f363 0002 	bfi	r0, r3, #0, #3
    1516:	f36f 00c5 	bfc	r0, #3, #3
    151a:	4b1a      	ldr	r3, [pc, #104]	; (1584 <fixup_revert+0xa0>)
    151c:	4a1a      	ldr	r2, [pc, #104]	; (1588 <fixup_revert+0xa4>)
    151e:	1a9b      	subs	r3, r3, r2
    1520:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    1524:	f363 108f 	bfi	r0, r3, #6, #10
    1528:	f89d 3010 	ldrb.w	r3, [sp, #16]
    152c:	2b01      	cmp	r3, #1
    152e:	d024      	beq.n	157a <fixup_revert+0x96>
    1530:	2b03      	cmp	r3, #3
    1532:	d020      	beq.n	1576 <fixup_revert+0x92>
    1534:	4b15      	ldr	r3, [pc, #84]	; (158c <fixup_revert+0xa8>)
    1536:	f89d 2011 	ldrb.w	r2, [sp, #17]
    153a:	f89d 1012 	ldrb.w	r1, [sp, #18]
    153e:	f89d 7013 	ldrb.w	r7, [sp, #19]
    1542:	9702      	str	r7, [sp, #8]
    1544:	9101      	str	r1, [sp, #4]
    1546:	9200      	str	r2, [sp, #0]
    1548:	4a11      	ldr	r2, [pc, #68]	; (1590 <fixup_revert+0xac>)
    154a:	4912      	ldr	r1, [pc, #72]	; (1594 <fixup_revert+0xb0>)
    154c:	f004 fd55 	bl	5ffa <log_string_sync>
    if (swap_state.magic == BOOT_MAGIC_UNSET) {
    1550:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1554:	2b03      	cmp	r3, #3
    1556:	d1d0      	bne.n	14fa <fixup_revert+0x16>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    1558:	4631      	mov	r1, r6
    155a:	4628      	mov	r0, r5
    155c:	f004 f824 	bl	55a8 <swap_erase_trailer_sectors>
        rc = boot_write_image_ok(fap_sec);
    1560:	4630      	mov	r0, r6
    1562:	f003 fe8f 	bl	5284 <boot_write_image_ok>
        rc = boot_write_swap_size(fap_sec, bs->swap_size);
    1566:	68a1      	ldr	r1, [r4, #8]
    1568:	4630      	mov	r0, r6
    156a:	f003 fea4 	bl	52b6 <boot_write_swap_size>
        rc = boot_write_magic(fap_sec);
    156e:	4630      	mov	r0, r6
    1570:	f7ff fa0e 	bl	990 <boot_write_magic>
        assert(rc == 0);
    1574:	e7c1      	b.n	14fa <fixup_revert+0x16>
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    1576:	4b08      	ldr	r3, [pc, #32]	; (1598 <fixup_revert+0xb4>)
    1578:	e7dd      	b.n	1536 <fixup_revert+0x52>
    157a:	4b08      	ldr	r3, [pc, #32]	; (159c <fixup_revert+0xb8>)
    157c:	e7db      	b.n	1536 <fixup_revert+0x52>
    157e:	bf00      	nop
    1580:	04000100 	.word	0x04000100
    1584:	00008aa8 	.word	0x00008aa8
    1588:	00008aa0 	.word	0x00008aa0
    158c:	00008e90 	.word	0x00008e90
    1590:	00008e34 	.word	0x00008e34
    1594:	00008eb4 	.word	0x00008eb4
    1598:	00008e9c 	.word	0x00008e9c
    159c:	00008e94 	.word	0x00008e94

000015a0 <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    15a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    15a2:	b085      	sub	sp, #20
    15a4:	4607      	mov	r7, r0
    15a6:	460d      	mov	r5, r1
    const struct flash_area *fap_pri;
    const struct flash_area *fap_sec;
    int rc;

    sz = 0;
    g_last_idx = 0;
    15a8:	2100      	movs	r1, #0
    15aa:	4b3e      	ldr	r3, [pc, #248]	; (16a4 <swap_run+0x104>)
    15ac:	6019      	str	r1, [r3, #0]
    15ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
    15b0:	685e      	ldr	r6, [r3, #4]

    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
    while (1) {
        sz += sector_sz;
    15b2:	4431      	add	r1, r6
        /* Skip to next sector because all sectors will be moved up. */
        g_last_idx++;
    15b4:	483b      	ldr	r0, [pc, #236]	; (16a4 <swap_run+0x104>)
    15b6:	6803      	ldr	r3, [r0, #0]
    15b8:	3301      	adds	r3, #1
    15ba:	6003      	str	r3, [r0, #0]
        if (sz >= copy_size) {
    15bc:	4291      	cmp	r1, r2
    15be:	d3f8      	bcc.n	15b2 <swap_run+0x12>
    }

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
    15c0:	4628      	mov	r0, r5
    15c2:	f003 ff84 	bl	54ce <boot_status_is_reset>
    15c6:	b170      	cbz	r0, 15e6 <swap_run+0x46>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    15c8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    15ca:	f003 fda5 	bl	5118 <boot_trailer_sz>
    return BOOT_IMG(state, slot).num_sectors;
    15ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    15d0:	3a01      	subs	r2, #1
        sz = 0;
    15d2:	2300      	movs	r3, #0

        while (1) {
            sz += sector_sz;
    15d4:	4433      	add	r3, r6
            if  (sz >= trailer_sz) {
    15d6:	4298      	cmp	r0, r3
    15d8:	d901      	bls.n	15de <swap_run+0x3e>
                break;
            }
            first_trailer_idx--;
    15da:	3a01      	subs	r2, #1
            sz += sector_sz;
    15dc:	e7fa      	b.n	15d4 <swap_run+0x34>
        }

        if (g_last_idx >= first_trailer_idx) {
    15de:	4b31      	ldr	r3, [pc, #196]	; (16a4 <swap_run+0x104>)
    15e0:	681b      	ldr	r3, [r3, #0]
    15e2:	4293      	cmp	r3, r2
    15e4:	d214      	bcs.n	1610 <swap_run+0x70>
        }
    }

    image_index = BOOT_CURR_IMG(state);

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
    15e6:	a903      	add	r1, sp, #12
    15e8:	2003      	movs	r0, #3
    15ea:	f000 fca7 	bl	1f3c <flash_area_open>
    assert (rc == 0);

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
    15ee:	a902      	add	r1, sp, #8
    15f0:	2007      	movs	r0, #7
    15f2:	f000 fca3 	bl	1f3c <flash_area_open>
    assert (rc == 0);

    fixup_revert(state, bs, fap_sec, FLASH_AREA_IMAGE_SECONDARY(image_index));
    15f6:	2307      	movs	r3, #7
    15f8:	9a02      	ldr	r2, [sp, #8]
    15fa:	4629      	mov	r1, r5
    15fc:	4638      	mov	r0, r7
    15fe:	f7ff ff71 	bl	14e4 <fixup_revert>

    if (bs->op == BOOT_STATUS_OP_MOVE) {
    1602:	796b      	ldrb	r3, [r5, #5]
    1604:	2b01      	cmp	r3, #1
    1606:	d017      	beq.n	1638 <swap_run+0x98>
            idx--;
        }
        bs->idx = BOOT_STATUS_IDX_0;
    }

    bs->op = BOOT_STATUS_OP_SWAP;
    1608:	2302      	movs	r3, #2
    160a:	716b      	strb	r3, [r5, #5]

    idx = 1;
    160c:	2401      	movs	r4, #1
    while (idx <= g_last_idx) {
    160e:	e038      	b.n	1682 <swap_run+0xe2>
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
    1610:	f04f 0000 	mov.w	r0, #0
    1614:	2302      	movs	r3, #2
    1616:	f363 0002 	bfi	r0, r3, #0, #3
    161a:	f36f 00c5 	bfc	r0, #3, #3
    161e:	4b22      	ldr	r3, [pc, #136]	; (16a8 <swap_run+0x108>)
    1620:	4a22      	ldr	r2, [pc, #136]	; (16ac <swap_run+0x10c>)
    1622:	1a9b      	subs	r3, r3, r2
    1624:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    1628:	f363 108f 	bfi	r0, r3, #6, #10
    162c:	4920      	ldr	r1, [pc, #128]	; (16b0 <swap_run+0x110>)
    162e:	f004 fce4 	bl	5ffa <log_string_sync>
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
    1632:	2301      	movs	r3, #1
    1634:	71eb      	strb	r3, [r5, #7]
            return;
    1636:	e032      	b.n	169e <swap_run+0xfe>
        idx = g_last_idx;
    1638:	4b1a      	ldr	r3, [pc, #104]	; (16a4 <swap_run+0x104>)
    163a:	681c      	ldr	r4, [r3, #0]
        while (idx > 0) {
    163c:	e000      	b.n	1640 <swap_run+0xa0>
            idx--;
    163e:	3c01      	subs	r4, #1
        while (idx > 0) {
    1640:	b18c      	cbz	r4, 1666 <swap_run+0xc6>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    1642:	682a      	ldr	r2, [r5, #0]
    1644:	4b17      	ldr	r3, [pc, #92]	; (16a4 <swap_run+0x104>)
    1646:	681b      	ldr	r3, [r3, #0]
    1648:	1a9b      	subs	r3, r3, r2
    164a:	3301      	adds	r3, #1
    164c:	429c      	cmp	r4, r3
    164e:	d8f6      	bhi.n	163e <swap_run+0x9e>
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    1650:	9b02      	ldr	r3, [sp, #8]
    1652:	9301      	str	r3, [sp, #4]
    1654:	9b03      	ldr	r3, [sp, #12]
    1656:	9300      	str	r3, [sp, #0]
    1658:	462b      	mov	r3, r5
    165a:	463a      	mov	r2, r7
    165c:	4631      	mov	r1, r6
    165e:	4620      	mov	r0, r4
    1660:	f7ff fce0 	bl	1024 <boot_move_sector_up>
    1664:	e7eb      	b.n	163e <swap_run+0x9e>
        bs->idx = BOOT_STATUS_IDX_0;
    1666:	2301      	movs	r3, #1
    1668:	602b      	str	r3, [r5, #0]
    166a:	e7cd      	b.n	1608 <swap_run+0x68>
        if (idx >= bs->idx) {
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    166c:	9b02      	ldr	r3, [sp, #8]
    166e:	9301      	str	r3, [sp, #4]
    1670:	9b03      	ldr	r3, [sp, #12]
    1672:	9300      	str	r3, [sp, #0]
    1674:	462b      	mov	r3, r5
    1676:	463a      	mov	r2, r7
    1678:	4631      	mov	r1, r6
    167a:	4620      	mov	r0, r4
    167c:	f7ff fd16 	bl	10ac <boot_swap_sectors>
        }
        idx++;
    1680:	3401      	adds	r4, #1
    while (idx <= g_last_idx) {
    1682:	4b08      	ldr	r3, [pc, #32]	; (16a4 <swap_run+0x104>)
    1684:	681b      	ldr	r3, [r3, #0]
    1686:	42a3      	cmp	r3, r4
    1688:	d303      	bcc.n	1692 <swap_run+0xf2>
        if (idx >= bs->idx) {
    168a:	682b      	ldr	r3, [r5, #0]
    168c:	42a3      	cmp	r3, r4
    168e:	d8f7      	bhi.n	1680 <swap_run+0xe0>
    1690:	e7ec      	b.n	166c <swap_run+0xcc>
    }

    flash_area_close(fap_pri);
    1692:	9803      	ldr	r0, [sp, #12]
    1694:	f004 fd99 	bl	61ca <flash_area_close>
    flash_area_close(fap_sec);
    1698:	9802      	ldr	r0, [sp, #8]
    169a:	f004 fd96 	bl	61ca <flash_area_close>
}
    169e:	b005      	add	sp, #20
    16a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16a2:	bf00      	nop
    16a4:	20000000 	.word	0x20000000
    16a8:	00008aa8 	.word	0x00008aa8
    16ac:	00008aa0 	.word	0x00008aa0
    16b0:	00008e64 	.word	0x00008e64

000016b4 <cleanup_arm_nvic>:
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    16b4:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsid i" : : : "memory");
    16b8:	b672      	cpsid	i
	/* Allow any pending interrupts to be recognized */
	__ISB();
	__disable_irq();

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    16ba:	2300      	movs	r3, #0
    16bc:	2b0f      	cmp	r3, #15
    16be:	d809      	bhi.n	16d4 <cleanup_arm_nvic+0x20>
		NVIC->ICER[i] = 0xFFFFFFFF;
    16c0:	f103 0120 	add.w	r1, r3, #32
    16c4:	4a0a      	ldr	r2, [pc, #40]	; (16f0 <cleanup_arm_nvic+0x3c>)
    16c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    16ca:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    16ce:	3301      	adds	r3, #1
    16d0:	b2db      	uxtb	r3, r3
    16d2:	e7f3      	b.n	16bc <cleanup_arm_nvic+0x8>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    16d4:	2300      	movs	r3, #0
    16d6:	2b0f      	cmp	r3, #15
    16d8:	d809      	bhi.n	16ee <cleanup_arm_nvic+0x3a>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    16da:	f103 0160 	add.w	r1, r3, #96	; 0x60
    16de:	4a04      	ldr	r2, [pc, #16]	; (16f0 <cleanup_arm_nvic+0x3c>)
    16e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    16e4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    16e8:	3301      	adds	r3, #1
    16ea:	b2db      	uxtb	r3, r3
    16ec:	e7f3      	b.n	16d6 <cleanup_arm_nvic+0x22>
	}
}
    16ee:	4770      	bx	lr
    16f0:	e000e100 	.word	0xe000e100

000016f4 <nrf_cleanup_peripheral>:
{
    nrf_clock_int_disable(NRF_CLOCK, 0xFFFFFFFF);
}

void nrf_cleanup_peripheral(void)
{
    16f4:	b508      	push	{r3, lr}
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    16f6:	2201      	movs	r2, #1
    16f8:	4b10      	ldr	r3, [pc, #64]	; (173c <nrf_cleanup_peripheral+0x48>)
    16fa:	601a      	str	r2, [r3, #0]
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    16fc:	4910      	ldr	r1, [pc, #64]	; (1740 <nrf_cleanup_peripheral+0x4c>)
    16fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1702:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1706:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    170a:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    170e:	3104      	adds	r1, #4
    1710:	600a      	str	r2, [r1, #0]
    p_reg->EVTENCLR = mask;
    1712:	4a0c      	ldr	r2, [pc, #48]	; (1744 <nrf_cleanup_peripheral+0x50>)
    1714:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1718:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    171c:	f5a2 4250 	sub.w	r2, r2, #53248	; 0xd000
    1720:	2100      	movs	r1, #0
    1722:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    1726:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    172a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    172e:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    1732:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
#endif
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#endif
    nrf_cleanup_clock();
    1736:	f004 f816 	bl	5766 <nrf_cleanup_clock>
}
    173a:	bd08      	pop	{r3, pc}
    173c:	50014004 	.word	0x50014004
    1740:	50014000 	.word	0x50014000
    1744:	50015000 	.word	0x50015000

00001748 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
    1748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    174c:	b089      	sub	sp, #36	; 0x24
    174e:	4605      	mov	r5, r0
    1750:	9100      	str	r1, [sp, #0]
    1752:	4616      	mov	r6, r2
    1754:	461f      	mov	r7, r3
    1756:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
    175a:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
    175e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
    1762:	9301      	str	r3, [sp, #4]
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    1764:	2414      	movs	r4, #20
    1766:	ea56 0307 	orrs.w	r3, r6, r7
    176a:	d017      	beq.n	179c <print_digits+0x54>
		buf[i] = "0123456789abcdef"[num % base];
    176c:	ea4f 79eb 	mov.w	r9, fp, asr #31
    1770:	465a      	mov	r2, fp
    1772:	464b      	mov	r3, r9
    1774:	4630      	mov	r0, r6
    1776:	4639      	mov	r1, r7
    1778:	f7fe fce4 	bl	144 <__aeabi_uldivmod>
    177c:	4b1f      	ldr	r3, [pc, #124]	; (17fc <print_digits+0xb4>)
    177e:	5c9a      	ldrb	r2, [r3, r2]
    1780:	ab08      	add	r3, sp, #32
    1782:	4423      	add	r3, r4
    1784:	f803 2c18 	strb.w	r2, [r3, #-24]
		num /= base;
    1788:	465a      	mov	r2, fp
    178a:	464b      	mov	r3, r9
    178c:	4630      	mov	r0, r6
    178e:	4639      	mov	r1, r7
    1790:	f7fe fcd8 	bl	144 <__aeabi_uldivmod>
    1794:	4606      	mov	r6, r0
    1796:	460f      	mov	r7, r1
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    1798:	3c01      	subs	r4, #1
    179a:	e7e4      	b.n	1766 <print_digits+0x1e>
	}

	if (i == DIGITS_BUFLEN - 1) {
    179c:	2c14      	cmp	r4, #20
    179e:	d007      	beq.n	17b0 <print_digits+0x68>
		buf[i] = '0';
	} else {
		i++;
    17a0:	3401      	adds	r4, #1
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    17a2:	9e15      	ldr	r6, [sp, #84]	; 0x54
    17a4:	4426      	add	r6, r4
    17a6:	2e15      	cmp	r6, #21
    17a8:	d008      	beq.n	17bc <print_digits+0x74>
    17aa:	3e15      	subs	r6, #21
    17ac:	4657      	mov	r7, sl
    17ae:	e00c      	b.n	17ca <print_digits+0x82>
		buf[i] = '0';
    17b0:	2230      	movs	r2, #48	; 0x30
    17b2:	ab08      	add	r3, sp, #32
    17b4:	4423      	add	r3, r4
    17b6:	f803 2c18 	strb.w	r2, [r3, #-24]
    17ba:	e7f2      	b.n	17a2 <print_digits+0x5a>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    17bc:	2600      	movs	r6, #0
    17be:	4657      	mov	r7, sl
    17c0:	e003      	b.n	17ca <print_digits+0x82>

	for (/**/; pad > 0 && pad_before; pad--) {
		out(pad_char, ctx);
    17c2:	9900      	ldr	r1, [sp, #0]
    17c4:	9801      	ldr	r0, [sp, #4]
    17c6:	47a8      	blx	r5
	for (/**/; pad > 0 && pad_before; pad--) {
    17c8:	3e01      	subs	r6, #1
    17ca:	2e00      	cmp	r6, #0
    17cc:	dd09      	ble.n	17e2 <print_digits+0x9a>
    17ce:	2f00      	cmp	r7, #0
    17d0:	d1f7      	bne.n	17c2 <print_digits+0x7a>
    17d2:	e006      	b.n	17e2 <print_digits+0x9a>
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
		out(buf[i], ctx);
    17d4:	ab08      	add	r3, sp, #32
    17d6:	4423      	add	r3, r4
    17d8:	9900      	ldr	r1, [sp, #0]
    17da:	f813 0c18 	ldrb.w	r0, [r3, #-24]
    17de:	47a8      	blx	r5
	for (/**/; i < DIGITS_BUFLEN; i++) {
    17e0:	3401      	adds	r4, #1
    17e2:	2c14      	cmp	r4, #20
    17e4:	d9f6      	bls.n	17d4 <print_digits+0x8c>
	}
	for (/**/; pad > 0; pad--) {
    17e6:	2e00      	cmp	r6, #0
    17e8:	dd04      	ble.n	17f4 <print_digits+0xac>
		out(pad_char, ctx);
    17ea:	9900      	ldr	r1, [sp, #0]
    17ec:	9801      	ldr	r0, [sp, #4]
    17ee:	47a8      	blx	r5
	for (/**/; pad > 0; pad--) {
    17f0:	3e01      	subs	r6, #1
    17f2:	e7f8      	b.n	17e6 <print_digits+0x9e>
	}
}
    17f4:	b009      	add	sp, #36	; 0x24
    17f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    17fa:	bf00      	nop
    17fc:	00009034 	.word	0x00009034

00001800 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    1800:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1802:	680b      	ldr	r3, [r1, #0]
    1804:	3301      	adds	r3, #1
    1806:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1808:	4b01      	ldr	r3, [pc, #4]	; (1810 <char_out+0x10>)
    180a:	681b      	ldr	r3, [r3, #0]
    180c:	4798      	blx	r3
}
    180e:	bd08      	pop	{r3, pc}
    1810:	20000004 	.word	0x20000004

00001814 <__printk_hook_install>:
	_char_out = fn;
    1814:	4b01      	ldr	r3, [pc, #4]	; (181c <__printk_hook_install+0x8>)
    1816:	6018      	str	r0, [r3, #0]
}
    1818:	4770      	bx	lr
    181a:	bf00      	nop
    181c:	20000004 	.word	0x20000004

00001820 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    1820:	b500      	push	{lr}
    1822:	b083      	sub	sp, #12
	struct out_context ctx = { 0 };
    1824:	2300      	movs	r3, #0
    1826:	9301      	str	r3, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
    1828:	460b      	mov	r3, r1
    182a:	4602      	mov	r2, r0
    182c:	a901      	add	r1, sp, #4
    182e:	4803      	ldr	r0, [pc, #12]	; (183c <vprintk+0x1c>)
    1830:	f003 fffe 	bl	5830 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    1834:	b003      	add	sp, #12
    1836:	f85d fb04 	ldr.w	pc, [sp], #4
    183a:	bf00      	nop
    183c:	00001801 	.word	0x00001801

00001840 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1840:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1844:	b083      	sub	sp, #12
    1846:	4604      	mov	r4, r0
    1848:	4608      	mov	r0, r1
    184a:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    184c:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    184e:	f013 0f08 	tst.w	r3, #8
    1852:	d105      	bne.n	1860 <process_event+0x20>
    1854:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    1858:	2300      	movs	r3, #0
    185a:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    185c:	9301      	str	r3, [sp, #4]
    185e:	e069      	b.n	1934 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
    1860:	2901      	cmp	r1, #1
    1862:	d009      	beq.n	1878 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1864:	f043 0320 	orr.w	r3, r3, #32
    1868:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    186a:	f385 8811 	msr	BASEPRI, r5
    186e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1872:	b003      	add	sp, #12
    1874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1878:	f043 0310 	orr.w	r3, r3, #16
    187c:	8323      	strh	r3, [r4, #24]
    187e:	e7f4      	b.n	186a <process_event+0x2a>
			evt = process_recheck(mgr);
    1880:	4620      	mov	r0, r4
    1882:	f004 f98e 	bl	5ba2 <process_recheck>
    1886:	e057      	b.n	1938 <process_event+0xf8>
			res = mgr->last_res;
    1888:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
    188c:	464a      	mov	r2, r9
    188e:	4669      	mov	r1, sp
    1890:	4620      	mov	r0, r4
    1892:	f004 f99f 	bl	5bd4 <process_complete>
		onoff_transition_fn transit = NULL;
    1896:	2700      	movs	r7, #0
    1898:	e05a      	b.n	1950 <process_event+0x110>
			transit = mgr->transitions->start;
    189a:	6923      	ldr	r3, [r4, #16]
    189c:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
    189e:	2106      	movs	r1, #6
    18a0:	4620      	mov	r0, r4
    18a2:	f004 f957 	bl	5b54 <set_state>
		res = 0;
    18a6:	f04f 0900 	mov.w	r9, #0
    18aa:	e051      	b.n	1950 <process_event+0x110>
			transit = mgr->transitions->stop;
    18ac:	6923      	ldr	r3, [r4, #16]
    18ae:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    18b0:	2104      	movs	r1, #4
    18b2:	4620      	mov	r0, r4
    18b4:	f004 f94e 	bl	5b54 <set_state>
		res = 0;
    18b8:	f04f 0900 	mov.w	r9, #0
    18bc:	e048      	b.n	1950 <process_event+0x110>
			transit = mgr->transitions->reset;
    18be:	6923      	ldr	r3, [r4, #16]
    18c0:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    18c2:	2105      	movs	r1, #5
    18c4:	4620      	mov	r0, r4
    18c6:	f004 f945 	bl	5b54 <set_state>
		res = 0;
    18ca:	f04f 0900 	mov.w	r9, #0
    18ce:	e03f      	b.n	1950 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    18d0:	2200      	movs	r2, #0
    18d2:	e046      	b.n	1962 <process_event+0x122>
    18d4:	2200      	movs	r2, #0
    18d6:	e044      	b.n	1962 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    18d8:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    18dc:	8323      	strh	r3, [r4, #24]
    18de:	f385 8811 	msr	BASEPRI, r5
    18e2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    18e6:	2900      	cmp	r1, #0
    18e8:	d144      	bne.n	1974 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    18ea:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    18ec:	b12b      	cbz	r3, 18fa <process_event+0xba>
				notify_all(mgr, &clients, state, res);
    18ee:	464b      	mov	r3, r9
    18f0:	4642      	mov	r2, r8
    18f2:	4669      	mov	r1, sp
    18f4:	4620      	mov	r0, r4
    18f6:	f004 f9e6 	bl	5cc6 <notify_all>
			if (transit != NULL) {
    18fa:	b117      	cbz	r7, 1902 <process_event+0xc2>
				transit(mgr, transition_complete);
    18fc:	4925      	ldr	r1, [pc, #148]	; (1994 <process_event+0x154>)
    18fe:	4620      	mov	r0, r4
    1900:	47b8      	blx	r7
	__asm__ volatile(
    1902:	f04f 0320 	mov.w	r3, #32
    1906:	f3ef 8511 	mrs	r5, BASEPRI
    190a:	f383 8811 	msr	BASEPRI, r3
    190e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1912:	8b23      	ldrh	r3, [r4, #24]
    1914:	f023 0308 	bic.w	r3, r3, #8
    1918:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    191a:	8b23      	ldrh	r3, [r4, #24]
    191c:	f013 0f10 	tst.w	r3, #16
    1920:	d02e      	beq.n	1980 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1922:	f023 0310 	bic.w	r3, r3, #16
    1926:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    1928:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    192a:	8b26      	ldrh	r6, [r4, #24]
    192c:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    1930:	2800      	cmp	r0, #0
    1932:	d09a      	beq.n	186a <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    1934:	2802      	cmp	r0, #2
    1936:	d0a3      	beq.n	1880 <process_event+0x40>
		if (evt == EVT_NOP) {
    1938:	2800      	cmp	r0, #0
    193a:	d096      	beq.n	186a <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    193c:	2801      	cmp	r0, #1
    193e:	d0a3      	beq.n	1888 <process_event+0x48>
		} else if (evt == EVT_START) {
    1940:	2803      	cmp	r0, #3
    1942:	d0aa      	beq.n	189a <process_event+0x5a>
		} else if (evt == EVT_STOP) {
    1944:	2804      	cmp	r0, #4
    1946:	d0b1      	beq.n	18ac <process_event+0x6c>
		} else if (evt == EVT_RESET) {
    1948:	2805      	cmp	r0, #5
    194a:	d0b8      	beq.n	18be <process_event+0x7e>
		onoff_transition_fn transit = NULL;
    194c:	2700      	movs	r7, #0
		res = 0;
    194e:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1950:	8b23      	ldrh	r3, [r4, #24]
    1952:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1956:	45b0      	cmp	r8, r6
    1958:	d0ba      	beq.n	18d0 <process_event+0x90>
    195a:	68a2      	ldr	r2, [r4, #8]
    195c:	2a00      	cmp	r2, #0
    195e:	d0b9      	beq.n	18d4 <process_event+0x94>
    1960:	2201      	movs	r2, #1
		if (do_monitors
    1962:	4611      	mov	r1, r2
    1964:	2a00      	cmp	r2, #0
    1966:	d1b7      	bne.n	18d8 <process_event+0x98>
    1968:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    196a:	2a00      	cmp	r2, #0
    196c:	d1b4      	bne.n	18d8 <process_event+0x98>
		    || (transit != NULL)) {
    196e:	2f00      	cmp	r7, #0
    1970:	d1b2      	bne.n	18d8 <process_event+0x98>
    1972:	e7d2      	b.n	191a <process_event+0xda>
				notify_monitors(mgr, state, res);
    1974:	464a      	mov	r2, r9
    1976:	4641      	mov	r1, r8
    1978:	4620      	mov	r0, r4
    197a:	f004 f8f3 	bl	5b64 <notify_monitors>
    197e:	e7b4      	b.n	18ea <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1980:	f013 0f20 	tst.w	r3, #32
    1984:	d004      	beq.n	1990 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1986:	f023 0320 	bic.w	r3, r3, #32
    198a:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
    198c:	2002      	movs	r0, #2
    198e:	e7cc      	b.n	192a <process_event+0xea>
		evt = EVT_NOP;
    1990:	2000      	movs	r0, #0
    1992:	e7ca      	b.n	192a <process_event+0xea>
    1994:	00005cf1 	.word	0x00005cf1

00001998 <nordicsemi_nrf91_init>:
    1998:	f04f 0220 	mov.w	r2, #32
    199c:	f3ef 8311 	mrs	r3, BASEPRI
    19a0:	f382 8811 	msr	BASEPRI, r2
    19a4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    19a8:	4a04      	ldr	r2, [pc, #16]	; (19bc <nordicsemi_nrf91_init+0x24>)
    19aa:	2101      	movs	r1, #1
    19ac:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    19b0:	f383 8811 	msr	BASEPRI, r3
    19b4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    19b8:	2000      	movs	r0, #0
    19ba:	4770      	bx	lr
    19bc:	50039000 	.word	0x50039000

000019c0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    19c0:	b130      	cbz	r0, 19d0 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    19c2:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    19c4:	0180      	lsls	r0, r0, #6
    19c6:	4b03      	ldr	r3, [pc, #12]	; (19d4 <arch_busy_wait+0x14>)
    19c8:	f043 0301 	orr.w	r3, r3, #1
    19cc:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    19ce:	bd08      	pop	{r3, pc}
    19d0:	4770      	bx	lr
    19d2:	bf00      	nop
    19d4:	00008b00 	.word	0x00008b00

000019d8 <log_generic>:
	return args;
}

void log_generic(struct log_msg_ids src_level, const char *fmt, va_list ap,
		 enum log_strdup_action strdup_action)
{
    19d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    19dc:	b085      	sub	sp, #20
    19de:	4680      	mov	r8, r0
    19e0:	460f      	mov	r7, r1
    19e2:	4615      	mov	r5, r2
	if (_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		uint32_t timestamp = timestamp_func();
    19e4:	4b11      	ldr	r3, [pc, #68]	; (1a2c <log_generic+0x54>)
    19e6:	681b      	ldr	r3, [r3, #0]
    19e8:	4798      	blx	r3
    19ea:	4681      	mov	r9, r0

		for (int i = 0; i < log_backend_count_get(); i++) {
    19ec:	2400      	movs	r4, #0
    19ee:	e000      	b.n	19f2 <log_generic+0x1a>
    19f0:	3401      	adds	r4, #1
    19f2:	4b0f      	ldr	r3, [pc, #60]	; (1a30 <log_generic+0x58>)
    19f4:	4a0f      	ldr	r2, [pc, #60]	; (1a34 <log_generic+0x5c>)
    19f6:	1a9b      	subs	r3, r3, r2
    19f8:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    19fc:	da13      	bge.n	1a26 <log_generic+0x4e>
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
    19fe:	480d      	ldr	r0, [pc, #52]	; (1a34 <log_generic+0x5c>)
    1a00:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    1a04:	6843      	ldr	r3, [r0, #4]
    1a06:	795b      	ldrb	r3, [r3, #5]
			backend = log_backend_get(i);

			if (log_backend_is_active(backend)) {
    1a08:	2b00      	cmp	r3, #0
    1a0a:	d0f1      	beq.n	19f0 <log_generic+0x18>
				va_list ap_tmp;

				va_copy(ap_tmp, ap);
    1a0c:	9503      	str	r5, [sp, #12]
	if (backend->api->put_sync_string) {
    1a0e:	0123      	lsls	r3, r4, #4
    1a10:	4a08      	ldr	r2, [pc, #32]	; (1a34 <log_generic+0x5c>)
    1a12:	58d3      	ldr	r3, [r2, r3]
    1a14:	685e      	ldr	r6, [r3, #4]
    1a16:	2e00      	cmp	r6, #0
    1a18:	d0ea      	beq.n	19f0 <log_generic+0x18>
		backend->api->put_sync_string(backend, src_level,
    1a1a:	9500      	str	r5, [sp, #0]
    1a1c:	463b      	mov	r3, r7
    1a1e:	464a      	mov	r2, r9
    1a20:	4641      	mov	r1, r8
    1a22:	47b0      	blx	r6
				log_backend_put_sync_string(backend, src_level,
						     timestamp, fmt, ap_tmp);
				va_end(ap_tmp);
    1a24:	e7e4      	b.n	19f0 <log_generic+0x18>
				mask &= ~BIT(idx);
			}
		}
		log_n(fmt, args, nargs, src_level);
	}
}
    1a26:	b005      	add	sp, #20
    1a28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1a2c:	20000008 	.word	0x20000008
    1a30:	00008ae0 	.word	0x00008ae0
    1a34:	00008ad0 	.word	0x00008ad0

00001a38 <log_core_init>:
	 */
	return k_cycle_get_32();
}

void log_core_init(void)
{
    1a38:	b508      	push	{r3, lr}
	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
		timestamp_func = k_uptime_get_32;
		freq = 1000;
	} else {
		timestamp_func = k_cycle_get_32_wrapper;
    1a3a:	4b04      	ldr	r3, [pc, #16]	; (1a4c <log_core_init+0x14>)
    1a3c:	4a04      	ldr	r2, [pc, #16]	; (1a50 <log_core_init+0x18>)
    1a3e:	601a      	str	r2, [r3, #0]
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
    1a40:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1a44:	f000 fa08 	bl	1e58 <log_output_timestamp_freq_set>
			LOG_FILTER_SLOT_SET(filters,
					    LOG_FILTER_AGGR_SLOT_IDX,
					    level);
		}
	}
}
    1a48:	bd08      	pop	{r3, pc}
    1a4a:	bf00      	nop
    1a4c:	20000008 	.word	0x20000008
    1a50:	00005ff3 	.word	0x00005ff3

00001a54 <log_source_name_get>:
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    1a54:	4b05      	ldr	r3, [pc, #20]	; (1a6c <log_source_name_get+0x18>)
    1a56:	4a06      	ldr	r2, [pc, #24]	; (1a70 <log_source_name_get+0x1c>)
    1a58:	1a9b      	subs	r3, r3, r2
    1a5a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    1a5e:	d202      	bcs.n	1a66 <log_source_name_get+0x12>
 * @param source_id Source ID.
 * @return Name.
 */
static inline const char *log_name_get(uint32_t source_id)
{
	return __log_const_start[source_id].name;
    1a60:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    1a64:	4770      	bx	lr
    1a66:	2000      	movs	r0, #0
}
    1a68:	4770      	bx	lr
    1a6a:	bf00      	nop
    1a6c:	00008ad0 	.word	0x00008ad0
    1a70:	00008aa0 	.word	0x00008aa0

00001a74 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    1a74:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1a76:	4b0b      	ldr	r3, [pc, #44]	; (1aa4 <log_backend_enable+0x30>)
    1a78:	1ac3      	subs	r3, r0, r3
    1a7a:	111b      	asrs	r3, r3, #4
    1a7c:	3301      	adds	r3, #1
	backend->cb->id = id;
    1a7e:	6842      	ldr	r2, [r0, #4]
    1a80:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
    1a82:	6843      	ldr	r3, [r0, #4]
    1a84:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1a86:	6843      	ldr	r3, [r0, #4]
    1a88:	2201      	movs	r2, #1
    1a8a:	715a      	strb	r2, [r3, #5]
	log_backend_activate(backend, ctx);

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (!backend_attached) {
    1a8c:	4b06      	ldr	r3, [pc, #24]	; (1aa8 <log_backend_enable+0x34>)
    1a8e:	781b      	ldrb	r3, [r3, #0]
    1a90:	b11b      	cbz	r3, 1a9a <log_backend_enable+0x26>
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    1a92:	4b05      	ldr	r3, [pc, #20]	; (1aa8 <log_backend_enable+0x34>)
    1a94:	2201      	movs	r2, #1
    1a96:	701a      	strb	r2, [r3, #0]
}
    1a98:	bd08      	pop	{r3, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1a9a:	4804      	ldr	r0, [pc, #16]	; (1aac <log_backend_enable+0x38>)
    1a9c:	f003 f862 	bl	4b64 <z_impl_k_sem_give>
    1aa0:	e7f7      	b.n	1a92 <log_backend_enable+0x1e>
    1aa2:	bf00      	nop
    1aa4:	00008ad0 	.word	0x00008ad0
    1aa8:	2000282c 	.word	0x2000282c
    1aac:	200000e4 	.word	0x200000e4

00001ab0 <log_init>:
{
    1ab0:	b538      	push	{r3, r4, r5, lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1ab2:	4b13      	ldr	r3, [pc, #76]	; (1b00 <log_init+0x50>)
    1ab4:	e8d3 2fef 	ldaex	r2, [r3]
    1ab8:	1c51      	adds	r1, r2, #1
    1aba:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1abe:	2800      	cmp	r0, #0
    1ac0:	d1f8      	bne.n	1ab4 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    1ac2:	b9da      	cbnz	r2, 1afc <log_init+0x4c>
	for (i = 0; i < log_backend_count_get(); i++) {
    1ac4:	2400      	movs	r4, #0
    1ac6:	e005      	b.n	1ad4 <log_init+0x24>
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    1ac8:	2204      	movs	r2, #4
    1aca:	2100      	movs	r1, #0
    1acc:	4628      	mov	r0, r5
    1ace:	f7ff ffd1 	bl	1a74 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    1ad2:	3401      	adds	r4, #1
    1ad4:	4b0b      	ldr	r3, [pc, #44]	; (1b04 <log_init+0x54>)
    1ad6:	4a0c      	ldr	r2, [pc, #48]	; (1b08 <log_init+0x58>)
    1ad8:	1a9b      	subs	r3, r3, r2
    1ada:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1ade:	da0d      	bge.n	1afc <log_init+0x4c>
	return &__log_backends_start[idx];
    1ae0:	4d09      	ldr	r5, [pc, #36]	; (1b08 <log_init+0x58>)
    1ae2:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    1ae6:	7b2b      	ldrb	r3, [r5, #12]
    1ae8:	2b00      	cmp	r3, #0
    1aea:	d0f2      	beq.n	1ad2 <log_init+0x22>
			if (backend->api->init != NULL) {
    1aec:	0123      	lsls	r3, r4, #4
    1aee:	4a06      	ldr	r2, [pc, #24]	; (1b08 <log_init+0x58>)
    1af0:	58d3      	ldr	r3, [r2, r3]
    1af2:	695b      	ldr	r3, [r3, #20]
    1af4:	2b00      	cmp	r3, #0
    1af6:	d0e7      	beq.n	1ac8 <log_init+0x18>
				backend->api->init();
    1af8:	4798      	blx	r3
    1afa:	e7e5      	b.n	1ac8 <log_init+0x18>
}
    1afc:	bd38      	pop	{r3, r4, r5, pc}
    1afe:	bf00      	nop
    1b00:	200026e8 	.word	0x200026e8
    1b04:	00008ae0 	.word	0x00008ae0
    1b08:	00008ad0 	.word	0x00008ad0

00001b0c <z_impl_log_panic>:
	if (panic_mode) {
    1b0c:	4b10      	ldr	r3, [pc, #64]	; (1b50 <z_impl_log_panic+0x44>)
    1b0e:	781b      	ldrb	r3, [r3, #0]
    1b10:	b103      	cbz	r3, 1b14 <z_impl_log_panic+0x8>
    1b12:	4770      	bx	lr
{
    1b14:	b510      	push	{r4, lr}
	log_init();
    1b16:	f7ff ffcb 	bl	1ab0 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    1b1a:	2400      	movs	r4, #0
    1b1c:	e000      	b.n	1b20 <z_impl_log_panic+0x14>
    1b1e:	3401      	adds	r4, #1
    1b20:	4b0c      	ldr	r3, [pc, #48]	; (1b54 <z_impl_log_panic+0x48>)
    1b22:	4a0d      	ldr	r2, [pc, #52]	; (1b58 <z_impl_log_panic+0x4c>)
    1b24:	1a9b      	subs	r3, r3, r2
    1b26:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1b2a:	da0c      	bge.n	1b46 <z_impl_log_panic+0x3a>
    1b2c:	480a      	ldr	r0, [pc, #40]	; (1b58 <z_impl_log_panic+0x4c>)
    1b2e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
    1b32:	6843      	ldr	r3, [r0, #4]
    1b34:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    1b36:	2b00      	cmp	r3, #0
    1b38:	d0f1      	beq.n	1b1e <z_impl_log_panic+0x12>
	backend->api->panic(backend);
    1b3a:	0123      	lsls	r3, r4, #4
    1b3c:	4a06      	ldr	r2, [pc, #24]	; (1b58 <z_impl_log_panic+0x4c>)
    1b3e:	58d3      	ldr	r3, [r2, r3]
    1b40:	691b      	ldr	r3, [r3, #16]
    1b42:	4798      	blx	r3
    1b44:	e7eb      	b.n	1b1e <z_impl_log_panic+0x12>
	panic_mode = true;
    1b46:	4b02      	ldr	r3, [pc, #8]	; (1b50 <z_impl_log_panic+0x44>)
    1b48:	2201      	movs	r2, #1
    1b4a:	701a      	strb	r2, [r3, #0]
}
    1b4c:	bd10      	pop	{r4, pc}
    1b4e:	bf00      	nop
    1b50:	2000282d 	.word	0x2000282d
    1b54:	00008ae0 	.word	0x00008ae0
    1b58:	00008ad0 	.word	0x00008ad0

00001b5c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    1b5c:	b40e      	push	{r1, r2, r3}
    1b5e:	b500      	push	{lr}
    1b60:	b082      	sub	sp, #8
    1b62:	ab03      	add	r3, sp, #12
    1b64:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    1b68:	9301      	str	r3, [sp, #4]
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    1b6a:	4601      	mov	r1, r0
    1b6c:	4804      	ldr	r0, [pc, #16]	; (1b80 <print_formatted+0x24>)
    1b6e:	f003 fe5f 	bl	5830 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    1b72:	2000      	movs	r0, #0
    1b74:	b002      	add	sp, #8
    1b76:	f85d eb04 	ldr.w	lr, [sp], #4
    1b7a:	b003      	add	sp, #12
    1b7c:	4770      	bx	lr
    1b7e:	bf00      	nop
    1b80:	00006023 	.word	0x00006023

00001b84 <timestamp_print>:
	log_output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *log_output,
			   uint32_t flags, uint32_t timestamp)
{
    1b84:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b86:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
    1b88:	f011 0f44 	tst.w	r1, #68	; 0x44
    1b8c:	d005      	beq.n	1b9a <timestamp_print+0x16>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
    1b8e:	4b1a      	ldr	r3, [pc, #104]	; (1bf8 <timestamp_print+0x74>)
    1b90:	6819      	ldr	r1, [r3, #0]
    1b92:	b931      	cbnz	r1, 1ba2 <timestamp_print+0x1e>
			length = print_formatted(log_output,
						 "[%02d:%02d:%02d.%03d,%03d] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
    1b94:	2000      	movs	r0, #0
	}

	return length;
}
    1b96:	b005      	add	sp, #20
    1b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    1b9a:	4918      	ldr	r1, [pc, #96]	; (1bfc <timestamp_print+0x78>)
    1b9c:	f7ff ffde 	bl	1b5c <print_formatted>
    1ba0:	e7f9      	b.n	1b96 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    1ba2:	4b17      	ldr	r3, [pc, #92]	; (1c00 <timestamp_print+0x7c>)
    1ba4:	681d      	ldr	r5, [r3, #0]
    1ba6:	fbb2 f5f5 	udiv	r5, r2, r5
		total_seconds = timestamp / freq;
    1baa:	fbb5 f4f1 	udiv	r4, r5, r1
		hours = seconds / 3600U;
    1bae:	4a15      	ldr	r2, [pc, #84]	; (1c04 <timestamp_print+0x80>)
    1bb0:	fba2 3204 	umull	r3, r2, r2, r4
    1bb4:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    1bb6:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    1bba:	fb06 4612 	mls	r6, r6, r2, r4
		mins = seconds / 60U;
    1bbe:	4b12      	ldr	r3, [pc, #72]	; (1c08 <timestamp_print+0x84>)
    1bc0:	fba3 7306 	umull	r7, r3, r3, r6
    1bc4:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    1bc6:	fb01 5414 	mls	r4, r1, r4, r5
		ms = (remainder * 1000U) / freq;
    1bca:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    1bce:	fb05 f404 	mul.w	r4, r5, r4
    1bd2:	fbb4 f7f1 	udiv	r7, r4, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1bd6:	fb07 4411 	mls	r4, r7, r1, r4
    1bda:	fb05 f404 	mul.w	r4, r5, r4
    1bde:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    1be2:	9102      	str	r1, [sp, #8]
    1be4:	9701      	str	r7, [sp, #4]
    1be6:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
    1bea:	00a1      	lsls	r1, r4, #2
    1bec:	1a71      	subs	r1, r6, r1
    1bee:	9100      	str	r1, [sp, #0]
    1bf0:	4906      	ldr	r1, [pc, #24]	; (1c0c <timestamp_print+0x88>)
    1bf2:	f7ff ffb3 	bl	1b5c <print_formatted>
    1bf6:	e7ce      	b.n	1b96 <timestamp_print+0x12>
    1bf8:	200026ec 	.word	0x200026ec
    1bfc:	000090d0 	.word	0x000090d0
    1c00:	200026f0 	.word	0x200026f0
    1c04:	91a2b3c5 	.word	0x91a2b3c5
    1c08:	88888889 	.word	0x88888889
    1c0c:	000090dc 	.word	0x000090dc

00001c10 <color_print>:

static void color_print(const struct log_output *log_output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    1c10:	b161      	cbz	r1, 1c2c <color_print+0x1c>
{
    1c12:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    1c14:	b12a      	cbz	r2, 1c22 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    1c16:	4a06      	ldr	r2, [pc, #24]	; (1c30 <color_print+0x20>)
    1c18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1c1c:	b912      	cbnz	r2, 1c24 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    1c1e:	4a05      	ldr	r2, [pc, #20]	; (1c34 <color_print+0x24>)
    1c20:	e000      	b.n	1c24 <color_print+0x14>
    1c22:	4a04      	ldr	r2, [pc, #16]	; (1c34 <color_print+0x24>)
		print_formatted(log_output, "%s", log_color);
    1c24:	4904      	ldr	r1, [pc, #16]	; (1c38 <color_print+0x28>)
    1c26:	f7ff ff99 	bl	1b5c <print_formatted>
	}
}
    1c2a:	bd08      	pop	{r3, pc}
    1c2c:	4770      	bx	lr
    1c2e:	bf00      	nop
    1c30:	00009058 	.word	0x00009058
    1c34:	0000904c 	.word	0x0000904c
    1c38:	00009054 	.word	0x00009054

00001c3c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1c3c:	f011 0f10 	tst.w	r1, #16
    1c40:	d10b      	bne.n	1c5a <newline_print+0x1e>
{
    1c42:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1c44:	f011 0f20 	tst.w	r1, #32
    1c48:	d003      	beq.n	1c52 <newline_print+0x16>
		print_formatted(ctx, "\n");
    1c4a:	4904      	ldr	r1, [pc, #16]	; (1c5c <newline_print+0x20>)
    1c4c:	f7ff ff86 	bl	1b5c <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    1c50:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    1c52:	4903      	ldr	r1, [pc, #12]	; (1c60 <newline_print+0x24>)
    1c54:	f7ff ff82 	bl	1b5c <print_formatted>
    1c58:	e7fa      	b.n	1c50 <newline_print+0x14>
    1c5a:	4770      	bx	lr
    1c5c:	000092ac 	.word	0x000092ac
    1c60:	00009094 	.word	0x00009094

00001c64 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *log_output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    1c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c68:	4605      	mov	r5, r0
    1c6a:	460f      	mov	r7, r1
    1c6c:	4616      	mov	r6, r2
    1c6e:	4698      	mov	r8, r3
	newline_print(log_output, flags);
    1c70:	9906      	ldr	r1, [sp, #24]
    1c72:	f7ff ffe3 	bl	1c3c <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    1c76:	2400      	movs	r4, #0
    1c78:	e004      	b.n	1c84 <hexdump_line_print+0x20>
		print_formatted(log_output, " ");
    1c7a:	4924      	ldr	r1, [pc, #144]	; (1d0c <hexdump_line_print+0xa8>)
    1c7c:	4628      	mov	r0, r5
    1c7e:	f7ff ff6d 	bl	1b5c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1c82:	3401      	adds	r4, #1
    1c84:	4544      	cmp	r4, r8
    1c86:	dbf8      	blt.n	1c7a <hexdump_line_print+0x16>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1c88:	2400      	movs	r4, #0
    1c8a:	e009      	b.n	1ca0 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(log_output, " ");
    1c8c:	491f      	ldr	r1, [pc, #124]	; (1d0c <hexdump_line_print+0xa8>)
    1c8e:	4628      	mov	r0, r5
    1c90:	f7ff ff64 	bl	1b5c <print_formatted>
    1c94:	e00b      	b.n	1cae <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(log_output, "%02x ", data[i]);
		} else {
			print_formatted(log_output, "   ");
    1c96:	491e      	ldr	r1, [pc, #120]	; (1d10 <hexdump_line_print+0xac>)
    1c98:	4628      	mov	r0, r5
    1c9a:	f7ff ff5f 	bl	1b5c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1c9e:	3401      	adds	r4, #1
    1ca0:	2c0f      	cmp	r4, #15
    1ca2:	dc0c      	bgt.n	1cbe <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    1ca4:	2c00      	cmp	r4, #0
    1ca6:	dd02      	ble.n	1cae <hexdump_line_print+0x4a>
    1ca8:	f014 0f07 	tst.w	r4, #7
    1cac:	d0ee      	beq.n	1c8c <hexdump_line_print+0x28>
		if (i < length) {
    1cae:	42b4      	cmp	r4, r6
    1cb0:	d2f1      	bcs.n	1c96 <hexdump_line_print+0x32>
			print_formatted(log_output, "%02x ", data[i]);
    1cb2:	5d3a      	ldrb	r2, [r7, r4]
    1cb4:	4917      	ldr	r1, [pc, #92]	; (1d14 <hexdump_line_print+0xb0>)
    1cb6:	4628      	mov	r0, r5
    1cb8:	f7ff ff50 	bl	1b5c <print_formatted>
    1cbc:	e7ef      	b.n	1c9e <hexdump_line_print+0x3a>
		}
	}

	print_formatted(log_output, "|");
    1cbe:	4916      	ldr	r1, [pc, #88]	; (1d18 <hexdump_line_print+0xb4>)
    1cc0:	4628      	mov	r0, r5
    1cc2:	f7ff ff4b 	bl	1b5c <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1cc6:	2400      	movs	r4, #0
    1cc8:	e009      	b.n	1cde <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(log_output, " ");
    1cca:	4910      	ldr	r1, [pc, #64]	; (1d0c <hexdump_line_print+0xa8>)
    1ccc:	4628      	mov	r0, r5
    1cce:	f7ff ff45 	bl	1b5c <print_formatted>
    1cd2:	e00b      	b.n	1cec <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(log_output, "%c",
    1cd4:	4911      	ldr	r1, [pc, #68]	; (1d1c <hexdump_line_print+0xb8>)
    1cd6:	4628      	mov	r0, r5
    1cd8:	f7ff ff40 	bl	1b5c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1cdc:	3401      	adds	r4, #1
    1cde:	2c0f      	cmp	r4, #15
    1ce0:	dc12      	bgt.n	1d08 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    1ce2:	2c00      	cmp	r4, #0
    1ce4:	dd02      	ble.n	1cec <hexdump_line_print+0x88>
    1ce6:	f014 0f07 	tst.w	r4, #7
    1cea:	d0ee      	beq.n	1cca <hexdump_line_print+0x66>
		if (i < length) {
    1cec:	42b4      	cmp	r4, r6
    1cee:	d206      	bcs.n	1cfe <hexdump_line_print+0x9a>
			char c = (char)data[i];
    1cf0:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    1cf2:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
    1cf6:	2b5e      	cmp	r3, #94	; 0x5e
    1cf8:	d9ec      	bls.n	1cd4 <hexdump_line_print+0x70>
    1cfa:	222e      	movs	r2, #46	; 0x2e
    1cfc:	e7ea      	b.n	1cd4 <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(log_output, " ");
    1cfe:	4903      	ldr	r1, [pc, #12]	; (1d0c <hexdump_line_print+0xa8>)
    1d00:	4628      	mov	r0, r5
    1d02:	f7ff ff2b 	bl	1b5c <print_formatted>
    1d06:	e7e9      	b.n	1cdc <hexdump_line_print+0x78>
		}
	}
}
    1d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d0c:	00009090 	.word	0x00009090
    1d10:	00009074 	.word	0x00009074
    1d14:	0000906c 	.word	0x0000906c
    1d18:	00009078 	.word	0x00009078
    1d1c:	0000907c 	.word	0x0000907c

00001d20 <ids_print>:
{
    1d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d22:	4604      	mov	r4, r0
    1d24:	4616      	mov	r6, r2
    1d26:	461f      	mov	r7, r3
	if (level_on) {
    1d28:	b949      	cbnz	r1, 1d3e <ids_print+0x1e>
	int total = 0;
    1d2a:	2500      	movs	r5, #0
	total += print_formatted(log_output,
    1d2c:	b186      	cbz	r6, 1d50 <ids_print+0x30>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    1d2e:	2301      	movs	r3, #1
    1d30:	9a07      	ldr	r2, [sp, #28]
    1d32:	4093      	lsls	r3, r2
				(func_on &&
    1d34:	f013 0f10 	tst.w	r3, #16
    1d38:	d116      	bne.n	1d68 <ids_print+0x48>
	total += print_formatted(log_output,
    1d3a:	4e0c      	ldr	r6, [pc, #48]	; (1d6c <ids_print+0x4c>)
    1d3c:	e009      	b.n	1d52 <ids_print+0x32>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    1d3e:	4b0c      	ldr	r3, [pc, #48]	; (1d70 <ids_print+0x50>)
    1d40:	9a07      	ldr	r2, [sp, #28]
    1d42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1d46:	490b      	ldr	r1, [pc, #44]	; (1d74 <ids_print+0x54>)
    1d48:	f7ff ff08 	bl	1b5c <print_formatted>
    1d4c:	4605      	mov	r5, r0
    1d4e:	e7ed      	b.n	1d2c <ids_print+0xc>
	total += print_formatted(log_output,
    1d50:	4e06      	ldr	r6, [pc, #24]	; (1d6c <ids_print+0x4c>)
    1d52:	9906      	ldr	r1, [sp, #24]
    1d54:	4638      	mov	r0, r7
    1d56:	f7ff fe7d 	bl	1a54 <log_source_name_get>
    1d5a:	4602      	mov	r2, r0
    1d5c:	4631      	mov	r1, r6
    1d5e:	4620      	mov	r0, r4
    1d60:	f7ff fefc 	bl	1b5c <print_formatted>
}
    1d64:	4428      	add	r0, r5
    1d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	total += print_formatted(log_output,
    1d68:	4e03      	ldr	r6, [pc, #12]	; (1d78 <ids_print+0x58>)
    1d6a:	e7f2      	b.n	1d52 <ids_print+0x32>
    1d6c:	00009080 	.word	0x00009080
    1d70:	0000909c 	.word	0x0000909c
    1d74:	0000908c 	.word	0x0000908c
    1d78:	00009088 	.word	0x00009088

00001d7c <log_output_string>:
}

void log_output_string(const struct log_output *log_output,
		       struct log_msg_ids src_level, uint32_t timestamp,
		       const char *fmt, va_list ap, uint32_t flags)
{
    1d7c:	b570      	push	{r4, r5, r6, lr}
    1d7e:	b084      	sub	sp, #16
    1d80:	4605      	mov	r5, r0
    1d82:	461e      	mov	r6, r3
	int length;
	uint8_t level = (uint8_t)src_level.level;
	uint8_t domain_id = (uint8_t)src_level.domain_id;
    1d84:	f3c1 03c2 	ubfx	r3, r1, #3, #3
	uint16_t source_id = (uint16_t)src_level.source_id;
    1d88:	f3c1 1089 	ubfx	r0, r1, #6, #10
		log_output_string_syst_process(log_output,
				src_level, fmt, ap, flags);
		return;
	}

	if (!raw_string) {
    1d8c:	f011 0407 	ands.w	r4, r1, #7
    1d90:	d10f      	bne.n	1db2 <log_output_string+0x36>

#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, ap);
#else
	z_vprintk(out_func, (void *)log_output, fmt, ap);
    1d92:	9b08      	ldr	r3, [sp, #32]
    1d94:	4632      	mov	r2, r6
    1d96:	4629      	mov	r1, r5
    1d98:	4810      	ldr	r0, [pc, #64]	; (1ddc <log_output_string+0x60>)
    1d9a:	f003 fd49 	bl	5830 <z_vprintk>
#endif

	(void)length;

	if (raw_string) {
    1d9e:	b994      	cbnz	r4, 1dc6 <log_output_string+0x4a>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
    1da0:	4630      	mov	r0, r6
    1da2:	f004 f958 	bl	6056 <ends_with_newline>
    1da6:	b198      	cbz	r0, 1dd0 <log_output_string+0x54>
			print_formatted(log_output, "\r");
    1da8:	490d      	ldr	r1, [pc, #52]	; (1de0 <log_output_string+0x64>)
    1daa:	4628      	mov	r0, r5
    1dac:	f7ff fed6 	bl	1b5c <print_formatted>
    1db0:	e00e      	b.n	1dd0 <log_output_string+0x54>
		prefix_print(log_output, flags, true, timestamp,
    1db2:	9002      	str	r0, [sp, #8]
    1db4:	9301      	str	r3, [sp, #4]
    1db6:	9400      	str	r4, [sp, #0]
    1db8:	4613      	mov	r3, r2
    1dba:	2201      	movs	r2, #1
    1dbc:	9909      	ldr	r1, [sp, #36]	; 0x24
    1dbe:	4628      	mov	r0, r5
    1dc0:	f004 f96c 	bl	609c <prefix_print>
    1dc4:	e7e5      	b.n	1d92 <log_output_string+0x16>
		}
	} else {
		postfix_print(log_output, flags, level);
    1dc6:	4622      	mov	r2, r4
    1dc8:	9909      	ldr	r1, [sp, #36]	; 0x24
    1dca:	4628      	mov	r0, r5
    1dcc:	f004 f95a 	bl	6084 <postfix_print>
	}

	log_output_flush(log_output);
    1dd0:	4628      	mov	r0, r5
    1dd2:	f004 f98a 	bl	60ea <log_output_flush>
}
    1dd6:	b004      	add	sp, #16
    1dd8:	bd70      	pop	{r4, r5, r6, pc}
    1dda:	bf00      	nop
    1ddc:	00006023 	.word	0x00006023
    1de0:	00009098 	.word	0x00009098

00001de4 <log_output_hexdump>:

void log_output_hexdump(const struct log_output *log_output,
			     struct log_msg_ids src_level, uint32_t timestamp,
			     const char *metadata, const uint8_t *data,
			     uint32_t length, uint32_t flags)
{
    1de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1de8:	b084      	sub	sp, #16
    1dea:	4680      	mov	r8, r0
    1dec:	461d      	mov	r5, r3
    1dee:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    1df0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    1df2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	uint32_t prefix_offset;
	uint8_t level = (uint8_t)src_level.level;
    1df4:	f001 0a07 	and.w	sl, r1, #7
	uint8_t domain_id = (uint8_t)src_level.domain_id;
    1df8:	f3c1 03c2 	ubfx	r3, r1, #3, #3
	uint16_t source_id = (uint16_t)src_level.source_id;
    1dfc:	f3c1 1189 	ubfx	r1, r1, #6, #10
		log_output_hexdump_syst_process(log_output,
				src_level, data, length, flags);
		return;
	}

	prefix_offset = prefix_print(log_output, flags, true, timestamp,
    1e00:	9102      	str	r1, [sp, #8]
    1e02:	9301      	str	r3, [sp, #4]
    1e04:	f8cd a000 	str.w	sl, [sp]
    1e08:	4613      	mov	r3, r2
    1e0a:	2201      	movs	r2, #1
    1e0c:	4639      	mov	r1, r7
    1e0e:	f004 f945 	bl	609c <prefix_print>
    1e12:	4681      	mov	r9, r0
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(log_output, "%s", metadata);
    1e14:	462a      	mov	r2, r5
    1e16:	490f      	ldr	r1, [pc, #60]	; (1e54 <log_output_hexdump+0x70>)
    1e18:	4640      	mov	r0, r8
    1e1a:	f7ff fe9f 	bl	1b5c <print_formatted>

	while (length) {
    1e1e:	b16c      	cbz	r4, 1e3c <log_output_hexdump+0x58>
		uint32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
    1e20:	4625      	mov	r5, r4
    1e22:	2c10      	cmp	r4, #16
    1e24:	bf28      	it	cs
    1e26:	2510      	movcs	r5, #16
				HEXDUMP_BYTES_IN_LINE : length;

		hexdump_line_print(log_output, data, part_len,
    1e28:	9700      	str	r7, [sp, #0]
    1e2a:	464b      	mov	r3, r9
    1e2c:	462a      	mov	r2, r5
    1e2e:	4631      	mov	r1, r6
    1e30:	4640      	mov	r0, r8
    1e32:	f7ff ff17 	bl	1c64 <hexdump_line_print>
				   prefix_offset, flags);

		data += part_len;
    1e36:	442e      	add	r6, r5
		length -= part_len;
    1e38:	1b64      	subs	r4, r4, r5
    1e3a:	e7f0      	b.n	1e1e <log_output_hexdump+0x3a>
	};

	postfix_print(log_output, flags, level);
    1e3c:	4652      	mov	r2, sl
    1e3e:	4639      	mov	r1, r7
    1e40:	4640      	mov	r0, r8
    1e42:	f004 f91f 	bl	6084 <postfix_print>
	log_output_flush(log_output);
    1e46:	4640      	mov	r0, r8
    1e48:	f004 f94f 	bl	60ea <log_output_flush>
}
    1e4c:	b004      	add	sp, #16
    1e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1e52:	bf00      	nop
    1e54:	00009054 	.word	0x00009054

00001e58 <log_output_timestamp_freq_set>:
		     log_output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    1e58:	4b07      	ldr	r3, [pc, #28]	; (1e78 <log_output_timestamp_freq_set+0x20>)
    1e5a:	2201      	movs	r2, #1
    1e5c:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1e5e:	4b07      	ldr	r3, [pc, #28]	; (1e7c <log_output_timestamp_freq_set+0x24>)
    1e60:	4298      	cmp	r0, r3
    1e62:	d905      	bls.n	1e70 <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
    1e64:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1e66:	4a04      	ldr	r2, [pc, #16]	; (1e78 <log_output_timestamp_freq_set+0x20>)
    1e68:	6813      	ldr	r3, [r2, #0]
    1e6a:	005b      	lsls	r3, r3, #1
    1e6c:	6013      	str	r3, [r2, #0]
    1e6e:	e7f6      	b.n	1e5e <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
    1e70:	4b03      	ldr	r3, [pc, #12]	; (1e80 <log_output_timestamp_freq_set+0x28>)
    1e72:	6018      	str	r0, [r3, #0]
}
    1e74:	4770      	bx	lr
    1e76:	bf00      	nop
    1e78:	200026f0 	.word	0x200026f0
    1e7c:	000f4240 	.word	0x000f4240
    1e80:	200026ec 	.word	0x200026ec

00001e84 <char_out>:
#include <assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    1e84:	b570      	push	{r4, r5, r6, lr}
    1e86:	4606      	mov	r6, r0
    1e88:	460d      	mov	r5, r1
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
    1e8a:	2400      	movs	r4, #0
    1e8c:	42ac      	cmp	r4, r5
    1e8e:	d207      	bcs.n	1ea0 <char_out+0x1c>
		uart_poll_out(uart_dev, data[i]);
    1e90:	4b04      	ldr	r3, [pc, #16]	; (1ea4 <char_out+0x20>)
    1e92:	6818      	ldr	r0, [r3, #0]
    1e94:	5d31      	ldrb	r1, [r6, r4]
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
    1e96:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1e98:	685b      	ldr	r3, [r3, #4]
    1e9a:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    1e9c:	3401      	adds	r4, #1
    1e9e:	e7f5      	b.n	1e8c <char_out+0x8>
	}

	return length;
}
    1ea0:	4628      	mov	r0, r5
    1ea2:	bd70      	pop	{r4, r5, r6, pc}
    1ea4:	20002708 	.word	0x20002708

00001ea8 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
    1ea8:	b508      	push	{r3, lr}
    1eaa:	4803      	ldr	r0, [pc, #12]	; (1eb8 <log_backend_uart_init+0x10>)
    1eac:	f002 fc34 	bl	4718 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1eb0:	4b02      	ldr	r3, [pc, #8]	; (1ebc <log_backend_uart_init+0x14>)
    1eb2:	6018      	str	r0, [r3, #0]
	assert((void *)uart_dev);
}
    1eb4:	bd08      	pop	{r3, pc}
    1eb6:	bf00      	nop
    1eb8:	00009110 	.word	0x00009110
    1ebc:	20002708 	.word	0x20002708

00001ec0 <panic>:

static void panic(struct log_backend const *const backend)
{
    1ec0:	b508      	push	{r3, lr}
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    1ec2:	4802      	ldr	r0, [pc, #8]	; (1ecc <panic+0xc>)
    1ec4:	f004 f911 	bl	60ea <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    1ec8:	bd08      	pop	{r3, pc}
    1eca:	bf00      	nop
    1ecc:	00009118 	.word	0x00009118

00001ed0 <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, uint32_t timestamp,
			 const char *metadata, const uint8_t *data, uint32_t length)
{
    1ed0:	b500      	push	{lr}
    1ed2:	b085      	sub	sp, #20
		 * by another one, lock context for whole log processing.
		 */
		key = irq_lock();
	}

	log_output_hexdump(log_output, src_level, timestamp,
    1ed4:	200f      	movs	r0, #15
    1ed6:	9002      	str	r0, [sp, #8]
    1ed8:	9807      	ldr	r0, [sp, #28]
    1eda:	9001      	str	r0, [sp, #4]
    1edc:	9806      	ldr	r0, [sp, #24]
    1ede:	9000      	str	r0, [sp, #0]
    1ee0:	4802      	ldr	r0, [pc, #8]	; (1eec <sync_hexdump+0x1c>)
    1ee2:	f7ff ff7f 	bl	1de4 <log_output_hexdump>
	uint32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_UART_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output_uart, flag, src_level,
				     timestamp, metadata, data, length);
}
    1ee6:	b005      	add	sp, #20
    1ee8:	f85d fb04 	ldr.w	pc, [sp], #4
    1eec:	00009118 	.word	0x00009118

00001ef0 <sync_string>:
{
    1ef0:	b500      	push	{lr}
    1ef2:	b083      	sub	sp, #12
	log_output_string(log_output, src_level, timestamp, fmt, ap, flags);
    1ef4:	200f      	movs	r0, #15
    1ef6:	9001      	str	r0, [sp, #4]
    1ef8:	9804      	ldr	r0, [sp, #16]
    1efa:	9000      	str	r0, [sp, #0]
    1efc:	4802      	ldr	r0, [pc, #8]	; (1f08 <sync_string+0x18>)
    1efe:	f7ff ff3d 	bl	1d7c <log_output_string>
}
    1f02:	b003      	add	sp, #12
    1f04:	f85d fb04 	ldr.w	pc, [sp], #4
    1f08:	00009118 	.word	0x00009118

00001f0c <get_flash_area_from_id>:

extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
    1f0c:	b410      	push	{r4}
    1f0e:	4604      	mov	r4, r0
	for (int i = 0; i < flash_map_entries; i++) {
    1f10:	2200      	movs	r2, #0
    1f12:	4b08      	ldr	r3, [pc, #32]	; (1f34 <get_flash_area_from_id+0x28>)
    1f14:	681b      	ldr	r3, [r3, #0]
    1f16:	4293      	cmp	r3, r2
    1f18:	dd08      	ble.n	1f2c <get_flash_area_from_id+0x20>
		if (flash_map[i].fa_id == idx) {
    1f1a:	0113      	lsls	r3, r2, #4
    1f1c:	4906      	ldr	r1, [pc, #24]	; (1f38 <get_flash_area_from_id+0x2c>)
    1f1e:	6809      	ldr	r1, [r1, #0]
    1f20:	18c8      	adds	r0, r1, r3
    1f22:	5ccb      	ldrb	r3, [r1, r3]
    1f24:	42a3      	cmp	r3, r4
    1f26:	d002      	beq.n	1f2e <get_flash_area_from_id+0x22>
	for (int i = 0; i < flash_map_entries; i++) {
    1f28:	3201      	adds	r2, #1
    1f2a:	e7f2      	b.n	1f12 <get_flash_area_from_id+0x6>
			return &flash_map[i];
		}
	}

	return NULL;
    1f2c:	2000      	movs	r0, #0
}
    1f2e:	bc10      	pop	{r4}
    1f30:	4770      	bx	lr
    1f32:	bf00      	nop
    1f34:	000091cc 	.word	0x000091cc
    1f38:	2000000c 	.word	0x2000000c

00001f3c <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    1f3c:	4b08      	ldr	r3, [pc, #32]	; (1f60 <flash_area_open+0x24>)
    1f3e:	681b      	ldr	r3, [r3, #0]
    1f40:	b13b      	cbz	r3, 1f52 <flash_area_open+0x16>
{
    1f42:	b510      	push	{r4, lr}
    1f44:	460c      	mov	r4, r1
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    1f46:	f7ff ffe1 	bl	1f0c <get_flash_area_from_id>
	if (area == NULL) {
    1f4a:	b128      	cbz	r0, 1f58 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    1f4c:	6020      	str	r0, [r4, #0]
	return 0;
    1f4e:	2000      	movs	r0, #0
}
    1f50:	bd10      	pop	{r4, pc}
		return -EACCES;
    1f52:	f06f 000c 	mvn.w	r0, #12
}
    1f56:	4770      	bx	lr
		return -ENOENT;
    1f58:	f06f 0001 	mvn.w	r0, #1
    1f5c:	e7f8      	b.n	1f50 <flash_area_open+0x14>
    1f5e:	bf00      	nop
    1f60:	2000000c 	.word	0x2000000c

00001f64 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    1f64:	b500      	push	{lr}
    1f66:	b08b      	sub	sp, #44	; 0x2c
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1f68:	ab03      	add	r3, sp, #12
    1f6a:	9300      	str	r3, [sp, #0]
    1f6c:	4b02      	ldr	r3, [pc, #8]	; (1f78 <flash_area_get_sectors+0x14>)
    1f6e:	f004 f905 	bl	617c <flash_area_layout>
}
    1f72:	b00b      	add	sp, #44	; 0x2c
    1f74:	f85d fb04 	ldr.w	pc, [sp], #4
    1f78:	00006141 	.word	0x00006141

00001f7c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    1f7c:	b510      	push	{r4, lr}
    1f7e:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1f80:	280a      	cmp	r0, #10
    1f82:	d007      	beq.n	1f94 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    1f84:	4b07      	ldr	r3, [pc, #28]	; (1fa4 <console_out+0x28>)
    1f86:	6818      	ldr	r0, [r3, #0]
    1f88:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    1f8a:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    1f8c:	685b      	ldr	r3, [r3, #4]
    1f8e:	4798      	blx	r3

	return c;
}
    1f90:	4620      	mov	r0, r4
    1f92:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    1f94:	4b03      	ldr	r3, [pc, #12]	; (1fa4 <console_out+0x28>)
    1f96:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    1f98:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    1f9a:	685b      	ldr	r3, [r3, #4]
    1f9c:	210d      	movs	r1, #13
    1f9e:	4798      	blx	r3
    1fa0:	e7f0      	b.n	1f84 <console_out+0x8>
    1fa2:	bf00      	nop
    1fa4:	2000270c 	.word	0x2000270c

00001fa8 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    1fa8:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    1faa:	4c04      	ldr	r4, [pc, #16]	; (1fbc <uart_console_hook_install+0x14>)
    1fac:	4620      	mov	r0, r4
    1fae:	f000 fe2d 	bl	2c0c <__stdout_hook_install>
	__printk_hook_install(console_out);
    1fb2:	4620      	mov	r0, r4
    1fb4:	f7ff fc2e 	bl	1814 <__printk_hook_install>
}
    1fb8:	bd10      	pop	{r4, pc}
    1fba:	bf00      	nop
    1fbc:	00001f7d 	.word	0x00001f7d

00001fc0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1fc0:	b508      	push	{r3, lr}
    1fc2:	4804      	ldr	r0, [pc, #16]	; (1fd4 <uart_console_init+0x14>)
    1fc4:	f002 fba8 	bl	4718 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1fc8:	4b03      	ldr	r3, [pc, #12]	; (1fd8 <uart_console_init+0x18>)
    1fca:	6018      	str	r0, [r3, #0]

	uart_console_hook_install();
    1fcc:	f7ff ffec 	bl	1fa8 <uart_console_hook_install>

	return 0;
}
    1fd0:	2000      	movs	r0, #0
    1fd2:	bd08      	pop	{r3, pc}
    1fd4:	00009110 	.word	0x00009110
    1fd8:	2000270c 	.word	0x2000270c

00001fdc <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = DEVICE_GET(clock_nrf)->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    1fdc:	4800      	ldr	r0, [pc, #0]	; (1fe0 <get_hf_flags+0x4>)
    1fde:	4770      	bx	lr
    1fe0:	20002760 	.word	0x20002760

00001fe4 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = DEVICE_GET(clock_nrf)->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1fe4:	4b03      	ldr	r3, [pc, #12]	; (1ff4 <get_subsys+0x10>)
    1fe6:	1ac0      	subs	r0, r0, r3
    1fe8:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    1fea:	4b03      	ldr	r3, [pc, #12]	; (1ff8 <get_subsys+0x14>)
    1fec:	fb03 f000 	mul.w	r0, r3, r0
    1ff0:	4770      	bx	lr
    1ff2:	bf00      	nop
    1ff4:	20002720 	.word	0x20002720
    1ff8:	b6db6db7 	.word	0xb6db6db7

00001ffc <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1ffc:	b538      	push	{r3, r4, r5, lr}
    1ffe:	4605      	mov	r5, r0
    2000:	460c      	mov	r4, r1
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
    2002:	f7ff ffef 	bl	1fe4 <get_subsys>
    2006:	2240      	movs	r2, #64	; 0x40
    2008:	4601      	mov	r1, r0
    200a:	4803      	ldr	r0, [pc, #12]	; (2018 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x18>)
    200c:	f004 f9dd 	bl	63ca <stop>
	notify(mgr, res);
    2010:	4601      	mov	r1, r0
    2012:	4628      	mov	r0, r5
    2014:	47a0      	blx	r4
}
    2016:	bd38      	pop	{r3, r4, r5, pc}
    2018:	20000080 	.word	0x20000080

0000201c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    201c:	b530      	push	{r4, r5, lr}
    201e:	b085      	sub	sp, #20
    2020:	4605      	mov	r5, r0
    2022:	460c      	mov	r4, r1
	struct clock_control_async_data data = {
    2024:	2300      	movs	r3, #0
    2026:	9301      	str	r3, [sp, #4]
    2028:	4b08      	ldr	r3, [pc, #32]	; (204c <onoff_start+0x30>)
    202a:	9302      	str	r3, [sp, #8]
    202c:	9103      	str	r1, [sp, #12]
		.cb = onoff_started_callback,
		.user_data = notify
	};
	int err;

	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
    202e:	f7ff ffd9 	bl	1fe4 <get_subsys>
    2032:	2340      	movs	r3, #64	; 0x40
    2034:	aa01      	add	r2, sp, #4
    2036:	4601      	mov	r1, r0
    2038:	4805      	ldr	r0, [pc, #20]	; (2050 <onoff_start+0x34>)
    203a:	f004 f9e0 	bl	63fe <async_start>
			  &data, CTX_ONOFF);
	if (err < 0) {
    203e:	1e01      	subs	r1, r0, #0
    2040:	db01      	blt.n	2046 <onoff_start+0x2a>
		notify(mgr, err);
	}
}
    2042:	b005      	add	sp, #20
    2044:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    2046:	4628      	mov	r0, r5
    2048:	47a0      	blx	r4
}
    204a:	e7fa      	b.n	2042 <onoff_start+0x26>
    204c:	00006449 	.word	0x00006449
    2050:	20000080 	.word	0x20000080

00002054 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    2054:	b508      	push	{r3, lr}
	const struct device *dev = DEVICE_GET(clock_nrf);

	switch (event) {
    2056:	b110      	cbz	r0, 205e <clock_event_handler+0xa>
    2058:	2801      	cmp	r0, #1
    205a:	d00d      	beq.n	2078 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    205c:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    205e:	2100      	movs	r1, #0
    2060:	4808      	ldr	r0, [pc, #32]	; (2084 <clock_event_handler+0x30>)
    2062:	f004 f939 	bl	62d8 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2066:	6883      	ldr	r3, [r0, #8]
    2068:	f013 0f07 	tst.w	r3, #7
    206c:	d1f6      	bne.n	205c <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    206e:	2100      	movs	r1, #0
    2070:	4804      	ldr	r0, [pc, #16]	; (2084 <clock_event_handler+0x30>)
    2072:	f004 f998 	bl	63a6 <clkstarted_handle>
    2076:	e7f1      	b.n	205c <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2078:	2101      	movs	r1, #1
    207a:	4802      	ldr	r0, [pc, #8]	; (2084 <clock_event_handler+0x30>)
    207c:	f004 f993 	bl	63a6 <clkstarted_handle>
}
    2080:	e7ec      	b.n	205c <clock_event_handler+0x8>
    2082:	bf00      	nop
    2084:	20000080 	.word	0x20000080

00002088 <generic_hfclk_start>:
{
    2088:	b510      	push	{r4, lr}
	__asm__ volatile(
    208a:	f04f 0320 	mov.w	r3, #32
    208e:	f3ef 8411 	mrs	r4, BASEPRI
    2092:	f383 8811 	msr	BASEPRI, r3
    2096:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    209a:	4a13      	ldr	r2, [pc, #76]	; (20e8 <generic_hfclk_start+0x60>)
    209c:	6813      	ldr	r3, [r2, #0]
    209e:	f043 0302 	orr.w	r3, r3, #2
    20a2:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    20a4:	f013 0f01 	tst.w	r3, #1
    20a8:	d108      	bne.n	20bc <generic_hfclk_start+0x34>
	bool already_started = false;
    20aa:	2300      	movs	r3, #0
	__asm__ volatile(
    20ac:	f384 8811 	msr	BASEPRI, r4
    20b0:	f3bf 8f6f 	isb	sy
	if (already_started) {
    20b4:	b99b      	cbnz	r3, 20de <generic_hfclk_start+0x56>
	hfclk_start();
    20b6:	f004 f9de 	bl	6476 <hfclk_start>
}
    20ba:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    20bc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    20c0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    20c4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    20c8:	f012 0f01 	tst.w	r2, #1
    20cc:	d101      	bne.n	20d2 <generic_hfclk_start+0x4a>
	bool already_started = false;
    20ce:	2300      	movs	r3, #0
    20d0:	e7ec      	b.n	20ac <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    20d2:	f7ff ff83 	bl	1fdc <get_hf_flags>
    20d6:	f004 f953 	bl	6380 <set_on_state>
			already_started = true;
    20da:	2301      	movs	r3, #1
    20dc:	e7e6      	b.n	20ac <generic_hfclk_start+0x24>
		clkstarted_handle(DEVICE_GET(clock_nrf),
    20de:	2100      	movs	r1, #0
    20e0:	4802      	ldr	r0, [pc, #8]	; (20ec <generic_hfclk_start+0x64>)
    20e2:	f004 f960 	bl	63a6 <clkstarted_handle>
		return;
    20e6:	e7e8      	b.n	20ba <generic_hfclk_start+0x32>
    20e8:	20002770 	.word	0x20002770
    20ec:	20000080 	.word	0x20000080

000020f0 <generic_hfclk_stop>:
{
    20f0:	b508      	push	{r3, lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    20f2:	4b08      	ldr	r3, [pc, #32]	; (2114 <generic_hfclk_stop+0x24>)
    20f4:	e8d3 2fef 	ldaex	r2, [r3]
    20f8:	f022 0102 	bic.w	r1, r2, #2
    20fc:	e8c3 1fe0 	stlex	r0, r1, [r3]
    2100:	2800      	cmp	r0, #0
    2102:	d1f7      	bne.n	20f4 <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    2104:	f012 0f01 	tst.w	r2, #1
    2108:	d000      	beq.n	210c <generic_hfclk_stop+0x1c>
}
    210a:	bd08      	pop	{r3, pc}
	hfclk_stop();
    210c:	f004 f9a9 	bl	6462 <hfclk_stop>
    2110:	e7fb      	b.n	210a <generic_hfclk_stop+0x1a>
    2112:	bf00      	nop
    2114:	20002770 	.word	0x20002770

00002118 <clk_init>:

static int clk_init(const struct device *dev)
{
    2118:	b570      	push	{r4, r5, r6, lr}
    211a:	4605      	mov	r5, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    211c:	2200      	movs	r2, #0
    211e:	2101      	movs	r1, #1
    2120:	2005      	movs	r0, #5
    2122:	f000 fa21 	bl	2568 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    2126:	2005      	movs	r0, #5
    2128:	f000 fa00 	bl	252c <arch_irq_enable>
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
		nrf_gpio_pin_mcu_select(PIN_XL2,
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
	}
#endif
	nrfx_err = nrfx_clock_init(clock_event_handler);
    212c:	4811      	ldr	r0, [pc, #68]	; (2174 <clk_init+0x5c>)
    212e:	f001 fa87 	bl	3640 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2132:	4b11      	ldr	r3, [pc, #68]	; (2178 <clk_init+0x60>)
    2134:	4298      	cmp	r0, r3
    2136:	d119      	bne.n	216c <clk_init+0x54>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2138:	f004 fd96 	bl	6c68 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    213c:	2400      	movs	r4, #0
    213e:	2c01      	cmp	r4, #1
    2140:	d812      	bhi.n	2168 <clk_init+0x50>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    2142:	4621      	mov	r1, r4
    2144:	4628      	mov	r0, r5
    2146:	f004 f8c7 	bl	62d8 <get_sub_data>
    214a:	4606      	mov	r6, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    214c:	4621      	mov	r1, r4
    214e:	4628      	mov	r0, r5
    2150:	f004 f8cf 	bl	62f2 <get_onoff_manager>
    2154:	4909      	ldr	r1, [pc, #36]	; (217c <clk_init+0x64>)
    2156:	f003 fdd9 	bl	5d0c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    215a:	2800      	cmp	r0, #0
    215c:	db05      	blt.n	216a <clk_init+0x52>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    215e:	2301      	movs	r3, #1
    2160:	60b3      	str	r3, [r6, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    2162:	441c      	add	r4, r3
    2164:	b2e4      	uxtb	r4, r4
    2166:	e7ea      	b.n	213e <clk_init+0x26>
	}

	return 0;
    2168:	2000      	movs	r0, #0
}
    216a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    216c:	f06f 0004 	mvn.w	r0, #4
    2170:	e7fb      	b.n	216a <clk_init+0x52>
    2172:	bf00      	nop
    2174:	00002055 	.word	0x00002055
    2178:	0bad0000 	.word	0x0bad0000
    217c:	00009224 	.word	0x00009224

00002180 <lfclk_spinwait>:
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2180:	2801      	cmp	r0, #1
    2182:	d107      	bne.n	2194 <lfclk_spinwait+0x14>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2184:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2188:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    218c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2190:	2b02      	cmp	r3, #2
    2192:	d064      	beq.n	225e <lfclk_spinwait+0xde>
{
    2194:	b570      	push	{r4, r5, r6, lr}
    2196:	4605      	mov	r5, r0
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2198:	f006 fadd 	bl	8756 <k_is_in_isr>
    219c:	b920      	cbnz	r0, 21a8 <lfclk_spinwait+0x28>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    219e:	4b30      	ldr	r3, [pc, #192]	; (2260 <lfclk_spinwait+0xe0>)
    21a0:	781b      	ldrb	r3, [r3, #0]
    21a2:	b19b      	cbz	r3, 21cc <lfclk_spinwait+0x4c>
    21a4:	2300      	movs	r3, #0
    21a6:	e000      	b.n	21aa <lfclk_spinwait+0x2a>
    21a8:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    21aa:	461c      	mov	r4, r3
    21ac:	b183      	cbz	r3, 21d0 <lfclk_spinwait+0x50>
	__asm__ volatile(
    21ae:	f04f 0320 	mov.w	r3, #32
    21b2:	f3ef 8611 	mrs	r6, BASEPRI
    21b6:	f383 8811 	msr	BASEPRI, r3
    21ba:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    21be:	b9a4      	cbnz	r4, 21ea <lfclk_spinwait+0x6a>
    p_reg->INTENCLR = mask;
    21c0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    21c4:	2202      	movs	r2, #2
    21c6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    21ca:	e00e      	b.n	21ea <lfclk_spinwait+0x6a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    21cc:	2301      	movs	r3, #1
    21ce:	e7ec      	b.n	21aa <lfclk_spinwait+0x2a>
	int key = isr_mode ? irq_lock() : 0;
    21d0:	2600      	movs	r6, #0
    21d2:	e7f4      	b.n	21be <lfclk_spinwait+0x3e>
			if (isr_mode) {
    21d4:	b30c      	cbz	r4, 221a <lfclk_spinwait+0x9a>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    21d6:	4630      	mov	r0, r6
    21d8:	f000 f9f8 	bl	25cc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    21dc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    21e0:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    21e4:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    21e6:	2b01      	cmp	r3, #1
    21e8:	d01c      	beq.n	2224 <lfclk_spinwait+0xa4>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    21ea:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    21ee:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    21f2:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    21f6:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    21fa:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    21fe:	d126      	bne.n	224e <lfclk_spinwait+0xce>
    return false;
    2200:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2202:	2a00      	cmp	r2, #0
    2204:	d0e6      	beq.n	21d4 <lfclk_spinwait+0x54>
    2206:	2b02      	cmp	r3, #2
    2208:	d001      	beq.n	220e <lfclk_spinwait+0x8e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    220a:	2d01      	cmp	r5, #1
    220c:	d1e2      	bne.n	21d4 <lfclk_spinwait+0x54>
	if (isr_mode) {
    220e:	b304      	cbz	r4, 2252 <lfclk_spinwait+0xd2>
	__asm__ volatile(
    2210:	f386 8811 	msr	BASEPRI, r6
    2214:	f3bf 8f6f 	isb	sy
}
    2218:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
    221a:	2021      	movs	r0, #33	; 0x21
    221c:	2100      	movs	r1, #0
    221e:	f002 fc6f 	bl	4b00 <z_impl_k_sleep>
    2222:	e7db      	b.n	21dc <lfclk_spinwait+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2224:	4b0f      	ldr	r3, [pc, #60]	; (2264 <lfclk_spinwait+0xe4>)
    2226:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    2228:	2b00      	cmp	r3, #0
    222a:	d0de      	beq.n	21ea <lfclk_spinwait+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    222c:	4b0d      	ldr	r3, [pc, #52]	; (2264 <lfclk_spinwait+0xe4>)
    222e:	2200      	movs	r2, #0
    2230:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2232:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    2234:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2238:	2202      	movs	r2, #2
    223a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    223e:	4b0a      	ldr	r3, [pc, #40]	; (2268 <lfclk_spinwait+0xe8>)
    2240:	2220      	movs	r2, #32
    2242:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2246:	4b09      	ldr	r3, [pc, #36]	; (226c <lfclk_spinwait+0xec>)
    2248:	2201      	movs	r2, #1
    224a:	601a      	str	r2, [r3, #0]
    224c:	e7cd      	b.n	21ea <lfclk_spinwait+0x6a>
                return true;
    224e:	2201      	movs	r2, #1
    2250:	e7d7      	b.n	2202 <lfclk_spinwait+0x82>
    p_reg->INTENSET = mask;
    2252:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2256:	2202      	movs	r2, #2
    2258:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    225c:	e7dc      	b.n	2218 <lfclk_spinwait+0x98>
    225e:	4770      	bx	lr
    2260:	20002831 	.word	0x20002831
    2264:	50005104 	.word	0x50005104
    2268:	e000e100 	.word	0xe000e100
    226c:	50005008 	.word	0x50005008

00002270 <z_nrf_clock_control_lf_on>:
{
    2270:	b510      	push	{r4, lr}
    2272:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2274:	4b0e      	ldr	r3, [pc, #56]	; (22b0 <z_nrf_clock_control_lf_on+0x40>)
    2276:	2101      	movs	r1, #1
    2278:	e8d3 2fef 	ldaex	r2, [r3]
    227c:	e8c3 1fe0 	stlex	r0, r1, [r3]
    2280:	2800      	cmp	r0, #0
    2282:	d1f9      	bne.n	2278 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
    2284:	b11a      	cbz	r2, 228e <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
    2286:	1e63      	subs	r3, r4, #1
    2288:	2b01      	cmp	r3, #1
    228a:	d90c      	bls.n	22a6 <z_nrf_clock_control_lf_on+0x36>
}
    228c:	bd10      	pop	{r4, pc}
				get_onoff_manager(DEVICE_GET(clock_nrf),
    228e:	4809      	ldr	r0, [pc, #36]	; (22b4 <z_nrf_clock_control_lf_on+0x44>)
    2290:	f004 f82f 	bl	62f2 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2294:	4908      	ldr	r1, [pc, #32]	; (22b8 <z_nrf_clock_control_lf_on+0x48>)
    2296:	2300      	movs	r3, #0
    2298:	604b      	str	r3, [r1, #4]
    229a:	60cb      	str	r3, [r1, #12]
    229c:	2301      	movs	r3, #1
    229e:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    22a0:	f003 fd50 	bl	5d44 <onoff_request>
    22a4:	e7ef      	b.n	2286 <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
    22a6:	4620      	mov	r0, r4
    22a8:	f7ff ff6a 	bl	2180 <lfclk_spinwait>
		break;
    22ac:	e7ee      	b.n	228c <z_nrf_clock_control_lf_on+0x1c>
    22ae:	bf00      	nop
    22b0:	20002774 	.word	0x20002774
    22b4:	20000080 	.word	0x20000080
    22b8:	20002710 	.word	0x20002710

000022bc <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    22bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    22c0:	4b01      	ldr	r3, [pc, #4]	; (22c8 <set_comparator+0xc>)
    22c2:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
}
    22c6:	4770      	bx	lr
    22c8:	50015000 	.word	0x50015000

000022cc <get_comparator>:
    return p_reg->CC[ch];
    22cc:	4b01      	ldr	r3, [pc, #4]	; (22d4 <get_comparator+0x8>)
    22ce:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540

static uint32_t get_comparator(void)
{
	return nrf_rtc_cc_get(RTC, 0);
}
    22d2:	4770      	bx	lr
    22d4:	50015000 	.word	0x50015000

000022d8 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    22d8:	4b02      	ldr	r3, [pc, #8]	; (22e4 <event_clear+0xc>)
    22da:	2200      	movs	r2, #0
    22dc:	601a      	str	r2, [r3, #0]
    22de:	681b      	ldr	r3, [r3, #0]

static void event_clear(void)
{
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
}
    22e0:	4770      	bx	lr
    22e2:	bf00      	nop
    22e4:	50015140 	.word	0x50015140

000022e8 <event_enable>:
    p_reg->EVTENSET = mask;
    22e8:	4b02      	ldr	r3, [pc, #8]	; (22f4 <event_enable+0xc>)
    22ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    22ee:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344

static void event_enable(void)
{
	nrf_rtc_event_enable(RTC, NRF_RTC_INT_COMPARE0_MASK);
}
    22f2:	4770      	bx	lr
    22f4:	50015000 	.word	0x50015000

000022f8 <int_disable>:
    p_reg->INTENCLR = mask;
    22f8:	4b02      	ldr	r3, [pc, #8]	; (2304 <int_disable+0xc>)
    22fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    22fe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

static void int_disable(void)
{
	nrf_rtc_int_disable(RTC, NRF_RTC_INT_COMPARE0_MASK);
}
    2302:	4770      	bx	lr
    2304:	50015000 	.word	0x50015000

00002308 <int_enable>:
    p_reg->INTENSET = mask;
    2308:	4b02      	ldr	r3, [pc, #8]	; (2314 <int_enable+0xc>)
    230a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    230e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

static void int_enable(void)
{
	nrf_rtc_int_enable(RTC, NRF_RTC_INT_COMPARE0_MASK);
}
    2312:	4770      	bx	lr
    2314:	50015000 	.word	0x50015000

00002318 <counter>:
     return p_reg->COUNTER;
    2318:	4b01      	ldr	r3, [pc, #4]	; (2320 <counter+0x8>)
    231a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    231e:	4770      	bx	lr
    2320:	50015000 	.word	0x50015000

00002324 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    2324:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(arg);
	event_clear();
    2326:	f7ff ffd7 	bl	22d8 <event_clear>

	uint32_t t = get_comparator();
    232a:	f7ff ffcf 	bl	22cc <get_comparator>
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    232e:	4d05      	ldr	r5, [pc, #20]	; (2344 <rtc_nrf_isr+0x20>)
    2330:	682c      	ldr	r4, [r5, #0]
    2332:	4621      	mov	r1, r4
    2334:	f004 f8a6 	bl	6484 <counter_sub>

	last_count += dticks * CYC_PER_TICK;
    2338:	4404      	add	r4, r0
    233a:	602c      	str	r4, [r5, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
    233c:	f002 fc56 	bl	4bec <z_clock_announce>
}
    2340:	bd38      	pop	{r3, r4, r5, pc}
    2342:	bf00      	nop
    2344:	20002778 	.word	0x20002778

00002348 <prevent_false_prev_evt>:
{
    2348:	b538      	push	{r3, r4, r5, lr}
	uint32_t now = counter();
    234a:	f7ff ffe5 	bl	2318 <counter>
    234e:	4604      	mov	r4, r0
	prev_val = get_comparator();
    2350:	f7ff ffbc 	bl	22cc <get_comparator>
    2354:	4605      	mov	r5, r0
	event_clear();
    2356:	f7ff ffbf 	bl	22d8 <event_clear>
	set_comparator(now);
    235a:	4620      	mov	r0, r4
    235c:	f7ff ffae 	bl	22bc <set_comparator>
	event_enable();
    2360:	f7ff ffc2 	bl	22e8 <event_enable>
	if (counter_sub(prev_val, now) == 1) {
    2364:	4621      	mov	r1, r4
    2366:	4628      	mov	r0, r5
    2368:	f004 f88c 	bl	6484 <counter_sub>
    236c:	2801      	cmp	r0, #1
    236e:	d005      	beq.n	237c <prevent_false_prev_evt+0x34>
    2370:	4b05      	ldr	r3, [pc, #20]	; (2388 <prevent_false_prev_evt+0x40>)
    2372:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2376:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    237a:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_busy_wait(usec_to_wait);
    237c:	200f      	movs	r0, #15
    237e:	f006 f9f0 	bl	8762 <z_impl_k_busy_wait>
		event_clear();
    2382:	f7ff ffa9 	bl	22d8 <event_clear>
    2386:	e7f3      	b.n	2370 <prevent_false_prev_evt+0x28>
    2388:	e000e100 	.word	0xe000e100

0000238c <z_clock_driver_init>:

int z_clock_driver_init(const struct device *device)
{
    238c:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    238e:	4d0f      	ldr	r5, [pc, #60]	; (23cc <z_clock_driver_init+0x40>)
    2390:	2400      	movs	r4, #0
    2392:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
    2396:	f7ff ff9f 	bl	22d8 <event_clear>
    239a:	4b0d      	ldr	r3, [pc, #52]	; (23d0 <z_clock_driver_init+0x44>)
    239c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    23a0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();
    23a4:	f7ff ffb0 	bl	2308 <int_enable>

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
    23a8:	4622      	mov	r2, r4
    23aa:	2101      	movs	r1, #1
    23ac:	2015      	movs	r0, #21
    23ae:	f000 f8db 	bl	2568 <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
    23b2:	2015      	movs	r0, #21
    23b4:	f000 f8ba 	bl	252c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    23b8:	2301      	movs	r3, #1
    23ba:	4a06      	ldr	r2, [pc, #24]	; (23d4 <z_clock_driver_init+0x48>)
    23bc:	6013      	str	r3, [r2, #0]
    23be:	602b      	str	r3, [r5, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
    23c0:	2002      	movs	r0, #2
    23c2:	f7ff ff55 	bl	2270 <z_nrf_clock_control_lf_on>

	return 0;
}
    23c6:	4620      	mov	r0, r4
    23c8:	bd38      	pop	{r3, r4, r5, pc}
    23ca:	bf00      	nop
    23cc:	50015000 	.word	0x50015000
    23d0:	e000e100 	.word	0xe000e100
    23d4:	50015008 	.word	0x50015008

000023d8 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
    23d8:	b538      	push	{r3, r4, r5, lr}

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    23da:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    23de:	d01e      	beq.n	241e <z_clock_set_timeout+0x46>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
    23e0:	1e44      	subs	r4, r0, #1
    23e2:	4b11      	ldr	r3, [pc, #68]	; (2428 <z_clock_set_timeout+0x50>)
    23e4:	429c      	cmp	r4, r3
    23e6:	dc01      	bgt.n	23ec <z_clock_set_timeout+0x14>
    23e8:	2c00      	cmp	r4, #0
    23ea:	dd1b      	ble.n	2424 <z_clock_set_timeout+0x4c>
    23ec:	4b0e      	ldr	r3, [pc, #56]	; (2428 <z_clock_set_timeout+0x50>)
    23ee:	429c      	cmp	r4, r3
    23f0:	dd00      	ble.n	23f4 <z_clock_set_timeout+0x1c>
    23f2:	4c0e      	ldr	r4, [pc, #56]	; (242c <z_clock_set_timeout+0x54>)

	uint32_t unannounced = counter_sub(counter(), last_count);
    23f4:	f7ff ff90 	bl	2318 <counter>
    23f8:	4b0d      	ldr	r3, [pc, #52]	; (2430 <z_clock_set_timeout+0x58>)
    23fa:	681d      	ldr	r5, [r3, #0]
    23fc:	4629      	mov	r1, r5
    23fe:	f004 f841 	bl	6484 <counter_sub>
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    2402:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2406:	d300      	bcc.n	240a <z_clock_set_timeout+0x32>
		ticks = 0;
    2408:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    240a:	4420      	add	r0, r4
    240c:	3001      	adds	r0, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
    240e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2412:	d300      	bcc.n	2416 <z_clock_set_timeout+0x3e>
		cyc = MAX_CYCLES;
    2414:	4805      	ldr	r0, [pc, #20]	; (242c <z_clock_set_timeout+0x54>)
	}

	cyc += last_count;
	set_protected_absolute_alarm(cyc);
    2416:	4428      	add	r0, r5
    2418:	f004 f86a 	bl	64f0 <set_protected_absolute_alarm>
}
    241c:	bd38      	pop	{r3, r4, r5, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    241e:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    2422:	e7dd      	b.n	23e0 <z_clock_set_timeout+0x8>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
    2424:	2400      	movs	r4, #0
    2426:	e7e5      	b.n	23f4 <z_clock_set_timeout+0x1c>
    2428:	007ffffe 	.word	0x007ffffe
    242c:	007fffff 	.word	0x007fffff
    2430:	20002778 	.word	0x20002778

00002434 <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
    2434:	b510      	push	{r4, lr}
	__asm__ volatile(
    2436:	f04f 0320 	mov.w	r3, #32
    243a:	f3ef 8411 	mrs	r4, BASEPRI
    243e:	f383 8811 	msr	BASEPRI, r3
    2442:	f3bf 8f6f 	isb	sy
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    2446:	f7ff ff67 	bl	2318 <counter>
    244a:	4b04      	ldr	r3, [pc, #16]	; (245c <z_clock_elapsed+0x28>)
    244c:	6819      	ldr	r1, [r3, #0]
    244e:	f004 f819 	bl	6484 <counter_sub>
	__asm__ volatile(
    2452:	f384 8811 	msr	BASEPRI, r4
    2456:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    245a:	bd10      	pop	{r4, pc}
    245c:	20002778 	.word	0x20002778

00002460 <z_timer_cycle_get_32>:

uint32_t z_timer_cycle_get_32(void)
{
    2460:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    2462:	f04f 0320 	mov.w	r3, #32
    2466:	f3ef 8511 	mrs	r5, BASEPRI
    246a:	f383 8811 	msr	BASEPRI, r3
    246e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    2472:	f7ff ff51 	bl	2318 <counter>
    2476:	4b05      	ldr	r3, [pc, #20]	; (248c <z_timer_cycle_get_32+0x2c>)
    2478:	681c      	ldr	r4, [r3, #0]
    247a:	4621      	mov	r1, r4
    247c:	f004 f802 	bl	6484 <counter_sub>
    2480:	4420      	add	r0, r4
	__asm__ volatile(
    2482:	f385 8811 	msr	BASEPRI, r5
    2486:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    248a:	bd38      	pop	{r3, r4, r5, pc}
    248c:	20002778 	.word	0x20002778

00002490 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2490:	4a09      	ldr	r2, [pc, #36]	; (24b8 <arch_swap+0x28>)
    2492:	6893      	ldr	r3, [r2, #8]
    2494:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    2496:	4909      	ldr	r1, [pc, #36]	; (24bc <arch_swap+0x2c>)
    2498:	6809      	ldr	r1, [r1, #0]
    249a:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    249c:	4908      	ldr	r1, [pc, #32]	; (24c0 <arch_swap+0x30>)
    249e:	684b      	ldr	r3, [r1, #4]
    24a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    24a4:	604b      	str	r3, [r1, #4]
    24a6:	2300      	movs	r3, #0
    24a8:	f383 8811 	msr	BASEPRI, r3
    24ac:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    24b0:	6893      	ldr	r3, [r2, #8]
}
    24b2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    24b4:	4770      	bx	lr
    24b6:	bf00      	nop
    24b8:	20002800 	.word	0x20002800
    24bc:	000094c8 	.word	0x000094c8
    24c0:	e000ed00 	.word	0xe000ed00

000024c4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    24c4:	490f      	ldr	r1, [pc, #60]	; (2504 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    24c6:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    24c8:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    24cc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    24ce:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    24d2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    24d6:	2020      	movs	r0, #32
    msr BASEPRI, r0
    24d8:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    24dc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    24e0:	4f09      	ldr	r7, [pc, #36]	; (2508 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    24e2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    24e6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    24e8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    24ea:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    24ec:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    24ee:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    24f0:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    24f2:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    24f6:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    24fa:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    24fe:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    2502:	4770      	bx	lr
    ldr r1, =_kernel
    2504:	20002800 	.word	0x20002800
    ldr v4, =_SCS_ICSR
    2508:	e000ed04 	.word	0xe000ed04

0000250c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    250c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2510:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2512:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2516:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    251a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    251c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2520:	2902      	cmp	r1, #2
    beq _oops
    2522:	d0ff      	beq.n	2524 <_oops>

00002524 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2524:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2526:	f003 fffd 	bl	6524 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    252a:	bd01      	pop	{r0, pc}

0000252c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    252c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    252e:	2b00      	cmp	r3, #0
    2530:	db08      	blt.n	2544 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2532:	f000 001f 	and.w	r0, r0, #31
    2536:	095b      	lsrs	r3, r3, #5
    2538:	2201      	movs	r2, #1
    253a:	fa02 f000 	lsl.w	r0, r2, r0
    253e:	4a02      	ldr	r2, [pc, #8]	; (2548 <arch_irq_enable+0x1c>)
    2540:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2544:	4770      	bx	lr
    2546:	bf00      	nop
    2548:	e000e100 	.word	0xe000e100

0000254c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    254c:	0942      	lsrs	r2, r0, #5
    254e:	4b05      	ldr	r3, [pc, #20]	; (2564 <arch_irq_is_enabled+0x18>)
    2550:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2554:	f000 001f 	and.w	r0, r0, #31
    2558:	2301      	movs	r3, #1
    255a:	fa03 f000 	lsl.w	r0, r3, r0
}
    255e:	4010      	ands	r0, r2
    2560:	4770      	bx	lr
    2562:	bf00      	nop
    2564:	e000e100 	.word	0xe000e100

00002568 <z_arm_irq_priority_set>:
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    2568:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    256a:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    256c:	2b00      	cmp	r3, #0
    256e:	db08      	blt.n	2582 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2570:	0149      	lsls	r1, r1, #5
    2572:	b2c9      	uxtb	r1, r1
    2574:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2578:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    257c:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    2580:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2582:	f000 000f 	and.w	r0, r0, #15
    2586:	0149      	lsls	r1, r1, #5
    2588:	b2c9      	uxtb	r1, r1
    258a:	4b01      	ldr	r3, [pc, #4]	; (2590 <z_arm_irq_priority_set+0x28>)
    258c:	5419      	strb	r1, [r3, r0]
}
    258e:	4770      	bx	lr
    2590:	e000ed14 	.word	0xe000ed14

00002594 <z_arm_switch_to_main_no_multithreading>:

#if !defined(CONFIG_MULTITHREADING) && defined(CONFIG_CPU_CORTEX_M)

FUNC_NORETURN void z_arm_switch_to_main_no_multithreading(
	k_thread_entry_t main_entry, void *p1, void *p2, void *p3)
{
    2594:	b580      	push	{r7, lr}
    2596:	4604      	mov	r4, r0
    2598:	460f      	mov	r7, r1
    259a:	4616      	mov	r6, r2
    259c:	461d      	mov	r5, r3
	z_arm_prepare_switch_to_main();
    259e:	f003 ffb9 	bl	6514 <z_arm_prepare_switch_to_main>
	/* Store all required input in registers, to be accesible
	 * after stack pointer change. The function is not going
	 * to return, so callee-saved registers do not need to be
	 * stacked.
	 */
	register void *p1_inreg __asm__("r0") = p1;
    25a2:	4638      	mov	r0, r7
	register void *p2_inreg __asm__("r1") = p2;
    25a4:	4631      	mov	r1, r6
	register void *p3_inreg __asm__("r2") = p3;
    25a6:	462a      	mov	r2, r5

	__asm__ volatile (
    25a8:	4b04      	ldr	r3, [pc, #16]	; (25bc <loop+0x2>)
    25aa:	2520      	movs	r5, #32
    25ac:	f383 8809 	msr	PSP, r3
    25b0:	47a0      	blx	r4
    25b2:	f385 8811 	msr	BASEPRI, r5
    25b6:	f3bf 8f6f 	isb	sy

000025ba <loop>:
    25ba:	e7fe      	b.n	25ba <loop>
	, [_psplim]"r" (psplim)
#endif
	:
	);

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    25bc:	20005038 	.word	0x20005038

000025c0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    25c0:	4901      	ldr	r1, [pc, #4]	; (25c8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    25c2:	2210      	movs	r2, #16
	str	r2, [r1]
    25c4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    25c6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    25c8:	e000ed10 	.word	0xe000ed10

000025cc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    25cc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    25ce:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    25d0:	f381 8811 	msr	BASEPRI, r1

	wfe
    25d4:	bf20      	wfe

	msr	BASEPRI, r0
    25d6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    25da:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    25dc:	4770      	bx	lr
    25de:	bf00      	nop

000025e0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    25e0:	bf30      	wfi
    b z_SysNmiOnReset
    25e2:	f7ff bffd 	b.w	25e0 <z_SysNmiOnReset>
    25e6:	bf00      	nop

000025e8 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    25e8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    25ea:	4b0e      	ldr	r3, [pc, #56]	; (2624 <z_arm_prep_c+0x3c>)
    25ec:	4a0e      	ldr	r2, [pc, #56]	; (2628 <z_arm_prep_c+0x40>)
    25ee:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    25f2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    25f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    25f8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    25fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2600:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    2608:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    260c:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    2610:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2614:	f002 f8aa 	bl	476c <z_bss_zero>
	z_data_copy();
    2618:	f002 f8b4 	bl	4784 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    261c:	f000 f920 	bl	2860 <z_arm_interrupt_init>
	z_cstart();
    2620:	f002 f8ec 	bl	47fc <z_cstart>
    2624:	e000ed00 	.word	0xe000ed00
    2628:	00000000 	.word	0x00000000

0000262c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    262c:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    262e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2632:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2636:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    263a:	4904      	ldr	r1, [pc, #16]	; (264c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    263c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    263e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2640:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2642:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2646:	4902      	ldr	r1, [pc, #8]	; (2650 <_isr_wrapper+0x24>)
	bx r1
    2648:	4708      	bx	r1
    264a:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    264c:	00008898 	.word	0x00008898
	ldr r1, =z_arm_int_exit
    2650:	0000285d 	.word	0x0000285d

00002654 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    2654:	f003 fcc7 	bl	5fe6 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2658:	2020      	movs	r0, #32
    msr BASEPRI, r0
    265a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    265e:	4808      	ldr	r0, [pc, #32]	; (2680 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2660:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    2664:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2666:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    266a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    266e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2670:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2672:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2676:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    267a:	f7ff ffb5 	bl	25e8 <z_arm_prep_c>
    267e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    2680:	20005038 	.word	0x20005038

00002684 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2684:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2688:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    268c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    268e:	4672      	mov	r2, lr
	bl z_arm_fault
    2690:	f000 f890 	bl	27b4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2694:	bd01      	pop	{r0, pc}
    2696:	bf00      	nop

00002698 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    2698:	b510      	push	{r4, lr}
    269a:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    269c:	4b0f      	ldr	r3, [pc, #60]	; (26dc <mem_manage_fault+0x44>)
    269e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    26a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    26a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26a4:	f013 0f02 	tst.w	r3, #2
    26a8:	d00b      	beq.n	26c2 <mem_manage_fault+0x2a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    26aa:	4b0c      	ldr	r3, [pc, #48]	; (26dc <mem_manage_fault+0x44>)
    26ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    26ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26b0:	f013 0f80 	tst.w	r3, #128	; 0x80
    26b4:	d005      	beq.n	26c2 <mem_manage_fault+0x2a>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    26b6:	b121      	cbz	r1, 26c2 <mem_manage_fault+0x2a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    26b8:	4a08      	ldr	r2, [pc, #32]	; (26dc <mem_manage_fault+0x44>)
    26ba:	6a93      	ldr	r3, [r2, #40]	; 0x28
    26bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    26c0:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    26c2:	4b06      	ldr	r3, [pc, #24]	; (26dc <mem_manage_fault+0x44>)
    26c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    26c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    26c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    26ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    26cc:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    26d0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    26d2:	f003 ff33 	bl	653c <memory_fault_recoverable>
    26d6:	7020      	strb	r0, [r4, #0]

	return reason;
}
    26d8:	2000      	movs	r0, #0
    26da:	bd10      	pop	{r4, pc}
    26dc:	e000ed00 	.word	0xe000ed00

000026e0 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    26e0:	b510      	push	{r4, lr}
    26e2:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    26e4:	4b12      	ldr	r3, [pc, #72]	; (2730 <bus_fault+0x50>)
    26e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    26e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    26ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26ec:	f413 7f00 	tst.w	r3, #512	; 0x200
    26f0:	d00b      	beq.n	270a <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    26f2:	4b0f      	ldr	r3, [pc, #60]	; (2730 <bus_fault+0x50>)
    26f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    26f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26f8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    26fc:	d005      	beq.n	270a <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    26fe:	b121      	cbz	r1, 270a <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2700:	4a0b      	ldr	r2, [pc, #44]	; (2730 <bus_fault+0x50>)
    2702:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2704:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2708:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    270a:	4b09      	ldr	r3, [pc, #36]	; (2730 <bus_fault+0x50>)
    270c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2710:	f413 7f80 	tst.w	r3, #256	; 0x100
    2714:	d101      	bne.n	271a <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2716:	4b06      	ldr	r3, [pc, #24]	; (2730 <bus_fault+0x50>)
    2718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    271a:	4a05      	ldr	r2, [pc, #20]	; (2730 <bus_fault+0x50>)
    271c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    271e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2722:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
    2724:	f003 ff0a 	bl	653c <memory_fault_recoverable>
    2728:	7020      	strb	r0, [r4, #0]

	return reason;
}
    272a:	2000      	movs	r0, #0
    272c:	bd10      	pop	{r4, pc}
    272e:	bf00      	nop
    2730:	e000ed00 	.word	0xe000ed00

00002734 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2734:	4b07      	ldr	r3, [pc, #28]	; (2754 <usage_fault+0x20>)
    2736:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    273a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    273c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    273e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2742:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2744:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2746:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    274a:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    274e:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    2750:	2000      	movs	r0, #0
    2752:	4770      	bx	lr
    2754:	e000ed00 	.word	0xe000ed00

00002758 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    2758:	b538      	push	{r3, r4, r5, lr}
	}
#undef _SVC_OPCODE

	*recoverable = memory_fault_recoverable(esf);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    275a:	2300      	movs	r3, #0
    275c:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    275e:	4b12      	ldr	r3, [pc, #72]	; (27a8 <hard_fault+0x50>)
    2760:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    2762:	f014 0402 	ands.w	r4, r4, #2
    2766:	d11d      	bne.n	27a4 <hard_fault+0x4c>
    2768:	4605      	mov	r5, r0
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    276a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    276c:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    2770:	d019      	beq.n	27a6 <hard_fault+0x4e>
    2772:	460a      	mov	r2, r1
    2774:	4628      	mov	r0, r5
		PR_EXC("  Fault escalation (see below)");
		if (SCB_MMFSR != 0) {
    2776:	3328      	adds	r3, #40	; 0x28
    2778:	781b      	ldrb	r3, [r3, #0]
    277a:	b943      	cbnz	r3, 278e <hard_fault+0x36>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    277c:	4b0b      	ldr	r3, [pc, #44]	; (27ac <hard_fault+0x54>)
    277e:	781b      	ldrb	r3, [r3, #0]
    2780:	b94b      	cbnz	r3, 2796 <hard_fault+0x3e>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    2782:	4b0b      	ldr	r3, [pc, #44]	; (27b0 <hard_fault+0x58>)
    2784:	881b      	ldrh	r3, [r3, #0]
    2786:	b29b      	uxth	r3, r3
    2788:	b94b      	cbnz	r3, 279e <hard_fault+0x46>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    278a:	4620      	mov	r0, r4
	}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
    278c:	e00b      	b.n	27a6 <hard_fault+0x4e>
			reason = mem_manage_fault(esf, 1, recoverable);
    278e:	2101      	movs	r1, #1
    2790:	f7ff ff82 	bl	2698 <mem_manage_fault>
    2794:	e007      	b.n	27a6 <hard_fault+0x4e>
			reason = bus_fault(esf, 1, recoverable);
    2796:	2101      	movs	r1, #1
    2798:	f7ff ffa2 	bl	26e0 <bus_fault>
    279c:	e003      	b.n	27a6 <hard_fault+0x4e>
			reason = usage_fault(esf);
    279e:	f7ff ffc9 	bl	2734 <usage_fault>
    27a2:	e000      	b.n	27a6 <hard_fault+0x4e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    27a4:	2000      	movs	r0, #0
}
    27a6:	bd38      	pop	{r3, r4, r5, pc}
    27a8:	e000ed00 	.word	0xe000ed00
    27ac:	e000ed29 	.word	0xe000ed29
    27b0:	e000ed2a 	.word	0xe000ed2a

000027b4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    27b4:	b570      	push	{r4, r5, r6, lr}
    27b6:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    27b8:	4b23      	ldr	r3, [pc, #140]	; (2848 <CONFIG_MAIN_STACK_SIZE+0x48>)
    27ba:	685b      	ldr	r3, [r3, #4]
    27bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
    27c0:	2500      	movs	r5, #0
    27c2:	f385 8811 	msr	BASEPRI, r5
    27c6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    27ca:	f002 457f 	and.w	r5, r2, #4278190080	; 0xff000000
    27ce:	f1b5 4f7f 	cmp.w	r5, #4278190080	; 0xff000000
    27d2:	d117      	bne.n	2804 <CONFIG_MAIN_STACK_SIZE+0x4>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    27d4:	f002 050c 	and.w	r5, r2, #12
    27d8:	2d08      	cmp	r5, #8
    27da:	d016      	beq.n	280a <CONFIG_MAIN_STACK_SIZE+0xa>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    27dc:	f012 0f08 	tst.w	r2, #8
    27e0:	d00d      	beq.n	27fe <z_arm_fault+0x4a>
			ptr_esf =  (z_arch_esf_t *)psp;
    27e2:	460c      	mov	r4, r1
	*nested_exc = false;
    27e4:	2500      	movs	r5, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    27e6:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    27ea:	4619      	mov	r1, r3
    27ec:	4620      	mov	r0, r4
    27ee:	f003 fea7 	bl	6540 <fault_handle>
    27f2:	4606      	mov	r6, r0
	if (recoverable) {
    27f4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    27f8:	b153      	cbz	r3, 2810 <CONFIG_MAIN_STACK_SIZE+0x10>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    27fa:	b00a      	add	sp, #40	; 0x28
    27fc:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    27fe:	4604      	mov	r4, r0
			*nested_exc = true;
    2800:	2501      	movs	r5, #1
    2802:	e7f0      	b.n	27e6 <z_arm_fault+0x32>
	*nested_exc = false;
    2804:	2500      	movs	r5, #0
		return NULL;
    2806:	462c      	mov	r4, r5
    2808:	e7ed      	b.n	27e6 <z_arm_fault+0x32>
	*nested_exc = false;
    280a:	2500      	movs	r5, #0
		return NULL;
    280c:	462c      	mov	r4, r5
    280e:	e7ea      	b.n	27e6 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2810:	2220      	movs	r2, #32
    2812:	4621      	mov	r1, r4
    2814:	a801      	add	r0, sp, #4
    2816:	f003 ff0a 	bl	662e <memcpy>
	if (nested_exc) {
    281a:	b14d      	cbz	r5, 2830 <CONFIG_MAIN_STACK_SIZE+0x30>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    281c:	9b08      	ldr	r3, [sp, #32]
    281e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2822:	b95a      	cbnz	r2, 283c <CONFIG_MAIN_STACK_SIZE+0x3c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2824:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2828:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    282c:	9308      	str	r3, [sp, #32]
    282e:	e005      	b.n	283c <CONFIG_MAIN_STACK_SIZE+0x3c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2830:	9b08      	ldr	r3, [sp, #32]
    2832:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2836:	f023 0301 	bic.w	r3, r3, #1
    283a:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    283c:	a901      	add	r1, sp, #4
    283e:	4630      	mov	r0, r6
    2840:	f003 fe6c 	bl	651c <z_arm_fatal_error>
    2844:	e7d9      	b.n	27fa <z_arm_fault+0x46>
    2846:	bf00      	nop
    2848:	e000ed00 	.word	0xe000ed00

0000284c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    284c:	4a02      	ldr	r2, [pc, #8]	; (2858 <z_arm_fault_init+0xc>)
    284e:	6953      	ldr	r3, [r2, #20]
    2850:	f043 0310 	orr.w	r3, r3, #16
    2854:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    2856:	4770      	bx	lr
    2858:	e000ed00 	.word	0xe000ed00

0000285c <z_arm_exc_exit>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    285c:	4770      	bx	lr
    285e:	bf00      	nop

00002860 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2860:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2862:	e006      	b.n	2872 <z_arm_interrupt_init+0x12>
    2864:	f002 010f 	and.w	r1, r2, #15
    2868:	4b09      	ldr	r3, [pc, #36]	; (2890 <z_arm_interrupt_init+0x30>)
    286a:	440b      	add	r3, r1
    286c:	2120      	movs	r1, #32
    286e:	7619      	strb	r1, [r3, #24]
    2870:	3201      	adds	r2, #1
    2872:	2a40      	cmp	r2, #64	; 0x40
    2874:	dc0a      	bgt.n	288c <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    2876:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    2878:	2b00      	cmp	r3, #0
    287a:	dbf3      	blt.n	2864 <z_arm_interrupt_init+0x4>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    287c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2880:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2884:	2120      	movs	r1, #32
    2886:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    288a:	e7f1      	b.n	2870 <z_arm_interrupt_init+0x10>
	}
}
    288c:	4770      	bx	lr
    288e:	bf00      	nop
    2890:	e000ecfc 	.word	0xe000ecfc

00002894 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    2894:	b510      	push	{r4, lr}
    2896:	4604      	mov	r4, r0
	z_thread_single_abort(thread);
    2898:	f002 f8c2 	bl	4a20 <z_thread_single_abort>

	if (_current == thread) {
    289c:	4b11      	ldr	r3, [pc, #68]	; (28e4 <z_impl_k_thread_abort+0x50>)
    289e:	689b      	ldr	r3, [r3, #8]
    28a0:	42a3      	cmp	r3, r4
    28a2:	d00a      	beq.n	28ba <z_impl_k_thread_abort+0x26>
	__asm__ volatile(
    28a4:	f04f 0320 	mov.w	r3, #32
    28a8:	f3ef 8011 	mrs	r0, BASEPRI
    28ac:	f383 8811 	msr	BASEPRI, r3
    28b0:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    28b4:	f005 fee9 	bl	868a <z_reschedule_irqlock>
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    28b8:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    28ba:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    28be:	b12b      	cbz	r3, 28cc <z_impl_k_thread_abort+0x38>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    28c0:	4a09      	ldr	r2, [pc, #36]	; (28e8 <z_impl_k_thread_abort+0x54>)
    28c2:	6853      	ldr	r3, [r2, #4]
    28c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    28c8:	6053      	str	r3, [r2, #4]
    28ca:	e7eb      	b.n	28a4 <z_impl_k_thread_abort+0x10>
    28cc:	f04f 0320 	mov.w	r3, #32
    28d0:	f3ef 8011 	mrs	r0, BASEPRI
    28d4:	f383 8811 	msr	BASEPRI, r3
    28d8:	f3bf 8f6f 	isb	sy

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
    28dc:	f7ff fdd8 	bl	2490 <arch_swap>
	return ret;
    28e0:	e7e0      	b.n	28a4 <z_impl_k_thread_abort+0x10>
    28e2:	bf00      	nop
    28e4:	20002800 	.word	0x20002800
    28e8:	e000ed00 	.word	0xe000ed00

000028ec <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    28ec:	b500      	push	{lr}
    28ee:	b085      	sub	sp, #20
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
		{
		.start = (uint32_t)&_ramfunc_ram_start,
    28f0:	4b09      	ldr	r3, [pc, #36]	; (2918 <z_arm_configure_static_mpu_regions+0x2c>)
		const struct k_mem_partition ramfunc_region =
    28f2:	9301      	str	r3, [sp, #4]
		.size = (uint32_t)&_ramfunc_ram_size,
    28f4:	4b09      	ldr	r3, [pc, #36]	; (291c <z_arm_configure_static_mpu_regions+0x30>)
		const struct k_mem_partition ramfunc_region =
    28f6:	9302      	str	r3, [sp, #8]
    28f8:	2306      	movs	r3, #6
    28fa:	f8ad 300c 	strh.w	r3, [sp, #12]
    28fe:	2101      	movs	r1, #1
    2900:	f8ad 100e 	strh.w	r1, [sp, #14]
#endif /* !CONFIG_MULTITHREADING && CONFIG_MPU_STACK_GUARD */
	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    2904:	ab01      	add	r3, sp, #4
    2906:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2908:	4b05      	ldr	r3, [pc, #20]	; (2920 <z_arm_configure_static_mpu_regions+0x34>)
    290a:	4a06      	ldr	r2, [pc, #24]	; (2924 <z_arm_configure_static_mpu_regions+0x38>)
    290c:	4668      	mov	r0, sp
    290e:	f003 fe5f 	bl	65d0 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    2912:	b005      	add	sp, #20
    2914:	f85d fb04 	ldr.w	pc, [sp], #4
    2918:	20000000 	.word	0x20000000
    291c:	00000000 	.word	0x00000000
    2920:	20010000 	.word	0x20010000
    2924:	20000000 	.word	0x20000000

00002928 <mpu_init>:

	/* Flash region(s): Attribute-0
	 * SRAM region(s): Attribute-1
	 * SRAM no cache-able regions(s): Attribute-2
	 */
	MPU->MAIR0 =
    2928:	4b01      	ldr	r3, [pc, #4]	; (2930 <mpu_init+0x8>)
    292a:	4a02      	ldr	r2, [pc, #8]	; (2934 <mpu_init+0xc>)
    292c:	631a      	str	r2, [r3, #48]	; 0x30
		((MPU_MAIR_ATTR_SRAM << MPU_MAIR0_Attr1_Pos) &
			MPU_MAIR0_Attr1_Msk)
		|
		((MPU_MAIR_ATTR_SRAM_NOCACHE << MPU_MAIR0_Attr2_Pos) &
			MPU_MAIR0_Attr2_Msk);
}
    292e:	4770      	bx	lr
    2930:	e000ed90 	.word	0xe000ed90
    2934:	0044ffaa 	.word	0x0044ffaa

00002938 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    2938:	b410      	push	{r4}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    293a:	680b      	ldr	r3, [r1, #0]
    293c:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    2940:	7a0c      	ldrb	r4, [r1, #8]
    2942:	f004 031f 	and.w	r3, r4, #31
    2946:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2948:	68cb      	ldr	r3, [r1, #12]
    294a:	f023 031f 	bic.w	r3, r3, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    294e:	0964      	lsrs	r4, r4, #5
    2950:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    2954:	f043 0301 	orr.w	r3, r3, #1
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    2958:	4902      	ldr	r1, [pc, #8]	; (2964 <region_init+0x2c>)
    295a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    295c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    295e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    2960:	bc10      	pop	{r4}
    2962:	4770      	bx	lr
    2964:	e000ed90 	.word	0xe000ed90

00002968 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    2968:	b510      	push	{r4, lr}
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    296a:	280f      	cmp	r0, #15
    296c:	d804      	bhi.n	2978 <region_allocate_and_init+0x10>
    296e:	4604      	mov	r4, r0
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    2970:	f7ff ffe2 	bl	2938 <region_init>

	return index;
}
    2974:	4620      	mov	r0, r4
    2976:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2978:	f04f 0400 	mov.w	r4, #0
    297c:	2301      	movs	r3, #1
    297e:	f363 0402 	bfi	r4, r3, #0, #3
    2982:	f36f 04c5 	bfc	r4, #3, #3
    2986:	4b07      	ldr	r3, [pc, #28]	; (29a4 <region_allocate_and_init+0x3c>)
    2988:	4a07      	ldr	r2, [pc, #28]	; (29a8 <region_allocate_and_init+0x40>)
    298a:	1a9b      	subs	r3, r3, r2
    298c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    2990:	f363 148f 	bfi	r4, r3, #6, #10
    2994:	4602      	mov	r2, r0
    2996:	4905      	ldr	r1, [pc, #20]	; (29ac <region_allocate_and_init+0x44>)
    2998:	4620      	mov	r0, r4
    299a:	f003 fb2e 	bl	5ffa <log_string_sync>
		return -EINVAL;
    299e:	f06f 0415 	mvn.w	r4, #21
    29a2:	e7e7      	b.n	2974 <region_allocate_and_init+0xc>
    29a4:	00008ab0 	.word	0x00008ab0
    29a8:	00008aa0 	.word	0x00008aa0
    29ac:	00009288 	.word	0x00009288

000029b0 <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
	*regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    29b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29b4:	b087      	sub	sp, #28
    29b6:	4680      	mov	r8, r0
    29b8:	468b      	mov	fp, r1
    29ba:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
    29bc:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
    29be:	2500      	movs	r5, #0
    29c0:	e060      	b.n	2a84 <mpu_configure_regions_and_partition+0xd4>
		}
		/* Non-empty region. */

		if (do_sanity_check &&
			(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    29c2:	2301      	movs	r3, #1
    29c4:	f363 0002 	bfi	r0, r3, #0, #3
    29c8:	f36f 00c5 	bfc	r0, #3, #3
    29cc:	4b6b      	ldr	r3, [pc, #428]	; (2b7c <mpu_configure_regions_and_partition+0x1cc>)
    29ce:	4a6c      	ldr	r2, [pc, #432]	; (2b80 <mpu_configure_regions_and_partition+0x1d0>)
    29d0:	1a9b      	subs	r3, r3, r2
    29d2:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    29d6:	f363 108f 	bfi	r0, r3, #6, #10
    29da:	462a      	mov	r2, r5
    29dc:	4969      	ldr	r1, [pc, #420]	; (2b84 <mpu_configure_regions_and_partition+0x1d4>)
    29de:	f003 fb0c 	bl	5ffa <log_string_sync>
			return -EINVAL;
    29e2:	f06f 0415 	mvn.w	r4, #21
    29e6:	e016      	b.n	2a16 <mpu_configure_regions_and_partition+0x66>
	return -EINVAL;
    29e8:	f06f 0615 	mvn.w	r6, #21
    29ec:	e067      	b.n	2abe <mpu_configure_regions_and_partition+0x10e>
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    29ee:	f04f 0000 	mov.w	r0, #0
    29f2:	2301      	movs	r3, #1
    29f4:	f363 0002 	bfi	r0, r3, #0, #3
    29f8:	f36f 00c5 	bfc	r0, #3, #3
    29fc:	4b5f      	ldr	r3, [pc, #380]	; (2b7c <mpu_configure_regions_and_partition+0x1cc>)
    29fe:	4a60      	ldr	r2, [pc, #384]	; (2b80 <mpu_configure_regions_and_partition+0x1d0>)
    2a00:	1a9b      	subs	r3, r3, r2
    2a02:	f3c3 03c9 	ubfx	r3, r3, #3, #10
    2a06:	f363 108f 	bfi	r0, r3, #6, #10
    2a0a:	4632      	mov	r2, r6
    2a0c:	495e      	ldr	r1, [pc, #376]	; (2b88 <mpu_configure_regions_and_partition+0x1d8>)
    2a0e:	f003 faf4 	bl	5ffa <log_string_sync>
				u_reg_index);
			return -EINVAL;
    2a12:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    2a16:	4620      	mov	r0, r4
    2a18:	b007      	add	sp, #28
    2a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((regions[i]->start == u_reg_base) &&
    2a1e:	45ba      	cmp	sl, r7
    2a20:	d166      	bne.n	2af0 <mpu_configure_regions_and_partition+0x140>
			mpu_configure_region(u_reg_index, regions[i]);
    2a22:	b2f0      	uxtb	r0, r6
    2a24:	f003 fdb9 	bl	659a <mpu_configure_region>
    2a28:	e02b      	b.n	2a82 <mpu_configure_regions_and_partition+0xd2>
	MPU->RNR = index;
    2a2a:	4a58      	ldr	r2, [pc, #352]	; (2b8c <mpu_configure_regions_and_partition+0x1dc>)
    2a2c:	f8c2 c008 	str.w	ip, [r2, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2a30:	68d3      	ldr	r3, [r2, #12]
    2a32:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    2a36:	f020 001f 	bic.w	r0, r0, #31
    2a3a:	4318      	orrs	r0, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2a3c:	60d0      	str	r0, [r2, #12]
				mpu_configure_region(reg_index, regions[i]);
    2a3e:	f858 1009 	ldr.w	r1, [r8, r9]
    2a42:	b2e0      	uxtb	r0, r4
    2a44:	f003 fda9 	bl	659a <mpu_configure_region>
    2a48:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    2a4a:	f110 0f16 	cmn.w	r0, #22
    2a4e:	d0e2      	beq.n	2a16 <mpu_configure_regions_and_partition+0x66>
			reg_index++;
    2a50:	3401      	adds	r4, #1
    2a52:	e016      	b.n	2a82 <mpu_configure_regions_and_partition+0xd2>
				regions[i]->start - 1);
    2a54:	3b01      	subs	r3, #1
	MPU->RNR = index;
    2a56:	494d      	ldr	r1, [pc, #308]	; (2b8c <mpu_configure_regions_and_partition+0x1dc>)
    2a58:	f8c1 c008 	str.w	ip, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2a5c:	690a      	ldr	r2, [r1, #16]
    2a5e:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    2a62:	f023 031f 	bic.w	r3, r3, #31
    2a66:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2a68:	610b      	str	r3, [r1, #16]
				mpu_configure_region(reg_index, regions[i]);
    2a6a:	f858 1009 	ldr.w	r1, [r8, r9]
    2a6e:	b2e0      	uxtb	r0, r4
    2a70:	f003 fd93 	bl	659a <mpu_configure_region>
    2a74:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    2a76:	f110 0f16 	cmn.w	r0, #22
    2a7a:	d0cc      	beq.n	2a16 <mpu_configure_regions_and_partition+0x66>
			reg_index++;
    2a7c:	3401      	adds	r4, #1
    2a7e:	e000      	b.n	2a82 <mpu_configure_regions_and_partition+0xd2>
			reg_index++;
    2a80:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    2a82:	3501      	adds	r5, #1
    2a84:	455d      	cmp	r5, fp
    2a86:	dac6      	bge.n	2a16 <mpu_configure_regions_and_partition+0x66>
		if (regions[i]->size == 0U) {
    2a88:	ea4f 0985 	mov.w	r9, r5, lsl #2
    2a8c:	f858 6025 	ldr.w	r6, [r8, r5, lsl #2]
    2a90:	6877      	ldr	r7, [r6, #4]
    2a92:	2f00      	cmp	r7, #0
    2a94:	d0f5      	beq.n	2a82 <mpu_configure_regions_and_partition+0xd2>
		if (do_sanity_check &&
    2a96:	9b01      	ldr	r3, [sp, #4]
    2a98:	b123      	cbz	r3, 2aa4 <mpu_configure_regions_and_partition+0xf4>
			(!mpu_partition_is_valid(regions[i]))) {
    2a9a:	4630      	mov	r0, r6
    2a9c:	f003 fd6b 	bl	6576 <mpu_partition_is_valid>
		if (do_sanity_check &&
    2aa0:	2800      	cmp	r0, #0
    2aa2:	d08e      	beq.n	29c2 <mpu_configure_regions_and_partition+0x12>
			get_region_index(regions[i]->start, regions[i]->size);
    2aa4:	f8d6 a000 	ldr.w	sl, [r6]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2aa8:	4650      	mov	r0, sl
    2aaa:	f003 fd95 	bl	65d8 <arm_cmse_mpu_region_get>
    2aae:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2ab0:	eb07 000a 	add.w	r0, r7, sl
    2ab4:	3801      	subs	r0, #1
    2ab6:	f003 fd8f 	bl	65d8 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    2aba:	4286      	cmp	r6, r0
    2abc:	d194      	bne.n	29e8 <mpu_configure_regions_and_partition+0x38>
		if ((u_reg_index == -EINVAL) ||
    2abe:	f116 0f16 	cmn.w	r6, #22
    2ac2:	d094      	beq.n	29ee <mpu_configure_regions_and_partition+0x3e>
			(u_reg_index > (reg_index - 1))) {
    2ac4:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    2ac6:	42b3      	cmp	r3, r6
    2ac8:	db91      	blt.n	29ee <mpu_configure_regions_and_partition+0x3e>
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
    2aca:	46b4      	mov	ip, r6
	MPU->RNR = index;
    2acc:	4b2f      	ldr	r3, [pc, #188]	; (2b8c <mpu_configure_regions_and_partition+0x1dc>)
    2ace:	609e      	str	r6, [r3, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2ad0:	68da      	ldr	r2, [r3, #12]
    2ad2:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = index;
    2ad6:	609e      	str	r6, [r3, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2ad8:	691f      	ldr	r7, [r3, #16]
    2ada:	f047 071f 	orr.w	r7, r7, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
    2ade:	f858 1009 	ldr.w	r1, [r8, r9]
    2ae2:	680b      	ldr	r3, [r1, #0]
    2ae4:	6848      	ldr	r0, [r1, #4]
    2ae6:	4418      	add	r0, r3
    2ae8:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
    2aec:	4293      	cmp	r3, r2
    2aee:	d096      	beq.n	2a1e <mpu_configure_regions_and_partition+0x6e>
		} else if (regions[i]->start == u_reg_base) {
    2af0:	4293      	cmp	r3, r2
    2af2:	d09a      	beq.n	2a2a <mpu_configure_regions_and_partition+0x7a>
		} else if (reg_last == u_reg_last) {
    2af4:	45ba      	cmp	sl, r7
    2af6:	d0ad      	beq.n	2a54 <mpu_configure_regions_and_partition+0xa4>
				regions[i]->start - 1);
    2af8:	3b01      	subs	r3, #1
	MPU->RNR = index;
    2afa:	4924      	ldr	r1, [pc, #144]	; (2b8c <mpu_configure_regions_and_partition+0x1dc>)
    2afc:	4666      	mov	r6, ip
    2afe:	f8c1 c008 	str.w	ip, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2b02:	690a      	ldr	r2, [r1, #16]
    2b04:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    2b08:	f023 031f 	bic.w	r3, r3, #31
    2b0c:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2b0e:	610b      	str	r3, [r1, #16]
				mpu_configure_region(reg_index, regions[i]);
    2b10:	f858 1009 	ldr.w	r1, [r8, r9]
    2b14:	b2e0      	uxtb	r0, r4
    2b16:	f003 fd40 	bl	659a <mpu_configure_region>
    2b1a:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    2b1c:	f110 0f16 	cmn.w	r0, #22
    2b20:	f43f af79 	beq.w	2a16 <mpu_configure_regions_and_partition+0x66>
			reg_index++;
    2b24:	3001      	adds	r0, #1
	MPU->RNR = index;
    2b26:	4b19      	ldr	r3, [pc, #100]	; (2b8c <mpu_configure_regions_and_partition+0x1dc>)
    2b28:	609e      	str	r6, [r3, #8]
	attr->rbar = MPU->RBAR &
    2b2a:	68d9      	ldr	r1, [r3, #12]
    2b2c:	f89d 2010 	ldrb.w	r2, [sp, #16]
    2b30:	f361 0204 	bfi	r2, r1, #0, #5
    2b34:	f88d 2010 	strb.w	r2, [sp, #16]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    2b38:	691b      	ldr	r3, [r3, #16]
    2b3a:	f3c3 0342 	ubfx	r3, r3, #1, #3
    2b3e:	b2d2      	uxtb	r2, r2
    2b40:	f363 1247 	bfi	r2, r3, #5, #3
    2b44:	f88d 2010 	strb.w	r2, [sp, #16]
			fill_region.base = regions[i]->start +
    2b48:	f858 2009 	ldr.w	r2, [r8, r9]
    2b4c:	6811      	ldr	r1, [r2, #0]
				regions[i]->size;
    2b4e:	6854      	ldr	r4, [r2, #4]
			fill_region.base = regions[i]->start +
    2b50:	4421      	add	r1, r4
    2b52:	9102      	str	r1, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    2b54:	6813      	ldr	r3, [r2, #0]
    2b56:	4423      	add	r3, r4
    2b58:	f023 031f 	bic.w	r3, r3, #31
    2b5c:	eba7 070a 	sub.w	r7, r7, sl
    2b60:	441f      	add	r7, r3
    2b62:	3f01      	subs	r7, #1
    2b64:	f027 071f 	bic.w	r7, r7, #31
			fill_region.attr.r_limit =
    2b68:	9705      	str	r7, [sp, #20]
				region_allocate_and_init(reg_index,
    2b6a:	a902      	add	r1, sp, #8
    2b6c:	b2c0      	uxtb	r0, r0
    2b6e:	f7ff fefb 	bl	2968 <region_allocate_and_init>
    2b72:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    2b74:	f110 0f16 	cmn.w	r0, #22
    2b78:	d182      	bne.n	2a80 <mpu_configure_regions_and_partition+0xd0>
    2b7a:	e74c      	b.n	2a16 <mpu_configure_regions_and_partition+0x66>
    2b7c:	00008ab0 	.word	0x00008ab0
    2b80:	00008aa0 	.word	0x00008aa0
    2b84:	00009240 	.word	0x00009240
    2b88:	00009264 	.word	0x00009264
    2b8c:	e000ed90 	.word	0xe000ed90

00002b90 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    2b90:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    2b92:	4c03      	ldr	r4, [pc, #12]	; (2ba0 <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    2b94:	2301      	movs	r3, #1
    2b96:	7822      	ldrb	r2, [r4, #0]
    2b98:	f7ff ff0a 	bl	29b0 <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2b9c:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    2b9e:	bd10      	pop	{r4, pc}
    2ba0:	2000282f 	.word	0x2000282f

00002ba4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2ba4:	4b03      	ldr	r3, [pc, #12]	; (2bb4 <arm_core_mpu_enable+0x10>)
    2ba6:	2205      	movs	r2, #5
    2ba8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    2baa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2bae:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2bb2:	4770      	bx	lr
    2bb4:	e000ed90 	.word	0xe000ed90

00002bb8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2bb8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2bbc:	4b01      	ldr	r3, [pc, #4]	; (2bc4 <arm_core_mpu_disable+0xc>)
    2bbe:	2200      	movs	r2, #0
    2bc0:	605a      	str	r2, [r3, #4]
}
    2bc2:	4770      	bx	lr
    2bc4:	e000ed90 	.word	0xe000ed90

00002bc8 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    2bc8:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2bca:	4b0e      	ldr	r3, [pc, #56]	; (2c04 <arm_mpu_init+0x3c>)
    2bcc:	681d      	ldr	r5, [r3, #0]
    2bce:	2d10      	cmp	r5, #16
    2bd0:	d815      	bhi.n	2bfe <arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    2bd2:	f7ff fff1 	bl	2bb8 <arm_core_mpu_disable>
#if defined(CONFIG_NOCACHE_MEMORY)
	SCB_CleanInvalidateDCache();
#endif

	/* Architecture-specific configuration */
	mpu_init();
    2bd6:	f7ff fea7 	bl	2928 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2bda:	2400      	movs	r4, #0
    2bdc:	42a5      	cmp	r5, r4
    2bde:	d908      	bls.n	2bf2 <arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    2be0:	4b08      	ldr	r3, [pc, #32]	; (2c04 <arm_mpu_init+0x3c>)
    2be2:	6859      	ldr	r1, [r3, #4]
    2be4:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    2be8:	4620      	mov	r0, r4
    2bea:	f7ff fea5 	bl	2938 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2bee:	3401      	adds	r4, #1
    2bf0:	e7f4      	b.n	2bdc <arm_mpu_init+0x14>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2bf2:	4b05      	ldr	r3, [pc, #20]	; (2c08 <arm_mpu_init+0x40>)
    2bf4:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    2bf6:	f7ff ffd5 	bl	2ba4 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    2bfa:	2000      	movs	r0, #0
}
    2bfc:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    2bfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2c02:	e7fb      	b.n	2bfc <arm_mpu_init+0x34>
    2c04:	000092b0 	.word	0x000092b0
    2c08:	2000282f 	.word	0x2000282f

00002c0c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2c0c:	4b01      	ldr	r3, [pc, #4]	; (2c14 <__stdout_hook_install+0x8>)
    2c0e:	6018      	str	r0, [r3, #0]
}
    2c10:	4770      	bx	lr
    2c12:	bf00      	nop
    2c14:	20000010 	.word	0x20000010

00002c18 <gpio_nrfx_config>:
	return res;
}

static int gpio_nrfx_config(const struct device *port,
			    gpio_pin_t pin, gpio_flags_t flags)
{
    2c18:	b470      	push	{r4, r5, r6}
	return port->config;
    2c1a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2c1c:	685e      	ldr	r6, [r3, #4]
	nrf_gpio_pin_pull_t pull;
	nrf_gpio_pin_drive_t drive;
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2c1e:	4b30      	ldr	r3, [pc, #192]	; (2ce0 <gpio_nrfx_config+0xc8>)
    2c20:	4013      	ands	r3, r2
    2c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2c26:	d023      	beq.n	2c70 <gpio_nrfx_config+0x58>
    2c28:	d912      	bls.n	2c50 <gpio_nrfx_config+0x38>
    2c2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2c2e:	d027      	beq.n	2c80 <gpio_nrfx_config+0x68>
    2c30:	d916      	bls.n	2c60 <gpio_nrfx_config+0x48>
    2c32:	482c      	ldr	r0, [pc, #176]	; (2ce4 <gpio_nrfx_config+0xcc>)
    2c34:	4283      	cmp	r3, r0
    2c36:	d025      	beq.n	2c84 <gpio_nrfx_config+0x6c>
    2c38:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    2c3c:	d14d      	bne.n	2cda <gpio_nrfx_config+0xc2>

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_H0S1;
		break;
	case GPIO_DS_ALT_LOW | GPIO_DS_ALT_HIGH:
		drive = NRF_GPIO_PIN_H0H1;
    2c3e:	2003      	movs	r0, #3

	default:
		return -EINVAL;
	}

	if ((flags & GPIO_PULL_UP) != 0) {
    2c40:	f012 0f10 	tst.w	r2, #16
    2c44:	d120      	bne.n	2c88 <gpio_nrfx_config+0x70>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
    2c46:	f012 0f20 	tst.w	r2, #32
    2c4a:	d03d      	beq.n	2cc8 <gpio_nrfx_config+0xb0>
		pull = NRF_GPIO_PIN_PULLDOWN;
    2c4c:	2401      	movs	r4, #1
    2c4e:	e01c      	b.n	2c8a <gpio_nrfx_config+0x72>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2c50:	2b02      	cmp	r3, #2
    2c52:	d00f      	beq.n	2c74 <gpio_nrfx_config+0x5c>
    2c54:	2b06      	cmp	r3, #6
    2c56:	d00f      	beq.n	2c78 <gpio_nrfx_config+0x60>
    2c58:	b183      	cbz	r3, 2c7c <gpio_nrfx_config+0x64>
		return -EINVAL;
    2c5a:	f06f 0015 	mvn.w	r0, #21
    2c5e:	e031      	b.n	2cc4 <gpio_nrfx_config+0xac>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2c60:	4821      	ldr	r0, [pc, #132]	; (2ce8 <gpio_nrfx_config+0xd0>)
    2c62:	4283      	cmp	r3, r0
    2c64:	d101      	bne.n	2c6a <gpio_nrfx_config+0x52>
		drive = NRF_GPIO_PIN_H0D1;
    2c66:	2007      	movs	r0, #7
    2c68:	e7ea      	b.n	2c40 <gpio_nrfx_config+0x28>
		return -EINVAL;
    2c6a:	f06f 0015 	mvn.w	r0, #21
    2c6e:	e029      	b.n	2cc4 <gpio_nrfx_config+0xac>
		drive = NRF_GPIO_PIN_H0S1;
    2c70:	2001      	movs	r0, #1
    2c72:	e7e5      	b.n	2c40 <gpio_nrfx_config+0x28>
		drive = NRF_GPIO_PIN_D0S1;
    2c74:	2004      	movs	r0, #4
    2c76:	e7e3      	b.n	2c40 <gpio_nrfx_config+0x28>
		drive = NRF_GPIO_PIN_S0D1;
    2c78:	2006      	movs	r0, #6
    2c7a:	e7e1      	b.n	2c40 <gpio_nrfx_config+0x28>
		drive = NRF_GPIO_PIN_S0S1;
    2c7c:	2000      	movs	r0, #0
    2c7e:	e7df      	b.n	2c40 <gpio_nrfx_config+0x28>
		drive = NRF_GPIO_PIN_S0H1;
    2c80:	2002      	movs	r0, #2
    2c82:	e7dd      	b.n	2c40 <gpio_nrfx_config+0x28>
		drive = NRF_GPIO_PIN_D0H1;
    2c84:	2005      	movs	r0, #5
    2c86:	e7db      	b.n	2c40 <gpio_nrfx_config+0x28>
		pull = NRF_GPIO_PIN_PULLUP;
    2c88:	2403      	movs	r4, #3
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
	}

	dir = ((flags & GPIO_OUTPUT) != 0)
    2c8a:	f3c2 2340 	ubfx	r3, r2, #9, #1
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = ((flags & GPIO_INPUT) != 0)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    2c8e:	f412 7f80 	tst.w	r2, #256	; 0x100
    2c92:	bf0c      	ite	eq
    2c94:	2501      	moveq	r5, #1
    2c96:	2500      	movne	r5, #0

	if ((flags & GPIO_OUTPUT) != 0) {
    2c98:	f412 7f00 	tst.w	r2, #512	; 0x200
    2c9c:	d005      	beq.n	2caa <gpio_nrfx_config+0x92>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    2c9e:	f412 6f00 	tst.w	r2, #2048	; 0x800
    2ca2:	d013      	beq.n	2ccc <gpio_nrfx_config+0xb4>
			nrf_gpio_port_out_set(reg, BIT(pin));
    2ca4:	2201      	movs	r2, #1
    2ca6:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    2ca8:	60b2      	str	r2, [r6, #8]
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2caa:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    2cae:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
    2cb2:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    2cb6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2cba:	3180      	adds	r1, #128	; 0x80
    2cbc:	4a0b      	ldr	r2, [pc, #44]	; (2cec <gpio_nrfx_config+0xd4>)
    2cbe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}

	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
		     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

	return 0;
    2cc2:	2000      	movs	r0, #0
}
    2cc4:	bc70      	pop	{r4, r5, r6}
    2cc6:	4770      	bx	lr
		pull = NRF_GPIO_PIN_NOPULL;
    2cc8:	2400      	movs	r4, #0
    2cca:	e7de      	b.n	2c8a <gpio_nrfx_config+0x72>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    2ccc:	f412 6f80 	tst.w	r2, #1024	; 0x400
    2cd0:	d0eb      	beq.n	2caa <gpio_nrfx_config+0x92>
			nrf_gpio_port_out_clear(reg, BIT(pin));
    2cd2:	2201      	movs	r2, #1
    2cd4:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    2cd6:	60f2      	str	r2, [r6, #12]
    2cd8:	e7e7      	b.n	2caa <gpio_nrfx_config+0x92>
		return -EINVAL;
    2cda:	f06f 0015 	mvn.w	r0, #21
    2cde:	e7f1      	b.n	2cc4 <gpio_nrfx_config+0xac>
    2ce0:	00f00006 	.word	0x00f00006
    2ce4:	00400002 	.word	0x00400002
    2ce8:	00100006 	.word	0x00100006
    2cec:	50842500 	.word	0x50842500

00002cf0 <cfg_level_pins>:
	 */
	return out;
}

static void cfg_level_pins(const struct device *port)
{
    2cf0:	b4f0      	push	{r4, r5, r6, r7}
	return port->data;
    2cf2:	68c5      	ldr	r5, [r0, #12]
	return port->config;
    2cf4:	6846      	ldr	r6, [r0, #4]
	uint32_t out = data->pin_int_en;
    2cf6:	68e9      	ldr	r1, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    2cf8:	696a      	ldr	r2, [r5, #20]
    2cfa:	69ab      	ldr	r3, [r5, #24]
    2cfc:	4313      	orrs	r3, r2
    2cfe:	ea21 0103 	bic.w	r1, r1, r3
	const struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;
    2d02:	2201      	movs	r2, #1
	uint32_t pin = 0U;
    2d04:	2000      	movs	r0, #0
	uint32_t level_pins = get_level_pins(port);

	/* Configure sense detection on all pins that use it. */
	while (level_pins) {
    2d06:	e011      	b.n	2d2c <cfg_level_pins+0x3c>
		return NRF_GPIO_PIN_SENSE_HIGH;
    2d08:	f04f 0c02 	mov.w	ip, #2
    *p_pin = pin_number & 0x1F;
    2d0c:	f003 031f 	and.w	r3, r3, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    2d10:	4f0f      	ldr	r7, [pc, #60]	; (2d50 <cfg_level_pins+0x60>)
    2d12:	3380      	adds	r3, #128	; 0x80
    2d14:	f857 4023 	ldr.w	r4, [r7, r3, lsl #2]
    2d18:	f424 3440 	bic.w	r4, r4, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    2d1c:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
    2d20:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
		if (level_pins & bit) {
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
			uint32_t sense = sense_for_pin(data, pin);

			nrf_gpio_cfg_sense_set(abs_pin, sense);
			level_pins &= ~bit;
    2d24:	ea21 0102 	bic.w	r1, r1, r2
		}
		++pin;
    2d28:	3001      	adds	r0, #1
		bit <<= 1;
    2d2a:	0052      	lsls	r2, r2, #1
	while (level_pins) {
    2d2c:	b171      	cbz	r1, 2d4c <cfg_level_pins+0x5c>
		if (level_pins & bit) {
    2d2e:	420a      	tst	r2, r1
    2d30:	d0fa      	beq.n	2d28 <cfg_level_pins+0x38>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2d32:	7a34      	ldrb	r4, [r6, #8]
    2d34:	f000 031f 	and.w	r3, r0, #31
    2d38:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    2d3c:	692c      	ldr	r4, [r5, #16]
    2d3e:	40c4      	lsrs	r4, r0
    2d40:	f014 0f01 	tst.w	r4, #1
    2d44:	d1e0      	bne.n	2d08 <cfg_level_pins+0x18>
	return NRF_GPIO_PIN_SENSE_LOW;
    2d46:	f04f 0c03 	mov.w	ip, #3
    2d4a:	e7df      	b.n	2d0c <cfg_level_pins+0x1c>
	}
}
    2d4c:	bcf0      	pop	{r4, r5, r6, r7}
    2d4e:	4770      	bx	lr
    2d50:	50842500 	.word	0x50842500

00002d54 <check_level_trigger_pins>:
 * @param port Pointer to GPIO port device.
 *
 * @return Bitmask where 1 marks pin as trigger source.
 */
static uint32_t check_level_trigger_pins(const struct device *port)
{
    2d54:	b470      	push	{r4, r5, r6}
	return port->data;
    2d56:	68c3      	ldr	r3, [r0, #12]
	return port->config;
    2d58:	6840      	ldr	r0, [r0, #4]
	uint32_t out = data->pin_int_en;
    2d5a:	68da      	ldr	r2, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    2d5c:	6959      	ldr	r1, [r3, #20]
    2d5e:	699c      	ldr	r4, [r3, #24]
    2d60:	4321      	orrs	r1, r4
    2d62:	ea22 0201 	bic.w	r2, r2, r1
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t level_pins = get_level_pins(port);
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    2d66:	6841      	ldr	r1, [r0, #4]
    return p_reg->IN;
    2d68:	6909      	ldr	r1, [r1, #16]

	/* Extract which pins have logic level same as interrupt trigger level.
	 */
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    2d6a:	6918      	ldr	r0, [r3, #16]
    2d6c:	4048      	eors	r0, r1

	/* Discard pins that aren't configured for level. */
	uint32_t out = pin_states & level_pins;
    2d6e:	ea22 0000 	bic.w	r0, r2, r0
	/* Disable sense detection on all pins that use it, whether
	 * they appear to have triggered or not.  This ensures
	 * nobody's requesting DETECT.
	 */
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;
    2d72:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    2d74:	2400      	movs	r4, #0

	while (level_pins) {
    2d76:	e001      	b.n	2d7c <check_level_trigger_pins+0x28>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);

			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
			level_pins &= ~bit;
		}
		++pin;
    2d78:	3401      	adds	r4, #1
		bit <<= 1;
    2d7a:	005b      	lsls	r3, r3, #1
	while (level_pins) {
    2d7c:	b172      	cbz	r2, 2d9c <check_level_trigger_pins+0x48>
		if (level_pins & bit) {
    2d7e:	421a      	tst	r2, r3
    2d80:	d0fa      	beq.n	2d78 <check_level_trigger_pins+0x24>
    *p_pin = pin_number & 0x1F;
    2d82:	f004 011f 	and.w	r1, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    2d86:	4e06      	ldr	r6, [pc, #24]	; (2da0 <check_level_trigger_pins+0x4c>)
    2d88:	3180      	adds	r1, #128	; 0x80
    2d8a:	f856 5021 	ldr.w	r5, [r6, r1, lsl #2]
    2d8e:	f425 3540 	bic.w	r5, r5, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    2d92:	f846 5021 	str.w	r5, [r6, r1, lsl #2]
			level_pins &= ~bit;
    2d96:	ea22 0203 	bic.w	r2, r2, r3
    2d9a:	e7ed      	b.n	2d78 <check_level_trigger_pins+0x24>
	}

	return out;
}
    2d9c:	bc70      	pop	{r4, r5, r6}
    2d9e:	4770      	bx	lr
    2da0:	50842500 	.word	0x50842500

00002da4 <gpiote_event_handler>:
#ifdef CONFIG_GPIO_NRF_P1
DEVICE_DECLARE(gpio_nrfx_p1);
#endif

static void gpiote_event_handler(void)
{
    2da4:	b570      	push	{r4, r5, r6, lr}
    2da6:	b082      	sub	sp, #8
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    2da8:	2300      	movs	r3, #0
    2daa:	9301      	str	r3, [sp, #4]
}

NRF_STATIC_INLINE bool nrf_gpiote_event_check(NRF_GPIOTE_Type const * p_reg,
                                              nrf_gpiote_event_t      event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2dac:	4b2d      	ldr	r3, [pc, #180]	; (2e64 <gpiote_event_handler+0xc0>)
    2dae:	681c      	ldr	r4, [r3, #0]
	bool port_event = nrf_gpiote_event_check(NRF_GPIOTE,
						 NRF_GPIOTE_EVENT_PORT);

	if (port_event) {
    2db0:	b90c      	cbnz	r4, 2db6 <gpiote_event_handler+0x12>
{
    2db2:	2100      	movs	r1, #0
    2db4:	e009      	b.n	2dca <gpiote_event_handler+0x26>
#ifdef CONFIG_GPIO_NRF_P0
		fired_triggers[0] =
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
    2db6:	482c      	ldr	r0, [pc, #176]	; (2e68 <gpiote_event_handler+0xc4>)
    2db8:	f7ff ffcc 	bl	2d54 <check_level_trigger_pins>
		fired_triggers[0] =
    2dbc:	9001      	str	r0, [sp, #4]
}

NRF_STATIC_INLINE void nrf_gpiote_event_clear(NRF_GPIOTE_Type * p_reg, nrf_gpiote_event_t event)
{
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2dbe:	4b29      	ldr	r3, [pc, #164]	; (2e64 <gpiote_event_handler+0xc0>)
    2dc0:	2200      	movs	r2, #0
    2dc2:	601a      	str	r2, [r3, #0]
    2dc4:	681b      	ldr	r3, [r3, #0]
    2dc6:	e7f4      	b.n	2db2 <gpiote_event_handler+0xe>
		 */
		nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
	}

	/* Handle interrupt from GPIOTE channels. */
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2dc8:	3101      	adds	r1, #1
    2dca:	2907      	cmp	r1, #7
    2dcc:	d826      	bhi.n	2e1c <gpiote_event_handler+0x78>
		nrf_gpiote_event_t evt =
    2dce:	f101 0340 	add.w	r3, r1, #64	; 0x40
    2dd2:	009b      	lsls	r3, r3, #2
    2dd4:	b29a      	uxth	r2, r3
			offsetof(NRF_GPIOTE_Type, EVENTS_IN[i]);

		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    2dd6:	2301      	movs	r3, #1
    2dd8:	408b      	lsls	r3, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    2dda:	4824      	ldr	r0, [pc, #144]	; (2e6c <gpiote_event_handler+0xc8>)
    2ddc:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
    2de0:	4203      	tst	r3, r0
    2de2:	d0f1      	beq.n	2dc8 <gpiote_event_handler+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2de4:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    2de8:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    2dec:	681b      	ldr	r3, [r3, #0]
    2dee:	2b00      	cmp	r3, #0
    2df0:	d0ea      	beq.n	2dc8 <gpiote_event_handler+0x24>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2df2:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    2df6:	481d      	ldr	r0, [pc, #116]	; (2e6c <gpiote_event_handler+0xc8>)
    2df8:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    2dfc:	f3c0 2004 	ubfx	r0, r0, #8, #5
		    nrf_gpiote_event_check(NRF_GPIOTE, evt)) {
			uint32_t abs_pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, i);
			/* Divide absolute pin number to port and pin parts. */
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    2e00:	2301      	movs	r3, #1
    2e02:	fa03 f000 	lsl.w	r0, r3, r0
    2e06:	9b01      	ldr	r3, [sp, #4]
    2e08:	4303      	orrs	r3, r0
    2e0a:	9301      	str	r3, [sp, #4]
    return ((uint32_t)p_reg + event);
    2e0c:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    2e10:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2e14:	2200      	movs	r2, #0
    2e16:	601a      	str	r2, [r3, #0]
    2e18:	681b      	ldr	r3, [r3, #0]
    2e1a:	e7d5      	b.n	2dc8 <gpiote_event_handler+0x24>
			nrf_gpiote_event_clear(NRF_GPIOTE, evt);
		}
	}

#ifdef CONFIG_GPIO_NRF_P0
	if (fired_triggers[0]) {
    2e1c:	9e01      	ldr	r6, [sp, #4]
    2e1e:	b916      	cbnz	r6, 2e26 <gpiote_event_handler+0x82>
	if (fired_triggers[1]) {
		fire_callbacks(DEVICE_GET(gpio_nrfx_p1), fired_triggers[1]);
	}
#endif

	if (port_event) {
    2e20:	b9dc      	cbnz	r4, 2e5a <gpiote_event_handler+0xb6>
#endif
#ifdef CONFIG_GPIO_NRF_P1
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
#endif
	}
}
    2e22:	b002      	add	sp, #8
    2e24:	bd70      	pop	{r4, r5, r6, pc}
    2e26:	4b12      	ldr	r3, [pc, #72]	; (2e70 <gpiote_event_handler+0xcc>)
    2e28:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2e2a:	b119      	cbz	r1, 2e34 <gpiote_event_handler+0x90>
    2e2c:	460d      	mov	r5, r1
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    2e2e:	b149      	cbz	r1, 2e44 <gpiote_event_handler+0xa0>
	return node->next;
    2e30:	680d      	ldr	r5, [r1, #0]
    2e32:	e007      	b.n	2e44 <gpiote_event_handler+0xa0>
    2e34:	460d      	mov	r5, r1
    2e36:	e005      	b.n	2e44 <gpiote_event_handler+0xa0>
    2e38:	b16d      	cbz	r5, 2e56 <gpiote_event_handler+0xb2>
    2e3a:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    2e3c:	b105      	cbz	r5, 2e40 <gpiote_event_handler+0x9c>
	return node->next;
    2e3e:	682b      	ldr	r3, [r5, #0]
    2e40:	4629      	mov	r1, r5
    2e42:	461d      	mov	r5, r3
    2e44:	2900      	cmp	r1, #0
    2e46:	d0eb      	beq.n	2e20 <gpiote_event_handler+0x7c>
		if (cb->pin_mask & pins) {
    2e48:	688a      	ldr	r2, [r1, #8]
    2e4a:	4032      	ands	r2, r6
    2e4c:	d0f4      	beq.n	2e38 <gpiote_event_handler+0x94>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2e4e:	684b      	ldr	r3, [r1, #4]
    2e50:	4805      	ldr	r0, [pc, #20]	; (2e68 <gpiote_event_handler+0xc4>)
    2e52:	4798      	blx	r3
    2e54:	e7f0      	b.n	2e38 <gpiote_event_handler+0x94>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2e56:	462b      	mov	r3, r5
    2e58:	e7f2      	b.n	2e40 <gpiote_event_handler+0x9c>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
    2e5a:	4803      	ldr	r0, [pc, #12]	; (2e68 <gpiote_event_handler+0xc4>)
    2e5c:	f7ff ff48 	bl	2cf0 <cfg_level_pins>
}
    2e60:	e7df      	b.n	2e22 <gpiote_event_handler+0x7e>
    2e62:	bf00      	nop
    2e64:	5000d17c 	.word	0x5000d17c
    2e68:	200000c0 	.word	0x200000c0
    2e6c:	5000d000 	.word	0x5000d000
    2e70:	2000277c 	.word	0x2000277c

00002e74 <gpiote_pin_cleanup>:
{
    2e74:	b430      	push	{r4, r5}
    return p_reg->INTENSET & mask;
    2e76:	4b17      	ldr	r3, [pc, #92]	; (2ed4 <gpiote_pin_cleanup+0x60>)
    2e78:	f8d3 5304 	ldr.w	r5, [r3, #772]	; 0x304
    2e7c:	b2ed      	uxtb	r5, r5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2e7e:	2300      	movs	r3, #0
    2e80:	e000      	b.n	2e84 <gpiote_pin_cleanup+0x10>
    2e82:	3301      	adds	r3, #1
    2e84:	2b07      	cmp	r3, #7
    2e86:	d822      	bhi.n	2ece <gpiote_pin_cleanup+0x5a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2e88:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    2e8c:	4c11      	ldr	r4, [pc, #68]	; (2ed4 <gpiote_pin_cleanup+0x60>)
    2e8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    2e92:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    2e96:	4291      	cmp	r1, r2
    2e98:	d1f3      	bne.n	2e82 <gpiote_pin_cleanup+0xe>
		    && (intenset & BIT(i))) {
    2e9a:	fa25 f203 	lsr.w	r2, r5, r3
    2e9e:	f012 0f01 	tst.w	r2, #1
    2ea2:	d0ee      	beq.n	2e82 <gpiote_pin_cleanup+0xe>
			(void)atomic_and(mask, ~BIT(i));
    2ea4:	2201      	movs	r2, #1
    2ea6:	409a      	lsls	r2, r3
    2ea8:	43d1      	mvns	r1, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2eaa:	e8d0 4fef 	ldaex	r4, [r0]
    2eae:	400c      	ands	r4, r1
    2eb0:	e8c0 4fe5 	stlex	r5, r4, [r0]
    2eb4:	2d00      	cmp	r5, #0
    2eb6:	d1f8      	bne.n	2eaa <gpiote_pin_cleanup+0x36>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    2eb8:	4906      	ldr	r1, [pc, #24]	; (2ed4 <gpiote_pin_cleanup+0x60>)
    2eba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    2ebe:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    2ec2:	f020 0001 	bic.w	r0, r0, #1
    2ec6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->INTENCLR = mask;
    2eca:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
}
    2ece:	bc30      	pop	{r4, r5}
    2ed0:	4770      	bx	lr
    2ed2:	bf00      	nop
    2ed4:	5000d000 	.word	0x5000d000

00002ed8 <gpiote_channel_alloc>:
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    2ed8:	2300      	movs	r3, #0
    2eda:	2b07      	cmp	r3, #7
    2edc:	d842      	bhi.n	2f64 <gpiote_channel_alloc+0x8c>
{
    2ede:	b470      	push	{r4, r5, r6}
		atomic_val_t prev = atomic_or(mask, BIT(channel));
    2ee0:	2401      	movs	r4, #1
    2ee2:	409c      	lsls	r4, r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2ee4:	e8d0 5fef 	ldaex	r5, [r0]
    2ee8:	ea45 0604 	orr.w	r6, r5, r4
    2eec:	e8c0 6fec 	stlex	ip, r6, [r0]
    2ef0:	f1bc 0f00 	cmp.w	ip, #0
    2ef4:	d1f6      	bne.n	2ee4 <gpiote_channel_alloc+0xc>
		if ((prev & BIT(channel)) == 0) {
    2ef6:	40dd      	lsrs	r5, r3
    2ef8:	f015 0f01 	tst.w	r5, #1
    2efc:	d007      	beq.n	2f0e <gpiote_channel_alloc+0x36>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    2efe:	3301      	adds	r3, #1
    2f00:	b2db      	uxtb	r3, r3
    2f02:	2b07      	cmp	r3, #7
    2f04:	d9ec      	bls.n	2ee0 <gpiote_channel_alloc+0x8>
	return -ENODEV;
    2f06:	f06f 0012 	mvn.w	r0, #18
}
    2f0a:	bc70      	pop	{r4, r5, r6}
    2f0c:	4770      	bx	lr
			nrf_gpiote_event_t evt =
    2f0e:	f103 0040 	add.w	r0, r3, #64	; 0x40
    2f12:	0080      	lsls	r0, r0, #2
    2f14:	b280      	uxth	r0, r0
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2f16:	4d15      	ldr	r5, [pc, #84]	; (2f6c <gpiote_channel_alloc+0x94>)
    2f18:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    2f1c:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
    2f20:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
    2f24:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    2f28:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2f2c:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
    2f30:	0209      	lsls	r1, r1, #8
    2f32:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    2f36:	0412      	lsls	r2, r2, #16
    2f38:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2f3c:	4311      	orrs	r1, r2
    2f3e:	4331      	orrs	r1, r6
    2f40:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
    return ((uint32_t)p_reg + event);
    2f44:	f100 42a0 	add.w	r2, r0, #1342177280	; 0x50000000
    2f48:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2f4c:	2000      	movs	r0, #0
    2f4e:	6010      	str	r0, [r2, #0]
    2f50:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    2f52:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
    2f56:	f042 0201 	orr.w	r2, r2, #1
    2f5a:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    p_reg->INTENSET = mask;
    2f5e:	f8c5 4304 	str.w	r4, [r5, #772]	; 0x304
			return 0;
    2f62:	e7d2      	b.n	2f0a <gpiote_channel_alloc+0x32>
	return -ENODEV;
    2f64:	f06f 0012 	mvn.w	r0, #18
}
    2f68:	4770      	bx	lr
    2f6a:	bf00      	nop
    2f6c:	5000d000 	.word	0x5000d000

00002f70 <gpiote_pin_int_cfg>:
{
    2f70:	b570      	push	{r4, r5, r6, lr}
    2f72:	460d      	mov	r5, r1
	return port->data;
    2f74:	68c6      	ldr	r6, [r0, #12]
	return port->config;
    2f76:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2f78:	7a1b      	ldrb	r3, [r3, #8]
    2f7a:	f001 041f 	and.w	r4, r1, #31
    2f7e:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	gpiote_pin_cleanup(&gpiote_alloc_mask, abs_pin);
    2f82:	4621      	mov	r1, r4
    2f84:	4821      	ldr	r0, [pc, #132]	; (300c <gpiote_pin_int_cfg+0x9c>)
    2f86:	f7ff ff75 	bl	2e74 <gpiote_pin_cleanup>
    *p_pin = pin_number & 0x1F;
    2f8a:	f004 021f 	and.w	r2, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    2f8e:	4920      	ldr	r1, [pc, #128]	; (3010 <gpiote_pin_int_cfg+0xa0>)
    2f90:	f102 0080 	add.w	r0, r2, #128	; 0x80
    2f94:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    2f98:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    2f9c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	if (data->pin_int_en & BIT(pin)) {
    2fa0:	68f3      	ldr	r3, [r6, #12]
    2fa2:	40eb      	lsrs	r3, r5
    2fa4:	f013 0f01 	tst.w	r3, #1
    2fa8:	d02e      	beq.n	3008 <gpiote_pin_int_cfg+0x98>
		if (data->trig_edge & BIT(pin)) {
    2faa:	6973      	ldr	r3, [r6, #20]
    2fac:	40eb      	lsrs	r3, r5
    2fae:	f013 0f01 	tst.w	r3, #1
    2fb2:	d014      	beq.n	2fde <gpiote_pin_int_cfg+0x6e>
			if (data->double_edge & BIT(pin)) {
    2fb4:	69b3      	ldr	r3, [r6, #24]
    2fb6:	40eb      	lsrs	r3, r5
    2fb8:	f013 0f01 	tst.w	r3, #1
    2fbc:	d107      	bne.n	2fce <gpiote_pin_int_cfg+0x5e>
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    2fbe:	6933      	ldr	r3, [r6, #16]
    2fc0:	fa23 f505 	lsr.w	r5, r3, r5
    2fc4:	f015 0f01 	tst.w	r5, #1
    2fc8:	d007      	beq.n	2fda <gpiote_pin_int_cfg+0x6a>
				pol = NRF_GPIOTE_POLARITY_LOTOHI;
    2fca:	2201      	movs	r2, #1
    2fcc:	e000      	b.n	2fd0 <gpiote_pin_int_cfg+0x60>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    2fce:	2203      	movs	r2, #3
			res = gpiote_channel_alloc(&gpiote_alloc_mask,
    2fd0:	4621      	mov	r1, r4
    2fd2:	480e      	ldr	r0, [pc, #56]	; (300c <gpiote_pin_int_cfg+0x9c>)
    2fd4:	f7ff ff80 	bl	2ed8 <gpiote_channel_alloc>
    2fd8:	e017      	b.n	300a <gpiote_pin_int_cfg+0x9a>
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    2fda:	2202      	movs	r2, #2
    2fdc:	e7f8      	b.n	2fd0 <gpiote_pin_int_cfg+0x60>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    2fde:	6933      	ldr	r3, [r6, #16]
    2fe0:	fa23 f505 	lsr.w	r5, r3, r5
    2fe4:	f015 0f01 	tst.w	r5, #1
    2fe8:	d10c      	bne.n	3004 <gpiote_pin_int_cfg+0x94>
	return NRF_GPIO_PIN_SENSE_LOW;
    2fea:	2003      	movs	r0, #3
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    2fec:	4908      	ldr	r1, [pc, #32]	; (3010 <gpiote_pin_int_cfg+0xa0>)
    2fee:	3280      	adds	r2, #128	; 0x80
    2ff0:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    2ff4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    2ff8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    2ffc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	int res = 0;
    3000:	2000      	movs	r0, #0
    3002:	e002      	b.n	300a <gpiote_pin_int_cfg+0x9a>
		return NRF_GPIO_PIN_SENSE_HIGH;
    3004:	2002      	movs	r0, #2
    3006:	e7f1      	b.n	2fec <gpiote_pin_int_cfg+0x7c>
	int res = 0;
    3008:	2000      	movs	r0, #0
}
    300a:	bd70      	pop	{r4, r5, r6, pc}
    300c:	20002798 	.word	0x20002798
    3010:	50842500 	.word	0x50842500

00003014 <gpio_nrfx_pin_interrupt_configure>:
{
    3014:	b570      	push	{r4, r5, r6, lr}
	return port->data;
    3016:	68c4      	ldr	r4, [r0, #12]
	return port->config;
    3018:	6845      	ldr	r5, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    301a:	7a2e      	ldrb	r6, [r5, #8]
    301c:	f001 051f 	and.w	r5, r1, #31
    3020:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
	if ((mode == GPIO_INT_MODE_EDGE) &&
    3024:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    3028:	d025      	beq.n	3076 <gpio_nrfx_pin_interrupt_configure+0x62>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    302a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    302e:	d02e      	beq.n	308e <gpio_nrfx_pin_interrupt_configure+0x7a>
    3030:	68e5      	ldr	r5, [r4, #12]
    3032:	2601      	movs	r6, #1
    3034:	408e      	lsls	r6, r1
    3036:	4335      	orrs	r5, r6
    3038:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    303a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    303e:	d02c      	beq.n	309a <gpio_nrfx_pin_interrupt_configure+0x86>
    3040:	6962      	ldr	r2, [r4, #20]
    3042:	2501      	movs	r5, #1
    3044:	408d      	lsls	r5, r1
    3046:	ea22 0205 	bic.w	r2, r2, r5
    304a:	6162      	str	r2, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    304c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    3050:	d028      	beq.n	30a4 <gpio_nrfx_pin_interrupt_configure+0x90>
    3052:	69a2      	ldr	r2, [r4, #24]
    3054:	2501      	movs	r5, #1
    3056:	408d      	lsls	r5, r1
    3058:	ea22 0205 	bic.w	r2, r2, r5
    305c:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    305e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    3062:	d024      	beq.n	30ae <gpio_nrfx_pin_interrupt_configure+0x9a>
    3064:	6923      	ldr	r3, [r4, #16]
    3066:	2201      	movs	r2, #1
    3068:	408a      	lsls	r2, r1
    306a:	ea23 0302 	bic.w	r3, r3, r2
    306e:	6123      	str	r3, [r4, #16]
	return gpiote_pin_int_cfg(port, pin);
    3070:	f7ff ff7e 	bl	2f70 <gpiote_pin_int_cfg>
}
    3074:	bd70      	pop	{r4, r5, r6, pc}
    *p_pin = pin_number & 0x1F;
    3076:	f005 051f 	and.w	r5, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    307a:	3580      	adds	r5, #128	; 0x80
    307c:	4e0e      	ldr	r6, [pc, #56]	; (30b8 <gpio_nrfx_pin_interrupt_configure+0xa4>)
    307e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    3082:	f015 0f01 	tst.w	r5, #1
    3086:	d0d0      	beq.n	302a <gpio_nrfx_pin_interrupt_configure+0x16>
		return -ENOTSUP;
    3088:	f06f 0022 	mvn.w	r0, #34	; 0x22
    308c:	e7f2      	b.n	3074 <gpio_nrfx_pin_interrupt_configure+0x60>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    308e:	68e5      	ldr	r5, [r4, #12]
    3090:	2601      	movs	r6, #1
    3092:	408e      	lsls	r6, r1
    3094:	ea25 0506 	bic.w	r5, r5, r6
    3098:	e7ce      	b.n	3038 <gpio_nrfx_pin_interrupt_configure+0x24>
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    309a:	6962      	ldr	r2, [r4, #20]
    309c:	2501      	movs	r5, #1
    309e:	408d      	lsls	r5, r1
    30a0:	432a      	orrs	r2, r5
    30a2:	e7d2      	b.n	304a <gpio_nrfx_pin_interrupt_configure+0x36>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    30a4:	69a2      	ldr	r2, [r4, #24]
    30a6:	2501      	movs	r5, #1
    30a8:	408d      	lsls	r5, r1
    30aa:	432a      	orrs	r2, r5
    30ac:	e7d6      	b.n	305c <gpio_nrfx_pin_interrupt_configure+0x48>
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    30ae:	6923      	ldr	r3, [r4, #16]
    30b0:	2201      	movs	r2, #1
    30b2:	408a      	lsls	r2, r1
    30b4:	4313      	orrs	r3, r2
    30b6:	e7da      	b.n	306e <gpio_nrfx_pin_interrupt_configure+0x5a>
    30b8:	50842500 	.word	0x50842500

000030bc <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    30bc:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    30be:	4b0b      	ldr	r3, [pc, #44]	; (30ec <gpio_nrfx_init+0x30>)
    30c0:	781b      	ldrb	r3, [r3, #0]
    30c2:	b10b      	cbz	r3, 30c8 <gpio_nrfx_init+0xc>
		irq_enable(DT_IRQN(GPIOTE_NODE));
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    30c4:	2000      	movs	r0, #0
    30c6:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
    30c8:	4b08      	ldr	r3, [pc, #32]	; (30ec <gpio_nrfx_init+0x30>)
    30ca:	2201      	movs	r2, #1
    30cc:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    30ce:	2200      	movs	r2, #0
    30d0:	2105      	movs	r1, #5
    30d2:	200d      	movs	r0, #13
    30d4:	f7ff fa48 	bl	2568 <z_arm_irq_priority_set>
		irq_enable(DT_IRQN(GPIOTE_NODE));
    30d8:	200d      	movs	r0, #13
    30da:	f7ff fa27 	bl	252c <arch_irq_enable>
    30de:	4b04      	ldr	r3, [pc, #16]	; (30f0 <gpio_nrfx_init+0x34>)
    30e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    30e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    30e8:	e7ec      	b.n	30c4 <gpio_nrfx_init+0x8>
    30ea:	bf00      	nop
    30ec:	20002830 	.word	0x20002830
    30f0:	5000d000 	.word	0x5000d000

000030f4 <nvmc_wait_ready>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    30f4:	4b03      	ldr	r3, [pc, #12]	; (3104 <nvmc_wait_ready+0x10>)
    30f6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
#endif /* CONFIG_SOC_FLASH_NRF_UICR */
}

static void nvmc_wait_ready(void)
{
	while (!nrfx_nvmc_write_done_check()) {
    30fa:	f013 0f01 	tst.w	r3, #1
    30fe:	d0f9      	beq.n	30f4 <nvmc_wait_ready>
	}
}
    3100:	4770      	bx	lr
    3102:	bf00      	nop
    3104:	50039000 	.word	0x50039000

00003108 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    3108:	4b02      	ldr	r3, [pc, #8]	; (3114 <flash_nrf_pages_layout+0xc>)
    310a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    310c:	2301      	movs	r3, #1
    310e:	6013      	str	r3, [r2, #0]
}
    3110:	4770      	bx	lr
    3112:	bf00      	nop
    3114:	2000279c 	.word	0x2000279c

00003118 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    3118:	4800      	ldr	r0, [pc, #0]	; (311c <flash_nrf_get_parameters+0x4>)
    311a:	4770      	bx	lr
    311c:	00009338 	.word	0x00009338

00003120 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    3120:	b510      	push	{r4, lr}
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    3122:	f003 fdda 	bl	6cda <nrfx_nvmc_flash_page_count_get>
    3126:	4c03      	ldr	r4, [pc, #12]	; (3134 <nrf_flash_init+0x14>)
    3128:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    312a:	f003 fdd2 	bl	6cd2 <nrfx_nvmc_flash_page_size_get>
    312e:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    3130:	2000      	movs	r0, #0
    3132:	bd10      	pop	{r4, pc}
    3134:	2000279c 	.word	0x2000279c

00003138 <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
    3138:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
    313a:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    313c:	f647 2312 	movw	r3, #31250	; 0x7a12
    3140:	4299      	cmp	r1, r3
    3142:	d06d      	beq.n	3220 <baudrate_set+0xe8>
    3144:	d910      	bls.n	3168 <baudrate_set+0x30>
    3146:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    314a:	d078      	beq.n	323e <baudrate_set+0x106>
    314c:	d940      	bls.n	31d0 <baudrate_set+0x98>
    314e:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    3152:	d07d      	beq.n	3250 <baudrate_set+0x118>
    3154:	d858      	bhi.n	3208 <baudrate_set+0xd0>
    3156:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    315a:	d07c      	beq.n	3256 <baudrate_set+0x11e>
    315c:	4b42      	ldr	r3, [pc, #264]	; (3268 <baudrate_set+0x130>)
    315e:	4299      	cmp	r1, r3
    3160:	d14f      	bne.n	3202 <baudrate_set+0xca>
		break;
	case 230400:
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
		break;
	case 250000:
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3162:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3166:	e057      	b.n	3218 <baudrate_set+0xe0>
	switch (baudrate) {
    3168:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    316c:	d05b      	beq.n	3226 <baudrate_set+0xee>
    316e:	d818      	bhi.n	31a2 <baudrate_set+0x6a>
    3170:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    3174:	d059      	beq.n	322a <baudrate_set+0xf2>
    3176:	d908      	bls.n	318a <baudrate_set+0x52>
    3178:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    317c:	d058      	beq.n	3230 <baudrate_set+0xf8>
    317e:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    3182:	d10b      	bne.n	319c <baudrate_set+0x64>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3184:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3188:	e046      	b.n	3218 <baudrate_set+0xe0>
	switch (baudrate) {
    318a:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    318e:	d102      	bne.n	3196 <baudrate_set+0x5e>
		nrf_baudrate = 0x00014000;
    3190:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3194:	e040      	b.n	3218 <baudrate_set+0xe0>
		break;
	case 1000000:
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
		break;
	default:
		return -EINVAL;
    3196:	f06f 0015 	mvn.w	r0, #21
    319a:	4770      	bx	lr
    319c:	f06f 0015 	mvn.w	r0, #21
    31a0:	4770      	bx	lr
	switch (baudrate) {
    31a2:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    31a6:	d046      	beq.n	3236 <baudrate_set+0xfe>
    31a8:	d907      	bls.n	31ba <baudrate_set+0x82>
    31aa:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    31ae:	d044      	beq.n	323a <baudrate_set+0x102>
    31b0:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    31b4:	d109      	bne.n	31ca <baudrate_set+0x92>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    31b6:	4b2d      	ldr	r3, [pc, #180]	; (326c <baudrate_set+0x134>)
    31b8:	e02e      	b.n	3218 <baudrate_set+0xe0>
	switch (baudrate) {
    31ba:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    31be:	d101      	bne.n	31c4 <baudrate_set+0x8c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    31c0:	4b2b      	ldr	r3, [pc, #172]	; (3270 <baudrate_set+0x138>)
    31c2:	e029      	b.n	3218 <baudrate_set+0xe0>
		return -EINVAL;
    31c4:	f06f 0015 	mvn.w	r0, #21
    31c8:	4770      	bx	lr
    31ca:	f06f 0015 	mvn.w	r0, #21
    31ce:	4770      	bx	lr
	switch (baudrate) {
    31d0:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    31d4:	4299      	cmp	r1, r3
    31d6:	d035      	beq.n	3244 <baudrate_set+0x10c>
    31d8:	d907      	bls.n	31ea <baudrate_set+0xb2>
    31da:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    31de:	d034      	beq.n	324a <baudrate_set+0x112>
    31e0:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    31e4:	d10a      	bne.n	31fc <baudrate_set+0xc4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    31e6:	4b23      	ldr	r3, [pc, #140]	; (3274 <baudrate_set+0x13c>)
    31e8:	e016      	b.n	3218 <baudrate_set+0xe0>
	switch (baudrate) {
    31ea:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    31ee:	d102      	bne.n	31f6 <baudrate_set+0xbe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    31f0:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    31f4:	e010      	b.n	3218 <baudrate_set+0xe0>
		return -EINVAL;
    31f6:	f06f 0015 	mvn.w	r0, #21
    31fa:	4770      	bx	lr
    31fc:	f06f 0015 	mvn.w	r0, #21
    3200:	4770      	bx	lr
    3202:	f06f 0015 	mvn.w	r0, #21
    3206:	4770      	bx	lr
	switch (baudrate) {
    3208:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    320c:	d026      	beq.n	325c <baudrate_set+0x124>
    320e:	4b1a      	ldr	r3, [pc, #104]	; (3278 <baudrate_set+0x140>)
    3210:	4299      	cmp	r1, r3
    3212:	d126      	bne.n	3262 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3214:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3218:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    321c:	2000      	movs	r0, #0
    321e:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3220:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3224:	e7f8      	b.n	3218 <baudrate_set+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3226:	4b15      	ldr	r3, [pc, #84]	; (327c <baudrate_set+0x144>)
    3228:	e7f6      	b.n	3218 <baudrate_set+0xe0>
		nrf_baudrate = 0x00027000;
    322a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    322e:	e7f3      	b.n	3218 <baudrate_set+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3230:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3234:	e7f0      	b.n	3218 <baudrate_set+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3236:	4b12      	ldr	r3, [pc, #72]	; (3280 <baudrate_set+0x148>)
    3238:	e7ee      	b.n	3218 <baudrate_set+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    323a:	4b12      	ldr	r3, [pc, #72]	; (3284 <baudrate_set+0x14c>)
    323c:	e7ec      	b.n	3218 <baudrate_set+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    323e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3242:	e7e9      	b.n	3218 <baudrate_set+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3244:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3248:	e7e6      	b.n	3218 <baudrate_set+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    324a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    324e:	e7e3      	b.n	3218 <baudrate_set+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3250:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3254:	e7e0      	b.n	3218 <baudrate_set+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3256:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    325a:	e7dd      	b.n	3218 <baudrate_set+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    325c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3260:	e7da      	b.n	3218 <baudrate_set+0xe0>
		return -EINVAL;
    3262:	f06f 0015 	mvn.w	r0, #21
}
    3266:	4770      	bx	lr
    3268:	0003d090 	.word	0x0003d090
    326c:	0075c000 	.word	0x0075c000
    3270:	00275000 	.word	0x00275000
    3274:	013a9000 	.word	0x013a9000
    3278:	000f4240 	.word	0x000f4240
    327c:	0013b000 	.word	0x0013b000
    3280:	003af000 	.word	0x003af000
    3284:	004ea000 	.word	0x004ea000

00003288 <uarte_instance_init>:
};

static int uarte_instance_init(const struct device *dev,
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
    3288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    328a:	460c      	mov	r4, r1
    328c:	4617      	mov	r7, r2
	return dev->config;
    328e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    3290:	681d      	ldr	r5, [r3, #0]
	return dev->data;
    3292:	68c6      	ldr	r6, [r0, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    3294:	2300      	movs	r3, #0
    3296:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    329a:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(config->pseltxd, 1);
    329c:	680b      	ldr	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
    329e:	f003 021f 	and.w	r2, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    32a2:	2301      	movs	r3, #1
    32a4:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    32a6:	4a31      	ldr	r2, [pc, #196]	; (336c <uarte_instance_init+0xe4>)
    32a8:	6093      	str	r3, [r2, #8]
	nrf_gpio_cfg_output(config->pseltxd);
    32aa:	680b      	ldr	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
    32ac:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    32b0:	3380      	adds	r3, #128	; 0x80
    32b2:	2103      	movs	r1, #3
    32b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    32b8:	6863      	ldr	r3, [r4, #4]
    32ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    32be:	d005      	beq.n	32cc <uarte_instance_init+0x44>
    *p_pin = pin_number & 0x1F;
    32c0:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    32c4:	3380      	adds	r3, #128	; 0x80
    32c6:	2100      	movs	r1, #0
    32c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
    32cc:	6822      	ldr	r2, [r4, #0]
    32ce:	6863      	ldr	r3, [r4, #4]
    p_reg->PSEL.TXD = pseltxd;
    32d0:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    32d4:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    32d8:	68a3      	ldr	r3, [r4, #8]
    32da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    32de:	d006      	beq.n	32ee <uarte_instance_init+0x66>
    *p_pin = pin_number & 0x1F;
    32e0:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    32e4:	3380      	adds	r3, #128	; 0x80
    32e6:	4a21      	ldr	r2, [pc, #132]	; (336c <uarte_instance_init+0xe4>)
    32e8:	2100      	movs	r1, #0
    32ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    32ee:	68e3      	ldr	r3, [r4, #12]
    32f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    32f4:	d00d      	beq.n	3312 <uarte_instance_init+0x8a>
    *p_pin = pin_number & 0x1F;
    32f6:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    32fa:	2201      	movs	r2, #1
    32fc:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
    3300:	4a1a      	ldr	r2, [pc, #104]	; (336c <uarte_instance_init+0xe4>)
    3302:	6093      	str	r3, [r2, #8]
		nrf_gpio_pin_write(config->pselrts, 1);
		nrf_gpio_cfg_output(config->pselrts);
    3304:	68e3      	ldr	r3, [r4, #12]
    *p_pin = pin_number & 0x1F;
    3306:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    330a:	3380      	adds	r3, #128	; 0x80
    330c:	2103      	movs	r1, #3
    330e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
    3312:	68e2      	ldr	r2, [r4, #12]
    3314:	68a3      	ldr	r3, [r4, #8]
    p_reg->PSEL.RTS = pselrts;
    3316:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    331a:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	return dev->data;
    331e:	68c1      	ldr	r1, [r0, #12]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    3320:	3104      	adds	r1, #4
    3322:	f003 fb38 	bl	6996 <uarte_nrfx_configure>
	if (err) {
    3326:	4603      	mov	r3, r0
    3328:	b9f0      	cbnz	r0, 3368 <uarte_instance_init+0xe0>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    332a:	2208      	movs	r2, #8
    332c:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    3330:	6862      	ldr	r2, [r4, #4]
    3332:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    3336:	d00c      	beq.n	3352 <uarte_instance_init+0xca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3338:	2200      	movs	r2, #0
    333a:	f8c5 2110 	str.w	r2, [r5, #272]	; 0x110
    333e:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    3342:	f106 0214 	add.w	r2, r6, #20

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3346:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    334a:	2201      	movs	r2, #1
    334c:	f8c5 2538 	str.w	r2, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3350:	602a      	str	r2, [r5, #0]
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
	}

#ifdef UARTE_INTERRUPT_DRIVEN
	if (interrupts_active) {
    3352:	b14f      	cbz	r7, 3368 <uarte_instance_init+0xe0>
		/* Set ENDTX event by requesting fake (zero-length) transfer.
		 * Pointer to RAM variable (data->tx_buffer) is set because
		 * otherwise such operation may result in HardFault or RAM
		 * corruption.
		 */
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
    3354:	68f2      	ldr	r2, [r6, #12]
    3356:	6892      	ldr	r2, [r2, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3358:	f8c5 2544 	str.w	r2, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    335c:	2200      	movs	r2, #0
    335e:	f8c5 2548 	str.w	r2, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3362:	2201      	movs	r2, #1
    3364:	60aa      	str	r2, [r5, #8]
    3366:	60ea      	str	r2, [r5, #12]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
    3368:	4618      	mov	r0, r3
    336a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    336c:	50842500 	.word	0x50842500

00003370 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    3370:	b530      	push	{r4, r5, lr}
    3372:	b085      	sub	sp, #20
    3374:	4605      	mov	r5, r0
    3376:	4b0a      	ldr	r3, [pc, #40]	; (33a0 <uarte_0_init+0x30>)
    3378:	466c      	mov	r4, sp
    337a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    337c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    3380:	2200      	movs	r2, #0
    3382:	2101      	movs	r1, #1
    3384:	2008      	movs	r0, #8
    3386:	f7ff f8ef 	bl	2568 <z_arm_irq_priority_set>
    338a:	2008      	movs	r0, #8
    338c:	f7ff f8ce 	bl	252c <arch_irq_enable>
    3390:	2201      	movs	r2, #1
    3392:	4621      	mov	r1, r4
    3394:	4628      	mov	r0, r5
    3396:	f7ff ff77 	bl	3288 <uarte_instance_init>
    339a:	b005      	add	sp, #20
    339c:	bd30      	pop	{r4, r5, pc}
    339e:	bf00      	nop
    33a0:	00008ae0 	.word	0x00008ae0

000033a4 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    33a4:	b530      	push	{r4, r5, lr}
    33a6:	b085      	sub	sp, #20
    33a8:	4605      	mov	r5, r0
    33aa:	466c      	mov	r4, sp
    33ac:	4b09      	ldr	r3, [pc, #36]	; (33d4 <uarte_1_init+0x30>)
    33ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    33b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    33b4:	2200      	movs	r2, #0
    33b6:	2101      	movs	r1, #1
    33b8:	2009      	movs	r0, #9
    33ba:	f7ff f8d5 	bl	2568 <z_arm_irq_priority_set>
    33be:	2009      	movs	r0, #9
    33c0:	f7ff f8b4 	bl	252c <arch_irq_enable>
    33c4:	2201      	movs	r2, #1
    33c6:	4621      	mov	r1, r4
    33c8:	4628      	mov	r0, r5
    33ca:	f7ff ff5d 	bl	3288 <uarte_instance_init>
    33ce:	b005      	add	sp, #20
    33d0:	bd30      	pop	{r4, r5, pc}
    33d2:	bf00      	nop
    33d4:	00008af0 	.word	0x00008af0

000033d8 <fprotect_area>:
#define SPU_BLOCK_SIZE CONFIG_FPROTECT_BLOCK_SIZE
#endif

int fprotect_area(uint32_t start, size_t length)
{
	if (start % SPU_BLOCK_SIZE != 0 ||
    33d8:	f3c0 030e 	ubfx	r3, r0, #0, #15
    33dc:	b9bb      	cbnz	r3, 340e <fprotect_area+0x36>
		length % SPU_BLOCK_SIZE != 0) {
    33de:	f3c1 020e 	ubfx	r2, r1, #0, #15
	if (start % SPU_BLOCK_SIZE != 0 ||
    33e2:	b9ba      	cbnz	r2, 3414 <fprotect_area+0x3c>
		return -EINVAL;
	}

	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    33e4:	ebb2 3fd1 	cmp.w	r2, r1, lsr #15
    33e8:	d217      	bcs.n	341a <fprotect_area+0x42>
{
    33ea:	b430      	push	{r4, r5}
		nrf_spu_flashregion_set(NRF_SPU_S,
    33ec:	eb02 33d0 	add.w	r3, r2, r0, lsr #15
    33f0:	b2db      	uxtb	r3, r3
                                               uint32_t       permissions,
                                               bool           lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHREGION[region_id].PERM & SPU_FLASHREGION_PERM_LOCK_Msk));

    p_reg->FLASHREGION[region_id].PERM = permissions         |
    33f2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    33f6:	4c0a      	ldr	r4, [pc, #40]	; (3420 <fprotect_area+0x48>)
    33f8:	f240 1515 	movw	r5, #277	; 0x115
    33fc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    3400:	3201      	adds	r2, #1
    3402:	ebb2 3fd1 	cmp.w	r2, r1, lsr #15
    3406:	d3f1      	bcc.n	33ec <fprotect_area+0x14>
				NRF_SPU_MEM_PERM_EXECUTE |
				NRF_SPU_MEM_PERM_READ,
				true);
	}

	return 0;
    3408:	2000      	movs	r0, #0
}
    340a:	bc30      	pop	{r4, r5}
    340c:	4770      	bx	lr
		return -EINVAL;
    340e:	f06f 0015 	mvn.w	r0, #21
    3412:	4770      	bx	lr
    3414:	f06f 0015 	mvn.w	r0, #21
    3418:	4770      	bx	lr
	return 0;
    341a:	2000      	movs	r0, #0
}
    341c:	4770      	bx	lr
    341e:	bf00      	nop
    3420:	50003000 	.word	0x50003000

00003424 <nrf91_errata_6>:
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    3424:	4b03      	ldr	r3, [pc, #12]	; (3434 <nrf91_errata_6+0x10>)
    3426:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    3428:	2b09      	cmp	r3, #9
    342a:	d001      	beq.n	3430 <nrf91_errata_6+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    342c:	2000      	movs	r0, #0
    342e:	4770      	bx	lr
                        return true;
    3430:	2001      	movs	r0, #1
    #endif
}
    3432:	4770      	bx	lr
    3434:	00ff0130 	.word	0x00ff0130

00003438 <nrf91_errata_14>:
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    3438:	4b06      	ldr	r3, [pc, #24]	; (3454 <nrf91_errata_14+0x1c>)
    343a:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    343c:	4a06      	ldr	r2, [pc, #24]	; (3458 <nrf91_errata_14+0x20>)
    343e:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    3440:	2b09      	cmp	r3, #9
    3442:	d001      	beq.n	3448 <nrf91_errata_14+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    3444:	2000      	movs	r0, #0
    3446:	4770      	bx	lr
                switch(var2)
    3448:	2a01      	cmp	r2, #1
    344a:	d001      	beq.n	3450 <nrf91_errata_14+0x18>
                        return false;
    344c:	2000      	movs	r0, #0
    344e:	4770      	bx	lr
                        return true;
    3450:	2001      	movs	r0, #1
    #endif
}
    3452:	4770      	bx	lr
    3454:	00ff0130 	.word	0x00ff0130
    3458:	00ff0134 	.word	0x00ff0134

0000345c <nrf91_errata_15>:
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    345c:	4b06      	ldr	r3, [pc, #24]	; (3478 <nrf91_errata_15+0x1c>)
    345e:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    3460:	4a06      	ldr	r2, [pc, #24]	; (347c <nrf91_errata_15+0x20>)
    3462:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    3464:	2b09      	cmp	r3, #9
    3466:	d001      	beq.n	346c <nrf91_errata_15+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    3468:	2000      	movs	r0, #0
    346a:	4770      	bx	lr
                switch(var2)
    346c:	2a01      	cmp	r2, #1
    346e:	d001      	beq.n	3474 <nrf91_errata_15+0x18>
                        return true;
    3470:	2001      	movs	r0, #1
    3472:	4770      	bx	lr
                        return false;
    3474:	2000      	movs	r0, #0
    #endif
}
    3476:	4770      	bx	lr
    3478:	00ff0130 	.word	0x00ff0130
    347c:	00ff0134 	.word	0x00ff0134

00003480 <nrf91_errata_20>:
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    3480:	4b06      	ldr	r3, [pc, #24]	; (349c <nrf91_errata_20+0x1c>)
    3482:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    3484:	4a06      	ldr	r2, [pc, #24]	; (34a0 <nrf91_errata_20+0x20>)
    3486:	6812      	ldr	r2, [r2, #0]
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    3488:	2b09      	cmp	r3, #9
    348a:	d001      	beq.n	3490 <nrf91_errata_20+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    348c:	2000      	movs	r0, #0
    348e:	4770      	bx	lr
                switch(var2)
    3490:	2a01      	cmp	r2, #1
    3492:	d001      	beq.n	3498 <nrf91_errata_20+0x18>
                        return false;
    3494:	2000      	movs	r0, #0
    3496:	4770      	bx	lr
                        return true;
    3498:	2001      	movs	r0, #1
    #endif
}
    349a:	4770      	bx	lr
    349c:	00ff0130 	.word	0x00ff0130
    34a0:	00ff0134 	.word	0x00ff0134

000034a4 <nrf91_errata_31>:
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    34a4:	4b03      	ldr	r3, [pc, #12]	; (34b4 <nrf91_errata_31+0x10>)
    34a6:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    34a8:	2b09      	cmp	r3, #9
    34aa:	d001      	beq.n	34b0 <nrf91_errata_31+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    34ac:	2000      	movs	r0, #0
    34ae:	4770      	bx	lr
                        return true;
    34b0:	2001      	movs	r0, #1
    #endif
}
    34b2:	4770      	bx	lr
    34b4:	00ff0130 	.word	0x00ff0130

000034b8 <uicr_HFXOCNT_erased>:

#if !defined(NRF_TRUSTZONE_NONSECURE)

    bool uicr_HFXOCNT_erased()
    {
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    34b8:	4b04      	ldr	r3, [pc, #16]	; (34cc <uicr_HFXOCNT_erased+0x14>)
    34ba:	6a1b      	ldr	r3, [r3, #32]
    34bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    34c0:	d001      	beq.n	34c6 <uicr_HFXOCNT_erased+0xe>
            return true;
        }
        return false;
    34c2:	2000      	movs	r0, #0
    34c4:	4770      	bx	lr
            return true;
    34c6:	2001      	movs	r0, #1
    }
    34c8:	4770      	bx	lr
    34ca:	bf00      	nop
    34cc:	00ff8000 	.word	0x00ff8000

000034d0 <uicr_HFXOSRC_erased>:
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    34d0:	4b04      	ldr	r3, [pc, #16]	; (34e4 <uicr_HFXOSRC_erased+0x14>)
    34d2:	69db      	ldr	r3, [r3, #28]
    34d4:	f013 0f01 	tst.w	r3, #1
    34d8:	d101      	bne.n	34de <uicr_HFXOSRC_erased+0xe>
            return true;
        }
        return false;
    34da:	2000      	movs	r0, #0
    34dc:	4770      	bx	lr
            return true;
    34de:	2001      	movs	r0, #1
    }
    34e0:	4770      	bx	lr
    34e2:	bf00      	nop
    34e4:	00ff8000 	.word	0x00ff8000

000034e8 <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK;
    34e8:	4b01      	ldr	r3, [pc, #4]	; (34f0 <SystemCoreClockUpdate+0x8>)
    34ea:	4a02      	ldr	r2, [pc, #8]	; (34f4 <SystemCoreClockUpdate+0xc>)
    34ec:	601a      	str	r2, [r3, #0]
}
    34ee:	4770      	bx	lr
    34f0:	20000064 	.word	0x20000064
    34f4:	03d09000 	.word	0x03d09000

000034f8 <SystemInit>:
{
    34f8:	b508      	push	{r3, lr}
        if (nrf91_errata_6()){
    34fa:	f7ff ff93 	bl	3424 <nrf91_errata_6>
    34fe:	b130      	cbz	r0, 350e <SystemInit+0x16>
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    3500:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3504:	2200      	movs	r2, #0
    3506:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    350a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        if (nrf91_errata_14()){
    350e:	f7ff ff93 	bl	3438 <nrf91_errata_14>
    3512:	b130      	cbz	r0, 3522 <SystemInit+0x2a>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    3514:	2301      	movs	r3, #1
    3516:	4a42      	ldr	r2, [pc, #264]	; (3620 <SystemInit+0x128>)
    3518:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    351a:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    351e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
        if (nrf91_errata_15()){
    3522:	f7ff ff9b 	bl	345c <nrf91_errata_15>
    3526:	b118      	cbz	r0, 3530 <SystemInit+0x38>
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    3528:	4b3e      	ldr	r3, [pc, #248]	; (3624 <SystemInit+0x12c>)
    352a:	2201      	movs	r2, #1
    352c:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
        if (nrf91_errata_20()){
    3530:	f7ff ffa6 	bl	3480 <nrf91_errata_20>
    3534:	b110      	cbz	r0, 353c <SystemInit+0x44>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    3536:	4b3c      	ldr	r3, [pc, #240]	; (3628 <SystemInit+0x130>)
    3538:	220e      	movs	r2, #14
    353a:	601a      	str	r2, [r3, #0]
        if (nrf91_errata_31()){
    353c:	f7ff ffb2 	bl	34a4 <nrf91_errata_31>
    3540:	b128      	cbz	r0, 354e <SystemInit+0x56>
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    3542:	4b3a      	ldr	r3, [pc, #232]	; (362c <SystemInit+0x134>)
    3544:	2200      	movs	r2, #0
    3546:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    3548:	3304      	adds	r3, #4
    354a:	2201      	movs	r2, #1
    354c:	601a      	str	r2, [r3, #0]
{
    354e:	2200      	movs	r2, #0
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    3550:	2aff      	cmp	r2, #255	; 0xff
    3552:	d815      	bhi.n	3580 <SystemInit+0x88>
    3554:	f102 0360 	add.w	r3, r2, #96	; 0x60
    3558:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    355c:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    3560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3564:	d00c      	beq.n	3580 <SystemInit+0x88>
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    3566:	f102 0360 	add.w	r3, r2, #96	; 0x60
    356a:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    356e:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
    3572:	00db      	lsls	r3, r3, #3
    3574:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    3578:	685b      	ldr	r3, [r3, #4]
    357a:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    357c:	3201      	adds	r2, #1
    357e:	e7e7      	b.n	3550 <SystemInit+0x58>
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    3580:	f7ff ffa6 	bl	34d0 <uicr_HFXOSRC_erased>
    3584:	b960      	cbnz	r0, 35a0 <SystemInit+0xa8>
    3586:	f7ff ff97 	bl	34b8 <uicr_HFXOCNT_erased>
    358a:	b948      	cbnz	r0, 35a0 <SystemInit+0xa8>
        SCB->NSACR |= (3UL << 10);
    358c:	4a28      	ldr	r2, [pc, #160]	; (3630 <SystemInit+0x138>)
    358e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    3592:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    3596:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    SystemCoreClockUpdate();
    359a:	f7ff ffa5 	bl	34e8 <SystemCoreClockUpdate>
}
    359e:	bd08      	pop	{r3, pc}
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    35a0:	4b24      	ldr	r3, [pc, #144]	; (3634 <SystemInit+0x13c>)
    35a2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    35a6:	2b01      	cmp	r3, #1
    35a8:	d1fa      	bne.n	35a0 <SystemInit+0xa8>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    35aa:	4b22      	ldr	r3, [pc, #136]	; (3634 <SystemInit+0x13c>)
    35ac:	2201      	movs	r2, #1
    35ae:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    35b2:	4b20      	ldr	r3, [pc, #128]	; (3634 <SystemInit+0x13c>)
    35b4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    35b8:	2b01      	cmp	r3, #1
    35ba:	d1fa      	bne.n	35b2 <SystemInit+0xba>
          if (uicr_HFXOSRC_erased()){
    35bc:	f7ff ff88 	bl	34d0 <uicr_HFXOSRC_erased>
    35c0:	b148      	cbz	r0, 35d6 <SystemInit+0xde>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
    35c2:	4a1d      	ldr	r2, [pc, #116]	; (3638 <SystemInit+0x140>)
    35c4:	69d3      	ldr	r3, [r2, #28]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    35c6:	f023 0301 	bic.w	r3, r3, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
    35ca:	61d3      	str	r3, [r2, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    35cc:	4b19      	ldr	r3, [pc, #100]	; (3634 <SystemInit+0x13c>)
    35ce:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    35d2:	2b01      	cmp	r3, #1
    35d4:	d1fa      	bne.n	35cc <SystemInit+0xd4>
          if (uicr_HFXOCNT_erased()){
    35d6:	f7ff ff6f 	bl	34b8 <uicr_HFXOCNT_erased>
    35da:	b158      	cbz	r0, 35f4 <SystemInit+0xfc>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
    35dc:	4a16      	ldr	r2, [pc, #88]	; (3638 <SystemInit+0x140>)
    35de:	6a13      	ldr	r3, [r2, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    35e0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    35e4:	f043 0320 	orr.w	r3, r3, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
    35e8:	6213      	str	r3, [r2, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    35ea:	4b12      	ldr	r3, [pc, #72]	; (3634 <SystemInit+0x13c>)
    35ec:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    35f0:	2b01      	cmp	r3, #1
    35f2:	d1fa      	bne.n	35ea <SystemInit+0xf2>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    35f4:	4b0f      	ldr	r3, [pc, #60]	; (3634 <SystemInit+0x13c>)
    35f6:	2200      	movs	r2, #0
    35f8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    35fc:	4b0d      	ldr	r3, [pc, #52]	; (3634 <SystemInit+0x13c>)
    35fe:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    3602:	2b01      	cmp	r3, #1
    3604:	d1fa      	bne.n	35fc <SystemInit+0x104>
  __ASM volatile ("dsb 0xF":::"memory");
    3606:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    360a:	4909      	ldr	r1, [pc, #36]	; (3630 <SystemInit+0x138>)
    360c:	68ca      	ldr	r2, [r1, #12]
    360e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3612:	4b0a      	ldr	r3, [pc, #40]	; (363c <SystemInit+0x144>)
    3614:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3616:	60cb      	str	r3, [r1, #12]
    3618:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    361c:	bf00      	nop
    361e:	e7fd      	b.n	361c <SystemInit+0x124>
    3620:	50004a38 	.word	0x50004a38
    3624:	50004000 	.word	0x50004000
    3628:	5003aee4 	.word	0x5003aee4
    362c:	5000470c 	.word	0x5000470c
    3630:	e000ed00 	.word	0xe000ed00
    3634:	50039000 	.word	0x50039000
    3638:	00ff8000 	.word	0x00ff8000
    363c:	05fa0004 	.word	0x05fa0004

00003640 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3640:	4b05      	ldr	r3, [pc, #20]	; (3658 <nrfx_clock_init+0x18>)
    3642:	791b      	ldrb	r3, [r3, #4]
    3644:	b92b      	cbnz	r3, 3652 <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    3646:	4b04      	ldr	r3, [pc, #16]	; (3658 <nrfx_clock_init+0x18>)
    3648:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    364a:	2201      	movs	r2, #1
    364c:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    364e:	4803      	ldr	r0, [pc, #12]	; (365c <nrfx_clock_init+0x1c>)
    3650:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3652:	4803      	ldr	r0, [pc, #12]	; (3660 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3654:	4770      	bx	lr
    3656:	bf00      	nop
    3658:	200027e4 	.word	0x200027e4
    365c:	0bad0000 	.word	0x0bad0000
    3660:	0bad000c 	.word	0x0bad000c

00003664 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    3664:	b110      	cbz	r0, 366c <nrfx_clock_start+0x8>
    3666:	2801      	cmp	r0, #1
    3668:	d025      	beq.n	36b6 <nrfx_clock_start+0x52>
    366a:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    366c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    3670:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    3674:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3678:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    367c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    3680:	d111      	bne.n	36a6 <nrfx_clock_start+0x42>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3682:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3686:	2201      	movs	r2, #1
    3688:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    368c:	4b0f      	ldr	r3, [pc, #60]	; (36cc <nrfx_clock_start+0x68>)
    368e:	2200      	movs	r2, #0
    3690:	601a      	str	r2, [r3, #0]
    3692:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3694:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3698:	2202      	movs	r2, #2
    369a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    369e:	3308      	adds	r3, #8
    36a0:	2201      	movs	r2, #1
    36a2:	601a      	str	r2, [r3, #0]
    36a4:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    36a6:	2b02      	cmp	r3, #2
    36a8:	d1eb      	bne.n	3682 <nrfx_clock_start+0x1e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    36aa:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    36ae:	2202      	movs	r2, #2
    36b0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    36b4:	e7ea      	b.n	368c <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    36b6:	4b06      	ldr	r3, [pc, #24]	; (36d0 <nrfx_clock_start+0x6c>)
    36b8:	2200      	movs	r2, #0
    36ba:	601a      	str	r2, [r3, #0]
    36bc:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    36be:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    36c2:	2201      	movs	r2, #1
    36c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    36c8:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    36ca:	4770      	bx	lr
    36cc:	50005104 	.word	0x50005104
    36d0:	50005100 	.word	0x50005100

000036d4 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    36d4:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    36d6:	4604      	mov	r4, r0
    36d8:	b110      	cbz	r0, 36e0 <nrfx_clock_stop+0xc>
    36da:	2801      	cmp	r0, #1
    36dc:	d012      	beq.n	3704 <nrfx_clock_stop+0x30>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    36de:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
    36e0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    36e4:	2202      	movs	r2, #2
    36e6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    36ea:	f503 7382 	add.w	r3, r3, #260	; 0x104
    36ee:	2200      	movs	r2, #0
    36f0:	601a      	str	r2, [r3, #0]
    36f2:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    36f4:	4b33      	ldr	r3, [pc, #204]	; (37c4 <nrfx_clock_stop+0xf0>)
    36f6:	2201      	movs	r2, #1
    36f8:	601a      	str	r2, [r3, #0]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    36fa:	2c01      	cmp	r4, #1
    36fc:	d00f      	beq.n	371e <nrfx_clock_stop+0x4a>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    36fe:	f242 7510 	movw	r5, #10000	; 0x2710
    3702:	e04b      	b.n	379c <nrfx_clock_stop+0xc8>
    p_reg->INTENCLR = mask;
    3704:	2301      	movs	r3, #1
    3706:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    370a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    370e:	f502 7280 	add.w	r2, r2, #256	; 0x100
    3712:	2100      	movs	r1, #0
    3714:	6011      	str	r1, [r2, #0]
    3716:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3718:	4a2b      	ldr	r2, [pc, #172]	; (37c8 <nrfx_clock_stop+0xf4>)
    371a:	6013      	str	r3, [r2, #0]
    371c:	e7ed      	b.n	36fa <nrfx_clock_stop+0x26>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    371e:	4625      	mov	r5, r4
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3720:	f242 7610 	movw	r6, #10000	; 0x2710
    3724:	e014      	b.n	3750 <nrfx_clock_stop+0x7c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3726:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    372a:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
    372e:	f005 0503 	and.w	r5, r5, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3732:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    3736:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    373a:	d11c      	bne.n	3776 <nrfx_clock_stop+0xa2>
    return false;
    373c:	2300      	movs	r3, #0
    373e:	2b00      	cmp	r3, #0
    3740:	d0cd      	beq.n	36de <nrfx_clock_stop+0xa>
    3742:	2d01      	cmp	r5, #1
    3744:	d1cb      	bne.n	36de <nrfx_clock_stop+0xa>
    3746:	2001      	movs	r0, #1
    3748:	f003 fa8a 	bl	6c60 <nrfx_busy_wait>
    374c:	3e01      	subs	r6, #1
    374e:	d0c6      	beq.n	36de <nrfx_clock_stop+0xa>
    switch (domain)
    3750:	2c00      	cmp	r4, #0
    3752:	d0e8      	beq.n	3726 <nrfx_clock_stop+0x52>
    3754:	2c01      	cmp	r4, #1
    3756:	d001      	beq.n	375c <nrfx_clock_stop+0x88>
            return false;
    3758:	2300      	movs	r3, #0
    375a:	e7f0      	b.n	373e <nrfx_clock_stop+0x6a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    375c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3760:	f8d3 540c 	ldr.w	r5, [r3, #1036]	; 0x40c
    3764:	f005 0501 	and.w	r5, r5, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3768:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    376c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3770:	d103      	bne.n	377a <nrfx_clock_stop+0xa6>
    return false;
    3772:	2300      	movs	r3, #0
    3774:	e7e3      	b.n	373e <nrfx_clock_stop+0x6a>
                return true;
    3776:	2301      	movs	r3, #1
    3778:	e7e1      	b.n	373e <nrfx_clock_stop+0x6a>
                return true;
    377a:	2301      	movs	r3, #1
    377c:	e7df      	b.n	373e <nrfx_clock_stop+0x6a>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    377e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3782:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    3786:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    378a:	d116      	bne.n	37ba <nrfx_clock_stop+0xe6>
    return false;
    378c:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    378e:	2b00      	cmp	r3, #0
    3790:	d0a5      	beq.n	36de <nrfx_clock_stop+0xa>
    3792:	2001      	movs	r0, #1
    3794:	f003 fa64 	bl	6c60 <nrfx_busy_wait>
    3798:	3d01      	subs	r5, #1
    379a:	d0a0      	beq.n	36de <nrfx_clock_stop+0xa>
    switch (domain)
    379c:	2c00      	cmp	r4, #0
    379e:	d0ee      	beq.n	377e <nrfx_clock_stop+0xaa>
    37a0:	2c01      	cmp	r4, #1
    37a2:	d001      	beq.n	37a8 <nrfx_clock_stop+0xd4>
            return false;
    37a4:	2300      	movs	r3, #0
    37a6:	e7f2      	b.n	378e <nrfx_clock_stop+0xba>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    37a8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    37ac:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    37b0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    37b4:	d103      	bne.n	37be <nrfx_clock_stop+0xea>
    return false;
    37b6:	2300      	movs	r3, #0
    37b8:	e7e9      	b.n	378e <nrfx_clock_stop+0xba>
                return true;
    37ba:	2301      	movs	r3, #1
    37bc:	e7e7      	b.n	378e <nrfx_clock_stop+0xba>
                return true;
    37be:	2301      	movs	r3, #1
    37c0:	e7e5      	b.n	378e <nrfx_clock_stop+0xba>
    37c2:	bf00      	nop
    37c4:	5000500c 	.word	0x5000500c
    37c8:	50005004 	.word	0x50005004

000037cc <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    37cc:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    37ce:	4b19      	ldr	r3, [pc, #100]	; (3834 <nrfx_power_clock_irq_handler+0x68>)
    37d0:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    37d2:	b15b      	cbz	r3, 37ec <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    37d4:	4b17      	ldr	r3, [pc, #92]	; (3834 <nrfx_power_clock_irq_handler+0x68>)
    37d6:	2000      	movs	r0, #0
    37d8:	6018      	str	r0, [r3, #0]
    37da:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    37dc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    37e0:	2201      	movs	r2, #1
    37e2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    37e6:	4b14      	ldr	r3, [pc, #80]	; (3838 <nrfx_power_clock_irq_handler+0x6c>)
    37e8:	681b      	ldr	r3, [r3, #0]
    37ea:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    37ec:	4b13      	ldr	r3, [pc, #76]	; (383c <nrfx_power_clock_irq_handler+0x70>)
    37ee:	681b      	ldr	r3, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    37f0:	b1b3      	cbz	r3, 3820 <nrfx_power_clock_irq_handler+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    37f2:	4b12      	ldr	r3, [pc, #72]	; (383c <nrfx_power_clock_irq_handler+0x70>)
    37f4:	2200      	movs	r2, #0
    37f6:	601a      	str	r2, [r3, #0]
    37f8:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    37fa:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    37fe:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    3802:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3806:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    380a:	2b01      	cmp	r3, #1
    380c:	d009      	beq.n	3822 <nrfx_power_clock_irq_handler+0x56>
    p_reg->INTENCLR = mask;
    380e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3812:	2202      	movs	r2, #2
    3814:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3818:	4b07      	ldr	r3, [pc, #28]	; (3838 <nrfx_power_clock_irq_handler+0x6c>)
    381a:	681b      	ldr	r3, [r3, #0]
    381c:	2001      	movs	r0, #1
    381e:	4798      	blx	r3
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3820:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    3822:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3826:	2202      	movs	r2, #2
    3828:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    382c:	3308      	adds	r3, #8
    382e:	2201      	movs	r2, #1
    3830:	601a      	str	r2, [r3, #0]
    3832:	e7f5      	b.n	3820 <nrfx_power_clock_irq_handler+0x54>
    3834:	50005100 	.word	0x50005100
    3838:	200027e4 	.word	0x200027e4
    383c:	50005104 	.word	0x50005104

00003840 <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    3840:	4b03      	ldr	r3, [pc, #12]	; (3850 <nvmc_readonly_mode_set+0x10>)
    3842:	2200      	movs	r2, #0
    3844:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    3848:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    384c:	4770      	bx	lr
    384e:	bf00      	nop
    3850:	50039000 	.word	0x50039000

00003854 <nvmc_write_mode_set>:
    p_reg->CONFIGNS = (uint32_t)mode;
    3854:	4b03      	ldr	r3, [pc, #12]	; (3864 <nvmc_write_mode_set+0x10>)
    3856:	2201      	movs	r2, #1
    3858:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    385c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_WRITE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_WRITE);
#endif
}
    3860:	4770      	bx	lr
    3862:	bf00      	nop
    3864:	50039000 	.word	0x50039000

00003868 <nvmc_erase_mode_set>:
    p_reg->CONFIGNS = (uint32_t)mode;
    3868:	4b03      	ldr	r3, [pc, #12]	; (3878 <nvmc_erase_mode_set+0x10>)
    386a:	2202      	movs	r2, #2
    386c:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    3870:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_ERASE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_ERASE);
#endif
}
    3874:	4770      	bx	lr
    3876:	bf00      	nop
    3878:	50039000 	.word	0x50039000

0000387c <nvmc_word_write>:
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
    387c:	4b04      	ldr	r3, [pc, #16]	; (3890 <nvmc_word_write+0x14>)
    387e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    3882:	f013 0f01 	tst.w	r3, #1
    3886:	d0f9      	beq.n	387c <nvmc_word_write>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
    3888:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    388a:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    388e:	4770      	bx	lr
    3890:	50039000 	.word	0x50039000

00003894 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    3894:	b510      	push	{r4, lr}
    3896:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    3898:	f003 f9ff 	bl	6c9a <is_page_aligned_check>
    389c:	b908      	cbnz	r0, 38a2 <nrfx_nvmc_page_erase+0xe>
    {
        return NRFX_ERROR_INVALID_ADDR;
    389e:	4808      	ldr	r0, [pc, #32]	; (38c0 <nrfx_nvmc_page_erase+0x2c>)
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
}
    38a0:	bd10      	pop	{r4, pc}
    nvmc_erase_mode_set();
    38a2:	f7ff ffe1 	bl	3868 <nvmc_erase_mode_set>
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    38a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    38aa:	6023      	str	r3, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    38ac:	4b05      	ldr	r3, [pc, #20]	; (38c4 <nrfx_nvmc_page_erase+0x30>)
    38ae:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    38b2:	f013 0f01 	tst.w	r3, #1
    38b6:	d0f9      	beq.n	38ac <nrfx_nvmc_page_erase+0x18>
    nvmc_readonly_mode_set();
    38b8:	f7ff ffc2 	bl	3840 <nvmc_readonly_mode_set>
    return NRFX_SUCCESS;
    38bc:	4802      	ldr	r0, [pc, #8]	; (38c8 <nrfx_nvmc_page_erase+0x34>)
    38be:	e7ef      	b.n	38a0 <nrfx_nvmc_page_erase+0xc>
    38c0:	0bad000a 	.word	0x0bad000a
    38c4:	50039000 	.word	0x50039000
    38c8:	0bad0000 	.word	0x0bad0000

000038cc <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
    38cc:	6802      	ldr	r2, [r0, #0]
    38ce:	4b12      	ldr	r3, [pc, #72]	; (3918 <verify_header+0x4c>)
    38d0:	429a      	cmp	r2, r3
    38d2:	d115      	bne.n	3900 <verify_header+0x34>
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->magic2 != MAGIC2 )
    38d4:	69c2      	ldr	r2, [r0, #28]
    38d6:	f1a3 2310 	sub.w	r3, r3, #268439552	; 0x10001000
    38da:	f1a3 13ef 	sub.w	r3, r3, #15663343	; 0xef00ef
    38de:	429a      	cmp	r2, r3
    38e0:	d110      	bne.n	3904 <verify_header+0x38>
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->alloc > 1 )
    38e2:	6883      	ldr	r3, [r0, #8]
    38e4:	2b01      	cmp	r3, #1
    38e6:	d80f      	bhi.n	3908 <verify_header+0x3c>
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
    38e8:	68c3      	ldr	r3, [r0, #12]
    38ea:	b113      	cbz	r3, 38f2 <verify_header+0x26>
    38ec:	6902      	ldr	r2, [r0, #16]
    38ee:	4293      	cmp	r3, r2
    38f0:	d00c      	beq.n	390c <verify_header+0x40>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
    38f2:	6943      	ldr	r3, [r0, #20]
    38f4:	b163      	cbz	r3, 3910 <verify_header+0x44>
    38f6:	6982      	ldr	r2, [r0, #24]
    38f8:	4293      	cmp	r3, r2
    38fa:	d00b      	beq.n	3914 <verify_header+0x48>
        mbedtls_fprintf( stderr, "FATAL: prev_free == next_free\n" );
#endif
        return( 1 );
    }

    return( 0 );
    38fc:	2000      	movs	r0, #0
    38fe:	4770      	bx	lr
        return( 1 );
    3900:	2001      	movs	r0, #1
    3902:	4770      	bx	lr
        return( 1 );
    3904:	2001      	movs	r0, #1
    3906:	4770      	bx	lr
        return( 1 );
    3908:	2001      	movs	r0, #1
    390a:	4770      	bx	lr
        return( 1 );
    390c:	2001      	movs	r0, #1
    390e:	4770      	bx	lr
    return( 0 );
    3910:	2000      	movs	r0, #0
    3912:	4770      	bx	lr
        return( 1 );
    3914:	2001      	movs	r0, #1
}
    3916:	4770      	bx	lr
    3918:	ff00aa55 	.word	0xff00aa55

0000391c <verify_chain>:

static int verify_chain( void )
{
    391c:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
    391e:	4b11      	ldr	r3, [pc, #68]	; (3964 <verify_chain+0x48>)
    3920:	689d      	ldr	r5, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
    3922:	b1c5      	cbz	r5, 3956 <verify_chain+0x3a>
    3924:	4628      	mov	r0, r5
    3926:	f7ff ffd1 	bl	38cc <verify_header>
    392a:	4606      	mov	r6, r0
    392c:	b9a8      	cbnz	r0, 395a <verify_chain+0x3e>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
    392e:	68eb      	ldr	r3, [r5, #12]
    3930:	b113      	cbz	r3, 3938 <verify_chain+0x1c>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: verification failed: "
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    3932:	2601      	movs	r6, #1
        prv = cur;
        cur = cur->next;
    }

    return( 0 );
}
    3934:	4630      	mov	r0, r6
    3936:	bd70      	pop	{r4, r5, r6, pc}
    cur = heap.first->next;
    3938:	692c      	ldr	r4, [r5, #16]
    while( cur != NULL )
    393a:	e001      	b.n	3940 <verify_chain+0x24>
        prv = cur;
    393c:	4625      	mov	r5, r4
        cur = cur->next;
    393e:	6924      	ldr	r4, [r4, #16]
    while( cur != NULL )
    3940:	2c00      	cmp	r4, #0
    3942:	d0f7      	beq.n	3934 <verify_chain+0x18>
        if( verify_header( cur ) != 0 )
    3944:	4620      	mov	r0, r4
    3946:	f7ff ffc1 	bl	38cc <verify_header>
    394a:	b940      	cbnz	r0, 395e <verify_chain+0x42>
        if( cur->prev != prv )
    394c:	68e3      	ldr	r3, [r4, #12]
    394e:	42ab      	cmp	r3, r5
    3950:	d0f4      	beq.n	393c <verify_chain+0x20>
            return( 1 );
    3952:	2601      	movs	r6, #1
    3954:	e7ee      	b.n	3934 <verify_chain+0x18>
        return( 1 );
    3956:	2601      	movs	r6, #1
    3958:	e7ec      	b.n	3934 <verify_chain+0x18>
    395a:	2601      	movs	r6, #1
    395c:	e7ea      	b.n	3934 <verify_chain+0x18>
            return( 1 );
    395e:	2601      	movs	r6, #1
    3960:	e7e8      	b.n	3934 <verify_chain+0x18>
    3962:	bf00      	nop
    3964:	200027ec 	.word	0x200027ec

00003968 <buffer_alloc_free>:
static void buffer_alloc_free( void *ptr )
{
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    3968:	2800      	cmp	r0, #0
    396a:	f000 8091 	beq.w	3a90 <buffer_alloc_free+0x128>
{
    396e:	b538      	push	{r3, r4, r5, lr}
    3970:	4604      	mov	r4, r0
    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    3972:	4b48      	ldr	r3, [pc, #288]	; (3a94 <buffer_alloc_free+0x12c>)
    3974:	681b      	ldr	r3, [r3, #0]
    3976:	2b00      	cmp	r3, #0
    3978:	d06d      	beq.n	3a56 <buffer_alloc_free+0xee>
    397a:	4a46      	ldr	r2, [pc, #280]	; (3a94 <buffer_alloc_free+0x12c>)
    397c:	6892      	ldr	r2, [r2, #8]
    397e:	2a00      	cmp	r2, #0
    3980:	d069      	beq.n	3a56 <buffer_alloc_free+0xee>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
    3982:	4283      	cmp	r3, r0
    3984:	d804      	bhi.n	3990 <buffer_alloc_free+0x28>
    3986:	4a43      	ldr	r2, [pc, #268]	; (3a94 <buffer_alloc_free+0x12c>)
    3988:	6852      	ldr	r2, [r2, #4]
    398a:	4413      	add	r3, r2
    398c:	4283      	cmp	r3, r0
    398e:	d803      	bhi.n	3998 <buffer_alloc_free+0x30>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
    3990:	4b41      	ldr	r3, [pc, #260]	; (3a98 <buffer_alloc_free+0x130>)
    3992:	681b      	ldr	r3, [r3, #0]
    3994:	2001      	movs	r0, #1
    3996:	4798      	blx	r3
    }

    p -= sizeof(memory_header);
    3998:	f1a4 0520 	sub.w	r5, r4, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
    399c:	4628      	mov	r0, r5
    399e:	f7ff ff95 	bl	38cc <verify_header>
    39a2:	b118      	cbz	r0, 39ac <buffer_alloc_free+0x44>
        mbedtls_exit( 1 );
    39a4:	4b3c      	ldr	r3, [pc, #240]	; (3a98 <buffer_alloc_free+0x130>)
    39a6:	681b      	ldr	r3, [r3, #0]
    39a8:	2001      	movs	r0, #1
    39aa:	4798      	blx	r3

    if( hdr->alloc != 1 )
    39ac:	f854 3c18 	ldr.w	r3, [r4, #-24]
    39b0:	2b01      	cmp	r3, #1
    39b2:	d003      	beq.n	39bc <buffer_alloc_free+0x54>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() on unallocated "
                                  "data\n" );
#endif
        mbedtls_exit( 1 );
    39b4:	4b38      	ldr	r3, [pc, #224]	; (3a98 <buffer_alloc_free+0x130>)
    39b6:	681b      	ldr	r3, [r3, #0]
    39b8:	2001      	movs	r0, #1
    39ba:	4798      	blx	r3
    }

    hdr->alloc = 0;
    39bc:	2300      	movs	r3, #0
    39be:	f844 3c18 	str.w	r3, [r4, #-24]
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    39c2:	f854 3c14 	ldr.w	r3, [r4, #-20]
    39c6:	b1d3      	cbz	r3, 39fe <buffer_alloc_free+0x96>
    39c8:	689a      	ldr	r2, [r3, #8]
    39ca:	b9ba      	cbnz	r2, 39fc <buffer_alloc_free+0x94>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
    39cc:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    39d0:	6859      	ldr	r1, [r3, #4]
    39d2:	440a      	add	r2, r1
    39d4:	3220      	adds	r2, #32
    39d6:	605a      	str	r2, [r3, #4]
        hdr->prev->next = hdr->next;
    39d8:	f854 3c14 	ldr.w	r3, [r4, #-20]
    39dc:	f854 2c10 	ldr.w	r2, [r4, #-16]
    39e0:	611a      	str	r2, [r3, #16]
        old = hdr;
        hdr = hdr->prev;
    39e2:	f854 4c14 	ldr.w	r4, [r4, #-20]

        if( hdr->next != NULL )
    39e6:	6923      	ldr	r3, [r4, #16]
    39e8:	b103      	cbz	r3, 39ec <buffer_alloc_free+0x84>
            hdr->next->prev = hdr;
    39ea:	60dc      	str	r4, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    39ec:	2220      	movs	r2, #32
    39ee:	2100      	movs	r1, #0
    39f0:	4628      	mov	r0, r5
    39f2:	f002 fe3f 	bl	6674 <memset>
        old = hdr;
    39f6:	462b      	mov	r3, r5
        hdr = hdr->prev;
    39f8:	4625      	mov	r5, r4
    39fa:	e000      	b.n	39fe <buffer_alloc_free+0x96>
    memory_header *hdr, *old = NULL;
    39fc:	2300      	movs	r3, #0
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    39fe:	692c      	ldr	r4, [r5, #16]
    3a00:	b31c      	cbz	r4, 3a4a <buffer_alloc_free+0xe2>
    3a02:	68a2      	ldr	r2, [r4, #8]
    3a04:	bb0a      	cbnz	r2, 3a4a <buffer_alloc_free+0xe2>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->size += sizeof(memory_header) + hdr->next->size;
    3a06:	6863      	ldr	r3, [r4, #4]
    3a08:	686a      	ldr	r2, [r5, #4]
    3a0a:	4413      	add	r3, r2
    3a0c:	3320      	adds	r3, #32
    3a0e:	606b      	str	r3, [r5, #4]
        old = hdr->next;
        hdr->next = hdr->next->next;
    3a10:	6923      	ldr	r3, [r4, #16]
    3a12:	612b      	str	r3, [r5, #16]

        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    3a14:	696b      	ldr	r3, [r5, #20]
    3a16:	b1fb      	cbz	r3, 3a58 <buffer_alloc_free+0xf0>
        {
            if( hdr->prev_free != NULL )
    3a18:	b313      	cbz	r3, 3a60 <buffer_alloc_free+0xf8>
                hdr->prev_free->next_free = hdr->next_free;
    3a1a:	69aa      	ldr	r2, [r5, #24]
    3a1c:	619a      	str	r2, [r3, #24]
            else
                heap.first_free = hdr->next_free;

            if( hdr->next_free != NULL )
    3a1e:	69ab      	ldr	r3, [r5, #24]
    3a20:	b10b      	cbz	r3, 3a26 <buffer_alloc_free+0xbe>
                hdr->next_free->prev_free = hdr->prev_free;
    3a22:	696a      	ldr	r2, [r5, #20]
    3a24:	615a      	str	r2, [r3, #20]
        }

        hdr->prev_free = old->prev_free;
    3a26:	6963      	ldr	r3, [r4, #20]
    3a28:	616b      	str	r3, [r5, #20]
        hdr->next_free = old->next_free;
    3a2a:	69a2      	ldr	r2, [r4, #24]
    3a2c:	61aa      	str	r2, [r5, #24]

        if( hdr->prev_free != NULL )
    3a2e:	b1db      	cbz	r3, 3a68 <buffer_alloc_free+0x100>
            hdr->prev_free->next_free = hdr;
    3a30:	619d      	str	r5, [r3, #24]
        else
            heap.first_free = hdr;

        if( hdr->next_free != NULL )
    3a32:	69ab      	ldr	r3, [r5, #24]
    3a34:	b103      	cbz	r3, 3a38 <buffer_alloc_free+0xd0>
            hdr->next_free->prev_free = hdr;
    3a36:	615d      	str	r5, [r3, #20]

        if( hdr->next != NULL )
    3a38:	692b      	ldr	r3, [r5, #16]
    3a3a:	b103      	cbz	r3, 3a3e <buffer_alloc_free+0xd6>
            hdr->next->prev = hdr;
    3a3c:	60dd      	str	r5, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    3a3e:	2220      	movs	r2, #32
    3a40:	2100      	movs	r1, #0
    3a42:	4620      	mov	r0, r4
    3a44:	f002 fe16 	bl	6674 <memset>
        old = hdr->next;
    3a48:	4623      	mov	r3, r4
    }

    // Prepend to free_list if we have not merged
    // (Does not have to stay in same order as prev / next list)
    //
    if( old == NULL )
    3a4a:	b183      	cbz	r3, 3a6e <buffer_alloc_free+0x106>
        if( heap.first_free != NULL )
            heap.first_free->prev_free = hdr;
        heap.first_free = hdr;
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    3a4c:	4b11      	ldr	r3, [pc, #68]	; (3a94 <buffer_alloc_free+0x12c>)
    3a4e:	691b      	ldr	r3, [r3, #16]
    3a50:	f013 0f02 	tst.w	r3, #2
    3a54:	d113      	bne.n	3a7e <buffer_alloc_free+0x116>
        mbedtls_exit( 1 );
}
    3a56:	bd38      	pop	{r3, r4, r5, pc}
        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    3a58:	69aa      	ldr	r2, [r5, #24]
    3a5a:	2a00      	cmp	r2, #0
    3a5c:	d1dc      	bne.n	3a18 <buffer_alloc_free+0xb0>
    3a5e:	e7e2      	b.n	3a26 <buffer_alloc_free+0xbe>
                heap.first_free = hdr->next_free;
    3a60:	69aa      	ldr	r2, [r5, #24]
    3a62:	4b0c      	ldr	r3, [pc, #48]	; (3a94 <buffer_alloc_free+0x12c>)
    3a64:	60da      	str	r2, [r3, #12]
    3a66:	e7da      	b.n	3a1e <buffer_alloc_free+0xb6>
            heap.first_free = hdr;
    3a68:	4b0a      	ldr	r3, [pc, #40]	; (3a94 <buffer_alloc_free+0x12c>)
    3a6a:	60dd      	str	r5, [r3, #12]
    3a6c:	e7e1      	b.n	3a32 <buffer_alloc_free+0xca>
        hdr->next_free = heap.first_free;
    3a6e:	4b09      	ldr	r3, [pc, #36]	; (3a94 <buffer_alloc_free+0x12c>)
    3a70:	68db      	ldr	r3, [r3, #12]
    3a72:	61ab      	str	r3, [r5, #24]
        if( heap.first_free != NULL )
    3a74:	b103      	cbz	r3, 3a78 <buffer_alloc_free+0x110>
            heap.first_free->prev_free = hdr;
    3a76:	615d      	str	r5, [r3, #20]
        heap.first_free = hdr;
    3a78:	4b06      	ldr	r3, [pc, #24]	; (3a94 <buffer_alloc_free+0x12c>)
    3a7a:	60dd      	str	r5, [r3, #12]
    3a7c:	e7e6      	b.n	3a4c <buffer_alloc_free+0xe4>
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    3a7e:	f7ff ff4d 	bl	391c <verify_chain>
    3a82:	2800      	cmp	r0, #0
    3a84:	d0e7      	beq.n	3a56 <buffer_alloc_free+0xee>
        mbedtls_exit( 1 );
    3a86:	4b04      	ldr	r3, [pc, #16]	; (3a98 <buffer_alloc_free+0x130>)
    3a88:	681b      	ldr	r3, [r3, #0]
    3a8a:	2001      	movs	r0, #1
    3a8c:	4798      	blx	r3
    3a8e:	e7e2      	b.n	3a56 <buffer_alloc_free+0xee>
    3a90:	4770      	bx	lr
    3a92:	bf00      	nop
    3a94:	200027ec 	.word	0x200027ec
    3a98:	2000006c 	.word	0x2000006c

00003a9c <buffer_alloc_calloc>:
{
    3a9c:	b570      	push	{r4, r5, r6, lr}
    memory_header *new, *cur = heap.first_free;
    3a9e:	4b4f      	ldr	r3, [pc, #316]	; (3bdc <buffer_alloc_calloc+0x140>)
    3aa0:	68dc      	ldr	r4, [r3, #12]
    if( heap.buf == NULL || heap.first == NULL )
    3aa2:	681d      	ldr	r5, [r3, #0]
    3aa4:	2d00      	cmp	r5, #0
    3aa6:	d05a      	beq.n	3b5e <buffer_alloc_calloc+0xc2>
    3aa8:	689d      	ldr	r5, [r3, #8]
    3aaa:	2d00      	cmp	r5, #0
    3aac:	d057      	beq.n	3b5e <buffer_alloc_calloc+0xc2>
    original_len = len = n * size;
    3aae:	fb01 f600 	mul.w	r6, r1, r0
    if( n == 0 || size == 0 || len / n != size )
    3ab2:	2800      	cmp	r0, #0
    3ab4:	f000 8088 	beq.w	3bc8 <buffer_alloc_calloc+0x12c>
    3ab8:	2900      	cmp	r1, #0
    3aba:	f000 8087 	beq.w	3bcc <buffer_alloc_calloc+0x130>
    3abe:	fbb6 f0f0 	udiv	r0, r6, r0
    3ac2:	4288      	cmp	r0, r1
    3ac4:	f040 8084 	bne.w	3bd0 <buffer_alloc_calloc+0x134>
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3ac8:	f116 0f04 	cmn.w	r6, #4
    3acc:	f200 8082 	bhi.w	3bd4 <buffer_alloc_calloc+0x138>
    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3ad0:	f016 0f03 	tst.w	r6, #3
    3ad4:	d008      	beq.n	3ae8 <buffer_alloc_calloc+0x4c>
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    3ad6:	f026 0503 	bic.w	r5, r6, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    3ada:	3504      	adds	r5, #4
    while( cur != NULL )
    3adc:	b134      	cbz	r4, 3aec <buffer_alloc_calloc+0x50>
        if( cur->size >= len )
    3ade:	6863      	ldr	r3, [r4, #4]
    3ae0:	42ab      	cmp	r3, r5
    3ae2:	d203      	bcs.n	3aec <buffer_alloc_calloc+0x50>
        cur = cur->next_free;
    3ae4:	69a4      	ldr	r4, [r4, #24]
    3ae6:	e7f9      	b.n	3adc <buffer_alloc_calloc+0x40>
    original_len = len = n * size;
    3ae8:	4635      	mov	r5, r6
    3aea:	e7f7      	b.n	3adc <buffer_alloc_calloc+0x40>
    if( cur == NULL )
    3aec:	2c00      	cmp	r4, #0
    3aee:	d073      	beq.n	3bd8 <buffer_alloc_calloc+0x13c>
    if( cur->alloc != 0 )
    3af0:	68a3      	ldr	r3, [r4, #8]
    3af2:	b11b      	cbz	r3, 3afc <buffer_alloc_calloc+0x60>
        mbedtls_exit( 1 );
    3af4:	4b3a      	ldr	r3, [pc, #232]	; (3be0 <buffer_alloc_calloc+0x144>)
    3af6:	681b      	ldr	r3, [r3, #0]
    3af8:	2001      	movs	r0, #1
    3afa:	4798      	blx	r3
    if( cur->size - len < sizeof(memory_header) +
    3afc:	6862      	ldr	r2, [r4, #4]
    3afe:	1b52      	subs	r2, r2, r5
    3b00:	2a23      	cmp	r2, #35	; 0x23
    3b02:	d92e      	bls.n	3b62 <buffer_alloc_calloc+0xc6>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
    3b04:	f105 0120 	add.w	r1, r5, #32
    3b08:	1863      	adds	r3, r4, r1
    new->size = cur->size - len - sizeof(memory_header);
    3b0a:	3a20      	subs	r2, #32
    3b0c:	605a      	str	r2, [r3, #4]
    new->alloc = 0;
    3b0e:	2200      	movs	r2, #0
    3b10:	609a      	str	r2, [r3, #8]
    new->prev = cur;
    3b12:	60dc      	str	r4, [r3, #12]
    new->next = cur->next;
    3b14:	6922      	ldr	r2, [r4, #16]
    3b16:	611a      	str	r2, [r3, #16]
    new->magic1 = MAGIC1;
    3b18:	4832      	ldr	r0, [pc, #200]	; (3be4 <buffer_alloc_calloc+0x148>)
    3b1a:	5060      	str	r0, [r4, r1]
    new->magic2 = MAGIC2;
    3b1c:	4932      	ldr	r1, [pc, #200]	; (3be8 <buffer_alloc_calloc+0x14c>)
    3b1e:	61d9      	str	r1, [r3, #28]
    if( new->next != NULL )
    3b20:	b102      	cbz	r2, 3b24 <buffer_alloc_calloc+0x88>
        new->next->prev = new;
    3b22:	60d3      	str	r3, [r2, #12]
    new->prev_free = cur->prev_free;
    3b24:	6962      	ldr	r2, [r4, #20]
    3b26:	615a      	str	r2, [r3, #20]
    new->next_free = cur->next_free;
    3b28:	69a1      	ldr	r1, [r4, #24]
    3b2a:	6199      	str	r1, [r3, #24]
    if( new->prev_free != NULL )
    3b2c:	2a00      	cmp	r2, #0
    3b2e:	d03f      	beq.n	3bb0 <buffer_alloc_calloc+0x114>
        new->prev_free->next_free = new;
    3b30:	6193      	str	r3, [r2, #24]
    if( new->next_free != NULL )
    3b32:	699a      	ldr	r2, [r3, #24]
    3b34:	b102      	cbz	r2, 3b38 <buffer_alloc_calloc+0x9c>
        new->next_free->prev_free = new;
    3b36:	6153      	str	r3, [r2, #20]
    cur->alloc = 1;
    3b38:	2201      	movs	r2, #1
    3b3a:	60a2      	str	r2, [r4, #8]
    cur->size = len;
    3b3c:	6065      	str	r5, [r4, #4]
    cur->next = new;
    3b3e:	6123      	str	r3, [r4, #16]
    cur->prev_free = NULL;
    3b40:	2300      	movs	r3, #0
    3b42:	6163      	str	r3, [r4, #20]
    cur->next_free = NULL;
    3b44:	61a3      	str	r3, [r4, #24]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    3b46:	4b25      	ldr	r3, [pc, #148]	; (3bdc <buffer_alloc_calloc+0x140>)
    3b48:	691b      	ldr	r3, [r3, #16]
    3b4a:	f013 0f01 	tst.w	r3, #1
    3b4e:	d132      	bne.n	3bb6 <buffer_alloc_calloc+0x11a>
    ret = (unsigned char *) cur + sizeof( memory_header );
    3b50:	f104 0520 	add.w	r5, r4, #32
    memset( ret, 0, original_len );
    3b54:	4632      	mov	r2, r6
    3b56:	2100      	movs	r1, #0
    3b58:	4628      	mov	r0, r5
    3b5a:	f002 fd8b 	bl	6674 <memset>
}
    3b5e:	4628      	mov	r0, r5
    3b60:	bd70      	pop	{r4, r5, r6, pc}
        cur->alloc = 1;
    3b62:	2301      	movs	r3, #1
    3b64:	60a3      	str	r3, [r4, #8]
        if( cur->prev_free != NULL )
    3b66:	6963      	ldr	r3, [r4, #20]
    3b68:	b1ab      	cbz	r3, 3b96 <buffer_alloc_calloc+0xfa>
            cur->prev_free->next_free = cur->next_free;
    3b6a:	69a2      	ldr	r2, [r4, #24]
    3b6c:	619a      	str	r2, [r3, #24]
        if( cur->next_free != NULL )
    3b6e:	69a3      	ldr	r3, [r4, #24]
    3b70:	b10b      	cbz	r3, 3b76 <buffer_alloc_calloc+0xda>
            cur->next_free->prev_free = cur->prev_free;
    3b72:	6962      	ldr	r2, [r4, #20]
    3b74:	615a      	str	r2, [r3, #20]
        cur->prev_free = NULL;
    3b76:	2300      	movs	r3, #0
    3b78:	6163      	str	r3, [r4, #20]
        cur->next_free = NULL;
    3b7a:	61a3      	str	r3, [r4, #24]
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    3b7c:	4b17      	ldr	r3, [pc, #92]	; (3bdc <buffer_alloc_calloc+0x140>)
    3b7e:	691b      	ldr	r3, [r3, #16]
    3b80:	f013 0f01 	tst.w	r3, #1
    3b84:	d10b      	bne.n	3b9e <buffer_alloc_calloc+0x102>
        ret = (unsigned char *) cur + sizeof( memory_header );
    3b86:	f104 0520 	add.w	r5, r4, #32
        memset( ret, 0, original_len );
    3b8a:	4632      	mov	r2, r6
    3b8c:	2100      	movs	r1, #0
    3b8e:	4628      	mov	r0, r5
    3b90:	f002 fd70 	bl	6674 <memset>
        return( ret );
    3b94:	e7e3      	b.n	3b5e <buffer_alloc_calloc+0xc2>
            heap.first_free = cur->next_free;
    3b96:	69a2      	ldr	r2, [r4, #24]
    3b98:	4b10      	ldr	r3, [pc, #64]	; (3bdc <buffer_alloc_calloc+0x140>)
    3b9a:	60da      	str	r2, [r3, #12]
    3b9c:	e7e7      	b.n	3b6e <buffer_alloc_calloc+0xd2>
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    3b9e:	f7ff febd 	bl	391c <verify_chain>
    3ba2:	2800      	cmp	r0, #0
    3ba4:	d0ef      	beq.n	3b86 <buffer_alloc_calloc+0xea>
            mbedtls_exit( 1 );
    3ba6:	4b0e      	ldr	r3, [pc, #56]	; (3be0 <buffer_alloc_calloc+0x144>)
    3ba8:	681b      	ldr	r3, [r3, #0]
    3baa:	2001      	movs	r0, #1
    3bac:	4798      	blx	r3
    3bae:	e7ea      	b.n	3b86 <buffer_alloc_calloc+0xea>
        heap.first_free = new;
    3bb0:	4a0a      	ldr	r2, [pc, #40]	; (3bdc <buffer_alloc_calloc+0x140>)
    3bb2:	60d3      	str	r3, [r2, #12]
    3bb4:	e7bd      	b.n	3b32 <buffer_alloc_calloc+0x96>
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    3bb6:	f7ff feb1 	bl	391c <verify_chain>
    3bba:	2800      	cmp	r0, #0
    3bbc:	d0c8      	beq.n	3b50 <buffer_alloc_calloc+0xb4>
        mbedtls_exit( 1 );
    3bbe:	4b08      	ldr	r3, [pc, #32]	; (3be0 <buffer_alloc_calloc+0x144>)
    3bc0:	681b      	ldr	r3, [r3, #0]
    3bc2:	2001      	movs	r0, #1
    3bc4:	4798      	blx	r3
    3bc6:	e7c3      	b.n	3b50 <buffer_alloc_calloc+0xb4>
        return( NULL );
    3bc8:	2500      	movs	r5, #0
    3bca:	e7c8      	b.n	3b5e <buffer_alloc_calloc+0xc2>
    3bcc:	2500      	movs	r5, #0
    3bce:	e7c6      	b.n	3b5e <buffer_alloc_calloc+0xc2>
    3bd0:	2500      	movs	r5, #0
    3bd2:	e7c4      	b.n	3b5e <buffer_alloc_calloc+0xc2>
        return( NULL );
    3bd4:	2500      	movs	r5, #0
    3bd6:	e7c2      	b.n	3b5e <buffer_alloc_calloc+0xc2>
        return( NULL );
    3bd8:	4625      	mov	r5, r4
    3bda:	e7c0      	b.n	3b5e <buffer_alloc_calloc+0xc2>
    3bdc:	200027ec 	.word	0x200027ec
    3be0:	2000006c 	.word	0x2000006c
    3be4:	ff00aa55 	.word	0xff00aa55
    3be8:	ee119966 	.word	0xee119966

00003bec <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( &heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
    3bec:	b538      	push	{r3, r4, r5, lr}
    3bee:	4605      	mov	r5, r0
    3bf0:	460c      	mov	r4, r1
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    3bf2:	2214      	movs	r2, #20
    3bf4:	2100      	movs	r1, #0
    3bf6:	4813      	ldr	r0, [pc, #76]	; (3c44 <mbedtls_memory_buffer_alloc_init+0x58>)
    3bf8:	f002 fd3c 	bl	6674 <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
    3bfc:	4912      	ldr	r1, [pc, #72]	; (3c48 <mbedtls_memory_buffer_alloc_init+0x5c>)
    3bfe:	4813      	ldr	r0, [pc, #76]	; (3c4c <mbedtls_memory_buffer_alloc_init+0x60>)
    3c00:	f000 f838 	bl	3c74 <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3c04:	2c23      	cmp	r4, #35	; 0x23
    3c06:	d91c      	bls.n	3c42 <mbedtls_memory_buffer_alloc_init+0x56>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3c08:	f015 0303 	ands.w	r3, r5, #3
    3c0c:	d004      	beq.n	3c18 <mbedtls_memory_buffer_alloc_init+0x2c>
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
    3c0e:	441c      	add	r4, r3
    3c10:	3c04      	subs	r4, #4
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    3c12:	f1c3 0304 	rsb	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
    3c16:	441d      	add	r5, r3
    }

    memset( buf, 0, len );
    3c18:	4622      	mov	r2, r4
    3c1a:	2100      	movs	r1, #0
    3c1c:	4628      	mov	r0, r5
    3c1e:	f002 fd29 	bl	6674 <memset>

    heap.buf = buf;
    3c22:	4b08      	ldr	r3, [pc, #32]	; (3c44 <mbedtls_memory_buffer_alloc_init+0x58>)
    3c24:	601d      	str	r5, [r3, #0]
    heap.len = len;
    3c26:	605c      	str	r4, [r3, #4]

    heap.first = (memory_header *)buf;
    3c28:	609d      	str	r5, [r3, #8]
    heap.first->size = len - sizeof( memory_header );
    3c2a:	3c20      	subs	r4, #32
    3c2c:	606c      	str	r4, [r5, #4]
    heap.first->magic1 = MAGIC1;
    3c2e:	689a      	ldr	r2, [r3, #8]
    3c30:	4907      	ldr	r1, [pc, #28]	; (3c50 <mbedtls_memory_buffer_alloc_init+0x64>)
    3c32:	6011      	str	r1, [r2, #0]
    heap.first->magic2 = MAGIC2;
    3c34:	689a      	ldr	r2, [r3, #8]
    3c36:	f1a1 2110 	sub.w	r1, r1, #268439552	; 0x10001000
    3c3a:	f1a1 11ef 	sub.w	r1, r1, #15663343	; 0xef00ef
    3c3e:	61d1      	str	r1, [r2, #28]
    heap.first_free = heap.first;
    3c40:	60da      	str	r2, [r3, #12]
}
    3c42:	bd38      	pop	{r3, r4, r5, pc}
    3c44:	200027ec 	.word	0x200027ec
    3c48:	00003969 	.word	0x00003969
    3c4c:	00003a9d 	.word	0x00003a9d
    3c50:	ff00aa55 	.word	0xff00aa55

00003c54 <mbedtls_calloc>:

static void * (*mbedtls_calloc_func)( size_t, size_t ) = MBEDTLS_PLATFORM_STD_CALLOC;
static void (*mbedtls_free_func)( void * ) = MBEDTLS_PLATFORM_STD_FREE;

void * mbedtls_calloc( size_t nmemb, size_t size )
{
    3c54:	b508      	push	{r3, lr}
    return (*mbedtls_calloc_func)( nmemb, size );
    3c56:	4b02      	ldr	r3, [pc, #8]	; (3c60 <mbedtls_calloc+0xc>)
    3c58:	681b      	ldr	r3, [r3, #0]
    3c5a:	4798      	blx	r3
}
    3c5c:	bd08      	pop	{r3, pc}
    3c5e:	bf00      	nop
    3c60:	20000068 	.word	0x20000068

00003c64 <mbedtls_free>:

void mbedtls_free( void * ptr )
{
    3c64:	b508      	push	{r3, lr}
    (*mbedtls_free_func)( ptr );
    3c66:	4b02      	ldr	r3, [pc, #8]	; (3c70 <mbedtls_free+0xc>)
    3c68:	681b      	ldr	r3, [r3, #0]
    3c6a:	4798      	blx	r3
}
    3c6c:	bd08      	pop	{r3, pc}
    3c6e:	bf00      	nop
    3c70:	20000070 	.word	0x20000070

00003c74 <mbedtls_platform_set_calloc_free>:

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
    3c74:	4b02      	ldr	r3, [pc, #8]	; (3c80 <mbedtls_platform_set_calloc_free+0xc>)
    3c76:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
    3c78:	4b02      	ldr	r3, [pc, #8]	; (3c84 <mbedtls_platform_set_calloc_free+0x10>)
    3c7a:	6019      	str	r1, [r3, #0]
    return( 0 );
}
    3c7c:	2000      	movs	r0, #0
    3c7e:	4770      	bx	lr
    3c80:	20000068 	.word	0x20000068
    3c84:	20000070 	.word	0x20000070

00003c88 <mbedtls_platform_zeroize>:

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
    3c88:	b131      	cbz	r1, 3c98 <mbedtls_platform_zeroize+0x10>
{
    3c8a:	b508      	push	{r3, lr}
    3c8c:	460a      	mov	r2, r1
        memset_func( buf, 0, len );
    3c8e:	4b03      	ldr	r3, [pc, #12]	; (3c9c <mbedtls_platform_zeroize+0x14>)
    3c90:	681b      	ldr	r3, [r3, #0]
    3c92:	2100      	movs	r1, #0
    3c94:	4798      	blx	r3
}
    3c96:	bd08      	pop	{r3, pc}
    3c98:	4770      	bx	lr
    3c9a:	bf00      	nop
    3c9c:	20000074 	.word	0x20000074

00003ca0 <rsa_check_context>:
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
                              int blinding_needed )
{
    3ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ca2:	4604      	mov	r4, r0
    3ca4:	460d      	mov	r5, r1
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    3ca6:	6847      	ldr	r7, [r0, #4]
    3ca8:	f100 0608 	add.w	r6, r0, #8
    3cac:	4630      	mov	r0, r6
    3cae:	f003 fc12 	bl	74d6 <mbedtls_mpi_size>
    3cb2:	4287      	cmp	r7, r0
    3cb4:	d151      	bne.n	3d5a <rsa_check_context+0xba>
        ctx->len > MBEDTLS_MPI_MAX_SIZE )
    3cb6:	6863      	ldr	r3, [r4, #4]
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    3cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3cbc:	d84f      	bhi.n	3d5e <rsa_check_context+0xbe>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    3cbe:	2100      	movs	r1, #0
    3cc0:	4630      	mov	r0, r6
    3cc2:	f003 fd8d 	bl	77e0 <mbedtls_mpi_cmp_int>
    3cc6:	2800      	cmp	r0, #0
    3cc8:	dd2a      	ble.n	3d20 <rsa_check_context+0x80>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    3cca:	2100      	movs	r1, #0
    3ccc:	4630      	mov	r0, r6
    3cce:	f003 fbdc 	bl	748a <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    3cd2:	b328      	cbz	r0, 3d20 <rsa_check_context+0x80>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
    3cd4:	b1cd      	cbz	r5, 3d0a <rsa_check_context+0x6a>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    3cd6:	f104 062c 	add.w	r6, r4, #44	; 0x2c
    3cda:	2100      	movs	r1, #0
    3cdc:	4630      	mov	r0, r6
    3cde:	f003 fd7f 	bl	77e0 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    3ce2:	2800      	cmp	r0, #0
    3ce4:	dd1e      	ble.n	3d24 <rsa_check_context+0x84>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    3ce6:	2100      	movs	r1, #0
    3ce8:	4630      	mov	r0, r6
    3cea:	f003 fbce 	bl	748a <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    3cee:	b1c8      	cbz	r0, 3d24 <rsa_check_context+0x84>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    3cf0:	f104 0638 	add.w	r6, r4, #56	; 0x38
    3cf4:	2100      	movs	r1, #0
    3cf6:	4630      	mov	r0, r6
    3cf8:	f003 fd72 	bl	77e0 <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    3cfc:	2800      	cmp	r0, #0
    3cfe:	dd11      	ble.n	3d24 <rsa_check_context+0x84>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
    3d00:	2100      	movs	r1, #0
    3d02:	4630      	mov	r0, r6
    3d04:	f003 fbc1 	bl	748a <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    3d08:	b160      	cbz	r0, 3d24 <rsa_check_context+0x84>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    3d0a:	2100      	movs	r1, #0
    3d0c:	f104 0014 	add.w	r0, r4, #20
    3d10:	f003 fd66 	bl	77e0 <mbedtls_mpi_cmp_int>
    3d14:	2800      	cmp	r0, #0
    3d16:	dd24      	ble.n	3d62 <rsa_check_context+0xc2>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
    3d18:	b935      	cbnz	r5, 3d28 <rsa_check_context+0x88>
#endif

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
    3d1a:	b9ad      	cbnz	r5, 3d48 <rsa_check_context+0xa8>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
}
    3d1c:	4628      	mov	r0, r5
    3d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3d20:	4d12      	ldr	r5, [pc, #72]	; (3d6c <rsa_check_context+0xcc>)
    3d22:	e7fb      	b.n	3d1c <rsa_check_context+0x7c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3d24:	4d11      	ldr	r5, [pc, #68]	; (3d6c <rsa_check_context+0xcc>)
    3d26:	e7f9      	b.n	3d1c <rsa_check_context+0x7c>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    3d28:	2100      	movs	r1, #0
    3d2a:	f104 0044 	add.w	r0, r4, #68	; 0x44
    3d2e:	f003 fd57 	bl	77e0 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    3d32:	2800      	cmp	r0, #0
    3d34:	dd06      	ble.n	3d44 <rsa_check_context+0xa4>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
    3d36:	2100      	movs	r1, #0
    3d38:	f104 0050 	add.w	r0, r4, #80	; 0x50
    3d3c:	f003 fd50 	bl	77e0 <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    3d40:	2800      	cmp	r0, #0
    3d42:	dcea      	bgt.n	3d1a <rsa_check_context+0x7a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3d44:	4d09      	ldr	r5, [pc, #36]	; (3d6c <rsa_check_context+0xcc>)
    3d46:	e7e9      	b.n	3d1c <rsa_check_context+0x7c>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    3d48:	2100      	movs	r1, #0
    3d4a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    3d4e:	f003 fd47 	bl	77e0 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    3d52:	2800      	cmp	r0, #0
    3d54:	dd07      	ble.n	3d66 <rsa_check_context+0xc6>
    return( 0 );
    3d56:	2500      	movs	r5, #0
    3d58:	e7e0      	b.n	3d1c <rsa_check_context+0x7c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3d5a:	4d04      	ldr	r5, [pc, #16]	; (3d6c <rsa_check_context+0xcc>)
    3d5c:	e7de      	b.n	3d1c <rsa_check_context+0x7c>
    3d5e:	4d03      	ldr	r5, [pc, #12]	; (3d6c <rsa_check_context+0xcc>)
    3d60:	e7dc      	b.n	3d1c <rsa_check_context+0x7c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3d62:	4d02      	ldr	r5, [pc, #8]	; (3d6c <rsa_check_context+0xcc>)
    3d64:	e7da      	b.n	3d1c <rsa_check_context+0x7c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3d66:	4d01      	ldr	r5, [pc, #4]	; (3d6c <rsa_check_context+0xcc>)
    3d68:	e7d8      	b.n	3d1c <rsa_check_context+0x7c>
    3d6a:	bf00      	nop
    3d6c:	ffffbf80 	.word	0xffffbf80

00003d70 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
    3d70:	b570      	push	{r4, r5, r6, lr}
    3d72:	4604      	mov	r4, r0
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    3d74:	2200      	movs	r2, #0
    3d76:	4611      	mov	r1, r2
    3d78:	f7ff ff92 	bl	3ca0 <rsa_check_context>
    3d7c:	b9e0      	cbnz	r0, 3db8 <mbedtls_rsa_check_pubkey+0x48>
    3d7e:	4606      	mov	r6, r0
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    3d80:	f104 0508 	add.w	r5, r4, #8
    3d84:	4628      	mov	r0, r5
    3d86:	f003 fb90 	bl	74aa <mbedtls_mpi_bitlen>
    3d8a:	287f      	cmp	r0, #127	; 0x7f
    3d8c:	d916      	bls.n	3dbc <mbedtls_rsa_check_pubkey+0x4c>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    3d8e:	3414      	adds	r4, #20
    3d90:	2100      	movs	r1, #0
    3d92:	4620      	mov	r0, r4
    3d94:	f003 fb79 	bl	748a <mbedtls_mpi_get_bit>
    3d98:	b160      	cbz	r0, 3db4 <mbedtls_rsa_check_pubkey+0x44>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    3d9a:	4620      	mov	r0, r4
    3d9c:	f003 fb85 	bl	74aa <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    3da0:	2801      	cmp	r0, #1
    3da2:	d907      	bls.n	3db4 <mbedtls_rsa_check_pubkey+0x44>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    3da4:	4629      	mov	r1, r5
    3da6:	4620      	mov	r0, r4
    3da8:	f003 fcd1 	bl	774e <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    3dac:	2800      	cmp	r0, #0
    3dae:	da01      	bge.n	3db4 <mbedtls_rsa_check_pubkey+0x44>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
    3db0:	4630      	mov	r0, r6
    3db2:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    3db4:	4e02      	ldr	r6, [pc, #8]	; (3dc0 <mbedtls_rsa_check_pubkey+0x50>)
    3db6:	e7fb      	b.n	3db0 <mbedtls_rsa_check_pubkey+0x40>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    3db8:	4e01      	ldr	r6, [pc, #4]	; (3dc0 <mbedtls_rsa_check_pubkey+0x50>)
    3dba:	e7f9      	b.n	3db0 <mbedtls_rsa_check_pubkey+0x40>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    3dbc:	4e00      	ldr	r6, [pc, #0]	; (3dc0 <mbedtls_rsa_check_pubkey+0x50>)
    3dbe:	e7f7      	b.n	3db0 <mbedtls_rsa_check_pubkey+0x40>
    3dc0:	ffffbe00 	.word	0xffffbe00

00003dc4 <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
    3dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dc6:	b087      	sub	sp, #28
    3dc8:	4605      	mov	r5, r0
    3dca:	460c      	mov	r4, r1
    3dcc:	4616      	mov	r6, r2
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    3dce:	2200      	movs	r2, #0
    3dd0:	4611      	mov	r1, r2
    3dd2:	f7ff ff65 	bl	3ca0 <rsa_check_context>
    3dd6:	bb98      	cbnz	r0, 3e40 <mbedtls_rsa_public+0x7c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
    3dd8:	a803      	add	r0, sp, #12
    3dda:	f003 fac5 	bl	7368 <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    3dde:	686a      	ldr	r2, [r5, #4]
    3de0:	4621      	mov	r1, r4
    3de2:	a803      	add	r0, sp, #12
    3de4:	f003 fb7d 	bl	74e2 <mbedtls_mpi_read_binary>
    3de8:	4604      	mov	r4, r0
    3dea:	b130      	cbz	r0, 3dfa <mbedtls_rsa_public+0x36>
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
    3dec:	a803      	add	r0, sp, #12
    3dee:	f003 fac1 	bl	7374 <mbedtls_mpi_free>

    if( ret != 0 )
    3df2:	bb14      	cbnz	r4, 3e3a <mbedtls_rsa_public+0x76>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );

    return( 0 );
}
    3df4:	4620      	mov	r0, r4
    3df6:	b007      	add	sp, #28
    3df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    3dfa:	f105 0408 	add.w	r4, r5, #8
    3dfe:	4621      	mov	r1, r4
    3e00:	a803      	add	r0, sp, #12
    3e02:	f003 fca4 	bl	774e <mbedtls_mpi_cmp_mpi>
    3e06:	2800      	cmp	r0, #0
    3e08:	db02      	blt.n	3e10 <mbedtls_rsa_public+0x4c>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    3e0a:	f06f 0403 	mvn.w	r4, #3
    3e0e:	e7ed      	b.n	3dec <mbedtls_rsa_public+0x28>
    olen = ctx->len;
    3e10:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    3e12:	f105 0368 	add.w	r3, r5, #104	; 0x68
    3e16:	9300      	str	r3, [sp, #0]
    3e18:	4623      	mov	r3, r4
    3e1a:	f105 0214 	add.w	r2, r5, #20
    3e1e:	a903      	add	r1, sp, #12
    3e20:	4608      	mov	r0, r1
    3e22:	f004 f85e 	bl	7ee2 <mbedtls_mpi_exp_mod>
    3e26:	4604      	mov	r4, r0
    3e28:	2800      	cmp	r0, #0
    3e2a:	d1df      	bne.n	3dec <mbedtls_rsa_public+0x28>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
    3e2c:	463a      	mov	r2, r7
    3e2e:	4631      	mov	r1, r6
    3e30:	a803      	add	r0, sp, #12
    3e32:	f003 fb87 	bl	7544 <mbedtls_mpi_write_binary>
    3e36:	4604      	mov	r4, r0
cleanup:
    3e38:	e7d8      	b.n	3dec <mbedtls_rsa_public+0x28>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
    3e3a:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
    3e3e:	e7d9      	b.n	3df4 <mbedtls_rsa_public+0x30>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3e40:	4c00      	ldr	r4, [pc, #0]	; (3e44 <mbedtls_rsa_public+0x80>)
    3e42:	e7d7      	b.n	3df4 <mbedtls_rsa_public+0x30>
    3e44:	ffffbf80 	.word	0xffffbf80

00003e48 <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
    3e48:	2300      	movs	r3, #0
    3e4a:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
    3e4c:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
    3e4e:	460b      	mov	r3, r1
    3e50:	b9b9      	cbnz	r1, 3e82 <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
    3e52:	4a19      	ldr	r2, [pc, #100]	; (3eb8 <mbedtls_sha256_starts_ret+0x70>)
    3e54:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
    3e56:	4a19      	ldr	r2, [pc, #100]	; (3ebc <mbedtls_sha256_starts_ret+0x74>)
    3e58:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
    3e5a:	4a19      	ldr	r2, [pc, #100]	; (3ec0 <mbedtls_sha256_starts_ret+0x78>)
    3e5c:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
    3e5e:	4a19      	ldr	r2, [pc, #100]	; (3ec4 <mbedtls_sha256_starts_ret+0x7c>)
    3e60:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0x510E527F;
    3e62:	4a19      	ldr	r2, [pc, #100]	; (3ec8 <mbedtls_sha256_starts_ret+0x80>)
    3e64:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x9B05688C;
    3e66:	4a19      	ldr	r2, [pc, #100]	; (3ecc <mbedtls_sha256_starts_ret+0x84>)
    3e68:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
    3e6a:	4a19      	ldr	r2, [pc, #100]	; (3ed0 <mbedtls_sha256_starts_ret+0x88>)
    3e6c:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    3e6e:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
    3e72:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
    3e76:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
    3e7a:	6242      	str	r2, [r0, #36]	; 0x24
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    }

    ctx->is224 = is224;
    3e7c:	6683      	str	r3, [r0, #104]	; 0x68

    return( 0 );
}
    3e7e:	2000      	movs	r0, #0
    3e80:	4770      	bx	lr
        ctx->state[0] = 0xC1059ED8;
    3e82:	4a14      	ldr	r2, [pc, #80]	; (3ed4 <mbedtls_sha256_starts_ret+0x8c>)
    3e84:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0x367CD507;
    3e86:	4a14      	ldr	r2, [pc, #80]	; (3ed8 <mbedtls_sha256_starts_ret+0x90>)
    3e88:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3070DD17;
    3e8a:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
    3e8e:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
    3e92:	f502 6201 	add.w	r2, r2, #2064	; 0x810
    3e96:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xF70E5939;
    3e98:	4a10      	ldr	r2, [pc, #64]	; (3edc <mbedtls_sha256_starts_ret+0x94>)
    3e9a:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
    3e9c:	4a10      	ldr	r2, [pc, #64]	; (3ee0 <mbedtls_sha256_starts_ret+0x98>)
    3e9e:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x68581511;
    3ea0:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
    3ea4:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
    3ea8:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
    3eac:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    3eae:	4a0d      	ldr	r2, [pc, #52]	; (3ee4 <mbedtls_sha256_starts_ret+0x9c>)
    3eb0:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    3eb2:	4a0d      	ldr	r2, [pc, #52]	; (3ee8 <mbedtls_sha256_starts_ret+0xa0>)
    3eb4:	6242      	str	r2, [r0, #36]	; 0x24
    3eb6:	e7e1      	b.n	3e7c <mbedtls_sha256_starts_ret+0x34>
    3eb8:	6a09e667 	.word	0x6a09e667
    3ebc:	bb67ae85 	.word	0xbb67ae85
    3ec0:	3c6ef372 	.word	0x3c6ef372
    3ec4:	a54ff53a 	.word	0xa54ff53a
    3ec8:	510e527f 	.word	0x510e527f
    3ecc:	9b05688c 	.word	0x9b05688c
    3ed0:	1f83d9ab 	.word	0x1f83d9ab
    3ed4:	c1059ed8 	.word	0xc1059ed8
    3ed8:	367cd507 	.word	0x367cd507
    3edc:	f70e5939 	.word	0xf70e5939
    3ee0:	ffc00b31 	.word	0xffc00b31
    3ee4:	64f98fa7 	.word	0x64f98fa7
    3ee8:	befa4fa4 	.word	0xbefa4fa4

00003eec <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    3eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ef0:	b0d1      	sub	sp, #324	; 0x144
    3ef2:	9007      	str	r0, [sp, #28]
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
    3ef4:	2300      	movs	r3, #0
    3ef6:	e006      	b.n	3f06 <mbedtls_internal_sha256_process+0x1a>
        A[i] = ctx->state[i];
    3ef8:	1c9a      	adds	r2, r3, #2
    3efa:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    3efe:	ac08      	add	r4, sp, #32
    3f00:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for( i = 0; i < 8; i++ )
    3f04:	3301      	adds	r3, #1
    3f06:	2b07      	cmp	r3, #7
    3f08:	d9f6      	bls.n	3ef8 <mbedtls_internal_sha256_process+0xc>

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
    3f0a:	2200      	movs	r2, #0
    3f0c:	2a0f      	cmp	r2, #15
    3f0e:	d811      	bhi.n	3f34 <mbedtls_internal_sha256_process+0x48>
        GET_UINT32_BE( W[i], data, 4 * i );
    3f10:	f811 4022 	ldrb.w	r4, [r1, r2, lsl #2]
    3f14:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    3f18:	7843      	ldrb	r3, [r0, #1]
    3f1a:	041b      	lsls	r3, r3, #16
    3f1c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    3f20:	7884      	ldrb	r4, [r0, #2]
    3f22:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    3f26:	78c0      	ldrb	r0, [r0, #3]
    3f28:	4303      	orrs	r3, r0
    3f2a:	a810      	add	r0, sp, #64	; 0x40
    3f2c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    for( i = 0; i < 16; i++ )
    3f30:	3201      	adds	r2, #1
    3f32:	e7eb      	b.n	3f0c <mbedtls_internal_sha256_process+0x20>

    for( i = 0; i < 16; i += 8 )
    3f34:	f04f 0e00 	mov.w	lr, #0
    3f38:	e142      	b.n	41c0 <mbedtls_internal_sha256_process+0x2d4>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
    3f3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3f3c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    3f3e:	ea4f 21f6 	mov.w	r1, r6, ror #11
    3f42:	ea81 11b6 	eor.w	r1, r1, r6, ror #6
    3f46:	ea81 6176 	eor.w	r1, r1, r6, ror #25
    3f4a:	4419      	add	r1, r3
    3f4c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    3f4e:	980d      	ldr	r0, [sp, #52]	; 0x34
    3f50:	ea84 0300 	eor.w	r3, r4, r0
    3f54:	4033      	ands	r3, r6
    3f56:	4063      	eors	r3, r4
    3f58:	4419      	add	r1, r3
    3f5a:	f8df 8734 	ldr.w	r8, [pc, #1844]	; 4690 <mbedtls_internal_sha256_process+0x7a4>
    3f5e:	f858 302e 	ldr.w	r3, [r8, lr, lsl #2]
    3f62:	4419      	add	r1, r3
    3f64:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
    3f68:	f85c 302e 	ldr.w	r3, [ip, lr, lsl #2]
    3f6c:	4419      	add	r1, r3
    3f6e:	9d08      	ldr	r5, [sp, #32]
    3f70:	ea4f 3a75 	mov.w	sl, r5, ror #13
    3f74:	ea8a 0ab5 	eor.w	sl, sl, r5, ror #2
    3f78:	ea8a 5ab5 	eor.w	sl, sl, r5, ror #22
    3f7c:	9f09      	ldr	r7, [sp, #36]	; 0x24
    3f7e:	ea05 0307 	and.w	r3, r5, r7
    3f82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3f84:	ea45 0907 	orr.w	r9, r5, r7
    3f88:	ea02 0909 	and.w	r9, r2, r9
    3f8c:	ea43 0309 	orr.w	r3, r3, r9
    3f90:	449a      	add	sl, r3
    3f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3f94:	eb01 0903 	add.w	r9, r1, r3
    3f98:	4451      	add	r1, sl
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
    3f9a:	ea4f 23f9 	mov.w	r3, r9, ror #11
    3f9e:	ea83 13b9 	eor.w	r3, r3, r9, ror #6
    3fa2:	ea83 6379 	eor.w	r3, r3, r9, ror #25
    3fa6:	441c      	add	r4, r3
    3fa8:	ea86 0300 	eor.w	r3, r6, r0
    3fac:	ea09 0303 	and.w	r3, r9, r3
    3fb0:	4043      	eors	r3, r0
    3fb2:	441c      	add	r4, r3
    3fb4:	f10e 0a01 	add.w	sl, lr, #1
    3fb8:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    3fbc:	441c      	add	r4, r3
    3fbe:	f85c 302a 	ldr.w	r3, [ip, sl, lsl #2]
    3fc2:	441c      	add	r4, r3
    3fc4:	ea4f 3371 	mov.w	r3, r1, ror #13
    3fc8:	ea83 03b1 	eor.w	r3, r3, r1, ror #2
    3fcc:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
    3fd0:	ea05 0a01 	and.w	sl, r5, r1
    3fd4:	ea45 0b01 	orr.w	fp, r5, r1
    3fd8:	ea07 0b0b 	and.w	fp, r7, fp
    3fdc:	ea4a 0a0b 	orr.w	sl, sl, fp
    3fe0:	4453      	add	r3, sl
    3fe2:	4422      	add	r2, r4
    3fe4:	441c      	add	r4, r3
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
    3fe6:	ea4f 23f2 	mov.w	r3, r2, ror #11
    3fea:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
    3fee:	ea83 6372 	eor.w	r3, r3, r2, ror #25
    3ff2:	4418      	add	r0, r3
    3ff4:	ea86 0309 	eor.w	r3, r6, r9
    3ff8:	4013      	ands	r3, r2
    3ffa:	4073      	eors	r3, r6
    3ffc:	4418      	add	r0, r3
    3ffe:	f10e 0a02 	add.w	sl, lr, #2
    4002:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    4006:	4418      	add	r0, r3
    4008:	f85c 302a 	ldr.w	r3, [ip, sl, lsl #2]
    400c:	4418      	add	r0, r3
    400e:	ea4f 3374 	mov.w	r3, r4, ror #13
    4012:	ea83 03b4 	eor.w	r3, r3, r4, ror #2
    4016:	ea83 53b4 	eor.w	r3, r3, r4, ror #22
    401a:	ea01 0a04 	and.w	sl, r1, r4
    401e:	ea41 0b04 	orr.w	fp, r1, r4
    4022:	ea05 0b0b 	and.w	fp, r5, fp
    4026:	ea4a 0a0b 	orr.w	sl, sl, fp
    402a:	4453      	add	r3, sl
    402c:	4407      	add	r7, r0
    402e:	4418      	add	r0, r3
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
    4030:	ea4f 23f7 	mov.w	r3, r7, ror #11
    4034:	ea83 13b7 	eor.w	r3, r3, r7, ror #6
    4038:	ea83 6377 	eor.w	r3, r3, r7, ror #25
    403c:	441e      	add	r6, r3
    403e:	ea89 0302 	eor.w	r3, r9, r2
    4042:	403b      	ands	r3, r7
    4044:	ea89 0303 	eor.w	r3, r9, r3
    4048:	441e      	add	r6, r3
    404a:	f10e 0a03 	add.w	sl, lr, #3
    404e:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    4052:	441e      	add	r6, r3
    4054:	f85c 302a 	ldr.w	r3, [ip, sl, lsl #2]
    4058:	441e      	add	r6, r3
    405a:	ea4f 3370 	mov.w	r3, r0, ror #13
    405e:	ea83 03b0 	eor.w	r3, r3, r0, ror #2
    4062:	ea83 53b0 	eor.w	r3, r3, r0, ror #22
    4066:	ea04 0a00 	and.w	sl, r4, r0
    406a:	ea44 0b00 	orr.w	fp, r4, r0
    406e:	ea01 0b0b 	and.w	fp, r1, fp
    4072:	ea4a 0a0b 	orr.w	sl, sl, fp
    4076:	4453      	add	r3, sl
    4078:	4435      	add	r5, r6
    407a:	441e      	add	r6, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
    407c:	ea4f 23f5 	mov.w	r3, r5, ror #11
    4080:	ea83 13b5 	eor.w	r3, r3, r5, ror #6
    4084:	ea83 6375 	eor.w	r3, r3, r5, ror #25
    4088:	4499      	add	r9, r3
    408a:	ea82 0307 	eor.w	r3, r2, r7
    408e:	402b      	ands	r3, r5
    4090:	4053      	eors	r3, r2
    4092:	4499      	add	r9, r3
    4094:	f10e 0a04 	add.w	sl, lr, #4
    4098:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
    409c:	444b      	add	r3, r9
    409e:	f85c 902a 	ldr.w	r9, [ip, sl, lsl #2]
    40a2:	444b      	add	r3, r9
    40a4:	ea4f 3976 	mov.w	r9, r6, ror #13
    40a8:	ea89 09b6 	eor.w	r9, r9, r6, ror #2
    40ac:	ea89 59b6 	eor.w	r9, r9, r6, ror #22
    40b0:	ea00 0a06 	and.w	sl, r0, r6
    40b4:	ea40 0b06 	orr.w	fp, r0, r6
    40b8:	ea04 0b0b 	and.w	fp, r4, fp
    40bc:	ea4a 0a0b 	orr.w	sl, sl, fp
    40c0:	44d1      	add	r9, sl
    40c2:	4419      	add	r1, r3
    40c4:	910f      	str	r1, [sp, #60]	; 0x3c
    40c6:	444b      	add	r3, r9
    40c8:	930b      	str	r3, [sp, #44]	; 0x2c
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
    40ca:	ea4f 29f1 	mov.w	r9, r1, ror #11
    40ce:	ea89 19b1 	eor.w	r9, r9, r1, ror #6
    40d2:	ea89 6971 	eor.w	r9, r9, r1, ror #25
    40d6:	444a      	add	r2, r9
    40d8:	ea87 0905 	eor.w	r9, r7, r5
    40dc:	ea01 0909 	and.w	r9, r1, r9
    40e0:	ea87 0909 	eor.w	r9, r7, r9
    40e4:	4491      	add	r9, r2
    40e6:	f10e 0a05 	add.w	sl, lr, #5
    40ea:	f858 202a 	ldr.w	r2, [r8, sl, lsl #2]
    40ee:	444a      	add	r2, r9
    40f0:	f85c 902a 	ldr.w	r9, [ip, sl, lsl #2]
    40f4:	444a      	add	r2, r9
    40f6:	ea4f 3a73 	mov.w	sl, r3, ror #13
    40fa:	ea8a 0ab3 	eor.w	sl, sl, r3, ror #2
    40fe:	ea8a 5ab3 	eor.w	sl, sl, r3, ror #22
    4102:	ea06 0903 	and.w	r9, r6, r3
    4106:	ea46 0b03 	orr.w	fp, r6, r3
    410a:	ea00 0b0b 	and.w	fp, r0, fp
    410e:	ea49 090b 	orr.w	r9, r9, fp
    4112:	44ca      	add	sl, r9
    4114:	eb04 0902 	add.w	r9, r4, r2
    4118:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    411c:	4452      	add	r2, sl
    411e:	920a      	str	r2, [sp, #40]	; 0x28
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
    4120:	ea4f 24f9 	mov.w	r4, r9, ror #11
    4124:	ea84 14b9 	eor.w	r4, r4, r9, ror #6
    4128:	ea84 6479 	eor.w	r4, r4, r9, ror #25
    412c:	4427      	add	r7, r4
    412e:	ea85 0401 	eor.w	r4, r5, r1
    4132:	ea09 0404 	and.w	r4, r9, r4
    4136:	406c      	eors	r4, r5
    4138:	443c      	add	r4, r7
    413a:	f10e 0a06 	add.w	sl, lr, #6
    413e:	f858 702a 	ldr.w	r7, [r8, sl, lsl #2]
    4142:	443c      	add	r4, r7
    4144:	f85c 702a 	ldr.w	r7, [ip, sl, lsl #2]
    4148:	443c      	add	r4, r7
    414a:	ea4f 3772 	mov.w	r7, r2, ror #13
    414e:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
    4152:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
    4156:	ea03 0a02 	and.w	sl, r3, r2
    415a:	ea43 0b02 	orr.w	fp, r3, r2
    415e:	ea06 0b0b 	and.w	fp, r6, fp
    4162:	ea4a 0a0b 	orr.w	sl, sl, fp
    4166:	4457      	add	r7, sl
    4168:	4420      	add	r0, r4
    416a:	900d      	str	r0, [sp, #52]	; 0x34
    416c:	443c      	add	r4, r7
    416e:	9409      	str	r4, [sp, #36]	; 0x24
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    4170:	ea4f 27f0 	mov.w	r7, r0, ror #11
    4174:	ea87 17b0 	eor.w	r7, r7, r0, ror #6
    4178:	ea87 6770 	eor.w	r7, r7, r0, ror #25
    417c:	443d      	add	r5, r7
    417e:	ea81 0909 	eor.w	r9, r1, r9
    4182:	ea00 0909 	and.w	r9, r0, r9
    4186:	ea81 0109 	eor.w	r1, r1, r9
    418a:	4429      	add	r1, r5
    418c:	f10e 0007 	add.w	r0, lr, #7
    4190:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
    4194:	4429      	add	r1, r5
    4196:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
    419a:	4401      	add	r1, r0
    419c:	ea4f 3074 	mov.w	r0, r4, ror #13
    41a0:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
    41a4:	ea80 50b4 	eor.w	r0, r0, r4, ror #22
    41a8:	ea02 0504 	and.w	r5, r2, r4
    41ac:	4322      	orrs	r2, r4
    41ae:	4013      	ands	r3, r2
    41b0:	432b      	orrs	r3, r5
    41b2:	4403      	add	r3, r0
    41b4:	440e      	add	r6, r1
    41b6:	960c      	str	r6, [sp, #48]	; 0x30
    41b8:	440b      	add	r3, r1
    41ba:	9308      	str	r3, [sp, #32]
    for( i = 0; i < 16; i += 8 )
    41bc:	f10e 0e08 	add.w	lr, lr, #8
    41c0:	f1be 0f0f 	cmp.w	lr, #15
    41c4:	f67f aeb9 	bls.w	3f3a <mbedtls_internal_sha256_process+0x4e>
    }

    for( i = 16; i < 64; i += 8 )
    41c8:	2610      	movs	r6, #16
    41ca:	2e3f      	cmp	r6, #63	; 0x3f
    41cc:	f200 824d 	bhi.w	466a <mbedtls_internal_sha256_process+0x77e>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
    41d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    41d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    41d4:	ea4f 27f3 	mov.w	r7, r3, ror #11
    41d8:	ea87 17b3 	eor.w	r7, r7, r3, ror #6
    41dc:	ea87 6773 	eor.w	r7, r7, r3, ror #25
    41e0:	443a      	add	r2, r7
    41e2:	980e      	ldr	r0, [sp, #56]	; 0x38
    41e4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    41e6:	ea80 0705 	eor.w	r7, r0, r5
    41ea:	401f      	ands	r7, r3
    41ec:	4047      	eors	r7, r0
    41ee:	443a      	add	r2, r7
    41f0:	f8df b49c 	ldr.w	fp, [pc, #1180]	; 4690 <mbedtls_internal_sha256_process+0x7a4>
    41f4:	f85b 7026 	ldr.w	r7, [fp, r6, lsl #2]
    41f8:	4417      	add	r7, r2
    41fa:	1eb3      	subs	r3, r6, #2
    41fc:	461a      	mov	r2, r3
    41fe:	ab10      	add	r3, sp, #64	; 0x40
    4200:	9204      	str	r2, [sp, #16]
    4202:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4206:	ea4f 44f2 	mov.w	r4, r2, ror #19
    420a:	ea84 4472 	eor.w	r4, r4, r2, ror #17
    420e:	ea84 2492 	eor.w	r4, r4, r2, lsr #10
    4212:	1ff2      	subs	r2, r6, #7
    4214:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4218:	4414      	add	r4, r2
    421a:	f1a6 0a0f 	sub.w	sl, r6, #15
    421e:	f853 c02a 	ldr.w	ip, [r3, sl, lsl #2]
    4222:	ea4f 42bc 	mov.w	r2, ip, ror #18
    4226:	ea82 12fc 	eor.w	r2, r2, ip, ror #7
    422a:	ea82 02dc 	eor.w	r2, r2, ip, lsr #3
    422e:	4414      	add	r4, r2
    4230:	f1a6 0210 	sub.w	r2, r6, #16
    4234:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4238:	4422      	add	r2, r4
    423a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    423e:	443a      	add	r2, r7
    4240:	9908      	ldr	r1, [sp, #32]
    4242:	ea4f 3c71 	mov.w	ip, r1, ror #13
    4246:	ea8c 0cb1 	eor.w	ip, ip, r1, ror #2
    424a:	ea8c 5eb1 	eor.w	lr, ip, r1, ror #22
    424e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    4250:	463c      	mov	r4, r7
    4252:	400c      	ands	r4, r1
    4254:	990a      	ldr	r1, [sp, #40]	; 0x28
    4256:	9100      	str	r1, [sp, #0]
    4258:	9908      	ldr	r1, [sp, #32]
    425a:	ea41 0c07 	orr.w	ip, r1, r7
    425e:	9900      	ldr	r1, [sp, #0]
    4260:	ea01 0c0c 	and.w	ip, r1, ip
    4264:	ea44 0c0c 	orr.w	ip, r4, ip
    4268:	44f4      	add	ip, lr
    426a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    426c:	4414      	add	r4, r2
    426e:	4462      	add	r2, ip
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
    4270:	ea4f 28f4 	mov.w	r8, r4, ror #11
    4274:	ea88 18b4 	eor.w	r8, r8, r4, ror #6
    4278:	ea88 6874 	eor.w	r8, r8, r4, ror #25
    427c:	4480      	add	r8, r0
    427e:	990c      	ldr	r1, [sp, #48]	; 0x30
    4280:	ea81 0905 	eor.w	r9, r1, r5
    4284:	ea04 0909 	and.w	r9, r4, r9
    4288:	ea85 0909 	eor.w	r9, r5, r9
    428c:	44c8      	add	r8, r9
    428e:	1c71      	adds	r1, r6, #1
    4290:	f85b 0021 	ldr.w	r0, [fp, r1, lsl #2]
    4294:	4480      	add	r8, r0
    4296:	1e70      	subs	r0, r6, #1
    4298:	9005      	str	r0, [sp, #20]
    429a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    429e:	ea4f 4cf0 	mov.w	ip, r0, ror #19
    42a2:	ea8c 4c70 	eor.w	ip, ip, r0, ror #17
    42a6:	ea8c 2c90 	eor.w	ip, ip, r0, lsr #10
    42aa:	1fb0      	subs	r0, r6, #6
    42ac:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    42b0:	4484      	add	ip, r0
    42b2:	f1a6 0e0e 	sub.w	lr, r6, #14
    42b6:	f853 902e 	ldr.w	r9, [r3, lr, lsl #2]
    42ba:	ea4f 40b9 	mov.w	r0, r9, ror #18
    42be:	ea80 10f9 	eor.w	r0, r0, r9, ror #7
    42c2:	ea80 00d9 	eor.w	r0, r0, r9, lsr #3
    42c6:	4460      	add	r0, ip
    42c8:	f853 902a 	ldr.w	r9, [r3, sl, lsl #2]
    42cc:	4448      	add	r0, r9
    42ce:	9102      	str	r1, [sp, #8]
    42d0:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    42d4:	eb08 0900 	add.w	r9, r8, r0
    42d8:	ea4f 3872 	mov.w	r8, r2, ror #13
    42dc:	ea88 08b2 	eor.w	r8, r8, r2, ror #2
    42e0:	ea88 58b2 	eor.w	r8, r8, r2, ror #22
    42e4:	9908      	ldr	r1, [sp, #32]
    42e6:	ea01 0002 	and.w	r0, r1, r2
    42ea:	ea41 0c02 	orr.w	ip, r1, r2
    42ee:	9701      	str	r7, [sp, #4]
    42f0:	ea07 0c0c 	and.w	ip, r7, ip
    42f4:	ea40 0c0c 	orr.w	ip, r0, ip
    42f8:	44c4      	add	ip, r8
    42fa:	9800      	ldr	r0, [sp, #0]
    42fc:	eb00 0809 	add.w	r8, r0, r9
    4300:	44e1      	add	r9, ip
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
    4302:	ea4f 20f8 	mov.w	r0, r8, ror #11
    4306:	ea80 10b8 	eor.w	r0, r0, r8, ror #6
    430a:	ea80 6078 	eor.w	r0, r0, r8, ror #25
    430e:	4405      	add	r5, r0
    4310:	990c      	ldr	r1, [sp, #48]	; 0x30
    4312:	ea81 0004 	eor.w	r0, r1, r4
    4316:	ea08 0000 	and.w	r0, r8, r0
    431a:	4048      	eors	r0, r1
    431c:	4405      	add	r5, r0
    431e:	1cb0      	adds	r0, r6, #2
    4320:	4601      	mov	r1, r0
    4322:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
    4326:	4405      	add	r5, r0
    4328:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
    432c:	ea4f 4cf0 	mov.w	ip, r0, ror #19
    4330:	ea8c 4c70 	eor.w	ip, ip, r0, ror #17
    4334:	ea8c 2c90 	eor.w	ip, ip, r0, lsr #10
    4338:	1f70      	subs	r0, r6, #5
    433a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    433e:	4484      	add	ip, r0
    4340:	f1a6 0a0d 	sub.w	sl, r6, #13
    4344:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
    4348:	ea4f 40b0 	mov.w	r0, r0, ror #18
    434c:	f853 702a 	ldr.w	r7, [r3, sl, lsl #2]
    4350:	ea80 10f7 	eor.w	r0, r0, r7, ror #7
    4354:	ea80 00d7 	eor.w	r0, r0, r7, lsr #3
    4358:	4460      	add	r0, ip
    435a:	f853 c02e 	ldr.w	ip, [r3, lr, lsl #2]
    435e:	4460      	add	r0, ip
    4360:	9103      	str	r1, [sp, #12]
    4362:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    4366:	4405      	add	r5, r0
    4368:	ea4f 3c79 	mov.w	ip, r9, ror #13
    436c:	ea8c 0cb9 	eor.w	ip, ip, r9, ror #2
    4370:	ea8c 5cb9 	eor.w	ip, ip, r9, ror #22
    4374:	ea02 0009 	and.w	r0, r2, r9
    4378:	ea42 0e09 	orr.w	lr, r2, r9
    437c:	9908      	ldr	r1, [sp, #32]
    437e:	ea01 0e0e 	and.w	lr, r1, lr
    4382:	ea40 000e 	orr.w	r0, r0, lr
    4386:	4484      	add	ip, r0
    4388:	9f01      	ldr	r7, [sp, #4]
    438a:	eb07 0e05 	add.w	lr, r7, r5
    438e:	eb05 070c 	add.w	r7, r5, ip
    4392:	9700      	str	r7, [sp, #0]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
    4394:	ea4f 20fe 	mov.w	r0, lr, ror #11
    4398:	ea80 10be 	eor.w	r0, r0, lr, ror #6
    439c:	ea80 607e 	eor.w	r0, r0, lr, ror #25
    43a0:	990c      	ldr	r1, [sp, #48]	; 0x30
    43a2:	180d      	adds	r5, r1, r0
    43a4:	ea84 0108 	eor.w	r1, r4, r8
    43a8:	ea0e 0101 	and.w	r1, lr, r1
    43ac:	4061      	eors	r1, r4
    43ae:	1868      	adds	r0, r5, r1
    43b0:	1cf7      	adds	r7, r6, #3
    43b2:	f85b 1027 	ldr.w	r1, [fp, r7, lsl #2]
    43b6:	4401      	add	r1, r0
    43b8:	9d02      	ldr	r5, [sp, #8]
    43ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    43be:	ea4f 45f0 	mov.w	r5, r0, ror #19
    43c2:	ea85 4570 	eor.w	r5, r5, r0, ror #17
    43c6:	ea85 2590 	eor.w	r5, r5, r0, lsr #10
    43ca:	1f30      	subs	r0, r6, #4
    43cc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    43d0:	4405      	add	r5, r0
    43d2:	9501      	str	r5, [sp, #4]
    43d4:	f1a6 0c0c 	sub.w	ip, r6, #12
    43d8:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
    43dc:	ea4f 40b0 	mov.w	r0, r0, ror #18
    43e0:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
    43e4:	ea80 10f5 	eor.w	r0, r0, r5, ror #7
    43e8:	ea80 00d5 	eor.w	r0, r0, r5, lsr #3
    43ec:	9d01      	ldr	r5, [sp, #4]
    43ee:	4428      	add	r0, r5
    43f0:	f853 502a 	ldr.w	r5, [r3, sl, lsl #2]
    43f4:	4428      	add	r0, r5
    43f6:	9706      	str	r7, [sp, #24]
    43f8:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
    43fc:	4401      	add	r1, r0
    43fe:	9800      	ldr	r0, [sp, #0]
    4400:	ea4f 3570 	mov.w	r5, r0, ror #13
    4404:	4607      	mov	r7, r0
    4406:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
    440a:	ea85 55b0 	eor.w	r5, r5, r0, ror #22
    440e:	ea09 0000 	and.w	r0, r9, r0
    4412:	ea49 0a07 	orr.w	sl, r9, r7
    4416:	ea02 0a0a 	and.w	sl, r2, sl
    441a:	ea40 000a 	orr.w	r0, r0, sl
    441e:	4405      	add	r5, r0
    4420:	9808      	ldr	r0, [sp, #32]
    4422:	eb00 0a01 	add.w	sl, r0, r1
    4426:	4429      	add	r1, r5
    4428:	9101      	str	r1, [sp, #4]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
    442a:	ea4f 25fa 	mov.w	r5, sl, ror #11
    442e:	ea85 15ba 	eor.w	r5, r5, sl, ror #6
    4432:	ea85 657a 	eor.w	r5, r5, sl, ror #25
    4436:	442c      	add	r4, r5
    4438:	ea88 050e 	eor.w	r5, r8, lr
    443c:	ea0a 0505 	and.w	r5, sl, r5
    4440:	ea88 0505 	eor.w	r5, r8, r5
    4444:	4425      	add	r5, r4
    4446:	1d34      	adds	r4, r6, #4
    4448:	9402      	str	r4, [sp, #8]
    444a:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
    444e:	4405      	add	r5, r0
    4450:	9903      	ldr	r1, [sp, #12]
    4452:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    4456:	ea4f 40f4 	mov.w	r0, r4, ror #19
    445a:	ea80 4074 	eor.w	r0, r0, r4, ror #17
    445e:	ea80 2094 	eor.w	r0, r0, r4, lsr #10
    4462:	1ef4      	subs	r4, r6, #3
    4464:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
    4468:	4420      	add	r0, r4
    446a:	f1a6 070b 	sub.w	r7, r6, #11
    446e:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
    4472:	ea4f 44b1 	mov.w	r4, r1, ror #18
    4476:	ea84 14f1 	eor.w	r4, r4, r1, ror #7
    447a:	ea84 04d1 	eor.w	r4, r4, r1, lsr #3
    447e:	4404      	add	r4, r0
    4480:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
    4484:	4420      	add	r0, r4
    4486:	9902      	ldr	r1, [sp, #8]
    4488:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    448c:	4405      	add	r5, r0
    448e:	9901      	ldr	r1, [sp, #4]
    4490:	ea4f 3c71 	mov.w	ip, r1, ror #13
    4494:	ea8c 0cb1 	eor.w	ip, ip, r1, ror #2
    4498:	ea8c 5cb1 	eor.w	ip, ip, r1, ror #22
    449c:	9800      	ldr	r0, [sp, #0]
    449e:	4604      	mov	r4, r0
    44a0:	400c      	ands	r4, r1
    44a2:	4601      	mov	r1, r0
    44a4:	9801      	ldr	r0, [sp, #4]
    44a6:	4308      	orrs	r0, r1
    44a8:	ea09 0000 	and.w	r0, r9, r0
    44ac:	4320      	orrs	r0, r4
    44ae:	4460      	add	r0, ip
    44b0:	442a      	add	r2, r5
    44b2:	920f      	str	r2, [sp, #60]	; 0x3c
    44b4:	4428      	add	r0, r5
    44b6:	900b      	str	r0, [sp, #44]	; 0x2c
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
    44b8:	ea4f 2cf2 	mov.w	ip, r2, ror #11
    44bc:	ea8c 1cb2 	eor.w	ip, ip, r2, ror #6
    44c0:	ea8c 6c72 	eor.w	ip, ip, r2, ror #25
    44c4:	44c4      	add	ip, r8
    44c6:	ea8e 080a 	eor.w	r8, lr, sl
    44ca:	9203      	str	r2, [sp, #12]
    44cc:	ea02 0808 	and.w	r8, r2, r8
    44d0:	ea8e 0808 	eor.w	r8, lr, r8
    44d4:	44c4      	add	ip, r8
    44d6:	1d74      	adds	r4, r6, #5
    44d8:	4621      	mov	r1, r4
    44da:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
    44de:	44a4      	add	ip, r4
    44e0:	9d06      	ldr	r5, [sp, #24]
    44e2:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
    44e6:	ea4f 44f5 	mov.w	r4, r5, ror #19
    44ea:	ea84 4475 	eor.w	r4, r4, r5, ror #17
    44ee:	ea84 2495 	eor.w	r4, r4, r5, lsr #10
    44f2:	9a04      	ldr	r2, [sp, #16]
    44f4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    44f8:	442c      	add	r4, r5
    44fa:	f1a6 080a 	sub.w	r8, r6, #10
    44fe:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    4502:	ea4f 45b2 	mov.w	r5, r2, ror #18
    4506:	ea85 15f2 	eor.w	r5, r5, r2, ror #7
    450a:	ea85 05d2 	eor.w	r5, r5, r2, lsr #3
    450e:	4425      	add	r5, r4
    4510:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
    4514:	442c      	add	r4, r5
    4516:	9104      	str	r1, [sp, #16]
    4518:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
    451c:	4464      	add	r4, ip
    451e:	ea4f 3770 	mov.w	r7, r0, ror #13
    4522:	ea87 07b0 	eor.w	r7, r7, r0, ror #2
    4526:	ea87 57b0 	eor.w	r7, r7, r0, ror #22
    452a:	9901      	ldr	r1, [sp, #4]
    452c:	ea01 0500 	and.w	r5, r1, r0
    4530:	ea41 0c00 	orr.w	ip, r1, r0
    4534:	9900      	ldr	r1, [sp, #0]
    4536:	ea01 0c0c 	and.w	ip, r1, ip
    453a:	ea45 050c 	orr.w	r5, r5, ip
    453e:	442f      	add	r7, r5
    4540:	eb09 0c04 	add.w	ip, r9, r4
    4544:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    4548:	443c      	add	r4, r7
    454a:	940a      	str	r4, [sp, #40]	; 0x28
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
    454c:	ea4f 27fc 	mov.w	r7, ip, ror #11
    4550:	ea87 17bc 	eor.w	r7, r7, ip, ror #6
    4554:	ea87 677c 	eor.w	r7, r7, ip, ror #25
    4558:	4477      	add	r7, lr
    455a:	9d03      	ldr	r5, [sp, #12]
    455c:	ea8a 0e05 	eor.w	lr, sl, r5
    4560:	ea0c 0e0e 	and.w	lr, ip, lr
    4564:	ea8a 0e0e 	eor.w	lr, sl, lr
    4568:	4477      	add	r7, lr
    456a:	f106 0906 	add.w	r9, r6, #6
    456e:	f85b 5029 	ldr.w	r5, [fp, r9, lsl #2]
    4572:	442f      	add	r7, r5
    4574:	9d02      	ldr	r5, [sp, #8]
    4576:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
    457a:	ea4f 4ef5 	mov.w	lr, r5, ror #19
    457e:	ea8e 4e75 	eor.w	lr, lr, r5, ror #17
    4582:	ea8e 2e95 	eor.w	lr, lr, r5, lsr #10
    4586:	9a05      	ldr	r2, [sp, #20]
    4588:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    458c:	44ae      	add	lr, r5
    458e:	f1a6 0209 	sub.w	r2, r6, #9
    4592:	9202      	str	r2, [sp, #8]
    4594:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    4598:	4629      	mov	r1, r5
    459a:	ea4f 45b5 	mov.w	r5, r5, ror #18
    459e:	ea85 15f1 	eor.w	r5, r5, r1, ror #7
    45a2:	ea85 05d1 	eor.w	r5, r5, r1, lsr #3
    45a6:	4475      	add	r5, lr
    45a8:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
    45ac:	4475      	add	r5, lr
    45ae:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
    45b2:	442f      	add	r7, r5
    45b4:	ea4f 3574 	mov.w	r5, r4, ror #13
    45b8:	ea85 05b4 	eor.w	r5, r5, r4, ror #2
    45bc:	ea85 55b4 	eor.w	r5, r5, r4, ror #22
    45c0:	ea00 0904 	and.w	r9, r0, r4
    45c4:	ea40 0e04 	orr.w	lr, r0, r4
    45c8:	9a01      	ldr	r2, [sp, #4]
    45ca:	ea02 0e0e 	and.w	lr, r2, lr
    45ce:	ea49 090e 	orr.w	r9, r9, lr
    45d2:	44a9      	add	r9, r5
    45d4:	9900      	ldr	r1, [sp, #0]
    45d6:	19cd      	adds	r5, r1, r7
    45d8:	950d      	str	r5, [sp, #52]	; 0x34
    45da:	444f      	add	r7, r9
    45dc:	9709      	str	r7, [sp, #36]	; 0x24
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    45de:	ea4f 2ef5 	mov.w	lr, r5, ror #11
    45e2:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
    45e6:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
    45ea:	44d6      	add	lr, sl
    45ec:	9a03      	ldr	r2, [sp, #12]
    45ee:	ea82 0c0c 	eor.w	ip, r2, ip
    45f2:	ea05 0c0c 	and.w	ip, r5, ip
    45f6:	ea82 020c 	eor.w	r2, r2, ip
    45fa:	4472      	add	r2, lr
    45fc:	f106 0807 	add.w	r8, r6, #7
    4600:	f85b 5028 	ldr.w	r5, [fp, r8, lsl #2]
    4604:	eb02 0e05 	add.w	lr, r2, r5
    4608:	9904      	ldr	r1, [sp, #16]
    460a:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
    460e:	ea4f 42f5 	mov.w	r2, r5, ror #19
    4612:	ea82 4275 	eor.w	r2, r2, r5, ror #17
    4616:	ea82 2295 	eor.w	r2, r2, r5, lsr #10
    461a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
    461e:	440a      	add	r2, r1
    4620:	f1a6 0508 	sub.w	r5, r6, #8
    4624:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
    4628:	ea4f 45bc 	mov.w	r5, ip, ror #18
    462c:	ea85 15fc 	eor.w	r5, r5, ip, ror #7
    4630:	ea85 05dc 	eor.w	r5, r5, ip, lsr #3
    4634:	442a      	add	r2, r5
    4636:	9d02      	ldr	r5, [sp, #8]
    4638:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
    463c:	442a      	add	r2, r5
    463e:	f843 2028 	str.w	r2, [r3, r8, lsl #2]
    4642:	4472      	add	r2, lr
    4644:	ea4f 3377 	mov.w	r3, r7, ror #13
    4648:	ea83 03b7 	eor.w	r3, r3, r7, ror #2
    464c:	ea83 53b7 	eor.w	r3, r3, r7, ror #22
    4650:	ea04 0507 	and.w	r5, r4, r7
    4654:	4327      	orrs	r7, r4
    4656:	4038      	ands	r0, r7
    4658:	4328      	orrs	r0, r5
    465a:	4418      	add	r0, r3
    465c:	9901      	ldr	r1, [sp, #4]
    465e:	4411      	add	r1, r2
    4660:	910c      	str	r1, [sp, #48]	; 0x30
    4662:	4410      	add	r0, r2
    4664:	9008      	str	r0, [sp, #32]
    for( i = 16; i < 64; i += 8 )
    4666:	3608      	adds	r6, #8
    4668:	e5af      	b.n	41ca <mbedtls_internal_sha256_process+0x2de>
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
    466a:	2300      	movs	r3, #0
    466c:	9807      	ldr	r0, [sp, #28]
    466e:	e009      	b.n	4684 <mbedtls_internal_sha256_process+0x798>
        ctx->state[i] += A[i];
    4670:	aa08      	add	r2, sp, #32
    4672:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    4676:	1c99      	adds	r1, r3, #2
    4678:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    467c:	4422      	add	r2, r4
    467e:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    for( i = 0; i < 8; i++ )
    4682:	3301      	adds	r3, #1
    4684:	2b07      	cmp	r3, #7
    4686:	d9f3      	bls.n	4670 <mbedtls_internal_sha256_process+0x784>

    return( 0 );
}
    4688:	2000      	movs	r0, #0
    468a:	b051      	add	sp, #324	; 0x144
    468c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4690:	000093b4 	.word	0x000093b4

00004694 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    4694:	b570      	push	{r4, r5, r6, lr}
    4696:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4698:	4b11      	ldr	r3, [pc, #68]	; (46e0 <z_sys_init_run_level+0x4c>)
    469a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    469e:	e000      	b.n	46a2 <z_sys_init_run_level+0xe>
    46a0:	3508      	adds	r5, #8
    46a2:	1c73      	adds	r3, r6, #1
    46a4:	4a0e      	ldr	r2, [pc, #56]	; (46e0 <z_sys_init_run_level+0x4c>)
    46a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    46aa:	42ab      	cmp	r3, r5
    46ac:	d917      	bls.n	46de <z_sys_init_run_level+0x4a>
		const struct device *dev = entry->dev;
    46ae:	686c      	ldr	r4, [r5, #4]

		if (dev != NULL) {
			z_object_init(dev);
		}

		if ((entry->init(dev) != 0) && (dev != NULL)) {
    46b0:	682b      	ldr	r3, [r5, #0]
    46b2:	4620      	mov	r0, r4
    46b4:	4798      	blx	r3
    46b6:	2800      	cmp	r0, #0
    46b8:	d0f2      	beq.n	46a0 <z_sys_init_run_level+0xc>
    46ba:	2c00      	cmp	r4, #0
    46bc:	d0f0      	beq.n	46a0 <z_sys_init_run_level+0xc>
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
    46be:	4909      	ldr	r1, [pc, #36]	; (46e4 <z_sys_init_run_level+0x50>)
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
    46c0:	4b09      	ldr	r3, [pc, #36]	; (46e8 <z_sys_init_run_level+0x54>)
    46c2:	1ae4      	subs	r4, r4, r3
    46c4:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    46c6:	0960      	lsrs	r0, r4, #5
    46c8:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
    46cc:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
    46d0:	2201      	movs	r2, #1
    46d2:	fa02 f404 	lsl.w	r4, r2, r4
    46d6:	431c      	orrs	r4, r3
    46d8:	f841 4020 	str.w	r4, [r1, r0, lsl #2]
    46dc:	e7e0      	b.n	46a0 <z_sys_init_run_level+0xc>
		}
	}
}
    46de:	bd70      	pop	{r4, r5, r6, pc}
    46e0:	000094b4 	.word	0x000094b4
    46e4:	200000e0 	.word	0x200000e0
    46e8:	20000080 	.word	0x20000080

000046ec <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
    46ec:	4b08      	ldr	r3, [pc, #32]	; (4710 <z_device_ready+0x24>)
    46ee:	1ac0      	subs	r0, r0, r3
    46f0:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    46f2:	0942      	lsrs	r2, r0, #5
    46f4:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
    46f8:	4b06      	ldr	r3, [pc, #24]	; (4714 <z_device_ready+0x28>)
    46fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
    46fe:	2301      	movs	r3, #1
    4700:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
    4704:	4202      	tst	r2, r0
}
    4706:	bf0c      	ite	eq
    4708:	4618      	moveq	r0, r3
    470a:	2000      	movne	r0, #0
    470c:	4770      	bx	lr
    470e:	bf00      	nop
    4710:	20000080 	.word	0x20000080
    4714:	200000e0 	.word	0x200000e0

00004718 <z_impl_device_get_binding>:
{
    4718:	b538      	push	{r3, r4, r5, lr}
    471a:	4605      	mov	r5, r0
	for (dev = __device_start; dev != __device_end; dev++) {
    471c:	4c11      	ldr	r4, [pc, #68]	; (4764 <z_impl_device_get_binding+0x4c>)
    471e:	e000      	b.n	4722 <z_impl_device_get_binding+0xa>
    4720:	3410      	adds	r4, #16
    4722:	4b11      	ldr	r3, [pc, #68]	; (4768 <z_impl_device_get_binding+0x50>)
    4724:	429c      	cmp	r4, r3
    4726:	d008      	beq.n	473a <z_impl_device_get_binding+0x22>
		if (z_device_ready(dev) && (dev->name == name)) {
    4728:	4620      	mov	r0, r4
    472a:	f7ff ffdf 	bl	46ec <z_device_ready>
    472e:	2800      	cmp	r0, #0
    4730:	d0f6      	beq.n	4720 <z_impl_device_get_binding+0x8>
    4732:	6823      	ldr	r3, [r4, #0]
    4734:	42ab      	cmp	r3, r5
    4736:	d1f3      	bne.n	4720 <z_impl_device_get_binding+0x8>
    4738:	e012      	b.n	4760 <z_impl_device_get_binding+0x48>
	for (dev = __device_start; dev != __device_end; dev++) {
    473a:	4c0a      	ldr	r4, [pc, #40]	; (4764 <z_impl_device_get_binding+0x4c>)
    473c:	e000      	b.n	4740 <z_impl_device_get_binding+0x28>
    473e:	3410      	adds	r4, #16
    4740:	4b09      	ldr	r3, [pc, #36]	; (4768 <z_impl_device_get_binding+0x50>)
    4742:	429c      	cmp	r4, r3
    4744:	d00b      	beq.n	475e <z_impl_device_get_binding+0x46>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4746:	4620      	mov	r0, r4
    4748:	f7ff ffd0 	bl	46ec <z_device_ready>
    474c:	2800      	cmp	r0, #0
    474e:	d0f6      	beq.n	473e <z_impl_device_get_binding+0x26>
    4750:	6821      	ldr	r1, [r4, #0]
    4752:	4628      	mov	r0, r5
    4754:	f001 ff4a 	bl	65ec <strcmp>
    4758:	2800      	cmp	r0, #0
    475a:	d1f0      	bne.n	473e <z_impl_device_get_binding+0x26>
    475c:	e000      	b.n	4760 <z_impl_device_get_binding+0x48>
	return NULL;
    475e:	2400      	movs	r4, #0
}
    4760:	4620      	mov	r0, r4
    4762:	bd38      	pop	{r3, r4, r5, pc}
    4764:	20000080 	.word	0x20000080
    4768:	200000e0 	.word	0x200000e0

0000476c <z_bss_zero>:
 * This routine clears the BSS region, so all bytes are 0.
 *
 * @return N/A
 */
void z_bss_zero(void)
{
    476c:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    476e:	4803      	ldr	r0, [pc, #12]	; (477c <z_bss_zero+0x10>)
    4770:	4a03      	ldr	r2, [pc, #12]	; (4780 <z_bss_zero+0x14>)
    4772:	1a12      	subs	r2, r2, r0
    4774:	2100      	movs	r1, #0
    4776:	f001 ff7d 	bl	6674 <memset>
#endif	/* CONFIG_CODE_DATA_RELOCATION */
#ifdef CONFIG_COVERAGE_GCOV
	(void)memset(&__gcov_bss_start, 0,
		 ((uint32_t) &__gcov_bss_end - (uint32_t) &__gcov_bss_start));
#endif
}
    477a:	bd08      	pop	{r3, pc}
    477c:	200000f8 	.word	0x200000f8
    4780:	20002834 	.word	0x20002834

00004784 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    4784:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    4786:	4806      	ldr	r0, [pc, #24]	; (47a0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    4788:	4a06      	ldr	r2, [pc, #24]	; (47a4 <z_data_copy+0x20>)
    478a:	1a12      	subs	r2, r2, r0
    478c:	4906      	ldr	r1, [pc, #24]	; (47a8 <z_data_copy+0x24>)
    478e:	f001 ff4e 	bl	662e <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    4792:	4a06      	ldr	r2, [pc, #24]	; (47ac <z_data_copy+0x28>)
    4794:	4906      	ldr	r1, [pc, #24]	; (47b0 <z_data_copy+0x2c>)
    4796:	4807      	ldr	r0, [pc, #28]	; (47b4 <z_data_copy+0x30>)
    4798:	f001 ff49 	bl	662e <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    479c:	bd08      	pop	{r3, pc}
    479e:	bf00      	nop
    47a0:	20000000 	.word	0x20000000
    47a4:	200000f4 	.word	0x200000f4
    47a8:	0000951c 	.word	0x0000951c
    47ac:	00000000 	.word	0x00000000
    47b0:	0000951c 	.word	0x0000951c
    47b4:	20000000 	.word	0x20000000

000047b8 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    47b8:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    47ba:	4b0b      	ldr	r3, [pc, #44]	; (47e8 <bg_thread_main+0x30>)
    47bc:	2201      	movs	r2, #1
    47be:	701a      	strb	r2, [r3, #0]

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    47c0:	2002      	movs	r0, #2
    47c2:	f7ff ff67 	bl	4694 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    47c6:	4a09      	ldr	r2, [pc, #36]	; (47ec <bg_thread_main+0x34>)
    47c8:	4909      	ldr	r1, [pc, #36]	; (47f0 <bg_thread_main+0x38>)
    47ca:	480a      	ldr	r0, [pc, #40]	; (47f4 <bg_thread_main+0x3c>)
    47cc:	f001 f9b4 	bl	5b38 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    47d0:	2003      	movs	r0, #3
    47d2:	f7ff ff5f 	bl	4694 <z_sys_init_run_level>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    47d6:	f7fb fe33 	bl	440 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    47da:	4a07      	ldr	r2, [pc, #28]	; (47f8 <bg_thread_main+0x40>)
    47dc:	7b13      	ldrb	r3, [r2, #12]
    47de:	f023 0301 	bic.w	r3, r3, #1
    47e2:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    47e4:	bd08      	pop	{r3, pc}
    47e6:	bf00      	nop
    47e8:	20002831 	.word	0x20002831
    47ec:	00009084 	.word	0x00009084
    47f0:	000094cc 	.word	0x000094cc
    47f4:	000094f0 	.word	0x000094f0
    47f8:	200000f8 	.word	0x200000f8

000047fc <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    47fc:	b508      	push	{r3, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    47fe:	f7fd f91b 	bl	1a38 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    4802:	4b12      	ldr	r3, [pc, #72]	; (484c <z_cstart+0x50>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4804:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4808:	4c11      	ldr	r4, [pc, #68]	; (4850 <z_cstart+0x54>)
    480a:	23e0      	movs	r3, #224	; 0xe0
    480c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    4810:	2500      	movs	r5, #0
    4812:	77e5      	strb	r5, [r4, #31]
    4814:	7625      	strb	r5, [r4, #24]
    4816:	7665      	strb	r5, [r4, #25]
    4818:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    481a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    481c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4820:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4822:	f7fe f813 	bl	284c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4826:	f7fd fecb 	bl	25c0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    482a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    482e:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4830:	62e3      	str	r3, [r4, #44]	; 0x2c

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4832:	4628      	mov	r0, r5
    4834:	f7ff ff2e 	bl	4694 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4838:	2001      	movs	r0, #1
    483a:	f7ff ff2b 	bl	4694 <z_sys_init_run_level>
#else
#ifdef ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING
	/* Custom ARCH-specific routine to switch to main()
	 * in the case of no multi-threading.
	 */
	ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING(bg_thread_main,
    483e:	462b      	mov	r3, r5
    4840:	462a      	mov	r2, r5
    4842:	4629      	mov	r1, r5
    4844:	4803      	ldr	r0, [pc, #12]	; (4854 <z_cstart+0x58>)
    4846:	f7fd fea5 	bl	2594 <z_arm_switch_to_main_no_multithreading>
    484a:	bf00      	nop
    484c:	20005838 	.word	0x20005838
    4850:	e000ed00 	.word	0xe000ed00
    4854:	000047b9 	.word	0x000047b9

00004858 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    4858:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    485a:	4c06      	ldr	r4, [pc, #24]	; (4874 <init_mem_slab_module+0x1c>)
	int rc = 0;
    485c:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    485e:	4b06      	ldr	r3, [pc, #24]	; (4878 <init_mem_slab_module+0x20>)
    4860:	429c      	cmp	r4, r3
    4862:	d206      	bcs.n	4872 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    4864:	4620      	mov	r0, r4
    4866:	f003 feeb 	bl	8640 <create_free_list>
		if (rc < 0) {
    486a:	2800      	cmp	r0, #0
    486c:	db01      	blt.n	4872 <init_mem_slab_module+0x1a>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    486e:	341c      	adds	r4, #28
    4870:	e7f5      	b.n	485e <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
    4872:	bd10      	pop	{r4, pc}
    4874:	200000e4 	.word	0x200000e4
    4878:	200000e4 	.word	0x200000e4

0000487c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    487c:	4608      	mov	r0, r1
    487e:	b981      	cbnz	r1, 48a2 <z_reschedule+0x26>
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    4880:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4882:	f3ef 8305 	mrs	r3, IPSR
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4886:	b93b      	cbnz	r3, 4898 <z_reschedule+0x1c>
#ifdef CONFIG_SMP
extern struct k_thread *z_get_next_ready_thread(void);
#else
static ALWAYS_INLINE struct k_thread *z_get_next_ready_thread(void)
{
	return _kernel.ready_q.cache;
    4888:	4b08      	ldr	r3, [pc, #32]	; (48ac <z_reschedule+0x30>)
    488a:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    488c:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    488e:	429a      	cmp	r2, r3
    4890:	d002      	beq.n	4898 <z_reschedule+0x1c>
	ret = arch_swap(key);
    4892:	f7fd fdfd 	bl	2490 <arch_swap>
		z_swap(lock, key);
    4896:	e003      	b.n	48a0 <z_reschedule+0x24>
	__asm__ volatile(
    4898:	f380 8811 	msr	BASEPRI, r0
    489c:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    48a0:	bd08      	pop	{r3, pc}
    48a2:	f381 8811 	msr	BASEPRI, r1
    48a6:	f3bf 8f6f 	isb	sy
    48aa:	4770      	bx	lr
    48ac:	20002800 	.word	0x20002800

000048b0 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    48b0:	4b0a      	ldr	r3, [pc, #40]	; (48dc <z_priq_dumb_remove+0x2c>)
    48b2:	4283      	cmp	r3, r0
    48b4:	d008      	beq.n	48c8 <z_priq_dumb_remove+0x18>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    48b6:	684a      	ldr	r2, [r1, #4]
    48b8:	680b      	ldr	r3, [r1, #0]
    48ba:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    48bc:	684a      	ldr	r2, [r1, #4]
    48be:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    48c0:	2300      	movs	r3, #0
    48c2:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    48c4:	604b      	str	r3, [r1, #4]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    48c6:	4770      	bx	lr
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    48c8:	3b20      	subs	r3, #32
    48ca:	689b      	ldr	r3, [r3, #8]
    48cc:	428b      	cmp	r3, r1
    48ce:	d1f2      	bne.n	48b6 <z_priq_dumb_remove+0x6>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
}

static inline bool z_is_thread_prevented_from_running(struct k_thread *thread)
{
	uint8_t state = thread->base.thread_state;
    48d0:	7b4b      	ldrb	r3, [r1, #13]
    48d2:	f013 0f1f 	tst.w	r3, #31
    48d6:	d0ee      	beq.n	48b6 <z_priq_dumb_remove+0x6>
    48d8:	e7f5      	b.n	48c6 <z_priq_dumb_remove+0x16>
    48da:	bf00      	nop
    48dc:	20002820 	.word	0x20002820

000048e0 <update_cache>:
{
    48e0:	b538      	push	{r3, r4, r5, lr}
    48e2:	4605      	mov	r5, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    48e4:	4c0e      	ldr	r4, [pc, #56]	; (4920 <update_cache+0x40>)
    48e6:	f104 0020 	add.w	r0, r4, #32
    48ea:	f003 fedc 	bl	86a6 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
    48ee:	68a2      	ldr	r2, [r4, #8]
    48f0:	7b53      	ldrb	r3, [r2, #13]
    48f2:	f013 0f20 	tst.w	r3, #32
    48f6:	d002      	beq.n	48fe <update_cache+0x1e>
		_current->base.thread_state |= _THREAD_DEAD;
    48f8:	f043 0308 	orr.w	r3, r3, #8
    48fc:	7353      	strb	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
    48fe:	b148      	cbz	r0, 4914 <update_cache+0x34>
	if (preempt_ok != 0) {
    4900:	b95d      	cbnz	r5, 491a <update_cache+0x3a>
    4902:	7b53      	ldrb	r3, [r2, #13]
	if (z_is_thread_prevented_from_running(_current)) {
    4904:	f013 0f1f 	tst.w	r3, #31
    4908:	d107      	bne.n	491a <update_cache+0x3a>
	return node->next != NULL;
    490a:	6983      	ldr	r3, [r0, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    490c:	b92b      	cbnz	r3, 491a <update_cache+0x3a>
		_kernel.ready_q.cache = _current;
    490e:	4b04      	ldr	r3, [pc, #16]	; (4920 <update_cache+0x40>)
    4910:	61da      	str	r2, [r3, #28]
    4912:	e004      	b.n	491e <update_cache+0x3e>
	return thread ? thread : _current_cpu->idle_thread;
    4914:	4b02      	ldr	r3, [pc, #8]	; (4920 <update_cache+0x40>)
    4916:	68d8      	ldr	r0, [r3, #12]
    4918:	e7f2      	b.n	4900 <update_cache+0x20>
		_kernel.ready_q.cache = thread;
    491a:	4b01      	ldr	r3, [pc, #4]	; (4920 <update_cache+0x40>)
    491c:	61d8      	str	r0, [r3, #28]
}
    491e:	bd38      	pop	{r3, r4, r5, pc}
    4920:	20002800 	.word	0x20002800

00004924 <ready_thread>:
{
    4924:	b538      	push	{r3, r4, r5, lr}
    4926:	7b43      	ldrb	r3, [r0, #13]
	return !z_is_inactive_timeout(&thread->base.timeout);
}

static inline bool z_is_thread_ready(struct k_thread *thread)
{
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    4928:	f013 0f1f 	tst.w	r3, #31
    492c:	d105      	bne.n	493a <ready_thread+0x16>
    492e:	6983      	ldr	r3, [r0, #24]
    4930:	b10b      	cbz	r3, 4936 <ready_thread+0x12>
    4932:	2300      	movs	r3, #0
    4934:	e002      	b.n	493c <ready_thread+0x18>
    4936:	2301      	movs	r3, #1
    4938:	e000      	b.n	493c <ready_thread+0x18>
    493a:	2300      	movs	r3, #0
	if (z_is_thread_ready(thread)) {
    493c:	b313      	cbz	r3, 4984 <ready_thread+0x60>
    493e:	4605      	mov	r5, r0
	return list->head == list;
    4940:	4b15      	ldr	r3, [pc, #84]	; (4998 <ready_thread+0x74>)
    4942:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4946:	429c      	cmp	r4, r3
    4948:	d024      	beq.n	4994 <ready_thread+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    494a:	b164      	cbz	r4, 4966 <ready_thread+0x42>
		if (z_is_t1_higher_prio_than_t2(thread, t)) {
    494c:	4621      	mov	r1, r4
    494e:	4628      	mov	r0, r5
    4950:	f003 fe91 	bl	8676 <z_is_t1_higher_prio_than_t2>
    4954:	b9b8      	cbnz	r0, 4986 <ready_thread+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4956:	b134      	cbz	r4, 4966 <ready_thread+0x42>
	return (node == list->tail) ? NULL : node->next;
    4958:	4b0f      	ldr	r3, [pc, #60]	; (4998 <ready_thread+0x74>)
    495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    495c:	429c      	cmp	r4, r3
    495e:	d002      	beq.n	4966 <ready_thread+0x42>
    4960:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4962:	2c00      	cmp	r4, #0
    4964:	d1f1      	bne.n	494a <ready_thread+0x26>
	node->next = list;
    4966:	4b0c      	ldr	r3, [pc, #48]	; (4998 <ready_thread+0x74>)
    4968:	f103 0220 	add.w	r2, r3, #32
    496c:	602a      	str	r2, [r5, #0]
	node->prev = list->tail;
    496e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4970:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
    4972:	6015      	str	r5, [r2, #0]
	list->tail = node;
    4974:	625d      	str	r5, [r3, #36]	; 0x24
	thread->base.thread_state &= ~_THREAD_PENDING;
}

static inline void z_set_thread_states(struct k_thread *thread, uint32_t states)
{
	thread->base.thread_state |= states;
    4976:	7b6b      	ldrb	r3, [r5, #13]
    4978:	f063 037f 	orn	r3, r3, #127	; 0x7f
    497c:	736b      	strb	r3, [r5, #13]
		update_cache(0);
    497e:	2000      	movs	r0, #0
    4980:	f7ff ffae 	bl	48e0 <update_cache>
}
    4984:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = successor->prev;
    4986:	6863      	ldr	r3, [r4, #4]
    4988:	606b      	str	r3, [r5, #4]
	node->next = successor;
    498a:	602c      	str	r4, [r5, #0]
	successor->prev->next = node;
    498c:	6863      	ldr	r3, [r4, #4]
    498e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    4990:	6065      	str	r5, [r4, #4]
    4992:	e7f0      	b.n	4976 <ready_thread+0x52>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4994:	2400      	movs	r4, #0
    4996:	e7d8      	b.n	494a <ready_thread+0x26>
    4998:	20002800 	.word	0x20002800

0000499c <z_impl_k_thread_suspend>:
{
    499c:	b538      	push	{r3, r4, r5, lr}
    499e:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    49a0:	3018      	adds	r0, #24
    49a2:	f003 ff19 	bl	87d8 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    49a6:	2300      	movs	r3, #0
	__asm__ volatile(
    49a8:	f04f 0220 	mov.w	r2, #32
    49ac:	f3ef 8511 	mrs	r5, BASEPRI
    49b0:	f382 8811 	msr	BASEPRI, r2
    49b4:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    49b8:	e010      	b.n	49dc <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    49ba:	7b63      	ldrb	r3, [r4, #13]
    49bc:	f043 0310 	orr.w	r3, r3, #16
    49c0:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    49c2:	4b15      	ldr	r3, [pc, #84]	; (4a18 <z_impl_k_thread_suspend+0x7c>)
    49c4:	6898      	ldr	r0, [r3, #8]
    49c6:	42a0      	cmp	r0, r4
    49c8:	bf14      	ite	ne
    49ca:	2000      	movne	r0, #0
    49cc:	2001      	moveq	r0, #1
    49ce:	f7ff ff87 	bl	48e0 <update_cache>
	__asm__ volatile(
    49d2:	f385 8811 	msr	BASEPRI, r5
    49d6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    49da:	2301      	movs	r3, #1
    49dc:	b963      	cbnz	r3, 49f8 <z_impl_k_thread_suspend+0x5c>
		if (z_is_thread_queued(thread)) {
    49de:	f994 300d 	ldrsb.w	r3, [r4, #13]
    49e2:	2b00      	cmp	r3, #0
    49e4:	dae9      	bge.n	49ba <z_impl_k_thread_suspend+0x1e>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    49e6:	4621      	mov	r1, r4
    49e8:	480c      	ldr	r0, [pc, #48]	; (4a1c <z_impl_k_thread_suspend+0x80>)
    49ea:	f7ff ff61 	bl	48b0 <z_priq_dumb_remove>
}

static inline void z_reset_thread_states(struct k_thread *thread,
					uint32_t states)
{
	thread->base.thread_state &= ~states;
    49ee:	7b63      	ldrb	r3, [r4, #13]
    49f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    49f4:	7363      	strb	r3, [r4, #13]
    49f6:	e7e0      	b.n	49ba <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    49f8:	4b07      	ldr	r3, [pc, #28]	; (4a18 <z_impl_k_thread_suspend+0x7c>)
    49fa:	689b      	ldr	r3, [r3, #8]
    49fc:	42a3      	cmp	r3, r4
    49fe:	d000      	beq.n	4a02 <z_impl_k_thread_suspend+0x66>
}
    4a00:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4a02:	f04f 0320 	mov.w	r3, #32
    4a06:	f3ef 8011 	mrs	r0, BASEPRI
    4a0a:	f383 8811 	msr	BASEPRI, r3
    4a0e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    4a12:	f003 fe3a 	bl	868a <z_reschedule_irqlock>
    4a16:	e7f3      	b.n	4a00 <z_impl_k_thread_suspend+0x64>
    4a18:	20002800 	.word	0x20002800
    4a1c:	20002820 	.word	0x20002820

00004a20 <z_thread_single_abort>:
{
    4a20:	b570      	push	{r4, r5, r6, lr}
    4a22:	4605      	mov	r5, r0
	if (thread->fn_abort != NULL) {
    4a24:	6e03      	ldr	r3, [r0, #96]	; 0x60
    4a26:	b103      	cbz	r3, 4a2a <z_thread_single_abort+0xa>
		thread->fn_abort();
    4a28:	4798      	blx	r3
    4a2a:	f105 0018 	add.w	r0, r5, #24
    4a2e:	f003 fed3 	bl	87d8 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    4a32:	2300      	movs	r3, #0
    4a34:	f04f 0220 	mov.w	r2, #32
    4a38:	f3ef 8611 	mrs	r6, BASEPRI
    4a3c:	f382 8811 	msr	BASEPRI, r2
    4a40:	f3bf 8f6f 	isb	sy
    4a44:	e03a      	b.n	4abc <z_thread_single_abort+0x9c>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    4a46:	2201      	movs	r2, #1
    4a48:	e041      	b.n	4ace <z_thread_single_abort+0xae>
				_priq_run_remove(&_kernel.ready_q.runq,
    4a4a:	4629      	mov	r1, r5
    4a4c:	482a      	ldr	r0, [pc, #168]	; (4af8 <z_thread_single_abort+0xd8>)
    4a4e:	f7ff ff2f 	bl	48b0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    4a52:	7b6b      	ldrb	r3, [r5, #13]
    4a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4a58:	736b      	strb	r3, [r5, #13]
    4a5a:	e03e      	b.n	4ada <z_thread_single_abort+0xba>
			if (z_is_thread_pending(thread)) {
    4a5c:	f013 0f02 	tst.w	r3, #2
    4a60:	d043      	beq.n	4aea <z_thread_single_abort+0xca>
				_priq_wait_remove(&pended_on(thread)->waitq,
    4a62:	4628      	mov	r0, r5
    4a64:	f003 fe03 	bl	866e <pended_on>
    4a68:	4629      	mov	r1, r5
    4a6a:	f7ff ff21 	bl	48b0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4a6e:	7b6b      	ldrb	r3, [r5, #13]
    4a70:	f023 0302 	bic.w	r3, r3, #2
    4a74:	736b      	strb	r3, [r5, #13]
				thread->base.pended_on = NULL;
    4a76:	2300      	movs	r3, #0
    4a78:	60ab      	str	r3, [r5, #8]
    4a7a:	e036      	b.n	4aea <z_thread_single_abort+0xca>
    4a7c:	f104 0018 	add.w	r0, r4, #24
    4a80:	f003 feaa 	bl	87d8 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    4a84:	4620      	mov	r0, r4
    4a86:	f003 fdf2 	bl	866e <pended_on>
    4a8a:	4621      	mov	r1, r4
    4a8c:	f7ff ff10 	bl	48b0 <z_priq_dumb_remove>
    4a90:	7b63      	ldrb	r3, [r4, #13]
    4a92:	f023 0302 	bic.w	r3, r3, #2
    4a96:	7363      	strb	r3, [r4, #13]
			waiter->base.pended_on = NULL;
    4a98:	2300      	movs	r3, #0
    4a9a:	60a3      	str	r3, [r4, #8]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4a9c:	67e3      	str	r3, [r4, #124]	; 0x7c
			ready_thread(waiter);
    4a9e:	4620      	mov	r0, r4
    4aa0:	f7ff ff40 	bl	4924 <ready_thread>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    4aa4:	f105 0330 	add.w	r3, r5, #48	; 0x30
	return list->head == list;
    4aa8:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4aaa:	42a3      	cmp	r3, r4
    4aac:	d001      	beq.n	4ab2 <z_thread_single_abort+0x92>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    4aae:	2c00      	cmp	r4, #0
    4ab0:	d1e4      	bne.n	4a7c <z_thread_single_abort+0x5c>
	__asm__ volatile(
    4ab2:	f386 8811 	msr	BASEPRI, r6
    4ab6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4aba:	2301      	movs	r3, #1
    4abc:	461a      	mov	r2, r3
    4abe:	b9cb      	cbnz	r3, 4af4 <z_thread_single_abort+0xd4>
	uint8_t state = thread->base.thread_state;
    4ac0:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    4ac2:	f013 0f1f 	tst.w	r3, #31
    4ac6:	d102      	bne.n	4ace <z_thread_single_abort+0xae>
	return node->next != NULL;
    4ac8:	69a9      	ldr	r1, [r5, #24]
    4aca:	2900      	cmp	r1, #0
    4acc:	d0bb      	beq.n	4a46 <z_thread_single_abort+0x26>
		if (z_is_thread_ready(thread)) {
    4ace:	f012 0f01 	tst.w	r2, #1
    4ad2:	d0c3      	beq.n	4a5c <z_thread_single_abort+0x3c>
			if (z_is_thread_queued(thread)) {
    4ad4:	f013 0f80 	tst.w	r3, #128	; 0x80
    4ad8:	d1b7      	bne.n	4a4a <z_thread_single_abort+0x2a>
			update_cache(thread == _current);
    4ada:	4b08      	ldr	r3, [pc, #32]	; (4afc <z_thread_single_abort+0xdc>)
    4adc:	6898      	ldr	r0, [r3, #8]
    4ade:	42a8      	cmp	r0, r5
    4ae0:	bf14      	ite	ne
    4ae2:	2000      	movne	r0, #0
    4ae4:	2001      	moveq	r0, #1
    4ae6:	f7ff fefb 	bl	48e0 <update_cache>
		thread->base.thread_state |= mask;
    4aea:	7b6b      	ldrb	r3, [r5, #13]
    4aec:	f043 0308 	orr.w	r3, r3, #8
    4af0:	736b      	strb	r3, [r5, #13]
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    4af2:	e7d7      	b.n	4aa4 <z_thread_single_abort+0x84>
}
    4af4:	bd70      	pop	{r4, r5, r6, pc}
    4af6:	bf00      	nop
    4af8:	20002820 	.word	0x20002820
    4afc:	20002800 	.word	0x20002800

00004b00 <z_impl_k_sleep>:

	return 0;
}

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    4b00:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4b02:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    4b06:	bf08      	it	eq
    4b08:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
    4b0c:	d01a      	beq.n	4b44 <z_impl_k_sleep+0x44>
	ticks = k_ms_to_ticks_ceil32(timeout);
#else
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
    4b0e:	f003 fdb0 	bl	8672 <z_tick_sleep>
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
    4b12:	4604      	mov	r4, r0
    4b14:	17c5      	asrs	r5, r0, #31
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    4b16:	0169      	lsls	r1, r5, #5
    4b18:	0143      	lsls	r3, r0, #5
    4b1a:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    4b1e:	1a1b      	subs	r3, r3, r0
    4b20:	eb62 0205 	sbc.w	r2, r2, r5
    4b24:	0091      	lsls	r1, r2, #2
    4b26:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
    4b2a:	0098      	lsls	r0, r3, #2
    4b2c:	460a      	mov	r2, r1
    4b2e:	1903      	adds	r3, r0, r4
    4b30:	eb45 0202 	adc.w	r2, r5, r2
    4b34:	00d0      	lsls	r0, r2, #3
    4b36:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    4b3a:	00d9      	lsls	r1, r3, #3
    4b3c:	0bcb      	lsrs	r3, r1, #15
    4b3e:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    4b42:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
    4b44:	4b03      	ldr	r3, [pc, #12]	; (4b54 <z_impl_k_sleep+0x54>)
    4b46:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4b48:	f7ff ff28 	bl	499c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    4b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4b50:	e7f7      	b.n	4b42 <z_impl_k_sleep+0x42>
    4b52:	bf00      	nop
    4b54:	20002800 	.word	0x20002800

00004b58 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    4b58:	4b01      	ldr	r3, [pc, #4]	; (4b60 <z_impl_k_current_get+0x8>)
    4b5a:	6898      	ldr	r0, [r3, #8]
    4b5c:	4770      	bx	lr
    4b5e:	bf00      	nop
    4b60:	20002800 	.word	0x20002800

00004b64 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4b64:	b538      	push	{r3, r4, r5, lr}
    4b66:	4604      	mov	r4, r0
	__asm__ volatile(
    4b68:	f04f 0320 	mov.w	r3, #32
    4b6c:	f3ef 8511 	mrs	r5, BASEPRI
    4b70:	f383 8811 	msr	BASEPRI, r3
    4b74:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
    4b78:	f003 fdb2 	bl	86e0 <z_unpend_first_thread>

	if (thread != NULL) {
    4b7c:	b140      	cbz	r0, 4b90 <z_impl_k_sem_give+0x2c>
    4b7e:	2200      	movs	r2, #0
    4b80:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    4b82:	f003 fd97 	bl	86b4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    4b86:	4629      	mov	r1, r5
    4b88:	4806      	ldr	r0, [pc, #24]	; (4ba4 <z_impl_k_sem_give+0x40>)
    4b8a:	f7ff fe77 	bl	487c <z_reschedule>
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
    4b8e:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4b90:	68a3      	ldr	r3, [r4, #8]
    4b92:	68e2      	ldr	r2, [r4, #12]
    4b94:	4293      	cmp	r3, r2
    4b96:	d003      	beq.n	4ba0 <z_impl_k_sem_give+0x3c>
    4b98:	2201      	movs	r2, #1
    4b9a:	4413      	add	r3, r2
    4b9c:	60a3      	str	r3, [r4, #8]
	ARG_UNUSED(sem);
    4b9e:	e7f2      	b.n	4b86 <z_impl_k_sem_give+0x22>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4ba0:	2200      	movs	r2, #0
    4ba2:	e7fa      	b.n	4b9a <z_impl_k_sem_give+0x36>
    4ba4:	20002828 	.word	0x20002828

00004ba8 <first>:
	return list->head == list;
    4ba8:	4b03      	ldr	r3, [pc, #12]	; (4bb8 <first+0x10>)
    4baa:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4bac:	4298      	cmp	r0, r3
    4bae:	d000      	beq.n	4bb2 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    4bb0:	4770      	bx	lr
    4bb2:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    4bb4:	e7fc      	b.n	4bb0 <first+0x8>
    4bb6:	bf00      	nop
    4bb8:	20000078 	.word	0x20000078

00004bbc <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4bbc:	b130      	cbz	r0, 4bcc <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    4bbe:	4a04      	ldr	r2, [pc, #16]	; (4bd0 <next+0x14>)
    4bc0:	6852      	ldr	r2, [r2, #4]
    4bc2:	4290      	cmp	r0, r2
    4bc4:	d001      	beq.n	4bca <next+0xe>
    4bc6:	6800      	ldr	r0, [r0, #0]
    4bc8:	4770      	bx	lr
    4bca:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    4bcc:	4770      	bx	lr
    4bce:	bf00      	nop
    4bd0:	20000078 	.word	0x20000078

00004bd4 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    4bd4:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    4bd6:	4b04      	ldr	r3, [pc, #16]	; (4be8 <elapsed+0x14>)
    4bd8:	681b      	ldr	r3, [r3, #0]
    4bda:	b10b      	cbz	r3, 4be0 <elapsed+0xc>
    4bdc:	2000      	movs	r0, #0
}
    4bde:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    4be0:	f7fd fc28 	bl	2434 <z_clock_elapsed>
    4be4:	e7fb      	b.n	4bde <elapsed+0xa>
    4be6:	bf00      	nop
    4be8:	20002828 	.word	0x20002828

00004bec <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
    4bec:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
    4bf0:	f04f 0320 	mov.w	r3, #32
    4bf4:	f3ef 8511 	mrs	r5, BASEPRI
    4bf8:	f383 8811 	msr	BASEPRI, r3
    4bfc:	f3bf 8f6f 	isb	sy
	z_time_slice(ticks);
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    4c00:	4b29      	ldr	r3, [pc, #164]	; (4ca8 <z_clock_announce+0xbc>)
    4c02:	6018      	str	r0, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    4c04:	f7ff ffd0 	bl	4ba8 <first>
    4c08:	4604      	mov	r4, r0
    4c0a:	b358      	cbz	r0, 4c64 <z_clock_announce+0x78>
    4c0c:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    4c10:	4b25      	ldr	r3, [pc, #148]	; (4ca8 <z_clock_announce+0xbc>)
    4c12:	681b      	ldr	r3, [r3, #0]
    4c14:	17d9      	asrs	r1, r3, #31
    4c16:	42b3      	cmp	r3, r6
    4c18:	eb71 0207 	sbcs.w	r2, r1, r7
    4c1c:	db22      	blt.n	4c64 <z_clock_announce+0x78>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    4c1e:	4a23      	ldr	r2, [pc, #140]	; (4cac <z_clock_announce+0xc0>)
    4c20:	e9d2 0100 	ldrd	r0, r1, [r2]
    4c24:	eb10 0b06 	adds.w	fp, r0, r6
    4c28:	eb41 7ce6 	adc.w	ip, r1, r6, asr #31
    4c2c:	e9c2 bc00 	strd	fp, ip, [r2]
		announce_remaining -= dt;
    4c30:	1b9b      	subs	r3, r3, r6
    4c32:	4a1d      	ldr	r2, [pc, #116]	; (4ca8 <z_clock_announce+0xbc>)
    4c34:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    4c36:	2200      	movs	r2, #0
    4c38:	2300      	movs	r3, #0
    4c3a:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    4c3e:	4620      	mov	r0, r4
    4c40:	f003 fd93 	bl	876a <remove_timeout>
	__asm__ volatile(
    4c44:	f385 8811 	msr	BASEPRI, r5
    4c48:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    4c4c:	68a3      	ldr	r3, [r4, #8]
    4c4e:	4620      	mov	r0, r4
    4c50:	4798      	blx	r3
	__asm__ volatile(
    4c52:	f04f 0320 	mov.w	r3, #32
    4c56:	f3ef 8511 	mrs	r5, BASEPRI
    4c5a:	f383 8811 	msr	BASEPRI, r3
    4c5e:	f3bf 8f6f 	isb	sy
    4c62:	e7cf      	b.n	4c04 <z_clock_announce+0x18>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    4c64:	b144      	cbz	r4, 4c78 <z_clock_announce+0x8c>
		first()->dticks -= announce_remaining;
    4c66:	4b10      	ldr	r3, [pc, #64]	; (4ca8 <z_clock_announce+0xbc>)
    4c68:	6819      	ldr	r1, [r3, #0]
    4c6a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    4c6e:	1a56      	subs	r6, r2, r1
    4c70:	eb63 77e1 	sbc.w	r7, r3, r1, asr #31
    4c74:	e9c4 6704 	strd	r6, r7, [r4, #16]
	}

	curr_tick += announce_remaining;
    4c78:	480c      	ldr	r0, [pc, #48]	; (4cac <z_clock_announce+0xc0>)
    4c7a:	490b      	ldr	r1, [pc, #44]	; (4ca8 <z_clock_announce+0xbc>)
    4c7c:	680c      	ldr	r4, [r1, #0]
    4c7e:	e9d0 2300 	ldrd	r2, r3, [r0]
    4c82:	1916      	adds	r6, r2, r4
    4c84:	eb43 77e4 	adc.w	r7, r3, r4, asr #31
    4c88:	e9c0 6700 	strd	r6, r7, [r0]
	announce_remaining = 0;
    4c8c:	2400      	movs	r4, #0
    4c8e:	600c      	str	r4, [r1, #0]

	z_clock_set_timeout(next_timeout(), false);
    4c90:	f003 fd83 	bl	879a <next_timeout>
    4c94:	4621      	mov	r1, r4
    4c96:	f7fd fb9f 	bl	23d8 <z_clock_set_timeout>
	__asm__ volatile(
    4c9a:	f385 8811 	msr	BASEPRI, r5
    4c9e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    4ca2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
    4ca6:	bf00      	nop
    4ca8:	20002828 	.word	0x20002828
    4cac:	20000178 	.word	0x20000178

00004cb0 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
    4cb0:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    4cb2:	4c06      	ldr	r4, [pc, #24]	; (4ccc <statics_init+0x1c>)
    4cb4:	4b06      	ldr	r3, [pc, #24]	; (4cd0 <statics_init+0x20>)
    4cb6:	429c      	cmp	r4, r3
    4cb8:	d206      	bcs.n	4cc8 <statics_init+0x18>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    4cba:	68a2      	ldr	r2, [r4, #8]
    4cbc:	6861      	ldr	r1, [r4, #4]
    4cbe:	4620      	mov	r0, r4
    4cc0:	f003 fda8 	bl	8814 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    4cc4:	3414      	adds	r4, #20
    4cc6:	e7f5      	b.n	4cb4 <statics_init+0x4>
	}
	return 0;
}
    4cc8:	2000      	movs	r0, #0
    4cca:	bd10      	pop	{r4, pc}
    4ccc:	200000e4 	.word	0x200000e4
    4cd0:	200000e4 	.word	0x200000e4

00004cd4 <do_boot>:
{
    4cd4:	b570      	push	{r4, r5, r6, lr}
    4cd6:	b082      	sub	sp, #8
    4cd8:	4605      	mov	r5, r0
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
    4cda:	a901      	add	r1, sp, #4
    4cdc:	7900      	ldrb	r0, [r0, #4]
    4cde:	f7fb fc57 	bl	590 <flash_device_base>
                                     rsp->br_image_off +
    4ce2:	68ac      	ldr	r4, [r5, #8]
    vt = (struct arm_vector_table *)(flash_base +
    4ce4:	9b01      	ldr	r3, [sp, #4]
    4ce6:	441c      	add	r4, r3
                                     rsp->br_hdr->ih_hdr_size);
    4ce8:	682b      	ldr	r3, [r5, #0]
    4cea:	891d      	ldrh	r5, [r3, #8]
                                     rsp->br_image_off +
    4cec:	1966      	adds	r6, r4, r5
	__asm__ volatile(
    4cee:	f04f 0220 	mov.w	r2, #32
    4cf2:	f3ef 8311 	mrs	r3, BASEPRI
    4cf6:	f382 8811 	msr	BASEPRI, r2
    4cfa:	f3bf 8f6f 	isb	sy
    sys_clock_disable();
    4cfe:	f001 fbc0 	bl	6482 <sys_clock_disable>
    nrf_cleanup_peripheral();
    4d02:	f7fc fcf7 	bl	16f4 <nrf_cleanup_peripheral>
    cleanup_arm_nvic(); /* cleanup NVIC registers */
    4d06:	f7fc fcd5 	bl	16b4 <cleanup_arm_nvic>
    __set_MSP(vt->msp);
    4d0a:	5963      	ldr	r3, [r4, r5]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4d0c:	f383 8808 	msr	MSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    4d10:	2300      	movs	r3, #0
    4d12:	f383 8814 	msr	CONTROL, r3
    ((void (*)(void))vt->reset)();
    4d16:	6873      	ldr	r3, [r6, #4]
    4d18:	4798      	blx	r3
}
    4d1a:	b002      	add	sp, #8
    4d1c:	bd70      	pop	{r4, r5, r6, pc}

00004d1e <flash_area_id_from_multi_image_slot>:
 * MCUBoot uses continuous numbering for the primary slot, the secondary slot,
 * and the scratch while zephyr might number it differently.
 */
int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    4d1e:	b121      	cbz	r1, 4d2a <flash_area_id_from_multi_image_slot+0xc>
    4d20:	2901      	cmp	r1, #1
    4d22:	d004      	beq.n	4d2e <flash_area_id_from_multi_image_slot+0x10>
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
#endif
    }

    return -EINVAL; /* flash_area_open will fail on that */
    4d24:	f06f 0015 	mvn.w	r0, #21
    4d28:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    4d2a:	2003      	movs	r0, #3
    4d2c:	4770      	bx	lr
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    4d2e:	2007      	movs	r0, #7
}
    4d30:	4770      	bx	lr

00004d32 <flash_area_erased_val>:
#define ERASED_VAL 0xff
uint8_t flash_area_erased_val(const struct flash_area *fap)
{
    (void)fap;
    return ERASED_VAL;
}
    4d32:	20ff      	movs	r0, #255	; 0xff
    4d34:	4770      	bx	lr

00004d36 <flash_area_read_is_empty>:

int flash_area_read_is_empty(const struct flash_area *fa, uint32_t off,
        void *dst, uint32_t len)
{
    4d36:	b538      	push	{r3, r4, r5, lr}
    4d38:	4615      	mov	r5, r2
    4d3a:	461c      	mov	r4, r3
    uint8_t i;
    uint8_t *u8dst;
    int rc;

    rc = flash_area_read(fa, off, dst, len);
    4d3c:	f001 fa46 	bl	61cc <flash_area_read>
    if (rc) {
    4d40:	b958      	cbnz	r0, 4d5a <flash_area_read_is_empty+0x24>
    4d42:	4601      	mov	r1, r0
        return -1;
    }

    for (i = 0, u8dst = (uint8_t *)dst; i < len; i++) {
    4d44:	2300      	movs	r3, #0
    4d46:	42a3      	cmp	r3, r4
    4d48:	d205      	bcs.n	4d56 <flash_area_read_is_empty+0x20>
        if (u8dst[i] != ERASED_VAL) {
    4d4a:	5cea      	ldrb	r2, [r5, r3]
    4d4c:	2aff      	cmp	r2, #255	; 0xff
    4d4e:	d106      	bne.n	4d5e <flash_area_read_is_empty+0x28>
    for (i = 0, u8dst = (uint8_t *)dst; i < len; i++) {
    4d50:	3301      	adds	r3, #1
    4d52:	b2db      	uxtb	r3, r3
    4d54:	e7f7      	b.n	4d46 <flash_area_read_is_empty+0x10>
            return 0;
        }
    }

    return 1;
    4d56:	2101      	movs	r1, #1
    4d58:	e001      	b.n	4d5e <flash_area_read_is_empty+0x28>
        return -1;
    4d5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
}
    4d5e:	4608      	mov	r0, r1
    4d60:	bd38      	pop	{r3, r4, r5, pc}

00004d62 <bootutil_img_hash>:
{
    4d62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4d66:	b09d      	sub	sp, #116	; 0x74
    4d68:	4615      	mov	r5, r2
    4d6a:	4699      	mov	r9, r3
    4d6c:	9f24      	ldr	r7, [sp, #144]	; 0x90
    4d6e:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    4d72:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    mbedtls_sha256_init(ctx);
    4d74:	a801      	add	r0, sp, #4
    4d76:	f003 fb51 	bl	841c <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    4d7a:	2100      	movs	r1, #0
    4d7c:	a801      	add	r0, sp, #4
    4d7e:	f7ff f863 	bl	3e48 <mbedtls_sha256_starts_ret>
    if (seed && (seed_len > 0)) {
    4d82:	b114      	cbz	r4, 4d8a <bootutil_img_hash+0x28>
    4d84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    4d86:	2b00      	cmp	r3, #0
    4d88:	dc06      	bgt.n	4d98 <bootutil_img_hash+0x36>
    size = hdr_size = hdr->ih_hdr_size;
    4d8a:	892b      	ldrh	r3, [r5, #8]
    size += hdr->ih_img_size;
    4d8c:	68ee      	ldr	r6, [r5, #12]
    4d8e:	4433      	add	r3, r6
    size += hdr->ih_protect_tlv_size;
    4d90:	896e      	ldrh	r6, [r5, #10]
    4d92:	441e      	add	r6, r3
    for (off = 0; off < size; off += blk_sz) {
    4d94:	2500      	movs	r5, #0
    4d96:	e013      	b.n	4dc0 <bootutil_img_hash+0x5e>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    4d98:	461a      	mov	r2, r3
    4d9a:	4621      	mov	r1, r4
    4d9c:	a801      	add	r0, sp, #4
    4d9e:	f003 fb43 	bl	8428 <mbedtls_sha256_update_ret>
    4da2:	e7f2      	b.n	4d8a <bootutil_img_hash+0x28>
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
    4da4:	4623      	mov	r3, r4
    4da6:	463a      	mov	r2, r7
    4da8:	4629      	mov	r1, r5
    4daa:	4648      	mov	r0, r9
    4dac:	f001 fa0e 	bl	61cc <flash_area_read>
        if (rc) {
    4db0:	4603      	mov	r3, r0
    4db2:	b988      	cbnz	r0, 4dd8 <bootutil_img_hash+0x76>
    4db4:	4622      	mov	r2, r4
    4db6:	4639      	mov	r1, r7
    4db8:	a801      	add	r0, sp, #4
    4dba:	f003 fb35 	bl	8428 <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
    4dbe:	4425      	add	r5, r4
    4dc0:	42b5      	cmp	r5, r6
    4dc2:	d204      	bcs.n	4dce <bootutil_img_hash+0x6c>
        blk_sz = size - off;
    4dc4:	1b74      	subs	r4, r6, r5
        if (blk_sz > tmp_buf_sz) {
    4dc6:	4544      	cmp	r4, r8
    4dc8:	d9ec      	bls.n	4da4 <bootutil_img_hash+0x42>
            blk_sz = tmp_buf_sz;
    4dca:	4644      	mov	r4, r8
    4dcc:	e7ea      	b.n	4da4 <bootutil_img_hash+0x42>
    (void)mbedtls_sha256_finish_ret(ctx, output);
    4dce:	9926      	ldr	r1, [sp, #152]	; 0x98
    4dd0:	a801      	add	r0, sp, #4
    4dd2:	f003 fb6c 	bl	84ae <mbedtls_sha256_finish_ret>
    return 0;
    4dd6:	2300      	movs	r3, #0
}
    4dd8:	4618      	mov	r0, r3
    4dda:	b01d      	add	sp, #116	; 0x74
    4ddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00004de0 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    4de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4de4:	b083      	sub	sp, #12
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    4de6:	2800      	cmp	r0, #0
    4de8:	d04a      	beq.n	4e80 <bootutil_tlv_iter_begin+0xa0>
    4dea:	4605      	mov	r5, r0
    4dec:	2900      	cmp	r1, #0
    4dee:	d04a      	beq.n	4e86 <bootutil_tlv_iter_begin+0xa6>
    4df0:	2a00      	cmp	r2, #0
    4df2:	d04b      	beq.n	4e8c <bootutil_tlv_iter_begin+0xac>
    4df4:	4699      	mov	r9, r3
    4df6:	4617      	mov	r7, r2
    4df8:	460c      	mov	r4, r1
        return -1;
    }

    off_ = BOOT_TLV_OFF(hdr);
    4dfa:	890e      	ldrh	r6, [r1, #8]
    4dfc:	68cb      	ldr	r3, [r1, #12]
    4dfe:	441e      	add	r6, r3
    if (flash_area_read(fap, off_, &info, sizeof(info))) {
    4e00:	2304      	movs	r3, #4
    4e02:	eb0d 0203 	add.w	r2, sp, r3
    4e06:	4631      	mov	r1, r6
    4e08:	4638      	mov	r0, r7
    4e0a:	f001 f9df 	bl	61cc <flash_area_read>
    4e0e:	4680      	mov	r8, r0
    4e10:	2800      	cmp	r0, #0
    4e12:	d13e      	bne.n	4e92 <bootutil_tlv_iter_begin+0xb2>
        return -1;
    }

    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    4e14:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    4e18:	f646 1308 	movw	r3, #26888	; 0x6908
    4e1c:	429a      	cmp	r2, r3
    4e1e:	d01e      	beq.n	4e5e <bootutil_tlv_iter_begin+0x7e>
        }

        if (flash_area_read(fap, off_ + info.it_tlv_tot, &info, sizeof(info))) {
            return -1;
        }
    } else if (hdr->ih_protect_tlv_size != 0) {
    4e20:	8963      	ldrh	r3, [r4, #10]
    4e22:	2b00      	cmp	r3, #0
    4e24:	d13b      	bne.n	4e9e <bootutil_tlv_iter_begin+0xbe>
        return -1;
    }

    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    4e26:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    4e2a:	f646 1307 	movw	r3, #26887	; 0x6907
    4e2e:	429a      	cmp	r2, r3
    4e30:	d138      	bne.n	4ea4 <bootutil_tlv_iter_begin+0xc4>
        return -1;
    }

    it->hdr = hdr;
    4e32:	602c      	str	r4, [r5, #0]
    it->fap = fap;
    4e34:	606f      	str	r7, [r5, #4]
    it->type = type;
    4e36:	f8a5 9008 	strh.w	r9, [r5, #8]
    it->prot = prot;
    4e3a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    4e3e:	72ab      	strb	r3, [r5, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    4e40:	8963      	ldrh	r3, [r4, #10]
    4e42:	4433      	add	r3, r6
    4e44:	60eb      	str	r3, [r5, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    4e46:	8963      	ldrh	r3, [r4, #10]
    4e48:	4433      	add	r3, r6
    4e4a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    4e4e:	4413      	add	r3, r2
    4e50:	616b      	str	r3, [r5, #20]
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    4e52:	3604      	adds	r6, #4
    4e54:	612e      	str	r6, [r5, #16]
    return 0;
}
    4e56:	4640      	mov	r0, r8
    4e58:	b003      	add	sp, #12
    4e5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    4e5e:	8963      	ldrh	r3, [r4, #10]
    4e60:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    4e64:	428b      	cmp	r3, r1
    4e66:	d117      	bne.n	4e98 <bootutil_tlv_iter_begin+0xb8>
        if (flash_area_read(fap, off_ + info.it_tlv_tot, &info, sizeof(info))) {
    4e68:	2304      	movs	r3, #4
    4e6a:	eb0d 0203 	add.w	r2, sp, r3
    4e6e:	4431      	add	r1, r6
    4e70:	4638      	mov	r0, r7
    4e72:	f001 f9ab 	bl	61cc <flash_area_read>
    4e76:	2800      	cmp	r0, #0
    4e78:	d0d5      	beq.n	4e26 <bootutil_tlv_iter_begin+0x46>
            return -1;
    4e7a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    4e7e:	e7ea      	b.n	4e56 <bootutil_tlv_iter_begin+0x76>
        return -1;
    4e80:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    4e84:	e7e7      	b.n	4e56 <bootutil_tlv_iter_begin+0x76>
    4e86:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    4e8a:	e7e4      	b.n	4e56 <bootutil_tlv_iter_begin+0x76>
    4e8c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    4e90:	e7e1      	b.n	4e56 <bootutil_tlv_iter_begin+0x76>
        return -1;
    4e92:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    4e96:	e7de      	b.n	4e56 <bootutil_tlv_iter_begin+0x76>
            return -1;
    4e98:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    4e9c:	e7db      	b.n	4e56 <bootutil_tlv_iter_begin+0x76>
        return -1;
    4e9e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    4ea2:	e7d8      	b.n	4e56 <bootutil_tlv_iter_begin+0x76>
        return -1;
    4ea4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    4ea8:	e7d5      	b.n	4e56 <bootutil_tlv_iter_begin+0x76>

00004eaa <bootutil_tlv_iter_next>:
                       uint16_t *type)
{
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    4eaa:	2800      	cmp	r0, #0
    4eac:	d04d      	beq.n	4f4a <bootutil_tlv_iter_next+0xa0>
{
    4eae:	b5f0      	push	{r4, r5, r6, r7, lr}
    4eb0:	b083      	sub	sp, #12
    4eb2:	4604      	mov	r4, r0
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    4eb4:	6800      	ldr	r0, [r0, #0]
    4eb6:	2800      	cmp	r0, #0
    4eb8:	d04b      	beq.n	4f52 <bootutil_tlv_iter_next+0xa8>
    4eba:	461d      	mov	r5, r3
    4ebc:	4616      	mov	r6, r2
    4ebe:	460f      	mov	r7, r1
    4ec0:	6863      	ldr	r3, [r4, #4]
    4ec2:	bb0b      	cbnz	r3, 4f08 <bootutil_tlv_iter_next+0x5e>
        return -1;
    4ec4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4ec8:	e03a      	b.n	4f40 <bootutil_tlv_iter_next+0x96>
    while (it->tlv_off < it->tlv_end) {
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
            it->tlv_off += sizeof(struct image_tlv_info);
        }

        rc = flash_area_read(it->fap, it->tlv_off, &tlv, sizeof tlv);
    4eca:	2304      	movs	r3, #4
    4ecc:	eb0d 0203 	add.w	r2, sp, r3
    4ed0:	6921      	ldr	r1, [r4, #16]
    4ed2:	6860      	ldr	r0, [r4, #4]
    4ed4:	f001 f97a 	bl	61cc <flash_area_read>
        if (rc) {
    4ed8:	4601      	mov	r1, r0
    4eda:	2800      	cmp	r0, #0
    4edc:	d13c      	bne.n	4f58 <bootutil_tlv_iter_next+0xae>
            return -1;
        }

        /* No more TLVs in the protected area */
        if (it->prot && it->tlv_off >= it->prot_end) {
    4ede:	7aa3      	ldrb	r3, [r4, #10]
    4ee0:	b11b      	cbz	r3, 4eea <bootutil_tlv_iter_next+0x40>
    4ee2:	6922      	ldr	r2, [r4, #16]
    4ee4:	68e3      	ldr	r3, [r4, #12]
    4ee6:	429a      	cmp	r2, r3
    4ee8:	d239      	bcs.n	4f5e <bootutil_tlv_iter_next+0xb4>
            return 1;
        }

        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    4eea:	8923      	ldrh	r3, [r4, #8]
    4eec:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4ef0:	4293      	cmp	r3, r2
    4ef2:	d017      	beq.n	4f24 <bootutil_tlv_iter_next+0x7a>
    4ef4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    4ef8:	4293      	cmp	r3, r2
    4efa:	d013      	beq.n	4f24 <bootutil_tlv_iter_next+0x7a>
            *len = tlv.it_len;
            it->tlv_off += sizeof(tlv) + tlv.it_len;
            return 0;
        }

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    4efc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    4f00:	6923      	ldr	r3, [r4, #16]
    4f02:	4418      	add	r0, r3
    4f04:	3004      	adds	r0, #4
    4f06:	6120      	str	r0, [r4, #16]
    while (it->tlv_off < it->tlv_end) {
    4f08:	6920      	ldr	r0, [r4, #16]
    4f0a:	6963      	ldr	r3, [r4, #20]
    4f0c:	4298      	cmp	r0, r3
    4f0e:	d21a      	bcs.n	4f46 <bootutil_tlv_iter_next+0x9c>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    4f10:	6823      	ldr	r3, [r4, #0]
    4f12:	895b      	ldrh	r3, [r3, #10]
    4f14:	2b00      	cmp	r3, #0
    4f16:	d0d8      	beq.n	4eca <bootutil_tlv_iter_next+0x20>
    4f18:	68e3      	ldr	r3, [r4, #12]
    4f1a:	4283      	cmp	r3, r0
    4f1c:	d1d5      	bne.n	4eca <bootutil_tlv_iter_next+0x20>
            it->tlv_off += sizeof(struct image_tlv_info);
    4f1e:	3004      	adds	r0, #4
    4f20:	6120      	str	r0, [r4, #16]
    4f22:	e7d2      	b.n	4eca <bootutil_tlv_iter_next+0x20>
            if (type != NULL) {
    4f24:	b115      	cbz	r5, 4f2c <bootutil_tlv_iter_next+0x82>
                *type = tlv.it_type;
    4f26:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    4f2a:	802b      	strh	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    4f2c:	6923      	ldr	r3, [r4, #16]
    4f2e:	3304      	adds	r3, #4
    4f30:	603b      	str	r3, [r7, #0]
            *len = tlv.it_len;
    4f32:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    4f36:	8033      	strh	r3, [r6, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    4f38:	6922      	ldr	r2, [r4, #16]
    4f3a:	4413      	add	r3, r2
    4f3c:	3304      	adds	r3, #4
    4f3e:	6123      	str	r3, [r4, #16]
    }

    return 1;
}
    4f40:	4608      	mov	r0, r1
    4f42:	b003      	add	sp, #12
    4f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 1;
    4f46:	2101      	movs	r1, #1
    4f48:	e7fa      	b.n	4f40 <bootutil_tlv_iter_next+0x96>
        return -1;
    4f4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
}
    4f4e:	4608      	mov	r0, r1
    4f50:	4770      	bx	lr
        return -1;
    4f52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4f56:	e7f3      	b.n	4f40 <bootutil_tlv_iter_next+0x96>
            return -1;
    4f58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4f5c:	e7f0      	b.n	4f40 <bootutil_tlv_iter_next+0x96>
            return 1;
    4f5e:	2101      	movs	r1, #1
    4f60:	e7ee      	b.n	4f40 <bootutil_tlv_iter_next+0x96>

00004f62 <bootutil_parse_rsakey>:
{
    4f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f66:	b084      	sub	sp, #16
    4f68:	4604      	mov	r4, r0
    4f6a:	460e      	mov	r6, r1
    4f6c:	4615      	mov	r5, r2
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
    4f6e:	2330      	movs	r3, #48	; 0x30
    4f70:	aa03      	add	r2, sp, #12
    4f72:	4629      	mov	r1, r5
    4f74:	4630      	mov	r0, r6
    4f76:	f001 ff1b 	bl	6db0 <mbedtls_asn1_get_tag>
    4f7a:	bba8      	cbnz	r0, 4fe8 <bootutil_parse_rsakey+0x86>
    if (*p + len != end) {
    4f7c:	6833      	ldr	r3, [r6, #0]
    4f7e:	9a03      	ldr	r2, [sp, #12]
    4f80:	4413      	add	r3, r2
    4f82:	42ab      	cmp	r3, r5
    4f84:	d133      	bne.n	4fee <bootutil_parse_rsakey+0x8c>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->N)) != 0 ||
    4f86:	f104 0708 	add.w	r7, r4, #8
    4f8a:	463a      	mov	r2, r7
    4f8c:	4629      	mov	r1, r5
    4f8e:	4630      	mov	r0, r6
    4f90:	f001 ff21 	bl	6dd6 <mbedtls_asn1_get_mpi>
    4f94:	bb28      	cbnz	r0, 4fe2 <bootutil_parse_rsakey+0x80>
      (rc = mbedtls_asn1_get_mpi(p, end, &ctx->E)) != 0) {
    4f96:	f104 0814 	add.w	r8, r4, #20
    4f9a:	4642      	mov	r2, r8
    4f9c:	4629      	mov	r1, r5
    4f9e:	4630      	mov	r0, r6
    4fa0:	f001 ff19 	bl	6dd6 <mbedtls_asn1_get_mpi>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->N)) != 0 ||
    4fa4:	b9e8      	cbnz	r0, 4fe2 <bootutil_parse_rsakey+0x80>
    ctx->len = mbedtls_mpi_size(&ctx->N);
    4fa6:	4638      	mov	r0, r7
    4fa8:	f002 fa95 	bl	74d6 <mbedtls_mpi_size>
    4fac:	6060      	str	r0, [r4, #4]
    if (*p != end) {
    4fae:	6833      	ldr	r3, [r6, #0]
    4fb0:	42ab      	cmp	r3, r5
    4fb2:	d11f      	bne.n	4ff4 <bootutil_parse_rsakey+0x92>
    rc = mbedtls_rsa_import(ctx, &ctx->N, NULL, NULL, NULL, &ctx->E);
    4fb4:	f8cd 8004 	str.w	r8, [sp, #4]
    4fb8:	2200      	movs	r2, #0
    4fba:	9200      	str	r2, [sp, #0]
    4fbc:	4613      	mov	r3, r2
    4fbe:	4639      	mov	r1, r7
    4fc0:	4620      	mov	r0, r4
    4fc2:	f003 f9a6 	bl	8312 <mbedtls_rsa_import>
    if (rc != 0) {
    4fc6:	b9c0      	cbnz	r0, 4ffa <bootutil_parse_rsakey+0x98>
    rc = mbedtls_rsa_check_pubkey(ctx);
    4fc8:	4620      	mov	r0, r4
    4fca:	f7fe fed1 	bl	3d70 <mbedtls_rsa_check_pubkey>
    if (rc != 0) {
    4fce:	4605      	mov	r5, r0
    4fd0:	b9b0      	cbnz	r0, 5000 <bootutil_parse_rsakey+0x9e>
    ctx->len = mbedtls_mpi_size(&ctx->N);
    4fd2:	4638      	mov	r0, r7
    4fd4:	f002 fa7f 	bl	74d6 <mbedtls_mpi_size>
    4fd8:	6060      	str	r0, [r4, #4]
}
    4fda:	4628      	mov	r0, r5
    4fdc:	b004      	add	sp, #16
    4fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -3;
    4fe2:	f06f 0502 	mvn.w	r5, #2
    4fe6:	e7f8      	b.n	4fda <bootutil_parse_rsakey+0x78>
        return -1;
    4fe8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    4fec:	e7f5      	b.n	4fda <bootutil_parse_rsakey+0x78>
        return -2;
    4fee:	f06f 0501 	mvn.w	r5, #1
    4ff2:	e7f2      	b.n	4fda <bootutil_parse_rsakey+0x78>
        return -4;
    4ff4:	f06f 0503 	mvn.w	r5, #3
    4ff8:	e7ef      	b.n	4fda <bootutil_parse_rsakey+0x78>
        return -5;
    4ffa:	f06f 0504 	mvn.w	r5, #4
    4ffe:	e7ec      	b.n	4fda <bootutil_parse_rsakey+0x78>
        return -6;
    5000:	f06f 0505 	mvn.w	r5, #5
    5004:	e7e9      	b.n	4fda <bootutil_parse_rsakey+0x78>

00005006 <pss_mgf1>:
{
    5006:	b5f0      	push	{r4, r5, r6, r7, lr}
    5008:	b0a5      	sub	sp, #148	; 0x94
    500a:	4606      	mov	r6, r0
    500c:	460f      	mov	r7, r1
    uint8_t counter[4] = { 0, 0, 0, 0 };
    500e:	2300      	movs	r3, #0
    5010:	9308      	str	r3, [sp, #32]
    int count = PSS_MASK_LEN;
    5012:	24df      	movs	r4, #223	; 0xdf
    while (count > 0) {
    5014:	e007      	b.n	5026 <pss_mgf1+0x20>
            bytes = count;
    5016:	4625      	mov	r5, r4
        memcpy(mask, htmp, bytes);
    5018:	462a      	mov	r2, r5
    501a:	4669      	mov	r1, sp
    501c:	4630      	mov	r0, r6
    501e:	f001 fb06 	bl	662e <memcpy>
        mask += bytes;
    5022:	442e      	add	r6, r5
        count -= bytes;
    5024:	1b64      	subs	r4, r4, r5
    while (count > 0) {
    5026:	2c00      	cmp	r4, #0
    5028:	dd1d      	ble.n	5066 <pss_mgf1+0x60>
    mbedtls_sha256_init(ctx);
    502a:	a809      	add	r0, sp, #36	; 0x24
    502c:	f003 f9f6 	bl	841c <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    5030:	2100      	movs	r1, #0
    5032:	a809      	add	r0, sp, #36	; 0x24
    5034:	f7fe ff08 	bl	3e48 <mbedtls_sha256_starts_ret>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    5038:	2220      	movs	r2, #32
    503a:	4639      	mov	r1, r7
    503c:	a809      	add	r0, sp, #36	; 0x24
    503e:	f003 f9f3 	bl	8428 <mbedtls_sha256_update_ret>
    5042:	2204      	movs	r2, #4
    5044:	a908      	add	r1, sp, #32
    5046:	a809      	add	r0, sp, #36	; 0x24
    5048:	f003 f9ee 	bl	8428 <mbedtls_sha256_update_ret>
    (void)mbedtls_sha256_finish_ret(ctx, output);
    504c:	4669      	mov	r1, sp
    504e:	a809      	add	r0, sp, #36	; 0x24
    5050:	f003 fa2d 	bl	84ae <mbedtls_sha256_finish_ret>
        counter[3]++;
    5054:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    5058:	3301      	adds	r3, #1
    505a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        if (bytes > count)
    505e:	2c1f      	cmp	r4, #31
    5060:	ddd9      	ble.n	5016 <pss_mgf1+0x10>
        bytes = PSS_HLEN;
    5062:	2520      	movs	r5, #32
    5064:	e7d8      	b.n	5018 <pss_mgf1+0x12>
}
    5066:	b025      	add	sp, #148	; 0x94
    5068:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000506a <boot_flag_decode>:
    if (flag != BOOT_FLAG_SET) {
    506a:	2801      	cmp	r0, #1
    506c:	d100      	bne.n	5070 <boot_flag_decode+0x6>
}
    506e:	4770      	bx	lr
        return BOOT_FLAG_BAD;
    5070:	2002      	movs	r0, #2
    5072:	e7fc      	b.n	506e <boot_flag_decode+0x4>

00005074 <boot_write_trailer>:
{
    5074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5078:	b083      	sub	sp, #12
    507a:	4606      	mov	r6, r0
    507c:	460f      	mov	r7, r1
    507e:	4690      	mov	r8, r2
    5080:	461c      	mov	r4, r3
    align = flash_area_align(fap);
    5082:	f001 f920 	bl	62c6 <flash_area_align>
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
    5086:	2c08      	cmp	r4, #8
    5088:	d821      	bhi.n	50ce <boot_write_trailer+0x5a>
    508a:	4605      	mov	r5, r0
    508c:	2808      	cmp	r0, #8
    508e:	d902      	bls.n	5096 <boot_write_trailer+0x22>
        return -1;
    5090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5094:	e01d      	b.n	50d2 <boot_write_trailer+0x5e>
    erased_val = flash_area_erased_val(fap);
    5096:	4630      	mov	r0, r6
    5098:	f7ff fe4b 	bl	4d32 <flash_area_erased_val>
    509c:	4681      	mov	r9, r0
    if (align < inlen) {
    509e:	42a5      	cmp	r5, r4
    50a0:	d200      	bcs.n	50a4 <boot_write_trailer+0x30>
        align = inlen;
    50a2:	4625      	mov	r5, r4
    memcpy(buf, inbuf, inlen);
    50a4:	4622      	mov	r2, r4
    50a6:	4641      	mov	r1, r8
    50a8:	4668      	mov	r0, sp
    50aa:	f001 fac0 	bl	662e <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    50ae:	1b2a      	subs	r2, r5, r4
    50b0:	4649      	mov	r1, r9
    50b2:	eb0d 0004 	add.w	r0, sp, r4
    50b6:	f001 fadd 	bl	6674 <memset>
    rc = flash_area_write(fap, off, buf, align);
    50ba:	462b      	mov	r3, r5
    50bc:	466a      	mov	r2, sp
    50be:	4639      	mov	r1, r7
    50c0:	4630      	mov	r0, r6
    50c2:	f001 f8a2 	bl	620a <flash_area_write>
    if (rc != 0) {
    50c6:	4603      	mov	r3, r0
    50c8:	b118      	cbz	r0, 50d2 <boot_write_trailer+0x5e>
        return BOOT_EFLASH;
    50ca:	2301      	movs	r3, #1
    50cc:	e001      	b.n	50d2 <boot_write_trailer+0x5e>
        return -1;
    50ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
    50d2:	4618      	mov	r0, r3
    50d4:	b003      	add	sp, #12
    50d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000050da <boot_write_trailer_flag>:
{
    50da:	b500      	push	{lr}
    50dc:	b083      	sub	sp, #12
    const uint8_t buf[1] = { flag_val };
    50de:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    50e2:	2301      	movs	r3, #1
    50e4:	aa01      	add	r2, sp, #4
    50e6:	f7ff ffc5 	bl	5074 <boot_write_trailer>
}
    50ea:	b003      	add	sp, #12
    50ec:	f85d fb04 	ldr.w	pc, [sp], #4

000050f0 <boot_magic_compatible_check>:
    switch (tbl_val) {
    50f0:	2804      	cmp	r0, #4
    50f2:	d00b      	beq.n	510c <boot_magic_compatible_check+0x1c>
    50f4:	2805      	cmp	r0, #5
    50f6:	d104      	bne.n	5102 <boot_magic_compatible_check+0x12>
        return val != BOOT_MAGIC_GOOD;
    50f8:	f111 30ff 	adds.w	r0, r1, #4294967295	; 0xffffffff
    50fc:	bf18      	it	ne
    50fe:	2001      	movne	r0, #1
    5100:	4770      	bx	lr
        return tbl_val == val;
    5102:	4288      	cmp	r0, r1
    5104:	bf14      	ite	ne
    5106:	2000      	movne	r0, #0
    5108:	2001      	moveq	r0, #1
    510a:	4770      	bx	lr
        return 1;
    510c:	2001      	movs	r0, #1
}
    510e:	4770      	bx	lr

00005110 <boot_status_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    5110:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    5114:	01d8      	lsls	r0, r3, #7
}
    5116:	4770      	bx	lr

00005118 <boot_trailer_sz>:
{
    5118:	b508      	push	{r3, lr}
           boot_status_sz(min_write_sz)           +
    511a:	f7ff fff9 	bl	5110 <boot_status_sz>
}
    511e:	3030      	adds	r0, #48	; 0x30
    5120:	bd08      	pop	{r3, pc}

00005122 <boot_status_entries>:
    if (fap->fa_id == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    5122:	780b      	ldrb	r3, [r1, #0]
    5124:	2b03      	cmp	r3, #3
    5126:	d007      	beq.n	5138 <boot_status_entries+0x16>
    5128:	2b07      	cmp	r3, #7
    512a:	d102      	bne.n	5132 <boot_status_entries+0x10>
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    512c:	f44f 70c0 	mov.w	r0, #384	; 0x180
}
    5130:	4770      	bx	lr
    return -1;
    5132:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5136:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    5138:	f44f 70c0 	mov.w	r0, #384	; 0x180
    513c:	4770      	bx	lr

0000513e <boot_status_off>:
{
    513e:	b510      	push	{r4, lr}
    5140:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    5142:	f001 f8c0 	bl	62c6 <flash_area_align>
    off_from_end = boot_trailer_sz(elem_sz);
    5146:	f7ff ffe7 	bl	5118 <boot_trailer_sz>
    return fap->fa_size - off_from_end;
    514a:	68a3      	ldr	r3, [r4, #8]
}
    514c:	1a18      	subs	r0, r3, r0
    514e:	bd10      	pop	{r4, pc}

00005150 <boot_swap_info_off>:
    return fap->fa_size - BOOT_MAGIC_SZ;
    5150:	6880      	ldr	r0, [r0, #8]
}
    5152:	3828      	subs	r0, #40	; 0x28
    5154:	4770      	bx	lr

00005156 <boot_read_swap_state>:
{
    5156:	b530      	push	{r4, r5, lr}
    5158:	b087      	sub	sp, #28
    515a:	4605      	mov	r5, r0
    515c:	460c      	mov	r4, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    515e:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
    5160:	2310      	movs	r3, #16
    5162:	aa02      	add	r2, sp, #8
    5164:	3910      	subs	r1, #16
    5166:	f7ff fde6 	bl	4d36 <flash_area_read_is_empty>
    if (rc < 0) {
    516a:	2800      	cmp	r0, #0
    516c:	db4a      	blt.n	5204 <boot_read_swap_state+0xae>
    if (rc == 1) {
    516e:	2801      	cmp	r0, #1
    5170:	d13c      	bne.n	51ec <boot_read_swap_state+0x96>
        state->magic = BOOT_MAGIC_UNSET;
    5172:	2303      	movs	r3, #3
    5174:	7023      	strb	r3, [r4, #0]
    off = boot_swap_info_off(fap);
    5176:	4628      	mov	r0, r5
    5178:	f7ff ffea 	bl	5150 <boot_swap_info_off>
    rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    517c:	2301      	movs	r3, #1
    517e:	f10d 0207 	add.w	r2, sp, #7
    5182:	4601      	mov	r1, r0
    5184:	4628      	mov	r0, r5
    5186:	f7ff fdd6 	bl	4d36 <flash_area_read_is_empty>
    if (rc < 0) {
    518a:	2800      	cmp	r0, #0
    518c:	db3d      	blt.n	520a <boot_read_swap_state+0xb4>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    518e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5192:	f003 020f 	and.w	r2, r3, #15
    5196:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    5198:	091b      	lsrs	r3, r3, #4
    519a:	7123      	strb	r3, [r4, #4]
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
    519c:	2801      	cmp	r0, #1
    519e:	d001      	beq.n	51a4 <boot_read_swap_state+0x4e>
    51a0:	2a04      	cmp	r2, #4
    51a2:	d903      	bls.n	51ac <boot_read_swap_state+0x56>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    51a4:	2301      	movs	r3, #1
    51a6:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
    51a8:	2300      	movs	r3, #0
    51aa:	7123      	strb	r3, [r4, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
    51ac:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read_is_empty(fap, off, &state->copy_done,
    51ae:	2301      	movs	r3, #1
    51b0:	1ca2      	adds	r2, r4, #2
    51b2:	3920      	subs	r1, #32
    51b4:	4628      	mov	r0, r5
    51b6:	f7ff fdbe 	bl	4d36 <flash_area_read_is_empty>
    if (rc < 0) {
    51ba:	2800      	cmp	r0, #0
    51bc:	db27      	blt.n	520e <boot_read_swap_state+0xb8>
    if (rc == 1) {
    51be:	2801      	cmp	r0, #1
    51c0:	d019      	beq.n	51f6 <boot_read_swap_state+0xa0>
        state->copy_done = boot_flag_decode(state->copy_done);
    51c2:	78a0      	ldrb	r0, [r4, #2]
    51c4:	f7ff ff51 	bl	506a <boot_flag_decode>
    51c8:	70a0      	strb	r0, [r4, #2]
    return fap->fa_size - BOOT_MAGIC_SZ;
    51ca:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read_is_empty(fap, off, &state->image_ok,
    51cc:	2301      	movs	r3, #1
    51ce:	1ce2      	adds	r2, r4, #3
    51d0:	3918      	subs	r1, #24
    51d2:	4628      	mov	r0, r5
    51d4:	f7ff fdaf 	bl	4d36 <flash_area_read_is_empty>
    if (rc < 0) {
    51d8:	2800      	cmp	r0, #0
    51da:	db1a      	blt.n	5212 <boot_read_swap_state+0xbc>
    if (rc == 1) {
    51dc:	2801      	cmp	r0, #1
    51de:	d00d      	beq.n	51fc <boot_read_swap_state+0xa6>
        state->image_ok = boot_flag_decode(state->image_ok);
    51e0:	78e0      	ldrb	r0, [r4, #3]
    51e2:	f7ff ff42 	bl	506a <boot_flag_decode>
    51e6:	70e0      	strb	r0, [r4, #3]
    return 0;
    51e8:	2000      	movs	r0, #0
    51ea:	e00c      	b.n	5206 <boot_read_swap_state+0xb0>
        state->magic = boot_magic_decode(magic);
    51ec:	a802      	add	r0, sp, #8
    51ee:	f7fb fb8b 	bl	908 <boot_magic_decode>
    51f2:	7020      	strb	r0, [r4, #0]
    51f4:	e7bf      	b.n	5176 <boot_read_swap_state+0x20>
        state->copy_done = BOOT_FLAG_UNSET;
    51f6:	2303      	movs	r3, #3
    51f8:	70a3      	strb	r3, [r4, #2]
    51fa:	e7e6      	b.n	51ca <boot_read_swap_state+0x74>
        state->image_ok = BOOT_FLAG_UNSET;
    51fc:	2303      	movs	r3, #3
    51fe:	70e3      	strb	r3, [r4, #3]
    return 0;
    5200:	2000      	movs	r0, #0
    5202:	e000      	b.n	5206 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    5204:	2001      	movs	r0, #1
}
    5206:	b007      	add	sp, #28
    5208:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
    520a:	2001      	movs	r0, #1
    520c:	e7fb      	b.n	5206 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    520e:	2001      	movs	r0, #1
    5210:	e7f9      	b.n	5206 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    5212:	2001      	movs	r0, #1
    5214:	e7f7      	b.n	5206 <boot_read_swap_state+0xb0>

00005216 <boot_read_swap_state_by_id>:
{
    5216:	b510      	push	{r4, lr}
    5218:	b082      	sub	sp, #8
    521a:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    521c:	a901      	add	r1, sp, #4
    521e:	b2c0      	uxtb	r0, r0
    5220:	f7fc fe8c 	bl	1f3c <flash_area_open>
    if (rc != 0) {
    5224:	b118      	cbz	r0, 522e <boot_read_swap_state_by_id+0x18>
        return BOOT_EFLASH;
    5226:	2401      	movs	r4, #1
}
    5228:	4620      	mov	r0, r4
    522a:	b002      	add	sp, #8
    522c:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
    522e:	4621      	mov	r1, r4
    5230:	9801      	ldr	r0, [sp, #4]
    5232:	f7ff ff90 	bl	5156 <boot_read_swap_state>
    5236:	4604      	mov	r4, r0
    flash_area_close(fap);
    5238:	9801      	ldr	r0, [sp, #4]
    523a:	f000 ffc6 	bl	61ca <flash_area_close>
    return rc;
    523e:	e7f3      	b.n	5228 <boot_read_swap_state_by_id+0x12>

00005240 <boot_read_swap_size>:
{
    5240:	b530      	push	{r4, r5, lr}
    5242:	b083      	sub	sp, #12
    5244:	460d      	mov	r5, r1
    rc = boot_find_status(image_index, &fap);
    5246:	a901      	add	r1, sp, #4
    5248:	f7fb fb6a 	bl	920 <boot_find_status>
    if (rc == 0) {
    524c:	4604      	mov	r4, r0
    524e:	b110      	cbz	r0, 5256 <boot_read_swap_size+0x16>
}
    5250:	4620      	mov	r0, r4
    5252:	b003      	add	sp, #12
    5254:	bd30      	pop	{r4, r5, pc}
        off = boot_swap_size_off(fap);
    5256:	9c01      	ldr	r4, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    5258:	4620      	mov	r0, r4
    525a:	f7ff ff79 	bl	5150 <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
    525e:	2304      	movs	r3, #4
    5260:	462a      	mov	r2, r5
    5262:	f1a0 0108 	sub.w	r1, r0, #8
    5266:	4620      	mov	r0, r4
    5268:	f000 ffb0 	bl	61cc <flash_area_read>
    526c:	4604      	mov	r4, r0
        flash_area_close(fap);
    526e:	9801      	ldr	r0, [sp, #4]
    5270:	f000 ffab 	bl	61ca <flash_area_close>
    return rc;
    5274:	e7ec      	b.n	5250 <boot_read_swap_size+0x10>

00005276 <boot_write_copy_done>:
{
    5276:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    5278:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    527a:	2201      	movs	r2, #1
    527c:	3920      	subs	r1, #32
    527e:	f7ff ff2c 	bl	50da <boot_write_trailer_flag>
}
    5282:	bd08      	pop	{r3, pc}

00005284 <boot_write_image_ok>:
{
    5284:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    5286:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    5288:	2201      	movs	r2, #1
    528a:	3918      	subs	r1, #24
    528c:	f7ff ff25 	bl	50da <boot_write_trailer_flag>
}
    5290:	bd08      	pop	{r3, pc}

00005292 <boot_write_swap_info>:
{
    5292:	b510      	push	{r4, lr}
    5294:	b082      	sub	sp, #8
    5296:	4604      	mov	r4, r0
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    5298:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
    529c:	f88d 2007 	strb.w	r2, [sp, #7]
    off = boot_swap_info_off(fap);
    52a0:	f7ff ff56 	bl	5150 <boot_swap_info_off>
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    52a4:	2301      	movs	r3, #1
    52a6:	f10d 0207 	add.w	r2, sp, #7
    52aa:	4601      	mov	r1, r0
    52ac:	4620      	mov	r0, r4
    52ae:	f7ff fee1 	bl	5074 <boot_write_trailer>
}
    52b2:	b002      	add	sp, #8
    52b4:	bd10      	pop	{r4, pc}

000052b6 <boot_write_swap_size>:
{
    52b6:	b510      	push	{r4, lr}
    52b8:	b082      	sub	sp, #8
    52ba:	4604      	mov	r4, r0
    52bc:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    52be:	f7ff ff47 	bl	5150 <boot_swap_info_off>
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    52c2:	2304      	movs	r3, #4
    52c4:	eb0d 0203 	add.w	r2, sp, r3
    52c8:	f1a0 0108 	sub.w	r1, r0, #8
    52cc:	4620      	mov	r0, r4
    52ce:	f7ff fed1 	bl	5074 <boot_write_trailer>
}
    52d2:	b002      	add	sp, #8
    52d4:	bd10      	pop	{r4, pc}

000052d6 <boot_write_sz>:
{
    52d6:	b508      	push	{r3, lr}
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    52d8:	6a00      	ldr	r0, [r0, #32]
    52da:	f000 fff4 	bl	62c6 <flash_area_align>
}
    52de:	bd08      	pop	{r3, pc}

000052e0 <boot_read_image_size>:
{
    52e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    52e4:	b082      	sub	sp, #8
    52e6:	4607      	mov	r7, r0
    52e8:	460e      	mov	r6, r1
    52ea:	4615      	mov	r5, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    52ec:	2000      	movs	r0, #0
    52ee:	f7ff fd16 	bl	4d1e <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    52f2:	a901      	add	r1, sp, #4
    52f4:	b2c0      	uxtb	r0, r0
    52f6:	f7fc fe21 	bl	1f3c <flash_area_open>
    if (rc != 0) {
    52fa:	b140      	cbz	r0, 530e <boot_read_image_size+0x2e>
        rc = BOOT_EFLASH;
    52fc:	f04f 0801 	mov.w	r8, #1
    flash_area_close(fap);
    5300:	9801      	ldr	r0, [sp, #4]
    5302:	f000 ff62 	bl	61ca <flash_area_close>
}
    5306:	4640      	mov	r0, r8
    5308:	b002      	add	sp, #8
    530a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    530e:	232c      	movs	r3, #44	; 0x2c
    5310:	fb03 7306 	mla	r3, r3, r6, r7
    5314:	891c      	ldrh	r4, [r3, #8]
    5316:	68db      	ldr	r3, [r3, #12]
    5318:	441c      	add	r4, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    531a:	2304      	movs	r3, #4
    531c:	466a      	mov	r2, sp
    531e:	4621      	mov	r1, r4
    5320:	9801      	ldr	r0, [sp, #4]
    5322:	f000 ff53 	bl	61cc <flash_area_read>
    5326:	4680      	mov	r8, r0
    5328:	bb40      	cbnz	r0, 537c <boot_read_image_size+0x9c>
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    532a:	202c      	movs	r0, #44	; 0x2c
    532c:	fb00 7006 	mla	r0, r0, r6, r7
    5330:	8946      	ldrh	r6, [r0, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5332:	f8bd 2000 	ldrh.w	r2, [sp]
    5336:	f646 1308 	movw	r3, #26888	; 0x6908
    533a:	429a      	cmp	r2, r3
    533c:	d00c      	beq.n	5358 <boot_read_image_size+0x78>
    } else if (protect_tlv_size != 0) {
    533e:	bb06      	cbnz	r6, 5382 <boot_read_image_size+0xa2>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    5340:	f8bd 2000 	ldrh.w	r2, [sp]
    5344:	f646 1307 	movw	r3, #26887	; 0x6907
    5348:	429a      	cmp	r2, r3
    534a:	d11d      	bne.n	5388 <boot_read_image_size+0xa8>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    534c:	4434      	add	r4, r6
    534e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    5352:	441c      	add	r4, r3
    5354:	602c      	str	r4, [r5, #0]
    rc = 0;
    5356:	e7d3      	b.n	5300 <boot_read_image_size+0x20>
        if (protect_tlv_size != info.it_tlv_tot) {
    5358:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    535c:	428e      	cmp	r6, r1
    535e:	d002      	beq.n	5366 <boot_read_image_size+0x86>
            rc = BOOT_EBADIMAGE;
    5360:	f04f 0803 	mov.w	r8, #3
    5364:	e7cc      	b.n	5300 <boot_read_image_size+0x20>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    5366:	2304      	movs	r3, #4
    5368:	466a      	mov	r2, sp
    536a:	4421      	add	r1, r4
    536c:	9801      	ldr	r0, [sp, #4]
    536e:	f000 ff2d 	bl	61cc <flash_area_read>
    5372:	2800      	cmp	r0, #0
    5374:	d0e4      	beq.n	5340 <boot_read_image_size+0x60>
            rc = BOOT_EFLASH;
    5376:	f04f 0801 	mov.w	r8, #1
    537a:	e7c1      	b.n	5300 <boot_read_image_size+0x20>
        rc = BOOT_EFLASH;
    537c:	f04f 0801 	mov.w	r8, #1
    5380:	e7be      	b.n	5300 <boot_read_image_size+0x20>
        rc = BOOT_EBADIMAGE;
    5382:	f04f 0803 	mov.w	r8, #3
    5386:	e7bb      	b.n	5300 <boot_read_image_size+0x20>
        rc = BOOT_EBADIMAGE;
    5388:	f04f 0803 	mov.w	r8, #3
    538c:	e7b8      	b.n	5300 <boot_read_image_size+0x20>

0000538e <boot_check_header_erased>:
{
    538e:	b5f0      	push	{r4, r5, r6, r7, lr}
    5390:	b083      	sub	sp, #12
    5392:	4607      	mov	r7, r0
    5394:	460c      	mov	r4, r1
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    5396:	2000      	movs	r0, #0
    5398:	f7ff fcc1 	bl	4d1e <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    539c:	a901      	add	r1, sp, #4
    539e:	b2c0      	uxtb	r0, r0
    53a0:	f7fc fdcc 	bl	1f3c <flash_area_open>
    if (rc != 0) {
    53a4:	b9d0      	cbnz	r0, 53dc <boot_check_header_erased+0x4e>
    53a6:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    53a8:	9801      	ldr	r0, [sp, #4]
    53aa:	f7ff fcc2 	bl	4d32 <flash_area_erased_val>
    53ae:	4605      	mov	r5, r0
    flash_area_close(fap);
    53b0:	9801      	ldr	r0, [sp, #4]
    53b2:	f000 ff0a 	bl	61ca <flash_area_close>
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    53b6:	202c      	movs	r0, #44	; 0x2c
    53b8:	fb00 7004 	mla	r0, r0, r4, r7
    for (i = 0; i < len; i++) {
    53bc:	2300      	movs	r3, #0
    53be:	2b03      	cmp	r3, #3
    53c0:	d805      	bhi.n	53ce <boot_check_header_erased+0x40>
        if (val != p[i]) {
    53c2:	5cc2      	ldrb	r2, [r0, r3]
    53c4:	4295      	cmp	r5, r2
    53c6:	d107      	bne.n	53d8 <boot_check_header_erased+0x4a>
    for (i = 0; i < len; i++) {
    53c8:	3301      	adds	r3, #1
    53ca:	b2db      	uxtb	r3, r3
    53cc:	e7f7      	b.n	53be <boot_check_header_erased+0x30>
    return true;
    53ce:	2301      	movs	r3, #1
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    53d0:	b13b      	cbz	r3, 53e2 <boot_check_header_erased+0x54>
}
    53d2:	4630      	mov	r0, r6
    53d4:	b003      	add	sp, #12
    53d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return false;
    53d8:	2300      	movs	r3, #0
    53da:	e7f9      	b.n	53d0 <boot_check_header_erased+0x42>
        return -1;
    53dc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    53e0:	e7f7      	b.n	53d2 <boot_check_header_erased+0x44>
        return -1;
    53e2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    53e6:	e7f4      	b.n	53d2 <boot_check_header_erased+0x44>

000053e8 <boot_initialize_area>:
{
    53e8:	b510      	push	{r4, lr}
    53ea:	b082      	sub	sp, #8
    num_sectors = BOOT_MAX_IMG_SECTORS;
    53ec:	2380      	movs	r3, #128	; 0x80
    53ee:	9301      	str	r3, [sp, #4]
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    53f0:	2903      	cmp	r1, #3
    53f2:	d005      	beq.n	5400 <boot_initialize_area+0x18>
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    53f4:	2907      	cmp	r1, #7
    53f6:	d111      	bne.n	541c <boot_initialize_area+0x34>
        out_sectors = BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors;
    53f8:	6d02      	ldr	r2, [r0, #80]	; 0x50
        out_num_sectors = &BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors;
    53fa:	f100 0454 	add.w	r4, r0, #84	; 0x54
    53fe:	e002      	b.n	5406 <boot_initialize_area+0x1e>
        out_sectors = BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors;
    5400:	6a42      	ldr	r2, [r0, #36]	; 0x24
        out_num_sectors = &BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors;
    5402:	f100 0428 	add.w	r4, r0, #40	; 0x28
    5406:	4608      	mov	r0, r1
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5408:	a901      	add	r1, sp, #4
    540a:	f7fc fdab 	bl	1f64 <flash_area_get_sectors>
    if (rc != 0) {
    540e:	4603      	mov	r3, r0
    5410:	b908      	cbnz	r0, 5416 <boot_initialize_area+0x2e>
    *out_num_sectors = num_sectors;
    5412:	9a01      	ldr	r2, [sp, #4]
    5414:	6022      	str	r2, [r4, #0]
}
    5416:	4618      	mov	r0, r3
    5418:	b002      	add	sp, #8
    541a:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    541c:	2301      	movs	r3, #1
    541e:	e7fa      	b.n	5416 <boot_initialize_area+0x2e>

00005420 <boot_read_sectors>:
{
    5420:	b538      	push	{r3, r4, r5, lr}
    5422:	4605      	mov	r5, r0
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    5424:	2103      	movs	r1, #3
    5426:	f7ff ffdf 	bl	53e8 <boot_initialize_area>
    if (rc != 0) {
    542a:	b110      	cbz	r0, 5432 <boot_read_sectors+0x12>
        return BOOT_EFLASH;
    542c:	2401      	movs	r4, #1
}
    542e:	4620      	mov	r0, r4
    5430:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    5432:	2107      	movs	r1, #7
    5434:	4628      	mov	r0, r5
    5436:	f7ff ffd7 	bl	53e8 <boot_initialize_area>
    if (rc != 0) {
    543a:	4604      	mov	r4, r0
    543c:	b108      	cbz	r0, 5442 <boot_read_sectors+0x22>
        return BOOT_EFLASH;
    543e:	2401      	movs	r4, #1
    5440:	e7f5      	b.n	542e <boot_read_sectors+0xe>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    5442:	4628      	mov	r0, r5
    5444:	f7ff ff47 	bl	52d6 <boot_write_sz>
    5448:	65e8      	str	r0, [r5, #92]	; 0x5c
    return 0;
    544a:	e7f0      	b.n	542e <boot_read_sectors+0xe>

0000544c <boot_read_image_headers>:
{
    544c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    544e:	4605      	mov	r5, r0
    5450:	460f      	mov	r7, r1
    5452:	4616      	mov	r6, r2
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    5454:	2400      	movs	r4, #0
    5456:	2c01      	cmp	r4, #1
    5458:	dc10      	bgt.n	547c <boot_read_image_headers+0x30>
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    545a:	4633      	mov	r3, r6
    545c:	222c      	movs	r2, #44	; 0x2c
    545e:	fb02 5204 	mla	r2, r2, r4, r5
    5462:	4621      	mov	r1, r4
    5464:	4628      	mov	r0, r5
    5466:	f7fb fe7b 	bl	1160 <boot_read_image_header>
        if (rc != 0) {
    546a:	4603      	mov	r3, r0
    546c:	b908      	cbnz	r0, 5472 <boot_read_image_headers+0x26>
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    546e:	3401      	adds	r4, #1
    5470:	e7f1      	b.n	5456 <boot_read_image_headers+0xa>
            if (i > 0 && !require_all) {
    5472:	2c00      	cmp	r4, #0
    5474:	dd03      	ble.n	547e <boot_read_image_headers+0x32>
    5476:	b917      	cbnz	r7, 547e <boot_read_image_headers+0x32>
                return 0;
    5478:	2300      	movs	r3, #0
    547a:	e000      	b.n	547e <boot_read_image_headers+0x32>
    return 0;
    547c:	2300      	movs	r3, #0
}
    547e:	4618      	mov	r0, r3
    5480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005482 <boot_validated_swap_type>:
{
    5482:	b570      	push	{r4, r5, r6, lr}
    5484:	4605      	mov	r5, r0
    5486:	460e      	mov	r6, r1
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
    5488:	2000      	movs	r0, #0
    548a:	f7fb fa91 	bl	9b0 <boot_swap_type_multi>
    548e:	4604      	mov	r4, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
    5490:	2802      	cmp	r0, #2
    5492:	d005      	beq.n	54a0 <boot_validated_swap_type+0x1e>
    5494:	2804      	cmp	r0, #4
    5496:	d003      	beq.n	54a0 <boot_validated_swap_type+0x1e>
    5498:	2803      	cmp	r0, #3
    549a:	d001      	beq.n	54a0 <boot_validated_swap_type+0x1e>
}
    549c:	4620      	mov	r0, r4
    549e:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs);
    54a0:	4632      	mov	r2, r6
    54a2:	2101      	movs	r1, #1
    54a4:	4628      	mov	r0, r5
    54a6:	f7fb fb49 	bl	b3c <boot_validate_slot>
        if (rc == 1) {
    54aa:	2801      	cmp	r0, #1
    54ac:	d003      	beq.n	54b6 <boot_validated_swap_type+0x34>
        } else if (rc != 0) {
    54ae:	2800      	cmp	r0, #0
    54b0:	d0f4      	beq.n	549c <boot_validated_swap_type+0x1a>
            swap_type = BOOT_SWAP_TYPE_FAIL;
    54b2:	2405      	movs	r4, #5
    54b4:	e7f2      	b.n	549c <boot_validated_swap_type+0x1a>
            swap_type = BOOT_SWAP_TYPE_NONE;
    54b6:	4604      	mov	r4, r0
    return swap_type;
    54b8:	e7f0      	b.n	549c <boot_validated_swap_type+0x1a>

000054ba <boot_status_reset>:
    bs->use_scratch = 0;
    54ba:	2300      	movs	r3, #0
    54bc:	7183      	strb	r3, [r0, #6]
    bs->swap_size = 0;
    54be:	6083      	str	r3, [r0, #8]
    bs->source = 0;
    54c0:	60c3      	str	r3, [r0, #12]
    bs->op = BOOT_STATUS_OP_MOVE;
    54c2:	2301      	movs	r3, #1
    54c4:	7143      	strb	r3, [r0, #5]
    bs->idx = BOOT_STATUS_IDX_0;
    54c6:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    54c8:	7103      	strb	r3, [r0, #4]
    bs->swap_type = BOOT_SWAP_TYPE_NONE;
    54ca:	71c3      	strb	r3, [r0, #7]
}
    54cc:	4770      	bx	lr

000054ce <boot_status_is_reset>:
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    54ce:	7943      	ldrb	r3, [r0, #5]
            bs->idx == BOOT_STATUS_IDX_0 &&
    54d0:	2b01      	cmp	r3, #1
    54d2:	d001      	beq.n	54d8 <boot_status_is_reset+0xa>
    54d4:	2000      	movs	r0, #0
    54d6:	4770      	bx	lr
    54d8:	6803      	ldr	r3, [r0, #0]
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    54da:	2b01      	cmp	r3, #1
    54dc:	d001      	beq.n	54e2 <boot_status_is_reset+0x14>
            bs->idx == BOOT_STATUS_IDX_0 &&
    54de:	2000      	movs	r0, #0
    54e0:	4770      	bx	lr
            bs->state == BOOT_STATUS_STATE_0);
    54e2:	7903      	ldrb	r3, [r0, #4]
            bs->idx == BOOT_STATUS_IDX_0 &&
    54e4:	2b01      	cmp	r3, #1
    54e6:	d001      	beq.n	54ec <boot_status_is_reset+0x1e>
    54e8:	2000      	movs	r0, #0
    54ea:	4770      	bx	lr
    54ec:	2001      	movs	r0, #1
}
    54ee:	4770      	bx	lr

000054f0 <boot_perform_update>:
{
    54f0:	b538      	push	{r3, r4, r5, lr}
    54f2:	4605      	mov	r5, r0
        rc = boot_swap_image(state, bs);
    54f4:	f7fb fb86 	bl	c04 <boot_swap_image>
    54f8:	4602      	mov	r2, r0
    swap_type = BOOT_SWAP_TYPE(state);
    54fa:	f895 4058 	ldrb.w	r4, [r5, #88]	; 0x58
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
    54fe:	1ee3      	subs	r3, r4, #3
    5500:	b2db      	uxtb	r3, r3
    5502:	2b01      	cmp	r3, #1
    5504:	d90f      	bls.n	5526 <boot_perform_update+0x36>
    if (BOOT_IS_UPGRADE(swap_type)) {
    5506:	2c02      	cmp	r4, #2
    5508:	d003      	beq.n	5512 <boot_perform_update+0x22>
    550a:	2c04      	cmp	r4, #4
    550c:	d001      	beq.n	5512 <boot_perform_update+0x22>
    550e:	2c03      	cmp	r4, #3
    5510:	d107      	bne.n	5522 <boot_perform_update+0x32>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    5512:	2000      	movs	r0, #0
    5514:	f000 f8db 	bl	56ce <swap_set_copy_done>
        if (rc != 0) {
    5518:	4602      	mov	r2, r0
    551a:	b110      	cbz	r0, 5522 <boot_perform_update+0x32>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    551c:	23ff      	movs	r3, #255	; 0xff
    551e:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
}
    5522:	4610      	mov	r0, r2
    5524:	bd38      	pop	{r3, r4, r5, pc}
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    5526:	2000      	movs	r0, #0
    5528:	f000 f8e4 	bl	56f4 <swap_set_image_ok>
        if (rc != 0) {
    552c:	4602      	mov	r2, r0
    552e:	2800      	cmp	r0, #0
    5530:	d0e9      	beq.n	5506 <boot_perform_update+0x16>
            BOOT_SWAP_TYPE(state) = swap_type = BOOT_SWAP_TYPE_PANIC;
    5532:	24ff      	movs	r4, #255	; 0xff
    5534:	f885 4058 	strb.w	r4, [r5, #88]	; 0x58
    if (BOOT_IS_UPGRADE(swap_type)) {
    5538:	e7e7      	b.n	550a <boot_perform_update+0x1a>

0000553a <boot_write_status>:
{
    553a:	b570      	push	{r4, r5, r6, lr}
    553c:	b084      	sub	sp, #16
    553e:	4606      	mov	r6, r0
    5540:	460c      	mov	r4, r1
    rc = flash_area_open(area_id, &fap);
    5542:	a903      	add	r1, sp, #12
    5544:	2003      	movs	r0, #3
    5546:	f7fc fcf9 	bl	1f3c <flash_area_open>
    if (rc != 0) {
    554a:	b130      	cbz	r0, 555a <boot_write_status+0x20>
        rc = BOOT_EFLASH;
    554c:	2401      	movs	r4, #1
    flash_area_close(fap);
    554e:	9803      	ldr	r0, [sp, #12]
    5550:	f000 fe3b 	bl	61ca <flash_area_close>
}
    5554:	4620      	mov	r0, r4
    5556:	b004      	add	sp, #16
    5558:	bd70      	pop	{r4, r5, r6, pc}
    off = boot_status_off(fap) +
    555a:	9803      	ldr	r0, [sp, #12]
    555c:	f7ff fdef 	bl	513e <boot_status_off>
    5560:	4605      	mov	r5, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    5562:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    5564:	4620      	mov	r0, r4
    5566:	f000 f8e5 	bl	5734 <boot_status_internal_off>
    off = boot_status_off(fap) +
    556a:	4405      	add	r5, r0
    align = flash_area_align(fap);
    556c:	9803      	ldr	r0, [sp, #12]
    556e:	f000 feaa 	bl	62c6 <flash_area_align>
    5572:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    5574:	9803      	ldr	r0, [sp, #12]
    5576:	f7ff fbdc 	bl	4d32 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    557a:	2208      	movs	r2, #8
    557c:	4601      	mov	r1, r0
    557e:	a801      	add	r0, sp, #4
    5580:	f001 f878 	bl	6674 <memset>
    buf[0] = bs->state;
    5584:	7923      	ldrb	r3, [r4, #4]
    5586:	f88d 3004 	strb.w	r3, [sp, #4]
    rc = flash_area_write(fap, off, buf, align);
    558a:	4633      	mov	r3, r6
    558c:	aa01      	add	r2, sp, #4
    558e:	4629      	mov	r1, r5
    5590:	9803      	ldr	r0, [sp, #12]
    5592:	f000 fe3a 	bl	620a <flash_area_write>
    if (rc != 0) {
    5596:	4604      	mov	r4, r0
    5598:	2800      	cmp	r0, #0
    559a:	d0d8      	beq.n	554e <boot_write_status+0x14>
        rc = BOOT_EFLASH;
    559c:	2401      	movs	r4, #1
    559e:	e7d6      	b.n	554e <boot_write_status+0x14>

000055a0 <boot_erase_region>:
{
    55a0:	b508      	push	{r3, lr}
    return flash_area_erase(fap, off, sz);
    55a2:	f000 fe62 	bl	626a <flash_area_erase>
}
    55a6:	bd08      	pop	{r3, pc}

000055a8 <swap_erase_trailer_sectors>:
#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)

int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    55a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    55ac:	4606      	mov	r6, r0
    55ae:	460f      	mov	r7, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", fap->fa_id);

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    55b0:	2100      	movs	r1, #0
    55b2:	4608      	mov	r0, r1
    55b4:	f7ff fbb3 	bl	4d1e <flash_area_id_from_multi_image_slot>
    55b8:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    55ba:	2101      	movs	r1, #1
    55bc:	2000      	movs	r0, #0
    55be:	f7ff fbae 	bl	4d1e <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (fap->fa_id == fa_id_primary) {
    55c2:	783b      	ldrb	r3, [r7, #0]
    55c4:	429c      	cmp	r4, r3
    55c6:	d023      	beq.n	5610 <swap_erase_trailer_sectors+0x68>
        slot = BOOT_PRIMARY_SLOT;
    } else if (fap->fa_id == fa_id_secondary) {
    55c8:	4298      	cmp	r0, r3
    55ca:	d123      	bne.n	5614 <swap_erase_trailer_sectors+0x6c>
        slot = BOOT_SECONDARY_SLOT;
    55cc:	2301      	movs	r3, #1
    } else {
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    55ce:	4699      	mov	r9, r3
    55d0:	222c      	movs	r2, #44	; 0x2c
    55d2:	fb02 6303 	mla	r3, r2, r3, r6
    55d6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    55d8:	3c01      	subs	r4, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    55da:	6df0      	ldr	r0, [r6, #92]	; 0x5c
    55dc:	f7ff fd9c 	bl	5118 <boot_trailer_sz>
    55e0:	4680      	mov	r8, r0
    total_sz = 0;
    55e2:	2500      	movs	r5, #0
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    55e4:	232c      	movs	r3, #44	; 0x2c
    55e6:	fb03 6309 	mla	r3, r3, r9, r6
    55ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    55ec:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    55f0:	f8d2 a004 	ldr.w	sl, [r2, #4]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    55f4:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
           BOOT_IMG(state, slot).sectors[0].fs_off;
    55f8:	681b      	ldr	r3, [r3, #0]
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    55fa:	4652      	mov	r2, sl
    55fc:	1ac9      	subs	r1, r1, r3
    55fe:	4638      	mov	r0, r7
    5600:	f7ff ffce 	bl	55a0 <boot_erase_region>
        assert(rc == 0);

        sector--;
    5604:	3c01      	subs	r4, #1
        total_sz += sz;
    5606:	4455      	add	r5, sl
    } while (total_sz < trailer_sz);
    5608:	45a8      	cmp	r8, r5
    560a:	d8eb      	bhi.n	55e4 <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    560c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        slot = BOOT_PRIMARY_SLOT;
    5610:	2300      	movs	r3, #0
    5612:	e7dc      	b.n	55ce <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    5614:	2001      	movs	r0, #1
    5616:	e7f9      	b.n	560c <swap_erase_trailer_sectors+0x64>

00005618 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    5618:	b530      	push	{r4, r5, lr}
    561a:	b083      	sub	sp, #12
    561c:	460c      	mov	r4, r1
    561e:	4615      	mov	r5, r2

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", fap->fa_id);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    5620:	4669      	mov	r1, sp
    5622:	2007      	movs	r0, #7
    5624:	f7ff fdf7 	bl	5216 <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    5628:	79e9      	ldrb	r1, [r5, #7]
    562a:	2901      	cmp	r1, #1
    562c:	d10d      	bne.n	564a <swap_status_init+0x32>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    562e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5632:	2b01      	cmp	r3, #1
    5634:	d00e      	beq.n	5654 <swap_status_init+0x3c>
        rc = boot_write_image_ok(fap);
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    5636:	68a9      	ldr	r1, [r5, #8]
    5638:	4620      	mov	r0, r4
    563a:	f7ff fe3c 	bl	52b6 <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    563e:	4620      	mov	r0, r4
    5640:	f7fb f9a6 	bl	990 <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    5644:	2000      	movs	r0, #0
    5646:	b003      	add	sp, #12
    5648:	bd30      	pop	{r4, r5, pc}
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    564a:	2200      	movs	r2, #0
    564c:	4620      	mov	r0, r4
    564e:	f7ff fe20 	bl	5292 <boot_write_swap_info>
    5652:	e7ec      	b.n	562e <swap_status_init+0x16>
        rc = boot_write_image_ok(fap);
    5654:	4620      	mov	r0, r4
    5656:	f7ff fe15 	bl	5284 <boot_write_image_ok>
    565a:	e7ec      	b.n	5636 <swap_status_init+0x1e>

0000565c <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    565c:	b570      	push	{r4, r5, r6, lr}
    565e:	b082      	sub	sp, #8
    5660:	4606      	mov	r6, r0
    5662:	460d      	mov	r5, r1
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    5664:	f7fb fed2 	bl	140c <swap_status_source>
    5668:	4604      	mov	r4, r0
    566a:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    566c:	b360      	cbz	r0, 56c8 <swap_read_status+0x6c>
    566e:	2802      	cmp	r0, #2
    5670:	d129      	bne.n	56c6 <swap_read_status+0x6a>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    5672:	a901      	add	r1, sp, #4
    5674:	2003      	movs	r0, #3
    5676:	f7fc fc61 	bl	1f3c <flash_area_open>
    if (rc != 0) {
    567a:	b108      	cbz	r0, 5680 <swap_read_status+0x24>
        return BOOT_EFLASH;
    567c:	2401      	movs	r4, #1
    567e:	e023      	b.n	56c8 <swap_read_status+0x6c>
    }

    rc = swap_read_status_bytes(fap, state, bs);
    5680:	462a      	mov	r2, r5
    5682:	4631      	mov	r1, r6
    5684:	9801      	ldr	r0, [sp, #4]
    5686:	f7fb fdc7 	bl	1218 <swap_read_status_bytes>
    if (rc == 0) {
    568a:	4604      	mov	r4, r0
    568c:	b118      	cbz	r0, 5696 <swap_read_status+0x3a>

        /* Extract the swap type info */
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    }

    flash_area_close(fap);
    568e:	9801      	ldr	r0, [sp, #4]
    5690:	f000 fd9b 	bl	61ca <flash_area_close>

    return rc;
    5694:	e018      	b.n	56c8 <swap_read_status+0x6c>
        off = boot_swap_info_off(fap);
    5696:	9801      	ldr	r0, [sp, #4]
    5698:	f7ff fd5a 	bl	5150 <boot_swap_info_off>
        rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    569c:	2301      	movs	r3, #1
    569e:	f10d 0203 	add.w	r2, sp, #3
    56a2:	4601      	mov	r1, r0
    56a4:	9801      	ldr	r0, [sp, #4]
    56a6:	f7ff fb46 	bl	4d36 <flash_area_read_is_empty>
        if (rc == 1) {
    56aa:	2801      	cmp	r0, #1
    56ac:	d006      	beq.n	56bc <swap_read_status+0x60>
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    56ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
    56b2:	f003 030f 	and.w	r3, r3, #15
    56b6:	71eb      	strb	r3, [r5, #7]
    56b8:	4604      	mov	r4, r0
    56ba:	e7e8      	b.n	568e <swap_read_status+0x32>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    56bc:	2301      	movs	r3, #1
    56be:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
    56c2:	4620      	mov	r0, r4
    56c4:	e7f3      	b.n	56ae <swap_read_status+0x52>
        return BOOT_EBADARGS;
    56c6:	2407      	movs	r4, #7
}
    56c8:	4620      	mov	r0, r4
    56ca:	b002      	add	sp, #8
    56cc:	bd70      	pop	{r4, r5, r6, pc}

000056ce <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    56ce:	b510      	push	{r4, lr}
    56d0:	b082      	sub	sp, #8
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    56d2:	a901      	add	r1, sp, #4
    56d4:	2003      	movs	r0, #3
    56d6:	f7fc fc31 	bl	1f3c <flash_area_open>
            &fap);
    if (rc != 0) {
    56da:	b118      	cbz	r0, 56e4 <swap_set_copy_done+0x16>
        return BOOT_EFLASH;
    56dc:	2401      	movs	r4, #1
    }

    rc = boot_write_copy_done(fap);
    flash_area_close(fap);
    return rc;
}
    56de:	4620      	mov	r0, r4
    56e0:	b002      	add	sp, #8
    56e2:	bd10      	pop	{r4, pc}
    rc = boot_write_copy_done(fap);
    56e4:	9801      	ldr	r0, [sp, #4]
    56e6:	f7ff fdc6 	bl	5276 <boot_write_copy_done>
    56ea:	4604      	mov	r4, r0
    flash_area_close(fap);
    56ec:	9801      	ldr	r0, [sp, #4]
    56ee:	f000 fd6c 	bl	61ca <flash_area_close>
    return rc;
    56f2:	e7f4      	b.n	56de <swap_set_copy_done+0x10>

000056f4 <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    56f4:	b510      	push	{r4, lr}
    56f6:	b084      	sub	sp, #16
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    56f8:	a903      	add	r1, sp, #12
    56fa:	2003      	movs	r0, #3
    56fc:	f7fc fc1e 	bl	1f3c <flash_area_open>
            &fap);
    if (rc != 0) {
    5700:	b118      	cbz	r0, 570a <swap_set_image_ok+0x16>
        return BOOT_EFLASH;
    5702:	2401      	movs	r4, #1
    }

out:
    flash_area_close(fap);
    return rc;
}
    5704:	4620      	mov	r0, r4
    5706:	b004      	add	sp, #16
    5708:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, &state);
    570a:	a901      	add	r1, sp, #4
    570c:	9803      	ldr	r0, [sp, #12]
    570e:	f7ff fd22 	bl	5156 <boot_read_swap_state>
    if (rc != 0) {
    5712:	4604      	mov	r4, r0
    5714:	b960      	cbnz	r0, 5730 <swap_set_image_ok+0x3c>
    if (state.image_ok == BOOT_FLAG_UNSET) {
    5716:	f89d 3007 	ldrb.w	r3, [sp, #7]
    571a:	2b03      	cmp	r3, #3
    571c:	d003      	beq.n	5726 <swap_set_image_ok+0x32>
    flash_area_close(fap);
    571e:	9803      	ldr	r0, [sp, #12]
    5720:	f000 fd53 	bl	61ca <flash_area_close>
    return rc;
    5724:	e7ee      	b.n	5704 <swap_set_image_ok+0x10>
        rc = boot_write_image_ok(fap);
    5726:	9803      	ldr	r0, [sp, #12]
    5728:	f7ff fdac 	bl	5284 <boot_write_image_ok>
    572c:	4604      	mov	r4, r0
    572e:	e7f6      	b.n	571e <swap_set_image_ok+0x2a>
        rc = BOOT_EFLASH;
    5730:	2401      	movs	r4, #1
    5732:	e7f4      	b.n	571e <swap_set_image_ok+0x2a>

00005734 <boot_status_internal_off>:
{
    5734:	b430      	push	{r4, r5}
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    5736:	7943      	ldrb	r3, [r0, #5]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    5738:	2b01      	cmp	r3, #1
    573a:	d010      	beq.n	575e <boot_status_internal_off+0x2a>
    573c:	2202      	movs	r2, #2
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    573e:	fb01 f402 	mul.w	r4, r1, r2
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    5742:	2b01      	cmp	r3, #1
    5744:	d00d      	beq.n	5762 <boot_status_internal_off+0x2e>
    5746:	01cd      	lsls	r5, r1, #7
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    5748:	7903      	ldrb	r3, [r0, #4]
    574a:	3b01      	subs	r3, #1
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    574c:	6802      	ldr	r2, [r0, #0]
    574e:	3a01      	subs	r2, #1
    5750:	fb02 f204 	mul.w	r2, r2, r4
    5754:	fb01 2303 	mla	r3, r1, r3, r2
}
    5758:	1958      	adds	r0, r3, r5
    575a:	bc30      	pop	{r4, r5}
    575c:	4770      	bx	lr
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    575e:	2201      	movs	r2, #1
    5760:	e7ed      	b.n	573e <boot_status_internal_off+0xa>
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    5762:	2500      	movs	r5, #0
    5764:	e7f0      	b.n	5748 <boot_status_internal_off+0x14>

00005766 <nrf_cleanup_clock>:
    p_reg->INTENCLR = mask;
    5766:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    576a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    576e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    5772:	4770      	bx	lr

00005774 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    5774:	4602      	mov	r2, r0
    5776:	b158      	cbz	r0, 5790 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5778:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    577a:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    577e:	2b01      	cmp	r3, #1
    5780:	d003      	beq.n	578a <sys_notify_validate+0x16>
    5782:	2b03      	cmp	r3, #3
    5784:	d107      	bne.n	5796 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    5786:	6803      	ldr	r3, [r0, #0]
    5788:	b143      	cbz	r3, 579c <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    578a:	2000      	movs	r0, #0
    578c:	6090      	str	r0, [r2, #8]
    578e:	4770      	bx	lr
		return -EINVAL;
    5790:	f06f 0015 	mvn.w	r0, #21
    5794:	4770      	bx	lr
		rv = -EINVAL;
    5796:	f06f 0015 	mvn.w	r0, #21
    579a:	4770      	bx	lr
			rv = -EINVAL;
    579c:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    57a0:	4770      	bx	lr

000057a2 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    57a2:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    57a4:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    57a6:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    57aa:	6081      	str	r1, [r0, #8]
	switch (method) {
    57ac:	2a03      	cmp	r2, #3
    57ae:	d103      	bne.n	57b8 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    57b0:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    57b2:	2200      	movs	r2, #0
    57b4:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    57b6:	4770      	bx	lr
	sys_notify_generic_callback rv = 0;
    57b8:	2000      	movs	r0, #0
    57ba:	e7fa      	b.n	57b2 <sys_notify_finalize+0x10>

000057bc <arch_printk_char_out>:
}
    57bc:	2000      	movs	r0, #0
    57be:	4770      	bx	lr

000057c0 <print_hex>:
{
    57c0:	b570      	push	{r4, r5, r6, lr}
    57c2:	b084      	sub	sp, #16
    57c4:	4614      	mov	r4, r2
    57c6:	461d      	mov	r5, r3
    57c8:	f89d 3020 	ldrb.w	r3, [sp, #32]
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
    57cc:	1eda      	subs	r2, r3, #3
    57ce:	bf18      	it	ne
    57d0:	2201      	movne	r2, #1
    57d2:	2b01      	cmp	r3, #1
    57d4:	d00c      	beq.n	57f0 <print_hex+0x30>
    57d6:	2320      	movs	r3, #32
    57d8:	9e09      	ldr	r6, [sp, #36]	; 0x24
    57da:	9603      	str	r6, [sp, #12]
    57dc:	9302      	str	r3, [sp, #8]
    57de:	9201      	str	r2, [sp, #4]
    57e0:	2310      	movs	r3, #16
    57e2:	9300      	str	r3, [sp, #0]
    57e4:	4622      	mov	r2, r4
    57e6:	462b      	mov	r3, r5
    57e8:	f7fb ffae 	bl	1748 <print_digits>
}
    57ec:	b004      	add	sp, #16
    57ee:	bd70      	pop	{r4, r5, r6, pc}
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
    57f0:	2330      	movs	r3, #48	; 0x30
    57f2:	e7f1      	b.n	57d8 <print_hex+0x18>

000057f4 <print_dec>:
{
    57f4:	b570      	push	{r4, r5, r6, lr}
    57f6:	b084      	sub	sp, #16
    57f8:	4614      	mov	r4, r2
    57fa:	461d      	mov	r5, r3
    57fc:	f89d 3020 	ldrb.w	r3, [sp, #32]
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
    5800:	1eda      	subs	r2, r3, #3
    5802:	bf18      	it	ne
    5804:	2201      	movne	r2, #1
    5806:	2b01      	cmp	r3, #1
    5808:	d00c      	beq.n	5824 <print_dec+0x30>
    580a:	2320      	movs	r3, #32
    580c:	9e09      	ldr	r6, [sp, #36]	; 0x24
    580e:	9603      	str	r6, [sp, #12]
    5810:	9302      	str	r3, [sp, #8]
    5812:	9201      	str	r2, [sp, #4]
    5814:	230a      	movs	r3, #10
    5816:	9300      	str	r3, [sp, #0]
    5818:	4622      	mov	r2, r4
    581a:	462b      	mov	r3, r5
    581c:	f7fb ff94 	bl	1748 <print_digits>
}
    5820:	b004      	add	sp, #16
    5822:	bd70      	pop	{r4, r5, r6, pc}
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
    5824:	2330      	movs	r3, #48	; 0x30
    5826:	e7f1      	b.n	580c <print_dec+0x18>

00005828 <ok64>:
}
    5828:	2001      	movs	r0, #1
    582a:	4770      	bx	lr

0000582c <negative>:
}
    582c:	0fc8      	lsrs	r0, r1, #31
    582e:	4770      	bx	lr

00005830 <z_vprintk>:
{
    5830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5834:	b087      	sub	sp, #28
    5836:	4606      	mov	r6, r0
    5838:	4689      	mov	r9, r1
    583a:	4614      	mov	r4, r2
    583c:	9305      	str	r3, [sp, #20]
	char length_mod = 0;
    583e:	2700      	movs	r7, #0
	int min_width = -1;
    5840:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    5844:	46bb      	mov	fp, r7
	int might_format = 0; /* 1 if encountered a '%' */
    5846:	463d      	mov	r5, r7
	while (*fmt) {
    5848:	e002      	b.n	5850 <z_vprintk+0x20>
				out((int)*fmt, ctx);
    584a:	4649      	mov	r1, r9
    584c:	47b0      	blx	r6
		++fmt;
    584e:	3401      	adds	r4, #1
	while (*fmt) {
    5850:	7820      	ldrb	r0, [r4, #0]
    5852:	2800      	cmp	r0, #0
    5854:	f000 816d 	beq.w	5b32 <z_vprintk+0x302>
		if (!might_format) {
    5858:	b93d      	cbnz	r5, 586a <z_vprintk+0x3a>
			if (*fmt != '%') {
    585a:	2825      	cmp	r0, #37	; 0x25
    585c:	d1f5      	bne.n	584a <z_vprintk+0x1a>
				length_mod = 0;
    585e:	2700      	movs	r7, #0
				min_width = -1;
    5860:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				padding = PAD_NONE;
    5864:	46bb      	mov	fp, r7
				might_format = 1;
    5866:	2501      	movs	r5, #1
    5868:	e7f1      	b.n	584e <z_vprintk+0x1e>
			switch (*fmt) {
    586a:	4602      	mov	r2, r0
    586c:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
    5870:	2b55      	cmp	r3, #85	; 0x55
    5872:	f200 814e 	bhi.w	5b12 <z_vprintk+0x2e2>
    5876:	e8df f013 	tbh	[pc, r3, lsl #1]
    587a:	0147      	.short	0x0147
    587c:	014c014c 	.word	0x014c014c
    5880:	014c014c 	.word	0x014c014c
    5884:	014c014c 	.word	0x014c014c
    5888:	0154014c 	.word	0x0154014c
    588c:	014c014c 	.word	0x014c014c
    5890:	005d0056 	.word	0x005d0056
    5894:	005d005d 	.word	0x005d005d
    5898:	005d005d 	.word	0x005d005d
    589c:	005d005d 	.word	0x005d005d
    58a0:	005d005d 	.word	0x005d005d
    58a4:	014c014c 	.word	0x014c014c
    58a8:	014c014c 	.word	0x014c014c
    58ac:	014c014c 	.word	0x014c014c
    58b0:	014c014c 	.word	0x014c014c
    58b4:	014c014c 	.word	0x014c014c
    58b8:	014c014c 	.word	0x014c014c
    58bc:	014c014c 	.word	0x014c014c
    58c0:	014c014c 	.word	0x014c014c
    58c4:	014c014c 	.word	0x014c014c
    58c8:	014c014c 	.word	0x014c014c
    58cc:	014c014c 	.word	0x014c014c
    58d0:	014c014c 	.word	0x014c014c
    58d4:	014c014c 	.word	0x014c014c
    58d8:	014c014c 	.word	0x014c014c
    58dc:	014c014c 	.word	0x014c014c
    58e0:	014c00f2 	.word	0x014c00f2
    58e4:	014c014c 	.word	0x014c014c
    58e8:	014c014c 	.word	0x014c014c
    58ec:	014c014c 	.word	0x014c014c
    58f0:	014c014c 	.word	0x014c014c
    58f4:	013f014c 	.word	0x013f014c
    58f8:	014c0087 	.word	0x014c0087
    58fc:	014c014c 	.word	0x014c014c
    5900:	00870071 	.word	0x00870071
    5904:	014c014c 	.word	0x014c014c
    5908:	014c0071 	.word	0x014c0071
    590c:	014c014c 	.word	0x014c014c
    5910:	014c00e8 	.word	0x014c00e8
    5914:	011e014c 	.word	0x011e014c
    5918:	0087014c 	.word	0x0087014c
    591c:	014c014c 	.word	0x014c014c
    5920:	014c00f2 	.word	0x014c00f2
    5924:	0071      	.short	0x0071
				if (min_width < 0 && padding == PAD_NONE) {
    5926:	f1ba 0f00 	cmp.w	sl, #0
    592a:	da03      	bge.n	5934 <z_vprintk+0x104>
    592c:	f1bb 0f00 	cmp.w	fp, #0
    5930:	f000 80fa 	beq.w	5b28 <z_vprintk+0x2f8>
				if (min_width < 0) {
    5934:	f1ba 0f00 	cmp.w	sl, #0
    5938:	db0d      	blt.n	5956 <z_vprintk+0x126>
					min_width = 10 * min_width + *fmt - '0';
    593a:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
    593e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
    5942:	4492      	add	sl, r2
    5944:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
				if (padding == PAD_NONE) {
    5948:	f1bb 0f00 	cmp.w	fp, #0
    594c:	f47f af7f 	bne.w	584e <z_vprintk+0x1e>
					padding = PAD_SPACE_BEFORE;
    5950:	f04f 0b02 	mov.w	fp, #2
				goto still_might_format;
    5954:	e77b      	b.n	584e <z_vprintk+0x1e>
					min_width = *fmt - '0';
    5956:	f1a2 0a30 	sub.w	sl, r2, #48	; 0x30
    595a:	e7f5      	b.n	5948 <z_vprintk+0x118>
				if (*fmt == 'h' && length_mod == 'h') {
    595c:	2868      	cmp	r0, #104	; 0x68
    595e:	d00a      	beq.n	5976 <z_vprintk+0x146>
				} else if (*fmt == 'l' && length_mod == 'l') {
    5960:	286c      	cmp	r0, #108	; 0x6c
    5962:	d00d      	beq.n	5980 <z_vprintk+0x150>
				} else if (length_mod == 0) {
    5964:	b157      	cbz	r7, 597c <z_vprintk+0x14c>
					out((int)'%', ctx);
    5966:	4649      	mov	r1, r9
    5968:	2025      	movs	r0, #37	; 0x25
    596a:	47b0      	blx	r6
					out((int)*fmt, ctx);
    596c:	4649      	mov	r1, r9
    596e:	7820      	ldrb	r0, [r4, #0]
    5970:	47b0      	blx	r6
			might_format = 0;
    5972:	2500      	movs	r5, #0
					break;
    5974:	e76b      	b.n	584e <z_vprintk+0x1e>
				if (*fmt == 'h' && length_mod == 'h') {
    5976:	2f68      	cmp	r7, #104	; 0x68
    5978:	d1f2      	bne.n	5960 <z_vprintk+0x130>
					length_mod = 'H';
    597a:	2048      	movs	r0, #72	; 0x48
				goto still_might_format;
    597c:	4607      	mov	r7, r0
    597e:	e766      	b.n	584e <z_vprintk+0x1e>
				} else if (*fmt == 'l' && length_mod == 'l') {
    5980:	2f6c      	cmp	r7, #108	; 0x6c
    5982:	d1ef      	bne.n	5964 <z_vprintk+0x134>
					length_mod = 'L';
    5984:	204c      	movs	r0, #76	; 0x4c
    5986:	e7f9      	b.n	597c <z_vprintk+0x14c>
				if (length_mod == 'z') {
    5988:	2f7a      	cmp	r7, #122	; 0x7a
    598a:	d00e      	beq.n	59aa <z_vprintk+0x17a>
				} else if (length_mod == 'l') {
    598c:	2f6c      	cmp	r7, #108	; 0x6c
    598e:	d034      	beq.n	59fa <z_vprintk+0x1ca>
				} else if (length_mod == 'L') {
    5990:	2f4c      	cmp	r7, #76	; 0x4c
    5992:	d03b      	beq.n	5a0c <z_vprintk+0x1dc>
				} else if (*fmt == 'u') {
    5994:	2875      	cmp	r0, #117	; 0x75
    5996:	d04f      	beq.n	5a38 <z_vprintk+0x208>
					d = va_arg(ap, int);
    5998:	9b05      	ldr	r3, [sp, #20]
    599a:	1d1a      	adds	r2, r3, #4
    599c:	9205      	str	r2, [sp, #20]
    599e:	681b      	ldr	r3, [r3, #0]
    59a0:	4619      	mov	r1, r3
    59a2:	17da      	asrs	r2, r3, #31
    59a4:	e9cd 1202 	strd	r1, r2, [sp, #8]
    59a8:	e007      	b.n	59ba <z_vprintk+0x18a>
					d = va_arg(ap, ssize_t);
    59aa:	9b05      	ldr	r3, [sp, #20]
    59ac:	1d1a      	adds	r2, r3, #4
    59ae:	9205      	str	r2, [sp, #20]
    59b0:	681b      	ldr	r3, [r3, #0]
    59b2:	4619      	mov	r1, r3
    59b4:	17da      	asrs	r2, r3, #31
    59b6:	e9cd 1202 	strd	r1, r2, [sp, #8]
				if (*fmt != 'u' && negative(d)) {
    59ba:	7823      	ldrb	r3, [r4, #0]
    59bc:	2b75      	cmp	r3, #117	; 0x75
    59be:	d010      	beq.n	59e2 <z_vprintk+0x1b2>
    59c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    59c4:	f7ff ff32 	bl	582c <negative>
    59c8:	b158      	cbz	r0, 59e2 <z_vprintk+0x1b2>
					out((int)'-', ctx);
    59ca:	4649      	mov	r1, r9
    59cc:	202d      	movs	r0, #45	; 0x2d
    59ce:	47b0      	blx	r6
					d = -d;
    59d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    59d4:	4252      	negs	r2, r2
    59d6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    59da:	e9cd 2302 	strd	r2, r3, [sp, #8]
					min_width--;
    59de:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				print_dec(out, ctx, d, padding, min_width);
    59e2:	f8cd a004 	str.w	sl, [sp, #4]
    59e6:	f8cd b000 	str.w	fp, [sp]
    59ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    59ee:	4649      	mov	r1, r9
    59f0:	4630      	mov	r0, r6
    59f2:	f7ff feff 	bl	57f4 <print_dec>
			might_format = 0;
    59f6:	2500      	movs	r5, #0
				break;
    59f8:	e729      	b.n	584e <z_vprintk+0x1e>
					d = va_arg(ap, long);
    59fa:	9b05      	ldr	r3, [sp, #20]
    59fc:	1d1a      	adds	r2, r3, #4
    59fe:	9205      	str	r2, [sp, #20]
    5a00:	681b      	ldr	r3, [r3, #0]
    5a02:	4619      	mov	r1, r3
    5a04:	17da      	asrs	r2, r3, #31
    5a06:	e9cd 1202 	strd	r1, r2, [sp, #8]
    5a0a:	e7d6      	b.n	59ba <z_vprintk+0x18a>
					long long lld = va_arg(ap, long long);
    5a0c:	9b05      	ldr	r3, [sp, #20]
    5a0e:	3307      	adds	r3, #7
    5a10:	f023 0307 	bic.w	r3, r3, #7
    5a14:	f103 0208 	add.w	r2, r3, #8
    5a18:	9205      	str	r2, [sp, #20]
    5a1a:	f8d3 8000 	ldr.w	r8, [r3]
    5a1e:	685d      	ldr	r5, [r3, #4]
					if (!ok64(out, ctx, lld)) {
    5a20:	4642      	mov	r2, r8
    5a22:	462b      	mov	r3, r5
    5a24:	4649      	mov	r1, r9
    5a26:	4630      	mov	r0, r6
    5a28:	f7ff fefe 	bl	5828 <ok64>
    5a2c:	2800      	cmp	r0, #0
    5a2e:	d07e      	beq.n	5b2e <z_vprintk+0x2fe>
					d = (printk_val_t) lld;
    5a30:	f8cd 8008 	str.w	r8, [sp, #8]
    5a34:	9503      	str	r5, [sp, #12]
    5a36:	e7c0      	b.n	59ba <z_vprintk+0x18a>
					d = va_arg(ap, unsigned int);
    5a38:	9b05      	ldr	r3, [sp, #20]
    5a3a:	1d1a      	adds	r2, r3, #4
    5a3c:	9205      	str	r2, [sp, #20]
    5a3e:	681b      	ldr	r3, [r3, #0]
    5a40:	4619      	mov	r1, r3
    5a42:	2200      	movs	r2, #0
    5a44:	e9cd 1202 	strd	r1, r2, [sp, #8]
    5a48:	e7b7      	b.n	59ba <z_vprintk+0x18a>
				out('0', ctx);
    5a4a:	4649      	mov	r1, r9
    5a4c:	2030      	movs	r0, #48	; 0x30
    5a4e:	47b0      	blx	r6
				out('x', ctx);
    5a50:	4649      	mov	r1, r9
    5a52:	2078      	movs	r0, #120	; 0x78
    5a54:	47b0      	blx	r6
				min_width = sizeof(void *) * 2;
    5a56:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
    5a5a:	f04f 0b01 	mov.w	fp, #1
				if (*fmt == 'p') {
    5a5e:	7823      	ldrb	r3, [r4, #0]
    5a60:	2b70      	cmp	r3, #112	; 0x70
    5a62:	d009      	beq.n	5a78 <z_vprintk+0x248>
				} else if (length_mod == 'l') {
    5a64:	2f6c      	cmp	r7, #108	; 0x6c
    5a66:	d016      	beq.n	5a96 <z_vprintk+0x266>
				} else if (length_mod == 'L') {
    5a68:	2f4c      	cmp	r7, #76	; 0x4c
    5a6a:	d01a      	beq.n	5aa2 <z_vprintk+0x272>
					x = va_arg(ap, unsigned int);
    5a6c:	9b05      	ldr	r3, [sp, #20]
    5a6e:	1d1a      	adds	r2, r3, #4
    5a70:	9205      	str	r2, [sp, #20]
    5a72:	681a      	ldr	r2, [r3, #0]
    5a74:	2300      	movs	r3, #0
    5a76:	e004      	b.n	5a82 <z_vprintk+0x252>
					x = (uintptr_t)va_arg(ap, void *);
    5a78:	9b05      	ldr	r3, [sp, #20]
    5a7a:	1d1a      	adds	r2, r3, #4
    5a7c:	9205      	str	r2, [sp, #20]
    5a7e:	681a      	ldr	r2, [r3, #0]
    5a80:	2300      	movs	r3, #0
				print_hex(out, ctx, x, padding, min_width);
    5a82:	f8cd a004 	str.w	sl, [sp, #4]
    5a86:	f8cd b000 	str.w	fp, [sp]
    5a8a:	4649      	mov	r1, r9
    5a8c:	4630      	mov	r0, r6
    5a8e:	f7ff fe97 	bl	57c0 <print_hex>
			might_format = 0;
    5a92:	2500      	movs	r5, #0
				break;
    5a94:	e6db      	b.n	584e <z_vprintk+0x1e>
					x = va_arg(ap, unsigned long);
    5a96:	9b05      	ldr	r3, [sp, #20]
    5a98:	1d1a      	adds	r2, r3, #4
    5a9a:	9205      	str	r2, [sp, #20]
    5a9c:	681a      	ldr	r2, [r3, #0]
    5a9e:	2300      	movs	r3, #0
    5aa0:	e7ef      	b.n	5a82 <z_vprintk+0x252>
					x = va_arg(ap, unsigned long long);
    5aa2:	9b05      	ldr	r3, [sp, #20]
    5aa4:	3307      	adds	r3, #7
    5aa6:	f023 0307 	bic.w	r3, r3, #7
    5aaa:	f103 0208 	add.w	r2, r3, #8
    5aae:	9205      	str	r2, [sp, #20]
    5ab0:	681a      	ldr	r2, [r3, #0]
    5ab2:	685b      	ldr	r3, [r3, #4]
    5ab4:	e7e5      	b.n	5a82 <z_vprintk+0x252>
				char *s = va_arg(ap, char *);
    5ab6:	9b05      	ldr	r3, [sp, #20]
    5ab8:	1d1a      	adds	r2, r3, #4
    5aba:	9205      	str	r2, [sp, #20]
    5abc:	681d      	ldr	r5, [r3, #0]
    5abe:	46a8      	mov	r8, r5
				while (*s) {
    5ac0:	f898 0000 	ldrb.w	r0, [r8]
    5ac4:	b120      	cbz	r0, 5ad0 <z_vprintk+0x2a0>
					out((int)(*s++), ctx);
    5ac6:	f108 0801 	add.w	r8, r8, #1
    5aca:	4649      	mov	r1, r9
    5acc:	47b0      	blx	r6
    5ace:	e7f7      	b.n	5ac0 <z_vprintk+0x290>
				if (padding == PAD_SPACE_AFTER) {
    5ad0:	f1bb 0f03 	cmp.w	fp, #3
    5ad4:	d001      	beq.n	5ada <z_vprintk+0x2aa>
			might_format = 0;
    5ad6:	2500      	movs	r5, #0
    5ad8:	e6b9      	b.n	584e <z_vprintk+0x1e>
					int remaining = min_width - (s - start);
    5ada:	eba8 0305 	sub.w	r3, r8, r5
    5ade:	ebaa 0303 	sub.w	r3, sl, r3
					while (remaining-- > 0) {
    5ae2:	e003      	b.n	5aec <z_vprintk+0x2bc>
						out(' ', ctx);
    5ae4:	4649      	mov	r1, r9
    5ae6:	2020      	movs	r0, #32
    5ae8:	47b0      	blx	r6
					while (remaining-- > 0) {
    5aea:	4643      	mov	r3, r8
    5aec:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    5af0:	2b00      	cmp	r3, #0
    5af2:	dcf7      	bgt.n	5ae4 <z_vprintk+0x2b4>
			might_format = 0;
    5af4:	2500      	movs	r5, #0
    5af6:	e6aa      	b.n	584e <z_vprintk+0x1e>
				int c = va_arg(ap, int);
    5af8:	9b05      	ldr	r3, [sp, #20]
    5afa:	1d1a      	adds	r2, r3, #4
    5afc:	9205      	str	r2, [sp, #20]
				out(c, ctx);
    5afe:	4649      	mov	r1, r9
    5b00:	6818      	ldr	r0, [r3, #0]
    5b02:	47b0      	blx	r6
			might_format = 0;
    5b04:	2500      	movs	r5, #0
				break;
    5b06:	e6a2      	b.n	584e <z_vprintk+0x1e>
				out((int)'%', ctx);
    5b08:	4649      	mov	r1, r9
    5b0a:	2025      	movs	r0, #37	; 0x25
    5b0c:	47b0      	blx	r6
			might_format = 0;
    5b0e:	2500      	movs	r5, #0
				break;
    5b10:	e69d      	b.n	584e <z_vprintk+0x1e>
				out((int)'%', ctx);
    5b12:	4649      	mov	r1, r9
    5b14:	2025      	movs	r0, #37	; 0x25
    5b16:	47b0      	blx	r6
				out((int)*fmt, ctx);
    5b18:	4649      	mov	r1, r9
    5b1a:	7820      	ldrb	r0, [r4, #0]
    5b1c:	47b0      	blx	r6
			might_format = 0;
    5b1e:	2500      	movs	r5, #0
				break;
    5b20:	e695      	b.n	584e <z_vprintk+0x1e>
				padding = PAD_SPACE_AFTER;
    5b22:	f04f 0b03 	mov.w	fp, #3
    5b26:	e692      	b.n	584e <z_vprintk+0x1e>
					padding = PAD_ZERO_BEFORE;
    5b28:	f04f 0b01 	mov.w	fp, #1
    5b2c:	e68f      	b.n	584e <z_vprintk+0x1e>
			might_format = 0;
    5b2e:	2500      	movs	r5, #0
    5b30:	e68d      	b.n	584e <z_vprintk+0x1e>
}
    5b32:	b007      	add	sp, #28
    5b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005b38 <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
    5b38:	b40f      	push	{r0, r1, r2, r3}
    5b3a:	b500      	push	{lr}
    5b3c:	b083      	sub	sp, #12
    5b3e:	a904      	add	r1, sp, #16
    5b40:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    5b44:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    5b46:	f7fb fe6b 	bl	1820 <vprintk>
	}
	va_end(ap);
}
    5b4a:	b003      	add	sp, #12
    5b4c:	f85d eb04 	ldr.w	lr, [sp], #4
    5b50:	b004      	add	sp, #16
    5b52:	4770      	bx	lr

00005b54 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    5b54:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5b58:	8b03      	ldrh	r3, [r0, #24]
    5b5a:	f023 0307 	bic.w	r3, r3, #7
    5b5e:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    5b60:	8303      	strh	r3, [r0, #24]
}
    5b62:	4770      	bx	lr

00005b64 <notify_monitors>:
{
    5b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b68:	4606      	mov	r6, r0
    5b6a:	460f      	mov	r7, r1
    5b6c:	4690      	mov	r8, r2
	return list->head;
    5b6e:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    5b70:	b119      	cbz	r1, 5b7a <notify_monitors+0x16>
    5b72:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    5b74:	b131      	cbz	r1, 5b84 <notify_monitors+0x20>
	return node->next;
    5b76:	680c      	ldr	r4, [r1, #0]
    5b78:	e004      	b.n	5b84 <notify_monitors+0x20>
    5b7a:	460c      	mov	r4, r1
    5b7c:	e002      	b.n	5b84 <notify_monitors+0x20>
    5b7e:	4623      	mov	r3, r4
    5b80:	4621      	mov	r1, r4
    5b82:	461c      	mov	r4, r3
    5b84:	b159      	cbz	r1, 5b9e <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    5b86:	684d      	ldr	r5, [r1, #4]
    5b88:	4643      	mov	r3, r8
    5b8a:	463a      	mov	r2, r7
    5b8c:	4630      	mov	r0, r6
    5b8e:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    5b90:	2c00      	cmp	r4, #0
    5b92:	d0f4      	beq.n	5b7e <notify_monitors+0x1a>
    5b94:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    5b96:	2c00      	cmp	r4, #0
    5b98:	d0f2      	beq.n	5b80 <notify_monitors+0x1c>
	return node->next;
    5b9a:	6823      	ldr	r3, [r4, #0]
    5b9c:	e7f0      	b.n	5b80 <notify_monitors+0x1c>
}
    5b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005ba2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5ba2:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    5ba4:	f013 0307 	ands.w	r3, r3, #7
    5ba8:	d103      	bne.n	5bb2 <process_recheck+0x10>
	return list->head;
    5baa:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    5bac:	b10a      	cbz	r2, 5bb2 <process_recheck+0x10>
		evt = EVT_START;
    5bae:	2003      	movs	r0, #3
    5bb0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    5bb2:	2b02      	cmp	r3, #2
    5bb4:	d003      	beq.n	5bbe <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    5bb6:	2b01      	cmp	r3, #1
    5bb8:	d006      	beq.n	5bc8 <process_recheck+0x26>
	int evt = EVT_NOP;
    5bba:	2000      	movs	r0, #0
    5bbc:	4770      	bx	lr
		   && (mgr->refs == 0)) {
    5bbe:	8b42      	ldrh	r2, [r0, #26]
    5bc0:	2a00      	cmp	r2, #0
    5bc2:	d1f8      	bne.n	5bb6 <process_recheck+0x14>
		evt = EVT_STOP;
    5bc4:	2004      	movs	r0, #4
    5bc6:	4770      	bx	lr
    5bc8:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    5bca:	b10b      	cbz	r3, 5bd0 <process_recheck+0x2e>
		evt = EVT_RESET;
    5bcc:	2005      	movs	r0, #5
}
    5bce:	4770      	bx	lr
	int evt = EVT_NOP;
    5bd0:	2000      	movs	r0, #0
    5bd2:	4770      	bx	lr

00005bd4 <process_complete>:
{
    5bd4:	b538      	push	{r3, r4, r5, lr}
    5bd6:	4604      	mov	r4, r0
    5bd8:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5bda:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    5bdc:	2a00      	cmp	r2, #0
    5bde:	db07      	blt.n	5bf0 <process_complete+0x1c>
    5be0:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    5be4:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    5be6:	2a01      	cmp	r2, #1
    5be8:	d90e      	bls.n	5c08 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    5bea:	2b04      	cmp	r3, #4
    5bec:	d032      	beq.n	5c54 <process_complete+0x80>
}
    5bee:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    5bf0:	e9d0 0100 	ldrd	r0, r1, [r0]
    5bf4:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    5bf8:	2300      	movs	r3, #0
    5bfa:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    5bfc:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    5bfe:	2101      	movs	r1, #1
    5c00:	4620      	mov	r0, r4
    5c02:	f7ff ffa7 	bl	5b54 <set_state>
    5c06:	e7f2      	b.n	5bee <process_complete+0x1a>
		*clients = mgr->clients;
    5c08:	e9d0 0100 	ldrd	r0, r1, [r0]
    5c0c:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    5c10:	2200      	movs	r2, #0
    5c12:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    5c14:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    5c16:	2b06      	cmp	r3, #6
    5c18:	d117      	bne.n	5c4a <process_complete+0x76>
	return list->head;
    5c1a:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    5c1c:	b13b      	cbz	r3, 5c2e <process_complete+0x5a>
				mgr->refs += 1U;
    5c1e:	8b62      	ldrh	r2, [r4, #26]
    5c20:	3201      	adds	r2, #1
    5c22:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
    5c24:	2b00      	cmp	r3, #0
    5c26:	d0f9      	beq.n	5c1c <process_complete+0x48>
	return node->next;
    5c28:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    5c2a:	2b00      	cmp	r3, #0
    5c2c:	d1f6      	bne.n	5c1c <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
    5c2e:	2102      	movs	r1, #2
    5c30:	4620      	mov	r0, r4
    5c32:	f7ff ff8f 	bl	5b54 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    5c36:	4620      	mov	r0, r4
    5c38:	f7ff ffb3 	bl	5ba2 <process_recheck>
    5c3c:	2800      	cmp	r0, #0
    5c3e:	d0d6      	beq.n	5bee <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    5c40:	8b23      	ldrh	r3, [r4, #24]
    5c42:	f043 0320 	orr.w	r3, r3, #32
    5c46:	8323      	strh	r3, [r4, #24]
    5c48:	e7d1      	b.n	5bee <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    5c4a:	2100      	movs	r1, #0
    5c4c:	4620      	mov	r0, r4
    5c4e:	f7ff ff81 	bl	5b54 <set_state>
    5c52:	e7f0      	b.n	5c36 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
    5c54:	2100      	movs	r1, #0
    5c56:	f7ff ff7d 	bl	5b54 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    5c5a:	4620      	mov	r0, r4
    5c5c:	f7ff ffa1 	bl	5ba2 <process_recheck>
    5c60:	2800      	cmp	r0, #0
    5c62:	d0c4      	beq.n	5bee <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    5c64:	8b23      	ldrh	r3, [r4, #24]
    5c66:	f043 0320 	orr.w	r3, r3, #32
    5c6a:	8323      	strh	r3, [r4, #24]
}
    5c6c:	e7bf      	b.n	5bee <process_complete+0x1a>

00005c6e <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    5c6e:	b168      	cbz	r0, 5c8c <validate_args+0x1e>
    5c70:	b179      	cbz	r1, 5c92 <validate_args+0x24>
{
    5c72:	b510      	push	{r4, lr}
    5c74:	460c      	mov	r4, r1
	int rv = sys_notify_validate(&cli->notify);
    5c76:	1d08      	adds	r0, r1, #4
    5c78:	f7ff fd7c 	bl	5774 <sys_notify_validate>
	if ((rv == 0)
    5c7c:	4603      	mov	r3, r0
    5c7e:	b918      	cbnz	r0, 5c88 <validate_args+0x1a>
	    && ((cli->notify.flags
    5c80:	68a2      	ldr	r2, [r4, #8]
    5c82:	f032 0203 	bics.w	r2, r2, #3
    5c86:	d108      	bne.n	5c9a <validate_args+0x2c>
}
    5c88:	4618      	mov	r0, r3
    5c8a:	bd10      	pop	{r4, pc}
		return -EINVAL;
    5c8c:	f06f 0315 	mvn.w	r3, #21
    5c90:	e001      	b.n	5c96 <validate_args+0x28>
    5c92:	f06f 0315 	mvn.w	r3, #21
}
    5c96:	4618      	mov	r0, r3
    5c98:	4770      	bx	lr
		rv = -EINVAL;
    5c9a:	f06f 0315 	mvn.w	r3, #21
    5c9e:	e7f3      	b.n	5c88 <validate_args+0x1a>

00005ca0 <notify_one>:
{
    5ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ca4:	4607      	mov	r7, r0
    5ca6:	460c      	mov	r4, r1
    5ca8:	4690      	mov	r8, r2
    5caa:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5cac:	4619      	mov	r1, r3
    5cae:	1d20      	adds	r0, r4, #4
    5cb0:	f7ff fd77 	bl	57a2 <sys_notify_finalize>
	if (cb) {
    5cb4:	b128      	cbz	r0, 5cc2 <notify_one+0x22>
    5cb6:	4606      	mov	r6, r0
		cb(mgr, cli, state, res);
    5cb8:	462b      	mov	r3, r5
    5cba:	4642      	mov	r2, r8
    5cbc:	4621      	mov	r1, r4
    5cbe:	4638      	mov	r0, r7
    5cc0:	47b0      	blx	r6
}
    5cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005cc6 <notify_all>:
{
    5cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5cc8:	4607      	mov	r7, r0
    5cca:	460c      	mov	r4, r1
    5ccc:	4616      	mov	r6, r2
    5cce:	461d      	mov	r5, r3
	while (!sys_slist_is_empty(list)) {
    5cd0:	e005      	b.n	5cde <notify_all+0x18>
	list->tail = node;
    5cd2:	6063      	str	r3, [r4, #4]
		notify_one(mgr, cli, state, res);
    5cd4:	462b      	mov	r3, r5
    5cd6:	4632      	mov	r2, r6
    5cd8:	4638      	mov	r0, r7
    5cda:	f7ff ffe1 	bl	5ca0 <notify_one>
	return list->head;
    5cde:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    5ce0:	b129      	cbz	r1, 5cee <notify_all+0x28>
	return node->next;
    5ce2:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    5ce4:	6023      	str	r3, [r4, #0]
	return list->tail;
    5ce6:	6862      	ldr	r2, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5ce8:	428a      	cmp	r2, r1
    5cea:	d1f3      	bne.n	5cd4 <notify_all+0xe>
    5cec:	e7f1      	b.n	5cd2 <notify_all+0xc>
}
    5cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005cf0 <transition_complete>:
{
    5cf0:	b510      	push	{r4, lr}
    5cf2:	f04f 0420 	mov.w	r4, #32
    5cf6:	f3ef 8211 	mrs	r2, BASEPRI
    5cfa:	f384 8811 	msr	BASEPRI, r4
    5cfe:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    5d02:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    5d04:	2101      	movs	r1, #1
    5d06:	f7fb fd9b 	bl	1840 <process_event>
}
    5d0a:	bd10      	pop	{r4, pc}

00005d0c <onoff_manager_init>:
	if ((mgr == NULL)
    5d0c:	4603      	mov	r3, r0
    5d0e:	b168      	cbz	r0, 5d2c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    5d10:	b179      	cbz	r1, 5d32 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    5d12:	680a      	ldr	r2, [r1, #0]
    5d14:	b182      	cbz	r2, 5d38 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    5d16:	684a      	ldr	r2, [r1, #4]
    5d18:	b18a      	cbz	r2, 5d3e <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5d1a:	2000      	movs	r0, #0
    5d1c:	6018      	str	r0, [r3, #0]
    5d1e:	6058      	str	r0, [r3, #4]
    5d20:	6098      	str	r0, [r3, #8]
    5d22:	60d8      	str	r0, [r3, #12]
    5d24:	6158      	str	r0, [r3, #20]
    5d26:	6198      	str	r0, [r3, #24]
    5d28:	6119      	str	r1, [r3, #16]
	return 0;
    5d2a:	4770      	bx	lr
		return -EINVAL;
    5d2c:	f06f 0015 	mvn.w	r0, #21
    5d30:	4770      	bx	lr
    5d32:	f06f 0015 	mvn.w	r0, #21
    5d36:	4770      	bx	lr
    5d38:	f06f 0015 	mvn.w	r0, #21
    5d3c:	4770      	bx	lr
    5d3e:	f06f 0015 	mvn.w	r0, #21
}
    5d42:	4770      	bx	lr

00005d44 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    5d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d46:	4604      	mov	r4, r0
    5d48:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    5d4a:	f7ff ff90 	bl	5c6e <validate_args>

	if (rv < 0) {
    5d4e:	1e05      	subs	r5, r0, #0
    5d50:	db37      	blt.n	5dc2 <onoff_request+0x7e>
    5d52:	f04f 0320 	mov.w	r3, #32
    5d56:	f3ef 8211 	mrs	r2, BASEPRI
    5d5a:	f383 8811 	msr	BASEPRI, r3
    5d5e:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5d62:	8b21      	ldrh	r1, [r4, #24]
    5d64:	f001 0107 	and.w	r1, r1, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    5d68:	8b63      	ldrh	r3, [r4, #26]
    5d6a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5d6e:	4283      	cmp	r3, r0
    5d70:	d02f      	beq.n	5dd2 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    5d72:	460d      	mov	r5, r1
	if (state == ONOFF_STATE_ON) {
    5d74:	2902      	cmp	r1, #2
    5d76:	d00c      	beq.n	5d92 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    5d78:	b189      	cbz	r1, 5d9e <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    5d7a:	2904      	cmp	r1, #4
    5d7c:	d00f      	beq.n	5d9e <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    5d7e:	2906      	cmp	r1, #6
    5d80:	d00d      	beq.n	5d9e <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    5d82:	2905      	cmp	r1, #5
    5d84:	d01f      	beq.n	5dc6 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    5d86:	f06f 0504 	mvn.w	r5, #4
	bool notify = false;            /* do client notification */
    5d8a:	2000      	movs	r0, #0
	bool start = false;             /* trigger a start transition */
    5d8c:	4603      	mov	r3, r0
	bool add_client = false;        /* add client to pending list */
    5d8e:	4607      	mov	r7, r0
    5d90:	e00a      	b.n	5da8 <onoff_request+0x64>
		mgr->refs += 1U;
    5d92:	3301      	adds	r3, #1
    5d94:	8363      	strh	r3, [r4, #26]
		notify = true;
    5d96:	2001      	movs	r0, #1
	bool start = false;             /* trigger a start transition */
    5d98:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    5d9a:	461f      	mov	r7, r3
    5d9c:	e004      	b.n	5da8 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    5d9e:	fab1 f381 	clz	r3, r1
    5da2:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    5da4:	2000      	movs	r0, #0
		add_client = true;
    5da6:	2701      	movs	r7, #1
	}

out:
	if (add_client) {
    5da8:	b12f      	cbz	r7, 5db6 <onoff_request+0x72>
	parent->next = child;
    5daa:	2700      	movs	r7, #0
    5dac:	6037      	str	r7, [r6, #0]
	return list->tail;
    5dae:	6867      	ldr	r7, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    5db0:	b1af      	cbz	r7, 5dde <onoff_request+0x9a>
	parent->next = child;
    5db2:	603e      	str	r6, [r7, #0]
	list->tail = node;
    5db4:	6066      	str	r6, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    5db6:	b9ab      	cbnz	r3, 5de4 <onoff_request+0xa0>
	__asm__ volatile(
    5db8:	f382 8811 	msr	BASEPRI, r2
    5dbc:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    5dc0:	b9a8      	cbnz	r0, 5dee <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    5dc2:	4628      	mov	r0, r5
    5dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    5dc6:	f06f 0522 	mvn.w	r5, #34	; 0x22
	bool notify = false;            /* do client notification */
    5dca:	2000      	movs	r0, #0
	bool start = false;             /* trigger a start transition */
    5dcc:	4603      	mov	r3, r0
	bool add_client = false;        /* add client to pending list */
    5dce:	4607      	mov	r7, r0
    5dd0:	e7ea      	b.n	5da8 <onoff_request+0x64>
		rv = -EAGAIN;
    5dd2:	f06f 050a 	mvn.w	r5, #10
	bool notify = false;            /* do client notification */
    5dd6:	2000      	movs	r0, #0
	bool start = false;             /* trigger a start transition */
    5dd8:	4603      	mov	r3, r0
	bool add_client = false;        /* add client to pending list */
    5dda:	4607      	mov	r7, r0
    5ddc:	e7e4      	b.n	5da8 <onoff_request+0x64>
    5dde:	6066      	str	r6, [r4, #4]
	list->head = node;
    5de0:	6026      	str	r6, [r4, #0]
    5de2:	e7e8      	b.n	5db6 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    5de4:	2102      	movs	r1, #2
    5de6:	4620      	mov	r0, r4
    5de8:	f7fb fd2a 	bl	1840 <process_event>
    5dec:	e7e9      	b.n	5dc2 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    5dee:	2300      	movs	r3, #0
    5df0:	460a      	mov	r2, r1
    5df2:	4631      	mov	r1, r6
    5df4:	4620      	mov	r0, r4
    5df6:	f7ff ff53 	bl	5ca0 <notify_one>
    5dfa:	e7e2      	b.n	5dc2 <onoff_request+0x7e>

00005dfc <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
    5dfc:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0) {
    5dfe:	1d13      	adds	r3, r2, #4
    5e00:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    5e04:	b9d3      	cbnz	r3, 5e3c <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
    5e06:	2301      	movs	r3, #1
    5e08:	fa03 f402 	lsl.w	r4, r3, r2
    5e0c:	68c3      	ldr	r3, [r0, #12]
    5e0e:	4323      	orrs	r3, r4
    5e10:	60c3      	str	r3, [r0, #12]
		b->next = c;
    5e12:	3204      	adds	r2, #4
    5e14:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    5e18:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->len);
    5e1c:	6882      	ldr	r2, [r0, #8]

	if (big_heap(h)) {
    5e1e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    5e22:	d307      	bcc.n	5e34 <free_list_add_bidx+0x38>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    5e24:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->len);
    5e26:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    5e28:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    5e2c:	d304      	bcc.n	5e38 <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
    5e2e:	60d9      	str	r1, [r3, #12]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
    5e30:	bc70      	pop	{r4, r5, r6}
    5e32:	4770      	bx	lr
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    5e34:	8099      	strh	r1, [r3, #4]
    5e36:	e7f6      	b.n	5e26 <free_list_add_bidx+0x2a>
    5e38:	80d9      	strh	r1, [r3, #6]
    5e3a:	e7f9      	b.n	5e30 <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
    5e3c:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->len);
    5e40:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    5e42:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    5e46:	d318      	bcc.n	5e7a <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
    5e48:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
    5e4a:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
    5e4e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    5e52:	d314      	bcc.n	5e7e <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
    5e54:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->len);
    5e56:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    5e58:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    5e5c:	d311      	bcc.n	5e82 <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
    5e5e:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
    5e60:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->len);
    5e64:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    5e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    5e6a:	d30c      	bcc.n	5e86 <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
    5e6c:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->len);
    5e6e:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    5e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    5e74:	d309      	bcc.n	5e8a <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
    5e76:	60a1      	str	r1, [r4, #8]
    5e78:	e7da      	b.n	5e30 <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
    5e7a:	88a2      	ldrh	r2, [r4, #4]
    5e7c:	e7e5      	b.n	5e4a <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
    5e7e:	80aa      	strh	r2, [r5, #4]
    5e80:	e7e9      	b.n	5e56 <free_list_add_bidx+0x5a>
    5e82:	80eb      	strh	r3, [r5, #6]
    5e84:	e7ec      	b.n	5e60 <free_list_add_bidx+0x64>
    5e86:	80d1      	strh	r1, [r2, #6]
    5e88:	e7f1      	b.n	5e6e <free_list_add_bidx+0x72>
    5e8a:	80a1      	strh	r1, [r4, #4]
    5e8c:	e7d0      	b.n	5e30 <free_list_add_bidx+0x34>

00005e8e <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    5e8e:	b508      	push	{r3, lr}
	return big_heap_chunks(h->len);
    5e90:	6883      	ldr	r3, [r0, #8]
	chunk_set(h, c, LEFT_SIZE, size);
}

static inline bool solo_free_header(struct z_heap *h, chunkid_t c)
{
	return big_heap(h) && chunk_size(h, c) == 1;
    5e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    5e96:	d307      	bcc.n	5ea8 <free_list_add+0x1a>
	void *cmem = &buf[c];
    5e98:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
    5e9c:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    5e9e:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1;
    5ea0:	2a01      	cmp	r2, #1
    5ea2:	d002      	beq.n	5eaa <free_list_add+0x1c>
    5ea4:	2200      	movs	r2, #0
    5ea6:	e000      	b.n	5eaa <free_list_add+0x1c>
    5ea8:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
    5eaa:	b9a2      	cbnz	r2, 5ed6 <free_list_add+0x48>
	void *cmem = &buf[c];
    5eac:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
    5eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    5eb4:	d310      	bcc.n	5ed8 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
    5eb6:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    5eb8:	0852      	lsrs	r2, r2, #1
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    5eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    5ebe:	d30d      	bcc.n	5edc <free_list_add+0x4e>
    5ec0:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline size_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    5ec2:	3308      	adds	r3, #8
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    5ec4:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
    5ec8:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
    5eca:	fab2 f282 	clz	r2, r2
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
    5ece:	f1c2 021f 	rsb	r2, r2, #31
    5ed2:	f7ff ff93 	bl	5dfc <free_list_add_bidx>
	}
}
    5ed6:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
    5ed8:	8852      	ldrh	r2, [r2, #2]
    5eda:	e7ed      	b.n	5eb8 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
    5edc:	2304      	movs	r3, #4
    5ede:	e7f0      	b.n	5ec2 <free_list_add+0x34>

00005ee0 <sys_heap_init>:
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    5ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ee2:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
    5ee4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    5ee8:	d32d      	bcc.n	5f46 <sys_heap_init+0x66>
    5eea:	2008      	movs	r0, #8
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    5eec:	1a12      	subs	r2, r2, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    5eee:	1dc8      	adds	r0, r1, #7
    5ef0:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    5ef4:	4411      	add	r1, r2
    5ef6:	f021 0107 	bic.w	r1, r1, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    5efa:	1a0e      	subs	r6, r1, r0
    5efc:	ea4f 0ed6 	mov.w	lr, r6, lsr #3

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
    5f00:	4684      	mov	ip, r0
	heap->heap = h;
    5f02:	6018      	str	r0, [r3, #0]
	h->chunk0_hdr_area = 0;
    5f04:	2200      	movs	r2, #0
    5f06:	2300      	movs	r3, #0
    5f08:	e9c0 2300 	strd	r2, r3, [r0]
	h->len = buf_sz;
    5f0c:	f8c0 e008 	str.w	lr, [r0, #8]
	h->avail_buckets = 0;
    5f10:	2300      	movs	r3, #0
    5f12:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
    5f14:	f5be 4f00 	cmp.w	lr, #32768	; 0x8000
    5f18:	d317      	bcc.n	5f4a <sys_heap_init+0x6a>
    5f1a:	2208      	movs	r2, #8
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    5f1c:	3208      	adds	r2, #8
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    5f1e:	ebae 02d2 	sub.w	r2, lr, r2, lsr #3
    5f22:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
    5f24:	fab2 f282 	clz	r2, r2

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    5f28:	f1c2 0220 	rsb	r2, r2, #32
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    5f2c:	1d13      	adds	r3, r2, #4
    5f2e:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    5f30:	1ddf      	adds	r7, r3, #7
    5f32:	08f9      	lsrs	r1, r7, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    5f34:	2300      	movs	r3, #0
    5f36:	4293      	cmp	r3, r2
    5f38:	da09      	bge.n	5f4e <sys_heap_init+0x6e>
		h->buckets[i].next = 0;
    5f3a:	1d1c      	adds	r4, r3, #4
    5f3c:	2500      	movs	r5, #0
    5f3e:	f84c 5024 	str.w	r5, [ip, r4, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    5f42:	3301      	adds	r3, #1
    5f44:	e7f7      	b.n	5f36 <sys_heap_init+0x56>
	return big_heap_bytes(size) ? 8 : 4;
    5f46:	2004      	movs	r0, #4
    5f48:	e7d0      	b.n	5eec <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
    5f4a:	2204      	movs	r2, #4
    5f4c:	e7e6      	b.n	5f1c <sys_heap_init+0x3c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    5f4e:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
    5f50:	f5be 4f00 	cmp.w	lr, #32768	; 0x8000
    5f54:	d331      	bcc.n	5fba <sys_heap_init+0xda>
		((uint32_t *)cmem)[f] = val;
    5f56:	6043      	str	r3, [r0, #4]
	return big_heap_chunks(h->len);
    5f58:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    5f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    5f5e:	d32e      	bcc.n	5fbe <sys_heap_init+0xde>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
    5f60:	6843      	ldr	r3, [r0, #4]
    5f62:	f043 0301 	orr.w	r3, r3, #1
    5f66:	6043      	str	r3, [r0, #4]
	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    5f68:	ebae 0401 	sub.w	r4, lr, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    5f6c:	0065      	lsls	r5, r4, #1
	void *cmem = &buf[c];
    5f6e:	f027 0307 	bic.w	r3, r7, #7
    5f72:	18c2      	adds	r2, r0, r3
	return big_heap_chunks(h->len);
    5f74:	6887      	ldr	r7, [r0, #8]
	if (big_heap(h)) {
    5f76:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    5f7a:	d325      	bcc.n	5fc8 <sys_heap_init+0xe8>
		((uint32_t *)cmem)[f] = val;
    5f7c:	6055      	str	r5, [r2, #4]
	return big_heap_chunks(h->len);
    5f7e:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    5f80:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    5f84:	d322      	bcc.n	5fcc <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
    5f86:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
    5f88:	f026 0307 	bic.w	r3, r6, #7
    5f8c:	18c2      	adds	r2, r0, r3
	return big_heap_chunks(h->len);
    5f8e:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
    5f90:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    5f94:	d31c      	bcc.n	5fd0 <sys_heap_init+0xf0>
		((uint32_t *)cmem)[f] = val;
    5f96:	2500      	movs	r5, #0
    5f98:	6055      	str	r5, [r2, #4]
	return big_heap_chunks(h->len);
    5f9a:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
    5f9c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    5fa0:	d319      	bcc.n	5fd6 <sys_heap_init+0xf6>
		((uint32_t *)cmem)[f] = val;
    5fa2:	50c4      	str	r4, [r0, r3]
	return big_heap_chunks(h->len);
    5fa4:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    5fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    5faa:	d316      	bcc.n	5fda <sys_heap_init+0xfa>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
    5fac:	6853      	ldr	r3, [r2, #4]
    5fae:	f043 0301 	orr.w	r3, r3, #1
    5fb2:	6053      	str	r3, [r2, #4]
	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);

	free_list_add(h, chunk0_size);
    5fb4:	f7ff ff6b 	bl	5e8e <free_list_add>
}
    5fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
    5fba:	8043      	strh	r3, [r0, #2]
    5fbc:	e7cc      	b.n	5f58 <sys_heap_init+0x78>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
    5fbe:	8843      	ldrh	r3, [r0, #2]
    5fc0:	f043 0301 	orr.w	r3, r3, #1
    5fc4:	8043      	strh	r3, [r0, #2]
    5fc6:	e7cf      	b.n	5f68 <sys_heap_init+0x88>
		((uint16_t *)cmem)[f] = val;
    5fc8:	8055      	strh	r5, [r2, #2]
    5fca:	e7d8      	b.n	5f7e <sys_heap_init+0x9e>
    5fcc:	52c1      	strh	r1, [r0, r3]
    5fce:	e7db      	b.n	5f88 <sys_heap_init+0xa8>
    5fd0:	2500      	movs	r5, #0
    5fd2:	8055      	strh	r5, [r2, #2]
    5fd4:	e7e1      	b.n	5f9a <sys_heap_init+0xba>
    5fd6:	52c4      	strh	r4, [r0, r3]
    5fd8:	e7e4      	b.n	5fa4 <sys_heap_init+0xc4>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
    5fda:	8853      	ldrh	r3, [r2, #2]
    5fdc:	f043 0301 	orr.w	r3, r3, #1
    5fe0:	8053      	strh	r3, [r2, #2]
    5fe2:	e7e7      	b.n	5fb4 <sys_heap_init+0xd4>

00005fe4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    5fe4:	4770      	bx	lr

00005fe6 <z_platform_init>:

void z_platform_init(void)
{
    5fe6:	b508      	push	{r3, lr}
	SystemInit();
    5fe8:	f7fd fa86 	bl	34f8 <SystemInit>
}
    5fec:	bd08      	pop	{r3, pc}

00005fee <dummy_timestamp>:
}
    5fee:	2000      	movs	r0, #0
    5ff0:	4770      	bx	lr

00005ff2 <k_cycle_get_32_wrapper>:
{
    5ff2:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    5ff4:	f7fc fa34 	bl	2460 <z_timer_cycle_get_32>
}
    5ff8:	bd08      	pop	{r3, pc}

00005ffa <log_string_sync>:
{
    5ffa:	b40e      	push	{r1, r2, r3}
    5ffc:	b500      	push	{lr}
    5ffe:	b082      	sub	sp, #8
    6000:	aa03      	add	r2, sp, #12
    6002:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
    6006:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
    6008:	2300      	movs	r3, #0
    600a:	f7fb fce5 	bl	19d8 <log_generic>
}
    600e:	b002      	add	sp, #8
    6010:	f85d eb04 	ldr.w	lr, [sp], #4
    6014:	b003      	add	sp, #12
    6016:	4770      	bx	lr

00006018 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    6018:	b508      	push	{r3, lr}
				K_KERNEL_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    601a:	f7fb fd49 	bl	1ab0 <log_init>
	}

	return 0;
}
    601e:	2000      	movs	r0, #0
    6020:	bd08      	pop	{r3, pc}

00006022 <out_func>:
{
    6022:	b500      	push	{lr}
    6024:	b083      	sub	sp, #12
    6026:	9001      	str	r0, [sp, #4]
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
    6028:	680b      	ldr	r3, [r1, #0]
    602a:	684a      	ldr	r2, [r1, #4]
    602c:	6852      	ldr	r2, [r2, #4]
    602e:	2101      	movs	r1, #1
    6030:	a801      	add	r0, sp, #4
    6032:	4798      	blx	r3
}
    6034:	2000      	movs	r0, #0
    6036:	b003      	add	sp, #12
    6038:	f85d fb04 	ldr.w	pc, [sp], #4

0000603c <buffer_write>:
{
    603c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    603e:	4607      	mov	r7, r0
    6040:	460d      	mov	r5, r1
    6042:	4614      	mov	r4, r2
    6044:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    6046:	4632      	mov	r2, r6
    6048:	4621      	mov	r1, r4
    604a:	4628      	mov	r0, r5
    604c:	47b8      	blx	r7
		buf += processed;
    604e:	4405      	add	r5, r0
	} while (len != 0);
    6050:	1a24      	subs	r4, r4, r0
    6052:	d1f8      	bne.n	6046 <buffer_write+0xa>
}
    6054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006056 <ends_with_newline>:
	char c = '\0';
    6056:	2200      	movs	r2, #0
	while (*fmt != '\0') {
    6058:	7803      	ldrb	r3, [r0, #0]
    605a:	b113      	cbz	r3, 6062 <ends_with_newline+0xc>
		fmt++;
    605c:	3001      	adds	r0, #1
		c = *fmt;
    605e:	461a      	mov	r2, r3
    6060:	e7fa      	b.n	6058 <ends_with_newline+0x2>
}
    6062:	2a0a      	cmp	r2, #10
    6064:	bf14      	ite	ne
    6066:	2000      	movne	r0, #0
    6068:	2001      	moveq	r0, #1
    606a:	4770      	bx	lr

0000606c <color_prefix>:
{
    606c:	b508      	push	{r3, lr}
	color_print(log_output, color, true, level);
    606e:	4613      	mov	r3, r2
    6070:	2201      	movs	r2, #1
    6072:	f7fb fdcd 	bl	1c10 <color_print>
}
    6076:	bd08      	pop	{r3, pc}

00006078 <color_postfix>:
{
    6078:	b508      	push	{r3, lr}
	color_print(log_output, color, false, level);
    607a:	4613      	mov	r3, r2
    607c:	2200      	movs	r2, #0
    607e:	f7fb fdc7 	bl	1c10 <color_print>
}
    6082:	bd08      	pop	{r3, pc}

00006084 <postfix_print>:
{
    6084:	b538      	push	{r3, r4, r5, lr}
    6086:	4605      	mov	r5, r0
    6088:	460c      	mov	r4, r1
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
    608a:	f001 0101 	and.w	r1, r1, #1
    608e:	f7ff fff3 	bl	6078 <color_postfix>
	newline_print(log_output, flags);
    6092:	4621      	mov	r1, r4
    6094:	4628      	mov	r0, r5
    6096:	f7fb fdd1 	bl	1c3c <newline_print>
}
    609a:	bd38      	pop	{r3, r4, r5, pc}

0000609c <prefix_print>:
{
    609c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    60a0:	b083      	sub	sp, #12
    60a2:	4604      	mov	r4, r0
    60a4:	4690      	mov	r8, r2
    60a6:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    60aa:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    60ae:	f3c1 07c0 	ubfx	r7, r1, #3, #1
	if (stamp) {
    60b2:	f011 0602 	ands.w	r6, r1, #2
    60b6:	d113      	bne.n	60e0 <prefix_print+0x44>
		color_prefix(log_output, colors_on, level);
    60b8:	462a      	mov	r2, r5
    60ba:	4649      	mov	r1, r9
    60bc:	4620      	mov	r0, r4
    60be:	f7ff ffd5 	bl	606c <color_prefix>
	length += ids_print(log_output, level_on, func_on,
    60c2:	9501      	str	r5, [sp, #4]
    60c4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    60c8:	9300      	str	r3, [sp, #0]
    60ca:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    60ce:	4642      	mov	r2, r8
    60d0:	4639      	mov	r1, r7
    60d2:	4620      	mov	r0, r4
    60d4:	f7fb fe24 	bl	1d20 <ids_print>
}
    60d8:	4430      	add	r0, r6
    60da:	b003      	add	sp, #12
    60dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		length += timestamp_print(log_output, flags, timestamp);
    60e0:	461a      	mov	r2, r3
    60e2:	f7fb fd4f 	bl	1b84 <timestamp_print>
    60e6:	4606      	mov	r6, r0
    60e8:	e7e6      	b.n	60b8 <prefix_print+0x1c>

000060ea <log_output_flush>:
{
    60ea:	b510      	push	{r4, lr}
    60ec:	4604      	mov	r4, r0
		     log_output->control_block->offset,
    60ee:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
    60f0:	6853      	ldr	r3, [r2, #4]
    60f2:	6812      	ldr	r2, [r2, #0]
    60f4:	6881      	ldr	r1, [r0, #8]
    60f6:	6800      	ldr	r0, [r0, #0]
    60f8:	f7ff ffa0 	bl	603c <buffer_write>
	log_output->control_block->offset = 0;
    60fc:	6863      	ldr	r3, [r4, #4]
    60fe:	2200      	movs	r2, #0
    6100:	601a      	str	r2, [r3, #0]
}
    6102:	bd10      	pop	{r4, pc}

00006104 <should_bail>:
	if (info->start_offset < data->area_off) {
    6104:	6800      	ldr	r0, [r0, #0]
    6106:	684b      	ldr	r3, [r1, #4]
    6108:	4298      	cmp	r0, r3
    610a:	d30b      	bcc.n	6124 <should_bail+0x20>
{
    610c:	b410      	push	{r4}
	} else if (info->start_offset >= data->area_off + data->area_len) {
    610e:	688c      	ldr	r4, [r1, #8]
    6110:	4423      	add	r3, r4
    6112:	4298      	cmp	r0, r3
    6114:	d209      	bcs.n	612a <should_bail+0x26>
	} else if (data->ret_idx >= data->ret_len) {
    6116:	6908      	ldr	r0, [r1, #16]
    6118:	694b      	ldr	r3, [r1, #20]
    611a:	4298      	cmp	r0, r3
    611c:	d209      	bcs.n	6132 <should_bail+0x2e>
	return false;
    611e:	2000      	movs	r0, #0
}
    6120:	bc10      	pop	{r4}
    6122:	4770      	bx	lr
		*bail_value = true;
    6124:	2001      	movs	r0, #1
    6126:	7010      	strb	r0, [r2, #0]
}
    6128:	4770      	bx	lr
		*bail_value = false;
    612a:	2300      	movs	r3, #0
    612c:	7013      	strb	r3, [r2, #0]
		return true;
    612e:	2001      	movs	r0, #1
    6130:	e7f6      	b.n	6120 <should_bail+0x1c>
		data->status = -ENOMEM;
    6132:	f06f 030b 	mvn.w	r3, #11
    6136:	618b      	str	r3, [r1, #24]
		*bail_value = false;
    6138:	2300      	movs	r3, #0
    613a:	7013      	strb	r3, [r2, #0]
		return true;
    613c:	2001      	movs	r0, #1
    613e:	e7ef      	b.n	6120 <should_bail+0x1c>

00006140 <get_sectors_cb>:
{
    6140:	b570      	push	{r4, r5, r6, lr}
    6142:	b082      	sub	sp, #8
    6144:	4606      	mov	r6, r0
    6146:	460c      	mov	r4, r1
	struct flash_sector *ret = data->ret;
    6148:	68cd      	ldr	r5, [r1, #12]
	if (should_bail(info, data, &bail)) {
    614a:	f10d 0207 	add.w	r2, sp, #7
    614e:	f7ff ffd9 	bl	6104 <should_bail>
    6152:	b980      	cbnz	r0, 6176 <get_sectors_cb+0x36>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    6154:	6833      	ldr	r3, [r6, #0]
    6156:	6861      	ldr	r1, [r4, #4]
    6158:	6922      	ldr	r2, [r4, #16]
    615a:	1a5b      	subs	r3, r3, r1
    615c:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    6160:	6923      	ldr	r3, [r4, #16]
    6162:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    6166:	6873      	ldr	r3, [r6, #4]
    6168:	606b      	str	r3, [r5, #4]
	data->ret_idx++;
    616a:	6923      	ldr	r3, [r4, #16]
    616c:	3301      	adds	r3, #1
    616e:	6123      	str	r3, [r4, #16]
	return true;
    6170:	2001      	movs	r0, #1
}
    6172:	b002      	add	sp, #8
    6174:	bd70      	pop	{r4, r5, r6, pc}
		return bail;
    6176:	f89d 0007 	ldrb.w	r0, [sp, #7]
    617a:	e7fa      	b.n	6172 <get_sectors_cb+0x32>

0000617c <flash_area_layout>:
{
    617c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    617e:	460d      	mov	r5, r1
    6180:	4616      	mov	r6, r2
    6182:	461f      	mov	r7, r3
    6184:	9c06      	ldr	r4, [sp, #24]
	cb_data->area_idx = idx;
    6186:	6020      	str	r0, [r4, #0]
	fa = get_flash_area_from_id(idx);
    6188:	f7fb fec0 	bl	1f0c <get_flash_area_from_id>
	if (fa == NULL) {
    618c:	b1b8      	cbz	r0, 61be <flash_area_layout+0x42>
	cb_data->area_off = fa->fa_off;
    618e:	6842      	ldr	r2, [r0, #4]
    6190:	6062      	str	r2, [r4, #4]
	cb_data->area_len = fa->fa_size;
    6192:	6882      	ldr	r2, [r0, #8]
    6194:	60a2      	str	r2, [r4, #8]
	cb_data->ret = ret;
    6196:	60e6      	str	r6, [r4, #12]
	cb_data->ret_idx = 0U;
    6198:	2200      	movs	r2, #0
    619a:	6122      	str	r2, [r4, #16]
	cb_data->ret_len = *cnt;
    619c:	6829      	ldr	r1, [r5, #0]
    619e:	6161      	str	r1, [r4, #20]
	cb_data->status = 0;
    61a0:	61a2      	str	r2, [r4, #24]
	flash_dev = device_get_binding(fa->fa_dev_name);
    61a2:	68c0      	ldr	r0, [r0, #12]
    61a4:	f7fe fab8 	bl	4718 <z_impl_device_get_binding>
	if (flash_dev == NULL) {
    61a8:	b160      	cbz	r0, 61c4 <flash_area_layout+0x48>
	flash_page_foreach(flash_dev, cb, cb_data);
    61aa:	4622      	mov	r2, r4
    61ac:	4639      	mov	r1, r7
    61ae:	f000 fba6 	bl	68fe <flash_page_foreach>
	if (cb_data->status == 0) {
    61b2:	69a3      	ldr	r3, [r4, #24]
    61b4:	b90b      	cbnz	r3, 61ba <flash_area_layout+0x3e>
		*cnt = cb_data->ret_idx;
    61b6:	6923      	ldr	r3, [r4, #16]
    61b8:	602b      	str	r3, [r5, #0]
	return cb_data->status;
    61ba:	69a0      	ldr	r0, [r4, #24]
}
    61bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
    61be:	f06f 0015 	mvn.w	r0, #21
    61c2:	e7fb      	b.n	61bc <flash_area_layout+0x40>
		return -ENODEV;
    61c4:	f06f 0012 	mvn.w	r0, #18
    61c8:	e7f8      	b.n	61bc <flash_area_layout+0x40>

000061ca <flash_area_close>:
}
    61ca:	4770      	bx	lr

000061cc <flash_area_read>:
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    61cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    61ce:	6884      	ldr	r4, [r0, #8]
    61d0:	428c      	cmp	r4, r1
    61d2:	d304      	bcc.n	61de <flash_area_read+0x12>
    61d4:	185d      	adds	r5, r3, r1
    61d6:	42ac      	cmp	r4, r5
    61d8:	d212      	bcs.n	6200 <flash_area_read+0x34>
    61da:	2400      	movs	r4, #0
    61dc:	e000      	b.n	61e0 <flash_area_read+0x14>
    61de:	2400      	movs	r4, #0
	const struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    61e0:	b184      	cbz	r4, 6204 <flash_area_read+0x38>
    61e2:	461e      	mov	r6, r3
    61e4:	4617      	mov	r7, r2
    61e6:	460d      	mov	r5, r1
    61e8:	4604      	mov	r4, r0
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
    61ea:	68c0      	ldr	r0, [r0, #12]
    61ec:	f7fe fa94 	bl	4718 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
    61f0:	6861      	ldr	r1, [r4, #4]
    61f2:	4429      	add	r1, r5

static inline int z_impl_flash_read(const struct device *dev, off_t offset,
				    void *data,
				    size_t len)
{
	const struct flash_driver_api *api =
    61f4:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    61f6:	681c      	ldr	r4, [r3, #0]
    61f8:	4633      	mov	r3, r6
    61fa:	463a      	mov	r2, r7
    61fc:	47a0      	blx	r4
}
    61fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    6200:	2401      	movs	r4, #1
    6202:	e7ed      	b.n	61e0 <flash_area_read+0x14>
		return -EINVAL;
    6204:	f06f 0015 	mvn.w	r0, #21
    6208:	e7f9      	b.n	61fe <flash_area_read+0x32>

0000620a <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    620a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    620e:	6884      	ldr	r4, [r0, #8]
    6210:	428c      	cmp	r4, r1
    6212:	d304      	bcc.n	621e <flash_area_write+0x14>
    6214:	185d      	adds	r5, r3, r1
    6216:	42ac      	cmp	r4, r5
    6218:	d222      	bcs.n	6260 <flash_area_write+0x56>
    621a:	2400      	movs	r4, #0
    621c:	e000      	b.n	6220 <flash_area_write+0x16>
    621e:	2400      	movs	r4, #0
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    6220:	b304      	cbz	r4, 6264 <flash_area_write+0x5a>
    6222:	461f      	mov	r7, r3
    6224:	4690      	mov	r8, r2
    6226:	460d      	mov	r5, r1
    6228:	4604      	mov	r4, r0
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    622a:	68c0      	ldr	r0, [r0, #12]
    622c:	f7fe fa74 	bl	4718 <z_impl_device_get_binding>
    6230:	4606      	mov	r6, r0
					 bool enable);

static inline int z_impl_flash_write_protection_set(const struct device *dev,
						    bool enable)
{
	const struct flash_driver_api *api =
    6232:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->write_protection(dev, enable);
    6234:	68db      	ldr	r3, [r3, #12]
    6236:	2100      	movs	r1, #0
    6238:	4798      	blx	r3

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
    623a:	4681      	mov	r9, r0
    623c:	b968      	cbnz	r0, 625a <flash_area_write+0x50>
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    623e:	6861      	ldr	r1, [r4, #4]
    6240:	4429      	add	r1, r5
	const struct flash_driver_api *api =
    6242:	68b3      	ldr	r3, [r6, #8]
	return api->write(dev, offset, data, len);
    6244:	685c      	ldr	r4, [r3, #4]
    6246:	463b      	mov	r3, r7
    6248:	4642      	mov	r2, r8
    624a:	4630      	mov	r0, r6
    624c:	47a0      	blx	r4
    624e:	4681      	mov	r9, r0
	const struct flash_driver_api *api =
    6250:	68b3      	ldr	r3, [r6, #8]
	return api->write_protection(dev, enable);
    6252:	68db      	ldr	r3, [r3, #12]
    6254:	2101      	movs	r1, #1
    6256:	4630      	mov	r0, r6
    6258:	4798      	blx	r3

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
    625a:	4648      	mov	r0, r9
    625c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    6260:	2401      	movs	r4, #1
    6262:	e7dd      	b.n	6220 <flash_area_write+0x16>
		return -EINVAL;
    6264:	f06f 0915 	mvn.w	r9, #21
    6268:	e7f7      	b.n	625a <flash_area_write+0x50>

0000626a <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    626a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    626e:	6883      	ldr	r3, [r0, #8]
    6270:	428b      	cmp	r3, r1
    6272:	d304      	bcc.n	627e <flash_area_erase+0x14>
    6274:	1854      	adds	r4, r2, r1
    6276:	42a3      	cmp	r3, r4
    6278:	d220      	bcs.n	62bc <flash_area_erase+0x52>
    627a:	2300      	movs	r3, #0
    627c:	e000      	b.n	6280 <flash_area_erase+0x16>
    627e:	2300      	movs	r3, #0
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    6280:	b1f3      	cbz	r3, 62c0 <flash_area_erase+0x56>
    6282:	4617      	mov	r7, r2
    6284:	460e      	mov	r6, r1
    6286:	4604      	mov	r4, r0
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    6288:	68c0      	ldr	r0, [r0, #12]
    628a:	f7fe fa45 	bl	4718 <z_impl_device_get_binding>
    628e:	4605      	mov	r5, r0
	const struct flash_driver_api *api =
    6290:	6883      	ldr	r3, [r0, #8]
	return api->write_protection(dev, enable);
    6292:	68db      	ldr	r3, [r3, #12]
    6294:	2100      	movs	r1, #0
    6296:	4798      	blx	r3

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
    6298:	4680      	mov	r8, r0
    629a:	b960      	cbnz	r0, 62b6 <flash_area_erase+0x4c>
		return rc;
	}

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    629c:	6861      	ldr	r1, [r4, #4]
    629e:	4431      	add	r1, r6
	const struct flash_driver_api *api =
    62a0:	68ab      	ldr	r3, [r5, #8]
	return api->erase(dev, offset, size);
    62a2:	689b      	ldr	r3, [r3, #8]
    62a4:	463a      	mov	r2, r7
    62a6:	4628      	mov	r0, r5
    62a8:	4798      	blx	r3
    62aa:	4680      	mov	r8, r0
	const struct flash_driver_api *api =
    62ac:	68ab      	ldr	r3, [r5, #8]
	return api->write_protection(dev, enable);
    62ae:	68db      	ldr	r3, [r3, #12]
    62b0:	2101      	movs	r1, #1
    62b2:	4628      	mov	r0, r5
    62b4:	4798      	blx	r3

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
    62b6:	4640      	mov	r0, r8
    62b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    62bc:	2301      	movs	r3, #1
    62be:	e7df      	b.n	6280 <flash_area_erase+0x16>
		return -EINVAL;
    62c0:	f06f 0815 	mvn.w	r8, #21
    62c4:	e7f7      	b.n	62b6 <flash_area_erase+0x4c>

000062c6 <flash_area_align>:

uint8_t flash_area_align(const struct flash_area *fa)
{
    62c6:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
    62c8:	68c0      	ldr	r0, [r0, #12]
    62ca:	f7fe fa25 	bl	4718 <z_impl_device_get_binding>
 */
__syscall size_t flash_get_write_block_size(const struct device *dev);

static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
    62ce:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    62d0:	691b      	ldr	r3, [r3, #16]
    62d2:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
    62d4:	7800      	ldrb	r0, [r0, #0]
    62d6:	bd08      	pop	{r3, pc}

000062d8 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    62d8:	68c0      	ldr	r0, [r0, #12]
	return &data->subsys[type];
    62da:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    62de:	008b      	lsls	r3, r1, #2
    62e0:	3338      	adds	r3, #56	; 0x38
}
    62e2:	4418      	add	r0, r3
    62e4:	4770      	bx	lr

000062e6 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    62e6:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    62e8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    62ec:	008b      	lsls	r3, r1, #2
}
    62ee:	4418      	add	r0, r3
    62f0:	4770      	bx	lr

000062f2 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    62f2:	68c0      	ldr	r0, [r0, #12]
	return &data->mgr[type];
    62f4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    62f8:	008b      	lsls	r3, r1, #2
}
    62fa:	4418      	add	r0, r3
    62fc:	4770      	bx	lr

000062fe <get_status>:
{
    62fe:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    6300:	b2c9      	uxtb	r1, r1
    6302:	f7ff ffe9 	bl	62d8 <get_sub_data>
    6306:	6880      	ldr	r0, [r0, #8]
}
    6308:	f000 0007 	and.w	r0, r0, #7
    630c:	bd08      	pop	{r3, pc}

0000630e <set_off_state>:
	__asm__ volatile(
    630e:	f04f 0320 	mov.w	r3, #32
    6312:	f3ef 8211 	mrs	r2, BASEPRI
    6316:	f383 8811 	msr	BASEPRI, r3
    631a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    631e:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    6320:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    6324:	d001      	beq.n	632a <set_off_state+0x1c>
    6326:	428b      	cmp	r3, r1
    6328:	d107      	bne.n	633a <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    632a:	2301      	movs	r3, #1
    632c:	6003      	str	r3, [r0, #0]
	int err = 0;
    632e:	2000      	movs	r0, #0
	__asm__ volatile(
    6330:	f382 8811 	msr	BASEPRI, r2
    6334:	f3bf 8f6f 	isb	sy
}
    6338:	4770      	bx	lr
		err = -EPERM;
    633a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    633e:	e7f7      	b.n	6330 <set_off_state+0x22>

00006340 <set_starting_state>:
{
    6340:	b410      	push	{r4}
	__asm__ volatile(
    6342:	f04f 0320 	mov.w	r3, #32
    6346:	f3ef 8211 	mrs	r2, BASEPRI
    634a:	f383 8811 	msr	BASEPRI, r3
    634e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6352:	6803      	ldr	r3, [r0, #0]
    6354:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    6358:	f003 0307 	and.w	r3, r3, #7
    635c:	2b01      	cmp	r3, #1
    635e:	d009      	beq.n	6374 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
    6360:	428c      	cmp	r4, r1
    6362:	d00a      	beq.n	637a <set_starting_state+0x3a>
		err = -EPERM;
    6364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    6368:	f382 8811 	msr	BASEPRI, r2
    636c:	f3bf 8f6f 	isb	sy
}
    6370:	bc10      	pop	{r4}
    6372:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    6374:	6001      	str	r1, [r0, #0]
	int err = 0;
    6376:	2000      	movs	r0, #0
    6378:	e7f6      	b.n	6368 <set_starting_state+0x28>
		err = -EBUSY;
    637a:	f06f 000f 	mvn.w	r0, #15
    637e:	e7f3      	b.n	6368 <set_starting_state+0x28>

00006380 <set_on_state>:
	__asm__ volatile(
    6380:	f04f 0320 	mov.w	r3, #32
    6384:	f3ef 8211 	mrs	r2, BASEPRI
    6388:	f383 8811 	msr	BASEPRI, r3
    638c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    6390:	6803      	ldr	r3, [r0, #0]
    6392:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6396:	f043 0302 	orr.w	r3, r3, #2
    639a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    639c:	f382 8811 	msr	BASEPRI, r2
    63a0:	f3bf 8f6f 	isb	sy
}
    63a4:	4770      	bx	lr

000063a6 <clkstarted_handle>:
{
    63a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63a8:	4605      	mov	r5, r0
    63aa:	460e      	mov	r6, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    63ac:	f7ff ff94 	bl	62d8 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    63b0:	6804      	ldr	r4, [r0, #0]
	void *user_data = sub_data->user_data;
    63b2:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    63b4:	2300      	movs	r3, #0
    63b6:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    63ba:	f7ff ffe1 	bl	6380 <set_on_state>
	if (callback) {
    63be:	b11c      	cbz	r4, 63c8 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    63c0:	463a      	mov	r2, r7
    63c2:	4631      	mov	r1, r6
    63c4:	4628      	mov	r0, r5
    63c6:	47a0      	blx	r4
}
    63c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000063ca <stop>:
{
    63ca:	b570      	push	{r4, r5, r6, lr}
    63cc:	4606      	mov	r6, r0
    63ce:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    63d0:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    63d2:	4621      	mov	r1, r4
    63d4:	f7ff ff80 	bl	62d8 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    63d8:	4629      	mov	r1, r5
    63da:	3008      	adds	r0, #8
    63dc:	f7ff ff97 	bl	630e <set_off_state>
	if (err < 0) {
    63e0:	2800      	cmp	r0, #0
    63e2:	db06      	blt.n	63f2 <stop+0x28>
	get_sub_config(dev, type)->stop();
    63e4:	4621      	mov	r1, r4
    63e6:	4630      	mov	r0, r6
    63e8:	f7ff ff7d 	bl	62e6 <get_sub_config>
    63ec:	6843      	ldr	r3, [r0, #4]
    63ee:	4798      	blx	r3
	return 0;
    63f0:	2000      	movs	r0, #0
}
    63f2:	bd70      	pop	{r4, r5, r6, pc}

000063f4 <api_stop>:
{
    63f4:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    63f6:	2280      	movs	r2, #128	; 0x80
    63f8:	f7ff ffe7 	bl	63ca <stop>
}
    63fc:	bd08      	pop	{r3, pc}

000063fe <async_start>:
{
    63fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6402:	4680      	mov	r8, r0
    6404:	4616      	mov	r6, r2
    6406:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    6408:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    640a:	4629      	mov	r1, r5
    640c:	f7ff ff64 	bl	62d8 <get_sub_data>
    6410:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    6412:	4639      	mov	r1, r7
    6414:	3008      	adds	r0, #8
    6416:	f7ff ff93 	bl	6340 <set_starting_state>
	if (err < 0) {
    641a:	2800      	cmp	r0, #0
    641c:	db0a      	blt.n	6434 <async_start+0x36>
	subdata->cb = data->cb;
    641e:	6873      	ldr	r3, [r6, #4]
    6420:	6023      	str	r3, [r4, #0]
	subdata->user_data = data->user_data;
    6422:	68b3      	ldr	r3, [r6, #8]
    6424:	6063      	str	r3, [r4, #4]
	 get_sub_config(dev, type)->start();
    6426:	4629      	mov	r1, r5
    6428:	4640      	mov	r0, r8
    642a:	f7ff ff5c 	bl	62e6 <get_sub_config>
    642e:	6803      	ldr	r3, [r0, #0]
    6430:	4798      	blx	r3
	return 0;
    6432:	2000      	movs	r0, #0
}
    6434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006438 <api_start>:
{
    6438:	b508      	push	{r3, lr}
	return async_start(dev, subsys, data, CTX_API);
    643a:	2380      	movs	r3, #128	; 0x80
    643c:	f7ff ffdf 	bl	63fe <async_start>
}
    6440:	bd08      	pop	{r3, pc}

00006442 <api_blocking_start>:
}
    6442:	f06f 0022 	mvn.w	r0, #34	; 0x22
    6446:	4770      	bx	lr

00006448 <onoff_started_callback>:
{
    6448:	b510      	push	{r4, lr}
    644a:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    644c:	b2c9      	uxtb	r1, r1
    644e:	f7ff ff50 	bl	62f2 <get_onoff_manager>
	notify(mgr, 0);
    6452:	2100      	movs	r1, #0
    6454:	47a0      	blx	r4
}
    6456:	bd10      	pop	{r4, pc}

00006458 <lfclk_stop>:
{
    6458:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_lfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    645a:	2000      	movs	r0, #0
    645c:	f7fd f93a 	bl	36d4 <nrfx_clock_stop>
}
    6460:	bd08      	pop	{r3, pc}

00006462 <hfclk_stop>:
{
    6462:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    6464:	2001      	movs	r0, #1
    6466:	f7fd f935 	bl	36d4 <nrfx_clock_stop>
}
    646a:	bd08      	pop	{r3, pc}

0000646c <lfclk_start>:
{
    646c:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    646e:	2000      	movs	r0, #0
    6470:	f7fd f8f8 	bl	3664 <nrfx_clock_start>
}
    6474:	bd08      	pop	{r3, pc}

00006476 <hfclk_start>:
{
    6476:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    6478:	2001      	movs	r0, #1
    647a:	f7fd f8f3 	bl	3664 <nrfx_clock_start>
}
    647e:	bd08      	pop	{r3, pc}

00006480 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    6480:	4770      	bx	lr

00006482 <sys_clock_disable>:
{
}

void __weak sys_clock_disable(void)
{
}
    6482:	4770      	bx	lr

00006484 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    6484:	1a40      	subs	r0, r0, r1
}
    6486:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    648a:	4770      	bx	lr

0000648c <handle_next_cycle_case>:
{
    648c:	b510      	push	{r4, lr}
    648e:	4604      	mov	r4, r0
	set_comparator(t + 2);
    6490:	3002      	adds	r0, #2
    6492:	f7fb ff13 	bl	22bc <set_comparator>
	while (t != counter()) {
    6496:	f7fb ff3f 	bl	2318 <counter>
    649a:	42a0      	cmp	r0, r4
    649c:	d006      	beq.n	64ac <handle_next_cycle_case+0x20>
		t = counter();
    649e:	f7fb ff3b 	bl	2318 <counter>
    64a2:	4604      	mov	r4, r0
		set_comparator(t + 2);
    64a4:	3002      	adds	r0, #2
    64a6:	f7fb ff09 	bl	22bc <set_comparator>
    64aa:	e7f4      	b.n	6496 <handle_next_cycle_case+0xa>
}
    64ac:	bd10      	pop	{r4, pc}

000064ae <set_absolute_alarm>:
{
    64ae:	b538      	push	{r3, r4, r5, lr}
    64b0:	4604      	mov	r4, r0
	uint32_t t = counter();
    64b2:	f7fb ff31 	bl	2318 <counter>
    64b6:	4605      	mov	r5, r0
	diff = counter_sub(abs_val, t);
    64b8:	4601      	mov	r1, r0
    64ba:	4620      	mov	r0, r4
    64bc:	f7ff ffe2 	bl	6484 <counter_sub>
	if (diff == 1) {
    64c0:	2801      	cmp	r0, #1
    64c2:	d00d      	beq.n	64e0 <set_absolute_alarm+0x32>
	set_comparator(abs_val);
    64c4:	4620      	mov	r0, r4
    64c6:	f7fb fef9 	bl	22bc <set_comparator>
	t = counter();
    64ca:	f7fb ff25 	bl	2318 <counter>
    64ce:	4605      	mov	r5, r0
	diff = counter_sub(abs_val - 2, t);
    64d0:	4601      	mov	r1, r0
    64d2:	1ea0      	subs	r0, r4, #2
    64d4:	f7ff ffd6 	bl	6484 <counter_sub>
	if (diff > MAX_CYCLES) {
    64d8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    64dc:	d204      	bcs.n	64e8 <set_absolute_alarm+0x3a>
}
    64de:	bd38      	pop	{r3, r4, r5, pc}
		handle_next_cycle_case(t);
    64e0:	4628      	mov	r0, r5
    64e2:	f7ff ffd3 	bl	648c <handle_next_cycle_case>
		return;
    64e6:	e7fa      	b.n	64de <set_absolute_alarm+0x30>
		handle_next_cycle_case(t);
    64e8:	4628      	mov	r0, r5
    64ea:	f7ff ffcf 	bl	648c <handle_next_cycle_case>
    64ee:	e7f6      	b.n	64de <set_absolute_alarm+0x30>

000064f0 <set_protected_absolute_alarm>:
{
    64f0:	b510      	push	{r4, lr}
    64f2:	4604      	mov	r4, r0
	int_disable();
    64f4:	f7fb ff00 	bl	22f8 <int_disable>
	prevent_false_prev_evt();
    64f8:	f7fb ff26 	bl	2348 <prevent_false_prev_evt>
	set_absolute_alarm(cycles);
    64fc:	4620      	mov	r0, r4
    64fe:	f7ff ffd6 	bl	64ae <set_absolute_alarm>
	int_enable();
    6502:	f7fb ff01 	bl	2308 <int_enable>
}
    6506:	bd10      	pop	{r4, pc}

00006508 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
    6508:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    650a:	2100      	movs	r1, #0
    650c:	2001      	movs	r0, #1
    650e:	f000 f805 	bl	651c <z_arm_fatal_error>
}
    6512:	bd08      	pop	{r3, pc}

00006514 <z_arm_prepare_switch_to_main>:
{
    6514:	b508      	push	{r3, lr}
	z_arm_configure_static_mpu_regions();
    6516:	f7fc f9e9 	bl	28ec <z_arm_configure_static_mpu_regions>
}
    651a:	bd08      	pop	{r3, pc}

0000651c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    651c:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    651e:	f002 f875 	bl	860c <z_fatal_error>
}
    6522:	bd08      	pop	{r3, pc}

00006524 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    6524:	b508      	push	{r3, lr}
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    6526:	4601      	mov	r1, r0
    6528:	6800      	ldr	r0, [r0, #0]
    652a:	f7ff fff7 	bl	651c <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    652e:	bd08      	pop	{r3, pc}

00006530 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    6530:	b508      	push	{r3, lr}
	handler();
    6532:	f7fc f855 	bl	25e0 <z_SysNmiOnReset>
	z_arm_int_exit();
    6536:	f7fc f991 	bl	285c <z_arm_exc_exit>
}
    653a:	bd08      	pop	{r3, pc}

0000653c <memory_fault_recoverable>:
}
    653c:	2000      	movs	r0, #0
    653e:	4770      	bx	lr

00006540 <fault_handle>:
{
    6540:	b508      	push	{r3, lr}
	*recoverable = false;
    6542:	2300      	movs	r3, #0
    6544:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    6546:	3903      	subs	r1, #3
    6548:	2903      	cmp	r1, #3
    654a:	d812      	bhi.n	6572 <fault_handle+0x32>
    654c:	e8df f001 	tbb	[pc, r1]
    6550:	0e0a0602 	.word	0x0e0a0602
		reason = hard_fault(esf, recoverable);
    6554:	4611      	mov	r1, r2
    6556:	f7fc f8ff 	bl	2758 <hard_fault>
}
    655a:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    655c:	2100      	movs	r1, #0
    655e:	f7fc f89b 	bl	2698 <mem_manage_fault>
		break;
    6562:	e7fa      	b.n	655a <fault_handle+0x1a>
		reason = bus_fault(esf, 0, recoverable);
    6564:	2100      	movs	r1, #0
    6566:	f7fc f8bb 	bl	26e0 <bus_fault>
		break;
    656a:	e7f6      	b.n	655a <fault_handle+0x1a>
		reason = usage_fault(esf);
    656c:	f7fc f8e2 	bl	2734 <usage_fault>
		break;
    6570:	e7f3      	b.n	655a <fault_handle+0x1a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6572:	2000      	movs	r0, #0
	return reason;
    6574:	e7f1      	b.n	655a <fault_handle+0x1a>

00006576 <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
    6576:	6843      	ldr	r3, [r0, #4]
		&&
    6578:	2b1f      	cmp	r3, #31
    657a:	d90a      	bls.n	6592 <mpu_partition_is_valid+0x1c>
		&&
    657c:	f013 0f1f 	tst.w	r3, #31
    6580:	d001      	beq.n	6586 <mpu_partition_is_valid+0x10>
		&&
    6582:	2000      	movs	r0, #0
    6584:	4770      	bx	lr
		((part->start &
    6586:	6803      	ldr	r3, [r0, #0]
		&&
    6588:	f013 0f1f 	tst.w	r3, #31
    658c:	d003      	beq.n	6596 <mpu_partition_is_valid+0x20>
    658e:	2000      	movs	r0, #0
    6590:	4770      	bx	lr
    6592:	2000      	movs	r0, #0
    6594:	4770      	bx	lr
    6596:	2001      	movs	r0, #1
}
    6598:	4770      	bx	lr

0000659a <mpu_configure_region>:
{
    659a:	b530      	push	{r4, r5, lr}
    659c:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    659e:	680b      	ldr	r3, [r1, #0]
    65a0:	9300      	str	r3, [sp, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    65a2:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    65a4:	890d      	ldrh	r5, [r1, #8]
    65a6:	f89d 2008 	ldrb.w	r2, [sp, #8]
    65aa:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
    65ae:	7a89      	ldrb	r1, [r1, #10]
    65b0:	f361 1247 	bfi	r2, r1, #5, #3
    65b4:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    65b8:	f023 031f 	bic.w	r3, r3, #31
    65bc:	4423      	add	r3, r4
    65be:	3b01      	subs	r3, #1
    65c0:	f023 031f 	bic.w	r3, r3, #31
    65c4:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    65c6:	4669      	mov	r1, sp
    65c8:	f7fc f9ce 	bl	2968 <region_allocate_and_init>
}
    65cc:	b005      	add	sp, #20
    65ce:	bd30      	pop	{r4, r5, pc}

000065d0 <arm_core_mpu_configure_static_mpu_regions>:
{
    65d0:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    65d2:	f7fc fadd 	bl	2b90 <mpu_configure_static_mpu_regions>
}
    65d6:	bd08      	pop	{r3, pc}

000065d8 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    65d8:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    65dc:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    65e0:	d001      	beq.n	65e6 <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
    65e2:	b2c0      	uxtb	r0, r0
    65e4:	4770      	bx	lr
	}

	return -EINVAL;
    65e6:	f06f 0015 	mvn.w	r0, #21
}
    65ea:	4770      	bx	lr

000065ec <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    65ec:	7803      	ldrb	r3, [r0, #0]
    65ee:	780a      	ldrb	r2, [r1, #0]
    65f0:	4293      	cmp	r3, r2
    65f2:	d103      	bne.n	65fc <strcmp+0x10>
    65f4:	b113      	cbz	r3, 65fc <strcmp+0x10>
		s1++;
    65f6:	3001      	adds	r0, #1
		s2++;
    65f8:	3101      	adds	r1, #1
    65fa:	e7f7      	b.n	65ec <strcmp>
	}

	return *s1 - *s2;
}
    65fc:	1a98      	subs	r0, r3, r2
    65fe:	4770      	bx	lr

00006600 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    6600:	b17a      	cbz	r2, 6622 <memcmp+0x22>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    6602:	1e53      	subs	r3, r2, #1
    6604:	d00f      	beq.n	6626 <memcmp+0x26>
{
    6606:	b410      	push	{r4}
	while ((--n > 0) && (*c1 == *c2)) {
    6608:	7804      	ldrb	r4, [r0, #0]
    660a:	780a      	ldrb	r2, [r1, #0]
    660c:	4294      	cmp	r4, r2
    660e:	d103      	bne.n	6618 <memcmp+0x18>
		c1++;
    6610:	3001      	adds	r0, #1
		c2++;
    6612:	3101      	adds	r1, #1
	while ((--n > 0) && (*c1 == *c2)) {
    6614:	3b01      	subs	r3, #1
    6616:	d1f7      	bne.n	6608 <memcmp+0x8>
	}

	return *c1 - *c2;
    6618:	7800      	ldrb	r0, [r0, #0]
    661a:	780b      	ldrb	r3, [r1, #0]
    661c:	1ac0      	subs	r0, r0, r3
}
    661e:	bc10      	pop	{r4}
    6620:	4770      	bx	lr
		return 0;
    6622:	2000      	movs	r0, #0
    6624:	4770      	bx	lr
	return *c1 - *c2;
    6626:	7800      	ldrb	r0, [r0, #0]
    6628:	780b      	ldrb	r3, [r1, #0]
    662a:	1ac0      	subs	r0, r0, r3
}
    662c:	4770      	bx	lr

0000662e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    662e:	b410      	push	{r4}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    6630:	ea80 0301 	eor.w	r3, r0, r1
    6634:	f013 0f03 	tst.w	r3, #3
    6638:	d007      	beq.n	664a <memcpy+0x1c>
	unsigned char *d_byte = (unsigned char *)d;
    663a:	4603      	mov	r3, r0
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    663c:	b1c2      	cbz	r2, 6670 <memcpy+0x42>
		*(d_byte++) = *(s_byte++);
    663e:	f811 4b01 	ldrb.w	r4, [r1], #1
    6642:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    6646:	3a01      	subs	r2, #1
    6648:	e7f8      	b.n	663c <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    664a:	4603      	mov	r3, r0
		while (((uintptr_t)d_byte) & mask) {
    664c:	f013 0f03 	tst.w	r3, #3
    6650:	d00b      	beq.n	666a <memcpy+0x3c>
			if (n == 0) {
    6652:	b16a      	cbz	r2, 6670 <memcpy+0x42>
			*(d_byte++) = *(s_byte++);
    6654:	f811 4b01 	ldrb.w	r4, [r1], #1
    6658:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    665c:	3a01      	subs	r2, #1
    665e:	e7f5      	b.n	664c <memcpy+0x1e>
			*(d_word++) = *(s_word++);
    6660:	f851 4b04 	ldr.w	r4, [r1], #4
    6664:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    6668:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    666a:	2a03      	cmp	r2, #3
    666c:	d8f8      	bhi.n	6660 <memcpy+0x32>
    666e:	e7e5      	b.n	663c <memcpy+0xe>
	}

	return d;
}
    6670:	bc10      	pop	{r4}
    6672:	4770      	bx	lr

00006674 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    6674:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    6676:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
    6678:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    667a:	f013 0f03 	tst.w	r3, #3
    667e:	d004      	beq.n	668a <memset+0x16>
		if (n == 0) {
    6680:	b1a2      	cbz	r2, 66ac <memset+0x38>
			return buf;
		}
		*(d_byte++) = c_byte;
    6682:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    6686:	3a01      	subs	r2, #1
    6688:	e7f7      	b.n	667a <memset+0x6>
	};

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    668a:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    668c:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    6690:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    6694:	e002      	b.n	669c <memset+0x28>
		*(d_word++) = c_word;
    6696:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    669a:	3a04      	subs	r2, #4
	while (n >= sizeof(mem_word_t)) {
    669c:	2a03      	cmp	r2, #3
    669e:	d8fa      	bhi.n	6696 <memset+0x22>
    66a0:	e002      	b.n	66a8 <memset+0x34>
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
		*(d_byte++) = c_byte;
    66a2:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    66a6:	3a01      	subs	r2, #1
	while (n > 0) {
    66a8:	2a00      	cmp	r2, #0
    66aa:	d1fa      	bne.n	66a2 <memset+0x2e>
	}

	return buf;
}
    66ac:	bc10      	pop	{r4}
    66ae:	4770      	bx	lr

000066b0 <_stdout_hook_default>:
}
    66b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    66b4:	4770      	bx	lr

000066b6 <gpio_nrfx_port_get_raw>:
	return port->config;
    66b6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    66b8:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    66ba:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    66bc:	600b      	str	r3, [r1, #0]
}
    66be:	2000      	movs	r0, #0
    66c0:	4770      	bx	lr

000066c2 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    66c2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    66c4:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    66c6:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    66c8:	4042      	eors	r2, r0
    66ca:	400a      	ands	r2, r1
    66cc:	4042      	eors	r2, r0
    p_reg->OUT = value;
    66ce:	605a      	str	r2, [r3, #4]
}
    66d0:	2000      	movs	r0, #0
    66d2:	4770      	bx	lr

000066d4 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    66d4:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    66d6:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    66d8:	6099      	str	r1, [r3, #8]
}
    66da:	2000      	movs	r0, #0
    66dc:	4770      	bx	lr

000066de <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    66de:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    66e0:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    66e2:	60d9      	str	r1, [r3, #12]
}
    66e4:	2000      	movs	r0, #0
    66e6:	4770      	bx	lr

000066e8 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    66e8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    66ea:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    66ec:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    66ee:	4059      	eors	r1, r3
    p_reg->OUT = value;
    66f0:	6051      	str	r1, [r2, #4]
}
    66f2:	2000      	movs	r0, #0
    66f4:	4770      	bx	lr

000066f6 <gpio_nrfx_manage_callback>:
{
    66f6:	b470      	push	{r4, r5, r6}
	return port->data;
    66f8:	68c0      	ldr	r0, [r0, #12]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    66fa:	1d05      	adds	r5, r0, #4
	return list->head;
    66fc:	6843      	ldr	r3, [r0, #4]
	if (!sys_slist_is_empty(callbacks)) {
    66fe:	b1d3      	cbz	r3, 6736 <gpio_nrfx_manage_callback+0x40>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    6700:	460e      	mov	r6, r1
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6702:	2400      	movs	r4, #0
    6704:	b1b3      	cbz	r3, 6734 <gpio_nrfx_manage_callback+0x3e>
    6706:	429e      	cmp	r6, r3
    6708:	d002      	beq.n	6710 <gpio_nrfx_manage_callback+0x1a>
    670a:	461c      	mov	r4, r3
    670c:	681b      	ldr	r3, [r3, #0]
    670e:	e7f9      	b.n	6704 <gpio_nrfx_manage_callback+0xe>
Z_GENLIST_REMOVE(slist, snode)
    6710:	b13c      	cbz	r4, 6722 <gpio_nrfx_manage_callback+0x2c>
	return node->next;
    6712:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    6714:	6023      	str	r3, [r4, #0]
	return list->tail;
    6716:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    6718:	4299      	cmp	r1, r3
    671a:	d009      	beq.n	6730 <gpio_nrfx_manage_callback+0x3a>
	parent->next = child;
    671c:	2300      	movs	r3, #0
    671e:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6720:	e009      	b.n	6736 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    6722:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    6724:	6043      	str	r3, [r0, #4]
	return list->tail;
    6726:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    6728:	42a1      	cmp	r1, r4
    672a:	d1f7      	bne.n	671c <gpio_nrfx_manage_callback+0x26>
	list->tail = node;
    672c:	606b      	str	r3, [r5, #4]
    672e:	e7f5      	b.n	671c <gpio_nrfx_manage_callback+0x26>
    6730:	606c      	str	r4, [r5, #4]
    6732:	e7f3      	b.n	671c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    6734:	b152      	cbz	r2, 674c <gpio_nrfx_manage_callback+0x56>
	if (set) {
    6736:	b162      	cbz	r2, 6752 <gpio_nrfx_manage_callback+0x5c>
	return list->head;
    6738:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
    673a:	600b      	str	r3, [r1, #0]
	list->head = node;
    673c:	6041      	str	r1, [r0, #4]
	return list->tail;
    673e:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    6740:	b10b      	cbz	r3, 6746 <gpio_nrfx_manage_callback+0x50>
	return 0;
    6742:	2000      	movs	r0, #0
    6744:	e006      	b.n	6754 <gpio_nrfx_manage_callback+0x5e>
	list->tail = node;
    6746:	6069      	str	r1, [r5, #4]
    6748:	2000      	movs	r0, #0
    674a:	e003      	b.n	6754 <gpio_nrfx_manage_callback+0x5e>
				return -EINVAL;
    674c:	f06f 0015 	mvn.w	r0, #21
    6750:	e000      	b.n	6754 <gpio_nrfx_manage_callback+0x5e>
	return 0;
    6752:	2000      	movs	r0, #0
}
    6754:	bc70      	pop	{r4, r5, r6}
    6756:	4770      	bx	lr

00006758 <flash_nrf_write_protection>:
}
    6758:	2000      	movs	r0, #0
    675a:	4770      	bx	lr

0000675c <shift_write_context>:
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
}

static void shift_write_context(uint32_t shift, struct flash_context *w_ctx)
{
	w_ctx->flash_addr += shift;
    675c:	684b      	ldr	r3, [r1, #4]
    675e:	4403      	add	r3, r0
    6760:	604b      	str	r3, [r1, #4]
	w_ctx->data_addr += shift;
    6762:	680b      	ldr	r3, [r1, #0]
    6764:	4403      	add	r3, r0
    6766:	600b      	str	r3, [r1, #0]
	w_ctx->len -= shift;
    6768:	688b      	ldr	r3, [r1, #8]
    676a:	1a1b      	subs	r3, r3, r0
    676c:	608b      	str	r3, [r1, #8]
}
    676e:	4770      	bx	lr

00006770 <erase_op>:
{
    6770:	b538      	push	{r3, r4, r5, lr}
    6772:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    6774:	f000 faad 	bl	6cd2 <nrfx_nvmc_flash_page_size_get>
    6778:	4605      	mov	r5, r0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    677a:	6860      	ldr	r0, [r4, #4]
    677c:	f7fd f88a 	bl	3894 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
    6780:	68a3      	ldr	r3, [r4, #8]
    6782:	1b5b      	subs	r3, r3, r5
    6784:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
    6786:	6862      	ldr	r2, [r4, #4]
    6788:	442a      	add	r2, r5
    678a:	6062      	str	r2, [r4, #4]
	} while (e_ctx->len > 0);
    678c:	2b00      	cmp	r3, #0
    678e:	d1f4      	bne.n	677a <erase_op+0xa>
}
    6790:	2000      	movs	r0, #0
    6792:	bd38      	pop	{r3, r4, r5, pc}

00006794 <erase>:

	return FLASH_OP_DONE;
}

static int erase(uint32_t addr, uint32_t size)
{
    6794:	b500      	push	{lr}
    6796:	b085      	sub	sp, #20
	struct flash_context context = {
    6798:	2300      	movs	r3, #0
    679a:	9301      	str	r3, [sp, #4]
    679c:	9002      	str	r0, [sp, #8]
    679e:	9103      	str	r1, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
    67a0:	a801      	add	r0, sp, #4
    67a2:	f7ff ffe5 	bl	6770 <erase_op>
}
    67a6:	b005      	add	sp, #20
    67a8:	f85d fb04 	ldr.w	pc, [sp], #4

000067ac <flash_nrf_erase>:
{
    67ac:	b570      	push	{r4, r5, r6, lr}
    67ae:	460c      	mov	r4, r1
    67b0:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    67b2:	f000 fa8e 	bl	6cd2 <nrfx_nvmc_flash_page_size_get>
    67b6:	4606      	mov	r6, r0
	size_t flash_size = nrfx_nvmc_flash_size_get();
    67b8:	f000 fa87 	bl	6cca <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    67bc:	42a0      	cmp	r0, r4
    67be:	d919      	bls.n	67f4 <flash_nrf_erase+0x48>
    67c0:	2c00      	cmp	r4, #0
    67c2:	db1a      	blt.n	67fa <flash_nrf_erase+0x4e>
	    addr < 0 ||
    67c4:	4285      	cmp	r5, r0
    67c6:	d81b      	bhi.n	6800 <flash_nrf_erase+0x54>
	    (addr) + len > flash_size) {
    67c8:	192b      	adds	r3, r5, r4
	    len > flash_size ||
    67ca:	4298      	cmp	r0, r3
    67cc:	d31b      	bcc.n	6806 <flash_nrf_erase+0x5a>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    67ce:	fbb4 f3f6 	udiv	r3, r4, r6
    67d2:	fb06 4313 	mls	r3, r6, r3, r4
    67d6:	b9cb      	cbnz	r3, 680c <flash_nrf_erase+0x60>
    67d8:	fbb5 f3f6 	udiv	r3, r5, r6
    67dc:	fb06 5313 	mls	r3, r6, r3, r5
    67e0:	b9bb      	cbnz	r3, 6812 <flash_nrf_erase+0x66>
		if (!n_pages) {
    67e2:	42ae      	cmp	r6, r5
    67e4:	d901      	bls.n	67ea <flash_nrf_erase+0x3e>
			return 0;
    67e6:	2000      	movs	r0, #0
    67e8:	e006      	b.n	67f8 <flash_nrf_erase+0x4c>
		ret = erase(addr, size);
    67ea:	4629      	mov	r1, r5
    67ec:	4620      	mov	r0, r4
    67ee:	f7ff ffd1 	bl	6794 <erase>
	return ret;
    67f2:	e001      	b.n	67f8 <flash_nrf_erase+0x4c>
		return -EINVAL;
    67f4:	f06f 0015 	mvn.w	r0, #21
}
    67f8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    67fa:	f06f 0015 	mvn.w	r0, #21
    67fe:	e7fb      	b.n	67f8 <flash_nrf_erase+0x4c>
    6800:	f06f 0015 	mvn.w	r0, #21
    6804:	e7f8      	b.n	67f8 <flash_nrf_erase+0x4c>
    6806:	f06f 0015 	mvn.w	r0, #21
    680a:	e7f5      	b.n	67f8 <flash_nrf_erase+0x4c>
			return -EINVAL;
    680c:	f06f 0015 	mvn.w	r0, #21
    6810:	e7f2      	b.n	67f8 <flash_nrf_erase+0x4c>
    6812:	f06f 0015 	mvn.w	r0, #21
    6816:	e7ef      	b.n	67f8 <flash_nrf_erase+0x4c>

00006818 <write_op>:
{
    6818:	b510      	push	{r4, lr}
    681a:	4604      	mov	r4, r0
	while (w_ctx->len >= sizeof(uint32_t)) {
    681c:	68a3      	ldr	r3, [r4, #8]
    681e:	2b03      	cmp	r3, #3
    6820:	d909      	bls.n	6836 <write_op+0x1e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
    6822:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    6824:	6819      	ldr	r1, [r3, #0]
    6826:	6860      	ldr	r0, [r4, #4]
    6828:	f000 fa43 	bl	6cb2 <nrfx_nvmc_word_write>
		shift_write_context(sizeof(uint32_t), w_ctx);
    682c:	4621      	mov	r1, r4
    682e:	2004      	movs	r0, #4
    6830:	f7ff ff94 	bl	675c <shift_write_context>
    6834:	e7f2      	b.n	681c <write_op+0x4>
	nvmc_wait_ready();
    6836:	f7fc fc5d 	bl	30f4 <nvmc_wait_ready>
}
    683a:	2000      	movs	r0, #0
    683c:	bd10      	pop	{r4, pc}

0000683e <write>:

static int write(off_t addr, const void *data, size_t len)
{
    683e:	b500      	push	{lr}
    6840:	b085      	sub	sp, #20
	struct flash_context context = {
    6842:	9101      	str	r1, [sp, #4]
    6844:	9002      	str	r0, [sp, #8]
    6846:	9203      	str	r2, [sp, #12]
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
    6848:	a801      	add	r0, sp, #4
    684a:	f7ff ffe5 	bl	6818 <write_op>
}
    684e:	b005      	add	sp, #20
    6850:	f85d fb04 	ldr.w	pc, [sp], #4

00006854 <flash_nrf_write>:
{
    6854:	b570      	push	{r4, r5, r6, lr}
    6856:	460c      	mov	r4, r1
    6858:	4616      	mov	r6, r2
    685a:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
    685c:	f000 fa35 	bl	6cca <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    6860:	4284      	cmp	r4, r0
    6862:	d215      	bcs.n	6890 <flash_nrf_write+0x3c>
    6864:	2c00      	cmp	r4, #0
    6866:	db16      	blt.n	6896 <flash_nrf_write+0x42>
	    addr < 0 ||
    6868:	4285      	cmp	r5, r0
    686a:	d817      	bhi.n	689c <flash_nrf_write+0x48>
	    (addr) + len > flash_size) {
    686c:	192b      	adds	r3, r5, r4
	    len > flash_size ||
    686e:	4298      	cmp	r0, r3
    6870:	d317      	bcc.n	68a2 <flash_nrf_write+0x4e>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    6872:	f014 0f03 	tst.w	r4, #3
    6876:	d117      	bne.n	68a8 <flash_nrf_write+0x54>
    6878:	f015 0f03 	tst.w	r5, #3
    687c:	d117      	bne.n	68ae <flash_nrf_write+0x5a>
	if (!len) {
    687e:	b90d      	cbnz	r5, 6884 <flash_nrf_write+0x30>
		return 0;
    6880:	2000      	movs	r0, #0
    6882:	e007      	b.n	6894 <flash_nrf_write+0x40>
		ret = write(addr, data, len);
    6884:	462a      	mov	r2, r5
    6886:	4631      	mov	r1, r6
    6888:	4620      	mov	r0, r4
    688a:	f7ff ffd8 	bl	683e <write>
	return ret;
    688e:	e001      	b.n	6894 <flash_nrf_write+0x40>
		return -EINVAL;
    6890:	f06f 0015 	mvn.w	r0, #21
}
    6894:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    6896:	f06f 0015 	mvn.w	r0, #21
    689a:	e7fb      	b.n	6894 <flash_nrf_write+0x40>
    689c:	f06f 0015 	mvn.w	r0, #21
    68a0:	e7f8      	b.n	6894 <flash_nrf_write+0x40>
    68a2:	f06f 0015 	mvn.w	r0, #21
    68a6:	e7f5      	b.n	6894 <flash_nrf_write+0x40>
		return -EINVAL;
    68a8:	f06f 0015 	mvn.w	r0, #21
    68ac:	e7f2      	b.n	6894 <flash_nrf_write+0x40>
    68ae:	f06f 0015 	mvn.w	r0, #21
    68b2:	e7ef      	b.n	6894 <flash_nrf_write+0x40>

000068b4 <flash_nrf_read>:
{
    68b4:	b570      	push	{r4, r5, r6, lr}
    68b6:	460c      	mov	r4, r1
    68b8:	4616      	mov	r6, r2
    68ba:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
    68bc:	f000 fa05 	bl	6cca <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    68c0:	42a0      	cmp	r0, r4
    68c2:	d910      	bls.n	68e6 <flash_nrf_read+0x32>
    68c4:	2c00      	cmp	r4, #0
    68c6:	db11      	blt.n	68ec <flash_nrf_read+0x38>
	    addr < 0 ||
    68c8:	4285      	cmp	r5, r0
    68ca:	d812      	bhi.n	68f2 <flash_nrf_read+0x3e>
	    (addr) + len > flash_size) {
    68cc:	192b      	adds	r3, r5, r4
	    len > flash_size ||
    68ce:	4298      	cmp	r0, r3
    68d0:	d312      	bcc.n	68f8 <flash_nrf_read+0x44>
	if (!len) {
    68d2:	b90d      	cbnz	r5, 68d8 <flash_nrf_read+0x24>
		return 0;
    68d4:	2000      	movs	r0, #0
    68d6:	e008      	b.n	68ea <flash_nrf_read+0x36>
	memcpy(data, (void *)addr, len);
    68d8:	462a      	mov	r2, r5
    68da:	4621      	mov	r1, r4
    68dc:	4630      	mov	r0, r6
    68de:	f7ff fea6 	bl	662e <memcpy>
	return 0;
    68e2:	2000      	movs	r0, #0
    68e4:	e001      	b.n	68ea <flash_nrf_read+0x36>
		return -EINVAL;
    68e6:	f06f 0015 	mvn.w	r0, #21
}
    68ea:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    68ec:	f06f 0015 	mvn.w	r0, #21
    68f0:	e7fb      	b.n	68ea <flash_nrf_read+0x36>
    68f2:	f06f 0015 	mvn.w	r0, #21
    68f6:	e7f8      	b.n	68ea <flash_nrf_read+0x36>
    68f8:	f06f 0015 	mvn.w	r0, #21
    68fc:	e7f5      	b.n	68ea <flash_nrf_read+0x36>

000068fe <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    68fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6902:	b086      	sub	sp, #24
    6904:	4689      	mov	r9, r1
    6906:	4690      	mov	r8, r2
	const struct flash_driver_api *api = dev->api;
    6908:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
    690a:	695b      	ldr	r3, [r3, #20]
    690c:	aa01      	add	r2, sp, #4
    690e:	a905      	add	r1, sp, #20
    6910:	4798      	blx	r3
	off_t off = 0;
    6912:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
    6914:	4626      	mov	r6, r4

	for (block = 0; block < num_blocks; block++) {
    6916:	46a2      	mov	sl, r4
    6918:	9b01      	ldr	r3, [sp, #4]
    691a:	4553      	cmp	r3, sl
    691c:	d916      	bls.n	694c <flash_page_foreach+0x4e>
		const struct flash_pages_layout *l = &layout[block];
    691e:	9f05      	ldr	r7, [sp, #20]
    6920:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
		page_info.size = l->pages_size;
    6924:	687b      	ldr	r3, [r7, #4]
    6926:	9303      	str	r3, [sp, #12]

		for (i = 0; i < l->pages_count; i++) {
    6928:	2500      	movs	r5, #0
    692a:	683b      	ldr	r3, [r7, #0]
    692c:	42ab      	cmp	r3, r5
    692e:	d90a      	bls.n	6946 <flash_page_foreach+0x48>
			page_info.start_offset = off;
    6930:	9402      	str	r4, [sp, #8]
			page_info.index = page;
    6932:	9604      	str	r6, [sp, #16]

			if (!cb(&page_info, data)) {
    6934:	4641      	mov	r1, r8
    6936:	a802      	add	r0, sp, #8
    6938:	47c8      	blx	r9
    693a:	b138      	cbz	r0, 694c <flash_page_foreach+0x4e>
				return;
			}

			off += page_info.size;
    693c:	9b03      	ldr	r3, [sp, #12]
    693e:	441c      	add	r4, r3
			page++;
    6940:	3601      	adds	r6, #1
		for (i = 0; i < l->pages_count; i++) {
    6942:	3501      	adds	r5, #1
    6944:	e7f1      	b.n	692a <flash_page_foreach+0x2c>
	for (block = 0; block < num_blocks; block++) {
    6946:	f10a 0a01 	add.w	sl, sl, #1
    694a:	e7e5      	b.n	6918 <flash_page_foreach+0x1a>
		}
	}
}
    694c:	b006      	add	sp, #24
    694e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006952 <uarte_nrfx_isr_int>:
{
    6952:	b508      	push	{r3, lr}
	return dev->data;
    6954:	68c2      	ldr	r2, [r0, #12]
	return dev->config;
    6956:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6958:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
    695a:	68d1      	ldr	r1, [r2, #12]
    695c:	7b89      	ldrb	r1, [r1, #14]
    695e:	b111      	cbz	r1, 6966 <uarte_nrfx_isr_int+0x14>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6960:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    6964:	b969      	cbnz	r1, 6982 <uarte_nrfx_isr_int+0x30>
    6966:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    696a:	b121      	cbz	r1, 6976 <uarte_nrfx_isr_int+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    696c:	2100      	movs	r1, #0
    696e:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    6972:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    6976:	68d2      	ldr	r2, [r2, #12]
    6978:	6813      	ldr	r3, [r2, #0]
    697a:	b10b      	cbz	r3, 6980 <uarte_nrfx_isr_int+0x2e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    697c:	6851      	ldr	r1, [r2, #4]
    697e:	4798      	blx	r3
}
    6980:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    6982:	f44f 7180 	mov.w	r1, #256	; 0x100
    6986:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    698a:	2101      	movs	r1, #1
    698c:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
    698e:	68d3      	ldr	r3, [r2, #12]
    6990:	2200      	movs	r2, #0
    6992:	739a      	strb	r2, [r3, #14]
		return;
    6994:	e7f4      	b.n	6980 <uarte_nrfx_isr_int+0x2e>

00006996 <uarte_nrfx_configure>:
{
    6996:	b570      	push	{r4, r5, r6, lr}
    6998:	b082      	sub	sp, #8
	switch (cfg->stop_bits) {
    699a:	794b      	ldrb	r3, [r1, #5]
    699c:	2b01      	cmp	r3, #1
    699e:	d006      	beq.n	69ae <uarte_nrfx_configure+0x18>
    69a0:	2b03      	cmp	r3, #3
    69a2:	d011      	beq.n	69c8 <uarte_nrfx_configure+0x32>
		return -ENOTSUP;
    69a4:	f06f 0322 	mvn.w	r3, #34	; 0x22
}
    69a8:	4618      	mov	r0, r3
    69aa:	b002      	add	sp, #8
    69ac:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    69ae:	2300      	movs	r3, #0
    69b0:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    69b4:	798b      	ldrb	r3, [r1, #6]
    69b6:	2b03      	cmp	r3, #3
    69b8:	d13c      	bne.n	6a34 <uarte_nrfx_configure+0x9e>
	switch (cfg->flow_ctrl) {
    69ba:	79cb      	ldrb	r3, [r1, #7]
    69bc:	b143      	cbz	r3, 69d0 <uarte_nrfx_configure+0x3a>
    69be:	2b01      	cmp	r3, #1
    69c0:	d010      	beq.n	69e4 <uarte_nrfx_configure+0x4e>
		return -ENOTSUP;
    69c2:	f06f 0322 	mvn.w	r3, #34	; 0x22
    69c6:	e7ef      	b.n	69a8 <uarte_nrfx_configure+0x12>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    69c8:	2310      	movs	r3, #16
    69ca:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    69ce:	e7f1      	b.n	69b4 <uarte_nrfx_configure+0x1e>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    69d0:	2300      	movs	r3, #0
    69d2:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    69d6:	790b      	ldrb	r3, [r1, #4]
    69d8:	b15b      	cbz	r3, 69f2 <uarte_nrfx_configure+0x5c>
    69da:	2b02      	cmp	r3, #2
    69dc:	d026      	beq.n	6a2c <uarte_nrfx_configure+0x96>
		return -ENOTSUP;
    69de:	f06f 0322 	mvn.w	r3, #34	; 0x22
    69e2:	e7e1      	b.n	69a8 <uarte_nrfx_configure+0x12>
	return dev->config;
    69e4:	6843      	ldr	r3, [r0, #4]
		if (get_dev_config(dev)->rts_cts_pins_set) {
    69e6:	791b      	ldrb	r3, [r3, #4]
    69e8:	b33b      	cbz	r3, 6a3a <uarte_nrfx_configure+0xa4>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    69ea:	2301      	movs	r3, #1
    69ec:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    69f0:	e7f1      	b.n	69d6 <uarte_nrfx_configure+0x40>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    69f2:	2300      	movs	r3, #0
    69f4:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    69f8:	460c      	mov	r4, r1
    69fa:	4605      	mov	r5, r0
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    69fc:	6809      	ldr	r1, [r1, #0]
    69fe:	f7fc fb9b 	bl	3138 <baudrate_set>
    6a02:	4603      	mov	r3, r0
    6a04:	b9e0      	cbnz	r0, 6a40 <uarte_nrfx_configure+0xaa>
	return dev->config;
    6a06:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
    6a08:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    6a0a:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    6a0e:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    6a12:	f89d 2004 	ldrb.w	r2, [sp, #4]
    6a16:	4331      	orrs	r1, r6
    6a18:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    6a1a:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
    6a1e:	68ea      	ldr	r2, [r5, #12]
	get_dev_data(dev)->uart_config = *cfg;
    6a20:	3204      	adds	r2, #4
    6a22:	e894 0003 	ldmia.w	r4, {r0, r1}
    6a26:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
    6a2a:	e7bd      	b.n	69a8 <uarte_nrfx_configure+0x12>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    6a2c:	230e      	movs	r3, #14
    6a2e:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    6a32:	e7e1      	b.n	69f8 <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
    6a34:	f06f 0322 	mvn.w	r3, #34	; 0x22
    6a38:	e7b6      	b.n	69a8 <uarte_nrfx_configure+0x12>
			return -ENOTSUP;
    6a3a:	f06f 0322 	mvn.w	r3, #34	; 0x22
    6a3e:	e7b3      	b.n	69a8 <uarte_nrfx_configure+0x12>
		return -ENOTSUP;
    6a40:	f06f 0322 	mvn.w	r3, #34	; 0x22
    6a44:	e7b0      	b.n	69a8 <uarte_nrfx_configure+0x12>

00006a46 <uarte_nrfx_config_get>:
{
    6a46:	460a      	mov	r2, r1
	return dev->data;
    6a48:	68c3      	ldr	r3, [r0, #12]
	*cfg = get_dev_data(dev)->uart_config;
    6a4a:	3304      	adds	r3, #4
    6a4c:	e893 0003 	ldmia.w	r3, {r0, r1}
    6a50:	e882 0003 	stmia.w	r2, {r0, r1}
}
    6a54:	2000      	movs	r0, #0
    6a56:	4770      	bx	lr

00006a58 <uarte_nrfx_err_check>:
	return dev->config;
    6a58:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6a5a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    6a5c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    6a60:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    6a64:	4770      	bx	lr

00006a66 <uarte_nrfx_poll_in>:
{
    6a66:	b410      	push	{r4}
	return dev->data;
    6a68:	68c4      	ldr	r4, [r0, #12]
	return dev->config;
    6a6a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6a6c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6a6e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6a72:	b152      	cbz	r2, 6a8a <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    6a74:	7d22      	ldrb	r2, [r4, #20]
    6a76:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6a78:	2000      	movs	r0, #0
    6a7a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    6a7e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6a82:	2201      	movs	r2, #1
    6a84:	601a      	str	r2, [r3, #0]
}
    6a86:	bc10      	pop	{r4}
    6a88:	4770      	bx	lr
		return -1;
    6a8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6a8e:	e7fa      	b.n	6a86 <uarte_nrfx_poll_in+0x20>

00006a90 <uarte_nrfx_fifo_fill>:
{
    6a90:	b470      	push	{r4, r5, r6}
	return dev->config;
    6a92:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6a94:	681e      	ldr	r6, [r3, #0]
	return dev->data;
    6a96:	68c5      	ldr	r5, [r0, #12]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6a98:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    6a9c:	b1db      	cbz	r3, 6ad6 <uarte_nrfx_fifo_fill+0x46>
	if (len > data->int_driven->tx_buff_size) {
    6a9e:	68eb      	ldr	r3, [r5, #12]
    6aa0:	8998      	ldrh	r0, [r3, #12]
    6aa2:	4290      	cmp	r0, r2
    6aa4:	db00      	blt.n	6aa8 <uarte_nrfx_fifo_fill+0x18>
    6aa6:	4610      	mov	r0, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6aa8:	2300      	movs	r3, #0
    6aaa:	f8c6 3120 	str.w	r3, [r6, #288]	; 0x120
    6aae:	f8d6 2120 	ldr.w	r2, [r6, #288]	; 0x120
	for (int i = 0; i < len; i++) {
    6ab2:	4298      	cmp	r0, r3
    6ab4:	dd05      	ble.n	6ac2 <uarte_nrfx_fifo_fill+0x32>
		data->int_driven->tx_buffer[i] = tx_data[i];
    6ab6:	68ea      	ldr	r2, [r5, #12]
    6ab8:	6892      	ldr	r2, [r2, #8]
    6aba:	5ccc      	ldrb	r4, [r1, r3]
    6abc:	54d4      	strb	r4, [r2, r3]
	for (int i = 0; i < len; i++) {
    6abe:	3301      	adds	r3, #1
    6ac0:	e7f7      	b.n	6ab2 <uarte_nrfx_fifo_fill+0x22>
	nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, len);
    6ac2:	68eb      	ldr	r3, [r5, #12]
    6ac4:	689b      	ldr	r3, [r3, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6ac6:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6aca:	f8c6 0548 	str.w	r0, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6ace:	2301      	movs	r3, #1
    6ad0:	60b3      	str	r3, [r6, #8]
}
    6ad2:	bc70      	pop	{r4, r5, r6}
    6ad4:	4770      	bx	lr
		return 0;
    6ad6:	2000      	movs	r0, #0
    6ad8:	e7fb      	b.n	6ad2 <uarte_nrfx_fifo_fill+0x42>

00006ada <uarte_nrfx_fifo_read>:
	return dev->config;
    6ada:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6adc:	681b      	ldr	r3, [r3, #0]
	return dev->data;
    6ade:	68c0      	ldr	r0, [r0, #12]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6ae0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6ae4:	b14a      	cbz	r2, 6afa <uarte_nrfx_fifo_read+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6ae6:	2200      	movs	r2, #0
    6ae8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    6aec:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    6af0:	7d02      	ldrb	r2, [r0, #20]
    6af2:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6af4:	2001      	movs	r0, #1
    6af6:	6018      	str	r0, [r3, #0]
    6af8:	4770      	bx	lr
	int num_rx = 0;
    6afa:	2000      	movs	r0, #0
}
    6afc:	4770      	bx	lr

00006afe <uarte_nrfx_irq_tx_enable>:
	return dev->config;
    6afe:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6b00:	681b      	ldr	r3, [r3, #0]
	return dev->data;
    6b02:	68c2      	ldr	r2, [r0, #12]
	data->int_driven->disable_tx_irq = false;
    6b04:	68d2      	ldr	r2, [r2, #12]
    6b06:	2100      	movs	r1, #0
    6b08:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
    6b0a:	f44f 7280 	mov.w	r2, #256	; 0x100
    6b0e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6b12:	4770      	bx	lr

00006b14 <uarte_nrfx_irq_tx_disable>:
	return dev->data;
    6b14:	68c3      	ldr	r3, [r0, #12]
	data->int_driven->disable_tx_irq = true;
    6b16:	68db      	ldr	r3, [r3, #12]
    6b18:	2201      	movs	r2, #1
    6b1a:	739a      	strb	r2, [r3, #14]
}
    6b1c:	4770      	bx	lr

00006b1e <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config;
    6b1e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6b20:	681a      	ldr	r2, [r3, #0]
	return dev->data;
    6b22:	68c3      	ldr	r3, [r0, #12]
	return !data->int_driven->disable_tx_irq &&
    6b24:	68db      	ldr	r3, [r3, #12]
    6b26:	7b9b      	ldrb	r3, [r3, #14]
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
    6b28:	b94b      	cbnz	r3, 6b3e <uarte_nrfx_irq_tx_ready_complete+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6b2a:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
	return !data->int_driven->disable_tx_irq &&
    6b2e:	b143      	cbz	r3, 6b42 <uarte_nrfx_irq_tx_ready_complete+0x24>
    return p_reg->INTENSET & mask;
    6b30:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
    6b34:	f413 7f80 	tst.w	r3, #256	; 0x100
    6b38:	d005      	beq.n	6b46 <uarte_nrfx_irq_tx_ready_complete+0x28>
    6b3a:	2001      	movs	r0, #1
    6b3c:	4770      	bx	lr
    6b3e:	2000      	movs	r0, #0
    6b40:	4770      	bx	lr
    6b42:	2000      	movs	r0, #0
    6b44:	4770      	bx	lr
    6b46:	2000      	movs	r0, #0
}
    6b48:	4770      	bx	lr

00006b4a <uarte_nrfx_irq_rx_ready>:
	return dev->config;
    6b4a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6b4c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6b4e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    6b52:	3000      	adds	r0, #0
    6b54:	bf18      	it	ne
    6b56:	2001      	movne	r0, #1
    6b58:	4770      	bx	lr

00006b5a <uarte_nrfx_irq_rx_enable>:
	return dev->config;
    6b5a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6b5c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    6b5e:	2210      	movs	r2, #16
    6b60:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6b64:	4770      	bx	lr

00006b66 <uarte_nrfx_irq_rx_disable>:
	return dev->config;
    6b66:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6b68:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    6b6a:	2210      	movs	r2, #16
    6b6c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    6b70:	4770      	bx	lr

00006b72 <uarte_nrfx_irq_err_enable>:
	return dev->config;
    6b72:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6b74:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    6b76:	f44f 7200 	mov.w	r2, #512	; 0x200
    6b7a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6b7e:	4770      	bx	lr

00006b80 <uarte_nrfx_irq_err_disable>:
	return dev->config;
    6b80:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6b82:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    6b84:	f44f 7200 	mov.w	r2, #512	; 0x200
    6b88:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    6b8c:	4770      	bx	lr

00006b8e <uarte_nrfx_irq_is_pending>:
{
    6b8e:	b538      	push	{r3, r4, r5, lr}
    6b90:	4605      	mov	r5, r0
	return dev->config;
    6b92:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6b94:	681c      	ldr	r4, [r3, #0]
    return p_reg->INTENSET & mask;
    6b96:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		||
    6b9a:	f413 7f80 	tst.w	r3, #256	; 0x100
    6b9e:	d107      	bne.n	6bb0 <uarte_nrfx_irq_is_pending+0x22>
    6ba0:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    6ba4:	f013 0f10 	tst.w	r3, #16
    6ba8:	d108      	bne.n	6bbc <uarte_nrfx_irq_is_pending+0x2e>
    6baa:	2300      	movs	r3, #0
}
    6bac:	4618      	mov	r0, r3
    6bae:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    6bb0:	f7ff ffb5 	bl	6b1e <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
    6bb4:	2800      	cmp	r0, #0
    6bb6:	d0f3      	beq.n	6ba0 <uarte_nrfx_irq_is_pending+0x12>
		||
    6bb8:	2301      	movs	r3, #1
    6bba:	e7f7      	b.n	6bac <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
    6bbc:	4628      	mov	r0, r5
    6bbe:	f7ff ffc4 	bl	6b4a <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    6bc2:	4603      	mov	r3, r0
    6bc4:	2800      	cmp	r0, #0
    6bc6:	d0f1      	beq.n	6bac <uarte_nrfx_irq_is_pending+0x1e>
		||
    6bc8:	2301      	movs	r3, #1
    6bca:	e7ef      	b.n	6bac <uarte_nrfx_irq_is_pending+0x1e>

00006bcc <uarte_nrfx_irq_update>:
}
    6bcc:	2001      	movs	r0, #1
    6bce:	4770      	bx	lr

00006bd0 <uarte_nrfx_irq_callback_set>:
	return dev->data;
    6bd0:	68c3      	ldr	r3, [r0, #12]
	data->int_driven->cb = cb;
    6bd2:	68d8      	ldr	r0, [r3, #12]
    6bd4:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
    6bd6:	68db      	ldr	r3, [r3, #12]
    6bd8:	605a      	str	r2, [r3, #4]
}
    6bda:	4770      	bx	lr

00006bdc <uarte_nrfx_poll_out>:
{
    6bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6bde:	b083      	sub	sp, #12
    6be0:	f88d 1007 	strb.w	r1, [sp, #7]
	return dev->config;
    6be4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6be6:	681d      	ldr	r5, [r3, #0]
	return dev->data;
    6be8:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
    6bea:	f001 fdb4 	bl	8756 <k_is_in_isr>
    6bee:	b9a8      	cbnz	r0, 6c1c <uarte_nrfx_poll_out+0x40>
    6bf0:	f106 0410 	add.w	r4, r6, #16
		uint8_t safety_cnt = 100;
    6bf4:	2764      	movs	r7, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    6bf6:	2301      	movs	r3, #1
    6bf8:	e8d4 2fef 	ldaex	r2, [r4]
    6bfc:	2a00      	cmp	r2, #0
    6bfe:	d103      	bne.n	6c08 <uarte_nrfx_poll_out+0x2c>
    6c00:	e8c4 3fe1 	stlex	r1, r3, [r4]
    6c04:	2900      	cmp	r1, #0
    6c06:	d1f7      	bne.n	6bf8 <uarte_nrfx_poll_out+0x1c>
		while (atomic_cas((atomic_t *) lock,
    6c08:	d00a      	beq.n	6c20 <uarte_nrfx_poll_out+0x44>
	return z_impl_k_sleep(timeout);
    6c0a:	2021      	movs	r0, #33	; 0x21
    6c0c:	2100      	movs	r1, #0
    6c0e:	f7fd ff77 	bl	4b00 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
    6c12:	3f01      	subs	r7, #1
    6c14:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    6c18:	d1ed      	bne.n	6bf6 <uarte_nrfx_poll_out+0x1a>
    6c1a:	e001      	b.n	6c20 <uarte_nrfx_poll_out+0x44>
		*lock = 1;
    6c1c:	2301      	movs	r3, #1
    6c1e:	6133      	str	r3, [r6, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6c20:	2300      	movs	r3, #0
    6c22:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    6c26:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6c2a:	f10d 0307 	add.w	r3, sp, #7
    6c2e:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6c32:	2301      	movs	r3, #1
    6c34:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6c38:	60ab      	str	r3, [r5, #8]
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
    6c3a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6c3e:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    6c42:	b923      	cbnz	r3, 6c4e <uarte_nrfx_poll_out+0x72>
    6c44:	2001      	movs	r0, #1
    6c46:	f000 f80b 	bl	6c60 <nrfx_busy_wait>
    6c4a:	3c01      	subs	r4, #1
    6c4c:	d1f7      	bne.n	6c3e <uarte_nrfx_poll_out+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6c4e:	2301      	movs	r3, #1
    6c50:	60eb      	str	r3, [r5, #12]
	*lock = 0;
    6c52:	2300      	movs	r3, #0
    6c54:	6133      	str	r3, [r6, #16]
}
    6c56:	b003      	add	sp, #12
    6c58:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006c5a <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    6c5a:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    6c5c:	4780      	blx	r0
}
    6c5e:	bd08      	pop	{r3, pc}

00006c60 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    6c60:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    6c62:	f001 fd7e 	bl	8762 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    6c66:	bd08      	pop	{r3, pc}

00006c68 <nrfx_clock_enable>:
{
    6c68:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6c6a:	2005      	movs	r0, #5
    6c6c:	f7fb fc6e 	bl	254c <arch_irq_is_enabled>
    6c70:	b100      	cbz	r0, 6c74 <nrfx_clock_enable+0xc>
}
    6c72:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6c74:	2005      	movs	r0, #5
    6c76:	f7fb fc59 	bl	252c <arch_irq_enable>
    6c7a:	e7fa      	b.n	6c72 <nrfx_clock_enable+0xa>

00006c7c <flash_page_size_get>:
}
    6c7c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    6c80:	4770      	bx	lr

00006c82 <flash_page_count_get>:
}
    6c82:	f44f 7080 	mov.w	r0, #256	; 0x100
    6c86:	4770      	bx	lr

00006c88 <flash_total_size_get>:
{
    6c88:	b510      	push	{r4, lr}
    return flash_page_size_get() * flash_page_count_get();
    6c8a:	f7ff fff7 	bl	6c7c <flash_page_size_get>
    6c8e:	4604      	mov	r4, r0
    6c90:	f7ff fff7 	bl	6c82 <flash_page_count_get>
}
    6c94:	fb00 f004 	mul.w	r0, r0, r4
    6c98:	bd10      	pop	{r4, pc}

00006c9a <is_page_aligned_check>:
{
    6c9a:	b510      	push	{r4, lr}
    6c9c:	4604      	mov	r4, r0
    return !(addr % flash_page_size_get());
    6c9e:	f7ff ffed 	bl	6c7c <flash_page_size_get>
    6ca2:	fbb4 f3f0 	udiv	r3, r4, r0
    6ca6:	fb00 4013 	mls	r0, r0, r3, r4
}
    6caa:	fab0 f080 	clz	r0, r0
    6cae:	0940      	lsrs	r0, r0, #5
    6cb0:	bd10      	pop	{r4, pc}

00006cb2 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    6cb2:	b538      	push	{r3, r4, r5, lr}
    6cb4:	4604      	mov	r4, r0
    6cb6:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();
    6cb8:	f7fc fdcc 	bl	3854 <nvmc_write_mode_set>

    nvmc_word_write(addr, value);
    6cbc:	4629      	mov	r1, r5
    6cbe:	4620      	mov	r0, r4
    6cc0:	f7fc fddc 	bl	387c <nvmc_word_write>

    nvmc_readonly_mode_set();
    6cc4:	f7fc fdbc 	bl	3840 <nvmc_readonly_mode_set>
}
    6cc8:	bd38      	pop	{r3, r4, r5, pc}

00006cca <nrfx_nvmc_flash_size_get>:
    return (nrfx_is_word_aligned((void const *)addr) ? (uint16_t)(val32)
                                                     : (uint16_t)(val32 >> 16));
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    6cca:	b508      	push	{r3, lr}
    return flash_total_size_get();
    6ccc:	f7ff ffdc 	bl	6c88 <flash_total_size_get>
}
    6cd0:	bd08      	pop	{r3, pc}

00006cd2 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    6cd2:	b508      	push	{r3, lr}
    return flash_page_size_get();
    6cd4:	f7ff ffd2 	bl	6c7c <flash_page_size_get>
}
    6cd8:	bd08      	pop	{r3, pc}

00006cda <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    6cda:	b508      	push	{r3, lr}
    return flash_page_count_get();
    6cdc:	f7ff ffd1 	bl	6c82 <flash_page_count_get>
}
    6ce0:	bd08      	pop	{r3, pc}

00006ce2 <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    6ce2:	2000      	movs	r0, #0
    6ce4:	4770      	bx	lr

00006ce6 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    6ce6:	b430      	push	{r4, r5}
    if( ( end - *p ) < 1 )
    6ce8:	6803      	ldr	r3, [r0, #0]
    6cea:	1acd      	subs	r5, r1, r3
    6cec:	2d00      	cmp	r5, #0
    6cee:	dd4a      	ble.n	6d86 <mbedtls_asn1_get_len+0xa0>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
    6cf0:	781c      	ldrb	r4, [r3, #0]
    6cf2:	f014 0f80 	tst.w	r4, #128	; 0x80
    6cf6:	d10b      	bne.n	6d10 <mbedtls_asn1_get_len+0x2a>
        *len = *(*p)++;
    6cf8:	1c5c      	adds	r4, r3, #1
    6cfa:	6004      	str	r4, [r0, #0]
    6cfc:	781b      	ldrb	r3, [r3, #0]
    6cfe:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
    6d00:	6813      	ldr	r3, [r2, #0]
    6d02:	6802      	ldr	r2, [r0, #0]
    6d04:	1a89      	subs	r1, r1, r2
    6d06:	428b      	cmp	r3, r1
    6d08:	d84f      	bhi.n	6daa <mbedtls_asn1_get_len+0xc4>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
    6d0a:	2000      	movs	r0, #0
}
    6d0c:	bc30      	pop	{r4, r5}
    6d0e:	4770      	bx	lr
        switch( **p & 0x7F )
    6d10:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    6d14:	3c01      	subs	r4, #1
    6d16:	2c03      	cmp	r4, #3
    6d18:	d838      	bhi.n	6d8c <mbedtls_asn1_get_len+0xa6>
    6d1a:	e8df f004 	tbb	[pc, r4]
    6d1e:	0a02      	.short	0x0a02
    6d20:	2315      	.short	0x2315
            if( ( end - *p ) < 2 )
    6d22:	2d01      	cmp	r5, #1
    6d24:	dd35      	ble.n	6d92 <mbedtls_asn1_get_len+0xac>
            *len = (*p)[1];
    6d26:	785b      	ldrb	r3, [r3, #1]
    6d28:	6013      	str	r3, [r2, #0]
            (*p) += 2;
    6d2a:	6803      	ldr	r3, [r0, #0]
    6d2c:	3302      	adds	r3, #2
    6d2e:	6003      	str	r3, [r0, #0]
            break;
    6d30:	e7e6      	b.n	6d00 <mbedtls_asn1_get_len+0x1a>
            if( ( end - *p ) < 3 )
    6d32:	2d02      	cmp	r5, #2
    6d34:	dd30      	ble.n	6d98 <mbedtls_asn1_get_len+0xb2>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    6d36:	785c      	ldrb	r4, [r3, #1]
    6d38:	789b      	ldrb	r3, [r3, #2]
    6d3a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    6d3e:	6013      	str	r3, [r2, #0]
            (*p) += 3;
    6d40:	6803      	ldr	r3, [r0, #0]
    6d42:	3303      	adds	r3, #3
    6d44:	6003      	str	r3, [r0, #0]
            break;
    6d46:	e7db      	b.n	6d00 <mbedtls_asn1_get_len+0x1a>
            if( ( end - *p ) < 4 )
    6d48:	2d03      	cmp	r5, #3
    6d4a:	dd28      	ble.n	6d9e <mbedtls_asn1_get_len+0xb8>
            *len = ( (size_t)(*p)[1] << 16 ) |
    6d4c:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6d4e:	789c      	ldrb	r4, [r3, #2]
    6d50:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
    6d52:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6d56:	78db      	ldrb	r3, [r3, #3]
    6d58:	4323      	orrs	r3, r4
            *len = ( (size_t)(*p)[1] << 16 ) |
    6d5a:	6013      	str	r3, [r2, #0]
            (*p) += 4;
    6d5c:	6803      	ldr	r3, [r0, #0]
    6d5e:	3304      	adds	r3, #4
    6d60:	6003      	str	r3, [r0, #0]
            break;
    6d62:	e7cd      	b.n	6d00 <mbedtls_asn1_get_len+0x1a>
            if( ( end - *p ) < 5 )
    6d64:	2d04      	cmp	r5, #4
    6d66:	dd1d      	ble.n	6da4 <mbedtls_asn1_get_len+0xbe>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    6d68:	785d      	ldrb	r5, [r3, #1]
    6d6a:	789c      	ldrb	r4, [r3, #2]
    6d6c:	0424      	lsls	r4, r4, #16
    6d6e:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
    6d72:	78dd      	ldrb	r5, [r3, #3]
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    6d74:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
    6d78:	791b      	ldrb	r3, [r3, #4]
    6d7a:	4323      	orrs	r3, r4
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    6d7c:	6013      	str	r3, [r2, #0]
            (*p) += 5;
    6d7e:	6803      	ldr	r3, [r0, #0]
    6d80:	3305      	adds	r3, #5
    6d82:	6003      	str	r3, [r0, #0]
            break;
    6d84:	e7bc      	b.n	6d00 <mbedtls_asn1_get_len+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6d86:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    6d8a:	e7bf      	b.n	6d0c <mbedtls_asn1_get_len+0x26>
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    6d8c:	f06f 0063 	mvn.w	r0, #99	; 0x63
    6d90:	e7bc      	b.n	6d0c <mbedtls_asn1_get_len+0x26>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6d92:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    6d96:	e7b9      	b.n	6d0c <mbedtls_asn1_get_len+0x26>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6d98:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    6d9c:	e7b6      	b.n	6d0c <mbedtls_asn1_get_len+0x26>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6d9e:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    6da2:	e7b3      	b.n	6d0c <mbedtls_asn1_get_len+0x26>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6da4:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    6da8:	e7b0      	b.n	6d0c <mbedtls_asn1_get_len+0x26>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6daa:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    6dae:	e7ad      	b.n	6d0c <mbedtls_asn1_get_len+0x26>

00006db0 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    6db0:	b538      	push	{r3, r4, r5, lr}
    if( ( end - *p ) < 1 )
    6db2:	6804      	ldr	r4, [r0, #0]
    6db4:	1b0d      	subs	r5, r1, r4
    6db6:	2d00      	cmp	r5, #0
    6db8:	dd07      	ble.n	6dca <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    6dba:	7825      	ldrb	r5, [r4, #0]
    6dbc:	429d      	cmp	r5, r3
    6dbe:	d107      	bne.n	6dd0 <mbedtls_asn1_get_tag+0x20>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    6dc0:	3401      	adds	r4, #1
    6dc2:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
    6dc4:	f7ff ff8f 	bl	6ce6 <mbedtls_asn1_get_len>
}
    6dc8:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6dca:	f06f 005f 	mvn.w	r0, #95	; 0x5f
    6dce:	e7fb      	b.n	6dc8 <mbedtls_asn1_get_tag+0x18>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    6dd0:	f06f 0061 	mvn.w	r0, #97	; 0x61
    6dd4:	e7f8      	b.n	6dc8 <mbedtls_asn1_get_tag+0x18>

00006dd6 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
    6dd6:	b530      	push	{r4, r5, lr}
    6dd8:	b083      	sub	sp, #12
    6dda:	4604      	mov	r4, r0
    6ddc:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    6dde:	2302      	movs	r3, #2
    6de0:	aa01      	add	r2, sp, #4
    6de2:	f7ff ffe5 	bl	6db0 <mbedtls_asn1_get_tag>
    6de6:	4603      	mov	r3, r0
    6de8:	b110      	cbz	r0, 6df0 <mbedtls_asn1_get_mpi+0x1a>
    ret = mbedtls_mpi_read_binary( X, *p, len );

    *p += len;

    return( ret );
}
    6dea:	4618      	mov	r0, r3
    6dec:	b003      	add	sp, #12
    6dee:	bd30      	pop	{r4, r5, pc}
    ret = mbedtls_mpi_read_binary( X, *p, len );
    6df0:	9a01      	ldr	r2, [sp, #4]
    6df2:	6821      	ldr	r1, [r4, #0]
    6df4:	4628      	mov	r0, r5
    6df6:	f000 fb74 	bl	74e2 <mbedtls_mpi_read_binary>
    6dfa:	4603      	mov	r3, r0
    *p += len;
    6dfc:	6822      	ldr	r2, [r4, #0]
    6dfe:	9901      	ldr	r1, [sp, #4]
    6e00:	440a      	add	r2, r1
    6e02:	6022      	str	r2, [r4, #0]
    return( ret );
    6e04:	e7f1      	b.n	6dea <mbedtls_asn1_get_mpi+0x14>

00006e06 <mpi_safe_cond_assign>:
 */
static void mpi_safe_cond_assign( size_t n,
                                  mbedtls_mpi_uint *dest,
                                  const mbedtls_mpi_uint *src,
                                  unsigned char assign )
{
    6e06:	b4f0      	push	{r4, r5, r6, r7}
    size_t i;
    for( i = 0; i < n; i++ )
    6e08:	2400      	movs	r4, #0
    6e0a:	4284      	cmp	r4, r0
    6e0c:	d20d      	bcs.n	6e2a <mpi_safe_cond_assign+0x24>
        dest[i] = dest[i] * ( 1 - assign ) + src[i] * assign;
    6e0e:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
    6e12:	f1c3 0701 	rsb	r7, r3, #1
    6e16:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
    6e1a:	fb06 f603 	mul.w	r6, r6, r3
    6e1e:	fb07 6505 	mla	r5, r7, r5, r6
    6e22:	f841 5024 	str.w	r5, [r1, r4, lsl #2]
    for( i = 0; i < n; i++ )
    6e26:	3401      	adds	r4, #1
    6e28:	e7ef      	b.n	6e0a <mpi_safe_cond_assign+0x4>
}
    6e2a:	bcf0      	pop	{r4, r5, r6, r7}
    6e2c:	4770      	bx	lr

00006e2e <mbedtls_clz>:
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
    6e2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000

    for( j = 0; j < biL; j++ )
    6e32:	2300      	movs	r3, #0
    6e34:	2b1f      	cmp	r3, #31
    6e36:	d804      	bhi.n	6e42 <mbedtls_clz+0x14>
    {
        if( x & mask ) break;
    6e38:	4202      	tst	r2, r0
    6e3a:	d102      	bne.n	6e42 <mbedtls_clz+0x14>

        mask >>= 1;
    6e3c:	0852      	lsrs	r2, r2, #1
    for( j = 0; j < biL; j++ )
    6e3e:	3301      	adds	r3, #1
    6e40:	e7f8      	b.n	6e34 <mbedtls_clz+0x6>
    }

    return j;
}
    6e42:	4618      	mov	r0, r3
    6e44:	4770      	bx	lr

00006e46 <mpi_uint_bigendian_to_host_c>:

/* Convert a big-endian byte array aligned to the size of mbedtls_mpi_uint
 * into the storage form used by mbedtls_mpi. */

static mbedtls_mpi_uint mpi_uint_bigendian_to_host_c( mbedtls_mpi_uint x )
{
    6e46:	b082      	sub	sp, #8
    6e48:	9001      	str	r0, [sp, #4]
    uint8_t i;
    unsigned char *x_ptr;
    mbedtls_mpi_uint tmp = 0;
    6e4a:	2000      	movs	r0, #0

    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    6e4c:	aa01      	add	r2, sp, #4
    6e4e:	4603      	mov	r3, r0
    6e50:	e005      	b.n	6e5e <mpi_uint_bigendian_to_host_c+0x18>
    {
        tmp <<= CHAR_BIT;
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    6e52:	f812 1b01 	ldrb.w	r1, [r2], #1
    6e56:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    6e5a:	3301      	adds	r3, #1
    6e5c:	b2db      	uxtb	r3, r3
    6e5e:	2b03      	cmp	r3, #3
    6e60:	d9f7      	bls.n	6e52 <mpi_uint_bigendian_to_host_c+0xc>
    }

    return( tmp );
}
    6e62:	b002      	add	sp, #8
    6e64:	4770      	bx	lr

00006e66 <mpi_uint_bigendian_to_host>:

static mbedtls_mpi_uint mpi_uint_bigendian_to_host( mbedtls_mpi_uint x )
{
    6e66:	b508      	push	{r3, lr}
#endif /* __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__ */
#endif /* __BYTE_ORDER__ */

    /* Fall back to C-based reordering if we don't know the byte order
     * or we couldn't use a compiler-specific builtin. */
    return( mpi_uint_bigendian_to_host_c( x ) );
    6e68:	f7ff ffed 	bl	6e46 <mpi_uint_bigendian_to_host_c>
}
    6e6c:	bd08      	pop	{r3, pc}

00006e6e <mpi_bigendian_to_host>:

static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
{
    mbedtls_mpi_uint *cur_limb_left;
    mbedtls_mpi_uint *cur_limb_right;
    if( limbs == 0 )
    6e6e:	b1a9      	cbz	r1, 6e9c <mpi_bigendian_to_host+0x2e>
{
    6e70:	b570      	push	{r4, r5, r6, lr}
    6e72:	4605      	mov	r5, r0
     * For that, simultaneously traverse the limbs from left to right
     * and from right to left, as long as the left index is not bigger
     * than the right index (it's not a problem if limbs is odd and the
     * indices coincide in the last iteration).
     */
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
    6e74:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
    6e78:	3c01      	subs	r4, #1
    6e7a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    6e7e:	42a5      	cmp	r5, r4
    6e80:	d80b      	bhi.n	6e9a <mpi_bigendian_to_host+0x2c>
         cur_limb_left++, cur_limb_right-- )
    {
        mbedtls_mpi_uint tmp;
        /* Note that if cur_limb_left == cur_limb_right,
         * this code effectively swaps the bytes only once. */
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
    6e82:	6828      	ldr	r0, [r5, #0]
    6e84:	f7ff ffef 	bl	6e66 <mpi_uint_bigendian_to_host>
    6e88:	4606      	mov	r6, r0
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    6e8a:	6820      	ldr	r0, [r4, #0]
    6e8c:	f7ff ffeb 	bl	6e66 <mpi_uint_bigendian_to_host>
    6e90:	f845 0b04 	str.w	r0, [r5], #4
        *cur_limb_right = tmp;
    6e94:	f844 6904 	str.w	r6, [r4], #-4
    6e98:	e7f1      	b.n	6e7e <mpi_bigendian_to_host+0x10>
    }
}
    6e9a:	bd70      	pop	{r4, r5, r6, pc}
    6e9c:	4770      	bx	lr

00006e9e <mpi_sub_hlp>:
 *                      0 if `d >= s`.
 */
static mbedtls_mpi_uint mpi_sub_hlp( size_t n,
                                     mbedtls_mpi_uint *d,
                                     const mbedtls_mpi_uint *s )
{
    6e9e:	b4f0      	push	{r4, r5, r6, r7}
    6ea0:	4684      	mov	ip, r0
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
    6ea2:	2000      	movs	r0, #0
    6ea4:	4604      	mov	r4, r0
    6ea6:	4564      	cmp	r4, ip
    6ea8:	d211      	bcs.n	6ece <mpi_sub_hlp+0x30>
    {
        z = ( *d <  c );     *d -=  c;
    6eaa:	680e      	ldr	r6, [r1, #0]
    6eac:	1a33      	subs	r3, r6, r0
    6eae:	600b      	str	r3, [r1, #0]
        c = ( *d < *s ) + z; *d -= *s;
    6eb0:	f852 5b04 	ldr.w	r5, [r2], #4
    6eb4:	42ab      	cmp	r3, r5
    6eb6:	bf2c      	ite	cs
    6eb8:	2700      	movcs	r7, #0
    6eba:	2701      	movcc	r7, #1
    6ebc:	4286      	cmp	r6, r0
    6ebe:	bf2c      	ite	cs
    6ec0:	4638      	movcs	r0, r7
    6ec2:	1c78      	addcc	r0, r7, #1
    6ec4:	1b5b      	subs	r3, r3, r5
    6ec6:	f841 3b04 	str.w	r3, [r1], #4
    for( i = c = 0; i < n; i++, s++, d++ )
    6eca:	3401      	adds	r4, #1
    6ecc:	e7eb      	b.n	6ea6 <mpi_sub_hlp+0x8>
    }

    return( c );
}
    6ece:	bcf0      	pop	{r4, r5, r6, r7}
    6ed0:	4770      	bx	lr

00006ed2 <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
    6ed2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    mbedtls_mpi_uint c = 0, t = 0;
    6ed6:	2400      	movs	r4, #0
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    6ed8:	280f      	cmp	r0, #15
    6eda:	f240 8173 	bls.w	71c4 <mpi_mul_hlp+0x2f2>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
    6ede:	680d      	ldr	r5, [r1, #0]
    6ee0:	fba5 8903 	umull	r8, r9, r5, r3
    6ee4:	eb14 0408 	adds.w	r4, r4, r8
    6ee8:	bf2c      	ite	cs
    6eea:	2501      	movcs	r5, #1
    6eec:	2500      	movcc	r5, #0
    6eee:	eb05 0709 	add.w	r7, r5, r9
    6ef2:	6816      	ldr	r6, [r2, #0]
    6ef4:	1936      	adds	r6, r6, r4
    6ef6:	bf2c      	ite	cs
    6ef8:	2501      	movcs	r5, #1
    6efa:	2500      	movcc	r5, #0
    6efc:	443d      	add	r5, r7
    6efe:	6016      	str	r6, [r2, #0]
    6f00:	684e      	ldr	r6, [r1, #4]
    6f02:	fba3 6706 	umull	r6, r7, r3, r6
    6f06:	19ad      	adds	r5, r5, r6
    6f08:	bf2c      	ite	cs
    6f0a:	2401      	movcs	r4, #1
    6f0c:	2400      	movcc	r4, #0
    6f0e:	4427      	add	r7, r4
    6f10:	6856      	ldr	r6, [r2, #4]
    6f12:	1975      	adds	r5, r6, r5
    6f14:	bf2c      	ite	cs
    6f16:	2401      	movcs	r4, #1
    6f18:	2400      	movcc	r4, #0
    6f1a:	443c      	add	r4, r7
    6f1c:	6055      	str	r5, [r2, #4]
        MULADDC_CORE   MULADDC_CORE
    6f1e:	688e      	ldr	r6, [r1, #8]
    6f20:	fba3 7806 	umull	r7, r8, r3, r6
    6f24:	19e4      	adds	r4, r4, r7
    6f26:	bf2c      	ite	cs
    6f28:	2601      	movcs	r6, #1
    6f2a:	2600      	movcc	r6, #0
    6f2c:	4446      	add	r6, r8
    6f2e:	6895      	ldr	r5, [r2, #8]
    6f30:	192d      	adds	r5, r5, r4
    6f32:	bf2c      	ite	cs
    6f34:	2401      	movcs	r4, #1
    6f36:	2400      	movcc	r4, #0
    6f38:	4434      	add	r4, r6
    6f3a:	6095      	str	r5, [r2, #8]
    6f3c:	68ce      	ldr	r6, [r1, #12]
    6f3e:	fba3 7806 	umull	r7, r8, r3, r6
    6f42:	19e4      	adds	r4, r4, r7
    6f44:	bf2c      	ite	cs
    6f46:	2601      	movcs	r6, #1
    6f48:	2600      	movcc	r6, #0
    6f4a:	4446      	add	r6, r8
    6f4c:	68d5      	ldr	r5, [r2, #12]
    6f4e:	192d      	adds	r5, r5, r4
    6f50:	bf2c      	ite	cs
    6f52:	2401      	movcs	r4, #1
    6f54:	2400      	movcc	r4, #0
    6f56:	4434      	add	r4, r6
    6f58:	60d5      	str	r5, [r2, #12]
        MULADDC_CORE   MULADDC_CORE
    6f5a:	690e      	ldr	r6, [r1, #16]
    6f5c:	fba3 7806 	umull	r7, r8, r3, r6
    6f60:	19e4      	adds	r4, r4, r7
    6f62:	bf2c      	ite	cs
    6f64:	2601      	movcs	r6, #1
    6f66:	2600      	movcc	r6, #0
    6f68:	4446      	add	r6, r8
    6f6a:	6915      	ldr	r5, [r2, #16]
    6f6c:	192d      	adds	r5, r5, r4
    6f6e:	bf2c      	ite	cs
    6f70:	2401      	movcs	r4, #1
    6f72:	2400      	movcc	r4, #0
    6f74:	4434      	add	r4, r6
    6f76:	6115      	str	r5, [r2, #16]
    6f78:	694e      	ldr	r6, [r1, #20]
    6f7a:	fba3 7806 	umull	r7, r8, r3, r6
    6f7e:	19e4      	adds	r4, r4, r7
    6f80:	bf2c      	ite	cs
    6f82:	2601      	movcs	r6, #1
    6f84:	2600      	movcc	r6, #0
    6f86:	4446      	add	r6, r8
    6f88:	6955      	ldr	r5, [r2, #20]
    6f8a:	192d      	adds	r5, r5, r4
    6f8c:	bf2c      	ite	cs
    6f8e:	2401      	movcs	r4, #1
    6f90:	2400      	movcc	r4, #0
    6f92:	4434      	add	r4, r6
    6f94:	6155      	str	r5, [r2, #20]
        MULADDC_CORE   MULADDC_CORE
    6f96:	698e      	ldr	r6, [r1, #24]
    6f98:	fba3 7806 	umull	r7, r8, r3, r6
    6f9c:	19e4      	adds	r4, r4, r7
    6f9e:	bf2c      	ite	cs
    6fa0:	2601      	movcs	r6, #1
    6fa2:	2600      	movcc	r6, #0
    6fa4:	4446      	add	r6, r8
    6fa6:	6995      	ldr	r5, [r2, #24]
    6fa8:	192d      	adds	r5, r5, r4
    6faa:	bf2c      	ite	cs
    6fac:	2401      	movcs	r4, #1
    6fae:	2400      	movcc	r4, #0
    6fb0:	4434      	add	r4, r6
    6fb2:	6195      	str	r5, [r2, #24]
    6fb4:	69ce      	ldr	r6, [r1, #28]
    6fb6:	fba3 7806 	umull	r7, r8, r3, r6
    6fba:	19e4      	adds	r4, r4, r7
    6fbc:	bf2c      	ite	cs
    6fbe:	2601      	movcs	r6, #1
    6fc0:	2600      	movcc	r6, #0
    6fc2:	4446      	add	r6, r8
    6fc4:	69d5      	ldr	r5, [r2, #28]
    6fc6:	192d      	adds	r5, r5, r4
    6fc8:	bf2c      	ite	cs
    6fca:	2401      	movcs	r4, #1
    6fcc:	2400      	movcc	r4, #0
    6fce:	4434      	add	r4, r6
    6fd0:	61d5      	str	r5, [r2, #28]

        MULADDC_CORE   MULADDC_CORE
    6fd2:	6a0e      	ldr	r6, [r1, #32]
    6fd4:	fba3 7806 	umull	r7, r8, r3, r6
    6fd8:	19e4      	adds	r4, r4, r7
    6fda:	bf2c      	ite	cs
    6fdc:	2601      	movcs	r6, #1
    6fde:	2600      	movcc	r6, #0
    6fe0:	4446      	add	r6, r8
    6fe2:	6a15      	ldr	r5, [r2, #32]
    6fe4:	192d      	adds	r5, r5, r4
    6fe6:	bf2c      	ite	cs
    6fe8:	2401      	movcs	r4, #1
    6fea:	2400      	movcc	r4, #0
    6fec:	4434      	add	r4, r6
    6fee:	6215      	str	r5, [r2, #32]
    6ff0:	6a4e      	ldr	r6, [r1, #36]	; 0x24
    6ff2:	fba3 7806 	umull	r7, r8, r3, r6
    6ff6:	19e4      	adds	r4, r4, r7
    6ff8:	bf2c      	ite	cs
    6ffa:	2601      	movcs	r6, #1
    6ffc:	2600      	movcc	r6, #0
    6ffe:	4446      	add	r6, r8
    7000:	6a55      	ldr	r5, [r2, #36]	; 0x24
    7002:	192d      	adds	r5, r5, r4
    7004:	bf2c      	ite	cs
    7006:	2401      	movcs	r4, #1
    7008:	2400      	movcc	r4, #0
    700a:	4434      	add	r4, r6
    700c:	6255      	str	r5, [r2, #36]	; 0x24
        MULADDC_CORE   MULADDC_CORE
    700e:	6a8e      	ldr	r6, [r1, #40]	; 0x28
    7010:	fba3 7806 	umull	r7, r8, r3, r6
    7014:	19e4      	adds	r4, r4, r7
    7016:	bf2c      	ite	cs
    7018:	2601      	movcs	r6, #1
    701a:	2600      	movcc	r6, #0
    701c:	4446      	add	r6, r8
    701e:	6a95      	ldr	r5, [r2, #40]	; 0x28
    7020:	192d      	adds	r5, r5, r4
    7022:	bf2c      	ite	cs
    7024:	2401      	movcs	r4, #1
    7026:	2400      	movcc	r4, #0
    7028:	4434      	add	r4, r6
    702a:	6295      	str	r5, [r2, #40]	; 0x28
    702c:	6ace      	ldr	r6, [r1, #44]	; 0x2c
    702e:	fba3 7806 	umull	r7, r8, r3, r6
    7032:	19e4      	adds	r4, r4, r7
    7034:	bf2c      	ite	cs
    7036:	2601      	movcs	r6, #1
    7038:	2600      	movcc	r6, #0
    703a:	4446      	add	r6, r8
    703c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    703e:	192d      	adds	r5, r5, r4
    7040:	bf2c      	ite	cs
    7042:	2401      	movcs	r4, #1
    7044:	2400      	movcc	r4, #0
    7046:	4434      	add	r4, r6
    7048:	62d5      	str	r5, [r2, #44]	; 0x2c
        MULADDC_CORE   MULADDC_CORE
    704a:	6b0e      	ldr	r6, [r1, #48]	; 0x30
    704c:	fba3 7806 	umull	r7, r8, r3, r6
    7050:	19e4      	adds	r4, r4, r7
    7052:	bf2c      	ite	cs
    7054:	2601      	movcs	r6, #1
    7056:	2600      	movcc	r6, #0
    7058:	4446      	add	r6, r8
    705a:	6b15      	ldr	r5, [r2, #48]	; 0x30
    705c:	192d      	adds	r5, r5, r4
    705e:	bf2c      	ite	cs
    7060:	2401      	movcs	r4, #1
    7062:	2400      	movcc	r4, #0
    7064:	4434      	add	r4, r6
    7066:	6315      	str	r5, [r2, #48]	; 0x30
    7068:	6b4e      	ldr	r6, [r1, #52]	; 0x34
    706a:	fba3 7806 	umull	r7, r8, r3, r6
    706e:	19e4      	adds	r4, r4, r7
    7070:	bf2c      	ite	cs
    7072:	2601      	movcs	r6, #1
    7074:	2600      	movcc	r6, #0
    7076:	4446      	add	r6, r8
    7078:	6b55      	ldr	r5, [r2, #52]	; 0x34
    707a:	192d      	adds	r5, r5, r4
    707c:	bf2c      	ite	cs
    707e:	2401      	movcs	r4, #1
    7080:	2400      	movcc	r4, #0
    7082:	4434      	add	r4, r6
    7084:	6355      	str	r5, [r2, #52]	; 0x34
        MULADDC_CORE   MULADDC_CORE
    7086:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    7088:	fba3 7806 	umull	r7, r8, r3, r6
    708c:	19e4      	adds	r4, r4, r7
    708e:	bf2c      	ite	cs
    7090:	2601      	movcs	r6, #1
    7092:	2600      	movcc	r6, #0
    7094:	4446      	add	r6, r8
    7096:	6b95      	ldr	r5, [r2, #56]	; 0x38
    7098:	192d      	adds	r5, r5, r4
    709a:	bf2c      	ite	cs
    709c:	2401      	movcs	r4, #1
    709e:	2400      	movcc	r4, #0
    70a0:	4434      	add	r4, r6
    70a2:	6395      	str	r5, [r2, #56]	; 0x38
    70a4:	6bce      	ldr	r6, [r1, #60]	; 0x3c
    70a6:	fba3 7806 	umull	r7, r8, r3, r6
    70aa:	19e4      	adds	r4, r4, r7
    70ac:	bf2c      	ite	cs
    70ae:	2601      	movcs	r6, #1
    70b0:	2600      	movcc	r6, #0
    70b2:	4446      	add	r6, r8
    70b4:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
    70b6:	192d      	adds	r5, r5, r4
    70b8:	bf2c      	ite	cs
    70ba:	2401      	movcs	r4, #1
    70bc:	2400      	movcc	r4, #0
    70be:	4434      	add	r4, r6
    70c0:	63d5      	str	r5, [r2, #60]	; 0x3c
    for( ; i >= 16; i -= 16 )
    70c2:	3810      	subs	r0, #16
        MULADDC_CORE   MULADDC_CORE
    70c4:	3240      	adds	r2, #64	; 0x40
    70c6:	3140      	adds	r1, #64	; 0x40
    70c8:	e706      	b.n	6ed8 <mpi_mul_hlp+0x6>
    }

    for( ; i >= 8; i -= 8 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
    70ca:	680d      	ldr	r5, [r1, #0]
    70cc:	fba5 8903 	umull	r8, r9, r5, r3
    70d0:	eb14 0408 	adds.w	r4, r4, r8
    70d4:	bf2c      	ite	cs
    70d6:	2501      	movcs	r5, #1
    70d8:	2500      	movcc	r5, #0
    70da:	eb05 0709 	add.w	r7, r5, r9
    70de:	6816      	ldr	r6, [r2, #0]
    70e0:	1936      	adds	r6, r6, r4
    70e2:	bf2c      	ite	cs
    70e4:	2501      	movcs	r5, #1
    70e6:	2500      	movcc	r5, #0
    70e8:	443d      	add	r5, r7
    70ea:	6016      	str	r6, [r2, #0]
    70ec:	684e      	ldr	r6, [r1, #4]
    70ee:	fba3 6706 	umull	r6, r7, r3, r6
    70f2:	19ad      	adds	r5, r5, r6
    70f4:	bf2c      	ite	cs
    70f6:	2401      	movcs	r4, #1
    70f8:	2400      	movcc	r4, #0
    70fa:	4427      	add	r7, r4
    70fc:	6856      	ldr	r6, [r2, #4]
    70fe:	1975      	adds	r5, r6, r5
    7100:	bf2c      	ite	cs
    7102:	2401      	movcs	r4, #1
    7104:	2400      	movcc	r4, #0
    7106:	443c      	add	r4, r7
    7108:	6055      	str	r5, [r2, #4]
        MULADDC_CORE   MULADDC_CORE
    710a:	688e      	ldr	r6, [r1, #8]
    710c:	fba3 7806 	umull	r7, r8, r3, r6
    7110:	19e4      	adds	r4, r4, r7
    7112:	bf2c      	ite	cs
    7114:	2601      	movcs	r6, #1
    7116:	2600      	movcc	r6, #0
    7118:	4446      	add	r6, r8
    711a:	6895      	ldr	r5, [r2, #8]
    711c:	192d      	adds	r5, r5, r4
    711e:	bf2c      	ite	cs
    7120:	2401      	movcs	r4, #1
    7122:	2400      	movcc	r4, #0
    7124:	4434      	add	r4, r6
    7126:	6095      	str	r5, [r2, #8]
    7128:	68ce      	ldr	r6, [r1, #12]
    712a:	fba3 7806 	umull	r7, r8, r3, r6
    712e:	19e4      	adds	r4, r4, r7
    7130:	bf2c      	ite	cs
    7132:	2601      	movcs	r6, #1
    7134:	2600      	movcc	r6, #0
    7136:	4446      	add	r6, r8
    7138:	68d5      	ldr	r5, [r2, #12]
    713a:	192d      	adds	r5, r5, r4
    713c:	bf2c      	ite	cs
    713e:	2401      	movcs	r4, #1
    7140:	2400      	movcc	r4, #0
    7142:	4434      	add	r4, r6
    7144:	60d5      	str	r5, [r2, #12]

        MULADDC_CORE   MULADDC_CORE
    7146:	690e      	ldr	r6, [r1, #16]
    7148:	fba3 7806 	umull	r7, r8, r3, r6
    714c:	19e4      	adds	r4, r4, r7
    714e:	bf2c      	ite	cs
    7150:	2601      	movcs	r6, #1
    7152:	2600      	movcc	r6, #0
    7154:	4446      	add	r6, r8
    7156:	6915      	ldr	r5, [r2, #16]
    7158:	192d      	adds	r5, r5, r4
    715a:	bf2c      	ite	cs
    715c:	2401      	movcs	r4, #1
    715e:	2400      	movcc	r4, #0
    7160:	4434      	add	r4, r6
    7162:	6115      	str	r5, [r2, #16]
    7164:	694e      	ldr	r6, [r1, #20]
    7166:	fba3 7806 	umull	r7, r8, r3, r6
    716a:	19e4      	adds	r4, r4, r7
    716c:	bf2c      	ite	cs
    716e:	2601      	movcs	r6, #1
    7170:	2600      	movcc	r6, #0
    7172:	4446      	add	r6, r8
    7174:	6955      	ldr	r5, [r2, #20]
    7176:	192d      	adds	r5, r5, r4
    7178:	bf2c      	ite	cs
    717a:	2401      	movcs	r4, #1
    717c:	2400      	movcc	r4, #0
    717e:	4434      	add	r4, r6
    7180:	6155      	str	r5, [r2, #20]
        MULADDC_CORE   MULADDC_CORE
    7182:	698e      	ldr	r6, [r1, #24]
    7184:	fba3 7806 	umull	r7, r8, r3, r6
    7188:	19e4      	adds	r4, r4, r7
    718a:	bf2c      	ite	cs
    718c:	2601      	movcs	r6, #1
    718e:	2600      	movcc	r6, #0
    7190:	4446      	add	r6, r8
    7192:	6995      	ldr	r5, [r2, #24]
    7194:	192d      	adds	r5, r5, r4
    7196:	bf2c      	ite	cs
    7198:	2401      	movcs	r4, #1
    719a:	2400      	movcc	r4, #0
    719c:	4434      	add	r4, r6
    719e:	6195      	str	r5, [r2, #24]
    71a0:	69ce      	ldr	r6, [r1, #28]
    71a2:	fba3 7806 	umull	r7, r8, r3, r6
    71a6:	19e4      	adds	r4, r4, r7
    71a8:	bf2c      	ite	cs
    71aa:	2601      	movcs	r6, #1
    71ac:	2600      	movcc	r6, #0
    71ae:	4446      	add	r6, r8
    71b0:	69d5      	ldr	r5, [r2, #28]
    71b2:	192d      	adds	r5, r5, r4
    71b4:	bf2c      	ite	cs
    71b6:	2401      	movcs	r4, #1
    71b8:	2400      	movcc	r4, #0
    71ba:	4434      	add	r4, r6
    71bc:	61d5      	str	r5, [r2, #28]
    for( ; i >= 8; i -= 8 )
    71be:	3808      	subs	r0, #8
        MULADDC_CORE   MULADDC_CORE
    71c0:	3220      	adds	r2, #32
    71c2:	3120      	adds	r1, #32
    for( ; i >= 8; i -= 8 )
    71c4:	2807      	cmp	r0, #7
    71c6:	d880      	bhi.n	70ca <mpi_mul_hlp+0x1f8>
    71c8:	e011      	b.n	71ee <mpi_mul_hlp+0x31c>
    }

    for( ; i > 0; i-- )
    {
        MULADDC_INIT
        MULADDC_CORE
    71ca:	f851 6b04 	ldr.w	r6, [r1], #4
    71ce:	fba6 7803 	umull	r7, r8, r6, r3
    71d2:	19e4      	adds	r4, r4, r7
    71d4:	bf2c      	ite	cs
    71d6:	2601      	movcs	r6, #1
    71d8:	2600      	movcc	r6, #0
    71da:	4446      	add	r6, r8
    71dc:	6815      	ldr	r5, [r2, #0]
    71de:	192d      	adds	r5, r5, r4
    71e0:	bf2c      	ite	cs
    71e2:	2401      	movcs	r4, #1
    71e4:	2400      	movcc	r4, #0
    71e6:	4434      	add	r4, r6
    71e8:	f842 5b04 	str.w	r5, [r2], #4
    for( ; i > 0; i-- )
    71ec:	3801      	subs	r0, #1
    71ee:	2800      	cmp	r0, #0
    71f0:	d1eb      	bne.n	71ca <mpi_mul_hlp+0x2f8>
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
    71f2:	6813      	ldr	r3, [r2, #0]
    71f4:	4423      	add	r3, r4
    71f6:	f842 3b04 	str.w	r3, [r2], #4
    71fa:	42a3      	cmp	r3, r4
    71fc:	bf34      	ite	cc
    71fe:	2401      	movcc	r4, #1
    7200:	2400      	movcs	r4, #0
    }
    while( c != 0 );
    7202:	d3f6      	bcc.n	71f2 <mpi_mul_hlp+0x320>
}
    7204:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    7208:	4770      	bx	lr

0000720a <mbedtls_int_div_int>:
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
    720a:	b1e2      	cbz	r2, 7246 <mbedtls_int_div_int+0x3c>
{
    720c:	b570      	push	{r4, r5, r6, lr}
    720e:	4616      	mov	r6, r2
    if( 0 == d || u1 >= d )
    7210:	4282      	cmp	r2, r0
    7212:	d911      	bls.n	7238 <mbedtls_int_div_int+0x2e>
    7214:	461d      	mov	r5, r3
    7216:	460c      	mov	r4, r1
    7218:	4601      	mov	r1, r0
    }

#if defined(MBEDTLS_HAVE_UDBL)
    dividend  = (mbedtls_t_udbl) u1 << biL;
    dividend |= (mbedtls_t_udbl) u0;
    quotient = dividend / d;
    721a:	2300      	movs	r3, #0
    721c:	4620      	mov	r0, r4
    721e:	f7f8 ff91 	bl	144 <__aeabi_uldivmod>
    if( quotient > ( (mbedtls_t_udbl) 1 << biL ) - 1 )
    7222:	2901      	cmp	r1, #1
    7224:	bf08      	it	eq
    7226:	2800      	cmpeq	r0, #0
    7228:	d301      	bcc.n	722e <mbedtls_int_div_int+0x24>
        quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;
    722a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

    if( r != NULL )
    722e:	b115      	cbz	r5, 7236 <mbedtls_int_div_int+0x2c>
        *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );
    7230:	fb06 4410 	mls	r4, r6, r0, r4
    7234:	602c      	str	r4, [r5, #0]

    quotient = q1 * radix + q0;

    return quotient;
#endif
}
    7236:	bd70      	pop	{r4, r5, r6, pc}
        if (r != NULL) *r = ~0;
    7238:	b113      	cbz	r3, 7240 <mbedtls_int_div_int+0x36>
    723a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    723e:	601a      	str	r2, [r3, #0]
        return ( ~0 );
    7240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7244:	e7f7      	b.n	7236 <mbedtls_int_div_int+0x2c>
        if (r != NULL) *r = ~0;
    7246:	b113      	cbz	r3, 724e <mbedtls_int_div_int+0x44>
    7248:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    724c:	601a      	str	r2, [r3, #0]
        return ( ~0 );
    724e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    7252:	4770      	bx	lr

00007254 <mpi_montg_init>:

/*
 * Fast Montgomery initialization (thanks to Tom St Denis)
 */
static void mpi_montg_init( mbedtls_mpi_uint *mm, const mbedtls_mpi *N )
{
    7254:	b410      	push	{r4}
    mbedtls_mpi_uint x, m0 = N->p[0];
    7256:	688b      	ldr	r3, [r1, #8]
    7258:	681c      	ldr	r4, [r3, #0]
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;
    725a:	1ca3      	adds	r3, r4, #2
    725c:	005b      	lsls	r3, r3, #1
    725e:	f003 0308 	and.w	r3, r3, #8
    7262:	4423      	add	r3, r4

    for( i = biL; i >= 8; i /= 2 )
    7264:	2120      	movs	r1, #32
    7266:	2907      	cmp	r1, #7
    7268:	d907      	bls.n	727a <mpi_montg_init+0x26>
        x *= ( 2 - ( m0 * x ) );
    726a:	fb04 f203 	mul.w	r2, r4, r3
    726e:	f1c2 0202 	rsb	r2, r2, #2
    7272:	fb02 f303 	mul.w	r3, r2, r3
    for( i = biL; i >= 8; i /= 2 )
    7276:	0849      	lsrs	r1, r1, #1
    7278:	e7f5      	b.n	7266 <mpi_montg_init+0x12>

    *mm = ~x + 1;
    727a:	425b      	negs	r3, r3
    727c:	6003      	str	r3, [r0, #0]
}
    727e:	bc10      	pop	{r4}
    7280:	4770      	bx	lr

00007282 <mbedtls_mpi_zeroize>:
{
    7282:	b508      	push	{r3, lr}
    mbedtls_platform_zeroize( v, ciL * n );
    7284:	0089      	lsls	r1, r1, #2
    7286:	f7fc fcff 	bl	3c88 <mbedtls_platform_zeroize>
}
    728a:	bd08      	pop	{r3, pc}

0000728c <mpi_montmul>:
 *                      Note that unlike the usual convention in the library
 *                      for `const mbedtls_mpi*`, the content of T can change.
 */
static void mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
    728c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7290:	b083      	sub	sp, #12
    7292:	4681      	mov	r9, r0
    7294:	468b      	mov	fp, r1
    7296:	4692      	mov	sl, r2
    7298:	9301      	str	r3, [sp, #4]
    729a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    memset( T->p, 0, T->n * ciL );
    729c:	6862      	ldr	r2, [r4, #4]
    729e:	0092      	lsls	r2, r2, #2
    72a0:	2100      	movs	r1, #0
    72a2:	68a0      	ldr	r0, [r4, #8]
    72a4:	f7ff f9e6 	bl	6674 <memset>

    d = T->p;
    72a8:	68a4      	ldr	r4, [r4, #8]
    n = N->n;
    72aa:	f8da 7004 	ldr.w	r7, [sl, #4]
    m = ( B->n < n ) ? B->n : n;
    72ae:	f8db 3004 	ldr.w	r3, [fp, #4]
    72b2:	42bb      	cmp	r3, r7
    72b4:	bf28      	it	cs
    72b6:	463b      	movcs	r3, r7
    72b8:	9300      	str	r3, [sp, #0]

    for( i = 0; i < n; i++ )
    72ba:	2600      	movs	r6, #0
    72bc:	46b8      	mov	r8, r7
    72be:	4546      	cmp	r6, r8
    72c0:	d221      	bcs.n	7306 <mpi_montmul+0x7a>
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
    72c2:	f8d9 3008 	ldr.w	r3, [r9, #8]
    72c6:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    72ca:	6823      	ldr	r3, [r4, #0]
    72cc:	f8db 1008 	ldr.w	r1, [fp, #8]
    72d0:	680d      	ldr	r5, [r1, #0]
    72d2:	fb07 3505 	mla	r5, r7, r5, r3
    72d6:	9b01      	ldr	r3, [sp, #4]
    72d8:	fb03 f505 	mul.w	r5, r3, r5

        mpi_mul_hlp( m, B->p, d, u0 );
    72dc:	463b      	mov	r3, r7
    72de:	4622      	mov	r2, r4
    72e0:	9800      	ldr	r0, [sp, #0]
    72e2:	f7ff fdf6 	bl	6ed2 <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
    72e6:	462b      	mov	r3, r5
    72e8:	4622      	mov	r2, r4
    72ea:	f8da 1008 	ldr.w	r1, [sl, #8]
    72ee:	4640      	mov	r0, r8
    72f0:	f7ff fdef 	bl	6ed2 <mpi_mul_hlp>

        *d++ = u0; d[n + 1] = 0;
    72f4:	f844 7b04 	str.w	r7, [r4], #4
    72f8:	f108 0301 	add.w	r3, r8, #1
    72fc:	2200      	movs	r2, #0
    72fe:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for( i = 0; i < n; i++ )
    7302:	3601      	adds	r6, #1
    7304:	e7db      	b.n	72be <mpi_montmul+0x32>
    7306:	4647      	mov	r7, r8
     * plus N. We now potentially subtract N, avoiding leaking whether the
     * subtraction is performed through side channels. */

    /* Copy the n least significant limbs of d to A, so that
     * A = d if d < N (recall that N has n limbs). */
    memcpy( A->p, d, n * ciL );
    7308:	00ba      	lsls	r2, r7, #2
    730a:	4621      	mov	r1, r4
    730c:	f8d9 0008 	ldr.w	r0, [r9, #8]
    7310:	f7ff f98d 	bl	662e <memcpy>
    /* If d >= N then we want to set A to d - N. To prevent timing attacks,
     * do the calculation without using conditional tests. */
    /* Set d to d0 + (2^biL)^n - N where d0 is the current value of d. */
    d[n] += 1;
    7314:	f854 3028 	ldr.w	r3, [r4, r8, lsl #2]
    7318:	3301      	adds	r3, #1
    731a:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    d[n] -= mpi_sub_hlp( n, d, N->p );
    731e:	f8da 2008 	ldr.w	r2, [sl, #8]
    7322:	4621      	mov	r1, r4
    7324:	4640      	mov	r0, r8
    7326:	f7ff fdba 	bl	6e9e <mpi_sub_hlp>
    732a:	f854 3028 	ldr.w	r3, [r4, r8, lsl #2]
    732e:	1a1b      	subs	r3, r3, r0
    7330:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
     * so d[n] == 0 and we want to keep A as it is.
     * If d0 >= N then d >= (2^biL)^n, and d <= (2^biL)^n + N < 2 * (2^biL)^n
     * so d[n] == 1 and we want to set A to the result of the subtraction
     * which is d - (2^biL)^n, i.e. the n least significant limbs of d.
     * This exactly corresponds to a conditional assignment. */
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    7334:	b2db      	uxtb	r3, r3
    7336:	4622      	mov	r2, r4
    7338:	f8d9 1008 	ldr.w	r1, [r9, #8]
    733c:	4640      	mov	r0, r8
    733e:	f7ff fd62 	bl	6e06 <mpi_safe_cond_assign>
}
    7342:	b003      	add	sp, #12
    7344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00007348 <mpi_montred>:
 *
 * See mpi_montmul() regarding constraints and guarantees on the parameters.
 */
static void mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N,
                         mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    7348:	b510      	push	{r4, lr}
    734a:	b086      	sub	sp, #24
    mbedtls_mpi_uint z = 1;
    734c:	2401      	movs	r4, #1
    734e:	9405      	str	r4, [sp, #20]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    7350:	9402      	str	r4, [sp, #8]
    7352:	9403      	str	r4, [sp, #12]
    U.p = &z;
    7354:	ac05      	add	r4, sp, #20
    7356:	9404      	str	r4, [sp, #16]

    mpi_montmul( A, &U, N, mm, T );
    7358:	9300      	str	r3, [sp, #0]
    735a:	4613      	mov	r3, r2
    735c:	460a      	mov	r2, r1
    735e:	a902      	add	r1, sp, #8
    7360:	f7ff ff94 	bl	728c <mpi_montmul>
}
    7364:	b006      	add	sp, #24
    7366:	bd10      	pop	{r4, pc}

00007368 <mbedtls_mpi_init>:
    X->s = 1;
    7368:	2301      	movs	r3, #1
    736a:	6003      	str	r3, [r0, #0]
    X->n = 0;
    736c:	2300      	movs	r3, #0
    736e:	6043      	str	r3, [r0, #4]
    X->p = NULL;
    7370:	6083      	str	r3, [r0, #8]
}
    7372:	4770      	bx	lr

00007374 <mbedtls_mpi_free>:
    if( X == NULL )
    7374:	b178      	cbz	r0, 7396 <mbedtls_mpi_free+0x22>
{
    7376:	b510      	push	{r4, lr}
    7378:	4604      	mov	r4, r0
    if( X->p != NULL )
    737a:	6880      	ldr	r0, [r0, #8]
    737c:	b128      	cbz	r0, 738a <mbedtls_mpi_free+0x16>
        mbedtls_mpi_zeroize( X->p, X->n );
    737e:	6861      	ldr	r1, [r4, #4]
    7380:	f7ff ff7f 	bl	7282 <mbedtls_mpi_zeroize>
        mbedtls_free( X->p );
    7384:	68a0      	ldr	r0, [r4, #8]
    7386:	f7fc fc6d 	bl	3c64 <mbedtls_free>
    X->s = 1;
    738a:	2301      	movs	r3, #1
    738c:	6023      	str	r3, [r4, #0]
    X->n = 0;
    738e:	2300      	movs	r3, #0
    7390:	6063      	str	r3, [r4, #4]
    X->p = NULL;
    7392:	60a3      	str	r3, [r4, #8]
}
    7394:	bd10      	pop	{r4, pc}
    7396:	4770      	bx	lr

00007398 <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    7398:	f242 7310 	movw	r3, #10000	; 0x2710
    739c:	4299      	cmp	r1, r3
    739e:	d81e      	bhi.n	73de <mbedtls_mpi_grow+0x46>
    if( X->n < nblimbs )
    73a0:	6843      	ldr	r3, [r0, #4]
    73a2:	428b      	cmp	r3, r1
    73a4:	d301      	bcc.n	73aa <mbedtls_mpi_grow+0x12>
    return( 0 );
    73a6:	2000      	movs	r0, #0
}
    73a8:	4770      	bx	lr
{
    73aa:	b570      	push	{r4, r5, r6, lr}
    73ac:	460d      	mov	r5, r1
    73ae:	4604      	mov	r4, r0
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
    73b0:	2104      	movs	r1, #4
    73b2:	4628      	mov	r0, r5
    73b4:	f7fc fc4e 	bl	3c54 <mbedtls_calloc>
    73b8:	4606      	mov	r6, r0
    73ba:	b198      	cbz	r0, 73e4 <mbedtls_mpi_grow+0x4c>
        if( X->p != NULL )
    73bc:	68a1      	ldr	r1, [r4, #8]
    73be:	b151      	cbz	r1, 73d6 <mbedtls_mpi_grow+0x3e>
            memcpy( p, X->p, X->n * ciL );
    73c0:	6862      	ldr	r2, [r4, #4]
    73c2:	0092      	lsls	r2, r2, #2
    73c4:	f7ff f933 	bl	662e <memcpy>
            mbedtls_mpi_zeroize( X->p, X->n );
    73c8:	6861      	ldr	r1, [r4, #4]
    73ca:	68a0      	ldr	r0, [r4, #8]
    73cc:	f7ff ff59 	bl	7282 <mbedtls_mpi_zeroize>
            mbedtls_free( X->p );
    73d0:	68a0      	ldr	r0, [r4, #8]
    73d2:	f7fc fc47 	bl	3c64 <mbedtls_free>
        X->n = nblimbs;
    73d6:	6065      	str	r5, [r4, #4]
        X->p = p;
    73d8:	60a6      	str	r6, [r4, #8]
    return( 0 );
    73da:	2000      	movs	r0, #0
}
    73dc:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    73de:	f06f 000f 	mvn.w	r0, #15
    73e2:	4770      	bx	lr
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    73e4:	f06f 000f 	mvn.w	r0, #15
    73e8:	e7f8      	b.n	73dc <mbedtls_mpi_grow+0x44>

000073ea <mbedtls_mpi_copy>:
{
    73ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( X == Y )
    73ec:	4288      	cmp	r0, r1
    73ee:	d02c      	beq.n	744a <mbedtls_mpi_copy+0x60>
    73f0:	460d      	mov	r5, r1
    73f2:	4606      	mov	r6, r0
    if( Y->n == 0 )
    73f4:	684b      	ldr	r3, [r1, #4]
    73f6:	b13b      	cbz	r3, 7408 <mbedtls_mpi_copy+0x1e>
    for( i = Y->n - 1; i > 0; i-- )
    73f8:	3b01      	subs	r3, #1
    73fa:	b14b      	cbz	r3, 7410 <mbedtls_mpi_copy+0x26>
        if( Y->p[i] != 0 )
    73fc:	68aa      	ldr	r2, [r5, #8]
    73fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    7402:	b92a      	cbnz	r2, 7410 <mbedtls_mpi_copy+0x26>
    for( i = Y->n - 1; i > 0; i-- )
    7404:	3b01      	subs	r3, #1
    7406:	e7f8      	b.n	73fa <mbedtls_mpi_copy+0x10>
        mbedtls_mpi_free( X );
    7408:	f7ff ffb4 	bl	7374 <mbedtls_mpi_free>
        return( 0 );
    740c:	2700      	movs	r7, #0
    740e:	e01a      	b.n	7446 <mbedtls_mpi_copy+0x5c>
    i++;
    7410:	1c5c      	adds	r4, r3, #1
    X->s = Y->s;
    7412:	682b      	ldr	r3, [r5, #0]
    7414:	6033      	str	r3, [r6, #0]
    if( X->n < i )
    7416:	6872      	ldr	r2, [r6, #4]
    7418:	42a2      	cmp	r2, r4
    741a:	d206      	bcs.n	742a <mbedtls_mpi_copy+0x40>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
    741c:	4621      	mov	r1, r4
    741e:	4630      	mov	r0, r6
    7420:	f7ff ffba 	bl	7398 <mbedtls_mpi_grow>
    7424:	4607      	mov	r7, r0
    7426:	b148      	cbz	r0, 743c <mbedtls_mpi_copy+0x52>
    7428:	e00d      	b.n	7446 <mbedtls_mpi_copy+0x5c>
        memset( X->p + i, 0, ( X->n - i ) * ciL );
    742a:	68b0      	ldr	r0, [r6, #8]
    742c:	1b12      	subs	r2, r2, r4
    742e:	0092      	lsls	r2, r2, #2
    7430:	2100      	movs	r1, #0
    7432:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    7436:	f7ff f91d 	bl	6674 <memset>
    int ret = 0;
    743a:	2700      	movs	r7, #0
    memcpy( X->p, Y->p, i * ciL );
    743c:	00a2      	lsls	r2, r4, #2
    743e:	68a9      	ldr	r1, [r5, #8]
    7440:	68b0      	ldr	r0, [r6, #8]
    7442:	f7ff f8f4 	bl	662e <memcpy>
}
    7446:	4638      	mov	r0, r7
    7448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return( 0 );
    744a:	2700      	movs	r7, #0
    744c:	e7fb      	b.n	7446 <mbedtls_mpi_copy+0x5c>

0000744e <mbedtls_mpi_lset>:
{
    744e:	b570      	push	{r4, r5, r6, lr}
    7450:	4604      	mov	r4, r0
    7452:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    7454:	2101      	movs	r1, #1
    7456:	f7ff ff9f 	bl	7398 <mbedtls_mpi_grow>
    745a:	4605      	mov	r5, r0
    745c:	b108      	cbz	r0, 7462 <mbedtls_mpi_lset+0x14>
}
    745e:	4628      	mov	r0, r5
    7460:	bd70      	pop	{r4, r5, r6, pc}
    memset( X->p, 0, X->n * ciL );
    7462:	6862      	ldr	r2, [r4, #4]
    7464:	0092      	lsls	r2, r2, #2
    7466:	2100      	movs	r1, #0
    7468:	68a0      	ldr	r0, [r4, #8]
    746a:	f7ff f903 	bl	6674 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
    746e:	68a3      	ldr	r3, [r4, #8]
    7470:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    7474:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
    7478:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
    747a:	2e00      	cmp	r6, #0
    747c:	db02      	blt.n	7484 <mbedtls_mpi_lset+0x36>
    747e:	2301      	movs	r3, #1
    7480:	6023      	str	r3, [r4, #0]
    return( ret );
    7482:	e7ec      	b.n	745e <mbedtls_mpi_lset+0x10>
    X->s    = ( z < 0 ) ? -1 : 1;
    7484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7488:	e7fa      	b.n	7480 <mbedtls_mpi_lset+0x32>

0000748a <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
    748a:	6843      	ldr	r3, [r0, #4]
    748c:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    7490:	d209      	bcs.n	74a6 <mbedtls_mpi_get_bit+0x1c>
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
    7492:	6883      	ldr	r3, [r0, #8]
    7494:	094a      	lsrs	r2, r1, #5
    7496:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    749a:	f001 011f 	and.w	r1, r1, #31
    749e:	40c8      	lsrs	r0, r1
    74a0:	f000 0001 	and.w	r0, r0, #1
    74a4:	4770      	bx	lr
        return( 0 );
    74a6:	2000      	movs	r0, #0
}
    74a8:	4770      	bx	lr

000074aa <mbedtls_mpi_bitlen>:
{
    74aa:	b510      	push	{r4, lr}
    if( X->n == 0 )
    74ac:	6844      	ldr	r4, [r0, #4]
    74ae:	b184      	cbz	r4, 74d2 <mbedtls_mpi_bitlen+0x28>
    for( i = X->n - 1; i > 0; i-- )
    74b0:	3c01      	subs	r4, #1
    74b2:	b12c      	cbz	r4, 74c0 <mbedtls_mpi_bitlen+0x16>
        if( X->p[i] != 0 )
    74b4:	6883      	ldr	r3, [r0, #8]
    74b6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    74ba:	b90b      	cbnz	r3, 74c0 <mbedtls_mpi_bitlen+0x16>
    for( i = X->n - 1; i > 0; i-- )
    74bc:	3c01      	subs	r4, #1
    74be:	e7f8      	b.n	74b2 <mbedtls_mpi_bitlen+0x8>
    j = biL - mbedtls_clz( X->p[i] );
    74c0:	6883      	ldr	r3, [r0, #8]
    74c2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    74c6:	f7ff fcb2 	bl	6e2e <mbedtls_clz>
    74ca:	f1c0 0020 	rsb	r0, r0, #32
    return( ( i * biL ) + j );
    74ce:	eb00 1444 	add.w	r4, r0, r4, lsl #5
}
    74d2:	4620      	mov	r0, r4
    74d4:	bd10      	pop	{r4, pc}

000074d6 <mbedtls_mpi_size>:
{
    74d6:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
    74d8:	f7ff ffe7 	bl	74aa <mbedtls_mpi_bitlen>
    74dc:	3007      	adds	r0, #7
}
    74de:	08c0      	lsrs	r0, r0, #3
    74e0:	bd08      	pop	{r3, pc}

000074e2 <mbedtls_mpi_read_binary>:
{
    74e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    74e6:	4605      	mov	r5, r0
    74e8:	4688      	mov	r8, r1
    74ea:	4616      	mov	r6, r2
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
    74ec:	f012 0103 	ands.w	r1, r2, #3
    74f0:	bf18      	it	ne
    74f2:	2101      	movne	r1, #1
    74f4:	eb01 0492 	add.w	r4, r1, r2, lsr #2
    size_t const overhead = ( limbs * ciL ) - buflen;
    74f8:	ebc2 0984 	rsb	r9, r2, r4, lsl #2
    if( X->n != limbs )
    74fc:	6843      	ldr	r3, [r0, #4]
    74fe:	42a3      	cmp	r3, r4
    7500:	d00a      	beq.n	7518 <mbedtls_mpi_read_binary+0x36>
        mbedtls_mpi_free( X );
    7502:	f7ff ff37 	bl	7374 <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
    7506:	4628      	mov	r0, r5
    7508:	f7ff ff2e 	bl	7368 <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    750c:	4621      	mov	r1, r4
    750e:	4628      	mov	r0, r5
    7510:	f7ff ff42 	bl	7398 <mbedtls_mpi_grow>
    7514:	4607      	mov	r7, r0
    7516:	b990      	cbnz	r0, 753e <mbedtls_mpi_read_binary+0x5c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
    7518:	2100      	movs	r1, #0
    751a:	4628      	mov	r0, r5
    751c:	f7ff ff97 	bl	744e <mbedtls_mpi_lset>
    7520:	4607      	mov	r7, r0
    7522:	b960      	cbnz	r0, 753e <mbedtls_mpi_read_binary+0x5c>
    if( buf != NULL )
    7524:	f1b8 0f00 	cmp.w	r8, #0
    7528:	d009      	beq.n	753e <mbedtls_mpi_read_binary+0x5c>
        Xp = (unsigned char*) X->p;
    752a:	68a8      	ldr	r0, [r5, #8]
        memcpy( Xp + overhead, buf, buflen );
    752c:	4632      	mov	r2, r6
    752e:	4641      	mov	r1, r8
    7530:	4448      	add	r0, r9
    7532:	f7ff f87c 	bl	662e <memcpy>
        mpi_bigendian_to_host( X->p, limbs );
    7536:	4621      	mov	r1, r4
    7538:	68a8      	ldr	r0, [r5, #8]
    753a:	f7ff fc98 	bl	6e6e <mpi_bigendian_to_host>
}
    753e:	4638      	mov	r0, r7
    7540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00007544 <mbedtls_mpi_write_binary>:
{
    7544:	b570      	push	{r4, r5, r6, lr}
    7546:	4605      	mov	r5, r0
    7548:	4608      	mov	r0, r1
    stored_bytes = X->n * ciL;
    754a:	686e      	ldr	r6, [r5, #4]
    754c:	00b6      	lsls	r6, r6, #2
    if( stored_bytes < buflen )
    754e:	4296      	cmp	r6, r2
    7550:	d30f      	bcc.n	7572 <mbedtls_mpi_write_binary+0x2e>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
    7552:	4613      	mov	r3, r2
    7554:	42b3      	cmp	r3, r6
    7556:	d213      	bcs.n	7580 <mbedtls_mpi_write_binary+0x3c>
            if( GET_BYTE( X, i ) != 0 )
    7558:	68ac      	ldr	r4, [r5, #8]
    755a:	f023 0103 	bic.w	r1, r3, #3
    755e:	5861      	ldr	r1, [r4, r1]
    7560:	f003 0403 	and.w	r4, r3, #3
    7564:	00e4      	lsls	r4, r4, #3
    7566:	40e1      	lsrs	r1, r4
    7568:	f011 0fff 	tst.w	r1, #255	; 0xff
    756c:	d11a      	bne.n	75a4 <mbedtls_mpi_write_binary+0x60>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
    756e:	3301      	adds	r3, #1
    7570:	e7f0      	b.n	7554 <mbedtls_mpi_write_binary+0x10>
        p = buf + buflen - stored_bytes;
    7572:	1b92      	subs	r2, r2, r6
    7574:	188c      	adds	r4, r1, r2
        memset( buf, 0, buflen - stored_bytes );
    7576:	2100      	movs	r1, #0
    7578:	f7ff f87c 	bl	6674 <memset>
        p = buf + buflen - stored_bytes;
    757c:	4620      	mov	r0, r4
        bytes_to_copy = stored_bytes;
    757e:	4632      	mov	r2, r6
    for( i = 0; i < bytes_to_copy; i++ )
    7580:	2300      	movs	r3, #0
    7582:	429a      	cmp	r2, r3
    7584:	d90c      	bls.n	75a0 <mbedtls_mpi_write_binary+0x5c>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    7586:	68ac      	ldr	r4, [r5, #8]
    7588:	f023 0103 	bic.w	r1, r3, #3
    758c:	5864      	ldr	r4, [r4, r1]
    758e:	f003 0103 	and.w	r1, r3, #3
    7592:	00c9      	lsls	r1, r1, #3
    7594:	40cc      	lsrs	r4, r1
    7596:	1ad1      	subs	r1, r2, r3
    7598:	3901      	subs	r1, #1
    759a:	5444      	strb	r4, [r0, r1]
    for( i = 0; i < bytes_to_copy; i++ )
    759c:	3301      	adds	r3, #1
    759e:	e7f0      	b.n	7582 <mbedtls_mpi_write_binary+0x3e>
    return( 0 );
    75a0:	2000      	movs	r0, #0
}
    75a2:	bd70      	pop	{r4, r5, r6, pc}
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    75a4:	f06f 0007 	mvn.w	r0, #7
    75a8:	e7fb      	b.n	75a2 <mbedtls_mpi_write_binary+0x5e>

000075aa <mbedtls_mpi_shift_l>:
{
    75aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    75ac:	4605      	mov	r5, r0
    75ae:	460f      	mov	r7, r1
    v0 = count / (biL    );
    75b0:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
    75b2:	f001 061f 	and.w	r6, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
    75b6:	f7ff ff78 	bl	74aa <mbedtls_mpi_bitlen>
    75ba:	4438      	add	r0, r7
    if( X->n * biL < i )
    75bc:	686b      	ldr	r3, [r5, #4]
    75be:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
    75c2:	d810      	bhi.n	75e6 <mbedtls_mpi_shift_l+0x3c>
    if( v0 > 0 )
    75c4:	2f1f      	cmp	r7, #31
    75c6:	d925      	bls.n	7614 <mbedtls_mpi_shift_l+0x6a>
        for( i = X->n; i > v0; i-- )
    75c8:	686b      	ldr	r3, [r5, #4]
    75ca:	42a3      	cmp	r3, r4
    75cc:	d920      	bls.n	7610 <mbedtls_mpi_shift_l+0x66>
            X->p[i - 1] = X->p[i - v0 - 1];
    75ce:	68a9      	ldr	r1, [r5, #8]
    75d0:	1b1a      	subs	r2, r3, r4
    75d2:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
    75d6:	181f      	adds	r7, r3, r0
    75d8:	4402      	add	r2, r0
    75da:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    75de:	f841 2027 	str.w	r2, [r1, r7, lsl #2]
        for( i = X->n; i > v0; i-- )
    75e2:	3b01      	subs	r3, #1
    75e4:	e7f1      	b.n	75ca <mbedtls_mpi_shift_l+0x20>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
    75e6:	f010 011f 	ands.w	r1, r0, #31
    75ea:	bf18      	it	ne
    75ec:	2101      	movne	r1, #1
    75ee:	eb01 1150 	add.w	r1, r1, r0, lsr #5
    75f2:	4628      	mov	r0, r5
    75f4:	f7ff fed0 	bl	7398 <mbedtls_mpi_grow>
    75f8:	4603      	mov	r3, r0
    75fa:	2800      	cmp	r0, #0
    75fc:	d0e2      	beq.n	75c4 <mbedtls_mpi_shift_l+0x1a>
    75fe:	e00b      	b.n	7618 <mbedtls_mpi_shift_l+0x6e>
            X->p[i - 1] = 0;
    7600:	68a9      	ldr	r1, [r5, #8]
    7602:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    7606:	3a01      	subs	r2, #1
    7608:	2000      	movs	r0, #0
    760a:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
        for( ; i > 0; i-- )
    760e:	3b01      	subs	r3, #1
    7610:	2b00      	cmp	r3, #0
    7612:	d1f5      	bne.n	7600 <mbedtls_mpi_shift_l+0x56>
    if( t1 > 0 )
    7614:	b9ce      	cbnz	r6, 764a <mbedtls_mpi_shift_l+0xa0>
    ret = 0;
    7616:	2300      	movs	r3, #0
}
    7618:	4618      	mov	r0, r3
    761a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            r1 = X->p[i] >> (biL - t1);
    761c:	68a8      	ldr	r0, [r5, #8]
    761e:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
    7622:	f1c6 0320 	rsb	r3, r6, #32
            X->p[i] <<= t1;
    7626:	fa01 f206 	lsl.w	r2, r1, r6
    762a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
            X->p[i] |= r0;
    762e:	68a8      	ldr	r0, [r5, #8]
    7630:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    7634:	433a      	orrs	r2, r7
    7636:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
        for( i = v0; i < X->n; i++ )
    763a:	3401      	adds	r4, #1
            r0 = r1;
    763c:	fa21 f703 	lsr.w	r7, r1, r3
        for( i = v0; i < X->n; i++ )
    7640:	6869      	ldr	r1, [r5, #4]
    7642:	42a1      	cmp	r1, r4
    7644:	d8ea      	bhi.n	761c <mbedtls_mpi_shift_l+0x72>
    ret = 0;
    7646:	2300      	movs	r3, #0
    return( ret );
    7648:	e7e6      	b.n	7618 <mbedtls_mpi_shift_l+0x6e>
    mbedtls_mpi_uint r0 = 0, r1;
    764a:	2700      	movs	r7, #0
    764c:	e7f8      	b.n	7640 <mbedtls_mpi_shift_l+0x96>

0000764e <mbedtls_mpi_shift_r>:
{
    764e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    v0 = count /  biL;
    7650:	094c      	lsrs	r4, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    7652:	6843      	ldr	r3, [r0, #4]
    7654:	42a3      	cmp	r3, r4
    7656:	d323      	bcc.n	76a0 <mbedtls_mpi_shift_r+0x52>
    7658:	f001 071f 	and.w	r7, r1, #31
    765c:	d01e      	beq.n	769c <mbedtls_mpi_shift_r+0x4e>
    if( v0 > 0 )
    765e:	291f      	cmp	r1, #31
    7660:	d822      	bhi.n	76a8 <mbedtls_mpi_shift_r+0x5a>
    if( v1 > 0 )
    7662:	2f00      	cmp	r7, #0
    7664:	d038      	beq.n	76d8 <mbedtls_mpi_shift_r+0x8a>
        for( i = X->n; i > 0; i-- )
    7666:	6842      	ldr	r2, [r0, #4]
    mbedtls_mpi_uint r0 = 0, r1;
    7668:	f04f 0c00 	mov.w	ip, #0
        for( i = X->n; i > 0; i-- )
    766c:	b392      	cbz	r2, 76d4 <mbedtls_mpi_shift_r+0x86>
            r1 = X->p[i - 1] << (biL - v1);
    766e:	6886      	ldr	r6, [r0, #8]
    7670:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    7674:	3b01      	subs	r3, #1
    7676:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
    767a:	f1c7 0120 	rsb	r1, r7, #32
            X->p[i - 1] >>= v1;
    767e:	fa25 f407 	lsr.w	r4, r5, r7
    7682:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
            X->p[i - 1] |= r0;
    7686:	6886      	ldr	r6, [r0, #8]
    7688:	f856 4023 	ldr.w	r4, [r6, r3, lsl #2]
    768c:	ea44 040c 	orr.w	r4, r4, ip
    7690:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
        for( i = X->n; i > 0; i-- )
    7694:	3a01      	subs	r2, #1
            r0 = r1;
    7696:	fa05 fc01 	lsl.w	ip, r5, r1
    769a:	e7e7      	b.n	766c <mbedtls_mpi_shift_r+0x1e>
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    769c:	2f00      	cmp	r7, #0
    769e:	d0de      	beq.n	765e <mbedtls_mpi_shift_r+0x10>
        return mbedtls_mpi_lset( X, 0 );
    76a0:	2100      	movs	r1, #0
    76a2:	f7ff fed4 	bl	744e <mbedtls_mpi_lset>
    76a6:	e018      	b.n	76da <mbedtls_mpi_shift_r+0x8c>
        for( i = 0; i < X->n - v0; i++ )
    76a8:	2300      	movs	r3, #0
    76aa:	6842      	ldr	r2, [r0, #4]
    76ac:	1b12      	subs	r2, r2, r4
    76ae:	429a      	cmp	r2, r3
    76b0:	d907      	bls.n	76c2 <mbedtls_mpi_shift_r+0x74>
            X->p[i] = X->p[i + v0];
    76b2:	6882      	ldr	r2, [r0, #8]
    76b4:	1919      	adds	r1, r3, r4
    76b6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    76ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
    76be:	3301      	adds	r3, #1
    76c0:	e7f3      	b.n	76aa <mbedtls_mpi_shift_r+0x5c>
        for( ; i < X->n; i++ )
    76c2:	6842      	ldr	r2, [r0, #4]
    76c4:	429a      	cmp	r2, r3
    76c6:	d9cc      	bls.n	7662 <mbedtls_mpi_shift_r+0x14>
            X->p[i] = 0;
    76c8:	6882      	ldr	r2, [r0, #8]
    76ca:	2100      	movs	r1, #0
    76cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for( ; i < X->n; i++ )
    76d0:	3301      	adds	r3, #1
    76d2:	e7f6      	b.n	76c2 <mbedtls_mpi_shift_r+0x74>
    return( 0 );
    76d4:	2000      	movs	r0, #0
    76d6:	e000      	b.n	76da <mbedtls_mpi_shift_r+0x8c>
    76d8:	2000      	movs	r0, #0
}
    76da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000076dc <mbedtls_mpi_cmp_abs>:
{
    76dc:	b430      	push	{r4, r5}
    for( i = X->n; i > 0; i-- )
    76de:	6843      	ldr	r3, [r0, #4]
    76e0:	b143      	cbz	r3, 76f4 <mbedtls_mpi_cmp_abs+0x18>
        if( X->p[i - 1] != 0 )
    76e2:	6884      	ldr	r4, [r0, #8]
    76e4:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    76e8:	3a01      	subs	r2, #1
    76ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    76ee:	b90a      	cbnz	r2, 76f4 <mbedtls_mpi_cmp_abs+0x18>
    for( i = X->n; i > 0; i-- )
    76f0:	3b01      	subs	r3, #1
    76f2:	e7f5      	b.n	76e0 <mbedtls_mpi_cmp_abs+0x4>
    for( j = Y->n; j > 0; j-- )
    76f4:	684a      	ldr	r2, [r1, #4]
    76f6:	b142      	cbz	r2, 770a <mbedtls_mpi_cmp_abs+0x2e>
        if( Y->p[j - 1] != 0 )
    76f8:	688d      	ldr	r5, [r1, #8]
    76fa:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
    76fe:	3c01      	subs	r4, #1
    7700:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
    7704:	b90c      	cbnz	r4, 770a <mbedtls_mpi_cmp_abs+0x2e>
    for( j = Y->n; j > 0; j-- )
    7706:	3a01      	subs	r2, #1
    7708:	e7f5      	b.n	76f6 <mbedtls_mpi_cmp_abs+0x1a>
    if( i == 0 && j == 0 )
    770a:	b903      	cbnz	r3, 770e <mbedtls_mpi_cmp_abs+0x32>
    770c:	b1c2      	cbz	r2, 7740 <mbedtls_mpi_cmp_abs+0x64>
    if( i > j ) return(  1 );
    770e:	4293      	cmp	r3, r2
    7710:	d818      	bhi.n	7744 <mbedtls_mpi_cmp_abs+0x68>
    if( j > i ) return( -1 );
    7712:	d203      	bcs.n	771c <mbedtls_mpi_cmp_abs+0x40>
    7714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7718:	e015      	b.n	7746 <mbedtls_mpi_cmp_abs+0x6a>
    for( ; i > 0; i-- )
    771a:	3b01      	subs	r3, #1
    771c:	b173      	cbz	r3, 773c <mbedtls_mpi_cmp_abs+0x60>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    771e:	6884      	ldr	r4, [r0, #8]
    7720:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    7724:	3a01      	subs	r2, #1
    7726:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
    772a:	688d      	ldr	r5, [r1, #8]
    772c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    7730:	4294      	cmp	r4, r2
    7732:	d80a      	bhi.n	774a <mbedtls_mpi_cmp_abs+0x6e>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    7734:	d2f1      	bcs.n	771a <mbedtls_mpi_cmp_abs+0x3e>
    7736:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    773a:	e004      	b.n	7746 <mbedtls_mpi_cmp_abs+0x6a>
    return( 0 );
    773c:	2000      	movs	r0, #0
    773e:	e002      	b.n	7746 <mbedtls_mpi_cmp_abs+0x6a>
        return( 0 );
    7740:	2000      	movs	r0, #0
    7742:	e000      	b.n	7746 <mbedtls_mpi_cmp_abs+0x6a>
    if( i > j ) return(  1 );
    7744:	2001      	movs	r0, #1
}
    7746:	bc30      	pop	{r4, r5}
    7748:	4770      	bx	lr
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    774a:	2001      	movs	r0, #1
    774c:	e7fb      	b.n	7746 <mbedtls_mpi_cmp_abs+0x6a>

0000774e <mbedtls_mpi_cmp_mpi>:
{
    774e:	b470      	push	{r4, r5, r6}
    for( i = X->n; i > 0; i-- )
    7750:	6843      	ldr	r3, [r0, #4]
    7752:	b143      	cbz	r3, 7766 <mbedtls_mpi_cmp_mpi+0x18>
        if( X->p[i - 1] != 0 )
    7754:	6884      	ldr	r4, [r0, #8]
    7756:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    775a:	3a01      	subs	r2, #1
    775c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    7760:	b90a      	cbnz	r2, 7766 <mbedtls_mpi_cmp_mpi+0x18>
    for( i = X->n; i > 0; i-- )
    7762:	3b01      	subs	r3, #1
    7764:	e7f5      	b.n	7752 <mbedtls_mpi_cmp_mpi+0x4>
    for( j = Y->n; j > 0; j-- )
    7766:	684a      	ldr	r2, [r1, #4]
    7768:	b142      	cbz	r2, 777c <mbedtls_mpi_cmp_mpi+0x2e>
        if( Y->p[j - 1] != 0 )
    776a:	688d      	ldr	r5, [r1, #8]
    776c:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
    7770:	3c01      	subs	r4, #1
    7772:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
    7776:	b90c      	cbnz	r4, 777c <mbedtls_mpi_cmp_mpi+0x2e>
    for( j = Y->n; j > 0; j-- )
    7778:	3a01      	subs	r2, #1
    777a:	e7f5      	b.n	7768 <mbedtls_mpi_cmp_mpi+0x1a>
    if( i == 0 && j == 0 )
    777c:	b903      	cbnz	r3, 7780 <mbedtls_mpi_cmp_mpi+0x32>
    777e:	b342      	cbz	r2, 77d2 <mbedtls_mpi_cmp_mpi+0x84>
    if( i > j ) return(  X->s );
    7780:	4293      	cmp	r3, r2
    7782:	d81b      	bhi.n	77bc <mbedtls_mpi_cmp_mpi+0x6e>
    if( j > i ) return( -Y->s );
    7784:	4293      	cmp	r3, r2
    7786:	d31d      	bcc.n	77c4 <mbedtls_mpi_cmp_mpi+0x76>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    7788:	6806      	ldr	r6, [r0, #0]
    778a:	2e00      	cmp	r6, #0
    778c:	dd02      	ble.n	7794 <mbedtls_mpi_cmp_mpi+0x46>
    778e:	680a      	ldr	r2, [r1, #0]
    7790:	2a00      	cmp	r2, #0
    7792:	db20      	blt.n	77d6 <mbedtls_mpi_cmp_mpi+0x88>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
    7794:	680a      	ldr	r2, [r1, #0]
    7796:	2a00      	cmp	r2, #0
    7798:	dd01      	ble.n	779e <mbedtls_mpi_cmp_mpi+0x50>
    779a:	2e00      	cmp	r6, #0
    779c:	db1d      	blt.n	77da <mbedtls_mpi_cmp_mpi+0x8c>
    for( ; i > 0; i-- )
    779e:	b1b3      	cbz	r3, 77ce <mbedtls_mpi_cmp_mpi+0x80>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
    77a0:	6884      	ldr	r4, [r0, #8]
    77a2:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    77a6:	3a01      	subs	r2, #1
    77a8:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
    77ac:	688d      	ldr	r5, [r1, #8]
    77ae:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    77b2:	4294      	cmp	r4, r2
    77b4:	d803      	bhi.n	77be <mbedtls_mpi_cmp_mpi+0x70>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    77b6:	d308      	bcc.n	77ca <mbedtls_mpi_cmp_mpi+0x7c>
    for( ; i > 0; i-- )
    77b8:	3b01      	subs	r3, #1
    77ba:	e7f0      	b.n	779e <mbedtls_mpi_cmp_mpi+0x50>
    if( i > j ) return(  X->s );
    77bc:	6806      	ldr	r6, [r0, #0]
}
    77be:	4630      	mov	r0, r6
    77c0:	bc70      	pop	{r4, r5, r6}
    77c2:	4770      	bx	lr
    if( j > i ) return( -Y->s );
    77c4:	680e      	ldr	r6, [r1, #0]
    77c6:	4276      	negs	r6, r6
    77c8:	e7f9      	b.n	77be <mbedtls_mpi_cmp_mpi+0x70>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    77ca:	4276      	negs	r6, r6
    77cc:	e7f7      	b.n	77be <mbedtls_mpi_cmp_mpi+0x70>
    return( 0 );
    77ce:	2600      	movs	r6, #0
    77d0:	e7f5      	b.n	77be <mbedtls_mpi_cmp_mpi+0x70>
        return( 0 );
    77d2:	2600      	movs	r6, #0
    77d4:	e7f3      	b.n	77be <mbedtls_mpi_cmp_mpi+0x70>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    77d6:	2601      	movs	r6, #1
    77d8:	e7f1      	b.n	77be <mbedtls_mpi_cmp_mpi+0x70>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
    77da:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    77de:	e7ee      	b.n	77be <mbedtls_mpi_cmp_mpi+0x70>

000077e0 <mbedtls_mpi_cmp_int>:
{
    77e0:	b500      	push	{lr}
    77e2:	b085      	sub	sp, #20
    *p  = ( z < 0 ) ? -z : z;
    77e4:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
    77e8:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    77ec:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
    77ee:	2900      	cmp	r1, #0
    77f0:	db0b      	blt.n	780a <mbedtls_mpi_cmp_int+0x2a>
    77f2:	2301      	movs	r3, #1
    77f4:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    77f6:	2301      	movs	r3, #1
    77f8:	9302      	str	r3, [sp, #8]
    Y.p = p;
    77fa:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    77fe:	a901      	add	r1, sp, #4
    7800:	f7ff ffa5 	bl	774e <mbedtls_mpi_cmp_mpi>
}
    7804:	b005      	add	sp, #20
    7806:	f85d fb04 	ldr.w	pc, [sp], #4
    Y.s = ( z < 0 ) ? -1 : 1;
    780a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    780e:	e7f1      	b.n	77f4 <mbedtls_mpi_cmp_int+0x14>

00007810 <mbedtls_mpi_add_abs>:
{
    7810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7812:	4607      	mov	r7, r0
    7814:	4614      	mov	r4, r2
    if( X == B )
    7816:	4290      	cmp	r0, r2
    7818:	d014      	beq.n	7844 <mbedtls_mpi_add_abs+0x34>
    if( X != A )
    781a:	42b9      	cmp	r1, r7
    781c:	d005      	beq.n	782a <mbedtls_mpi_add_abs+0x1a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    781e:	4638      	mov	r0, r7
    7820:	f7ff fde3 	bl	73ea <mbedtls_mpi_copy>
    7824:	4684      	mov	ip, r0
    7826:	2800      	cmp	r0, #0
    7828:	d142      	bne.n	78b0 <mbedtls_mpi_add_abs+0xa0>
    X->s = 1;
    782a:	2301      	movs	r3, #1
    782c:	603b      	str	r3, [r7, #0]
    for( j = B->n; j > 0; j-- )
    782e:	6866      	ldr	r6, [r4, #4]
    7830:	b15e      	cbz	r6, 784a <mbedtls_mpi_add_abs+0x3a>
        if( B->p[j - 1] != 0 )
    7832:	68a2      	ldr	r2, [r4, #8]
    7834:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
    7838:	3b01      	subs	r3, #1
    783a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    783e:	b923      	cbnz	r3, 784a <mbedtls_mpi_add_abs+0x3a>
    for( j = B->n; j > 0; j-- )
    7840:	3e01      	subs	r6, #1
    7842:	e7f5      	b.n	7830 <mbedtls_mpi_add_abs+0x20>
        const mbedtls_mpi *T = A; A = X; B = T;
    7844:	460c      	mov	r4, r1
    7846:	4601      	mov	r1, r0
    7848:	e7e7      	b.n	781a <mbedtls_mpi_add_abs+0xa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    784a:	4631      	mov	r1, r6
    784c:	4638      	mov	r0, r7
    784e:	f7ff fda3 	bl	7398 <mbedtls_mpi_grow>
    7852:	4684      	mov	ip, r0
    7854:	bb60      	cbnz	r0, 78b0 <mbedtls_mpi_add_abs+0xa0>
    o = B->p; p = X->p; c = 0;
    7856:	68a0      	ldr	r0, [r4, #8]
    7858:	68bb      	ldr	r3, [r7, #8]
    785a:	2400      	movs	r4, #0
    for( i = 0; i < j; i++, o++, p++ )
    785c:	4625      	mov	r5, r4
    785e:	42b5      	cmp	r5, r6
    7860:	d218      	bcs.n	7894 <mbedtls_mpi_add_abs+0x84>
        tmp= *o;
    7862:	f850 1b04 	ldr.w	r1, [r0], #4
        *p +=  c; c  = ( *p <  c );
    7866:	681a      	ldr	r2, [r3, #0]
    7868:	18a4      	adds	r4, r4, r2
    786a:	bf2c      	ite	cs
    786c:	2201      	movcs	r2, #1
    786e:	2200      	movcc	r2, #0
        *p += tmp; c += ( *p < tmp );
    7870:	440c      	add	r4, r1
    7872:	f843 4b04 	str.w	r4, [r3], #4
    7876:	428c      	cmp	r4, r1
    7878:	bf2c      	ite	cs
    787a:	4614      	movcs	r4, r2
    787c:	1c54      	addcc	r4, r2, #1
    for( i = 0; i < j; i++, o++, p++ )
    787e:	3501      	adds	r5, #1
    7880:	e7ed      	b.n	785e <mbedtls_mpi_add_abs+0x4e>
        *p += c; c = ( *p < c ); i++; p++;
    7882:	681a      	ldr	r2, [r3, #0]
    7884:	4422      	add	r2, r4
    7886:	f843 2b04 	str.w	r2, [r3], #4
    788a:	42a2      	cmp	r2, r4
    788c:	bf2c      	ite	cs
    788e:	2400      	movcs	r4, #0
    7890:	2401      	movcc	r4, #1
    7892:	3501      	adds	r5, #1
    while( c != 0 )
    7894:	b164      	cbz	r4, 78b0 <mbedtls_mpi_add_abs+0xa0>
        if( i >= X->n )
    7896:	687a      	ldr	r2, [r7, #4]
    7898:	42aa      	cmp	r2, r5
    789a:	d8f2      	bhi.n	7882 <mbedtls_mpi_add_abs+0x72>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    789c:	1c69      	adds	r1, r5, #1
    789e:	4638      	mov	r0, r7
    78a0:	f7ff fd7a 	bl	7398 <mbedtls_mpi_grow>
    78a4:	4684      	mov	ip, r0
    78a6:	b918      	cbnz	r0, 78b0 <mbedtls_mpi_add_abs+0xa0>
            p = X->p + i;
    78a8:	68bb      	ldr	r3, [r7, #8]
    78aa:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    78ae:	e7e8      	b.n	7882 <mbedtls_mpi_add_abs+0x72>
}
    78b0:	4660      	mov	r0, ip
    78b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000078b4 <mbedtls_mpi_sub_abs>:
{
    78b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    78b6:	b085      	sub	sp, #20
    78b8:	4605      	mov	r5, r0
    78ba:	460f      	mov	r7, r1
    78bc:	4616      	mov	r6, r2
    mbedtls_mpi_init( &TB );
    78be:	a801      	add	r0, sp, #4
    78c0:	f7ff fd52 	bl	7368 <mbedtls_mpi_init>
    if( X == B )
    78c4:	42b5      	cmp	r5, r6
    78c6:	d014      	beq.n	78f2 <mbedtls_mpi_sub_abs+0x3e>
    if( X != A )
    78c8:	42bd      	cmp	r5, r7
    78ca:	d005      	beq.n	78d8 <mbedtls_mpi_sub_abs+0x24>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    78cc:	4639      	mov	r1, r7
    78ce:	4628      	mov	r0, r5
    78d0:	f7ff fd8b 	bl	73ea <mbedtls_mpi_copy>
    78d4:	4604      	mov	r4, r0
    78d6:	b9d8      	cbnz	r0, 7910 <mbedtls_mpi_sub_abs+0x5c>
    X->s = 1;
    78d8:	2301      	movs	r3, #1
    78da:	602b      	str	r3, [r5, #0]
    for( n = B->n; n > 0; n-- )
    78dc:	6874      	ldr	r4, [r6, #4]
    78de:	b184      	cbz	r4, 7902 <mbedtls_mpi_sub_abs+0x4e>
        if( B->p[n - 1] != 0 )
    78e0:	68b2      	ldr	r2, [r6, #8]
    78e2:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    78e6:	3b01      	subs	r3, #1
    78e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78ec:	b94b      	cbnz	r3, 7902 <mbedtls_mpi_sub_abs+0x4e>
    for( n = B->n; n > 0; n-- )
    78ee:	3c01      	subs	r4, #1
    78f0:	e7f5      	b.n	78de <mbedtls_mpi_sub_abs+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
    78f2:	4631      	mov	r1, r6
    78f4:	a801      	add	r0, sp, #4
    78f6:	f7ff fd78 	bl	73ea <mbedtls_mpi_copy>
    78fa:	4604      	mov	r4, r0
    78fc:	b940      	cbnz	r0, 7910 <mbedtls_mpi_sub_abs+0x5c>
        B = &TB;
    78fe:	ae01      	add	r6, sp, #4
    7900:	e7e2      	b.n	78c8 <mbedtls_mpi_sub_abs+0x14>
    carry = mpi_sub_hlp( n, X->p, B->p );
    7902:	68b2      	ldr	r2, [r6, #8]
    7904:	68a9      	ldr	r1, [r5, #8]
    7906:	4620      	mov	r0, r4
    7908:	f7ff fac9 	bl	6e9e <mpi_sub_hlp>
    if( carry != 0 )
    790c:	b950      	cbnz	r0, 7924 <mbedtls_mpi_sub_abs+0x70>
    ret = 0;
    790e:	2400      	movs	r4, #0
    mbedtls_mpi_free( &TB );
    7910:	a801      	add	r0, sp, #4
    7912:	f7ff fd2f 	bl	7374 <mbedtls_mpi_free>
}
    7916:	4620      	mov	r0, r4
    7918:	b005      	add	sp, #20
    791a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            --X->p[n];
    791c:	3b01      	subs	r3, #1
    791e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        for( ; n < X->n && X->p[n] == 0; n++ )
    7922:	3401      	adds	r4, #1
    7924:	6869      	ldr	r1, [r5, #4]
    7926:	42a1      	cmp	r1, r4
    7928:	d904      	bls.n	7934 <mbedtls_mpi_sub_abs+0x80>
    792a:	68aa      	ldr	r2, [r5, #8]
    792c:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    7930:	2b00      	cmp	r3, #0
    7932:	d0f3      	beq.n	791c <mbedtls_mpi_sub_abs+0x68>
        if( n == X->n )
    7934:	42a1      	cmp	r1, r4
    7936:	d007      	beq.n	7948 <mbedtls_mpi_sub_abs+0x94>
        --X->p[n];
    7938:	68aa      	ldr	r2, [r5, #8]
    793a:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    793e:	3b01      	subs	r3, #1
    7940:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    ret = 0;
    7944:	2400      	movs	r4, #0
    7946:	e7e3      	b.n	7910 <mbedtls_mpi_sub_abs+0x5c>
            return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    7948:	f06f 0409 	mvn.w	r4, #9
    794c:	e7e3      	b.n	7916 <mbedtls_mpi_sub_abs+0x62>

0000794e <mbedtls_mpi_add_mpi>:
{
    794e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7950:	4607      	mov	r7, r0
    7952:	460c      	mov	r4, r1
    7954:	4615      	mov	r5, r2
    s = A->s;
    7956:	680e      	ldr	r6, [r1, #0]
    if( A->s * B->s < 0 )
    7958:	6813      	ldr	r3, [r2, #0]
    795a:	fb06 f303 	mul.w	r3, r6, r3
    795e:	2b00      	cmp	r3, #0
    7960:	da18      	bge.n	7994 <mbedtls_mpi_add_mpi+0x46>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    7962:	4611      	mov	r1, r2
    7964:	4620      	mov	r0, r4
    7966:	f7ff feb9 	bl	76dc <mbedtls_mpi_cmp_abs>
    796a:	2800      	cmp	r0, #0
    796c:	db08      	blt.n	7980 <mbedtls_mpi_add_mpi+0x32>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    796e:	462a      	mov	r2, r5
    7970:	4621      	mov	r1, r4
    7972:	4638      	mov	r0, r7
    7974:	f7ff ff9e 	bl	78b4 <mbedtls_mpi_sub_abs>
    7978:	4603      	mov	r3, r0
    797a:	b980      	cbnz	r0, 799e <mbedtls_mpi_add_mpi+0x50>
            X->s =  s;
    797c:	603e      	str	r6, [r7, #0]
    797e:	e00e      	b.n	799e <mbedtls_mpi_add_mpi+0x50>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    7980:	4622      	mov	r2, r4
    7982:	4629      	mov	r1, r5
    7984:	4638      	mov	r0, r7
    7986:	f7ff ff95 	bl	78b4 <mbedtls_mpi_sub_abs>
    798a:	4603      	mov	r3, r0
    798c:	b938      	cbnz	r0, 799e <mbedtls_mpi_add_mpi+0x50>
            X->s = -s;
    798e:	4276      	negs	r6, r6
    7990:	603e      	str	r6, [r7, #0]
    7992:	e004      	b.n	799e <mbedtls_mpi_add_mpi+0x50>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    7994:	f7ff ff3c 	bl	7810 <mbedtls_mpi_add_abs>
    7998:	4603      	mov	r3, r0
    799a:	b900      	cbnz	r0, 799e <mbedtls_mpi_add_mpi+0x50>
        X->s = s;
    799c:	603e      	str	r6, [r7, #0]
}
    799e:	4618      	mov	r0, r3
    79a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000079a2 <mbedtls_mpi_sub_mpi>:
{
    79a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79a4:	4607      	mov	r7, r0
    79a6:	460c      	mov	r4, r1
    79a8:	4615      	mov	r5, r2
    s = A->s;
    79aa:	680e      	ldr	r6, [r1, #0]
    if( A->s * B->s > 0 )
    79ac:	6813      	ldr	r3, [r2, #0]
    79ae:	fb06 f303 	mul.w	r3, r6, r3
    79b2:	2b00      	cmp	r3, #0
    79b4:	dd1a      	ble.n	79ec <mbedtls_mpi_sub_mpi+0x4a>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    79b6:	4611      	mov	r1, r2
    79b8:	4620      	mov	r0, r4
    79ba:	f7ff fe8f 	bl	76dc <mbedtls_mpi_cmp_abs>
    79be:	2800      	cmp	r0, #0
    79c0:	db09      	blt.n	79d6 <mbedtls_mpi_sub_mpi+0x34>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    79c2:	462a      	mov	r2, r5
    79c4:	4621      	mov	r1, r4
    79c6:	4638      	mov	r0, r7
    79c8:	f7ff ff74 	bl	78b4 <mbedtls_mpi_sub_abs>
    79cc:	4603      	mov	r3, r0
    79ce:	b900      	cbnz	r0, 79d2 <mbedtls_mpi_sub_mpi+0x30>
            X->s =  s;
    79d0:	603e      	str	r6, [r7, #0]
}
    79d2:	4618      	mov	r0, r3
    79d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    79d6:	4622      	mov	r2, r4
    79d8:	4629      	mov	r1, r5
    79da:	4638      	mov	r0, r7
    79dc:	f7ff ff6a 	bl	78b4 <mbedtls_mpi_sub_abs>
    79e0:	4603      	mov	r3, r0
    79e2:	2800      	cmp	r0, #0
    79e4:	d1f5      	bne.n	79d2 <mbedtls_mpi_sub_mpi+0x30>
            X->s = -s;
    79e6:	4276      	negs	r6, r6
    79e8:	603e      	str	r6, [r7, #0]
    79ea:	e7f2      	b.n	79d2 <mbedtls_mpi_sub_mpi+0x30>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    79ec:	f7ff ff10 	bl	7810 <mbedtls_mpi_add_abs>
    79f0:	4603      	mov	r3, r0
    79f2:	2800      	cmp	r0, #0
    79f4:	d1ed      	bne.n	79d2 <mbedtls_mpi_sub_mpi+0x30>
        X->s = s;
    79f6:	603e      	str	r6, [r7, #0]
    return( ret );
    79f8:	e7eb      	b.n	79d2 <mbedtls_mpi_sub_mpi+0x30>

000079fa <mbedtls_mpi_mul_mpi>:
{
    79fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    79fe:	b087      	sub	sp, #28
    7a00:	4680      	mov	r8, r0
    7a02:	460e      	mov	r6, r1
    7a04:	4617      	mov	r7, r2
    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
    7a06:	a803      	add	r0, sp, #12
    7a08:	f7ff fcae 	bl	7368 <mbedtls_mpi_init>
    7a0c:	4668      	mov	r0, sp
    7a0e:	f7ff fcab 	bl	7368 <mbedtls_mpi_init>
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    7a12:	45b0      	cmp	r8, r6
    7a14:	d00c      	beq.n	7a30 <mbedtls_mpi_mul_mpi+0x36>
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
    7a16:	45b8      	cmp	r8, r7
    7a18:	d012      	beq.n	7a40 <mbedtls_mpi_mul_mpi+0x46>
    for( i = A->n; i > 0; i-- )
    7a1a:	6875      	ldr	r5, [r6, #4]
    7a1c:	b1c5      	cbz	r5, 7a50 <mbedtls_mpi_mul_mpi+0x56>
        if( A->p[i - 1] != 0 )
    7a1e:	68b2      	ldr	r2, [r6, #8]
    7a20:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
    7a24:	3b01      	subs	r3, #1
    7a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a2a:	b98b      	cbnz	r3, 7a50 <mbedtls_mpi_mul_mpi+0x56>
    for( i = A->n; i > 0; i-- )
    7a2c:	3d01      	subs	r5, #1
    7a2e:	e7f5      	b.n	7a1c <mbedtls_mpi_mul_mpi+0x22>
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    7a30:	4631      	mov	r1, r6
    7a32:	a803      	add	r0, sp, #12
    7a34:	f7ff fcd9 	bl	73ea <mbedtls_mpi_copy>
    7a38:	4681      	mov	r9, r0
    7a3a:	b9d0      	cbnz	r0, 7a72 <mbedtls_mpi_mul_mpi+0x78>
    7a3c:	ae03      	add	r6, sp, #12
    7a3e:	e7ea      	b.n	7a16 <mbedtls_mpi_mul_mpi+0x1c>
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
    7a40:	4639      	mov	r1, r7
    7a42:	4668      	mov	r0, sp
    7a44:	f7ff fcd1 	bl	73ea <mbedtls_mpi_copy>
    7a48:	4681      	mov	r9, r0
    7a4a:	b990      	cbnz	r0, 7a72 <mbedtls_mpi_mul_mpi+0x78>
    7a4c:	466f      	mov	r7, sp
    7a4e:	e7e4      	b.n	7a1a <mbedtls_mpi_mul_mpi+0x20>
    for( j = B->n; j > 0; j-- )
    7a50:	687c      	ldr	r4, [r7, #4]
    7a52:	b144      	cbz	r4, 7a66 <mbedtls_mpi_mul_mpi+0x6c>
        if( B->p[j - 1] != 0 )
    7a54:	68ba      	ldr	r2, [r7, #8]
    7a56:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    7a5a:	3b01      	subs	r3, #1
    7a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a60:	b90b      	cbnz	r3, 7a66 <mbedtls_mpi_mul_mpi+0x6c>
    for( j = B->n; j > 0; j-- )
    7a62:	3c01      	subs	r4, #1
    7a64:	e7f5      	b.n	7a52 <mbedtls_mpi_mul_mpi+0x58>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
    7a66:	1929      	adds	r1, r5, r4
    7a68:	4640      	mov	r0, r8
    7a6a:	f7ff fc95 	bl	7398 <mbedtls_mpi_grow>
    7a6e:	4681      	mov	r9, r0
    7a70:	b148      	cbz	r0, 7a86 <mbedtls_mpi_mul_mpi+0x8c>
    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
    7a72:	4668      	mov	r0, sp
    7a74:	f7ff fc7e 	bl	7374 <mbedtls_mpi_free>
    7a78:	a803      	add	r0, sp, #12
    7a7a:	f7ff fc7b 	bl	7374 <mbedtls_mpi_free>
}
    7a7e:	4648      	mov	r0, r9
    7a80:	b007      	add	sp, #28
    7a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
    7a86:	2100      	movs	r1, #0
    7a88:	4640      	mov	r0, r8
    7a8a:	f7ff fce0 	bl	744e <mbedtls_mpi_lset>
    7a8e:	4681      	mov	r9, r0
    7a90:	b178      	cbz	r0, 7ab2 <mbedtls_mpi_mul_mpi+0xb8>
    7a92:	e7ee      	b.n	7a72 <mbedtls_mpi_mul_mpi+0x78>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
    7a94:	f8d8 1008 	ldr.w	r1, [r8, #8]
    7a98:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
    7a9c:	3a01      	subs	r2, #1
    7a9e:	68bb      	ldr	r3, [r7, #8]
    7aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7aa4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    7aa8:	68b1      	ldr	r1, [r6, #8]
    7aaa:	4628      	mov	r0, r5
    7aac:	f7ff fa11 	bl	6ed2 <mpi_mul_hlp>
    for( ; j > 0; j-- )
    7ab0:	3c01      	subs	r4, #1
    7ab2:	2c00      	cmp	r4, #0
    7ab4:	d1ee      	bne.n	7a94 <mbedtls_mpi_mul_mpi+0x9a>
    X->s = A->s * B->s;
    7ab6:	6832      	ldr	r2, [r6, #0]
    7ab8:	683b      	ldr	r3, [r7, #0]
    7aba:	fb03 f302 	mul.w	r3, r3, r2
    7abe:	f8c8 3000 	str.w	r3, [r8]
    7ac2:	e7d6      	b.n	7a72 <mbedtls_mpi_mul_mpi+0x78>

00007ac4 <mbedtls_mpi_mul_int>:
{
    7ac4:	b500      	push	{lr}
    7ac6:	b085      	sub	sp, #20
    _B.s = 1;
    7ac8:	2301      	movs	r3, #1
    7aca:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    7acc:	9302      	str	r3, [sp, #8]
    _B.p = p;
    7ace:	f8cd d00c 	str.w	sp, [sp, #12]
    p[0] = b;
    7ad2:	9200      	str	r2, [sp, #0]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
    7ad4:	aa01      	add	r2, sp, #4
    7ad6:	f7ff ff90 	bl	79fa <mbedtls_mpi_mul_mpi>
}
    7ada:	b005      	add	sp, #20
    7adc:	f85d fb04 	ldr.w	pc, [sp], #4

00007ae0 <mbedtls_mpi_div_mpi>:
{
    7ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ae4:	b097      	sub	sp, #92	; 0x5c
    7ae6:	4606      	mov	r6, r0
    7ae8:	460f      	mov	r7, r1
    7aea:	4615      	mov	r5, r2
    7aec:	469b      	mov	fp, r3
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    7aee:	2100      	movs	r1, #0
    7af0:	4618      	mov	r0, r3
    7af2:	f7ff fe75 	bl	77e0 <mbedtls_mpi_cmp_int>
    7af6:	2800      	cmp	r0, #0
    7af8:	f000 81bc 	beq.w	7e74 <mbedtls_mpi_div_mpi+0x394>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    7afc:	a813      	add	r0, sp, #76	; 0x4c
    7afe:	f7ff fc33 	bl	7368 <mbedtls_mpi_init>
    7b02:	a810      	add	r0, sp, #64	; 0x40
    7b04:	f7ff fc30 	bl	7368 <mbedtls_mpi_init>
    7b08:	a80d      	add	r0, sp, #52	; 0x34
    7b0a:	f7ff fc2d 	bl	7368 <mbedtls_mpi_init>
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );
    7b0e:	a80a      	add	r0, sp, #40	; 0x28
    7b10:	f7ff fc2a 	bl	7368 <mbedtls_mpi_init>
    7b14:	a807      	add	r0, sp, #28
    7b16:	f7ff fc27 	bl	7368 <mbedtls_mpi_init>
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    7b1a:	4659      	mov	r1, fp
    7b1c:	4628      	mov	r0, r5
    7b1e:	f7ff fddd 	bl	76dc <mbedtls_mpi_cmp_abs>
    7b22:	2800      	cmp	r0, #0
    7b24:	da0f      	bge.n	7b46 <mbedtls_mpi_div_mpi+0x66>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    7b26:	b12e      	cbz	r6, 7b34 <mbedtls_mpi_div_mpi+0x54>
    7b28:	2100      	movs	r1, #0
    7b2a:	4630      	mov	r0, r6
    7b2c:	f7ff fc8f 	bl	744e <mbedtls_mpi_lset>
    7b30:	4604      	mov	r4, r0
    7b32:	b970      	cbnz	r0, 7b52 <mbedtls_mpi_div_mpi+0x72>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    7b34:	b12f      	cbz	r7, 7b42 <mbedtls_mpi_div_mpi+0x62>
    7b36:	4629      	mov	r1, r5
    7b38:	4638      	mov	r0, r7
    7b3a:	f7ff fc56 	bl	73ea <mbedtls_mpi_copy>
    7b3e:	4604      	mov	r4, r0
    7b40:	b938      	cbnz	r0, 7b52 <mbedtls_mpi_div_mpi+0x72>
        return( 0 );
    7b42:	2400      	movs	r4, #0
    7b44:	e014      	b.n	7b70 <mbedtls_mpi_div_mpi+0x90>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    7b46:	4629      	mov	r1, r5
    7b48:	a813      	add	r0, sp, #76	; 0x4c
    7b4a:	f7ff fc4e 	bl	73ea <mbedtls_mpi_copy>
    7b4e:	4604      	mov	r4, r0
    7b50:	b190      	cbz	r0, 7b78 <mbedtls_mpi_div_mpi+0x98>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    7b52:	a813      	add	r0, sp, #76	; 0x4c
    7b54:	f7ff fc0e 	bl	7374 <mbedtls_mpi_free>
    7b58:	a810      	add	r0, sp, #64	; 0x40
    7b5a:	f7ff fc0b 	bl	7374 <mbedtls_mpi_free>
    7b5e:	a80d      	add	r0, sp, #52	; 0x34
    7b60:	f7ff fc08 	bl	7374 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
    7b64:	a80a      	add	r0, sp, #40	; 0x28
    7b66:	f7ff fc05 	bl	7374 <mbedtls_mpi_free>
    7b6a:	a807      	add	r0, sp, #28
    7b6c:	f7ff fc02 	bl	7374 <mbedtls_mpi_free>
}
    7b70:	4620      	mov	r0, r4
    7b72:	b017      	add	sp, #92	; 0x5c
    7b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    7b78:	4659      	mov	r1, fp
    7b7a:	a810      	add	r0, sp, #64	; 0x40
    7b7c:	f7ff fc35 	bl	73ea <mbedtls_mpi_copy>
    7b80:	4604      	mov	r4, r0
    7b82:	2800      	cmp	r0, #0
    7b84:	d1e5      	bne.n	7b52 <mbedtls_mpi_div_mpi+0x72>
    X.s = Y.s = 1;
    7b86:	2301      	movs	r3, #1
    7b88:	9310      	str	r3, [sp, #64]	; 0x40
    7b8a:	9313      	str	r3, [sp, #76]	; 0x4c
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    7b8c:	6869      	ldr	r1, [r5, #4]
    7b8e:	3102      	adds	r1, #2
    7b90:	a80d      	add	r0, sp, #52	; 0x34
    7b92:	f7ff fc01 	bl	7398 <mbedtls_mpi_grow>
    7b96:	4604      	mov	r4, r0
    7b98:	2800      	cmp	r0, #0
    7b9a:	d1da      	bne.n	7b52 <mbedtls_mpi_div_mpi+0x72>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
    7b9c:	2100      	movs	r1, #0
    7b9e:	a80d      	add	r0, sp, #52	; 0x34
    7ba0:	f7ff fc55 	bl	744e <mbedtls_mpi_lset>
    7ba4:	4604      	mov	r4, r0
    7ba6:	2800      	cmp	r0, #0
    7ba8:	d1d3      	bne.n	7b52 <mbedtls_mpi_div_mpi+0x72>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
    7baa:	2102      	movs	r1, #2
    7bac:	a80a      	add	r0, sp, #40	; 0x28
    7bae:	f7ff fbf3 	bl	7398 <mbedtls_mpi_grow>
    7bb2:	4604      	mov	r4, r0
    7bb4:	2800      	cmp	r0, #0
    7bb6:	d1cc      	bne.n	7b52 <mbedtls_mpi_div_mpi+0x72>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
    7bb8:	2103      	movs	r1, #3
    7bba:	a807      	add	r0, sp, #28
    7bbc:	f7ff fbec 	bl	7398 <mbedtls_mpi_grow>
    7bc0:	4604      	mov	r4, r0
    7bc2:	2800      	cmp	r0, #0
    7bc4:	d1c5      	bne.n	7b52 <mbedtls_mpi_div_mpi+0x72>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
    7bc6:	a810      	add	r0, sp, #64	; 0x40
    7bc8:	f7ff fc6f 	bl	74aa <mbedtls_mpi_bitlen>
    7bcc:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
    7bd0:	281e      	cmp	r0, #30
    7bd2:	d811      	bhi.n	7bf8 <mbedtls_mpi_div_mpi+0x118>
        k = biL - 1 - k;
    7bd4:	f1c0 031f 	rsb	r3, r0, #31
    7bd8:	9300      	str	r3, [sp, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    7bda:	4698      	mov	r8, r3
    7bdc:	4619      	mov	r1, r3
    7bde:	a813      	add	r0, sp, #76	; 0x4c
    7be0:	f7ff fce3 	bl	75aa <mbedtls_mpi_shift_l>
    7be4:	4604      	mov	r4, r0
    7be6:	2800      	cmp	r0, #0
    7be8:	d1b3      	bne.n	7b52 <mbedtls_mpi_div_mpi+0x72>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    7bea:	4641      	mov	r1, r8
    7bec:	a810      	add	r0, sp, #64	; 0x40
    7bee:	f7ff fcdc 	bl	75aa <mbedtls_mpi_shift_l>
    7bf2:	4604      	mov	r4, r0
    7bf4:	b110      	cbz	r0, 7bfc <mbedtls_mpi_div_mpi+0x11c>
    7bf6:	e7ac      	b.n	7b52 <mbedtls_mpi_div_mpi+0x72>
    else k = 0;
    7bf8:	2300      	movs	r3, #0
    7bfa:	9300      	str	r3, [sp, #0]
    n = X.n - 1;
    7bfc:	9b14      	ldr	r3, [sp, #80]	; 0x50
    7bfe:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
    t = Y.n - 1;
    7c02:	9a11      	ldr	r2, [sp, #68]	; 0x44
    7c04:	9201      	str	r2, [sp, #4]
    7c06:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
    7c0a:	eba3 0802 	sub.w	r8, r3, r2
    7c0e:	ea4f 1348 	mov.w	r3, r8, lsl #5
    7c12:	9302      	str	r3, [sp, #8]
    7c14:	4619      	mov	r1, r3
    7c16:	a810      	add	r0, sp, #64	; 0x40
    7c18:	f7ff fcc7 	bl	75aa <mbedtls_mpi_shift_l>
    7c1c:	4604      	mov	r4, r0
    7c1e:	2800      	cmp	r0, #0
    7c20:	d197      	bne.n	7b52 <mbedtls_mpi_div_mpi+0x72>
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    7c22:	a910      	add	r1, sp, #64	; 0x40
    7c24:	a813      	add	r0, sp, #76	; 0x4c
    7c26:	f7ff fd92 	bl	774e <mbedtls_mpi_cmp_mpi>
    7c2a:	2800      	cmp	r0, #0
    7c2c:	db0e      	blt.n	7c4c <mbedtls_mpi_div_mpi+0x16c>
        Z.p[n - t]++;
    7c2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7c30:	f852 3028 	ldr.w	r3, [r2, r8, lsl #2]
    7c34:	3301      	adds	r3, #1
    7c36:	f842 3028 	str.w	r3, [r2, r8, lsl #2]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    7c3a:	aa10      	add	r2, sp, #64	; 0x40
    7c3c:	a913      	add	r1, sp, #76	; 0x4c
    7c3e:	4608      	mov	r0, r1
    7c40:	f7ff feaf 	bl	79a2 <mbedtls_mpi_sub_mpi>
    7c44:	4604      	mov	r4, r0
    7c46:	2800      	cmp	r0, #0
    7c48:	d0eb      	beq.n	7c22 <mbedtls_mpi_div_mpi+0x142>
    7c4a:	e782      	b.n	7b52 <mbedtls_mpi_div_mpi+0x72>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
    7c4c:	9902      	ldr	r1, [sp, #8]
    7c4e:	a810      	add	r0, sp, #64	; 0x40
    7c50:	f7ff fcfd 	bl	764e <mbedtls_mpi_shift_r>
    7c54:	4604      	mov	r4, r0
    7c56:	2800      	cmp	r0, #0
    7c58:	f47f af7b 	bne.w	7b52 <mbedtls_mpi_div_mpi+0x72>
    7c5c:	9602      	str	r6, [sp, #8]
    7c5e:	9703      	str	r7, [sp, #12]
    7c60:	464f      	mov	r7, r9
    7c62:	9504      	str	r5, [sp, #16]
    7c64:	4655      	mov	r5, sl
    7c66:	f8cd b014 	str.w	fp, [sp, #20]
    7c6a:	f8dd b004 	ldr.w	fp, [sp, #4]
    for( i = n; i > t ; i-- )
    7c6e:	42bd      	cmp	r5, r7
    7c70:	f240 80cd 	bls.w	7e0e <mbedtls_mpi_div_mpi+0x32e>
        if( X.p[i] >= Y.p[t] )
    7c74:	9915      	ldr	r1, [sp, #84]	; 0x54
    7c76:	ea4f 0885 	mov.w	r8, r5, lsl #2
    7c7a:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
    7c7e:	ea4f 0987 	mov.w	r9, r7, lsl #2
    7c82:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7c84:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    7c88:	4290      	cmp	r0, r2
    7c8a:	d317      	bcc.n	7cbc <mbedtls_mpi_div_mpi+0x1dc>
            Z.p[i - t - 1] = ~0;
    7c8c:	1beb      	subs	r3, r5, r7
    7c8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7c92:	3b01      	subs	r3, #1
    7c94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7c96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7c9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        Z.p[i - t - 1]++;
    7c9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7ca0:	1beb      	subs	r3, r5, r7
    7ca2:	9301      	str	r3, [sp, #4]
    7ca4:	f103 4a80 	add.w	sl, r3, #1073741824	; 0x40000000
    7ca8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    7cac:	ea4f 068a 	mov.w	r6, sl, lsl #2
    7cb0:	f852 302a 	ldr.w	r3, [r2, sl, lsl #2]
    7cb4:	3301      	adds	r3, #1
    7cb6:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
    7cba:	e046      	b.n	7d4a <mbedtls_mpi_div_mpi+0x26a>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    7cbc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    7cc0:	eb05 0c03 	add.w	ip, r5, r3
    7cc4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    7cc6:	1bec      	subs	r4, r5, r7
    7cc8:	441c      	add	r4, r3
    7cca:	2300      	movs	r3, #0
    7ccc:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
    7cd0:	f7ff fa9b 	bl	720a <mbedtls_int_div_int>
    7cd4:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
    7cd8:	e7e1      	b.n	7c9e <mbedtls_mpi_div_mpi+0x1be>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    7cda:	463a      	mov	r2, r7
    7cdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7cde:	601a      	str	r2, [r3, #0]
            T1.p[1] = Y.p[t];
    7ce0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7ce2:	f853 2009 	ldr.w	r2, [r3, r9]
    7ce6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7ce8:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    7cea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7cec:	599a      	ldr	r2, [r3, r6]
    7cee:	a90a      	add	r1, sp, #40	; 0x28
    7cf0:	4608      	mov	r0, r1
    7cf2:	f7ff fee7 	bl	7ac4 <mbedtls_mpi_mul_int>
    7cf6:	4604      	mov	r4, r0
    7cf8:	2800      	cmp	r0, #0
    7cfa:	f47f af2a 	bne.w	7b52 <mbedtls_mpi_div_mpi+0x72>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
    7cfe:	2100      	movs	r1, #0
    7d00:	a807      	add	r0, sp, #28
    7d02:	f7ff fba4 	bl	744e <mbedtls_mpi_lset>
    7d06:	4604      	mov	r4, r0
    7d08:	2800      	cmp	r0, #0
    7d0a:	f47f af22 	bne.w	7b52 <mbedtls_mpi_div_mpi+0x72>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    7d0e:	2d01      	cmp	r5, #1
    7d10:	d930      	bls.n	7d74 <mbedtls_mpi_div_mpi+0x294>
    7d12:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
    7d16:	3b02      	subs	r3, #2
    7d18:	9a15      	ldr	r2, [sp, #84]	; 0x54
    7d1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    7d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7d20:	601a      	str	r2, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    7d22:	b34d      	cbz	r5, 7d78 <mbedtls_mpi_div_mpi+0x298>
    7d24:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
    7d28:	3b01      	subs	r3, #1
    7d2a:	9a15      	ldr	r2, [sp, #84]	; 0x54
    7d2c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    7d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7d32:	605a      	str	r2, [r3, #4]
            T2.p[2] = X.p[i];
    7d34:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7d36:	f853 2008 	ldr.w	r2, [r3, r8]
    7d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7d3c:	609a      	str	r2, [r3, #8]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    7d3e:	a907      	add	r1, sp, #28
    7d40:	a80a      	add	r0, sp, #40	; 0x28
    7d42:	f7ff fd04 	bl	774e <mbedtls_mpi_cmp_mpi>
    7d46:	2800      	cmp	r0, #0
    7d48:	dd18      	ble.n	7d7c <mbedtls_mpi_div_mpi+0x29c>
            Z.p[i - t - 1]--;
    7d4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7d4c:	5993      	ldr	r3, [r2, r6]
    7d4e:	3b01      	subs	r3, #1
    7d50:	5193      	str	r3, [r2, r6]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    7d52:	2100      	movs	r1, #0
    7d54:	a80a      	add	r0, sp, #40	; 0x28
    7d56:	f7ff fb7a 	bl	744e <mbedtls_mpi_lset>
    7d5a:	4604      	mov	r4, r0
    7d5c:	2800      	cmp	r0, #0
    7d5e:	f47f aef8 	bne.w	7b52 <mbedtls_mpi_div_mpi+0x72>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    7d62:	2f00      	cmp	r7, #0
    7d64:	d0b9      	beq.n	7cda <mbedtls_mpi_div_mpi+0x1fa>
    7d66:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
    7d6a:	3b02      	subs	r3, #2
    7d6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    7d6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    7d72:	e7b3      	b.n	7cdc <mbedtls_mpi_div_mpi+0x1fc>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    7d74:	2200      	movs	r2, #0
    7d76:	e7d2      	b.n	7d1e <mbedtls_mpi_div_mpi+0x23e>
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    7d78:	462a      	mov	r2, r5
    7d7a:	e7d9      	b.n	7d30 <mbedtls_mpi_div_mpi+0x250>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
    7d7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7d7e:	f853 202a 	ldr.w	r2, [r3, sl, lsl #2]
    7d82:	a910      	add	r1, sp, #64	; 0x40
    7d84:	a80a      	add	r0, sp, #40	; 0x28
    7d86:	f7ff fe9d 	bl	7ac4 <mbedtls_mpi_mul_int>
    7d8a:	4604      	mov	r4, r0
    7d8c:	2800      	cmp	r0, #0
    7d8e:	f47f aee0 	bne.w	7b52 <mbedtls_mpi_div_mpi+0x72>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
    7d92:	9b01      	ldr	r3, [sp, #4]
    7d94:	f103 6600 	add.w	r6, r3, #134217728	; 0x8000000
    7d98:	3e01      	subs	r6, #1
    7d9a:	0176      	lsls	r6, r6, #5
    7d9c:	4631      	mov	r1, r6
    7d9e:	a80a      	add	r0, sp, #40	; 0x28
    7da0:	f7ff fc03 	bl	75aa <mbedtls_mpi_shift_l>
    7da4:	4604      	mov	r4, r0
    7da6:	2800      	cmp	r0, #0
    7da8:	f47f aed3 	bne.w	7b52 <mbedtls_mpi_div_mpi+0x72>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
    7dac:	aa0a      	add	r2, sp, #40	; 0x28
    7dae:	a913      	add	r1, sp, #76	; 0x4c
    7db0:	4608      	mov	r0, r1
    7db2:	f7ff fdf6 	bl	79a2 <mbedtls_mpi_sub_mpi>
    7db6:	4604      	mov	r4, r0
    7db8:	2800      	cmp	r0, #0
    7dba:	f47f aeca 	bne.w	7b52 <mbedtls_mpi_div_mpi+0x72>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
    7dbe:	2100      	movs	r1, #0
    7dc0:	a813      	add	r0, sp, #76	; 0x4c
    7dc2:	f7ff fd0d 	bl	77e0 <mbedtls_mpi_cmp_int>
    7dc6:	2800      	cmp	r0, #0
    7dc8:	db01      	blt.n	7dce <mbedtls_mpi_div_mpi+0x2ee>
    for( i = n; i > t ; i-- )
    7dca:	3d01      	subs	r5, #1
    7dcc:	e74f      	b.n	7c6e <mbedtls_mpi_div_mpi+0x18e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
    7dce:	a910      	add	r1, sp, #64	; 0x40
    7dd0:	a80a      	add	r0, sp, #40	; 0x28
    7dd2:	f7ff fb0a 	bl	73ea <mbedtls_mpi_copy>
    7dd6:	4604      	mov	r4, r0
    7dd8:	2800      	cmp	r0, #0
    7dda:	f47f aeba 	bne.w	7b52 <mbedtls_mpi_div_mpi+0x72>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
    7dde:	4631      	mov	r1, r6
    7de0:	a80a      	add	r0, sp, #40	; 0x28
    7de2:	f7ff fbe2 	bl	75aa <mbedtls_mpi_shift_l>
    7de6:	4604      	mov	r4, r0
    7de8:	2800      	cmp	r0, #0
    7dea:	f47f aeb2 	bne.w	7b52 <mbedtls_mpi_div_mpi+0x72>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
    7dee:	aa0a      	add	r2, sp, #40	; 0x28
    7df0:	a913      	add	r1, sp, #76	; 0x4c
    7df2:	4608      	mov	r0, r1
    7df4:	f7ff fdab 	bl	794e <mbedtls_mpi_add_mpi>
    7df8:	4604      	mov	r4, r0
    7dfa:	2800      	cmp	r0, #0
    7dfc:	f47f aea9 	bne.w	7b52 <mbedtls_mpi_div_mpi+0x72>
            Z.p[i - t - 1]--;
    7e00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7e02:	f852 302a 	ldr.w	r3, [r2, sl, lsl #2]
    7e06:	3b01      	subs	r3, #1
    7e08:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
    7e0c:	e7dd      	b.n	7dca <mbedtls_mpi_div_mpi+0x2ea>
    7e0e:	9e02      	ldr	r6, [sp, #8]
    7e10:	9f03      	ldr	r7, [sp, #12]
    7e12:	9d04      	ldr	r5, [sp, #16]
    7e14:	f8dd b014 	ldr.w	fp, [sp, #20]
    if( Q != NULL )
    7e18:	b16e      	cbz	r6, 7e36 <mbedtls_mpi_div_mpi+0x356>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
    7e1a:	a90d      	add	r1, sp, #52	; 0x34
    7e1c:	4630      	mov	r0, r6
    7e1e:	f7ff fae4 	bl	73ea <mbedtls_mpi_copy>
    7e22:	4604      	mov	r4, r0
    7e24:	2800      	cmp	r0, #0
    7e26:	f47f ae94 	bne.w	7b52 <mbedtls_mpi_div_mpi+0x72>
        Q->s = A->s * B->s;
    7e2a:	682a      	ldr	r2, [r5, #0]
    7e2c:	f8db 3000 	ldr.w	r3, [fp]
    7e30:	fb03 f302 	mul.w	r3, r3, r2
    7e34:	6033      	str	r3, [r6, #0]
    if( R != NULL )
    7e36:	2f00      	cmp	r7, #0
    7e38:	f43f ae8b 	beq.w	7b52 <mbedtls_mpi_div_mpi+0x72>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
    7e3c:	9900      	ldr	r1, [sp, #0]
    7e3e:	a813      	add	r0, sp, #76	; 0x4c
    7e40:	f7ff fc05 	bl	764e <mbedtls_mpi_shift_r>
    7e44:	4604      	mov	r4, r0
    7e46:	2800      	cmp	r0, #0
    7e48:	f47f ae83 	bne.w	7b52 <mbedtls_mpi_div_mpi+0x72>
        X.s = A->s;
    7e4c:	682b      	ldr	r3, [r5, #0]
    7e4e:	9313      	str	r3, [sp, #76]	; 0x4c
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    7e50:	a913      	add	r1, sp, #76	; 0x4c
    7e52:	4638      	mov	r0, r7
    7e54:	f7ff fac9 	bl	73ea <mbedtls_mpi_copy>
    7e58:	4604      	mov	r4, r0
    7e5a:	2800      	cmp	r0, #0
    7e5c:	f47f ae79 	bne.w	7b52 <mbedtls_mpi_div_mpi+0x72>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
    7e60:	2100      	movs	r1, #0
    7e62:	4638      	mov	r0, r7
    7e64:	f7ff fcbc 	bl	77e0 <mbedtls_mpi_cmp_int>
    7e68:	2800      	cmp	r0, #0
    7e6a:	f47f ae72 	bne.w	7b52 <mbedtls_mpi_div_mpi+0x72>
            R->s = 1;
    7e6e:	2301      	movs	r3, #1
    7e70:	603b      	str	r3, [r7, #0]
    7e72:	e66e      	b.n	7b52 <mbedtls_mpi_div_mpi+0x72>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
    7e74:	f06f 040b 	mvn.w	r4, #11
    7e78:	e67a      	b.n	7b70 <mbedtls_mpi_div_mpi+0x90>

00007e7a <mbedtls_mpi_mod_mpi>:
{
    7e7a:	b570      	push	{r4, r5, r6, lr}
    7e7c:	4604      	mov	r4, r0
    7e7e:	460e      	mov	r6, r1
    7e80:	4615      	mov	r5, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    7e82:	2100      	movs	r1, #0
    7e84:	4610      	mov	r0, r2
    7e86:	f7ff fcab 	bl	77e0 <mbedtls_mpi_cmp_int>
    7e8a:	2800      	cmp	r0, #0
    7e8c:	db26      	blt.n	7edc <mbedtls_mpi_mod_mpi+0x62>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
    7e8e:	462b      	mov	r3, r5
    7e90:	4632      	mov	r2, r6
    7e92:	4621      	mov	r1, r4
    7e94:	2000      	movs	r0, #0
    7e96:	f7ff fe23 	bl	7ae0 <mbedtls_mpi_div_mpi>
    7e9a:	4606      	mov	r6, r0
    7e9c:	b968      	cbnz	r0, 7eba <mbedtls_mpi_mod_mpi+0x40>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
    7e9e:	2100      	movs	r1, #0
    7ea0:	4620      	mov	r0, r4
    7ea2:	f7ff fc9d 	bl	77e0 <mbedtls_mpi_cmp_int>
    7ea6:	2800      	cmp	r0, #0
    7ea8:	da09      	bge.n	7ebe <mbedtls_mpi_mod_mpi+0x44>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
    7eaa:	462a      	mov	r2, r5
    7eac:	4621      	mov	r1, r4
    7eae:	4620      	mov	r0, r4
    7eb0:	f7ff fd4d 	bl	794e <mbedtls_mpi_add_mpi>
    7eb4:	4606      	mov	r6, r0
    7eb6:	2800      	cmp	r0, #0
    7eb8:	d0f1      	beq.n	7e9e <mbedtls_mpi_mod_mpi+0x24>
}
    7eba:	4630      	mov	r0, r6
    7ebc:	bd70      	pop	{r4, r5, r6, pc}
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
    7ebe:	4629      	mov	r1, r5
    7ec0:	4620      	mov	r0, r4
    7ec2:	f7ff fc44 	bl	774e <mbedtls_mpi_cmp_mpi>
    7ec6:	2800      	cmp	r0, #0
    7ec8:	dbf7      	blt.n	7eba <mbedtls_mpi_mod_mpi+0x40>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
    7eca:	462a      	mov	r2, r5
    7ecc:	4621      	mov	r1, r4
    7ece:	4620      	mov	r0, r4
    7ed0:	f7ff fd67 	bl	79a2 <mbedtls_mpi_sub_mpi>
    7ed4:	4606      	mov	r6, r0
    7ed6:	2800      	cmp	r0, #0
    7ed8:	d0f1      	beq.n	7ebe <mbedtls_mpi_mod_mpi+0x44>
    7eda:	e7ee      	b.n	7eba <mbedtls_mpi_mod_mpi+0x40>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    7edc:	f06f 0609 	mvn.w	r6, #9
    7ee0:	e7eb      	b.n	7eba <mbedtls_mpi_mod_mpi+0x40>

00007ee2 <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
    7ee2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ee6:	f2ad 6d4c 	subw	sp, sp, #1612	; 0x64c
    7eea:	9004      	str	r0, [sp, #16]
    7eec:	4689      	mov	r9, r1
    7eee:	4614      	mov	r4, r2
    7ef0:	9205      	str	r2, [sp, #20]
    7ef2:	461d      	mov	r5, r3
    7ef4:	f8dd 7670 	ldr.w	r7, [sp, #1648]	; 0x670
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    7ef8:	2100      	movs	r1, #0
    7efa:	4618      	mov	r0, r3
    7efc:	f7ff fc70 	bl	77e0 <mbedtls_mpi_cmp_int>
    7f00:	2800      	cmp	r0, #0
    7f02:	f340 81f6 	ble.w	82f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f2>
    7f06:	68ab      	ldr	r3, [r5, #8]
    7f08:	681e      	ldr	r6, [r3, #0]
    7f0a:	f016 0601 	ands.w	r6, r6, #1
    7f0e:	f000 81f4 	beq.w	82fa <CONFIG_FPROTECT_BLOCK_SIZE+0x2fa>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
    7f12:	2100      	movs	r1, #0
    7f14:	4620      	mov	r0, r4
    7f16:	f7ff fc63 	bl	77e0 <mbedtls_mpi_cmp_int>
    7f1a:	2800      	cmp	r0, #0
    7f1c:	f2c0 81f1 	blt.w	8302 <CONFIG_FPROTECT_BLOCK_SIZE+0x302>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    /*
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    7f20:	4629      	mov	r1, r5
    7f22:	f20d 6044 	addw	r0, sp, #1604	; 0x644
    7f26:	f7ff f995 	bl	7254 <mpi_montg_init>
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    7f2a:	f50d 60c7 	add.w	r0, sp, #1592	; 0x638
    7f2e:	f7ff fa1b 	bl	7368 <mbedtls_mpi_init>
    7f32:	f20d 602c 	addw	r0, sp, #1580	; 0x62c
    7f36:	f7ff fa17 	bl	7368 <mbedtls_mpi_init>
    mbedtls_mpi_init( &Apos );
    7f3a:	a808      	add	r0, sp, #32
    7f3c:	f7ff fa14 	bl	7368 <mbedtls_mpi_init>
    memset( W, 0, sizeof( W ) );
    7f40:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    7f44:	2100      	movs	r1, #0
    7f46:	a80b      	add	r0, sp, #44	; 0x2c
    7f48:	f7fe fb94 	bl	6674 <memset>

    i = mbedtls_mpi_bitlen( E );
    7f4c:	4620      	mov	r0, r4
    7f4e:	f7ff faac 	bl	74aa <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    7f52:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
    7f56:	d207      	bcs.n	7f68 <mbedtls_mpi_exp_mod+0x86>
    7f58:	28ef      	cmp	r0, #239	; 0xef
    7f5a:	d820      	bhi.n	7f9e <mbedtls_mpi_exp_mod+0xbc>
    7f5c:	284f      	cmp	r0, #79	; 0x4f
    7f5e:	d820      	bhi.n	7fa2 <mbedtls_mpi_exp_mod+0xc0>
    7f60:	2817      	cmp	r0, #23
    7f62:	d920      	bls.n	7fa6 <mbedtls_mpi_exp_mod+0xc4>
    7f64:	2403      	movs	r4, #3
    7f66:	e000      	b.n	7f6a <mbedtls_mpi_exp_mod+0x88>
    7f68:	2406      	movs	r4, #6
#if( MBEDTLS_MPI_WINDOW_SIZE < 6 )
    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
    7f6a:	686b      	ldr	r3, [r5, #4]
    7f6c:	f103 0801 	add.w	r8, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    7f70:	4641      	mov	r1, r8
    7f72:	9804      	ldr	r0, [sp, #16]
    7f74:	f7ff fa10 	bl	7398 <mbedtls_mpi_grow>
    7f78:	9003      	str	r0, [sp, #12]
    7f7a:	b1b0      	cbz	r0, 7faa <mbedtls_mpi_exp_mod+0xc8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    7f7c:	1e63      	subs	r3, r4, #1
    7f7e:	2501      	movs	r5, #1
    7f80:	409d      	lsls	r5, r3
    7f82:	2301      	movs	r3, #1
    7f84:	40a3      	lsls	r3, r4
    7f86:	42ab      	cmp	r3, r5
    7f88:	f240 819c 	bls.w	82c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c4>
        mbedtls_mpi_free( &W[i] );
    7f8c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    7f90:	0098      	lsls	r0, r3, #2
    7f92:	ab0b      	add	r3, sp, #44	; 0x2c
    7f94:	4418      	add	r0, r3
    7f96:	f7ff f9ed 	bl	7374 <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    7f9a:	3501      	adds	r5, #1
    7f9c:	e7f1      	b.n	7f82 <mbedtls_mpi_exp_mod+0xa0>
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    7f9e:	2405      	movs	r4, #5
    7fa0:	e7e3      	b.n	7f6a <mbedtls_mpi_exp_mod+0x88>
    7fa2:	2404      	movs	r4, #4
    7fa4:	e7e1      	b.n	7f6a <mbedtls_mpi_exp_mod+0x88>
    7fa6:	4634      	mov	r4, r6
    7fa8:	e7df      	b.n	7f6a <mbedtls_mpi_exp_mod+0x88>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
    7faa:	4641      	mov	r1, r8
    7fac:	a80e      	add	r0, sp, #56	; 0x38
    7fae:	f7ff f9f3 	bl	7398 <mbedtls_mpi_grow>
    7fb2:	9003      	str	r0, [sp, #12]
    7fb4:	2800      	cmp	r0, #0
    7fb6:	d1e1      	bne.n	7f7c <mbedtls_mpi_exp_mod+0x9a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
    7fb8:	ea4f 0148 	mov.w	r1, r8, lsl #1
    7fbc:	f20d 602c 	addw	r0, sp, #1580	; 0x62c
    7fc0:	f7ff f9ea 	bl	7398 <mbedtls_mpi_grow>
    7fc4:	9003      	str	r0, [sp, #12]
    7fc6:	2800      	cmp	r0, #0
    7fc8:	d1d8      	bne.n	7f7c <mbedtls_mpi_exp_mod+0x9a>
    neg = ( A->s == -1 );
    7fca:	f8d9 3000 	ldr.w	r3, [r9]
    7fce:	9307      	str	r3, [sp, #28]
    if( neg )
    7fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7fd4:	d040      	beq.n	8058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>
    if( _RR == NULL || _RR->p == NULL )
    7fd6:	2f00      	cmp	r7, #0
    7fd8:	d04a      	beq.n	8070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>
    7fda:	68bb      	ldr	r3, [r7, #8]
    7fdc:	2b00      	cmp	r3, #0
    7fde:	d047      	beq.n	8070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
    7fe0:	220c      	movs	r2, #12
    7fe2:	4639      	mov	r1, r7
    7fe4:	f50d 60c7 	add.w	r0, sp, #1592	; 0x638
    7fe8:	f7fe fb21 	bl	662e <memcpy>
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
    7fec:	4629      	mov	r1, r5
    7fee:	4648      	mov	r0, r9
    7ff0:	f7ff fbad 	bl	774e <mbedtls_mpi_cmp_mpi>
    7ff4:	2800      	cmp	r0, #0
    7ff6:	db61      	blt.n	80bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    7ff8:	462a      	mov	r2, r5
    7ffa:	4649      	mov	r1, r9
    7ffc:	a80e      	add	r0, sp, #56	; 0x38
    7ffe:	f7ff ff3c 	bl	7e7a <mbedtls_mpi_mod_mpi>
    8002:	9003      	str	r0, [sp, #12]
    8004:	2800      	cmp	r0, #0
    8006:	d1b9      	bne.n	7f7c <mbedtls_mpi_exp_mod+0x9a>
    mpi_montmul( &W[1], &RR, N, mm, &T );
    8008:	f20d 632c 	addw	r3, sp, #1580	; 0x62c
    800c:	9300      	str	r3, [sp, #0]
    800e:	f8dd 3644 	ldr.w	r3, [sp, #1604]	; 0x644
    8012:	462a      	mov	r2, r5
    8014:	f50d 61c7 	add.w	r1, sp, #1592	; 0x638
    8018:	a80e      	add	r0, sp, #56	; 0x38
    801a:	f7ff f937 	bl	728c <mpi_montmul>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    801e:	f50d 61c7 	add.w	r1, sp, #1592	; 0x638
    8022:	f8dd 8010 	ldr.w	r8, [sp, #16]
    8026:	4640      	mov	r0, r8
    8028:	f7ff f9df 	bl	73ea <mbedtls_mpi_copy>
    802c:	9003      	str	r0, [sp, #12]
    802e:	2800      	cmp	r0, #0
    8030:	d1a4      	bne.n	7f7c <mbedtls_mpi_exp_mod+0x9a>
    mpi_montred( X, N, mm, &T );
    8032:	f20d 632c 	addw	r3, sp, #1580	; 0x62c
    8036:	f8dd 2644 	ldr.w	r2, [sp, #1604]	; 0x644
    803a:	4629      	mov	r1, r5
    803c:	4640      	mov	r0, r8
    803e:	f7ff f983 	bl	7348 <mpi_montred>
    if( wsize > 1 )
    8042:	2c01      	cmp	r4, #1
    8044:	d842      	bhi.n	80cc <CONFIG_FPROTECT_BLOCK_SIZE+0xcc>
    nblimbs = E->n;
    8046:	9b05      	ldr	r3, [sp, #20]
    8048:	f8d3 9004 	ldr.w	r9, [r3, #4]
    state   = 0;
    804c:	2300      	movs	r3, #0
    804e:	9306      	str	r3, [sp, #24]
    nbits   = 0;
    8050:	469a      	mov	sl, r3
    bufsize = 0;
    8052:	4698      	mov	r8, r3
    wbits   = 0;
    8054:	469b      	mov	fp, r3
    8056:	e0a7      	b.n	81a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
    8058:	4649      	mov	r1, r9
    805a:	a808      	add	r0, sp, #32
    805c:	f7ff f9c5 	bl	73ea <mbedtls_mpi_copy>
    8060:	9003      	str	r0, [sp, #12]
    8062:	2800      	cmp	r0, #0
    8064:	d18a      	bne.n	7f7c <mbedtls_mpi_exp_mod+0x9a>
        Apos.s = 1;
    8066:	2301      	movs	r3, #1
    8068:	9308      	str	r3, [sp, #32]
        A = &Apos;
    806a:	f10d 0920 	add.w	r9, sp, #32
    806e:	e7b2      	b.n	7fd6 <mbedtls_mpi_exp_mod+0xf4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
    8070:	2101      	movs	r1, #1
    8072:	f50d 60c7 	add.w	r0, sp, #1592	; 0x638
    8076:	f7ff f9ea 	bl	744e <mbedtls_mpi_lset>
    807a:	9003      	str	r0, [sp, #12]
    807c:	2800      	cmp	r0, #0
    807e:	f47f af7d 	bne.w	7f7c <mbedtls_mpi_exp_mod+0x9a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
    8082:	6869      	ldr	r1, [r5, #4]
    8084:	0189      	lsls	r1, r1, #6
    8086:	f50d 60c7 	add.w	r0, sp, #1592	; 0x638
    808a:	f7ff fa8e 	bl	75aa <mbedtls_mpi_shift_l>
    808e:	9003      	str	r0, [sp, #12]
    8090:	2800      	cmp	r0, #0
    8092:	f47f af73 	bne.w	7f7c <mbedtls_mpi_exp_mod+0x9a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
    8096:	462a      	mov	r2, r5
    8098:	f50d 61c7 	add.w	r1, sp, #1592	; 0x638
    809c:	4608      	mov	r0, r1
    809e:	f7ff feec 	bl	7e7a <mbedtls_mpi_mod_mpi>
    80a2:	9003      	str	r0, [sp, #12]
    80a4:	2800      	cmp	r0, #0
    80a6:	f47f af69 	bne.w	7f7c <mbedtls_mpi_exp_mod+0x9a>
        if( _RR != NULL )
    80aa:	2f00      	cmp	r7, #0
    80ac:	d09e      	beq.n	7fec <mbedtls_mpi_exp_mod+0x10a>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
    80ae:	220c      	movs	r2, #12
    80b0:	f50d 61c7 	add.w	r1, sp, #1592	; 0x638
    80b4:	4638      	mov	r0, r7
    80b6:	f7fe faba 	bl	662e <memcpy>
    80ba:	e797      	b.n	7fec <mbedtls_mpi_exp_mod+0x10a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
    80bc:	4649      	mov	r1, r9
    80be:	a80e      	add	r0, sp, #56	; 0x38
    80c0:	f7ff f993 	bl	73ea <mbedtls_mpi_copy>
    80c4:	9003      	str	r0, [sp, #12]
    80c6:	2800      	cmp	r0, #0
    80c8:	d09e      	beq.n	8008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
    80ca:	e757      	b.n	7f7c <mbedtls_mpi_exp_mod+0x9a>
        j =  one << ( wsize - 1 );
    80cc:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
    80d0:	f04f 0801 	mov.w	r8, #1
    80d4:	fa08 fa09 	lsl.w	sl, r8, r9
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    80d8:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
    80dc:	ea4f 0b83 	mov.w	fp, r3, lsl #2
    80e0:	ab0b      	add	r3, sp, #44	; 0x2c
    80e2:	449b      	add	fp, r3
    80e4:	6869      	ldr	r1, [r5, #4]
    80e6:	4441      	add	r1, r8
    80e8:	4658      	mov	r0, fp
    80ea:	f7ff f955 	bl	7398 <mbedtls_mpi_grow>
    80ee:	9003      	str	r0, [sp, #12]
    80f0:	2800      	cmp	r0, #0
    80f2:	f47f af43 	bne.w	7f7c <mbedtls_mpi_exp_mod+0x9a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
    80f6:	a90e      	add	r1, sp, #56	; 0x38
    80f8:	4658      	mov	r0, fp
    80fa:	f7ff f976 	bl	73ea <mbedtls_mpi_copy>
    80fe:	9003      	str	r0, [sp, #12]
    8100:	2800      	cmp	r0, #0
    8102:	f47f af3b 	bne.w	7f7c <mbedtls_mpi_exp_mod+0x9a>
        for( i = 0; i < wsize - 1; i++ )
    8106:	f04f 0800 	mov.w	r8, #0
    810a:	e00b      	b.n	8124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    810c:	f20d 632c 	addw	r3, sp, #1580	; 0x62c
    8110:	9300      	str	r3, [sp, #0]
    8112:	f8dd 3644 	ldr.w	r3, [sp, #1604]	; 0x644
    8116:	462a      	mov	r2, r5
    8118:	4659      	mov	r1, fp
    811a:	4658      	mov	r0, fp
    811c:	f7ff f8b6 	bl	728c <mpi_montmul>
        for( i = 0; i < wsize - 1; i++ )
    8120:	f108 0801 	add.w	r8, r8, #1
    8124:	45c1      	cmp	r9, r8
    8126:	d8f1      	bhi.n	810c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
        for( i = j + 1; i < ( one << wsize ); i++ )
    8128:	f10a 0a01 	add.w	sl, sl, #1
    812c:	e00b      	b.n	8146 <CONFIG_FPROTECT_BLOCK_SIZE+0x146>
            mpi_montmul( &W[i], &W[1], N, mm, &T );
    812e:	f20d 632c 	addw	r3, sp, #1580	; 0x62c
    8132:	9300      	str	r3, [sp, #0]
    8134:	f8dd 3644 	ldr.w	r3, [sp, #1604]	; 0x644
    8138:	462a      	mov	r2, r5
    813a:	a90e      	add	r1, sp, #56	; 0x38
    813c:	4640      	mov	r0, r8
    813e:	f7ff f8a5 	bl	728c <mpi_montmul>
        for( i = j + 1; i < ( one << wsize ); i++ )
    8142:	f10a 0a01 	add.w	sl, sl, #1
    8146:	2301      	movs	r3, #1
    8148:	40a3      	lsls	r3, r4
    814a:	4553      	cmp	r3, sl
    814c:	f67f af7b 	bls.w	8046 <CONFIG_FPROTECT_BLOCK_SIZE+0x46>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
    8150:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
    8154:	ea4f 0883 	mov.w	r8, r3, lsl #2
    8158:	ab0b      	add	r3, sp, #44	; 0x2c
    815a:	4498      	add	r8, r3
    815c:	6869      	ldr	r1, [r5, #4]
    815e:	3101      	adds	r1, #1
    8160:	4640      	mov	r0, r8
    8162:	f7ff f919 	bl	7398 <mbedtls_mpi_grow>
    8166:	9003      	str	r0, [sp, #12]
    8168:	2800      	cmp	r0, #0
    816a:	f47f af07 	bne.w	7f7c <mbedtls_mpi_exp_mod+0x9a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    816e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    8172:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8176:	0099      	lsls	r1, r3, #2
    8178:	ab0b      	add	r3, sp, #44	; 0x2c
    817a:	4419      	add	r1, r3
    817c:	4640      	mov	r0, r8
    817e:	f7ff f934 	bl	73ea <mbedtls_mpi_copy>
    8182:	9003      	str	r0, [sp, #12]
    8184:	2800      	cmp	r0, #0
    8186:	d0d2      	beq.n	812e <CONFIG_FPROTECT_BLOCK_SIZE+0x12e>
    8188:	e6f8      	b.n	7f7c <mbedtls_mpi_exp_mod+0x9a>
        if( ei == 0 && state == 1 )
    818a:	b913      	cbnz	r3, 8192 <CONFIG_FPROTECT_BLOCK_SIZE+0x192>
    818c:	9a06      	ldr	r2, [sp, #24]
    818e:	2a01      	cmp	r2, #1
    8190:	d023      	beq.n	81da <CONFIG_FPROTECT_BLOCK_SIZE+0x1da>
        nbits++;
    8192:	f10a 0a01 	add.w	sl, sl, #1
        wbits |= ( ei << ( wsize - nbits ) );
    8196:	eba4 020a 	sub.w	r2, r4, sl
    819a:	4093      	lsls	r3, r2
    819c:	ea4b 0b03 	orr.w	fp, fp, r3
        if( nbits == wsize )
    81a0:	4554      	cmp	r4, sl
    81a2:	d047      	beq.n	8234 <CONFIG_FPROTECT_BLOCK_SIZE+0x234>
        state = 2;
    81a4:	2302      	movs	r3, #2
    81a6:	9306      	str	r3, [sp, #24]
        if( bufsize == 0 )
    81a8:	f1b8 0f00 	cmp.w	r8, #0
    81ac:	d106      	bne.n	81bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
            if( nblimbs == 0 )
    81ae:	f1b9 0f00 	cmp.w	r9, #0
    81b2:	d062      	beq.n	827a <CONFIG_FPROTECT_BLOCK_SIZE+0x27a>
            nblimbs--;
    81b4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    81b8:	f04f 0820 	mov.w	r8, #32
        bufsize--;
    81bc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
        ei = (E->p[nblimbs] >> bufsize) & 1;
    81c0:	9b05      	ldr	r3, [sp, #20]
    81c2:	689b      	ldr	r3, [r3, #8]
    81c4:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
    81c8:	fa23 f308 	lsr.w	r3, r3, r8
        if( ei == 0 && state == 0 )
    81cc:	f013 0301 	ands.w	r3, r3, #1
    81d0:	d1db      	bne.n	818a <CONFIG_FPROTECT_BLOCK_SIZE+0x18a>
    81d2:	9a06      	ldr	r2, [sp, #24]
    81d4:	2a00      	cmp	r2, #0
    81d6:	d1d8      	bne.n	818a <CONFIG_FPROTECT_BLOCK_SIZE+0x18a>
    81d8:	e7e6      	b.n	81a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a8>
            mpi_montmul( X, X, N, mm, &T );
    81da:	f20d 632c 	addw	r3, sp, #1580	; 0x62c
    81de:	9300      	str	r3, [sp, #0]
    81e0:	f8dd 3644 	ldr.w	r3, [sp, #1604]	; 0x644
    81e4:	462a      	mov	r2, r5
    81e6:	9804      	ldr	r0, [sp, #16]
    81e8:	4601      	mov	r1, r0
    81ea:	f7ff f84f 	bl	728c <mpi_montmul>
            continue;
    81ee:	e7db      	b.n	81a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a8>
                mpi_montmul( X, X, N, mm, &T );
    81f0:	f20d 632c 	addw	r3, sp, #1580	; 0x62c
    81f4:	9300      	str	r3, [sp, #0]
    81f6:	f8dd 3644 	ldr.w	r3, [sp, #1604]	; 0x644
    81fa:	462a      	mov	r2, r5
    81fc:	9804      	ldr	r0, [sp, #16]
    81fe:	4601      	mov	r1, r0
    8200:	f7ff f844 	bl	728c <mpi_montmul>
            for( i = 0; i < wsize; i++ )
    8204:	f10a 0a01 	add.w	sl, sl, #1
    8208:	45a2      	cmp	sl, r4
    820a:	d3f1      	bcc.n	81f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f0>
            mpi_montmul( X, &W[wbits], N, mm, &T );
    820c:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    8210:	ea4f 018b 	mov.w	r1, fp, lsl #2
    8214:	f20d 632c 	addw	r3, sp, #1580	; 0x62c
    8218:	9300      	str	r3, [sp, #0]
    821a:	f8dd 3644 	ldr.w	r3, [sp, #1604]	; 0x644
    821e:	462a      	mov	r2, r5
    8220:	a80b      	add	r0, sp, #44	; 0x2c
    8222:	4401      	add	r1, r0
    8224:	9804      	ldr	r0, [sp, #16]
    8226:	f7ff f831 	bl	728c <mpi_montmul>
            state--;
    822a:	9606      	str	r6, [sp, #24]
            nbits = 0;
    822c:	f04f 0b00 	mov.w	fp, #0
            wbits = 0;
    8230:	46da      	mov	sl, fp
    8232:	e7b9      	b.n	81a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a8>
            for( i = 0; i < wsize; i++ )
    8234:	f04f 0a00 	mov.w	sl, #0
    8238:	e7e6      	b.n	8208 <CONFIG_FPROTECT_BLOCK_SIZE+0x208>
    for( i = 0; i < nbits; i++ )
    823a:	f109 0901 	add.w	r9, r9, #1
    823e:	45d1      	cmp	r9, sl
    8240:	d21d      	bcs.n	827e <CONFIG_FPROTECT_BLOCK_SIZE+0x27e>
        mpi_montmul( X, X, N, mm, &T );
    8242:	f20d 632c 	addw	r3, sp, #1580	; 0x62c
    8246:	9300      	str	r3, [sp, #0]
    8248:	f8dd 3644 	ldr.w	r3, [sp, #1604]	; 0x644
    824c:	462a      	mov	r2, r5
    824e:	4631      	mov	r1, r6
    8250:	4630      	mov	r0, r6
    8252:	f7ff f81b 	bl	728c <mpi_montmul>
        wbits <<= 1;
    8256:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
        if( ( wbits & ( one << wsize ) ) != 0 )
    825a:	2301      	movs	r3, #1
    825c:	40a3      	lsls	r3, r4
    825e:	ea13 0f0b 	tst.w	r3, fp
    8262:	d0ea      	beq.n	823a <CONFIG_FPROTECT_BLOCK_SIZE+0x23a>
            mpi_montmul( X, &W[1], N, mm, &T );
    8264:	f20d 632c 	addw	r3, sp, #1580	; 0x62c
    8268:	9300      	str	r3, [sp, #0]
    826a:	f8dd 3644 	ldr.w	r3, [sp, #1604]	; 0x644
    826e:	462a      	mov	r2, r5
    8270:	a90e      	add	r1, sp, #56	; 0x38
    8272:	4630      	mov	r0, r6
    8274:	f7ff f80a 	bl	728c <mpi_montmul>
    8278:	e7df      	b.n	823a <CONFIG_FPROTECT_BLOCK_SIZE+0x23a>
    827a:	9e04      	ldr	r6, [sp, #16]
    827c:	e7df      	b.n	823e <CONFIG_FPROTECT_BLOCK_SIZE+0x23e>
    827e:	4630      	mov	r0, r6
    8280:	9604      	str	r6, [sp, #16]
    mpi_montred( X, N, mm, &T );
    8282:	f20d 632c 	addw	r3, sp, #1580	; 0x62c
    8286:	f8dd 2644 	ldr.w	r2, [sp, #1604]	; 0x644
    828a:	4629      	mov	r1, r5
    828c:	f7ff f85c 	bl	7348 <mpi_montred>
    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    8290:	9b07      	ldr	r3, [sp, #28]
    8292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    8296:	f47f ae71 	bne.w	7f7c <mbedtls_mpi_exp_mod+0x9a>
    829a:	9a05      	ldr	r2, [sp, #20]
    829c:	6853      	ldr	r3, [r2, #4]
    829e:	2b00      	cmp	r3, #0
    82a0:	f43f ae6c 	beq.w	7f7c <mbedtls_mpi_exp_mod+0x9a>
    82a4:	6893      	ldr	r3, [r2, #8]
    82a6:	681b      	ldr	r3, [r3, #0]
    82a8:	f013 0f01 	tst.w	r3, #1
    82ac:	f43f ae66 	beq.w	7f7c <mbedtls_mpi_exp_mod+0x9a>
        X->s = -1;
    82b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    82b4:	9804      	ldr	r0, [sp, #16]
    82b6:	4602      	mov	r2, r0
    82b8:	6003      	str	r3, [r0, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    82ba:	4629      	mov	r1, r5
    82bc:	f7ff fb47 	bl	794e <mbedtls_mpi_add_mpi>
    82c0:	9003      	str	r0, [sp, #12]
cleanup:
    82c2:	e65b      	b.n	7f7c <mbedtls_mpi_exp_mod+0x9a>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
    82c4:	a80e      	add	r0, sp, #56	; 0x38
    82c6:	f7ff f855 	bl	7374 <mbedtls_mpi_free>
    82ca:	f20d 602c 	addw	r0, sp, #1580	; 0x62c
    82ce:	f7ff f851 	bl	7374 <mbedtls_mpi_free>
    82d2:	a808      	add	r0, sp, #32
    82d4:	f7ff f84e 	bl	7374 <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
    82d8:	b137      	cbz	r7, 82e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>
    82da:	68bb      	ldr	r3, [r7, #8]
    82dc:	b123      	cbz	r3, 82e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>
        mbedtls_mpi_free( &RR );

    return( ret );
}
    82de:	9803      	ldr	r0, [sp, #12]
    82e0:	f20d 6d4c 	addw	sp, sp, #1612	; 0x64c
    82e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mbedtls_mpi_free( &RR );
    82e8:	f50d 60c7 	add.w	r0, sp, #1592	; 0x638
    82ec:	f7ff f842 	bl	7374 <mbedtls_mpi_free>
    82f0:	e7f5      	b.n	82de <CONFIG_FPROTECT_BLOCK_SIZE+0x2de>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    82f2:	f06f 0303 	mvn.w	r3, #3
    82f6:	9303      	str	r3, [sp, #12]
    82f8:	e7f1      	b.n	82de <CONFIG_FPROTECT_BLOCK_SIZE+0x2de>
    82fa:	f06f 0303 	mvn.w	r3, #3
    82fe:	9303      	str	r3, [sp, #12]
    8300:	e7ed      	b.n	82de <CONFIG_FPROTECT_BLOCK_SIZE+0x2de>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    8302:	f06f 0303 	mvn.w	r3, #3
    8306:	9303      	str	r3, [sp, #12]
    8308:	e7e9      	b.n	82de <CONFIG_FPROTECT_BLOCK_SIZE+0x2de>

0000830a <platform_calloc_uninit>:
}
    830a:	2000      	movs	r0, #0
    830c:	4770      	bx	lr

0000830e <platform_free_uninit>:
}
    830e:	4770      	bx	lr

00008310 <platform_exit_uninit>:
 * Make dummy function to prevent NULL pointer dereferences
 */
static void platform_exit_uninit( int status )
{
    ((void) status);
}
    8310:	4770      	bx	lr

00008312 <mbedtls_rsa_import>:
{
    8312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8314:	4604      	mov	r4, r0
    8316:	4615      	mov	r5, r2
    8318:	461e      	mov	r6, r3
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    831a:	460f      	mov	r7, r1
    831c:	b121      	cbz	r1, 8328 <mbedtls_rsa_import+0x16>
    831e:	3008      	adds	r0, #8
    8320:	f7ff f863 	bl	73ea <mbedtls_mpi_copy>
    8324:	4603      	mov	r3, r0
    8326:	bb48      	cbnz	r0, 837c <mbedtls_rsa_import+0x6a>
    8328:	b135      	cbz	r5, 8338 <mbedtls_rsa_import+0x26>
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    832a:	4629      	mov	r1, r5
    832c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8330:	f7ff f85b 	bl	73ea <mbedtls_mpi_copy>
    8334:	4603      	mov	r3, r0
    8336:	bb08      	cbnz	r0, 837c <mbedtls_rsa_import+0x6a>
    8338:	b136      	cbz	r6, 8348 <mbedtls_rsa_import+0x36>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    833a:	4631      	mov	r1, r6
    833c:	f104 0038 	add.w	r0, r4, #56	; 0x38
    8340:	f7ff f853 	bl	73ea <mbedtls_mpi_copy>
    8344:	4603      	mov	r3, r0
    8346:	b9c8      	cbnz	r0, 837c <mbedtls_rsa_import+0x6a>
    8348:	9b06      	ldr	r3, [sp, #24]
    834a:	b133      	cbz	r3, 835a <mbedtls_rsa_import+0x48>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    834c:	4619      	mov	r1, r3
    834e:	f104 0020 	add.w	r0, r4, #32
    8352:	f7ff f84a 	bl	73ea <mbedtls_mpi_copy>
    8356:	4603      	mov	r3, r0
    8358:	b980      	cbnz	r0, 837c <mbedtls_rsa_import+0x6a>
    835a:	9b07      	ldr	r3, [sp, #28]
    835c:	b133      	cbz	r3, 836c <mbedtls_rsa_import+0x5a>
        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )
    835e:	4619      	mov	r1, r3
    8360:	f104 0014 	add.w	r0, r4, #20
    8364:	f7ff f841 	bl	73ea <mbedtls_mpi_copy>
    8368:	4603      	mov	r3, r0
    836a:	b938      	cbnz	r0, 837c <mbedtls_rsa_import+0x6a>
    if( N != NULL )
    836c:	b14f      	cbz	r7, 8382 <mbedtls_rsa_import+0x70>
        ctx->len = mbedtls_mpi_size( &ctx->N );
    836e:	f104 0008 	add.w	r0, r4, #8
    8372:	f7ff f8b0 	bl	74d6 <mbedtls_mpi_size>
    8376:	6060      	str	r0, [r4, #4]
    return( 0 );
    8378:	2000      	movs	r0, #0
    837a:	e001      	b.n	8380 <mbedtls_rsa_import+0x6e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
    837c:	f5a3 4081 	sub.w	r0, r3, #16512	; 0x4080
}
    8380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return( 0 );
    8382:	2000      	movs	r0, #0
    8384:	e7fc      	b.n	8380 <mbedtls_rsa_import+0x6e>

00008386 <mbedtls_rsa_set_padding>:
    ctx->padding = padding;
    8386:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
    ctx->hash_id = hash_id;
    838a:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
}
    838e:	4770      	bx	lr

00008390 <mbedtls_rsa_init>:
{
    8390:	b570      	push	{r4, r5, r6, lr}
    8392:	4604      	mov	r4, r0
    8394:	460d      	mov	r5, r1
    8396:	4616      	mov	r6, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    8398:	22ac      	movs	r2, #172	; 0xac
    839a:	2100      	movs	r1, #0
    839c:	f7fe f96a 	bl	6674 <memset>
    mbedtls_rsa_set_padding( ctx, padding, hash_id );
    83a0:	4632      	mov	r2, r6
    83a2:	4629      	mov	r1, r5
    83a4:	4620      	mov	r0, r4
    83a6:	f7ff ffee 	bl	8386 <mbedtls_rsa_set_padding>
}
    83aa:	bd70      	pop	{r4, r5, r6, pc}

000083ac <mbedtls_rsa_free>:
/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
    if( ctx == NULL )
    83ac:	b3a8      	cbz	r0, 841a <mbedtls_rsa_free+0x6e>
{
    83ae:	b510      	push	{r4, lr}
    83b0:	4604      	mov	r4, r0
        return;

    mbedtls_mpi_free( &ctx->Vi );
    83b2:	308c      	adds	r0, #140	; 0x8c
    83b4:	f7fe ffde 	bl	7374 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
    83b8:	f104 0098 	add.w	r0, r4, #152	; 0x98
    83bc:	f7fe ffda 	bl	7374 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
    83c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
    83c4:	f7fe ffd6 	bl	7374 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
    83c8:	f104 0020 	add.w	r0, r4, #32
    83cc:	f7fe ffd2 	bl	7374 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
    83d0:	f104 0038 	add.w	r0, r4, #56	; 0x38
    83d4:	f7fe ffce 	bl	7374 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
    83d8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    83dc:	f7fe ffca 	bl	7374 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
    83e0:	f104 0014 	add.w	r0, r4, #20
    83e4:	f7fe ffc6 	bl	7374 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
    83e8:	f104 0008 	add.w	r0, r4, #8
    83ec:	f7fe ffc2 	bl	7374 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    83f0:	f104 0080 	add.w	r0, r4, #128	; 0x80
    83f4:	f7fe ffbe 	bl	7374 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
    83f8:	f104 0074 	add.w	r0, r4, #116	; 0x74
    83fc:	f7fe ffba 	bl	7374 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
    8400:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    8404:	f7fe ffb6 	bl	7374 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
    8408:	f104 0050 	add.w	r0, r4, #80	; 0x50
    840c:	f7fe ffb2 	bl	7374 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
    8410:	f104 0044 	add.w	r0, r4, #68	; 0x44
    8414:	f7fe ffae 	bl	7374 <mbedtls_mpi_free>
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
    8418:	bd10      	pop	{r4, pc}
    841a:	4770      	bx	lr

0000841c <mbedtls_sha256_init>:
{
    841c:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    841e:	226c      	movs	r2, #108	; 0x6c
    8420:	2100      	movs	r1, #0
    8422:	f7fe f927 	bl	6674 <memset>
}
    8426:	bd08      	pop	{r3, pc}

00008428 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    8428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
    842c:	b3da      	cbz	r2, 84a6 <mbedtls_sha256_update_ret+0x7e>
    842e:	4606      	mov	r6, r0
    8430:	460d      	mov	r5, r1
    8432:	4614      	mov	r4, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
    8434:	6803      	ldr	r3, [r0, #0]
    8436:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;
    843a:	f1c7 0840 	rsb	r8, r7, #64	; 0x40

    ctx->total[0] += (uint32_t) ilen;
    843e:	4413      	add	r3, r2
    8440:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
    8442:	4293      	cmp	r3, r2
    8444:	d202      	bcs.n	844c <mbedtls_sha256_update_ret+0x24>
        ctx->total[1]++;
    8446:	6843      	ldr	r3, [r0, #4]
    8448:	3301      	adds	r3, #1
    844a:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
    844c:	b10f      	cbz	r7, 8452 <mbedtls_sha256_update_ret+0x2a>
    844e:	4544      	cmp	r4, r8
    8450:	d20a      	bcs.n	8468 <mbedtls_sha256_update_ret+0x40>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
    8452:	2c3f      	cmp	r4, #63	; 0x3f
    8454:	d91b      	bls.n	848e <mbedtls_sha256_update_ret+0x66>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    8456:	4629      	mov	r1, r5
    8458:	4630      	mov	r0, r6
    845a:	f7fb fd47 	bl	3eec <mbedtls_internal_sha256_process>
    845e:	4603      	mov	r3, r0
    8460:	bb10      	cbnz	r0, 84a8 <mbedtls_sha256_update_ret+0x80>
            return( ret );

        input += 64;
    8462:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
    8464:	3c40      	subs	r4, #64	; 0x40
    8466:	e7f4      	b.n	8452 <mbedtls_sha256_update_ret+0x2a>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    8468:	f106 0928 	add.w	r9, r6, #40	; 0x28
    846c:	4642      	mov	r2, r8
    846e:	4629      	mov	r1, r5
    8470:	eb09 0007 	add.w	r0, r9, r7
    8474:	f7fe f8db 	bl	662e <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    8478:	4649      	mov	r1, r9
    847a:	4630      	mov	r0, r6
    847c:	f7fb fd36 	bl	3eec <mbedtls_internal_sha256_process>
    8480:	4603      	mov	r3, r0
    8482:	b988      	cbnz	r0, 84a8 <mbedtls_sha256_update_ret+0x80>
        input += fill;
    8484:	4445      	add	r5, r8
        ilen  -= fill;
    8486:	3f40      	subs	r7, #64	; 0x40
    8488:	443c      	add	r4, r7
        left = 0;
    848a:	2700      	movs	r7, #0
    848c:	e7e1      	b.n	8452 <mbedtls_sha256_update_ret+0x2a>
    }

    if( ilen > 0 )
    848e:	b90c      	cbnz	r4, 8494 <mbedtls_sha256_update_ret+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    8490:	2300      	movs	r3, #0
    8492:	e009      	b.n	84a8 <mbedtls_sha256_update_ret+0x80>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    8494:	f106 0028 	add.w	r0, r6, #40	; 0x28
    8498:	4622      	mov	r2, r4
    849a:	4629      	mov	r1, r5
    849c:	4438      	add	r0, r7
    849e:	f7fe f8c6 	bl	662e <memcpy>
    return( 0 );
    84a2:	2300      	movs	r3, #0
    84a4:	e000      	b.n	84a8 <mbedtls_sha256_update_ret+0x80>
        return( 0 );
    84a6:	2300      	movs	r3, #0
}
    84a8:	4618      	mov	r0, r3
    84aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000084ae <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
    84ae:	b570      	push	{r4, r5, r6, lr}
    84b0:	4604      	mov	r4, r0
    84b2:	460d      	mov	r5, r1
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
    84b4:	6803      	ldr	r3, [r0, #0]
    84b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
    84ba:	1c58      	adds	r0, r3, #1
    84bc:	4423      	add	r3, r4
    84be:	2280      	movs	r2, #128	; 0x80
    84c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( used <= 56 )
    84c4:	2838      	cmp	r0, #56	; 0x38
    84c6:	d87b      	bhi.n	85c0 <mbedtls_sha256_finish_ret+0x112>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    84c8:	f104 0328 	add.w	r3, r4, #40	; 0x28
    84cc:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
    84d0:	2100      	movs	r1, #0
    84d2:	4418      	add	r0, r3
    84d4:	f7fe f8ce 	bl	6674 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
    84d8:	6822      	ldr	r2, [r4, #0]
         | ( ctx->total[1] <<  3 );
    84da:	6863      	ldr	r3, [r4, #4]
    84dc:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
    84de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    low  = ( ctx->total[0] <<  3 );
    84e2:	00d2      	lsls	r2, r2, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    84e4:	0e19      	lsrs	r1, r3, #24
    84e6:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    84ea:	f3c3 4107 	ubfx	r1, r3, #16, #8
    84ee:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
    84f2:	f3c3 2107 	ubfx	r1, r3, #8, #8
    84f6:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    84fa:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    84fe:	0e13      	lsrs	r3, r2, #24
    8500:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    8504:	f3c2 4307 	ubfx	r3, r2, #16, #8
    8508:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    850c:	f3c2 2307 	ubfx	r3, r2, #8, #8
    8510:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    8514:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    8518:	f104 0128 	add.w	r1, r4, #40	; 0x28
    851c:	4620      	mov	r0, r4
    851e:	f7fb fce5 	bl	3eec <mbedtls_internal_sha256_process>
    8522:	4603      	mov	r3, r0
    8524:	2800      	cmp	r0, #0
    8526:	d159      	bne.n	85dc <mbedtls_sha256_finish_ret+0x12e>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    8528:	7ae2      	ldrb	r2, [r4, #11]
    852a:	702a      	strb	r2, [r5, #0]
    852c:	7aa2      	ldrb	r2, [r4, #10]
    852e:	706a      	strb	r2, [r5, #1]
    8530:	7a62      	ldrb	r2, [r4, #9]
    8532:	70aa      	strb	r2, [r5, #2]
    8534:	7a22      	ldrb	r2, [r4, #8]
    8536:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    8538:	7be2      	ldrb	r2, [r4, #15]
    853a:	712a      	strb	r2, [r5, #4]
    853c:	7ba2      	ldrb	r2, [r4, #14]
    853e:	716a      	strb	r2, [r5, #5]
    8540:	7b62      	ldrb	r2, [r4, #13]
    8542:	71aa      	strb	r2, [r5, #6]
    8544:	7b22      	ldrb	r2, [r4, #12]
    8546:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    8548:	7ce2      	ldrb	r2, [r4, #19]
    854a:	722a      	strb	r2, [r5, #8]
    854c:	7ca2      	ldrb	r2, [r4, #18]
    854e:	726a      	strb	r2, [r5, #9]
    8550:	7c62      	ldrb	r2, [r4, #17]
    8552:	72aa      	strb	r2, [r5, #10]
    8554:	7c22      	ldrb	r2, [r4, #16]
    8556:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    8558:	7de2      	ldrb	r2, [r4, #23]
    855a:	732a      	strb	r2, [r5, #12]
    855c:	7da2      	ldrb	r2, [r4, #22]
    855e:	736a      	strb	r2, [r5, #13]
    8560:	7d62      	ldrb	r2, [r4, #21]
    8562:	73aa      	strb	r2, [r5, #14]
    8564:	7d22      	ldrb	r2, [r4, #20]
    8566:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    8568:	7ee2      	ldrb	r2, [r4, #27]
    856a:	742a      	strb	r2, [r5, #16]
    856c:	7ea2      	ldrb	r2, [r4, #26]
    856e:	746a      	strb	r2, [r5, #17]
    8570:	7e62      	ldrb	r2, [r4, #25]
    8572:	74aa      	strb	r2, [r5, #18]
    8574:	7e22      	ldrb	r2, [r4, #24]
    8576:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    8578:	7fe2      	ldrb	r2, [r4, #31]
    857a:	752a      	strb	r2, [r5, #20]
    857c:	7fa2      	ldrb	r2, [r4, #30]
    857e:	756a      	strb	r2, [r5, #21]
    8580:	7f62      	ldrb	r2, [r4, #29]
    8582:	75aa      	strb	r2, [r5, #22]
    8584:	7f22      	ldrb	r2, [r4, #28]
    8586:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    8588:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    858c:	762a      	strb	r2, [r5, #24]
    858e:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    8592:	766a      	strb	r2, [r5, #25]
    8594:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    8598:	76aa      	strb	r2, [r5, #26]
    859a:	f894 2020 	ldrb.w	r2, [r4, #32]
    859e:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
    85a0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    85a2:	b9da      	cbnz	r2, 85dc <mbedtls_sha256_finish_ret+0x12e>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    85a4:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    85a8:	772b      	strb	r3, [r5, #28]
    85aa:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    85ae:	776b      	strb	r3, [r5, #29]
    85b0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    85b4:	77ab      	strb	r3, [r5, #30]
    85b6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    85ba:	77eb      	strb	r3, [r5, #31]

    return( 0 );
    85bc:	4613      	mov	r3, r2
    85be:	e00d      	b.n	85dc <mbedtls_sha256_finish_ret+0x12e>
        memset( ctx->buffer + used, 0, 64 - used );
    85c0:	f104 0628 	add.w	r6, r4, #40	; 0x28
    85c4:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
    85c8:	2100      	movs	r1, #0
    85ca:	4430      	add	r0, r6
    85cc:	f7fe f852 	bl	6674 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    85d0:	4631      	mov	r1, r6
    85d2:	4620      	mov	r0, r4
    85d4:	f7fb fc8a 	bl	3eec <mbedtls_internal_sha256_process>
    85d8:	4603      	mov	r3, r0
    85da:	b108      	cbz	r0, 85e0 <mbedtls_sha256_finish_ret+0x132>
}
    85dc:	4618      	mov	r0, r3
    85de:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer, 0, 56 );
    85e0:	2238      	movs	r2, #56	; 0x38
    85e2:	2100      	movs	r1, #0
    85e4:	4630      	mov	r0, r6
    85e6:	f7fe f845 	bl	6674 <memset>
    85ea:	e775      	b.n	84d8 <mbedtls_sha256_finish_ret+0x2a>

000085ec <arch_system_halt>:
	__asm__ volatile(
    85ec:	f04f 0220 	mov.w	r2, #32
    85f0:	f3ef 8311 	mrs	r3, BASEPRI
    85f4:	f382 8811 	msr	BASEPRI, r2
    85f8:	f3bf 8f6f 	isb	sy
	 */

	(void)arch_irq_lock();
	for (;;) {
		/* Spin endlessly */
	}
    85fc:	e7fe      	b.n	85fc <arch_system_halt+0x10>

000085fe <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    85fe:	b510      	push	{r4, lr}
    8600:	4604      	mov	r4, r0
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    8602:	f7f9 fa83 	bl	1b0c <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    8606:	4620      	mov	r0, r4
    8608:	f7ff fff0 	bl	85ec <arch_system_halt>

0000860c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    860c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    860e:	4606      	mov	r6, r0
    8610:	460f      	mov	r7, r1
    8612:	f04f 0320 	mov.w	r3, #32
    8616:	f3ef 8511 	mrs	r5, BASEPRI
    861a:	f383 8811 	msr	BASEPRI, r3
    861e:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    8622:	f7fc fa99 	bl	4b58 <z_impl_k_current_get>
    8626:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    8628:	4639      	mov	r1, r7
    862a:	4630      	mov	r0, r6
    862c:	f7ff ffe7 	bl	85fe <k_sys_fatal_error_handler>
	__asm__ volatile(
    8630:	f385 8811 	msr	BASEPRI, r5
    8634:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    8638:	4620      	mov	r0, r4
    863a:	f7fa f92b 	bl	2894 <z_impl_k_thread_abort>
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    863e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008640 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8640:	68c2      	ldr	r2, [r0, #12]
    8642:	6903      	ldr	r3, [r0, #16]
    8644:	431a      	orrs	r2, r3
    8646:	f012 0203 	ands.w	r2, r2, #3
    864a:	d10d      	bne.n	8668 <create_free_list+0x28>
	slab->free_list = NULL;
    864c:	2100      	movs	r1, #0
    864e:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    8650:	6881      	ldr	r1, [r0, #8]
    8652:	4291      	cmp	r1, r2
    8654:	d906      	bls.n	8664 <create_free_list+0x24>
		*(char **)p = slab->free_list;
    8656:	6941      	ldr	r1, [r0, #20]
    8658:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    865a:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    865c:	68c1      	ldr	r1, [r0, #12]
    865e:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    8660:	3201      	adds	r2, #1
    8662:	e7f5      	b.n	8650 <create_free_list+0x10>
	return 0;
    8664:	2000      	movs	r0, #0
    8666:	4770      	bx	lr
		return -EINVAL;
    8668:	f06f 0015 	mvn.w	r0, #21
}
    866c:	4770      	bx	lr

0000866e <pended_on>:
}
    866e:	6880      	ldr	r0, [r0, #8]
    8670:	4770      	bx	lr

00008672 <z_tick_sleep>:
}
    8672:	2000      	movs	r0, #0
    8674:	4770      	bx	lr

00008676 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
    8676:	f990 200e 	ldrsb.w	r2, [r0, #14]
    867a:	f991 300e 	ldrsb.w	r3, [r1, #14]
    867e:	429a      	cmp	r2, r3
    8680:	db01      	blt.n	8686 <z_is_t1_higher_prio_than_t2+0x10>
	return false;
    8682:	2000      	movs	r0, #0
    8684:	4770      	bx	lr
		return true;
    8686:	2001      	movs	r0, #1
}
    8688:	4770      	bx	lr

0000868a <z_reschedule_irqlock>:
{
    868a:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    868c:	4603      	mov	r3, r0
    868e:	b928      	cbnz	r0, 869c <z_reschedule_irqlock+0x12>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8690:	f3ef 8205 	mrs	r2, IPSR
    8694:	b912      	cbnz	r2, 869c <z_reschedule_irqlock+0x12>
    8696:	f7f9 fefb 	bl	2490 <arch_swap>
	return ret;
    869a:	e003      	b.n	86a4 <z_reschedule_irqlock+0x1a>
    869c:	f383 8811 	msr	BASEPRI, r3
    86a0:	f3bf 8f6f 	isb	sy
}
    86a4:	bd08      	pop	{r3, pc}

000086a6 <z_priq_dumb_best>:
	return list->head == list;
    86a6:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    86a8:	4298      	cmp	r0, r3
    86aa:	d001      	beq.n	86b0 <z_priq_dumb_best+0xa>
}
    86ac:	4618      	mov	r0, r3
    86ae:	4770      	bx	lr
	struct k_thread *thread = NULL;
    86b0:	2300      	movs	r3, #0
	return thread;
    86b2:	e7fb      	b.n	86ac <z_priq_dumb_best+0x6>

000086b4 <z_ready_thread>:
{
    86b4:	b538      	push	{r3, r4, r5, lr}
    86b6:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    86b8:	2300      	movs	r3, #0
	__asm__ volatile(
    86ba:	f04f 0220 	mov.w	r2, #32
    86be:	f3ef 8411 	mrs	r4, BASEPRI
    86c2:	f382 8811 	msr	BASEPRI, r2
    86c6:	f3bf 8f6f 	isb	sy
    86ca:	b943      	cbnz	r3, 86de <z_ready_thread+0x2a>
		ready_thread(thread);
    86cc:	4628      	mov	r0, r5
    86ce:	f7fc f929 	bl	4924 <ready_thread>
	__asm__ volatile(
    86d2:	f384 8811 	msr	BASEPRI, r4
    86d6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    86da:	2301      	movs	r3, #1
    86dc:	e7f5      	b.n	86ca <z_ready_thread+0x16>
}
    86de:	bd38      	pop	{r3, r4, r5, pc}

000086e0 <z_unpend_first_thread>:
{
    86e0:	b570      	push	{r4, r5, r6, lr}
    86e2:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    86e4:	2300      	movs	r3, #0
	__asm__ volatile(
    86e6:	f04f 0220 	mov.w	r2, #32
    86ea:	f3ef 8511 	mrs	r5, BASEPRI
    86ee:	f382 8811 	msr	BASEPRI, r2
    86f2:	f3bf 8f6f 	isb	sy
	struct k_thread *ret = NULL;
    86f6:	461c      	mov	r4, r3
	LOCKED(&sched_spinlock) {
    86f8:	b94b      	cbnz	r3, 870e <z_unpend_first_thread+0x2e>
		ret = _priq_wait_best(&wait_q->waitq);
    86fa:	4630      	mov	r0, r6
    86fc:	f7ff ffd3 	bl	86a6 <z_priq_dumb_best>
    8700:	4604      	mov	r4, r0
	__asm__ volatile(
    8702:	f385 8811 	msr	BASEPRI, r5
    8706:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    870a:	2301      	movs	r3, #1
    870c:	e7f4      	b.n	86f8 <z_unpend_first_thread+0x18>

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    870e:	b1dc      	cbz	r4, 8748 <z_unpend_first_thread+0x68>
	LOCKED(&sched_spinlock) {
    8710:	2300      	movs	r3, #0
	__asm__ volatile(
    8712:	f04f 0220 	mov.w	r2, #32
    8716:	f3ef 8511 	mrs	r5, BASEPRI
    871a:	f382 8811 	msr	BASEPRI, r2
    871e:	f3bf 8f6f 	isb	sy
    8722:	b98b      	cbnz	r3, 8748 <z_unpend_first_thread+0x68>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    8724:	4620      	mov	r0, r4
    8726:	f7ff ffa2 	bl	866e <pended_on>
    872a:	4621      	mov	r1, r4
    872c:	f7fc f8c0 	bl	48b0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8730:	7b63      	ldrb	r3, [r4, #13]
    8732:	f023 0302 	bic.w	r3, r3, #2
    8736:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    8738:	2300      	movs	r3, #0
    873a:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    873c:	f385 8811 	msr	BASEPRI, r5
    8740:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8744:	2301      	movs	r3, #1
    8746:	e7ec      	b.n	8722 <z_unpend_first_thread+0x42>
	if (thread != NULL) {
    8748:	b11c      	cbz	r4, 8752 <z_unpend_first_thread+0x72>
    874a:	f104 0018 	add.w	r0, r4, #24
    874e:	f000 f843 	bl	87d8 <z_abort_timeout>
}
    8752:	4620      	mov	r0, r4
    8754:	bd70      	pop	{r4, r5, r6, pc}

00008756 <k_is_in_isr>:
    8756:	f3ef 8005 	mrs	r0, IPSR
}

bool k_is_in_isr(void)
{
	return arch_is_in_isr();
}
    875a:	3000      	adds	r0, #0
    875c:	bf18      	it	ne
    875e:	2001      	movne	r0, #1
    8760:	4770      	bx	lr

00008762 <z_impl_k_busy_wait>:
	return (_current->base.user_options & K_ESSENTIAL) == K_ESSENTIAL;
}

#ifdef CONFIG_SYS_CLOCK_EXISTS
void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
    8762:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    8764:	f7f9 f92c 	bl	19c0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
}
    8768:	bd08      	pop	{r3, pc}

0000876a <remove_timeout>:
{
    876a:	b538      	push	{r3, r4, r5, lr}
    876c:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    876e:	f7fc fa25 	bl	4bbc <next>
    8772:	b148      	cbz	r0, 8788 <remove_timeout+0x1e>
    8774:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    8776:	6920      	ldr	r0, [r4, #16]
    8778:	6965      	ldr	r5, [r4, #20]
    877a:	6913      	ldr	r3, [r2, #16]
    877c:	6951      	ldr	r1, [r2, #20]
    877e:	181b      	adds	r3, r3, r0
    8780:	eb45 0101 	adc.w	r1, r5, r1
    8784:	6113      	str	r3, [r2, #16]
    8786:	6151      	str	r1, [r2, #20]
	node->prev->next = node->next;
    8788:	6862      	ldr	r2, [r4, #4]
    878a:	6823      	ldr	r3, [r4, #0]
    878c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    878e:	6862      	ldr	r2, [r4, #4]
    8790:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8792:	2300      	movs	r3, #0
    8794:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    8796:	6063      	str	r3, [r4, #4]
}
    8798:	bd38      	pop	{r3, r4, r5, pc}

0000879a <next_timeout>:
{
    879a:	b538      	push	{r3, r4, r5, lr}
	struct _timeout *to = first();
    879c:	f7fc fa04 	bl	4ba8 <first>
    87a0:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    87a2:	f7fc fa17 	bl	4bd4 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    87a6:	b18c      	cbz	r4, 87cc <next_timeout+0x32>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
    87a8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    87ac:	1a14      	subs	r4, r2, r0
    87ae:	eb63 75e0 	sbc.w	r5, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    87b2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    87b6:	f175 0300 	sbcs.w	r3, r5, #0
    87ba:	da0a      	bge.n	87d2 <next_timeout+0x38>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
    87bc:	4620      	mov	r0, r4
    87be:	2c00      	cmp	r4, #0
    87c0:	f175 0300 	sbcs.w	r3, r5, #0
    87c4:	db00      	blt.n	87c8 <next_timeout+0x2e>
}
    87c6:	bd38      	pop	{r3, r4, r5, pc}
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
    87c8:	2000      	movs	r0, #0
    87ca:	e7fc      	b.n	87c6 <next_timeout+0x2c>
	int32_t ret = to == NULL ? MAX_WAIT
    87cc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    87d0:	e7f9      	b.n	87c6 <next_timeout+0x2c>
    87d2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return ret;
    87d6:	e7f6      	b.n	87c6 <next_timeout+0x2c>

000087d8 <z_abort_timeout>:
{
    87d8:	b570      	push	{r4, r5, r6, lr}
    87da:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    87dc:	2300      	movs	r3, #0
	__asm__ volatile(
    87de:	f04f 0220 	mov.w	r2, #32
    87e2:	f3ef 8611 	mrs	r6, BASEPRI
    87e6:	f382 8811 	msr	BASEPRI, r2
    87ea:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    87ee:	f06f 0015 	mvn.w	r0, #21
    87f2:	e008      	b.n	8806 <z_abort_timeout+0x2e>
			remove_timeout(to);
    87f4:	4620      	mov	r0, r4
    87f6:	f7ff ffb8 	bl	876a <remove_timeout>
			ret = 0;
    87fa:	4628      	mov	r0, r5
	__asm__ volatile(
    87fc:	f386 8811 	msr	BASEPRI, r6
    8800:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    8804:	2301      	movs	r3, #1
    8806:	461d      	mov	r5, r3
    8808:	b91b      	cbnz	r3, 8812 <z_abort_timeout+0x3a>
	return node->next != NULL;
    880a:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    880c:	2b00      	cmp	r3, #0
    880e:	d1f1      	bne.n	87f4 <z_abort_timeout+0x1c>
    8810:	e7f4      	b.n	87fc <z_abort_timeout+0x24>
}
    8812:	bd70      	pop	{r4, r5, r6, pc}

00008814 <k_heap_init>:
{
    8814:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
    8816:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    881a:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    881c:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    881e:	f7fd fb5f 	bl	5ee0 <sys_heap_init>
}
    8822:	bd10      	pop	{r4, pc}

00008824 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    8824:	4770      	bx	lr
