
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00018200 <_vector_table>:
   18200:	2002f010 	.word	0x2002f010
   18204:	000207e9 	.word	0x000207e9
   18208:	0003f811 	.word	0x0003f811
   1820c:	00020615 	.word	0x00020615
   18210:	00020615 	.word	0x00020615
   18214:	00020615 	.word	0x00020615
   18218:	00020615 	.word	0x00020615
   1821c:	00020615 	.word	0x00020615
   18220:	00020615 	.word	0x00020615
   18224:	00020615 	.word	0x00020615
   18228:	00020615 	.word	0x00020615
   1822c:	00020441 	.word	0x00020441
   18230:	00020615 	.word	0x00020615
   18234:	00020615 	.word	0x00020615
   18238:	0002037d 	.word	0x0002037d
   1823c:	0001ff9d 	.word	0x0001ff9d

00018240 <_irq_vector_table>:
   18240:	000207a9 000207a9 000207a9 000207a9     ................
   18250:	000207a9 000207a9 000207a9 000207a9     ................
   18260:	000207a9 000207a9 000207a9 000207a9     ................
   18270:	000207a9 000207a9 000207a9 000207a9     ................
   18280:	000207a9 000207a9 000207a9 000207a9     ................
   18290:	000207a9 000207a9 000207a9 000207a9     ................
   182a0:	000207a9 000207a9 000207a9 000207a9     ................
   182b0:	000230dd 0004083f 000207a9 000207a9     .0..?...........
   182c0:	000207a9 000207a9 000207a9 000207a9     ................
   182d0:	000207a9 000207a9 000207a9 000207a9     ................
   182e0:	000207a9 000207a9 0004085d 000207a9     ........].......
   182f0:	000207a9 000207a9 000207a9 000207a9     ................
   18300:	000207a9 000207a9 000207a9 000207a9     ................
   18310:	000207a9 000207a9 000207a9 000207a9     ................
   18320:	000207a9 000207a9 000207a9 000207a9     ................
   18330:	000207a9 000207a9 000207a9 000207a9     ................
   18340:	000207a9                                ....

00018344 <_vector_end>:
	...

00018400 <m_firmware_info>:
   18400:	281ee6de 8fcebb4c 00005b01 00033128     ...(L....[..(1..
   18410:	00000001 00018200 20030150 00028815     ........P.. ....

Disassembly of section _TEXT_SECTION_NAME_2:

00018420 <__aeabi_drsub>:
   18420:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   18424:	e002      	b.n	1842c <__adddf3>
   18426:	bf00      	nop

00018428 <__aeabi_dsub>:
   18428:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001842c <__adddf3>:
   1842c:	b530      	push	{r4, r5, lr}
   1842e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   18432:	ea4f 0543 	mov.w	r5, r3, lsl #1
   18436:	ea94 0f05 	teq	r4, r5
   1843a:	bf08      	it	eq
   1843c:	ea90 0f02 	teqeq	r0, r2
   18440:	bf1f      	itttt	ne
   18442:	ea54 0c00 	orrsne.w	ip, r4, r0
   18446:	ea55 0c02 	orrsne.w	ip, r5, r2
   1844a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1844e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   18452:	f000 80e2 	beq.w	1861a <__adddf3+0x1ee>
   18456:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1845a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1845e:	bfb8      	it	lt
   18460:	426d      	neglt	r5, r5
   18462:	dd0c      	ble.n	1847e <__adddf3+0x52>
   18464:	442c      	add	r4, r5
   18466:	ea80 0202 	eor.w	r2, r0, r2
   1846a:	ea81 0303 	eor.w	r3, r1, r3
   1846e:	ea82 0000 	eor.w	r0, r2, r0
   18472:	ea83 0101 	eor.w	r1, r3, r1
   18476:	ea80 0202 	eor.w	r2, r0, r2
   1847a:	ea81 0303 	eor.w	r3, r1, r3
   1847e:	2d36      	cmp	r5, #54	; 0x36
   18480:	bf88      	it	hi
   18482:	bd30      	pophi	{r4, r5, pc}
   18484:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18488:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1848c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   18490:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   18494:	d002      	beq.n	1849c <__adddf3+0x70>
   18496:	4240      	negs	r0, r0
   18498:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1849c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   184a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   184a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   184a8:	d002      	beq.n	184b0 <__adddf3+0x84>
   184aa:	4252      	negs	r2, r2
   184ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   184b0:	ea94 0f05 	teq	r4, r5
   184b4:	f000 80a7 	beq.w	18606 <__adddf3+0x1da>
   184b8:	f1a4 0401 	sub.w	r4, r4, #1
   184bc:	f1d5 0e20 	rsbs	lr, r5, #32
   184c0:	db0d      	blt.n	184de <__adddf3+0xb2>
   184c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   184c6:	fa22 f205 	lsr.w	r2, r2, r5
   184ca:	1880      	adds	r0, r0, r2
   184cc:	f141 0100 	adc.w	r1, r1, #0
   184d0:	fa03 f20e 	lsl.w	r2, r3, lr
   184d4:	1880      	adds	r0, r0, r2
   184d6:	fa43 f305 	asr.w	r3, r3, r5
   184da:	4159      	adcs	r1, r3
   184dc:	e00e      	b.n	184fc <__adddf3+0xd0>
   184de:	f1a5 0520 	sub.w	r5, r5, #32
   184e2:	f10e 0e20 	add.w	lr, lr, #32
   184e6:	2a01      	cmp	r2, #1
   184e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   184ec:	bf28      	it	cs
   184ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   184f2:	fa43 f305 	asr.w	r3, r3, r5
   184f6:	18c0      	adds	r0, r0, r3
   184f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   184fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   18500:	d507      	bpl.n	18512 <__adddf3+0xe6>
   18502:	f04f 0e00 	mov.w	lr, #0
   18506:	f1dc 0c00 	rsbs	ip, ip, #0
   1850a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1850e:	eb6e 0101 	sbc.w	r1, lr, r1
   18512:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   18516:	d31b      	bcc.n	18550 <__adddf3+0x124>
   18518:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1851c:	d30c      	bcc.n	18538 <__adddf3+0x10c>
   1851e:	0849      	lsrs	r1, r1, #1
   18520:	ea5f 0030 	movs.w	r0, r0, rrx
   18524:	ea4f 0c3c 	mov.w	ip, ip, rrx
   18528:	f104 0401 	add.w	r4, r4, #1
   1852c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   18530:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   18534:	f080 809a 	bcs.w	1866c <__adddf3+0x240>
   18538:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1853c:	bf08      	it	eq
   1853e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   18542:	f150 0000 	adcs.w	r0, r0, #0
   18546:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1854a:	ea41 0105 	orr.w	r1, r1, r5
   1854e:	bd30      	pop	{r4, r5, pc}
   18550:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   18554:	4140      	adcs	r0, r0
   18556:	eb41 0101 	adc.w	r1, r1, r1
   1855a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1855e:	f1a4 0401 	sub.w	r4, r4, #1
   18562:	d1e9      	bne.n	18538 <__adddf3+0x10c>
   18564:	f091 0f00 	teq	r1, #0
   18568:	bf04      	itt	eq
   1856a:	4601      	moveq	r1, r0
   1856c:	2000      	moveq	r0, #0
   1856e:	fab1 f381 	clz	r3, r1
   18572:	bf08      	it	eq
   18574:	3320      	addeq	r3, #32
   18576:	f1a3 030b 	sub.w	r3, r3, #11
   1857a:	f1b3 0220 	subs.w	r2, r3, #32
   1857e:	da0c      	bge.n	1859a <__adddf3+0x16e>
   18580:	320c      	adds	r2, #12
   18582:	dd08      	ble.n	18596 <__adddf3+0x16a>
   18584:	f102 0c14 	add.w	ip, r2, #20
   18588:	f1c2 020c 	rsb	r2, r2, #12
   1858c:	fa01 f00c 	lsl.w	r0, r1, ip
   18590:	fa21 f102 	lsr.w	r1, r1, r2
   18594:	e00c      	b.n	185b0 <__adddf3+0x184>
   18596:	f102 0214 	add.w	r2, r2, #20
   1859a:	bfd8      	it	le
   1859c:	f1c2 0c20 	rsble	ip, r2, #32
   185a0:	fa01 f102 	lsl.w	r1, r1, r2
   185a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   185a8:	bfdc      	itt	le
   185aa:	ea41 010c 	orrle.w	r1, r1, ip
   185ae:	4090      	lslle	r0, r2
   185b0:	1ae4      	subs	r4, r4, r3
   185b2:	bfa2      	ittt	ge
   185b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   185b8:	4329      	orrge	r1, r5
   185ba:	bd30      	popge	{r4, r5, pc}
   185bc:	ea6f 0404 	mvn.w	r4, r4
   185c0:	3c1f      	subs	r4, #31
   185c2:	da1c      	bge.n	185fe <__adddf3+0x1d2>
   185c4:	340c      	adds	r4, #12
   185c6:	dc0e      	bgt.n	185e6 <__adddf3+0x1ba>
   185c8:	f104 0414 	add.w	r4, r4, #20
   185cc:	f1c4 0220 	rsb	r2, r4, #32
   185d0:	fa20 f004 	lsr.w	r0, r0, r4
   185d4:	fa01 f302 	lsl.w	r3, r1, r2
   185d8:	ea40 0003 	orr.w	r0, r0, r3
   185dc:	fa21 f304 	lsr.w	r3, r1, r4
   185e0:	ea45 0103 	orr.w	r1, r5, r3
   185e4:	bd30      	pop	{r4, r5, pc}
   185e6:	f1c4 040c 	rsb	r4, r4, #12
   185ea:	f1c4 0220 	rsb	r2, r4, #32
   185ee:	fa20 f002 	lsr.w	r0, r0, r2
   185f2:	fa01 f304 	lsl.w	r3, r1, r4
   185f6:	ea40 0003 	orr.w	r0, r0, r3
   185fa:	4629      	mov	r1, r5
   185fc:	bd30      	pop	{r4, r5, pc}
   185fe:	fa21 f004 	lsr.w	r0, r1, r4
   18602:	4629      	mov	r1, r5
   18604:	bd30      	pop	{r4, r5, pc}
   18606:	f094 0f00 	teq	r4, #0
   1860a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1860e:	bf06      	itte	eq
   18610:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   18614:	3401      	addeq	r4, #1
   18616:	3d01      	subne	r5, #1
   18618:	e74e      	b.n	184b8 <__adddf3+0x8c>
   1861a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1861e:	bf18      	it	ne
   18620:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   18624:	d029      	beq.n	1867a <__adddf3+0x24e>
   18626:	ea94 0f05 	teq	r4, r5
   1862a:	bf08      	it	eq
   1862c:	ea90 0f02 	teqeq	r0, r2
   18630:	d005      	beq.n	1863e <__adddf3+0x212>
   18632:	ea54 0c00 	orrs.w	ip, r4, r0
   18636:	bf04      	itt	eq
   18638:	4619      	moveq	r1, r3
   1863a:	4610      	moveq	r0, r2
   1863c:	bd30      	pop	{r4, r5, pc}
   1863e:	ea91 0f03 	teq	r1, r3
   18642:	bf1e      	ittt	ne
   18644:	2100      	movne	r1, #0
   18646:	2000      	movne	r0, #0
   18648:	bd30      	popne	{r4, r5, pc}
   1864a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1864e:	d105      	bne.n	1865c <__adddf3+0x230>
   18650:	0040      	lsls	r0, r0, #1
   18652:	4149      	adcs	r1, r1
   18654:	bf28      	it	cs
   18656:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1865a:	bd30      	pop	{r4, r5, pc}
   1865c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   18660:	bf3c      	itt	cc
   18662:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   18666:	bd30      	popcc	{r4, r5, pc}
   18668:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1866c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   18670:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   18674:	f04f 0000 	mov.w	r0, #0
   18678:	bd30      	pop	{r4, r5, pc}
   1867a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1867e:	bf1a      	itte	ne
   18680:	4619      	movne	r1, r3
   18682:	4610      	movne	r0, r2
   18684:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   18688:	bf1c      	itt	ne
   1868a:	460b      	movne	r3, r1
   1868c:	4602      	movne	r2, r0
   1868e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18692:	bf06      	itte	eq
   18694:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   18698:	ea91 0f03 	teqeq	r1, r3
   1869c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   186a0:	bd30      	pop	{r4, r5, pc}
   186a2:	bf00      	nop

000186a4 <__aeabi_ui2d>:
   186a4:	f090 0f00 	teq	r0, #0
   186a8:	bf04      	itt	eq
   186aa:	2100      	moveq	r1, #0
   186ac:	4770      	bxeq	lr
   186ae:	b530      	push	{r4, r5, lr}
   186b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   186b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   186b8:	f04f 0500 	mov.w	r5, #0
   186bc:	f04f 0100 	mov.w	r1, #0
   186c0:	e750      	b.n	18564 <__adddf3+0x138>
   186c2:	bf00      	nop

000186c4 <__aeabi_i2d>:
   186c4:	f090 0f00 	teq	r0, #0
   186c8:	bf04      	itt	eq
   186ca:	2100      	moveq	r1, #0
   186cc:	4770      	bxeq	lr
   186ce:	b530      	push	{r4, r5, lr}
   186d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   186d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   186d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   186dc:	bf48      	it	mi
   186de:	4240      	negmi	r0, r0
   186e0:	f04f 0100 	mov.w	r1, #0
   186e4:	e73e      	b.n	18564 <__adddf3+0x138>
   186e6:	bf00      	nop

000186e8 <__aeabi_f2d>:
   186e8:	0042      	lsls	r2, r0, #1
   186ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   186ee:	ea4f 0131 	mov.w	r1, r1, rrx
   186f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   186f6:	bf1f      	itttt	ne
   186f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   186fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   18700:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   18704:	4770      	bxne	lr
   18706:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1870a:	bf08      	it	eq
   1870c:	4770      	bxeq	lr
   1870e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   18712:	bf04      	itt	eq
   18714:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   18718:	4770      	bxeq	lr
   1871a:	b530      	push	{r4, r5, lr}
   1871c:	f44f 7460 	mov.w	r4, #896	; 0x380
   18720:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   18724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   18728:	e71c      	b.n	18564 <__adddf3+0x138>
   1872a:	bf00      	nop

0001872c <__aeabi_ul2d>:
   1872c:	ea50 0201 	orrs.w	r2, r0, r1
   18730:	bf08      	it	eq
   18732:	4770      	bxeq	lr
   18734:	b530      	push	{r4, r5, lr}
   18736:	f04f 0500 	mov.w	r5, #0
   1873a:	e00a      	b.n	18752 <__aeabi_l2d+0x16>

0001873c <__aeabi_l2d>:
   1873c:	ea50 0201 	orrs.w	r2, r0, r1
   18740:	bf08      	it	eq
   18742:	4770      	bxeq	lr
   18744:	b530      	push	{r4, r5, lr}
   18746:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1874a:	d502      	bpl.n	18752 <__aeabi_l2d+0x16>
   1874c:	4240      	negs	r0, r0
   1874e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18752:	f44f 6480 	mov.w	r4, #1024	; 0x400
   18756:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1875a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1875e:	f43f aed8 	beq.w	18512 <__adddf3+0xe6>
   18762:	f04f 0203 	mov.w	r2, #3
   18766:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1876a:	bf18      	it	ne
   1876c:	3203      	addne	r2, #3
   1876e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   18772:	bf18      	it	ne
   18774:	3203      	addne	r2, #3
   18776:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1877a:	f1c2 0320 	rsb	r3, r2, #32
   1877e:	fa00 fc03 	lsl.w	ip, r0, r3
   18782:	fa20 f002 	lsr.w	r0, r0, r2
   18786:	fa01 fe03 	lsl.w	lr, r1, r3
   1878a:	ea40 000e 	orr.w	r0, r0, lr
   1878e:	fa21 f102 	lsr.w	r1, r1, r2
   18792:	4414      	add	r4, r2
   18794:	e6bd      	b.n	18512 <__adddf3+0xe6>
   18796:	bf00      	nop

00018798 <__aeabi_dmul>:
   18798:	b570      	push	{r4, r5, r6, lr}
   1879a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1879e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   187a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   187a6:	bf1d      	ittte	ne
   187a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   187ac:	ea94 0f0c 	teqne	r4, ip
   187b0:	ea95 0f0c 	teqne	r5, ip
   187b4:	f000 f8de 	bleq	18974 <__aeabi_dmul+0x1dc>
   187b8:	442c      	add	r4, r5
   187ba:	ea81 0603 	eor.w	r6, r1, r3
   187be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   187c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   187c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   187ca:	bf18      	it	ne
   187cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   187d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   187d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   187d8:	d038      	beq.n	1884c <__aeabi_dmul+0xb4>
   187da:	fba0 ce02 	umull	ip, lr, r0, r2
   187de:	f04f 0500 	mov.w	r5, #0
   187e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   187e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   187ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   187ee:	f04f 0600 	mov.w	r6, #0
   187f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   187f6:	f09c 0f00 	teq	ip, #0
   187fa:	bf18      	it	ne
   187fc:	f04e 0e01 	orrne.w	lr, lr, #1
   18800:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   18804:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   18808:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1880c:	d204      	bcs.n	18818 <__aeabi_dmul+0x80>
   1880e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   18812:	416d      	adcs	r5, r5
   18814:	eb46 0606 	adc.w	r6, r6, r6
   18818:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1881c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   18820:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   18824:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   18828:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1882c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   18830:	bf88      	it	hi
   18832:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   18836:	d81e      	bhi.n	18876 <__aeabi_dmul+0xde>
   18838:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1883c:	bf08      	it	eq
   1883e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   18842:	f150 0000 	adcs.w	r0, r0, #0
   18846:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1884a:	bd70      	pop	{r4, r5, r6, pc}
   1884c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   18850:	ea46 0101 	orr.w	r1, r6, r1
   18854:	ea40 0002 	orr.w	r0, r0, r2
   18858:	ea81 0103 	eor.w	r1, r1, r3
   1885c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   18860:	bfc2      	ittt	gt
   18862:	ebd4 050c 	rsbsgt	r5, r4, ip
   18866:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1886a:	bd70      	popgt	{r4, r5, r6, pc}
   1886c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18870:	f04f 0e00 	mov.w	lr, #0
   18874:	3c01      	subs	r4, #1
   18876:	f300 80ab 	bgt.w	189d0 <__aeabi_dmul+0x238>
   1887a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1887e:	bfde      	ittt	le
   18880:	2000      	movle	r0, #0
   18882:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   18886:	bd70      	pople	{r4, r5, r6, pc}
   18888:	f1c4 0400 	rsb	r4, r4, #0
   1888c:	3c20      	subs	r4, #32
   1888e:	da35      	bge.n	188fc <__aeabi_dmul+0x164>
   18890:	340c      	adds	r4, #12
   18892:	dc1b      	bgt.n	188cc <__aeabi_dmul+0x134>
   18894:	f104 0414 	add.w	r4, r4, #20
   18898:	f1c4 0520 	rsb	r5, r4, #32
   1889c:	fa00 f305 	lsl.w	r3, r0, r5
   188a0:	fa20 f004 	lsr.w	r0, r0, r4
   188a4:	fa01 f205 	lsl.w	r2, r1, r5
   188a8:	ea40 0002 	orr.w	r0, r0, r2
   188ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   188b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   188b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   188b8:	fa21 f604 	lsr.w	r6, r1, r4
   188bc:	eb42 0106 	adc.w	r1, r2, r6
   188c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   188c4:	bf08      	it	eq
   188c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   188ca:	bd70      	pop	{r4, r5, r6, pc}
   188cc:	f1c4 040c 	rsb	r4, r4, #12
   188d0:	f1c4 0520 	rsb	r5, r4, #32
   188d4:	fa00 f304 	lsl.w	r3, r0, r4
   188d8:	fa20 f005 	lsr.w	r0, r0, r5
   188dc:	fa01 f204 	lsl.w	r2, r1, r4
   188e0:	ea40 0002 	orr.w	r0, r0, r2
   188e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   188e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   188ec:	f141 0100 	adc.w	r1, r1, #0
   188f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   188f4:	bf08      	it	eq
   188f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   188fa:	bd70      	pop	{r4, r5, r6, pc}
   188fc:	f1c4 0520 	rsb	r5, r4, #32
   18900:	fa00 f205 	lsl.w	r2, r0, r5
   18904:	ea4e 0e02 	orr.w	lr, lr, r2
   18908:	fa20 f304 	lsr.w	r3, r0, r4
   1890c:	fa01 f205 	lsl.w	r2, r1, r5
   18910:	ea43 0302 	orr.w	r3, r3, r2
   18914:	fa21 f004 	lsr.w	r0, r1, r4
   18918:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1891c:	fa21 f204 	lsr.w	r2, r1, r4
   18920:	ea20 0002 	bic.w	r0, r0, r2
   18924:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   18928:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1892c:	bf08      	it	eq
   1892e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   18932:	bd70      	pop	{r4, r5, r6, pc}
   18934:	f094 0f00 	teq	r4, #0
   18938:	d10f      	bne.n	1895a <__aeabi_dmul+0x1c2>
   1893a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1893e:	0040      	lsls	r0, r0, #1
   18940:	eb41 0101 	adc.w	r1, r1, r1
   18944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18948:	bf08      	it	eq
   1894a:	3c01      	subeq	r4, #1
   1894c:	d0f7      	beq.n	1893e <__aeabi_dmul+0x1a6>
   1894e:	ea41 0106 	orr.w	r1, r1, r6
   18952:	f095 0f00 	teq	r5, #0
   18956:	bf18      	it	ne
   18958:	4770      	bxne	lr
   1895a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1895e:	0052      	lsls	r2, r2, #1
   18960:	eb43 0303 	adc.w	r3, r3, r3
   18964:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   18968:	bf08      	it	eq
   1896a:	3d01      	subeq	r5, #1
   1896c:	d0f7      	beq.n	1895e <__aeabi_dmul+0x1c6>
   1896e:	ea43 0306 	orr.w	r3, r3, r6
   18972:	4770      	bx	lr
   18974:	ea94 0f0c 	teq	r4, ip
   18978:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1897c:	bf18      	it	ne
   1897e:	ea95 0f0c 	teqne	r5, ip
   18982:	d00c      	beq.n	1899e <__aeabi_dmul+0x206>
   18984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18988:	bf18      	it	ne
   1898a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1898e:	d1d1      	bne.n	18934 <__aeabi_dmul+0x19c>
   18990:	ea81 0103 	eor.w	r1, r1, r3
   18994:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18998:	f04f 0000 	mov.w	r0, #0
   1899c:	bd70      	pop	{r4, r5, r6, pc}
   1899e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   189a2:	bf06      	itte	eq
   189a4:	4610      	moveq	r0, r2
   189a6:	4619      	moveq	r1, r3
   189a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   189ac:	d019      	beq.n	189e2 <__aeabi_dmul+0x24a>
   189ae:	ea94 0f0c 	teq	r4, ip
   189b2:	d102      	bne.n	189ba <__aeabi_dmul+0x222>
   189b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   189b8:	d113      	bne.n	189e2 <__aeabi_dmul+0x24a>
   189ba:	ea95 0f0c 	teq	r5, ip
   189be:	d105      	bne.n	189cc <__aeabi_dmul+0x234>
   189c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   189c4:	bf1c      	itt	ne
   189c6:	4610      	movne	r0, r2
   189c8:	4619      	movne	r1, r3
   189ca:	d10a      	bne.n	189e2 <__aeabi_dmul+0x24a>
   189cc:	ea81 0103 	eor.w	r1, r1, r3
   189d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   189d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   189d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   189dc:	f04f 0000 	mov.w	r0, #0
   189e0:	bd70      	pop	{r4, r5, r6, pc}
   189e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   189e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   189ea:	bd70      	pop	{r4, r5, r6, pc}

000189ec <__aeabi_ddiv>:
   189ec:	b570      	push	{r4, r5, r6, lr}
   189ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   189f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   189f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   189fa:	bf1d      	ittte	ne
   189fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   18a00:	ea94 0f0c 	teqne	r4, ip
   18a04:	ea95 0f0c 	teqne	r5, ip
   18a08:	f000 f8a7 	bleq	18b5a <__aeabi_ddiv+0x16e>
   18a0c:	eba4 0405 	sub.w	r4, r4, r5
   18a10:	ea81 0e03 	eor.w	lr, r1, r3
   18a14:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18a18:	ea4f 3101 	mov.w	r1, r1, lsl #12
   18a1c:	f000 8088 	beq.w	18b30 <__aeabi_ddiv+0x144>
   18a20:	ea4f 3303 	mov.w	r3, r3, lsl #12
   18a24:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   18a28:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   18a2c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   18a30:	ea4f 2202 	mov.w	r2, r2, lsl #8
   18a34:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   18a38:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   18a3c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   18a40:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   18a44:	429d      	cmp	r5, r3
   18a46:	bf08      	it	eq
   18a48:	4296      	cmpeq	r6, r2
   18a4a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   18a4e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   18a52:	d202      	bcs.n	18a5a <__aeabi_ddiv+0x6e>
   18a54:	085b      	lsrs	r3, r3, #1
   18a56:	ea4f 0232 	mov.w	r2, r2, rrx
   18a5a:	1ab6      	subs	r6, r6, r2
   18a5c:	eb65 0503 	sbc.w	r5, r5, r3
   18a60:	085b      	lsrs	r3, r3, #1
   18a62:	ea4f 0232 	mov.w	r2, r2, rrx
   18a66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   18a6a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   18a6e:	ebb6 0e02 	subs.w	lr, r6, r2
   18a72:	eb75 0e03 	sbcs.w	lr, r5, r3
   18a76:	bf22      	ittt	cs
   18a78:	1ab6      	subcs	r6, r6, r2
   18a7a:	4675      	movcs	r5, lr
   18a7c:	ea40 000c 	orrcs.w	r0, r0, ip
   18a80:	085b      	lsrs	r3, r3, #1
   18a82:	ea4f 0232 	mov.w	r2, r2, rrx
   18a86:	ebb6 0e02 	subs.w	lr, r6, r2
   18a8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   18a8e:	bf22      	ittt	cs
   18a90:	1ab6      	subcs	r6, r6, r2
   18a92:	4675      	movcs	r5, lr
   18a94:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   18a98:	085b      	lsrs	r3, r3, #1
   18a9a:	ea4f 0232 	mov.w	r2, r2, rrx
   18a9e:	ebb6 0e02 	subs.w	lr, r6, r2
   18aa2:	eb75 0e03 	sbcs.w	lr, r5, r3
   18aa6:	bf22      	ittt	cs
   18aa8:	1ab6      	subcs	r6, r6, r2
   18aaa:	4675      	movcs	r5, lr
   18aac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18ab0:	085b      	lsrs	r3, r3, #1
   18ab2:	ea4f 0232 	mov.w	r2, r2, rrx
   18ab6:	ebb6 0e02 	subs.w	lr, r6, r2
   18aba:	eb75 0e03 	sbcs.w	lr, r5, r3
   18abe:	bf22      	ittt	cs
   18ac0:	1ab6      	subcs	r6, r6, r2
   18ac2:	4675      	movcs	r5, lr
   18ac4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18ac8:	ea55 0e06 	orrs.w	lr, r5, r6
   18acc:	d018      	beq.n	18b00 <__aeabi_ddiv+0x114>
   18ace:	ea4f 1505 	mov.w	r5, r5, lsl #4
   18ad2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   18ad6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   18ada:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   18ade:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   18ae2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   18ae6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   18aea:	d1c0      	bne.n	18a6e <__aeabi_ddiv+0x82>
   18aec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18af0:	d10b      	bne.n	18b0a <__aeabi_ddiv+0x11e>
   18af2:	ea41 0100 	orr.w	r1, r1, r0
   18af6:	f04f 0000 	mov.w	r0, #0
   18afa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   18afe:	e7b6      	b.n	18a6e <__aeabi_ddiv+0x82>
   18b00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18b04:	bf04      	itt	eq
   18b06:	4301      	orreq	r1, r0
   18b08:	2000      	moveq	r0, #0
   18b0a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   18b0e:	bf88      	it	hi
   18b10:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   18b14:	f63f aeaf 	bhi.w	18876 <__aeabi_dmul+0xde>
   18b18:	ebb5 0c03 	subs.w	ip, r5, r3
   18b1c:	bf04      	itt	eq
   18b1e:	ebb6 0c02 	subseq.w	ip, r6, r2
   18b22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   18b26:	f150 0000 	adcs.w	r0, r0, #0
   18b2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   18b2e:	bd70      	pop	{r4, r5, r6, pc}
   18b30:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   18b34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   18b38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   18b3c:	bfc2      	ittt	gt
   18b3e:	ebd4 050c 	rsbsgt	r5, r4, ip
   18b42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   18b46:	bd70      	popgt	{r4, r5, r6, pc}
   18b48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18b4c:	f04f 0e00 	mov.w	lr, #0
   18b50:	3c01      	subs	r4, #1
   18b52:	e690      	b.n	18876 <__aeabi_dmul+0xde>
   18b54:	ea45 0e06 	orr.w	lr, r5, r6
   18b58:	e68d      	b.n	18876 <__aeabi_dmul+0xde>
   18b5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   18b5e:	ea94 0f0c 	teq	r4, ip
   18b62:	bf08      	it	eq
   18b64:	ea95 0f0c 	teqeq	r5, ip
   18b68:	f43f af3b 	beq.w	189e2 <__aeabi_dmul+0x24a>
   18b6c:	ea94 0f0c 	teq	r4, ip
   18b70:	d10a      	bne.n	18b88 <__aeabi_ddiv+0x19c>
   18b72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18b76:	f47f af34 	bne.w	189e2 <__aeabi_dmul+0x24a>
   18b7a:	ea95 0f0c 	teq	r5, ip
   18b7e:	f47f af25 	bne.w	189cc <__aeabi_dmul+0x234>
   18b82:	4610      	mov	r0, r2
   18b84:	4619      	mov	r1, r3
   18b86:	e72c      	b.n	189e2 <__aeabi_dmul+0x24a>
   18b88:	ea95 0f0c 	teq	r5, ip
   18b8c:	d106      	bne.n	18b9c <__aeabi_ddiv+0x1b0>
   18b8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18b92:	f43f aefd 	beq.w	18990 <__aeabi_dmul+0x1f8>
   18b96:	4610      	mov	r0, r2
   18b98:	4619      	mov	r1, r3
   18b9a:	e722      	b.n	189e2 <__aeabi_dmul+0x24a>
   18b9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18ba0:	bf18      	it	ne
   18ba2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18ba6:	f47f aec5 	bne.w	18934 <__aeabi_dmul+0x19c>
   18baa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   18bae:	f47f af0d 	bne.w	189cc <__aeabi_dmul+0x234>
   18bb2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   18bb6:	f47f aeeb 	bne.w	18990 <__aeabi_dmul+0x1f8>
   18bba:	e712      	b.n	189e2 <__aeabi_dmul+0x24a>

00018bbc <__gedf2>:
   18bbc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   18bc0:	e006      	b.n	18bd0 <__cmpdf2+0x4>
   18bc2:	bf00      	nop

00018bc4 <__ledf2>:
   18bc4:	f04f 0c01 	mov.w	ip, #1
   18bc8:	e002      	b.n	18bd0 <__cmpdf2+0x4>
   18bca:	bf00      	nop

00018bcc <__cmpdf2>:
   18bcc:	f04f 0c01 	mov.w	ip, #1
   18bd0:	f84d cd04 	str.w	ip, [sp, #-4]!
   18bd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18bd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18bdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18be0:	bf18      	it	ne
   18be2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   18be6:	d01b      	beq.n	18c20 <__cmpdf2+0x54>
   18be8:	b001      	add	sp, #4
   18bea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   18bee:	bf0c      	ite	eq
   18bf0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   18bf4:	ea91 0f03 	teqne	r1, r3
   18bf8:	bf02      	ittt	eq
   18bfa:	ea90 0f02 	teqeq	r0, r2
   18bfe:	2000      	moveq	r0, #0
   18c00:	4770      	bxeq	lr
   18c02:	f110 0f00 	cmn.w	r0, #0
   18c06:	ea91 0f03 	teq	r1, r3
   18c0a:	bf58      	it	pl
   18c0c:	4299      	cmppl	r1, r3
   18c0e:	bf08      	it	eq
   18c10:	4290      	cmpeq	r0, r2
   18c12:	bf2c      	ite	cs
   18c14:	17d8      	asrcs	r0, r3, #31
   18c16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   18c1a:	f040 0001 	orr.w	r0, r0, #1
   18c1e:	4770      	bx	lr
   18c20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18c24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18c28:	d102      	bne.n	18c30 <__cmpdf2+0x64>
   18c2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   18c2e:	d107      	bne.n	18c40 <__cmpdf2+0x74>
   18c30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18c34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18c38:	d1d6      	bne.n	18be8 <__cmpdf2+0x1c>
   18c3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   18c3e:	d0d3      	beq.n	18be8 <__cmpdf2+0x1c>
   18c40:	f85d 0b04 	ldr.w	r0, [sp], #4
   18c44:	4770      	bx	lr
   18c46:	bf00      	nop

00018c48 <__aeabi_cdrcmple>:
   18c48:	4684      	mov	ip, r0
   18c4a:	4610      	mov	r0, r2
   18c4c:	4662      	mov	r2, ip
   18c4e:	468c      	mov	ip, r1
   18c50:	4619      	mov	r1, r3
   18c52:	4663      	mov	r3, ip
   18c54:	e000      	b.n	18c58 <__aeabi_cdcmpeq>
   18c56:	bf00      	nop

00018c58 <__aeabi_cdcmpeq>:
   18c58:	b501      	push	{r0, lr}
   18c5a:	f7ff ffb7 	bl	18bcc <__cmpdf2>
   18c5e:	2800      	cmp	r0, #0
   18c60:	bf48      	it	mi
   18c62:	f110 0f00 	cmnmi.w	r0, #0
   18c66:	bd01      	pop	{r0, pc}

00018c68 <__aeabi_dcmpeq>:
   18c68:	f84d ed08 	str.w	lr, [sp, #-8]!
   18c6c:	f7ff fff4 	bl	18c58 <__aeabi_cdcmpeq>
   18c70:	bf0c      	ite	eq
   18c72:	2001      	moveq	r0, #1
   18c74:	2000      	movne	r0, #0
   18c76:	f85d fb08 	ldr.w	pc, [sp], #8
   18c7a:	bf00      	nop

00018c7c <__aeabi_dcmplt>:
   18c7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18c80:	f7ff ffea 	bl	18c58 <__aeabi_cdcmpeq>
   18c84:	bf34      	ite	cc
   18c86:	2001      	movcc	r0, #1
   18c88:	2000      	movcs	r0, #0
   18c8a:	f85d fb08 	ldr.w	pc, [sp], #8
   18c8e:	bf00      	nop

00018c90 <__aeabi_dcmple>:
   18c90:	f84d ed08 	str.w	lr, [sp, #-8]!
   18c94:	f7ff ffe0 	bl	18c58 <__aeabi_cdcmpeq>
   18c98:	bf94      	ite	ls
   18c9a:	2001      	movls	r0, #1
   18c9c:	2000      	movhi	r0, #0
   18c9e:	f85d fb08 	ldr.w	pc, [sp], #8
   18ca2:	bf00      	nop

00018ca4 <__aeabi_dcmpge>:
   18ca4:	f84d ed08 	str.w	lr, [sp, #-8]!
   18ca8:	f7ff ffce 	bl	18c48 <__aeabi_cdrcmple>
   18cac:	bf94      	ite	ls
   18cae:	2001      	movls	r0, #1
   18cb0:	2000      	movhi	r0, #0
   18cb2:	f85d fb08 	ldr.w	pc, [sp], #8
   18cb6:	bf00      	nop

00018cb8 <__aeabi_dcmpgt>:
   18cb8:	f84d ed08 	str.w	lr, [sp, #-8]!
   18cbc:	f7ff ffc4 	bl	18c48 <__aeabi_cdrcmple>
   18cc0:	bf34      	ite	cc
   18cc2:	2001      	movcc	r0, #1
   18cc4:	2000      	movcs	r0, #0
   18cc6:	f85d fb08 	ldr.w	pc, [sp], #8
   18cca:	bf00      	nop

00018ccc <__aeabi_d2iz>:
   18ccc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18cd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   18cd4:	d215      	bcs.n	18d02 <__aeabi_d2iz+0x36>
   18cd6:	d511      	bpl.n	18cfc <__aeabi_d2iz+0x30>
   18cd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   18cdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   18ce0:	d912      	bls.n	18d08 <__aeabi_d2iz+0x3c>
   18ce2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18ce6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18cea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   18cee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18cf2:	fa23 f002 	lsr.w	r0, r3, r2
   18cf6:	bf18      	it	ne
   18cf8:	4240      	negne	r0, r0
   18cfa:	4770      	bx	lr
   18cfc:	f04f 0000 	mov.w	r0, #0
   18d00:	4770      	bx	lr
   18d02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   18d06:	d105      	bne.n	18d14 <__aeabi_d2iz+0x48>
   18d08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   18d0c:	bf08      	it	eq
   18d0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   18d12:	4770      	bx	lr
   18d14:	f04f 0000 	mov.w	r0, #0
   18d18:	4770      	bx	lr
   18d1a:	bf00      	nop

00018d1c <__aeabi_d2uiz>:
   18d1c:	004a      	lsls	r2, r1, #1
   18d1e:	d211      	bcs.n	18d44 <__aeabi_d2uiz+0x28>
   18d20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   18d24:	d211      	bcs.n	18d4a <__aeabi_d2uiz+0x2e>
   18d26:	d50d      	bpl.n	18d44 <__aeabi_d2uiz+0x28>
   18d28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   18d2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   18d30:	d40e      	bmi.n	18d50 <__aeabi_d2uiz+0x34>
   18d32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18d36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18d3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   18d3e:	fa23 f002 	lsr.w	r0, r3, r2
   18d42:	4770      	bx	lr
   18d44:	f04f 0000 	mov.w	r0, #0
   18d48:	4770      	bx	lr
   18d4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   18d4e:	d102      	bne.n	18d56 <__aeabi_d2uiz+0x3a>
   18d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18d54:	4770      	bx	lr
   18d56:	f04f 0000 	mov.w	r0, #0
   18d5a:	4770      	bx	lr

00018d5c <__aeabi_uldivmod>:
   18d5c:	b953      	cbnz	r3, 18d74 <__aeabi_uldivmod+0x18>
   18d5e:	b94a      	cbnz	r2, 18d74 <__aeabi_uldivmod+0x18>
   18d60:	2900      	cmp	r1, #0
   18d62:	bf08      	it	eq
   18d64:	2800      	cmpeq	r0, #0
   18d66:	bf1c      	itt	ne
   18d68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   18d6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   18d70:	f000 b970 	b.w	19054 <__aeabi_idiv0>
   18d74:	f1ad 0c08 	sub.w	ip, sp, #8
   18d78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   18d7c:	f000 f806 	bl	18d8c <__udivmoddi4>
   18d80:	f8dd e004 	ldr.w	lr, [sp, #4]
   18d84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18d88:	b004      	add	sp, #16
   18d8a:	4770      	bx	lr

00018d8c <__udivmoddi4>:
   18d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d90:	9e09      	ldr	r6, [sp, #36]	; 0x24
   18d92:	4604      	mov	r4, r0
   18d94:	4689      	mov	r9, r1
   18d96:	2b00      	cmp	r3, #0
   18d98:	f040 8083 	bne.w	18ea2 <__udivmoddi4+0x116>
   18d9c:	428a      	cmp	r2, r1
   18d9e:	4615      	mov	r5, r2
   18da0:	d945      	bls.n	18e2e <__udivmoddi4+0xa2>
   18da2:	fab2 f282 	clz	r2, r2
   18da6:	b14a      	cbz	r2, 18dbc <__udivmoddi4+0x30>
   18da8:	f1c2 0720 	rsb	r7, r2, #32
   18dac:	fa01 f302 	lsl.w	r3, r1, r2
   18db0:	4095      	lsls	r5, r2
   18db2:	4094      	lsls	r4, r2
   18db4:	fa20 f707 	lsr.w	r7, r0, r7
   18db8:	ea47 0903 	orr.w	r9, r7, r3
   18dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18dc0:	0c23      	lsrs	r3, r4, #16
   18dc2:	fa1f f885 	uxth.w	r8, r5
   18dc6:	fbb9 fcfe 	udiv	ip, r9, lr
   18dca:	fb0e 991c 	mls	r9, lr, ip, r9
   18dce:	fb0c f108 	mul.w	r1, ip, r8
   18dd2:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
   18dd6:	4299      	cmp	r1, r3
   18dd8:	d90a      	bls.n	18df0 <__udivmoddi4+0x64>
   18dda:	18eb      	adds	r3, r5, r3
   18ddc:	bf2c      	ite	cs
   18dde:	2001      	movcs	r0, #1
   18de0:	2000      	movcc	r0, #0
   18de2:	4299      	cmp	r1, r3
   18de4:	d902      	bls.n	18dec <__udivmoddi4+0x60>
   18de6:	2800      	cmp	r0, #0
   18de8:	f000 811d 	beq.w	19026 <__udivmoddi4+0x29a>
   18dec:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   18df0:	1a59      	subs	r1, r3, r1
   18df2:	b2a3      	uxth	r3, r4
   18df4:	fbb1 f0fe 	udiv	r0, r1, lr
   18df8:	fb0e 1110 	mls	r1, lr, r0, r1
   18dfc:	fb00 f808 	mul.w	r8, r0, r8
   18e00:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   18e04:	45a0      	cmp	r8, r4
   18e06:	d905      	bls.n	18e14 <__udivmoddi4+0x88>
   18e08:	192c      	adds	r4, r5, r4
   18e0a:	d202      	bcs.n	18e12 <__udivmoddi4+0x86>
   18e0c:	45a0      	cmp	r8, r4
   18e0e:	f200 810e 	bhi.w	1902e <__udivmoddi4+0x2a2>
   18e12:	3801      	subs	r0, #1
   18e14:	eba4 0408 	sub.w	r4, r4, r8
   18e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   18e1c:	2700      	movs	r7, #0
   18e1e:	b11e      	cbz	r6, 18e28 <__udivmoddi4+0x9c>
   18e20:	40d4      	lsrs	r4, r2
   18e22:	2300      	movs	r3, #0
   18e24:	e9c6 4300 	strd	r4, r3, [r6]
   18e28:	4639      	mov	r1, r7
   18e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e2e:	2a00      	cmp	r2, #0
   18e30:	d051      	beq.n	18ed6 <__udivmoddi4+0x14a>
   18e32:	fab2 f282 	clz	r2, r2
   18e36:	2a00      	cmp	r2, #0
   18e38:	f040 80af 	bne.w	18f9a <__udivmoddi4+0x20e>
   18e3c:	1b49      	subs	r1, r1, r5
   18e3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18e42:	fa1f f885 	uxth.w	r8, r5
   18e46:	2701      	movs	r7, #1
   18e48:	0c23      	lsrs	r3, r4, #16
   18e4a:	fbb1 fcfe 	udiv	ip, r1, lr
   18e4e:	fb0e 111c 	mls	r1, lr, ip, r1
   18e52:	fb08 f00c 	mul.w	r0, r8, ip
   18e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   18e5a:	4298      	cmp	r0, r3
   18e5c:	d90a      	bls.n	18e74 <__udivmoddi4+0xe8>
   18e5e:	18eb      	adds	r3, r5, r3
   18e60:	bf2c      	ite	cs
   18e62:	2101      	movcs	r1, #1
   18e64:	2100      	movcc	r1, #0
   18e66:	4298      	cmp	r0, r3
   18e68:	d902      	bls.n	18e70 <__udivmoddi4+0xe4>
   18e6a:	2900      	cmp	r1, #0
   18e6c:	f000 80d7 	beq.w	1901e <__udivmoddi4+0x292>
   18e70:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   18e74:	1a19      	subs	r1, r3, r0
   18e76:	b2a3      	uxth	r3, r4
   18e78:	fbb1 f0fe 	udiv	r0, r1, lr
   18e7c:	fb0e 1110 	mls	r1, lr, r0, r1
   18e80:	fb08 f800 	mul.w	r8, r8, r0
   18e84:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   18e88:	45a0      	cmp	r8, r4
   18e8a:	d905      	bls.n	18e98 <__udivmoddi4+0x10c>
   18e8c:	192c      	adds	r4, r5, r4
   18e8e:	d202      	bcs.n	18e96 <__udivmoddi4+0x10a>
   18e90:	45a0      	cmp	r8, r4
   18e92:	f200 80c1 	bhi.w	19018 <__udivmoddi4+0x28c>
   18e96:	3801      	subs	r0, #1
   18e98:	eba4 0408 	sub.w	r4, r4, r8
   18e9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   18ea0:	e7bd      	b.n	18e1e <__udivmoddi4+0x92>
   18ea2:	428b      	cmp	r3, r1
   18ea4:	d908      	bls.n	18eb8 <__udivmoddi4+0x12c>
   18ea6:	2e00      	cmp	r6, #0
   18ea8:	d074      	beq.n	18f94 <__udivmoddi4+0x208>
   18eaa:	2700      	movs	r7, #0
   18eac:	e9c6 0100 	strd	r0, r1, [r6]
   18eb0:	4638      	mov	r0, r7
   18eb2:	4639      	mov	r1, r7
   18eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18eb8:	fab3 f783 	clz	r7, r3
   18ebc:	b967      	cbnz	r7, 18ed8 <__udivmoddi4+0x14c>
   18ebe:	428b      	cmp	r3, r1
   18ec0:	f0c0 80a4 	bcc.w	1900c <__udivmoddi4+0x280>
   18ec4:	4282      	cmp	r2, r0
   18ec6:	f240 80a1 	bls.w	1900c <__udivmoddi4+0x280>
   18eca:	4638      	mov	r0, r7
   18ecc:	2e00      	cmp	r6, #0
   18ece:	d0ab      	beq.n	18e28 <__udivmoddi4+0x9c>
   18ed0:	e9c6 4900 	strd	r4, r9, [r6]
   18ed4:	e7a8      	b.n	18e28 <__udivmoddi4+0x9c>
   18ed6:	deff      	udf	#255	; 0xff
   18ed8:	f1c7 0520 	rsb	r5, r7, #32
   18edc:	40bb      	lsls	r3, r7
   18ede:	fa02 fc07 	lsl.w	ip, r2, r7
   18ee2:	fa01 f407 	lsl.w	r4, r1, r7
   18ee6:	40ea      	lsrs	r2, r5
   18ee8:	fa20 f805 	lsr.w	r8, r0, r5
   18eec:	40e9      	lsrs	r1, r5
   18eee:	fa00 fe07 	lsl.w	lr, r0, r7
   18ef2:	431a      	orrs	r2, r3
   18ef4:	ea48 0404 	orr.w	r4, r8, r4
   18ef8:	ea4f 4812 	mov.w	r8, r2, lsr #16
   18efc:	0c20      	lsrs	r0, r4, #16
   18efe:	fa1f f982 	uxth.w	r9, r2
   18f02:	fbb1 faf8 	udiv	sl, r1, r8
   18f06:	fb08 111a 	mls	r1, r8, sl, r1
   18f0a:	fb0a fb09 	mul.w	fp, sl, r9
   18f0e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   18f12:	458b      	cmp	fp, r1
   18f14:	d90a      	bls.n	18f2c <__udivmoddi4+0x1a0>
   18f16:	1851      	adds	r1, r2, r1
   18f18:	bf2c      	ite	cs
   18f1a:	2301      	movcs	r3, #1
   18f1c:	2300      	movcc	r3, #0
   18f1e:	458b      	cmp	fp, r1
   18f20:	d902      	bls.n	18f28 <__udivmoddi4+0x19c>
   18f22:	2b00      	cmp	r3, #0
   18f24:	f000 8088 	beq.w	19038 <__udivmoddi4+0x2ac>
   18f28:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   18f2c:	eba1 010b 	sub.w	r1, r1, fp
   18f30:	b2a4      	uxth	r4, r4
   18f32:	fbb1 f0f8 	udiv	r0, r1, r8
   18f36:	fb08 1110 	mls	r1, r8, r0, r1
   18f3a:	fb00 f909 	mul.w	r9, r0, r9
   18f3e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   18f42:	4589      	cmp	r9, r1
   18f44:	d904      	bls.n	18f50 <__udivmoddi4+0x1c4>
   18f46:	1851      	adds	r1, r2, r1
   18f48:	d201      	bcs.n	18f4e <__udivmoddi4+0x1c2>
   18f4a:	4589      	cmp	r9, r1
   18f4c:	d87b      	bhi.n	19046 <__udivmoddi4+0x2ba>
   18f4e:	3801      	subs	r0, #1
   18f50:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   18f54:	eba1 0109 	sub.w	r1, r1, r9
   18f58:	fba0 890c 	umull	r8, r9, r0, ip
   18f5c:	4549      	cmp	r1, r9
   18f5e:	4644      	mov	r4, r8
   18f60:	464b      	mov	r3, r9
   18f62:	d302      	bcc.n	18f6a <__udivmoddi4+0x1de>
   18f64:	d106      	bne.n	18f74 <__udivmoddi4+0x1e8>
   18f66:	45c6      	cmp	lr, r8
   18f68:	d204      	bcs.n	18f74 <__udivmoddi4+0x1e8>
   18f6a:	3801      	subs	r0, #1
   18f6c:	ebb8 040c 	subs.w	r4, r8, ip
   18f70:	eb69 0302 	sbc.w	r3, r9, r2
   18f74:	2e00      	cmp	r6, #0
   18f76:	d05d      	beq.n	19034 <__udivmoddi4+0x2a8>
   18f78:	ebbe 0204 	subs.w	r2, lr, r4
   18f7c:	eb61 0103 	sbc.w	r1, r1, r3
   18f80:	fa01 f505 	lsl.w	r5, r1, r5
   18f84:	fa22 f307 	lsr.w	r3, r2, r7
   18f88:	40f9      	lsrs	r1, r7
   18f8a:	2700      	movs	r7, #0
   18f8c:	431d      	orrs	r5, r3
   18f8e:	e9c6 5100 	strd	r5, r1, [r6]
   18f92:	e749      	b.n	18e28 <__udivmoddi4+0x9c>
   18f94:	4637      	mov	r7, r6
   18f96:	4630      	mov	r0, r6
   18f98:	e746      	b.n	18e28 <__udivmoddi4+0x9c>
   18f9a:	f1c2 0020 	rsb	r0, r2, #32
   18f9e:	4095      	lsls	r5, r2
   18fa0:	fa01 f702 	lsl.w	r7, r1, r2
   18fa4:	fa21 f300 	lsr.w	r3, r1, r0
   18fa8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18fac:	fa24 f100 	lsr.w	r1, r4, r0
   18fb0:	fa1f f885 	uxth.w	r8, r5
   18fb4:	4094      	lsls	r4, r2
   18fb6:	4339      	orrs	r1, r7
   18fb8:	fbb3 f0fe 	udiv	r0, r3, lr
   18fbc:	0c0f      	lsrs	r7, r1, #16
   18fbe:	fb0e 3310 	mls	r3, lr, r0, r3
   18fc2:	fb00 fc08 	mul.w	ip, r0, r8
   18fc6:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   18fca:	459c      	cmp	ip, r3
   18fcc:	d907      	bls.n	18fde <__udivmoddi4+0x252>
   18fce:	18eb      	adds	r3, r5, r3
   18fd0:	bf2c      	ite	cs
   18fd2:	2701      	movcs	r7, #1
   18fd4:	2700      	movcc	r7, #0
   18fd6:	459c      	cmp	ip, r3
   18fd8:	d900      	bls.n	18fdc <__udivmoddi4+0x250>
   18fda:	b38f      	cbz	r7, 19040 <__udivmoddi4+0x2b4>
   18fdc:	3801      	subs	r0, #1
   18fde:	eba3 030c 	sub.w	r3, r3, ip
   18fe2:	b289      	uxth	r1, r1
   18fe4:	fbb3 f7fe 	udiv	r7, r3, lr
   18fe8:	fb0e 3317 	mls	r3, lr, r7, r3
   18fec:	fb07 fc08 	mul.w	ip, r7, r8
   18ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   18ff4:	458c      	cmp	ip, r1
   18ff6:	d904      	bls.n	19002 <__udivmoddi4+0x276>
   18ff8:	1869      	adds	r1, r5, r1
   18ffa:	d201      	bcs.n	19000 <__udivmoddi4+0x274>
   18ffc:	458c      	cmp	ip, r1
   18ffe:	d825      	bhi.n	1904c <__udivmoddi4+0x2c0>
   19000:	3f01      	subs	r7, #1
   19002:	eba1 010c 	sub.w	r1, r1, ip
   19006:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
   1900a:	e71d      	b.n	18e48 <__udivmoddi4+0xbc>
   1900c:	1a84      	subs	r4, r0, r2
   1900e:	eb61 0303 	sbc.w	r3, r1, r3
   19012:	2001      	movs	r0, #1
   19014:	4699      	mov	r9, r3
   19016:	e759      	b.n	18ecc <__udivmoddi4+0x140>
   19018:	3802      	subs	r0, #2
   1901a:	442c      	add	r4, r5
   1901c:	e73c      	b.n	18e98 <__udivmoddi4+0x10c>
   1901e:	f1ac 0c02 	sub.w	ip, ip, #2
   19022:	442b      	add	r3, r5
   19024:	e726      	b.n	18e74 <__udivmoddi4+0xe8>
   19026:	f1ac 0c02 	sub.w	ip, ip, #2
   1902a:	442b      	add	r3, r5
   1902c:	e6e0      	b.n	18df0 <__udivmoddi4+0x64>
   1902e:	3802      	subs	r0, #2
   19030:	442c      	add	r4, r5
   19032:	e6ef      	b.n	18e14 <__udivmoddi4+0x88>
   19034:	4637      	mov	r7, r6
   19036:	e6f7      	b.n	18e28 <__udivmoddi4+0x9c>
   19038:	f1aa 0a02 	sub.w	sl, sl, #2
   1903c:	4411      	add	r1, r2
   1903e:	e775      	b.n	18f2c <__udivmoddi4+0x1a0>
   19040:	3802      	subs	r0, #2
   19042:	442b      	add	r3, r5
   19044:	e7cb      	b.n	18fde <__udivmoddi4+0x252>
   19046:	3802      	subs	r0, #2
   19048:	4411      	add	r1, r2
   1904a:	e781      	b.n	18f50 <__udivmoddi4+0x1c4>
   1904c:	3f02      	subs	r7, #2
   1904e:	4429      	add	r1, r5
   19050:	e7d7      	b.n	19002 <__udivmoddi4+0x276>
   19052:	bf00      	nop

00019054 <__aeabi_idiv0>:
   19054:	4770      	bx	lr
   19056:	bf00      	nop

00019058 <ocrypto_bigint_add128>:
   19058:	b470      	push	{r4, r5, r6}
   1905a:	e891 0078 	ldmia.w	r1, {r3, r4, r5, r6}
   1905e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19062:	185b      	adds	r3, r3, r1
   19064:	eb54 040c 	adcs.w	r4, r4, ip
   19068:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   1906c:	414d      	adcs	r5, r1
   1906e:	eb56 060c 	adcs.w	r6, r6, ip
   19072:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
   19076:	4180      	sbcs	r0, r0
   19078:	3001      	adds	r0, #1
   1907a:	bc70      	pop	{r4, r5, r6}
   1907c:	4770      	bx	lr

0001907e <ocrypto_bigint_sub128>:
   1907e:	b470      	push	{r4, r5, r6}
   19080:	e891 0078 	ldmia.w	r1, {r3, r4, r5, r6}
   19084:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19088:	1a5b      	subs	r3, r3, r1
   1908a:	eb74 040c 	sbcs.w	r4, r4, ip
   1908e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19092:	418d      	sbcs	r5, r1
   19094:	eb76 060c 	sbcs.w	r6, r6, ip
   19098:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
   1909c:	4180      	sbcs	r0, r0
   1909e:	4240      	negs	r0, r0
   190a0:	bc70      	pop	{r4, r5, r6}
   190a2:	4770      	bx	lr

000190a4 <ocrypto_bigint_add256>:
   190a4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   190a8:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
   190ac:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   190b0:	185b      	adds	r3, r3, r1
   190b2:	eb54 040c 	adcs.w	r4, r4, ip
   190b6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   190ba:	414d      	adcs	r5, r1
   190bc:	eb56 060c 	adcs.w	r6, r6, ip
   190c0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   190c4:	414f      	adcs	r7, r1
   190c6:	eb58 080c 	adcs.w	r8, r8, ip
   190ca:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   190ce:	eb59 0901 	adcs.w	r9, r9, r1
   190d2:	eb5a 0a0c 	adcs.w	sl, sl, ip
   190d6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
   190da:	4180      	sbcs	r0, r0
   190dc:	3001      	adds	r0, #1
   190de:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   190e2:	4770      	bx	lr

000190e4 <ocrypto_bigint_sub256>:
   190e4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   190e8:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
   190ec:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   190f0:	1a5b      	subs	r3, r3, r1
   190f2:	eb74 040c 	sbcs.w	r4, r4, ip
   190f6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   190fa:	418d      	sbcs	r5, r1
   190fc:	eb76 060c 	sbcs.w	r6, r6, ip
   19100:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19104:	418f      	sbcs	r7, r1
   19106:	eb78 080c 	sbcs.w	r8, r8, ip
   1910a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   1910e:	eb79 0901 	sbcs.w	r9, r9, r1
   19112:	eb7a 0a0c 	sbcs.w	sl, sl, ip
   19116:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
   1911a:	4180      	sbcs	r0, r0
   1911c:	4240      	negs	r0, r0
   1911e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19122:	4770      	bx	lr

00019124 <ocrypto_bigint_cadd256>:
   19124:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19128:	4252      	negs	r2, r2
   1912a:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
   1912e:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
   19132:	4017      	ands	r7, r2
   19134:	19db      	adds	r3, r3, r7
   19136:	ea18 0802 	ands.w	r8, r8, r2
   1913a:	eb54 0408 	adcs.w	r4, r4, r8
   1913e:	ea19 0902 	ands.w	r9, r9, r2
   19142:	eb55 0509 	adcs.w	r5, r5, r9
   19146:	ea1a 0a02 	ands.w	sl, sl, r2
   1914a:	eb56 060a 	adcs.w	r6, r6, sl
   1914e:	c078      	stmia	r0!, {r3, r4, r5, r6}
   19150:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
   19154:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
   19158:	4017      	ands	r7, r2
   1915a:	417b      	adcs	r3, r7
   1915c:	ea18 0802 	ands.w	r8, r8, r2
   19160:	eb54 0408 	adcs.w	r4, r4, r8
   19164:	ea19 0902 	ands.w	r9, r9, r2
   19168:	eb55 0509 	adcs.w	r5, r5, r9
   1916c:	ea1a 0a02 	ands.w	sl, sl, r2
   19170:	eb56 060a 	adcs.w	r6, r6, sl
   19174:	c078      	stmia	r0!, {r3, r4, r5, r6}
   19176:	4180      	sbcs	r0, r0
   19178:	3001      	adds	r0, #1
   1917a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   1917e:	4770      	bx	lr

00019180 <ocrypto_bigint_csub256>:
   19180:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19184:	4252      	negs	r2, r2
   19186:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
   1918a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
   1918e:	4017      	ands	r7, r2
   19190:	1bdb      	subs	r3, r3, r7
   19192:	ea18 0802 	ands.w	r8, r8, r2
   19196:	eb74 0408 	sbcs.w	r4, r4, r8
   1919a:	ea19 0902 	ands.w	r9, r9, r2
   1919e:	eb75 0509 	sbcs.w	r5, r5, r9
   191a2:	ea1a 0a02 	ands.w	sl, sl, r2
   191a6:	eb76 060a 	sbcs.w	r6, r6, sl
   191aa:	c078      	stmia	r0!, {r3, r4, r5, r6}
   191ac:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
   191b0:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
   191b4:	4017      	ands	r7, r2
   191b6:	41bb      	sbcs	r3, r7
   191b8:	ea18 0802 	ands.w	r8, r8, r2
   191bc:	eb74 0408 	sbcs.w	r4, r4, r8
   191c0:	ea19 0902 	ands.w	r9, r9, r2
   191c4:	eb75 0509 	sbcs.w	r5, r5, r9
   191c8:	ea1a 0a02 	ands.w	sl, sl, r2
   191cc:	eb76 060a 	sbcs.w	r6, r6, sl
   191d0:	c078      	stmia	r0!, {r3, r4, r5, r6}
   191d2:	4180      	sbcs	r0, r0
   191d4:	4240      	negs	r0, r0
   191d6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   191da:	4770      	bx	lr

000191dc <cswap64>:
   191dc:	e890 0030 	ldmia.w	r0, {r4, r5}
   191e0:	e891 00c0 	ldmia.w	r1, {r6, r7}
   191e4:	1ba3      	subs	r3, r4, r6
   191e6:	4013      	ands	r3, r2
   191e8:	1ae4      	subs	r4, r4, r3
   191ea:	18f6      	adds	r6, r6, r3
   191ec:	1beb      	subs	r3, r5, r7
   191ee:	4013      	ands	r3, r2
   191f0:	1aed      	subs	r5, r5, r3
   191f2:	18ff      	adds	r7, r7, r3
   191f4:	c030      	stmia	r0!, {r4, r5}
   191f6:	c1c0      	stmia	r1!, {r6, r7}
   191f8:	4770      	bx	lr

000191fa <ocrypto_bigint_cswap256>:
   191fa:	b5f0      	push	{r4, r5, r6, r7, lr}
   191fc:	4252      	negs	r2, r2
   191fe:	f7ff ffed 	bl	191dc <cswap64>
   19202:	f7ff ffeb 	bl	191dc <cswap64>
   19206:	f7ff ffe9 	bl	191dc <cswap64>
   1920a:	f7ff ffe7 	bl	191dc <cswap64>
   1920e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019210 <ocrypto_bigint_mul128>:
   19210:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19214:	c93a      	ldmia	r1, {r1, r3, r4, r5}
   19216:	6816      	ldr	r6, [r2, #0]
   19218:	fba1 9a06 	umull	r9, sl, r1, r6
   1921c:	f04f 0c00 	mov.w	ip, #0
   19220:	fbe3 ac06 	umlal	sl, ip, r3, r6
   19224:	f04f 0700 	mov.w	r7, #0
   19228:	fbe4 c706 	umlal	ip, r7, r4, r6
   1922c:	f04f 0800 	mov.w	r8, #0
   19230:	fbe5 7806 	umlal	r7, r8, r5, r6
   19234:	f840 9b04 	str.w	r9, [r0], #4
   19238:	6856      	ldr	r6, [r2, #4]
   1923a:	f04f 0900 	mov.w	r9, #0
   1923e:	fbe1 a906 	umlal	sl, r9, r1, r6
   19242:	eb1c 0c09 	adds.w	ip, ip, r9
   19246:	f04f 0900 	mov.w	r9, #0
   1924a:	eb49 0909 	adc.w	r9, r9, r9
   1924e:	fbe3 c906 	umlal	ip, r9, r3, r6
   19252:	eb17 0709 	adds.w	r7, r7, r9
   19256:	f04f 0900 	mov.w	r9, #0
   1925a:	eb49 0909 	adc.w	r9, r9, r9
   1925e:	fbe4 7906 	umlal	r7, r9, r4, r6
   19262:	eb18 0809 	adds.w	r8, r8, r9
   19266:	f04f 0900 	mov.w	r9, #0
   1926a:	eb49 0909 	adc.w	r9, r9, r9
   1926e:	fbe5 8906 	umlal	r8, r9, r5, r6
   19272:	f840 ab04 	str.w	sl, [r0], #4
   19276:	6896      	ldr	r6, [r2, #8]
   19278:	f04f 0a00 	mov.w	sl, #0
   1927c:	fbe1 ca06 	umlal	ip, sl, r1, r6
   19280:	eb17 070a 	adds.w	r7, r7, sl
   19284:	f04f 0a00 	mov.w	sl, #0
   19288:	eb4a 0a0a 	adc.w	sl, sl, sl
   1928c:	fbe3 7a06 	umlal	r7, sl, r3, r6
   19290:	eb18 080a 	adds.w	r8, r8, sl
   19294:	f04f 0a00 	mov.w	sl, #0
   19298:	eb4a 0a0a 	adc.w	sl, sl, sl
   1929c:	fbe4 8a06 	umlal	r8, sl, r4, r6
   192a0:	eb19 090a 	adds.w	r9, r9, sl
   192a4:	f04f 0a00 	mov.w	sl, #0
   192a8:	eb4a 0a0a 	adc.w	sl, sl, sl
   192ac:	fbe5 9a06 	umlal	r9, sl, r5, r6
   192b0:	f840 cb04 	str.w	ip, [r0], #4
   192b4:	68d6      	ldr	r6, [r2, #12]
   192b6:	f04f 0c00 	mov.w	ip, #0
   192ba:	fbe1 7c06 	umlal	r7, ip, r1, r6
   192be:	eb18 080c 	adds.w	r8, r8, ip
   192c2:	f04f 0c00 	mov.w	ip, #0
   192c6:	eb4c 0c0c 	adc.w	ip, ip, ip
   192ca:	fbe3 8c06 	umlal	r8, ip, r3, r6
   192ce:	eb19 090c 	adds.w	r9, r9, ip
   192d2:	f04f 0c00 	mov.w	ip, #0
   192d6:	eb4c 0c0c 	adc.w	ip, ip, ip
   192da:	fbe4 9c06 	umlal	r9, ip, r4, r6
   192de:	eb1a 0a0c 	adds.w	sl, sl, ip
   192e2:	f04f 0c00 	mov.w	ip, #0
   192e6:	eb4c 0c0c 	adc.w	ip, ip, ip
   192ea:	fbe5 ac06 	umlal	sl, ip, r5, r6
   192ee:	e880 1780 	stmia.w	r0, {r7, r8, r9, sl, ip}
   192f2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   192f6:	4770      	bx	lr

000192f8 <ocrypto_bigint_sqr256>:
   192f8:	460a      	mov	r2, r1

000192fa <ocrypto_bigint_mul256>:
   192fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   192fe:	ec41 0a14 	vmov	s8, s9, r0, r1
   19302:	ec92 0a08 	vldmia	r2, {s0-s7}
   19306:	c91e      	ldmia	r1, {r1, r2, r3, r4}
   19308:	ee10 0a10 	vmov	r0, s0
   1930c:	fba1 7800 	umull	r7, r8, r1, r0
   19310:	f04f 0900 	mov.w	r9, #0
   19314:	fbe2 8900 	umlal	r8, r9, r2, r0
   19318:	f04f 0a00 	mov.w	sl, #0
   1931c:	fbe3 9a00 	umlal	r9, sl, r3, r0
   19320:	f04f 0b00 	mov.w	fp, #0
   19324:	fbe4 ab00 	umlal	sl, fp, r4, r0
   19328:	ee12 0a10 	vmov	r0, s4
   1932c:	f04f 0c00 	mov.w	ip, #0
   19330:	fbe1 bc00 	umlal	fp, ip, r1, r0
   19334:	f04f 0e00 	mov.w	lr, #0
   19338:	fbe2 ce00 	umlal	ip, lr, r2, r0
   1933c:	f04f 0500 	mov.w	r5, #0
   19340:	fbe3 e500 	umlal	lr, r5, r3, r0
   19344:	f04f 0600 	mov.w	r6, #0
   19348:	fbe4 5600 	umlal	r5, r6, r4, r0
   1934c:	ee05 7a10 	vmov	s10, r7
   19350:	ee10 0a90 	vmov	r0, s1
   19354:	f04f 0700 	mov.w	r7, #0
   19358:	fbe1 8700 	umlal	r8, r7, r1, r0
   1935c:	eb19 0907 	adds.w	r9, r9, r7
   19360:	f04f 0700 	mov.w	r7, #0
   19364:	eb47 0707 	adc.w	r7, r7, r7
   19368:	fbe2 9700 	umlal	r9, r7, r2, r0
   1936c:	eb1a 0a07 	adds.w	sl, sl, r7
   19370:	f04f 0700 	mov.w	r7, #0
   19374:	eb47 0707 	adc.w	r7, r7, r7
   19378:	fbe3 a700 	umlal	sl, r7, r3, r0
   1937c:	eb1b 0b07 	adds.w	fp, fp, r7
   19380:	f04f 0700 	mov.w	r7, #0
   19384:	eb47 0707 	adc.w	r7, r7, r7
   19388:	fbe4 b700 	umlal	fp, r7, r4, r0
   1938c:	ee12 0a90 	vmov	r0, s5
   19390:	eb1c 0c07 	adds.w	ip, ip, r7
   19394:	f04f 0700 	mov.w	r7, #0
   19398:	eb47 0707 	adc.w	r7, r7, r7
   1939c:	fbe1 c700 	umlal	ip, r7, r1, r0
   193a0:	eb1e 0e07 	adds.w	lr, lr, r7
   193a4:	f04f 0700 	mov.w	r7, #0
   193a8:	eb47 0707 	adc.w	r7, r7, r7
   193ac:	fbe2 e700 	umlal	lr, r7, r2, r0
   193b0:	19ed      	adds	r5, r5, r7
   193b2:	f04f 0700 	mov.w	r7, #0
   193b6:	eb47 0707 	adc.w	r7, r7, r7
   193ba:	fbe3 5700 	umlal	r5, r7, r3, r0
   193be:	19f6      	adds	r6, r6, r7
   193c0:	f04f 0700 	mov.w	r7, #0
   193c4:	eb47 0707 	adc.w	r7, r7, r7
   193c8:	fbe4 6700 	umlal	r6, r7, r4, r0
   193cc:	ee05 8a90 	vmov	s11, r8
   193d0:	ee11 0a10 	vmov	r0, s2
   193d4:	f04f 0800 	mov.w	r8, #0
   193d8:	fbe1 9800 	umlal	r9, r8, r1, r0
   193dc:	eb1a 0a08 	adds.w	sl, sl, r8
   193e0:	f04f 0800 	mov.w	r8, #0
   193e4:	eb48 0808 	adc.w	r8, r8, r8
   193e8:	fbe2 a800 	umlal	sl, r8, r2, r0
   193ec:	eb1b 0b08 	adds.w	fp, fp, r8
   193f0:	f04f 0800 	mov.w	r8, #0
   193f4:	eb48 0808 	adc.w	r8, r8, r8
   193f8:	fbe3 b800 	umlal	fp, r8, r3, r0
   193fc:	eb1c 0c08 	adds.w	ip, ip, r8
   19400:	f04f 0800 	mov.w	r8, #0
   19404:	eb48 0808 	adc.w	r8, r8, r8
   19408:	fbe4 c800 	umlal	ip, r8, r4, r0
   1940c:	ee13 0a10 	vmov	r0, s6
   19410:	eb1e 0e08 	adds.w	lr, lr, r8
   19414:	f04f 0800 	mov.w	r8, #0
   19418:	eb48 0808 	adc.w	r8, r8, r8
   1941c:	fbe1 e800 	umlal	lr, r8, r1, r0
   19420:	eb15 0508 	adds.w	r5, r5, r8
   19424:	f04f 0800 	mov.w	r8, #0
   19428:	eb48 0808 	adc.w	r8, r8, r8
   1942c:	fbe2 5800 	umlal	r5, r8, r2, r0
   19430:	eb16 0608 	adds.w	r6, r6, r8
   19434:	f04f 0800 	mov.w	r8, #0
   19438:	eb48 0808 	adc.w	r8, r8, r8
   1943c:	fbe3 6800 	umlal	r6, r8, r3, r0
   19440:	eb17 0708 	adds.w	r7, r7, r8
   19444:	f04f 0800 	mov.w	r8, #0
   19448:	eb48 0808 	adc.w	r8, r8, r8
   1944c:	fbe4 7800 	umlal	r7, r8, r4, r0
   19450:	ee06 9a10 	vmov	s12, r9
   19454:	ee11 0a90 	vmov	r0, s3
   19458:	f04f 0900 	mov.w	r9, #0
   1945c:	fbe1 a900 	umlal	sl, r9, r1, r0
   19460:	eb1b 0b09 	adds.w	fp, fp, r9
   19464:	f04f 0900 	mov.w	r9, #0
   19468:	eb49 0909 	adc.w	r9, r9, r9
   1946c:	fbe2 b900 	umlal	fp, r9, r2, r0
   19470:	eb1c 0c09 	adds.w	ip, ip, r9
   19474:	f04f 0900 	mov.w	r9, #0
   19478:	eb49 0909 	adc.w	r9, r9, r9
   1947c:	fbe3 c900 	umlal	ip, r9, r3, r0
   19480:	eb1e 0e09 	adds.w	lr, lr, r9
   19484:	f04f 0900 	mov.w	r9, #0
   19488:	eb49 0909 	adc.w	r9, r9, r9
   1948c:	fbe4 e900 	umlal	lr, r9, r4, r0
   19490:	ee13 0a90 	vmov	r0, s7
   19494:	eb15 0509 	adds.w	r5, r5, r9
   19498:	f04f 0900 	mov.w	r9, #0
   1949c:	eb49 0909 	adc.w	r9, r9, r9
   194a0:	fbe1 5900 	umlal	r5, r9, r1, r0
   194a4:	eb16 0609 	adds.w	r6, r6, r9
   194a8:	f04f 0900 	mov.w	r9, #0
   194ac:	eb49 0909 	adc.w	r9, r9, r9
   194b0:	fbe2 6900 	umlal	r6, r9, r2, r0
   194b4:	eb17 0709 	adds.w	r7, r7, r9
   194b8:	f04f 0900 	mov.w	r9, #0
   194bc:	eb49 0909 	adc.w	r9, r9, r9
   194c0:	fbe3 7900 	umlal	r7, r9, r3, r0
   194c4:	eb18 0809 	adds.w	r8, r8, r9
   194c8:	f04f 0900 	mov.w	r9, #0
   194cc:	eb49 0909 	adc.w	r9, r9, r9
   194d0:	fbe4 8900 	umlal	r8, r9, r4, r0
   194d4:	ee06 aa90 	vmov	s13, sl
   194d8:	ee14 1a90 	vmov	r1, s9
   194dc:	f101 0110 	add.w	r1, r1, #16
   194e0:	c91e      	ldmia	r1, {r1, r2, r3, r4}
   194e2:	ee10 0a10 	vmov	r0, s0
   194e6:	f04f 0a00 	mov.w	sl, #0
   194ea:	fbe1 ba00 	umlal	fp, sl, r1, r0
   194ee:	eb1c 0c0a 	adds.w	ip, ip, sl
   194f2:	f04f 0a00 	mov.w	sl, #0
   194f6:	eb4a 0a0a 	adc.w	sl, sl, sl
   194fa:	fbe2 ca00 	umlal	ip, sl, r2, r0
   194fe:	eb1e 0e0a 	adds.w	lr, lr, sl
   19502:	f04f 0a00 	mov.w	sl, #0
   19506:	eb4a 0a0a 	adc.w	sl, sl, sl
   1950a:	fbe3 ea00 	umlal	lr, sl, r3, r0
   1950e:	eb15 050a 	adds.w	r5, r5, sl
   19512:	f04f 0a00 	mov.w	sl, #0
   19516:	eb4a 0a0a 	adc.w	sl, sl, sl
   1951a:	fbe4 5a00 	umlal	r5, sl, r4, r0
   1951e:	ee12 0a10 	vmov	r0, s4
   19522:	eb16 060a 	adds.w	r6, r6, sl
   19526:	f04f 0a00 	mov.w	sl, #0
   1952a:	eb4a 0a0a 	adc.w	sl, sl, sl
   1952e:	fbe1 6a00 	umlal	r6, sl, r1, r0
   19532:	eb17 070a 	adds.w	r7, r7, sl
   19536:	f04f 0a00 	mov.w	sl, #0
   1953a:	eb4a 0a0a 	adc.w	sl, sl, sl
   1953e:	fbe2 7a00 	umlal	r7, sl, r2, r0
   19542:	eb18 080a 	adds.w	r8, r8, sl
   19546:	f04f 0a00 	mov.w	sl, #0
   1954a:	eb4a 0a0a 	adc.w	sl, sl, sl
   1954e:	fbe3 8a00 	umlal	r8, sl, r3, r0
   19552:	eb19 090a 	adds.w	r9, r9, sl
   19556:	f04f 0a00 	mov.w	sl, #0
   1955a:	eb4a 0a0a 	adc.w	sl, sl, sl
   1955e:	fbe4 9a00 	umlal	r9, sl, r4, r0
   19562:	ee07 ba10 	vmov	s14, fp
   19566:	ee10 0a90 	vmov	r0, s1
   1956a:	f04f 0b00 	mov.w	fp, #0
   1956e:	fbe1 cb00 	umlal	ip, fp, r1, r0
   19572:	eb1e 0e0b 	adds.w	lr, lr, fp
   19576:	f04f 0b00 	mov.w	fp, #0
   1957a:	eb4b 0b0b 	adc.w	fp, fp, fp
   1957e:	fbe2 eb00 	umlal	lr, fp, r2, r0
   19582:	eb15 050b 	adds.w	r5, r5, fp
   19586:	f04f 0b00 	mov.w	fp, #0
   1958a:	eb4b 0b0b 	adc.w	fp, fp, fp
   1958e:	fbe3 5b00 	umlal	r5, fp, r3, r0
   19592:	eb16 060b 	adds.w	r6, r6, fp
   19596:	f04f 0b00 	mov.w	fp, #0
   1959a:	eb4b 0b0b 	adc.w	fp, fp, fp
   1959e:	fbe4 6b00 	umlal	r6, fp, r4, r0
   195a2:	ee12 0a90 	vmov	r0, s5
   195a6:	eb17 070b 	adds.w	r7, r7, fp
   195aa:	f04f 0b00 	mov.w	fp, #0
   195ae:	eb4b 0b0b 	adc.w	fp, fp, fp
   195b2:	fbe1 7b00 	umlal	r7, fp, r1, r0
   195b6:	eb18 080b 	adds.w	r8, r8, fp
   195ba:	f04f 0b00 	mov.w	fp, #0
   195be:	eb4b 0b0b 	adc.w	fp, fp, fp
   195c2:	fbe2 8b00 	umlal	r8, fp, r2, r0
   195c6:	eb19 090b 	adds.w	r9, r9, fp
   195ca:	f04f 0b00 	mov.w	fp, #0
   195ce:	eb4b 0b0b 	adc.w	fp, fp, fp
   195d2:	fbe3 9b00 	umlal	r9, fp, r3, r0
   195d6:	eb1a 0a0b 	adds.w	sl, sl, fp
   195da:	f04f 0b00 	mov.w	fp, #0
   195de:	eb4b 0b0b 	adc.w	fp, fp, fp
   195e2:	fbe4 ab00 	umlal	sl, fp, r4, r0
   195e6:	ee07 ca90 	vmov	s15, ip
   195ea:	ee11 0a10 	vmov	r0, s2
   195ee:	f04f 0c00 	mov.w	ip, #0
   195f2:	fbe1 ec00 	umlal	lr, ip, r1, r0
   195f6:	eb15 050c 	adds.w	r5, r5, ip
   195fa:	f04f 0c00 	mov.w	ip, #0
   195fe:	eb4c 0c0c 	adc.w	ip, ip, ip
   19602:	fbe2 5c00 	umlal	r5, ip, r2, r0
   19606:	eb16 060c 	adds.w	r6, r6, ip
   1960a:	f04f 0c00 	mov.w	ip, #0
   1960e:	eb4c 0c0c 	adc.w	ip, ip, ip
   19612:	fbe3 6c00 	umlal	r6, ip, r3, r0
   19616:	eb17 070c 	adds.w	r7, r7, ip
   1961a:	f04f 0c00 	mov.w	ip, #0
   1961e:	eb4c 0c0c 	adc.w	ip, ip, ip
   19622:	fbe4 7c00 	umlal	r7, ip, r4, r0
   19626:	ee13 0a10 	vmov	r0, s6
   1962a:	eb18 080c 	adds.w	r8, r8, ip
   1962e:	f04f 0c00 	mov.w	ip, #0
   19632:	eb4c 0c0c 	adc.w	ip, ip, ip
   19636:	fbe1 8c00 	umlal	r8, ip, r1, r0
   1963a:	eb19 090c 	adds.w	r9, r9, ip
   1963e:	f04f 0c00 	mov.w	ip, #0
   19642:	eb4c 0c0c 	adc.w	ip, ip, ip
   19646:	fbe2 9c00 	umlal	r9, ip, r2, r0
   1964a:	eb1a 0a0c 	adds.w	sl, sl, ip
   1964e:	f04f 0c00 	mov.w	ip, #0
   19652:	eb4c 0c0c 	adc.w	ip, ip, ip
   19656:	fbe3 ac00 	umlal	sl, ip, r3, r0
   1965a:	eb1b 0b0c 	adds.w	fp, fp, ip
   1965e:	f04f 0c00 	mov.w	ip, #0
   19662:	eb4c 0c0c 	adc.w	ip, ip, ip
   19666:	fbe4 bc00 	umlal	fp, ip, r4, r0
   1966a:	ee08 ea10 	vmov	s16, lr
   1966e:	ee11 0a90 	vmov	r0, s3
   19672:	f04f 0e00 	mov.w	lr, #0
   19676:	fbe1 5e00 	umlal	r5, lr, r1, r0
   1967a:	eb16 060e 	adds.w	r6, r6, lr
   1967e:	f04f 0e00 	mov.w	lr, #0
   19682:	eb4e 0e0e 	adc.w	lr, lr, lr
   19686:	fbe2 6e00 	umlal	r6, lr, r2, r0
   1968a:	eb17 070e 	adds.w	r7, r7, lr
   1968e:	f04f 0e00 	mov.w	lr, #0
   19692:	eb4e 0e0e 	adc.w	lr, lr, lr
   19696:	fbe3 7e00 	umlal	r7, lr, r3, r0
   1969a:	eb18 080e 	adds.w	r8, r8, lr
   1969e:	f04f 0e00 	mov.w	lr, #0
   196a2:	eb4e 0e0e 	adc.w	lr, lr, lr
   196a6:	fbe4 8e00 	umlal	r8, lr, r4, r0
   196aa:	ee13 0a90 	vmov	r0, s7
   196ae:	eb19 090e 	adds.w	r9, r9, lr
   196b2:	f04f 0e00 	mov.w	lr, #0
   196b6:	eb4e 0e0e 	adc.w	lr, lr, lr
   196ba:	fbe1 9e00 	umlal	r9, lr, r1, r0
   196be:	eb1a 0a0e 	adds.w	sl, sl, lr
   196c2:	f04f 0e00 	mov.w	lr, #0
   196c6:	eb4e 0e0e 	adc.w	lr, lr, lr
   196ca:	fbe2 ae00 	umlal	sl, lr, r2, r0
   196ce:	eb1b 0b0e 	adds.w	fp, fp, lr
   196d2:	f04f 0e00 	mov.w	lr, #0
   196d6:	eb4e 0e0e 	adc.w	lr, lr, lr
   196da:	fbe3 be00 	umlal	fp, lr, r3, r0
   196de:	eb1c 0c0e 	adds.w	ip, ip, lr
   196e2:	f04f 0e00 	mov.w	lr, #0
   196e6:	eb4e 0e0e 	adc.w	lr, lr, lr
   196ea:	fbe4 ce00 	umlal	ip, lr, r4, r0
   196ee:	ee14 0a10 	vmov	r0, s8
   196f2:	eca0 5a07 	vstmia	r0!, {s10-s16}
   196f6:	e880 5fe0 	stmia.w	r0, {r5, r6, r7, r8, r9, sl, fp, ip, lr}
   196fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196fe:	bf00      	nop

00019700 <ocrypto_constant_time_equal>:
   19700:	b430      	push	{r4, r5}
   19702:	f04f 0300 	mov.w	r3, #0

00019706 <constant_time_equal_loop>:
   19706:	f810 4b01 	ldrb.w	r4, [r0], #1
   1970a:	f811 5b01 	ldrb.w	r5, [r1], #1
   1970e:	3a01      	subs	r2, #1
   19710:	ea84 0405 	eor.w	r4, r4, r5
   19714:	ea43 0304 	orr.w	r3, r3, r4
   19718:	d1f5      	bne.n	19706 <constant_time_equal_loop>
   1971a:	f1a3 0301 	sub.w	r3, r3, #1
   1971e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
   19722:	bc30      	pop	{r4, r5}
   19724:	4770      	bx	lr

00019726 <ocrypto_constant_time_is_zero>:
   19726:	f04f 0300 	mov.w	r3, #0

0001972a <constant_time_is_zero_loop>:
   1972a:	f810 2b01 	ldrb.w	r2, [r0], #1
   1972e:	3901      	subs	r1, #1
   19730:	ea43 0302 	orr.w	r3, r3, r2
   19734:	d1f9      	bne.n	1972a <constant_time_is_zero_loop>
   19736:	f1a3 0301 	sub.w	r3, r3, #1
   1973a:	ea4f 70d3 	mov.w	r0, r3, lsr #31
   1973e:	4770      	bx	lr

00019740 <ocrypto_constant_time_copy>:
   19740:	f811 3b01 	ldrb.w	r3, [r1], #1
   19744:	f800 3b01 	strb.w	r3, [r0], #1
   19748:	3a01      	subs	r2, #1
   1974a:	d1f9      	bne.n	19740 <ocrypto_constant_time_copy>
   1974c:	4770      	bx	lr

0001974e <ocrypto_constant_time_fill_zero>:
   1974e:	2200      	movs	r2, #0

00019750 <constant_time_fill_zero_loop>:
   19750:	f800 2b01 	strb.w	r2, [r0], #1
   19754:	3901      	subs	r1, #1
   19756:	d1fb      	bne.n	19750 <constant_time_fill_zero_loop>
   19758:	4770      	bx	lr
   1975a:	bf00      	nop

0001975c <ocrypto_mod_p256_add>:
   1975c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19760:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
   19764:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19768:	185b      	adds	r3, r3, r1
   1976a:	eb54 040c 	adcs.w	r4, r4, ip
   1976e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19772:	414d      	adcs	r5, r1
   19774:	eb56 060c 	adcs.w	r6, r6, ip
   19778:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   1977c:	414f      	adcs	r7, r1
   1977e:	eb58 080c 	adcs.w	r8, r8, ip
   19782:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19786:	eb59 0901 	adcs.w	r9, r9, r1
   1978a:	eb5a 0a0c 	adcs.w	sl, sl, ip
   1978e:	4189      	sbcs	r1, r1
   19790:	f1b3 33ff 	subs.w	r3, r3, #4294967295	; 0xffffffff
   19794:	f174 34ff 	sbcs.w	r4, r4, #4294967295	; 0xffffffff
   19798:	f175 35ff 	sbcs.w	r5, r5, #4294967295	; 0xffffffff
   1979c:	f176 0600 	sbcs.w	r6, r6, #0
   197a0:	f177 0700 	sbcs.w	r7, r7, #0
   197a4:	f178 0800 	sbcs.w	r8, r8, #0
   197a8:	f179 0901 	sbcs.w	r9, r9, #1
   197ac:	f17a 3aff 	sbcs.w	sl, sl, #4294967295	; 0xffffffff
   197b0:	f151 0100 	adcs.w	r1, r1, #0
   197b4:	424a      	negs	r2, r1
   197b6:	185b      	adds	r3, r3, r1
   197b8:	414c      	adcs	r4, r1
   197ba:	414d      	adcs	r5, r1
   197bc:	f156 0600 	adcs.w	r6, r6, #0
   197c0:	f157 0700 	adcs.w	r7, r7, #0
   197c4:	f158 0800 	adcs.w	r8, r8, #0
   197c8:	eb59 0902 	adcs.w	r9, r9, r2
   197cc:	eb5a 0a01 	adcs.w	sl, sl, r1
   197d0:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
   197d4:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   197d8:	4770      	bx	lr

000197da <ocrypto_mod_p256_sub>:
   197da:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   197de:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
   197e2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   197e6:	1a5b      	subs	r3, r3, r1
   197e8:	eb74 040c 	sbcs.w	r4, r4, ip
   197ec:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   197f0:	418d      	sbcs	r5, r1
   197f2:	eb76 060c 	sbcs.w	r6, r6, ip
   197f6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   197fa:	418f      	sbcs	r7, r1
   197fc:	eb78 080c 	sbcs.w	r8, r8, ip
   19800:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19804:	eb79 0901 	sbcs.w	r9, r9, r1
   19808:	eb7a 0a0c 	sbcs.w	sl, sl, ip
   1980c:	4189      	sbcs	r1, r1
   1980e:	424a      	negs	r2, r1
   19810:	185b      	adds	r3, r3, r1
   19812:	414c      	adcs	r4, r1
   19814:	414d      	adcs	r5, r1
   19816:	f156 0600 	adcs.w	r6, r6, #0
   1981a:	f157 0700 	adcs.w	r7, r7, #0
   1981e:	f158 0800 	adcs.w	r8, r8, #0
   19822:	eb59 0902 	adcs.w	r9, r9, r2
   19826:	eb5a 0a01 	adcs.w	sl, sl, r1
   1982a:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
   1982e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19832:	4770      	bx	lr

00019834 <ocrypto_mod_p256_square>:
   19834:	460a      	mov	r2, r1

00019836 <ocrypto_mod_p256_mul>:
   19836:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1983a:	ec41 0a14 	vmov	s8, s9, r0, r1
   1983e:	ec92 0a08 	vldmia	r2, {s0-s7}
   19842:	c91e      	ldmia	r1, {r1, r2, r3, r4}
   19844:	ee10 0a10 	vmov	r0, s0
   19848:	fba1 7800 	umull	r7, r8, r1, r0
   1984c:	f04f 0900 	mov.w	r9, #0
   19850:	fbe2 8900 	umlal	r8, r9, r2, r0
   19854:	f04f 0a00 	mov.w	sl, #0
   19858:	fbe3 9a00 	umlal	r9, sl, r3, r0
   1985c:	f04f 0b00 	mov.w	fp, #0
   19860:	fbe4 ab00 	umlal	sl, fp, r4, r0
   19864:	ee12 0a10 	vmov	r0, s4
   19868:	f04f 0c00 	mov.w	ip, #0
   1986c:	fbe1 bc00 	umlal	fp, ip, r1, r0
   19870:	f04f 0e00 	mov.w	lr, #0
   19874:	fbe2 ce00 	umlal	ip, lr, r2, r0
   19878:	f04f 0500 	mov.w	r5, #0
   1987c:	fbe3 e500 	umlal	lr, r5, r3, r0
   19880:	f04f 0600 	mov.w	r6, #0
   19884:	fbe4 5600 	umlal	r5, r6, r4, r0
   19888:	ee05 7a10 	vmov	s10, r7
   1988c:	ee10 0a90 	vmov	r0, s1
   19890:	f04f 0700 	mov.w	r7, #0
   19894:	fbe1 8700 	umlal	r8, r7, r1, r0
   19898:	eb19 0907 	adds.w	r9, r9, r7
   1989c:	f04f 0700 	mov.w	r7, #0
   198a0:	eb47 0707 	adc.w	r7, r7, r7
   198a4:	fbe2 9700 	umlal	r9, r7, r2, r0
   198a8:	eb1a 0a07 	adds.w	sl, sl, r7
   198ac:	f04f 0700 	mov.w	r7, #0
   198b0:	eb47 0707 	adc.w	r7, r7, r7
   198b4:	fbe3 a700 	umlal	sl, r7, r3, r0
   198b8:	eb1b 0b07 	adds.w	fp, fp, r7
   198bc:	f04f 0700 	mov.w	r7, #0
   198c0:	eb47 0707 	adc.w	r7, r7, r7
   198c4:	fbe4 b700 	umlal	fp, r7, r4, r0
   198c8:	ee12 0a90 	vmov	r0, s5
   198cc:	eb1c 0c07 	adds.w	ip, ip, r7
   198d0:	f04f 0700 	mov.w	r7, #0
   198d4:	eb47 0707 	adc.w	r7, r7, r7
   198d8:	fbe1 c700 	umlal	ip, r7, r1, r0
   198dc:	eb1e 0e07 	adds.w	lr, lr, r7
   198e0:	f04f 0700 	mov.w	r7, #0
   198e4:	eb47 0707 	adc.w	r7, r7, r7
   198e8:	fbe2 e700 	umlal	lr, r7, r2, r0
   198ec:	19ed      	adds	r5, r5, r7
   198ee:	f04f 0700 	mov.w	r7, #0
   198f2:	eb47 0707 	adc.w	r7, r7, r7
   198f6:	fbe3 5700 	umlal	r5, r7, r3, r0
   198fa:	19f6      	adds	r6, r6, r7
   198fc:	f04f 0700 	mov.w	r7, #0
   19900:	eb47 0707 	adc.w	r7, r7, r7
   19904:	fbe4 6700 	umlal	r6, r7, r4, r0
   19908:	ee05 8a90 	vmov	s11, r8
   1990c:	ee11 0a10 	vmov	r0, s2
   19910:	f04f 0800 	mov.w	r8, #0
   19914:	fbe1 9800 	umlal	r9, r8, r1, r0
   19918:	eb1a 0a08 	adds.w	sl, sl, r8
   1991c:	f04f 0800 	mov.w	r8, #0
   19920:	eb48 0808 	adc.w	r8, r8, r8
   19924:	fbe2 a800 	umlal	sl, r8, r2, r0
   19928:	eb1b 0b08 	adds.w	fp, fp, r8
   1992c:	f04f 0800 	mov.w	r8, #0
   19930:	eb48 0808 	adc.w	r8, r8, r8
   19934:	fbe3 b800 	umlal	fp, r8, r3, r0
   19938:	eb1c 0c08 	adds.w	ip, ip, r8
   1993c:	f04f 0800 	mov.w	r8, #0
   19940:	eb48 0808 	adc.w	r8, r8, r8
   19944:	fbe4 c800 	umlal	ip, r8, r4, r0
   19948:	ee13 0a10 	vmov	r0, s6
   1994c:	eb1e 0e08 	adds.w	lr, lr, r8
   19950:	f04f 0800 	mov.w	r8, #0
   19954:	eb48 0808 	adc.w	r8, r8, r8
   19958:	fbe1 e800 	umlal	lr, r8, r1, r0
   1995c:	eb15 0508 	adds.w	r5, r5, r8
   19960:	f04f 0800 	mov.w	r8, #0
   19964:	eb48 0808 	adc.w	r8, r8, r8
   19968:	fbe2 5800 	umlal	r5, r8, r2, r0
   1996c:	eb16 0608 	adds.w	r6, r6, r8
   19970:	f04f 0800 	mov.w	r8, #0
   19974:	eb48 0808 	adc.w	r8, r8, r8
   19978:	fbe3 6800 	umlal	r6, r8, r3, r0
   1997c:	eb17 0708 	adds.w	r7, r7, r8
   19980:	f04f 0800 	mov.w	r8, #0
   19984:	eb48 0808 	adc.w	r8, r8, r8
   19988:	fbe4 7800 	umlal	r7, r8, r4, r0
   1998c:	ee06 9a10 	vmov	s12, r9
   19990:	ee11 0a90 	vmov	r0, s3
   19994:	f04f 0900 	mov.w	r9, #0
   19998:	fbe1 a900 	umlal	sl, r9, r1, r0
   1999c:	eb1b 0b09 	adds.w	fp, fp, r9
   199a0:	f04f 0900 	mov.w	r9, #0
   199a4:	eb49 0909 	adc.w	r9, r9, r9
   199a8:	fbe2 b900 	umlal	fp, r9, r2, r0
   199ac:	eb1c 0c09 	adds.w	ip, ip, r9
   199b0:	f04f 0900 	mov.w	r9, #0
   199b4:	eb49 0909 	adc.w	r9, r9, r9
   199b8:	fbe3 c900 	umlal	ip, r9, r3, r0
   199bc:	eb1e 0e09 	adds.w	lr, lr, r9
   199c0:	f04f 0900 	mov.w	r9, #0
   199c4:	eb49 0909 	adc.w	r9, r9, r9
   199c8:	fbe4 e900 	umlal	lr, r9, r4, r0
   199cc:	ee13 0a90 	vmov	r0, s7
   199d0:	eb15 0509 	adds.w	r5, r5, r9
   199d4:	f04f 0900 	mov.w	r9, #0
   199d8:	eb49 0909 	adc.w	r9, r9, r9
   199dc:	fbe1 5900 	umlal	r5, r9, r1, r0
   199e0:	eb16 0609 	adds.w	r6, r6, r9
   199e4:	f04f 0900 	mov.w	r9, #0
   199e8:	eb49 0909 	adc.w	r9, r9, r9
   199ec:	fbe2 6900 	umlal	r6, r9, r2, r0
   199f0:	eb17 0709 	adds.w	r7, r7, r9
   199f4:	f04f 0900 	mov.w	r9, #0
   199f8:	eb49 0909 	adc.w	r9, r9, r9
   199fc:	fbe3 7900 	umlal	r7, r9, r3, r0
   19a00:	eb18 0809 	adds.w	r8, r8, r9
   19a04:	f04f 0900 	mov.w	r9, #0
   19a08:	eb49 0909 	adc.w	r9, r9, r9
   19a0c:	fbe4 8900 	umlal	r8, r9, r4, r0
   19a10:	ee06 aa90 	vmov	s13, sl
   19a14:	ee14 1a90 	vmov	r1, s9
   19a18:	f101 0110 	add.w	r1, r1, #16
   19a1c:	c91e      	ldmia	r1, {r1, r2, r3, r4}
   19a1e:	ee10 0a10 	vmov	r0, s0
   19a22:	f04f 0a00 	mov.w	sl, #0
   19a26:	fbe1 ba00 	umlal	fp, sl, r1, r0
   19a2a:	eb1c 0c0a 	adds.w	ip, ip, sl
   19a2e:	f04f 0a00 	mov.w	sl, #0
   19a32:	eb4a 0a0a 	adc.w	sl, sl, sl
   19a36:	fbe2 ca00 	umlal	ip, sl, r2, r0
   19a3a:	eb1e 0e0a 	adds.w	lr, lr, sl
   19a3e:	f04f 0a00 	mov.w	sl, #0
   19a42:	eb4a 0a0a 	adc.w	sl, sl, sl
   19a46:	fbe3 ea00 	umlal	lr, sl, r3, r0
   19a4a:	eb15 050a 	adds.w	r5, r5, sl
   19a4e:	f04f 0a00 	mov.w	sl, #0
   19a52:	eb4a 0a0a 	adc.w	sl, sl, sl
   19a56:	fbe4 5a00 	umlal	r5, sl, r4, r0
   19a5a:	ee12 0a10 	vmov	r0, s4
   19a5e:	eb16 060a 	adds.w	r6, r6, sl
   19a62:	f04f 0a00 	mov.w	sl, #0
   19a66:	eb4a 0a0a 	adc.w	sl, sl, sl
   19a6a:	fbe1 6a00 	umlal	r6, sl, r1, r0
   19a6e:	eb17 070a 	adds.w	r7, r7, sl
   19a72:	f04f 0a00 	mov.w	sl, #0
   19a76:	eb4a 0a0a 	adc.w	sl, sl, sl
   19a7a:	fbe2 7a00 	umlal	r7, sl, r2, r0
   19a7e:	eb18 080a 	adds.w	r8, r8, sl
   19a82:	f04f 0a00 	mov.w	sl, #0
   19a86:	eb4a 0a0a 	adc.w	sl, sl, sl
   19a8a:	fbe3 8a00 	umlal	r8, sl, r3, r0
   19a8e:	eb19 090a 	adds.w	r9, r9, sl
   19a92:	f04f 0a00 	mov.w	sl, #0
   19a96:	eb4a 0a0a 	adc.w	sl, sl, sl
   19a9a:	fbe4 9a00 	umlal	r9, sl, r4, r0
   19a9e:	ee07 ba10 	vmov	s14, fp
   19aa2:	ee10 0a90 	vmov	r0, s1
   19aa6:	f04f 0b00 	mov.w	fp, #0
   19aaa:	fbe1 cb00 	umlal	ip, fp, r1, r0
   19aae:	eb1e 0e0b 	adds.w	lr, lr, fp
   19ab2:	f04f 0b00 	mov.w	fp, #0
   19ab6:	eb4b 0b0b 	adc.w	fp, fp, fp
   19aba:	fbe2 eb00 	umlal	lr, fp, r2, r0
   19abe:	eb15 050b 	adds.w	r5, r5, fp
   19ac2:	f04f 0b00 	mov.w	fp, #0
   19ac6:	eb4b 0b0b 	adc.w	fp, fp, fp
   19aca:	fbe3 5b00 	umlal	r5, fp, r3, r0
   19ace:	eb16 060b 	adds.w	r6, r6, fp
   19ad2:	f04f 0b00 	mov.w	fp, #0
   19ad6:	eb4b 0b0b 	adc.w	fp, fp, fp
   19ada:	fbe4 6b00 	umlal	r6, fp, r4, r0
   19ade:	ee12 0a90 	vmov	r0, s5
   19ae2:	eb17 070b 	adds.w	r7, r7, fp
   19ae6:	f04f 0b00 	mov.w	fp, #0
   19aea:	eb4b 0b0b 	adc.w	fp, fp, fp
   19aee:	fbe1 7b00 	umlal	r7, fp, r1, r0
   19af2:	eb18 080b 	adds.w	r8, r8, fp
   19af6:	f04f 0b00 	mov.w	fp, #0
   19afa:	eb4b 0b0b 	adc.w	fp, fp, fp
   19afe:	fbe2 8b00 	umlal	r8, fp, r2, r0
   19b02:	eb19 090b 	adds.w	r9, r9, fp
   19b06:	f04f 0b00 	mov.w	fp, #0
   19b0a:	eb4b 0b0b 	adc.w	fp, fp, fp
   19b0e:	fbe3 9b00 	umlal	r9, fp, r3, r0
   19b12:	eb1a 0a0b 	adds.w	sl, sl, fp
   19b16:	f04f 0b00 	mov.w	fp, #0
   19b1a:	eb4b 0b0b 	adc.w	fp, fp, fp
   19b1e:	fbe4 ab00 	umlal	sl, fp, r4, r0
   19b22:	ee07 ca90 	vmov	s15, ip
   19b26:	ee11 0a10 	vmov	r0, s2
   19b2a:	f04f 0c00 	mov.w	ip, #0
   19b2e:	fbe1 ec00 	umlal	lr, ip, r1, r0
   19b32:	eb15 050c 	adds.w	r5, r5, ip
   19b36:	f04f 0c00 	mov.w	ip, #0
   19b3a:	eb4c 0c0c 	adc.w	ip, ip, ip
   19b3e:	fbe2 5c00 	umlal	r5, ip, r2, r0
   19b42:	eb16 060c 	adds.w	r6, r6, ip
   19b46:	f04f 0c00 	mov.w	ip, #0
   19b4a:	eb4c 0c0c 	adc.w	ip, ip, ip
   19b4e:	fbe3 6c00 	umlal	r6, ip, r3, r0
   19b52:	eb17 070c 	adds.w	r7, r7, ip
   19b56:	f04f 0c00 	mov.w	ip, #0
   19b5a:	eb4c 0c0c 	adc.w	ip, ip, ip
   19b5e:	fbe4 7c00 	umlal	r7, ip, r4, r0
   19b62:	ee13 0a10 	vmov	r0, s6
   19b66:	eb18 080c 	adds.w	r8, r8, ip
   19b6a:	f04f 0c00 	mov.w	ip, #0
   19b6e:	eb4c 0c0c 	adc.w	ip, ip, ip
   19b72:	fbe1 8c00 	umlal	r8, ip, r1, r0
   19b76:	eb19 090c 	adds.w	r9, r9, ip
   19b7a:	f04f 0c00 	mov.w	ip, #0
   19b7e:	eb4c 0c0c 	adc.w	ip, ip, ip
   19b82:	fbe2 9c00 	umlal	r9, ip, r2, r0
   19b86:	eb1a 0a0c 	adds.w	sl, sl, ip
   19b8a:	f04f 0c00 	mov.w	ip, #0
   19b8e:	eb4c 0c0c 	adc.w	ip, ip, ip
   19b92:	fbe3 ac00 	umlal	sl, ip, r3, r0
   19b96:	eb1b 0b0c 	adds.w	fp, fp, ip
   19b9a:	f04f 0c00 	mov.w	ip, #0
   19b9e:	eb4c 0c0c 	adc.w	ip, ip, ip
   19ba2:	fbe4 bc00 	umlal	fp, ip, r4, r0
   19ba6:	ee08 ea10 	vmov	s16, lr
   19baa:	ee11 0a90 	vmov	r0, s3
   19bae:	f04f 0e00 	mov.w	lr, #0
   19bb2:	fbe1 5e00 	umlal	r5, lr, r1, r0
   19bb6:	eb16 060e 	adds.w	r6, r6, lr
   19bba:	f04f 0e00 	mov.w	lr, #0
   19bbe:	eb4e 0e0e 	adc.w	lr, lr, lr
   19bc2:	fbe2 6e00 	umlal	r6, lr, r2, r0
   19bc6:	eb17 070e 	adds.w	r7, r7, lr
   19bca:	f04f 0e00 	mov.w	lr, #0
   19bce:	eb4e 0e0e 	adc.w	lr, lr, lr
   19bd2:	fbe3 7e00 	umlal	r7, lr, r3, r0
   19bd6:	eb18 080e 	adds.w	r8, r8, lr
   19bda:	f04f 0e00 	mov.w	lr, #0
   19bde:	eb4e 0e0e 	adc.w	lr, lr, lr
   19be2:	fbe4 8e00 	umlal	r8, lr, r4, r0
   19be6:	ee13 0a90 	vmov	r0, s7
   19bea:	eb19 090e 	adds.w	r9, r9, lr
   19bee:	f04f 0e00 	mov.w	lr, #0
   19bf2:	eb4e 0e0e 	adc.w	lr, lr, lr
   19bf6:	fbe1 9e00 	umlal	r9, lr, r1, r0
   19bfa:	eb1a 0a0e 	adds.w	sl, sl, lr
   19bfe:	f04f 0e00 	mov.w	lr, #0
   19c02:	eb4e 0e0e 	adc.w	lr, lr, lr
   19c06:	fbe2 ae00 	umlal	sl, lr, r2, r0
   19c0a:	eb1b 0b0e 	adds.w	fp, fp, lr
   19c0e:	f04f 0e00 	mov.w	lr, #0
   19c12:	eb4e 0e0e 	adc.w	lr, lr, lr
   19c16:	fbe3 be00 	umlal	fp, lr, r3, r0
   19c1a:	eb1c 0c0e 	adds.w	ip, ip, lr
   19c1e:	f04f 0e00 	mov.w	lr, #0
   19c22:	eb4e 0e0e 	adc.w	lr, lr, lr
   19c26:	fbe4 ce00 	umlal	ip, lr, r4, r0
   19c2a:	ec53 2a17 	vmov	r2, r3, s14, s15
   19c2e:	ee18 4a10 	vmov	r4, s16
   19c32:	eb12 020a 	adds.w	r2, r2, sl
   19c36:	eb53 030b 	adcs.w	r3, r3, fp
   19c3a:	eb54 040c 	adcs.w	r4, r4, ip
   19c3e:	eb55 050e 	adcs.w	r5, r5, lr
   19c42:	2000      	movs	r0, #0
   19c44:	f140 0000 	adc.w	r0, r0, #0
   19c48:	eb12 020b 	adds.w	r2, r2, fp
   19c4c:	eb53 030c 	adcs.w	r3, r3, ip
   19c50:	eb54 040e 	adcs.w	r4, r4, lr
   19c54:	eb55 050e 	adcs.w	r5, r5, lr
   19c58:	4146      	adcs	r6, r0
   19c5a:	2000      	movs	r0, #0
   19c5c:	4147      	adcs	r7, r0
   19c5e:	eb58 0800 	adcs.w	r8, r8, r0
   19c62:	eb59 090a 	adcs.w	r9, r9, sl
   19c66:	f140 0000 	adc.w	r0, r0, #0
   19c6a:	ebb2 020e 	subs.w	r2, r2, lr
   19c6e:	f173 0300 	sbcs.w	r3, r3, #0
   19c72:	f174 0400 	sbcs.w	r4, r4, #0
   19c76:	eb75 050a 	sbcs.w	r5, r5, sl
   19c7a:	eb76 060b 	sbcs.w	r6, r6, fp
   19c7e:	eb77 070c 	sbcs.w	r7, r7, ip
   19c82:	eb78 080a 	sbcs.w	r8, r8, sl
   19c86:	eb79 090c 	sbcs.w	r9, r9, ip
   19c8a:	f160 0000 	sbc.w	r0, r0, #0
   19c8e:	ebb5 050b 	subs.w	r5, r5, fp
   19c92:	eb76 060c 	sbcs.w	r6, r6, ip
   19c96:	eb77 070e 	sbcs.w	r7, r7, lr
   19c9a:	eb78 080b 	sbcs.w	r8, r8, fp
   19c9e:	eb79 090e 	sbcs.w	r9, r9, lr
   19ca2:	f160 0000 	sbc.w	r0, r0, #0
   19ca6:	ea5f 7ce0 	movs.w	ip, r0, asr #31
   19caa:	ea7f 0c0c 	mvns.w	ip, ip
   19cae:	f1dc 0e00 	rsbs	lr, ip, #0
   19cb2:	ebb2 020c 	subs.w	r2, r2, ip
   19cb6:	eb73 030c 	sbcs.w	r3, r3, ip
   19cba:	eb74 040c 	sbcs.w	r4, r4, ip
   19cbe:	f175 0500 	sbcs.w	r5, r5, #0
   19cc2:	f176 0600 	sbcs.w	r6, r6, #0
   19cc6:	f177 0700 	sbcs.w	r7, r7, #0
   19cca:	eb78 080e 	sbcs.w	r8, r8, lr
   19cce:	eb79 090c 	sbcs.w	r9, r9, ip
   19cd2:	f160 0000 	sbc.w	r0, r0, #0
   19cd6:	ea5f 7ce0 	movs.w	ip, r0, asr #31
   19cda:	f1dc 0e00 	rsbs	lr, ip, #0
   19cde:	eb12 020c 	adds.w	r2, r2, ip
   19ce2:	eb53 030c 	adcs.w	r3, r3, ip
   19ce6:	eb54 040c 	adcs.w	r4, r4, ip
   19cea:	f155 0500 	adcs.w	r5, r5, #0
   19cee:	f156 0600 	adcs.w	r6, r6, #0
   19cf2:	f157 0700 	adcs.w	r7, r7, #0
   19cf6:	eb58 080e 	adcs.w	r8, r8, lr
   19cfa:	eb59 090c 	adcs.w	r9, r9, ip
   19cfe:	f140 0000 	adc.w	r0, r0, #0
   19d02:	ea5f 7ce0 	movs.w	ip, r0, asr #31
   19d06:	f1dc 0e00 	rsbs	lr, ip, #0
   19d0a:	eb12 020c 	adds.w	r2, r2, ip
   19d0e:	eb53 030c 	adcs.w	r3, r3, ip
   19d12:	eb54 040c 	adcs.w	r4, r4, ip
   19d16:	f155 0500 	adcs.w	r5, r5, #0
   19d1a:	f156 0600 	adcs.w	r6, r6, #0
   19d1e:	f157 0700 	adcs.w	r7, r7, #0
   19d22:	eb58 080e 	adcs.w	r8, r8, lr
   19d26:	eb59 090c 	adcs.w	r9, r9, ip
   19d2a:	ec5b aa15 	vmov	sl, fp, s10, s11
   19d2e:	ec51 0a16 	vmov	r0, r1, s12, s13
   19d32:	eb1a 0a06 	adds.w	sl, sl, r6
   19d36:	eb5b 0b07 	adcs.w	fp, fp, r7
   19d3a:	eb50 0008 	adcs.w	r0, r0, r8
   19d3e:	eb51 0109 	adcs.w	r1, r1, r9
   19d42:	f05f 0c00 	movs.w	ip, #0
   19d46:	f14c 0c00 	adc.w	ip, ip, #0
   19d4a:	eb1a 0a07 	adds.w	sl, sl, r7
   19d4e:	eb5b 0b08 	adcs.w	fp, fp, r8
   19d52:	eb50 0009 	adcs.w	r0, r0, r9
   19d56:	eb51 0109 	adcs.w	r1, r1, r9
   19d5a:	eb52 020c 	adcs.w	r2, r2, ip
   19d5e:	f05f 0c00 	movs.w	ip, #0
   19d62:	eb53 030c 	adcs.w	r3, r3, ip
   19d66:	eb54 040c 	adcs.w	r4, r4, ip
   19d6a:	4175      	adcs	r5, r6
   19d6c:	f14c 0c00 	adc.w	ip, ip, #0
   19d70:	ebba 0a09 	subs.w	sl, sl, r9
   19d74:	f17b 0b00 	sbcs.w	fp, fp, #0
   19d78:	f170 0000 	sbcs.w	r0, r0, #0
   19d7c:	41b1      	sbcs	r1, r6
   19d7e:	41ba      	sbcs	r2, r7
   19d80:	eb73 0308 	sbcs.w	r3, r3, r8
   19d84:	41b4      	sbcs	r4, r6
   19d86:	eb75 0508 	sbcs.w	r5, r5, r8
   19d8a:	f16c 0c00 	sbc.w	ip, ip, #0
   19d8e:	1bc9      	subs	r1, r1, r7
   19d90:	eb72 0208 	sbcs.w	r2, r2, r8
   19d94:	eb73 0309 	sbcs.w	r3, r3, r9
   19d98:	41bc      	sbcs	r4, r7
   19d9a:	eb75 0509 	sbcs.w	r5, r5, r9
   19d9e:	f16c 0c00 	sbc.w	ip, ip, #0
   19da2:	ea5f 78ec 	movs.w	r8, ip, asr #31
   19da6:	ea7f 0808 	mvns.w	r8, r8
   19daa:	f1d8 0900 	rsbs	r9, r8, #0
   19dae:	ebba 0a08 	subs.w	sl, sl, r8
   19db2:	eb7b 0b08 	sbcs.w	fp, fp, r8
   19db6:	eb70 0008 	sbcs.w	r0, r0, r8
   19dba:	f171 0100 	sbcs.w	r1, r1, #0
   19dbe:	f172 0200 	sbcs.w	r2, r2, #0
   19dc2:	f173 0300 	sbcs.w	r3, r3, #0
   19dc6:	eb74 0409 	sbcs.w	r4, r4, r9
   19dca:	eb75 0508 	sbcs.w	r5, r5, r8
   19dce:	f16c 0c00 	sbc.w	ip, ip, #0
   19dd2:	ea5f 78ec 	movs.w	r8, ip, asr #31
   19dd6:	f1d8 0900 	rsbs	r9, r8, #0
   19dda:	eb1a 0a08 	adds.w	sl, sl, r8
   19dde:	eb5b 0b08 	adcs.w	fp, fp, r8
   19de2:	eb50 0008 	adcs.w	r0, r0, r8
   19de6:	f151 0100 	adcs.w	r1, r1, #0
   19dea:	f152 0200 	adcs.w	r2, r2, #0
   19dee:	f153 0300 	adcs.w	r3, r3, #0
   19df2:	eb54 0409 	adcs.w	r4, r4, r9
   19df6:	eb55 0508 	adcs.w	r5, r5, r8
   19dfa:	f14c 0c00 	adc.w	ip, ip, #0
   19dfe:	ea5f 78ec 	movs.w	r8, ip, asr #31
   19e02:	f1d8 0900 	rsbs	r9, r8, #0
   19e06:	eb1a 0a08 	adds.w	sl, sl, r8
   19e0a:	eb5b 0b08 	adcs.w	fp, fp, r8
   19e0e:	eb50 0008 	adcs.w	r0, r0, r8
   19e12:	f151 0100 	adcs.w	r1, r1, #0
   19e16:	f152 0200 	adcs.w	r2, r2, #0
   19e1a:	f153 0300 	adcs.w	r3, r3, #0
   19e1e:	eb54 0409 	adcs.w	r4, r4, r9
   19e22:	eb55 0508 	adcs.w	r5, r5, r8
   19e26:	ee14 7a10 	vmov	r7, s8
   19e2a:	e8a7 0c00 	stmia.w	r7!, {sl, fp}
   19e2e:	e887 003f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5}
   19e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e36:	bf00      	nop

00019e38 <__aeabi_dcmpun>:
   19e38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   19e3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   19e40:	d102      	bne.n	19e48 <__aeabi_dcmpun+0x10>
   19e42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   19e46:	d10a      	bne.n	19e5e <__aeabi_dcmpun+0x26>
   19e48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   19e4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   19e50:	d102      	bne.n	19e58 <__aeabi_dcmpun+0x20>
   19e52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   19e56:	d102      	bne.n	19e5e <__aeabi_dcmpun+0x26>
   19e58:	f04f 0000 	mov.w	r0, #0
   19e5c:	4770      	bx	lr
   19e5e:	f04f 0001 	mov.w	r0, #1
   19e62:	4770      	bx	lr

00019e64 <__aeabi_d2lz>:
   19e64:	b538      	push	{r3, r4, r5, lr}
   19e66:	2200      	movs	r2, #0
   19e68:	2300      	movs	r3, #0
   19e6a:	4604      	mov	r4, r0
   19e6c:	460d      	mov	r5, r1
   19e6e:	f7fe ff05 	bl	18c7c <__aeabi_dcmplt>
   19e72:	b928      	cbnz	r0, 19e80 <__aeabi_d2lz+0x1c>
   19e74:	4620      	mov	r0, r4
   19e76:	4629      	mov	r1, r5
   19e78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19e7c:	f000 b80a 	b.w	19e94 <__aeabi_d2ulz>
   19e80:	4620      	mov	r0, r4
   19e82:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   19e86:	f000 f805 	bl	19e94 <__aeabi_d2ulz>
   19e8a:	4240      	negs	r0, r0
   19e8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   19e90:	bd38      	pop	{r3, r4, r5, pc}
   19e92:	bf00      	nop

00019e94 <__aeabi_d2ulz>:
   19e94:	b5d0      	push	{r4, r6, r7, lr}
   19e96:	2200      	movs	r2, #0
   19e98:	4b0b      	ldr	r3, [pc, #44]	; (19ec8 <__aeabi_d2ulz+0x34>)
   19e9a:	4606      	mov	r6, r0
   19e9c:	460f      	mov	r7, r1
   19e9e:	f7fe fc7b 	bl	18798 <__aeabi_dmul>
   19ea2:	f7fe ff3b 	bl	18d1c <__aeabi_d2uiz>
   19ea6:	4604      	mov	r4, r0
   19ea8:	f7fe fbfc 	bl	186a4 <__aeabi_ui2d>
   19eac:	2200      	movs	r2, #0
   19eae:	4b07      	ldr	r3, [pc, #28]	; (19ecc <__aeabi_d2ulz+0x38>)
   19eb0:	f7fe fc72 	bl	18798 <__aeabi_dmul>
   19eb4:	4602      	mov	r2, r0
   19eb6:	460b      	mov	r3, r1
   19eb8:	4630      	mov	r0, r6
   19eba:	4639      	mov	r1, r7
   19ebc:	f7fe fab4 	bl	18428 <__aeabi_dsub>
   19ec0:	f7fe ff2c 	bl	18d1c <__aeabi_d2uiz>
   19ec4:	4621      	mov	r1, r4
   19ec6:	bdd0      	pop	{r4, r6, r7, pc}
   19ec8:	3df00000 	.word	0x3df00000
   19ecc:	41f00000 	.word	0x41f00000

00019ed0 <strcmp>:
   19ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
   19ed4:	f811 3b01 	ldrb.w	r3, [r1], #1
   19ed8:	2a01      	cmp	r2, #1
   19eda:	bf28      	it	cs
   19edc:	429a      	cmpcs	r2, r3
   19ede:	d0f7      	beq.n	19ed0 <strcmp>
   19ee0:	1ad0      	subs	r0, r2, r3
   19ee2:	4770      	bx	lr

00019ee4 <strlen>:
   19ee4:	4603      	mov	r3, r0
   19ee6:	f813 2b01 	ldrb.w	r2, [r3], #1
   19eea:	2a00      	cmp	r2, #0
   19eec:	d1fb      	bne.n	19ee6 <strlen+0x2>
   19eee:	1a18      	subs	r0, r3, r0
   19ef0:	3801      	subs	r0, #1
   19ef2:	4770      	bx	lr
   19ef4:	0000      	movs	r0, r0
	...

00019ef8 <sensor_trigger_handler.isra.0>:

	return 0;
}

/**@brief Callback for sensor trigger events */
static void sensor_trigger_handler(struct device *dev,
   19ef8:	b570      	push	{r4, r5, r6, lr}
		err = sensor_sample_fetch_chan(accel_dev,
   19efa:	4c43      	ldr	r4, [pc, #268]	; (1a008 <sensor_trigger_handler.isra.0+0x110>)
static void sensor_trigger_handler(struct device *dev,
   19efc:	b092      	sub	sp, #72	; 0x48
		err = sensor_sample_fetch_chan(accel_dev,
   19efe:	6820      	ldr	r0, [r4, #0]
static inline int z_impl_sensor_sample_fetch_chan(struct device *dev,
						 enum sensor_channel type)
{
	const struct sensor_driver_api *api = dev->driver_api;

	return api->sample_fetch(dev, type);
   19f00:	6843      	ldr	r3, [r0, #4]
   19f02:	2103      	movs	r1, #3
   19f04:	689b      	ldr	r3, [r3, #8]
   19f06:	4798      	blx	r3
	if (err) {
   19f08:	4601      	mov	r1, r0
   19f0a:	b120      	cbz	r0, 19f16 <sensor_trigger_handler.isra.0+0x1e>
		printk("sensor_sample_fetch failed\n");
   19f0c:	483f      	ldr	r0, [pc, #252]	; (1a00c <sensor_trigger_handler.isra.0+0x114>)
		printk("sensor_channel_get failed\n");
   19f0e:	f025 fa9a 	bl	3f446 <printk>
		if (get_orientation(&motion_data.orientation,
					&motion_data.acceleration) == 0) {
			handler(motion_data);
		}
	}
}
   19f12:	b012      	add	sp, #72	; 0x48
   19f14:	bd70      	pop	{r4, r5, r6, pc}
	err = sensor_channel_get(accel_dev,
   19f16:	aa04      	add	r2, sp, #16
   19f18:	6820      	ldr	r0, [r4, #0]
   19f1a:	f024 fe5f 	bl	3ebdc <sensor_channel_get>
	if (err) {
   19f1e:	b108      	cbz	r0, 19f24 <sensor_trigger_handler.isra.0+0x2c>
		printk("sensor_channel_get failed\n");
   19f20:	483b      	ldr	r0, [pc, #236]	; (1a010 <sensor_trigger_handler.isra.0+0x118>)
   19f22:	e7f4      	b.n	19f0e <sensor_trigger_handler.isra.0+0x16>
	err = sensor_channel_get(accel_dev,
   19f24:	aa06      	add	r2, sp, #24
   19f26:	2101      	movs	r1, #1
   19f28:	6820      	ldr	r0, [r4, #0]
   19f2a:	f024 fe57 	bl	3ebdc <sensor_channel_get>
	if (err) {
   19f2e:	2800      	cmp	r0, #0
   19f30:	d1f6      	bne.n	19f20 <sensor_trigger_handler.isra.0+0x28>
	err = sensor_channel_get(accel_dev,
   19f32:	aa08      	add	r2, sp, #32
   19f34:	2102      	movs	r1, #2
   19f36:	6820      	ldr	r0, [r4, #0]
   19f38:	f024 fe50 	bl	3ebdc <sensor_channel_get>
	if (err) {
   19f3c:	2800      	cmp	r0, #0
   19f3e:	d1ef      	bne.n	19f20 <sensor_trigger_handler.isra.0+0x28>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
   19f40:	9805      	ldr	r0, [sp, #20]
   19f42:	f7fe fbbf 	bl	186c4 <__aeabi_i2d>
   19f46:	a32e      	add	r3, pc, #184	; (adr r3, 1a000 <sensor_trigger_handler.isra.0+0x108>)
   19f48:	e9d3 2300 	ldrd	r2, r3, [r3]
   19f4c:	f7fe fd4e 	bl	189ec <__aeabi_ddiv>
   19f50:	4604      	mov	r4, r0
   19f52:	9804      	ldr	r0, [sp, #16]
   19f54:	460d      	mov	r5, r1
   19f56:	f7fe fbb5 	bl	186c4 <__aeabi_i2d>
   19f5a:	4602      	mov	r2, r0
   19f5c:	460b      	mov	r3, r1
   19f5e:	4620      	mov	r0, r4
   19f60:	4629      	mov	r1, r5
   19f62:	f7fe fa63 	bl	1842c <__adddf3>
	sensor_data->x = sensor_value_to_double(&accel_data[0]);
   19f66:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   19f6a:	9807      	ldr	r0, [sp, #28]
   19f6c:	f7fe fbaa 	bl	186c4 <__aeabi_i2d>
   19f70:	a323      	add	r3, pc, #140	; (adr r3, 1a000 <sensor_trigger_handler.isra.0+0x108>)
   19f72:	e9d3 2300 	ldrd	r2, r3, [r3]
   19f76:	f7fe fd39 	bl	189ec <__aeabi_ddiv>
   19f7a:	4604      	mov	r4, r0
   19f7c:	9806      	ldr	r0, [sp, #24]
   19f7e:	460d      	mov	r5, r1
   19f80:	f7fe fba0 	bl	186c4 <__aeabi_i2d>
   19f84:	4602      	mov	r2, r0
   19f86:	460b      	mov	r3, r1
   19f88:	4620      	mov	r0, r4
   19f8a:	4629      	mov	r1, r5
   19f8c:	f7fe fa4e 	bl	1842c <__adddf3>
	sensor_data->y = sensor_value_to_double(&accel_data[1]);
   19f90:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   19f94:	9809      	ldr	r0, [sp, #36]	; 0x24
   19f96:	f7fe fb95 	bl	186c4 <__aeabi_i2d>
   19f9a:	a319      	add	r3, pc, #100	; (adr r3, 1a000 <sensor_trigger_handler.isra.0+0x108>)
   19f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   19fa0:	f7fe fd24 	bl	189ec <__aeabi_ddiv>
   19fa4:	4604      	mov	r4, r0
   19fa6:	9808      	ldr	r0, [sp, #32]
   19fa8:	460d      	mov	r5, r1
   19faa:	f7fe fb8b 	bl	186c4 <__aeabi_i2d>
   19fae:	4602      	mov	r2, r0
   19fb0:	460b      	mov	r3, r1
   19fb2:	4620      	mov	r0, r4
   19fb4:	4629      	mov	r1, r5
   19fb6:	f7fe fa39 	bl	1842c <__adddf3>
	if (acceleration_data->z >= FLIP_ACCELERATION_THRESHOLD) {
   19fba:	2200      	movs	r2, #0
   19fbc:	4b15      	ldr	r3, [pc, #84]	; (1a014 <sensor_trigger_handler.isra.0+0x11c>)
   19fbe:	4604      	mov	r4, r0
   19fc0:	460d      	mov	r5, r1
   19fc2:	f7fe fe6f 	bl	18ca4 <__aeabi_dcmpge>
   19fc6:	b178      	cbz	r0, 19fe8 <sensor_trigger_handler.isra.0+0xf0>
		*orientation = IS_ENABLED(CONFIG_ACCEL_INVERTED) ?
   19fc8:	2301      	movs	r3, #1
		*orientation = MOTION_ORIENTATION_ON_SIDE;
   19fca:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			handler(motion_data);
   19fce:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   19fd2:	4b11      	ldr	r3, [pc, #68]	; (1a018 <sensor_trigger_handler.isra.0+0x120>)
   19fd4:	681e      	ldr	r6, [r3, #0]
   19fd6:	ab12      	add	r3, sp, #72	; 0x48
   19fd8:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   19fdc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   19fe0:	ab0a      	add	r3, sp, #40	; 0x28
   19fe2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   19fe4:	47b0      	blx	r6
   19fe6:	e794      	b.n	19f12 <sensor_trigger_handler.isra.0+0x1a>
	} else if (acceleration_data->z <= -FLIP_ACCELERATION_THRESHOLD) {
   19fe8:	2200      	movs	r2, #0
   19fea:	4b0c      	ldr	r3, [pc, #48]	; (1a01c <sensor_trigger_handler.isra.0+0x124>)
   19fec:	4620      	mov	r0, r4
   19fee:	4629      	mov	r1, r5
   19ff0:	f7fe fe4e 	bl	18c90 <__aeabi_dcmple>
   19ff4:	b108      	cbz	r0, 19ffa <sensor_trigger_handler.isra.0+0x102>
		*orientation = IS_ENABLED(CONFIG_ACCEL_INVERTED) ?
   19ff6:	2302      	movs	r3, #2
   19ff8:	e7e7      	b.n	19fca <sensor_trigger_handler.isra.0+0xd2>
		*orientation = MOTION_ORIENTATION_ON_SIDE;
   19ffa:	2303      	movs	r3, #3
   19ffc:	e7e5      	b.n	19fca <sensor_trigger_handler.isra.0+0xd2>
   19ffe:	bf00      	nop
   1a000:	00000000 	.word	0x00000000
   1a004:	412e8480 	.word	0x412e8480
   1a008:	20023890 	.word	0x20023890
   1a00c:	00045742 	.word	0x00045742
   1a010:	0004575e 	.word	0x0004575e
   1a014:	40140000 	.word	0x40140000
   1a018:	20023894 	.word	0x20023894
   1a01c:	c0140000 	.word	0xc0140000

0001a020 <cloud_decode_command>:

	return 0;
}

int cloud_decode_command(char const *input)
{
   1a020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a024:	ed2d 8b02 	vpush	{d8}
   1a028:	b087      	sub	sp, #28
	cJSON *root_obj = NULL;

	if (input == NULL) {
   1a02a:	2800      	cmp	r0, #0
   1a02c:	f000 81b9 	beq.w	1a3a2 <cloud_decode_command+0x382>
		return -EINVAL;
	}

	root_obj = cJSON_Parse(input);
   1a030:	f026 fbb6 	bl	407a0 <cJSON_Parse>
	if (root_obj == NULL) {
   1a034:	4683      	mov	fp, r0
   1a036:	b9a0      	cbnz	r0, 1a062 <cloud_decode_command+0x42>
		LOG_ERR("Unable to parse input");
   1a038:	2301      	movs	r3, #1
   1a03a:	f04f 0000 	mov.w	r0, #0
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   1a03e:	4ab2      	ldr	r2, [pc, #712]	; (1a308 <cloud_decode_command+0x2e8>)
   1a040:	f363 0007 	bfi	r0, r3, #0, #8
   1a044:	4bb1      	ldr	r3, [pc, #708]	; (1a30c <cloud_decode_command+0x2ec>)
   1a046:	49b2      	ldr	r1, [pc, #712]	; (1a310 <cloud_decode_command+0x2f0>)
   1a048:	1a9b      	subs	r3, r3, r2
   1a04a:	08db      	lsrs	r3, r3, #3
   1a04c:	f363 108f 	bfi	r0, r3, #6, #10
   1a050:	f025 fa17 	bl	3f482 <log_string_sync>
		return -ENOENT;
   1a054:	f06f 0001 	mvn.w	r0, #1
	cloud_search_cmd(root_obj);

	cJSON_Delete(root_obj);

	return 0;
}
   1a058:	b007      	add	sp, #28
   1a05a:	ecbd 8b02 	vpop	{d8}
   1a05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a062:	4dac      	ldr	r5, [pc, #688]	; (1a314 <cloud_decode_command+0x2f4>)
	for (int i = 0; i < ARRAY_SIZE(cmd_groups); ++i) {
   1a064:	2400      	movs	r4, #0
   1a066:	462e      	mov	r6, r5
		group_obj = json_object_decode(root_obj, cmd_groups[i]->key);
   1a068:	f855 3b04 	ldr.w	r3, [r5], #4
   1a06c:	4658      	mov	r0, fp
   1a06e:	6819      	ldr	r1, [r3, #0]
   1a070:	f024 fdcb 	bl	3ec0a <json_object_decode>
		if ((group_obj != NULL) &&
   1a074:	b180      	cbz	r0, 1a098 <cloud_decode_command+0x78>
					cmd_group_str[cmd_groups[i]->group]))) {
   1a076:	f855 3c04 	ldr.w	r3, [r5, #-4]
			(json_value_string_compare(group_obj,
   1a07a:	4aa7      	ldr	r2, [pc, #668]	; (1a318 <cloud_decode_command+0x2f8>)
					cmd_group_str[cmd_groups[i]->group]))) {
   1a07c:	791b      	ldrb	r3, [r3, #4]
			(json_value_string_compare(group_obj,
   1a07e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   1a082:	f024 fdb3 	bl	3ebec <json_value_string_compare>
		if ((group_obj != NULL) &&
   1a086:	b138      	cbz	r0, 1a098 <cloud_decode_command+0x78>
			group = cmd_groups[i];
   1a088:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
	if (group == NULL) {
   1a08c:	b945      	cbnz	r5, 1a0a0 <cloud_decode_command+0x80>
	cJSON_Delete(root_obj);
   1a08e:	4658      	mov	r0, fp
   1a090:	f008 ff12 	bl	22eb8 <cJSON_Delete>
	return 0;
   1a094:	2000      	movs	r0, #0
   1a096:	e7df      	b.n	1a058 <cloud_decode_command+0x38>
	for (int i = 0; i < ARRAY_SIZE(cmd_groups); ++i) {
   1a098:	3401      	adds	r4, #1
   1a09a:	2c04      	cmp	r4, #4
   1a09c:	d1e4      	bne.n	1a068 <cloud_decode_command+0x48>
   1a09e:	e7f6      	b.n	1a08e <cloud_decode_command+0x6e>
	for (size_t j = 0; j < group->num_children; ++j) {
   1a0a0:	2600      	movs	r6, #0
	cmd_parsed.group = group->group;
   1a0a2:	4c9e      	ldr	r4, [pc, #632]	; (1a31c <cloud_decode_command+0x2fc>)
   1a0a4:	792b      	ldrb	r3, [r5, #4]
		    (json_value_string_compare(
   1a0a6:	f8df 827c 	ldr.w	r8, [pc, #636]	; 1a324 <cloud_decode_command+0x304>
	cmd_parsed.group = group->group;
   1a0aa:	7023      	strb	r3, [r4, #0]
	for (size_t j = 0; j < group->num_children; ++j) {
   1a0ac:	68eb      	ldr	r3, [r5, #12]
   1a0ae:	429e      	cmp	r6, r3
   1a0b0:	d2ed      	bcs.n	1a08e <cloud_decode_command+0x6e>
			json_object_decode(root_obj, group->children[j].key);
   1a0b2:	68ab      	ldr	r3, [r5, #8]
   1a0b4:	ea4f 1906 	mov.w	r9, r6, lsl #4
   1a0b8:	f853 1009 	ldr.w	r1, [r3, r9]
   1a0bc:	4658      	mov	r0, fp
   1a0be:	f024 fda4 	bl	3ec0a <json_object_decode>
		if ((channel_obj != NULL) &&
   1a0c2:	2800      	cmp	r0, #0
   1a0c4:	d042      	beq.n	1a14c <cloud_decode_command+0x12c>
			    channel_type_str[group->children[j].channel]))) {
   1a0c6:	68ab      	ldr	r3, [r5, #8]
   1a0c8:	444b      	add	r3, r9
   1a0ca:	791b      	ldrb	r3, [r3, #4]
		    (json_value_string_compare(
   1a0cc:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
   1a0d0:	f024 fd8c 	bl	3ebec <json_value_string_compare>
		if ((channel_obj != NULL) &&
   1a0d4:	2800      	cmp	r0, #0
   1a0d6:	d039      	beq.n	1a14c <cloud_decode_command+0x12c>
			chan = &group->children[j];
   1a0d8:	68ab      	ldr	r3, [r5, #8]
	if (chan == NULL) {
   1a0da:	eb13 0909 	adds.w	r9, r3, r9
   1a0de:	d0d6      	beq.n	1a08e <cloud_decode_command+0x6e>
	cmd_parsed.channel = chan->channel;
   1a0e0:	f899 3004 	ldrb.w	r3, [r9, #4]
		LOG_DBG("Found cmd %s, %s, %s",
   1a0e4:	4a88      	ldr	r2, [pc, #544]	; (1a308 <cloud_decode_command+0x2e8>)
	cmd_parsed.channel = chan->channel;
   1a0e6:	7063      	strb	r3, [r4, #1]
   1a0e8:	4b88      	ldr	r3, [pc, #544]	; (1a30c <cloud_decode_command+0x2ec>)
		} else if (parsed_cmd->data.sv.value <
   1a0ea:	ed9f 8b85 	vldr	d8, [pc, #532]	; 1a300 <cloud_decode_command+0x2e0>
		LOG_DBG("Found cmd %s, %s, %s",
   1a0ee:	1a9b      	subs	r3, r3, r2
   1a0f0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   1a0f4:	9303      	str	r3, [sp, #12]
	for (size_t k = 0; k < chan->num_children; ++k) {
   1a0f6:	2300      	movs	r3, #0
   1a0f8:	9302      	str	r3, [sp, #8]
   1a0fa:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1a0fe:	9a02      	ldr	r2, [sp, #8]
   1a100:	429a      	cmp	r2, r3
   1a102:	d2c4      	bcs.n	1a08e <cloud_decode_command+0x6e>
		type = &chan->children[k];
   1a104:	9b02      	ldr	r3, [sp, #8]
   1a106:	f8d9 2008 	ldr.w	r2, [r9, #8]
   1a10a:	011b      	lsls	r3, r3, #4
		type_obj = json_object_decode(root_obj, type->key);
   1a10c:	58d1      	ldr	r1, [r2, r3]
   1a10e:	4658      	mov	r0, fp
		type = &chan->children[k];
   1a110:	18d6      	adds	r6, r2, r3
		type_obj = json_object_decode(root_obj, type->key);
   1a112:	f024 fd7a 	bl	3ec0a <json_object_decode>
	if (type_obj != NULL) {
   1a116:	7933      	ldrb	r3, [r6, #4]
   1a118:	9004      	str	r0, [sp, #16]
   1a11a:	2800      	cmp	r0, #0
   1a11c:	f000 80de 	beq.w	1a2dc <cloud_decode_command+0x2bc>
		if (type_cmd->type != CLOUD_CMD_DATA_STRING) {
   1a120:	2b07      	cmp	r3, #7
   1a122:	f000 80d5 	beq.w	1a2d0 <cloud_decode_command+0x2b0>
			decoded_obj = json_object_decode(type_obj,
   1a126:	4a7e      	ldr	r2, [pc, #504]	; (1a320 <cloud_decode_command+0x300>)
   1a128:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   1a12c:	f024 fd6d 	bl	3ec0a <json_object_decode>
			if (!decoded_obj) {
   1a130:	4680      	mov	r8, r0
   1a132:	2800      	cmp	r0, #0
   1a134:	d067      	beq.n	1a206 <cloud_decode_command+0x1e6>
		switch (type_cmd->type) {
   1a136:	7933      	ldrb	r3, [r6, #4]
   1a138:	3b01      	subs	r3, #1
   1a13a:	2b06      	cmp	r3, #6
   1a13c:	f200 8134 	bhi.w	1a3a8 <cloud_decode_command+0x388>
   1a140:	e8df f003 	tbb	[pc, r3]
   1a144:	8c8c8c06 	.word	0x8c8c8c06
   1a148:	ad9e      	.short	0xad9e
   1a14a:	c6          	.byte	0xc6
   1a14b:	00          	.byte	0x00
	for (size_t j = 0; j < group->num_children; ++j) {
   1a14c:	3601      	adds	r6, #1
   1a14e:	e7ad      	b.n	1a0ac <cloud_decode_command+0x8c>
			if (cJSON_IsNull(decoded_obj)) {
   1a150:	f026 fb4a 	bl	407e8 <cJSON_IsNull>
   1a154:	2800      	cmp	r0, #0
   1a156:	d05a      	beq.n	1a20e <cloud_decode_command+0x1ee>
				parsed_cmd->data.sv.state =
   1a158:	2200      	movs	r2, #0
   1a15a:	4b70      	ldr	r3, [pc, #448]	; (1a31c <cloud_decode_command+0x2fc>)
   1a15c:	741a      	strb	r2, [r3, #16]
	if ((type_cmd->type == CLOUD_CMD_INTERVAL) &&
   1a15e:	f896 8004 	ldrb.w	r8, [r6, #4]
   1a162:	f1b8 0f04 	cmp.w	r8, #4
   1a166:	d113      	bne.n	1a190 <cloud_decode_command+0x170>
	    (parsed_cmd->data.sv.state == CLOUD_CMD_STATE_UNDEFINED)) {
   1a168:	4e6c      	ldr	r6, [pc, #432]	; (1a31c <cloud_decode_command+0x2fc>)
	if ((type_cmd->type == CLOUD_CMD_INTERVAL) &&
   1a16a:	f996 3010 	ldrsb.w	r3, [r6, #16]
   1a16e:	3301      	adds	r3, #1
   1a170:	d10e      	bne.n	1a190 <cloud_decode_command+0x170>
		if (parsed_cmd->data.sv.value == DISABLE_SEND_INTERVAL_VAL) {
   1a172:	ed96 7b02 	vldr	d7, [r6, #8]
   1a176:	2200      	movs	r2, #0
   1a178:	2300      	movs	r3, #0
   1a17a:	ec51 0b17 	vmov	r0, r1, d7
   1a17e:	ed8d 7b04 	vstr	d7, [sp, #16]
   1a182:	f7fe fd71 	bl	18c68 <__aeabi_dcmpeq>
   1a186:	2800      	cmp	r0, #0
   1a188:	f000 80ae 	beq.w	1a2e8 <cloud_decode_command+0x2c8>
			parsed_cmd->data.sv.state = CLOUD_CMD_STATE_FALSE;
   1a18c:	2300      	movs	r3, #0
   1a18e:	7433      	strb	r3, [r6, #16]
		LOG_DBG("Found cmd %s, %s, %s",
   1a190:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   1a194:	4a62      	ldr	r2, [pc, #392]	; (1a320 <cloud_decode_command+0x300>)
   1a196:	f043 0304 	orr.w	r3, r3, #4
   1a19a:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
   1a19e:	f363 0a07 	bfi	sl, r3, #0, #8
   1a1a2:	9b03      	ldr	r3, [sp, #12]
	parsed_cmd->type = type_cmd->type;
   1a1a4:	f884 8002 	strb.w	r8, [r4, #2]
		LOG_DBG("Found cmd %s, %s, %s",
   1a1a8:	f363 1a8f 	bfi	sl, r3, #6, #10
   1a1ac:	7823      	ldrb	r3, [r4, #0]
   1a1ae:	9201      	str	r2, [sp, #4]
   1a1b0:	7861      	ldrb	r1, [r4, #1]
   1a1b2:	4a5c      	ldr	r2, [pc, #368]	; (1a324 <cloud_decode_command+0x304>)
   1a1b4:	4650      	mov	r0, sl
   1a1b6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   1a1ba:	495b      	ldr	r1, [pc, #364]	; (1a328 <cloud_decode_command+0x308>)
   1a1bc:	9200      	str	r2, [sp, #0]
   1a1be:	4a56      	ldr	r2, [pc, #344]	; (1a318 <cloud_decode_command+0x2f8>)
   1a1c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1a1c4:	4a59      	ldr	r2, [pc, #356]	; (1a32c <cloud_decode_command+0x30c>)
   1a1c6:	f025 f95c 	bl	3f482 <log_string_sync>

static int cloud_cmd_handle_sensor_set_chan_cfg(struct cloud_command const *const cmd)
{
	int err = -ENOTSUP;

	if ((cmd == NULL) || (cmd->group != CLOUD_CMD_GROUP_CFG_SET)) {
   1a1ca:	7823      	ldrb	r3, [r4, #0]
   1a1cc:	2b08      	cmp	r3, #8
   1a1ce:	d115      	bne.n	1a1fc <cloud_decode_command+0x1dc>
		return -EINVAL;
	}

	switch (cmd->type) {
   1a1d0:	78a3      	ldrb	r3, [r4, #2]
   1a1d2:	2b02      	cmp	r3, #2
   1a1d4:	f000 80b8 	beq.w	1a348 <cloud_decode_command+0x328>
   1a1d8:	2b03      	cmp	r3, #3
   1a1da:	f000 80cc 	beq.w	1a376 <cloud_decode_command+0x356>
   1a1de:	2b01      	cmp	r3, #1
   1a1e0:	d10c      	bne.n	1a1fc <cloud_decode_command+0x1dc>
	case CLOUD_CMD_ENABLE:
		err = cloud_set_chan_cfg_item(
   1a1e2:	f994 3010 	ldrsb.w	r3, [r4, #16]
   1a1e6:	2200      	movs	r2, #0
   1a1e8:	2b01      	cmp	r3, #1
   1a1ea:	bf18      	it	ne
   1a1ec:	2300      	movne	r3, #0
   1a1ee:	f04f 0100 	mov.w	r1, #0
   1a1f2:	7860      	ldrb	r0, [r4, #1]
   1a1f4:	bf08      	it	eq
   1a1f6:	4b4e      	ldreq	r3, [pc, #312]	; (1a330 <cloud_decode_command+0x310>)
				cmd->channel,
				SENSOR_CHAN_CFG_ITEM_TYPE_THRESH_LOW_ENABLE,
				true);

		} else {
			err = cloud_set_chan_cfg_item(
   1a1f8:	f004 f8c4 	bl	1e384 <cloud_set_chan_cfg_item>
		if (cloud_command_cb) {
   1a1fc:	4b4d      	ldr	r3, [pc, #308]	; (1a334 <cloud_decode_command+0x314>)
   1a1fe:	681b      	ldr	r3, [r3, #0]
   1a200:	b10b      	cbz	r3, 1a206 <cloud_decode_command+0x1e6>
			cloud_command_cb(&cmd_parsed);
   1a202:	4846      	ldr	r0, [pc, #280]	; (1a31c <cloud_decode_command+0x2fc>)
   1a204:	4798      	blx	r3
	for (size_t k = 0; k < chan->num_children; ++k) {
   1a206:	9b02      	ldr	r3, [sp, #8]
   1a208:	3301      	adds	r3, #1
   1a20a:	9302      	str	r3, [sp, #8]
   1a20c:	e775      	b.n	1a0fa <cloud_decode_command+0xda>
			} else if (cJSON_IsBool(decoded_obj)) {
   1a20e:	4640      	mov	r0, r8
   1a210:	f026 fae3 	bl	407da <cJSON_IsBool>
   1a214:	b9c8      	cbnz	r0, 1a24a <cloud_decode_command+0x22a>
				return -ESRCH;
   1a216:	f06f 0302 	mvn.w	r3, #2
				LOG_ERR("Unhandled cmd format for %s, %s, error %d",
   1a21a:	f027 023f 	bic.w	r2, r7, #63	; 0x3f
   1a21e:	f042 0201 	orr.w	r2, r2, #1
   1a222:	f362 0707 	bfi	r7, r2, #0, #8
   1a226:	9a03      	ldr	r2, [sp, #12]
   1a228:	f899 1004 	ldrb.w	r1, [r9, #4]
   1a22c:	f362 178f 	bfi	r7, r2, #6, #10
   1a230:	792a      	ldrb	r2, [r5, #4]
   1a232:	9300      	str	r3, [sp, #0]
   1a234:	4b3b      	ldr	r3, [pc, #236]	; (1a324 <cloud_decode_command+0x304>)
   1a236:	4638      	mov	r0, r7
   1a238:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1a23c:	4936      	ldr	r1, [pc, #216]	; (1a318 <cloud_decode_command+0x2f8>)
   1a23e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   1a242:	493d      	ldr	r1, [pc, #244]	; (1a338 <cloud_decode_command+0x318>)
   1a244:	f025 f91d 	bl	3f482 <log_string_sync>
   1a248:	e7dd      	b.n	1a206 <cloud_decode_command+0x1e6>
					cJSON_IsTrue(decoded_obj) ?
   1a24a:	4640      	mov	r0, r8
   1a24c:	f026 fabf 	bl	407ce <cJSON_IsTrue>
						CLOUD_CMD_STATE_TRUE :
   1a250:	3000      	adds	r0, #0
   1a252:	bf18      	it	ne
   1a254:	2001      	movne	r0, #1
   1a256:	4b31      	ldr	r3, [pc, #196]	; (1a31c <cloud_decode_command+0x2fc>)
   1a258:	7418      	strb	r0, [r3, #16]
   1a25a:	e780      	b.n	1a15e <cloud_decode_command+0x13e>
			if (cJSON_IsNull(decoded_obj)) {
   1a25c:	f026 fac4 	bl	407e8 <cJSON_IsNull>
   1a260:	2800      	cmp	r0, #0
   1a262:	f47f af79 	bne.w	1a158 <cloud_decode_command+0x138>
			} else if (cJSON_IsNumber(decoded_obj)) {
   1a266:	4640      	mov	r0, r8
   1a268:	f026 fac4 	bl	407f4 <cJSON_IsNumber>
   1a26c:	2800      	cmp	r0, #0
   1a26e:	d0d2      	beq.n	1a216 <cloud_decode_command+0x1f6>
				parsed_cmd->data.sv.value =
   1a270:	e9d8 0106 	ldrd	r0, r1, [r8, #24]
				parsed_cmd->data.sv.state =
   1a274:	22ff      	movs	r2, #255	; 0xff
   1a276:	4b29      	ldr	r3, [pc, #164]	; (1a31c <cloud_decode_command+0x2fc>)
   1a278:	741a      	strb	r2, [r3, #16]
			parsed_cmd->data.sv.value = (double)strtol(
   1a27a:	e9c3 0102 	strd	r0, r1, [r3, #8]
			break;
   1a27e:	e76e      	b.n	1a15e <cloud_decode_command+0x13e>
			if (cJSON_GetStringValue(decoded_obj) == NULL){
   1a280:	f026 fac6 	bl	40810 <cJSON_GetStringValue>
   1a284:	2800      	cmp	r0, #0
   1a286:	d0c6      	beq.n	1a216 <cloud_decode_command+0x1f6>
					cJSON_GetStringValue(decoded_obj), NULL, 16);
   1a288:	4640      	mov	r0, r8
   1a28a:	f026 fac1 	bl	40810 <cJSON_GetStringValue>
			parsed_cmd->data.sv.value = (double)strtol(
   1a28e:	2210      	movs	r2, #16
   1a290:	2100      	movs	r1, #0
   1a292:	f023 fa0f 	bl	3d6b4 <strtol>
   1a296:	f7fe fa15 	bl	186c4 <__aeabi_i2d>
   1a29a:	4b20      	ldr	r3, [pc, #128]	; (1a31c <cloud_decode_command+0x2fc>)
   1a29c:	e7ed      	b.n	1a27a <cloud_decode_command+0x25a>
	if (!cJSON_IsObject(data_obj)) {
   1a29e:	f026 fabe 	bl	4081e <cJSON_IsObject>
   1a2a2:	2800      	cmp	r0, #0
   1a2a4:	d0b7      	beq.n	1a216 <cloud_decode_command+0x1f6>
	blob = json_object_decode(data_obj, MODEM_PARAM_BLOB_KEY_STR);
   1a2a6:	4925      	ldr	r1, [pc, #148]	; (1a33c <cloud_decode_command+0x31c>)
   1a2a8:	4640      	mov	r0, r8
   1a2aa:	f024 fcae 	bl	3ec0a <json_object_decode>
	params->blob = cJSON_GetStringValue(blob);
   1a2ae:	f026 faaf 	bl	40810 <cJSON_GetStringValue>
	checksum = json_object_decode(data_obj, MODEM_PARAM_CHECKSUM_KEY_STR);
   1a2b2:	4923      	ldr	r1, [pc, #140]	; (1a340 <cloud_decode_command+0x320>)
	params->blob = cJSON_GetStringValue(blob);
   1a2b4:	60a0      	str	r0, [r4, #8]
	checksum = json_object_decode(data_obj, MODEM_PARAM_CHECKSUM_KEY_STR);
   1a2b6:	4640      	mov	r0, r8
   1a2b8:	f024 fca7 	bl	3ec0a <json_object_decode>
	params->checksum = cJSON_GetStringValue(checksum);
   1a2bc:	f026 faa8 	bl	40810 <cJSON_GetStringValue>
			-ESRCH : 0);
   1a2c0:	68a3      	ldr	r3, [r4, #8]
	params->checksum = cJSON_GetStringValue(checksum);
   1a2c2:	60e0      	str	r0, [r4, #12]
			-ESRCH : 0);
   1a2c4:	2b00      	cmp	r3, #0
   1a2c6:	d0a6      	beq.n	1a216 <cloud_decode_command+0x1f6>
			if (parsed_cmd->data.data_string == NULL) {
   1a2c8:	2800      	cmp	r0, #0
   1a2ca:	f47f af48 	bne.w	1a15e <cloud_decode_command+0x13e>
   1a2ce:	e7a2      	b.n	1a216 <cloud_decode_command+0x1f6>
			parsed_cmd->data.data_string = cJSON_GetStringValue(type_obj);
   1a2d0:	9804      	ldr	r0, [sp, #16]
   1a2d2:	f026 fa9d 	bl	40810 <cJSON_GetStringValue>
   1a2d6:	4b11      	ldr	r3, [pc, #68]	; (1a31c <cloud_decode_command+0x2fc>)
   1a2d8:	6098      	str	r0, [r3, #8]
   1a2da:	e7f5      	b.n	1a2c8 <cloud_decode_command+0x2a8>
	} else if (type_cmd->type != CLOUD_CMD_EMPTY) {
   1a2dc:	2b00      	cmp	r3, #0
   1a2de:	f43f af3e 	beq.w	1a15e <cloud_decode_command+0x13e>
		return -EINVAL;
   1a2e2:	f06f 0315 	mvn.w	r3, #21
   1a2e6:	e798      	b.n	1a21a <cloud_decode_command+0x1fa>
		} else if (parsed_cmd->data.sv.value <
   1a2e8:	2200      	movs	r2, #0
   1a2ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1a2ee:	4b15      	ldr	r3, [pc, #84]	; (1a344 <cloud_decode_command+0x324>)
   1a2f0:	f7fe fcc4 	bl	18c7c <__aeabi_dcmplt>
   1a2f4:	2800      	cmp	r0, #0
   1a2f6:	f43f af4b 	beq.w	1a190 <cloud_decode_command+0x170>
			parsed_cmd->data.sv.value = MIN_INTERVAL_VAL_SECONDS;
   1a2fa:	ed86 8b02 	vstr	d8, [r6, #8]
   1a2fe:	e747      	b.n	1a190 <cloud_decode_command+0x170>
   1a300:	00000000 	.word	0x00000000
   1a304:	40140000 	.word	0x40140000
   1a308:	00042fb4 	.word	0x00042fb4
   1a30c:	00042fec 	.word	0x00042fec
   1a310:	0004580a 	.word	0x0004580a
   1a314:	20031ba8 	.word	0x20031ba8
   1a318:	000432ac 	.word	0x000432ac
   1a31c:	20020938 	.word	0x20020938
   1a320:	000432d8 	.word	0x000432d8
   1a324:	00043258 	.word	0x00043258
   1a328:	0004582e 	.word	0x0004582e
   1a32c:	000457f9 	.word	0x000457f9
   1a330:	3ff00000 	.word	0x3ff00000
   1a334:	200238bc 	.word	0x200238bc
   1a338:	00045847 	.word	0x00045847
   1a33c:	00045820 	.word	0x00045820
   1a340:	00045825 	.word	0x00045825
   1a344:	40140000 	.word	0x40140000
		if (cmd->data.sv.state == CLOUD_CMD_STATE_UNDEFINED) {
   1a348:	f994 3010 	ldrsb.w	r3, [r4, #16]
   1a34c:	7860      	ldrb	r0, [r4, #1]
   1a34e:	1c59      	adds	r1, r3, #1
   1a350:	d109      	bne.n	1a366 <cloud_decode_command+0x346>
			err = cloud_set_chan_cfg_item(
   1a352:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   1a356:	2103      	movs	r1, #3
   1a358:	f004 f814 	bl	1e384 <cloud_set_chan_cfg_item>
			cloud_set_chan_cfg_item(
   1a35c:	2200      	movs	r2, #0
   1a35e:	2104      	movs	r1, #4
   1a360:	4b13      	ldr	r3, [pc, #76]	; (1a3b0 <cloud_decode_command+0x390>)
			cloud_set_chan_cfg_item(
   1a362:	7860      	ldrb	r0, [r4, #1]
   1a364:	e748      	b.n	1a1f8 <cloud_decode_command+0x1d8>
			err = cloud_set_chan_cfg_item(
   1a366:	2b01      	cmp	r3, #1
   1a368:	f04f 0200 	mov.w	r2, #0
   1a36c:	bf14      	ite	ne
   1a36e:	2300      	movne	r3, #0
   1a370:	4b0f      	ldreq	r3, [pc, #60]	; (1a3b0 <cloud_decode_command+0x390>)
   1a372:	2104      	movs	r1, #4
   1a374:	e740      	b.n	1a1f8 <cloud_decode_command+0x1d8>
		if (cmd->data.sv.state == CLOUD_CMD_STATE_UNDEFINED) {
   1a376:	f994 3010 	ldrsb.w	r3, [r4, #16]
   1a37a:	7860      	ldrb	r0, [r4, #1]
   1a37c:	1c5a      	adds	r2, r3, #1
   1a37e:	d108      	bne.n	1a392 <cloud_decode_command+0x372>
			err = cloud_set_chan_cfg_item(
   1a380:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   1a384:	2101      	movs	r1, #1
   1a386:	f003 fffd 	bl	1e384 <cloud_set_chan_cfg_item>
			cloud_set_chan_cfg_item(
   1a38a:	2200      	movs	r2, #0
   1a38c:	4b08      	ldr	r3, [pc, #32]	; (1a3b0 <cloud_decode_command+0x390>)
   1a38e:	2102      	movs	r1, #2
   1a390:	e7e7      	b.n	1a362 <cloud_decode_command+0x342>
			err = cloud_set_chan_cfg_item(
   1a392:	2b01      	cmp	r3, #1
   1a394:	f04f 0200 	mov.w	r2, #0
   1a398:	bf14      	ite	ne
   1a39a:	2300      	movne	r3, #0
   1a39c:	4b04      	ldreq	r3, [pc, #16]	; (1a3b0 <cloud_decode_command+0x390>)
   1a39e:	2102      	movs	r1, #2
   1a3a0:	e72a      	b.n	1a1f8 <cloud_decode_command+0x1d8>
		return -EINVAL;
   1a3a2:	f06f 0015 	mvn.w	r0, #21
   1a3a6:	e657      	b.n	1a058 <cloud_decode_command+0x38>
			return -ENOTSUP;
   1a3a8:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1a3ac:	e735      	b.n	1a21a <cloud_decode_command+0x1fa>
   1a3ae:	bf00      	nop
   1a3b0:	3ff00000 	.word	0x3ff00000
   1a3b4:	00000000 	.word	0x00000000

0001a3b8 <env_sensors_poll_fn>:
{
	return (initialized ? submit_poll_work(K_NO_WAIT) : -ENXIO);
}

static void env_sensors_poll_fn(struct k_work *work)
{
   1a3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3bc:	b08b      	sub	sp, #44	; 0x2c
	int num_sensors = ARRAY_SIZE(env_sensors);
	struct sensor_value data[num_sensors];

	int err;

	if (data_send_interval_s == 0)
   1a3be:	4b50      	ldr	r3, [pc, #320]	; (1a500 <env_sensors_poll_fn+0x148>)
{
   1a3c0:	af00      	add	r7, sp, #0
	if (data_send_interval_s == 0)
   1a3c2:	681a      	ldr	r2, [r3, #0]
{
   1a3c4:	f8c7 d008 	str.w	sp, [r7, #8]
	if (data_send_interval_s == 0)
   1a3c8:	603b      	str	r3, [r7, #0]
   1a3ca:	2a00      	cmp	r2, #0
   1a3cc:	d03f      	beq.n	1a44e <env_sensors_poll_fn+0x96>
		if (err) {
			printk("Failed to fetch data from %s, error: %d\n",
				env_sensors[0]->dev_name, err);
		}
	}
	for (int i = 0; i < num_sensors; i++) {
   1a3ce:	2300      	movs	r3, #0
   1a3d0:	4c4c      	ldr	r4, [pc, #304]	; (1a504 <env_sensors_poll_fn+0x14c>)
		if (!(IS_ENABLED(CONFIG_BME680))) {
			err = sensor_sample_fetch_chan(env_sensors[i]->dev,
				env_sensors[i]->channel);
			if (err) {
				printk("Failed to fetch data from %s, error: %d\n",
   1a3d2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 1a530 <env_sensors_poll_fn+0x178>
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1a3d6:	4e4c      	ldr	r6, [pc, #304]	; (1a508 <env_sensors_poll_fn+0x150>)
   1a3d8:	f107 0510 	add.w	r5, r7, #16
	for (int i = 0; i < num_sensors; i++) {
   1a3dc:	60fb      	str	r3, [r7, #12]
			err = sensor_sample_fetch_chan(env_sensors[i]->dev,
   1a3de:	f854 3b04 	ldr.w	r3, [r4], #4
   1a3e2:	6998      	ldr	r0, [r3, #24]
   1a3e4:	8a19      	ldrh	r1, [r3, #16]
	return api->sample_fetch(dev, type);
   1a3e6:	6843      	ldr	r3, [r0, #4]
   1a3e8:	689b      	ldr	r3, [r3, #8]
   1a3ea:	4798      	blx	r3
			if (err) {
   1a3ec:	4602      	mov	r2, r0
   1a3ee:	b128      	cbz	r0, 1a3fc <env_sensors_poll_fn+0x44>
				printk("Failed to fetch data from %s, error: %d\n",
   1a3f0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a3f4:	4650      	mov	r0, sl
   1a3f6:	6959      	ldr	r1, [r3, #20]
   1a3f8:	f025 f825 	bl	3f446 <printk>
					env_sensors[i]->dev_name, err);
			}
		}
		err = sensor_channel_get(env_sensors[i]->dev,
   1a3fc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a400:	6998      	ldr	r0, [r3, #24]
   1a402:	8a19      	ldrh	r1, [r3, #16]
	return api->channel_get(dev, chan, val);
   1a404:	6843      	ldr	r3, [r0, #4]
   1a406:	462a      	mov	r2, r5
   1a408:	68db      	ldr	r3, [r3, #12]
   1a40a:	4798      	blx	r3
			env_sensors[i]->channel, &data[i]);
		if (err) {
   1a40c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a410:	4602      	mov	r2, r0
   1a412:	b300      	cbz	r0, 1a456 <env_sensors_poll_fn+0x9e>
			printk("Failed to fetch data from %s, error: %d\n",
   1a414:	6959      	ldr	r1, [r3, #20]
   1a416:	4650      	mov	r0, sl
   1a418:	f025 f815 	bl	3f446 <printk>
	for (int i = 0; i < num_sensors; i++) {
   1a41c:	68fb      	ldr	r3, [r7, #12]
   1a41e:	3508      	adds	r5, #8
   1a420:	3301      	adds	r3, #1
   1a422:	2b03      	cmp	r3, #3
   1a424:	60fb      	str	r3, [r7, #12]
   1a426:	d1da      	bne.n	1a3de <env_sensors_poll_fn+0x26>
			env_sensors[i]->sensor.value = sensor_value_to_double(&data[i]);
			k_spin_unlock(&(env_sensors[i]->lock), key);
		}
	}

	if (data_ready_cb) {
   1a428:	4b38      	ldr	r3, [pc, #224]	; (1a50c <env_sensors_poll_fn+0x154>)
   1a42a:	681b      	ldr	r3, [r3, #0]
   1a42c:	b103      	cbz	r3, 1a430 <env_sensors_poll_fn+0x78>
		data_ready_cb();
   1a42e:	4798      	blx	r3
	}

	submit_poll_work( backoff_enabled ? CONFIG_ENVIRONMENT_DATA_BACKOFF_TIME : data_send_interval_s);
   1a430:	4b37      	ldr	r3, [pc, #220]	; (1a510 <env_sensors_poll_fn+0x158>)
   1a432:	781b      	ldrb	r3, [r3, #0]
   1a434:	2b00      	cmp	r3, #0
   1a436:	d15c      	bne.n	1a4f2 <env_sensors_poll_fn+0x13a>
   1a438:	683b      	ldr	r3, [r7, #0]
   1a43a:	681b      	ldr	r3, [r3, #0]
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1a43c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a440:	4934      	ldr	r1, [pc, #208]	; (1a514 <env_sensors_poll_fn+0x15c>)
   1a442:	435a      	muls	r2, r3
   1a444:	4834      	ldr	r0, [pc, #208]	; (1a518 <env_sensors_poll_fn+0x160>)
   1a446:	f021 f873 	bl	3b530 <k_delayed_work_submit_to_queue>
   1a44a:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
   1a44e:	372c      	adds	r7, #44	; 0x2c
   1a450:	46bd      	mov	sp, r7
   1a452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			k_spinlock_key_t key = k_spin_lock(&(env_sensors[i]->lock));
   1a456:	f103 081c 	add.w	r8, r3, #28
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   1a45a:	f04f 0320 	mov.w	r3, #32
   1a45e:	f3ef 8211 	mrs	r2, BASEPRI
   1a462:	f383 8811 	msr	BASEPRI, r3
   1a466:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1a46a:	4640      	mov	r0, r8
   1a46c:	607a      	str	r2, [r7, #4]
   1a46e:	f020 fe09 	bl	3b084 <z_spin_lock_valid>
   1a472:	b960      	cbnz	r0, 1a48e <env_sensors_poll_fn+0xd6>
   1a474:	4929      	ldr	r1, [pc, #164]	; (1a51c <env_sensors_poll_fn+0x164>)
   1a476:	234f      	movs	r3, #79	; 0x4f
   1a478:	4632      	mov	r2, r6
   1a47a:	4829      	ldr	r0, [pc, #164]	; (1a520 <env_sensors_poll_fn+0x168>)
   1a47c:	f024 ffe3 	bl	3f446 <printk>
   1a480:	4828      	ldr	r0, [pc, #160]	; (1a524 <env_sensors_poll_fn+0x16c>)
   1a482:	f024 ffe0 	bl	3f446 <printk>
   1a486:	214f      	movs	r1, #79	; 0x4f
   1a488:	4630      	mov	r0, r6
   1a48a:	f024 ffe9 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a48e:	4640      	mov	r0, r8
   1a490:	f020 fe16 	bl	3b0c0 <z_spin_lock_set_owner>
	return (double)val->val1 + (double)val->val2 / 1000000;
   1a494:	6868      	ldr	r0, [r5, #4]
   1a496:	f7fe f915 	bl	186c4 <__aeabi_i2d>
   1a49a:	a317      	add	r3, pc, #92	; (adr r3, 1a4f8 <env_sensors_poll_fn+0x140>)
   1a49c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a4a0:	f7fe faa4 	bl	189ec <__aeabi_ddiv>
   1a4a4:	4680      	mov	r8, r0
   1a4a6:	6828      	ldr	r0, [r5, #0]
   1a4a8:	4689      	mov	r9, r1
   1a4aa:	f7fe f90b 	bl	186c4 <__aeabi_i2d>
   1a4ae:	4602      	mov	r2, r0
   1a4b0:	460b      	mov	r3, r1
   1a4b2:	4640      	mov	r0, r8
   1a4b4:	4649      	mov	r1, r9
   1a4b6:	f7fd ffb9 	bl	1842c <__adddf3>
			env_sensors[i]->sensor.value = sensor_value_to_double(&data[i]);
   1a4ba:	f854 bc04 	ldr.w	fp, [r4, #-4]
   1a4be:	e9cb 0102 	strd	r0, r1, [fp, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1a4c2:	f10b 001c 	add.w	r0, fp, #28
   1a4c6:	f020 fdeb 	bl	3b0a0 <z_spin_unlock_valid>
   1a4ca:	b960      	cbnz	r0, 1a4e6 <env_sensors_poll_fn+0x12e>
   1a4cc:	4916      	ldr	r1, [pc, #88]	; (1a528 <env_sensors_poll_fn+0x170>)
   1a4ce:	2362      	movs	r3, #98	; 0x62
   1a4d0:	4632      	mov	r2, r6
   1a4d2:	4813      	ldr	r0, [pc, #76]	; (1a520 <env_sensors_poll_fn+0x168>)
   1a4d4:	f024 ffb7 	bl	3f446 <printk>
   1a4d8:	4814      	ldr	r0, [pc, #80]	; (1a52c <env_sensors_poll_fn+0x174>)
   1a4da:	f024 ffb4 	bl	3f446 <printk>
   1a4de:	2162      	movs	r1, #98	; 0x62
   1a4e0:	4630      	mov	r0, r6
   1a4e2:	f024 ffbd 	bl	3f460 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1a4e6:	687b      	ldr	r3, [r7, #4]
   1a4e8:	f383 8811 	msr	BASEPRI, r3
   1a4ec:	f3bf 8f6f 	isb	sy
   1a4f0:	e794      	b.n	1a41c <env_sensors_poll_fn+0x64>
	submit_poll_work( backoff_enabled ? CONFIG_ENVIRONMENT_DATA_BACKOFF_TIME : data_send_interval_s);
   1a4f2:	2314      	movs	r3, #20
   1a4f4:	e7a2      	b.n	1a43c <env_sensors_poll_fn+0x84>
   1a4f6:	bf00      	nop
   1a4f8:	00000000 	.word	0x00000000
   1a4fc:	412e8480 	.word	0x412e8480
   1a500:	20031bf8 	.word	0x20031bf8
   1a504:	000432f8 	.word	0x000432f8
   1a508:	00045d0e 	.word	0x00045d0e
   1a50c:	200238f0 	.word	0x200238f0
   1a510:	2002ad9c 	.word	0x2002ad9c
   1a514:	200238f4 	.word	0x200238f4
   1a518:	2002a220 	.word	0x2002a220
   1a51c:	00045d2d 	.word	0x00045d2d
   1a520:	00045316 	.word	0x00045316
   1a524:	00045d42 	.word	0x00045d42
   1a528:	00045d57 	.word	0x00045d57
   1a52c:	00045d6e 	.word	0x00045d6e
   1a530:	00045ce5 	.word	0x00045ce5
   1a534:	00000000 	.word	0x00000000

0001a538 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
   1a538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a53c:	4605      	mov	r5, r0
   1a53e:	b093      	sub	sp, #76	; 0x4c
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1a540:	460c      	mov	r4, r1
   1a542:	b909      	cbnz	r1, 1a548 <parse_value+0x10>
    if (head != NULL)
    {
        cJSON_Delete(head);
    }

    return false;
   1a544:	2000      	movs	r0, #0
   1a546:	e024      	b.n	1a592 <parse_value+0x5a>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1a548:	6808      	ldr	r0, [r1, #0]
   1a54a:	2800      	cmp	r0, #0
   1a54c:	d0fa      	beq.n	1a544 <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
   1a54e:	688b      	ldr	r3, [r1, #8]
   1a550:	6862      	ldr	r2, [r4, #4]
   1a552:	1d19      	adds	r1, r3, #4
   1a554:	4291      	cmp	r1, r2
   1a556:	d80b      	bhi.n	1a570 <parse_value+0x38>
   1a558:	2204      	movs	r2, #4
   1a55a:	49b1      	ldr	r1, [pc, #708]	; (1a820 <parse_value+0x2e8>)
   1a55c:	4418      	add	r0, r3
   1a55e:	f027 fc21 	bl	41da4 <strncmp>
   1a562:	b928      	cbnz	r0, 1a570 <parse_value+0x38>
        item->type = cJSON_NULL;
   1a564:	2304      	movs	r3, #4
   1a566:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
   1a568:	68a3      	ldr	r3, [r4, #8]
   1a56a:	3304      	adds	r3, #4
    input_buffer->offset++;
   1a56c:	60a3      	str	r3, [r4, #8]
   1a56e:	e074      	b.n	1a65a <parse_value+0x122>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
   1a570:	68a3      	ldr	r3, [r4, #8]
   1a572:	6862      	ldr	r2, [r4, #4]
   1a574:	1d59      	adds	r1, r3, #5
   1a576:	4291      	cmp	r1, r2
   1a578:	d80e      	bhi.n	1a598 <parse_value+0x60>
   1a57a:	6820      	ldr	r0, [r4, #0]
   1a57c:	2205      	movs	r2, #5
   1a57e:	49a9      	ldr	r1, [pc, #676]	; (1a824 <parse_value+0x2ec>)
   1a580:	4418      	add	r0, r3
   1a582:	f027 fc0f 	bl	41da4 <strncmp>
   1a586:	b938      	cbnz	r0, 1a598 <parse_value+0x60>
        item->type = cJSON_False;
   1a588:	2001      	movs	r0, #1
        input_buffer->offset += 5;
   1a58a:	68a3      	ldr	r3, [r4, #8]
        item->type = cJSON_False;
   1a58c:	60e8      	str	r0, [r5, #12]
        input_buffer->offset += 5;
   1a58e:	3305      	adds	r3, #5
        input_buffer->offset += 4;
   1a590:	60a3      	str	r3, [r4, #8]
}
   1a592:	b013      	add	sp, #76	; 0x4c
   1a594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
   1a598:	68a3      	ldr	r3, [r4, #8]
   1a59a:	6862      	ldr	r2, [r4, #4]
   1a59c:	1d19      	adds	r1, r3, #4
   1a59e:	4291      	cmp	r1, r2
   1a5a0:	d80d      	bhi.n	1a5be <parse_value+0x86>
   1a5a2:	6820      	ldr	r0, [r4, #0]
   1a5a4:	2204      	movs	r2, #4
   1a5a6:	49a0      	ldr	r1, [pc, #640]	; (1a828 <parse_value+0x2f0>)
   1a5a8:	4418      	add	r0, r3
   1a5aa:	f027 fbfb 	bl	41da4 <strncmp>
   1a5ae:	b930      	cbnz	r0, 1a5be <parse_value+0x86>
        item->type = cJSON_True;
   1a5b0:	2302      	movs	r3, #2
        item->valueint = 1;
   1a5b2:	2001      	movs	r0, #1
        item->type = cJSON_True;
   1a5b4:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
   1a5b6:	68a3      	ldr	r3, [r4, #8]
        item->valueint = 1;
   1a5b8:	6168      	str	r0, [r5, #20]
        input_buffer->offset += 4;
   1a5ba:	3304      	adds	r3, #4
   1a5bc:	e7e8      	b.n	1a590 <parse_value+0x58>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
   1a5be:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
   1a5c2:	42ba      	cmp	r2, r7
   1a5c4:	d2be      	bcs.n	1a544 <parse_value+0xc>
   1a5c6:	6820      	ldr	r0, [r4, #0]
   1a5c8:	5c83      	ldrb	r3, [r0, r2]
   1a5ca:	2b22      	cmp	r3, #34	; 0x22
   1a5cc:	d104      	bne.n	1a5d8 <parse_value+0xa0>
        return parse_string(item, input_buffer);
   1a5ce:	4621      	mov	r1, r4
   1a5d0:	4628      	mov	r0, r5
   1a5d2:	f008 f867 	bl	226a4 <parse_string>
   1a5d6:	e7dc      	b.n	1a592 <parse_value+0x5a>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
   1a5d8:	2b2d      	cmp	r3, #45	; 0x2d
   1a5da:	d003      	beq.n	1a5e4 <parse_value+0xac>
   1a5dc:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   1a5e0:	2e09      	cmp	r6, #9
   1a5e2:	d850      	bhi.n	1a686 <parse_value+0x14e>
    unsigned char *after_end = NULL;
   1a5e4:	2300      	movs	r3, #0
   1a5e6:	9301      	str	r3, [sp, #4]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1a5e8:	2800      	cmp	r0, #0
   1a5ea:	d0ab      	beq.n	1a544 <parse_value+0xc>
   1a5ec:	1abf      	subs	r7, r7, r2
   1a5ee:	ae02      	add	r6, sp, #8
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   1a5f0:	429f      	cmp	r7, r3
   1a5f2:	eb02 0103 	add.w	r1, r2, r3
   1a5f6:	d00e      	beq.n	1a616 <parse_value+0xde>
        switch (buffer_at_offset(input_buffer)[i])
   1a5f8:	5c41      	ldrb	r1, [r0, r1]
   1a5fa:	2939      	cmp	r1, #57	; 0x39
   1a5fc:	d82f      	bhi.n	1a65e <parse_value+0x126>
   1a5fe:	2930      	cmp	r1, #48	; 0x30
   1a600:	d205      	bcs.n	1a60e <parse_value+0xd6>
   1a602:	292d      	cmp	r1, #45	; 0x2d
   1a604:	d003      	beq.n	1a60e <parse_value+0xd6>
   1a606:	292e      	cmp	r1, #46	; 0x2e
   1a608:	d001      	beq.n	1a60e <parse_value+0xd6>
   1a60a:	292b      	cmp	r1, #43	; 0x2b
   1a60c:	d103      	bne.n	1a616 <parse_value+0xde>
                number_c_string[i] = decimal_point;
   1a60e:	54f1      	strb	r1, [r6, r3]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   1a610:	3301      	adds	r3, #1
   1a612:	2b3f      	cmp	r3, #63	; 0x3f
   1a614:	d1ec      	bne.n	1a5f0 <parse_value+0xb8>
    number_c_string[i] = '\0';
   1a616:	aa12      	add	r2, sp, #72	; 0x48
   1a618:	4413      	add	r3, r2
   1a61a:	2200      	movs	r2, #0
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1a61c:	a901      	add	r1, sp, #4
   1a61e:	4630      	mov	r0, r6
    number_c_string[i] = '\0';
   1a620:	f803 2c40 	strb.w	r2, [r3, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1a624:	f022 ffc2 	bl	3d5ac <strtod>
    if (number_c_string == after_end)
   1a628:	9f01      	ldr	r7, [sp, #4]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1a62a:	ec59 8b10 	vmov	r8, r9, d0
    if (number_c_string == after_end)
   1a62e:	42b7      	cmp	r7, r6
   1a630:	d088      	beq.n	1a544 <parse_value+0xc>
    if (number >= INT_MAX)
   1a632:	a379      	add	r3, pc, #484	; (adr r3, 1a818 <parse_value+0x2e0>)
   1a634:	e9d3 2300 	ldrd	r2, r3, [r3]
    item->valuedouble = number;
   1a638:	ed85 0b06 	vstr	d0, [r5, #24]
    if (number >= INT_MAX)
   1a63c:	ee10 0a10 	vmov	r0, s0
   1a640:	4649      	mov	r1, r9
   1a642:	f7fe fb2f 	bl	18ca4 <__aeabi_dcmpge>
   1a646:	b170      	cbz	r0, 1a666 <parse_value+0x12e>
        item->valueint = INT_MAX;
   1a648:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        item->valueint = INT_MIN;
   1a64c:	616b      	str	r3, [r5, #20]
    item->type = cJSON_Number;
   1a64e:	2308      	movs	r3, #8
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1a650:	1bbe      	subs	r6, r7, r6
   1a652:	68a7      	ldr	r7, [r4, #8]
    item->type = cJSON_Number;
   1a654:	60eb      	str	r3, [r5, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1a656:	443e      	add	r6, r7
   1a658:	60a6      	str	r6, [r4, #8]
    return true;
   1a65a:	2001      	movs	r0, #1
   1a65c:	e799      	b.n	1a592 <parse_value+0x5a>
        switch (buffer_at_offset(input_buffer)[i])
   1a65e:	2945      	cmp	r1, #69	; 0x45
   1a660:	d0d5      	beq.n	1a60e <parse_value+0xd6>
   1a662:	2965      	cmp	r1, #101	; 0x65
   1a664:	e7d2      	b.n	1a60c <parse_value+0xd4>
    else if (number <= (double)INT_MIN)
   1a666:	2200      	movs	r2, #0
   1a668:	4b70      	ldr	r3, [pc, #448]	; (1a82c <parse_value+0x2f4>)
   1a66a:	4640      	mov	r0, r8
   1a66c:	4649      	mov	r1, r9
   1a66e:	f7fe fb0f 	bl	18c90 <__aeabi_dcmple>
   1a672:	b110      	cbz	r0, 1a67a <parse_value+0x142>
        item->valueint = INT_MIN;
   1a674:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1a678:	e7e8      	b.n	1a64c <parse_value+0x114>
        item->valueint = (int)number;
   1a67a:	4640      	mov	r0, r8
   1a67c:	4649      	mov	r1, r9
   1a67e:	f7fe fb25 	bl	18ccc <__aeabi_d2iz>
   1a682:	6168      	str	r0, [r5, #20]
   1a684:	e7e3      	b.n	1a64e <parse_value+0x116>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
   1a686:	2b5b      	cmp	r3, #91	; 0x5b
   1a688:	d153      	bne.n	1a732 <parse_value+0x1fa>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1a68a:	68e3      	ldr	r3, [r4, #12]
   1a68c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1a690:	f4bf af58 	bcs.w	1a544 <parse_value+0xc>
    input_buffer->depth++;
   1a694:	3301      	adds	r3, #1
   1a696:	60e3      	str	r3, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
   1a698:	5c83      	ldrb	r3, [r0, r2]
   1a69a:	2b5b      	cmp	r3, #91	; 0x5b
   1a69c:	f47f af52 	bne.w	1a544 <parse_value+0xc>
    input_buffer->offset++;
   1a6a0:	3201      	adds	r2, #1
   1a6a2:	60a2      	str	r2, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1a6a4:	4620      	mov	r0, r4
   1a6a6:	f025 fffc 	bl	406a2 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
   1a6aa:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1a6ae:	4293      	cmp	r3, r2
   1a6b0:	d262      	bcs.n	1a778 <parse_value+0x240>
   1a6b2:	6822      	ldr	r2, [r4, #0]
   1a6b4:	5cd2      	ldrb	r2, [r2, r3]
   1a6b6:	2a5d      	cmp	r2, #93	; 0x5d
   1a6b8:	d109      	bne.n	1a6ce <parse_value+0x196>
    cJSON *head = NULL; /* head of the linked list */
   1a6ba:	2600      	movs	r6, #0
    input_buffer->depth--;
   1a6bc:	68e3      	ldr	r3, [r4, #12]
   1a6be:	3b01      	subs	r3, #1
   1a6c0:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Array;
   1a6c2:	2320      	movs	r3, #32
    item->child = head;
   1a6c4:	e9c5 6302 	strd	r6, r3, [r5, #8]
    input_buffer->offset++;
   1a6c8:	68a3      	ldr	r3, [r4, #8]
   1a6ca:	3301      	adds	r3, #1
   1a6cc:	e74e      	b.n	1a56c <parse_value+0x34>
    cJSON *current_item = NULL;
   1a6ce:	f04f 0800 	mov.w	r8, #0
    cJSON *head = NULL; /* head of the linked list */
   1a6d2:	4646      	mov	r6, r8
    input_buffer->offset--;
   1a6d4:	3b01      	subs	r3, #1
   1a6d6:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1a6d8:	6920      	ldr	r0, [r4, #16]
   1a6da:	f026 f814 	bl	40706 <cJSON_New_Item.isra.1>
        if (new_item == NULL)
   1a6de:	4607      	mov	r7, r0
   1a6e0:	b300      	cbz	r0, 1a724 <parse_value+0x1ec>
        if (head == NULL)
   1a6e2:	b1ee      	cbz	r6, 1a720 <parse_value+0x1e8>
            current_item->next = new_item;
   1a6e4:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   1a6e8:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   1a6ec:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1a6ee:	4620      	mov	r0, r4
        input_buffer->offset++;
   1a6f0:	3301      	adds	r3, #1
   1a6f2:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1a6f4:	f025 ffd5 	bl	406a2 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1a6f8:	4621      	mov	r1, r4
   1a6fa:	4638      	mov	r0, r7
   1a6fc:	f7ff ff1c 	bl	1a538 <parse_value>
   1a700:	b198      	cbz	r0, 1a72a <parse_value+0x1f2>
        buffer_skip_whitespace(input_buffer);
   1a702:	4620      	mov	r0, r4
   1a704:	f025 ffcd 	bl	406a2 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1a708:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1a70c:	4293      	cmp	r3, r2
   1a70e:	d20c      	bcs.n	1a72a <parse_value+0x1f2>
   1a710:	6822      	ldr	r2, [r4, #0]
   1a712:	46b8      	mov	r8, r7
   1a714:	5cd3      	ldrb	r3, [r2, r3]
   1a716:	2b2c      	cmp	r3, #44	; 0x2c
   1a718:	d0de      	beq.n	1a6d8 <parse_value+0x1a0>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
   1a71a:	2b5d      	cmp	r3, #93	; 0x5d
   1a71c:	d105      	bne.n	1a72a <parse_value+0x1f2>
   1a71e:	e7cd      	b.n	1a6bc <parse_value+0x184>
        if (head == NULL)
   1a720:	4606      	mov	r6, r0
   1a722:	e7e3      	b.n	1a6ec <parse_value+0x1b4>
    if (head != NULL)
   1a724:	2e00      	cmp	r6, #0
   1a726:	f43f af0d 	beq.w	1a544 <parse_value+0xc>
        cJSON_Delete(head);
   1a72a:	4630      	mov	r0, r6
        cJSON_Delete(head);
   1a72c:	f008 fbc4 	bl	22eb8 <cJSON_Delete>
   1a730:	e708      	b.n	1a544 <parse_value+0xc>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
   1a732:	2b7b      	cmp	r3, #123	; 0x7b
   1a734:	f47f af06 	bne.w	1a544 <parse_value+0xc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1a738:	68e3      	ldr	r3, [r4, #12]
   1a73a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1a73e:	f4bf af01 	bcs.w	1a544 <parse_value+0xc>
    input_buffer->depth++;
   1a742:	3301      	adds	r3, #1
   1a744:	60e3      	str	r3, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
   1a746:	5c83      	ldrb	r3, [r0, r2]
   1a748:	2b7b      	cmp	r3, #123	; 0x7b
   1a74a:	f47f aefb 	bne.w	1a544 <parse_value+0xc>
    input_buffer->offset++;
   1a74e:	3201      	adds	r2, #1
   1a750:	60a2      	str	r2, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1a752:	4620      	mov	r0, r4
   1a754:	f025 ffa5 	bl	406a2 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
   1a758:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1a75c:	4293      	cmp	r3, r2
   1a75e:	d20b      	bcs.n	1a778 <parse_value+0x240>
   1a760:	6822      	ldr	r2, [r4, #0]
   1a762:	5cd2      	ldrb	r2, [r2, r3]
   1a764:	2a7d      	cmp	r2, #125	; 0x7d
   1a766:	d10a      	bne.n	1a77e <parse_value+0x246>
    cJSON *head = NULL; /* linked list head */
   1a768:	2700      	movs	r7, #0
    input_buffer->depth--;
   1a76a:	68e3      	ldr	r3, [r4, #12]
   1a76c:	3b01      	subs	r3, #1
   1a76e:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Object;
   1a770:	2340      	movs	r3, #64	; 0x40
    item->child = head;
   1a772:	e9c5 7302 	strd	r7, r3, [r5, #8]
   1a776:	e7a7      	b.n	1a6c8 <parse_value+0x190>
        input_buffer->offset--;
   1a778:	3b01      	subs	r3, #1
   1a77a:	60a3      	str	r3, [r4, #8]
    if (head != NULL)
   1a77c:	e6e2      	b.n	1a544 <parse_value+0xc>
    cJSON *current_item = NULL;
   1a77e:	f04f 0800 	mov.w	r8, #0
    cJSON *head = NULL; /* linked list head */
   1a782:	4647      	mov	r7, r8
        current_item->valuestring = NULL;
   1a784:	46c1      	mov	r9, r8
    input_buffer->offset--;
   1a786:	3b01      	subs	r3, #1
   1a788:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1a78a:	6920      	ldr	r0, [r4, #16]
   1a78c:	f025 ffbb 	bl	40706 <cJSON_New_Item.isra.1>
        if (new_item == NULL)
   1a790:	4606      	mov	r6, r0
   1a792:	2800      	cmp	r0, #0
   1a794:	d039      	beq.n	1a80a <parse_value+0x2d2>
        if (head == NULL)
   1a796:	b3b7      	cbz	r7, 1a806 <parse_value+0x2ce>
            current_item->next = new_item;
   1a798:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   1a79c:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   1a7a0:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1a7a2:	4620      	mov	r0, r4
        input_buffer->offset++;
   1a7a4:	3301      	adds	r3, #1
   1a7a6:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1a7a8:	f025 ff7b 	bl	406a2 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
   1a7ac:	4621      	mov	r1, r4
   1a7ae:	4630      	mov	r0, r6
   1a7b0:	f007 ff78 	bl	226a4 <parse_string>
   1a7b4:	b360      	cbz	r0, 1a810 <parse_value+0x2d8>
        buffer_skip_whitespace(input_buffer);
   1a7b6:	4620      	mov	r0, r4
   1a7b8:	f025 ff73 	bl	406a2 <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
   1a7bc:	6933      	ldr	r3, [r6, #16]
        current_item->valuestring = NULL;
   1a7be:	f8c6 9010 	str.w	r9, [r6, #16]
        current_item->string = current_item->valuestring;
   1a7c2:	6233      	str	r3, [r6, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
   1a7c4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1a7c8:	4293      	cmp	r3, r2
   1a7ca:	d221      	bcs.n	1a810 <parse_value+0x2d8>
   1a7cc:	6822      	ldr	r2, [r4, #0]
   1a7ce:	5cd2      	ldrb	r2, [r2, r3]
   1a7d0:	2a3a      	cmp	r2, #58	; 0x3a
   1a7d2:	d11d      	bne.n	1a810 <parse_value+0x2d8>
        input_buffer->offset++;
   1a7d4:	3301      	adds	r3, #1
   1a7d6:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1a7d8:	4620      	mov	r0, r4
   1a7da:	f025 ff62 	bl	406a2 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1a7de:	4621      	mov	r1, r4
   1a7e0:	4630      	mov	r0, r6
   1a7e2:	f7ff fea9 	bl	1a538 <parse_value>
   1a7e6:	b198      	cbz	r0, 1a810 <parse_value+0x2d8>
        buffer_skip_whitespace(input_buffer);
   1a7e8:	4620      	mov	r0, r4
   1a7ea:	f025 ff5a 	bl	406a2 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1a7ee:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1a7f2:	4293      	cmp	r3, r2
   1a7f4:	d20c      	bcs.n	1a810 <parse_value+0x2d8>
   1a7f6:	6822      	ldr	r2, [r4, #0]
   1a7f8:	46b0      	mov	r8, r6
   1a7fa:	5cd3      	ldrb	r3, [r2, r3]
   1a7fc:	2b2c      	cmp	r3, #44	; 0x2c
   1a7fe:	d0c4      	beq.n	1a78a <parse_value+0x252>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
   1a800:	2b7d      	cmp	r3, #125	; 0x7d
   1a802:	d105      	bne.n	1a810 <parse_value+0x2d8>
   1a804:	e7b1      	b.n	1a76a <parse_value+0x232>
        if (head == NULL)
   1a806:	4607      	mov	r7, r0
   1a808:	e7ca      	b.n	1a7a0 <parse_value+0x268>
    if (head != NULL)
   1a80a:	2f00      	cmp	r7, #0
   1a80c:	f43f ae9a 	beq.w	1a544 <parse_value+0xc>
        cJSON_Delete(head);
   1a810:	4638      	mov	r0, r7
   1a812:	e78b      	b.n	1a72c <parse_value+0x1f4>
   1a814:	f3af 8000 	nop.w
   1a818:	ffc00000 	.word	0xffc00000
   1a81c:	41dfffff 	.word	0x41dfffff
   1a820:	00046ffa 	.word	0x00046ffa
   1a824:	00047011 	.word	0x00047011
   1a828:	00047017 	.word	0x00047017
   1a82c:	c1e00000 	.word	0xc1e00000

0001a830 <cJSON_CreateNumber>:
    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
    cJSON *item = cJSON_New_Item(&global_hooks);
   1a830:	4b17      	ldr	r3, [pc, #92]	; (1a890 <cJSON_CreateNumber+0x60>)
{
   1a832:	b5d0      	push	{r4, r6, r7, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   1a834:	6818      	ldr	r0, [r3, #0]
{
   1a836:	ec57 6b10 	vmov	r6, r7, d0
    cJSON *item = cJSON_New_Item(&global_hooks);
   1a83a:	f025 ff64 	bl	40706 <cJSON_New_Item.isra.1>
    if(item)
   1a83e:	4604      	mov	r4, r0
   1a840:	b170      	cbz	r0, 1a860 <cJSON_CreateNumber+0x30>
    {
        item->type = cJSON_Number;
   1a842:	2308      	movs	r3, #8
        item->valuedouble = num;
   1a844:	e9c0 6706 	strd	r6, r7, [r0, #24]
        item->type = cJSON_Number;
   1a848:	60c3      	str	r3, [r0, #12]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
   1a84a:	4639      	mov	r1, r7
   1a84c:	a30e      	add	r3, pc, #56	; (adr r3, 1a888 <cJSON_CreateNumber+0x58>)
   1a84e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a852:	4630      	mov	r0, r6
   1a854:	f7fe fa26 	bl	18ca4 <__aeabi_dcmpge>
   1a858:	b120      	cbz	r0, 1a864 <cJSON_CreateNumber+0x34>
        {
            item->valueint = INT_MAX;
   1a85a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        }
        else if (num <= (double)INT_MIN)
        {
            item->valueint = INT_MIN;
   1a85e:	6163      	str	r3, [r4, #20]
            item->valueint = (int)num;
        }
    }

    return item;
}
   1a860:	4620      	mov	r0, r4
   1a862:	bdd0      	pop	{r4, r6, r7, pc}
        else if (num <= (double)INT_MIN)
   1a864:	2200      	movs	r2, #0
   1a866:	4b0b      	ldr	r3, [pc, #44]	; (1a894 <cJSON_CreateNumber+0x64>)
   1a868:	4630      	mov	r0, r6
   1a86a:	4639      	mov	r1, r7
   1a86c:	f7fe fa10 	bl	18c90 <__aeabi_dcmple>
   1a870:	b110      	cbz	r0, 1a878 <cJSON_CreateNumber+0x48>
            item->valueint = INT_MIN;
   1a872:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1a876:	e7f2      	b.n	1a85e <cJSON_CreateNumber+0x2e>
            item->valueint = (int)num;
   1a878:	4630      	mov	r0, r6
   1a87a:	4639      	mov	r1, r7
   1a87c:	f7fe fa26 	bl	18ccc <__aeabi_d2iz>
   1a880:	6160      	str	r0, [r4, #20]
    return item;
   1a882:	e7ed      	b.n	1a860 <cJSON_CreateNumber+0x30>
   1a884:	f3af 8000 	nop.w
   1a888:	ffc00000 	.word	0xffc00000
   1a88c:	41dfffff 	.word	0x41dfffff
   1a890:	20031c34 	.word	0x20031c34
   1a894:	c1e00000 	.word	0xc1e00000

0001a898 <double_to_sensor_value>:
 * @param val Sensor value to convert.
 * @param sense_val Pointer to sensor_value to store the converted data.
 */
static void double_to_sensor_value(double val,
				struct sensor_value *sense_val)
{
   1a898:	b5d0      	push	{r4, r6, r7, lr}
   1a89a:	4614      	mov	r4, r2
   1a89c:	460f      	mov	r7, r1
   1a89e:	4606      	mov	r6, r0
	sense_val->val1 = (int)val;
   1a8a0:	f7fe fa14 	bl	18ccc <__aeabi_d2iz>
   1a8a4:	6020      	str	r0, [r4, #0]
	sense_val->val2 = (val - (int)val) * 1000000;
   1a8a6:	f7fd ff0d 	bl	186c4 <__aeabi_i2d>
   1a8aa:	4602      	mov	r2, r0
   1a8ac:	460b      	mov	r3, r1
   1a8ae:	4630      	mov	r0, r6
   1a8b0:	4639      	mov	r1, r7
   1a8b2:	f7fd fdb9 	bl	18428 <__aeabi_dsub>
   1a8b6:	a304      	add	r3, pc, #16	; (adr r3, 1a8c8 <double_to_sensor_value+0x30>)
   1a8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a8bc:	f7fd ff6c 	bl	18798 <__aeabi_dmul>
   1a8c0:	f7fe fa04 	bl	18ccc <__aeabi_d2iz>
   1a8c4:	6060      	str	r0, [r4, #4]
}
   1a8c6:	bdd0      	pop	{r4, r6, r7, pc}
   1a8c8:	00000000 	.word	0x00000000
   1a8cc:	412e8480 	.word	0x412e8480

0001a8d0 <sensor_sim_sample_fetch>:
	return 0;
}

static int sensor_sim_sample_fetch(struct device *dev,
				enum sensor_channel chan)
{
   1a8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (chan) {
   1a8d2:	2910      	cmp	r1, #16
   1a8d4:	f200 80a6 	bhi.w	1aa24 <sensor_sim_sample_fetch+0x154>
   1a8d8:	e8df f001 	tbb	[pc, r1]
   1a8dc:	40302009 	.word	0x40302009
   1a8e0:	a4a4a4a4 	.word	0xa4a4a4a4
   1a8e4:	a4a4a4a4 	.word	0xa4a4a4a4
   1a8e8:	a49068a4 	.word	0xa49068a4
   1a8ec:	7d          	.byte	0x7d
   1a8ed:	00          	.byte	0x00
			accel_samples[0] = static_val_coeff * max_variation;
   1a8ee:	4c54      	ldr	r4, [pc, #336]	; (1aa40 <sensor_sim_sample_fetch+0x170>)
			accel_samples[0] = generate_sine(base_accel_samples[0],
   1a8f0:	f00e fcca 	bl	29288 <generate_sine.constprop.2>
			accel_samples[0] = static_val_coeff * max_variation;
   1a8f4:	6820      	ldr	r0, [r4, #0]
   1a8f6:	f7fd fee5 	bl	186c4 <__aeabi_i2d>
   1a8fa:	4b52      	ldr	r3, [pc, #328]	; (1aa44 <sensor_sim_sample_fetch+0x174>)
   1a8fc:	2200      	movs	r2, #0
   1a8fe:	4606      	mov	r6, r0
   1a900:	460f      	mov	r7, r1
   1a902:	f7fd ff49 	bl	18798 <__aeabi_dmul>
   1a906:	4b50      	ldr	r3, [pc, #320]	; (1aa48 <sensor_sim_sample_fetch+0x178>)
   1a908:	e9c3 0100 	strd	r0, r1, [r3]
		static_val_coeff *= -1.0;
   1a90c:	4630      	mov	r0, r6
   1a90e:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
   1a912:	f7fe f9db 	bl	18ccc <__aeabi_d2iz>
   1a916:	6020      	str	r0, [r4, #0]
	return 0;
   1a918:	2000      	movs	r0, #0
	return sensor_sim_generate_data(chan);
}
   1a91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			accel_samples[1] = static_val_coeff * max_variation;
   1a91c:	4c48      	ldr	r4, [pc, #288]	; (1aa40 <sensor_sim_sample_fetch+0x170>)
			accel_samples[1] = generate_sine(base_accel_samples[1],
   1a91e:	f00e fcb3 	bl	29288 <generate_sine.constprop.2>
			accel_samples[1] = static_val_coeff * max_variation;
   1a922:	6820      	ldr	r0, [r4, #0]
   1a924:	f7fd fece 	bl	186c4 <__aeabi_i2d>
   1a928:	4b46      	ldr	r3, [pc, #280]	; (1aa44 <sensor_sim_sample_fetch+0x174>)
   1a92a:	2200      	movs	r2, #0
   1a92c:	4606      	mov	r6, r0
   1a92e:	460f      	mov	r7, r1
   1a930:	f7fd ff32 	bl	18798 <__aeabi_dmul>
   1a934:	4b44      	ldr	r3, [pc, #272]	; (1aa48 <sensor_sim_sample_fetch+0x178>)
   1a936:	e9c3 0102 	strd	r0, r1, [r3, #8]
		static_val_coeff *= -1.0;
   1a93a:	e7e7      	b.n	1a90c <sensor_sim_sample_fetch+0x3c>
			accel_samples[2] = static_val_coeff * max_variation;
   1a93c:	4c40      	ldr	r4, [pc, #256]	; (1aa40 <sensor_sim_sample_fetch+0x170>)
			accel_samples[2] = generate_sine(base_accel_samples[2],
   1a93e:	f00e fca3 	bl	29288 <generate_sine.constprop.2>
			accel_samples[2] = static_val_coeff * max_variation;
   1a942:	6820      	ldr	r0, [r4, #0]
   1a944:	f7fd febe 	bl	186c4 <__aeabi_i2d>
   1a948:	4b3e      	ldr	r3, [pc, #248]	; (1aa44 <sensor_sim_sample_fetch+0x174>)
   1a94a:	2200      	movs	r2, #0
   1a94c:	4606      	mov	r6, r0
   1a94e:	460f      	mov	r7, r1
   1a950:	f7fd ff22 	bl	18798 <__aeabi_dmul>
   1a954:	4b3c      	ldr	r3, [pc, #240]	; (1aa48 <sensor_sim_sample_fetch+0x178>)
   1a956:	e9c3 0104 	strd	r0, r1, [r3, #16]
   1a95a:	e7d7      	b.n	1a90c <sensor_sim_sample_fetch+0x3c>
			accel_samples[0] = generate_sine(base_accel_samples[0],
   1a95c:	f00e fc94 	bl	29288 <generate_sine.constprop.2>
   1a960:	4c39      	ldr	r4, [pc, #228]	; (1aa48 <sensor_sim_sample_fetch+0x178>)
   1a962:	e9c4 0100 	strd	r0, r1, [r4]
	if (z_syscall_trap()) {
		return (s32_t) arch_syscall_invoke1(*(uintptr_t *)&ms, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(ms);
   1a966:	2001      	movs	r0, #1
   1a968:	f020 fa36 	bl	3add8 <z_impl_k_sleep>
			accel_samples[1] = generate_sine(base_accel_samples[1],
   1a96c:	f00e fc8c 	bl	29288 <generate_sine.constprop.2>
   1a970:	e9c4 0102 	strd	r0, r1, [r4, #8]
			accel_samples[0] = static_val_coeff * max_variation;
   1a974:	4d32      	ldr	r5, [pc, #200]	; (1aa40 <sensor_sim_sample_fetch+0x170>)
   1a976:	2001      	movs	r0, #1
   1a978:	f020 fa2e 	bl	3add8 <z_impl_k_sleep>
			accel_samples[2] = generate_sine(base_accel_samples[2],
   1a97c:	f00e fc84 	bl	29288 <generate_sine.constprop.2>
			accel_samples[0] = static_val_coeff * max_variation;
   1a980:	6828      	ldr	r0, [r5, #0]
   1a982:	f7fd fe9f 	bl	186c4 <__aeabi_i2d>
   1a986:	2200      	movs	r2, #0
   1a988:	4b2e      	ldr	r3, [pc, #184]	; (1aa44 <sensor_sim_sample_fetch+0x174>)
   1a98a:	4606      	mov	r6, r0
   1a98c:	460f      	mov	r7, r1
   1a98e:	f7fd ff03 	bl	18798 <__aeabi_dmul>
   1a992:	e9c4 0100 	strd	r0, r1, [r4]
			accel_samples[1] = static_val_coeff * max_variation;
   1a996:	e9c4 0102 	strd	r0, r1, [r4, #8]
			accel_samples[2] = static_val_coeff * max_variation;
   1a99a:	e9c4 0104 	strd	r0, r1, [r4, #16]
		static_val_coeff *= -1.0;
   1a99e:	4630      	mov	r0, r6
   1a9a0:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
   1a9a4:	f7fe f992 	bl	18ccc <__aeabi_d2iz>
   1a9a8:	6028      	str	r0, [r5, #0]
	return retval;
   1a9aa:	e7b5      	b.n	1a918 <sensor_sim_sample_fetch+0x48>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1a9ac:	f022 fd54 	bl	3d458 <rand>
   1a9b0:	f7fd fe88 	bl	186c4 <__aeabi_i2d>
   1a9b4:	a31e      	add	r3, pc, #120	; (adr r3, 1aa30 <sensor_sim_sample_fetch+0x160>)
   1a9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a9ba:	f7fe f817 	bl	189ec <__aeabi_ddiv>
   1a9be:	2200      	movs	r2, #0
   1a9c0:	4b22      	ldr	r3, [pc, #136]	; (1aa4c <sensor_sim_sample_fetch+0x17c>)
   1a9c2:	f7fd fd31 	bl	18428 <__aeabi_dsub>
	temp_sample = base_temp_sample + generate_pseudo_random();
   1a9c6:	4b22      	ldr	r3, [pc, #136]	; (1aa50 <sensor_sim_sample_fetch+0x180>)
   1a9c8:	2200      	movs	r2, #0
   1a9ca:	f7fd fd2f 	bl	1842c <__adddf3>
   1a9ce:	4b21      	ldr	r3, [pc, #132]	; (1aa54 <sensor_sim_sample_fetch+0x184>)
	pressure_sample = base_pressure_sample + generate_pseudo_random();
   1a9d0:	e9c3 0100 	strd	r0, r1, [r3]
   1a9d4:	e7a0      	b.n	1a918 <sensor_sim_sample_fetch+0x48>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1a9d6:	f022 fd3f 	bl	3d458 <rand>
   1a9da:	f7fd fe73 	bl	186c4 <__aeabi_i2d>
   1a9de:	a314      	add	r3, pc, #80	; (adr r3, 1aa30 <sensor_sim_sample_fetch+0x160>)
   1a9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a9e4:	f7fe f802 	bl	189ec <__aeabi_ddiv>
   1a9e8:	2200      	movs	r2, #0
   1a9ea:	4b18      	ldr	r3, [pc, #96]	; (1aa4c <sensor_sim_sample_fetch+0x17c>)
   1a9ec:	f7fd fd1c 	bl	18428 <__aeabi_dsub>
	humidity_sample = base_humidity_sample + generate_pseudo_random();
   1a9f0:	4b19      	ldr	r3, [pc, #100]	; (1aa58 <sensor_sim_sample_fetch+0x188>)
   1a9f2:	2200      	movs	r2, #0
   1a9f4:	f7fd fd1a 	bl	1842c <__adddf3>
   1a9f8:	4b18      	ldr	r3, [pc, #96]	; (1aa5c <sensor_sim_sample_fetch+0x18c>)
   1a9fa:	e7e9      	b.n	1a9d0 <sensor_sim_sample_fetch+0x100>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1a9fc:	f022 fd2c 	bl	3d458 <rand>
   1aa00:	f7fd fe60 	bl	186c4 <__aeabi_i2d>
   1aa04:	a30a      	add	r3, pc, #40	; (adr r3, 1aa30 <sensor_sim_sample_fetch+0x160>)
   1aa06:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aa0a:	f7fd ffef 	bl	189ec <__aeabi_ddiv>
   1aa0e:	2200      	movs	r2, #0
   1aa10:	4b0e      	ldr	r3, [pc, #56]	; (1aa4c <sensor_sim_sample_fetch+0x17c>)
   1aa12:	f7fd fd09 	bl	18428 <__aeabi_dsub>
	pressure_sample = base_pressure_sample + generate_pseudo_random();
   1aa16:	a308      	add	r3, pc, #32	; (adr r3, 1aa38 <sensor_sim_sample_fetch+0x168>)
   1aa18:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aa1c:	f7fd fd06 	bl	1842c <__adddf3>
   1aa20:	4b0f      	ldr	r3, [pc, #60]	; (1aa60 <sensor_sim_sample_fetch+0x190>)
   1aa22:	e7d5      	b.n	1a9d0 <sensor_sim_sample_fetch+0x100>
		return -ENOTSUP;
   1aa24:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return sensor_sim_generate_data(chan);
   1aa28:	e777      	b.n	1a91a <sensor_sim_sample_fetch+0x4a>
   1aa2a:	bf00      	nop
   1aa2c:	f3af 8000 	nop.w
   1aa30:	ffc00000 	.word	0xffc00000
   1aa34:	41cfffff 	.word	0x41cfffff
   1aa38:	cccccccd 	.word	0xcccccccd
   1aa3c:	40588ccc 	.word	0x40588ccc
   1aa40:	20031c5c 	.word	0x20031c5c
   1aa44:	40340000 	.word	0x40340000
   1aa48:	20022a30 	.word	0x20022a30
   1aa4c:	3ff00000 	.word	0x3ff00000
   1aa50:	40350000 	.word	0x40350000
   1aa54:	20022d40 	.word	0x20022d40
   1aa58:	404a0000 	.word	0x404a0000
   1aa5c:	20022a48 	.word	0x20022a48
   1aa60:	20022a50 	.word	0x20022a50
   1aa64:	00000000 	.word	0x00000000

0001aa68 <_strtod_l>:
   1aa68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa6c:	461f      	mov	r7, r3
   1aa6e:	b0a1      	sub	sp, #132	; 0x84
   1aa70:	2300      	movs	r3, #0
   1aa72:	460e      	mov	r6, r1
   1aa74:	9004      	str	r0, [sp, #16]
   1aa76:	f04f 0a00 	mov.w	sl, #0
   1aa7a:	931c      	str	r3, [sp, #112]	; 0x70
   1aa7c:	f04f 0b00 	mov.w	fp, #0
   1aa80:	4b97      	ldr	r3, [pc, #604]	; (1ace0 <_strtod_l+0x278>)
   1aa82:	9217      	str	r2, [sp, #92]	; 0x5c
   1aa84:	681b      	ldr	r3, [r3, #0]
   1aa86:	4618      	mov	r0, r3
   1aa88:	9305      	str	r3, [sp, #20]
   1aa8a:	f7ff fa2b 	bl	19ee4 <strlen>
   1aa8e:	4604      	mov	r4, r0
   1aa90:	961b      	str	r6, [sp, #108]	; 0x6c
   1aa92:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1aa94:	7813      	ldrb	r3, [r2, #0]
   1aa96:	2b0d      	cmp	r3, #13
   1aa98:	d832      	bhi.n	1ab00 <_strtod_l+0x98>
   1aa9a:	2b09      	cmp	r3, #9
   1aa9c:	d236      	bcs.n	1ab0c <_strtod_l+0xa4>
   1aa9e:	2b00      	cmp	r3, #0
   1aaa0:	d03e      	beq.n	1ab20 <_strtod_l+0xb8>
   1aaa2:	2300      	movs	r3, #0
   1aaa4:	930c      	str	r3, [sp, #48]	; 0x30
   1aaa6:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
   1aaa8:	782b      	ldrb	r3, [r5, #0]
   1aaaa:	2b30      	cmp	r3, #48	; 0x30
   1aaac:	f040 80a9 	bne.w	1ac02 <_strtod_l+0x19a>
   1aab0:	786b      	ldrb	r3, [r5, #1]
   1aab2:	2b58      	cmp	r3, #88	; 0x58
   1aab4:	d001      	beq.n	1aaba <_strtod_l+0x52>
   1aab6:	2b78      	cmp	r3, #120	; 0x78
   1aab8:	d167      	bne.n	1ab8a <_strtod_l+0x122>
   1aaba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1aabc:	a91b      	add	r1, sp, #108	; 0x6c
   1aabe:	9702      	str	r7, [sp, #8]
   1aac0:	9301      	str	r3, [sp, #4]
   1aac2:	ab1c      	add	r3, sp, #112	; 0x70
   1aac4:	4a87      	ldr	r2, [pc, #540]	; (1ace4 <_strtod_l+0x27c>)
   1aac6:	9300      	str	r3, [sp, #0]
   1aac8:	ab1d      	add	r3, sp, #116	; 0x74
   1aaca:	9804      	ldr	r0, [sp, #16]
   1aacc:	f023 f92e 	bl	3dd2c <__gethex>
   1aad0:	f010 0407 	ands.w	r4, r0, #7
   1aad4:	4606      	mov	r6, r0
   1aad6:	d005      	beq.n	1aae4 <_strtod_l+0x7c>
   1aad8:	2c06      	cmp	r4, #6
   1aada:	d12b      	bne.n	1ab34 <_strtod_l+0xcc>
   1aadc:	3501      	adds	r5, #1
   1aade:	2300      	movs	r3, #0
   1aae0:	951b      	str	r5, [sp, #108]	; 0x6c
   1aae2:	930c      	str	r3, [sp, #48]	; 0x30
   1aae4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1aae6:	2b00      	cmp	r3, #0
   1aae8:	f040 8572 	bne.w	1b5d0 <_strtod_l+0xb68>
   1aaec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1aaee:	b1e3      	cbz	r3, 1ab2a <_strtod_l+0xc2>
   1aaf0:	4652      	mov	r2, sl
   1aaf2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   1aaf6:	ec43 2b10 	vmov	d0, r2, r3
   1aafa:	b021      	add	sp, #132	; 0x84
   1aafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab00:	2b2b      	cmp	r3, #43	; 0x2b
   1ab02:	d006      	beq.n	1ab12 <_strtod_l+0xaa>
   1ab04:	2b2d      	cmp	r3, #45	; 0x2d
   1ab06:	d013      	beq.n	1ab30 <_strtod_l+0xc8>
   1ab08:	2b20      	cmp	r3, #32
   1ab0a:	d1ca      	bne.n	1aaa2 <_strtod_l+0x3a>
   1ab0c:	3201      	adds	r2, #1
   1ab0e:	921b      	str	r2, [sp, #108]	; 0x6c
   1ab10:	e7bf      	b.n	1aa92 <_strtod_l+0x2a>
   1ab12:	2300      	movs	r3, #0
   1ab14:	930c      	str	r3, [sp, #48]	; 0x30
   1ab16:	1c53      	adds	r3, r2, #1
   1ab18:	931b      	str	r3, [sp, #108]	; 0x6c
   1ab1a:	7853      	ldrb	r3, [r2, #1]
   1ab1c:	2b00      	cmp	r3, #0
   1ab1e:	d1c2      	bne.n	1aaa6 <_strtod_l+0x3e>
   1ab20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1ab22:	961b      	str	r6, [sp, #108]	; 0x6c
   1ab24:	2b00      	cmp	r3, #0
   1ab26:	f040 8551 	bne.w	1b5cc <_strtod_l+0xb64>
   1ab2a:	4652      	mov	r2, sl
   1ab2c:	465b      	mov	r3, fp
   1ab2e:	e7e2      	b.n	1aaf6 <_strtod_l+0x8e>
   1ab30:	2301      	movs	r3, #1
   1ab32:	e7ef      	b.n	1ab14 <_strtod_l+0xac>
   1ab34:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1ab36:	b13a      	cbz	r2, 1ab48 <_strtod_l+0xe0>
   1ab38:	2135      	movs	r1, #53	; 0x35
   1ab3a:	a81e      	add	r0, sp, #120	; 0x78
   1ab3c:	f027 fee3 	bl	42906 <__copybits>
   1ab40:	991c      	ldr	r1, [sp, #112]	; 0x70
   1ab42:	9804      	ldr	r0, [sp, #16]
   1ab44:	f027 fc17 	bl	42376 <_Bfree>
   1ab48:	3c01      	subs	r4, #1
   1ab4a:	2c04      	cmp	r4, #4
   1ab4c:	d806      	bhi.n	1ab5c <_strtod_l+0xf4>
   1ab4e:	e8df f004 	tbb	[pc, r4]
   1ab52:	030a      	.short	0x030a
   1ab54:	1714      	.short	0x1714
   1ab56:	0a          	.byte	0x0a
   1ab57:	00          	.byte	0x00
   1ab58:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
   1ab5c:	0731      	lsls	r1, r6, #28
   1ab5e:	d5c1      	bpl.n	1aae4 <_strtod_l+0x7c>
   1ab60:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   1ab64:	e7be      	b.n	1aae4 <_strtod_l+0x7c>
   1ab66:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
   1ab6a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1ab6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1ab70:	f202 4233 	addw	r2, r2, #1075	; 0x433
   1ab74:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   1ab78:	e7f0      	b.n	1ab5c <_strtod_l+0xf4>
   1ab7a:	f8df b16c 	ldr.w	fp, [pc, #364]	; 1ace8 <_strtod_l+0x280>
   1ab7e:	e7ed      	b.n	1ab5c <_strtod_l+0xf4>
   1ab80:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   1ab84:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   1ab88:	e7e8      	b.n	1ab5c <_strtod_l+0xf4>
   1ab8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1ab8c:	1c5a      	adds	r2, r3, #1
   1ab8e:	921b      	str	r2, [sp, #108]	; 0x6c
   1ab90:	785b      	ldrb	r3, [r3, #1]
   1ab92:	2b30      	cmp	r3, #48	; 0x30
   1ab94:	d0f9      	beq.n	1ab8a <_strtod_l+0x122>
   1ab96:	2b00      	cmp	r3, #0
   1ab98:	d0a4      	beq.n	1aae4 <_strtod_l+0x7c>
   1ab9a:	2301      	movs	r3, #1
   1ab9c:	f04f 0900 	mov.w	r9, #0
   1aba0:	9306      	str	r3, [sp, #24]
   1aba2:	220a      	movs	r2, #10
   1aba4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1aba6:	46c8      	mov	r8, r9
   1aba8:	f8cd 901c 	str.w	r9, [sp, #28]
   1abac:	9309      	str	r3, [sp, #36]	; 0x24
   1abae:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1abb0:	7805      	ldrb	r5, [r0, #0]
   1abb2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
   1abb6:	b2d9      	uxtb	r1, r3
   1abb8:	2909      	cmp	r1, #9
   1abba:	d924      	bls.n	1ac06 <_strtod_l+0x19e>
   1abbc:	4622      	mov	r2, r4
   1abbe:	9905      	ldr	r1, [sp, #20]
   1abc0:	f027 f8f0 	bl	41da4 <strncmp>
   1abc4:	b378      	cbz	r0, 1ac26 <_strtod_l+0x1be>
   1abc6:	2000      	movs	r0, #0
   1abc8:	462b      	mov	r3, r5
   1abca:	4644      	mov	r4, r8
   1abcc:	4602      	mov	r2, r0
   1abce:	9005      	str	r0, [sp, #20]
   1abd0:	2b65      	cmp	r3, #101	; 0x65
   1abd2:	d001      	beq.n	1abd8 <_strtod_l+0x170>
   1abd4:	2b45      	cmp	r3, #69	; 0x45
   1abd6:	d112      	bne.n	1abfe <_strtod_l+0x196>
   1abd8:	b91c      	cbnz	r4, 1abe2 <_strtod_l+0x17a>
   1abda:	9b06      	ldr	r3, [sp, #24]
   1abdc:	4303      	orrs	r3, r0
   1abde:	d09f      	beq.n	1ab20 <_strtod_l+0xb8>
   1abe0:	2400      	movs	r4, #0
   1abe2:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
   1abe4:	1c73      	adds	r3, r6, #1
   1abe6:	931b      	str	r3, [sp, #108]	; 0x6c
   1abe8:	7873      	ldrb	r3, [r6, #1]
   1abea:	2b2b      	cmp	r3, #43	; 0x2b
   1abec:	d071      	beq.n	1acd2 <_strtod_l+0x26a>
   1abee:	2b2d      	cmp	r3, #45	; 0x2d
   1abf0:	d074      	beq.n	1acdc <_strtod_l+0x274>
   1abf2:	2700      	movs	r7, #0
   1abf4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1abf8:	2909      	cmp	r1, #9
   1abfa:	d97b      	bls.n	1acf4 <_strtod_l+0x28c>
   1abfc:	961b      	str	r6, [sp, #108]	; 0x6c
   1abfe:	2500      	movs	r5, #0
   1ac00:	e098      	b.n	1ad34 <_strtod_l+0x2cc>
   1ac02:	2300      	movs	r3, #0
   1ac04:	e7ca      	b.n	1ab9c <_strtod_l+0x134>
   1ac06:	f1b8 0f08 	cmp.w	r8, #8
   1ac0a:	f100 0001 	add.w	r0, r0, #1
   1ac0e:	f108 0801 	add.w	r8, r8, #1
   1ac12:	bfd4      	ite	le
   1ac14:	9907      	ldrle	r1, [sp, #28]
   1ac16:	fb02 3909 	mlagt	r9, r2, r9, r3
   1ac1a:	901b      	str	r0, [sp, #108]	; 0x6c
   1ac1c:	bfdc      	itt	le
   1ac1e:	fb02 3301 	mlale	r3, r2, r1, r3
   1ac22:	9307      	strle	r3, [sp, #28]
   1ac24:	e7c3      	b.n	1abae <_strtod_l+0x146>
   1ac26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1ac28:	191a      	adds	r2, r3, r4
   1ac2a:	921b      	str	r2, [sp, #108]	; 0x6c
   1ac2c:	5d1b      	ldrb	r3, [r3, r4]
   1ac2e:	f1b8 0f00 	cmp.w	r8, #0
   1ac32:	d035      	beq.n	1aca0 <_strtod_l+0x238>
   1ac34:	4644      	mov	r4, r8
   1ac36:	9005      	str	r0, [sp, #20]
   1ac38:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1ac3c:	2a09      	cmp	r2, #9
   1ac3e:	d912      	bls.n	1ac66 <_strtod_l+0x1fe>
   1ac40:	2201      	movs	r2, #1
   1ac42:	e7c5      	b.n	1abd0 <_strtod_l+0x168>
   1ac44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1ac46:	3001      	adds	r0, #1
   1ac48:	1c5a      	adds	r2, r3, #1
   1ac4a:	921b      	str	r2, [sp, #108]	; 0x6c
   1ac4c:	785b      	ldrb	r3, [r3, #1]
   1ac4e:	2b30      	cmp	r3, #48	; 0x30
   1ac50:	d0f8      	beq.n	1ac44 <_strtod_l+0x1dc>
   1ac52:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   1ac56:	2a08      	cmp	r2, #8
   1ac58:	f200 84bf 	bhi.w	1b5da <_strtod_l+0xb72>
   1ac5c:	9005      	str	r0, [sp, #20]
   1ac5e:	2000      	movs	r0, #0
   1ac60:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1ac62:	4604      	mov	r4, r0
   1ac64:	9209      	str	r2, [sp, #36]	; 0x24
   1ac66:	3b30      	subs	r3, #48	; 0x30
   1ac68:	f100 0201 	add.w	r2, r0, #1
   1ac6c:	d012      	beq.n	1ac94 <_strtod_l+0x22c>
   1ac6e:	9905      	ldr	r1, [sp, #20]
   1ac70:	1905      	adds	r5, r0, r4
   1ac72:	4411      	add	r1, r2
   1ac74:	4622      	mov	r2, r4
   1ac76:	9105      	str	r1, [sp, #20]
   1ac78:	210a      	movs	r1, #10
   1ac7a:	42aa      	cmp	r2, r5
   1ac7c:	d112      	bne.n	1aca4 <_strtod_l+0x23c>
   1ac7e:	1822      	adds	r2, r4, r0
   1ac80:	3401      	adds	r4, #1
   1ac82:	2a08      	cmp	r2, #8
   1ac84:	4404      	add	r4, r0
   1ac86:	dc1a      	bgt.n	1acbe <_strtod_l+0x256>
   1ac88:	9907      	ldr	r1, [sp, #28]
   1ac8a:	220a      	movs	r2, #10
   1ac8c:	fb02 3301 	mla	r3, r2, r1, r3
   1ac90:	9307      	str	r3, [sp, #28]
   1ac92:	2200      	movs	r2, #0
   1ac94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1ac96:	4610      	mov	r0, r2
   1ac98:	1c59      	adds	r1, r3, #1
   1ac9a:	911b      	str	r1, [sp, #108]	; 0x6c
   1ac9c:	785b      	ldrb	r3, [r3, #1]
   1ac9e:	e7cb      	b.n	1ac38 <_strtod_l+0x1d0>
   1aca0:	4640      	mov	r0, r8
   1aca2:	e7d4      	b.n	1ac4e <_strtod_l+0x1e6>
   1aca4:	2a08      	cmp	r2, #8
   1aca6:	dc04      	bgt.n	1acb2 <_strtod_l+0x24a>
   1aca8:	9f07      	ldr	r7, [sp, #28]
   1acaa:	434f      	muls	r7, r1
   1acac:	9707      	str	r7, [sp, #28]
   1acae:	3201      	adds	r2, #1
   1acb0:	e7e3      	b.n	1ac7a <_strtod_l+0x212>
   1acb2:	1c57      	adds	r7, r2, #1
   1acb4:	2f10      	cmp	r7, #16
   1acb6:	bfd8      	it	le
   1acb8:	fb01 f909 	mulle.w	r9, r1, r9
   1acbc:	e7f7      	b.n	1acae <_strtod_l+0x246>
   1acbe:	2c10      	cmp	r4, #16
   1acc0:	bfdc      	itt	le
   1acc2:	220a      	movle	r2, #10
   1acc4:	fb02 3909 	mlale	r9, r2, r9, r3
   1acc8:	e7e3      	b.n	1ac92 <_strtod_l+0x22a>
   1acca:	2300      	movs	r3, #0
   1accc:	2201      	movs	r2, #1
   1acce:	9305      	str	r3, [sp, #20]
   1acd0:	e783      	b.n	1abda <_strtod_l+0x172>
   1acd2:	2700      	movs	r7, #0
   1acd4:	1cb3      	adds	r3, r6, #2
   1acd6:	931b      	str	r3, [sp, #108]	; 0x6c
   1acd8:	78b3      	ldrb	r3, [r6, #2]
   1acda:	e78b      	b.n	1abf4 <_strtod_l+0x18c>
   1acdc:	2701      	movs	r7, #1
   1acde:	e7f9      	b.n	1acd4 <_strtod_l+0x26c>
   1ace0:	00044d40 	.word	0x00044d40
   1ace4:	00044cb8 	.word	0x00044cb8
   1ace8:	7ff00000 	.word	0x7ff00000
   1acec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1acee:	1c59      	adds	r1, r3, #1
   1acf0:	911b      	str	r1, [sp, #108]	; 0x6c
   1acf2:	785b      	ldrb	r3, [r3, #1]
   1acf4:	2b30      	cmp	r3, #48	; 0x30
   1acf6:	d0f9      	beq.n	1acec <_strtod_l+0x284>
   1acf8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   1acfc:	2908      	cmp	r1, #8
   1acfe:	f63f af7e 	bhi.w	1abfe <_strtod_l+0x196>
   1ad02:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
   1ad06:	f04f 0e0a 	mov.w	lr, #10
   1ad0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1ad0c:	9308      	str	r3, [sp, #32]
   1ad0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1ad10:	1c59      	adds	r1, r3, #1
   1ad12:	911b      	str	r1, [sp, #108]	; 0x6c
   1ad14:	785b      	ldrb	r3, [r3, #1]
   1ad16:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
   1ad1a:	2d09      	cmp	r5, #9
   1ad1c:	d92e      	bls.n	1ad7c <_strtod_l+0x314>
   1ad1e:	9d08      	ldr	r5, [sp, #32]
   1ad20:	1b49      	subs	r1, r1, r5
   1ad22:	f644 651f 	movw	r5, #19999	; 0x4e1f
   1ad26:	2908      	cmp	r1, #8
   1ad28:	dc02      	bgt.n	1ad30 <_strtod_l+0x2c8>
   1ad2a:	4565      	cmp	r5, ip
   1ad2c:	bfa8      	it	ge
   1ad2e:	4665      	movge	r5, ip
   1ad30:	b107      	cbz	r7, 1ad34 <_strtod_l+0x2cc>
   1ad32:	426d      	negs	r5, r5
   1ad34:	2c00      	cmp	r4, #0
   1ad36:	d14b      	bne.n	1add0 <_strtod_l+0x368>
   1ad38:	9906      	ldr	r1, [sp, #24]
   1ad3a:	4301      	orrs	r1, r0
   1ad3c:	f47f aed2 	bne.w	1aae4 <_strtod_l+0x7c>
   1ad40:	2a00      	cmp	r2, #0
   1ad42:	f47f aeed 	bne.w	1ab20 <_strtod_l+0xb8>
   1ad46:	2b4e      	cmp	r3, #78	; 0x4e
   1ad48:	d022      	beq.n	1ad90 <_strtod_l+0x328>
   1ad4a:	dc1c      	bgt.n	1ad86 <_strtod_l+0x31e>
   1ad4c:	2b49      	cmp	r3, #73	; 0x49
   1ad4e:	f47f aee7 	bne.w	1ab20 <_strtod_l+0xb8>
   1ad52:	499a      	ldr	r1, [pc, #616]	; (1afbc <_strtod_l+0x554>)
   1ad54:	a81b      	add	r0, sp, #108	; 0x6c
   1ad56:	f027 f9e3 	bl	42120 <__match>
   1ad5a:	2800      	cmp	r0, #0
   1ad5c:	f43f aee0 	beq.w	1ab20 <_strtod_l+0xb8>
   1ad60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1ad62:	a81b      	add	r0, sp, #108	; 0x6c
   1ad64:	4996      	ldr	r1, [pc, #600]	; (1afc0 <_strtod_l+0x558>)
   1ad66:	3b01      	subs	r3, #1
   1ad68:	931b      	str	r3, [sp, #108]	; 0x6c
   1ad6a:	f027 f9d9 	bl	42120 <__match>
   1ad6e:	b910      	cbnz	r0, 1ad76 <_strtod_l+0x30e>
   1ad70:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1ad72:	3301      	adds	r3, #1
   1ad74:	931b      	str	r3, [sp, #108]	; 0x6c
   1ad76:	f8df b260 	ldr.w	fp, [pc, #608]	; 1afd8 <_strtod_l+0x570>
   1ad7a:	e6b3      	b.n	1aae4 <_strtod_l+0x7c>
   1ad7c:	fb0e 3c0c 	mla	ip, lr, ip, r3
   1ad80:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
   1ad84:	e7c3      	b.n	1ad0e <_strtod_l+0x2a6>
   1ad86:	2b69      	cmp	r3, #105	; 0x69
   1ad88:	d0e3      	beq.n	1ad52 <_strtod_l+0x2ea>
   1ad8a:	2b6e      	cmp	r3, #110	; 0x6e
   1ad8c:	f47f aec8 	bne.w	1ab20 <_strtod_l+0xb8>
   1ad90:	498c      	ldr	r1, [pc, #560]	; (1afc4 <_strtod_l+0x55c>)
   1ad92:	a81b      	add	r0, sp, #108	; 0x6c
   1ad94:	f027 f9c4 	bl	42120 <__match>
   1ad98:	2800      	cmp	r0, #0
   1ad9a:	f43f aec1 	beq.w	1ab20 <_strtod_l+0xb8>
   1ad9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1ada0:	781b      	ldrb	r3, [r3, #0]
   1ada2:	2b28      	cmp	r3, #40	; 0x28
   1ada4:	d10e      	bne.n	1adc4 <_strtod_l+0x35c>
   1ada6:	aa1e      	add	r2, sp, #120	; 0x78
   1ada8:	4987      	ldr	r1, [pc, #540]	; (1afc8 <_strtod_l+0x560>)
   1adaa:	a81b      	add	r0, sp, #108	; 0x6c
   1adac:	f027 f9cc 	bl	42148 <__hexnan>
   1adb0:	2805      	cmp	r0, #5
   1adb2:	d107      	bne.n	1adc4 <_strtod_l+0x35c>
   1adb4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1adb6:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
   1adba:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   1adbe:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   1adc2:	e68f      	b.n	1aae4 <_strtod_l+0x7c>
   1adc4:	4881      	ldr	r0, [pc, #516]	; (1afcc <_strtod_l+0x564>)
   1adc6:	f001 f9c7 	bl	1c158 <nan>
   1adca:	ec5b ab10 	vmov	sl, fp, d0
   1adce:	e689      	b.n	1aae4 <_strtod_l+0x7c>
   1add0:	9b05      	ldr	r3, [sp, #20]
   1add2:	f1b8 0f00 	cmp.w	r8, #0
   1add6:	bf08      	it	eq
   1add8:	46a0      	moveq	r8, r4
   1adda:	2c10      	cmp	r4, #16
   1addc:	9807      	ldr	r0, [sp, #28]
   1adde:	eba5 0303 	sub.w	r3, r5, r3
   1ade2:	4626      	mov	r6, r4
   1ade4:	bfa8      	it	ge
   1ade6:	2610      	movge	r6, #16
   1ade8:	9308      	str	r3, [sp, #32]
   1adea:	f7fd fc5b 	bl	186a4 <__aeabi_ui2d>
   1adee:	2c09      	cmp	r4, #9
   1adf0:	4682      	mov	sl, r0
   1adf2:	468b      	mov	fp, r1
   1adf4:	dd13      	ble.n	1ae1e <_strtod_l+0x3b6>
   1adf6:	4b76      	ldr	r3, [pc, #472]	; (1afd0 <_strtod_l+0x568>)
   1adf8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1adfc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   1ae00:	f7fd fcca 	bl	18798 <__aeabi_dmul>
   1ae04:	4682      	mov	sl, r0
   1ae06:	468b      	mov	fp, r1
   1ae08:	4648      	mov	r0, r9
   1ae0a:	f7fd fc4b 	bl	186a4 <__aeabi_ui2d>
   1ae0e:	4602      	mov	r2, r0
   1ae10:	460b      	mov	r3, r1
   1ae12:	4650      	mov	r0, sl
   1ae14:	4659      	mov	r1, fp
   1ae16:	f7fd fb09 	bl	1842c <__adddf3>
   1ae1a:	4682      	mov	sl, r0
   1ae1c:	468b      	mov	fp, r1
   1ae1e:	2c0f      	cmp	r4, #15
   1ae20:	dc38      	bgt.n	1ae94 <_strtod_l+0x42c>
   1ae22:	9b08      	ldr	r3, [sp, #32]
   1ae24:	2b00      	cmp	r3, #0
   1ae26:	f43f ae5d 	beq.w	1aae4 <_strtod_l+0x7c>
   1ae2a:	dd24      	ble.n	1ae76 <_strtod_l+0x40e>
   1ae2c:	2b16      	cmp	r3, #22
   1ae2e:	dc0b      	bgt.n	1ae48 <_strtod_l+0x3e0>
   1ae30:	4c67      	ldr	r4, [pc, #412]	; (1afd0 <_strtod_l+0x568>)
   1ae32:	4652      	mov	r2, sl
   1ae34:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   1ae38:	465b      	mov	r3, fp
   1ae3a:	e9d4 0100 	ldrd	r0, r1, [r4]
   1ae3e:	f7fd fcab 	bl	18798 <__aeabi_dmul>
   1ae42:	4682      	mov	sl, r0
   1ae44:	468b      	mov	fp, r1
   1ae46:	e64d      	b.n	1aae4 <_strtod_l+0x7c>
   1ae48:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
   1ae4c:	9a08      	ldr	r2, [sp, #32]
   1ae4e:	4293      	cmp	r3, r2
   1ae50:	db20      	blt.n	1ae94 <_strtod_l+0x42c>
   1ae52:	f1c4 040f 	rsb	r4, r4, #15
   1ae56:	4d5e      	ldr	r5, [pc, #376]	; (1afd0 <_strtod_l+0x568>)
   1ae58:	4652      	mov	r2, sl
   1ae5a:	465b      	mov	r3, fp
   1ae5c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
   1ae60:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ae64:	f7fd fc98 	bl	18798 <__aeabi_dmul>
   1ae68:	9b08      	ldr	r3, [sp, #32]
   1ae6a:	1b1c      	subs	r4, r3, r4
   1ae6c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1ae70:	e9d5 2300 	ldrd	r2, r3, [r5]
   1ae74:	e7e3      	b.n	1ae3e <_strtod_l+0x3d6>
   1ae76:	9b08      	ldr	r3, [sp, #32]
   1ae78:	3316      	adds	r3, #22
   1ae7a:	db0b      	blt.n	1ae94 <_strtod_l+0x42c>
   1ae7c:	9b05      	ldr	r3, [sp, #20]
   1ae7e:	4650      	mov	r0, sl
   1ae80:	4a53      	ldr	r2, [pc, #332]	; (1afd0 <_strtod_l+0x568>)
   1ae82:	4659      	mov	r1, fp
   1ae84:	1b5d      	subs	r5, r3, r5
   1ae86:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
   1ae8a:	e9d5 2300 	ldrd	r2, r3, [r5]
   1ae8e:	f7fd fdad 	bl	189ec <__aeabi_ddiv>
   1ae92:	e7d6      	b.n	1ae42 <_strtod_l+0x3da>
   1ae94:	1ba6      	subs	r6, r4, r6
   1ae96:	9b08      	ldr	r3, [sp, #32]
   1ae98:	441e      	add	r6, r3
   1ae9a:	2e00      	cmp	r6, #0
   1ae9c:	dd6e      	ble.n	1af7c <_strtod_l+0x514>
   1ae9e:	f016 030f 	ands.w	r3, r6, #15
   1aea2:	d00a      	beq.n	1aeba <_strtod_l+0x452>
   1aea4:	494a      	ldr	r1, [pc, #296]	; (1afd0 <_strtod_l+0x568>)
   1aea6:	4652      	mov	r2, sl
   1aea8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1aeac:	465b      	mov	r3, fp
   1aeae:	e9d1 0100 	ldrd	r0, r1, [r1]
   1aeb2:	f7fd fc71 	bl	18798 <__aeabi_dmul>
   1aeb6:	4682      	mov	sl, r0
   1aeb8:	468b      	mov	fp, r1
   1aeba:	f036 060f 	bics.w	r6, r6, #15
   1aebe:	d04e      	beq.n	1af5e <_strtod_l+0x4f6>
   1aec0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
   1aec4:	dd23      	ble.n	1af0e <_strtod_l+0x4a6>
   1aec6:	2400      	movs	r4, #0
   1aec8:	9405      	str	r4, [sp, #20]
   1aeca:	9409      	str	r4, [sp, #36]	; 0x24
   1aecc:	9407      	str	r4, [sp, #28]
   1aece:	2322      	movs	r3, #34	; 0x22
   1aed0:	9a04      	ldr	r2, [sp, #16]
   1aed2:	f8df b104 	ldr.w	fp, [pc, #260]	; 1afd8 <_strtod_l+0x570>
   1aed6:	f04f 0a00 	mov.w	sl, #0
   1aeda:	6013      	str	r3, [r2, #0]
   1aedc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1aede:	2b00      	cmp	r3, #0
   1aee0:	f43f ae00 	beq.w	1aae4 <_strtod_l+0x7c>
   1aee4:	991c      	ldr	r1, [sp, #112]	; 0x70
   1aee6:	9804      	ldr	r0, [sp, #16]
   1aee8:	f027 fa45 	bl	42376 <_Bfree>
   1aeec:	9907      	ldr	r1, [sp, #28]
   1aeee:	9804      	ldr	r0, [sp, #16]
   1aef0:	f027 fa41 	bl	42376 <_Bfree>
   1aef4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1aef8:	f027 fa3d 	bl	42376 <_Bfree>
   1aefc:	9909      	ldr	r1, [sp, #36]	; 0x24
   1aefe:	9804      	ldr	r0, [sp, #16]
   1af00:	f027 fa39 	bl	42376 <_Bfree>
   1af04:	4621      	mov	r1, r4
   1af06:	9804      	ldr	r0, [sp, #16]
   1af08:	f027 fa35 	bl	42376 <_Bfree>
   1af0c:	e5ea      	b.n	1aae4 <_strtod_l+0x7c>
   1af0e:	2300      	movs	r3, #0
   1af10:	1136      	asrs	r6, r6, #4
   1af12:	4650      	mov	r0, sl
   1af14:	4659      	mov	r1, fp
   1af16:	461f      	mov	r7, r3
   1af18:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 1afd4 <_strtod_l+0x56c>
   1af1c:	2e01      	cmp	r6, #1
   1af1e:	dc21      	bgt.n	1af64 <_strtod_l+0x4fc>
   1af20:	b10b      	cbz	r3, 1af26 <_strtod_l+0x4be>
   1af22:	4682      	mov	sl, r0
   1af24:	468b      	mov	fp, r1
   1af26:	4b2b      	ldr	r3, [pc, #172]	; (1afd4 <_strtod_l+0x56c>)
   1af28:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   1af2c:	4652      	mov	r2, sl
   1af2e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   1af32:	465b      	mov	r3, fp
   1af34:	e9d7 0100 	ldrd	r0, r1, [r7]
   1af38:	f7fd fc2e 	bl	18798 <__aeabi_dmul>
   1af3c:	4b26      	ldr	r3, [pc, #152]	; (1afd8 <_strtod_l+0x570>)
   1af3e:	460a      	mov	r2, r1
   1af40:	4682      	mov	sl, r0
   1af42:	400b      	ands	r3, r1
   1af44:	4925      	ldr	r1, [pc, #148]	; (1afdc <_strtod_l+0x574>)
   1af46:	428b      	cmp	r3, r1
   1af48:	d8bd      	bhi.n	1aec6 <_strtod_l+0x45e>
   1af4a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   1af4e:	428b      	cmp	r3, r1
   1af50:	bf86      	itte	hi
   1af52:	f8df b08c 	ldrhi.w	fp, [pc, #140]	; 1afe0 <_strtod_l+0x578>
   1af56:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   1af5a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   1af5e:	2300      	movs	r3, #0
   1af60:	9306      	str	r3, [sp, #24]
   1af62:	e078      	b.n	1b056 <_strtod_l+0x5ee>
   1af64:	07f2      	lsls	r2, r6, #31
   1af66:	d506      	bpl.n	1af76 <_strtod_l+0x50e>
   1af68:	eb09 03c7 	add.w	r3, r9, r7, lsl #3
   1af6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1af70:	f7fd fc12 	bl	18798 <__aeabi_dmul>
   1af74:	2301      	movs	r3, #1
   1af76:	3701      	adds	r7, #1
   1af78:	1076      	asrs	r6, r6, #1
   1af7a:	e7cf      	b.n	1af1c <_strtod_l+0x4b4>
   1af7c:	d0ef      	beq.n	1af5e <_strtod_l+0x4f6>
   1af7e:	4276      	negs	r6, r6
   1af80:	f016 020f 	ands.w	r2, r6, #15
   1af84:	d00a      	beq.n	1af9c <_strtod_l+0x534>
   1af86:	4b12      	ldr	r3, [pc, #72]	; (1afd0 <_strtod_l+0x568>)
   1af88:	4650      	mov	r0, sl
   1af8a:	4659      	mov	r1, fp
   1af8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1af90:	e9d3 2300 	ldrd	r2, r3, [r3]
   1af94:	f7fd fd2a 	bl	189ec <__aeabi_ddiv>
   1af98:	4682      	mov	sl, r0
   1af9a:	468b      	mov	fp, r1
   1af9c:	1136      	asrs	r6, r6, #4
   1af9e:	d0de      	beq.n	1af5e <_strtod_l+0x4f6>
   1afa0:	2e1f      	cmp	r6, #31
   1afa2:	dd1f      	ble.n	1afe4 <_strtod_l+0x57c>
   1afa4:	2400      	movs	r4, #0
   1afa6:	9405      	str	r4, [sp, #20]
   1afa8:	9409      	str	r4, [sp, #36]	; 0x24
   1afaa:	9407      	str	r4, [sp, #28]
   1afac:	2322      	movs	r3, #34	; 0x22
   1afae:	9a04      	ldr	r2, [sp, #16]
   1afb0:	f04f 0a00 	mov.w	sl, #0
   1afb4:	f04f 0b00 	mov.w	fp, #0
   1afb8:	6013      	str	r3, [r2, #0]
   1afba:	e78f      	b.n	1aedc <_strtod_l+0x474>
   1afbc:	00045fe8 	.word	0x00045fe8
   1afc0:	0004a8ed 	.word	0x0004a8ed
   1afc4:	0004a897 	.word	0x0004a897
   1afc8:	00044ccc 	.word	0x00044ccc
   1afcc:	0004a184 	.word	0x0004a184
   1afd0:	00043150 	.word	0x00043150
   1afd4:	00043128 	.word	0x00043128
   1afd8:	7ff00000 	.word	0x7ff00000
   1afdc:	7ca00000 	.word	0x7ca00000
   1afe0:	7fefffff 	.word	0x7fefffff
   1afe4:	f016 0310 	ands.w	r3, r6, #16
   1afe8:	4650      	mov	r0, sl
   1afea:	4659      	mov	r1, fp
   1afec:	4fac      	ldr	r7, [pc, #688]	; (1b2a0 <_strtod_l+0x838>)
   1afee:	bf18      	it	ne
   1aff0:	236a      	movne	r3, #106	; 0x6a
   1aff2:	9306      	str	r3, [sp, #24]
   1aff4:	2300      	movs	r3, #0
   1aff6:	07f2      	lsls	r2, r6, #31
   1aff8:	d504      	bpl.n	1b004 <_strtod_l+0x59c>
   1affa:	e9d7 2300 	ldrd	r2, r3, [r7]
   1affe:	f7fd fbcb 	bl	18798 <__aeabi_dmul>
   1b002:	2301      	movs	r3, #1
   1b004:	1076      	asrs	r6, r6, #1
   1b006:	f107 0708 	add.w	r7, r7, #8
   1b00a:	d1f4      	bne.n	1aff6 <_strtod_l+0x58e>
   1b00c:	b10b      	cbz	r3, 1b012 <_strtod_l+0x5aa>
   1b00e:	4682      	mov	sl, r0
   1b010:	468b      	mov	fp, r1
   1b012:	9b06      	ldr	r3, [sp, #24]
   1b014:	b1bb      	cbz	r3, 1b046 <_strtod_l+0x5de>
   1b016:	f3cb 530a 	ubfx	r3, fp, #20, #11
   1b01a:	4659      	mov	r1, fp
   1b01c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1b020:	2b00      	cmp	r3, #0
   1b022:	dd10      	ble.n	1b046 <_strtod_l+0x5de>
   1b024:	2b1f      	cmp	r3, #31
   1b026:	f340 8126 	ble.w	1b276 <_strtod_l+0x80e>
   1b02a:	2b34      	cmp	r3, #52	; 0x34
   1b02c:	f04f 0a00 	mov.w	sl, #0
   1b030:	bfdb      	ittet	le
   1b032:	3b20      	suble	r3, #32
   1b034:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   1b038:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   1b03c:	fa02 f303 	lslle.w	r3, r2, r3
   1b040:	bfd8      	it	le
   1b042:	ea03 0b01 	andle.w	fp, r3, r1
   1b046:	2200      	movs	r2, #0
   1b048:	2300      	movs	r3, #0
   1b04a:	4650      	mov	r0, sl
   1b04c:	4659      	mov	r1, fp
   1b04e:	f7fd fe0b 	bl	18c68 <__aeabi_dcmpeq>
   1b052:	2800      	cmp	r0, #0
   1b054:	d1a6      	bne.n	1afa4 <_strtod_l+0x53c>
   1b056:	9b07      	ldr	r3, [sp, #28]
   1b058:	4642      	mov	r2, r8
   1b05a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1b05c:	9300      	str	r3, [sp, #0]
   1b05e:	4623      	mov	r3, r4
   1b060:	9804      	ldr	r0, [sp, #16]
   1b062:	f027 f9dc 	bl	4241e <__s2b>
   1b066:	9009      	str	r0, [sp, #36]	; 0x24
   1b068:	2800      	cmp	r0, #0
   1b06a:	f43f af2c 	beq.w	1aec6 <_strtod_l+0x45e>
   1b06e:	9b05      	ldr	r3, [sp, #20]
   1b070:	2400      	movs	r4, #0
   1b072:	1b5d      	subs	r5, r3, r5
   1b074:	9b08      	ldr	r3, [sp, #32]
   1b076:	9405      	str	r4, [sp, #20]
   1b078:	2b00      	cmp	r3, #0
   1b07a:	bfb4      	ite	lt
   1b07c:	462b      	movlt	r3, r5
   1b07e:	2300      	movge	r3, #0
   1b080:	930e      	str	r3, [sp, #56]	; 0x38
   1b082:	9b08      	ldr	r3, [sp, #32]
   1b084:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1b088:	9316      	str	r3, [sp, #88]	; 0x58
   1b08a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b08c:	9804      	ldr	r0, [sp, #16]
   1b08e:	6859      	ldr	r1, [r3, #4]
   1b090:	f027 f93d 	bl	4230e <_Balloc>
   1b094:	9007      	str	r0, [sp, #28]
   1b096:	2800      	cmp	r0, #0
   1b098:	f43f af19 	beq.w	1aece <_strtod_l+0x466>
   1b09c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b09e:	300c      	adds	r0, #12
   1b0a0:	691a      	ldr	r2, [r3, #16]
   1b0a2:	f103 010c 	add.w	r1, r3, #12
   1b0a6:	3202      	adds	r2, #2
   1b0a8:	0092      	lsls	r2, r2, #2
   1b0aa:	f026 fc82 	bl	419b2 <memcpy>
   1b0ae:	aa1e      	add	r2, sp, #120	; 0x78
   1b0b0:	a91d      	add	r1, sp, #116	; 0x74
   1b0b2:	9804      	ldr	r0, [sp, #16]
   1b0b4:	ec4b ab10 	vmov	d0, sl, fp
   1b0b8:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   1b0bc:	f027 fba2 	bl	42804 <__d2b>
   1b0c0:	901c      	str	r0, [sp, #112]	; 0x70
   1b0c2:	2800      	cmp	r0, #0
   1b0c4:	f43f af03 	beq.w	1aece <_strtod_l+0x466>
   1b0c8:	2101      	movs	r1, #1
   1b0ca:	9804      	ldr	r0, [sp, #16]
   1b0cc:	f027 fa35 	bl	4253a <__i2b>
   1b0d0:	9005      	str	r0, [sp, #20]
   1b0d2:	4603      	mov	r3, r0
   1b0d4:	2800      	cmp	r0, #0
   1b0d6:	f43f aefa 	beq.w	1aece <_strtod_l+0x466>
   1b0da:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   1b0dc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1b0de:	2e00      	cmp	r6, #0
   1b0e0:	bfa9      	itett	ge
   1b0e2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
   1b0e4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
   1b0e6:	18f7      	addge	r7, r6, r3
   1b0e8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
   1b0ea:	bfb8      	it	lt
   1b0ec:	1b9d      	sublt	r5, r3, r6
   1b0ee:	9b06      	ldr	r3, [sp, #24]
   1b0f0:	bfb8      	it	lt
   1b0f2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
   1b0f4:	1af6      	subs	r6, r6, r3
   1b0f6:	4b6b      	ldr	r3, [pc, #428]	; (1b2a4 <_strtod_l+0x83c>)
   1b0f8:	4416      	add	r6, r2
   1b0fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   1b0fe:	3e01      	subs	r6, #1
   1b100:	429e      	cmp	r6, r3
   1b102:	f280 80bf 	bge.w	1b284 <_strtod_l+0x81c>
   1b106:	1b9b      	subs	r3, r3, r6
   1b108:	f04f 0801 	mov.w	r8, #1
   1b10c:	2b1f      	cmp	r3, #31
   1b10e:	eba2 0203 	sub.w	r2, r2, r3
   1b112:	bfcd      	iteet	gt
   1b114:	f1c6 467f 	rsbgt	r6, r6, #4278190080	; 0xff000000
   1b118:	fa08 f803 	lslle.w	r8, r8, r3
   1b11c:	2600      	movle	r6, #0
   1b11e:	f506 067f 	addgt.w	r6, r6, #16711680	; 0xff0000
   1b122:	bfc2      	ittt	gt
   1b124:	f506 467b 	addgt.w	r6, r6, #64256	; 0xfb00
   1b128:	36e2      	addgt	r6, #226	; 0xe2
   1b12a:	fa08 f606 	lslgt.w	r6, r8, r6
   1b12e:	eb07 0902 	add.w	r9, r7, r2
   1b132:	9b06      	ldr	r3, [sp, #24]
   1b134:	4415      	add	r5, r2
   1b136:	454f      	cmp	r7, r9
   1b138:	441d      	add	r5, r3
   1b13a:	463b      	mov	r3, r7
   1b13c:	bfa8      	it	ge
   1b13e:	464b      	movge	r3, r9
   1b140:	42ab      	cmp	r3, r5
   1b142:	bfa8      	it	ge
   1b144:	462b      	movge	r3, r5
   1b146:	2b00      	cmp	r3, #0
   1b148:	bfc2      	ittt	gt
   1b14a:	eba9 0903 	subgt.w	r9, r9, r3
   1b14e:	1aed      	subgt	r5, r5, r3
   1b150:	1aff      	subgt	r7, r7, r3
   1b152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b154:	2b00      	cmp	r3, #0
   1b156:	dd17      	ble.n	1b188 <_strtod_l+0x720>
   1b158:	461a      	mov	r2, r3
   1b15a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1b15e:	f023 f869 	bl	3e234 <__pow5mult>
   1b162:	9005      	str	r0, [sp, #20]
   1b164:	2800      	cmp	r0, #0
   1b166:	f43f aeb2 	beq.w	1aece <_strtod_l+0x466>
   1b16a:	4601      	mov	r1, r0
   1b16c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1b16e:	9804      	ldr	r0, [sp, #16]
   1b170:	f027 f9ec 	bl	4254c <__multiply>
   1b174:	900d      	str	r0, [sp, #52]	; 0x34
   1b176:	2800      	cmp	r0, #0
   1b178:	f43f aea9 	beq.w	1aece <_strtod_l+0x466>
   1b17c:	991c      	ldr	r1, [sp, #112]	; 0x70
   1b17e:	9804      	ldr	r0, [sp, #16]
   1b180:	f027 f8f9 	bl	42376 <_Bfree>
   1b184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b186:	931c      	str	r3, [sp, #112]	; 0x70
   1b188:	f1b9 0f00 	cmp.w	r9, #0
   1b18c:	dc7e      	bgt.n	1b28c <_strtod_l+0x824>
   1b18e:	9b08      	ldr	r3, [sp, #32]
   1b190:	2b00      	cmp	r3, #0
   1b192:	dd08      	ble.n	1b1a6 <_strtod_l+0x73e>
   1b194:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1b196:	9907      	ldr	r1, [sp, #28]
   1b198:	9804      	ldr	r0, [sp, #16]
   1b19a:	f023 f84b 	bl	3e234 <__pow5mult>
   1b19e:	9007      	str	r0, [sp, #28]
   1b1a0:	2800      	cmp	r0, #0
   1b1a2:	f43f ae94 	beq.w	1aece <_strtod_l+0x466>
   1b1a6:	2d00      	cmp	r5, #0
   1b1a8:	dd08      	ble.n	1b1bc <_strtod_l+0x754>
   1b1aa:	462a      	mov	r2, r5
   1b1ac:	9907      	ldr	r1, [sp, #28]
   1b1ae:	9804      	ldr	r0, [sp, #16]
   1b1b0:	f027 fa5b 	bl	4266a <__lshift>
   1b1b4:	9007      	str	r0, [sp, #28]
   1b1b6:	2800      	cmp	r0, #0
   1b1b8:	f43f ae89 	beq.w	1aece <_strtod_l+0x466>
   1b1bc:	2f00      	cmp	r7, #0
   1b1be:	dd08      	ble.n	1b1d2 <_strtod_l+0x76a>
   1b1c0:	463a      	mov	r2, r7
   1b1c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1b1c6:	f027 fa50 	bl	4266a <__lshift>
   1b1ca:	9005      	str	r0, [sp, #20]
   1b1cc:	2800      	cmp	r0, #0
   1b1ce:	f43f ae7e 	beq.w	1aece <_strtod_l+0x466>
   1b1d2:	9a07      	ldr	r2, [sp, #28]
   1b1d4:	991c      	ldr	r1, [sp, #112]	; 0x70
   1b1d6:	9804      	ldr	r0, [sp, #16]
   1b1d8:	f027 fab4 	bl	42744 <__mdiff>
   1b1dc:	4604      	mov	r4, r0
   1b1de:	2800      	cmp	r0, #0
   1b1e0:	f43f ae75 	beq.w	1aece <_strtod_l+0x466>
   1b1e4:	68c3      	ldr	r3, [r0, #12]
   1b1e6:	9905      	ldr	r1, [sp, #20]
   1b1e8:	930d      	str	r3, [sp, #52]	; 0x34
   1b1ea:	2300      	movs	r3, #0
   1b1ec:	60c3      	str	r3, [r0, #12]
   1b1ee:	f027 fa8f 	bl	42710 <__mcmp>
   1b1f2:	2800      	cmp	r0, #0
   1b1f4:	da5c      	bge.n	1b2b0 <_strtod_l+0x848>
   1b1f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b1f8:	ea53 030a 	orrs.w	r3, r3, sl
   1b1fc:	d17e      	bne.n	1b2fc <_strtod_l+0x894>
   1b1fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1b202:	2b00      	cmp	r3, #0
   1b204:	d17a      	bne.n	1b2fc <_strtod_l+0x894>
   1b206:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1b20a:	0d1b      	lsrs	r3, r3, #20
   1b20c:	051b      	lsls	r3, r3, #20
   1b20e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1b212:	d973      	bls.n	1b2fc <_strtod_l+0x894>
   1b214:	6963      	ldr	r3, [r4, #20]
   1b216:	b913      	cbnz	r3, 1b21e <_strtod_l+0x7b6>
   1b218:	6923      	ldr	r3, [r4, #16]
   1b21a:	2b01      	cmp	r3, #1
   1b21c:	dd6e      	ble.n	1b2fc <_strtod_l+0x894>
   1b21e:	4621      	mov	r1, r4
   1b220:	2201      	movs	r2, #1
   1b222:	9804      	ldr	r0, [sp, #16]
   1b224:	f027 fa21 	bl	4266a <__lshift>
   1b228:	9905      	ldr	r1, [sp, #20]
   1b22a:	4604      	mov	r4, r0
   1b22c:	f027 fa70 	bl	42710 <__mcmp>
   1b230:	2800      	cmp	r0, #0
   1b232:	dd63      	ble.n	1b2fc <_strtod_l+0x894>
   1b234:	9906      	ldr	r1, [sp, #24]
   1b236:	465b      	mov	r3, fp
   1b238:	4a1b      	ldr	r2, [pc, #108]	; (1b2a8 <_strtod_l+0x840>)
   1b23a:	2900      	cmp	r1, #0
   1b23c:	d07d      	beq.n	1b33a <_strtod_l+0x8d2>
   1b23e:	ea02 010b 	and.w	r1, r2, fp
   1b242:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   1b246:	dc78      	bgt.n	1b33a <_strtod_l+0x8d2>
   1b248:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   1b24c:	f77f aeae 	ble.w	1afac <_strtod_l+0x544>
   1b250:	2300      	movs	r3, #0
   1b252:	4a16      	ldr	r2, [pc, #88]	; (1b2ac <_strtod_l+0x844>)
   1b254:	4650      	mov	r0, sl
   1b256:	4659      	mov	r1, fp
   1b258:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
   1b25c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   1b260:	f7fd fa9a 	bl	18798 <__aeabi_dmul>
   1b264:	460b      	mov	r3, r1
   1b266:	4682      	mov	sl, r0
   1b268:	468b      	mov	fp, r1
   1b26a:	4303      	orrs	r3, r0
   1b26c:	bf02      	ittt	eq
   1b26e:	2322      	moveq	r3, #34	; 0x22
   1b270:	9a04      	ldreq	r2, [sp, #16]
   1b272:	6013      	streq	r3, [r2, #0]
   1b274:	e636      	b.n	1aee4 <_strtod_l+0x47c>
   1b276:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b27a:	fa02 f303 	lsl.w	r3, r2, r3
   1b27e:	ea03 0a0a 	and.w	sl, r3, sl
   1b282:	e6e0      	b.n	1b046 <_strtod_l+0x5de>
   1b284:	2600      	movs	r6, #0
   1b286:	f04f 0801 	mov.w	r8, #1
   1b28a:	e750      	b.n	1b12e <_strtod_l+0x6c6>
   1b28c:	464a      	mov	r2, r9
   1b28e:	991c      	ldr	r1, [sp, #112]	; 0x70
   1b290:	9804      	ldr	r0, [sp, #16]
   1b292:	f027 f9ea 	bl	4266a <__lshift>
   1b296:	901c      	str	r0, [sp, #112]	; 0x70
   1b298:	2800      	cmp	r0, #0
   1b29a:	f47f af78 	bne.w	1b18e <_strtod_l+0x726>
   1b29e:	e616      	b.n	1aece <_strtod_l+0x466>
   1b2a0:	00043100 	.word	0x00043100
   1b2a4:	fffffc02 	.word	0xfffffc02
   1b2a8:	7ff00000 	.word	0x7ff00000
   1b2ac:	39500000 	.word	0x39500000
   1b2b0:	465d      	mov	r5, fp
   1b2b2:	d160      	bne.n	1b376 <_strtod_l+0x90e>
   1b2b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1b2b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1b2ba:	b342      	cbz	r2, 1b30e <_strtod_l+0x8a6>
   1b2bc:	4ab8      	ldr	r2, [pc, #736]	; (1b5a0 <_strtod_l+0xb38>)
   1b2be:	4293      	cmp	r3, r2
   1b2c0:	d128      	bne.n	1b314 <_strtod_l+0x8ac>
   1b2c2:	9b06      	ldr	r3, [sp, #24]
   1b2c4:	4650      	mov	r0, sl
   1b2c6:	b1eb      	cbz	r3, 1b304 <_strtod_l+0x89c>
   1b2c8:	4ab6      	ldr	r2, [pc, #728]	; (1b5a4 <_strtod_l+0xb3c>)
   1b2ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b2ce:	402a      	ands	r2, r5
   1b2d0:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   1b2d4:	d819      	bhi.n	1b30a <_strtod_l+0x8a2>
   1b2d6:	0d12      	lsrs	r2, r2, #20
   1b2d8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   1b2dc:	fa01 f303 	lsl.w	r3, r1, r3
   1b2e0:	4298      	cmp	r0, r3
   1b2e2:	d117      	bne.n	1b314 <_strtod_l+0x8ac>
   1b2e4:	4bb0      	ldr	r3, [pc, #704]	; (1b5a8 <_strtod_l+0xb40>)
   1b2e6:	429d      	cmp	r5, r3
   1b2e8:	d102      	bne.n	1b2f0 <_strtod_l+0x888>
   1b2ea:	3001      	adds	r0, #1
   1b2ec:	f43f adef 	beq.w	1aece <_strtod_l+0x466>
   1b2f0:	4bac      	ldr	r3, [pc, #688]	; (1b5a4 <_strtod_l+0xb3c>)
   1b2f2:	f04f 0a00 	mov.w	sl, #0
   1b2f6:	402b      	ands	r3, r5
   1b2f8:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   1b2fc:	9b06      	ldr	r3, [sp, #24]
   1b2fe:	2b00      	cmp	r3, #0
   1b300:	d1a6      	bne.n	1b250 <_strtod_l+0x7e8>
   1b302:	e5ef      	b.n	1aee4 <_strtod_l+0x47c>
   1b304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b308:	e7ea      	b.n	1b2e0 <_strtod_l+0x878>
   1b30a:	460b      	mov	r3, r1
   1b30c:	e7e8      	b.n	1b2e0 <_strtod_l+0x878>
   1b30e:	ea53 030a 	orrs.w	r3, r3, sl
   1b312:	d08f      	beq.n	1b234 <_strtod_l+0x7cc>
   1b314:	b1de      	cbz	r6, 1b34e <_strtod_l+0x8e6>
   1b316:	422e      	tst	r6, r5
   1b318:	d0f0      	beq.n	1b2fc <_strtod_l+0x894>
   1b31a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b31c:	4650      	mov	r0, sl
   1b31e:	9a06      	ldr	r2, [sp, #24]
   1b320:	4659      	mov	r1, fp
   1b322:	b1bb      	cbz	r3, 1b354 <_strtod_l+0x8ec>
   1b324:	f026 fd86 	bl	41e34 <sulp>
   1b328:	4602      	mov	r2, r0
   1b32a:	460b      	mov	r3, r1
   1b32c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1b330:	f7fd f87c 	bl	1842c <__adddf3>
   1b334:	4682      	mov	sl, r0
   1b336:	468b      	mov	fp, r1
   1b338:	e7e0      	b.n	1b2fc <_strtod_l+0x894>
   1b33a:	4013      	ands	r3, r2
   1b33c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   1b340:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   1b344:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   1b348:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   1b34c:	e7d6      	b.n	1b2fc <_strtod_l+0x894>
   1b34e:	ea18 0f0a 	tst.w	r8, sl
   1b352:	e7e1      	b.n	1b318 <_strtod_l+0x8b0>
   1b354:	f026 fd6e 	bl	41e34 <sulp>
   1b358:	4602      	mov	r2, r0
   1b35a:	460b      	mov	r3, r1
   1b35c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1b360:	f7fd f862 	bl	18428 <__aeabi_dsub>
   1b364:	2200      	movs	r2, #0
   1b366:	2300      	movs	r3, #0
   1b368:	4682      	mov	sl, r0
   1b36a:	468b      	mov	fp, r1
   1b36c:	f7fd fc7c 	bl	18c68 <__aeabi_dcmpeq>
   1b370:	2800      	cmp	r0, #0
   1b372:	d0c3      	beq.n	1b2fc <_strtod_l+0x894>
   1b374:	e61a      	b.n	1afac <_strtod_l+0x544>
   1b376:	9905      	ldr	r1, [sp, #20]
   1b378:	4620      	mov	r0, r4
   1b37a:	f027 fa91 	bl	428a0 <__ratio>
   1b37e:	2200      	movs	r2, #0
   1b380:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b384:	ee10 0a10 	vmov	r0, s0
   1b388:	ec57 6b10 	vmov	r6, r7, d0
   1b38c:	4639      	mov	r1, r7
   1b38e:	f7fd fc7f 	bl	18c90 <__aeabi_dcmple>
   1b392:	2800      	cmp	r0, #0
   1b394:	d073      	beq.n	1b47e <_strtod_l+0xa16>
   1b396:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b398:	2b00      	cmp	r3, #0
   1b39a:	d046      	beq.n	1b42a <_strtod_l+0x9c2>
   1b39c:	f04f 0800 	mov.w	r8, #0
   1b3a0:	f8df 9208 	ldr.w	r9, [pc, #520]	; 1b5ac <_strtod_l+0xb44>
   1b3a4:	2600      	movs	r6, #0
   1b3a6:	4f81      	ldr	r7, [pc, #516]	; (1b5ac <_strtod_l+0xb44>)
   1b3a8:	4b7e      	ldr	r3, [pc, #504]	; (1b5a4 <_strtod_l+0xb3c>)
   1b3aa:	402b      	ands	r3, r5
   1b3ac:	930f      	str	r3, [sp, #60]	; 0x3c
   1b3ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1b3b0:	4b7f      	ldr	r3, [pc, #508]	; (1b5b0 <_strtod_l+0xb48>)
   1b3b2:	429a      	cmp	r2, r3
   1b3b4:	f040 80ab 	bne.w	1b50e <_strtod_l+0xaa6>
   1b3b8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
   1b3bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1b3c0:	ec4b ab10 	vmov	d0, sl, fp
   1b3c4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   1b3c8:	f022 ff82 	bl	3e2d0 <__ulp>
   1b3cc:	4640      	mov	r0, r8
   1b3ce:	4649      	mov	r1, r9
   1b3d0:	ec53 2b10 	vmov	r2, r3, d0
   1b3d4:	f7fd f9e0 	bl	18798 <__aeabi_dmul>
   1b3d8:	4652      	mov	r2, sl
   1b3da:	465b      	mov	r3, fp
   1b3dc:	f7fd f826 	bl	1842c <__adddf3>
   1b3e0:	460b      	mov	r3, r1
   1b3e2:	4970      	ldr	r1, [pc, #448]	; (1b5a4 <_strtod_l+0xb3c>)
   1b3e4:	4682      	mov	sl, r0
   1b3e6:	4a73      	ldr	r2, [pc, #460]	; (1b5b4 <_strtod_l+0xb4c>)
   1b3e8:	4019      	ands	r1, r3
   1b3ea:	4291      	cmp	r1, r2
   1b3ec:	d95b      	bls.n	1b4a6 <_strtod_l+0xa3e>
   1b3ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b3f0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   1b3f4:	4293      	cmp	r3, r2
   1b3f6:	d103      	bne.n	1b400 <_strtod_l+0x998>
   1b3f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b3fa:	3301      	adds	r3, #1
   1b3fc:	f43f ad67 	beq.w	1aece <_strtod_l+0x466>
   1b400:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 1b5a8 <_strtod_l+0xb40>
   1b404:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   1b408:	991c      	ldr	r1, [sp, #112]	; 0x70
   1b40a:	9804      	ldr	r0, [sp, #16]
   1b40c:	f026 ffb3 	bl	42376 <_Bfree>
   1b410:	9907      	ldr	r1, [sp, #28]
   1b412:	9804      	ldr	r0, [sp, #16]
   1b414:	f026 ffaf 	bl	42376 <_Bfree>
   1b418:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1b41c:	f026 ffab 	bl	42376 <_Bfree>
   1b420:	4621      	mov	r1, r4
   1b422:	9804      	ldr	r0, [sp, #16]
   1b424:	f026 ffa7 	bl	42376 <_Bfree>
   1b428:	e62f      	b.n	1b08a <_strtod_l+0x622>
   1b42a:	f1ba 0f00 	cmp.w	sl, #0
   1b42e:	d118      	bne.n	1b462 <_strtod_l+0x9fa>
   1b430:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1b434:	b9db      	cbnz	r3, 1b46e <_strtod_l+0xa06>
   1b436:	2200      	movs	r2, #0
   1b438:	4b5c      	ldr	r3, [pc, #368]	; (1b5ac <_strtod_l+0xb44>)
   1b43a:	4630      	mov	r0, r6
   1b43c:	4639      	mov	r1, r7
   1b43e:	f7fd fc1d 	bl	18c7c <__aeabi_dcmplt>
   1b442:	b9c8      	cbnz	r0, 1b478 <_strtod_l+0xa10>
   1b444:	4630      	mov	r0, r6
   1b446:	4639      	mov	r1, r7
   1b448:	2200      	movs	r2, #0
   1b44a:	4b5b      	ldr	r3, [pc, #364]	; (1b5b8 <_strtod_l+0xb50>)
   1b44c:	f7fd f9a4 	bl	18798 <__aeabi_dmul>
   1b450:	4606      	mov	r6, r0
   1b452:	460f      	mov	r7, r1
   1b454:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   1b458:	9618      	str	r6, [sp, #96]	; 0x60
   1b45a:	9319      	str	r3, [sp, #100]	; 0x64
   1b45c:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
   1b460:	e7a2      	b.n	1b3a8 <_strtod_l+0x940>
   1b462:	f1ba 0f01 	cmp.w	sl, #1
   1b466:	d102      	bne.n	1b46e <_strtod_l+0xa06>
   1b468:	2d00      	cmp	r5, #0
   1b46a:	f43f ad9f 	beq.w	1afac <_strtod_l+0x544>
   1b46e:	f04f 0800 	mov.w	r8, #0
   1b472:	f8df 9148 	ldr.w	r9, [pc, #328]	; 1b5bc <_strtod_l+0xb54>
   1b476:	e795      	b.n	1b3a4 <_strtod_l+0x93c>
   1b478:	2600      	movs	r6, #0
   1b47a:	4f4f      	ldr	r7, [pc, #316]	; (1b5b8 <_strtod_l+0xb50>)
   1b47c:	e7ea      	b.n	1b454 <_strtod_l+0x9ec>
   1b47e:	4b4e      	ldr	r3, [pc, #312]	; (1b5b8 <_strtod_l+0xb50>)
   1b480:	4630      	mov	r0, r6
   1b482:	4639      	mov	r1, r7
   1b484:	2200      	movs	r2, #0
   1b486:	f7fd f987 	bl	18798 <__aeabi_dmul>
   1b48a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b48c:	4606      	mov	r6, r0
   1b48e:	460f      	mov	r7, r1
   1b490:	b933      	cbnz	r3, 1b4a0 <_strtod_l+0xa38>
   1b492:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1b496:	9010      	str	r0, [sp, #64]	; 0x40
   1b498:	9311      	str	r3, [sp, #68]	; 0x44
   1b49a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   1b49e:	e783      	b.n	1b3a8 <_strtod_l+0x940>
   1b4a0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   1b4a4:	e7f9      	b.n	1b49a <_strtod_l+0xa32>
   1b4a6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   1b4aa:	9b06      	ldr	r3, [sp, #24]
   1b4ac:	2b00      	cmp	r3, #0
   1b4ae:	d1ab      	bne.n	1b408 <_strtod_l+0x9a0>
   1b4b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1b4b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1b4b6:	0d1b      	lsrs	r3, r3, #20
   1b4b8:	051b      	lsls	r3, r3, #20
   1b4ba:	429a      	cmp	r2, r3
   1b4bc:	d1a4      	bne.n	1b408 <_strtod_l+0x9a0>
   1b4be:	4630      	mov	r0, r6
   1b4c0:	4639      	mov	r1, r7
   1b4c2:	f7fe fccf 	bl	19e64 <__aeabi_d2lz>
   1b4c6:	f7fd f939 	bl	1873c <__aeabi_l2d>
   1b4ca:	4602      	mov	r2, r0
   1b4cc:	460b      	mov	r3, r1
   1b4ce:	4630      	mov	r0, r6
   1b4d0:	4639      	mov	r1, r7
   1b4d2:	f7fc ffa9 	bl	18428 <__aeabi_dsub>
   1b4d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1b4da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1b4dc:	4606      	mov	r6, r0
   1b4de:	ea43 030a 	orr.w	r3, r3, sl
   1b4e2:	460f      	mov	r7, r1
   1b4e4:	4313      	orrs	r3, r2
   1b4e6:	d06b      	beq.n	1b5c0 <_strtod_l+0xb58>
   1b4e8:	a327      	add	r3, pc, #156	; (adr r3, 1b588 <_strtod_l+0xb20>)
   1b4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b4ee:	f7fd fbc5 	bl	18c7c <__aeabi_dcmplt>
   1b4f2:	2800      	cmp	r0, #0
   1b4f4:	f47f acf6 	bne.w	1aee4 <_strtod_l+0x47c>
   1b4f8:	4630      	mov	r0, r6
   1b4fa:	4639      	mov	r1, r7
   1b4fc:	a324      	add	r3, pc, #144	; (adr r3, 1b590 <_strtod_l+0xb28>)
   1b4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b502:	f7fd fbd9 	bl	18cb8 <__aeabi_dcmpgt>
   1b506:	2800      	cmp	r0, #0
   1b508:	f43f af7e 	beq.w	1b408 <_strtod_l+0x9a0>
   1b50c:	e4ea      	b.n	1aee4 <_strtod_l+0x47c>
   1b50e:	9b06      	ldr	r3, [sp, #24]
   1b510:	b31b      	cbz	r3, 1b55a <_strtod_l+0xaf2>
   1b512:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b514:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   1b518:	d81f      	bhi.n	1b55a <_strtod_l+0xaf2>
   1b51a:	4630      	mov	r0, r6
   1b51c:	4639      	mov	r1, r7
   1b51e:	a31e      	add	r3, pc, #120	; (adr r3, 1b598 <_strtod_l+0xb30>)
   1b520:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b524:	f7fd fbb4 	bl	18c90 <__aeabi_dcmple>
   1b528:	b190      	cbz	r0, 1b550 <_strtod_l+0xae8>
   1b52a:	4639      	mov	r1, r7
   1b52c:	4630      	mov	r0, r6
   1b52e:	f7fd fbf5 	bl	18d1c <__aeabi_d2uiz>
   1b532:	2800      	cmp	r0, #0
   1b534:	bf08      	it	eq
   1b536:	2001      	moveq	r0, #1
   1b538:	f7fd f8b4 	bl	186a4 <__aeabi_ui2d>
   1b53c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b53e:	4606      	mov	r6, r0
   1b540:	460f      	mov	r7, r1
   1b542:	b9db      	cbnz	r3, 1b57c <_strtod_l+0xb14>
   1b544:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1b548:	9012      	str	r0, [sp, #72]	; 0x48
   1b54a:	9313      	str	r3, [sp, #76]	; 0x4c
   1b54c:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
   1b550:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   1b554:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1b556:	eba3 0902 	sub.w	r9, r3, r2
   1b55a:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   1b55e:	f022 feb7 	bl	3e2d0 <__ulp>
   1b562:	4640      	mov	r0, r8
   1b564:	4649      	mov	r1, r9
   1b566:	ec53 2b10 	vmov	r2, r3, d0
   1b56a:	f7fd f915 	bl	18798 <__aeabi_dmul>
   1b56e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1b572:	f7fc ff5b 	bl	1842c <__adddf3>
   1b576:	4682      	mov	sl, r0
   1b578:	468b      	mov	fp, r1
   1b57a:	e796      	b.n	1b4aa <_strtod_l+0xa42>
   1b57c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
   1b580:	e7e4      	b.n	1b54c <_strtod_l+0xae4>
   1b582:	bf00      	nop
   1b584:	f3af 8000 	nop.w
   1b588:	94a03595 	.word	0x94a03595
   1b58c:	3fdfffff 	.word	0x3fdfffff
   1b590:	35afe535 	.word	0x35afe535
   1b594:	3fe00000 	.word	0x3fe00000
   1b598:	ffc00000 	.word	0xffc00000
   1b59c:	41dfffff 	.word	0x41dfffff
   1b5a0:	000fffff 	.word	0x000fffff
   1b5a4:	7ff00000 	.word	0x7ff00000
   1b5a8:	7fefffff 	.word	0x7fefffff
   1b5ac:	3ff00000 	.word	0x3ff00000
   1b5b0:	7fe00000 	.word	0x7fe00000
   1b5b4:	7c9fffff 	.word	0x7c9fffff
   1b5b8:	3fe00000 	.word	0x3fe00000
   1b5bc:	bff00000 	.word	0xbff00000
   1b5c0:	a30b      	add	r3, pc, #44	; (adr r3, 1b5f0 <_strtod_l+0xb88>)
   1b5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b5c6:	f7fd fb59 	bl	18c7c <__aeabi_dcmplt>
   1b5ca:	e79c      	b.n	1b506 <_strtod_l+0xa9e>
   1b5cc:	2300      	movs	r3, #0
   1b5ce:	930c      	str	r3, [sp, #48]	; 0x30
   1b5d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1b5d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1b5d4:	6013      	str	r3, [r2, #0]
   1b5d6:	f7ff ba89 	b.w	1aaec <_strtod_l+0x84>
   1b5da:	2b65      	cmp	r3, #101	; 0x65
   1b5dc:	f43f ab75 	beq.w	1acca <_strtod_l+0x262>
   1b5e0:	2b45      	cmp	r3, #69	; 0x45
   1b5e2:	f43f ab72 	beq.w	1acca <_strtod_l+0x262>
   1b5e6:	2201      	movs	r2, #1
   1b5e8:	f7ff bba6 	b.w	1ad38 <_strtod_l+0x2d0>
   1b5ec:	f3af 8000 	nop.w
   1b5f0:	94a03595 	.word	0x94a03595
   1b5f4:	3fcfffff 	.word	0x3fcfffff

0001b5f8 <_dtoa_r>:
   1b5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b5fc:	6a47      	ldr	r7, [r0, #36]	; 0x24
   1b5fe:	b099      	sub	sp, #100	; 0x64
   1b600:	4683      	mov	fp, r0
   1b602:	9108      	str	r1, [sp, #32]
   1b604:	920d      	str	r2, [sp, #52]	; 0x34
   1b606:	9314      	str	r3, [sp, #80]	; 0x50
   1b608:	9e22      	ldr	r6, [sp, #136]	; 0x88
   1b60a:	ec55 4b10 	vmov	r4, r5, d0
   1b60e:	e9cd 4500 	strd	r4, r5, [sp]
   1b612:	b947      	cbnz	r7, 1b626 <_dtoa_r+0x2e>
   1b614:	2010      	movs	r0, #16
   1b616:	f021 f9dd 	bl	3c9d4 <malloc>
   1b61a:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
   1b61e:	6007      	str	r7, [r0, #0]
   1b620:	60c7      	str	r7, [r0, #12]
   1b622:	e9c0 7701 	strd	r7, r7, [r0, #4]
   1b626:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   1b62a:	6819      	ldr	r1, [r3, #0]
   1b62c:	b159      	cbz	r1, 1b646 <_dtoa_r+0x4e>
   1b62e:	685a      	ldr	r2, [r3, #4]
   1b630:	2301      	movs	r3, #1
   1b632:	4658      	mov	r0, fp
   1b634:	4093      	lsls	r3, r2
   1b636:	604a      	str	r2, [r1, #4]
   1b638:	608b      	str	r3, [r1, #8]
   1b63a:	f026 fe9c 	bl	42376 <_Bfree>
   1b63e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   1b642:	2200      	movs	r2, #0
   1b644:	601a      	str	r2, [r3, #0]
   1b646:	1e2b      	subs	r3, r5, #0
   1b648:	bfb7      	itett	lt
   1b64a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   1b64e:	2300      	movge	r3, #0
   1b650:	2201      	movlt	r2, #1
   1b652:	9301      	strlt	r3, [sp, #4]
   1b654:	bfa8      	it	ge
   1b656:	6033      	strge	r3, [r6, #0]
   1b658:	9c01      	ldr	r4, [sp, #4]
   1b65a:	4bb1      	ldr	r3, [pc, #708]	; (1b920 <_dtoa_r+0x328>)
   1b65c:	bfb8      	it	lt
   1b65e:	6032      	strlt	r2, [r6, #0]
   1b660:	43a3      	bics	r3, r4
   1b662:	d11a      	bne.n	1b69a <_dtoa_r+0xa2>
   1b664:	f242 730f 	movw	r3, #9999	; 0x270f
   1b668:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1b66a:	6013      	str	r3, [r2, #0]
   1b66c:	f3c4 0313 	ubfx	r3, r4, #0, #20
   1b670:	9a00      	ldr	r2, [sp, #0]
   1b672:	4313      	orrs	r3, r2
   1b674:	f000 8547 	beq.w	1c106 <_dtoa_r+0xb0e>
   1b678:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1b67a:	b953      	cbnz	r3, 1b692 <_dtoa_r+0x9a>
   1b67c:	4ba9      	ldr	r3, [pc, #676]	; (1b924 <_dtoa_r+0x32c>)
   1b67e:	e023      	b.n	1b6c8 <_dtoa_r+0xd0>
   1b680:	4ba9      	ldr	r3, [pc, #676]	; (1b928 <_dtoa_r+0x330>)
   1b682:	9303      	str	r3, [sp, #12]
   1b684:	3308      	adds	r3, #8
   1b686:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1b688:	6013      	str	r3, [r2, #0]
   1b68a:	9803      	ldr	r0, [sp, #12]
   1b68c:	b019      	add	sp, #100	; 0x64
   1b68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b692:	4ba4      	ldr	r3, [pc, #656]	; (1b924 <_dtoa_r+0x32c>)
   1b694:	9303      	str	r3, [sp, #12]
   1b696:	3303      	adds	r3, #3
   1b698:	e7f5      	b.n	1b686 <_dtoa_r+0x8e>
   1b69a:	ed9d 7b00 	vldr	d7, [sp]
   1b69e:	2200      	movs	r2, #0
   1b6a0:	2300      	movs	r3, #0
   1b6a2:	ec51 0b17 	vmov	r0, r1, d7
   1b6a6:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   1b6aa:	f7fd fadd 	bl	18c68 <__aeabi_dcmpeq>
   1b6ae:	4607      	mov	r7, r0
   1b6b0:	b160      	cbz	r0, 1b6cc <_dtoa_r+0xd4>
   1b6b2:	2301      	movs	r3, #1
   1b6b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1b6b6:	6013      	str	r3, [r2, #0]
   1b6b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1b6ba:	2b00      	cmp	r3, #0
   1b6bc:	f000 8520 	beq.w	1c100 <_dtoa_r+0xb08>
   1b6c0:	4b9a      	ldr	r3, [pc, #616]	; (1b92c <_dtoa_r+0x334>)
   1b6c2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1b6c4:	6013      	str	r3, [r2, #0]
   1b6c6:	3b01      	subs	r3, #1
   1b6c8:	9303      	str	r3, [sp, #12]
   1b6ca:	e7de      	b.n	1b68a <_dtoa_r+0x92>
   1b6cc:	f3c4 560a 	ubfx	r6, r4, #20, #11
   1b6d0:	aa16      	add	r2, sp, #88	; 0x58
   1b6d2:	a917      	add	r1, sp, #92	; 0x5c
   1b6d4:	4658      	mov	r0, fp
   1b6d6:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
   1b6da:	f027 f893 	bl	42804 <__d2b>
   1b6de:	4680      	mov	r8, r0
   1b6e0:	2e00      	cmp	r6, #0
   1b6e2:	d07d      	beq.n	1b7e0 <_dtoa_r+0x1e8>
   1b6e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b6e6:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   1b6ea:	9715      	str	r7, [sp, #84]	; 0x54
   1b6ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1b6f0:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
   1b6f4:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
   1b6f8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   1b6fc:	2200      	movs	r2, #0
   1b6fe:	4b8c      	ldr	r3, [pc, #560]	; (1b930 <_dtoa_r+0x338>)
   1b700:	4620      	mov	r0, r4
   1b702:	4629      	mov	r1, r5
   1b704:	f7fc fe90 	bl	18428 <__aeabi_dsub>
   1b708:	a37f      	add	r3, pc, #508	; (adr r3, 1b908 <_dtoa_r+0x310>)
   1b70a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b70e:	f7fd f843 	bl	18798 <__aeabi_dmul>
   1b712:	a37f      	add	r3, pc, #508	; (adr r3, 1b910 <_dtoa_r+0x318>)
   1b714:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b718:	f7fc fe88 	bl	1842c <__adddf3>
   1b71c:	4604      	mov	r4, r0
   1b71e:	460d      	mov	r5, r1
   1b720:	4630      	mov	r0, r6
   1b722:	f7fc ffcf 	bl	186c4 <__aeabi_i2d>
   1b726:	a37c      	add	r3, pc, #496	; (adr r3, 1b918 <_dtoa_r+0x320>)
   1b728:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b72c:	f7fd f834 	bl	18798 <__aeabi_dmul>
   1b730:	4602      	mov	r2, r0
   1b732:	460b      	mov	r3, r1
   1b734:	4620      	mov	r0, r4
   1b736:	4629      	mov	r1, r5
   1b738:	f7fc fe78 	bl	1842c <__adddf3>
   1b73c:	4604      	mov	r4, r0
   1b73e:	460d      	mov	r5, r1
   1b740:	f7fd fac4 	bl	18ccc <__aeabi_d2iz>
   1b744:	2200      	movs	r2, #0
   1b746:	4682      	mov	sl, r0
   1b748:	2300      	movs	r3, #0
   1b74a:	4620      	mov	r0, r4
   1b74c:	4629      	mov	r1, r5
   1b74e:	f7fd fa95 	bl	18c7c <__aeabi_dcmplt>
   1b752:	b148      	cbz	r0, 1b768 <_dtoa_r+0x170>
   1b754:	4650      	mov	r0, sl
   1b756:	f7fc ffb5 	bl	186c4 <__aeabi_i2d>
   1b75a:	4622      	mov	r2, r4
   1b75c:	462b      	mov	r3, r5
   1b75e:	f7fd fa83 	bl	18c68 <__aeabi_dcmpeq>
   1b762:	b908      	cbnz	r0, 1b768 <_dtoa_r+0x170>
   1b764:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1b768:	f1ba 0f16 	cmp.w	sl, #22
   1b76c:	d857      	bhi.n	1b81e <_dtoa_r+0x226>
   1b76e:	4b71      	ldr	r3, [pc, #452]	; (1b934 <_dtoa_r+0x33c>)
   1b770:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   1b774:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1b778:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b77c:	f7fd fa7e 	bl	18c7c <__aeabi_dcmplt>
   1b780:	2800      	cmp	r0, #0
   1b782:	d04e      	beq.n	1b822 <_dtoa_r+0x22a>
   1b784:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1b788:	2300      	movs	r3, #0
   1b78a:	9311      	str	r3, [sp, #68]	; 0x44
   1b78c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1b78e:	1b9e      	subs	r6, r3, r6
   1b790:	1e73      	subs	r3, r6, #1
   1b792:	9307      	str	r3, [sp, #28]
   1b794:	bf49      	itett	mi
   1b796:	f1c6 0301 	rsbmi	r3, r6, #1
   1b79a:	2300      	movpl	r3, #0
   1b79c:	9306      	strmi	r3, [sp, #24]
   1b79e:	2300      	movmi	r3, #0
   1b7a0:	bf54      	ite	pl
   1b7a2:	9306      	strpl	r3, [sp, #24]
   1b7a4:	9307      	strmi	r3, [sp, #28]
   1b7a6:	f1ba 0f00 	cmp.w	sl, #0
   1b7aa:	db3c      	blt.n	1b826 <_dtoa_r+0x22e>
   1b7ac:	9b07      	ldr	r3, [sp, #28]
   1b7ae:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
   1b7b2:	4453      	add	r3, sl
   1b7b4:	9307      	str	r3, [sp, #28]
   1b7b6:	2300      	movs	r3, #0
   1b7b8:	9309      	str	r3, [sp, #36]	; 0x24
   1b7ba:	9b08      	ldr	r3, [sp, #32]
   1b7bc:	2b09      	cmp	r3, #9
   1b7be:	f200 808d 	bhi.w	1b8dc <_dtoa_r+0x2e4>
   1b7c2:	2b05      	cmp	r3, #5
   1b7c4:	bfc5      	ittet	gt
   1b7c6:	3b04      	subgt	r3, #4
   1b7c8:	2400      	movgt	r4, #0
   1b7ca:	2401      	movle	r4, #1
   1b7cc:	9308      	strgt	r3, [sp, #32]
   1b7ce:	9b08      	ldr	r3, [sp, #32]
   1b7d0:	3b02      	subs	r3, #2
   1b7d2:	2b03      	cmp	r3, #3
   1b7d4:	f200 808d 	bhi.w	1b8f2 <_dtoa_r+0x2fa>
   1b7d8:	e8df f003 	tbb	[pc, r3]
   1b7dc:	7e3a3c2f 	.word	0x7e3a3c2f
   1b7e0:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	; 0x58
   1b7e4:	441e      	add	r6, r3
   1b7e6:	f206 4032 	addw	r0, r6, #1074	; 0x432
   1b7ea:	2820      	cmp	r0, #32
   1b7ec:	dd11      	ble.n	1b812 <_dtoa_r+0x21a>
   1b7ee:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
   1b7f2:	9b00      	ldr	r3, [sp, #0]
   1b7f4:	4084      	lsls	r4, r0
   1b7f6:	f206 4012 	addw	r0, r6, #1042	; 0x412
   1b7fa:	fa23 f000 	lsr.w	r0, r3, r0
   1b7fe:	4320      	orrs	r0, r4
   1b800:	f7fc ff50 	bl	186a4 <__aeabi_ui2d>
   1b804:	2301      	movs	r3, #1
   1b806:	4604      	mov	r4, r0
   1b808:	f1a1 75f8 	sub.w	r5, r1, #32505856	; 0x1f00000
   1b80c:	3e01      	subs	r6, #1
   1b80e:	9315      	str	r3, [sp, #84]	; 0x54
   1b810:	e774      	b.n	1b6fc <_dtoa_r+0x104>
   1b812:	f1c0 0020 	rsb	r0, r0, #32
   1b816:	9b00      	ldr	r3, [sp, #0]
   1b818:	fa03 f000 	lsl.w	r0, r3, r0
   1b81c:	e7f0      	b.n	1b800 <_dtoa_r+0x208>
   1b81e:	2301      	movs	r3, #1
   1b820:	e7b3      	b.n	1b78a <_dtoa_r+0x192>
   1b822:	9011      	str	r0, [sp, #68]	; 0x44
   1b824:	e7b2      	b.n	1b78c <_dtoa_r+0x194>
   1b826:	9b06      	ldr	r3, [sp, #24]
   1b828:	eba3 030a 	sub.w	r3, r3, sl
   1b82c:	9306      	str	r3, [sp, #24]
   1b82e:	f1ca 0300 	rsb	r3, sl, #0
   1b832:	9309      	str	r3, [sp, #36]	; 0x24
   1b834:	2300      	movs	r3, #0
   1b836:	9310      	str	r3, [sp, #64]	; 0x40
   1b838:	e7bf      	b.n	1b7ba <_dtoa_r+0x1c2>
   1b83a:	2300      	movs	r3, #0
   1b83c:	930c      	str	r3, [sp, #48]	; 0x30
   1b83e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b840:	2b00      	cmp	r3, #0
   1b842:	dc59      	bgt.n	1b8f8 <_dtoa_r+0x300>
   1b844:	2301      	movs	r3, #1
   1b846:	4699      	mov	r9, r3
   1b848:	461a      	mov	r2, r3
   1b84a:	9304      	str	r3, [sp, #16]
   1b84c:	920d      	str	r2, [sp, #52]	; 0x34
   1b84e:	e00c      	b.n	1b86a <_dtoa_r+0x272>
   1b850:	2301      	movs	r3, #1
   1b852:	e7f3      	b.n	1b83c <_dtoa_r+0x244>
   1b854:	2300      	movs	r3, #0
   1b856:	930c      	str	r3, [sp, #48]	; 0x30
   1b858:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b85a:	4453      	add	r3, sl
   1b85c:	f103 0901 	add.w	r9, r3, #1
   1b860:	9304      	str	r3, [sp, #16]
   1b862:	464b      	mov	r3, r9
   1b864:	2b01      	cmp	r3, #1
   1b866:	bfb8      	it	lt
   1b868:	2301      	movlt	r3, #1
   1b86a:	2200      	movs	r2, #0
   1b86c:	f8db 5024 	ldr.w	r5, [fp, #36]	; 0x24
   1b870:	606a      	str	r2, [r5, #4]
   1b872:	2204      	movs	r2, #4
   1b874:	f102 0014 	add.w	r0, r2, #20
   1b878:	6869      	ldr	r1, [r5, #4]
   1b87a:	4298      	cmp	r0, r3
   1b87c:	d940      	bls.n	1b900 <_dtoa_r+0x308>
   1b87e:	4658      	mov	r0, fp
   1b880:	f026 fd45 	bl	4230e <_Balloc>
   1b884:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   1b888:	6028      	str	r0, [r5, #0]
   1b88a:	f1b9 0f0e 	cmp.w	r9, #14
   1b88e:	681b      	ldr	r3, [r3, #0]
   1b890:	9303      	str	r3, [sp, #12]
   1b892:	f200 80d4 	bhi.w	1ba3e <_dtoa_r+0x446>
   1b896:	2c00      	cmp	r4, #0
   1b898:	f000 80d1 	beq.w	1ba3e <_dtoa_r+0x446>
   1b89c:	f1ba 0f00 	cmp.w	sl, #0
   1b8a0:	dd66      	ble.n	1b970 <_dtoa_r+0x378>
   1b8a2:	4a24      	ldr	r2, [pc, #144]	; (1b934 <_dtoa_r+0x33c>)
   1b8a4:	f00a 030f 	and.w	r3, sl, #15
   1b8a8:	ea4f 142a 	mov.w	r4, sl, asr #4
   1b8ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1b8b0:	06e2      	lsls	r2, r4, #27
   1b8b2:	ed93 7b00 	vldr	d7, [r3]
   1b8b6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   1b8ba:	d557      	bpl.n	1b96c <_dtoa_r+0x374>
   1b8bc:	4b1e      	ldr	r3, [pc, #120]	; (1b938 <_dtoa_r+0x340>)
   1b8be:	f004 040f 	and.w	r4, r4, #15
   1b8c2:	2603      	movs	r6, #3
   1b8c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1b8c8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1b8cc:	f7fd f88e 	bl	189ec <__aeabi_ddiv>
   1b8d0:	e9cd 0100 	strd	r0, r1, [sp]
   1b8d4:	4d18      	ldr	r5, [pc, #96]	; (1b938 <_dtoa_r+0x340>)
   1b8d6:	e03e      	b.n	1b956 <_dtoa_r+0x35e>
   1b8d8:	2301      	movs	r3, #1
   1b8da:	e7bc      	b.n	1b856 <_dtoa_r+0x25e>
   1b8dc:	2401      	movs	r4, #1
   1b8de:	2300      	movs	r3, #0
   1b8e0:	940c      	str	r4, [sp, #48]	; 0x30
   1b8e2:	9308      	str	r3, [sp, #32]
   1b8e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b8e8:	2200      	movs	r2, #0
   1b8ea:	9304      	str	r3, [sp, #16]
   1b8ec:	4699      	mov	r9, r3
   1b8ee:	2312      	movs	r3, #18
   1b8f0:	e7ac      	b.n	1b84c <_dtoa_r+0x254>
   1b8f2:	2301      	movs	r3, #1
   1b8f4:	930c      	str	r3, [sp, #48]	; 0x30
   1b8f6:	e7f5      	b.n	1b8e4 <_dtoa_r+0x2ec>
   1b8f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b8fa:	9304      	str	r3, [sp, #16]
   1b8fc:	4699      	mov	r9, r3
   1b8fe:	e7b4      	b.n	1b86a <_dtoa_r+0x272>
   1b900:	3101      	adds	r1, #1
   1b902:	0052      	lsls	r2, r2, #1
   1b904:	6069      	str	r1, [r5, #4]
   1b906:	e7b5      	b.n	1b874 <_dtoa_r+0x27c>
   1b908:	636f4361 	.word	0x636f4361
   1b90c:	3fd287a7 	.word	0x3fd287a7
   1b910:	8b60c8b3 	.word	0x8b60c8b3
   1b914:	3fc68a28 	.word	0x3fc68a28
   1b918:	509f79fb 	.word	0x509f79fb
   1b91c:	3fd34413 	.word	0x3fd34413
   1b920:	7ff00000 	.word	0x7ff00000
   1b924:	0004a8f3 	.word	0x0004a8f3
   1b928:	0004a8ea 	.word	0x0004a8ea
   1b92c:	0004a2c4 	.word	0x0004a2c4
   1b930:	3ff80000 	.word	0x3ff80000
   1b934:	00043150 	.word	0x00043150
   1b938:	00043128 	.word	0x00043128
   1b93c:	07e3      	lsls	r3, r4, #31
   1b93e:	d508      	bpl.n	1b952 <_dtoa_r+0x35a>
   1b940:	3601      	adds	r6, #1
   1b942:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1b946:	e9d5 2300 	ldrd	r2, r3, [r5]
   1b94a:	f7fc ff25 	bl	18798 <__aeabi_dmul>
   1b94e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1b952:	1064      	asrs	r4, r4, #1
   1b954:	3508      	adds	r5, #8
   1b956:	2c00      	cmp	r4, #0
   1b958:	d1f0      	bne.n	1b93c <_dtoa_r+0x344>
   1b95a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1b95e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b962:	f7fd f843 	bl	189ec <__aeabi_ddiv>
   1b966:	e9cd 0100 	strd	r0, r1, [sp]
   1b96a:	e01a      	b.n	1b9a2 <_dtoa_r+0x3aa>
   1b96c:	2602      	movs	r6, #2
   1b96e:	e7b1      	b.n	1b8d4 <_dtoa_r+0x2dc>
   1b970:	f000 809f 	beq.w	1bab2 <_dtoa_r+0x4ba>
   1b974:	f1ca 0400 	rsb	r4, sl, #0
   1b978:	4b9e      	ldr	r3, [pc, #632]	; (1bbf4 <_dtoa_r+0x5fc>)
   1b97a:	4d9f      	ldr	r5, [pc, #636]	; (1bbf8 <_dtoa_r+0x600>)
   1b97c:	2602      	movs	r6, #2
   1b97e:	f004 020f 	and.w	r2, r4, #15
   1b982:	1124      	asrs	r4, r4, #4
   1b984:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1b988:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1b98c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b990:	f7fc ff02 	bl	18798 <__aeabi_dmul>
   1b994:	2300      	movs	r3, #0
   1b996:	e9cd 0100 	strd	r0, r1, [sp]
   1b99a:	2c00      	cmp	r4, #0
   1b99c:	d17e      	bne.n	1ba9c <_dtoa_r+0x4a4>
   1b99e:	2b00      	cmp	r3, #0
   1b9a0:	d1e1      	bne.n	1b966 <_dtoa_r+0x36e>
   1b9a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b9a4:	2b00      	cmp	r3, #0
   1b9a6:	f000 8086 	beq.w	1bab6 <_dtoa_r+0x4be>
   1b9aa:	2200      	movs	r2, #0
   1b9ac:	4b93      	ldr	r3, [pc, #588]	; (1bbfc <_dtoa_r+0x604>)
   1b9ae:	e9dd 4500 	ldrd	r4, r5, [sp]
   1b9b2:	4620      	mov	r0, r4
   1b9b4:	4629      	mov	r1, r5
   1b9b6:	f7fd f961 	bl	18c7c <__aeabi_dcmplt>
   1b9ba:	2800      	cmp	r0, #0
   1b9bc:	d07b      	beq.n	1bab6 <_dtoa_r+0x4be>
   1b9be:	f1b9 0f00 	cmp.w	r9, #0
   1b9c2:	d078      	beq.n	1bab6 <_dtoa_r+0x4be>
   1b9c4:	9b04      	ldr	r3, [sp, #16]
   1b9c6:	2b00      	cmp	r3, #0
   1b9c8:	dd35      	ble.n	1ba36 <_dtoa_r+0x43e>
   1b9ca:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   1b9ce:	4620      	mov	r0, r4
   1b9d0:	2200      	movs	r2, #0
   1b9d2:	4629      	mov	r1, r5
   1b9d4:	930a      	str	r3, [sp, #40]	; 0x28
   1b9d6:	3601      	adds	r6, #1
   1b9d8:	4b89      	ldr	r3, [pc, #548]	; (1bc00 <_dtoa_r+0x608>)
   1b9da:	f7fc fedd 	bl	18798 <__aeabi_dmul>
   1b9de:	9c04      	ldr	r4, [sp, #16]
   1b9e0:	e9cd 0100 	strd	r0, r1, [sp]
   1b9e4:	4630      	mov	r0, r6
   1b9e6:	f7fc fe6d 	bl	186c4 <__aeabi_i2d>
   1b9ea:	e9dd 2300 	ldrd	r2, r3, [sp]
   1b9ee:	f7fc fed3 	bl	18798 <__aeabi_dmul>
   1b9f2:	2200      	movs	r2, #0
   1b9f4:	4b83      	ldr	r3, [pc, #524]	; (1bc04 <_dtoa_r+0x60c>)
   1b9f6:	f7fc fd19 	bl	1842c <__adddf3>
   1b9fa:	4606      	mov	r6, r0
   1b9fc:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   1ba00:	2c00      	cmp	r4, #0
   1ba02:	d15c      	bne.n	1babe <_dtoa_r+0x4c6>
   1ba04:	2200      	movs	r2, #0
   1ba06:	4b80      	ldr	r3, [pc, #512]	; (1bc08 <_dtoa_r+0x610>)
   1ba08:	e9dd 0100 	ldrd	r0, r1, [sp]
   1ba0c:	f7fc fd0c 	bl	18428 <__aeabi_dsub>
   1ba10:	4632      	mov	r2, r6
   1ba12:	463b      	mov	r3, r7
   1ba14:	e9cd 0100 	strd	r0, r1, [sp]
   1ba18:	f7fd f94e 	bl	18cb8 <__aeabi_dcmpgt>
   1ba1c:	2800      	cmp	r0, #0
   1ba1e:	f040 8289 	bne.w	1bf34 <_dtoa_r+0x93c>
   1ba22:	4632      	mov	r2, r6
   1ba24:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   1ba28:	e9dd 0100 	ldrd	r0, r1, [sp]
   1ba2c:	f7fd f926 	bl	18c7c <__aeabi_dcmplt>
   1ba30:	2800      	cmp	r0, #0
   1ba32:	f040 827d 	bne.w	1bf30 <_dtoa_r+0x938>
   1ba36:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   1ba3a:	e9cd 3400 	strd	r3, r4, [sp]
   1ba3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1ba40:	2b00      	cmp	r3, #0
   1ba42:	f2c0 814c 	blt.w	1bcde <_dtoa_r+0x6e6>
   1ba46:	f1ba 0f0e 	cmp.w	sl, #14
   1ba4a:	f300 8148 	bgt.w	1bcde <_dtoa_r+0x6e6>
   1ba4e:	4b69      	ldr	r3, [pc, #420]	; (1bbf4 <_dtoa_r+0x5fc>)
   1ba50:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   1ba54:	ed93 7b00 	vldr	d7, [r3]
   1ba58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ba5a:	2b00      	cmp	r3, #0
   1ba5c:	ed8d 7b04 	vstr	d7, [sp, #16]
   1ba60:	f280 80d6 	bge.w	1bc10 <_dtoa_r+0x618>
   1ba64:	f1b9 0f00 	cmp.w	r9, #0
   1ba68:	f300 80d2 	bgt.w	1bc10 <_dtoa_r+0x618>
   1ba6c:	f040 825f 	bne.w	1bf2e <_dtoa_r+0x936>
   1ba70:	2200      	movs	r2, #0
   1ba72:	4b65      	ldr	r3, [pc, #404]	; (1bc08 <_dtoa_r+0x610>)
   1ba74:	464c      	mov	r4, r9
   1ba76:	464e      	mov	r6, r9
   1ba78:	ec51 0b17 	vmov	r0, r1, d7
   1ba7c:	f7fc fe8c 	bl	18798 <__aeabi_dmul>
   1ba80:	e9dd 2300 	ldrd	r2, r3, [sp]
   1ba84:	f7fd f90e 	bl	18ca4 <__aeabi_dcmpge>
   1ba88:	2800      	cmp	r0, #0
   1ba8a:	f040 8238 	bne.w	1befe <_dtoa_r+0x906>
   1ba8e:	9d03      	ldr	r5, [sp, #12]
   1ba90:	2331      	movs	r3, #49	; 0x31
   1ba92:	f10a 0a01 	add.w	sl, sl, #1
   1ba96:	f805 3b01 	strb.w	r3, [r5], #1
   1ba9a:	e234      	b.n	1bf06 <_dtoa_r+0x90e>
   1ba9c:	07e7      	lsls	r7, r4, #31
   1ba9e:	d505      	bpl.n	1baac <_dtoa_r+0x4b4>
   1baa0:	3601      	adds	r6, #1
   1baa2:	e9d5 2300 	ldrd	r2, r3, [r5]
   1baa6:	f7fc fe77 	bl	18798 <__aeabi_dmul>
   1baaa:	2301      	movs	r3, #1
   1baac:	1064      	asrs	r4, r4, #1
   1baae:	3508      	adds	r5, #8
   1bab0:	e773      	b.n	1b99a <_dtoa_r+0x3a2>
   1bab2:	2602      	movs	r6, #2
   1bab4:	e775      	b.n	1b9a2 <_dtoa_r+0x3aa>
   1bab6:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   1baba:	464c      	mov	r4, r9
   1babc:	e792      	b.n	1b9e4 <_dtoa_r+0x3ec>
   1babe:	4b4d      	ldr	r3, [pc, #308]	; (1bbf4 <_dtoa_r+0x5fc>)
   1bac0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1bac4:	e953 0102 	ldrd	r0, r1, [r3, #-8]
   1bac8:	9b03      	ldr	r3, [sp, #12]
   1baca:	441c      	add	r4, r3
   1bacc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1bace:	2b00      	cmp	r3, #0
   1bad0:	d046      	beq.n	1bb60 <_dtoa_r+0x568>
   1bad2:	4602      	mov	r2, r0
   1bad4:	460b      	mov	r3, r1
   1bad6:	2000      	movs	r0, #0
   1bad8:	494c      	ldr	r1, [pc, #304]	; (1bc0c <_dtoa_r+0x614>)
   1bada:	f7fc ff87 	bl	189ec <__aeabi_ddiv>
   1bade:	4632      	mov	r2, r6
   1bae0:	463b      	mov	r3, r7
   1bae2:	f7fc fca1 	bl	18428 <__aeabi_dsub>
   1bae6:	9d03      	ldr	r5, [sp, #12]
   1bae8:	4606      	mov	r6, r0
   1baea:	460f      	mov	r7, r1
   1baec:	e9dd 0100 	ldrd	r0, r1, [sp]
   1baf0:	f7fd f8ec 	bl	18ccc <__aeabi_d2iz>
   1baf4:	9012      	str	r0, [sp, #72]	; 0x48
   1baf6:	f7fc fde5 	bl	186c4 <__aeabi_i2d>
   1bafa:	4602      	mov	r2, r0
   1bafc:	460b      	mov	r3, r1
   1bafe:	e9dd 0100 	ldrd	r0, r1, [sp]
   1bb02:	f7fc fc91 	bl	18428 <__aeabi_dsub>
   1bb06:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1bb08:	4632      	mov	r2, r6
   1bb0a:	3330      	adds	r3, #48	; 0x30
   1bb0c:	f805 3b01 	strb.w	r3, [r5], #1
   1bb10:	463b      	mov	r3, r7
   1bb12:	e9cd 0100 	strd	r0, r1, [sp]
   1bb16:	f7fd f8b1 	bl	18c7c <__aeabi_dcmplt>
   1bb1a:	2800      	cmp	r0, #0
   1bb1c:	d15f      	bne.n	1bbde <_dtoa_r+0x5e6>
   1bb1e:	2000      	movs	r0, #0
   1bb20:	4936      	ldr	r1, [pc, #216]	; (1bbfc <_dtoa_r+0x604>)
   1bb22:	e9dd 2300 	ldrd	r2, r3, [sp]
   1bb26:	f7fc fc7f 	bl	18428 <__aeabi_dsub>
   1bb2a:	4632      	mov	r2, r6
   1bb2c:	463b      	mov	r3, r7
   1bb2e:	f7fd f8a5 	bl	18c7c <__aeabi_dcmplt>
   1bb32:	2800      	cmp	r0, #0
   1bb34:	f040 80b2 	bne.w	1bc9c <_dtoa_r+0x6a4>
   1bb38:	42a5      	cmp	r5, r4
   1bb3a:	f43f af7c 	beq.w	1ba36 <_dtoa_r+0x43e>
   1bb3e:	2200      	movs	r2, #0
   1bb40:	4b2f      	ldr	r3, [pc, #188]	; (1bc00 <_dtoa_r+0x608>)
   1bb42:	4630      	mov	r0, r6
   1bb44:	4639      	mov	r1, r7
   1bb46:	f7fc fe27 	bl	18798 <__aeabi_dmul>
   1bb4a:	2200      	movs	r2, #0
   1bb4c:	4606      	mov	r6, r0
   1bb4e:	460f      	mov	r7, r1
   1bb50:	4b2b      	ldr	r3, [pc, #172]	; (1bc00 <_dtoa_r+0x608>)
   1bb52:	e9dd 0100 	ldrd	r0, r1, [sp]
   1bb56:	f7fc fe1f 	bl	18798 <__aeabi_dmul>
   1bb5a:	e9cd 0100 	strd	r0, r1, [sp]
   1bb5e:	e7c5      	b.n	1baec <_dtoa_r+0x4f4>
   1bb60:	4632      	mov	r2, r6
   1bb62:	463b      	mov	r3, r7
   1bb64:	f7fc fe18 	bl	18798 <__aeabi_dmul>
   1bb68:	4625      	mov	r5, r4
   1bb6a:	9e03      	ldr	r6, [sp, #12]
   1bb6c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   1bb70:	e9dd 0100 	ldrd	r0, r1, [sp]
   1bb74:	f7fd f8aa 	bl	18ccc <__aeabi_d2iz>
   1bb78:	4607      	mov	r7, r0
   1bb7a:	f7fc fda3 	bl	186c4 <__aeabi_i2d>
   1bb7e:	4602      	mov	r2, r0
   1bb80:	3730      	adds	r7, #48	; 0x30
   1bb82:	460b      	mov	r3, r1
   1bb84:	e9dd 0100 	ldrd	r0, r1, [sp]
   1bb88:	f7fc fc4e 	bl	18428 <__aeabi_dsub>
   1bb8c:	f806 7b01 	strb.w	r7, [r6], #1
   1bb90:	42a6      	cmp	r6, r4
   1bb92:	f04f 0200 	mov.w	r2, #0
   1bb96:	e9cd 0100 	strd	r0, r1, [sp]
   1bb9a:	d125      	bne.n	1bbe8 <_dtoa_r+0x5f0>
   1bb9c:	4b1b      	ldr	r3, [pc, #108]	; (1bc0c <_dtoa_r+0x614>)
   1bb9e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   1bba2:	f7fc fc43 	bl	1842c <__adddf3>
   1bba6:	4602      	mov	r2, r0
   1bba8:	460b      	mov	r3, r1
   1bbaa:	e9dd 0100 	ldrd	r0, r1, [sp]
   1bbae:	f7fd f883 	bl	18cb8 <__aeabi_dcmpgt>
   1bbb2:	2800      	cmp	r0, #0
   1bbb4:	d172      	bne.n	1bc9c <_dtoa_r+0x6a4>
   1bbb6:	2000      	movs	r0, #0
   1bbb8:	4914      	ldr	r1, [pc, #80]	; (1bc0c <_dtoa_r+0x614>)
   1bbba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   1bbbe:	f7fc fc33 	bl	18428 <__aeabi_dsub>
   1bbc2:	4602      	mov	r2, r0
   1bbc4:	460b      	mov	r3, r1
   1bbc6:	e9dd 0100 	ldrd	r0, r1, [sp]
   1bbca:	f7fd f857 	bl	18c7c <__aeabi_dcmplt>
   1bbce:	2800      	cmp	r0, #0
   1bbd0:	f43f af31 	beq.w	1ba36 <_dtoa_r+0x43e>
   1bbd4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1bbd8:	1e6a      	subs	r2, r5, #1
   1bbda:	2b30      	cmp	r3, #48	; 0x30
   1bbdc:	d002      	beq.n	1bbe4 <_dtoa_r+0x5ec>
   1bbde:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   1bbe2:	e049      	b.n	1bc78 <_dtoa_r+0x680>
   1bbe4:	4615      	mov	r5, r2
   1bbe6:	e7f5      	b.n	1bbd4 <_dtoa_r+0x5dc>
   1bbe8:	4b05      	ldr	r3, [pc, #20]	; (1bc00 <_dtoa_r+0x608>)
   1bbea:	f7fc fdd5 	bl	18798 <__aeabi_dmul>
   1bbee:	e9cd 0100 	strd	r0, r1, [sp]
   1bbf2:	e7bd      	b.n	1bb70 <_dtoa_r+0x578>
   1bbf4:	00043150 	.word	0x00043150
   1bbf8:	00043128 	.word	0x00043128
   1bbfc:	3ff00000 	.word	0x3ff00000
   1bc00:	40240000 	.word	0x40240000
   1bc04:	401c0000 	.word	0x401c0000
   1bc08:	40140000 	.word	0x40140000
   1bc0c:	3fe00000 	.word	0x3fe00000
   1bc10:	e9dd 6700 	ldrd	r6, r7, [sp]
   1bc14:	9d03      	ldr	r5, [sp, #12]
   1bc16:	4630      	mov	r0, r6
   1bc18:	4639      	mov	r1, r7
   1bc1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1bc1e:	f7fc fee5 	bl	189ec <__aeabi_ddiv>
   1bc22:	f7fd f853 	bl	18ccc <__aeabi_d2iz>
   1bc26:	4604      	mov	r4, r0
   1bc28:	f7fc fd4c 	bl	186c4 <__aeabi_i2d>
   1bc2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1bc30:	f7fc fdb2 	bl	18798 <__aeabi_dmul>
   1bc34:	4602      	mov	r2, r0
   1bc36:	4630      	mov	r0, r6
   1bc38:	f104 0630 	add.w	r6, r4, #48	; 0x30
   1bc3c:	460b      	mov	r3, r1
   1bc3e:	4639      	mov	r1, r7
   1bc40:	f7fc fbf2 	bl	18428 <__aeabi_dsub>
   1bc44:	f805 6b01 	strb.w	r6, [r5], #1
   1bc48:	9e03      	ldr	r6, [sp, #12]
   1bc4a:	4602      	mov	r2, r0
   1bc4c:	460b      	mov	r3, r1
   1bc4e:	1bae      	subs	r6, r5, r6
   1bc50:	45b1      	cmp	r9, r6
   1bc52:	d137      	bne.n	1bcc4 <_dtoa_r+0x6cc>
   1bc54:	f7fc fbea 	bl	1842c <__adddf3>
   1bc58:	4606      	mov	r6, r0
   1bc5a:	460f      	mov	r7, r1
   1bc5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1bc60:	f7fd f82a 	bl	18cb8 <__aeabi_dcmpgt>
   1bc64:	b9c0      	cbnz	r0, 1bc98 <_dtoa_r+0x6a0>
   1bc66:	4630      	mov	r0, r6
   1bc68:	4639      	mov	r1, r7
   1bc6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1bc6e:	f7fc fffb 	bl	18c68 <__aeabi_dcmpeq>
   1bc72:	b108      	cbz	r0, 1bc78 <_dtoa_r+0x680>
   1bc74:	07e1      	lsls	r1, r4, #31
   1bc76:	d40f      	bmi.n	1bc98 <_dtoa_r+0x6a0>
   1bc78:	4641      	mov	r1, r8
   1bc7a:	4658      	mov	r0, fp
   1bc7c:	f026 fb7b 	bl	42376 <_Bfree>
   1bc80:	2300      	movs	r3, #0
   1bc82:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1bc84:	702b      	strb	r3, [r5, #0]
   1bc86:	f10a 0301 	add.w	r3, sl, #1
   1bc8a:	6013      	str	r3, [r2, #0]
   1bc8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1bc8e:	2b00      	cmp	r3, #0
   1bc90:	f43f acfb 	beq.w	1b68a <_dtoa_r+0x92>
   1bc94:	601d      	str	r5, [r3, #0]
   1bc96:	e4f8      	b.n	1b68a <_dtoa_r+0x92>
   1bc98:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   1bc9c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   1bca0:	1e6b      	subs	r3, r5, #1
   1bca2:	2a39      	cmp	r2, #57	; 0x39
   1bca4:	d108      	bne.n	1bcb8 <_dtoa_r+0x6c0>
   1bca6:	9a03      	ldr	r2, [sp, #12]
   1bca8:	429a      	cmp	r2, r3
   1bcaa:	d109      	bne.n	1bcc0 <_dtoa_r+0x6c8>
   1bcac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1bcae:	9903      	ldr	r1, [sp, #12]
   1bcb0:	3201      	adds	r2, #1
   1bcb2:	920a      	str	r2, [sp, #40]	; 0x28
   1bcb4:	2230      	movs	r2, #48	; 0x30
   1bcb6:	700a      	strb	r2, [r1, #0]
   1bcb8:	781a      	ldrb	r2, [r3, #0]
   1bcba:	3201      	adds	r2, #1
   1bcbc:	701a      	strb	r2, [r3, #0]
   1bcbe:	e78e      	b.n	1bbde <_dtoa_r+0x5e6>
   1bcc0:	461d      	mov	r5, r3
   1bcc2:	e7eb      	b.n	1bc9c <_dtoa_r+0x6a4>
   1bcc4:	2200      	movs	r2, #0
   1bcc6:	4b9d      	ldr	r3, [pc, #628]	; (1bf3c <_dtoa_r+0x944>)
   1bcc8:	f7fc fd66 	bl	18798 <__aeabi_dmul>
   1bccc:	2200      	movs	r2, #0
   1bcce:	2300      	movs	r3, #0
   1bcd0:	4606      	mov	r6, r0
   1bcd2:	460f      	mov	r7, r1
   1bcd4:	f7fc ffc8 	bl	18c68 <__aeabi_dcmpeq>
   1bcd8:	2800      	cmp	r0, #0
   1bcda:	d09c      	beq.n	1bc16 <_dtoa_r+0x61e>
   1bcdc:	e7cc      	b.n	1bc78 <_dtoa_r+0x680>
   1bcde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1bce0:	2a00      	cmp	r2, #0
   1bce2:	f000 80cb 	beq.w	1be7c <_dtoa_r+0x884>
   1bce6:	9a08      	ldr	r2, [sp, #32]
   1bce8:	2a01      	cmp	r2, #1
   1bcea:	f300 80ae 	bgt.w	1be4a <_dtoa_r+0x852>
   1bcee:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1bcf0:	2a00      	cmp	r2, #0
   1bcf2:	f000 80a6 	beq.w	1be42 <_dtoa_r+0x84a>
   1bcf6:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1bcfa:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1bcfc:	9d06      	ldr	r5, [sp, #24]
   1bcfe:	9a06      	ldr	r2, [sp, #24]
   1bd00:	2101      	movs	r1, #1
   1bd02:	4658      	mov	r0, fp
   1bd04:	441a      	add	r2, r3
   1bd06:	9206      	str	r2, [sp, #24]
   1bd08:	9a07      	ldr	r2, [sp, #28]
   1bd0a:	441a      	add	r2, r3
   1bd0c:	9207      	str	r2, [sp, #28]
   1bd0e:	f026 fc14 	bl	4253a <__i2b>
   1bd12:	4606      	mov	r6, r0
   1bd14:	2d00      	cmp	r5, #0
   1bd16:	dd0c      	ble.n	1bd32 <_dtoa_r+0x73a>
   1bd18:	9b07      	ldr	r3, [sp, #28]
   1bd1a:	2b00      	cmp	r3, #0
   1bd1c:	dd09      	ble.n	1bd32 <_dtoa_r+0x73a>
   1bd1e:	42ab      	cmp	r3, r5
   1bd20:	9a06      	ldr	r2, [sp, #24]
   1bd22:	bfa8      	it	ge
   1bd24:	462b      	movge	r3, r5
   1bd26:	1ad2      	subs	r2, r2, r3
   1bd28:	1aed      	subs	r5, r5, r3
   1bd2a:	9206      	str	r2, [sp, #24]
   1bd2c:	9a07      	ldr	r2, [sp, #28]
   1bd2e:	1ad3      	subs	r3, r2, r3
   1bd30:	9307      	str	r3, [sp, #28]
   1bd32:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bd34:	b1f3      	cbz	r3, 1bd74 <_dtoa_r+0x77c>
   1bd36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1bd38:	2b00      	cmp	r3, #0
   1bd3a:	f000 80a3 	beq.w	1be84 <_dtoa_r+0x88c>
   1bd3e:	2c00      	cmp	r4, #0
   1bd40:	dd10      	ble.n	1bd64 <_dtoa_r+0x76c>
   1bd42:	4631      	mov	r1, r6
   1bd44:	4622      	mov	r2, r4
   1bd46:	4658      	mov	r0, fp
   1bd48:	f022 fa74 	bl	3e234 <__pow5mult>
   1bd4c:	4642      	mov	r2, r8
   1bd4e:	4601      	mov	r1, r0
   1bd50:	4606      	mov	r6, r0
   1bd52:	4658      	mov	r0, fp
   1bd54:	f026 fbfa 	bl	4254c <__multiply>
   1bd58:	4607      	mov	r7, r0
   1bd5a:	4641      	mov	r1, r8
   1bd5c:	4658      	mov	r0, fp
   1bd5e:	46b8      	mov	r8, r7
   1bd60:	f026 fb09 	bl	42376 <_Bfree>
   1bd64:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bd66:	1b1a      	subs	r2, r3, r4
   1bd68:	d004      	beq.n	1bd74 <_dtoa_r+0x77c>
   1bd6a:	4641      	mov	r1, r8
   1bd6c:	4658      	mov	r0, fp
   1bd6e:	f022 fa61 	bl	3e234 <__pow5mult>
   1bd72:	4680      	mov	r8, r0
   1bd74:	2101      	movs	r1, #1
   1bd76:	4658      	mov	r0, fp
   1bd78:	f026 fbdf 	bl	4253a <__i2b>
   1bd7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1bd7e:	4604      	mov	r4, r0
   1bd80:	2b00      	cmp	r3, #0
   1bd82:	f340 8081 	ble.w	1be88 <_dtoa_r+0x890>
   1bd86:	461a      	mov	r2, r3
   1bd88:	4601      	mov	r1, r0
   1bd8a:	4658      	mov	r0, fp
   1bd8c:	f022 fa52 	bl	3e234 <__pow5mult>
   1bd90:	9b08      	ldr	r3, [sp, #32]
   1bd92:	4604      	mov	r4, r0
   1bd94:	2b01      	cmp	r3, #1
   1bd96:	dd7a      	ble.n	1be8e <_dtoa_r+0x896>
   1bd98:	2700      	movs	r7, #0
   1bd9a:	6923      	ldr	r3, [r4, #16]
   1bd9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1bda0:	6918      	ldr	r0, [r3, #16]
   1bda2:	f026 fb7a 	bl	4249a <__hi0bits>
   1bda6:	f1c0 0020 	rsb	r0, r0, #32
   1bdaa:	9b07      	ldr	r3, [sp, #28]
   1bdac:	4418      	add	r0, r3
   1bdae:	f010 001f 	ands.w	r0, r0, #31
   1bdb2:	f000 808b 	beq.w	1becc <_dtoa_r+0x8d4>
   1bdb6:	f1c0 0320 	rsb	r3, r0, #32
   1bdba:	2b04      	cmp	r3, #4
   1bdbc:	f340 8084 	ble.w	1bec8 <_dtoa_r+0x8d0>
   1bdc0:	f1c0 001c 	rsb	r0, r0, #28
   1bdc4:	9b06      	ldr	r3, [sp, #24]
   1bdc6:	4405      	add	r5, r0
   1bdc8:	4403      	add	r3, r0
   1bdca:	9306      	str	r3, [sp, #24]
   1bdcc:	9b07      	ldr	r3, [sp, #28]
   1bdce:	4403      	add	r3, r0
   1bdd0:	9307      	str	r3, [sp, #28]
   1bdd2:	9b06      	ldr	r3, [sp, #24]
   1bdd4:	2b00      	cmp	r3, #0
   1bdd6:	dd05      	ble.n	1bde4 <_dtoa_r+0x7ec>
   1bdd8:	4641      	mov	r1, r8
   1bdda:	461a      	mov	r2, r3
   1bddc:	4658      	mov	r0, fp
   1bdde:	f026 fc44 	bl	4266a <__lshift>
   1bde2:	4680      	mov	r8, r0
   1bde4:	9b07      	ldr	r3, [sp, #28]
   1bde6:	2b00      	cmp	r3, #0
   1bde8:	dd05      	ble.n	1bdf6 <_dtoa_r+0x7fe>
   1bdea:	4621      	mov	r1, r4
   1bdec:	461a      	mov	r2, r3
   1bdee:	4658      	mov	r0, fp
   1bdf0:	f026 fc3b 	bl	4266a <__lshift>
   1bdf4:	4604      	mov	r4, r0
   1bdf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1bdf8:	2b00      	cmp	r3, #0
   1bdfa:	d069      	beq.n	1bed0 <_dtoa_r+0x8d8>
   1bdfc:	4621      	mov	r1, r4
   1bdfe:	4640      	mov	r0, r8
   1be00:	f026 fc86 	bl	42710 <__mcmp>
   1be04:	2800      	cmp	r0, #0
   1be06:	da63      	bge.n	1bed0 <_dtoa_r+0x8d8>
   1be08:	2300      	movs	r3, #0
   1be0a:	4641      	mov	r1, r8
   1be0c:	220a      	movs	r2, #10
   1be0e:	4658      	mov	r0, fp
   1be10:	f026 fac8 	bl	423a4 <__multadd>
   1be14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1be16:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1be1a:	4680      	mov	r8, r0
   1be1c:	2b00      	cmp	r3, #0
   1be1e:	f000 8179 	beq.w	1c114 <_dtoa_r+0xb1c>
   1be22:	2300      	movs	r3, #0
   1be24:	4631      	mov	r1, r6
   1be26:	220a      	movs	r2, #10
   1be28:	4658      	mov	r0, fp
   1be2a:	f026 fabb 	bl	423a4 <__multadd>
   1be2e:	9b04      	ldr	r3, [sp, #16]
   1be30:	4606      	mov	r6, r0
   1be32:	2b00      	cmp	r3, #0
   1be34:	f300 808a 	bgt.w	1bf4c <_dtoa_r+0x954>
   1be38:	9b08      	ldr	r3, [sp, #32]
   1be3a:	2b02      	cmp	r3, #2
   1be3c:	f340 8086 	ble.w	1bf4c <_dtoa_r+0x954>
   1be40:	e04e      	b.n	1bee0 <_dtoa_r+0x8e8>
   1be42:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1be44:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   1be48:	e757      	b.n	1bcfa <_dtoa_r+0x702>
   1be4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1be4c:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
   1be50:	42a3      	cmp	r3, r4
   1be52:	bfb7      	itett	lt
   1be54:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
   1be56:	1b1c      	subge	r4, r3, r4
   1be58:	9409      	strlt	r4, [sp, #36]	; 0x24
   1be5a:	1ae2      	sublt	r2, r4, r3
   1be5c:	bfbf      	itttt	lt
   1be5e:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   1be60:	2400      	movlt	r4, #0
   1be62:	189b      	addlt	r3, r3, r2
   1be64:	9310      	strlt	r3, [sp, #64]	; 0x40
   1be66:	f1b9 0f00 	cmp.w	r9, #0
   1be6a:	bfb3      	iteet	lt
   1be6c:	9b06      	ldrlt	r3, [sp, #24]
   1be6e:	464b      	movge	r3, r9
   1be70:	9d06      	ldrge	r5, [sp, #24]
   1be72:	eba3 0509 	sublt.w	r5, r3, r9
   1be76:	bfb8      	it	lt
   1be78:	2300      	movlt	r3, #0
   1be7a:	e740      	b.n	1bcfe <_dtoa_r+0x706>
   1be7c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1be7e:	9d06      	ldr	r5, [sp, #24]
   1be80:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1be82:	e747      	b.n	1bd14 <_dtoa_r+0x71c>
   1be84:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1be86:	e770      	b.n	1bd6a <_dtoa_r+0x772>
   1be88:	9b08      	ldr	r3, [sp, #32]
   1be8a:	2b01      	cmp	r3, #1
   1be8c:	dc18      	bgt.n	1bec0 <_dtoa_r+0x8c8>
   1be8e:	9b00      	ldr	r3, [sp, #0]
   1be90:	b9b3      	cbnz	r3, 1bec0 <_dtoa_r+0x8c8>
   1be92:	9b01      	ldr	r3, [sp, #4]
   1be94:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1be98:	b9a3      	cbnz	r3, 1bec4 <_dtoa_r+0x8cc>
   1be9a:	9b01      	ldr	r3, [sp, #4]
   1be9c:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   1bea0:	0d3f      	lsrs	r7, r7, #20
   1bea2:	053f      	lsls	r7, r7, #20
   1bea4:	b137      	cbz	r7, 1beb4 <_dtoa_r+0x8bc>
   1bea6:	9b06      	ldr	r3, [sp, #24]
   1bea8:	2701      	movs	r7, #1
   1beaa:	3301      	adds	r3, #1
   1beac:	9306      	str	r3, [sp, #24]
   1beae:	9b07      	ldr	r3, [sp, #28]
   1beb0:	3301      	adds	r3, #1
   1beb2:	9307      	str	r3, [sp, #28]
   1beb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1beb6:	2b00      	cmp	r3, #0
   1beb8:	f47f af6f 	bne.w	1bd9a <_dtoa_r+0x7a2>
   1bebc:	2001      	movs	r0, #1
   1bebe:	e774      	b.n	1bdaa <_dtoa_r+0x7b2>
   1bec0:	2700      	movs	r7, #0
   1bec2:	e7f7      	b.n	1beb4 <_dtoa_r+0x8bc>
   1bec4:	9f00      	ldr	r7, [sp, #0]
   1bec6:	e7f5      	b.n	1beb4 <_dtoa_r+0x8bc>
   1bec8:	d083      	beq.n	1bdd2 <_dtoa_r+0x7da>
   1beca:	4618      	mov	r0, r3
   1becc:	301c      	adds	r0, #28
   1bece:	e779      	b.n	1bdc4 <_dtoa_r+0x7cc>
   1bed0:	f1b9 0f00 	cmp.w	r9, #0
   1bed4:	dc34      	bgt.n	1bf40 <_dtoa_r+0x948>
   1bed6:	9b08      	ldr	r3, [sp, #32]
   1bed8:	2b02      	cmp	r3, #2
   1beda:	dd31      	ble.n	1bf40 <_dtoa_r+0x948>
   1bedc:	f8cd 9010 	str.w	r9, [sp, #16]
   1bee0:	9b04      	ldr	r3, [sp, #16]
   1bee2:	b963      	cbnz	r3, 1befe <_dtoa_r+0x906>
   1bee4:	4621      	mov	r1, r4
   1bee6:	2205      	movs	r2, #5
   1bee8:	4658      	mov	r0, fp
   1beea:	f026 fa5b 	bl	423a4 <__multadd>
   1beee:	4601      	mov	r1, r0
   1bef0:	4604      	mov	r4, r0
   1bef2:	4640      	mov	r0, r8
   1bef4:	f026 fc0c 	bl	42710 <__mcmp>
   1bef8:	2800      	cmp	r0, #0
   1befa:	f73f adc8 	bgt.w	1ba8e <_dtoa_r+0x496>
   1befe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1bf00:	9d03      	ldr	r5, [sp, #12]
   1bf02:	ea6f 0a03 	mvn.w	sl, r3
   1bf06:	2700      	movs	r7, #0
   1bf08:	4621      	mov	r1, r4
   1bf0a:	4658      	mov	r0, fp
   1bf0c:	f026 fa33 	bl	42376 <_Bfree>
   1bf10:	2e00      	cmp	r6, #0
   1bf12:	f43f aeb1 	beq.w	1bc78 <_dtoa_r+0x680>
   1bf16:	b12f      	cbz	r7, 1bf24 <_dtoa_r+0x92c>
   1bf18:	42b7      	cmp	r7, r6
   1bf1a:	d003      	beq.n	1bf24 <_dtoa_r+0x92c>
   1bf1c:	4639      	mov	r1, r7
   1bf1e:	4658      	mov	r0, fp
   1bf20:	f026 fa29 	bl	42376 <_Bfree>
   1bf24:	4631      	mov	r1, r6
   1bf26:	4658      	mov	r0, fp
   1bf28:	f026 fa25 	bl	42376 <_Bfree>
   1bf2c:	e6a4      	b.n	1bc78 <_dtoa_r+0x680>
   1bf2e:	2400      	movs	r4, #0
   1bf30:	4626      	mov	r6, r4
   1bf32:	e7e4      	b.n	1befe <_dtoa_r+0x906>
   1bf34:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   1bf38:	4626      	mov	r6, r4
   1bf3a:	e5a8      	b.n	1ba8e <_dtoa_r+0x496>
   1bf3c:	40240000 	.word	0x40240000
   1bf40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1bf42:	f8cd 9010 	str.w	r9, [sp, #16]
   1bf46:	2b00      	cmp	r3, #0
   1bf48:	f000 80eb 	beq.w	1c122 <_dtoa_r+0xb2a>
   1bf4c:	2d00      	cmp	r5, #0
   1bf4e:	dd05      	ble.n	1bf5c <_dtoa_r+0x964>
   1bf50:	4631      	mov	r1, r6
   1bf52:	462a      	mov	r2, r5
   1bf54:	4658      	mov	r0, fp
   1bf56:	f026 fb88 	bl	4266a <__lshift>
   1bf5a:	4606      	mov	r6, r0
   1bf5c:	2f00      	cmp	r7, #0
   1bf5e:	d056      	beq.n	1c00e <_dtoa_r+0xa16>
   1bf60:	6871      	ldr	r1, [r6, #4]
   1bf62:	4658      	mov	r0, fp
   1bf64:	f026 f9d3 	bl	4230e <_Balloc>
   1bf68:	6932      	ldr	r2, [r6, #16]
   1bf6a:	4605      	mov	r5, r0
   1bf6c:	f106 010c 	add.w	r1, r6, #12
   1bf70:	3202      	adds	r2, #2
   1bf72:	300c      	adds	r0, #12
   1bf74:	0092      	lsls	r2, r2, #2
   1bf76:	f025 fd1c 	bl	419b2 <memcpy>
   1bf7a:	2201      	movs	r2, #1
   1bf7c:	4629      	mov	r1, r5
   1bf7e:	4658      	mov	r0, fp
   1bf80:	f026 fb73 	bl	4266a <__lshift>
   1bf84:	9b03      	ldr	r3, [sp, #12]
   1bf86:	4637      	mov	r7, r6
   1bf88:	4606      	mov	r6, r0
   1bf8a:	f103 0901 	add.w	r9, r3, #1
   1bf8e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   1bf92:	4413      	add	r3, r2
   1bf94:	9309      	str	r3, [sp, #36]	; 0x24
   1bf96:	9b00      	ldr	r3, [sp, #0]
   1bf98:	f003 0301 	and.w	r3, r3, #1
   1bf9c:	9307      	str	r3, [sp, #28]
   1bf9e:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   1bfa2:	4621      	mov	r1, r4
   1bfa4:	4640      	mov	r0, r8
   1bfa6:	9300      	str	r3, [sp, #0]
   1bfa8:	f025 ff97 	bl	41eda <quorem>
   1bfac:	4603      	mov	r3, r0
   1bfae:	9004      	str	r0, [sp, #16]
   1bfb0:	4639      	mov	r1, r7
   1bfb2:	4640      	mov	r0, r8
   1bfb4:	3330      	adds	r3, #48	; 0x30
   1bfb6:	930a      	str	r3, [sp, #40]	; 0x28
   1bfb8:	f026 fbaa 	bl	42710 <__mcmp>
   1bfbc:	4632      	mov	r2, r6
   1bfbe:	9006      	str	r0, [sp, #24]
   1bfc0:	4621      	mov	r1, r4
   1bfc2:	4658      	mov	r0, fp
   1bfc4:	f026 fbbe 	bl	42744 <__mdiff>
   1bfc8:	68c2      	ldr	r2, [r0, #12]
   1bfca:	4605      	mov	r5, r0
   1bfcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bfce:	bb02      	cbnz	r2, 1c012 <_dtoa_r+0xa1a>
   1bfd0:	4601      	mov	r1, r0
   1bfd2:	4640      	mov	r0, r8
   1bfd4:	f026 fb9c 	bl	42710 <__mcmp>
   1bfd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bfda:	4602      	mov	r2, r0
   1bfdc:	4629      	mov	r1, r5
   1bfde:	4658      	mov	r0, fp
   1bfe0:	920c      	str	r2, [sp, #48]	; 0x30
   1bfe2:	464d      	mov	r5, r9
   1bfe4:	930a      	str	r3, [sp, #40]	; 0x28
   1bfe6:	f026 f9c6 	bl	42376 <_Bfree>
   1bfea:	9b08      	ldr	r3, [sp, #32]
   1bfec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1bfee:	ea43 0102 	orr.w	r1, r3, r2
   1bff2:	9b07      	ldr	r3, [sp, #28]
   1bff4:	430b      	orrs	r3, r1
   1bff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bff8:	d10d      	bne.n	1c016 <_dtoa_r+0xa1e>
   1bffa:	2b39      	cmp	r3, #57	; 0x39
   1bffc:	d027      	beq.n	1c04e <_dtoa_r+0xa56>
   1bffe:	9a06      	ldr	r2, [sp, #24]
   1c000:	2a00      	cmp	r2, #0
   1c002:	dd01      	ble.n	1c008 <_dtoa_r+0xa10>
   1c004:	9b04      	ldr	r3, [sp, #16]
   1c006:	3331      	adds	r3, #49	; 0x31
   1c008:	9a00      	ldr	r2, [sp, #0]
   1c00a:	7013      	strb	r3, [r2, #0]
   1c00c:	e77c      	b.n	1bf08 <_dtoa_r+0x910>
   1c00e:	4630      	mov	r0, r6
   1c010:	e7b8      	b.n	1bf84 <_dtoa_r+0x98c>
   1c012:	2201      	movs	r2, #1
   1c014:	e7e2      	b.n	1bfdc <_dtoa_r+0x9e4>
   1c016:	9906      	ldr	r1, [sp, #24]
   1c018:	2900      	cmp	r1, #0
   1c01a:	db04      	blt.n	1c026 <_dtoa_r+0xa2e>
   1c01c:	9808      	ldr	r0, [sp, #32]
   1c01e:	4301      	orrs	r1, r0
   1c020:	9807      	ldr	r0, [sp, #28]
   1c022:	4301      	orrs	r1, r0
   1c024:	d11d      	bne.n	1c062 <_dtoa_r+0xa6a>
   1c026:	2a00      	cmp	r2, #0
   1c028:	ddee      	ble.n	1c008 <_dtoa_r+0xa10>
   1c02a:	4641      	mov	r1, r8
   1c02c:	2201      	movs	r2, #1
   1c02e:	4658      	mov	r0, fp
   1c030:	9306      	str	r3, [sp, #24]
   1c032:	f026 fb1a 	bl	4266a <__lshift>
   1c036:	4621      	mov	r1, r4
   1c038:	4680      	mov	r8, r0
   1c03a:	f026 fb69 	bl	42710 <__mcmp>
   1c03e:	2800      	cmp	r0, #0
   1c040:	9b06      	ldr	r3, [sp, #24]
   1c042:	dc02      	bgt.n	1c04a <_dtoa_r+0xa52>
   1c044:	d1e0      	bne.n	1c008 <_dtoa_r+0xa10>
   1c046:	07da      	lsls	r2, r3, #31
   1c048:	d5de      	bpl.n	1c008 <_dtoa_r+0xa10>
   1c04a:	2b39      	cmp	r3, #57	; 0x39
   1c04c:	d1da      	bne.n	1c004 <_dtoa_r+0xa0c>
   1c04e:	2339      	movs	r3, #57	; 0x39
   1c050:	9a00      	ldr	r2, [sp, #0]
   1c052:	7013      	strb	r3, [r2, #0]
   1c054:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1c058:	1e6a      	subs	r2, r5, #1
   1c05a:	2b39      	cmp	r3, #57	; 0x39
   1c05c:	d046      	beq.n	1c0ec <_dtoa_r+0xaf4>
   1c05e:	3301      	adds	r3, #1
   1c060:	e7d3      	b.n	1c00a <_dtoa_r+0xa12>
   1c062:	2a00      	cmp	r2, #0
   1c064:	dd03      	ble.n	1c06e <_dtoa_r+0xa76>
   1c066:	2b39      	cmp	r3, #57	; 0x39
   1c068:	d0f1      	beq.n	1c04e <_dtoa_r+0xa56>
   1c06a:	3301      	adds	r3, #1
   1c06c:	e7cc      	b.n	1c008 <_dtoa_r+0xa10>
   1c06e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c070:	f809 3c01 	strb.w	r3, [r9, #-1]
   1c074:	4591      	cmp	r9, r2
   1c076:	d021      	beq.n	1c0bc <_dtoa_r+0xac4>
   1c078:	4641      	mov	r1, r8
   1c07a:	2300      	movs	r3, #0
   1c07c:	220a      	movs	r2, #10
   1c07e:	4658      	mov	r0, fp
   1c080:	f026 f990 	bl	423a4 <__multadd>
   1c084:	42b7      	cmp	r7, r6
   1c086:	4680      	mov	r8, r0
   1c088:	f04f 0300 	mov.w	r3, #0
   1c08c:	f04f 020a 	mov.w	r2, #10
   1c090:	4639      	mov	r1, r7
   1c092:	4658      	mov	r0, fp
   1c094:	d106      	bne.n	1c0a4 <_dtoa_r+0xaac>
   1c096:	f026 f985 	bl	423a4 <__multadd>
   1c09a:	4607      	mov	r7, r0
   1c09c:	4606      	mov	r6, r0
   1c09e:	f109 0901 	add.w	r9, r9, #1
   1c0a2:	e77c      	b.n	1bf9e <_dtoa_r+0x9a6>
   1c0a4:	f026 f97e 	bl	423a4 <__multadd>
   1c0a8:	4631      	mov	r1, r6
   1c0aa:	4607      	mov	r7, r0
   1c0ac:	2300      	movs	r3, #0
   1c0ae:	220a      	movs	r2, #10
   1c0b0:	4658      	mov	r0, fp
   1c0b2:	f026 f977 	bl	423a4 <__multadd>
   1c0b6:	4606      	mov	r6, r0
   1c0b8:	e7f1      	b.n	1c09e <_dtoa_r+0xaa6>
   1c0ba:	2700      	movs	r7, #0
   1c0bc:	4641      	mov	r1, r8
   1c0be:	2201      	movs	r2, #1
   1c0c0:	4658      	mov	r0, fp
   1c0c2:	9300      	str	r3, [sp, #0]
   1c0c4:	f026 fad1 	bl	4266a <__lshift>
   1c0c8:	4621      	mov	r1, r4
   1c0ca:	4680      	mov	r8, r0
   1c0cc:	f026 fb20 	bl	42710 <__mcmp>
   1c0d0:	2800      	cmp	r0, #0
   1c0d2:	dcbf      	bgt.n	1c054 <_dtoa_r+0xa5c>
   1c0d4:	d102      	bne.n	1c0dc <_dtoa_r+0xae4>
   1c0d6:	9b00      	ldr	r3, [sp, #0]
   1c0d8:	07db      	lsls	r3, r3, #31
   1c0da:	d4bb      	bmi.n	1c054 <_dtoa_r+0xa5c>
   1c0dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1c0e0:	1e6a      	subs	r2, r5, #1
   1c0e2:	2b30      	cmp	r3, #48	; 0x30
   1c0e4:	f47f af10 	bne.w	1bf08 <_dtoa_r+0x910>
   1c0e8:	4615      	mov	r5, r2
   1c0ea:	e7f7      	b.n	1c0dc <_dtoa_r+0xae4>
   1c0ec:	9b03      	ldr	r3, [sp, #12]
   1c0ee:	4293      	cmp	r3, r2
   1c0f0:	d104      	bne.n	1c0fc <_dtoa_r+0xb04>
   1c0f2:	f10a 0a01 	add.w	sl, sl, #1
   1c0f6:	2331      	movs	r3, #49	; 0x31
   1c0f8:	9a03      	ldr	r2, [sp, #12]
   1c0fa:	e786      	b.n	1c00a <_dtoa_r+0xa12>
   1c0fc:	4615      	mov	r5, r2
   1c0fe:	e7a9      	b.n	1c054 <_dtoa_r+0xa5c>
   1c100:	4b13      	ldr	r3, [pc, #76]	; (1c150 <_dtoa_r+0xb58>)
   1c102:	f7ff bae1 	b.w	1b6c8 <_dtoa_r+0xd0>
   1c106:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1c108:	2b00      	cmp	r3, #0
   1c10a:	f47f aab9 	bne.w	1b680 <_dtoa_r+0x88>
   1c10e:	4b11      	ldr	r3, [pc, #68]	; (1c154 <_dtoa_r+0xb5c>)
   1c110:	f7ff bada 	b.w	1b6c8 <_dtoa_r+0xd0>
   1c114:	9b04      	ldr	r3, [sp, #16]
   1c116:	2b00      	cmp	r3, #0
   1c118:	dc03      	bgt.n	1c122 <_dtoa_r+0xb2a>
   1c11a:	9b08      	ldr	r3, [sp, #32]
   1c11c:	2b02      	cmp	r3, #2
   1c11e:	f73f aedf 	bgt.w	1bee0 <_dtoa_r+0x8e8>
   1c122:	9d03      	ldr	r5, [sp, #12]
   1c124:	4621      	mov	r1, r4
   1c126:	4640      	mov	r0, r8
   1c128:	f025 fed7 	bl	41eda <quorem>
   1c12c:	9a03      	ldr	r2, [sp, #12]
   1c12e:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1c132:	9904      	ldr	r1, [sp, #16]
   1c134:	f805 3b01 	strb.w	r3, [r5], #1
   1c138:	1aaa      	subs	r2, r5, r2
   1c13a:	4291      	cmp	r1, r2
   1c13c:	ddbd      	ble.n	1c0ba <_dtoa_r+0xac2>
   1c13e:	4641      	mov	r1, r8
   1c140:	2300      	movs	r3, #0
   1c142:	220a      	movs	r2, #10
   1c144:	4658      	mov	r0, fp
   1c146:	f026 f92d 	bl	423a4 <__multadd>
   1c14a:	4680      	mov	r8, r0
   1c14c:	e7ea      	b.n	1c124 <_dtoa_r+0xb2c>
   1c14e:	bf00      	nop
   1c150:	0004a2c3 	.word	0x0004a2c3
   1c154:	0004a8ea 	.word	0x0004a8ea

0001c158 <nan>:
   1c158:	ed9f 0b01 	vldr	d0, [pc, #4]	; 1c160 <nan+0x8>
   1c15c:	4770      	bx	lr
   1c15e:	bf00      	nop
   1c160:	00000000 	.word	0x00000000
   1c164:	7ff80000 	.word	0x7ff80000

0001c168 <sin>:
   1c168:	ec51 0b10 	vmov	r0, r1, d0
   1c16c:	4a2c      	ldr	r2, [pc, #176]	; (1c220 <sin+0xb8>)
   1c16e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1c172:	4293      	cmp	r3, r2
   1c174:	b500      	push	{lr}
   1c176:	b085      	sub	sp, #20
   1c178:	dd27      	ble.n	1c1ca <sin+0x62>
   1c17a:	4a2a      	ldr	r2, [pc, #168]	; (1c224 <sin+0xbc>)
   1c17c:	4293      	cmp	r3, r2
   1c17e:	dd09      	ble.n	1c194 <sin+0x2c>
   1c180:	ee10 2a10 	vmov	r2, s0
   1c184:	460b      	mov	r3, r1
   1c186:	f7fc f94f 	bl	18428 <__aeabi_dsub>
   1c18a:	ec41 0b10 	vmov	d0, r0, r1
   1c18e:	b005      	add	sp, #20
   1c190:	f85d fb04 	ldr.w	pc, [sp], #4
   1c194:	4668      	mov	r0, sp
   1c196:	f000 f847 	bl	1c228 <__ieee754_rem_pio2>
   1c19a:	f000 0003 	and.w	r0, r0, #3
   1c19e:	2801      	cmp	r0, #1
   1c1a0:	d01f      	beq.n	1c1e2 <sin+0x7a>
   1c1a2:	2802      	cmp	r0, #2
   1c1a4:	d030      	beq.n	1c208 <sin+0xa0>
   1c1a6:	b328      	cbz	r0, 1c1f4 <sin+0x8c>
   1c1a8:	ed9d 1b02 	vldr	d1, [sp, #8]
   1c1ac:	ed9d 0b00 	vldr	d0, [sp]
   1c1b0:	f000 fa56 	bl	1c660 <__kernel_cos>
   1c1b4:	ee10 0a10 	vmov	r0, s0
   1c1b8:	ec53 2b10 	vmov	r2, r3, d0
   1c1bc:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   1c1c0:	ec41 0b10 	vmov	d0, r0, r1
   1c1c4:	b005      	add	sp, #20
   1c1c6:	f85d fb04 	ldr.w	pc, [sp], #4
   1c1ca:	2000      	movs	r0, #0
   1c1cc:	ed9f 1b12 	vldr	d1, [pc, #72]	; 1c218 <sin+0xb0>
   1c1d0:	f000 ff9e 	bl	1d110 <__kernel_sin>
   1c1d4:	ec51 0b10 	vmov	r0, r1, d0
   1c1d8:	ec41 0b10 	vmov	d0, r0, r1
   1c1dc:	b005      	add	sp, #20
   1c1de:	f85d fb04 	ldr.w	pc, [sp], #4
   1c1e2:	ed9d 1b02 	vldr	d1, [sp, #8]
   1c1e6:	ed9d 0b00 	vldr	d0, [sp]
   1c1ea:	f000 fa39 	bl	1c660 <__kernel_cos>
   1c1ee:	ec51 0b10 	vmov	r0, r1, d0
   1c1f2:	e7ca      	b.n	1c18a <sin+0x22>
   1c1f4:	2001      	movs	r0, #1
   1c1f6:	ed9d 1b02 	vldr	d1, [sp, #8]
   1c1fa:	ed9d 0b00 	vldr	d0, [sp]
   1c1fe:	f000 ff87 	bl	1d110 <__kernel_sin>
   1c202:	ec51 0b10 	vmov	r0, r1, d0
   1c206:	e7c0      	b.n	1c18a <sin+0x22>
   1c208:	2001      	movs	r0, #1
   1c20a:	ed9d 1b02 	vldr	d1, [sp, #8]
   1c20e:	ed9d 0b00 	vldr	d0, [sp]
   1c212:	f000 ff7d 	bl	1d110 <__kernel_sin>
   1c216:	e7cd      	b.n	1c1b4 <sin+0x4c>
	...
   1c220:	3fe921fb 	.word	0x3fe921fb
   1c224:	7fefffff 	.word	0x7fefffff

0001c228 <__ieee754_rem_pio2>:
   1c228:	ec53 2b10 	vmov	r2, r3, d0
   1c22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c230:	4999      	ldr	r1, [pc, #612]	; (1c498 <__ieee754_rem_pio2+0x270>)
   1c232:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   1c236:	b08f      	sub	sp, #60	; 0x3c
   1c238:	428d      	cmp	r5, r1
   1c23a:	f340 8088 	ble.w	1c34e <__ieee754_rem_pio2+0x126>
   1c23e:	4997      	ldr	r1, [pc, #604]	; (1c49c <__ieee754_rem_pio2+0x274>)
   1c240:	461e      	mov	r6, r3
   1c242:	4604      	mov	r4, r0
   1c244:	428d      	cmp	r5, r1
   1c246:	dc29      	bgt.n	1c29c <__ieee754_rem_pio2+0x74>
   1c248:	2e00      	cmp	r6, #0
   1c24a:	4619      	mov	r1, r3
   1c24c:	ee10 0a10 	vmov	r0, s0
   1c250:	a387      	add	r3, pc, #540	; (adr r3, 1c470 <__ieee754_rem_pio2+0x248>)
   1c252:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c256:	f340 81ae 	ble.w	1c5b6 <__ieee754_rem_pio2+0x38e>
   1c25a:	f7fc f8e5 	bl	18428 <__aeabi_dsub>
   1c25e:	4b90      	ldr	r3, [pc, #576]	; (1c4a0 <__ieee754_rem_pio2+0x278>)
   1c260:	4680      	mov	r8, r0
   1c262:	4689      	mov	r9, r1
   1c264:	429d      	cmp	r5, r3
   1c266:	f000 8088 	beq.w	1c37a <__ieee754_rem_pio2+0x152>
   1c26a:	2701      	movs	r7, #1
   1c26c:	a382      	add	r3, pc, #520	; (adr r3, 1c478 <__ieee754_rem_pio2+0x250>)
   1c26e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c272:	f7fc f8d9 	bl	18428 <__aeabi_dsub>
   1c276:	4602      	mov	r2, r0
   1c278:	460b      	mov	r3, r1
   1c27a:	4640      	mov	r0, r8
   1c27c:	4649      	mov	r1, r9
   1c27e:	e9c4 2300 	strd	r2, r3, [r4]
   1c282:	f7fc f8d1 	bl	18428 <__aeabi_dsub>
   1c286:	a37c      	add	r3, pc, #496	; (adr r3, 1c478 <__ieee754_rem_pio2+0x250>)
   1c288:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c28c:	f7fc f8cc 	bl	18428 <__aeabi_dsub>
   1c290:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1c294:	4638      	mov	r0, r7
   1c296:	b00f      	add	sp, #60	; 0x3c
   1c298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c29c:	4981      	ldr	r1, [pc, #516]	; (1c4a4 <__ieee754_rem_pio2+0x27c>)
   1c29e:	428d      	cmp	r5, r1
   1c2a0:	f340 808b 	ble.w	1c3ba <__ieee754_rem_pio2+0x192>
   1c2a4:	4980      	ldr	r1, [pc, #512]	; (1c4a8 <__ieee754_rem_pio2+0x280>)
   1c2a6:	428d      	cmp	r5, r1
   1c2a8:	dc5c      	bgt.n	1c364 <__ieee754_rem_pio2+0x13c>
   1c2aa:	152f      	asrs	r7, r5, #20
   1c2ac:	ee10 0a10 	vmov	r0, s0
   1c2b0:	ee10 8a10 	vmov	r8, s0
   1c2b4:	f2a7 4716 	subw	r7, r7, #1046	; 0x416
   1c2b8:	eba5 5907 	sub.w	r9, r5, r7, lsl #20
   1c2bc:	4649      	mov	r1, r9
   1c2be:	f7fc fd05 	bl	18ccc <__aeabi_d2iz>
   1c2c2:	f7fc f9ff 	bl	186c4 <__aeabi_i2d>
   1c2c6:	4682      	mov	sl, r0
   1c2c8:	468b      	mov	fp, r1
   1c2ca:	4640      	mov	r0, r8
   1c2cc:	4649      	mov	r1, r9
   1c2ce:	4652      	mov	r2, sl
   1c2d0:	465b      	mov	r3, fp
   1c2d2:	e9cd ab08 	strd	sl, fp, [sp, #32]
   1c2d6:	f7fc f8a7 	bl	18428 <__aeabi_dsub>
   1c2da:	2200      	movs	r2, #0
   1c2dc:	4b73      	ldr	r3, [pc, #460]	; (1c4ac <__ieee754_rem_pio2+0x284>)
   1c2de:	f7fc fa5b 	bl	18798 <__aeabi_dmul>
   1c2e2:	4689      	mov	r9, r1
   1c2e4:	4680      	mov	r8, r0
   1c2e6:	f7fc fcf1 	bl	18ccc <__aeabi_d2iz>
   1c2ea:	4605      	mov	r5, r0
   1c2ec:	f7fc f9ea 	bl	186c4 <__aeabi_i2d>
   1c2f0:	4602      	mov	r2, r0
   1c2f2:	460b      	mov	r3, r1
   1c2f4:	4640      	mov	r0, r8
   1c2f6:	4649      	mov	r1, r9
   1c2f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   1c2fc:	f7fc f894 	bl	18428 <__aeabi_dsub>
   1c300:	2200      	movs	r2, #0
   1c302:	4b6a      	ldr	r3, [pc, #424]	; (1c4ac <__ieee754_rem_pio2+0x284>)
   1c304:	f7fc fa48 	bl	18798 <__aeabi_dmul>
   1c308:	2200      	movs	r2, #0
   1c30a:	2300      	movs	r3, #0
   1c30c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1c310:	f7fc fcaa 	bl	18c68 <__aeabi_dcmpeq>
   1c314:	2800      	cmp	r0, #0
   1c316:	f000 814c 	beq.w	1c5b2 <__ieee754_rem_pio2+0x38a>
   1c31a:	2d00      	cmp	r5, #0
   1c31c:	bf0c      	ite	eq
   1c31e:	2301      	moveq	r3, #1
   1c320:	2302      	movne	r3, #2
   1c322:	4963      	ldr	r1, [pc, #396]	; (1c4b0 <__ieee754_rem_pio2+0x288>)
   1c324:	2002      	movs	r0, #2
   1c326:	463a      	mov	r2, r7
   1c328:	9101      	str	r1, [sp, #4]
   1c32a:	4621      	mov	r1, r4
   1c32c:	9000      	str	r0, [sp, #0]
   1c32e:	a808      	add	r0, sp, #32
   1c330:	f000 fada 	bl	1c8e8 <__kernel_rem_pio2>
   1c334:	2e00      	cmp	r6, #0
   1c336:	4607      	mov	r7, r0
   1c338:	daac      	bge.n	1c294 <__ieee754_rem_pio2+0x6c>
   1c33a:	6862      	ldr	r2, [r4, #4]
   1c33c:	4247      	negs	r7, r0
   1c33e:	68e3      	ldr	r3, [r4, #12]
   1c340:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   1c344:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1c348:	6062      	str	r2, [r4, #4]
   1c34a:	60e3      	str	r3, [r4, #12]
   1c34c:	e7a2      	b.n	1c294 <__ieee754_rem_pio2+0x6c>
   1c34e:	2700      	movs	r7, #0
   1c350:	2400      	movs	r4, #0
   1c352:	2500      	movs	r5, #0
   1c354:	ed80 0b00 	vstr	d0, [r0]
   1c358:	e9c0 4502 	strd	r4, r5, [r0, #8]
   1c35c:	4638      	mov	r0, r7
   1c35e:	b00f      	add	sp, #60	; 0x3c
   1c360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c364:	ee10 0a10 	vmov	r0, s0
   1c368:	4619      	mov	r1, r3
   1c36a:	f7fc f85d 	bl	18428 <__aeabi_dsub>
   1c36e:	2700      	movs	r7, #0
   1c370:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1c374:	e9c4 0100 	strd	r0, r1, [r4]
   1c378:	e78c      	b.n	1c294 <__ieee754_rem_pio2+0x6c>
   1c37a:	a341      	add	r3, pc, #260	; (adr r3, 1c480 <__ieee754_rem_pio2+0x258>)
   1c37c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c380:	f7fc f852 	bl	18428 <__aeabi_dsub>
   1c384:	4606      	mov	r6, r0
   1c386:	460f      	mov	r7, r1
   1c388:	a33f      	add	r3, pc, #252	; (adr r3, 1c488 <__ieee754_rem_pio2+0x260>)
   1c38a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c38e:	f7fc f84b 	bl	18428 <__aeabi_dsub>
   1c392:	4602      	mov	r2, r0
   1c394:	460b      	mov	r3, r1
   1c396:	4630      	mov	r0, r6
   1c398:	4639      	mov	r1, r7
   1c39a:	2701      	movs	r7, #1
   1c39c:	e9c4 2300 	strd	r2, r3, [r4]
   1c3a0:	f7fc f842 	bl	18428 <__aeabi_dsub>
   1c3a4:	a338      	add	r3, pc, #224	; (adr r3, 1c488 <__ieee754_rem_pio2+0x260>)
   1c3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c3aa:	f7fc f83d 	bl	18428 <__aeabi_dsub>
   1c3ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1c3b2:	4638      	mov	r0, r7
   1c3b4:	b00f      	add	sp, #60	; 0x3c
   1c3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c3ba:	f022 fbd7 	bl	3eb6c <fabs>
   1c3be:	ee10 0a10 	vmov	r0, s0
   1c3c2:	ec59 8b10 	vmov	r8, r9, d0
   1c3c6:	a332      	add	r3, pc, #200	; (adr r3, 1c490 <__ieee754_rem_pio2+0x268>)
   1c3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c3cc:	4649      	mov	r1, r9
   1c3ce:	f7fc f9e3 	bl	18798 <__aeabi_dmul>
   1c3d2:	2200      	movs	r2, #0
   1c3d4:	4b37      	ldr	r3, [pc, #220]	; (1c4b4 <__ieee754_rem_pio2+0x28c>)
   1c3d6:	f7fc f829 	bl	1842c <__adddf3>
   1c3da:	f7fc fc77 	bl	18ccc <__aeabi_d2iz>
   1c3de:	4607      	mov	r7, r0
   1c3e0:	f7fc f970 	bl	186c4 <__aeabi_i2d>
   1c3e4:	a322      	add	r3, pc, #136	; (adr r3, 1c470 <__ieee754_rem_pio2+0x248>)
   1c3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c3ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1c3ee:	f7fc f9d3 	bl	18798 <__aeabi_dmul>
   1c3f2:	4602      	mov	r2, r0
   1c3f4:	460b      	mov	r3, r1
   1c3f6:	4640      	mov	r0, r8
   1c3f8:	4649      	mov	r1, r9
   1c3fa:	f7fc f815 	bl	18428 <__aeabi_dsub>
   1c3fe:	4682      	mov	sl, r0
   1c400:	468b      	mov	fp, r1
   1c402:	a31d      	add	r3, pc, #116	; (adr r3, 1c478 <__ieee754_rem_pio2+0x250>)
   1c404:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c408:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1c40c:	f7fc f9c4 	bl	18798 <__aeabi_dmul>
   1c410:	2f1f      	cmp	r7, #31
   1c412:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1c416:	dc51      	bgt.n	1c4bc <__ieee754_rem_pio2+0x294>
   1c418:	4602      	mov	r2, r0
   1c41a:	460b      	mov	r3, r1
   1c41c:	4650      	mov	r0, sl
   1c41e:	4659      	mov	r1, fp
   1c420:	f7fc f802 	bl	18428 <__aeabi_dsub>
   1c424:	4b24      	ldr	r3, [pc, #144]	; (1c4b8 <__ieee754_rem_pio2+0x290>)
   1c426:	1e7a      	subs	r2, r7, #1
   1c428:	4680      	mov	r8, r0
   1c42a:	4689      	mov	r9, r1
   1c42c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1c430:	42ab      	cmp	r3, r5
   1c432:	d04b      	beq.n	1c4cc <__ieee754_rem_pio2+0x2a4>
   1c434:	4642      	mov	r2, r8
   1c436:	464b      	mov	r3, r9
   1c438:	4650      	mov	r0, sl
   1c43a:	4659      	mov	r1, fp
   1c43c:	e9c4 8900 	strd	r8, r9, [r4]
   1c440:	f7fb fff2 	bl	18428 <__aeabi_dsub>
   1c444:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c448:	f7fb ffee 	bl	18428 <__aeabi_dsub>
   1c44c:	2e00      	cmp	r6, #0
   1c44e:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1c452:	f6bf af1f 	bge.w	1c294 <__ieee754_rem_pio2+0x6c>
   1c456:	f109 4500 	add.w	r5, r9, #2147483648	; 0x80000000
   1c45a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1c45e:	427f      	negs	r7, r7
   1c460:	e9c4 8500 	strd	r8, r5, [r4]
   1c464:	e9c4 0302 	strd	r0, r3, [r4, #8]
   1c468:	e714      	b.n	1c294 <__ieee754_rem_pio2+0x6c>
   1c46a:	bf00      	nop
   1c46c:	f3af 8000 	nop.w
   1c470:	54400000 	.word	0x54400000
   1c474:	3ff921fb 	.word	0x3ff921fb
   1c478:	1a626331 	.word	0x1a626331
   1c47c:	3dd0b461 	.word	0x3dd0b461
   1c480:	1a600000 	.word	0x1a600000
   1c484:	3dd0b461 	.word	0x3dd0b461
   1c488:	2e037073 	.word	0x2e037073
   1c48c:	3ba3198a 	.word	0x3ba3198a
   1c490:	6dc9c883 	.word	0x6dc9c883
   1c494:	3fe45f30 	.word	0x3fe45f30
   1c498:	3fe921fb 	.word	0x3fe921fb
   1c49c:	4002d97b 	.word	0x4002d97b
   1c4a0:	3ff921fb 	.word	0x3ff921fb
   1c4a4:	413921fb 	.word	0x413921fb
   1c4a8:	7fefffff 	.word	0x7fefffff
   1c4ac:	41700000 	.word	0x41700000
   1c4b0:	00044dd8 	.word	0x00044dd8
   1c4b4:	3fe00000 	.word	0x3fe00000
   1c4b8:	00044d58 	.word	0x00044d58
   1c4bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c4c0:	4650      	mov	r0, sl
   1c4c2:	4659      	mov	r1, fp
   1c4c4:	f7fb ffb0 	bl	18428 <__aeabi_dsub>
   1c4c8:	4680      	mov	r8, r0
   1c4ca:	4689      	mov	r9, r1
   1c4cc:	152d      	asrs	r5, r5, #20
   1c4ce:	f3c9 530a 	ubfx	r3, r9, #20, #11
   1c4d2:	1aeb      	subs	r3, r5, r3
   1c4d4:	2b10      	cmp	r3, #16
   1c4d6:	ddad      	ble.n	1c434 <__ieee754_rem_pio2+0x20c>
   1c4d8:	a357      	add	r3, pc, #348	; (adr r3, 1c638 <__ieee754_rem_pio2+0x410>)
   1c4da:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c4de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1c4e2:	f7fc f959 	bl	18798 <__aeabi_dmul>
   1c4e6:	4680      	mov	r8, r0
   1c4e8:	4689      	mov	r9, r1
   1c4ea:	4602      	mov	r2, r0
   1c4ec:	460b      	mov	r3, r1
   1c4ee:	4650      	mov	r0, sl
   1c4f0:	4659      	mov	r1, fp
   1c4f2:	f7fb ff99 	bl	18428 <__aeabi_dsub>
   1c4f6:	4602      	mov	r2, r0
   1c4f8:	460b      	mov	r3, r1
   1c4fa:	4650      	mov	r0, sl
   1c4fc:	4659      	mov	r1, fp
   1c4fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1c502:	f7fb ff91 	bl	18428 <__aeabi_dsub>
   1c506:	4642      	mov	r2, r8
   1c508:	464b      	mov	r3, r9
   1c50a:	f7fb ff8d 	bl	18428 <__aeabi_dsub>
   1c50e:	4680      	mov	r8, r0
   1c510:	4689      	mov	r9, r1
   1c512:	a34b      	add	r3, pc, #300	; (adr r3, 1c640 <__ieee754_rem_pio2+0x418>)
   1c514:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c518:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1c51c:	f7fc f93c 	bl	18798 <__aeabi_dmul>
   1c520:	4642      	mov	r2, r8
   1c522:	464b      	mov	r3, r9
   1c524:	f7fb ff80 	bl	18428 <__aeabi_dsub>
   1c528:	460b      	mov	r3, r1
   1c52a:	4602      	mov	r2, r0
   1c52c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
   1c530:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1c534:	4650      	mov	r0, sl
   1c536:	4659      	mov	r1, fp
   1c538:	f7fb ff76 	bl	18428 <__aeabi_dsub>
   1c53c:	f3c1 530a 	ubfx	r3, r1, #20, #11
   1c540:	4680      	mov	r8, r0
   1c542:	4689      	mov	r9, r1
   1c544:	1aed      	subs	r5, r5, r3
   1c546:	2d31      	cmp	r5, #49	; 0x31
   1c548:	f77f af74 	ble.w	1c434 <__ieee754_rem_pio2+0x20c>
   1c54c:	a33f      	add	r3, pc, #252	; (adr r3, 1c64c <__ieee754_rem_pio2+0x424>)
   1c54e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c552:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1c556:	f7fc f91f 	bl	18798 <__aeabi_dmul>
   1c55a:	4680      	mov	r8, r0
   1c55c:	4689      	mov	r9, r1
   1c55e:	4602      	mov	r2, r0
   1c560:	460b      	mov	r3, r1
   1c562:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1c566:	f7fb ff5f 	bl	18428 <__aeabi_dsub>
   1c56a:	4602      	mov	r2, r0
   1c56c:	460b      	mov	r3, r1
   1c56e:	4682      	mov	sl, r0
   1c570:	468b      	mov	fp, r1
   1c572:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1c576:	f7fb ff57 	bl	18428 <__aeabi_dsub>
   1c57a:	4642      	mov	r2, r8
   1c57c:	464b      	mov	r3, r9
   1c57e:	f7fb ff53 	bl	18428 <__aeabi_dsub>
   1c582:	4680      	mov	r8, r0
   1c584:	4689      	mov	r9, r1
   1c586:	a333      	add	r3, pc, #204	; (adr r3, 1c654 <__ieee754_rem_pio2+0x42c>)
   1c588:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c58c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1c590:	f7fc f902 	bl	18798 <__aeabi_dmul>
   1c594:	4642      	mov	r2, r8
   1c596:	464b      	mov	r3, r9
   1c598:	f7fb ff46 	bl	18428 <__aeabi_dsub>
   1c59c:	4602      	mov	r2, r0
   1c59e:	460b      	mov	r3, r1
   1c5a0:	4650      	mov	r0, sl
   1c5a2:	4659      	mov	r1, fp
   1c5a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1c5a8:	f7fb ff3e 	bl	18428 <__aeabi_dsub>
   1c5ac:	4680      	mov	r8, r0
   1c5ae:	4689      	mov	r9, r1
   1c5b0:	e740      	b.n	1c434 <__ieee754_rem_pio2+0x20c>
   1c5b2:	2303      	movs	r3, #3
   1c5b4:	e6b5      	b.n	1c322 <__ieee754_rem_pio2+0xfa>
   1c5b6:	f7fb ff39 	bl	1842c <__adddf3>
   1c5ba:	4b23      	ldr	r3, [pc, #140]	; (1c648 <__ieee754_rem_pio2+0x420>)
   1c5bc:	4680      	mov	r8, r0
   1c5be:	4689      	mov	r9, r1
   1c5c0:	429d      	cmp	r5, r3
   1c5c2:	d016      	beq.n	1c5f2 <__ieee754_rem_pio2+0x3ca>
   1c5c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1c5c8:	a319      	add	r3, pc, #100	; (adr r3, 1c630 <__ieee754_rem_pio2+0x408>)
   1c5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c5ce:	f7fb ff2d 	bl	1842c <__adddf3>
   1c5d2:	4602      	mov	r2, r0
   1c5d4:	460b      	mov	r3, r1
   1c5d6:	4640      	mov	r0, r8
   1c5d8:	4649      	mov	r1, r9
   1c5da:	e9c4 2300 	strd	r2, r3, [r4]
   1c5de:	f7fb ff23 	bl	18428 <__aeabi_dsub>
   1c5e2:	a313      	add	r3, pc, #76	; (adr r3, 1c630 <__ieee754_rem_pio2+0x408>)
   1c5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c5e8:	f7fb ff20 	bl	1842c <__adddf3>
   1c5ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1c5f0:	e650      	b.n	1c294 <__ieee754_rem_pio2+0x6c>
   1c5f2:	a311      	add	r3, pc, #68	; (adr r3, 1c638 <__ieee754_rem_pio2+0x410>)
   1c5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c5f8:	f7fb ff18 	bl	1842c <__adddf3>
   1c5fc:	460f      	mov	r7, r1
   1c5fe:	4606      	mov	r6, r0
   1c600:	a30f      	add	r3, pc, #60	; (adr r3, 1c640 <__ieee754_rem_pio2+0x418>)
   1c602:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c606:	f7fb ff11 	bl	1842c <__adddf3>
   1c60a:	4602      	mov	r2, r0
   1c60c:	460b      	mov	r3, r1
   1c60e:	4630      	mov	r0, r6
   1c610:	4639      	mov	r1, r7
   1c612:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1c616:	e9c4 2300 	strd	r2, r3, [r4]
   1c61a:	f7fb ff05 	bl	18428 <__aeabi_dsub>
   1c61e:	a308      	add	r3, pc, #32	; (adr r3, 1c640 <__ieee754_rem_pio2+0x418>)
   1c620:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c624:	f7fb ff02 	bl	1842c <__adddf3>
   1c628:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1c62c:	e632      	b.n	1c294 <__ieee754_rem_pio2+0x6c>
   1c62e:	bf00      	nop
   1c630:	1a626331 	.word	0x1a626331
   1c634:	3dd0b461 	.word	0x3dd0b461
   1c638:	1a600000 	.word	0x1a600000
   1c63c:	3dd0b461 	.word	0x3dd0b461
   1c640:	2e037073 	.word	0x2e037073
   1c644:	3ba3198a 	.word	0x3ba3198a
   1c648:	3ff921fb 	.word	0x3ff921fb
   1c64c:	2e000000 	.word	0x2e000000
   1c650:	3ba3198a 	.word	0x3ba3198a
   1c654:	252049c1 	.word	0x252049c1
   1c658:	397b839a 	.word	0x397b839a
   1c65c:	00000000 	.word	0x00000000

0001c660 <__kernel_cos>:
   1c660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c664:	ec57 6b10 	vmov	r6, r7, d0
   1c668:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   1c66c:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   1c670:	ed2d 8b02 	vpush	{d8}
   1c674:	eeb0 8a41 	vmov.f32	s16, s2
   1c678:	eef0 8a61 	vmov.f32	s17, s3
   1c67c:	b083      	sub	sp, #12
   1c67e:	da72      	bge.n	1c766 <__kernel_cos+0x106>
   1c680:	ee10 0a10 	vmov	r0, s0
   1c684:	4639      	mov	r1, r7
   1c686:	f7fc fb21 	bl	18ccc <__aeabi_d2iz>
   1c68a:	2800      	cmp	r0, #0
   1c68c:	f000 80f6 	beq.w	1c87c <__kernel_cos+0x21c>
   1c690:	4632      	mov	r2, r6
   1c692:	463b      	mov	r3, r7
   1c694:	4630      	mov	r0, r6
   1c696:	4639      	mov	r1, r7
   1c698:	f7fc f87e 	bl	18798 <__aeabi_dmul>
   1c69c:	4604      	mov	r4, r0
   1c69e:	460d      	mov	r5, r1
   1c6a0:	a37b      	add	r3, pc, #492	; (adr r3, 1c890 <__kernel_cos+0x230>)
   1c6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c6a6:	f7fc f877 	bl	18798 <__aeabi_dmul>
   1c6aa:	a37b      	add	r3, pc, #492	; (adr r3, 1c898 <__kernel_cos+0x238>)
   1c6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c6b0:	f7fb febc 	bl	1842c <__adddf3>
   1c6b4:	4622      	mov	r2, r4
   1c6b6:	462b      	mov	r3, r5
   1c6b8:	f7fc f86e 	bl	18798 <__aeabi_dmul>
   1c6bc:	a378      	add	r3, pc, #480	; (adr r3, 1c8a0 <__kernel_cos+0x240>)
   1c6be:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c6c2:	f7fb feb1 	bl	18428 <__aeabi_dsub>
   1c6c6:	4622      	mov	r2, r4
   1c6c8:	462b      	mov	r3, r5
   1c6ca:	f7fc f865 	bl	18798 <__aeabi_dmul>
   1c6ce:	a376      	add	r3, pc, #472	; (adr r3, 1c8a8 <__kernel_cos+0x248>)
   1c6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c6d4:	f7fb feaa 	bl	1842c <__adddf3>
   1c6d8:	4622      	mov	r2, r4
   1c6da:	462b      	mov	r3, r5
   1c6dc:	f7fc f85c 	bl	18798 <__aeabi_dmul>
   1c6e0:	a373      	add	r3, pc, #460	; (adr r3, 1c8b0 <__kernel_cos+0x250>)
   1c6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c6e6:	f7fb fe9f 	bl	18428 <__aeabi_dsub>
   1c6ea:	4622      	mov	r2, r4
   1c6ec:	462b      	mov	r3, r5
   1c6ee:	f7fc f853 	bl	18798 <__aeabi_dmul>
   1c6f2:	a371      	add	r3, pc, #452	; (adr r3, 1c8b8 <__kernel_cos+0x258>)
   1c6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c6f8:	f7fb fe98 	bl	1842c <__adddf3>
   1c6fc:	4622      	mov	r2, r4
   1c6fe:	462b      	mov	r3, r5
   1c700:	f7fc f84a 	bl	18798 <__aeabi_dmul>
   1c704:	4682      	mov	sl, r0
   1c706:	468b      	mov	fp, r1
   1c708:	2200      	movs	r2, #0
   1c70a:	4b71      	ldr	r3, [pc, #452]	; (1c8d0 <__kernel_cos+0x270>)
   1c70c:	4620      	mov	r0, r4
   1c70e:	4629      	mov	r1, r5
   1c710:	f7fc f842 	bl	18798 <__aeabi_dmul>
   1c714:	4652      	mov	r2, sl
   1c716:	4680      	mov	r8, r0
   1c718:	4689      	mov	r9, r1
   1c71a:	465b      	mov	r3, fp
   1c71c:	4620      	mov	r0, r4
   1c71e:	4629      	mov	r1, r5
   1c720:	f7fc f83a 	bl	18798 <__aeabi_dmul>
   1c724:	4604      	mov	r4, r0
   1c726:	460d      	mov	r5, r1
   1c728:	4630      	mov	r0, r6
   1c72a:	4639      	mov	r1, r7
   1c72c:	ec53 2b18 	vmov	r2, r3, d8
   1c730:	f7fc f832 	bl	18798 <__aeabi_dmul>
   1c734:	4602      	mov	r2, r0
   1c736:	460b      	mov	r3, r1
   1c738:	4620      	mov	r0, r4
   1c73a:	4629      	mov	r1, r5
   1c73c:	f7fb fe74 	bl	18428 <__aeabi_dsub>
   1c740:	4602      	mov	r2, r0
   1c742:	460b      	mov	r3, r1
   1c744:	4640      	mov	r0, r8
   1c746:	4649      	mov	r1, r9
   1c748:	f7fb fe6e 	bl	18428 <__aeabi_dsub>
   1c74c:	4602      	mov	r2, r0
   1c74e:	460b      	mov	r3, r1
   1c750:	2000      	movs	r0, #0
   1c752:	4960      	ldr	r1, [pc, #384]	; (1c8d4 <__kernel_cos+0x274>)
   1c754:	f7fb fe68 	bl	18428 <__aeabi_dsub>
   1c758:	ec41 0b10 	vmov	d0, r0, r1
   1c75c:	b003      	add	sp, #12
   1c75e:	ecbd 8b02 	vpop	{d8}
   1c762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c766:	ee10 2a10 	vmov	r2, s0
   1c76a:	ee10 0a10 	vmov	r0, s0
   1c76e:	463b      	mov	r3, r7
   1c770:	4639      	mov	r1, r7
   1c772:	f7fc f811 	bl	18798 <__aeabi_dmul>
   1c776:	4604      	mov	r4, r0
   1c778:	460d      	mov	r5, r1
   1c77a:	a345      	add	r3, pc, #276	; (adr r3, 1c890 <__kernel_cos+0x230>)
   1c77c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c780:	f7fc f80a 	bl	18798 <__aeabi_dmul>
   1c784:	a344      	add	r3, pc, #272	; (adr r3, 1c898 <__kernel_cos+0x238>)
   1c786:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c78a:	f7fb fe4f 	bl	1842c <__adddf3>
   1c78e:	4622      	mov	r2, r4
   1c790:	462b      	mov	r3, r5
   1c792:	f7fc f801 	bl	18798 <__aeabi_dmul>
   1c796:	a342      	add	r3, pc, #264	; (adr r3, 1c8a0 <__kernel_cos+0x240>)
   1c798:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c79c:	f7fb fe44 	bl	18428 <__aeabi_dsub>
   1c7a0:	4622      	mov	r2, r4
   1c7a2:	462b      	mov	r3, r5
   1c7a4:	f7fb fff8 	bl	18798 <__aeabi_dmul>
   1c7a8:	a33f      	add	r3, pc, #252	; (adr r3, 1c8a8 <__kernel_cos+0x248>)
   1c7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c7ae:	f7fb fe3d 	bl	1842c <__adddf3>
   1c7b2:	4622      	mov	r2, r4
   1c7b4:	462b      	mov	r3, r5
   1c7b6:	f7fb ffef 	bl	18798 <__aeabi_dmul>
   1c7ba:	a33d      	add	r3, pc, #244	; (adr r3, 1c8b0 <__kernel_cos+0x250>)
   1c7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c7c0:	f7fb fe32 	bl	18428 <__aeabi_dsub>
   1c7c4:	4622      	mov	r2, r4
   1c7c6:	462b      	mov	r3, r5
   1c7c8:	f7fb ffe6 	bl	18798 <__aeabi_dmul>
   1c7cc:	a33a      	add	r3, pc, #232	; (adr r3, 1c8b8 <__kernel_cos+0x258>)
   1c7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c7d2:	f7fb fe2b 	bl	1842c <__adddf3>
   1c7d6:	462b      	mov	r3, r5
   1c7d8:	4622      	mov	r2, r4
   1c7da:	f7fb ffdd 	bl	18798 <__aeabi_dmul>
   1c7de:	4b3e      	ldr	r3, [pc, #248]	; (1c8d8 <__kernel_cos+0x278>)
   1c7e0:	4682      	mov	sl, r0
   1c7e2:	468b      	mov	fp, r1
   1c7e4:	4599      	cmp	r9, r3
   1c7e6:	dd8f      	ble.n	1c708 <__kernel_cos+0xa8>
   1c7e8:	4b3c      	ldr	r3, [pc, #240]	; (1c8dc <__kernel_cos+0x27c>)
   1c7ea:	4599      	cmp	r9, r3
   1c7ec:	dc3d      	bgt.n	1c86a <__kernel_cos+0x20a>
   1c7ee:	2200      	movs	r2, #0
   1c7f0:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   1c7f4:	2000      	movs	r0, #0
   1c7f6:	4937      	ldr	r1, [pc, #220]	; (1c8d4 <__kernel_cos+0x274>)
   1c7f8:	4690      	mov	r8, r2
   1c7fa:	4699      	mov	r9, r3
   1c7fc:	f7fb fe14 	bl	18428 <__aeabi_dsub>
   1c800:	e9cd 0100 	strd	r0, r1, [sp]
   1c804:	2200      	movs	r2, #0
   1c806:	4b32      	ldr	r3, [pc, #200]	; (1c8d0 <__kernel_cos+0x270>)
   1c808:	4620      	mov	r0, r4
   1c80a:	4629      	mov	r1, r5
   1c80c:	f7fb ffc4 	bl	18798 <__aeabi_dmul>
   1c810:	4642      	mov	r2, r8
   1c812:	464b      	mov	r3, r9
   1c814:	f7fb fe08 	bl	18428 <__aeabi_dsub>
   1c818:	4652      	mov	r2, sl
   1c81a:	4680      	mov	r8, r0
   1c81c:	4689      	mov	r9, r1
   1c81e:	465b      	mov	r3, fp
   1c820:	4620      	mov	r0, r4
   1c822:	4629      	mov	r1, r5
   1c824:	f7fb ffb8 	bl	18798 <__aeabi_dmul>
   1c828:	4604      	mov	r4, r0
   1c82a:	460d      	mov	r5, r1
   1c82c:	4630      	mov	r0, r6
   1c82e:	4639      	mov	r1, r7
   1c830:	ec53 2b18 	vmov	r2, r3, d8
   1c834:	f7fb ffb0 	bl	18798 <__aeabi_dmul>
   1c838:	4602      	mov	r2, r0
   1c83a:	460b      	mov	r3, r1
   1c83c:	4620      	mov	r0, r4
   1c83e:	4629      	mov	r1, r5
   1c840:	f7fb fdf2 	bl	18428 <__aeabi_dsub>
   1c844:	4602      	mov	r2, r0
   1c846:	460b      	mov	r3, r1
   1c848:	4640      	mov	r0, r8
   1c84a:	4649      	mov	r1, r9
   1c84c:	f7fb fdec 	bl	18428 <__aeabi_dsub>
   1c850:	4602      	mov	r2, r0
   1c852:	460b      	mov	r3, r1
   1c854:	e9dd 0100 	ldrd	r0, r1, [sp]
   1c858:	f7fb fde6 	bl	18428 <__aeabi_dsub>
   1c85c:	ec41 0b10 	vmov	d0, r0, r1
   1c860:	b003      	add	sp, #12
   1c862:	ecbd 8b02 	vpop	{d8}
   1c866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c86a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 1c8c0 <__kernel_cos+0x260>
   1c86e:	f04f 0800 	mov.w	r8, #0
   1c872:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1c8e0 <__kernel_cos+0x280>
   1c876:	ed8d 7b00 	vstr	d7, [sp]
   1c87a:	e7c3      	b.n	1c804 <__kernel_cos+0x1a4>
   1c87c:	ed9f 0b12 	vldr	d0, [pc, #72]	; 1c8c8 <__kernel_cos+0x268>
   1c880:	b003      	add	sp, #12
   1c882:	ecbd 8b02 	vpop	{d8}
   1c886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c88a:	bf00      	nop
   1c88c:	f3af 8000 	nop.w
   1c890:	be8838d4 	.word	0xbe8838d4
   1c894:	bda8fae9 	.word	0xbda8fae9
   1c898:	bdb4b1c4 	.word	0xbdb4b1c4
   1c89c:	3e21ee9e 	.word	0x3e21ee9e
   1c8a0:	809c52ad 	.word	0x809c52ad
   1c8a4:	3e927e4f 	.word	0x3e927e4f
   1c8a8:	19cb1590 	.word	0x19cb1590
   1c8ac:	3efa01a0 	.word	0x3efa01a0
   1c8b0:	16c15177 	.word	0x16c15177
   1c8b4:	3f56c16c 	.word	0x3f56c16c
   1c8b8:	5555554c 	.word	0x5555554c
   1c8bc:	3fa55555 	.word	0x3fa55555
   1c8c0:	00000000 	.word	0x00000000
   1c8c4:	3fe70000 	.word	0x3fe70000
   1c8c8:	00000000 	.word	0x00000000
   1c8cc:	3ff00000 	.word	0x3ff00000
   1c8d0:	3fe00000 	.word	0x3fe00000
   1c8d4:	3ff00000 	.word	0x3ff00000
   1c8d8:	3fd33332 	.word	0x3fd33332
   1c8dc:	3fe90000 	.word	0x3fe90000
   1c8e0:	3fd20000 	.word	0x3fd20000
   1c8e4:	00000000 	.word	0x00000000

0001c8e8 <__kernel_rem_pio2>:
   1c8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c8ec:	461c      	mov	r4, r3
   1c8ee:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
   1c8f2:	f112 0f14 	cmn.w	r2, #20
   1c8f6:	910b      	str	r1, [sp, #44]	; 0x2c
   1c8f8:	f104 31ff 	add.w	r1, r4, #4294967295	; 0xffffffff
   1c8fc:	9308      	str	r3, [sp, #32]
   1c8fe:	9103      	str	r1, [sp, #12]
   1c900:	4bb1      	ldr	r3, [pc, #708]	; (1cbc8 <__kernel_rem_pio2+0x2e0>)
   1c902:	99a2      	ldr	r1, [sp, #648]	; 0x288
   1c904:	9004      	str	r0, [sp, #16]
   1c906:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1c90a:	9305      	str	r3, [sp, #20]
   1c90c:	f2c0 82c1 	blt.w	1ce92 <__kernel_rem_pio2+0x5aa>
   1c910:	1ed3      	subs	r3, r2, #3
   1c912:	49ae      	ldr	r1, [pc, #696]	; (1cbcc <__kernel_rem_pio2+0x2e4>)
   1c914:	fb81 0103 	smull	r0, r1, r1, r3
   1c918:	17db      	asrs	r3, r3, #31
   1c91a:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   1c91e:	9307      	str	r3, [sp, #28]
   1c920:	3301      	adds	r3, #1
   1c922:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   1c926:	00db      	lsls	r3, r3, #3
   1c928:	18d3      	adds	r3, r2, r3
   1c92a:	9a07      	ldr	r2, [sp, #28]
   1c92c:	9306      	str	r3, [sp, #24]
   1c92e:	9b03      	ldr	r3, [sp, #12]
   1c930:	1ad6      	subs	r6, r2, r3
   1c932:	9a05      	ldr	r2, [sp, #20]
   1c934:	eb12 0803 	adds.w	r8, r2, r3
   1c938:	d414      	bmi.n	1c964 <__kernel_rem_pio2+0x7c>
   1c93a:	f108 0801 	add.w	r8, r8, #1
   1c93e:	af20      	add	r7, sp, #128	; 0x80
   1c940:	2400      	movs	r4, #0
   1c942:	2500      	movs	r5, #0
   1c944:	44b0      	add	r8, r6
   1c946:	f8dd 928c 	ldr.w	r9, [sp, #652]	; 0x28c
   1c94a:	2e00      	cmp	r6, #0
   1c94c:	4620      	mov	r0, r4
   1c94e:	4629      	mov	r1, r5
   1c950:	db03      	blt.n	1c95a <__kernel_rem_pio2+0x72>
   1c952:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
   1c956:	f7fb feb5 	bl	186c4 <__aeabi_i2d>
   1c95a:	3601      	adds	r6, #1
   1c95c:	4546      	cmp	r6, r8
   1c95e:	e8e7 0102 	strd	r0, r1, [r7], #8
   1c962:	d1f2      	bne.n	1c94a <__kernel_rem_pio2+0x62>
   1c964:	9b05      	ldr	r3, [sp, #20]
   1c966:	2b00      	cmp	r3, #0
   1c968:	9b08      	ldr	r3, [sp, #32]
   1c96a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1c96e:	9301      	str	r3, [sp, #4]
   1c970:	db29      	blt.n	1c9c6 <__kernel_rem_pio2+0xde>
   1c972:	9a04      	ldr	r2, [sp, #16]
   1c974:	a920      	add	r1, sp, #128	; 0x80
   1c976:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
   1c97a:	eb02 0803 	add.w	r8, r2, r3
   1c97e:	eb01 0903 	add.w	r9, r1, r3
   1c982:	aa72      	add	r2, sp, #456	; 0x1c8
   1c984:	9b05      	ldr	r3, [sp, #20]
   1c986:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
   1c98a:	9b03      	ldr	r3, [sp, #12]
   1c98c:	2b00      	cmp	r3, #0
   1c98e:	f2c0 819e 	blt.w	1ccce <__kernel_rem_pio2+0x3e6>
   1c992:	464d      	mov	r5, r9
   1c994:	9c04      	ldr	r4, [sp, #16]
   1c996:	2600      	movs	r6, #0
   1c998:	2700      	movs	r7, #0
   1c99a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   1c99e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   1c9a2:	f7fb fef9 	bl	18798 <__aeabi_dmul>
   1c9a6:	4602      	mov	r2, r0
   1c9a8:	460b      	mov	r3, r1
   1c9aa:	4630      	mov	r0, r6
   1c9ac:	4639      	mov	r1, r7
   1c9ae:	f7fb fd3d 	bl	1842c <__adddf3>
   1c9b2:	4544      	cmp	r4, r8
   1c9b4:	4606      	mov	r6, r0
   1c9b6:	460f      	mov	r7, r1
   1c9b8:	d1ef      	bne.n	1c99a <__kernel_rem_pio2+0xb2>
   1c9ba:	f109 0908 	add.w	r9, r9, #8
   1c9be:	e8ea 6702 	strd	r6, r7, [sl], #8
   1c9c2:	45da      	cmp	sl, fp
   1c9c4:	d1e1      	bne.n	1c98a <__kernel_rem_pio2+0xa2>
   1c9c6:	9905      	ldr	r1, [sp, #20]
   1c9c8:	9a01      	ldr	r2, [sp, #4]
   1c9ca:	9804      	ldr	r0, [sp, #16]
   1c9cc:	008b      	lsls	r3, r1, #2
   1c9ce:	9101      	str	r1, [sp, #4]
   1c9d0:	4402      	add	r2, r0
   1c9d2:	a80b      	add	r0, sp, #44	; 0x2c
   1c9d4:	4693      	mov	fp, r2
   1c9d6:	f1a3 0208 	sub.w	r2, r3, #8
   1c9da:	18c3      	adds	r3, r0, r3
   1c9dc:	930a      	str	r3, [sp, #40]	; 0x28
   1c9de:	ab0c      	add	r3, sp, #48	; 0x30
   1c9e0:	4413      	add	r3, r2
   1c9e2:	9309      	str	r3, [sp, #36]	; 0x24
   1c9e4:	9a01      	ldr	r2, [sp, #4]
   1c9e6:	a998      	add	r1, sp, #608	; 0x260
   1c9e8:	2a00      	cmp	r2, #0
   1c9ea:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   1c9ee:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   1c9f2:	dd29      	ble.n	1ca48 <__kernel_rem_pio2+0x160>
   1c9f4:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
   1c9f8:	f10d 0930 	add.w	r9, sp, #48	; 0x30
   1c9fc:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   1ca00:	2200      	movs	r2, #0
   1ca02:	4b73      	ldr	r3, [pc, #460]	; (1cbd0 <__kernel_rem_pio2+0x2e8>)
   1ca04:	4620      	mov	r0, r4
   1ca06:	4629      	mov	r1, r5
   1ca08:	f7fb fec6 	bl	18798 <__aeabi_dmul>
   1ca0c:	f7fc f95e 	bl	18ccc <__aeabi_d2iz>
   1ca10:	f7fb fe58 	bl	186c4 <__aeabi_i2d>
   1ca14:	2200      	movs	r2, #0
   1ca16:	4b6f      	ldr	r3, [pc, #444]	; (1cbd4 <__kernel_rem_pio2+0x2ec>)
   1ca18:	4606      	mov	r6, r0
   1ca1a:	460f      	mov	r7, r1
   1ca1c:	f7fb febc 	bl	18798 <__aeabi_dmul>
   1ca20:	4602      	mov	r2, r0
   1ca22:	460b      	mov	r3, r1
   1ca24:	4620      	mov	r0, r4
   1ca26:	4629      	mov	r1, r5
   1ca28:	f7fb fcfe 	bl	18428 <__aeabi_dsub>
   1ca2c:	f7fc f94e 	bl	18ccc <__aeabi_d2iz>
   1ca30:	4639      	mov	r1, r7
   1ca32:	f849 0b04 	str.w	r0, [r9], #4
   1ca36:	4630      	mov	r0, r6
   1ca38:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   1ca3c:	f7fb fcf6 	bl	1842c <__adddf3>
   1ca40:	4604      	mov	r4, r0
   1ca42:	45d0      	cmp	r8, sl
   1ca44:	460d      	mov	r5, r1
   1ca46:	d1db      	bne.n	1ca00 <__kernel_rem_pio2+0x118>
   1ca48:	f8dd 9018 	ldr.w	r9, [sp, #24]
   1ca4c:	ec45 4b10 	vmov	d0, r4, r5
   1ca50:	4648      	mov	r0, r9
   1ca52:	f000 fcad 	bl	1d3b0 <scalbn>
   1ca56:	2200      	movs	r2, #0
   1ca58:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   1ca5c:	ee10 0a10 	vmov	r0, s0
   1ca60:	ec55 4b10 	vmov	r4, r5, d0
   1ca64:	4629      	mov	r1, r5
   1ca66:	f7fb fe97 	bl	18798 <__aeabi_dmul>
   1ca6a:	ec41 0b10 	vmov	d0, r0, r1
   1ca6e:	f000 fc1b 	bl	1d2a8 <floor>
   1ca72:	2200      	movs	r2, #0
   1ca74:	4b58      	ldr	r3, [pc, #352]	; (1cbd8 <__kernel_rem_pio2+0x2f0>)
   1ca76:	ec51 0b10 	vmov	r0, r1, d0
   1ca7a:	f7fb fe8d 	bl	18798 <__aeabi_dmul>
   1ca7e:	4602      	mov	r2, r0
   1ca80:	460b      	mov	r3, r1
   1ca82:	4620      	mov	r0, r4
   1ca84:	4629      	mov	r1, r5
   1ca86:	f7fb fccf 	bl	18428 <__aeabi_dsub>
   1ca8a:	460d      	mov	r5, r1
   1ca8c:	4604      	mov	r4, r0
   1ca8e:	f7fc f91d 	bl	18ccc <__aeabi_d2iz>
   1ca92:	4680      	mov	r8, r0
   1ca94:	f7fb fe16 	bl	186c4 <__aeabi_i2d>
   1ca98:	460b      	mov	r3, r1
   1ca9a:	4602      	mov	r2, r0
   1ca9c:	4629      	mov	r1, r5
   1ca9e:	4620      	mov	r0, r4
   1caa0:	f7fb fcc2 	bl	18428 <__aeabi_dsub>
   1caa4:	464b      	mov	r3, r9
   1caa6:	4606      	mov	r6, r0
   1caa8:	460f      	mov	r7, r1
   1caaa:	2b00      	cmp	r3, #0
   1caac:	f340 8096 	ble.w	1cbdc <__kernel_rem_pio2+0x2f4>
   1cab0:	9a01      	ldr	r2, [sp, #4]
   1cab2:	a90c      	add	r1, sp, #48	; 0x30
   1cab4:	f1c9 0318 	rsb	r3, r9, #24
   1cab8:	f1c9 0517 	rsb	r5, r9, #23
   1cabc:	3a01      	subs	r2, #1
   1cabe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   1cac2:	fa41 f003 	asr.w	r0, r1, r3
   1cac6:	fa00 f303 	lsl.w	r3, r0, r3
   1caca:	4480      	add	r8, r0
   1cacc:	1acb      	subs	r3, r1, r3
   1cace:	a90c      	add	r1, sp, #48	; 0x30
   1cad0:	fa43 f505 	asr.w	r5, r3, r5
   1cad4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1cad8:	2d00      	cmp	r5, #0
   1cada:	f300 8089 	bgt.w	1cbf0 <__kernel_rem_pio2+0x308>
   1cade:	2200      	movs	r2, #0
   1cae0:	2300      	movs	r3, #0
   1cae2:	4630      	mov	r0, r6
   1cae4:	4639      	mov	r1, r7
   1cae6:	f7fc f8bf 	bl	18c68 <__aeabi_dcmpeq>
   1caea:	2800      	cmp	r0, #0
   1caec:	f000 8297 	beq.w	1d01e <__kernel_rem_pio2+0x736>
   1caf0:	9901      	ldr	r1, [sp, #4]
   1caf2:	9b05      	ldr	r3, [sp, #20]
   1caf4:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
   1caf8:	454b      	cmp	r3, r9
   1cafa:	dc10      	bgt.n	1cb1e <__kernel_rem_pio2+0x236>
   1cafc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
   1cb00:	2200      	movs	r2, #0
   1cb02:	980a      	ldr	r0, [sp, #40]	; 0x28
   1cb04:	440b      	add	r3, r1
   1cb06:	a90c      	add	r1, sp, #48	; 0x30
   1cb08:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1cb0c:	f853 1904 	ldr.w	r1, [r3], #-4
   1cb10:	4283      	cmp	r3, r0
   1cb12:	ea42 0201 	orr.w	r2, r2, r1
   1cb16:	d1f9      	bne.n	1cb0c <__kernel_rem_pio2+0x224>
   1cb18:	2a00      	cmp	r2, #0
   1cb1a:	f040 80e2 	bne.w	1cce2 <__kernel_rem_pio2+0x3fa>
   1cb1e:	9b05      	ldr	r3, [sp, #20]
   1cb20:	aa0c      	add	r2, sp, #48	; 0x30
   1cb22:	3b01      	subs	r3, #1
   1cb24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1cb28:	2b00      	cmp	r3, #0
   1cb2a:	f040 80cb 	bne.w	1ccc4 <__kernel_rem_pio2+0x3dc>
   1cb2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1cb30:	2301      	movs	r3, #1
   1cb32:	f852 1904 	ldr.w	r1, [r2], #-4
   1cb36:	3301      	adds	r3, #1
   1cb38:	2900      	cmp	r1, #0
   1cb3a:	d0fa      	beq.n	1cb32 <__kernel_rem_pio2+0x24a>
   1cb3c:	9901      	ldr	r1, [sp, #4]
   1cb3e:	1c4a      	adds	r2, r1, #1
   1cb40:	18cb      	adds	r3, r1, r3
   1cb42:	4691      	mov	r9, r2
   1cb44:	9302      	str	r3, [sp, #8]
   1cb46:	9b07      	ldr	r3, [sp, #28]
   1cb48:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
   1cb4c:	9901      	ldr	r1, [sp, #4]
   1cb4e:	18d3      	adds	r3, r2, r3
   1cb50:	9808      	ldr	r0, [sp, #32]
   1cb52:	449a      	add	sl, r3
   1cb54:	4401      	add	r1, r0
   1cb56:	ab20      	add	r3, sp, #128	; 0x80
   1cb58:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
   1cb5c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
   1cb5e:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
   1cb62:	ab70      	add	r3, sp, #448	; 0x1c0
   1cb64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1cb68:	9301      	str	r3, [sp, #4]
   1cb6a:	f85a 0f04 	ldr.w	r0, [sl, #4]!
   1cb6e:	46a8      	mov	r8, r5
   1cb70:	f7fb fda8 	bl	186c4 <__aeabi_i2d>
   1cb74:	460b      	mov	r3, r1
   1cb76:	9903      	ldr	r1, [sp, #12]
   1cb78:	4602      	mov	r2, r0
   1cb7a:	2900      	cmp	r1, #0
   1cb7c:	e8e8 2302 	strd	r2, r3, [r8], #8
   1cb80:	db1f      	blt.n	1cbc2 <__kernel_rem_pio2+0x2da>
   1cb82:	9c04      	ldr	r4, [sp, #16]
   1cb84:	2600      	movs	r6, #0
   1cb86:	2700      	movs	r7, #0
   1cb88:	e001      	b.n	1cb8e <__kernel_rem_pio2+0x2a6>
   1cb8a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   1cb8e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   1cb92:	f7fb fe01 	bl	18798 <__aeabi_dmul>
   1cb96:	4602      	mov	r2, r0
   1cb98:	460b      	mov	r3, r1
   1cb9a:	4630      	mov	r0, r6
   1cb9c:	4639      	mov	r1, r7
   1cb9e:	f7fb fc45 	bl	1842c <__adddf3>
   1cba2:	455c      	cmp	r4, fp
   1cba4:	4606      	mov	r6, r0
   1cba6:	460f      	mov	r7, r1
   1cba8:	d1ef      	bne.n	1cb8a <__kernel_rem_pio2+0x2a2>
   1cbaa:	9b01      	ldr	r3, [sp, #4]
   1cbac:	f109 0901 	add.w	r9, r9, #1
   1cbb0:	4645      	mov	r5, r8
   1cbb2:	e8e3 6702 	strd	r6, r7, [r3], #8
   1cbb6:	9301      	str	r3, [sp, #4]
   1cbb8:	9b02      	ldr	r3, [sp, #8]
   1cbba:	4599      	cmp	r9, r3
   1cbbc:	ddd5      	ble.n	1cb6a <__kernel_rem_pio2+0x282>
   1cbbe:	9301      	str	r3, [sp, #4]
   1cbc0:	e710      	b.n	1c9e4 <__kernel_rem_pio2+0xfc>
   1cbc2:	2600      	movs	r6, #0
   1cbc4:	2700      	movs	r7, #0
   1cbc6:	e7f0      	b.n	1cbaa <__kernel_rem_pio2+0x2c2>
   1cbc8:	00044ee0 	.word	0x00044ee0
   1cbcc:	2aaaaaab 	.word	0x2aaaaaab
   1cbd0:	3e700000 	.word	0x3e700000
   1cbd4:	41700000 	.word	0x41700000
   1cbd8:	40200000 	.word	0x40200000
   1cbdc:	d169      	bne.n	1ccb2 <__kernel_rem_pio2+0x3ca>
   1cbde:	9b01      	ldr	r3, [sp, #4]
   1cbe0:	aa0c      	add	r2, sp, #48	; 0x30
   1cbe2:	3b01      	subs	r3, #1
   1cbe4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1cbe8:	15ed      	asrs	r5, r5, #23
   1cbea:	2d00      	cmp	r5, #0
   1cbec:	f77f af77 	ble.w	1cade <__kernel_rem_pio2+0x1f6>
   1cbf0:	9b01      	ldr	r3, [sp, #4]
   1cbf2:	f108 0801 	add.w	r8, r8, #1
   1cbf6:	2b00      	cmp	r3, #0
   1cbf8:	f340 820f 	ble.w	1d01a <__kernel_rem_pio2+0x732>
   1cbfc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1cbfe:	2c00      	cmp	r4, #0
   1cc00:	d13a      	bne.n	1cc78 <__kernel_rem_pio2+0x390>
   1cc02:	9b01      	ldr	r3, [sp, #4]
   1cc04:	2b01      	cmp	r3, #1
   1cc06:	d009      	beq.n	1cc1c <__kernel_rem_pio2+0x334>
   1cc08:	a90c      	add	r1, sp, #48	; 0x30
   1cc0a:	2201      	movs	r2, #1
   1cc0c:	f851 4f04 	ldr.w	r4, [r1, #4]!
   1cc10:	1c53      	adds	r3, r2, #1
   1cc12:	bb9c      	cbnz	r4, 1cc7c <__kernel_rem_pio2+0x394>
   1cc14:	461a      	mov	r2, r3
   1cc16:	9b01      	ldr	r3, [sp, #4]
   1cc18:	4293      	cmp	r3, r2
   1cc1a:	d1f7      	bne.n	1cc0c <__kernel_rem_pio2+0x324>
   1cc1c:	9b06      	ldr	r3, [sp, #24]
   1cc1e:	2b00      	cmp	r3, #0
   1cc20:	dd0e      	ble.n	1cc40 <__kernel_rem_pio2+0x358>
   1cc22:	2b01      	cmp	r3, #1
   1cc24:	f000 811a 	beq.w	1ce5c <__kernel_rem_pio2+0x574>
   1cc28:	2b02      	cmp	r3, #2
   1cc2a:	d109      	bne.n	1cc40 <__kernel_rem_pio2+0x358>
   1cc2c:	9b01      	ldr	r3, [sp, #4]
   1cc2e:	a90c      	add	r1, sp, #48	; 0x30
   1cc30:	1e5a      	subs	r2, r3, #1
   1cc32:	ab0c      	add	r3, sp, #48	; 0x30
   1cc34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1cc38:	f3c3 0315 	ubfx	r3, r3, #0, #22
   1cc3c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1cc40:	2d02      	cmp	r5, #2
   1cc42:	f47f af4c 	bne.w	1cade <__kernel_rem_pio2+0x1f6>
   1cc46:	4632      	mov	r2, r6
   1cc48:	463b      	mov	r3, r7
   1cc4a:	2000      	movs	r0, #0
   1cc4c:	4998      	ldr	r1, [pc, #608]	; (1ceb0 <__kernel_rem_pio2+0x5c8>)
   1cc4e:	f7fb fbeb 	bl	18428 <__aeabi_dsub>
   1cc52:	4606      	mov	r6, r0
   1cc54:	460f      	mov	r7, r1
   1cc56:	2c00      	cmp	r4, #0
   1cc58:	f43f af41 	beq.w	1cade <__kernel_rem_pio2+0x1f6>
   1cc5c:	9806      	ldr	r0, [sp, #24]
   1cc5e:	ed9f 0b90 	vldr	d0, [pc, #576]	; 1cea0 <__kernel_rem_pio2+0x5b8>
   1cc62:	f000 fba5 	bl	1d3b0 <scalbn>
   1cc66:	4630      	mov	r0, r6
   1cc68:	4639      	mov	r1, r7
   1cc6a:	ec53 2b10 	vmov	r2, r3, d0
   1cc6e:	f7fb fbdb 	bl	18428 <__aeabi_dsub>
   1cc72:	4606      	mov	r6, r0
   1cc74:	460f      	mov	r7, r1
   1cc76:	e732      	b.n	1cade <__kernel_rem_pio2+0x1f6>
   1cc78:	2301      	movs	r3, #1
   1cc7a:	2200      	movs	r2, #0
   1cc7c:	a90c      	add	r1, sp, #48	; 0x30
   1cc7e:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
   1cc82:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
   1cc86:	9901      	ldr	r1, [sp, #4]
   1cc88:	4299      	cmp	r1, r3
   1cc8a:	dd10      	ble.n	1ccae <__kernel_rem_pio2+0x3c6>
   1cc8c:	a80c      	add	r0, sp, #48	; 0x30
   1cc8e:	aa0c      	add	r2, sp, #48	; 0x30
   1cc90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1cc94:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1cc98:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1cc9c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   1cca0:	e000      	b.n	1cca4 <__kernel_rem_pio2+0x3bc>
   1cca2:	681a      	ldr	r2, [r3, #0]
   1cca4:	1a8a      	subs	r2, r1, r2
   1cca6:	f843 2b04 	str.w	r2, [r3], #4
   1ccaa:	4283      	cmp	r3, r0
   1ccac:	d1f9      	bne.n	1cca2 <__kernel_rem_pio2+0x3ba>
   1ccae:	2401      	movs	r4, #1
   1ccb0:	e7b4      	b.n	1cc1c <__kernel_rem_pio2+0x334>
   1ccb2:	2200      	movs	r2, #0
   1ccb4:	4b7f      	ldr	r3, [pc, #508]	; (1ceb4 <__kernel_rem_pio2+0x5cc>)
   1ccb6:	f7fb fff5 	bl	18ca4 <__aeabi_dcmpge>
   1ccba:	2800      	cmp	r0, #0
   1ccbc:	f040 80d9 	bne.w	1ce72 <__kernel_rem_pio2+0x58a>
   1ccc0:	4605      	mov	r5, r0
   1ccc2:	e70c      	b.n	1cade <__kernel_rem_pio2+0x1f6>
   1ccc4:	9b01      	ldr	r3, [sp, #4]
   1ccc6:	1c5a      	adds	r2, r3, #1
   1ccc8:	4691      	mov	r9, r2
   1ccca:	9202      	str	r2, [sp, #8]
   1cccc:	e73b      	b.n	1cb46 <__kernel_rem_pio2+0x25e>
   1ccce:	2600      	movs	r6, #0
   1ccd0:	2700      	movs	r7, #0
   1ccd2:	f109 0908 	add.w	r9, r9, #8
   1ccd6:	e8ea 6702 	strd	r6, r7, [sl], #8
   1ccda:	45da      	cmp	sl, fp
   1ccdc:	f47f ae55 	bne.w	1c98a <__kernel_rem_pio2+0xa2>
   1cce0:	e671      	b.n	1c9c6 <__kernel_rem_pio2+0xde>
   1cce2:	9a06      	ldr	r2, [sp, #24]
   1cce4:	ab0c      	add	r3, sp, #48	; 0x30
   1cce6:	f8cd 801c 	str.w	r8, [sp, #28]
   1ccea:	3a18      	subs	r2, #24
   1ccec:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
   1ccf0:	9504      	str	r5, [sp, #16]
   1ccf2:	9206      	str	r2, [sp, #24]
   1ccf4:	b973      	cbnz	r3, 1cd14 <__kernel_rem_pio2+0x42c>
   1ccf6:	4b70      	ldr	r3, [pc, #448]	; (1ceb8 <__kernel_rem_pio2+0x5d0>)
   1ccf8:	9901      	ldr	r1, [sp, #4]
   1ccfa:	4419      	add	r1, r3
   1ccfc:	460b      	mov	r3, r1
   1ccfe:	a90c      	add	r1, sp, #48	; 0x30
   1cd00:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1cd04:	f853 1904 	ldr.w	r1, [r3], #-4
   1cd08:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1cd0c:	3a18      	subs	r2, #24
   1cd0e:	2900      	cmp	r1, #0
   1cd10:	d0f8      	beq.n	1cd04 <__kernel_rem_pio2+0x41c>
   1cd12:	9206      	str	r2, [sp, #24]
   1cd14:	9806      	ldr	r0, [sp, #24]
   1cd16:	ed9f 0b62 	vldr	d0, [pc, #392]	; 1cea0 <__kernel_rem_pio2+0x5b8>
   1cd1a:	f000 fb49 	bl	1d3b0 <scalbn>
   1cd1e:	f1b9 0f00 	cmp.w	r9, #0
   1cd22:	ec55 4b10 	vmov	r4, r5, d0
   1cd26:	f2c0 81da 	blt.w	1d0de <__kernel_rem_pio2+0x7f6>
   1cd2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
   1cd2e:	aa70      	add	r2, sp, #448	; 0x1c0
   1cd30:	f109 0601 	add.w	r6, r9, #1
   1cd34:	f04f 0a00 	mov.w	sl, #0
   1cd38:	eb02 0803 	add.w	r8, r2, r3
   1cd3c:	9306      	str	r3, [sp, #24]
   1cd3e:	ab0c      	add	r3, sp, #48	; 0x30
   1cd40:	f8df b178 	ldr.w	fp, [pc, #376]	; 1cebc <__kernel_rem_pio2+0x5d4>
   1cd44:	f108 0708 	add.w	r7, r8, #8
   1cd48:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1cd4c:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   1cd50:	f7fb fcb8 	bl	186c4 <__aeabi_i2d>
   1cd54:	4622      	mov	r2, r4
   1cd56:	462b      	mov	r3, r5
   1cd58:	f7fb fd1e 	bl	18798 <__aeabi_dmul>
   1cd5c:	465b      	mov	r3, fp
   1cd5e:	4652      	mov	r2, sl
   1cd60:	e967 0102 	strd	r0, r1, [r7, #-8]!
   1cd64:	4620      	mov	r0, r4
   1cd66:	4629      	mov	r1, r5
   1cd68:	f7fb fd16 	bl	18798 <__aeabi_dmul>
   1cd6c:	ab0c      	add	r3, sp, #48	; 0x30
   1cd6e:	4604      	mov	r4, r0
   1cd70:	460d      	mov	r5, r1
   1cd72:	429e      	cmp	r6, r3
   1cd74:	d1ea      	bne.n	1cd4c <__kernel_rem_pio2+0x464>
   1cd76:	ab48      	add	r3, sp, #288	; 0x120
   1cd78:	46c3      	mov	fp, r8
   1cd7a:	f04f 0a00 	mov.w	sl, #0
   1cd7e:	9303      	str	r3, [sp, #12]
   1cd80:	e9cd 3901 	strd	r3, r9, [sp, #4]
   1cd84:	f8dd 9014 	ldr.w	r9, [sp, #20]
   1cd88:	f1b9 0f00 	cmp.w	r9, #0
   1cd8c:	db2b      	blt.n	1cde6 <__kernel_rem_pio2+0x4fe>
   1cd8e:	f8df 8130 	ldr.w	r8, [pc, #304]	; 1cec0 <__kernel_rem_pio2+0x5d8>
   1cd92:	465d      	mov	r5, fp
   1cd94:	2400      	movs	r4, #0
   1cd96:	2600      	movs	r6, #0
   1cd98:	2700      	movs	r7, #0
   1cd9a:	a343      	add	r3, pc, #268	; (adr r3, 1cea8 <__kernel_rem_pio2+0x5c0>)
   1cd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cda0:	e003      	b.n	1cdaa <__kernel_rem_pio2+0x4c2>
   1cda2:	4554      	cmp	r4, sl
   1cda4:	dc10      	bgt.n	1cdc8 <__kernel_rem_pio2+0x4e0>
   1cda6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   1cdaa:	3401      	adds	r4, #1
   1cdac:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   1cdb0:	f7fb fcf2 	bl	18798 <__aeabi_dmul>
   1cdb4:	4602      	mov	r2, r0
   1cdb6:	460b      	mov	r3, r1
   1cdb8:	4630      	mov	r0, r6
   1cdba:	4639      	mov	r1, r7
   1cdbc:	f7fb fb36 	bl	1842c <__adddf3>
   1cdc0:	45a1      	cmp	r9, r4
   1cdc2:	4606      	mov	r6, r0
   1cdc4:	460f      	mov	r7, r1
   1cdc6:	daec      	bge.n	1cda2 <__kernel_rem_pio2+0x4ba>
   1cdc8:	9a02      	ldr	r2, [sp, #8]
   1cdca:	f1ab 0b08 	sub.w	fp, fp, #8
   1cdce:	9b01      	ldr	r3, [sp, #4]
   1cdd0:	4592      	cmp	sl, r2
   1cdd2:	e8e3 6702 	strd	r6, r7, [r3], #8
   1cdd6:	9301      	str	r3, [sp, #4]
   1cdd8:	f10a 0301 	add.w	r3, sl, #1
   1cddc:	d006      	beq.n	1cdec <__kernel_rem_pio2+0x504>
   1cdde:	f1b9 0f00 	cmp.w	r9, #0
   1cde2:	469a      	mov	sl, r3
   1cde4:	dad3      	bge.n	1cd8e <__kernel_rem_pio2+0x4a6>
   1cde6:	2600      	movs	r6, #0
   1cde8:	2700      	movs	r7, #0
   1cdea:	e7ed      	b.n	1cdc8 <__kernel_rem_pio2+0x4e0>
   1cdec:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   1cdee:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1cdf2:	2b03      	cmp	r3, #3
   1cdf4:	d82b      	bhi.n	1ce4e <__kernel_rem_pio2+0x566>
   1cdf6:	e8df f013 	tbh	[pc, r3, lsl #1]
   1cdfa:	00f5      	.short	0x00f5
   1cdfc:	00e400e4 	.word	0x00e400e4
   1ce00:	0067      	.short	0x0067
   1ce02:	ab48      	add	r3, sp, #288	; 0x120
   1ce04:	2400      	movs	r4, #0
   1ce06:	2500      	movs	r5, #0
   1ce08:	9303      	str	r3, [sp, #12]
   1ce0a:	9903      	ldr	r1, [sp, #12]
   1ce0c:	462b      	mov	r3, r5
   1ce0e:	4622      	mov	r2, r4
   1ce10:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ce14:	f7fb fb08 	bl	18428 <__aeabi_dsub>
   1ce18:	9b04      	ldr	r3, [sp, #16]
   1ce1a:	2b00      	cmp	r3, #0
   1ce1c:	f040 813e 	bne.w	1d09c <__kernel_rem_pio2+0x7b4>
   1ce20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ce22:	f1b9 0f00 	cmp.w	r9, #0
   1ce26:	e9c3 4500 	strd	r4, r5, [r3]
   1ce2a:	dd0d      	ble.n	1ce48 <__kernel_rem_pio2+0x560>
   1ce2c:	ad4a      	add	r5, sp, #296	; 0x128
   1ce2e:	2401      	movs	r4, #1
   1ce30:	3401      	adds	r4, #1
   1ce32:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   1ce36:	f7fb faf9 	bl	1842c <__adddf3>
   1ce3a:	45a1      	cmp	r9, r4
   1ce3c:	daf8      	bge.n	1ce30 <__kernel_rem_pio2+0x548>
   1ce3e:	9b04      	ldr	r3, [sp, #16]
   1ce40:	b113      	cbz	r3, 1ce48 <__kernel_rem_pio2+0x560>
   1ce42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1ce46:	4619      	mov	r1, r3
   1ce48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ce4a:	e9c3 0102 	strd	r0, r1, [r3, #8]
   1ce4e:	9b07      	ldr	r3, [sp, #28]
   1ce50:	f003 0007 	and.w	r0, r3, #7
   1ce54:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1ce58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce5c:	9b01      	ldr	r3, [sp, #4]
   1ce5e:	a90c      	add	r1, sp, #48	; 0x30
   1ce60:	1e5a      	subs	r2, r3, #1
   1ce62:	ab0c      	add	r3, sp, #48	; 0x30
   1ce64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1ce68:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1ce6c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1ce70:	e6e6      	b.n	1cc40 <__kernel_rem_pio2+0x358>
   1ce72:	9b01      	ldr	r3, [sp, #4]
   1ce74:	f108 0801 	add.w	r8, r8, #1
   1ce78:	2502      	movs	r5, #2
   1ce7a:	2b00      	cmp	r3, #0
   1ce7c:	f73f aebe 	bgt.w	1cbfc <__kernel_rem_pio2+0x314>
   1ce80:	4632      	mov	r2, r6
   1ce82:	463b      	mov	r3, r7
   1ce84:	2000      	movs	r0, #0
   1ce86:	490a      	ldr	r1, [pc, #40]	; (1ceb0 <__kernel_rem_pio2+0x5c8>)
   1ce88:	f7fb face 	bl	18428 <__aeabi_dsub>
   1ce8c:	4606      	mov	r6, r0
   1ce8e:	460f      	mov	r7, r1
   1ce90:	e625      	b.n	1cade <__kernel_rem_pio2+0x1f6>
   1ce92:	2100      	movs	r1, #0
   1ce94:	f06f 0317 	mvn.w	r3, #23
   1ce98:	9107      	str	r1, [sp, #28]
   1ce9a:	e545      	b.n	1c928 <__kernel_rem_pio2+0x40>
   1ce9c:	f3af 8000 	nop.w
   1cea0:	00000000 	.word	0x00000000
   1cea4:	3ff00000 	.word	0x3ff00000
   1cea8:	40000000 	.word	0x40000000
   1ceac:	3ff921fb 	.word	0x3ff921fb
   1ceb0:	3ff00000 	.word	0x3ff00000
   1ceb4:	3fe00000 	.word	0x3fe00000
   1ceb8:	3ffffffe 	.word	0x3ffffffe
   1cebc:	3e700000 	.word	0x3e700000
   1cec0:	00043220 	.word	0x00043220
   1cec4:	ab48      	add	r3, sp, #288	; 0x120
   1cec6:	9303      	str	r3, [sp, #12]
   1cec8:	f1b9 0f00 	cmp.w	r9, #0
   1cecc:	f340 8119 	ble.w	1d102 <__kernel_rem_pio2+0x81a>
   1ced0:	9a03      	ldr	r2, [sp, #12]
   1ced2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
   1ced6:	eb02 08c9 	add.w	r8, r2, r9, lsl #3
   1ceda:	9301      	str	r3, [sp, #4]
   1cedc:	e9d8 ab00 	ldrd	sl, fp, [r8]
   1cee0:	e978 6702 	ldrd	r6, r7, [r8, #-8]!
   1cee4:	4652      	mov	r2, sl
   1cee6:	465b      	mov	r3, fp
   1cee8:	4630      	mov	r0, r6
   1ceea:	4639      	mov	r1, r7
   1ceec:	f7fb fa9e 	bl	1842c <__adddf3>
   1cef0:	4604      	mov	r4, r0
   1cef2:	460d      	mov	r5, r1
   1cef4:	4602      	mov	r2, r0
   1cef6:	460b      	mov	r3, r1
   1cef8:	4630      	mov	r0, r6
   1cefa:	4639      	mov	r1, r7
   1cefc:	f7fb fa94 	bl	18428 <__aeabi_dsub>
   1cf00:	465b      	mov	r3, fp
   1cf02:	4652      	mov	r2, sl
   1cf04:	46ab      	mov	fp, r5
   1cf06:	f7fb fa91 	bl	1842c <__adddf3>
   1cf0a:	9b03      	ldr	r3, [sp, #12]
   1cf0c:	46a2      	mov	sl, r4
   1cf0e:	4543      	cmp	r3, r8
   1cf10:	e9c8 0102 	strd	r0, r1, [r8, #8]
   1cf14:	e9c8 4500 	strd	r4, r5, [r8]
   1cf18:	d1e2      	bne.n	1cee0 <__kernel_rem_pio2+0x5f8>
   1cf1a:	f1b9 0f01 	cmp.w	r9, #1
   1cf1e:	f340 80f0 	ble.w	1d102 <__kernel_rem_pio2+0x81a>
   1cf22:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   1cf26:	9b01      	ldr	r3, [sp, #4]
   1cf28:	9903      	ldr	r1, [sp, #12]
   1cf2a:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
   1cf2e:	444a      	add	r2, r9
   1cf30:	440b      	add	r3, r1
   1cf32:	00d2      	lsls	r2, r2, #3
   1cf34:	f102 0b08 	add.w	fp, r2, #8
   1cf38:	9201      	str	r2, [sp, #4]
   1cf3a:	e9d3 6700 	ldrd	r6, r7, [r3]
   1cf3e:	448b      	add	fp, r1
   1cf40:	4632      	mov	r2, r6
   1cf42:	463b      	mov	r3, r7
   1cf44:	e97b 8902 	ldrd	r8, r9, [fp, #-8]!
   1cf48:	4640      	mov	r0, r8
   1cf4a:	4649      	mov	r1, r9
   1cf4c:	f7fb fa6e 	bl	1842c <__adddf3>
   1cf50:	4604      	mov	r4, r0
   1cf52:	460d      	mov	r5, r1
   1cf54:	4602      	mov	r2, r0
   1cf56:	460b      	mov	r3, r1
   1cf58:	4640      	mov	r0, r8
   1cf5a:	4649      	mov	r1, r9
   1cf5c:	f7fb fa64 	bl	18428 <__aeabi_dsub>
   1cf60:	4632      	mov	r2, r6
   1cf62:	463b      	mov	r3, r7
   1cf64:	4626      	mov	r6, r4
   1cf66:	f7fb fa61 	bl	1842c <__adddf3>
   1cf6a:	45da      	cmp	sl, fp
   1cf6c:	462f      	mov	r7, r5
   1cf6e:	e9cb 0102 	strd	r0, r1, [fp, #8]
   1cf72:	e9cb 4500 	strd	r4, r5, [fp]
   1cf76:	d1e3      	bne.n	1cf40 <__kernel_rem_pio2+0x658>
   1cf78:	9c01      	ldr	r4, [sp, #4]
   1cf7a:	2000      	movs	r0, #0
   1cf7c:	9b03      	ldr	r3, [sp, #12]
   1cf7e:	2100      	movs	r1, #0
   1cf80:	3410      	adds	r4, #16
   1cf82:	f103 0510 	add.w	r5, r3, #16
   1cf86:	441c      	add	r4, r3
   1cf88:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   1cf8c:	f7fb fa4e 	bl	1842c <__adddf3>
   1cf90:	42a5      	cmp	r5, r4
   1cf92:	d1f9      	bne.n	1cf88 <__kernel_rem_pio2+0x6a0>
   1cf94:	9c03      	ldr	r4, [sp, #12]
   1cf96:	9e04      	ldr	r6, [sp, #16]
   1cf98:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cf9c:	e9d4 4502 	ldrd	r4, r5, [r4, #8]
   1cfa0:	2e00      	cmp	r6, #0
   1cfa2:	f040 8086 	bne.w	1d0b2 <__kernel_rem_pio2+0x7ca>
   1cfa6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1cfa8:	e9c6 2300 	strd	r2, r3, [r6]
   1cfac:	9b07      	ldr	r3, [sp, #28]
   1cfae:	e9c6 0104 	strd	r0, r1, [r6, #16]
   1cfb2:	f003 0007 	and.w	r0, r3, #7
   1cfb6:	e9c6 4502 	strd	r4, r5, [r6, #8]
   1cfba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1cfbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cfc2:	9e06      	ldr	r6, [sp, #24]
   1cfc4:	2400      	movs	r4, #0
   1cfc6:	9f03      	ldr	r7, [sp, #12]
   1cfc8:	2500      	movs	r5, #0
   1cfca:	3608      	adds	r6, #8
   1cfcc:	443e      	add	r6, r7
   1cfce:	4620      	mov	r0, r4
   1cfd0:	4629      	mov	r1, r5
   1cfd2:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
   1cfd6:	f7fb fa29 	bl	1842c <__adddf3>
   1cfda:	4604      	mov	r4, r0
   1cfdc:	42b7      	cmp	r7, r6
   1cfde:	460d      	mov	r5, r1
   1cfe0:	d1f5      	bne.n	1cfce <__kernel_rem_pio2+0x6e6>
   1cfe2:	e712      	b.n	1ce0a <__kernel_rem_pio2+0x522>
   1cfe4:	9c06      	ldr	r4, [sp, #24]
   1cfe6:	2000      	movs	r0, #0
   1cfe8:	9d03      	ldr	r5, [sp, #12]
   1cfea:	2100      	movs	r1, #0
   1cfec:	3408      	adds	r4, #8
   1cfee:	442c      	add	r4, r5
   1cff0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   1cff4:	f7fb fa1a 	bl	1842c <__adddf3>
   1cff8:	42a5      	cmp	r5, r4
   1cffa:	d1f9      	bne.n	1cff0 <__kernel_rem_pio2+0x708>
   1cffc:	9b04      	ldr	r3, [sp, #16]
   1cffe:	b113      	cbz	r3, 1d006 <__kernel_rem_pio2+0x71e>
   1d000:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1d004:	4619      	mov	r1, r3
   1d006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d008:	e9c3 0100 	strd	r0, r1, [r3]
   1d00c:	9b07      	ldr	r3, [sp, #28]
   1d00e:	f003 0007 	and.w	r0, r3, #7
   1d012:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1d016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d01a:	2400      	movs	r4, #0
   1d01c:	e5fe      	b.n	1cc1c <__kernel_rem_pio2+0x334>
   1d01e:	9c06      	ldr	r4, [sp, #24]
   1d020:	f8cd 801c 	str.w	r8, [sp, #28]
   1d024:	4260      	negs	r0, r4
   1d026:	9504      	str	r5, [sp, #16]
   1d028:	ec47 6b10 	vmov	d0, r6, r7
   1d02c:	f000 f9c0 	bl	1d3b0 <scalbn>
   1d030:	2200      	movs	r2, #0
   1d032:	ee10 0a10 	vmov	r0, s0
   1d036:	4b34      	ldr	r3, [pc, #208]	; (1d108 <__kernel_rem_pio2+0x820>)
   1d038:	ec57 6b10 	vmov	r6, r7, d0
   1d03c:	4639      	mov	r1, r7
   1d03e:	f7fb fe31 	bl	18ca4 <__aeabi_dcmpge>
   1d042:	b308      	cbz	r0, 1d088 <__kernel_rem_pio2+0x7a0>
   1d044:	3418      	adds	r4, #24
   1d046:	2200      	movs	r2, #0
   1d048:	4b30      	ldr	r3, [pc, #192]	; (1d10c <__kernel_rem_pio2+0x824>)
   1d04a:	4630      	mov	r0, r6
   1d04c:	4639      	mov	r1, r7
   1d04e:	9406      	str	r4, [sp, #24]
   1d050:	f7fb fba2 	bl	18798 <__aeabi_dmul>
   1d054:	9d01      	ldr	r5, [sp, #4]
   1d056:	f7fb fe39 	bl	18ccc <__aeabi_d2iz>
   1d05a:	4604      	mov	r4, r0
   1d05c:	f7fb fb32 	bl	186c4 <__aeabi_i2d>
   1d060:	2200      	movs	r2, #0
   1d062:	4b29      	ldr	r3, [pc, #164]	; (1d108 <__kernel_rem_pio2+0x820>)
   1d064:	f105 0901 	add.w	r9, r5, #1
   1d068:	f7fb fb96 	bl	18798 <__aeabi_dmul>
   1d06c:	460b      	mov	r3, r1
   1d06e:	4602      	mov	r2, r0
   1d070:	4639      	mov	r1, r7
   1d072:	4630      	mov	r0, r6
   1d074:	f7fb f9d8 	bl	18428 <__aeabi_dsub>
   1d078:	f7fb fe28 	bl	18ccc <__aeabi_d2iz>
   1d07c:	ab0c      	add	r3, sp, #48	; 0x30
   1d07e:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
   1d082:	f843 4029 	str.w	r4, [r3, r9, lsl #2]
   1d086:	e645      	b.n	1cd14 <__kernel_rem_pio2+0x42c>
   1d088:	4630      	mov	r0, r6
   1d08a:	4639      	mov	r1, r7
   1d08c:	9c01      	ldr	r4, [sp, #4]
   1d08e:	f7fb fe1d 	bl	18ccc <__aeabi_d2iz>
   1d092:	aa0c      	add	r2, sp, #48	; 0x30
   1d094:	46a1      	mov	r9, r4
   1d096:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
   1d09a:	e63b      	b.n	1cd14 <__kernel_rem_pio2+0x42c>
   1d09c:	4622      	mov	r2, r4
   1d09e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   1d0a2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1d0a4:	f1b9 0f00 	cmp.w	r9, #0
   1d0a8:	e9c4 2300 	strd	r2, r3, [r4]
   1d0ac:	f73f aebe 	bgt.w	1ce2c <__kernel_rem_pio2+0x544>
   1d0b0:	e6c7      	b.n	1ce42 <__kernel_rem_pio2+0x55a>
   1d0b2:	f103 4700 	add.w	r7, r3, #2147483648	; 0x80000000
   1d0b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1d0ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1d0bc:	4626      	mov	r6, r4
   1d0be:	4694      	mov	ip, r2
   1d0c0:	f105 4400 	add.w	r4, r5, #2147483648	; 0x80000000
   1d0c4:	e9c1 0304 	strd	r0, r3, [r1, #16]
   1d0c8:	9b07      	ldr	r3, [sp, #28]
   1d0ca:	f003 0007 	and.w	r0, r3, #7
   1d0ce:	e9c1 c700 	strd	ip, r7, [r1]
   1d0d2:	e9c1 6402 	strd	r6, r4, [r1, #8]
   1d0d6:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1d0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d0de:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   1d0e0:	2b03      	cmp	r3, #3
   1d0e2:	f63f aeb4 	bhi.w	1ce4e <__kernel_rem_pio2+0x566>
   1d0e6:	a201      	add	r2, pc, #4	; (adr r2, 1d0ec <__kernel_rem_pio2+0x804>)
   1d0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1d0ec:	0001d0fd 	.word	0x0001d0fd
   1d0f0:	0001ce03 	.word	0x0001ce03
   1d0f4:	0001ce03 	.word	0x0001ce03
   1d0f8:	0001cec5 	.word	0x0001cec5
   1d0fc:	2000      	movs	r0, #0
   1d0fe:	2100      	movs	r1, #0
   1d100:	e77c      	b.n	1cffc <__kernel_rem_pio2+0x714>
   1d102:	2000      	movs	r0, #0
   1d104:	2100      	movs	r1, #0
   1d106:	e745      	b.n	1cf94 <__kernel_rem_pio2+0x6ac>
   1d108:	41700000 	.word	0x41700000
   1d10c:	3e700000 	.word	0x3e700000

0001d110 <__kernel_sin>:
   1d110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d114:	ec55 4b10 	vmov	r4, r5, d0
   1d118:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   1d11c:	4682      	mov	sl, r0
   1d11e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   1d122:	ed2d 8b02 	vpush	{d8}
   1d126:	eeb0 8a41 	vmov.f32	s16, s2
   1d12a:	eef0 8a61 	vmov.f32	s17, s3
   1d12e:	b083      	sub	sp, #12
   1d130:	da07      	bge.n	1d142 <__kernel_sin+0x32>
   1d132:	ee10 0a10 	vmov	r0, s0
   1d136:	4629      	mov	r1, r5
   1d138:	f7fb fdc8 	bl	18ccc <__aeabi_d2iz>
   1d13c:	2800      	cmp	r0, #0
   1d13e:	f000 808e 	beq.w	1d25e <__kernel_sin+0x14e>
   1d142:	4622      	mov	r2, r4
   1d144:	462b      	mov	r3, r5
   1d146:	4620      	mov	r0, r4
   1d148:	4629      	mov	r1, r5
   1d14a:	f7fb fb25 	bl	18798 <__aeabi_dmul>
   1d14e:	4606      	mov	r6, r0
   1d150:	460f      	mov	r7, r1
   1d152:	4602      	mov	r2, r0
   1d154:	460b      	mov	r3, r1
   1d156:	4620      	mov	r0, r4
   1d158:	4629      	mov	r1, r5
   1d15a:	f7fb fb1d 	bl	18798 <__aeabi_dmul>
   1d15e:	4680      	mov	r8, r0
   1d160:	4689      	mov	r9, r1
   1d162:	4630      	mov	r0, r6
   1d164:	4639      	mov	r1, r7
   1d166:	a345      	add	r3, pc, #276	; (adr r3, 1d27c <__kernel_sin+0x16c>)
   1d168:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d16c:	f7fb fb14 	bl	18798 <__aeabi_dmul>
   1d170:	a344      	add	r3, pc, #272	; (adr r3, 1d284 <__kernel_sin+0x174>)
   1d172:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d176:	f7fb f957 	bl	18428 <__aeabi_dsub>
   1d17a:	4632      	mov	r2, r6
   1d17c:	463b      	mov	r3, r7
   1d17e:	f7fb fb0b 	bl	18798 <__aeabi_dmul>
   1d182:	a342      	add	r3, pc, #264	; (adr r3, 1d28c <__kernel_sin+0x17c>)
   1d184:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d188:	f7fb f950 	bl	1842c <__adddf3>
   1d18c:	4632      	mov	r2, r6
   1d18e:	463b      	mov	r3, r7
   1d190:	f7fb fb02 	bl	18798 <__aeabi_dmul>
   1d194:	a33f      	add	r3, pc, #252	; (adr r3, 1d294 <__kernel_sin+0x184>)
   1d196:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d19a:	f7fb f945 	bl	18428 <__aeabi_dsub>
   1d19e:	4632      	mov	r2, r6
   1d1a0:	463b      	mov	r3, r7
   1d1a2:	f7fb faf9 	bl	18798 <__aeabi_dmul>
   1d1a6:	a33d      	add	r3, pc, #244	; (adr r3, 1d29c <__kernel_sin+0x18c>)
   1d1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d1ac:	f7fb f93e 	bl	1842c <__adddf3>
   1d1b0:	e9cd 0100 	strd	r0, r1, [sp]
   1d1b4:	f1ba 0f00 	cmp.w	sl, #0
   1d1b8:	d037      	beq.n	1d22a <__kernel_sin+0x11a>
   1d1ba:	2200      	movs	r2, #0
   1d1bc:	4b2e      	ldr	r3, [pc, #184]	; (1d278 <__kernel_sin+0x168>)
   1d1be:	ec51 0b18 	vmov	r0, r1, d8
   1d1c2:	f7fb fae9 	bl	18798 <__aeabi_dmul>
   1d1c6:	4682      	mov	sl, r0
   1d1c8:	468b      	mov	fp, r1
   1d1ca:	4640      	mov	r0, r8
   1d1cc:	4649      	mov	r1, r9
   1d1ce:	e9dd 2300 	ldrd	r2, r3, [sp]
   1d1d2:	f7fb fae1 	bl	18798 <__aeabi_dmul>
   1d1d6:	4602      	mov	r2, r0
   1d1d8:	460b      	mov	r3, r1
   1d1da:	4650      	mov	r0, sl
   1d1dc:	4659      	mov	r1, fp
   1d1de:	f7fb f923 	bl	18428 <__aeabi_dsub>
   1d1e2:	4632      	mov	r2, r6
   1d1e4:	463b      	mov	r3, r7
   1d1e6:	f7fb fad7 	bl	18798 <__aeabi_dmul>
   1d1ea:	ec53 2b18 	vmov	r2, r3, d8
   1d1ee:	f7fb f91b 	bl	18428 <__aeabi_dsub>
   1d1f2:	4606      	mov	r6, r0
   1d1f4:	460f      	mov	r7, r1
   1d1f6:	4640      	mov	r0, r8
   1d1f8:	4649      	mov	r1, r9
   1d1fa:	a31d      	add	r3, pc, #116	; (adr r3, 1d270 <__kernel_sin+0x160>)
   1d1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d200:	f7fb faca 	bl	18798 <__aeabi_dmul>
   1d204:	4602      	mov	r2, r0
   1d206:	460b      	mov	r3, r1
   1d208:	4630      	mov	r0, r6
   1d20a:	4639      	mov	r1, r7
   1d20c:	f7fb f90e 	bl	1842c <__adddf3>
   1d210:	4602      	mov	r2, r0
   1d212:	460b      	mov	r3, r1
   1d214:	4620      	mov	r0, r4
   1d216:	4629      	mov	r1, r5
   1d218:	f7fb f906 	bl	18428 <__aeabi_dsub>
   1d21c:	ec41 0b10 	vmov	d0, r0, r1
   1d220:	b003      	add	sp, #12
   1d222:	ecbd 8b02 	vpop	{d8}
   1d226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d22a:	4602      	mov	r2, r0
   1d22c:	460b      	mov	r3, r1
   1d22e:	4630      	mov	r0, r6
   1d230:	4639      	mov	r1, r7
   1d232:	f7fb fab1 	bl	18798 <__aeabi_dmul>
   1d236:	a30e      	add	r3, pc, #56	; (adr r3, 1d270 <__kernel_sin+0x160>)
   1d238:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d23c:	f7fb f8f4 	bl	18428 <__aeabi_dsub>
   1d240:	4642      	mov	r2, r8
   1d242:	464b      	mov	r3, r9
   1d244:	f7fb faa8 	bl	18798 <__aeabi_dmul>
   1d248:	4622      	mov	r2, r4
   1d24a:	462b      	mov	r3, r5
   1d24c:	f7fb f8ee 	bl	1842c <__adddf3>
   1d250:	ec41 0b10 	vmov	d0, r0, r1
   1d254:	b003      	add	sp, #12
   1d256:	ecbd 8b02 	vpop	{d8}
   1d25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d25e:	ec45 4b10 	vmov	d0, r4, r5
   1d262:	b003      	add	sp, #12
   1d264:	ecbd 8b02 	vpop	{d8}
   1d268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d26c:	f3af 8000 	nop.w
   1d270:	55555549 	.word	0x55555549
   1d274:	3fc55555 	.word	0x3fc55555
   1d278:	3fe00000 	.word	0x3fe00000
   1d27c:	5acfd57c 	.word	0x5acfd57c
   1d280:	3de5d93a 	.word	0x3de5d93a
   1d284:	8a2b9ceb 	.word	0x8a2b9ceb
   1d288:	3e5ae5e6 	.word	0x3e5ae5e6
   1d28c:	57b1fe7d 	.word	0x57b1fe7d
   1d290:	3ec71de3 	.word	0x3ec71de3
   1d294:	19c161d5 	.word	0x19c161d5
   1d298:	3f2a01a0 	.word	0x3f2a01a0
   1d29c:	1110f8a6 	.word	0x1110f8a6
   1d2a0:	3f811111 	.word	0x3f811111
   1d2a4:	00000000 	.word	0x00000000

0001d2a8 <floor>:
   1d2a8:	ec51 0b10 	vmov	r0, r1, d0
   1d2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d2ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
   1d2b2:	460c      	mov	r4, r1
   1d2b4:	ee10 6a10 	vmov	r6, s0
   1d2b8:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   1d2bc:	2d13      	cmp	r5, #19
   1d2be:	dc30      	bgt.n	1d322 <floor+0x7a>
   1d2c0:	2d00      	cmp	r5, #0
   1d2c2:	db1e      	blt.n	1d302 <floor+0x5a>
   1d2c4:	4f38      	ldr	r7, [pc, #224]	; (1d3a8 <floor+0x100>)
   1d2c6:	412f      	asrs	r7, r5
   1d2c8:	ea07 0301 	and.w	r3, r7, r1
   1d2cc:	4303      	orrs	r3, r0
   1d2ce:	d02d      	beq.n	1d32c <floor+0x84>
   1d2d0:	a333      	add	r3, pc, #204	; (adr r3, 1d3a0 <floor+0xf8>)
   1d2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d2d6:	f7fb f8a9 	bl	1842c <__adddf3>
   1d2da:	2200      	movs	r2, #0
   1d2dc:	2300      	movs	r3, #0
   1d2de:	f7fb fceb 	bl	18cb8 <__aeabi_dcmpgt>
   1d2e2:	b148      	cbz	r0, 1d2f8 <floor+0x50>
   1d2e4:	2c00      	cmp	r4, #0
   1d2e6:	da04      	bge.n	1d2f2 <floor+0x4a>
   1d2e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1d2ec:	fa43 f505 	asr.w	r5, r3, r5
   1d2f0:	442c      	add	r4, r5
   1d2f2:	ea24 0407 	bic.w	r4, r4, r7
   1d2f6:	2600      	movs	r6, #0
   1d2f8:	4623      	mov	r3, r4
   1d2fa:	4632      	mov	r2, r6
   1d2fc:	ec43 2b10 	vmov	d0, r2, r3
   1d300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d302:	a327      	add	r3, pc, #156	; (adr r3, 1d3a0 <floor+0xf8>)
   1d304:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d308:	f7fb f890 	bl	1842c <__adddf3>
   1d30c:	2200      	movs	r2, #0
   1d30e:	2300      	movs	r3, #0
   1d310:	f7fb fcd2 	bl	18cb8 <__aeabi_dcmpgt>
   1d314:	2800      	cmp	r0, #0
   1d316:	d0ef      	beq.n	1d2f8 <floor+0x50>
   1d318:	2c00      	cmp	r4, #0
   1d31a:	db29      	blt.n	1d370 <floor+0xc8>
   1d31c:	2600      	movs	r6, #0
   1d31e:	4634      	mov	r4, r6
   1d320:	e7ea      	b.n	1d2f8 <floor+0x50>
   1d322:	2d33      	cmp	r5, #51	; 0x33
   1d324:	dd05      	ble.n	1d332 <floor+0x8a>
   1d326:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   1d32a:	d019      	beq.n	1d360 <floor+0xb8>
   1d32c:	ec41 0b10 	vmov	d0, r0, r1
   1d330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d332:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   1d336:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1d33a:	40df      	lsrs	r7, r3
   1d33c:	4207      	tst	r7, r0
   1d33e:	d0f5      	beq.n	1d32c <floor+0x84>
   1d340:	a317      	add	r3, pc, #92	; (adr r3, 1d3a0 <floor+0xf8>)
   1d342:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d346:	f7fb f871 	bl	1842c <__adddf3>
   1d34a:	2200      	movs	r2, #0
   1d34c:	2300      	movs	r3, #0
   1d34e:	f7fb fcb3 	bl	18cb8 <__aeabi_dcmpgt>
   1d352:	2800      	cmp	r0, #0
   1d354:	d0d0      	beq.n	1d2f8 <floor+0x50>
   1d356:	2c00      	cmp	r4, #0
   1d358:	db13      	blt.n	1d382 <floor+0xda>
   1d35a:	ea26 0607 	bic.w	r6, r6, r7
   1d35e:	e7cb      	b.n	1d2f8 <floor+0x50>
   1d360:	ee10 2a10 	vmov	r2, s0
   1d364:	460b      	mov	r3, r1
   1d366:	f7fb f861 	bl	1842c <__adddf3>
   1d36a:	ec41 0b10 	vmov	d0, r0, r1
   1d36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d370:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   1d374:	4a0d      	ldr	r2, [pc, #52]	; (1d3ac <floor+0x104>)
   1d376:	4333      	orrs	r3, r6
   1d378:	2600      	movs	r6, #0
   1d37a:	42b3      	cmp	r3, r6
   1d37c:	bf18      	it	ne
   1d37e:	4614      	movne	r4, r2
   1d380:	e7ba      	b.n	1d2f8 <floor+0x50>
   1d382:	2d14      	cmp	r5, #20
   1d384:	d008      	beq.n	1d398 <floor+0xf0>
   1d386:	2301      	movs	r3, #1
   1d388:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   1d38c:	fa03 f505 	lsl.w	r5, r3, r5
   1d390:	19ae      	adds	r6, r5, r6
   1d392:	bf28      	it	cs
   1d394:	18e4      	addcs	r4, r4, r3
   1d396:	e7e0      	b.n	1d35a <floor+0xb2>
   1d398:	3401      	adds	r4, #1
   1d39a:	e7de      	b.n	1d35a <floor+0xb2>
   1d39c:	f3af 8000 	nop.w
   1d3a0:	8800759c 	.word	0x8800759c
   1d3a4:	7e37e43c 	.word	0x7e37e43c
   1d3a8:	000fffff 	.word	0x000fffff
   1d3ac:	bff00000 	.word	0xbff00000

0001d3b0 <scalbn>:
   1d3b0:	b538      	push	{r3, r4, r5, lr}
   1d3b2:	ec53 2b10 	vmov	r2, r3, d0
   1d3b6:	f3c3 510a 	ubfx	r1, r3, #20, #11
   1d3ba:	461c      	mov	r4, r3
   1d3bc:	4605      	mov	r5, r0
   1d3be:	bb81      	cbnz	r1, 1d422 <scalbn+0x72>
   1d3c0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   1d3c4:	ee10 1a10 	vmov	r1, s0
   1d3c8:	4321      	orrs	r1, r4
   1d3ca:	d029      	beq.n	1d420 <scalbn+0x70>
   1d3cc:	4c3c      	ldr	r4, [pc, #240]	; (1d4c0 <scalbn+0x110>)
   1d3ce:	4619      	mov	r1, r3
   1d3d0:	2200      	movs	r2, #0
   1d3d2:	4b3c      	ldr	r3, [pc, #240]	; (1d4c4 <scalbn+0x114>)
   1d3d4:	ee10 0a10 	vmov	r0, s0
   1d3d8:	f7fb f9de 	bl	18798 <__aeabi_dmul>
   1d3dc:	42a5      	cmp	r5, r4
   1d3de:	4602      	mov	r2, r0
   1d3e0:	460b      	mov	r3, r1
   1d3e2:	db16      	blt.n	1d412 <scalbn+0x62>
   1d3e4:	460c      	mov	r4, r1
   1d3e6:	f3c1 510a 	ubfx	r1, r1, #20, #11
   1d3ea:	3936      	subs	r1, #54	; 0x36
   1d3ec:	4429      	add	r1, r5
   1d3ee:	f240 70fe 	movw	r0, #2046	; 0x7fe
   1d3f2:	4281      	cmp	r1, r0
   1d3f4:	dc21      	bgt.n	1d43a <scalbn+0x8a>
   1d3f6:	2900      	cmp	r1, #0
   1d3f8:	dc45      	bgt.n	1d486 <scalbn+0xd6>
   1d3fa:	f111 0f35 	cmn.w	r1, #53	; 0x35
   1d3fe:	da34      	bge.n	1d46a <scalbn+0xba>
   1d400:	f24c 3150 	movw	r1, #50000	; 0xc350
   1d404:	428d      	cmp	r5, r1
   1d406:	dc18      	bgt.n	1d43a <scalbn+0x8a>
   1d408:	2b00      	cmp	r3, #0
   1d40a:	a125      	add	r1, pc, #148	; (adr r1, 1d4a0 <scalbn+0xf0>)
   1d40c:	e9d1 0100 	ldrd	r0, r1, [r1]
   1d410:	db40      	blt.n	1d494 <scalbn+0xe4>
   1d412:	a323      	add	r3, pc, #140	; (adr r3, 1d4a0 <scalbn+0xf0>)
   1d414:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d418:	f7fb f9be 	bl	18798 <__aeabi_dmul>
   1d41c:	ec41 0b10 	vmov	d0, r0, r1
   1d420:	bd38      	pop	{r3, r4, r5, pc}
   1d422:	f240 70ff 	movw	r0, #2047	; 0x7ff
   1d426:	4281      	cmp	r1, r0
   1d428:	d1e0      	bne.n	1d3ec <scalbn+0x3c>
   1d42a:	ee10 0a10 	vmov	r0, s0
   1d42e:	4619      	mov	r1, r3
   1d430:	f7fa fffc 	bl	1842c <__adddf3>
   1d434:	ec41 0b10 	vmov	d0, r0, r1
   1d438:	bd38      	pop	{r3, r4, r5, pc}
   1d43a:	2b00      	cmp	r3, #0
   1d43c:	a11a      	add	r1, pc, #104	; (adr r1, 1d4a8 <scalbn+0xf8>)
   1d43e:	e9d1 0100 	ldrd	r0, r1, [r1]
   1d442:	db07      	blt.n	1d454 <scalbn+0xa4>
   1d444:	a318      	add	r3, pc, #96	; (adr r3, 1d4a8 <scalbn+0xf8>)
   1d446:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d44a:	f7fb f9a5 	bl	18798 <__aeabi_dmul>
   1d44e:	ec41 0b10 	vmov	d0, r0, r1
   1d452:	bd38      	pop	{r3, r4, r5, pc}
   1d454:	a116      	add	r1, pc, #88	; (adr r1, 1d4b0 <scalbn+0x100>)
   1d456:	e9d1 0100 	ldrd	r0, r1, [r1]
   1d45a:	a313      	add	r3, pc, #76	; (adr r3, 1d4a8 <scalbn+0xf8>)
   1d45c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d460:	f7fb f99a 	bl	18798 <__aeabi_dmul>
   1d464:	ec41 0b10 	vmov	d0, r0, r1
   1d468:	e7f3      	b.n	1d452 <scalbn+0xa2>
   1d46a:	4817      	ldr	r0, [pc, #92]	; (1d4c8 <scalbn+0x118>)
   1d46c:	3136      	adds	r1, #54	; 0x36
   1d46e:	4020      	ands	r0, r4
   1d470:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
   1d474:	4610      	mov	r0, r2
   1d476:	2200      	movs	r2, #0
   1d478:	4619      	mov	r1, r3
   1d47a:	4b14      	ldr	r3, [pc, #80]	; (1d4cc <scalbn+0x11c>)
   1d47c:	f7fb f98c 	bl	18798 <__aeabi_dmul>
   1d480:	ec41 0b10 	vmov	d0, r0, r1
   1d484:	bd38      	pop	{r3, r4, r5, pc}
   1d486:	4810      	ldr	r0, [pc, #64]	; (1d4c8 <scalbn+0x118>)
   1d488:	4020      	ands	r0, r4
   1d48a:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
   1d48e:	ec43 2b10 	vmov	d0, r2, r3
   1d492:	bd38      	pop	{r3, r4, r5, pc}
   1d494:	a108      	add	r1, pc, #32	; (adr r1, 1d4b8 <scalbn+0x108>)
   1d496:	e9d1 0100 	ldrd	r0, r1, [r1]
   1d49a:	e7ba      	b.n	1d412 <scalbn+0x62>
   1d49c:	f3af 8000 	nop.w
   1d4a0:	c2f8f359 	.word	0xc2f8f359
   1d4a4:	01a56e1f 	.word	0x01a56e1f
   1d4a8:	8800759c 	.word	0x8800759c
   1d4ac:	7e37e43c 	.word	0x7e37e43c
   1d4b0:	8800759c 	.word	0x8800759c
   1d4b4:	fe37e43c 	.word	0xfe37e43c
   1d4b8:	c2f8f359 	.word	0xc2f8f359
   1d4bc:	81a56e1f 	.word	0x81a56e1f
   1d4c0:	ffff3cb0 	.word	0xffff3cb0
   1d4c4:	43500000 	.word	0x43500000
   1d4c8:	800fffff 	.word	0x800fffff
   1d4cc:	3c900000 	.word	0x3c900000

0001d4d0 <set_gps_enable>:
		cloud_error_handler(err);
	}
}

static void set_gps_enable(const bool enable)
{
   1d4d0:	b510      	push	{r4, lr}
   1d4d2:	4604      	mov	r4, r0
	if (enable == gps_control_is_enabled()) {
   1d4d4:	f001 fa54 	bl	1e980 <gps_control_is_enabled>
   1d4d8:	42a0      	cmp	r0, r4
   1d4da:	d012      	beq.n	1d502 <set_gps_enable+0x32>
		return;
	}

	if (enable) {
   1d4dc:	b154      	cbz	r4, 1d4f4 <set_gps_enable+0x24>
		printk("Starting GPS\n");
   1d4de:	4809      	ldr	r0, [pc, #36]	; (1d504 <set_gps_enable+0x34>)
   1d4e0:	f021 ffb1 	bl	3f446 <printk>
		gps_control_enable();
   1d4e4:	f001 fa8e 	bl	1ea04 <gps_control_enable>

	} else {
		printk("Stopping GPS\n");
		gps_control_disable();
	}
}
   1d4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		gps_control_start(K_SECONDS(1));
   1d4ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1d4f0:	f001 ba74 	b.w	1e9dc <gps_control_start>
		printk("Stopping GPS\n");
   1d4f4:	4804      	ldr	r0, [pc, #16]	; (1d508 <set_gps_enable+0x38>)
   1d4f6:	f021 ffa6 	bl	3f446 <printk>
}
   1d4fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		gps_control_disable();
   1d4fe:	f001 ba5d 	b.w	1e9bc <gps_control_disable>
}
   1d502:	bd10      	pop	{r4, pc}
   1d504:	000456e3 	.word	0x000456e3
   1d508:	000456f1 	.word	0x000456f1

0001d50c <long_press_handler>:

static void long_press_handler(struct k_work *work)
{
   1d50c:	b508      	push	{r3, lr}
	if (!atomic_get(&send_data_enable)) {
   1d50e:	4809      	ldr	r0, [pc, #36]	; (1d534 <long_press_handler+0x28>)
   1d510:	f021 fb50 	bl	3ebb4 <atomic_get>
   1d514:	b920      	cbnz	r0, 1d520 <long_press_handler+0x14>
		return;
	}

	/* Toggle GPS state */
	set_gps_enable(!gps_control_is_enabled());
}
   1d516:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Link not ready, long press disregarded\n");
   1d51a:	4807      	ldr	r0, [pc, #28]	; (1d538 <long_press_handler+0x2c>)
   1d51c:	f021 bf93 	b.w	3f446 <printk>
	set_gps_enable(!gps_control_is_enabled());
   1d520:	f001 fa2e 	bl	1e980 <gps_control_is_enabled>
}
   1d524:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	set_gps_enable(!gps_control_is_enabled());
   1d528:	f080 0001 	eor.w	r0, r0, #1
   1d52c:	b2c0      	uxtb	r0, r0
   1d52e:	f7ff bfcf 	b.w	1d4d0 <set_gps_enable>
   1d532:	bf00      	nop
   1d534:	20023860 	.word	0x20023860
   1d538:	00045294 	.word	0x00045294

0001d53c <send_modem_at_cmd_work_fn>:
	struct cloud_channel_data modem_data = {
   1d53c:	2210      	movs	r2, #16
{
   1d53e:	b510      	push	{r4, lr}
   1d540:	b08e      	sub	sp, #56	; 0x38
	struct cloud_channel_data modem_data = {
   1d542:	2100      	movs	r1, #0
   1d544:	eb0d 0002 	add.w	r0, sp, r2
   1d548:	f024 fa53 	bl	419f2 <memset>
   1d54c:	2314      	movs	r3, #20
	struct cloud_msg msg = {
   1d54e:	2218      	movs	r2, #24
   1d550:	2100      	movs	r1, #0
   1d552:	a808      	add	r0, sp, #32
	struct cloud_channel_data modem_data = {
   1d554:	f88d 3010 	strb.w	r3, [sp, #16]
	struct cloud_msg msg = {
   1d558:	f024 fa4b 	bl	419f2 <memset>
	if (strlen(modem_at_cmd_buff) == 0) {
   1d55c:	4827      	ldr	r0, [pc, #156]	; (1d5fc <send_modem_at_cmd_work_fn+0xc0>)
   1d55e:	f7fc fcc1 	bl	19ee4 <strlen>
   1d562:	4c26      	ldr	r4, [pc, #152]	; (1d5fc <send_modem_at_cmd_work_fn+0xc0>)
   1d564:	bb20      	cbnz	r0, 1d5b0 <send_modem_at_cmd_work_fn+0x74>
		state = AT_CMD_ERROR;
   1d566:	2301      	movs	r3, #1
   1d568:	f88d 300f 	strb.w	r3, [sp, #15]
		err = -ENOBUFS;
   1d56c:	f06f 0368 	mvn.w	r3, #104	; 0x68
		snprintf(modem_at_cmd_buff,sizeof(modem_at_cmd_buff),
   1d570:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1d574:	f640 218d 	movw	r1, #2701	; 0xa8d
   1d578:	9200      	str	r2, [sp, #0]
   1d57a:	4820      	ldr	r0, [pc, #128]	; (1d5fc <send_modem_at_cmd_work_fn+0xc0>)
   1d57c:	4a20      	ldr	r2, [pc, #128]	; (1d600 <send_modem_at_cmd_work_fn+0xc4>)
   1d57e:	f01f ffb7 	bl	3d4f0 <sniprintf>
	modem_data.data.len = strlen(modem_at_cmd_buff);
   1d582:	481e      	ldr	r0, [pc, #120]	; (1d5fc <send_modem_at_cmd_work_fn+0xc0>)
	modem_data.data.buf = modem_at_cmd_buff;
   1d584:	9405      	str	r4, [sp, #20]
	modem_data.data.len = strlen(modem_at_cmd_buff);
   1d586:	f7fc fcad 	bl	19ee4 <strlen>
	err = cloud_encode_data(&modem_data, CLOUD_CMD_GROUP_COMMAND, &msg);
   1d58a:	aa08      	add	r2, sp, #32
	modem_data.data.len = strlen(modem_at_cmd_buff);
   1d58c:	9006      	str	r0, [sp, #24]
	err = cloud_encode_data(&modem_data, CLOUD_CMD_GROUP_COMMAND, &msg);
   1d58e:	210a      	movs	r1, #10
   1d590:	a804      	add	r0, sp, #16
   1d592:	f000 ff13 	bl	1e3bc <cloud_encode_data>
	if (err) {
   1d596:	4603      	mov	r3, r0
   1d598:	b1f8      	cbz	r0, 1d5da <send_modem_at_cmd_work_fn+0x9e>
		printk("[%s:%d] cloud_encode_data failed with error %d\n",
   1d59a:	f240 1213 	movw	r2, #275	; 0x113
   1d59e:	4919      	ldr	r1, [pc, #100]	; (1d604 <send_modem_at_cmd_work_fn+0xc8>)
   1d5a0:	4819      	ldr	r0, [pc, #100]	; (1d608 <send_modem_at_cmd_work_fn+0xcc>)
			printk("[%s:%d] cloud_send failed with error %d\n",
   1d5a2:	f021 ff50 	bl	3f446 <printk>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1d5a6:	4819      	ldr	r0, [pc, #100]	; (1d60c <send_modem_at_cmd_work_fn+0xd0>)
   1d5a8:	f01d fc74 	bl	3ae94 <z_impl_k_sem_give>
}
   1d5ac:	b00e      	add	sp, #56	; 0x38
   1d5ae:	bd10      	pop	{r4, pc}
		err = at_cmd_write(modem_at_cmd_buff,modem_at_cmd_buff,
   1d5b0:	f10d 030f 	add.w	r3, sp, #15
   1d5b4:	f640 228d 	movw	r2, #2701	; 0xa8d
   1d5b8:	4621      	mov	r1, r4
   1d5ba:	4620      	mov	r0, r4
   1d5bc:	f00b fbec 	bl	28d98 <at_cmd_write>
	if (err) {
   1d5c0:	4603      	mov	r3, r0
   1d5c2:	2800      	cmp	r0, #0
   1d5c4:	d1d4      	bne.n	1d570 <send_modem_at_cmd_work_fn+0x34>
	} else if (strlen(modem_at_cmd_buff) == 0) {
   1d5c6:	4620      	mov	r0, r4
   1d5c8:	f7fc fc8c 	bl	19ee4 <strlen>
   1d5cc:	2800      	cmp	r0, #0
   1d5ce:	d1d8      	bne.n	1d582 <send_modem_at_cmd_work_fn+0x46>
		snprintf(modem_at_cmd_buff,sizeof(modem_at_cmd_buff), "OK\r\n");
   1d5d0:	490f      	ldr	r1, [pc, #60]	; (1d610 <send_modem_at_cmd_work_fn+0xd4>)
   1d5d2:	4620      	mov	r0, r4
   1d5d4:	f024 fbc2 	bl	41d5c <strcpy>
   1d5d8:	e7d3      	b.n	1d582 <send_modem_at_cmd_work_fn+0x46>
		err = cloud_send(cloud_backend, &msg);
   1d5da:	4b0e      	ldr	r3, [pc, #56]	; (1d614 <send_modem_at_cmd_work_fn+0xd8>)
   1d5dc:	a908      	add	r1, sp, #32
   1d5de:	6818      	ldr	r0, [r3, #0]
   1d5e0:	f021 fad7 	bl	3eb92 <cloud_send>
   1d5e4:	4604      	mov	r4, r0
 *
 * @return 0 if the operation was successful, otherwise a (negative) error code.
 */
static inline void cloud_release_data(struct cloud_msg *data)
{
	k_free(data->buf);
   1d5e6:	9808      	ldr	r0, [sp, #32]
   1d5e8:	f024 f862 	bl	416b0 <k_free>
		if (err) {
   1d5ec:	2c00      	cmp	r4, #0
   1d5ee:	d0da      	beq.n	1d5a6 <send_modem_at_cmd_work_fn+0x6a>
			printk("[%s:%d] cloud_send failed with error %d\n",
   1d5f0:	4623      	mov	r3, r4
   1d5f2:	f240 1219 	movw	r2, #281	; 0x119
   1d5f6:	4903      	ldr	r1, [pc, #12]	; (1d604 <send_modem_at_cmd_work_fn+0xc8>)
   1d5f8:	4807      	ldr	r0, [pc, #28]	; (1d618 <send_modem_at_cmd_work_fn+0xdc>)
   1d5fa:	e7d2      	b.n	1d5a2 <send_modem_at_cmd_work_fn+0x66>
   1d5fc:	2002a30d 	.word	0x2002a30d
   1d600:	000455cc 	.word	0x000455cc
   1d604:	00044ef0 	.word	0x00044ef0
   1d608:	000455ec 	.word	0x000455ec
   1d60c:	20031fa8 	.word	0x20031fa8
   1d610:	000455e7 	.word	0x000455e7
   1d614:	200237cc 	.word	0x200237cc
   1d618:	0004561c 	.word	0x0004561c

0001d61c <k_work_submit_to_queue.constprop.15>:
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
   1d61c:	4601      	mov	r1, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d61e:	f100 0308 	add.w	r3, r0, #8
   1d622:	e8d3 2fef 	ldaex	r2, [r3]
   1d626:	f042 0001 	orr.w	r0, r2, #1
   1d62a:	e8c3 0fec 	stlex	ip, r0, [r3]
   1d62e:	f1bc 0f00 	cmp.w	ip, #0
   1d632:	d1f6      	bne.n	1d622 <k_work_submit_to_queue.constprop.15+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1d634:	07d3      	lsls	r3, r2, #31
   1d636:	d402      	bmi.n	1d63e <k_work_submit_to_queue.constprop.15+0x22>
		k_queue_append(&work_q->queue, work);
   1d638:	4801      	ldr	r0, [pc, #4]	; (1d640 <k_work_submit_to_queue.constprop.15+0x24>)
   1d63a:	f024 b86e 	b.w	4171a <k_queue_append>
}
   1d63e:	4770      	bx	lr
   1d640:	2002a220 	.word	0x2002a220

0001d644 <modem_rsrp_handler>:
	rsrp.value = rsrp_value;
   1d644:	4b03      	ldr	r3, [pc, #12]	; (1d654 <modem_rsrp_handler+0x10>)
	if (rsrp.value == 255) {
   1d646:	28ff      	cmp	r0, #255	; 0xff
	rsrp.value = rsrp_value;
   1d648:	8018      	strh	r0, [r3, #0]
	if (rsrp.value == 255) {
   1d64a:	d002      	beq.n	1d652 <modem_rsrp_handler+0xe>
	k_work_submit_to_queue(&k_sys_work_q, work);
   1d64c:	4802      	ldr	r0, [pc, #8]	; (1d658 <modem_rsrp_handler+0x14>)
   1d64e:	f7ff bfe5 	b.w	1d61c <k_work_submit_to_queue.constprop.15>
}
   1d652:	4770      	bx	lr
   1d654:	20031e60 	.word	0x20031e60
   1d658:	20023854 	.word	0x20023854

0001d65c <ui_evt_handler>:
}

#if defined(CONFIG_USE_UI_MODULE)
/**@brief User interface event handler. */
static void ui_evt_handler(struct ui_evt evt)
{
   1d65c:	b507      	push	{r0, r1, r2, lr}
   1d65e:	ab02      	add	r3, sp, #8
   1d660:	e903 0003 	stmdb	r3, {r0, r1}
   1d664:	9b01      	ldr	r3, [sp, #4]
	if (IS_ENABLED(CONFIG_CLOUD_BUTTON) &&
	   (evt.button == CONFIG_CLOUD_BUTTON_INPUT)) {
		button_send(evt.type == UI_EVT_BUTTON_ACTIVE ? 1 : 0);
	}

	if (IS_ENABLED(CONFIG_ACCEL_USE_SIM) && (evt.button == FLIP_INPUT)
   1d666:	2b03      	cmp	r3, #3
   1d668:	d108      	bne.n	1d67c <ui_evt_handler+0x20>
	   && atomic_get(&send_data_enable)) {
   1d66a:	4810      	ldr	r0, [pc, #64]	; (1d6ac <ui_evt_handler+0x50>)
   1d66c:	f021 faa2 	bl	3ebb4 <atomic_get>
   1d670:	b1c0      	cbz	r0, 1d6a4 <ui_evt_handler+0x48>
				error_handler(ERROR_LTE_LC, err);
			}
		}
	}
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */
}
   1d672:	b003      	add	sp, #12
   1d674:	f85d eb04 	ldr.w	lr, [sp], #4
		motion_simulate_trigger();
   1d678:	f021 bab3 	b.w	3ebe2 <motion_simulate_trigger>
	if (IS_ENABLED(CONFIG_GPS_CONTROL_ON_LONG_PRESS) &&
   1d67c:	2b01      	cmp	r3, #1
   1d67e:	d111      	bne.n	1d6a4 <ui_evt_handler+0x48>
		if (evt.type == UI_EVT_BUTTON_ACTIVE) {
   1d680:	f89d 3000 	ldrb.w	r3, [sp]
   1d684:	b943      	cbnz	r3, 1d698 <ui_evt_handler+0x3c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1d686:	f241 3288 	movw	r2, #5000	; 0x1388
   1d68a:	4909      	ldr	r1, [pc, #36]	; (1d6b0 <ui_evt_handler+0x54>)
   1d68c:	4809      	ldr	r0, [pc, #36]	; (1d6b4 <ui_evt_handler+0x58>)
}
   1d68e:	b003      	add	sp, #12
   1d690:	f85d eb04 	ldr.w	lr, [sp], #4
   1d694:	f01d bf4c 	b.w	3b530 <k_delayed_work_submit_to_queue>
			k_delayed_work_cancel(&long_press_button_work);
   1d698:	4805      	ldr	r0, [pc, #20]	; (1d6b0 <ui_evt_handler+0x54>)
}
   1d69a:	b003      	add	sp, #12
   1d69c:	f85d eb04 	ldr.w	lr, [sp], #4
			k_delayed_work_cancel(&long_press_button_work);
   1d6a0:	f01d bfd0 	b.w	3b644 <k_delayed_work_cancel>
}
   1d6a4:	b003      	add	sp, #12
   1d6a6:	f85d fb04 	ldr.w	pc, [sp], #4
   1d6aa:	bf00      	nop
   1d6ac:	20023860 	.word	0x20023860
   1d6b0:	20023830 	.word	0x20023830
   1d6b4:	2002a220 	.word	0x2002a220

0001d6b8 <gps_trigger_handler>:
{
   1d6b8:	b570      	push	{r4, r5, r6, lr}
   1d6ba:	4604      	mov	r4, r0
	if (!atomic_get(&send_data_enable)) {
   1d6bc:	4818      	ldr	r0, [pc, #96]	; (1d720 <gps_trigger_handler+0x68>)
   1d6be:	f021 fa79 	bl	3ebb4 <atomic_get>
   1d6c2:	b128      	cbz	r0, 1d6d0 <gps_trigger_handler+0x18>
	if (++fix_count < CONFIG_GPS_CONTROL_FIX_COUNT) {
   1d6c4:	4a17      	ldr	r2, [pc, #92]	; (1d724 <gps_trigger_handler+0x6c>)
   1d6c6:	6813      	ldr	r3, [r2, #0]
   1d6c8:	3301      	adds	r3, #1
   1d6ca:	2b02      	cmp	r3, #2
   1d6cc:	d801      	bhi.n	1d6d2 <gps_trigger_handler+0x1a>
   1d6ce:	6013      	str	r3, [r2, #0]
}
   1d6d0:	bd70      	pop	{r4, r5, r6, pc}
	fix_count = 0;
   1d6d2:	2600      	movs	r6, #0
	ui_led_set_pattern(UI_LED_GPS_FIX);
   1d6d4:	2008      	movs	r0, #8
	fix_count = 0;
   1d6d6:	6016      	str	r6, [r2, #0]
	ui_led_set_pattern(UI_LED_GPS_FIX);
   1d6d8:	f000 fdee 	bl	1e2b8 <ui_led_set_pattern>
static inline int gps_sample_fetch(struct device *dev)
{
	const struct gps_driver_api *api =
		(const struct gps_driver_api *)dev->driver_api;

	return api->sample_fetch(dev);
   1d6dc:	6863      	ldr	r3, [r4, #4]
   1d6de:	4620      	mov	r0, r4
   1d6e0:	685b      	ldr	r3, [r3, #4]
   1d6e2:	4798      	blx	r3
				  struct gps_data *data)
{
	const struct gps_driver_api *api =
		(const struct gps_driver_api *)dev->driver_api;

	return api->channel_get(dev, chan, data);
   1d6e4:	4d10      	ldr	r5, [pc, #64]	; (1d728 <gps_trigger_handler+0x70>)
   1d6e6:	6863      	ldr	r3, [r4, #4]
   1d6e8:	4631      	mov	r1, r6
   1d6ea:	462a      	mov	r2, r5
   1d6ec:	689b      	ldr	r3, [r3, #8]
   1d6ee:	4620      	mov	r0, r4
   1d6f0:	4798      	blx	r3
	gps_cloud_data.data.buf = gps_data.nmea.buf;
   1d6f2:	4b0e      	ldr	r3, [pc, #56]	; (1d72c <gps_trigger_handler+0x74>)
   1d6f4:	f105 0208 	add.w	r2, r5, #8
   1d6f8:	605a      	str	r2, [r3, #4]
	gps_cloud_data.data.len = gps_data.nmea.len;
   1d6fa:	f895 205b 	ldrb.w	r2, [r5, #91]	; 0x5b
	gps_control_stop(K_NO_WAIT);
   1d6fe:	2000      	movs	r0, #0
	gps_cloud_data.data.len = gps_data.nmea.len;
   1d700:	609a      	str	r2, [r3, #8]
	gps_cloud_data.tag += 1;
   1d702:	68da      	ldr	r2, [r3, #12]
	if (gps_cloud_data.tag == 0) {
   1d704:	3201      	adds	r2, #1
		gps_cloud_data.tag = 0x1;
   1d706:	bf08      	it	eq
   1d708:	2201      	moveq	r2, #1
   1d70a:	60da      	str	r2, [r3, #12]
	gps_control_stop(K_NO_WAIT);
   1d70c:	f001 f942 	bl	1e994 <gps_control_stop>
	k_work_submit_to_queue(&k_sys_work_q, work);
   1d710:	4807      	ldr	r0, [pc, #28]	; (1d730 <gps_trigger_handler+0x78>)
   1d712:	f7ff ff83 	bl	1d61c <k_work_submit_to_queue.constprop.15>
}
   1d716:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	env_sensors_poll();
   1d71a:	f001 b9b7 	b.w	1ea8c <env_sensors_poll>
   1d71e:	bf00      	nop
   1d720:	20023860 	.word	0x20023860
   1d724:	2002381c 	.word	0x2002381c
   1d728:	20020000 	.word	0x20020000
   1d72c:	20023820 	.word	0x20023820
   1d730:	20023864 	.word	0x20023864

0001d734 <cycle_cloud_connection>:
{
   1d734:	b508      	push	{r3, lr}
	printk("Disconnecting from cloud...\n");
   1d736:	480f      	ldr	r0, [pc, #60]	; (1d774 <cycle_cloud_connection+0x40>)
   1d738:	f021 fe85 	bl	3f446 <printk>
	err = cloud_disconnect(cloud_backend);
   1d73c:	4b0e      	ldr	r3, [pc, #56]	; (1d778 <cycle_cloud_connection+0x44>)
   1d73e:	6818      	ldr	r0, [r3, #0]
 *
 * @return 0 or a negative error code indicating reason of failure.
 */
static inline int cloud_disconnect(const struct cloud_backend *const backend)
{
	if (backend == NULL || backend->api == NULL ||
   1d740:	b188      	cbz	r0, 1d766 <cycle_cloud_connection+0x32>
   1d742:	6803      	ldr	r3, [r0, #0]
   1d744:	b17b      	cbz	r3, 1d766 <cycle_cloud_connection+0x32>
	    backend->api->disconnect == NULL) {
   1d746:	68db      	ldr	r3, [r3, #12]
	if (backend == NULL || backend->api == NULL ||
   1d748:	b16b      	cbz	r3, 1d766 <cycle_cloud_connection+0x32>
		return -ENOTSUP;
	}

	return backend->api->disconnect(backend);
   1d74a:	4798      	blx	r3
	if (err == 0) {
   1d74c:	b958      	cbnz	r0, 1d766 <cycle_cloud_connection+0x32>
		atomic_set(&reconnect_to_cloud, 1);
   1d74e:	2101      	movs	r1, #1
   1d750:	480a      	ldr	r0, [pc, #40]	; (1d77c <cycle_cloud_connection+0x48>)
   1d752:	f021 fa27 	bl	3eba4 <atomic_set>
	s32_t reboot_wait_ms = REBOOT_AFTER_DISCONNECT_WAIT_MS;
   1d756:	f643 2298 	movw	r2, #15000	; 0x3a98
}
   1d75a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1d75e:	4908      	ldr	r1, [pc, #32]	; (1d780 <cycle_cloud_connection+0x4c>)
   1d760:	4808      	ldr	r0, [pc, #32]	; (1d784 <cycle_cloud_connection+0x50>)
   1d762:	f01d bee5 	b.w	3b530 <k_delayed_work_submit_to_queue>
		printk("Disconnect failed. Device will reboot in %d seconds\n",
   1d766:	2105      	movs	r1, #5
   1d768:	4807      	ldr	r0, [pc, #28]	; (1d788 <cycle_cloud_connection+0x54>)
   1d76a:	f021 fe6c 	bl	3f446 <printk>
		reboot_wait_ms = K_SECONDS(5);
   1d76e:	f241 3288 	movw	r2, #5000	; 0x1388
   1d772:	e7f2      	b.n	1d75a <cycle_cloud_connection+0x26>
   1d774:	000450f4 	.word	0x000450f4
   1d778:	200237cc 	.word	0x200237cc
   1d77c:	20023850 	.word	0x20023850
   1d780:	200237d0 	.word	0x200237d0
   1d784:	2002a220 	.word	0x2002a220
   1d788:	00045111 	.word	0x00045111

0001d78c <cloud_cmd_handler>:
	    (cmd->group == CLOUD_CMD_GROUP_CFG_SET) &&
   1d78c:	6802      	ldr	r2, [r0, #0]
	if ((cmd->channel == CLOUD_CHANNEL_GPS) &&
   1d78e:	493a      	ldr	r1, [pc, #232]	; (1d878 <cloud_cmd_handler+0xec>)
{
   1d790:	b538      	push	{r3, r4, r5, lr}
	    (cmd->group == CLOUD_CMD_GROUP_CFG_SET) &&
   1d792:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	if ((cmd->channel == CLOUD_CHANNEL_GPS) &&
   1d796:	428b      	cmp	r3, r1
   1d798:	d108      	bne.n	1d7ac <cloud_cmd_handler+0x20>
		set_gps_enable(cmd->data.sv.state == CLOUD_CMD_STATE_TRUE);
   1d79a:	f990 0010 	ldrsb.w	r0, [r0, #16]
   1d79e:	1e43      	subs	r3, r0, #1
   1d7a0:	4258      	negs	r0, r3
   1d7a2:	4158      	adcs	r0, r3
}
   1d7a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		set_gps_enable(cmd->data.sv.state == CLOUD_CMD_STATE_TRUE);
   1d7a8:	f7ff be92 	b.w	1d4d0 <set_gps_enable>
	} else if ((cmd->channel == CLOUD_CHANNEL_MODEM) &&
   1d7ac:	4933      	ldr	r1, [pc, #204]	; (1d87c <cloud_cmd_handler+0xf0>)
   1d7ae:	428b      	cmp	r3, r1
   1d7b0:	d12d      	bne.n	1d80e <cloud_cmd_handler+0x82>
		cloud_cmd_handle_modem_at_cmd(cmd->data.data_string);
   1d7b2:	6884      	ldr	r4, [r0, #8]
	if (!at_cmd) {
   1d7b4:	2c00      	cmp	r4, #0
   1d7b6:	d05e      	beq.n	1d876 <cloud_cmd_handler+0xea>
	return z_impl_k_sem_take(sem, timeout);
   1d7b8:	2114      	movs	r1, #20
   1d7ba:	4831      	ldr	r0, [pc, #196]	; (1d880 <cloud_cmd_handler+0xf4>)
   1d7bc:	f01d fbb2 	bl	3af24 <z_impl_k_sem_take>
	if (k_sem_take(&modem_at_cmd_sem, K_MSEC(20)) != 0) {
   1d7c0:	4605      	mov	r5, r0
   1d7c2:	b138      	cbz	r0, 1d7d4 <cloud_cmd_handler+0x48>
}
   1d7c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printk("[%s:%d] Modem AT cmd in progress.\n",
   1d7c8:	f44f 72c6 	mov.w	r2, #396	; 0x18c
   1d7cc:	492d      	ldr	r1, [pc, #180]	; (1d884 <cloud_cmd_handler+0xf8>)
   1d7ce:	482e      	ldr	r0, [pc, #184]	; (1d888 <cloud_cmd_handler+0xfc>)
   1d7d0:	f021 be39 	b.w	3f446 <printk>
	if (strnlen(at_cmd, max_cmd_len) == max_cmd_len) {
   1d7d4:	f640 218d 	movw	r1, #2701	; 0xa8d
   1d7d8:	4620      	mov	r0, r4
   1d7da:	f024 fb08 	bl	41dee <strnlen>
   1d7de:	f640 228d 	movw	r2, #2701	; 0xa8d
   1d7e2:	4290      	cmp	r0, r2
   1d7e4:	d10e      	bne.n	1d804 <cloud_cmd_handler+0x78>
		printk("[%s:%d] Modem AT cmd too long, must be %d bytes or less\n",
   1d7e6:	f640 238c 	movw	r3, #2700	; 0xa8c
   1d7ea:	f44f 72c9 	mov.w	r2, #402	; 0x192
   1d7ee:	4925      	ldr	r1, [pc, #148]	; (1d884 <cloud_cmd_handler+0xf8>)
   1d7f0:	4826      	ldr	r0, [pc, #152]	; (1d88c <cloud_cmd_handler+0x100>)
   1d7f2:	f021 fe28 	bl	3f446 <printk>
		modem_at_cmd_buff[0] = '\0';
   1d7f6:	4b26      	ldr	r3, [pc, #152]	; (1d890 <cloud_cmd_handler+0x104>)
   1d7f8:	701d      	strb	r5, [r3, #0]
	k_work_submit_to_queue(&k_sys_work_q, work);
   1d7fa:	4826      	ldr	r0, [pc, #152]	; (1d894 <cloud_cmd_handler+0x108>)
}
   1d7fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1d800:	f7ff bf0c 	b.w	1d61c <k_work_submit_to_queue.constprop.15>
		strcpy(modem_at_cmd_buff, at_cmd);
   1d804:	4621      	mov	r1, r4
   1d806:	4822      	ldr	r0, [pc, #136]	; (1d890 <cloud_cmd_handler+0x104>)
   1d808:	f024 fab0 	bl	41d6c <__strcpy_chk>
   1d80c:	e7f5      	b.n	1d7fa <cloud_cmd_handler+0x6e>
	} else if ((cmd->channel == CLOUD_CHANNEL_RGB_LED) &&
   1d80e:	4922      	ldr	r1, [pc, #136]	; (1d898 <cloud_cmd_handler+0x10c>)
   1d810:	428b      	cmp	r3, r1
   1d812:	d10c      	bne.n	1d82e <cloud_cmd_handler+0xa2>
		ui_led_set_color(((u32_t)cmd->data.sv.value >> 16) & 0xFF,
   1d814:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   1d818:	f7fb fa80 	bl	18d1c <__aeabi_d2uiz>
}
   1d81c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ui_led_set_color(((u32_t)cmd->data.sv.value >> 16) & 0xFF,
   1d820:	b2c2      	uxtb	r2, r0
   1d822:	f3c0 2107 	ubfx	r1, r0, #8, #8
   1d826:	f3c0 4007 	ubfx	r0, r0, #16, #8
   1d82a:	f021 b9dc 	b.w	3ebe6 <ui_led_set_color>
	} else if ((cmd->channel == CLOUD_CHANNEL_DEVICE_INFO) &&
   1d82e:	f640 5104 	movw	r1, #3332	; 0xd04
   1d832:	428b      	cmp	r3, r1
   1d834:	d101      	bne.n	1d83a <cloud_cmd_handler+0xae>
   1d836:	4819      	ldr	r0, [pc, #100]	; (1d89c <cloud_cmd_handler+0x110>)
   1d838:	e7e0      	b.n	1d7fc <cloud_cmd_handler+0x70>
	} else if ((cmd->channel == CLOUD_CHANNEL_LTE_LINK_RSRP) &&
   1d83a:	f640 4104 	movw	r1, #3076	; 0xc04
   1d83e:	428b      	cmp	r3, r1
   1d840:	d101      	bne.n	1d846 <cloud_cmd_handler+0xba>
   1d842:	4817      	ldr	r0, [pc, #92]	; (1d8a0 <cloud_cmd_handler+0x114>)
   1d844:	e7da      	b.n	1d7fc <cloud_cmd_handler+0x70>
	} else if ((cmd->group == CLOUD_CMD_GROUP_CFG_SET) &&
   1d846:	4b17      	ldr	r3, [pc, #92]	; (1d8a4 <cloud_cmd_handler+0x118>)
   1d848:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
   1d84c:	429a      	cmp	r2, r3
   1d84e:	d112      	bne.n	1d876 <cloud_cmd_handler+0xea>
		if (cmd->channel == CLOUD_CHANNEL_LIGHT_SENSOR) {
   1d850:	7841      	ldrb	r1, [r0, #1]
   1d852:	290e      	cmp	r1, #14
   1d854:	d00f      	beq.n	1d876 <cloud_cmd_handler+0xea>
		else if (cmd->channel == CLOUD_CHANNEL_ENVIRONMENT) {
   1d856:	2907      	cmp	r1, #7
   1d858:	d107      	bne.n	1d86a <cloud_cmd_handler+0xde>
			env_sensors_set_send_interval((s32_t)cmd->data.sv.value);
   1d85a:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   1d85e:	f7fb fa35 	bl	18ccc <__aeabi_d2iz>
}
   1d862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			env_sensors_set_send_interval((s32_t)cmd->data.sv.value);
   1d866:	f001 ba7d 	b.w	1ed64 <env_sensors_set_send_interval>
		else if (cmd->channel == CLOUD_CHANNEL_GPS) {
   1d86a:	b121      	cbz	r1, 1d876 <cloud_cmd_handler+0xea>
}
   1d86c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("Interval command not valid for channel %d\n", cmd->channel);
   1d870:	480d      	ldr	r0, [pc, #52]	; (1d8a8 <cloud_cmd_handler+0x11c>)
   1d872:	f021 bde8 	b.w	3f446 <printk>
}
   1d876:	bd38      	pop	{r3, r4, r5, pc}
   1d878:	00010008 	.word	0x00010008
   1d87c:	0007140a 	.word	0x0007140a
   1d880:	20031fa8 	.word	0x20031fa8
   1d884:	00044f0a 	.word	0x00044f0a
   1d888:	00044f50 	.word	0x00044f50
   1d88c:	00044f73 	.word	0x00044f73
   1d890:	2002a30d 	.word	0x2002a30d
   1d894:	20023870 	.word	0x20023870
   1d898:	00050508 	.word	0x00050508
   1d89c:	20023810 	.word	0x20023810
   1d8a0:	20023854 	.word	0x20023854
   1d8a4:	00040008 	.word	0x00040008
   1d8a8:	00044fac 	.word	0x00044fac

0001d8ac <error_handler>:
{
   1d8ac:	b510      	push	{r4, lr}
	if (err_type == ERROR_CLOUD) {
   1d8ae:	4604      	mov	r4, r0
   1d8b0:	b9b8      	cbnz	r0, 1d8e2 <error_handler+0x36>
		if (gps_control_is_enabled()) {
   1d8b2:	f001 f865 	bl	1e980 <gps_control_is_enabled>
   1d8b6:	b128      	cbz	r0, 1d8c4 <error_handler+0x18>
			printk("Reboot\n");
   1d8b8:	480d      	ldr	r0, [pc, #52]	; (1d8f0 <error_handler+0x44>)
   1d8ba:	f021 fdc4 	bl	3f446 <printk>
			sys_reboot(0);
   1d8be:	4620      	mov	r0, r4
   1d8c0:	f002 fa7e 	bl	1fdc0 <sys_reboot>
		printk("LTE link disconnect\n");
   1d8c4:	480b      	ldr	r0, [pc, #44]	; (1d8f4 <error_handler+0x48>)
   1d8c6:	f021 fdbe 	bl	3f446 <printk>
		int err = lte_lc_power_off();
   1d8ca:	f00b fc57 	bl	2917c <lte_lc_power_off>
		if (err) {
   1d8ce:	4601      	mov	r1, r0
   1d8d0:	b110      	cbz	r0, 1d8d8 <error_handler+0x2c>
			printk("lte_lc_power_off failed: %d\n", err);
   1d8d2:	4809      	ldr	r0, [pc, #36]	; (1d8f8 <error_handler+0x4c>)
   1d8d4:	f021 fdb7 	bl	3f446 <printk>
		printk("Shutdown modem\n");
   1d8d8:	4808      	ldr	r0, [pc, #32]	; (1d8fc <error_handler+0x50>)
   1d8da:	f021 fdb4 	bl	3f446 <printk>
		bsdlib_shutdown();
   1d8de:	f022 ffa9 	bl	40834 <bsdlib_shutdown>
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   1d8e2:	f001 fe61 	bl	1f5a8 <z_impl_log_panic>
}
   1d8e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sys_reboot(0);
   1d8ea:	2000      	movs	r0, #0
   1d8ec:	f002 ba68 	b.w	1fdc0 <sys_reboot>
   1d8f0:	000451aa 	.word	0x000451aa
   1d8f4:	000451b2 	.word	0x000451b2
   1d8f8:	000451c7 	.word	0x000451c7
   1d8fc:	000451e4 	.word	0x000451e4

0001d900 <k_sys_fatal_error_handler>:
{
   1d900:	b508      	push	{r3, lr}
   1d902:	f001 fe51 	bl	1f5a8 <z_impl_log_panic>
	printk("Running main.c error handler");
   1d906:	4804      	ldr	r0, [pc, #16]	; (1d918 <k_sys_fatal_error_handler+0x18>)
   1d908:	f021 fd9d 	bl	3f446 <printk>
   1d90c:	f001 fe4c 	bl	1f5a8 <z_impl_log_panic>
	sys_reboot(0);
   1d910:	2000      	movs	r0, #0
   1d912:	f002 fa55 	bl	1fdc0 <sys_reboot>
	CODE_UNREACHABLE;
   1d916:	bf00      	nop
   1d918:	00045277 	.word	0x00045277

0001d91c <env_data_send>:
{
   1d91c:	b510      	push	{r4, lr}
   1d91e:	b08a      	sub	sp, #40	; 0x28
	struct cloud_msg msg = {
   1d920:	2218      	movs	r2, #24
   1d922:	2100      	movs	r1, #0
   1d924:	a804      	add	r0, sp, #16
   1d926:	f024 f864 	bl	419f2 <memset>
	printk("%s\n",__func__);
   1d92a:	4848      	ldr	r0, [pc, #288]	; (1da4c <env_data_send+0x130>)
   1d92c:	4948      	ldr	r1, [pc, #288]	; (1da50 <env_data_send+0x134>)
   1d92e:	f021 fd8a 	bl	3f446 <printk>
	if (!atomic_get(&send_data_enable)) {
   1d932:	4848      	ldr	r0, [pc, #288]	; (1da54 <env_data_send+0x138>)
   1d934:	f021 f93e 	bl	3ebb4 <atomic_get>
   1d938:	b128      	cbz	r0, 1d946 <env_data_send+0x2a>
	if (gps_control_is_active()) {
   1d93a:	f001 f817 	bl	1e96c <gps_control_is_active>
   1d93e:	b120      	cbz	r0, 1d94a <env_data_send+0x2e>
		env_sensors_set_backoff_enable(true);
   1d940:	2001      	movs	r0, #1
   1d942:	f001 fa37 	bl	1edb4 <env_sensors_set_backoff_enable>
}
   1d946:	b00a      	add	sp, #40	; 0x28
   1d948:	bd10      	pop	{r4, pc}
	env_sensors_set_backoff_enable(false);
   1d94a:	f001 fa33 	bl	1edb4 <env_sensors_set_backoff_enable>
	if (env_sensors_get_temperature(&env_data) == 0) {
   1d94e:	4668      	mov	r0, sp
   1d950:	f001 f900 	bl	1eb54 <env_sensors_get_temperature>
   1d954:	b338      	cbz	r0, 1d9a6 <env_data_send+0x8a>
	if (env_sensors_get_humidity(&env_data) == 0) {
   1d956:	4668      	mov	r0, sp
   1d958:	f001 f954 	bl	1ec04 <env_sensors_get_humidity>
   1d95c:	2800      	cmp	r0, #0
   1d95e:	d042      	beq.n	1d9e6 <env_data_send+0xca>
	if (env_sensors_get_pressure(&env_data) == 0) {
   1d960:	4668      	mov	r0, sp
   1d962:	f001 f9a7 	bl	1ecb4 <env_sensors_get_pressure>
   1d966:	2800      	cmp	r0, #0
   1d968:	d056      	beq.n	1da18 <env_data_send+0xfc>
	if (env_sensors_get_air_quality(&env_data) == 0) {
   1d96a:	4668      	mov	r0, sp
   1d96c:	f021 f989 	bl	3ec82 <env_sensors_get_air_quality>
   1d970:	2800      	cmp	r0, #0
   1d972:	d1e8      	bne.n	1d946 <env_data_send+0x2a>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_AIR_QUAL,
   1d974:	ed9d 0b02 	vldr	d0, [sp, #8]
   1d978:	200b      	movs	r0, #11
   1d97a:	f000 fecd 	bl	1e718 <cloud_is_send_allowed>
   1d97e:	2800      	cmp	r0, #0
   1d980:	d0e1      	beq.n	1d946 <env_data_send+0x2a>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   1d982:	a904      	add	r1, sp, #16
   1d984:	4668      	mov	r0, sp
   1d986:	f000 fe35 	bl	1e5f4 <cloud_encode_env_sensors_data>
					  env_data.value) &&
   1d98a:	2800      	cmp	r0, #0
   1d98c:	d1db      	bne.n	1d946 <env_data_send+0x2a>
			err = cloud_send(cloud_backend, &msg);
   1d98e:	4b32      	ldr	r3, [pc, #200]	; (1da58 <env_data_send+0x13c>)
   1d990:	a904      	add	r1, sp, #16
   1d992:	6818      	ldr	r0, [r3, #0]
   1d994:	f021 f8fd 	bl	3eb92 <cloud_send>
   1d998:	4604      	mov	r4, r0
   1d99a:	9804      	ldr	r0, [sp, #16]
   1d99c:	f023 fe88 	bl	416b0 <k_free>
			if (err) {
   1d9a0:	2c00      	cmp	r4, #0
   1d9a2:	d0d0      	beq.n	1d946 <env_data_send+0x2a>
   1d9a4:	e017      	b.n	1d9d6 <env_data_send+0xba>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_TEMP, env_data.value) &&
   1d9a6:	ed9d 0b02 	vldr	d0, [sp, #8]
   1d9aa:	2008      	movs	r0, #8
   1d9ac:	f000 feb4 	bl	1e718 <cloud_is_send_allowed>
   1d9b0:	2800      	cmp	r0, #0
   1d9b2:	d0d0      	beq.n	1d956 <env_data_send+0x3a>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   1d9b4:	a904      	add	r1, sp, #16
   1d9b6:	4668      	mov	r0, sp
   1d9b8:	f000 fe1c 	bl	1e5f4 <cloud_encode_env_sensors_data>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_TEMP, env_data.value) &&
   1d9bc:	2800      	cmp	r0, #0
   1d9be:	d1ca      	bne.n	1d956 <env_data_send+0x3a>
			err = cloud_send(cloud_backend, &msg);
   1d9c0:	4b25      	ldr	r3, [pc, #148]	; (1da58 <env_data_send+0x13c>)
   1d9c2:	a904      	add	r1, sp, #16
   1d9c4:	6818      	ldr	r0, [r3, #0]
   1d9c6:	f021 f8e4 	bl	3eb92 <cloud_send>
   1d9ca:	4604      	mov	r4, r0
   1d9cc:	9804      	ldr	r0, [sp, #16]
   1d9ce:	f023 fe6f 	bl	416b0 <k_free>
			if (err) {
   1d9d2:	2c00      	cmp	r4, #0
   1d9d4:	d0bf      	beq.n	1d956 <env_data_send+0x3a>
	printk("sensor_data_send failed: %d\n", err);
   1d9d6:	4621      	mov	r1, r4
   1d9d8:	4820      	ldr	r0, [pc, #128]	; (1da5c <env_data_send+0x140>)
   1d9da:	f021 fd34 	bl	3f446 <printk>
	cloud_error_handler(err);
   1d9de:	4620      	mov	r0, r4
   1d9e0:	f021 f8f0 	bl	3ebc4 <cloud_error_handler>
   1d9e4:	e7af      	b.n	1d946 <env_data_send+0x2a>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_HUMID,
   1d9e6:	ed9d 0b02 	vldr	d0, [sp, #8]
   1d9ea:	2009      	movs	r0, #9
   1d9ec:	f000 fe94 	bl	1e718 <cloud_is_send_allowed>
   1d9f0:	2800      	cmp	r0, #0
   1d9f2:	d0b5      	beq.n	1d960 <env_data_send+0x44>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   1d9f4:	a904      	add	r1, sp, #16
   1d9f6:	4668      	mov	r0, sp
   1d9f8:	f000 fdfc 	bl	1e5f4 <cloud_encode_env_sensors_data>
					  env_data.value) &&
   1d9fc:	2800      	cmp	r0, #0
   1d9fe:	d1af      	bne.n	1d960 <env_data_send+0x44>
			err = cloud_send(cloud_backend, &msg);
   1da00:	4b15      	ldr	r3, [pc, #84]	; (1da58 <env_data_send+0x13c>)
   1da02:	a904      	add	r1, sp, #16
   1da04:	6818      	ldr	r0, [r3, #0]
   1da06:	f021 f8c4 	bl	3eb92 <cloud_send>
   1da0a:	4604      	mov	r4, r0
   1da0c:	9804      	ldr	r0, [sp, #16]
   1da0e:	f023 fe4f 	bl	416b0 <k_free>
			if (err) {
   1da12:	2c00      	cmp	r4, #0
   1da14:	d0a4      	beq.n	1d960 <env_data_send+0x44>
   1da16:	e7de      	b.n	1d9d6 <env_data_send+0xba>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_AIR_PRESS,
   1da18:	ed9d 0b02 	vldr	d0, [sp, #8]
   1da1c:	200a      	movs	r0, #10
   1da1e:	f000 fe7b 	bl	1e718 <cloud_is_send_allowed>
   1da22:	2800      	cmp	r0, #0
   1da24:	d0a1      	beq.n	1d96a <env_data_send+0x4e>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   1da26:	a904      	add	r1, sp, #16
   1da28:	4668      	mov	r0, sp
   1da2a:	f000 fde3 	bl	1e5f4 <cloud_encode_env_sensors_data>
					  env_data.value) &&
   1da2e:	2800      	cmp	r0, #0
   1da30:	d19b      	bne.n	1d96a <env_data_send+0x4e>
			err = cloud_send(cloud_backend, &msg);
   1da32:	4b09      	ldr	r3, [pc, #36]	; (1da58 <env_data_send+0x13c>)
   1da34:	a904      	add	r1, sp, #16
   1da36:	6818      	ldr	r0, [r3, #0]
   1da38:	f021 f8ab 	bl	3eb92 <cloud_send>
   1da3c:	4604      	mov	r4, r0
   1da3e:	9804      	ldr	r0, [sp, #16]
   1da40:	f023 fe36 	bl	416b0 <k_free>
			if (err) {
   1da44:	2c00      	cmp	r4, #0
   1da46:	d090      	beq.n	1d96a <env_data_send+0x4e>
   1da48:	e7c5      	b.n	1d9d6 <env_data_send+0xba>
   1da4a:	bf00      	nop
   1da4c:	00047278 	.word	0x00047278
   1da50:	00044f28 	.word	0x00044f28
   1da54:	20023860 	.word	0x20023860
   1da58:	200237cc 	.word	0x200237cc
   1da5c:	0004518d 	.word	0x0004518d

0001da60 <motion_handler>:
{
   1da60:	b084      	sub	sp, #16
   1da62:	b530      	push	{r4, r5, lr}
   1da64:	b087      	sub	sp, #28
   1da66:	ac0a      	add	r4, sp, #40	; 0x28
   1da68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (motion_data.orientation == last_orientation_state) {
   1da6c:	4c18      	ldr	r4, [pc, #96]	; (1dad0 <motion_handler+0x70>)
   1da6e:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
   1da72:	7822      	ldrb	r2, [r4, #0]
   1da74:	4291      	cmp	r1, r2
   1da76:	d021      	beq.n	1dabc <motion_handler+0x5c>
	if (!flip_mode_enabled || !atomic_get(&send_data_enable)
   1da78:	4816      	ldr	r0, [pc, #88]	; (1dad4 <motion_handler+0x74>)
   1da7a:	f021 f89b 	bl	3ebb4 <atomic_get>
   1da7e:	b1e8      	cbz	r0, 1dabc <motion_handler+0x5c>
		|| gps_control_is_active()) {
   1da80:	f000 ff74 	bl	1e96c <gps_control_is_active>
   1da84:	4601      	mov	r1, r0
   1da86:	b9c8      	cbnz	r0, 1dabc <motion_handler+0x5c>
	struct cloud_msg msg = {
   1da88:	2218      	movs	r2, #24
   1da8a:	4668      	mov	r0, sp
   1da8c:	f023 ffb1 	bl	419f2 <memset>
	if (cloud_encode_motion_data(&motion_data, &msg) == 0) {
   1da90:	4669      	mov	r1, sp
   1da92:	a80a      	add	r0, sp, #40	; 0x28
   1da94:	f000 fdfe 	bl	1e694 <cloud_encode_motion_data>
   1da98:	b9a8      	cbnz	r0, 1dac6 <motion_handler+0x66>
		err = cloud_send(cloud_backend, &msg);
   1da9a:	4b0f      	ldr	r3, [pc, #60]	; (1dad8 <motion_handler+0x78>)
   1da9c:	4669      	mov	r1, sp
   1da9e:	6818      	ldr	r0, [r3, #0]
   1daa0:	f021 f877 	bl	3eb92 <cloud_send>
   1daa4:	4605      	mov	r5, r0
   1daa6:	9800      	ldr	r0, [sp, #0]
   1daa8:	f023 fe02 	bl	416b0 <k_free>
		if (err) {
   1daac:	b15d      	cbz	r5, 1dac6 <motion_handler+0x66>
			printk("Transmisison of motion data failed: %d\n", err);
   1daae:	480b      	ldr	r0, [pc, #44]	; (1dadc <motion_handler+0x7c>)
   1dab0:	4629      	mov	r1, r5
   1dab2:	f021 fcc8 	bl	3f446 <printk>
			cloud_error_handler(err);
   1dab6:	4628      	mov	r0, r5
   1dab8:	f021 f884 	bl	3ebc4 <cloud_error_handler>
}
   1dabc:	b007      	add	sp, #28
   1dabe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1dac2:	b004      	add	sp, #16
   1dac4:	4770      	bx	lr
	last_orientation_state = motion_data.orientation;
   1dac6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   1daca:	7023      	strb	r3, [r4, #0]
   1dacc:	e7f6      	b.n	1dabc <motion_handler+0x5c>
   1dace:	bf00      	nop
   1dad0:	2002a30c 	.word	0x2002a30c
   1dad4:	20023860 	.word	0x20023860
   1dad8:	200237cc 	.word	0x200237cc
   1dadc:	00045556 	.word	0x00045556

0001dae0 <sensor_data_send>:
{
   1dae0:	b510      	push	{r4, lr}
   1dae2:	4604      	mov	r4, r0
   1dae4:	b086      	sub	sp, #24
	struct cloud_msg msg = {
   1dae6:	2218      	movs	r2, #24
   1dae8:	2100      	movs	r1, #0
   1daea:	4668      	mov	r0, sp
   1daec:	f023 ff81 	bl	419f2 <memset>
	if (data->type == CLOUD_CHANNEL_DEVICE_INFO) {
   1daf0:	7823      	ldrb	r3, [r4, #0]
	if (!atomic_get(&send_data_enable) || gps_control_is_active()) {
   1daf2:	4818      	ldr	r0, [pc, #96]	; (1db54 <sensor_data_send+0x74>)
	if (data->type == CLOUD_CHANNEL_DEVICE_INFO) {
   1daf4:	2b0d      	cmp	r3, #13
		msg.endpoint.type = CLOUD_EP_TOPIC_STATE;
   1daf6:	bf04      	itt	eq
   1daf8:	2301      	moveq	r3, #1
   1dafa:	f88d 300c 	strbeq.w	r3, [sp, #12]
	if (!atomic_get(&send_data_enable) || gps_control_is_active()) {
   1dafe:	f021 f859 	bl	3ebb4 <atomic_get>
   1db02:	b300      	cbz	r0, 1db46 <sensor_data_send+0x66>
   1db04:	f000 ff32 	bl	1e96c <gps_control_is_active>
   1db08:	b9e8      	cbnz	r0, 1db46 <sensor_data_send+0x66>
	if (data->type != CLOUD_CHANNEL_DEVICE_INFO) {
   1db0a:	7823      	ldrb	r3, [r4, #0]
   1db0c:	2b0d      	cmp	r3, #13
   1db0e:	d01c      	beq.n	1db4a <sensor_data_send+0x6a>
		err = cloud_encode_data(data, CLOUD_CMD_GROUP_DATA, &msg);
   1db10:	466a      	mov	r2, sp
   1db12:	2106      	movs	r1, #6
   1db14:	4620      	mov	r0, r4
   1db16:	f000 fc51 	bl	1e3bc <cloud_encode_data>
	if (err) {
   1db1a:	b118      	cbz	r0, 1db24 <sensor_data_send+0x44>
		printk("Unable to encode cloud data: %d\n", err);
   1db1c:	4601      	mov	r1, r0
   1db1e:	480e      	ldr	r0, [pc, #56]	; (1db58 <sensor_data_send+0x78>)
   1db20:	f021 fc91 	bl	3f446 <printk>
	err = cloud_send(cloud_backend, &msg);
   1db24:	4b0d      	ldr	r3, [pc, #52]	; (1db5c <sensor_data_send+0x7c>)
   1db26:	4669      	mov	r1, sp
   1db28:	6818      	ldr	r0, [r3, #0]
   1db2a:	f021 f832 	bl	3eb92 <cloud_send>
   1db2e:	4604      	mov	r4, r0
   1db30:	9800      	ldr	r0, [sp, #0]
   1db32:	f023 fdbd 	bl	416b0 <k_free>
	if (err) {
   1db36:	b134      	cbz	r4, 1db46 <sensor_data_send+0x66>
		printk("sensor_data_send failed: %d\n", err);
   1db38:	4809      	ldr	r0, [pc, #36]	; (1db60 <sensor_data_send+0x80>)
   1db3a:	4621      	mov	r1, r4
   1db3c:	f021 fc83 	bl	3f446 <printk>
		cloud_error_handler(err);
   1db40:	4620      	mov	r0, r4
   1db42:	f021 f83f 	bl	3ebc4 <cloud_error_handler>
}
   1db46:	b006      	add	sp, #24
   1db48:	bd10      	pop	{r4, pc}
		err = cloud_encode_digital_twin_data(data, &msg);
   1db4a:	4669      	mov	r1, sp
   1db4c:	4620      	mov	r0, r4
   1db4e:	f000 fc99 	bl	1e484 <cloud_encode_digital_twin_data>
   1db52:	e7e2      	b.n	1db1a <sensor_data_send+0x3a>
   1db54:	20023860 	.word	0x20023860
   1db58:	00045645 	.word	0x00045645
   1db5c:	200237cc 	.word	0x200237cc
   1db60:	0004518d 	.word	0x0004518d

0001db64 <modem_rsrp_data_send>:
{
   1db64:	b510      	push	{r4, lr}
   1db66:	b0a0      	sub	sp, #128	; 0x80
	char buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   1db68:	2280      	movs	r2, #128	; 0x80
   1db6a:	2100      	movs	r1, #0
   1db6c:	4668      	mov	r0, sp
   1db6e:	f023 ff40 	bl	419f2 <memset>
	if (!atomic_get(&send_data_enable)) {
   1db72:	4813      	ldr	r0, [pc, #76]	; (1dbc0 <modem_rsrp_data_send+0x5c>)
   1db74:	f021 f81e 	bl	3ebb4 <atomic_get>
   1db78:	b300      	cbz	r0, 1dbbc <modem_rsrp_data_send+0x58>
	return z_impl_k_uptime_get();
   1db7a:	f023 fe94 	bl	418a6 <z_impl_k_uptime_get>
	if (k_uptime_get_32() - timestamp_prev <
   1db7e:	4c11      	ldr	r4, [pc, #68]	; (1dbc4 <modem_rsrp_data_send+0x60>)
   1db80:	6822      	ldr	r2, [r4, #0]
   1db82:	1a80      	subs	r0, r0, r2
   1db84:	f64e 225f 	movw	r2, #59999	; 0xea5f
   1db88:	4290      	cmp	r0, r2
   1db8a:	d917      	bls.n	1dbbc <modem_rsrp_data_send+0x58>
	len = snprintf(buf, CONFIG_MODEM_INFO_BUFFER_SIZE,
   1db8c:	4a0e      	ldr	r2, [pc, #56]	; (1dbc8 <modem_rsrp_data_send+0x64>)
   1db8e:	4668      	mov	r0, sp
   1db90:	8811      	ldrh	r1, [r2, #0]
   1db92:	8853      	ldrh	r3, [r2, #2]
   1db94:	4a0d      	ldr	r2, [pc, #52]	; (1dbcc <modem_rsrp_data_send+0x68>)
   1db96:	1acb      	subs	r3, r1, r3
   1db98:	2180      	movs	r1, #128	; 0x80
   1db9a:	f01f fca9 	bl	3d4f0 <sniprintf>
	signal_strength_cloud_data.data.buf = buf;
   1db9e:	4b0c      	ldr	r3, [pc, #48]	; (1dbd0 <modem_rsrp_data_send+0x6c>)
	signal_strength_cloud_data.tag += 1;
   1dba0:	68da      	ldr	r2, [r3, #12]
	signal_strength_cloud_data.data.len = len;
   1dba2:	6098      	str	r0, [r3, #8]
	if (signal_strength_cloud_data.tag == 0) {
   1dba4:	3201      	adds	r2, #1
		signal_strength_cloud_data.tag = 0x1;
   1dba6:	bf08      	it	eq
   1dba8:	2201      	moveq	r2, #1
	sensor_data_send(&signal_strength_cloud_data);
   1dbaa:	4809      	ldr	r0, [pc, #36]	; (1dbd0 <modem_rsrp_data_send+0x6c>)
	signal_strength_cloud_data.data.buf = buf;
   1dbac:	f8c3 d004 	str.w	sp, [r3, #4]
		signal_strength_cloud_data.tag = 0x1;
   1dbb0:	60da      	str	r2, [r3, #12]
	sensor_data_send(&signal_strength_cloud_data);
   1dbb2:	f7ff ff95 	bl	1dae0 <sensor_data_send>
   1dbb6:	f023 fe76 	bl	418a6 <z_impl_k_uptime_get>
	return (u32_t)k_uptime_get();
   1dbba:	6020      	str	r0, [r4, #0]
}
   1dbbc:	b020      	add	sp, #128	; 0x80
   1dbbe:	bd10      	pop	{r4, pc}
   1dbc0:	20023860 	.word	0x20023860
   1dbc4:	2002388c 	.word	0x2002388c
   1dbc8:	20031e60 	.word	0x20031e60
   1dbcc:	0004825b 	.word	0x0004825b
   1dbd0:	2002387c 	.word	0x2002387c

0001dbd4 <device_status_send>:
{
   1dbd4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!atomic_get(&send_data_enable)) {
   1dbd6:	4824      	ldr	r0, [pc, #144]	; (1dc68 <device_status_send+0x94>)
{
   1dbd8:	b08b      	sub	sp, #44	; 0x2c
	if (!atomic_get(&send_data_enable)) {
   1dbda:	f020 ffeb 	bl	3ebb4 <atomic_get>
   1dbde:	b130      	cbz	r0, 1dbee <device_status_send+0x1a>
	cJSON *root_obj = cJSON_CreateObject();
   1dbe0:	f005 fa2e 	bl	23040 <cJSON_CreateObject>
	if (root_obj == NULL) {
   1dbe4:	4607      	mov	r7, r0
   1dbe6:	b920      	cbnz	r0, 1dbf2 <device_status_send+0x1e>
		printk("Unable to allocate JSON object\n");
   1dbe8:	4820      	ldr	r0, [pc, #128]	; (1dc6c <device_status_send+0x98>)
   1dbea:	f021 fc2c 	bl	3f446 <printk>
}
   1dbee:	b00b      	add	sp, #44	; 0x2c
   1dbf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int ret = modem_info_params_get(&modem_param);
   1dbf2:	481f      	ldr	r0, [pc, #124]	; (1dc70 <device_status_send+0x9c>)
   1dbf4:	f006 fee2 	bl	249bc <modem_info_params_get>
	if (ret < 0) {
   1dbf8:	1e01      	subs	r1, r0, #0
   1dbfa:	da25      	bge.n	1dc48 <device_status_send+0x74>
		printk("Unable to obtain modem parameters: %d\n", ret);
   1dbfc:	481d      	ldr	r0, [pc, #116]	; (1dc74 <device_status_send+0xa0>)
   1dbfe:	f021 fc22 	bl	3f446 <printk>
	size_t item_cnt = 0;
   1dc02:	2500      	movs	r5, #0
	const char *const ui[] = {
   1dc04:	4c1c      	ldr	r4, [pc, #112]	; (1dc78 <device_status_send+0xa4>)
   1dc06:	ae05      	add	r6, sp, #20
   1dc08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1dc0a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1dc0c:	f854 3b04 	ldr.w	r3, [r4], #4
	const char *const fota[] = {
   1dc10:	aa03      	add	r2, sp, #12
	const char *const ui[] = {
   1dc12:	6033      	str	r3, [r6, #0]
	if (service_info_json_object_encode(ui, ARRAY_SIZE(ui),
   1dc14:	2301      	movs	r3, #1
	const char *const fota[] = {
   1dc16:	e894 0003 	ldmia.w	r4, {r0, r1}
   1dc1a:	e882 0003 	stmia.w	r2, {r0, r1}
	if (service_info_json_object_encode(ui, ARRAY_SIZE(ui),
   1dc1e:	9300      	str	r3, [sp, #0]
   1dc20:	9701      	str	r7, [sp, #4]
   1dc22:	2302      	movs	r3, #2
   1dc24:	2105      	movs	r1, #5
   1dc26:	a805      	add	r0, sp, #20
   1dc28:	f000 fdc2 	bl	1e7b0 <service_info_json_object_encode>
   1dc2c:	b9a8      	cbnz	r0, 1dc5a <device_status_send+0x86>
		++item_cnt;
   1dc2e:	3501      	adds	r5, #1
	device_cloud_data.data.buf = (char *)root_obj;
   1dc30:	4b12      	ldr	r3, [pc, #72]	; (1dc7c <device_status_send+0xa8>)
	sensor_data_send(&device_cloud_data);
   1dc32:	4812      	ldr	r0, [pc, #72]	; (1dc7c <device_status_send+0xa8>)
	device_cloud_data.tag += 1;
   1dc34:	68da      	ldr	r2, [r3, #12]
	device_cloud_data.data.len = item_cnt;
   1dc36:	e9c3 7501 	strd	r7, r5, [r3, #4]
	if (device_cloud_data.tag == 0) {
   1dc3a:	3201      	adds	r2, #1
		device_cloud_data.tag = 0x1;
   1dc3c:	bf08      	it	eq
   1dc3e:	2201      	moveq	r2, #1
   1dc40:	60da      	str	r2, [r3, #12]
	sensor_data_send(&device_cloud_data);
   1dc42:	f7ff ff4d 	bl	1dae0 <sensor_data_send>
   1dc46:	e7d2      	b.n	1dbee <device_status_send+0x1a>
		ret = modem_info_json_object_encode(&modem_param, root_obj);
   1dc48:	4639      	mov	r1, r7
   1dc4a:	4809      	ldr	r0, [pc, #36]	; (1dc70 <device_status_send+0x9c>)
   1dc4c:	f007 f830 	bl	24cb0 <modem_info_json_object_encode>
			item_cnt = (size_t)ret;
   1dc50:	2800      	cmp	r0, #0
   1dc52:	bfcc      	ite	gt
   1dc54:	4605      	movgt	r5, r0
   1dc56:	2500      	movle	r5, #0
   1dc58:	e7d4      	b.n	1dc04 <device_status_send+0x30>
	if (item_cnt == 0) {
   1dc5a:	2d00      	cmp	r5, #0
   1dc5c:	d1e8      	bne.n	1dc30 <device_status_send+0x5c>
		cJSON_Delete(root_obj);
   1dc5e:	4638      	mov	r0, r7
   1dc60:	f005 f92a 	bl	22eb8 <cJSON_Delete>
		return;
   1dc64:	e7c3      	b.n	1dbee <device_status_send+0x1a>
   1dc66:	bf00      	nop
   1dc68:	20023860 	.word	0x20023860
   1dc6c:	00045146 	.word	0x00045146
   1dc70:	200200c0 	.word	0x200200c0
   1dc74:	00045166 	.word	0x00045166
   1dc78:	000430d8 	.word	0x000430d8
   1dc7c:	20031878 	.word	0x20031878

0001dc80 <send_gps_data_work_fn>:
	sensor_data_send(&gps_cloud_data);
   1dc80:	4801      	ldr	r0, [pc, #4]	; (1dc88 <send_gps_data_work_fn+0x8>)
   1dc82:	f7ff bf2d 	b.w	1dae0 <sensor_data_send>
   1dc86:	bf00      	nop
   1dc88:	20023820 	.word	0x20023820

0001dc8c <sensors_start>:
	atomic_set(&send_data_enable, 1);
   1dc8c:	2101      	movs	r1, #1
{
   1dc8e:	b508      	push	{r3, lr}
	atomic_set(&send_data_enable, 1);
   1dc90:	4816      	ldr	r0, [pc, #88]	; (1dcec <sensors_start+0x60>)
   1dc92:	f020 ff87 	bl	3eba4 <atomic_set>
	err = motion_init_and_start(motion_handler);
   1dc96:	4816      	ldr	r0, [pc, #88]	; (1dcf0 <sensors_start+0x64>)
   1dc98:	f000 fa96 	bl	1e1c8 <motion_init_and_start>
	if (err) {
   1dc9c:	4601      	mov	r1, r0
   1dc9e:	b110      	cbz	r0, 1dca6 <sensors_start+0x1a>
		printk("motion module init failed, error: %d\n", err);
   1dca0:	4814      	ldr	r0, [pc, #80]	; (1dcf4 <sensors_start+0x68>)
   1dca2:	f021 fbd0 	bl	3f446 <printk>
	err = env_sensors_init_and_start(env_data_send);
   1dca6:	4814      	ldr	r0, [pc, #80]	; (1dcf8 <sensors_start+0x6c>)
   1dca8:	f000 ff02 	bl	1eab0 <env_sensors_init_and_start>
	if (err) {
   1dcac:	4601      	mov	r1, r0
   1dcae:	b110      	cbz	r0, 1dcb6 <sensors_start+0x2a>
		printk("Environmental sensors init failed, error: %d\n", err);
   1dcb0:	4812      	ldr	r0, [pc, #72]	; (1dcfc <sensors_start+0x70>)
   1dcb2:	f021 fbc8 	bl	3f446 <printk>
	err = modem_info_init();
   1dcb6:	f006 fde5 	bl	24884 <modem_info_init>
	if (err) {
   1dcba:	4601      	mov	r1, r0
   1dcbc:	b150      	cbz	r0, 1dcd4 <sensors_start+0x48>
		printk("Modem info could not be established: %d\n", err);
   1dcbe:	4810      	ldr	r0, [pc, #64]	; (1dd00 <sensors_start+0x74>)
   1dcc0:	f021 fbc1 	bl	3f446 <printk>
	k_work_submit_to_queue(&k_sys_work_q, work);
   1dcc4:	480f      	ldr	r0, [pc, #60]	; (1dd04 <sensors_start+0x78>)
   1dcc6:	f7ff fca9 	bl	1d61c <k_work_submit_to_queue.constprop.15>
}
   1dcca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gps_control_init(gps_trigger_handler);
   1dcce:	480e      	ldr	r0, [pc, #56]	; (1dd08 <sensors_start+0x7c>)
   1dcd0:	f000 bea6 	b.w	1ea20 <gps_control_init>
	modem_info_params_init(&modem_param);
   1dcd4:	480d      	ldr	r0, [pc, #52]	; (1dd0c <sensors_start+0x80>)
   1dcd6:	f006 fe21 	bl	2491c <modem_info_params_init>
	signal_strength_cloud_data.type = CLOUD_CHANNEL_LTE_LINK_RSRP;
   1dcda:	220c      	movs	r2, #12
   1dcdc:	4b0c      	ldr	r3, [pc, #48]	; (1dd10 <sensors_start+0x84>)
	modem_info_rsrp_register(modem_rsrp_handler);
   1dcde:	480d      	ldr	r0, [pc, #52]	; (1dd14 <sensors_start+0x88>)
	signal_strength_cloud_data.type = CLOUD_CHANNEL_LTE_LINK_RSRP;
   1dce0:	701a      	strb	r2, [r3, #0]
	signal_strength_cloud_data.tag = 0x1;
   1dce2:	2201      	movs	r2, #1
   1dce4:	60da      	str	r2, [r3, #12]
	modem_info_rsrp_register(modem_rsrp_handler);
   1dce6:	f006 fd9b 	bl	24820 <modem_info_rsrp_register>
   1dcea:	e7eb      	b.n	1dcc4 <sensors_start+0x38>
   1dcec:	20023860 	.word	0x20023860
   1dcf0:	0001da61 	.word	0x0001da61
   1dcf4:	00045666 	.word	0x00045666
   1dcf8:	0001d91d 	.word	0x0001d91d
   1dcfc:	0004568c 	.word	0x0004568c
   1dd00:	000456ba 	.word	0x000456ba
   1dd04:	20023810 	.word	0x20023810
   1dd08:	0001d6b9 	.word	0x0001d6b9
   1dd0c:	200200c0 	.word	0x200200c0
   1dd10:	2002387c 	.word	0x2002387c
   1dd14:	0001d645 	.word	0x0001d645

0001dd18 <on_pairing_done>:
{
   1dd18:	b508      	push	{r3, lr}
	if (atomic_get(&association_requested)) {
   1dd1a:	480b      	ldr	r0, [pc, #44]	; (1dd48 <on_pairing_done+0x30>)
   1dd1c:	f020 ff4a 	bl	3ebb4 <atomic_get>
   1dd20:	b188      	cbz	r0, 1dd46 <on_pairing_done+0x2e>
		atomic_set(&association_requested, 0);
   1dd22:	2100      	movs	r1, #0
   1dd24:	4808      	ldr	r0, [pc, #32]	; (1dd48 <on_pairing_done+0x30>)
   1dd26:	f020 ff3d 	bl	3eba4 <atomic_set>
		k_delayed_work_cancel(&cycle_cloud_connection_work);
   1dd2a:	4808      	ldr	r0, [pc, #32]	; (1dd4c <on_pairing_done+0x34>)
   1dd2c:	f01d fc8a 	bl	3b644 <k_delayed_work_cancel>
		printk("Device associated with cloud.\n");
   1dd30:	4807      	ldr	r0, [pc, #28]	; (1dd50 <on_pairing_done+0x38>)
   1dd32:	f021 fb88 	bl	3f446 <printk>
		printk("Reconnecting for cloud policy to take effect.\n");
   1dd36:	4807      	ldr	r0, [pc, #28]	; (1dd54 <on_pairing_done+0x3c>)
   1dd38:	f021 fb85 	bl	3f446 <printk>
}
   1dd3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		cycle_cloud_connection(NULL);
   1dd40:	2000      	movs	r0, #0
   1dd42:	f7ff bcf7 	b.w	1d734 <cycle_cloud_connection>
}
   1dd46:	bd08      	pop	{r3, pc}
   1dd48:	200237c8 	.word	0x200237c8
   1dd4c:	200237f0 	.word	0x200237f0
   1dd50:	0004557e 	.word	0x0004557e
   1dd54:	0004559d 	.word	0x0004559d

0001dd58 <cloud_event_handler>:
{
   1dd58:	b510      	push	{r4, lr}
   1dd5a:	460c      	mov	r4, r1
	switch (evt->type) {
   1dd5c:	7809      	ldrb	r1, [r1, #0]
   1dd5e:	2908      	cmp	r1, #8
   1dd60:	d85c      	bhi.n	1de1c <cloud_event_handler+0xc4>
   1dd62:	e8df f001 	tbb	[pc, r1]
   1dd66:	1c05      	.short	0x1c05
   1dd68:	28262110 	.word	0x28262110
   1dd6c:	4c30      	.short	0x4c30
   1dd6e:	53          	.byte	0x53
   1dd6f:	00          	.byte	0x00
		printk("CLOUD_EVT_CONNECTED\n");
   1dd70:	482d      	ldr	r0, [pc, #180]	; (1de28 <cloud_event_handler+0xd0>)
   1dd72:	f021 fb68 	bl	3f446 <printk>
		k_delayed_work_cancel(&cloud_reboot_work);
   1dd76:	482d      	ldr	r0, [pc, #180]	; (1de2c <cloud_event_handler+0xd4>)
   1dd78:	f01d fc64 	bl	3b644 <k_delayed_work_cancel>
		ui_led_set_pattern(UI_CLOUD_CONNECTED);
   1dd7c:	2008      	movs	r0, #8
}
   1dd7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ui_led_set_pattern(UI_LTE_DISCONNECTED);
   1dd82:	f000 ba99 	b.w	1e2b8 <ui_led_set_pattern>
		printk("CLOUD_EVT_READY\n");
   1dd86:	482a      	ldr	r0, [pc, #168]	; (1de30 <cloud_event_handler+0xd8>)
   1dd88:	f021 fb5d 	bl	3f446 <printk>
		ui_led_set_pattern(UI_CLOUD_CONNECTED);
   1dd8c:	2008      	movs	r0, #8
   1dd8e:	f000 fa93 	bl	1e2b8 <ui_led_set_pattern>
		boot_write_img_confirmed();
   1dd92:	f021 fbda 	bl	3f54a <boot_write_img_confirmed>
}
   1dd96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		sensors_start();
   1dd9a:	f7ff bf77 	b.w	1dc8c <sensors_start>
		printk("CLOUD_EVT_DISCONNECTED\n");
   1dd9e:	4825      	ldr	r0, [pc, #148]	; (1de34 <cloud_event_handler+0xdc>)
   1dda0:	f021 fb51 	bl	3f446 <printk>
		ui_led_set_pattern(UI_LTE_DISCONNECTED);
   1dda4:	2000      	movs	r0, #0
   1dda6:	e7ea      	b.n	1dd7e <cloud_event_handler+0x26>
		printk("CLOUD_EVT_ERROR\n");
   1dda8:	4823      	ldr	r0, [pc, #140]	; (1de38 <cloud_event_handler+0xe0>)
}
   1ddaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("CLOUD_EVT_DATA_SENT\n");
   1ddae:	f021 bb4a 	b.w	3f446 <printk>
   1ddb2:	4822      	ldr	r0, [pc, #136]	; (1de3c <cloud_event_handler+0xe4>)
   1ddb4:	e7f9      	b.n	1ddaa <cloud_event_handler+0x52>
		printk("CLOUD_EVT_DATA_RECEIVED\n");
   1ddb6:	4822      	ldr	r0, [pc, #136]	; (1de40 <cloud_event_handler+0xe8>)
   1ddb8:	f021 fb45 	bl	3f446 <printk>
		cloud_decode_command(evt->data.msg.buf);
   1ddbc:	6860      	ldr	r0, [r4, #4]
}
   1ddbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		cloud_decode_command(evt->data.msg.buf);
   1ddc2:	f7fc b92d 	b.w	1a020 <cloud_decode_command>
		printk("CLOUD_EVT_PAIR_REQUEST\n");
   1ddc6:	481f      	ldr	r0, [pc, #124]	; (1de44 <cloud_event_handler+0xec>)
   1ddc8:	f021 fb3d 	bl	3f446 <printk>
	if (atomic_get(&association_requested) == 0) {
   1ddcc:	481e      	ldr	r0, [pc, #120]	; (1de48 <cloud_event_handler+0xf0>)
   1ddce:	f020 fef1 	bl	3ebb4 <atomic_get>
   1ddd2:	bb40      	cbnz	r0, 1de26 <cloud_event_handler+0xce>
		atomic_set(&association_requested, 1);
   1ddd4:	2101      	movs	r1, #1
   1ddd6:	481c      	ldr	r0, [pc, #112]	; (1de48 <cloud_event_handler+0xf0>)
   1ddd8:	f020 fee4 	bl	3eba4 <atomic_set>
		ui_led_set_pattern(UI_CLOUD_PAIRING);
   1dddc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   1dde0:	f000 fa6a 	bl	1e2b8 <ui_led_set_pattern>
		printk("Add device to cloud account.\n");
   1dde4:	4819      	ldr	r0, [pc, #100]	; (1de4c <cloud_event_handler+0xf4>)
   1dde6:	f021 fb2e 	bl	3f446 <printk>
		printk("Waiting for cloud association...\n");
   1ddea:	4819      	ldr	r0, [pc, #100]	; (1de50 <cloud_event_handler+0xf8>)
   1ddec:	f021 fb2b 	bl	3f446 <printk>
}
   1ddf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1ddf4:	4a17      	ldr	r2, [pc, #92]	; (1de54 <cloud_event_handler+0xfc>)
   1ddf6:	4918      	ldr	r1, [pc, #96]	; (1de58 <cloud_event_handler+0x100>)
   1ddf8:	4818      	ldr	r0, [pc, #96]	; (1de5c <cloud_event_handler+0x104>)
   1ddfa:	f01d bb99 	b.w	3b530 <k_delayed_work_submit_to_queue>
		printk("CLOUD_EVT_PAIR_DONE\n");
   1ddfe:	4818      	ldr	r0, [pc, #96]	; (1de60 <cloud_event_handler+0x108>)
   1de00:	f021 fb21 	bl	3f446 <printk>
}
   1de04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		on_pairing_done();
   1de08:	f7ff bf86 	b.w	1dd18 <on_pairing_done>
		printk("CLOUD_EVT_FOTA_DONE\n");
   1de0c:	4815      	ldr	r0, [pc, #84]	; (1de64 <cloud_event_handler+0x10c>)
   1de0e:	f021 fb1a 	bl	3f446 <printk>
}
   1de12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		sys_reboot(SYS_REBOOT_COLD);
   1de16:	2001      	movs	r0, #1
   1de18:	f001 bfd2 	b.w	1fdc0 <sys_reboot>
		printk("Unknown cloud event type: %d\n", evt->type);
   1de1c:	4812      	ldr	r0, [pc, #72]	; (1de68 <cloud_event_handler+0x110>)
}
   1de1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Unknown cloud event type: %d\n", evt->type);
   1de22:	f021 bb10 	b.w	3f446 <printk>
}
   1de26:	bd10      	pop	{r4, pc}
   1de28:	00044fd7 	.word	0x00044fd7
   1de2c:	200237d0 	.word	0x200237d0
   1de30:	00044fec 	.word	0x00044fec
   1de34:	00044ffd 	.word	0x00044ffd
   1de38:	00045015 	.word	0x00045015
   1de3c:	00045026 	.word	0x00045026
   1de40:	0004503b 	.word	0x0004503b
   1de44:	00045054 	.word	0x00045054
   1de48:	200237c8 	.word	0x200237c8
   1de4c:	0004506c 	.word	0x0004506c
   1de50:	0004508a 	.word	0x0004508a
   1de54:	000493e0 	.word	0x000493e0
   1de58:	200237f0 	.word	0x200237f0
   1de5c:	2002a220 	.word	0x2002a220
   1de60:	000450ac 	.word	0x000450ac
   1de64:	000450c1 	.word	0x000450c1
   1de68:	000450d6 	.word	0x000450d6

0001de6c <handle_bsdlib_init_ret>:
#endif /* defined(CONFIG_USE_UI_MODULE) */

void handle_bsdlib_init_ret(void)
{
   1de6c:	b508      	push	{r3, lr}
	#if defined(CONFIG_BSD_LIBRARY)
	int ret = bsdlib_get_init_ret();
   1de6e:	f005 f90f 	bl	23090 <bsdlib_get_init_ret>

	/* Handle return values relating to modem firmware update */
	switch (ret) {
   1de72:	4b0e      	ldr	r3, [pc, #56]	; (1deac <handle_bsdlib_init_ret+0x40>)
	int ret = bsdlib_get_init_ret();
   1de74:	4601      	mov	r1, r0
	switch (ret) {
   1de76:	4298      	cmp	r0, r3
   1de78:	dc06      	bgt.n	1de88 <handle_bsdlib_init_ret+0x1c>
   1de7a:	3b01      	subs	r3, #1
   1de7c:	4298      	cmp	r0, r3
   1de7e:	da0e      	bge.n	1de9e <handle_bsdlib_init_ret+0x32>
   1de80:	f1b0 6f88 	cmp.w	r0, #71303168	; 0x4400000
   1de84:	dc0f      	bgt.n	1dea6 <handle_bsdlib_init_ret+0x3a>
		break;
	default:
		break;
	}
	#endif /* CONFIG_BSD_LIBRARY */
}
   1de86:	bd08      	pop	{r3, pc}
	switch (ret) {
   1de88:	4b09      	ldr	r3, [pc, #36]	; (1deb0 <handle_bsdlib_init_ret+0x44>)
   1de8a:	4298      	cmp	r0, r3
   1de8c:	d1fb      	bne.n	1de86 <handle_bsdlib_init_ret+0x1a>
		printk("MODEM UPDATE OK. Will run new firmware\n");
   1de8e:	4809      	ldr	r0, [pc, #36]	; (1deb4 <handle_bsdlib_init_ret+0x48>)
   1de90:	f021 fad9 	bl	3f446 <printk>
}
   1de94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sys_reboot(SYS_REBOOT_COLD);
   1de98:	2001      	movs	r0, #1
   1de9a:	f001 bf91 	b.w	1fdc0 <sys_reboot>
		printk("MODEM UPDATE ERROR %d. Will run old firmware\n", ret);
   1de9e:	4806      	ldr	r0, [pc, #24]	; (1deb8 <handle_bsdlib_init_ret+0x4c>)
		printk("MODEM UPDATE FATAL ERROR %d. Modem failiure\n", ret);
   1dea0:	f021 fad1 	bl	3f446 <printk>
   1dea4:	e7f6      	b.n	1de94 <handle_bsdlib_init_ret+0x28>
   1dea6:	4805      	ldr	r0, [pc, #20]	; (1debc <handle_bsdlib_init_ret+0x50>)
   1dea8:	e7fa      	b.n	1dea0 <handle_bsdlib_init_ret+0x34>
   1deaa:	bf00      	nop
   1deac:	04400004 	.word	0x04400004
   1deb0:	05500001 	.word	0x05500001
   1deb4:	000451f4 	.word	0x000451f4
   1deb8:	0004521c 	.word	0x0004521c
   1debc:	0004524a 	.word	0x0004524a

0001dec0 <main>:

void main(void)
{
   1dec0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	int ret;

	printk("Asset tracker started\n");
   1dec4:	4891      	ldr	r0, [pc, #580]	; (1e10c <main+0x24c>)
   1dec6:	f021 fabe 	bl	3f446 <printk>

	handle_bsdlib_init_ret();
   1deca:	f7ff ffcf 	bl	1de6c <handle_bsdlib_init_ret>

	cloud_backend = cloud_get_binding("NRF_CLOUD");
   1dece:	4890      	ldr	r0, [pc, #576]	; (1e110 <main+0x250>)
   1ded0:	f006 ff4e 	bl	24d70 <cloud_get_binding>
   1ded4:	4d8f      	ldr	r5, [pc, #572]	; (1e114 <main+0x254>)
   1ded6:	6028      	str	r0, [r5, #0]
	__ASSERT(cloud_backend != NULL, "nRF Cloud backend not found");
   1ded8:	b970      	cbnz	r0, 1def8 <main+0x38>
   1deda:	498f      	ldr	r1, [pc, #572]	; (1e118 <main+0x258>)
   1dedc:	f240 434b 	movw	r3, #1099	; 0x44b
   1dee0:	4a8e      	ldr	r2, [pc, #568]	; (1e11c <main+0x25c>)
   1dee2:	488f      	ldr	r0, [pc, #572]	; (1e120 <main+0x260>)
   1dee4:	f021 faaf 	bl	3f446 <printk>
   1dee8:	488e      	ldr	r0, [pc, #568]	; (1e124 <main+0x264>)
   1deea:	f021 faac 	bl	3f446 <printk>
   1deee:	f240 414b 	movw	r1, #1099	; 0x44b
   1def2:	488a      	ldr	r0, [pc, #552]	; (1e11c <main+0x25c>)
   1def4:	f021 fab4 	bl	3f460 <assert_post_action>

	ret = cloud_init(cloud_backend, cloud_event_handler);
   1def8:	6828      	ldr	r0, [r5, #0]
	if (backend == NULL || backend->api == NULL ||
   1defa:	2800      	cmp	r0, #0
   1defc:	f000 80aa 	beq.w	1e054 <main+0x194>
   1df00:	6803      	ldr	r3, [r0, #0]
   1df02:	2b00      	cmp	r3, #0
   1df04:	f000 80a6 	beq.w	1e054 <main+0x194>
	    backend->api->init == NULL) {
   1df08:	681b      	ldr	r3, [r3, #0]
	if (backend == NULL || backend->api == NULL ||
   1df0a:	2b00      	cmp	r3, #0
   1df0c:	f000 80a2 	beq.w	1e054 <main+0x194>
	return backend->api->init(backend, handler);
   1df10:	4985      	ldr	r1, [pc, #532]	; (1e128 <main+0x268>)
   1df12:	4798      	blx	r3
	if (ret) {
   1df14:	4604      	mov	r4, r0
   1df16:	b130      	cbz	r0, 1df26 <main+0x66>
		printk("Cloud backend could not be initialized, error: %d\n",
   1df18:	4884      	ldr	r0, [pc, #528]	; (1e12c <main+0x26c>)
   1df1a:	4621      	mov	r1, r4
   1df1c:	f021 fa93 	bl	3f446 <printk>
			ret);
		cloud_error_handler(ret);
   1df20:	4620      	mov	r0, r4
   1df22:	f020 fe4f 	bl	3ebc4 <cloud_error_handler>
	}

#if defined(CONFIG_USE_UI_MODULE)
	ui_init(ui_evt_handler);
   1df26:	4882      	ldr	r0, [pc, #520]	; (1e130 <main+0x270>)
   1df28:	f000 f9cc 	bl	1e2c4 <ui_init>
#endif

	ret = cloud_decode_init(cloud_cmd_handler);
   1df2c:	4881      	ldr	r0, [pc, #516]	; (1e134 <main+0x274>)
   1df2e:	f000 fb5b 	bl	1e5e8 <cloud_decode_init>
	if (ret) {
   1df32:	4604      	mov	r4, r0
   1df34:	b130      	cbz	r0, 1df44 <main+0x84>
		printk("Cloud command decoder could not be initialized, error: %d\n", ret);
   1df36:	4601      	mov	r1, r0
   1df38:	487f      	ldr	r0, [pc, #508]	; (1e138 <main+0x278>)
   1df3a:	f021 fa84 	bl	3f446 <printk>
		cloud_error_handler(ret);
   1df3e:	4620      	mov	r0, r4
   1df40:	f020 fe40 	bl	3ebc4 <cloud_error_handler>
	z_impl_k_sem_init(sem, initial_count, limit);
   1df44:	2201      	movs	r2, #1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1df46:	2400      	movs	r4, #0
   1df48:	4611      	mov	r1, r2
   1df4a:	487c      	ldr	r0, [pc, #496]	; (1e13c <main+0x27c>)
   1df4c:	f01c ff6c 	bl	3ae28 <z_impl_k_sem_init>
   1df50:	4b7b      	ldr	r3, [pc, #492]	; (1e140 <main+0x280>)
   1df52:	4a7c      	ldr	r2, [pc, #496]	; (1e144 <main+0x284>)
   1df54:	601c      	str	r4, [r3, #0]
   1df56:	e9c3 2401 	strd	r2, r4, [r3, #4]
   1df5a:	4b7b      	ldr	r3, [pc, #492]	; (1e148 <main+0x288>)
   1df5c:	4a7b      	ldr	r2, [pc, #492]	; (1e14c <main+0x28c>)
	k_delayed_work_init(&long_press_button_work, long_press_handler);
   1df5e:	497c      	ldr	r1, [pc, #496]	; (1e150 <main+0x290>)
   1df60:	487c      	ldr	r0, [pc, #496]	; (1e154 <main+0x294>)
   1df62:	e9c3 2401 	strd	r2, r4, [r3, #4]
   1df66:	601c      	str	r4, [r3, #0]
   1df68:	f023 fc91 	bl	4188e <k_delayed_work_init>
	k_delayed_work_init(&cloud_reboot_work, cloud_reboot_handler);
   1df6c:	497a      	ldr	r1, [pc, #488]	; (1e158 <main+0x298>)
   1df6e:	487b      	ldr	r0, [pc, #492]	; (1e15c <main+0x29c>)
   1df70:	f023 fc8d 	bl	4188e <k_delayed_work_init>
	k_delayed_work_init(&cycle_cloud_connection_work,
   1df74:	497a      	ldr	r1, [pc, #488]	; (1e160 <main+0x2a0>)
   1df76:	487b      	ldr	r0, [pc, #492]	; (1e164 <main+0x2a4>)
   1df78:	f023 fc89 	bl	4188e <k_delayed_work_init>
   1df7c:	4b7a      	ldr	r3, [pc, #488]	; (1e168 <main+0x2a8>)
   1df7e:	4a7b      	ldr	r2, [pc, #492]	; (1e16c <main+0x2ac>)
   1df80:	601c      	str	r4, [r3, #0]
   1df82:	e9c3 2401 	strd	r2, r4, [r3, #4]
   1df86:	4b7a      	ldr	r3, [pc, #488]	; (1e170 <main+0x2b0>)
   1df88:	4a7a      	ldr	r2, [pc, #488]	; (1e174 <main+0x2b4>)
		printk("Connecting to LTE network. ");
   1df8a:	487b      	ldr	r0, [pc, #492]	; (1e178 <main+0x2b8>)
   1df8c:	601c      	str	r4, [r3, #0]
   1df8e:	e9c3 2401 	strd	r2, r4, [r3, #4]
   1df92:	f021 fa58 	bl	3f446 <printk>
		printk("This may take several minutes.\n");
   1df96:	4879      	ldr	r0, [pc, #484]	; (1e17c <main+0x2bc>)
   1df98:	f021 fa55 	bl	3f446 <printk>
		ui_led_set_pattern(UI_LTE_CONNECTING);
   1df9c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1dfa0:	f000 f98a 	bl	1e2b8 <ui_led_set_pattern>
		err = lte_lc_init_and_connect();
   1dfa4:	f023 fb49 	bl	4163a <lte_lc_init_and_connect>
		if (err) {
   1dfa8:	b138      	cbz	r0, 1dfba <main+0xfa>
			printk("LTE link could not be established.\n");
   1dfaa:	4875      	ldr	r0, [pc, #468]	; (1e180 <main+0x2c0>)
   1dfac:	f021 fa4b 	bl	3f446 <printk>
   1dfb0:	f001 fafa 	bl	1f5a8 <z_impl_log_panic>
	sys_reboot(0);
   1dfb4:	4620      	mov	r0, r4
   1dfb6:	f001 ff03 	bl	1fdc0 <sys_reboot>
		printk("Connected to LTE network\n");
   1dfba:	4872      	ldr	r0, [pc, #456]	; (1e184 <main+0x2c4>)
	return socket_ops->connect(sock, addr, addrlen);
}

static inline int poll(struct pollfd *fds, int nfds, int timeout)
{
	__ASSERT_NO_MSG(socket_ops);
   1dfbc:	4e72      	ldr	r6, [pc, #456]	; (1e188 <main+0x2c8>)
   1dfbe:	f021 fa42 	bl	3f446 <printk>
		ui_led_set_pattern(UI_LTE_CONNECTED);
   1dfc2:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1dfc6:	f000 f977 	bl	1e2b8 <ui_led_set_pattern>
	ret = cloud_connect(cloud_backend);
	if (ret) {
		printk("cloud_connect failed: %d\n", ret);
		cloud_error_handler(ret);
	} else {
		atomic_set(&reconnect_to_cloud, 0);
   1dfca:	f04f 0800 	mov.w	r8, #0
   1dfce:	4637      	mov	r7, r6
	ret = cloud_connect(cloud_backend);
   1dfd0:	6828      	ldr	r0, [r5, #0]
   1dfd2:	f020 fdd5 	bl	3eb80 <cloud_connect>
	if (ret) {
   1dfd6:	4604      	mov	r4, r0
		printk("cloud_connect failed: %d\n", ret);
   1dfd8:	4601      	mov	r1, r0
	if (ret) {
   1dfda:	2800      	cmp	r0, #0
   1dfdc:	d03d      	beq.n	1e05a <main+0x19a>
		printk("cloud_connect failed: %d\n", ret);
   1dfde:	486b      	ldr	r0, [pc, #428]	; (1e18c <main+0x2cc>)
   1dfe0:	f021 fa31 	bl	3f446 <printk>
		cloud_error_handler(ret);
   1dfe4:	4620      	mov	r0, r4
   1dfe6:	f020 fded 	bl	3ebc4 <cloud_error_handler>
				      CLOUD_CONNACK_WAIT_DURATION);
	}

	struct pollfd fds[] = {
		{
			.fd = cloud_backend->config->socket,
   1dfea:	682b      	ldr	r3, [r5, #0]
   1dfec:	4c68      	ldr	r4, [pc, #416]	; (1e190 <main+0x2d0>)
   1dfee:	685b      	ldr	r3, [r3, #4]
	struct pollfd fds[] = {
   1dff0:	f8ad 8006 	strh.w	r8, [sp, #6]
   1dff4:	689b      	ldr	r3, [r3, #8]
   1dff6:	9300      	str	r3, [sp, #0]
   1dff8:	2301      	movs	r3, #1
   1dffa:	f8ad 3004 	strh.w	r3, [sp, #4]
   1dffe:	6833      	ldr	r3, [r6, #0]
   1e000:	b94b      	cbnz	r3, 1e016 <main+0x156>
   1e002:	4964      	ldr	r1, [pc, #400]	; (1e194 <main+0x2d4>)
   1e004:	4846      	ldr	r0, [pc, #280]	; (1e120 <main+0x260>)
   1e006:	234d      	movs	r3, #77	; 0x4d
   1e008:	4622      	mov	r2, r4
   1e00a:	f021 fa1c 	bl	3f446 <printk>
   1e00e:	214d      	movs	r1, #77	; 0x4d
   1e010:	4620      	mov	r0, r4
   1e012:	f021 fa25 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->poll);
   1e016:	683b      	ldr	r3, [r7, #0]
   1e018:	699b      	ldr	r3, [r3, #24]
   1e01a:	b94b      	cbnz	r3, 1e030 <main+0x170>
   1e01c:	495e      	ldr	r1, [pc, #376]	; (1e198 <main+0x2d8>)
   1e01e:	4840      	ldr	r0, [pc, #256]	; (1e120 <main+0x260>)
   1e020:	234e      	movs	r3, #78	; 0x4e
   1e022:	4622      	mov	r2, r4
   1e024:	f021 fa0f 	bl	3f446 <printk>
   1e028:	214e      	movs	r1, #78	; 0x4e
   1e02a:	4620      	mov	r0, r4
   1e02c:	f021 fa18 	bl	3f460 <assert_post_action>

	return socket_ops->poll(fds, nfds, timeout);
   1e030:	683b      	ldr	r3, [r7, #0]
   1e032:	4a5a      	ldr	r2, [pc, #360]	; (1e19c <main+0x2dc>)
   1e034:	699b      	ldr	r3, [r3, #24]
   1e036:	2101      	movs	r1, #1
   1e038:	4668      	mov	r0, sp
   1e03a:	4798      	blx	r3
		 * must close the connection.
		 */
		ret = poll(fds, ARRAY_SIZE(fds),
			K_SECONDS(CONFIG_MQTT_KEEPALIVE / 3));

		if (ret < 0) {
   1e03c:	f1b0 0900 	subs.w	r9, r0, #0
   1e040:	da15      	bge.n	1e06e <main+0x1ae>
			printk("poll() returned an error: %d\n", ret);
   1e042:	4649      	mov	r1, r9
   1e044:	4856      	ldr	r0, [pc, #344]	; (1e1a0 <main+0x2e0>)
   1e046:	f021 f9fe 	bl	3f446 <printk>
			error_handler(ERROR_CLOUD, ret);
   1e04a:	4649      	mov	r1, r9
   1e04c:	2000      	movs	r0, #0
   1e04e:	f7ff fc2d 	bl	1d8ac <error_handler>
			continue;
   1e052:	e7d4      	b.n	1dffe <main+0x13e>
		return -ENOTSUP;
   1e054:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1e058:	e75e      	b.n	1df18 <main+0x58>
		atomic_set(&reconnect_to_cloud, 0);
   1e05a:	4852      	ldr	r0, [pc, #328]	; (1e1a4 <main+0x2e4>)
   1e05c:	f020 fda2 	bl	3eba4 <atomic_set>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1e060:	f247 5230 	movw	r2, #30000	; 0x7530
   1e064:	493d      	ldr	r1, [pc, #244]	; (1e15c <main+0x29c>)
   1e066:	4850      	ldr	r0, [pc, #320]	; (1e1a8 <main+0x2e8>)
   1e068:	f01d fa62 	bl	3b530 <k_delayed_work_submit_to_queue>
   1e06c:	e7bd      	b.n	1dfea <main+0x12a>
		}

		if (ret == 0) {
   1e06e:	d10a      	bne.n	1e086 <main+0x1c6>
			cloud_ping(cloud_backend);
   1e070:	6828      	ldr	r0, [r5, #0]
 *
 * @return 0 or a negative error code indicating reason of failure.
 */
static inline int cloud_ping(const struct cloud_backend *const backend)
{
	if (backend == NULL || backend->api == NULL) {
   1e072:	2800      	cmp	r0, #0
   1e074:	d0c3      	beq.n	1dffe <main+0x13e>
   1e076:	6803      	ldr	r3, [r0, #0]
   1e078:	2b00      	cmp	r3, #0
   1e07a:	d0c0      	beq.n	1dffe <main+0x13e>
		return -ENOTSUP;
	}

	/* Ping will only be sent if the backend has implemented it. */
	if (backend->api->ping != NULL) {
   1e07c:	695b      	ldr	r3, [r3, #20]
   1e07e:	2b00      	cmp	r3, #0
   1e080:	d0bd      	beq.n	1dffe <main+0x13e>
		return backend->api->ping(backend);
   1e082:	4798      	blx	r3
   1e084:	e7bb      	b.n	1dffe <main+0x13e>
			continue;
		}

		if ((fds[0].revents & POLLIN) == POLLIN) {
   1e086:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1e08a:	07da      	lsls	r2, r3, #31
   1e08c:	d506      	bpl.n	1e09c <main+0x1dc>
			cloud_input(cloud_backend);
   1e08e:	6828      	ldr	r0, [r5, #0]
 *
 * @return 0 or a negative error code indicating reason of failure.
 */
static inline int cloud_input(const struct cloud_backend *const backend)
{
	if (backend == NULL || backend->api == NULL ||
   1e090:	b120      	cbz	r0, 1e09c <main+0x1dc>
   1e092:	6803      	ldr	r3, [r0, #0]
   1e094:	b113      	cbz	r3, 1e09c <main+0x1dc>
	    backend->api->input == NULL) {
   1e096:	699b      	ldr	r3, [r3, #24]
	if (backend == NULL || backend->api == NULL ||
   1e098:	b103      	cbz	r3, 1e09c <main+0x1dc>
		return -ENOTSUP;
	}

	return backend->api->input(backend);
   1e09a:	4798      	blx	r3
		}

		if ((fds[0].revents & POLLNVAL) == POLLNVAL) {
   1e09c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1e0a0:	f013 0a20 	ands.w	sl, r3, #32
   1e0a4:	d019      	beq.n	1e0da <main+0x21a>
			if (atomic_get(&reconnect_to_cloud)) {
   1e0a6:	483f      	ldr	r0, [pc, #252]	; (1e1a4 <main+0x2e4>)
   1e0a8:	f020 fd84 	bl	3ebb4 <atomic_get>
   1e0ac:	4604      	mov	r4, r0
   1e0ae:	b130      	cbz	r0, 1e0be <main+0x1fe>
				k_delayed_work_cancel(&cloud_reboot_work);
   1e0b0:	482a      	ldr	r0, [pc, #168]	; (1e15c <main+0x29c>)
   1e0b2:	f01d fac7 	bl	3b644 <k_delayed_work_cancel>
				printk("Attempting reconnect...\n");
   1e0b6:	483d      	ldr	r0, [pc, #244]	; (1e1ac <main+0x2ec>)
   1e0b8:	f021 f9c5 	bl	3f446 <printk>
				goto connect;
   1e0bc:	e788      	b.n	1dfd0 <main+0x110>
			}
			printk("Socket error: POLLNVAL\n");
   1e0be:	483c      	ldr	r0, [pc, #240]	; (1e1b0 <main+0x2f0>)
   1e0c0:	f021 f9c1 	bl	3f446 <printk>
			printk("The cloud socket was unexpectedly closed.\n");
   1e0c4:	483b      	ldr	r0, [pc, #236]	; (1e1b4 <main+0x2f4>)
   1e0c6:	f021 f9be 	bl	3f446 <printk>
			error_handler(ERROR_CLOUD, -EIO);
   1e0ca:	f06f 0104 	mvn.w	r1, #4
   1e0ce:	4620      	mov	r0, r4
		}

		if ((fds[0].revents & POLLERR) == POLLERR) {
			printk("Socket error: POLLERR\n");
			printk("Cloud connection was unexpectedly closed.\n");
			error_handler(ERROR_CLOUD, -EIO);
   1e0d0:	f7ff fbec 	bl	1d8ac <error_handler>
		}
	}

	cloud_disconnect(cloud_backend);
	goto connect;
}
   1e0d4:	b002      	add	sp, #8
   1e0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if ((fds[0].revents & POLLHUP) == POLLHUP) {
   1e0da:	f013 0910 	ands.w	r9, r3, #16
   1e0de:	d009      	beq.n	1e0f4 <main+0x234>
			printk("Socket error: POLLHUP\n");
   1e0e0:	4835      	ldr	r0, [pc, #212]	; (1e1b8 <main+0x2f8>)
   1e0e2:	f021 f9b0 	bl	3f446 <printk>
			printk("Connection was closed by the cloud.\n");
   1e0e6:	4835      	ldr	r0, [pc, #212]	; (1e1bc <main+0x2fc>)
   1e0e8:	f021 f9ad 	bl	3f446 <printk>
			error_handler(ERROR_CLOUD, -EIO);
   1e0ec:	f06f 0104 	mvn.w	r1, #4
   1e0f0:	4650      	mov	r0, sl
   1e0f2:	e7ed      	b.n	1e0d0 <main+0x210>
		if ((fds[0].revents & POLLERR) == POLLERR) {
   1e0f4:	071b      	lsls	r3, r3, #28
   1e0f6:	d582      	bpl.n	1dffe <main+0x13e>
			printk("Socket error: POLLERR\n");
   1e0f8:	4831      	ldr	r0, [pc, #196]	; (1e1c0 <main+0x300>)
   1e0fa:	f021 f9a4 	bl	3f446 <printk>
			printk("Cloud connection was unexpectedly closed.\n");
   1e0fe:	4831      	ldr	r0, [pc, #196]	; (1e1c4 <main+0x304>)
   1e100:	f021 f9a1 	bl	3f446 <printk>
			error_handler(ERROR_CLOUD, -EIO);
   1e104:	f06f 0104 	mvn.w	r1, #4
   1e108:	4648      	mov	r0, r9
   1e10a:	e7e1      	b.n	1e0d0 <main+0x210>
   1e10c:	000452bc 	.word	0x000452bc
   1e110:	000452d3 	.word	0x000452d3
   1e114:	200237cc 	.word	0x200237cc
   1e118:	000452f9 	.word	0x000452f9
   1e11c:	000452dd 	.word	0x000452dd
   1e120:	00045316 	.word	0x00045316
   1e124:	00045333 	.word	0x00045333
   1e128:	0001dd59 	.word	0x0001dd59
   1e12c:	00045351 	.word	0x00045351
   1e130:	0001d65d 	.word	0x0001d65d
   1e134:	0001d78d 	.word	0x0001d78d
   1e138:	00045384 	.word	0x00045384
   1e13c:	20031fa8 	.word	0x20031fa8
   1e140:	20023864 	.word	0x20023864
   1e144:	0001dc81 	.word	0x0001dc81
   1e148:	20023870 	.word	0x20023870
   1e14c:	0001d53d 	.word	0x0001d53d
   1e150:	0001d50d 	.word	0x0001d50d
   1e154:	20023830 	.word	0x20023830
   1e158:	0003ebbb 	.word	0x0003ebbb
   1e15c:	200237d0 	.word	0x200237d0
   1e160:	0001d735 	.word	0x0001d735
   1e164:	200237f0 	.word	0x200237f0
   1e168:	20023810 	.word	0x20023810
   1e16c:	0001dbd5 	.word	0x0001dbd5
   1e170:	20023854 	.word	0x20023854
   1e174:	0001db65 	.word	0x0001db65
   1e178:	000453bf 	.word	0x000453bf
   1e17c:	00045b7e 	.word	0x00045b7e
   1e180:	000453db 	.word	0x000453db
   1e184:	000453ff 	.word	0x000453ff
   1e188:	20023934 	.word	0x20023934
   1e18c:	00044f36 	.word	0x00044f36
   1e190:	00045419 	.word	0x00045419
   1e194:	00045442 	.word	0x00045442
   1e198:	0004544d 	.word	0x0004544d
   1e19c:	00061a80 	.word	0x00061a80
   1e1a0:	0004545e 	.word	0x0004545e
   1e1a4:	20023850 	.word	0x20023850
   1e1a8:	2002a220 	.word	0x2002a220
   1e1ac:	0004547c 	.word	0x0004547c
   1e1b0:	00045495 	.word	0x00045495
   1e1b4:	000454ad 	.word	0x000454ad
   1e1b8:	000454d8 	.word	0x000454d8
   1e1bc:	000454ef 	.word	0x000454ef
   1e1c0:	00045514 	.word	0x00045514
   1e1c4:	0004552b 	.word	0x0004552b

0001e1c8 <motion_init_and_start>:
	return 0;
}

/**@brief Initialize motion module. */
int motion_init_and_start(motion_handler_t motion_handler)
{
   1e1c8:	b508      	push	{r3, lr}
	if (motion_handler == NULL) {
   1e1ca:	b190      	cbz	r0, 1e1f2 <motion_init_and_start+0x2a>
		return -EINVAL;
	}

	int err;

	handler = motion_handler;
   1e1cc:	4b0a      	ldr	r3, [pc, #40]	; (1e1f8 <motion_init_and_start+0x30>)
   1e1ce:	6018      	str	r0, [r3, #0]
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1e1d0:	480a      	ldr	r0, [pc, #40]	; (1e1fc <motion_init_and_start+0x34>)
   1e1d2:	f01a fdf1 	bl	38db8 <z_impl_device_get_binding>
	accel_dev = device_get_binding(CONFIG_ACCEL_DEV_NAME);
   1e1d6:	4b0a      	ldr	r3, [pc, #40]	; (1e200 <motion_init_and_start+0x38>)
   1e1d8:	6018      	str	r0, [r3, #0]
	if (accel_dev == NULL) {
   1e1da:	b118      	cbz	r0, 1e1e4 <motion_init_and_start+0x1c>

	if (err) {
		return err;
	}

	sensor_trigger_handler(NULL, NULL);
   1e1dc:	f7fb fe8c 	bl	19ef8 <sensor_trigger_handler.isra.0>
	return 0;
   1e1e0:	2000      	movs	r0, #0
}
   1e1e2:	bd08      	pop	{r3, pc}
		printk("Could not get %s device\n",
   1e1e4:	4807      	ldr	r0, [pc, #28]	; (1e204 <motion_init_and_start+0x3c>)
   1e1e6:	4905      	ldr	r1, [pc, #20]	; (1e1fc <motion_init_and_start+0x34>)
   1e1e8:	f021 f92d 	bl	3f446 <printk>
		return -ENODEV;
   1e1ec:	f06f 0012 	mvn.w	r0, #18
   1e1f0:	e7f7      	b.n	1e1e2 <motion_init_and_start+0x1a>
		return -EINVAL;
   1e1f2:	f06f 0015 	mvn.w	r0, #21
   1e1f6:	e7f4      	b.n	1e1e2 <motion_init_and_start+0x1a>
   1e1f8:	20023894 	.word	0x20023894
   1e1fc:	0004571e 	.word	0x0004571e
   1e200:	20023890 	.word	0x20023890
   1e204:	00045729 	.word	0x00045729

0001e208 <button_handler>:
}
#endif /* CONFIG_UI_LED_USE_PWM */

/**@brief Callback for button events from the DK buttons and LEDs library. */
static void button_handler(u32_t button_states, u32_t has_changed)
{
   1e208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e20a:	4605      	mov	r5, r0
   1e20c:	460c      	mov	r4, r1
				break;
			}
		}

		/* Button number has been stored, remove from bitmask. */
		has_changed &= ~(1UL << (btn_num - 1));
   1e20e:	2601      	movs	r6, #1
		evt.button = btn_num;
		evt.type = (button_states & BIT(btn_num - 1))
				? UI_EVT_BUTTON_ACTIVE
				: UI_EVT_BUTTON_INACTIVE;

		callback(evt);
   1e210:	4f11      	ldr	r7, [pc, #68]	; (1e258 <button_handler+0x50>)
	while (has_changed) {
   1e212:	b90c      	cbnz	r4, 1e218 <button_handler+0x10>
	}
}
   1e214:	b003      	add	sp, #12
   1e216:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e218:	2300      	movs	r3, #0
			if (has_changed & BIT(i)) {
   1e21a:	1c59      	adds	r1, r3, #1
   1e21c:	fa24 f303 	lsr.w	r3, r4, r3
   1e220:	f013 0001 	ands.w	r0, r3, #1
   1e224:	b2ca      	uxtb	r2, r1
   1e226:	d103      	bne.n	1e230 <button_handler+0x28>
		for (u8_t i = 0; i < 32; i++) {
   1e228:	2920      	cmp	r1, #32
   1e22a:	460b      	mov	r3, r1
   1e22c:	d1f5      	bne.n	1e21a <button_handler+0x12>
		btn_num = 0;
   1e22e:	4602      	mov	r2, r0
		has_changed &= ~(1UL << (btn_num - 1));
   1e230:	1e53      	subs	r3, r2, #1
   1e232:	fa06 f103 	lsl.w	r1, r6, r3
				? UI_EVT_BUTTON_ACTIVE
   1e236:	fa25 f303 	lsr.w	r3, r5, r3
				: UI_EVT_BUTTON_INACTIVE;
   1e23a:	43db      	mvns	r3, r3
   1e23c:	f003 0301 	and.w	r3, r3, #1
		evt.button = btn_num;
   1e240:	9201      	str	r2, [sp, #4]
				: UI_EVT_BUTTON_INACTIVE;
   1e242:	f88d 3000 	strb.w	r3, [sp]
		callback(evt);
   1e246:	aa02      	add	r2, sp, #8
		has_changed &= ~(1UL << (btn_num - 1));
   1e248:	ea24 0401 	bic.w	r4, r4, r1
		callback(evt);
   1e24c:	683b      	ldr	r3, [r7, #0]
   1e24e:	e912 0003 	ldmdb	r2, {r0, r1}
   1e252:	4798      	blx	r3
   1e254:	e7dd      	b.n	1e212 <button_handler+0xa>
   1e256:	bf00      	nop
   1e258:	20023898 	.word	0x20023898

0001e25c <leds_update>:
	led_on_mask = UI_LED_GET_ON(current_led_state);
   1e25c:	4b11      	ldr	r3, [pc, #68]	; (1e2a4 <leds_update+0x48>)
{
   1e25e:	b570      	push	{r4, r5, r6, lr}
	led_on_mask = UI_LED_GET_ON(current_led_state);
   1e260:	881c      	ldrh	r4, [r3, #0]
	led_on = !led_on;
   1e262:	4b11      	ldr	r3, [pc, #68]	; (1e2a8 <leds_update+0x4c>)
{
   1e264:	4606      	mov	r6, r0
	led_on = !led_on;
   1e266:	781a      	ldrb	r2, [r3, #0]
   1e268:	f082 0201 	eor.w	r2, r2, #1
   1e26c:	701a      	strb	r2, [r3, #0]
	if (led_on) {
   1e26e:	f344 2307 	sbfx	r3, r4, #8, #8
   1e272:	b264      	sxtb	r4, r4
   1e274:	b192      	cbz	r2, 1e29c <leds_update+0x40>
		led_on_mask |= UI_LED_GET_BLINK(current_led_state);
   1e276:	431c      	orrs	r4, r3
	if (led_on_mask != current_led_on_mask) {
   1e278:	4d0c      	ldr	r5, [pc, #48]	; (1e2ac <leds_update+0x50>)
		led_on_mask &= ~UI_LED_GET_BLINK(current_led_state);
   1e27a:	b2e4      	uxtb	r4, r4
	if (led_on_mask != current_led_on_mask) {
   1e27c:	782b      	ldrb	r3, [r5, #0]
   1e27e:	42a3      	cmp	r3, r4
   1e280:	d003      	beq.n	1e28a <leds_update+0x2e>
		dk_set_leds(led_on_mask);
   1e282:	4620      	mov	r0, r4
   1e284:	f022 fed7 	bl	41036 <dk_set_leds>
		current_led_on_mask = led_on_mask;
   1e288:	702c      	strb	r4, [r5, #0]
	if (work) {
   1e28a:	b156      	cbz	r6, 1e2a2 <leds_update+0x46>
}
   1e28c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e290:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   1e294:	4906      	ldr	r1, [pc, #24]	; (1e2b0 <leds_update+0x54>)
   1e296:	4807      	ldr	r0, [pc, #28]	; (1e2b4 <leds_update+0x58>)
   1e298:	f01d b94a 	b.w	3b530 <k_delayed_work_submit_to_queue>
		led_on_mask &= ~UI_LED_GET_BLINK(current_led_state);
   1e29c:	ea24 0403 	bic.w	r4, r4, r3
   1e2a0:	e7ea      	b.n	1e278 <leds_update+0x1c>
}
   1e2a2:	bd70      	pop	{r4, r5, r6, pc}
   1e2a4:	2002a300 	.word	0x2002a300
   1e2a8:	2002ad9b 	.word	0x2002ad9b
   1e2ac:	2002ad9a 	.word	0x2002ad9a
   1e2b0:	2002389c 	.word	0x2002389c
   1e2b4:	2002a220 	.word	0x2002a220

0001e2b8 <ui_led_set_pattern>:

void ui_led_set_pattern(enum ui_led_pattern state)
{
	current_led_state = state;
   1e2b8:	4b01      	ldr	r3, [pc, #4]	; (1e2c0 <ui_led_set_pattern+0x8>)
   1e2ba:	8018      	strh	r0, [r3, #0]
#ifdef CONFIG_UI_LED_USE_PWM
	ui_led_set_effect(state);
#else
	current_led_state = state;
#endif /* CONFIG_UI_LED_USE_PWM */
}
   1e2bc:	4770      	bx	lr
   1e2be:	bf00      	nop
   1e2c0:	2002a300 	.word	0x2002a300

0001e2c4 <ui_init>:
	}
#endif
}

int ui_init(ui_callback_t cb)
{
   1e2c4:	b538      	push	{r3, r4, r5, lr}
   1e2c6:	4605      	mov	r5, r0
	if (err) {
		LOG_ERR("Error when initializing PWM controlled LEDs");
		return err;
	}
#else
	err = dk_leds_init();
   1e2c8:	f005 fb30 	bl	2392c <dk_leds_init>
	if (err) {
   1e2cc:	4604      	mov	r4, r0
   1e2ce:	b180      	cbz	r0, 1e2f2 <ui_init+0x2e>
		LOG_ERR("Could not initialize leds, err code: %d\n", err);
   1e2d0:	2301      	movs	r3, #1
   1e2d2:	f04f 0000 	mov.w	r0, #0
   1e2d6:	4a21      	ldr	r2, [pc, #132]	; (1e35c <ui_init+0x98>)
   1e2d8:	f363 0007 	bfi	r0, r3, #0, #8
   1e2dc:	4b20      	ldr	r3, [pc, #128]	; (1e360 <ui_init+0x9c>)
   1e2de:	4921      	ldr	r1, [pc, #132]	; (1e364 <ui_init+0xa0>)
   1e2e0:	1a9b      	subs	r3, r3, r2
   1e2e2:	4622      	mov	r2, r4
   1e2e4:	08db      	lsrs	r3, r3, #3
   1e2e6:	f363 108f 	bfi	r0, r3, #6, #10
	if (cb) {
		callback  = cb;

		err = dk_buttons_init(button_handler);
		if (err) {
			LOG_ERR("Could not initialize buttons, err code: %d\n",
   1e2ea:	f021 f8ca 	bl	3f482 <log_string_sync>
		return err;
	}
#endif /* CONFIG_UI_NMOS */

	return err;
}
   1e2ee:	4620      	mov	r0, r4
   1e2f0:	bd38      	pop	{r3, r4, r5, pc}
	err = dk_set_leds_state(0x00, DK_ALL_LEDS_MSK);
   1e2f2:	210f      	movs	r1, #15
   1e2f4:	f022 fe95 	bl	41022 <dk_set_leds_state>
	if (err) {
   1e2f8:	4604      	mov	r4, r0
   1e2fa:	b168      	cbz	r0, 1e318 <ui_init+0x54>
		LOG_ERR("Could not set leds state, err code: %d\n", err);
   1e2fc:	2301      	movs	r3, #1
   1e2fe:	f04f 0000 	mov.w	r0, #0
   1e302:	4a16      	ldr	r2, [pc, #88]	; (1e35c <ui_init+0x98>)
   1e304:	f363 0007 	bfi	r0, r3, #0, #8
   1e308:	4b15      	ldr	r3, [pc, #84]	; (1e360 <ui_init+0x9c>)
   1e30a:	4917      	ldr	r1, [pc, #92]	; (1e368 <ui_init+0xa4>)
   1e30c:	1a9b      	subs	r3, r3, r2
   1e30e:	08db      	lsrs	r3, r3, #3
   1e310:	f363 108f 	bfi	r0, r3, #6, #10
   1e314:	4622      	mov	r2, r4
   1e316:	e7e8      	b.n	1e2ea <ui_init+0x26>
	k_delayed_work_init(&leds_update_work, leds_update);
   1e318:	4914      	ldr	r1, [pc, #80]	; (1e36c <ui_init+0xa8>)
   1e31a:	4815      	ldr	r0, [pc, #84]	; (1e370 <ui_init+0xac>)
   1e31c:	f023 fab7 	bl	4188e <k_delayed_work_init>
   1e320:	4622      	mov	r2, r4
   1e322:	4913      	ldr	r1, [pc, #76]	; (1e370 <ui_init+0xac>)
   1e324:	4813      	ldr	r0, [pc, #76]	; (1e374 <ui_init+0xb0>)
   1e326:	f01d f903 	bl	3b530 <k_delayed_work_submit_to_queue>
	if (cb) {
   1e32a:	2d00      	cmp	r5, #0
   1e32c:	d0df      	beq.n	1e2ee <ui_init+0x2a>
		callback  = cb;
   1e32e:	4b12      	ldr	r3, [pc, #72]	; (1e378 <ui_init+0xb4>)
		err = dk_buttons_init(button_handler);
   1e330:	4812      	ldr	r0, [pc, #72]	; (1e37c <ui_init+0xb8>)
		callback  = cb;
   1e332:	601d      	str	r5, [r3, #0]
		err = dk_buttons_init(button_handler);
   1e334:	f005 fb54 	bl	239e0 <dk_buttons_init>
		if (err) {
   1e338:	4604      	mov	r4, r0
   1e33a:	2800      	cmp	r0, #0
   1e33c:	d0d7      	beq.n	1e2ee <ui_init+0x2a>
			LOG_ERR("Could not initialize buttons, err code: %d\n",
   1e33e:	2301      	movs	r3, #1
   1e340:	f04f 0000 	mov.w	r0, #0
   1e344:	4a05      	ldr	r2, [pc, #20]	; (1e35c <ui_init+0x98>)
   1e346:	f363 0007 	bfi	r0, r3, #0, #8
   1e34a:	4b05      	ldr	r3, [pc, #20]	; (1e360 <ui_init+0x9c>)
   1e34c:	490c      	ldr	r1, [pc, #48]	; (1e380 <ui_init+0xbc>)
   1e34e:	1a9b      	subs	r3, r3, r2
   1e350:	08db      	lsrs	r3, r3, #3
   1e352:	f363 108f 	bfi	r0, r3, #6, #10
   1e356:	4622      	mov	r2, r4
   1e358:	e7c7      	b.n	1e2ea <ui_init+0x26>
   1e35a:	bf00      	nop
   1e35c:	00042fb4 	.word	0x00042fb4
   1e360:	000430bc 	.word	0x000430bc
   1e364:	0004577c 	.word	0x0004577c
   1e368:	000457a5 	.word	0x000457a5
   1e36c:	0001e25d 	.word	0x0001e25d
   1e370:	2002389c 	.word	0x2002389c
   1e374:	2002a220 	.word	0x2002a220
   1e378:	20023898 	.word	0x20023898
   1e37c:	0001e209 	.word	0x0001e209
   1e380:	000457cd 	.word	0x000457cd

0001e384 <cloud_set_chan_cfg_item>:
{
   1e384:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e386:	4616      	mov	r6, r2
   1e388:	461f      	mov	r7, r3
		if (sensor_cfg[i].chan == channel) {
   1e38a:	2230      	movs	r2, #48	; 0x30
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   1e38c:	2300      	movs	r3, #0
		if (sensor_cfg[i].chan == channel) {
   1e38e:	4c0a      	ldr	r4, [pc, #40]	; (1e3b8 <cloud_set_chan_cfg_item+0x34>)
   1e390:	fb02 f503 	mul.w	r5, r2, r3
   1e394:	5d2d      	ldrb	r5, [r5, r4]
   1e396:	4285      	cmp	r5, r0
   1e398:	d108      	bne.n	1e3ac <cloud_set_chan_cfg_item+0x28>
	cfg->value[type] = value;
   1e39a:	2206      	movs	r2, #6
	return 0;
   1e39c:	2000      	movs	r0, #0
	cfg->value[type] = value;
   1e39e:	fb02 1303 	mla	r3, r2, r3, r1
   1e3a2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   1e3a6:	e9c3 6702 	strd	r6, r7, [r3, #8]
}
   1e3aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   1e3ac:	3301      	adds	r3, #1
   1e3ae:	2b08      	cmp	r3, #8
   1e3b0:	d1ee      	bne.n	1e390 <cloud_set_chan_cfg_item+0xc>
	return -ENOTSUP;
   1e3b2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e3b6:	e7f8      	b.n	1e3aa <cloud_set_chan_cfg_item+0x26>
   1e3b8:	20031698 	.word	0x20031698

0001e3bc <cloud_encode_data>:
{
   1e3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e3c0:	4688      	mov	r8, r1
   1e3c2:	4617      	mov	r7, r2
	if (channel == NULL || channel->data.buf == NULL ||
   1e3c4:	4606      	mov	r6, r0
   1e3c6:	2800      	cmp	r0, #0
   1e3c8:	d04f      	beq.n	1e46a <cloud_encode_data+0xae>
   1e3ca:	6843      	ldr	r3, [r0, #4]
   1e3cc:	2b00      	cmp	r3, #0
   1e3ce:	d04c      	beq.n	1e46a <cloud_encode_data+0xae>
   1e3d0:	6883      	ldr	r3, [r0, #8]
   1e3d2:	2b00      	cmp	r3, #0
   1e3d4:	d049      	beq.n	1e46a <cloud_encode_data+0xae>
	    channel->data.len == 0 || output == NULL ||
   1e3d6:	2a00      	cmp	r2, #0
   1e3d8:	d047      	beq.n	1e46a <cloud_encode_data+0xae>
   1e3da:	290a      	cmp	r1, #10
   1e3dc:	d845      	bhi.n	1e46a <cloud_encode_data+0xae>
	cJSON *root_obj = cJSON_CreateObject();
   1e3de:	f004 fe2f 	bl	23040 <cJSON_CreateObject>
	if (root_obj == NULL) {
   1e3e2:	4605      	mov	r5, r0
   1e3e4:	b930      	cbnz	r0, 1e3f4 <cloud_encode_data+0x38>
		cJSON_Delete(root_obj);
   1e3e6:	f004 fd67 	bl	22eb8 <cJSON_Delete>
		return -ENOMEM;
   1e3ea:	f06f 040b 	mvn.w	r4, #11
}
   1e3ee:	4620      	mov	r0, r4
   1e3f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			   channel_type_str[channel->type]);
   1e3f4:	7832      	ldrb	r2, [r6, #0]
	json_str = cJSON_CreateString(item);
   1e3f6:	4b1e      	ldr	r3, [pc, #120]	; (1e470 <cloud_encode_data+0xb4>)
   1e3f8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1e3fc:	f004 fdfc 	bl	22ff8 <cJSON_CreateString>
	if (json_str == NULL) {
   1e400:	4602      	mov	r2, r0
   1e402:	b1c8      	cbz	r0, 1e438 <cloud_encode_data+0x7c>
	cJSON_AddItemToObject(parent, str, item);
   1e404:	491b      	ldr	r1, [pc, #108]	; (1e474 <cloud_encode_data+0xb8>)
   1e406:	4628      	mov	r0, r5
   1e408:	f022 f9de 	bl	407c8 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   1e40c:	f04f 0900 	mov.w	r9, #0
	json_str = cJSON_CreateString(item);
   1e410:	6870      	ldr	r0, [r6, #4]
   1e412:	f004 fdf1 	bl	22ff8 <cJSON_CreateString>
	if (json_str == NULL) {
   1e416:	4602      	mov	r2, r0
   1e418:	b188      	cbz	r0, 1e43e <cloud_encode_data+0x82>
	cJSON_AddItemToObject(parent, str, item);
   1e41a:	4917      	ldr	r1, [pc, #92]	; (1e478 <cloud_encode_data+0xbc>)
   1e41c:	4628      	mov	r0, r5
   1e41e:	f022 f9d3 	bl	407c8 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   1e422:	2400      	movs	r4, #0
	ret += json_add_str(root_obj, CMD_GROUP_KEY_STR, cmd_group_str[group]);
   1e424:	4b15      	ldr	r3, [pc, #84]	; (1e47c <cloud_encode_data+0xc0>)
	ret += json_add_str(root_obj, CMD_DATA_TYPE_KEY_STR, channel->data.buf);
   1e426:	444c      	add	r4, r9
	json_str = cJSON_CreateString(item);
   1e428:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
   1e42c:	f004 fde4 	bl	22ff8 <cJSON_CreateString>
	if (json_str == NULL) {
   1e430:	4602      	mov	r2, r0
   1e432:	b938      	cbnz	r0, 1e444 <cloud_encode_data+0x88>
		cJSON_Delete(root_obj);
   1e434:	4628      	mov	r0, r5
   1e436:	e7d6      	b.n	1e3e6 <cloud_encode_data+0x2a>
		return -ENOMEM;
   1e438:	f06f 090b 	mvn.w	r9, #11
   1e43c:	e7e8      	b.n	1e410 <cloud_encode_data+0x54>
   1e43e:	f06f 040b 	mvn.w	r4, #11
   1e442:	e7ef      	b.n	1e424 <cloud_encode_data+0x68>
	cJSON_AddItemToObject(parent, str, item);
   1e444:	490e      	ldr	r1, [pc, #56]	; (1e480 <cloud_encode_data+0xc4>)
   1e446:	4628      	mov	r0, r5
   1e448:	f022 f9be 	bl	407c8 <cJSON_AddItemToObject>
	if (ret != 0) {
   1e44c:	2c00      	cmp	r4, #0
   1e44e:	d1f1      	bne.n	1e434 <cloud_encode_data+0x78>
	buffer = cJSON_PrintUnformatted(root_obj);
   1e450:	4628      	mov	r0, r5
   1e452:	f022 f9a9 	bl	407a8 <cJSON_PrintUnformatted>
   1e456:	4606      	mov	r6, r0
	cJSON_Delete(root_obj);
   1e458:	4628      	mov	r0, r5
   1e45a:	f004 fd2d 	bl	22eb8 <cJSON_Delete>
	output->buf = buffer;
   1e45e:	603e      	str	r6, [r7, #0]
	output->len = strlen(buffer);
   1e460:	4630      	mov	r0, r6
   1e462:	f7fb fd3f 	bl	19ee4 <strlen>
   1e466:	6078      	str	r0, [r7, #4]
	return 0;
   1e468:	e7c1      	b.n	1e3ee <cloud_encode_data+0x32>
		return -EINVAL;
   1e46a:	f06f 0415 	mvn.w	r4, #21
   1e46e:	e7be      	b.n	1e3ee <cloud_encode_data+0x32>
   1e470:	00043258 	.word	0x00043258
   1e474:	00045871 	.word	0x00045871
   1e478:	00045877 	.word	0x00045877
   1e47c:	000432ac 	.word	0x000432ac
   1e480:	0004587c 	.word	0x0004587c

0001e484 <cloud_encode_digital_twin_data>:
{
   1e484:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1e488:	4688      	mov	r8, r1
	__ASSERT_NO_MSG(channel != NULL);
   1e48a:	4606      	mov	r6, r0
   1e48c:	b958      	cbnz	r0, 1e4a6 <cloud_encode_digital_twin_data+0x22>
   1e48e:	494b      	ldr	r1, [pc, #300]	; (1e5bc <cloud_encode_digital_twin_data+0x138>)
   1e490:	484b      	ldr	r0, [pc, #300]	; (1e5c0 <cloud_encode_digital_twin_data+0x13c>)
   1e492:	f240 1357 	movw	r3, #343	; 0x157
   1e496:	4a4b      	ldr	r2, [pc, #300]	; (1e5c4 <cloud_encode_digital_twin_data+0x140>)
   1e498:	f020 ffd5 	bl	3f446 <printk>
   1e49c:	f240 1157 	movw	r1, #343	; 0x157
   1e4a0:	4848      	ldr	r0, [pc, #288]	; (1e5c4 <cloud_encode_digital_twin_data+0x140>)
   1e4a2:	f020 ffdd 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(channel->data.buf != NULL);
   1e4a6:	6873      	ldr	r3, [r6, #4]
   1e4a8:	b95b      	cbnz	r3, 1e4c2 <cloud_encode_digital_twin_data+0x3e>
   1e4aa:	4947      	ldr	r1, [pc, #284]	; (1e5c8 <cloud_encode_digital_twin_data+0x144>)
   1e4ac:	4844      	ldr	r0, [pc, #272]	; (1e5c0 <cloud_encode_digital_twin_data+0x13c>)
   1e4ae:	f44f 73ac 	mov.w	r3, #344	; 0x158
   1e4b2:	4a44      	ldr	r2, [pc, #272]	; (1e5c4 <cloud_encode_digital_twin_data+0x140>)
   1e4b4:	f020 ffc7 	bl	3f446 <printk>
   1e4b8:	f44f 71ac 	mov.w	r1, #344	; 0x158
   1e4bc:	4841      	ldr	r0, [pc, #260]	; (1e5c4 <cloud_encode_digital_twin_data+0x140>)
   1e4be:	f020 ffcf 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(channel->data.len != 0);
   1e4c2:	68b3      	ldr	r3, [r6, #8]
   1e4c4:	b95b      	cbnz	r3, 1e4de <cloud_encode_digital_twin_data+0x5a>
   1e4c6:	4941      	ldr	r1, [pc, #260]	; (1e5cc <cloud_encode_digital_twin_data+0x148>)
   1e4c8:	483d      	ldr	r0, [pc, #244]	; (1e5c0 <cloud_encode_digital_twin_data+0x13c>)
   1e4ca:	f240 1359 	movw	r3, #345	; 0x159
   1e4ce:	4a3d      	ldr	r2, [pc, #244]	; (1e5c4 <cloud_encode_digital_twin_data+0x140>)
   1e4d0:	f020 ffb9 	bl	3f446 <printk>
   1e4d4:	f240 1159 	movw	r1, #345	; 0x159
   1e4d8:	483a      	ldr	r0, [pc, #232]	; (1e5c4 <cloud_encode_digital_twin_data+0x140>)
   1e4da:	f020 ffc1 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   1e4de:	f1b8 0f00 	cmp.w	r8, #0
   1e4e2:	d10b      	bne.n	1e4fc <cloud_encode_digital_twin_data+0x78>
   1e4e4:	493a      	ldr	r1, [pc, #232]	; (1e5d0 <cloud_encode_digital_twin_data+0x14c>)
   1e4e6:	4836      	ldr	r0, [pc, #216]	; (1e5c0 <cloud_encode_digital_twin_data+0x13c>)
   1e4e8:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   1e4ec:	4a35      	ldr	r2, [pc, #212]	; (1e5c4 <cloud_encode_digital_twin_data+0x140>)
   1e4ee:	f020 ffaa 	bl	3f446 <printk>
   1e4f2:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   1e4f6:	4833      	ldr	r0, [pc, #204]	; (1e5c4 <cloud_encode_digital_twin_data+0x140>)
   1e4f8:	f020 ffb2 	bl	3f460 <assert_post_action>
	cJSON *root_obj = cJSON_CreateObject();
   1e4fc:	f004 fda0 	bl	23040 <cJSON_CreateObject>
   1e500:	4604      	mov	r4, r0
	cJSON *state_obj = cJSON_CreateObject();
   1e502:	f004 fd9d 	bl	23040 <cJSON_CreateObject>
   1e506:	4607      	mov	r7, r0
	cJSON *reported_obj = cJSON_CreateObject();
   1e508:	f004 fd9a 	bl	23040 <cJSON_CreateObject>
	char dev_str[] = CLOUD_CHANNEL_STR_DEVICE_INFO;
   1e50c:	4b31      	ldr	r3, [pc, #196]	; (1e5d4 <cloud_encode_digital_twin_data+0x150>)
	cJSON *reported_obj = cJSON_CreateObject();
   1e50e:	4605      	mov	r5, r0
	char dev_str[] = CLOUD_CHANNEL_STR_DEVICE_INFO;
   1e510:	889a      	ldrh	r2, [r3, #4]
   1e512:	6818      	ldr	r0, [r3, #0]
   1e514:	799b      	ldrb	r3, [r3, #6]
   1e516:	9000      	str	r0, [sp, #0]
   1e518:	f8ad 2004 	strh.w	r2, [sp, #4]
   1e51c:	f88d 3006 	strb.w	r3, [sp, #6]
	if (root_obj == NULL || state_obj == NULL || reported_obj == NULL) {
   1e520:	b10c      	cbz	r4, 1e526 <cloud_encode_digital_twin_data+0xa2>
   1e522:	b107      	cbz	r7, 1e526 <cloud_encode_digital_twin_data+0xa2>
   1e524:	b96d      	cbnz	r5, 1e542 <cloud_encode_digital_twin_data+0xbe>
		cJSON_Delete(root_obj);
   1e526:	4620      	mov	r0, r4
   1e528:	f004 fcc6 	bl	22eb8 <cJSON_Delete>
		cJSON_Delete(state_obj);
   1e52c:	4638      	mov	r0, r7
   1e52e:	f004 fcc3 	bl	22eb8 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   1e532:	4628      	mov	r0, r5
   1e534:	f004 fcc0 	bl	22eb8 <cJSON_Delete>
		return -ENOMEM;
   1e538:	f06f 000b 	mvn.w	r0, #11
}
   1e53c:	b002      	add	sp, #8
   1e53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (channel->type == CLOUD_CHANNEL_DEVICE_INFO) {
   1e542:	7833      	ldrb	r3, [r6, #0]
   1e544:	2b0d      	cmp	r3, #13
   1e546:	d134      	bne.n	1e5b2 <cloud_encode_digital_twin_data+0x12e>
		cJSON *dummy_obj = cJSON_CreateNull();
   1e548:	f004 fd4a 	bl	22fe0 <cJSON_CreateNull>
		if (dummy_obj == NULL) {
   1e54c:	4602      	mov	r2, r0
   1e54e:	b118      	cbz	r0, 1e558 <cloud_encode_digital_twin_data+0xd4>
	cJSON_AddItemToObject(parent, str, item);
   1e550:	4669      	mov	r1, sp
   1e552:	4628      	mov	r0, r5
   1e554:	f022 f938 	bl	407c8 <cJSON_AddItemToObject>
	return 0;
   1e558:	466a      	mov	r2, sp
			dev_str[i] = tolower(dev_str[i]);
   1e55a:	481f      	ldr	r0, [pc, #124]	; (1e5d8 <cloud_encode_digital_twin_data+0x154>)
		for (int i = 0; dev_str[i]; ++i) {
   1e55c:	f812 3b01 	ldrb.w	r3, [r2], #1
   1e560:	b9f3      	cbnz	r3, 1e5a0 <cloud_encode_digital_twin_data+0x11c>
		channel_type = dev_str;
   1e562:	4669      	mov	r1, sp
	cJSON_AddItemToObject(parent, str, item);
   1e564:	4628      	mov	r0, r5
   1e566:	6872      	ldr	r2, [r6, #4]
   1e568:	f022 f92e 	bl	407c8 <cJSON_AddItemToObject>
   1e56c:	462a      	mov	r2, r5
   1e56e:	491b      	ldr	r1, [pc, #108]	; (1e5dc <cloud_encode_digital_twin_data+0x158>)
   1e570:	4638      	mov	r0, r7
   1e572:	f022 f929 	bl	407c8 <cJSON_AddItemToObject>
   1e576:	463a      	mov	r2, r7
   1e578:	4919      	ldr	r1, [pc, #100]	; (1e5e0 <cloud_encode_digital_twin_data+0x15c>)
   1e57a:	4620      	mov	r0, r4
   1e57c:	f022 f924 	bl	407c8 <cJSON_AddItemToObject>
	buffer = cJSON_PrintUnformatted(root_obj);
   1e580:	4620      	mov	r0, r4
   1e582:	f022 f911 	bl	407a8 <cJSON_PrintUnformatted>
   1e586:	4605      	mov	r5, r0
	cJSON_Delete(root_obj);
   1e588:	4620      	mov	r0, r4
   1e58a:	f004 fc95 	bl	22eb8 <cJSON_Delete>
	output->buf = buffer;
   1e58e:	f8c8 5000 	str.w	r5, [r8]
	output->len = strlen(buffer);
   1e592:	4628      	mov	r0, r5
   1e594:	f7fb fca6 	bl	19ee4 <strlen>
   1e598:	f8c8 0004 	str.w	r0, [r8, #4]
	return 0;
   1e59c:	2000      	movs	r0, #0
   1e59e:	e7cd      	b.n	1e53c <cloud_encode_digital_twin_data+0xb8>
			dev_str[i] = tolower(dev_str[i]);
   1e5a0:	5cc1      	ldrb	r1, [r0, r3]
   1e5a2:	f001 0103 	and.w	r1, r1, #3
   1e5a6:	2901      	cmp	r1, #1
   1e5a8:	bf08      	it	eq
   1e5aa:	3320      	addeq	r3, #32
   1e5ac:	f802 3c01 	strb.w	r3, [r2, #-1]
   1e5b0:	e7d4      	b.n	1e55c <cloud_encode_digital_twin_data+0xd8>
		channel_type = channel_type_str[channel->type];
   1e5b2:	4a0c      	ldr	r2, [pc, #48]	; (1e5e4 <cloud_encode_digital_twin_data+0x160>)
   1e5b4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   1e5b8:	e7d4      	b.n	1e564 <cloud_encode_digital_twin_data+0xe0>
   1e5ba:	bf00      	nop
   1e5bc:	000458b7 	.word	0x000458b7
   1e5c0:	00045316 	.word	0x00045316
   1e5c4:	00045888 	.word	0x00045888
   1e5c8:	000458ce 	.word	0x000458ce
   1e5cc:	000458ef 	.word	0x000458ef
   1e5d0:	00045906 	.word	0x00045906
   1e5d4:	0004592b 	.word	0x0004592b
   1e5d8:	0004a77d 	.word	0x0004a77d
   1e5dc:	0004591c 	.word	0x0004591c
   1e5e0:	00045925 	.word	0x00045925
   1e5e4:	00043258 	.word	0x00043258

0001e5e8 <cloud_decode_init>:
	cloud_command_cb = cb;
   1e5e8:	4b01      	ldr	r3, [pc, #4]	; (1e5f0 <cloud_decode_init+0x8>)
   1e5ea:	6018      	str	r0, [r3, #0]
}
   1e5ec:	2000      	movs	r0, #0
   1e5ee:	4770      	bx	lr
   1e5f0:	200238bc 	.word	0x200238bc

0001e5f4 <cloud_encode_env_sensors_data>:
{
   1e5f4:	b570      	push	{r4, r5, r6, lr}
   1e5f6:	460d      	mov	r5, r1
   1e5f8:	b088      	sub	sp, #32
	__ASSERT_NO_MSG(sensor_data != NULL);
   1e5fa:	4604      	mov	r4, r0
   1e5fc:	b958      	cbnz	r0, 1e616 <cloud_encode_env_sensors_data+0x22>
   1e5fe:	4920      	ldr	r1, [pc, #128]	; (1e680 <cloud_encode_env_sensors_data+0x8c>)
   1e600:	4820      	ldr	r0, [pc, #128]	; (1e684 <cloud_encode_env_sensors_data+0x90>)
   1e602:	f240 238f 	movw	r3, #655	; 0x28f
   1e606:	4a20      	ldr	r2, [pc, #128]	; (1e688 <cloud_encode_env_sensors_data+0x94>)
   1e608:	f020 ff1d 	bl	3f446 <printk>
   1e60c:	f240 218f 	movw	r1, #655	; 0x28f
   1e610:	481d      	ldr	r0, [pc, #116]	; (1e688 <cloud_encode_env_sensors_data+0x94>)
   1e612:	f020 ff25 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   1e616:	b95d      	cbnz	r5, 1e630 <cloud_encode_env_sensors_data+0x3c>
   1e618:	491c      	ldr	r1, [pc, #112]	; (1e68c <cloud_encode_env_sensors_data+0x98>)
   1e61a:	481a      	ldr	r0, [pc, #104]	; (1e684 <cloud_encode_env_sensors_data+0x90>)
   1e61c:	f44f 7324 	mov.w	r3, #656	; 0x290
   1e620:	4a19      	ldr	r2, [pc, #100]	; (1e688 <cloud_encode_env_sensors_data+0x94>)
   1e622:	f020 ff10 	bl	3f446 <printk>
   1e626:	f44f 7124 	mov.w	r1, #656	; 0x290
   1e62a:	4817      	ldr	r0, [pc, #92]	; (1e688 <cloud_encode_env_sensors_data+0x94>)
   1e62c:	f020 ff18 	bl	3f460 <assert_post_action>
	switch (sensor_data->type) {
   1e630:	7823      	ldrb	r3, [r4, #0]
   1e632:	2b03      	cmp	r3, #3
   1e634:	d820      	bhi.n	1e678 <cloud_encode_env_sensors_data+0x84>
   1e636:	e8df f003 	tbb	[pc, r3]
   1e63a:	1902      	.short	0x1902
   1e63c:	1d1b      	.short	0x1d1b
		cloud_sensor.type = CLOUD_CHANNEL_TEMP;
   1e63e:	2308      	movs	r3, #8
	len = snprintf(buf, sizeof(buf), "%.1f",
   1e640:	ae02      	add	r6, sp, #8
		cloud_sensor.type = CLOUD_CHANNEL_AIR_QUAL;
   1e642:	f88d 3010 	strb.w	r3, [sp, #16]
	len = snprintf(buf, sizeof(buf), "%.1f",
   1e646:	2106      	movs	r1, #6
   1e648:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   1e64c:	4630      	mov	r0, r6
   1e64e:	e9cd 2300 	strd	r2, r3, [sp]
   1e652:	4a0f      	ldr	r2, [pc, #60]	; (1e690 <cloud_encode_env_sensors_data+0x9c>)
   1e654:	f01e ff4c 	bl	3d4f0 <sniprintf>
	cloud_sensor.data.len = len;
   1e658:	b2c0      	uxtb	r0, r0
   1e65a:	9006      	str	r0, [sp, #24]
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   1e65c:	462a      	mov	r2, r5
   1e65e:	2106      	movs	r1, #6
   1e660:	a804      	add	r0, sp, #16
	cloud_sensor.data.buf = buf;
   1e662:	9605      	str	r6, [sp, #20]
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   1e664:	f7ff feaa 	bl	1e3bc <cloud_encode_data>
}
   1e668:	b008      	add	sp, #32
   1e66a:	bd70      	pop	{r4, r5, r6, pc}
		cloud_sensor.type = CLOUD_CHANNEL_HUMID;
   1e66c:	2309      	movs	r3, #9
   1e66e:	e7e7      	b.n	1e640 <cloud_encode_env_sensors_data+0x4c>
		cloud_sensor.type = CLOUD_CHANNEL_AIR_PRESS;
   1e670:	230a      	movs	r3, #10
   1e672:	e7e5      	b.n	1e640 <cloud_encode_env_sensors_data+0x4c>
		cloud_sensor.type = CLOUD_CHANNEL_AIR_QUAL;
   1e674:	230b      	movs	r3, #11
   1e676:	e7e3      	b.n	1e640 <cloud_encode_env_sensors_data+0x4c>
		return -1;
   1e678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e67c:	e7f4      	b.n	1e668 <cloud_encode_env_sensors_data+0x74>
   1e67e:	bf00      	nop
   1e680:	00045932 	.word	0x00045932
   1e684:	00045316 	.word	0x00045316
   1e688:	00045888 	.word	0x00045888
   1e68c:	00045906 	.word	0x00045906
   1e690:	0004594d 	.word	0x0004594d

0001e694 <cloud_encode_motion_data>:
{
   1e694:	b530      	push	{r4, r5, lr}
   1e696:	460c      	mov	r4, r1
   1e698:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(motion_data != NULL);
   1e69a:	4605      	mov	r5, r0
   1e69c:	b958      	cbnz	r0, 1e6b6 <cloud_encode_motion_data+0x22>
   1e69e:	4918      	ldr	r1, [pc, #96]	; (1e700 <cloud_encode_motion_data+0x6c>)
   1e6a0:	4818      	ldr	r0, [pc, #96]	; (1e704 <cloud_encode_motion_data+0x70>)
   1e6a2:	f240 23b6 	movw	r3, #694	; 0x2b6
   1e6a6:	4a18      	ldr	r2, [pc, #96]	; (1e708 <cloud_encode_motion_data+0x74>)
   1e6a8:	f020 fecd 	bl	3f446 <printk>
   1e6ac:	f240 21b6 	movw	r1, #694	; 0x2b6
   1e6b0:	4815      	ldr	r0, [pc, #84]	; (1e708 <cloud_encode_motion_data+0x74>)
   1e6b2:	f020 fed5 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   1e6b6:	b95c      	cbnz	r4, 1e6d0 <cloud_encode_motion_data+0x3c>
   1e6b8:	4914      	ldr	r1, [pc, #80]	; (1e70c <cloud_encode_motion_data+0x78>)
   1e6ba:	4812      	ldr	r0, [pc, #72]	; (1e704 <cloud_encode_motion_data+0x70>)
   1e6bc:	f240 23b7 	movw	r3, #695	; 0x2b7
   1e6c0:	4a11      	ldr	r2, [pc, #68]	; (1e708 <cloud_encode_motion_data+0x74>)
   1e6c2:	f020 fec0 	bl	3f446 <printk>
   1e6c6:	f240 21b7 	movw	r1, #695	; 0x2b7
   1e6ca:	480f      	ldr	r0, [pc, #60]	; (1e708 <cloud_encode_motion_data+0x74>)
   1e6cc:	f020 fec8 	bl	3f460 <assert_post_action>
	cloud_sensor.type = CLOUD_CHANNEL_FLIP;
   1e6d0:	2301      	movs	r3, #1
   1e6d2:	f88d 3000 	strb.w	r3, [sp]
	switch (motion_data->orientation) {
   1e6d6:	782b      	ldrb	r3, [r5, #0]
   1e6d8:	2b01      	cmp	r3, #1
   1e6da:	d005      	beq.n	1e6e8 <cloud_encode_motion_data+0x54>
   1e6dc:	2b02      	cmp	r3, #2
   1e6de:	d00d      	beq.n	1e6fc <cloud_encode_motion_data+0x68>
		return -1;
   1e6e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1e6e4:	b005      	add	sp, #20
   1e6e6:	bd30      	pop	{r4, r5, pc}
		cloud_sensor.data.buf = "NORMAL";
   1e6e8:	4b09      	ldr	r3, [pc, #36]	; (1e710 <cloud_encode_motion_data+0x7c>)
		cloud_sensor.data.buf = "UPSIDE_DOWN";
   1e6ea:	9301      	str	r3, [sp, #4]
	cloud_sensor.data.len = sizeof(cloud_sensor.data.buf) - 1;
   1e6ec:	2303      	movs	r3, #3
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   1e6ee:	4622      	mov	r2, r4
   1e6f0:	2106      	movs	r1, #6
   1e6f2:	4668      	mov	r0, sp
	cloud_sensor.data.len = sizeof(cloud_sensor.data.buf) - 1;
   1e6f4:	9302      	str	r3, [sp, #8]
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   1e6f6:	f7ff fe61 	bl	1e3bc <cloud_encode_data>
   1e6fa:	e7f3      	b.n	1e6e4 <cloud_encode_motion_data+0x50>
		cloud_sensor.data.buf = "UPSIDE_DOWN";
   1e6fc:	4b05      	ldr	r3, [pc, #20]	; (1e714 <cloud_encode_motion_data+0x80>)
   1e6fe:	e7f4      	b.n	1e6ea <cloud_encode_motion_data+0x56>
   1e700:	00045952 	.word	0x00045952
   1e704:	00045316 	.word	0x00045316
   1e708:	00045888 	.word	0x00045888
   1e70c:	00045906 	.word	0x00045906
   1e710:	0004596d 	.word	0x0004596d
   1e714:	00045974 	.word	0x00045974

0001e718 <cloud_is_send_allowed>:
{
   1e718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (sensor_cfg[i].chan == channel) {
   1e71c:	4c23      	ldr	r4, [pc, #140]	; (1e7ac <cloud_is_send_allowed+0x94>)
{
   1e71e:	ec57 6b10 	vmov	r6, r7, d0
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   1e722:	2500      	movs	r5, #0
		if (sensor_cfg[i].chan == channel) {
   1e724:	2230      	movs	r2, #48	; 0x30
   1e726:	46a2      	mov	sl, r4
   1e728:	fb02 f305 	mul.w	r3, r2, r5
   1e72c:	5d19      	ldrb	r1, [r3, r4]
   1e72e:	4281      	cmp	r1, r0
   1e730:	d12a      	bne.n	1e788 <cloud_is_send_allowed+0x70>
	    (!cfg->value[SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE])) {
   1e732:	441c      	add	r4, r3
	if ((cfg == NULL) ||
   1e734:	2200      	movs	r2, #0
   1e736:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   1e73a:	2300      	movs	r3, #0
   1e73c:	f7fa fa94 	bl	18c68 <__aeabi_dcmpeq>
   1e740:	bb28      	cbnz	r0, 1e78e <cloud_is_send_allowed+0x76>
	if (((cfg->value[SENSOR_CHAN_CFG_ITEM_TYPE_THRESH_LOW_ENABLE]) &&
   1e742:	e9d4 8906 	ldrd	r8, r9, [r4, #24]
   1e746:	2200      	movs	r2, #0
   1e748:	2300      	movs	r3, #0
   1e74a:	4640      	mov	r0, r8
   1e74c:	4649      	mov	r1, r9
   1e74e:	f7fa fa8b 	bl	18c68 <__aeabi_dcmpeq>
   1e752:	b930      	cbnz	r0, 1e762 <cloud_is_send_allowed+0x4a>
   1e754:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1e758:	4630      	mov	r0, r6
   1e75a:	4639      	mov	r1, r7
   1e75c:	f7fa fa8e 	bl	18c7c <__aeabi_dcmplt>
   1e760:	b9b8      	cbnz	r0, 1e792 <cloud_is_send_allowed+0x7a>
	if (((cfg->value[SENSOR_CHAN_CFG_ITEM_TYPE_THRESH_HIGH_ENABLE]) &&
   1e762:	2330      	movs	r3, #48	; 0x30
   1e764:	fb03 a505 	mla	r5, r3, r5, sl
   1e768:	2200      	movs	r2, #0
   1e76a:	e9d5 010a 	ldrd	r0, r1, [r5, #40]	; 0x28
   1e76e:	2300      	movs	r3, #0
   1e770:	f7fa fa7a 	bl	18c68 <__aeabi_dcmpeq>
   1e774:	b978      	cbnz	r0, 1e796 <cloud_is_send_allowed+0x7e>
   1e776:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
   1e77a:	4630      	mov	r0, r6
   1e77c:	4639      	mov	r1, r7
   1e77e:	f7fa fa9b 	bl	18cb8 <__aeabi_dcmpgt>
   1e782:	b930      	cbnz	r0, 1e792 <cloud_is_send_allowed+0x7a>
}
   1e784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   1e788:	3501      	adds	r5, #1
   1e78a:	2d08      	cmp	r5, #8
   1e78c:	d1cc      	bne.n	1e728 <cloud_is_send_allowed+0x10>
		return false;
   1e78e:	2000      	movs	r0, #0
   1e790:	e7f8      	b.n	1e784 <cloud_is_send_allowed+0x6c>
		return true;
   1e792:	2001      	movs	r0, #1
   1e794:	e7f6      	b.n	1e784 <cloud_is_send_allowed+0x6c>
	return (!cfg->value[SENSOR_CHAN_CFG_ITEM_TYPE_THRESH_LOW_ENABLE] &&
   1e796:	2200      	movs	r2, #0
   1e798:	2300      	movs	r3, #0
   1e79a:	4640      	mov	r0, r8
   1e79c:	4649      	mov	r1, r9
   1e79e:	f7fa fa63 	bl	18c68 <__aeabi_dcmpeq>
   1e7a2:	3000      	adds	r0, #0
   1e7a4:	bf18      	it	ne
   1e7a6:	2001      	movne	r0, #1
   1e7a8:	e7ec      	b.n	1e784 <cloud_is_send_allowed+0x6c>
   1e7aa:	bf00      	nop
   1e7ac:	20031698 	.word	0x20031698

0001e7b0 <service_info_json_object_encode>:
}

int service_info_json_object_encode(
	const char * const ui[], const u32_t ui_count, const char * const fota[],
	const u32_t fota_count, const u16_t fota_version, cJSON * const obj_out)
{
   1e7b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e7b4:	b087      	sub	sp, #28
   1e7b6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   1e7b8:	4604      	mov	r4, r0
   1e7ba:	4689      	mov	r9, r1
   1e7bc:	4617      	mov	r7, r2
   1e7be:	4698      	mov	r8, r3
	int err = 0;
	cJSON *service_info_obj = NULL;
	char fota_name[FOTAS_JSON_NAME_SIZE];

	if ((obj_out == NULL) || ((ui == NULL) && ui_count) ||
   1e7c0:	b386      	cbz	r6, 1e824 <service_info_json_object_encode+0x74>
   1e7c2:	b900      	cbnz	r0, 1e7c6 <service_info_json_object_encode+0x16>
   1e7c4:	bb71      	cbnz	r1, 1e824 <service_info_json_object_encode+0x74>
   1e7c6:	b917      	cbnz	r7, 1e7ce <service_info_json_object_encode+0x1e>
	    ((fota == NULL) && fota_count)) {
   1e7c8:	f1b8 0f00 	cmp.w	r8, #0
   1e7cc:	d12a      	bne.n	1e824 <service_info_json_object_encode+0x74>
		return -EINVAL;
	}

	service_info_obj = cJSON_CreateObject();
   1e7ce:	f004 fc37 	bl	23040 <cJSON_CreateObject>
	if (service_info_obj == NULL) {
   1e7d2:	4605      	mov	r5, r0
   1e7d4:	b348      	cbz	r0, 1e82a <service_info_json_object_encode+0x7a>
		return -ENOMEM;
	}

	if (!err) {
		err = add_array_obj(ui, ui_count, UI_JSON_NAME,
   1e7d6:	4603      	mov	r3, r0
   1e7d8:	4a15      	ldr	r2, [pc, #84]	; (1e830 <service_info_json_object_encode+0x80>)
   1e7da:	4620      	mov	r0, r4
   1e7dc:	4649      	mov	r1, r9
   1e7de:	f020 fa18 	bl	3ec12 <add_array_obj>
				    service_info_obj);
	}

	if (!err) {
   1e7e2:	4604      	mov	r4, r0
   1e7e4:	b9d0      	cbnz	r0, 1e81c <service_info_json_object_encode+0x6c>
		snprintf(fota_name, sizeof(fota_name), "%s%hu", FOTAS_JSON_NAME,
   1e7e6:	210c      	movs	r1, #12
   1e7e8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1e7ec:	4a11      	ldr	r2, [pc, #68]	; (1e834 <service_info_json_object_encode+0x84>)
   1e7ee:	9300      	str	r3, [sp, #0]
   1e7f0:	eb0d 0001 	add.w	r0, sp, r1
   1e7f4:	4b10      	ldr	r3, [pc, #64]	; (1e838 <service_info_json_object_encode+0x88>)
   1e7f6:	f01e fe7b 	bl	3d4f0 <sniprintf>
			 fota_version);
		err = add_array_obj(fota, fota_count, fota_name,
   1e7fa:	462b      	mov	r3, r5
   1e7fc:	aa03      	add	r2, sp, #12
   1e7fe:	4641      	mov	r1, r8
   1e800:	4638      	mov	r0, r7
   1e802:	f020 fa06 	bl	3ec12 <add_array_obj>
				    service_info_obj);
	}

	if (!err) {
   1e806:	4604      	mov	r4, r0
   1e808:	b940      	cbnz	r0, 1e81c <service_info_json_object_encode+0x6c>
		cJSON_AddItemToObject(obj_out, SERVICE_INFO_JSON_NAME,
   1e80a:	462a      	mov	r2, r5
   1e80c:	490b      	ldr	r1, [pc, #44]	; (1e83c <service_info_json_object_encode+0x8c>)
   1e80e:	4630      	mov	r0, r6
   1e810:	f021 ffda 	bl	407c8 <cJSON_AddItemToObject>
	} else {
		cJSON_Delete(service_info_obj);
	}

	return err;
}
   1e814:	4620      	mov	r0, r4
   1e816:	b007      	add	sp, #28
   1e818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cJSON_Delete(service_info_obj);
   1e81c:	4628      	mov	r0, r5
   1e81e:	f004 fb4b 	bl	22eb8 <cJSON_Delete>
   1e822:	e7f7      	b.n	1e814 <service_info_json_object_encode+0x64>
		return -EINVAL;
   1e824:	f06f 0415 	mvn.w	r4, #21
   1e828:	e7f4      	b.n	1e814 <service_info_json_object_encode+0x64>
		return -ENOMEM;
   1e82a:	f06f 040b 	mvn.w	r4, #11
   1e82e:	e7f1      	b.n	1e814 <service_info_json_object_encode+0x64>
   1e830:	00045779 	.word	0x00045779
   1e834:	00045a51 	.word	0x00045a51
   1e838:	00045a4a 	.word	0x00045a4a
   1e83c:	00045a57 	.word	0x00045a57

0001e840 <gps_work_handler>:

	return 0;
}

static void gps_work_handler(struct k_work *work)
{
   1e840:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (gps_work.type == GPS_WORK_START) {
   1e842:	4c36      	ldr	r4, [pc, #216]	; (1e91c <gps_work_handler+0xdc>)
   1e844:	7823      	ldrb	r3, [r4, #0]
   1e846:	4625      	mov	r5, r4
   1e848:	2b00      	cmp	r3, #0
   1e84a:	d146      	bne.n	1e8da <gps_work_handler+0x9a>
		printk("Enabling PSM\n");
   1e84c:	4834      	ldr	r0, [pc, #208]	; (1e920 <gps_work_handler+0xe0>)
   1e84e:	f020 fdfa 	bl	3f446 <printk>
		err = lte_lc_psm_req(true);
   1e852:	2001      	movs	r0, #1
   1e854:	f00a fca0 	bl	29198 <lte_lc_psm_req>
		if (err) {
   1e858:	b1c0      	cbz	r0, 1e88c <gps_work_handler+0x4c>
			printk("PSM mode could not be enabled");
   1e85a:	4832      	ldr	r0, [pc, #200]	; (1e924 <gps_work_handler+0xe4>)
   1e85c:	f020 fdf3 	bl	3f446 <printk>
			printk(" or was already enabled\n.");
   1e860:	4831      	ldr	r0, [pc, #196]	; (1e928 <gps_work_handler+0xe8>)
			printk("PSM enabled\n");
   1e862:	f020 fdf0 	bl	3f446 <printk>
	return z_impl_k_sleep(ms);
   1e866:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1e86a:	f01c fab5 	bl	3add8 <z_impl_k_sleep>
	err = gps_start(gps_work.dev);
   1e86e:	6a68      	ldr	r0, [r5, #36]	; 0x24
static inline int gps_start(struct device *dev)
{
	const struct gps_driver_api *api =
		(const struct gps_driver_api *)dev->driver_api;

	return api->start(dev);
   1e870:	6843      	ldr	r3, [r0, #4]
   1e872:	68db      	ldr	r3, [r3, #12]
   1e874:	4798      	blx	r3
	if (err) {
   1e876:	4604      	mov	r4, r0
   1e878:	b150      	cbz	r0, 1e890 <gps_work_handler+0x50>
		printk("Failed starting GPS!\n");
   1e87a:	482c      	ldr	r0, [pc, #176]	; (1e92c <gps_work_handler+0xec>)
   1e87c:	f020 fde3 	bl	3f446 <printk>
		err = start();
		if (err) {
			printk("GPS could not be started, error: %d\n", err);
   1e880:	4621      	mov	r1, r4
   1e882:	482b      	ldr	r0, [pc, #172]	; (1e930 <gps_work_handler+0xf0>)
			CONFIG_GPS_CONTROL_FIX_CHECK_INTERVAL);

		k_delayed_work_submit(&gps_work.work,
			K_SECONDS(CONFIG_GPS_CONTROL_FIX_CHECK_INTERVAL));
	}
}
   1e884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("GPS could not be stopped, error: %d\n", err);
   1e888:	f020 bddd 	b.w	3f446 <printk>
			printk("PSM enabled\n");
   1e88c:	4829      	ldr	r0, [pc, #164]	; (1e934 <gps_work_handler+0xf4>)
   1e88e:	e7e8      	b.n	1e862 <gps_work_handler+0x22>
	atomic_set(&gps_is_active, 1);
   1e890:	2101      	movs	r1, #1
   1e892:	4829      	ldr	r0, [pc, #164]	; (1e938 <gps_work_handler+0xf8>)
   1e894:	f020 f9ed 	bl	3ec72 <atomic_set>
	printk("GPS started successfully.\nSearching for satellites ");
   1e898:	4828      	ldr	r0, [pc, #160]	; (1e93c <gps_work_handler+0xfc>)
   1e89a:	f020 fdd4 	bl	3f446 <printk>
	printk("to get position fix. This may take several minutes.\n");
   1e89e:	4828      	ldr	r0, [pc, #160]	; (1e940 <gps_work_handler+0x100>)
   1e8a0:	f020 fdd1 	bl	3f446 <printk>
	printk("The device will attempt to get a fix for %d seconds, ",
   1e8a4:	f44f 71b4 	mov.w	r1, #360	; 0x168
   1e8a8:	4826      	ldr	r0, [pc, #152]	; (1e944 <gps_work_handler+0x104>)
   1e8aa:	f020 fdcc 	bl	3f446 <printk>
	printk("before the GPS is stopped.\n");
   1e8ae:	4826      	ldr	r0, [pc, #152]	; (1e948 <gps_work_handler+0x108>)
   1e8b0:	f020 fdc9 	bl	3f446 <printk>
		printk("GPS operation started\n");
   1e8b4:	4825      	ldr	r0, [pc, #148]	; (1e94c <gps_work_handler+0x10c>)
   1e8b6:	f020 fdc6 	bl	3f446 <printk>
		atomic_set(&gps_is_active, 1);
   1e8ba:	2101      	movs	r1, #1
   1e8bc:	481e      	ldr	r0, [pc, #120]	; (1e938 <gps_work_handler+0xf8>)
   1e8be:	f020 f9d8 	bl	3ec72 <atomic_set>
		ui_led_set_pattern(UI_LED_GPS_SEARCHING);
   1e8c2:	2008      	movs	r0, #8
   1e8c4:	f7ff fcf8 	bl	1e2b8 <ui_led_set_pattern>
		gps_work.type = GPS_WORK_STOP;
   1e8c8:	2301      	movs	r3, #1
   1e8ca:	4a21      	ldr	r2, [pc, #132]	; (1e950 <gps_work_handler+0x110>)
   1e8cc:	4921      	ldr	r1, [pc, #132]	; (1e954 <gps_work_handler+0x114>)
   1e8ce:	702b      	strb	r3, [r5, #0]
   1e8d0:	4821      	ldr	r0, [pc, #132]	; (1e958 <gps_work_handler+0x118>)
}
   1e8d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1e8d6:	f01c be2b 	b.w	3b530 <k_delayed_work_submit_to_queue>
	} else if (gps_work.type == GPS_WORK_STOP) {
   1e8da:	2b01      	cmp	r3, #1
   1e8dc:	d11c      	bne.n	1e918 <gps_work_handler+0xd8>
	err = gps_stop(gps_work.dev);
   1e8de:	6a60      	ldr	r0, [r4, #36]	; 0x24
static inline int gps_stop(struct device *dev)
{
	const struct gps_driver_api *api =
		(const struct gps_driver_api *)dev->driver_api;

	return api->stop(dev);
   1e8e0:	6843      	ldr	r3, [r0, #4]
   1e8e2:	691b      	ldr	r3, [r3, #16]
   1e8e4:	4798      	blx	r3
	if (err) {
   1e8e6:	4605      	mov	r5, r0
   1e8e8:	b110      	cbz	r0, 1e8f0 <gps_work_handler+0xb0>
			printk("GPS could not be stopped, error: %d\n", err);
   1e8ea:	4601      	mov	r1, r0
   1e8ec:	481b      	ldr	r0, [pc, #108]	; (1e95c <gps_work_handler+0x11c>)
   1e8ee:	e7c9      	b.n	1e884 <gps_work_handler+0x44>
		printk("GPS operation was stopped\n");
   1e8f0:	481b      	ldr	r0, [pc, #108]	; (1e960 <gps_work_handler+0x120>)
   1e8f2:	f020 fda8 	bl	3f446 <printk>
		atomic_set(&gps_is_active, 0);
   1e8f6:	4629      	mov	r1, r5
   1e8f8:	480f      	ldr	r0, [pc, #60]	; (1e938 <gps_work_handler+0xf8>)
   1e8fa:	f020 f9ba 	bl	3ec72 <atomic_set>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e8fe:	4b19      	ldr	r3, [pc, #100]	; (1e964 <gps_work_handler+0x124>)
   1e900:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&gps_is_enabled) == 0) {
   1e904:	b143      	cbz	r3, 1e918 <gps_work_handler+0xd8>
		printk("The device will try to get fix again in %d seconds\n",
   1e906:	211e      	movs	r1, #30
   1e908:	4817      	ldr	r0, [pc, #92]	; (1e968 <gps_work_handler+0x128>)
		gps_work.type = GPS_WORK_START;
   1e90a:	7025      	strb	r5, [r4, #0]
		printk("The device will try to get fix again in %d seconds\n",
   1e90c:	f020 fd9b 	bl	3f446 <printk>
   1e910:	f247 5230 	movw	r2, #30000	; 0x7530
   1e914:	1d21      	adds	r1, r4, #4
   1e916:	e7db      	b.n	1e8d0 <gps_work_handler+0x90>
}
   1e918:	bd38      	pop	{r3, r4, r5, pc}
   1e91a:	bf00      	nop
   1e91c:	200238c8 	.word	0x200238c8
   1e920:	00045aa7 	.word	0x00045aa7
   1e924:	00045ab5 	.word	0x00045ab5
   1e928:	00045ad3 	.word	0x00045ad3
   1e92c:	00045afa 	.word	0x00045afa
   1e930:	00045b10 	.word	0x00045b10
   1e934:	00045aed 	.word	0x00045aed
   1e938:	200238c0 	.word	0x200238c0
   1e93c:	00045b35 	.word	0x00045b35
   1e940:	00045b69 	.word	0x00045b69
   1e944:	00045b9e 	.word	0x00045b9e
   1e948:	00045bd4 	.word	0x00045bd4
   1e94c:	00045bf0 	.word	0x00045bf0
   1e950:	00057e40 	.word	0x00057e40
   1e954:	200238cc 	.word	0x200238cc
   1e958:	2002a220 	.word	0x2002a220
   1e95c:	00045c07 	.word	0x00045c07
   1e960:	00045c2c 	.word	0x00045c2c
   1e964:	200238c4 	.word	0x200238c4
   1e968:	00045c47 	.word	0x00045c47

0001e96c <gps_control_is_active>:
   1e96c:	4b03      	ldr	r3, [pc, #12]	; (1e97c <gps_control_is_active+0x10>)
   1e96e:	e8d3 0faf 	lda	r0, [r3]
#if !defined(CONFIG_GPS_SIM)
	return atomic_get(&gps_is_active);
#else
	return false;
#endif
}
   1e972:	3000      	adds	r0, #0
   1e974:	bf18      	it	ne
   1e976:	2001      	movne	r0, #1
   1e978:	4770      	bx	lr
   1e97a:	bf00      	nop
   1e97c:	200238c0 	.word	0x200238c0

0001e980 <gps_control_is_enabled>:
   1e980:	4b03      	ldr	r3, [pc, #12]	; (1e990 <gps_control_is_enabled+0x10>)
   1e982:	e8d3 0faf 	lda	r0, [r3]
#if !defined(CONFIG_GPS_SIM)
	return atomic_get(&gps_is_enabled);
#else
	return false;
#endif
}
   1e986:	3000      	adds	r0, #0
   1e988:	bf18      	it	ne
   1e98a:	2001      	movne	r0, #1
   1e98c:	4770      	bx	lr
   1e98e:	bf00      	nop
   1e990:	200238c4 	.word	0x200238c4

0001e994 <gps_control_stop>:
	ui_led_set_pattern(UI_CLOUD_CONNECTED);
#endif
}

void gps_control_stop(u32_t delay_ms)
{
   1e994:	b570      	push	{r4, r5, r6, lr}
#if !defined(CONFIG_GPS_SIM)
	k_delayed_work_cancel(&gps_work.work);
   1e996:	4d07      	ldr	r5, [pc, #28]	; (1e9b4 <gps_control_stop+0x20>)
{
   1e998:	4606      	mov	r6, r0
	k_delayed_work_cancel(&gps_work.work);
   1e99a:	1d2c      	adds	r4, r5, #4
   1e99c:	4620      	mov	r0, r4
   1e99e:	f01c fe51 	bl	3b644 <k_delayed_work_cancel>
	gps_work.type = GPS_WORK_STOP;
   1e9a2:	2301      	movs	r3, #1
   1e9a4:	4632      	mov	r2, r6
   1e9a6:	702b      	strb	r3, [r5, #0]
   1e9a8:	4621      	mov	r1, r4
	k_delayed_work_submit(&gps_work.work, delay_ms);
#endif
}
   1e9aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e9ae:	4802      	ldr	r0, [pc, #8]	; (1e9b8 <gps_control_stop+0x24>)
   1e9b0:	f01c bdbe 	b.w	3b530 <k_delayed_work_submit_to_queue>
   1e9b4:	200238c8 	.word	0x200238c8
   1e9b8:	2002a220 	.word	0x2002a220

0001e9bc <gps_control_disable>:
{
   1e9bc:	b508      	push	{r3, lr}
	atomic_set(&gps_is_enabled, 0);
   1e9be:	2100      	movs	r1, #0
   1e9c0:	4805      	ldr	r0, [pc, #20]	; (1e9d8 <gps_control_disable+0x1c>)
   1e9c2:	f020 f956 	bl	3ec72 <atomic_set>
	gps_control_stop(K_NO_WAIT);
   1e9c6:	2000      	movs	r0, #0
   1e9c8:	f7ff ffe4 	bl	1e994 <gps_control_stop>
}
   1e9cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ui_led_set_pattern(UI_CLOUD_CONNECTED);
   1e9d0:	2008      	movs	r0, #8
   1e9d2:	f7ff bc71 	b.w	1e2b8 <ui_led_set_pattern>
   1e9d6:	bf00      	nop
   1e9d8:	200238c4 	.word	0x200238c4

0001e9dc <gps_control_start>:

void gps_control_start(u32_t delay_ms)
{
   1e9dc:	b570      	push	{r4, r5, r6, lr}
#if !defined(CONFIG_GPS_SIM)
	k_delayed_work_cancel(&gps_work.work);
   1e9de:	4d07      	ldr	r5, [pc, #28]	; (1e9fc <gps_control_start+0x20>)
{
   1e9e0:	4606      	mov	r6, r0
	k_delayed_work_cancel(&gps_work.work);
   1e9e2:	1d2c      	adds	r4, r5, #4
   1e9e4:	4620      	mov	r0, r4
   1e9e6:	f01c fe2d 	bl	3b644 <k_delayed_work_cancel>
	gps_work.type = GPS_WORK_START;
   1e9ea:	2300      	movs	r3, #0
   1e9ec:	4632      	mov	r2, r6
   1e9ee:	702b      	strb	r3, [r5, #0]
   1e9f0:	4621      	mov	r1, r4
	k_delayed_work_submit(&gps_work.work, delay_ms);
#endif
}
   1e9f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e9f6:	4802      	ldr	r0, [pc, #8]	; (1ea00 <gps_control_start+0x24>)
   1e9f8:	f01c bd9a 	b.w	3b530 <k_delayed_work_submit_to_queue>
   1e9fc:	200238c8 	.word	0x200238c8
   1ea00:	2002a220 	.word	0x2002a220

0001ea04 <gps_control_enable>:
{
   1ea04:	b508      	push	{r3, lr}
	atomic_set(&gps_is_enabled, 1);
   1ea06:	2101      	movs	r1, #1
   1ea08:	4804      	ldr	r0, [pc, #16]	; (1ea1c <gps_control_enable+0x18>)
   1ea0a:	f020 f932 	bl	3ec72 <atomic_set>
}
   1ea0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gps_control_start(K_SECONDS(1));
   1ea12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1ea16:	f7ff bfe1 	b.w	1e9dc <gps_control_start>
   1ea1a:	bf00      	nop
   1ea1c:	200238c4 	.word	0x200238c4

0001ea20 <gps_control_init>:
#ifdef CONFIG_GPS_SIM
	struct gps_trigger gps_trig = {
		.type = GPS_TRIG_DATA_READY
	};
#else
	struct gps_trigger gps_trig = {
   1ea20:	2302      	movs	r3, #2
{
   1ea22:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1ea24:	4604      	mov	r4, r0
	struct gps_trigger gps_trig = {
   1ea26:	f8ad 3004 	strh.w	r3, [sp, #4]
   1ea2a:	4812      	ldr	r0, [pc, #72]	; (1ea74 <gps_control_init+0x54>)
   1ea2c:	f01a f9c4 	bl	38db8 <z_impl_device_get_binding>
		.chan = GPS_CHAN_NMEA
	};
#endif /* CONFIG_GPS_SIM */

	gps_dev = device_get_binding(CONFIG_GPS_DEV_NAME);
	if (gps_dev == NULL) {
   1ea30:	4606      	mov	r6, r0
   1ea32:	b940      	cbnz	r0, 1ea46 <gps_control_init+0x26>
		printk("Could not get %s device\n", CONFIG_GPS_DEV_NAME);
   1ea34:	490f      	ldr	r1, [pc, #60]	; (1ea74 <gps_control_init+0x54>)
   1ea36:	4810      	ldr	r0, [pc, #64]	; (1ea78 <gps_control_init+0x58>)
   1ea38:	f020 fd05 	bl	3f446 <printk>
		return -ENODEV;
   1ea3c:	f06f 0412 	mvn.w	r4, #18
	gps_work.dev = gps_dev;
#endif
	printk("GPS initialized\n");

	return 0;
}
   1ea40:	4620      	mov	r0, r4
   1ea42:	b002      	add	sp, #8
   1ea44:	bd70      	pop	{r4, r5, r6, pc}
	return api->trigger_set(dev, trigger, handler);
   1ea46:	6843      	ldr	r3, [r0, #4]
   1ea48:	4622      	mov	r2, r4
   1ea4a:	681b      	ldr	r3, [r3, #0]
   1ea4c:	a901      	add	r1, sp, #4
   1ea4e:	4798      	blx	r3
	if (err) {
   1ea50:	4604      	mov	r4, r0
   1ea52:	b120      	cbz	r0, 1ea5e <gps_control_init+0x3e>
		printk("Could not set trigger, error code: %d\n", err);
   1ea54:	4601      	mov	r1, r0
   1ea56:	4809      	ldr	r0, [pc, #36]	; (1ea7c <gps_control_init+0x5c>)
   1ea58:	f020 fcf5 	bl	3f446 <printk>
		return err;
   1ea5c:	e7f0      	b.n	1ea40 <gps_control_init+0x20>
	k_delayed_work_init(&gps_work.work, gps_work_handler);
   1ea5e:	4d08      	ldr	r5, [pc, #32]	; (1ea80 <gps_control_init+0x60>)
   1ea60:	4908      	ldr	r1, [pc, #32]	; (1ea84 <gps_control_init+0x64>)
   1ea62:	1d28      	adds	r0, r5, #4
   1ea64:	f022 ff13 	bl	4188e <k_delayed_work_init>
	printk("GPS initialized\n");
   1ea68:	4807      	ldr	r0, [pc, #28]	; (1ea88 <gps_control_init+0x68>)
	gps_work.dev = gps_dev;
   1ea6a:	626e      	str	r6, [r5, #36]	; 0x24
	printk("GPS initialized\n");
   1ea6c:	f020 fceb 	bl	3f446 <printk>
	return 0;
   1ea70:	e7e6      	b.n	1ea40 <gps_control_init+0x20>
   1ea72:	bf00      	nop
   1ea74:	00045a63 	.word	0x00045a63
   1ea78:	00045729 	.word	0x00045729
   1ea7c:	00045a6f 	.word	0x00045a6f
   1ea80:	200238c8 	.word	0x200238c8
   1ea84:	0001e841 	.word	0x0001e841
   1ea88:	00045a96 	.word	0x00045a96

0001ea8c <env_sensors_poll>:
	return (initialized ? submit_poll_work(K_NO_WAIT) : -ENXIO);
   1ea8c:	4b05      	ldr	r3, [pc, #20]	; (1eaa4 <env_sensors_poll+0x18>)
   1ea8e:	781b      	ldrb	r3, [r3, #0]
   1ea90:	b123      	cbz	r3, 1ea9c <env_sensors_poll+0x10>
   1ea92:	2200      	movs	r2, #0
   1ea94:	4904      	ldr	r1, [pc, #16]	; (1eaa8 <env_sensors_poll+0x1c>)
   1ea96:	4805      	ldr	r0, [pc, #20]	; (1eaac <env_sensors_poll+0x20>)
   1ea98:	f01c bd4a 	b.w	3b530 <k_delayed_work_submit_to_queue>
}
   1ea9c:	f06f 0005 	mvn.w	r0, #5
   1eaa0:	4770      	bx	lr
   1eaa2:	bf00      	nop
   1eaa4:	2002ad9d 	.word	0x2002ad9d
   1eaa8:	200238f4 	.word	0x200238f4
   1eaac:	2002a220 	.word	0x2002a220

0001eab0 <env_sensors_init_and_start>:

/**@brief Initialize environment sensors. */
int env_sensors_init_and_start(const env_sensors_data_ready_cb cb)
{
   1eab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1eab4:	4680      	mov	r8, r0
   1eab6:	2403      	movs	r4, #3
   1eab8:	4d1b      	ldr	r5, [pc, #108]	; (1eb28 <env_sensors_init_and_start+0x78>)
	for (int i = 0; i < ARRAY_SIZE(env_sensors); i++) {
		env_sensors[i]->dev =
			device_get_binding(env_sensors[i]->dev_name);
		__ASSERT(env_sensors[i]->dev, "Could not get device %s\n",
   1eaba:	4e1c      	ldr	r6, [pc, #112]	; (1eb2c <env_sensors_init_and_start+0x7c>)
   1eabc:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1eb4c <env_sensors_init_and_start+0x9c>
   1eac0:	f8df a08c 	ldr.w	sl, [pc, #140]	; 1eb50 <env_sensors_init_and_start+0xa0>
			device_get_binding(env_sensors[i]->dev_name);
   1eac4:	682f      	ldr	r7, [r5, #0]
   1eac6:	6978      	ldr	r0, [r7, #20]
   1eac8:	f01a f976 	bl	38db8 <z_impl_device_get_binding>
		env_sensors[i]->dev =
   1eacc:	61b8      	str	r0, [r7, #24]
		__ASSERT(env_sensors[i]->dev, "Could not get device %s\n",
   1eace:	f855 7b04 	ldr.w	r7, [r5], #4
   1ead2:	69bb      	ldr	r3, [r7, #24]
   1ead4:	b96b      	cbnz	r3, 1eaf2 <env_sensors_init_and_start+0x42>
   1ead6:	2382      	movs	r3, #130	; 0x82
   1ead8:	4632      	mov	r2, r6
   1eada:	4649      	mov	r1, r9
   1eadc:	4650      	mov	r0, sl
   1eade:	f020 fcb2 	bl	3f446 <printk>
   1eae2:	6979      	ldr	r1, [r7, #20]
   1eae4:	4812      	ldr	r0, [pc, #72]	; (1eb30 <env_sensors_init_and_start+0x80>)
   1eae6:	f020 fcae 	bl	3f446 <printk>
   1eaea:	2182      	movs	r1, #130	; 0x82
   1eaec:	4630      	mov	r0, r6
   1eaee:	f020 fcb7 	bl	3f460 <assert_post_action>
	for (int i = 0; i < ARRAY_SIZE(env_sensors); i++) {
   1eaf2:	3c01      	subs	r4, #1
   1eaf4:	d1e6      	bne.n	1eac4 <env_sensors_init_and_start+0x14>
			env_sensors[i]->dev_name);
	}

	data_ready_cb = cb;
   1eaf6:	4b0f      	ldr	r3, [pc, #60]	; (1eb34 <env_sensors_init_and_start+0x84>)

	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   1eaf8:	490f      	ldr	r1, [pc, #60]	; (1eb38 <env_sensors_init_and_start+0x88>)
   1eafa:	4810      	ldr	r0, [pc, #64]	; (1eb3c <env_sensors_init_and_start+0x8c>)
	data_ready_cb = cb;
   1eafc:	f8c3 8000 	str.w	r8, [r3]
	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   1eb00:	f022 fec5 	bl	4188e <k_delayed_work_init>

	initialized = true;
   1eb04:	2201      	movs	r2, #1
   1eb06:	4b0e      	ldr	r3, [pc, #56]	; (1eb40 <env_sensors_init_and_start+0x90>)
   1eb08:	701a      	strb	r2, [r3, #0]

	return ((data_send_interval_s > 0) ? submit_poll_work(ENV_INIT_DELAY_S) : 0);
   1eb0a:	4b0e      	ldr	r3, [pc, #56]	; (1eb44 <env_sensors_init_and_start+0x94>)
   1eb0c:	681b      	ldr	r3, [r3, #0]
   1eb0e:	2b00      	cmp	r3, #0
   1eb10:	dd07      	ble.n	1eb22 <env_sensors_init_and_start+0x72>
}
   1eb12:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1eb16:	f241 3288 	movw	r2, #5000	; 0x1388
   1eb1a:	4908      	ldr	r1, [pc, #32]	; (1eb3c <env_sensors_init_and_start+0x8c>)
   1eb1c:	480a      	ldr	r0, [pc, #40]	; (1eb48 <env_sensors_init_and_start+0x98>)
   1eb1e:	f01c bd07 	b.w	3b530 <k_delayed_work_submit_to_queue>
   1eb22:	4620      	mov	r0, r4
   1eb24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1eb28:	000432f8 	.word	0x000432f8
   1eb2c:	00045c87 	.word	0x00045c87
   1eb30:	00045cca 	.word	0x00045cca
   1eb34:	200238f0 	.word	0x200238f0
   1eb38:	0001a3b9 	.word	0x0001a3b9
   1eb3c:	200238f4 	.word	0x200238f4
   1eb40:	2002ad9d 	.word	0x2002ad9d
   1eb44:	20031bf8 	.word	0x20031bf8
   1eb48:	2002a220 	.word	0x2002a220
   1eb4c:	00045cb6 	.word	0x00045cb6
   1eb50:	00045316 	.word	0x00045316

0001eb54 <env_sensors_get_temperature>:

int env_sensors_get_temperature(env_sensor_data_t *sensor_data)
{
   1eb54:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   1eb56:	4604      	mov	r4, r0
   1eb58:	2800      	cmp	r0, #0
   1eb5a:	d03f      	beq.n	1ebdc <env_sensors_get_temperature+0x88>
	__asm__ volatile(
   1eb5c:	f04f 0320 	mov.w	r3, #32
   1eb60:	f3ef 8611 	mrs	r6, BASEPRI
   1eb64:	f383 8811 	msr	BASEPRI, r3
   1eb68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1eb6c:	481d      	ldr	r0, [pc, #116]	; (1ebe4 <env_sensors_get_temperature+0x90>)
   1eb6e:	f01c fa89 	bl	3b084 <z_spin_lock_valid>
   1eb72:	b960      	cbnz	r0, 1eb8e <env_sensors_get_temperature+0x3a>
   1eb74:	491c      	ldr	r1, [pc, #112]	; (1ebe8 <env_sensors_get_temperature+0x94>)
   1eb76:	234f      	movs	r3, #79	; 0x4f
   1eb78:	4a1c      	ldr	r2, [pc, #112]	; (1ebec <env_sensors_get_temperature+0x98>)
   1eb7a:	481d      	ldr	r0, [pc, #116]	; (1ebf0 <env_sensors_get_temperature+0x9c>)
   1eb7c:	f020 fc63 	bl	3f446 <printk>
   1eb80:	481c      	ldr	r0, [pc, #112]	; (1ebf4 <env_sensors_get_temperature+0xa0>)
   1eb82:	f020 fc60 	bl	3f446 <printk>
   1eb86:	214f      	movs	r1, #79	; 0x4f
   1eb88:	4818      	ldr	r0, [pc, #96]	; (1ebec <env_sensors_get_temperature+0x98>)
   1eb8a:	f020 fc69 	bl	3f460 <assert_post_action>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1eb8e:	4d1a      	ldr	r5, [pc, #104]	; (1ebf8 <env_sensors_get_temperature+0xa4>)
	z_spin_lock_set_owner(l);
   1eb90:	4814      	ldr	r0, [pc, #80]	; (1ebe4 <env_sensors_get_temperature+0x90>)
   1eb92:	f01c fa95 	bl	3b0c0 <z_spin_lock_set_owner>
   1eb96:	4623      	mov	r3, r4
   1eb98:	f105 0410 	add.w	r4, r5, #16
   1eb9c:	462a      	mov	r2, r5
   1eb9e:	ca03      	ldmia	r2!, {r0, r1}
   1eba0:	42a2      	cmp	r2, r4
   1eba2:	6018      	str	r0, [r3, #0]
   1eba4:	6059      	str	r1, [r3, #4]
   1eba6:	4615      	mov	r5, r2
   1eba8:	f103 0308 	add.w	r3, r3, #8
   1ebac:	d1f6      	bne.n	1eb9c <env_sensors_get_temperature+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1ebae:	480d      	ldr	r0, [pc, #52]	; (1ebe4 <env_sensors_get_temperature+0x90>)
   1ebb0:	f01c fa76 	bl	3b0a0 <z_spin_unlock_valid>
   1ebb4:	b960      	cbnz	r0, 1ebd0 <env_sensors_get_temperature+0x7c>
   1ebb6:	4911      	ldr	r1, [pc, #68]	; (1ebfc <env_sensors_get_temperature+0xa8>)
   1ebb8:	2362      	movs	r3, #98	; 0x62
   1ebba:	4a0c      	ldr	r2, [pc, #48]	; (1ebec <env_sensors_get_temperature+0x98>)
   1ebbc:	480c      	ldr	r0, [pc, #48]	; (1ebf0 <env_sensors_get_temperature+0x9c>)
   1ebbe:	f020 fc42 	bl	3f446 <printk>
   1ebc2:	480f      	ldr	r0, [pc, #60]	; (1ec00 <env_sensors_get_temperature+0xac>)
   1ebc4:	f020 fc3f 	bl	3f446 <printk>
   1ebc8:	2162      	movs	r1, #98	; 0x62
   1ebca:	4808      	ldr	r0, [pc, #32]	; (1ebec <env_sensors_get_temperature+0x98>)
   1ebcc:	f020 fc48 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   1ebd0:	f386 8811 	msr	BASEPRI, r6
   1ebd4:	f3bf 8f6f 	isb	sy
	}
	k_spinlock_key_t key = k_spin_lock(&temp_sensor.lock);

	memcpy(sensor_data, &(temp_sensor.sensor), sizeof(temp_sensor.sensor));
	k_spin_unlock(&temp_sensor.lock, key);
	return 0;
   1ebd8:	2000      	movs	r0, #0
}
   1ebda:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   1ebdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ebe0:	e7fb      	b.n	1ebda <env_sensors_get_temperature+0x86>
   1ebe2:	bf00      	nop
   1ebe4:	20031874 	.word	0x20031874
   1ebe8:	00045d2d 	.word	0x00045d2d
   1ebec:	00045d0e 	.word	0x00045d0e
   1ebf0:	00045316 	.word	0x00045316
   1ebf4:	00045d42 	.word	0x00045d42
   1ebf8:	20031858 	.word	0x20031858
   1ebfc:	00045d57 	.word	0x00045d57
   1ec00:	00045d6e 	.word	0x00045d6e

0001ec04 <env_sensors_get_humidity>:

int env_sensors_get_humidity(env_sensor_data_t *sensor_data)
{
   1ec04:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   1ec06:	4604      	mov	r4, r0
   1ec08:	2800      	cmp	r0, #0
   1ec0a:	d03f      	beq.n	1ec8c <env_sensors_get_humidity+0x88>
	__asm__ volatile(
   1ec0c:	f04f 0320 	mov.w	r3, #32
   1ec10:	f3ef 8611 	mrs	r6, BASEPRI
   1ec14:	f383 8811 	msr	BASEPRI, r3
   1ec18:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1ec1c:	481d      	ldr	r0, [pc, #116]	; (1ec94 <env_sensors_get_humidity+0x90>)
   1ec1e:	f01c fa31 	bl	3b084 <z_spin_lock_valid>
   1ec22:	b960      	cbnz	r0, 1ec3e <env_sensors_get_humidity+0x3a>
   1ec24:	491c      	ldr	r1, [pc, #112]	; (1ec98 <env_sensors_get_humidity+0x94>)
   1ec26:	234f      	movs	r3, #79	; 0x4f
   1ec28:	4a1c      	ldr	r2, [pc, #112]	; (1ec9c <env_sensors_get_humidity+0x98>)
   1ec2a:	481d      	ldr	r0, [pc, #116]	; (1eca0 <env_sensors_get_humidity+0x9c>)
   1ec2c:	f020 fc0b 	bl	3f446 <printk>
   1ec30:	481c      	ldr	r0, [pc, #112]	; (1eca4 <env_sensors_get_humidity+0xa0>)
   1ec32:	f020 fc08 	bl	3f446 <printk>
   1ec36:	214f      	movs	r1, #79	; 0x4f
   1ec38:	4818      	ldr	r0, [pc, #96]	; (1ec9c <env_sensors_get_humidity+0x98>)
   1ec3a:	f020 fc11 	bl	3f460 <assert_post_action>
   1ec3e:	4d1a      	ldr	r5, [pc, #104]	; (1eca8 <env_sensors_get_humidity+0xa4>)
	z_spin_lock_set_owner(l);
   1ec40:	4814      	ldr	r0, [pc, #80]	; (1ec94 <env_sensors_get_humidity+0x90>)
   1ec42:	f01c fa3d 	bl	3b0c0 <z_spin_lock_set_owner>
   1ec46:	4623      	mov	r3, r4
   1ec48:	f105 0410 	add.w	r4, r5, #16
   1ec4c:	462a      	mov	r2, r5
   1ec4e:	ca03      	ldmia	r2!, {r0, r1}
   1ec50:	42a2      	cmp	r2, r4
   1ec52:	6018      	str	r0, [r3, #0]
   1ec54:	6059      	str	r1, [r3, #4]
   1ec56:	4615      	mov	r5, r2
   1ec58:	f103 0308 	add.w	r3, r3, #8
   1ec5c:	d1f6      	bne.n	1ec4c <env_sensors_get_humidity+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1ec5e:	480d      	ldr	r0, [pc, #52]	; (1ec94 <env_sensors_get_humidity+0x90>)
   1ec60:	f01c fa1e 	bl	3b0a0 <z_spin_unlock_valid>
   1ec64:	b960      	cbnz	r0, 1ec80 <env_sensors_get_humidity+0x7c>
   1ec66:	4911      	ldr	r1, [pc, #68]	; (1ecac <env_sensors_get_humidity+0xa8>)
   1ec68:	2362      	movs	r3, #98	; 0x62
   1ec6a:	4a0c      	ldr	r2, [pc, #48]	; (1ec9c <env_sensors_get_humidity+0x98>)
   1ec6c:	480c      	ldr	r0, [pc, #48]	; (1eca0 <env_sensors_get_humidity+0x9c>)
   1ec6e:	f020 fbea 	bl	3f446 <printk>
   1ec72:	480f      	ldr	r0, [pc, #60]	; (1ecb0 <env_sensors_get_humidity+0xac>)
   1ec74:	f020 fbe7 	bl	3f446 <printk>
   1ec78:	2162      	movs	r1, #98	; 0x62
   1ec7a:	4808      	ldr	r0, [pc, #32]	; (1ec9c <env_sensors_get_humidity+0x98>)
   1ec7c:	f020 fbf0 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   1ec80:	f386 8811 	msr	BASEPRI, r6
   1ec84:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&humid_sensor.lock);

	memcpy(sensor_data, &(humid_sensor.sensor),
		sizeof(humid_sensor.sensor));
	k_spin_unlock(&humid_sensor.lock, key);
	return 0;
   1ec88:	2000      	movs	r0, #0
}
   1ec8a:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   1ec8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ec90:	e7fb      	b.n	1ec8a <env_sensors_get_humidity+0x86>
   1ec92:	bf00      	nop
   1ec94:	20031834 	.word	0x20031834
   1ec98:	00045d2d 	.word	0x00045d2d
   1ec9c:	00045d0e 	.word	0x00045d0e
   1eca0:	00045316 	.word	0x00045316
   1eca4:	00045d42 	.word	0x00045d42
   1eca8:	20031818 	.word	0x20031818
   1ecac:	00045d57 	.word	0x00045d57
   1ecb0:	00045d6e 	.word	0x00045d6e

0001ecb4 <env_sensors_get_pressure>:

int env_sensors_get_pressure(env_sensor_data_t *sensor_data)
{
   1ecb4:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   1ecb6:	4604      	mov	r4, r0
   1ecb8:	2800      	cmp	r0, #0
   1ecba:	d03f      	beq.n	1ed3c <env_sensors_get_pressure+0x88>
	__asm__ volatile(
   1ecbc:	f04f 0320 	mov.w	r3, #32
   1ecc0:	f3ef 8611 	mrs	r6, BASEPRI
   1ecc4:	f383 8811 	msr	BASEPRI, r3
   1ecc8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1eccc:	481d      	ldr	r0, [pc, #116]	; (1ed44 <env_sensors_get_pressure+0x90>)
   1ecce:	f01c f9d9 	bl	3b084 <z_spin_lock_valid>
   1ecd2:	b960      	cbnz	r0, 1ecee <env_sensors_get_pressure+0x3a>
   1ecd4:	491c      	ldr	r1, [pc, #112]	; (1ed48 <env_sensors_get_pressure+0x94>)
   1ecd6:	234f      	movs	r3, #79	; 0x4f
   1ecd8:	4a1c      	ldr	r2, [pc, #112]	; (1ed4c <env_sensors_get_pressure+0x98>)
   1ecda:	481d      	ldr	r0, [pc, #116]	; (1ed50 <env_sensors_get_pressure+0x9c>)
   1ecdc:	f020 fbb3 	bl	3f446 <printk>
   1ece0:	481c      	ldr	r0, [pc, #112]	; (1ed54 <env_sensors_get_pressure+0xa0>)
   1ece2:	f020 fbb0 	bl	3f446 <printk>
   1ece6:	214f      	movs	r1, #79	; 0x4f
   1ece8:	4818      	ldr	r0, [pc, #96]	; (1ed4c <env_sensors_get_pressure+0x98>)
   1ecea:	f020 fbb9 	bl	3f460 <assert_post_action>
   1ecee:	4d1a      	ldr	r5, [pc, #104]	; (1ed58 <env_sensors_get_pressure+0xa4>)
	z_spin_lock_set_owner(l);
   1ecf0:	4814      	ldr	r0, [pc, #80]	; (1ed44 <env_sensors_get_pressure+0x90>)
   1ecf2:	f01c f9e5 	bl	3b0c0 <z_spin_lock_set_owner>
   1ecf6:	4623      	mov	r3, r4
   1ecf8:	f105 0410 	add.w	r4, r5, #16
   1ecfc:	462a      	mov	r2, r5
   1ecfe:	ca03      	ldmia	r2!, {r0, r1}
   1ed00:	42a2      	cmp	r2, r4
   1ed02:	6018      	str	r0, [r3, #0]
   1ed04:	6059      	str	r1, [r3, #4]
   1ed06:	4615      	mov	r5, r2
   1ed08:	f103 0308 	add.w	r3, r3, #8
   1ed0c:	d1f6      	bne.n	1ecfc <env_sensors_get_pressure+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1ed0e:	480d      	ldr	r0, [pc, #52]	; (1ed44 <env_sensors_get_pressure+0x90>)
   1ed10:	f01c f9c6 	bl	3b0a0 <z_spin_unlock_valid>
   1ed14:	b960      	cbnz	r0, 1ed30 <env_sensors_get_pressure+0x7c>
   1ed16:	4911      	ldr	r1, [pc, #68]	; (1ed5c <env_sensors_get_pressure+0xa8>)
   1ed18:	2362      	movs	r3, #98	; 0x62
   1ed1a:	4a0c      	ldr	r2, [pc, #48]	; (1ed4c <env_sensors_get_pressure+0x98>)
   1ed1c:	480c      	ldr	r0, [pc, #48]	; (1ed50 <env_sensors_get_pressure+0x9c>)
   1ed1e:	f020 fb92 	bl	3f446 <printk>
   1ed22:	480f      	ldr	r0, [pc, #60]	; (1ed60 <env_sensors_get_pressure+0xac>)
   1ed24:	f020 fb8f 	bl	3f446 <printk>
   1ed28:	2162      	movs	r1, #98	; 0x62
   1ed2a:	4808      	ldr	r0, [pc, #32]	; (1ed4c <env_sensors_get_pressure+0x98>)
   1ed2c:	f020 fb98 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   1ed30:	f386 8811 	msr	BASEPRI, r6
   1ed34:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&pressure_sensor.lock);

	memcpy(sensor_data, &(pressure_sensor.sensor),
		sizeof(pressure_sensor.sensor));
	k_spin_unlock(&pressure_sensor.lock, key);
	return 0;
   1ed38:	2000      	movs	r0, #0
}
   1ed3a:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   1ed3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ed40:	e7fb      	b.n	1ed3a <env_sensors_get_pressure+0x86>
   1ed42:	bf00      	nop
   1ed44:	20031854 	.word	0x20031854
   1ed48:	00045d2d 	.word	0x00045d2d
   1ed4c:	00045d0e 	.word	0x00045d0e
   1ed50:	00045316 	.word	0x00045316
   1ed54:	00045d42 	.word	0x00045d42
   1ed58:	20031838 	.word	0x20031838
   1ed5c:	00045d57 	.word	0x00045d57
   1ed60:	00045d6e 	.word	0x00045d6e

0001ed64 <env_sensors_set_send_interval>:
{
	return -1;
}

void env_sensors_set_send_interval(const s32_t interval_s)
{
   1ed64:	b508      	push	{r3, lr}
	if (interval_s == data_send_interval_s) {
   1ed66:	4b0f      	ldr	r3, [pc, #60]	; (1eda4 <env_sensors_set_send_interval+0x40>)
   1ed68:	681a      	ldr	r2, [r3, #0]
   1ed6a:	4282      	cmp	r2, r0
   1ed6c:	d019      	beq.n	1eda2 <env_sensors_set_send_interval+0x3e>
		return;
	}

	data_send_interval_s = interval_s;
   1ed6e:	6018      	str	r0, [r3, #0]

	if ( !initialized ) {
   1ed70:	4b0d      	ldr	r3, [pc, #52]	; (1eda8 <env_sensors_set_send_interval+0x44>)
   1ed72:	781b      	ldrb	r3, [r3, #0]
   1ed74:	b1ab      	cbz	r3, 1eda2 <env_sensors_set_send_interval+0x3e>
		return;
	}

	if (data_send_interval_s) {
   1ed76:	b118      	cbz	r0, 1ed80 <env_sensors_set_send_interval+0x1c>
		env_sensors_poll();
	}
	else if (k_delayed_work_remaining_get(&env_sensors_poller) > 0) {
		k_delayed_work_cancel(&env_sensors_poller);
	}
}
   1ed78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		env_sensors_poll();
   1ed7c:	f7ff be86 	b.w	1ea8c <env_sensors_poll>
 * @return Remaining time (in milliseconds).
 * @req K-DWORK-001
 */
static inline s32_t k_delayed_work_remaining_get(struct k_delayed_work *work)
{
	return k_ticks_to_ms_floor64(z_timeout_remaining(&work->timeout));
   1ed80:	480a      	ldr	r0, [pc, #40]	; (1edac <env_sensors_set_send_interval+0x48>)
   1ed82:	f01c fdd7 	bl	3b934 <z_timeout_remaining>
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   1ed86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1ed8a:	fb80 0103 	smull	r0, r1, r0, r3
   1ed8e:	0bc3      	lsrs	r3, r0, #15
   1ed90:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	else if (k_delayed_work_remaining_get(&env_sensors_poller) > 0) {
   1ed94:	2b00      	cmp	r3, #0
   1ed96:	dd04      	ble.n	1eda2 <env_sensors_set_send_interval+0x3e>
}
   1ed98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_cancel(&env_sensors_poller);
   1ed9c:	4804      	ldr	r0, [pc, #16]	; (1edb0 <env_sensors_set_send_interval+0x4c>)
   1ed9e:	f01c bc51 	b.w	3b644 <k_delayed_work_cancel>
}
   1eda2:	bd08      	pop	{r3, pc}
   1eda4:	20031bf8 	.word	0x20031bf8
   1eda8:	2002ad9d 	.word	0x2002ad9d
   1edac:	20023900 	.word	0x20023900
   1edb0:	200238f4 	.word	0x200238f4

0001edb4 <env_sensors_set_backoff_enable>:
	return data_send_interval_s;
}

void env_sensors_set_backoff_enable(const bool enable)
{
	backoff_enabled = enable;
   1edb4:	4b01      	ldr	r3, [pc, #4]	; (1edbc <env_sensors_set_backoff_enable+0x8>)
   1edb6:	7018      	strb	r0, [r3, #0]
}
   1edb8:	4770      	bx	lr
   1edba:	bf00      	nop
   1edbc:	2002ad9c 	.word	0x2002ad9c

0001edc0 <z_sys_mem_pool_block_free>:
	return 0;
}

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   1edc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1edc4:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1edc6:	7a83      	ldrb	r3, [r0, #10]
{
   1edc8:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1edca:	009b      	lsls	r3, r3, #2
   1edcc:	3307      	adds	r3, #7
   1edce:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1edd2:	ebad 0d03 	sub.w	sp, sp, r3
   1edd6:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   1edd8:	6843      	ldr	r3, [r0, #4]
{
   1edda:	4606      	mov	r6, r0
	lsizes[0] = p->max_sz;
   1eddc:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
   1edde:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
   1ede0:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
   1ede4:	4281      	cmp	r1, r0
   1ede6:	d222      	bcs.n	1ee2e <z_sys_mem_pool_block_free+0x6e>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1ede8:	7c30      	ldrb	r0, [r6, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   1edea:	4688      	mov	r8, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1edec:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
   1edf0:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1edf2:	d001      	beq.n	1edf8 <z_sys_mem_pool_block_free+0x38>
   1edf4:	f01f ff5f 	bl	3ecb6 <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   1edf8:	4604      	mov	r4, r0
	while (level >= 0) {
   1edfa:	f1b8 0f00 	cmp.w	r8, #0
   1edfe:	da1e      	bge.n	1ee3e <z_sys_mem_pool_block_free+0x7e>
	__ASSERT(0, "out of levels");
   1ee00:	23bc      	movs	r3, #188	; 0xbc
   1ee02:	4a50      	ldr	r2, [pc, #320]	; (1ef44 <z_sys_mem_pool_block_free+0x184>)
   1ee04:	4950      	ldr	r1, [pc, #320]	; (1ef48 <z_sys_mem_pool_block_free+0x188>)
   1ee06:	4851      	ldr	r0, [pc, #324]	; (1ef4c <z_sys_mem_pool_block_free+0x18c>)
   1ee08:	f020 fb1d 	bl	3f446 <printk>
   1ee0c:	4850      	ldr	r0, [pc, #320]	; (1ef50 <z_sys_mem_pool_block_free+0x190>)
   1ee0e:	f020 fb1a 	bl	3f446 <printk>
   1ee12:	21bc      	movs	r1, #188	; 0xbc
   1ee14:	484b      	ldr	r0, [pc, #300]	; (1ef44 <z_sys_mem_pool_block_free+0x184>)
   1ee16:	f020 fb23 	bl	3f460 <assert_post_action>
	return -1;
   1ee1a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
   1ee1e:	4621      	mov	r1, r4
   1ee20:	7c30      	ldrb	r0, [r6, #16]
   1ee22:	f01f ff51 	bl	3ecc8 <pool_irq_unlock.isra.4>
}
   1ee26:	3714      	adds	r7, #20
   1ee28:	46bd      	mov	sp, r7
   1ee2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1ee2e:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
   1ee30:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1ee32:	089b      	lsrs	r3, r3, #2
   1ee34:	f023 0303 	bic.w	r3, r3, #3
   1ee38:	f844 3f04 	str.w	r3, [r4, #4]!
   1ee3c:	e7d2      	b.n	1ede4 <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   1ee3e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   1ee42:	462a      	mov	r2, r5
	return (u8_t *)p->buf + lsz * block;
   1ee44:	fb03 fa05 	mul.w	sl, r3, r5
		int i, lsz = lsizes[level];
   1ee48:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   1ee4a:	6833      	ldr	r3, [r6, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1ee4c:	4641      	mov	r1, r8
	return (u8_t *)p->buf + lsz * block;
   1ee4e:	603b      	str	r3, [r7, #0]
   1ee50:	eb03 090a 	add.w	r9, r3, sl
	int bit = get_bit_ptr(p, level, bn, &word);
   1ee54:	4630      	mov	r0, r6
   1ee56:	f107 030c 	add.w	r3, r7, #12
   1ee5a:	f01f ff15 	bl	3ec88 <get_bit_ptr>
	return (*word >> bit) & 1;
   1ee5e:	68fb      	ldr	r3, [r7, #12]
   1ee60:	681b      	ldr	r3, [r3, #0]
   1ee62:	fa23 f000 	lsr.w	r0, r3, r0
		__ASSERT(alloc_bit_is_set(p, level, bn),
   1ee66:	07c3      	lsls	r3, r0, #31
   1ee68:	d40d      	bmi.n	1ee86 <z_sys_mem_pool_block_free+0xc6>
   1ee6a:	23a3      	movs	r3, #163	; 0xa3
   1ee6c:	4a35      	ldr	r2, [pc, #212]	; (1ef44 <z_sys_mem_pool_block_free+0x184>)
   1ee6e:	4939      	ldr	r1, [pc, #228]	; (1ef54 <z_sys_mem_pool_block_free+0x194>)
   1ee70:	4836      	ldr	r0, [pc, #216]	; (1ef4c <z_sys_mem_pool_block_free+0x18c>)
   1ee72:	f020 fae8 	bl	3f446 <printk>
   1ee76:	4649      	mov	r1, r9
   1ee78:	4837      	ldr	r0, [pc, #220]	; (1ef58 <z_sys_mem_pool_block_free+0x198>)
   1ee7a:	f020 fae4 	bl	3f446 <printk>
   1ee7e:	21a3      	movs	r1, #163	; 0xa3
   1ee80:	4830      	ldr	r0, [pc, #192]	; (1ef44 <z_sys_mem_pool_block_free+0x184>)
   1ee82:	f020 faed 	bl	3f460 <assert_post_action>
	int bit = get_bit_ptr(p, level, bn, &word);
   1ee86:	f107 030c 	add.w	r3, r7, #12
   1ee8a:	462a      	mov	r2, r5
   1ee8c:	4641      	mov	r1, r8
   1ee8e:	4630      	mov	r0, r6
   1ee90:	f01f fefa 	bl	3ec88 <get_bit_ptr>
	*word &= ~(1<<bit);
   1ee94:	2301      	movs	r3, #1
   1ee96:	68fa      	ldr	r2, [r7, #12]
   1ee98:	fa03 f000 	lsl.w	r0, r3, r0
   1ee9c:	6813      	ldr	r3, [r2, #0]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   1ee9e:	6839      	ldr	r1, [r7, #0]
   1eea0:	ea23 0300 	bic.w	r3, r3, r0
   1eea4:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   1eea6:	230c      	movs	r3, #12
   1eea8:	68f2      	ldr	r2, [r6, #12]
   1eeaa:	fb03 2308 	mla	r3, r3, r8, r2
   1eeae:	1d1a      	adds	r2, r3, #4
   1eeb0:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
   1eeb4:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
   1eeb6:	4621      	mov	r1, r4
   1eeb8:	f8c9 2004 	str.w	r2, [r9, #4]

	list->tail->next = node;
   1eebc:	689a      	ldr	r2, [r3, #8]
   1eebe:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
   1eec2:	f8c3 9008 	str.w	r9, [r3, #8]
   1eec6:	7c30      	ldrb	r0, [r6, #16]
   1eec8:	f01f fefe 	bl	3ecc8 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1eecc:	7c30      	ldrb	r0, [r6, #16]
   1eece:	f010 0001 	ands.w	r0, r0, #1
   1eed2:	d001      	beq.n	1eed8 <z_sys_mem_pool_block_free+0x118>
   1eed4:	f01f feef 	bl	3ecb6 <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   1eed8:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1eeda:	f1b8 0f00 	cmp.w	r8, #0
   1eede:	d09e      	beq.n	1ee1e <z_sys_mem_pool_block_free+0x5e>
	int bit = get_bit_ptr(p, level, bn, &word);
   1eee0:	f107 030c 	add.w	r3, r7, #12
   1eee4:	462a      	mov	r2, r5
   1eee6:	4641      	mov	r1, r8
   1eee8:	4630      	mov	r0, r6
   1eeea:	f01f fecd 	bl	3ec88 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   1eeee:	68fb      	ldr	r3, [r7, #12]
   1eef0:	2800      	cmp	r0, #0
   1eef2:	bfb8      	it	lt
   1eef4:	3003      	addlt	r0, #3
   1eef6:	681b      	ldr	r3, [r3, #0]
   1eef8:	f020 0003 	bic.w	r0, r0, #3
   1eefc:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1ef00:	f010 000f 	ands.w	r0, r0, #15
   1ef04:	d18b      	bne.n	1ee1e <z_sys_mem_pool_block_free+0x5e>
	node->next = NULL;
   1ef06:	4684      	mov	ip, r0
			int b = (bn & ~3) + i;
   1ef08:	f025 0a03 	bic.w	sl, r5, #3
	return (u8_t *)p->buf + lsz * block;
   1ef0c:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
   1ef0e:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
   1ef12:	4353      	muls	r3, r2
   1ef14:	6832      	ldr	r2, [r6, #0]
		for (i = 0; i < 4; i++) {
   1ef16:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
   1ef18:	18d1      	adds	r1, r2, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1ef1a:	f8d1 9004 	ldr.w	r9, [r1, #4]
   1ef1e:	f852 e003 	ldr.w	lr, [r2, r3]
		for (i = 0; i < 4; i++) {
   1ef22:	2804      	cmp	r0, #4
   1ef24:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
   1ef28:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
   1ef2c:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
   1ef30:	f8c1 c004 	str.w	ip, [r1, #4]
   1ef34:	d1ea      	bne.n	1ef0c <z_sys_mem_pool_block_free+0x14c>
		bn = bn / 4;
   1ef36:	2d00      	cmp	r5, #0
   1ef38:	bfb8      	it	lt
   1ef3a:	3503      	addlt	r5, #3
		level = level - 1;
   1ef3c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		bn = bn / 4;
   1ef40:	10ad      	asrs	r5, r5, #2
   1ef42:	e75a      	b.n	1edfa <z_sys_mem_pool_block_free+0x3a>
   1ef44:	00045d81 	.word	0x00045d81
   1ef48:	0004a2c3 	.word	0x0004a2c3
   1ef4c:	00045316 	.word	0x00045316
   1ef50:	00045de2 	.word	0x00045de2
   1ef54:	00045d9e 	.word	0x00045d9e
   1ef58:	00045dbd 	.word	0x00045dbd

0001ef5c <lexer_string>:

	return chr;
}

static void *lexer_string(struct lexer *lexer)
{
   1ef5c:	4601      	mov	r1, r0
	lexer->start = lexer->pos;
   1ef5e:	6883      	ldr	r3, [r0, #8]
{
   1ef60:	b510      	push	{r4, lr}
			case 'n':
			case 'r':
			case 't':
				continue;
			case 'u':
				if (!isxdigit(next(lexer))) {
   1ef62:	4c2f      	ldr	r4, [pc, #188]	; (1f020 <lexer_string+0xc4>)
	lexer->start = lexer->pos;
   1ef64:	6043      	str	r3, [r0, #4]
		int chr = next(lexer);
   1ef66:	4608      	mov	r0, r1
   1ef68:	f01f ffe6 	bl	3ef38 <next>
		if (chr == '\0') {
   1ef6c:	b938      	cbnz	r0, 1ef7e <lexer_string+0x22>
	lexer->token.type = token;
   1ef6e:	2321      	movs	r3, #33	; 0x21
   1ef70:	740b      	strb	r3, [r1, #16]
	lexer->token.start = lexer->start;
   1ef72:	684b      	ldr	r3, [r1, #4]
   1ef74:	614b      	str	r3, [r1, #20]
	lexer->token.end = lexer->pos;
   1ef76:	688b      	ldr	r3, [r1, #8]
   1ef78:	618b      	str	r3, [r1, #24]
	lexer->start = lexer->pos;
   1ef7a:	604b      	str	r3, [r1, #4]
	}

error:
	emit(lexer, JSON_TOK_ERROR);
	return NULL;
}
   1ef7c:	bd10      	pop	{r4, pc}
		if (chr == '\\') {
   1ef7e:	285c      	cmp	r0, #92	; 0x5c
   1ef80:	d13d      	bne.n	1effe <lexer_string+0xa2>
			switch (next(lexer)) {
   1ef82:	4608      	mov	r0, r1
   1ef84:	f01f ffd8 	bl	3ef38 <next>
   1ef88:	2866      	cmp	r0, #102	; 0x66
   1ef8a:	d0ec      	beq.n	1ef66 <lexer_string+0xa>
   1ef8c:	dc11      	bgt.n	1efb2 <lexer_string+0x56>
   1ef8e:	282f      	cmp	r0, #47	; 0x2f
   1ef90:	d0e9      	beq.n	1ef66 <lexer_string+0xa>
   1ef92:	dc0a      	bgt.n	1efaa <lexer_string+0x4e>
   1ef94:	2822      	cmp	r0, #34	; 0x22
   1ef96:	d0e6      	beq.n	1ef66 <lexer_string+0xa>
	lexer->token.type = token;
   1ef98:	2321      	movs	r3, #33	; 0x21
   1ef9a:	740b      	strb	r3, [r1, #16]
	lexer->token.start = lexer->start;
   1ef9c:	684b      	ldr	r3, [r1, #4]
	return NULL;
   1ef9e:	2000      	movs	r0, #0
	lexer->token.start = lexer->start;
   1efa0:	614b      	str	r3, [r1, #20]
	lexer->token.end = lexer->pos;
   1efa2:	688b      	ldr	r3, [r1, #8]
   1efa4:	618b      	str	r3, [r1, #24]
	lexer->start = lexer->pos;
   1efa6:	604b      	str	r3, [r1, #4]
	return NULL;
   1efa8:	e7e8      	b.n	1ef7c <lexer_string+0x20>
			switch (next(lexer)) {
   1efaa:	285c      	cmp	r0, #92	; 0x5c
   1efac:	d0db      	beq.n	1ef66 <lexer_string+0xa>
   1efae:	2862      	cmp	r0, #98	; 0x62
   1efb0:	e7f1      	b.n	1ef96 <lexer_string+0x3a>
   1efb2:	2872      	cmp	r0, #114	; 0x72
   1efb4:	d0d7      	beq.n	1ef66 <lexer_string+0xa>
   1efb6:	dc01      	bgt.n	1efbc <lexer_string+0x60>
   1efb8:	286e      	cmp	r0, #110	; 0x6e
   1efba:	e7ec      	b.n	1ef96 <lexer_string+0x3a>
   1efbc:	2874      	cmp	r0, #116	; 0x74
   1efbe:	d0d2      	beq.n	1ef66 <lexer_string+0xa>
   1efc0:	2875      	cmp	r0, #117	; 0x75
   1efc2:	d1e9      	bne.n	1ef98 <lexer_string+0x3c>
				if (!isxdigit(next(lexer))) {
   1efc4:	4608      	mov	r0, r1
   1efc6:	f01f ffb7 	bl	3ef38 <next>
   1efca:	5c23      	ldrb	r3, [r4, r0]
   1efcc:	f013 0f44 	tst.w	r3, #68	; 0x44
   1efd0:	d0e2      	beq.n	1ef98 <lexer_string+0x3c>
				if (!isxdigit(next(lexer))) {
   1efd2:	4608      	mov	r0, r1
   1efd4:	f01f ffb0 	bl	3ef38 <next>
   1efd8:	5c23      	ldrb	r3, [r4, r0]
   1efda:	f013 0f44 	tst.w	r3, #68	; 0x44
   1efde:	d0db      	beq.n	1ef98 <lexer_string+0x3c>
				if (!isxdigit(next(lexer))) {
   1efe0:	4608      	mov	r0, r1
   1efe2:	f01f ffa9 	bl	3ef38 <next>
   1efe6:	5c23      	ldrb	r3, [r4, r0]
   1efe8:	f013 0f44 	tst.w	r3, #68	; 0x44
   1efec:	d0d4      	beq.n	1ef98 <lexer_string+0x3c>
				if (!isxdigit(next(lexer))) {
   1efee:	4608      	mov	r0, r1
   1eff0:	f01f ffa2 	bl	3ef38 <next>
   1eff4:	5c23      	ldrb	r3, [r4, r0]
   1eff6:	f013 0f44 	tst.w	r3, #68	; 0x44
   1effa:	d1b4      	bne.n	1ef66 <lexer_string+0xa>
   1effc:	e7cc      	b.n	1ef98 <lexer_string+0x3c>
		if (chr == '"') {
   1effe:	2822      	cmp	r0, #34	; 0x22
   1f000:	d1b1      	bne.n	1ef66 <lexer_string+0xa>
	lexer->pos--;
   1f002:	688b      	ldr	r3, [r1, #8]
	lexer->token.start = lexer->start;
   1f004:	684a      	ldr	r2, [r1, #4]
	lexer->pos--;
   1f006:	3b01      	subs	r3, #1
   1f008:	608b      	str	r3, [r1, #8]
	lexer->token.type = token;
   1f00a:	7408      	strb	r0, [r1, #16]
	lexer->token.end = lexer->pos;
   1f00c:	e9c1 2305 	strd	r2, r3, [r1, #20]
	lexer->start = lexer->pos;
   1f010:	604b      	str	r3, [r1, #4]
			next(lexer);
   1f012:	4608      	mov	r0, r1
   1f014:	f01f ff90 	bl	3ef38 <next>
	lexer->start = lexer->pos;
   1f018:	688b      	ldr	r3, [r1, #8]
			return lexer_json;
   1f01a:	4802      	ldr	r0, [pc, #8]	; (1f024 <lexer_string+0xc8>)
	lexer->start = lexer->pos;
   1f01c:	604b      	str	r3, [r1, #4]
			return lexer_json;
   1f01e:	e7ad      	b.n	1ef7c <lexer_string+0x20>
   1f020:	0004a77d 	.word	0x0004a77d
   1f024:	0001f0e9 	.word	0x0001f0e9

0001f028 <lexer_boolean>:

	return 0;
}

static void *lexer_boolean(struct lexer *lexer)
{
   1f028:	b538      	push	{r3, r4, r5, lr}
	lexer->pos--;
   1f02a:	6883      	ldr	r3, [r0, #8]
{
   1f02c:	4604      	mov	r4, r0
	lexer->pos--;
   1f02e:	3b01      	subs	r3, #1
   1f030:	6083      	str	r3, [r0, #8]
	backup(lexer);

	switch (next(lexer)) {
   1f032:	f01f ff81 	bl	3ef38 <next>
   1f036:	2866      	cmp	r0, #102	; 0x66
   1f038:	4605      	mov	r5, r0
   1f03a:	d00e      	beq.n	1f05a <lexer_boolean+0x32>
   1f03c:	2874      	cmp	r0, #116	; 0x74
   1f03e:	d10e      	bne.n	1f05e <lexer_boolean+0x36>
	case 't':
		if (!accept_run(lexer, "rue")) {
   1f040:	490b      	ldr	r1, [pc, #44]	; (1f070 <lexer_boolean+0x48>)
			emit(lexer, JSON_TOK_TRUE);
			return lexer_json;
		}
		break;
	case 'f':
		if (!accept_run(lexer, "alse")) {
   1f042:	4620      	mov	r0, r4
   1f044:	f01f ff84 	bl	3ef50 <accept_run>
   1f048:	b948      	cbnz	r0, 1f05e <lexer_boolean+0x36>
	lexer->token.start = lexer->start;
   1f04a:	6863      	ldr	r3, [r4, #4]
			emit(lexer, JSON_TOK_FALSE);
			return lexer_json;
   1f04c:	4809      	ldr	r0, [pc, #36]	; (1f074 <lexer_boolean+0x4c>)
	lexer->token.start = lexer->start;
   1f04e:	6163      	str	r3, [r4, #20]
	lexer->token.end = lexer->pos;
   1f050:	68a3      	ldr	r3, [r4, #8]
	lexer->token.type = token;
   1f052:	7425      	strb	r5, [r4, #16]
	lexer->token.end = lexer->pos;
   1f054:	61a3      	str	r3, [r4, #24]
	lexer->start = lexer->pos;
   1f056:	6063      	str	r3, [r4, #4]
		break;
	}

	emit(lexer, JSON_TOK_ERROR);
	return NULL;
}
   1f058:	bd38      	pop	{r3, r4, r5, pc}
		if (!accept_run(lexer, "alse")) {
   1f05a:	4907      	ldr	r1, [pc, #28]	; (1f078 <lexer_boolean+0x50>)
   1f05c:	e7f1      	b.n	1f042 <lexer_boolean+0x1a>
	lexer->token.type = token;
   1f05e:	2321      	movs	r3, #33	; 0x21
   1f060:	7423      	strb	r3, [r4, #16]
	lexer->token.start = lexer->start;
   1f062:	6863      	ldr	r3, [r4, #4]
	return NULL;
   1f064:	2000      	movs	r0, #0
	lexer->token.start = lexer->start;
   1f066:	6163      	str	r3, [r4, #20]
	lexer->token.end = lexer->pos;
   1f068:	68a3      	ldr	r3, [r4, #8]
   1f06a:	61a3      	str	r3, [r4, #24]
	lexer->start = lexer->pos;
   1f06c:	6063      	str	r3, [r4, #4]
	return NULL;
   1f06e:	e7f3      	b.n	1f058 <lexer_boolean+0x30>
   1f070:	00047018 	.word	0x00047018
   1f074:	0001f0e9 	.word	0x0001f0e9
   1f078:	00047012 	.word	0x00047012

0001f07c <lexer_number>:
	emit(lexer, JSON_TOK_NULL);
	return lexer_json;
}

static void *lexer_number(struct lexer *lexer)
{
   1f07c:	4601      	mov	r1, r0
   1f07e:	b510      	push	{r4, lr}
	while (true) {
		int chr = next(lexer);

		if (isdigit(chr) || chr == '.') {
   1f080:	4c09      	ldr	r4, [pc, #36]	; (1f0a8 <lexer_number+0x2c>)
		int chr = next(lexer);
   1f082:	4608      	mov	r0, r1
   1f084:	f01f ff58 	bl	3ef38 <next>
		if (isdigit(chr) || chr == '.') {
   1f088:	5d03      	ldrb	r3, [r0, r4]
   1f08a:	075b      	lsls	r3, r3, #29
   1f08c:	d4f9      	bmi.n	1f082 <lexer_number+0x6>
   1f08e:	282e      	cmp	r0, #46	; 0x2e
   1f090:	d0f7      	beq.n	1f082 <lexer_number+0x6>
	lexer->token.type = token;
   1f092:	2230      	movs	r2, #48	; 0x30
	lexer->pos--;
   1f094:	688b      	ldr	r3, [r1, #8]
	lexer->token.type = token;
   1f096:	740a      	strb	r2, [r1, #16]
	lexer->token.start = lexer->start;
   1f098:	684a      	ldr	r2, [r1, #4]
	lexer->pos--;
   1f09a:	3b01      	subs	r3, #1
   1f09c:	608b      	str	r3, [r1, #8]
	lexer->token.end = lexer->pos;
   1f09e:	e9c1 2305 	strd	r2, r3, [r1, #20]
	lexer->start = lexer->pos;
   1f0a2:	604b      	str	r3, [r1, #4]
		backup(lexer);
		emit(lexer, JSON_TOK_NUMBER);

		return lexer_json;
	}
}
   1f0a4:	4801      	ldr	r0, [pc, #4]	; (1f0ac <lexer_number+0x30>)
   1f0a6:	bd10      	pop	{r4, pc}
   1f0a8:	0004a77d 	.word	0x0004a77d
   1f0ac:	0001f0e9 	.word	0x0001f0e9

0001f0b0 <lexer_null>:
{
   1f0b0:	b510      	push	{r4, lr}
	if (accept_run(lexer, "ull") < 0) {
   1f0b2:	490b      	ldr	r1, [pc, #44]	; (1f0e0 <lexer_null+0x30>)
{
   1f0b4:	4604      	mov	r4, r0
	if (accept_run(lexer, "ull") < 0) {
   1f0b6:	f01f ff4b 	bl	3ef50 <accept_run>
   1f0ba:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1f0be:	2800      	cmp	r0, #0
   1f0c0:	da06      	bge.n	1f0d0 <lexer_null+0x20>
	lexer->token.type = token;
   1f0c2:	2121      	movs	r1, #33	; 0x21
	lexer->start = lexer->pos;
   1f0c4:	2000      	movs	r0, #0
	lexer->token.end = lexer->pos;
   1f0c6:	e9c4 2305 	strd	r2, r3, [r4, #20]
	lexer->token.type = token;
   1f0ca:	7421      	strb	r1, [r4, #16]
	lexer->start = lexer->pos;
   1f0cc:	6063      	str	r3, [r4, #4]
}
   1f0ce:	bd10      	pop	{r4, pc}
	lexer->token.type = token;
   1f0d0:	216e      	movs	r1, #110	; 0x6e
	lexer->token.end = lexer->pos;
   1f0d2:	e9c4 2305 	strd	r2, r3, [r4, #20]
	lexer->token.type = token;
   1f0d6:	7421      	strb	r1, [r4, #16]
	lexer->start = lexer->pos;
   1f0d8:	6063      	str	r3, [r4, #4]
	return lexer_json;
   1f0da:	4802      	ldr	r0, [pc, #8]	; (1f0e4 <lexer_null+0x34>)
   1f0dc:	e7f7      	b.n	1f0ce <lexer_null+0x1e>
   1f0de:	bf00      	nop
   1f0e0:	00046ffb 	.word	0x00046ffb
   1f0e4:	0001f0e9 	.word	0x0001f0e9

0001f0e8 <lexer_json>:

static void *lexer_json(struct lexer *lexer)
{
   1f0e8:	b538      	push	{r3, r4, r5, lr}
   1f0ea:	4604      	mov	r4, r0
			return lexer_null;
		case 't':
		case 'f':
			return lexer_boolean;
		case '-':
			if (isdigit(peek(lexer))) {
   1f0ec:	4d25      	ldr	r5, [pc, #148]	; (1f184 <lexer_json+0x9c>)
		int chr = next(lexer);
   1f0ee:	4620      	mov	r0, r4
   1f0f0:	f01f ff22 	bl	3ef38 <next>
		switch (chr) {
   1f0f4:	285b      	cmp	r0, #91	; 0x5b
		int chr = next(lexer);
   1f0f6:	4601      	mov	r1, r0
		switch (chr) {
   1f0f8:	d010      	beq.n	1f11c <lexer_json+0x34>
   1f0fa:	dc17      	bgt.n	1f12c <lexer_json+0x44>
   1f0fc:	282c      	cmp	r0, #44	; 0x2c
   1f0fe:	d00d      	beq.n	1f11c <lexer_json+0x34>
   1f100:	dc08      	bgt.n	1f114 <lexer_json+0x2c>
   1f102:	b310      	cbz	r0, 1f14a <lexer_json+0x62>
   1f104:	2822      	cmp	r0, #34	; 0x22
   1f106:	d039      	beq.n	1f17c <lexer_json+0x94>
				return lexer_number;
			}

			/* fallthrough */
		default:
			if (isspace(chr)) {
   1f108:	5d49      	ldrb	r1, [r1, r5]
   1f10a:	070b      	lsls	r3, r1, #28
   1f10c:	d530      	bpl.n	1f170 <lexer_json+0x88>
	lexer->start = lexer->pos;
   1f10e:	68a3      	ldr	r3, [r4, #8]
   1f110:	6063      	str	r3, [r4, #4]
				ignore(lexer);
				continue;
   1f112:	e7ec      	b.n	1f0ee <lexer_json+0x6>
		switch (chr) {
   1f114:	282d      	cmp	r0, #45	; 0x2d
   1f116:	d020      	beq.n	1f15a <lexer_json+0x72>
   1f118:	283a      	cmp	r0, #58	; 0x3a
   1f11a:	d1f5      	bne.n	1f108 <lexer_json+0x20>
	lexer->token.start = lexer->start;
   1f11c:	6863      	ldr	r3, [r4, #4]
			return lexer_json;
   1f11e:	481a      	ldr	r0, [pc, #104]	; (1f188 <lexer_json+0xa0>)
	lexer->token.start = lexer->start;
   1f120:	6163      	str	r3, [r4, #20]
	lexer->token.end = lexer->pos;
   1f122:	68a3      	ldr	r3, [r4, #8]
			emit(lexer, (enum json_tokens)chr);
   1f124:	7421      	strb	r1, [r4, #16]
	lexer->token.end = lexer->pos;
   1f126:	61a3      	str	r3, [r4, #24]
	lexer->start = lexer->pos;
   1f128:	6063      	str	r3, [r4, #4]

			emit(lexer, JSON_TOK_ERROR);
			return NULL;
		}
	}
}
   1f12a:	bd38      	pop	{r3, r4, r5, pc}
		switch (chr) {
   1f12c:	286e      	cmp	r0, #110	; 0x6e
   1f12e:	d027      	beq.n	1f180 <lexer_json+0x98>
   1f130:	dc05      	bgt.n	1f13e <lexer_json+0x56>
   1f132:	285d      	cmp	r0, #93	; 0x5d
   1f134:	d0f2      	beq.n	1f11c <lexer_json+0x34>
   1f136:	2866      	cmp	r0, #102	; 0x66
   1f138:	d1e6      	bne.n	1f108 <lexer_json+0x20>
			return lexer_boolean;
   1f13a:	4814      	ldr	r0, [pc, #80]	; (1f18c <lexer_json+0xa4>)
   1f13c:	e7f5      	b.n	1f12a <lexer_json+0x42>
		switch (chr) {
   1f13e:	287b      	cmp	r0, #123	; 0x7b
   1f140:	d0ec      	beq.n	1f11c <lexer_json+0x34>
   1f142:	287d      	cmp	r0, #125	; 0x7d
   1f144:	d0ea      	beq.n	1f11c <lexer_json+0x34>
   1f146:	2874      	cmp	r0, #116	; 0x74
   1f148:	e7f6      	b.n	1f138 <lexer_json+0x50>
	lexer->token.type = token;
   1f14a:	7420      	strb	r0, [r4, #16]
	lexer->token.start = lexer->start;
   1f14c:	6863      	ldr	r3, [r4, #4]
			return NULL;
   1f14e:	4608      	mov	r0, r1
	lexer->token.start = lexer->start;
   1f150:	6163      	str	r3, [r4, #20]
	lexer->token.end = lexer->pos;
   1f152:	68a3      	ldr	r3, [r4, #8]
   1f154:	61a3      	str	r3, [r4, #24]
	lexer->start = lexer->pos;
   1f156:	6063      	str	r3, [r4, #4]
			return NULL;
   1f158:	e7e7      	b.n	1f12a <lexer_json+0x42>
	int chr = next(lexer);
   1f15a:	4620      	mov	r0, r4
   1f15c:	f01f feec 	bl	3ef38 <next>
	lexer->pos--;
   1f160:	68a3      	ldr	r3, [r4, #8]
   1f162:	3b01      	subs	r3, #1
   1f164:	60a3      	str	r3, [r4, #8]
			if (isdigit(peek(lexer))) {
   1f166:	5c2b      	ldrb	r3, [r5, r0]
   1f168:	075a      	lsls	r2, r3, #29
   1f16a:	d5cd      	bpl.n	1f108 <lexer_json+0x20>
				return lexer_number;
   1f16c:	4808      	ldr	r0, [pc, #32]	; (1f190 <lexer_json+0xa8>)
   1f16e:	e7dc      	b.n	1f12a <lexer_json+0x42>
			if (isdigit(chr)) {
   1f170:	f011 0104 	ands.w	r1, r1, #4
   1f174:	d1fa      	bne.n	1f16c <lexer_json+0x84>
	lexer->token.type = token;
   1f176:	2321      	movs	r3, #33	; 0x21
   1f178:	7423      	strb	r3, [r4, #16]
   1f17a:	e7e7      	b.n	1f14c <lexer_json+0x64>
			return lexer_string;
   1f17c:	4805      	ldr	r0, [pc, #20]	; (1f194 <lexer_json+0xac>)
   1f17e:	e7d4      	b.n	1f12a <lexer_json+0x42>
			return lexer_null;
   1f180:	4805      	ldr	r0, [pc, #20]	; (1f198 <lexer_json+0xb0>)
   1f182:	e7d2      	b.n	1f12a <lexer_json+0x42>
   1f184:	0004a77d 	.word	0x0004a77d
   1f188:	0001f0e9 	.word	0x0001f0e9
   1f18c:	0001f029 	.word	0x0001f029
   1f190:	0001f07d 	.word	0x0001f07d
   1f194:	0001ef5d 	.word	0x0001ef5d
   1f198:	0001f0b1 	.word	0x0001f0b1

0001f19c <decode_value>:
		     size_t max_elements, void *field, void *val);

static int decode_value(struct json_obj *obj,
			const struct json_obj_descr *descr,
			struct token *value, void *field, void *val)
{
   1f19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f1a0:	4615      	mov	r5, r2

	if (!equivalent_types(value->type, descr->type)) {
   1f1a2:	7812      	ldrb	r2, [r2, #0]
{
   1f1a4:	461c      	mov	r4, r3
	if (!equivalent_types(value->type, descr->type)) {
   1f1a6:	794b      	ldrb	r3, [r1, #5]
{
   1f1a8:	b086      	sub	sp, #24
	if (type1 == JSON_TOK_TRUE || type1 == JSON_TOK_FALSE) {
   1f1aa:	2a74      	cmp	r2, #116	; 0x74
{
   1f1ac:	4606      	mov	r6, r0
   1f1ae:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	if (!equivalent_types(value->type, descr->type)) {
   1f1b0:	ea4f 0353 	mov.w	r3, r3, lsr #1
	if (type1 == JSON_TOK_TRUE || type1 == JSON_TOK_FALSE) {
   1f1b4:	d001      	beq.n	1f1ba <decode_value+0x1e>
   1f1b6:	2a66      	cmp	r2, #102	; 0x66
   1f1b8:	d113      	bne.n	1f1e2 <decode_value+0x46>
		return type2 == JSON_TOK_TRUE || type2 == JSON_TOK_FALSE;
   1f1ba:	2b74      	cmp	r3, #116	; 0x74
   1f1bc:	d004      	beq.n	1f1c8 <decode_value+0x2c>
   1f1be:	2b66      	cmp	r3, #102	; 0x66
	return type1 == type2;
   1f1c0:	bf14      	ite	ne
   1f1c2:	2000      	movne	r0, #0
   1f1c4:	2001      	moveq	r0, #1
   1f1c6:	e000      	b.n	1f1ca <decode_value+0x2e>
		return type2 == JSON_TOK_TRUE || type2 == JSON_TOK_FALSE;
   1f1c8:	2001      	movs	r0, #1
	if (!equivalent_types(value->type, descr->type)) {
   1f1ca:	b138      	cbz	r0, 1f1dc <decode_value+0x40>
		return -EINVAL;
	}

	switch (descr->type) {
   1f1cc:	2b5b      	cmp	r3, #91	; 0x5b
   1f1ce:	d01f      	beq.n	1f210 <decode_value+0x74>
   1f1d0:	d809      	bhi.n	1f1e6 <decode_value+0x4a>
   1f1d2:	2b22      	cmp	r3, #34	; 0x22
   1f1d4:	f000 8084 	beq.w	1f2e0 <decode_value+0x144>
   1f1d8:	2b30      	cmp	r3, #48	; 0x30
   1f1da:	d062      	beq.n	1f2a2 <decode_value+0x106>
		return -EINVAL;
   1f1dc:	f06f 0015 	mvn.w	r0, #21
   1f1e0:	e013      	b.n	1f20a <decode_value+0x6e>
	return type1 == type2;
   1f1e2:	429a      	cmp	r2, r3
   1f1e4:	e7ec      	b.n	1f1c0 <decode_value+0x24>
	switch (descr->type) {
   1f1e6:	2b74      	cmp	r3, #116	; 0x74
   1f1e8:	d003      	beq.n	1f1f2 <decode_value+0x56>
   1f1ea:	2b7b      	cmp	r3, #123	; 0x7b
   1f1ec:	d007      	beq.n	1f1fe <decode_value+0x62>
   1f1ee:	2b66      	cmp	r3, #102	; 0x66
   1f1f0:	d1f4      	bne.n	1f1dc <decode_value+0x40>
				 descr->array.n_elements, field, val);
	case JSON_TOK_FALSE:
	case JSON_TOK_TRUE: {
		bool *v = field;

		*v = value->type == JSON_TOK_TRUE;
   1f1f2:	f1a2 0374 	sub.w	r3, r2, #116	; 0x74
   1f1f6:	425a      	negs	r2, r3
   1f1f8:	415a      	adcs	r2, r3
   1f1fa:	7022      	strb	r2, [r4, #0]
   1f1fc:	e033      	b.n	1f266 <decode_value+0xca>
		return obj_parse(obj, descr->object.sub_descr,
   1f1fe:	4623      	mov	r3, r4
   1f200:	e9d1 1202 	ldrd	r1, r2, [r1, #8]
   1f204:	4630      	mov	r0, r6
   1f206:	f01f ff21 	bl	3f04c <obj_parse>
		return 0;
	}
	default:
		return -EINVAL;
	}
}
   1f20a:	b006      	add	sp, #24
   1f20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return arr_parse(obj, descr->array.element_descr,
   1f210:	688d      	ldr	r5, [r1, #8]

static int arr_parse(struct json_obj *obj,
		     const struct json_obj_descr *elem_descr,
		     size_t max_elements, void *field, void *val)
{
	ptrdiff_t elem_size = get_elem_size(elem_descr);
   1f212:	4628      	mov	r0, r5
   1f214:	f01f febf 	bl	3ef96 <get_elem_size>
	void *last_elem = (char *)field + elem_size * max_elements;
   1f218:	68cb      	ldr	r3, [r1, #12]
	size_t *elements = (size_t *)((char *)val + elem_descr->offset);
	struct token value;

	assert(elem_size > 0);
   1f21a:	2800      	cmp	r0, #0
	void *last_elem = (char *)field + elem_size * max_elements;
   1f21c:	fb03 4900 	mla	r9, r3, r0, r4
	size_t *elements = (size_t *)((char *)val + elem_descr->offset);
   1f220:	88eb      	ldrh	r3, [r5, #6]
	ptrdiff_t elem_size = get_elem_size(elem_descr);
   1f222:	4680      	mov	r8, r0
	size_t *elements = (size_t *)((char *)val + elem_descr->offset);
   1f224:	eb07 0a03 	add.w	sl, r7, r3
	assert(elem_size > 0);
   1f228:	dc06      	bgt.n	1f238 <decode_value+0x9c>
   1f22a:	4b30      	ldr	r3, [pc, #192]	; (1f2ec <decode_value+0x150>)
   1f22c:	4a30      	ldr	r2, [pc, #192]	; (1f2f0 <decode_value+0x154>)
   1f22e:	f240 2103 	movw	r1, #515	; 0x203
   1f232:	4830      	ldr	r0, [pc, #192]	; (1f2f4 <decode_value+0x158>)
   1f234:	f01d fb9e 	bl	3c974 <__assert_func>

	*elements = 0;
   1f238:	2200      	movs	r2, #0
   1f23a:	50fa      	str	r2, [r7, r3]
	if (!lexer_next(&json->lexer, value)) {
   1f23c:	a903      	add	r1, sp, #12
   1f23e:	4630      	mov	r0, r6
   1f240:	f01f fee7 	bl	3f012 <lexer_next>
   1f244:	2800      	cmp	r0, #0
   1f246:	d0c9      	beq.n	1f1dc <decode_value+0x40>
	if (value->type == JSON_TOK_LIST_END) {
   1f248:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1f24c:	2b5d      	cmp	r3, #93	; 0x5d
   1f24e:	d00a      	beq.n	1f266 <decode_value+0xca>
	if (value->type == JSON_TOK_COMMA) {
   1f250:	2b2c      	cmp	r3, #44	; 0x2c
   1f252:	d01c      	beq.n	1f28e <decode_value+0xf2>
	return element_token(value->type);
   1f254:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1f258:	4618      	mov	r0, r3
   1f25a:	f01f fe89 	bl	3ef70 <element_token>

	while (!arr_next(obj, &value)) {
   1f25e:	2800      	cmp	r0, #0
   1f260:	d1bc      	bne.n	1f1dc <decode_value+0x40>
		if (value.type == JSON_TOK_LIST_END) {
   1f262:	2b5d      	cmp	r3, #93	; 0x5d
   1f264:	d101      	bne.n	1f26a <decode_value+0xce>
		return 0;
   1f266:	2000      	movs	r0, #0
   1f268:	e7cf      	b.n	1f20a <decode_value+0x6e>
			return 0;
		}

		if (field == last_elem) {
   1f26a:	45a1      	cmp	r9, r4
   1f26c:	d016      	beq.n	1f29c <decode_value+0x100>
			return -ENOSPC;
		}

		if (decode_value(obj, elem_descr, &value, field, val) < 0) {
   1f26e:	9700      	str	r7, [sp, #0]
   1f270:	4623      	mov	r3, r4
   1f272:	aa03      	add	r2, sp, #12
   1f274:	4629      	mov	r1, r5
   1f276:	4630      	mov	r0, r6
   1f278:	f7ff ff90 	bl	1f19c <decode_value>
   1f27c:	2800      	cmp	r0, #0
   1f27e:	dbad      	blt.n	1f1dc <decode_value+0x40>
			return -EINVAL;
		}

		(*elements)++;
   1f280:	f8da 3000 	ldr.w	r3, [sl]
		field = (char *)field + elem_size;
   1f284:	4444      	add	r4, r8
		(*elements)++;
   1f286:	3301      	adds	r3, #1
   1f288:	f8ca 3000 	str.w	r3, [sl]
		field = (char *)field + elem_size;
   1f28c:	e7d6      	b.n	1f23c <decode_value+0xa0>
		if (!lexer_next(&json->lexer, value)) {
   1f28e:	a903      	add	r1, sp, #12
   1f290:	4630      	mov	r0, r6
   1f292:	f01f febe 	bl	3f012 <lexer_next>
   1f296:	2800      	cmp	r0, #0
   1f298:	d1dc      	bne.n	1f254 <decode_value+0xb8>
   1f29a:	e79f      	b.n	1f1dc <decode_value+0x40>
			return -ENOSPC;
   1f29c:	f06f 001b 	mvn.w	r0, #27
		return arr_parse(obj, descr->array.element_descr,
   1f2a0:	e7b3      	b.n	1f20a <decode_value+0x6e>
	*token->end = '\0';
   1f2a2:	2600      	movs	r6, #0
	prev_end = *token->end;
   1f2a4:	68ab      	ldr	r3, [r5, #8]
   1f2a6:	781f      	ldrb	r7, [r3, #0]
	*token->end = '\0';
   1f2a8:	701e      	strb	r6, [r3, #0]
	errno = 0;
   1f2aa:	f020 fb01 	bl	3f8b0 <__errno>
	*num = strtol(token->start, &endptr, 10);
   1f2ae:	220a      	movs	r2, #10
	errno = 0;
   1f2b0:	6006      	str	r6, [r0, #0]
	*num = strtol(token->start, &endptr, 10);
   1f2b2:	a903      	add	r1, sp, #12
   1f2b4:	6868      	ldr	r0, [r5, #4]
   1f2b6:	f01e f9fd 	bl	3d6b4 <strtol>
	*token->end = prev_end;
   1f2ba:	68ab      	ldr	r3, [r5, #8]
	*num = strtol(token->start, &endptr, 10);
   1f2bc:	6020      	str	r0, [r4, #0]
	*token->end = prev_end;
   1f2be:	701f      	strb	r7, [r3, #0]
	if (errno != 0) {
   1f2c0:	f020 faf6 	bl	3f8b0 <__errno>
   1f2c4:	6800      	ldr	r0, [r0, #0]
   1f2c6:	b120      	cbz	r0, 1f2d2 <decode_value+0x136>
		return -errno;
   1f2c8:	f020 faf2 	bl	3f8b0 <__errno>
   1f2cc:	6800      	ldr	r0, [r0, #0]
   1f2ce:	4240      	negs	r0, r0
   1f2d0:	e79b      	b.n	1f20a <decode_value+0x6e>
	if (endptr != token->end) {
   1f2d2:	68aa      	ldr	r2, [r5, #8]
   1f2d4:	9b03      	ldr	r3, [sp, #12]
		return -EINVAL;
   1f2d6:	429a      	cmp	r2, r3
   1f2d8:	bf18      	it	ne
   1f2da:	f06f 0015 	mvnne.w	r0, #21
   1f2de:	e794      	b.n	1f20a <decode_value+0x6e>
		*value->end = '\0';
   1f2e0:	2000      	movs	r0, #0
   1f2e2:	68ab      	ldr	r3, [r5, #8]
   1f2e4:	7018      	strb	r0, [r3, #0]
		*str = value->start;
   1f2e6:	686b      	ldr	r3, [r5, #4]
   1f2e8:	6023      	str	r3, [r4, #0]
		return 0;
   1f2ea:	e78e      	b.n	1f20a <decode_value+0x6e>
   1f2ec:	00045e0b 	.word	0x00045e0b
   1f2f0:	00045df2 	.word	0x00045df2
   1f2f4:	00045e19 	.word	0x00045e19

0001f2f8 <json_obj_parse>:
}

int json_obj_parse(char *payload, size_t len,
		   const struct json_obj_descr *descr, size_t descr_len,
		   void *val)
{
   1f2f8:	b530      	push	{r4, r5, lr}
	struct json_obj obj;
	int ret;

	assert(descr_len < (sizeof(ret) * CHAR_BIT - 1));
   1f2fa:	2b1e      	cmp	r3, #30
{
   1f2fc:	b08b      	sub	sp, #44	; 0x2c
   1f2fe:	4615      	mov	r5, r2
   1f300:	461c      	mov	r4, r3
	assert(descr_len < (sizeof(ret) * CHAR_BIT - 1));
   1f302:	d906      	bls.n	1f312 <json_obj_parse+0x1a>
   1f304:	4b11      	ldr	r3, [pc, #68]	; (1f34c <json_obj_parse+0x54>)
   1f306:	4a12      	ldr	r2, [pc, #72]	; (1f350 <json_obj_parse+0x58>)
   1f308:	f44f 7114 	mov.w	r1, #592	; 0x250
   1f30c:	4811      	ldr	r0, [pc, #68]	; (1f354 <json_obj_parse+0x5c>)
   1f30e:	f01d fb31 	bl	3c974 <__assert_func>
	lexer->state = lexer_json;
   1f312:	4b11      	ldr	r3, [pc, #68]	; (1f358 <json_obj_parse+0x60>)
	lexer->pos = data;
   1f314:	9005      	str	r0, [sp, #20]
	lexer->start = data;
   1f316:	e9cd 3003 	strd	r3, r0, [sp, #12]
	lexer->token.type = JSON_TOK_NONE;
   1f31a:	235f      	movs	r3, #95	; 0x5f
	lexer->end = data + len;
   1f31c:	4408      	add	r0, r1
   1f31e:	9006      	str	r0, [sp, #24]
	if (!lexer_next(&json->lexer, &token)) {
   1f320:	4669      	mov	r1, sp
   1f322:	a803      	add	r0, sp, #12
	lexer->token.type = JSON_TOK_NONE;
   1f324:	f88d 301c 	strb.w	r3, [sp, #28]
	if (!lexer_next(&json->lexer, &token)) {
   1f328:	f01f fe73 	bl	3f012 <lexer_next>
   1f32c:	b918      	cbnz	r0, 1f336 <json_obj_parse+0x3e>
		return -EINVAL;
   1f32e:	f06f 0015 	mvn.w	r0, #21
	if (ret < 0) {
		return ret;
	}

	return obj_parse(&obj, descr, descr_len, val);
}
   1f332:	b00b      	add	sp, #44	; 0x2c
   1f334:	bd30      	pop	{r4, r5, pc}
	if (token.type != JSON_TOK_OBJECT_START) {
   1f336:	f89d 3000 	ldrb.w	r3, [sp]
   1f33a:	2b7b      	cmp	r3, #123	; 0x7b
   1f33c:	d1f7      	bne.n	1f32e <json_obj_parse+0x36>
	return obj_parse(&obj, descr, descr_len, val);
   1f33e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f340:	4622      	mov	r2, r4
   1f342:	4629      	mov	r1, r5
   1f344:	a803      	add	r0, sp, #12
   1f346:	f01f fe81 	bl	3f04c <obj_parse>
   1f34a:	e7f2      	b.n	1f332 <json_obj_parse+0x3a>
   1f34c:	00045e33 	.word	0x00045e33
   1f350:	00045dfc 	.word	0x00045dfc
   1f354:	00045e19 	.word	0x00045e19
   1f358:	0001f0e9 	.word	0x0001f0e9

0001f35c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   1f35c:	680b      	ldr	r3, [r1, #0]
   1f35e:	3301      	adds	r3, #1
   1f360:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   1f362:	4b01      	ldr	r3, [pc, #4]	; (1f368 <char_out+0xc>)
   1f364:	681b      	ldr	r3, [r3, #0]
   1f366:	4718      	bx	r3
   1f368:	20031bfc 	.word	0x20031bfc

0001f36c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
   1f36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f370:	b085      	sub	sp, #20
   1f372:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1f374:	469b      	mov	fp, r3
   1f376:	2c01      	cmp	r4, #1
   1f378:	bfb8      	it	lt
   1f37a:	2401      	movlt	r4, #1
   1f37c:	2b01      	cmp	r3, #1
   1f37e:	bf0c      	ite	eq
   1f380:	2330      	moveq	r3, #48	; 0x30
   1f382:	2320      	movne	r3, #32
   1f384:	4616      	mov	r6, r2
   1f386:	4682      	mov	sl, r0
   1f388:	4688      	mov	r8, r1
   1f38a:	2501      	movs	r5, #1
   1f38c:	270a      	movs	r7, #10
   1f38e:	2200      	movs	r2, #0
   1f390:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1f400 <_printk_dec_ulong+0x94>
   1f394:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
   1f396:	fbb6 f3f9 	udiv	r3, r6, r9
   1f39a:	9301      	str	r3, [sp, #4]
   1f39c:	b90a      	cbnz	r2, 1f3a2 <_printk_dec_ulong+0x36>
   1f39e:	45b1      	cmp	r9, r6
   1f3a0:	d81c      	bhi.n	1f3dc <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
   1f3a2:	9b01      	ldr	r3, [sp, #4]
   1f3a4:	4641      	mov	r1, r8
   1f3a6:	f103 0030 	add.w	r0, r3, #48	; 0x30
   1f3aa:	47d0      	blx	sl
			found_largest_digit = 1;
   1f3ac:	2201      	movs	r2, #1
			digits++;
   1f3ae:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
   1f3b0:	9b01      	ldr	r3, [sp, #4]
		remaining--;
   1f3b2:	3f01      	subs	r7, #1
		remainder %= pos;
   1f3b4:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
   1f3b8:	230a      	movs	r3, #10
	while (pos >= 10) {
   1f3ba:	2f01      	cmp	r7, #1
		pos /= 10;
   1f3bc:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
   1f3c0:	d1e9      	bne.n	1f396 <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
   1f3c2:	4641      	mov	r1, r8
   1f3c4:	f106 0030 	add.w	r0, r6, #48	; 0x30
   1f3c8:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
   1f3ca:	f1bb 0f03 	cmp.w	fp, #3
   1f3ce:	d102      	bne.n	1f3d6 <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
   1f3d0:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
   1f3d2:	2c00      	cmp	r4, #0
   1f3d4:	dc0e      	bgt.n	1f3f4 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
   1f3d6:	b005      	add	sp, #20
   1f3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
   1f3dc:	42bc      	cmp	r4, r7
   1f3de:	dbe7      	blt.n	1f3b0 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
   1f3e0:	f1bb 0f02 	cmp.w	fp, #2
   1f3e4:	d8e4      	bhi.n	1f3b0 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   1f3e6:	4641      	mov	r1, r8
   1f3e8:	9802      	ldr	r0, [sp, #8]
   1f3ea:	9203      	str	r2, [sp, #12]
			digits++;
   1f3ec:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   1f3ee:	47d0      	blx	sl
			digits++;
   1f3f0:	9a03      	ldr	r2, [sp, #12]
   1f3f2:	e7dd      	b.n	1f3b0 <_printk_dec_ulong+0x44>
			out(' ', ctx);
   1f3f4:	4641      	mov	r1, r8
   1f3f6:	2020      	movs	r0, #32
   1f3f8:	47d0      	blx	sl
   1f3fa:	3c01      	subs	r4, #1
   1f3fc:	e7e9      	b.n	1f3d2 <_printk_dec_ulong+0x66>
   1f3fe:	bf00      	nop
   1f400:	3b9aca00 	.word	0x3b9aca00

0001f404 <__printk_hook_install>:
	_char_out = fn;
   1f404:	4b01      	ldr	r3, [pc, #4]	; (1f40c <__printk_hook_install+0x8>)
   1f406:	6018      	str	r0, [r3, #0]
}
   1f408:	4770      	bx	lr
   1f40a:	bf00      	nop
   1f40c:	20031bfc 	.word	0x20031bfc

0001f410 <vprintk>:
	struct out_context ctx = { 0 };
   1f410:	2300      	movs	r3, #0
{
   1f412:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
   1f414:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   1f416:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
   1f418:	4803      	ldr	r0, [pc, #12]	; (1f428 <vprintk+0x18>)
   1f41a:	460b      	mov	r3, r1
   1f41c:	a901      	add	r1, sp, #4
   1f41e:	f01f fea2 	bl	3f166 <z_vprintk>
}
   1f422:	b003      	add	sp, #12
   1f424:	f85d fb04 	ldr.w	pc, [sp], #4
   1f428:	0001f35d 	.word	0x0001f35d

0001f42c <nordicsemi_nrf91_init>:
	__asm__ volatile(
   1f42c:	f04f 0220 	mov.w	r2, #32
   1f430:	f3ef 8311 	mrs	r3, BASEPRI
   1f434:	f382 8811 	msr	BASEPRI, r2
   1f438:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1f43c:	2101      	movs	r1, #1
   1f43e:	4a04      	ldr	r2, [pc, #16]	; (1f450 <nordicsemi_nrf91_init+0x24>)
   1f440:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   1f444:	f383 8811 	msr	BASEPRI, r3
   1f448:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   1f44c:	2000      	movs	r0, #0
   1f44e:	4770      	bx	lr
   1f450:	40039000 	.word	0x40039000

0001f454 <log_generic>:
	if (_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else  if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		u32_t timestamp = timestamp_func();
   1f454:	4b13      	ldr	r3, [pc, #76]	; (1f4a4 <log_generic+0x50>)
{
   1f456:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		u32_t timestamp = timestamp_func();
   1f45a:	681b      	ldr	r3, [r3, #0]
{
   1f45c:	4680      	mov	r8, r0
   1f45e:	4689      	mov	r9, r1
   1f460:	4692      	mov	sl, r2
		u32_t timestamp = timestamp_func();
   1f462:	4798      	blx	r3

		for (int i = 0; i < log_backend_count_get(); i++) {
   1f464:	2600      	movs	r6, #0
		u32_t timestamp = timestamp_func();
   1f466:	4607      	mov	r7, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   1f468:	4c0f      	ldr	r4, [pc, #60]	; (1f4a8 <log_generic+0x54>)
   1f46a:	4d10      	ldr	r5, [pc, #64]	; (1f4ac <log_generic+0x58>)
   1f46c:	1b2d      	subs	r5, r5, r4
   1f46e:	112d      	asrs	r5, r5, #4
		for (int i = 0; i < log_backend_count_get(); i++) {
   1f470:	42ae      	cmp	r6, r5
   1f472:	db02      	blt.n	1f47a <log_generic+0x26>
			args[i] = va_arg(ap, log_arg_t);
		}

		log_n(fmt, args, nargs, src_level);
	}
}
   1f474:	b003      	add	sp, #12
   1f476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (log_backend_is_active(backend)) {
   1f47a:	4620      	mov	r0, r4
   1f47c:	f01f fffa 	bl	3f474 <log_backend_is_active>
   1f480:	b160      	cbz	r0, 1f49c <log_generic+0x48>
	if (backend->api->put_sync_string) {
   1f482:	6823      	ldr	r3, [r4, #0]
   1f484:	f8d3 b004 	ldr.w	fp, [r3, #4]
   1f488:	f1bb 0f00 	cmp.w	fp, #0
   1f48c:	d006      	beq.n	1f49c <log_generic+0x48>
		backend->api->put_sync_string(backend, src_level,
   1f48e:	f8cd a000 	str.w	sl, [sp]
   1f492:	464b      	mov	r3, r9
   1f494:	463a      	mov	r2, r7
   1f496:	4641      	mov	r1, r8
   1f498:	4620      	mov	r0, r4
   1f49a:	47d8      	blx	fp
		for (int i = 0; i < log_backend_count_get(); i++) {
   1f49c:	3601      	adds	r6, #1
   1f49e:	3410      	adds	r4, #16
   1f4a0:	e7e6      	b.n	1f470 <log_generic+0x1c>
   1f4a2:	bf00      	nop
   1f4a4:	20031c00 	.word	0x20031c00
   1f4a8:	000430c4 	.word	0x000430c4
   1f4ac:	000430d4 	.word	0x000430d4

0001f4b0 <log_core_init>:
	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
		timestamp_func = k_uptime_get_32;
		freq = 1000;
	} else {
		timestamp_func = k_cycle_get_32_wrapper;
   1f4b0:	4b03      	ldr	r3, [pc, #12]	; (1f4c0 <log_core_init+0x10>)
   1f4b2:	4a04      	ldr	r2, [pc, #16]	; (1f4c4 <log_core_init+0x14>)
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
   1f4b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
   1f4b8:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   1f4ba:	f000 ba5d 	b.w	1f978 <log_output_timestamp_freq_set>
   1f4be:	bf00      	nop
   1f4c0:	20031c00 	.word	0x20031c00
   1f4c4:	0003f47b 	.word	0x0003f47b

0001f4c8 <log_source_name_get>:
   1f4c8:	4a04      	ldr	r2, [pc, #16]	; (1f4dc <log_source_name_get+0x14>)
   1f4ca:	4b05      	ldr	r3, [pc, #20]	; (1f4e0 <log_source_name_get+0x18>)
   1f4cc:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(u32_t domain_id, u32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   1f4ce:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   1f4d2:	bf34      	ite	cc
   1f4d4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   1f4d8:	2000      	movcs	r0, #0
}
   1f4da:	4770      	bx	lr
   1f4dc:	00042fb4 	.word	0x00042fb4
   1f4e0:	000430c4 	.word	0x000430c4

0001f4e4 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			u32_t level)
{
   1f4e4:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	u32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   1f4e6:	4c10      	ldr	r4, [pc, #64]	; (1f528 <log_backend_enable+0x44>)
{
   1f4e8:	4605      	mov	r5, r0
	id += backend - log_backend_get(0);
   1f4ea:	1b04      	subs	r4, r0, r4
   1f4ec:	1124      	asrs	r4, r4, #4
   1f4ee:	3401      	adds	r4, #1
{
   1f4f0:	460e      	mov	r6, r1

	log_backend_id_set(backend, id);
   1f4f2:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   1f4f4:	b948      	cbnz	r0, 1f50a <log_backend_enable+0x26>
   1f4f6:	490d      	ldr	r1, [pc, #52]	; (1f52c <log_backend_enable+0x48>)
   1f4f8:	480d      	ldr	r0, [pc, #52]	; (1f530 <log_backend_enable+0x4c>)
   1f4fa:	23bf      	movs	r3, #191	; 0xbf
   1f4fc:	4a0d      	ldr	r2, [pc, #52]	; (1f534 <log_backend_enable+0x50>)
   1f4fe:	f01f ffa2 	bl	3f446 <printk>
   1f502:	21bf      	movs	r1, #191	; 0xbf
   1f504:	480b      	ldr	r0, [pc, #44]	; (1f534 <log_backend_enable+0x50>)
   1f506:	f01f ffab 	bl	3f460 <assert_post_action>
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   1f50a:	2201      	movs	r2, #1
	backend->cb->id = id;
   1f50c:	686b      	ldr	r3, [r5, #4]
   1f50e:	711c      	strb	r4, [r3, #4]
	log_backend_activate(backend, ctx);

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (!backend_attached) {
   1f510:	4c09      	ldr	r4, [pc, #36]	; (1f538 <log_backend_enable+0x54>)
	backend->cb->active = true;
   1f512:	715a      	strb	r2, [r3, #5]
   1f514:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   1f516:	601e      	str	r6, [r3, #0]
   1f518:	b912      	cbnz	r2, 1f520 <log_backend_enable+0x3c>
	z_impl_k_sem_give(sem);
   1f51a:	4808      	ldr	r0, [pc, #32]	; (1f53c <log_backend_enable+0x58>)
   1f51c:	f01b fcba 	bl	3ae94 <z_impl_k_sem_give>
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
   1f520:	2301      	movs	r3, #1
   1f522:	7023      	strb	r3, [r4, #0]
}
   1f524:	bd70      	pop	{r4, r5, r6, pc}
   1f526:	bf00      	nop
   1f528:	000430c4 	.word	0x000430c4
   1f52c:	000452ff 	.word	0x000452ff
   1f530:	00045316 	.word	0x00045316
   1f534:	00045e78 	.word	0x00045e78
   1f538:	2002ad9e 	.word	0x2002ad9e
   1f53c:	20031fc0 	.word	0x20031fc0

0001f540 <log_init>:
{
   1f540:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
   1f542:	4b13      	ldr	r3, [pc, #76]	; (1f590 <log_init+0x50>)
   1f544:	4c13      	ldr	r4, [pc, #76]	; (1f594 <log_init+0x54>)
   1f546:	1b1b      	subs	r3, r3, r4
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   1f548:	2b90      	cmp	r3, #144	; 0x90
   1f54a:	dd06      	ble.n	1f55a <log_init+0x1a>
   1f54c:	4b12      	ldr	r3, [pc, #72]	; (1f598 <log_init+0x58>)
   1f54e:	4a13      	ldr	r2, [pc, #76]	; (1f59c <log_init+0x5c>)
   1f550:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
   1f554:	4812      	ldr	r0, [pc, #72]	; (1f5a0 <log_init+0x60>)
   1f556:	f01d fa0d 	bl	3c974 <__assert_func>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1f55a:	4a12      	ldr	r2, [pc, #72]	; (1f5a4 <log_init+0x64>)
   1f55c:	e8d2 6fef 	ldaex	r6, [r2]
   1f560:	1c71      	adds	r1, r6, #1
   1f562:	e8c2 1fe0 	stlex	r0, r1, [r2]
   1f566:	2800      	cmp	r0, #0
   1f568:	d1f8      	bne.n	1f55c <log_init+0x1c>
	if (atomic_inc(&initialized) != 0) {
   1f56a:	b916      	cbnz	r6, 1f572 <log_init+0x32>
   1f56c:	111d      	asrs	r5, r3, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   1f56e:	42ae      	cmp	r6, r5
   1f570:	db00      	blt.n	1f574 <log_init+0x34>
}
   1f572:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   1f574:	7b23      	ldrb	r3, [r4, #12]
   1f576:	b143      	cbz	r3, 1f58a <log_init+0x4a>
			if (backend->api->init != NULL) {
   1f578:	6823      	ldr	r3, [r4, #0]
   1f57a:	695b      	ldr	r3, [r3, #20]
   1f57c:	b103      	cbz	r3, 1f580 <log_init+0x40>
				backend->api->init();
   1f57e:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   1f580:	2204      	movs	r2, #4
   1f582:	2100      	movs	r1, #0
   1f584:	4620      	mov	r0, r4
   1f586:	f7ff ffad 	bl	1f4e4 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   1f58a:	3601      	adds	r6, #1
   1f58c:	3410      	adds	r4, #16
   1f58e:	e7ee      	b.n	1f56e <log_init+0x2e>
   1f590:	000430d4 	.word	0x000430d4
   1f594:	000430c4 	.word	0x000430c4
   1f598:	00045ea2 	.word	0x00045ea2
   1f59c:	00045e6f 	.word	0x00045e6f
   1f5a0:	00045ef6 	.word	0x00045ef6
   1f5a4:	20023914 	.word	0x20023914

0001f5a8 <z_impl_log_panic>:
{
   1f5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   1f5aa:	4f0c      	ldr	r7, [pc, #48]	; (1f5dc <z_impl_log_panic+0x34>)
   1f5ac:	783d      	ldrb	r5, [r7, #0]
   1f5ae:	b94d      	cbnz	r5, 1f5c4 <z_impl_log_panic+0x1c>
	log_init();
   1f5b0:	f7ff ffc6 	bl	1f540 <log_init>
   1f5b4:	4c0a      	ldr	r4, [pc, #40]	; (1f5e0 <z_impl_log_panic+0x38>)
   1f5b6:	4e0b      	ldr	r6, [pc, #44]	; (1f5e4 <z_impl_log_panic+0x3c>)
   1f5b8:	1b36      	subs	r6, r6, r4
   1f5ba:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   1f5bc:	42b5      	cmp	r5, r6
   1f5be:	db02      	blt.n	1f5c6 <z_impl_log_panic+0x1e>
	panic_mode = true;
   1f5c0:	2301      	movs	r3, #1
   1f5c2:	703b      	strb	r3, [r7, #0]
}
   1f5c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   1f5c6:	4620      	mov	r0, r4
   1f5c8:	f01f ff54 	bl	3f474 <log_backend_is_active>
   1f5cc:	b118      	cbz	r0, 1f5d6 <z_impl_log_panic+0x2e>
	backend->api->panic(backend);
   1f5ce:	6823      	ldr	r3, [r4, #0]
   1f5d0:	4620      	mov	r0, r4
   1f5d2:	691b      	ldr	r3, [r3, #16]
   1f5d4:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   1f5d6:	3501      	adds	r5, #1
   1f5d8:	3410      	adds	r4, #16
   1f5da:	e7ef      	b.n	1f5bc <z_impl_log_panic+0x14>
   1f5dc:	2002ad9f 	.word	0x2002ad9f
   1f5e0:	000430c4 	.word	0x000430c4
   1f5e4:	000430d4 	.word	0x000430d4

0001f5e8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   1f5e8:	b40e      	push	{r1, r2, r3}
   1f5ea:	b503      	push	{r0, r1, lr}
   1f5ec:	ab03      	add	r3, sp, #12
   1f5ee:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
   1f5f2:	4601      	mov	r1, r0
   1f5f4:	4804      	ldr	r0, [pc, #16]	; (1f608 <print_formatted+0x20>)
	va_start(args, fmt);
   1f5f6:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
   1f5f8:	f01f fdb5 	bl	3f166 <z_vprintk>
#endif
	va_end(args);

	return length;
}
   1f5fc:	2000      	movs	r0, #0
   1f5fe:	b002      	add	sp, #8
   1f600:	f85d eb04 	ldr.w	lr, [sp], #4
   1f604:	b003      	add	sp, #12
   1f606:	4770      	bx	lr
   1f608:	0001f845 	.word	0x0001f845

0001f60c <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
   1f60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   1f610:	f011 0402 	ands.w	r4, r1, #2
{
   1f614:	b085      	sub	sp, #20
   1f616:	4606      	mov	r6, r0
   1f618:	4690      	mov	r8, r2
   1f61a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   1f61e:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   1f622:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   1f626:	d007      	beq.n	1f638 <prefix_print+0x2c>
	if (!format) {
   1f628:	f011 0f44 	tst.w	r1, #68	; 0x44
   1f62c:	d137      	bne.n	1f69e <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   1f62e:	461a      	mov	r2, r3
   1f630:	4932      	ldr	r1, [pc, #200]	; (1f6fc <prefix_print+0xf0>)
   1f632:	f7ff ffd9 	bl	1f5e8 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
   1f636:	4604      	mov	r4, r0
	if (color) {
   1f638:	f1b9 0f00 	cmp.w	r9, #0
   1f63c:	d00a      	beq.n	1f654 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
   1f63e:	4b30      	ldr	r3, [pc, #192]	; (1f700 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
   1f640:	4930      	ldr	r1, [pc, #192]	; (1f704 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
   1f642:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
   1f646:	4b30      	ldr	r3, [pc, #192]	; (1f708 <prefix_print+0xfc>)
   1f648:	4630      	mov	r0, r6
   1f64a:	2a00      	cmp	r2, #0
   1f64c:	bf08      	it	eq
   1f64e:	461a      	moveq	r2, r3
   1f650:	f7ff ffca 	bl	1f5e8 <print_formatted>
	if (level_on) {
   1f654:	b13d      	cbz	r5, 1f666 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   1f656:	4b2d      	ldr	r3, [pc, #180]	; (1f70c <prefix_print+0x100>)
   1f658:	492d      	ldr	r1, [pc, #180]	; (1f710 <prefix_print+0x104>)
   1f65a:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   1f65e:	4630      	mov	r0, r6
   1f660:	f7ff ffc2 	bl	1f5e8 <print_formatted>
   1f664:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   1f666:	f1b8 0f00 	cmp.w	r8, #0
   1f66a:	d044      	beq.n	1f6f6 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   1f66c:	2301      	movs	r3, #1
   1f66e:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   1f672:	4b28      	ldr	r3, [pc, #160]	; (1f714 <prefix_print+0x108>)
   1f674:	f017 0f10 	tst.w	r7, #16
   1f678:	4f27      	ldr	r7, [pc, #156]	; (1f718 <prefix_print+0x10c>)
   1f67a:	bf18      	it	ne
   1f67c:	461f      	movne	r7, r3
   1f67e:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   1f682:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   1f686:	f7ff ff1f 	bl	1f4c8 <log_source_name_get>
   1f68a:	4639      	mov	r1, r7
   1f68c:	4602      	mov	r2, r0
   1f68e:	4630      	mov	r0, r6
   1f690:	f7ff ffaa 	bl	1f5e8 <print_formatted>
   1f694:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
   1f696:	4420      	add	r0, r4
   1f698:	b005      	add	sp, #20
   1f69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   1f69e:	4a1f      	ldr	r2, [pc, #124]	; (1f71c <prefix_print+0x110>)
   1f6a0:	6811      	ldr	r1, [r2, #0]
   1f6a2:	b331      	cbz	r1, 1f6f2 <prefix_print+0xe6>
		timestamp /= timestamp_div;
   1f6a4:	4a1e      	ldr	r2, [pc, #120]	; (1f720 <prefix_print+0x114>)
   1f6a6:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   1f6aa:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
   1f6ac:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   1f6b0:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
   1f6b4:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   1f6b8:	fbb4 f2fe 	udiv	r2, r4, lr
   1f6bc:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   1f6c0:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   1f6c4:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1f6c8:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   1f6cc:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1f6d0:	fb01 441b 	mls	r4, r1, fp, r4
   1f6d4:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   1f6d8:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1f6dc:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   1f6e0:	e9cd b101 	strd	fp, r1, [sp, #4]
   1f6e4:	fb0a e113 	mls	r1, sl, r3, lr
   1f6e8:	9100      	str	r1, [sp, #0]
   1f6ea:	490e      	ldr	r1, [pc, #56]	; (1f724 <prefix_print+0x118>)
   1f6ec:	f7ff ff7c 	bl	1f5e8 <print_formatted>
   1f6f0:	e7a1      	b.n	1f636 <prefix_print+0x2a>
		length = 0;
   1f6f2:	4608      	mov	r0, r1
   1f6f4:	e79f      	b.n	1f636 <prefix_print+0x2a>
	total += print_formatted(log_output,
   1f6f6:	4f08      	ldr	r7, [pc, #32]	; (1f718 <prefix_print+0x10c>)
   1f6f8:	e7c1      	b.n	1f67e <prefix_print+0x72>
   1f6fa:	bf00      	nop
   1f6fc:	00045fa4 	.word	0x00045fa4
   1f700:	0004332c 	.word	0x0004332c
   1f704:	00045844 	.word	0x00045844
   1f708:	00045f96 	.word	0x00045f96
   1f70c:	00043340 	.word	0x00043340
   1f710:	00045fc9 	.word	0x00045fc9
   1f714:	00045fa0 	.word	0x00045fa0
   1f718:	00045f9b 	.word	0x00045f9b
   1f71c:	20023918 	.word	0x20023918
   1f720:	2002391c 	.word	0x2002391c
   1f724:	00045fad 	.word	0x00045fad

0001f728 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
   1f728:	b538      	push	{r3, r4, r5, lr}
   1f72a:	460c      	mov	r4, r1
	if (color) {
   1f72c:	07e1      	lsls	r1, r4, #31
{
   1f72e:	4605      	mov	r5, r0
	if (color) {
   1f730:	d503      	bpl.n	1f73a <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
   1f732:	4a08      	ldr	r2, [pc, #32]	; (1f754 <postfix_print+0x2c>)
   1f734:	4908      	ldr	r1, [pc, #32]	; (1f758 <postfix_print+0x30>)
   1f736:	f7ff ff57 	bl	1f5e8 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1f73a:	06e2      	lsls	r2, r4, #27
   1f73c:	d408      	bmi.n	1f750 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1f73e:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   1f740:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   1f742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   1f746:	bf4c      	ite	mi
   1f748:	4904      	ldrmi	r1, [pc, #16]	; (1f75c <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   1f74a:	4905      	ldrpl	r1, [pc, #20]	; (1f760 <postfix_print+0x38>)
   1f74c:	f7ff bf4c 	b.w	1f5e8 <print_formatted>
}
   1f750:	bd38      	pop	{r3, r4, r5, pc}
   1f752:	bf00      	nop
   1f754:	00045f96 	.word	0x00045f96
   1f758:	00045844 	.word	0x00045844
   1f75c:	0004a183 	.word	0x0004a183
   1f760:	0004876f 	.word	0x0004876f

0001f764 <hexdump_line_print>:
{
   1f764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f768:	4698      	mov	r8, r3
   1f76a:	9b08      	ldr	r3, [sp, #32]
   1f76c:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1f76e:	06dd      	lsls	r5, r3, #27
{
   1f770:	460e      	mov	r6, r1
   1f772:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1f774:	d405      	bmi.n	1f782 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1f776:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   1f778:	bf4c      	ite	mi
   1f77a:	492a      	ldrmi	r1, [pc, #168]	; (1f824 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
   1f77c:	492a      	ldrpl	r1, [pc, #168]	; (1f828 <hexdump_line_print+0xc4>)
   1f77e:	f7ff ff33 	bl	1f5e8 <print_formatted>
{
   1f782:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
   1f784:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1f830 <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
   1f788:	4545      	cmp	r5, r8
   1f78a:	db2d      	blt.n	1f7e8 <hexdump_line_print+0x84>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1f78c:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   1f78e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1f834 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
   1f792:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 1f838 <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
   1f796:	f8df a098 	ldr.w	sl, [pc, #152]	; 1f830 <hexdump_line_print+0xcc>
		if (i < length) {
   1f79a:	42bd      	cmp	r5, r7
   1f79c:	d231      	bcs.n	1f802 <hexdump_line_print+0x9e>
			print_formatted(log_output, "%02x ", data[i]);
   1f79e:	5d72      	ldrb	r2, [r6, r5]
   1f7a0:	4649      	mov	r1, r9
   1f7a2:	4620      	mov	r0, r4
   1f7a4:	f7ff ff20 	bl	1f5e8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1f7a8:	3501      	adds	r5, #1
   1f7aa:	2d10      	cmp	r5, #16
   1f7ac:	d122      	bne.n	1f7f4 <hexdump_line_print+0x90>
	print_formatted(log_output, "|");
   1f7ae:	491f      	ldr	r1, [pc, #124]	; (1f82c <hexdump_line_print+0xc8>)
   1f7b0:	4620      	mov	r0, r4
   1f7b2:	f7ff ff19 	bl	1f5e8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1f7b6:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   1f7b8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1f830 <hexdump_line_print+0xcc>
			      isprint((int)c) ? c : '.');
   1f7bc:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1f83c <hexdump_line_print+0xd8>
			print_formatted(log_output, "%c",
   1f7c0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 1f840 <hexdump_line_print+0xdc>
		if (i < length) {
   1f7c4:	42af      	cmp	r7, r5
   1f7c6:	d928      	bls.n	1f81a <hexdump_line_print+0xb6>
			char c = (char)data[i];
   1f7c8:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
   1f7ca:	4651      	mov	r1, sl
   1f7cc:	f812 3009 	ldrb.w	r3, [r2, r9]
   1f7d0:	4620      	mov	r0, r4
   1f7d2:	f013 0f97 	tst.w	r3, #151	; 0x97
   1f7d6:	bf08      	it	eq
   1f7d8:	222e      	moveq	r2, #46	; 0x2e
   1f7da:	f7ff ff05 	bl	1f5e8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1f7de:	3501      	adds	r5, #1
   1f7e0:	2d10      	cmp	r5, #16
   1f7e2:	d113      	bne.n	1f80c <hexdump_line_print+0xa8>
}
   1f7e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   1f7e8:	4649      	mov	r1, r9
   1f7ea:	4620      	mov	r0, r4
   1f7ec:	f7ff fefc 	bl	1f5e8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   1f7f0:	3501      	adds	r5, #1
   1f7f2:	e7c9      	b.n	1f788 <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
   1f7f4:	076a      	lsls	r2, r5, #29
   1f7f6:	d1d0      	bne.n	1f79a <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
   1f7f8:	4651      	mov	r1, sl
   1f7fa:	4620      	mov	r0, r4
   1f7fc:	f7ff fef4 	bl	1f5e8 <print_formatted>
   1f800:	e7cb      	b.n	1f79a <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
   1f802:	4641      	mov	r1, r8
   1f804:	4620      	mov	r0, r4
   1f806:	f7ff feef 	bl	1f5e8 <print_formatted>
   1f80a:	e7cd      	b.n	1f7a8 <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
   1f80c:	076b      	lsls	r3, r5, #29
   1f80e:	d1d9      	bne.n	1f7c4 <hexdump_line_print+0x60>
			print_formatted(log_output, " ");
   1f810:	4641      	mov	r1, r8
   1f812:	4620      	mov	r0, r4
   1f814:	f7ff fee8 	bl	1f5e8 <print_formatted>
   1f818:	e7d4      	b.n	1f7c4 <hexdump_line_print+0x60>
			print_formatted(log_output, " ");
   1f81a:	4641      	mov	r1, r8
   1f81c:	4620      	mov	r0, r4
   1f81e:	f7ff fee3 	bl	1f5e8 <print_formatted>
   1f822:	e7dc      	b.n	1f7de <hexdump_line_print+0x7a>
   1f824:	0004a183 	.word	0x0004a183
   1f828:	0004876f 	.word	0x0004876f
   1f82c:	00045f26 	.word	0x00045f26
   1f830:	00045f24 	.word	0x00045f24
   1f834:	00045f22 	.word	0x00045f22
   1f838:	00045f1c 	.word	0x00045f1c
   1f83c:	0004a77d 	.word	0x0004a77d
   1f840:	00045f28 	.word	0x00045f28

0001f844 <out_func>:
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
   1f844:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   1f848:	681b      	ldr	r3, [r3, #0]
{
   1f84a:	b510      	push	{r4, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
   1f84c:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
   1f84e:	684a      	ldr	r2, [r1, #4]
{
   1f850:	460c      	mov	r4, r1
	out_ctx->control_block->offset++;
   1f852:	6813      	ldr	r3, [r2, #0]
   1f854:	3301      	adds	r3, #1
   1f856:	6013      	str	r3, [r2, #0]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   1f858:	68ca      	ldr	r2, [r1, #12]
   1f85a:	4293      	cmp	r3, r2
   1f85c:	d909      	bls.n	1f872 <out_func+0x2e>
   1f85e:	490a      	ldr	r1, [pc, #40]	; (1f888 <out_func+0x44>)
   1f860:	480a      	ldr	r0, [pc, #40]	; (1f88c <out_func+0x48>)
   1f862:	236d      	movs	r3, #109	; 0x6d
   1f864:	4a0a      	ldr	r2, [pc, #40]	; (1f890 <out_func+0x4c>)
   1f866:	f01f fdee 	bl	3f446 <printk>
   1f86a:	216d      	movs	r1, #109	; 0x6d
   1f86c:	4808      	ldr	r0, [pc, #32]	; (1f890 <out_func+0x4c>)
   1f86e:	f01f fdf7 	bl	3f460 <assert_post_action>
	if (out_ctx->control_block->offset == out_ctx->size) {
   1f872:	6863      	ldr	r3, [r4, #4]
   1f874:	681a      	ldr	r2, [r3, #0]
   1f876:	68e3      	ldr	r3, [r4, #12]
   1f878:	429a      	cmp	r2, r3
   1f87a:	d102      	bne.n	1f882 <out_func+0x3e>
		log_output_flush(out_ctx);
   1f87c:	4620      	mov	r0, r4
   1f87e:	f01f fe20 	bl	3f4c2 <log_output_flush>
}
   1f882:	2000      	movs	r0, #0
   1f884:	bd10      	pop	{r4, pc}
   1f886:	bf00      	nop
   1f888:	00045f66 	.word	0x00045f66
   1f88c:	00045316 	.word	0x00045316
   1f890:	00045f3e 	.word	0x00045f3e

0001f894 <log_output_string>:
}

void log_output_string(const struct log_output *log_output,
		       struct log_msg_ids src_level, u32_t timestamp,
		       const char *fmt, va_list ap, u32_t flags)
{
   1f894:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		log_output_string_syst_process(log_output,
				src_level, fmt, ap, flags);
		return;
	}

	if (!raw_string) {
   1f898:	f011 0407 	ands.w	r4, r1, #7
{
   1f89c:	4606      	mov	r6, r0
   1f89e:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
   1f8a2:	461d      	mov	r5, r3
	if (!raw_string) {
   1f8a4:	d00b      	beq.n	1f8be <log_output_string+0x2a>
		prefix_print(log_output, flags, true, timestamp,
   1f8a6:	f3c1 1389 	ubfx	r3, r1, #6, #10
   1f8aa:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   1f8ae:	9302      	str	r3, [sp, #8]
   1f8b0:	e9cd 4100 	strd	r4, r1, [sp]
   1f8b4:	4613      	mov	r3, r2
   1f8b6:	4639      	mov	r1, r7
   1f8b8:	2201      	movs	r2, #1
   1f8ba:	f7ff fea7 	bl	1f60c <prefix_print>

#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, ap);
#else
	z_vprintk(out_func, (void *)log_output, fmt, ap);
   1f8be:	4643      	mov	r3, r8
   1f8c0:	462a      	mov	r2, r5
   1f8c2:	4631      	mov	r1, r6
   1f8c4:	480d      	ldr	r0, [pc, #52]	; (1f8fc <log_output_string+0x68>)
   1f8c6:	f01f fc4e 	bl	3f166 <z_vprintk>
#endif

	(void)length;

	if (raw_string) {
   1f8ca:	b98c      	cbnz	r4, 1f8f0 <log_output_string+0x5c>
   1f8cc:	3d01      	subs	r5, #1
	while (*fmt != '\0') {
   1f8ce:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   1f8d2:	b95b      	cbnz	r3, 1f8ec <log_output_string+0x58>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
   1f8d4:	2c0a      	cmp	r4, #10
   1f8d6:	d103      	bne.n	1f8e0 <log_output_string+0x4c>
			print_formatted(log_output, "\r");
   1f8d8:	4909      	ldr	r1, [pc, #36]	; (1f900 <log_output_string+0x6c>)
   1f8da:	4630      	mov	r0, r6
   1f8dc:	f7ff fe84 	bl	1f5e8 <print_formatted>
		}
	} else {
		postfix_print(log_output, flags, level);
	}

	log_output_flush(log_output);
   1f8e0:	4630      	mov	r0, r6
}
   1f8e2:	b004      	add	sp, #16
   1f8e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log_output_flush(log_output);
   1f8e8:	f01f bdeb 	b.w	3f4c2 <log_output_flush>
	while (*fmt != '\0') {
   1f8ec:	461c      	mov	r4, r3
   1f8ee:	e7ee      	b.n	1f8ce <log_output_string+0x3a>
		postfix_print(log_output, flags, level);
   1f8f0:	4622      	mov	r2, r4
   1f8f2:	4639      	mov	r1, r7
   1f8f4:	4630      	mov	r0, r6
   1f8f6:	f7ff ff17 	bl	1f728 <postfix_print>
   1f8fa:	e7f1      	b.n	1f8e0 <log_output_string+0x4c>
   1f8fc:	0001f845 	.word	0x0001f845
   1f900:	00045f3c 	.word	0x00045f3c

0001f904 <log_output_hexdump>:

void log_output_hexdump(const struct log_output *log_output,
			     struct log_msg_ids src_level, u32_t timestamp,
			     const char *metadata, const u8_t *data,
			     u32_t length, u32_t flags)
{
   1f904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1f908:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1f90a:	4698      	mov	r8, r3
   1f90c:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
		log_output_hexdump_syst_process(log_output,
				src_level, data, length, flags);
		return;
	}

	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   1f910:	f3c1 1389 	ubfx	r3, r1, #6, #10
	u8_t level = (u8_t)src_level.level;
   1f914:	f001 0907 	and.w	r9, r1, #7
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   1f918:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   1f91c:	9302      	str	r3, [sp, #8]
   1f91e:	e9cd 9100 	strd	r9, r1, [sp]
   1f922:	4613      	mov	r3, r2
   1f924:	4631      	mov	r1, r6
   1f926:	2201      	movs	r2, #1
{
   1f928:	4604      	mov	r4, r0
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   1f92a:	f7ff fe6f 	bl	1f60c <prefix_print>
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(log_output, "%s", metadata);
   1f92e:	4642      	mov	r2, r8
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   1f930:	4682      	mov	sl, r0
	print_formatted(log_output, "%s", metadata);
   1f932:	4910      	ldr	r1, [pc, #64]	; (1f974 <log_output_hexdump+0x70>)
   1f934:	4620      	mov	r0, r4
   1f936:	f7ff fe57 	bl	1f5e8 <print_formatted>

	while (length) {
   1f93a:	b955      	cbnz	r5, 1f952 <log_output_hexdump+0x4e>

		data += part_len;
		length -= part_len;
	};

	postfix_print(log_output, flags, level);
   1f93c:	4620      	mov	r0, r4
   1f93e:	464a      	mov	r2, r9
   1f940:	4631      	mov	r1, r6
   1f942:	f7ff fef1 	bl	1f728 <postfix_print>
	log_output_flush(log_output);
   1f946:	4620      	mov	r0, r4
}
   1f948:	b004      	add	sp, #16
   1f94a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(log_output);
   1f94e:	f01f bdb8 	b.w	3f4c2 <log_output_flush>
		u32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
   1f952:	2d10      	cmp	r5, #16
   1f954:	46a8      	mov	r8, r5
   1f956:	bf28      	it	cs
   1f958:	f04f 0810 	movcs.w	r8, #16
		hexdump_line_print(log_output, data, part_len,
   1f95c:	4639      	mov	r1, r7
   1f95e:	9600      	str	r6, [sp, #0]
   1f960:	4653      	mov	r3, sl
   1f962:	4642      	mov	r2, r8
   1f964:	4620      	mov	r0, r4
   1f966:	f7ff fefd 	bl	1f764 <hexdump_line_print>
		data += part_len;
   1f96a:	4447      	add	r7, r8
		length -= part_len;
   1f96c:	eba5 0508 	sub.w	r5, r5, r8
   1f970:	e7e3      	b.n	1f93a <log_output_hexdump+0x36>
   1f972:	bf00      	nop
   1f974:	00045844 	.word	0x00045844

0001f978 <log_output_timestamp_freq_set>:
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
}

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
   1f978:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   1f97a:	2100      	movs	r1, #0
	timestamp_div = 1U;
   1f97c:	4a07      	ldr	r2, [pc, #28]	; (1f99c <log_output_timestamp_freq_set+0x24>)
{
   1f97e:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   1f980:	4c07      	ldr	r4, [pc, #28]	; (1f9a0 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   1f982:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   1f984:	42a0      	cmp	r0, r4
   1f986:	d804      	bhi.n	1f992 <log_output_timestamp_freq_set+0x1a>
   1f988:	b101      	cbz	r1, 1f98c <log_output_timestamp_freq_set+0x14>
   1f98a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   1f98c:	4b05      	ldr	r3, [pc, #20]	; (1f9a4 <log_output_timestamp_freq_set+0x2c>)
   1f98e:	6018      	str	r0, [r3, #0]
}
   1f990:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   1f992:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1f994:	005b      	lsls	r3, r3, #1
   1f996:	2101      	movs	r1, #1
   1f998:	e7f4      	b.n	1f984 <log_output_timestamp_freq_set+0xc>
   1f99a:	bf00      	nop
   1f99c:	2002391c 	.word	0x2002391c
   1f9a0:	000f4240 	.word	0x000f4240
   1f9a4:	20023918 	.word	0x20023918

0001f9a8 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   1f9a8:	4801      	ldr	r0, [pc, #4]	; (1f9b0 <panic+0x8>)
   1f9aa:	f01f bd8a 	b.w	3f4c2 <log_output_flush>
   1f9ae:	bf00      	nop
   1f9b0:	0004336c 	.word	0x0004336c

0001f9b4 <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
   1f9b4:	b508      	push	{r3, lr}
   1f9b6:	4806      	ldr	r0, [pc, #24]	; (1f9d0 <log_backend_uart_init+0x1c>)
   1f9b8:	f019 f9fe 	bl	38db8 <z_impl_device_get_binding>
	struct device *dev;

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);
   1f9bc:	b928      	cbnz	r0, 1f9ca <log_backend_uart_init+0x16>
   1f9be:	4b05      	ldr	r3, [pc, #20]	; (1f9d4 <log_backend_uart_init+0x20>)
   1f9c0:	4a05      	ldr	r2, [pc, #20]	; (1f9d8 <log_backend_uart_init+0x24>)
   1f9c2:	212d      	movs	r1, #45	; 0x2d
   1f9c4:	4805      	ldr	r0, [pc, #20]	; (1f9dc <log_backend_uart_init+0x28>)
   1f9c6:	f01c ffd5 	bl	3c974 <__assert_func>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
   1f9ca:	4b05      	ldr	r3, [pc, #20]	; (1f9e0 <log_backend_uart_init+0x2c>)
   1f9cc:	6058      	str	r0, [r3, #4]

	log_output_ctx_set(&log_output, dev);
}
   1f9ce:	bd08      	pop	{r3, pc}
   1f9d0:	00046005 	.word	0x00046005
   1f9d4:	00045cc6 	.word	0x00045cc6
   1f9d8:	00045fef 	.word	0x00045fef
   1f9dc:	0004600c 	.word	0x0004600c
   1f9e0:	20023928 	.word	0x20023928

0001f9e4 <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, u32_t timestamp,
			 const char *metadata, const u8_t *data, u32_t length)
{
   1f9e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1f9e8:	460e      	mov	r6, r1
   1f9ea:	4617      	mov	r7, r2
   1f9ec:	4698      	mov	r8, r3
	__asm__ volatile(
   1f9ee:	f04f 0320 	mov.w	r3, #32
   1f9f2:	f3ef 8511 	mrs	r5, BASEPRI
   1f9f6:	f383 8811 	msr	BASEPRI, r3
   1f9fa:	f3bf 8f6f 	isb	sy
	 * it may lead to failure. Log output is not re-entrant and irq_lock
	 * does not prevent NMI or ZLI (Zero latency interrupts). If context
	 * is interrupted by NMI it usually means fault scenario and best that
	 * can be done is to flush the output and process new data.
	 */
	log_output_flush(log_output);
   1f9fe:	4c0b      	ldr	r4, [pc, #44]	; (1fa2c <sync_hexdump+0x48>)
   1fa00:	4620      	mov	r0, r4
   1fa02:	f01f fd5e 	bl	3f4c2 <log_output_flush>
	log_output_hexdump(log_output, src_level, timestamp,
   1fa06:	230f      	movs	r3, #15
   1fa08:	9302      	str	r3, [sp, #8]
   1fa0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1fa0c:	463a      	mov	r2, r7
   1fa0e:	9301      	str	r3, [sp, #4]
   1fa10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fa12:	4631      	mov	r1, r6
   1fa14:	9300      	str	r3, [sp, #0]
   1fa16:	4620      	mov	r0, r4
   1fa18:	4643      	mov	r3, r8
   1fa1a:	f7ff ff73 	bl	1f904 <log_output_hexdump>
	__asm__ volatile(
   1fa1e:	f385 8811 	msr	BASEPRI, r5
   1fa22:	f3bf 8f6f 	isb	sy
	u32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_UART_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output, flag, src_level,
				     timestamp, metadata, data, length);
}
   1fa26:	b004      	add	sp, #16
   1fa28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fa2c:	0004336c 	.word	0x0004336c

0001fa30 <sync_string>:
{
   1fa30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1fa34:	460e      	mov	r6, r1
   1fa36:	4617      	mov	r7, r2
   1fa38:	4698      	mov	r8, r3
	__asm__ volatile(
   1fa3a:	f04f 0320 	mov.w	r3, #32
   1fa3e:	f3ef 8511 	mrs	r5, BASEPRI
   1fa42:	f383 8811 	msr	BASEPRI, r3
   1fa46:	f3bf 8f6f 	isb	sy
	log_output_flush(log_output);
   1fa4a:	4c0a      	ldr	r4, [pc, #40]	; (1fa74 <sync_string+0x44>)
   1fa4c:	4620      	mov	r0, r4
   1fa4e:	f01f fd38 	bl	3f4c2 <log_output_flush>
	log_output_string(log_output, src_level, timestamp, fmt, ap, flags);
   1fa52:	230f      	movs	r3, #15
   1fa54:	9301      	str	r3, [sp, #4]
   1fa56:	9b08      	ldr	r3, [sp, #32]
   1fa58:	463a      	mov	r2, r7
   1fa5a:	9300      	str	r3, [sp, #0]
   1fa5c:	4631      	mov	r1, r6
   1fa5e:	4643      	mov	r3, r8
   1fa60:	4620      	mov	r0, r4
   1fa62:	f7ff ff17 	bl	1f894 <log_output_string>
	__asm__ volatile(
   1fa66:	f385 8811 	msr	BASEPRI, r5
   1fa6a:	f3bf 8f6f 	isb	sy
}
   1fa6e:	b002      	add	sp, #8
   1fa70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fa74:	0004336c 	.word	0x0004336c

0001fa78 <boot_write_trailer_byte>:
	}
}

static int boot_write_trailer_byte(const struct flash_area *fa, u32_t off,
				   u8_t val)
{
   1fa78:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1fa7a:	4604      	mov	r4, r0
   1fa7c:	460d      	mov	r5, r1
   1fa7e:	4616      	mov	r6, r2
	u8_t buf[BOOT_MAX_ALIGN];
	u8_t align;
	u8_t erased_val;
	int rc;

	align = flash_area_align(fa);
   1fa80:	f01f fe44 	bl	3f70c <flash_area_align>
	assert(align <= BOOT_MAX_ALIGN);
   1fa84:	2808      	cmp	r0, #8
	align = flash_area_align(fa);
   1fa86:	4603      	mov	r3, r0
	assert(align <= BOOT_MAX_ALIGN);
   1fa88:	d906      	bls.n	1fa98 <boot_write_trailer_byte+0x20>
   1fa8a:	4b0c      	ldr	r3, [pc, #48]	; (1fabc <boot_write_trailer_byte+0x44>)
   1fa8c:	4a0c      	ldr	r2, [pc, #48]	; (1fac0 <boot_write_trailer_byte+0x48>)
   1fa8e:	f44f 719b 	mov.w	r1, #310	; 0x136
   1fa92:	480c      	ldr	r0, [pc, #48]	; (1fac4 <boot_write_trailer_byte+0x4c>)
   1fa94:	f01c ff6e 	bl	3c974 <__assert_func>
	erased_val = flash_area_erased_val(fa);
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   1fa98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	buf[0] = val;

	rc = flash_area_write(fa, off, buf, align);
   1fa9c:	466a      	mov	r2, sp
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   1fa9e:	e9cd 0000 	strd	r0, r0, [sp]
	rc = flash_area_write(fa, off, buf, align);
   1faa2:	4629      	mov	r1, r5
   1faa4:	4620      	mov	r0, r4
	buf[0] = val;
   1faa6:	f88d 6000 	strb.w	r6, [sp]
	rc = flash_area_write(fa, off, buf, align);
   1faaa:	f01f fde0 	bl	3f66e <flash_area_write>
	if (rc != 0) {
   1faae:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   1fab0:	bf18      	it	ne
   1fab2:	f06f 0004 	mvnne.w	r0, #4
   1fab6:	b002      	add	sp, #8
   1fab8:	bd70      	pop	{r4, r5, r6, pc}
   1faba:	bf00      	nop
   1fabc:	00046063 	.word	0x00046063
   1fac0:	0004604b 	.word	0x0004604b
   1fac4:	0004607b 	.word	0x0004607b

0001fac8 <boot_request_upgrade>:

	return BOOT_SWAP_TYPE_NONE;
}

int boot_request_upgrade(int permanent)
{
   1fac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1faca:	4605      	mov	r5, r0
	rc = flash_area_open(bank_id, &fa);
   1facc:	a901      	add	r1, sp, #4
   1face:	2006      	movs	r0, #6
   1fad0:	f000 f962 	bl	1fd98 <flash_area_open>
	if (rc) {
   1fad4:	4604      	mov	r4, r0
   1fad6:	bb10      	cbnz	r0, 1fb1e <boot_request_upgrade+0x56>
	offs = MAGIC_OFFS(fa);
   1fad8:	9801      	ldr	r0, [sp, #4]
	rc = flash_area_write(fa, offs, boot_img_magic, BOOT_MAGIC_SZ);
   1fada:	2310      	movs	r3, #16
	offs = MAGIC_OFFS(fa);
   1fadc:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_write(fa, offs, boot_img_magic, BOOT_MAGIC_SZ);
   1fade:	4a12      	ldr	r2, [pc, #72]	; (1fb28 <boot_request_upgrade+0x60>)
   1fae0:	3910      	subs	r1, #16
   1fae2:	f01f fdc4 	bl	3f66e <flash_area_write>
   1fae6:	4604      	mov	r4, r0
	flash_area_close(fa);
   1fae8:	9801      	ldr	r0, [sp, #4]
   1faea:	f01f fda2 	bl	3f632 <flash_area_close>
	u8_t swap_type;
#endif
	int rc;

	rc = boot_magic_write(FLASH_AREA_IMAGE_SECONDARY);
	if (rc) {
   1faee:	b9b4      	cbnz	r4, 1fb1e <boot_request_upgrade+0x56>
		goto op_end;
	}

	if (permanent) {
   1faf0:	b1c5      	cbz	r5, 1fb24 <boot_request_upgrade+0x5c>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   1faf2:	2006      	movs	r0, #6
   1faf4:	f01f fd16 	bl	3f524 <boot_flag_write.constprop.7>
		rc = boot_image_ok_write(FLASH_AREA_IMAGE_SECONDARY);

#ifdef CONFIG_MCUBOOT_TRAILER_SWAP_TYPE
		if (rc) {
   1faf8:	4604      	mov	r4, r0
   1fafa:	b980      	cbnz	r0, 1fb1e <boot_request_upgrade+0x56>
			goto op_end;
		}

		swap_type = BOOT_SWAP_TYPE_PERM;
   1fafc:	2503      	movs	r5, #3
	rc = flash_area_open(bank_id, &fa);
   1fafe:	a901      	add	r1, sp, #4
   1fb00:	2006      	movs	r0, #6
   1fb02:	f000 f949 	bl	1fd98 <flash_area_open>
	if (rc) {
   1fb06:	4604      	mov	r4, r0
   1fb08:	b948      	cbnz	r0, 1fb1e <boot_request_upgrade+0x56>
	offs = SWAP_TYPE_OFFS(fa);
   1fb0a:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, swap_type);
   1fb0c:	462a      	mov	r2, r5
	offs = SWAP_TYPE_OFFS(fa);
   1fb0e:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, swap_type);
   1fb10:	3928      	subs	r1, #40	; 0x28
   1fb12:	f7ff ffb1 	bl	1fa78 <boot_write_trailer_byte>
   1fb16:	4604      	mov	r4, r0
	flash_area_close(fa);
   1fb18:	9801      	ldr	r0, [sp, #4]
   1fb1a:	f01f fd8a 	bl	3f632 <flash_area_close>
#else
	}
#endif
op_end:
	return rc;
}
   1fb1e:	4620      	mov	r0, r4
   1fb20:	b003      	add	sp, #12
   1fb22:	bd30      	pop	{r4, r5, pc}
		swap_type = BOOT_SWAP_TYPE_TEST;
   1fb24:	2502      	movs	r5, #2
   1fb26:	e7ea      	b.n	1fafe <boot_request_upgrade+0x36>
   1fb28:	0004337c 	.word	0x0004337c

0001fb2c <flash_progressive_erase>:
 * @param[in] off offset from the beginning of the image flash area beginning
 *
 * @return  0 on success, negative errno code on fail.
 */
static int flash_progressive_erase(struct flash_img_context *ctx, off_t off)
{
   1fb2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1fb30:	4606      	mov	r6, r0
	flash_dev = flash_area_get_device(fap);
   1fb32:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
{
   1fb36:	460c      	mov	r4, r1
	flash_dev = flash_area_get_device(fap);
   1fb38:	f01f fdef 	bl	3f71a <flash_area_get_device>
	if (flash_dev) {
   1fb3c:	b998      	cbnz	r0, 1fb66 <flash_progressive_erase+0x3a>
	int rc = -ENODEV;
   1fb3e:	f06f 0412 	mvn.w	r4, #18
	struct flash_sector sector;
	int rc;

	rc = flash_sector_from_off(ctx->flash_area, off, &sector);
	if (rc) {
		LOG_ERR("Unable to determine flash sector size");
   1fb42:	2301      	movs	r3, #1
   1fb44:	f04f 0000 	mov.w	r0, #0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   1fb48:	4a21      	ldr	r2, [pc, #132]	; (1fbd0 <flash_progressive_erase+0xa4>)
   1fb4a:	f363 0007 	bfi	r0, r3, #0, #8
   1fb4e:	4b21      	ldr	r3, [pc, #132]	; (1fbd4 <flash_progressive_erase+0xa8>)
   1fb50:	4921      	ldr	r1, [pc, #132]	; (1fbd8 <flash_progressive_erase+0xac>)
   1fb52:	1a9b      	subs	r3, r3, r2
   1fb54:	08db      	lsrs	r3, r3, #3
   1fb56:	f363 108f 	bfi	r0, r3, #6, #10
   1fb5a:	f01f fc92 	bl	3f482 <log_string_sync>
			}
		}
	}

	return rc;
}
   1fb5e:	4620      	mov	r0, r4
   1fb60:	b004      	add	sp, #16
   1fb62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   1fb66:	4621      	mov	r1, r4
   1fb68:	aa01      	add	r2, sp, #4
   1fb6a:	f020 fc86 	bl	4047a <z_impl_flash_get_page_info_by_offs>
		if (rc == 0) {
   1fb6e:	4604      	mov	r4, r0
   1fb70:	2800      	cmp	r0, #0
   1fb72:	d1e6      	bne.n	1fb42 <flash_progressive_erase+0x16>
			sector->fs_size = page.size;
   1fb74:	e9dd 7801 	ldrd	r7, r8, [sp, #4]
		if (ctx->off_last != sector.fs_off) {
   1fb78:	f8d6 320c 	ldr.w	r3, [r6, #524]	; 0x20c
   1fb7c:	42bb      	cmp	r3, r7
   1fb7e:	d0ee      	beq.n	1fb5e <flash_progressive_erase+0x32>
			LOG_INF("Erasing sector at offset 0x%08lx",
   1fb80:	2303      	movs	r3, #3
   1fb82:	f04f 0000 	mov.w	r0, #0
   1fb86:	4d13      	ldr	r5, [pc, #76]	; (1fbd4 <flash_progressive_erase+0xa8>)
   1fb88:	f363 0007 	bfi	r0, r3, #0, #8
   1fb8c:	4b10      	ldr	r3, [pc, #64]	; (1fbd0 <flash_progressive_erase+0xa4>)
   1fb8e:	463a      	mov	r2, r7
   1fb90:	1aed      	subs	r5, r5, r3
   1fb92:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   1fb96:	f365 108f 	bfi	r0, r5, #6, #10
   1fb9a:	4910      	ldr	r1, [pc, #64]	; (1fbdc <flash_progressive_erase+0xb0>)
			ctx->off_last = sector.fs_off;
   1fb9c:	f8c6 720c 	str.w	r7, [r6, #524]	; 0x20c
			LOG_INF("Erasing sector at offset 0x%08lx",
   1fba0:	f01f fc6f 	bl	3f482 <log_string_sync>
			rc = flash_area_erase(ctx->flash_area, sector.fs_off,
   1fba4:	4642      	mov	r2, r8
   1fba6:	4639      	mov	r1, r7
   1fba8:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
   1fbac:	f01f fd88 	bl	3f6c0 <flash_area_erase>
			if (rc) {
   1fbb0:	4604      	mov	r4, r0
   1fbb2:	2800      	cmp	r0, #0
   1fbb4:	d0d3      	beq.n	1fb5e <flash_progressive_erase+0x32>
				LOG_ERR("Error %d while erasing sector", rc);
   1fbb6:	2301      	movs	r3, #1
   1fbb8:	f04f 0000 	mov.w	r0, #0
   1fbbc:	f363 0007 	bfi	r0, r3, #0, #8
   1fbc0:	f365 108f 	bfi	r0, r5, #6, #10
   1fbc4:	4622      	mov	r2, r4
   1fbc6:	4906      	ldr	r1, [pc, #24]	; (1fbe0 <flash_progressive_erase+0xb4>)
   1fbc8:	f01f fc5b 	bl	3f482 <log_string_sync>
	return rc;
   1fbcc:	e7c7      	b.n	1fb5e <flash_progressive_erase+0x32>
   1fbce:	bf00      	nop
   1fbd0:	00042fb4 	.word	0x00042fb4
   1fbd4:	00043024 	.word	0x00043024
   1fbd8:	000460a1 	.word	0x000460a1
   1fbdc:	000460c7 	.word	0x000460c7
   1fbe0:	000460e8 	.word	0x000460e8

0001fbe4 <flash_sync>:

#endif /* CONFIG_IMG_ERASE_PROGRESSIVELY */

static int flash_sync(struct flash_img_context *ctx)
{
   1fbe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1fbe8:	4604      	mov	r4, r0
	int rc = 0;

	if (ctx->buf_bytes < CONFIG_IMG_BLOCK_BUF_SIZE) {
   1fbea:	f8b0 0208 	ldrh.w	r0, [r0, #520]	; 0x208
   1fbee:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1fbf2:	d205      	bcs.n	1fc00 <flash_sync+0x1c>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   1fbf4:	f5c0 7200 	rsb	r2, r0, #512	; 0x200
   1fbf8:	21ff      	movs	r1, #255	; 0xff
   1fbfa:	4420      	add	r0, r4
   1fbfc:	f021 fef9 	bl	419f2 <memset>
		(void)memset(ctx->buf + ctx->buf_bytes, 0xFF,
			     CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes);
	}

#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	rc = flash_progressive_erase(ctx, ctx->bytes_written +
   1fc00:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
   1fc04:	4620      	mov	r0, r4
   1fc06:	f501 7100 	add.w	r1, r1, #512	; 0x200
   1fc0a:	f7ff ff8f 	bl	1fb2c <flash_progressive_erase>
				     CONFIG_IMG_BLOCK_BUF_SIZE);
	if (rc) {
   1fc0e:	4605      	mov	r5, r0
   1fc10:	b1a0      	cbz	r0, 1fc3c <flash_sync+0x58>
		LOG_ERR("flash_progressive_erase error %d offset=0x%08zx", rc,
   1fc12:	2301      	movs	r3, #1
   1fc14:	f04f 0000 	mov.w	r0, #0
   1fc18:	4a3b      	ldr	r2, [pc, #236]	; (1fd08 <flash_sync+0x124>)
   1fc1a:	f363 0007 	bfi	r0, r3, #0, #8
   1fc1e:	4b3b      	ldr	r3, [pc, #236]	; (1fd0c <flash_sync+0x128>)
   1fc20:	493b      	ldr	r1, [pc, #236]	; (1fd10 <flash_sync+0x12c>)
   1fc22:	1a9b      	subs	r3, r3, r2
   1fc24:	462a      	mov	r2, r5
   1fc26:	08db      	lsrs	r3, r3, #3
   1fc28:	f363 108f 	bfi	r0, r3, #6, #10
   1fc2c:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
#endif

	rc = flash_area_write(ctx->flash_area, ctx->bytes_written, ctx->buf,
			      CONFIG_IMG_BLOCK_BUF_SIZE);
	if (rc) {
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   1fc30:	f01f fc27 	bl	3f482 <log_string_sync>

	ctx->bytes_written += ctx->buf_bytes;
	ctx->buf_bytes = 0U;

	return rc;
}
   1fc34:	4628      	mov	r0, r5
   1fc36:	b004      	add	sp, #16
   1fc38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	rc = flash_area_write(ctx->flash_area, ctx->bytes_written, ctx->buf,
   1fc3c:	f44f 7300 	mov.w	r3, #512	; 0x200
   1fc40:	e9d4 0180 	ldrd	r0, r1, [r4, #512]	; 0x200
   1fc44:	4622      	mov	r2, r4
   1fc46:	f01f fd12 	bl	3f66e <flash_area_write>
   1fc4a:	46a1      	mov	r9, r4
	if (rc) {
   1fc4c:	4605      	mov	r5, r0
   1fc4e:	b178      	cbz	r0, 1fc70 <flash_sync+0x8c>
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   1fc50:	2301      	movs	r3, #1
   1fc52:	f04f 0000 	mov.w	r0, #0
   1fc56:	4a2c      	ldr	r2, [pc, #176]	; (1fd08 <flash_sync+0x124>)
   1fc58:	f363 0007 	bfi	r0, r3, #0, #8
   1fc5c:	4b2b      	ldr	r3, [pc, #172]	; (1fd0c <flash_sync+0x128>)
   1fc5e:	492d      	ldr	r1, [pc, #180]	; (1fd14 <flash_sync+0x130>)
   1fc60:	1a9b      	subs	r3, r3, r2
   1fc62:	08db      	lsrs	r3, r3, #3
   1fc64:	f363 108f 	bfi	r0, r3, #6, #10
   1fc68:	462a      	mov	r2, r5
   1fc6a:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
   1fc6e:	e7df      	b.n	1fc30 <flash_sync+0x4c>
	if (!flash_verify(ctx->flash_area, ctx->bytes_written, ctx->buf,
   1fc70:	f44f 7700 	mov.w	r7, #512	; 0x200
   1fc74:	e9d4 a880 	ldrd	sl, r8, [r4, #512]	; 0x200
		size = (len >= sizeof(temp)) ? sizeof(temp) : len;
   1fc78:	2f04      	cmp	r7, #4
   1fc7a:	463e      	mov	r6, r7
   1fc7c:	bf28      	it	cs
   1fc7e:	2604      	movcs	r6, #4
		rc = flash_area_read(fa, offset, &temp, size);
   1fc80:	aa03      	add	r2, sp, #12
   1fc82:	4633      	mov	r3, r6
   1fc84:	4641      	mov	r1, r8
   1fc86:	4650      	mov	r0, sl
   1fc88:	f01f fcd4 	bl	3f634 <flash_area_read>
		if (rc) {
   1fc8c:	4602      	mov	r2, r0
   1fc8e:	b190      	cbz	r0, 1fcb6 <flash_sync+0xd2>
			LOG_ERR("flash_read error %d offset=0x%08lx",
   1fc90:	2301      	movs	r3, #1
   1fc92:	f04f 0000 	mov.w	r0, #0
   1fc96:	491c      	ldr	r1, [pc, #112]	; (1fd08 <flash_sync+0x124>)
   1fc98:	f363 0007 	bfi	r0, r3, #0, #8
   1fc9c:	4b1b      	ldr	r3, [pc, #108]	; (1fd0c <flash_sync+0x128>)
   1fc9e:	1a5b      	subs	r3, r3, r1
   1fca0:	08db      	lsrs	r3, r3, #3
   1fca2:	f363 108f 	bfi	r0, r3, #6, #10
   1fca6:	491c      	ldr	r1, [pc, #112]	; (1fd18 <flash_sync+0x134>)
   1fca8:	4643      	mov	r3, r8
   1fcaa:	f01f fbea 	bl	3f482 <log_string_sync>
	if (!flash_verify(ctx->flash_area, ctx->bytes_written, ctx->buf,
   1fcae:	b307      	cbz	r7, 1fcf2 <flash_sync+0x10e>
		return -EIO;
   1fcb0:	f06f 0504 	mvn.w	r5, #4
   1fcb4:	e7be      	b.n	1fc34 <flash_sync+0x50>
		if (memcmp(data, &temp, size)) {
   1fcb6:	4632      	mov	r2, r6
   1fcb8:	a903      	add	r1, sp, #12
   1fcba:	4648      	mov	r0, r9
   1fcbc:	f021 fe6b 	bl	41996 <memcmp>
   1fcc0:	b198      	cbz	r0, 1fcea <flash_sync+0x106>
			LOG_ERR("offset=0x%08lx VERIFY FAIL. "
   1fcc2:	2301      	movs	r3, #1
   1fcc4:	f04f 0000 	mov.w	r0, #0
   1fcc8:	4a0f      	ldr	r2, [pc, #60]	; (1fd08 <flash_sync+0x124>)
   1fcca:	f363 0007 	bfi	r0, r3, #0, #8
   1fcce:	4b0f      	ldr	r3, [pc, #60]	; (1fd0c <flash_sync+0x128>)
   1fcd0:	4912      	ldr	r1, [pc, #72]	; (1fd1c <flash_sync+0x138>)
   1fcd2:	1a9b      	subs	r3, r3, r2
   1fcd4:	08db      	lsrs	r3, r3, #3
   1fcd6:	f363 108f 	bfi	r0, r3, #6, #10
   1fcda:	f899 3000 	ldrb.w	r3, [r9]
   1fcde:	4642      	mov	r2, r8
   1fce0:	9300      	str	r3, [sp, #0]
   1fce2:	9b03      	ldr	r3, [sp, #12]
   1fce4:	f01f fbcd 	bl	3f482 <log_string_sync>
   1fce8:	e7e1      	b.n	1fcae <flash_sync+0xca>
	while (len) {
   1fcea:	1bbf      	subs	r7, r7, r6
		offset += size;
   1fcec:	44b0      	add	r8, r6
		data += size;
   1fcee:	44b1      	add	r9, r6
	while (len) {
   1fcf0:	d1c2      	bne.n	1fc78 <flash_sync+0x94>
	ctx->bytes_written += ctx->buf_bytes;
   1fcf2:	f8b4 2208 	ldrh.w	r2, [r4, #520]	; 0x208
   1fcf6:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
   1fcfa:	4413      	add	r3, r2
   1fcfc:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
	ctx->buf_bytes = 0U;
   1fd00:	2300      	movs	r3, #0
   1fd02:	f8a4 3208 	strh.w	r3, [r4, #520]	; 0x208
	return rc;
   1fd06:	e795      	b.n	1fc34 <flash_sync+0x50>
   1fd08:	00042fb4 	.word	0x00042fb4
   1fd0c:	00043024 	.word	0x00043024
   1fd10:	00046106 	.word	0x00046106
   1fd14:	00046136 	.word	0x00046136
   1fd18:	0004615a 	.word	0x0004615a
   1fd1c:	0004617d 	.word	0x0004617d

0001fd20 <socket_offload_register>:

/* Only one provider may register socket operations upon boot. */
const struct socket_offload *socket_ops;

void socket_offload_register(const struct socket_offload *ops)
{
   1fd20:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   1fd22:	4605      	mov	r5, r0
   1fd24:	b948      	cbnz	r0, 1fd3a <socket_offload_register+0x1a>
   1fd26:	490c      	ldr	r1, [pc, #48]	; (1fd58 <socket_offload_register+0x38>)
   1fd28:	480c      	ldr	r0, [pc, #48]	; (1fd5c <socket_offload_register+0x3c>)
   1fd2a:	2311      	movs	r3, #17
   1fd2c:	4a0c      	ldr	r2, [pc, #48]	; (1fd60 <socket_offload_register+0x40>)
   1fd2e:	f01f fb8a 	bl	3f446 <printk>
   1fd32:	2111      	movs	r1, #17
   1fd34:	480a      	ldr	r0, [pc, #40]	; (1fd60 <socket_offload_register+0x40>)
   1fd36:	f01f fb93 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops == NULL);
   1fd3a:	4c0a      	ldr	r4, [pc, #40]	; (1fd64 <socket_offload_register+0x44>)
   1fd3c:	6822      	ldr	r2, [r4, #0]
   1fd3e:	b14a      	cbz	r2, 1fd54 <socket_offload_register+0x34>
   1fd40:	4909      	ldr	r1, [pc, #36]	; (1fd68 <socket_offload_register+0x48>)
   1fd42:	4806      	ldr	r0, [pc, #24]	; (1fd5c <socket_offload_register+0x3c>)
   1fd44:	2312      	movs	r3, #18
   1fd46:	4a06      	ldr	r2, [pc, #24]	; (1fd60 <socket_offload_register+0x40>)
   1fd48:	f01f fb7d 	bl	3f446 <printk>
   1fd4c:	2112      	movs	r1, #18
   1fd4e:	4804      	ldr	r0, [pc, #16]	; (1fd60 <socket_offload_register+0x40>)
   1fd50:	f01f fb86 	bl	3f460 <assert_post_action>

	socket_ops = ops;
   1fd54:	6025      	str	r5, [r4, #0]
}
   1fd56:	bd38      	pop	{r3, r4, r5, pc}
   1fd58:	00045449 	.word	0x00045449
   1fd5c:	00045316 	.word	0x00045316
   1fd60:	000461cb 	.word	0x000461cb
   1fd64:	20023934 	.word	0x20023934
   1fd68:	000461ff 	.word	0x000461ff

0001fd6c <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   1fd6c:	4b08      	ldr	r3, [pc, #32]	; (1fd90 <get_flash_area_from_id+0x24>)
{
   1fd6e:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
   1fd70:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
   1fd72:	4b08      	ldr	r3, [pc, #32]	; (1fd94 <get_flash_area_from_id+0x28>)
   1fd74:	6819      	ldr	r1, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
   1fd76:	2300      	movs	r3, #0
   1fd78:	429d      	cmp	r5, r3
   1fd7a:	dc02      	bgt.n	1fd82 <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
   1fd7c:	2200      	movs	r2, #0
}
   1fd7e:	4610      	mov	r0, r2
   1fd80:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
   1fd82:	011c      	lsls	r4, r3, #4
   1fd84:	190a      	adds	r2, r1, r4
   1fd86:	5d0c      	ldrb	r4, [r1, r4]
   1fd88:	4284      	cmp	r4, r0
   1fd8a:	d0f8      	beq.n	1fd7e <get_flash_area_from_id+0x12>
	for (int i = 0; i < flash_map_entries; i++) {
   1fd8c:	3301      	adds	r3, #1
   1fd8e:	e7f3      	b.n	1fd78 <get_flash_area_from_id+0xc>
   1fd90:	0004341c 	.word	0x0004341c
   1fd94:	20031c04 	.word	0x20031c04

0001fd98 <flash_area_open>:

int flash_area_open(u8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   1fd98:	4b08      	ldr	r3, [pc, #32]	; (1fdbc <flash_area_open+0x24>)
{
   1fd9a:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
   1fd9c:	681b      	ldr	r3, [r3, #0]
{
   1fd9e:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   1fda0:	b12b      	cbz	r3, 1fdae <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   1fda2:	f7ff ffe3 	bl	1fd6c <get_flash_area_from_id>
	if (area == NULL) {
   1fda6:	b128      	cbz	r0, 1fdb4 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
   1fda8:	6020      	str	r0, [r4, #0]
	return 0;
   1fdaa:	2000      	movs	r0, #0
}
   1fdac:	bd10      	pop	{r4, pc}
		return -EACCES;
   1fdae:	f06f 000c 	mvn.w	r0, #12
   1fdb2:	e7fb      	b.n	1fdac <flash_area_open+0x14>
		return -ENOENT;
   1fdb4:	f06f 0001 	mvn.w	r0, #1
   1fdb8:	e7f8      	b.n	1fdac <flash_area_open+0x14>
   1fdba:	bf00      	nop
   1fdbc:	20031c04 	.word	0x20031c04

0001fdc0 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   1fdc0:	b508      	push	{r3, lr}
   1fdc2:	4604      	mov	r4, r0
	__asm__ volatile(
   1fdc4:	f04f 0220 	mov.w	r2, #32
   1fdc8:	f3ef 8311 	mrs	r3, BASEPRI
   1fdcc:	f382 8811 	msr	BASEPRI, r2
   1fdd0:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   1fdd4:	f01f fd11 	bl	3f7fa <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   1fdd8:	4620      	mov	r0, r4
   1fdda:	f000 fffd 	bl	20dd8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   1fdde:	4803      	ldr	r0, [pc, #12]	; (1fdec <sys_reboot+0x2c>)
   1fde0:	f01f fb31 	bl	3f446 <printk>
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1fde4:	f000 fc10 	bl	20608 <arch_cpu_idle>
   1fde8:	e7fc      	b.n	1fde4 <sys_reboot+0x24>
   1fdea:	bf00      	nop
   1fdec:	00046232 	.word	0x00046232

0001fdf0 <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   1fdf0:	4b0a      	ldr	r3, [pc, #40]	; (1fe1c <console_out+0x2c>)
{
   1fdf2:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   1fdf4:	b2c6      	uxtb	r6, r0
{
   1fdf6:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   1fdf8:	681b      	ldr	r3, [r3, #0]
   1fdfa:	4630      	mov	r0, r6
   1fdfc:	4798      	blx	r3

	if (handled_by_debug_server) {
   1fdfe:	2801      	cmp	r0, #1
   1fe00:	d00a      	beq.n	1fe18 <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   1fe02:	2c0a      	cmp	r4, #10
   1fe04:	4d06      	ldr	r5, [pc, #24]	; (1fe20 <console_out+0x30>)
   1fe06:	d103      	bne.n	1fe10 <console_out+0x20>
		uart_poll_out(uart_console_dev, '\r');
   1fe08:	210d      	movs	r1, #13
   1fe0a:	6828      	ldr	r0, [r5, #0]
   1fe0c:	f01f fc88 	bl	3f720 <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
   1fe10:	4631      	mov	r1, r6
   1fe12:	6828      	ldr	r0, [r5, #0]
   1fe14:	f01f fc84 	bl	3f720 <uart_poll_out>

	return c;
}
   1fe18:	4620      	mov	r0, r4
   1fe1a:	bd70      	pop	{r4, r5, r6, pc}
   1fe1c:	20031c08 	.word	0x20031c08
   1fe20:	20023938 	.word	0x20023938

0001fe24 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
   1fe24:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
   1fe26:	4c04      	ldr	r4, [pc, #16]	; (1fe38 <uart_console_hook_install+0x14>)
   1fe28:	4620      	mov	r0, r4
   1fe2a:	f001 fac1 	bl	213b0 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1fe2e:	4620      	mov	r0, r4
}
   1fe30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
   1fe34:	f7ff bae6 	b.w	1f404 <__printk_hook_install>
   1fe38:	0001fdf1 	.word	0x0001fdf1

0001fe3c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
   1fe3c:	b508      	push	{r3, lr}
   1fe3e:	4804      	ldr	r0, [pc, #16]	; (1fe50 <uart_console_init+0x14>)
   1fe40:	f018 ffba 	bl	38db8 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   1fe44:	4b03      	ldr	r3, [pc, #12]	; (1fe54 <uart_console_init+0x18>)
   1fe46:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
   1fe48:	f7ff ffec 	bl	1fe24 <uart_console_hook_install>

	return 0;
}
   1fe4c:	2000      	movs	r0, #0
   1fe4e:	bd08      	pop	{r3, pc}
   1fe50:	00046005 	.word	0x00046005
   1fe54:	20023938 	.word	0x20023938

0001fe58 <hfclk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int hfclk_init(struct device *dev)
{
   1fe58:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   1fe5a:	2200      	movs	r2, #0
{
   1fe5c:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   1fe5e:	2101      	movs	r1, #1
   1fe60:	2005      	movs	r0, #5
   1fe62:	f000 fb0d 	bl	20480 <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
   1fe66:	2005      	movs	r0, #5
   1fe68:	f000 fafa 	bl	20460 <arch_irq_enable>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   1fe6c:	2202      	movs	r2, #2
   1fe6e:	4b05      	ldr	r3, [pc, #20]	; (1fe84 <hfclk_init+0x2c>)
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   1fe70:	2000      	movs	r0, #0
   1fe72:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   1fe76:	2203      	movs	r2, #3
   1fe78:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			(NRF_POWER_INT_USBDETECTED_MASK |
			 NRF_POWER_INT_USBREMOVED_MASK |
			 NRF_POWER_INT_USBPWRRDY_MASK),
			(0))));

	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
   1fe7c:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
   1fe7e:	e9c3 0000 	strd	r0, r0, [r3]

	return 0;
}
   1fe82:	bd10      	pop	{r4, pc}
   1fe84:	40005000 	.word	0x40005000

0001fe88 <clock_async_start>:
{
   1fe88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
   1fe8a:	6803      	ldr	r3, [r0, #0]
{
   1fe8c:	4606      	mov	r6, r0
	const struct nrf_clock_control_config *config =
   1fe8e:	689f      	ldr	r7, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
   1fe90:	6885      	ldr	r5, [r0, #8]
	__ASSERT_NO_MSG((data == NULL) ||
   1fe92:	4614      	mov	r4, r2
   1fe94:	b15a      	cbz	r2, 1feae <clock_async_start+0x26>
   1fe96:	6853      	ldr	r3, [r2, #4]
   1fe98:	b94b      	cbnz	r3, 1feae <clock_async_start+0x26>
   1fe9a:	4927      	ldr	r1, [pc, #156]	; (1ff38 <clock_async_start+0xb0>)
   1fe9c:	4827      	ldr	r0, [pc, #156]	; (1ff3c <clock_async_start+0xb4>)
   1fe9e:	2392      	movs	r3, #146	; 0x92
   1fea0:	4a27      	ldr	r2, [pc, #156]	; (1ff40 <clock_async_start+0xb8>)
   1fea2:	f01f fad0 	bl	3f446 <printk>
   1fea6:	2192      	movs	r1, #146	; 0x92
   1fea8:	4825      	ldr	r0, [pc, #148]	; (1ff40 <clock_async_start+0xb8>)
   1feaa:	f01f fad9 	bl	3f460 <assert_post_action>
   1feae:	f04f 0320 	mov.w	r3, #32
   1feb2:	f3ef 8211 	mrs	r2, BASEPRI
   1feb6:	f383 8811 	msr	BASEPRI, r3
   1feba:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   1febe:	7a2b      	ldrb	r3, [r5, #8]
   1fec0:	3301      	adds	r3, #1
   1fec2:	b25b      	sxtb	r3, r3
   1fec4:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
   1fec6:	f382 8811 	msr	BASEPRI, r2
   1feca:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
   1fece:	7a6a      	ldrb	r2, [r5, #9]
   1fed0:	b13a      	cbz	r2, 1fee2 <clock_async_start+0x5a>
		if (data) {
   1fed2:	b90c      	cbnz	r4, 1fed8 <clock_async_start+0x50>
	return 0;
   1fed4:	2000      	movs	r0, #0
}
   1fed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
   1fed8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1fedc:	4630      	mov	r0, r6
   1fede:	4798      	blx	r3
   1fee0:	e7f8      	b.n	1fed4 <clock_async_start+0x4c>
		if (ref == 1) {
   1fee2:	2b01      	cmp	r3, #1
   1fee4:	d108      	bne.n	1fef8 <clock_async_start+0x70>
			do_start =  (config->start_handler) ?
   1fee6:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
   1fee8:	b943      	cbnz	r3, 1fefc <clock_async_start+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1feea:	2201      	movs	r2, #1
   1feec:	7abb      	ldrb	r3, [r7, #10]
   1feee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1fef2:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1fef6:	601a      	str	r2, [r3, #0]
		if (data) {
   1fef8:	b954      	cbnz	r4, 1ff10 <clock_async_start+0x88>
   1fefa:	e7eb      	b.n	1fed4 <clock_async_start+0x4c>
					config->start_handler(dev) : true;
   1fefc:	4630      	mov	r0, r6
   1fefe:	4798      	blx	r3
   1ff00:	2800      	cmp	r0, #0
   1ff02:	d1f2      	bne.n	1feea <clock_async_start+0x62>
			} else if (data) {
   1ff04:	2c00      	cmp	r4, #0
   1ff06:	d0e5      	beq.n	1fed4 <clock_async_start+0x4c>
				data->cb(dev, data->user_data);
   1ff08:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1ff0c:	4630      	mov	r0, r6
   1ff0e:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
   1ff10:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
   1ff12:	429c      	cmp	r4, r3
   1ff14:	d00d      	beq.n	1ff32 <clock_async_start+0xaa>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   1ff16:	b113      	cbz	r3, 1ff1e <clock_async_start+0x96>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ff18:	681b      	ldr	r3, [r3, #0]
	} while (item);
   1ff1a:	2b00      	cmp	r3, #0
   1ff1c:	d1f9      	bne.n	1ff12 <clock_async_start+0x8a>
	parent->next = child;
   1ff1e:	2000      	movs	r0, #0
   1ff20:	6020      	str	r0, [r4, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1ff22:	686b      	ldr	r3, [r5, #4]
   1ff24:	b913      	cbnz	r3, 1ff2c <clock_async_start+0xa4>
	list->head = node;
   1ff26:	e9c5 4400 	strd	r4, r4, [r5]
   1ff2a:	e7d3      	b.n	1fed4 <clock_async_start+0x4c>
	parent->next = child;
   1ff2c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ff2e:	606c      	str	r4, [r5, #4]
   1ff30:	e7d1      	b.n	1fed6 <clock_async_start+0x4e>
				return -EALREADY;
   1ff32:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1ff36:	e7ce      	b.n	1fed6 <clock_async_start+0x4e>
   1ff38:	0004628f 	.word	0x0004628f
   1ff3c:	00045316 	.word	0x00045316
   1ff40:	0004625b 	.word	0x0004625b

0001ff44 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
   1ff44:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1ff46:	4b10      	ldr	r3, [pc, #64]	; (1ff88 <nrf_power_clock_isr+0x44>)
   1ff48:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   1ff4a:	b162      	cbz	r2, 1ff66 <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
   1ff4c:	4a0f      	ldr	r2, [pc, #60]	; (1ff8c <nrf_power_clock_isr+0x48>)
   1ff4e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   1ff52:	07d1      	lsls	r1, r2, #31
   1ff54:	d507      	bpl.n	1ff66 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ff56:	2200      	movs	r2, #0
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
   1ff58:	480d      	ldr	r0, [pc, #52]	; (1ff90 <nrf_power_clock_isr+0x4c>)
   1ff5a:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
   1ff5c:	6883      	ldr	r3, [r0, #8]
   1ff5e:	7a5b      	ldrb	r3, [r3, #9]
   1ff60:	b90b      	cbnz	r3, 1ff66 <nrf_power_clock_isr+0x22>
			clkstarted_handle(hfclk_dev);
   1ff62:	f01f fc2c 	bl	3f7be <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1ff66:	4b0b      	ldr	r3, [pc, #44]	; (1ff94 <nrf_power_clock_isr+0x50>)
   1ff68:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   1ff6a:	b15a      	cbz	r2, 1ff84 <nrf_power_clock_isr+0x40>
    return p_reg->INTENSET & mask;
   1ff6c:	4a07      	ldr	r2, [pc, #28]	; (1ff8c <nrf_power_clock_isr+0x48>)
   1ff6e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   1ff72:	0792      	lsls	r2, r2, #30
   1ff74:	d506      	bpl.n	1ff84 <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ff76:	2200      	movs	r2, #0

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
   1ff78:	4807      	ldr	r0, [pc, #28]	; (1ff98 <nrf_power_clock_isr+0x54>)
   1ff7a:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
   1ff7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(lfclk_dev);
   1ff80:	f01f bc1d 	b.w	3f7be <clkstarted_handle>
}
   1ff84:	bd08      	pop	{r3, pc}
   1ff86:	bf00      	nop
   1ff88:	40005100 	.word	0x40005100
   1ff8c:	40005000 	.word	0x40005000
   1ff90:	20031e98 	.word	0x20031e98
   1ff94:	40005104 	.word	0x40005104
   1ff98:	20031ea4 	.word	0x20031ea4

0001ff9c <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
   1ff9c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   1ff9e:	4c06      	ldr	r4, [pc, #24]	; (1ffb8 <z_clock_isr+0x1c>)
   1ffa0:	4906      	ldr	r1, [pc, #24]	; (1ffbc <z_clock_isr+0x20>)
   1ffa2:	4622      	mov	r2, r4
   1ffa4:	4806      	ldr	r0, [pc, #24]	; (1ffc0 <z_clock_isr+0x24>)
   1ffa6:	2317      	movs	r3, #23
   1ffa8:	f01f fa4d 	bl	3f446 <printk>
   1ffac:	4620      	mov	r0, r4
}
   1ffae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   1ffb2:	2117      	movs	r1, #23
   1ffb4:	f01f ba54 	b.w	3f460 <assert_post_action>
   1ffb8:	00046309 	.word	0x00046309
   1ffbc:	0004a2c3 	.word	0x0004a2c3
   1ffc0:	00045316 	.word	0x00045316

0001ffc4 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
   1ffc4:	2200      	movs	r2, #0
{
   1ffc6:	b538      	push	{r3, r4, r5, lr}
	RTC->EVENTS_COMPARE[0] = 0;
   1ffc8:	4b21      	ldr	r3, [pc, #132]	; (20050 <__kernel_ram_size+0x50>)
   1ffca:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
   1ffce:	f04f 0320 	mov.w	r3, #32
   1ffd2:	f3ef 8511 	mrs	r5, BASEPRI
   1ffd6:	f383 8811 	msr	BASEPRI, r3
   1ffda:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1ffde:	481d      	ldr	r0, [pc, #116]	; (20054 <__kernel_ram_size+0x54>)
   1ffe0:	f01b f850 	bl	3b084 <z_spin_lock_valid>
   1ffe4:	b960      	cbnz	r0, 20000 <__kernel_ram_size>
   1ffe6:	491c      	ldr	r1, [pc, #112]	; (20058 <__kernel_ram_size+0x58>)
   1ffe8:	234f      	movs	r3, #79	; 0x4f
   1ffea:	4a1c      	ldr	r2, [pc, #112]	; (2005c <__kernel_ram_size+0x5c>)
   1ffec:	481c      	ldr	r0, [pc, #112]	; (20060 <__kernel_ram_size+0x60>)
   1ffee:	f01f fa2a 	bl	3f446 <printk>
   1fff2:	481c      	ldr	r0, [pc, #112]	; (20064 <__kernel_ram_size+0x64>)
   1fff4:	f01f fa27 	bl	3f446 <printk>
   1fff8:	214f      	movs	r1, #79	; 0x4f
   1fffa:	4818      	ldr	r0, [pc, #96]	; (2005c <__kernel_ram_size+0x5c>)
   1fffc:	f01f fa30 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   20000:	4814      	ldr	r0, [pc, #80]	; (20054 <__kernel_ram_size+0x54>)
   20002:	f01b f85d 	bl	3b0c0 <z_spin_lock_set_owner>
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   20006:	4b12      	ldr	r3, [pc, #72]	; (20050 <__kernel_ram_size+0x50>)

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   20008:	4a17      	ldr	r2, [pc, #92]	; (20068 <__kernel_ram_size+0x68>)
   2000a:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
   2000e:	6813      	ldr	r3, [r2, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   20010:	4810      	ldr	r0, [pc, #64]	; (20054 <__kernel_ram_size+0x54>)
	return (a - b) & COUNTER_MAX;
   20012:	1ae4      	subs	r4, r4, r3
   20014:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   20018:	4423      	add	r3, r4
   2001a:	6013      	str	r3, [r2, #0]
   2001c:	f01b f840 	bl	3b0a0 <z_spin_unlock_valid>
   20020:	b960      	cbnz	r0, 2003c <__kernel_ram_size+0x3c>
   20022:	4912      	ldr	r1, [pc, #72]	; (2006c <__kernel_ram_size+0x6c>)
   20024:	2362      	movs	r3, #98	; 0x62
   20026:	4a0d      	ldr	r2, [pc, #52]	; (2005c <__kernel_ram_size+0x5c>)
   20028:	480d      	ldr	r0, [pc, #52]	; (20060 <__kernel_ram_size+0x60>)
   2002a:	f01f fa0c 	bl	3f446 <printk>
   2002e:	4810      	ldr	r0, [pc, #64]	; (20070 <__kernel_ram_size+0x70>)
   20030:	f01f fa09 	bl	3f446 <printk>
   20034:	2162      	movs	r1, #98	; 0x62
   20036:	4809      	ldr	r0, [pc, #36]	; (2005c <__kernel_ram_size+0x5c>)
   20038:	f01f fa12 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   2003c:	f385 8811 	msr	BASEPRI, r5
   20040:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   20044:	4620      	mov	r0, r4
}
   20046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   2004a:	f01b bd65 	b.w	3bb18 <z_clock_announce>
   2004e:	bf00      	nop
   20050:	40015000 	.word	0x40015000
   20054:	20023958 	.word	0x20023958
   20058:	00045d2d 	.word	0x00045d2d
   2005c:	00045d0e 	.word	0x00045d0e
   20060:	00045316 	.word	0x00045316
   20064:	00045d42 	.word	0x00045d42
   20068:	20023954 	.word	0x20023954
   2006c:	00045d57 	.word	0x00045d57
   20070:	00045d6e 	.word	0x00045d6e

00020074 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
   20074:	b570      	push	{r4, r5, r6, lr}
   20076:	4818      	ldr	r0, [pc, #96]	; (200d8 <z_clock_driver_init+0x64>)
   20078:	f018 fe9e 	bl	38db8 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
   2007c:	b348      	cbz	r0, 200d2 <z_clock_driver_init+0x5e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
   2007e:	6843      	ldr	r3, [r0, #4]
   20080:	2100      	movs	r1, #0
   20082:	681b      	ldr	r3, [r3, #0]
   20084:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
   20086:	2601      	movs	r6, #1
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   20088:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
   2008a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2008e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
   20092:	4d12      	ldr	r5, [pc, #72]	; (200dc <z_clock_driver_init+0x68>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
   20094:	4631      	mov	r1, r6
   20096:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
   2009a:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
   2009e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   200a2:	4b0f      	ldr	r3, [pc, #60]	; (200e0 <z_clock_driver_init+0x6c>)
   200a4:	2015      	movs	r0, #21
   200a6:	601c      	str	r4, [r3, #0]
   200a8:	4b0e      	ldr	r3, [pc, #56]	; (200e4 <z_clock_driver_init+0x70>)
   200aa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   200ae:	4622      	mov	r2, r4
   200b0:	f000 f9e6 	bl	20480 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
   200b4:	2015      	movs	r0, #21
   200b6:	f000 f9d3 	bl	20460 <arch_irq_enable>

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
   200ba:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   200bc:	4b0a      	ldr	r3, [pc, #40]	; (200e8 <z_clock_driver_init+0x74>)
   200be:	601e      	str	r6, [r3, #0]
   200c0:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
   200c2:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
   200c6:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   200c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   200cc:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
   200d0:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   200d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   200d6:	e7fb      	b.n	200d0 <z_clock_driver_init+0x5c>
   200d8:	000462dd 	.word	0x000462dd
   200dc:	40015000 	.word	0x40015000
   200e0:	40015140 	.word	0x40015140
   200e4:	e000e100 	.word	0xe000e100
   200e8:	40015008 	.word	0x40015008

000200ec <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
   200ec:	b538      	push	{r3, r4, r5, lr}
   200ee:	4b34      	ldr	r3, [pc, #208]	; (201c0 <z_clock_set_timeout+0xd4>)
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
   200f0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   200f4:	bf08      	it	eq
   200f6:	4618      	moveq	r0, r3
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
   200f8:	1e44      	subs	r4, r0, #1
   200fa:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   200fe:	429c      	cmp	r4, r3
   20100:	bfa8      	it	ge
   20102:	461c      	movge	r4, r3
	__asm__ volatile(
   20104:	f04f 0320 	mov.w	r3, #32
   20108:	f3ef 8511 	mrs	r5, BASEPRI
   2010c:	f383 8811 	msr	BASEPRI, r3
   20110:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   20114:	482b      	ldr	r0, [pc, #172]	; (201c4 <z_clock_set_timeout+0xd8>)
   20116:	f01a ffb5 	bl	3b084 <z_spin_lock_valid>
   2011a:	b960      	cbnz	r0, 20136 <z_clock_set_timeout+0x4a>
   2011c:	492a      	ldr	r1, [pc, #168]	; (201c8 <z_clock_set_timeout+0xdc>)
   2011e:	234f      	movs	r3, #79	; 0x4f
   20120:	4a2a      	ldr	r2, [pc, #168]	; (201cc <z_clock_set_timeout+0xe0>)
   20122:	482b      	ldr	r0, [pc, #172]	; (201d0 <z_clock_set_timeout+0xe4>)
   20124:	f01f f98f 	bl	3f446 <printk>
   20128:	482a      	ldr	r0, [pc, #168]	; (201d4 <z_clock_set_timeout+0xe8>)
   2012a:	f01f f98c 	bl	3f446 <printk>
   2012e:	214f      	movs	r1, #79	; 0x4f
   20130:	4826      	ldr	r0, [pc, #152]	; (201cc <z_clock_set_timeout+0xe0>)
   20132:	f01f f995 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   20136:	4823      	ldr	r0, [pc, #140]	; (201c4 <z_clock_set_timeout+0xd8>)
   20138:	f01a ffc2 	bl	3b0c0 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   2013c:	4a26      	ldr	r2, [pc, #152]	; (201d8 <z_clock_set_timeout+0xec>)
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	bool zli_fixup = IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS);

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
   2013e:	4927      	ldr	r1, [pc, #156]	; (201dc <z_clock_set_timeout+0xf0>)
   20140:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
   20144:	6809      	ldr	r1, [r1, #0]
	return (a - b) & COUNTER_MAX;
   20146:	1a58      	subs	r0, r3, r1
   20148:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	cyc += (CYC_PER_TICK - 1);
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
	cyc += last_count;
   2014c:	3101      	adds	r1, #1
   2014e:	4408      	add	r0, r1
   20150:	4420      	add	r0, r4
	return (a - b) & COUNTER_MAX;
   20152:	1ac3      	subs	r3, r0, r3
   20154:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   20158:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
   2015c:	2b02      	cmp	r3, #2
    p_reg->CC[ch] = cc_val;
   2015e:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
   20162:	d915      	bls.n	20190 <z_clock_set_timeout+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   20164:	4817      	ldr	r0, [pc, #92]	; (201c4 <z_clock_set_timeout+0xd8>)
   20166:	f01a ff9b 	bl	3b0a0 <z_spin_unlock_valid>
   2016a:	b960      	cbnz	r0, 20186 <z_clock_set_timeout+0x9a>
   2016c:	491c      	ldr	r1, [pc, #112]	; (201e0 <z_clock_set_timeout+0xf4>)
   2016e:	2362      	movs	r3, #98	; 0x62
   20170:	4a16      	ldr	r2, [pc, #88]	; (201cc <z_clock_set_timeout+0xe0>)
   20172:	4817      	ldr	r0, [pc, #92]	; (201d0 <z_clock_set_timeout+0xe4>)
   20174:	f01f f967 	bl	3f446 <printk>
   20178:	481a      	ldr	r0, [pc, #104]	; (201e4 <z_clock_set_timeout+0xf8>)
   2017a:	f01f f964 	bl	3f446 <printk>
   2017e:	2162      	movs	r1, #98	; 0x62
   20180:	4812      	ldr	r0, [pc, #72]	; (201cc <z_clock_set_timeout+0xe0>)
   20182:	f01f f96d 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   20186:	f385 8811 	msr	BASEPRI, r5
   2018a:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
   2018e:	bd38      	pop	{r3, r4, r5, pc}
     return p_reg->COUNTER;
   20190:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
   20194:	4914      	ldr	r1, [pc, #80]	; (201e8 <z_clock_set_timeout+0xfc>)
	return (a - b) & COUNTER_MAX;
   20196:	1ac3      	subs	r3, r0, r3
   20198:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
   2019c:	1e5c      	subs	r4, r3, #1
   2019e:	428c      	cmp	r4, r1
   201a0:	d905      	bls.n	201ae <z_clock_set_timeout+0xc2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   201a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   201a6:	4b11      	ldr	r3, [pc, #68]	; (201ec <z_clock_set_timeout+0x100>)
   201a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   201ac:	e7da      	b.n	20164 <z_clock_set_timeout+0x78>
		} else if (dt == 1) {
   201ae:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
   201b0:	bf02      	ittt	eq
   201b2:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   201b4:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   201b8:	f8c2 0540 	streq.w	r0, [r2, #1344]	; 0x540
   201bc:	e7d2      	b.n	20164 <z_clock_set_timeout+0x78>
   201be:	bf00      	nop
   201c0:	00fffffe 	.word	0x00fffffe
   201c4:	20023958 	.word	0x20023958
   201c8:	00045d2d 	.word	0x00045d2d
   201cc:	00045d0e 	.word	0x00045d0e
   201d0:	00045316 	.word	0x00045316
   201d4:	00045d42 	.word	0x00045d42
   201d8:	40015000 	.word	0x40015000
   201dc:	20023954 	.word	0x20023954
   201e0:	00045d57 	.word	0x00045d57
   201e4:	00045d6e 	.word	0x00045d6e
   201e8:	007ffffe 	.word	0x007ffffe
   201ec:	e000e100 	.word	0xe000e100

000201f0 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
   201f0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   201f2:	f04f 0320 	mov.w	r3, #32
   201f6:	f3ef 8511 	mrs	r5, BASEPRI
   201fa:	f383 8811 	msr	BASEPRI, r3
   201fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   20202:	4819      	ldr	r0, [pc, #100]	; (20268 <z_clock_elapsed+0x78>)
   20204:	f01a ff3e 	bl	3b084 <z_spin_lock_valid>
   20208:	b960      	cbnz	r0, 20224 <z_clock_elapsed+0x34>
   2020a:	4918      	ldr	r1, [pc, #96]	; (2026c <z_clock_elapsed+0x7c>)
   2020c:	234f      	movs	r3, #79	; 0x4f
   2020e:	4a18      	ldr	r2, [pc, #96]	; (20270 <z_clock_elapsed+0x80>)
   20210:	4818      	ldr	r0, [pc, #96]	; (20274 <z_clock_elapsed+0x84>)
   20212:	f01f f918 	bl	3f446 <printk>
   20216:	4818      	ldr	r0, [pc, #96]	; (20278 <z_clock_elapsed+0x88>)
   20218:	f01f f915 	bl	3f446 <printk>
   2021c:	214f      	movs	r1, #79	; 0x4f
   2021e:	4814      	ldr	r0, [pc, #80]	; (20270 <z_clock_elapsed+0x80>)
   20220:	f01f f91e 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   20224:	4810      	ldr	r0, [pc, #64]	; (20268 <z_clock_elapsed+0x78>)
   20226:	f01a ff4b 	bl	3b0c0 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   2022a:	4b14      	ldr	r3, [pc, #80]	; (2027c <z_clock_elapsed+0x8c>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   2022c:	480e      	ldr	r0, [pc, #56]	; (20268 <z_clock_elapsed+0x78>)
   2022e:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   20232:	4b13      	ldr	r3, [pc, #76]	; (20280 <z_clock_elapsed+0x90>)
	return (a - b) & COUNTER_MAX;
   20234:	681b      	ldr	r3, [r3, #0]
   20236:	1ae4      	subs	r4, r4, r3
   20238:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   2023c:	f01a ff30 	bl	3b0a0 <z_spin_unlock_valid>
   20240:	b960      	cbnz	r0, 2025c <z_clock_elapsed+0x6c>
   20242:	4910      	ldr	r1, [pc, #64]	; (20284 <z_clock_elapsed+0x94>)
   20244:	2362      	movs	r3, #98	; 0x62
   20246:	4a0a      	ldr	r2, [pc, #40]	; (20270 <z_clock_elapsed+0x80>)
   20248:	480a      	ldr	r0, [pc, #40]	; (20274 <z_clock_elapsed+0x84>)
   2024a:	f01f f8fc 	bl	3f446 <printk>
   2024e:	480e      	ldr	r0, [pc, #56]	; (20288 <z_clock_elapsed+0x98>)
   20250:	f01f f8f9 	bl	3f446 <printk>
   20254:	2162      	movs	r1, #98	; 0x62
   20256:	4806      	ldr	r0, [pc, #24]	; (20270 <z_clock_elapsed+0x80>)
   20258:	f01f f902 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   2025c:	f385 8811 	msr	BASEPRI, r5
   20260:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   20264:	4620      	mov	r0, r4
   20266:	bd38      	pop	{r3, r4, r5, pc}
   20268:	20023958 	.word	0x20023958
   2026c:	00045d2d 	.word	0x00045d2d
   20270:	00045d0e 	.word	0x00045d0e
   20274:	00045316 	.word	0x00045316
   20278:	00045d42 	.word	0x00045d42
   2027c:	40015000 	.word	0x40015000
   20280:	20023954 	.word	0x20023954
   20284:	00045d57 	.word	0x00045d57
   20288:	00045d6e 	.word	0x00045d6e

0002028c <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
   2028c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2028e:	f04f 0320 	mov.w	r3, #32
   20292:	f3ef 8511 	mrs	r5, BASEPRI
   20296:	f383 8811 	msr	BASEPRI, r3
   2029a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2029e:	481a      	ldr	r0, [pc, #104]	; (20308 <z_timer_cycle_get_32+0x7c>)
   202a0:	f01a fef0 	bl	3b084 <z_spin_lock_valid>
   202a4:	b960      	cbnz	r0, 202c0 <z_timer_cycle_get_32+0x34>
   202a6:	4919      	ldr	r1, [pc, #100]	; (2030c <z_timer_cycle_get_32+0x80>)
   202a8:	234f      	movs	r3, #79	; 0x4f
   202aa:	4a19      	ldr	r2, [pc, #100]	; (20310 <z_timer_cycle_get_32+0x84>)
   202ac:	4819      	ldr	r0, [pc, #100]	; (20314 <z_timer_cycle_get_32+0x88>)
   202ae:	f01f f8ca 	bl	3f446 <printk>
   202b2:	4819      	ldr	r0, [pc, #100]	; (20318 <z_timer_cycle_get_32+0x8c>)
   202b4:	f01f f8c7 	bl	3f446 <printk>
   202b8:	214f      	movs	r1, #79	; 0x4f
   202ba:	4815      	ldr	r0, [pc, #84]	; (20310 <z_timer_cycle_get_32+0x84>)
   202bc:	f01f f8d0 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   202c0:	4811      	ldr	r0, [pc, #68]	; (20308 <z_timer_cycle_get_32+0x7c>)
   202c2:	f01a fefd 	bl	3b0c0 <z_spin_lock_set_owner>
   202c6:	4b15      	ldr	r3, [pc, #84]	; (2031c <z_timer_cycle_get_32+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   202c8:	480f      	ldr	r0, [pc, #60]	; (20308 <z_timer_cycle_get_32+0x7c>)
   202ca:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   202ce:	4b14      	ldr	r3, [pc, #80]	; (20320 <z_timer_cycle_get_32+0x94>)
   202d0:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   202d2:	1ae4      	subs	r4, r4, r3
   202d4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   202d8:	441c      	add	r4, r3
   202da:	f01a fee1 	bl	3b0a0 <z_spin_unlock_valid>
   202de:	b960      	cbnz	r0, 202fa <z_timer_cycle_get_32+0x6e>
   202e0:	4910      	ldr	r1, [pc, #64]	; (20324 <z_timer_cycle_get_32+0x98>)
   202e2:	2362      	movs	r3, #98	; 0x62
   202e4:	4a0a      	ldr	r2, [pc, #40]	; (20310 <z_timer_cycle_get_32+0x84>)
   202e6:	480b      	ldr	r0, [pc, #44]	; (20314 <z_timer_cycle_get_32+0x88>)
   202e8:	f01f f8ad 	bl	3f446 <printk>
   202ec:	480e      	ldr	r0, [pc, #56]	; (20328 <z_timer_cycle_get_32+0x9c>)
   202ee:	f01f f8aa 	bl	3f446 <printk>
   202f2:	2162      	movs	r1, #98	; 0x62
   202f4:	4806      	ldr	r0, [pc, #24]	; (20310 <z_timer_cycle_get_32+0x84>)
   202f6:	f01f f8b3 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   202fa:	f385 8811 	msr	BASEPRI, r5
   202fe:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   20302:	4620      	mov	r0, r4
   20304:	bd38      	pop	{r3, r4, r5, pc}
   20306:	bf00      	nop
   20308:	20023958 	.word	0x20023958
   2030c:	00045d2d 	.word	0x00045d2d
   20310:	00045d0e 	.word	0x00045d0e
   20314:	00045316 	.word	0x00045316
   20318:	00045d42 	.word	0x00045d42
   2031c:	40015000 	.word	0x40015000
   20320:	20023954 	.word	0x20023954
   20324:	00045d57 	.word	0x00045d57
   20328:	00045d6e 	.word	0x00045d6e

0002032c <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   2032c:	4804      	ldr	r0, [pc, #16]	; (20340 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   2032e:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
   20330:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
   20332:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   20334:	d003      	beq.n	2033e <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   20336:	4903      	ldr	r1, [pc, #12]	; (20344 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   20338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   2033c:	600a      	str	r2, [r1, #0]

0002033e <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
   2033e:	4770      	bx	lr
    ldr r0, =_kernel
   20340:	2002a1d8 	.word	0x2002a1d8
    ldr r1, =_SCS_ICSR
   20344:	e000ed04 	.word	0xe000ed04

00020348 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
   20348:	4a09      	ldr	r2, [pc, #36]	; (20370 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   2034a:	490a      	ldr	r1, [pc, #40]	; (20374 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   2034c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   2034e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   20350:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
   20352:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   20354:	4908      	ldr	r1, [pc, #32]	; (20378 <arch_swap+0x30>)
   20356:	684b      	ldr	r3, [r1, #4]
   20358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2035c:	604b      	str	r3, [r1, #4]
   2035e:	2300      	movs	r3, #0
   20360:	f383 8811 	msr	BASEPRI, r3
   20364:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   20368:	6893      	ldr	r3, [r2, #8]
}
   2036a:	6e98      	ldr	r0, [r3, #104]	; 0x68
   2036c:	4770      	bx	lr
   2036e:	bf00      	nop
   20370:	2002a1d8 	.word	0x2002a1d8
   20374:	00044b9c 	.word	0x00044b9c
   20378:	e000ed00 	.word	0xe000ed00

0002037c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   2037c:	492e      	ldr	r1, [pc, #184]	; (20438 <in_fp_endif+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   2037e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   20380:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
   20384:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   20386:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   2038a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   2038e:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   20392:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   20396:	d004      	beq.n	203a2 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   20398:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   2039c:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   203a0:	e007      	b.n	203b2 <out_fp_endif>

000203a2 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   203a2:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
   203a6:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   203aa:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   203ae:	f050 0004 	orrs.w	r0, r0, #4

000203b2 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   203b2:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   203b6:	2020      	movs	r0, #32
    msr BASEPRI, r0
   203b8:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   203bc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   203c0:	4f1e      	ldr	r7, [pc, #120]	; (2043c <in_fp_endif+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   203c2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   203c6:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   203c8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   203ca:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   203cc:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
   203ce:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   203d0:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   203d2:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   203d6:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   203da:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   203de:	d105      	bne.n	203ec <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   203e0:	2300      	movs	r3, #0
    vmsr fpscr, r3
   203e2:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   203e6:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   203ea:	e005      	b.n	203f8 <in_fp_endif>

000203ec <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   203ec:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   203f0:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
   203f4:	ec90 8a10 	vldmia	r0, {s16-s31}

000203f8 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   203f8:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   203fc:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   20400:	f383 8814 	msr	CONTROL, r3
    isb
   20404:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
   20408:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   2040a:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   2040c:	f01f fa07 	bl	3f81e <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   20410:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   20414:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   20418:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
   2041c:	f04f 0000 	mov.w	r0, #0
    msr PSPLIM, r0
   20420:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   20424:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   20428:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   2042c:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   2042e:	f01f f9e7 	bl	3f800 <configure_builtin_stack_guard>
    pop {r2, lr}
   20432:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   20436:	4770      	bx	lr
    ldr r1, =_kernel
   20438:	2002a1d8 	.word	0x2002a1d8
    ldr v4, =_SCS_ICSR
   2043c:	e000ed04 	.word	0xe000ed04

00020440 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   20440:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   20444:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   20446:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   2044a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   2044e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   20450:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   20454:	2902      	cmp	r1, #2
    beq _oops
   20456:	d0ff      	beq.n	20458 <_oops>

00020458 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   20458:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   2045a:	f01f f9d5 	bl	3f808 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   2045e:	bd01      	pop	{r0, pc}

00020460 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   20460:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   20462:	2b00      	cmp	r3, #0
   20464:	db08      	blt.n	20478 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20466:	2201      	movs	r2, #1
   20468:	f000 001f 	and.w	r0, r0, #31
   2046c:	fa02 f000 	lsl.w	r0, r2, r0
   20470:	4a02      	ldr	r2, [pc, #8]	; (2047c <arch_irq_enable+0x1c>)
   20472:	095b      	lsrs	r3, r3, #5
   20474:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   20478:	4770      	bx	lr
   2047a:	bf00      	nop
   2047c:	e000e100 	.word	0xe000e100

00020480 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
   20480:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   20482:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
   20484:	2c07      	cmp	r4, #7
{
   20486:	4605      	mov	r5, r0
   20488:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
   2048a:	d90e      	bls.n	204aa <z_arm_irq_priority_set+0x2a>
   2048c:	235f      	movs	r3, #95	; 0x5f
   2048e:	4a10      	ldr	r2, [pc, #64]	; (204d0 <z_arm_irq_priority_set+0x50>)
   20490:	4910      	ldr	r1, [pc, #64]	; (204d4 <z_arm_irq_priority_set+0x54>)
   20492:	4811      	ldr	r0, [pc, #68]	; (204d8 <z_arm_irq_priority_set+0x58>)
   20494:	f01e ffd7 	bl	3f446 <printk>
   20498:	4631      	mov	r1, r6
   2049a:	4810      	ldr	r0, [pc, #64]	; (204dc <z_arm_irq_priority_set+0x5c>)
   2049c:	2207      	movs	r2, #7
   2049e:	f01e ffd2 	bl	3f446 <printk>
   204a2:	215f      	movs	r1, #95	; 0x5f
   204a4:	480a      	ldr	r0, [pc, #40]	; (204d0 <z_arm_irq_priority_set+0x50>)
   204a6:	f01e ffdb 	bl	3f460 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   204aa:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   204ac:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   204ae:	bfa8      	it	ge
   204b0:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
   204b4:	ea4f 1444 	mov.w	r4, r4, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   204b8:	bfb8      	it	lt
   204ba:	4b09      	ldrlt	r3, [pc, #36]	; (204e0 <z_arm_irq_priority_set+0x60>)
   204bc:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   204be:	bfab      	itete	ge
   204c0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   204c4:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   204c8:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   204cc:	555c      	strblt	r4, [r3, r5]
}
   204ce:	bd70      	pop	{r4, r5, r6, pc}
   204d0:	00046334 	.word	0x00046334
   204d4:	0004635b 	.word	0x0004635b
   204d8:	00045316 	.word	0x00045316
   204dc:	00046376 	.word	0x00046376
   204e0:	e000ed14 	.word	0xe000ed14

000204e4 <_arch_isr_direct_pm>:
	z_arm_reserved();
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   204e4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   204e6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   204e8:	4b04      	ldr	r3, [pc, #16]	; (204fc <_arch_isr_direct_pm+0x18>)
   204ea:	6a18      	ldr	r0, [r3, #32]
   204ec:	b118      	cbz	r0, 204f6 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   204ee:	2200      	movs	r2, #0
   204f0:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
   204f2:	f021 f8c8 	bl	41686 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   204f6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   204f8:	bd08      	pop	{r3, pc}
   204fa:	bf00      	nop
   204fc:	2002a1d8 	.word	0x2002a1d8

00020500 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
   20500:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20504:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   20506:	4605      	mov	r5, r0
	char *pStackMem = Z_THREAD_STACK_BUFFER(stack);
	char *stackEnd;
	/* Offset between the top of stack and the high end of stack area. */
	u32_t top_of_stack_offset = 0U;

	Z_ASSERT_VALID_PRIO(priority, pEntry);
   20508:	2e0f      	cmp	r6, #15
{
   2050a:	4688      	mov	r8, r1
   2050c:	4691      	mov	r9, r2
   2050e:	461f      	mov	r7, r3
	Z_ASSERT_VALID_PRIO(priority, pEntry);
   20510:	d126      	bne.n	20560 <arch_new_thread+0x60>
   20512:	4b1e      	ldr	r3, [pc, #120]	; (2058c <arch_new_thread+0x8c>)
   20514:	429f      	cmp	r7, r3
   20516:	d127      	bne.n	20568 <arch_new_thread+0x68>
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
   20518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2051a:	464a      	mov	r2, r9
   2051c:	9300      	str	r3, [sp, #0]
   2051e:	4641      	mov	r1, r8
   20520:	4633      	mov	r3, r6
   20522:	4628      	mov	r0, r5
   20524:	f021 f950 	bl	417c8 <z_new_thread_init>
	stackEnd = pStackMem + stackSize;
   20528:	eb08 0409 	add.w	r4, r8, r9
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
   2052c:	4a18      	ldr	r2, [pc, #96]	; (20590 <arch_new_thread+0x90>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   2052e:	f1a4 0320 	sub.w	r3, r4, #32
   20532:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
   20536:	f022 0201 	bic.w	r2, r2, #1
   2053a:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
   2053c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	pInitCtx->basic.a1 = (u32_t)pEntry;
   2053e:	601f      	str	r7, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
   20540:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
   20542:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   20544:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   20546:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   20548:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
   2054a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   2054e:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
   20550:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
   20552:	2300      	movs	r3, #0
   20554:	666b      	str	r3, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
   20556:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   2055a:	b003      	add	sp, #12
   2055c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(priority, pEntry);
   20560:	f106 0310 	add.w	r3, r6, #16
   20564:	2b1e      	cmp	r3, #30
   20566:	d9d7      	bls.n	20518 <arch_new_thread+0x18>
   20568:	232d      	movs	r3, #45	; 0x2d
   2056a:	4a0a      	ldr	r2, [pc, #40]	; (20594 <arch_new_thread+0x94>)
   2056c:	490a      	ldr	r1, [pc, #40]	; (20598 <arch_new_thread+0x98>)
   2056e:	480b      	ldr	r0, [pc, #44]	; (2059c <arch_new_thread+0x9c>)
   20570:	f01e ff69 	bl	3f446 <printk>
   20574:	4631      	mov	r1, r6
   20576:	f06f 030f 	mvn.w	r3, #15
   2057a:	220e      	movs	r2, #14
   2057c:	4808      	ldr	r0, [pc, #32]	; (205a0 <arch_new_thread+0xa0>)
   2057e:	f01e ff62 	bl	3f446 <printk>
   20582:	212d      	movs	r1, #45	; 0x2d
   20584:	4803      	ldr	r0, [pc, #12]	; (20594 <arch_new_thread+0x94>)
   20586:	f01e ff6b 	bl	3f460 <assert_post_action>
   2058a:	e7c5      	b.n	20518 <arch_new_thread+0x18>
   2058c:	00038f09 	.word	0x00038f09
   20590:	0003eeef 	.word	0x0003eeef
   20594:	000463ab 	.word	0x000463ab
   20598:	000463ce 	.word	0x000463ce
   2059c:	00045316 	.word	0x00045316
   205a0:	0004645b 	.word	0x0004645b

000205a4 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
   205a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   205a6:	461f      	mov	r7, r3
   205a8:	4606      	mov	r6, r0
   205aa:	460d      	mov	r5, r1
   205ac:	4614      	mov	r4, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   205ae:	2300      	movs	r3, #0
   205b0:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   205b4:	f3ef 8214 	mrs	r2, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   205b8:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   205bc:	f382 8814 	msr	CONTROL, r2
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   205c0:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   205c4:	f000 fc64 	bl	20e90 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
   205c8:	4b0b      	ldr	r3, [pc, #44]	; (205f8 <arch_switch_to_main_thread+0x54>)
	start_of_main_stack =
   205ca:	442c      	add	r4, r5
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   205cc:	4630      	mov	r0, r6
	_current = main_thread;
   205ce:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
   205d0:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
   205d4:	f01f f923 	bl	3f81e <z_arm_configure_dynamic_mpu_regions>
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   205d8:	f385 880b 	msr	PSPLIM, r5

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   205dc:	4638      	mov	r0, r7
   205de:	f384 8809 	msr	PSP, r4
   205e2:	2100      	movs	r1, #0
   205e4:	b663      	cpsie	if
   205e6:	f381 8811 	msr	BASEPRI, r1
   205ea:	f3bf 8f6f 	isb	sy
   205ee:	2200      	movs	r2, #0
   205f0:	2300      	movs	r3, #0
   205f2:	f01e fc7c 	bl	3eeee <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   205f6:	bf00      	nop
   205f8:	2002a1d8 	.word	0x2002a1d8

000205fc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
   205fc:	4901      	ldr	r1, [pc, #4]	; (20604 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   205fe:	2210      	movs	r2, #16
	str r2, [r1]
   20600:	600a      	str	r2, [r1, #0]
#endif
	bx lr
   20602:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   20604:	e000ed10 	.word	0xe000ed10

00020608 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   20608:	4040      	eors	r0, r0
	msr BASEPRI, r0
   2060a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
   2060e:	bf30      	wfi

	bx lr
   20610:	4770      	bx	lr
   20612:	bf00      	nop

00020614 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
   20614:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   20618:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
   2061c:	4672      	mov	r2, lr

	push {r0, lr}
   2061e:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
   20620:	f000 fac6 	bl	20bb0 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
   20624:	bd01      	pop	{r0, pc}
   20626:	bf00      	nop

00020628 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   20628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2062c:	4681      	mov	r9, r0
   2062e:	b086      	sub	sp, #24

	if (esf != NULL) {
   20630:	460c      	mov	r4, r1
   20632:	2900      	cmp	r1, #0
   20634:	d075      	beq.n	20722 <z_arm_fatal_error+0xfa>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   20636:	2301      	movs	r3, #1
   20638:	f04f 0000 	mov.w	r0, #0
   2063c:	4d3c      	ldr	r5, [pc, #240]	; (20730 <z_arm_fatal_error+0x108>)
   2063e:	f363 0007 	bfi	r0, r3, #0, #8
   20642:	4b3c      	ldr	r3, [pc, #240]	; (20734 <z_arm_fatal_error+0x10c>)
   20644:	4627      	mov	r7, r4
   20646:	1aed      	subs	r5, r5, r3
   20648:	688b      	ldr	r3, [r1, #8]
   2064a:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   2064e:	9300      	str	r3, [sp, #0]
   20650:	e9d1 2300 	ldrd	r2, r3, [r1]
   20654:	f365 108f 	bfi	r0, r5, #6, #10
   20658:	4937      	ldr	r1, [pc, #220]	; (20738 <z_arm_fatal_error+0x110>)
   2065a:	f01e ff12 	bl	3f482 <log_string_sync>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   2065e:	2301      	movs	r3, #1
   20660:	f04f 0000 	mov.w	r0, #0
   20664:	f363 0007 	bfi	r0, r3, #0, #8
   20668:	6963      	ldr	r3, [r4, #20]
   2066a:	f365 108f 	bfi	r0, r5, #6, #10
   2066e:	9300      	str	r3, [sp, #0]
   20670:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   20674:	4931      	ldr	r1, [pc, #196]	; (2073c <z_arm_fatal_error+0x114>)
   20676:	f01e ff04 	bl	3f482 <log_string_sync>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   2067a:	2301      	movs	r3, #1
   2067c:	f04f 0000 	mov.w	r0, #0
   20680:	f363 0007 	bfi	r0, r3, #0, #8
   20684:	f365 108f 	bfi	r0, r5, #6, #10
   20688:	69e2      	ldr	r2, [r4, #28]
   2068a:	492d      	ldr	r1, [pc, #180]	; (20740 <z_arm_fatal_error+0x118>)
   2068c:	f01e fef9 	bl	3f482 <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
   20690:	2600      	movs	r6, #0
		LOG_ERR("s[%d]:  0x%08x  s[%d]:  0x%08x"
   20692:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 2074c <z_arm_fatal_error+0x124>
   20696:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   2069a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   2069e:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   206a2:	f043 0301 	orr.w	r3, r3, #1
   206a6:	f363 0807 	bfi	r8, r3, #0, #8
   206aa:	1cf3      	adds	r3, r6, #3
   206ac:	ed97 7a08 	vldr	s14, [r7, #32]
   206b0:	9304      	str	r3, [sp, #16]
   206b2:	edcd 7a05 	vstr	s15, [sp, #20]
   206b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   206ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   206be:	1cb3      	adds	r3, r6, #2
   206c0:	9302      	str	r3, [sp, #8]
   206c2:	edcd 7a03 	vstr	s15, [sp, #12]
   206c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   206ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   206ce:	edcd 7a01 	vstr	s15, [sp, #4]
   206d2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   206d6:	1c73      	adds	r3, r6, #1
   206d8:	f365 188f 	bfi	r8, r5, #6, #10
   206dc:	9300      	str	r3, [sp, #0]
   206de:	4632      	mov	r2, r6
   206e0:	ee17 3a90 	vmov	r3, s15
   206e4:	4651      	mov	r1, sl
   206e6:	4640      	mov	r0, r8
	for (int i = 0; i < 16; i += 4) {
   206e8:	3604      	adds	r6, #4
		LOG_ERR("s[%d]:  0x%08x  s[%d]:  0x%08x"
   206ea:	f01e feca 	bl	3f482 <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
   206ee:	2e10      	cmp	r6, #16
   206f0:	f107 0710 	add.w	r7, r7, #16
   206f4:	d1cf      	bne.n	20696 <z_arm_fatal_error+0x6e>
	LOG_ERR("fpscr:  0x%08x\n", esf->fpscr);
   206f6:	2301      	movs	r3, #1
   206f8:	f04f 0000 	mov.w	r0, #0
   206fc:	f363 0007 	bfi	r0, r3, #0, #8
   20700:	f365 108f 	bfi	r0, r5, #6, #10
   20704:	6e22      	ldr	r2, [r4, #96]	; 0x60
   20706:	490f      	ldr	r1, [pc, #60]	; (20744 <z_arm_fatal_error+0x11c>)
   20708:	f01e febb 	bl	3f482 <log_string_sync>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   2070c:	f04f 0000 	mov.w	r0, #0
   20710:	2301      	movs	r3, #1
   20712:	f363 0007 	bfi	r0, r3, #0, #8
   20716:	f365 108f 	bfi	r0, r5, #6, #10
   2071a:	69a2      	ldr	r2, [r4, #24]
   2071c:	490a      	ldr	r1, [pc, #40]	; (20748 <z_arm_fatal_error+0x120>)
   2071e:	f01e feb0 	bl	3f482 <log_string_sync>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   20722:	4621      	mov	r1, r4
   20724:	4648      	mov	r0, r9
}
   20726:	b006      	add	sp, #24
   20728:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_fatal_error(reason, esf);
   2072c:	f018 bb70 	b.w	38e10 <z_fatal_error>
   20730:	00043094 	.word	0x00043094
   20734:	00042fb4 	.word	0x00042fb4
   20738:	0004648c 	.word	0x0004648c
   2073c:	000464bb 	.word	0x000464bb
   20740:	000464ea 	.word	0x000464ea
   20744:	00046539 	.word	0x00046539
   20748:	00046549 	.word	0x00046549
   2074c:	000464f9 	.word	0x000464f9

00020750 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   20750:	bf30      	wfi
    b z_SysNmiOnReset
   20752:	f7ff bffd 	b.w	20750 <z_SysNmiOnReset>
   20756:	bf00      	nop

00020758 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   20758:	4a11      	ldr	r2, [pc, #68]	; (207a0 <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   2075a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   2075c:	4b11      	ldr	r3, [pc, #68]	; (207a4 <z_arm_prep_c+0x4c>)
   2075e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   20762:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   20764:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   20768:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   2076c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   20770:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   20774:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   20778:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   2077c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   20780:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   20784:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   20788:	2300      	movs	r3, #0
   2078a:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
   2078e:	f018 fbd5 	bl	38f3c <z_bss_zero>
	z_data_copy();
   20792:	f018 fbdd 	bl	38f50 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
   20796:	f000 fb31 	bl	20dfc <z_arm_int_lib_init>
	z_cstart();
   2079a:	f018 fc0b 	bl	38fb4 <z_cstart>
   2079e:	bf00      	nop
   207a0:	00018200 	.word	0x00018200
   207a4:	e000ed00 	.word	0xe000ed00

000207a8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   207a8:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
   207aa:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   207ac:	4a0b      	ldr	r2, [pc, #44]	; (207dc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   207ae:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   207b0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   207b2:	bf1e      	ittt	ne
	movne	r1, #0
   207b4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   207b6:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   207b8:	f020 ff65 	blne	41686 <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   207bc:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   207be:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   207c2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   207c6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
   207ca:	4905      	ldr	r1, [pc, #20]	; (207e0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   207cc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   207ce:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   207d0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   207d2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   207d6:	4903      	ldr	r1, [pc, #12]	; (207e4 <_isr_wrapper+0x3c>)
	bx r1
   207d8:	4708      	bx	r1
   207da:	0000      	.short	0x0000
	ldr r2, =_kernel
   207dc:	2002a1d8 	.word	0x2002a1d8
	ldr r1, =_sw_isr_table
   207e0:	00042ca4 	.word	0x00042ca4
	ldr r1, =z_arm_int_exit
   207e4:	0002032d 	.word	0x0002032d

000207e8 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   207e8:	f01e fe42 	bl	3f470 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   207ec:	2020      	movs	r0, #32
    msr BASEPRI, r0
   207ee:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
   207f2:	4808      	ldr	r0, [pc, #32]	; (20814 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   207f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   207f8:	1840      	adds	r0, r0, r1
    msr PSP, r0
   207fa:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   207fe:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   20802:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   20804:	4308      	orrs	r0, r1
    msr CONTROL, r0
   20806:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   2080a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   2080e:	f7ff ffa3 	bl	20758 <z_arm_prep_c>
   20812:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   20814:	2002f150 	.word	0x2002f150

00020818 <mem_manage_fault.isra.2>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   20818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			      bool *recoverable)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   2081a:	2301      	movs	r3, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   2081c:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   2081e:	f04f 0000 	mov.w	r0, #0
   20822:	4c40      	ldr	r4, [pc, #256]	; (20924 <mem_manage_fault.isra.2+0x10c>)
   20824:	f363 0007 	bfi	r0, r3, #0, #8
   20828:	4b3f      	ldr	r3, [pc, #252]	; (20928 <mem_manage_fault.isra.2+0x110>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   2082a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   2082c:	1ae4      	subs	r4, r4, r3
   2082e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   20832:	493e      	ldr	r1, [pc, #248]	; (2092c <mem_manage_fault.isra.2+0x114>)
   20834:	f364 108f 	bfi	r0, r4, #6, #10
   20838:	f01e fe23 	bl	3f482 <log_string_sync>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   2083c:	4b3c      	ldr	r3, [pc, #240]	; (20930 <mem_manage_fault.isra.2+0x118>)
   2083e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20840:	06d9      	lsls	r1, r3, #27
   20842:	d509      	bpl.n	20858 <mem_manage_fault.isra.2+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
   20844:	f04f 0000 	mov.w	r0, #0
   20848:	2301      	movs	r3, #1
   2084a:	f363 0007 	bfi	r0, r3, #0, #8
   2084e:	f364 108f 	bfi	r0, r4, #6, #10
   20852:	4938      	ldr	r1, [pc, #224]	; (20934 <mem_manage_fault.isra.2+0x11c>)
   20854:	f01e fe15 	bl	3f482 <log_string_sync>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   20858:	4b35      	ldr	r3, [pc, #212]	; (20930 <mem_manage_fault.isra.2+0x118>)
   2085a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2085c:	071a      	lsls	r2, r3, #28
   2085e:	d509      	bpl.n	20874 <mem_manage_fault.isra.2+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   20860:	f04f 0000 	mov.w	r0, #0
   20864:	2301      	movs	r3, #1
   20866:	f363 0007 	bfi	r0, r3, #0, #8
   2086a:	f364 108f 	bfi	r0, r4, #6, #10
   2086e:	4932      	ldr	r1, [pc, #200]	; (20938 <mem_manage_fault.isra.2+0x120>)
   20870:	f01e fe07 	bl	3f482 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   20874:	4d2e      	ldr	r5, [pc, #184]	; (20930 <mem_manage_fault.isra.2+0x118>)
   20876:	6aab      	ldr	r3, [r5, #40]	; 0x28
   20878:	079b      	lsls	r3, r3, #30
   2087a:	d51c      	bpl.n	208b6 <mem_manage_fault.isra.2+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
   2087c:	2301      	movs	r3, #1
   2087e:	f04f 0000 	mov.w	r0, #0
   20882:	f363 0007 	bfi	r0, r3, #0, #8
   20886:	f364 108f 	bfi	r0, r4, #6, #10
   2088a:	492c      	ldr	r1, [pc, #176]	; (2093c <mem_manage_fault.isra.2+0x124>)
   2088c:	f01e fdf9 	bl	3f482 <log_string_sync>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
   20890:	6b6a      	ldr	r2, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   20892:	6aab      	ldr	r3, [r5, #40]	; 0x28
   20894:	0618      	lsls	r0, r3, #24
   20896:	d50e      	bpl.n	208b6 <mem_manage_fault.isra.2+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   20898:	f04f 0000 	mov.w	r0, #0
   2089c:	2301      	movs	r3, #1
   2089e:	f363 0007 	bfi	r0, r3, #0, #8
   208a2:	f364 108f 	bfi	r0, r4, #6, #10
   208a6:	4926      	ldr	r1, [pc, #152]	; (20940 <mem_manage_fault.isra.2+0x128>)
   208a8:	f01e fdeb 	bl	3f482 <log_string_sync>
			if (from_hard_fault) {
   208ac:	b11f      	cbz	r7, 208b6 <mem_manage_fault.isra.2+0x9e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   208ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
   208b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   208b4:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   208b6:	4b1e      	ldr	r3, [pc, #120]	; (20930 <mem_manage_fault.isra.2+0x118>)
   208b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   208ba:	07d9      	lsls	r1, r3, #31
   208bc:	d509      	bpl.n	208d2 <mem_manage_fault.isra.2+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
   208be:	f04f 0000 	mov.w	r0, #0
   208c2:	2301      	movs	r3, #1
   208c4:	f363 0007 	bfi	r0, r3, #0, #8
   208c8:	f364 108f 	bfi	r0, r4, #6, #10
   208cc:	491d      	ldr	r1, [pc, #116]	; (20944 <mem_manage_fault.isra.2+0x12c>)
   208ce:	f01e fdd8 	bl	3f482 <log_string_sync>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   208d2:	4b17      	ldr	r3, [pc, #92]	; (20930 <mem_manage_fault.isra.2+0x118>)
   208d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   208d6:	069a      	lsls	r2, r3, #26
   208d8:	d509      	bpl.n	208ee <mem_manage_fault.isra.2+0xd6>
		PR_FAULT_INFO(
   208da:	f04f 0000 	mov.w	r0, #0
   208de:	2301      	movs	r3, #1
   208e0:	f363 0007 	bfi	r0, r3, #0, #8
   208e4:	f364 108f 	bfi	r0, r4, #6, #10
   208e8:	4917      	ldr	r1, [pc, #92]	; (20948 <mem_manage_fault.isra.2+0x130>)
   208ea:	f01e fdca 	bl	3f482 <log_string_sync>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   208ee:	4b10      	ldr	r3, [pc, #64]	; (20930 <mem_manage_fault.isra.2+0x118>)
   208f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   208f2:	06db      	lsls	r3, r3, #27
   208f4:	d50e      	bpl.n	20914 <mem_manage_fault.isra.2+0xfc>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(0,
   208f6:	4915      	ldr	r1, [pc, #84]	; (2094c <mem_manage_fault.isra.2+0x134>)
   208f8:	f44f 739b 	mov.w	r3, #310	; 0x136
   208fc:	4a14      	ldr	r2, [pc, #80]	; (20950 <mem_manage_fault.isra.2+0x138>)
   208fe:	4815      	ldr	r0, [pc, #84]	; (20954 <mem_manage_fault.isra.2+0x13c>)
   20900:	f01e fda1 	bl	3f446 <printk>
   20904:	4814      	ldr	r0, [pc, #80]	; (20958 <mem_manage_fault.isra.2+0x140>)
   20906:	f01e fd9e 	bl	3f446 <printk>
   2090a:	f44f 719b 	mov.w	r1, #310	; 0x136
   2090e:	4810      	ldr	r0, [pc, #64]	; (20950 <mem_manage_fault.isra.2+0x138>)
   20910:	f01e fda6 	bl	3f460 <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
   20914:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   20916:	4a06      	ldr	r2, [pc, #24]	; (20930 <mem_manage_fault.isra.2+0x118>)
   20918:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2091a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   2091e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   20920:	7030      	strb	r0, [r6, #0]

	return reason;
}
   20922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20924:	00043094 	.word	0x00043094
   20928:	00042fb4 	.word	0x00042fb4
   2092c:	000465ff 	.word	0x000465ff
   20930:	e000ed00 	.word	0xe000ed00
   20934:	00046615 	.word	0x00046615
   20938:	00046648 	.word	0x00046648
   2093c:	0004665b 	.word	0x0004665b
   20940:	00046673 	.word	0x00046673
   20944:	00046689 	.word	0x00046689
   20948:	000466a8 	.word	0x000466a8
   2094c:	0004a2c3 	.word	0x0004a2c3
   20950:	000466d7 	.word	0x000466d7
   20954:	00045316 	.word	0x00045316
   20958:	00046702 	.word	0x00046702

0002095c <bus_fault.isra.3>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   2095c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   2095e:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   20960:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   20962:	f04f 0000 	mov.w	r0, #0
   20966:	4c3d      	ldr	r4, [pc, #244]	; (20a5c <bus_fault.isra.3+0x100>)
   20968:	f363 0007 	bfi	r0, r3, #0, #8
   2096c:	4b3c      	ldr	r3, [pc, #240]	; (20a60 <bus_fault.isra.3+0x104>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   2096e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   20970:	1ae4      	subs	r4, r4, r3
   20972:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   20976:	493b      	ldr	r1, [pc, #236]	; (20a64 <bus_fault.isra.3+0x108>)
   20978:	f364 108f 	bfi	r0, r4, #6, #10
   2097c:	f01e fd81 	bl	3f482 <log_string_sync>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   20980:	4b39      	ldr	r3, [pc, #228]	; (20a68 <bus_fault.isra.3+0x10c>)
   20982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20984:	04d9      	lsls	r1, r3, #19
   20986:	d509      	bpl.n	2099c <bus_fault.isra.3+0x40>
		PR_FAULT_INFO("  Stacking error");
   20988:	f04f 0000 	mov.w	r0, #0
   2098c:	2301      	movs	r3, #1
   2098e:	f363 0007 	bfi	r0, r3, #0, #8
   20992:	f364 108f 	bfi	r0, r4, #6, #10
   20996:	4935      	ldr	r1, [pc, #212]	; (20a6c <bus_fault.isra.3+0x110>)
   20998:	f01e fd73 	bl	3f482 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   2099c:	4b32      	ldr	r3, [pc, #200]	; (20a68 <bus_fault.isra.3+0x10c>)
   2099e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   209a0:	051a      	lsls	r2, r3, #20
   209a2:	d509      	bpl.n	209b8 <bus_fault.isra.3+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   209a4:	f04f 0000 	mov.w	r0, #0
   209a8:	2301      	movs	r3, #1
   209aa:	f363 0007 	bfi	r0, r3, #0, #8
   209ae:	f364 108f 	bfi	r0, r4, #6, #10
   209b2:	492f      	ldr	r1, [pc, #188]	; (20a70 <bus_fault.isra.3+0x114>)
   209b4:	f01e fd65 	bl	3f482 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   209b8:	4d2b      	ldr	r5, [pc, #172]	; (20a68 <bus_fault.isra.3+0x10c>)
   209ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
   209bc:	059b      	lsls	r3, r3, #22
   209be:	d51c      	bpl.n	209fa <bus_fault.isra.3+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
   209c0:	2301      	movs	r3, #1
   209c2:	f04f 0000 	mov.w	r0, #0
   209c6:	f363 0007 	bfi	r0, r3, #0, #8
   209ca:	f364 108f 	bfi	r0, r4, #6, #10
   209ce:	4929      	ldr	r1, [pc, #164]	; (20a74 <bus_fault.isra.3+0x118>)
   209d0:	f01e fd57 	bl	3f482 <log_string_sync>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   209d4:	6baa      	ldr	r2, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   209d6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   209d8:	0418      	lsls	r0, r3, #16
   209da:	d50e      	bpl.n	209fa <bus_fault.isra.3+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   209dc:	f04f 0000 	mov.w	r0, #0
   209e0:	2301      	movs	r3, #1
   209e2:	f363 0007 	bfi	r0, r3, #0, #8
   209e6:	f364 108f 	bfi	r0, r4, #6, #10
   209ea:	4923      	ldr	r1, [pc, #140]	; (20a78 <bus_fault.isra.3+0x11c>)
   209ec:	f01e fd49 	bl	3f482 <log_string_sync>
			if (from_hard_fault) {
   209f0:	b11f      	cbz	r7, 209fa <bus_fault.isra.3+0x9e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   209f2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   209f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   209f8:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   209fa:	4b1b      	ldr	r3, [pc, #108]	; (20a68 <bus_fault.isra.3+0x10c>)
   209fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   209fe:	0559      	lsls	r1, r3, #21
   20a00:	d509      	bpl.n	20a16 <bus_fault.isra.3+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
   20a02:	f04f 0000 	mov.w	r0, #0
   20a06:	2301      	movs	r3, #1
   20a08:	f363 0007 	bfi	r0, r3, #0, #8
   20a0c:	f364 108f 	bfi	r0, r4, #6, #10
   20a10:	491a      	ldr	r1, [pc, #104]	; (20a7c <bus_fault.isra.3+0x120>)
   20a12:	f01e fd36 	bl	3f482 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   20a16:	4b14      	ldr	r3, [pc, #80]	; (20a68 <bus_fault.isra.3+0x10c>)
   20a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   20a1a:	05d2      	lsls	r2, r2, #23
   20a1c:	d511      	bpl.n	20a42 <bus_fault.isra.3+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
   20a1e:	f04f 0000 	mov.w	r0, #0
   20a22:	2301      	movs	r3, #1
   20a24:	4916      	ldr	r1, [pc, #88]	; (20a80 <bus_fault.isra.3+0x124>)
   20a26:	f363 0007 	bfi	r0, r3, #0, #8
   20a2a:	f364 108f 	bfi	r0, r4, #6, #10
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   20a2e:	f01e fd28 	bl	3f482 <log_string_sync>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
   20a32:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   20a34:	4a0c      	ldr	r2, [pc, #48]	; (20a68 <bus_fault.isra.3+0x10c>)
   20a36:	6a93      	ldr	r3, [r2, #40]	; 0x28
   20a38:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   20a3c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   20a3e:	7030      	strb	r0, [r6, #0]

	return reason;
}
   20a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   20a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20a44:	049b      	lsls	r3, r3, #18
   20a46:	d5f4      	bpl.n	20a32 <bus_fault.isra.3+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   20a48:	f04f 0000 	mov.w	r0, #0
   20a4c:	2301      	movs	r3, #1
   20a4e:	f363 0007 	bfi	r0, r3, #0, #8
   20a52:	f364 108f 	bfi	r0, r4, #6, #10
   20a56:	490b      	ldr	r1, [pc, #44]	; (20a84 <bus_fault.isra.3+0x128>)
   20a58:	e7e9      	b.n	20a2e <bus_fault.isra.3+0xd2>
   20a5a:	bf00      	nop
   20a5c:	00043094 	.word	0x00043094
   20a60:	00042fb4 	.word	0x00042fb4
   20a64:	00046577 	.word	0x00046577
   20a68:	e000ed00 	.word	0xe000ed00
   20a6c:	0004658d 	.word	0x0004658d
   20a70:	00046648 	.word	0x00046648
   20a74:	0004659e 	.word	0x0004659e
   20a78:	000465b7 	.word	0x000465b7
   20a7c:	000465cc 	.word	0x000465cc
   20a80:	000465e7 	.word	0x000465e7
   20a84:	000466a8 	.word	0x000466a8

00020a88 <usage_fault.isra.4>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
   20a88:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   20a8a:	f04f 0000 	mov.w	r0, #0
   20a8e:	2301      	movs	r3, #1
   20a90:	4c3c      	ldr	r4, [pc, #240]	; (20b84 <usage_fault.isra.4+0xfc>)
   20a92:	f363 0007 	bfi	r0, r3, #0, #8
   20a96:	4b3c      	ldr	r3, [pc, #240]	; (20b88 <usage_fault.isra.4+0x100>)
   20a98:	493c      	ldr	r1, [pc, #240]	; (20b8c <usage_fault.isra.4+0x104>)
   20a9a:	1ae4      	subs	r4, r4, r3
   20a9c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   20aa0:	f364 108f 	bfi	r0, r4, #6, #10
   20aa4:	f01e fced 	bl	3f482 <log_string_sync>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   20aa8:	4b39      	ldr	r3, [pc, #228]	; (20b90 <usage_fault.isra.4+0x108>)
   20aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20aac:	019b      	lsls	r3, r3, #6
   20aae:	d509      	bpl.n	20ac4 <usage_fault.isra.4+0x3c>
		PR_FAULT_INFO("  Division by zero");
   20ab0:	f04f 0000 	mov.w	r0, #0
   20ab4:	2301      	movs	r3, #1
   20ab6:	f363 0007 	bfi	r0, r3, #0, #8
   20aba:	f364 108f 	bfi	r0, r4, #6, #10
   20abe:	4935      	ldr	r1, [pc, #212]	; (20b94 <usage_fault.isra.4+0x10c>)
   20ac0:	f01e fcdf 	bl	3f482 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   20ac4:	4b32      	ldr	r3, [pc, #200]	; (20b90 <usage_fault.isra.4+0x108>)
   20ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20ac8:	01dd      	lsls	r5, r3, #7
   20aca:	d509      	bpl.n	20ae0 <usage_fault.isra.4+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
   20acc:	f04f 0000 	mov.w	r0, #0
   20ad0:	2301      	movs	r3, #1
   20ad2:	f363 0007 	bfi	r0, r3, #0, #8
   20ad6:	f364 108f 	bfi	r0, r4, #6, #10
   20ada:	492f      	ldr	r1, [pc, #188]	; (20b98 <usage_fault.isra.4+0x110>)
   20adc:	f01e fcd1 	bl	3f482 <log_string_sync>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   20ae0:	4b2b      	ldr	r3, [pc, #172]	; (20b90 <usage_fault.isra.4+0x108>)
   20ae2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   20ae4:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   20ae8:	d00a      	beq.n	20b00 <usage_fault.isra.4+0x78>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   20aea:	2301      	movs	r3, #1
   20aec:	f04f 0000 	mov.w	r0, #0
   20af0:	f363 0007 	bfi	r0, r3, #0, #8
   20af4:	f364 108f 	bfi	r0, r4, #6, #10
   20af8:	4928      	ldr	r1, [pc, #160]	; (20b9c <usage_fault.isra.4+0x114>)
   20afa:	f01e fcc2 	bl	3f482 <log_string_sync>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   20afe:	2502      	movs	r5, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   20b00:	4b23      	ldr	r3, [pc, #140]	; (20b90 <usage_fault.isra.4+0x108>)
   20b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20b04:	0318      	lsls	r0, r3, #12
   20b06:	d509      	bpl.n	20b1c <usage_fault.isra.4+0x94>
		PR_FAULT_INFO("  No coprocessor instructions");
   20b08:	f04f 0000 	mov.w	r0, #0
   20b0c:	2301      	movs	r3, #1
   20b0e:	f363 0007 	bfi	r0, r3, #0, #8
   20b12:	f364 108f 	bfi	r0, r4, #6, #10
   20b16:	4922      	ldr	r1, [pc, #136]	; (20ba0 <usage_fault.isra.4+0x118>)
   20b18:	f01e fcb3 	bl	3f482 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   20b1c:	4b1c      	ldr	r3, [pc, #112]	; (20b90 <usage_fault.isra.4+0x108>)
   20b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20b20:	0359      	lsls	r1, r3, #13
   20b22:	d509      	bpl.n	20b38 <usage_fault.isra.4+0xb0>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   20b24:	f04f 0000 	mov.w	r0, #0
   20b28:	2301      	movs	r3, #1
   20b2a:	f363 0007 	bfi	r0, r3, #0, #8
   20b2e:	f364 108f 	bfi	r0, r4, #6, #10
   20b32:	491c      	ldr	r1, [pc, #112]	; (20ba4 <usage_fault.isra.4+0x11c>)
   20b34:	f01e fca5 	bl	3f482 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   20b38:	4b15      	ldr	r3, [pc, #84]	; (20b90 <usage_fault.isra.4+0x108>)
   20b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20b3c:	039a      	lsls	r2, r3, #14
   20b3e:	d509      	bpl.n	20b54 <usage_fault.isra.4+0xcc>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   20b40:	f04f 0000 	mov.w	r0, #0
   20b44:	2301      	movs	r3, #1
   20b46:	f363 0007 	bfi	r0, r3, #0, #8
   20b4a:	f364 108f 	bfi	r0, r4, #6, #10
   20b4e:	4916      	ldr	r1, [pc, #88]	; (20ba8 <usage_fault.isra.4+0x120>)
   20b50:	f01e fc97 	bl	3f482 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   20b54:	4b0e      	ldr	r3, [pc, #56]	; (20b90 <usage_fault.isra.4+0x108>)
   20b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20b58:	03db      	lsls	r3, r3, #15
   20b5a:	d509      	bpl.n	20b70 <usage_fault.isra.4+0xe8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   20b5c:	f04f 0000 	mov.w	r0, #0
   20b60:	2301      	movs	r3, #1
   20b62:	f363 0007 	bfi	r0, r3, #0, #8
   20b66:	f364 108f 	bfi	r0, r4, #6, #10
   20b6a:	4910      	ldr	r1, [pc, #64]	; (20bac <usage_fault.isra.4+0x124>)
   20b6c:	f01e fc89 	bl	3f482 <log_string_sync>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   20b70:	4a07      	ldr	r2, [pc, #28]	; (20b90 <usage_fault.isra.4+0x108>)

	return reason;
}
   20b72:	4628      	mov	r0, r5
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   20b74:	6a93      	ldr	r3, [r2, #40]	; 0x28
   20b76:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   20b7a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   20b7e:	6293      	str	r3, [r2, #40]	; 0x28
}
   20b80:	bd38      	pop	{r3, r4, r5, pc}
   20b82:	bf00      	nop
   20b84:	00043094 	.word	0x00043094
   20b88:	00042fb4 	.word	0x00042fb4
   20b8c:	0004673c 	.word	0x0004673c
   20b90:	e000ed00 	.word	0xe000ed00
   20b94:	00046754 	.word	0x00046754
   20b98:	00046767 	.word	0x00046767
   20b9c:	00046781 	.word	0x00046781
   20ba0:	000467ab 	.word	0x000467ab
   20ba4:	000467c9 	.word	0x000467c9
   20ba8:	000467ee 	.word	0x000467ee
   20bac:	00046808 	.word	0x00046808

00020bb0 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
   20bb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   20bb4:	4b70      	ldr	r3, [pc, #448]	; (20d78 <z_arm_fault+0x1c8>)
{
   20bb6:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   20bb8:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   20bbc:	4606      	mov	r6, r0
   20bbe:	4689      	mov	r9, r1
   20bc0:	4614      	mov	r4, r2
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   20bc2:	f3c8 0708 	ubfx	r7, r8, #0, #9
   20bc6:	2500      	movs	r5, #0
   20bc8:	f385 8811 	msr	BASEPRI, r5
   20bcc:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   20bd0:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   20bd4:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   20bd8:	d11b      	bne.n	20c12 <z_arm_fault+0x62>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   20bda:	07d0      	lsls	r0, r2, #31
   20bdc:	d419      	bmi.n	20c12 <z_arm_fault+0x62>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   20bde:	0651      	lsls	r1, r2, #25
   20be0:	d403      	bmi.n	20bea <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   20be2:	0722      	lsls	r2, r4, #28
   20be4:	d412      	bmi.n	20c0c <z_arm_fault+0x5c>
			*nested_exc = true;
   20be6:	2501      	movs	r5, #1
   20be8:	e012      	b.n	20c10 <z_arm_fault+0x60>
		PR_FAULT_INFO("Exception occurred in Secure State");
   20bea:	2301      	movs	r3, #1
   20bec:	f04f 0000 	mov.w	r0, #0
   20bf0:	4a62      	ldr	r2, [pc, #392]	; (20d7c <z_arm_fault+0x1cc>)
   20bf2:	f363 0007 	bfi	r0, r3, #0, #8
   20bf6:	4b62      	ldr	r3, [pc, #392]	; (20d80 <z_arm_fault+0x1d0>)
   20bf8:	4962      	ldr	r1, [pc, #392]	; (20d84 <z_arm_fault+0x1d4>)
   20bfa:	1a9b      	subs	r3, r3, r2
   20bfc:	08db      	lsrs	r3, r3, #3
   20bfe:	f363 108f 	bfi	r0, r3, #6, #10
   20c02:	f01e fc3e 	bl	3f482 <log_string_sync>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   20c06:	f014 0504 	ands.w	r5, r4, #4
   20c0a:	d001      	beq.n	20c10 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)psp;
   20c0c:	464e      	mov	r6, r9
	*nested_exc = false;
   20c0e:	2500      	movs	r5, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   20c10:	b97e      	cbnz	r6, 20c32 <z_arm_fault+0x82>
   20c12:	f240 33b1 	movw	r3, #945	; 0x3b1
   20c16:	4a5c      	ldr	r2, [pc, #368]	; (20d88 <z_arm_fault+0x1d8>)
   20c18:	495c      	ldr	r1, [pc, #368]	; (20d8c <z_arm_fault+0x1dc>)
   20c1a:	485d      	ldr	r0, [pc, #372]	; (20d90 <z_arm_fault+0x1e0>)
   20c1c:	f01e fc13 	bl	3f446 <printk>
   20c20:	485c      	ldr	r0, [pc, #368]	; (20d94 <z_arm_fault+0x1e4>)
   20c22:	f01e fc10 	bl	3f446 <printk>
   20c26:	f240 31b1 	movw	r1, #945	; 0x3b1
   20c2a:	4857      	ldr	r0, [pc, #348]	; (20d88 <z_arm_fault+0x1d8>)
   20c2c:	f01e fc18 	bl	3f460 <assert_post_action>
   20c30:	2600      	movs	r6, #0
	*recoverable = false;
   20c32:	2300      	movs	r3, #0
   20c34:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   20c38:	1efb      	subs	r3, r7, #3
   20c3a:	2b09      	cmp	r3, #9
   20c3c:	d87f      	bhi.n	20d3e <z_arm_fault+0x18e>
   20c3e:	e8df f003 	tbb	[pc, r3]
   20c42:	6905      	.short	0x6905
   20c44:	7e7e4c6d 	.word	0x7e7e4c6d
   20c48:	717e7e7e 	.word	0x717e7e7e
	PR_FAULT_INFO("***** HARD FAULT *****");
   20c4c:	2301      	movs	r3, #1
   20c4e:	f04f 0000 	mov.w	r0, #0
	*recoverable = false;
   20c52:	f04f 0800 	mov.w	r8, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
   20c56:	f363 0007 	bfi	r0, r3, #0, #8
   20c5a:	4f49      	ldr	r7, [pc, #292]	; (20d80 <z_arm_fault+0x1d0>)
   20c5c:	4b47      	ldr	r3, [pc, #284]	; (20d7c <z_arm_fault+0x1cc>)
   20c5e:	494e      	ldr	r1, [pc, #312]	; (20d98 <z_arm_fault+0x1e8>)
   20c60:	1aff      	subs	r7, r7, r3
   20c62:	f3c7 07c9 	ubfx	r7, r7, #3, #10
   20c66:	f367 108f 	bfi	r0, r7, #6, #10
   20c6a:	f01e fc0a 	bl	3f482 <log_string_sync>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   20c6e:	4b42      	ldr	r3, [pc, #264]	; (20d78 <z_arm_fault+0x1c8>)
	*recoverable = false;
   20c70:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   20c74:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   20c76:	f014 0402 	ands.w	r4, r4, #2
   20c7a:	d00b      	beq.n	20c94 <z_arm_fault+0xe4>
		PR_EXC("  Bus fault on vector table read");
   20c7c:	f04f 0000 	mov.w	r0, #0
   20c80:	2301      	movs	r3, #1
   20c82:	4946      	ldr	r1, [pc, #280]	; (20d9c <z_arm_fault+0x1ec>)
   20c84:	f363 0007 	bfi	r0, r3, #0, #8
   20c88:	f367 108f 	bfi	r0, r7, #6, #10
	PR_FAULT_INFO(
   20c8c:	f01e fbf9 	bl	3f482 <log_string_sync>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   20c90:	2400      	movs	r4, #0
   20c92:	e025      	b.n	20ce0 <z_arm_fault+0x130>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   20c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20c96:	005b      	lsls	r3, r3, #1
   20c98:	d522      	bpl.n	20ce0 <z_arm_fault+0x130>
		PR_EXC("  Fault escalation (see below)");
   20c9a:	2301      	movs	r3, #1
   20c9c:	f04f 0000 	mov.w	r0, #0
   20ca0:	f363 0007 	bfi	r0, r3, #0, #8
   20ca4:	f367 108f 	bfi	r0, r7, #6, #10
   20ca8:	493d      	ldr	r1, [pc, #244]	; (20da0 <z_arm_fault+0x1f0>)
   20caa:	f01e fbea 	bl	3f482 <log_string_sync>
		if (SCB_MMFSR != 0) {
   20cae:	4b3d      	ldr	r3, [pc, #244]	; (20da4 <z_arm_fault+0x1f4>)
   20cb0:	781b      	ldrb	r3, [r3, #0]
   20cb2:	b12b      	cbz	r3, 20cc0 <z_arm_fault+0x110>
			reason = mem_manage_fault(esf, 1, recoverable);
   20cb4:	2001      	movs	r0, #1
   20cb6:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   20cba:	f7ff fdad 	bl	20818 <mem_manage_fault.isra.2>
   20cbe:	e00e      	b.n	20cde <z_arm_fault+0x12e>
		} else if (SCB_BFSR != 0) {
   20cc0:	4b39      	ldr	r3, [pc, #228]	; (20da8 <z_arm_fault+0x1f8>)
   20cc2:	781b      	ldrb	r3, [r3, #0]
   20cc4:	b12b      	cbz	r3, 20cd2 <z_arm_fault+0x122>
			reason = bus_fault(esf, 1, recoverable);
   20cc6:	2001      	movs	r0, #1
   20cc8:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   20ccc:	f7ff fe46 	bl	2095c <bus_fault.isra.3>
   20cd0:	e005      	b.n	20cde <z_arm_fault+0x12e>
		} else if (SCB_UFSR != 0) {
   20cd2:	4b36      	ldr	r3, [pc, #216]	; (20dac <z_arm_fault+0x1fc>)
   20cd4:	881b      	ldrh	r3, [r3, #0]
   20cd6:	b29b      	uxth	r3, r3
   20cd8:	b113      	cbz	r3, 20ce0 <z_arm_fault+0x130>
			reason = usage_fault(esf);
   20cda:	f7ff fed5 	bl	20a88 <usage_fault.isra.4>
   20cde:	4604      	mov	r4, r0
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   20ce0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20ce4:	b99b      	cbnz	r3, 20d0e <z_arm_fault+0x15e>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   20ce6:	2268      	movs	r2, #104	; 0x68
   20ce8:	4631      	mov	r1, r6
   20cea:	a802      	add	r0, sp, #8
   20cec:	f020 fe61 	bl	419b2 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   20cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20cf2:	2d00      	cmp	r5, #0
   20cf4:	d03a      	beq.n	20d6c <z_arm_fault+0x1bc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   20cf6:	f3c3 0208 	ubfx	r2, r3, #0, #9
   20cfa:	b922      	cbnz	r2, 20d06 <z_arm_fault+0x156>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   20cfc:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   20d00:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   20d04:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   20d06:	a902      	add	r1, sp, #8
   20d08:	4620      	mov	r0, r4
   20d0a:	f7ff fc8d 	bl	20628 <z_arm_fatal_error>
}
   20d0e:	b01d      	add	sp, #116	; 0x74
   20d10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   20d14:	f10d 0107 	add.w	r1, sp, #7
   20d18:	2000      	movs	r0, #0
   20d1a:	e7ce      	b.n	20cba <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
   20d1c:	f10d 0107 	add.w	r1, sp, #7
   20d20:	2000      	movs	r0, #0
   20d22:	e7d3      	b.n	20ccc <z_arm_fault+0x11c>
	PR_FAULT_INFO(
   20d24:	2301      	movs	r3, #1
   20d26:	f04f 0000 	mov.w	r0, #0
   20d2a:	4a14      	ldr	r2, [pc, #80]	; (20d7c <z_arm_fault+0x1cc>)
   20d2c:	f363 0007 	bfi	r0, r3, #0, #8
   20d30:	4b13      	ldr	r3, [pc, #76]	; (20d80 <z_arm_fault+0x1d0>)
   20d32:	491f      	ldr	r1, [pc, #124]	; (20db0 <z_arm_fault+0x200>)
   20d34:	1a9b      	subs	r3, r3, r2
   20d36:	08db      	lsrs	r3, r3, #3
   20d38:	f363 108f 	bfi	r0, r3, #6, #10
   20d3c:	e7a6      	b.n	20c8c <z_arm_fault+0xdc>
	PR_FAULT_INFO("***** %s %d) *****",
   20d3e:	2301      	movs	r3, #1
   20d40:	f04f 0000 	mov.w	r0, #0
   20d44:	4a0d      	ldr	r2, [pc, #52]	; (20d7c <z_arm_fault+0x1cc>)
   20d46:	f363 0007 	bfi	r0, r3, #0, #8
   20d4a:	4b0d      	ldr	r3, [pc, #52]	; (20d80 <z_arm_fault+0x1d0>)
   20d4c:	4919      	ldr	r1, [pc, #100]	; (20db4 <z_arm_fault+0x204>)
   20d4e:	1a9b      	subs	r3, r3, r2
   20d50:	08db      	lsrs	r3, r3, #3
   20d52:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   20d56:	f363 108f 	bfi	r0, r3, #6, #10
   20d5a:	4a17      	ldr	r2, [pc, #92]	; (20db8 <z_arm_fault+0x208>)
   20d5c:	f1a7 0310 	sub.w	r3, r7, #16
   20d60:	bf08      	it	eq
   20d62:	460a      	moveq	r2, r1
   20d64:	4915      	ldr	r1, [pc, #84]	; (20dbc <z_arm_fault+0x20c>)
   20d66:	f01e fb8c 	bl	3f482 <log_string_sync>
   20d6a:	e791      	b.n	20c90 <z_arm_fault+0xe0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   20d6c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   20d70:	f023 0301 	bic.w	r3, r3, #1
   20d74:	e7c6      	b.n	20d04 <z_arm_fault+0x154>
   20d76:	bf00      	nop
   20d78:	e000ed00 	.word	0xe000ed00
   20d7c:	00042fb4 	.word	0x00042fb4
   20d80:	00043094 	.word	0x00043094
   20d84:	00046861 	.word	0x00046861
   20d88:	000466d7 	.word	0x000466d7
   20d8c:	00046884 	.word	0x00046884
   20d90:	00045316 	.word	0x00045316
   20d94:	00046897 	.word	0x00046897
   20d98:	000468d5 	.word	0x000468d5
   20d9c:	000468ec 	.word	0x000468ec
   20da0:	0004690d 	.word	0x0004690d
   20da4:	e000ed28 	.word	0xe000ed28
   20da8:	e000ed29 	.word	0xe000ed29
   20dac:	e000ed2a 	.word	0xe000ed2a
   20db0:	0004692c 	.word	0x0004692c
   20db4:	00046833 	.word	0x00046833
   20db8:	00046848 	.word	0x00046848
   20dbc:	00046962 	.word	0x00046962

00020dc0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   20dc0:	4b04      	ldr	r3, [pc, #16]	; (20dd4 <z_arm_fault_init+0x14>)
   20dc2:	695a      	ldr	r2, [r3, #20]
   20dc4:	f042 0210 	orr.w	r2, r2, #16
   20dc8:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   20dca:	695a      	ldr	r2, [r3, #20]
   20dcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   20dd0:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   20dd2:	4770      	bx	lr
   20dd4:	e000ed00 	.word	0xe000ed00

00020dd8 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   20dd8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   20ddc:	4905      	ldr	r1, [pc, #20]	; (20df4 <sys_arch_reboot+0x1c>)
   20dde:	4b06      	ldr	r3, [pc, #24]	; (20df8 <sys_arch_reboot+0x20>)
   20de0:	68ca      	ldr	r2, [r1, #12]
   20de2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   20de6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   20de8:	60cb      	str	r3, [r1, #12]
   20dea:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   20dee:	bf00      	nop
   20df0:	e7fd      	b.n	20dee <sys_arch_reboot+0x16>
   20df2:	bf00      	nop
   20df4:	e000ed00 	.word	0xe000ed00
   20df8:	05fa0004 	.word	0x05fa0004

00020dfc <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
   20dfc:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   20dfe:	2120      	movs	r1, #32
   20e00:	4803      	ldr	r0, [pc, #12]	; (20e10 <z_arm_int_lib_init+0x14>)
   20e02:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   20e04:	3301      	adds	r3, #1
   20e06:	2b41      	cmp	r3, #65	; 0x41
   20e08:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   20e0c:	d1f9      	bne.n	20e02 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   20e0e:	4770      	bx	lr
   20e10:	e000e100 	.word	0xe000e100

00020e14 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   20e14:	b538      	push	{r3, r4, r5, lr}
   20e16:	4604      	mov	r4, r0
	__asm__ volatile(
   20e18:	f04f 0320 	mov.w	r3, #32
   20e1c:	f3ef 8511 	mrs	r5, BASEPRI
   20e20:	f383 8811 	msr	BASEPRI, r3
   20e24:	f3bf 8f6f 	isb	sy
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   20e28:	7b03      	ldrb	r3, [r0, #12]
   20e2a:	07db      	lsls	r3, r3, #31
   20e2c:	d50c      	bpl.n	20e48 <z_impl_k_thread_abort+0x34>
   20e2e:	4912      	ldr	r1, [pc, #72]	; (20e78 <z_impl_k_thread_abort+0x64>)
   20e30:	2324      	movs	r3, #36	; 0x24
   20e32:	4a12      	ldr	r2, [pc, #72]	; (20e7c <z_impl_k_thread_abort+0x68>)
   20e34:	4812      	ldr	r0, [pc, #72]	; (20e80 <z_impl_k_thread_abort+0x6c>)
   20e36:	f01e fb06 	bl	3f446 <printk>
   20e3a:	4812      	ldr	r0, [pc, #72]	; (20e84 <z_impl_k_thread_abort+0x70>)
   20e3c:	f01e fb03 	bl	3f446 <printk>
   20e40:	2124      	movs	r1, #36	; 0x24
   20e42:	480e      	ldr	r0, [pc, #56]	; (20e7c <z_impl_k_thread_abort+0x68>)
   20e44:	f01e fb0c 	bl	3f460 <assert_post_action>
		 "essential thread aborted");

	z_thread_single_abort(thread);
   20e48:	4620      	mov	r0, r4
   20e4a:	f020 fce8 	bl	4181e <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   20e4e:	4b0e      	ldr	r3, [pc, #56]	; (20e88 <z_impl_k_thread_abort+0x74>)
   20e50:	689b      	ldr	r3, [r3, #8]
   20e52:	42a3      	cmp	r3, r4
   20e54:	d10b      	bne.n	20e6e <z_impl_k_thread_abort+0x5a>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   20e56:	4b0d      	ldr	r3, [pc, #52]	; (20e8c <z_impl_k_thread_abort+0x78>)
   20e58:	685a      	ldr	r2, [r3, #4]
   20e5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
   20e5e:	b912      	cbnz	r2, 20e66 <z_impl_k_thread_abort+0x52>
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
   20e60:	4628      	mov	r0, r5
   20e62:	f7ff fa71 	bl	20348 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   20e66:	685a      	ldr	r2, [r3, #4]
   20e68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   20e6c:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   20e6e:	4628      	mov	r0, r5
}
   20e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   20e74:	f020 bc68 	b.w	41748 <z_reschedule_irqlock>
   20e78:	000469a7 	.word	0x000469a7
   20e7c:	00046975 	.word	0x00046975
   20e80:	00045316 	.word	0x00045316
   20e84:	000469d5 	.word	0x000469d5
   20e88:	2002a1d8 	.word	0x2002a1d8
   20e8c:	e000ed00 	.word	0xe000ed00

00020e90 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   20e90:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   20e92:	4b0e      	ldr	r3, [pc, #56]	; (20ecc <z_arm_configure_static_mpu_regions+0x3c>)
{
   20e94:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   20e96:	9302      	str	r3, [sp, #8]
   20e98:	4b0d      	ldr	r3, [pc, #52]	; (20ed0 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   20e9a:	4c0e      	ldr	r4, [pc, #56]	; (20ed4 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   20e9c:	9303      	str	r3, [sp, #12]
   20e9e:	4b0e      	ldr	r3, [pc, #56]	; (20ed8 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   20ea0:	4a0e      	ldr	r2, [pc, #56]	; (20edc <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   20ea2:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   20ea4:	ab02      	add	r3, sp, #8
   20ea6:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   20ea8:	a801      	add	r0, sp, #4
   20eaa:	4623      	mov	r3, r4
   20eac:	2101      	movs	r1, #1
   20eae:	f000 f8c7 	bl	21040 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   20eb2:	2300      	movs	r3, #0
   20eb4:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   20eb6:	4b0a      	ldr	r3, [pc, #40]	; (20ee0 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   20eb8:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   20eba:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   20ebc:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   20ebe:	9305      	str	r3, [sp, #20]
   20ec0:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   20ec2:	f000 f9a5 	bl	21210 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   20ec6:	b008      	add	sp, #32
   20ec8:	bd10      	pop	{r4, pc}
   20eca:	bf00      	nop
   20ecc:	20020000 	.word	0x20020000
   20ed0:	00000000 	.word	0x00000000
   20ed4:	20040000 	.word	0x20040000
   20ed8:	00010006 	.word	0x00010006
   20edc:	20020000 	.word	0x20020000
   20ee0:	20020000 	.word	0x20020000

00020ee4 <region_allocate_and_init>:

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
   20ee4:	280f      	cmp	r0, #15
{
   20ee6:	b510      	push	{r4, lr}
	if (index > (get_num_regions() - 1)) {
   20ee8:	4602      	mov	r2, r0
   20eea:	d911      	bls.n	20f10 <region_allocate_and_init+0x2c>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   20eec:	2301      	movs	r3, #1
   20eee:	f04f 0000 	mov.w	r0, #0
   20ef2:	4911      	ldr	r1, [pc, #68]	; (20f38 <region_allocate_and_init+0x54>)
   20ef4:	f363 0007 	bfi	r0, r3, #0, #8
   20ef8:	4b10      	ldr	r3, [pc, #64]	; (20f3c <region_allocate_and_init+0x58>)
   20efa:	1a5b      	subs	r3, r3, r1
   20efc:	08db      	lsrs	r3, r3, #3
   20efe:	f363 108f 	bfi	r0, r3, #6, #10
   20f02:	490f      	ldr	r1, [pc, #60]	; (20f40 <region_allocate_and_init+0x5c>)
   20f04:	f01e fabd 	bl	3f482 <log_string_sync>
		return -EINVAL;
   20f08:	f06f 0215 	mvn.w	r2, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   20f0c:	4610      	mov	r0, r2
   20f0e:	bd10      	pop	{r4, pc}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
   20f10:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   20f12:	680b      	ldr	r3, [r1, #0]
   20f14:	f023 001f 	bic.w	r0, r3, #31
		| (region_conf->attr.rbar &
   20f18:	f004 031f 	and.w	r3, r4, #31
   20f1c:	4318      	orrs	r0, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   20f1e:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   20f20:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   20f22:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   20f26:	4907      	ldr	r1, [pc, #28]	; (20f44 <region_allocate_and_init+0x60>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   20f28:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   20f2c:	f043 0301 	orr.w	r3, r3, #1
   20f30:	608a      	str	r2, [r1, #8]
  mpu->RBAR = rbar;
   20f32:	60c8      	str	r0, [r1, #12]
  mpu->RLAR = rlar;
   20f34:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
   20f36:	e7e9      	b.n	20f0c <region_allocate_and_init+0x28>
   20f38:	00042fb4 	.word	0x00042fb4
   20f3c:	0004305c 	.word	0x0004305c
   20f40:	00046b99 	.word	0x00046b99
   20f44:	e000ed90 	.word	0xe000ed90

00020f48 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   20f48:	2205      	movs	r2, #5
   20f4a:	4b03      	ldr	r3, [pc, #12]	; (20f58 <arm_core_mpu_enable+0x10>)
   20f4c:	605a      	str	r2, [r3, #4]
   20f4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   20f52:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   20f56:	4770      	bx	lr
   20f58:	e000ed90 	.word	0xe000ed90

00020f5c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   20f5c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   20f60:	2200      	movs	r2, #0
   20f62:	4b01      	ldr	r3, [pc, #4]	; (20f68 <arm_core_mpu_disable+0xc>)
   20f64:	605a      	str	r2, [r3, #4]
}
   20f66:	4770      	bx	lr
   20f68:	e000ed90 	.word	0xe000ed90

00020f6c <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   20f6c:	482a      	ldr	r0, [pc, #168]	; (21018 <arm_mpu_init+0xac>)
{
   20f6e:	b570      	push	{r4, r5, r6, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   20f70:	6804      	ldr	r4, [r0, #0]
   20f72:	2c10      	cmp	r4, #16
   20f74:	d913      	bls.n	20f9e <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   20f76:	f240 132d 	movw	r3, #301	; 0x12d
   20f7a:	4a28      	ldr	r2, [pc, #160]	; (2101c <arm_mpu_init+0xb0>)
   20f7c:	4928      	ldr	r1, [pc, #160]	; (21020 <arm_mpu_init+0xb4>)
   20f7e:	4829      	ldr	r0, [pc, #164]	; (21024 <arm_mpu_init+0xb8>)
   20f80:	f01e fa61 	bl	3f446 <printk>
   20f84:	2210      	movs	r2, #16
   20f86:	4621      	mov	r1, r4
   20f88:	4827      	ldr	r0, [pc, #156]	; (21028 <arm_mpu_init+0xbc>)
   20f8a:	f01e fa5c 	bl	3f446 <printk>
   20f8e:	4823      	ldr	r0, [pc, #140]	; (2101c <arm_mpu_init+0xb0>)
   20f90:	f240 112d 	movw	r1, #301	; 0x12d
   20f94:	f01e fa64 	bl	3f460 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   20f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
   20f9c:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
   20f9e:	f7ff ffdd 	bl	20f5c <arm_core_mpu_disable>
	MPU->MAIR0 =
   20fa2:	6845      	ldr	r5, [r0, #4]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   20fa4:	2000      	movs	r0, #0
   20fa6:	4921      	ldr	r1, [pc, #132]	; (2102c <arm_mpu_init+0xc0>)
   20fa8:	4b21      	ldr	r3, [pc, #132]	; (21030 <arm_mpu_init+0xc4>)
   20faa:	630b      	str	r3, [r1, #48]	; 0x30
   20fac:	4284      	cmp	r4, r0
   20fae:	f105 0610 	add.w	r6, r5, #16
   20fb2:	d119      	bne.n	20fe8 <arm_mpu_init+0x7c>
	static_regions_num = mpu_config.num_regions;
   20fb4:	4b1f      	ldr	r3, [pc, #124]	; (21034 <arm_mpu_init+0xc8>)
   20fb6:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   20fb8:	f7ff ffc6 	bl	20f48 <arm_core_mpu_enable>
	__ASSERT(
   20fbc:	680b      	ldr	r3, [r1, #0]
   20fbe:	f3c3 2307 	ubfx	r3, r3, #8, #8
   20fc2:	2b10      	cmp	r3, #16
   20fc4:	d00e      	beq.n	20fe4 <arm_mpu_init+0x78>
   20fc6:	491c      	ldr	r1, [pc, #112]	; (21038 <arm_mpu_init+0xcc>)
   20fc8:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   20fcc:	4a13      	ldr	r2, [pc, #76]	; (2101c <arm_mpu_init+0xb0>)
   20fce:	4815      	ldr	r0, [pc, #84]	; (21024 <arm_mpu_init+0xb8>)
   20fd0:	f01e fa39 	bl	3f446 <printk>
   20fd4:	4819      	ldr	r0, [pc, #100]	; (2103c <arm_mpu_init+0xd0>)
   20fd6:	f01e fa36 	bl	3f446 <printk>
   20fda:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   20fde:	480f      	ldr	r0, [pc, #60]	; (2101c <arm_mpu_init+0xb0>)
   20fe0:	f01e fa3e 	bl	3f460 <assert_post_action>
	return 0;
   20fe4:	2000      	movs	r0, #0
   20fe6:	e7d9      	b.n	20f9c <arm_mpu_init+0x30>
		(region_conf->base & MPU_RBAR_BASE_Msk)
   20fe8:	f856 3c10 	ldr.w	r3, [r6, #-16]
		| (region_conf->attr.rbar &
   20fec:	7a2d      	ldrb	r5, [r5, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   20fee:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   20ff2:	f005 031f 	and.w	r3, r5, #31
   20ff6:	431a      	orrs	r2, r3
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   20ff8:	f856 3c04 	ldr.w	r3, [r6, #-4]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   20ffc:	096d      	lsrs	r5, r5, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   20ffe:	f023 031f 	bic.w	r3, r3, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   21002:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
		| MPU_RLAR_EN_Msk
   21006:	f043 0301 	orr.w	r3, r3, #1
  mpu->RNR = rnr;
   2100a:	6088      	str	r0, [r1, #8]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2100c:	4635      	mov	r5, r6
  mpu->RBAR = rbar;
   2100e:	60ca      	str	r2, [r1, #12]
   21010:	3001      	adds	r0, #1
  mpu->RLAR = rlar;
   21012:	610b      	str	r3, [r1, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
   21014:	e7ca      	b.n	20fac <arm_mpu_init+0x40>
   21016:	bf00      	nop
   21018:	00043304 	.word	0x00043304
   2101c:	00046ac2 	.word	0x00046ac2
   21020:	0004a2c3 	.word	0x0004a2c3
   21024:	00045316 	.word	0x00045316
   21028:	00046af3 	.word	0x00046af3
   2102c:	e000ed90 	.word	0xe000ed90
   21030:	0044ffaa 	.word	0x0044ffaa
   21034:	2002ada1 	.word	0x2002ada1
   21038:	00046b27 	.word	0x00046b27
   2103c:	00046b78 	.word	0x00046b78

00021040 <arm_core_mpu_configure_static_mpu_regions>:
{
   21040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21044:	4689      	mov	r9, r1
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   21046:	2700      	movs	r7, #0
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   21048:	4e67      	ldr	r6, [pc, #412]	; (211e8 <arm_core_mpu_configure_static_mpu_regions+0x1a8>)
	MPU->RNR = index;
   2104a:	4d68      	ldr	r5, [pc, #416]	; (211ec <arm_core_mpu_configure_static_mpu_regions+0x1ac>)
	int reg_index = start_reg_index;
   2104c:	7834      	ldrb	r4, [r6, #0]
   2104e:	b087      	sub	sp, #28
   21050:	f1a0 0804 	sub.w	r8, r0, #4
	for (i = 0; i < regions_num; i++) {
   21054:	454f      	cmp	r7, r9
   21056:	da7b      	bge.n	21150 <arm_core_mpu_configure_static_mpu_regions+0x110>
		if (regions[i]->size == 0U) {
   21058:	f858 3f04 	ldr.w	r3, [r8, #4]!
   2105c:	f8d3 a004 	ldr.w	sl, [r3, #4]
   21060:	f1ba 0f00 	cmp.w	sl, #0
   21064:	d062      	beq.n	2112c <arm_core_mpu_configure_static_mpu_regions+0xec>
		&&
   21066:	f1ba 0f1f 	cmp.w	sl, #31
   2106a:	d922      	bls.n	210b2 <arm_core_mpu_configure_static_mpu_regions+0x72>
		&&
   2106c:	f01a 0f1f 	tst.w	sl, #31
   21070:	d11f      	bne.n	210b2 <arm_core_mpu_configure_static_mpu_regions+0x72>
		((part->start &
   21072:	f8d3 b000 	ldr.w	fp, [r3]
		&&
   21076:	f01b 0f1f 	tst.w	fp, #31
   2107a:	d11a      	bne.n	210b2 <arm_core_mpu_configure_static_mpu_regions+0x72>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   2107c:	4658      	mov	r0, fp
   2107e:	f01e fbf1 	bl	3f864 <arm_cmse_mpu_region_get>
   21082:	9001      	str	r0, [sp, #4]
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   21084:	eb0a 000b 	add.w	r0, sl, fp
   21088:	3801      	subs	r0, #1
   2108a:	f01e fbeb 	bl	3f864 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   2108e:	9a01      	ldr	r2, [sp, #4]
   21090:	4282      	cmp	r2, r0
   21092:	d02e      	beq.n	210f2 <arm_core_mpu_configure_static_mpu_regions+0xb2>
	return -EINVAL;
   21094:	f06f 0215 	mvn.w	r2, #21
			LOG_ERR("Invalid underlying region index %u",
   21098:	2301      	movs	r3, #1
   2109a:	f04f 0000 	mov.w	r0, #0
   2109e:	4954      	ldr	r1, [pc, #336]	; (211f0 <arm_core_mpu_configure_static_mpu_regions+0x1b0>)
   210a0:	f363 0007 	bfi	r0, r3, #0, #8
   210a4:	4b53      	ldr	r3, [pc, #332]	; (211f4 <arm_core_mpu_configure_static_mpu_regions+0x1b4>)
   210a6:	1a5b      	subs	r3, r3, r1
   210a8:	08db      	lsrs	r3, r3, #3
   210aa:	f363 108f 	bfi	r0, r3, #6, #10
   210ae:	4952      	ldr	r1, [pc, #328]	; (211f8 <arm_core_mpu_configure_static_mpu_regions+0x1b8>)
   210b0:	e00c      	b.n	210cc <arm_core_mpu_configure_static_mpu_regions+0x8c>
			LOG_ERR("Partition %u: sanity check failed.", i);
   210b2:	2301      	movs	r3, #1
   210b4:	f04f 0000 	mov.w	r0, #0
   210b8:	4a4d      	ldr	r2, [pc, #308]	; (211f0 <arm_core_mpu_configure_static_mpu_regions+0x1b0>)
   210ba:	f363 0007 	bfi	r0, r3, #0, #8
   210be:	4b4d      	ldr	r3, [pc, #308]	; (211f4 <arm_core_mpu_configure_static_mpu_regions+0x1b4>)
   210c0:	494e      	ldr	r1, [pc, #312]	; (211fc <arm_core_mpu_configure_static_mpu_regions+0x1bc>)
   210c2:	1a9b      	subs	r3, r3, r2
   210c4:	463a      	mov	r2, r7
   210c6:	08db      	lsrs	r3, r3, #3
   210c8:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
   210cc:	f01e f9d9 	bl	3f482 <log_string_sync>
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   210d0:	23ea      	movs	r3, #234	; 0xea
   210d2:	7033      	strb	r3, [r6, #0]
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   210d4:	23f3      	movs	r3, #243	; 0xf3
   210d6:	4a4a      	ldr	r2, [pc, #296]	; (21200 <arm_core_mpu_configure_static_mpu_regions+0x1c0>)
   210d8:	494a      	ldr	r1, [pc, #296]	; (21204 <arm_core_mpu_configure_static_mpu_regions+0x1c4>)
   210da:	484b      	ldr	r0, [pc, #300]	; (21208 <arm_core_mpu_configure_static_mpu_regions+0x1c8>)
   210dc:	f01e f9b3 	bl	3f446 <printk>
   210e0:	4649      	mov	r1, r9
   210e2:	484a      	ldr	r0, [pc, #296]	; (2120c <arm_core_mpu_configure_static_mpu_regions+0x1cc>)
   210e4:	f01e f9af 	bl	3f446 <printk>
   210e8:	21f3      	movs	r1, #243	; 0xf3
   210ea:	4845      	ldr	r0, [pc, #276]	; (21200 <arm_core_mpu_configure_static_mpu_regions+0x1c0>)
   210ec:	f01e f9b8 	bl	3f460 <assert_post_action>
}
   210f0:	e031      	b.n	21156 <arm_core_mpu_configure_static_mpu_regions+0x116>
		if ((u_reg_index == -EINVAL) ||
   210f2:	f112 0f16 	cmn.w	r2, #22
   210f6:	d0cf      	beq.n	21098 <arm_core_mpu_configure_static_mpu_regions+0x58>
			(u_reg_index > (reg_index - 1))) {
   210f8:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   210fa:	4293      	cmp	r3, r2
   210fc:	dbcc      	blt.n	21098 <arm_core_mpu_configure_static_mpu_regions+0x58>
	MPU->RNR = index;
   210fe:	60aa      	str	r2, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   21100:	f8d5 c00c 	ldr.w	ip, [r5, #12]
	MPU->RNR = index;
   21104:	60aa      	str	r2, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   21106:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   21108:	f8d8 1000 	ldr.w	r1, [r8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   2110c:	f02c 0c1f 	bic.w	ip, ip, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   21110:	f043 0b1f 	orr.w	fp, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   21114:	e9d1 3000 	ldrd	r3, r0, [r1]
   21118:	4418      	add	r0, r3
		if ((regions[i]->start == u_reg_base) &&
   2111a:	459c      	cmp	ip, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   2111c:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
   21120:	d11c      	bne.n	2115c <arm_core_mpu_configure_static_mpu_regions+0x11c>
   21122:	45d3      	cmp	fp, sl
   21124:	d104      	bne.n	21130 <arm_core_mpu_configure_static_mpu_regions+0xf0>
			mpu_configure_region(u_reg_index, regions[i]);
   21126:	b2d0      	uxtb	r0, r2
   21128:	f01e fb81 	bl	3f82e <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   2112c:	3701      	adds	r7, #1
   2112e:	e791      	b.n	21054 <arm_core_mpu_configure_static_mpu_regions+0x14>
	MPU->RNR = index;
   21130:	60aa      	str	r2, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   21132:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   21134:	f020 001f 	bic.w	r0, r0, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   21138:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   2113c:	4318      	orrs	r0, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   2113e:	60e8      	str	r0, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   21140:	b2e0      	uxtb	r0, r4
   21142:	f01e fb74 	bl	3f82e <mpu_configure_region>
			if (reg_index == -EINVAL) {
   21146:	f110 0f16 	cmn.w	r0, #22
   2114a:	d14a      	bne.n	211e2 <arm_core_mpu_configure_static_mpu_regions+0x1a2>
				mpu_configure_region(reg_index, regions[i]);
   2114c:	f06f 0415 	mvn.w	r4, #21
	static_regions_num = mpu_reg_index;
   21150:	7034      	strb	r4, [r6, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   21152:	3416      	adds	r4, #22
   21154:	d0be      	beq.n	210d4 <arm_core_mpu_configure_static_mpu_regions+0x94>
}
   21156:	b007      	add	sp, #28
   21158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (reg_last == u_reg_last) {
   2115c:	3b01      	subs	r3, #1
   2115e:	45d3      	cmp	fp, sl
   21160:	b2e0      	uxtb	r0, r4
   21162:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
   21166:	60aa      	str	r2, [r5, #8]
		} else if (reg_last == u_reg_last) {
   21168:	d105      	bne.n	21176 <arm_core_mpu_configure_static_mpu_regions+0x136>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   2116a:	692a      	ldr	r2, [r5, #16]
   2116c:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   21170:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   21172:	612b      	str	r3, [r5, #16]
			reg_index =
   21174:	e7e5      	b.n	21142 <arm_core_mpu_configure_static_mpu_regions+0x102>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   21176:	692c      	ldr	r4, [r5, #16]
	MPU->RNR = index;
   21178:	9201      	str	r2, [sp, #4]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   2117a:	f004 0c1f 	and.w	ip, r4, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   2117e:	ea4c 0303 	orr.w	r3, ip, r3
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   21182:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, regions[i]);
   21184:	f01e fb53 	bl	3f82e <mpu_configure_region>
			if (reg_index == -EINVAL) {
   21188:	f110 0f16 	cmn.w	r0, #22
   2118c:	d0a0      	beq.n	210d0 <arm_core_mpu_configure_static_mpu_regions+0x90>
	MPU->RNR = index;
   2118e:	9a01      	ldr	r2, [sp, #4]
			REGION_LIMIT_ADDR((regions[i]->start +
   21190:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
	MPU->RNR = index;
   21194:	60aa      	str	r2, [r5, #8]
	attr->rbar = MPU->RBAR &
   21196:	68ea      	ldr	r2, [r5, #12]
   21198:	f89d 3010 	ldrb.w	r3, [sp, #16]
			reg_index++;
   2119c:	3001      	adds	r0, #1
	attr->rbar = MPU->RBAR &
   2119e:	f362 0304 	bfi	r3, r2, #0, #5
   211a2:	f88d 3010 	strb.w	r3, [sp, #16]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   211a6:	692b      	ldr	r3, [r5, #16]
   211a8:	f89d 2010 	ldrb.w	r2, [sp, #16]
   211ac:	085b      	lsrs	r3, r3, #1
   211ae:	f363 1247 	bfi	r2, r3, #5, #3
   211b2:	f88d 2010 	strb.w	r2, [sp, #16]
			fill_region.base = regions[i]->start +
   211b6:	f8d8 2000 	ldr.w	r2, [r8]
				region_allocate_and_init(reg_index,
   211ba:	a902      	add	r1, sp, #8
			fill_region.base = regions[i]->start +
   211bc:	e9d2 3200 	ldrd	r3, r2, [r2]
   211c0:	4413      	add	r3, r2
   211c2:	9302      	str	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   211c4:	f023 031f 	bic.w	r3, r3, #31
   211c8:	445b      	add	r3, fp
   211ca:	eba3 030a 	sub.w	r3, r3, sl
   211ce:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   211d2:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   211d4:	9305      	str	r3, [sp, #20]
				region_allocate_and_init(reg_index,
   211d6:	f7ff fe85 	bl	20ee4 <region_allocate_and_init>
			if (reg_index == -EINVAL) {
   211da:	f110 0f16 	cmn.w	r0, #22
   211de:	f43f af77 	beq.w	210d0 <arm_core_mpu_configure_static_mpu_regions+0x90>
			reg_index++;
   211e2:	1c44      	adds	r4, r0, #1
   211e4:	e7a2      	b.n	2112c <arm_core_mpu_configure_static_mpu_regions+0xec>
   211e6:	bf00      	nop
   211e8:	2002ada1 	.word	0x2002ada1
   211ec:	e000ed90 	.word	0xe000ed90
   211f0:	00042fb4 	.word	0x00042fb4
   211f4:	0004305c 	.word	0x0004305c
   211f8:	00046a44 	.word	0x00046a44
   211fc:	00046a21 	.word	0x00046a21
   21200:	00046ac2 	.word	0x00046ac2
   21204:	0004a2c3 	.word	0x0004a2c3
   21208:	00045316 	.word	0x00045316
   2120c:	00046a67 	.word	0x00046a67

00021210 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   21210:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21214:	4c2e      	ldr	r4, [pc, #184]	; (212d0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
   21216:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   21218:	4680      	mov	r8, r0
   2121a:	2700      	movs	r7, #0
   2121c:	46a2      	mov	sl, r4
	attr->rbar = MPU->RBAR &
   2121e:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
   21222:	4d2c      	ldr	r5, [pc, #176]	; (212d4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   21224:	454f      	cmp	r7, r9
   21226:	db02      	blt.n	2122e <arm_core_mpu_mark_areas_for_dynamic_regions+0x1e>
}
   21228:	b003      	add	sp, #12
   2122a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   2122e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   21232:	9301      	str	r3, [sp, #4]
   21234:	2b00      	cmp	r3, #0
   21236:	d046      	beq.n	212c6 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb6>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   21238:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   2123c:	4608      	mov	r0, r1
   2123e:	9100      	str	r1, [sp, #0]
   21240:	f01e fb10 	bl	3f864 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   21244:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   21248:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   2124a:	1858      	adds	r0, r3, r1
   2124c:	3801      	subs	r0, #1
   2124e:	f01e fb09 	bl	3f864 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   21252:	4286      	cmp	r6, r0
   21254:	4a20      	ldr	r2, [pc, #128]	; (212d8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
   21256:	d018      	beq.n	2128a <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
   21258:	2314      	movs	r3, #20
   2125a:	435f      	muls	r7, r3
   2125c:	f06f 0315 	mvn.w	r3, #21
   21260:	f84a 3007 	str.w	r3, [sl, r7]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   21264:	f240 1303 	movw	r3, #259	; 0x103
   21268:	4a1c      	ldr	r2, [pc, #112]	; (212dc <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   2126a:	491d      	ldr	r1, [pc, #116]	; (212e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   2126c:	481d      	ldr	r0, [pc, #116]	; (212e4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   2126e:	f01e f8ea 	bl	3f446 <printk>
   21272:	4649      	mov	r1, r9
   21274:	481c      	ldr	r0, [pc, #112]	; (212e8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   21276:	f01e f8e6 	bl	3f446 <printk>
   2127a:	f240 1103 	movw	r1, #259	; 0x103
   2127e:	4817      	ldr	r0, [pc, #92]	; (212dc <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
}
   21280:	b003      	add	sp, #12
   21282:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   21286:	f01e b8eb 	b.w	3f460 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   2128a:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
   2128e:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   21290:	d0e8      	beq.n	21264 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   21292:	7813      	ldrb	r3, [r2, #0]
   21294:	42b3      	cmp	r3, r6
   21296:	dde5      	ble.n	21264 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   21298:	fb0b a307 	mla	r3, fp, r7, sl
	MPU->RNR = index;
   2129c:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
   2129e:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
   212a0:	68e8      	ldr	r0, [r5, #12]
   212a2:	7b19      	ldrb	r1, [r3, #12]
   212a4:	f360 0104 	bfi	r1, r0, #0, #5
   212a8:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   212aa:	6929      	ldr	r1, [r5, #16]
   212ac:	7b18      	ldrb	r0, [r3, #12]
   212ae:	0849      	lsrs	r1, r1, #1
   212b0:	f361 1047 	bfi	r0, r1, #5, #3
   212b4:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   212b6:	68eb      	ldr	r3, [r5, #12]
   212b8:	f023 031f 	bic.w	r3, r3, #31
   212bc:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   212be:	692b      	ldr	r3, [r5, #16]
   212c0:	f023 031f 	bic.w	r3, r3, #31
   212c4:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   212c6:	3701      	adds	r7, #1
   212c8:	3414      	adds	r4, #20
   212ca:	f108 080c 	add.w	r8, r8, #12
   212ce:	e7a9      	b.n	21224 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   212d0:	2002395c 	.word	0x2002395c
   212d4:	e000ed90 	.word	0xe000ed90
   212d8:	2002ada1 	.word	0x2002ada1
   212dc:	00046ac2 	.word	0x00046ac2
   212e0:	0004a2c3 	.word	0x0004a2c3
   212e4:	00045316 	.word	0x00045316
   212e8:	00046a93 	.word	0x00046a93

000212ec <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   212ec:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
   212ee:	4b26      	ldr	r3, [pc, #152]	; (21388 <arm_core_mpu_configure_dynamic_mpu_regions+0x9c>)
   212f0:	4606      	mov	r6, r0
   212f2:	7818      	ldrb	r0, [r3, #0]
   212f4:	460d      	mov	r5, r1

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   212f6:	4602      	mov	r2, r0
  mpu->RLAR = 0U;
   212f8:	2100      	movs	r1, #0
   212fa:	4b24      	ldr	r3, [pc, #144]	; (2138c <arm_core_mpu_configure_dynamic_mpu_regions+0xa0>)
   212fc:	2a0f      	cmp	r2, #15
   212fe:	dd09      	ble.n	21314 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>
   21300:	2400      	movs	r4, #0
	/* We are going to skip the full partition of the background areas.
	 * So we can disable MPU regions inside which dynamic memroy regions
	 * may be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		ARM_MPU_ClrRegion(dyn_reg_info[i].index);
   21302:	4a23      	ldr	r2, [pc, #140]	; (21390 <arm_core_mpu_configure_dynamic_mpu_regions+0xa4>)
   21304:	6812      	ldr	r2, [r2, #0]
  mpu->RNR = rnr;
   21306:	609a      	str	r2, [r3, #8]
  mpu->RLAR = 0U;
   21308:	611c      	str	r4, [r3, #16]
	for (i = 0; i < regions_num; i++) {
   2130a:	42ac      	cmp	r4, r5
   2130c:	db06      	blt.n	2131c <arm_core_mpu_configure_dynamic_mpu_regions+0x30>
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   2130e:	3016      	adds	r0, #22
   21310:	d019      	beq.n	21346 <arm_core_mpu_configure_dynamic_mpu_regions+0x5a>
}
   21312:	bd70      	pop	{r4, r5, r6, pc}
  mpu->RNR = rnr;
   21314:	609a      	str	r2, [r3, #8]
  mpu->RLAR = 0U;
   21316:	6119      	str	r1, [r3, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   21318:	3201      	adds	r2, #1
   2131a:	e7ef      	b.n	212fc <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		if (regions[i]->size == 0U) {
   2131c:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   21320:	684b      	ldr	r3, [r1, #4]
   21322:	b373      	cbz	r3, 21382 <arm_core_mpu_configure_dynamic_mpu_regions+0x96>
		&&
   21324:	2b1f      	cmp	r3, #31
   21326:	d820      	bhi.n	2136a <arm_core_mpu_configure_dynamic_mpu_regions+0x7e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   21328:	2301      	movs	r3, #1
   2132a:	f04f 0000 	mov.w	r0, #0
   2132e:	4a19      	ldr	r2, [pc, #100]	; (21394 <arm_core_mpu_configure_dynamic_mpu_regions+0xa8>)
   21330:	f363 0007 	bfi	r0, r3, #0, #8
   21334:	4b18      	ldr	r3, [pc, #96]	; (21398 <arm_core_mpu_configure_dynamic_mpu_regions+0xac>)
   21336:	4919      	ldr	r1, [pc, #100]	; (2139c <arm_core_mpu_configure_dynamic_mpu_regions+0xb0>)
   21338:	1a9b      	subs	r3, r3, r2
   2133a:	08db      	lsrs	r3, r3, #3
   2133c:	f363 108f 	bfi	r0, r3, #6, #10
   21340:	4622      	mov	r2, r4
   21342:	f01e f89e 	bl	3f482 <log_string_sync>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   21346:	f44f 7389 	mov.w	r3, #274	; 0x112
   2134a:	4a15      	ldr	r2, [pc, #84]	; (213a0 <arm_core_mpu_configure_dynamic_mpu_regions+0xb4>)
   2134c:	4915      	ldr	r1, [pc, #84]	; (213a4 <arm_core_mpu_configure_dynamic_mpu_regions+0xb8>)
   2134e:	4816      	ldr	r0, [pc, #88]	; (213a8 <arm_core_mpu_configure_dynamic_mpu_regions+0xbc>)
   21350:	f01e f879 	bl	3f446 <printk>
   21354:	4629      	mov	r1, r5
   21356:	4815      	ldr	r0, [pc, #84]	; (213ac <arm_core_mpu_configure_dynamic_mpu_regions+0xc0>)
   21358:	f01e f875 	bl	3f446 <printk>
}
   2135c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   21360:	f44f 7189 	mov.w	r1, #274	; 0x112
   21364:	480e      	ldr	r0, [pc, #56]	; (213a0 <arm_core_mpu_configure_dynamic_mpu_regions+0xb4>)
   21366:	f01e b87b 	b.w	3f460 <assert_post_action>
		&&
   2136a:	06da      	lsls	r2, r3, #27
   2136c:	d1dc      	bne.n	21328 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>
		((part->start &
   2136e:	680b      	ldr	r3, [r1, #0]
		&&
   21370:	06db      	lsls	r3, r3, #27
   21372:	d1d9      	bne.n	21328 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>
		reg_index = mpu_configure_region(reg_index, regions[i]);
   21374:	b2c0      	uxtb	r0, r0
   21376:	f01e fa5a 	bl	3f82e <mpu_configure_region>
		if (reg_index == -EINVAL) {
   2137a:	f110 0f16 	cmn.w	r0, #22
   2137e:	d0e2      	beq.n	21346 <arm_core_mpu_configure_dynamic_mpu_regions+0x5a>
		reg_index++;
   21380:	3001      	adds	r0, #1
	for (i = 0; i < regions_num; i++) {
   21382:	3401      	adds	r4, #1
   21384:	e7c1      	b.n	2130a <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
   21386:	bf00      	nop
   21388:	2002ada1 	.word	0x2002ada1
   2138c:	e000ed90 	.word	0xe000ed90
   21390:	2002395c 	.word	0x2002395c
   21394:	00042fb4 	.word	0x00042fb4
   21398:	0004305c 	.word	0x0004305c
   2139c:	00046a21 	.word	0x00046a21
   213a0:	00046ac2 	.word	0x00046ac2
   213a4:	0004a2c3 	.word	0x0004a2c3
   213a8:	00045316 	.word	0x00045316
   213ac:	000469f4 	.word	0x000469f4

000213b0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   213b0:	4b01      	ldr	r3, [pc, #4]	; (213b8 <__stdout_hook_install+0x8>)
   213b2:	6018      	str	r0, [r3, #0]
}
   213b4:	4770      	bx	lr
   213b6:	bf00      	nop
   213b8:	20031c10 	.word	0x20031c10

000213bc <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   213bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   213be:	4606      	mov	r6, r0
   213c0:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   213c2:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   213c4:	4f06      	ldr	r7, [pc, #24]	; (213e0 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   213c6:	42ac      	cmp	r4, r5
   213c8:	da08      	bge.n	213dc <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   213ca:	683b      	ldr	r3, [r7, #0]
   213cc:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   213ce:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   213d0:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   213d2:	f104 0401 	add.w	r4, r4, #1
   213d6:	d001      	beq.n	213dc <z_impl_zephyr_read_stdin+0x20>
   213d8:	280d      	cmp	r0, #13
   213da:	d1f4      	bne.n	213c6 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   213dc:	4620      	mov	r0, r4
   213de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   213e0:	20031c0c 	.word	0x20031c0c

000213e4 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   213e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   213e6:	460e      	mov	r6, r1
   213e8:	4f09      	ldr	r7, [pc, #36]	; (21410 <z_impl_zephyr_write_stdout+0x2c>)
   213ea:	1e44      	subs	r4, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   213ec:	f1c0 0501 	rsb	r5, r0, #1
   213f0:	192b      	adds	r3, r5, r4
   213f2:	429e      	cmp	r6, r3
   213f4:	dc01      	bgt.n	213fa <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   213f6:	4630      	mov	r0, r6
   213f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   213fa:	7863      	ldrb	r3, [r4, #1]
   213fc:	2b0a      	cmp	r3, #10
   213fe:	d102      	bne.n	21406 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   21400:	683b      	ldr	r3, [r7, #0]
   21402:	200d      	movs	r0, #13
   21404:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   21406:	683b      	ldr	r3, [r7, #0]
   21408:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   2140c:	4798      	blx	r3
   2140e:	e7ef      	b.n	213f0 <z_impl_zephyr_write_stdout+0xc>
   21410:	20031c10 	.word	0x20031c10

00021414 <_exit>:
	return 0;
}
FUNC_ALIAS(_fstat, fstat, int);

void _exit(int status)
{
   21414:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   21416:	2105      	movs	r1, #5
   21418:	4801      	ldr	r0, [pc, #4]	; (21420 <_exit+0xc>)
   2141a:	f7ff ffe3 	bl	213e4 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
		;
   2141e:	e7fe      	b.n	2141e <_exit+0xa>
   21420:	00046bbf 	.word	0x00046bbf

00021424 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   21424:	b538      	push	{r3, r4, r5, lr}
   21426:	4605      	mov	r5, r0
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
   21428:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2142c:	480b      	ldr	r0, [pc, #44]	; (2145c <_sbrk+0x38>)
   2142e:	f01d fd4f 	bl	3eed0 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   21432:	4a0b      	ldr	r2, [pc, #44]	; (21460 <_sbrk+0x3c>)
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   21434:	490b      	ldr	r1, [pc, #44]	; (21464 <_sbrk+0x40>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
   21436:	6814      	ldr	r4, [r2, #0]
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   21438:	f1c1 5300 	rsb	r3, r1, #536870912	; 0x20000000
   2143c:	4425      	add	r5, r4
   2143e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   21442:	429d      	cmp	r5, r3
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   21444:	bf2c      	ite	cs
   21446:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
   2144a:	1864      	addcc	r4, r4, r1
	}

	sys_sem_give(&heap_sem);
   2144c:	4803      	ldr	r0, [pc, #12]	; (2145c <_sbrk+0x38>)
		heap_sz += count;
   2144e:	bf38      	it	cc
   21450:	6015      	strcc	r5, [r2, #0]
	sys_sem_give(&heap_sem);
   21452:	f01d fd38 	bl	3eec6 <sys_sem_give>

	return ret;
}
   21456:	4620      	mov	r0, r4
   21458:	bd38      	pop	{r3, r4, r5, pc}
   2145a:	bf00      	nop
   2145c:	20031ff0 	.word	0x20031ff0
   21460:	20023970 	.word	0x20023970
   21464:	2003209c 	.word	0x2003209c

00021468 <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
   21468:	b538      	push	{r3, r4, r5, lr}
   2146a:	460d      	mov	r5, r1
	NET_ASSERT(iface);
   2146c:	4604      	mov	r4, r0
   2146e:	b958      	cbnz	r0, 21488 <net_if_flag_is_set+0x20>
   21470:	4909      	ldr	r1, [pc, #36]	; (21498 <net_if_flag_is_set+0x30>)
   21472:	480a      	ldr	r0, [pc, #40]	; (2149c <net_if_flag_is_set+0x34>)
   21474:	f240 2311 	movw	r3, #529	; 0x211
   21478:	4a09      	ldr	r2, [pc, #36]	; (214a0 <net_if_flag_is_set+0x38>)
   2147a:	f01d ffe4 	bl	3f446 <printk>
   2147e:	f240 2111 	movw	r1, #529	; 0x211
   21482:	4807      	ldr	r0, [pc, #28]	; (214a0 <net_if_flag_is_set+0x38>)
   21484:	f01d ffec 	bl	3f460 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21488:	6823      	ldr	r3, [r4, #0]
   2148a:	330c      	adds	r3, #12
   2148c:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   21490:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
   21492:	f000 0001 	and.w	r0, r0, #1
   21496:	bd38      	pop	{r3, r4, r5, pc}
   21498:	00046bee 	.word	0x00046bee
   2149c:	00045316 	.word	0x00045316
   214a0:	00046bcd 	.word	0x00046bcd

000214a4 <net_if_flag_set.constprop.25>:
static inline void net_if_flag_set(struct net_if *iface,
   214a4:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   214a6:	4604      	mov	r4, r0
   214a8:	b958      	cbnz	r0, 214c2 <net_if_flag_set.constprop.25+0x1e>
   214aa:	490b      	ldr	r1, [pc, #44]	; (214d8 <net_if_flag_set.constprop.25+0x34>)
   214ac:	480b      	ldr	r0, [pc, #44]	; (214dc <net_if_flag_set.constprop.25+0x38>)
   214ae:	f240 13e3 	movw	r3, #483	; 0x1e3
   214b2:	4a0b      	ldr	r2, [pc, #44]	; (214e0 <net_if_flag_set.constprop.25+0x3c>)
   214b4:	f01d ffc7 	bl	3f446 <printk>
   214b8:	f240 11e3 	movw	r1, #483	; 0x1e3
   214bc:	4808      	ldr	r0, [pc, #32]	; (214e0 <net_if_flag_set.constprop.25+0x3c>)
   214be:	f01d ffcf 	bl	3f460 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   214c2:	6823      	ldr	r3, [r4, #0]
   214c4:	330c      	adds	r3, #12
   214c6:	e8d3 2fef 	ldaex	r2, [r3]
   214ca:	f042 0201 	orr.w	r2, r2, #1
   214ce:	e8c3 2fe1 	stlex	r1, r2, [r3]
   214d2:	2900      	cmp	r1, #0
   214d4:	d1f7      	bne.n	214c6 <net_if_flag_set.constprop.25+0x22>
}
   214d6:	bd10      	pop	{r4, pc}
   214d8:	00046bee 	.word	0x00046bee
   214dc:	00045316 	.word	0x00045316
   214e0:	00046bcd 	.word	0x00046bcd

000214e4 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   214e4:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   214e6:	2100      	movs	r1, #0
{
   214e8:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   214ea:	f7ff ffbd 	bl	21468 <net_if_flag_is_set>
   214ee:	b928      	cbnz	r0, 214fc <net_if_up+0x18>
	}

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
   214f0:	682b      	ldr	r3, [r5, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   214f2:	7e9a      	ldrb	r2, [r3, #26]
   214f4:	b122      	cbz	r2, 21500 <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
   214f6:	4628      	mov	r0, r5
   214f8:	f7ff ffd4 	bl	214a4 <net_if_flag_set.constprop.25>
		return 0;
   214fc:	2000      	movs	r0, #0
   214fe:	e01f      	b.n	21540 <net_if_up+0x5c>
 *
 * @return a pointer to the iface L2
 */
static inline const struct net_l2 * const net_if_l2(struct net_if *iface)
{
	return iface->if_dev->l2;
   21500:	685b      	ldr	r3, [r3, #4]
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   21502:	b9ab      	cbnz	r3, 21530 <net_if_up+0x4c>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   21504:	682b      	ldr	r3, [r5, #0]
   21506:	691b      	ldr	r3, [r3, #16]
   21508:	b95b      	cbnz	r3, 21522 <net_if_up+0x3e>
   2150a:	490e      	ldr	r1, [pc, #56]	; (21544 <net_if_up+0x60>)
   2150c:	480e      	ldr	r0, [pc, #56]	; (21548 <net_if_up+0x64>)
   2150e:	f640 5389 	movw	r3, #3465	; 0xd89
   21512:	4a0e      	ldr	r2, [pc, #56]	; (2154c <net_if_up+0x68>)
   21514:	f01d ff97 	bl	3f446 <printk>
   21518:	f640 5189 	movw	r1, #3465	; 0xd89
   2151c:	480b      	ldr	r0, [pc, #44]	; (2154c <net_if_up+0x68>)
   2151e:	f01d ff9f 	bl	3f460 <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
   21522:	4628      	mov	r0, r5
   21524:	f7ff ffbe 	bl	214a4 <net_if_flag_set.constprop.25>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   21528:	4628      	mov	r0, r5
   2152a:	f01e f9ca 	bl	3f8c2 <l2_flags_get>
   2152e:	e7e5      	b.n	214fc <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   21530:	689b      	ldr	r3, [r3, #8]
   21532:	2b00      	cmp	r3, #0
   21534:	d0e6      	beq.n	21504 <net_if_up+0x20>
	status = net_if_l2(iface)->enable(iface, true);
   21536:	2101      	movs	r1, #1
   21538:	4628      	mov	r0, r5
   2153a:	4798      	blx	r3
	if (status < 0) {
   2153c:	2800      	cmp	r0, #0
   2153e:	dae1      	bge.n	21504 <net_if_up+0x20>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   21540:	bd38      	pop	{r3, r4, r5, pc}
   21542:	bf00      	nop
   21544:	00046bf4 	.word	0x00046bf4
   21548:	00045316 	.word	0x00045316
   2154c:	00046c25 	.word	0x00046c25

00021550 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   21550:	b538      	push	{r3, r4, r5, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   21552:	4c07      	ldr	r4, [pc, #28]	; (21570 <net_if_init+0x20>)
   21554:	4d07      	ldr	r5, [pc, #28]	; (21574 <net_if_init+0x24>)
   21556:	42ac      	cmp	r4, r5
   21558:	d100      	bne.n	2155c <net_if_init+0xc>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   2155a:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   2155c:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   2155e:	681b      	ldr	r3, [r3, #0]
   21560:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
   21562:	b11b      	cbz	r3, 2156c <net_if_init+0x1c>
   21564:	681b      	ldr	r3, [r3, #0]
   21566:	b10b      	cbz	r3, 2156c <net_if_init+0x1c>
	api->init(iface);
   21568:	4620      	mov	r0, r4
   2156a:	4798      	blx	r3
	     iface++, if_count++) {
   2156c:	3420      	adds	r4, #32
   2156e:	e7f2      	b.n	21556 <net_if_init+0x6>
   21570:	20032060 	.word	0x20032060
   21574:	20032080 	.word	0x20032080

00021578 <net_if_post_init>:

void net_if_post_init(void)
{
   21578:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   2157a:	4c07      	ldr	r4, [pc, #28]	; (21598 <net_if_post_init+0x20>)
   2157c:	4d07      	ldr	r5, [pc, #28]	; (2159c <net_if_post_init+0x24>)
   2157e:	42ac      	cmp	r4, r5
   21580:	d100      	bne.n	21584 <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   21582:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   21584:	2103      	movs	r1, #3
   21586:	4620      	mov	r0, r4
   21588:	f7ff ff6e 	bl	21468 <net_if_flag_is_set>
   2158c:	b910      	cbnz	r0, 21594 <net_if_post_init+0x1c>
			net_if_up(iface);
   2158e:	4620      	mov	r0, r4
   21590:	f7ff ffa8 	bl	214e4 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   21594:	3420      	adds	r4, #32
   21596:	e7f2      	b.n	2157e <net_if_post_init+0x6>
   21598:	20032060 	.word	0x20032060
   2159c:	20032080 	.word	0x20032080

000215a0 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   215a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   215a4:	680f      	ldr	r7, [r1, #0]
	u8_t connect_flags = client->clean_session << 1;
   215a6:	f890 5077 	ldrb.w	r5, [r0, #119]	; 0x77
	start = buf->cur;

	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   215aa:	4b3b      	ldr	r3, [pc, #236]	; (21698 <connect_request_encode+0xf8>)
   215ac:	4a3b      	ldr	r2, [pc, #236]	; (2169c <connect_request_encode+0xfc>)
{
   215ae:	4606      	mov	r6, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   215b0:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   215b4:	3705      	adds	r7, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   215b6:	2804      	cmp	r0, #4
   215b8:	bf0c      	ite	eq
   215ba:	4610      	moveq	r0, r2
   215bc:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   215be:	600f      	str	r7, [r1, #0]
{
   215c0:	460c      	mov	r4, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   215c2:	f01e fa50 	bl	3fa66 <pack_utf8_str>
	u8_t connect_flags = client->clean_session << 1;
   215c6:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (err_code != 0) {
   215ca:	4603      	mov	r3, r0
   215cc:	b938      	cbnz	r0, 215de <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   215ce:	e9d4 2000 	ldrd	r2, r0, [r4]
   215d2:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   215d4:	f896 1076 	ldrb.w	r1, [r6, #118]	; 0x76
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   215d8:	d104      	bne.n	215e4 <connect_request_encode+0x44>
		return -ENOMEM;
   215da:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   215de:	4618      	mov	r0, r3
   215e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   215e4:	1c50      	adds	r0, r2, #1
   215e6:	6020      	str	r0, [r4, #0]
   215e8:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   215ea:	e9d4 8200 	ldrd	r8, r2, [r4]
   215ee:	4590      	cmp	r8, r2
   215f0:	d0f3      	beq.n	215da <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   215f2:	f108 0201 	add.w	r2, r8, #1
   215f6:	6022      	str	r2, [r4, #0]
   215f8:	f888 3000 	strb.w	r3, [r8]
	err_code = pack_uint16(client->keepalive, buf);
   215fc:	4621      	mov	r1, r4
   215fe:	f8b6 0074 	ldrh.w	r0, [r6, #116]	; 0x74
   21602:	f01e fa1e 	bl	3fa42 <pack_uint16>
	if (err_code != 0) {
   21606:	4603      	mov	r3, r0
   21608:	2800      	cmp	r0, #0
   2160a:	d1e8      	bne.n	215de <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   2160c:	f106 0044 	add.w	r0, r6, #68	; 0x44
   21610:	f01e fa29 	bl	3fa66 <pack_utf8_str>
	if (err_code != 0) {
   21614:	4603      	mov	r3, r0
   21616:	2800      	cmp	r0, #0
   21618:	d1e1      	bne.n	215de <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   2161a:	6db0      	ldr	r0, [r6, #88]	; 0x58
	u8_t connect_flags = client->clean_session << 1;
   2161c:	006d      	lsls	r5, r5, #1
	if (client->will_topic != NULL) {
   2161e:	b1d8      	cbz	r0, 21658 <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   21620:	f896 3077 	ldrb.w	r3, [r6, #119]	; 0x77
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   21624:	f045 0504 	orr.w	r5, r5, #4
		connect_flags |= client->will_retain << 5;
   21628:	f003 0301 	and.w	r3, r3, #1
   2162c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   21630:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   21632:	4621      	mov	r1, r4
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   21634:	00db      	lsls	r3, r3, #3
   21636:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   2163a:	431d      	orrs	r5, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   2163c:	f01e fa13 	bl	3fa66 <pack_utf8_str>
		if (err_code != 0) {
   21640:	4603      	mov	r3, r0
   21642:	2800      	cmp	r0, #0
   21644:	d1cb      	bne.n	215de <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   21646:	6df3      	ldr	r3, [r6, #92]	; 0x5c
			err_code = pack_utf8_str(client->will_message, buf);
   21648:	4621      	mov	r1, r4
		if (client->will_message != NULL) {
   2164a:	b313      	cbz	r3, 21692 <connect_request_encode+0xf2>
			err_code = pack_utf8_str(client->will_message, buf);
   2164c:	4618      	mov	r0, r3
   2164e:	f01e fa0a 	bl	3fa66 <pack_utf8_str>
			if (err_code != 0) {
   21652:	4603      	mov	r3, r0
   21654:	2800      	cmp	r0, #0
   21656:	d1c2      	bne.n	215de <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   21658:	6d30      	ldr	r0, [r6, #80]	; 0x50
   2165a:	b138      	cbz	r0, 2166c <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   2165c:	4621      	mov	r1, r4
   2165e:	f01e fa02 	bl	3fa66 <pack_utf8_str>
		if (err_code != 0) {
   21662:	4603      	mov	r3, r0
   21664:	2800      	cmp	r0, #0
   21666:	d1ba      	bne.n	215de <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   21668:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	if (client->password != NULL) {
   2166c:	6d70      	ldr	r0, [r6, #84]	; 0x54
   2166e:	b138      	cbz	r0, 21680 <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   21670:	4621      	mov	r1, r4
   21672:	f01e f9f8 	bl	3fa66 <pack_utf8_str>
		if (err_code != 0) {
   21676:	4603      	mov	r3, r0
   21678:	2800      	cmp	r0, #0
   2167a:	d1b0      	bne.n	215de <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   2167c:	f045 0540 	orr.w	r5, r5, #64	; 0x40
	*connect_flags_pos = connect_flags;
   21680:	f888 5000 	strb.w	r5, [r8]
	return mqtt_encode_fixed_header(message_type, start, buf);
   21684:	4622      	mov	r2, r4
   21686:	4639      	mov	r1, r7
}
   21688:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   2168c:	2010      	movs	r0, #16
   2168e:	f01e ba05 	b.w	3fa9c <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   21692:	f01e f9d6 	bl	3fa42 <pack_uint16>
   21696:	e7dc      	b.n	21652 <connect_request_encode+0xb2>
   21698:	0004344c 	.word	0x0004344c
   2169c:	00043454 	.word	0x00043454

000216a0 <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   216a0:	e9d0 2300 	ldrd	r2, r3, [r0]
   216a4:	1a9b      	subs	r3, r3, r2
   216a6:	2b01      	cmp	r3, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   216a8:	bf81      	itttt	hi
   216aa:	4b05      	ldrhi	r3, [pc, #20]	; (216c0 <disconnect_encode+0x20>)
   216ac:	881b      	ldrhhi	r3, [r3, #0]
   216ae:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   216b0:	6803      	ldrhi	r3, [r0, #0]
   216b2:	bf83      	ittte	hi
   216b4:	3302      	addhi	r3, #2
   216b6:	6043      	strhi	r3, [r0, #4]

	return 0;
   216b8:	2000      	movhi	r0, #0
		return -ENOMEM;
   216ba:	f06f 000b 	mvnls.w	r0, #11
}
   216be:	4770      	bx	lr
   216c0:	00046c48 	.word	0x00046c48

000216c4 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   216c4:	e9d0 2300 	ldrd	r2, r3, [r0]
   216c8:	1a9b      	subs	r3, r3, r2
   216ca:	2b01      	cmp	r3, #1
   216cc:	bf81      	itttt	hi
   216ce:	4b05      	ldrhi	r3, [pc, #20]	; (216e4 <ping_request_encode+0x20>)
   216d0:	881b      	ldrhhi	r3, [r3, #0]
   216d2:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   216d4:	6803      	ldrhi	r3, [r0, #0]
   216d6:	bf83      	ittte	hi
   216d8:	3302      	addhi	r3, #2
   216da:	6043      	strhi	r3, [r0, #4]

	return 0;
   216dc:	2000      	movhi	r0, #0
		return -ENOMEM;
   216de:	f06f 000b 	mvnls.w	r0, #11
}
   216e2:	4770      	bx	lr
   216e4:	00046c54 	.word	0x00046c54

000216e8 <close>:
{
   216e8:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   216ea:	4c10      	ldr	r4, [pc, #64]	; (2172c <close+0x44>)
{
   216ec:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   216ee:	6823      	ldr	r3, [r4, #0]
   216f0:	b94b      	cbnz	r3, 21706 <close+0x1e>
   216f2:	490f      	ldr	r1, [pc, #60]	; (21730 <close+0x48>)
   216f4:	480f      	ldr	r0, [pc, #60]	; (21734 <close+0x4c>)
   216f6:	2321      	movs	r3, #33	; 0x21
   216f8:	4a0f      	ldr	r2, [pc, #60]	; (21738 <close+0x50>)
   216fa:	f01d fea4 	bl	3f446 <printk>
   216fe:	2121      	movs	r1, #33	; 0x21
   21700:	480d      	ldr	r0, [pc, #52]	; (21738 <close+0x50>)
   21702:	f01d fead 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   21706:	6823      	ldr	r3, [r4, #0]
   21708:	685b      	ldr	r3, [r3, #4]
   2170a:	b94b      	cbnz	r3, 21720 <close+0x38>
   2170c:	490b      	ldr	r1, [pc, #44]	; (2173c <close+0x54>)
   2170e:	4809      	ldr	r0, [pc, #36]	; (21734 <close+0x4c>)
   21710:	2322      	movs	r3, #34	; 0x22
   21712:	4a09      	ldr	r2, [pc, #36]	; (21738 <close+0x50>)
   21714:	f01d fe97 	bl	3f446 <printk>
   21718:	2122      	movs	r1, #34	; 0x22
   2171a:	4807      	ldr	r0, [pc, #28]	; (21738 <close+0x50>)
   2171c:	f01d fea0 	bl	3f460 <assert_post_action>
	return socket_ops->close(sock);
   21720:	6823      	ldr	r3, [r4, #0]
   21722:	4628      	mov	r0, r5
}
   21724:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   21728:	685b      	ldr	r3, [r3, #4]
   2172a:	4718      	bx	r3
   2172c:	20023934 	.word	0x20023934
   21730:	00045442 	.word	0x00045442
   21734:	00045316 	.word	0x00045316
   21738:	00045419 	.word	0x00045419
   2173c:	00046c56 	.word	0x00046c56

00021740 <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   21740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   21744:	4c2d      	ldr	r4, [pc, #180]	; (217fc <mqtt_client_tcp_connect+0xbc>)
	const struct sockaddr *broker = client->broker;
   21746:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
   21748:	6823      	ldr	r3, [r4, #0]
{
   2174a:	4606      	mov	r6, r0
	int ret;

	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   2174c:	882f      	ldrh	r7, [r5, #0]
   2174e:	b94b      	cbnz	r3, 21764 <mqtt_client_tcp_connect+0x24>
   21750:	492b      	ldr	r1, [pc, #172]	; (21800 <mqtt_client_tcp_connect+0xc0>)
   21752:	482c      	ldr	r0, [pc, #176]	; (21804 <mqtt_client_tcp_connect+0xc4>)
   21754:	2319      	movs	r3, #25
   21756:	4a2c      	ldr	r2, [pc, #176]	; (21808 <mqtt_client_tcp_connect+0xc8>)
   21758:	f01d fe75 	bl	3f446 <printk>
   2175c:	2119      	movs	r1, #25
   2175e:	482a      	ldr	r0, [pc, #168]	; (21808 <mqtt_client_tcp_connect+0xc8>)
   21760:	f01d fe7e 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   21764:	6823      	ldr	r3, [r4, #0]
   21766:	681b      	ldr	r3, [r3, #0]
   21768:	b94b      	cbnz	r3, 2177e <mqtt_client_tcp_connect+0x3e>
   2176a:	4928      	ldr	r1, [pc, #160]	; (2180c <mqtt_client_tcp_connect+0xcc>)
   2176c:	4825      	ldr	r0, [pc, #148]	; (21804 <mqtt_client_tcp_connect+0xc4>)
   2176e:	231a      	movs	r3, #26
   21770:	4a25      	ldr	r2, [pc, #148]	; (21808 <mqtt_client_tcp_connect+0xc8>)
   21772:	f01d fe68 	bl	3f446 <printk>
   21776:	211a      	movs	r1, #26
   21778:	4823      	ldr	r0, [pc, #140]	; (21808 <mqtt_client_tcp_connect+0xc8>)
   2177a:	f01d fe71 	bl	3f460 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   2177e:	6823      	ldr	r3, [r4, #0]
   21780:	4638      	mov	r0, r7
   21782:	681b      	ldr	r3, [r3, #0]
   21784:	2206      	movs	r2, #6
   21786:	2101      	movs	r1, #1
   21788:	4798      	blx	r3
					    IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   2178a:	2800      	cmp	r0, #0
   2178c:	4607      	mov	r7, r0
	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   2178e:	62b0      	str	r0, [r6, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   21790:	da05      	bge.n	2179e <mqtt_client_tcp_connect+0x5e>

	ret = connect(client->transport.tcp.sock, client->broker,
		      peer_addr_size);
	if (ret < 0) {
		(void)close(client->transport.tcp.sock);
		return -errno;
   21792:	f01e f88d 	bl	3f8b0 <__errno>
   21796:	6800      	ldr	r0, [r0, #0]
   21798:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   2179a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (broker->sa_family == AF_INET) {
   2179e:	882b      	ldrh	r3, [r5, #0]
	ret = connect(client->transport.tcp.sock, client->broker,
   217a0:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
		peer_addr_size = sizeof(struct sockaddr_in);
   217a2:	2b01      	cmp	r3, #1
	__ASSERT_NO_MSG(socket_ops);
   217a4:	6823      	ldr	r3, [r4, #0]
   217a6:	bf14      	ite	ne
   217a8:	f04f 0818 	movne.w	r8, #24
   217ac:	f04f 0808 	moveq.w	r8, #8
   217b0:	b94b      	cbnz	r3, 217c6 <mqtt_client_tcp_connect+0x86>
   217b2:	4913      	ldr	r1, [pc, #76]	; (21800 <mqtt_client_tcp_connect+0xc0>)
   217b4:	4813      	ldr	r0, [pc, #76]	; (21804 <mqtt_client_tcp_connect+0xc4>)
   217b6:	2345      	movs	r3, #69	; 0x45
   217b8:	4a13      	ldr	r2, [pc, #76]	; (21808 <mqtt_client_tcp_connect+0xc8>)
   217ba:	f01d fe44 	bl	3f446 <printk>
   217be:	2145      	movs	r1, #69	; 0x45
   217c0:	4811      	ldr	r0, [pc, #68]	; (21808 <mqtt_client_tcp_connect+0xc8>)
   217c2:	f01d fe4d 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->connect);
   217c6:	6823      	ldr	r3, [r4, #0]
   217c8:	695b      	ldr	r3, [r3, #20]
   217ca:	b94b      	cbnz	r3, 217e0 <mqtt_client_tcp_connect+0xa0>
   217cc:	4910      	ldr	r1, [pc, #64]	; (21810 <mqtt_client_tcp_connect+0xd0>)
   217ce:	480d      	ldr	r0, [pc, #52]	; (21804 <mqtt_client_tcp_connect+0xc4>)
   217d0:	2346      	movs	r3, #70	; 0x46
   217d2:	4a0d      	ldr	r2, [pc, #52]	; (21808 <mqtt_client_tcp_connect+0xc8>)
   217d4:	f01d fe37 	bl	3f446 <printk>
   217d8:	2146      	movs	r1, #70	; 0x46
   217da:	480b      	ldr	r0, [pc, #44]	; (21808 <mqtt_client_tcp_connect+0xc8>)
   217dc:	f01d fe40 	bl	3f460 <assert_post_action>
	return socket_ops->connect(sock, addr, addrlen);
   217e0:	6823      	ldr	r3, [r4, #0]
   217e2:	4642      	mov	r2, r8
   217e4:	695b      	ldr	r3, [r3, #20]
   217e6:	4629      	mov	r1, r5
   217e8:	4638      	mov	r0, r7
   217ea:	4798      	blx	r3
	if (ret < 0) {
   217ec:	2800      	cmp	r0, #0
   217ee:	da03      	bge.n	217f8 <mqtt_client_tcp_connect+0xb8>
		(void)close(client->transport.tcp.sock);
   217f0:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   217f2:	f7ff ff79 	bl	216e8 <close>
   217f6:	e7cc      	b.n	21792 <mqtt_client_tcp_connect+0x52>
	return 0;
   217f8:	2000      	movs	r0, #0
   217fa:	e7ce      	b.n	2179a <mqtt_client_tcp_connect+0x5a>
   217fc:	20023934 	.word	0x20023934
   21800:	00045442 	.word	0x00045442
   21804:	00045316 	.word	0x00045316
   21808:	00045419 	.word	0x00045419
   2180c:	00046c68 	.word	0x00046c68
   21810:	00046c7b 	.word	0x00046c7b

00021814 <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
   21814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21818:	4680      	mov	r8, r0
   2181a:	4689      	mov	r9, r1
   2181c:	4617      	mov	r7, r2
	u32_t offset = 0U;
   2181e:	2400      	movs	r4, #0
}

static inline ssize_t send(int sock, const void *buf, size_t len,
			   int flags)
{
	__ASSERT_NO_MSG(socket_ops);
   21820:	4d1d      	ldr	r5, [pc, #116]	; (21898 <mqtt_client_tcp_write+0x84>)
	int ret;

	while (offset < datalen) {
   21822:	42bc      	cmp	r4, r7
   21824:	d301      	bcc.n	2182a <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   21826:	2000      	movs	r0, #0
   21828:	e031      	b.n	2188e <mqtt_client_tcp_write+0x7a>
		ret = send(client->transport.tcp.sock, data + offset,
   2182a:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   2182e:	eb09 0a04 	add.w	sl, r9, r4
   21832:	461e      	mov	r6, r3
   21834:	4b19      	ldr	r3, [pc, #100]	; (2189c <mqtt_client_tcp_write+0x88>)
   21836:	eba7 0b04 	sub.w	fp, r7, r4
   2183a:	681b      	ldr	r3, [r3, #0]
   2183c:	b94b      	cbnz	r3, 21852 <mqtt_client_tcp_write+0x3e>
   2183e:	4918      	ldr	r1, [pc, #96]	; (218a0 <mqtt_client_tcp_write+0x8c>)
   21840:	4818      	ldr	r0, [pc, #96]	; (218a4 <mqtt_client_tcp_write+0x90>)
   21842:	237e      	movs	r3, #126	; 0x7e
   21844:	462a      	mov	r2, r5
   21846:	f01d fdfe 	bl	3f446 <printk>
   2184a:	217e      	movs	r1, #126	; 0x7e
   2184c:	4628      	mov	r0, r5
   2184e:	f01d fe07 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   21852:	4b12      	ldr	r3, [pc, #72]	; (2189c <mqtt_client_tcp_write+0x88>)
   21854:	681b      	ldr	r3, [r3, #0]
   21856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   21858:	b94b      	cbnz	r3, 2186e <mqtt_client_tcp_write+0x5a>
   2185a:	4913      	ldr	r1, [pc, #76]	; (218a8 <mqtt_client_tcp_write+0x94>)
   2185c:	4811      	ldr	r0, [pc, #68]	; (218a4 <mqtt_client_tcp_write+0x90>)
   2185e:	237f      	movs	r3, #127	; 0x7f
   21860:	462a      	mov	r2, r5
   21862:	f01d fdf0 	bl	3f446 <printk>
   21866:	217f      	movs	r1, #127	; 0x7f
   21868:	4628      	mov	r0, r5
   2186a:	f01d fdf9 	bl	3f460 <assert_post_action>

	return socket_ops->send(sock, buf, len, flags);
   2186e:	4b0b      	ldr	r3, [pc, #44]	; (2189c <mqtt_client_tcp_write+0x88>)
   21870:	4630      	mov	r0, r6
   21872:	681b      	ldr	r3, [r3, #0]
   21874:	465a      	mov	r2, fp
   21876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   21878:	4651      	mov	r1, sl
   2187a:	469c      	mov	ip, r3
   2187c:	2300      	movs	r3, #0
   2187e:	4666      	mov	r6, ip
   21880:	47b0      	blx	r6
		if (ret < 0) {
   21882:	2800      	cmp	r0, #0
   21884:	da05      	bge.n	21892 <mqtt_client_tcp_write+0x7e>
			return -errno;
   21886:	f01e f813 	bl	3f8b0 <__errno>
   2188a:	6800      	ldr	r0, [r0, #0]
   2188c:	4240      	negs	r0, r0
}
   2188e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += ret;
   21892:	4404      	add	r4, r0
   21894:	e7c5      	b.n	21822 <mqtt_client_tcp_write+0xe>
   21896:	bf00      	nop
   21898:	00045419 	.word	0x00045419
   2189c:	20023934 	.word	0x20023934
   218a0:	00045442 	.word	0x00045442
   218a4:	00045316 	.word	0x00045316
   218a8:	00046ca0 	.word	0x00046ca0

000218ac <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			 bool shall_block)
{
   218ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   218b0:	4c18      	ldr	r4, [pc, #96]	; (21914 <mqtt_client_tcp_read+0x68>)
	int flags = 0;
	int ret;

	if (!shall_block) {
		flags |= MSG_DONTWAIT;
   218b2:	2b00      	cmp	r3, #0
   218b4:	6823      	ldr	r3, [r4, #0]
{
   218b6:	460e      	mov	r6, r1
   218b8:	4617      	mov	r7, r2
		flags |= MSG_DONTWAIT;
   218ba:	bf14      	ite	ne
   218bc:	f04f 0800 	movne.w	r8, #0
   218c0:	f04f 0840 	moveq.w	r8, #64	; 0x40
	}

	ret = recv(client->transport.tcp.sock, data, buflen, flags);
   218c4:	6a85      	ldr	r5, [r0, #40]	; 0x28
   218c6:	b94b      	cbnz	r3, 218dc <mqtt_client_tcp_read+0x30>
   218c8:	4913      	ldr	r1, [pc, #76]	; (21918 <mqtt_client_tcp_read+0x6c>)
   218ca:	4814      	ldr	r0, [pc, #80]	; (2191c <mqtt_client_tcp_read+0x70>)
   218cc:	2369      	movs	r3, #105	; 0x69
   218ce:	4a14      	ldr	r2, [pc, #80]	; (21920 <mqtt_client_tcp_read+0x74>)
   218d0:	f01d fdb9 	bl	3f446 <printk>
   218d4:	2169      	movs	r1, #105	; 0x69
   218d6:	4812      	ldr	r0, [pc, #72]	; (21920 <mqtt_client_tcp_read+0x74>)
   218d8:	f01d fdc2 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   218dc:	6823      	ldr	r3, [r4, #0]
   218de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   218e0:	b94b      	cbnz	r3, 218f6 <mqtt_client_tcp_read+0x4a>
   218e2:	4910      	ldr	r1, [pc, #64]	; (21924 <mqtt_client_tcp_read+0x78>)
   218e4:	480d      	ldr	r0, [pc, #52]	; (2191c <mqtt_client_tcp_read+0x70>)
   218e6:	236a      	movs	r3, #106	; 0x6a
   218e8:	4a0d      	ldr	r2, [pc, #52]	; (21920 <mqtt_client_tcp_read+0x74>)
   218ea:	f01d fdac 	bl	3f446 <printk>
   218ee:	216a      	movs	r1, #106	; 0x6a
   218f0:	480b      	ldr	r0, [pc, #44]	; (21920 <mqtt_client_tcp_read+0x74>)
   218f2:	f01d fdb5 	bl	3f460 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   218f6:	6823      	ldr	r3, [r4, #0]
   218f8:	463a      	mov	r2, r7
   218fa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   218fc:	4631      	mov	r1, r6
   218fe:	4643      	mov	r3, r8
   21900:	4628      	mov	r0, r5
   21902:	47a0      	blx	r4
	if (ret < 0) {
   21904:	2800      	cmp	r0, #0
   21906:	da03      	bge.n	21910 <mqtt_client_tcp_read+0x64>
		return -errno;
   21908:	f01d ffd2 	bl	3f8b0 <__errno>
   2190c:	6800      	ldr	r0, [r0, #0]
   2190e:	4240      	negs	r0, r0
	}

	return ret;
}
   21910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21914:	20023934 	.word	0x20023934
   21918:	00045442 	.word	0x00045442
   2191c:	00045316 	.word	0x00045316
   21920:	00045419 	.word	0x00045419
   21924:	00046c8f 	.word	0x00046c8f

00021928 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   21928:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   2192c:	4a01      	ldr	r2, [pc, #4]	; (21934 <mqtt_transport_connect+0xc>)
   2192e:	011b      	lsls	r3, r3, #4
   21930:	58d3      	ldr	r3, [r2, r3]
   21932:	4718      	bx	r3
   21934:	0004345c 	.word	0x0004345c

00021938 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const u8_t *data,
			 u32_t datalen)
{
   21938:	b410      	push	{r4}
	return transport_fn[client->transport.type].write(client, data,
   2193a:	4b04      	ldr	r3, [pc, #16]	; (2194c <mqtt_transport_write+0x14>)
   2193c:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   21940:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   21944:	685b      	ldr	r3, [r3, #4]
							  datalen);
}
   21946:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write(client, data,
   2194a:	4718      	bx	r3
   2194c:	0004345c 	.word	0x0004345c

00021950 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			bool shall_block)
{
   21950:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].read(client, data, buflen,
   21952:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
   21956:	4c03      	ldr	r4, [pc, #12]	; (21964 <mqtt_transport_read+0x14>)
   21958:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   2195c:	68a4      	ldr	r4, [r4, #8]
   2195e:	46a4      	mov	ip, r4
							 shall_block);
}
   21960:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].read(client, data, buflen,
   21962:	4760      	bx	ip
   21964:	0004345c 	.word	0x0004345c

00021968 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   21968:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   2196c:	4b02      	ldr	r3, [pc, #8]	; (21978 <mqtt_transport_disconnect+0x10>)
   2196e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   21972:	68db      	ldr	r3, [r3, #12]
   21974:	4718      	bx	r3
   21976:	bf00      	nop
   21978:	0004345c 	.word	0x0004345c

0002197c <mqtt_mutex_unlock>:
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
   2197c:	68c2      	ldr	r2, [r0, #12]
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   2197e:	b510      	push	{r4, lr}
   21980:	b142      	cbz	r2, 21994 <mqtt_mutex_unlock+0x18>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
   21982:	4b0f      	ldr	r3, [pc, #60]	; (219c0 <mqtt_mutex_unlock+0x44>)
   21984:	6882      	ldr	r2, [r0, #8]
   21986:	689b      	ldr	r3, [r3, #8]
   21988:	429a      	cmp	r2, r3
   2198a:	d115      	bne.n	219b8 <mqtt_mutex_unlock+0x3c>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
	(void)ret;
}
   2198c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_impl_k_mutex_unlock(mutex);
   21990:	f017 bfd6 	b.w	39940 <z_impl_k_mutex_unlock>
		return -EINVAL;
   21994:	f06f 0415 	mvn.w	r4, #21
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   21998:	2343      	movs	r3, #67	; 0x43
   2199a:	4a0a      	ldr	r2, [pc, #40]	; (219c4 <mqtt_mutex_unlock+0x48>)
   2199c:	490a      	ldr	r1, [pc, #40]	; (219c8 <mqtt_mutex_unlock+0x4c>)
   2199e:	480b      	ldr	r0, [pc, #44]	; (219cc <mqtt_mutex_unlock+0x50>)
   219a0:	f01d fd51 	bl	3f446 <printk>
   219a4:	4621      	mov	r1, r4
   219a6:	480a      	ldr	r0, [pc, #40]	; (219d0 <mqtt_mutex_unlock+0x54>)
   219a8:	f01d fd4d 	bl	3f446 <printk>
}
   219ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   219b0:	2143      	movs	r1, #67	; 0x43
   219b2:	4804      	ldr	r0, [pc, #16]	; (219c4 <mqtt_mutex_unlock+0x48>)
   219b4:	f01d bd54 	b.w	3f460 <assert_post_action>
		return -EPERM;
   219b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   219bc:	e7ec      	b.n	21998 <mqtt_mutex_unlock+0x1c>
   219be:	bf00      	nop
   219c0:	2002a1d8 	.word	0x2002a1d8
   219c4:	00046cd1 	.word	0x00046cd1
   219c8:	00046cfb 	.word	0x00046cfb
   219cc:	00045316 	.word	0x00045316
   219d0:	00046d04 	.word	0x00046d04

000219d4 <mqtt_mutex_lock>:
{
   219d4:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   219d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   219da:	f017 fed7 	bl	3978c <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   219de:	4604      	mov	r4, r0
   219e0:	b178      	cbz	r0, 21a02 <mqtt_mutex_lock+0x2e>
   219e2:	2339      	movs	r3, #57	; 0x39
   219e4:	4a07      	ldr	r2, [pc, #28]	; (21a04 <mqtt_mutex_lock+0x30>)
   219e6:	4908      	ldr	r1, [pc, #32]	; (21a08 <mqtt_mutex_lock+0x34>)
   219e8:	4808      	ldr	r0, [pc, #32]	; (21a0c <mqtt_mutex_lock+0x38>)
   219ea:	f01d fd2c 	bl	3f446 <printk>
   219ee:	4621      	mov	r1, r4
   219f0:	4807      	ldr	r0, [pc, #28]	; (21a10 <mqtt_mutex_lock+0x3c>)
   219f2:	f01d fd28 	bl	3f446 <printk>
}
   219f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   219fa:	2139      	movs	r1, #57	; 0x39
   219fc:	4801      	ldr	r0, [pc, #4]	; (21a04 <mqtt_mutex_lock+0x30>)
   219fe:	f01d bd2f 	b.w	3f460 <assert_post_action>
}
   21a02:	bd10      	pop	{r4, pc}
   21a04:	00046cd1 	.word	0x00046cd1
   21a08:	00046cfb 	.word	0x00046cfb
   21a0c:	00045316 	.word	0x00045316
   21a10:	00046cb1 	.word	0x00046cb1

00021a14 <close>:
{
   21a14:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   21a16:	4c10      	ldr	r4, [pc, #64]	; (21a58 <close+0x44>)
{
   21a18:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   21a1a:	6823      	ldr	r3, [r4, #0]
   21a1c:	b94b      	cbnz	r3, 21a32 <close+0x1e>
   21a1e:	490f      	ldr	r1, [pc, #60]	; (21a5c <close+0x48>)
   21a20:	480f      	ldr	r0, [pc, #60]	; (21a60 <close+0x4c>)
   21a22:	2321      	movs	r3, #33	; 0x21
   21a24:	4a0f      	ldr	r2, [pc, #60]	; (21a64 <close+0x50>)
   21a26:	f01d fd0e 	bl	3f446 <printk>
   21a2a:	2121      	movs	r1, #33	; 0x21
   21a2c:	480d      	ldr	r0, [pc, #52]	; (21a64 <close+0x50>)
   21a2e:	f01d fd17 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   21a32:	6823      	ldr	r3, [r4, #0]
   21a34:	685b      	ldr	r3, [r3, #4]
   21a36:	b94b      	cbnz	r3, 21a4c <close+0x38>
   21a38:	490b      	ldr	r1, [pc, #44]	; (21a68 <close+0x54>)
   21a3a:	4809      	ldr	r0, [pc, #36]	; (21a60 <close+0x4c>)
   21a3c:	2322      	movs	r3, #34	; 0x22
   21a3e:	4a09      	ldr	r2, [pc, #36]	; (21a64 <close+0x50>)
   21a40:	f01d fd01 	bl	3f446 <printk>
   21a44:	2122      	movs	r1, #34	; 0x22
   21a46:	4807      	ldr	r0, [pc, #28]	; (21a64 <close+0x50>)
   21a48:	f01d fd0a 	bl	3f460 <assert_post_action>
	return socket_ops->close(sock);
   21a4c:	6823      	ldr	r3, [r4, #0]
   21a4e:	4628      	mov	r0, r5
}
   21a50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   21a54:	685b      	ldr	r3, [r3, #4]
   21a56:	4718      	bx	r3
   21a58:	20023934 	.word	0x20023934
   21a5c:	00045442 	.word	0x00045442
   21a60:	00045316 	.word	0x00045316
   21a64:	00045419 	.word	0x00045419
   21a68:	00046c56 	.word	0x00046c56

00021a6c <setsockopt.constprop.1>:
static inline int setsockopt(int sock, int level, int optname,
   21a6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   21a70:	4c15      	ldr	r4, [pc, #84]	; (21ac8 <setsockopt.constprop.1+0x5c>)
static inline int setsockopt(int sock, int level, int optname,
   21a72:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   21a74:	6823      	ldr	r3, [r4, #0]
static inline int setsockopt(int sock, int level, int optname,
   21a76:	4605      	mov	r5, r0
   21a78:	460e      	mov	r6, r1
   21a7a:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(socket_ops);
   21a7c:	b94b      	cbnz	r3, 21a92 <setsockopt.constprop.1+0x26>
   21a7e:	4913      	ldr	r1, [pc, #76]	; (21acc <setsockopt.constprop.1+0x60>)
   21a80:	4813      	ldr	r0, [pc, #76]	; (21ad0 <setsockopt.constprop.1+0x64>)
   21a82:	2357      	movs	r3, #87	; 0x57
   21a84:	4a13      	ldr	r2, [pc, #76]	; (21ad4 <setsockopt.constprop.1+0x68>)
   21a86:	f01d fcde 	bl	3f446 <printk>
   21a8a:	2157      	movs	r1, #87	; 0x57
   21a8c:	4811      	ldr	r0, [pc, #68]	; (21ad4 <setsockopt.constprop.1+0x68>)
   21a8e:	f01d fce7 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->setsockopt);
   21a92:	6823      	ldr	r3, [r4, #0]
   21a94:	69db      	ldr	r3, [r3, #28]
   21a96:	b94b      	cbnz	r3, 21aac <setsockopt.constprop.1+0x40>
   21a98:	490f      	ldr	r1, [pc, #60]	; (21ad8 <setsockopt.constprop.1+0x6c>)
   21a9a:	480d      	ldr	r0, [pc, #52]	; (21ad0 <setsockopt.constprop.1+0x64>)
   21a9c:	2358      	movs	r3, #88	; 0x58
   21a9e:	4a0d      	ldr	r2, [pc, #52]	; (21ad4 <setsockopt.constprop.1+0x68>)
   21aa0:	f01d fcd1 	bl	3f446 <printk>
   21aa4:	2158      	movs	r1, #88	; 0x58
   21aa6:	480b      	ldr	r0, [pc, #44]	; (21ad4 <setsockopt.constprop.1+0x68>)
   21aa8:	f01d fcda 	bl	3f460 <assert_post_action>
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   21aac:	6823      	ldr	r3, [r4, #0]
   21aae:	f8cd 8000 	str.w	r8, [sp]
   21ab2:	69dc      	ldr	r4, [r3, #28]
   21ab4:	4632      	mov	r2, r6
   21ab6:	463b      	mov	r3, r7
   21ab8:	f44f 718d 	mov.w	r1, #282	; 0x11a
   21abc:	4628      	mov	r0, r5
   21abe:	47a0      	blx	r4
}
   21ac0:	b002      	add	sp, #8
   21ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21ac6:	bf00      	nop
   21ac8:	20023934 	.word	0x20023934
   21acc:	00045442 	.word	0x00045442
   21ad0:	00045316 	.word	0x00045316
   21ad4:	00045419 	.word	0x00045419
   21ad8:	00046d26 	.word	0x00046d26

00021adc <mqtt_client_tls_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tls_connect(struct mqtt_client *client)
{
   21adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   21ae0:	4d48      	ldr	r5, [pc, #288]	; (21c04 <mqtt_client_tls_connect+0x128>)
	const struct sockaddr *broker = client->broker;
   21ae2:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
   21ae4:	682b      	ldr	r3, [r5, #0]
{
   21ae6:	4604      	mov	r4, r0
	struct mqtt_sec_config *tls_config = &client->transport.tls.config;
	int ret;

	client->transport.tls.sock = socket(broker->sa_family,
   21ae8:	883e      	ldrh	r6, [r7, #0]
   21aea:	b94b      	cbnz	r3, 21b00 <mqtt_client_tls_connect+0x24>
   21aec:	4946      	ldr	r1, [pc, #280]	; (21c08 <mqtt_client_tls_connect+0x12c>)
   21aee:	4847      	ldr	r0, [pc, #284]	; (21c0c <mqtt_client_tls_connect+0x130>)
   21af0:	2319      	movs	r3, #25
   21af2:	4a47      	ldr	r2, [pc, #284]	; (21c10 <mqtt_client_tls_connect+0x134>)
   21af4:	f01d fca7 	bl	3f446 <printk>
   21af8:	2119      	movs	r1, #25
   21afa:	4845      	ldr	r0, [pc, #276]	; (21c10 <mqtt_client_tls_connect+0x134>)
   21afc:	f01d fcb0 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   21b00:	682b      	ldr	r3, [r5, #0]
   21b02:	681b      	ldr	r3, [r3, #0]
   21b04:	b94b      	cbnz	r3, 21b1a <mqtt_client_tls_connect+0x3e>
   21b06:	4943      	ldr	r1, [pc, #268]	; (21c14 <mqtt_client_tls_connect+0x138>)
   21b08:	4840      	ldr	r0, [pc, #256]	; (21c0c <mqtt_client_tls_connect+0x130>)
   21b0a:	231a      	movs	r3, #26
   21b0c:	4a40      	ldr	r2, [pc, #256]	; (21c10 <mqtt_client_tls_connect+0x134>)
   21b0e:	f01d fc9a 	bl	3f446 <printk>
   21b12:	211a      	movs	r1, #26
   21b14:	483e      	ldr	r0, [pc, #248]	; (21c10 <mqtt_client_tls_connect+0x134>)
   21b16:	f01d fca3 	bl	3f460 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   21b1a:	682b      	ldr	r3, [r5, #0]
   21b1c:	f44f 7281 	mov.w	r2, #258	; 0x102
   21b20:	681b      	ldr	r3, [r3, #0]
   21b22:	2101      	movs	r1, #1
   21b24:	4630      	mov	r0, r6
   21b26:	4798      	blx	r3
					    SOCK_STREAM, IPPROTO_TLS_1_2);
	if (client->transport.tls.sock < 0) {
   21b28:	2800      	cmp	r0, #0
	client->transport.tls.sock = socket(broker->sa_family,
   21b2a:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tls.sock < 0) {
   21b2c:	da05      	bge.n	21b3a <mqtt_client_tls_connect+0x5e>
	MQTT_TRC("Connect completed");
	return 0;

error:
	(void)close(client->transport.tls.sock);
	return -errno;
   21b2e:	f01d febf 	bl	3f8b0 <__errno>
   21b32:	6800      	ldr	r0, [r0, #0]
   21b34:	4240      	negs	r0, r0
}
   21b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = setsockopt(client->transport.tls.sock, SOL_TLS, TLS_PEER_VERIFY,
   21b3a:	2304      	movs	r3, #4
   21b3c:	f104 022c 	add.w	r2, r4, #44	; 0x2c
   21b40:	2105      	movs	r1, #5
   21b42:	f7ff ff93 	bl	21a6c <setsockopt.constprop.1>
	if (ret < 0) {
   21b46:	2800      	cmp	r0, #0
   21b48:	da03      	bge.n	21b52 <mqtt_client_tls_connect+0x76>
	(void)close(client->transport.tls.sock);
   21b4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   21b4c:	f7ff ff62 	bl	21a14 <close>
   21b50:	e7ed      	b.n	21b2e <mqtt_client_tls_connect+0x52>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   21b52:	6b62      	ldr	r2, [r4, #52]	; 0x34
   21b54:	2a00      	cmp	r2, #0
   21b56:	d131      	bne.n	21bbc <mqtt_client_tls_connect+0xe0>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   21b58:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   21b5a:	2a00      	cmp	r2, #0
   21b5c:	d139      	bne.n	21bd2 <mqtt_client_tls_connect+0xf6>
	if (tls_config->hostname) {
   21b5e:	6c26      	ldr	r6, [r4, #64]	; 0x40
   21b60:	2e00      	cmp	r6, #0
   21b62:	d141      	bne.n	21be8 <mqtt_client_tls_connect+0x10c>
	if (broker->sa_family == AF_INET) {
   21b64:	883b      	ldrh	r3, [r7, #0]
	ret = connect(client->transport.tls.sock, client->broker,
   21b66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   21b68:	2b01      	cmp	r3, #1
	__ASSERT_NO_MSG(socket_ops);
   21b6a:	682b      	ldr	r3, [r5, #0]
   21b6c:	bf0c      	ite	eq
   21b6e:	f04f 0808 	moveq.w	r8, #8
   21b72:	f04f 0818 	movne.w	r8, #24
	ret = connect(client->transport.tls.sock, client->broker,
   21b76:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
   21b78:	b94b      	cbnz	r3, 21b8e <mqtt_client_tls_connect+0xb2>
   21b7a:	4923      	ldr	r1, [pc, #140]	; (21c08 <mqtt_client_tls_connect+0x12c>)
   21b7c:	4823      	ldr	r0, [pc, #140]	; (21c0c <mqtt_client_tls_connect+0x130>)
   21b7e:	2345      	movs	r3, #69	; 0x45
   21b80:	4a23      	ldr	r2, [pc, #140]	; (21c10 <mqtt_client_tls_connect+0x134>)
   21b82:	f01d fc60 	bl	3f446 <printk>
   21b86:	2145      	movs	r1, #69	; 0x45
   21b88:	4821      	ldr	r0, [pc, #132]	; (21c10 <mqtt_client_tls_connect+0x134>)
   21b8a:	f01d fc69 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->connect);
   21b8e:	682b      	ldr	r3, [r5, #0]
   21b90:	695b      	ldr	r3, [r3, #20]
   21b92:	b94b      	cbnz	r3, 21ba8 <mqtt_client_tls_connect+0xcc>
   21b94:	4920      	ldr	r1, [pc, #128]	; (21c18 <mqtt_client_tls_connect+0x13c>)
   21b96:	481d      	ldr	r0, [pc, #116]	; (21c0c <mqtt_client_tls_connect+0x130>)
   21b98:	2346      	movs	r3, #70	; 0x46
   21b9a:	4a1d      	ldr	r2, [pc, #116]	; (21c10 <mqtt_client_tls_connect+0x134>)
   21b9c:	f01d fc53 	bl	3f446 <printk>
   21ba0:	2146      	movs	r1, #70	; 0x46
   21ba2:	481b      	ldr	r0, [pc, #108]	; (21c10 <mqtt_client_tls_connect+0x134>)
   21ba4:	f01d fc5c 	bl	3f460 <assert_post_action>
	return socket_ops->connect(sock, addr, addrlen);
   21ba8:	682b      	ldr	r3, [r5, #0]
   21baa:	4642      	mov	r2, r8
   21bac:	695b      	ldr	r3, [r3, #20]
   21bae:	4639      	mov	r1, r7
   21bb0:	4630      	mov	r0, r6
   21bb2:	4798      	blx	r3
	if (ret < 0) {
   21bb4:	2800      	cmp	r0, #0
   21bb6:	dbc8      	blt.n	21b4a <mqtt_client_tls_connect+0x6e>
	return 0;
   21bb8:	2000      	movs	r0, #0
   21bba:	e7bc      	b.n	21b36 <mqtt_client_tls_connect+0x5a>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   21bbc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   21bbe:	2b00      	cmp	r3, #0
   21bc0:	d0ca      	beq.n	21b58 <mqtt_client_tls_connect+0x7c>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   21bc2:	009b      	lsls	r3, r3, #2
   21bc4:	2103      	movs	r1, #3
   21bc6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   21bc8:	f7ff ff50 	bl	21a6c <setsockopt.constprop.1>
		if (ret < 0) {
   21bcc:	2800      	cmp	r0, #0
   21bce:	dac3      	bge.n	21b58 <mqtt_client_tls_connect+0x7c>
   21bd0:	e7bb      	b.n	21b4a <mqtt_client_tls_connect+0x6e>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   21bd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   21bd4:	2b00      	cmp	r3, #0
   21bd6:	d0c2      	beq.n	21b5e <mqtt_client_tls_connect+0x82>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   21bd8:	009b      	lsls	r3, r3, #2
   21bda:	2101      	movs	r1, #1
   21bdc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   21bde:	f7ff ff45 	bl	21a6c <setsockopt.constprop.1>
		if (ret < 0) {
   21be2:	2800      	cmp	r0, #0
   21be4:	dabb      	bge.n	21b5e <mqtt_client_tls_connect+0x82>
   21be6:	e7b0      	b.n	21b4a <mqtt_client_tls_connect+0x6e>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   21be8:	4630      	mov	r0, r6
   21bea:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
   21bee:	f7f8 f979 	bl	19ee4 <strlen>
   21bf2:	4632      	mov	r2, r6
   21bf4:	4603      	mov	r3, r0
   21bf6:	2102      	movs	r1, #2
   21bf8:	4640      	mov	r0, r8
   21bfa:	f7ff ff37 	bl	21a6c <setsockopt.constprop.1>
		if (ret < 0) {
   21bfe:	2800      	cmp	r0, #0
   21c00:	dab0      	bge.n	21b64 <mqtt_client_tls_connect+0x88>
   21c02:	e7a2      	b.n	21b4a <mqtt_client_tls_connect+0x6e>
   21c04:	20023934 	.word	0x20023934
   21c08:	00045442 	.word	0x00045442
   21c0c:	00045316 	.word	0x00045316
   21c10:	00045419 	.word	0x00045419
   21c14:	00046c68 	.word	0x00046c68
   21c18:	00046c7b 	.word	0x00046c7b

00021c1c <mqtt_client_tls_write>:

int mqtt_client_tls_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
   21c1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21c20:	4680      	mov	r8, r0
   21c22:	4689      	mov	r9, r1
   21c24:	4617      	mov	r7, r2
	u32_t offset = 0U;
   21c26:	2400      	movs	r4, #0
	__ASSERT_NO_MSG(socket_ops);
   21c28:	4d1d      	ldr	r5, [pc, #116]	; (21ca0 <mqtt_client_tls_write+0x84>)
	int ret;

	while (offset < datalen) {
   21c2a:	42bc      	cmp	r4, r7
   21c2c:	d301      	bcc.n	21c32 <mqtt_client_tls_write+0x16>
		}

		offset += ret;
	}

	return 0;
   21c2e:	2000      	movs	r0, #0
   21c30:	e031      	b.n	21c96 <mqtt_client_tls_write+0x7a>
		ret = send(client->transport.tls.sock, data + offset,
   21c32:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   21c36:	eb09 0a04 	add.w	sl, r9, r4
   21c3a:	461e      	mov	r6, r3
   21c3c:	4b19      	ldr	r3, [pc, #100]	; (21ca4 <mqtt_client_tls_write+0x88>)
   21c3e:	eba7 0b04 	sub.w	fp, r7, r4
   21c42:	681b      	ldr	r3, [r3, #0]
   21c44:	b94b      	cbnz	r3, 21c5a <mqtt_client_tls_write+0x3e>
   21c46:	4918      	ldr	r1, [pc, #96]	; (21ca8 <mqtt_client_tls_write+0x8c>)
   21c48:	4818      	ldr	r0, [pc, #96]	; (21cac <mqtt_client_tls_write+0x90>)
   21c4a:	237e      	movs	r3, #126	; 0x7e
   21c4c:	462a      	mov	r2, r5
   21c4e:	f01d fbfa 	bl	3f446 <printk>
   21c52:	217e      	movs	r1, #126	; 0x7e
   21c54:	4628      	mov	r0, r5
   21c56:	f01d fc03 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   21c5a:	4b12      	ldr	r3, [pc, #72]	; (21ca4 <mqtt_client_tls_write+0x88>)
   21c5c:	681b      	ldr	r3, [r3, #0]
   21c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   21c60:	b94b      	cbnz	r3, 21c76 <mqtt_client_tls_write+0x5a>
   21c62:	4913      	ldr	r1, [pc, #76]	; (21cb0 <mqtt_client_tls_write+0x94>)
   21c64:	4811      	ldr	r0, [pc, #68]	; (21cac <mqtt_client_tls_write+0x90>)
   21c66:	237f      	movs	r3, #127	; 0x7f
   21c68:	462a      	mov	r2, r5
   21c6a:	f01d fbec 	bl	3f446 <printk>
   21c6e:	217f      	movs	r1, #127	; 0x7f
   21c70:	4628      	mov	r0, r5
   21c72:	f01d fbf5 	bl	3f460 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   21c76:	4b0b      	ldr	r3, [pc, #44]	; (21ca4 <mqtt_client_tls_write+0x88>)
   21c78:	4630      	mov	r0, r6
   21c7a:	681b      	ldr	r3, [r3, #0]
   21c7c:	465a      	mov	r2, fp
   21c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   21c80:	4651      	mov	r1, sl
   21c82:	469c      	mov	ip, r3
   21c84:	2300      	movs	r3, #0
   21c86:	4666      	mov	r6, ip
   21c88:	47b0      	blx	r6
		if (ret < 0) {
   21c8a:	2800      	cmp	r0, #0
   21c8c:	da05      	bge.n	21c9a <mqtt_client_tls_write+0x7e>
			return -errno;
   21c8e:	f01d fe0f 	bl	3f8b0 <__errno>
   21c92:	6800      	ldr	r0, [r0, #0]
   21c94:	4240      	negs	r0, r0
}
   21c96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += ret;
   21c9a:	4404      	add	r4, r0
   21c9c:	e7c5      	b.n	21c2a <mqtt_client_tls_write+0xe>
   21c9e:	bf00      	nop
   21ca0:	00045419 	.word	0x00045419
   21ca4:	20023934 	.word	0x20023934
   21ca8:	00045442 	.word	0x00045442
   21cac:	00045316 	.word	0x00045316
   21cb0:	00046ca0 	.word	0x00046ca0

00021cb4 <mqtt_client_tls_read>:

int mqtt_client_tls_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			 bool shall_block)
{
   21cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   21cb8:	4c18      	ldr	r4, [pc, #96]	; (21d1c <mqtt_client_tls_read+0x68>)
	int flags = 0;
	int ret;

	if (!shall_block) {
		flags |= MSG_DONTWAIT;
   21cba:	2b00      	cmp	r3, #0
   21cbc:	6823      	ldr	r3, [r4, #0]
{
   21cbe:	460e      	mov	r6, r1
   21cc0:	4617      	mov	r7, r2
		flags |= MSG_DONTWAIT;
   21cc2:	bf14      	ite	ne
   21cc4:	f04f 0800 	movne.w	r8, #0
   21cc8:	f04f 0840 	moveq.w	r8, #64	; 0x40
	}

	ret = recv(client->transport.tls.sock, data, buflen, flags);
   21ccc:	6a85      	ldr	r5, [r0, #40]	; 0x28
   21cce:	b94b      	cbnz	r3, 21ce4 <mqtt_client_tls_read+0x30>
   21cd0:	4913      	ldr	r1, [pc, #76]	; (21d20 <mqtt_client_tls_read+0x6c>)
   21cd2:	4814      	ldr	r0, [pc, #80]	; (21d24 <mqtt_client_tls_read+0x70>)
   21cd4:	2369      	movs	r3, #105	; 0x69
   21cd6:	4a14      	ldr	r2, [pc, #80]	; (21d28 <mqtt_client_tls_read+0x74>)
   21cd8:	f01d fbb5 	bl	3f446 <printk>
   21cdc:	2169      	movs	r1, #105	; 0x69
   21cde:	4812      	ldr	r0, [pc, #72]	; (21d28 <mqtt_client_tls_read+0x74>)
   21ce0:	f01d fbbe 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   21ce4:	6823      	ldr	r3, [r4, #0]
   21ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21ce8:	b94b      	cbnz	r3, 21cfe <mqtt_client_tls_read+0x4a>
   21cea:	4910      	ldr	r1, [pc, #64]	; (21d2c <mqtt_client_tls_read+0x78>)
   21cec:	480d      	ldr	r0, [pc, #52]	; (21d24 <mqtt_client_tls_read+0x70>)
   21cee:	236a      	movs	r3, #106	; 0x6a
   21cf0:	4a0d      	ldr	r2, [pc, #52]	; (21d28 <mqtt_client_tls_read+0x74>)
   21cf2:	f01d fba8 	bl	3f446 <printk>
   21cf6:	216a      	movs	r1, #106	; 0x6a
   21cf8:	480b      	ldr	r0, [pc, #44]	; (21d28 <mqtt_client_tls_read+0x74>)
   21cfa:	f01d fbb1 	bl	3f460 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   21cfe:	6823      	ldr	r3, [r4, #0]
   21d00:	463a      	mov	r2, r7
   21d02:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   21d04:	4631      	mov	r1, r6
   21d06:	4643      	mov	r3, r8
   21d08:	4628      	mov	r0, r5
   21d0a:	47a0      	blx	r4
	if (ret < 0) {
   21d0c:	2800      	cmp	r0, #0
   21d0e:	da03      	bge.n	21d18 <mqtt_client_tls_read+0x64>
		return -errno;
   21d10:	f01d fdce 	bl	3f8b0 <__errno>
   21d14:	6800      	ldr	r0, [r0, #0]
   21d16:	4240      	negs	r0, r0
	}

	return ret;
}
   21d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21d1c:	20023934 	.word	0x20023934
   21d20:	00045442 	.word	0x00045442
   21d24:	00045316 	.word	0x00045316
   21d28:	00045419 	.word	0x00045419
   21d2c:	00046c8f 	.word	0x00046c8f

00021d30 <z_impl_entropy_get_entropy>:
				  u16_t length);

static inline int z_impl_entropy_get_entropy(struct device *dev,
					    u8_t *buffer,
					    u16_t length)
{
   21d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct entropy_driver_api *api =
   21d34:	6845      	ldr	r5, [r0, #4]
{
   21d36:	4604      	mov	r4, r0
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
   21d38:	682b      	ldr	r3, [r5, #0]
{
   21d3a:	460e      	mov	r6, r1
   21d3c:	4617      	mov	r7, r2
	__ASSERT(api->get_entropy != NULL,
   21d3e:	b963      	cbnz	r3, 21d5a <z_impl_entropy_get_entropy+0x2a>
   21d40:	4909      	ldr	r1, [pc, #36]	; (21d68 <z_impl_entropy_get_entropy+0x38>)
   21d42:	234c      	movs	r3, #76	; 0x4c
   21d44:	4a09      	ldr	r2, [pc, #36]	; (21d6c <z_impl_entropy_get_entropy+0x3c>)
   21d46:	480a      	ldr	r0, [pc, #40]	; (21d70 <z_impl_entropy_get_entropy+0x40>)
   21d48:	f01d fb7d 	bl	3f446 <printk>
   21d4c:	4809      	ldr	r0, [pc, #36]	; (21d74 <z_impl_entropy_get_entropy+0x44>)
   21d4e:	f01d fb7a 	bl	3f446 <printk>
   21d52:	214c      	movs	r1, #76	; 0x4c
   21d54:	4805      	ldr	r0, [pc, #20]	; (21d6c <z_impl_entropy_get_entropy+0x3c>)
   21d56:	f01d fb83 	bl	3f460 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   21d5a:	682b      	ldr	r3, [r5, #0]
   21d5c:	463a      	mov	r2, r7
   21d5e:	4631      	mov	r1, r6
   21d60:	4620      	mov	r0, r4
}
   21d62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->get_entropy(dev, buffer, length);
   21d66:	4718      	bx	r3
   21d68:	00046e0c 	.word	0x00046e0c
   21d6c:	00046de6 	.word	0x00046de6
   21d70:	00045316 	.word	0x00045316
   21d74:	00046e2c 	.word	0x00046e2c

00021d78 <sys_rand32_get>:

static struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
u32_t sys_rand32_get(void)
{
   21d78:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *dev = entropy_driver;
   21d7a:	4d12      	ldr	r5, [pc, #72]	; (21dc4 <sys_rand32_get+0x4c>)
   21d7c:	682c      	ldr	r4, [r5, #0]
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
   21d7e:	b99c      	cbnz	r4, 21da8 <sys_rand32_get+0x30>
   21d80:	4811      	ldr	r0, [pc, #68]	; (21dc8 <sys_rand32_get+0x50>)
   21d82:	f017 f819 	bl	38db8 <z_impl_device_get_binding>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
		__ASSERT((dev != NULL),
   21d86:	4604      	mov	r4, r0
   21d88:	b968      	cbnz	r0, 21da6 <sys_rand32_get+0x2e>
   21d8a:	231d      	movs	r3, #29
   21d8c:	4a0f      	ldr	r2, [pc, #60]	; (21dcc <sys_rand32_get+0x54>)
   21d8e:	4910      	ldr	r1, [pc, #64]	; (21dd0 <sys_rand32_get+0x58>)
   21d90:	4810      	ldr	r0, [pc, #64]	; (21dd4 <sys_rand32_get+0x5c>)
   21d92:	f01d fb58 	bl	3f446 <printk>
   21d96:	490c      	ldr	r1, [pc, #48]	; (21dc8 <sys_rand32_get+0x50>)
   21d98:	480f      	ldr	r0, [pc, #60]	; (21dd8 <sys_rand32_get+0x60>)
   21d9a:	f01d fb54 	bl	3f446 <printk>
   21d9e:	211d      	movs	r1, #29
   21da0:	480a      	ldr	r0, [pc, #40]	; (21dcc <sys_rand32_get+0x54>)
   21da2:	f01d fb5d 	bl	3f460 <assert_post_action>
			"Device driver for %s (CONFIG_ENTROPY_NAME) not found. "
			"Check your build configuration!",
			CONFIG_ENTROPY_NAME);
		entropy_driver = dev;
   21da6:	602c      	str	r4, [r5, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_ENTROPY_GET_ENTROPY);
	}
#endif
	compiler_barrier();
	return z_impl_entropy_get_entropy(dev, buffer, length);
   21da8:	2204      	movs	r2, #4
   21daa:	4620      	mov	r0, r4
   21dac:	eb0d 0102 	add.w	r1, sp, r2
   21db0:	f7ff ffbe 	bl	21d30 <z_impl_entropy_get_entropy>
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   21db4:	2800      	cmp	r0, #0
   21db6:	da02      	bge.n	21dbe <sys_rand32_get+0x46>
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   21db8:	f7fe fa68 	bl	2028c <z_timer_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
   21dbc:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
   21dbe:	9801      	ldr	r0, [sp, #4]
   21dc0:	b003      	add	sp, #12
   21dc2:	bd30      	pop	{r4, r5, pc}
   21dc4:	20023974 	.word	0x20023974
   21dc8:	00046d3d 	.word	0x00046d3d
   21dcc:	00046d47 	.word	0x00046d47
   21dd0:	00046d79 	.word	0x00046d79
   21dd4:	00045316 	.word	0x00045316
   21dd8:	00046d8e 	.word	0x00046d8e

00021ddc <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   21ddc:	b570      	push	{r4, r5, r6, lr}
   21dde:	4616      	mov	r6, r2
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   21de0:	6884      	ldr	r4, [r0, #8]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   21de2:	460d      	mov	r5, r1
   21de4:	b961      	cbnz	r1, 21e00 <gpio_nrfx_manage_callback+0x24>
   21de6:	4922      	ldr	r1, [pc, #136]	; (21e70 <gpio_nrfx_manage_callback+0x94>)
   21de8:	231c      	movs	r3, #28
   21dea:	4a22      	ldr	r2, [pc, #136]	; (21e74 <gpio_nrfx_manage_callback+0x98>)
   21dec:	4822      	ldr	r0, [pc, #136]	; (21e78 <gpio_nrfx_manage_callback+0x9c>)
   21dee:	f01d fb2a 	bl	3f446 <printk>
   21df2:	4822      	ldr	r0, [pc, #136]	; (21e7c <gpio_nrfx_manage_callback+0xa0>)
   21df4:	f01d fb27 	bl	3f446 <printk>
   21df8:	211c      	movs	r1, #28
   21dfa:	481e      	ldr	r0, [pc, #120]	; (21e74 <gpio_nrfx_manage_callback+0x98>)
   21dfc:	f01d fb30 	bl	3f460 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   21e00:	686b      	ldr	r3, [r5, #4]
   21e02:	b963      	cbnz	r3, 21e1e <gpio_nrfx_manage_callback+0x42>
   21e04:	491e      	ldr	r1, [pc, #120]	; (21e80 <gpio_nrfx_manage_callback+0xa4>)
   21e06:	231d      	movs	r3, #29
   21e08:	4a1a      	ldr	r2, [pc, #104]	; (21e74 <gpio_nrfx_manage_callback+0x98>)
   21e0a:	481b      	ldr	r0, [pc, #108]	; (21e78 <gpio_nrfx_manage_callback+0x9c>)
   21e0c:	f01d fb1b 	bl	3f446 <printk>
   21e10:	481c      	ldr	r0, [pc, #112]	; (21e84 <gpio_nrfx_manage_callback+0xa8>)
   21e12:	f01d fb18 	bl	3f446 <printk>
   21e16:	211d      	movs	r1, #29
   21e18:	4816      	ldr	r0, [pc, #88]	; (21e74 <gpio_nrfx_manage_callback+0x98>)
   21e1a:	f01d fb21 	bl	3f460 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   21e1e:	6823      	ldr	r3, [r4, #0]

	if (!sys_slist_is_empty(callbacks)) {
   21e20:	b15b      	cbz	r3, 21e3a <gpio_nrfx_manage_callback+0x5e>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21e22:	2200      	movs	r2, #0
   21e24:	429d      	cmp	r5, r3
   21e26:	d113      	bne.n	21e50 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   21e28:	682b      	ldr	r3, [r5, #0]
   21e2a:	b95a      	cbnz	r2, 21e44 <gpio_nrfx_manage_callback+0x68>
   21e2c:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   21e2e:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   21e30:	4295      	cmp	r5, r2
   21e32:	d100      	bne.n	21e36 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   21e34:	6063      	str	r3, [r4, #4]
	parent->next = child;
   21e36:	2300      	movs	r3, #0
   21e38:	602b      	str	r3, [r5, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   21e3a:	b976      	cbnz	r6, 21e5a <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   21e3c:	2000      	movs	r0, #0
				     callback, set);
}
   21e3e:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21e40:	460b      	mov	r3, r1
   21e42:	e7ef      	b.n	21e24 <gpio_nrfx_manage_callback+0x48>
	parent->next = child;
   21e44:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   21e46:	6863      	ldr	r3, [r4, #4]
   21e48:	429d      	cmp	r5, r3
	list->tail = node;
   21e4a:	bf08      	it	eq
   21e4c:	6062      	streq	r2, [r4, #4]
   21e4e:	e7f2      	b.n	21e36 <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21e50:	6819      	ldr	r1, [r3, #0]
	return node->next;
   21e52:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21e54:	2900      	cmp	r1, #0
   21e56:	d1f3      	bne.n	21e40 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   21e58:	b13e      	cbz	r6, 21e6a <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   21e5a:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   21e5c:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   21e5e:	6860      	ldr	r0, [r4, #4]
	list->head = node;
   21e60:	6025      	str	r5, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   21e62:	2800      	cmp	r0, #0
   21e64:	d1ea      	bne.n	21e3c <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   21e66:	6065      	str	r5, [r4, #4]
   21e68:	e7e9      	b.n	21e3e <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   21e6a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   21e6e:	e7e6      	b.n	21e3e <gpio_nrfx_manage_callback+0x62>
   21e70:	000471e0 	.word	0x000471e0
   21e74:	00046e6b 	.word	0x00046e6b
   21e78:	00045316 	.word	0x00045316
   21e7c:	00046e91 	.word	0x00046e91
   21e80:	00046ea0 	.word	0x00046ea0
   21e84:	00046eb2 	.word	0x00046eb2

00021e88 <nrf_gpio_pin_port_decode.isra.8.part.9>:
 *
 * @param[in,out] p_pin Pointer to the absolute pin number overriden by the pin number that is relative to the port.
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   21e88:	b508      	push	{r3, lr}
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   21e8a:	4a03      	ldr	r2, [pc, #12]	; (21e98 <nrf_gpio_pin_port_decode.isra.8.part.9+0x10>)
   21e8c:	4b03      	ldr	r3, [pc, #12]	; (21e9c <nrf_gpio_pin_port_decode.isra.8.part.9+0x14>)
   21e8e:	f44f 71ed 	mov.w	r1, #474	; 0x1da
   21e92:	4803      	ldr	r0, [pc, #12]	; (21ea0 <nrf_gpio_pin_port_decode.isra.8.part.9+0x18>)
   21e94:	f01a fd6e 	bl	3c974 <__assert_func>
   21e98:	00046e52 	.word	0x00046e52
   21e9c:	00046efa 	.word	0x00046efa
   21ea0:	00046f08 	.word	0x00046f08

00021ea4 <nrf_gpio_cfg_sense_set>:
   21ea4:	281f      	cmp	r0, #31
}


NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
   21ea6:	b508      	push	{r3, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   21ea8:	d901      	bls.n	21eae <nrf_gpio_cfg_sense_set+0xa>
   21eaa:	f7ff ffed 	bl	21e88 <nrf_gpio_pin_port_decode.isra.8.part.9>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   21eae:	4a06      	ldr	r2, [pc, #24]	; (21ec8 <nrf_gpio_cfg_sense_set+0x24>)
   21eb0:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   21eb4:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   21eb8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   21ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   21ec0:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   21ec4:	bd08      	pop	{r3, pc}
   21ec6:	bf00      	nop
   21ec8:	40842500 	.word	0x40842500

00021ecc <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   21ecc:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   21ece:	4b09      	ldr	r3, [pc, #36]	; (21ef4 <gpio_nrfx_init+0x28>)
   21ed0:	781a      	ldrb	r2, [r3, #0]
   21ed2:	b96a      	cbnz	r2, 21ef0 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   21ed4:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   21ed6:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   21ed8:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   21eda:	2105      	movs	r1, #5
   21edc:	f7fe fad0 	bl	20480 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
   21ee0:	2031      	movs	r0, #49	; 0x31
   21ee2:	f7fe fabd 	bl	20460 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   21ee6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   21eea:	4b03      	ldr	r3, [pc, #12]	; (21ef8 <gpio_nrfx_init+0x2c>)
   21eec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   21ef0:	2000      	movs	r0, #0
   21ef2:	bd08      	pop	{r3, pc}
   21ef4:	2002ada2 	.word	0x2002ada2
   21ef8:	40031000 	.word	0x40031000

00021efc <gpiote_pin_int_cfg>:
{
   21efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->config->config_info;
   21f00:	6803      	ldr	r3, [r0, #0]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   21f02:	f001 041f 	and.w	r4, r1, #31
   21f06:	689b      	ldr	r3, [r3, #8]
{
   21f08:	460d      	mov	r5, r1
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   21f0a:	791b      	ldrb	r3, [r3, #4]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   21f0c:	4e4b      	ldr	r6, [pc, #300]	; (2203c <gpiote_pin_int_cfg+0x140>)
   21f0e:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   21f12:	2300      	movs	r3, #0
   21f14:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
	struct gpio_nrfx_data *data = get_port_data(port);
   21f18:	6887      	ldr	r7, [r0, #8]
   21f1a:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   21f1c:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   21f20:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   21f24:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   21f28:	428c      	cmp	r4, r1
   21f2a:	d16c      	bne.n	22006 <gpiote_pin_int_cfg+0x10a>
		    && (intenset & BIT(i))) {
   21f2c:	fa22 f103 	lsr.w	r1, r2, r3
   21f30:	07c9      	lsls	r1, r1, #31
   21f32:	d568      	bpl.n	22006 <gpiote_pin_int_cfg+0x10a>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   21f34:	009a      	lsls	r2, r3, #2
   21f36:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   21f3a:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   21f3e:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   21f42:	f021 0101 	bic.w	r1, r1, #1
   21f46:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   21f4a:	2201      	movs	r2, #1
   21f4c:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENCLR = mask;
   21f50:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   21f54:	4620      	mov	r0, r4
   21f56:	2100      	movs	r1, #0
   21f58:	f7ff ffa4 	bl	21ea4 <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   21f5c:	68b8      	ldr	r0, [r7, #8]
   21f5e:	40e8      	lsrs	r0, r5
   21f60:	f010 0001 	ands.w	r0, r0, #1
   21f64:	d04d      	beq.n	22002 <gpiote_pin_int_cfg+0x106>
   21f66:	68f8      	ldr	r0, [r7, #12]
   21f68:	40e8      	lsrs	r0, r5
   21f6a:	f010 0001 	ands.w	r0, r0, #1
   21f6e:	d048      	beq.n	22002 <gpiote_pin_int_cfg+0x106>
		if (data->trig_edge & BIT(pin)) {
   21f70:	6978      	ldr	r0, [r7, #20]
   21f72:	40e8      	lsrs	r0, r5
   21f74:	f010 0801 	ands.w	r8, r0, #1
   21f78:	d051      	beq.n	2201e <gpiote_pin_int_cfg+0x122>
			if (data->double_edge & BIT(pin)) {
   21f7a:	69bb      	ldr	r3, [r7, #24]
   21f7c:	40eb      	lsrs	r3, r5
   21f7e:	07db      	lsls	r3, r3, #31
   21f80:	d445      	bmi.n	2200e <gpiote_pin_int_cfg+0x112>
			} else if (((data->active_level & BIT(pin)) != 0U)
   21f82:	693b      	ldr	r3, [r7, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   21f84:	69fa      	ldr	r2, [r7, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   21f86:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   21f88:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0U)
   21f8c:	f003 0301 	and.w	r3, r3, #1
   21f90:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   21f94:	42ab      	cmp	r3, r5
   21f96:	bf14      	ite	ne
   21f98:	2501      	movne	r5, #1
   21f9a:	2502      	moveq	r5, #2
   21f9c:	2100      	movs	r1, #0
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   21f9e:	f501 73a2 	add.w	r3, r1, #324	; 0x144
   21fa2:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   21fa6:	f010 0003 	ands.w	r0, r0, #3
   21faa:	d132      	bne.n	22012 <gpiote_pin_int_cfg+0x116>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   21fac:	008b      	lsls	r3, r1, #2
   21fae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21fb2:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   21fb6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21fba:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   21fbc:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   21fc0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   21fc4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21fc8:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   21fcc:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   21fd0:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   21fd4:	4315      	orrs	r5, r2
			nrf_gpiote_event_t evt =
   21fd6:	f101 0240 	add.w	r2, r1, #64	; 0x40
   21fda:	0092      	lsls	r2, r2, #2
    return ((uint32_t)p_reg + event);
   21fdc:	b292      	uxth	r2, r2
   21fde:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   21fe2:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21fe6:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21fea:	6010      	str	r0, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   21fec:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   21ff0:	f042 0201 	orr.w	r2, r2, #1
   21ff4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   21ff8:	2301      	movs	r3, #1
   21ffa:	fa03 f101 	lsl.w	r1, r3, r1
    p_reg->INTENSET = mask;
   21ffe:	f8c6 1304 	str.w	r1, [r6, #772]	; 0x304
}
   22002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   22006:	3301      	adds	r3, #1
   22008:	2b08      	cmp	r3, #8
   2200a:	d187      	bne.n	21f1c <gpiote_pin_int_cfg+0x20>
   2200c:	e7a2      	b.n	21f54 <gpiote_pin_int_cfg+0x58>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   2200e:	2503      	movs	r5, #3
   22010:	e7c4      	b.n	21f9c <gpiote_pin_int_cfg+0xa0>
   22012:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   22014:	2908      	cmp	r1, #8
   22016:	d1c2      	bne.n	21f9e <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
   22018:	f06f 0012 	mvn.w	r0, #18
   2201c:	e7f1      	b.n	22002 <gpiote_pin_int_cfg+0x106>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   2201e:	693b      	ldr	r3, [r7, #16]
   22020:	69fa      	ldr	r2, [r7, #28]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   22022:	4620      	mov	r0, r4
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   22024:	4053      	eors	r3, r2
   22026:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   2202a:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2202e:	bf0c      	ite	eq
   22030:	2103      	moveq	r1, #3
   22032:	2102      	movne	r1, #2
   22034:	f7ff ff36 	bl	21ea4 <nrf_gpio_cfg_sense_set>
	int res = 0;
   22038:	4640      	mov	r0, r8
   2203a:	e7e2      	b.n	22002 <gpiote_pin_int_cfg+0x106>
   2203c:	40031000 	.word	0x40031000

00022040 <gpio_nrfx_config>:
{
   22040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22044:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   22046:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   22048:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   2204c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   22050:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   22052:	d040      	beq.n	220d6 <gpio_nrfx_config+0x96>
   22054:	dc09      	bgt.n	2206a <gpio_nrfx_config+0x2a>
   22056:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   2205a:	d03e      	beq.n	220da <gpio_nrfx_config+0x9a>
   2205c:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   22060:	d03d      	beq.n	220de <gpio_nrfx_config+0x9e>
   22062:	b190      	cbz	r0, 2208a <gpio_nrfx_config+0x4a>
		return -EINVAL;
   22064:	f06f 0015 	mvn.w	r0, #21
   22068:	e032      	b.n	220d0 <gpio_nrfx_config+0x90>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   2206a:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   2206e:	d038      	beq.n	220e2 <gpio_nrfx_config+0xa2>
   22070:	dc04      	bgt.n	2207c <gpio_nrfx_config+0x3c>
   22072:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   22076:	d1f5      	bne.n	22064 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   22078:	2003      	movs	r0, #3
   2207a:	e006      	b.n	2208a <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   2207c:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   22080:	d031      	beq.n	220e6 <gpio_nrfx_config+0xa6>
   22082:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   22086:	d1ed      	bne.n	22064 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
   22088:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   2208a:	f406 7740 	and.w	r7, r6, #768	; 0x300
   2208e:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   22092:	d02a      	beq.n	220ea <gpio_nrfx_config+0xaa>
		pull = NRF_GPIO_PIN_NOPULL;
   22094:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   22098:	4263      	negs	r3, r4
   2209a:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   2209c:	2901      	cmp	r1, #1
		from_pin = pin;
   2209e:	bf19      	ittee	ne
   220a0:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
   220a2:	46a1      	movne	r9, r4
		to_pin   = 31U;
   220a4:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   220a8:	2400      	moveq	r4, #0
   220aa:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   220ae:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   220b2:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   220b6:	ea47 070c 	orr.w	r7, r7, ip
   220ba:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   220be:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 22168 <gpio_nrfx_config+0x128>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   220c2:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   220c6:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   220ca:	45a1      	cmp	r9, r4
   220cc:	d20f      	bcs.n	220ee <gpio_nrfx_config+0xae>
	return 0;
   220ce:	2000      	movs	r0, #0
}
   220d0:	b003      	add	sp, #12
   220d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
   220d6:	2002      	movs	r0, #2
   220d8:	e7d7      	b.n	2208a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
   220da:	2001      	movs	r0, #1
   220dc:	e7d5      	b.n	2208a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
   220de:	2004      	movs	r0, #4
   220e0:	e7d3      	b.n	2208a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
   220e2:	2005      	movs	r0, #5
   220e4:	e7d1      	b.n	2208a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
   220e6:	2006      	movs	r0, #6
   220e8:	e7cf      	b.n	2208a <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
   220ea:	2303      	movs	r3, #3
   220ec:	e7d6      	b.n	2209c <gpio_nrfx_config+0x5c>
	return port->config->config_info;
   220ee:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   220f2:	6892      	ldr	r2, [r2, #8]
   220f4:	7911      	ldrb	r1, [r2, #4]
   220f6:	f004 021f 	and.w	r2, r4, #31
   220fa:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   220fe:	2a1f      	cmp	r2, #31
   22100:	dd01      	ble.n	22106 <gpio_nrfx_config+0xc6>
   22102:	f7ff fec1 	bl	21e88 <nrf_gpio_pin_port_decode.isra.8.part.9>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   22106:	3280      	adds	r2, #128	; 0x80
   22108:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   2210c:	68a9      	ldr	r1, [r5, #8]
   2210e:	fa0b f204 	lsl.w	r2, fp, r4
   22112:	2b00      	cmp	r3, #0
   22114:	d025      	beq.n	22162 <gpio_nrfx_config+0x122>
   22116:	4311      	orrs	r1, r2
   22118:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   2211a:	6969      	ldr	r1, [r5, #20]
   2211c:	06b0      	lsls	r0, r6, #26
   2211e:	bf4c      	ite	mi
   22120:	4311      	orrmi	r1, r2
   22122:	4391      	bicpl	r1, r2
   22124:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
   22126:	69a9      	ldr	r1, [r5, #24]
   22128:	0670      	lsls	r0, r6, #25
   2212a:	bf4c      	ite	mi
   2212c:	4311      	orrmi	r1, r2
   2212e:	4391      	bicpl	r1, r2
   22130:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
   22132:	6929      	ldr	r1, [r5, #16]
   22134:	0770      	lsls	r0, r6, #29
   22136:	bf4c      	ite	mi
   22138:	4311      	orrmi	r1, r2
   2213a:	4391      	bicpl	r1, r2
   2213c:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   2213e:	69e9      	ldr	r1, [r5, #28]
   22140:	0630      	lsls	r0, r6, #24
   22142:	bf4c      	ite	mi
   22144:	430a      	orrmi	r2, r1
   22146:	ea21 0202 	bicpl.w	r2, r1, r2
   2214a:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   2214c:	4621      	mov	r1, r4
   2214e:	4640      	mov	r0, r8
   22150:	9301      	str	r3, [sp, #4]
   22152:	f7ff fed3 	bl	21efc <gpiote_pin_int_cfg>
		if (res != 0) {
   22156:	2800      	cmp	r0, #0
   22158:	d1ba      	bne.n	220d0 <gpio_nrfx_config+0x90>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2215a:	3401      	adds	r4, #1
   2215c:	b2e4      	uxtb	r4, r4
   2215e:	9b01      	ldr	r3, [sp, #4]
   22160:	e7b3      	b.n	220ca <gpio_nrfx_config+0x8a>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   22162:	ea21 0102 	bic.w	r1, r1, r2
   22166:	e7d7      	b.n	22118 <gpio_nrfx_config+0xd8>
   22168:	40842500 	.word	0x40842500

0002216c <gpiote_event_handler>:
{
   2216c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22170:	4b56      	ldr	r3, [pc, #344]	; (222cc <gpiote_event_handler+0x160>)
   22172:	681e      	ldr	r6, [r3, #0]
	if (port_event) {
   22174:	4698      	mov	r8, r3
   22176:	2e00      	cmp	r6, #0
   22178:	d05e      	beq.n	22238 <gpiote_event_handler+0xcc>
	u32_t bit = 1U << pin;
   2217a:	2701      	movs	r7, #1
	u32_t pin = 0U;
   2217c:	f04f 0a00 	mov.w	sl, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   22180:	4a53      	ldr	r2, [pc, #332]	; (222d0 <gpiote_event_handler+0x164>)
   22182:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
   22184:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   22186:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
   22188:	f8d2 9008 	ldr.w	r9, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
   2218c:	e9d3 2502 	ldrd	r2, r5, [r3, #8]
   22190:	4015      	ands	r5, r2
	out &= ~data->trig_edge & ~data->double_edge;
   22192:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   22196:	430a      	orrs	r2, r1
   22198:	ea25 0502 	bic.w	r5, r5, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   2219c:	f8d9 2000 	ldr.w	r2, [r9]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   221a0:	691b      	ldr	r3, [r3, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   221a2:	6912      	ldr	r2, [r2, #16]
   221a4:	405c      	eors	r4, r3
   221a6:	4054      	eors	r4, r2
	u32_t out = pin_states & level_pins;
   221a8:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   221ac:	bb9d      	cbnz	r5, 22216 <gpiote_event_handler+0xaa>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   221ae:	f8c8 5000 	str.w	r5, [r8]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   221b2:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   221b4:	2001      	movs	r0, #1
   221b6:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   221b8:	4946      	ldr	r1, [pc, #280]	; (222d4 <gpiote_event_handler+0x168>)
   221ba:	4d47      	ldr	r5, [pc, #284]	; (222d8 <gpiote_event_handler+0x16c>)
   221bc:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   221c0:	fa00 fc03 	lsl.w	ip, r0, r3
   221c4:	ea1c 0f02 	tst.w	ip, r2
   221c8:	d00d      	beq.n	221e6 <gpiote_event_handler+0x7a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   221ca:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   221ce:	b152      	cbz	r2, 221e6 <gpiote_event_handler+0x7a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   221d0:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   221d4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   221d8:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   221dc:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   221e0:	fa00 f202 	lsl.w	r2, r0, r2
   221e4:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   221e6:	3301      	adds	r3, #1
   221e8:	2b08      	cmp	r3, #8
   221ea:	d1e7      	bne.n	221bc <gpiote_event_handler+0x50>
	if (fired_triggers[0]) {
   221ec:	bb34      	cbnz	r4, 2223c <gpiote_event_handler+0xd0>
	if (port_event) {
   221ee:	b186      	cbz	r6, 22212 <gpiote_event_handler+0xa6>
	u32_t bit = 1U << pin;
   221f0:	2701      	movs	r7, #1
	u32_t pin = 0U;
   221f2:	f04f 0800 	mov.w	r8, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   221f6:	4b36      	ldr	r3, [pc, #216]	; (222d0 <gpiote_event_handler+0x164>)
   221f8:	689d      	ldr	r5, [r3, #8]
	return port->config->config_info;
   221fa:	681b      	ldr	r3, [r3, #0]
   221fc:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   221fe:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
   22202:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
   22204:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
   22208:	4313      	orrs	r3, r2
   2220a:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   2220e:	2c00      	cmp	r4, #0
   22210:	d142      	bne.n	22298 <gpiote_event_handler+0x12c>
}
   22212:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (level_pins & bit) {
   22216:	423d      	tst	r5, r7
   22218:	d00a      	beq.n	22230 <gpiote_event_handler+0xc4>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2221a:	f899 3004 	ldrb.w	r3, [r9, #4]
   2221e:	f00a 001f 	and.w	r0, sl, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   22222:	2100      	movs	r1, #0
   22224:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   22228:	f7ff fe3c 	bl	21ea4 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   2222c:	ea25 0507 	bic.w	r5, r5, r7
		++pin;
   22230:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
   22234:	007f      	lsls	r7, r7, #1
   22236:	e7b9      	b.n	221ac <gpiote_event_handler+0x40>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   22238:	4634      	mov	r4, r6
   2223a:	e7ba      	b.n	221b2 <gpiote_event_handler+0x46>
	struct gpio_nrfx_data *data = get_port_data(port);
   2223c:	4b24      	ldr	r3, [pc, #144]	; (222d0 <gpiote_event_handler+0x164>)
   2223e:	f8d3 9008 	ldr.w	r9, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   22242:	f8d9 5000 	ldr.w	r5, [r9]
   22246:	2d00      	cmp	r5, #0
   22248:	d0d1      	beq.n	221ee <gpiote_event_handler+0x82>
			cb->handler(port, cb, pins);
   2224a:	4698      	mov	r8, r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2224c:	682f      	ldr	r7, [r5, #0]
			__ASSERT(cb->handler, "No callback handler!");
   2224e:	f8df a094 	ldr.w	sl, [pc, #148]	; 222e4 <gpiote_event_handler+0x178>
   22252:	f8df b094 	ldr.w	fp, [pc, #148]	; 222e8 <gpiote_event_handler+0x17c>
		if ((cb->pin_mask & pins) & data->int_en) {
   22256:	f8d9 300c 	ldr.w	r3, [r9, #12]
   2225a:	68aa      	ldr	r2, [r5, #8]
   2225c:	4023      	ands	r3, r4
   2225e:	4213      	tst	r3, r2
   22260:	d015      	beq.n	2228e <gpiote_event_handler+0x122>
			__ASSERT(cb->handler, "No callback handler!");
   22262:	686b      	ldr	r3, [r5, #4]
   22264:	b973      	cbnz	r3, 22284 <gpiote_event_handler+0x118>
   22266:	4659      	mov	r1, fp
   22268:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
   2226c:	4652      	mov	r2, sl
   2226e:	481b      	ldr	r0, [pc, #108]	; (222dc <gpiote_event_handler+0x170>)
   22270:	f01d f8e9 	bl	3f446 <printk>
   22274:	481a      	ldr	r0, [pc, #104]	; (222e0 <gpiote_event_handler+0x174>)
   22276:	f01d f8e6 	bl	3f446 <printk>
   2227a:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   2227e:	4650      	mov	r0, sl
   22280:	f01d f8ee 	bl	3f460 <assert_post_action>
			cb->handler(port, cb, pins);
   22284:	686b      	ldr	r3, [r5, #4]
   22286:	4622      	mov	r2, r4
   22288:	4629      	mov	r1, r5
   2228a:	4640      	mov	r0, r8
   2228c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2228e:	2f00      	cmp	r7, #0
   22290:	d0ad      	beq.n	221ee <gpiote_event_handler+0x82>
   22292:	463d      	mov	r5, r7
   22294:	683f      	ldr	r7, [r7, #0]
   22296:	e7de      	b.n	22256 <gpiote_event_handler+0xea>
		if (level_pins & bit) {
   22298:	4227      	tst	r7, r4
   2229a:	d013      	beq.n	222c4 <gpiote_event_handler+0x158>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   2229c:	692b      	ldr	r3, [r5, #16]
   2229e:	69ea      	ldr	r2, [r5, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   222a0:	f896 c004 	ldrb.w	ip, [r6, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   222a4:	4053      	eors	r3, r2
   222a6:	fa23 f308 	lsr.w	r3, r3, r8
		return NRF_GPIO_PIN_SENSE_HIGH;
   222aa:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   222ae:	f008 001f 	and.w	r0, r8, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   222b2:	bf0c      	ite	eq
   222b4:	2103      	moveq	r1, #3
   222b6:	2102      	movne	r1, #2
   222b8:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
   222bc:	f7ff fdf2 	bl	21ea4 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   222c0:	ea24 0407 	bic.w	r4, r4, r7
		++pin;
   222c4:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
   222c8:	007f      	lsls	r7, r7, #1
   222ca:	e7a0      	b.n	2220e <gpiote_event_handler+0xa2>
   222cc:	4003117c 	.word	0x4003117c
   222d0:	20031ef8 	.word	0x20031ef8
   222d4:	40031000 	.word	0x40031000
   222d8:	40031100 	.word	0x40031100
   222dc:	00045316 	.word	0x00045316
   222e0:	00046eb2 	.word	0x00046eb2
   222e4:	00046ec9 	.word	0x00046ec9
   222e8:	00046eee 	.word	0x00046eee

000222ec <flash_nrf_write_protection>:
}

static int flash_nrf_write_protection(struct device *dev, bool enable)
{
	/* virtual write-erase protection */
	write_protect = enable;
   222ec:	4b01      	ldr	r3, [pc, #4]	; (222f4 <flash_nrf_write_protection+0x8>)

	return 0;
}
   222ee:	2000      	movs	r0, #0
	write_protect = enable;
   222f0:	7019      	strb	r1, [r3, #0]
}
   222f2:	4770      	bx	lr
   222f4:	2002ada3 	.word	0x2002ada3

000222f8 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   222f8:	4b02      	ldr	r3, [pc, #8]	; (22304 <flash_nrf_pages_layout+0xc>)
   222fa:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   222fc:	2301      	movs	r3, #1
   222fe:	6013      	str	r3, [r2, #0]
}
   22300:	4770      	bx	lr
   22302:	bf00      	nop
   22304:	20023998 	.word	0x20023998

00022308 <flash_nrf_erase>:
{
   22308:	b570      	push	{r4, r5, r6, lr}
   2230a:	460d      	mov	r5, r1
   2230c:	4614      	mov	r4, r2
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2230e:	f01f f9b4 	bl	4167a <nrfx_nvmc_flash_page_size_get>
	if (write_protect) {
   22312:	4b17      	ldr	r3, [pc, #92]	; (22370 <flash_nrf_erase+0x68>)
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   22314:	4606      	mov	r6, r0
	if (write_protect) {
   22316:	781b      	ldrb	r3, [r3, #0]
   22318:	bb1b      	cbnz	r3, 22362 <flash_nrf_erase+0x5a>
	if (is_regular_addr_valid(addr, size)) {
   2231a:	4621      	mov	r1, r4
   2231c:	4628      	mov	r0, r5
   2231e:	f01e f83b 	bl	40398 <is_regular_addr_valid>
   22322:	b308      	cbz	r0, 22368 <flash_nrf_erase+0x60>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   22324:	fbb5 f3f6 	udiv	r3, r5, r6
   22328:	fb06 5313 	mls	r3, r6, r3, r5
   2232c:	b9e3      	cbnz	r3, 22368 <flash_nrf_erase+0x60>
   2232e:	fbb4 f0f6 	udiv	r0, r4, r6
   22332:	fb06 4010 	mls	r0, r6, r0, r4
   22336:	b9b8      	cbnz	r0, 22368 <flash_nrf_erase+0x60>
		if (!n_pages) {
   22338:	42a6      	cmp	r6, r4
   2233a:	d811      	bhi.n	22360 <flash_nrf_erase+0x58>
	return z_impl_k_sem_take(sem, timeout);
   2233c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22340:	480c      	ldr	r0, [pc, #48]	; (22374 <flash_nrf_erase+0x6c>)
   22342:	f018 fdef 	bl	3af24 <z_impl_k_sem_take>

#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

static int erase_op(void *context)
{
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   22346:	f01f f998 	bl	4167a <nrfx_nvmc_flash_page_size_get>
   2234a:	4606      	mov	r6, r0
		return FLASH_OP_DONE;
	}
#endif

	do {
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   2234c:	4628      	mov	r0, r5
   2234e:	f016 fc79 	bl	38c44 <nrfx_nvmc_page_erase>
				break;
			}
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	} while (e_ctx->len > 0);
   22352:	1ba4      	subs	r4, r4, r6
   22354:	4435      	add	r5, r6
   22356:	d1f9      	bne.n	2234c <flash_nrf_erase+0x44>
	z_impl_k_sem_give(sem);
   22358:	4806      	ldr	r0, [pc, #24]	; (22374 <flash_nrf_erase+0x6c>)
   2235a:	f018 fd9b 	bl	3ae94 <z_impl_k_sem_give>
	return ret;
   2235e:	4620      	mov	r0, r4
}
   22360:	bd70      	pop	{r4, r5, r6, pc}
		return -EACCES;
   22362:	f06f 000c 	mvn.w	r0, #12
   22366:	e7fb      	b.n	22360 <flash_nrf_erase+0x58>
		return -EINVAL;
   22368:	f06f 0015 	mvn.w	r0, #21
   2236c:	e7f8      	b.n	22360 <flash_nrf_erase+0x58>
   2236e:	bf00      	nop
   22370:	2002ada3 	.word	0x2002ada3
   22374:	200239a0 	.word	0x200239a0

00022378 <nrf_flash_init>:
{
   22378:	b510      	push	{r4, lr}
	z_impl_k_sem_init(sem, initial_count, limit);
   2237a:	2201      	movs	r2, #1
   2237c:	4807      	ldr	r0, [pc, #28]	; (2239c <nrf_flash_init+0x24>)
   2237e:	4611      	mov	r1, r2
   22380:	f018 fd52 	bl	3ae28 <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   22384:	f01f f97c 	bl	41680 <nrfx_nvmc_flash_page_count_get>
   22388:	4c05      	ldr	r4, [pc, #20]	; (223a0 <nrf_flash_init+0x28>)
   2238a:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   2238c:	f01f f975 	bl	4167a <nrfx_nvmc_flash_page_size_get>
	write_protect = true;
   22390:	2201      	movs	r2, #1
   22392:	4b04      	ldr	r3, [pc, #16]	; (223a4 <nrf_flash_init+0x2c>)
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   22394:	6060      	str	r0, [r4, #4]
	write_protect = true;
   22396:	701a      	strb	r2, [r3, #0]
}
   22398:	2000      	movs	r0, #0
   2239a:	bd10      	pop	{r4, pc}
   2239c:	200239a0 	.word	0x200239a0
   223a0:	20023998 	.word	0x20023998
   223a4:	2002ada3 	.word	0x2002ada3

000223a8 <flash_nrf_write>:
{
   223a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   223ac:	461c      	mov	r4, r3
	if (write_protect) {
   223ae:	4b24      	ldr	r3, [pc, #144]	; (22440 <flash_nrf_write+0x98>)
{
   223b0:	460e      	mov	r6, r1
	if (write_protect) {
   223b2:	781b      	ldrb	r3, [r3, #0]
{
   223b4:	4615      	mov	r5, r2
	if (write_protect) {
   223b6:	bbdb      	cbnz	r3, 22430 <flash_nrf_write+0x88>
	return is_regular_addr_valid(addr, len) ||
   223b8:	4621      	mov	r1, r4
   223ba:	4630      	mov	r0, r6
   223bc:	f01d ffec 	bl	40398 <is_regular_addr_valid>
	if (!is_addr_valid(addr, len)) {
   223c0:	b3c8      	cbz	r0, 22436 <flash_nrf_write+0x8e>
	if (!len) {
   223c2:	b3dc      	cbz	r4, 2243c <flash_nrf_write+0x94>
	return z_impl_k_sem_take(sem, timeout);
   223c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   223c8:	481e      	ldr	r0, [pc, #120]	; (22444 <flash_nrf_write+0x9c>)
   223ca:	f018 fdab 	bl	3af24 <z_impl_k_sem_take>
		ticks_begin = ticker_ticks_now_get();
	}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	/* If not aligned, write unaligned beginning */
	if (!is_aligned_32(w_ctx->flash_addr)) {
   223ce:	f016 0703 	ands.w	r7, r6, #3
   223d2:	d00c      	beq.n	223ee <flash_nrf_write+0x46>
		count = sizeof(u32_t) - (w_ctx->flash_addr & 0x3);
   223d4:	f1c7 0704 	rsb	r7, r7, #4
		if (count > w_ctx->len) {
   223d8:	42a7      	cmp	r7, r4
   223da:	bf28      	it	cs
   223dc:	4627      	movcs	r7, r4
			count = w_ctx->len;
		}

		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
   223de:	4629      	mov	r1, r5
   223e0:	4630      	mov	r0, r6
   223e2:	463a      	mov	r2, r7
   223e4:	f016 fc80 	bl	38ce8 <nrfx_nvmc_bytes_write>
	w_ctx->flash_addr += shift;
   223e8:	443e      	add	r6, r7
	w_ctx->data_addr += shift;
   223ea:	443d      	add	r5, r7
	w_ctx->len -= shift;
   223ec:	1be4      	subs	r4, r4, r7
   223ee:	f024 0803 	bic.w	r8, r4, #3
{
   223f2:	2700      	movs	r7, #0
   223f4:	e003      	b.n	223fe <flash_nrf_write+0x56>
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	}

	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(u32_t)) {
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   223f6:	59e9      	ldr	r1, [r5, r7]
   223f8:	f016 fc50 	bl	38c9c <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   223fc:	3704      	adds	r7, #4
	while (w_ctx->len >= sizeof(u32_t)) {
   223fe:	45b8      	cmp	r8, r7
   22400:	eb06 0007 	add.w	r0, r6, r7
   22404:	d1f7      	bne.n	223f6 <flash_nrf_write+0x4e>
   22406:	f06f 0303 	mvn.w	r3, #3
   2240a:	08a2      	lsrs	r2, r4, #2
   2240c:	fb03 4202 	mla	r2, r3, r2, r4
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	}

	/* Write remaining unaligned data */
	if (w_ctx->len) {
   22410:	eb05 0108 	add.w	r1, r5, r8
   22414:	b10a      	cbz	r2, 2241a <flash_nrf_write+0x72>
		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
   22416:	f016 fc67 	bl	38ce8 <nrfx_nvmc_bytes_write>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   2241a:	4a0b      	ldr	r2, [pc, #44]	; (22448 <flash_nrf_write+0xa0>)
   2241c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   22420:	07db      	lsls	r3, r3, #31
   22422:	d5fb      	bpl.n	2241c <flash_nrf_write+0x74>
	z_impl_k_sem_give(sem);
   22424:	4807      	ldr	r0, [pc, #28]	; (22444 <flash_nrf_write+0x9c>)
   22426:	f018 fd35 	bl	3ae94 <z_impl_k_sem_give>
   2242a:	2000      	movs	r0, #0
}
   2242c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EACCES;
   22430:	f06f 000c 	mvn.w	r0, #12
   22434:	e7fa      	b.n	2242c <flash_nrf_write+0x84>
		return -EINVAL;
   22436:	f06f 0015 	mvn.w	r0, #21
   2243a:	e7f7      	b.n	2242c <flash_nrf_write+0x84>
		return 0;
   2243c:	4620      	mov	r0, r4
   2243e:	e7f5      	b.n	2242c <flash_nrf_write+0x84>
   22440:	2002ada3 	.word	0x2002ada3
   22444:	200239a0 	.word	0x200239a0
   22448:	40039000 	.word	0x40039000

0002244c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   2244c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   2244e:	794b      	ldrb	r3, [r1, #5]
   22450:	2b01      	cmp	r3, #1
   22452:	d029      	beq.n	224a8 <uarte_nrfx_configure+0x5c>
   22454:	2b03      	cmp	r3, #3
   22456:	d124      	bne.n	224a2 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   22458:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   2245a:	798b      	ldrb	r3, [r1, #6]
   2245c:	2b03      	cmp	r3, #3
   2245e:	d120      	bne.n	224a2 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   22460:	79cc      	ldrb	r4, [r1, #7]
   22462:	b12c      	cbz	r4, 22470 <uarte_nrfx_configure+0x24>
   22464:	2c01      	cmp	r4, #1
   22466:	d11c      	bne.n	224a2 <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
   22468:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   2246a:	689b      	ldr	r3, [r3, #8]
   2246c:	791b      	ldrb	r3, [r3, #4]
   2246e:	b1c3      	cbz	r3, 224a2 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   22470:	790a      	ldrb	r2, [r1, #4]
   22472:	b112      	cbz	r2, 2247a <uarte_nrfx_configure+0x2e>
   22474:	2a02      	cmp	r2, #2
   22476:	d114      	bne.n	224a2 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   22478:	220e      	movs	r2, #14
	switch (baudrate) {
   2247a:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
   2247e:	6805      	ldr	r5, [r0, #0]
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   22480:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   22482:	68ad      	ldr	r5, [r5, #8]
	switch (baudrate) {
   22484:	42bb      	cmp	r3, r7
	return config->uarte_regs;
   22486:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   22488:	d062      	beq.n	22550 <uarte_nrfx_configure+0x104>
   2248a:	d829      	bhi.n	224e0 <uarte_nrfx_configure+0x94>
   2248c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   22490:	d061      	beq.n	22556 <uarte_nrfx_configure+0x10a>
   22492:	d814      	bhi.n	224be <uarte_nrfx_configure+0x72>
   22494:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   22498:	d05f      	beq.n	2255a <uarte_nrfx_configure+0x10e>
   2249a:	d807      	bhi.n	224ac <uarte_nrfx_configure+0x60>
   2249c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   224a0:	d05e      	beq.n	22560 <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
   224a2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   224a6:	e052      	b.n	2254e <uarte_nrfx_configure+0x102>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   224a8:	2600      	movs	r6, #0
   224aa:	e7d6      	b.n	2245a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   224ac:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   224b0:	d059      	beq.n	22566 <uarte_nrfx_configure+0x11a>
   224b2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   224b6:	d1f4      	bne.n	224a2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   224b8:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   224bc:	e03c      	b.n	22538 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   224be:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   224c2:	d053      	beq.n	2256c <uarte_nrfx_configure+0x120>
   224c4:	d804      	bhi.n	224d0 <uarte_nrfx_configure+0x84>
   224c6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   224ca:	d1ea      	bne.n	224a2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   224cc:	4b32      	ldr	r3, [pc, #200]	; (22598 <uarte_nrfx_configure+0x14c>)
   224ce:	e033      	b.n	22538 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   224d0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   224d4:	d04c      	beq.n	22570 <uarte_nrfx_configure+0x124>
   224d6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   224da:	d1e2      	bne.n	224a2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   224dc:	4b2f      	ldr	r3, [pc, #188]	; (2259c <uarte_nrfx_configure+0x150>)
   224de:	e02b      	b.n	22538 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   224e0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   224e4:	d046      	beq.n	22574 <uarte_nrfx_configure+0x128>
   224e6:	d812      	bhi.n	2250e <uarte_nrfx_configure+0xc2>
   224e8:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   224ec:	42bb      	cmp	r3, r7
   224ee:	d044      	beq.n	2257a <uarte_nrfx_configure+0x12e>
   224f0:	d805      	bhi.n	224fe <uarte_nrfx_configure+0xb2>
   224f2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   224f6:	d1d4      	bne.n	224a2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   224f8:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   224fc:	e01c      	b.n	22538 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   224fe:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   22502:	d03d      	beq.n	22580 <uarte_nrfx_configure+0x134>
   22504:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   22508:	d1cb      	bne.n	224a2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   2250a:	4b25      	ldr	r3, [pc, #148]	; (225a0 <uarte_nrfx_configure+0x154>)
   2250c:	e014      	b.n	22538 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   2250e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   22512:	d038      	beq.n	22586 <uarte_nrfx_configure+0x13a>
   22514:	d808      	bhi.n	22528 <uarte_nrfx_configure+0xdc>
   22516:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   2251a:	d037      	beq.n	2258c <uarte_nrfx_configure+0x140>
   2251c:	4f21      	ldr	r7, [pc, #132]	; (225a4 <uarte_nrfx_configure+0x158>)
   2251e:	42bb      	cmp	r3, r7
   22520:	d1bf      	bne.n	224a2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   22522:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   22526:	e007      	b.n	22538 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   22528:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   2252c:	d031      	beq.n	22592 <uarte_nrfx_configure+0x146>
   2252e:	4f1e      	ldr	r7, [pc, #120]	; (225a8 <uarte_nrfx_configure+0x15c>)
   22530:	42bb      	cmp	r3, r7
   22532:	d1b6      	bne.n	224a2 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   22534:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   22538:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   2253c:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   2253e:	6883      	ldr	r3, [r0, #8]
   22540:	4322      	orrs	r2, r4
   22542:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   22544:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   22548:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   2254c:	2000      	movs	r0, #0
}
   2254e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   22550:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   22554:	e7f0      	b.n	22538 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   22556:	4b15      	ldr	r3, [pc, #84]	; (225ac <uarte_nrfx_configure+0x160>)
   22558:	e7ee      	b.n	22538 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00027000;
   2255a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   2255e:	e7eb      	b.n	22538 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
   22560:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   22564:	e7e8      	b.n	22538 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   22566:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   2256a:	e7e5      	b.n	22538 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   2256c:	4b10      	ldr	r3, [pc, #64]	; (225b0 <uarte_nrfx_configure+0x164>)
   2256e:	e7e3      	b.n	22538 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   22570:	4b10      	ldr	r3, [pc, #64]	; (225b4 <uarte_nrfx_configure+0x168>)
   22572:	e7e1      	b.n	22538 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   22574:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   22578:	e7de      	b.n	22538 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   2257a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   2257e:	e7db      	b.n	22538 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   22580:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   22584:	e7d8      	b.n	22538 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   22586:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   2258a:	e7d5      	b.n	22538 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   2258c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   22590:	e7d2      	b.n	22538 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   22592:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   22596:	e7cf      	b.n	22538 <uarte_nrfx_configure+0xec>
   22598:	00275000 	.word	0x00275000
   2259c:	0075c000 	.word	0x0075c000
   225a0:	013a9000 	.word	0x013a9000
   225a4:	0003d090 	.word	0x0003d090
   225a8:	000f4240 	.word	0x000f4240
   225ac:	0013b000 	.word	0x0013b000
   225b0:	003af000 	.word	0x003af000
   225b4:	004ea000 	.word	0x004ea000

000225b8 <uarte_0_init>:
	#if defined(DT_NORDIC_NRF_UARTE_UART_0_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_0_CTS_PIN)
		#define UARTE_0_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(0);
   225b8:	b570      	push	{r4, r5, r6, lr}
   225ba:	4606      	mov	r6, r0
   225bc:	2200      	movs	r2, #0
   225be:	2101      	movs	r1, #1
   225c0:	2008      	movs	r0, #8
   225c2:	f7fd ff5d 	bl	20480 <z_arm_irq_priority_set>
   225c6:	2008      	movs	r0, #8
   225c8:	f7fd ff4a 	bl	20460 <arch_irq_enable>
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   225cc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	return dev->config->config_info;
   225d0:	6833      	ldr	r3, [r6, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   225d2:	68b5      	ldr	r5, [r6, #8]
	return config->uarte_regs;
   225d4:	689b      	ldr	r3, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   225d6:	2103      	movs	r1, #3
   225d8:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
   225da:	4b1a      	ldr	r3, [pc, #104]	; (22644 <uarte_0_init+0x8c>)
    p_reg->PSEL.TXD = pseltxd;
   225dc:	201d      	movs	r0, #29
   225de:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   225e0:	2200      	movs	r2, #0
   225e2:	f8c3 1274 	str.w	r1, [r3, #628]	; 0x274
   225e6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
   225ea:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   225ee:	201c      	movs	r0, #28
   225f0:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->OUTSET = set_mask;
   225f4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   225f8:	6098      	str	r0, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   225fa:	f8c3 126c 	str.w	r1, [r3, #620]	; 0x26c
   225fe:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    p_reg->PSEL.RTS = pselrts;
   22602:	231b      	movs	r3, #27
   22604:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   22608:	231a      	movs	r3, #26
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   2260a:	4629      	mov	r1, r5
   2260c:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   22610:	4630      	mov	r0, r6
   22612:	f7ff ff1b 	bl	2244c <uarte_nrfx_configure>
	if (err) {
   22616:	b9a0      	cbnz	r0, 22642 <uarte_0_init+0x8a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   22618:	2308      	movs	r3, #8
   2261a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   2261e:	f105 030c 	add.w	r3, r5, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22622:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   22626:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2262a:	2301      	movs	r3, #1
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   2262c:	68aa      	ldr	r2, [r5, #8]
   2262e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   22632:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22634:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   22636:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2263a:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2263e:	60a3      	str	r3, [r4, #8]
   22640:	60e3      	str	r3, [r4, #12]
	UART_NRF_UARTE_DEVICE(0);
   22642:	bd70      	pop	{r4, r5, r6, pc}
   22644:	40842500 	.word	0x40842500

00022648 <entropy_cc310_rng_get_entropy>:
#include "nrf_cc310_platform_entropy.h"
#endif

static int entropy_cc310_rng_get_entropy(struct device *dev, u8_t *buffer,
					 u16_t length)
{
   22648:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2264a:	460d      	mov	r5, r1
   2264c:	4614      	mov	r4, r2
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
   2264e:	b948      	cbnz	r0, 22664 <entropy_cc310_rng_get_entropy+0x1c>
   22650:	4910      	ldr	r1, [pc, #64]	; (22694 <entropy_cc310_rng_get_entropy+0x4c>)
   22652:	4811      	ldr	r0, [pc, #68]	; (22698 <entropy_cc310_rng_get_entropy+0x50>)
   22654:	231e      	movs	r3, #30
   22656:	4a11      	ldr	r2, [pc, #68]	; (2269c <entropy_cc310_rng_get_entropy+0x54>)
   22658:	f01c fef5 	bl	3f446 <printk>
   2265c:	211e      	movs	r1, #30
   2265e:	480f      	ldr	r0, [pc, #60]	; (2269c <entropy_cc310_rng_get_entropy+0x54>)
   22660:	f01c fefe 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   22664:	b94d      	cbnz	r5, 2267a <entropy_cc310_rng_get_entropy+0x32>
   22666:	490e      	ldr	r1, [pc, #56]	; (226a0 <entropy_cc310_rng_get_entropy+0x58>)
   22668:	480b      	ldr	r0, [pc, #44]	; (22698 <entropy_cc310_rng_get_entropy+0x50>)
   2266a:	231f      	movs	r3, #31
   2266c:	4a0b      	ldr	r2, [pc, #44]	; (2269c <entropy_cc310_rng_get_entropy+0x54>)
   2266e:	f01c feea 	bl	3f446 <printk>
   22672:	211f      	movs	r1, #31
   22674:	4809      	ldr	r0, [pc, #36]	; (2269c <entropy_cc310_rng_get_entropy+0x54>)
   22676:	f01c fef3 	bl	3f460 <assert_post_action>

#if defined(CONFIG_SPM)
	/** This is a call from a non-secure app that enables secure services,
	 *  in which case entropy is gathered by calling through SPM
	 */
	res = spm_request_random_number(buffer, length, &olen);
   2267a:	aa01      	add	r2, sp, #4
   2267c:	4621      	mov	r1, r4
   2267e:	4628      	mov	r0, r5
   22680:	f7f5 fcb6 	bl	17ff0 <spm_request_random_number>
	if (olen != length) {
   22684:	9b01      	ldr	r3, [sp, #4]
		return -EINVAL;
   22686:	429c      	cmp	r4, r3
		return -EINVAL;
	}
#endif

	return res;
}
   22688:	bf18      	it	ne
   2268a:	f06f 0015 	mvnne.w	r0, #21
   2268e:	b003      	add	sp, #12
   22690:	bd30      	pop	{r4, r5, pc}
   22692:	bf00      	nop
   22694:	00046fc4 	.word	0x00046fc4
   22698:	00045316 	.word	0x00045316
   2269c:	00046f73 	.word	0x00046f73
   226a0:	00046fd7 	.word	0x00046fd7

000226a4 <parse_string>:
{
   226a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   226a8:	680a      	ldr	r2, [r1, #0]
   226aa:	688b      	ldr	r3, [r1, #8]
{
   226ac:	4680      	mov	r8, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   226ae:	1c5d      	adds	r5, r3, #1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   226b0:	18d0      	adds	r0, r2, r3
   226b2:	5cd3      	ldrb	r3, [r2, r3]
{
   226b4:	468a      	mov	sl, r1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   226b6:	2b22      	cmp	r3, #34	; 0x22
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   226b8:	4415      	add	r5, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
   226ba:	f040 80d6 	bne.w	2286a <parse_string+0x1c6>
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   226be:	462f      	mov	r7, r5
        size_t skipped_bytes = 0;
   226c0:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   226c2:	684c      	ldr	r4, [r1, #4]
   226c4:	1ab9      	subs	r1, r7, r2
   226c6:	42a1      	cmp	r1, r4
   226c8:	f080 80cf 	bcs.w	2286a <parse_string+0x1c6>
   226cc:	7839      	ldrb	r1, [r7, #0]
   226ce:	2922      	cmp	r1, #34	; 0x22
   226d0:	d10e      	bne.n	226f0 <parse_string+0x4c>
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   226d2:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
   226d6:	1a38      	subs	r0, r7, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   226d8:	f8da 2010 	ldr.w	r2, [sl, #16]
   226dc:	4418      	add	r0, r3
   226de:	4790      	blx	r2
        if (output == NULL)
   226e0:	4683      	mov	fp, r0
   226e2:	2800      	cmp	r0, #0
   226e4:	f000 80c1 	beq.w	2286a <parse_string+0x1c6>
   226e8:	4604      	mov	r4, r0
                    *output_pointer++ = '\f';
   226ea:	f04f 090c 	mov.w	r9, #12
   226ee:	e00f      	b.n	22710 <parse_string+0x6c>
            if (input_end[0] == '\\')
   226f0:	295c      	cmp	r1, #92	; 0x5c
   226f2:	d105      	bne.n	22700 <parse_string+0x5c>
   226f4:	3701      	adds	r7, #1
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
   226f6:	1ab9      	subs	r1, r7, r2
   226f8:	428c      	cmp	r4, r1
   226fa:	f240 80b6 	bls.w	2286a <parse_string+0x1c6>
                skipped_bytes++;
   226fe:	3301      	adds	r3, #1
            input_end++;
   22700:	3701      	adds	r7, #1
   22702:	e7df      	b.n	226c4 <parse_string+0x20>
        if (*input_pointer != '\\')
   22704:	782b      	ldrb	r3, [r5, #0]
   22706:	2b5c      	cmp	r3, #92	; 0x5c
   22708:	d012      	beq.n	22730 <parse_string+0x8c>
            *output_pointer++ = *input_pointer++;
   2270a:	3501      	adds	r5, #1
   2270c:	f804 3b01 	strb.w	r3, [r4], #1
    while (input_pointer < input_end)
   22710:	42bd      	cmp	r5, r7
   22712:	d3f7      	bcc.n	22704 <parse_string+0x60>
    *output_pointer = '\0';
   22714:	2300      	movs	r3, #0
   22716:	7023      	strb	r3, [r4, #0]
    item->type = cJSON_String;
   22718:	2310      	movs	r3, #16
    return true;
   2271a:	2001      	movs	r0, #1
    item->valuestring = (char*)output;
   2271c:	e9c8 3b03 	strd	r3, fp, [r8, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
   22720:	f8da 3000 	ldr.w	r3, [sl]
   22724:	1aff      	subs	r7, r7, r3
    input_buffer->offset++;
   22726:	3701      	adds	r7, #1
   22728:	f8ca 7008 	str.w	r7, [sl, #8]
}
   2272c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((input_end - input_pointer) < 1)
   22730:	1b7a      	subs	r2, r7, r5
   22732:	2a00      	cmp	r2, #0
   22734:	dd08      	ble.n	22748 <parse_string+0xa4>
            switch (input_pointer[1])
   22736:	786b      	ldrb	r3, [r5, #1]
   22738:	2b66      	cmp	r3, #102	; 0x66
   2273a:	d063      	beq.n	22804 <parse_string+0x160>
   2273c:	d816      	bhi.n	2276c <parse_string+0xc8>
   2273e:	2b2f      	cmp	r3, #47	; 0x2f
   22740:	d011      	beq.n	22766 <parse_string+0xc2>
   22742:	d80b      	bhi.n	2275c <parse_string+0xb8>
   22744:	2b22      	cmp	r3, #34	; 0x22
   22746:	d00e      	beq.n	22766 <parse_string+0xc2>
        input_buffer->hooks.deallocate(output);
   22748:	f8da 3014 	ldr.w	r3, [sl, #20]
   2274c:	4658      	mov	r0, fp
   2274e:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
   22750:	f8da 0000 	ldr.w	r0, [sl]
   22754:	1a28      	subs	r0, r5, r0
   22756:	f8ca 0008 	str.w	r0, [sl, #8]
   2275a:	e089      	b.n	22870 <parse_string+0x1cc>
            switch (input_pointer[1])
   2275c:	2b5c      	cmp	r3, #92	; 0x5c
   2275e:	d002      	beq.n	22766 <parse_string+0xc2>
   22760:	2b62      	cmp	r3, #98	; 0x62
   22762:	d1f1      	bne.n	22748 <parse_string+0xa4>
                    *output_pointer++ = '\b';
   22764:	2308      	movs	r3, #8
                    *output_pointer++ = input_pointer[1];
   22766:	f804 3b01 	strb.w	r3, [r4], #1
                    break;
   2276a:	e04d      	b.n	22808 <parse_string+0x164>
            switch (input_pointer[1])
   2276c:	2b72      	cmp	r3, #114	; 0x72
   2276e:	d04e      	beq.n	2280e <parse_string+0x16a>
   22770:	d803      	bhi.n	2277a <parse_string+0xd6>
   22772:	2b6e      	cmp	r3, #110	; 0x6e
   22774:	d1e8      	bne.n	22748 <parse_string+0xa4>
                    *output_pointer++ = '\n';
   22776:	230a      	movs	r3, #10
   22778:	e7f5      	b.n	22766 <parse_string+0xc2>
            switch (input_pointer[1])
   2277a:	2b74      	cmp	r3, #116	; 0x74
   2277c:	d04a      	beq.n	22814 <parse_string+0x170>
   2277e:	2b75      	cmp	r3, #117	; 0x75
   22780:	d1e2      	bne.n	22748 <parse_string+0xa4>
    if ((input_end - first_sequence) < 6)
   22782:	2a05      	cmp	r2, #5
   22784:	dde0      	ble.n	22748 <parse_string+0xa4>
    first_code = parse_hex4(first_sequence + 2);
   22786:	1ca8      	adds	r0, r5, #2
   22788:	f01d ff6a 	bl	40660 <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   2278c:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   22790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
   22794:	4606      	mov	r6, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   22796:	d3d7      	bcc.n	22748 <parse_string+0xa4>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
   22798:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
   2279c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   227a0:	d23b      	bcs.n	2281a <parse_string+0x176>
        const unsigned char *second_sequence = first_sequence + 6;
   227a2:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
   227a4:	1afb      	subs	r3, r7, r3
   227a6:	2b05      	cmp	r3, #5
   227a8:	ddce      	ble.n	22748 <parse_string+0xa4>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
   227aa:	79ab      	ldrb	r3, [r5, #6]
   227ac:	2b5c      	cmp	r3, #92	; 0x5c
   227ae:	d1cb      	bne.n	22748 <parse_string+0xa4>
   227b0:	79eb      	ldrb	r3, [r5, #7]
   227b2:	2b75      	cmp	r3, #117	; 0x75
   227b4:	d1c8      	bne.n	22748 <parse_string+0xa4>
        second_code = parse_hex4(second_sequence + 2);
   227b6:	f105 0008 	add.w	r0, r5, #8
   227ba:	f01d ff51 	bl	40660 <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
   227be:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   227c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   227c6:	d2bf      	bcs.n	22748 <parse_string+0xa4>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   227c8:	4b2a      	ldr	r3, [pc, #168]	; (22874 <parse_string+0x1d0>)
   227ca:	f3c0 0009 	ubfx	r0, r0, #0, #10
   227ce:	ea03 2686 	and.w	r6, r3, r6, lsl #10
        sequence_length = 12; /* \uXXXX\uXXXX */
   227d2:	230c      	movs	r3, #12
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   227d4:	4306      	orrs	r6, r0
   227d6:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
        first_byte_mark = 0xF0; /* 11110000 */
   227da:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
        utf8_length = 4;
   227de:	2104      	movs	r1, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   227e0:	1e48      	subs	r0, r1, #1
   227e2:	b240      	sxtb	r0, r0
   227e4:	fa5f fe80 	uxtb.w	lr, r0
   227e8:	4420      	add	r0, r4
   227ea:	b2f2      	uxtb	r2, r6
   227ec:	f1be 0f00 	cmp.w	lr, #0
   227f0:	d12f      	bne.n	22852 <parse_string+0x1ae>
    if (utf8_length > 1)
   227f2:	2901      	cmp	r1, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
   227f4:	bf14      	ite	ne
   227f6:	ea4c 0202 	orrne.w	r2, ip, r2
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
   227fa:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
   227fe:	7022      	strb	r2, [r4, #0]
    *output_pointer += utf8_length;
   22800:	440c      	add	r4, r1
                    if (sequence_length == 0)
   22802:	e002      	b.n	2280a <parse_string+0x166>
                    *output_pointer++ = '\f';
   22804:	f804 9b01 	strb.w	r9, [r4], #1
            unsigned char sequence_length = 2;
   22808:	2302      	movs	r3, #2
            input_pointer += sequence_length;
   2280a:	441d      	add	r5, r3
   2280c:	e780      	b.n	22710 <parse_string+0x6c>
                    *output_pointer++ = '\r';
   2280e:	f04f 030d 	mov.w	r3, #13
   22812:	e7a8      	b.n	22766 <parse_string+0xc2>
                    *output_pointer++ = '\t';
   22814:	f04f 0309 	mov.w	r3, #9
   22818:	e7a5      	b.n	22766 <parse_string+0xc2>
    if (codepoint < 0x80)
   2281a:	287f      	cmp	r0, #127	; 0x7f
   2281c:	d90a      	bls.n	22834 <parse_string+0x190>
    else if (codepoint < 0x800)
   2281e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   22822:	d30c      	bcc.n	2283e <parse_string+0x19a>
    else if (codepoint < 0x10000)
   22824:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   22828:	d30e      	bcc.n	22848 <parse_string+0x1a4>
    else if (codepoint <= 0x10FFFF)
   2282a:	4b13      	ldr	r3, [pc, #76]	; (22878 <parse_string+0x1d4>)
   2282c:	4298      	cmp	r0, r3
   2282e:	d88b      	bhi.n	22748 <parse_string+0xa4>
        sequence_length = 6; /* \uXXXX */
   22830:	2306      	movs	r3, #6
   22832:	e7d2      	b.n	227da <parse_string+0x136>
   22834:	2306      	movs	r3, #6
    unsigned char first_byte_mark = 0;
   22836:	f04f 0c00 	mov.w	ip, #0
        utf8_length = 1;
   2283a:	2101      	movs	r1, #1
   2283c:	e7d0      	b.n	227e0 <parse_string+0x13c>
        sequence_length = 6; /* \uXXXX */
   2283e:	2306      	movs	r3, #6
        first_byte_mark = 0xC0; /* 11000000 */
   22840:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
        utf8_length = 2;
   22844:	2102      	movs	r1, #2
   22846:	e7cb      	b.n	227e0 <parse_string+0x13c>
        sequence_length = 6; /* \uXXXX */
   22848:	2306      	movs	r3, #6
        first_byte_mark = 0xE0; /* 11100000 */
   2284a:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
        utf8_length = 3;
   2284e:	2103      	movs	r1, #3
   22850:	e7c6      	b.n	227e0 <parse_string+0x13c>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   22852:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   22856:	f062 027f 	orn	r2, r2, #127	; 0x7f
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   2285a:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   2285e:	f800 2901 	strb.w	r2, [r0], #-1
        codepoint >>= 6;
   22862:	09b6      	lsrs	r6, r6, #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   22864:	fa5f fe8e 	uxtb.w	lr, lr
   22868:	e7bf      	b.n	227ea <parse_string+0x146>
    if (input_pointer != NULL)
   2286a:	2d00      	cmp	r5, #0
   2286c:	f47f af70 	bne.w	22750 <parse_string+0xac>
    return false;
   22870:	2000      	movs	r0, #0
   22872:	e75b      	b.n	2272c <parse_string+0x88>
   22874:	000ffc00 	.word	0x000ffc00
   22878:	0010ffff 	.word	0x0010ffff

0002287c <get_object_item>:
{
   2287c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2287e:	460d      	mov	r5, r1
    if ((object == NULL) || (name == NULL))
   22880:	b360      	cbz	r0, 228dc <get_object_item+0x60>
   22882:	b359      	cbz	r1, 228dc <get_object_item+0x60>
    current_element = object->child;
   22884:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
   22886:	b9fa      	cbnz	r2, 228c8 <get_object_item+0x4c>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   22888:	4e17      	ldr	r6, [pc, #92]	; (228e8 <get_object_item+0x6c>)
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   2288a:	b33c      	cbz	r4, 228dc <get_object_item+0x60>
   2288c:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
   2288e:	b1c3      	cbz	r3, 228c2 <get_object_item+0x46>
    if (string1 == string2)
   22890:	42ab      	cmp	r3, r5
   22892:	d021      	beq.n	228d8 <get_object_item+0x5c>
   22894:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   22898:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   2289a:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   2289e:	460f      	mov	r7, r1
   228a0:	5d8a      	ldrb	r2, [r1, r6]
   228a2:	f002 0203 	and.w	r2, r2, #3
   228a6:	2a01      	cmp	r2, #1
   228a8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   228ac:	bf08      	it	eq
   228ae:	f101 0720 	addeq.w	r7, r1, #32
   228b2:	5cb0      	ldrb	r0, [r6, r2]
   228b4:	f000 0003 	and.w	r0, r0, #3
   228b8:	2801      	cmp	r0, #1
   228ba:	bf08      	it	eq
   228bc:	3220      	addeq	r2, #32
   228be:	4297      	cmp	r7, r2
   228c0:	d00f      	beq.n	228e2 <get_object_item+0x66>
            current_element = current_element->next;
   228c2:	6824      	ldr	r4, [r4, #0]
   228c4:	e7e1      	b.n	2288a <get_object_item+0xe>
            current_element = current_element->next;
   228c6:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
   228c8:	b144      	cbz	r4, 228dc <get_object_item+0x60>
   228ca:	6a21      	ldr	r1, [r4, #32]
   228cc:	b121      	cbz	r1, 228d8 <get_object_item+0x5c>
   228ce:	4628      	mov	r0, r5
   228d0:	f7f7 fafe 	bl	19ed0 <strcmp>
   228d4:	2800      	cmp	r0, #0
   228d6:	d1f6      	bne.n	228c6 <get_object_item+0x4a>
    if ((current_element == NULL) || (current_element->string == NULL)) {
   228d8:	6a23      	ldr	r3, [r4, #32]
   228da:	b903      	cbnz	r3, 228de <get_object_item+0x62>
        return NULL;
   228dc:	2400      	movs	r4, #0
}
   228de:	4620      	mov	r0, r4
   228e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (*string1 == '\0')
   228e2:	2900      	cmp	r1, #0
   228e4:	d1d9      	bne.n	2289a <get_object_item+0x1e>
   228e6:	e7f7      	b.n	228d8 <get_object_item+0x5c>
   228e8:	0004a77d 	.word	0x0004a77d

000228ec <print_string_ptr>:
{
   228ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   228f0:	4683      	mov	fp, r0
   228f2:	b085      	sub	sp, #20
    if (output_buffer == NULL)
   228f4:	460f      	mov	r7, r1
   228f6:	b919      	cbnz	r1, 22900 <print_string_ptr+0x14>
        return false;
   228f8:	2000      	movs	r0, #0
}
   228fa:	b005      	add	sp, #20
   228fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const char quotes[] = "\"\"";
   22900:	4b48      	ldr	r3, [pc, #288]	; (22a24 <print_string_ptr+0x138>)
   22902:	881a      	ldrh	r2, [r3, #0]
   22904:	789b      	ldrb	r3, [r3, #2]
   22906:	f8ad 200c 	strh.w	r2, [sp, #12]
   2290a:	f88d 300e 	strb.w	r3, [sp, #14]
    if (input == NULL)
   2290e:	b318      	cbz	r0, 22958 <print_string_ptr+0x6c>
   22910:	4602      	mov	r2, r0
    size_t escape_characters = 0;
   22912:	2500      	movs	r5, #0
   22914:	4692      	mov	sl, r2
    for (input_pointer = input; *input_pointer; input_pointer++)
   22916:	f812 3b01 	ldrb.w	r3, [r2], #1
   2291a:	bb5b      	cbnz	r3, 22974 <print_string_ptr+0x88>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   2291c:	ebaa 0a0b 	sub.w	sl, sl, fp
   22920:	44aa      	add	sl, r5
    output = ensure(output_buffer, output_length + sizeof(quotes));
   22922:	f10a 0103 	add.w	r1, sl, #3
   22926:	4638      	mov	r0, r7
   22928:	f01d fef9 	bl	4071e <ensure>
    if (output == NULL)
   2292c:	4606      	mov	r6, r0
   2292e:	2800      	cmp	r0, #0
   22930:	d0e2      	beq.n	228f8 <print_string_ptr+0xc>
    if (escape_characters == 0)
   22932:	2322      	movs	r3, #34	; 0x22
   22934:	1c44      	adds	r4, r0, #1
   22936:	f10a 0901 	add.w	r9, sl, #1
   2293a:	f10a 0802 	add.w	r8, sl, #2
        output[0] = '\"';
   2293e:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   22940:	bb55      	cbnz	r5, 22998 <print_string_ptr+0xac>
   22942:	4652      	mov	r2, sl
   22944:	4659      	mov	r1, fp
   22946:	4620      	mov	r0, r4
   22948:	f01f f833 	bl	419b2 <memcpy>
        output[output_length + 1] = '\"';
   2294c:	2322      	movs	r3, #34	; 0x22
   2294e:	f806 3009 	strb.w	r3, [r6, r9]
        output[output_length + 2] = '\0';
   22952:	f806 5008 	strb.w	r5, [r6, r8]
        return true;
   22956:	e00b      	b.n	22970 <print_string_ptr+0x84>
        output = ensure(output_buffer, sizeof(quotes));
   22958:	2103      	movs	r1, #3
   2295a:	4638      	mov	r0, r7
   2295c:	f01d fedf 	bl	4071e <ensure>
        if (output == NULL)
   22960:	2800      	cmp	r0, #0
   22962:	d0c9      	beq.n	228f8 <print_string_ptr+0xc>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   22964:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   22968:	a903      	add	r1, sp, #12
   2296a:	1ad2      	subs	r2, r2, r3
   2296c:	f01f fa2c 	bl	41dc8 <strncpy>
    return true;
   22970:	2001      	movs	r0, #1
   22972:	e7c2      	b.n	228fa <print_string_ptr+0xe>
        switch (*input_pointer)
   22974:	2b0d      	cmp	r3, #13
   22976:	d807      	bhi.n	22988 <print_string_ptr+0x9c>
   22978:	2b0c      	cmp	r3, #12
   2297a:	d203      	bcs.n	22984 <print_string_ptr+0x98>
   2297c:	f1a3 0108 	sub.w	r1, r3, #8
   22980:	2902      	cmp	r1, #2
   22982:	d805      	bhi.n	22990 <print_string_ptr+0xa4>
                escape_characters++;
   22984:	3501      	adds	r5, #1
                break;
   22986:	e7c5      	b.n	22914 <print_string_ptr+0x28>
        switch (*input_pointer)
   22988:	2b22      	cmp	r3, #34	; 0x22
   2298a:	d0fb      	beq.n	22984 <print_string_ptr+0x98>
   2298c:	2b5c      	cmp	r3, #92	; 0x5c
   2298e:	d0f9      	beq.n	22984 <print_string_ptr+0x98>
                if (*input_pointer < 32)
   22990:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   22992:	bf98      	it	ls
   22994:	3505      	addls	r5, #5
   22996:	e7bd      	b.n	22914 <print_string_ptr+0x28>
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   22998:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
                    *output_pointer = 'f';
   2299c:	f04f 0a66 	mov.w	sl, #102	; 0x66
            *output_pointer++ = '\\';
   229a0:	f04f 0b5c 	mov.w	fp, #92	; 0x5c
   229a4:	9301      	str	r3, [sp, #4]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   229a6:	9a01      	ldr	r2, [sp, #4]
   229a8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   229ac:	9201      	str	r2, [sp, #4]
   229ae:	b92b      	cbnz	r3, 229bc <print_string_ptr+0xd0>
    output[output_length + 1] = '\"';
   229b0:	2222      	movs	r2, #34	; 0x22
   229b2:	f806 2009 	strb.w	r2, [r6, r9]
    output[output_length + 2] = '\0';
   229b6:	f806 3008 	strb.w	r3, [r6, r8]
   229ba:	e7d9      	b.n	22970 <print_string_ptr+0x84>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   229bc:	2b1f      	cmp	r3, #31
   229be:	d907      	bls.n	229d0 <print_string_ptr+0xe4>
   229c0:	2b22      	cmp	r3, #34	; 0x22
   229c2:	d005      	beq.n	229d0 <print_string_ptr+0xe4>
   229c4:	2b5c      	cmp	r3, #92	; 0x5c
   229c6:	d003      	beq.n	229d0 <print_string_ptr+0xe4>
            *output_pointer = *input_pointer;
   229c8:	4620      	mov	r0, r4
   229ca:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   229cc:	1c44      	adds	r4, r0, #1
   229ce:	e7ea      	b.n	229a6 <print_string_ptr+0xba>
            *output_pointer++ = '\\';
   229d0:	4620      	mov	r0, r4
            switch (*input_pointer)
   229d2:	9b01      	ldr	r3, [sp, #4]
            *output_pointer++ = '\\';
   229d4:	f800 bb01 	strb.w	fp, [r0], #1
            switch (*input_pointer)
   229d8:	781b      	ldrb	r3, [r3, #0]
   229da:	2b0c      	cmp	r3, #12
   229dc:	d011      	beq.n	22a02 <print_string_ptr+0x116>
   229de:	d808      	bhi.n	229f2 <print_string_ptr+0x106>
   229e0:	2b09      	cmp	r3, #9
   229e2:	d013      	beq.n	22a0c <print_string_ptr+0x120>
   229e4:	2b0a      	cmp	r3, #10
   229e6:	d00f      	beq.n	22a08 <print_string_ptr+0x11c>
   229e8:	2b08      	cmp	r3, #8
   229ea:	d111      	bne.n	22a10 <print_string_ptr+0x124>
                    *output_pointer = 'b';
   229ec:	2362      	movs	r3, #98	; 0x62
                    *output_pointer = 't';
   229ee:	7063      	strb	r3, [r4, #1]
                    break;
   229f0:	e7ec      	b.n	229cc <print_string_ptr+0xe0>
            switch (*input_pointer)
   229f2:	2b22      	cmp	r3, #34	; 0x22
   229f4:	d0fb      	beq.n	229ee <print_string_ptr+0x102>
   229f6:	2b5c      	cmp	r3, #92	; 0x5c
   229f8:	d0f9      	beq.n	229ee <print_string_ptr+0x102>
   229fa:	2b0d      	cmp	r3, #13
   229fc:	d108      	bne.n	22a10 <print_string_ptr+0x124>
                    *output_pointer = 'r';
   229fe:	2372      	movs	r3, #114	; 0x72
   22a00:	e7f5      	b.n	229ee <print_string_ptr+0x102>
                    *output_pointer = 'f';
   22a02:	f884 a001 	strb.w	sl, [r4, #1]
                    break;
   22a06:	e7e1      	b.n	229cc <print_string_ptr+0xe0>
                    *output_pointer = 'n';
   22a08:	236e      	movs	r3, #110	; 0x6e
   22a0a:	e7f0      	b.n	229ee <print_string_ptr+0x102>
                    *output_pointer = 't';
   22a0c:	2374      	movs	r3, #116	; 0x74
   22a0e:	e7ee      	b.n	229ee <print_string_ptr+0x102>
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   22a10:	6839      	ldr	r1, [r7, #0]
   22a12:	687d      	ldr	r5, [r7, #4]
   22a14:	1a41      	subs	r1, r0, r1
   22a16:	4a04      	ldr	r2, [pc, #16]	; (22a28 <print_string_ptr+0x13c>)
   22a18:	1a69      	subs	r1, r5, r1
   22a1a:	f01a fd69 	bl	3d4f0 <sniprintf>
                    output_pointer += 4;
   22a1e:	1d60      	adds	r0, r4, #5
                    break;
   22a20:	e7d4      	b.n	229cc <print_string_ptr+0xe0>
   22a22:	bf00      	nop
   22a24:	00046ff7 	.word	0x00046ff7
   22a28:	00046ff1 	.word	0x00046ff1

00022a2c <print_value>:
{
   22a2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22a30:	460c      	mov	r4, r1
   22a32:	b08d      	sub	sp, #52	; 0x34
    if ((item == NULL) || (output_buffer == NULL))
   22a34:	4606      	mov	r6, r0
   22a36:	b908      	cbnz	r0, 22a3c <print_value+0x10>
        return false;
   22a38:	2500      	movs	r5, #0
   22a3a:	e01d      	b.n	22a78 <print_value+0x4c>
    if ((item == NULL) || (output_buffer == NULL))
   22a3c:	2900      	cmp	r1, #0
   22a3e:	d0fb      	beq.n	22a38 <print_value+0xc>
    switch ((item->type) & 0xFF)
   22a40:	7b05      	ldrb	r5, [r0, #12]
   22a42:	2d08      	cmp	r5, #8
   22a44:	d053      	beq.n	22aee <print_value+0xc2>
   22a46:	dc1b      	bgt.n	22a80 <print_value+0x54>
   22a48:	2d02      	cmp	r5, #2
   22a4a:	d04e      	beq.n	22aea <print_value+0xbe>
   22a4c:	2d04      	cmp	r5, #4
   22a4e:	d037      	beq.n	22ac0 <print_value+0x94>
   22a50:	2d01      	cmp	r5, #1
   22a52:	d1f1      	bne.n	22a38 <print_value+0xc>
            const char buff[] = "false";
   22a54:	4b87      	ldr	r3, [pc, #540]	; (22c74 <print_value+0x248>)
            output = ensure(output_buffer, sizeof(buff));
   22a56:	2106      	movs	r1, #6
            const char buff[] = "false";
   22a58:	6818      	ldr	r0, [r3, #0]
   22a5a:	889b      	ldrh	r3, [r3, #4]
   22a5c:	9005      	str	r0, [sp, #20]
            output = ensure(output_buffer, sizeof(buff));
   22a5e:	4620      	mov	r0, r4
            const char buff[] = "false";
   22a60:	f8ad 3018 	strh.w	r3, [sp, #24]
            output = ensure(output_buffer, sizeof(buff));
   22a64:	f01d fe5b 	bl	4071e <ensure>
            if (output == NULL)
   22a68:	2800      	cmp	r0, #0
   22a6a:	d0e5      	beq.n	22a38 <print_value+0xc>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   22a6c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   22a70:	a905      	add	r1, sp, #20
   22a72:	1ad2      	subs	r2, r2, r3
   22a74:	f01f f9a8 	bl	41dc8 <strncpy>
}
   22a78:	4628      	mov	r0, r5
   22a7a:	b00d      	add	sp, #52	; 0x34
   22a7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch ((item->type) & 0xFF)
   22a80:	2d20      	cmp	r5, #32
   22a82:	d07b      	beq.n	22b7c <print_value+0x150>
   22a84:	dc06      	bgt.n	22a94 <print_value+0x68>
   22a86:	2d10      	cmp	r5, #16
   22a88:	d1d6      	bne.n	22a38 <print_value+0xc>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   22a8a:	6900      	ldr	r0, [r0, #16]
   22a8c:	f7ff ff2e 	bl	228ec <print_string_ptr>
   22a90:	4605      	mov	r5, r0
   22a92:	e7f1      	b.n	22a78 <print_value+0x4c>
    switch ((item->type) & 0xFF)
   22a94:	2d40      	cmp	r5, #64	; 0x40
   22a96:	f000 80bc 	beq.w	22c12 <print_value+0x1e6>
   22a9a:	2d80      	cmp	r5, #128	; 0x80
   22a9c:	d1cc      	bne.n	22a38 <print_value+0xc>
            if (item->valuestring == NULL)
   22a9e:	6900      	ldr	r0, [r0, #16]
   22aa0:	2800      	cmp	r0, #0
   22aa2:	d0c9      	beq.n	22a38 <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   22aa4:	f7f7 fa1e 	bl	19ee4 <strlen>
   22aa8:	1c45      	adds	r5, r0, #1
            output = ensure(output_buffer, raw_length);
   22aaa:	4629      	mov	r1, r5
   22aac:	4620      	mov	r0, r4
   22aae:	f01d fe36 	bl	4071e <ensure>
            if (output == NULL)
   22ab2:	2800      	cmp	r0, #0
   22ab4:	d0c0      	beq.n	22a38 <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22ab6:	462a      	mov	r2, r5
   22ab8:	6931      	ldr	r1, [r6, #16]
   22aba:	f01e ff7a 	bl	419b2 <memcpy>
   22abe:	e012      	b.n	22ae6 <print_value+0xba>
            const char buff[] = "null";
   22ac0:	4b6d      	ldr	r3, [pc, #436]	; (22c78 <print_value+0x24c>)
            const char buff[] = "true";
   22ac2:	6818      	ldr	r0, [r3, #0]
   22ac4:	791b      	ldrb	r3, [r3, #4]
   22ac6:	9005      	str	r0, [sp, #20]
            output = ensure(output_buffer, sizeof(buff));
   22ac8:	2105      	movs	r1, #5
   22aca:	4620      	mov	r0, r4
            const char buff[] = "true";
   22acc:	f88d 3018 	strb.w	r3, [sp, #24]
            output = ensure(output_buffer, sizeof(buff));
   22ad0:	f01d fe25 	bl	4071e <ensure>
            if (output == NULL)
   22ad4:	4605      	mov	r5, r0
   22ad6:	2800      	cmp	r0, #0
   22ad8:	d0ce      	beq.n	22a78 <print_value+0x4c>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   22ada:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   22ade:	a905      	add	r1, sp, #20
   22ae0:	1ad2      	subs	r2, r2, r3
   22ae2:	f01f f971 	bl	41dc8 <strncpy>
    return true;
   22ae6:	2501      	movs	r5, #1
   22ae8:	e7c6      	b.n	22a78 <print_value+0x4c>
            const char buff[] = "true";
   22aea:	4b64      	ldr	r3, [pc, #400]	; (22c7c <print_value+0x250>)
   22aec:	e7e9      	b.n	22ac2 <print_value+0x96>
    double d = item->valuedouble;
   22aee:	e9d0 8906 	ldrd	r8, r9, [r0, #24]
    if ((d * 0) != 0)
   22af2:	2200      	movs	r2, #0
   22af4:	2300      	movs	r3, #0
   22af6:	4640      	mov	r0, r8
   22af8:	4649      	mov	r1, r9
   22afa:	f7f5 fe4d 	bl	18798 <__aeabi_dmul>
   22afe:	2200      	movs	r2, #0
   22b00:	2300      	movs	r3, #0
   22b02:	f7f6 f8b1 	bl	18c68 <__aeabi_dcmpeq>
   22b06:	ae05      	add	r6, sp, #20
   22b08:	b9b0      	cbnz	r0, 22b38 <print_value+0x10c>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   22b0a:	495b      	ldr	r1, [pc, #364]	; (22c78 <print_value+0x24c>)
   22b0c:	4630      	mov	r0, r6
   22b0e:	f01f f925 	bl	41d5c <strcpy>
   22b12:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   22b14:	1c69      	adds	r1, r5, #1
   22b16:	4620      	mov	r0, r4
   22b18:	f01d fe01 	bl	4071e <ensure>
    if (output_pointer == NULL)
   22b1c:	2800      	cmp	r0, #0
   22b1e:	d08b      	beq.n	22a38 <print_value+0xc>
    for (i = 0; i < ((size_t)length); i++)
   22b20:	2300      	movs	r3, #0
        if (number_buffer[i] == decimal_point)
   22b22:	5cf2      	ldrb	r2, [r6, r3]
        output_pointer[i] = number_buffer[i];
   22b24:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < ((size_t)length); i++)
   22b26:	3301      	adds	r3, #1
   22b28:	429d      	cmp	r5, r3
   22b2a:	d1fa      	bne.n	22b22 <print_value+0xf6>
    output_pointer[i] = '\0';
   22b2c:	2300      	movs	r3, #0
   22b2e:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   22b30:	68a3      	ldr	r3, [r4, #8]
   22b32:	441d      	add	r5, r3
   22b34:	60a5      	str	r5, [r4, #8]
    return true;
   22b36:	e7d6      	b.n	22ae6 <print_value+0xba>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   22b38:	4a51      	ldr	r2, [pc, #324]	; (22c80 <print_value+0x254>)
   22b3a:	211a      	movs	r1, #26
   22b3c:	e9cd 8900 	strd	r8, r9, [sp]
   22b40:	4630      	mov	r0, r6
   22b42:	f01a fcd5 	bl	3d4f0 <sniprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   22b46:	aa02      	add	r2, sp, #8
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   22b48:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   22b4a:	494e      	ldr	r1, [pc, #312]	; (22c84 <print_value+0x258>)
   22b4c:	4630      	mov	r0, r6
   22b4e:	f01a fd03 	bl	3d558 <siscanf>
   22b52:	2801      	cmp	r0, #1
   22b54:	d106      	bne.n	22b64 <print_value+0x138>
   22b56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   22b5a:	4640      	mov	r0, r8
   22b5c:	4649      	mov	r1, r9
   22b5e:	f7f6 f883 	bl	18c68 <__aeabi_dcmpeq>
   22b62:	b938      	cbnz	r0, 22b74 <print_value+0x148>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   22b64:	e9cd 8900 	strd	r8, r9, [sp]
   22b68:	4a47      	ldr	r2, [pc, #284]	; (22c88 <print_value+0x25c>)
   22b6a:	211a      	movs	r1, #26
   22b6c:	4630      	mov	r0, r6
   22b6e:	f01a fcbf 	bl	3d4f0 <sniprintf>
   22b72:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   22b74:	2d19      	cmp	r5, #25
   22b76:	f73f af5f 	bgt.w	22a38 <print_value+0xc>
   22b7a:	e7cb      	b.n	22b14 <print_value+0xe8>
            return print_array(item, output_buffer);
   22b7c:	6886      	ldr	r6, [r0, #8]
    output_pointer = ensure(output_buffer, 1);
   22b7e:	2101      	movs	r1, #1
   22b80:	4620      	mov	r0, r4
   22b82:	f01d fdcc 	bl	4071e <ensure>
    if (output_pointer == NULL)
   22b86:	2800      	cmp	r0, #0
   22b88:	f43f af56 	beq.w	22a38 <print_value+0xc>
    *output_pointer = '[';
   22b8c:	235b      	movs	r3, #91	; 0x5b
            *output_pointer++ = ',';
   22b8e:	272c      	movs	r7, #44	; 0x2c
            *output_pointer = '\0';
   22b90:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   22b94:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   22b96:	68a3      	ldr	r3, [r4, #8]
   22b98:	3301      	adds	r3, #1
   22b9a:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   22b9c:	68e3      	ldr	r3, [r4, #12]
   22b9e:	3301      	adds	r3, #1
   22ba0:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   22ba2:	b96e      	cbnz	r6, 22bc0 <print_value+0x194>
    output_pointer = ensure(output_buffer, 2);
   22ba4:	2102      	movs	r1, #2
   22ba6:	4620      	mov	r0, r4
   22ba8:	f01d fdb9 	bl	4071e <ensure>
    if (output_pointer == NULL)
   22bac:	2800      	cmp	r0, #0
   22bae:	f43f af43 	beq.w	22a38 <print_value+0xc>
    *output_pointer++ = ']';
   22bb2:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   22bb4:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   22bb6:	7003      	strb	r3, [r0, #0]
    output_buffer->depth--;
   22bb8:	68e3      	ldr	r3, [r4, #12]
   22bba:	3b01      	subs	r3, #1
   22bbc:	60e3      	str	r3, [r4, #12]
   22bbe:	e792      	b.n	22ae6 <print_value+0xba>
        if (!print_value(current_element, output_buffer))
   22bc0:	4621      	mov	r1, r4
   22bc2:	4630      	mov	r0, r6
   22bc4:	f7ff ff32 	bl	22a2c <print_value>
   22bc8:	2800      	cmp	r0, #0
   22bca:	f43f af35 	beq.w	22a38 <print_value+0xc>
        update_offset(output_buffer);
   22bce:	4620      	mov	r0, r4
   22bd0:	f01d fd7c 	bl	406cc <update_offset>
        if (current_element->next)
   22bd4:	6833      	ldr	r3, [r6, #0]
   22bd6:	b1bb      	cbz	r3, 22c08 <print_value+0x1dc>
            length = (size_t) (output_buffer->format ? 2 : 1);
   22bd8:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   22bda:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   22bdc:	2b00      	cmp	r3, #0
   22bde:	bf14      	ite	ne
   22be0:	f04f 0902 	movne.w	r9, #2
   22be4:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   22be8:	f109 0101 	add.w	r1, r9, #1
   22bec:	f01d fd97 	bl	4071e <ensure>
            if (output_pointer == NULL)
   22bf0:	2800      	cmp	r0, #0
   22bf2:	f43f af21 	beq.w	22a38 <print_value+0xc>
            *output_pointer++ = ',';
   22bf6:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   22bf8:	6963      	ldr	r3, [r4, #20]
   22bfa:	b93b      	cbnz	r3, 22c0c <print_value+0x1e0>
            *output_pointer++ = ',';
   22bfc:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   22bfe:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   22c02:	68a3      	ldr	r3, [r4, #8]
   22c04:	444b      	add	r3, r9
   22c06:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   22c08:	6836      	ldr	r6, [r6, #0]
   22c0a:	e7ca      	b.n	22ba2 <print_value+0x176>
                *output_pointer++ = ' ';
   22c0c:	1c83      	adds	r3, r0, #2
   22c0e:	7045      	strb	r5, [r0, #1]
   22c10:	e7f5      	b.n	22bfe <print_value+0x1d2>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   22c12:	694b      	ldr	r3, [r1, #20]
            return print_object(item, output_buffer);
   22c14:	6885      	ldr	r5, [r0, #8]
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   22c16:	2b00      	cmp	r3, #0
   22c18:	bf14      	ite	ne
   22c1a:	2702      	movne	r7, #2
   22c1c:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   22c1e:	4620      	mov	r0, r4
   22c20:	1c79      	adds	r1, r7, #1
   22c22:	f01d fd7c 	bl	4071e <ensure>
    if (output_pointer == NULL)
   22c26:	2800      	cmp	r0, #0
   22c28:	f43f af06 	beq.w	22a38 <print_value+0xc>
    *output_pointer++ = '{';
   22c2c:	237b      	movs	r3, #123	; 0x7b
   22c2e:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   22c30:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   22c32:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   22c34:	3201      	adds	r2, #1
   22c36:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   22c38:	b10b      	cbz	r3, 22c3e <print_value+0x212>
        *output_pointer++ = '\n';
   22c3a:	230a      	movs	r3, #10
   22c3c:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   22c3e:	68a3      	ldr	r3, [r4, #8]
        *output_pointer++ = ':';
   22c40:	f04f 083a 	mov.w	r8, #58	; 0x3a
    output_buffer->offset += length;
   22c44:	443b      	add	r3, r7
                *output_pointer++ = '\t';
   22c46:	2709      	movs	r7, #9
    output_buffer->offset += length;
   22c48:	60a3      	str	r3, [r4, #8]
    while (current_item)
   22c4a:	6963      	ldr	r3, [r4, #20]
   22c4c:	b9f5      	cbnz	r5, 22c8c <print_value+0x260>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   22c4e:	2b00      	cmp	r3, #0
   22c50:	d077      	beq.n	22d42 <print_value+0x316>
   22c52:	68e1      	ldr	r1, [r4, #12]
   22c54:	3101      	adds	r1, #1
   22c56:	4620      	mov	r0, r4
   22c58:	f01d fd61 	bl	4071e <ensure>
    if (output_pointer == NULL)
   22c5c:	2800      	cmp	r0, #0
   22c5e:	f43f aeeb 	beq.w	22a38 <print_value+0xc>
    if (output_buffer->format)
   22c62:	6963      	ldr	r3, [r4, #20]
   22c64:	2b00      	cmp	r3, #0
   22c66:	d176      	bne.n	22d56 <print_value+0x32a>
   22c68:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   22c6a:	227d      	movs	r2, #125	; 0x7d
   22c6c:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   22c6e:	2200      	movs	r2, #0
   22c70:	705a      	strb	r2, [r3, #1]
   22c72:	e7a1      	b.n	22bb8 <print_value+0x18c>
   22c74:	00047011 	.word	0x00047011
   22c78:	00046ffa 	.word	0x00046ffa
   22c7c:	00047017 	.word	0x00047017
   22c80:	00046fff 	.word	0x00046fff
   22c84:	00047006 	.word	0x00047006
   22c88:	0004700a 	.word	0x0004700a
        if (output_buffer->format)
   22c8c:	b173      	cbz	r3, 22cac <print_value+0x280>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   22c8e:	68e1      	ldr	r1, [r4, #12]
   22c90:	4620      	mov	r0, r4
   22c92:	f01d fd44 	bl	4071e <ensure>
            if (output_pointer == NULL)
   22c96:	2800      	cmp	r0, #0
   22c98:	f43f aece 	beq.w	22a38 <print_value+0xc>
   22c9c:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   22c9e:	68e1      	ldr	r1, [r4, #12]
   22ca0:	1a13      	subs	r3, r2, r0
   22ca2:	428b      	cmp	r3, r1
   22ca4:	d34a      	bcc.n	22d3c <print_value+0x310>
            output_buffer->offset += output_buffer->depth;
   22ca6:	68a3      	ldr	r3, [r4, #8]
   22ca8:	440b      	add	r3, r1
   22caa:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   22cac:	4621      	mov	r1, r4
   22cae:	6a28      	ldr	r0, [r5, #32]
   22cb0:	f7ff fe1c 	bl	228ec <print_string_ptr>
   22cb4:	2800      	cmp	r0, #0
   22cb6:	f43f aebf 	beq.w	22a38 <print_value+0xc>
        update_offset(output_buffer);
   22cba:	4620      	mov	r0, r4
   22cbc:	f01d fd06 	bl	406cc <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   22cc0:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   22cc2:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   22cc4:	2b00      	cmp	r3, #0
   22cc6:	bf14      	ite	ne
   22cc8:	2602      	movne	r6, #2
   22cca:	2601      	moveq	r6, #1
        output_pointer = ensure(output_buffer, length);
   22ccc:	4631      	mov	r1, r6
   22cce:	f01d fd26 	bl	4071e <ensure>
        if (output_pointer == NULL)
   22cd2:	2800      	cmp	r0, #0
   22cd4:	f43f aeb0 	beq.w	22a38 <print_value+0xc>
        *output_pointer++ = ':';
   22cd8:	f880 8000 	strb.w	r8, [r0]
        if (output_buffer->format)
   22cdc:	6963      	ldr	r3, [r4, #20]
   22cde:	b103      	cbz	r3, 22ce2 <print_value+0x2b6>
            *output_pointer++ = '\t';
   22ce0:	7047      	strb	r7, [r0, #1]
        output_buffer->offset += length;
   22ce2:	68a1      	ldr	r1, [r4, #8]
        if (!print_value(current_item, output_buffer))
   22ce4:	4628      	mov	r0, r5
        output_buffer->offset += length;
   22ce6:	4431      	add	r1, r6
   22ce8:	60a1      	str	r1, [r4, #8]
        if (!print_value(current_item, output_buffer))
   22cea:	4621      	mov	r1, r4
   22cec:	f7ff fe9e 	bl	22a2c <print_value>
   22cf0:	2800      	cmp	r0, #0
   22cf2:	f43f aea1 	beq.w	22a38 <print_value+0xc>
        update_offset(output_buffer);
   22cf6:	4620      	mov	r0, r4
   22cf8:	f01d fce8 	bl	406cc <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   22cfc:	682e      	ldr	r6, [r5, #0]
   22cfe:	6963      	ldr	r3, [r4, #20]
   22d00:	3600      	adds	r6, #0
   22d02:	bf18      	it	ne
   22d04:	2601      	movne	r6, #1
   22d06:	2b00      	cmp	r3, #0
   22d08:	bf18      	it	ne
   22d0a:	3601      	addne	r6, #1
        output_pointer = ensure(output_buffer, length + 1);
   22d0c:	4620      	mov	r0, r4
   22d0e:	1c71      	adds	r1, r6, #1
   22d10:	f01d fd05 	bl	4071e <ensure>
        if (output_pointer == NULL)
   22d14:	2800      	cmp	r0, #0
   22d16:	f43f ae8f 	beq.w	22a38 <print_value+0xc>
        if (current_item->next)
   22d1a:	682b      	ldr	r3, [r5, #0]
   22d1c:	b113      	cbz	r3, 22d24 <print_value+0x2f8>
            *output_pointer++ = ',';
   22d1e:	232c      	movs	r3, #44	; 0x2c
   22d20:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   22d24:	6963      	ldr	r3, [r4, #20]
   22d26:	b113      	cbz	r3, 22d2e <print_value+0x302>
            *output_pointer++ = '\n';
   22d28:	230a      	movs	r3, #10
   22d2a:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   22d2e:	2300      	movs	r3, #0
   22d30:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   22d32:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
   22d34:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
   22d36:	441e      	add	r6, r3
   22d38:	60a6      	str	r6, [r4, #8]
        current_item = current_item->next;
   22d3a:	e786      	b.n	22c4a <print_value+0x21e>
                *output_pointer++ = '\t';
   22d3c:	f802 7b01 	strb.w	r7, [r2], #1
   22d40:	e7ad      	b.n	22c9e <print_value+0x272>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   22d42:	2102      	movs	r1, #2
   22d44:	e787      	b.n	22c56 <print_value+0x22a>
            *output_pointer++ = '\t';
   22d46:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   22d4a:	68e2      	ldr	r2, [r4, #12]
   22d4c:	1a19      	subs	r1, r3, r0
   22d4e:	3a01      	subs	r2, #1
   22d50:	4291      	cmp	r1, r2
   22d52:	d3f8      	bcc.n	22d46 <print_value+0x31a>
   22d54:	e789      	b.n	22c6a <print_value+0x23e>
    if (output_buffer->format)
   22d56:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   22d58:	2509      	movs	r5, #9
   22d5a:	e7f6      	b.n	22d4a <print_value+0x31e>

00022d5c <print.constprop.14>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   22d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   22d5e:	4d24      	ldr	r5, [pc, #144]	; (22df0 <print.constprop.14+0x94>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   22d60:	b08b      	sub	sp, #44	; 0x2c
   22d62:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   22d64:	2224      	movs	r2, #36	; 0x24
   22d66:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   22d68:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   22d6a:	a801      	add	r0, sp, #4
   22d6c:	f01e fe41 	bl	419f2 <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   22d70:	682b      	ldr	r3, [r5, #0]
   22d72:	f44f 7080 	mov.w	r0, #256	; 0x100
   22d76:	4798      	blx	r3
    buffer->length = default_buffer_size;
   22d78:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   22d7c:	4603      	mov	r3, r0
    buffer->format = format;
   22d7e:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   22d80:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   22d82:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   22d84:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   22d86:	462f      	mov	r7, r5
   22d88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   22d8c:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   22d90:	b17b      	cbz	r3, 22db2 <print.constprop.14+0x56>
    if (!print_value(item, buffer))
   22d92:	a901      	add	r1, sp, #4
   22d94:	4620      	mov	r0, r4
   22d96:	f7ff fe49 	bl	22a2c <print_value>
   22d9a:	b150      	cbz	r0, 22db2 <print.constprop.14+0x56>
    update_offset(buffer);
   22d9c:	a801      	add	r0, sp, #4
   22d9e:	f01d fc95 	bl	406cc <update_offset>
    if (hooks->reallocate != NULL)
   22da2:	68ae      	ldr	r6, [r5, #8]
   22da4:	9903      	ldr	r1, [sp, #12]
   22da6:	b15e      	cbz	r6, 22dc0 <print.constprop.14+0x64>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   22da8:	3101      	adds	r1, #1
   22daa:	9801      	ldr	r0, [sp, #4]
   22dac:	47b0      	blx	r6
        if (printed == NULL) {
   22dae:	4604      	mov	r4, r0
   22db0:	b9d0      	cbnz	r0, 22de8 <print.constprop.14+0x8c>
    if (buffer->buffer != NULL)
   22db2:	9c01      	ldr	r4, [sp, #4]
   22db4:	b1c4      	cbz	r4, 22de8 <print.constprop.14+0x8c>
        hooks->deallocate(buffer->buffer);
   22db6:	4620      	mov	r0, r4
   22db8:	687b      	ldr	r3, [r7, #4]
   22dba:	4798      	blx	r3
    return NULL;
   22dbc:	2400      	movs	r4, #0
   22dbe:	e013      	b.n	22de8 <print.constprop.14+0x8c>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   22dc0:	682b      	ldr	r3, [r5, #0]
   22dc2:	1c48      	adds	r0, r1, #1
   22dc4:	4798      	blx	r3
        if (printed == NULL)
   22dc6:	4604      	mov	r4, r0
   22dc8:	2800      	cmp	r0, #0
   22dca:	d0f2      	beq.n	22db2 <print.constprop.14+0x56>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   22dcc:	9a03      	ldr	r2, [sp, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22dce:	9b02      	ldr	r3, [sp, #8]
   22dd0:	3201      	adds	r2, #1
   22dd2:	429a      	cmp	r2, r3
   22dd4:	bf28      	it	cs
   22dd6:	461a      	movcs	r2, r3
   22dd8:	9901      	ldr	r1, [sp, #4]
   22dda:	f01e fdea 	bl	419b2 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   22dde:	9b03      	ldr	r3, [sp, #12]
   22de0:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   22de2:	686b      	ldr	r3, [r5, #4]
   22de4:	9801      	ldr	r0, [sp, #4]
   22de6:	4798      	blx	r3
}
   22de8:	4620      	mov	r0, r4
   22dea:	b00b      	add	sp, #44	; 0x2c
   22dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22dee:	bf00      	nop
   22df0:	20031c34 	.word	0x20031c34

00022df4 <cJSON_strdup.isra.2.constprop.16>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   22df4:	b570      	push	{r4, r5, r6, lr}
    if (string == NULL)
   22df6:	4605      	mov	r5, r0
   22df8:	b170      	cbz	r0, 22e18 <cJSON_strdup.isra.2.constprop.16+0x24>
    length = strlen((const char*)string) + sizeof("");
   22dfa:	f7f7 f873 	bl	19ee4 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   22dfe:	4b07      	ldr	r3, [pc, #28]	; (22e1c <cJSON_strdup.isra.2.constprop.16+0x28>)
    length = strlen((const char*)string) + sizeof("");
   22e00:	1c46      	adds	r6, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   22e02:	681b      	ldr	r3, [r3, #0]
   22e04:	4630      	mov	r0, r6
   22e06:	4798      	blx	r3
    if (copy == NULL)
   22e08:	4604      	mov	r4, r0
   22e0a:	b118      	cbz	r0, 22e14 <cJSON_strdup.isra.2.constprop.16+0x20>
   22e0c:	4632      	mov	r2, r6
   22e0e:	4629      	mov	r1, r5
   22e10:	f01e fdcf 	bl	419b2 <memcpy>
}
   22e14:	4620      	mov	r0, r4
   22e16:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
   22e18:	4604      	mov	r4, r0
   22e1a:	e7fb      	b.n	22e14 <cJSON_strdup.isra.2.constprop.16+0x20>
   22e1c:	20031c34 	.word	0x20031c34

00022e20 <add_item_to_object.constprop.12>:
static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   22e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22e22:	460e      	mov	r6, r1
   22e24:	4614      	mov	r4, r2
    if ((object == NULL) || (string == NULL) || (item == NULL))
   22e26:	4607      	mov	r7, r0
   22e28:	b1f0      	cbz	r0, 22e68 <add_item_to_object.constprop.12+0x48>
   22e2a:	b1e9      	cbz	r1, 22e68 <add_item_to_object.constprop.12+0x48>
   22e2c:	b1e2      	cbz	r2, 22e68 <add_item_to_object.constprop.12+0x48>
    if (constant_key)
   22e2e:	b193      	cbz	r3, 22e56 <add_item_to_object.constprop.12+0x36>
        new_type = item->type | cJSON_StringIsConst;
   22e30:	68d5      	ldr	r5, [r2, #12]
   22e32:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   22e36:	68e3      	ldr	r3, [r4, #12]
   22e38:	059b      	lsls	r3, r3, #22
   22e3a:	d404      	bmi.n	22e46 <add_item_to_object.constprop.12+0x26>
   22e3c:	6a20      	ldr	r0, [r4, #32]
   22e3e:	b110      	cbz	r0, 22e46 <add_item_to_object.constprop.12+0x26>
        hooks->deallocate(item->string);
   22e40:	4b0a      	ldr	r3, [pc, #40]	; (22e6c <add_item_to_object.constprop.12+0x4c>)
   22e42:	685b      	ldr	r3, [r3, #4]
   22e44:	4798      	blx	r3
    item->string = new_key;
   22e46:	6226      	str	r6, [r4, #32]
    item->type = new_type;
   22e48:	60e5      	str	r5, [r4, #12]
    return add_item_to_array(object, item);
   22e4a:	4621      	mov	r1, r4
   22e4c:	4638      	mov	r0, r7
}
   22e4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   22e52:	f01d bc48 	b.w	406e6 <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   22e56:	4608      	mov	r0, r1
   22e58:	f7ff ffcc 	bl	22df4 <cJSON_strdup.isra.2.constprop.16>
        if (new_key == NULL)
   22e5c:	4606      	mov	r6, r0
   22e5e:	b118      	cbz	r0, 22e68 <add_item_to_object.constprop.12+0x48>
        new_type = item->type & ~cJSON_StringIsConst;
   22e60:	68e5      	ldr	r5, [r4, #12]
   22e62:	f425 7500 	bic.w	r5, r5, #512	; 0x200
   22e66:	e7e6      	b.n	22e36 <add_item_to_object.constprop.12+0x16>
}
   22e68:	2000      	movs	r0, #0
   22e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22e6c:	20031c34 	.word	0x20031c34

00022e70 <cJSON_InitHooks>:
{
   22e70:	b530      	push	{r4, r5, lr}
   22e72:	4b0d      	ldr	r3, [pc, #52]	; (22ea8 <cJSON_InitHooks+0x38>)
   22e74:	4d0d      	ldr	r5, [pc, #52]	; (22eac <cJSON_InitHooks+0x3c>)
   22e76:	4c0e      	ldr	r4, [pc, #56]	; (22eb0 <cJSON_InitHooks+0x40>)
    if (hooks == NULL)
   22e78:	b920      	cbnz	r0, 22e84 <cJSON_InitHooks+0x14>
        global_hooks.deallocate = free;
   22e7a:	e9c3 5400 	strd	r5, r4, [r3]
        global_hooks.reallocate = realloc;
   22e7e:	4a0d      	ldr	r2, [pc, #52]	; (22eb4 <cJSON_InitHooks+0x44>)
   22e80:	609a      	str	r2, [r3, #8]
   22e82:	e00f      	b.n	22ea4 <cJSON_InitHooks+0x34>
    if (hooks->malloc_fn != NULL)
   22e84:	6801      	ldr	r1, [r0, #0]
    if (hooks->free_fn != NULL)
   22e86:	6842      	ldr	r2, [r0, #4]
        global_hooks.allocate = hooks->malloc_fn;
   22e88:	2900      	cmp	r1, #0
   22e8a:	bf08      	it	eq
   22e8c:	4629      	moveq	r1, r5
        global_hooks.deallocate = hooks->free_fn;
   22e8e:	2a00      	cmp	r2, #0
   22e90:	bf08      	it	eq
   22e92:	4622      	moveq	r2, r4
    global_hooks.reallocate = NULL;
   22e94:	2000      	movs	r0, #0
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   22e96:	42a9      	cmp	r1, r5
        global_hooks.allocate = hooks->malloc_fn;
   22e98:	6019      	str	r1, [r3, #0]
        global_hooks.deallocate = hooks->free_fn;
   22e9a:	605a      	str	r2, [r3, #4]
    global_hooks.reallocate = NULL;
   22e9c:	6098      	str	r0, [r3, #8]
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   22e9e:	d101      	bne.n	22ea4 <cJSON_InitHooks+0x34>
   22ea0:	42a2      	cmp	r2, r4
   22ea2:	d0ec      	beq.n	22e7e <cJSON_InitHooks+0xe>
}
   22ea4:	bd30      	pop	{r4, r5, pc}
   22ea6:	bf00      	nop
   22ea8:	20031c34 	.word	0x20031c34
   22eac:	0003c9d5 	.word	0x0003c9d5
   22eb0:	0003c9e5 	.word	0x0003c9e5
   22eb4:	0003d4c1 	.word	0x0003d4c1

00022eb8 <cJSON_Delete>:
{
   22eb8:	b570      	push	{r4, r5, r6, lr}
   22eba:	4604      	mov	r4, r0
   22ebc:	4d0f      	ldr	r5, [pc, #60]	; (22efc <cJSON_Delete+0x44>)
    while (item != NULL)
   22ebe:	b904      	cbnz	r4, 22ec2 <cJSON_Delete+0xa>
}
   22ec0:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   22ec2:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   22ec4:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   22ec6:	05d9      	lsls	r1, r3, #23
   22ec8:	d403      	bmi.n	22ed2 <cJSON_Delete+0x1a>
   22eca:	68a0      	ldr	r0, [r4, #8]
   22ecc:	b968      	cbnz	r0, 22eea <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   22ece:	6920      	ldr	r0, [r4, #16]
   22ed0:	b988      	cbnz	r0, 22ef6 <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   22ed2:	68e3      	ldr	r3, [r4, #12]
   22ed4:	059b      	lsls	r3, r3, #22
   22ed6:	d403      	bmi.n	22ee0 <cJSON_Delete+0x28>
   22ed8:	6a20      	ldr	r0, [r4, #32]
   22eda:	b108      	cbz	r0, 22ee0 <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   22edc:	686b      	ldr	r3, [r5, #4]
   22ede:	4798      	blx	r3
        global_hooks.deallocate(item);
   22ee0:	4620      	mov	r0, r4
   22ee2:	686b      	ldr	r3, [r5, #4]
   22ee4:	4798      	blx	r3
        item = next;
   22ee6:	4634      	mov	r4, r6
   22ee8:	e7e9      	b.n	22ebe <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   22eea:	f7ff ffe5 	bl	22eb8 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   22eee:	68e3      	ldr	r3, [r4, #12]
   22ef0:	05da      	lsls	r2, r3, #23
   22ef2:	d5ec      	bpl.n	22ece <cJSON_Delete+0x16>
   22ef4:	e7ed      	b.n	22ed2 <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   22ef6:	686b      	ldr	r3, [r5, #4]
   22ef8:	4798      	blx	r3
   22efa:	e7ea      	b.n	22ed2 <cJSON_Delete+0x1a>
   22efc:	20031c34 	.word	0x20031c34

00022f00 <cJSON_ParseWithOpts>:
{
   22f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22f04:	4605      	mov	r5, r0
    global_error.json = NULL;
   22f06:	f04f 0800 	mov.w	r8, #0
{
   22f0a:	b089      	sub	sp, #36	; 0x24
    global_error.json = NULL;
   22f0c:	4e31      	ldr	r6, [pc, #196]	; (22fd4 <cJSON_ParseWithOpts+0xd4>)
{
   22f0e:	460f      	mov	r7, r1
   22f10:	4691      	mov	r9, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   22f12:	2100      	movs	r1, #0
   22f14:	221c      	movs	r2, #28
   22f16:	a801      	add	r0, sp, #4
   22f18:	f01e fd6b 	bl	419f2 <memset>
    global_error.position = 0;
   22f1c:	e9c6 8800 	strd	r8, r8, [r6]
    if (value == NULL)
   22f20:	2d00      	cmp	r5, #0
   22f22:	d04d      	beq.n	22fc0 <cJSON_ParseWithOpts+0xc0>
    buffer.length = strlen((const char*)value) + sizeof("");
   22f24:	4628      	mov	r0, r5
    buffer.content = (const unsigned char*)value;
   22f26:	9501      	str	r5, [sp, #4]
    buffer.length = strlen((const char*)value) + sizeof("");
   22f28:	f7f6 ffdc 	bl	19ee4 <strlen>
    buffer.hooks = global_hooks;
   22f2c:	4b2a      	ldr	r3, [pc, #168]	; (22fd8 <cJSON_ParseWithOpts+0xd8>)
    buffer.length = strlen((const char*)value) + sizeof("");
   22f2e:	3001      	adds	r0, #1
    buffer.offset = 0;
   22f30:	e9cd 0802 	strd	r0, r8, [sp, #8]
    buffer.hooks = global_hooks;
   22f34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   22f38:	ab08      	add	r3, sp, #32
   22f3a:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
   22f3e:	f01d fbe2 	bl	40706 <cJSON_New_Item.isra.1>
    if (item == NULL) /* memory fail */
   22f42:	4604      	mov	r4, r0
   22f44:	2800      	cmp	r0, #0
   22f46:	d030      	beq.n	22faa <cJSON_ParseWithOpts+0xaa>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
   22f48:	9801      	ldr	r0, [sp, #4]
   22f4a:	b128      	cbz	r0, 22f58 <cJSON_ParseWithOpts+0x58>
   22f4c:	9b03      	ldr	r3, [sp, #12]
   22f4e:	b9e3      	cbnz	r3, 22f8a <cJSON_ParseWithOpts+0x8a>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   22f50:	9b02      	ldr	r3, [sp, #8]
   22f52:	2b04      	cmp	r3, #4
   22f54:	d80f      	bhi.n	22f76 <cJSON_ParseWithOpts+0x76>
    return buffer;
   22f56:	a801      	add	r0, sp, #4
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
   22f58:	f01d fba3 	bl	406a2 <buffer_skip_whitespace>
   22f5c:	4601      	mov	r1, r0
   22f5e:	4620      	mov	r0, r4
   22f60:	f7f7 faea 	bl	1a538 <parse_value>
   22f64:	b1f0      	cbz	r0, 22fa4 <cJSON_ParseWithOpts+0xa4>
    if (require_null_terminated)
   22f66:	f1b9 0f00 	cmp.w	r9, #0
   22f6a:	d110      	bne.n	22f8e <cJSON_ParseWithOpts+0x8e>
    if (return_parse_end)
   22f6c:	bb57      	cbnz	r7, 22fc4 <cJSON_ParseWithOpts+0xc4>
}
   22f6e:	4620      	mov	r0, r4
   22f70:	b009      	add	sp, #36	; 0x24
   22f72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   22f76:	2203      	movs	r2, #3
   22f78:	4918      	ldr	r1, [pc, #96]	; (22fdc <cJSON_ParseWithOpts+0xdc>)
   22f7a:	f01e ff13 	bl	41da4 <strncmp>
   22f7e:	2800      	cmp	r0, #0
   22f80:	d1e9      	bne.n	22f56 <cJSON_ParseWithOpts+0x56>
        buffer->offset += 3;
   22f82:	9b03      	ldr	r3, [sp, #12]
   22f84:	3303      	adds	r3, #3
   22f86:	9303      	str	r3, [sp, #12]
   22f88:	e7e5      	b.n	22f56 <cJSON_ParseWithOpts+0x56>
        return NULL;
   22f8a:	4640      	mov	r0, r8
   22f8c:	e7e4      	b.n	22f58 <cJSON_ParseWithOpts+0x58>
        buffer_skip_whitespace(&buffer);
   22f8e:	a801      	add	r0, sp, #4
   22f90:	f01d fb87 	bl	406a2 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
   22f94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   22f98:	4293      	cmp	r3, r2
   22f9a:	d203      	bcs.n	22fa4 <cJSON_ParseWithOpts+0xa4>
   22f9c:	9a01      	ldr	r2, [sp, #4]
   22f9e:	5cd3      	ldrb	r3, [r2, r3]
   22fa0:	2b00      	cmp	r3, #0
   22fa2:	d0e3      	beq.n	22f6c <cJSON_ParseWithOpts+0x6c>
        cJSON_Delete(item);
   22fa4:	4620      	mov	r0, r4
   22fa6:	f7ff ff87 	bl	22eb8 <cJSON_Delete>
        if (buffer.offset < buffer.length)
   22faa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   22fae:	429a      	cmp	r2, r3
   22fb0:	d30d      	bcc.n	22fce <cJSON_ParseWithOpts+0xce>
        else if (buffer.length > 0)
   22fb2:	b103      	cbz	r3, 22fb6 <cJSON_ParseWithOpts+0xb6>
            local_error.position = buffer.length - 1;
   22fb4:	3b01      	subs	r3, #1
        if (return_parse_end != NULL)
   22fb6:	b10f      	cbz	r7, 22fbc <cJSON_ParseWithOpts+0xbc>
            *return_parse_end = (const char*)local_error.json + local_error.position;
   22fb8:	18ea      	adds	r2, r5, r3
   22fba:	603a      	str	r2, [r7, #0]
        global_error = local_error;
   22fbc:	e9c6 5300 	strd	r5, r3, [r6]
    return NULL;
   22fc0:	2400      	movs	r4, #0
   22fc2:	e7d4      	b.n	22f6e <cJSON_ParseWithOpts+0x6e>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
   22fc4:	9b01      	ldr	r3, [sp, #4]
   22fc6:	9a03      	ldr	r2, [sp, #12]
   22fc8:	4413      	add	r3, r2
   22fca:	603b      	str	r3, [r7, #0]
   22fcc:	e7cf      	b.n	22f6e <cJSON_ParseWithOpts+0x6e>
   22fce:	4613      	mov	r3, r2
   22fd0:	e7f1      	b.n	22fb6 <cJSON_ParseWithOpts+0xb6>
   22fd2:	bf00      	nop
   22fd4:	200239b8 	.word	0x200239b8
   22fd8:	20031c34 	.word	0x20031c34
   22fdc:	00046fed 	.word	0x00046fed

00022fe0 <cJSON_CreateNull>:
{
   22fe0:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   22fe2:	4b04      	ldr	r3, [pc, #16]	; (22ff4 <cJSON_CreateNull+0x14>)
   22fe4:	6818      	ldr	r0, [r3, #0]
   22fe6:	f01d fb8e 	bl	40706 <cJSON_New_Item.isra.1>
    if(item)
   22fea:	b108      	cbz	r0, 22ff0 <cJSON_CreateNull+0x10>
        item->type = cJSON_NULL;
   22fec:	2304      	movs	r3, #4
   22fee:	60c3      	str	r3, [r0, #12]
}
   22ff0:	bd08      	pop	{r3, pc}
   22ff2:	bf00      	nop
   22ff4:	20031c34 	.word	0x20031c34

00022ff8 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   22ff8:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   22ffa:	4b0a      	ldr	r3, [pc, #40]	; (23024 <cJSON_CreateString+0x2c>)
{
   22ffc:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   22ffe:	6818      	ldr	r0, [r3, #0]
   23000:	f01d fb81 	bl	40706 <cJSON_New_Item.isra.1>
    if(item)
   23004:	4604      	mov	r4, r0
   23006:	b158      	cbz	r0, 23020 <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
   23008:	2310      	movs	r3, #16
   2300a:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   2300c:	4628      	mov	r0, r5
   2300e:	f7ff fef1 	bl	22df4 <cJSON_strdup.isra.2.constprop.16>
   23012:	4605      	mov	r5, r0
   23014:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   23016:	b918      	cbnz	r0, 23020 <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
   23018:	4620      	mov	r0, r4
   2301a:	f7ff ff4d 	bl	22eb8 <cJSON_Delete>
            return NULL;
   2301e:	462c      	mov	r4, r5
        }
    }

    return item;
}
   23020:	4620      	mov	r0, r4
   23022:	bd38      	pop	{r3, r4, r5, pc}
   23024:	20031c34 	.word	0x20031c34

00023028 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
   23028:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   2302a:	4b04      	ldr	r3, [pc, #16]	; (2303c <cJSON_CreateArray+0x14>)
   2302c:	6818      	ldr	r0, [r3, #0]
   2302e:	f01d fb6a 	bl	40706 <cJSON_New_Item.isra.1>
    if(item)
   23032:	b108      	cbz	r0, 23038 <cJSON_CreateArray+0x10>
    {
        item->type=cJSON_Array;
   23034:	2320      	movs	r3, #32
   23036:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   23038:	bd08      	pop	{r3, pc}
   2303a:	bf00      	nop
   2303c:	20031c34 	.word	0x20031c34

00023040 <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   23040:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   23042:	4b04      	ldr	r3, [pc, #16]	; (23054 <cJSON_CreateObject+0x14>)
   23044:	6818      	ldr	r0, [r3, #0]
   23046:	f01d fb5e 	bl	40706 <cJSON_New_Item.isra.1>
    if (item)
   2304a:	b108      	cbz	r0, 23050 <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   2304c:	2340      	movs	r3, #64	; 0x40
   2304e:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   23050:	bd08      	pop	{r3, pc}
   23052:	bf00      	nop
   23054:	20031c34 	.word	0x20031c34

00023058 <cJSON_Init>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }

/**@brief Initialize cJSON by assigning function hooks. */
void cJSON_Init(void)
{
	_cjson_hooks.malloc_fn = malloc_fn_hook;
   23058:	4803      	ldr	r0, [pc, #12]	; (23068 <cJSON_Init+0x10>)
   2305a:	4b04      	ldr	r3, [pc, #16]	; (2306c <cJSON_Init+0x14>)
   2305c:	6003      	str	r3, [r0, #0]
	_cjson_hooks.free_fn = free_fn_hook;
   2305e:	4b04      	ldr	r3, [pc, #16]	; (23070 <cJSON_Init+0x18>)
   23060:	6043      	str	r3, [r0, #4]

	cJSON_InitHooks(&_cjson_hooks);
   23062:	f7ff bf05 	b.w	22e70 <cJSON_InitHooks>
   23066:	bf00      	nop
   23068:	200239c0 	.word	0x200239c0
   2306c:	00040831 	.word	0x00040831
   23070:	0004082d 	.word	0x0004082d

00023074 <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   23074:	2200      	movs	r2, #0
{
   23076:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   23078:	4611      	mov	r1, r2
   2307a:	202a      	movs	r0, #42	; 0x2a
   2307c:	f7fd fa00 	bl	20480 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
   23080:	f008 fa08 	bl	2b494 <bsd_init>
   23084:	4b01      	ldr	r3, [pc, #4]	; (2308c <_bsdlib_init+0x18>)
   23086:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   23088:	2000      	movs	r0, #0
   2308a:	bd08      	pop	{r3, pc}
   2308c:	200239c8 	.word	0x200239c8

00023090 <bsdlib_get_init_ret>:
}

int bsdlib_get_init_ret(void)
{
	return init_ret;
}
   23090:	4b01      	ldr	r3, [pc, #4]	; (23098 <bsdlib_get_init_ret+0x8>)
   23092:	6818      	ldr	r0, [r3, #0]
   23094:	4770      	bx	lr
   23096:	bf00      	nop
   23098:	200239c8 	.word	0x200239c8

0002309c <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   2309c:	b570      	push	{r4, r5, r6, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   2309e:	4b0d      	ldr	r3, [pc, #52]	; (230d4 <thread_monitor_entry_get+0x38>)
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   230a0:	4c0d      	ldr	r4, [pc, #52]	; (230d8 <thread_monitor_entry_get+0x3c>)
		entry_age = rpc_event_cnt - entry->cnt;
   230a2:	681a      	ldr	r2, [r3, #0]
   230a4:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   230a6:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   230a8:	4623      	mov	r3, r4
		if (entry->id == id) {
   230aa:	6819      	ldr	r1, [r3, #0]
   230ac:	4281      	cmp	r1, r0
   230ae:	d00e      	beq.n	230ce <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   230b0:	b151      	cbz	r1, 230c8 <thread_monitor_entry_get+0x2c>
		entry_age = rpc_event_cnt - entry->cnt;
   230b2:	6859      	ldr	r1, [r3, #4]
   230b4:	1a51      	subs	r1, r2, r1
		if (entry_age > oldest_entry_age) {
   230b6:	42b1      	cmp	r1, r6
   230b8:	bfc4      	itt	gt
   230ba:	461c      	movgt	r4, r3
   230bc:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   230be:	3d01      	subs	r5, #1
   230c0:	f103 0308 	add.w	r3, r3, #8
   230c4:	d1f1      	bne.n	230aa <thread_monitor_entry_get+0xe>
   230c6:	4623      	mov	r3, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   230c8:	3a01      	subs	r2, #1
	new_entry->id = id;
   230ca:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   230cc:	605a      	str	r2, [r3, #4]

	return new_entry;
}
   230ce:	4618      	mov	r0, r3
   230d0:	bd70      	pop	{r4, r5, r6, pc}
   230d2:	bf00      	nop
   230d4:	200239cc 	.word	0x200239cc
   230d8:	200239d8 	.word	0x200239d8

000230dc <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   230dc:	4668      	mov	r0, sp
   230de:	f020 0107 	bic.w	r1, r0, #7
   230e2:	468d      	mov	sp, r1
   230e4:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   230e6:	4b0d      	ldr	r3, [pc, #52]	; (2311c <rpc_proxy_irq_handler+0x40>)
   230e8:	e8d3 2fef 	ldaex	r2, [r3]
   230ec:	3201      	adds	r2, #1
   230ee:	e8c3 2fe1 	stlex	r1, r2, [r3]
   230f2:	2900      	cmp	r1, #0
   230f4:	d1f8      	bne.n	230e8 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   230f6:	f012 f9e5 	bl	354c4 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   230fa:	4b09      	ldr	r3, [pc, #36]	; (23120 <rpc_proxy_irq_handler+0x44>)
   230fc:	681c      	ldr	r4, [r3, #0]
   230fe:	b93c      	cbnz	r4, 23110 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   23100:	f7fd f9f0 	bl	204e4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   23104:	f7fd f912 	bl	2032c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   23108:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   2310c:	4685      	mov	sp, r0
   2310e:	4770      	bx	lr
   23110:	1d20      	adds	r0, r4, #4
   23112:	f017 febf 	bl	3ae94 <z_impl_k_sem_give>
   23116:	6824      	ldr	r4, [r4, #0]
	return node->next;
   23118:	e7f1      	b.n	230fe <rpc_proxy_irq_handler+0x22>
   2311a:	bf00      	nop
   2311c:	200239cc 	.word	0x200239cc
   23120:	200239d0 	.word	0x200239d0

00023124 <bsd_os_timedwait>:
{
   23124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23128:	4688      	mov	r8, r1
   2312a:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
   2312c:	f01e fbbb 	bl	418a6 <z_impl_k_uptime_get>
	if (*timeout == 0) {
   23130:	f8d8 3000 	ldr.w	r3, [r8]
   23134:	4606      	mov	r6, r0
   23136:	2b00      	cmp	r3, #0
   23138:	460f      	mov	r7, r1
   2313a:	d103      	bne.n	23144 <bsd_os_timedwait+0x20>
	z_impl_k_yield();
   2313c:	f017 fd0e 	bl	3ab5c <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   23140:	203c      	movs	r0, #60	; 0x3c
   23142:	e06e      	b.n	23222 <bsd_os_timedwait+0xfe>
		*timeout = K_FOREVER;
   23144:	bfbc      	itt	lt
   23146:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   2314a:	f8c8 3000 	strlt.w	r3, [r8]
	z_impl_k_sem_init(sem, initial_count, limit);
   2314e:	2201      	movs	r2, #1
   23150:	2100      	movs	r1, #0
   23152:	a802      	add	r0, sp, #8
   23154:	f017 fe68 	bl	3ae28 <z_impl_k_sem_init>
   23158:	f10d 0a04 	add.w	sl, sp, #4
   2315c:	f04f 0320 	mov.w	r3, #32
   23160:	f3ef 8b11 	mrs	fp, BASEPRI
   23164:	f383 8811 	msr	BASEPRI, r3
   23168:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   2316c:	f017 fe56 	bl	3ae1c <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   23170:	f7ff ff94 	bl	2309c <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   23174:	4933      	ldr	r1, [pc, #204]	; (23244 <bsd_os_timedwait+0x120>)
   23176:	6843      	ldr	r3, [r0, #4]
   23178:	680a      	ldr	r2, [r1, #0]
   2317a:	4689      	mov	r9, r1
   2317c:	4293      	cmp	r3, r2
   2317e:	f04f 0300 	mov.w	r3, #0
   23182:	d108      	bne.n	23196 <bsd_os_timedwait+0x72>
	parent->next = child;
   23184:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   23186:	4b30      	ldr	r3, [pc, #192]	; (23248 <bsd_os_timedwait+0x124>)
   23188:	685a      	ldr	r2, [r3, #4]
   2318a:	2a00      	cmp	r2, #0
   2318c:	d14c      	bne.n	23228 <bsd_os_timedwait+0x104>
	list->head = node;
   2318e:	e9c3 aa00 	strd	sl, sl, [r3]
		allow_to_sleep = true;
   23192:	2301      	movs	r3, #1
   23194:	e000      	b.n	23198 <bsd_os_timedwait+0x74>
	entry->cnt = rpc_event_cnt;
   23196:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   23198:	f38b 8811 	msr	BASEPRI, fp
   2319c:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   231a0:	2b00      	cmp	r3, #0
   231a2:	d03d      	beq.n	23220 <bsd_os_timedwait+0xfc>
	(void)k_sem_take(&thread.sem, *timeout);
   231a4:	f8d8 1000 	ldr.w	r1, [r8]
	return z_impl_k_sem_take(sem, timeout);
   231a8:	a802      	add	r0, sp, #8
   231aa:	f017 febb 	bl	3af24 <z_impl_k_sem_take>
	__asm__ volatile(
   231ae:	f04f 0320 	mov.w	r3, #32
   231b2:	f3ef 8b11 	mrs	fp, BASEPRI
   231b6:	f383 8811 	msr	BASEPRI, r3
   231ba:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   231be:	2000      	movs	r0, #0
   231c0:	4b21      	ldr	r3, [pc, #132]	; (23248 <bsd_os_timedwait+0x124>)
   231c2:	681a      	ldr	r2, [r3, #0]
   231c4:	b152      	cbz	r2, 231dc <bsd_os_timedwait+0xb8>
   231c6:	4552      	cmp	r2, sl
   231c8:	d139      	bne.n	2323e <bsd_os_timedwait+0x11a>
Z_GENLIST_REMOVE(slist, snode)
   231ca:	9901      	ldr	r1, [sp, #4]
   231cc:	bb88      	cbnz	r0, 23232 <bsd_os_timedwait+0x10e>
   231ce:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   231d0:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   231d2:	4290      	cmp	r0, r2
   231d4:	d100      	bne.n	231d8 <bsd_os_timedwait+0xb4>
	list->tail = node;
   231d6:	6059      	str	r1, [r3, #4]
	parent->next = child;
   231d8:	2300      	movs	r3, #0
   231da:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   231dc:	f017 fe1e 	bl	3ae1c <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   231e0:	f7ff ff5c 	bl	2309c <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   231e4:	f8d9 3000 	ldr.w	r3, [r9]
   231e8:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   231ea:	f38b 8811 	msr	BASEPRI, fp
   231ee:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
   231f2:	f8d8 9000 	ldr.w	r9, [r8]
   231f6:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   231fa:	d011      	beq.n	23220 <bsd_os_timedwait+0xfc>
	return z_impl_k_uptime_get();
   231fc:	f01e fb53 	bl	418a6 <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
   23200:	eb16 0209 	adds.w	r2, r6, r9
   23204:	eb47 73e9 	adc.w	r3, r7, r9, asr #31
   23208:	1a14      	subs	r4, r2, r0
   2320a:	eb63 0501 	sbc.w	r5, r3, r1
	*timeout = remaining > 0 ? remaining : 0;
   2320e:	2c00      	cmp	r4, #0
   23210:	f175 0300 	sbcs.w	r3, r5, #0
   23214:	bfb8      	it	lt
   23216:	2400      	movlt	r4, #0
   23218:	f8c8 4000 	str.w	r4, [r8]
	if (*timeout == 0) {
   2321c:	2c00      	cmp	r4, #0
   2321e:	d08f      	beq.n	23140 <bsd_os_timedwait+0x1c>
	return 0;
   23220:	2000      	movs	r0, #0
}
   23222:	b009      	add	sp, #36	; 0x24
   23224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23228:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   2322c:	f8c3 a004 	str.w	sl, [r3, #4]
   23230:	e7af      	b.n	23192 <bsd_os_timedwait+0x6e>
	parent->next = child;
   23232:	6001      	str	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   23234:	6859      	ldr	r1, [r3, #4]
   23236:	4291      	cmp	r1, r2
	list->tail = node;
   23238:	bf08      	it	eq
   2323a:	6058      	streq	r0, [r3, #4]
   2323c:	e7cc      	b.n	231d8 <bsd_os_timedwait+0xb4>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2323e:	4610      	mov	r0, r2
   23240:	6812      	ldr	r2, [r2, #0]
   23242:	e7bf      	b.n	231c4 <bsd_os_timedwait+0xa0>
   23244:	200239cc 	.word	0x200239cc
   23248:	200239d0 	.word	0x200239d0

0002324c <bsd_os_errno_set>:
	switch (err_code) {
   2324c:	282d      	cmp	r0, #45	; 0x2d
{
   2324e:	b510      	push	{r4, lr}
   23250:	4604      	mov	r4, r0
	switch (err_code) {
   23252:	f000 8099 	beq.w	23388 <bsd_os_errno_set+0x13c>
   23256:	dc48      	bgt.n	232ea <bsd_os_errno_set+0x9e>
   23258:	280e      	cmp	r0, #14
   2325a:	d009      	beq.n	23270 <bsd_os_errno_set+0x24>
   2325c:	dc11      	bgt.n	23282 <bsd_os_errno_set+0x36>
   2325e:	2808      	cmp	r0, #8
   23260:	d006      	beq.n	23270 <bsd_os_errno_set+0x24>
   23262:	dc09      	bgt.n	23278 <bsd_os_errno_set+0x2c>
   23264:	2802      	cmp	r0, #2
   23266:	d003      	beq.n	23270 <bsd_os_errno_set+0x24>
   23268:	2805      	cmp	r0, #5
   2326a:	d001      	beq.n	23270 <bsd_os_errno_set+0x24>
   2326c:	2801      	cmp	r0, #1
   2326e:	d119      	bne.n	232a4 <bsd_os_errno_set+0x58>
		errno = ENOBUFS;
   23270:	f01c fb1e 	bl	3f8b0 <__errno>
   23274:	6004      	str	r4, [r0, #0]
}
   23276:	bd10      	pop	{r4, pc}
	switch (err_code) {
   23278:	280c      	cmp	r0, #12
   2327a:	d0f9      	beq.n	23270 <bsd_os_errno_set+0x24>
   2327c:	dc6b      	bgt.n	23356 <bsd_os_errno_set+0x10a>
   2327e:	2809      	cmp	r0, #9
   23280:	e7f5      	b.n	2326e <bsd_os_errno_set+0x22>
   23282:	2828      	cmp	r0, #40	; 0x28
   23284:	f000 80b7 	beq.w	233f6 <bsd_os_errno_set+0x1aa>
   23288:	dc05      	bgt.n	23296 <bsd_os_errno_set+0x4a>
   2328a:	2818      	cmp	r0, #24
   2328c:	d0f0      	beq.n	23270 <bsd_os_errno_set+0x24>
   2328e:	2823      	cmp	r0, #35	; 0x23
   23290:	d066      	beq.n	23360 <bsd_os_errno_set+0x114>
   23292:	2816      	cmp	r0, #22
   23294:	e7eb      	b.n	2326e <bsd_os_errno_set+0x22>
   23296:	282a      	cmp	r0, #42	; 0x2a
   23298:	d06a      	beq.n	23370 <bsd_os_errno_set+0x124>
   2329a:	db65      	blt.n	23368 <bsd_os_errno_set+0x11c>
   2329c:	282b      	cmp	r0, #43	; 0x2b
   2329e:	d06b      	beq.n	23378 <bsd_os_errno_set+0x12c>
   232a0:	282c      	cmp	r0, #44	; 0x2c
   232a2:	d06d      	beq.n	23380 <bsd_os_errno_set+0x134>
		__ASSERT(false, "Untranslated errno %d set by bsdlib!", err_code);
   232a4:	f44f 73a2 	mov.w	r3, #324	; 0x144
   232a8:	4a55      	ldr	r2, [pc, #340]	; (23400 <bsd_os_errno_set+0x1b4>)
   232aa:	4956      	ldr	r1, [pc, #344]	; (23404 <bsd_os_errno_set+0x1b8>)
   232ac:	4856      	ldr	r0, [pc, #344]	; (23408 <bsd_os_errno_set+0x1bc>)
   232ae:	f01c f8ca 	bl	3f446 <printk>
   232b2:	4621      	mov	r1, r4
   232b4:	4855      	ldr	r0, [pc, #340]	; (2340c <bsd_os_errno_set+0x1c0>)
   232b6:	f01c f8c6 	bl	3f446 <printk>
   232ba:	f44f 71a2 	mov.w	r1, #324	; 0x144
   232be:	4850      	ldr	r0, [pc, #320]	; (23400 <bsd_os_errno_set+0x1b4>)
   232c0:	f01c f8ce 	bl	3f460 <assert_post_action>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   232c4:	2301      	movs	r3, #1
   232c6:	f04f 0000 	mov.w	r0, #0
   232ca:	4a51      	ldr	r2, [pc, #324]	; (23410 <bsd_os_errno_set+0x1c4>)
   232cc:	f363 0007 	bfi	r0, r3, #0, #8
   232d0:	4b50      	ldr	r3, [pc, #320]	; (23414 <bsd_os_errno_set+0x1c8>)
   232d2:	4951      	ldr	r1, [pc, #324]	; (23418 <bsd_os_errno_set+0x1cc>)
   232d4:	1a9b      	subs	r3, r3, r2
   232d6:	08db      	lsrs	r3, r3, #3
   232d8:	f363 108f 	bfi	r0, r3, #6, #10
   232dc:	4622      	mov	r2, r4
   232de:	f01c f8d0 	bl	3f482 <log_string_sync>
		errno = 0xBAADBAAD;
   232e2:	f01c fae5 	bl	3f8b0 <__errno>
   232e6:	4b4d      	ldr	r3, [pc, #308]	; (2341c <bsd_os_errno_set+0x1d0>)
   232e8:	e038      	b.n	2335c <bsd_os_errno_set+0x110>
	switch (err_code) {
   232ea:	283c      	cmp	r0, #60	; 0x3c
   232ec:	d064      	beq.n	233b8 <bsd_os_errno_set+0x16c>
   232ee:	dc1d      	bgt.n	2332c <bsd_os_errno_set+0xe0>
   232f0:	2833      	cmp	r0, #51	; 0x33
   232f2:	d055      	beq.n	233a0 <bsd_os_errno_set+0x154>
   232f4:	dc09      	bgt.n	2330a <bsd_os_errno_set+0xbe>
   232f6:	2830      	cmp	r0, #48	; 0x30
   232f8:	d04a      	beq.n	23390 <bsd_os_errno_set+0x144>
   232fa:	2832      	cmp	r0, #50	; 0x32
   232fc:	d04c      	beq.n	23398 <bsd_os_errno_set+0x14c>
   232fe:	282f      	cmp	r0, #47	; 0x2f
   23300:	d1d0      	bne.n	232a4 <bsd_os_errno_set+0x58>
		errno = EAFNOSUPPORT;
   23302:	f01c fad5 	bl	3f8b0 <__errno>
   23306:	236a      	movs	r3, #106	; 0x6a
   23308:	e028      	b.n	2335c <bsd_os_errno_set+0x110>
	switch (err_code) {
   2330a:	2836      	cmp	r0, #54	; 0x36
   2330c:	d04c      	beq.n	233a8 <bsd_os_errno_set+0x15c>
   2330e:	dc05      	bgt.n	2331c <bsd_os_errno_set+0xd0>
   23310:	2834      	cmp	r0, #52	; 0x34
   23312:	d1c7      	bne.n	232a4 <bsd_os_errno_set+0x58>
		errno = ENETRESET;
   23314:	f01c facc 	bl	3f8b0 <__errno>
   23318:	237e      	movs	r3, #126	; 0x7e
   2331a:	e01f      	b.n	2335c <bsd_os_errno_set+0x110>
	switch (err_code) {
   2331c:	2838      	cmp	r0, #56	; 0x38
   2331e:	d047      	beq.n	233b0 <bsd_os_errno_set+0x164>
   23320:	2839      	cmp	r0, #57	; 0x39
   23322:	d1bf      	bne.n	232a4 <bsd_os_errno_set+0x58>
		errno = ENOTCONN;
   23324:	f01c fac4 	bl	3f8b0 <__errno>
   23328:	2380      	movs	r3, #128	; 0x80
   2332a:	e017      	b.n	2335c <bsd_os_errno_set+0x110>
	switch (err_code) {
   2332c:	287d      	cmp	r0, #125	; 0x7d
   2332e:	d04f      	beq.n	233d0 <bsd_os_errno_set+0x184>
   23330:	dc05      	bgt.n	2333e <bsd_os_errno_set+0xf2>
   23332:	2870      	cmp	r0, #112	; 0x70
   23334:	d044      	beq.n	233c0 <bsd_os_errno_set+0x174>
   23336:	2873      	cmp	r0, #115	; 0x73
   23338:	d046      	beq.n	233c8 <bsd_os_errno_set+0x17c>
   2333a:	2869      	cmp	r0, #105	; 0x69
   2333c:	e797      	b.n	2326e <bsd_os_errno_set+0x22>
   2333e:	287f      	cmp	r0, #127	; 0x7f
   23340:	d04f      	beq.n	233e2 <bsd_os_errno_set+0x196>
   23342:	db49      	blt.n	233d8 <bsd_os_errno_set+0x18c>
   23344:	2880      	cmp	r0, #128	; 0x80
   23346:	d051      	beq.n	233ec <bsd_os_errno_set+0x1a0>
   23348:	2881      	cmp	r0, #129	; 0x81
   2334a:	d1ab      	bne.n	232a4 <bsd_os_errno_set+0x58>
		errno = EKEYREJECTED;
   2334c:	f01c fab0 	bl	3f8b0 <__errno>
   23350:	f240 73d4 	movw	r3, #2004	; 0x7d4
   23354:	e002      	b.n	2335c <bsd_os_errno_set+0x110>
		errno = EACCES;
   23356:	f01c faab 	bl	3f8b0 <__errno>
   2335a:	230d      	movs	r3, #13
		errno = 0xBAADBAAD;
   2335c:	6003      	str	r3, [r0, #0]
}
   2335e:	e78a      	b.n	23276 <bsd_os_errno_set+0x2a>
		errno = EAGAIN;
   23360:	f01c faa6 	bl	3f8b0 <__errno>
   23364:	230b      	movs	r3, #11
   23366:	e7f9      	b.n	2335c <bsd_os_errno_set+0x110>
		errno = EPROTOTYPE;
   23368:	f01c faa2 	bl	3f8b0 <__errno>
   2336c:	236b      	movs	r3, #107	; 0x6b
   2336e:	e7f5      	b.n	2335c <bsd_os_errno_set+0x110>
		errno = ENOPROTOOPT;
   23370:	f01c fa9e 	bl	3f8b0 <__errno>
   23374:	236d      	movs	r3, #109	; 0x6d
   23376:	e7f1      	b.n	2335c <bsd_os_errno_set+0x110>
		errno = EPROTONOSUPPORT;
   23378:	f01c fa9a 	bl	3f8b0 <__errno>
   2337c:	237b      	movs	r3, #123	; 0x7b
   2337e:	e7ed      	b.n	2335c <bsd_os_errno_set+0x110>
		errno = ESOCKTNOSUPPORT;
   23380:	f01c fa96 	bl	3f8b0 <__errno>
   23384:	237c      	movs	r3, #124	; 0x7c
   23386:	e7e9      	b.n	2335c <bsd_os_errno_set+0x110>
		errno = EOPNOTSUPP;
   23388:	f01c fa92 	bl	3f8b0 <__errno>
   2338c:	235f      	movs	r3, #95	; 0x5f
   2338e:	e7e5      	b.n	2335c <bsd_os_errno_set+0x110>
		errno = EADDRINUSE;
   23390:	f01c fa8e 	bl	3f8b0 <__errno>
   23394:	2370      	movs	r3, #112	; 0x70
   23396:	e7e1      	b.n	2335c <bsd_os_errno_set+0x110>
		errno = ENETDOWN;
   23398:	f01c fa8a 	bl	3f8b0 <__errno>
   2339c:	2373      	movs	r3, #115	; 0x73
   2339e:	e7dd      	b.n	2335c <bsd_os_errno_set+0x110>
		errno = ENETUNREACH;
   233a0:	f01c fa86 	bl	3f8b0 <__errno>
   233a4:	2372      	movs	r3, #114	; 0x72
   233a6:	e7d9      	b.n	2335c <bsd_os_errno_set+0x110>
		errno = ECONNRESET;
   233a8:	f01c fa82 	bl	3f8b0 <__errno>
   233ac:	2368      	movs	r3, #104	; 0x68
   233ae:	e7d5      	b.n	2335c <bsd_os_errno_set+0x110>
		errno = EISCONN;
   233b0:	f01c fa7e 	bl	3f8b0 <__errno>
   233b4:	237f      	movs	r3, #127	; 0x7f
   233b6:	e7d1      	b.n	2335c <bsd_os_errno_set+0x110>
		errno = ETIMEDOUT;
   233b8:	f01c fa7a 	bl	3f8b0 <__errno>
   233bc:	2374      	movs	r3, #116	; 0x74
   233be:	e7cd      	b.n	2335c <bsd_os_errno_set+0x110>
		errno = EHOSTDOWN;
   233c0:	f01c fa76 	bl	3f8b0 <__errno>
   233c4:	2375      	movs	r3, #117	; 0x75
   233c6:	e7c9      	b.n	2335c <bsd_os_errno_set+0x110>
		errno = EINPROGRESS;
   233c8:	f01c fa72 	bl	3f8b0 <__errno>
   233cc:	2377      	movs	r3, #119	; 0x77
   233ce:	e7c5      	b.n	2335c <bsd_os_errno_set+0x110>
		errno = ECANCELED;
   233d0:	f01c fa6e 	bl	3f8b0 <__errno>
   233d4:	238c      	movs	r3, #140	; 0x8c
   233d6:	e7c1      	b.n	2335c <bsd_os_errno_set+0x110>
		errno = ENOKEY;
   233d8:	f01c fa6a 	bl	3f8b0 <__errno>
   233dc:	f240 73d1 	movw	r3, #2001	; 0x7d1
   233e0:	e7bc      	b.n	2335c <bsd_os_errno_set+0x110>
		errno = EKEYEXPIRED;
   233e2:	f01c fa65 	bl	3f8b0 <__errno>
   233e6:	f240 73d2 	movw	r3, #2002	; 0x7d2
   233ea:	e7b7      	b.n	2335c <bsd_os_errno_set+0x110>
		errno = EKEYREVOKED;
   233ec:	f01c fa60 	bl	3f8b0 <__errno>
   233f0:	f240 73d3 	movw	r3, #2003	; 0x7d3
   233f4:	e7b2      	b.n	2335c <bsd_os_errno_set+0x110>
		errno = EMSGSIZE;
   233f6:	f01c fa5b 	bl	3f8b0 <__errno>
   233fa:	237a      	movs	r3, #122	; 0x7a
   233fc:	e7ae      	b.n	2335c <bsd_os_errno_set+0x110>
   233fe:	bf00      	nop
   23400:	0004701c 	.word	0x0004701c
   23404:	0004a2c3 	.word	0x0004a2c3
   23408:	00045316 	.word	0x00045316
   2340c:	00047061 	.word	0x00047061
   23410:	00042fb4 	.word	0x00042fb4
   23414:	00042fdc 	.word	0x00042fdc
   23418:	00047088 	.word	0x00047088
   2341c:	baadbaad 	.word	0xbaadbaad

00023420 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   23420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   23424:	4b01      	ldr	r3, [pc, #4]	; (2342c <bsd_os_application_irq_set+0xc>)
   23426:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   2342a:	4770      	bx	lr
   2342c:	e000e100 	.word	0xe000e100

00023430 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   23430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   23434:	4b01      	ldr	r3, [pc, #4]	; (2343c <bsd_os_application_irq_clear+0xc>)
   23436:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   2343a:	4770      	bx	lr
   2343c:	e000e100 	.word	0xe000e100

00023440 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   23440:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   23444:	4b01      	ldr	r3, [pc, #4]	; (2344c <bsd_os_trace_irq_set+0xc>)
   23446:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   2344a:	4770      	bx	lr
   2344c:	e000e100 	.word	0xe000e100

00023450 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   23450:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   23454:	4b01      	ldr	r3, [pc, #4]	; (2345c <bsd_os_trace_irq_clear+0xc>)
   23456:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   2345a:	4770      	bx	lr
   2345c:	e000e100 	.word	0xe000e100

00023460 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   23460:	b508      	push	{r3, lr}
	list->head = NULL;
   23462:	2300      	movs	r3, #0
   23464:	4a07      	ldr	r2, [pc, #28]	; (23484 <bsd_os_init+0x24>)
	list->tail = NULL;
   23466:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2346a:	4a07      	ldr	r2, [pc, #28]	; (23488 <bsd_os_init+0x28>)
   2346c:	e8d2 1fef 	ldaex	r1, [r2]
   23470:	e8c2 3fe0 	stlex	r0, r3, [r2]
   23474:	2800      	cmp	r0, #0
   23476:	d1f9      	bne.n	2346c <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   23478:	f01d fa0a 	bl	40890 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   2347c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   23480:	f01d b9fb 	b.w	4087a <trace_task_create>
   23484:	200239d0 	.word	0x200239d0
   23488:	200239cc 	.word	0x200239cc

0002348c <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   2348c:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   23490:	d03c      	beq.n	2350c <z_to_nrf_optname+0x80>
   23492:	dc04      	bgt.n	2349e <z_to_nrf_optname+0x12>
   23494:	2801      	cmp	r0, #1
   23496:	d044      	beq.n	23522 <z_to_nrf_optname+0x96>
			break;
		}
		break;

	default:
		retval = -1;
   23498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		break;
	}

	return retval;
}
   2349c:	4770      	bx	lr
	switch (z_in_level) {
   2349e:	f240 2302 	movw	r3, #514	; 0x202
   234a2:	4298      	cmp	r0, r3
   234a4:	d052      	beq.n	2354c <z_to_nrf_optname+0xc0>
   234a6:	f240 2303 	movw	r3, #515	; 0x203
   234aa:	4298      	cmp	r0, r3
   234ac:	d1f4      	bne.n	23498 <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
   234ae:	3901      	subs	r1, #1
   234b0:	2913      	cmp	r1, #19
   234b2:	d8f1      	bhi.n	23498 <z_to_nrf_optname+0xc>
   234b4:	a301      	add	r3, pc, #4	; (adr r3, 234bc <z_to_nrf_optname+0x30>)
   234b6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   234ba:	bf00      	nop
   234bc:	00023559 	.word	0x00023559
   234c0:	0002351d 	.word	0x0002351d
   234c4:	0002353d 	.word	0x0002353d
   234c8:	0002352f 	.word	0x0002352f
   234cc:	00023541 	.word	0x00023541
   234d0:	00023545 	.word	0x00023545
   234d4:	00023549 	.word	0x00023549
   234d8:	00023499 	.word	0x00023499
   234dc:	00023499 	.word	0x00023499
   234e0:	00023499 	.word	0x00023499
   234e4:	00023499 	.word	0x00023499
   234e8:	00023499 	.word	0x00023499
   234ec:	00023499 	.word	0x00023499
   234f0:	00023499 	.word	0x00023499
   234f4:	00023499 	.word	0x00023499
   234f8:	00023499 	.word	0x00023499
   234fc:	00023499 	.word	0x00023499
   23500:	00023499 	.word	0x00023499
   23504:	00023499 	.word	0x00023499
   23508:	00023533 	.word	0x00023533
		switch (z_in_optname) {
   2350c:	3901      	subs	r1, #1
   2350e:	2905      	cmp	r1, #5
   23510:	d8c2      	bhi.n	23498 <z_to_nrf_optname+0xc>
   23512:	e8df f001 	tbb	[pc, r1]
   23516:	1503      	.short	0x1503
   23518:	210c1917 	.word	0x210c1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   2351c:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   2351e:	6013      	str	r3, [r2, #0]
   23520:	e00a      	b.n	23538 <z_to_nrf_optname+0xac>
		switch (z_in_optname) {
   23522:	2914      	cmp	r1, #20
   23524:	d005      	beq.n	23532 <z_to_nrf_optname+0xa6>
   23526:	2919      	cmp	r1, #25
   23528:	d005      	beq.n	23536 <z_to_nrf_optname+0xaa>
   2352a:	2904      	cmp	r1, #4
   2352c:	d1b4      	bne.n	23498 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   2352e:	2304      	movs	r3, #4
   23530:	e7f5      	b.n	2351e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   23532:	2314      	movs	r3, #20
   23534:	e7f3      	b.n	2351e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   23536:	6011      	str	r1, [r2, #0]
	int retval = 0;
   23538:	2000      	movs	r0, #0
			break;
   2353a:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   2353c:	2303      	movs	r3, #3
   2353e:	e7ee      	b.n	2351e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   23540:	2305      	movs	r3, #5
   23542:	e7ec      	b.n	2351e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   23544:	2306      	movs	r3, #6
   23546:	e7ea      	b.n	2351e <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   23548:	2307      	movs	r3, #7
   2354a:	e7e8      	b.n	2351e <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   2354c:	2902      	cmp	r1, #2
   2354e:	d0e5      	beq.n	2351c <z_to_nrf_optname+0x90>
   23550:	2903      	cmp	r1, #3
   23552:	d0f3      	beq.n	2353c <z_to_nrf_optname+0xb0>
   23554:	2901      	cmp	r1, #1
   23556:	d19f      	bne.n	23498 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   23558:	2301      	movs	r3, #1
   2355a:	e7e0      	b.n	2351e <z_to_nrf_optname+0x92>

0002355c <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   2355c:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   2355e:	4b03      	ldr	r3, [pc, #12]	; (2356c <nrf91_socket_iface_init+0x10>)
   23560:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   23562:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
   23564:	4802      	ldr	r0, [pc, #8]	; (23570 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   23566:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
   23568:	f7fc bbda 	b.w	1fd20 <socket_offload_register>
   2356c:	20023a28 	.word	0x20023a28
   23570:	00043514 	.word	0x00043514

00023574 <dk_set_leds_state.part.7>:
int dk_set_leds(u32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(u32_t leds_on_mask, u32_t leds_off_mask)
   23574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23578:	4606      	mov	r6, r0
   2357a:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   2357c:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_write(led_devs[i],
   2357e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 235e8 <dk_set_leds_state.part.7+0x74>
						 led_pins[i].number, val);
   23582:	f8df 9068 	ldr.w	r9, [pc, #104]	; 235ec <dk_set_leds_state.part.7+0x78>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   23586:	fa26 f304 	lsr.w	r3, r6, r4
   2358a:	fa27 f204 	lsr.w	r2, r7, r4
   2358e:	431a      	orrs	r2, r3
   23590:	07d2      	lsls	r2, r2, #31
   23592:	d51d      	bpl.n	235d0 <dk_set_leds_state.part.7+0x5c>
						 led_pins[i].number, val);
   23594:	eb09 02c4 	add.w	r2, r9, r4, lsl #3
			int err = gpio_pin_write(led_devs[i],
   23598:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
   2359c:	7912      	ldrb	r2, [r2, #4]
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
   2359e:	6841      	ldr	r1, [r0, #4]
   235a0:	f003 0301 	and.w	r3, r3, #1
   235a4:	684d      	ldr	r5, [r1, #4]
   235a6:	2100      	movs	r1, #0
   235a8:	47a8      	blx	r5
			if (err) {
   235aa:	4605      	mov	r5, r0
   235ac:	b180      	cbz	r0, 235d0 <dk_set_leds_state.part.7+0x5c>
				LOG_ERR("Cannot write LED gpio");
   235ae:	2301      	movs	r3, #1
   235b0:	f04f 0000 	mov.w	r0, #0
   235b4:	4a09      	ldr	r2, [pc, #36]	; (235dc <dk_set_leds_state.part.7+0x68>)
   235b6:	f363 0007 	bfi	r0, r3, #0, #8
   235ba:	4b09      	ldr	r3, [pc, #36]	; (235e0 <dk_set_leds_state.part.7+0x6c>)
   235bc:	4909      	ldr	r1, [pc, #36]	; (235e4 <dk_set_leds_state.part.7+0x70>)
   235be:	1a9b      	subs	r3, r3, r2
   235c0:	08db      	lsrs	r3, r3, #3
   235c2:	f363 108f 	bfi	r0, r3, #6, #10
   235c6:	f01b ff5c 	bl	3f482 <log_string_sync>
			}
		}
	}

	return 0;
}
   235ca:	4628      	mov	r0, r5
   235cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   235d0:	3401      	adds	r4, #1
   235d2:	2c04      	cmp	r4, #4
   235d4:	d1d7      	bne.n	23586 <dk_set_leds_state.part.7+0x12>
	return 0;
   235d6:	2500      	movs	r5, #0
   235d8:	e7f7      	b.n	235ca <dk_set_leds_state.part.7+0x56>
   235da:	bf00      	nop
   235dc:	00042fb4 	.word	0x00042fb4
   235e0:	0004300c 	.word	0x0004300c
   235e4:	0004721b 	.word	0x0004721b
   235e8:	20023a90 	.word	0x20023a90
   235ec:	00043574 	.word	0x00043574

000235f0 <button_pressed>:
{
   235f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   235f2:	f04f 0320 	mov.w	r3, #32
   235f6:	f3ef 8511 	mrs	r5, BASEPRI
   235fa:	f383 8811 	msr	BASEPRI, r3
   235fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   23602:	4832      	ldr	r0, [pc, #200]	; (236cc <button_pressed+0xdc>)
   23604:	f017 fd3e 	bl	3b084 <z_spin_lock_valid>
   23608:	b960      	cbnz	r0, 23624 <button_pressed+0x34>
   2360a:	4931      	ldr	r1, [pc, #196]	; (236d0 <button_pressed+0xe0>)
   2360c:	234f      	movs	r3, #79	; 0x4f
   2360e:	4a31      	ldr	r2, [pc, #196]	; (236d4 <button_pressed+0xe4>)
   23610:	4831      	ldr	r0, [pc, #196]	; (236d8 <button_pressed+0xe8>)
   23612:	f01b ff18 	bl	3f446 <printk>
   23616:	4831      	ldr	r0, [pc, #196]	; (236dc <button_pressed+0xec>)
   23618:	f01b ff15 	bl	3f446 <printk>
   2361c:	214f      	movs	r1, #79	; 0x4f
   2361e:	482d      	ldr	r0, [pc, #180]	; (236d4 <button_pressed+0xe4>)
   23620:	f01b ff1e 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   23624:	4829      	ldr	r0, [pc, #164]	; (236cc <button_pressed+0xdc>)
   23626:	f017 fd4b 	bl	3b0c0 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   2362a:	2400      	movs	r4, #0
   2362c:	4e2c      	ldr	r6, [pc, #176]	; (236e0 <button_pressed+0xf0>)
			  button_pins[i].number);
   2362e:	4f2d      	ldr	r7, [pc, #180]	; (236e4 <button_pressed+0xf4>)
   23630:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
			err = gpio_pin_disable_callback(button_devs[i],
   23634:	f856 0b04 	ldr.w	r0, [r6], #4
   23638:	791a      	ldrb	r2, [r3, #4]
					      int access_op, u32_t pin)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->disable_callback == NULL) {
   2363a:	6843      	ldr	r3, [r0, #4]
   2363c:	695b      	ldr	r3, [r3, #20]
   2363e:	b1ab      	cbz	r3, 2366c <button_pressed+0x7c>
		return -ENOTSUP;
	}

	return api->disable_callback(port, access_op, pin);
   23640:	2100      	movs	r1, #0
   23642:	4798      	blx	r3
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   23644:	3401      	adds	r4, #1
   23646:	2c04      	cmp	r4, #4
   23648:	d013      	beq.n	23672 <button_pressed+0x82>
   2364a:	2800      	cmp	r0, #0
   2364c:	d0f0      	beq.n	23630 <button_pressed+0x40>
		LOG_ERR("Cannot disable callbacks");
   2364e:	2301      	movs	r3, #1
   23650:	f04f 0000 	mov.w	r0, #0
   23654:	4a24      	ldr	r2, [pc, #144]	; (236e8 <button_pressed+0xf8>)
   23656:	f363 0007 	bfi	r0, r3, #0, #8
   2365a:	4b24      	ldr	r3, [pc, #144]	; (236ec <button_pressed+0xfc>)
   2365c:	4924      	ldr	r1, [pc, #144]	; (236f0 <button_pressed+0x100>)
   2365e:	1a9b      	subs	r3, r3, r2
   23660:	08db      	lsrs	r3, r3, #3
   23662:	f363 108f 	bfi	r0, r3, #6, #10
   23666:	f01b ff0c 	bl	3f482 <log_string_sync>
   2366a:	e004      	b.n	23676 <button_pressed+0x86>
		return -ENOTSUP;
   2366c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   23670:	e7e8      	b.n	23644 <button_pressed+0x54>
	if (err) {
   23672:	2800      	cmp	r0, #0
   23674:	d1eb      	bne.n	2364e <button_pressed+0x5e>
	switch (state) {
   23676:	4b1f      	ldr	r3, [pc, #124]	; (236f4 <button_pressed+0x104>)
   23678:	781a      	ldrb	r2, [r3, #0]
   2367a:	b9da      	cbnz	r2, 236b4 <button_pressed+0xc4>
		state = STATE_SCANNING;
   2367c:	2201      	movs	r2, #1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2367e:	491e      	ldr	r1, [pc, #120]	; (236f8 <button_pressed+0x108>)
   23680:	481e      	ldr	r0, [pc, #120]	; (236fc <button_pressed+0x10c>)
   23682:	701a      	strb	r2, [r3, #0]
   23684:	f017 ff54 	bl	3b530 <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   23688:	4810      	ldr	r0, [pc, #64]	; (236cc <button_pressed+0xdc>)
   2368a:	f017 fd09 	bl	3b0a0 <z_spin_unlock_valid>
   2368e:	b960      	cbnz	r0, 236aa <button_pressed+0xba>
   23690:	491b      	ldr	r1, [pc, #108]	; (23700 <button_pressed+0x110>)
   23692:	2362      	movs	r3, #98	; 0x62
   23694:	4a0f      	ldr	r2, [pc, #60]	; (236d4 <button_pressed+0xe4>)
   23696:	4810      	ldr	r0, [pc, #64]	; (236d8 <button_pressed+0xe8>)
   23698:	f01b fed5 	bl	3f446 <printk>
   2369c:	4819      	ldr	r0, [pc, #100]	; (23704 <button_pressed+0x114>)
   2369e:	f01b fed2 	bl	3f446 <printk>
   236a2:	2162      	movs	r1, #98	; 0x62
   236a4:	480b      	ldr	r0, [pc, #44]	; (236d4 <button_pressed+0xe4>)
   236a6:	f01b fedb 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   236aa:	f385 8811 	msr	BASEPRI, r5
   236ae:	f3bf 8f6f 	isb	sy
}
   236b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   236b4:	23f2      	movs	r3, #242	; 0xf2
   236b6:	4a14      	ldr	r2, [pc, #80]	; (23708 <button_pressed+0x118>)
   236b8:	4914      	ldr	r1, [pc, #80]	; (2370c <button_pressed+0x11c>)
   236ba:	4807      	ldr	r0, [pc, #28]	; (236d8 <button_pressed+0xe8>)
   236bc:	f01b fec3 	bl	3f446 <printk>
   236c0:	21f2      	movs	r1, #242	; 0xf2
   236c2:	4811      	ldr	r0, [pc, #68]	; (23708 <button_pressed+0x118>)
   236c4:	f01b fecc 	bl	3f460 <assert_post_action>
		break;
   236c8:	e7de      	b.n	23688 <button_pressed+0x98>
   236ca:	bf00      	nop
   236cc:	20023aa0 	.word	0x20023aa0
   236d0:	00045d2d 	.word	0x00045d2d
   236d4:	00045d0e 	.word	0x00045d0e
   236d8:	00045316 	.word	0x00045316
   236dc:	00045d42 	.word	0x00045d42
   236e0:	20023a2c 	.word	0x20023a2c
   236e4:	00043554 	.word	0x00043554
   236e8:	00042fb4 	.word	0x00042fb4
   236ec:	0004300c 	.word	0x0004300c
   236f0:	000470c1 	.word	0x000470c1
   236f4:	2002adc4 	.word	0x2002adc4
   236f8:	20023a5c 	.word	0x20023a5c
   236fc:	2002a220 	.word	0x2002a220
   23700:	00045d57 	.word	0x00045d57
   23704:	00045d6e 	.word	0x00045d6e
   23708:	000470da 	.word	0x000470da
   2370c:	0004a2c3 	.word	0x0004a2c3

00023710 <buttons_scan_fn>:
{
   23710:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	u32_t ret = 0;
   23714:	2400      	movs	r4, #0
   23716:	4f6c      	ldr	r7, [pc, #432]	; (238c8 <buttons_scan_fn+0x1b8>)
			button_devs[i], button_pins[i].number, &val)) {
   23718:	f8df 9208 	ldr.w	r9, [pc, #520]	; 23924 <buttons_scan_fn+0x214>
{
   2371c:	463e      	mov	r6, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2371e:	4625      	mov	r5, r4
   23720:	46c8      	mov	r8, r9
			button_devs[i], button_pins[i].number, &val)) {
   23722:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
		if (gpio_pin_read(
   23726:	f856 0b04 	ldr.w	r0, [r6], #4
   2372a:	791a      	ldrb	r2, [r3, #4]
	return api->read(port, access_op, pin, value);
   2372c:	6843      	ldr	r3, [r0, #4]
   2372e:	2100      	movs	r1, #0
   23730:	f8d3 a008 	ldr.w	sl, [r3, #8]
   23734:	ab01      	add	r3, sp, #4
   23736:	47d0      	blx	sl
   23738:	2800      	cmp	r0, #0
   2373a:	d04b      	beq.n	237d4 <buttons_scan_fn+0xc4>
			LOG_ERR("Cannot read gpio pin");
   2373c:	2301      	movs	r3, #1
   2373e:	f04f 0000 	mov.w	r0, #0
   23742:	4a62      	ldr	r2, [pc, #392]	; (238cc <buttons_scan_fn+0x1bc>)
   23744:	f363 0007 	bfi	r0, r3, #0, #8
   23748:	4b61      	ldr	r3, [pc, #388]	; (238d0 <buttons_scan_fn+0x1c0>)
   2374a:	4962      	ldr	r1, [pc, #392]	; (238d4 <buttons_scan_fn+0x1c4>)
   2374c:	1a9b      	subs	r3, r3, r2
   2374e:	08db      	lsrs	r3, r3, #3
   23750:	f363 108f 	bfi	r0, r3, #6, #10
   23754:	f01b fe95 	bl	3f482 <log_string_sync>
			return 0;
   23758:	2400      	movs	r4, #0
   2375a:	4b5f      	ldr	r3, [pc, #380]	; (238d8 <buttons_scan_fn+0x1c8>)
   2375c:	e8d3 2fef 	ldaex	r2, [r3]
   23760:	e8c3 4fe1 	stlex	r1, r4, [r3]
   23764:	2900      	cmp	r1, #0
   23766:	d1f9      	bne.n	2375c <buttons_scan_fn+0x4c>
	if (!initial_run) {
   23768:	4b5c      	ldr	r3, [pc, #368]	; (238dc <buttons_scan_fn+0x1cc>)
   2376a:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 23928 <buttons_scan_fn+0x218>
   2376e:	781a      	ldrb	r2, [r3, #0]
   23770:	2a00      	cmp	r2, #0
   23772:	d141      	bne.n	237f8 <buttons_scan_fn+0xe8>
		if (button_scan != last_button_scan) {
   23774:	f8d9 6000 	ldr.w	r6, [r9]
   23778:	42a6      	cmp	r6, r4
   2377a:	d011      	beq.n	237a0 <buttons_scan_fn+0x90>
	if (button_handler_cb != NULL) {
   2377c:	4b58      	ldr	r3, [pc, #352]	; (238e0 <buttons_scan_fn+0x1d0>)
			u32_t has_changed = (button_scan ^ last_button_scan);
   2377e:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
   23780:	681b      	ldr	r3, [r3, #0]
   23782:	b113      	cbz	r3, 2378a <buttons_scan_fn+0x7a>
		button_handler_cb(button_state, has_changed);
   23784:	4631      	mov	r1, r6
   23786:	4620      	mov	r0, r4
   23788:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   2378a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2378e:	4855      	ldr	r0, [pc, #340]	; (238e4 <buttons_scan_fn+0x1d4>)
   23790:	f015 fffc 	bl	3978c <z_impl_k_mutex_lock>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   23794:	4b54      	ldr	r3, [pc, #336]	; (238e8 <buttons_scan_fn+0x1d8>)
   23796:	681d      	ldr	r5, [r3, #0]
   23798:	bb2d      	cbnz	r5, 237e6 <buttons_scan_fn+0xd6>
	z_impl_k_mutex_unlock(mutex);
   2379a:	4852      	ldr	r0, [pc, #328]	; (238e4 <buttons_scan_fn+0x1d4>)
   2379c:	f016 f8d0 	bl	39940 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   237a0:	f8c9 4000 	str.w	r4, [r9]
	if (button_scan != 0) {
   237a4:	b35c      	cbz	r4, 237fe <buttons_scan_fn+0xee>
   237a6:	220a      	movs	r2, #10
   237a8:	4950      	ldr	r1, [pc, #320]	; (238ec <buttons_scan_fn+0x1dc>)
   237aa:	4851      	ldr	r0, [pc, #324]	; (238f0 <buttons_scan_fn+0x1e0>)
   237ac:	f017 fec0 	bl	3b530 <k_delayed_work_submit_to_queue>
		if (err) {
   237b0:	b168      	cbz	r0, 237ce <buttons_scan_fn+0xbe>
			LOG_ERR("Cannot add work to workqueue");
   237b2:	2301      	movs	r3, #1
   237b4:	f04f 0000 	mov.w	r0, #0
   237b8:	4a44      	ldr	r2, [pc, #272]	; (238cc <buttons_scan_fn+0x1bc>)
   237ba:	f363 0007 	bfi	r0, r3, #0, #8
   237be:	4b44      	ldr	r3, [pc, #272]	; (238d0 <buttons_scan_fn+0x1c0>)
   237c0:	494c      	ldr	r1, [pc, #304]	; (238f4 <buttons_scan_fn+0x1e4>)
   237c2:	1a9b      	subs	r3, r3, r2
   237c4:	08db      	lsrs	r3, r3, #3
   237c6:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Cannot enable callbacks");
   237ca:	f01b fe5a 	bl	3f482 <log_string_sync>
}
   237ce:	b002      	add	sp, #8
   237d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   237d4:	9b01      	ldr	r3, [sp, #4]
   237d6:	b913      	cbnz	r3, 237de <buttons_scan_fn+0xce>
			ret |= 1U << i;
   237d8:	2301      	movs	r3, #1
   237da:	40ab      	lsls	r3, r5
   237dc:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   237de:	3501      	adds	r5, #1
   237e0:	2d04      	cmp	r5, #4
   237e2:	d19e      	bne.n	23722 <buttons_scan_fn+0x12>
   237e4:	e7b9      	b.n	2375a <buttons_scan_fn+0x4a>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   237e6:	3d04      	subs	r5, #4
   237e8:	2d00      	cmp	r5, #0
   237ea:	d0d6      	beq.n	2379a <buttons_scan_fn+0x8a>
			handler->cb(button_state, has_changed);
   237ec:	682b      	ldr	r3, [r5, #0]
   237ee:	4631      	mov	r1, r6
   237f0:	4620      	mov	r0, r4
   237f2:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   237f4:	686d      	ldr	r5, [r5, #4]
	return node->next;
   237f6:	e7cf      	b.n	23798 <buttons_scan_fn+0x88>
		initial_run = false;
   237f8:	2200      	movs	r2, #0
   237fa:	701a      	strb	r2, [r3, #0]
   237fc:	e7d0      	b.n	237a0 <buttons_scan_fn+0x90>
	__asm__ volatile(
   237fe:	f04f 0320 	mov.w	r3, #32
   23802:	f3ef 8611 	mrs	r6, BASEPRI
   23806:	f383 8811 	msr	BASEPRI, r3
   2380a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   2380e:	483a      	ldr	r0, [pc, #232]	; (238f8 <buttons_scan_fn+0x1e8>)
   23810:	f017 fc38 	bl	3b084 <z_spin_lock_valid>
   23814:	b960      	cbnz	r0, 23830 <buttons_scan_fn+0x120>
   23816:	4939      	ldr	r1, [pc, #228]	; (238fc <buttons_scan_fn+0x1ec>)
   23818:	234f      	movs	r3, #79	; 0x4f
   2381a:	4a39      	ldr	r2, [pc, #228]	; (23900 <buttons_scan_fn+0x1f0>)
   2381c:	4839      	ldr	r0, [pc, #228]	; (23904 <buttons_scan_fn+0x1f4>)
   2381e:	f01b fe12 	bl	3f446 <printk>
   23822:	4839      	ldr	r0, [pc, #228]	; (23908 <buttons_scan_fn+0x1f8>)
   23824:	f01b fe0f 	bl	3f446 <printk>
   23828:	214f      	movs	r1, #79	; 0x4f
   2382a:	4835      	ldr	r0, [pc, #212]	; (23900 <buttons_scan_fn+0x1f0>)
   2382c:	f01b fe18 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   23830:	4831      	ldr	r0, [pc, #196]	; (238f8 <buttons_scan_fn+0x1e8>)
   23832:	f017 fc45 	bl	3b0c0 <z_spin_lock_set_owner>
		switch (state) {
   23836:	4b35      	ldr	r3, [pc, #212]	; (2390c <buttons_scan_fn+0x1fc>)
   23838:	781a      	ldrb	r2, [r3, #0]
   2383a:	2a01      	cmp	r2, #1
   2383c:	d138      	bne.n	238b0 <buttons_scan_fn+0x1a0>
			state = STATE_WAITING;
   2383e:	2200      	movs	r2, #0
   23840:	701a      	strb	r2, [r3, #0]
			  button_pins[i].number);
   23842:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
			err = gpio_pin_enable_callback(button_devs[i],
   23846:	f857 0b04 	ldr.w	r0, [r7], #4
   2384a:	791a      	ldrb	r2, [r3, #4]
	if (api->enable_callback == NULL) {
   2384c:	6843      	ldr	r3, [r0, #4]
   2384e:	691b      	ldr	r3, [r3, #16]
   23850:	b35b      	cbz	r3, 238aa <buttons_scan_fn+0x19a>
	return api->enable_callback(port, access_op, pin);
   23852:	2100      	movs	r1, #0
   23854:	4798      	blx	r3
   23856:	4605      	mov	r5, r0
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   23858:	3401      	adds	r4, #1
   2385a:	2c04      	cmp	r4, #4
   2385c:	d001      	beq.n	23862 <buttons_scan_fn+0x152>
   2385e:	2d00      	cmp	r5, #0
   23860:	d0ef      	beq.n	23842 <buttons_scan_fn+0x132>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   23862:	4825      	ldr	r0, [pc, #148]	; (238f8 <buttons_scan_fn+0x1e8>)
   23864:	f017 fc1c 	bl	3b0a0 <z_spin_unlock_valid>
   23868:	b960      	cbnz	r0, 23884 <buttons_scan_fn+0x174>
   2386a:	4929      	ldr	r1, [pc, #164]	; (23910 <buttons_scan_fn+0x200>)
   2386c:	2362      	movs	r3, #98	; 0x62
   2386e:	4a24      	ldr	r2, [pc, #144]	; (23900 <buttons_scan_fn+0x1f0>)
   23870:	4824      	ldr	r0, [pc, #144]	; (23904 <buttons_scan_fn+0x1f4>)
   23872:	f01b fde8 	bl	3f446 <printk>
   23876:	4827      	ldr	r0, [pc, #156]	; (23914 <buttons_scan_fn+0x204>)
   23878:	f01b fde5 	bl	3f446 <printk>
   2387c:	2162      	movs	r1, #98	; 0x62
   2387e:	4820      	ldr	r0, [pc, #128]	; (23900 <buttons_scan_fn+0x1f0>)
   23880:	f01b fdee 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   23884:	f386 8811 	msr	BASEPRI, r6
   23888:	f3bf 8f6f 	isb	sy
		if (err) {
   2388c:	2d00      	cmp	r5, #0
   2388e:	d09e      	beq.n	237ce <buttons_scan_fn+0xbe>
			LOG_ERR("Cannot enable callbacks");
   23890:	2301      	movs	r3, #1
   23892:	f04f 0000 	mov.w	r0, #0
   23896:	4a0d      	ldr	r2, [pc, #52]	; (238cc <buttons_scan_fn+0x1bc>)
   23898:	f363 0007 	bfi	r0, r3, #0, #8
   2389c:	4b0c      	ldr	r3, [pc, #48]	; (238d0 <buttons_scan_fn+0x1c0>)
   2389e:	491e      	ldr	r1, [pc, #120]	; (23918 <buttons_scan_fn+0x208>)
   238a0:	1a9b      	subs	r3, r3, r2
   238a2:	08db      	lsrs	r3, r3, #3
   238a4:	f363 108f 	bfi	r0, r3, #6, #10
   238a8:	e78f      	b.n	237ca <buttons_scan_fn+0xba>
		return -ENOTSUP;
   238aa:	f06f 0585 	mvn.w	r5, #133	; 0x85
   238ae:	e7d3      	b.n	23858 <buttons_scan_fn+0x148>
			__ASSERT_NO_MSG(false);
   238b0:	23a8      	movs	r3, #168	; 0xa8
   238b2:	4a1a      	ldr	r2, [pc, #104]	; (2391c <buttons_scan_fn+0x20c>)
   238b4:	491a      	ldr	r1, [pc, #104]	; (23920 <buttons_scan_fn+0x210>)
   238b6:	4813      	ldr	r0, [pc, #76]	; (23904 <buttons_scan_fn+0x1f4>)
   238b8:	f01b fdc5 	bl	3f446 <printk>
   238bc:	21a8      	movs	r1, #168	; 0xa8
   238be:	4817      	ldr	r0, [pc, #92]	; (2391c <buttons_scan_fn+0x20c>)
   238c0:	f01b fdce 	bl	3f460 <assert_post_action>
		int err = 0;
   238c4:	2500      	movs	r5, #0
   238c6:	e7cc      	b.n	23862 <buttons_scan_fn+0x152>
   238c8:	20023a2c 	.word	0x20023a2c
   238cc:	00042fb4 	.word	0x00042fb4
   238d0:	0004300c 	.word	0x0004300c
   238d4:	00047139 	.word	0x00047139
   238d8:	20023aa4 	.word	0x20023aa4
   238dc:	20031e64 	.word	0x20031e64
   238e0:	20023a3c 	.word	0x20023a3c
   238e4:	20023a40 	.word	0x20023a40
   238e8:	20023a54 	.word	0x20023a54
   238ec:	20023a5c 	.word	0x20023a5c
   238f0:	2002a220 	.word	0x2002a220
   238f4:	0004714e 	.word	0x0004714e
   238f8:	20023aa0 	.word	0x20023aa0
   238fc:	00045d2d 	.word	0x00045d2d
   23900:	00045d0e 	.word	0x00045d0e
   23904:	00045316 	.word	0x00045316
   23908:	00045d42 	.word	0x00045d42
   2390c:	2002adc4 	.word	0x2002adc4
   23910:	00045d57 	.word	0x00045d57
   23914:	00045d6e 	.word	0x00045d6e
   23918:	0004716b 	.word	0x0004716b
   2391c:	000470da 	.word	0x000470da
   23920:	0004a2c3 	.word	0x0004a2c3
   23924:	00043554 	.word	0x00043554
   23928:	20023a88 	.word	0x20023a88

0002392c <dk_leds_init>:
{
   2392c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   2392e:	2500      	movs	r5, #0
   23930:	4c1d      	ldr	r4, [pc, #116]	; (239a8 <dk_leds_init+0x7c>)
   23932:	4f1e      	ldr	r7, [pc, #120]	; (239ac <dk_leds_init+0x80>)
		led_devs[i] = device_get_binding(led_pins[i].port);
   23934:	6820      	ldr	r0, [r4, #0]
   23936:	f015 fa3f 	bl	38db8 <z_impl_device_get_binding>
   2393a:	f847 0b04 	str.w	r0, [r7], #4
		if (!led_devs[i]) {
   2393e:	b988      	cbnz	r0, 23964 <dk_leds_init+0x38>
			LOG_ERR("Cannot bind gpio device");
   23940:	2301      	movs	r3, #1
   23942:	f04f 0000 	mov.w	r0, #0
   23946:	4a1a      	ldr	r2, [pc, #104]	; (239b0 <dk_leds_init+0x84>)
   23948:	f363 0007 	bfi	r0, r3, #0, #8
   2394c:	4b19      	ldr	r3, [pc, #100]	; (239b4 <dk_leds_init+0x88>)
   2394e:	491a      	ldr	r1, [pc, #104]	; (239b8 <dk_leds_init+0x8c>)
   23950:	1a9b      	subs	r3, r3, r2
   23952:	08db      	lsrs	r3, r3, #3
   23954:	f363 108f 	bfi	r0, r3, #6, #10
   23958:	f01b fd93 	bl	3f482 <log_string_sync>
			return -ENODEV;
   2395c:	f06f 0612 	mvn.w	r6, #18
}
   23960:	4630      	mov	r0, r6
   23962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   23964:	7922      	ldrb	r2, [r4, #4]
	return api->config(port, access_op, pin, flags);
   23966:	6843      	ldr	r3, [r0, #4]
   23968:	2100      	movs	r1, #0
   2396a:	681e      	ldr	r6, [r3, #0]
   2396c:	2301      	movs	r3, #1
   2396e:	47b0      	blx	r6
		if (err) {
   23970:	4606      	mov	r6, r0
   23972:	b170      	cbz	r0, 23992 <dk_leds_init+0x66>
			LOG_ERR("Cannot configure LED gpio");
   23974:	2301      	movs	r3, #1
   23976:	f04f 0000 	mov.w	r0, #0
   2397a:	4a0d      	ldr	r2, [pc, #52]	; (239b0 <dk_leds_init+0x84>)
   2397c:	f363 0007 	bfi	r0, r3, #0, #8
   23980:	4b0c      	ldr	r3, [pc, #48]	; (239b4 <dk_leds_init+0x88>)
   23982:	490e      	ldr	r1, [pc, #56]	; (239bc <dk_leds_init+0x90>)
   23984:	1a9b      	subs	r3, r3, r2
   23986:	08db      	lsrs	r3, r3, #3
   23988:	f363 108f 	bfi	r0, r3, #6, #10
   2398c:	f01b fd79 	bl	3f482 <log_string_sync>
			return err;
   23990:	e7e6      	b.n	23960 <dk_leds_init+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   23992:	3501      	adds	r5, #1
   23994:	2d04      	cmp	r5, #4
   23996:	f104 0408 	add.w	r4, r4, #8
   2399a:	d1cb      	bne.n	23934 <dk_leds_init+0x8>
}
   2399c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   239a0:	210f      	movs	r1, #15
   239a2:	f7ff bde7 	b.w	23574 <dk_set_leds_state.part.7>
   239a6:	bf00      	nop
   239a8:	00043574 	.word	0x00043574
   239ac:	20023a90 	.word	0x20023a90
   239b0:	00042fb4 	.word	0x00042fb4
   239b4:	0004300c 	.word	0x0004300c
   239b8:	000471e9 	.word	0x000471e9
   239bc:	00047201 	.word	0x00047201

000239c0 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   239c0:	4b05      	ldr	r3, [pc, #20]	; (239d8 <dk_read_buttons+0x18>)
   239c2:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   239c6:	b100      	cbz	r0, 239ca <dk_read_buttons+0xa>
		*button_state = current_state;
   239c8:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   239ca:	4804      	ldr	r0, [pc, #16]	; (239dc <dk_read_buttons+0x1c>)
   239cc:	b111      	cbz	r1, 239d4 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   239ce:	6802      	ldr	r2, [r0, #0]
   239d0:	405a      	eors	r2, r3
   239d2:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   239d4:	6003      	str	r3, [r0, #0]
}
   239d6:	4770      	bx	lr
   239d8:	20023aa4 	.word	0x20023aa4
   239dc:	20023a8c 	.word	0x20023a8c

000239e0 <dk_buttons_init>:
{
   239e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   239e4:	4b66      	ldr	r3, [pc, #408]	; (23b80 <dk_buttons_init+0x1a0>)
   239e6:	6018      	str	r0, [r3, #0]
	z_impl_k_mutex_init(mutex);
   239e8:	4d66      	ldr	r5, [pc, #408]	; (23b84 <dk_buttons_init+0x1a4>)
   239ea:	4f67      	ldr	r7, [pc, #412]	; (23b88 <dk_buttons_init+0x1a8>)
   239ec:	4867      	ldr	r0, [pc, #412]	; (23b8c <dk_buttons_init+0x1ac>)
   239ee:	f01d fe79 	bl	416e4 <z_impl_k_mutex_init>
   239f2:	46b9      	mov	r9, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   239f4:	2600      	movs	r6, #0
   239f6:	46a8      	mov	r8, r5
		button_devs[i] = device_get_binding(button_pins[i].port);
   239f8:	6828      	ldr	r0, [r5, #0]
   239fa:	f015 f9dd 	bl	38db8 <z_impl_device_get_binding>
   239fe:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   23a02:	b990      	cbnz	r0, 23a2a <dk_buttons_init+0x4a>
			LOG_ERR("Cannot bind gpio device");
   23a04:	2301      	movs	r3, #1
   23a06:	f04f 0000 	mov.w	r0, #0
   23a0a:	4a61      	ldr	r2, [pc, #388]	; (23b90 <dk_buttons_init+0x1b0>)
   23a0c:	f363 0007 	bfi	r0, r3, #0, #8
   23a10:	4b60      	ldr	r3, [pc, #384]	; (23b94 <dk_buttons_init+0x1b4>)
   23a12:	4961      	ldr	r1, [pc, #388]	; (23b98 <dk_buttons_init+0x1b8>)
   23a14:	1a9b      	subs	r3, r3, r2
   23a16:	08db      	lsrs	r3, r3, #3
   23a18:	f363 108f 	bfi	r0, r3, #6, #10
   23a1c:	f01b fd31 	bl	3f482 <log_string_sync>
			return -ENODEV;
   23a20:	f06f 0412 	mvn.w	r4, #18
}
   23a24:	4620      	mov	r0, r4
   23a26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   23a2a:	792a      	ldrb	r2, [r5, #4]
   23a2c:	6843      	ldr	r3, [r0, #4]
   23a2e:	2100      	movs	r1, #0
   23a30:	681c      	ldr	r4, [r3, #0]
   23a32:	f44f 7380 	mov.w	r3, #256	; 0x100
   23a36:	47a0      	blx	r4
		if (err) {
   23a38:	4604      	mov	r4, r0
   23a3a:	b170      	cbz	r0, 23a5a <dk_buttons_init+0x7a>
			LOG_ERR("Cannot configure button gpio");
   23a3c:	2301      	movs	r3, #1
   23a3e:	f04f 0000 	mov.w	r0, #0
   23a42:	4a53      	ldr	r2, [pc, #332]	; (23b90 <dk_buttons_init+0x1b0>)
   23a44:	f363 0007 	bfi	r0, r3, #0, #8
   23a48:	4b52      	ldr	r3, [pc, #328]	; (23b94 <dk_buttons_init+0x1b4>)
   23a4a:	4954      	ldr	r1, [pc, #336]	; (23b9c <dk_buttons_init+0x1bc>)
   23a4c:	1a9b      	subs	r3, r3, r2
   23a4e:	08db      	lsrs	r3, r3, #3
   23a50:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Cannot add work to workqueue");
   23a54:	f01b fd15 	bl	3f482 <log_string_sync>
		return err;
   23a58:	e7e4      	b.n	23a24 <dk_buttons_init+0x44>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   23a5a:	3601      	adds	r6, #1
   23a5c:	2e04      	cmp	r6, #4
   23a5e:	f105 0508 	add.w	r5, r5, #8
   23a62:	d1c9      	bne.n	239f8 <dk_buttons_init+0x18>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   23a64:	4605      	mov	r5, r0
   23a66:	4e48      	ldr	r6, [pc, #288]	; (23b88 <dk_buttons_init+0x1a8>)
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   23a68:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
   23a6c:	f856 0b04 	ldr.w	r0, [r6], #4
   23a70:	791a      	ldrb	r2, [r3, #4]
   23a72:	6843      	ldr	r3, [r0, #4]
   23a74:	2100      	movs	r1, #0
   23a76:	681c      	ldr	r4, [r3, #0]
   23a78:	f44f 7381 	mov.w	r3, #258	; 0x102
   23a7c:	47a0      	blx	r4
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   23a7e:	3501      	adds	r5, #1
   23a80:	2d04      	cmp	r5, #4
   23a82:	4604      	mov	r4, r0
   23a84:	d00e      	beq.n	23aa4 <dk_buttons_init+0xc4>
   23a86:	2800      	cmp	r0, #0
   23a88:	d0ee      	beq.n	23a68 <dk_buttons_init+0x88>
		LOG_ERR("Cannot set interrupt mode");
   23a8a:	2301      	movs	r3, #1
   23a8c:	f04f 0000 	mov.w	r0, #0
   23a90:	4a3f      	ldr	r2, [pc, #252]	; (23b90 <dk_buttons_init+0x1b0>)
   23a92:	f363 0007 	bfi	r0, r3, #0, #8
   23a96:	4b3f      	ldr	r3, [pc, #252]	; (23b94 <dk_buttons_init+0x1b4>)
   23a98:	4941      	ldr	r1, [pc, #260]	; (23ba0 <dk_buttons_init+0x1c0>)
   23a9a:	1a9b      	subs	r3, r3, r2
   23a9c:	08db      	lsrs	r3, r3, #3
   23a9e:	f363 108f 	bfi	r0, r3, #6, #10
   23aa2:	e7d7      	b.n	23a54 <dk_buttons_init+0x74>
	if (err) {
   23aa4:	2800      	cmp	r0, #0
   23aa6:	d1f0      	bne.n	23a8a <dk_buttons_init+0xaa>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   23aa8:	4605      	mov	r5, r0
	u32_t pin_mask = 0;
   23aaa:	4681      	mov	r9, r0
		pin_mask |= BIT(button_pins[i].number);
   23aac:	f04f 0b01 	mov.w	fp, #1
   23ab0:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 23b88 <dk_buttons_init+0x1a8>
			button_pins[i].number);
   23ab4:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
		err = gpio_pin_disable_callback(button_devs[i],
   23ab8:	f85a 0b04 	ldr.w	r0, [sl], #4
			button_pins[i].number);
   23abc:	791e      	ldrb	r6, [r3, #4]
	if (api->disable_callback == NULL) {
   23abe:	6843      	ldr	r3, [r0, #4]
   23ac0:	695b      	ldr	r3, [r3, #20]
   23ac2:	b18b      	cbz	r3, 23ae8 <dk_buttons_init+0x108>
	return api->disable_callback(port, access_op, pin);
   23ac4:	4632      	mov	r2, r6
   23ac6:	2100      	movs	r1, #0
   23ac8:	4798      	blx	r3
		if (err) {
   23aca:	4604      	mov	r4, r0
   23acc:	b178      	cbz	r0, 23aee <dk_buttons_init+0x10e>
			LOG_ERR("Cannot disable callbacks()");
   23ace:	2301      	movs	r3, #1
   23ad0:	f04f 0000 	mov.w	r0, #0
   23ad4:	4a2e      	ldr	r2, [pc, #184]	; (23b90 <dk_buttons_init+0x1b0>)
   23ad6:	f363 0007 	bfi	r0, r3, #0, #8
   23ada:	4b2e      	ldr	r3, [pc, #184]	; (23b94 <dk_buttons_init+0x1b4>)
   23adc:	4931      	ldr	r1, [pc, #196]	; (23ba4 <dk_buttons_init+0x1c4>)
   23ade:	1a9b      	subs	r3, r3, r2
   23ae0:	08db      	lsrs	r3, r3, #3
   23ae2:	f363 108f 	bfi	r0, r3, #6, #10
   23ae6:	e7b5      	b.n	23a54 <dk_buttons_init+0x74>
		return -ENOTSUP;
   23ae8:	f06f 0485 	mvn.w	r4, #133	; 0x85
   23aec:	e7ef      	b.n	23ace <dk_buttons_init+0xee>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   23aee:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   23af0:	fa0b f606 	lsl.w	r6, fp, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   23af4:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   23af6:	ea49 0906 	orr.w	r9, r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   23afa:	d1db      	bne.n	23ab4 <dk_buttons_init+0xd4>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   23afc:	4606      	mov	r6, r0
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   23afe:	4d2a      	ldr	r5, [pc, #168]	; (23ba8 <dk_buttons_init+0x1c8>)
   23b00:	4b2a      	ldr	r3, [pc, #168]	; (23bac <dk_buttons_init+0x1cc>)
	callback->pin_mask = pin_mask;
   23b02:	e9c5 3901 	strd	r3, r9, [r5, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   23b06:	f857 0b04 	ldr.w	r0, [r7], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
   23b0a:	6843      	ldr	r3, [r0, #4]
   23b0c:	68db      	ldr	r3, [r3, #12]
   23b0e:	b18b      	cbz	r3, 23b34 <dk_buttons_init+0x154>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   23b10:	2201      	movs	r2, #1
   23b12:	4629      	mov	r1, r5
   23b14:	4798      	blx	r3
		if (err) {
   23b16:	4604      	mov	r4, r0
   23b18:	b178      	cbz	r0, 23b3a <dk_buttons_init+0x15a>
			LOG_ERR("Cannot add callback");
   23b1a:	2301      	movs	r3, #1
   23b1c:	f04f 0000 	mov.w	r0, #0
   23b20:	4a1b      	ldr	r2, [pc, #108]	; (23b90 <dk_buttons_init+0x1b0>)
   23b22:	f363 0007 	bfi	r0, r3, #0, #8
   23b26:	4b1b      	ldr	r3, [pc, #108]	; (23b94 <dk_buttons_init+0x1b4>)
   23b28:	4921      	ldr	r1, [pc, #132]	; (23bb0 <dk_buttons_init+0x1d0>)
   23b2a:	1a9b      	subs	r3, r3, r2
   23b2c:	08db      	lsrs	r3, r3, #3
   23b2e:	f363 108f 	bfi	r0, r3, #6, #10
   23b32:	e78f      	b.n	23a54 <dk_buttons_init+0x74>
		return -ENOTSUP;
   23b34:	f06f 0485 	mvn.w	r4, #133	; 0x85
   23b38:	e7ef      	b.n	23b1a <dk_buttons_init+0x13a>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   23b3a:	3601      	adds	r6, #1
   23b3c:	2e04      	cmp	r6, #4
   23b3e:	d1e2      	bne.n	23b06 <dk_buttons_init+0x126>
	k_delayed_work_init(&buttons_scan, buttons_scan_fn);
   23b40:	491c      	ldr	r1, [pc, #112]	; (23bb4 <dk_buttons_init+0x1d4>)
   23b42:	481d      	ldr	r0, [pc, #116]	; (23bb8 <dk_buttons_init+0x1d8>)
   23b44:	f01d fea3 	bl	4188e <k_delayed_work_init>
	state = STATE_SCANNING;
   23b48:	2201      	movs	r2, #1
   23b4a:	4b1c      	ldr	r3, [pc, #112]	; (23bbc <dk_buttons_init+0x1dc>)
   23b4c:	491a      	ldr	r1, [pc, #104]	; (23bb8 <dk_buttons_init+0x1d8>)
   23b4e:	701a      	strb	r2, [r3, #0]
   23b50:	481b      	ldr	r0, [pc, #108]	; (23bc0 <dk_buttons_init+0x1e0>)
   23b52:	4622      	mov	r2, r4
   23b54:	f017 fcec 	bl	3b530 <k_delayed_work_submit_to_queue>
	if (err) {
   23b58:	4604      	mov	r4, r0
   23b5a:	b160      	cbz	r0, 23b76 <dk_buttons_init+0x196>
		LOG_ERR("Cannot add work to workqueue");
   23b5c:	2301      	movs	r3, #1
   23b5e:	f04f 0000 	mov.w	r0, #0
   23b62:	4a0b      	ldr	r2, [pc, #44]	; (23b90 <dk_buttons_init+0x1b0>)
   23b64:	f363 0007 	bfi	r0, r3, #0, #8
   23b68:	4b0a      	ldr	r3, [pc, #40]	; (23b94 <dk_buttons_init+0x1b4>)
   23b6a:	4916      	ldr	r1, [pc, #88]	; (23bc4 <dk_buttons_init+0x1e4>)
   23b6c:	1a9b      	subs	r3, r3, r2
   23b6e:	08db      	lsrs	r3, r3, #3
   23b70:	f363 108f 	bfi	r0, r3, #6, #10
   23b74:	e76e      	b.n	23a54 <dk_buttons_init+0x74>
	dk_read_buttons(NULL, NULL);
   23b76:	4601      	mov	r1, r0
   23b78:	f7ff ff22 	bl	239c0 <dk_read_buttons>
	return 0;
   23b7c:	e752      	b.n	23a24 <dk_buttons_init+0x44>
   23b7e:	bf00      	nop
   23b80:	20023a3c 	.word	0x20023a3c
   23b84:	00043554 	.word	0x00043554
   23b88:	20023a2c 	.word	0x20023a2c
   23b8c:	20023a40 	.word	0x20023a40
   23b90:	00042fb4 	.word	0x00042fb4
   23b94:	0004300c 	.word	0x0004300c
   23b98:	000471e9 	.word	0x000471e9
   23b9c:	00047183 	.word	0x00047183
   23ba0:	000471a0 	.word	0x000471a0
   23ba4:	000471ba 	.word	0x000471ba
   23ba8:	20023a7c 	.word	0x20023a7c
   23bac:	000235f1 	.word	0x000235f1
   23bb0:	000471d5 	.word	0x000471d5
   23bb4:	00023711 	.word	0x00023711
   23bb8:	20023a5c 	.word	0x20023a5c
   23bbc:	2002adc4 	.word	0x2002adc4
   23bc0:	2002a220 	.word	0x2002a220
   23bc4:	0004714e 	.word	0x0004714e

00023bc8 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   23bc8:	4b0b      	ldr	r3, [pc, #44]	; (23bf8 <find_node+0x30>)
{
   23bca:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   23bcc:	681b      	ldr	r3, [r3, #0]
   23bce:	b153      	cbz	r3, 23be6 <find_node+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   23bd0:	2500      	movs	r5, #0
   23bd2:	461c      	mov	r4, r3
   23bd4:	681b      	ldr	r3, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   23bd6:	6866      	ldr	r6, [r4, #4]
   23bd8:	428e      	cmp	r6, r1
   23bda:	d106      	bne.n	23bea <find_node+0x22>
   23bdc:	68a6      	ldr	r6, [r4, #8]
   23bde:	4296      	cmp	r6, r2
   23be0:	d103      	bne.n	23bea <find_node+0x22>
			*prev_out = prev;
			return curr;
   23be2:	4623      	mov	r3, r4
			*prev_out = prev;
   23be4:	6005      	str	r5, [r0, #0]
		}
		prev = curr;
	}
	return NULL;
}
   23be6:	4618      	mov	r0, r3
   23be8:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   23bea:	2b00      	cmp	r3, #0
   23bec:	d0fb      	beq.n	23be6 <find_node+0x1e>
   23bee:	4625      	mov	r5, r4
   23bf0:	461c      	mov	r4, r3
   23bf2:	681b      	ldr	r3, [r3, #0]
   23bf4:	e7ef      	b.n	23bd6 <find_node+0xe>
   23bf6:	bf00      	nop
   23bf8:	20023aa8 	.word	0x20023aa8

00023bfc <module_init>:

	k_mutex_unlock(&list_mtx);
}

static int module_init(struct device *dev)
{
   23bfc:	b510      	push	{r4, lr}
	list->head = NULL;
   23bfe:	2400      	movs	r4, #0
   23c00:	4b03      	ldr	r3, [pc, #12]	; (23c10 <module_init+0x14>)
	ARG_UNUSED(dev);

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
   23c02:	4804      	ldr	r0, [pc, #16]	; (23c14 <module_init+0x18>)
	list->tail = NULL;
   23c04:	e9c3 4400 	strd	r4, r4, [r3]
   23c08:	f005 f8e8 	bl	28ddc <at_cmd_set_notification_handler>
	return 0;
}
   23c0c:	4620      	mov	r0, r4
   23c0e:	bd10      	pop	{r4, pc}
   23c10:	20023aa8 	.word	0x20023aa8
   23c14:	00023c19 	.word	0x00023c19

00023c18 <notif_dispatch>:
{
   23c18:	b538      	push	{r3, r4, r5, lr}
   23c1a:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   23c1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23c20:	480a      	ldr	r0, [pc, #40]	; (23c4c <notif_dispatch+0x34>)
   23c22:	f015 fdb3 	bl	3978c <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   23c26:	4b0a      	ldr	r3, [pc, #40]	; (23c50 <notif_dispatch+0x38>)
   23c28:	681b      	ldr	r3, [r3, #0]
   23c2a:	b923      	cbnz	r3, 23c36 <notif_dispatch+0x1e>
}
   23c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_mutex_unlock(mutex);
   23c30:	4806      	ldr	r0, [pc, #24]	; (23c4c <notif_dispatch+0x34>)
   23c32:	f015 be85 	b.w	39940 <z_impl_k_mutex_unlock>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   23c36:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   23c38:	689a      	ldr	r2, [r3, #8]
   23c3a:	4629      	mov	r1, r5
   23c3c:	6858      	ldr	r0, [r3, #4]
   23c3e:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   23c40:	2c00      	cmp	r4, #0
   23c42:	d0f3      	beq.n	23c2c <notif_dispatch+0x14>
   23c44:	4623      	mov	r3, r4
   23c46:	6824      	ldr	r4, [r4, #0]
   23c48:	e7f6      	b.n	23c38 <notif_dispatch+0x20>
   23c4a:	bf00      	nop
   23c4c:	2003201c 	.word	0x2003201c
   23c50:	20023aa8 	.word	0x20023aa8

00023c54 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   23c54:	b573      	push	{r0, r1, r4, r5, r6, lr}
   23c56:	4606      	mov	r6, r0
	if (handler == NULL) {
   23c58:	460d      	mov	r5, r1
   23c5a:	b361      	cbz	r1, 23cb6 <at_notif_register_handler+0x62>
	return z_impl_k_mutex_lock(mutex, timeout);
   23c5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23c60:	4816      	ldr	r0, [pc, #88]	; (23cbc <at_notif_register_handler+0x68>)
   23c62:	f015 fd93 	bl	3978c <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   23c66:	462a      	mov	r2, r5
   23c68:	4631      	mov	r1, r6
   23c6a:	a801      	add	r0, sp, #4
   23c6c:	f7ff ffac 	bl	23bc8 <find_node>
   23c70:	4604      	mov	r4, r0
   23c72:	b120      	cbz	r0, 23c7e <at_notif_register_handler+0x2a>
	z_impl_k_mutex_unlock(mutex);
   23c74:	4811      	ldr	r0, [pc, #68]	; (23cbc <at_notif_register_handler+0x68>)
   23c76:	f015 fe63 	bl	39940 <z_impl_k_mutex_unlock>
	return 0;
   23c7a:	2000      	movs	r0, #0
		LOG_DBG("context=0x%08X, handler=0x%08X", (u32_t)context,
			(u32_t)handler);
		return -EINVAL;
	}
	return append_notif_handler(context, handler);
   23c7c:	e009      	b.n	23c92 <at_notif_register_handler+0x3e>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   23c7e:	200c      	movs	r0, #12
   23c80:	f015 fc2c 	bl	394dc <k_malloc>
   23c84:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   23c86:	b930      	cbnz	r0, 23c96 <at_notif_register_handler+0x42>
   23c88:	480c      	ldr	r0, [pc, #48]	; (23cbc <at_notif_register_handler+0x68>)
   23c8a:	f015 fe59 	bl	39940 <z_impl_k_mutex_unlock>
		return -ENOBUFS;
   23c8e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   23c92:	b002      	add	sp, #8
   23c94:	bd70      	pop	{r4, r5, r6, pc}
__ssp_bos_icheck3(memset, void *, int)
   23c96:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   23c98:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   23c9a:	4a09      	ldr	r2, [pc, #36]	; (23cc0 <at_notif_register_handler+0x6c>)
   23c9c:	6044      	str	r4, [r0, #4]
   23c9e:	6084      	str	r4, [r0, #8]
	parent->next = child;
   23ca0:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   23ca2:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   23ca4:	e9c3 6501 	strd	r6, r5, [r3, #4]
   23ca8:	b911      	cbnz	r1, 23cb0 <at_notif_register_handler+0x5c>
	list->head = node;
   23caa:	e9c2 3300 	strd	r3, r3, [r2]
   23cae:	e7e1      	b.n	23c74 <at_notif_register_handler+0x20>
	parent->next = child;
   23cb0:	600b      	str	r3, [r1, #0]
	list->tail = node;
   23cb2:	6053      	str	r3, [r2, #4]
   23cb4:	e7de      	b.n	23c74 <at_notif_register_handler+0x20>
		return -EINVAL;
   23cb6:	f06f 0015 	mvn.w	r0, #21
   23cba:	e7ea      	b.n	23c92 <at_notif_register_handler+0x3e>
   23cbc:	2003201c 	.word	0x2003201c
   23cc0:	20023aa8 	.word	0x20023aa8

00023cc4 <at_notif_deregister_handler>:

int at_notif_deregister_handler(void *context, at_notif_handler_t handler)
{
   23cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23cc6:	4605      	mov	r5, r0
	if (handler == NULL) {
   23cc8:	460c      	mov	r4, r1
   23cca:	b359      	cbz	r1, 23d24 <at_notif_deregister_handler+0x60>
	struct notif_handler *curr, *prev = NULL;
   23ccc:	2300      	movs	r3, #0
   23cce:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   23cd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23cd4:	4815      	ldr	r0, [pc, #84]	; (23d2c <at_notif_deregister_handler+0x68>)
   23cd6:	f015 fd59 	bl	3978c <z_impl_k_mutex_lock>
	curr = find_node(&prev, ctx, handler);
   23cda:	4622      	mov	r2, r4
   23cdc:	4629      	mov	r1, r5
   23cde:	a801      	add	r0, sp, #4
   23ce0:	f7ff ff72 	bl	23bc8 <find_node>
	if (curr == NULL) {
   23ce4:	b930      	cbnz	r0, 23cf4 <at_notif_deregister_handler+0x30>
	z_impl_k_mutex_unlock(mutex);
   23ce6:	4811      	ldr	r0, [pc, #68]	; (23d2c <at_notif_deregister_handler+0x68>)
   23ce8:	f015 fe2a 	bl	39940 <z_impl_k_mutex_unlock>
		return -ENXIO;
   23cec:	f06f 0005 	mvn.w	r0, #5
		LOG_DBG("context=0x%08X, handler=0x%08X", (u32_t)context,
			(u32_t)handler);
		return -EINVAL;
	}
	return remove_notif_handler(context, handler);
}
   23cf0:	b003      	add	sp, #12
   23cf2:	bd30      	pop	{r4, r5, pc}
	sys_slist_remove(&handler_list, &prev->node, &curr->node);
   23cf4:	9a01      	ldr	r2, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   23cf6:	6801      	ldr	r1, [r0, #0]
   23cf8:	4b0d      	ldr	r3, [pc, #52]	; (23d30 <at_notif_deregister_handler+0x6c>)
   23cfa:	b96a      	cbnz	r2, 23d18 <at_notif_deregister_handler+0x54>
   23cfc:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   23cfe:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   23d00:	4290      	cmp	r0, r2
   23d02:	d100      	bne.n	23d06 <at_notif_deregister_handler+0x42>
	list->tail = node;
   23d04:	6059      	str	r1, [r3, #4]
	parent->next = child;
   23d06:	2400      	movs	r4, #0
   23d08:	6004      	str	r4, [r0, #0]
	k_free(curr);
   23d0a:	f01d fcd1 	bl	416b0 <k_free>
   23d0e:	4807      	ldr	r0, [pc, #28]	; (23d2c <at_notif_deregister_handler+0x68>)
   23d10:	f015 fe16 	bl	39940 <z_impl_k_mutex_unlock>
	return 0;
   23d14:	4620      	mov	r0, r4
	return remove_notif_handler(context, handler);
   23d16:	e7eb      	b.n	23cf0 <at_notif_deregister_handler+0x2c>
   23d18:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   23d1a:	6859      	ldr	r1, [r3, #4]
   23d1c:	4288      	cmp	r0, r1
	list->tail = node;
   23d1e:	bf08      	it	eq
   23d20:	605a      	streq	r2, [r3, #4]
   23d22:	e7f0      	b.n	23d06 <at_notif_deregister_handler+0x42>
		return -EINVAL;
   23d24:	f06f 0015 	mvn.w	r0, #21
   23d28:	e7e2      	b.n	23cf0 <at_notif_deregister_handler+0x2c>
   23d2a:	bf00      	nop
   23d2c:	2003201c 	.word	0x2003201c
   23d30:	20023aa8 	.word	0x20023aa8

00023d34 <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(char *str)
{
   23d34:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   23d36:	4d05      	ldr	r5, [pc, #20]	; (23d4c <write_uart_string+0x18>)
   23d38:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   23d3a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   23d3e:	b901      	cbnz	r1, 23d42 <write_uart_string+0xe>
	}
}
   23d40:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   23d42:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
   23d44:	6843      	ldr	r3, [r0, #4]
   23d46:	685b      	ldr	r3, [r3, #4]
   23d48:	4798      	blx	r3
   23d4a:	e7f6      	b.n	23d3a <write_uart_string+0x6>
   23d4c:	20023b84 	.word	0x20023b84

00023d50 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   23d50:	b500      	push	{lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   23d52:	4923      	ldr	r1, [pc, #140]	; (23de0 <cmd_send+0x90>)
{
   23d54:	b08b      	sub	sp, #44	; 0x2c
	err = at_cmd_write(at_buf, at_buf,
   23d56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   23d5a:	f10d 030b 	add.w	r3, sp, #11
   23d5e:	4608      	mov	r0, r1
   23d60:	f005 f81a 	bl	28d98 <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   23d64:	1e02      	subs	r2, r0, #0
   23d66:	da12      	bge.n	23d8e <cmd_send+0x3e>
		LOG_ERR("Error while processing AT command: %d", err);
   23d68:	2301      	movs	r3, #1
   23d6a:	f04f 0000 	mov.w	r0, #0
   23d6e:	491d      	ldr	r1, [pc, #116]	; (23de4 <cmd_send+0x94>)
   23d70:	f363 0007 	bfi	r0, r3, #0, #8
   23d74:	4b1c      	ldr	r3, [pc, #112]	; (23de8 <cmd_send+0x98>)
   23d76:	1a5b      	subs	r3, r3, r1
   23d78:	08db      	lsrs	r3, r3, #3
   23d7a:	f363 108f 	bfi	r0, r3, #6, #10
   23d7e:	491b      	ldr	r1, [pc, #108]	; (23dec <cmd_send+0x9c>)
   23d80:	f01b fb7f 	bl	3f482 <log_string_sync>
		state = AT_CMD_ERROR;
   23d84:	2301      	movs	r3, #1
   23d86:	f88d 300b 	strb.w	r3, [sp, #11]
	case AT_CMD_OK:
		write_uart_string(at_buf);
		write_uart_string(OK_STR);
		break;
	case AT_CMD_ERROR:
		write_uart_string(ERROR_STR);
   23d8a:	4819      	ldr	r0, [pc, #100]	; (23df0 <cmd_send+0xa0>)
   23d8c:	e012      	b.n	23db4 <cmd_send+0x64>
	switch (state) {
   23d8e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   23d92:	2b03      	cmp	r3, #3
   23d94:	d810      	bhi.n	23db8 <cmd_send+0x68>
   23d96:	a101      	add	r1, pc, #4	; (adr r1, 23d9c <cmd_send+0x4c>)
   23d98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   23d9c:	00023dad 	.word	0x00023dad
   23da0:	00023d8b 	.word	0x00023d8b
   23da4:	00023dc7 	.word	0x00023dc7
   23da8:	00023dd9 	.word	0x00023dd9
		write_uart_string(at_buf);
   23dac:	480c      	ldr	r0, [pc, #48]	; (23de0 <cmd_send+0x90>)
   23dae:	f7ff ffc1 	bl	23d34 <write_uart_string>
		write_uart_string(OK_STR);
   23db2:	4810      	ldr	r0, [pc, #64]	; (23df4 <cmd_send+0xa4>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   23db4:	f7ff ffbe 	bl	23d34 <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   23db8:	4b0f      	ldr	r3, [pc, #60]	; (23df8 <cmd_send+0xa8>)
   23dba:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   23dbc:	f01d f93e 	bl	4103c <z_impl_uart_irq_rx_enable>
}
   23dc0:	b00b      	add	sp, #44	; 0x2c
   23dc2:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   23dc6:	4b0d      	ldr	r3, [pc, #52]	; (23dfc <cmd_send+0xac>)
   23dc8:	9200      	str	r2, [sp, #0]
		sprintf(str, "+CME ERROR: %d\r\n", err);
   23dca:	2219      	movs	r2, #25
   23dcc:	2100      	movs	r1, #0
   23dce:	a803      	add	r0, sp, #12
   23dd0:	f01d ff48 	bl	41c64 <__sprintf_chk>
		write_uart_string(str);
   23dd4:	a803      	add	r0, sp, #12
   23dd6:	e7ed      	b.n	23db4 <cmd_send+0x64>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   23dd8:	9200      	str	r2, [sp, #0]
   23dda:	4b09      	ldr	r3, [pc, #36]	; (23e00 <cmd_send+0xb0>)
   23ddc:	e7f5      	b.n	23dca <cmd_send+0x7a>
   23dde:	bf00      	nop
   23de0:	2002adc5 	.word	0x2002adc5
   23de4:	00042fb4 	.word	0x00042fb4
   23de8:	00042fbc 	.word	0x00042fbc
   23dec:	000472d3 	.word	0x000472d3
   23df0:	000472f9 	.word	0x000472f9
   23df4:	000455e7 	.word	0x000455e7
   23df8:	20023b84 	.word	0x20023b84
   23dfc:	00047301 	.word	0x00047301
   23e00:	00047312 	.word	0x00047312

00023e04 <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(struct device *dev)
{
   23e04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   23e08:	4605      	mov	r5, r0
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
   23e0a:	6843      	ldr	r3, [r0, #4]
   23e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   23e0e:	b103      	cbz	r3, 23e12 <isr+0xe>
		return api->irq_update(dev);
   23e10:	4798      	blx	r3
	if (api->irq_rx_ready) {
   23e12:	686b      	ldr	r3, [r5, #4]
   23e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   23e16:	b1c3      	cbz	r3, 23e4a <isr+0x46>
		return api->irq_rx_ready(dev);
   23e18:	4628      	mov	r0, r5
   23e1a:	4798      	blx	r3
	u8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   23e1c:	b1a8      	cbz	r0, 23e4a <isr+0x46>
   23e1e:	f8df 913c 	ldr.w	r9, [pc, #316]	; 23f5c <isr+0x158>
   23e22:	4e43      	ldr	r6, [pc, #268]	; (23f30 <isr+0x12c>)
   23e24:	46c8      	mov	r8, r9
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   23e26:	4b43      	ldr	r3, [pc, #268]	; (23f34 <isr+0x130>)
		if (at_cmd_len > 0) {
   23e28:	4c43      	ldr	r4, [pc, #268]	; (23f38 <isr+0x134>)
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   23e2a:	1af6      	subs	r6, r6, r3
   23e2c:	f3c6 06c9 	ubfx	r6, r6, #3, #10
   23e30:	e8d9 3faf 	lda	r3, [r9]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   23e34:	07db      	lsls	r3, r3, #31
   23e36:	d408      	bmi.n	23e4a <isr+0x46>
	if (api->fifo_read) {
   23e38:	686b      	ldr	r3, [r5, #4]
   23e3a:	699b      	ldr	r3, [r3, #24]
   23e3c:	b12b      	cbz	r3, 23e4a <isr+0x46>
		return api->fifo_read(dev, rx_data, size);
   23e3e:	2201      	movs	r2, #1
   23e40:	f10d 0107 	add.w	r1, sp, #7
   23e44:	4628      	mov	r0, r5
   23e46:	4798      	blx	r3
   23e48:	b910      	cbnz	r0, 23e50 <isr+0x4c>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   23e4a:	b003      	add	sp, #12
   23e4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uart_rx_handler(character);
   23e50:	f89d 2007 	ldrb.w	r2, [sp, #7]
	switch (character) {
   23e54:	2a08      	cmp	r2, #8
   23e56:	d001      	beq.n	23e5c <isr+0x58>
   23e58:	2a7f      	cmp	r2, #127	; 0x7f
   23e5a:	d105      	bne.n	23e68 <isr+0x64>
		if (at_cmd_len > 0) {
   23e5c:	6823      	ldr	r3, [r4, #0]
   23e5e:	2b00      	cmp	r3, #0
   23e60:	d0e6      	beq.n	23e30 <isr+0x2c>
			at_cmd_len--;
   23e62:	3b01      	subs	r3, #1
   23e64:	6023      	str	r3, [r4, #0]
   23e66:	e7e3      	b.n	23e30 <isr+0x2c>
	if (!inside_quotes) {
   23e68:	4934      	ldr	r1, [pc, #208]	; (23f3c <isr+0x138>)
   23e6a:	780b      	ldrb	r3, [r1, #0]
   23e6c:	2b00      	cmp	r3, #0
   23e6e:	d140      	bne.n	23ef2 <isr+0xee>
		switch (character) {
   23e70:	2a0a      	cmp	r2, #10
   23e72:	d031      	beq.n	23ed8 <isr+0xd4>
   23e74:	2a0d      	cmp	r2, #13
   23e76:	d025      	beq.n	23ec4 <isr+0xc0>
   23e78:	2a00      	cmp	r2, #0
   23e7a:	d138      	bne.n	23eee <isr+0xea>
			if (term_mode == MODE_NULL_TERM) {
   23e7c:	4b30      	ldr	r3, [pc, #192]	; (23f40 <isr+0x13c>)
   23e7e:	781b      	ldrb	r3, [r3, #0]
   23e80:	2b00      	cmp	r3, #0
   23e82:	d1d5      	bne.n	23e30 <isr+0x2c>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   23e84:	2300      	movs	r3, #0
   23e86:	6822      	ldr	r2, [r4, #0]
   23e88:	482e      	ldr	r0, [pc, #184]	; (23f44 <isr+0x140>)
	inside_quotes = false;
   23e8a:	700b      	strb	r3, [r1, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   23e8c:	5483      	strb	r3, [r0, r2]
	cr_state = false;
   23e8e:	4a2e      	ldr	r2, [pc, #184]	; (23f48 <isr+0x144>)
	at_cmd_len = 0;
   23e90:	6023      	str	r3, [r4, #0]
	cr_state = false;
   23e92:	7013      	strb	r3, [r2, #0]
	if (at_buf[0]) {
   23e94:	7803      	ldrb	r3, [r0, #0]
   23e96:	2b00      	cmp	r3, #0
   23e98:	d0ca      	beq.n	23e30 <isr+0x2c>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   23e9a:	4b2c      	ldr	r3, [pc, #176]	; (23f4c <isr+0x148>)
   23e9c:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   23e9e:	6843      	ldr	r3, [r0, #4]
   23ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   23ea2:	b103      	cbz	r3, 23ea6 <isr+0xa2>
		api->irq_rx_disable(dev);
   23ea4:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   23ea6:	e8d8 3fef 	ldaex	r3, [r8]
   23eaa:	f043 0201 	orr.w	r2, r3, #1
   23eae:	e8c8 2fe1 	stlex	r1, r2, [r8]
   23eb2:	2900      	cmp	r1, #0
   23eb4:	d1f7      	bne.n	23ea6 <isr+0xa2>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   23eb6:	07da      	lsls	r2, r3, #31
   23eb8:	d4ba      	bmi.n	23e30 <isr+0x2c>
		k_queue_append(&work_q->queue, work);
   23eba:	4925      	ldr	r1, [pc, #148]	; (23f50 <isr+0x14c>)
   23ebc:	4825      	ldr	r0, [pc, #148]	; (23f54 <isr+0x150>)
   23ebe:	f01d fc2c 	bl	4171a <k_queue_append>
   23ec2:	e7b5      	b.n	23e30 <isr+0x2c>
			if (term_mode == MODE_CR) {
   23ec4:	4b1e      	ldr	r3, [pc, #120]	; (23f40 <isr+0x13c>)
   23ec6:	781b      	ldrb	r3, [r3, #0]
   23ec8:	2b01      	cmp	r3, #1
   23eca:	d0db      	beq.n	23e84 <isr+0x80>
			if (term_mode == MODE_CR_LF) {
   23ecc:	2b03      	cmp	r3, #3
   23ece:	d1af      	bne.n	23e30 <isr+0x2c>
				cr_state = true;
   23ed0:	2201      	movs	r2, #1
   23ed2:	4b1d      	ldr	r3, [pc, #116]	; (23f48 <isr+0x144>)
   23ed4:	701a      	strb	r2, [r3, #0]
   23ed6:	e7ab      	b.n	23e30 <isr+0x2c>
			if (term_mode == MODE_LF) {
   23ed8:	4b19      	ldr	r3, [pc, #100]	; (23f40 <isr+0x13c>)
   23eda:	781b      	ldrb	r3, [r3, #0]
   23edc:	2b02      	cmp	r3, #2
   23ede:	d0d1      	beq.n	23e84 <isr+0x80>
			if (term_mode == MODE_CR_LF && cr_state) {
   23ee0:	2b03      	cmp	r3, #3
   23ee2:	d1a5      	bne.n	23e30 <isr+0x2c>
   23ee4:	4b18      	ldr	r3, [pc, #96]	; (23f48 <isr+0x144>)
   23ee6:	781b      	ldrb	r3, [r3, #0]
   23ee8:	2b00      	cmp	r3, #0
   23eea:	d1cb      	bne.n	23e84 <isr+0x80>
   23eec:	e7a0      	b.n	23e30 <isr+0x2c>
		cr_state = false;
   23eee:	4816      	ldr	r0, [pc, #88]	; (23f48 <isr+0x144>)
   23ef0:	7003      	strb	r3, [r0, #0]
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   23ef2:	f8d4 c000 	ldr.w	ip, [r4]
   23ef6:	f10c 0001 	add.w	r0, ip, #1
   23efa:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   23efe:	d30c      	bcc.n	23f1a <isr+0x116>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   23f00:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   23f04:	f043 0301 	orr.w	r3, r3, #1
   23f08:	f363 0707 	bfi	r7, r3, #0, #8
   23f0c:	f366 178f 	bfi	r7, r6, #6, #10
   23f10:	4911      	ldr	r1, [pc, #68]	; (23f58 <isr+0x154>)
   23f12:	4638      	mov	r0, r7
   23f14:	f01b fab5 	bl	3f482 <log_string_sync>
		return;
   23f18:	e78a      	b.n	23e30 <isr+0x2c>
	at_buf[at_cmd_len] = character;
   23f1a:	f8df e028 	ldr.w	lr, [pc, #40]	; 23f44 <isr+0x140>
	if (character == '"') {
   23f1e:	2a22      	cmp	r2, #34	; 0x22
	at_buf[at_cmd_len] = character;
   23f20:	f80e 200c 	strb.w	r2, [lr, ip]
	at_cmd_len++;
   23f24:	6020      	str	r0, [r4, #0]
	if (character == '"') {
   23f26:	d183      	bne.n	23e30 <isr+0x2c>
	if (!inside_quotes) {
   23f28:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   23f2c:	700b      	strb	r3, [r1, #0]
   23f2e:	e77f      	b.n	23e30 <isr+0x2c>
   23f30:	00042fbc 	.word	0x00042fbc
   23f34:	00042fb4 	.word	0x00042fb4
   23f38:	20023ab0 	.word	0x20023ab0
   23f3c:	2002bdc6 	.word	0x2002bdc6
   23f40:	2002bdc7 	.word	0x2002bdc7
   23f44:	2002adc5 	.word	0x2002adc5
   23f48:	2002bdc5 	.word	0x2002bdc5
   23f4c:	20023b84 	.word	0x20023b84
   23f50:	20023b78 	.word	0x20023b78
   23f54:	20023ab4 	.word	0x20023ab4
   23f58:	00047323 	.word	0x00047323
   23f5c:	20023b80 	.word	0x20023b80

00023f60 <at_host_init>:

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   23f60:	2201      	movs	r2, #1
   23f62:	4b43      	ldr	r3, [pc, #268]	; (24070 <at_host_init+0x110>)
{
   23f64:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   23f68:	4942      	ldr	r1, [pc, #264]	; (24074 <at_host_init+0x114>)
   23f6a:	2000      	movs	r0, #0
		term_mode = mode;
   23f6c:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
   23f6e:	f7ff fe71 	bl	23c54 <at_notif_register_handler>
	if (err != 0) {
   23f72:	4c41      	ldr	r4, [pc, #260]	; (24078 <at_host_init+0x118>)
   23f74:	4b41      	ldr	r3, [pc, #260]	; (2407c <at_host_init+0x11c>)
   23f76:	4606      	mov	r6, r0
   23f78:	1ae4      	subs	r4, r4, r3
   23f7a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   23f7e:	b170      	cbz	r0, 23f9e <at_host_init+0x3e>
		LOG_ERR("Can't register handler err=%d", err);
   23f80:	f04f 0000 	mov.w	r0, #0
   23f84:	2301      	movs	r3, #1
   23f86:	f363 0007 	bfi	r0, r3, #0, #8
   23f8a:	f364 108f 	bfi	r0, r4, #6, #10
   23f8e:	4632      	mov	r2, r6
   23f90:	493b      	ldr	r1, [pc, #236]	; (24080 <at_host_init+0x120>)
   23f92:	f01b fa76 	bl	3f482 <log_string_sync>
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   23f96:	4630      	mov	r0, r6
   23f98:	b002      	add	sp, #8
   23f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23f9e:	4839      	ldr	r0, [pc, #228]	; (24084 <at_host_init+0x124>)
   23fa0:	f014 ff0a 	bl	38db8 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   23fa4:	4d38      	ldr	r5, [pc, #224]	; (24088 <at_host_init+0x128>)
   23fa6:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
   23fa8:	b9b8      	cbnz	r0, 23fda <at_host_init+0x7a>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   23faa:	2301      	movs	r3, #1
   23fac:	f363 0007 	bfi	r0, r3, #0, #8
   23fb0:	4a34      	ldr	r2, [pc, #208]	; (24084 <at_host_init+0x124>)
   23fb2:	f364 108f 	bfi	r0, r4, #6, #10
   23fb6:	4935      	ldr	r1, [pc, #212]	; (2408c <at_host_init+0x12c>)
   23fb8:	f01b fa63 	bl	3f482 <log_string_sync>
		return -EINVAL;
   23fbc:	f06f 0215 	mvn.w	r2, #21
		LOG_ERR("UART could not be initialized: %d", err);
   23fc0:	2301      	movs	r3, #1
   23fc2:	f04f 0000 	mov.w	r0, #0
   23fc6:	f363 0007 	bfi	r0, r3, #0, #8
   23fca:	f364 108f 	bfi	r0, r4, #6, #10
   23fce:	4930      	ldr	r1, [pc, #192]	; (24090 <at_host_init+0x130>)
   23fd0:	f01b fa57 	bl	3f482 <log_string_sync>
		return -EFAULT;
   23fd4:	f06f 060d 	mvn.w	r6, #13
   23fd8:	e7dd      	b.n	23f96 <at_host_init+0x36>
	return z_impl_k_uptime_get();
   23fda:	f01d fc64 	bl	418a6 <z_impl_k_uptime_get>
   23fde:	4680      	mov	r8, r0
			LOG_ERR("UART check failed: %d. "
   23fe0:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 240a8 <at_host_init+0x148>
		err = uart_err_check(uart_dev);
   23fe4:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
   23fe6:	6843      	ldr	r3, [r0, #4]
   23fe8:	689b      	ldr	r3, [r3, #8]
   23fea:	b343      	cbz	r3, 2403e <at_host_init+0xde>
		return api->err_check(dev);
   23fec:	4798      	blx	r3
		if (err) {
   23fee:	4682      	mov	sl, r0
   23ff0:	b328      	cbz	r0, 2403e <at_host_init+0xde>
   23ff2:	f01d fc58 	bl	418a6 <z_impl_k_uptime_get>
			if (k_uptime_get_32() - start_time >
   23ff6:	eba0 0008 	sub.w	r0, r0, r8
   23ffa:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   23ffe:	d81b      	bhi.n	24038 <at_host_init+0xd8>
			LOG_ERR("UART check failed: %d. "
   24000:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   24004:	f043 0301 	orr.w	r3, r3, #1
   24008:	f363 0707 	bfi	r7, r3, #0, #8
   2400c:	f364 178f 	bfi	r7, r4, #6, #10
   24010:	4652      	mov	r2, sl
   24012:	4649      	mov	r1, r9
   24014:	4638      	mov	r0, r7
   24016:	f01b fa34 	bl	3f482 <log_string_sync>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   2401a:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
   2401c:	6843      	ldr	r3, [r0, #4]
   2401e:	699b      	ldr	r3, [r3, #24]
   24020:	b91b      	cbnz	r3, 2402a <at_host_init+0xca>
	return z_impl_k_sleep(ms);
   24022:	200a      	movs	r0, #10
   24024:	f016 fed8 	bl	3add8 <z_impl_k_sleep>
   24028:	e7dc      	b.n	23fe4 <at_host_init+0x84>
		return api->fifo_read(dev, rx_data, size);
   2402a:	2201      	movs	r2, #1
   2402c:	f10d 0107 	add.w	r1, sp, #7
   24030:	4798      	blx	r3
   24032:	2800      	cmp	r0, #0
   24034:	d1f1      	bne.n	2401a <at_host_init+0xba>
   24036:	e7f4      	b.n	24022 <at_host_init+0xc2>
	if (err) {
   24038:	f06f 0204 	mvn.w	r2, #4
   2403c:	e7c0      	b.n	23fc0 <at_host_init+0x60>
	uart_irq_callback_set(uart_dev, isr);
   2403e:	682a      	ldr	r2, [r5, #0]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
   24040:	6853      	ldr	r3, [r2, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   24042:	b123      	cbz	r3, 2404e <at_host_init+0xee>
   24044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   24046:	b113      	cbz	r3, 2404e <at_host_init+0xee>
		api->irq_callback_set(dev, cb, user_data);
   24048:	4912      	ldr	r1, [pc, #72]	; (24094 <at_host_init+0x134>)
   2404a:	4610      	mov	r0, r2
   2404c:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2404e:	2200      	movs	r2, #0
   24050:	4b11      	ldr	r3, [pc, #68]	; (24098 <at_host_init+0x138>)
   24052:	4912      	ldr	r1, [pc, #72]	; (2409c <at_host_init+0x13c>)
   24054:	601a      	str	r2, [r3, #0]
   24056:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   2405a:	4811      	ldr	r0, [pc, #68]	; (240a0 <at_host_init+0x140>)
   2405c:	230a      	movs	r3, #10
   2405e:	f44f 7200 	mov.w	r2, #512	; 0x200
   24062:	4910      	ldr	r1, [pc, #64]	; (240a4 <at_host_init+0x144>)
   24064:	f017 fa40 	bl	3b4e8 <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   24068:	6828      	ldr	r0, [r5, #0]
   2406a:	f01c ffe7 	bl	4103c <z_impl_uart_irq_rx_enable>
	return err;
   2406e:	e792      	b.n	23f96 <at_host_init+0x36>
   24070:	2002bdc7 	.word	0x2002bdc7
   24074:	00041047 	.word	0x00041047
   24078:	00042fbc 	.word	0x00042fbc
   2407c:	00042fb4 	.word	0x00042fb4
   24080:	0004724e 	.word	0x0004724e
   24084:	00046005 	.word	0x00046005
   24088:	20023b84 	.word	0x20023b84
   2408c:	0004726c 	.word	0x0004726c
   24090:	000472b1 	.word	0x000472b1
   24094:	00023e05 	.word	0x00023e05
   24098:	20023b78 	.word	0x20023b78
   2409c:	00023d51 	.word	0x00023d51
   240a0:	20023ab4 	.word	0x20023ab4
   240a4:	2002ca10 	.word	0x2002ca10
   240a8:	0004727c 	.word	0x0004727c

000240ac <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper(chr);
   240ac:	4b06      	ldr	r3, [pc, #24]	; (240c8 <is_valid_notification_char+0x1c>)
   240ae:	5cc3      	ldrb	r3, [r0, r3]
   240b0:	f003 0303 	and.w	r3, r3, #3
   240b4:	2b02      	cmp	r3, #2
   240b6:	bf08      	it	eq
   240b8:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   240ba:	3841      	subs	r0, #65	; 0x41
   240bc:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   240be:	2819      	cmp	r0, #25
   240c0:	bf8c      	ite	hi
   240c2:	2000      	movhi	r0, #0
   240c4:	2001      	movls	r0, #1
   240c6:	4770      	bx	lr
   240c8:	0004a77d 	.word	0x0004a77d

000240cc <at_parse_process_element>:
}

static int at_parse_process_element(const char **str,
				    int index,
				    struct at_param_list *const list)
{
   240cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const char *tmpstr = *str;
   240d0:	6804      	ldr	r4, [r0, #0]
{
   240d2:	b0a2      	sub	sp, #136	; 0x88
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   240d4:	7823      	ldrb	r3, [r4, #0]
   240d6:	4680      	mov	r8, r0
   240d8:	460f      	mov	r7, r1
   240da:	4616      	mov	r6, r2
   240dc:	2b00      	cmp	r3, #0
   240de:	f000 80a2 	beq.w	24226 <at_parse_process_element+0x15a>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   240e2:	4b52      	ldr	r3, [pc, #328]	; (2422c <at_parse_process_element+0x160>)
   240e4:	781d      	ldrb	r5, [r3, #0]
   240e6:	2d05      	cmp	r5, #5
   240e8:	d10f      	bne.n	2410a <at_parse_process_element+0x3e>
		const char *start_ptr = tmpstr++;
   240ea:	1c62      	adds	r2, r4, #1
   240ec:	4615      	mov	r5, r2

		while (is_valid_notification_char(*tmpstr)) {
   240ee:	7828      	ldrb	r0, [r5, #0]
   240f0:	3201      	adds	r2, #1
   240f2:	f7ff ffdb 	bl	240ac <is_valid_notification_char>
   240f6:	2800      	cmp	r0, #0
   240f8:	d1f8      	bne.n	240ec <at_parse_process_element+0x20>

		while (isxdigit(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list,
   240fa:	1b2b      	subs	r3, r5, r4
   240fc:	4622      	mov	r2, r4
   240fe:	4639      	mov	r1, r7
   24100:	4630      	mov	r0, r6
   24102:	f01d f802 	bl	4110a <at_params_string_put>
   24106:	462c      	mov	r4, r5
   24108:	e00f      	b.n	2412a <at_parse_process_element+0x5e>
	} else if (state == COMMAND) {
   2410a:	2d06      	cmp	r5, #6
   2410c:	d108      	bne.n	24120 <at_parse_process_element+0x54>
		tmpstr += sizeof("AT+") - 1;
   2410e:	1ce2      	adds	r2, r4, #3
   24110:	4615      	mov	r5, r2
		while (is_valid_notification_char(*tmpstr)) {
   24112:	7828      	ldrb	r0, [r5, #0]
   24114:	3201      	adds	r2, #1
   24116:	f7ff ffc9 	bl	240ac <is_valid_notification_char>
   2411a:	2800      	cmp	r0, #0
   2411c:	d1f8      	bne.n	24110 <at_parse_process_element+0x44>
   2411e:	e7ec      	b.n	240fa <at_parse_process_element+0x2e>
	} else if (state == OPTIONAL) {
   24120:	2d07      	cmp	r5, #7
   24122:	d108      	bne.n	24136 <at_parse_process_element+0x6a>
		at_params_empty_put(list, index);
   24124:	4610      	mov	r0, r2
   24126:	f01c ffc7 	bl	410b8 <at_params_empty_put>
				     index,
				     start_ptr, tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   2412a:	2000      	movs	r0, #0
	*str = tmpstr;
   2412c:	f8c8 4000 	str.w	r4, [r8]
}
   24130:	b022      	add	sp, #136	; 0x88
   24132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == STRING) {
   24136:	2d02      	cmp	r5, #2
   24138:	d115      	bne.n	24166 <at_parse_process_element+0x9a>
   2413a:	4622      	mov	r2, r4
   2413c:	f242 4101 	movw	r1, #9217	; 0x2401
   24140:	4615      	mov	r5, r2
		while (!is_dblquote(*tmpstr) &&
   24142:	f812 3b01 	ldrb.w	r3, [r2], #1
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   24146:	2b22      	cmp	r3, #34	; 0x22
   24148:	d005      	beq.n	24156 <at_parse_process_element+0x8a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2414a:	2b0d      	cmp	r3, #13
   2414c:	d8f8      	bhi.n	24140 <at_parse_process_element+0x74>
   2414e:	fa21 f303 	lsr.w	r3, r1, r3
   24152:	07d8      	lsls	r0, r3, #31
   24154:	d5f4      	bpl.n	24140 <at_parse_process_element+0x74>
		at_params_string_put(list,
   24156:	1b2b      	subs	r3, r5, r4
   24158:	4622      	mov	r2, r4
   2415a:	4639      	mov	r1, r7
   2415c:	4630      	mov	r0, r6
   2415e:	f01c ffd4 	bl	4110a <at_params_string_put>
		tmpstr++;
   24162:	1c6c      	adds	r4, r5, #1
   24164:	e7e1      	b.n	2412a <at_parse_process_element+0x5e>
	} else if (state == ARRAY) {
   24166:	2d01      	cmp	r5, #1
   24168:	d13a      	bne.n	241e0 <at_parse_process_element+0x114>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   2416a:	4620      	mov	r0, r4
   2416c:	220a      	movs	r2, #10
   2416e:	a901      	add	r1, sp, #4
   24170:	f019 fb1e 	bl	3d7b0 <strtoul>
	if ((chr == AT_PARAM_SEPARATOR) ||
   24174:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 24234 <at_parse_process_element+0x168>
		tmpstr = next;
   24178:	9c01      	ldr	r4, [sp, #4]
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   2417a:	9002      	str	r0, [sp, #8]
		while (!is_array_stop(*tmpstr) &&
   2417c:	7823      	ldrb	r3, [r4, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   2417e:	2b29      	cmp	r3, #41	; 0x29
   24180:	d026      	beq.n	241d0 <at_parse_process_element+0x104>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   24182:	b32b      	cbz	r3, 241d0 <at_parse_process_element+0x104>
	if ((chr == AT_PARAM_SEPARATOR) ||
   24184:	3b2c      	subs	r3, #44	; 0x2c
   24186:	b2db      	uxtb	r3, r3
   24188:	2b11      	cmp	r3, #17
   2418a:	f104 0401 	add.w	r4, r4, #1
   2418e:	d8f5      	bhi.n	2417c <at_parse_process_element+0xb0>
   24190:	fa29 f303 	lsr.w	r3, r9, r3
   24194:	07db      	lsls	r3, r3, #31
   24196:	d5f1      	bpl.n	2417c <at_parse_process_element+0xb0>
				      (u32_t)strtoul(++tmpstr, &next, 10);
   24198:	220a      	movs	r2, #10
   2419a:	a901      	add	r1, sp, #4
   2419c:	4620      	mov	r0, r4
   2419e:	f019 fb07 	bl	3d7b0 <strtoul>
				tmparray[i++] =
   241a2:	ab22      	add	r3, sp, #136	; 0x88
   241a4:	f105 0a01 	add.w	sl, r5, #1
   241a8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   241ac:	f845 0c80 	str.w	r0, [r5, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   241b0:	4620      	mov	r0, r4
   241b2:	f7f5 fe97 	bl	19ee4 <strlen>
   241b6:	4605      	mov	r5, r0
   241b8:	9801      	ldr	r0, [sp, #4]
   241ba:	f7f5 fe93 	bl	19ee4 <strlen>
   241be:	4285      	cmp	r5, r0
   241c0:	d101      	bne.n	241c6 <at_parse_process_element+0xfa>
				tmparray[i++] =
   241c2:	4655      	mov	r5, sl
   241c4:	e004      	b.n	241d0 <at_parse_process_element+0x104>
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   241c6:	f1ba 0f20 	cmp.w	sl, #32
					tmpstr = next;
   241ca:	9c01      	ldr	r4, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   241cc:	4655      	mov	r5, sl
   241ce:	d1d5      	bne.n	2417c <at_parse_process_element+0xb0>
		at_params_array_put(list, index,
   241d0:	00ab      	lsls	r3, r5, #2
   241d2:	aa02      	add	r2, sp, #8
   241d4:	4639      	mov	r1, r7
   241d6:	4630      	mov	r0, r6
   241d8:	f01c ffbd 	bl	41156 <at_params_array_put>
		tmpstr++;
   241dc:	3401      	adds	r4, #1
   241de:	e7a4      	b.n	2412a <at_parse_process_element+0x5e>
	} else if (state == NUMBER) {
   241e0:	2d03      	cmp	r5, #3
   241e2:	d114      	bne.n	2420e <at_parse_process_element+0x142>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   241e4:	220a      	movs	r2, #10
   241e6:	4620      	mov	r0, r4
   241e8:	a902      	add	r1, sp, #8
   241ea:	f019 fae1 	bl	3d7b0 <strtoul>
		if (value <= USHRT_MAX) {
   241ee:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   241f2:	4602      	mov	r2, r0
		tmpstr = next;
   241f4:	9c02      	ldr	r4, [sp, #8]
		if (value <= USHRT_MAX) {
   241f6:	da05      	bge.n	24204 <at_parse_process_element+0x138>
			at_params_short_put(list, index, (u16_t)value);
   241f8:	b282      	uxth	r2, r0
   241fa:	4639      	mov	r1, r7
   241fc:	4630      	mov	r0, r6
   241fe:	f01c ff46 	bl	4108e <at_params_short_put>
   24202:	e792      	b.n	2412a <at_parse_process_element+0x5e>
			at_params_int_put(list, index, value);
   24204:	4639      	mov	r1, r7
   24206:	4630      	mov	r0, r6
   24208:	f01c ff6a 	bl	410e0 <at_params_int_put>
   2420c:	e78d      	b.n	2412a <at_parse_process_element+0x5e>
	} else if (state == SMS_PDU) {
   2420e:	2d04      	cmp	r5, #4
   24210:	d18b      	bne.n	2412a <at_parse_process_element+0x5e>
   24212:	4623      	mov	r3, r4
		while (isxdigit(*tmpstr)) {
   24214:	4906      	ldr	r1, [pc, #24]	; (24230 <at_parse_process_element+0x164>)
   24216:	461d      	mov	r5, r3
   24218:	782a      	ldrb	r2, [r5, #0]
   2421a:	3301      	adds	r3, #1
   2421c:	5c52      	ldrb	r2, [r2, r1]
   2421e:	f012 0f44 	tst.w	r2, #68	; 0x44
   24222:	d1f8      	bne.n	24216 <at_parse_process_element+0x14a>
   24224:	e769      	b.n	240fa <at_parse_process_element+0x2e>
		return -1;
   24226:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2422a:	e781      	b.n	24130 <at_parse_process_element+0x64>
   2422c:	2002bdc8 	.word	0x2002bdc8
   24230:	0004a77d 	.word	0x0004a77d
   24234:	00024001 	.word	0x00024001

00024238 <at_parse_detect_type>:
{
   24238:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   2423a:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) &&
   2423c:	2900      	cmp	r1, #0
{
   2423e:	4605      	mov	r5, r0
   24240:	7823      	ldrb	r3, [r4, #0]
	if ((index == 0) &&
   24242:	d160      	bne.n	24306 <at_parse_detect_type+0xce>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   24244:	2b2b      	cmp	r3, #43	; 0x2b
   24246:	4e38      	ldr	r6, [pc, #224]	; (24328 <at_parse_detect_type+0xf0>)
   24248:	d001      	beq.n	2424e <at_parse_detect_type+0x16>
   2424a:	2b25      	cmp	r3, #37	; 0x25
   2424c:	d104      	bne.n	24258 <at_parse_detect_type+0x20>
	state = new_state;
   2424e:	2305      	movs	r3, #5
   24250:	7033      	strb	r3, [r6, #0]
	return 0;
   24252:	2000      	movs	r0, #0
	*str = tmpstr;
   24254:	602c      	str	r4, [r5, #0]
}
   24256:	bd70      	pop	{r4, r5, r6, pc}
	if (strlen(str) < 3) {
   24258:	4620      	mov	r0, r4
   2425a:	f7f5 fe43 	bl	19ee4 <strlen>
   2425e:	2802      	cmp	r0, #2
   24260:	d94f      	bls.n	24302 <at_parse_detect_type+0xca>
	if ((toupper(str[0]) == 'A') && (toupper(str[1]) == 'T') &&
   24262:	7821      	ldrb	r1, [r4, #0]
   24264:	4b31      	ldr	r3, [pc, #196]	; (2432c <at_parse_detect_type+0xf4>)
   24266:	5cca      	ldrb	r2, [r1, r3]
   24268:	f002 0203 	and.w	r2, r2, #3
   2426c:	2a02      	cmp	r2, #2
   2426e:	bf08      	it	eq
   24270:	3920      	subeq	r1, #32
   24272:	2941      	cmp	r1, #65	; 0x41
   24274:	461a      	mov	r2, r3
   24276:	d144      	bne.n	24302 <at_parse_detect_type+0xca>
   24278:	7863      	ldrb	r3, [r4, #1]
   2427a:	5cd2      	ldrb	r2, [r2, r3]
   2427c:	f002 0203 	and.w	r2, r2, #3
   24280:	2a02      	cmp	r2, #2
   24282:	bf08      	it	eq
   24284:	3b20      	subeq	r3, #32
   24286:	2b54      	cmp	r3, #84	; 0x54
   24288:	d13b      	bne.n	24302 <at_parse_detect_type+0xca>
	    ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2428a:	78a3      	ldrb	r3, [r4, #2]
   2428c:	2b25      	cmp	r3, #37	; 0x25
   2428e:	d003      	beq.n	24298 <at_parse_detect_type+0x60>
	     (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   24290:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   24294:	2b23      	cmp	r3, #35	; 0x23
   24296:	d134      	bne.n	24302 <at_parse_detect_type+0xca>
	state = new_state;
   24298:	2306      	movs	r3, #6
   2429a:	e7d9      	b.n	24250 <at_parse_detect_type+0x18>
	if (chr == '"') {
   2429c:	2b22      	cmp	r3, #34	; 0x22
   2429e:	d006      	beq.n	242ae <at_parse_detect_type+0x76>
	if (chr == '(') {
   242a0:	2b28      	cmp	r3, #40	; 0x28
   242a2:	d109      	bne.n	242b8 <at_parse_detect_type+0x80>
   242a4:	2201      	movs	r2, #1
   242a6:	4b20      	ldr	r3, [pc, #128]	; (24328 <at_parse_detect_type+0xf0>)
		tmpstr++;
   242a8:	4414      	add	r4, r2
	state = new_state;
   242aa:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   242ac:	e7d1      	b.n	24252 <at_parse_detect_type+0x1a>
	state = new_state;
   242ae:	2202      	movs	r2, #2
   242b0:	4b1d      	ldr	r3, [pc, #116]	; (24328 <at_parse_detect_type+0xf0>)
		tmpstr++;
   242b2:	3401      	adds	r4, #1
	state = new_state;
   242b4:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   242b6:	e7cc      	b.n	24252 <at_parse_detect_type+0x1a>
	if ((chr == '\r') ||
   242b8:	2b0d      	cmp	r3, #13
   242ba:	d001      	beq.n	242c0 <at_parse_detect_type+0x88>
   242bc:	2b0a      	cmp	r3, #10
   242be:	d114      	bne.n	242ea <at_parse_detect_type+0xb2>
		  (state == NUMBER)) {
   242c0:	4a19      	ldr	r2, [pc, #100]	; (24328 <at_parse_detect_type+0xf0>)
   242c2:	7811      	ldrb	r1, [r2, #0]
	} else if (is_lfcr(*tmpstr) &&
   242c4:	2903      	cmp	r1, #3
   242c6:	d10e      	bne.n	242e6 <at_parse_detect_type+0xae>
   242c8:	4621      	mov	r1, r4
		while (is_lfcr(*tmpstr)) {
   242ca:	780b      	ldrb	r3, [r1, #0]
   242cc:	460c      	mov	r4, r1
   242ce:	2b0d      	cmp	r3, #13
   242d0:	f101 0101 	add.w	r1, r1, #1
   242d4:	d0f9      	beq.n	242ca <at_parse_detect_type+0x92>
   242d6:	2b0a      	cmp	r3, #10
   242d8:	d0f7      	beq.n	242ca <at_parse_detect_type+0x92>
	state = new_state;
   242da:	2304      	movs	r3, #4
   242dc:	7013      	strb	r3, [r2, #0]
   242de:	e7b8      	b.n	24252 <at_parse_detect_type+0x1a>
		return -1;
   242e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   242e4:	e7b7      	b.n	24256 <at_parse_detect_type+0x1e>
	} else if (is_lfcr(*tmpstr) &&
   242e6:	2907      	cmp	r1, #7
   242e8:	d0b3      	beq.n	24252 <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) ||
   242ea:	3b2c      	subs	r3, #44	; 0x2c
   242ec:	b2db      	uxtb	r3, r3
   242ee:	2b11      	cmp	r3, #17
   242f0:	d8f6      	bhi.n	242e0 <at_parse_detect_type+0xa8>
   242f2:	4a0f      	ldr	r2, [pc, #60]	; (24330 <at_parse_detect_type+0xf8>)
   242f4:	fa22 f303 	lsr.w	r3, r2, r3
   242f8:	07db      	lsls	r3, r3, #31
   242fa:	d5f1      	bpl.n	242e0 <at_parse_detect_type+0xa8>
	state = new_state;
   242fc:	4b0a      	ldr	r3, [pc, #40]	; (24328 <at_parse_detect_type+0xf0>)
   242fe:	2207      	movs	r2, #7
   24300:	e010      	b.n	24324 <at_parse_detect_type+0xec>
   24302:	2302      	movs	r3, #2
   24304:	e7a4      	b.n	24250 <at_parse_detect_type+0x18>
	} else if ((index > 0) &&
   24306:	dd03      	ble.n	24310 <at_parse_detect_type+0xd8>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   24308:	2b2b      	cmp	r3, #43	; 0x2b
   2430a:	d0e9      	beq.n	242e0 <at_parse_detect_type+0xa8>
   2430c:	2b25      	cmp	r3, #37	; 0x25
   2430e:	d0e7      	beq.n	242e0 <at_parse_detect_type+0xa8>
 * @retval true  If character is number character
 * @retval false If character is something else
 */
static inline bool is_number(char chr)
{
	if (isdigit(chr) ||
   24310:	4a06      	ldr	r2, [pc, #24]	; (2432c <at_parse_detect_type+0xf4>)
   24312:	5c9a      	ldrb	r2, [r3, r2]
   24314:	0752      	lsls	r2, r2, #29
   24316:	d403      	bmi.n	24320 <at_parse_detect_type+0xe8>
   24318:	2b2d      	cmp	r3, #45	; 0x2d
   2431a:	d001      	beq.n	24320 <at_parse_detect_type+0xe8>
	    (chr == '-') ||
   2431c:	2b2b      	cmp	r3, #43	; 0x2b
   2431e:	d1bd      	bne.n	2429c <at_parse_detect_type+0x64>
	state = new_state;
   24320:	2203      	movs	r2, #3
   24322:	4b01      	ldr	r3, [pc, #4]	; (24328 <at_parse_detect_type+0xf0>)
   24324:	701a      	strb	r2, [r3, #0]
   24326:	e794      	b.n	24252 <at_parse_detect_type+0x1a>
   24328:	2002bdc8 	.word	0x2002bdc8
   2432c:	0004a77d 	.word	0x0004a77d
   24330:	00024001 	.word	0x00024001

00024334 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list * const list,
				  size_t max_params_count)
{
   24334:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   24338:	4688      	mov	r8, r1
   2433a:	4616      	mov	r6, r2
   2433c:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL ||
   2433e:	4604      	mov	r4, r0
   24340:	2800      	cmp	r0, #0
   24342:	d07f      	beq.n	24444 <at_parser_max_params_from_str+0x110>
   24344:	2a00      	cmp	r2, #0
   24346:	d07d      	beq.n	24444 <at_parser_max_params_from_str+0x110>
	    list == NULL || list->params == NULL) {
   24348:	6853      	ldr	r3, [r2, #4]
   2434a:	2b00      	cmp	r3, #0
   2434c:	d07a      	beq.n	24444 <at_parser_max_params_from_str+0x110>
	state      = IDLE;
   2434e:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   24350:	4610      	mov	r0, r2
   24352:	f000 f8ed 	bl	24530 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   24356:	6832      	ldr	r2, [r6, #0]
	const char *str = *at_params_str;
   24358:	9401      	str	r4, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   2435a:	4297      	cmp	r7, r2
   2435c:	bf28      	it	cs
   2435e:	4617      	movcs	r7, r2
	int index = 0;
   24360:	462c      	mov	r4, r5
	state      = IDLE;
   24362:	4b3a      	ldr	r3, [pc, #232]	; (2444c <at_parser_max_params_from_str+0x118>)
		if (isspace(*str)) {
   24364:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 24450 <at_parser_max_params_from_str+0x11c>
	if ((chr == AT_PARAM_SEPARATOR) ||
   24368:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 24454 <at_parser_max_params_from_str+0x120>
	state      = IDLE;
   2436c:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) &&
   2436e:	9b01      	ldr	r3, [sp, #4]
   24370:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   24372:	2a00      	cmp	r2, #0
   24374:	d04a      	beq.n	2440c <at_parser_max_params_from_str+0xd8>
   24376:	42a7      	cmp	r7, r4
   24378:	d948      	bls.n	2440c <at_parser_max_params_from_str+0xd8>
		if (isspace(*str)) {
   2437a:	f812 2009 	ldrb.w	r2, [r2, r9]
		if (at_parse_detect_type(&str, index) == -1) {
   2437e:	a801      	add	r0, sp, #4
		if (isspace(*str)) {
   24380:	0711      	lsls	r1, r2, #28
			str++;
   24382:	bf48      	it	mi
   24384:	3301      	addmi	r3, #1
		if (at_parse_detect_type(&str, index) == -1) {
   24386:	4621      	mov	r1, r4
			str++;
   24388:	bf48      	it	mi
   2438a:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   2438c:	f7ff ff54 	bl	24238 <at_parse_detect_type>
   24390:	1c42      	adds	r2, r0, #1
   24392:	d03b      	beq.n	2440c <at_parser_max_params_from_str+0xd8>
		if (at_parse_process_element(&str, index, list) == -1) {
   24394:	4632      	mov	r2, r6
   24396:	4621      	mov	r1, r4
   24398:	a801      	add	r0, sp, #4
   2439a:	f7ff fe97 	bl	240cc <at_parse_process_element>
   2439e:	1c43      	adds	r3, r0, #1
   243a0:	d034      	beq.n	2440c <at_parser_max_params_from_str+0xd8>
		if (is_separator(*str)) {
   243a2:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) ||
   243a4:	781a      	ldrb	r2, [r3, #0]
   243a6:	3a2c      	subs	r2, #44	; 0x2c
   243a8:	b2d2      	uxtb	r2, r2
   243aa:	2a11      	cmp	r2, #17
   243ac:	d81b      	bhi.n	243e6 <at_parser_max_params_from_str+0xb2>
   243ae:	fa2a f202 	lsr.w	r2, sl, r2
   243b2:	07d1      	lsls	r1, r2, #31
   243b4:	d517      	bpl.n	243e6 <at_parser_max_params_from_str+0xb2>
			if (is_lfcr(*(str+1))) {
   243b6:	785b      	ldrb	r3, [r3, #1]
	if ((chr == '\r') ||
   243b8:	2b0d      	cmp	r3, #13
   243ba:	d001      	beq.n	243c0 <at_parser_max_params_from_str+0x8c>
   243bc:	2b0a      	cmp	r3, #10
   243be:	d10f      	bne.n	243e0 <at_parser_max_params_from_str+0xac>
				index++;
   243c0:	3401      	adds	r4, #1
				if (index == max_params) {
   243c2:	42bc      	cmp	r4, r7
   243c4:	d039      	beq.n	2443a <at_parser_max_params_from_str+0x106>
				if (at_parse_detect_type(&str, index) == -1) {
   243c6:	4621      	mov	r1, r4
   243c8:	a801      	add	r0, sp, #4
   243ca:	f7ff ff35 	bl	24238 <at_parse_detect_type>
   243ce:	1c42      	adds	r2, r0, #1
   243d0:	d01c      	beq.n	2440c <at_parser_max_params_from_str+0xd8>
				if (at_parse_process_element(&str,
   243d2:	4632      	mov	r2, r6
   243d4:	4621      	mov	r1, r4
   243d6:	a801      	add	r0, sp, #4
   243d8:	f7ff fe78 	bl	240cc <at_parse_process_element>
   243dc:	1c43      	adds	r3, r0, #1
   243de:	d015      	beq.n	2440c <at_parser_max_params_from_str+0xd8>
			str++;
   243e0:	9b01      	ldr	r3, [sp, #4]
   243e2:	3301      	adds	r3, #1
   243e4:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   243e6:	9a01      	ldr	r2, [sp, #4]
   243e8:	7813      	ldrb	r3, [r2, #0]
   243ea:	2b0d      	cmp	r3, #13
   243ec:	d11e      	bne.n	2442c <at_parser_max_params_from_str+0xf8>
   243ee:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   243f0:	7813      	ldrb	r3, [r2, #0]
   243f2:	4611      	mov	r1, r2
   243f4:	2b0d      	cmp	r3, #13
   243f6:	f102 0201 	add.w	r2, r2, #1
   243fa:	d0f9      	beq.n	243f0 <at_parser_max_params_from_str+0xbc>
   243fc:	2b0a      	cmp	r3, #10
   243fe:	d0f7      	beq.n	243f0 <at_parser_max_params_from_str+0xbc>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   24400:	b11b      	cbz	r3, 2440a <at_parser_max_params_from_str+0xd6>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   24402:	2b2b      	cmp	r3, #43	; 0x2b
   24404:	d001      	beq.n	2440a <at_parser_max_params_from_str+0xd6>
   24406:	2b25      	cmp	r3, #37	; 0x25
   24408:	d112      	bne.n	24430 <at_parser_max_params_from_str+0xfc>
				str += i;
   2440a:	9101      	str	r1, [sp, #4]
	*at_params_str = str;
   2440c:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   2440e:	b9b5      	cbnz	r5, 2443e <at_parser_max_params_from_str+0x10a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   24410:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   24412:	2a00      	cmp	r2, #0
   24414:	bf0c      	ite	eq
   24416:	2000      	moveq	r0, #0
   24418:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   2441c:	f1b8 0f00 	cmp.w	r8, #0
   24420:	d001      	beq.n	24426 <at_parser_max_params_from_str+0xf2>
		*next_param_str = (char *)at_params_str;
   24422:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   24426:	b002      	add	sp, #8
   24428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if ((chr == '\r') ||
   2442c:	2b0a      	cmp	r3, #10
   2442e:	d0de      	beq.n	243ee <at_parser_max_params_from_str+0xba>
		index++;
   24430:	3401      	adds	r4, #1
			oversized = true;
   24432:	42bc      	cmp	r4, r7
   24434:	bf08      	it	eq
   24436:	2501      	moveq	r5, #1
   24438:	e799      	b.n	2436e <at_parser_max_params_from_str+0x3a>
					oversized = true;
   2443a:	2501      	movs	r5, #1
   2443c:	e7e6      	b.n	2440c <at_parser_max_params_from_str+0xd8>
		return -E2BIG;
   2443e:	f06f 0006 	mvn.w	r0, #6
   24442:	e7eb      	b.n	2441c <at_parser_max_params_from_str+0xe8>
		return -EINVAL;
   24444:	f06f 0015 	mvn.w	r0, #21
   24448:	e7ed      	b.n	24426 <at_parser_max_params_from_str+0xf2>
   2444a:	bf00      	nop
   2444c:	2002bdc8 	.word	0x2002bdc8
   24450:	0004a77d 	.word	0x0004a77d
   24454:	00024001 	.word	0x00024001

00024458 <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   24458:	b538      	push	{r3, r4, r5, lr}
   2445a:	460c      	mov	r4, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   2445c:	4605      	mov	r5, r0
   2445e:	b960      	cbnz	r0, 2447a <at_params_get+0x22>
   24460:	490a      	ldr	r1, [pc, #40]	; (2448c <at_params_get+0x34>)
   24462:	232b      	movs	r3, #43	; 0x2b
   24464:	4a0a      	ldr	r2, [pc, #40]	; (24490 <at_params_get+0x38>)
   24466:	480b      	ldr	r0, [pc, #44]	; (24494 <at_params_get+0x3c>)
   24468:	f01a ffed 	bl	3f446 <printk>
   2446c:	480a      	ldr	r0, [pc, #40]	; (24498 <at_params_get+0x40>)
   2446e:	f01a ffea 	bl	3f446 <printk>
   24472:	212b      	movs	r1, #43	; 0x2b
   24474:	4806      	ldr	r0, [pc, #24]	; (24490 <at_params_get+0x38>)
   24476:	f01a fff3 	bl	3f460 <assert_post_action>

	if (index >= list->param_count) {
   2447a:	682b      	ldr	r3, [r5, #0]
   2447c:	42a3      	cmp	r3, r4
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   2447e:	bf85      	ittet	hi
   24480:	230c      	movhi	r3, #12
   24482:	6868      	ldrhi	r0, [r5, #4]
		return NULL;
   24484:	2000      	movls	r0, #0
	return &param[index];
   24486:	fb03 0004 	mlahi	r0, r3, r4, r0
}
   2448a:	bd38      	pop	{r3, r4, r5, pc}
   2448c:	000473cb 	.word	0x000473cb
   24490:	0004737c 	.word	0x0004737c
   24494:	00045316 	.word	0x00045316
   24498:	000473df 	.word	0x000473df

0002449c <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   2449c:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2449e:	4604      	mov	r4, r0
   244a0:	b960      	cbnz	r0, 244bc <at_param_size+0x20>
   244a2:	490e      	ldr	r1, [pc, #56]	; (244dc <at_param_size+0x40>)
   244a4:	2339      	movs	r3, #57	; 0x39
   244a6:	4a0e      	ldr	r2, [pc, #56]	; (244e0 <at_param_size+0x44>)
   244a8:	480e      	ldr	r0, [pc, #56]	; (244e4 <at_param_size+0x48>)
   244aa:	f01a ffcc 	bl	3f446 <printk>
   244ae:	480e      	ldr	r0, [pc, #56]	; (244e8 <at_param_size+0x4c>)
   244b0:	f01a ffc9 	bl	3f446 <printk>
   244b4:	2139      	movs	r1, #57	; 0x39
   244b6:	480a      	ldr	r0, [pc, #40]	; (244e0 <at_param_size+0x44>)
   244b8:	f01a ffd2 	bl	3f460 <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   244bc:	7823      	ldrb	r3, [r4, #0]
   244be:	2b01      	cmp	r3, #1
   244c0:	d006      	beq.n	244d0 <at_param_size+0x34>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   244c2:	2b02      	cmp	r3, #2
   244c4:	d006      	beq.n	244d4 <at_param_size+0x38>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   244c6:	3b03      	subs	r3, #3
   244c8:	2b01      	cmp	r3, #1
   244ca:	d805      	bhi.n	244d8 <at_param_size+0x3c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   244cc:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   244ce:	bd10      	pop	{r4, pc}
		return sizeof(u16_t);
   244d0:	2002      	movs	r0, #2
   244d2:	e7fc      	b.n	244ce <at_param_size+0x32>
		return sizeof(u32_t);
   244d4:	2004      	movs	r0, #4
   244d6:	e7fa      	b.n	244ce <at_param_size+0x32>
	return 0;
   244d8:	2000      	movs	r0, #0
   244da:	e7f8      	b.n	244ce <at_param_size+0x32>
   244dc:	0004734b 	.word	0x0004734b
   244e0:	0004737c 	.word	0x0004737c
   244e4:	00045316 	.word	0x00045316
   244e8:	00047360 	.word	0x00047360

000244ec <at_param_clear>:
{
   244ec:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   244ee:	4604      	mov	r4, r0
   244f0:	b960      	cbnz	r0, 2450c <at_param_clear+0x20>
   244f2:	490b      	ldr	r1, [pc, #44]	; (24520 <at_param_clear+0x34>)
   244f4:	231d      	movs	r3, #29
   244f6:	4a0b      	ldr	r2, [pc, #44]	; (24524 <at_param_clear+0x38>)
   244f8:	480b      	ldr	r0, [pc, #44]	; (24528 <at_param_clear+0x3c>)
   244fa:	f01a ffa4 	bl	3f446 <printk>
   244fe:	480b      	ldr	r0, [pc, #44]	; (2452c <at_param_clear+0x40>)
   24500:	f01a ffa1 	bl	3f446 <printk>
   24504:	211d      	movs	r1, #29
   24506:	4807      	ldr	r0, [pc, #28]	; (24524 <at_param_clear+0x38>)
   24508:	f01a ffaa 	bl	3f460 <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   2450c:	7823      	ldrb	r3, [r4, #0]
   2450e:	3b03      	subs	r3, #3
   24510:	2b01      	cmp	r3, #1
   24512:	d802      	bhi.n	2451a <at_param_clear+0x2e>
		k_free(param->value.str_val);
   24514:	68a0      	ldr	r0, [r4, #8]
   24516:	f01d f8cb 	bl	416b0 <k_free>
	param->value.int_val = 0;
   2451a:	2300      	movs	r3, #0
   2451c:	60a3      	str	r3, [r4, #8]
}
   2451e:	bd10      	pop	{r4, pc}
   24520:	0004734b 	.word	0x0004734b
   24524:	0004737c 	.word	0x0004737c
   24528:	00045316 	.word	0x00045316
   2452c:	00047360 	.word	0x00047360

00024530 <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   24530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (list == NULL || list->params == NULL) {
   24534:	4605      	mov	r5, r0
   24536:	b158      	cbz	r0, 24550 <at_params_list_clear+0x20>
   24538:	6843      	ldr	r3, [r0, #4]
   2453a:	b14b      	cbz	r3, 24550 <at_params_list_clear+0x20>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   2453c:	2400      	movs	r4, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2453e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 24594 <at_params_list_clear+0x64>
   24542:	f8df a054 	ldr.w	sl, [pc, #84]	; 24598 <at_params_list_clear+0x68>
   24546:	f8df b054 	ldr.w	fp, [pc, #84]	; 2459c <at_params_list_clear+0x6c>
	for (size_t i = 0; i < list->param_count; ++i) {
   2454a:	682b      	ldr	r3, [r5, #0]
   2454c:	429c      	cmp	r4, r3
   2454e:	d301      	bcc.n	24554 <at_params_list_clear+0x24>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   24550:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		at_param_clear(&params[i]);
   24554:	270c      	movs	r7, #12
   24556:	4367      	muls	r7, r4
   24558:	f8d5 9004 	ldr.w	r9, [r5, #4]
   2455c:	eb09 0607 	add.w	r6, r9, r7
   24560:	4630      	mov	r0, r6
   24562:	f7ff ffc3 	bl	244ec <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   24566:	b966      	cbnz	r6, 24582 <at_params_list_clear+0x52>
   24568:	4651      	mov	r1, sl
   2456a:	2314      	movs	r3, #20
   2456c:	4642      	mov	r2, r8
   2456e:	4658      	mov	r0, fp
   24570:	f01a ff69 	bl	3f446 <printk>
   24574:	4806      	ldr	r0, [pc, #24]	; (24590 <at_params_list_clear+0x60>)
   24576:	f01a ff66 	bl	3f446 <printk>
   2457a:	2114      	movs	r1, #20
   2457c:	4640      	mov	r0, r8
   2457e:	f01a ff6f 	bl	3f460 <assert_post_action>
   24582:	2300      	movs	r3, #0
	for (size_t i = 0; i < list->param_count; ++i) {
   24584:	3401      	adds	r4, #1
   24586:	f849 3007 	str.w	r3, [r9, r7]
   2458a:	6073      	str	r3, [r6, #4]
   2458c:	60b3      	str	r3, [r6, #8]
   2458e:	e7dc      	b.n	2454a <at_params_list_clear+0x1a>
   24590:	00047360 	.word	0x00047360
   24594:	0004737c 	.word	0x0004737c
   24598:	0004734b 	.word	0x0004734b
   2459c:	00045316 	.word	0x00045316

000245a0 <modem_info_parse.isra.0>:
		buf[i] = next_char;
		buf[i + 1] = current_char;
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
   245a0:	b538      	push	{r3, r4, r5, lr}
   245a2:	4605      	mov	r5, r0
			    const char *buf)
{
	int err;
	u32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   245a4:	4a08      	ldr	r2, [pc, #32]	; (245c8 <modem_info_parse.isra.0+0x28>)
static int modem_info_parse(const struct modem_info_data *modem_data,
   245a6:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   245a8:	782b      	ldrb	r3, [r5, #0]
   245aa:	2100      	movs	r1, #0
   245ac:	f7ff fec2 	bl	24334 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err != 0) {
   245b0:	4604      	mov	r4, r0
   245b2:	b938      	cbnz	r0, 245c4 <modem_info_parse.isra.0+0x24>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   245b4:	4804      	ldr	r0, [pc, #16]	; (245c8 <modem_info_parse.isra.0+0x28>)
   245b6:	f01c fe48 	bl	4124a <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   245ba:	782b      	ldrb	r3, [r5, #0]
		return -EAGAIN;
   245bc:	4298      	cmp	r0, r3
   245be:	bf88      	it	hi
   245c0:	f06f 040a 	mvnhi.w	r4, #10
	}

	return err;
}
   245c4:	4620      	mov	r0, r4
   245c6:	bd38      	pop	{r3, r4, r5, pc}
   245c8:	20023b88 	.word	0x20023b88

000245cc <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(void *context, char *response)
{
   245cc:	b513      	push	{r0, r1, r4, lr}
   245ce:	460c      	mov	r4, r1
	ARG_UNUSED(context);

	u16_t param_value;
	int err;

	if (!is_cesq_notification(response, strlen(response))) {
   245d0:	4608      	mov	r0, r1
   245d2:	f7f5 fc87 	bl	19ee4 <strlen>
	return strstr(buf, AT_CMD_CESQ_RESP) ? true : false;
   245d6:	491b      	ldr	r1, [pc, #108]	; (24644 <modem_info_rsrp_subscribe_handler+0x78>)
   245d8:	4620      	mov	r0, r4
   245da:	f01d fc14 	bl	41e06 <strstr>
	if (!is_cesq_notification(response, strlen(response))) {
   245de:	b198      	cbz	r0, 24608 <modem_info_rsrp_subscribe_handler+0x3c>
		return;
	}

	err = modem_info_parse(modem_data[MODEM_INFO_RSRP],
   245e0:	4621      	mov	r1, r4
   245e2:	4819      	ldr	r0, [pc, #100]	; (24648 <modem_info_rsrp_subscribe_handler+0x7c>)
   245e4:	f7ff ffdc 	bl	245a0 <modem_info_parse.isra.0>
			       response);
	if (err != 0) {
   245e8:	4602      	mov	r2, r0
   245ea:	b178      	cbz	r0, 2460c <modem_info_rsrp_subscribe_handler+0x40>
		LOG_ERR("modem_info_parse failed to parse "
   245ec:	2301      	movs	r3, #1
   245ee:	f04f 0000 	mov.w	r0, #0
   245f2:	4916      	ldr	r1, [pc, #88]	; (2464c <modem_info_rsrp_subscribe_handler+0x80>)
   245f4:	f363 0007 	bfi	r0, r3, #0, #8
   245f8:	4b15      	ldr	r3, [pc, #84]	; (24650 <modem_info_rsrp_subscribe_handler+0x84>)
   245fa:	1a5b      	subs	r3, r3, r1
   245fc:	08db      	lsrs	r3, r3, #3
   245fe:	4915      	ldr	r1, [pc, #84]	; (24654 <modem_info_rsrp_subscribe_handler+0x88>)
   24600:	f363 108f 	bfi	r0, r3, #6, #10

	err = at_params_short_get(&m_param_list,
				  modem_data[MODEM_INFO_RSRP]->param_index,
				  &param_value);
	if (err != 0) {
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   24604:	f01a ff3d 	bl	3f482 <log_string_sync>
		return;
	}

	modem_info_rsrp_cb(param_value);
}
   24608:	b002      	add	sp, #8
   2460a:	bd10      	pop	{r4, pc}
	err = at_params_short_get(&m_param_list,
   2460c:	f10d 0206 	add.w	r2, sp, #6
   24610:	2101      	movs	r1, #1
   24612:	4811      	ldr	r0, [pc, #68]	; (24658 <modem_info_rsrp_subscribe_handler+0x8c>)
   24614:	f01c fdc5 	bl	411a2 <at_params_short_get>
	if (err != 0) {
   24618:	4602      	mov	r2, r0
   2461a:	b160      	cbz	r0, 24636 <modem_info_rsrp_subscribe_handler+0x6a>
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   2461c:	2301      	movs	r3, #1
   2461e:	f04f 0000 	mov.w	r0, #0
   24622:	490a      	ldr	r1, [pc, #40]	; (2464c <modem_info_rsrp_subscribe_handler+0x80>)
   24624:	f363 0007 	bfi	r0, r3, #0, #8
   24628:	4b09      	ldr	r3, [pc, #36]	; (24650 <modem_info_rsrp_subscribe_handler+0x84>)
   2462a:	1a5b      	subs	r3, r3, r1
   2462c:	08db      	lsrs	r3, r3, #3
   2462e:	f363 108f 	bfi	r0, r3, #6, #10
   24632:	490a      	ldr	r1, [pc, #40]	; (2465c <modem_info_rsrp_subscribe_handler+0x90>)
   24634:	e7e6      	b.n	24604 <modem_info_rsrp_subscribe_handler+0x38>
	modem_info_rsrp_cb(param_value);
   24636:	4b0a      	ldr	r3, [pc, #40]	; (24660 <modem_info_rsrp_subscribe_handler+0x94>)
   24638:	f89d 0006 	ldrb.w	r0, [sp, #6]
   2463c:	681b      	ldr	r3, [r3, #0]
   2463e:	4798      	blx	r3
   24640:	e7e2      	b.n	24608 <modem_info_rsrp_subscribe_handler+0x3c>
   24642:	bf00      	nop
   24644:	00047427 	.word	0x00047427
   24648:	000436c9 	.word	0x000436c9
   2464c:	00042fb4 	.word	0x00042fb4
   24650:	00043044 	.word	0x00043044
   24654:	0004742d 	.word	0x0004742d
   24658:	20023b88 	.word	0x20023b88
   2465c:	00047464 	.word	0x00047464
   24660:	20023b90 	.word	0x20023b90

00024664 <modem_info_type_get>:
	if (info_type >= MODEM_INFO_COUNT) {
   24664:	2814      	cmp	r0, #20
	return modem_data[info_type]->data_type;
   24666:	bf9d      	ittte	ls
   24668:	4b02      	ldrls	r3, [pc, #8]	; (24674 <modem_info_type_get+0x10>)
   2466a:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   2466e:	7a98      	ldrbls	r0, [r3, #10]
		return -EINVAL;
   24670:	20ea      	movhi	r0, #234	; 0xea
}
   24672:	4770      	bx	lr
   24674:	00043654 	.word	0x00043654

00024678 <modem_info_name_get>:
{
   24678:	b570      	push	{r4, r5, r6, lr}
	if (name == NULL) {
   2467a:	460d      	mov	r5, r1
   2467c:	b919      	cbnz	r1, 24686 <modem_info_name_get+0xe>
		return -EINVAL;
   2467e:	f06f 0415 	mvn.w	r4, #21
}
   24682:	4620      	mov	r0, r4
   24684:	bd70      	pop	{r4, r5, r6, pc}
	len = strlen(modem_data[info]->data_name);
   24686:	4b07      	ldr	r3, [pc, #28]	; (246a4 <modem_info_name_get+0x2c>)
   24688:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2468c:	6870      	ldr	r0, [r6, #4]
   2468e:	f7f5 fc29 	bl	19ee4 <strlen>
	if (len <= 0) {
   24692:	1e04      	subs	r4, r0, #0
   24694:	ddf3      	ble.n	2467e <modem_info_name_get+0x6>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   24696:	4622      	mov	r2, r4
   24698:	6871      	ldr	r1, [r6, #4]
   2469a:	4628      	mov	r0, r5
   2469c:	f01d f989 	bl	419b2 <memcpy>
   246a0:	e7ef      	b.n	24682 <modem_info_name_get+0xa>
   246a2:	bf00      	nop
   246a4:	00043654 	.word	0x00043654

000246a8 <modem_info_short_get>:
{
   246a8:	b530      	push	{r4, r5, lr}
   246aa:	460d      	mov	r5, r1
   246ac:	b0a1      	sub	sp, #132	; 0x84
   246ae:	4604      	mov	r4, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   246b0:	2280      	movs	r2, #128	; 0x80
   246b2:	2100      	movs	r1, #0
   246b4:	4668      	mov	r0, sp
   246b6:	f01d f99c 	bl	419f2 <memset>
	if (buf == NULL) {
   246ba:	b1e5      	cbz	r5, 246f6 <modem_info_short_get+0x4e>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   246bc:	4b11      	ldr	r3, [pc, #68]	; (24704 <modem_info_short_get+0x5c>)
   246be:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   246c2:	7aa3      	ldrb	r3, [r4, #10]
   246c4:	2b03      	cmp	r3, #3
   246c6:	d016      	beq.n	246f6 <modem_info_short_get+0x4e>
	err = at_cmd_write(modem_data[info]->cmd,
   246c8:	2300      	movs	r3, #0
   246ca:	2280      	movs	r2, #128	; 0x80
   246cc:	4669      	mov	r1, sp
   246ce:	6820      	ldr	r0, [r4, #0]
   246d0:	f004 fb62 	bl	28d98 <at_cmd_write>
	if (err != 0) {
   246d4:	b990      	cbnz	r0, 246fc <modem_info_short_get+0x54>
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_length]);
   246d6:	4669      	mov	r1, sp
   246d8:	f104 0009 	add.w	r0, r4, #9
   246dc:	f7ff ff60 	bl	245a0 <modem_info_parse.isra.0>
	if (err) {
   246e0:	b938      	cbnz	r0, 246f2 <modem_info_short_get+0x4a>
	err = at_params_short_get(&m_param_list,
   246e2:	462a      	mov	r2, r5
   246e4:	7a21      	ldrb	r1, [r4, #8]
   246e6:	4808      	ldr	r0, [pc, #32]	; (24708 <modem_info_short_get+0x60>)
   246e8:	f01c fd5b 	bl	411a2 <at_params_short_get>
	return sizeof(u16_t);
   246ec:	2800      	cmp	r0, #0
   246ee:	bf08      	it	eq
   246f0:	2002      	moveq	r0, #2
}
   246f2:	b021      	add	sp, #132	; 0x84
   246f4:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   246f6:	f06f 0015 	mvn.w	r0, #21
   246fa:	e7fa      	b.n	246f2 <modem_info_short_get+0x4a>
		return -EIO;
   246fc:	f06f 0004 	mvn.w	r0, #4
   24700:	e7f7      	b.n	246f2 <modem_info_short_get+0x4a>
   24702:	bf00      	nop
   24704:	00043654 	.word	0x00043654
   24708:	20023b88 	.word	0x20023b88

0002470c <modem_info_string_get>:
{
   2470c:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t len = 0;
   2470e:	2400      	movs	r4, #0
{
   24710:	460d      	mov	r5, r1
   24712:	b0a3      	sub	sp, #140	; 0x8c
   24714:	4607      	mov	r7, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   24716:	2280      	movs	r2, #128	; 0x80
   24718:	4621      	mov	r1, r4
   2471a:	a802      	add	r0, sp, #8
	size_t len = 0;
   2471c:	9401      	str	r4, [sp, #4]
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   2471e:	f01d f968 	bl	419f2 <memset>
	if (buf == NULL) {
   24722:	2d00      	cmp	r5, #0
   24724:	d068      	beq.n	247f8 <modem_info_string_get+0xec>
	err = at_cmd_write(modem_data[info]->cmd,
   24726:	4b37      	ldr	r3, [pc, #220]	; (24804 <modem_info_string_get+0xf8>)
   24728:	2280      	movs	r2, #128	; 0x80
   2472a:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
   2472e:	a902      	add	r1, sp, #8
   24730:	4623      	mov	r3, r4
   24732:	6830      	ldr	r0, [r6, #0]
   24734:	f004 fb30 	bl	28d98 <at_cmd_write>
	if (err != 0) {
   24738:	2800      	cmp	r0, #0
   2473a:	d160      	bne.n	247fe <modem_info_string_get+0xf2>
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_length]);
   2473c:	a902      	add	r1, sp, #8
   2473e:	f106 0009 	add.w	r0, r6, #9
   24742:	f7ff ff2d 	bl	245a0 <modem_info_parse.isra.0>
	if (err) {
   24746:	4604      	mov	r4, r0
   24748:	b188      	cbz	r0, 2476e <modem_info_string_get+0x62>
		LOG_ERR("Unable to parse data: %d", err);
   2474a:	2301      	movs	r3, #1
   2474c:	f04f 0000 	mov.w	r0, #0
   24750:	4a2d      	ldr	r2, [pc, #180]	; (24808 <modem_info_string_get+0xfc>)
   24752:	f363 0007 	bfi	r0, r3, #0, #8
   24756:	4b2d      	ldr	r3, [pc, #180]	; (2480c <modem_info_string_get+0x100>)
   24758:	492d      	ldr	r1, [pc, #180]	; (24810 <modem_info_string_get+0x104>)
   2475a:	1a9b      	subs	r3, r3, r2
   2475c:	4622      	mov	r2, r4
   2475e:	08db      	lsrs	r3, r3, #3
   24760:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Unable to obtain short: %d", err);
   24764:	f01a fe8d 	bl	3f482 <log_string_sync>
}
   24768:	4620      	mov	r0, r4
   2476a:	b023      	add	sp, #140	; 0x8c
   2476c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_SHORT) {
   2476e:	7ab3      	ldrb	r3, [r6, #10]
   24770:	2b01      	cmp	r3, #1
   24772:	d12c      	bne.n	247ce <modem_info_string_get+0xc2>
		err = at_params_short_get(&m_param_list,
   24774:	f10d 0202 	add.w	r2, sp, #2
   24778:	7a31      	ldrb	r1, [r6, #8]
   2477a:	4826      	ldr	r0, [pc, #152]	; (24814 <modem_info_string_get+0x108>)
   2477c:	f01c fd11 	bl	411a2 <at_params_short_get>
		if (err) {
   24780:	4604      	mov	r4, r0
   24782:	b168      	cbz	r0, 247a0 <modem_info_string_get+0x94>
			LOG_ERR("Unable to obtain short: %d", err);
   24784:	2301      	movs	r3, #1
   24786:	f04f 0000 	mov.w	r0, #0
   2478a:	4a1f      	ldr	r2, [pc, #124]	; (24808 <modem_info_string_get+0xfc>)
   2478c:	f363 0007 	bfi	r0, r3, #0, #8
   24790:	4b1e      	ldr	r3, [pc, #120]	; (2480c <modem_info_string_get+0x100>)
   24792:	4921      	ldr	r1, [pc, #132]	; (24818 <modem_info_string_get+0x10c>)
   24794:	1a9b      	subs	r3, r3, r2
   24796:	08db      	lsrs	r3, r3, #3
   24798:	f363 108f 	bfi	r0, r3, #6, #10
   2479c:	4622      	mov	r2, r4
   2479e:	e7e1      	b.n	24764 <modem_info_string_get+0x58>
		err = snprintf(buf, MODEM_INFO_MAX_RESPONSE_SIZE,
   247a0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   247a4:	4a1d      	ldr	r2, [pc, #116]	; (2481c <modem_info_string_get+0x110>)
   247a6:	2164      	movs	r1, #100	; 0x64
   247a8:	4628      	mov	r0, r5
   247aa:	f018 fea1 	bl	3d4f0 <sniprintf>
	if (info == MODEM_INFO_ICCID) {
   247ae:	2f0e      	cmp	r7, #14
   247b0:	d107      	bne.n	247c2 <modem_info_string_get+0xb6>
   247b2:	462c      	mov	r4, r5
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   247b4:	4628      	mov	r0, r5
   247b6:	f7f5 fb95 	bl	19ee4 <strlen>
   247ba:	1ca3      	adds	r3, r4, #2
   247bc:	1b64      	subs	r4, r4, r5
   247be:	42a0      	cmp	r0, r4
   247c0:	d810      	bhi.n	247e4 <modem_info_string_get+0xd8>
	return len <= 0 ? -ENOTSUP : len;
   247c2:	9c01      	ldr	r4, [sp, #4]
   247c4:	2c00      	cmp	r4, #0
   247c6:	bf08      	it	eq
   247c8:	f06f 0485 	mvneq.w	r4, #133	; 0x85
   247cc:	e7cc      	b.n	24768 <modem_info_string_get+0x5c>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   247ce:	2b03      	cmp	r3, #3
   247d0:	d1ed      	bne.n	247ae <modem_info_string_get+0xa2>
		len = MODEM_INFO_MAX_RESPONSE_SIZE;
   247d2:	2364      	movs	r3, #100	; 0x64
		err = at_params_string_get(&m_param_list,
   247d4:	462a      	mov	r2, r5
		len = MODEM_INFO_MAX_RESPONSE_SIZE;
   247d6:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&m_param_list,
   247d8:	7a31      	ldrb	r1, [r6, #8]
   247da:	ab01      	add	r3, sp, #4
   247dc:	480d      	ldr	r0, [pc, #52]	; (24814 <modem_info_string_get+0x108>)
   247de:	f01c fd0d 	bl	411fc <at_params_string_get>
   247e2:	e7e4      	b.n	247ae <modem_info_string_get+0xa2>
		current_char = buf[i];
   247e4:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   247e8:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   247ec:	461c      	mov	r4, r3
		buf[i] = next_char;
   247ee:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   247f2:	f803 2c01 	strb.w	r2, [r3, #-1]
   247f6:	e7dd      	b.n	247b4 <modem_info_string_get+0xa8>
		return -EINVAL;
   247f8:	f06f 0415 	mvn.w	r4, #21
   247fc:	e7b4      	b.n	24768 <modem_info_string_get+0x5c>
		return -EIO;
   247fe:	f06f 0404 	mvn.w	r4, #4
   24802:	e7b1      	b.n	24768 <modem_info_string_get+0x5c>
   24804:	00043654 	.word	0x00043654
   24808:	00042fb4 	.word	0x00042fb4
   2480c:	00043044 	.word	0x00043044
   24810:	00047484 	.word	0x00047484
   24814:	20023b88 	.word	0x20023b88
   24818:	0004749d 	.word	0x0004749d
   2481c:	0004825b 	.word	0x0004825b

00024820 <modem_info_rsrp_register>:

int modem_info_rsrp_register(rsrp_cb_t cb)
{
	modem_info_rsrp_cb = cb;
   24820:	4b12      	ldr	r3, [pc, #72]	; (2486c <modem_info_rsrp_register+0x4c>)
{
   24822:	b510      	push	{r4, lr}

	int rc = at_notif_register_handler(NULL,
   24824:	4912      	ldr	r1, [pc, #72]	; (24870 <modem_info_rsrp_register+0x50>)
	modem_info_rsrp_cb = cb;
   24826:	6018      	str	r0, [r3, #0]
	int rc = at_notif_register_handler(NULL,
   24828:	2000      	movs	r0, #0
   2482a:	f7ff fa13 	bl	23c54 <at_notif_register_handler>
		modem_info_rsrp_subscribe_handler);
	if (rc != 0) {
   2482e:	4604      	mov	r4, r0
   24830:	b180      	cbz	r0, 24854 <modem_info_rsrp_register+0x34>
		LOG_ERR("Can't register handler rc=%d", rc);
   24832:	2301      	movs	r3, #1
   24834:	f04f 0000 	mov.w	r0, #0
   24838:	4a0e      	ldr	r2, [pc, #56]	; (24874 <modem_info_rsrp_register+0x54>)
   2483a:	f363 0007 	bfi	r0, r3, #0, #8
   2483e:	4b0e      	ldr	r3, [pc, #56]	; (24878 <modem_info_rsrp_register+0x58>)
   24840:	490e      	ldr	r1, [pc, #56]	; (2487c <modem_info_rsrp_register+0x5c>)
   24842:	1a9b      	subs	r3, r3, r2
   24844:	08db      	lsrs	r3, r3, #3
   24846:	f363 108f 	bfi	r0, r3, #6, #10
   2484a:	4622      	mov	r2, r4
   2484c:	f01a fe19 	bl	3f482 <log_string_sync>
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
		return -EIO;
	}

	return 0;
}
   24850:	4620      	mov	r0, r4
   24852:	bd10      	pop	{r4, pc}
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
   24854:	4603      	mov	r3, r0
   24856:	4602      	mov	r2, r0
   24858:	4601      	mov	r1, r0
   2485a:	4809      	ldr	r0, [pc, #36]	; (24880 <modem_info_rsrp_register+0x60>)
   2485c:	f004 fa9c 	bl	28d98 <at_cmd_write>
   24860:	1e04      	subs	r4, r0, #0
		return -EIO;
   24862:	bf18      	it	ne
   24864:	f06f 0404 	mvnne.w	r4, #4
   24868:	e7f2      	b.n	24850 <modem_info_rsrp_register+0x30>
   2486a:	bf00      	nop
   2486c:	20023b90 	.word	0x20023b90
   24870:	000245cd 	.word	0x000245cd
   24874:	00042fb4 	.word	0x00042fb4
   24878:	00043044 	.word	0x00043044
   2487c:	00047400 	.word	0x00047400
   24880:	0004741d 	.word	0x0004741d

00024884 <modem_info_init>:

int modem_info_init(void)
{
	/* Init at_cmd_parser storage module */
	int err = at_params_list_init(&m_param_list,
   24884:	210a      	movs	r1, #10
   24886:	4801      	ldr	r0, [pc, #4]	; (2488c <modem_info_init+0x8>)
   24888:	f01c bbe0 	b.w	4104c <at_params_list_init>
   2488c:	20023b88 	.word	0x20023b88

00024890 <modem_data_get>:

	return 0;
}

static int modem_data_get(struct lte_param *param)
{
   24890:	b538      	push	{r3, r4, r5, lr}
   24892:	4605      	mov	r5, r0
	enum at_param_type data_type;
	int ret;

	data_type = modem_info_type_get(param->type);
   24894:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
   24898:	f7ff fee4 	bl	24664 <modem_info_type_get>

	if (data_type < 0) {
		return -EINVAL;
	}

	if (data_type == AT_PARAM_TYPE_STRING) {
   2489c:	2803      	cmp	r0, #3
   2489e:	d11b      	bne.n	248d8 <modem_data_get+0x48>
		ret = modem_info_string_get(param->type, param->value_string);
   248a0:	1ca9      	adds	r1, r5, #2
   248a2:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   248a6:	f7ff ff31 	bl	2470c <modem_info_string_get>
		if (ret < 0) {
   248aa:	1e04      	subs	r4, r0, #0
   248ac:	db02      	blt.n	248b4 <modem_data_get+0x24>
			LOG_ERR("Link data not obtained: %d", ret);
			return ret;
		}
	}

	return 0;
   248ae:	2400      	movs	r4, #0
}
   248b0:	4620      	mov	r0, r4
   248b2:	bd38      	pop	{r3, r4, r5, pc}
			LOG_ERR("Link data not obtained: %d %d", param->type, ret);
   248b4:	2301      	movs	r3, #1
   248b6:	f04f 0000 	mov.w	r0, #0
   248ba:	4a14      	ldr	r2, [pc, #80]	; (2490c <modem_data_get+0x7c>)
   248bc:	f363 0007 	bfi	r0, r3, #0, #8
   248c0:	4b13      	ldr	r3, [pc, #76]	; (24910 <modem_data_get+0x80>)
   248c2:	4914      	ldr	r1, [pc, #80]	; (24914 <modem_data_get+0x84>)
   248c4:	1a9b      	subs	r3, r3, r2
   248c6:	08db      	lsrs	r3, r3, #3
   248c8:	f363 108f 	bfi	r0, r3, #6, #10
   248cc:	f895 206c 	ldrb.w	r2, [r5, #108]	; 0x6c
   248d0:	4623      	mov	r3, r4
   248d2:	f01a fdd6 	bl	3f482 <log_string_sync>
			return ret;
   248d6:	e7eb      	b.n	248b0 <modem_data_get+0x20>
	} else if (data_type == AT_PARAM_TYPE_NUM_SHORT) {
   248d8:	2801      	cmp	r0, #1
   248da:	d1e8      	bne.n	248ae <modem_data_get+0x1e>
		ret = modem_info_short_get(param->type, &param->value);
   248dc:	4629      	mov	r1, r5
   248de:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   248e2:	f7ff fee1 	bl	246a8 <modem_info_short_get>
		if (ret < 0) {
   248e6:	1e04      	subs	r4, r0, #0
   248e8:	dae1      	bge.n	248ae <modem_data_get+0x1e>
			LOG_ERR("Link data not obtained: %d", ret);
   248ea:	2301      	movs	r3, #1
   248ec:	f04f 0000 	mov.w	r0, #0
   248f0:	4a06      	ldr	r2, [pc, #24]	; (2490c <modem_data_get+0x7c>)
   248f2:	f363 0007 	bfi	r0, r3, #0, #8
   248f6:	4b06      	ldr	r3, [pc, #24]	; (24910 <modem_data_get+0x80>)
   248f8:	4907      	ldr	r1, [pc, #28]	; (24918 <modem_data_get+0x88>)
   248fa:	1a9b      	subs	r3, r3, r2
   248fc:	08db      	lsrs	r3, r3, #3
   248fe:	f363 108f 	bfi	r0, r3, #6, #10
   24902:	4622      	mov	r2, r4
   24904:	f01a fdbd 	bl	3f482 <log_string_sync>
			return ret;
   24908:	e7d2      	b.n	248b0 <modem_data_get+0x20>
   2490a:	bf00      	nop
   2490c:	00042fb4 	.word	0x00042fb4
   24910:	00043054 	.word	0x00043054
   24914:	00047621 	.word	0x00047621
   24918:	0004763f 	.word	0x0004763f

0002491c <modem_info_params_init>:
	if (modem == NULL) {
   2491c:	2800      	cmp	r0, #0
   2491e:	d043      	beq.n	249a8 <modem_info_params_init+0x8c>
	modem->network.current_band.type	= MODEM_INFO_CUR_BAND;
   24920:	2301      	movs	r3, #1
   24922:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
	modem->network.sup_band.type		= MODEM_INFO_SUP_BAND;
   24926:	2302      	movs	r3, #2
   24928:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
	modem->network.area_code.type		= MODEM_INFO_AREA_CODE;
   2492c:	2303      	movs	r3, #3
   2492e:	f880 314c 	strb.w	r3, [r0, #332]	; 0x14c
	modem->network.current_operator.type	= MODEM_INFO_OPERATOR;
   24932:	2305      	movs	r3, #5
   24934:	f880 31bc 	strb.w	r3, [r0, #444]	; 0x1bc
	modem->network.mcc.type			= MODEM_INFO_MCC;
   24938:	2306      	movs	r3, #6
   2493a:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
	modem->network.mnc.type			= MODEM_INFO_MNC;
   2493e:	2307      	movs	r3, #7
   24940:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
	modem->network.cellid_hex.type		= MODEM_INFO_CELLID;
   24944:	2308      	movs	r3, #8
   24946:	f880 330c 	strb.w	r3, [r0, #780]	; 0x30c
	modem->network.ip_address.type		= MODEM_INFO_IP_ADDRESS;
   2494a:	2309      	movs	r3, #9
   2494c:	f880 337c 	strb.w	r3, [r0, #892]	; 0x37c
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   24950:	2304      	movs	r3, #4
   24952:	f880 33ec 	strb.w	r3, [r0, #1004]	; 0x3ec
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   24956:	230f      	movs	r3, #15
   24958:	f880 345c 	strb.w	r3, [r0, #1116]	; 0x45c
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   2495c:	2310      	movs	r3, #16
   2495e:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   24962:	2311      	movs	r3, #17
   24964:	f880 353c 	strb.w	r3, [r0, #1340]	; 0x53c
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   24968:	2314      	movs	r3, #20
   2496a:	f880 35ac 	strb.w	r3, [r0, #1452]	; 0x5ac
	modem->sim.uicc.type			= MODEM_INFO_UICC;
   2496e:	230a      	movs	r3, #10
   24970:	f880 3634 	strb.w	r3, [r0, #1588]	; 0x634
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   24974:	230e      	movs	r3, #14
   24976:	f880 36a4 	strb.w	r3, [r0, #1700]	; 0x6a4
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   2497a:	2312      	movs	r3, #18
   2497c:	f880 3714 	strb.w	r3, [r0, #1812]	; 0x714
	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   24980:	230d      	movs	r3, #13
   24982:	f880 3784 	strb.w	r3, [r0, #1924]	; 0x784
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   24986:	230b      	movs	r3, #11
   24988:	f880 37f4 	strb.w	r3, [r0, #2036]	; 0x7f4
	modem->device.imei.type			= MODEM_INFO_IMEI;
   2498c:	2313      	movs	r3, #19
   2498e:	f880 3864 	strb.w	r3, [r0, #2148]	; 0x864
	modem->device.board			= CONFIG_BOARD;
   24992:	4b07      	ldr	r3, [pc, #28]	; (249b0 <modem_info_params_init+0x94>)
   24994:	f8c0 3868 	str.w	r3, [r0, #2152]	; 0x868
	modem->device.app_version		= STRINGIFY(APP_VERSION);
   24998:	4b06      	ldr	r3, [pc, #24]	; (249b4 <modem_info_params_init+0x98>)
   2499a:	f8c0 386c 	str.w	r3, [r0, #2156]	; 0x86c
	modem->device.app_name			= STRINGIFY(PROJECT_NAME);
   2499e:	4b06      	ldr	r3, [pc, #24]	; (249b8 <modem_info_params_init+0x9c>)
   249a0:	f8c0 3870 	str.w	r3, [r0, #2160]	; 0x870
	return 0;
   249a4:	2000      	movs	r0, #0
   249a6:	4770      	bx	lr
		return -EINVAL;
   249a8:	f06f 0015 	mvn.w	r0, #21
}
   249ac:	4770      	bx	lr
   249ae:	bf00      	nop
   249b0:	000476af 	.word	0x000476af
   249b4:	000476c0 	.word	0x000476c0
   249b8:	000476dd 	.word	0x000476dd

000249bc <modem_info_params_get>:

int modem_info_params_get(struct modem_param_info *modem)
{
   249bc:	b570      	push	{r4, r5, r6, lr}
	int ret;

	if (modem == NULL) {
   249be:	4604      	mov	r4, r0
   249c0:	2800      	cmp	r0, #0
   249c2:	f000 80b9 	beq.w	24b38 <modem_info_params_get+0x17c>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK)) {
		ret = modem_data_get(&modem->network.current_band);
   249c6:	f7ff ff63 	bl	24890 <modem_data_get>
   249ca:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->network.sup_band);
   249cc:	f104 0070 	add.w	r0, r4, #112	; 0x70
   249d0:	f7ff ff5e 	bl	24890 <modem_data_get>
   249d4:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ip_address);
   249d6:	f504 7044 	add.w	r0, r4, #784	; 0x310
   249da:	f7ff ff59 	bl	24890 <modem_data_get>
   249de:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ue_mode);
   249e0:	f504 7060 	add.w	r0, r4, #896	; 0x380
   249e4:	f7ff ff54 	bl	24890 <modem_data_get>
   249e8:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.current_operator);
   249ea:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   249ee:	f7ff ff4f 	bl	24890 <modem_data_get>
   249f2:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.cellid_hex);
   249f4:	f504 7028 	add.w	r0, r4, #672	; 0x2a0
   249f8:	f7ff ff4a 	bl	24890 <modem_data_get>
   249fc:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.area_code);
   249fe:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   24a02:	f7ff ff45 	bl	24890 <modem_data_get>
   24a06:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.lte_mode);
   24a08:	f504 707c 	add.w	r0, r4, #1008	; 0x3f0
   24a0c:	f7ff ff40 	bl	24890 <modem_data_get>
   24a10:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.nbiot_mode);
   24a12:	f504 608c 	add.w	r0, r4, #1120	; 0x460
   24a16:	f7ff ff3b 	bl	24890 <modem_data_get>
   24a1a:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.gps_mode);
   24a1c:	f504 609a 	add.w	r0, r4, #1232	; 0x4d0
   24a20:	f7ff ff36 	bl	24890 <modem_data_get>
   24a24:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.date_time);
   24a26:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
   24a2a:	f7ff ff31 	bl	24890 <modem_data_get>
   24a2e:	f8b4 2152 	ldrh.w	r2, [r4, #338]	; 0x152
   24a32:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   24a36:	4405      	add	r5, r0
	memcpy(mcc->value_string, current_operator->value_string, 3);
   24a38:	f504 70e1 	add.w	r0, r4, #450	; 0x1c2
   24a3c:	f8a4 21c2 	strh.w	r2, [r4, #450]	; 0x1c2
   24a40:	7083      	strb	r3, [r0, #2]
   24a42:	f894 3157 	ldrb.w	r3, [r4, #343]	; 0x157
   24a46:	f8b4 2155 	ldrh.w	r2, [r4, #341]	; 0x155
   24a4a:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
   24a4e:	f8a4 2232 	strh.w	r2, [r4, #562]	; 0x232
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   24a52:	2100      	movs	r1, #0
   24a54:	220a      	movs	r2, #10
   24a56:	f018 fe2d 	bl	3d6b4 <strtol>
		memcpy(&mnc->value_string, &current_operator->value_string[3], 3);
   24a5a:	f204 2632 	addw	r6, r4, #562	; 0x232
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   24a5e:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   24a62:	220a      	movs	r2, #10
   24a64:	2100      	movs	r1, #0
   24a66:	4630      	mov	r0, r6
   24a68:	f018 fe24 	bl	3d6b4 <strtol>
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   24a6c:	2210      	movs	r2, #16
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   24a6e:	f8a4 0230 	strh.w	r0, [r4, #560]	; 0x230
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   24a72:	2100      	movs	r1, #0
   24a74:	f204 20a2 	addw	r0, r4, #674	; 0x2a2
   24a78:	f018 fe1c 	bl	3d6b4 <strtol>
   24a7c:	f7f3 fe22 	bl	186c4 <__aeabi_i2d>
   24a80:	f504 66b6 	add.w	r6, r4, #1456	; 0x5b0
   24a84:	e9c6 0100 	strd	r0, r1, [r6]
	area_code->value_string[4] = '\0';
   24a88:	2100      	movs	r1, #0
	area_code->value = strtol(area_code->value_string, NULL, 16);
   24a8a:	2210      	movs	r2, #16
	area_code->value_string[4] = '\0';
   24a8c:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	area_code->value = strtol(area_code->value_string, NULL, 16);
   24a90:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
   24a94:	f018 fe0e 	bl	3d6b4 <strtol>
   24a98:	f8a4 00e0 	strh.w	r0, [r4, #224]	; 0xe0
				&modem->network.mcc,
				&modem->network.mnc);
		ret += cellid_to_dec(&modem->network.cellid_hex,
				&modem->network.cellid_dec);
		ret += area_code_parse(&modem->network.area_code);
		if (ret) {
   24a9c:	b195      	cbz	r5, 24ac4 <modem_info_params_get+0x108>
			LOG_ERR("Network data not obtained: %d", ret);
   24a9e:	2301      	movs	r3, #1
   24aa0:	f04f 0000 	mov.w	r0, #0
   24aa4:	4a26      	ldr	r2, [pc, #152]	; (24b40 <modem_info_params_get+0x184>)
   24aa6:	f363 0007 	bfi	r0, r3, #0, #8
   24aaa:	4b26      	ldr	r3, [pc, #152]	; (24b44 <modem_info_params_get+0x188>)
   24aac:	4926      	ldr	r1, [pc, #152]	; (24b48 <modem_info_params_get+0x18c>)
   24aae:	1a9b      	subs	r3, r3, r2
   24ab0:	462a      	mov	r2, r5
   24ab2:	08db      	lsrs	r3, r3, #3
   24ab4:	f363 108f 	bfi	r0, r3, #6, #10
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE)) {
		ret = modem_data_get(&modem->device.modem_fw);
		ret += modem_data_get(&modem->device.battery);
		ret += modem_data_get(&modem->device.imei);
		if (ret) {
			LOG_ERR("Device data not obtained: %d", ret);
   24ab8:	f01a fce3 	bl	3f482 <log_string_sync>
			return -EAGAIN;
   24abc:	f06f 020a 	mvn.w	r2, #10
		}
	}

	return 0;
}
   24ac0:	4610      	mov	r0, r2
   24ac2:	bd70      	pop	{r4, r5, r6, pc}
		ret = modem_data_get(&modem->sim.uicc);
   24ac4:	f504 60b9 	add.w	r0, r4, #1480	; 0x5c8
   24ac8:	f7ff fee2 	bl	24890 <modem_data_get>
   24acc:	4605      	mov	r5, r0
			ret += modem_data_get(&modem->sim.iccid);
   24ace:	f504 60c7 	add.w	r0, r4, #1592	; 0x638
   24ad2:	f7ff fedd 	bl	24890 <modem_data_get>
   24ad6:	4405      	add	r5, r0
			ret += modem_data_get(&modem->sim.imsi);
   24ad8:	f504 60d5 	add.w	r0, r4, #1704	; 0x6a8
   24adc:	f7ff fed8 	bl	24890 <modem_data_get>
		if (ret) {
   24ae0:	182a      	adds	r2, r5, r0
   24ae2:	d00c      	beq.n	24afe <modem_info_params_get+0x142>
			LOG_ERR("Sim data not obtained: %d", ret);
   24ae4:	2301      	movs	r3, #1
   24ae6:	f04f 0000 	mov.w	r0, #0
   24aea:	4915      	ldr	r1, [pc, #84]	; (24b40 <modem_info_params_get+0x184>)
   24aec:	f363 0007 	bfi	r0, r3, #0, #8
   24af0:	4b14      	ldr	r3, [pc, #80]	; (24b44 <modem_info_params_get+0x188>)
   24af2:	1a5b      	subs	r3, r3, r1
   24af4:	08db      	lsrs	r3, r3, #3
   24af6:	f363 108f 	bfi	r0, r3, #6, #10
   24afa:	4914      	ldr	r1, [pc, #80]	; (24b4c <modem_info_params_get+0x190>)
   24afc:	e7dc      	b.n	24ab8 <modem_info_params_get+0xfc>
		ret = modem_data_get(&modem->device.modem_fw);
   24afe:	f504 60e3 	add.w	r0, r4, #1816	; 0x718
   24b02:	f7ff fec5 	bl	24890 <modem_data_get>
   24b06:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->device.battery);
   24b08:	f504 60f1 	add.w	r0, r4, #1928	; 0x788
   24b0c:	f7ff fec0 	bl	24890 <modem_data_get>
   24b10:	4405      	add	r5, r0
		ret += modem_data_get(&modem->device.imei);
   24b12:	f504 60ff 	add.w	r0, r4, #2040	; 0x7f8
   24b16:	f7ff febb 	bl	24890 <modem_data_get>
		if (ret) {
   24b1a:	182a      	adds	r2, r5, r0
   24b1c:	d0d0      	beq.n	24ac0 <modem_info_params_get+0x104>
			LOG_ERR("Device data not obtained: %d", ret);
   24b1e:	2301      	movs	r3, #1
   24b20:	f04f 0000 	mov.w	r0, #0
   24b24:	4906      	ldr	r1, [pc, #24]	; (24b40 <modem_info_params_get+0x184>)
   24b26:	f363 0007 	bfi	r0, r3, #0, #8
   24b2a:	4b06      	ldr	r3, [pc, #24]	; (24b44 <modem_info_params_get+0x188>)
   24b2c:	1a5b      	subs	r3, r3, r1
   24b2e:	08db      	lsrs	r3, r3, #3
   24b30:	f363 108f 	bfi	r0, r3, #6, #10
   24b34:	4906      	ldr	r1, [pc, #24]	; (24b50 <modem_info_params_get+0x194>)
   24b36:	e7bf      	b.n	24ab8 <modem_info_params_get+0xfc>
		return -EINVAL;
   24b38:	f06f 0215 	mvn.w	r2, #21
   24b3c:	e7c0      	b.n	24ac0 <modem_info_params_get+0x104>
   24b3e:	bf00      	nop
   24b40:	00042fb4 	.word	0x00042fb4
   24b44:	00043054 	.word	0x00043054
   24b48:	0004765a 	.word	0x0004765a
   24b4c:	00047678 	.word	0x00047678
   24b50:	00047692 	.word	0x00047692

00024b54 <network_data_add>:

	return total_len;
}

static int network_data_add(struct network_param *network, cJSON *json_obj)
{
   24b54:	b570      	push	{r4, r5, r6, lr}
   24b56:	460e      	mov	r6, r1
   24b58:	b09a      	sub	sp, #104	; 0x68

	static const char lte_string[]	 = "LTE-M";
	static const char nbiot_string[] = "NB-IoT";
	static const char gps_string[]	 = " GPS";

	if (network == NULL || json_obj == NULL) {
   24b5a:	4605      	mov	r5, r0
   24b5c:	2800      	cmp	r0, #0
   24b5e:	d065      	beq.n	24c2c <network_data_add+0xd8>
   24b60:	2900      	cmp	r1, #0
   24b62:	d063      	beq.n	24c2c <network_data_add+0xd8>
		return -EINVAL;
	}

	total_len = json_add_data(&network->current_band, json_obj);
   24b64:	f01c fb9e 	bl	412a4 <json_add_data>
	total_len += json_add_data(&network->sup_band, json_obj);
   24b68:	4631      	mov	r1, r6
	total_len = json_add_data(&network->current_band, json_obj);
   24b6a:	4604      	mov	r4, r0
	total_len += json_add_data(&network->sup_band, json_obj);
   24b6c:	f105 0070 	add.w	r0, r5, #112	; 0x70
   24b70:	f01c fb98 	bl	412a4 <json_add_data>
	total_len += json_add_data(&network->area_code, json_obj);
   24b74:	4631      	mov	r1, r6
	total_len += json_add_data(&network->sup_band, json_obj);
   24b76:	4404      	add	r4, r0
	total_len += json_add_data(&network->area_code, json_obj);
   24b78:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
   24b7c:	f01c fb92 	bl	412a4 <json_add_data>
	total_len += json_add_data(&network->current_operator, json_obj);
   24b80:	4631      	mov	r1, r6
	total_len += json_add_data(&network->area_code, json_obj);
   24b82:	4404      	add	r4, r0
	total_len += json_add_data(&network->current_operator, json_obj);
   24b84:	f505 70a8 	add.w	r0, r5, #336	; 0x150
   24b88:	f01c fb8c 	bl	412a4 <json_add_data>
	total_len += json_add_data(&network->ip_address, json_obj);
   24b8c:	4631      	mov	r1, r6
	total_len += json_add_data(&network->current_operator, json_obj);
   24b8e:	4404      	add	r4, r0
	total_len += json_add_data(&network->ip_address, json_obj);
   24b90:	f505 7044 	add.w	r0, r5, #784	; 0x310
   24b94:	f01c fb86 	bl	412a4 <json_add_data>
	total_len += json_add_data(&network->ue_mode, json_obj);
   24b98:	4631      	mov	r1, r6
	total_len += json_add_data(&network->ip_address, json_obj);
   24b9a:	4404      	add	r4, r0
	total_len += json_add_data(&network->ue_mode, json_obj);
   24b9c:	f505 7060 	add.w	r0, r5, #896	; 0x380
   24ba0:	f01c fb80 	bl	412a4 <json_add_data>

	len = modem_info_name_get(network->cellid_hex.type, data_name);
   24ba4:	a901      	add	r1, sp, #4
	total_len += json_add_data(&network->ue_mode, json_obj);
   24ba6:	4404      	add	r4, r0
	len = modem_info_name_get(network->cellid_hex.type, data_name);
   24ba8:	f895 030c 	ldrb.w	r0, [r5, #780]	; 0x30c
   24bac:	f7ff fd64 	bl	24678 <modem_info_name_get>
	data_name[len] =  '\0';
   24bb0:	ab1a      	add	r3, sp, #104	; 0x68
   24bb2:	4418      	add	r0, r3
   24bb4:	2300      	movs	r3, #0
   24bb6:	f800 3c64 	strb.w	r3, [r0, #-100]
	ret = json_add_num(json_obj, data_name, network->cellid_dec);
   24bba:	f505 63b6 	add.w	r3, r5, #1456	; 0x5b0
	json_num = cJSON_CreateNumber(num);
   24bbe:	ed93 0b00 	vldr	d0, [r3]
   24bc2:	f7f5 fe35 	bl	1a830 <cJSON_CreateNumber>
	if (json_num == NULL) {
   24bc6:	4602      	mov	r2, r0
   24bc8:	b120      	cbz	r0, 24bd4 <network_data_add+0x80>
	cJSON_AddItemToObject(parent, str, item);
   24bca:	a901      	add	r1, sp, #4
   24bcc:	4630      	mov	r0, r6
   24bce:	f01b fdfb 	bl	407c8 <cJSON_AddItemToObject>

	if (ret) {
		LOG_DBG("Unable to add the cell ID.");
	} else {
		total_len += sizeof(double);
   24bd2:	3408      	adds	r4, #8
	}

	if (network->lte_mode.value == 1) {
   24bd4:	f8b5 33f0 	ldrh.w	r3, [r5, #1008]	; 0x3f0
   24bd8:	f505 62b7 	add.w	r2, r5, #1464	; 0x5b8
   24bdc:	2b01      	cmp	r3, #1
   24bde:	d11a      	bne.n	24c16 <network_data_add+0xc2>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
   24be0:	4610      	mov	r0, r2
   24be2:	4914      	ldr	r1, [pc, #80]	; (24c34 <network_data_add+0xe0>)
   24be4:	f01d f89d 	bl	41d22 <strcat>
   24be8:	4602      	mov	r2, r0
		strcat(network->network_mode, lte_string);
		total_len += sizeof(lte_string);
   24bea:	3406      	adds	r4, #6
	} else if (network->nbiot_mode.value == 1) {
		strcat(network->network_mode, nbiot_string);
		total_len += sizeof(nbiot_string);
	}

	if (network->gps_mode.value == 1) {
   24bec:	f8b5 34d0 	ldrh.w	r3, [r5, #1232]	; 0x4d0
   24bf0:	2b01      	cmp	r3, #1
   24bf2:	d105      	bne.n	24c00 <network_data_add+0xac>
   24bf4:	4610      	mov	r0, r2
   24bf6:	4910      	ldr	r1, [pc, #64]	; (24c38 <network_data_add+0xe4>)
   24bf8:	f01d f893 	bl	41d22 <strcat>
   24bfc:	4602      	mov	r2, r0
		strcat(network->network_mode, gps_string);
		total_len += sizeof(gps_string);
   24bfe:	3405      	adds	r4, #5
	}

	ret = json_add_str(json_obj, "networkMode", network->network_mode);
   24c00:	490e      	ldr	r1, [pc, #56]	; (24c3c <network_data_add+0xe8>)
   24c02:	4630      	mov	r0, r6
   24c04:	f01c fb38 	bl	41278 <json_add_str>

	if (ret) {
   24c08:	b110      	cbz	r0, 24c10 <network_data_add+0xbc>
		printk("Unable to add the network mode");
   24c0a:	480d      	ldr	r0, [pc, #52]	; (24c40 <network_data_add+0xec>)
   24c0c:	f01a fc1b 	bl	3f446 <printk>
	}

	return total_len;
}
   24c10:	4620      	mov	r0, r4
   24c12:	b01a      	add	sp, #104	; 0x68
   24c14:	bd70      	pop	{r4, r5, r6, pc}
	} else if (network->nbiot_mode.value == 1) {
   24c16:	f8b5 3460 	ldrh.w	r3, [r5, #1120]	; 0x460
   24c1a:	2b01      	cmp	r3, #1
   24c1c:	d1e6      	bne.n	24bec <network_data_add+0x98>
   24c1e:	4610      	mov	r0, r2
   24c20:	4908      	ldr	r1, [pc, #32]	; (24c44 <network_data_add+0xf0>)
   24c22:	f01d f87e 	bl	41d22 <strcat>
		total_len += sizeof(nbiot_string);
   24c26:	3407      	adds	r4, #7
   24c28:	4602      	mov	r2, r0
   24c2a:	e7df      	b.n	24bec <network_data_add+0x98>
		return -EINVAL;
   24c2c:	f06f 0415 	mvn.w	r4, #21
   24c30:	e7ee      	b.n	24c10 <network_data_add+0xbc>
   24c32:	bf00      	nop
   24c34:	0004771b 	.word	0x0004771b
   24c38:	00047716 	.word	0x00047716
   24c3c:	00047747 	.word	0x00047747
   24c40:	00047753 	.word	0x00047753
   24c44:	00047740 	.word	0x00047740

00024c48 <device_data_add>:

	return total_len;
}

static int device_data_add(struct device_param *device, cJSON *json_obj)
{
   24c48:	b570      	push	{r4, r5, r6, lr}
   24c4a:	460d      	mov	r5, r1
	int total_len;

	if (device == NULL || json_obj == NULL) {
   24c4c:	4606      	mov	r6, r0
   24c4e:	b328      	cbz	r0, 24c9c <device_data_add+0x54>
   24c50:	b321      	cbz	r1, 24c9c <device_data_add+0x54>
		return -EINVAL;
	}

	total_len = json_add_data(&device->modem_fw, json_obj);
   24c52:	f01c fb27 	bl	412a4 <json_add_data>
	total_len += json_add_data(&device->battery, json_obj);
   24c56:	4629      	mov	r1, r5
	total_len = json_add_data(&device->modem_fw, json_obj);
   24c58:	4604      	mov	r4, r0
	total_len += json_add_data(&device->battery, json_obj);
   24c5a:	f106 0070 	add.w	r0, r6, #112	; 0x70
   24c5e:	f01c fb21 	bl	412a4 <json_add_data>
	total_len += json_add_data(&device->imei, json_obj);
   24c62:	4629      	mov	r1, r5
	total_len += json_add_data(&device->battery, json_obj);
   24c64:	4404      	add	r4, r0
	total_len += json_add_data(&device->imei, json_obj);
   24c66:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
   24c6a:	f01c fb1b 	bl	412a4 <json_add_data>
	total_len += json_add_str(json_obj, "board", device->board);
   24c6e:	f8d6 2150 	ldr.w	r2, [r6, #336]	; 0x150
	total_len += json_add_data(&device->imei, json_obj);
   24c72:	4404      	add	r4, r0
	total_len += json_add_str(json_obj, "board", device->board);
   24c74:	490b      	ldr	r1, [pc, #44]	; (24ca4 <device_data_add+0x5c>)
   24c76:	4628      	mov	r0, r5
   24c78:	f01c fafe 	bl	41278 <json_add_str>
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   24c7c:	f8d6 2154 	ldr.w	r2, [r6, #340]	; 0x154
	total_len += json_add_str(json_obj, "board", device->board);
   24c80:	4404      	add	r4, r0
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   24c82:	4909      	ldr	r1, [pc, #36]	; (24ca8 <device_data_add+0x60>)
   24c84:	4628      	mov	r0, r5
   24c86:	f01c faf7 	bl	41278 <json_add_str>
	total_len += json_add_str(json_obj, "appName", device->app_name);
   24c8a:	f8d6 2158 	ldr.w	r2, [r6, #344]	; 0x158
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   24c8e:	4404      	add	r4, r0
	total_len += json_add_str(json_obj, "appName", device->app_name);
   24c90:	4906      	ldr	r1, [pc, #24]	; (24cac <device_data_add+0x64>)
   24c92:	4628      	mov	r0, r5
   24c94:	f01c faf0 	bl	41278 <json_add_str>
   24c98:	4420      	add	r0, r4

	return total_len;
}
   24c9a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   24c9c:	f06f 0015 	mvn.w	r0, #21
   24ca0:	e7fb      	b.n	24c9a <device_data_add+0x52>
   24ca2:	bf00      	nop
   24ca4:	000476fd 	.word	0x000476fd
   24ca8:	00047703 	.word	0x00047703
   24cac:	0004770e 	.word	0x0004770e

00024cb0 <modem_info_json_object_encode>:

int modem_info_json_object_encode(struct modem_param_info *modem,
				  cJSON *root_obj)
{
   24cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24cb4:	4681      	mov	r9, r0
	if (root_obj == NULL || modem == NULL) {
   24cb6:	460d      	mov	r5, r1
   24cb8:	2900      	cmp	r1, #0
   24cba:	d04f      	beq.n	24d5c <modem_info_json_object_encode+0xac>
   24cbc:	2800      	cmp	r0, #0
   24cbe:	d04d      	beq.n	24d5c <modem_info_json_object_encode+0xac>
		return -EINVAL;
	}

	int obj_count = cJSON_GetArraySize(root_obj);
   24cc0:	4608      	mov	r0, r1
   24cc2:	f01b fd74 	bl	407ae <cJSON_GetArraySize>
   24cc6:	4604      	mov	r4, r0

	cJSON *network_obj	= cJSON_CreateObject();
   24cc8:	f7fe f9ba 	bl	23040 <cJSON_CreateObject>
   24ccc:	4680      	mov	r8, r0
	cJSON *sim_obj		= cJSON_CreateObject();
   24cce:	f7fe f9b7 	bl	23040 <cJSON_CreateObject>
   24cd2:	4607      	mov	r7, r0
	cJSON *device_obj	= cJSON_CreateObject();
   24cd4:	f7fe f9b4 	bl	23040 <cJSON_CreateObject>
   24cd8:	4606      	mov	r6, r0

	if (network_obj == NULL || sim_obj == NULL || device_obj == NULL) {
   24cda:	f1b8 0f00 	cmp.w	r8, #0
   24cde:	d03a      	beq.n	24d56 <modem_info_json_object_encode+0xa6>
   24ce0:	b3cf      	cbz	r7, 24d56 <modem_info_json_object_encode+0xa6>
   24ce2:	b3c0      	cbz	r0, 24d56 <modem_info_json_object_encode+0xa6>
		obj_count = -ENOMEM;
		goto delete_object;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
	    (network_data_add(&modem->network, network_obj) > 0)) {
   24ce4:	4641      	mov	r1, r8
   24ce6:	4648      	mov	r0, r9
   24ce8:	f7ff ff34 	bl	24b54 <network_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
   24cec:	2800      	cmp	r0, #0
   24cee:	dd06      	ble.n	24cfe <modem_info_json_object_encode+0x4e>
	cJSON_AddItemToObject(parent, str, item);
   24cf0:	4642      	mov	r2, r8
   24cf2:	491c      	ldr	r1, [pc, #112]	; (24d64 <modem_info_json_object_encode+0xb4>)
   24cf4:	4628      	mov	r0, r5
   24cf6:	f01b fd67 	bl	407c8 <cJSON_AddItemToObject>

		json_add_obj(root_obj, "networkInfo", network_obj);
		network_obj = NULL;
   24cfa:	f04f 0800 	mov.w	r8, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
	    (sim_data_add(&modem->sim, sim_obj) > 0)) {
   24cfe:	4639      	mov	r1, r7
   24d00:	f509 60b9 	add.w	r0, r9, #1480	; 0x5c8
   24d04:	f01c fb12 	bl	4132c <sim_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
   24d08:	2800      	cmp	r0, #0
   24d0a:	dd05      	ble.n	24d18 <modem_info_json_object_encode+0x68>
	cJSON_AddItemToObject(parent, str, item);
   24d0c:	463a      	mov	r2, r7
   24d0e:	4916      	ldr	r1, [pc, #88]	; (24d68 <modem_info_json_object_encode+0xb8>)
   24d10:	4628      	mov	r0, r5
   24d12:	f01b fd59 	bl	407c8 <cJSON_AddItemToObject>

		json_add_obj(root_obj, "simInfo", sim_obj);
		sim_obj = NULL;
   24d16:	2700      	movs	r7, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
	    (device_data_add(&modem->device, device_obj) > 0)) {
   24d18:	4631      	mov	r1, r6
   24d1a:	f509 60e3 	add.w	r0, r9, #1816	; 0x718
   24d1e:	f7ff ff93 	bl	24c48 <device_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
   24d22:	2800      	cmp	r0, #0
   24d24:	dd05      	ble.n	24d32 <modem_info_json_object_encode+0x82>
	cJSON_AddItemToObject(parent, str, item);
   24d26:	4632      	mov	r2, r6
   24d28:	4910      	ldr	r1, [pc, #64]	; (24d6c <modem_info_json_object_encode+0xbc>)
   24d2a:	4628      	mov	r0, r5
   24d2c:	f01b fd4c 	bl	407c8 <cJSON_AddItemToObject>

		json_add_obj(root_obj, "deviceInfo", device_obj);
		device_obj = NULL;
   24d30:	2600      	movs	r6, #0
	}

delete_object:
	cJSON_Delete(network_obj);
   24d32:	4640      	mov	r0, r8
   24d34:	f7fe f8c0 	bl	22eb8 <cJSON_Delete>
	cJSON_Delete(sim_obj);
   24d38:	4638      	mov	r0, r7
   24d3a:	f7fe f8bd 	bl	22eb8 <cJSON_Delete>
	cJSON_Delete(device_obj);
   24d3e:	4630      	mov	r0, r6
   24d40:	f7fe f8ba 	bl	22eb8 <cJSON_Delete>

	if (obj_count >= 0) {
   24d44:	2c00      	cmp	r4, #0
   24d46:	db03      	blt.n	24d50 <modem_info_json_object_encode+0xa0>
		obj_count = cJSON_GetArraySize(root_obj) - obj_count;
   24d48:	4628      	mov	r0, r5
   24d4a:	f01b fd30 	bl	407ae <cJSON_GetArraySize>
   24d4e:	1b04      	subs	r4, r0, r4
	}

	return obj_count;
}
   24d50:	4620      	mov	r0, r4
   24d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		obj_count = -ENOMEM;
   24d56:	f06f 040b 	mvn.w	r4, #11
   24d5a:	e7ea      	b.n	24d32 <modem_info_json_object_encode+0x82>
		return -EINVAL;
   24d5c:	f06f 0415 	mvn.w	r4, #21
   24d60:	e7f6      	b.n	24d50 <modem_info_json_object_encode+0xa0>
   24d62:	bf00      	nop
   24d64:	00047721 	.word	0x00047721
   24d68:	0004772d 	.word	0x0004772d
   24d6c:	00047735 	.word	0x00047735

00024d70 <cloud_get_binding>:

extern struct cloud_backend __cloud_backends_start[0];
extern struct cloud_backend __cloud_backends_end[0];

struct cloud_backend *cloud_get_binding(const char *name)
{
   24d70:	b570      	push	{r4, r5, r6, lr}
   24d72:	4606      	mov	r6, r0
	struct cloud_backend *info;

	for (info = __cloud_backends_start; info != __cloud_backends_end;
   24d74:	4c09      	ldr	r4, [pc, #36]	; (24d9c <cloud_get_binding+0x2c>)
   24d76:	4d0a      	ldr	r5, [pc, #40]	; (24da0 <cloud_get_binding+0x30>)
   24d78:	42ac      	cmp	r4, r5
   24d7a:	d101      	bne.n	24d80 <cloud_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   24d7c:	2400      	movs	r4, #0
   24d7e:	e00a      	b.n	24d96 <cloud_get_binding+0x26>
		if (info->api == NULL) {
   24d80:	6823      	ldr	r3, [r4, #0]
   24d82:	b90b      	cbnz	r3, 24d88 <cloud_get_binding+0x18>
	     info++) {
   24d84:	3408      	adds	r4, #8
   24d86:	e7f7      	b.n	24d78 <cloud_get_binding+0x8>
		if (strcmp(name, info->config->name) == 0) {
   24d88:	6863      	ldr	r3, [r4, #4]
   24d8a:	4630      	mov	r0, r6
   24d8c:	6819      	ldr	r1, [r3, #0]
   24d8e:	f7f5 f89f 	bl	19ed0 <strcmp>
   24d92:	2800      	cmp	r0, #0
   24d94:	d1f6      	bne.n	24d84 <cloud_get_binding+0x14>
}
   24d96:	4620      	mov	r0, r4
   24d98:	bd70      	pop	{r4, r5, r6, pc}
   24d9a:	bf00      	nop
   24d9c:	0004b320 	.word	0x0004b320
   24da0:	0004b328 	.word	0x0004b328

00024da4 <uninit>:

	return nrf_cloud_init(&params);
}

static int uninit(const struct cloud_backend *const backend)
{
   24da4:	b508      	push	{r3, lr}
	LOG_INF("uninit() is not implemented");
   24da6:	f04f 0000 	mov.w	r0, #0
   24daa:	2303      	movs	r3, #3
   24dac:	4a06      	ldr	r2, [pc, #24]	; (24dc8 <uninit+0x24>)
   24dae:	f363 0007 	bfi	r0, r3, #0, #8
   24db2:	4b06      	ldr	r3, [pc, #24]	; (24dcc <uninit+0x28>)
   24db4:	4906      	ldr	r1, [pc, #24]	; (24dd0 <uninit+0x2c>)
   24db6:	1a9b      	subs	r3, r3, r2
   24db8:	08db      	lsrs	r3, r3, #3
   24dba:	f363 108f 	bfi	r0, r3, #6, #10
   24dbe:	f01a fb60 	bl	3f482 <log_string_sync>

	return 0;
}
   24dc2:	2000      	movs	r0, #0
   24dc4:	bd08      	pop	{r3, pc}
   24dc6:	bf00      	nop
   24dc8:	00042fb4 	.word	0x00042fb4
   24dcc:	00043074 	.word	0x00043074
   24dd0:	00047990 	.word	0x00047990

00024dd4 <event_handler>:
{
   24dd4:	b570      	push	{r4, r5, r6, lr}
   24dd6:	4606      	mov	r6, r0
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   24dd8:	4c63      	ldr	r4, [pc, #396]	; (24f68 <event_handler+0x194>)
{
   24dda:	b088      	sub	sp, #32
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   24ddc:	6823      	ldr	r3, [r4, #0]
	struct cloud_event evt = { 0 };
   24dde:	221c      	movs	r2, #28
   24de0:	2100      	movs	r1, #0
   24de2:	a801      	add	r0, sp, #4
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   24de4:	685d      	ldr	r5, [r3, #4]
	struct cloud_event evt = { 0 };
   24de6:	f01c fe04 	bl	419f2 <memset>
	switch (nrf_cloud_evt->type) {
   24dea:	7833      	ldrb	r3, [r6, #0]
   24dec:	4a5f      	ldr	r2, [pc, #380]	; (24f6c <event_handler+0x198>)
   24dee:	4960      	ldr	r1, [pc, #384]	; (24f70 <event_handler+0x19c>)
   24df0:	2b05      	cmp	r3, #5
   24df2:	eba2 0201 	sub.w	r2, r2, r1
   24df6:	f3c2 02c9 	ubfx	r2, r2, #3, #10
   24dfa:	d079      	beq.n	24ef0 <event_handler+0x11c>
   24dfc:	d821      	bhi.n	24e42 <event_handler+0x6e>
   24dfe:	2b02      	cmp	r3, #2
   24e00:	d05c      	beq.n	24ebc <event_handler+0xe8>
   24e02:	d80d      	bhi.n	24e20 <event_handler+0x4c>
   24e04:	2b01      	cmp	r3, #1
   24e06:	d04a      	beq.n	24e9e <event_handler+0xca>
		LOG_DBG("Unknown event type: %d", nrf_cloud_evt->type);
   24e08:	2104      	movs	r1, #4
   24e0a:	f04f 0000 	mov.w	r0, #0
   24e0e:	f361 0007 	bfi	r0, r1, #0, #8
   24e12:	f362 108f 	bfi	r0, r2, #6, #10
   24e16:	4957      	ldr	r1, [pc, #348]	; (24f74 <event_handler+0x1a0>)
   24e18:	4a57      	ldr	r2, [pc, #348]	; (24f78 <event_handler+0x1a4>)
   24e1a:	f01a fb32 	bl	3f482 <log_string_sync>
}
   24e1e:	e072      	b.n	24f06 <event_handler+0x132>
	switch (nrf_cloud_evt->type) {
   24e20:	2b03      	cmp	r3, #3
   24e22:	d058      	beq.n	24ed6 <event_handler+0x102>
   24e24:	2b04      	cmp	r3, #4
   24e26:	d1ef      	bne.n	24e08 <event_handler+0x34>
		LOG_DBG("NRF_CLOUD_EVT_READY");
   24e28:	2304      	movs	r3, #4
   24e2a:	f04f 0000 	mov.w	r0, #0
   24e2e:	f363 0007 	bfi	r0, r3, #0, #8
   24e32:	f362 108f 	bfi	r0, r2, #6, #10
   24e36:	4951      	ldr	r1, [pc, #324]	; (24f7c <event_handler+0x1a8>)
   24e38:	4a4f      	ldr	r2, [pc, #316]	; (24f78 <event_handler+0x1a4>)
   24e3a:	f01a fb22 	bl	3f482 <log_string_sync>
		evt.type = CLOUD_EVT_READY;
   24e3e:	2302      	movs	r3, #2
   24e40:	e039      	b.n	24eb6 <event_handler+0xe2>
	switch (nrf_cloud_evt->type) {
   24e42:	2b08      	cmp	r3, #8
   24e44:	d061      	beq.n	24f0a <event_handler+0x136>
   24e46:	d818      	bhi.n	24e7a <event_handler+0xa6>
   24e48:	2b06      	cmp	r3, #6
   24e4a:	d06b      	beq.n	24f24 <event_handler+0x150>
   24e4c:	2b07      	cmp	r3, #7
   24e4e:	d1db      	bne.n	24e08 <event_handler+0x34>
		LOG_DBG("NRF_CLOUD_EVT_SENSOR_DATA_ACK");
   24e50:	2304      	movs	r3, #4
   24e52:	f04f 0000 	mov.w	r0, #0
   24e56:	f363 0007 	bfi	r0, r3, #0, #8
   24e5a:	f362 108f 	bfi	r0, r2, #6, #10
   24e5e:	4948      	ldr	r1, [pc, #288]	; (24f80 <event_handler+0x1ac>)
   24e60:	4a45      	ldr	r2, [pc, #276]	; (24f78 <event_handler+0x1a4>)
   24e62:	f01a fb0e 	bl	3f482 <log_string_sync>
		evt.type = CLOUD_EVT_DATA_SENT;
   24e66:	2304      	movs	r3, #4
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   24e68:	68ea      	ldr	r2, [r5, #12]
		evt.type = CLOUD_EVT_DATA_SENT;
   24e6a:	f88d 3004 	strb.w	r3, [sp, #4]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   24e6e:	eb0d 0103 	add.w	r1, sp, r3
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   24e72:	6820      	ldr	r0, [r4, #0]
   24e74:	f01c fa72 	bl	4135c <cloud_notify_event>
		break;
   24e78:	e045      	b.n	24f06 <event_handler+0x132>
	switch (nrf_cloud_evt->type) {
   24e7a:	2b09      	cmp	r3, #9
   24e7c:	d067      	beq.n	24f4e <event_handler+0x17a>
   24e7e:	2bff      	cmp	r3, #255	; 0xff
   24e80:	d1c2      	bne.n	24e08 <event_handler+0x34>
		LOG_DBG("NRF_CLOUD_EVT_ERROR: %d", nrf_cloud_evt->status);
   24e82:	2304      	movs	r3, #4
   24e84:	f04f 0000 	mov.w	r0, #0
   24e88:	f363 0007 	bfi	r0, r3, #0, #8
   24e8c:	f362 108f 	bfi	r0, r2, #6, #10
   24e90:	6873      	ldr	r3, [r6, #4]
   24e92:	4a39      	ldr	r2, [pc, #228]	; (24f78 <event_handler+0x1a4>)
   24e94:	493b      	ldr	r1, [pc, #236]	; (24f84 <event_handler+0x1b0>)
   24e96:	f01a faf4 	bl	3f482 <log_string_sync>
		evt.type = CLOUD_EVT_ERROR;
   24e9a:	2303      	movs	r3, #3
   24e9c:	e00b      	b.n	24eb6 <event_handler+0xe2>
		LOG_DBG("NRF_CLOUD_EVT_TRANSPORT_CONNECTED");
   24e9e:	2304      	movs	r3, #4
   24ea0:	f04f 0000 	mov.w	r0, #0
   24ea4:	f363 0007 	bfi	r0, r3, #0, #8
   24ea8:	f362 108f 	bfi	r0, r2, #6, #10
   24eac:	4936      	ldr	r1, [pc, #216]	; (24f88 <event_handler+0x1b4>)
   24eae:	4a32      	ldr	r2, [pc, #200]	; (24f78 <event_handler+0x1a4>)
   24eb0:	f01a fae7 	bl	3f482 <log_string_sync>
		evt.type = CLOUD_EVT_CONNECTED;
   24eb4:	2300      	movs	r3, #0
		evt.type = CLOUD_EVT_FOTA_DONE;
   24eb6:	f88d 3004 	strb.w	r3, [sp, #4]
   24eba:	e045      	b.n	24f48 <event_handler+0x174>
		LOG_DBG("NRF_CLOUD_EVT_USER_ASSOCIATION_REQUEST");
   24ebc:	2304      	movs	r3, #4
   24ebe:	f04f 0000 	mov.w	r0, #0
   24ec2:	f363 0007 	bfi	r0, r3, #0, #8
   24ec6:	f362 108f 	bfi	r0, r2, #6, #10
   24eca:	4930      	ldr	r1, [pc, #192]	; (24f8c <event_handler+0x1b8>)
   24ecc:	4a2a      	ldr	r2, [pc, #168]	; (24f78 <event_handler+0x1a4>)
   24ece:	f01a fad8 	bl	3f482 <log_string_sync>
		evt.type = CLOUD_EVT_PAIR_REQUEST;
   24ed2:	2306      	movs	r3, #6
   24ed4:	e7ef      	b.n	24eb6 <event_handler+0xe2>
		LOG_DBG("NRF_CLOUD_EVT_USER_ASSOCIATED");
   24ed6:	2304      	movs	r3, #4
   24ed8:	f04f 0000 	mov.w	r0, #0
   24edc:	f363 0007 	bfi	r0, r3, #0, #8
   24ee0:	f362 108f 	bfi	r0, r2, #6, #10
   24ee4:	492a      	ldr	r1, [pc, #168]	; (24f90 <event_handler+0x1bc>)
   24ee6:	4a24      	ldr	r2, [pc, #144]	; (24f78 <event_handler+0x1a4>)
   24ee8:	f01a facb 	bl	3f482 <log_string_sync>
		evt.type = CLOUD_EVT_PAIR_DONE;
   24eec:	2307      	movs	r3, #7
   24eee:	e7e2      	b.n	24eb6 <event_handler+0xe2>
		LOG_DBG("NRF_CLOUD_EVT_SENSOR_ATTACHED");
   24ef0:	f04f 0000 	mov.w	r0, #0
   24ef4:	2304      	movs	r3, #4
   24ef6:	f363 0007 	bfi	r0, r3, #0, #8
   24efa:	f362 108f 	bfi	r0, r2, #6, #10
   24efe:	4925      	ldr	r1, [pc, #148]	; (24f94 <event_handler+0x1c0>)
   24f00:	4a1d      	ldr	r2, [pc, #116]	; (24f78 <event_handler+0x1a4>)
   24f02:	f01a fabe 	bl	3f482 <log_string_sync>
}
   24f06:	b008      	add	sp, #32
   24f08:	bd70      	pop	{r4, r5, r6, pc}
		LOG_DBG("NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED");
   24f0a:	2304      	movs	r3, #4
   24f0c:	f04f 0000 	mov.w	r0, #0
   24f10:	f363 0007 	bfi	r0, r3, #0, #8
   24f14:	f362 108f 	bfi	r0, r2, #6, #10
   24f18:	491f      	ldr	r1, [pc, #124]	; (24f98 <event_handler+0x1c4>)
   24f1a:	4a17      	ldr	r2, [pc, #92]	; (24f78 <event_handler+0x1a4>)
   24f1c:	f01a fab1 	bl	3f482 <log_string_sync>
		evt.type = CLOUD_EVT_DISCONNECTED;
   24f20:	2301      	movs	r3, #1
   24f22:	e7c8      	b.n	24eb6 <event_handler+0xe2>
		LOG_DBG("NRF_CLOUD_EVT_RX_DATA");
   24f24:	2304      	movs	r3, #4
   24f26:	f04f 0000 	mov.w	r0, #0
   24f2a:	f363 0007 	bfi	r0, r3, #0, #8
   24f2e:	f362 108f 	bfi	r0, r2, #6, #10
   24f32:	491a      	ldr	r1, [pc, #104]	; (24f9c <event_handler+0x1c8>)
   24f34:	4a10      	ldr	r2, [pc, #64]	; (24f78 <event_handler+0x1a4>)
   24f36:	f01a faa4 	bl	3f482 <log_string_sync>
		evt.type = CLOUD_EVT_DATA_RECEIVED;
   24f3a:	2305      	movs	r3, #5
   24f3c:	f88d 3004 	strb.w	r3, [sp, #4]
		evt.data.msg.buf = (char *)nrf_cloud_evt->data.ptr;
   24f40:	68f3      	ldr	r3, [r6, #12]
   24f42:	9302      	str	r3, [sp, #8]
		evt.data.msg.len = nrf_cloud_evt->data.len;
   24f44:	68b3      	ldr	r3, [r6, #8]
   24f46:	9303      	str	r3, [sp, #12]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   24f48:	68ea      	ldr	r2, [r5, #12]
   24f4a:	a901      	add	r1, sp, #4
   24f4c:	e791      	b.n	24e72 <event_handler+0x9e>
		LOG_DBG("NRF_CLOUD_EVT_FOTA_DONE");
   24f4e:	2304      	movs	r3, #4
   24f50:	f04f 0000 	mov.w	r0, #0
   24f54:	f363 0007 	bfi	r0, r3, #0, #8
   24f58:	f362 108f 	bfi	r0, r2, #6, #10
   24f5c:	4910      	ldr	r1, [pc, #64]	; (24fa0 <event_handler+0x1cc>)
   24f5e:	4a06      	ldr	r2, [pc, #24]	; (24f78 <event_handler+0x1a4>)
   24f60:	f01a fa8f 	bl	3f482 <log_string_sync>
		evt.type = CLOUD_EVT_FOTA_DONE;
   24f64:	2308      	movs	r3, #8
   24f66:	e7a6      	b.n	24eb6 <event_handler+0xe2>
   24f68:	20023b98 	.word	0x20023b98
   24f6c:	00043074 	.word	0x00043074
   24f70:	00042fb4 	.word	0x00042fb4
   24f74:	00047901 	.word	0x00047901
   24f78:	000477a4 	.word	0x000477a4
   24f7c:	0004782a 	.word	0x0004782a
   24f80:	00047864 	.word	0x00047864
   24f84:	000478af 	.word	0x000478af
   24f88:	000477b7 	.word	0x000477b7
   24f8c:	000477dd 	.word	0x000477dd
   24f90:	00047808 	.word	0x00047808
   24f94:	00047842 	.word	0x00047842
   24f98:	00047886 	.word	0x00047886
   24f9c:	000478cb 	.word	0x000478cb
   24fa0:	000478e5 	.word	0x000478e5

00024fa4 <send>:
	return nrf_cloud_disconnect();
}

static int send(const struct cloud_backend *const backend,
		const struct cloud_msg *const msg)
{
   24fa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err = 0;

	if (msg->endpoint.len != 0) {
   24fa6:	694c      	ldr	r4, [r1, #20]
   24fa8:	2c00      	cmp	r4, #0
   24faa:	d156      	bne.n	2505a <send+0xb6>
		/* Unsupported case where topic is not the default. */
		return -ENOTSUP;
	}

	switch (msg->endpoint.type) {
   24fac:	7b0b      	ldrb	r3, [r1, #12]
   24fae:	b18b      	cbz	r3, 24fd4 <send+0x30>
   24fb0:	2b01      	cmp	r3, #1
   24fb2:	d034      	beq.n	2501e <send+0x7a>
			return err;
		}
		break;
	}
	default:
		LOG_DBG("Unknown cloud endpoint type: %d", msg->endpoint.type);
   24fb4:	2204      	movs	r2, #4
   24fb6:	f04f 0000 	mov.w	r0, #0
   24fba:	4929      	ldr	r1, [pc, #164]	; (25060 <send+0xbc>)
   24fbc:	f362 0007 	bfi	r0, r2, #0, #8
   24fc0:	4a28      	ldr	r2, [pc, #160]	; (25064 <send+0xc0>)
   24fc2:	1a52      	subs	r2, r2, r1
   24fc4:	08d2      	lsrs	r2, r2, #3
   24fc6:	f362 108f 	bfi	r0, r2, #6, #10
   24fca:	4927      	ldr	r1, [pc, #156]	; (25068 <send+0xc4>)
   24fcc:	4a27      	ldr	r2, [pc, #156]	; (2506c <send+0xc8>)
   24fce:	f01a fa58 	bl	3f482 <log_string_sync>
		break;
	}

	if (err) {
   24fd2:	e00a      	b.n	24fea <send+0x46>
		const struct nct_dc_data buf = {
   24fd4:	9302      	str	r3, [sp, #8]
   24fd6:	684b      	ldr	r3, [r1, #4]
   24fd8:	9300      	str	r3, [sp, #0]
   24fda:	680b      	ldr	r3, [r1, #0]
   24fdc:	9301      	str	r3, [sp, #4]
		if (msg->qos == CLOUD_QOS_AT_MOST_ONCE) {
   24fde:	7a0b      	ldrb	r3, [r1, #8]
   24fe0:	b933      	cbnz	r3, 24ff0 <send+0x4c>
			err = nct_dc_stream(&buf);
   24fe2:	4668      	mov	r0, sp
   24fe4:	f01c faac 	bl	41540 <nct_dc_stream>
			err = nct_dc_send(&buf);
   24fe8:	4604      	mov	r4, r0
		return err;
	}

	return 0;
}
   24fea:	4620      	mov	r0, r4
   24fec:	b004      	add	sp, #16
   24fee:	bd10      	pop	{r4, pc}
		} else if (msg->qos == CLOUD_QOS_AT_LEAST_ONCE) {
   24ff0:	2b01      	cmp	r3, #1
   24ff2:	d103      	bne.n	24ffc <send+0x58>
			err = nct_dc_send(&buf);
   24ff4:	4668      	mov	r0, sp
   24ff6:	f01c faa0 	bl	4153a <nct_dc_send>
   24ffa:	e7f5      	b.n	24fe8 <send+0x44>
			LOG_ERR("Unsupported QoS setting.");
   24ffc:	2301      	movs	r3, #1
   24ffe:	f04f 0000 	mov.w	r0, #0
   25002:	4a17      	ldr	r2, [pc, #92]	; (25060 <send+0xbc>)
   25004:	f363 0007 	bfi	r0, r3, #0, #8
   25008:	4b16      	ldr	r3, [pc, #88]	; (25064 <send+0xc0>)
   2500a:	4919      	ldr	r1, [pc, #100]	; (25070 <send+0xcc>)
   2500c:	1a9b      	subs	r3, r3, r2
   2500e:	08db      	lsrs	r3, r3, #3
   25010:	f363 108f 	bfi	r0, r3, #6, #10
   25014:	f01a fa35 	bl	3f482 <log_string_sync>
			return err;
   25018:	f06f 0415 	mvn.w	r4, #21
   2501c:	e7e5      	b.n	24fea <send+0x46>
		struct nct_cc_data shadow_data = {
   2501e:	684a      	ldr	r2, [r1, #4]
		err = nct_cc_send(&shadow_data);
   25020:	4668      	mov	r0, sp
		struct nct_cc_data shadow_data = {
   25022:	9200      	str	r2, [sp, #0]
   25024:	680a      	ldr	r2, [r1, #0]
   25026:	e9cd 4402 	strd	r4, r4, [sp, #8]
   2502a:	9201      	str	r2, [sp, #4]
   2502c:	f88d 300c 	strb.w	r3, [sp, #12]
		err = nct_cc_send(&shadow_data);
   25030:	f001 f944 	bl	262bc <nct_cc_send>
		if (err) {
   25034:	4604      	mov	r4, r0
   25036:	2800      	cmp	r0, #0
   25038:	d0d7      	beq.n	24fea <send+0x46>
			LOG_ERR("nct_cc_send failed, error: %d\n", err);
   2503a:	2301      	movs	r3, #1
   2503c:	f04f 0000 	mov.w	r0, #0
   25040:	4a07      	ldr	r2, [pc, #28]	; (25060 <send+0xbc>)
   25042:	f363 0007 	bfi	r0, r3, #0, #8
   25046:	4b07      	ldr	r3, [pc, #28]	; (25064 <send+0xc0>)
   25048:	490a      	ldr	r1, [pc, #40]	; (25074 <send+0xd0>)
   2504a:	1a9b      	subs	r3, r3, r2
   2504c:	08db      	lsrs	r3, r3, #3
   2504e:	f363 108f 	bfi	r0, r3, #6, #10
   25052:	4622      	mov	r2, r4
   25054:	f01a fa15 	bl	3f482 <log_string_sync>
			return err;
   25058:	e7c7      	b.n	24fea <send+0x46>
		return -ENOTSUP;
   2505a:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2505e:	e7c4      	b.n	24fea <send+0x46>
   25060:	00042fb4 	.word	0x00042fb4
   25064:	00043074 	.word	0x00043074
   25068:	00047962 	.word	0x00047962
   2506c:	000477b2 	.word	0x000477b2
   25070:	0004792a 	.word	0x0004792a
   25074:	00047943 	.word	0x00047943

00025078 <nfsm_get_current_state>:
	return m_current_state;
   25078:	4b01      	ldr	r3, [pc, #4]	; (25080 <nfsm_get_current_state+0x8>)
   2507a:	7818      	ldrb	r0, [r3, #0]
}
   2507c:	4770      	bx	lr
   2507e:	bf00      	nop
   25080:	2002bdc9 	.word	0x2002bdc9

00025084 <nfsm_set_current_state_and_notify>:
{
   25084:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("state: %d", state);
   25086:	2304      	movs	r3, #4
{
   25088:	4605      	mov	r5, r0
	LOG_DBG("state: %d", state);
   2508a:	f04f 0000 	mov.w	r0, #0
   2508e:	4a0c      	ldr	r2, [pc, #48]	; (250c0 <nfsm_set_current_state_and_notify+0x3c>)
   25090:	f363 0007 	bfi	r0, r3, #0, #8
   25094:	4b0b      	ldr	r3, [pc, #44]	; (250c4 <nfsm_set_current_state_and_notify+0x40>)
{
   25096:	460c      	mov	r4, r1
   25098:	1a9b      	subs	r3, r3, r2
   2509a:	08db      	lsrs	r3, r3, #3
	LOG_DBG("state: %d", state);
   2509c:	f363 108f 	bfi	r0, r3, #6, #10
   250a0:	4a09      	ldr	r2, [pc, #36]	; (250c8 <nfsm_set_current_state_and_notify+0x44>)
   250a2:	462b      	mov	r3, r5
   250a4:	4909      	ldr	r1, [pc, #36]	; (250cc <nfsm_set_current_state_and_notify+0x48>)
   250a6:	f01a f9ec 	bl	3f482 <log_string_sync>
	m_current_state = state;
   250aa:	4b09      	ldr	r3, [pc, #36]	; (250d0 <nfsm_set_current_state_and_notify+0x4c>)
   250ac:	701d      	strb	r5, [r3, #0]
	if ((m_event_handler != NULL) && (evt != NULL)) {
   250ae:	4b09      	ldr	r3, [pc, #36]	; (250d4 <nfsm_set_current_state_and_notify+0x50>)
   250b0:	681b      	ldr	r3, [r3, #0]
   250b2:	b123      	cbz	r3, 250be <nfsm_set_current_state_and_notify+0x3a>
   250b4:	b11c      	cbz	r4, 250be <nfsm_set_current_state_and_notify+0x3a>
		m_event_handler(evt);
   250b6:	4620      	mov	r0, r4
}
   250b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		m_event_handler(evt);
   250bc:	4718      	bx	r3
}
   250be:	bd70      	pop	{r4, r5, r6, pc}
   250c0:	00042fb4 	.word	0x00042fb4
   250c4:	00043074 	.word	0x00043074
   250c8:	00047782 	.word	0x00047782
   250cc:	0004791c 	.word	0x0004791c
   250d0:	2002bdc9 	.word	0x2002bdc9
   250d4:	20023b94 	.word	0x20023b94

000250d8 <nrf_cloud_init>:
{
   250d8:	b538      	push	{r3, r4, r5, lr}
	if (m_current_state != STATE_IDLE) {
   250da:	4c0d      	ldr	r4, [pc, #52]	; (25110 <nrf_cloud_init+0x38>)
{
   250dc:	4605      	mov	r5, r0
	if (m_current_state != STATE_IDLE) {
   250de:	7823      	ldrb	r3, [r4, #0]
   250e0:	b983      	cbnz	r3, 25104 <nrf_cloud_init+0x2c>
	if (param->event_handler == NULL) {
   250e2:	6803      	ldr	r3, [r0, #0]
   250e4:	b18b      	cbz	r3, 2510a <nrf_cloud_init+0x32>
	err = nfsm_init();
   250e6:	f01c fa26 	bl	41536 <nfsm_init>
	if (err) {
   250ea:	b950      	cbnz	r0, 25102 <nrf_cloud_init+0x2a>
	err = nrf_codec_init();
   250ec:	f01c f99b 	bl	41426 <nrf_codec_init>
	if (err) {
   250f0:	b938      	cbnz	r0, 25102 <nrf_cloud_init+0x2a>
	err = nct_init();
   250f2:	f000 feb3 	bl	25e5c <nct_init>
	if (err) {
   250f6:	b920      	cbnz	r0, 25102 <nrf_cloud_init+0x2a>
	m_event_handler = param->event_handler;
   250f8:	4b06      	ldr	r3, [pc, #24]	; (25114 <nrf_cloud_init+0x3c>)
   250fa:	682a      	ldr	r2, [r5, #0]
   250fc:	601a      	str	r2, [r3, #0]
	m_current_state = STATE_INITIALIZED;
   250fe:	2301      	movs	r3, #1
   25100:	7023      	strb	r3, [r4, #0]
}
   25102:	bd38      	pop	{r3, r4, r5, pc}
		return -EACCES;
   25104:	f06f 000c 	mvn.w	r0, #12
   25108:	e7fb      	b.n	25102 <nrf_cloud_init+0x2a>
		return -EINVAL;
   2510a:	f06f 0015 	mvn.w	r0, #21
   2510e:	e7f8      	b.n	25102 <nrf_cloud_init+0x2a>
   25110:	2002bdc9 	.word	0x2002bdc9
   25114:	20023b94 	.word	0x20023b94

00025118 <init>:
{
   25118:	b507      	push	{r0, r1, r2, lr}
	const struct nrf_cloud_init_param params = {
   2511a:	4b06      	ldr	r3, [pc, #24]	; (25134 <init+0x1c>)
   2511c:	9301      	str	r3, [sp, #4]
	backend->config->handler = handler;
   2511e:	6843      	ldr	r3, [r0, #4]
   25120:	6059      	str	r1, [r3, #4]
	nrf_cloud_backend = (struct cloud_backend *)backend;
   25122:	4b05      	ldr	r3, [pc, #20]	; (25138 <init+0x20>)
   25124:	6018      	str	r0, [r3, #0]
	return nrf_cloud_init(&params);
   25126:	a801      	add	r0, sp, #4
   25128:	f7ff ffd6 	bl	250d8 <nrf_cloud_init>
}
   2512c:	b003      	add	sp, #12
   2512e:	f85d fb04 	ldr.w	pc, [sp], #4
   25132:	bf00      	nop
   25134:	00024dd5 	.word	0x00024dd5
   25138:	20023b98 	.word	0x20023b98

0002513c <nrf_cloud_connect>:
	if (NOT_VALID_STATE(STATE_INITIALIZED)) {
   2513c:	4b04      	ldr	r3, [pc, #16]	; (25150 <nrf_cloud_connect+0x14>)
   2513e:	781b      	ldrb	r3, [r3, #0]
   25140:	2b01      	cmp	r3, #1
   25142:	d801      	bhi.n	25148 <nrf_cloud_connect+0xc>
	return nct_connect();
   25144:	f000 bfde 	b.w	26104 <nct_connect>
}
   25148:	f06f 000c 	mvn.w	r0, #12
   2514c:	4770      	bx	lr
   2514e:	bf00      	nop
   25150:	2002bdc9 	.word	0x2002bdc9

00025154 <nrf_cloud_disconnect>:
	if (NOT_VALID_STATE(STATE_DC_CONNECTED) &&
   25154:	4b05      	ldr	r3, [pc, #20]	; (2516c <nrf_cloud_disconnect+0x18>)
   25156:	781a      	ldrb	r2, [r3, #0]
   25158:	2a09      	cmp	r2, #9
   2515a:	d902      	bls.n	25162 <nrf_cloud_disconnect+0xe>
	    NOT_VALID_STATE(STATE_CC_CONNECTED)) {
   2515c:	781b      	ldrb	r3, [r3, #0]
	if (NOT_VALID_STATE(STATE_DC_CONNECTED) &&
   2515e:	2b04      	cmp	r3, #4
   25160:	d801      	bhi.n	25166 <nrf_cloud_disconnect+0x12>
	return nct_disconnect();
   25162:	f001 b9eb 	b.w	2653c <nct_disconnect>
}
   25166:	f06f 000c 	mvn.w	r0, #12
   2516a:	4770      	bx	lr
   2516c:	2002bdc9 	.word	0x2002bdc9

00025170 <nct_input>:
	return nfsm_handle_incoming_event(evt, m_current_state);
   25170:	4b01      	ldr	r3, [pc, #4]	; (25178 <nct_input+0x8>)
   25172:	7819      	ldrb	r1, [r3, #0]
   25174:	f000 bbdc 	b.w	25930 <nfsm_handle_incoming_event>
   25178:	2002bdc9 	.word	0x2002bdc9

0002517c <nct_apply_update>:
	m_event_handler(&evt);
   2517c:	4b01      	ldr	r3, [pc, #4]	; (25184 <nct_apply_update+0x8>)
   2517e:	4802      	ldr	r0, [pc, #8]	; (25188 <nct_apply_update+0xc>)
   25180:	681b      	ldr	r3, [r3, #0]
   25182:	4718      	bx	r3
   25184:	20023b94 	.word	0x20023b94
   25188:	000436e4 	.word	0x000436e4

0002518c <nrf_cloud_decode_desired_obj>:
	return !strncmp(s1, s2, strlen(s2));
}

static void nrf_cloud_decode_desired_obj(cJSON *const root_obj,
					 cJSON **desired_obj)
{
   2518c:	b538      	push	{r3, r4, r5, lr}
   2518e:	460c      	mov	r4, r1
	cJSON *state_obj;

	if ((root_obj != NULL) && (desired_obj != NULL)) {
   25190:	4605      	mov	r5, r0
   25192:	b140      	cbz	r0, 251a6 <nrf_cloud_decode_desired_obj+0x1a>
		/* On initial pairing there is no "desired" JSON key, */
		/* "state" is used instead */
		state_obj = json_object_decode(root_obj, "state");
   25194:	4904      	ldr	r1, [pc, #16]	; (251a8 <nrf_cloud_decode_desired_obj+0x1c>)
   25196:	f01c f913 	bl	413c0 <json_object_decode>
		if (state_obj == NULL) {
   2519a:	b918      	cbnz	r0, 251a4 <nrf_cloud_decode_desired_obj+0x18>
			*desired_obj = json_object_decode(root_obj, "desired");
   2519c:	4903      	ldr	r1, [pc, #12]	; (251ac <nrf_cloud_decode_desired_obj+0x20>)
   2519e:	4628      	mov	r0, r5
   251a0:	f01c f90e 	bl	413c0 <json_object_decode>
		} else {
			*desired_obj = state_obj;
   251a4:	6020      	str	r0, [r4, #0]
		}
	}
}
   251a6:	bd38      	pop	{r3, r4, r5, pc}
   251a8:	00045925 	.word	0x00045925
   251ac:	00047a03 	.word	0x00047a03

000251b0 <nrf_cloud_decode_requested_state>:
	return 0;
}

int nrf_cloud_decode_requested_state(const struct nrf_cloud_data *input,
				     enum nfsm_state *requested_state)
{
   251b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   251b2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(requested_state != NULL);
   251b4:	460e      	mov	r6, r1
   251b6:	b949      	cbnz	r1, 251cc <nrf_cloud_decode_requested_state+0x1c>
   251b8:	494d      	ldr	r1, [pc, #308]	; (252f0 <nrf_cloud_decode_requested_state+0x140>)
   251ba:	484e      	ldr	r0, [pc, #312]	; (252f4 <nrf_cloud_decode_requested_state+0x144>)
   251bc:	23ca      	movs	r3, #202	; 0xca
   251be:	4a4e      	ldr	r2, [pc, #312]	; (252f8 <nrf_cloud_decode_requested_state+0x148>)
   251c0:	f01a f941 	bl	3f446 <printk>
   251c4:	21ca      	movs	r1, #202	; 0xca
   251c6:	484c      	ldr	r0, [pc, #304]	; (252f8 <nrf_cloud_decode_requested_state+0x148>)
   251c8:	f01a f94a 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   251cc:	b94c      	cbnz	r4, 251e2 <nrf_cloud_decode_requested_state+0x32>
   251ce:	494b      	ldr	r1, [pc, #300]	; (252fc <nrf_cloud_decode_requested_state+0x14c>)
   251d0:	4848      	ldr	r0, [pc, #288]	; (252f4 <nrf_cloud_decode_requested_state+0x144>)
   251d2:	23cb      	movs	r3, #203	; 0xcb
   251d4:	4a48      	ldr	r2, [pc, #288]	; (252f8 <nrf_cloud_decode_requested_state+0x148>)
   251d6:	f01a f936 	bl	3f446 <printk>
   251da:	21cb      	movs	r1, #203	; 0xcb
   251dc:	4846      	ldr	r0, [pc, #280]	; (252f8 <nrf_cloud_decode_requested_state+0x148>)
   251de:	f01a f93f 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   251e2:	6863      	ldr	r3, [r4, #4]
   251e4:	b94b      	cbnz	r3, 251fa <nrf_cloud_decode_requested_state+0x4a>
   251e6:	4946      	ldr	r1, [pc, #280]	; (25300 <nrf_cloud_decode_requested_state+0x150>)
   251e8:	4842      	ldr	r0, [pc, #264]	; (252f4 <nrf_cloud_decode_requested_state+0x144>)
   251ea:	23cc      	movs	r3, #204	; 0xcc
   251ec:	4a42      	ldr	r2, [pc, #264]	; (252f8 <nrf_cloud_decode_requested_state+0x148>)
   251ee:	f01a f92a 	bl	3f446 <printk>
   251f2:	21cc      	movs	r1, #204	; 0xcc
   251f4:	4840      	ldr	r0, [pc, #256]	; (252f8 <nrf_cloud_decode_requested_state+0x148>)
   251f6:	f01a f933 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   251fa:	6823      	ldr	r3, [r4, #0]
   251fc:	b94b      	cbnz	r3, 25212 <nrf_cloud_decode_requested_state+0x62>
   251fe:	4941      	ldr	r1, [pc, #260]	; (25304 <nrf_cloud_decode_requested_state+0x154>)
   25200:	483c      	ldr	r0, [pc, #240]	; (252f4 <nrf_cloud_decode_requested_state+0x144>)
   25202:	23cd      	movs	r3, #205	; 0xcd
   25204:	4a3c      	ldr	r2, [pc, #240]	; (252f8 <nrf_cloud_decode_requested_state+0x148>)
   25206:	f01a f91e 	bl	3f446 <printk>
   2520a:	21cd      	movs	r1, #205	; 0xcd
   2520c:	483a      	ldr	r0, [pc, #232]	; (252f8 <nrf_cloud_decode_requested_state+0x148>)
   2520e:	f01a f927 	bl	3f460 <assert_post_action>
	cJSON *desired_obj;
	cJSON *pairing_obj;
	cJSON *pairing_state_obj;
	cJSON *topic_prefix_obj;

	root_obj = cJSON_Parse(input->ptr);
   25212:	6860      	ldr	r0, [r4, #4]
   25214:	f01b fac4 	bl	407a0 <cJSON_Parse>
	if (root_obj == NULL) {
   25218:	4605      	mov	r5, r0
   2521a:	b9a8      	cbnz	r0, 25248 <nrf_cloud_decode_requested_state+0x98>
		LOG_ERR("cJSON_Parse failed: %s",
   2521c:	2301      	movs	r3, #1
   2521e:	f04f 0500 	mov.w	r5, #0
   25222:	4a39      	ldr	r2, [pc, #228]	; (25308 <nrf_cloud_decode_requested_state+0x158>)
   25224:	f363 0507 	bfi	r5, r3, #0, #8
   25228:	4b38      	ldr	r3, [pc, #224]	; (2530c <nrf_cloud_decode_requested_state+0x15c>)
   2522a:	6860      	ldr	r0, [r4, #4]
   2522c:	1a9b      	subs	r3, r3, r2
   2522e:	08db      	lsrs	r3, r3, #3
   25230:	f363 158f 	bfi	r5, r3, #6, #10
   25234:	f01a f937 	bl	3f4a6 <log_strdup>
   25238:	4935      	ldr	r1, [pc, #212]	; (25310 <nrf_cloud_decode_requested_state+0x160>)
   2523a:	4602      	mov	r2, r0
   2523c:	4628      	mov	r0, r5
   2523e:	f01a f920 	bl	3f482 <log_string_sync>
	pairing_state_obj = json_object_decode(pairing_obj, "state");

	if (!pairing_state_obj || pairing_state_obj->type != cJSON_String) {
		LOG_DBG("No valid state found!");
		cJSON_Delete(root_obj);
		return -ENOENT;
   25242:	f06f 0401 	mvn.w	r4, #1
   25246:	e00d      	b.n	25264 <nrf_cloud_decode_requested_state+0xb4>
	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   25248:	a901      	add	r1, sp, #4
   2524a:	f7ff ff9f 	bl	2518c <nrf_cloud_decode_desired_obj>
		json_object_decode(desired_obj, "nrfcloud_mqtt_topic_prefix");
   2524e:	4931      	ldr	r1, [pc, #196]	; (25314 <nrf_cloud_decode_requested_state+0x164>)
   25250:	9801      	ldr	r0, [sp, #4]
   25252:	f01c f8b5 	bl	413c0 <json_object_decode>
	if (topic_prefix_obj != NULL) {
   25256:	b140      	cbz	r0, 2526a <nrf_cloud_decode_requested_state+0xba>
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   25258:	2307      	movs	r3, #7
		cJSON_Delete(root_obj);
   2525a:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   2525c:	7033      	strb	r3, [r6, #0]
		cJSON_Delete(root_obj);
   2525e:	f7fd fe2b 	bl	22eb8 <cJSON_Delete>
		return 0;
   25262:	2400      	movs	r4, #0
	}

	cJSON_Delete(root_obj);

	return 0;
}
   25264:	4620      	mov	r0, r4
   25266:	b002      	add	sp, #8
   25268:	bd70      	pop	{r4, r5, r6, pc}
	pairing_obj = json_object_decode(desired_obj, "pairing");
   2526a:	492b      	ldr	r1, [pc, #172]	; (25318 <nrf_cloud_decode_requested_state+0x168>)
   2526c:	9801      	ldr	r0, [sp, #4]
   2526e:	f01c f8a7 	bl	413c0 <json_object_decode>
	pairing_state_obj = json_object_decode(pairing_obj, "state");
   25272:	492a      	ldr	r1, [pc, #168]	; (2531c <nrf_cloud_decode_requested_state+0x16c>)
   25274:	f01c f8a4 	bl	413c0 <json_object_decode>
	if (!pairing_state_obj || pairing_state_obj->type != cJSON_String) {
   25278:	b110      	cbz	r0, 25280 <nrf_cloud_decode_requested_state+0xd0>
   2527a:	68c3      	ldr	r3, [r0, #12]
   2527c:	2b10      	cmp	r3, #16
   2527e:	d012      	beq.n	252a6 <nrf_cloud_decode_requested_state+0xf6>
		LOG_DBG("No valid state found!");
   25280:	2304      	movs	r3, #4
   25282:	f04f 0000 	mov.w	r0, #0
   25286:	4a20      	ldr	r2, [pc, #128]	; (25308 <nrf_cloud_decode_requested_state+0x158>)
   25288:	f363 0007 	bfi	r0, r3, #0, #8
   2528c:	4b1f      	ldr	r3, [pc, #124]	; (2530c <nrf_cloud_decode_requested_state+0x15c>)
   2528e:	4924      	ldr	r1, [pc, #144]	; (25320 <nrf_cloud_decode_requested_state+0x170>)
   25290:	1a9b      	subs	r3, r3, r2
   25292:	08db      	lsrs	r3, r3, #3
   25294:	f363 108f 	bfi	r0, r3, #6, #10
   25298:	4a22      	ldr	r2, [pc, #136]	; (25324 <nrf_cloud_decode_requested_state+0x174>)
   2529a:	f01a f8f2 	bl	3f482 <log_string_sync>
		cJSON_Delete(root_obj);
   2529e:	4628      	mov	r0, r5
   252a0:	f7fd fe0a 	bl	22eb8 <cJSON_Delete>
   252a4:	e7cd      	b.n	25242 <nrf_cloud_decode_requested_state+0x92>
	const char *state_str = pairing_state_obj->valuestring;
   252a6:	6904      	ldr	r4, [r0, #16]
	return !strncmp(s1, s2, strlen(s2));
   252a8:	481f      	ldr	r0, [pc, #124]	; (25328 <nrf_cloud_decode_requested_state+0x178>)
   252aa:	f7f4 fe1b 	bl	19ee4 <strlen>
   252ae:	491e      	ldr	r1, [pc, #120]	; (25328 <nrf_cloud_decode_requested_state+0x178>)
   252b0:	4602      	mov	r2, r0
   252b2:	4620      	mov	r0, r4
   252b4:	f01c fd76 	bl	41da4 <strncmp>
	if (compare(state_str, DUA_PIN_STR)) {
   252b8:	4604      	mov	r4, r0
   252ba:	b928      	cbnz	r0, 252c8 <nrf_cloud_decode_requested_state+0x118>
		(*requested_state) = STATE_UA_PIN_WAIT;
   252bc:	2306      	movs	r3, #6
	cJSON_Delete(root_obj);
   252be:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_WAIT;
   252c0:	7033      	strb	r3, [r6, #0]
	cJSON_Delete(root_obj);
   252c2:	f7fd fdf9 	bl	22eb8 <cJSON_Delete>
	return 0;
   252c6:	e7cd      	b.n	25264 <nrf_cloud_decode_requested_state+0xb4>
		LOG_ERR("Deprecated state. Delete device from nrfCloud and update device with JITP certificates.");
   252c8:	2301      	movs	r3, #1
   252ca:	f04f 0000 	mov.w	r0, #0
   252ce:	4a0e      	ldr	r2, [pc, #56]	; (25308 <nrf_cloud_decode_requested_state+0x158>)
   252d0:	f363 0007 	bfi	r0, r3, #0, #8
   252d4:	4b0d      	ldr	r3, [pc, #52]	; (2530c <nrf_cloud_decode_requested_state+0x15c>)
   252d6:	4915      	ldr	r1, [pc, #84]	; (2532c <nrf_cloud_decode_requested_state+0x17c>)
   252d8:	1a9b      	subs	r3, r3, r2
   252da:	08db      	lsrs	r3, r3, #3
   252dc:	f363 108f 	bfi	r0, r3, #6, #10
   252e0:	f01a f8cf 	bl	3f482 <log_string_sync>
		cJSON_Delete(root_obj);
   252e4:	4628      	mov	r0, r5
   252e6:	f7fd fde7 	bl	22eb8 <cJSON_Delete>
		return -ENOTSUP;
   252ea:	f06f 0485 	mvn.w	r4, #133	; 0x85
   252ee:	e7b9      	b.n	25264 <nrf_cloud_decode_requested_state+0xb4>
   252f0:	00047a0b 	.word	0x00047a0b
   252f4:	00045316 	.word	0x00045316
   252f8:	00047b24 	.word	0x00047b24
   252fc:	00047a2a 	.word	0x00047a2a
   25300:	00047a3f 	.word	0x00047a3f
   25304:	00047a59 	.word	0x00047a59
   25308:	00042fb4 	.word	0x00042fb4
   2530c:	0004307c 	.word	0x0004307c
   25310:	00047a69 	.word	0x00047a69
   25314:	00047a80 	.word	0x00047a80
   25318:	00047a9b 	.word	0x00047a9b
   2531c:	00045925 	.word	0x00045925
   25320:	00047aa3 	.word	0x00047aa3
   25324:	000479ac 	.word	0x000479ac
   25328:	00047abd 	.word	0x00047abd
   2532c:	00047acc 	.word	0x00047acc

00025330 <nrf_cloud_encode_state>:

int nrf_cloud_encode_state(u32_t reported_state, struct nrf_cloud_data *output)
{
   25330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25334:	4604      	mov	r4, r0
   25336:	b086      	sub	sp, #24
	int ret;

	__ASSERT_NO_MSG(output != NULL);
   25338:	4689      	mov	r9, r1
   2533a:	b959      	cbnz	r1, 25354 <nrf_cloud_encode_state+0x24>
   2533c:	495a      	ldr	r1, [pc, #360]	; (254a8 <nrf_cloud_encode_state+0x178>)
   2533e:	485b      	ldr	r0, [pc, #364]	; (254ac <nrf_cloud_encode_state+0x17c>)
   25340:	f44f 7381 	mov.w	r3, #258	; 0x102
   25344:	4a5a      	ldr	r2, [pc, #360]	; (254b0 <nrf_cloud_encode_state+0x180>)
   25346:	f01a f87e 	bl	3f446 <printk>
   2534a:	f44f 7181 	mov.w	r1, #258	; 0x102
   2534e:	4858      	ldr	r0, [pc, #352]	; (254b0 <nrf_cloud_encode_state+0x180>)
   25350:	f01a f886 	bl	3f460 <assert_post_action>

	cJSON *root_obj = cJSON_CreateObject();
   25354:	f7fd fe74 	bl	23040 <cJSON_CreateObject>
   25358:	4607      	mov	r7, r0
	cJSON *state_obj = cJSON_CreateObject();
   2535a:	f7fd fe71 	bl	23040 <cJSON_CreateObject>
   2535e:	4680      	mov	r8, r0
	cJSON *reported_obj = cJSON_CreateObject();
   25360:	f7fd fe6e 	bl	23040 <cJSON_CreateObject>
   25364:	4606      	mov	r6, r0
	cJSON *pairing_obj = cJSON_CreateObject();
   25366:	f7fd fe6b 	bl	23040 <cJSON_CreateObject>
   2536a:	4605      	mov	r5, r0

	if ((root_obj == NULL) || (state_obj == NULL) ||
   2536c:	b127      	cbz	r7, 25378 <nrf_cloud_encode_state+0x48>
   2536e:	f1b8 0f00 	cmp.w	r8, #0
   25372:	d001      	beq.n	25378 <nrf_cloud_encode_state+0x48>
   25374:	b106      	cbz	r6, 25378 <nrf_cloud_encode_state+0x48>
	    (reported_obj == NULL) || (pairing_obj == NULL)) {
   25376:	b970      	cbnz	r0, 25396 <nrf_cloud_encode_state+0x66>

		/* Report pairing topics. */
		cJSON *topics_obj = cJSON_CreateObject();

		if (topics_obj == NULL) {
			cJSON_Delete(root_obj);
   25378:	4638      	mov	r0, r7
	ret += json_add_obj(reported_obj, "pairing", pairing_obj);
	ret += json_add_obj(state_obj, "reported", reported_obj);
	ret += json_add_obj(root_obj, "state", state_obj);

	if (ret != 0) {
		cJSON_Delete(root_obj);
   2537a:	f7fd fd9d 	bl	22eb8 <cJSON_Delete>
		cJSON_Delete(state_obj);
   2537e:	4640      	mov	r0, r8
   25380:	f7fd fd9a 	bl	22eb8 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   25384:	4630      	mov	r0, r6
   25386:	f7fd fd97 	bl	22eb8 <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   2538a:	4628      	mov	r0, r5
   2538c:	f7fd fd94 	bl	22eb8 <cJSON_Delete>

	buffer = cJSON_PrintUnformatted(root_obj);
	cJSON_Delete(root_obj);

	if (buffer == NULL) {
		return -ENOMEM;
   25390:	f06f 040b 	mvn.w	r4, #11
   25394:	e011      	b.n	253ba <nrf_cloud_encode_state+0x8a>
	switch (reported_state) {
   25396:	2c06      	cmp	r4, #6
   25398:	d013      	beq.n	253c2 <nrf_cloud_encode_state+0x92>
   2539a:	2c07      	cmp	r4, #7
   2539c:	d04c      	beq.n	25438 <nrf_cloud_encode_state+0x108>
		cJSON_Delete(root_obj);
   2539e:	4638      	mov	r0, r7
   253a0:	f7fd fd8a 	bl	22eb8 <cJSON_Delete>
		cJSON_Delete(state_obj);
   253a4:	4640      	mov	r0, r8
   253a6:	f7fd fd87 	bl	22eb8 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   253aa:	4630      	mov	r0, r6
   253ac:	f7fd fd84 	bl	22eb8 <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   253b0:	4628      	mov	r0, r5
   253b2:	f7fd fd81 	bl	22eb8 <cJSON_Delete>
		return -ENOTSUP;
   253b6:	f06f 0485 	mvn.w	r4, #133	; 0x85

	output->ptr = buffer;
	output->len = strlen(buffer);

	return 0;
}
   253ba:	4620      	mov	r0, r4
   253bc:	b006      	add	sp, #24
   253be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ret += json_add_str(pairing_obj, "state", DUA_PIN_STR);
   253c2:	4a3c      	ldr	r2, [pc, #240]	; (254b4 <nrf_cloud_encode_state+0x184>)
   253c4:	493c      	ldr	r1, [pc, #240]	; (254b8 <nrf_cloud_encode_state+0x188>)
   253c6:	f01b ffea 	bl	4139e <json_add_str>
		ret += json_add_null(pairing_obj, "topics");
   253ca:	493c      	ldr	r1, [pc, #240]	; (254bc <nrf_cloud_encode_state+0x18c>)
		ret += json_add_str(pairing_obj, "state", DUA_PIN_STR);
   253cc:	4604      	mov	r4, r0
		ret += json_add_null(pairing_obj, "topics");
   253ce:	4628      	mov	r0, r5
   253d0:	f01b fffa 	bl	413c8 <json_add_null>
		ret += json_add_null(pairing_obj, "config");
   253d4:	493a      	ldr	r1, [pc, #232]	; (254c0 <nrf_cloud_encode_state+0x190>)
		ret += json_add_null(pairing_obj, "topics");
   253d6:	4404      	add	r4, r0
		ret += json_add_null(pairing_obj, "config");
   253d8:	4628      	mov	r0, r5
   253da:	f01b fff5 	bl	413c8 <json_add_null>
		ret += json_add_null(reported_obj, "stage");
   253de:	4939      	ldr	r1, [pc, #228]	; (254c4 <nrf_cloud_encode_state+0x194>)
		ret += json_add_null(pairing_obj, "config");
   253e0:	4404      	add	r4, r0
		ret += json_add_null(reported_obj, "stage");
   253e2:	4630      	mov	r0, r6
   253e4:	f01b fff0 	bl	413c8 <json_add_null>
		ret += json_add_null(reported_obj,
   253e8:	4937      	ldr	r1, [pc, #220]	; (254c8 <nrf_cloud_encode_state+0x198>)
		ret += json_add_null(reported_obj, "stage");
   253ea:	4404      	add	r4, r0
		ret += json_add_null(reported_obj,
   253ec:	4630      	mov	r0, r6
   253ee:	f01b ffeb 	bl	413c8 <json_add_null>
   253f2:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   253f4:	462a      	mov	r2, r5
   253f6:	4935      	ldr	r1, [pc, #212]	; (254cc <nrf_cloud_encode_state+0x19c>)
   253f8:	4630      	mov	r0, r6
   253fa:	f01b f9e5 	bl	407c8 <cJSON_AddItemToObject>
   253fe:	4632      	mov	r2, r6
   25400:	4933      	ldr	r1, [pc, #204]	; (254d0 <nrf_cloud_encode_state+0x1a0>)
   25402:	4640      	mov	r0, r8
   25404:	f01b f9e0 	bl	407c8 <cJSON_AddItemToObject>
   25408:	4638      	mov	r0, r7
   2540a:	4642      	mov	r2, r8
   2540c:	492a      	ldr	r1, [pc, #168]	; (254b8 <nrf_cloud_encode_state+0x188>)
   2540e:	f01b f9db 	bl	407c8 <cJSON_AddItemToObject>
		cJSON_Delete(root_obj);
   25412:	4638      	mov	r0, r7
	if (ret != 0) {
   25414:	2c00      	cmp	r4, #0
   25416:	d1b0      	bne.n	2537a <nrf_cloud_encode_state+0x4a>
	buffer = cJSON_PrintUnformatted(root_obj);
   25418:	f01b f9c6 	bl	407a8 <cJSON_PrintUnformatted>
   2541c:	4605      	mov	r5, r0
	cJSON_Delete(root_obj);
   2541e:	4638      	mov	r0, r7
   25420:	f7fd fd4a 	bl	22eb8 <cJSON_Delete>
	if (buffer == NULL) {
   25424:	2d00      	cmp	r5, #0
   25426:	d0b3      	beq.n	25390 <nrf_cloud_encode_state+0x60>
	output->ptr = buffer;
   25428:	f8c9 5004 	str.w	r5, [r9, #4]
	output->len = strlen(buffer);
   2542c:	4628      	mov	r0, r5
   2542e:	f7f4 fd59 	bl	19ee4 <strlen>
   25432:	f8c9 0000 	str.w	r0, [r9]
	return 0;
   25436:	e7c0      	b.n	253ba <nrf_cloud_encode_state+0x8a>
		nct_dc_endpoint_get(&tx_endp, &rx_endp, &m_endp);
   25438:	aa04      	add	r2, sp, #16
   2543a:	4669      	mov	r1, sp
   2543c:	a802      	add	r0, sp, #8
   2543e:	f000 ffef 	bl	26420 <nct_dc_endpoint_get>
		ret += json_add_str(reported_obj, "nrfcloud_mqtt_topic_prefix",
   25442:	9a05      	ldr	r2, [sp, #20]
   25444:	4920      	ldr	r1, [pc, #128]	; (254c8 <nrf_cloud_encode_state+0x198>)
   25446:	4630      	mov	r0, r6
   25448:	f01b ffa9 	bl	4139e <json_add_str>
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   2544c:	4a21      	ldr	r2, [pc, #132]	; (254d4 <nrf_cloud_encode_state+0x1a4>)
		ret += json_add_str(reported_obj, "nrfcloud_mqtt_topic_prefix",
   2544e:	4604      	mov	r4, r0
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   25450:	4919      	ldr	r1, [pc, #100]	; (254b8 <nrf_cloud_encode_state+0x188>)
   25452:	4628      	mov	r0, r5
   25454:	f01b ffa3 	bl	4139e <json_add_str>
		ret += json_add_null(pairing_obj, "config");
   25458:	4919      	ldr	r1, [pc, #100]	; (254c0 <nrf_cloud_encode_state+0x190>)
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   2545a:	4404      	add	r4, r0
		ret += json_add_null(pairing_obj, "config");
   2545c:	4628      	mov	r0, r5
   2545e:	f01b ffb3 	bl	413c8 <json_add_null>
		ret += json_add_null(reported_obj, "pairingStatus");
   25462:	491d      	ldr	r1, [pc, #116]	; (254d8 <nrf_cloud_encode_state+0x1a8>)
		ret += json_add_null(pairing_obj, "config");
   25464:	4404      	add	r4, r0
		ret += json_add_null(reported_obj, "pairingStatus");
   25466:	4630      	mov	r0, r6
   25468:	f01b ffae 	bl	413c8 <json_add_null>
   2546c:	4404      	add	r4, r0
		cJSON *topics_obj = cJSON_CreateObject();
   2546e:	f7fd fde7 	bl	23040 <cJSON_CreateObject>
		if (topics_obj == NULL) {
   25472:	4682      	mov	sl, r0
   25474:	2800      	cmp	r0, #0
   25476:	f43f af7f 	beq.w	25378 <nrf_cloud_encode_state+0x48>
		ret += json_add_str(topics_obj, "d2c", tx_endp.ptr);
   2547a:	9a03      	ldr	r2, [sp, #12]
   2547c:	4917      	ldr	r1, [pc, #92]	; (254dc <nrf_cloud_encode_state+0x1ac>)
   2547e:	f01b ff8e 	bl	4139e <json_add_str>
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   25482:	9a01      	ldr	r2, [sp, #4]
		ret += json_add_str(topics_obj, "d2c", tx_endp.ptr);
   25484:	4404      	add	r4, r0
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   25486:	4916      	ldr	r1, [pc, #88]	; (254e0 <nrf_cloud_encode_state+0x1b0>)
   25488:	4650      	mov	r0, sl
   2548a:	f01b ff88 	bl	4139e <json_add_str>
	cJSON_AddItemToObject(parent, str, item);
   2548e:	4652      	mov	r2, sl
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   25490:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   25492:	490a      	ldr	r1, [pc, #40]	; (254bc <nrf_cloud_encode_state+0x18c>)
   25494:	4628      	mov	r0, r5
   25496:	f01b f997 	bl	407c8 <cJSON_AddItemToObject>
		if (ret != 0) {
   2549a:	2c00      	cmp	r4, #0
   2549c:	d0aa      	beq.n	253f4 <nrf_cloud_encode_state+0xc4>
			cJSON_Delete(topics_obj);
   2549e:	4650      	mov	r0, sl
   254a0:	f7fd fd0a 	bl	22eb8 <cJSON_Delete>
		break;
   254a4:	e7a6      	b.n	253f4 <nrf_cloud_encode_state+0xc4>
   254a6:	bf00      	nop
   254a8:	00045906 	.word	0x00045906
   254ac:	00045316 	.word	0x00045316
   254b0:	00047b24 	.word	0x00047b24
   254b4:	00047abd 	.word	0x00047abd
   254b8:	00045925 	.word	0x00045925
   254bc:	00047bd0 	.word	0x00047bd0
   254c0:	00047bd7 	.word	0x00047bd7
   254c4:	00047bde 	.word	0x00047bde
   254c8:	00047a80 	.word	0x00047a80
   254cc:	00047a9b 	.word	0x00047a9b
   254d0:	0004591c 	.word	0x0004591c
   254d4:	00047be4 	.word	0x00047be4
   254d8:	00047beb 	.word	0x00047beb
   254dc:	00047bf9 	.word	0x00047bf9
   254e0:	00047bfd 	.word	0x00047bfd

000254e4 <nrf_cloud_decode_data_endpoint>:
 */
int nrf_cloud_decode_data_endpoint(const struct nrf_cloud_data *input,
				   struct nrf_cloud_data *tx_endpoint,
				   struct nrf_cloud_data *rx_endpoint,
				   struct nrf_cloud_data *m_endpoint)
{
   254e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   254e8:	4689      	mov	r9, r1
   254ea:	4690      	mov	r8, r2
   254ec:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(input != NULL);
   254ee:	4604      	mov	r4, r0
   254f0:	b958      	cbnz	r0, 2550a <nrf_cloud_decode_data_endpoint+0x26>
   254f2:	4950      	ldr	r1, [pc, #320]	; (25634 <nrf_cloud_decode_data_endpoint+0x150>)
   254f4:	4850      	ldr	r0, [pc, #320]	; (25638 <nrf_cloud_decode_data_endpoint+0x154>)
   254f6:	f44f 73ba 	mov.w	r3, #372	; 0x174
   254fa:	4a50      	ldr	r2, [pc, #320]	; (2563c <nrf_cloud_decode_data_endpoint+0x158>)
   254fc:	f019 ffa3 	bl	3f446 <printk>
   25500:	f44f 71ba 	mov.w	r1, #372	; 0x174
   25504:	484d      	ldr	r0, [pc, #308]	; (2563c <nrf_cloud_decode_data_endpoint+0x158>)
   25506:	f019 ffab 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   2550a:	6863      	ldr	r3, [r4, #4]
   2550c:	b95b      	cbnz	r3, 25526 <nrf_cloud_decode_data_endpoint+0x42>
   2550e:	494c      	ldr	r1, [pc, #304]	; (25640 <nrf_cloud_decode_data_endpoint+0x15c>)
   25510:	4849      	ldr	r0, [pc, #292]	; (25638 <nrf_cloud_decode_data_endpoint+0x154>)
   25512:	f240 1375 	movw	r3, #373	; 0x175
   25516:	4a49      	ldr	r2, [pc, #292]	; (2563c <nrf_cloud_decode_data_endpoint+0x158>)
   25518:	f019 ff95 	bl	3f446 <printk>
   2551c:	f240 1175 	movw	r1, #373	; 0x175
   25520:	4846      	ldr	r0, [pc, #280]	; (2563c <nrf_cloud_decode_data_endpoint+0x158>)
   25522:	f019 ff9d 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   25526:	6823      	ldr	r3, [r4, #0]
   25528:	b95b      	cbnz	r3, 25542 <nrf_cloud_decode_data_endpoint+0x5e>
   2552a:	4946      	ldr	r1, [pc, #280]	; (25644 <nrf_cloud_decode_data_endpoint+0x160>)
   2552c:	4842      	ldr	r0, [pc, #264]	; (25638 <nrf_cloud_decode_data_endpoint+0x154>)
   2552e:	f44f 73bb 	mov.w	r3, #374	; 0x176
   25532:	4a42      	ldr	r2, [pc, #264]	; (2563c <nrf_cloud_decode_data_endpoint+0x158>)
   25534:	f019 ff87 	bl	3f446 <printk>
   25538:	f44f 71bb 	mov.w	r1, #374	; 0x176
   2553c:	483f      	ldr	r0, [pc, #252]	; (2563c <nrf_cloud_decode_data_endpoint+0x158>)
   2553e:	f019 ff8f 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(tx_endpoint != NULL);
   25542:	f1b9 0f00 	cmp.w	r9, #0
   25546:	d10b      	bne.n	25560 <nrf_cloud_decode_data_endpoint+0x7c>
   25548:	493f      	ldr	r1, [pc, #252]	; (25648 <nrf_cloud_decode_data_endpoint+0x164>)
   2554a:	483b      	ldr	r0, [pc, #236]	; (25638 <nrf_cloud_decode_data_endpoint+0x154>)
   2554c:	f240 1377 	movw	r3, #375	; 0x177
   25550:	4a3a      	ldr	r2, [pc, #232]	; (2563c <nrf_cloud_decode_data_endpoint+0x158>)
   25552:	f019 ff78 	bl	3f446 <printk>
   25556:	f240 1177 	movw	r1, #375	; 0x177
   2555a:	4838      	ldr	r0, [pc, #224]	; (2563c <nrf_cloud_decode_data_endpoint+0x158>)
   2555c:	f019 ff80 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(rx_endpoint != NULL);
   25560:	f1b8 0f00 	cmp.w	r8, #0
   25564:	d10b      	bne.n	2557e <nrf_cloud_decode_data_endpoint+0x9a>
   25566:	4939      	ldr	r1, [pc, #228]	; (2564c <nrf_cloud_decode_data_endpoint+0x168>)
   25568:	4833      	ldr	r0, [pc, #204]	; (25638 <nrf_cloud_decode_data_endpoint+0x154>)
   2556a:	f44f 73bc 	mov.w	r3, #376	; 0x178
   2556e:	4a33      	ldr	r2, [pc, #204]	; (2563c <nrf_cloud_decode_data_endpoint+0x158>)
   25570:	f019 ff69 	bl	3f446 <printk>
   25574:	f44f 71bc 	mov.w	r1, #376	; 0x178
   25578:	4830      	ldr	r0, [pc, #192]	; (2563c <nrf_cloud_decode_data_endpoint+0x158>)
   2557a:	f019 ff71 	bl	3f460 <assert_post_action>

	int err;
	cJSON *root_obj;
	cJSON *m_endpoint_obj = NULL;
	cJSON *desired_obj = NULL;
   2557e:	2300      	movs	r3, #0

	root_obj = cJSON_Parse(input->ptr);
   25580:	6860      	ldr	r0, [r4, #4]
	cJSON *desired_obj = NULL;
   25582:	9301      	str	r3, [sp, #4]
	root_obj = cJSON_Parse(input->ptr);
   25584:	f01b f90c 	bl	407a0 <cJSON_Parse>
	if (root_obj == NULL) {
   25588:	4605      	mov	r5, r0
   2558a:	b308      	cbz	r0, 255d0 <nrf_cloud_decode_data_endpoint+0xec>
		return -ENOENT;
	}

	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   2558c:	a901      	add	r1, sp, #4
   2558e:	f7ff fdfd 	bl	2518c <nrf_cloud_decode_desired_obj>

	if (m_endpoint != NULL) {
   25592:	b307      	cbz	r7, 255d6 <nrf_cloud_decode_data_endpoint+0xf2>
		m_endpoint_obj = json_object_decode(
   25594:	492e      	ldr	r1, [pc, #184]	; (25650 <nrf_cloud_decode_data_endpoint+0x16c>)
   25596:	9801      	ldr	r0, [sp, #4]
   25598:	f01b ff12 	bl	413c0 <json_object_decode>
   2559c:	4604      	mov	r4, r0
			desired_obj, "nrfcloud_mqtt_topic_prefix");
	}

	cJSON *pairing_obj = json_object_decode(desired_obj, "pairing");
   2559e:	492d      	ldr	r1, [pc, #180]	; (25654 <nrf_cloud_decode_data_endpoint+0x170>)
   255a0:	9801      	ldr	r0, [sp, #4]
   255a2:	f01b ff0d 	bl	413c0 <json_object_decode>
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   255a6:	492c      	ldr	r1, [pc, #176]	; (25658 <nrf_cloud_decode_data_endpoint+0x174>)
	cJSON *pairing_obj = json_object_decode(desired_obj, "pairing");
   255a8:	4606      	mov	r6, r0
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   255aa:	f01b ff09 	bl	413c0 <json_object_decode>
	cJSON *topic_obj = json_object_decode(pairing_obj, "topics");
   255ae:	492b      	ldr	r1, [pc, #172]	; (2565c <nrf_cloud_decode_data_endpoint+0x178>)
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   255b0:	4682      	mov	sl, r0
	cJSON *topic_obj = json_object_decode(pairing_obj, "topics");
   255b2:	4630      	mov	r0, r6
   255b4:	f01b ff04 	bl	413c0 <json_object_decode>
   255b8:	4606      	mov	r6, r0

	if ((pairing_state_obj == NULL) || (topic_obj == NULL) ||
   255ba:	f1ba 0f00 	cmp.w	sl, #0
   255be:	d004      	beq.n	255ca <nrf_cloud_decode_data_endpoint+0xe6>
   255c0:	b118      	cbz	r0, 255ca <nrf_cloud_decode_data_endpoint+0xe6>
   255c2:	f8da 300c 	ldr.w	r3, [sl, #12]
   255c6:	2b10      	cmp	r3, #16
   255c8:	d007      	beq.n	255da <nrf_cloud_decode_data_endpoint+0xf6>
	}

	const char *state_str = pairing_state_obj->valuestring;

	if (!compare(state_str, PAIRED_STR)) {
		cJSON_Delete(root_obj);
   255ca:	4628      	mov	r0, r5
   255cc:	f7fd fc74 	bl	22eb8 <cJSON_Delete>
		return -ENOENT;
   255d0:	f06f 0401 	mvn.w	r4, #1
   255d4:	e017      	b.n	25606 <nrf_cloud_decode_data_endpoint+0x122>
	cJSON *m_endpoint_obj = NULL;
   255d6:	463c      	mov	r4, r7
   255d8:	e7e1      	b.n	2559e <nrf_cloud_decode_data_endpoint+0xba>
	return !strncmp(s1, s2, strlen(s2));
   255da:	4821      	ldr	r0, [pc, #132]	; (25660 <nrf_cloud_decode_data_endpoint+0x17c>)
	const char *state_str = pairing_state_obj->valuestring;
   255dc:	f8da a010 	ldr.w	sl, [sl, #16]
	return !strncmp(s1, s2, strlen(s2));
   255e0:	f7f4 fc80 	bl	19ee4 <strlen>
   255e4:	491e      	ldr	r1, [pc, #120]	; (25660 <nrf_cloud_decode_data_endpoint+0x17c>)
   255e6:	4602      	mov	r2, r0
   255e8:	4650      	mov	r0, sl
   255ea:	f01c fbdb 	bl	41da4 <strncmp>
	if (!compare(state_str, PAIRED_STR)) {
   255ee:	2800      	cmp	r0, #0
   255f0:	d1eb      	bne.n	255ca <nrf_cloud_decode_data_endpoint+0xe6>
		return -ENOENT;
	}

	if (m_endpoint_obj != NULL) {
   255f2:	b164      	cbz	r4, 2560e <nrf_cloud_decode_data_endpoint+0x12a>
		err = json_decode_and_alloc(m_endpoint_obj, m_endpoint);
   255f4:	4620      	mov	r0, r4
   255f6:	4639      	mov	r1, r7
   255f8:	f01b fef6 	bl	413e8 <json_decode_and_alloc>
		if (err) {
   255fc:	4604      	mov	r4, r0
   255fe:	b130      	cbz	r0, 2560e <nrf_cloud_decode_data_endpoint+0x12a>

	cJSON *rx_obj = json_object_decode(topic_obj, "c2d");

	err = json_decode_and_alloc(rx_obj, rx_endpoint);
	if (err) {
		cJSON_Delete(root_obj);
   25600:	4628      	mov	r0, r5
		return err;
	}

	cJSON_Delete(root_obj);
   25602:	f7fd fc59 	bl	22eb8 <cJSON_Delete>

	return err;
}
   25606:	4620      	mov	r0, r4
   25608:	b002      	add	sp, #8
   2560a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cJSON *tx_obj = json_object_decode(topic_obj, "d2c");
   2560e:	4915      	ldr	r1, [pc, #84]	; (25664 <nrf_cloud_decode_data_endpoint+0x180>)
   25610:	4630      	mov	r0, r6
   25612:	f01b fed5 	bl	413c0 <json_object_decode>
	err = json_decode_and_alloc(tx_obj, tx_endpoint);
   25616:	4649      	mov	r1, r9
   25618:	f01b fee6 	bl	413e8 <json_decode_and_alloc>
	if (err) {
   2561c:	4604      	mov	r4, r0
   2561e:	2800      	cmp	r0, #0
   25620:	d1ee      	bne.n	25600 <nrf_cloud_decode_data_endpoint+0x11c>
	cJSON *rx_obj = json_object_decode(topic_obj, "c2d");
   25622:	4911      	ldr	r1, [pc, #68]	; (25668 <nrf_cloud_decode_data_endpoint+0x184>)
   25624:	4630      	mov	r0, r6
   25626:	f01b fecb 	bl	413c0 <json_object_decode>
	err = json_decode_and_alloc(rx_obj, rx_endpoint);
   2562a:	4641      	mov	r1, r8
   2562c:	f01b fedc 	bl	413e8 <json_decode_and_alloc>
	if (err) {
   25630:	4604      	mov	r4, r0
   25632:	e7e5      	b.n	25600 <nrf_cloud_decode_data_endpoint+0x11c>
   25634:	00047a2a 	.word	0x00047a2a
   25638:	00045316 	.word	0x00045316
   2563c:	00047b24 	.word	0x00047b24
   25640:	00047a3f 	.word	0x00047a3f
   25644:	00047a59 	.word	0x00047a59
   25648:	000479cd 	.word	0x000479cd
   2564c:	000479e8 	.word	0x000479e8
   25650:	00047a80 	.word	0x00047a80
   25654:	00047a9b 	.word	0x00047a9b
   25658:	00045925 	.word	0x00045925
   2565c:	00047bd0 	.word	0x00047bd0
   25660:	00047be4 	.word	0x00047be4
   25664:	00047bf9 	.word	0x00047bf9
   25668:	00047bfd 	.word	0x00047bfd

0002566c <state_ua_pin_wait>:

	return err;
}

static int state_ua_pin_wait(void)
{
   2566c:	b510      	push	{r4, lr}
   2566e:	b088      	sub	sp, #32
	int err;
	struct nct_cc_data msg = {
   25670:	2210      	movs	r2, #16
   25672:	2100      	movs	r1, #0
   25674:	4668      	mov	r0, sp
   25676:	f01c f9bc 	bl	419f2 <memset>
   2567a:	2301      	movs	r3, #1
		.opcode = NCT_CC_OPCODE_UPDATE_REQ,
		.id = DEFAULT_REPORT_ID,
	};

	/* Publish report to the cloud on current status. */
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   2567c:	4669      	mov	r1, sp
   2567e:	2006      	movs	r0, #6
	struct nct_cc_data msg = {
   25680:	9302      	str	r3, [sp, #8]
   25682:	f88d 300c 	strb.w	r3, [sp, #12]
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   25686:	f7ff fe53 	bl	25330 <nrf_cloud_encode_state>
	if (err) {
   2568a:	4604      	mov	r4, r0
   2568c:	b188      	cbz	r0, 256b2 <state_ua_pin_wait+0x46>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   2568e:	2301      	movs	r3, #1
   25690:	f04f 0000 	mov.w	r0, #0
   25694:	4a1b      	ldr	r2, [pc, #108]	; (25704 <state_ua_pin_wait+0x98>)
   25696:	f363 0007 	bfi	r0, r3, #0, #8
   2569a:	4b1b      	ldr	r3, [pc, #108]	; (25708 <state_ua_pin_wait+0x9c>)
   2569c:	491b      	ldr	r1, [pc, #108]	; (2570c <state_ua_pin_wait+0xa0>)
   2569e:	1a9b      	subs	r3, r3, r2
   256a0:	08db      	lsrs	r3, r3, #3
   256a2:	f363 108f 	bfi	r0, r3, #6, #10
   256a6:	4622      	mov	r2, r4
   256a8:	f019 feeb 	bl	3f482 <log_string_sync>
	};

	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);

	return 0;
}
   256ac:	4620      	mov	r0, r4
   256ae:	b008      	add	sp, #32
   256b0:	bd10      	pop	{r4, pc}
	err = nct_cc_send(&msg);
   256b2:	4668      	mov	r0, sp
   256b4:	f000 fe02 	bl	262bc <nct_cc_send>
	if (err) {
   256b8:	4604      	mov	r4, r0
   256ba:	b190      	cbz	r0, 256e2 <state_ua_pin_wait+0x76>
		LOG_ERR("nct_cc_send failed %d", err);
   256bc:	2301      	movs	r3, #1
   256be:	f04f 0000 	mov.w	r0, #0
   256c2:	4a10      	ldr	r2, [pc, #64]	; (25704 <state_ua_pin_wait+0x98>)
   256c4:	f363 0007 	bfi	r0, r3, #0, #8
   256c8:	4b0f      	ldr	r3, [pc, #60]	; (25708 <state_ua_pin_wait+0x9c>)
   256ca:	4911      	ldr	r1, [pc, #68]	; (25710 <state_ua_pin_wait+0xa4>)
   256cc:	1a9b      	subs	r3, r3, r2
   256ce:	08db      	lsrs	r3, r3, #3
   256d0:	f363 108f 	bfi	r0, r3, #6, #10
   256d4:	4622      	mov	r2, r4
   256d6:	f019 fed4 	bl	3f482 <log_string_sync>
		nrf_cloud_free((void *)msg.data.ptr);
   256da:	9801      	ldr	r0, [sp, #4]
   256dc:	f01b ffe8 	bl	416b0 <k_free>
		return err;
   256e0:	e7e4      	b.n	256ac <state_ua_pin_wait+0x40>
	nrf_cloud_free((void *)msg.data.ptr);
   256e2:	9801      	ldr	r0, [sp, #4]
   256e4:	f01b ffe4 	bl	416b0 <k_free>
	struct nrf_cloud_evt evt = {
   256e8:	2210      	movs	r2, #16
   256ea:	4621      	mov	r1, r4
   256ec:	eb0d 0002 	add.w	r0, sp, r2
   256f0:	f01c f97f 	bl	419f2 <memset>
   256f4:	2302      	movs	r3, #2
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   256f6:	a904      	add	r1, sp, #16
   256f8:	2006      	movs	r0, #6
	struct nrf_cloud_evt evt = {
   256fa:	f88d 3010 	strb.w	r3, [sp, #16]
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   256fe:	f7ff fcc1 	bl	25084 <nfsm_set_current_state_and_notify>
	return 0;
   25702:	e7d3      	b.n	256ac <state_ua_pin_wait+0x40>
   25704:	00042fb4 	.word	0x00042fb4
   25708:	00043084 	.word	0x00043084
   2570c:	00047d3f 	.word	0x00047d3f
   25710:	00047d60 	.word	0x00047d60

00025714 <initiate_cmd_handler>:
	}
	}
}

static int initiate_cmd_handler(const struct nct_evt *nct_evt)
{
   25714:	b513      	push	{r0, r1, r4, lr}
	int err;
	enum nfsm_state expected_state;
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;

	err = nrf_cloud_decode_requested_state(payload, &expected_state);
   25716:	6840      	ldr	r0, [r0, #4]
   25718:	f10d 0107 	add.w	r1, sp, #7
   2571c:	f7ff fd48 	bl	251b0 <nrf_cloud_decode_requested_state>
	if (err) {
   25720:	4604      	mov	r4, r0
   25722:	b188      	cbz	r0, 25748 <initiate_cmd_handler+0x34>
		LOG_ERR("nrf_cloud_decode_requested_state Failed %d", err);
   25724:	2301      	movs	r3, #1
   25726:	f04f 0000 	mov.w	r0, #0
   2572a:	4a0b      	ldr	r2, [pc, #44]	; (25758 <initiate_cmd_handler+0x44>)
   2572c:	f363 0007 	bfi	r0, r3, #0, #8
   25730:	4b0a      	ldr	r3, [pc, #40]	; (2575c <initiate_cmd_handler+0x48>)
   25732:	490b      	ldr	r1, [pc, #44]	; (25760 <initiate_cmd_handler+0x4c>)
   25734:	1a9b      	subs	r3, r3, r2
   25736:	08db      	lsrs	r3, r3, #3
   25738:	f363 108f 	bfi	r0, r3, #6, #10
   2573c:	4622      	mov	r2, r4
   2573e:	f019 fea0 	bl	3f482 <log_string_sync>
		return state_ua_pin_wait();
	}

	/* Any other state is ignored. */
	return 0;
}
   25742:	4620      	mov	r0, r4
   25744:	b002      	add	sp, #8
   25746:	bd10      	pop	{r4, pc}
	if (expected_state == STATE_UA_PIN_WAIT) {
   25748:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2574c:	2b06      	cmp	r3, #6
   2574e:	d1f8      	bne.n	25742 <initiate_cmd_handler+0x2e>
		return state_ua_pin_wait();
   25750:	f7ff ff8c 	bl	2566c <state_ua_pin_wait>
   25754:	4604      	mov	r4, r0
   25756:	e7f4      	b.n	25742 <initiate_cmd_handler+0x2e>
   25758:	00042fb4 	.word	0x00042fb4
   2575c:	00043084 	.word	0x00043084
   25760:	00047c11 	.word	0x00047c11

00025764 <initiate_n_complete_request_handler>:
{
   25764:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
   25766:	6846      	ldr	r6, [r0, #4]
{
   25768:	b090      	sub	sp, #64	; 0x40
	err = nrf_cloud_decode_requested_state(payload, &expected_state);
   2576a:	f10d 0107 	add.w	r1, sp, #7
   2576e:	4630      	mov	r0, r6
   25770:	f7ff fd1e 	bl	251b0 <nrf_cloud_decode_requested_state>
	if (err) {
   25774:	4604      	mov	r4, r0
   25776:	b178      	cbz	r0, 25798 <initiate_n_complete_request_handler+0x34>
		LOG_ERR("nrf_cloud_decode_requested_state failed %d", err);
   25778:	2301      	movs	r3, #1
   2577a:	f04f 0000 	mov.w	r0, #0
   2577e:	4a3e      	ldr	r2, [pc, #248]	; (25878 <initiate_n_complete_request_handler+0x114>)
   25780:	f363 0007 	bfi	r0, r3, #0, #8
   25784:	4b3d      	ldr	r3, [pc, #244]	; (2587c <initiate_n_complete_request_handler+0x118>)
   25786:	493e      	ldr	r1, [pc, #248]	; (25880 <initiate_n_complete_request_handler+0x11c>)
   25788:	1a9b      	subs	r3, r3, r2
   2578a:	4622      	mov	r2, r4
   2578c:	08db      	lsrs	r3, r3, #3
   2578e:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   25792:	f019 fe76 	bl	3f482 <log_string_sync>
		return err;
   25796:	e005      	b.n	257a4 <initiate_n_complete_request_handler+0x40>
	switch (expected_state) {
   25798:	f89d 5007 	ldrb.w	r5, [sp, #7]
   2579c:	2d06      	cmp	r5, #6
   2579e:	d004      	beq.n	257aa <initiate_n_complete_request_handler+0x46>
   257a0:	2d07      	cmp	r5, #7
   257a2:	d006      	beq.n	257b2 <initiate_n_complete_request_handler+0x4e>
}
   257a4:	4620      	mov	r0, r4
   257a6:	b010      	add	sp, #64	; 0x40
   257a8:	bd70      	pop	{r4, r5, r6, pc}
		return state_ua_pin_wait();
   257aa:	f7ff ff5f 	bl	2566c <state_ua_pin_wait>
   257ae:	4604      	mov	r4, r0
   257b0:	e7f8      	b.n	257a4 <initiate_n_complete_request_handler+0x40>
		err = nrf_cloud_decode_data_endpoint(payload, &tx, &rx,
   257b2:	ab06      	add	r3, sp, #24
   257b4:	aa02      	add	r2, sp, #8
   257b6:	a904      	add	r1, sp, #16
   257b8:	4630      	mov	r0, r6
   257ba:	f7ff fe93 	bl	254e4 <nrf_cloud_decode_data_endpoint>
		if (err) {
   257be:	4604      	mov	r4, r0
   257c0:	b168      	cbz	r0, 257de <initiate_n_complete_request_handler+0x7a>
			LOG_ERR("nrf_cloud_decode_data_endpoint failed %d",
   257c2:	2301      	movs	r3, #1
   257c4:	f04f 0000 	mov.w	r0, #0
   257c8:	4a2b      	ldr	r2, [pc, #172]	; (25878 <initiate_n_complete_request_handler+0x114>)
   257ca:	f363 0007 	bfi	r0, r3, #0, #8
   257ce:	4b2b      	ldr	r3, [pc, #172]	; (2587c <initiate_n_complete_request_handler+0x118>)
   257d0:	492c      	ldr	r1, [pc, #176]	; (25884 <initiate_n_complete_request_handler+0x120>)
   257d2:	1a9b      	subs	r3, r3, r2
   257d4:	08db      	lsrs	r3, r3, #3
   257d6:	f363 108f 	bfi	r0, r3, #6, #10
   257da:	4622      	mov	r2, r4
   257dc:	e7d9      	b.n	25792 <initiate_n_complete_request_handler+0x2e>
		nct_dc_endpoint_set(&tx, &rx, &m_endpoint);
   257de:	aa06      	add	r2, sp, #24
   257e0:	a902      	add	r1, sp, #8
   257e2:	a804      	add	r0, sp, #16
   257e4:	f000 fde8 	bl	263b8 <nct_dc_endpoint_set>
	struct nct_cc_data msg = {
   257e8:	4621      	mov	r1, r4
   257ea:	2210      	movs	r2, #16
   257ec:	a808      	add	r0, sp, #32
   257ee:	f01c f900 	bl	419f2 <memset>
   257f2:	f641 63d2 	movw	r3, #7890	; 0x1ed2
   257f6:	930a      	str	r3, [sp, #40]	; 0x28
   257f8:	2301      	movs	r3, #1
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   257fa:	a908      	add	r1, sp, #32
   257fc:	4628      	mov	r0, r5
	struct nct_cc_data msg = {
   257fe:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   25802:	f7ff fd95 	bl	25330 <nrf_cloud_encode_state>
	if (err) {
   25806:	4604      	mov	r4, r0
   25808:	b168      	cbz	r0, 25826 <initiate_n_complete_request_handler+0xc2>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   2580a:	2301      	movs	r3, #1
   2580c:	f04f 0000 	mov.w	r0, #0
   25810:	4a19      	ldr	r2, [pc, #100]	; (25878 <initiate_n_complete_request_handler+0x114>)
   25812:	f363 0007 	bfi	r0, r3, #0, #8
   25816:	4b19      	ldr	r3, [pc, #100]	; (2587c <initiate_n_complete_request_handler+0x118>)
   25818:	491b      	ldr	r1, [pc, #108]	; (25888 <initiate_n_complete_request_handler+0x124>)
   2581a:	1a9b      	subs	r3, r3, r2
   2581c:	08db      	lsrs	r3, r3, #3
   2581e:	f363 108f 	bfi	r0, r3, #6, #10
   25822:	4622      	mov	r2, r4
   25824:	e7b5      	b.n	25792 <initiate_n_complete_request_handler+0x2e>
	err = nct_cc_send(&msg);
   25826:	a808      	add	r0, sp, #32
   25828:	f000 fd48 	bl	262bc <nct_cc_send>
	if (err) {
   2582c:	4604      	mov	r4, r0
   2582e:	b190      	cbz	r0, 25856 <initiate_n_complete_request_handler+0xf2>
		LOG_ERR("nct_cc_send failed %d", err);
   25830:	2301      	movs	r3, #1
   25832:	f04f 0000 	mov.w	r0, #0
   25836:	4a10      	ldr	r2, [pc, #64]	; (25878 <initiate_n_complete_request_handler+0x114>)
   25838:	f363 0007 	bfi	r0, r3, #0, #8
   2583c:	4b0f      	ldr	r3, [pc, #60]	; (2587c <initiate_n_complete_request_handler+0x118>)
   2583e:	4913      	ldr	r1, [pc, #76]	; (2588c <initiate_n_complete_request_handler+0x128>)
   25840:	1a9b      	subs	r3, r3, r2
   25842:	08db      	lsrs	r3, r3, #3
   25844:	f363 108f 	bfi	r0, r3, #6, #10
   25848:	4622      	mov	r2, r4
   2584a:	f019 fe1a 	bl	3f482 <log_string_sync>
		nrf_cloud_free((void *)msg.data.ptr);
   2584e:	9809      	ldr	r0, [sp, #36]	; 0x24
   25850:	f01b ff2e 	bl	416b0 <k_free>
		return err;
   25854:	e7a6      	b.n	257a4 <initiate_n_complete_request_handler+0x40>
	nrf_cloud_free((void *)msg.data.ptr);
   25856:	9809      	ldr	r0, [sp, #36]	; 0x24
   25858:	f01b ff2a 	bl	416b0 <k_free>
	struct nrf_cloud_evt evt = {
   2585c:	4621      	mov	r1, r4
   2585e:	2210      	movs	r2, #16
   25860:	a80c      	add	r0, sp, #48	; 0x30
   25862:	f01c f8c6 	bl	419f2 <memset>
   25866:	2303      	movs	r3, #3
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   25868:	a90c      	add	r1, sp, #48	; 0x30
   2586a:	4628      	mov	r0, r5
	struct nrf_cloud_evt evt = {
   2586c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   25870:	f7ff fc08 	bl	25084 <nfsm_set_current_state_and_notify>
		return state_ua_pin_complete();
   25874:	e796      	b.n	257a4 <initiate_n_complete_request_handler+0x40>
   25876:	bf00      	nop
   25878:	00042fb4 	.word	0x00042fb4
   2587c:	00043084 	.word	0x00043084
   25880:	00047c3c 	.word	0x00047c3c
   25884:	00047c67 	.word	0x00047c67
   25888:	00047d3f 	.word	0x00047d3f
   2588c:	00047d60 	.word	0x00047d60

00025890 <cc_connection_handler>:
{
   25890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   25892:	4604      	mov	r4, r0
	const struct nrf_cloud_evt evt = {
   25894:	2100      	movs	r1, #0
   25896:	2210      	movs	r2, #16
   25898:	4668      	mov	r0, sp
   2589a:	f01c f8aa 	bl	419f2 <memset>
   2589e:	23ff      	movs	r3, #255	; 0xff
	if (nct_evt->status != 0) {
   258a0:	6821      	ldr	r1, [r4, #0]
	const struct nrf_cloud_evt evt = {
   258a2:	f88d 3000 	strb.w	r3, [sp]
	if (nct_evt->status != 0) {
   258a6:	b139      	cbz	r1, 258b8 <cc_connection_handler+0x28>
		nfsm_set_current_state_and_notify(STATE_ERROR, &evt);
   258a8:	4669      	mov	r1, sp
   258aa:	200c      	movs	r0, #12
   258ac:	f7ff fbea 	bl	25084 <nfsm_set_current_state_and_notify>
		return 0;
   258b0:	2400      	movs	r4, #0
}
   258b2:	4620      	mov	r0, r4
   258b4:	b004      	add	sp, #16
   258b6:	bd10      	pop	{r4, pc}
	nfsm_set_current_state_and_notify(STATE_CC_CONNECTED, NULL);
   258b8:	2004      	movs	r0, #4
   258ba:	f7ff fbe3 	bl	25084 <nfsm_set_current_state_and_notify>
	err = nct_cc_send(&get_request);
   258be:	4806      	ldr	r0, [pc, #24]	; (258d8 <cc_connection_handler+0x48>)
   258c0:	f000 fcfc 	bl	262bc <nct_cc_send>
	if (err) {
   258c4:	4604      	mov	r4, r0
   258c6:	b120      	cbz	r0, 258d2 <cc_connection_handler+0x42>
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   258c8:	4669      	mov	r1, sp
   258ca:	2002      	movs	r0, #2
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   258cc:	f7ff fbda 	bl	25084 <nfsm_set_current_state_and_notify>
	return 0;
   258d0:	e7ef      	b.n	258b2 <cc_connection_handler+0x22>
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   258d2:	4601      	mov	r1, r0
   258d4:	2005      	movs	r0, #5
   258d6:	e7f9      	b.n	258cc <cc_connection_handler+0x3c>
   258d8:	00043804 	.word	0x00043804

000258dc <initiate_cmd_in_dc_conn_handler>:

static int initiate_cmd_in_dc_conn_handler(const struct nct_evt *nct_evt)
{
   258dc:	b513      	push	{r0, r1, r4, lr}
	int err;
	enum nfsm_state expected_state;
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;

	err = nrf_cloud_decode_requested_state(payload, &expected_state);
   258de:	6840      	ldr	r0, [r0, #4]
   258e0:	f10d 0107 	add.w	r1, sp, #7
   258e4:	f7ff fc64 	bl	251b0 <nrf_cloud_decode_requested_state>
	if (err) {
   258e8:	4604      	mov	r4, r0
   258ea:	b188      	cbz	r0, 25910 <initiate_cmd_in_dc_conn_handler+0x34>
		LOG_ERR("nrf_cloud_decode_requested_state Failed %d", err);
   258ec:	2301      	movs	r3, #1
   258ee:	f04f 0000 	mov.w	r0, #0
   258f2:	4a0c      	ldr	r2, [pc, #48]	; (25924 <initiate_cmd_in_dc_conn_handler+0x48>)
   258f4:	f363 0007 	bfi	r0, r3, #0, #8
   258f8:	4b0b      	ldr	r3, [pc, #44]	; (25928 <initiate_cmd_in_dc_conn_handler+0x4c>)
   258fa:	490c      	ldr	r1, [pc, #48]	; (2592c <initiate_cmd_in_dc_conn_handler+0x50>)
   258fc:	1a9b      	subs	r3, r3, r2
   258fe:	08db      	lsrs	r3, r3, #3
   25900:	f363 108f 	bfi	r0, r3, #6, #10
   25904:	4622      	mov	r2, r4
   25906:	f019 fdbc 	bl	3f482 <log_string_sync>
		return state_ua_pin_wait();
	}

	/* Any other state is ignored. */
	return 0;
}
   2590a:	4620      	mov	r0, r4
   2590c:	b002      	add	sp, #8
   2590e:	bd10      	pop	{r4, pc}
	if (expected_state == STATE_UA_PIN_WAIT) {
   25910:	f89d 3007 	ldrb.w	r3, [sp, #7]
   25914:	2b06      	cmp	r3, #6
   25916:	d1f8      	bne.n	2590a <initiate_cmd_in_dc_conn_handler+0x2e>
		(void)nct_dc_disconnect();
   25918:	f000 fde6 	bl	264e8 <nct_dc_disconnect>
		return state_ua_pin_wait();
   2591c:	f7ff fea6 	bl	2566c <state_ua_pin_wait>
   25920:	4604      	mov	r4, r0
   25922:	e7f2      	b.n	2590a <initiate_cmd_in_dc_conn_handler+0x2e>
   25924:	00042fb4 	.word	0x00042fb4
   25928:	00043084 	.word	0x00043084
   2592c:	00047c11 	.word	0x00047c11

00025930 <nfsm_handle_incoming_event>:
{
   25930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25932:	460d      	mov	r5, r1
	if ((nct_evt == NULL) || (nct_evt->type >= NCT_EVT_TOTAL) ||
   25934:	4607      	mov	r7, r0
   25936:	b120      	cbz	r0, 25942 <nfsm_handle_incoming_event+0x12>
   25938:	7a06      	ldrb	r6, [r0, #8]
   2593a:	2e09      	cmp	r6, #9
   2593c:	d801      	bhi.n	25942 <nfsm_handle_incoming_event+0x12>
   2593e:	290c      	cmp	r1, #12
   25940:	d90d      	bls.n	2595e <nfsm_handle_incoming_event+0x2e>
		__ASSERT_NO_MSG(false);
   25942:	2383      	movs	r3, #131	; 0x83
   25944:	4a1c      	ldr	r2, [pc, #112]	; (259b8 <nfsm_handle_incoming_event+0x88>)
   25946:	491d      	ldr	r1, [pc, #116]	; (259bc <nfsm_handle_incoming_event+0x8c>)
   25948:	481d      	ldr	r0, [pc, #116]	; (259c0 <nfsm_handle_incoming_event+0x90>)
   2594a:	f019 fd7c 	bl	3f446 <printk>
   2594e:	2183      	movs	r1, #131	; 0x83
   25950:	4819      	ldr	r0, [pc, #100]	; (259b8 <nfsm_handle_incoming_event+0x88>)
   25952:	f019 fd85 	bl	3f460 <assert_post_action>
		return -EINVAL;
   25956:	f06f 0415 	mvn.w	r4, #21
}
   2595a:	4620      	mov	r0, r4
   2595c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (state_event_handlers[state][nct_evt->type] != NULL) {
   2595e:	4b19      	ldr	r3, [pc, #100]	; (259c4 <nfsm_handle_incoming_event+0x94>)
   25960:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   25964:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   25968:	b1a4      	cbz	r4, 25994 <nfsm_handle_incoming_event+0x64>
		err = state_event_handlers[state][nct_evt->type](nct_evt);
   2596a:	47a0      	blx	r4
		if (err) {
   2596c:	4604      	mov	r4, r0
   2596e:	2800      	cmp	r0, #0
   25970:	d0f3      	beq.n	2595a <nfsm_handle_incoming_event+0x2a>
			LOG_ERR("Handler failed! state: %d, type: %d", state,
   25972:	2301      	movs	r3, #1
   25974:	f04f 0000 	mov.w	r0, #0
   25978:	4a13      	ldr	r2, [pc, #76]	; (259c8 <nfsm_handle_incoming_event+0x98>)
   2597a:	f363 0007 	bfi	r0, r3, #0, #8
   2597e:	4b13      	ldr	r3, [pc, #76]	; (259cc <nfsm_handle_incoming_event+0x9c>)
   25980:	4913      	ldr	r1, [pc, #76]	; (259d0 <nfsm_handle_incoming_event+0xa0>)
   25982:	1a9b      	subs	r3, r3, r2
   25984:	462a      	mov	r2, r5
   25986:	08db      	lsrs	r3, r3, #3
   25988:	f363 108f 	bfi	r0, r3, #6, #10
   2598c:	7a3b      	ldrb	r3, [r7, #8]
	LOG_ERR("Dropping FSM transition %d, current state %d", nct_evt->type,
   2598e:	f019 fd78 	bl	3f482 <log_string_sync>
	return 0;
   25992:	e7e2      	b.n	2595a <nfsm_handle_incoming_event+0x2a>
	LOG_ERR("Dropping FSM transition %d, current state %d", nct_evt->type,
   25994:	2301      	movs	r3, #1
   25996:	f04f 0500 	mov.w	r5, #0
   2599a:	4a0b      	ldr	r2, [pc, #44]	; (259c8 <nfsm_handle_incoming_event+0x98>)
   2599c:	f363 0507 	bfi	r5, r3, #0, #8
   259a0:	4b0a      	ldr	r3, [pc, #40]	; (259cc <nfsm_handle_incoming_event+0x9c>)
   259a2:	1a9b      	subs	r3, r3, r2
   259a4:	08db      	lsrs	r3, r3, #3
   259a6:	f363 158f 	bfi	r5, r3, #6, #10
   259aa:	f7ff fb65 	bl	25078 <nfsm_get_current_state>
   259ae:	4632      	mov	r2, r6
   259b0:	4603      	mov	r3, r0
   259b2:	4908      	ldr	r1, [pc, #32]	; (259d4 <nfsm_handle_incoming_event+0xa4>)
   259b4:	4628      	mov	r0, r5
   259b6:	e7ea      	b.n	2598e <nfsm_handle_incoming_event+0x5e>
   259b8:	00047c90 	.word	0x00047c90
   259bc:	0004a2c3 	.word	0x0004a2c3
   259c0:	00045316 	.word	0x00045316
   259c4:	00043864 	.word	0x00043864
   259c8:	00042fb4 	.word	0x00042fb4
   259cc:	00043084 	.word	0x00043084
   259d0:	00047cee 	.word	0x00047cee
   259d4:	00047d12 	.word	0x00047d12

000259d8 <dc_endpoint_reset>:
};

/* Internal routine to reset data endpoint information. */
static void dc_endpoint_reset(void)
{
	nct.dc_rx_endp.utf8 = NULL;
   259d8:	2200      	movs	r2, #0
   259da:	4b04      	ldr	r3, [pc, #16]	; (259ec <dc_endpoint_reset+0x14>)
	nct.dc_rx_endp.size = 0;
   259dc:	e9c3 222c 	strd	r2, r2, [r3, #176]	; 0xb0

	nct.dc_tx_endp.utf8 = NULL;
	nct.dc_tx_endp.size = 0;
   259e0:	e9c3 222a 	strd	r2, r2, [r3, #168]	; 0xa8

	nct.dc_m_endp.utf8 = NULL;
	nct.dc_m_endp.size = 0;
   259e4:	e9c3 222e 	strd	r2, r2, [r3, #184]	; 0xb8
}
   259e8:	4770      	bx	lr
   259ea:	bf00      	nop
   259ec:	20023ba0 	.word	0x20023ba0

000259f0 <dc_send>:
	}
	dc_endpoint_reset();
}

static u32_t dc_send(const struct nct_dc_data *dc_data, u8_t qos)
{
   259f0:	b530      	push	{r4, r5, lr}
   259f2:	460d      	mov	r5, r1
   259f4:	b087      	sub	sp, #28
	if (dc_data == NULL) {
   259f6:	4604      	mov	r4, r0
   259f8:	b368      	cbz	r0, 25a56 <dc_send+0x66>
		return -EINVAL;
	}

	struct mqtt_publish_param publish = {
   259fa:	2210      	movs	r2, #16
   259fc:	2100      	movs	r1, #0
   259fe:	a802      	add	r0, sp, #8
   25a00:	f01b fff7 	bl	419f2 <memset>
		.message.topic.qos = qos,
		.message.topic.topic.size = nct.dc_tx_endp.size,
		.message.topic.topic.utf8 = nct.dc_tx_endp.utf8,
   25a04:	4b15      	ldr	r3, [pc, #84]	; (25a5c <dc_send+0x6c>)
	struct mqtt_publish_param publish = {
   25a06:	f88d 5008 	strb.w	r5, [sp, #8]
   25a0a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
   25a0e:	9200      	str	r2, [sp, #0]
   25a10:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
   25a14:	9201      	str	r2, [sp, #4]
	};

	/* Populate payload. */
	if ((dc_data->data.len != 0) && (dc_data->data.ptr != NULL)) {
   25a16:	6822      	ldr	r2, [r4, #0]
   25a18:	b11a      	cbz	r2, 25a22 <dc_send+0x32>
   25a1a:	6861      	ldr	r1, [r4, #4]
   25a1c:	b109      	cbz	r1, 25a22 <dc_send+0x32>
		publish.message.payload.data = (u8_t *)dc_data->data.ptr;
		publish.message.payload.len = dc_data->data.len;
   25a1e:	e9cd 1203 	strd	r1, r2, [sp, #12]
	}

	if (dc_data->id != 0) {
   25a22:	68a2      	ldr	r2, [r4, #8]
   25a24:	b13a      	cbz	r2, 25a36 <dc_send+0x46>
		publish.message_id = dc_data->id;
   25a26:	f8ad 2014 	strh.w	r2, [sp, #20]
	} else {
		publish.message_id = dc_get_next_message_id();
	}

	return mqtt_publish(&nct.client, &publish);
   25a2a:	4669      	mov	r1, sp
   25a2c:	480c      	ldr	r0, [pc, #48]	; (25a60 <dc_send+0x70>)
   25a2e:	f01a fadc 	bl	3ffea <mqtt_publish>
}
   25a32:	b007      	add	sp, #28
   25a34:	bd30      	pop	{r4, r5, pc}
	nct.message_id++;
   25a36:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   25a3a:	1c51      	adds	r1, r2, #1
	if ((u16_t)nct.message_id == 0) {
   25a3c:	b288      	uxth	r0, r1
   25a3e:	b130      	cbz	r0, 25a4e <dc_send+0x5e>
	nct.message_id++;
   25a40:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		publish.message_id = dc_get_next_message_id();
   25a44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   25a48:	f8ad 3014 	strh.w	r3, [sp, #20]
   25a4c:	e7ed      	b.n	25a2a <dc_send+0x3a>
		nct.message_id++;
   25a4e:	3202      	adds	r2, #2
   25a50:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
   25a54:	e7f6      	b.n	25a44 <dc_send+0x54>
		return -EINVAL;
   25a56:	f06f 0015 	mvn.w	r0, #21
   25a5a:	e7ea      	b.n	25a32 <dc_send+0x42>
   25a5c:	20023ba0 	.word	0x20023ba0
   25a60:	20023bb8 	.word	0x20023bb8

00025a64 <dc_endpoint_free>:
{
   25a64:	b510      	push	{r4, lr}
	if (nct.dc_rx_endp.utf8 != NULL) {
   25a66:	4c0a      	ldr	r4, [pc, #40]	; (25a90 <dc_endpoint_free+0x2c>)
   25a68:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   25a6c:	b108      	cbz	r0, 25a72 <dc_endpoint_free+0xe>
		nrf_cloud_free(nct.dc_rx_endp.utf8);
   25a6e:	f01b fe1f 	bl	416b0 <k_free>
	if (nct.dc_tx_endp.utf8 != NULL) {
   25a72:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   25a76:	b108      	cbz	r0, 25a7c <dc_endpoint_free+0x18>
		nrf_cloud_free(nct.dc_tx_endp.utf8);
   25a78:	f01b fe1a 	bl	416b0 <k_free>
	if (nct.dc_m_endp.utf8 != NULL) {
   25a7c:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   25a80:	b108      	cbz	r0, 25a86 <dc_endpoint_free+0x22>
		nrf_cloud_free(nct.dc_m_endp.utf8);
   25a82:	f01b fe15 	bl	416b0 <k_free>
}
   25a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dc_endpoint_reset();
   25a8a:	f7ff bfa5 	b.w	259d8 <dc_endpoint_reset>
   25a8e:	bf00      	nop
   25a90:	20023ba0 	.word	0x20023ba0

00025a94 <aws_fota_cb_handler>:
}

#if defined(CONFIG_AWS_FOTA)
/* Handle AWS FOTA events */
static void aws_fota_cb_handler(enum aws_fota_evt_id evt)
{
   25a94:	b508      	push	{r3, lr}
	switch (evt) {
   25a96:	b110      	cbz	r0, 25a9e <aws_fota_cb_handler+0xa>
   25a98:	2801      	cmp	r0, #1
   25a9a:	d013      	beq.n	25ac4 <aws_fota_cb_handler+0x30>

	case AWS_FOTA_EVT_ERROR:
		LOG_ERR("AWS_FOTA_EVT_ERROR");
		break;
	}
}
   25a9c:	bd08      	pop	{r3, pc}
		LOG_DBG("AWS_FOTA_EVT_DONE, rebooting to apply update.");
   25a9e:	2304      	movs	r3, #4
   25aa0:	f04f 0000 	mov.w	r0, #0
   25aa4:	4a0f      	ldr	r2, [pc, #60]	; (25ae4 <aws_fota_cb_handler+0x50>)
   25aa6:	f363 0007 	bfi	r0, r3, #0, #8
   25aaa:	4b0f      	ldr	r3, [pc, #60]	; (25ae8 <aws_fota_cb_handler+0x54>)
   25aac:	490f      	ldr	r1, [pc, #60]	; (25aec <aws_fota_cb_handler+0x58>)
   25aae:	1a9b      	subs	r3, r3, r2
   25ab0:	08db      	lsrs	r3, r3, #3
   25ab2:	f363 108f 	bfi	r0, r3, #6, #10
   25ab6:	4a0e      	ldr	r2, [pc, #56]	; (25af0 <aws_fota_cb_handler+0x5c>)
   25ab8:	f019 fce3 	bl	3f482 <log_string_sync>
}
   25abc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		nct_apply_update();
   25ac0:	f7ff bb5c 	b.w	2517c <nct_apply_update>
		LOG_ERR("AWS_FOTA_EVT_ERROR");
   25ac4:	2301      	movs	r3, #1
   25ac6:	f04f 0000 	mov.w	r0, #0
   25aca:	4a06      	ldr	r2, [pc, #24]	; (25ae4 <aws_fota_cb_handler+0x50>)
   25acc:	f363 0007 	bfi	r0, r3, #0, #8
   25ad0:	4b05      	ldr	r3, [pc, #20]	; (25ae8 <aws_fota_cb_handler+0x54>)
   25ad2:	4908      	ldr	r1, [pc, #32]	; (25af4 <aws_fota_cb_handler+0x60>)
   25ad4:	1a9b      	subs	r3, r3, r2
   25ad6:	08db      	lsrs	r3, r3, #3
   25ad8:	f363 108f 	bfi	r0, r3, #6, #10
}
   25adc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("AWS_FOTA_EVT_ERROR");
   25ae0:	f019 bccf 	b.w	3f482 <log_string_sync>
   25ae4:	00042fb4 	.word	0x00042fb4
   25ae8:	0004308c 	.word	0x0004308c
   25aec:	00047e52 	.word	0x00047e52
   25af0:	00047daa 	.word	0x00047daa
   25af4:	00047e84 	.word	0x00047e84

00025af8 <nct_mqtt_evt_handler>:
/* Handle MQTT events. */
static void nct_mqtt_evt_handler(struct mqtt_client *const mqtt_client,
				 const struct mqtt_evt *_mqtt_evt)
{
	int err;
	struct nct_evt evt = { .status = _mqtt_evt->result };
   25af8:	2300      	movs	r3, #0
{
   25afa:	b5f0      	push	{r4, r5, r6, r7, lr}
   25afc:	b08f      	sub	sp, #60	; 0x3c
	struct nct_evt evt = { .status = _mqtt_evt->result };
   25afe:	e9cd 3305 	strd	r3, r3, [sp, #20]
   25b02:	69cb      	ldr	r3, [r1, #28]
{
   25b04:	4607      	mov	r7, r0
   25b06:	460c      	mov	r4, r1
	struct nct_evt evt = { .status = _mqtt_evt->result };
   25b08:	9304      	str	r3, [sp, #16]
	struct nct_cc_data cc;
	struct nct_dc_data dc;
	bool event_notify = false;

#if defined(CONFIG_AWS_FOTA)
	err = aws_fota_mqtt_evt_handler(mqtt_client, _mqtt_evt);
   25b0a:	f001 ff75 	bl	279f8 <aws_fota_mqtt_evt_handler>
	if (err > 0) {
   25b0e:	1e02      	subs	r2, r0, #0
   25b10:	dc74      	bgt.n	25bfc <nct_mqtt_evt_handler+0x104>
		/* Event handled by FOTA library so we can skip it */
		return;
	} else if (err < 0) {
   25b12:	d028      	beq.n	25b66 <nct_mqtt_evt_handler+0x6e>
		LOG_ERR("aws_fota_mqtt_evt_handler: Failed! %d", err);
   25b14:	2301      	movs	r3, #1
   25b16:	f04f 0000 	mov.w	r0, #0
   25b1a:	4d91      	ldr	r5, [pc, #580]	; (25d60 <nct_mqtt_evt_handler+0x268>)
   25b1c:	f363 0007 	bfi	r0, r3, #0, #8
   25b20:	4b90      	ldr	r3, [pc, #576]	; (25d64 <nct_mqtt_evt_handler+0x26c>)
   25b22:	4991      	ldr	r1, [pc, #580]	; (25d68 <nct_mqtt_evt_handler+0x270>)
   25b24:	1aed      	subs	r5, r5, r3
   25b26:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   25b2a:	f365 108f 	bfi	r0, r5, #6, #10
   25b2e:	f019 fca8 	bl	3f482 <log_string_sync>
		LOG_DBG("Disconnecting MQTT client...");
   25b32:	2304      	movs	r3, #4
   25b34:	f04f 0000 	mov.w	r0, #0
   25b38:	f363 0007 	bfi	r0, r3, #0, #8
   25b3c:	4a8b      	ldr	r2, [pc, #556]	; (25d6c <nct_mqtt_evt_handler+0x274>)
   25b3e:	f365 108f 	bfi	r0, r5, #6, #10
   25b42:	498b      	ldr	r1, [pc, #556]	; (25d70 <nct_mqtt_evt_handler+0x278>)
   25b44:	f019 fc9d 	bl	3f482 <log_string_sync>

		err = mqtt_disconnect(mqtt_client);
   25b48:	4638      	mov	r0, r7
   25b4a:	f01a faa3 	bl	40094 <mqtt_disconnect>
		if (err) {
   25b4e:	4602      	mov	r2, r0
   25b50:	b148      	cbz	r0, 25b66 <nct_mqtt_evt_handler+0x6e>
			LOG_ERR("Could not disconnect: %d", err);
   25b52:	2101      	movs	r1, #1
   25b54:	f04f 0000 	mov.w	r0, #0
   25b58:	f361 0007 	bfi	r0, r1, #0, #8
   25b5c:	f365 108f 	bfi	r0, r5, #6, #10
   25b60:	4984      	ldr	r1, [pc, #528]	; (25d74 <nct_mqtt_evt_handler+0x27c>)
   25b62:	f019 fc8e 	bl	3f482 <log_string_sync>
		}
	}
#endif /* defined(CONFIG_AWS_FOTA) */

	switch (_mqtt_evt->type) {
   25b66:	7823      	ldrb	r3, [r4, #0]
   25b68:	2b08      	cmp	r3, #8
   25b6a:	d847      	bhi.n	25bfc <nct_mqtt_evt_handler+0x104>
   25b6c:	e8df f013 	tbh	[pc, r3, lsl #1]
   25b70:	00de0009 	.word	0x00de0009
   25b74:	00c6001c 	.word	0x00c6001c
   25b78:	00460046 	.word	0x00460046
   25b7c:	00970046 	.word	0x00970046
   25b80:	00b0      	.short	0x00b0
	case MQTT_EVT_CONNACK: {
		LOG_DBG("MQTT_EVT_CONNACK");
   25b82:	2304      	movs	r3, #4
   25b84:	f04f 0000 	mov.w	r0, #0
   25b88:	4a76      	ldr	r2, [pc, #472]	; (25d64 <nct_mqtt_evt_handler+0x26c>)
   25b8a:	f363 0007 	bfi	r0, r3, #0, #8
   25b8e:	4b74      	ldr	r3, [pc, #464]	; (25d60 <nct_mqtt_evt_handler+0x268>)
   25b90:	4979      	ldr	r1, [pc, #484]	; (25d78 <nct_mqtt_evt_handler+0x280>)
   25b92:	1a9b      	subs	r3, r3, r2
   25b94:	08db      	lsrs	r3, r3, #3
   25b96:	f363 108f 	bfi	r0, r3, #6, #10
   25b9a:	4a74      	ldr	r2, [pc, #464]	; (25d6c <nct_mqtt_evt_handler+0x274>)
   25b9c:	f019 fc71 	bl	3f482 <log_string_sync>

		evt.type = NCT_EVT_CONNECTED;
   25ba0:	2300      	movs	r3, #0
		break;
	}
	case MQTT_EVT_DISCONNECT: {
		LOG_DBG("MQTT_EVT_DISCONNECT: result = %d", _mqtt_evt->result);

		evt.type = NCT_EVT_DISCONNECTED;
   25ba2:	f88d 3018 	strb.w	r3, [sp, #24]
	}
	default:
		break;
	}

	if (event_notify) {
   25ba6:	e055      	b.n	25c54 <nct_mqtt_evt_handler+0x15c>
		LOG_DBG("MQTT_EVT_PUBLISH: id = %d len = %d",
   25ba8:	2304      	movs	r3, #4
   25baa:	f04f 0000 	mov.w	r0, #0
   25bae:	4a6d      	ldr	r2, [pc, #436]	; (25d64 <nct_mqtt_evt_handler+0x26c>)
   25bb0:	f363 0007 	bfi	r0, r3, #0, #8
   25bb4:	4b6a      	ldr	r3, [pc, #424]	; (25d60 <nct_mqtt_evt_handler+0x268>)
   25bb6:	4971      	ldr	r1, [pc, #452]	; (25d7c <nct_mqtt_evt_handler+0x284>)
   25bb8:	1a9b      	subs	r3, r3, r2
   25bba:	f3c3 05c9 	ubfx	r5, r3, #3, #10
   25bbe:	6963      	ldr	r3, [r4, #20]
   25bc0:	4a6a      	ldr	r2, [pc, #424]	; (25d6c <nct_mqtt_evt_handler+0x274>)
   25bc2:	9300      	str	r3, [sp, #0]
   25bc4:	f365 108f 	bfi	r0, r5, #6, #10
   25bc8:	8b23      	ldrh	r3, [r4, #24]
   25bca:	f019 fc5a 	bl	3f482 <log_string_sync>
		int err = publish_get_payload(mqtt_client,
   25bce:	6962      	ldr	r2, [r4, #20]
	if (length > sizeof(nct.payload_buf)) {
   25bd0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   25bd4:	d814      	bhi.n	25c00 <nct_mqtt_evt_handler+0x108>
	return mqtt_readall_publish_payload(client, nct.payload_buf, length);
   25bd6:	496a      	ldr	r1, [pc, #424]	; (25d80 <nct_mqtt_evt_handler+0x288>)
   25bd8:	4638      	mov	r0, r7
   25bda:	f01a fb47 	bl	4026c <mqtt_readall_publish_payload>
		if (err < 0) {
   25bde:	1e02      	subs	r2, r0, #0
   25be0:	da11      	bge.n	25c06 <nct_mqtt_evt_handler+0x10e>
			LOG_ERR("publish_get_payload: failed %d", err);
   25be2:	2301      	movs	r3, #1
   25be4:	f04f 0000 	mov.w	r0, #0
   25be8:	f363 0007 	bfi	r0, r3, #0, #8
   25bec:	f365 108f 	bfi	r0, r5, #6, #10
   25bf0:	4964      	ldr	r1, [pc, #400]	; (25d84 <nct_mqtt_evt_handler+0x28c>)
   25bf2:	f019 fc46 	bl	3f482 <log_string_sync>
			mqtt_disconnect(mqtt_client);
   25bf6:	4638      	mov	r0, r7
   25bf8:	f01a fa4c 	bl	40094 <mqtt_disconnect>

		if (err != 0) {
			LOG_ERR("nct_input: failed %d", err);
		}
	}
}
   25bfc:	b00f      	add	sp, #60	; 0x3c
   25bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   25c00:	f06f 0279 	mvn.w	r2, #121	; 0x79
   25c04:	e7ed      	b.n	25be2 <nct_mqtt_evt_handler+0xea>
	for (u32_t index = 0; index < list_size; index++) {
   25c06:	2500      	movs	r5, #0
   25c08:	4e5f      	ldr	r6, [pc, #380]	; (25d88 <nct_mqtt_evt_handler+0x290>)
	return (strncmp(s1, s2, MIN(s1_len, s2_len))) ? false : true;
   25c0a:	68a2      	ldr	r2, [r4, #8]
   25c0c:	6873      	ldr	r3, [r6, #4]
   25c0e:	6831      	ldr	r1, [r6, #0]
   25c10:	429a      	cmp	r2, r3
   25c12:	bf28      	it	cs
   25c14:	461a      	movcs	r2, r3
   25c16:	6860      	ldr	r0, [r4, #4]
   25c18:	f01c f8c4 	bl	41da4 <strncmp>
		if (strings_compare(
   25c1c:	2800      	cmp	r0, #0
   25c1e:	d12e      	bne.n	25c7e <nct_mqtt_evt_handler+0x186>
			*opcode = nct_cc_rx_opcode_map[index];
   25c20:	4b5a      	ldr	r3, [pc, #360]	; (25d8c <nct_mqtt_evt_handler+0x294>)
   25c22:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   25c26:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
			cc.id = p->message_id;
   25c2a:	8b23      	ldrh	r3, [r4, #24]
   25c2c:	930c      	str	r3, [sp, #48]	; 0x30
			cc.data.ptr = nct.payload_buf;
   25c2e:	4b54      	ldr	r3, [pc, #336]	; (25d80 <nct_mqtt_evt_handler+0x288>)
   25c30:	930b      	str	r3, [sp, #44]	; 0x2c
			cc.data.len = p->message.payload.len;
   25c32:	6963      	ldr	r3, [r4, #20]
   25c34:	930a      	str	r3, [sp, #40]	; 0x28
			evt.type = NCT_EVT_CC_RX_DATA;
   25c36:	2303      	movs	r3, #3
   25c38:	f88d 3018 	strb.w	r3, [sp, #24]
			evt.param.cc = &cc;
   25c3c:	ab0a      	add	r3, sp, #40	; 0x28
			evt.param.dc = &dc;
   25c3e:	9305      	str	r3, [sp, #20]
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   25c40:	7b23      	ldrb	r3, [r4, #12]
   25c42:	2b01      	cmp	r3, #1
   25c44:	d106      	bne.n	25c54 <nct_mqtt_evt_handler+0x15c>
			const struct mqtt_puback_param ack = {
   25c46:	8b23      	ldrh	r3, [r4, #24]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   25c48:	a903      	add	r1, sp, #12
   25c4a:	4638      	mov	r0, r7
			const struct mqtt_puback_param ack = {
   25c4c:	f8ad 300c 	strh.w	r3, [sp, #12]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   25c50:	f01a f9f9 	bl	40046 <mqtt_publish_qos1_ack>
		err = nct_input(&evt);
   25c54:	a804      	add	r0, sp, #16
   25c56:	f7ff fa8b 	bl	25170 <nct_input>
		if (err != 0) {
   25c5a:	4602      	mov	r2, r0
   25c5c:	2800      	cmp	r0, #0
   25c5e:	d0cd      	beq.n	25bfc <nct_mqtt_evt_handler+0x104>
			LOG_ERR("nct_input: failed %d", err);
   25c60:	2301      	movs	r3, #1
   25c62:	f04f 0000 	mov.w	r0, #0
   25c66:	493f      	ldr	r1, [pc, #252]	; (25d64 <nct_mqtt_evt_handler+0x26c>)
   25c68:	f363 0007 	bfi	r0, r3, #0, #8
   25c6c:	4b3c      	ldr	r3, [pc, #240]	; (25d60 <nct_mqtt_evt_handler+0x268>)
   25c6e:	1a5b      	subs	r3, r3, r1
   25c70:	08db      	lsrs	r3, r3, #3
   25c72:	f363 108f 	bfi	r0, r3, #6, #10
   25c76:	4946      	ldr	r1, [pc, #280]	; (25d90 <nct_mqtt_evt_handler+0x298>)
   25c78:	f019 fc03 	bl	3f482 <log_string_sync>
   25c7c:	e7be      	b.n	25bfc <nct_mqtt_evt_handler+0x104>
	for (u32_t index = 0; index < list_size; index++) {
   25c7e:	3501      	adds	r5, #1
   25c80:	2d03      	cmp	r5, #3
   25c82:	f106 060c 	add.w	r6, r6, #12
   25c86:	d1c0      	bne.n	25c0a <nct_mqtt_evt_handler+0x112>
			dc.id = p->message_id;
   25c88:	8b23      	ldrh	r3, [r4, #24]
   25c8a:	9309      	str	r3, [sp, #36]	; 0x24
			dc.data.ptr = nct.payload_buf;
   25c8c:	4b3c      	ldr	r3, [pc, #240]	; (25d80 <nct_mqtt_evt_handler+0x288>)
   25c8e:	9308      	str	r3, [sp, #32]
			dc.data.len = p->message.payload.len;
   25c90:	6963      	ldr	r3, [r4, #20]
   25c92:	9307      	str	r3, [sp, #28]
			evt.type = NCT_EVT_DC_RX_DATA;
   25c94:	2305      	movs	r3, #5
   25c96:	f88d 3018 	strb.w	r3, [sp, #24]
			evt.param.dc = &dc;
   25c9a:	ab07      	add	r3, sp, #28
   25c9c:	e7cf      	b.n	25c3e <nct_mqtt_evt_handler+0x146>
		LOG_DBG("MQTT_EVT_SUBACK: id = %d result = %d",
   25c9e:	2304      	movs	r3, #4
   25ca0:	f04f 0000 	mov.w	r0, #0
   25ca4:	4a2f      	ldr	r2, [pc, #188]	; (25d64 <nct_mqtt_evt_handler+0x26c>)
   25ca6:	f363 0007 	bfi	r0, r3, #0, #8
   25caa:	4b2d      	ldr	r3, [pc, #180]	; (25d60 <nct_mqtt_evt_handler+0x268>)
   25cac:	4939      	ldr	r1, [pc, #228]	; (25d94 <nct_mqtt_evt_handler+0x29c>)
   25cae:	1a9b      	subs	r3, r3, r2
   25cb0:	08db      	lsrs	r3, r3, #3
   25cb2:	f363 108f 	bfi	r0, r3, #6, #10
   25cb6:	69e3      	ldr	r3, [r4, #28]
   25cb8:	4a2c      	ldr	r2, [pc, #176]	; (25d6c <nct_mqtt_evt_handler+0x274>)
   25cba:	9300      	str	r3, [sp, #0]
   25cbc:	88a3      	ldrh	r3, [r4, #4]
   25cbe:	f019 fbe0 	bl	3f482 <log_string_sync>
		if (_mqtt_evt->param.suback.message_id == NCT_CC_SUBSCRIBE_ID) {
   25cc2:	f240 42d2 	movw	r2, #1234	; 0x4d2
   25cc6:	88a3      	ldrh	r3, [r4, #4]
   25cc8:	4293      	cmp	r3, r2
   25cca:	d141      	bne.n	25d50 <nct_mqtt_evt_handler+0x258>
			evt.type = NCT_EVT_CC_CONNECTED;
   25ccc:	2301      	movs	r3, #1
   25cce:	e768      	b.n	25ba2 <nct_mqtt_evt_handler+0xaa>
		LOG_DBG("MQTT_EVT_UNSUBACK");
   25cd0:	2304      	movs	r3, #4
   25cd2:	f04f 0000 	mov.w	r0, #0
   25cd6:	4a23      	ldr	r2, [pc, #140]	; (25d64 <nct_mqtt_evt_handler+0x26c>)
   25cd8:	f363 0007 	bfi	r0, r3, #0, #8
   25cdc:	4b20      	ldr	r3, [pc, #128]	; (25d60 <nct_mqtt_evt_handler+0x268>)
   25cde:	492e      	ldr	r1, [pc, #184]	; (25d98 <nct_mqtt_evt_handler+0x2a0>)
   25ce0:	1a9b      	subs	r3, r3, r2
   25ce2:	08db      	lsrs	r3, r3, #3
   25ce4:	f363 108f 	bfi	r0, r3, #6, #10
   25ce8:	4a20      	ldr	r2, [pc, #128]	; (25d6c <nct_mqtt_evt_handler+0x274>)
   25cea:	f019 fbca 	bl	3f482 <log_string_sync>
		if (_mqtt_evt->param.suback.message_id == NCT_CC_SUBSCRIBE_ID) {
   25cee:	f240 43d2 	movw	r3, #1234	; 0x4d2
   25cf2:	88a2      	ldrh	r2, [r4, #4]
   25cf4:	429a      	cmp	r2, r3
   25cf6:	d181      	bne.n	25bfc <nct_mqtt_evt_handler+0x104>
			evt.type = NCT_EVT_CC_DISCONNECTED;
   25cf8:	2307      	movs	r3, #7
   25cfa:	e752      	b.n	25ba2 <nct_mqtt_evt_handler+0xaa>
		LOG_DBG("MQTT_EVT_PUBACK: id = %d result = %d",
   25cfc:	2304      	movs	r3, #4
   25cfe:	f04f 0000 	mov.w	r0, #0
   25d02:	4a18      	ldr	r2, [pc, #96]	; (25d64 <nct_mqtt_evt_handler+0x26c>)
   25d04:	f363 0007 	bfi	r0, r3, #0, #8
   25d08:	4b15      	ldr	r3, [pc, #84]	; (25d60 <nct_mqtt_evt_handler+0x268>)
   25d0a:	4924      	ldr	r1, [pc, #144]	; (25d9c <nct_mqtt_evt_handler+0x2a4>)
   25d0c:	1a9b      	subs	r3, r3, r2
   25d0e:	08db      	lsrs	r3, r3, #3
   25d10:	f363 108f 	bfi	r0, r3, #6, #10
   25d14:	69e3      	ldr	r3, [r4, #28]
   25d16:	4a15      	ldr	r2, [pc, #84]	; (25d6c <nct_mqtt_evt_handler+0x274>)
   25d18:	9300      	str	r3, [sp, #0]
   25d1a:	88a3      	ldrh	r3, [r4, #4]
   25d1c:	f019 fbb1 	bl	3f482 <log_string_sync>
		evt.type = NCT_EVT_CC_TX_DATA_ACK;
   25d20:	2304      	movs	r3, #4
   25d22:	f88d 3018 	strb.w	r3, [sp, #24]
		evt.param.data_id = _mqtt_evt->param.puback.message_id;
   25d26:	88a3      	ldrh	r3, [r4, #4]
   25d28:	9305      	str	r3, [sp, #20]
	if (event_notify) {
   25d2a:	e793      	b.n	25c54 <nct_mqtt_evt_handler+0x15c>
		LOG_DBG("MQTT_EVT_DISCONNECT: result = %d", _mqtt_evt->result);
   25d2c:	2304      	movs	r3, #4
   25d2e:	f04f 0000 	mov.w	r0, #0
   25d32:	4a0c      	ldr	r2, [pc, #48]	; (25d64 <nct_mqtt_evt_handler+0x26c>)
   25d34:	f363 0007 	bfi	r0, r3, #0, #8
   25d38:	4b09      	ldr	r3, [pc, #36]	; (25d60 <nct_mqtt_evt_handler+0x268>)
   25d3a:	4919      	ldr	r1, [pc, #100]	; (25da0 <nct_mqtt_evt_handler+0x2a8>)
   25d3c:	1a9b      	subs	r3, r3, r2
   25d3e:	08db      	lsrs	r3, r3, #3
   25d40:	f363 108f 	bfi	r0, r3, #6, #10
   25d44:	4a09      	ldr	r2, [pc, #36]	; (25d6c <nct_mqtt_evt_handler+0x274>)
   25d46:	69e3      	ldr	r3, [r4, #28]
   25d48:	f019 fb9b 	bl	3f482 <log_string_sync>
		evt.type = NCT_EVT_DISCONNECTED;
   25d4c:	2309      	movs	r3, #9
   25d4e:	e728      	b.n	25ba2 <nct_mqtt_evt_handler+0xaa>
		if (_mqtt_evt->param.suback.message_id == NCT_DC_SUBSCRIBE_ID) {
   25d50:	f242 223d 	movw	r2, #8765	; 0x223d
   25d54:	4293      	cmp	r3, r2
   25d56:	f47f af51 	bne.w	25bfc <nct_mqtt_evt_handler+0x104>
			evt.type = NCT_EVT_DC_CONNECTED;
   25d5a:	2302      	movs	r3, #2
   25d5c:	e721      	b.n	25ba2 <nct_mqtt_evt_handler+0xaa>
   25d5e:	bf00      	nop
   25d60:	0004308c 	.word	0x0004308c
   25d64:	00042fb4 	.word	0x00042fb4
   25d68:	00048238 	.word	0x00048238
   25d6c:	00047dbe 	.word	0x00047dbe
   25d70:	0004825e 	.word	0x0004825e
   25d74:	0004827f 	.word	0x0004827f
   25d78:	00048298 	.word	0x00048298
   25d7c:	000482ad 	.word	0x000482ad
   25d80:	20023e64 	.word	0x20023e64
   25d84:	000482d4 	.word	0x000482d4
   25d88:	000438c0 	.word	0x000438c0
   25d8c:	000438e4 	.word	0x000438e4
   25d90:	00048380 	.word	0x00048380
   25d94:	000482f3 	.word	0x000482f3
   25d98:	0004831c 	.word	0x0004831c
   25d9c:	00048332 	.word	0x00048332
   25da0:	0004835b 	.word	0x0004835b

00025da4 <nct_mqtt_connect>:
{
   25da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	mqtt_client_init(&nct.client);
   25da6:	4c25      	ldr	r4, [pc, #148]	; (25e3c <nct_mqtt_connect+0x98>)
   25da8:	f104 0018 	add.w	r0, r4, #24
   25dac:	f01a f8c6 	bl	3ff3c <mqtt_client_init>
	nct.client.evt_cb = nct_mqtt_evt_handler;
   25db0:	4b23      	ldr	r3, [pc, #140]	; (25e40 <nct_mqtt_connect+0x9c>)
	nct.client.client_id.utf8 = (u8_t *)client_id_buf;
   25db2:	4824      	ldr	r0, [pc, #144]	; (25e44 <nct_mqtt_connect+0xa0>)
	nct.client.broker = (struct sockaddr *)&nct.broker;
   25db4:	f104 0790 	add.w	r7, r4, #144	; 0x90
	nct.client.evt_cb = nct_mqtt_evt_handler;
   25db8:	67a3      	str	r3, [r4, #120]	; 0x78
	nct.client.broker = (struct sockaddr *)&nct.broker;
   25dba:	6667      	str	r7, [r4, #100]	; 0x64
	nct.client.client_id.utf8 = (u8_t *)client_id_buf;
   25dbc:	65e0      	str	r0, [r4, #92]	; 0x5c
	nct.client.client_id.size = strlen(client_id_buf);
   25dbe:	f7f4 f891 	bl	19ee4 <strlen>
	nct.client.protocol_version = MQTT_VERSION_3_1_1;
   25dc2:	2304      	movs	r3, #4
   25dc4:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	nct.client.password = NULL;
   25dc8:	2300      	movs	r3, #0
	nct.client.user_name = NULL;
   25dca:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
	nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   25dce:	2301      	movs	r3, #1
   25dd0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	nct.client.rx_buf = nct.rx_buf;
   25dd4:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
   25dd8:	67e3      	str	r3, [r4, #124]	; 0x7c
   25dda:	4626      	mov	r6, r4
	nct.client.rx_buf_size = sizeof(nct.rx_buf);
   25ddc:	f44f 7380 	mov.w	r3, #256	; 0x100
	nct.client.tx_buf = nct.tx_buf;
   25de0:	f504 72e2 	add.w	r2, r4, #452	; 0x1c4
   25de4:	f104 0544 	add.w	r5, r4, #68	; 0x44
	nct.client.client_id.size = strlen(client_id_buf);
   25de8:	6620      	str	r0, [r4, #96]	; 0x60
	nct.client.rx_buf_size = sizeof(nct.rx_buf);
   25dea:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	nct.client.tx_buf_size = sizeof(nct.tx_buf);
   25dee:	e9c4 2321 	strd	r2, r3, [r4, #132]	; 0x84
	memcpy(tls_config, &nct.tls_config, sizeof(struct mqtt_sec_config));
   25df2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   25df4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   25df6:	e896 0003 	ldmia.w	r6, {r0, r1}
	int err = aws_fota_init(&nct.client, STRINGIFY(APP_VERSION),
   25dfa:	4a13      	ldr	r2, [pc, #76]	; (25e48 <nct_mqtt_connect+0xa4>)
   25dfc:	e885 0003 	stmia.w	r5, {r0, r1}
   25e00:	4912      	ldr	r1, [pc, #72]	; (25e4c <nct_mqtt_connect+0xa8>)
   25e02:	f104 0018 	add.w	r0, r4, #24
   25e06:	f002 f843 	bl	27e90 <aws_fota_init>
	if (err != 0) {
   25e0a:	4605      	mov	r5, r0
   25e0c:	b928      	cbnz	r0, 25e1a <nct_mqtt_connect+0x76>
	return mqtt_connect(&nct.client);
   25e0e:	f104 0018 	add.w	r0, r4, #24
}
   25e12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return mqtt_connect(&nct.client);
   25e16:	f01a b8a6 	b.w	3ff66 <mqtt_connect>
		LOG_ERR("ERROR: aws_fota_init %d", err);
   25e1a:	2301      	movs	r3, #1
   25e1c:	f04f 0000 	mov.w	r0, #0
   25e20:	4a0b      	ldr	r2, [pc, #44]	; (25e50 <nct_mqtt_connect+0xac>)
   25e22:	f363 0007 	bfi	r0, r3, #0, #8
   25e26:	4b0b      	ldr	r3, [pc, #44]	; (25e54 <nct_mqtt_connect+0xb0>)
   25e28:	490b      	ldr	r1, [pc, #44]	; (25e58 <nct_mqtt_connect+0xb4>)
   25e2a:	1a9b      	subs	r3, r3, r2
   25e2c:	08db      	lsrs	r3, r3, #3
   25e2e:	f363 108f 	bfi	r0, r3, #6, #10
   25e32:	462a      	mov	r2, r5
   25e34:	f019 fb25 	bl	3f482 <log_string_sync>
}
   25e38:	4628      	mov	r0, r5
   25e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25e3c:	20023ba0 	.word	0x20023ba0
   25e40:	00025af9 	.word	0x00025af9
   25e44:	2002bdf2 	.word	0x2002bdf2
   25e48:	00025a95 	.word	0x00025a95
   25e4c:	000476c0 	.word	0x000476c0
   25e50:	00042fb4 	.word	0x00042fb4
   25e54:	0004308c 	.word	0x0004308c
   25e58:	00048220 	.word	0x00048220

00025e5c <nct_init>:

int nct_init(void)
{
   25e5c:	b530      	push	{r4, r5, lr}
   25e5e:	b085      	sub	sp, #20
	int err;

	dc_endpoint_reset();
   25e60:	f7ff fdba 	bl	259d8 <dc_endpoint_reset>
	at_socket_fd = nrf_socket(NRF_AF_LTE, 0, NRF_PROTO_AT);
   25e64:	f240 2201 	movw	r2, #513	; 0x201
   25e68:	2100      	movs	r1, #0
   25e6a:	2066      	movs	r0, #102	; 0x66
   25e6c:	f005 f9cc 	bl	2b208 <nrf_socket>
	__ASSERT_NO_MSG(at_socket_fd >= 0);
   25e70:	1e04      	subs	r4, r0, #0
   25e72:	da0b      	bge.n	25e8c <nct_init+0x30>
   25e74:	4980      	ldr	r1, [pc, #512]	; (26078 <nct_init+0x21c>)
   25e76:	4881      	ldr	r0, [pc, #516]	; (2607c <nct_init+0x220>)
   25e78:	f240 1307 	movw	r3, #263	; 0x107
   25e7c:	4a80      	ldr	r2, [pc, #512]	; (26080 <nct_init+0x224>)
   25e7e:	f019 fae2 	bl	3f446 <printk>
   25e82:	f240 1107 	movw	r1, #263	; 0x107
   25e86:	487e      	ldr	r0, [pc, #504]	; (26080 <nct_init+0x224>)
   25e88:	f019 faea 	bl	3f460 <assert_post_action>
	bytes_written = nrf_write(at_socket_fd, "AT+CGSN", 7);
   25e8c:	2207      	movs	r2, #7
   25e8e:	497d      	ldr	r1, [pc, #500]	; (26084 <nct_init+0x228>)
   25e90:	4620      	mov	r0, r4
   25e92:	f005 fa0f 	bl	2b2b4 <nrf_write>
	__ASSERT_NO_MSG(bytes_written == 7);
   25e96:	2807      	cmp	r0, #7
   25e98:	d00b      	beq.n	25eb2 <nct_init+0x56>
   25e9a:	497b      	ldr	r1, [pc, #492]	; (26088 <nct_init+0x22c>)
   25e9c:	4877      	ldr	r0, [pc, #476]	; (2607c <nct_init+0x220>)
   25e9e:	f44f 7385 	mov.w	r3, #266	; 0x10a
   25ea2:	4a77      	ldr	r2, [pc, #476]	; (26080 <nct_init+0x224>)
   25ea4:	f019 facf 	bl	3f446 <printk>
   25ea8:	f44f 7185 	mov.w	r1, #266	; 0x10a
   25eac:	4874      	ldr	r0, [pc, #464]	; (26080 <nct_init+0x224>)
   25eae:	f019 fad7 	bl	3f460 <assert_post_action>
	bytes_read = nrf_read(at_socket_fd, imei_buf, NRF_IMEI_LEN);
   25eb2:	220f      	movs	r2, #15
   25eb4:	4669      	mov	r1, sp
   25eb6:	4620      	mov	r0, r4
   25eb8:	f005 fa48 	bl	2b34c <nrf_read>
	__ASSERT_NO_MSG(bytes_read == NRF_IMEI_LEN);
   25ebc:	280f      	cmp	r0, #15
   25ebe:	d00b      	beq.n	25ed8 <nct_init+0x7c>
   25ec0:	4972      	ldr	r1, [pc, #456]	; (2608c <nct_init+0x230>)
   25ec2:	486e      	ldr	r0, [pc, #440]	; (2607c <nct_init+0x220>)
   25ec4:	f240 130d 	movw	r3, #269	; 0x10d
   25ec8:	4a6d      	ldr	r2, [pc, #436]	; (26080 <nct_init+0x224>)
   25eca:	f019 fabc 	bl	3f446 <printk>
   25ece:	f240 110d 	movw	r1, #269	; 0x10d
   25ed2:	486b      	ldr	r0, [pc, #428]	; (26080 <nct_init+0x224>)
   25ed4:	f019 fac4 	bl	3f460 <assert_post_action>
	imei_buf[NRF_IMEI_LEN] = 0;
   25ed8:	2300      	movs	r3, #0
	snprintf(id, NRF_CLOUD_CLIENT_ID_LEN + 1, "nrf-%s", imei_buf);
   25eda:	4a6d      	ldr	r2, [pc, #436]	; (26090 <nct_init+0x234>)
	imei_buf[NRF_IMEI_LEN] = 0;
   25edc:	f88d 300f 	strb.w	r3, [sp, #15]
	snprintf(id, NRF_CLOUD_CLIENT_ID_LEN + 1, "nrf-%s", imei_buf);
   25ee0:	2114      	movs	r1, #20
   25ee2:	466b      	mov	r3, sp
   25ee4:	486b      	ldr	r0, [pc, #428]	; (26094 <nct_init+0x238>)
   25ee6:	f017 fb03 	bl	3d4f0 <sniprintf>
	ret = nrf_close(at_socket_fd);
   25eea:	4620      	mov	r0, r4
   25eec:	f005 f99e 	bl	2b22c <nrf_close>
	__ASSERT_NO_MSG(ret == 0);
   25ef0:	b158      	cbz	r0, 25f0a <nct_init+0xae>
   25ef2:	4969      	ldr	r1, [pc, #420]	; (26098 <nct_init+0x23c>)
   25ef4:	4861      	ldr	r0, [pc, #388]	; (2607c <nct_init+0x220>)
   25ef6:	f240 1313 	movw	r3, #275	; 0x113
   25efa:	4a61      	ldr	r2, [pc, #388]	; (26080 <nct_init+0x224>)
   25efc:	f019 faa3 	bl	3f446 <printk>
   25f00:	f240 1113 	movw	r1, #275	; 0x113
   25f04:	485e      	ldr	r0, [pc, #376]	; (26080 <nct_init+0x224>)
   25f06:	f019 faab 	bl	3f460 <assert_post_action>
	LOG_DBG("client_id = %s", log_strdup(id));
   25f0a:	2304      	movs	r3, #4
   25f0c:	f04f 0500 	mov.w	r5, #0
   25f10:	4c62      	ldr	r4, [pc, #392]	; (2609c <nct_init+0x240>)
   25f12:	f363 0507 	bfi	r5, r3, #0, #8
   25f16:	4b62      	ldr	r3, [pc, #392]	; (260a0 <nct_init+0x244>)
   25f18:	485e      	ldr	r0, [pc, #376]	; (26094 <nct_init+0x238>)
   25f1a:	1ae4      	subs	r4, r4, r3
   25f1c:	f019 fac3 	bl	3f4a6 <log_strdup>
   25f20:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   25f24:	f364 158f 	bfi	r5, r4, #6, #10
   25f28:	4603      	mov	r3, r0
   25f2a:	4a5e      	ldr	r2, [pc, #376]	; (260a4 <nct_init+0x248>)
   25f2c:	495e      	ldr	r1, [pc, #376]	; (260a8 <nct_init+0x24c>)
   25f2e:	4628      	mov	r0, r5
   25f30:	f019 faa7 	bl	3f482 <log_string_sync>
	ret = snprintf(shadow_base_topic, sizeof(shadow_base_topic),
   25f34:	4b57      	ldr	r3, [pc, #348]	; (26094 <nct_init+0x238>)
   25f36:	4a5d      	ldr	r2, [pc, #372]	; (260ac <nct_init+0x250>)
   25f38:	2127      	movs	r1, #39	; 0x27
   25f3a:	485d      	ldr	r0, [pc, #372]	; (260b0 <nct_init+0x254>)
   25f3c:	f017 fad8 	bl	3d4f0 <sniprintf>
	if (ret != NCT_SHADOW_BASE_TOPIC_LEN) {
   25f40:	2826      	cmp	r0, #38	; 0x26
   25f42:	d003      	beq.n	25f4c <nct_init+0xf0>
		return -ENOMEM;
   25f44:	f06f 000b 	mvn.w	r0, #11
	if (err) {
		return err;
	}

	return nct_provision();
}
   25f48:	b005      	add	sp, #20
   25f4a:	bd30      	pop	{r4, r5, pc}
	LOG_DBG("shadow_base_topic: %s", log_strdup(shadow_base_topic));
   25f4c:	2304      	movs	r3, #4
   25f4e:	f04f 0500 	mov.w	r5, #0
   25f52:	4857      	ldr	r0, [pc, #348]	; (260b0 <nct_init+0x254>)
   25f54:	f363 0507 	bfi	r5, r3, #0, #8
   25f58:	f019 faa5 	bl	3f4a6 <log_strdup>
   25f5c:	f364 158f 	bfi	r5, r4, #6, #10
   25f60:	4603      	mov	r3, r0
   25f62:	4a54      	ldr	r2, [pc, #336]	; (260b4 <nct_init+0x258>)
   25f64:	4954      	ldr	r1, [pc, #336]	; (260b8 <nct_init+0x25c>)
   25f66:	4628      	mov	r0, r5
   25f68:	f019 fa8b 	bl	3f482 <log_string_sync>
	ret = snprintf(accepted_topic, sizeof(accepted_topic),
   25f6c:	4b49      	ldr	r3, [pc, #292]	; (26094 <nct_init+0x238>)
   25f6e:	4a53      	ldr	r2, [pc, #332]	; (260bc <nct_init+0x260>)
   25f70:	2128      	movs	r1, #40	; 0x28
   25f72:	4853      	ldr	r0, [pc, #332]	; (260c0 <nct_init+0x264>)
   25f74:	f017 fabc 	bl	3d4f0 <sniprintf>
	if (ret != NCT_ACCEPTED_TOPIC_LEN) {
   25f78:	2827      	cmp	r0, #39	; 0x27
   25f7a:	d1e3      	bne.n	25f44 <nct_init+0xe8>
	LOG_DBG("accepted_topic: %s", log_strdup(accepted_topic));
   25f7c:	2304      	movs	r3, #4
   25f7e:	f04f 0500 	mov.w	r5, #0
   25f82:	484f      	ldr	r0, [pc, #316]	; (260c0 <nct_init+0x264>)
   25f84:	f363 0507 	bfi	r5, r3, #0, #8
   25f88:	f019 fa8d 	bl	3f4a6 <log_strdup>
   25f8c:	f364 158f 	bfi	r5, r4, #6, #10
   25f90:	4603      	mov	r3, r0
   25f92:	4a48      	ldr	r2, [pc, #288]	; (260b4 <nct_init+0x258>)
   25f94:	494b      	ldr	r1, [pc, #300]	; (260c4 <nct_init+0x268>)
   25f96:	4628      	mov	r0, r5
   25f98:	f019 fa73 	bl	3f482 <log_string_sync>
	ret = snprintf(rejected_topic, sizeof(rejected_topic),
   25f9c:	4b3d      	ldr	r3, [pc, #244]	; (26094 <nct_init+0x238>)
   25f9e:	4a4a      	ldr	r2, [pc, #296]	; (260c8 <nct_init+0x26c>)
   25fa0:	2134      	movs	r1, #52	; 0x34
   25fa2:	484a      	ldr	r0, [pc, #296]	; (260cc <nct_init+0x270>)
   25fa4:	f017 faa4 	bl	3d4f0 <sniprintf>
	if (ret != NCT_REJECTED_TOPIC_LEN) {
   25fa8:	2833      	cmp	r0, #51	; 0x33
   25faa:	d1cb      	bne.n	25f44 <nct_init+0xe8>
	LOG_DBG("rejected_topic: %s", log_strdup(rejected_topic));
   25fac:	2304      	movs	r3, #4
   25fae:	f04f 0500 	mov.w	r5, #0
   25fb2:	4846      	ldr	r0, [pc, #280]	; (260cc <nct_init+0x270>)
   25fb4:	f363 0507 	bfi	r5, r3, #0, #8
   25fb8:	f019 fa75 	bl	3f4a6 <log_strdup>
   25fbc:	f364 158f 	bfi	r5, r4, #6, #10
   25fc0:	4603      	mov	r3, r0
   25fc2:	4a3c      	ldr	r2, [pc, #240]	; (260b4 <nct_init+0x258>)
   25fc4:	4942      	ldr	r1, [pc, #264]	; (260d0 <nct_init+0x274>)
   25fc6:	4628      	mov	r0, r5
   25fc8:	f019 fa5b 	bl	3f482 <log_string_sync>
	ret = snprintf(update_delta_topic, sizeof(update_delta_topic),
   25fcc:	4b31      	ldr	r3, [pc, #196]	; (26094 <nct_init+0x238>)
   25fce:	4a41      	ldr	r2, [pc, #260]	; (260d4 <nct_init+0x278>)
   25fd0:	2134      	movs	r1, #52	; 0x34
   25fd2:	4841      	ldr	r0, [pc, #260]	; (260d8 <nct_init+0x27c>)
   25fd4:	f017 fa8c 	bl	3d4f0 <sniprintf>
	if (ret != NCT_UPDATE_DELTA_TOPIC_LEN) {
   25fd8:	2833      	cmp	r0, #51	; 0x33
   25fda:	d1b3      	bne.n	25f44 <nct_init+0xe8>
	LOG_DBG("update_delta_topic: %s", log_strdup(update_delta_topic));
   25fdc:	2304      	movs	r3, #4
   25fde:	f04f 0500 	mov.w	r5, #0
   25fe2:	483d      	ldr	r0, [pc, #244]	; (260d8 <nct_init+0x27c>)
   25fe4:	f363 0507 	bfi	r5, r3, #0, #8
   25fe8:	f019 fa5d 	bl	3f4a6 <log_strdup>
   25fec:	f364 158f 	bfi	r5, r4, #6, #10
   25ff0:	4603      	mov	r3, r0
   25ff2:	4a30      	ldr	r2, [pc, #192]	; (260b4 <nct_init+0x258>)
   25ff4:	4939      	ldr	r1, [pc, #228]	; (260dc <nct_init+0x280>)
   25ff6:	4628      	mov	r0, r5
   25ff8:	f019 fa43 	bl	3f482 <log_string_sync>
	ret = snprintf(update_topic, sizeof(update_topic), NCT_UPDATE_TOPIC,
   25ffc:	4b25      	ldr	r3, [pc, #148]	; (26094 <nct_init+0x238>)
   25ffe:	4a38      	ldr	r2, [pc, #224]	; (260e0 <nct_init+0x284>)
   26000:	212e      	movs	r1, #46	; 0x2e
   26002:	4838      	ldr	r0, [pc, #224]	; (260e4 <nct_init+0x288>)
   26004:	f017 fa74 	bl	3d4f0 <sniprintf>
	if (ret != NCT_UPDATE_TOPIC_LEN) {
   26008:	282d      	cmp	r0, #45	; 0x2d
   2600a:	d19b      	bne.n	25f44 <nct_init+0xe8>
	LOG_DBG("update_topic: %s", log_strdup(update_topic));
   2600c:	2304      	movs	r3, #4
   2600e:	f04f 0500 	mov.w	r5, #0
   26012:	4834      	ldr	r0, [pc, #208]	; (260e4 <nct_init+0x288>)
   26014:	f363 0507 	bfi	r5, r3, #0, #8
   26018:	f019 fa45 	bl	3f4a6 <log_strdup>
   2601c:	f364 158f 	bfi	r5, r4, #6, #10
   26020:	4603      	mov	r3, r0
   26022:	4a24      	ldr	r2, [pc, #144]	; (260b4 <nct_init+0x258>)
   26024:	4930      	ldr	r1, [pc, #192]	; (260e8 <nct_init+0x28c>)
   26026:	4628      	mov	r0, r5
   26028:	f019 fa2b 	bl	3f482 <log_string_sync>
	ret = snprintf(shadow_get_topic, sizeof(shadow_get_topic),
   2602c:	4b19      	ldr	r3, [pc, #100]	; (26094 <nct_init+0x238>)
   2602e:	4a2f      	ldr	r2, [pc, #188]	; (260ec <nct_init+0x290>)
   26030:	212b      	movs	r1, #43	; 0x2b
   26032:	482f      	ldr	r0, [pc, #188]	; (260f0 <nct_init+0x294>)
   26034:	f017 fa5c 	bl	3d4f0 <sniprintf>
	if (ret != NCT_SHADOW_GET_LEN) {
   26038:	282a      	cmp	r0, #42	; 0x2a
   2603a:	d183      	bne.n	25f44 <nct_init+0xe8>
	LOG_DBG("shadow_get_topic: %s", log_strdup(shadow_get_topic));
   2603c:	2304      	movs	r3, #4
   2603e:	f04f 0500 	mov.w	r5, #0
   26042:	482b      	ldr	r0, [pc, #172]	; (260f0 <nct_init+0x294>)
   26044:	f363 0507 	bfi	r5, r3, #0, #8
   26048:	f019 fa2d 	bl	3f4a6 <log_strdup>
   2604c:	f364 158f 	bfi	r5, r4, #6, #10
   26050:	4603      	mov	r3, r0
   26052:	4a18      	ldr	r2, [pc, #96]	; (260b4 <nct_init+0x258>)
   26054:	4628      	mov	r0, r5
   26056:	4927      	ldr	r1, [pc, #156]	; (260f4 <nct_init+0x298>)
   26058:	f019 fa13 	bl	3f482 <log_string_sync>
	nct.tls_config.cipher_count = 0;
   2605c:	2202      	movs	r2, #2
   2605e:	2000      	movs	r0, #0
	nct.tls_config.peer_verify = 2;
   26060:	4b25      	ldr	r3, [pc, #148]	; (260f8 <nct_init+0x29c>)
	nct.tls_config.cipher_count = 0;
   26062:	e9c3 2000 	strd	r2, r0, [r3]
	nct.tls_config.sec_tag_count = ARRAY_SIZE(sec_tag_list);
   26066:	2201      	movs	r2, #1
   26068:	60da      	str	r2, [r3, #12]
	nct.tls_config.sec_tag_list = sec_tag_list;
   2606a:	4a24      	ldr	r2, [pc, #144]	; (260fc <nct_init+0x2a0>)
	nct.tls_config.cipher_list = NULL;
   2606c:	6098      	str	r0, [r3, #8]
	nct.tls_config.sec_tag_list = sec_tag_list;
   2606e:	611a      	str	r2, [r3, #16]
	nct.tls_config.hostname = NRF_CLOUD_HOSTNAME;
   26070:	4a23      	ldr	r2, [pc, #140]	; (26100 <nct_init+0x2a4>)
   26072:	615a      	str	r2, [r3, #20]
	return nct_provision();
   26074:	e768      	b.n	25f48 <nct_init+0xec>
   26076:	bf00      	nop
   26078:	00048066 	.word	0x00048066
   2607c:	00045316 	.word	0x00045316
   26080:	00048002 	.word	0x00048002
   26084:	000474ca 	.word	0x000474ca
   26088:	00048078 	.word	0x00048078
   2608c:	0004808b 	.word	0x0004808b
   26090:	0004809c 	.word	0x0004809c
   26094:	2002bdf2 	.word	0x2002bdf2
   26098:	00046cfb 	.word	0x00046cfb
   2609c:	0004308c 	.word	0x0004308c
   260a0:	00042fb4 	.word	0x00042fb4
   260a4:	00047d84 	.word	0x00047d84
   260a8:	000480a3 	.word	0x000480a3
   260ac:	000480b6 	.word	0x000480b6
   260b0:	2002be3a 	.word	0x2002be3a
   260b4:	00047d96 	.word	0x00047d96
   260b8:	000480cc 	.word	0x000480cc
   260bc:	000480e6 	.word	0x000480e6
   260c0:	2002bdca 	.word	0x2002bdca
   260c4:	000480fd 	.word	0x000480fd
   260c8:	00048114 	.word	0x00048114
   260cc:	2002be06 	.word	0x2002be06
   260d0:	00048137 	.word	0x00048137
   260d4:	0004814e 	.word	0x0004814e
   260d8:	2002be8c 	.word	0x2002be8c
   260dc:	00048171 	.word	0x00048171
   260e0:	0004818c 	.word	0x0004818c
   260e4:	2002bec0 	.word	0x2002bec0
   260e8:	000481a9 	.word	0x000481a9
   260ec:	000481be 	.word	0x000481be
   260f0:	2002be61 	.word	0x2002be61
   260f4:	000481d8 	.word	0x000481d8
   260f8:	20023ba0 	.word	0x20023ba0
   260fc:	20031c54 	.word	0x20031c54
   26100:	000481f1 	.word	0x000481f1

00026104 <nct_connect>:

	return err;
}
#else
int nct_connect(void)
{
   26104:	b570      	push	{r4, r5, r6, lr}
   26106:	b08c      	sub	sp, #48	; 0x30
	int err;
	struct addrinfo *result;
	struct addrinfo *addr;
	struct addrinfo hints = {
   26108:	2220      	movs	r2, #32
   2610a:	2100      	movs	r1, #0
   2610c:	a804      	add	r0, sp, #16
   2610e:	f01b fc70 	bl	419f2 <memset>
   26112:	2301      	movs	r3, #1

static inline int getaddrinfo(const char *node, const char *service,
			      const struct addrinfo *hints,
			      struct addrinfo **res)
{
	__ASSERT_NO_MSG(socket_ops);
   26114:	4c45      	ldr	r4, [pc, #276]	; (2622c <nct_connect+0x128>)
   26116:	e9cd 3305 	strd	r3, r3, [sp, #20]
   2611a:	6823      	ldr	r3, [r4, #0]
   2611c:	b94b      	cbnz	r3, 26132 <nct_connect+0x2e>
   2611e:	4944      	ldr	r1, [pc, #272]	; (26230 <nct_connect+0x12c>)
   26120:	4844      	ldr	r0, [pc, #272]	; (26234 <nct_connect+0x130>)
   26122:	2393      	movs	r3, #147	; 0x93
   26124:	4a44      	ldr	r2, [pc, #272]	; (26238 <nct_connect+0x134>)
   26126:	f019 f98e 	bl	3f446 <printk>
   2612a:	2193      	movs	r1, #147	; 0x93
   2612c:	4842      	ldr	r0, [pc, #264]	; (26238 <nct_connect+0x134>)
   2612e:	f019 f997 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);
   26132:	6823      	ldr	r3, [r4, #0]
   26134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   26136:	b94b      	cbnz	r3, 2614c <nct_connect+0x48>
   26138:	4940      	ldr	r1, [pc, #256]	; (2623c <nct_connect+0x138>)
   2613a:	483e      	ldr	r0, [pc, #248]	; (26234 <nct_connect+0x130>)
   2613c:	2394      	movs	r3, #148	; 0x94
   2613e:	4a3e      	ldr	r2, [pc, #248]	; (26238 <nct_connect+0x134>)
   26140:	f019 f981 	bl	3f446 <printk>
   26144:	2194      	movs	r1, #148	; 0x94
   26146:	483c      	ldr	r0, [pc, #240]	; (26238 <nct_connect+0x134>)
   26148:	f019 f98a 	bl	3f460 <assert_post_action>

	return socket_ops->getaddrinfo(node, service, hints, res);
   2614c:	6823      	ldr	r3, [r4, #0]
   2614e:	aa04      	add	r2, sp, #16
   26150:	6b5d      	ldr	r5, [r3, #52]	; 0x34
   26152:	2100      	movs	r1, #0
   26154:	ab03      	add	r3, sp, #12
   26156:	483a      	ldr	r0, [pc, #232]	; (26240 <nct_connect+0x13c>)
   26158:	47a8      	blx	r5
		.ai_family = NRF_CLOUD_AF_FAMILY,
		.ai_socktype = SOCK_STREAM
	};

	err = getaddrinfo(NRF_CLOUD_HOSTNAME, NULL, &hints, &result);
	if (err) {
   2615a:	4605      	mov	r5, r0
   2615c:	b190      	cbz	r0, 26184 <nct_connect+0x80>
		LOG_DBG("getaddrinfo failed %d", err);
   2615e:	2304      	movs	r3, #4
   26160:	f04f 0000 	mov.w	r0, #0
   26164:	4a37      	ldr	r2, [pc, #220]	; (26244 <nct_connect+0x140>)
   26166:	f363 0007 	bfi	r0, r3, #0, #8
   2616a:	4b37      	ldr	r3, [pc, #220]	; (26248 <nct_connect+0x144>)
   2616c:	4937      	ldr	r1, [pc, #220]	; (2624c <nct_connect+0x148>)
   2616e:	1a9b      	subs	r3, r3, r2
   26170:	08db      	lsrs	r3, r3, #3
   26172:	f363 108f 	bfi	r0, r3, #6, #10
   26176:	4a36      	ldr	r2, [pc, #216]	; (26250 <nct_connect+0x14c>)
   26178:	462b      	mov	r3, r5
   2617a:	f019 f982 	bl	3f482 <log_string_sync>

	/* Free the address. */
	freeaddrinfo(result);

	return err;
}
   2617e:	4628      	mov	r0, r5
   26180:	b00c      	add	sp, #48	; 0x30
   26182:	bd70      	pop	{r4, r5, r6, pc}
	addr = result;
   26184:	9903      	ldr	r1, [sp, #12]
	while (addr != NULL) {
   26186:	2900      	cmp	r1, #0
   26188:	d04c      	beq.n	26224 <nct_connect+0x120>
		if ((addr->ai_addrlen == sizeof(struct sockaddr_in)) &&
   2618a:	690b      	ldr	r3, [r1, #16]
   2618c:	4a2e      	ldr	r2, [pc, #184]	; (26248 <nct_connect+0x144>)
   2618e:	482d      	ldr	r0, [pc, #180]	; (26244 <nct_connect+0x140>)
   26190:	2b08      	cmp	r3, #8
   26192:	eba2 0200 	sub.w	r2, r2, r0
   26196:	f3c2 02c9 	ubfx	r2, r2, #3, #10
   2619a:	d134      	bne.n	26206 <nct_connect+0x102>
					->sin_addr.s_addr;
   2619c:	694b      	ldr	r3, [r1, #20]
			broker->sin_family = AF_INET;
   2619e:	482d      	ldr	r0, [pc, #180]	; (26254 <nct_connect+0x150>)
					->sin_addr.s_addr;
   261a0:	685b      	ldr	r3, [r3, #4]
			broker->sin_addr.s_addr =
   261a2:	492d      	ldr	r1, [pc, #180]	; (26258 <nct_connect+0x154>)
   261a4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
			broker->sin_family = AF_INET;
   261a8:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
			LOG_DBG("IPv4 Address 0x%08x", broker->sin_addr.s_addr);
   261ac:	2104      	movs	r1, #4
   261ae:	f04f 0000 	mov.w	r0, #0
   261b2:	f361 0007 	bfi	r0, r1, #0, #8
   261b6:	f362 108f 	bfi	r0, r2, #6, #10
   261ba:	4928      	ldr	r1, [pc, #160]	; (2625c <nct_connect+0x158>)
   261bc:	4a24      	ldr	r2, [pc, #144]	; (26250 <nct_connect+0x14c>)
   261be:	f019 f960 	bl	3f482 <log_string_sync>
			err = nct_mqtt_connect();
   261c2:	f7ff fdef 	bl	25da4 <nct_mqtt_connect>
   261c6:	4605      	mov	r5, r0
}

static inline void freeaddrinfo(struct addrinfo *res)
{
	__ASSERT_NO_MSG(socket_ops);
   261c8:	6823      	ldr	r3, [r4, #0]
	freeaddrinfo(result);
   261ca:	9e03      	ldr	r6, [sp, #12]
   261cc:	b94b      	cbnz	r3, 261e2 <nct_connect+0xde>
   261ce:	4918      	ldr	r1, [pc, #96]	; (26230 <nct_connect+0x12c>)
   261d0:	4818      	ldr	r0, [pc, #96]	; (26234 <nct_connect+0x130>)
   261d2:	239b      	movs	r3, #155	; 0x9b
   261d4:	4a18      	ldr	r2, [pc, #96]	; (26238 <nct_connect+0x134>)
   261d6:	f019 f936 	bl	3f446 <printk>
   261da:	219b      	movs	r1, #155	; 0x9b
   261dc:	4816      	ldr	r0, [pc, #88]	; (26238 <nct_connect+0x134>)
   261de:	f019 f93f 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);
   261e2:	6823      	ldr	r3, [r4, #0]
   261e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   261e6:	b94b      	cbnz	r3, 261fc <nct_connect+0xf8>
   261e8:	491d      	ldr	r1, [pc, #116]	; (26260 <nct_connect+0x15c>)
   261ea:	4812      	ldr	r0, [pc, #72]	; (26234 <nct_connect+0x130>)
   261ec:	239c      	movs	r3, #156	; 0x9c
   261ee:	4a12      	ldr	r2, [pc, #72]	; (26238 <nct_connect+0x134>)
   261f0:	f019 f929 	bl	3f446 <printk>
   261f4:	219c      	movs	r1, #156	; 0x9c
   261f6:	4810      	ldr	r0, [pc, #64]	; (26238 <nct_connect+0x134>)
   261f8:	f019 f932 	bl	3f460 <assert_post_action>

	return socket_ops->freeaddrinfo(res);
   261fc:	6823      	ldr	r3, [r4, #0]
   261fe:	4630      	mov	r0, r6
   26200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   26202:	4798      	blx	r3
   26204:	e7bb      	b.n	2617e <nct_connect+0x7a>
			LOG_DBG("ai_addrlen = %u should be %u or %u",
   26206:	2104      	movs	r1, #4
   26208:	f04f 0000 	mov.w	r0, #0
   2620c:	f361 0007 	bfi	r0, r1, #0, #8
   26210:	f362 108f 	bfi	r0, r2, #6, #10
   26214:	2118      	movs	r1, #24
   26216:	2208      	movs	r2, #8
   26218:	e9cd 2100 	strd	r2, r1, [sp]
   2621c:	4a0c      	ldr	r2, [pc, #48]	; (26250 <nct_connect+0x14c>)
   2621e:	4911      	ldr	r1, [pc, #68]	; (26264 <nct_connect+0x160>)
   26220:	f019 f92f 	bl	3f482 <log_string_sync>
	err = -ENOENT;
   26224:	f06f 0501 	mvn.w	r5, #1
   26228:	e7ce      	b.n	261c8 <nct_connect+0xc4>
   2622a:	bf00      	nop
   2622c:	20023934 	.word	0x20023934
   26230:	00045442 	.word	0x00045442
   26234:	00045316 	.word	0x00045316
   26238:	00045419 	.word	0x00045419
   2623c:	00047f0c 	.word	0x00047f0c
   26240:	000481f1 	.word	0x000481f1
   26244:	00042fb4 	.word	0x00042fb4
   26248:	0004308c 	.word	0x0004308c
   2624c:	00047f24 	.word	0x00047f24
   26250:	00047dd3 	.word	0x00047dd3
   26254:	b3220001 	.word	0xb3220001
   26258:	20023ba0 	.word	0x20023ba0
   2625c:	00047f3e 	.word	0x00047f3e
   26260:	00047f7d 	.word	0x00047f7d
   26264:	00047f56 	.word	0x00047f56

00026268 <nct_cc_connect>:
#endif /* defined(CONFIG_NRF_CLOUD_STATIC_IPV4) */

int nct_cc_connect(void)
{
   26268:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("nct_cc_connect");
   2626a:	2304      	movs	r3, #4
   2626c:	f04f 0000 	mov.w	r0, #0
   26270:	4a0b      	ldr	r2, [pc, #44]	; (262a0 <nct_cc_connect+0x38>)
   26272:	f363 0007 	bfi	r0, r3, #0, #8
   26276:	4b0b      	ldr	r3, [pc, #44]	; (262a4 <nct_cc_connect+0x3c>)
   26278:	490b      	ldr	r1, [pc, #44]	; (262a8 <nct_cc_connect+0x40>)
   2627a:	1a9b      	subs	r3, r3, r2
   2627c:	08db      	lsrs	r3, r3, #3
   2627e:	f363 108f 	bfi	r0, r3, #6, #10
   26282:	4a0a      	ldr	r2, [pc, #40]	; (262ac <nct_cc_connect+0x44>)
   26284:	f019 f8fd 	bl	3f482 <log_string_sync>

	const struct mqtt_subscription_list subscription_list = {
   26288:	4b09      	ldr	r3, [pc, #36]	; (262b0 <nct_cc_connect+0x48>)
		.list = (struct mqtt_topic *)&nct_cc_rx_list,
		.list_count = ARRAY_SIZE(nct_cc_rx_list),
		.message_id = NCT_CC_SUBSCRIBE_ID
	};

	return mqtt_subscribe(&nct.client, &subscription_list);
   2628a:	4669      	mov	r1, sp
	const struct mqtt_subscription_list subscription_list = {
   2628c:	9300      	str	r3, [sp, #0]
   2628e:	4b09      	ldr	r3, [pc, #36]	; (262b4 <nct_cc_connect+0x4c>)
	return mqtt_subscribe(&nct.client, &subscription_list);
   26290:	4809      	ldr	r0, [pc, #36]	; (262b8 <nct_cc_connect+0x50>)
	const struct mqtt_subscription_list subscription_list = {
   26292:	9301      	str	r3, [sp, #4]
	return mqtt_subscribe(&nct.client, &subscription_list);
   26294:	f019 ff25 	bl	400e2 <mqtt_subscribe>
}
   26298:	b003      	add	sp, #12
   2629a:	f85d fb04 	ldr.w	pc, [sp], #4
   2629e:	bf00      	nop
   262a0:	00042fb4 	.word	0x00042fb4
   262a4:	0004308c 	.word	0x0004308c
   262a8:	00047e97 	.word	0x00047e97
   262ac:	00047ddf 	.word	0x00047ddf
   262b0:	000438c0 	.word	0x000438c0
   262b4:	04d20003 	.word	0x04d20003
   262b8:	20023bb8 	.word	0x20023bb8

000262bc <nct_cc_send>:

int nct_cc_send(const struct nct_cc_data *cc_data)
{
   262bc:	b570      	push	{r4, r5, r6, lr}
   262be:	4b34      	ldr	r3, [pc, #208]	; (26390 <nct_cc_send+0xd4>)
   262c0:	4c34      	ldr	r4, [pc, #208]	; (26394 <nct_cc_send+0xd8>)
   262c2:	b088      	sub	sp, #32
   262c4:	1ae4      	subs	r4, r4, r3
   262c6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	static u32_t msg_id;

	if (cc_data == NULL) {
   262ca:	4605      	mov	r5, r0
   262cc:	b970      	cbnz	r0, 262ec <nct_cc_send+0x30>
		LOG_ERR("cc_data == NULL");
   262ce:	2301      	movs	r3, #1
   262d0:	f04f 0000 	mov.w	r0, #0
   262d4:	f363 0007 	bfi	r0, r3, #0, #8
   262d8:	f364 108f 	bfi	r0, r4, #6, #10
   262dc:	492e      	ldr	r1, [pc, #184]	; (26398 <nct_cc_send+0xdc>)
   262de:	f019 f8d0 	bl	3f482 <log_string_sync>
		return -EINVAL;
   262e2:	f06f 0515 	mvn.w	r5, #21
	if (err) {
		LOG_ERR("mqtt_publish failed %d", err);
	}

	return err;
}
   262e6:	4628      	mov	r0, r5
   262e8:	b008      	add	sp, #32
   262ea:	bd70      	pop	{r4, r5, r6, pc}
	if (cc_data->opcode >= ARRAY_SIZE(nct_cc_tx_list)) {
   262ec:	7b06      	ldrb	r6, [r0, #12]
   262ee:	2e01      	cmp	r6, #1
   262f0:	d90d      	bls.n	2630e <nct_cc_send+0x52>
		LOG_ERR("opcode = %d", cc_data->opcode);
   262f2:	2301      	movs	r3, #1
   262f4:	f04f 0000 	mov.w	r0, #0
   262f8:	f363 0007 	bfi	r0, r3, #0, #8
   262fc:	f364 108f 	bfi	r0, r4, #6, #10
   26300:	4632      	mov	r2, r6
   26302:	4926      	ldr	r1, [pc, #152]	; (2639c <nct_cc_send+0xe0>)
   26304:	f019 f8bd 	bl	3f482 <log_string_sync>
		return -ENOTSUP;
   26308:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2630c:	e7eb      	b.n	262e6 <nct_cc_send+0x2a>
	struct mqtt_publish_param publish = {
   2630e:	2210      	movs	r2, #16
   26310:	2100      	movs	r1, #0
   26312:	eb0d 0002 	add.w	r0, sp, r2
   26316:	f01b fb6c 	bl	419f2 <memset>
			nct_cc_tx_list[cc_data->opcode].topic.utf8,
   2631a:	230c      	movs	r3, #12
   2631c:	4373      	muls	r3, r6
   2631e:	4920      	ldr	r1, [pc, #128]	; (263a0 <nct_cc_send+0xe4>)
   26320:	18ca      	adds	r2, r1, r3
	struct mqtt_publish_param publish = {
   26322:	58cb      	ldr	r3, [r1, r3]
   26324:	9302      	str	r3, [sp, #8]
   26326:	6853      	ldr	r3, [r2, #4]
   26328:	9303      	str	r3, [sp, #12]
   2632a:	7a13      	ldrb	r3, [r2, #8]
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   2632c:	682a      	ldr	r2, [r5, #0]
	struct mqtt_publish_param publish = {
   2632e:	f88d 3010 	strb.w	r3, [sp, #16]
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   26332:	b11a      	cbz	r2, 2633c <nct_cc_send+0x80>
   26334:	686b      	ldr	r3, [r5, #4]
   26336:	b10b      	cbz	r3, 2633c <nct_cc_send+0x80>
		publish.message.payload.len = cc_data->data.len;
   26338:	e9cd 3205 	strd	r3, r2, [sp, #20]
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   2633c:	68ab      	ldr	r3, [r5, #8]
   2633e:	b313      	cbz	r3, 26386 <nct_cc_send+0xca>
	LOG_DBG("mqtt_publish: id = %d opcode = %d len = %d", publish.message_id,
   26340:	2104      	movs	r1, #4
   26342:	f04f 0000 	mov.w	r0, #0
   26346:	f361 0007 	bfi	r0, r1, #0, #8
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   2634a:	b29b      	uxth	r3, r3
	LOG_DBG("mqtt_publish: id = %d opcode = %d len = %d", publish.message_id,
   2634c:	f364 108f 	bfi	r0, r4, #6, #10
   26350:	e9cd 6200 	strd	r6, r2, [sp]
   26354:	4913      	ldr	r1, [pc, #76]	; (263a4 <nct_cc_send+0xe8>)
   26356:	4a14      	ldr	r2, [pc, #80]	; (263a8 <nct_cc_send+0xec>)
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   26358:	f8ad 301c 	strh.w	r3, [sp, #28]
	LOG_DBG("mqtt_publish: id = %d opcode = %d len = %d", publish.message_id,
   2635c:	f019 f891 	bl	3f482 <log_string_sync>
	int err = mqtt_publish(&nct.client, &publish);
   26360:	a902      	add	r1, sp, #8
   26362:	4812      	ldr	r0, [pc, #72]	; (263ac <nct_cc_send+0xf0>)
   26364:	f019 fe41 	bl	3ffea <mqtt_publish>
	if (err) {
   26368:	4605      	mov	r5, r0
   2636a:	2800      	cmp	r0, #0
   2636c:	d0bb      	beq.n	262e6 <nct_cc_send+0x2a>
		LOG_ERR("mqtt_publish failed %d", err);
   2636e:	2301      	movs	r3, #1
   26370:	f04f 0000 	mov.w	r0, #0
   26374:	f363 0007 	bfi	r0, r3, #0, #8
   26378:	f364 108f 	bfi	r0, r4, #6, #10
   2637c:	462a      	mov	r2, r5
   2637e:	490c      	ldr	r1, [pc, #48]	; (263b0 <nct_cc_send+0xf4>)
   26380:	f019 f87f 	bl	3f482 <log_string_sync>
   26384:	e7af      	b.n	262e6 <nct_cc_send+0x2a>
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   26386:	490b      	ldr	r1, [pc, #44]	; (263b4 <nct_cc_send+0xf8>)
   26388:	680b      	ldr	r3, [r1, #0]
   2638a:	3301      	adds	r3, #1
   2638c:	600b      	str	r3, [r1, #0]
   2638e:	e7d7      	b.n	26340 <nct_cc_send+0x84>
   26390:	00042fb4 	.word	0x00042fb4
   26394:	0004308c 	.word	0x0004308c
   26398:	00047eaa 	.word	0x00047eaa
   2639c:	00047eba 	.word	0x00047eba
   263a0:	000438f0 	.word	0x000438f0
   263a4:	00047ec6 	.word	0x00047ec6
   263a8:	00047dee 	.word	0x00047dee
   263ac:	20023bb8 	.word	0x20023bb8
   263b0:	00047ef5 	.word	0x00047ef5
   263b4:	20023b9c 	.word	0x20023b9c

000263b8 <nct_dc_endpoint_set>:
}

void nct_dc_endpoint_set(const struct nrf_cloud_data *tx_endp,
			 const struct nrf_cloud_data *rx_endp,
			 const struct nrf_cloud_data *m_endp)
{
   263b8:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("nct_dc_endpoint_set");
   263ba:	2304      	movs	r3, #4
{
   263bc:	4606      	mov	r6, r0
	LOG_DBG("nct_dc_endpoint_set");
   263be:	f04f 0000 	mov.w	r0, #0
{
   263c2:	460d      	mov	r5, r1
   263c4:	4614      	mov	r4, r2
	LOG_DBG("nct_dc_endpoint_set");
   263c6:	f363 0007 	bfi	r0, r3, #0, #8
   263ca:	4a10      	ldr	r2, [pc, #64]	; (2640c <nct_dc_endpoint_set+0x54>)
   263cc:	4b10      	ldr	r3, [pc, #64]	; (26410 <nct_dc_endpoint_set+0x58>)
   263ce:	4911      	ldr	r1, [pc, #68]	; (26414 <nct_dc_endpoint_set+0x5c>)
   263d0:	1a9b      	subs	r3, r3, r2
   263d2:	08db      	lsrs	r3, r3, #3
   263d4:	f363 108f 	bfi	r0, r3, #6, #10
   263d8:	4a0f      	ldr	r2, [pc, #60]	; (26418 <nct_dc_endpoint_set+0x60>)
   263da:	f019 f852 	bl	3f482 <log_string_sync>

	/* In case the endpoint was previous set, free and reset
	 * before copying new one.
	 */
	dc_endpoint_free();
   263de:	f7ff fb41 	bl	25a64 <dc_endpoint_free>

	nct.dc_tx_endp.utf8 = (u8_t *)tx_endp->ptr;
   263e2:	6872      	ldr	r2, [r6, #4]
   263e4:	4b0d      	ldr	r3, [pc, #52]	; (2641c <nct_dc_endpoint_set+0x64>)
   263e6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	nct.dc_tx_endp.size = tx_endp->len;
   263ea:	6832      	ldr	r2, [r6, #0]
   263ec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	nct.dc_rx_endp.utf8 = (u8_t *)rx_endp->ptr;
   263f0:	686a      	ldr	r2, [r5, #4]
   263f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	nct.dc_rx_endp.size = rx_endp->len;
   263f6:	682a      	ldr	r2, [r5, #0]
   263f8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	if (m_endp != NULL) {
   263fc:	b12c      	cbz	r4, 2640a <nct_dc_endpoint_set+0x52>
		nct.dc_m_endp.utf8 = (u8_t *)m_endp->ptr;
   263fe:	6862      	ldr	r2, [r4, #4]
   26400:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		nct.dc_m_endp.size = m_endp->len;
   26404:	6822      	ldr	r2, [r4, #0]
   26406:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	}
}
   2640a:	bd70      	pop	{r4, r5, r6, pc}
   2640c:	00042fb4 	.word	0x00042fb4
   26410:	0004308c 	.word	0x0004308c
   26414:	00047fd7 	.word	0x00047fd7
   26418:	00047dfa 	.word	0x00047dfa
   2641c:	20023ba0 	.word	0x20023ba0

00026420 <nct_dc_endpoint_get>:

void nct_dc_endpoint_get(struct nrf_cloud_data *const tx_endp,
			 struct nrf_cloud_data *const rx_endp,
			 struct nrf_cloud_data *const m_endp)
{
   26420:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("nct_dc_endpoint_get");
   26422:	2304      	movs	r3, #4
{
   26424:	4606      	mov	r6, r0
	LOG_DBG("nct_dc_endpoint_get");
   26426:	f04f 0000 	mov.w	r0, #0
{
   2642a:	460d      	mov	r5, r1
   2642c:	4614      	mov	r4, r2
	LOG_DBG("nct_dc_endpoint_get");
   2642e:	f363 0007 	bfi	r0, r3, #0, #8
   26432:	4a0f      	ldr	r2, [pc, #60]	; (26470 <nct_dc_endpoint_get+0x50>)
   26434:	4b0f      	ldr	r3, [pc, #60]	; (26474 <nct_dc_endpoint_get+0x54>)
   26436:	4910      	ldr	r1, [pc, #64]	; (26478 <nct_dc_endpoint_get+0x58>)
   26438:	1a9b      	subs	r3, r3, r2
   2643a:	08db      	lsrs	r3, r3, #3
   2643c:	f363 108f 	bfi	r0, r3, #6, #10
   26440:	4a0e      	ldr	r2, [pc, #56]	; (2647c <nct_dc_endpoint_get+0x5c>)
   26442:	f019 f81e 	bl	3f482 <log_string_sync>

	tx_endp->ptr = nct.dc_tx_endp.utf8;
   26446:	4b0e      	ldr	r3, [pc, #56]	; (26480 <nct_dc_endpoint_get+0x60>)
   26448:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
   2644c:	6072      	str	r2, [r6, #4]
	tx_endp->len = nct.dc_tx_endp.size;
   2644e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
   26452:	6032      	str	r2, [r6, #0]

	rx_endp->ptr = nct.dc_rx_endp.utf8;
   26454:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
   26458:	606a      	str	r2, [r5, #4]
	rx_endp->len = nct.dc_rx_endp.size;
   2645a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   2645e:	602a      	str	r2, [r5, #0]

	if (m_endp != NULL) {
   26460:	b12c      	cbz	r4, 2646e <nct_dc_endpoint_get+0x4e>
		m_endp->ptr = nct.dc_m_endp.utf8;
   26462:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
		m_endp->len = nct.dc_m_endp.size;
   26466:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
		m_endp->ptr = nct.dc_m_endp.utf8;
   2646a:	6062      	str	r2, [r4, #4]
		m_endp->len = nct.dc_m_endp.size;
   2646c:	6023      	str	r3, [r4, #0]
	}
}
   2646e:	bd70      	pop	{r4, r5, r6, pc}
   26470:	00042fb4 	.word	0x00042fb4
   26474:	0004308c 	.word	0x0004308c
   26478:	00047fbf 	.word	0x00047fbf
   2647c:	00047e0e 	.word	0x00047e0e
   26480:	20023ba0 	.word	0x20023ba0

00026484 <nct_dc_connect>:

int nct_dc_connect(void)
{
   26484:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("nct_dc_connect");
   26486:	2304      	movs	r3, #4
   26488:	f04f 0000 	mov.w	r0, #0
   2648c:	4a10      	ldr	r2, [pc, #64]	; (264d0 <nct_dc_connect+0x4c>)
   2648e:	f363 0007 	bfi	r0, r3, #0, #8
   26492:	4b10      	ldr	r3, [pc, #64]	; (264d4 <nct_dc_connect+0x50>)
   26494:	4910      	ldr	r1, [pc, #64]	; (264d8 <nct_dc_connect+0x54>)
   26496:	1a9b      	subs	r3, r3, r2
   26498:	08db      	lsrs	r3, r3, #3
   2649a:	f363 108f 	bfi	r0, r3, #6, #10
   2649e:	4a0f      	ldr	r2, [pc, #60]	; (264dc <nct_dc_connect+0x58>)
   264a0:	f018 ffef 	bl	3f482 <log_string_sync>

	struct mqtt_topic subscribe_topic = {
		.topic = {
			.utf8 = nct.dc_rx_endp.utf8,
   264a4:	480e      	ldr	r0, [pc, #56]	; (264e0 <nct_dc_connect+0x5c>)
		.list = &subscribe_topic,
		.list_count = 1,
		.message_id = NCT_DC_SUBSCRIBE_ID
	};

	return mqtt_subscribe(&nct.client, &subscription_list);
   264a6:	a901      	add	r1, sp, #4
	struct mqtt_topic subscribe_topic = {
   264a8:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
	return mqtt_subscribe(&nct.client, &subscription_list);
   264ac:	3018      	adds	r0, #24
	struct mqtt_topic subscribe_topic = {
   264ae:	9303      	str	r3, [sp, #12]
   264b0:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   264b4:	9304      	str	r3, [sp, #16]
   264b6:	2301      	movs	r3, #1
   264b8:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct mqtt_subscription_list subscription_list = {
   264bc:	ab03      	add	r3, sp, #12
   264be:	9301      	str	r3, [sp, #4]
   264c0:	4b08      	ldr	r3, [pc, #32]	; (264e4 <nct_dc_connect+0x60>)
   264c2:	9302      	str	r3, [sp, #8]
	return mqtt_subscribe(&nct.client, &subscription_list);
   264c4:	f019 fe0d 	bl	400e2 <mqtt_subscribe>
}
   264c8:	b007      	add	sp, #28
   264ca:	f85d fb04 	ldr.w	pc, [sp], #4
   264ce:	bf00      	nop
   264d0:	00042fb4 	.word	0x00042fb4
   264d4:	0004308c 	.word	0x0004308c
   264d8:	00047f96 	.word	0x00047f96
   264dc:	00047e22 	.word	0x00047e22
   264e0:	20023ba0 	.word	0x20023ba0
   264e4:	223d0001 	.word	0x223d0001

000264e8 <nct_dc_disconnect>:
{
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
}

int nct_dc_disconnect(void)
{
   264e8:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("nct_dc_disconnect");
   264ea:	2304      	movs	r3, #4
   264ec:	f04f 0000 	mov.w	r0, #0
   264f0:	4a0c      	ldr	r2, [pc, #48]	; (26524 <nct_dc_disconnect+0x3c>)
   264f2:	f363 0007 	bfi	r0, r3, #0, #8
   264f6:	4b0c      	ldr	r3, [pc, #48]	; (26528 <nct_dc_disconnect+0x40>)
   264f8:	490c      	ldr	r1, [pc, #48]	; (2652c <nct_dc_disconnect+0x44>)
   264fa:	1a9b      	subs	r3, r3, r2
   264fc:	08db      	lsrs	r3, r3, #3
   264fe:	f363 108f 	bfi	r0, r3, #6, #10
   26502:	4a0b      	ldr	r2, [pc, #44]	; (26530 <nct_dc_disconnect+0x48>)
   26504:	f018 ffbd 	bl	3f482 <log_string_sync>

	const struct mqtt_subscription_list subscription_list = {
   26508:	480a      	ldr	r0, [pc, #40]	; (26534 <nct_dc_disconnect+0x4c>)
		.list = (struct mqtt_topic *)&nct.dc_rx_endp,
		.list_count = 1,
		.message_id = NCT_DC_SUBSCRIBE_ID
	};

	return mqtt_unsubscribe(&nct.client, &subscription_list);
   2650a:	4669      	mov	r1, sp
	const struct mqtt_subscription_list subscription_list = {
   2650c:	f100 03b0 	add.w	r3, r0, #176	; 0xb0
   26510:	9300      	str	r3, [sp, #0]
   26512:	4b09      	ldr	r3, [pc, #36]	; (26538 <nct_dc_disconnect+0x50>)
	return mqtt_unsubscribe(&nct.client, &subscription_list);
   26514:	3018      	adds	r0, #24
	const struct mqtt_subscription_list subscription_list = {
   26516:	9301      	str	r3, [sp, #4]
	return mqtt_unsubscribe(&nct.client, &subscription_list);
   26518:	f019 fe0a 	bl	40130 <mqtt_unsubscribe>
}
   2651c:	b003      	add	sp, #12
   2651e:	f85d fb04 	ldr.w	pc, [sp], #4
   26522:	bf00      	nop
   26524:	00042fb4 	.word	0x00042fb4
   26528:	0004308c 	.word	0x0004308c
   2652c:	00047fa9 	.word	0x00047fa9
   26530:	00047e31 	.word	0x00047e31
   26534:	20023ba0 	.word	0x20023ba0
   26538:	223d0001 	.word	0x223d0001

0002653c <nct_disconnect>:

int nct_disconnect(void)
{
   2653c:	b508      	push	{r3, lr}
	LOG_DBG("nct_disconnect");
   2653e:	f04f 0000 	mov.w	r0, #0
   26542:	2304      	movs	r3, #4
   26544:	4a09      	ldr	r2, [pc, #36]	; (2656c <nct_disconnect+0x30>)
   26546:	f363 0007 	bfi	r0, r3, #0, #8
   2654a:	4b09      	ldr	r3, [pc, #36]	; (26570 <nct_disconnect+0x34>)
   2654c:	4909      	ldr	r1, [pc, #36]	; (26574 <nct_disconnect+0x38>)
   2654e:	1a9b      	subs	r3, r3, r2
   26550:	08db      	lsrs	r3, r3, #3
   26552:	f363 108f 	bfi	r0, r3, #6, #10
   26556:	4a08      	ldr	r2, [pc, #32]	; (26578 <nct_disconnect+0x3c>)
   26558:	f018 ff93 	bl	3f482 <log_string_sync>

	dc_endpoint_free();
   2655c:	f7ff fa82 	bl	25a64 <dc_endpoint_free>
	return mqtt_disconnect(&nct.client);
}
   26560:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return mqtt_disconnect(&nct.client);
   26564:	4805      	ldr	r0, [pc, #20]	; (2657c <nct_disconnect+0x40>)
   26566:	f019 bd95 	b.w	40094 <mqtt_disconnect>
   2656a:	bf00      	nop
   2656c:	00042fb4 	.word	0x00042fb4
   26570:	0004308c 	.word	0x0004308c
   26574:	00047fef 	.word	0x00047fef
   26578:	00047e43 	.word	0x00047e43
   2657c:	20023bb8 	.word	0x20023bb8

00026580 <nct_process>:

void nct_process(void)
{
   26580:	b510      	push	{r4, lr}
	mqtt_input(&nct.client);
   26582:	4c04      	ldr	r4, [pc, #16]	; (26594 <nct_process+0x14>)
   26584:	4620      	mov	r0, r4
   26586:	f019 fe45 	bl	40214 <mqtt_input>
	mqtt_live(&nct.client);
   2658a:	4620      	mov	r0, r4
}
   2658c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mqtt_live(&nct.client);
   26590:	f019 be19 	b.w	401c6 <mqtt_live>
   26594:	20023bb8 	.word	0x20023bb8

00026598 <nct_socket_get>:

int nct_socket_get(void)
{
	return nct.client.transport.tls.sock;
}
   26598:	4b01      	ldr	r3, [pc, #4]	; (265a0 <nct_socket_get+0x8>)
   2659a:	6c18      	ldr	r0, [r3, #64]	; 0x40
   2659c:	4770      	bx	lr
   2659e:	bf00      	nop
   265a0:	20023ba0 	.word	0x20023ba0

000265a4 <fragment_evt_send>:

	return 0;
}

static int fragment_evt_send(const struct download_client *client)
{
   265a4:	b530      	push	{r4, r5, lr}
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE,
   265a6:	f241 0504 	movw	r5, #4100	; 0x1004
   265aa:	5943      	ldr	r3, [r0, r5]
{
   265ac:	b085      	sub	sp, #20
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE,
   265ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
{
   265b2:	4604      	mov	r4, r0
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE,
   265b4:	d921      	bls.n	265fa <fragment_evt_send+0x56>
   265b6:	f44f 73b1 	mov.w	r3, #354	; 0x162
   265ba:	4a18      	ldr	r2, [pc, #96]	; (2661c <fragment_evt_send+0x78>)
   265bc:	4918      	ldr	r1, [pc, #96]	; (26620 <fragment_evt_send+0x7c>)
   265be:	4819      	ldr	r0, [pc, #100]	; (26624 <fragment_evt_send+0x80>)
   265c0:	f018 ff41 	bl	3f446 <printk>
   265c4:	4818      	ldr	r0, [pc, #96]	; (26628 <fragment_evt_send+0x84>)
   265c6:	f018 ff3e 	bl	3f446 <printk>
   265ca:	f44f 71b1 	mov.w	r1, #354	; 0x162
   265ce:	4813      	ldr	r0, [pc, #76]	; (2661c <fragment_evt_send+0x78>)
   265d0:	f018 ff46 	bl	3f460 <assert_post_action>
		 "Fragment overflow!");

	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE,
   265d4:	5963      	ldr	r3, [r4, r5]
   265d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   265da:	d90e      	bls.n	265fa <fragment_evt_send+0x56>
   265dc:	4910      	ldr	r1, [pc, #64]	; (26620 <fragment_evt_send+0x7c>)
   265de:	f240 1365 	movw	r3, #357	; 0x165
   265e2:	4a0e      	ldr	r2, [pc, #56]	; (2661c <fragment_evt_send+0x78>)
   265e4:	480f      	ldr	r0, [pc, #60]	; (26624 <fragment_evt_send+0x80>)
   265e6:	f018 ff2e 	bl	3f446 <printk>
   265ea:	4810      	ldr	r0, [pc, #64]	; (2662c <fragment_evt_send+0x88>)
   265ec:	f018 ff2b 	bl	3f446 <printk>
   265f0:	f240 1165 	movw	r1, #357	; 0x165
   265f4:	4809      	ldr	r0, [pc, #36]	; (2661c <fragment_evt_send+0x78>)
   265f6:	f018 ff33 	bl	3f460 <assert_post_action>
		 "Buffer overflow!");

	const struct download_client_evt evt = {
   265fa:	2300      	movs	r3, #0
   265fc:	f88d 3004 	strb.w	r3, [sp, #4]
		.id = DOWNLOAD_CLIENT_EVT_FRAGMENT,
		.fragment = {
			.buf = client->buf,
   26600:	1d23      	adds	r3, r4, #4
	const struct download_client_evt evt = {
   26602:	9302      	str	r3, [sp, #8]
			.len = client->offset,
   26604:	f241 0304 	movw	r3, #4100	; 0x1004
	const struct download_client_evt evt = {
   26608:	58e3      	ldr	r3, [r4, r3]
		}
	};

	return client->callback(&evt);
   2660a:	a801      	add	r0, sp, #4
	const struct download_client_evt evt = {
   2660c:	9303      	str	r3, [sp, #12]
	return client->callback(&evt);
   2660e:	f242 03d8 	movw	r3, #8408	; 0x20d8
   26612:	58e3      	ldr	r3, [r4, r3]
   26614:	4798      	blx	r3
}
   26616:	b005      	add	sp, #20
   26618:	bd30      	pop	{r4, r5, pc}
   2661a:	bf00      	nop
   2661c:	00048668 	.word	0x00048668
   26620:	000486ce 	.word	0x000486ce
   26624:	00045316 	.word	0x00045316
   26628:	000486e5 	.word	0x000486e5
   2662c:	000486fa 	.word	0x000486fa

00026630 <setsockopt>:
{
   26630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT_NO_MSG(socket_ops);
   26634:	4c15      	ldr	r4, [pc, #84]	; (2668c <setsockopt+0x5c>)
{
   26636:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   26638:	6823      	ldr	r3, [r4, #0]
{
   2663a:	4605      	mov	r5, r0
   2663c:	460e      	mov	r6, r1
   2663e:	4617      	mov	r7, r2
   26640:	f8dd 9020 	ldr.w	r9, [sp, #32]
	__ASSERT_NO_MSG(socket_ops);
   26644:	b94b      	cbnz	r3, 2665a <setsockopt+0x2a>
   26646:	4912      	ldr	r1, [pc, #72]	; (26690 <setsockopt+0x60>)
   26648:	4812      	ldr	r0, [pc, #72]	; (26694 <setsockopt+0x64>)
   2664a:	2357      	movs	r3, #87	; 0x57
   2664c:	4a12      	ldr	r2, [pc, #72]	; (26698 <setsockopt+0x68>)
   2664e:	f018 fefa 	bl	3f446 <printk>
   26652:	2157      	movs	r1, #87	; 0x57
   26654:	4810      	ldr	r0, [pc, #64]	; (26698 <setsockopt+0x68>)
   26656:	f018 ff03 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->setsockopt);
   2665a:	6823      	ldr	r3, [r4, #0]
   2665c:	69db      	ldr	r3, [r3, #28]
   2665e:	b94b      	cbnz	r3, 26674 <setsockopt+0x44>
   26660:	490e      	ldr	r1, [pc, #56]	; (2669c <setsockopt+0x6c>)
   26662:	480c      	ldr	r0, [pc, #48]	; (26694 <setsockopt+0x64>)
   26664:	2358      	movs	r3, #88	; 0x58
   26666:	4a0c      	ldr	r2, [pc, #48]	; (26698 <setsockopt+0x68>)
   26668:	f018 feed 	bl	3f446 <printk>
   2666c:	2158      	movs	r1, #88	; 0x58
   2666e:	480a      	ldr	r0, [pc, #40]	; (26698 <setsockopt+0x68>)
   26670:	f018 fef6 	bl	3f460 <assert_post_action>
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   26674:	6823      	ldr	r3, [r4, #0]
   26676:	f8cd 9020 	str.w	r9, [sp, #32]
   2667a:	69dc      	ldr	r4, [r3, #28]
   2667c:	463a      	mov	r2, r7
   2667e:	4643      	mov	r3, r8
   26680:	4631      	mov	r1, r6
   26682:	4628      	mov	r0, r5
   26684:	46a4      	mov	ip, r4
}
   26686:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   2668a:	4760      	bx	ip
   2668c:	20023934 	.word	0x20023934
   26690:	00045442 	.word	0x00045442
   26694:	00045316 	.word	0x00045316
   26698:	00045419 	.word	0x00045419
   2669c:	00046d26 	.word	0x00046d26

000266a0 <close>:
{
   266a0:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   266a2:	4c10      	ldr	r4, [pc, #64]	; (266e4 <close+0x44>)
{
   266a4:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   266a6:	6823      	ldr	r3, [r4, #0]
   266a8:	b94b      	cbnz	r3, 266be <close+0x1e>
   266aa:	490f      	ldr	r1, [pc, #60]	; (266e8 <close+0x48>)
   266ac:	480f      	ldr	r0, [pc, #60]	; (266ec <close+0x4c>)
   266ae:	2321      	movs	r3, #33	; 0x21
   266b0:	4a0f      	ldr	r2, [pc, #60]	; (266f0 <close+0x50>)
   266b2:	f018 fec8 	bl	3f446 <printk>
   266b6:	2121      	movs	r1, #33	; 0x21
   266b8:	480d      	ldr	r0, [pc, #52]	; (266f0 <close+0x50>)
   266ba:	f018 fed1 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   266be:	6823      	ldr	r3, [r4, #0]
   266c0:	685b      	ldr	r3, [r3, #4]
   266c2:	b94b      	cbnz	r3, 266d8 <close+0x38>
   266c4:	490b      	ldr	r1, [pc, #44]	; (266f4 <close+0x54>)
   266c6:	4809      	ldr	r0, [pc, #36]	; (266ec <close+0x4c>)
   266c8:	2322      	movs	r3, #34	; 0x22
   266ca:	4a09      	ldr	r2, [pc, #36]	; (266f0 <close+0x50>)
   266cc:	f018 febb 	bl	3f446 <printk>
   266d0:	2122      	movs	r1, #34	; 0x22
   266d2:	4807      	ldr	r0, [pc, #28]	; (266f0 <close+0x50>)
   266d4:	f018 fec4 	bl	3f460 <assert_post_action>
	return socket_ops->close(sock);
   266d8:	6823      	ldr	r3, [r4, #0]
   266da:	4628      	mov	r0, r5
}
   266dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   266e0:	685b      	ldr	r3, [r3, #4]
   266e2:	4718      	bx	r3
   266e4:	20023934 	.word	0x20023934
   266e8:	00045442 	.word	0x00045442
   266ec:	00045316 	.word	0x00045316
   266f0:	00045419 	.word	0x00045419
   266f4:	00046c56 	.word	0x00046c56

000266f8 <get_request_send>:
{
   266f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT_NO_MSG(client);
   266fc:	4605      	mov	r5, r0
{
   266fe:	b087      	sub	sp, #28
	__ASSERT_NO_MSG(client);
   26700:	b948      	cbnz	r0, 26716 <get_request_send+0x1e>
   26702:	4954      	ldr	r1, [pc, #336]	; (26854 <get_request_send+0x15c>)
   26704:	4854      	ldr	r0, [pc, #336]	; (26858 <get_request_send+0x160>)
   26706:	23f2      	movs	r3, #242	; 0xf2
   26708:	4a54      	ldr	r2, [pc, #336]	; (2685c <get_request_send+0x164>)
   2670a:	f018 fe9c 	bl	3f446 <printk>
   2670e:	21f2      	movs	r1, #242	; 0xf2
   26710:	4852      	ldr	r0, [pc, #328]	; (2685c <get_request_send+0x164>)
   26712:	f018 fea5 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(client->host);
   26716:	f241 0314 	movw	r3, #4116	; 0x1014
   2671a:	58eb      	ldr	r3, [r5, r3]
   2671c:	b94b      	cbnz	r3, 26732 <get_request_send+0x3a>
   2671e:	4950      	ldr	r1, [pc, #320]	; (26860 <get_request_send+0x168>)
   26720:	484d      	ldr	r0, [pc, #308]	; (26858 <get_request_send+0x160>)
   26722:	23f3      	movs	r3, #243	; 0xf3
   26724:	4a4d      	ldr	r2, [pc, #308]	; (2685c <get_request_send+0x164>)
   26726:	f018 fe8e 	bl	3f446 <printk>
   2672a:	21f3      	movs	r1, #243	; 0xf3
   2672c:	484b      	ldr	r0, [pc, #300]	; (2685c <get_request_send+0x164>)
   2672e:	f018 fe97 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(client->file);
   26732:	f241 0318 	movw	r3, #4120	; 0x1018
   26736:	58eb      	ldr	r3, [r5, r3]
   26738:	b94b      	cbnz	r3, 2674e <get_request_send+0x56>
   2673a:	494a      	ldr	r1, [pc, #296]	; (26864 <get_request_send+0x16c>)
   2673c:	4846      	ldr	r0, [pc, #280]	; (26858 <get_request_send+0x160>)
   2673e:	23f4      	movs	r3, #244	; 0xf4
   26740:	4a46      	ldr	r2, [pc, #280]	; (2685c <get_request_send+0x164>)
   26742:	f018 fe80 	bl	3f446 <printk>
   26746:	21f4      	movs	r1, #244	; 0xf4
   26748:	4844      	ldr	r0, [pc, #272]	; (2685c <get_request_send+0x164>)
   2674a:	f018 fe89 	bl	3f460 <assert_post_action>
	off = client->progress + CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE - 1;
   2674e:	f241 030c 	movw	r3, #4108	; 0x100c
	if (client->file_size != 0) {
   26752:	f241 0108 	movw	r1, #4104	; 0x1008
	off = client->progress + CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE - 1;
   26756:	58ea      	ldr	r2, [r5, r3]
	if (client->file_size != 0) {
   26758:	5869      	ldr	r1, [r5, r1]
	off = client->progress + CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE - 1;
   2675a:	f602 73ff 	addw	r3, r2, #4095	; 0xfff
	if (client->file_size != 0) {
   2675e:	b111      	cbz	r1, 26766 <get_request_send+0x6e>
		off = MIN(off, client->file_size);
   26760:	428b      	cmp	r3, r1
   26762:	bf28      	it	cs
   26764:	460b      	movcs	r3, r1
	len = snprintf(client->buf, CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE,
   26766:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2676a:	f241 0314 	movw	r3, #4116	; 0x1014
   2676e:	58eb      	ldr	r3, [r5, r3]
   26770:	f105 0904 	add.w	r9, r5, #4
   26774:	9300      	str	r3, [sp, #0]
   26776:	f241 0318 	movw	r3, #4120	; 0x1018
   2677a:	4a3b      	ldr	r2, [pc, #236]	; (26868 <get_request_send+0x170>)
   2677c:	58eb      	ldr	r3, [r5, r3]
   2677e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   26782:	4648      	mov	r0, r9
   26784:	f016 feb4 	bl	3d4f0 <sniprintf>
	if (len < 0 || len > CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE) {
   26788:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	len = snprintf(client->buf, CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE,
   2678c:	4604      	mov	r4, r0
	if (len < 0 || len > CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE) {
   2678e:	d945      	bls.n	2681c <get_request_send+0x124>
		LOG_ERR("Cannot create GET request, buffer too small");
   26790:	2301      	movs	r3, #1
   26792:	f04f 0000 	mov.w	r0, #0
   26796:	4a35      	ldr	r2, [pc, #212]	; (2686c <get_request_send+0x174>)
   26798:	f363 0007 	bfi	r0, r3, #0, #8
   2679c:	4b34      	ldr	r3, [pc, #208]	; (26870 <get_request_send+0x178>)
   2679e:	4935      	ldr	r1, [pc, #212]	; (26874 <get_request_send+0x17c>)
   267a0:	1a9b      	subs	r3, r3, r2
   267a2:	08db      	lsrs	r3, r3, #3
   267a4:	f363 108f 	bfi	r0, r3, #6, #10
   267a8:	f018 fe6b 	bl	3f482 <log_string_sync>
		return -ENOMEM;
   267ac:	f06f 000b 	mvn.w	r0, #11
}
   267b0:	b007      	add	sp, #28
   267b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sent = send(client->fd, client->buf + off, len, 0);
   267b6:	9b05      	ldr	r3, [sp, #20]
   267b8:	f8d5 a000 	ldr.w	sl, [r5]
   267bc:	eb09 0b03 	add.w	fp, r9, r3
	__ASSERT_NO_MSG(socket_ops);
   267c0:	f8d8 3000 	ldr.w	r3, [r8]
   267c4:	b94b      	cbnz	r3, 267da <get_request_send+0xe2>
   267c6:	492c      	ldr	r1, [pc, #176]	; (26878 <get_request_send+0x180>)
   267c8:	4823      	ldr	r0, [pc, #140]	; (26858 <get_request_send+0x160>)
   267ca:	237e      	movs	r3, #126	; 0x7e
   267cc:	4632      	mov	r2, r6
   267ce:	f018 fe3a 	bl	3f446 <printk>
   267d2:	217e      	movs	r1, #126	; 0x7e
   267d4:	4630      	mov	r0, r6
   267d6:	f018 fe43 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   267da:	f8d8 3000 	ldr.w	r3, [r8]
   267de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   267e0:	b94b      	cbnz	r3, 267f6 <get_request_send+0xfe>
   267e2:	4926      	ldr	r1, [pc, #152]	; (2687c <get_request_send+0x184>)
   267e4:	481c      	ldr	r0, [pc, #112]	; (26858 <get_request_send+0x160>)
   267e6:	237f      	movs	r3, #127	; 0x7f
   267e8:	4632      	mov	r2, r6
   267ea:	f018 fe2c 	bl	3f446 <printk>
   267ee:	217f      	movs	r1, #127	; 0x7f
   267f0:	4630      	mov	r0, r6
   267f2:	f018 fe35 	bl	3f460 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   267f6:	f8d8 3000 	ldr.w	r3, [r8]
   267fa:	4622      	mov	r2, r4
   267fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   267fe:	4659      	mov	r1, fp
   26800:	461f      	mov	r7, r3
   26802:	4650      	mov	r0, sl
   26804:	2300      	movs	r3, #0
   26806:	47b8      	blx	r7
		if (sent <= 0) {
   26808:	2800      	cmp	r0, #0
   2680a:	dd0d      	ble.n	26828 <get_request_send+0x130>
		off += sent;
   2680c:	9b05      	ldr	r3, [sp, #20]
		len -= sent;
   2680e:	1a24      	subs	r4, r4, r0
		off += sent;
   26810:	4403      	add	r3, r0
   26812:	9305      	str	r3, [sp, #20]
	while (len) {
   26814:	2c00      	cmp	r4, #0
   26816:	d1ce      	bne.n	267b6 <get_request_send+0xbe>
	return 0;
   26818:	4620      	mov	r0, r4
   2681a:	e7c9      	b.n	267b0 <get_request_send+0xb8>
	size_t off = 0;
   2681c:	2300      	movs	r3, #0
	__ASSERT_NO_MSG(socket_ops);
   2681e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 26888 <get_request_send+0x190>
   26822:	9305      	str	r3, [sp, #20]
   26824:	4e16      	ldr	r6, [pc, #88]	; (26880 <get_request_send+0x188>)
   26826:	e7f5      	b.n	26814 <get_request_send+0x11c>
		LOG_ERR("Failed to send HTTP request, errno %d", errno);
   26828:	2301      	movs	r3, #1
   2682a:	f04f 0400 	mov.w	r4, #0
   2682e:	4a0f      	ldr	r2, [pc, #60]	; (2686c <get_request_send+0x174>)
   26830:	f363 0407 	bfi	r4, r3, #0, #8
   26834:	4b0e      	ldr	r3, [pc, #56]	; (26870 <get_request_send+0x178>)
   26836:	1a9b      	subs	r3, r3, r2
   26838:	08db      	lsrs	r3, r3, #3
   2683a:	f363 148f 	bfi	r4, r3, #6, #10
   2683e:	f019 f837 	bl	3f8b0 <__errno>
   26842:	4910      	ldr	r1, [pc, #64]	; (26884 <get_request_send+0x18c>)
   26844:	6802      	ldr	r2, [r0, #0]
   26846:	4620      	mov	r0, r4
   26848:	f018 fe1b 	bl	3f482 <log_string_sync>
			return -EIO;
   2684c:	f06f 0004 	mvn.w	r0, #4
		return err;
   26850:	e7ae      	b.n	267b0 <get_request_send+0xb8>
   26852:	bf00      	nop
   26854:	000487dc 	.word	0x000487dc
   26858:	00045316 	.word	0x00045316
   2685c:	00048668 	.word	0x00048668
   26860:	0004870d 	.word	0x0004870d
   26864:	0004871a 	.word	0x0004871a
   26868:	00048727 	.word	0x00048727
   2686c:	00042fb4 	.word	0x00042fb4
   26870:	00043014 	.word	0x00043014
   26874:	00048772 	.word	0x00048772
   26878:	00045442 	.word	0x00045442
   2687c:	00046ca0 	.word	0x00046ca0
   26880:	00045419 	.word	0x00045419
   26884:	0004879e 	.word	0x0004879e
   26888:	20023934 	.word	0x20023934

0002688c <download_client_init>:
	goto restart_and_suspend;
}

int download_client_init(struct download_client *const client,
			 download_client_callback_t callback)
{
   2688c:	b530      	push	{r4, r5, lr}
	if (client == NULL || callback == NULL) {
   2688e:	4605      	mov	r5, r0
{
   26890:	b087      	sub	sp, #28
	if (client == NULL || callback == NULL) {
   26892:	b1f8      	cbz	r0, 268d4 <download_client_init+0x48>
   26894:	b1f1      	cbz	r1, 268d4 <download_client_init+0x48>
		return -EINVAL;
	}

	client->fd = -1;
   26896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2689a:	6003      	str	r3, [r0, #0]
	client->callback = callback;
   2689c:	f242 03d8 	movw	r3, #8408	; 0x20d8
   268a0:	50c1      	str	r1, [r0, r3]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   268a2:	2400      	movs	r4, #0
   268a4:	230e      	movs	r3, #14
   268a6:	e9cd 0400 	strd	r0, r4, [sp]
   268aa:	f500 5186 	add.w	r1, r0, #4288	; 0x10c0
   268ae:	f500 5081 	add.w	r0, r0, #4128	; 0x1020
   268b2:	e9cd 4302 	strd	r4, r3, [sp, #8]
   268b6:	e9cd 4404 	strd	r4, r4, [sp, #16]
   268ba:	4b08      	ldr	r3, [pc, #32]	; (268dc <download_client_init+0x50>)
   268bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   268c0:	3118      	adds	r1, #24
   268c2:	3008      	adds	r0, #8
   268c4:	f014 fc5a 	bl	3b17c <z_impl_k_thread_create>

	/* The thread is spawned now, but it will suspend itself;
	 * it is resumed when the download is started via the API.
	 */
	client->tid =
   268c8:	f241 0324 	movw	r3, #4132	; 0x1024
   268cc:	50e8      	str	r0, [r5, r3]
		k_thread_create(&client->thread, client->thread_stack,
				K_THREAD_STACK_SIZEOF(client->thread_stack),
				download_thread, client, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);

	return 0;
   268ce:	4620      	mov	r0, r4
}
   268d0:	b007      	add	sp, #28
   268d2:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   268d4:	f06f 0015 	mvn.w	r0, #21
   268d8:	e7fa      	b.n	268d0 <download_client_init+0x44>
   268da:	bf00      	nop
   268dc:	00026cf5 	.word	0x00026cf5

000268e0 <download_client_connect>:

int download_client_connect(struct download_client *client, const char *host,
			    const struct download_client_cfg *config)
{
   268e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   268e4:	b0a1      	sub	sp, #132	; 0x84
   268e6:	9104      	str	r1, [sp, #16]
   268e8:	4690      	mov	r8, r2
	int err;

	if (client == NULL || host == NULL || config == NULL) {
   268ea:	4606      	mov	r6, r0
   268ec:	b928      	cbnz	r0, 268fa <download_client_connect+0x1a>
		client->fd =
			resolve_and_connect(AF_INET, host, config);
	}

	if (client->fd < 0) {
		return -EINVAL;
   268ee:	f06f 0715 	mvn.w	r7, #21
	if (err) {
		return err;
	}

	return 0;
}
   268f2:	4638      	mov	r0, r7
   268f4:	b021      	add	sp, #132	; 0x84
   268f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (client == NULL || host == NULL || config == NULL) {
   268fa:	9b04      	ldr	r3, [sp, #16]
   268fc:	2b00      	cmp	r3, #0
   268fe:	d0f6      	beq.n	268ee <download_client_connect+0xe>
   26900:	2a00      	cmp	r2, #0
   26902:	d0f4      	beq.n	268ee <download_client_connect+0xe>
		if (config->sec_tag != -1) {
   26904:	6813      	ldr	r3, [r2, #0]
   26906:	3301      	adds	r3, #1
   26908:	d1f1      	bne.n	268ee <download_client_connect+0xe>
	if (client->fd != -1) {
   2690a:	6807      	ldr	r7, [r0, #0]
   2690c:	1c7b      	adds	r3, r7, #1
   2690e:	f040 8170 	bne.w	26bf2 <download_client_connect+0x312>
	struct addrinfo hints = {
   26912:	2220      	movs	r2, #32
   26914:	2100      	movs	r1, #0
   26916:	eb0d 0002 	add.w	r0, sp, r2
   2691a:	f01b f86a 	bl	419f2 <memset>
   2691e:	2301      	movs	r3, #1
   26920:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   26924:	2306      	movs	r3, #6
	__ASSERT_NO_MSG(socket_ops);
   26926:	4cb4      	ldr	r4, [pc, #720]	; (26bf8 <download_client_connect+0x318>)
   26928:	930b      	str	r3, [sp, #44]	; 0x2c
   2692a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2692e:	930e      	str	r3, [sp, #56]	; 0x38
   26930:	6823      	ldr	r3, [r4, #0]
   26932:	b94b      	cbnz	r3, 26948 <download_client_connect+0x68>
   26934:	49b1      	ldr	r1, [pc, #708]	; (26bfc <download_client_connect+0x31c>)
   26936:	48b2      	ldr	r0, [pc, #712]	; (26c00 <download_client_connect+0x320>)
   26938:	2393      	movs	r3, #147	; 0x93
   2693a:	4ab2      	ldr	r2, [pc, #712]	; (26c04 <download_client_connect+0x324>)
   2693c:	f018 fd83 	bl	3f446 <printk>
   26940:	2193      	movs	r1, #147	; 0x93
   26942:	48b0      	ldr	r0, [pc, #704]	; (26c04 <download_client_connect+0x324>)
   26944:	f018 fd8c 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);
   26948:	6823      	ldr	r3, [r4, #0]
   2694a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2694c:	b94b      	cbnz	r3, 26962 <download_client_connect+0x82>
   2694e:	49ae      	ldr	r1, [pc, #696]	; (26c08 <download_client_connect+0x328>)
   26950:	48ab      	ldr	r0, [pc, #684]	; (26c00 <download_client_connect+0x320>)
   26952:	2394      	movs	r3, #148	; 0x94
   26954:	4aab      	ldr	r2, [pc, #684]	; (26c04 <download_client_connect+0x324>)
   26956:	f018 fd76 	bl	3f446 <printk>
   2695a:	2194      	movs	r1, #148	; 0x94
   2695c:	48a9      	ldr	r0, [pc, #676]	; (26c04 <download_client_connect+0x324>)
   2695e:	f018 fd7f 	bl	3f460 <assert_post_action>
	return socket_ops->getaddrinfo(node, service, hints, res);
   26962:	6823      	ldr	r3, [r4, #0]
   26964:	aa08      	add	r2, sp, #32
   26966:	6b5d      	ldr	r5, [r3, #52]	; 0x34
   26968:	2100      	movs	r1, #0
   2696a:	ab07      	add	r3, sp, #28
   2696c:	9804      	ldr	r0, [sp, #16]
   2696e:	47a8      	blx	r5
	if (err) {
   26970:	4da6      	ldr	r5, [pc, #664]	; (26c0c <download_client_connect+0x32c>)
   26972:	4ba7      	ldr	r3, [pc, #668]	; (26c10 <download_client_connect+0x330>)
   26974:	1aed      	subs	r5, r5, r3
   26976:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   2697a:	b198      	cbz	r0, 269a4 <download_client_connect+0xc4>
		LOG_WRN("Failed to resolve hostname %s on %s", log_strdup(host),
   2697c:	2302      	movs	r3, #2
   2697e:	f04f 0400 	mov.w	r4, #0
   26982:	9804      	ldr	r0, [sp, #16]
   26984:	f363 0407 	bfi	r4, r3, #0, #8
   26988:	f018 fd8d 	bl	3f4a6 <log_strdup>
   2698c:	f365 148f 	bfi	r4, r5, #6, #10
   26990:	4602      	mov	r2, r0
   26992:	4ba0      	ldr	r3, [pc, #640]	; (26c14 <download_client_connect+0x334>)
   26994:	49a0      	ldr	r1, [pc, #640]	; (26c18 <download_client_connect+0x338>)
   26996:	4620      	mov	r0, r4
   26998:	f018 fd73 	bl	3f482 <log_string_sync>
		client->fd =
   2699c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   269a0:	6033      	str	r3, [r6, #0]
   269a2:	e7a4      	b.n	268ee <download_client_connect+0xe>
	LOG_INF("Attempting to connect over %s",
   269a4:	2303      	movs	r3, #3
   269a6:	f04f 0a00 	mov.w	sl, #0
   269aa:	489a      	ldr	r0, [pc, #616]	; (26c14 <download_client_connect+0x334>)
   269ac:	f363 0a07 	bfi	sl, r3, #0, #8
   269b0:	f018 fd79 	bl	3f4a6 <log_strdup>
   269b4:	f365 1a8f 	bfi	sl, r5, #6, #10
   269b8:	4602      	mov	r2, r0
   269ba:	4998      	ldr	r1, [pc, #608]	; (26c1c <download_client_connect+0x33c>)
   269bc:	4650      	mov	r0, sl
   269be:	f018 fd60 	bl	3f482 <log_string_sync>
	__ASSERT_NO_MSG(socket_ops);
   269c2:	6823      	ldr	r3, [r4, #0]
   269c4:	b94b      	cbnz	r3, 269da <download_client_connect+0xfa>
   269c6:	498d      	ldr	r1, [pc, #564]	; (26bfc <download_client_connect+0x31c>)
   269c8:	488d      	ldr	r0, [pc, #564]	; (26c00 <download_client_connect+0x320>)
   269ca:	2319      	movs	r3, #25
   269cc:	4a8d      	ldr	r2, [pc, #564]	; (26c04 <download_client_connect+0x324>)
   269ce:	f018 fd3a 	bl	3f446 <printk>
   269d2:	2119      	movs	r1, #25
   269d4:	488b      	ldr	r0, [pc, #556]	; (26c04 <download_client_connect+0x324>)
   269d6:	f018 fd43 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   269da:	6823      	ldr	r3, [r4, #0]
   269dc:	681b      	ldr	r3, [r3, #0]
   269de:	b94b      	cbnz	r3, 269f4 <download_client_connect+0x114>
   269e0:	498f      	ldr	r1, [pc, #572]	; (26c20 <download_client_connect+0x340>)
   269e2:	4887      	ldr	r0, [pc, #540]	; (26c00 <download_client_connect+0x320>)
   269e4:	231a      	movs	r3, #26
   269e6:	4a87      	ldr	r2, [pc, #540]	; (26c04 <download_client_connect+0x324>)
   269e8:	f018 fd2d 	bl	3f446 <printk>
   269ec:	211a      	movs	r1, #26
   269ee:	4885      	ldr	r0, [pc, #532]	; (26c04 <download_client_connect+0x324>)
   269f0:	f018 fd36 	bl	3f460 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   269f4:	2101      	movs	r1, #1
   269f6:	6823      	ldr	r3, [r4, #0]
   269f8:	2206      	movs	r2, #6
   269fa:	681b      	ldr	r3, [r3, #0]
   269fc:	4608      	mov	r0, r1
   269fe:	4798      	blx	r3
	if (fd < 0) {
   26a00:	1e03      	subs	r3, r0, #0
   26a02:	9303      	str	r3, [sp, #12]
   26a04:	da34      	bge.n	26a70 <download_client_connect+0x190>
		LOG_ERR("Failed to create socket, errno %d", errno);
   26a06:	2301      	movs	r3, #1
   26a08:	f04f 0700 	mov.w	r7, #0
   26a0c:	f363 0707 	bfi	r7, r3, #0, #8
   26a10:	f018 ff4e 	bl	3f8b0 <__errno>
   26a14:	f365 178f 	bfi	r7, r5, #6, #10
   26a18:	6802      	ldr	r2, [r0, #0]
   26a1a:	4982      	ldr	r1, [pc, #520]	; (26c24 <download_client_connect+0x344>)
   26a1c:	4638      	mov	r0, r7
   26a1e:	f018 fd30 	bl	3f482 <log_string_sync>
	err = getaddrinfo(host, NULL, &hints, &info);
   26a22:	2700      	movs	r7, #0
	__ASSERT_NO_MSG(socket_ops);
   26a24:	6823      	ldr	r3, [r4, #0]
	freeaddrinfo(info);
   26a26:	f8dd 901c 	ldr.w	r9, [sp, #28]
   26a2a:	b94b      	cbnz	r3, 26a40 <download_client_connect+0x160>
   26a2c:	4973      	ldr	r1, [pc, #460]	; (26bfc <download_client_connect+0x31c>)
   26a2e:	4874      	ldr	r0, [pc, #464]	; (26c00 <download_client_connect+0x320>)
   26a30:	239b      	movs	r3, #155	; 0x9b
   26a32:	4a74      	ldr	r2, [pc, #464]	; (26c04 <download_client_connect+0x324>)
   26a34:	f018 fd07 	bl	3f446 <printk>
   26a38:	219b      	movs	r1, #155	; 0x9b
   26a3a:	4872      	ldr	r0, [pc, #456]	; (26c04 <download_client_connect+0x324>)
   26a3c:	f018 fd10 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);
   26a40:	6823      	ldr	r3, [r4, #0]
   26a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   26a44:	b94b      	cbnz	r3, 26a5a <download_client_connect+0x17a>
   26a46:	4978      	ldr	r1, [pc, #480]	; (26c28 <download_client_connect+0x348>)
   26a48:	486d      	ldr	r0, [pc, #436]	; (26c00 <download_client_connect+0x320>)
   26a4a:	239c      	movs	r3, #156	; 0x9c
   26a4c:	4a6d      	ldr	r2, [pc, #436]	; (26c04 <download_client_connect+0x324>)
   26a4e:	f018 fcfa 	bl	3f446 <printk>
   26a52:	219c      	movs	r1, #156	; 0x9c
   26a54:	486b      	ldr	r0, [pc, #428]	; (26c04 <download_client_connect+0x324>)
   26a56:	f018 fd03 	bl	3f460 <assert_post_action>
	return socket_ops->freeaddrinfo(res);
   26a5a:	6823      	ldr	r3, [r4, #0]
   26a5c:	4648      	mov	r0, r9
   26a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   26a60:	4798      	blx	r3
	if (err) {
   26a62:	2f00      	cmp	r7, #0
   26a64:	f000 80a5 	beq.w	26bb2 <download_client_connect+0x2d2>
		close(fd);
   26a68:	9803      	ldr	r0, [sp, #12]
   26a6a:	f7ff fe19 	bl	266a0 <close>
   26a6e:	e795      	b.n	2699c <download_client_connect+0xbc>
	if (cfg->apn != NULL) {
   26a70:	f8d8 0004 	ldr.w	r0, [r8, #4]
   26a74:	2800      	cmp	r0, #0
   26a76:	d052      	beq.n	26b1e <download_client_connect+0x23e>
		LOG_INF("Setting up APN: %s", log_strdup(cfg->apn));
   26a78:	2303      	movs	r3, #3
   26a7a:	f04f 0a00 	mov.w	sl, #0
   26a7e:	f363 0a07 	bfi	sl, r3, #0, #8
   26a82:	f018 fd10 	bl	3f4a6 <log_strdup>
   26a86:	f365 1a8f 	bfi	sl, r5, #6, #10
   26a8a:	4602      	mov	r2, r0
   26a8c:	4967      	ldr	r1, [pc, #412]	; (26c2c <download_client_connect+0x34c>)
   26a8e:	4650      	mov	r0, sl
   26a90:	f018 fcf7 	bl	3f482 <log_string_sync>
	struct ifreq ifr = {0};
   26a94:	2240      	movs	r2, #64	; 0x40
		err = socket_apn_set(fd, cfg->apn);
   26a96:	f8d8 b004 	ldr.w	fp, [r8, #4]
	struct ifreq ifr = {0};
   26a9a:	2100      	movs	r1, #0
   26a9c:	eb0d 0002 	add.w	r0, sp, r2
   26aa0:	f01a ffa7 	bl	419f2 <memset>
	__ASSERT_NO_MSG(apn);
   26aa4:	f1bb 0f00 	cmp.w	fp, #0
   26aa8:	d109      	bne.n	26abe <download_client_connect+0x1de>
   26aaa:	4961      	ldr	r1, [pc, #388]	; (26c30 <download_client_connect+0x350>)
   26aac:	4854      	ldr	r0, [pc, #336]	; (26c00 <download_client_connect+0x320>)
   26aae:	2362      	movs	r3, #98	; 0x62
   26ab0:	4a60      	ldr	r2, [pc, #384]	; (26c34 <download_client_connect+0x354>)
   26ab2:	f018 fcc8 	bl	3f446 <printk>
   26ab6:	2162      	movs	r1, #98	; 0x62
   26ab8:	485e      	ldr	r0, [pc, #376]	; (26c34 <download_client_connect+0x354>)
   26aba:	f018 fcd1 	bl	3f460 <assert_post_action>
	len = strlen(apn);
   26abe:	4658      	mov	r0, fp
   26ac0:	f7f3 fa10 	bl	19ee4 <strlen>
	if (len >= sizeof(ifr.ifr_name)) {
   26ac4:	283f      	cmp	r0, #63	; 0x3f
	len = strlen(apn);
   26ac6:	4682      	mov	sl, r0
	if (len >= sizeof(ifr.ifr_name)) {
   26ac8:	d90a      	bls.n	26ae0 <download_client_connect+0x200>
		LOG_ERR("Access point name is too long.");
   26aca:	2301      	movs	r3, #1
   26acc:	f04f 0000 	mov.w	r0, #0
   26ad0:	f363 0007 	bfi	r0, r3, #0, #8
   26ad4:	f365 108f 	bfi	r0, r5, #6, #10
   26ad8:	4957      	ldr	r1, [pc, #348]	; (26c38 <download_client_connect+0x358>)
   26ada:	f018 fcd2 	bl	3f482 <log_string_sync>
		if (err) {
   26ade:	e7a1      	b.n	26a24 <download_client_connect+0x144>
	memcpy(ifr.ifr_name, apn, len);
   26ae0:	2340      	movs	r3, #64	; 0x40
   26ae2:	4602      	mov	r2, r0
   26ae4:	4659      	mov	r1, fp
   26ae6:	eb0d 0003 	add.w	r0, sp, r3
   26aea:	f01a ff6f 	bl	419cc <__memcpy_chk>
	err = setsockopt(fd, SOL_SOCKET, SO_BINDTODEVICE, &ifr, len);
   26aee:	f8cd a000 	str.w	sl, [sp]
   26af2:	ab10      	add	r3, sp, #64	; 0x40
   26af4:	2219      	movs	r2, #25
   26af6:	2101      	movs	r1, #1
   26af8:	9803      	ldr	r0, [sp, #12]
   26afa:	f7ff fd99 	bl	26630 <setsockopt>
	if (err) {
   26afe:	b170      	cbz	r0, 26b1e <download_client_connect+0x23e>
		LOG_ERR("Failed to bind socket, errno %d", errno);
   26b00:	2301      	movs	r3, #1
   26b02:	f04f 0900 	mov.w	r9, #0
   26b06:	f363 0907 	bfi	r9, r3, #0, #8
   26b0a:	f018 fed1 	bl	3f8b0 <__errno>
   26b0e:	f365 198f 	bfi	r9, r5, #6, #10
   26b12:	6802      	ldr	r2, [r0, #0]
   26b14:	4949      	ldr	r1, [pc, #292]	; (26c3c <download_client_connect+0x35c>)
   26b16:	4648      	mov	r0, r9
   26b18:	f018 fcb3 	bl	3f482 <log_string_sync>
		if (err) {
   26b1c:	e782      	b.n	26a24 <download_client_connect+0x144>
	for (addr = info; addr != NULL; addr = addr->ai_next) {
   26b1e:	f8dd a01c 	ldr.w	sl, [sp, #28]
	__ASSERT_NO_MSG(socket_ops);
   26b22:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 26c04 <download_client_connect+0x324>
   26b26:	f1ba 0f00 	cmp.w	sl, #0
   26b2a:	f43f af7b 	beq.w	26a24 <download_client_connect+0x144>
		struct sockaddr * const sa = addr->ai_addr;
   26b2e:	f8da 7014 	ldr.w	r7, [sl, #20]
		switch (sa->sa_family) {
   26b32:	883b      	ldrh	r3, [r7, #0]
   26b34:	2b01      	cmp	r3, #1
   26b36:	d001      	beq.n	26b3c <download_client_connect+0x25c>
   26b38:	2b02      	cmp	r3, #2
   26b3a:	d102      	bne.n	26b42 <download_client_connect+0x262>
			((struct sockaddr_in *)sa)->sin_port = port;
   26b3c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
   26b40:	807b      	strh	r3, [r7, #2]
		err = connect(fd, sa, addr->ai_addrlen);
   26b42:	f8da 3010 	ldr.w	r3, [sl, #16]
   26b46:	9305      	str	r3, [sp, #20]
   26b48:	6823      	ldr	r3, [r4, #0]
   26b4a:	b94b      	cbnz	r3, 26b60 <download_client_connect+0x280>
   26b4c:	492b      	ldr	r1, [pc, #172]	; (26bfc <download_client_connect+0x31c>)
   26b4e:	482c      	ldr	r0, [pc, #176]	; (26c00 <download_client_connect+0x320>)
   26b50:	2345      	movs	r3, #69	; 0x45
   26b52:	465a      	mov	r2, fp
   26b54:	f018 fc77 	bl	3f446 <printk>
   26b58:	2145      	movs	r1, #69	; 0x45
   26b5a:	4658      	mov	r0, fp
   26b5c:	f018 fc80 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->connect);
   26b60:	6823      	ldr	r3, [r4, #0]
   26b62:	695b      	ldr	r3, [r3, #20]
   26b64:	b94b      	cbnz	r3, 26b7a <download_client_connect+0x29a>
   26b66:	4936      	ldr	r1, [pc, #216]	; (26c40 <download_client_connect+0x360>)
   26b68:	4825      	ldr	r0, [pc, #148]	; (26c00 <download_client_connect+0x320>)
   26b6a:	2346      	movs	r3, #70	; 0x46
   26b6c:	465a      	mov	r2, fp
   26b6e:	f018 fc6a 	bl	3f446 <printk>
   26b72:	2146      	movs	r1, #70	; 0x46
   26b74:	4658      	mov	r0, fp
   26b76:	f018 fc73 	bl	3f460 <assert_post_action>
	return socket_ops->connect(sock, addr, addrlen);
   26b7a:	6823      	ldr	r3, [r4, #0]
   26b7c:	4639      	mov	r1, r7
   26b7e:	695b      	ldr	r3, [r3, #20]
   26b80:	9a05      	ldr	r2, [sp, #20]
   26b82:	9803      	ldr	r0, [sp, #12]
   26b84:	4798      	blx	r3
		if (err) {
   26b86:	4607      	mov	r7, r0
   26b88:	2800      	cmp	r0, #0
   26b8a:	f43f af4b 	beq.w	26a24 <download_client_connect+0x144>
			LOG_ERR("Unable to connect, errno %d", errno);
   26b8e:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   26b92:	f043 0301 	orr.w	r3, r3, #1
   26b96:	f363 0907 	bfi	r9, r3, #0, #8
   26b9a:	f018 fe89 	bl	3f8b0 <__errno>
   26b9e:	f365 198f 	bfi	r9, r5, #6, #10
   26ba2:	6802      	ldr	r2, [r0, #0]
   26ba4:	4927      	ldr	r1, [pc, #156]	; (26c44 <download_client_connect+0x364>)
   26ba6:	4648      	mov	r0, r9
   26ba8:	f018 fc6b 	bl	3f482 <log_string_sync>
	for (addr = info; addr != NULL; addr = addr->ai_next) {
   26bac:	f8da a01c 	ldr.w	sl, [sl, #28]
   26bb0:	e7b9      	b.n	26b26 <download_client_connect+0x246>
		client->fd =
   26bb2:	9b03      	ldr	r3, [sp, #12]
	if (client->fd < 0) {
   26bb4:	2b00      	cmp	r3, #0
		client->fd =
   26bb6:	6033      	str	r3, [r6, #0]
	if (client->fd < 0) {
   26bb8:	f6ff ae99 	blt.w	268ee <download_client_connect+0xe>
	client->config = *config;
   26bbc:	e898 0003 	ldmia.w	r8, {r0, r1}
	client->host = host;
   26bc0:	f241 0314 	movw	r3, #4116	; 0x1014
   26bc4:	9a04      	ldr	r2, [sp, #16]
	LOG_INF("Connected to %s", log_strdup(host));
   26bc6:	f04f 0400 	mov.w	r4, #0
	client->host = host;
   26bca:	50f2      	str	r2, [r6, r3]
	LOG_INF("Connected to %s", log_strdup(host));
   26bcc:	2303      	movs	r3, #3
	client->config = *config;
   26bce:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
   26bd2:	361c      	adds	r6, #28
   26bd4:	e886 0003 	stmia.w	r6, {r0, r1}
	LOG_INF("Connected to %s", log_strdup(host));
   26bd8:	4610      	mov	r0, r2
   26bda:	f363 0407 	bfi	r4, r3, #0, #8
   26bde:	f018 fc62 	bl	3f4a6 <log_strdup>
   26be2:	f365 148f 	bfi	r4, r5, #6, #10
   26be6:	4602      	mov	r2, r0
   26be8:	4917      	ldr	r1, [pc, #92]	; (26c48 <download_client_connect+0x368>)
   26bea:	4620      	mov	r0, r4
   26bec:	f018 fc49 	bl	3f482 <log_string_sync>
	if (err) {
   26bf0:	e67f      	b.n	268f2 <download_client_connect+0x12>
		return 0;
   26bf2:	2700      	movs	r7, #0
   26bf4:	e67d      	b.n	268f2 <download_client_connect+0x12>
   26bf6:	bf00      	nop
   26bf8:	20023934 	.word	0x20023934
   26bfc:	00045442 	.word	0x00045442
   26c00:	00045316 	.word	0x00045316
   26c04:	00045419 	.word	0x00045419
   26c08:	00047f0c 	.word	0x00047f0c
   26c0c:	00043014 	.word	0x00043014
   26c10:	00042fb4 	.word	0x00042fb4
   26c14:	000483a9 	.word	0x000483a9
   26c18:	000483ae 	.word	0x000483ae
   26c1c:	000483d2 	.word	0x000483d2
   26c20:	00046c68 	.word	0x00046c68
   26c24:	000483f0 	.word	0x000483f0
   26c28:	00047f7d 	.word	0x00047f7d
   26c2c:	00048412 	.word	0x00048412
   26c30:	00048425 	.word	0x00048425
   26c34:	00048668 	.word	0x00048668
   26c38:	00048429 	.word	0x00048429
   26c3c:	00048448 	.word	0x00048448
   26c40:	00046c7b 	.word	0x00046c7b
   26c44:	00048468 	.word	0x00048468
   26c48:	00048484 	.word	0x00048484

00026c4c <download_client_disconnect>:

int download_client_disconnect(struct download_client *const client)
{
   26c4c:	b510      	push	{r4, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   26c4e:	4604      	mov	r4, r0
   26c50:	b300      	cbz	r0, 26c94 <download_client_disconnect+0x48>
   26c52:	6800      	ldr	r0, [r0, #0]
   26c54:	2800      	cmp	r0, #0
   26c56:	db1d      	blt.n	26c94 <download_client_disconnect+0x48>
		return -EINVAL;
	}

	err = close(client->fd);
   26c58:	f7ff fd22 	bl	266a0 <close>
	if (err) {
   26c5c:	b1b0      	cbz	r0, 26c8c <download_client_disconnect+0x40>
		LOG_ERR("Failed to close socket, errno %d", errno);
   26c5e:	2301      	movs	r3, #1
   26c60:	f04f 0400 	mov.w	r4, #0
   26c64:	4a0d      	ldr	r2, [pc, #52]	; (26c9c <download_client_disconnect+0x50>)
   26c66:	f363 0407 	bfi	r4, r3, #0, #8
   26c6a:	4b0d      	ldr	r3, [pc, #52]	; (26ca0 <download_client_disconnect+0x54>)
   26c6c:	1a9b      	subs	r3, r3, r2
   26c6e:	08db      	lsrs	r3, r3, #3
   26c70:	f363 148f 	bfi	r4, r3, #6, #10
   26c74:	f018 fe1c 	bl	3f8b0 <__errno>
   26c78:	490a      	ldr	r1, [pc, #40]	; (26ca4 <download_client_disconnect+0x58>)
   26c7a:	6802      	ldr	r2, [r0, #0]
   26c7c:	4620      	mov	r0, r4
   26c7e:	f018 fc00 	bl	3f482 <log_string_sync>
		return -errno;
   26c82:	f018 fe15 	bl	3f8b0 <__errno>
   26c86:	6800      	ldr	r0, [r0, #0]
   26c88:	4240      	negs	r0, r0
	}

	client->fd = -1;

	return 0;
}
   26c8a:	bd10      	pop	{r4, pc}
	client->fd = -1;
   26c8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26c90:	6023      	str	r3, [r4, #0]
	return 0;
   26c92:	e7fa      	b.n	26c8a <download_client_disconnect+0x3e>
		return -EINVAL;
   26c94:	f06f 0015 	mvn.w	r0, #21
   26c98:	e7f7      	b.n	26c8a <download_client_disconnect+0x3e>
   26c9a:	bf00      	nop
   26c9c:	00042fb4 	.word	0x00042fb4
   26ca0:	00043014 	.word	0x00043014
   26ca4:	00048494 	.word	0x00048494

00026ca8 <reconnect>:
{
   26ca8:	b510      	push	{r4, lr}
	LOG_INF("Reconnecting..");
   26caa:	2303      	movs	r3, #3
{
   26cac:	4604      	mov	r4, r0
	LOG_INF("Reconnecting..");
   26cae:	f04f 0000 	mov.w	r0, #0
   26cb2:	4a0d      	ldr	r2, [pc, #52]	; (26ce8 <reconnect+0x40>)
   26cb4:	f363 0007 	bfi	r0, r3, #0, #8
   26cb8:	4b0c      	ldr	r3, [pc, #48]	; (26cec <reconnect+0x44>)
   26cba:	490d      	ldr	r1, [pc, #52]	; (26cf0 <reconnect+0x48>)
   26cbc:	1a9b      	subs	r3, r3, r2
   26cbe:	08db      	lsrs	r3, r3, #3
   26cc0:	f363 108f 	bfi	r0, r3, #6, #10
   26cc4:	f018 fbdd 	bl	3f482 <log_string_sync>
	err = download_client_disconnect(dl);
   26cc8:	4620      	mov	r0, r4
   26cca:	f7ff ffbf 	bl	26c4c <download_client_disconnect>
	if (err) {
   26cce:	b950      	cbnz	r0, 26ce6 <reconnect+0x3e>
	err = download_client_connect(dl, dl->host, &dl->config);
   26cd0:	f241 0314 	movw	r3, #4116	; 0x1014
   26cd4:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
   26cd8:	58e1      	ldr	r1, [r4, r3]
   26cda:	4620      	mov	r0, r4
}
   26cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = download_client_connect(dl, dl->host, &dl->config);
   26ce0:	321c      	adds	r2, #28
   26ce2:	f7ff bdfd 	b.w	268e0 <download_client_connect>
}
   26ce6:	bd10      	pop	{r4, pc}
   26ce8:	00042fb4 	.word	0x00042fb4
   26cec:	00043014 	.word	0x00043014
   26cf0:	000487c4 	.word	0x000487c4

00026cf4 <download_thread>:
{
   26cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26cf8:	4604      	mov	r4, r0
   26cfa:	4b90      	ldr	r3, [pc, #576]	; (26f3c <download_thread+0x248>)
		LOG_WRN("Peer closed connection, will attempt to re-connect");
   26cfc:	4a90      	ldr	r2, [pc, #576]	; (26f40 <download_thread+0x24c>)
{
   26cfe:	b091      	sub	sp, #68	; 0x44
		LOG_WRN("Peer closed connection, will attempt to re-connect");
   26d00:	1a9b      	subs	r3, r3, r2
   26d02:	f3c3 0bc9 	ubfx	fp, r3, #3, #10
	k_thread_suspend(dl->tid);
   26d06:	f500 5381 	add.w	r3, r0, #4128	; 0x1020
   26d0a:	3304      	adds	r3, #4
   26d0c:	930a      	str	r3, [sp, #40]	; 0x28
   26d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26d10:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_suspend(thread);
   26d12:	f014 fb11 	bl	3b338 <z_impl_k_thread_suspend>
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   26d16:	f504 5580 	add.w	r5, r4, #4096	; 0x1000
   26d1a:	3504      	adds	r5, #4
   26d1c:	682b      	ldr	r3, [r5, #0]
   26d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   26d22:	d30e      	bcc.n	26d42 <download_thread+0x4e>
   26d24:	4987      	ldr	r1, [pc, #540]	; (26f44 <download_thread+0x250>)
   26d26:	f240 139b 	movw	r3, #411	; 0x19b
   26d2a:	4a87      	ldr	r2, [pc, #540]	; (26f48 <download_thread+0x254>)
   26d2c:	4887      	ldr	r0, [pc, #540]	; (26f4c <download_thread+0x258>)
   26d2e:	f018 fb8a 	bl	3f446 <printk>
   26d32:	4887      	ldr	r0, [pc, #540]	; (26f50 <download_thread+0x25c>)
   26d34:	f018 fb87 	bl	3f446 <printk>
   26d38:	f240 119b 	movw	r1, #411	; 0x19b
   26d3c:	4882      	ldr	r0, [pc, #520]	; (26f48 <download_thread+0x254>)
   26d3e:	f018 fb8f 	bl	3f460 <assert_post_action>
		len = recv(dl->fd, dl->buf + dl->offset,
   26d42:	4626      	mov	r6, r4
   26d44:	f856 3b04 	ldr.w	r3, [r6], #4
   26d48:	682f      	ldr	r7, [r5, #0]
   26d4a:	930b      	str	r3, [sp, #44]	; 0x2c
	__ASSERT_NO_MSG(socket_ops);
   26d4c:	4b81      	ldr	r3, [pc, #516]	; (26f54 <download_thread+0x260>)
   26d4e:	eb06 0807 	add.w	r8, r6, r7
   26d52:	681b      	ldr	r3, [r3, #0]
   26d54:	f5c7 5780 	rsb	r7, r7, #4096	; 0x1000
   26d58:	b94b      	cbnz	r3, 26d6e <download_thread+0x7a>
   26d5a:	497f      	ldr	r1, [pc, #508]	; (26f58 <download_thread+0x264>)
   26d5c:	487b      	ldr	r0, [pc, #492]	; (26f4c <download_thread+0x258>)
   26d5e:	2369      	movs	r3, #105	; 0x69
   26d60:	4a7e      	ldr	r2, [pc, #504]	; (26f5c <download_thread+0x268>)
   26d62:	f018 fb70 	bl	3f446 <printk>
   26d66:	2169      	movs	r1, #105	; 0x69
   26d68:	487c      	ldr	r0, [pc, #496]	; (26f5c <download_thread+0x268>)
   26d6a:	f018 fb79 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   26d6e:	4b79      	ldr	r3, [pc, #484]	; (26f54 <download_thread+0x260>)
   26d70:	681b      	ldr	r3, [r3, #0]
   26d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   26d74:	b94b      	cbnz	r3, 26d8a <download_thread+0x96>
   26d76:	497a      	ldr	r1, [pc, #488]	; (26f60 <download_thread+0x26c>)
   26d78:	4874      	ldr	r0, [pc, #464]	; (26f4c <download_thread+0x258>)
   26d7a:	236a      	movs	r3, #106	; 0x6a
   26d7c:	4a77      	ldr	r2, [pc, #476]	; (26f5c <download_thread+0x268>)
   26d7e:	f018 fb62 	bl	3f446 <printk>
   26d82:	216a      	movs	r1, #106	; 0x6a
   26d84:	4875      	ldr	r0, [pc, #468]	; (26f5c <download_thread+0x268>)
   26d86:	f018 fb6b 	bl	3f460 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   26d8a:	4b72      	ldr	r3, [pc, #456]	; (26f54 <download_thread+0x260>)
   26d8c:	463a      	mov	r2, r7
   26d8e:	681b      	ldr	r3, [r3, #0]
   26d90:	4641      	mov	r1, r8
   26d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   26d94:	980b      	ldr	r0, [sp, #44]	; 0x2c
   26d96:	469c      	mov	ip, r3
   26d98:	2300      	movs	r3, #0
   26d9a:	4667      	mov	r7, ip
   26d9c:	47b8      	blx	r7
		if ((len == 0) || (len == -1)) {
   26d9e:	1e43      	subs	r3, r0, #1
   26da0:	3303      	adds	r3, #3
   26da2:	4680      	mov	r8, r0
			if ((dl->offset > 0) && (dl->has_header)) {
   26da4:	682b      	ldr	r3, [r5, #0]
		if ((len == 0) || (len == -1)) {
   26da6:	d974      	bls.n	26e92 <download_thread+0x19e>
			if ((dl->offset > 0) && (dl->has_header)) {
   26da8:	b1db      	cbz	r3, 26de2 <download_thread+0xee>
   26daa:	f241 0310 	movw	r3, #4112	; 0x1010
   26dae:	5ce3      	ldrb	r3, [r4, r3]
   26db0:	b1bb      	cbz	r3, 26de2 <download_thread+0xee>
				rc = fragment_evt_send(dl);
   26db2:	4620      	mov	r0, r4
   26db4:	f7ff fbf6 	bl	265a4 <fragment_evt_send>
				if (rc) {
   26db8:	b198      	cbz	r0, 26de2 <download_thread+0xee>
					LOG_INF("Fragment refused, download "
   26dba:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   26dbe:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   26dc2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   26dc6:	f043 0303 	orr.w	r3, r3, #3
   26dca:	f363 0207 	bfi	r2, r3, #0, #8
   26dce:	b293      	uxth	r3, r2
   26dd0:	f36b 138f 	bfi	r3, fp, #6, #10
   26dd4:	f8ad 3010 	strh.w	r3, [sp, #16]
			LOG_INF("Fragment refused, download stopped.");
   26dd8:	4962      	ldr	r1, [pc, #392]	; (26f64 <download_thread+0x270>)
   26dda:	b298      	uxth	r0, r3
   26ddc:	f018 fb51 	bl	3f482 <log_string_sync>
   26de0:	e795      	b.n	26d0e <download_thread+0x1a>
			if (len == -1) {
   26de2:	f504 5603 	add.w	r6, r4, #8384	; 0x20c0
   26de6:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   26dea:	f106 0618 	add.w	r6, r6, #24
   26dee:	d13b      	bne.n	26e68 <download_thread+0x174>
				LOG_ERR("Error in recv(), errno %d", errno);
   26df0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   26df4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   26df8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   26dfc:	f043 0301 	orr.w	r3, r3, #1
   26e00:	f363 0207 	bfi	r2, r3, #0, #8
   26e04:	b293      	uxth	r3, r2
   26e06:	f36b 138f 	bfi	r3, fp, #6, #10
   26e0a:	f8ad 3014 	strh.w	r3, [sp, #20]
   26e0e:	f018 fd4f 	bl	3f8b0 <__errno>
   26e12:	4955      	ldr	r1, [pc, #340]	; (26f68 <download_thread+0x274>)
   26e14:	6802      	ldr	r2, [r0, #0]
   26e16:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   26e1a:	f018 fb32 	bl	3f482 <log_string_sync>
				rc = error_evt_send(dl, ENOTCONN);
   26e1e:	2180      	movs	r1, #128	; 0x80
				rc = error_evt_send(dl, ECONNRESET);
   26e20:	4630      	mov	r0, r6
   26e22:	f01a fb90 	bl	41546 <error_evt_send.isra.1>
			if (rc) {
   26e26:	2800      	cmp	r0, #0
   26e28:	f47f af71 	bne.w	26d0e <download_thread+0x1a>
			reconnect(dl);
   26e2c:	4620      	mov	r0, r4
   26e2e:	f7ff ff3b 	bl	26ca8 <reconnect>
		dl->offset = 0;
   26e32:	2700      	movs	r7, #0
		dl->has_header = false;
   26e34:	46b8      	mov	r8, r7
   26e36:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
   26e3a:	3610      	adds	r6, #16
		dl->offset = 0;
   26e3c:	602f      	str	r7, [r5, #0]
		rc = get_request_send(dl);
   26e3e:	4620      	mov	r0, r4
		dl->has_header = false;
   26e40:	f886 8000 	strb.w	r8, [r6]
		rc = get_request_send(dl);
   26e44:	f7ff fc58 	bl	266f8 <get_request_send>
		if (rc) {
   26e48:	2800      	cmp	r0, #0
   26e4a:	f43f af67 	beq.w	26d1c <download_thread+0x28>
			rc = error_evt_send(dl, ECONNRESET);
   26e4e:	f504 5003 	add.w	r0, r4, #8384	; 0x20c0
   26e52:	2168      	movs	r1, #104	; 0x68
   26e54:	3018      	adds	r0, #24
   26e56:	f01a fb76 	bl	41546 <error_evt_send.isra.1>
			if (rc) {
   26e5a:	2800      	cmp	r0, #0
   26e5c:	f47f af57 	bne.w	26d0e <download_thread+0x1a>
			reconnect(dl);
   26e60:	4620      	mov	r0, r4
   26e62:	f7ff ff21 	bl	26ca8 <reconnect>
			goto send_again;
   26e66:	e7e9      	b.n	26e3c <download_thread+0x148>
				LOG_WRN("Peer closed connection!");
   26e68:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   26e6c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   26e70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   26e74:	f043 0302 	orr.w	r3, r3, #2
   26e78:	f363 0207 	bfi	r2, r3, #0, #8
   26e7c:	b293      	uxth	r3, r2
   26e7e:	f36b 138f 	bfi	r3, fp, #6, #10
   26e82:	493a      	ldr	r1, [pc, #232]	; (26f6c <download_thread+0x278>)
   26e84:	b298      	uxth	r0, r3
   26e86:	f8ad 3018 	strh.w	r3, [sp, #24]
   26e8a:	f018 fafa 	bl	3f482 <log_string_sync>
				rc = error_evt_send(dl, ECONNRESET);
   26e8e:	2168      	movs	r1, #104	; 0x68
   26e90:	e7c6      	b.n	26e20 <download_thread+0x12c>
		dl->offset += len;
   26e92:	4403      	add	r3, r0
   26e94:	602b      	str	r3, [r5, #0]
		if (!dl->has_header) {
   26e96:	f241 0310 	movw	r3, #4112	; 0x1010
   26e9a:	5ce3      	ldrb	r3, [r4, r3]
   26e9c:	2b00      	cmp	r3, #0
   26e9e:	f040 80b9 	bne.w	27014 <download_thread+0x320>
	p = strstr(client->buf, "\r\n\r\n");
   26ea2:	4933      	ldr	r1, [pc, #204]	; (26f70 <download_thread+0x27c>)
   26ea4:	4630      	mov	r0, r6
   26ea6:	f01a ffae 	bl	41e06 <strstr>
	if (!p) {
   26eaa:	4607      	mov	r7, r0
   26eac:	2800      	cmp	r0, #0
   26eae:	f43f af35 	beq.w	26d1c <download_thread+0x28>
	hdr = p + strlen("\r\n\r\n") - client->buf;
   26eb2:	482f      	ldr	r0, [pc, #188]	; (26f70 <download_thread+0x27c>)
   26eb4:	f7f3 f816 	bl	19ee4 <strlen>
   26eb8:	183b      	adds	r3, r7, r0
   26eba:	1b9f      	subs	r7, r3, r6
	__ASSERT(hdr < sizeof(client->buf), "Buffer overflow");
   26ebc:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
	hdr = p + strlen("\r\n\r\n") - client->buf;
   26ec0:	930b      	str	r3, [sp, #44]	; 0x2c
	__ASSERT(hdr < sizeof(client->buf), "Buffer overflow");
   26ec2:	d30e      	bcc.n	26ee2 <download_thread+0x1ee>
   26ec4:	492b      	ldr	r1, [pc, #172]	; (26f74 <download_thread+0x280>)
   26ec6:	f240 1329 	movw	r3, #297	; 0x129
   26eca:	4a1f      	ldr	r2, [pc, #124]	; (26f48 <download_thread+0x254>)
   26ecc:	481f      	ldr	r0, [pc, #124]	; (26f4c <download_thread+0x258>)
   26ece:	f018 faba 	bl	3f446 <printk>
   26ed2:	481f      	ldr	r0, [pc, #124]	; (26f50 <download_thread+0x25c>)
   26ed4:	f018 fab7 	bl	3f446 <printk>
   26ed8:	f240 1129 	movw	r1, #297	; 0x129
   26edc:	481a      	ldr	r0, [pc, #104]	; (26f48 <download_thread+0x254>)
   26ede:	f018 fabf 	bl	3f460 <assert_post_action>
	if (client->file_size == 0) {
   26ee2:	f241 0308 	movw	r3, #4104	; 0x1008
   26ee6:	58e3      	ldr	r3, [r4, r3]
   26ee8:	2b00      	cmp	r3, #0
   26eea:	d153      	bne.n	26f94 <download_thread+0x2a0>
		p = strstr(client->buf, "Content-Range: bytes");
   26eec:	4922      	ldr	r1, [pc, #136]	; (26f78 <download_thread+0x284>)
   26eee:	4630      	mov	r0, r6
   26ef0:	f01a ff89 	bl	41e06 <strstr>
		if (!p) {
   26ef4:	b990      	cbnz	r0, 26f1c <download_thread+0x228>
			LOG_ERR("Server did not send "
   26ef6:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   26efa:	f043 0301 	orr.w	r3, r3, #1
   26efe:	f363 0a07 	bfi	sl, r3, #0, #8
   26f02:	f36b 1a8f 	bfi	sl, fp, #6, #10
   26f06:	4650      	mov	r0, sl
   26f08:	491c      	ldr	r1, [pc, #112]	; (26f7c <download_thread+0x288>)
			LOG_ERR("Server did not send file size in response");
   26f0a:	f018 faba 	bl	3f482 <log_string_sync>
				error_evt_send(dl, EBADMSG);
   26f0e:	f504 5003 	add.w	r0, r4, #8384	; 0x20c0
   26f12:	214d      	movs	r1, #77	; 0x4d
   26f14:	3018      	adds	r0, #24
   26f16:	f01a fb16 	bl	41546 <error_evt_send.isra.1>
				break;
   26f1a:	e6f8      	b.n	26d0e <download_thread+0x1a>
		p = strstr(p, "/");
   26f1c:	4918      	ldr	r1, [pc, #96]	; (26f80 <download_thread+0x28c>)
   26f1e:	f01a ff72 	bl	41e06 <strstr>
		if (!p) {
   26f22:	bb88      	cbnz	r0, 26f88 <download_thread+0x294>
			LOG_ERR("Server did not send file size in response");
   26f24:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   26f28:	f043 0301 	orr.w	r3, r3, #1
   26f2c:	f363 0907 	bfi	r9, r3, #0, #8
   26f30:	f36b 198f 	bfi	r9, fp, #6, #10
   26f34:	4913      	ldr	r1, [pc, #76]	; (26f84 <download_thread+0x290>)
   26f36:	4648      	mov	r0, r9
   26f38:	e7e7      	b.n	26f0a <download_thread+0x216>
   26f3a:	bf00      	nop
   26f3c:	00043014 	.word	0x00043014
   26f40:	00042fb4 	.word	0x00042fb4
   26f44:	000484ca 	.word	0x000484ca
   26f48:	00048668 	.word	0x00048668
   26f4c:	00045316 	.word	0x00045316
   26f50:	000484e7 	.word	0x000484e7
   26f54:	20023934 	.word	0x20023934
   26f58:	00045442 	.word	0x00045442
   26f5c:	00045419 	.word	0x00045419
   26f60:	00046c8f 	.word	0x00046c8f
   26f64:	000484f9 	.word	0x000484f9
   26f68:	0004851d 	.word	0x0004851d
   26f6c:	00048537 	.word	0x00048537
   26f70:	0004876d 	.word	0x0004876d
   26f74:	0004854f 	.word	0x0004854f
   26f78:	00048569 	.word	0x00048569
   26f7c:	0004857e 	.word	0x0004857e
   26f80:	000485ae 	.word	0x000485ae
   26f84:	000485b0 	.word	0x000485b0
		client->file_size = atoi(p + 1);
   26f88:	3001      	adds	r0, #1
   26f8a:	f01a fcf2 	bl	41972 <atoi>
   26f8e:	f241 0308 	movw	r3, #4104	; 0x1008
   26f92:	50e0      	str	r0, [r4, r3]
	p = strstr(client->buf, "Connection: close");
   26f94:	4957      	ldr	r1, [pc, #348]	; (270f4 <download_thread+0x400>)
   26f96:	4630      	mov	r0, r6
   26f98:	f01a ff35 	bl	41e06 <strstr>
	if (p) {
   26f9c:	b1b0      	cbz	r0, 26fcc <download_thread+0x2d8>
		LOG_WRN("Peer closed connection, will attempt to re-connect");
   26f9e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   26fa2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   26fa6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   26faa:	f043 0302 	orr.w	r3, r3, #2
   26fae:	f363 0207 	bfi	r2, r3, #0, #8
   26fb2:	b293      	uxth	r3, r2
   26fb4:	f36b 138f 	bfi	r3, fp, #6, #10
   26fb8:	b298      	uxth	r0, r3
   26fba:	494f      	ldr	r1, [pc, #316]	; (270f8 <download_thread+0x404>)
   26fbc:	f8ad 3008 	strh.w	r3, [sp, #8]
   26fc0:	f018 fa5f 	bl	3f482 <log_string_sync>
		client->connection_close = true;
   26fc4:	f241 0311 	movw	r3, #4113	; 0x1011
   26fc8:	2201      	movs	r2, #1
   26fca:	54e2      	strb	r2, [r4, r3]
	if (client->offset != hdr) {
   26fcc:	682a      	ldr	r2, [r5, #0]
   26fce:	4297      	cmp	r7, r2
   26fd0:	d060      	beq.n	27094 <download_thread+0x3a0>
		LOG_WRN("Copying %u payload bytes", client->offset - hdr);
   26fd2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   26fd6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   26fda:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   26fde:	f043 0302 	orr.w	r3, r3, #2
   26fe2:	f363 0107 	bfi	r1, r3, #0, #8
   26fe6:	b28b      	uxth	r3, r1
   26fe8:	f36b 138f 	bfi	r3, fp, #6, #10
   26fec:	b298      	uxth	r0, r3
   26fee:	1bd2      	subs	r2, r2, r7
   26ff0:	4942      	ldr	r1, [pc, #264]	; (270fc <download_thread+0x408>)
   26ff2:	f8ad 300c 	strh.w	r3, [sp, #12]
   26ff6:	f018 fa44 	bl	3f482 <log_string_sync>
		memcpy(client->buf, client->buf + hdr, client->offset - hdr);
   26ffa:	682a      	ldr	r2, [r5, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26ffc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   26ffe:	1bd2      	subs	r2, r2, r7
   27000:	4630      	mov	r0, r6
   27002:	f01a fcd6 	bl	419b2 <memcpy>
		client->offset -= hdr;
   27006:	682b      	ldr	r3, [r5, #0]
   27008:	1bdf      	subs	r7, r3, r7
   2700a:	602f      	str	r7, [r5, #0]
			dl->has_header = true;
   2700c:	2301      	movs	r3, #1
   2700e:	f241 0210 	movw	r2, #4112	; 0x1010
   27012:	54a3      	strb	r3, [r4, r2]
		dl->progress += MIN(dl->offset, len);
   27014:	f241 060c 	movw	r6, #4108	; 0x100c
   27018:	6829      	ldr	r1, [r5, #0]
   2701a:	59a2      	ldr	r2, [r4, r6]
   2701c:	f241 0708 	movw	r7, #4104	; 0x1008
   27020:	4541      	cmp	r1, r8
   27022:	bf94      	ite	ls
   27024:	1852      	addls	r2, r2, r1
   27026:	4442      	addhi	r2, r8
		if ((dl->offset < CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE) &&
   27028:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
		dl->progress += MIN(dl->offset, len);
   2702c:	51a2      	str	r2, [r4, r6]
		if ((dl->offset < CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE) &&
   2702e:	59e3      	ldr	r3, [r4, r7]
   27030:	d202      	bcs.n	27038 <download_thread+0x344>
   27032:	429a      	cmp	r2, r3
   27034:	f47f ae72 	bne.w	26d1c <download_thread+0x28>
		LOG_INF("Downloaded %u/%u bytes (%d%%)", dl->progress,
   27038:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   2703c:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   27040:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
   27044:	f041 0103 	orr.w	r1, r1, #3
   27048:	f361 0007 	bfi	r0, r1, #0, #8
   2704c:	b281      	uxth	r1, r0
   2704e:	f36b 118f 	bfi	r1, fp, #6, #10
   27052:	f8ad 101c 	strh.w	r1, [sp, #28]
   27056:	2164      	movs	r1, #100	; 0x64
   27058:	4351      	muls	r1, r2
   2705a:	fbb1 f1f3 	udiv	r1, r1, r3
   2705e:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   27062:	9100      	str	r1, [sp, #0]
   27064:	4926      	ldr	r1, [pc, #152]	; (27100 <download_thread+0x40c>)
   27066:	f018 fa0c 	bl	3f482 <log_string_sync>
		rc = fragment_evt_send(dl);
   2706a:	4620      	mov	r0, r4
   2706c:	f7ff fa9a 	bl	265a4 <fragment_evt_send>
		if (rc) {
   27070:	4680      	mov	r8, r0
   27072:	b190      	cbz	r0, 2709a <download_thread+0x3a6>
			LOG_INF("Fragment refused, download stopped.");
   27074:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   27078:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2707c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   27080:	f043 0303 	orr.w	r3, r3, #3
   27084:	f363 0207 	bfi	r2, r3, #0, #8
   27088:	b293      	uxth	r3, r2
   2708a:	f36b 138f 	bfi	r3, fp, #6, #10
   2708e:	f8ad 3020 	strh.w	r3, [sp, #32]
   27092:	e6a1      	b.n	26dd8 <download_thread+0xe4>
		client->offset = 0;
   27094:	2300      	movs	r3, #0
   27096:	602b      	str	r3, [r5, #0]
			if (rc > 0) {
   27098:	e7b8      	b.n	2700c <download_thread+0x318>
		if (dl->progress == dl->file_size) {
   2709a:	59a2      	ldr	r2, [r4, r6]
   2709c:	59e3      	ldr	r3, [r4, r7]
   2709e:	429a      	cmp	r2, r3
   270a0:	d11f      	bne.n	270e2 <download_thread+0x3ee>
			LOG_INF("Download complete");
   270a2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   270a6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   270aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   270ae:	f043 0303 	orr.w	r3, r3, #3
   270b2:	f363 0207 	bfi	r2, r3, #0, #8
   270b6:	b293      	uxth	r3, r2
   270b8:	f36b 138f 	bfi	r3, fp, #6, #10
   270bc:	b298      	uxth	r0, r3
   270be:	4911      	ldr	r1, [pc, #68]	; (27104 <download_thread+0x410>)
   270c0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
   270c4:	f018 f9dd 	bl	3f482 <log_string_sync>
			const struct download_client_evt evt = {
   270c8:	2302      	movs	r3, #2
   270ca:	e9cd 880d 	strd	r8, r8, [sp, #52]	; 0x34
   270ce:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
			dl->callback(&evt);
   270d2:	f242 03d8 	movw	r3, #8408	; 0x20d8
			const struct download_client_evt evt = {
   270d6:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
			dl->callback(&evt);
   270da:	58e3      	ldr	r3, [r4, r3]
   270dc:	a80d      	add	r0, sp, #52	; 0x34
   270de:	4798      	blx	r3
			break;
   270e0:	e615      	b.n	26d0e <download_thread+0x1a>
		if (dl->connection_close) {
   270e2:	f241 0311 	movw	r3, #4113	; 0x1011
   270e6:	5ce2      	ldrb	r2, [r4, r3]
   270e8:	2a00      	cmp	r2, #0
   270ea:	f43f aea2 	beq.w	26e32 <download_thread+0x13e>
			dl->connection_close = false;
   270ee:	54e0      	strb	r0, [r4, r3]
   270f0:	e69c      	b.n	26e2c <download_thread+0x138>
   270f2:	bf00      	nop
   270f4:	000485da 	.word	0x000485da
   270f8:	000485ec 	.word	0x000485ec
   270fc:	0004861f 	.word	0x0004861f
   27100:	00048638 	.word	0x00048638
   27104:	00048656 	.word	0x00048656

00027108 <download_client_start>:

int download_client_start(struct download_client *client, const char *file,
			  size_t from)
{
   27108:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   2710a:	4604      	mov	r4, r0
   2710c:	b390      	cbz	r0, 27174 <download_client_start+0x6c>
   2710e:	6803      	ldr	r3, [r0, #0]
   27110:	2b00      	cmp	r3, #0
   27112:	db2f      	blt.n	27174 <download_client_start+0x6c>
		return -EINVAL;
	}

	client->file = file;
   27114:	f241 0318 	movw	r3, #4120	; 0x1018
	client->file_size = 0;
	client->progress = from;
   27118:	f241 060c 	movw	r6, #4108	; 0x100c
	client->file = file;
   2711c:	50c1      	str	r1, [r0, r3]
	client->file_size = 0;
   2711e:	2300      	movs	r3, #0
   27120:	f241 0008 	movw	r0, #4104	; 0x1008
   27124:	5023      	str	r3, [r4, r0]
	client->progress = from;
   27126:	51a2      	str	r2, [r4, r6]

	client->offset = 0;
   27128:	f241 0204 	movw	r2, #4100	; 0x1004
   2712c:	50a3      	str	r3, [r4, r2]
	client->has_header = false;
   2712e:	f241 0210 	movw	r2, #4112	; 0x1010

	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   27132:	f04f 0500 	mov.w	r5, #0
	client->has_header = false;
   27136:	54a3      	strb	r3, [r4, r2]
	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   27138:	2303      	movs	r3, #3
   2713a:	4a10      	ldr	r2, [pc, #64]	; (2717c <download_client_start+0x74>)
   2713c:	f363 0507 	bfi	r5, r3, #0, #8
   27140:	4b0f      	ldr	r3, [pc, #60]	; (27180 <download_client_start+0x78>)
   27142:	4608      	mov	r0, r1
   27144:	1a9b      	subs	r3, r3, r2
   27146:	08db      	lsrs	r3, r3, #3
   27148:	f363 158f 	bfi	r5, r3, #6, #10
   2714c:	f018 f9ab 	bl	3f4a6 <log_strdup>
   27150:	59a3      	ldr	r3, [r4, r6]
   27152:	4602      	mov	r2, r0
   27154:	490b      	ldr	r1, [pc, #44]	; (27184 <download_client_start+0x7c>)
   27156:	4628      	mov	r0, r5
   27158:	f018 f993 	bl	3f482 <log_string_sync>
		client->progress);

	err = get_request_send(client);
   2715c:	4620      	mov	r0, r4
   2715e:	f7ff facb 	bl	266f8 <get_request_send>
	if (err) {
   27162:	4605      	mov	r5, r0
   27164:	b920      	cbnz	r0, 27170 <download_client_start+0x68>
		return err;
	}

	/* Let the thread run */
	k_thread_resume(client->tid);
   27166:	f241 0324 	movw	r3, #4132	; 0x1024
   2716a:	58e0      	ldr	r0, [r4, r3]
	z_impl_k_thread_resume(thread);
   2716c:	f014 f936 	bl	3b3dc <z_impl_k_thread_resume>

	return 0;
}
   27170:	4628      	mov	r0, r5
   27172:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   27174:	f06f 0515 	mvn.w	r5, #21
   27178:	e7fa      	b.n	27170 <download_client_start+0x68>
   2717a:	bf00      	nop
   2717c:	00042fb4 	.word	0x00042fb4
   27180:	00043014 	.word	0x00043014
   27184:	000484b5 	.word	0x000484b5

00027188 <download_with_offset>:

	return 0;
}

static void download_with_offset(struct k_work *unused)
{
   27188:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int offset;
	int err = dfu_target_offset_get(&offset);
   2718a:	a801      	add	r0, sp, #4
   2718c:	f000 ff40 	bl	28010 <dfu_target_offset_get>

	err = download_client_start(&dlc, dlc.file, offset);
   27190:	f241 0318 	movw	r3, #4120	; 0x1018
   27194:	4812      	ldr	r0, [pc, #72]	; (271e0 <download_with_offset+0x58>)
   27196:	9a01      	ldr	r2, [sp, #4]
   27198:	58c1      	ldr	r1, [r0, r3]
   2719a:	f7ff ffb5 	bl	27108 <download_client_start>

	LOG_INF("Downloading from offset: 0x%x", offset);
   2719e:	2303      	movs	r3, #3
	err = download_client_start(&dlc, dlc.file, offset);
   271a0:	4605      	mov	r5, r0
	LOG_INF("Downloading from offset: 0x%x", offset);
   271a2:	f04f 0000 	mov.w	r0, #0
   271a6:	4c0f      	ldr	r4, [pc, #60]	; (271e4 <download_with_offset+0x5c>)
   271a8:	f363 0007 	bfi	r0, r3, #0, #8
   271ac:	4b0e      	ldr	r3, [pc, #56]	; (271e8 <download_with_offset+0x60>)
   271ae:	9a01      	ldr	r2, [sp, #4]
   271b0:	1ae4      	subs	r4, r4, r3
   271b2:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   271b6:	f364 108f 	bfi	r0, r4, #6, #10
   271ba:	490c      	ldr	r1, [pc, #48]	; (271ec <download_with_offset+0x64>)
   271bc:	f018 f961 	bl	3f482 <log_string_sync>
	if (err != 0) {
   271c0:	b15d      	cbz	r5, 271da <download_with_offset+0x52>
		LOG_ERR("%s failed with error %d", __func__, err);
   271c2:	2301      	movs	r3, #1
   271c4:	f04f 0000 	mov.w	r0, #0
   271c8:	f363 0007 	bfi	r0, r3, #0, #8
   271cc:	f364 108f 	bfi	r0, r4, #6, #10
   271d0:	462b      	mov	r3, r5
   271d2:	4a07      	ldr	r2, [pc, #28]	; (271f0 <download_with_offset+0x68>)
   271d4:	4907      	ldr	r1, [pc, #28]	; (271f4 <download_with_offset+0x6c>)
   271d6:	f018 f954 	bl	3f482 <log_string_sync>
	}
}
   271da:	b003      	add	sp, #12
   271dc:	bd30      	pop	{r4, r5, pc}
   271de:	bf00      	nop
   271e0:	20020950 	.word	0x20020950
   271e4:	0004301c 	.word	0x0004301c
   271e8:	00042fb4 	.word	0x00042fb4
   271ec:	000488eb 	.word	0x000488eb
   271f0:	000487e3 	.word	0x000487e3
   271f4:	00048909 	.word	0x00048909

000271f8 <download_client_callback>:
{
   271f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (event == NULL) {
   271fa:	4605      	mov	r5, r0
   271fc:	2800      	cmp	r0, #0
   271fe:	f000 80dc 	beq.w	273ba <download_client_callback+0x1c2>
	switch (event->id) {
   27202:	7803      	ldrb	r3, [r0, #0]
   27204:	2b01      	cmp	r3, #1
   27206:	f000 8097 	beq.w	27338 <download_client_callback+0x140>
   2720a:	b11b      	cbz	r3, 27214 <download_client_callback+0x1c>
   2720c:	2b02      	cmp	r3, #2
   2720e:	d06f      	beq.n	272f0 <download_client_callback+0xf8>
	return 0;
   27210:	2400      	movs	r4, #0
			socket_retries_left--;
   27212:	e02c      	b.n	2726e <download_client_callback+0x76>
		if (first_fragment) {
   27214:	4e6a      	ldr	r6, [pc, #424]	; (273c0 <download_client_callback+0x1c8>)
   27216:	7833      	ldrb	r3, [r6, #0]
   27218:	2b00      	cmp	r3, #0
   2721a:	d04e      	beq.n	272ba <download_client_callback+0xc2>
			err = download_client_file_size_get(&dlc, &file_size);
   2721c:	4669      	mov	r1, sp
   2721e:	4869      	ldr	r0, [pc, #420]	; (273c4 <download_client_callback+0x1cc>)
   27220:	f01a f9a0 	bl	41564 <download_client_file_size_get>
			if (err != 0) {
   27224:	4604      	mov	r4, r0
   27226:	b120      	cbz	r0, 27232 <download_client_callback+0x3a>
			callback(FOTA_DOWNLOAD_EVT_ERROR);
   27228:	4b67      	ldr	r3, [pc, #412]	; (273c8 <download_client_callback+0x1d0>)
   2722a:	681b      	ldr	r3, [r3, #0]
   2722c:	2001      	movs	r0, #1
   2722e:	4798      	blx	r3
			return err;
   27230:	e01d      	b.n	2726e <download_client_callback+0x76>
			first_fragment = false;
   27232:	7030      	strb	r0, [r6, #0]
			int img_type = dfu_target_img_type(event->fragment.buf,
   27234:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   27238:	f000 fe8e 	bl	27f58 <dfu_target_img_type>
			err = dfu_target_init(img_type, file_size);
   2723c:	9900      	ldr	r1, [sp, #0]
   2723e:	f000 feb3 	bl	27fa8 <dfu_target_init>
			if ((err < 0) && (err != -EBUSY)) {
   27242:	4e62      	ldr	r6, [pc, #392]	; (273cc <download_client_callback+0x1d4>)
   27244:	4b62      	ldr	r3, [pc, #392]	; (273d0 <download_client_callback+0x1d8>)
   27246:	1e04      	subs	r4, r0, #0
   27248:	eba6 0603 	sub.w	r6, r6, r3
   2724c:	f3c6 06c9 	ubfx	r6, r6, #3, #10
   27250:	da10      	bge.n	27274 <download_client_callback+0x7c>
   27252:	f114 0f10 	cmn.w	r4, #16
   27256:	d00d      	beq.n	27274 <download_client_callback+0x7c>
				LOG_ERR("dfu_target_init error %d", err);
   27258:	f04f 0000 	mov.w	r0, #0
   2725c:	2301      	movs	r3, #1
   2725e:	f363 0007 	bfi	r0, r3, #0, #8
   27262:	f366 108f 	bfi	r0, r6, #6, #10
   27266:	4622      	mov	r2, r4
   27268:	495a      	ldr	r1, [pc, #360]	; (273d4 <download_client_callback+0x1dc>)
   2726a:	f018 f90a 	bl	3f482 <log_string_sync>
}
   2726e:	4620      	mov	r0, r4
   27270:	b003      	add	sp, #12
   27272:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = dfu_target_offset_get(&offset);
   27274:	a801      	add	r0, sp, #4
   27276:	f000 fecb 	bl	28010 <dfu_target_offset_get>
			LOG_INF("Offset: 0x%x", offset);
   2727a:	2303      	movs	r3, #3
   2727c:	f04f 0000 	mov.w	r0, #0
   27280:	f363 0007 	bfi	r0, r3, #0, #8
   27284:	f366 108f 	bfi	r0, r6, #6, #10
   27288:	9a01      	ldr	r2, [sp, #4]
   2728a:	4953      	ldr	r1, [pc, #332]	; (273d8 <download_client_callback+0x1e0>)
   2728c:	f018 f8f9 	bl	3f482 <log_string_sync>
			if (offset != 0) {
   27290:	9b01      	ldr	r3, [sp, #4]
   27292:	b193      	cbz	r3, 272ba <download_client_callback+0xc2>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   27294:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   27298:	4950      	ldr	r1, [pc, #320]	; (273dc <download_client_callback+0x1e4>)
   2729a:	4851      	ldr	r0, [pc, #324]	; (273e0 <download_client_callback+0x1e8>)
   2729c:	f014 f948 	bl	3b530 <k_delayed_work_submit_to_queue>
				LOG_INF("Refuse fragment, restart with offset");
   272a0:	2303      	movs	r3, #3
   272a2:	f04f 0000 	mov.w	r0, #0
   272a6:	f363 0007 	bfi	r0, r3, #0, #8
   272aa:	f366 108f 	bfi	r0, r6, #6, #10
   272ae:	494d      	ldr	r1, [pc, #308]	; (273e4 <download_client_callback+0x1ec>)
   272b0:	f018 f8e7 	bl	3f482 <log_string_sync>
				return -1;
   272b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   272b8:	e7d9      	b.n	2726e <download_client_callback+0x76>
		err = dfu_target_write(event->fragment.buf,
   272ba:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   272be:	f000 feb1 	bl	28024 <dfu_target_write>
		if (err != 0) {
   272c2:	4604      	mov	r4, r0
   272c4:	2800      	cmp	r0, #0
   272c6:	d0d2      	beq.n	2726e <download_client_callback+0x76>
			LOG_ERR("dfu_target_write error %d", err);
   272c8:	2301      	movs	r3, #1
   272ca:	f04f 0000 	mov.w	r0, #0
   272ce:	4a40      	ldr	r2, [pc, #256]	; (273d0 <download_client_callback+0x1d8>)
   272d0:	f363 0007 	bfi	r0, r3, #0, #8
   272d4:	4b3d      	ldr	r3, [pc, #244]	; (273cc <download_client_callback+0x1d4>)
   272d6:	4944      	ldr	r1, [pc, #272]	; (273e8 <download_client_callback+0x1f0>)
   272d8:	1a9b      	subs	r3, r3, r2
   272da:	08db      	lsrs	r3, r3, #3
   272dc:	f363 108f 	bfi	r0, r3, #6, #10
   272e0:	4622      	mov	r2, r4
   272e2:	f018 f8ce 	bl	3f482 <log_string_sync>
			err = download_client_disconnect(&dlc);
   272e6:	4837      	ldr	r0, [pc, #220]	; (273c4 <download_client_callback+0x1cc>)
   272e8:	f7ff fcb0 	bl	26c4c <download_client_disconnect>
   272ec:	4604      	mov	r4, r0
   272ee:	e79b      	b.n	27228 <download_client_callback+0x30>
		err = dfu_target_done(true);
   272f0:	2001      	movs	r0, #1
   272f2:	f000 fea3 	bl	2803c <dfu_target_done>
		if (err != 0) {
   272f6:	4d34      	ldr	r5, [pc, #208]	; (273c8 <download_client_callback+0x1d0>)
   272f8:	4604      	mov	r4, r0
   272fa:	b180      	cbz	r0, 2731e <download_client_callback+0x126>
			LOG_ERR("dfu_target_done error: %d", err);
   272fc:	2301      	movs	r3, #1
   272fe:	f04f 0000 	mov.w	r0, #0
   27302:	4a33      	ldr	r2, [pc, #204]	; (273d0 <download_client_callback+0x1d8>)
   27304:	f363 0007 	bfi	r0, r3, #0, #8
   27308:	4b30      	ldr	r3, [pc, #192]	; (273cc <download_client_callback+0x1d4>)
   2730a:	4938      	ldr	r1, [pc, #224]	; (273ec <download_client_callback+0x1f4>)
   2730c:	1a9b      	subs	r3, r3, r2
   2730e:	08db      	lsrs	r3, r3, #3
   27310:	f363 108f 	bfi	r0, r3, #6, #10
   27314:	4622      	mov	r2, r4
   27316:	f018 f8b4 	bl	3f482 <log_string_sync>
			callback(FOTA_DOWNLOAD_EVT_ERROR);
   2731a:	682b      	ldr	r3, [r5, #0]
   2731c:	e786      	b.n	2722c <download_client_callback+0x34>
		err = download_client_disconnect(&dlc);
   2731e:	4829      	ldr	r0, [pc, #164]	; (273c4 <download_client_callback+0x1cc>)
   27320:	f7ff fc94 	bl	26c4c <download_client_disconnect>
			callback(FOTA_DOWNLOAD_EVT_ERROR);
   27324:	682b      	ldr	r3, [r5, #0]
		if (err != 0) {
   27326:	4604      	mov	r4, r0
   27328:	2800      	cmp	r0, #0
   2732a:	f47f af7f 	bne.w	2722c <download_client_callback+0x34>
		callback(FOTA_DOWNLOAD_EVT_FINISHED);
   2732e:	4798      	blx	r3
		first_fragment = true;
   27330:	2201      	movs	r2, #1
   27332:	4b23      	ldr	r3, [pc, #140]	; (273c0 <download_client_callback+0x1c8>)
   27334:	701a      	strb	r2, [r3, #0]
		break;
   27336:	e79a      	b.n	2726e <download_client_callback+0x76>
		if ((socket_retries_left) && ((event->error == -ENOTCONN) ||
   27338:	4e2d      	ldr	r6, [pc, #180]	; (273f0 <download_client_callback+0x1f8>)
   2733a:	4c24      	ldr	r4, [pc, #144]	; (273cc <download_client_callback+0x1d4>)
   2733c:	6832      	ldr	r2, [r6, #0]
   2733e:	4f24      	ldr	r7, [pc, #144]	; (273d0 <download_client_callback+0x1d8>)
   27340:	b1aa      	cbz	r2, 2736e <download_client_callback+0x176>
   27342:	6843      	ldr	r3, [r0, #4]
   27344:	f113 0f80 	cmn.w	r3, #128	; 0x80
   27348:	d001      	beq.n	2734e <download_client_callback+0x156>
   2734a:	3368      	adds	r3, #104	; 0x68
   2734c:	d10f      	bne.n	2736e <download_client_callback+0x176>
			LOG_WRN("Download socket error. %d retries left...",
   2734e:	2302      	movs	r3, #2
   27350:	f04f 0000 	mov.w	r0, #0
   27354:	1be4      	subs	r4, r4, r7
   27356:	f363 0007 	bfi	r0, r3, #0, #8
   2735a:	08e4      	lsrs	r4, r4, #3
   2735c:	f364 108f 	bfi	r0, r4, #6, #10
   27360:	4924      	ldr	r1, [pc, #144]	; (273f4 <download_client_callback+0x1fc>)
   27362:	f018 f88e 	bl	3f482 <log_string_sync>
			socket_retries_left--;
   27366:	6833      	ldr	r3, [r6, #0]
   27368:	3b01      	subs	r3, #1
   2736a:	6033      	str	r3, [r6, #0]
   2736c:	e750      	b.n	27210 <download_client_callback+0x18>
			download_client_disconnect(&dlc);
   2736e:	4815      	ldr	r0, [pc, #84]	; (273c4 <download_client_callback+0x1cc>)
   27370:	f7ff fc6c 	bl	26c4c <download_client_disconnect>
			LOG_ERR("Download client error");
   27374:	2301      	movs	r3, #1
   27376:	f04f 0000 	mov.w	r0, #0
   2737a:	1be4      	subs	r4, r4, r7
   2737c:	f363 0007 	bfi	r0, r3, #0, #8
   27380:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   27384:	f364 108f 	bfi	r0, r4, #6, #10
   27388:	491b      	ldr	r1, [pc, #108]	; (273f8 <download_client_callback+0x200>)
   2738a:	f018 f87a 	bl	3f482 <log_string_sync>
			err = dfu_target_done(false);
   2738e:	2000      	movs	r0, #0
   27390:	f000 fe54 	bl	2803c <dfu_target_done>
			if (err != 0) {
   27394:	b148      	cbz	r0, 273aa <download_client_callback+0x1b2>
				LOG_ERR("Unable to deinitialze resources "
   27396:	f04f 0000 	mov.w	r0, #0
   2739a:	2301      	movs	r3, #1
   2739c:	f363 0007 	bfi	r0, r3, #0, #8
   273a0:	f364 108f 	bfi	r0, r4, #6, #10
   273a4:	4915      	ldr	r1, [pc, #84]	; (273fc <download_client_callback+0x204>)
   273a6:	f018 f86c 	bl	3f482 <log_string_sync>
			first_fragment = true;
   273aa:	2001      	movs	r0, #1
   273ac:	4b04      	ldr	r3, [pc, #16]	; (273c0 <download_client_callback+0x1c8>)
   273ae:	7018      	strb	r0, [r3, #0]
			callback(FOTA_DOWNLOAD_EVT_ERROR);
   273b0:	4b05      	ldr	r3, [pc, #20]	; (273c8 <download_client_callback+0x1d0>)
   273b2:	681b      	ldr	r3, [r3, #0]
   273b4:	4798      	blx	r3
			return event->error;
   273b6:	686c      	ldr	r4, [r5, #4]
   273b8:	e759      	b.n	2726e <download_client_callback+0x76>
		return -EINVAL;
   273ba:	f06f 0415 	mvn.w	r4, #21
   273be:	e756      	b.n	2726e <download_client_callback+0x76>
   273c0:	20031e65 	.word	0x20031e65
   273c4:	20020950 	.word	0x20020950
   273c8:	20024664 	.word	0x20024664
   273cc:	0004301c 	.word	0x0004301c
   273d0:	00042fb4 	.word	0x00042fb4
   273d4:	000487f8 	.word	0x000487f8
   273d8:	00048811 	.word	0x00048811
   273dc:	20024668 	.word	0x20024668
   273e0:	2002a220 	.word	0x2002a220
   273e4:	0004881e 	.word	0x0004881e
   273e8:	00048843 	.word	0x00048843
   273ec:	0004885d 	.word	0x0004885d
   273f0:	20024688 	.word	0x20024688
   273f4:	00048877 	.word	0x00048877
   273f8:	000488a1 	.word	0x000488a1
   273fc:	000488b7 	.word	0x000488b7

00027400 <fota_download_start>:

int fota_download_start(char *host, char *file)
{
   27400:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err = -1;

	struct download_client_cfg config = {
   27402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27406:	2200      	movs	r2, #0
{
   27408:	460d      	mov	r5, r1
	struct download_client_cfg config = {
   2740a:	e9cd 3200 	strd	r3, r2, [sp]
		.sec_tag = -1, /* HTTP */
	};

	if (host == NULL || file == NULL || callback == NULL) {
   2740e:	4601      	mov	r1, r0
   27410:	b1c8      	cbz	r0, 27446 <fota_download_start+0x46>
   27412:	b1c5      	cbz	r5, 27446 <fota_download_start+0x46>
   27414:	4b0d      	ldr	r3, [pc, #52]	; (2744c <fota_download_start+0x4c>)
   27416:	681b      	ldr	r3, [r3, #0]
   27418:	b1ab      	cbz	r3, 27446 <fota_download_start+0x46>
		return -EINVAL;
	}

	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   2741a:	2202      	movs	r2, #2
   2741c:	4b0c      	ldr	r3, [pc, #48]	; (27450 <fota_download_start+0x50>)
		LOG_INF("B1 update, selected file:\n%s", update);
		file = update;
	}
#endif /* PM_S1_ADDRESS */

	err = download_client_connect(&dlc, host, &config);
   2741e:	480d      	ldr	r0, [pc, #52]	; (27454 <fota_download_start+0x54>)
	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   27420:	601a      	str	r2, [r3, #0]
	err = download_client_connect(&dlc, host, &config);
   27422:	466a      	mov	r2, sp
   27424:	f7ff fa5c 	bl	268e0 <download_client_connect>
	if (err != 0) {
   27428:	4604      	mov	r4, r0
   2742a:	b948      	cbnz	r0, 27440 <fota_download_start+0x40>
		return err;
	}


	err = download_client_start(&dlc, file, 0);
   2742c:	4602      	mov	r2, r0
   2742e:	4629      	mov	r1, r5
   27430:	4808      	ldr	r0, [pc, #32]	; (27454 <fota_download_start+0x54>)
   27432:	f7ff fe69 	bl	27108 <download_client_start>
	if (err != 0) {
   27436:	4604      	mov	r4, r0
   27438:	b110      	cbz	r0, 27440 <fota_download_start+0x40>
		download_client_disconnect(&dlc);
   2743a:	4806      	ldr	r0, [pc, #24]	; (27454 <fota_download_start+0x54>)
   2743c:	f7ff fc06 	bl	26c4c <download_client_disconnect>
		return err;
	}

	return 0;
}
   27440:	4620      	mov	r0, r4
   27442:	b003      	add	sp, #12
   27444:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   27446:	f06f 0415 	mvn.w	r4, #21
   2744a:	e7f9      	b.n	27440 <fota_download_start+0x40>
   2744c:	20024664 	.word	0x20024664
   27450:	20024688 	.word	0x20024688
   27454:	20020950 	.word	0x20020950

00027458 <fota_download_init>:

int fota_download_init(fota_download_callback_t client_callback)
{
   27458:	b508      	push	{r3, lr}
	if (client_callback == NULL) {
   2745a:	b158      	cbz	r0, 27474 <fota_download_init+0x1c>
		return -EINVAL;
	}

	callback = client_callback;
   2745c:	4b07      	ldr	r3, [pc, #28]	; (2747c <fota_download_init+0x24>)

	k_delayed_work_init(&dlc_with_offset_work, download_with_offset);
   2745e:	4908      	ldr	r1, [pc, #32]	; (27480 <fota_download_init+0x28>)
	callback = client_callback;
   27460:	6018      	str	r0, [r3, #0]
	k_delayed_work_init(&dlc_with_offset_work, download_with_offset);
   27462:	4808      	ldr	r0, [pc, #32]	; (27484 <fota_download_init+0x2c>)
   27464:	f01a fa13 	bl	4188e <k_delayed_work_init>
	if (err != 0) {
		return err;
	}

	return 0;
}
   27468:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	int err = download_client_init(&dlc, download_client_callback);
   2746c:	4906      	ldr	r1, [pc, #24]	; (27488 <fota_download_init+0x30>)
   2746e:	4807      	ldr	r0, [pc, #28]	; (2748c <fota_download_init+0x34>)
   27470:	f7ff ba0c 	b.w	2688c <download_client_init>
}
   27474:	f06f 0015 	mvn.w	r0, #21
   27478:	bd08      	pop	{r3, pc}
   2747a:	bf00      	nop
   2747c:	20024664 	.word	0x20024664
   27480:	00027189 	.word	0x00027189
   27484:	20024668 	.word	0x20024668
   27488:	000271f9 	.word	0x000271f9
   2748c:	20020950 	.word	0x20020950

00027490 <construct_topic>:
 */
#define TOPIC_TEMPLATE "$aws/things/%s/jobs/%s%s%s%s"
static int construct_topic(const u8_t *client_id, const u8_t *job_id,
			   const struct topic_conf *conf, u8_t *out_buf,
			   struct mqtt_topic *topic, bool remove_suffix)
{
   27490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   27494:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   27496:	4688      	mov	r8, r1
   27498:	4615      	mov	r5, r2
   2749a:	461f      	mov	r7, r3
	if (client_id == NULL || job_id == NULL || conf == NULL ||
   2749c:	4681      	mov	r9, r0
   2749e:	2800      	cmp	r0, #0
   274a0:	d05d      	beq.n	2755e <construct_topic+0xce>
   274a2:	2900      	cmp	r1, #0
   274a4:	d05b      	beq.n	2755e <construct_topic+0xce>
   274a6:	6853      	ldr	r3, [r2, #4]
   274a8:	2b00      	cmp	r3, #0
   274aa:	d058      	beq.n	2755e <construct_topic+0xce>
	    conf->name == NULL || conf->suffix == NULL ||
   274ac:	6894      	ldr	r4, [r2, #8]
   274ae:	2c00      	cmp	r4, #0
   274b0:	d055      	beq.n	2755e <construct_topic+0xce>
   274b2:	2f00      	cmp	r7, #0
   274b4:	d053      	beq.n	2755e <construct_topic+0xce>
	    out_buf == NULL || topic == NULL) {
		return -EINVAL;
	}

	const char *suffix = remove_suffix  ? "" : conf->suffix;
   274b6:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   274ba:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 2757c <construct_topic+0xec>
	const char *slash_after_job_id = strlen(job_id) > 0 ? "/" : "";
   274be:	4608      	mov	r0, r1
	const char *suffix = remove_suffix  ? "" : conf->suffix;
   274c0:	2b00      	cmp	r3, #0
   274c2:	bf18      	it	ne
   274c4:	4654      	movne	r4, sl
	const char *slash_after_job_id = strlen(job_id) > 0 ? "/" : "";
   274c6:	f7f2 fd0d 	bl	19ee4 <strlen>
   274ca:	4a26      	ldr	r2, [pc, #152]	; (27564 <construct_topic+0xd4>)
	int ret = snprintf(out_buf, AWS_JOBS_TOPIC_MAX_LEN, TOPIC_TEMPLATE,
   274cc:	686b      	ldr	r3, [r5, #4]
	const char *slash_after_job_id = strlen(job_id) > 0 ? "/" : "";
   274ce:	2800      	cmp	r0, #0
   274d0:	bf14      	ite	ne
   274d2:	4610      	movne	r0, r2
   274d4:	4650      	moveq	r0, sl
	int ret = snprintf(out_buf, AWS_JOBS_TOPIC_MAX_LEN, TOPIC_TEMPLATE,
   274d6:	9403      	str	r4, [sp, #12]
   274d8:	e9cd 0301 	strd	r0, r3, [sp, #4]
   274dc:	f8cd 8000 	str.w	r8, [sp]
   274e0:	464b      	mov	r3, r9
   274e2:	4a21      	ldr	r2, [pc, #132]	; (27568 <construct_topic+0xd8>)
   274e4:	2195      	movs	r1, #149	; 0x95
   274e6:	4638      	mov	r0, r7
   274e8:	f016 f802 	bl	3d4f0 <sniprintf>
			client_id, job_id, slash_after_job_id, conf->name,
			suffix);

	if (ret >= AWS_JOBS_TOPIC_MAX_LEN) {
   274ec:	2894      	cmp	r0, #148	; 0x94
	int ret = snprintf(out_buf, AWS_JOBS_TOPIC_MAX_LEN, TOPIC_TEMPLATE,
   274ee:	4604      	mov	r4, r0
	if (ret >= AWS_JOBS_TOPIC_MAX_LEN) {
   274f0:	dd18      	ble.n	27524 <construct_topic+0x94>
		LOG_ERR("Unable to fit formated string into to allocate "
   274f2:	2301      	movs	r3, #1
   274f4:	f04f 0400 	mov.w	r4, #0
   274f8:	4a1c      	ldr	r2, [pc, #112]	; (2756c <construct_topic+0xdc>)
   274fa:	f363 0407 	bfi	r4, r3, #0, #8
   274fe:	4b1c      	ldr	r3, [pc, #112]	; (27570 <construct_topic+0xe0>)
   27500:	6868      	ldr	r0, [r5, #4]
   27502:	1a9b      	subs	r3, r3, r2
   27504:	08db      	lsrs	r3, r3, #3
   27506:	f363 148f 	bfi	r4, r3, #6, #10
   2750a:	f017 ffcc 	bl	3f4a6 <log_strdup>
   2750e:	4919      	ldr	r1, [pc, #100]	; (27574 <construct_topic+0xe4>)
   27510:	4602      	mov	r2, r0
   27512:	4620      	mov	r0, r4
   27514:	f017 ffb5 	bl	3f482 <log_string_sync>
			"memory for %s", log_strdup(conf->name));
		return -ENOMEM;
   27518:	f06f 040b 	mvn.w	r4, #11

	topic->topic.size = ret;
	topic->topic.utf8 = out_buf;
	topic->qos = MQTT_QOS_1_AT_LEAST_ONCE;
	return 0;
}
   2751c:	4620      	mov	r0, r4
   2751e:	b004      	add	sp, #16
   27520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (ret < 0) {
   27524:	2800      	cmp	r0, #0
   27526:	da14      	bge.n	27552 <construct_topic+0xc2>
		LOG_ERR("Output error for %s was encountered with return value "
   27528:	2301      	movs	r3, #1
   2752a:	f04f 0600 	mov.w	r6, #0
   2752e:	4a0f      	ldr	r2, [pc, #60]	; (2756c <construct_topic+0xdc>)
   27530:	f363 0607 	bfi	r6, r3, #0, #8
   27534:	4b0e      	ldr	r3, [pc, #56]	; (27570 <construct_topic+0xe0>)
   27536:	6868      	ldr	r0, [r5, #4]
   27538:	1a9b      	subs	r3, r3, r2
   2753a:	08db      	lsrs	r3, r3, #3
   2753c:	f363 168f 	bfi	r6, r3, #6, #10
   27540:	f017 ffb1 	bl	3f4a6 <log_strdup>
   27544:	4623      	mov	r3, r4
   27546:	4602      	mov	r2, r0
   27548:	490b      	ldr	r1, [pc, #44]	; (27578 <construct_topic+0xe8>)
   2754a:	4630      	mov	r0, r6
   2754c:	f017 ff99 	bl	3f482 <log_string_sync>
		return ret;
   27550:	e7e4      	b.n	2751c <construct_topic+0x8c>
	topic->qos = MQTT_QOS_1_AT_LEAST_ONCE;
   27552:	2301      	movs	r3, #1
	topic->topic.utf8 = out_buf;
   27554:	e9c6 7000 	strd	r7, r0, [r6]
	topic->qos = MQTT_QOS_1_AT_LEAST_ONCE;
   27558:	7233      	strb	r3, [r6, #8]
	return 0;
   2755a:	2400      	movs	r4, #0
   2755c:	e7de      	b.n	2751c <construct_topic+0x8c>
		return -EINVAL;
   2755e:	f06f 0415 	mvn.w	r4, #21
   27562:	e7db      	b.n	2751c <construct_topic+0x8c>
   27564:	000485ae 	.word	0x000485ae
   27568:	000489e4 	.word	0x000489e4
   2756c:	00042fb4 	.word	0x00042fb4
   27570:	00042fd4 	.word	0x00042fd4
   27574:	00048a01 	.word	0x00048a01
   27578:	00048a3e 	.word	0x00048a3e
   2757c:	0004a184 	.word	0x0004a184

00027580 <reg_topic>:

static int reg_topic(struct mqtt_client *const client, u8_t *topic_buf,
		     struct topic_conf const *conf, const u8_t *job_id,
		     bool subscribe)
{
   27580:	b5f0      	push	{r4, r5, r6, r7, lr}
   27582:	b089      	sub	sp, #36	; 0x24
   27584:	468c      	mov	ip, r1
   27586:	4617      	mov	r7, r2
   27588:	4619      	mov	r1, r3
   2758a:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
	if (client == NULL) {
   2758e:	4604      	mov	r4, r0
   27590:	2800      	cmp	r0, #0
   27592:	d036      	beq.n	27602 <reg_topic+0x82>
		return -EINVAL;
	}

	struct mqtt_topic topic;
	int err = construct_topic(client->client_id.utf8, job_id, conf,
   27594:	2300      	movs	r3, #0
   27596:	ad05      	add	r5, sp, #20
   27598:	9301      	str	r3, [sp, #4]
   2759a:	9500      	str	r5, [sp, #0]
   2759c:	4663      	mov	r3, ip
   2759e:	6c40      	ldr	r0, [r0, #68]	; 0x44
   275a0:	f7ff ff76 	bl	27490 <construct_topic>
				  topic_buf, &topic, false);

	const struct mqtt_subscription_list subscription_list = {
   275a4:	2301      	movs	r3, #1
   275a6:	f8ad 3010 	strh.w	r3, [sp, #16]
   275aa:	683b      	ldr	r3, [r7, #0]
   275ac:	9503      	str	r5, [sp, #12]
   275ae:	f8ad 3012 	strh.w	r3, [sp, #18]
		.list = &topic,
		.list_count = 1,
		.message_id = conf->msg_id
	};

	if (err) {
   275b2:	b9c0      	cbnz	r0, 275e6 <reg_topic+0x66>
		return err;
	}

	if (subscribe) {
   275b4:	4a14      	ldr	r2, [pc, #80]	; (27608 <reg_topic+0x88>)
   275b6:	4b15      	ldr	r3, [pc, #84]	; (2760c <reg_topic+0x8c>)
		LOG_INF("Subscribe: %s", log_strdup(topic.topic.utf8));
   275b8:	f04f 0500 	mov.w	r5, #0
   275bc:	1a9b      	subs	r3, r3, r2
   275be:	2203      	movs	r2, #3
   275c0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   275c4:	f362 0507 	bfi	r5, r2, #0, #8
   275c8:	9805      	ldr	r0, [sp, #20]
   275ca:	f363 158f 	bfi	r5, r3, #6, #10
	if (subscribe) {
   275ce:	b166      	cbz	r6, 275ea <reg_topic+0x6a>
		LOG_INF("Subscribe: %s", log_strdup(topic.topic.utf8));
   275d0:	f017 ff69 	bl	3f4a6 <log_strdup>
   275d4:	490e      	ldr	r1, [pc, #56]	; (27610 <reg_topic+0x90>)
   275d6:	4602      	mov	r2, r0
   275d8:	4628      	mov	r0, r5
   275da:	f017 ff52 	bl	3f482 <log_string_sync>
		return mqtt_subscribe(client, &subscription_list);
   275de:	a903      	add	r1, sp, #12
   275e0:	4620      	mov	r0, r4
   275e2:	f018 fd7e 	bl	400e2 <mqtt_subscribe>
	}

	LOG_INF("Unsubscribe: %s", log_strdup(topic.topic.utf8));
	return mqtt_unsubscribe(client, &subscription_list);
}
   275e6:	b009      	add	sp, #36	; 0x24
   275e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INF("Unsubscribe: %s", log_strdup(topic.topic.utf8));
   275ea:	f017 ff5c 	bl	3f4a6 <log_strdup>
   275ee:	4909      	ldr	r1, [pc, #36]	; (27614 <reg_topic+0x94>)
   275f0:	4602      	mov	r2, r0
   275f2:	4628      	mov	r0, r5
   275f4:	f017 ff45 	bl	3f482 <log_string_sync>
	return mqtt_unsubscribe(client, &subscription_list);
   275f8:	a903      	add	r1, sp, #12
   275fa:	4620      	mov	r0, r4
   275fc:	f018 fd98 	bl	40130 <mqtt_unsubscribe>
   27600:	e7f1      	b.n	275e6 <reg_topic+0x66>
		return -EINVAL;
   27602:	f06f 0015 	mvn.w	r0, #21
   27606:	e7ee      	b.n	275e6 <reg_topic+0x66>
   27608:	00042fb4 	.word	0x00042fb4
   2760c:	00042fd4 	.word	0x00042fd4
   27610:	00048a9c 	.word	0x00048a9c
   27614:	00048aaa 	.word	0x00048aaa

00027618 <publish>:
}

static int publish(struct mqtt_client *const client, const u8_t *job_id,
		   const struct topic_conf *conf, u8_t *payload_data,
		   size_t payload_data_len, u8_t *topic_buf)
{
   27618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2761c:	461f      	mov	r7, r3
	struct mqtt_topic topic;

	int ret = construct_topic(client->client_id.utf8, job_id, conf,
   2761e:	2301      	movs	r3, #1
{
   27620:	b08c      	sub	sp, #48	; 0x30
	int ret = construct_topic(client->client_id.utf8, job_id, conf,
   27622:	ad03      	add	r5, sp, #12
   27624:	9301      	str	r3, [sp, #4]
   27626:	9500      	str	r5, [sp, #0]
{
   27628:	4606      	mov	r6, r0
	int ret = construct_topic(client->client_id.utf8, job_id, conf,
   2762a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2762c:	6c40      	ldr	r0, [r0, #68]	; 0x44
   2762e:	f7ff ff2f 	bl	27490 <construct_topic>
				  topic_buf, &topic, true);

	if (ret) {
   27632:	2800      	cmp	r0, #0
   27634:	d138      	bne.n	276a8 <publish+0x90>
		return ret;
	}

	LOG_INF("Publish topic: %s", log_strdup(topic.topic.utf8));
   27636:	2303      	movs	r3, #3
   27638:	f04f 0800 	mov.w	r8, #0
   2763c:	4c1c      	ldr	r4, [pc, #112]	; (276b0 <publish+0x98>)
   2763e:	f363 0807 	bfi	r8, r3, #0, #8
   27642:	4b1c      	ldr	r3, [pc, #112]	; (276b4 <publish+0x9c>)
   27644:	9803      	ldr	r0, [sp, #12]
   27646:	1ae4      	subs	r4, r4, r3
   27648:	f017 ff2d 	bl	3f4a6 <log_strdup>
   2764c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   27650:	f364 188f 	bfi	r8, r4, #6, #10
   27654:	4602      	mov	r2, r0
   27656:	4918      	ldr	r1, [pc, #96]	; (276b8 <publish+0xa0>)
   27658:	4640      	mov	r0, r8
   2765a:	f017 ff12 	bl	3f482 <log_string_sync>
	LOG_INF("Publish payload %s", log_strdup(payload_data));
   2765e:	f04f 0800 	mov.w	r8, #0
   27662:	2303      	movs	r3, #3
   27664:	4638      	mov	r0, r7
   27666:	f363 0807 	bfi	r8, r3, #0, #8
   2766a:	f017 ff1c 	bl	3f4a6 <log_strdup>
   2766e:	f364 188f 	bfi	r8, r4, #6, #10
   27672:	4602      	mov	r2, r0
   27674:	4911      	ldr	r1, [pc, #68]	; (276bc <publish+0xa4>)
   27676:	4640      	mov	r0, r8
   27678:	f017 ff03 	bl	3f482 <log_string_sync>

	struct mqtt_publish_param param = {
   2767c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   27680:	9b12      	ldr	r3, [sp, #72]	; 0x48
   27682:	ac06      	add	r4, sp, #24
   27684:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   27688:	930a      	str	r3, [sp, #40]	; 0x28
   2768a:	9709      	str	r7, [sp, #36]	; 0x24
		.message.topic = topic,
		.message.payload.data = payload_data,
		.message.payload.len = payload_data_len,
		.message_id = sys_rand32_get(),
   2768c:	f7fa fb74 	bl	21d78 <sys_rand32_get>
	struct mqtt_publish_param param = {
   27690:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
   27694:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
   27698:	f023 0303 	bic.w	r3, r3, #3
		.dup_flag = 0,
		.retain_flag = 0,
	};

	return mqtt_publish(client, &param);
   2769c:	4621      	mov	r1, r4
   2769e:	4630      	mov	r0, r6
	struct mqtt_publish_param param = {
   276a0:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	return mqtt_publish(client, &param);
   276a4:	f018 fca1 	bl	3ffea <mqtt_publish>
}
   276a8:	b00c      	add	sp, #48	; 0x30
   276aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   276ae:	bf00      	nop
   276b0:	00042fd4 	.word	0x00042fd4
   276b4:	00042fb4 	.word	0x00042fb4
   276b8:	00048a77 	.word	0x00048a77
   276bc:	00048a89 	.word	0x00048a89

000276c0 <aws_jobs_subscribe_topic_notify_next>:
	return reg_topic(client, topic_buf, &TOPIC_NOTIFY_NEXT_CONF, "", true);
   276c0:	2301      	movs	r3, #1
{
   276c2:	b507      	push	{r0, r1, r2, lr}
	return reg_topic(client, topic_buf, &TOPIC_NOTIFY_NEXT_CONF, "", true);
   276c4:	4a03      	ldr	r2, [pc, #12]	; (276d4 <aws_jobs_subscribe_topic_notify_next+0x14>)
   276c6:	9300      	str	r3, [sp, #0]
   276c8:	4b03      	ldr	r3, [pc, #12]	; (276d8 <aws_jobs_subscribe_topic_notify_next+0x18>)
   276ca:	f7ff ff59 	bl	27580 <reg_topic>
}
   276ce:	b003      	add	sp, #12
   276d0:	f85d fb04 	ldr.w	pc, [sp], #4
   276d4:	00043914 	.word	0x00043914
   276d8:	0004a184 	.word	0x0004a184

000276dc <aws_jobs_unsubscribe_topic_notify_next>:
	return reg_topic(client, topic_buf, &TOPIC_NOTIFY_NEXT_CONF, "", false);
   276dc:	2300      	movs	r3, #0
{
   276de:	b507      	push	{r0, r1, r2, lr}
	return reg_topic(client, topic_buf, &TOPIC_NOTIFY_NEXT_CONF, "", false);
   276e0:	4a03      	ldr	r2, [pc, #12]	; (276f0 <aws_jobs_unsubscribe_topic_notify_next+0x14>)
   276e2:	9300      	str	r3, [sp, #0]
   276e4:	4b03      	ldr	r3, [pc, #12]	; (276f4 <aws_jobs_unsubscribe_topic_notify_next+0x18>)
   276e6:	f7ff ff4b 	bl	27580 <reg_topic>
}
   276ea:	b003      	add	sp, #12
   276ec:	f85d fb04 	ldr.w	pc, [sp], #4
   276f0:	00043914 	.word	0x00043914
   276f4:	0004a184 	.word	0x0004a184

000276f8 <aws_jobs_subscribe_topic_get>:
{
   276f8:	b513      	push	{r0, r1, r4, lr}
	return reg_topic(client, topic_buf, &TOPIC_GET_CONF, job_id, true);
   276fa:	2301      	movs	r3, #1
{
   276fc:	4614      	mov	r4, r2
	return reg_topic(client, topic_buf, &TOPIC_GET_CONF, job_id, true);
   276fe:	9300      	str	r3, [sp, #0]
   27700:	4a03      	ldr	r2, [pc, #12]	; (27710 <aws_jobs_subscribe_topic_get+0x18>)
   27702:	460b      	mov	r3, r1
   27704:	4621      	mov	r1, r4
   27706:	f7ff ff3b 	bl	27580 <reg_topic>
}
   2770a:	b002      	add	sp, #8
   2770c:	bd10      	pop	{r4, pc}
   2770e:	bf00      	nop
   27710:	00043908 	.word	0x00043908

00027714 <aws_jobs_subscribe_topic_update>:
{
   27714:	b513      	push	{r0, r1, r4, lr}
	return reg_topic(client, topic_buf, &TOPIC_UPDATE_CONF, job_id, true);
   27716:	2301      	movs	r3, #1
{
   27718:	4614      	mov	r4, r2
	return reg_topic(client, topic_buf, &TOPIC_UPDATE_CONF, job_id, true);
   2771a:	9300      	str	r3, [sp, #0]
   2771c:	4a03      	ldr	r2, [pc, #12]	; (2772c <aws_jobs_subscribe_topic_update+0x18>)
   2771e:	460b      	mov	r3, r1
   27720:	4621      	mov	r1, r4
   27722:	f7ff ff2d 	bl	27580 <reg_topic>
}
   27726:	b002      	add	sp, #8
   27728:	bd10      	pop	{r4, pc}
   2772a:	bf00      	nop
   2772c:	00043920 	.word	0x00043920

00027730 <aws_jobs_update_job_execution>:
				  const u8_t *job_id,
				  enum execution_status status,
				  const u8_t *status_details,
				  int expected_version,
				  const u8_t *client_token, u8_t *topic_buf)
{
   27730:	b570      	push	{r4, r5, r6, lr}
   27732:	f5ad 6dab 	sub.w	sp, sp, #1368	; 0x558
   27736:	460e      	mov	r6, r1
   27738:	4605      	mov	r5, r0
   2773a:	f8dd 156c 	ldr.w	r1, [sp, #1388]	; 0x56c
	/* The rest of the parameters are checked later */
	if (status_details == NULL || client_token == NULL) {
   2773e:	2b00      	cmp	r3, #0
   27740:	d046      	beq.n	277d0 <aws_jobs_update_job_execution+0xa0>
   27742:	2900      	cmp	r1, #0
   27744:	d044      	beq.n	277d0 <aws_jobs_update_job_execution+0xa0>
	 * is actually 32kb set it to what is the limiting factor which is the
	 * MQTT buffer size for reception.
	 */
	u8_t update_job_payload[CONFIG_UPDATE_JOB_PAYLOAD_LEN];

	int ret = snprintf(update_job_payload, sizeof(update_job_payload),
   27746:	9102      	str	r1, [sp, #8]
   27748:	f8dd 1568 	ldr.w	r1, [sp, #1384]	; 0x568
   2774c:	a804      	add	r0, sp, #16
   2774e:	e9cd 3100 	strd	r3, r1, [sp]
   27752:	4b21      	ldr	r3, [pc, #132]	; (277d8 <aws_jobs_update_job_execution+0xa8>)
   27754:	f240 5146 	movw	r1, #1350	; 0x546
   27758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   2775c:	4a1f      	ldr	r2, [pc, #124]	; (277dc <aws_jobs_update_job_execution+0xac>)
   2775e:	f015 fec7 	bl	3d4f0 <sniprintf>
			   UPDATE_JOB_PAYLOAD, execution_status_strings[status],
			   status_details, expected_version, client_token);

	if (ret >= CONFIG_UPDATE_JOB_PAYLOAD_LEN) {
   27762:	f240 5345 	movw	r3, #1349	; 0x545
   27766:	4298      	cmp	r0, r3
	int ret = snprintf(update_job_payload, sizeof(update_job_payload),
   27768:	4604      	mov	r4, r0
	if (ret >= CONFIG_UPDATE_JOB_PAYLOAD_LEN) {
   2776a:	dd13      	ble.n	27794 <aws_jobs_update_job_execution+0x64>
		LOG_ERR("Unable to fit formated string in provided buffer.");
   2776c:	2301      	movs	r3, #1
   2776e:	f04f 0000 	mov.w	r0, #0
   27772:	4a1b      	ldr	r2, [pc, #108]	; (277e0 <aws_jobs_update_job_execution+0xb0>)
   27774:	f363 0007 	bfi	r0, r3, #0, #8
   27778:	4b1a      	ldr	r3, [pc, #104]	; (277e4 <aws_jobs_update_job_execution+0xb4>)
   2777a:	491b      	ldr	r1, [pc, #108]	; (277e8 <aws_jobs_update_job_execution+0xb8>)
   2777c:	1a9b      	subs	r3, r3, r2
   2777e:	08db      	lsrs	r3, r3, #3
   27780:	f363 108f 	bfi	r0, r3, #6, #10
   27784:	f017 fe7d 	bl	3f482 <log_string_sync>
		return -ENOMEM;
   27788:	f06f 040b 	mvn.w	r4, #11
	}

	return publish(client, job_id, &TOPIC_UPDATE_CONF, update_job_payload,
		       ret, topic_buf);

}
   2778c:	4620      	mov	r0, r4
   2778e:	f50d 6dab 	add.w	sp, sp, #1368	; 0x558
   27792:	bd70      	pop	{r4, r5, r6, pc}
	} else if (ret < 0) {
   27794:	2800      	cmp	r0, #0
   27796:	da0f      	bge.n	277b8 <aws_jobs_update_job_execution+0x88>
		LOG_ERR("Error when creating payload %d", ret);
   27798:	2301      	movs	r3, #1
   2779a:	f04f 0000 	mov.w	r0, #0
   2779e:	4a10      	ldr	r2, [pc, #64]	; (277e0 <aws_jobs_update_job_execution+0xb0>)
   277a0:	f363 0007 	bfi	r0, r3, #0, #8
   277a4:	4b0f      	ldr	r3, [pc, #60]	; (277e4 <aws_jobs_update_job_execution+0xb4>)
   277a6:	4911      	ldr	r1, [pc, #68]	; (277ec <aws_jobs_update_job_execution+0xbc>)
   277a8:	1a9b      	subs	r3, r3, r2
   277aa:	08db      	lsrs	r3, r3, #3
   277ac:	f363 108f 	bfi	r0, r3, #6, #10
   277b0:	4622      	mov	r2, r4
   277b2:	f017 fe66 	bl	3f482 <log_string_sync>
		return ret;
   277b6:	e7e9      	b.n	2778c <aws_jobs_update_job_execution+0x5c>
	return publish(client, job_id, &TOPIC_UPDATE_CONF, update_job_payload,
   277b8:	f8dd 3570 	ldr.w	r3, [sp, #1392]	; 0x570
   277bc:	4a0c      	ldr	r2, [pc, #48]	; (277f0 <aws_jobs_update_job_execution+0xc0>)
   277be:	e9cd 0300 	strd	r0, r3, [sp]
   277c2:	4631      	mov	r1, r6
   277c4:	ab04      	add	r3, sp, #16
   277c6:	4628      	mov	r0, r5
   277c8:	f7ff ff26 	bl	27618 <publish>
   277cc:	4604      	mov	r4, r0
   277ce:	e7dd      	b.n	2778c <aws_jobs_update_job_execution+0x5c>
		return -EINVAL;
   277d0:	f06f 0415 	mvn.w	r4, #21
   277d4:	e7da      	b.n	2778c <aws_jobs_update_job_execution+0x5c>
   277d6:	bf00      	nop
   277d8:	0004392c 	.word	0x0004392c
   277dc:	00048943 	.word	0x00048943
   277e0:	00042fb4 	.word	0x00042fb4
   277e4:	00042fd4 	.word	0x00042fd4
   277e8:	00048993 	.word	0x00048993
   277ec:	000489c5 	.word	0x000489c5
   277f0:	00043920 	.word	0x00043920

000277f4 <aws_jobs_get_job_execution>:

#define JOB_ID_GET_PAYLOAD "{\"clientToken\": \"\"}"
int aws_jobs_get_job_execution(struct mqtt_client *const client,
			       const char *job_id, u8_t *topic_buf)
{
   277f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return publish(client, job_id, &TOPIC_GET_CONF, JOB_ID_GET_PAYLOAD,
   277f6:	4c08      	ldr	r4, [pc, #32]	; (27818 <aws_jobs_get_job_execution+0x24>)
{
   277f8:	4605      	mov	r5, r0
	return publish(client, job_id, &TOPIC_GET_CONF, JOB_ID_GET_PAYLOAD,
   277fa:	4620      	mov	r0, r4
{
   277fc:	4617      	mov	r7, r2
   277fe:	460e      	mov	r6, r1
	return publish(client, job_id, &TOPIC_GET_CONF, JOB_ID_GET_PAYLOAD,
   27800:	f7f2 fb70 	bl	19ee4 <strlen>
   27804:	4623      	mov	r3, r4
   27806:	e9cd 0700 	strd	r0, r7, [sp]
   2780a:	4a04      	ldr	r2, [pc, #16]	; (2781c <aws_jobs_get_job_execution+0x28>)
   2780c:	4631      	mov	r1, r6
   2780e:	4628      	mov	r0, r5
   27810:	f7ff ff02 	bl	27618 <publish>
		       strlen(JOB_ID_GET_PAYLOAD), topic_buf);
}
   27814:	b003      	add	sp, #12
   27816:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27818:	0004892f 	.word	0x0004892f
   2781c:	00043908 	.word	0x00043908

00027820 <update_job_execution.constprop.0>:

#define AWS_FOTA_STATUS_DETAILS_TEMPLATE "{\"nextState\":\"%s\"}"
#define STATUS_DETAILS_MAX_LEN  (sizeof("{\"nextState\":\"\"}") \
				+ (sizeof("download_firmware") + 2))

static int update_job_execution(struct mqtt_client *const client,
   27820:	b5f0      	push	{r4, r5, r6, r7, lr}
   27822:	461f      	mov	r7, r3
				enum fota_status next_state,
				int version_number,
				const char *client_token)
{
	char status_details[STATUS_DETAILS_MAX_LEN + 1];
	int ret = snprintf(status_details,
   27824:	4b25      	ldr	r3, [pc, #148]	; (278bc <update_job_execution.constprop.0+0x9c>)
static int update_job_execution(struct mqtt_client *const client,
   27826:	b08f      	sub	sp, #60	; 0x3c
	int ret = snprintf(status_details,
   27828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
static int update_job_execution(struct mqtt_client *const client,
   2782c:	4605      	mov	r5, r0
   2782e:	460e      	mov	r6, r1
	int ret = snprintf(status_details,
   27830:	4a23      	ldr	r2, [pc, #140]	; (278c0 <update_job_execution.constprop.0+0xa0>)
   27832:	2126      	movs	r1, #38	; 0x26
   27834:	a804      	add	r0, sp, #16
   27836:	f015 fe5b 	bl	3d4f0 <sniprintf>
			   sizeof(status_details),
			   AWS_FOTA_STATUS_DETAILS_TEMPLATE,
			   fota_status_strings[next_state]);
	__ASSERT(ret >= 0, "snprintf returned error %d\n", ret);
   2783a:	1e04      	subs	r4, r0, #0
   2783c:	da1c      	bge.n	27878 <update_job_execution.constprop.0+0x58>
   2783e:	2361      	movs	r3, #97	; 0x61
   27840:	4a20      	ldr	r2, [pc, #128]	; (278c4 <update_job_execution.constprop.0+0xa4>)
   27842:	4921      	ldr	r1, [pc, #132]	; (278c8 <update_job_execution.constprop.0+0xa8>)
   27844:	4821      	ldr	r0, [pc, #132]	; (278cc <update_job_execution.constprop.0+0xac>)
   27846:	f017 fdfe 	bl	3f446 <printk>
   2784a:	4621      	mov	r1, r4
   2784c:	4820      	ldr	r0, [pc, #128]	; (278d0 <update_job_execution.constprop.0+0xb0>)
   2784e:	f017 fdfa 	bl	3f446 <printk>
   27852:	2161      	movs	r1, #97	; 0x61
   27854:	481b      	ldr	r0, [pc, #108]	; (278c4 <update_job_execution.constprop.0+0xa4>)
   27856:	f017 fe03 	bl	3f460 <assert_post_action>
	__ASSERT(ret < STATUS_DETAILS_MAX_LEN,
   2785a:	2363      	movs	r3, #99	; 0x63
   2785c:	4a19      	ldr	r2, [pc, #100]	; (278c4 <update_job_execution.constprop.0+0xa4>)
   2785e:	491d      	ldr	r1, [pc, #116]	; (278d4 <update_job_execution.constprop.0+0xb4>)
   27860:	481a      	ldr	r0, [pc, #104]	; (278cc <update_job_execution.constprop.0+0xac>)
   27862:	f017 fdf0 	bl	3f446 <printk>
   27866:	1c61      	adds	r1, r4, #1
   27868:	481b      	ldr	r0, [pc, #108]	; (278d8 <update_job_execution.constprop.0+0xb8>)
   2786a:	f017 fdec 	bl	3f446 <printk>
   2786e:	2163      	movs	r1, #99	; 0x63
   27870:	4814      	ldr	r0, [pc, #80]	; (278c4 <update_job_execution.constprop.0+0xa4>)
   27872:	f017 fdf5 	bl	3f460 <assert_post_action>
   27876:	e001      	b.n	2787c <update_job_execution.constprop.0+0x5c>
   27878:	2c24      	cmp	r4, #36	; 0x24
   2787a:	dcee      	bgt.n	2785a <update_job_execution.constprop.0+0x3a>
		"Not enough space for status, need %d bytes\n", ret+1);

	ret =  aws_jobs_update_job_execution(client, job_id, state,
   2787c:	4b17      	ldr	r3, [pc, #92]	; (278dc <update_job_execution.constprop.0+0xbc>)
   2787e:	4632      	mov	r2, r6
   27880:	9302      	str	r3, [sp, #8]
   27882:	4b17      	ldr	r3, [pc, #92]	; (278e0 <update_job_execution.constprop.0+0xc0>)
   27884:	4917      	ldr	r1, [pc, #92]	; (278e4 <update_job_execution.constprop.0+0xc4>)
   27886:	e9cd 7300 	strd	r7, r3, [sp]
   2788a:	4628      	mov	r0, r5
   2788c:	ab04      	add	r3, sp, #16
   2788e:	f7ff ff4f 	bl	27730 <aws_jobs_update_job_execution>
					     status_details, version_number,
					     client_token, update_topic);

	if (ret < 0) {
   27892:	1e04      	subs	r4, r0, #0
   27894:	da0e      	bge.n	278b4 <update_job_execution.constprop.0+0x94>
		LOG_ERR("aws_jobs_update_job_execution failed: %d", ret);
   27896:	2301      	movs	r3, #1
   27898:	f04f 0000 	mov.w	r0, #0
   2789c:	4a12      	ldr	r2, [pc, #72]	; (278e8 <update_job_execution.constprop.0+0xc8>)
   2789e:	f363 0007 	bfi	r0, r3, #0, #8
   278a2:	4b12      	ldr	r3, [pc, #72]	; (278ec <update_job_execution.constprop.0+0xcc>)
   278a4:	4912      	ldr	r1, [pc, #72]	; (278f0 <update_job_execution.constprop.0+0xd0>)
   278a6:	1a9b      	subs	r3, r3, r2
   278a8:	08db      	lsrs	r3, r3, #3
   278aa:	f363 108f 	bfi	r0, r3, #6, #10
   278ae:	4622      	mov	r2, r4
   278b0:	f017 fde7 	bl	3f482 <log_string_sync>
	}

	return ret;
}
   278b4:	4620      	mov	r0, r4
   278b6:	b00f      	add	sp, #60	; 0x3c
   278b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   278ba:	bf00      	nop
   278bc:	0004394c 	.word	0x0004394c
   278c0:	00048e5f 	.word	0x00048e5f
   278c4:	00048e72 	.word	0x00048e72
   278c8:	00048eca 	.word	0x00048eca
   278cc:	00045316 	.word	0x00045316
   278d0:	00048ed3 	.word	0x00048ed3
   278d4:	00048ef1 	.word	0x00048ef1
   278d8:	00048f3c 	.word	0x00048f3c
   278dc:	2002c79f 	.word	0x2002c79f
   278e0:	0004a184 	.word	0x0004a184
   278e4:	2002c183 	.word	0x2002c183
   278e8:	00042fb4 	.word	0x00042fb4
   278ec:	00042fcc 	.word	0x00042fcc
   278f0:	00048f6a 	.word	0x00048f6a

000278f4 <http_fota_handler>:
	}
	return 0;
}

static void http_fota_handler(enum fota_download_evt_id evt)
{
   278f4:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(c != NULL);
   278f6:	4c25      	ldr	r4, [pc, #148]	; (2798c <http_fota_handler+0x98>)
{
   278f8:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(c != NULL);
   278fa:	6823      	ldr	r3, [r4, #0]
   278fc:	b95b      	cbnz	r3, 27916 <http_fota_handler+0x22>
   278fe:	4924      	ldr	r1, [pc, #144]	; (27990 <http_fota_handler+0x9c>)
   27900:	4824      	ldr	r0, [pc, #144]	; (27994 <http_fota_handler+0xa0>)
   27902:	f240 1355 	movw	r3, #341	; 0x155
   27906:	4a24      	ldr	r2, [pc, #144]	; (27998 <http_fota_handler+0xa4>)
   27908:	f017 fd9d 	bl	3f446 <printk>
   2790c:	f240 1155 	movw	r1, #341	; 0x155
   27910:	4821      	ldr	r0, [pc, #132]	; (27998 <http_fota_handler+0xa4>)
   27912:	f017 fda5 	bl	3f460 <assert_post_action>

	int err = 0;

	switch (evt) {
   27916:	b115      	cbz	r5, 2791e <http_fota_handler+0x2a>
   27918:	2d01      	cmp	r5, #1
   2791a:	d01f      	beq.n	2795c <http_fota_handler+0x68>
				     fota_state, doc_version_number, "");
		callback(AWS_FOTA_EVT_ERROR);
		break;
	}

}
   2791c:	bd70      	pop	{r4, r5, r6, pc}
		LOG_INF("FOTA download completed evt recived");
   2791e:	2303      	movs	r3, #3
   27920:	f04f 0000 	mov.w	r0, #0
   27924:	4a1d      	ldr	r2, [pc, #116]	; (2799c <http_fota_handler+0xa8>)
   27926:	f363 0007 	bfi	r0, r3, #0, #8
   2792a:	4b1d      	ldr	r3, [pc, #116]	; (279a0 <http_fota_handler+0xac>)
   2792c:	491d      	ldr	r1, [pc, #116]	; (279a4 <http_fota_handler+0xb0>)
   2792e:	1a9b      	subs	r3, r3, r2
   27930:	08db      	lsrs	r3, r3, #3
   27932:	f363 108f 	bfi	r0, r3, #6, #10
   27936:	f017 fda4 	bl	3f482 <log_string_sync>
		fota_state = APPLY_UPDATE;
   2793a:	2202      	movs	r2, #2
   2793c:	4b1a      	ldr	r3, [pc, #104]	; (279a8 <http_fota_handler+0xb4>)
		err = update_job_execution(c, job_id, AWS_JOBS_IN_PROGRESS,
   2793e:	2101      	movs	r1, #1
		fota_state = APPLY_UPDATE;
   27940:	701a      	strb	r2, [r3, #0]
		err = update_job_execution(c, job_id, AWS_JOBS_IN_PROGRESS,
   27942:	4b1a      	ldr	r3, [pc, #104]	; (279ac <http_fota_handler+0xb8>)
   27944:	6820      	ldr	r0, [r4, #0]
   27946:	681b      	ldr	r3, [r3, #0]
   27948:	f7ff ff6a 	bl	27820 <update_job_execution.constprop.0>
		if (err != 0) {
   2794c:	2800      	cmp	r0, #0
   2794e:	d0e5      	beq.n	2791c <http_fota_handler+0x28>
}
   27950:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			callback(AWS_FOTA_EVT_ERROR);
   27954:	4b16      	ldr	r3, [pc, #88]	; (279b0 <http_fota_handler+0xbc>)
   27956:	2001      	movs	r0, #1
   27958:	681b      	ldr	r3, [r3, #0]
   2795a:	4718      	bx	r3
		LOG_ERR("FOTA download failed, report back");
   2795c:	2301      	movs	r3, #1
   2795e:	f04f 0000 	mov.w	r0, #0
   27962:	4a0e      	ldr	r2, [pc, #56]	; (2799c <http_fota_handler+0xa8>)
   27964:	f363 0007 	bfi	r0, r3, #0, #8
   27968:	4b0d      	ldr	r3, [pc, #52]	; (279a0 <http_fota_handler+0xac>)
   2796a:	4912      	ldr	r1, [pc, #72]	; (279b4 <http_fota_handler+0xc0>)
   2796c:	1a9b      	subs	r3, r3, r2
   2796e:	08db      	lsrs	r3, r3, #3
   27970:	f363 108f 	bfi	r0, r3, #6, #10
   27974:	f017 fd85 	bl	3f482 <log_string_sync>
		(void) update_job_execution(c, job_id, AWS_JOBS_FAILED,
   27978:	4b0c      	ldr	r3, [pc, #48]	; (279ac <http_fota_handler+0xb8>)
   2797a:	4a0b      	ldr	r2, [pc, #44]	; (279a8 <http_fota_handler+0xb4>)
   2797c:	681b      	ldr	r3, [r3, #0]
   2797e:	7812      	ldrb	r2, [r2, #0]
   27980:	2103      	movs	r1, #3
   27982:	6820      	ldr	r0, [r4, #0]
   27984:	f7ff ff4c 	bl	27820 <update_job_execution.constprop.0>
		callback(AWS_FOTA_EVT_ERROR);
   27988:	e7e2      	b.n	27950 <http_fota_handler+0x5c>
   2798a:	bf00      	nop
   2798c:	2002468c 	.word	0x2002468c
   27990:	00048ddb 	.word	0x00048ddb
   27994:	00045316 	.word	0x00045316
   27998:	00048e72 	.word	0x00048e72
   2799c:	00042fb4 	.word	0x00042fb4
   279a0:	00042fcc 	.word	0x00042fcc
   279a4:	00048dec 	.word	0x00048dec
   279a8:	2002bfee 	.word	0x2002bfee
   279ac:	20031c58 	.word	0x20031c58
   279b0:	20024690 	.word	0x20024690
   279b4:	00048e10 	.word	0x00048e10

000279b8 <get_published_payload.constprop.1>:
	if (length > sizeof(payload_buf)) {
   279b8:	f240 5346 	movw	r3, #1350	; 0x546
static int get_published_payload(struct mqtt_client *client, u8_t *write_buf,
   279bc:	b570      	push	{r4, r5, r6, lr}
	u8_t *end = buf + length;
   279be:	4c0d      	ldr	r4, [pc, #52]	; (279f4 <get_published_payload.constprop.1+0x3c>)
	if (length > sizeof(payload_buf)) {
   279c0:	4299      	cmp	r1, r3
static int get_published_payload(struct mqtt_client *client, u8_t *write_buf,
   279c2:	4606      	mov	r6, r0
	u8_t *end = buf + length;
   279c4:	eb04 0501 	add.w	r5, r4, r1
	if (length > sizeof(payload_buf)) {
   279c8:	d80d      	bhi.n	279e6 <get_published_payload.constprop.1+0x2e>
	while (buf < end) {
   279ca:	42a5      	cmp	r5, r4
   279cc:	d801      	bhi.n	279d2 <get_published_payload.constprop.1+0x1a>
	return 0;
   279ce:	2000      	movs	r0, #0
}
   279d0:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buf, end - buf);
   279d2:	1b2a      	subs	r2, r5, r4
   279d4:	4621      	mov	r1, r4
   279d6:	4630      	mov	r0, r6
   279d8:	f018 fc45 	bl	40266 <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   279dc:	2800      	cmp	r0, #0
   279de:	dbf7      	blt.n	279d0 <get_published_payload.constprop.1+0x18>
		} else if (ret == 0) {
   279e0:	d004      	beq.n	279ec <get_published_payload.constprop.1+0x34>
		buf += ret;
   279e2:	4404      	add	r4, r0
   279e4:	e7f1      	b.n	279ca <get_published_payload.constprop.1+0x12>
		return -EMSGSIZE;
   279e6:	f06f 0079 	mvn.w	r0, #121	; 0x79
   279ea:	e7f1      	b.n	279d0 <get_published_payload.constprop.1+0x18>
			return -EIO;
   279ec:	f06f 0004 	mvn.w	r0, #4
   279f0:	e7ee      	b.n	279d0 <get_published_payload.constprop.1+0x18>
   279f2:	bf00      	nop
   279f4:	2002c259 	.word	0x2002c259

000279f8 <aws_fota_mqtt_evt_handler>:
{
   279f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (evt->type) {
   279fc:	780b      	ldrb	r3, [r1, #0]
{
   279fe:	b085      	sub	sp, #20
   27a00:	4606      	mov	r6, r0
   27a02:	460f      	mov	r7, r1
	switch (evt->type) {
   27a04:	2b07      	cmp	r3, #7
   27a06:	f200 818a 	bhi.w	27d1e <aws_fota_mqtt_evt_handler+0x326>
   27a0a:	e8df f013 	tbh	[pc, r3, lsl #1]
   27a0e:	0008      	.short	0x0008
   27a10:	00380188 	.word	0x00380188
   27a14:	018801dd 	.word	0x018801dd
   27a18:	01880188 	.word	0x01880188
   27a1c:	01ef      	.short	0x01ef
		if (evt->result != 0) {
   27a1e:	69cb      	ldr	r3, [r1, #28]
   27a20:	2b00      	cmp	r3, #0
   27a22:	f040 817c 	bne.w	27d1e <aws_fota_mqtt_evt_handler+0x326>
		err = aws_jobs_subscribe_topic_notify_next(client,
   27a26:	49c5      	ldr	r1, [pc, #788]	; (27d3c <aws_fota_mqtt_evt_handler+0x344>)
   27a28:	f7ff fe4a 	bl	276c0 <aws_jobs_subscribe_topic_notify_next>
		if (err) {
   27a2c:	4604      	mov	r4, r0
   27a2e:	b188      	cbz	r0, 27a54 <aws_fota_mqtt_evt_handler+0x5c>
			LOG_ERR("Unable to subscribe to notify-next topic");
   27a30:	2301      	movs	r3, #1
   27a32:	f04f 0000 	mov.w	r0, #0
   27a36:	4ac2      	ldr	r2, [pc, #776]	; (27d40 <aws_fota_mqtt_evt_handler+0x348>)
   27a38:	f363 0007 	bfi	r0, r3, #0, #8
   27a3c:	4bc1      	ldr	r3, [pc, #772]	; (27d44 <aws_fota_mqtt_evt_handler+0x34c>)
   27a3e:	49c2      	ldr	r1, [pc, #776]	; (27d48 <aws_fota_mqtt_evt_handler+0x350>)
   27a40:	1a9b      	subs	r3, r3, r2
   27a42:	08db      	lsrs	r3, r3, #3
   27a44:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Unable to subscribe to jobs/$next/get");
   27a48:	f017 fd1b 	bl	3f482 <log_string_sync>
}
   27a4c:	4620      	mov	r0, r4
   27a4e:	b005      	add	sp, #20
   27a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = aws_jobs_subscribe_topic_get(client, "$next", get_topic);
   27a54:	4abd      	ldr	r2, [pc, #756]	; (27d4c <aws_fota_mqtt_evt_handler+0x354>)
   27a56:	49be      	ldr	r1, [pc, #760]	; (27d50 <aws_fota_mqtt_evt_handler+0x358>)
   27a58:	4630      	mov	r0, r6
   27a5a:	f7ff fe4d 	bl	276f8 <aws_jobs_subscribe_topic_get>
		if (err) {
   27a5e:	4604      	mov	r4, r0
   27a60:	2800      	cmp	r0, #0
   27a62:	d0f3      	beq.n	27a4c <aws_fota_mqtt_evt_handler+0x54>
			LOG_ERR("Unable to subscribe to jobs/$next/get");
   27a64:	2301      	movs	r3, #1
   27a66:	f04f 0000 	mov.w	r0, #0
   27a6a:	4ab5      	ldr	r2, [pc, #724]	; (27d40 <aws_fota_mqtt_evt_handler+0x348>)
   27a6c:	f363 0007 	bfi	r0, r3, #0, #8
   27a70:	4bb4      	ldr	r3, [pc, #720]	; (27d44 <aws_fota_mqtt_evt_handler+0x34c>)
   27a72:	49b8      	ldr	r1, [pc, #736]	; (27d54 <aws_fota_mqtt_evt_handler+0x35c>)
   27a74:	1a9b      	subs	r3, r3, r2
   27a76:	08db      	lsrs	r3, r3, #3
   27a78:	f363 108f 	bfi	r0, r3, #6, #10
   27a7c:	e7e4      	b.n	27a48 <aws_fota_mqtt_evt_handler+0x50>
	LOG_INF("Received topic: %s", log_strdup(topic));
   27a7e:	2303      	movs	r3, #3
		err = aws_fota_on_publish_evt(client,
   27a80:	e9d1 4901 	ldrd	r4, r9, [r1, #4]
	LOG_INF("Received topic: %s", log_strdup(topic));
   27a84:	f04f 0a00 	mov.w	sl, #0
   27a88:	4dae      	ldr	r5, [pc, #696]	; (27d44 <aws_fota_mqtt_evt_handler+0x34c>)
   27a8a:	f363 0a07 	bfi	sl, r3, #0, #8
   27a8e:	4bac      	ldr	r3, [pc, #688]	; (27d40 <aws_fota_mqtt_evt_handler+0x348>)
   27a90:	4620      	mov	r0, r4
   27a92:	1aed      	subs	r5, r5, r3
		err = aws_fota_on_publish_evt(client,
   27a94:	f8d1 8014 	ldr.w	r8, [r1, #20]
	LOG_INF("Received topic: %s", log_strdup(topic));
   27a98:	f017 fd05 	bl	3f4a6 <log_strdup>
   27a9c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   27aa0:	f365 1a8f 	bfi	sl, r5, #6, #10
   27aa4:	4602      	mov	r2, r0
   27aa6:	49ac      	ldr	r1, [pc, #688]	; (27d58 <aws_fota_mqtt_evt_handler+0x360>)
   27aa8:	4650      	mov	r0, sl
   27aaa:	f017 fcea 	bl	3f482 <log_string_sync>
	bool is_get_next_topic = aws_jobs_cmp(get_topic, topic, topic_len, "");
   27aae:	4bab      	ldr	r3, [pc, #684]	; (27d5c <aws_fota_mqtt_evt_handler+0x364>)
   27ab0:	464a      	mov	r2, r9
   27ab2:	4621      	mov	r1, r4
   27ab4:	48a5      	ldr	r0, [pc, #660]	; (27d4c <aws_fota_mqtt_evt_handler+0x354>)
   27ab6:	f019 fd60 	bl	4157a <aws_jobs_cmp>
	bool is_notify_next_topic = aws_jobs_cmp(notify_next_topic, topic,
   27aba:	4ba8      	ldr	r3, [pc, #672]	; (27d5c <aws_fota_mqtt_evt_handler+0x364>)
	bool is_get_next_topic = aws_jobs_cmp(get_topic, topic, topic_len, "");
   27abc:	4682      	mov	sl, r0
	bool is_notify_next_topic = aws_jobs_cmp(notify_next_topic, topic,
   27abe:	464a      	mov	r2, r9
   27ac0:	4621      	mov	r1, r4
   27ac2:	489e      	ldr	r0, [pc, #632]	; (27d3c <aws_fota_mqtt_evt_handler+0x344>)
   27ac4:	f019 fd59 	bl	4157a <aws_jobs_cmp>
	if (is_notify_next_topic || is_get_next_topic) {
   27ac8:	b910      	cbnz	r0, 27ad0 <aws_fota_mqtt_evt_handler+0xd8>
   27aca:	f1ba 0f00 	cmp.w	sl, #0
   27ace:	d063      	beq.n	27b98 <aws_fota_mqtt_evt_handler+0x1a0>
		err = get_published_payload(client, payload_buf, payload_len);
   27ad0:	4641      	mov	r1, r8
   27ad2:	4630      	mov	r0, r6
   27ad4:	f7ff ff70 	bl	279b8 <get_published_payload.constprop.1>
		if (err) {
   27ad8:	4604      	mov	r4, r0
   27ada:	b148      	cbz	r0, 27af0 <aws_fota_mqtt_evt_handler+0xf8>
			LOG_ERR("Error when getting the payload: %d", err);
   27adc:	f04f 0000 	mov.w	r0, #0
   27ae0:	2301      	movs	r3, #1
   27ae2:	f363 0007 	bfi	r0, r3, #0, #8
   27ae6:	f365 108f 	bfi	r0, r5, #6, #10
   27aea:	4622      	mov	r2, r4
   27aec:	499c      	ldr	r1, [pc, #624]	; (27d60 <aws_fota_mqtt_evt_handler+0x368>)
   27aee:	e03b      	b.n	27b68 <aws_fota_mqtt_evt_handler+0x170>
		err = aws_fota_parse_notify_next_document(payload_buf,
   27af0:	4b9c      	ldr	r3, [pc, #624]	; (27d64 <aws_fota_mqtt_evt_handler+0x36c>)
   27af2:	4a9d      	ldr	r2, [pc, #628]	; (27d68 <aws_fota_mqtt_evt_handler+0x370>)
   27af4:	9300      	str	r3, [sp, #0]
   27af6:	4641      	mov	r1, r8
   27af8:	4b9c      	ldr	r3, [pc, #624]	; (27d6c <aws_fota_mqtt_evt_handler+0x374>)
   27afa:	489d      	ldr	r0, [pc, #628]	; (27d70 <aws_fota_mqtt_evt_handler+0x378>)
   27afc:	f000 fa08 	bl	27f10 <aws_fota_parse_notify_next_document>
		if (err < 0) {
   27b00:	1e04      	subs	r4, r0, #0
   27b02:	da0b      	bge.n	27b1c <aws_fota_mqtt_evt_handler+0x124>
			LOG_ERR("Error when parsing the json: %d", err);
   27b04:	2301      	movs	r3, #1
   27b06:	f04f 0000 	mov.w	r0, #0
   27b0a:	f363 0007 	bfi	r0, r3, #0, #8
   27b0e:	f365 108f 	bfi	r0, r5, #6, #10
   27b12:	4622      	mov	r2, r4
   27b14:	4997      	ldr	r1, [pc, #604]	; (27d74 <aws_fota_mqtt_evt_handler+0x37c>)
   27b16:	f017 fcb4 	bl	3f482 <log_string_sync>
		if (err < 1) {
   27b1a:	e797      	b.n	27a4c <aws_fota_mqtt_evt_handler+0x54>
		} else  if (err == 1) {
   27b1c:	2c01      	cmp	r4, #1
   27b1e:	d114      	bne.n	27b4a <aws_fota_mqtt_evt_handler+0x152>
			LOG_INF("Got only one field: %s",
   27b20:	2303      	movs	r3, #3
   27b22:	f04f 0400 	mov.w	r4, #0
   27b26:	4892      	ldr	r0, [pc, #584]	; (27d70 <aws_fota_mqtt_evt_handler+0x378>)
   27b28:	f363 0407 	bfi	r4, r3, #0, #8
   27b2c:	f017 fcbb 	bl	3f4a6 <log_strdup>
   27b30:	f365 148f 	bfi	r4, r5, #6, #10
   27b34:	4602      	mov	r2, r0
   27b36:	4990      	ldr	r1, [pc, #576]	; (27d78 <aws_fota_mqtt_evt_handler+0x380>)
   27b38:	4620      	mov	r0, r4
   27b3a:	f017 fca2 	bl	3f482 <log_string_sync>
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   27b3e:	7b3b      	ldrb	r3, [r7, #12]
   27b40:	2b01      	cmp	r3, #1
   27b42:	f000 80ee 	beq.w	27d22 <aws_fota_mqtt_evt_handler+0x32a>
		return 1;
   27b46:	2401      	movs	r4, #1
   27b48:	e780      	b.n	27a4c <aws_fota_mqtt_evt_handler+0x54>
		err = aws_jobs_unsubscribe_topic_notify_next(client,
   27b4a:	497c      	ldr	r1, [pc, #496]	; (27d3c <aws_fota_mqtt_evt_handler+0x344>)
   27b4c:	4630      	mov	r0, r6
   27b4e:	f7ff fdc5 	bl	276dc <aws_jobs_unsubscribe_topic_notify_next>
		if (err) {
   27b52:	4604      	mov	r4, r0
   27b54:	b158      	cbz	r0, 27b6e <aws_fota_mqtt_evt_handler+0x176>
			LOG_ERR("Error when unsubscribing notify_next_topic: "
   27b56:	f04f 0000 	mov.w	r0, #0
   27b5a:	2301      	movs	r3, #1
   27b5c:	4622      	mov	r2, r4
   27b5e:	f363 0007 	bfi	r0, r3, #0, #8
   27b62:	4986      	ldr	r1, [pc, #536]	; (27d7c <aws_fota_mqtt_evt_handler+0x384>)
   27b64:	f365 108f 	bfi	r0, r5, #6, #10
			LOG_ERR("Error when getting the payload: %d", err);
   27b68:	f017 fc8b 	bl	3f482 <log_string_sync>
			return err;
   27b6c:	e084      	b.n	27c78 <aws_fota_mqtt_evt_handler+0x280>
		err = aws_jobs_subscribe_topic_update(client, job_id,
   27b6e:	4a84      	ldr	r2, [pc, #528]	; (27d80 <aws_fota_mqtt_evt_handler+0x388>)
   27b70:	497d      	ldr	r1, [pc, #500]	; (27d68 <aws_fota_mqtt_evt_handler+0x370>)
   27b72:	4630      	mov	r0, r6
   27b74:	f7ff fdce 	bl	27714 <aws_jobs_subscribe_topic_update>
		if (err) {
   27b78:	4604      	mov	r4, r0
   27b7a:	b148      	cbz	r0, 27b90 <aws_fota_mqtt_evt_handler+0x198>
			LOG_ERR("Error when subscribing job_id_update: "
   27b7c:	f04f 0000 	mov.w	r0, #0
   27b80:	2301      	movs	r3, #1
   27b82:	f363 0007 	bfi	r0, r3, #0, #8
   27b86:	f365 108f 	bfi	r0, r5, #6, #10
   27b8a:	4622      	mov	r2, r4
   27b8c:	497d      	ldr	r1, [pc, #500]	; (27d84 <aws_fota_mqtt_evt_handler+0x38c>)
   27b8e:	e7eb      	b.n	27b68 <aws_fota_mqtt_evt_handler+0x170>
		fota_state = DOWNLOAD_FIRMWARE;
   27b90:	2201      	movs	r2, #1
   27b92:	4b7d      	ldr	r3, [pc, #500]	; (27d88 <aws_fota_mqtt_evt_handler+0x390>)
   27b94:	701a      	strb	r2, [r3, #0]
		if (err < 1) {
   27b96:	e7d2      	b.n	27b3e <aws_fota_mqtt_evt_handler+0x146>
	} else if (aws_jobs_cmp(update_topic, topic, topic_len, "accepted")) {
   27b98:	4b7c      	ldr	r3, [pc, #496]	; (27d8c <aws_fota_mqtt_evt_handler+0x394>)
   27b9a:	464a      	mov	r2, r9
   27b9c:	4621      	mov	r1, r4
   27b9e:	4878      	ldr	r0, [pc, #480]	; (27d80 <aws_fota_mqtt_evt_handler+0x388>)
   27ba0:	f019 fceb 	bl	4157a <aws_jobs_cmp>
   27ba4:	2800      	cmp	r0, #0
   27ba6:	f000 808b 	beq.w	27cc0 <aws_fota_mqtt_evt_handler+0x2c8>
		LOG_DBG("Job document update was accepted");
   27baa:	2304      	movs	r3, #4
   27bac:	f04f 0000 	mov.w	r0, #0
   27bb0:	f363 0007 	bfi	r0, r3, #0, #8
   27bb4:	f365 108f 	bfi	r0, r5, #6, #10
   27bb8:	4a75      	ldr	r2, [pc, #468]	; (27d90 <aws_fota_mqtt_evt_handler+0x398>)
   27bba:	4976      	ldr	r1, [pc, #472]	; (27d94 <aws_fota_mqtt_evt_handler+0x39c>)
   27bbc:	f017 fc61 	bl	3f482 <log_string_sync>
		err = get_published_payload(client, payload_buf, payload_len);
   27bc0:	4641      	mov	r1, r8
   27bc2:	4630      	mov	r0, r6
   27bc4:	f7ff fef8 	bl	279b8 <get_published_payload.constprop.1>
		if (err) {
   27bc8:	4604      	mov	r4, r0
   27bca:	2800      	cmp	r0, #0
   27bcc:	d154      	bne.n	27c78 <aws_fota_mqtt_evt_handler+0x280>
		doc_version_number++;
   27bce:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 27dc0 <aws_fota_mqtt_evt_handler+0x3c8>
		if (fota_state == DOWNLOAD_FIRMWARE) {
   27bd2:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 27d88 <aws_fota_mqtt_evt_handler+0x390>
		doc_version_number++;
   27bd6:	f8d9 3000 	ldr.w	r3, [r9]
		if (fota_state == DOWNLOAD_FIRMWARE) {
   27bda:	f89b 8000 	ldrb.w	r8, [fp]
		doc_version_number++;
   27bde:	3301      	adds	r3, #1
		if (fota_state == DOWNLOAD_FIRMWARE) {
   27be0:	f1b8 0f01 	cmp.w	r8, #1
		doc_version_number++;
   27be4:	f8c9 3000 	str.w	r3, [r9]
		if (fota_state == DOWNLOAD_FIRMWARE) {
   27be8:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 27dc4 <aws_fota_mqtt_evt_handler+0x3cc>
   27bec:	d124      	bne.n	27c38 <aws_fota_mqtt_evt_handler+0x240>
			LOG_INF("Start downloading firmware from %s%s",
   27bee:	2303      	movs	r3, #3
   27bf0:	485e      	ldr	r0, [pc, #376]	; (27d6c <aws_fota_mqtt_evt_handler+0x374>)
   27bf2:	f363 0407 	bfi	r4, r3, #0, #8
			execution_state = AWS_JOBS_IN_PROGRESS;
   27bf6:	f88a 8000 	strb.w	r8, [sl]
			LOG_INF("Start downloading firmware from %s%s",
   27bfa:	f017 fc54 	bl	3f4a6 <log_strdup>
   27bfe:	4606      	mov	r6, r0
   27c00:	4858      	ldr	r0, [pc, #352]	; (27d64 <aws_fota_mqtt_evt_handler+0x36c>)
   27c02:	f017 fc50 	bl	3f4a6 <log_strdup>
   27c06:	f365 148f 	bfi	r4, r5, #6, #10
   27c0a:	4603      	mov	r3, r0
   27c0c:	4632      	mov	r2, r6
   27c0e:	4620      	mov	r0, r4
   27c10:	4961      	ldr	r1, [pc, #388]	; (27d98 <aws_fota_mqtt_evt_handler+0x3a0>)
   27c12:	f017 fc36 	bl	3f482 <log_string_sync>
			err = fota_download_start(hostname, file_path);
   27c16:	4953      	ldr	r1, [pc, #332]	; (27d64 <aws_fota_mqtt_evt_handler+0x36c>)
   27c18:	4854      	ldr	r0, [pc, #336]	; (27d6c <aws_fota_mqtt_evt_handler+0x374>)
   27c1a:	f7ff fbf1 	bl	27400 <fota_download_start>
			if (err) {
   27c1e:	4604      	mov	r4, r0
   27c20:	2800      	cmp	r0, #0
   27c22:	d08c      	beq.n	27b3e <aws_fota_mqtt_evt_handler+0x146>
				LOG_ERR("Error when trying to start firmware"
   27c24:	f04f 0000 	mov.w	r0, #0
   27c28:	2301      	movs	r3, #1
   27c2a:	f363 0007 	bfi	r0, r3, #0, #8
   27c2e:	f365 108f 	bfi	r0, r5, #6, #10
   27c32:	4622      	mov	r2, r4
   27c34:	4959      	ldr	r1, [pc, #356]	; (27d9c <aws_fota_mqtt_evt_handler+0x3a4>)
   27c36:	e797      	b.n	27b68 <aws_fota_mqtt_evt_handler+0x170>
		} else if (execution_state == AWS_JOBS_IN_PROGRESS &&
   27c38:	f89a 3000 	ldrb.w	r3, [sl]
   27c3c:	2b01      	cmp	r3, #1
   27c3e:	d11f      	bne.n	27c80 <aws_fota_mqtt_evt_handler+0x288>
   27c40:	f1b8 0f02 	cmp.w	r8, #2
   27c44:	f47f af7b 	bne.w	27b3e <aws_fota_mqtt_evt_handler+0x146>
			LOG_INF("Firmware download completed");
   27c48:	2303      	movs	r3, #3
   27c4a:	f04f 0000 	mov.w	r0, #0
   27c4e:	f363 0007 	bfi	r0, r3, #0, #8
   27c52:	f365 108f 	bfi	r0, r5, #6, #10
   27c56:	4952      	ldr	r1, [pc, #328]	; (27da0 <aws_fota_mqtt_evt_handler+0x3a8>)
   27c58:	f017 fc13 	bl	3f482 <log_string_sync>
			err = update_job_execution(client, job_id,
   27c5c:	f8d9 3000 	ldr.w	r3, [r9]
   27c60:	f89b 2000 	ldrb.w	r2, [fp]
   27c64:	4641      	mov	r1, r8
   27c66:	4630      	mov	r0, r6
			execution_state = AWS_JOBS_SUCCEEDED;
   27c68:	f88a 8000 	strb.w	r8, [sl]
			err = update_job_execution(client, job_id,
   27c6c:	f7ff fdd8 	bl	27820 <update_job_execution.constprop.0>
			if (err) {
   27c70:	4604      	mov	r4, r0
   27c72:	2800      	cmp	r0, #0
   27c74:	f43f af63 	beq.w	27b3e <aws_fota_mqtt_evt_handler+0x146>
		if (err < 1) {
   27c78:	2c00      	cmp	r4, #0
   27c7a:	f73f af60 	bgt.w	27b3e <aws_fota_mqtt_evt_handler+0x146>
   27c7e:	e6e5      	b.n	27a4c <aws_fota_mqtt_evt_handler+0x54>
		} else if (execution_state == AWS_JOBS_SUCCEEDED &&
   27c80:	2b02      	cmp	r3, #2
   27c82:	f47f af5c 	bne.w	27b3e <aws_fota_mqtt_evt_handler+0x146>
   27c86:	f1b8 0f02 	cmp.w	r8, #2
   27c8a:	f47f af58 	bne.w	27b3e <aws_fota_mqtt_evt_handler+0x146>
			LOG_INF("Job document updated with SUCCEDED");
   27c8e:	2303      	movs	r3, #3
   27c90:	f04f 0000 	mov.w	r0, #0
   27c94:	f363 0007 	bfi	r0, r3, #0, #8
   27c98:	f365 108f 	bfi	r0, r5, #6, #10
   27c9c:	4941      	ldr	r1, [pc, #260]	; (27da4 <aws_fota_mqtt_evt_handler+0x3ac>)
   27c9e:	f017 fbf0 	bl	3f482 <log_string_sync>
			LOG_INF("Ready to reboot");
   27ca2:	2303      	movs	r3, #3
   27ca4:	f04f 0000 	mov.w	r0, #0
   27ca8:	f363 0007 	bfi	r0, r3, #0, #8
   27cac:	f365 108f 	bfi	r0, r5, #6, #10
   27cb0:	493d      	ldr	r1, [pc, #244]	; (27da8 <aws_fota_mqtt_evt_handler+0x3b0>)
   27cb2:	f017 fbe6 	bl	3f482 <log_string_sync>
			callback(AWS_FOTA_EVT_DONE);
   27cb6:	4b3d      	ldr	r3, [pc, #244]	; (27dac <aws_fota_mqtt_evt_handler+0x3b4>)
   27cb8:	4620      	mov	r0, r4
   27cba:	681b      	ldr	r3, [r3, #0]
   27cbc:	4798      	blx	r3
		if (err < 1) {
   27cbe:	e73e      	b.n	27b3e <aws_fota_mqtt_evt_handler+0x146>
	} else if (aws_jobs_cmp(update_topic, topic, topic_len, "rejected")) {
   27cc0:	4b3b      	ldr	r3, [pc, #236]	; (27db0 <aws_fota_mqtt_evt_handler+0x3b8>)
   27cc2:	464a      	mov	r2, r9
   27cc4:	4621      	mov	r1, r4
   27cc6:	482e      	ldr	r0, [pc, #184]	; (27d80 <aws_fota_mqtt_evt_handler+0x388>)
   27cc8:	f019 fc57 	bl	4157a <aws_jobs_cmp>
   27ccc:	b1c0      	cbz	r0, 27d00 <aws_fota_mqtt_evt_handler+0x308>
		LOG_ERR("Job document update was rejected");
   27cce:	2301      	movs	r3, #1
   27cd0:	f04f 0000 	mov.w	r0, #0
   27cd4:	f363 0007 	bfi	r0, r3, #0, #8
   27cd8:	f365 108f 	bfi	r0, r5, #6, #10
   27cdc:	4935      	ldr	r1, [pc, #212]	; (27db4 <aws_fota_mqtt_evt_handler+0x3bc>)
   27cde:	f017 fbd0 	bl	3f482 <log_string_sync>
		err = get_published_payload(client, payload_buf, payload_len);
   27ce2:	4641      	mov	r1, r8
   27ce4:	4630      	mov	r0, r6
   27ce6:	f7ff fe67 	bl	279b8 <get_published_payload.constprop.1>
		if (err) {
   27cea:	4604      	mov	r4, r0
   27cec:	2800      	cmp	r0, #0
   27cee:	f47f aef5 	bne.w	27adc <aws_fota_mqtt_evt_handler+0xe4>
		callback(AWS_FOTA_EVT_ERROR);
   27cf2:	4b2e      	ldr	r3, [pc, #184]	; (27dac <aws_fota_mqtt_evt_handler+0x3b4>)
   27cf4:	2001      	movs	r0, #1
   27cf6:	681b      	ldr	r3, [r3, #0]
   27cf8:	4798      	blx	r3
		return -EFAULT;
   27cfa:	f06f 040d 	mvn.w	r4, #13
   27cfe:	e6a5      	b.n	27a4c <aws_fota_mqtt_evt_handler+0x54>
	LOG_INF("Recived an unhandled MQTT publish event on topic: %s",
   27d00:	2303      	movs	r3, #3
   27d02:	f04f 0600 	mov.w	r6, #0
   27d06:	4620      	mov	r0, r4
   27d08:	f363 0607 	bfi	r6, r3, #0, #8
   27d0c:	f017 fbcb 	bl	3f4a6 <log_strdup>
   27d10:	f365 168f 	bfi	r6, r5, #6, #10
   27d14:	4602      	mov	r2, r0
   27d16:	4630      	mov	r0, r6
   27d18:	4927      	ldr	r1, [pc, #156]	; (27db8 <aws_fota_mqtt_evt_handler+0x3c0>)
			LOG_ERR("MQTT PUBACK error %d", evt->result);
   27d1a:	f017 fbb2 	bl	3f482 <log_string_sync>
			return 0;
   27d1e:	2400      	movs	r4, #0
   27d20:	e694      	b.n	27a4c <aws_fota_mqtt_evt_handler+0x54>
			const struct mqtt_puback_param ack = {
   27d22:	8b3b      	ldrh	r3, [r7, #24]
			err = mqtt_publish_qos1_ack(c, &ack);
   27d24:	a903      	add	r1, sp, #12
			const struct mqtt_puback_param ack = {
   27d26:	f8ad 300c 	strh.w	r3, [sp, #12]
			err = mqtt_publish_qos1_ack(c, &ack);
   27d2a:	4b24      	ldr	r3, [pc, #144]	; (27dbc <aws_fota_mqtt_evt_handler+0x3c4>)
   27d2c:	6818      	ldr	r0, [r3, #0]
   27d2e:	f018 f98a 	bl	40046 <mqtt_publish_qos1_ack>
		return 1;
   27d32:	1e04      	subs	r4, r0, #0
   27d34:	bf08      	it	eq
   27d36:	2401      	moveq	r4, #1
   27d38:	e688      	b.n	27a4c <aws_fota_mqtt_evt_handler+0x54>
   27d3a:	bf00      	nop
   27d3c:	2002c1c4 	.word	0x2002c1c4
   27d40:	00042fb4 	.word	0x00042fb4
   27d44:	00042fcc 	.word	0x00042fcc
   27d48:	00048b55 	.word	0x00048b55
   27d4c:	2002bfef 	.word	0x2002bfef
   27d50:	00048b7e 	.word	0x00048b7e
   27d54:	00048b84 	.word	0x00048b84
   27d58:	00048baa 	.word	0x00048baa
   27d5c:	0004a184 	.word	0x0004a184
   27d60:	00048bbd 	.word	0x00048bbd
   27d64:	2002beef 	.word	0x2002beef
   27d68:	2002c183 	.word	0x2002c183
   27d6c:	2002c084 	.word	0x2002c084
   27d70:	2002c259 	.word	0x2002c259
   27d74:	00048be0 	.word	0x00048be0
   27d78:	00048c00 	.word	0x00048c00
   27d7c:	00048c17 	.word	0x00048c17
   27d80:	2002c79f 	.word	0x2002c79f
   27d84:	00048c46 	.word	0x00048c46
   27d88:	2002bfee 	.word	0x2002bfee
   27d8c:	00048c8b 	.word	0x00048c8b
   27d90:	00048b21 	.word	0x00048b21
   27d94:	00048c6f 	.word	0x00048c6f
   27d98:	00048c94 	.word	0x00048c94
   27d9c:	00048cb9 	.word	0x00048cb9
   27da0:	00048ce9 	.word	0x00048ce9
   27da4:	00048d05 	.word	0x00048d05
   27da8:	00048d28 	.word	0x00048d28
   27dac:	20024690 	.word	0x20024690
   27db0:	00048d50 	.word	0x00048d50
   27db4:	00048d38 	.word	0x00048d38
   27db8:	00048d59 	.word	0x00048d59
   27dbc:	2002468c 	.word	0x2002468c
   27dc0:	20031c58 	.word	0x20031c58
   27dc4:	2002beee 	.word	0x2002beee
		if (evt->result != 0) {
   27dc8:	69cc      	ldr	r4, [r1, #28]
   27dca:	2c00      	cmp	r4, #0
   27dcc:	f43f ae3e 	beq.w	27a4c <aws_fota_mqtt_evt_handler+0x54>
			LOG_ERR("MQTT PUBACK error %d", evt->result);
   27dd0:	2301      	movs	r3, #1
   27dd2:	f04f 0000 	mov.w	r0, #0
   27dd6:	4a25      	ldr	r2, [pc, #148]	; (27e6c <aws_fota_mqtt_evt_handler+0x474>)
   27dd8:	f363 0007 	bfi	r0, r3, #0, #8
   27ddc:	4b24      	ldr	r3, [pc, #144]	; (27e70 <aws_fota_mqtt_evt_handler+0x478>)
   27dde:	4925      	ldr	r1, [pc, #148]	; (27e74 <aws_fota_mqtt_evt_handler+0x47c>)
   27de0:	1a9b      	subs	r3, r3, r2
   27de2:	08db      	lsrs	r3, r3, #3
   27de4:	f363 108f 	bfi	r0, r3, #6, #10
   27de8:	4622      	mov	r2, r4
   27dea:	e796      	b.n	27d1a <aws_fota_mqtt_evt_handler+0x322>
		if (evt->result != 0) {
   27dec:	69cc      	ldr	r4, [r1, #28]
   27dee:	2c00      	cmp	r4, #0
   27df0:	d195      	bne.n	27d1e <aws_fota_mqtt_evt_handler+0x326>
		if (evt->param.suback.message_id == SUBSCRIBE_NOTIFY_NEXT) {
   27df2:	888b      	ldrh	r3, [r1, #4]
   27df4:	f5b3 6f04 	cmp.w	r3, #2112	; 0x840
   27df8:	d117      	bne.n	27e2a <aws_fota_mqtt_evt_handler+0x432>
			LOG_INF("subscribed to notify-next topic");
   27dfa:	2303      	movs	r3, #3
   27dfc:	f04f 0000 	mov.w	r0, #0
   27e00:	4a1a      	ldr	r2, [pc, #104]	; (27e6c <aws_fota_mqtt_evt_handler+0x474>)
   27e02:	f363 0007 	bfi	r0, r3, #0, #8
   27e06:	4b1a      	ldr	r3, [pc, #104]	; (27e70 <aws_fota_mqtt_evt_handler+0x478>)
   27e08:	491b      	ldr	r1, [pc, #108]	; (27e78 <aws_fota_mqtt_evt_handler+0x480>)
   27e0a:	1a9b      	subs	r3, r3, r2
   27e0c:	08db      	lsrs	r3, r3, #3
   27e0e:	f363 108f 	bfi	r0, r3, #6, #10
   27e12:	f017 fb36 	bl	3f482 <log_string_sync>
			err = aws_jobs_get_job_execution(client, "$next",
   27e16:	4a19      	ldr	r2, [pc, #100]	; (27e7c <aws_fota_mqtt_evt_handler+0x484>)
   27e18:	4919      	ldr	r1, [pc, #100]	; (27e80 <aws_fota_mqtt_evt_handler+0x488>)
   27e1a:	4630      	mov	r0, r6
   27e1c:	f7ff fcea 	bl	277f4 <aws_jobs_get_job_execution>
			if (err) {
   27e20:	4604      	mov	r4, r0
   27e22:	2800      	cmp	r0, #0
   27e24:	f43f ae8f 	beq.w	27b46 <aws_fota_mqtt_evt_handler+0x14e>
   27e28:	e610      	b.n	27a4c <aws_fota_mqtt_evt_handler+0x54>
		if (evt->param.suback.message_id == SUBSCRIBE_GET) {
   27e2a:	f640 0241 	movw	r2, #2113	; 0x841
   27e2e:	4293      	cmp	r3, r2
   27e30:	d10c      	bne.n	27e4c <aws_fota_mqtt_evt_handler+0x454>
			LOG_INF("subscribed to get topic");
   27e32:	2303      	movs	r3, #3
   27e34:	f04f 0000 	mov.w	r0, #0
   27e38:	4a0c      	ldr	r2, [pc, #48]	; (27e6c <aws_fota_mqtt_evt_handler+0x474>)
   27e3a:	f363 0007 	bfi	r0, r3, #0, #8
   27e3e:	4b0c      	ldr	r3, [pc, #48]	; (27e70 <aws_fota_mqtt_evt_handler+0x478>)
   27e40:	4910      	ldr	r1, [pc, #64]	; (27e84 <aws_fota_mqtt_evt_handler+0x48c>)
   27e42:	1a9b      	subs	r3, r3, r2
   27e44:	08db      	lsrs	r3, r3, #3
   27e46:	f363 108f 	bfi	r0, r3, #6, #10
   27e4a:	e5fd      	b.n	27a48 <aws_fota_mqtt_evt_handler+0x50>
		if ((fota_state == DOWNLOAD_FIRMWARE) &&
   27e4c:	4a0e      	ldr	r2, [pc, #56]	; (27e88 <aws_fota_mqtt_evt_handler+0x490>)
   27e4e:	7812      	ldrb	r2, [r2, #0]
   27e50:	2a01      	cmp	r2, #1
   27e52:	f47f adfb 	bne.w	27a4c <aws_fota_mqtt_evt_handler+0x54>
   27e56:	f640 0143 	movw	r1, #2115	; 0x843
   27e5a:	428b      	cmp	r3, r1
   27e5c:	f47f adf6 	bne.w	27a4c <aws_fota_mqtt_evt_handler+0x54>
			err = update_job_execution(client, job_id,
   27e60:	4b0a      	ldr	r3, [pc, #40]	; (27e8c <aws_fota_mqtt_evt_handler+0x494>)
   27e62:	4611      	mov	r1, r2
   27e64:	681b      	ldr	r3, [r3, #0]
   27e66:	f7ff fcdb 	bl	27820 <update_job_execution.constprop.0>
   27e6a:	e7d9      	b.n	27e20 <aws_fota_mqtt_evt_handler+0x428>
   27e6c:	00042fb4 	.word	0x00042fb4
   27e70:	00042fcc 	.word	0x00042fcc
   27e74:	00048d8e 	.word	0x00048d8e
   27e78:	00048da3 	.word	0x00048da3
   27e7c:	2002bfef 	.word	0x2002bfef
   27e80:	00048b7e 	.word	0x00048b7e
   27e84:	00048dc3 	.word	0x00048dc3
   27e88:	2002bfee 	.word	0x2002bfee
   27e8c:	20031c58 	.word	0x20031c58

00027e90 <aws_fota_init>:

int aws_fota_init(struct mqtt_client *const client,
		  const char *app_version,
		  aws_fota_callback_t evt_handler)
{
   27e90:	b570      	push	{r4, r5, r6, lr}
   27e92:	460d      	mov	r5, r1
   27e94:	4614      	mov	r4, r2
	int err;

	if (client == NULL || app_version == NULL || evt_handler == NULL) {
   27e96:	4606      	mov	r6, r0
   27e98:	b918      	cbnz	r0, 27ea2 <aws_fota_init+0x12>
		return -EINVAL;
   27e9a:	f06f 0415 	mvn.w	r4, #21
	}

	strncpy(version, app_version, CONFIG_AWS_FOTA_VERSION_STRING_MAX_LEN);

	return 0;
}
   27e9e:	4620      	mov	r0, r4
   27ea0:	bd70      	pop	{r4, r5, r6, pc}
	if (client == NULL || app_version == NULL || evt_handler == NULL) {
   27ea2:	2900      	cmp	r1, #0
   27ea4:	d0f9      	beq.n	27e9a <aws_fota_init+0xa>
   27ea6:	2a00      	cmp	r2, #0
   27ea8:	d0f7      	beq.n	27e9a <aws_fota_init+0xa>
	if (strlen(app_version) >= CONFIG_AWS_FOTA_VERSION_STRING_MAX_LEN) {
   27eaa:	4608      	mov	r0, r1
   27eac:	f7f2 f81a 	bl	19ee4 <strlen>
   27eb0:	287f      	cmp	r0, #127	; 0x7f
   27eb2:	d8f2      	bhi.n	27e9a <aws_fota_init+0xa>
	c = client;
   27eb4:	4b0f      	ldr	r3, [pc, #60]	; (27ef4 <aws_fota_init+0x64>)
	err = fota_download_init(http_fota_handler);
   27eb6:	4810      	ldr	r0, [pc, #64]	; (27ef8 <aws_fota_init+0x68>)
	c = client;
   27eb8:	601e      	str	r6, [r3, #0]
	callback = evt_handler;
   27eba:	4b10      	ldr	r3, [pc, #64]	; (27efc <aws_fota_init+0x6c>)
   27ebc:	601c      	str	r4, [r3, #0]
	err = fota_download_init(http_fota_handler);
   27ebe:	f7ff facb 	bl	27458 <fota_download_init>
	if (err != 0) {
   27ec2:	4604      	mov	r4, r0
   27ec4:	b178      	cbz	r0, 27ee6 <aws_fota_init+0x56>
		LOG_ERR("fota_download_init error %d", err);
   27ec6:	2301      	movs	r3, #1
   27ec8:	f04f 0000 	mov.w	r0, #0
   27ecc:	4a0c      	ldr	r2, [pc, #48]	; (27f00 <aws_fota_init+0x70>)
   27ece:	f363 0007 	bfi	r0, r3, #0, #8
   27ed2:	4b0c      	ldr	r3, [pc, #48]	; (27f04 <aws_fota_init+0x74>)
   27ed4:	490c      	ldr	r1, [pc, #48]	; (27f08 <aws_fota_init+0x78>)
   27ed6:	1a9b      	subs	r3, r3, r2
   27ed8:	08db      	lsrs	r3, r3, #3
   27eda:	f363 108f 	bfi	r0, r3, #6, #10
   27ede:	4622      	mov	r2, r4
   27ee0:	f017 facf 	bl	3f482 <log_string_sync>
		return err;
   27ee4:	e7db      	b.n	27e9e <aws_fota_init+0xe>
	strncpy(version, app_version, CONFIG_AWS_FOTA_VERSION_STRING_MAX_LEN);
   27ee6:	2280      	movs	r2, #128	; 0x80
   27ee8:	4629      	mov	r1, r5
   27eea:	4808      	ldr	r0, [pc, #32]	; (27f0c <aws_fota_init+0x7c>)
   27eec:	f019 ff6c 	bl	41dc8 <strncpy>
	return 0;
   27ef0:	e7d5      	b.n	27e9e <aws_fota_init+0xe>
   27ef2:	bf00      	nop
   27ef4:	2002468c 	.word	0x2002468c
   27ef8:	000278f5 	.word	0x000278f5
   27efc:	20024690 	.word	0x20024690
   27f00:	00042fb4 	.word	0x00042fb4
   27f04:	00042fcc 	.word	0x00042fcc
   27f08:	00048b39 	.word	0x00048b39
   27f0c:	2002c834 	.word	0x2002c834

00027f10 <aws_fota_parse_notify_next_document>:
}

int aws_fota_parse_notify_next_document(char *job_document,
		u32_t payload_len, char *job_id_buf, char *hostname_buf,
		char *file_path_buf)
{
   27f10:	b570      	push	{r4, r5, r6, lr}
   27f12:	b090      	sub	sp, #64	; 0x40
   27f14:	461d      	mov	r5, r3
	struct notify_next_obj job;
	struct job_document_obj *job_doc_obj;

	int ret = json_obj_parse(job_document,
   27f16:	ab03      	add	r3, sp, #12
   27f18:	9300      	str	r3, [sp, #0]
{
   27f1a:	4616      	mov	r6, r2
	int ret = json_obj_parse(job_document,
   27f1c:	2302      	movs	r3, #2
   27f1e:	4a0d      	ldr	r2, [pc, #52]	; (27f54 <aws_fota_parse_notify_next_document+0x44>)
   27f20:	f7f7 f9ea 	bl	1f2f8 <json_obj_parse>
				 ARRAY_SIZE(notify_next_obj_descr),
				 &job);
	job_doc_obj = &job.execution.job_document;

	/* Check if the execution field of the object has been parsed */
	if (ret & 0x02) {
   27f24:	0783      	lsls	r3, r0, #30
	int ret = json_obj_parse(job_document,
   27f26:	4604      	mov	r4, r0
	if (ret & 0x02) {
   27f28:	d511      	bpl.n	27f4e <aws_fota_parse_notify_next_document+0x3e>
		if (job.execution.job_id != 0) {
   27f2a:	9904      	ldr	r1, [sp, #16]
   27f2c:	b119      	cbz	r1, 27f36 <aws_fota_parse_notify_next_document+0x26>
			strncpy_nullterm(job_id_buf, job.execution.job_id,
   27f2e:	2241      	movs	r2, #65	; 0x41
   27f30:	4630      	mov	r0, r6
   27f32:	f019 fb57 	bl	415e4 <strncpy_nullterm>
				      AWS_JOBS_JOB_ID_MAX_LEN);
		}
		if (job_doc_obj->location.host != 0) {
   27f36:	990e      	ldr	r1, [sp, #56]	; 0x38
   27f38:	b119      	cbz	r1, 27f42 <aws_fota_parse_notify_next_document+0x32>
			strncpy_nullterm(hostname_buf,
   27f3a:	22ff      	movs	r2, #255	; 0xff
   27f3c:	4628      	mov	r0, r5
   27f3e:	f019 fb51 	bl	415e4 <strncpy_nullterm>
					 job_doc_obj->location.host,
					 CONFIG_AWS_FOTA_HOSTNAME_MAX_LEN);
		}
		if (job_doc_obj->location.path != 0) {
   27f42:	990f      	ldr	r1, [sp, #60]	; 0x3c
   27f44:	b119      	cbz	r1, 27f4e <aws_fota_parse_notify_next_document+0x3e>
			strncpy_nullterm(file_path_buf,
   27f46:	22ff      	movs	r2, #255	; 0xff
   27f48:	9814      	ldr	r0, [sp, #80]	; 0x50
   27f4a:	f019 fb4b 	bl	415e4 <strncpy_nullterm>
					  CONFIG_AWS_FOTA_FILE_PATH_MAX_LEN);
		}

	}
	return ret;
}
   27f4e:	4620      	mov	r0, r4
   27f50:	b010      	add	sp, #64	; 0x40
   27f52:	bd70      	pop	{r4, r5, r6, pc}
   27f54:	00043a38 	.word	0x00043a38

00027f58 <dfu_target_img_type>:
LOG_MODULE_REGISTER(dfu_target, CONFIG_DFU_TARGET_LOG_LEVEL);

static const struct dfu_target *current_target;

int dfu_target_img_type(const void *const buf, size_t len)
{
   27f58:	b538      	push	{r3, r4, r5, lr}
   27f5a:	4605      	mov	r5, r0
   27f5c:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_DFU_TARGET_MCUBOOT) &&
	    dfu_target_mcuboot_identify(buf)) {
   27f5e:	f000 fb97 	bl	28690 <dfu_target_mcuboot_identify>
	if (IS_ENABLED(CONFIG_DFU_TARGET_MCUBOOT) &&
   27f62:	b9a0      	cbnz	r0, 27f8e <dfu_target_img_type+0x36>
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
	}

	if (IS_ENABLED(CONFIG_DFU_TARGET_MODEM) &&
	    dfu_target_modem_identify(buf)) {
   27f64:	4628      	mov	r0, r5
   27f66:	f000 f99d 	bl	282a4 <dfu_target_modem_identify>
	if (IS_ENABLED(CONFIG_DFU_TARGET_MODEM) &&
   27f6a:	b990      	cbnz	r0, 27f92 <dfu_target_img_type+0x3a>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
	}

	if (len < MIN_SIZE_IDENTIFY_BUF) {
   27f6c:	2c1f      	cmp	r4, #31
   27f6e:	d912      	bls.n	27f96 <dfu_target_img_type+0x3e>
		return -EAGAIN;
	}

	LOG_ERR("No supported image type found");
   27f70:	2301      	movs	r3, #1
   27f72:	4a0a      	ldr	r2, [pc, #40]	; (27f9c <dfu_target_img_type+0x44>)
   27f74:	f363 0007 	bfi	r0, r3, #0, #8
   27f78:	4b09      	ldr	r3, [pc, #36]	; (27fa0 <dfu_target_img_type+0x48>)
   27f7a:	490a      	ldr	r1, [pc, #40]	; (27fa4 <dfu_target_img_type+0x4c>)
   27f7c:	1a9b      	subs	r3, r3, r2
   27f7e:	08db      	lsrs	r3, r3, #3
   27f80:	f363 108f 	bfi	r0, r3, #6, #10
   27f84:	f017 fa7d 	bl	3f482 <log_string_sync>
	return -ENOTSUP;
   27f88:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   27f8c:	bd38      	pop	{r3, r4, r5, pc}
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
   27f8e:	2001      	movs	r0, #1
   27f90:	e7fc      	b.n	27f8c <dfu_target_img_type+0x34>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
   27f92:	2002      	movs	r0, #2
   27f94:	e7fa      	b.n	27f8c <dfu_target_img_type+0x34>
		return -EAGAIN;
   27f96:	f06f 000a 	mvn.w	r0, #10
   27f9a:	e7f7      	b.n	27f8c <dfu_target_img_type+0x34>
   27f9c:	00042fb4 	.word	0x00042fb4
   27fa0:	00042ff4 	.word	0x00042ff4
   27fa4:	0004906b 	.word	0x0004906b

00027fa8 <dfu_target_init>:

int dfu_target_init(int img_type, size_t file_size)
{
	const struct dfu_target *new_target = NULL;

	if (IS_ENABLED(CONFIG_DFU_TARGET_MCUBOOT) &&
   27fa8:	2801      	cmp	r0, #1
{
   27faa:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_DFU_TARGET_MCUBOOT) &&
   27fac:	d00e      	beq.n	27fcc <dfu_target_init+0x24>
	    img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
		new_target = &dfu_target_mcuboot;
	} else if (IS_ENABLED(CONFIG_DFU_TARGET_MODEM) &&
   27fae:	2802      	cmp	r0, #2
   27fb0:	d10e      	bne.n	27fd0 <dfu_target_init+0x28>
		   img_type == DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
		new_target = &dfu_target_modem;
   27fb2:	4b11      	ldr	r3, [pc, #68]	; (27ff8 <dfu_target_init+0x50>)
	/* The user is re-initializing with an previously aborted target.
	 * Avoid re-initializing generally to ensure that the download can
	 * continue where it left off. Re-initializing is required for modem
	 * upgrades to re-open the DFU socket that is closed on abort.
	 */
	if (new_target == current_target
   27fb4:	4a11      	ldr	r2, [pc, #68]	; (27ffc <dfu_target_init+0x54>)
   27fb6:	6814      	ldr	r4, [r2, #0]
   27fb8:	42a3      	cmp	r3, r4
   27fba:	d101      	bne.n	27fc0 <dfu_target_init+0x18>
	   && img_type != DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   27fbc:	2802      	cmp	r0, #2
   27fbe:	d118      	bne.n	27ff2 <dfu_target_init+0x4a>
	}

	current_target = new_target;

	return current_target->init(file_size);
}
   27fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	current_target = new_target;
   27fc4:	6013      	str	r3, [r2, #0]
	return current_target->init(file_size);
   27fc6:	4608      	mov	r0, r1
   27fc8:	681b      	ldr	r3, [r3, #0]
   27fca:	4718      	bx	r3
		new_target = &dfu_target_mcuboot;
   27fcc:	4b0c      	ldr	r3, [pc, #48]	; (28000 <dfu_target_init+0x58>)
   27fce:	e7f1      	b.n	27fb4 <dfu_target_init+0xc>
		LOG_ERR("Unknown image type");
   27fd0:	2301      	movs	r3, #1
   27fd2:	f04f 0000 	mov.w	r0, #0
   27fd6:	4a0b      	ldr	r2, [pc, #44]	; (28004 <dfu_target_init+0x5c>)
   27fd8:	f363 0007 	bfi	r0, r3, #0, #8
   27fdc:	4b0a      	ldr	r3, [pc, #40]	; (28008 <dfu_target_init+0x60>)
   27fde:	490b      	ldr	r1, [pc, #44]	; (2800c <dfu_target_init+0x64>)
   27fe0:	1a9b      	subs	r3, r3, r2
   27fe2:	08db      	lsrs	r3, r3, #3
   27fe4:	f363 108f 	bfi	r0, r3, #6, #10
   27fe8:	f017 fa4b 	bl	3f482 <log_string_sync>
		return -ENOTSUP;
   27fec:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   27ff0:	bd10      	pop	{r4, pc}
		return 0;
   27ff2:	2000      	movs	r0, #0
   27ff4:	e7fc      	b.n	27ff0 <dfu_target_init+0x48>
   27ff6:	bf00      	nop
   27ff8:	00043a68 	.word	0x00043a68
   27ffc:	20024694 	.word	0x20024694
   28000:	00043a58 	.word	0x00043a58
   28004:	00042fb4 	.word	0x00042fb4
   28008:	00042ff4 	.word	0x00042ff4
   2800c:	00049089 	.word	0x00049089

00028010 <dfu_target_offset_get>:

int dfu_target_offset_get(size_t *offset)
{
	if (current_target == NULL) {
   28010:	4b03      	ldr	r3, [pc, #12]	; (28020 <dfu_target_offset_get+0x10>)
   28012:	681b      	ldr	r3, [r3, #0]
   28014:	b10b      	cbz	r3, 2801a <dfu_target_offset_get+0xa>
		return -EACCES;
	}

	return current_target->offset_get(offset);
   28016:	685b      	ldr	r3, [r3, #4]
   28018:	4718      	bx	r3
}
   2801a:	f06f 000c 	mvn.w	r0, #12
   2801e:	4770      	bx	lr
   28020:	20024694 	.word	0x20024694

00028024 <dfu_target_write>:

int dfu_target_write(const void *const buf, size_t len)
{
	if (current_target == NULL || buf == NULL) {
   28024:	4b04      	ldr	r3, [pc, #16]	; (28038 <dfu_target_write+0x14>)
   28026:	681b      	ldr	r3, [r3, #0]
   28028:	b113      	cbz	r3, 28030 <dfu_target_write+0xc>
   2802a:	b108      	cbz	r0, 28030 <dfu_target_write+0xc>
		return -EACCES;
	}

	return current_target->write(buf, len);
   2802c:	689b      	ldr	r3, [r3, #8]
   2802e:	4718      	bx	r3
}
   28030:	f06f 000c 	mvn.w	r0, #12
   28034:	4770      	bx	lr
   28036:	bf00      	nop
   28038:	20024694 	.word	0x20024694

0002803c <dfu_target_done>:

int dfu_target_done(bool successful)
{
   2803c:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (current_target == NULL) {
   2803e:	4d0f      	ldr	r5, [pc, #60]	; (2807c <dfu_target_done+0x40>)
{
   28040:	4606      	mov	r6, r0
	if (current_target == NULL) {
   28042:	682b      	ldr	r3, [r5, #0]
   28044:	b1bb      	cbz	r3, 28076 <dfu_target_done+0x3a>
		return -EACCES;
	}

	err = current_target->done(successful);
   28046:	68db      	ldr	r3, [r3, #12]
   28048:	4798      	blx	r3
	if (err != 0) {
   2804a:	4604      	mov	r4, r0
   2804c:	b178      	cbz	r0, 2806e <dfu_target_done+0x32>
		LOG_ERR("Unable to clean up dfu_target");
   2804e:	2301      	movs	r3, #1
   28050:	f04f 0000 	mov.w	r0, #0
   28054:	4a0a      	ldr	r2, [pc, #40]	; (28080 <dfu_target_done+0x44>)
   28056:	f363 0007 	bfi	r0, r3, #0, #8
   2805a:	4b0a      	ldr	r3, [pc, #40]	; (28084 <dfu_target_done+0x48>)
   2805c:	490a      	ldr	r1, [pc, #40]	; (28088 <dfu_target_done+0x4c>)
   2805e:	1a9b      	subs	r3, r3, r2
   28060:	08db      	lsrs	r3, r3, #3
   28062:	f363 108f 	bfi	r0, r3, #6, #10
   28066:	f017 fa0c 	bl	3f482 <log_string_sync>
	if (successful) {
		current_target = NULL;
	}

	return 0;
}
   2806a:	4620      	mov	r0, r4
   2806c:	bd70      	pop	{r4, r5, r6, pc}
	if (successful) {
   2806e:	2e00      	cmp	r6, #0
   28070:	d0fb      	beq.n	2806a <dfu_target_done+0x2e>
		current_target = NULL;
   28072:	6028      	str	r0, [r5, #0]
   28074:	e7f9      	b.n	2806a <dfu_target_done+0x2e>
		return -EACCES;
   28076:	f06f 040c 	mvn.w	r4, #12
   2807a:	e7f6      	b.n	2806a <dfu_target_done+0x2e>
   2807c:	20024694 	.word	0x20024694
   28080:	00042fb4 	.word	0x00042fb4
   28084:	00042ff4 	.word	0x00042ff4
   28088:	0004904d 	.word	0x0004904d

0002808c <getsockopt.constprop.2>:
static inline int getsockopt(int sock, int level, int optname,
   2808c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   28090:	4c15      	ldr	r4, [pc, #84]	; (280e8 <getsockopt.constprop.2+0x5c>)
static inline int getsockopt(int sock, int level, int optname,
   28092:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   28094:	6823      	ldr	r3, [r4, #0]
static inline int getsockopt(int sock, int level, int optname,
   28096:	4605      	mov	r5, r0
   28098:	460e      	mov	r6, r1
   2809a:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(socket_ops);
   2809c:	b94b      	cbnz	r3, 280b2 <getsockopt.constprop.2+0x26>
   2809e:	4913      	ldr	r1, [pc, #76]	; (280ec <getsockopt.constprop.2+0x60>)
   280a0:	4813      	ldr	r0, [pc, #76]	; (280f0 <getsockopt.constprop.2+0x64>)
   280a2:	2360      	movs	r3, #96	; 0x60
   280a4:	4a13      	ldr	r2, [pc, #76]	; (280f4 <getsockopt.constprop.2+0x68>)
   280a6:	f017 f9ce 	bl	3f446 <printk>
   280aa:	2160      	movs	r1, #96	; 0x60
   280ac:	4811      	ldr	r0, [pc, #68]	; (280f4 <getsockopt.constprop.2+0x68>)
   280ae:	f017 f9d7 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->getsockopt);
   280b2:	6823      	ldr	r3, [r4, #0]
   280b4:	6a1b      	ldr	r3, [r3, #32]
   280b6:	b94b      	cbnz	r3, 280cc <getsockopt.constprop.2+0x40>
   280b8:	490f      	ldr	r1, [pc, #60]	; (280f8 <getsockopt.constprop.2+0x6c>)
   280ba:	480d      	ldr	r0, [pc, #52]	; (280f0 <getsockopt.constprop.2+0x64>)
   280bc:	2361      	movs	r3, #97	; 0x61
   280be:	4a0d      	ldr	r2, [pc, #52]	; (280f4 <getsockopt.constprop.2+0x68>)
   280c0:	f017 f9c1 	bl	3f446 <printk>
   280c4:	2161      	movs	r1, #97	; 0x61
   280c6:	480b      	ldr	r0, [pc, #44]	; (280f4 <getsockopt.constprop.2+0x68>)
   280c8:	f017 f9ca 	bl	3f460 <assert_post_action>
	return socket_ops->getsockopt(sock, level, optname, optval, optlen);
   280cc:	6823      	ldr	r3, [r4, #0]
   280ce:	f8cd 8000 	str.w	r8, [sp]
   280d2:	6a1c      	ldr	r4, [r3, #32]
   280d4:	4632      	mov	r2, r6
   280d6:	463b      	mov	r3, r7
   280d8:	f240 2103 	movw	r1, #515	; 0x203
   280dc:	4628      	mov	r0, r5
   280de:	47a0      	blx	r4
}
   280e0:	b002      	add	sp, #8
   280e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   280e6:	bf00      	nop
   280e8:	20023934 	.word	0x20023934
   280ec:	00045442 	.word	0x00045442
   280f0:	00045316 	.word	0x00045316
   280f4:	00045419 	.word	0x00045419
   280f8:	000492dd 	.word	0x000492dd

000280fc <get_modem_error>:
{
	int rc;
	int err = 0;
	socklen_t len;

	len = sizeof(err);
   280fc:	2200      	movs	r2, #0
   280fe:	2304      	movs	r3, #4
{
   28100:	b513      	push	{r0, r1, r4, lr}
	rc = getsockopt(fd, SOL_DFU, SO_DFU_ERROR, &err, &len);
   28102:	480f      	ldr	r0, [pc, #60]	; (28140 <get_modem_error+0x44>)
	len = sizeof(err);
   28104:	e9cd 2300 	strd	r2, r3, [sp]
	rc = getsockopt(fd, SOL_DFU, SO_DFU_ERROR, &err, &len);
   28108:	2114      	movs	r1, #20
   2810a:	446b      	add	r3, sp
   2810c:	466a      	mov	r2, sp
   2810e:	6800      	ldr	r0, [r0, #0]
   28110:	f7ff ffbc 	bl	2808c <getsockopt.constprop.2>
	if (rc) {
   28114:	b188      	cbz	r0, 2813a <get_modem_error+0x3e>
		LOG_ERR("Unable to fetch modem error, errno %d", errno);
   28116:	2301      	movs	r3, #1
   28118:	f04f 0400 	mov.w	r4, #0
   2811c:	4a09      	ldr	r2, [pc, #36]	; (28144 <get_modem_error+0x48>)
   2811e:	f363 0407 	bfi	r4, r3, #0, #8
   28122:	4b09      	ldr	r3, [pc, #36]	; (28148 <get_modem_error+0x4c>)
   28124:	1a9b      	subs	r3, r3, r2
   28126:	08db      	lsrs	r3, r3, #3
   28128:	f363 148f 	bfi	r4, r3, #6, #10
   2812c:	f017 fbc0 	bl	3f8b0 <__errno>
   28130:	4906      	ldr	r1, [pc, #24]	; (2814c <get_modem_error+0x50>)
   28132:	6802      	ldr	r2, [r0, #0]
   28134:	4620      	mov	r0, r4
   28136:	f017 f9a4 	bl	3f482 <log_string_sync>
	}

	return err;
}
   2813a:	9800      	ldr	r0, [sp, #0]
   2813c:	b002      	add	sp, #8
   2813e:	bd10      	pop	{r4, pc}
   28140:	20024698 	.word	0x20024698
   28144:	00042fb4 	.word	0x00042fb4
   28148:	00043004 	.word	0x00043004
   2814c:	000492b7 	.word	0x000492b7

00028150 <setsockopt.constprop.3>:
static inline int setsockopt(int sock, int level, int optname,
   28150:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   28154:	4c15      	ldr	r4, [pc, #84]	; (281ac <setsockopt.constprop.3+0x5c>)
static inline int setsockopt(int sock, int level, int optname,
   28156:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   28158:	6823      	ldr	r3, [r4, #0]
static inline int setsockopt(int sock, int level, int optname,
   2815a:	4605      	mov	r5, r0
   2815c:	460e      	mov	r6, r1
   2815e:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(socket_ops);
   28160:	b94b      	cbnz	r3, 28176 <setsockopt.constprop.3+0x26>
   28162:	4913      	ldr	r1, [pc, #76]	; (281b0 <setsockopt.constprop.3+0x60>)
   28164:	4813      	ldr	r0, [pc, #76]	; (281b4 <setsockopt.constprop.3+0x64>)
   28166:	2357      	movs	r3, #87	; 0x57
   28168:	4a13      	ldr	r2, [pc, #76]	; (281b8 <setsockopt.constprop.3+0x68>)
   2816a:	f017 f96c 	bl	3f446 <printk>
   2816e:	2157      	movs	r1, #87	; 0x57
   28170:	4811      	ldr	r0, [pc, #68]	; (281b8 <setsockopt.constprop.3+0x68>)
   28172:	f017 f975 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->setsockopt);
   28176:	6823      	ldr	r3, [r4, #0]
   28178:	69db      	ldr	r3, [r3, #28]
   2817a:	b94b      	cbnz	r3, 28190 <setsockopt.constprop.3+0x40>
   2817c:	490f      	ldr	r1, [pc, #60]	; (281bc <setsockopt.constprop.3+0x6c>)
   2817e:	480d      	ldr	r0, [pc, #52]	; (281b4 <setsockopt.constprop.3+0x64>)
   28180:	2358      	movs	r3, #88	; 0x58
   28182:	4a0d      	ldr	r2, [pc, #52]	; (281b8 <setsockopt.constprop.3+0x68>)
   28184:	f017 f95f 	bl	3f446 <printk>
   28188:	2158      	movs	r1, #88	; 0x58
   2818a:	480b      	ldr	r0, [pc, #44]	; (281b8 <setsockopt.constprop.3+0x68>)
   2818c:	f017 f968 	bl	3f460 <assert_post_action>
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   28190:	6823      	ldr	r3, [r4, #0]
   28192:	f8cd 8000 	str.w	r8, [sp]
   28196:	69dc      	ldr	r4, [r3, #28]
   28198:	4632      	mov	r2, r6
   2819a:	463b      	mov	r3, r7
   2819c:	f240 2103 	movw	r1, #515	; 0x203
   281a0:	4628      	mov	r0, r5
   281a2:	47a0      	blx	r4
}
   281a4:	b002      	add	sp, #8
   281a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   281aa:	bf00      	nop
   281ac:	20023934 	.word	0x20023934
   281b0:	00045442 	.word	0x00045442
   281b4:	00045316 	.word	0x00045316
   281b8:	00045419 	.word	0x00045419
   281bc:	00046d26 	.word	0x00046d26

000281c0 <delete_banked_modem_fw>:
}

static int delete_banked_modem_fw(void)
{
	int err;
	socklen_t len = sizeof(offset);
   281c0:	2304      	movs	r3, #4
{
   281c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	LOG_INF("Deleting firmware image, this can take several minutes");
   281c6:	f04f 0000 	mov.w	r0, #0
	socklen_t len = sizeof(offset);
   281ca:	9301      	str	r3, [sp, #4]
	LOG_INF("Deleting firmware image, this can take several minutes");
   281cc:	2303      	movs	r3, #3
   281ce:	4c2d      	ldr	r4, [pc, #180]	; (28284 <delete_banked_modem_fw+0xc4>)
   281d0:	f363 0007 	bfi	r0, r3, #0, #8
   281d4:	4b2c      	ldr	r3, [pc, #176]	; (28288 <delete_banked_modem_fw+0xc8>)
   281d6:	492d      	ldr	r1, [pc, #180]	; (2828c <delete_banked_modem_fw+0xcc>)
   281d8:	1ae4      	subs	r4, r4, r3
   281da:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   281de:	f364 108f 	bfi	r0, r4, #6, #10
   281e2:	f017 f94e 	bl	3f482 <log_string_sync>
	err = setsockopt(fd, SOL_DFU, SO_DFU_BACKUP_DELETE, NULL, 0);
   281e6:	2300      	movs	r3, #0
   281e8:	4e29      	ldr	r6, [pc, #164]	; (28290 <delete_banked_modem_fw+0xd0>)
   281ea:	461a      	mov	r2, r3
   281ec:	2106      	movs	r1, #6
   281ee:	6830      	ldr	r0, [r6, #0]
   281f0:	f7ff ffae 	bl	28150 <setsockopt.constprop.3>
	if (err < 0) {
   281f4:	2800      	cmp	r0, #0
   281f6:	db26      	blt.n	28246 <delete_banked_modem_fw+0x86>
		LOG_ERR("Failed to delete backup, errno %d", errno);
		return -EFAULT;
	}

	while (true) {
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   281f8:	4f26      	ldr	r7, [pc, #152]	; (28294 <delete_banked_modem_fw+0xd4>)
		if (err < 0) {
			if (errno == ENOEXEC) {
				err = get_modem_error();
				if (err != DFU_ERASE_PENDING) {
					LOG_ERR("DFU error: %d", err);
   281fa:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 282a0 <delete_banked_modem_fw+0xe0>
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   281fe:	ab01      	add	r3, sp, #4
   28200:	463a      	mov	r2, r7
   28202:	2107      	movs	r1, #7
   28204:	6830      	ldr	r0, [r6, #0]
   28206:	f7ff ff41 	bl	2808c <getsockopt.constprop.2>
		if (err < 0) {
   2820a:	2800      	cmp	r0, #0
   2820c:	da2e      	bge.n	2826c <delete_banked_modem_fw+0xac>
			if (errno == ENOEXEC) {
   2820e:	f017 fb4f 	bl	3f8b0 <__errno>
   28212:	6803      	ldr	r3, [r0, #0]
   28214:	2b08      	cmp	r3, #8
   28216:	d1f2      	bne.n	281fe <delete_banked_modem_fw+0x3e>
				err = get_modem_error();
   28218:	f7ff ff70 	bl	280fc <get_modem_error>
				if (err != DFU_ERASE_PENDING) {
   2821c:	f110 0f11 	cmn.w	r0, #17
				err = get_modem_error();
   28220:	4602      	mov	r2, r0
				if (err != DFU_ERASE_PENDING) {
   28222:	d00b      	beq.n	2823c <delete_banked_modem_fw+0x7c>
					LOG_ERR("DFU error: %d", err);
   28224:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
   28228:	f043 0301 	orr.w	r3, r3, #1
   2822c:	f363 0507 	bfi	r5, r3, #0, #8
   28230:	f364 158f 	bfi	r5, r4, #6, #10
   28234:	4641      	mov	r1, r8
   28236:	4628      	mov	r0, r5
   28238:	f017 f923 	bl	3f482 <log_string_sync>
	return z_impl_k_sleep(ms);
   2823c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   28240:	f012 fdca 	bl	3add8 <z_impl_k_sleep>
   28244:	e7db      	b.n	281fe <delete_banked_modem_fw+0x3e>
		LOG_ERR("Failed to delete backup, errno %d", errno);
   28246:	2301      	movs	r3, #1
   28248:	f04f 0500 	mov.w	r5, #0
   2824c:	f363 0507 	bfi	r5, r3, #0, #8
   28250:	f017 fb2e 	bl	3f8b0 <__errno>
   28254:	f364 158f 	bfi	r5, r4, #6, #10
   28258:	6802      	ldr	r2, [r0, #0]
   2825a:	490f      	ldr	r1, [pc, #60]	; (28298 <delete_banked_modem_fw+0xd8>)
   2825c:	4628      	mov	r0, r5
   2825e:	f017 f910 	bl	3f482 <log_string_sync>
		return -EFAULT;
   28262:	f06f 000d 	mvn.w	r0, #13
			break;
		}
	}

	return 0;
}
   28266:	b002      	add	sp, #8
   28268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_INF("Modem FW delete complete");
   2826c:	2303      	movs	r3, #3
   2826e:	f04f 0000 	mov.w	r0, #0
   28272:	f363 0007 	bfi	r0, r3, #0, #8
   28276:	f364 108f 	bfi	r0, r4, #6, #10
   2827a:	4908      	ldr	r1, [pc, #32]	; (2829c <delete_banked_modem_fw+0xdc>)
   2827c:	f017 f901 	bl	3f482 <log_string_sync>
	return 0;
   28280:	2000      	movs	r0, #0
   28282:	e7f0      	b.n	28266 <delete_banked_modem_fw+0xa6>
   28284:	00043004 	.word	0x00043004
   28288:	00042fb4 	.word	0x00042fb4
   2828c:	0004909c 	.word	0x0004909c
   28290:	20024698 	.word	0x20024698
   28294:	2002469c 	.word	0x2002469c
   28298:	000490d3 	.word	0x000490d3
   2829c:	00049103 	.word	0x00049103
   282a0:	000490f5 	.word	0x000490f5

000282a4 <dfu_target_modem_identify>:
	return err;
}

bool dfu_target_modem_identify(const void *const buf)
{
	return ((const struct modem_delta_header *)buf)->magic == MODEM_MAGIC;
   282a4:	6840      	ldr	r0, [r0, #4]

}
   282a6:	4b02      	ldr	r3, [pc, #8]	; (282b0 <dfu_target_modem_identify+0xc>)
   282a8:	1ac3      	subs	r3, r0, r3
   282aa:	4258      	negs	r0, r3
   282ac:	4158      	adcs	r0, r3
   282ae:	4770      	bx	lr
   282b0:	7544656d 	.word	0x7544656d

000282b4 <dfu_target_modem_init>:
	/* We have no way of checking the amount of flash available in the modem
	 * with the current API
	 */
	ARG_UNUSED(file_size);
	int err;
	socklen_t len = sizeof(offset);
   282b4:	2304      	movs	r3, #4
{
   282b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   282ba:	4c62      	ldr	r4, [pc, #392]	; (28444 <dfu_target_modem_init+0x190>)
   282bc:	b098      	sub	sp, #96	; 0x60
	socklen_t len = sizeof(offset);
   282be:	9303      	str	r3, [sp, #12]
   282c0:	6823      	ldr	r3, [r4, #0]
   282c2:	b94b      	cbnz	r3, 282d8 <dfu_target_modem_init+0x24>
   282c4:	4960      	ldr	r1, [pc, #384]	; (28448 <dfu_target_modem_init+0x194>)
   282c6:	4861      	ldr	r0, [pc, #388]	; (2844c <dfu_target_modem_init+0x198>)
   282c8:	2319      	movs	r3, #25
   282ca:	4a61      	ldr	r2, [pc, #388]	; (28450 <dfu_target_modem_init+0x19c>)
   282cc:	f017 f8bb 	bl	3f446 <printk>
   282d0:	2119      	movs	r1, #25
   282d2:	485f      	ldr	r0, [pc, #380]	; (28450 <dfu_target_modem_init+0x19c>)
   282d4:	f017 f8c4 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   282d8:	6823      	ldr	r3, [r4, #0]
   282da:	681b      	ldr	r3, [r3, #0]
   282dc:	b94b      	cbnz	r3, 282f2 <dfu_target_modem_init+0x3e>
   282de:	495d      	ldr	r1, [pc, #372]	; (28454 <dfu_target_modem_init+0x1a0>)
   282e0:	485a      	ldr	r0, [pc, #360]	; (2844c <dfu_target_modem_init+0x198>)
   282e2:	231a      	movs	r3, #26
   282e4:	4a5a      	ldr	r2, [pc, #360]	; (28450 <dfu_target_modem_init+0x19c>)
   282e6:	f017 f8ae 	bl	3f446 <printk>
   282ea:	211a      	movs	r1, #26
   282ec:	4858      	ldr	r0, [pc, #352]	; (28450 <dfu_target_modem_init+0x19c>)
   282ee:	f017 f8b7 	bl	3f460 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   282f2:	6823      	ldr	r3, [r4, #0]
   282f4:	f240 2203 	movw	r2, #515	; 0x203
   282f8:	681b      	ldr	r3, [r3, #0]
   282fa:	2101      	movs	r1, #1
   282fc:	2067      	movs	r0, #103	; 0x67
   282fe:	4798      	blx	r3
   28300:	4c55      	ldr	r4, [pc, #340]	; (28458 <dfu_target_modem_init+0x1a4>)
   28302:	4b56      	ldr	r3, [pc, #344]	; (2845c <dfu_target_modem_init+0x1a8>)
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   28304:	4d56      	ldr	r5, [pc, #344]	; (28460 <dfu_target_modem_init+0x1ac>)
   28306:	1ae4      	subs	r4, r4, r3
	if (fd < 0) {
   28308:	2800      	cmp	r0, #0
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   2830a:	6028      	str	r0, [r5, #0]
	if (fd < 0) {
   2830c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   28310:	462e      	mov	r6, r5
		LOG_ERR("Failed to open Modem DFU socket.");
   28312:	f04f 0000 	mov.w	r0, #0
	if (fd < 0) {
   28316:	da2f      	bge.n	28378 <dfu_target_modem_init+0xc4>
		LOG_ERR("Failed to open Modem DFU socket.");
   28318:	2301      	movs	r3, #1
   2831a:	f363 0007 	bfi	r0, r3, #0, #8
   2831e:	f364 108f 	bfi	r0, r4, #6, #10
   28322:	4950      	ldr	r1, [pc, #320]	; (28464 <dfu_target_modem_init+0x1b0>)
   28324:	f017 f8ad 	bl	3f482 <log_string_sync>
		return fd;
   28328:	6828      	ldr	r0, [r5, #0]

	err = modem_dfu_socket_init();
	if (err < 0) {
   2832a:	2800      	cmp	r0, #0
   2832c:	db48      	blt.n	283c0 <dfu_target_modem_init+0x10c>
		return err;
	}

	/* Check offset, store to local variable */
	err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   2832e:	ab03      	add	r3, sp, #12
   28330:	4a4d      	ldr	r2, [pc, #308]	; (28468 <dfu_target_modem_init+0x1b4>)
   28332:	2107      	movs	r1, #7
   28334:	6830      	ldr	r0, [r6, #0]
   28336:	f7ff fea9 	bl	2808c <getsockopt.constprop.2>
	if (err < 0) {
   2833a:	2800      	cmp	r0, #0
   2833c:	da13      	bge.n	28366 <dfu_target_modem_init+0xb2>
		if (errno == ENOEXEC) {
   2833e:	f017 fab7 	bl	3f8b0 <__errno>
   28342:	6803      	ldr	r3, [r0, #0]
			LOG_ERR("Modem error: %d", get_modem_error());
   28344:	f04f 0500 	mov.w	r5, #0
		if (errno == ENOEXEC) {
   28348:	2b08      	cmp	r3, #8
			LOG_ERR("Modem error: %d", get_modem_error());
   2834a:	f04f 0301 	mov.w	r3, #1
   2834e:	f363 0507 	bfi	r5, r3, #0, #8
   28352:	f364 158f 	bfi	r5, r4, #6, #10
		if (errno == ENOEXEC) {
   28356:	d14e      	bne.n	283f6 <dfu_target_modem_init+0x142>
			LOG_ERR("Modem error: %d", get_modem_error());
   28358:	f7ff fed0 	bl	280fc <get_modem_error>
   2835c:	4602      	mov	r2, r0
   2835e:	4943      	ldr	r1, [pc, #268]	; (2846c <dfu_target_modem_init+0x1b8>)
		} else {
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   28360:	4628      	mov	r0, r5
   28362:	f017 f88e 	bl	3f482 <log_string_sync>
		}
	}

	if (offset == DIRTY_IMAGE) {
   28366:	4d40      	ldr	r5, [pc, #256]	; (28468 <dfu_target_modem_init+0x1b4>)
   28368:	682a      	ldr	r2, [r5, #0]
   2836a:	f5b2 1f20 	cmp.w	r2, #2621440	; 0x280000
   2836e:	d147      	bne.n	28400 <dfu_target_modem_init+0x14c>
		delete_banked_modem_fw();
   28370:	f7ff ff26 	bl	281c0 <delete_banked_modem_fw>
		if (err != 0) {
			LOG_INF("Error while setting offset: %d", offset);
		}
	}

	return 0;
   28374:	2000      	movs	r0, #0
   28376:	e023      	b.n	283c0 <dfu_target_modem_init+0x10c>
	LOG_INF("Modem DFU Socket created");
   28378:	2303      	movs	r3, #3
	len = sizeof(version);
   2837a:	2724      	movs	r7, #36	; 0x24
	LOG_INF("Modem DFU Socket created");
   2837c:	f363 0007 	bfi	r0, r3, #0, #8
   28380:	f364 108f 	bfi	r0, r4, #6, #10
   28384:	493a      	ldr	r1, [pc, #232]	; (28470 <dfu_target_modem_init+0x1bc>)
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   28386:	f10d 0814 	add.w	r8, sp, #20
	LOG_INF("Modem DFU Socket created");
   2838a:	f017 f87a 	bl	3f482 <log_string_sync>
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   2838e:	ab04      	add	r3, sp, #16
   28390:	4642      	mov	r2, r8
   28392:	2101      	movs	r1, #1
   28394:	6828      	ldr	r0, [r5, #0]
	len = sizeof(version);
   28396:	9704      	str	r7, [sp, #16]
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   28398:	f7ff fe78 	bl	2808c <getsockopt.constprop.2>
	if (err < 0) {
   2839c:	2800      	cmp	r0, #0
   2839e:	da12      	bge.n	283c6 <dfu_target_modem_init+0x112>
		LOG_ERR("Firmware version request failed, errno %d", errno);
   283a0:	2301      	movs	r3, #1
   283a2:	f04f 0500 	mov.w	r5, #0
   283a6:	f363 0507 	bfi	r5, r3, #0, #8
   283aa:	f017 fa81 	bl	3f8b0 <__errno>
   283ae:	f364 158f 	bfi	r5, r4, #6, #10
   283b2:	6802      	ldr	r2, [r0, #0]
   283b4:	492f      	ldr	r1, [pc, #188]	; (28474 <dfu_target_modem_init+0x1c0>)
   283b6:	4628      	mov	r0, r5
   283b8:	f017 f863 	bl	3f482 <log_string_sync>
		return -1;
   283bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   283c0:	b018      	add	sp, #96	; 0x60
   283c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	snprintf(version_string, sizeof(version_string), "%.*s",
   283c6:	463b      	mov	r3, r7
   283c8:	4a2b      	ldr	r2, [pc, #172]	; (28478 <dfu_target_modem_init+0x1c4>)
   283ca:	2125      	movs	r1, #37	; 0x25
   283cc:	f8cd 8000 	str.w	r8, [sp]
   283d0:	a80e      	add	r0, sp, #56	; 0x38
   283d2:	f015 f88d 	bl	3d4f0 <sniprintf>
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));
   283d6:	f04f 0500 	mov.w	r5, #0
   283da:	2303      	movs	r3, #3
   283dc:	a80e      	add	r0, sp, #56	; 0x38
   283de:	f363 0507 	bfi	r5, r3, #0, #8
   283e2:	f017 f860 	bl	3f4a6 <log_strdup>
   283e6:	f364 158f 	bfi	r5, r4, #6, #10
   283ea:	4602      	mov	r2, r0
   283ec:	4923      	ldr	r1, [pc, #140]	; (2847c <dfu_target_modem_init+0x1c8>)
   283ee:	4628      	mov	r0, r5
   283f0:	f017 f847 	bl	3f482 <log_string_sync>
	if (err < 0) {
   283f4:	e79b      	b.n	2832e <dfu_target_modem_init+0x7a>
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   283f6:	f017 fa5b 	bl	3f8b0 <__errno>
   283fa:	4921      	ldr	r1, [pc, #132]	; (28480 <dfu_target_modem_init+0x1cc>)
   283fc:	6802      	ldr	r2, [r0, #0]
   283fe:	e7af      	b.n	28360 <dfu_target_modem_init+0xac>
	} else if (offset != 0) {
   28400:	2a00      	cmp	r2, #0
   28402:	d0b7      	beq.n	28374 <dfu_target_modem_init+0xc0>
		LOG_INF("Setting offset to 0x%x", offset);
   28404:	2303      	movs	r3, #3
   28406:	f04f 0000 	mov.w	r0, #0
   2840a:	f363 0007 	bfi	r0, r3, #0, #8
   2840e:	f364 108f 	bfi	r0, r4, #6, #10
   28412:	491c      	ldr	r1, [pc, #112]	; (28484 <dfu_target_modem_init+0x1d0>)
   28414:	f017 f835 	bl	3f482 <log_string_sync>
		len = sizeof(offset);
   28418:	2304      	movs	r3, #4
		err = setsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, len);
   2841a:	462a      	mov	r2, r5
   2841c:	2107      	movs	r1, #7
   2841e:	6830      	ldr	r0, [r6, #0]
		len = sizeof(offset);
   28420:	9303      	str	r3, [sp, #12]
		err = setsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, len);
   28422:	f7ff fe95 	bl	28150 <setsockopt.constprop.3>
		if (err != 0) {
   28426:	2800      	cmp	r0, #0
   28428:	d0a4      	beq.n	28374 <dfu_target_modem_init+0xc0>
			LOG_INF("Error while setting offset: %d", offset);
   2842a:	2303      	movs	r3, #3
   2842c:	f04f 0000 	mov.w	r0, #0
   28430:	f363 0007 	bfi	r0, r3, #0, #8
   28434:	f364 108f 	bfi	r0, r4, #6, #10
   28438:	682a      	ldr	r2, [r5, #0]
   2843a:	4913      	ldr	r1, [pc, #76]	; (28488 <dfu_target_modem_init+0x1d4>)
   2843c:	f017 f821 	bl	3f482 <log_string_sync>
   28440:	e798      	b.n	28374 <dfu_target_modem_init+0xc0>
   28442:	bf00      	nop
   28444:	20023934 	.word	0x20023934
   28448:	00045442 	.word	0x00045442
   2844c:	00045316 	.word	0x00045316
   28450:	00045419 	.word	0x00045419
   28454:	00046c68 	.word	0x00046c68
   28458:	00043004 	.word	0x00043004
   2845c:	00042fb4 	.word	0x00042fb4
   28460:	20024698 	.word	0x20024698
   28464:	000491a8 	.word	0x000491a8
   28468:	2002469c 	.word	0x2002469c
   2846c:	0004922c 	.word	0x0004922c
   28470:	000491c9 	.word	0x000491c9
   28474:	000491e2 	.word	0x000491e2
   28478:	0004920c 	.word	0x0004920c
   2847c:	00049211 	.word	0x00049211
   28480:	0004923c 	.word	0x0004923c
   28484:	00049259 	.word	0x00049259
   28488:	00049270 	.word	0x00049270

0002848c <dfu_target_modem_offset_get>:

int dfu_target_modem_offset_get(size_t *out)
{
	*out = offset;
   2848c:	4b02      	ldr	r3, [pc, #8]	; (28498 <dfu_target_modem_offset_get+0xc>)
   2848e:	681b      	ldr	r3, [r3, #0]
   28490:	6003      	str	r3, [r0, #0]
	return 0;
}
   28492:	2000      	movs	r0, #0
   28494:	4770      	bx	lr
   28496:	bf00      	nop
   28498:	2002469c 	.word	0x2002469c

0002849c <dfu_target_modem_write>:

int dfu_target_modem_write(const void *const buf, size_t len)
{
   2849c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err = 0;
	int sent = 0;
	int modem_error = 0;

	sent = send(fd, buf, len, 0);
   2849e:	4b2e      	ldr	r3, [pc, #184]	; (28558 <dfu_target_modem_write+0xbc>)
	__ASSERT_NO_MSG(socket_ops);
   284a0:	4c2e      	ldr	r4, [pc, #184]	; (2855c <dfu_target_modem_write+0xc0>)
   284a2:	681f      	ldr	r7, [r3, #0]
   284a4:	6823      	ldr	r3, [r4, #0]
{
   284a6:	4605      	mov	r5, r0
   284a8:	460e      	mov	r6, r1
   284aa:	b94b      	cbnz	r3, 284c0 <dfu_target_modem_write+0x24>
   284ac:	492c      	ldr	r1, [pc, #176]	; (28560 <dfu_target_modem_write+0xc4>)
   284ae:	482d      	ldr	r0, [pc, #180]	; (28564 <dfu_target_modem_write+0xc8>)
   284b0:	237e      	movs	r3, #126	; 0x7e
   284b2:	4a2d      	ldr	r2, [pc, #180]	; (28568 <dfu_target_modem_write+0xcc>)
   284b4:	f016 ffc7 	bl	3f446 <printk>
   284b8:	217e      	movs	r1, #126	; 0x7e
   284ba:	482b      	ldr	r0, [pc, #172]	; (28568 <dfu_target_modem_write+0xcc>)
   284bc:	f016 ffd0 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   284c0:	6823      	ldr	r3, [r4, #0]
   284c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   284c4:	b94b      	cbnz	r3, 284da <dfu_target_modem_write+0x3e>
   284c6:	4929      	ldr	r1, [pc, #164]	; (2856c <dfu_target_modem_write+0xd0>)
   284c8:	4826      	ldr	r0, [pc, #152]	; (28564 <dfu_target_modem_write+0xc8>)
   284ca:	237f      	movs	r3, #127	; 0x7f
   284cc:	4a26      	ldr	r2, [pc, #152]	; (28568 <dfu_target_modem_write+0xcc>)
   284ce:	f016 ffba 	bl	3f446 <printk>
   284d2:	217f      	movs	r1, #127	; 0x7f
   284d4:	4824      	ldr	r0, [pc, #144]	; (28568 <dfu_target_modem_write+0xcc>)
   284d6:	f016 ffc3 	bl	3f460 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   284da:	6823      	ldr	r3, [r4, #0]
   284dc:	4632      	mov	r2, r6
   284de:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   284e0:	4629      	mov	r1, r5
   284e2:	2300      	movs	r3, #0
   284e4:	4638      	mov	r0, r7
   284e6:	47a0      	blx	r4
	if (sent > 0) {
   284e8:	2800      	cmp	r0, #0
   284ea:	dc2c      	bgt.n	28546 <dfu_target_modem_write+0xaa>
		return 0;
	}

	if (errno != ENOEXEC) {
   284ec:	f017 f9e0 	bl	3f8b0 <__errno>
   284f0:	6803      	ldr	r3, [r0, #0]
   284f2:	2b08      	cmp	r3, #8
   284f4:	d129      	bne.n	2854a <dfu_target_modem_write+0xae>
		return -EFAULT;
	}

	modem_error = get_modem_error();
   284f6:	f7ff fe01 	bl	280fc <get_modem_error>
	LOG_ERR("send failed, modem errno %d, dfu err %d", errno, modem_error);
   284fa:	f04f 0700 	mov.w	r7, #0
   284fe:	2301      	movs	r3, #1
   28500:	4a1b      	ldr	r2, [pc, #108]	; (28570 <dfu_target_modem_write+0xd4>)
   28502:	f363 0707 	bfi	r7, r3, #0, #8
   28506:	4b1b      	ldr	r3, [pc, #108]	; (28574 <dfu_target_modem_write+0xd8>)
	modem_error = get_modem_error();
   28508:	4604      	mov	r4, r0
   2850a:	1a9b      	subs	r3, r3, r2
   2850c:	08db      	lsrs	r3, r3, #3
	LOG_ERR("send failed, modem errno %d, dfu err %d", errno, modem_error);
   2850e:	f363 178f 	bfi	r7, r3, #6, #10
   28512:	f017 f9cd 	bl	3f8b0 <__errno>
   28516:	4623      	mov	r3, r4
   28518:	6802      	ldr	r2, [r0, #0]
   2851a:	4917      	ldr	r1, [pc, #92]	; (28578 <dfu_target_modem_write+0xdc>)
   2851c:	4638      	mov	r0, r7
   2851e:	f016 ffb0 	bl	3f482 <log_string_sync>
	switch (modem_error) {
   28522:	f114 0f0e 	cmn.w	r4, #14
   28526:	d006      	beq.n	28536 <dfu_target_modem_write+0x9a>
		} else {
			return 0;
		}
	}

	return -EFAULT;
   28528:	3409      	adds	r4, #9
   2852a:	bf0c      	ite	eq
   2852c:	f06f 0015 	mvneq.w	r0, #21
   28530:	f06f 000d 	mvnne.w	r0, #13
}
   28534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		delete_banked_modem_fw();
   28536:	f7ff fe43 	bl	281c0 <delete_banked_modem_fw>
		err = dfu_target_modem_write(buf, len);
   2853a:	4631      	mov	r1, r6
   2853c:	4628      	mov	r0, r5
   2853e:	f7ff ffad 	bl	2849c <dfu_target_modem_write>
		if (err < 0) {
   28542:	2800      	cmp	r0, #0
   28544:	db04      	blt.n	28550 <dfu_target_modem_write+0xb4>
			return 0;
   28546:	2000      	movs	r0, #0
   28548:	e7f4      	b.n	28534 <dfu_target_modem_write+0x98>
		return -EFAULT;
   2854a:	f06f 000d 	mvn.w	r0, #13
   2854e:	e7f1      	b.n	28534 <dfu_target_modem_write+0x98>
			return -EINVAL;
   28550:	f06f 0015 	mvn.w	r0, #21
   28554:	e7ee      	b.n	28534 <dfu_target_modem_write+0x98>
   28556:	bf00      	nop
   28558:	20024698 	.word	0x20024698
   2855c:	20023934 	.word	0x20023934
   28560:	00045442 	.word	0x00045442
   28564:	00045316 	.word	0x00045316
   28568:	00045419 	.word	0x00045419
   2856c:	00046ca0 	.word	0x00046ca0
   28570:	00042fb4 	.word	0x00042fb4
   28574:	00043004 	.word	0x00043004
   28578:	0004928f 	.word	0x0004928f

0002857c <dfu_target_modem_done>:

int dfu_target_modem_done(bool successful)
{
   2857c:	b570      	push	{r4, r5, r6, lr}
   2857e:	4b38      	ldr	r3, [pc, #224]	; (28660 <dfu_target_modem_done+0xe4>)
   28580:	4c38      	ldr	r4, [pc, #224]	; (28664 <dfu_target_modem_done+0xe8>)
   28582:	4e39      	ldr	r6, [pc, #228]	; (28668 <dfu_target_modem_done+0xec>)
   28584:	1ae4      	subs	r4, r4, r3
   28586:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	int err = 0;

	if (successful) {
   2858a:	2800      	cmp	r0, #0
   2858c:	d05b      	beq.n	28646 <dfu_target_modem_done+0xca>
	LOG_INF("Scheduling modem firmware upgrade at next boot");
   2858e:	2303      	movs	r3, #3
   28590:	f04f 0000 	mov.w	r0, #0
   28594:	f363 0007 	bfi	r0, r3, #0, #8
   28598:	f364 108f 	bfi	r0, r4, #6, #10
   2859c:	4933      	ldr	r1, [pc, #204]	; (2866c <dfu_target_modem_done+0xf0>)
   2859e:	f016 ff70 	bl	3f482 <log_string_sync>
	err = setsockopt(fd, SOL_DFU, SO_DFU_APPLY, NULL, 0);
   285a2:	2300      	movs	r3, #0
   285a4:	2104      	movs	r1, #4
   285a6:	461a      	mov	r2, r3
   285a8:	6830      	ldr	r0, [r6, #0]
   285aa:	f7ff fdd1 	bl	28150 <setsockopt.constprop.3>
	if (err < 0) {
   285ae:	1e05      	subs	r5, r0, #0
   285b0:	da12      	bge.n	285d8 <dfu_target_modem_done+0x5c>
		if (errno == ENOEXEC) {
   285b2:	f017 f97d 	bl	3f8b0 <__errno>
   285b6:	6803      	ldr	r3, [r0, #0]
   285b8:	2b08      	cmp	r3, #8
   285ba:	d13a      	bne.n	28632 <dfu_target_modem_done+0xb6>
			LOG_ERR("SO_DFU_APPLY failed, modem error %d",
   285bc:	2301      	movs	r3, #1
   285be:	f04f 0500 	mov.w	r5, #0
   285c2:	f363 0507 	bfi	r5, r3, #0, #8
   285c6:	f7ff fd99 	bl	280fc <get_modem_error>
   285ca:	f364 158f 	bfi	r5, r4, #6, #10
   285ce:	4602      	mov	r2, r0
   285d0:	4628      	mov	r0, r5
   285d2:	4927      	ldr	r1, [pc, #156]	; (28670 <dfu_target_modem_done+0xf4>)
			LOG_ERR("SO_DFU_APPLY failed, modem error %d", err);
   285d4:	f016 ff55 	bl	3f482 <log_string_sync>
	__ASSERT_NO_MSG(socket_ops);
   285d8:	4d26      	ldr	r5, [pc, #152]	; (28674 <dfu_target_modem_done+0xf8>)
	} else {
		LOG_INF("Modem upgrade aborted.");
	}


	err = close(fd);
   285da:	6836      	ldr	r6, [r6, #0]
   285dc:	682b      	ldr	r3, [r5, #0]
   285de:	b94b      	cbnz	r3, 285f4 <dfu_target_modem_done+0x78>
   285e0:	4925      	ldr	r1, [pc, #148]	; (28678 <dfu_target_modem_done+0xfc>)
   285e2:	4826      	ldr	r0, [pc, #152]	; (2867c <dfu_target_modem_done+0x100>)
   285e4:	2321      	movs	r3, #33	; 0x21
   285e6:	4a26      	ldr	r2, [pc, #152]	; (28680 <dfu_target_modem_done+0x104>)
   285e8:	f016 ff2d 	bl	3f446 <printk>
   285ec:	2121      	movs	r1, #33	; 0x21
   285ee:	4824      	ldr	r0, [pc, #144]	; (28680 <dfu_target_modem_done+0x104>)
   285f0:	f016 ff36 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   285f4:	682b      	ldr	r3, [r5, #0]
   285f6:	685b      	ldr	r3, [r3, #4]
   285f8:	b94b      	cbnz	r3, 2860e <dfu_target_modem_done+0x92>
   285fa:	4922      	ldr	r1, [pc, #136]	; (28684 <dfu_target_modem_done+0x108>)
   285fc:	481f      	ldr	r0, [pc, #124]	; (2867c <dfu_target_modem_done+0x100>)
   285fe:	2322      	movs	r3, #34	; 0x22
   28600:	4a1f      	ldr	r2, [pc, #124]	; (28680 <dfu_target_modem_done+0x104>)
   28602:	f016 ff20 	bl	3f446 <printk>
   28606:	2122      	movs	r1, #34	; 0x22
   28608:	481d      	ldr	r0, [pc, #116]	; (28680 <dfu_target_modem_done+0x104>)
   2860a:	f016 ff29 	bl	3f460 <assert_post_action>
	return socket_ops->close(sock);
   2860e:	682b      	ldr	r3, [r5, #0]
   28610:	4630      	mov	r0, r6
   28612:	685b      	ldr	r3, [r3, #4]
   28614:	4798      	blx	r3
	if (err < 0) {
   28616:	1e05      	subs	r5, r0, #0
   28618:	da20      	bge.n	2865c <dfu_target_modem_done+0xe0>
		LOG_ERR("Failed to close modem DFU socket.");
   2861a:	f04f 0000 	mov.w	r0, #0
   2861e:	2301      	movs	r3, #1
   28620:	f363 0007 	bfi	r0, r3, #0, #8
   28624:	f364 108f 	bfi	r0, r4, #6, #10
   28628:	4917      	ldr	r1, [pc, #92]	; (28688 <dfu_target_modem_done+0x10c>)
   2862a:	f016 ff2a 	bl	3f482 <log_string_sync>
		return err;
	}

	return 0;
}
   2862e:	4628      	mov	r0, r5
   28630:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("SO_DFU_APPLY failed, modem error %d", err);
   28632:	f04f 0000 	mov.w	r0, #0
   28636:	2301      	movs	r3, #1
   28638:	f363 0007 	bfi	r0, r3, #0, #8
   2863c:	f364 108f 	bfi	r0, r4, #6, #10
   28640:	462a      	mov	r2, r5
   28642:	490b      	ldr	r1, [pc, #44]	; (28670 <dfu_target_modem_done+0xf4>)
   28644:	e7c6      	b.n	285d4 <dfu_target_modem_done+0x58>
		LOG_INF("Modem upgrade aborted.");
   28646:	2303      	movs	r3, #3
   28648:	f04f 0000 	mov.w	r0, #0
   2864c:	f363 0007 	bfi	r0, r3, #0, #8
   28650:	f364 108f 	bfi	r0, r4, #6, #10
   28654:	490d      	ldr	r1, [pc, #52]	; (2868c <dfu_target_modem_done+0x110>)
   28656:	f016 ff14 	bl	3f482 <log_string_sync>
   2865a:	e7bd      	b.n	285d8 <dfu_target_modem_done+0x5c>
	return 0;
   2865c:	2500      	movs	r5, #0
   2865e:	e7e6      	b.n	2862e <dfu_target_modem_done+0xb2>
   28660:	00042fb4 	.word	0x00042fb4
   28664:	00043004 	.word	0x00043004
   28668:	20024698 	.word	0x20024698
   2866c:	0004911c 	.word	0x0004911c
   28670:	0004914b 	.word	0x0004914b
   28674:	20023934 	.word	0x20023934
   28678:	00045442 	.word	0x00045442
   2867c:	00045316 	.word	0x00045316
   28680:	00045419 	.word	0x00045419
   28684:	00046c56 	.word	0x00046c56
   28688:	00049186 	.word	0x00049186
   2868c:	0004916f 	.word	0x0004916f

00028690 <dfu_target_mcuboot_identify>:
}

bool dfu_target_mcuboot_identify(const void *const buf)
{
	/* MCUBoot headers starts with 4 byte magic word */
	return *((const u32_t *)buf) == MCUBOOT_HEADER_MAGIC;
   28690:	6800      	ldr	r0, [r0, #0]
}
   28692:	4b02      	ldr	r3, [pc, #8]	; (2869c <dfu_target_mcuboot_identify+0xc>)
   28694:	1ac3      	subs	r3, r0, r3
   28696:	4258      	negs	r0, r3
   28698:	4158      	adcs	r0, r3
   2869a:	4770      	bx	lr
   2869c:	96f3b83d 	.word	0x96f3b83d

000286a0 <dfu_target_mcuboot_init>:

int dfu_target_mcuboot_init(size_t file_size)
{
   286a0:	b538      	push	{r3, r4, r5, lr}
   286a2:	4605      	mov	r5, r0
	int err = flash_img_init(&flash_img);
   286a4:	4816      	ldr	r0, [pc, #88]	; (28700 <dfu_target_mcuboot_init+0x60>)
   286a6:	f016 ffb3 	bl	3f610 <flash_img_init>

	if (file_size > PM_MCUBOOT_SECONDARY_SIZE) {
   286aa:	f5b5 2fd2 	cmp.w	r5, #430080	; 0x69000
	int err = flash_img_init(&flash_img);
   286ae:	4604      	mov	r4, r0
	if (file_size > PM_MCUBOOT_SECONDARY_SIZE) {
   286b0:	d911      	bls.n	286d6 <dfu_target_mcuboot_init+0x36>
		LOG_ERR("Requested file too big to fit in flash");
   286b2:	2301      	movs	r3, #1
   286b4:	f04f 0000 	mov.w	r0, #0
   286b8:	4a12      	ldr	r2, [pc, #72]	; (28704 <dfu_target_mcuboot_init+0x64>)
   286ba:	f363 0007 	bfi	r0, r3, #0, #8
   286be:	4b12      	ldr	r3, [pc, #72]	; (28708 <dfu_target_mcuboot_init+0x68>)
   286c0:	4912      	ldr	r1, [pc, #72]	; (2870c <dfu_target_mcuboot_init+0x6c>)
   286c2:	1a9b      	subs	r3, r3, r2
   286c4:	08db      	lsrs	r3, r3, #3
   286c6:	f363 108f 	bfi	r0, r3, #6, #10
   286ca:	f016 feda 	bl	3f482 <log_string_sync>
		return -EFBIG;
   286ce:	f06f 041a 	mvn.w	r4, #26
	}

	offset = 0;

	return 0;
}
   286d2:	4620      	mov	r0, r4
   286d4:	bd38      	pop	{r3, r4, r5, pc}
	if (err != 0) {
   286d6:	b178      	cbz	r0, 286f8 <dfu_target_mcuboot_init+0x58>
		LOG_ERR("flash_img_init error %d", err);
   286d8:	2301      	movs	r3, #1
   286da:	f04f 0000 	mov.w	r0, #0
   286de:	4a09      	ldr	r2, [pc, #36]	; (28704 <dfu_target_mcuboot_init+0x64>)
   286e0:	f363 0007 	bfi	r0, r3, #0, #8
   286e4:	4b08      	ldr	r3, [pc, #32]	; (28708 <dfu_target_mcuboot_init+0x68>)
   286e6:	490a      	ldr	r1, [pc, #40]	; (28710 <dfu_target_mcuboot_init+0x70>)
   286e8:	1a9b      	subs	r3, r3, r2
   286ea:	08db      	lsrs	r3, r3, #3
   286ec:	f363 108f 	bfi	r0, r3, #6, #10
   286f0:	4622      	mov	r2, r4
   286f2:	f016 fec6 	bl	3f482 <log_string_sync>
		return err;
   286f6:	e7ec      	b.n	286d2 <dfu_target_mcuboot_init+0x32>
	offset = 0;
   286f8:	4b06      	ldr	r3, [pc, #24]	; (28714 <dfu_target_mcuboot_init+0x74>)
   286fa:	6018      	str	r0, [r3, #0]
	return 0;
   286fc:	e7e9      	b.n	286d2 <dfu_target_mcuboot_init+0x32>
   286fe:	bf00      	nop
   28700:	200246a0 	.word	0x200246a0
   28704:	00042fb4 	.word	0x00042fb4
   28708:	00042ffc 	.word	0x00042ffc
   2870c:	0004937d 	.word	0x0004937d
   28710:	000493a4 	.word	0x000493a4
   28714:	200248b0 	.word	0x200248b0

00028718 <dfu_target_mcuboot_offset_get>:

int dfu_target_mcuboot_offset_get(size_t *out)
{
	*out = offset;
   28718:	4b02      	ldr	r3, [pc, #8]	; (28724 <dfu_target_mcuboot_offset_get+0xc>)
   2871a:	681b      	ldr	r3, [r3, #0]
   2871c:	6003      	str	r3, [r0, #0]
	return 0;
}
   2871e:	2000      	movs	r0, #0
   28720:	4770      	bx	lr
   28722:	bf00      	nop
   28724:	200248b0 	.word	0x200248b0

00028728 <dfu_target_mcuboot_write>:

int dfu_target_mcuboot_write(const void *const buf, size_t len)
{
   28728:	b538      	push	{r3, r4, r5, lr}
	int err = flash_img_buffered_write(&flash_img, (u8_t *)buf, len, false);
   2872a:	460a      	mov	r2, r1
{
   2872c:	460d      	mov	r5, r1
	int err = flash_img_buffered_write(&flash_img, (u8_t *)buf, len, false);
   2872e:	2300      	movs	r3, #0
   28730:	4601      	mov	r1, r0
   28732:	480d      	ldr	r0, [pc, #52]	; (28768 <dfu_target_mcuboot_write+0x40>)
   28734:	f016 ff1f 	bl	3f576 <flash_img_buffered_write>

	if (err != 0) {
   28738:	4604      	mov	r4, r0
   2873a:	b180      	cbz	r0, 2875e <dfu_target_mcuboot_write+0x36>
		LOG_ERR("flash_img_buffered_write error %d", err);
   2873c:	2301      	movs	r3, #1
   2873e:	f04f 0000 	mov.w	r0, #0
   28742:	4a0a      	ldr	r2, [pc, #40]	; (2876c <dfu_target_mcuboot_write+0x44>)
   28744:	f363 0007 	bfi	r0, r3, #0, #8
   28748:	4b09      	ldr	r3, [pc, #36]	; (28770 <dfu_target_mcuboot_write+0x48>)
   2874a:	490a      	ldr	r1, [pc, #40]	; (28774 <dfu_target_mcuboot_write+0x4c>)
   2874c:	1a9b      	subs	r3, r3, r2
   2874e:	08db      	lsrs	r3, r3, #3
   28750:	f363 108f 	bfi	r0, r3, #6, #10
   28754:	4622      	mov	r2, r4
   28756:	f016 fe94 	bl	3f482 <log_string_sync>
	}

	offset += len;

	return 0;
}
   2875a:	4620      	mov	r0, r4
   2875c:	bd38      	pop	{r3, r4, r5, pc}
	offset += len;
   2875e:	4b06      	ldr	r3, [pc, #24]	; (28778 <dfu_target_mcuboot_write+0x50>)
   28760:	6819      	ldr	r1, [r3, #0]
   28762:	4429      	add	r1, r5
   28764:	6019      	str	r1, [r3, #0]
	return 0;
   28766:	e7f8      	b.n	2875a <dfu_target_mcuboot_write+0x32>
   28768:	200246a0 	.word	0x200246a0
   2876c:	00042fb4 	.word	0x00042fb4
   28770:	00042ffc 	.word	0x00042ffc
   28774:	000493bc 	.word	0x000493bc
   28778:	200248b0 	.word	0x200248b0

0002877c <dfu_target_mcuboot_done>:

int dfu_target_mcuboot_done(bool successful)
{
   2877c:	b538      	push	{r3, r4, r5, lr}
   2877e:	4d1e      	ldr	r5, [pc, #120]	; (287f8 <dfu_target_mcuboot_done+0x7c>)
   28780:	4b1e      	ldr	r3, [pc, #120]	; (287fc <dfu_target_mcuboot_done+0x80>)
	if (successful) {
   28782:	4604      	mov	r4, r0
   28784:	1aed      	subs	r5, r5, r3
   28786:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   2878a:	b358      	cbz	r0, 287e4 <dfu_target_mcuboot_done+0x68>
		int err = flash_img_buffered_write(&flash_img, NULL, 0, true);
   2878c:	2200      	movs	r2, #0
   2878e:	2301      	movs	r3, #1
   28790:	4611      	mov	r1, r2
   28792:	481b      	ldr	r0, [pc, #108]	; (28800 <dfu_target_mcuboot_done+0x84>)
   28794:	f016 feef 	bl	3f576 <flash_img_buffered_write>

		if (err != 0) {
   28798:	4604      	mov	r4, r0
   2879a:	b160      	cbz	r0, 287b6 <dfu_target_mcuboot_done+0x3a>
			LOG_ERR("flash_img_buffered_write error %d", err);
   2879c:	f04f 0000 	mov.w	r0, #0
   287a0:	2301      	movs	r3, #1
   287a2:	4622      	mov	r2, r4
   287a4:	f363 0007 	bfi	r0, r3, #0, #8
   287a8:	4916      	ldr	r1, [pc, #88]	; (28804 <dfu_target_mcuboot_done+0x88>)
   287aa:	f365 108f 	bfi	r0, r5, #6, #10
			return err;
		}

		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
		if (err != 0) {
			LOG_ERR("boot_request_upgrade error %d", err);
   287ae:	f016 fe68 	bl	3f482 <log_string_sync>
	} else {
		LOG_INF("MCUBoot image upgrade aborted.");
	}

	return 0;
}
   287b2:	4620      	mov	r0, r4
   287b4:	bd38      	pop	{r3, r4, r5, pc}
		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
   287b6:	f7f7 f987 	bl	1fac8 <boot_request_upgrade>
		if (err != 0) {
   287ba:	4604      	mov	r4, r0
			LOG_ERR("boot_request_upgrade error %d", err);
   287bc:	f04f 0000 	mov.w	r0, #0
		if (err != 0) {
   287c0:	b13c      	cbz	r4, 287d2 <dfu_target_mcuboot_done+0x56>
			LOG_ERR("boot_request_upgrade error %d", err);
   287c2:	2301      	movs	r3, #1
   287c4:	f363 0007 	bfi	r0, r3, #0, #8
   287c8:	f365 108f 	bfi	r0, r5, #6, #10
   287cc:	4622      	mov	r2, r4
   287ce:	490e      	ldr	r1, [pc, #56]	; (28808 <dfu_target_mcuboot_done+0x8c>)
   287d0:	e7ed      	b.n	287ae <dfu_target_mcuboot_done+0x32>
		LOG_INF("MCUBoot image upgrade scheduled. Reset the device to "
   287d2:	2303      	movs	r3, #3
   287d4:	490d      	ldr	r1, [pc, #52]	; (2880c <dfu_target_mcuboot_done+0x90>)
   287d6:	f363 0007 	bfi	r0, r3, #0, #8
   287da:	f365 108f 	bfi	r0, r5, #6, #10
		LOG_INF("MCUBoot image upgrade aborted.");
   287de:	f016 fe50 	bl	3f482 <log_string_sync>
   287e2:	e7e6      	b.n	287b2 <dfu_target_mcuboot_done+0x36>
   287e4:	f04f 0000 	mov.w	r0, #0
   287e8:	2303      	movs	r3, #3
   287ea:	f363 0007 	bfi	r0, r3, #0, #8
   287ee:	f365 108f 	bfi	r0, r5, #6, #10
   287f2:	4907      	ldr	r1, [pc, #28]	; (28810 <dfu_target_mcuboot_done+0x94>)
   287f4:	e7f3      	b.n	287de <dfu_target_mcuboot_done+0x62>
   287f6:	bf00      	nop
   287f8:	00042ffc 	.word	0x00042ffc
   287fc:	00042fb4 	.word	0x00042fb4
   28800:	200246a0 	.word	0x200246a0
   28804:	000493bc 	.word	0x000493bc
   28808:	00049305 	.word	0x00049305
   2880c:	00049323 	.word	0x00049323
   28810:	0004935e 	.word	0x0004935e

00028814 <abi_getter>:
extern const struct fw_info_abi * const _ext_abis_start[];
extern const u32_t _ext_abis_size;
__noinit fw_info_abi_getter abi_getter_in;

int abi_getter(u32_t id, u32_t index, const struct fw_info_abi **abi)
{
   28814:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!abi) {
   28816:	b1da      	cbz	r2, 28850 <abi_getter+0x3c>
		return -EFAULT;
	}

	bool id_found = false;

	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   28818:	2300      	movs	r3, #0
	bool id_found = false;
   2881a:	461c      	mov	r4, r3
   2881c:	4d0e      	ldr	r5, [pc, #56]	; (28858 <abi_getter+0x44>)
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   2881e:	4f0f      	ldr	r7, [pc, #60]	; (2885c <abi_getter+0x48>)
   28820:	42bb      	cmp	r3, r7
   28822:	d306      	bcc.n	28832 <abi_getter+0x1e>
				*abi = ext_abi;
				return 0;
			}
		}
	}
	return id_found ? -EBADF : -ENOENT;
   28824:	2c00      	cmp	r4, #0
   28826:	bf14      	ite	ne
   28828:	f06f 0008 	mvnne.w	r0, #8
   2882c:	f06f 0001 	mvneq.w	r0, #1
   28830:	e009      	b.n	28846 <abi_getter+0x32>
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
   28832:	f855 6b04 	ldr.w	r6, [r5], #4
		if (ext_abi->abi_id == id) {
   28836:	f8d6 c00c 	ldr.w	ip, [r6, #12]
   2883a:	4560      	cmp	r0, ip
   2883c:	d106      	bne.n	2884c <abi_getter+0x38>
			if (index-- == 0) {
   2883e:	1e4c      	subs	r4, r1, #1
   28840:	b911      	cbnz	r1, 28848 <abi_getter+0x34>
				return 0;
   28842:	4608      	mov	r0, r1
				*abi = ext_abi;
   28844:	6016      	str	r6, [r2, #0]
}
   28846:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (index-- == 0) {
   28848:	4621      	mov	r1, r4
			id_found = true;
   2884a:	2401      	movs	r4, #1
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   2884c:	3301      	adds	r3, #1
   2884e:	e7e7      	b.n	28820 <abi_getter+0xc>
		return -EFAULT;
   28850:	f06f 000d 	mvn.w	r0, #13
   28854:	e7f7      	b.n	28846 <abi_getter+0x32>
   28856:	bf00      	nop
   28858:	0004a918 	.word	0x0004a918
   2885c:	00000000 	.word	0x00000000

00028860 <close>:
{
   28860:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   28862:	4c10      	ldr	r4, [pc, #64]	; (288a4 <close+0x44>)
{
   28864:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   28866:	6823      	ldr	r3, [r4, #0]
   28868:	b94b      	cbnz	r3, 2887e <close+0x1e>
   2886a:	490f      	ldr	r1, [pc, #60]	; (288a8 <close+0x48>)
   2886c:	480f      	ldr	r0, [pc, #60]	; (288ac <close+0x4c>)
   2886e:	2321      	movs	r3, #33	; 0x21
   28870:	4a0f      	ldr	r2, [pc, #60]	; (288b0 <close+0x50>)
   28872:	f016 fde8 	bl	3f446 <printk>
   28876:	2121      	movs	r1, #33	; 0x21
   28878:	480d      	ldr	r0, [pc, #52]	; (288b0 <close+0x50>)
   2887a:	f016 fdf1 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   2887e:	6823      	ldr	r3, [r4, #0]
   28880:	685b      	ldr	r3, [r3, #4]
   28882:	b94b      	cbnz	r3, 28898 <close+0x38>
   28884:	490b      	ldr	r1, [pc, #44]	; (288b4 <close+0x54>)
   28886:	4809      	ldr	r0, [pc, #36]	; (288ac <close+0x4c>)
   28888:	2322      	movs	r3, #34	; 0x22
   2888a:	4a09      	ldr	r2, [pc, #36]	; (288b0 <close+0x50>)
   2888c:	f016 fddb 	bl	3f446 <printk>
   28890:	2122      	movs	r1, #34	; 0x22
   28892:	4807      	ldr	r0, [pc, #28]	; (288b0 <close+0x50>)
   28894:	f016 fde4 	bl	3f460 <assert_post_action>
	return socket_ops->close(sock);
   28898:	6823      	ldr	r3, [r4, #0]
   2889a:	4628      	mov	r0, r5
}
   2889c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   288a0:	685b      	ldr	r3, [r3, #4]
   288a2:	4718      	bx	r3
   288a4:	20023934 	.word	0x20023934
   288a8:	00045442 	.word	0x00045442
   288ac:	00045316 	.word	0x00045316
   288b0:	00045419 	.word	0x00045419
   288b4:	00046c56 	.word	0x00046c56

000288b8 <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   288b8:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   288ba:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   288bc:	b118      	cbz	r0, 288c6 <callback_worker+0xe>
		data->callback(data->data);
   288be:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   288c2:	300c      	adds	r0, #12
   288c4:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   288c6:	a901      	add	r1, sp, #4
   288c8:	4802      	ldr	r0, [pc, #8]	; (288d4 <callback_worker+0x1c>)
   288ca:	f010 fcb5 	bl	39238 <k_mem_slab_free>
}
   288ce:	b003      	add	sp, #12
   288d0:	f85d fb04 	ldr.w	pc, [sp], #4
   288d4:	20031f70 	.word	0x20031f70

000288d8 <open_socket>:
{
   288d8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(socket_ops);
   288da:	4c16      	ldr	r4, [pc, #88]	; (28934 <open_socket+0x5c>)
   288dc:	6823      	ldr	r3, [r4, #0]
   288de:	b94b      	cbnz	r3, 288f4 <open_socket+0x1c>
   288e0:	4915      	ldr	r1, [pc, #84]	; (28938 <open_socket+0x60>)
   288e2:	4816      	ldr	r0, [pc, #88]	; (2893c <open_socket+0x64>)
   288e4:	2319      	movs	r3, #25
   288e6:	4a16      	ldr	r2, [pc, #88]	; (28940 <open_socket+0x68>)
   288e8:	f016 fdad 	bl	3f446 <printk>
   288ec:	2119      	movs	r1, #25
   288ee:	4814      	ldr	r0, [pc, #80]	; (28940 <open_socket+0x68>)
   288f0:	f016 fdb6 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   288f4:	6823      	ldr	r3, [r4, #0]
   288f6:	681b      	ldr	r3, [r3, #0]
   288f8:	b94b      	cbnz	r3, 2890e <open_socket+0x36>
   288fa:	4912      	ldr	r1, [pc, #72]	; (28944 <open_socket+0x6c>)
   288fc:	480f      	ldr	r0, [pc, #60]	; (2893c <open_socket+0x64>)
   288fe:	231a      	movs	r3, #26
   28900:	4a0f      	ldr	r2, [pc, #60]	; (28940 <open_socket+0x68>)
   28902:	f016 fda0 	bl	3f446 <printk>
   28906:	211a      	movs	r1, #26
   28908:	480d      	ldr	r0, [pc, #52]	; (28940 <open_socket+0x68>)
   2890a:	f016 fda9 	bl	3f460 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   2890e:	6823      	ldr	r3, [r4, #0]
   28910:	f240 2201 	movw	r2, #513	; 0x201
   28914:	681b      	ldr	r3, [r3, #0]
   28916:	2100      	movs	r1, #0
   28918:	2066      	movs	r0, #102	; 0x66
   2891a:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, 0, NPROTO_AT);
   2891c:	4b0a      	ldr	r3, [pc, #40]	; (28948 <open_socket+0x70>)
   2891e:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   28920:	3001      	adds	r0, #1
   28922:	d104      	bne.n	2892e <open_socket+0x56>
		return -errno;
   28924:	f016 ffc4 	bl	3f8b0 <__errno>
   28928:	6800      	ldr	r0, [r0, #0]
   2892a:	4240      	negs	r0, r0
}
   2892c:	bd10      	pop	{r4, pc}
	return 0;
   2892e:	2000      	movs	r0, #0
   28930:	e7fc      	b.n	2892c <open_socket+0x54>
   28932:	bf00      	nop
   28934:	20023934 	.word	0x20023934
   28938:	00045442 	.word	0x00045442
   2893c:	00045316 	.word	0x00045316
   28940:	00045419 	.word	0x00045419
   28944:	00046c68 	.word	0x00046c68
   28948:	200248b4 	.word	0x200248b4

0002894c <at_write>:
		}
	}
}

static inline int at_write(const char *const cmd, enum at_cmd_state *state)
{
   2894c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   28950:	4680      	mov	r8, r0
   28952:	460d      	mov	r5, r1
	int bytes_sent;
	int bytes_to_send = strlen(cmd);
   28954:	f7f1 fac6 	bl	19ee4 <strlen>
	__ASSERT_NO_MSG(socket_ops);
   28958:	4c30      	ldr	r4, [pc, #192]	; (28a1c <at_write+0xd0>)
	struct return_state_object ret;

	LOG_DBG("Sending command %s", log_strdup(cmd));

	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   2895a:	4b31      	ldr	r3, [pc, #196]	; (28a20 <at_write+0xd4>)
	int bytes_to_send = strlen(cmd);
   2895c:	4606      	mov	r6, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   2895e:	681f      	ldr	r7, [r3, #0]
   28960:	6823      	ldr	r3, [r4, #0]
   28962:	b94b      	cbnz	r3, 28978 <at_write+0x2c>
   28964:	492f      	ldr	r1, [pc, #188]	; (28a24 <at_write+0xd8>)
   28966:	4830      	ldr	r0, [pc, #192]	; (28a28 <at_write+0xdc>)
   28968:	237e      	movs	r3, #126	; 0x7e
   2896a:	4a30      	ldr	r2, [pc, #192]	; (28a2c <at_write+0xe0>)
   2896c:	f016 fd6b 	bl	3f446 <printk>
   28970:	217e      	movs	r1, #126	; 0x7e
   28972:	482e      	ldr	r0, [pc, #184]	; (28a2c <at_write+0xe0>)
   28974:	f016 fd74 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   28978:	6823      	ldr	r3, [r4, #0]
   2897a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2897c:	b94b      	cbnz	r3, 28992 <at_write+0x46>
   2897e:	492c      	ldr	r1, [pc, #176]	; (28a30 <at_write+0xe4>)
   28980:	4829      	ldr	r0, [pc, #164]	; (28a28 <at_write+0xdc>)
   28982:	237f      	movs	r3, #127	; 0x7f
   28984:	4a29      	ldr	r2, [pc, #164]	; (28a2c <at_write+0xe0>)
   28986:	f016 fd5e 	bl	3f446 <printk>
   2898a:	217f      	movs	r1, #127	; 0x7f
   2898c:	4827      	ldr	r0, [pc, #156]	; (28a2c <at_write+0xe0>)
   2898e:	f016 fd67 	bl	3f460 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   28992:	6823      	ldr	r3, [r4, #0]
   28994:	4632      	mov	r2, r6
   28996:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   28998:	4641      	mov	r1, r8
   2899a:	2300      	movs	r3, #0
   2899c:	4638      	mov	r0, r7
   2899e:	47a0      	blx	r4

	if (bytes_sent == -1) {
   289a0:	1c43      	adds	r3, r0, #1
   289a2:	4604      	mov	r4, r0
   289a4:	d121      	bne.n	289ea <at_write+0x9e>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   289a6:	2301      	movs	r3, #1
   289a8:	f04f 0400 	mov.w	r4, #0
   289ac:	4a21      	ldr	r2, [pc, #132]	; (28a34 <at_write+0xe8>)
   289ae:	f363 0407 	bfi	r4, r3, #0, #8
   289b2:	4b21      	ldr	r3, [pc, #132]	; (28a38 <at_write+0xec>)
   289b4:	1a9b      	subs	r3, r3, r2
   289b6:	08db      	lsrs	r3, r3, #3
   289b8:	f363 148f 	bfi	r4, r3, #6, #10
   289bc:	f016 ff78 	bl	3f8b0 <__errno>
   289c0:	491e      	ldr	r1, [pc, #120]	; (28a3c <at_write+0xf0>)
   289c2:	6802      	ldr	r2, [r0, #0]
   289c4:	4620      	mov	r0, r4
   289c6:	f016 fd5c 	bl	3f482 <log_string_sync>
		ret.code  = -errno;
   289ca:	f016 ff71 	bl	3f8b0 <__errno>
   289ce:	6803      	ldr	r3, [r0, #0]
   289d0:	425b      	negs	r3, r3
   289d2:	9300      	str	r3, [sp, #0]
		ret.state = AT_CMD_ERROR;
   289d4:	2301      	movs	r3, #1
   289d6:	f88d 3004 	strb.w	r3, [sp, #4]
				"same as expected (%d)",
				bytes_sent, bytes_to_send);
		}
	}

	if (state) {
   289da:	b115      	cbz	r5, 289e2 <at_write+0x96>
		*state = ret.state;
   289dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
   289e0:	702b      	strb	r3, [r5, #0]
	}

	return ret.code;
}
   289e2:	9800      	ldr	r0, [sp, #0]
   289e4:	b002      	add	sp, #8
   289e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&q, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(q, data, timeout);
   289ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   289ee:	4669      	mov	r1, sp
   289f0:	4813      	ldr	r0, [pc, #76]	; (28a40 <at_write+0xf4>)
   289f2:	f010 fe21 	bl	39638 <z_impl_k_msgq_get>
		if (bytes_sent != bytes_to_send) {
   289f6:	42a6      	cmp	r6, r4
   289f8:	d0ef      	beq.n	289da <at_write+0x8e>
			LOG_ERR("Bytes sent (%d) was not the "
   289fa:	2301      	movs	r3, #1
   289fc:	f04f 0000 	mov.w	r0, #0
   28a00:	4a0c      	ldr	r2, [pc, #48]	; (28a34 <at_write+0xe8>)
   28a02:	f363 0007 	bfi	r0, r3, #0, #8
   28a06:	4b0c      	ldr	r3, [pc, #48]	; (28a38 <at_write+0xec>)
   28a08:	490e      	ldr	r1, [pc, #56]	; (28a44 <at_write+0xf8>)
   28a0a:	1a9b      	subs	r3, r3, r2
   28a0c:	08db      	lsrs	r3, r3, #3
   28a0e:	f363 108f 	bfi	r0, r3, #6, #10
   28a12:	4622      	mov	r2, r4
   28a14:	4633      	mov	r3, r6
   28a16:	f016 fd34 	bl	3f482 <log_string_sync>
   28a1a:	e7de      	b.n	289da <at_write+0x8e>
   28a1c:	20023934 	.word	0x20023934
   28a20:	200248b4 	.word	0x200248b4
   28a24:	00045442 	.word	0x00045442
   28a28:	00045316 	.word	0x00045316
   28a2c:	00045419 	.word	0x00045419
   28a30:	00046ca0 	.word	0x00046ca0
   28a34:	00042fb4 	.word	0x00042fb4
   28a38:	00042fb4 	.word	0x00042fb4
   28a3c:	0004943c 	.word	0x0004943c
   28a40:	20032030 	.word	0x20032030
   28a44:	0004945f 	.word	0x0004945f

00028a48 <socket_thread_fn>:
{
   28a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
					LOG_ERR("Response buffer not large "
   28a4c:	4b9e      	ldr	r3, [pc, #632]	; (28cc8 <socket_thread_fn+0x280>)
   28a4e:	4c9f      	ldr	r4, [pc, #636]	; (28ccc <socket_thread_fn+0x284>)
{
   28a50:	b087      	sub	sp, #28
					LOG_ERR("Response buffer not large "
   28a52:	1ae4      	subs	r4, r4, r3
   28a54:	f3c4 04c9 	ubfx	r4, r4, #3, #10
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   28a58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28a5c:	a903      	add	r1, sp, #12
   28a5e:	489c      	ldr	r0, [pc, #624]	; (28cd0 <socket_thread_fn+0x288>)
   28a60:	f010 fb88 	bl	39174 <k_mem_slab_alloc>
		ret.code  = 0;
   28a64:	2300      	movs	r3, #0
		item->callback = NULL;
   28a66:	9d03      	ldr	r5, [sp, #12]
		ret.code  = 0;
   28a68:	9304      	str	r3, [sp, #16]
		item->callback = NULL;
   28a6a:	f8c5 3a98 	str.w	r3, [r5, #2712]	; 0xa98
		ret.state = AT_CMD_OK;
   28a6e:	f88d 3014 	strb.w	r3, [sp, #20]
	__ASSERT_NO_MSG(socket_ops);
   28a72:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 28d28 <socket_thread_fn+0x2e0>
		bytes_read = recv(common_socket_fd, item->data,
   28a76:	4b97      	ldr	r3, [pc, #604]	; (28cd4 <socket_thread_fn+0x28c>)
   28a78:	350c      	adds	r5, #12
   28a7a:	f8d3 b000 	ldr.w	fp, [r3]
   28a7e:	f8da 3000 	ldr.w	r3, [sl]
   28a82:	b94b      	cbnz	r3, 28a98 <socket_thread_fn+0x50>
   28a84:	4994      	ldr	r1, [pc, #592]	; (28cd8 <socket_thread_fn+0x290>)
   28a86:	4895      	ldr	r0, [pc, #596]	; (28cdc <socket_thread_fn+0x294>)
   28a88:	2369      	movs	r3, #105	; 0x69
   28a8a:	4a95      	ldr	r2, [pc, #596]	; (28ce0 <socket_thread_fn+0x298>)
   28a8c:	f016 fcdb 	bl	3f446 <printk>
   28a90:	2169      	movs	r1, #105	; 0x69
   28a92:	4893      	ldr	r0, [pc, #588]	; (28ce0 <socket_thread_fn+0x298>)
   28a94:	f016 fce4 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   28a98:	f8da 3000 	ldr.w	r3, [sl]
   28a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28a9e:	b94b      	cbnz	r3, 28ab4 <socket_thread_fn+0x6c>
   28aa0:	4990      	ldr	r1, [pc, #576]	; (28ce4 <socket_thread_fn+0x29c>)
   28aa2:	488e      	ldr	r0, [pc, #568]	; (28cdc <socket_thread_fn+0x294>)
   28aa4:	236a      	movs	r3, #106	; 0x6a
   28aa6:	4a8e      	ldr	r2, [pc, #568]	; (28ce0 <socket_thread_fn+0x298>)
   28aa8:	f016 fccd 	bl	3f446 <printk>
   28aac:	216a      	movs	r1, #106	; 0x6a
   28aae:	488c      	ldr	r0, [pc, #560]	; (28ce0 <socket_thread_fn+0x298>)
   28ab0:	f016 fcd6 	bl	3f460 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   28ab4:	f8da 3000 	ldr.w	r3, [sl]
   28ab8:	f640 228c 	movw	r2, #2700	; 0xa8c
   28abc:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   28ac0:	4629      	mov	r1, r5
   28ac2:	2300      	movs	r3, #0
   28ac4:	4658      	mov	r0, fp
   28ac6:	47d0      	blx	sl
		if (bytes_read < 0) {
   28ac8:	1e02      	subs	r2, r0, #0
   28aca:	da58      	bge.n	28b7e <socket_thread_fn+0x136>
			LOG_ERR("AT socket recv failed with err %d",
   28acc:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   28ad0:	f043 0301 	orr.w	r3, r3, #1
   28ad4:	f363 0607 	bfi	r6, r3, #0, #8
   28ad8:	f364 168f 	bfi	r6, r4, #6, #10
   28adc:	4630      	mov	r0, r6
   28ade:	4982      	ldr	r1, [pc, #520]	; (28ce8 <socket_thread_fn+0x2a0>)
   28ae0:	f016 fccf 	bl	3f482 <log_string_sync>
			if ((close(common_socket_fd) == 0) &&
   28ae4:	4b7b      	ldr	r3, [pc, #492]	; (28cd4 <socket_thread_fn+0x28c>)
   28ae6:	6818      	ldr	r0, [r3, #0]
   28ae8:	f7ff feba 	bl	28860 <close>
   28aec:	2800      	cmp	r0, #0
   28aee:	d131      	bne.n	28b54 <socket_thread_fn+0x10c>
			    (open_socket() == 0)) {
   28af0:	f7ff fef2 	bl	288d8 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   28af4:	bb70      	cbnz	r0, 28b54 <socket_thread_fn+0x10c>
				LOG_INF("AT socket recovered");
   28af6:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   28afa:	f043 0303 	orr.w	r3, r3, #3
   28afe:	f363 0707 	bfi	r7, r3, #0, #8
   28b02:	f364 178f 	bfi	r7, r4, #6, #10
   28b06:	4979      	ldr	r1, [pc, #484]	; (28cec <socket_thread_fn+0x2a4>)
   28b08:	4638      	mov	r0, r7
   28b0a:	f016 fcba 	bl	3f482 <log_string_sync>
				ret.state = AT_CMD_ERROR;
   28b0e:	2301      	movs	r3, #1
   28b10:	f88d 3014 	strb.w	r3, [sp, #20]
				ret.code  = -errno;
   28b14:	f016 fecc 	bl	3f8b0 <__errno>
   28b18:	6803      	ldr	r3, [r0, #0]
   28b1a:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   28b1c:	9304      	str	r3, [sp, #16]
		if (item->callback == NULL) {
   28b1e:	9903      	ldr	r1, [sp, #12]
   28b20:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   28b24:	2b00      	cmp	r3, #0
   28b26:	f040 80a5 	bne.w	28c74 <socket_thread_fn+0x22c>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   28b2a:	a903      	add	r1, sp, #12
   28b2c:	4868      	ldr	r0, [pc, #416]	; (28cd0 <socket_thread_fn+0x288>)
   28b2e:	f010 fb83 	bl	39238 <k_mem_slab_free>
	return z_impl_k_sem_count_get(sem);
   28b32:	4b6f      	ldr	r3, [pc, #444]	; (28cf0 <socket_thread_fn+0x2a8>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   28b34:	689b      	ldr	r3, [r3, #8]
   28b36:	2b00      	cmp	r3, #0
   28b38:	d18e      	bne.n	28a58 <socket_thread_fn+0x10>
   28b3a:	f89d 2014 	ldrb.w	r2, [sp, #20]
   28b3e:	2a04      	cmp	r2, #4
   28b40:	d08a      	beq.n	28a58 <socket_thread_fn+0x10>
			current_cmd_handler = NULL;
   28b42:	4a6c      	ldr	r2, [pc, #432]	; (28cf4 <socket_thread_fn+0x2ac>)
   28b44:	6013      	str	r3, [r2, #0]
	return z_impl_k_msgq_put(q, data, timeout);
   28b46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28b4a:	a904      	add	r1, sp, #16
   28b4c:	486a      	ldr	r0, [pc, #424]	; (28cf8 <socket_thread_fn+0x2b0>)
   28b4e:	f010 fcd5 	bl	394fc <z_impl_k_msgq_put>
   28b52:	e781      	b.n	28a58 <socket_thread_fn+0x10>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   28b54:	2301      	movs	r3, #1
   28b56:	f04f 0500 	mov.w	r5, #0
   28b5a:	f363 0507 	bfi	r5, r3, #0, #8
   28b5e:	f016 fea7 	bl	3f8b0 <__errno>
   28b62:	f364 158f 	bfi	r5, r4, #6, #10
   28b66:	6802      	ldr	r2, [r0, #0]
   28b68:	4964      	ldr	r1, [pc, #400]	; (28cfc <socket_thread_fn+0x2b4>)
   28b6a:	4628      	mov	r0, r5
   28b6c:	f016 fc89 	bl	3f482 <log_string_sync>
			close(common_socket_fd);
   28b70:	4b58      	ldr	r3, [pc, #352]	; (28cd4 <socket_thread_fn+0x28c>)
   28b72:	6818      	ldr	r0, [r3, #0]
   28b74:	f7ff fe74 	bl	28860 <close>
}
   28b78:	b007      	add	sp, #28
   28b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (bytes_read == sizeof(item->data) ||
   28b7e:	f640 238c 	movw	r3, #2700	; 0xa8c
   28b82:	429a      	cmp	r2, r3
   28b84:	d004      	beq.n	28b90 <socket_thread_fn+0x148>
			   item->data[bytes_read - 1] != '\0') {
   28b86:	f8dd a00c 	ldr.w	sl, [sp, #12]
   28b8a:	4452      	add	r2, sl
		} else if (bytes_read == sizeof(item->data) ||
   28b8c:	7ad3      	ldrb	r3, [r2, #11]
   28b8e:	b173      	cbz	r3, 28bae <socket_thread_fn+0x166>
			LOG_ERR("AT message to large for reception buffer or "
   28b90:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   28b94:	f043 0301 	orr.w	r3, r3, #1
   28b98:	f363 0807 	bfi	r8, r3, #0, #8
   28b9c:	f364 188f 	bfi	r8, r4, #6, #10
   28ba0:	4957      	ldr	r1, [pc, #348]	; (28d00 <socket_thread_fn+0x2b8>)
   28ba2:	4640      	mov	r0, r8
   28ba4:	f016 fc6d 	bl	3f482 <log_string_sync>
			ret.code  = -ENOBUFS;
   28ba8:	f06f 0368 	mvn.w	r3, #104	; 0x68
   28bac:	e7b6      	b.n	28b1c <socket_thread_fn+0xd4>
	ret->state = AT_CMD_NOTIFICATION;
   28bae:	2204      	movs	r2, #4
		payload_len = get_return_code(item->data, &ret);
   28bb0:	f10a 050c 	add.w	r5, sl, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   28bb4:	4953      	ldr	r1, [pc, #332]	; (28d04 <socket_thread_fn+0x2bc>)
   28bb6:	4628      	mov	r0, r5
   28bb8:	9301      	str	r3, [sp, #4]
	ret->state = AT_CMD_NOTIFICATION;
   28bba:	f88d 2014 	strb.w	r2, [sp, #20]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   28bbe:	f019 f922 	bl	41e06 <strstr>
		if (tmpstr) {
   28bc2:	4683      	mov	fp, r0
   28bc4:	b120      	cbz	r0, 28bd0 <socket_thread_fn+0x188>
			ret->state = AT_CMD_OK;
   28bc6:	9b01      	ldr	r3, [sp, #4]
   28bc8:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code  = -ENOEXEC;
   28bcc:	9304      	str	r3, [sp, #16]
			break;
   28bce:	e00d      	b.n	28bec <socket_thread_fn+0x1a4>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   28bd0:	494d      	ldr	r1, [pc, #308]	; (28d08 <socket_thread_fn+0x2c0>)
   28bd2:	4628      	mov	r0, r5
   28bd4:	f019 f917 	bl	41e06 <strstr>
		if (tmpstr) {
   28bd8:	4683      	mov	fp, r0
   28bda:	b330      	cbz	r0, 28c2a <socket_thread_fn+0x1e2>
			ret->state = AT_CMD_ERROR_CMS;
   28bdc:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   28bde:	f10a 0017 	add.w	r0, sl, #23
			ret->state = AT_CMD_ERROR_CME;
   28be2:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   28be6:	f018 fec4 	bl	41972 <atoi>
   28bea:	9004      	str	r0, [sp, #16]
		buf[new_len++] = '\0';
   28bec:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   28bee:	ebab 0205 	sub.w	r2, fp, r5
		buf[new_len++] = '\0';
   28bf2:	3201      	adds	r2, #1
   28bf4:	f88b 3000 	strb.w	r3, [fp]
		if (ret.state != AT_CMD_NOTIFICATION) {
   28bf8:	f89d 3014 	ldrb.w	r3, [sp, #20]
   28bfc:	2b04      	cmp	r3, #4
   28bfe:	d04f      	beq.n	28ca0 <socket_thread_fn+0x258>
			if ((response_buf_len > 0) &&
   28c00:	f8df a128 	ldr.w	sl, [pc, #296]	; 28d2c <socket_thread_fn+0x2e4>
   28c04:	f8da 3000 	ldr.w	r3, [sl]
   28c08:	2b00      	cmp	r3, #0
   28c0a:	d052      	beq.n	28cb2 <socket_thread_fn+0x26a>
			    (response_buf != NULL)) {
   28c0c:	4d3f      	ldr	r5, [pc, #252]	; (28d0c <socket_thread_fn+0x2c4>)
   28c0e:	6828      	ldr	r0, [r5, #0]
			if ((response_buf_len > 0) &&
   28c10:	2800      	cmp	r0, #0
   28c12:	d04e      	beq.n	28cb2 <socket_thread_fn+0x26a>
				if (response_buf_len > payload_len) {
   28c14:	4293      	cmp	r3, r2
   28c16:	d91d      	bls.n	28c54 <socket_thread_fn+0x20c>
   28c18:	9903      	ldr	r1, [sp, #12]
   28c1a:	310c      	adds	r1, #12
   28c1c:	f018 fec9 	bl	419b2 <memcpy>
				response_buf_len = 0;
   28c20:	2300      	movs	r3, #0
   28c22:	f8ca 3000 	str.w	r3, [sl]
				response_buf     = NULL;
   28c26:	602b      	str	r3, [r5, #0]
				goto next;
   28c28:	e779      	b.n	28b1e <socket_thread_fn+0xd6>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   28c2a:	4939      	ldr	r1, [pc, #228]	; (28d10 <socket_thread_fn+0x2c8>)
   28c2c:	4628      	mov	r0, r5
   28c2e:	f019 f8ea 	bl	41e06 <strstr>
		if (tmpstr) {
   28c32:	4683      	mov	fp, r0
   28c34:	b108      	cbz	r0, 28c3a <socket_thread_fn+0x1f2>
			ret->state = AT_CMD_ERROR_CME;
   28c36:	2303      	movs	r3, #3
   28c38:	e7d1      	b.n	28bde <socket_thread_fn+0x196>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   28c3a:	4936      	ldr	r1, [pc, #216]	; (28d14 <socket_thread_fn+0x2cc>)
   28c3c:	4628      	mov	r0, r5
   28c3e:	f019 f8e2 	bl	41e06 <strstr>
		if (tmpstr) {
   28c42:	4683      	mov	fp, r0
   28c44:	2800      	cmp	r0, #0
   28c46:	d039      	beq.n	28cbc <socket_thread_fn+0x274>
			ret->state = AT_CMD_ERROR;
   28c48:	2301      	movs	r3, #1
   28c4a:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code  = -ENOEXEC;
   28c4e:	f06f 0307 	mvn.w	r3, #7
   28c52:	e7bb      	b.n	28bcc <socket_thread_fn+0x184>
					LOG_ERR("Response buffer not large "
   28c54:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   28c58:	f043 0301 	orr.w	r3, r3, #1
   28c5c:	f363 0907 	bfi	r9, r3, #0, #8
   28c60:	f364 198f 	bfi	r9, r4, #6, #10
   28c64:	492c      	ldr	r1, [pc, #176]	; (28d18 <socket_thread_fn+0x2d0>)
   28c66:	4648      	mov	r0, r9
   28c68:	f016 fc0b 	bl	3f482 <log_string_sync>
					ret.code  = -EMSGSIZE;
   28c6c:	f06f 0379 	mvn.w	r3, #121	; 0x79
   28c70:	9304      	str	r3, [sp, #16]
   28c72:	e7d5      	b.n	28c20 <socket_thread_fn+0x1d8>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   28c74:	4b29      	ldr	r3, [pc, #164]	; (28d1c <socket_thread_fn+0x2d4>)
   28c76:	2200      	movs	r2, #0
   28c78:	604b      	str	r3, [r1, #4]
   28c7a:	460b      	mov	r3, r1
   28c7c:	600a      	str	r2, [r1, #0]
   28c7e:	f843 2f08 	str.w	r2, [r3, #8]!
   28c82:	e8d3 2fef 	ldaex	r2, [r3]
   28c86:	f042 0001 	orr.w	r0, r2, #1
   28c8a:	e8c3 0fe5 	stlex	r5, r0, [r3]
   28c8e:	2d00      	cmp	r5, #0
   28c90:	d1f7      	bne.n	28c82 <socket_thread_fn+0x23a>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   28c92:	07d3      	lsls	r3, r2, #31
   28c94:	f53f af4d 	bmi.w	28b32 <socket_thread_fn+0xea>
		k_queue_append(&work_q->queue, work);
   28c98:	4821      	ldr	r0, [pc, #132]	; (28d20 <socket_thread_fn+0x2d8>)
   28c9a:	f018 fd3e 	bl	4171a <k_queue_append>
   28c9e:	e748      	b.n	28b32 <socket_thread_fn+0xea>
		if (payload_len == 0) {
   28ca0:	2a00      	cmp	r2, #0
   28ca2:	f43f af3c 	beq.w	28b1e <socket_thread_fn+0xd6>
			item->callback = notification_handler;
   28ca6:	4b1f      	ldr	r3, [pc, #124]	; (28d24 <socket_thread_fn+0x2dc>)
			item->callback = current_cmd_handler;
   28ca8:	681a      	ldr	r2, [r3, #0]
   28caa:	9b03      	ldr	r3, [sp, #12]
   28cac:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
   28cb0:	e735      	b.n	28b1e <socket_thread_fn+0xd6>
		if (payload_len == 0) {
   28cb2:	2a00      	cmp	r2, #0
   28cb4:	f43f af33 	beq.w	28b1e <socket_thread_fn+0xd6>
			item->callback = current_cmd_handler;
   28cb8:	4b0e      	ldr	r3, [pc, #56]	; (28cf4 <socket_thread_fn+0x2ac>)
   28cba:	e7f5      	b.n	28ca8 <socket_thread_fn+0x260>
		new_len = strlen(buf) + 1;
   28cbc:	4628      	mov	r0, r5
   28cbe:	f7f1 f911 	bl	19ee4 <strlen>
   28cc2:	1c42      	adds	r2, r0, #1
   28cc4:	e798      	b.n	28bf8 <socket_thread_fn+0x1b0>
   28cc6:	bf00      	nop
   28cc8:	00042fb4 	.word	0x00042fb4
   28ccc:	00042fb4 	.word	0x00042fb4
   28cd0:	20031f70 	.word	0x20031f70
   28cd4:	200248b4 	.word	0x200248b4
   28cd8:	00045442 	.word	0x00045442
   28cdc:	00045316 	.word	0x00045316
   28ce0:	00045419 	.word	0x00045419
   28ce4:	00046c8f 	.word	0x00046c8f
   28ce8:	00049491 	.word	0x00049491
   28cec:	000494b3 	.word	0x000494b3
   28cf0:	20031fd8 	.word	0x20031fd8
   28cf4:	200248b8 	.word	0x200248b8
   28cf8:	20032030 	.word	0x20032030
   28cfc:	000494c7 	.word	0x000494c7
   28d00:	000494fe 	.word	0x000494fe
   28d04:	000459e5 	.word	0x000459e5
   28d08:	00049548 	.word	0x00049548
   28d0c:	200248c0 	.word	0x200248c0
   28d10:	00049554 	.word	0x00049554
   28d14:	00047e91 	.word	0x00047e91
   28d18:	00049560 	.word	0x00049560
   28d1c:	000288b9 	.word	0x000288b9
   28d20:	2002a220 	.word	0x2002a220
   28d24:	200248bc 	.word	0x200248bc
   28d28:	20023934 	.word	0x20023934
   28d2c:	200248c4 	.word	0x200248c4

00028d30 <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   28d30:	b510      	push	{r4, lr}
   28d32:	b086      	sub	sp, #24
	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   28d34:	f7ff fdd0 	bl	288d8 <open_socket>
	if (err) {
   28d38:	4604      	mov	r4, r0
   28d3a:	b188      	cbz	r0, 28d60 <at_cmd_driver_init+0x30>
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   28d3c:	2301      	movs	r3, #1
   28d3e:	f04f 0000 	mov.w	r0, #0
   28d42:	4a0f      	ldr	r2, [pc, #60]	; (28d80 <at_cmd_driver_init+0x50>)
   28d44:	f363 0007 	bfi	r0, r3, #0, #8
   28d48:	4b0e      	ldr	r3, [pc, #56]	; (28d84 <at_cmd_driver_init+0x54>)
   28d4a:	490f      	ldr	r1, [pc, #60]	; (28d88 <at_cmd_driver_init+0x58>)
   28d4c:	1a9b      	subs	r3, r3, r2
   28d4e:	08db      	lsrs	r3, r3, #3
   28d50:	f363 108f 	bfi	r0, r3, #6, #10
   28d54:	4622      	mov	r2, r4
   28d56:	f016 fb94 	bl	3f482 <log_string_sync>
			THREAD_PRIORITY, 0, K_NO_WAIT);

	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   28d5a:	4620      	mov	r0, r4
   28d5c:	b006      	add	sp, #24
   28d5e:	bd10      	pop	{r4, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   28d60:	230a      	movs	r3, #10
   28d62:	e9cd 0004 	strd	r0, r0, [sp, #16]
   28d66:	e9cd 0302 	strd	r0, r3, [sp, #8]
   28d6a:	e9cd 0000 	strd	r0, r0, [sp]
   28d6e:	4b07      	ldr	r3, [pc, #28]	; (28d8c <at_cmd_driver_init+0x5c>)
   28d70:	f44f 6280 	mov.w	r2, #1024	; 0x400
   28d74:	4906      	ldr	r1, [pc, #24]	; (28d90 <at_cmd_driver_init+0x60>)
   28d76:	4807      	ldr	r0, [pc, #28]	; (28d94 <at_cmd_driver_init+0x64>)
   28d78:	f012 fa00 	bl	3b17c <z_impl_k_thread_create>
	return 0;
   28d7c:	e7ed      	b.n	28d5a <at_cmd_driver_init+0x2a>
   28d7e:	bf00      	nop
   28d80:	00042fb4 	.word	0x00042fb4
   28d84:	00042fb4 	.word	0x00042fb4
   28d88:	000493f1 	.word	0x000493f1
   28d8c:	00028a49 	.word	0x00028a49
   28d90:	2002cc10 	.word	0x2002cc10
   28d94:	200248c8 	.word	0x200248c8

00028d98 <at_cmd_write>:
{
   28d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28d9c:	4605      	mov	r5, r0
   28d9e:	4688      	mov	r8, r1
   28da0:	4617      	mov	r7, r2
   28da2:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
   28da4:	4c0a      	ldr	r4, [pc, #40]	; (28dd0 <at_cmd_write+0x38>)
   28da6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   28daa:	4620      	mov	r0, r4
   28dac:	f012 f8ba 	bl	3af24 <z_impl_k_sem_take>
	response_buf     = buf;
   28db0:	4b08      	ldr	r3, [pc, #32]	; (28dd4 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   28db2:	4631      	mov	r1, r6
	response_buf     = buf;
   28db4:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   28db8:	4b07      	ldr	r3, [pc, #28]	; (28dd8 <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   28dba:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   28dbc:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
   28dbe:	f7ff fdc5 	bl	2894c <at_write>
   28dc2:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   28dc4:	4620      	mov	r0, r4
   28dc6:	f012 f865 	bl	3ae94 <z_impl_k_sem_give>
}
   28dca:	4628      	mov	r0, r5
   28dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28dd0:	20031fd8 	.word	0x20031fd8
   28dd4:	200248c0 	.word	0x200248c0
   28dd8:	200248c4 	.word	0x200248c4

00028ddc <at_cmd_set_notification_handler>:
{
   28ddc:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   28dde:	4c0f      	ldr	r4, [pc, #60]	; (28e1c <at_cmd_set_notification_handler+0x40>)
{
   28de0:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   28de2:	6822      	ldr	r2, [r4, #0]
   28de4:	b17a      	cbz	r2, 28e06 <at_cmd_set_notification_handler+0x2a>
   28de6:	4282      	cmp	r2, r0
   28de8:	d00d      	beq.n	28e06 <at_cmd_set_notification_handler+0x2a>
		LOG_WRN("Forgetting prior notification handler %p",
   28dea:	2302      	movs	r3, #2
   28dec:	f04f 0000 	mov.w	r0, #0
   28df0:	490b      	ldr	r1, [pc, #44]	; (28e20 <at_cmd_set_notification_handler+0x44>)
   28df2:	f363 0007 	bfi	r0, r3, #0, #8
   28df6:	4b0b      	ldr	r3, [pc, #44]	; (28e24 <at_cmd_set_notification_handler+0x48>)
   28df8:	1a5b      	subs	r3, r3, r1
   28dfa:	08db      	lsrs	r3, r3, #3
   28dfc:	f363 108f 	bfi	r0, r3, #6, #10
   28e00:	4909      	ldr	r1, [pc, #36]	; (28e28 <at_cmd_set_notification_handler+0x4c>)
   28e02:	f016 fb3e 	bl	3f482 <log_string_sync>
	return z_impl_k_sem_take(sem, timeout);
   28e06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   28e0a:	4808      	ldr	r0, [pc, #32]	; (28e2c <at_cmd_set_notification_handler+0x50>)
   28e0c:	f012 f88a 	bl	3af24 <z_impl_k_sem_take>
	notification_handler = handler;
   28e10:	6025      	str	r5, [r4, #0]
	z_impl_k_sem_give(sem);
   28e12:	4806      	ldr	r0, [pc, #24]	; (28e2c <at_cmd_set_notification_handler+0x50>)
}
   28e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   28e18:	f012 b83c 	b.w	3ae94 <z_impl_k_sem_give>
   28e1c:	200248bc 	.word	0x200248bc
   28e20:	00042fb4 	.word	0x00042fb4
   28e24:	00042fb4 	.word	0x00042fb4
   28e28:	00049413 	.word	0x00049413
   28e2c:	20031fd8 	.word	0x20031fd8

00028e30 <w_lte_lc_init>:
		k_sem_give(&link);
	}
}

static int w_lte_lc_init(void)
{
   28e30:	b508      	push	{r3, lr}
	if (at_cmd_write(nw_mode_preferred, NULL, 0, NULL) != 0) {
   28e32:	2300      	movs	r3, #0
   28e34:	4807      	ldr	r0, [pc, #28]	; (28e54 <w_lte_lc_init+0x24>)
   28e36:	461a      	mov	r2, r3
   28e38:	4619      	mov	r1, r3
   28e3a:	f7ff ffad 	bl	28d98 <at_cmd_write>
   28e3e:	4603      	mov	r3, r0
   28e40:	b928      	cbnz	r0, 28e4e <w_lte_lc_init+0x1e>
#if defined(CONFIG_BSD_LIBRARY_TRACE_ENABLED)
	if (at_cmd_write(mdm_trace, NULL, 0, NULL) != 0) {
		return -EIO;
	}
#endif
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   28e42:	4602      	mov	r2, r0
   28e44:	4601      	mov	r1, r0
   28e46:	4804      	ldr	r0, [pc, #16]	; (28e58 <w_lte_lc_init+0x28>)
   28e48:	f7ff ffa6 	bl	28d98 <at_cmd_write>
   28e4c:	b108      	cbz	r0, 28e52 <w_lte_lc_init+0x22>
		return -EIO;
   28e4e:	f06f 0004 	mvn.w	r0, #4
	}
	LOG_INF("PDN Auth: %s", log_strdup(cgauth));
#endif

	return 0;
}
   28e52:	bd08      	pop	{r3, pc}
   28e54:	00049623 	.word	0x00049623
   28e58:	000495f7 	.word	0x000495f7

00028e5c <parse_nw_reg_status>:
 */
static int parse_nw_reg_status(const char *at_response,
			       enum lte_lc_nw_reg_status *status)
{
	int err, reg_status;
	struct at_param_list resp_list = {0};
   28e5c:	2300      	movs	r3, #0
{
   28e5e:	b570      	push	{r4, r5, r6, lr}
   28e60:	b086      	sub	sp, #24
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   28e62:	9302      	str	r3, [sp, #8]
	struct at_param_list resp_list = {0};
   28e64:	e9cd 3304 	strd	r3, r3, [sp, #16]
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   28e68:	f8cd 300b 	str.w	r3, [sp, #11]
	size_t response_prefix_len = sizeof(response_prefix);
   28e6c:	2307      	movs	r3, #7
{
   28e6e:	460d      	mov	r5, r1
	size_t response_prefix_len = sizeof(response_prefix);
   28e70:	9301      	str	r3, [sp, #4]

	if ((at_response == NULL) || (status == NULL)) {
   28e72:	4606      	mov	r6, r0
   28e74:	2800      	cmp	r0, #0
   28e76:	f000 808c 	beq.w	28f92 <parse_nw_reg_status+0x136>
   28e7a:	2900      	cmp	r1, #0
   28e7c:	f000 8089 	beq.w	28f92 <parse_nw_reg_status+0x136>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT);
   28e80:	210a      	movs	r1, #10
   28e82:	a804      	add	r0, sp, #16
   28e84:	f018 f8e2 	bl	4104c <at_params_list_init>
	if (err) {
   28e88:	4604      	mov	r4, r0
   28e8a:	b188      	cbz	r0, 28eb0 <parse_nw_reg_status+0x54>
		LOG_ERR("Could not init AT params list, error: %d", err);
   28e8c:	2301      	movs	r3, #1
   28e8e:	f04f 0000 	mov.w	r0, #0
   28e92:	4a41      	ldr	r2, [pc, #260]	; (28f98 <parse_nw_reg_status+0x13c>)
   28e94:	f363 0007 	bfi	r0, r3, #0, #8
   28e98:	4b40      	ldr	r3, [pc, #256]	; (28f9c <parse_nw_reg_status+0x140>)
   28e9a:	4941      	ldr	r1, [pc, #260]	; (28fa0 <parse_nw_reg_status+0x144>)
   28e9c:	1a9b      	subs	r3, r3, r2
   28e9e:	08db      	lsrs	r3, r3, #3
   28ea0:	f363 108f 	bfi	r0, r3, #6, #10
   28ea4:	4622      	mov	r2, r4
   28ea6:	f016 faec 	bl	3f482 <log_string_sync>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   28eaa:	4620      	mov	r0, r4
   28eac:	b006      	add	sp, #24
   28eae:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_max_params_from_str(at_response,
   28eb0:	4601      	mov	r1, r0
   28eb2:	230a      	movs	r3, #10
   28eb4:	aa04      	add	r2, sp, #16
   28eb6:	4630      	mov	r0, r6
   28eb8:	f7fb fa3c 	bl	24334 <at_parser_max_params_from_str>
	if (err) {
   28ebc:	4604      	mov	r4, r0
   28ebe:	b190      	cbz	r0, 28ee6 <parse_nw_reg_status+0x8a>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   28ec0:	2301      	movs	r3, #1
   28ec2:	f04f 0000 	mov.w	r0, #0
   28ec6:	4a34      	ldr	r2, [pc, #208]	; (28f98 <parse_nw_reg_status+0x13c>)
   28ec8:	f363 0007 	bfi	r0, r3, #0, #8
   28ecc:	4b33      	ldr	r3, [pc, #204]	; (28f9c <parse_nw_reg_status+0x140>)
   28ece:	4935      	ldr	r1, [pc, #212]	; (28fa4 <parse_nw_reg_status+0x148>)
   28ed0:	1a9b      	subs	r3, r3, r2
   28ed2:	4622      	mov	r2, r4
   28ed4:	08db      	lsrs	r3, r3, #3
   28ed6:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Could not get response prefix, error: %d", err);
   28eda:	f016 fad2 	bl	3f482 <log_string_sync>
	at_params_list_free(&resp_list);
   28ede:	a804      	add	r0, sp, #16
   28ee0:	f018 f8c7 	bl	41072 <at_params_list_free>
	return err;
   28ee4:	e7e1      	b.n	28eaa <parse_nw_reg_status+0x4e>
	err = at_params_string_get(&resp_list,
   28ee6:	4601      	mov	r1, r0
   28ee8:	ab01      	add	r3, sp, #4
   28eea:	aa02      	add	r2, sp, #8
   28eec:	a804      	add	r0, sp, #16
   28eee:	f018 f985 	bl	411fc <at_params_string_get>
	if (err) {
   28ef2:	4604      	mov	r4, r0
   28ef4:	b168      	cbz	r0, 28f12 <parse_nw_reg_status+0xb6>
		LOG_ERR("Could not get response prefix, error: %d", err);
   28ef6:	2301      	movs	r3, #1
   28ef8:	f04f 0000 	mov.w	r0, #0
   28efc:	4a26      	ldr	r2, [pc, #152]	; (28f98 <parse_nw_reg_status+0x13c>)
   28efe:	f363 0007 	bfi	r0, r3, #0, #8
   28f02:	4b26      	ldr	r3, [pc, #152]	; (28f9c <parse_nw_reg_status+0x140>)
   28f04:	4928      	ldr	r1, [pc, #160]	; (28fa8 <parse_nw_reg_status+0x14c>)
   28f06:	1a9b      	subs	r3, r3, r2
   28f08:	08db      	lsrs	r3, r3, #3
   28f0a:	f363 108f 	bfi	r0, r3, #6, #10
   28f0e:	4622      	mov	r2, r4
   28f10:	e7e3      	b.n	28eda <parse_nw_reg_status+0x7e>
	if (!response_is_valid(response_prefix, response_prefix_len,
   28f12:	4a26      	ldr	r2, [pc, #152]	; (28fac <parse_nw_reg_status+0x150>)
   28f14:	9901      	ldr	r1, [sp, #4]
   28f16:	a802      	add	r0, sp, #8
   28f18:	f018 fb7b 	bl	41612 <response_is_valid>
   28f1c:	2800      	cmp	r0, #0
   28f1e:	d0de      	beq.n	28ede <parse_nw_reg_status+0x82>
	err = at_params_int_get(&resp_list, AT_CEREG_REG_STATUS_INDEX,
   28f20:	2101      	movs	r1, #1
   28f22:	466a      	mov	r2, sp
   28f24:	a804      	add	r0, sp, #16
   28f26:	f018 f952 	bl	411ce <at_params_int_get>
	if (err) {
   28f2a:	491c      	ldr	r1, [pc, #112]	; (28f9c <parse_nw_reg_status+0x140>)
   28f2c:	4b1a      	ldr	r3, [pc, #104]	; (28f98 <parse_nw_reg_status+0x13c>)
   28f2e:	4604      	mov	r4, r0
   28f30:	1ac9      	subs	r1, r1, r3
   28f32:	f3c1 01c9 	ubfx	r1, r1, #3, #10
   28f36:	b148      	cbz	r0, 28f4c <parse_nw_reg_status+0xf0>
		LOG_ERR("Could not get registration status, error: %d", err);
   28f38:	f04f 0000 	mov.w	r0, #0
   28f3c:	2301      	movs	r3, #1
   28f3e:	f363 0007 	bfi	r0, r3, #0, #8
   28f42:	f361 108f 	bfi	r0, r1, #6, #10
   28f46:	4622      	mov	r2, r4
   28f48:	4919      	ldr	r1, [pc, #100]	; (28fb0 <parse_nw_reg_status+0x154>)
   28f4a:	e7c6      	b.n	28eda <parse_nw_reg_status+0x7e>
	switch (reg_status) {
   28f4c:	9b00      	ldr	r3, [sp, #0]
   28f4e:	2b08      	cmp	r3, #8
   28f50:	d002      	beq.n	28f58 <parse_nw_reg_status+0xfc>
   28f52:	dc0e      	bgt.n	28f72 <parse_nw_reg_status+0x116>
   28f54:	2b05      	cmp	r3, #5
   28f56:	d80e      	bhi.n	28f76 <parse_nw_reg_status+0x11a>
		LOG_DBG("Network registration status: %d", reg_status);
   28f58:	2204      	movs	r2, #4
   28f5a:	f04f 0000 	mov.w	r0, #0
   28f5e:	f362 0007 	bfi	r0, r2, #0, #8
   28f62:	f361 108f 	bfi	r0, r1, #6, #10
		*status = reg_status;
   28f66:	702b      	strb	r3, [r5, #0]
		LOG_DBG("Network registration status: %d", reg_status);
   28f68:	4a12      	ldr	r2, [pc, #72]	; (28fb4 <parse_nw_reg_status+0x158>)
   28f6a:	4913      	ldr	r1, [pc, #76]	; (28fb8 <parse_nw_reg_status+0x15c>)
   28f6c:	f016 fa89 	bl	3f482 <log_string_sync>
   28f70:	e7b5      	b.n	28ede <parse_nw_reg_status+0x82>
	switch (reg_status) {
   28f72:	2b5a      	cmp	r3, #90	; 0x5a
   28f74:	d0f0      	beq.n	28f58 <parse_nw_reg_status+0xfc>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   28f76:	2201      	movs	r2, #1
   28f78:	f04f 0000 	mov.w	r0, #0
   28f7c:	f362 0007 	bfi	r0, r2, #0, #8
   28f80:	f361 108f 	bfi	r0, r1, #6, #10
   28f84:	461a      	mov	r2, r3
   28f86:	490d      	ldr	r1, [pc, #52]	; (28fbc <parse_nw_reg_status+0x160>)
   28f88:	f016 fa7b 	bl	3f482 <log_string_sync>
		err = -EIO;
   28f8c:	f06f 0404 	mvn.w	r4, #4
   28f90:	e7a5      	b.n	28ede <parse_nw_reg_status+0x82>
		return -EINVAL;
   28f92:	f06f 0415 	mvn.w	r4, #21
   28f96:	e788      	b.n	28eaa <parse_nw_reg_status+0x4e>
   28f98:	00042fb4 	.word	0x00042fb4
   28f9c:	0004303c 	.word	0x0004303c
   28fa0:	00049644 	.word	0x00049644
   28fa4:	0004966d 	.word	0x0004966d
   28fa8:	0004969a 	.word	0x0004969a
   28fac:	000496c3 	.word	0x000496c3
   28fb0:	000496ca 	.word	0x000496ca
   28fb4:	00049599 	.word	0x00049599
   28fb8:	000496f7 	.word	0x000496f7
   28fbc:	0004971b 	.word	0x0004971b

00028fc0 <at_handler>:
{
   28fc0:	b507      	push	{r0, r1, r2, lr}
	if (response == NULL) {
   28fc2:	4608      	mov	r0, r1
   28fc4:	b971      	cbnz	r1, 28fe4 <at_handler+0x24>
		LOG_ERR("Response buffer is NULL-pointer");
   28fc6:	2301      	movs	r3, #1
   28fc8:	4a14      	ldr	r2, [pc, #80]	; (2901c <at_handler+0x5c>)
   28fca:	f363 0007 	bfi	r0, r3, #0, #8
   28fce:	4b14      	ldr	r3, [pc, #80]	; (29020 <at_handler+0x60>)
   28fd0:	4914      	ldr	r1, [pc, #80]	; (29024 <at_handler+0x64>)
   28fd2:	1a9b      	subs	r3, r3, r2
   28fd4:	08db      	lsrs	r3, r3, #3
   28fd6:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Could not get network registration status");
   28fda:	f016 fa52 	bl	3f482 <log_string_sync>
}
   28fde:	b003      	add	sp, #12
   28fe0:	f85d fb04 	ldr.w	pc, [sp], #4
	err = parse_nw_reg_status(response, &status);
   28fe4:	f10d 0107 	add.w	r1, sp, #7
   28fe8:	f7ff ff38 	bl	28e5c <parse_nw_reg_status>
	if (err) {
   28fec:	b160      	cbz	r0, 29008 <at_handler+0x48>
		LOG_ERR("Could not get network registration status");
   28fee:	2301      	movs	r3, #1
   28ff0:	f04f 0000 	mov.w	r0, #0
   28ff4:	4a09      	ldr	r2, [pc, #36]	; (2901c <at_handler+0x5c>)
   28ff6:	f363 0007 	bfi	r0, r3, #0, #8
   28ffa:	4b09      	ldr	r3, [pc, #36]	; (29020 <at_handler+0x60>)
   28ffc:	490a      	ldr	r1, [pc, #40]	; (29028 <at_handler+0x68>)
   28ffe:	1a9b      	subs	r3, r3, r2
   29000:	08db      	lsrs	r3, r3, #3
   29002:	f363 108f 	bfi	r0, r3, #6, #10
   29006:	e7e8      	b.n	28fda <at_handler+0x1a>
	if ((status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   29008:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2900c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29010:	2b01      	cmp	r3, #1
   29012:	d1e4      	bne.n	28fde <at_handler+0x1e>
   29014:	4805      	ldr	r0, [pc, #20]	; (2902c <at_handler+0x6c>)
   29016:	f011 ff3d 	bl	3ae94 <z_impl_k_sem_give>
   2901a:	e7e0      	b.n	28fde <at_handler+0x1e>
   2901c:	00042fb4 	.word	0x00042fb4
   29020:	0004303c 	.word	0x0004303c
   29024:	000495ad 	.word	0x000495ad
   29028:	000495cd 	.word	0x000495cd
   2902c:	20024978 	.word	0x20024978

00029030 <w_lte_lc_connect>:
{
   29030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_impl_k_sem_init(sem, initial_count, limit);
   29034:	2201      	movs	r2, #1
   29036:	2100      	movs	r1, #0
   29038:	4841      	ldr	r0, [pc, #260]	; (29140 <w_lte_lc_connect+0x110>)
   2903a:	f011 fef5 	bl	3ae28 <z_impl_k_sem_init>
	rc = at_notif_register_handler(NULL, at_handler);
   2903e:	4941      	ldr	r1, [pc, #260]	; (29144 <w_lte_lc_connect+0x114>)
   29040:	2000      	movs	r0, #0
   29042:	f7fa fe07 	bl	23c54 <at_notif_register_handler>
	if (rc != 0) {
   29046:	4c40      	ldr	r4, [pc, #256]	; (29148 <w_lte_lc_connect+0x118>)
   29048:	4b40      	ldr	r3, [pc, #256]	; (2914c <w_lte_lc_connect+0x11c>)
   2904a:	4682      	mov	sl, r0
   2904c:	1ae4      	subs	r4, r4, r3
   2904e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   29052:	b168      	cbz	r0, 29070 <w_lte_lc_connect+0x40>
		LOG_ERR("Can't register handler rc=%d", rc);
   29054:	2201      	movs	r2, #1
   29056:	f04f 0000 	mov.w	r0, #0
   2905a:	f362 0007 	bfi	r0, r2, #0, #8
   2905e:	4652      	mov	r2, sl
   29060:	493b      	ldr	r1, [pc, #236]	; (29150 <w_lte_lc_connect+0x120>)
   29062:	f364 108f 	bfi	r0, r4, #6, #10
		LOG_ERR("Can't de-register handler rc=%d", rc);
   29066:	f016 fa0c 	bl	3f482 <log_string_sync>
}
   2906a:	4650      	mov	r0, sl
   2906c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29070:	f04f 0902 	mov.w	r9, #2
	const char *current_network_mode = nw_mode_preferred;
   29074:	4d37      	ldr	r5, [pc, #220]	; (29154 <w_lte_lc_connect+0x124>)
		if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   29076:	f8df b100 	ldr.w	fp, [pc, #256]	; 29178 <w_lte_lc_connect+0x148>
		LOG_DBG("Network mode: %s", log_strdup(current_network_mode));
   2907a:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   2907e:	f043 0304 	orr.w	r3, r3, #4
   29082:	4628      	mov	r0, r5
   29084:	f363 0707 	bfi	r7, r3, #0, #8
   29088:	f016 fa0d 	bl	3f4a6 <log_strdup>
   2908c:	f364 178f 	bfi	r7, r4, #6, #10
   29090:	4603      	mov	r3, r0
   29092:	4a31      	ldr	r2, [pc, #196]	; (29158 <w_lte_lc_connect+0x128>)
   29094:	4931      	ldr	r1, [pc, #196]	; (2915c <w_lte_lc_connect+0x12c>)
   29096:	4638      	mov	r0, r7
   29098:	f016 f9f3 	bl	3f482 <log_string_sync>
		if (at_cmd_write(current_network_mode, NULL, 0, NULL) != 0) {
   2909c:	2300      	movs	r3, #0
   2909e:	4628      	mov	r0, r5
   290a0:	461a      	mov	r2, r3
   290a2:	4619      	mov	r1, r3
   290a4:	f7ff fe78 	bl	28d98 <at_cmd_write>
   290a8:	4603      	mov	r3, r0
   290aa:	bba0      	cbnz	r0, 29116 <w_lte_lc_connect+0xe6>
		if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   290ac:	4602      	mov	r2, r0
   290ae:	4601      	mov	r1, r0
   290b0:	4658      	mov	r0, fp
   290b2:	f7ff fe71 	bl	28d98 <at_cmd_write>
   290b6:	4605      	mov	r5, r0
   290b8:	bb68      	cbnz	r0, 29116 <w_lte_lc_connect+0xe6>
	return z_impl_k_sem_take(sem, timeout);
   290ba:	4929      	ldr	r1, [pc, #164]	; (29160 <w_lte_lc_connect+0x130>)
   290bc:	4820      	ldr	r0, [pc, #128]	; (29140 <w_lte_lc_connect+0x110>)
   290be:	f011 ff31 	bl	3af24 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   290c2:	f110 0f0b 	cmn.w	r0, #11
   290c6:	4682      	mov	sl, r0
   290c8:	d127      	bne.n	2911a <w_lte_lc_connect+0xea>
			LOG_INF("Network connection attempt timed out");
   290ca:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   290ce:	f043 0303 	orr.w	r3, r3, #3
   290d2:	f363 0807 	bfi	r8, r3, #0, #8
   290d6:	f364 188f 	bfi	r8, r4, #6, #10
   290da:	4922      	ldr	r1, [pc, #136]	; (29164 <w_lte_lc_connect+0x134>)
   290dc:	4640      	mov	r0, r8
   290de:	f016 f9d0 	bl	3f482 <log_string_sync>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   290e2:	f1b9 0f01 	cmp.w	r9, #1
   290e6:	d028      	beq.n	2913a <w_lte_lc_connect+0x10a>
				if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   290e8:	462b      	mov	r3, r5
   290ea:	462a      	mov	r2, r5
   290ec:	4629      	mov	r1, r5
   290ee:	481e      	ldr	r0, [pc, #120]	; (29168 <w_lte_lc_connect+0x138>)
   290f0:	f7ff fe52 	bl	28d98 <at_cmd_write>
   290f4:	b978      	cbnz	r0, 29116 <w_lte_lc_connect+0xe6>
				LOG_INF("Using fallback network mode");
   290f6:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   290fa:	f043 0303 	orr.w	r3, r3, #3
   290fe:	f363 0607 	bfi	r6, r3, #0, #8
   29102:	f364 168f 	bfi	r6, r4, #6, #10
   29106:	4919      	ldr	r1, [pc, #100]	; (2916c <w_lte_lc_connect+0x13c>)
   29108:	4630      	mov	r0, r6
   2910a:	f016 f9ba 	bl	3f482 <log_string_sync>
				current_network_mode = nw_mode_fallback;
   2910e:	4d18      	ldr	r5, [pc, #96]	; (29170 <w_lte_lc_connect+0x140>)
   29110:	f04f 0901 	mov.w	r9, #1
   29114:	e7b1      	b.n	2907a <w_lte_lc_connect+0x4a>
			err = -EIO;
   29116:	f06f 0a04 	mvn.w	sl, #4
	rc = at_notif_deregister_handler(NULL, at_handler);
   2911a:	490a      	ldr	r1, [pc, #40]	; (29144 <w_lte_lc_connect+0x114>)
   2911c:	2000      	movs	r0, #0
   2911e:	f7fa fdd1 	bl	23cc4 <at_notif_deregister_handler>
	if (rc != 0) {
   29122:	4602      	mov	r2, r0
   29124:	2800      	cmp	r0, #0
   29126:	d0a0      	beq.n	2906a <w_lte_lc_connect+0x3a>
		LOG_ERR("Can't de-register handler rc=%d", rc);
   29128:	2101      	movs	r1, #1
   2912a:	f04f 0000 	mov.w	r0, #0
   2912e:	f361 0007 	bfi	r0, r1, #0, #8
   29132:	f364 108f 	bfi	r0, r4, #6, #10
   29136:	490f      	ldr	r1, [pc, #60]	; (29174 <w_lte_lc_connect+0x144>)
   29138:	e795      	b.n	29066 <w_lte_lc_connect+0x36>
				err = -ETIMEDOUT;
   2913a:	f06f 0a73 	mvn.w	sl, #115	; 0x73
   2913e:	e7ec      	b.n	2911a <w_lte_lc_connect+0xea>
   29140:	20024978 	.word	0x20024978
   29144:	00028fc1 	.word	0x00028fc1
   29148:	0004303c 	.word	0x0004303c
   2914c:	00042fb4 	.word	0x00042fb4
   29150:	00047400 	.word	0x00047400
   29154:	00049623 	.word	0x00049623
   29158:	00049588 	.word	0x00049588
   2915c:	00049781 	.word	0x00049781
   29160:	000927c0 	.word	0x000927c0
   29164:	00049796 	.word	0x00049796
   29168:	0004963a 	.word	0x0004963a
   2916c:	000497bb 	.word	0x000497bb
   29170:	0004960c 	.word	0x0004960c
   29174:	000497d7 	.word	0x000497d7
   29178:	00049602 	.word	0x00049602

0002917c <lte_lc_power_off>:
{
   2917c:	b508      	push	{r3, lr}
	if (at_cmd_write(power_off, NULL, 0, NULL) != 0) {
   2917e:	2300      	movs	r3, #0
   29180:	4804      	ldr	r0, [pc, #16]	; (29194 <lte_lc_power_off+0x18>)
   29182:	461a      	mov	r2, r3
   29184:	4619      	mov	r1, r3
   29186:	f7ff fe07 	bl	28d98 <at_cmd_write>
   2918a:	2800      	cmp	r0, #0
}
   2918c:	bf18      	it	ne
   2918e:	f06f 0004 	mvnne.w	r0, #4
   29192:	bd08      	pop	{r3, pc}
   29194:	00049743 	.word	0x00049743

00029198 <lte_lc_psm_req>:
{
   29198:	b538      	push	{r3, r4, r5, lr}
	if (at_cmd_write(enable ? psm_req : psm_disable,
   2919a:	2300      	movs	r3, #0
   2919c:	4d07      	ldr	r5, [pc, #28]	; (291bc <lte_lc_psm_req+0x24>)
   2919e:	4c08      	ldr	r4, [pc, #32]	; (291c0 <lte_lc_psm_req+0x28>)
   291a0:	461a      	mov	r2, r3
   291a2:	4298      	cmp	r0, r3
   291a4:	bf14      	ite	ne
   291a6:	4628      	movne	r0, r5
   291a8:	4620      	moveq	r0, r4
   291aa:	4619      	mov	r1, r3
   291ac:	f7ff fdf4 	bl	28d98 <at_cmd_write>
   291b0:	2800      	cmp	r0, #0
}
   291b2:	bf18      	it	ne
   291b4:	f06f 0004 	mvnne.w	r0, #4
   291b8:	bd38      	pop	{r3, r4, r5, pc}
   291ba:	bf00      	nop
   291bc:	00049757 	.word	0x00049757
   291c0:	0004974d 	.word	0x0004974d

000291c4 <sensor_sim_channel_get>:

static int sensor_sim_channel_get(struct device *dev,
				  enum sensor_channel chan,
				  struct sensor_value *sample)
{
   291c4:	b538      	push	{r3, r4, r5, lr}
   291c6:	4614      	mov	r4, r2
	switch (chan) {
   291c8:	2910      	cmp	r1, #16
   291ca:	d82f      	bhi.n	2922c <sensor_sim_channel_get+0x68>
   291cc:	e8df f001 	tbb	[pc, r1]
   291d0:	18140d09 	.word	0x18140d09
   291d4:	2e2e2e2e 	.word	0x2e2e2e2e
   291d8:	2e2e2e2e 	.word	0x2e2e2e2e
   291dc:	2e2c282e 	.word	0x2e2c282e
   291e0:	2a          	.byte	0x2a
   291e1:	00          	.byte	0x00
	case SENSOR_CHAN_ACCEL_X:
		double_to_sensor_value(accel_samples[0], sample);
   291e2:	4b14      	ldr	r3, [pc, #80]	; (29234 <sensor_sim_channel_get+0x70>)
		break;
	case SENSOR_CHAN_HUMIDITY:
		double_to_sensor_value(humidity_sample, sample);
		break;
	case SENSOR_CHAN_PRESS:
		double_to_sensor_value(pressure_sample, sample);
   291e4:	e9d3 0100 	ldrd	r0, r1, [r3]
   291e8:	e002      	b.n	291f0 <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(accel_samples[1], sample);
   291ea:	4b12      	ldr	r3, [pc, #72]	; (29234 <sensor_sim_channel_get+0x70>)
   291ec:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
		double_to_sensor_value(pressure_sample, sample);
   291f0:	f7f1 fb52 	bl	1a898 <double_to_sensor_value>
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
   291f4:	2000      	movs	r0, #0
}
   291f6:	bd38      	pop	{r3, r4, r5, pc}
		double_to_sensor_value(accel_samples[2], sample);
   291f8:	4b0e      	ldr	r3, [pc, #56]	; (29234 <sensor_sim_channel_get+0x70>)
   291fa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   291fe:	e7f7      	b.n	291f0 <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(accel_samples[0], sample);
   29200:	4d0c      	ldr	r5, [pc, #48]	; (29234 <sensor_sim_channel_get+0x70>)
   29202:	e9d5 0100 	ldrd	r0, r1, [r5]
   29206:	f7f1 fb47 	bl	1a898 <double_to_sensor_value>
		double_to_sensor_value(accel_samples[1], ++sample);
   2920a:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
   2920e:	f104 0208 	add.w	r2, r4, #8
   29212:	f7f1 fb41 	bl	1a898 <double_to_sensor_value>
		double_to_sensor_value(accel_samples[2], ++sample);
   29216:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
   2921a:	f104 0210 	add.w	r2, r4, #16
   2921e:	e7e7      	b.n	291f0 <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(temp_sample, sample);
   29220:	4b05      	ldr	r3, [pc, #20]	; (29238 <sensor_sim_channel_get+0x74>)
   29222:	e7df      	b.n	291e4 <sensor_sim_channel_get+0x20>
		double_to_sensor_value(humidity_sample, sample);
   29224:	4b05      	ldr	r3, [pc, #20]	; (2923c <sensor_sim_channel_get+0x78>)
   29226:	e7dd      	b.n	291e4 <sensor_sim_channel_get+0x20>
		double_to_sensor_value(pressure_sample, sample);
   29228:	4b05      	ldr	r3, [pc, #20]	; (29240 <sensor_sim_channel_get+0x7c>)
   2922a:	e7db      	b.n	291e4 <sensor_sim_channel_get+0x20>
		return -ENOTSUP;
   2922c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29230:	e7e1      	b.n	291f6 <sensor_sim_channel_get+0x32>
   29232:	bf00      	nop
   29234:	20022a30 	.word	0x20022a30
   29238:	20022d40 	.word	0x20022d40
   2923c:	20022a48 	.word	0x20022a48
   29240:	20022a50 	.word	0x20022a50

00029244 <sensor_sim_trigger_set>:
{
   29244:	b508      	push	{r3, lr}
	struct sensor_sim_data *drv_data = dev->driver_data;
   29246:	6883      	ldr	r3, [r0, #8]
	switch (trig->type) {
   29248:	8808      	ldrh	r0, [r1, #0]
   2924a:	2801      	cmp	r0, #1
   2924c:	d104      	bne.n	29258 <sensor_sim_trigger_set+0x14>
		drv_data->drdy_trigger = *trig;
   2924e:	6808      	ldr	r0, [r1, #0]
		drv_data->drdy_handler = handler;
   29250:	631a      	str	r2, [r3, #48]	; 0x30
		drv_data->drdy_trigger = *trig;
   29252:	6358      	str	r0, [r3, #52]	; 0x34
	int ret = 0;
   29254:	2000      	movs	r0, #0
}
   29256:	bd08      	pop	{r3, pc}
		LOG_ERR("Unsupported sensor trigger");
   29258:	2301      	movs	r3, #1
   2925a:	f04f 0000 	mov.w	r0, #0
   2925e:	4a07      	ldr	r2, [pc, #28]	; (2927c <sensor_sim_trigger_set+0x38>)
   29260:	f363 0007 	bfi	r0, r3, #0, #8
   29264:	4b06      	ldr	r3, [pc, #24]	; (29280 <sensor_sim_trigger_set+0x3c>)
   29266:	4907      	ldr	r1, [pc, #28]	; (29284 <sensor_sim_trigger_set+0x40>)
   29268:	1a9b      	subs	r3, r3, r2
   2926a:	08db      	lsrs	r3, r3, #3
   2926c:	f363 108f 	bfi	r0, r3, #6, #10
   29270:	f016 f907 	bl	3f482 <log_string_sync>
	return ret;
   29274:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29278:	e7ed      	b.n	29256 <sensor_sim_trigger_set+0x12>
   2927a:	bf00      	nop
   2927c:	00042fb4 	.word	0x00042fb4
   29280:	000430a4 	.word	0x000430a4
   29284:	000497f7 	.word	0x000497f7

00029288 <generate_sine.constprop.2>:
static double generate_sine(double offset, double amplitude)
   29288:	b508      	push	{r3, lr}
	return z_impl_k_uptime_get();
   2928a:	f018 fb0c 	bl	418a6 <z_impl_k_uptime_get>
	return offset + amplitude * sin(time % 65535);
   2928e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   29292:	fbb0 f3f3 	udiv	r3, r0, r3
   29296:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
   2929a:	1ac0      	subs	r0, r0, r3
   2929c:	f7ef fa02 	bl	186a4 <__aeabi_ui2d>
   292a0:	ec41 0b10 	vmov	d0, r0, r1
   292a4:	f7f2 ff60 	bl	1c168 <sin>
   292a8:	2200      	movs	r2, #0
   292aa:	4b05      	ldr	r3, [pc, #20]	; (292c0 <generate_sine.constprop.2+0x38>)
   292ac:	ec51 0b10 	vmov	r0, r1, d0
   292b0:	f7ef fa72 	bl	18798 <__aeabi_dmul>
   292b4:	2200      	movs	r2, #0
   292b6:	2300      	movs	r3, #0
   292b8:	f7ef f8b8 	bl	1842c <__adddf3>
}
   292bc:	bd08      	pop	{r3, pc}
   292be:	bf00      	nop
   292c0:	40340000 	.word	0x40340000

000292c4 <sensor_sim_init>:
{
   292c4:	b530      	push	{r4, r5, lr}
	struct sensor_sim_data *drv_data = dev->driver_data;
   292c6:	6885      	ldr	r5, [r0, #8]
{
   292c8:	b087      	sub	sp, #28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   292ca:	2400      	movs	r4, #0
   292cc:	f06f 0305 	mvn.w	r3, #5
   292d0:	f44f 7200 	mov.w	r2, #512	; 0x200
   292d4:	f105 0138 	add.w	r1, r5, #56	; 0x38
   292d8:	e9cd 4302 	strd	r4, r3, [sp, #8]
   292dc:	e9cd 0400 	strd	r0, r4, [sp]
   292e0:	4b06      	ldr	r3, [pc, #24]	; (292fc <sensor_sim_init+0x38>)
   292e2:	e9cd 4404 	strd	r4, r4, [sp, #16]
   292e6:	f505 700e 	add.w	r0, r5, #568	; 0x238
   292ea:	f011 ff47 	bl	3b17c <z_impl_k_thread_create>
   292ee:	f7f6 ffcd 	bl	2028c <z_timer_cycle_get_32>
	srand(k_cycle_get_32());
   292f2:	f014 f88d 	bl	3d410 <srand>
}
   292f6:	4620      	mov	r0, r4
   292f8:	b007      	add	sp, #28
   292fa:	bd30      	pop	{r4, r5, pc}
   292fc:	00041651 	.word	0x00041651

00029300 <start>:
	return err;
}
#endif

static int start(struct device *dev)
{
   29300:	b5f0      	push	{r4, r5, r6, r7, lr}
	int retval;
	struct gps_drv_data *drv_data = dev->driver_data;
	nrf_gnss_fix_retry_t    fix_retry    = 0;
   29302:	2400      	movs	r4, #0
	nrf_gnss_fix_interval_t fix_interval = 1;
   29304:	2301      	movs	r3, #1
{
   29306:	b0a1      	sub	sp, #132	; 0x84
	struct gps_drv_data *drv_data = dev->driver_data;
   29308:	6887      	ldr	r7, [r0, #8]
	char buf[50] = {0};
   2930a:	2232      	movs	r2, #50	; 0x32
   2930c:	4621      	mov	r1, r4
   2930e:	a813      	add	r0, sp, #76	; 0x4c
	nrf_gnss_fix_interval_t fix_interval = 1;
   29310:	f8ad 3012 	strh.w	r3, [sp, #18]
#endif
#ifdef CONFIG_NRF9160_GPS_NMEA_GLL
	nmea_mask |= NRF_GNSS_NMEA_GLL_MASK;
#endif
#ifdef CONFIG_NRF9160_GPS_NMEA_GGA
	nmea_mask |= NRF_GNSS_NMEA_GGA_MASK;
   29314:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_gnss_fix_retry_t    fix_retry    = 0;
   29318:	f8ad 4010 	strh.w	r4, [sp, #16]
	nrf_gnss_delete_mask_t  delete_mask  = 0;
   2931c:	9406      	str	r4, [sp, #24]
	char buf[50] = {0};
   2931e:	f018 fb68 	bl	419f2 <memset>
	err = at_params_list_init(&at_resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   29322:	2105      	movs	r1, #5
   29324:	a807      	add	r0, sp, #28
	struct at_param_list at_resp_list = {0};
   29326:	e9cd 4407 	strd	r4, r4, [sp, #28]
	err = at_params_list_init(&at_resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   2932a:	f017 fe8f 	bl	4104c <at_params_list_init>
	if (err) {
   2932e:	4ec3      	ldr	r6, [pc, #780]	; (2963c <start+0x33c>)
   29330:	4bc3      	ldr	r3, [pc, #780]	; (29640 <start+0x340>)
   29332:	1af6      	subs	r6, r6, r3
   29334:	f3c6 06c9 	ubfx	r6, r6, #3, #10
   29338:	4603      	mov	r3, r0
   2933a:	b1a8      	cbz	r0, 29368 <start+0x68>
		LOG_ERR("Could init AT params list, error: %d", err);
   2933c:	2201      	movs	r2, #1
   2933e:	f04f 0000 	mov.w	r0, #0
   29342:	f362 0007 	bfi	r0, r2, #0, #8
   29346:	f366 108f 	bfi	r0, r6, #6, #10
   2934a:	461a      	mov	r2, r3
   2934c:	49bd      	ldr	r1, [pc, #756]	; (29644 <start+0x344>)
   2934e:	f016 f898 	bl	3f482 <log_string_sync>
	nmea_mask |= NRF_GNSS_NMEA_RMC_MASK;
#endif

#ifdef CONFIG_NRF9160_GPS_HANDLE_MODEM_CONFIGURATION
	if (enable_gps(dev) != 0) {
		LOG_ERR("Failed to enable GPS");
   29352:	f04f 0000 	mov.w	r0, #0
   29356:	2301      	movs	r3, #1
   29358:	49bb      	ldr	r1, [pc, #748]	; (29648 <start+0x348>)
   2935a:	f363 0007 	bfi	r0, r3, #0, #8
   2935e:	f366 108f 	bfi	r0, r6, #6, #10
				NRF_SO_GNSS_START,
				&delete_mask,
				sizeof(delete_mask));

	if (retval != 0) {
		LOG_ERR("Failed to start GPS");
   29362:	f016 f88e 	bl	3f482 <log_string_sync>
   29366:	e13d      	b.n	295e4 <start+0x2e4>
	err = at_cmd_write(AT_XSYSTEMMODE_REQUEST, buf, sizeof(buf), NULL);
   29368:	a913      	add	r1, sp, #76	; 0x4c
   2936a:	2232      	movs	r2, #50	; 0x32
   2936c:	48b7      	ldr	r0, [pc, #732]	; (2964c <start+0x34c>)
   2936e:	f7ff fd13 	bl	28d98 <at_cmd_write>
	if (err) {
   29372:	4601      	mov	r1, r0
   29374:	2800      	cmp	r0, #0
   29376:	d03e      	beq.n	293f6 <start+0xf6>
		LOG_ERR("Could not get modem's system mode");
   29378:	2301      	movs	r3, #1
   2937a:	f04f 0000 	mov.w	r0, #0
   2937e:	f363 0007 	bfi	r0, r3, #0, #8
   29382:	f366 108f 	bfi	r0, r6, #6, #10
   29386:	49b2      	ldr	r1, [pc, #712]	; (29650 <start+0x350>)
   29388:	f016 f87b 	bl	3f482 <log_string_sync>
		err = -EIO;
   2938c:	f06f 0404 	mvn.w	r4, #4
	at_params_list_free(&at_resp_list);
   29390:	a807      	add	r0, sp, #28
   29392:	f017 fe6e 	bl	41072 <at_params_list_free>
	if (enable_gps(dev) != 0) {
   29396:	2c00      	cmp	r4, #0
   29398:	d1db      	bne.n	29352 <start+0x52>
	if (drv_data->socket < 0) {
   2939a:	6a3b      	ldr	r3, [r7, #32]
   2939c:	2b00      	cmp	r3, #0
   2939e:	da15      	bge.n	293cc <start+0xcc>
		drv_data->socket = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM,
   293a0:	f44f 7201 	mov.w	r2, #516	; 0x204
   293a4:	2102      	movs	r1, #2
   293a6:	2001      	movs	r0, #1
   293a8:	f001 ff2e 	bl	2b208 <nrf_socket>
   293ac:	4602      	mov	r2, r0
		if (drv_data->socket >= 0) {
   293ae:	2a00      	cmp	r2, #0
		drv_data->socket = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM,
   293b0:	6238      	str	r0, [r7, #32]
			LOG_DBG("GPS socket created");
   293b2:	f04f 0000 	mov.w	r0, #0
		if (drv_data->socket >= 0) {
   293b6:	f2c0 810d 	blt.w	295d4 <start+0x2d4>
			LOG_DBG("GPS socket created");
   293ba:	2304      	movs	r3, #4
   293bc:	f363 0007 	bfi	r0, r3, #0, #8
   293c0:	f366 108f 	bfi	r0, r6, #6, #10
   293c4:	4aa3      	ldr	r2, [pc, #652]	; (29654 <start+0x354>)
   293c6:	49a4      	ldr	r1, [pc, #656]	; (29658 <start+0x358>)
   293c8:	f016 f85b 	bl	3f482 <log_string_sync>
	retval = nrf_setsockopt(drv_data->socket,
   293cc:	2402      	movs	r4, #2
   293ce:	9400      	str	r4, [sp, #0]
   293d0:	ab04      	add	r3, sp, #16
   293d2:	4622      	mov	r2, r4
   293d4:	f44f 7101 	mov.w	r1, #516	; 0x204
   293d8:	6a38      	ldr	r0, [r7, #32]
   293da:	f002 f817 	bl	2b40c <nrf_setsockopt>
	if (retval != 0) {
   293de:	2800      	cmp	r0, #0
   293e0:	f000 8105 	beq.w	295ee <start+0x2ee>
		LOG_ERR("Failed to set fix retry value");
   293e4:	f04f 0000 	mov.w	r0, #0
   293e8:	2301      	movs	r3, #1
   293ea:	f363 0007 	bfi	r0, r3, #0, #8
   293ee:	f366 108f 	bfi	r0, r6, #6, #10
   293f2:	499a      	ldr	r1, [pc, #616]	; (2965c <start+0x35c>)
   293f4:	e7b5      	b.n	29362 <start+0x62>
	err = at_parser_max_params_from_str(buf,
   293f6:	2305      	movs	r3, #5
   293f8:	aa07      	add	r2, sp, #28
   293fa:	a813      	add	r0, sp, #76	; 0x4c
   293fc:	f7fa ff9a 	bl	24334 <at_parser_max_params_from_str>
	if (err) {
   29400:	4604      	mov	r4, r0
   29402:	b158      	cbz	r0, 2941c <start+0x11c>
		LOG_ERR("Could not parse AT response, error: %d", err);
   29404:	f04f 0000 	mov.w	r0, #0
   29408:	2301      	movs	r3, #1
   2940a:	4622      	mov	r2, r4
   2940c:	f363 0007 	bfi	r0, r3, #0, #8
   29410:	4993      	ldr	r1, [pc, #588]	; (29660 <start+0x360>)
   29412:	f366 108f 	bfi	r0, r6, #6, #10
		LOG_ERR("Could not get GPS mode state, error: %d", err);
   29416:	f016 f834 	bl	3f482 <log_string_sync>
		goto enable_gps_clean_exit;
   2941a:	e7b9      	b.n	29390 <start+0x90>
	err = at_params_short_get(&at_resp_list,
   2941c:	f10d 0216 	add.w	r2, sp, #22
   29420:	2103      	movs	r1, #3
   29422:	a807      	add	r0, sp, #28
   29424:	f017 febd 	bl	411a2 <at_params_short_get>
	if (err) {
   29428:	4604      	mov	r4, r0
   2942a:	b148      	cbz	r0, 29440 <start+0x140>
		LOG_ERR("Could not get GPS mode state, error: %d", err);
   2942c:	f04f 0000 	mov.w	r0, #0
   29430:	2301      	movs	r3, #1
   29432:	f363 0007 	bfi	r0, r3, #0, #8
   29436:	f366 108f 	bfi	r0, r6, #6, #10
   2943a:	4622      	mov	r2, r4
   2943c:	4989      	ldr	r1, [pc, #548]	; (29664 <start+0x364>)
   2943e:	e7ea      	b.n	29416 <start+0x116>
	if (gps_param_value != 1) {
   29440:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   29444:	2b01      	cmp	r3, #1
   29446:	d04c      	beq.n	294e2 <start+0x1e2>
		u16_t values[AT_XSYSTEMMODE_PARAMS_COUNT] = {0};
   29448:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
   2944c:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
		LOG_DBG("GPS mode is not enabled, attempting to enable it");
   29450:	2304      	movs	r3, #4
   29452:	f04f 0000 	mov.w	r0, #0
   29456:	f363 0007 	bfi	r0, r3, #0, #8
   2945a:	f366 108f 	bfi	r0, r6, #6, #10
   2945e:	4a82      	ldr	r2, [pc, #520]	; (29668 <start+0x368>)
   29460:	4982      	ldr	r1, [pc, #520]	; (2966c <start+0x36c>)
   29462:	f016 f80e 	bl	3f482 <log_string_sync>
		for (size_t i = 0; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   29466:	ad09      	add	r5, sp, #36	; 0x24
			at_params_short_get(&at_resp_list, i, &values[i]);
   29468:	462a      	mov	r2, r5
   2946a:	4621      	mov	r1, r4
   2946c:	a807      	add	r0, sp, #28
		for (size_t i = 0; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   2946e:	3401      	adds	r4, #1
			at_params_short_get(&at_resp_list, i, &values[i]);
   29470:	f017 fe97 	bl	411a2 <at_params_short_get>
		for (size_t i = 0; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   29474:	2c05      	cmp	r4, #5
   29476:	f105 0502 	add.w	r5, r5, #2
   2947a:	d1f5      	bne.n	29468 <start+0x168>
		values[AT_XSYSTEMMODE_GPS_PARAM_INDEX] = 1;
   2947c:	2301      	movs	r3, #1
   2947e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		len = snprintf(cmd, sizeof(cmd), AT_XSYSTEMMODE_PROTO,
   29482:	9302      	str	r3, [sp, #8]
   29484:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   29488:	4a79      	ldr	r2, [pc, #484]	; (29670 <start+0x370>)
   2948a:	9301      	str	r3, [sp, #4]
   2948c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   29490:	211c      	movs	r1, #28
   29492:	9300      	str	r3, [sp, #0]
   29494:	a80c      	add	r0, sp, #48	; 0x30
   29496:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   2949a:	f014 f829 	bl	3d4f0 <sniprintf>
		LOG_DBG("Sending AT command: %s", log_strdup(cmd));
   2949e:	f04f 0400 	mov.w	r4, #0
   294a2:	2304      	movs	r3, #4
   294a4:	a80c      	add	r0, sp, #48	; 0x30
   294a6:	f363 0407 	bfi	r4, r3, #0, #8
   294aa:	f015 fffc 	bl	3f4a6 <log_strdup>
   294ae:	f366 148f 	bfi	r4, r6, #6, #10
   294b2:	4603      	mov	r3, r0
   294b4:	4a6c      	ldr	r2, [pc, #432]	; (29668 <start+0x368>)
   294b6:	4620      	mov	r0, r4
   294b8:	496e      	ldr	r1, [pc, #440]	; (29674 <start+0x374>)
   294ba:	f015 ffe2 	bl	3f482 <log_string_sync>
		err = at_cmd_write(cmd, NULL, 0, NULL);
   294be:	2300      	movs	r3, #0
   294c0:	a80c      	add	r0, sp, #48	; 0x30
   294c2:	461a      	mov	r2, r3
   294c4:	4619      	mov	r1, r3
   294c6:	f7ff fc67 	bl	28d98 <at_cmd_write>
		if (err) {
   294ca:	4604      	mov	r4, r0
   294cc:	b148      	cbz	r0, 294e2 <start+0x1e2>
			LOG_ERR("Could not enable GPS mode, error: %d", err);
   294ce:	f04f 0000 	mov.w	r0, #0
   294d2:	2301      	movs	r3, #1
   294d4:	f363 0007 	bfi	r0, r3, #0, #8
   294d8:	f366 108f 	bfi	r0, r6, #6, #10
   294dc:	4622      	mov	r2, r4
   294de:	4966      	ldr	r1, [pc, #408]	; (29678 <start+0x378>)
   294e0:	e799      	b.n	29416 <start+0x116>
	LOG_DBG("GPS mode is enabled");
   294e2:	2304      	movs	r3, #4
   294e4:	f04f 0000 	mov.w	r0, #0
   294e8:	f363 0007 	bfi	r0, r3, #0, #8
   294ec:	f366 108f 	bfi	r0, r6, #6, #10
   294f0:	4a5d      	ldr	r2, [pc, #372]	; (29668 <start+0x368>)
   294f2:	4962      	ldr	r1, [pc, #392]	; (2967c <start+0x37c>)
   294f4:	f015 ffc5 	bl	3f482 <log_string_sync>
	err = at_cmd_write(AT_CFUN_REQUEST, buf, sizeof(buf), NULL);
   294f8:	2300      	movs	r3, #0
   294fa:	2232      	movs	r2, #50	; 0x32
   294fc:	a913      	add	r1, sp, #76	; 0x4c
   294fe:	4860      	ldr	r0, [pc, #384]	; (29680 <start+0x380>)
   29500:	f7ff fc4a 	bl	28d98 <at_cmd_write>
	if (err) {
   29504:	4604      	mov	r4, r0
   29506:	b148      	cbz	r0, 2951c <start+0x21c>
		LOG_ERR("Could not get functional mode, error: %d", err);
   29508:	f04f 0000 	mov.w	r0, #0
   2950c:	2301      	movs	r3, #1
   2950e:	f363 0007 	bfi	r0, r3, #0, #8
   29512:	f366 108f 	bfi	r0, r6, #6, #10
   29516:	4622      	mov	r2, r4
   29518:	495a      	ldr	r1, [pc, #360]	; (29684 <start+0x384>)
   2951a:	e77c      	b.n	29416 <start+0x116>
	err = at_parser_max_params_from_str(buf,
   2951c:	4601      	mov	r1, r0
   2951e:	2302      	movs	r3, #2
   29520:	aa07      	add	r2, sp, #28
   29522:	a813      	add	r0, sp, #76	; 0x4c
   29524:	f7fa ff06 	bl	24334 <at_parser_max_params_from_str>
	if (err) {
   29528:	4604      	mov	r4, r0
   2952a:	b148      	cbz	r0, 29540 <start+0x240>
		LOG_ERR("Could not parse functional mode response, error: %d",
   2952c:	f04f 0000 	mov.w	r0, #0
   29530:	2301      	movs	r3, #1
   29532:	f363 0007 	bfi	r0, r3, #0, #8
   29536:	f366 108f 	bfi	r0, r6, #6, #10
   2953a:	4622      	mov	r2, r4
   2953c:	4952      	ldr	r1, [pc, #328]	; (29688 <start+0x388>)
   2953e:	e76a      	b.n	29416 <start+0x116>
	err = at_params_short_get(&at_resp_list, 1, &functional_mode);
   29540:	aa0c      	add	r2, sp, #48	; 0x30
   29542:	2101      	movs	r1, #1
   29544:	a807      	add	r0, sp, #28
   29546:	f017 fe2c 	bl	411a2 <at_params_short_get>
	if (err) {
   2954a:	4604      	mov	r4, r0
		LOG_ERR("Could not get value of functional mode, error: %d",
   2954c:	f04f 0000 	mov.w	r0, #0
	if (err) {
   29550:	b13c      	cbz	r4, 29562 <start+0x262>
		LOG_ERR("Could not get value of functional mode, error: %d",
   29552:	2301      	movs	r3, #1
   29554:	f363 0007 	bfi	r0, r3, #0, #8
   29558:	f366 108f 	bfi	r0, r6, #6, #10
   2955c:	4622      	mov	r2, r4
   2955e:	494b      	ldr	r1, [pc, #300]	; (2968c <start+0x38c>)
   29560:	e759      	b.n	29416 <start+0x116>
	LOG_DBG("Functional mode: %d", functional_mode);
   29562:	2304      	movs	r3, #4
   29564:	f363 0007 	bfi	r0, r3, #0, #8
   29568:	f366 108f 	bfi	r0, r6, #6, #10
   2956c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   29570:	4a3d      	ldr	r2, [pc, #244]	; (29668 <start+0x368>)
   29572:	4947      	ldr	r1, [pc, #284]	; (29690 <start+0x390>)
   29574:	f015 ff85 	bl	3f482 <log_string_sync>
	if (functional_mode != FUNCTIONAL_MODE_ENABLED) {
   29578:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2957c:	2b01      	cmp	r3, #1
   2957e:	f43f af07 	beq.w	29390 <start+0x90>
		LOG_DBG("Functional mode was %d, attemping to set to %d",
   29582:	2204      	movs	r2, #4
   29584:	f04f 0000 	mov.w	r0, #0
   29588:	2501      	movs	r5, #1
   2958a:	f362 0007 	bfi	r0, r2, #0, #8
   2958e:	f366 108f 	bfi	r0, r6, #6, #10
   29592:	4a35      	ldr	r2, [pc, #212]	; (29668 <start+0x368>)
   29594:	493f      	ldr	r1, [pc, #252]	; (29694 <start+0x394>)
   29596:	9500      	str	r5, [sp, #0]
   29598:	f015 ff73 	bl	3f482 <log_string_sync>
		err = at_cmd_write(AT_CFUN_1, NULL, 0, NULL);
   2959c:	4623      	mov	r3, r4
   2959e:	4622      	mov	r2, r4
   295a0:	4621      	mov	r1, r4
   295a2:	483d      	ldr	r0, [pc, #244]	; (29698 <start+0x398>)
   295a4:	f7ff fbf8 	bl	28d98 <at_cmd_write>
		if (err) {
   295a8:	4604      	mov	r4, r0
			LOG_ERR("Could not set functional mode to %d",
   295aa:	f04f 0000 	mov.w	r0, #0
		if (err) {
   295ae:	b134      	cbz	r4, 295be <start+0x2be>
			LOG_ERR("Could not set functional mode to %d",
   295b0:	f365 0007 	bfi	r0, r5, #0, #8
   295b4:	f366 108f 	bfi	r0, r6, #6, #10
   295b8:	462a      	mov	r2, r5
   295ba:	4938      	ldr	r1, [pc, #224]	; (2969c <start+0x39c>)
   295bc:	e72b      	b.n	29416 <start+0x116>
		LOG_DBG("Functional mode set to %d", FUNCTIONAL_MODE_ENABLED);
   295be:	2304      	movs	r3, #4
   295c0:	f363 0007 	bfi	r0, r3, #0, #8
   295c4:	f366 108f 	bfi	r0, r6, #6, #10
   295c8:	462b      	mov	r3, r5
   295ca:	4a27      	ldr	r2, [pc, #156]	; (29668 <start+0x368>)
   295cc:	4934      	ldr	r1, [pc, #208]	; (296a0 <start+0x3a0>)
   295ce:	f015 ff58 	bl	3f482 <log_string_sync>
   295d2:	e6dd      	b.n	29390 <start+0x90>
			LOG_ERR("Could not init socket (err: %d)",
   295d4:	2101      	movs	r1, #1
   295d6:	f361 0007 	bfi	r0, r1, #0, #8
   295da:	f366 108f 	bfi	r0, r6, #6, #10
   295de:	4931      	ldr	r1, [pc, #196]	; (296a4 <start+0x3a4>)
   295e0:	f015 ff4f 	bl	3f482 <log_string_sync>
		return -EIO;
   295e4:	f06f 0404 	mvn.w	r4, #4
	k_sem_give(&drv_data->thread_run_sem);

	LOG_DBG("GPS operational");

	return retval;
}
   295e8:	4620      	mov	r0, r4
   295ea:	b021      	add	sp, #132	; 0x84
   295ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	retval = nrf_setsockopt(drv_data->socket,
   295ee:	9400      	str	r4, [sp, #0]
   295f0:	f10d 0312 	add.w	r3, sp, #18
   295f4:	2201      	movs	r2, #1
   295f6:	f44f 7101 	mov.w	r1, #516	; 0x204
   295fa:	6a38      	ldr	r0, [r7, #32]
   295fc:	f001 ff06 	bl	2b40c <nrf_setsockopt>
	if (retval != 0) {
   29600:	b140      	cbz	r0, 29614 <start+0x314>
		LOG_ERR("Failed to set fix interval value");
   29602:	f04f 0000 	mov.w	r0, #0
   29606:	2301      	movs	r3, #1
   29608:	f363 0007 	bfi	r0, r3, #0, #8
   2960c:	f366 108f 	bfi	r0, r6, #6, #10
   29610:	4925      	ldr	r1, [pc, #148]	; (296a8 <start+0x3a8>)
   29612:	e6a6      	b.n	29362 <start+0x62>
	retval = nrf_setsockopt(drv_data->socket,
   29614:	9400      	str	r4, [sp, #0]
   29616:	ab05      	add	r3, sp, #20
   29618:	2204      	movs	r2, #4
   2961a:	f44f 7101 	mov.w	r1, #516	; 0x204
   2961e:	6a38      	ldr	r0, [r7, #32]
   29620:	f001 fef4 	bl	2b40c <nrf_setsockopt>
	if (retval != 0) {
   29624:	2800      	cmp	r0, #0
   29626:	d043      	beq.n	296b0 <start+0x3b0>
		LOG_ERR("Failed to set nmea mask");
   29628:	f04f 0000 	mov.w	r0, #0
   2962c:	2301      	movs	r3, #1
   2962e:	f363 0007 	bfi	r0, r3, #0, #8
   29632:	f366 108f 	bfi	r0, r6, #6, #10
   29636:	491d      	ldr	r1, [pc, #116]	; (296ac <start+0x3ac>)
   29638:	e693      	b.n	29362 <start+0x62>
   2963a:	bf00      	nop
   2963c:	0004306c 	.word	0x0004306c
   29640:	00042fb4 	.word	0x00042fb4
   29644:	00049a48 	.word	0x00049a48
   29648:	00049cb6 	.word	0x00049cb6
   2964c:	000474e4 	.word	0x000474e4
   29650:	00049a6d 	.word	0x00049a6d
   29654:	00049849 	.word	0x00049849
   29658:	00049ccb 	.word	0x00049ccb
   2965c:	00049d02 	.word	0x00049d02
   29660:	00049a8f 	.word	0x00049a8f
   29664:	00049ab6 	.word	0x00049ab6
   29668:	0004983e 	.word	0x0004983e
   2966c:	00049ade 	.word	0x00049ade
   29670:	00049b13 	.word	0x00049b13
   29674:	00049b2f 	.word	0x00049b2f
   29678:	00049b4a 	.word	0x00049b4a
   2967c:	00049b6f 	.word	0x00049b6f
   29680:	00049b87 	.word	0x00049b87
   29684:	00049b90 	.word	0x00049b90
   29688:	00049bb9 	.word	0x00049bb9
   2968c:	00049bed 	.word	0x00049bed
   29690:	00049c1f 	.word	0x00049c1f
   29694:	00049c37 	.word	0x00049c37
   29698:	00049c6a 	.word	0x00049c6a
   2969c:	00049c74 	.word	0x00049c74
   296a0:	00049c98 	.word	0x00049c98
   296a4:	00049ce2 	.word	0x00049ce2
   296a8:	00049d20 	.word	0x00049d20
   296ac:	00049d41 	.word	0x00049d41
	retval = nrf_setsockopt(drv_data->socket,
   296b0:	2304      	movs	r3, #4
   296b2:	9300      	str	r3, [sp, #0]
   296b4:	2207      	movs	r2, #7
   296b6:	ab06      	add	r3, sp, #24
   296b8:	f44f 7101 	mov.w	r1, #516	; 0x204
   296bc:	6a38      	ldr	r0, [r7, #32]
   296be:	f001 fea5 	bl	2b40c <nrf_setsockopt>
	if (retval != 0) {
   296c2:	4604      	mov	r4, r0
   296c4:	b140      	cbz	r0, 296d8 <start+0x3d8>
		LOG_ERR("Failed to start GPS");
   296c6:	f04f 0000 	mov.w	r0, #0
   296ca:	2301      	movs	r3, #1
   296cc:	f363 0007 	bfi	r0, r3, #0, #8
   296d0:	f366 108f 	bfi	r0, r6, #6, #10
   296d4:	490d      	ldr	r1, [pc, #52]	; (2970c <start+0x40c>)
   296d6:	e644      	b.n	29362 <start+0x62>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   296d8:	2201      	movs	r2, #1
   296da:	f107 031c 	add.w	r3, r7, #28
   296de:	e8d3 1fef 	ldaex	r1, [r3]
   296e2:	e8c3 2fe0 	stlex	r0, r2, [r3]
   296e6:	2800      	cmp	r0, #0
   296e8:	d1f9      	bne.n	296de <start+0x3de>
	z_impl_k_sem_give(sem);
   296ea:	f607 00d8 	addw	r0, r7, #2264	; 0x8d8
   296ee:	f011 fbd1 	bl	3ae94 <z_impl_k_sem_give>
	LOG_DBG("GPS operational");
   296f2:	2304      	movs	r3, #4
   296f4:	f04f 0000 	mov.w	r0, #0
   296f8:	f363 0007 	bfi	r0, r3, #0, #8
   296fc:	f366 108f 	bfi	r0, r6, #6, #10
   29700:	4a03      	ldr	r2, [pc, #12]	; (29710 <start+0x410>)
   29702:	4904      	ldr	r1, [pc, #16]	; (29714 <start+0x414>)
   29704:	f015 febd 	bl	3f482 <log_string_sync>
	return retval;
   29708:	e76e      	b.n	295e8 <start+0x2e8>
   2970a:	bf00      	nop
   2970c:	00049d59 	.word	0x00049d59
   29710:	00049849 	.word	0x00049849
   29714:	00049d6d 	.word	0x00049d6d

00029718 <channel_get>:
	return 0;
}

static int channel_get(struct device *dev, enum gps_channel chan,
		       struct gps_data *sample)
{
   29718:	b570      	push	{r4, r5, r6, lr}
   2971a:	4615      	mov	r5, r2
	switch (chan) {
   2971c:	b121      	cbz	r1, 29728 <channel_get+0x10>
   2971e:	2901      	cmp	r1, #1
   29720:	d011      	beq.n	29746 <channel_get+0x2e>
		break;
	case GPS_CHAN_PVT:
		memcpy(sample, &fresh_pvt, sizeof(struct gps_data));
		break;
	default:
		return -ENOTSUP;
   29722:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	return 0;
}
   29726:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(sample->nmea.buf, fresh_nmea.nmea.buf,
   29728:	4e0a      	ldr	r6, [pc, #40]	; (29754 <channel_get+0x3c>)
   2972a:	f105 0008 	add.w	r0, r5, #8
   2972e:	f896 205b 	ldrb.w	r2, [r6, #91]	; 0x5b
   29732:	f106 0108 	add.w	r1, r6, #8
   29736:	f018 f93c 	bl	419b2 <memcpy>
		sample->nmea.len = fresh_nmea.nmea.len;
   2973a:	f896 305b 	ldrb.w	r3, [r6, #91]	; 0x5b
   2973e:	f885 305b 	strb.w	r3, [r5, #91]	; 0x5b
   29742:	2000      	movs	r0, #0
   29744:	e7ef      	b.n	29726 <channel_get+0xe>
   29746:	22c0      	movs	r2, #192	; 0xc0
   29748:	4903      	ldr	r1, [pc, #12]	; (29758 <channel_get+0x40>)
   2974a:	4628      	mov	r0, r5
   2974c:	f018 f931 	bl	419b2 <memcpy>
   29750:	e7f7      	b.n	29742 <channel_get+0x2a>
   29752:	bf00      	nop
   29754:	20022d50 	.word	0x20022d50
   29758:	20022e10 	.word	0x20022e10

0002975c <trigger_set>:
}

static int trigger_set(struct device *dev,
			       const struct gps_trigger *trig,
			       gps_trigger_handler_t handler)
{
   2975c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int ret = 0;
	struct gps_drv_data *drv_data = dev->driver_data;
	(void)drv_data;

	switch (trig->type) {
   2975e:	780b      	ldrb	r3, [r1, #0]
{
   29760:	460e      	mov	r6, r1
	switch (trig->type) {
   29762:	3b01      	subs	r3, #1
   29764:	2b01      	cmp	r3, #1
{
   29766:	4617      	mov	r7, r2
	struct gps_drv_data *drv_data = dev->driver_data;
   29768:	6884      	ldr	r4, [r0, #8]
	switch (trig->type) {
   2976a:	d80e      	bhi.n	2978a <trigger_set+0x2e>
	case GPS_TRIG_DATA_READY:
	case GPS_TRIG_FIX:
		k_mutex_lock(&drv_data->trigger_mutex, K_FOREVER);
   2976c:	f104 0508 	add.w	r5, r4, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   29770:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   29774:	4628      	mov	r0, r5
   29776:	f010 f809 	bl	3978c <z_impl_k_mutex_lock>
		drv_data->trigger_handler = handler;
		drv_data->trigger = *trig;
   2977a:	8833      	ldrh	r3, [r6, #0]
		drv_data->trigger_handler = handler;
   2977c:	6027      	str	r7, [r4, #0]
		drv_data->trigger = *trig;
   2977e:	80a3      	strh	r3, [r4, #4]
	z_impl_k_mutex_unlock(mutex);
   29780:	4628      	mov	r0, r5
   29782:	f010 f8dd 	bl	39940 <z_impl_k_mutex_unlock>
	int ret = 0;
   29786:	2000      	movs	r0, #0
		ret = -ENOTSUP;
		break;
	}

	return ret;
}
   29788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("Unsupported GPS trigger");
   2978a:	2301      	movs	r3, #1
   2978c:	f04f 0000 	mov.w	r0, #0
   29790:	4a06      	ldr	r2, [pc, #24]	; (297ac <trigger_set+0x50>)
   29792:	f363 0007 	bfi	r0, r3, #0, #8
   29796:	4b06      	ldr	r3, [pc, #24]	; (297b0 <trigger_set+0x54>)
   29798:	4906      	ldr	r1, [pc, #24]	; (297b4 <trigger_set+0x58>)
   2979a:	1a9b      	subs	r3, r3, r2
   2979c:	08db      	lsrs	r3, r3, #3
   2979e:	f363 108f 	bfi	r0, r3, #6, #10
   297a2:	f015 fe6e 	bl	3f482 <log_string_sync>
	return ret;
   297a6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   297aa:	e7ed      	b.n	29788 <trigger_set+0x2c>
   297ac:	00042fb4 	.word	0x00042fb4
   297b0:	0004306c 	.word	0x0004306c
   297b4:	00049db1 	.word	0x00049db1

000297b8 <gps_thread>:
{
   297b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bool operation_blocked = false;
   297bc:	2500      	movs	r5, #0
   297be:	4b6c      	ldr	r3, [pc, #432]	; (29970 <gps_thread+0x1b8>)
				LOG_DBG("NMEA data ready");
   297c0:	4a6c      	ldr	r2, [pc, #432]	; (29974 <gps_thread+0x1bc>)
{
   297c2:	b0c5      	sub	sp, #276	; 0x114
				LOG_DBG("NMEA data ready");
   297c4:	1a9b      	subs	r3, r3, r2
	struct gps_drv_data *drv_data = dev->driver_data;
   297c6:	f8d0 b008 	ldr.w	fp, [r0, #8]
{
   297ca:	900d      	str	r0, [sp, #52]	; 0x34
				LOG_DBG("NMEA data ready");
   297cc:	f3c3 0ac9 	ubfx	sl, r3, #3, #10
	return z_impl_k_sem_take(sem, timeout);
   297d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   297d4:	f60b 00d8 	addw	r0, fp, #2264	; 0x8d8
   297d8:	f011 fba4 	bl	3af24 <z_impl_k_sem_take>
	__ASSERT_NO_MSG(socket_ops);
   297dc:	4b66      	ldr	r3, [pc, #408]	; (29978 <gps_thread+0x1c0>)
		len = recv(drv_data->socket, &raw_gps_data,
   297de:	f8db 6020 	ldr.w	r6, [fp, #32]
   297e2:	681b      	ldr	r3, [r3, #0]
   297e4:	b94b      	cbnz	r3, 297fa <gps_thread+0x42>
   297e6:	4965      	ldr	r1, [pc, #404]	; (2997c <gps_thread+0x1c4>)
   297e8:	4865      	ldr	r0, [pc, #404]	; (29980 <gps_thread+0x1c8>)
   297ea:	2369      	movs	r3, #105	; 0x69
   297ec:	4a65      	ldr	r2, [pc, #404]	; (29984 <gps_thread+0x1cc>)
   297ee:	f015 fe2a 	bl	3f446 <printk>
   297f2:	2169      	movs	r1, #105	; 0x69
   297f4:	4863      	ldr	r0, [pc, #396]	; (29984 <gps_thread+0x1cc>)
   297f6:	f015 fe33 	bl	3f460 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   297fa:	4b5f      	ldr	r3, [pc, #380]	; (29978 <gps_thread+0x1c0>)
   297fc:	681b      	ldr	r3, [r3, #0]
   297fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29800:	b94b      	cbnz	r3, 29816 <gps_thread+0x5e>
   29802:	4961      	ldr	r1, [pc, #388]	; (29988 <gps_thread+0x1d0>)
   29804:	485e      	ldr	r0, [pc, #376]	; (29980 <gps_thread+0x1c8>)
   29806:	236a      	movs	r3, #106	; 0x6a
   29808:	4a5e      	ldr	r2, [pc, #376]	; (29984 <gps_thread+0x1cc>)
   2980a:	f015 fe1c 	bl	3f446 <printk>
   2980e:	216a      	movs	r1, #106	; 0x6a
   29810:	485c      	ldr	r0, [pc, #368]	; (29984 <gps_thread+0x1cc>)
   29812:	f015 fe25 	bl	3f460 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   29816:	4b58      	ldr	r3, [pc, #352]	; (29978 <gps_thread+0x1c0>)
   29818:	22d8      	movs	r2, #216	; 0xd8
   2981a:	681b      	ldr	r3, [r3, #0]
   2981c:	a90e      	add	r1, sp, #56	; 0x38
   2981e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   29820:	4630      	mov	r0, r6
   29822:	2300      	movs	r3, #0
   29824:	47a0      	blx	r4
		if (len <= 0) {
   29826:	1e02      	subs	r2, r0, #0
   29828:	dc19      	bgt.n	2985e <gps_thread+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2982a:	f10b 031c 	add.w	r3, fp, #28
   2982e:	e8d3 3faf 	lda	r3, [r3]
			if (!atomic_get(&drv_data->gps_is_active)) {
   29832:	2b00      	cmp	r3, #0
   29834:	d0cc      	beq.n	297d0 <gps_thread+0x18>
			LOG_ERR("recv() returned error: %d", len);
   29836:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2983a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2983e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   29842:	f043 0301 	orr.w	r3, r3, #1
   29846:	f363 0107 	bfi	r1, r3, #0, #8
   2984a:	b28b      	uxth	r3, r1
   2984c:	f36a 138f 	bfi	r3, sl, #6, #10
   29850:	494e      	ldr	r1, [pc, #312]	; (2998c <gps_thread+0x1d4>)
   29852:	b298      	uxth	r0, r3
   29854:	f8ad 3010 	strh.w	r3, [sp, #16]
   29858:	f015 fe13 	bl	3f482 <log_string_sync>
			continue;
   2985c:	e7be      	b.n	297dc <gps_thread+0x24>
		switch (raw_gps_data.data_id) {
   2985e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
   29862:	2f01      	cmp	r7, #1
   29864:	d04d      	beq.n	29902 <gps_thread+0x14a>
   29866:	2f02      	cmp	r7, #2
   29868:	d1b8      	bne.n	297dc <gps_thread+0x24>
			if (operation_blocked) {
   2986a:	2d00      	cmp	r5, #0
   2986c:	d1b6      	bne.n	297dc <gps_thread+0x24>
			memcpy(fresh_nmea.nmea.buf, raw_gps_data.nmea, len);
   2986e:	4c48      	ldr	r4, [pc, #288]	; (29990 <gps_thread+0x1d8>)
   29870:	23b8      	movs	r3, #184	; 0xb8
   29872:	a910      	add	r1, sp, #64	; 0x40
   29874:	f104 0008 	add.w	r0, r4, #8
   29878:	f018 f8a8 	bl	419cc <__memcpy_chk>
			fresh_nmea.nmea.len = strlen(raw_gps_data.nmea);
   2987c:	a810      	add	r0, sp, #64	; 0x40
   2987e:	f7f0 fb31 	bl	19ee4 <strlen>
   29882:	f884 005b 	strb.w	r0, [r4, #91]	; 0x5b
			if ((drv_data->trigger.chan == GPS_CHAN_NMEA) &&
   29886:	f8bb 4004 	ldrh.w	r4, [fp, #4]
   2988a:	2c01      	cmp	r4, #1
   2988c:	d114      	bne.n	298b8 <gps_thread+0x100>
				LOG_DBG("NMEA data ready");
   2988e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   29892:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   29896:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2989a:	f043 0304 	orr.w	r3, r3, #4
   2989e:	f363 0207 	bfi	r2, r3, #0, #8
   298a2:	b293      	uxth	r3, r2
   298a4:	f36a 138f 	bfi	r3, sl, #6, #10
   298a8:	4a3a      	ldr	r2, [pc, #232]	; (29994 <gps_thread+0x1dc>)
   298aa:	493b      	ldr	r1, [pc, #236]	; (29998 <gps_thread+0x1e0>)
   298ac:	b298      	uxth	r0, r3
   298ae:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
				trigger_send = true;
   298b2:	4625      	mov	r5, r4
				LOG_DBG("NMEA data ready");
   298b4:	f015 fde5 	bl	3f482 <log_string_sync>
			if ((drv_data->trigger.type == GPS_TRIG_FIX)
   298b8:	f89b 3004 	ldrb.w	r3, [fp, #4]
   298bc:	2b02      	cmp	r3, #2
   298be:	f040 8176 	bne.w	29bae <gps_thread+0x3f6>
			    && is_fix(&fresh_pvt.pvt)) {
   298c2:	4b36      	ldr	r3, [pc, #216]	; (2999c <gps_thread+0x1e4>)
   298c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   298c8:	07db      	lsls	r3, r3, #31
   298ca:	f140 8170 	bpl.w	29bae <gps_thread+0x3f6>
				if (drv_data->trigger.chan == GPS_CHAN_NMEA) {
   298ce:	f89b 3005 	ldrb.w	r3, [fp, #5]
				LOG_DBG("NMEA: Position fix");
   298d2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
					trigger_send = true;
   298d6:	2b00      	cmp	r3, #0
				LOG_DBG("NMEA: Position fix");
   298d8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   298dc:	4930      	ldr	r1, [pc, #192]	; (299a0 <gps_thread+0x1e8>)
   298de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   298e2:	f043 0304 	orr.w	r3, r3, #4
   298e6:	f363 0207 	bfi	r2, r3, #0, #8
   298ea:	b293      	uxth	r3, r2
   298ec:	f36a 138f 	bfi	r3, sl, #6, #10
   298f0:	4a28      	ldr	r2, [pc, #160]	; (29994 <gps_thread+0x1dc>)
   298f2:	b298      	uxth	r0, r3
					trigger_send = true;
   298f4:	bf08      	it	eq
   298f6:	2501      	moveq	r5, #1
				LOG_DBG("NMEA: Position fix");
   298f8:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   298fc:	f015 fdc1 	bl	3f482 <log_string_sync>
   29900:	e155      	b.n	29bae <gps_thread+0x3f6>
			if (gps_is_blocked(&raw_gps_data.pvt)) {
   29902:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   29906:	f014 0610 	ands.w	r6, r4, #16
   2990a:	d018      	beq.n	2993e <gps_thread+0x186>
				if (operation_blocked) {
   2990c:	2d00      	cmp	r5, #0
   2990e:	f47f af65 	bne.w	297dc <gps_thread+0x24>
				LOG_DBG("Waiting for time window to operate");
   29912:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   29916:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   2991a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2991e:	f043 0304 	orr.w	r3, r3, #4
   29922:	f363 0207 	bfi	r2, r3, #0, #8
   29926:	b293      	uxth	r3, r2
   29928:	f36a 138f 	bfi	r3, sl, #6, #10
   2992c:	4a19      	ldr	r2, [pc, #100]	; (29994 <gps_thread+0x1dc>)
   2992e:	491d      	ldr	r1, [pc, #116]	; (299a4 <gps_thread+0x1ec>)
   29930:	b298      	uxth	r0, r3
   29932:	f8ad 3014 	strh.w	r3, [sp, #20]
				operation_blocked = true;
   29936:	463d      	mov	r5, r7
				LOG_DBG("Waiting for time window to operate");
   29938:	f015 fda3 	bl	3f482 <log_string_sync>
				continue;
   2993c:	e74e      	b.n	297dc <gps_thread+0x24>
			if (pvt_deadline_missed(&raw_gps_data.pvt)) {
   2993e:	f014 0408 	ands.w	r4, r4, #8
   29942:	d033      	beq.n	299ac <gps_thread+0x1f4>
				LOG_DBG("Invalid PVT frame, discarding");
   29944:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   29948:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   2994c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   29950:	f043 0304 	orr.w	r3, r3, #4
   29954:	f363 0207 	bfi	r2, r3, #0, #8
   29958:	b293      	uxth	r3, r2
   2995a:	f36a 138f 	bfi	r3, sl, #6, #10
   2995e:	4a0d      	ldr	r2, [pc, #52]	; (29994 <gps_thread+0x1dc>)
   29960:	4911      	ldr	r1, [pc, #68]	; (299a8 <gps_thread+0x1f0>)
   29962:	b298      	uxth	r0, r3
   29964:	f8ad 3018 	strh.w	r3, [sp, #24]
   29968:	f015 fd8b 	bl	3f482 <log_string_sync>
	z_impl_k_mutex_unlock(mutex);
   2996c:	2500      	movs	r5, #0
   2996e:	e735      	b.n	297dc <gps_thread+0x24>
   29970:	0004306c 	.word	0x0004306c
   29974:	00042fb4 	.word	0x00042fb4
   29978:	20023934 	.word	0x20023934
   2997c:	00045442 	.word	0x00045442
   29980:	00045316 	.word	0x00045316
   29984:	00045419 	.word	0x00045419
   29988:	00046c8f 	.word	0x00046c8f
   2998c:	00049883 	.word	0x00049883
   29990:	20022d50 	.word	0x20022d50
   29994:	00049833 	.word	0x00049833
   29998:	00049974 	.word	0x00049974
   2999c:	20022e10 	.word	0x20022e10
   299a0:	00049988 	.word	0x00049988
   299a4:	0004989d 	.word	0x0004989d
   299a8:	000498c4 	.word	0x000498c4
	u8_t  n_unhealthy = 0;
   299ac:	4627      	mov	r7, r4
	u8_t  n_used = 0;
   299ae:	4626      	mov	r6, r4
   299b0:	ad0e      	add	r5, sp, #56	; 0x38
			if (pvt_deadline_missed(&raw_gps_data.pvt)) {
   299b2:	950b      	str	r5, [sp, #44]	; 0x2c
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
   299b4:	940c      	str	r4, [sp, #48]	; 0x30
		u8_t sv = pvt_data->pvt.sv[i].sv;
   299b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   299b8:	f893 c046 	ldrb.w	ip, [r3, #70]	; 0x46
		if (sv) { /* SV number 0 indicates no satellite */
   299bc:	f1bc 0f00 	cmp.w	ip, #0
   299c0:	d028      	beq.n	29a14 <gps_thread+0x25c>
			     NRF_GNSS_SV_FLAG_USED_IN_FIX) ? true : false;
   299c2:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
			n_tracked++;
   299c6:	3401      	adds	r4, #1
			     NRF_GNSS_SV_FLAG_USED_IN_FIX) ? true : false;
   299c8:	f3c2 0140 	ubfx	r1, r2, #1, #1
			n_tracked++;
   299cc:	b2e4      	uxtb	r4, r4
			if (used) {
   299ce:	b109      	cbz	r1, 299d4 <gps_thread+0x21c>
				n_used++;
   299d0:	3601      	adds	r6, #1
   299d2:	b2f6      	uxtb	r6, r6
				  NRF_GNSS_SV_FLAG_UNHEALTHY) ? true : false;
   299d4:	f3c2 02c0 	ubfx	r2, r2, #3, #1
			if (unhealthy) {
   299d8:	b10a      	cbz	r2, 299de <gps_thread+0x226>
				n_unhealthy++;
   299da:	3701      	adds	r7, #1
   299dc:	b2ff      	uxtb	r7, r7
			LOG_DBG("Tracking SV %2u: %s, %s", sv,
   299de:	f029 003f 	bic.w	r0, r9, #63	; 0x3f
   299e2:	f040 0004 	orr.w	r0, r0, #4
   299e6:	f360 0907 	bfi	r9, r0, #0, #8
   299ea:	4b7c      	ldr	r3, [pc, #496]	; (29bdc <gps_thread+0x424>)
   299ec:	487c      	ldr	r0, [pc, #496]	; (29be0 <gps_thread+0x428>)
   299ee:	f36a 198f 	bfi	r9, sl, #6, #10
   299f2:	2900      	cmp	r1, #0
   299f4:	bf08      	it	eq
   299f6:	4618      	moveq	r0, r3
   299f8:	4b7a      	ldr	r3, [pc, #488]	; (29be4 <gps_thread+0x42c>)
   299fa:	4601      	mov	r1, r0
   299fc:	487a      	ldr	r0, [pc, #488]	; (29be8 <gps_thread+0x430>)
   299fe:	2a00      	cmp	r2, #0
   29a00:	bf08      	it	eq
   29a02:	4603      	moveq	r3, r0
   29a04:	4a79      	ldr	r2, [pc, #484]	; (29bec <gps_thread+0x434>)
   29a06:	e9cd 1300 	strd	r1, r3, [sp]
   29a0a:	4648      	mov	r0, r9
   29a0c:	4663      	mov	r3, ip
   29a0e:	4978      	ldr	r1, [pc, #480]	; (29bf0 <gps_thread+0x438>)
   29a10:	f015 fd37 	bl	3f482 <log_string_sync>
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
   29a14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   29a16:	3301      	adds	r3, #1
   29a18:	930c      	str	r3, [sp, #48]	; 0x30
   29a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   29a1c:	330c      	adds	r3, #12
   29a1e:	930b      	str	r3, [sp, #44]	; 0x2c
   29a20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   29a22:	2b0c      	cmp	r3, #12
   29a24:	d1c7      	bne.n	299b6 <gps_thread+0x1fe>
	LOG_DBG("Tracking: %d Using: %d Unhealthy: %d", n_tracked,
   29a26:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   29a2a:	f043 0304 	orr.w	r3, r3, #4
   29a2e:	f363 0807 	bfi	r8, r3, #0, #8
   29a32:	f36a 188f 	bfi	r8, sl, #6, #10
   29a36:	4623      	mov	r3, r4
   29a38:	e9cd 6700 	strd	r6, r7, [sp]
   29a3c:	4a6b      	ldr	r2, [pc, #428]	; (29bec <gps_thread+0x434>)
   29a3e:	496d      	ldr	r1, [pc, #436]	; (29bf4 <gps_thread+0x43c>)
   29a40:	4640      	mov	r0, r8
   29a42:	f015 fd1e 	bl	3f482 <log_string_sync>
	LOG_DBG("Seconds since last fix %lld",
   29a46:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   29a4a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   29a4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   29a52:	f043 0304 	orr.w	r3, r3, #4
   29a56:	f363 0207 	bfi	r2, r3, #0, #8
   29a5a:	b293      	uxth	r3, r2
   29a5c:	f36a 138f 	bfi	r3, sl, #6, #10
   29a60:	f8ad 300c 	strh.w	r3, [sp, #12]
	return z_impl_k_uptime_get();
   29a64:	f017 ff1f 	bl	418a6 <z_impl_k_uptime_get>
   29a68:	4b63      	ldr	r3, [pc, #396]	; (29bf8 <gps_thread+0x440>)
   29a6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29a6e:	e9d3 4600 	ldrd	r4, r6, [r3]
   29a72:	1b00      	subs	r0, r0, r4
   29a74:	f04f 0300 	mov.w	r3, #0
   29a78:	eb61 0106 	sbc.w	r1, r1, r6
   29a7c:	f7ef f96e 	bl	18d5c <__aeabi_uldivmod>
   29a80:	4a5a      	ldr	r2, [pc, #360]	; (29bec <gps_thread+0x434>)
   29a82:	e9cd 0100 	strd	r0, r1, [sp]
   29a86:	495d      	ldr	r1, [pc, #372]	; (29bfc <gps_thread+0x444>)
   29a88:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   29a8c:	f015 fcf9 	bl	3f482 <log_string_sync>
	dest->latitude = src->latitude;
   29a90:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   29a94:	4b5a      	ldr	r3, [pc, #360]	; (29c00 <gps_thread+0x448>)
	dest->altitude = src->altitude;
   29a96:	9a14      	ldr	r2, [sp, #80]	; 0x50
	dest->latitude = src->latitude;
   29a98:	e9c3 0102 	strd	r0, r1, [r3, #8]
	dest->longitude = src->longitude;
   29a9c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
	dest->altitude = src->altitude;
   29aa0:	619a      	str	r2, [r3, #24]
	dest->accuracy = src->accuracy;
   29aa2:	9a15      	ldr	r2, [sp, #84]	; 0x54
	dest->longitude = src->longitude;
   29aa4:	e9c3 0104 	strd	r0, r1, [r3, #16]
	dest->accuracy = src->accuracy;
   29aa8:	61da      	str	r2, [r3, #28]
	dest->speed = src->speed;
   29aaa:	9a16      	ldr	r2, [sp, #88]	; 0x58
	dest->datetime.year = src->datetime.year;
   29aac:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
	dest->speed = src->speed;
   29ab0:	621a      	str	r2, [r3, #32]
	dest->heading = src->heading;
   29ab2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
	dest->datetime.year = src->datetime.year;
   29ab4:	8759      	strh	r1, [r3, #58]	; 0x3a
	dest->heading = src->heading;
   29ab6:	625a      	str	r2, [r3, #36]	; 0x24
	dest->flags = src->flags;
   29ab8:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
	dest->datetime.month = src->datetime.month;
   29abc:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
	dest->flags = src->flags;
   29ac0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dest->datetime.seconds = src->datetime.seconds;
   29ac4:	f89d 2066 	ldrb.w	r2, [sp, #102]	; 0x66
	dest->datetime.month = src->datetime.month;
   29ac8:	8799      	strh	r1, [r3, #60]	; 0x3c
	dest->datetime.seconds = src->datetime.seconds;
   29aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	dest->datetime.ms = src->datetime.ms;
   29ace:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
	dest->datetime.hour = src->datetime.hour;
   29ad2:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
	dest->datetime.ms = src->datetime.ms;
   29ad6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	dest->pdop = src->pdop;
   29ada:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
	dest->datetime.hour = src->datetime.hour;
   29adc:	87d9      	strh	r1, [r3, #62]	; 0x3e
	dest->pdop = src->pdop;
   29ade:	629a      	str	r2, [r3, #40]	; 0x28
	dest->hdop = src->hdop;
   29ae0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   29ae2:	62da      	str	r2, [r3, #44]	; 0x2c
	dest->vdop = src->vdop;
   29ae4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   29ae6:	631a      	str	r2, [r3, #48]	; 0x30
	dest->tdop = src->tdop;
   29ae8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   29aea:	635a      	str	r2, [r3, #52]	; 0x34
	for (size_t i = 0;
   29aec:	2200      	movs	r2, #0
		dest->sv[i].sv = src->sv[i].sv;
   29aee:	f8b5 1046 	ldrh.w	r1, [r5, #70]	; 0x46
	     i < MIN(NRF_GNSS_MAX_SATELLITES, GPS_MAX_SATELLITES); i++) {
   29af2:	3201      	adds	r2, #1
		dest->sv[i].sv = src->sv[i].sv;
   29af4:	f8a3 1044 	strh.w	r1, [r3, #68]	; 0x44
		dest->sv[i].cn0 = src->sv[i].cn0;
   29af8:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
	for (size_t i = 0;
   29afc:	2a0c      	cmp	r2, #12
		dest->sv[i].cn0 = src->sv[i].cn0;
   29afe:	f8a3 1046 	strh.w	r1, [r3, #70]	; 0x46
		dest->sv[i].elevation = src->sv[i].elevation;
   29b02:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
   29b06:	f103 030a 	add.w	r3, r3, #10
   29b0a:	87d9      	strh	r1, [r3, #62]	; 0x3e
		dest->sv[i].azimuth = src->sv[i].azimuth;
   29b0c:	f8b5 104e 	ldrh.w	r1, [r5, #78]	; 0x4e
   29b10:	f105 050c 	add.w	r5, r5, #12
   29b14:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
		dest->sv[i].flags = src->sv[i].flags;
   29b18:	f895 1044 	ldrb.w	r1, [r5, #68]	; 0x44
   29b1c:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
		dest->sv[i].signal = src->sv[i].signal;
   29b20:	f895 103c 	ldrb.w	r1, [r5, #60]	; 0x3c
   29b24:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	for (size_t i = 0;
   29b28:	d1e1      	bne.n	29aee <gps_thread+0x336>
			if ((drv_data->trigger.chan == GPS_CHAN_PVT)
   29b2a:	f240 1301 	movw	r3, #257	; 0x101
   29b2e:	f8bb 2004 	ldrh.w	r2, [fp, #4]
   29b32:	429a      	cmp	r2, r3
   29b34:	d150      	bne.n	29bd8 <gps_thread+0x420>
				LOG_DBG("PVT data ready");
   29b36:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   29b3a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   29b3e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   29b42:	f043 0304 	orr.w	r3, r3, #4
   29b46:	f363 0207 	bfi	r2, r3, #0, #8
   29b4a:	b293      	uxth	r3, r2
   29b4c:	f36a 138f 	bfi	r3, sl, #6, #10
   29b50:	4a2c      	ldr	r2, [pc, #176]	; (29c04 <gps_thread+0x44c>)
   29b52:	492d      	ldr	r1, [pc, #180]	; (29c08 <gps_thread+0x450>)
   29b54:	b298      	uxth	r0, r3
   29b56:	f8ad 301c 	strh.w	r3, [sp, #28]
				trigger_send = true;
   29b5a:	2501      	movs	r5, #1
				LOG_DBG("PVT data ready");
   29b5c:	f015 fc91 	bl	3f482 <log_string_sync>
			if ((drv_data->trigger.type == GPS_TRIG_FIX) &&
   29b60:	f89b 3004 	ldrb.w	r3, [fp, #4]
   29b64:	2b02      	cmp	r3, #2
   29b66:	d122      	bne.n	29bae <gps_thread+0x3f6>
			    is_fix(&fresh_pvt.pvt)) {
   29b68:	4b25      	ldr	r3, [pc, #148]	; (29c00 <gps_thread+0x448>)
			if ((drv_data->trigger.type == GPS_TRIG_FIX) &&
   29b6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   29b6e:	07da      	lsls	r2, r3, #31
   29b70:	d51d      	bpl.n	29bae <gps_thread+0x3f6>
				if (drv_data->trigger.chan == GPS_CHAN_PVT) {
   29b72:	f89b 3005 	ldrb.w	r3, [fp, #5]
				LOG_DBG("PVT: Position fix");
   29b76:	f8bd 2020 	ldrh.w	r2, [sp, #32]
					trigger_send = true;
   29b7a:	2b01      	cmp	r3, #1
				LOG_DBG("PVT: Position fix");
   29b7c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   29b80:	4922      	ldr	r1, [pc, #136]	; (29c0c <gps_thread+0x454>)
   29b82:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   29b86:	f043 0304 	orr.w	r3, r3, #4
   29b8a:	f363 0207 	bfi	r2, r3, #0, #8
   29b8e:	b293      	uxth	r3, r2
   29b90:	f36a 138f 	bfi	r3, sl, #6, #10
   29b94:	4a1b      	ldr	r2, [pc, #108]	; (29c04 <gps_thread+0x44c>)
   29b96:	b298      	uxth	r0, r3
					trigger_send = true;
   29b98:	bf08      	it	eq
   29b9a:	2501      	moveq	r5, #1
				LOG_DBG("PVT: Position fix");
   29b9c:	f8ad 3020 	strh.w	r3, [sp, #32]
   29ba0:	f015 fc6f 	bl	3f482 <log_string_sync>
   29ba4:	f017 fe7f 	bl	418a6 <z_impl_k_uptime_get>
				fix_timestamp = k_uptime_get();
   29ba8:	4b13      	ldr	r3, [pc, #76]	; (29bf8 <gps_thread+0x440>)
   29baa:	e9c3 0100 	strd	r0, r1, [r3]
		if (!trigger_send) {
   29bae:	2d00      	cmp	r5, #0
   29bb0:	f43f ae14 	beq.w	297dc <gps_thread+0x24>
		k_mutex_lock(&drv_data->trigger_mutex, K_FOREVER);
   29bb4:	f10b 0408 	add.w	r4, fp, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   29bb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   29bbc:	4620      	mov	r0, r4
   29bbe:	f00f fde5 	bl	3978c <z_impl_k_mutex_lock>
		if (drv_data->trigger_handler != NULL) {
   29bc2:	f8db 3000 	ldr.w	r3, [fp]
   29bc6:	b11b      	cbz	r3, 29bd0 <gps_thread+0x418>
			drv_data->trigger_handler(dev, &drv_data->trigger);
   29bc8:	f10b 0104 	add.w	r1, fp, #4
   29bcc:	980d      	ldr	r0, [sp, #52]	; 0x34
   29bce:	4798      	blx	r3
	z_impl_k_mutex_unlock(mutex);
   29bd0:	4620      	mov	r0, r4
   29bd2:	f00f feb5 	bl	39940 <z_impl_k_mutex_unlock>
   29bd6:	e6c9      	b.n	2996c <gps_thread+0x1b4>
   29bd8:	2500      	movs	r5, #0
   29bda:	e7c1      	b.n	29b60 <gps_thread+0x3a8>
   29bdc:	00049862 	.word	0x00049862
   29be0:	00049859 	.word	0x00049859
   29be4:	0004986b 	.word	0x0004986b
   29be8:	00049877 	.word	0x00049877
   29bec:	0004981d 	.word	0x0004981d
   29bf0:	000498e6 	.word	0x000498e6
   29bf4:	00049902 	.word	0x00049902
   29bf8:	20022d48 	.word	0x20022d48
   29bfc:	0004992b 	.word	0x0004992b
   29c00:	20022e10 	.word	0x20022e10
   29c04:	00049833 	.word	0x00049833
   29c08:	0004994b 	.word	0x0004994b
   29c0c:	0004995e 	.word	0x0004995e

00029c10 <stop>:
{
   29c10:	b537      	push	{r0, r1, r2, r4, r5, lr}
	LOG_DBG("Stopping GPS");
   29c12:	2304      	movs	r3, #4
	struct gps_drv_data *drv_data = dev->driver_data;
   29c14:	6885      	ldr	r5, [r0, #8]
	LOG_DBG("Stopping GPS");
   29c16:	f04f 0000 	mov.w	r0, #0
   29c1a:	4c16      	ldr	r4, [pc, #88]	; (29c74 <stop+0x64>)
   29c1c:	f363 0007 	bfi	r0, r3, #0, #8
   29c20:	4b15      	ldr	r3, [pc, #84]	; (29c78 <stop+0x68>)
   29c22:	4a16      	ldr	r2, [pc, #88]	; (29c7c <stop+0x6c>)
   29c24:	1ae4      	subs	r4, r4, r3
   29c26:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   29c2a:	f364 108f 	bfi	r0, r4, #6, #10
   29c2e:	4914      	ldr	r1, [pc, #80]	; (29c80 <stop+0x70>)
   29c30:	f015 fc27 	bl	3f482 <log_string_sync>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   29c34:	2300      	movs	r3, #0
   29c36:	f105 021c 	add.w	r2, r5, #28
   29c3a:	e8d2 1fef 	ldaex	r1, [r2]
   29c3e:	e8c2 3fe0 	stlex	r0, r3, [r2]
   29c42:	2800      	cmp	r0, #0
   29c44:	d1f9      	bne.n	29c3a <stop+0x2a>
	retval = nrf_setsockopt(drv_data->socket,
   29c46:	9300      	str	r3, [sp, #0]
   29c48:	2208      	movs	r2, #8
   29c4a:	f44f 7101 	mov.w	r1, #516	; 0x204
   29c4e:	6a28      	ldr	r0, [r5, #32]
   29c50:	f001 fbdc 	bl	2b40c <nrf_setsockopt>
	if (retval != 0) {
   29c54:	b158      	cbz	r0, 29c6e <stop+0x5e>
		LOG_ERR("Failed to stop GPS");
   29c56:	2301      	movs	r3, #1
   29c58:	f04f 0000 	mov.w	r0, #0
   29c5c:	f363 0007 	bfi	r0, r3, #0, #8
   29c60:	f364 108f 	bfi	r0, r4, #6, #10
   29c64:	4907      	ldr	r1, [pc, #28]	; (29c84 <stop+0x74>)
   29c66:	f015 fc0c 	bl	3f482 <log_string_sync>
		return -EIO;
   29c6a:	f06f 0004 	mvn.w	r0, #4
}
   29c6e:	b003      	add	sp, #12
   29c70:	bd30      	pop	{r4, r5, pc}
   29c72:	bf00      	nop
   29c74:	0004306c 	.word	0x0004306c
   29c78:	00042fb4 	.word	0x00042fb4
   29c7c:	00049854 	.word	0x00049854
   29c80:	00049d81 	.word	0x00049d81
   29c84:	00049d92 	.word	0x00049d92

00029c88 <init>:
	drv_data->socket = -1;
   29c88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
   29c8c:	b570      	push	{r4, r5, r6, lr}
   29c8e:	4606      	mov	r6, r0
   29c90:	2400      	movs	r4, #0
	struct gps_drv_data *drv_data = dev->driver_data;
   29c92:	6885      	ldr	r5, [r0, #8]
{
   29c94:	b086      	sub	sp, #24
	drv_data->socket = -1;
   29c96:	622b      	str	r3, [r5, #32]
   29c98:	f105 031c 	add.w	r3, r5, #28
   29c9c:	e8d3 2fef 	ldaex	r2, [r3]
   29ca0:	e8c3 4fe1 	stlex	r1, r4, [r3]
   29ca4:	2900      	cmp	r1, #0
   29ca6:	d1f9      	bne.n	29c9c <init+0x14>
	z_impl_k_sem_init(sem, initial_count, limit);
   29ca8:	2201      	movs	r2, #1
   29caa:	4621      	mov	r1, r4
   29cac:	f605 00d8 	addw	r0, r5, #2264	; 0x8d8
   29cb0:	f011 f8ba 	bl	3ae28 <z_impl_k_sem_init>
	z_impl_k_mutex_init(mutex);
   29cb4:	f105 0008 	add.w	r0, r5, #8
   29cb8:	f017 fd14 	bl	416e4 <z_impl_k_mutex_init>
	struct gps_drv_data *drv_data = dev->driver_data;
   29cbc:	68b0      	ldr	r0, [r6, #8]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   29cbe:	230a      	movs	r3, #10
   29cc0:	f100 0128 	add.w	r1, r0, #40	; 0x28
   29cc4:	e9cd 4302 	strd	r4, r3, [sp, #8]
   29cc8:	e9cd 4404 	strd	r4, r4, [sp, #16]
   29ccc:	e9cd 6400 	strd	r6, r4, [sp]
   29cd0:	4b2a      	ldr	r3, [pc, #168]	; (29d7c <init+0xf4>)
   29cd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   29cd6:	f600 0028 	addw	r0, r0, #2088	; 0x828
   29cda:	f011 fa4f 	bl	3b17c <z_impl_k_thread_create>
		err = at_cmd_write(CONFIG_NRF9160_GPS_MAGPIO_STRING,
   29cde:	4623      	mov	r3, r4
   29ce0:	4622      	mov	r2, r4
   29ce2:	4621      	mov	r1, r4
   29ce4:	4826      	ldr	r0, [pc, #152]	; (29d80 <init+0xf8>)
   29ce6:	f7ff f857 	bl	28d98 <at_cmd_write>
		if (err) {
   29cea:	4c26      	ldr	r4, [pc, #152]	; (29d84 <init+0xfc>)
   29cec:	4b26      	ldr	r3, [pc, #152]	; (29d88 <init+0x100>)
   29cee:	4605      	mov	r5, r0
   29cf0:	1ae4      	subs	r4, r4, r3
   29cf2:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   29cf6:	b168      	cbz	r0, 29d14 <init+0x8c>
			LOG_ERR("Could not confiugure MAGPIO, error: %d", err);
   29cf8:	f04f 0000 	mov.w	r0, #0
   29cfc:	2301      	movs	r3, #1
   29cfe:	462a      	mov	r2, r5
   29d00:	f363 0007 	bfi	r0, r3, #0, #8
   29d04:	4921      	ldr	r1, [pc, #132]	; (29d8c <init+0x104>)
   29d06:	f364 108f 	bfi	r0, r4, #6, #10
			LOG_ERR("Could not confiugure COEX0, error: %d", err);
   29d0a:	f015 fbba 	bl	3f482 <log_string_sync>
}
   29d0e:	4628      	mov	r0, r5
   29d10:	b006      	add	sp, #24
   29d12:	bd70      	pop	{r4, r5, r6, pc}
		LOG_DBG("MAGPIO set: %s",
   29d14:	2304      	movs	r3, #4
   29d16:	f04f 0600 	mov.w	r6, #0
   29d1a:	4819      	ldr	r0, [pc, #100]	; (29d80 <init+0xf8>)
   29d1c:	f363 0607 	bfi	r6, r3, #0, #8
   29d20:	f015 fbc1 	bl	3f4a6 <log_strdup>
   29d24:	f364 168f 	bfi	r6, r4, #6, #10
   29d28:	4603      	mov	r3, r0
   29d2a:	4a19      	ldr	r2, [pc, #100]	; (29d90 <init+0x108>)
   29d2c:	4919      	ldr	r1, [pc, #100]	; (29d94 <init+0x10c>)
   29d2e:	4630      	mov	r0, r6
   29d30:	f015 fba7 	bl	3f482 <log_string_sync>
		err = at_cmd_write(CONFIG_NRF9160_GPS_COEX0_STRING,
   29d34:	462b      	mov	r3, r5
   29d36:	462a      	mov	r2, r5
   29d38:	4629      	mov	r1, r5
   29d3a:	4817      	ldr	r0, [pc, #92]	; (29d98 <init+0x110>)
   29d3c:	f7ff f82c 	bl	28d98 <at_cmd_write>
		if (err) {
   29d40:	4605      	mov	r5, r0
   29d42:	b148      	cbz	r0, 29d58 <init+0xd0>
			LOG_ERR("Could not confiugure COEX0, error: %d", err);
   29d44:	f04f 0000 	mov.w	r0, #0
   29d48:	2301      	movs	r3, #1
   29d4a:	f363 0007 	bfi	r0, r3, #0, #8
   29d4e:	f364 108f 	bfi	r0, r4, #6, #10
   29d52:	462a      	mov	r2, r5
   29d54:	4911      	ldr	r1, [pc, #68]	; (29d9c <init+0x114>)
   29d56:	e7d8      	b.n	29d0a <init+0x82>
		LOG_DBG("COEX0 set: %s",
   29d58:	2304      	movs	r3, #4
   29d5a:	f04f 0600 	mov.w	r6, #0
   29d5e:	480e      	ldr	r0, [pc, #56]	; (29d98 <init+0x110>)
   29d60:	f363 0607 	bfi	r6, r3, #0, #8
   29d64:	f015 fb9f 	bl	3f4a6 <log_strdup>
   29d68:	f364 168f 	bfi	r6, r4, #6, #10
   29d6c:	4603      	mov	r3, r0
   29d6e:	4a08      	ldr	r2, [pc, #32]	; (29d90 <init+0x108>)
   29d70:	490b      	ldr	r1, [pc, #44]	; (29da0 <init+0x118>)
   29d72:	4630      	mov	r0, r6
   29d74:	f015 fb85 	bl	3f482 <log_string_sync>
	return 0;
   29d78:	e7c9      	b.n	29d0e <init+0x86>
   29d7a:	bf00      	nop
   29d7c:	000297b9 	.word	0x000297b9
   29d80:	0004999f 	.word	0x0004999f
   29d84:	0004306c 	.word	0x0004306c
   29d88:	00042fb4 	.word	0x00042fb4
   29d8c:	000499be 	.word	0x000499be
   29d90:	0004984f 	.word	0x0004984f
   29d94:	000499e5 	.word	0x000499e5
   29d98:	000499f8 	.word	0x000499f8
   29d9c:	00049a10 	.word	0x00049a10
   29da0:	00049a36 	.word	0x00049a36

00029da4 <ip_client_event_handler>:
   29da4:	1b08f850 	.word	0x1b08f850
   29da8:	f0060c09 	.word	0xf0060c09
   29dac:	bf00bc4d 	.word	0xbf00bc4d

00029db0 <rpc_ip_client_init>:
   29db0:	f00b4801 	.word	0xf00b4801
   29db4:	bf00bc01 	.word	0xbf00bc01
   29db8:	00043a9c 	.word	0x00043a9c

00029dbc <rpc_ip_client_request_alloc>:
   29dbc:	b5102300 	.word	0xb5102300
   29dc0:	9301b082 	.word	0x9301b082
   29dc4:	4604b158 	.word	0x4604b158
   29dc8:	2004aa01 	.word	0x2004aa01
   29dcc:	fe2cf00b 	.word	0xfe2cf00b
   29dd0:	9b01b918 	.word	0x9b01b918
   29dd4:	3308b10b 	.word	0x3308b10b
   29dd8:	b0026023 	.word	0xb0026023
   29ddc:	2007bd10 	.word	0x2007bd10
   29de0:	bd10b002 	.word	0xbd10b002

00029de4 <rpc_ip_client_request_send>:
   29de4:	4370f401 	.word	0x4370f401
   29de8:	4fe0f5b3 	.word	0x4fe0f5b3
   29dec:	b160d10b 	.word	0xb160d10b
   29df0:	f8304603 	.word	0xf8304603
   29df4:	20042c08 	.word	0x20042c08
   29df8:	4101ea42 	.word	0x4101ea42
   29dfc:	1d08f843 	.word	0x1d08f843
   29e00:	f00b4619 	.word	0xf00b4619
   29e04:	200fbdf9 	.word	0x200fbdf9
   29e08:	20074770 	.word	0x20074770
   29e0c:	bf004770 	.word	0xbf004770

00029e10 <rpc_ip_client_message_free>:
   29e10:	f1a0b120 	.word	0xf1a0b120
   29e14:	20040108 	.word	0x20040108
   29e18:	be38f00b 	.word	0xbe38f00b
   29e1c:	47702007 	.word	0x47702007

00029e20 <rpc_ip_client_data_free>:
   29e20:	4601b118 	.word	0x4601b118
   29e24:	f00b2004 	.word	0xf00b2004
   29e28:	2007bf43 	.word	0x2007bf43
   29e2c:	bf004770 	.word	0xbf004770

00029e30 <symbol_0001c77>:
   29e30:	4603b430 	.word	0x4603b430
   29e34:	f5b26800 	.word	0xf5b26800
   29e38:	eba03f80 	.word	0xeba03f80
   29e3c:	d2140101 	.word	0xd2140101
   29e40:	dd512902 	.word	0xdd512902
   29e44:	60191e41 	.word	0x60191e41
   29e48:	2c01f800 	.word	0x2c01f800
   29e4c:	24826819 	.word	0x24826819
   29e50:	60181e48 	.word	0x60181e48
   29e54:	0a122003 	.word	0x0a122003
   29e58:	2c01f801 	.word	0x2c01f801
   29e5c:	1e51681a 	.word	0x1e51681a
   29e60:	f8026019 	.word	0xf8026019
   29e64:	bc304c01 	.word	0xbc304c01
   29e68:	f1b24770 	.word	0xf1b24770
   29e6c:	d21a7f80 	.word	0xd21a7f80
   29e70:	dd392903 	.word	0xdd392903
   29e74:	1e412483 	.word	0x1e412483
   29e78:	f8006019 	.word	0xf8006019
   29e7c:	68192c01 	.word	0x68192c01
   29e80:	1e4d0a10 	.word	0x1e4d0a10
   29e84:	f801601d 	.word	0xf801601d
   29e88:	68190c01 	.word	0x68190c01
   29e8c:	1e480c12 	.word	0x1e480c12
   29e90:	f8016018 	.word	0xf8016018
   29e94:	681a2c01 	.word	0x681a2c01
   29e98:	1e512004 	.word	0x1e512004
   29e9c:	f8026019 	.word	0xf8026019
   29ea0:	bc304c01 	.word	0xbc304c01
   29ea4:	29044770 	.word	0x29044770
   29ea8:	2484dd1e 	.word	0x2484dd1e
   29eac:	60191e41 	.word	0x60191e41
   29eb0:	2c01f800 	.word	0x2c01f800
   29eb4:	0a106819 	.word	0x0a106819
   29eb8:	601d1e4d 	.word	0x601d1e4d
   29ebc:	0c01f801 	.word	0x0c01f801
   29ec0:	0c106819 	.word	0x0c106819
   29ec4:	601d1e4d 	.word	0x601d1e4d
   29ec8:	0c01f801 	.word	0x0c01f801
   29ecc:	0e126819 	.word	0x0e126819
   29ed0:	60181e48 	.word	0x60181e48
   29ed4:	2c01f801 	.word	0x2c01f801
   29ed8:	2005681a 	.word	0x2005681a
   29edc:	60191e51 	.word	0x60191e51
   29ee0:	4c01f802 	.word	0x4c01f802
   29ee4:	4770bc30 	.word	0x4770bc30
   29ee8:	006bf06f 	.word	0x006bf06f
   29eec:	bf00e7bb 	.word	0xbf00e7bb

00029ef0 <symbol_000646e>:
   29ef0:	6804b430 	.word	0x6804b430
   29ef4:	46032a7f 	.word	0x46032a7f
   29ef8:	0101eba4 	.word	0x0101eba4
   29efc:	2900d808 	.word	0x2900d808
   29f00:	1e61dd6c 	.word	0x1e61dd6c
   29f04:	20016001 	.word	0x20016001
   29f08:	2c01f804 	.word	0x2c01f804
   29f0c:	4770bc30 	.word	0x4770bc30
   29f10:	d80e2aff 	.word	0xd80e2aff
   29f14:	dd612901 	.word	0xdd612901
   29f18:	1e602181 	.word	0x1e602181
   29f1c:	f8046018 	.word	0xf8046018
   29f20:	681a2c01 	.word	0x681a2c01
   29f24:	1e542002 	.word	0x1e542002
   29f28:	f802601c 	.word	0xf802601c
   29f2c:	bc301c01 	.word	0xbc301c01
   29f30:	f5b24770 	.word	0xf5b24770
   29f34:	d31c3f80 	.word	0xd31c3f80
   29f38:	7f80f1b2 	.word	0x7f80f1b2
   29f3c:	2903d22e 	.word	0x2903d22e
   29f40:	2583dd4c 	.word	0x2583dd4c
   29f44:	60011e61 	.word	0x60011e61
   29f48:	2c01f804 	.word	0x2c01f804
   29f4c:	0a106801 	.word	0x0a106801
   29f50:	601c1e4c 	.word	0x601c1e4c
   29f54:	0c01f801 	.word	0x0c01f801
   29f58:	0c126819 	.word	0x0c126819
   29f5c:	60181e48 	.word	0x60181e48
   29f60:	2c01f801 	.word	0x2c01f801
   29f64:	2004681a 	.word	0x2004681a
   29f68:	60191e51 	.word	0x60191e51
   29f6c:	5c01f802 	.word	0x5c01f802
   29f70:	2902e7cc 	.word	0x2902e7cc
   29f74:	2582dd32 	.word	0x2582dd32
   29f78:	60011e61 	.word	0x60011e61
   29f7c:	2c01f804 	.word	0x2c01f804
   29f80:	0a126801 	.word	0x0a126801
   29f84:	60181e48 	.word	0x60181e48
   29f88:	2c01f801 	.word	0x2c01f801
   29f8c:	2003681a 	.word	0x2003681a
   29f90:	60191e51 	.word	0x60191e51
   29f94:	5c01f802 	.word	0x5c01f802
   29f98:	4770bc30 	.word	0x4770bc30
   29f9c:	dd1d2904 	.word	0xdd1d2904
   29fa0:	1e612584 	.word	0x1e612584
   29fa4:	f8046001 	.word	0xf8046001
   29fa8:	68012c01 	.word	0x68012c01
   29fac:	1e4c0a10 	.word	0x1e4c0a10
   29fb0:	f801601c 	.word	0xf801601c
   29fb4:	68190c01 	.word	0x68190c01
   29fb8:	1e4c0c10 	.word	0x1e4c0c10
   29fbc:	f801601c 	.word	0xf801601c
   29fc0:	68190c01 	.word	0x68190c01
   29fc4:	1e480e12 	.word	0x1e480e12
   29fc8:	f8016018 	.word	0xf8016018
   29fcc:	681a2c01 	.word	0x681a2c01
   29fd0:	1e512005 	.word	0x1e512005
   29fd4:	f8026019 	.word	0xf8026019
   29fd8:	e7975c01 	.word	0xe7975c01
   29fdc:	006bf06f 	.word	0x006bf06f
   29fe0:	bf00e794 	.word	0xbf00e794

00029fe4 <symbol_00036c0>:
   29fe4:	1a596803 	.word	0x1a596803
   29fe8:	dd052900 	.word	0xdd052900
   29fec:	60011e59 	.word	0x60011e59
   29ff0:	f8032001 	.word	0xf8032001
   29ff4:	47702c01 	.word	0x47702c01
   29ff8:	006bf06f 	.word	0x006bf06f
   29ffc:	bf004770 	.word	0xbf004770

0002a000 <symbol_0008475>:
   2a000:	6805b5f8 	.word	0x6805b5f8
   2a004:	d83f42a9 	.word	0xd83f42a9
   2a008:	1a69460f 	.word	0x1a69460f
   2a00c:	d83b428b 	.word	0xd83b428b
   2a010:	461c4606 	.word	0x461c4606
   2a014:	46111ae8 	.word	0x46111ae8
   2a018:	461a6030 	.word	0x461a6030
   2a01c:	fcc9f017 	.word	0xfcc9f017
   2a020:	46202c00 	.word	0x46202c00
   2a024:	2c7fdb15 	.word	0x2c7fdb15
   2a028:	6833d814 	.word	0x6833d814
   2a02c:	2a001bda 	.word	0x2a001bda
   2a030:	2001dd2a 	.word	0x2001dd2a
   2a034:	60321e5a 	.word	0x60321e5a
   2a038:	4c01f803 	.word	0x4c01f803
   2a03c:	34016833 	.word	0x34016833
   2a040:	2f001bdf 	.word	0x2f001bdf
   2a044:	2206dd20 	.word	0x2206dd20
   2a048:	60311e59 	.word	0x60311e59
   2a04c:	f8034420 	.word	0xf8034420
   2a050:	bdf82c01 	.word	0xbdf82c01
   2a054:	d80f2cff 	.word	0xd80f2cff
   2a058:	1bda6833 	.word	0x1bda6833
   2a05c:	dd132a01 	.word	0xdd132a01
   2a060:	1e592281 	.word	0x1e592281
   2a064:	f8036031 	.word	0xf8036031
   2a068:	68334c01 	.word	0x68334c01
   2a06c:	1e592002 	.word	0x1e592002
   2a070:	f8036031 	.word	0xf8036031
   2a074:	e7e12c01 	.word	0xe7e12c01
   2a078:	46394622 	.word	0x46394622
   2a07c:	f7ff4630 	.word	0xf7ff4630
   2a080:	2800fed7 	.word	0x2800fed7
   2a084:	bdf8dada 	.word	0xbdf8dada
   2a088:	006bf06f 	.word	0x006bf06f
   2a08c:	bf00bdf8 	.word	0xbf00bdf8

0002a090 <symbol_0002662>:
   2a090:	41f0e92d 	.word	0x41f0e92d
   2a094:	8018f8dd 	.word	0x8018f8dd
   2a098:	f1b86805 	.word	0xf1b86805
   2a09c:	d1130f00 	.word	0xd1130f00
   2a0a0:	2c001a6c 	.word	0x2c001a6c
   2a0a4:	8087f340 	.word	0x8087f340
   2a0a8:	60041e6c 	.word	0x60041e6c
   2a0ac:	8c01f805 	.word	0x8c01f805
   2a0b0:	1a656804 	.word	0x1a656804
   2a0b4:	dd7e2d00 	.word	0xdd7e2d00
   2a0b8:	f04f2505 	.word	0xf04f2505
   2a0bc:	1e660802 	.word	0x1e660802
   2a0c0:	f8046006 	.word	0xf8046006
   2a0c4:	68055c01 	.word	0x68055c01
   2a0c8:	d87442a9 	.word	0xd87442a9
   2a0cc:	42a31a6c 	.word	0x42a31a6c
   2a0d0:	4606d871 	.word	0x4606d871
   2a0d4:	1ae8461c 	.word	0x1ae8461c
   2a0d8:	6030460f 	.word	0x6030460f
   2a0dc:	461a4611 	.word	0x461a4611
   2a0e0:	fc67f017 	.word	0xfc67f017
   2a0e4:	46202c00 	.word	0x46202c00
   2a0e8:	2c7fdb2f 	.word	0x2c7fdb2f
   2a0ec:	6833d841 	.word	0x6833d841
   2a0f0:	2a001bda 	.word	0x2a001bda
   2a0f4:	2001dd5f 	.word	0x2001dd5f
   2a0f8:	60321e5a 	.word	0x60321e5a
   2a0fc:	4c01f803 	.word	0x4c01f803
   2a100:	34016833 	.word	0x34016833
   2a104:	2a001bda 	.word	0x2a001bda
   2a108:	2206dd55 	.word	0x2206dd55
   2a10c:	1e594404 	.word	0x1e594404
   2a110:	60312c00 	.word	0x60312c00
   2a114:	f8034620 	.word	0xf8034620
   2a118:	db162c01 	.word	0xdb162c01
   2a11c:	2c7f4444 	.word	0x2c7f4444
   2a120:	6833d815 	.word	0x6833d815
   2a124:	2a001bda 	.word	0x2a001bda
   2a128:	2001dd45 	.word	0x2001dd45
   2a12c:	60321e5a 	.word	0x60321e5a
   2a130:	4c01f803 	.word	0x4c01f803
   2a134:	34016833 	.word	0x34016833
   2a138:	2f001bdf 	.word	0x2f001bdf
   2a13c:	2230dd3b 	.word	0x2230dd3b
   2a140:	60311e59 	.word	0x60311e59
   2a144:	f8034420 	.word	0xf8034420
   2a148:	e8bd2c01 	.word	0xe8bd2c01
   2a14c:	2cff81f0 	.word	0x2cff81f0
   2a150:	6833d821 	.word	0x6833d821
   2a154:	2a011bda 	.word	0x2a011bda
   2a158:	2281dd2d 	.word	0x2281dd2d
   2a15c:	60311e59 	.word	0x60311e59
   2a160:	4c01f803 	.word	0x4c01f803
   2a164:	20026833 	.word	0x20026833
   2a168:	60311e59 	.word	0x60311e59
   2a16c:	2c01f803 	.word	0x2c01f803
   2a170:	2cffe7e0 	.word	0x2cffe7e0
   2a174:	6833d817 	.word	0x6833d817
   2a178:	2a011bda 	.word	0x2a011bda
   2a17c:	2281dd1b 	.word	0x2281dd1b
   2a180:	60311e59 	.word	0x60311e59
   2a184:	4c01f803 	.word	0x4c01f803
   2a188:	20026833 	.word	0x20026833
   2a18c:	60311e59 	.word	0x60311e59
   2a190:	2c01f803 	.word	0x2c01f803
   2a194:	4622e7b4 	.word	0x4622e7b4
   2a198:	46304639 	.word	0x46304639
   2a19c:	fe48f7ff 	.word	0xfe48f7ff
   2a1a0:	dbd22800 	.word	0xdbd22800
   2a1a4:	4622e7c6 	.word	0x4622e7c6
   2a1a8:	46304639 	.word	0x46304639
   2a1ac:	fe40f7ff 	.word	0xfe40f7ff
   2a1b0:	daa52800 	.word	0xdaa52800
   2a1b4:	f06fe7c9 	.word	0xf06fe7c9
   2a1b8:	e7c6006b 	.word	0xe7c6006b

0002a1bc <symbol_0005bf5>:
   2a1bc:	4ff0e92d 	.word	0x4ff0e92d
   2a1c0:	b0d72400 	.word	0xb0d72400
   2a1c4:	73abf50d 	.word	0x73abf50d
   2a1c8:	46914688 	.word	0x46914688
   2a1cc:	4306e9cd 	.word	0x4306e9cd
   2a1d0:	f0014607 	.word	0xf0014607
   2a1d4:	2802f9a9 	.word	0x2802f9a9
   2a1d8:	2385d159 	.word	0x2385d159
   2a1dc:	ae0b6878 	.word	0xae0b6878
   2a1e0:	46229301 	.word	0x46229301
   2a1e4:	0188f100 	.word	0x0188f100
   2a1e8:	ab0a9600 	.word	0xab0a9600
   2a1ec:	f004940a 	.word	0xf004940a
   2a1f0:	ad2dfca7 	.word	0xad2dfca7
   2a1f4:	b9684604 	.word	0xb9684604
   2a1f8:	42a89807 	.word	0x42a89807
   2a1fc:	9a0ad37f 	.word	0x9a0ad37f
   2a200:	42931b43 	.word	0x42931b43
   2a204:	1a83d37b 	.word	0x1a83d37b
   2a208:	46314618 	.word	0x46314618
   2a20c:	f0179307 	.word	0xf0179307
   2a210:	9c0afbd0 	.word	0x9c0afbd0
   2a214:	db312c00 	.word	0xdb312c00
   2a218:	1b5a9b07 	.word	0x1b5a9b07
   2a21c:	dd6e2a00 	.word	0xdd6e2a00
   2a220:	1e5a2100 	.word	0x1e5a2100
   2a224:	0a01f104 	.word	0x0a01f104
   2a228:	a8079207 	.word	0xa8079207
   2a22c:	1c01f803 	.word	0x1c01f803
   2a230:	46294652 	.word	0x46294652
   2a234:	fe5cf7ff 	.word	0xfe5cf7ff
   2a238:	db1f1e04 	.word	0xdb1f1e04
   2a23c:	46292203 	.word	0x46292203
   2a240:	f7ffa807 	.word	0xf7ffa807
   2a244:	f1b0fecf 	.word	0xf1b0fecf
   2a248:	db1b0b00 	.word	0xdb1b0b00
   2a24c:	f0014638 	.word	0xf0014638
   2a250:	aa08f96b 	.word	0xaa08f96b
   2a254:	f00ba909 	.word	0xf00ba909
   2a258:	4603fe3b 	.word	0x4603fe3b
   2a25c:	2b00b1c8 	.word	0x2b00b1c8
   2a260:	f1c3db50 	.word	0xf1c3db50
   2a264:	a90602a2 	.word	0xa90602a2
   2a268:	9101e9cd 	.word	0x9101e9cd
   2a26c:	8000f8cd 	.word	0x8000f8cd
   2a270:	4925442a 	.word	0x4925442a
   2a274:	f0054825 	.word	0xf0054825
   2a278:	4604f8b1 	.word	0x4604f8b1
   2a27c:	b0574620 	.word	0xb0574620
   2a280:	8ff0e8bd 	.word	0x8ff0e8bd
   2a284:	4620465c 	.word	0x4620465c
   2a288:	e8bdb057 	.word	0xe8bdb057
   2a28c:	4c208ff0 	.word	0x4c208ff0
   2a290:	9005e7f4 	.word	0x9005e7f4
   2a294:	f0014638 	.word	0xf0014638
   2a298:	2802f947 	.word	0x2802f947
   2a29c:	d01d9b05 	.word	0xd01d9b05
   2a2a0:	e9dd4618 	.word	0xe9dd4618
   2a2a4:	90003208 	.word	0x90003208
   2a2a8:	a8074629 	.word	0xa8074629
   2a2ac:	fef0f7ff 	.word	0xfef0f7ff
   2a2b0:	db222800 	.word	0xdb222800
   2a2b4:	44a34454 	.word	0x44a34454
   2a2b8:	465a4483 	.word	0x465a4483
   2a2bc:	a8074629 	.word	0xa8074629
   2a2c0:	fe16f7ff 	.word	0xfe16f7ff
   2a2c4:	dbd91e04 	.word	0xdbd91e04
   2a2c8:	2230a807 	.word	0x2230a807
   2a2cc:	f7ff4629 	.word	0xf7ff4629
   2a2d0:	1e03fe89 	.word	0x1e03fe89
   2a2d4:	44a3db16 	.word	0x44a3db16
   2a2d8:	e7c0445b 	.word	0xe7c0445b
   2a2dc:	4632687b 	.word	0x4632687b
   2a2e0:	a90a7818 	.word	0xa90a7818
   2a2e4:	fe10f00b 	.word	0xfe10f00b
   2a2e8:	6833b928 	.word	0x6833b928
   2a2ec:	46299a0a 	.word	0x46299a0a
   2a2f0:	f7ffa807 	.word	0xf7ffa807
   2a2f4:	2800fe85 	.word	0x2800fe85
   2a2f8:	4604dad3 	.word	0x4604dad3
   2a2fc:	f06fe7be 	.word	0xf06fe7be
   2a300:	e7bb046b 	.word	0xe7bb046b
   2a304:	e7b9461c 	.word	0xe7b9461c
   2a308:	00043aac 	.word	0x00043aac
   2a30c:	00043ac8 	.word	0x00043ac8
   2a310:	ffffc680 	.word	0xffffc680

0002a314 <authenticated_atcmd_init>:
   2a314:	4c3bb5f0 	.word	0x4c3bb5f0
   2a318:	6826b0c7 	.word	0x6826b0c7
   2a31c:	2701bb16 	.word	0x2701bb16
   2a320:	60274839 	.word	0x60274839
   2a324:	fddef7ef 	.word	0xfddef7ef
   2a328:	f5c04605 	.word	0xf5c04605
   2a32c:	46317380 	.word	0x46317380
   2a330:	7280f44f 	.word	0x7280f44f
   2a334:	9302a806 	.word	0x9302a806
   2a338:	fb5bf017 	.word	0xfb5bf017
   2a33c:	4932462a 	.word	0x4932462a
   2a340:	f017a806 	.word	0xf017a806
   2a344:	aa06fb36 	.word	0xaa06fb36
   2a348:	ab029700 	.word	0xab029700
   2a34c:	2120442a 	.word	0x2120442a
   2a350:	f00b482e 	.word	0xf00b482e
   2a354:	4606f839 	.word	0x4606f839
   2a358:	2300b138 	.word	0x2300b138
   2a35c:	60232023 	.word	0x60232023
   2a360:	bdf0b047 	.word	0xbdf0b047
   2a364:	b047200e 	.word	0xb047200e
   2a368:	2022bdf0 	.word	0x2022bdf0
   2a36c:	60279b02 	.word	0x60279b02
   2a370:	af06441d 	.word	0xaf06441d
   2a374:	5578ab06 	.word	0x5578ab06
   2a378:	f240442b 	.word	0xf240442b
   2a37c:	21022201 	.word	0x21022201
   2a380:	705e2066 	.word	0x705e2066
   2a384:	f9c6f000 	.word	0xf9c6f000
   2a388:	dbe61e07 	.word	0xdbe61e07
   2a38c:	f7ef4820 	.word	0xf7ef4820
   2a390:	4633fda9 	.word	0x4633fda9
   2a394:	491e4602 	.word	0x491e4602
   2a398:	6600e9cd 	.word	0x6600e9cd
   2a39c:	f0004638 	.word	0xf0004638
   2a3a0:	3502f963 	.word	0x3502f963
   2a3a4:	4633a903 	.word	0x4633a903
   2a3a8:	e9cd220a 	.word	0xe9cd220a
   2a3ac:	46386600 	.word	0x46386600
   2a3b0:	fa42f000 	.word	0xfa42f000
   2a3b4:	6600e9cd 	.word	0x6600e9cd
   2a3b8:	462aa906 	.word	0x462aa906
   2a3bc:	46384633 	.word	0x46384633
   2a3c0:	f952f000 	.word	0xf952f000
   2a3c4:	d00342a8 	.word	0xd00342a8
   2a3c8:	f0004638 	.word	0xf0004638
   2a3cc:	e7c4f9ed 	.word	0xe7c4f9ed
   2a3d0:	6600e9cd 	.word	0x6600e9cd
   2a3d4:	220a4633 	.word	0x220a4633
   2a3d8:	4638a903 	.word	0x4638a903
   2a3dc:	fa2cf000 	.word	0xfa2cf000
   2a3e0:	ddf12801 	.word	0xddf12801
   2a3e4:	2202a803 	.word	0x2202a803
   2a3e8:	f017490a 	.word	0xf017490a
   2a3ec:	4605fcdb 	.word	0x4605fcdb
   2a3f0:	d1e92800 	.word	0xd1e92800
   2a3f4:	46382302 	.word	0x46382302
   2a3f8:	f0006023 	.word	0xf0006023
   2a3fc:	4628f9d5 	.word	0x4628f9d5
   2a400:	bf00e7ae 	.word	0xbf00e7ae
   2a404:	20024990 	.word	0x20024990
   2a408:	00043ae4 	.word	0x00043ae4
   2a40c:	2002c8bc 	.word	0x2002c8bc
   2a410:	00043af4 	.word	0x00043af4
   2a414:	00043b04 	.word	0x00043b04

0002a418 <authenticated_atcmd_shutdown>:
   2a418:	4b012200 	.word	0x4b012200
   2a41c:	4770601a 	.word	0x4770601a
   2a420:	20024990 	.word	0x20024990

0002a424 <gnss_client_event_handler>:
   2a424:	1b08f850 	.word	0x1b08f850
   2a428:	f0060c09 	.word	0xf0060c09
   2a42c:	bf00bee9 	.word	0xbf00bee9

0002a430 <rpc_gnss_client_init>:
   2a430:	f00b4801 	.word	0xf00b4801
   2a434:	bf00b8c1 	.word	0xbf00b8c1
   2a438:	00043b8c 	.word	0x00043b8c

0002a43c <rpc_gnss_client_request_alloc>:
   2a43c:	b5102300 	.word	0xb5102300
   2a440:	9301b082 	.word	0x9301b082
   2a444:	4604b158 	.word	0x4604b158
   2a448:	2007aa01 	.word	0x2007aa01
   2a44c:	faecf00b 	.word	0xfaecf00b
   2a450:	9b01b918 	.word	0x9b01b918
   2a454:	3308b10b 	.word	0x3308b10b
   2a458:	b0026023 	.word	0xb0026023
   2a45c:	2007bd10 	.word	0x2007bd10
   2a460:	bd10b002 	.word	0xbd10b002

0002a464 <rpc_gnss_client_request_send>:
   2a464:	4370f401 	.word	0x4370f401
   2a468:	5f80f5b3 	.word	0x5f80f5b3
   2a46c:	b160d10b 	.word	0xb160d10b
   2a470:	f8304603 	.word	0xf8304603
   2a474:	20072c08 	.word	0x20072c08
   2a478:	4101ea42 	.word	0x4101ea42
   2a47c:	1d08f843 	.word	0x1d08f843
   2a480:	f00b4619 	.word	0xf00b4619
   2a484:	200fbab9 	.word	0x200fbab9
   2a488:	20074770 	.word	0x20074770
   2a48c:	bf004770 	.word	0xbf004770

0002a490 <rpc_gnss_client_message_free>:
   2a490:	f1a0b120 	.word	0xf1a0b120
   2a494:	20070108 	.word	0x20070108
   2a498:	baf8f00b 	.word	0xbaf8f00b
   2a49c:	47702007 	.word	0x47702007

0002a4a0 <rpc_gnss_client_data_free>:
   2a4a0:	4601b118 	.word	0x4601b118
   2a4a4:	f00b2007 	.word	0xf00b2007
   2a4a8:	2007bc03 	.word	0x2007bc03
   2a4ac:	bf004770 	.word	0xbf004770

0002a4b0 <eckey_can_do>:
   2a4b0:	28023802 	.word	0x28023802
   2a4b4:	2000bf8c 	.word	0x2000bf8c
   2a4b8:	47702001 	.word	0x47702001

0002a4bc <eckey_get_bitlen>:
   2a4bc:	47706d80 	.word	0x47706d80

0002a4c0 <eckey_debug>:
   2a4c0:	4b032202 	.word	0x4b032202
   2a4c4:	60883088 	.word	0x60883088
   2a4c8:	604b700a 	.word	0x604b700a
   2a4cc:	bf004770 	.word	0xbf004770
   2a4d0:	00043b9c 	.word	0x00043b9c

0002a4d4 <eckeydh_can_do>:
   2a4d4:	28013802 	.word	0x28013802
   2a4d8:	2000bf8c 	.word	0x2000bf8c
   2a4dc:	47702001 	.word	0x47702001

0002a4e0 <eckey_free_wrap>:
   2a4e0:	4604b510 	.word	0x4604b510
   2a4e4:	fd24f003 	.word	0xfd24f003
   2a4e8:	e8bd4620 	.word	0xe8bd4620
   2a4ec:	f00c4010 	.word	0xf00c4010
   2a4f0:	bf00b947 	.word	0xbf00b947

0002a4f4 <eckey_alloc_wrap>:
   2a4f4:	21acb510 	.word	0x21acb510
   2a4f8:	f00c2001 	.word	0xf00c2001
   2a4fc:	4604f92d 	.word	0x4604f92d
   2a500:	f003b108 	.word	0xf003b108
   2a504:	4620fcaf 	.word	0x4620fcaf
   2a508:	bf00bd10 	.word	0xbf00bd10

0002a50c <eckey_check_pair>:
   2a50c:	bc88f004 	.word	0xbc88f004

0002a510 <symbol_0005c7f>:
   2a510:	4ff0e92d 	.word	0x4ff0e92d
   2a514:	c024f8dd 	.word	0xc024f8dd
   2a518:	0f00f1bc 	.word	0x0f00f1bc
   2a51c:	4c42d065 	.word	0x4c42d065
   2a520:	540cfba4 	.word	0x540cfba4
   2a524:	eb040864 	.word	0xeb040864
   2a528:	45c40844 	.word	0x45c40844
   2a52c:	3401bf18 	.word	0x3401bf18
   2a530:	4f80f1b4 	.word	0x4f80f1b4
   2a534:	00a4d271 	.word	0x00a4d271
   2a538:	428c3401 	.word	0x428c3401
   2a53c:	2800d869 	.word	0x2800d869
   2a540:	f1b8d067 	.word	0xf1b8d067
   2a544:	d0610f00 	.word	0xd0610f00
   2a548:	27004686 	.word	0x27004686
   2a54c:	1cdc4e37 	.word	0x1cdc4e37
   2a550:	f8142500 	.word	0xf8142500
   2a554:	f8141c03 	.word	0xf8141c03
   2a558:	f8143c02 	.word	0xf8143c02
   2a55c:	ea4fbc01 	.word	0xea4fbc01
   2a560:	010909a1 	.word	0x010909a1
   2a564:	0130f001 	.word	0x0130f001
   2a568:	1a13eb06 	.word	0x1a13eb06
   2a56c:	9009f816 	.word	0x9009f816
   2a570:	f81a009b 	.word	0xf81a009b
   2a574:	f003a001 	.word	0xf003a001
   2a578:	eb06013c 	.word	0xeb06013c
   2a57c:	5c59139b 	.word	0x5c59139b
   2a580:	0507f369 	.word	0x0507f369
   2a584:	033ff00b 	.word	0x033ff00b
   2a588:	f36a5cf3 	.word	0xf36a5cf3
   2a58c:	f361250f 	.word	0xf361250f
   2a590:	37034517 	.word	0x37034517
   2a594:	651ff363 	.word	0x651ff363
   2a598:	0104f10e 	.word	0x0104f10e
   2a59c:	f8ce45b8 	.word	0xf8ce45b8
   2a5a0:	46235000 	.word	0x46235000
   2a5a4:	f104468e 	.word	0xf104468e
   2a5a8:	d8d10403 	.word	0xd8d10403
   2a5ac:	d91445bc 	.word	0xd91445bc
   2a5b0:	4d1e781c 	.word	0x4d1e781c
   2a5b4:	10a63701 	.word	0x10a63701
   2a5b8:	ea4f4567 	.word	0xea4f4567
   2a5bc:	f0041404 	.word	0xf0041404
   2a5c0:	f8150430 	.word	0xf8150430
   2a5c4:	d315e006 	.word	0xd315e006
   2a5c8:	5d2b263d 	.word	0x5d2b263d
   2a5cc:	e000f881 	.word	0xe000f881
   2a5d0:	233d704b 	.word	0x233d704b
   2a5d4:	70cb708e 	.word	0x70cb708e
   2a5d8:	23003104 	.word	0x23003104
   2a5dc:	1a08469c 	.word	0x1a08469c
   2a5e0:	700b6010 	.word	0x700b6010
   2a5e4:	e8bd4660 	.word	0xe8bd4660
   2a5e8:	f8c28ff0 	.word	0xf8c28ff0
   2a5ec:	4660c000 	.word	0x4660c000
   2a5f0:	8ff0e8bd 	.word	0x8ff0e8bd
   2a5f4:	f881785b 	.word	0xf881785b
   2a5f8:	eb05e000 	.word	0xeb05e000
   2a5fc:	5d341613 	.word	0x5d341613
   2a600:	f003009b 	.word	0xf003009b
   2a604:	704c033c 	.word	0x704c033c
   2a608:	e7e25cee 	.word	0xe7e25cee
   2a60c:	46014647 	.word	0x46014647
   2a610:	6014e7cc 	.word	0x6014e7cc
   2a614:	0c29f06f 	.word	0x0c29f06f
   2a618:	f04fe7e4 	.word	0xf04fe7e4
   2a61c:	f06f33ff 	.word	0xf06f33ff
   2a620:	60130c29 	.word	0x60130c29
   2a624:	bf00e7de 	.word	0xbf00e7de
   2a628:	aaaaaaab 	.word	0xaaaaaaab
   2a62c:	00043c04 	.word	0x00043c04

0002a630 <packet_free_cb>:
   2a630:	f0006800 	.word	0xf0006800
   2a634:	bf00b9eb 	.word	0xbf00b9eb

0002a638 <packet_free_cb>:
   2a638:	4604b510 	.word	0x4604b510
   2a63c:	f0066800 	.word	0xf0066800
   2a640:	68a0faaf 	.word	0x68a0faaf
   2a644:	e8bdb118 	.word	0xe8bdb118
   2a648:	f00c4010 	.word	0xf00c4010
   2a64c:	bd10b899 	.word	0xbd10b899

0002a650 <packet_free_cb>:
   2a650:	4604b510 	.word	0x4604b510
   2a654:	f7ff6800 	.word	0xf7ff6800
   2a658:	68a0ff23 	.word	0x68a0ff23
   2a65c:	e8bdb118 	.word	0xe8bdb118
   2a660:	f00c4010 	.word	0xf00c4010
   2a664:	bd10b88d 	.word	0xbd10b88d

0002a668 <at_interface_write>:
   2a668:	b083b5f0 	.word	0xb083b5f0
   2a66c:	4615460f 	.word	0x4615460f
   2a670:	f0044606 	.word	0xf0044606
   2a674:	2800fdcf 	.word	0x2800fdcf
   2a678:	6803d047 	.word	0x6803d047
   2a67c:	039b4604 	.word	0x039b4604
   2a680:	6803d543 	.word	0x6803d543
   2a684:	f4234629 	.word	0xf4234629
   2a688:	60033300 	.word	0x60033300
   2a68c:	a8016803 	.word	0xa8016803
   2a690:	1300f443 	.word	0x1300f443
   2a694:	f0006023 	.word	0xf0006023
   2a698:	bba0f98f 	.word	0xbba0f98f
   2a69c:	9b012204 	.word	0x9b012204
   2a6a0:	7258721a 	.word	0x7258721a
   2a6a4:	72d87298 	.word	0x72d87298
   2a6a8:	b98560de 	.word	0xb98560de
   2a6ac:	21014618 	.word	0x21014618
   2a6b0:	f996f000 	.word	0xf996f000
   2a6b4:	f44fb9d0 	.word	0xf44fb9d0
   2a6b8:	46303200 	.word	0x46303200
   2a6bc:	f04f4611 	.word	0xf04f4611
   2a6c0:	f00433ff 	.word	0xf00433ff
   2a6c4:	b9a8fd3b 	.word	0xb9a8fd3b
   2a6c8:	b0034628 	.word	0xb0034628
   2a6cc:	4639bdf0 	.word	0x4639bdf0
   2a6d0:	462a6818 	.word	0x462a6818
   2a6d4:	f96df017 	.word	0xf96df017
   2a6d8:	98012101 	.word	0x98012101
   2a6dc:	f980f000 	.word	0xf980f000
   2a6e0:	d0e82800 	.word	0xd0e82800
   2a6e4:	68189b01 	.word	0x68189b01
   2a6e8:	f990f000 	.word	0xf990f000
   2a6ec:	f0009801 	.word	0xf0009801
   2a6f0:	2023f985 	.word	0x2023f985
   2a6f4:	f4436823 	.word	0xf4436823
   2a6f8:	60233300 	.word	0x60233300
   2a6fc:	fda6f7f8 	.word	0xfda6f7f8
   2a700:	30fff04f 	.word	0x30fff04f
   2a704:	200ce7e1 	.word	0x200ce7e1
   2a708:	2016e7f4 	.word	0x2016e7f4
   2a70c:	bf00e7f6 	.word	0xbf00e7f6

0002a710 <at_interface_init>:
   2a710:	b94cf000 	.word	0xb94cf000

0002a714 <at_interface_open>:
   2a714:	41f0e92d 	.word	0x41f0e92d
   2a718:	b0822500 	.word	0xb0822500
   2a71c:	f843ab02 	.word	0xf843ab02
   2a720:	46805d08 	.word	0x46805d08
   2a724:	4618460f 	.word	0x4618460f
   2a728:	21024616 	.word	0x21024616
   2a72c:	f0044a1d 	.word	0xf0044a1d
   2a730:	9b00fc61 	.word	0x9b00fc61
   2a734:	b30b4604 	.word	0xb30b4604
   2a738:	8703e9c3 	.word	0x8703e9c3
   2a73c:	4629615e 	.word	0x4629615e
   2a740:	f000a801 	.word	0xf000a801
   2a744:	b9e8f939 	.word	0xb9e8f939
   2a748:	9b012204 	.word	0x9b012204
   2a74c:	72582105 	.word	0x72582105
   2a750:	72d87298 	.word	0x72d87298
   2a754:	60dc721a 	.word	0x60dc721a
   2a758:	f0004618 	.word	0xf0004618
   2a75c:	b9d8f941 	.word	0xb9d8f941
   2a760:	f04f2202 	.word	0xf04f2202
   2a764:	461133ff 	.word	0x461133ff
   2a768:	f0044620 	.word	0xf0044620
   2a76c:	4605fce7 	.word	0x4605fce7
   2a770:	9a00b948 	.word	0x9a00b948
   2a774:	f4436813 	.word	0xf4436813
   2a778:	60133300 	.word	0x60133300
   2a77c:	b0024620 	.word	0xb0024620
   2a780:	81f0e8bd 	.word	0x81f0e8bd
   2a784:	4620250c 	.word	0x4620250c
   2a788:	fc8af004 	.word	0xfc8af004
   2a78c:	f7f84628 	.word	0xf7f84628
   2a790:	f04ffd5d 	.word	0xf04ffd5d
   2a794:	e7f134ff 	.word	0xe7f134ff
   2a798:	f0009801 	.word	0xf0009801
   2a79c:	2523f92f 	.word	0x2523f92f
   2a7a0:	bf00e7f1 	.word	0xbf00e7f1
   2a7a4:	0002a631 	.word	0x0002a631

0002a7a8 <at_interface_close>:
   2a7a8:	b083b5f0 	.word	0xb083b5f0
   2a7ac:	f0044606 	.word	0xf0044606
   2a7b0:	2800fd31 	.word	0x2800fd31
   2a7b4:	230dd03d 	.word	0x230dd03d
   2a7b8:	60036807 	.word	0x60036807
   2a7bc:	46046803 	.word	0x46046803
   2a7c0:	d41f039b 	.word	0xd41f039b
   2a7c4:	a8012100 	.word	0xa8012100
   2a7c8:	f8f6f000 	.word	0xf8f6f000
   2a7cc:	2204bb20 	.word	0x2204bb20
   2a7d0:	21069b01 	.word	0x21069b01
   2a7d4:	72987258 	.word	0x72987258
   2a7d8:	721a72d8 	.word	0x721a72d8
   2a7dc:	461860de 	.word	0x461860de
   2a7e0:	f8fef000 	.word	0xf8fef000
   2a7e4:	220eb9d0 	.word	0x220eb9d0
   2a7e8:	33fff04f 	.word	0x33fff04f
   2a7ec:	46304611 	.word	0x46304611
   2a7f0:	fca4f004 	.word	0xfca4f004
   2a7f4:	b9a84605 	.word	0xb9a84605
   2a7f8:	f0044630 	.word	0xf0044630
   2a7fc:	4628fc51 	.word	0x4628fc51
   2a800:	bdf0b003 	.word	0xbdf0b003
   2a804:	21006803 	.word	0x21006803
   2a808:	3300f423 	.word	0x3300f423
   2a80c:	a8016003 	.word	0xa8016003
   2a810:	f8d2f000 	.word	0xf8d2f000
   2a814:	d0da2800 	.word	0xd0da2800
   2a818:	e003250c 	.word	0xe003250c
   2a81c:	f0009801 	.word	0xf0009801
   2a820:	2523f8ed 	.word	0x2523f8ed
   2a824:	46286027 	.word	0x46286027
   2a828:	fd10f7f8 	.word	0xfd10f7f8
   2a82c:	35fff04f 	.word	0x35fff04f
   2a830:	2516e7e5 	.word	0x2516e7e5
   2a834:	bf00e7f7 	.word	0xbf00e7f7

0002a838 <at_interface_read>:
   2a838:	41f0e92d 	.word	0x41f0e92d
   2a83c:	4688b084 	.word	0x4688b084
   2a840:	461e4615 	.word	0x461e4615
   2a844:	f0044607 	.word	0xf0044607
   2a848:	2800fce5 	.word	0x2800fce5
   2a84c:	2300d049 	.word	0x2300d049
   2a850:	8500e9cd 	.word	0x8500e9cd
   2a854:	0502f016 	.word	0x0502f016
   2a858:	e9cd4604 	.word	0xe9cd4604
   2a85c:	d00e3302 	.word	0xd00e3302
   2a860:	2d00e01e 	.word	0x2d00e01e
   2a864:	f44fd133 	.word	0xf44fd133
   2a868:	6a233280 	.word	0x6a233280
   2a86c:	2b004611 	.word	0x2b004611
   2a870:	f04fbf08 	.word	0xf04fbf08
   2a874:	463833ff 	.word	0x463833ff
   2a878:	fc60f004 	.word	0xfc60f004
   2a87c:	68234605 	.word	0x68234605
   2a880:	f42369e0 	.word	0xf42369e0
   2a884:	60233380 	.word	0x60233380
   2a888:	46326803 	.word	0x46326803
   2a88c:	4669689b 	.word	0x4669689b
   2a890:	f1b04798 	.word	0xf1b04798
   2a894:	dbe40800 	.word	0xdbe40800
   2a898:	b0044640 	.word	0xb0044640
   2a89c:	81f0e8bd 	.word	0x81f0e8bd
   2a8a0:	69c06803 	.word	0x69c06803
   2a8a4:	3380f423 	.word	0x3380f423
   2a8a8:	68036023 	.word	0x68036023
   2a8ac:	689b4632 	.word	0x689b4632
   2a8b0:	47984669 	.word	0x47984669
   2a8b4:	0800f1b0 	.word	0x0800f1b0
   2a8b8:	f1b8daee 	.word	0xf1b8daee
   2a8bc:	d1eb3fff 	.word	0xd1eb3fff
   2a8c0:	f7f82023 	.word	0xf7f82023
   2a8c4:	4640fcc3 	.word	0x4640fcc3
   2a8c8:	e8bdb004 	.word	0xe8bdb004
   2a8cc:	f1b881f0 	.word	0xf1b881f0
   2a8d0:	d1e13fff 	.word	0xd1e13fff
   2a8d4:	f7f84628 	.word	0xf7f84628
   2a8d8:	4640fcb9 	.word	0x4640fcb9
   2a8dc:	e8bdb004 	.word	0xe8bdb004
   2a8e0:	201681f0 	.word	0x201681f0
   2a8e4:	fcb2f7f8 	.word	0xfcb2f7f8
   2a8e8:	38fff04f 	.word	0x38fff04f
   2a8ec:	bf00e7d4 	.word	0xbf00e7d4

0002a8f0 <at_interface_getopt>:
   2a8f0:	bceef004 	.word	0xbceef004

0002a8f4 <at_interface_setopt>:
   2a8f4:	bcb6f004 	.word	0xbcb6f004

0002a8f8 <rpc_at_event_handler>:
   2a8f8:	4606b570 	.word	0x4606b570
   2a8fc:	68c0b084 	.word	0x68c0b084
   2a900:	f004460d 	.word	0xf004460d
   2a904:	4604fc87 	.word	0x4604fc87
   2a908:	6803b348 	.word	0x6803b348
   2a90c:	2b01b29b 	.word	0x2b01b29b
   2a910:	6803d01f 	.word	0x6803d01f
   2a914:	2b0db29b 	.word	0x2b0db29b
   2a918:	6803d029 	.word	0x6803d029
   2a91c:	2b02b29b 	.word	0x2b02b29b
   2a920:	3d03d02d 	.word	0x3d03d02d
   2a924:	d8172d01 	.word	0xd8172d01
   2a928:	68732500 	.word	0x68732500
   2a92c:	e9cd6832 	.word	0xe9cd6832
   2a930:	e9cd5502 	.word	0xe9cd5502
   2a934:	69e02300 	.word	0x69e02300
   2a938:	68034669 	.word	0x68034669
   2a93c:	4798685b 	.word	0x4798685b
   2a940:	d0193001 	.word	0xd0193001
   2a944:	68234628 	.word	0x68234628
   2a948:	3380f443 	.word	0x3380f443
   2a94c:	b0046023 	.word	0xb0046023
   2a950:	2d02bd70 	.word	0x2d02bd70
   2a954:	6005d1e5 	.word	0x6005d1e5
   2a958:	b0042000 	.word	0xb0042000
   2a95c:	6830bd70 	.word	0x6830bd70
   2a960:	d0f92800 	.word	0xd0f92800
   2a964:	f852f000 	.word	0xf852f000
   2a968:	b0044620 	.word	0xb0044620
   2a96c:	2d02bd70 	.word	0x2d02bd70
   2a970:	230ed1d7 	.word	0x230ed1d7
   2a974:	e7ef6003 	.word	0xe7ef6003
   2a978:	b0042002 	.word	0xb0042002
   2a97c:	6803bd70 	.word	0x6803bd70
   2a980:	d5ce029b 	.word	0xd5ce029b
   2a984:	d1cc2d02 	.word	0xd1cc2d02
   2a988:	f4236803 	.word	0xf4236803
   2a98c:	60031300 	.word	0x60031300
   2a990:	f4436803 	.word	0xf4436803
   2a994:	60033300 	.word	0x60033300
   2a998:	bf00e7de 	.word	0xbf00e7de

0002a99c <at_client_evt_handler>:
   2a99c:	f850b120 	.word	0xf850b120
   2a9a0:	0c091b08 	.word	0x0c091b08
   2a9a4:	bfa8f7ff 	.word	0xbfa8f7ff
   2a9a8:	bf004770 	.word	0xbf004770

0002a9ac <rpc_at_client_init>:
   2a9ac:	f00a4801 	.word	0xf00a4801
   2a9b0:	bf00be03 	.word	0xbf00be03
   2a9b4:	00043c44 	.word	0x00043c44

0002a9b8 <rpc_at_client_request_alloc>:
   2a9b8:	2300b180 	.word	0x2300b180
   2a9bc:	b082b510 	.word	0xb082b510
   2a9c0:	4604aa02 	.word	0x4604aa02
   2a9c4:	3d04f842 	.word	0x3d04f842
   2a9c8:	f00b2003 	.word	0xf00b2003
   2a9cc:	b918f82d 	.word	0xb918f82d
   2a9d0:	b10b9b01 	.word	0xb10b9b01
   2a9d4:	60233308 	.word	0x60233308
   2a9d8:	bd10b002 	.word	0xbd10b002
   2a9dc:	4770200e 	.word	0x4770200e

0002a9e0 <rpc_at_client_request_send>:
   2a9e0:	4603b150 	.word	0x4603b150
   2a9e4:	2c08f830 	.word	0x2c08f830
   2a9e8:	ea422003 	.word	0xea422003
   2a9ec:	f8434101 	.word	0xf8434101
   2a9f0:	46191d08 	.word	0x46191d08
   2a9f4:	b800f00b 	.word	0xb800f00b
   2a9f8:	4770200e 	.word	0x4770200e

0002a9fc <rpc_at_client_message_free>:
   2a9fc:	f1a0b120 	.word	0xf1a0b120
   2aa00:	20030108 	.word	0x20030108
   2aa04:	b842f00b 	.word	0xb842f00b
   2aa08:	4770200e 	.word	0x4770200e

0002aa0c <rpc_at_client_data_free>:
   2aa0c:	4601b118 	.word	0x4601b118
   2aa10:	f00b2003 	.word	0xf00b2003
   2aa14:	200eb94d 	.word	0x200eb94d
   2aa18:	bf004770 	.word	0xbf004770

0002aa1c <logobj_event_handler>:
   2aa1c:	4b3bb530 	.word	0x4b3bb530
   2aa20:	681db085 	.word	0x681db085
   2aa24:	d04c2d00 	.word	0xd04c2d00
   2aa28:	0302f248 	.word	0x0302f248
   2aa2c:	d0534299 	.word	0xd0534299
   2aa30:	f248d91c 	.word	0xf248d91c
   2aa34:	42990303 	.word	0x42990303
   2aa38:	f249d05a 	.word	0xf249d05a
   2aa3c:	42990301 	.word	0x42990301
   2aa40:	2400d147 	.word	0x2400d147
   2aa44:	68026843 	.word	0x68026843
   2aa48:	4402e9cd 	.word	0x4402e9cd
   2aa4c:	2300e9cd 	.word	0x2300e9cd
   2aa50:	466969e8 	.word	0x466969e8
   2aa54:	685b6803 	.word	0x685b6803
   2aa58:	30014798 	.word	0x30014798
   2aa5c:	4620d04e 	.word	0x4620d04e
   2aa60:	f443682b 	.word	0xf443682b
   2aa64:	602b3380 	.word	0x602b3380
   2aa68:	bd30b005 	.word	0xbd30b005
   2aa6c:	0301f248 	.word	0x0301f248
   2aa70:	d12e4299 	.word	0xd12e4299
   2aa74:	2b0068c3 	.word	0x2b0068c3
   2aa78:	6828d135 	.word	0x6828d135
   2aa7c:	0080f410 	.word	0x0080f410
   2aa80:	682bd03e 	.word	0x682bd03e
   2aa84:	2b01b29b 	.word	0x2b01b29b
   2aa88:	682bd105 	.word	0x682bd105
   2aa8c:	041b0c1b 	.word	0x041b0c1b
   2aa90:	0302f043 	.word	0x0302f043
   2aa94:	4b1e602b 	.word	0x4b1e602b
   2aa98:	f002781a 	.word	0xf002781a
   2aa9c:	2a0001ff 	.word	0x2a0001ff
   2aaa0:	4a1cd031 	.word	0x4a1cd031
   2aaa4:	b9097811 	.word	0xb9097811
   2aaa8:	70112101 	.word	0x70112101
   2aaac:	70182000 	.word	0x70182000
   2aab0:	f423682b 	.word	0xf423682b
   2aab4:	602b0380 	.word	0x602b0380
   2aab8:	f443682b 	.word	0xf443682b
   2aabc:	602b0300 	.word	0x602b0300
   2aac0:	6800e7d2 	.word	0x6800e7d2
   2aac4:	d0cf2800 	.word	0xd0cf2800
   2aac8:	f86af006 	.word	0xf86af006
   2aacc:	b0054628 	.word	0xb0054628
   2aad0:	2000bd30 	.word	0x2000bd30
   2aad4:	bd30b005 	.word	0xbd30b005
   2aad8:	f413682b 	.word	0xf413682b
   2aadc:	d00b0380 	.word	0xd00b0380
   2aae0:	280068c0 	.word	0x280068c0
   2aae4:	230ed0e4 	.word	0x230ed0e4
   2aae8:	606b2000 	.word	0x606b2000
   2aaec:	bd30b005 	.word	0xbd30b005
   2aaf0:	2b0168c3 	.word	0x2b0168c3
   2aaf4:	e7f6d1a5 	.word	0xe7f6d1a5
   2aaf8:	e7b54618 	.word	0xe7b54618
   2aafc:	e7b32002 	.word	0xe7b32002
   2ab00:	606b230e 	.word	0x606b230e
   2ab04:	4a03e7b0 	.word	0x4a03e7b0
   2ab08:	e7cf7011 	.word	0xe7cf7011
   2ab0c:	20024998 	.word	0x20024998
   2ab10:	2002c8b4 	.word	0x2002c8b4
   2ab14:	2002c8b5 	.word	0x2002c8b5

0002ab18 <logobj_interface_init>:
   2ab18:	b5102300 	.word	0xb5102300
   2ab1c:	4a084907 	.word	0x4a084907
   2ab20:	48094c08 	.word	0x48094c08
   2ab24:	60037023 	.word	0x60037023
   2ab28:	6013700b 	.word	0x6013700b
   2ab2c:	fffcf005 	.word	0xfffcf005
   2ab30:	bf183000 	.word	0xbf183000
   2ab34:	42402001 	.word	0x42402001
   2ab38:	bf00bd10 	.word	0xbf00bd10
   2ab3c:	2002c8b4 	.word	0x2002c8b4
   2ab40:	20024994 	.word	0x20024994
   2ab44:	2002c8b5 	.word	0x2002c8b5
   2ab48:	20024998 	.word	0x20024998

0002ab4c <logobj_interface_open>:
   2ab4c:	e92d2300 	.word	0xe92d2300
   2ab50:	286647f0 	.word	0x286647f0
   2ab54:	9300b082 	.word	0x9300b082
   2ab58:	2902d172 	.word	0x2902d172
   2ab5c:	d16f4689 	.word	0xd16f4689
   2ab60:	2305f240 	.word	0x2305f240
   2ab64:	4692429a 	.word	0x4692429a
   2ab68:	4f48d16a 	.word	0x4f48d16a
   2ab6c:	2d00683d 	.word	0x2d00683d
   2ab70:	4680d17c 	.word	0x4680d17c
   2ab74:	46684a46 	.word	0x46684a46
   2ab78:	fa3cf004 	.word	0xfa3cf004
   2ab7c:	46069b00 	.word	0x46069b00
   2ab80:	d07d2b00 	.word	0xd07d2b00
   2ab84:	22044629 	.word	0x22044629
   2ab88:	603b4842 	.word	0x603b4842
   2ab8c:	ff31f016 	.word	0xff31f016
   2ab90:	46299c00 	.word	0x46299c00
   2ab94:	8903e9c4 	.word	0x8903e9c4
   2ab98:	a014f8c4 	.word	0xa014f8c4
   2ab9c:	f005a801 	.word	0xf005a801
   2aba0:	2800ffc9 	.word	0x2800ffc9
   2aba4:	2201d13c 	.word	0x2201d13c
   2aba8:	9b012104 	.word	0x9b012104
   2abac:	73584d3a 	.word	0x73584d3a
   2abb0:	73d87398 	.word	0x73d87398
   2abb4:	72987258 	.word	0x72987258
   2abb8:	721972d8 	.word	0x721972d8
   2abbc:	731a702a 	.word	0x731a702a
   2abc0:	46186822 	.word	0x46186822
   2abc4:	0280f442 	.word	0x0280f442
   2abc8:	f2476022 	.word	0xf2476022
   2abcc:	f0050101 	.word	0xf0050101
   2abd0:	bb38ffc9 	.word	0xbb38ffc9
   2abd4:	0200f44f 	.word	0x0200f44f
   2abd8:	33fff04f 	.word	0x33fff04f
   2abdc:	46304611 	.word	0x46304611
   2abe0:	faacf004 	.word	0xfaacf004
   2abe4:	b3104604 	.word	0xb3104604
   2abe8:	2e009a00 	.word	0x2e009a00
   2abec:	f4436813 	.word	0xf4436813
   2abf0:	60133300 	.word	0x60133300
   2abf4:	68139a00 	.word	0x68139a00
   2abf8:	0380f423 	.word	0x0380f423
   2abfc:	9a006013 	.word	0x9a006013
   2ac00:	f4236813 	.word	0xf4236813
   2ac04:	60130300 	.word	0x60130300
   2ac08:	2300da36 	.word	0x2300da36
   2ac0c:	603b4620 	.word	0x603b4620
   2ac10:	36fff04f 	.word	0x36fff04f
   2ac14:	fb1af7f8 	.word	0xfb1af7f8
   2ac18:	b0024630 	.word	0xb0024630
   2ac1c:	87f0e8bd 	.word	0x87f0e8bd
   2ac20:	e7e1240c 	.word	0xe7e1240c
   2ac24:	f0059801 	.word	0xf0059801
   2ac28:	2405ffb3 	.word	0x2405ffb3
   2ac2c:	4630e7dc 	.word	0x4630e7dc
   2ac30:	faf0f004 	.word	0xfaf0f004
   2ac34:	6844b150 	.word	0x6844b150
   2ac38:	2300b144 	.word	0x2300b144
   2ac3c:	e7d36043 	.word	0xe7d36043
   2ac40:	f7f82016 	.word	0xf7f82016
   2ac44:	f04ffb03 	.word	0xf04ffb03
   2ac48:	e7e536ff 	.word	0xe7e536ff
   2ac4c:	68139a00 	.word	0x68139a00
   2ac50:	3300f443 	.word	0x3300f443
   2ac54:	9a006013 	.word	0x9a006013
   2ac58:	f4236813 	.word	0xf4236813
   2ac5c:	60130380 	.word	0x60130380
   2ac60:	68139a00 	.word	0x68139a00
   2ac64:	0300f423 	.word	0x0300f423
   2ac68:	e7d56013 	.word	0xe7d56013
   2ac6c:	f7f82001 	.word	0xf7f82001
   2ac70:	f04ffaed 	.word	0xf04ffaed
   2ac74:	e7cf36ff 	.word	0xe7cf36ff
   2ac78:	f0044630 	.word	0xf0044630
   2ac7c:	e7c4fa11 	.word	0xe7c4fa11
   2ac80:	f7f82018 	.word	0xf7f82018
   2ac84:	f04ffae3 	.word	0xf04ffae3
   2ac88:	e7c536ff 	.word	0xe7c536ff
   2ac8c:	20024998 	.word	0x20024998
   2ac90:	0002a639 	.word	0x0002a639
   2ac94:	20024994 	.word	0x20024994
   2ac98:	2002c8b4 	.word	0x2002c8b4

0002ac9c <logobj_interface_read>:
   2ac9c:	43f0e92d 	.word	0x43f0e92d
   2aca0:	2900b085 	.word	0x2900b085
   2aca4:	2a00d05e 	.word	0x2a00d05e
   2aca8:	dd5b4616 	.word	0xdd5b4616
   2acac:	4680461f 	.word	0x4680461f
   2acb0:	f004460d 	.word	0xf004460d
   2acb4:	4604faaf 	.word	0x4604faaf
   2acb8:	d0592800 	.word	0xd0592800
   2acbc:	07ba69c0 	.word	0x07ba69c0
   2acc0:	68db6803 	.word	0x68db6803
   2acc4:	4798d524 	.word	0x4798d524
   2acc8:	d03b3001 	.word	0xd03b3001
   2accc:	69e06823 	.word	0x69e06823
   2acd0:	3380f413 	.word	0x3380f413
   2acd4:	2100d038 	.word	0x2100d038
   2acd8:	463a6823 	.word	0x463a6823
   2acdc:	3380f423 	.word	0x3380f423
   2ace0:	e9cd6023 	.word	0xe9cd6023
   2ace4:	e9cd1102 	.word	0xe9cd1102
   2ace8:	68035600 	.word	0x68035600
   2acec:	689b4669 	.word	0x689b4669
   2acf0:	46054798 	.word	0x46054798
   2acf4:	680369e0 	.word	0x680369e0
   2acf8:	479868db 	.word	0x479868db
   2acfc:	d0033001 	.word	0xd0033001
   2ad00:	f4436823 	.word	0xf4436823
   2ad04:	60233380 	.word	0x60233380
   2ad08:	b0054628 	.word	0xb0054628
   2ad0c:	83f0e8bd 	.word	0x83f0e8bd
   2ad10:	f0126822 	.word	0xf0126822
   2ad14:	d1d65980 	.word	0xd1d65980
   2ad18:	1c434798 	.word	0x1c434798
   2ad1c:	f44fd1d6 	.word	0xf44fd1d6
   2ad20:	6a233280 	.word	0x6a233280
   2ad24:	2b004611 	.word	0x2b004611
   2ad28:	4603bf08 	.word	0x4603bf08
   2ad2c:	f0044640 	.word	0xf0044640
   2ad30:	b158fa05 	.word	0xb158fa05
   2ad34:	35fff04f 	.word	0x35fff04f
   2ad38:	fa88f7f8 	.word	0xfa88f7f8
   2ad3c:	b0054628 	.word	0xb0054628
   2ad40:	83f0e8bd 	.word	0x83f0e8bd
   2ad44:	e7f52023 	.word	0xe7f52023
   2ad48:	e7d4461d 	.word	0xe7d4461d
   2ad4c:	f0044640 	.word	0xf0044640
   2ad50:	4603fa61 	.word	0x4603fa61
   2ad54:	d0b92800 	.word	0xd0b92800
   2ad58:	28006840 	.word	0x28006840
   2ad5c:	f8c3d0b6 	.word	0xf8c3d0b6
   2ad60:	e7e79004 	.word	0xe7e79004
   2ad64:	f7f82016 	.word	0xf7f82016
   2ad68:	f04ffa71 	.word	0xf04ffa71
   2ad6c:	e7cb35ff 	.word	0xe7cb35ff
   2ad70:	f7f82009 	.word	0xf7f82009
   2ad74:	f04ffa6b 	.word	0xf04ffa6b
   2ad78:	e7c535ff 	.word	0xe7c535ff

0002ad7c <logobj_interface_write>:
   2ad7c:	41f0e92d 	.word	0x41f0e92d
   2ad80:	2900b082 	.word	0x2900b082
   2ad84:	2a04d05b 	.word	0x2a04d05b
   2ad88:	461ed159 	.word	0x461ed159
   2ad8c:	460d4607 	.word	0x460d4607
   2ad90:	fa40f004 	.word	0xfa40f004
   2ad94:	28004604 	.word	0x28004604
   2ad98:	07b0d067 	.word	0x07b0d067
   2ad9c:	6823d526 	.word	0x6823d526
   2ada0:	d55e039b 	.word	0xd55e039b
   2ada4:	68232600 	.word	0x68232600
   2ada8:	f4232100 	.word	0xf4232100
   2adac:	60233300 	.word	0x60233300
   2adb0:	f8d5a801 	.word	0xf8d5a801
   2adb4:	f0058000 	.word	0xf0058000
   2adb8:	b9f8febd 	.word	0xb9f8febd
   2adbc:	9b012504 	.word	0x9b012504
   2adc0:	0103f247 	.word	0x0103f247
   2adc4:	800cf8c3 	.word	0x800cf8c3
   2adc8:	72987258 	.word	0x72987258
   2adcc:	721d72d8 	.word	0x721d72d8
   2add0:	f0054618 	.word	0xf0054618
   2add4:	4680fec7 	.word	0x4680fec7
   2add8:	b9cebb40 	.word	0xb9cebb40
   2addc:	68234628 	.word	0x68234628
   2ade0:	3300f443 	.word	0x3300f443
   2ade4:	b0026023 	.word	0xb0026023
   2ade8:	81f0e8bd 	.word	0x81f0e8bd
   2adec:	00d96823 	.word	0x00d96823
   2adf0:	6823d4d5 	.word	0x6823d4d5
   2adf4:	d536039a 	.word	0xd536039a
   2adf8:	e7d42601 	.word	0xe7d42601
   2adfc:	6823200c 	.word	0x6823200c
   2ae00:	3300f443 	.word	0x3300f443
   2ae04:	f7f86023 	.word	0xf7f86023
   2ae08:	f04ffa21 	.word	0xf04ffa21
   2ae0c:	e7ea30ff 	.word	0xe7ea30ff
   2ae10:	3280f44f 	.word	0x3280f44f
   2ae14:	33fff04f 	.word	0x33fff04f
   2ae18:	46384611 	.word	0x46384611
   2ae1c:	f98ef004 	.word	0xf98ef004
   2ae20:	6823b198 	.word	0x6823b198
   2ae24:	3300f443 	.word	0x3300f443
   2ae28:	e7ec6023 	.word	0xe7ec6023
   2ae2c:	f0059801 	.word	0xf0059801
   2ae30:	6823feaf 	.word	0x6823feaf
   2ae34:	f4432005 	.word	0xf4432005
   2ae38:	60233300 	.word	0x60233300
   2ae3c:	2016e7e3 	.word	0x2016e7e3
   2ae40:	fa04f7f8 	.word	0xfa04f7f8
   2ae44:	30fff04f 	.word	0x30fff04f
   2ae48:	4638e7cd 	.word	0x4638e7cd
   2ae4c:	f9e2f004 	.word	0xf9e2f004
   2ae50:	28004603 	.word	0x28004603
   2ae54:	6840d0c2 	.word	0x6840d0c2
   2ae58:	d0bf2800 	.word	0xd0bf2800
   2ae5c:	8004f8c3 	.word	0x8004f8c3
   2ae60:	2073e7df 	.word	0x2073e7df
   2ae64:	2009e7cf 	.word	0x2009e7cf
   2ae68:	2009e7cd 	.word	0x2009e7cd
   2ae6c:	f9eef7f8 	.word	0xf9eef7f8
   2ae70:	30fff04f 	.word	0x30fff04f
   2ae74:	bf00e7b7 	.word	0xbf00e7b7

0002ae78 <logobj_interface_setopt>:
   2ae78:	2901b5f0 	.word	0x2901b5f0
   2ae7c:	d068b085 	.word	0xd068b085
   2ae80:	f240461e 	.word	0xf240461e
   2ae84:	42992305 	.word	0x42992305
   2ae88:	8095f040 	.word	0x8095f040
   2ae8c:	46154607 	.word	0x46154607
   2ae90:	f9c0f004 	.word	0xf9c0f004
   2ae94:	28004604 	.word	0x28004604
   2ae98:	80b2f000 	.word	0x80b2f000
   2ae9c:	d0192d01 	.word	0xd0192d01
   2aea0:	d0102d02 	.word	0xd0102d02
   2aea4:	6803252a 	.word	0x6803252a
   2aea8:	0380f423 	.word	0x0380f423
   2aeac:	68236023 	.word	0x68236023
   2aeb0:	f4234628 	.word	0xf4234628
   2aeb4:	60230300 	.word	0x60230300
   2aeb8:	f9c8f7f8 	.word	0xf9c8f7f8
   2aebc:	35fff04f 	.word	0x35fff04f
   2aec0:	b0054628 	.word	0xb0054628
   2aec4:	b116bdf0 	.word	0xb116bdf0
   2aec8:	2b019b0a 	.word	0x2b019b0a
   2aecc:	6823d049 	.word	0x6823d049
   2aed0:	e7e92516 	.word	0xe7e92516
   2aed4:	d0fa2e00 	.word	0xd0fa2e00
   2aed8:	2b049b0a 	.word	0x2b049b0a
   2aedc:	2100d1f7 	.word	0x2100d1f7
   2aee0:	f005a803 	.word	0xf005a803
   2aee4:	4605fe27 	.word	0x4605fe27
   2aee8:	d16a2800 	.word	0xd16a2800
   2aeec:	22089803 	.word	0x22089803
   2aef0:	300c4629 	.word	0x300c4629
   2aef4:	fd7df016 	.word	0xfd7df016
   2aef8:	46319803 	.word	0x46319803
   2aefc:	300c9a0a 	.word	0x300c9a0a
   2af00:	fd57f016 	.word	0xfd57f016
   2af04:	98032308 	.word	0x98032308
   2af08:	0102f247 	.word	0x0102f247
   2af0c:	72457203 	.word	0x72457203
   2af10:	72c57285 	.word	0x72c57285
   2af14:	f4436823 	.word	0xf4436823
   2af18:	60230380 	.word	0x60230380
   2af1c:	fe22f005 	.word	0xfe22f005
   2af20:	d1512800 	.word	0xd1512800
   2af24:	0200f44f 	.word	0x0200f44f
   2af28:	33fff04f 	.word	0x33fff04f
   2af2c:	46384611 	.word	0x46384611
   2af30:	f904f004 	.word	0xf904f004
   2af34:	28004605 	.word	0x28004605
   2af38:	4638d13b 	.word	0x4638d13b
   2af3c:	f96af004 	.word	0xf96af004
   2af40:	d04f2800 	.word	0xd04f2800
   2af44:	2b006843 	.word	0x2b006843
   2af48:	2200d04c 	.word	0x2200d04c
   2af4c:	6042461d 	.word	0x6042461d
   2af50:	9c0ae02f 	.word	0x9c0ae02f
   2af54:	f0049400 	.word	0xf0049400
   2af58:	4605f985 	.word	0x4605f985
   2af5c:	b0054628 	.word	0xb0054628
   2af60:	2100bdf0 	.word	0x2100bdf0
   2af64:	7835a803 	.word	0x7835a803
   2af68:	fde4f005 	.word	0xfde4f005
   2af6c:	2d01bb48 	.word	0x2d01bb48
   2af70:	4b26bf08 	.word	0x4b26bf08
   2af74:	0204f04f 	.word	0x0204f04f
   2af78:	701dbf08 	.word	0x701dbf08
   2af7c:	98032300 	.word	0x98032300
   2af80:	0101f247 	.word	0x0101f247
   2af84:	60c57243 	.word	0x60c57243
   2af88:	72c37283 	.word	0x72c37283
   2af8c:	68237202 	.word	0x68237202
   2af90:	0380f443 	.word	0x0380f443
   2af94:	f0056023 	.word	0xf0056023
   2af98:	4606fde5 	.word	0x4606fde5
   2af9c:	f44fb9a0 	.word	0xf44fb9a0
   2afa0:	f04f0200 	.word	0xf04f0200
   2afa4:	461133ff 	.word	0x461133ff
   2afa8:	f0044638 	.word	0xf0044638
   2afac:	4605f8c7 	.word	0x4605f8c7
   2afb0:	6823b180 	.word	0x6823b180
   2afb4:	202ae778 	.word	0x202ae778
   2afb8:	f948f7f8 	.word	0xf948f7f8
   2afbc:	35fff04f 	.word	0x35fff04f
   2afc0:	6823e77e 	.word	0x6823e77e
   2afc4:	e76f250c 	.word	0xe76f250c
   2afc8:	f0059803 	.word	0xf0059803
   2afcc:	2505fde1 	.word	0x2505fde1
   2afd0:	e7696823 	.word	0xe7696823
   2afd4:	f0044638 	.word	0xf0044638
   2afd8:	b140f91d 	.word	0xb140f91d
   2afdc:	b1356845 	.word	0xb1356845
   2afe0:	e7e66046 	.word	0xe7e66046
   2afe4:	22044631 	.word	0x22044631
   2afe8:	f0164809 	.word	0xf0164809
   2afec:	6823fce2 	.word	0x6823fce2
   2aff0:	0380f423 	.word	0x0380f423
   2aff4:	68236023 	.word	0x68236023
   2aff8:	0300f423 	.word	0x0300f423
   2affc:	e75f6023 	.word	0xe75f6023
   2b000:	f7f82009 	.word	0xf7f82009
   2b004:	f04ff923 	.word	0xf04ff923
   2b008:	e75935ff 	.word	0xe75935ff
   2b00c:	2002c8b4 	.word	0x2002c8b4
   2b010:	20024994 	.word	0x20024994

0002b014 <logobj_interface_getopt>:
   2b014:	2901b5f0 	.word	0x2901b5f0
   2b018:	9e08b083 	.word	0x9e08b083
   2b01c:	461fd030 	.word	0x461fd030
   2b020:	2305f240 	.word	0x2305f240
   2b024:	d1344299 	.word	0xd1344299
   2b028:	f0044615 	.word	0xf0044615
   2b02c:	2800f8f3 	.word	0x2800f8f3
   2b030:	2d01d037 	.word	0x2d01d037
   2b034:	2d02d015 	.word	0x2d02d015
   2b038:	b387d10b 	.word	0xb387d10b
   2b03c:	b3736833 	.word	0xb3736833
   2b040:	22012300 	.word	0x22012300
   2b044:	491a4618 	.word	0x491a4618
   2b048:	70397809 	.word	0x70397809
   2b04c:	b0036032 	.word	0xb0036032
   2b050:	2009bdf0 	.word	0x2009bdf0
   2b054:	f8faf7f8 	.word	0xf8faf7f8
   2b058:	33fff04f 	.word	0x33fff04f
   2b05c:	b0034618 	.word	0xb0034618
   2b060:	b1e7bdf0 	.word	0xb1e7bdf0
   2b064:	2b036833 	.word	0x2b036833
   2b068:	4638d919 	.word	0x4638d919
   2b06c:	49112204 	.word	0x49112204
   2b070:	fc9ff016 	.word	0xfc9ff016
   2b074:	22042300 	.word	0x22042300
   2b078:	60324618 	.word	0x60324618
   2b07c:	bdf0b003 	.word	0xbdf0b003
   2b080:	f0049600 	.word	0xf0049600
   2b084:	4603f925 	.word	0x4603f925
   2b088:	d1e32800 	.word	0xd1e32800
   2b08c:	b0034618 	.word	0xb0034618
   2b090:	202abdf0 	.word	0x202abdf0
   2b094:	f8daf7f8 	.word	0xf8daf7f8
   2b098:	33fff04f 	.word	0x33fff04f
   2b09c:	2016e7de 	.word	0x2016e7de
   2b0a0:	2009e7d8 	.word	0x2009e7d8
   2b0a4:	f8d2f7f8 	.word	0xf8d2f7f8
   2b0a8:	33fff04f 	.word	0x33fff04f
   2b0ac:	bf00e7d6 	.word	0xbf00e7d6
   2b0b0:	2002c8b5 	.word	0x2002c8b5
   2b0b4:	20024994 	.word	0x20024994

0002b0b8 <logobj_interface_close>:
   2b0b8:	4604b510 	.word	0x4604b510
   2b0bc:	f8aaf004 	.word	0xf8aaf004
   2b0c0:	4620b138 	.word	0x4620b138
   2b0c4:	ffecf003 	.word	0xffecf003
   2b0c8:	4a052300 	.word	0x4a052300
   2b0cc:	60134618 	.word	0x60134618
   2b0d0:	2009bd10 	.word	0x2009bd10
   2b0d4:	f8baf7f8 	.word	0xf8baf7f8
   2b0d8:	30fff04f 	.word	0x30fff04f
   2b0dc:	bf00bd10 	.word	0xbf00bd10
   2b0e0:	20024998 	.word	0x20024998

0002b0e4 <transport_reset>:
   2b0e4:	47702000 	.word	0x47702000

0002b0e8 <transport_data_free>:
   2b0e8:	e9d34b0b 	.word	0xe9d34b0b
   2b0ec:	44132300 	.word	0x44132300
   2b0f0:	d20d4298 	.word	0xd20d4298
   2b0f4:	d80b4282 	.word	0xd80b4282
   2b0f8:	4604b510 	.word	0x4604b510
   2b0fc:	fff6f005 	.word	0xfff6f005
   2b100:	4a06b140 	.word	0x4a06b140
   2b104:	60026084 	.word	0x60026084
   2b108:	4010e8bd 	.word	0x4010e8bd
   2b10c:	bf36f005 	.word	0xbf36f005
   2b110:	bb4cf00b 	.word	0xbb4cf00b
   2b114:	bf00bd10 	.word	0xbf00bd10
   2b118:	2002499c 	.word	0x2002499c
   2b11c:	00020001 	.word	0x00020001

0002b120 <rpc_transport_ipc_init>:
   2b120:	d02b2800 	.word	0xd02b2800
   2b124:	b089b530 	.word	0xb089b530
   2b128:	4669aa01 	.word	0x4669aa01
   2b12c:	f0054604 	.word	0xf0054604
   2b130:	4603fe3b 	.word	0x4603fe3b
   2b134:	4a13b140 	.word	0x4a13b140
   2b138:	0028f104 	.word	0x0028f104
   2b13c:	e882c803 	.word	0xe882c803
   2b140:	46180003 	.word	0x46180003
   2b144:	bd30b009 	.word	0xbd30b009
   2b148:	1200e9dd 	.word	0x1200e9dd
   2b14c:	f0004620 	.word	0xf0004620
   2b150:	4603f9f1 	.word	0x4603f9f1
   2b154:	d1ee2800 	.word	0xd1ee2800
   2b158:	490c4b0b 	.word	0x490c4b0b
   2b15c:	4a0d480c 	.word	0x4a0d480c
   2b160:	4d0d9303 	.word	0x4d0d9303
   2b164:	91044b0d 	.word	0x91044b0d
   2b168:	490d9005 	.word	0x490d9005
   2b16c:	9307a802 	.word	0x9307a802
   2b170:	92029506 	.word	0x92029506
   2b174:	fb98f00a 	.word	0xfb98f00a
   2b178:	e7dc4603 	.word	0xe7dc4603
   2b17c:	4618230e 	.word	0x4618230e
   2b180:	bf004770 	.word	0xbf004770
   2b184:	2002499c 	.word	0x2002499c
   2b188:	0003107d 	.word	0x0003107d
   2b18c:	0003114d 	.word	0x0003114d
   2b190:	0002bb51 	.word	0x0002bb51
   2b194:	00030f7d 	.word	0x00030f7d
   2b198:	0002b0e9 	.word	0x0002b0e9
   2b19c:	0002b0e5 	.word	0x0002b0e5
   2b1a0:	200249a4 	.word	0x200249a4

0002b1a4 <rpc_transport_rx_handle>:
   2b1a4:	b508b160 	.word	0xb508b160
   2b1a8:	b2db6843 	.word	0xb2db6843
   2b1ac:	d00e2b02 	.word	0xd00e2b02
   2b1b0:	0c1b6803 	.word	0x0c1b6803
   2b1b4:	d0052b02 	.word	0xd0052b02
   2b1b8:	d00e2b04 	.word	0xd00e2b04
   2b1bc:	bd082000 	.word	0xbd082000
   2b1c0:	47702000 	.word	0x47702000
   2b1c4:	f00b6880 	.word	0xf00b6880
   2b1c8:	2000faf1 	.word	0x2000faf1
   2b1cc:	4601bd08 	.word	0x4601bd08
   2b1d0:	4008e8bd 	.word	0x4008e8bd
   2b1d4:	f00a4803 	.word	0xf00a4803
   2b1d8:	4802ba59 	.word	0x4802ba59
   2b1dc:	fbc4f00a 	.word	0xfbc4f00a
   2b1e0:	bd082000 	.word	0xbd082000
   2b1e4:	200249a4 	.word	0x200249a4
   2b1e8:	bf004770 	.word	0xbf004770

0002b1ec <rpc_transport_ipc_fault_handler>:
   2b1ec:	b94ef000 	.word	0xb94ef000

0002b1f0 <rpc_transport_ipc_shutdown>:
   2b1f0:	f005b508 	.word	0xf005b508
   2b1f4:	f000ffb5 	.word	0xf000ffb5
   2b1f8:	f005fce1 	.word	0xf005fce1
   2b1fc:	e8bdffb7 	.word	0xe8bdffb7
   2b200:	f0004008 	.word	0xf0004008
   2b204:	bf00bcfb 	.word	0xbf00bcfb

0002b208 <nrf_socket>:
   2b208:	4604b570 	.word	0x4604b570
   2b20c:	4616460d 	.word	0x4616460d
   2b210:	fa02f007 	.word	0xfa02f007
   2b214:	6803b130 	.word	0x6803b130
   2b218:	46294632 	.word	0x46294632
   2b21c:	e8bd4620 	.word	0xe8bd4620
   2b220:	47184070 	.word	0x47184070
   2b224:	30fff04f 	.word	0x30fff04f
   2b228:	bf00bd70 	.word	0xbf00bd70

0002b22c <nrf_close>:
   2b22c:	4604b510 	.word	0x4604b510
   2b230:	fa46f007 	.word	0xfa46f007
   2b234:	6843b120 	.word	0x6843b120
   2b238:	e8bd4620 	.word	0xe8bd4620
   2b23c:	47184010 	.word	0x47184010
   2b240:	30fff04f 	.word	0x30fff04f
   2b244:	bf00bd10 	.word	0xbf00bd10

0002b248 <nrf_sendto>:
   2b248:	47f0e92d 	.word	0x47f0e92d
   2b24c:	e9dd460d 	.word	0xe9dd460d
   2b250:	46168908 	.word	0x46168908
   2b254:	4604461f 	.word	0x4604461f
   2b258:	fa32f007 	.word	0xfa32f007
   2b25c:	e9cdb158 	.word	0xe9cdb158
   2b260:	f8d08908 	.word	0xf8d08908
   2b264:	463be008 	.word	0x463be008
   2b268:	46294632 	.word	0x46294632
   2b26c:	46f44620 	.word	0x46f44620
   2b270:	47f0e8bd 	.word	0x47f0e8bd
   2b274:	f04f4760 	.word	0xf04f4760
   2b278:	e8bd30ff 	.word	0xe8bd30ff
   2b27c:	bf0087f0 	.word	0xbf0087f0

0002b280 <nrf_send>:
   2b280:	41f0e92d 	.word	0x41f0e92d
   2b284:	460eb082 	.word	0x460eb082
   2b288:	46984617 	.word	0x46984617
   2b28c:	f0074605 	.word	0xf0074605
   2b290:	b160fa17 	.word	0xb160fa17
   2b294:	20004604 	.word	0x20004604
   2b298:	0000e9cd 	.word	0x0000e9cd
   2b29c:	463a4643 	.word	0x463a4643
   2b2a0:	46284631 	.word	0x46284631
   2b2a4:	47a068a4 	.word	0x47a068a4
   2b2a8:	e8bdb002 	.word	0xe8bdb002
   2b2ac:	f04f81f0 	.word	0xf04f81f0
   2b2b0:	e7f930ff 	.word	0xe7f930ff

0002b2b4 <nrf_write>:
   2b2b4:	b083b5f0 	.word	0xb083b5f0
   2b2b8:	4617460e 	.word	0x4617460e
   2b2bc:	f0074605 	.word	0xf0074605
   2b2c0:	b150f9ff 	.word	0xb150f9ff
   2b2c4:	46042300 	.word	0x46042300
   2b2c8:	3300e9cd 	.word	0x3300e9cd
   2b2cc:	4631463a 	.word	0x4631463a
   2b2d0:	68a44628 	.word	0x68a44628
   2b2d4:	b00347a0 	.word	0xb00347a0
   2b2d8:	f04fbdf0 	.word	0xf04fbdf0
   2b2dc:	e7fa30ff 	.word	0xe7fa30ff

0002b2e0 <nrf_recvfrom>:
   2b2e0:	47f0e92d 	.word	0x47f0e92d
   2b2e4:	e9dd460d 	.word	0xe9dd460d
   2b2e8:	46168908 	.word	0x46168908
   2b2ec:	4604461f 	.word	0x4604461f
   2b2f0:	f9e6f007 	.word	0xf9e6f007
   2b2f4:	e9cdb158 	.word	0xe9cdb158
   2b2f8:	f8d08908 	.word	0xf8d08908
   2b2fc:	463be00c 	.word	0x463be00c
   2b300:	46294632 	.word	0x46294632
   2b304:	46f44620 	.word	0x46f44620
   2b308:	47f0e8bd 	.word	0x47f0e8bd
   2b30c:	f04f4760 	.word	0xf04f4760
   2b310:	e8bd30ff 	.word	0xe8bd30ff
   2b314:	bf0087f0 	.word	0xbf0087f0

0002b318 <nrf_recv>:
   2b318:	41f0e92d 	.word	0x41f0e92d
   2b31c:	460eb082 	.word	0x460eb082
   2b320:	46984617 	.word	0x46984617
   2b324:	f0074605 	.word	0xf0074605
   2b328:	b160f9cb 	.word	0xb160f9cb
   2b32c:	20004604 	.word	0x20004604
   2b330:	0000e9cd 	.word	0x0000e9cd
   2b334:	463a4643 	.word	0x463a4643
   2b338:	46284631 	.word	0x46284631
   2b33c:	47a068e4 	.word	0x47a068e4
   2b340:	e8bdb002 	.word	0xe8bdb002
   2b344:	f04f81f0 	.word	0xf04f81f0
   2b348:	e7f930ff 	.word	0xe7f930ff

0002b34c <nrf_read>:
   2b34c:	b083b5f0 	.word	0xb083b5f0
   2b350:	4617460e 	.word	0x4617460e
   2b354:	f0074605 	.word	0xf0074605
   2b358:	b150f9b3 	.word	0xb150f9b3
   2b35c:	46042300 	.word	0x46042300
   2b360:	3300e9cd 	.word	0x3300e9cd
   2b364:	4631463a 	.word	0x4631463a
   2b368:	68e44628 	.word	0x68e44628
   2b36c:	b00347a0 	.word	0xb00347a0
   2b370:	f04fbdf0 	.word	0xf04fbdf0
   2b374:	e7fa30ff 	.word	0xe7fa30ff

0002b378 <nrf_connect>:
   2b378:	460db570 	.word	0x460db570
   2b37c:	46044616 	.word	0x46044616
   2b380:	f99ef007 	.word	0xf99ef007
   2b384:	6943b130 	.word	0x6943b130
   2b388:	46294632 	.word	0x46294632
   2b38c:	e8bd4620 	.word	0xe8bd4620
   2b390:	47184070 	.word	0x47184070
   2b394:	30fff04f 	.word	0x30fff04f
   2b398:	bf00bd70 	.word	0xbf00bd70

0002b39c <nrf_listen>:
   2b39c:	460db570 	.word	0x460db570
   2b3a0:	f0074604 	.word	0xf0074604
   2b3a4:	b128f98d 	.word	0xb128f98d
   2b3a8:	46296983 	.word	0x46296983
   2b3ac:	e8bd4620 	.word	0xe8bd4620
   2b3b0:	47184070 	.word	0x47184070
   2b3b4:	30fff04f 	.word	0x30fff04f
   2b3b8:	bf00bd70 	.word	0xbf00bd70

0002b3bc <nrf_accept>:
   2b3bc:	41f0e92d 	.word	0x41f0e92d
   2b3c0:	4616460d 	.word	0x4616460d
   2b3c4:	f0074604 	.word	0xf0074604
   2b3c8:	b140f97b 	.word	0xb140f97b
   2b3cc:	463269c7 	.word	0x463269c7
   2b3d0:	46204629 	.word	0x46204629
   2b3d4:	e8bd46bc 	.word	0xe8bd46bc
   2b3d8:	230041f0 	.word	0x230041f0
   2b3dc:	f04f4760 	.word	0xf04f4760
   2b3e0:	e8bd30ff 	.word	0xe8bd30ff
   2b3e4:	bf0081f0 	.word	0xbf0081f0

0002b3e8 <nrf_bind>:
   2b3e8:	460db570 	.word	0x460db570
   2b3ec:	46044616 	.word	0x46044616
   2b3f0:	f966f007 	.word	0xf966f007
   2b3f4:	6903b130 	.word	0x6903b130
   2b3f8:	46294632 	.word	0x46294632
   2b3fc:	e8bd4620 	.word	0xe8bd4620
   2b400:	47184070 	.word	0x47184070
   2b404:	30fff04f 	.word	0x30fff04f
   2b408:	bf00bd70 	.word	0xbf00bd70

0002b40c <nrf_setsockopt>:
   2b40c:	41f0e92d 	.word	0x41f0e92d
   2b410:	8018f8dd 	.word	0x8018f8dd
   2b414:	4616460d 	.word	0x4616460d
   2b418:	4604461f 	.word	0x4604461f
   2b41c:	f950f007 	.word	0xf950f007
   2b420:	f8cdb158 	.word	0xf8cdb158
   2b424:	f8d08018 	.word	0xf8d08018
   2b428:	463be020 	.word	0x463be020
   2b42c:	46294632 	.word	0x46294632
   2b430:	46f44620 	.word	0x46f44620
   2b434:	41f0e8bd 	.word	0x41f0e8bd
   2b438:	f04f4760 	.word	0xf04f4760
   2b43c:	e8bd30ff 	.word	0xe8bd30ff
   2b440:	bf0081f0 	.word	0xbf0081f0

0002b444 <nrf_getsockopt>:
   2b444:	41f0e92d 	.word	0x41f0e92d
   2b448:	8018f8dd 	.word	0x8018f8dd
   2b44c:	4616460d 	.word	0x4616460d
   2b450:	4604461f 	.word	0x4604461f
   2b454:	f934f007 	.word	0xf934f007
   2b458:	f8cdb158 	.word	0xf8cdb158
   2b45c:	f8d08018 	.word	0xf8d08018
   2b460:	463be024 	.word	0x463be024
   2b464:	46294632 	.word	0x46294632
   2b468:	46f44620 	.word	0x46f44620
   2b46c:	41f0e8bd 	.word	0x41f0e8bd
   2b470:	f04f4760 	.word	0xf04f4760
   2b474:	e8bd30ff 	.word	0xe8bd30ff
   2b478:	bf0081f0 	.word	0xbf0081f0

0002b47c <nrf_getaddrinfo>:
   2b47c:	ba1ef00d 	.word	0xba1ef00d

0002b480 <nrf_freeaddrinfo>:
   2b480:	ba1ef00d 	.word	0xba1ef00d

0002b484 <nrf_poll>:
   2b484:	ba1ef00d 	.word	0xba1ef00d

0002b488 <nrf_fcntl>:
   2b488:	ba76f00d 	.word	0xba76f00d

0002b48c <bsd_platform_error_handler>:
   2b48c:	f013b508 	.word	0xf013b508
   2b490:	bd08fb9d 	.word	0xbd08fb9d

0002b494 <bsd_init>:
   2b494:	4c06b510 	.word	0x4c06b510
   2b498:	b92b7823 	.word	0xb92b7823
   2b49c:	f844f007 	.word	0xf844f007
   2b4a0:	2301b908 	.word	0x2301b908
   2b4a4:	bd107023 	.word	0xbd107023
   2b4a8:	30fff04f 	.word	0x30fff04f
   2b4ac:	bf00bd10 	.word	0xbf00bd10
   2b4b0:	2002c8b6 	.word	0x2002c8b6

0002b4b4 <bsd_shutdown>:
   2b4b4:	4c05b510 	.word	0x4c05b510
   2b4b8:	b1237823 	.word	0xb1237823
   2b4bc:	f8a0f007 	.word	0xf8a0f007
   2b4c0:	7020b900 	.word	0x7020b900
   2b4c4:	f04fbd10 	.word	0xf04fbd10
   2b4c8:	bd1030ff 	.word	0xbd1030ff
   2b4cc:	2002c8b6 	.word	0x2002c8b6

0002b4d0 <symbol_000fa2a>:
   2b4d0:	2300b110 	.word	0x2300b110
   2b4d4:	3300e9c0 	.word	0x3300e9c0
   2b4d8:	bf004770 	.word	0xbf004770

0002b4dc <symbol_00066b4>:
   2b4dc:	d0052802 	.word	0xd0052802
   2b4e0:	28034b03 	.word	0x28034b03
   2b4e4:	4618bf0c 	.word	0x4618bf0c
   2b4e8:	47702000 	.word	0x47702000
   2b4ec:	47704801 	.word	0x47704801
   2b4f0:	00043bd4 	.word	0x00043bd4
   2b4f4:	00043ba4 	.word	0x00043ba4

0002b4f8 <symbol_000194a>:
   2b4f8:	b159b160 	.word	0xb159b160
   2b4fc:	6806b570 	.word	0x6806b570
   2b500:	6a4bb966 	.word	0x6a4bb966
   2b504:	460d4604 	.word	0x460d4604
   2b508:	60604798 	.word	0x60604798
   2b50c:	6025b120 	.word	0x6025b120
   2b510:	bd704630 	.word	0xbd704630
   2b514:	47704802 	.word	0x47704802
   2b518:	bd704802 	.word	0xbd704802
   2b51c:	bd704800 	.word	0xbd704800
   2b520:	ffffc180 	.word	0xffffc180
   2b524:	ffffc080 	.word	0xffffc080

0002b528 <symbol_00005ae>:
   2b528:	6800b110 	.word	0x6800b110
   2b52c:	7800b100 	.word	0x7800b100
   2b530:	bf004770 	.word	0xbf004770

0002b534 <rpc_transport_ipc_rx_init>:
   2b534:	f0002800 	.word	0xf0002800
   2b538:	e92d80ff 	.word	0xe92d80ff
   2b53c:	68054ff0 	.word	0x68054ff0
   2b540:	2d00b095 	.word	0x2d00b095
   2b544:	80eef000 	.word	0x80eef000
   2b548:	2b006883 	.word	0x2b006883
   2b54c:	80eaf000 	.word	0x80eaf000
   2b550:	2f006907 	.word	0x2f006907
   2b554:	80e6f000 	.word	0x80e6f000
   2b558:	2c006a84 	.word	0x2c006a84
   2b55c:	80e2f000 	.word	0x80e2f000
   2b560:	2c1b6844 	.word	0x2c1b6844
   2b564:	80e3f240 	.word	0x80e3f240
   2b568:	2c0b68c4 	.word	0x2c0b68c4
   2b56c:	80dff240 	.word	0x80dff240
   2b570:	e014f8d0 	.word	0xe014f8d0
   2b574:	0f17f1be 	.word	0x0f17f1be
   2b578:	80d9f240 	.word	0x80d9f240
   2b57c:	46042600 	.word	0x46042600
   2b580:	e9cd486f 	.word	0xe9cd486f
   2b584:	f8df1200 	.word	0xf8df1200
   2b588:	496ea1d8 	.word	0x496ea1d8
   2b58c:	6ba08006 	.word	0x6ba08006
   2b590:	c1d0f8df 	.word	0xc1d0f8df
   2b594:	81d0f8df 	.word	0x81d0f8df
   2b598:	b1d0f8df 	.word	0xb1d0f8df
   2b59c:	91d0f8df 	.word	0x91d0f8df
   2b5a0:	600e4672 	.word	0x600e4672
   2b5a4:	0000f8ca 	.word	0x0000f8ca
   2b5a8:	46384631 	.word	0x46384631
   2b5ac:	6000f8cc 	.word	0x6000f8cc
   2b5b0:	3000f8cb 	.word	0x3000f8cb
   2b5b4:	6000f8c8 	.word	0x6000f8c8
   2b5b8:	6000f8c9 	.word	0x6000f8c9
   2b5bc:	fa19f016 	.word	0xfa19f016
   2b5c0:	463869e3 	.word	0x463869e3
   2b5c4:	69a3603b 	.word	0x69a3603b
   2b5c8:	f001607b 	.word	0xf001607b
   2b5cc:	2201fddb 	.word	0x2201fddb
   2b5d0:	0c04f04f 	.word	0x0c04f04f
   2b5d4:	495d4b5c 	.word	0x495d4b5c
   2b5d8:	5610f8c3 	.word	0x5610f8c3
   2b5dc:	20806809 	.word	0x20806809
   2b5e0:	495b9104 	.word	0x495b9104
   2b5e4:	e010f8dd 	.word	0xe010f8dd
   2b5e8:	6614f8c3 	.word	0x6614f8c3
   2b5ec:	702e6809 	.word	0x702e6809
   2b5f0:	706e9103 	.word	0x706e9103
   2b5f4:	70aa70ee 	.word	0x70aa70ee
   2b5f8:	6aa19903 	.word	0x6aa19903
   2b5fc:	e000f8db 	.word	0xe000f8db
   2b600:	6ae16069 	.word	0x6ae16069
   2b604:	60a99c01 	.word	0x60a99c01
   2b608:	9c0060ec 	.word	0x9c0060ec
   2b60c:	61af4951 	.word	0x61af4951
   2b610:	e014f8c5 	.word	0xe014f8c5
   2b614:	f8c3612c 	.word	0xf8c3612c
   2b618:	680c2590 	.word	0x680c2590
   2b61c:	6192f5a1 	.word	0x6192f5a1
   2b620:	9c059405 	.word	0x9c059405
   2b624:	c598f8c3 	.word	0xc598f8c3
   2b628:	4498f8d1 	.word	0x4498f8d1
   2b62c:	6780f44f 	.word	0x6780f44f
   2b630:	9c069406 	.word	0x9c069406
   2b634:	f8c32410 	.word	0xf8c32410
   2b638:	f8d145a0 	.word	0xf8d145a0
   2b63c:	4d4644a0 	.word	0x4d4644a0
   2b640:	9c079407 	.word	0x9c079407
   2b644:	f8c32440 	.word	0xf8c32440
   2b648:	f8d145a8 	.word	0xf8d145a8
   2b64c:	940844a8 	.word	0x940844a8
   2b650:	f8c39c08 	.word	0xf8c39c08
   2b654:	f8d105ac 	.word	0xf8d105ac
   2b658:	900904ac 	.word	0x900904ac
   2b65c:	f8c39809 	.word	0xf8c39809
   2b660:	68086100 	.word	0x68086100
   2b664:	980a900a 	.word	0x980a900a
   2b668:	6108f8c3 	.word	0x6108f8c3
   2b66c:	900b6888 	.word	0x900b6888
   2b670:	f8c3980b 	.word	0xf8c3980b
   2b674:	69086110 	.word	0x69086110
   2b678:	980c900c 	.word	0x980c900c
   2b67c:	6118f8c3 	.word	0x6118f8c3
   2b680:	900d6988 	.word	0x900d6988
   2b684:	f8c3980d 	.word	0xf8c3980d
   2b688:	69c8611c 	.word	0x69c8611c
   2b68c:	7101f501 	.word	0x7101f501
   2b690:	980e900e 	.word	0x980e900e
   2b694:	0304f8d3 	.word	0x0304f8d3
   2b698:	f8c34310 	.word	0xf8c34310
   2b69c:	680c0304 	.word	0x680c0304
   2b6a0:	940f482e 	.word	0x940f482e
   2b6a4:	f8d39c0f 	.word	0xf8d39c0f
   2b6a8:	ea444304 	.word	0xea444304
   2b6ac:	f8c3040c 	.word	0xf8c3040c
   2b6b0:	680c4304 	.word	0x680c4304
   2b6b4:	9c109410 	.word	0x9c109410
   2b6b8:	4304f8d3 	.word	0x4304f8d3
   2b6bc:	0410f044 	.word	0x0410f044
   2b6c0:	4304f8c3 	.word	0x4304f8c3
   2b6c4:	9411680c 	.word	0x9411680c
   2b6c8:	f8d39c11 	.word	0xf8d39c11
   2b6cc:	f0444304 	.word	0xf0444304
   2b6d0:	f8c30440 	.word	0xf8c30440
   2b6d4:	680c4304 	.word	0x680c4304
   2b6d8:	9c129412 	.word	0x9c129412
   2b6dc:	4304f8d3 	.word	0x4304f8d3
   2b6e0:	0480f044 	.word	0x0480f044
   2b6e4:	4304f8c3 	.word	0x4304f8c3
   2b6e8:	3000f8da 	.word	0x3000f8da
   2b6ec:	015b6809 	.word	0x015b6809
   2b6f0:	b2db9113 	.word	0xb2db9113
   2b6f4:	f8c89913 	.word	0xf8c89913
   2b6f8:	f8802000 	.word	0xf8802000
   2b6fc:	f8c0332a 	.word	0xf8c0332a
   2b700:	60477184 	.word	0x60477184
   2b704:	f8c59602 	.word	0xf8c59602
   2b708:	f8d56610 	.word	0xf8d56610
   2b70c:	93023610 	.word	0x93023610
   2b710:	f8d89b02 	.word	0xf8d89b02
   2b714:	2b013000 	.word	0x2b013000
   2b718:	f8d9d0fb 	.word	0xf8d9d0fb
   2b71c:	b0150000 	.word	0xb0150000
   2b720:	8ff0e8bd 	.word	0x8ff0e8bd
   2b724:	000ef24c 	.word	0x000ef24c
   2b728:	e8bdb015 	.word	0xe8bdb015
   2b72c:	f24c8ff0 	.word	0xf24c8ff0
   2b730:	b0150009 	.word	0xb0150009
   2b734:	8ff0e8bd 	.word	0x8ff0e8bd
   2b738:	000ef24c 	.word	0x000ef24c
   2b73c:	bf004770 	.word	0xbf004770
   2b740:	2002a302 	.word	0x2002a302
   2b744:	200249b4 	.word	0x200249b4
   2b748:	4002a000 	.word	0x4002a000
   2b74c:	4002a610 	.word	0x4002a610
   2b750:	4002a614 	.word	0x4002a614
   2b754:	4002a590 	.word	0x4002a590
   2b758:	40005000 	.word	0x40005000
   2b75c:	e000e100 	.word	0xe000e100
   2b760:	200249ac 	.word	0x200249ac
   2b764:	200249b8 	.word	0x200249b8
   2b768:	200249b0 	.word	0x200249b0
   2b76c:	200249bc 	.word	0x200249bc
   2b770:	200249a8 	.word	0x200249a8

0002b774 <IPC_IRQHandler>:
   2b774:	4ff0e92d 	.word	0x4ff0e92d
   2b778:	6580f44f 	.word	0x6580f44f
   2b77c:	b0874ca7 	.word	0xb0874ca7
   2b780:	5084f8c4 	.word	0x5084f8c4
   2b784:	8f4ff3bf 	.word	0x8f4ff3bf
   2b788:	8f6ff3bf 	.word	0x8f6ff3bf
   2b78c:	f8c44ea4 	.word	0xf8c44ea4
   2b790:	f8d65184 	.word	0xf8d65184
   2b794:	061f330c 	.word	0x061f330c
   2b798:	80c8f100 	.word	0x80c8f100
   2b79c:	f8d34ba0 	.word	0xf8d34ba0
   2b7a0:	07d0230c 	.word	0x07d0230c
   2b7a4:	80d4f100 	.word	0x80d4f100
   2b7a8:	230cf8d3 	.word	0x230cf8d3
   2b7ac:	0240f012 	.word	0x0240f012
   2b7b0:	80b6f040 	.word	0x80b6f040
   2b7b4:	130cf8d3 	.word	0x130cf8d3
   2b7b8:	f1000749 	.word	0xf1000749
   2b7bc:	f8d380e6 	.word	0xf8d380e6
   2b7c0:	06da330c 	.word	0x06da330c
   2b7c4:	809df140 	.word	0x809df140
   2b7c8:	4a952100 	.word	0x4a952100
   2b7cc:	f8c24b95 	.word	0xf8c24b95
   2b7d0:	681b1110 	.word	0x681b1110
   2b7d4:	9b049304 	.word	0x9b049304
   2b7d8:	8270f8df 	.word	0x8270f8df
   2b7dc:	f8df4f92 	.word	0xf8df4f92
   2b7e0:	f8d89270 	.word	0xf8d89270
   2b7e4:	f8daa000 	.word	0xf8daa000
   2b7e8:	29001000 	.word	0x29001000
   2b7ec:	2200d03f 	.word	0x2200d03f
   2b7f0:	e0024614 	.word	0xe0024614
   2b7f4:	428c3401 	.word	0x428c3401
   2b7f8:	eb0ad227 	.word	0xeb0ad227
   2b7fc:	68ab05c4 	.word	0x68ab05c4
   2b800:	d0f72b00 	.word	0xd0f72b00
   2b804:	b2f6686e 	.word	0xb2f6686e
   2b808:	d1f32e01 	.word	0xd1f32e01
   2b80c:	f8b96868 	.word	0xf8b96868
   2b810:	ebb33000 	.word	0xebb33000
   2b814:	d1ed4f10 	.word	0xd1ed4f10
   2b818:	3301686a 	.word	0x3301686a
   2b81c:	02fff022 	.word	0x02fff022
   2b820:	0202f042 	.word	0x0202f042
   2b824:	68a8606a 	.word	0x68a8606a
   2b828:	3000f8a9 	.word	0x3000f8a9
   2b82c:	fcbaf7ff 	.word	0xfcbaf7ff
   2b830:	b9284632 	.word	0xb9284632
   2b834:	f023686b 	.word	0xf023686b
   2b838:	f04303ff 	.word	0xf04303ff
   2b83c:	606b0303 	.word	0x606b0303
   2b840:	1000f8da 	.word	0x1000f8da
   2b844:	428c3401 	.word	0x428c3401
   2b848:	2a00d3d7 	.word	0x2a00d3d7
   2b84c:	b171d1cd 	.word	0xb171d1cd
   2b850:	eb0a4613 	.word	0xeb0a4613
   2b854:	689002c3 	.word	0x689002c3
   2b858:	b1303301 	.word	0xb1303301
   2b85c:	b004f8d2 	.word	0xb004f8d2
   2b860:	fb8bfa5f 	.word	0xfb8bfa5f
   2b864:	0f01f1bb 	.word	0x0f01f1bb
   2b868:	428bd003 	.word	0x428bd003
   2b86c:	f04fd1f1 	.word	0xf04fd1f1
   2b870:	f8d70b00 	.word	0xf8d70b00
   2b874:	f8daa000 	.word	0xf8daa000
   2b878:	2a002000 	.word	0x2a002000
   2b87c:	2100d03d 	.word	0x2100d03d
   2b880:	e002460c 	.word	0xe002460c
   2b884:	42943401 	.word	0x42943401
   2b888:	eb0ad227 	.word	0xeb0ad227
   2b88c:	68ab05c4 	.word	0x68ab05c4
   2b890:	d0f72b00 	.word	0xd0f72b00
   2b894:	b2f6686e 	.word	0xb2f6686e
   2b898:	d1f32e01 	.word	0xd1f32e01
   2b89c:	f8b96868 	.word	0xf8b96868
   2b8a0:	ebb33000 	.word	0xebb33000
   2b8a4:	d1ed4f10 	.word	0xd1ed4f10
   2b8a8:	3301686a 	.word	0x3301686a
   2b8ac:	02fff022 	.word	0x02fff022
   2b8b0:	0202f042 	.word	0x0202f042
   2b8b4:	68a8606a 	.word	0x68a8606a
   2b8b8:	3000f8a9 	.word	0x3000f8a9
   2b8bc:	fc72f7ff 	.word	0xfc72f7ff
   2b8c0:	b9284631 	.word	0xb9284631
   2b8c4:	f022686a 	.word	0xf022686a
   2b8c8:	f04303ff 	.word	0xf04303ff
   2b8cc:	606b0303 	.word	0x606b0303
   2b8d0:	2000f8da 	.word	0x2000f8da
   2b8d4:	42943401 	.word	0x42943401
   2b8d8:	2900d3d7 	.word	0x2900d3d7
   2b8dc:	b162d1cd 	.word	0xb162d1cd
   2b8e0:	eb0a460b 	.word	0xeb0a460b
   2b8e4:	688801c3 	.word	0x688801c3
   2b8e8:	b1203301 	.word	0xb1203301
   2b8ec:	b2c96849 	.word	0xb2c96849
   2b8f0:	f43f2901 	.word	0xf43f2901
   2b8f4:	4293af76 	.word	0x4293af76
   2b8f8:	f1bbd1f3 	.word	0xf1bbd1f3
   2b8fc:	f47f0f00 	.word	0xf47f0f00
   2b900:	f44faf70 	.word	0xf44faf70
   2b904:	4b496180 	.word	0x4b496180
   2b908:	681b4a44 	.word	0x681b4a44
   2b90c:	b2db015b 	.word	0xb2db015b
   2b910:	332af882 	.word	0x332af882
   2b914:	1184f8c2 	.word	0x1184f8c2
   2b918:	b0076051 	.word	0xb0076051
   2b91c:	8ff0e8bd 	.word	0x8ff0e8bd
   2b920:	4b432206 	.word	0x4b432206
   2b924:	b007601a 	.word	0xb007601a
   2b928:	8ff0e8bd 	.word	0x8ff0e8bd
   2b92c:	fd12f001 	.word	0xfd12f001
   2b930:	fe7ef001 	.word	0xfe7ef001
   2b934:	d1492800 	.word	0xd1492800
   2b938:	f8c64b3e 	.word	0xf8c64b3e
   2b93c:	681b011c 	.word	0x681b011c
   2b940:	9b019301 	.word	0x9b019301
   2b944:	f8d34b36 	.word	0xf8d34b36
   2b948:	07d0230c 	.word	0x07d0230c
   2b94c:	af2cf57f 	.word	0xaf2cf57f
   2b950:	f2482000 	.word	0xf2482000
   2b954:	49380202 	.word	0x49380202
   2b958:	0100f8c3 	.word	0x0100f8c3
   2b95c:	91026809 	.word	0x91026809
   2b960:	f8d39902 	.word	0xf8d39902
   2b964:	42933614 	.word	0x42933614
   2b968:	d81ed040 	.word	0xd81ed040
   2b96c:	d04f2b00 	.word	0xd04f2b00
   2b970:	d9422b02 	.word	0xd9422b02
   2b974:	0201f248 	.word	0x0201f248
   2b978:	d1494293 	.word	0xd1494293
   2b97c:	22072003 	.word	0x22072003
   2b980:	4b2e492b 	.word	0x4b2e492b
   2b984:	601a6008 	.word	0x601a6008
   2b988:	4d29e7cd 	.word	0x4d29e7cd
   2b98c:	f8c36829 	.word	0xf8c36829
   2b990:	29012108 	.word	0x29012108
   2b994:	d05d492a 	.word	0xd05d492a
   2b998:	9203680a 	.word	0x9203680a
   2b99c:	f8d39a03 	.word	0xf8d39a03
   2b9a0:	06db330c 	.word	0x06db330c
   2b9a4:	af10f53f 	.word	0xaf10f53f
   2b9a8:	4a26e716 	.word	0x4a26e716
   2b9ac:	d8144293 	.word	0xd8144293
   2b9b0:	6f88f1b3 	.word	0x6f88f1b3
   2b9b4:	f248d814 	.word	0xf248d814
   2b9b8:	42930203 	.word	0x42930203
   2b9bc:	2003d128 	.word	0x2003d128
   2b9c0:	491b2204 	.word	0x491b2204
   2b9c4:	60084b1d 	.word	0x60084b1d
   2b9c8:	e7ac601a 	.word	0xe7ac601a
   2b9cc:	f88423e0 	.word	0xf88423e0
   2b9d0:	6065332a 	.word	0x6065332a
   2b9d4:	e8bdb007 	.word	0xe8bdb007
   2b9d8:	4a1b8ff0 	.word	0x4a1b8ff0
   2b9dc:	d1174293 	.word	0xd1174293
   2b9e0:	49132003 	.word	0x49132003
   2b9e4:	60084a15 	.word	0x60084a15
   2b9e8:	e79c6013 	.word	0xe79c6013
   2b9ec:	22062003 	.word	0x22062003
   2b9f0:	4b12490f 	.word	0x4b12490f
   2b9f4:	601a6008 	.word	0x601a6008
   2b9f8:	2303e795 	.word	0x2303e795
   2b9fc:	490c4618 	.word	0x490c4618
   2ba00:	600b4a0e 	.word	0x600b4a0e
   2ba04:	b0076013 	.word	0xb0076013
   2ba08:	4ff0e8bd 	.word	0x4ff0e8bd
   2ba0c:	bbeef7ff 	.word	0xbbeef7ff
   2ba10:	49072303 	.word	0x49072303
   2ba14:	600b4a09 	.word	0x600b4a09
   2ba18:	e7846013 	.word	0xe7846013
   2ba1c:	e000e100 	.word	0xe000e100
   2ba20:	4002a000 	.word	0x4002a000
   2ba24:	4002a110 	.word	0x4002a110
   2ba28:	200249b4 	.word	0x200249b4
   2ba2c:	200249ac 	.word	0x200249ac
   2ba30:	200249b0 	.word	0x200249b0
   2ba34:	4002a11c 	.word	0x4002a11c
   2ba38:	4002a100 	.word	0x4002a100
   2ba3c:	200249a8 	.word	0x200249a8
   2ba40:	4002a108 	.word	0x4002a108
   2ba44:	04400004 	.word	0x04400004
   2ba48:	05500001 	.word	0x05500001
   2ba4c:	200249b8 	.word	0x200249b8
   2ba50:	2002a302 	.word	0x2002a302
   2ba54:	680b4a37 	.word	0x680b4a37
   2ba58:	93056812 	.word	0x93056812
   2ba5c:	48366893 	.word	0x48366893
   2ba60:	60034936 	.word	0x60034936
   2ba64:	9a056854 	.word	0x9a056854
   2ba68:	b16b600c 	.word	0xb16b600c
   2ba6c:	681bb164 	.word	0x681bb164
   2ba70:	d8022b10 	.word	0xd8022b10
   2ba74:	2a106822 	.word	0x2a106822
   2ba78:	2103d90c 	.word	0x2103d90c
   2ba7c:	0206f24c 	.word	0x0206f24c
   2ba80:	60294b2f 	.word	0x60294b2f
   2ba84:	e74e601a 	.word	0xe74e601a
   2ba88:	22102103 	.word	0x22102103
   2ba8c:	60294b2c 	.word	0x60294b2c
   2ba90:	e748601a 	.word	0xe748601a
   2ba94:	80b4f8df 	.word	0x80b4f8df
   2ba98:	d0422a00 	.word	0xd0422a00
   2ba9c:	f1042300 	.word	0xf1042300
   2baa0:	461e0904 	.word	0x461e0904
   2baa4:	3601e002 	.word	0x3601e002
   2baa8:	d22a4296 	.word	0xd22a4296
   2baac:	19e100f7 	.word	0x19e100f7
   2bab0:	28006888 	.word	0x28006888
   2bab4:	f8d1d0f7 	.word	0xf8d1d0f7
   2bab8:	fa5fa004 	.word	0xfa5fa004
   2babc:	f1bafa8a 	.word	0xf1bafa8a
   2bac0:	d1f00f01 	.word	0xd1f00f01
   2bac4:	c004f8d1 	.word	0xc004f8d1
   2bac8:	0000f8b8 	.word	0x0000f8b8
   2bacc:	4f1cebb0 	.word	0x4f1cebb0
   2bad0:	684bd1e9 	.word	0x684bd1e9
   2bad4:	f0231c42 	.word	0xf0231c42
   2bad8:	f04303ff 	.word	0xf04303ff
   2badc:	604b0302 	.word	0x604b0302
   2bae0:	f8a86888 	.word	0xf8a86888
   2bae4:	f7ff2000 	.word	0xf7ff2000
   2bae8:	4653fb5d 	.word	0x4653fb5d
   2baec:	f859b938 	.word	0xf859b938
   2baf0:	f0222007 	.word	0xf0222007
   2baf4:	f04202ff 	.word	0xf04202ff
   2baf8:	f8490203 	.word	0xf8490203
   2bafc:	68222007 	.word	0x68222007
   2bb00:	2b00e7d1 	.word	0x2b00e7d1
   2bb04:	b912d1c8 	.word	0xb912d1c8
   2bb08:	4293e00b 	.word	0x4293e00b
   2bb0c:	eb04d009 	.word	0xeb04d009
   2bb10:	688801c3 	.word	0x688801c3
   2bb14:	28003301 	.word	0x28003301
   2bb18:	6849d0f7 	.word	0x6849d0f7
   2bb1c:	2901b2c9 	.word	0x2901b2c9
   2bb20:	2002d1f3 	.word	0x2002d1f3
   2bb24:	f44f4b07 	.word	0xf44f4b07
   2bb28:	4a076180 	.word	0x4a076180
   2bb2c:	6028681b 	.word	0x6028681b
   2bb30:	bf00e6ec 	.word	0xbf00e6ec
   2bb34:	200249bc 	.word	0x200249bc
   2bb38:	200249b8 	.word	0x200249b8
   2bb3c:	200249b4 	.word	0x200249b4
   2bb40:	200249a8 	.word	0x200249a8
   2bb44:	200249ac 	.word	0x200249ac
   2bb48:	e000e100 	.word	0xe000e100
   2bb4c:	2002a302 	.word	0x2002a302

0002bb50 <rpc_transport_msg_free>:
   2bb50:	4b18b430 	.word	0x4b18b430
   2bb54:	6825681c 	.word	0x6825681c
   2bb58:	68a3b16d 	.word	0x68a3b16d
   2bb5c:	d0274283 	.word	0xd0274283
   2bb60:	e0022300 	.word	0xe0022300
   2bb64:	42816889 	.word	0x42816889
   2bb68:	3301d019 	.word	0x3301d019
   2bb6c:	42ab00da 	.word	0x42ab00da
   2bb70:	0102eb04 	.word	0x0102eb04
   2bb74:	4b10d1f6 	.word	0x4b10d1f6
   2bb78:	6825681c 	.word	0x6825681c
   2bb7c:	68a3b16d 	.word	0x68a3b16d
   2bb80:	d0154283 	.word	0xd0154283
   2bb84:	e0022300 	.word	0xe0022300
   2bb88:	42816889 	.word	0x42816889
   2bb8c:	3301d007 	.word	0x3301d007
   2bb90:	429d00da 	.word	0x429d00da
   2bb94:	0102eb04 	.word	0x0102eb04
   2bb98:	bc30d1f6 	.word	0xbc30d1f6
   2bb9c:	32044770 	.word	0x32044770
   2bba0:	f02358a3 	.word	0xf02358a3
   2bba4:	f04303ff 	.word	0xf04303ff
   2bba8:	50a30303 	.word	0x50a30303
   2bbac:	4770bc30 	.word	0x4770bc30
   2bbb0:	e7f52204 	.word	0xe7f52204
   2bbb4:	200249b8 	.word	0x200249b8
   2bbb8:	200249b4 	.word	0x200249b4

0002bbbc <rpc_transport_ipc_rx_suspend>:
   2bbbc:	2400b410 	.word	0x2400b410
   2bbc0:	22042010 	.word	0x22042010
   2bbc4:	490b4b0a 	.word	0x490b4b0a
   2bbc8:	45a0f8c3 	.word	0x45a0f8c3
   2bbcc:	b083680c 	.word	0xb083680c
   2bbd0:	9c019401 	.word	0x9c019401
   2bbd4:	7126f5a1 	.word	0x7126f5a1
   2bbd8:	0308f8c3 	.word	0x0308f8c3
   2bbdc:	4b066809 	.word	0x4b066809
   2bbe0:	99009100 	.word	0x99009100
   2bbe4:	b003601a 	.word	0xb003601a
   2bbe8:	4b04f85d 	.word	0x4b04f85d
   2bbec:	bf004770 	.word	0xbf004770
   2bbf0:	4002a000 	.word	0x4002a000
   2bbf4:	4002a5a0 	.word	0x4002a5a0
   2bbf8:	200249b0 	.word	0x200249b0

0002bbfc <rpc_transport_ipc_rx_shutdown>:
   2bbfc:	4a32b4f0 	.word	0x4a32b4f0
   2bc00:	6813b08c 	.word	0x6813b08c
   2bc04:	d1fc2b06 	.word	0xd1fc2b06
   2bc08:	22012000 	.word	0x22012000
   2bc0c:	4b2f210a 	.word	0x4b2f210a
   2bc10:	f8c39000 	.word	0xf8c39000
   2bc14:	f8d32610 	.word	0xf8d32610
   2bc18:	90000610 	.word	0x90000610
   2bc1c:	f8c39800 	.word	0xf8c39800
   2bc20:	91012614 	.word	0x91012614
   2bc24:	b12b9b01 	.word	0xb12b9b01
   2bc28:	3b019b01 	.word	0x3b019b01
   2bc2c:	9b019301 	.word	0x9b019301
   2bc30:	d1f92b00 	.word	0xd1f92b00
   2bc34:	26012200 	.word	0x26012200
   2bc38:	24102504 	.word	0x24102504
   2bc3c:	4b244923 	.word	0x4b244923
   2bc40:	2614f8c1 	.word	0x2614f8c1
   2bc44:	3115f501 	.word	0x3115f501
   2bc48:	2590f8c3 	.word	0x2590f8c3
   2bc4c:	71c8f501 	.word	0x71c8f501
   2bc50:	20406809 	.word	0x20406809
   2bc54:	491f9102 	.word	0x491f9102
   2bc58:	f8c39f02 	.word	0xf8c39f02
   2bc5c:	680f2598 	.word	0x680f2598
   2bc60:	97032180 	.word	0x97032180
   2bc64:	f8dd4f1c 	.word	0xf8dd4f1c
   2bc68:	f8c3c00c 	.word	0xf8c3c00c
   2bc6c:	683f25a0 	.word	0x683f25a0
   2bc70:	4f1a9704 	.word	0x4f1a9704
   2bc74:	c010f8dd 	.word	0xc010f8dd
   2bc78:	25a8f8c3 	.word	0x25a8f8c3
   2bc7c:	9705683f 	.word	0x9705683f
   2bc80:	f8c39f05 	.word	0xf8c39f05
   2bc84:	4a1625ac 	.word	0x4a1625ac
   2bc88:	92066812 	.word	0x92066812
   2bc8c:	9f064a15 	.word	0x9f064a15
   2bc90:	6308f8c3 	.word	0x6308f8c3
   2bc94:	96076816 	.word	0x96076816
   2bc98:	f8c39e07 	.word	0xf8c39e07
   2bc9c:	68155308 	.word	0x68155308
   2bca0:	9d089508 	.word	0x9d089508
   2bca4:	4308f8c3 	.word	0x4308f8c3
   2bca8:	94096814 	.word	0x94096814
   2bcac:	f8c39c09 	.word	0xf8c39c09
   2bcb0:	68100308 	.word	0x68100308
   2bcb4:	980a900a 	.word	0x980a900a
   2bcb8:	1308f8c3 	.word	0x1308f8c3
   2bcbc:	930b6813 	.word	0x930b6813
   2bcc0:	b00c9b0b 	.word	0xb00c9b0b
   2bcc4:	4770bcf0 	.word	0x4770bcf0
   2bcc8:	200249b0 	.word	0x200249b0
   2bccc:	40005000 	.word	0x40005000
   2bcd0:	4002a000 	.word	0x4002a000
   2bcd4:	4002a598 	.word	0x4002a598
   2bcd8:	4002a5a0 	.word	0x4002a5a0
   2bcdc:	4002a5a8 	.word	0x4002a5a8
   2bce0:	4002a5ac 	.word	0x4002a5ac
   2bce4:	4002a308 	.word	0x4002a308

0002bce8 <block_cipher_df>:
   2bce8:	4ff0e92d 	.word	0x4ff0e92d
   2bcec:	7fc0f5b2 	.word	0x7fc0f5b2
   2bcf0:	7d49f5ad 	.word	0x7d49f5ad
   2bcf4:	8119f200 	.word	0x8119f200
   2bcf8:	460c4692 	.word	0x460c4692
   2bcfc:	72d0f44f 	.word	0x72d0f44f
   2bd00:	46812100 	.word	0x46812100
   2bd04:	f015a860 	.word	0xf015a860
   2bd08:	a81afe74 	.word	0xa81afe74
   2bd0c:	fd5af00a 	.word	0xfd5af00a
   2bd10:	23302000 	.word	0x23302000
   2bd14:	ea4fad66 	.word	0xea4fad66
   2bd18:	f8ad221a 	.word	0xf8ad221a
   2bd1c:	f88d0190 	.word	0xf88d0190
   2bd20:	46212192 	.word	0x46212192
   2bd24:	46284652 	.word	0x46284652
   2bd28:	3197f88d 	.word	0x3197f88d
   2bd2c:	a193f88d 	.word	0xa193f88d
   2bd30:	f015ae06 	.word	0xf015ae06
   2bd34:	2280fe3e 	.word	0x2280fe3e
   2bd38:	f8054633 	.word	0xf8054633
   2bd3c:	af0e200a 	.word	0xaf0e200a
   2bd40:	f8031b99 	.word	0xf8031b99
   2bd44:	429f1b01 	.word	0x429f1b01
   2bd48:	f44fd1fa 	.word	0xf44fd1fa
   2bd4c:	46317280 	.word	0x46317280
   2bd50:	f00aa81a 	.word	0xf00aa81a
   2bd54:	4683fd43 	.word	0x4683fd43
   2bd58:	f0402800 	.word	0xf0402800
   2bd5c:	900180c8 	.word	0x900180c8
   2bd60:	0a19f10a 	.word	0x0a19f10a
   2bd64:	2210ac02 	.word	0x2210ac02
   2bd68:	46202100 	.word	0x46202100
   2bd6c:	fe41f015 	.word	0xfe41f015
   2bd70:	ad6446d0 	.word	0xad6446d0
   2bd74:	f8157822 	.word	0xf8157822
   2bd78:	f8943c10 	.word	0xf8943c10
   2bd7c:	f815c001 	.word	0xf815c001
   2bd80:	78a01c0f 	.word	0x78a01c0f
   2bd84:	f8154053 	.word	0xf8154053
   2bd88:	ea8c2c0e 	.word	0xea8c2c0e
   2bd8c:	40500c01 	.word	0x40500c01
   2bd90:	f81578e1 	.word	0xf81578e1
   2bd94:	f8942c0d 	.word	0xf8942c0d
   2bd98:	4051e004 	.word	0x4051e004
   2bd9c:	2c0cf815 	.word	0x2c0cf815
   2bda0:	ea8e7023 	.word	0xea8e7023
   2bda4:	f8150202 	.word	0xf8150202
   2bda8:	f8943c0b 	.word	0xf8943c0b
   2bdac:	f884e005 	.word	0xf884e005
   2bdb0:	ea8ec001 	.word	0xea8ec001
   2bdb4:	f8150303 	.word	0xf8150303
   2bdb8:	f894cc0a 	.word	0xf894cc0a
   2bdbc:	70a0e006 	.word	0x70a0e006
   2bdc0:	0c0cea8e 	.word	0x0c0cea8e
   2bdc4:	0c09f815 	.word	0x0c09f815
   2bdc8:	e007f894 	.word	0xe007f894
   2bdcc:	ea8e70e1 	.word	0xea8e70e1
   2bdd0:	f8150000 	.word	0xf8150000
   2bdd4:	f8941c08 	.word	0xf8941c08
   2bdd8:	7122e008 	.word	0x7122e008
   2bddc:	0101ea8e 	.word	0x0101ea8e
   2bde0:	2c07f815 	.word	0x2c07f815
   2bde4:	e009f894 	.word	0xe009f894
   2bde8:	ea8e7163 	.word	0xea8e7163
   2bdec:	7aa30202 	.word	0x7aa30202
   2bdf0:	ec06f815 	.word	0xec06f815
   2bdf4:	c006f884 	.word	0xc006f884
   2bdf8:	030eea83 	.word	0x030eea83
   2bdfc:	722171e0 	.word	0x722171e0
   2be00:	72a37262 	.word	0x72a37262
   2be04:	f8157ae1 	.word	0xf8157ae1
   2be08:	f8943c05 	.word	0xf8943c05
   2be0c:	7b60c00c 	.word	0x7b60c00c
   2be10:	f815404b 	.word	0xf815404b
   2be14:	f8152c04 	.word	0xf8152c04
   2be18:	ea8c1c03 	.word	0xea8c1c03
   2be1c:	40410202 	.word	0x40410202
   2be20:	c00ef894 	.word	0xc00ef894
   2be24:	0c02f815 	.word	0x0c02f815
   2be28:	e00ff894 	.word	0xe00ff894
   2be2c:	0000ea8c 	.word	0x0000ea8c
   2be30:	cc01f815 	.word	0xcc01f815
   2be34:	ea8e72e3 	.word	0xea8e72e3
   2be38:	73220c0c 	.word	0x73220c0c
   2be3c:	73a07361 	.word	0x73a07361
   2be40:	46224623 	.word	0x46224623
   2be44:	a81a2101 	.word	0xa81a2101
   2be48:	c00ff884 	.word	0xc00ff884
   2be4c:	fc44f00b 	.word	0xfc44f00b
   2be50:	0f10f1b8 	.word	0x0f10f1b8
   2be54:	bf944683 	.word	0xbf944683
   2be58:	0808eba8 	.word	0x0808eba8
   2be5c:	0810f1a8 	.word	0x0810f1a8
   2be60:	d1452800 	.word	0xd1452800
   2be64:	f1b83510 	.word	0xf1b83510
   2be68:	d1830f00 	.word	0xd1830f00
   2be6c:	22109d01 	.word	0x22109d01
   2be70:	19784621 	.word	0x19784621
   2be74:	fd9df015 	.word	0xfd9df015
   2be78:	3183f89d 	.word	0x3183f89d
   2be7c:	0210f105 	.word	0x0210f105
   2be80:	2a303301 	.word	0x2a303301
   2be84:	f88d9201 	.word	0xf88d9201
   2be88:	f47f3183 	.word	0xf47f3183
   2be8c:	f44faf6c 	.word	0xf44faf6c
   2be90:	46397280 	.word	0x46397280
   2be94:	f00aa81a 	.word	0xf00aa81a
   2be98:	4683fca1 	.word	0x4683fca1
   2be9c:	464dbb40 	.word	0x464dbb40
   2bea0:	0830f109 	.word	0x0830f109
   2bea4:	461aab16 	.word	0x461aab16
   2bea8:	a81a2101 	.word	0xa81a2101
   2beac:	fc14f00b 	.word	0xfc14f00b
   2beb0:	b9e84683 	.word	0xb9e84683
   2beb4:	46282210 	.word	0x46282210
   2beb8:	4415a916 	.word	0x4415a916
   2bebc:	fd79f015 	.word	0xfd79f015
   2bec0:	d1ef4545 	.word	0xd1ef4545
   2bec4:	f00aa81a 	.word	0xf00aa81a
   2bec8:	a860fc83 	.word	0xa860fc83
   2becc:	71d0f44f 	.word	0x71d0f44f
   2bed0:	fcbaf006 	.word	0xfcbaf006
   2bed4:	21304638 	.word	0x21304638
   2bed8:	fcb6f006 	.word	0xfcb6f006
   2bedc:	21204630 	.word	0x21204630
   2bee0:	fcb2f006 	.word	0xfcb2f006
   2bee4:	21104620 	.word	0x21104620
   2bee8:	fcaef006 	.word	0xfcaef006
   2beec:	ac02e018 	.word	0xac02e018
   2bef0:	f00aa81a 	.word	0xf00aa81a
   2bef4:	a860fc6d 	.word	0xa860fc6d
   2bef8:	71d0f44f 	.word	0x71d0f44f
   2befc:	fca4f006 	.word	0xfca4f006
   2bf00:	21304638 	.word	0x21304638
   2bf04:	fca0f006 	.word	0xfca0f006
   2bf08:	21204630 	.word	0x21204630
   2bf0c:	fc9cf006 	.word	0xfc9cf006
   2bf10:	21104620 	.word	0x21104620
   2bf14:	fc98f006 	.word	0xfc98f006
   2bf18:	21304648 	.word	0x21304648
   2bf1c:	fc94f006 	.word	0xfc94f006
   2bf20:	f50d4658 	.word	0xf50d4658
   2bf24:	e8bd7d49 	.word	0xe8bd7d49
   2bf28:	f06f8ff0 	.word	0xf06f8ff0
   2bf2c:	e7f70b37 	.word	0xe7f70b37

0002bf30 <symbol_000078b>:
   2bf30:	72a0f44f 	.word	0x72a0f44f
   2bf34:	f0152100 	.word	0xf0152100
   2bf38:	bf00bd5c 	.word	0xbf00bd5c

0002bf3c <symbol_0001c64>:
   2bf3c:	b510b158 	.word	0xb510b158
   2bf40:	30204604 	.word	0x30204604
   2bf44:	fc44f00a 	.word	0xfc44f00a
   2bf48:	e8bd4620 	.word	0xe8bd4620
   2bf4c:	f44f4010 	.word	0xf44f4010
   2bf50:	f00671a0 	.word	0xf00671a0
   2bf54:	4770bc79 	.word	0x4770bc79

0002bf58 <symbol_000ccf0>:
   2bf58:	6983b5f0 	.word	0x6983b5f0
   2bf5c:	f5b3b0ed 	.word	0xf5b3b0ed
   2bf60:	f2007fc0 	.word	0xf2007fc0
   2bf64:	f5c380e1 	.word	0xf5c380e1
   2bf68:	429373c0 	.word	0x429373c0
   2bf6c:	80dcf0c0 	.word	0x80dcf0c0
   2bf70:	46154604 	.word	0x46154604
   2bf74:	f44f460e 	.word	0xf44f460e
   2bf78:	210072c0 	.word	0x210072c0
   2bf7c:	f015a80c 	.word	0xf015a80c
   2bf80:	a90cfd38 	.word	0xa90cfd38
   2bf84:	3138f8d4 	.word	0x3138f8d4
   2bf88:	f8d469a2 	.word	0xf8d469a2
   2bf8c:	4798013c 	.word	0x4798013c
   2bf90:	f0402800 	.word	0xf0402800
   2bf94:	69a780cc 	.word	0x69a780cc
   2bf98:	b94db106 	.word	0xb94db106
   2bf9c:	463aa90c 	.word	0x463aa90c
   2bfa0:	f7ff4608 	.word	0xf7ff4608
   2bfa4:	4605fea1 	.word	0x4605fea1
   2bfa8:	4628b188 	.word	0x4628b188
   2bfac:	bdf0b06d 	.word	0xbdf0b06d
   2bfb0:	462aab0c 	.word	0x462aab0c
   2bfb4:	463119d8 	.word	0x463119d8
   2bfb8:	fcfbf015 	.word	0xfcfbf015
   2bfbc:	a90c442f 	.word	0xa90c442f
   2bfc0:	4608463a 	.word	0x4608463a
   2bfc4:	fe90f7ff 	.word	0xfe90f7ff
   2bfc8:	28004605 	.word	0x28004605
   2bfcc:	4668d1ed 	.word	0x4668d1ed
   2bfd0:	46292230 	.word	0x46292230
   2bfd4:	fd0df015 	.word	0xfd0df015
   2bfd8:	f104462e 	.word	0xf104462e
   2bfdc:	7be20720 	.word	0x7be20720
   2bfe0:	0306eb0d 	.word	0x0306eb0d
   2bfe4:	b2d23201 	.word	0xb2d23201
   2bfe8:	2a0073e2 	.word	0x2a0073e2
   2bfec:	7ba2d14d 	.word	0x7ba2d14d
   2bff0:	b2d23201 	.word	0xb2d23201
   2bff4:	2a0073a2 	.word	0x2a0073a2
   2bff8:	7b62d147 	.word	0x7b62d147
   2bffc:	b2d23201 	.word	0xb2d23201
   2c000:	2a007362 	.word	0x2a007362
   2c004:	7b22d141 	.word	0x7b22d141
   2c008:	b2d23201 	.word	0xb2d23201
   2c00c:	2a007322 	.word	0x2a007322
   2c010:	7ae2d13b 	.word	0x7ae2d13b
   2c014:	b2d23201 	.word	0xb2d23201
   2c018:	2a0072e2 	.word	0x2a0072e2
   2c01c:	7aa2d135 	.word	0x7aa2d135
   2c020:	b2d23201 	.word	0xb2d23201
   2c024:	2a0072a2 	.word	0x2a0072a2
   2c028:	7a62d12f 	.word	0x7a62d12f
   2c02c:	b2d23201 	.word	0xb2d23201
   2c030:	bb527262 	.word	0xbb527262
   2c034:	32017a22 	.word	0x32017a22
   2c038:	7222b2d2 	.word	0x7222b2d2
   2c03c:	79e2bb2a 	.word	0x79e2bb2a
   2c040:	b2d23201 	.word	0xb2d23201
   2c044:	bb0271e2 	.word	0xbb0271e2
   2c048:	320179a2 	.word	0x320179a2
   2c04c:	71a2b2d2 	.word	0x71a2b2d2
   2c050:	7962b9da 	.word	0x7962b9da
   2c054:	b2d23201 	.word	0xb2d23201
   2c058:	b9b27162 	.word	0xb9b27162
   2c05c:	32017922 	.word	0x32017922
   2c060:	7122b2d2 	.word	0x7122b2d2
   2c064:	78e2b98a 	.word	0x78e2b98a
   2c068:	b2d23201 	.word	0xb2d23201
   2c06c:	b96270e2 	.word	0xb96270e2
   2c070:	320178a2 	.word	0x320178a2
   2c074:	70a2b2d2 	.word	0x70a2b2d2
   2c078:	7862b93a 	.word	0x7862b93a
   2c07c:	b2d23201 	.word	0xb2d23201
   2c080:	b9127062 	.word	0xb9127062
   2c084:	32017822 	.word	0x32017822
   2c088:	46227022 	.word	0x46227022
   2c08c:	46382101 	.word	0x46382101
   2c090:	fb22f00b 	.word	0xfb22f00b
   2c094:	28004605 	.word	0x28004605
   2c098:	3610d187 	.word	0x3610d187
   2c09c:	d19e2e30 	.word	0xd19e2e30
   2c0a0:	9b0c9901 	.word	0x9b0c9901
   2c0a4:	9a0d9800 	.word	0x9a0d9800
   2c0a8:	404a4058 	.word	0x404a4058
   2c0ac:	99029b0e 	.word	0x99029b0e
   2c0b0:	40599000 	.word	0x40599000
   2c0b4:	9b0f9803 	.word	0x9b0f9803
   2c0b8:	40439201 	.word	0x40439201
   2c0bc:	98049a10 	.word	0x98049a10
   2c0c0:	40509102 	.word	0x40509102
   2c0c4:	9a119905 	.word	0x9a119905
   2c0c8:	40519303 	.word	0x40519303
   2c0cc:	9a069b12 	.word	0x9a069b12
   2c0d0:	405a9004 	.word	0x405a9004
   2c0d4:	9b139807 	.word	0x9b139807
   2c0d8:	40589105 	.word	0x40589105
   2c0dc:	9b149908 	.word	0x9b149908
   2c0e0:	40599206 	.word	0x40599206
   2c0e4:	9b159a09 	.word	0x9b159a09
   2c0e8:	405a9007 	.word	0x405a9007
   2c0ec:	9b16980a 	.word	0x9b16980a
   2c0f0:	40439108 	.word	0x40439108
   2c0f4:	2309e9cd 	.word	0x2309e9cd
   2c0f8:	9b179a0b 	.word	0x9b179a0b
   2c0fc:	40534638 	.word	0x40534638
   2c100:	f44f4669 	.word	0xf44f4669
   2c104:	930b7280 	.word	0x930b7280
   2c108:	fb68f00a 	.word	0xfb68f00a
   2c10c:	28004605 	.word	0x28004605
   2c110:	af4bf47f 	.word	0xaf4bf47f
   2c114:	a9082210 	.word	0xa9082210
   2c118:	f0154620 	.word	0xf0154620
   2c11c:	2301fc4a 	.word	0x2301fc4a
   2c120:	61234628 	.word	0x61234628
   2c124:	bdf0b06d 	.word	0xbdf0b06d
   2c128:	0537f06f 	.word	0x0537f06f
   2c12c:	f06fe73d 	.word	0xf06fe73d
   2c130:	e73a0533 	.word	0xe73a0533

0002c134 <symbol_0001e1e>:
   2c134:	41f0e92d 	.word	0x41f0e92d
   2c138:	46164604 	.word	0x46164604
   2c13c:	b0882220 	.word	0xb0882220
   2c140:	460f18a5 	.word	0x460f18a5
   2c144:	21004668 	.word	0x21004668
   2c148:	f0154698 	.word	0xf0154698
   2c14c:	4628fc52 	.word	0x4628fc52
   2c150:	fb38f00a 	.word	0xfb38f00a
   2c154:	f2422220 	.word	0xf2422220
   2c158:	f8c47310 	.word	0xf8c47310
   2c15c:	e9c47138 	.word	0xe9c47138
   2c160:	46282306 	.word	0x46282306
   2c164:	613cf8c4 	.word	0x613cf8c4
   2c168:	f44f4669 	.word	0xf44f4669
   2c16c:	f00a7280 	.word	0xf00a7280
   2c170:	b920fb35 	.word	0xb920fb35
   2c174:	46204641 	.word	0x46204641
   2c178:	f7ff9a0e 	.word	0xf7ff9a0e
   2c17c:	b008feed 	.word	0xb008feed
   2c180:	81f0e8bd 	.word	0x81f0e8bd

0002c184 <symbol_000268c>:
   2c184:	4ff0e92d 	.word	0x4ff0e92d
   2c188:	6f80f5b2 	.word	0x6f80f5b2
   2c18c:	f200b0f9 	.word	0xf200b0f9
   2c190:	46048226 	.word	0x46048226
   2c194:	460f4615 	.word	0x460f4615
   2c198:	46682230 	.word	0x46682230
   2c19c:	f0152100 	.word	0xf0152100
   2c1a0:	6922fc28 	.word	0x6922fc28
   2c1a4:	429a69e3 	.word	0x429a69e3
   2c1a8:	6963dc01 	.word	0x6963dc01
   2c1ac:	69a3b313 	.word	0x69a3b313
   2c1b0:	7fc0f5b3 	.word	0x7fc0f5b3
   2c1b4:	8216f200 	.word	0x8216f200
   2c1b8:	0a60f10d 	.word	0x0a60f10d
   2c1bc:	72c0f44f 	.word	0x72c0f44f
   2c1c0:	46502100 	.word	0x46502100
   2c1c4:	fc15f015 	.word	0xfc15f015
   2c1c8:	f8d44651 	.word	0xf8d44651
   2c1cc:	69a23138 	.word	0x69a23138
   2c1d0:	013cf8d4 	.word	0x013cf8d4
   2c1d4:	f06f4798 	.word	0xf06f4798
   2c1d8:	b9380933 	.word	0xb9380933
   2c1dc:	465169a2 	.word	0x465169a2
   2c1e0:	f7ff4650 	.word	0xf7ff4650
   2c1e4:	4681fd81 	.word	0x4681fd81
   2c1e8:	d0772800 	.word	0xd0772800
   2c1ec:	b0794648 	.word	0xb0794648
   2c1f0:	8ff0e8bd 	.word	0x8ff0e8bd
   2c1f4:	0820f104 	.word	0x0820f104
   2c1f8:	f0002d00 	.word	0xf0002d00
   2c1fc:	ae0c812b 	.word	0xae0c812b
   2c200:	2d10e00e 	.word	0x2d10e00e
   2c204:	bf2846a9 	.word	0xbf2846a9
   2c208:	0910f04f 	.word	0x0910f04f
   2c20c:	46314638 	.word	0x46314638
   2c210:	f015464a 	.word	0xf015464a
   2c214:	ebb5fbce 	.word	0xebb5fbce
   2c218:	444f0509 	.word	0x444f0509
   2c21c:	811af000 	.word	0x811af000
   2c220:	33017be3 	.word	0x33017be3
   2c224:	73e3b2db 	.word	0x73e3b2db
   2c228:	d14d2b00 	.word	0xd14d2b00
   2c22c:	33017ba3 	.word	0x33017ba3
   2c230:	73a3b2db 	.word	0x73a3b2db
   2c234:	d1472b00 	.word	0xd1472b00
   2c238:	33017b63 	.word	0x33017b63
   2c23c:	7363b2db 	.word	0x7363b2db
   2c240:	d1412b00 	.word	0xd1412b00
   2c244:	33017b23 	.word	0x33017b23
   2c248:	7323b2db 	.word	0x7323b2db
   2c24c:	d13b2b00 	.word	0xd13b2b00
   2c250:	33017ae3 	.word	0x33017ae3
   2c254:	72e3b2db 	.word	0x72e3b2db
   2c258:	d1352b00 	.word	0xd1352b00
   2c25c:	33017aa3 	.word	0x33017aa3
   2c260:	72a3b2db 	.word	0x72a3b2db
   2c264:	d12f2b00 	.word	0xd12f2b00
   2c268:	33017a63 	.word	0x33017a63
   2c26c:	7263b2db 	.word	0x7263b2db
   2c270:	7a23bb53 	.word	0x7a23bb53
   2c274:	b2db3301 	.word	0xb2db3301
   2c278:	bb2b7223 	.word	0xbb2b7223
   2c27c:	330179e3 	.word	0x330179e3
   2c280:	71e3b2db 	.word	0x71e3b2db
   2c284:	79a3bb03 	.word	0x79a3bb03
   2c288:	b2db3301 	.word	0xb2db3301
   2c28c:	b9db71a3 	.word	0xb9db71a3
   2c290:	33017963 	.word	0x33017963
   2c294:	7163b2db 	.word	0x7163b2db
   2c298:	7923b9b3 	.word	0x7923b9b3
   2c29c:	b2db3301 	.word	0xb2db3301
   2c2a0:	b98b7123 	.word	0xb98b7123
   2c2a4:	330178e3 	.word	0x330178e3
   2c2a8:	70e3b2db 	.word	0x70e3b2db
   2c2ac:	78a3b963 	.word	0x78a3b963
   2c2b0:	b2db3301 	.word	0xb2db3301
   2c2b4:	b93b70a3 	.word	0xb93b70a3
   2c2b8:	33017863 	.word	0x33017863
   2c2bc:	7063b2db 	.word	0x7063b2db
   2c2c0:	7823b913 	.word	0x7823b913
   2c2c4:	70233301 	.word	0x70233301
   2c2c8:	46224633 	.word	0x46224633
   2c2cc:	46402101 	.word	0x46402101
   2c2d0:	fa02f00b 	.word	0xfa02f00b
   2c2d4:	28004681 	.word	0x28004681
   2c2d8:	e787d093 	.word	0xe787d093
   2c2dc:	4630ae0c 	.word	0x4630ae0c
   2c2e0:	46492230 	.word	0x46492230
   2c2e4:	fb85f015 	.word	0xfb85f015
   2c2e8:	f10446cb 	.word	0xf10446cb
   2c2ec:	7be20820 	.word	0x7be20820
   2c2f0:	030beb06 	.word	0x030beb06
   2c2f4:	b2d23201 	.word	0xb2d23201
   2c2f8:	2a0073e2 	.word	0x2a0073e2
   2c2fc:	7ba2d14d 	.word	0x7ba2d14d
   2c300:	b2d23201 	.word	0xb2d23201
   2c304:	2a0073a2 	.word	0x2a0073a2
   2c308:	7b62d147 	.word	0x7b62d147
   2c30c:	b2d23201 	.word	0xb2d23201
   2c310:	2a007362 	.word	0x2a007362
   2c314:	7b22d141 	.word	0x7b22d141
   2c318:	b2d23201 	.word	0xb2d23201
   2c31c:	2a007322 	.word	0x2a007322
   2c320:	7ae2d13b 	.word	0x7ae2d13b
   2c324:	b2d23201 	.word	0xb2d23201
   2c328:	2a0072e2 	.word	0x2a0072e2
   2c32c:	7aa2d135 	.word	0x7aa2d135
   2c330:	b2d23201 	.word	0xb2d23201
   2c334:	2a0072a2 	.word	0x2a0072a2
   2c338:	7a62d12f 	.word	0x7a62d12f
   2c33c:	b2d23201 	.word	0xb2d23201
   2c340:	bb527262 	.word	0xbb527262
   2c344:	32017a22 	.word	0x32017a22
   2c348:	7222b2d2 	.word	0x7222b2d2
   2c34c:	79e2bb2a 	.word	0x79e2bb2a
   2c350:	b2d23201 	.word	0xb2d23201
   2c354:	bb0271e2 	.word	0xbb0271e2
   2c358:	320179a2 	.word	0x320179a2
   2c35c:	71a2b2d2 	.word	0x71a2b2d2
   2c360:	7962b9da 	.word	0x7962b9da
   2c364:	b2d23201 	.word	0xb2d23201
   2c368:	b9b27162 	.word	0xb9b27162
   2c36c:	32017922 	.word	0x32017922
   2c370:	7122b2d2 	.word	0x7122b2d2
   2c374:	78e2b98a 	.word	0x78e2b98a
   2c378:	b2d23201 	.word	0xb2d23201
   2c37c:	b96270e2 	.word	0xb96270e2
   2c380:	320178a2 	.word	0x320178a2
   2c384:	70a2b2d2 	.word	0x70a2b2d2
   2c388:	7862b93a 	.word	0x7862b93a
   2c38c:	b2d23201 	.word	0xb2d23201
   2c390:	b9127062 	.word	0xb9127062
   2c394:	32017822 	.word	0x32017822
   2c398:	46227022 	.word	0x46227022
   2c39c:	46402101 	.word	0x46402101
   2c3a0:	f99af00b 	.word	0xf99af00b
   2c3a4:	28004681 	.word	0x28004681
   2c3a8:	af20f47f 	.word	0xaf20f47f
   2c3ac:	0b10f10b 	.word	0x0b10f10b
   2c3b0:	0f30f1bb 	.word	0x0f30f1bb
   2c3b4:	6870d19b 	.word	0x6870d19b
   2c3b8:	3000f8da 	.word	0x3000f8da
   2c3bc:	f8da6831 	.word	0xf8da6831
   2c3c0:	40592004 	.word	0x40592004
   2c3c4:	f8da4042 	.word	0xf8da4042
   2c3c8:	68b03008 	.word	0x68b03008
   2c3cc:	ea836031 	.word	0xea836031
   2c3d0:	f8da0100 	.word	0xf8da0100
   2c3d4:	68f0300c 	.word	0x68f0300c
   2c3d8:	40586072 	.word	0x40586072
   2c3dc:	f8da6932 	.word	0xf8da6932
   2c3e0:	60b13010 	.word	0x60b13010
   2c3e4:	f8da4053 	.word	0xf8da4053
   2c3e8:	69721014 	.word	0x69721014
   2c3ec:	404a60f0 	.word	0x404a60f0
   2c3f0:	f8da69b0 	.word	0xf8da69b0
   2c3f4:	61331018 	.word	0x61331018
   2c3f8:	f8da4048 	.word	0xf8da4048
   2c3fc:	69f1301c 	.word	0x69f1301c
   2c400:	404b6172 	.word	0x404b6172
   2c404:	f8da6a32 	.word	0xf8da6a32
   2c408:	61b01020 	.word	0x61b01020
   2c40c:	6a704051 	.word	0x6a704051
   2c410:	2024f8da 	.word	0x2024f8da
   2c414:	405061f3 	.word	0x405061f3
   2c418:	3028f8da 	.word	0x3028f8da
   2c41c:	62316ab2 	.word	0x62316ab2
   2c420:	e9c64053 	.word	0xe9c64053
   2c424:	6af20309 	.word	0x6af20309
   2c428:	302cf8da 	.word	0x302cf8da
   2c42c:	40534631 	.word	0x40534631
   2c430:	f44f4640 	.word	0xf44f4640
   2c434:	62f37280 	.word	0x62f37280
   2c438:	f9d0f00a 	.word	0xf9d0f00a
   2c43c:	28004681 	.word	0x28004681
   2c440:	aed4f47f 	.word	0xaed4f47f
   2c444:	a9142210 	.word	0xa9142210
   2c448:	f0154620 	.word	0xf0154620
   2c44c:	2301fab2 	.word	0x2301fab2
   2c450:	e6d16123 	.word	0xe6d16123
   2c454:	0a60f10d 	.word	0x0a60f10d
   2c458:	22304650 	.word	0x22304650
   2c45c:	f0152100 	.word	0xf0152100
   2c460:	2500fac8 	.word	0x2500fac8
   2c464:	eb0a7be2 	.word	0xeb0a7be2
   2c468:	32010305 	.word	0x32010305
   2c46c:	73e2b2d2 	.word	0x73e2b2d2
   2c470:	d14d2a00 	.word	0xd14d2a00
   2c474:	32017ba2 	.word	0x32017ba2
   2c478:	73a2b2d2 	.word	0x73a2b2d2
   2c47c:	d1472a00 	.word	0xd1472a00
   2c480:	32017b62 	.word	0x32017b62
   2c484:	7362b2d2 	.word	0x7362b2d2
   2c488:	d1412a00 	.word	0xd1412a00
   2c48c:	32017b22 	.word	0x32017b22
   2c490:	7322b2d2 	.word	0x7322b2d2
   2c494:	d13b2a00 	.word	0xd13b2a00
   2c498:	32017ae2 	.word	0x32017ae2
   2c49c:	72e2b2d2 	.word	0x72e2b2d2
   2c4a0:	d1352a00 	.word	0xd1352a00
   2c4a4:	32017aa2 	.word	0x32017aa2
   2c4a8:	72a2b2d2 	.word	0x72a2b2d2
   2c4ac:	d12f2a00 	.word	0xd12f2a00
   2c4b0:	32017a62 	.word	0x32017a62
   2c4b4:	7262b2d2 	.word	0x7262b2d2
   2c4b8:	7a22bb52 	.word	0x7a22bb52
   2c4bc:	b2d23201 	.word	0xb2d23201
   2c4c0:	bb2a7222 	.word	0xbb2a7222
   2c4c4:	320179e2 	.word	0x320179e2
   2c4c8:	71e2b2d2 	.word	0x71e2b2d2
   2c4cc:	79a2bb02 	.word	0x79a2bb02
   2c4d0:	b2d23201 	.word	0xb2d23201
   2c4d4:	b9da71a2 	.word	0xb9da71a2
   2c4d8:	32017962 	.word	0x32017962
   2c4dc:	7162b2d2 	.word	0x7162b2d2
   2c4e0:	7922b9b2 	.word	0x7922b9b2
   2c4e4:	b2d23201 	.word	0xb2d23201
   2c4e8:	b98a7122 	.word	0xb98a7122
   2c4ec:	320178e2 	.word	0x320178e2
   2c4f0:	70e2b2d2 	.word	0x70e2b2d2
   2c4f4:	78a2b962 	.word	0x78a2b962
   2c4f8:	b2d23201 	.word	0xb2d23201
   2c4fc:	b93a70a2 	.word	0xb93a70a2
   2c500:	32017862 	.word	0x32017862
   2c504:	7062b2d2 	.word	0x7062b2d2
   2c508:	7822b912 	.word	0x7822b912
   2c50c:	70223201 	.word	0x70223201
   2c510:	21014622 	.word	0x21014622
   2c514:	f00b4640 	.word	0xf00b4640
   2c518:	4681f8df 	.word	0x4681f8df
   2c51c:	f47f2800 	.word	0xf47f2800
   2c520:	3510ae65 	.word	0x3510ae65
   2c524:	d19d2d30 	.word	0xd19d2d30
   2c528:	1200e9da 	.word	0x1200e9da
   2c52c:	98019b00 	.word	0x98019b00
   2c530:	40424059 	.word	0x40424059
   2c534:	3008f8da 	.word	0x3008f8da
   2c538:	f8ca9802 	.word	0xf8ca9802
   2c53c:	ea831000 	.word	0xea831000
   2c540:	f8da0100 	.word	0xf8da0100
   2c544:	9803300c 	.word	0x9803300c
   2c548:	2004f8ca 	.word	0x2004f8ca
   2c54c:	9a044058 	.word	0x9a044058
   2c550:	3010f8da 	.word	0x3010f8da
   2c554:	1008f8ca 	.word	0x1008f8ca
   2c558:	99054053 	.word	0x99054053
   2c55c:	2014f8da 	.word	0x2014f8da
   2c560:	000cf8ca 	.word	0x000cf8ca
   2c564:	9806404a 	.word	0x9806404a
   2c568:	1018f8da 	.word	0x1018f8da
   2c56c:	3010f8ca 	.word	0x3010f8ca
   2c570:	9b074048 	.word	0x9b074048
   2c574:	101cf8da 	.word	0x101cf8da
   2c578:	2014f8ca 	.word	0x2014f8ca
   2c57c:	f8da404b 	.word	0xf8da404b
   2c580:	99082020 	.word	0x99082020
   2c584:	0018f8ca 	.word	0x0018f8ca
   2c588:	f8da4051 	.word	0xf8da4051
   2c58c:	9a090024 	.word	0x9a090024
   2c590:	301cf8ca 	.word	0x301cf8ca
   2c594:	f8da4050 	.word	0xf8da4050
   2c598:	9a0a3028 	.word	0x9a0a3028
   2c59c:	1020f8ca 	.word	0x1020f8ca
   2c5a0:	e9ca4053 	.word	0xe9ca4053
   2c5a4:	9a0b0309 	.word	0x9a0b0309
   2c5a8:	302cf8da 	.word	0x302cf8da
   2c5ac:	40534640 	.word	0x40534640
   2c5b0:	f44f4651 	.word	0xf44f4651
   2c5b4:	f8ca7280 	.word	0xf8ca7280
   2c5b8:	f00a302c 	.word	0xf00a302c
   2c5bc:	4681f90f 	.word	0x4681f90f
   2c5c0:	f47f2800 	.word	0xf47f2800
   2c5c4:	2210ae13 	.word	0x2210ae13
   2c5c8:	4620a920 	.word	0x4620a920
   2c5cc:	f9f1f015 	.word	0xf9f1f015
   2c5d0:	69234648 	.word	0x69234648
   2c5d4:	61233301 	.word	0x61233301
   2c5d8:	e8bdb079 	.word	0xe8bdb079
   2c5dc:	f06f8ff0 	.word	0xf06f8ff0
   2c5e0:	e6030935 	.word	0xe6030935
   2c5e4:	0937f06f 	.word	0x0937f06f
   2c5e8:	bf00e600 	.word	0xbf00e600

0002c5ec <packet_handler_create>:
   2c5ec:	b5382801 	.word	0xb5382801
   2c5f0:	4614460d 	.word	0x4614460d
   2c5f4:	db11d00d 	.word	0xdb11d00d
   2c5f8:	dc0f2803 	.word	0xdc0f2803
   2c5fc:	f00a2010 	.word	0xf00a2010
   2c600:	2218f8a1 	.word	0x2218f8a1
   2c604:	4b08b120 	.word	0x4b08b120
   2c608:	44136045 	.word	0x44136045
   2c60c:	60036084 	.word	0x60036084
   2c610:	2014bd38 	.word	0x2014bd38
   2c614:	f896f00a 	.word	0xf896f00a
   2c618:	e7f32230 	.word	0xe7f32230
   2c61c:	f00a200c 	.word	0xf00a200c
   2c620:	2200f891 	.word	0x2200f891
   2c624:	bf00e7ee 	.word	0xbf00e7ee
   2c628:	00043c54 	.word	0x00043c54

0002c62c <packet_handler_delete>:
   2c62c:	4604b510 	.word	0x4604b510
   2c630:	691b6803 	.word	0x691b6803
   2c634:	68234798 	.word	0x68234798
   2c638:	695b4620 	.word	0x695b4620
   2c63c:	46204798 	.word	0x46204798
   2c640:	4010e8bd 	.word	0x4010e8bd
   2c644:	b89cf00a 	.word	0xb89cf00a

0002c648 <symbol_0002469>:
   2c648:	460db570 	.word	0x460db570
   2c64c:	f0014604 	.word	0xf0014604
   2c650:	2d03fc23 	.word	0x2d03fc23
   2c654:	d1257025 	.word	0xd1257025
   2c658:	25012308 	.word	0x25012308
   2c65c:	49154a14 	.word	0x49154a14
   2c660:	622360a3 	.word	0x622360a3
   2c664:	62e36523 	.word	0x62e36523
   2c668:	60e263a3 	.word	0x60e263a3
   2c66c:	4a134b12 	.word	0x4a134b12
   2c670:	48144e13 	.word	0x48144e13
   2c674:	65606321 	.word	0x65606321
   2c678:	64a363e2 	.word	0x64a363e2
   2c67c:	61e56065 	.word	0x61e56065
   2c680:	62a564e5 	.word	0x62a564e5
   2c684:	e9c46365 	.word	0xe9c46365
   2c688:	62665510 	.word	0x62665510
   2c68c:	f0061d20 	.word	0xf0061d20
   2c690:	65a0fe69 	.word	0x65a0fe69
   2c694:	004cf104 	.word	0x004cf104
   2c698:	fe64f006 	.word	0xfe64f006
   2c69c:	0517e9c4 	.word	0x0517e9c4
   2c6a0:	bd702000 	.word	0xbd702000
   2c6a4:	f0014620 	.word	0xf0014620
   2c6a8:	4807fbf7 	.word	0x4807fbf7
   2c6ac:	bf00bd70 	.word	0xbf00bd70
   2c6b0:	00043d1c 	.word	0x00043d1c
   2c6b4:	00043cbc 	.word	0x00043cbc
   2c6b8:	20031c60 	.word	0x20031c60
   2c6bc:	00043cdc 	.word	0x00043cdc
   2c6c0:	00043c9c 	.word	0x00043c9c
   2c6c4:	00043cfc 	.word	0x00043cfc
   2c6c8:	ffffb180 	.word	0xffffb180

0002c6cc <secure_client_socket>:
   2c6cc:	41f0e92d 	.word	0x41f0e92d
   2c6d0:	680b460c 	.word	0x680b460c
   2c6d4:	f4236989 	.word	0xf4236989
   2c6d8:	60233300 	.word	0x60233300
   2c6dc:	23006822 	.word	0x23006822
   2c6e0:	1280f422 	.word	0x1280f422
   2c6e4:	f2476022 	.word	0xf2476022
   2c6e8:	68270281 	.word	0x68270281
   2c6ec:	f0024606 	.word	0xf0024606
   2c6f0:	2800ff09 	.word	0x2800ff09
   2c6f4:	4605d03b 	.word	0x4605d03b
   2c6f8:	eb064b28 	.word	0xeb064b28
   2c6fc:	eb0301c6 	.word	0xeb0301c6
   2c700:	22240181 	.word	0x22240181
   2c704:	f0153014 	.word	0xf0153014
   2c708:	68abf954 	.word	0x68abf954
   2c70c:	8090f8df 	.word	0x8090f8df
   2c710:	60ab3324 	.word	0x60ab3324
   2c714:	46296823 	.word	0x46296823
   2c718:	0308ea03 	.word	0x0308ea03
   2c71c:	030af043 	.word	0x030af043
   2c720:	f2476023 	.word	0xf2476023
   2c724:	463b0281 	.word	0x463b0281
   2c728:	f0024620 	.word	0xf0024620
   2c72c:	b960ff0b 	.word	0xb960ff0b
   2c730:	00db6823 	.word	0x00db6823
   2c734:	f04fd40b 	.word	0xf04fd40b
   2c738:	f64f33ff 	.word	0xf64f33ff
   2c73c:	210b72ff 	.word	0x210b72ff
   2c740:	f0024630 	.word	0xf0024630
   2c744:	b128ff13 	.word	0xb128ff13
   2c748:	e8bd6027 	.word	0xe8bd6027
   2c74c:	207381f0 	.word	0x207381f0
   2c750:	81f0e8bd 	.word	0x81f0e8bd
   2c754:	6280f04f 	.word	0x6280f04f
   2c758:	46114630 	.word	0x46114630
   2c75c:	33fff04f 	.word	0x33fff04f
   2c760:	ff04f002 	.word	0xff04f002
   2c764:	2873b130 	.word	0x2873b130
   2c768:	6027d0ef 	.word	0x6027d0ef
   2c76c:	200ce7ed 	.word	0x200ce7ed
   2c770:	81f0e8bd 	.word	0x81f0e8bd
   2c774:	f0236823 	.word	0xf0236823
   2c778:	60236380 	.word	0x60236380
   2c77c:	ea036823 	.word	0xea036823
   2c780:	f0480808 	.word	0xf0480808
   2c784:	6023030c 	.word	0x6023030c
   2c788:	f4436823 	.word	0xf4436823
   2c78c:	60233300 	.word	0x60233300
   2c790:	f4436823 	.word	0xf4436823
   2c794:	60231380 	.word	0x60231380
   2c798:	81f0e8bd 	.word	0x81f0e8bd
   2c79c:	200249c0 	.word	0x200249c0
   2c7a0:	ffff0000 	.word	0xffff0000

0002c7a4 <tls_interface_init>:
   2c7a4:	47702000 	.word	0x47702000

0002c7a8 <tls_interface_open>:
   2c7a8:	f020b538 	.word	0xf020b538
   2c7ac:	2b020308 	.word	0x2b020308
   2c7b0:	202fd006 	.word	0x202fd006
   2c7b4:	fd4af7f6 	.word	0xfd4af7f6
   2c7b8:	35fff04f 	.word	0x35fff04f
   2c7bc:	bd384628 	.word	0xbd384628
   2c7c0:	1e4a4614 	.word	0x1e4a4614
   2c7c4:	d8282a01 	.word	0xd8282a01
   2c7c8:	2901bb14 	.word	0x2901bb14
   2c7cc:	2301bf06 	.word	0x2301bf06
   2c7d0:	7482f44f 	.word	0x7482f44f
   2c7d4:	7487f44f 	.word	0x7487f44f
   2c7d8:	f002461a 	.word	0xf002461a
   2c7dc:	1e05fef3 	.word	0x1e05fef3
   2c7e0:	4b15db26 	.word	0x4b15db26
   2c7e4:	00c5eb05 	.word	0x00c5eb05
   2c7e8:	0080eb03 	.word	0x0080eb03
   2c7ec:	49132224 	.word	0x49132224
   2c7f0:	f8dff015 	.word	0xf8dff015
   2c7f4:	f0024628 	.word	0xf0024628
   2c7f8:	6803fd0d 	.word	0x6803fd0d
   2c7fc:	f4236144 	.word	0xf4236144
   2c800:	60031380 	.word	0x60031380
   2c804:	f4236803 	.word	0xf4236803
   2c808:	60033300 	.word	0x60033300
   2c80c:	bd384628 	.word	0xbd384628
   2c810:	d0082901 	.word	0xd0082901
   2c814:	7f87f5b4 	.word	0x7f87f5b4
   2c818:	2016d0de 	.word	0x2016d0de
   2c81c:	fd16f7f6 	.word	0xfd16f7f6
   2c820:	35fff04f 	.word	0x35fff04f
   2c824:	f5b4e7ca 	.word	0xf5b4e7ca
   2c828:	d1f67f82 	.word	0xd1f67f82
   2c82c:	e7d3460b 	.word	0xe7d3460b
   2c830:	35fff04f 	.word	0x35fff04f
   2c834:	bf00e7c2 	.word	0xbf00e7c2
   2c838:	200249c0 	.word	0x200249c0
   2c83c:	00043d3c 	.word	0x00043d3c

0002c840 <tls_interface_close>:
   2c840:	4604b510 	.word	0x4604b510
   2c844:	fce6f002 	.word	0xfce6f002
   2c848:	4620b120 	.word	0x4620b120
   2c84c:	4010e8bd 	.word	0x4010e8bd
   2c850:	bf64f002 	.word	0xbf64f002
   2c854:	f7f62009 	.word	0xf7f62009
   2c858:	f04ffcf9 	.word	0xf04ffcf9
   2c85c:	bd1030ff 	.word	0xbd1030ff

0002c860 <tls_interface_sendto>:
   2c860:	47f0e92d 	.word	0x47f0e92d
   2c864:	e9dd460d 	.word	0xe9dd460d
   2c868:	46168908 	.word	0x46168908
   2c86c:	4604461f 	.word	0x4604461f
   2c870:	fcd0f002 	.word	0xfcd0f002
   2c874:	d03b2800 	.word	0xd03b2800
   2c878:	b29b6803 	.word	0xb29b6803
   2c87c:	d0392b0c 	.word	0xd0392b0c
   2c880:	b29b6803 	.word	0xb29b6803
   2c884:	d1112b0b 	.word	0xd1112b0b
   2c888:	eb044b20 	.word	0xeb044b20
   2c88c:	f81304c4 	.word	0xf81304c4
   2c890:	2b023024 	.word	0x2b023024
   2c894:	6903d038 	.word	0x6903d038
   2c898:	bf142b01 	.word	0xbf142b01
   2c89c:	202a2039 	.word	0x202a2039
   2c8a0:	fcd4f7f6 	.word	0xfcd4f7f6
   2c8a4:	30fff04f 	.word	0x30fff04f
   2c8a8:	87f0e8bd 	.word	0x87f0e8bd
   2c8ac:	2b016903 	.word	0x2b016903
   2c8b0:	2b02d00b 	.word	0x2b02d00b
   2c8b4:	2039d001 	.word	0x2039d001
   2c8b8:	6803e7f2 	.word	0x6803e7f2
   2c8bc:	2b02b29b 	.word	0x2b02b29b
   2c8c0:	6803d007 	.word	0x6803d007
   2c8c4:	2b04b29b 	.word	0x2b04b29b
   2c8c8:	6803d003 	.word	0x6803d003
   2c8cc:	2b05b29b 	.word	0x2b05b29b
   2c8d0:	4b0ed1f1 	.word	0x4b0ed1f1
   2c8d4:	02c4eb04 	.word	0x02c4eb04
   2c8d8:	3022f813 	.word	0x3022f813
   2c8dc:	d1ea2b02 	.word	0xd1ea2b02
   2c8e0:	46204601 	.word	0x46204601
   2c8e4:	fef2f7ff 	.word	0xfef2f7ff
   2c8e8:	d0032800 	.word	0xd0032800
   2c8ec:	e7d9dcd8 	.word	0xe7d9dcd8
   2c8f0:	e7d52009 	.word	0xe7d52009
   2c8f4:	8908e9cd 	.word	0x8908e9cd
   2c8f8:	4632463b 	.word	0x4632463b
   2c8fc:	46204629 	.word	0x46204629
   2c900:	47f0e8bd 	.word	0x47f0e8bd
   2c904:	bf7af002 	.word	0xbf7af002
   2c908:	e7c92023 	.word	0xe7c92023
   2c90c:	200249c0 	.word	0x200249c0

0002c910 <tls_interface_recvfrom>:
   2c910:	47f0e92d 	.word	0x47f0e92d
   2c914:	e9dd460d 	.word	0xe9dd460d
   2c918:	46168908 	.word	0x46168908
   2c91c:	4604461f 	.word	0x4604461f
   2c920:	fc78f002 	.word	0xfc78f002
   2c924:	d0382800 	.word	0xd0382800
   2c928:	b29b6803 	.word	0xb29b6803
   2c92c:	d00f2b0c 	.word	0xd00f2b0c
   2c930:	b29b6803 	.word	0xb29b6803
   2c934:	d00b2b0d 	.word	0xd00b2b0d
   2c938:	2b016903 	.word	0x2b016903
   2c93c:	2b02d01a 	.word	0x2b02d01a
   2c940:	2023d010 	.word	0x2023d010
   2c944:	fc82f7f6 	.word	0xfc82f7f6
   2c948:	30fff04f 	.word	0x30fff04f
   2c94c:	87f0e8bd 	.word	0x87f0e8bd
   2c950:	8908e9cd 	.word	0x8908e9cd
   2c954:	4632463b 	.word	0x4632463b
   2c958:	46204629 	.word	0x46204629
   2c95c:	47f0e8bd 	.word	0x47f0e8bd
   2c960:	b886f003 	.word	0xb886f003
   2c964:	b29b6803 	.word	0xb29b6803
   2c968:	d0072b02 	.word	0xd0072b02
   2c96c:	b29b6803 	.word	0xb29b6803
   2c970:	d0032b04 	.word	0xd0032b04
   2c974:	b29b6803 	.word	0xb29b6803
   2c978:	d1e22b05 	.word	0xd1e22b05
   2c97c:	eb044b08 	.word	0xeb044b08
   2c980:	f81302c4 	.word	0xf81302c4
   2c984:	2b023022 	.word	0x2b023022
   2c988:	4601d1db 	.word	0x4601d1db
   2c98c:	f7ff4620 	.word	0xf7ff4620
   2c990:	2800fe9d 	.word	0x2800fe9d
   2c994:	dcd5d0dc 	.word	0xdcd5d0dc
   2c998:	2009e7d6 	.word	0x2009e7d6
   2c99c:	bf00e7d2 	.word	0xbf00e7d2
   2c9a0:	200249c0 	.word	0x200249c0

0002c9a4 <tls_interface_bind>:
   2c9a4:	43f8e92d 	.word	0x43f8e92d
   2c9a8:	4617460c 	.word	0x4617460c
   2c9ac:	f0024606 	.word	0xf0024606
   2c9b0:	2800fc31 	.word	0x2800fc31
   2c9b4:	6803d04c 	.word	0x6803d04c
   2c9b8:	b29b4605 	.word	0xb29b4605
   2c9bc:	d1502b02 	.word	0xd1502b02
   2c9c0:	463a4621 	.word	0x463a4621
   2c9c4:	f0034630 	.word	0xf0034630
   2c9c8:	4604fa29 	.word	0x4604fa29
   2c9cc:	2c00b120 	.word	0x2c00b120
   2c9d0:	4620dc3f 	.word	0x4620dc3f
   2c9d4:	83f8e8bd 	.word	0x83f8e8bd
   2c9d8:	07c6eb06 	.word	0x07c6eb06
   2c9dc:	8094f8df 	.word	0x8094f8df
   2c9e0:	f81800bf 	.word	0xf81800bf
   2c9e4:	2b013007 	.word	0x2b013007
   2c9e8:	4603d1f3 	.word	0x4603d1f3
   2c9ec:	0281f247 	.word	0x0281f247
   2c9f0:	463069a9 	.word	0x463069a9
   2c9f4:	fd86f002 	.word	0xfd86f002
   2c9f8:	b3b04681 	.word	0xb3b04681
   2c9fc:	0107eb08 	.word	0x0107eb08
   2ca00:	30142224 	.word	0x30142224
   2ca04:	ffd5f014 	.word	0xffd5f014
   2ca08:	3008f8d9 	.word	0x3008f8d9
   2ca0c:	33244649 	.word	0x33244649
   2ca10:	3008f8c9 	.word	0x3008f8c9
   2ca14:	2304682a 	.word	0x2304682a
   2ca18:	04120c12 	.word	0x04120c12
   2ca1c:	020af042 	.word	0x020af042
   2ca20:	4628602a 	.word	0x4628602a
   2ca24:	0281f247 	.word	0x0281f247
   2ca28:	fd8cf002 	.word	0xfd8cf002
   2ca2c:	682bb9f8 	.word	0x682bb9f8
   2ca30:	d41800db 	.word	0xd41800db
   2ca34:	f04f4630 	.word	0xf04f4630
   2ca38:	f64f33ff 	.word	0xf64f33ff
   2ca3c:	210b72ff 	.word	0x210b72ff
   2ca40:	fd94f002 	.word	0xfd94f002
   2ca44:	d0c42800 	.word	0xd0c42800
   2ca48:	46042304 	.word	0x46042304
   2ca4c:	e7be602b 	.word	0xe7be602b
   2ca50:	46202409 	.word	0x46202409
   2ca54:	34fff04f 	.word	0x34fff04f
   2ca58:	fbf8f7f6 	.word	0xfbf8f7f6
   2ca5c:	e8bd4620 	.word	0xe8bd4620
   2ca60:	242d83f8 	.word	0x242d83f8
   2ca64:	2473e7f5 	.word	0x2473e7f5
   2ca68:	240ce7f3 	.word	0x240ce7f3
   2ca6c:	4604e7f1 	.word	0x4604e7f1
   2ca70:	bf00e7ad 	.word	0xbf00e7ad
   2ca74:	200249c0 	.word	0x200249c0

0002ca78 <tls_interface_connect>:
   2ca78:	460eb5f8 	.word	0x460eb5f8
   2ca7c:	46044617 	.word	0x46044617
   2ca80:	fbc8f002 	.word	0xfbc8f002
   2ca84:	4b13b1e8 	.word	0x4b13b1e8
   2ca88:	02c4eb04 	.word	0x02c4eb04
   2ca8c:	3022f813 	.word	0x3022f813
   2ca90:	d11c2b02 	.word	0xd11c2b02
   2ca94:	46056803 	.word	0x46056803
   2ca98:	2b02b29b 	.word	0x2b02b29b
   2ca9c:	6803d003 	.word	0x6803d003
   2caa0:	2b04b29b 	.word	0x2b04b29b
   2caa4:	463ad113 	.word	0x463ad113
   2caa8:	46204631 	.word	0x46204631
   2caac:	f90cf003 	.word	0xf90cf003
   2cab0:	2800b110 	.word	0x2800b110
   2cab4:	bdf8dc06 	.word	0xbdf8dc06
   2cab8:	46204629 	.word	0x46204629
   2cabc:	fe06f7ff 	.word	0xfe06f7ff
   2cac0:	2009e7f7 	.word	0x2009e7f7
   2cac4:	fbc2f7f6 	.word	0xfbc2f7f6
   2cac8:	30fff04f 	.word	0x30fff04f
   2cacc:	202dbdf8 	.word	0x202dbdf8
   2cad0:	bf00e7f8 	.word	0xbf00e7f8
   2cad4:	200249c0 	.word	0x200249c0

0002cad8 <tls_interface_listen>:
   2cad8:	47f0e92d 	.word	0x47f0e92d
   2cadc:	4606460f 	.word	0x4606460f
   2cae0:	fb98f002 	.word	0xfb98f002
   2cae4:	d06b2800 	.word	0xd06b2800
   2cae8:	46046903 	.word	0x46046903
   2caec:	d1652b01 	.word	0xd1652b01
   2caf0:	b29b6803 	.word	0xb29b6803
   2caf4:	d0562b04 	.word	0xd0562b04
   2caf8:	b29b6823 	.word	0xb29b6823
   2cafc:	d15d2b0b 	.word	0xd15d2b0b
   2cb00:	f8df00f3 	.word	0xf8df00f3
   2cb04:	199a90c0 	.word	0x199a90c0
   2cb08:	2022f819 	.word	0x2022f819
   2cb0c:	d1552a01 	.word	0xd1552a01
   2cb10:	44332201 	.word	0x44332201
   2cb14:	f809009d 	.word	0xf809009d
   2cb18:	69a12005 	.word	0x69a12005
   2cb1c:	f2472300 	.word	0xf2472300
   2cb20:	46300281 	.word	0x46300281
   2cb24:	8000f8d4 	.word	0x8000f8d4
   2cb28:	fcecf002 	.word	0xfcecf002
   2cb2c:	28004682 	.word	0x28004682
   2cb30:	eb09d042 	.word	0xeb09d042
   2cb34:	22240105 	.word	0x22240105
   2cb38:	f0143014 	.word	0xf0143014
   2cb3c:	f8daff3a 	.word	0xf8daff3a
   2cb40:	46513008 	.word	0x46513008
   2cb44:	f8ca3324 	.word	0xf8ca3324
   2cb48:	68223008 	.word	0x68223008
   2cb4c:	0c124643 	.word	0x0c124643
   2cb50:	f0420412 	.word	0xf0420412
   2cb54:	6022020a 	.word	0x6022020a
   2cb58:	f2474620 	.word	0xf2474620
   2cb5c:	f0020281 	.word	0xf0020281
   2cb60:	b9e0fcf1 	.word	0xb9e0fcf1
   2cb64:	00db6823 	.word	0x00db6823
   2cb68:	f04fd40e 	.word	0xf04fd40e
   2cb6c:	f64f33ff 	.word	0xf64f33ff
   2cb70:	210b72ff 	.word	0x210b72ff
   2cb74:	f0024630 	.word	0xf0024630
   2cb78:	b160fcf9 	.word	0xb160fcf9
   2cb7c:	f8c42800 	.word	0xf8c42800
   2cb80:	dc028000 	.word	0xdc028000
   2cb84:	87f0e8bd 	.word	0x87f0e8bd
   2cb88:	f7f62073 	.word	0xf7f62073
   2cb8c:	f04ffb5f 	.word	0xf04ffb5f
   2cb90:	e8bd30ff 	.word	0xe8bd30ff
   2cb94:	463987f0 	.word	0x463987f0
   2cb98:	f0034630 	.word	0xf0034630
   2cb9c:	2800f9d5 	.word	0x2800f9d5
   2cba0:	e8bddcf3 	.word	0xe8bddcf3
   2cba4:	00f387f0 	.word	0x00f387f0
   2cba8:	9018f8df 	.word	0x9018f8df
   2cbac:	f819199a 	.word	0xf819199a
   2cbb0:	2a022022 	.word	0x2a022022
   2cbb4:	e7abd1a0 	.word	0xe7abd1a0
   2cbb8:	e7e6200c 	.word	0xe7e6200c
   2cbbc:	e7e4202d 	.word	0xe7e4202d
   2cbc0:	e7e22009 	.word	0xe7e22009
   2cbc4:	200249c0 	.word	0x200249c0

0002cbc8 <tls_interface_accept>:
   2cbc8:	460cb5f8 	.word	0x460cb5f8
   2cbcc:	461f4616 	.word	0x461f4616
   2cbd0:	f0024605 	.word	0xf0024605
   2cbd4:	2800fb1f 	.word	0x2800fb1f
   2cbd8:	6800d03b 	.word	0x6800d03b
   2cbdc:	2806b280 	.word	0x2806b280
   2cbe0:	4621d137 	.word	0x4621d137
   2cbe4:	4632463b 	.word	0x4632463b
   2cbe8:	f0034628 	.word	0xf0034628
   2cbec:	4604fa23 	.word	0x4604fa23
   2cbf0:	2c00b118 	.word	0x2c00b118
   2cbf4:	4620dc2e 	.word	0x4620dc2e
   2cbf8:	4628bdf8 	.word	0x4628bdf8
   2cbfc:	fb0af002 	.word	0xfb0af002
   2cc00:	4f186803 	.word	0x4f186803
   2cc04:	3300f423 	.word	0x3300f423
   2cc08:	68036003 	.word	0x68036003
   2cc0c:	05c5eb05 	.word	0x05c5eb05
   2cc10:	1380f423 	.word	0x1380f423
   2cc14:	60034606 	.word	0x60034606
   2cc18:	0185eb07 	.word	0x0185eb07
   2cc1c:	46382224 	.word	0x46382224
   2cc20:	fec7f014 	.word	0xfec7f014
   2cc24:	703b2302 	.word	0x703b2302
   2cc28:	46206833 	.word	0x46206833
   2cc2c:	041b0c1b 	.word	0x041b0c1b
   2cc30:	030bf043 	.word	0x030bf043
   2cc34:	f64f6033 	.word	0xf64f6033
   2cc38:	f04f72ff 	.word	0xf04f72ff
   2cc3c:	210c33ff 	.word	0x210c33ff
   2cc40:	fc94f002 	.word	0xfc94f002
   2cc44:	28004604 	.word	0x28004604
   2cc48:	2000d0d5 	.word	0x2000d0d5
   2cc4c:	fd66f002 	.word	0xfd66f002
   2cc50:	2409e7cf 	.word	0x2409e7cf
   2cc54:	f04f4620 	.word	0xf04f4620
   2cc58:	f7f634ff 	.word	0xf7f634ff
   2cc5c:	4620faf7 	.word	0x4620faf7
   2cc60:	bf00bdf8 	.word	0xbf00bdf8
   2cc64:	200249c0 	.word	0x200249c0

0002cc68 <tls_interface_setopt>:
   2cc68:	41f0e92d 	.word	0x41f0e92d
   2cc6c:	7f8df5b1 	.word	0x7f8df5b1
   2cc70:	d11d9f06 	.word	0xd11d9f06
   2cc74:	b1c3461c 	.word	0xb1c3461c
   2cc78:	4605b1bf 	.word	0x4605b1bf
   2cc7c:	f0024616 	.word	0xf0024616
   2cc80:	b1c8fac9 	.word	0xb1c8fac9
   2cc84:	b29b6803 	.word	0xb29b6803
   2cc88:	d0072b02 	.word	0xd0072b02
   2cc8c:	b29b6803 	.word	0xb29b6803
   2cc90:	d0032b04 	.word	0xd0032b04
   2cc94:	b29b6803 	.word	0xb29b6803
   2cc98:	d10d2b05 	.word	0xd10d2b05
   2cc9c:	2e033e01 	.word	0x2e033e01
   2cca0:	e8dfd851 	.word	0xe8dfd851
   2cca4:	3225f006 	.word	0x3225f006
   2cca8:	200e0b18 	.word	0x200e0b18
   2ccac:	81f0e8bd 	.word	0x81f0e8bd
   2ccb0:	41f0e8bd 	.word	0x41f0e8bd
   2ccb4:	baf6f003 	.word	0xbaf6f003
   2ccb8:	e7f72009 	.word	0xe7f72009
   2ccbc:	d1392f04 	.word	0xd1392f04
   2ccc0:	2b026823 	.word	0x2b026823
   2ccc4:	4a21d836 	.word	0x4a21d836
   2ccc8:	05c5eb05 	.word	0x05c5eb05
   2cccc:	0585eb02 	.word	0x0585eb02
   2ccd0:	200070ab 	.word	0x200070ab
   2ccd4:	2f01e7ea 	.word	0x2f01e7ea
   2ccd8:	7823d12c 	.word	0x7823d12c
   2ccdc:	d8292b01 	.word	0xd8292b01
   2cce0:	eb054a1a 	.word	0xeb054a1a
   2cce4:	eb0205c5 	.word	0xeb0205c5
   2cce8:	70530285 	.word	0x70530285
   2ccec:	e7dd2000 	.word	0xe7dd2000
   2ccf0:	d11f2f04 	.word	0xd11f2f04
   2ccf4:	b1f86820 	.word	0xb1f86820
   2ccf8:	d11b2801 	.word	0xd11b2801
   2ccfc:	eb054b13 	.word	0xeb054b13
   2cd00:	f80305c5 	.word	0xf80305c5
   2cd04:	20000025 	.word	0x20000025
   2cd08:	ea5fe7d0 	.word	0xea5fe7d0
   2cd0c:	d0110c97 	.word	0xd0110c97
   2cd10:	0603f017 	.word	0x0603f017
   2cd14:	eb05d10e 	.word	0xeb05d10e
   2cd18:	00ad05c5 	.word	0x00ad05c5
   2cd1c:	1d284b0b 	.word	0x1d284b0b
   2cd20:	442b4418 	.word	0x442b4418
   2cd24:	4621463a 	.word	0x4621463a
   2cd28:	c003f883 	.word	0xc003f883
   2cd2c:	fe41f014 	.word	0xfe41f014
   2cd30:	e7bb4630 	.word	0xe7bb4630
   2cd34:	e7b92016 	.word	0xe7b92016
   2cd38:	4b042202 	.word	0x4b042202
   2cd3c:	05c5eb05 	.word	0x05c5eb05
   2cd40:	2025f803 	.word	0x2025f803
   2cd44:	202ae7b2 	.word	0x202ae7b2
   2cd48:	bf00e7b0 	.word	0xbf00e7b0
   2cd4c:	200249c0 	.word	0x200249c0

0002cd50 <tls_interface_getopt>:
   2cd50:	41f0e92d 	.word	0x41f0e92d
   2cd54:	7f8df5b1 	.word	0x7f8df5b1
   2cd58:	d1129f06 	.word	0xd1129f06
   2cd5c:	b16b461d 	.word	0xb16b461d
   2cd60:	4606b167 	.word	0x4606b167
   2cd64:	f0024614 	.word	0xf0024614
   2cd68:	2800fa55 	.word	0x2800fa55
   2cd6c:	3c01d04f 	.word	0x3c01d04f
   2cd70:	d8522c03 	.word	0xd8522c03
   2cd74:	f004e8df 	.word	0xf004e8df
   2cd78:	09152139 	.word	0x09152139
   2cd7c:	e8bd200e 	.word	0xe8bd200e
   2cd80:	e8bd81f0 	.word	0xe8bd81f0
   2cd84:	f00341f0 	.word	0xf00341f0
   2cd88:	683bbb49 	.word	0x683bbb49
   2cd8c:	d13c2b04 	.word	0xd13c2b04
   2cd90:	eb064b23 	.word	0xeb064b23
   2cd94:	eb0306c6 	.word	0xeb0306c6
   2cd98:	78b30686 	.word	0x78b30686
   2cd9c:	602b2000 	.word	0x602b2000
   2cda0:	683be7ed 	.word	0x683be7ed
   2cda4:	d1302b04 	.word	0xd1302b04
   2cda8:	eb064b1d 	.word	0xeb064b1d
   2cdac:	eb0306c6 	.word	0xeb0306c6
   2cdb0:	78730686 	.word	0x78730686
   2cdb4:	602b2000 	.word	0x602b2000
   2cdb8:	eb06e7e1 	.word	0xeb06e7e1
   2cdbc:	491806c6 	.word	0x491806c6
   2cdc0:	00b6683b 	.word	0x00b6683b
   2cdc4:	f013198a 	.word	0xf013198a
   2cdc8:	78d00403 	.word	0x78d00403
   2cdcc:	089bd121 	.word	0x089bd121
   2cdd0:	bf284283 	.word	0xbf284283
   2cdd4:	009a4603 	.word	0x009a4603
   2cdd8:	3604b1db 	.word	0x3604b1db
   2cddc:	603a4431 	.word	0x603a4431
   2cde0:	f0144628 	.word	0xf0144628
   2cde4:	4620fde6 	.word	0x4620fde6
   2cde8:	683be7c9 	.word	0x683be7c9
   2cdec:	d10c2b04 	.word	0xd10c2b04
   2cdf0:	eb064b0b 	.word	0xeb064b0b
   2cdf4:	f81306c6 	.word	0xf81306c6
   2cdf8:	20003026 	.word	0x20003026
   2cdfc:	0301f1a3 	.word	0x0301f1a3
   2ce00:	f383fab3 	.word	0xf383fab3
   2ce04:	602b095b 	.word	0x602b095b
   2ce08:	2016e7b9 	.word	0x2016e7b9
   2ce0c:	2009e7b7 	.word	0x2009e7b7
   2ce10:	2800e7b5 	.word	0x2800e7b5
   2ce14:	6038d1f9 	.word	0x6038d1f9
   2ce18:	202ae7b1 	.word	0x202ae7b1
   2ce1c:	bf00e7af 	.word	0xbf00e7af
   2ce20:	200249c0 	.word	0x200249c0

0002ce24 <tls_rpc_ip_event_handler>:
   2ce24:	f248b538 	.word	0xf248b538
   2ce28:	42ab0581 	.word	0x42ab0581
   2ce2c:	d053460c 	.word	0xd053460c
   2ce30:	0182f249 	.word	0x0182f249
   2ce34:	d02d428b 	.word	0xd02d428b
   2ce38:	0102f248 	.word	0x0102f248
   2ce3c:	d001428b 	.word	0xd001428b
   2ce40:	bd382001 	.word	0xbd382001
   2ce44:	d0fb2c00 	.word	0xd0fb2c00
   2ce48:	f5b36963 	.word	0xf5b36963
   2ce4c:	d0027f82 	.word	0xd0027f82
   2ce50:	7f87f5b3 	.word	0x7f87f5b3
   2ce54:	6823d1f4 	.word	0x6823d1f4
   2ce58:	5300f023 	.word	0x5300f023
   2ce5c:	69556023 	.word	0x69556023
   2ce60:	d1482d00 	.word	0xd1482d00
   2ce64:	0c1b6823 	.word	0x0c1b6823
   2ce68:	f043041b 	.word	0xf043041b
   2ce6c:	60230305 	.word	0x60230305
   2ce70:	00da6823 	.word	0x00da6823
   2ce74:	4b25d50c 	.word	0x4b25d50c
   2ce78:	02c0eb00 	.word	0x02c0eb00
   2ce7c:	3022f813 	.word	0x3022f813
   2ce80:	d1052b02 	.word	0xd1052b02
   2ce84:	f7ff4621 	.word	0xf7ff4621
   2ce88:	b108fc21 	.word	0xb108fc21
   2ce8c:	d1352873 	.word	0xd1352873
   2ce90:	bd382000 	.word	0xbd382000
   2ce94:	d0fb2c00 	.word	0xd0fb2c00
   2ce98:	b29b6823 	.word	0xb29b6823
   2ce9c:	d1f72b0b 	.word	0xd1f72b0b
   2cea0:	bb486910 	.word	0xbb486910
   2cea4:	f0436823 	.word	0xf0436823
   2cea8:	60236380 	.word	0x60236380
   2ceac:	00db6823 	.word	0x00db6823
   2ceb0:	6823d5ee 	.word	0x6823d5ee
   2ceb4:	6380f023 	.word	0x6380f023
   2ceb8:	68236023 	.word	0x68236023
   2cebc:	041b0c1b 	.word	0x041b0c1b
   2cec0:	030cf043 	.word	0x030cf043
   2cec4:	68236023 	.word	0x68236023
   2cec8:	3300f443 	.word	0x3300f443
   2cecc:	68236023 	.word	0x68236023
   2ced0:	1380f443 	.word	0x1380f443
   2ced4:	bd386023 	.word	0xbd386023
   2ced8:	d0d92900 	.word	0xd0d92900
   2cedc:	b29b680b 	.word	0xb29b680b
   2cee0:	d1d52b0a 	.word	0xd1d52b0a
   2cee4:	b9386950 	.word	0xb9386950
   2cee8:	0c1b680b 	.word	0x0c1b680b
   2ceec:	f043041b 	.word	0xf043041b
   2cef0:	600b030b 	.word	0x600b030b
   2cef4:	4628bd38 	.word	0x4628bd38
   2cef8:	fafaf002 	.word	0xfafaf002
   2cefc:	68236060 	.word	0x68236060
   2cf00:	f4432000 	.word	0xf4432000
   2cf04:	60232380 	.word	0x60232380
   2cf08:	bf00bd38 	.word	0xbf00bd38
   2cf0c:	200249c0 	.word	0x200249c0

0002cf10 <rpc_gnss_serialize_utc>:
   2cf10:	b1d84603 	.word	0xb1d84603
   2cf14:	2000b1d1 	.word	0x2000b1d1
   2cf18:	70482201 	.word	0x70482201
   2cf1c:	685a700a 	.word	0x685a700a
   2cf20:	f8c12010 	.word	0xf8c12010
   2cf24:	681a2006 	.word	0x681a2006
   2cf28:	2002f8c1 	.word	0x2002f8c1
   2cf2c:	200af993 	.word	0x200af993
   2cf30:	f993730a 	.word	0xf993730a
   2cf34:	73ca200d 	.word	0x73ca200d
   2cf38:	200cf993 	.word	0x200cf993
   2cf3c:	7a1a738a 	.word	0x7a1a738a
   2cf40:	7ada728a 	.word	0x7ada728a
   2cf44:	7a5b734a 	.word	0x7a5b734a
   2cf48:	477072cb 	.word	0x477072cb
   2cf4c:	30fff04f 	.word	0x30fff04f
   2cf50:	bf004770 	.word	0xbf004770

0002cf54 <rpc_gnss_serialize_ephe>:
   2cf54:	28004603 	.word	0x28004603
   2cf58:	2900d04b 	.word	0x2900d04b
   2cf5c:	2000d049 	.word	0x2000d049
   2cf60:	70482202 	.word	0x70482202
   2cf64:	68da700a 	.word	0x68da700a
   2cf68:	f8c12040 	.word	0xf8c12040
   2cf6c:	f9b3200b 	.word	0xf9b3200b
   2cf70:	f8a12008 	.word	0xf8a12008
   2cf74:	f9932009 	.word	0xf9932009
   2cf78:	720a2006 	.word	0x720a2006
   2cf7c:	2044f9b3 	.word	0x2044f9b3
   2cf80:	f9b3878a 	.word	0xf9b3878a
   2cf84:	86ca203e 	.word	0x86ca203e
   2cf88:	2042f9b3 	.word	0x2042f9b3
   2cf8c:	f9b3874a 	.word	0xf9b3874a
   2cf90:	868a203c 	.word	0x868a203c
   2cf94:	2046f9b3 	.word	0x2046f9b3
   2cf98:	f9b387ca 	.word	0xf9b387ca
   2cf9c:	870a2040 	.word	0x870a2040
   2cfa0:	201cf9b3 	.word	0x201cf9b3
   2cfa4:	6a9a830a 	.word	0x6a9a830a
   2cfa8:	2022f8c1 	.word	0x2022f8c1
   2cfac:	744a7c9a 	.word	0x744a7c9a
   2cfb0:	70ca785a 	.word	0x70ca785a
   2cfb4:	62ca6b5a 	.word	0x62ca6b5a
   2cfb8:	202cf9b3 	.word	0x202cf9b3
   2cfbc:	885a84ca 	.word	0x885a84ca
   2cfc0:	6a1a808a 	.word	0x6a1a808a
   2cfc4:	201af8c1 	.word	0x201af8c1
   2cfc8:	630a6b9a 	.word	0x630a6b9a
   2cfcc:	f8c16a5a 	.word	0xf8c16a5a
   2cfd0:	6b1a201e 	.word	0x6b1a201e
   2cfd4:	781a628a 	.word	0x781a628a
   2cfd8:	f993708a 	.word	0xf993708a
   2cfdc:	73ca2010 	.word	0x73ca2010
   2cfe0:	80ca889a 	.word	0x80ca889a
   2cfe4:	824a8a9a 	.word	0x824a8a9a
   2cfe8:	740a7c5a 	.word	0x740a7c5a
   2cfec:	614b699b 	.word	0x614b699b
   2cff0:	f04f4770 	.word	0xf04f4770
   2cff4:	477030ff 	.word	0x477030ff

0002cff8 <rpc_gnss_serialize_alm>:
   2cff8:	b3604603 	.word	0xb3604603
   2cffc:	2000b359 	.word	0x2000b359
   2d000:	70482203 	.word	0x70482203
   2d004:	f9b3700a 	.word	0xf9b3700a
   2d008:	2021201c 	.word	0x2021201c
   2d00c:	201df8a1 	.word	0x201df8a1
   2d010:	201ef9b3 	.word	0x201ef9b3
   2d014:	201ff8a1 	.word	0x201ff8a1
   2d018:	2006f9b3 	.word	0x2006f9b3
   2d01c:	889a810a 	.word	0x889a810a
   2d020:	78da80ca 	.word	0x78da80ca
   2d024:	699a714a 	.word	0x699a714a
   2d028:	2019f8c1 	.word	0x2019f8c1
   2d02c:	f8c1691a 	.word	0xf8c1691a
   2d030:	f9b32011 	.word	0xf9b32011
   2d034:	814a2008 	.word	0x814a2008
   2d038:	f8c168da 	.word	0xf8c168da
   2d03c:	7a9a200d 	.word	0x7a9a200d
   2d040:	781a730a 	.word	0x781a730a
   2d044:	789a708a 	.word	0x789a708a
   2d048:	695a710a 	.word	0x695a710a
   2d04c:	2015f8c1 	.word	0x2015f8c1
   2d050:	70cb785b 	.word	0x70cb785b
   2d054:	f04f4770 	.word	0xf04f4770
   2d058:	477030ff 	.word	0x477030ff

0002d05c <rpc_gnss_serialize_klob>:
   2d05c:	b1f04603 	.word	0xb1f04603
   2d060:	2000b1e9 	.word	0x2000b1e9
   2d064:	70482204 	.word	0x70482204
   2d068:	f993700a 	.word	0xf993700a
   2d06c:	200a2000 	.word	0x200a2000
   2d070:	f993708a 	.word	0xf993708a
   2d074:	70ca2001 	.word	0x70ca2001
   2d078:	2002f993 	.word	0x2002f993
   2d07c:	f993710a 	.word	0xf993710a
   2d080:	714a2003 	.word	0x714a2003
   2d084:	2004f993 	.word	0x2004f993
   2d088:	f993718a 	.word	0xf993718a
   2d08c:	71ca2005 	.word	0x71ca2005
   2d090:	2006f993 	.word	0x2006f993
   2d094:	f993720a 	.word	0xf993720a
   2d098:	724b3007 	.word	0x724b3007
   2d09c:	f04f4770 	.word	0xf04f4770
   2d0a0:	477030ff 	.word	0x477030ff

0002d0a4 <rpc_gnss_serialize_nequick>:
   2d0a4:	b1984603 	.word	0xb1984603
   2d0a8:	2000b191 	.word	0x2000b191
   2d0ac:	70482205 	.word	0x70482205
   2d0b0:	f9b3700a 	.word	0xf9b3700a
   2d0b4:	200a2000 	.word	0x200a2000
   2d0b8:	f9b3804a 	.word	0xf9b3804a
   2d0bc:	808a2002 	.word	0x808a2002
   2d0c0:	2004f9b3 	.word	0x2004f9b3
   2d0c4:	799a80ca 	.word	0x799a80ca
   2d0c8:	79db720a 	.word	0x79db720a
   2d0cc:	4770724b 	.word	0x4770724b
   2d0d0:	30fff04f 	.word	0x30fff04f
   2d0d4:	bf004770 	.word	0xbf004770

0002d0d8 <rpc_gnss_serialize_time_and_sv_tow>:
   2d0d8:	b309b310 	.word	0xb309b310
   2d0dc:	2500b470 	.word	0x2500b470
   2d0e0:	460c2606 	.word	0x460c2606
   2d0e4:	700e704d 	.word	0x700e704d
   2d0e8:	8805462b 	.word	0x8805462b
   2d0ec:	804d4602 	.word	0x804d4602
   2d0f0:	f8c168c5 	.word	0xf8c168c5
   2d0f4:	8905500a 	.word	0x8905500a
   2d0f8:	6840810d 	.word	0x6840810d
   2d0fc:	8a156048 	.word	0x8a156048
   2d100:	0043eb03 	.word	0x0043eb03
   2d104:	81c54408 	.word	0x81c54408
   2d108:	33017c90 	.word	0x33017c90
   2d10c:	74202b20 	.word	0x74202b20
   2d110:	0204f102 	.word	0x0204f102
   2d114:	0403f104 	.word	0x0403f104
   2d118:	206ed1f1 	.word	0x206ed1f1
   2d11c:	4770bc70 	.word	0x4770bc70
   2d120:	30fff04f 	.word	0x30fff04f
   2d124:	bf004770 	.word	0xbf004770

0002d128 <rpc_gnss_serialize_location>:
   2d128:	b1c84603 	.word	0xb1c84603
   2d12c:	2000b1c1 	.word	0x2000b1c1
   2d130:	70482207 	.word	0x70482207
   2d134:	f9b3700a 	.word	0xf9b3700a
   2d138:	20112008 	.word	0x20112008
   2d13c:	7b9a814a 	.word	0x7b9a814a
   2d140:	681a740a 	.word	0x681a740a
   2d144:	2002f8c1 	.word	0x2002f8c1
   2d148:	f8c1685a 	.word	0xf8c1685a
   2d14c:	7b1a2006 	.word	0x7b1a2006
   2d150:	7b5a738a 	.word	0x7b5a738a
   2d154:	7a9a73ca 	.word	0x7a9a73ca
   2d158:	7adb730a 	.word	0x7adb730a
   2d15c:	4770734b 	.word	0x4770734b
   2d160:	30fff04f 	.word	0x30fff04f
   2d164:	bf004770 	.word	0xbf004770

0002d168 <rpc_gnss_serialize_integrity>:
   2d168:	b141b148 	.word	0xb141b148
   2d16c:	23082200 	.word	0x23082200
   2d170:	700b704a 	.word	0x700b704a
   2d174:	20066803 	.word	0x20066803
   2d178:	3002f8c1 	.word	0x3002f8c1
   2d17c:	f04f4770 	.word	0xf04f4770
   2d180:	477030ff 	.word	0x477030ff

0002d184 <ipc_trace_init>:
   2d184:	60184b01 	.word	0x60184b01
   2d188:	bf004770 	.word	0xbf004770
   2d18c:	20024aec 	.word	0x20024aec

0002d190 <bsd_os_trace_irq_handler>:
   2d190:	4b6cb5f0 	.word	0x4b6cb5f0
   2d194:	781bb083 	.word	0x781bb083
   2d198:	f0002b00 	.word	0xf0002b00
   2d19c:	4b6a80ad 	.word	0x4b6a80ad
   2d1a0:	68a2681c 	.word	0x68a2681c
   2d1a4:	429a6863 	.word	0x429a6863
   2d1a8:	f64bd02d 	.word	0xf64bd02d
   2d1ac:	f8ad63ef 	.word	0xf8ad63ef
   2d1b0:	78233000 	.word	0x78233000
   2d1b4:	f88d466e 	.word	0xf88d466e
   2d1b8:	68633004 	.word	0x68633004
   2d1bc:	429a2105 	.word	0x429a2105
   2d1c0:	6927bf2a 	.word	0x6927bf2a
   2d1c4:	1abf1a9f 	.word	0x1abf1a9f
   2d1c8:	bf94429a 	.word	0xbf94429a
   2d1cc:	68e52500 	.word	0x68e52500
   2d1d0:	bf88b2bf 	.word	0xbf88b2bf
   2d1d4:	46301b5b 	.word	0x46301b5b
   2d1d8:	b29dbf88 	.word	0xb29dbf88
   2d1dc:	7002f8ad 	.word	0x7002f8ad
   2d1e0:	fb61f013 	.word	0xfb61f013
   2d1e4:	1002f8bd 	.word	0x1002f8bd
   2d1e8:	f01368a0 	.word	0xf01368a0
   2d1ec:	68a3fb5c 	.word	0x68a3fb5c
   2d1f0:	441f6922 	.word	0x441f6922
   2d1f4:	bf084297 	.word	0xbf084297
   2d1f8:	60a768e3 	.word	0x60a768e3
   2d1fc:	60a3bf08 	.word	0x60a3bf08
   2d200:	f0402d00 	.word	0xf0402d00
   2d204:	4b51808d 	.word	0x4b51808d
   2d208:	68a2681c 	.word	0x68a2681c
   2d20c:	429a6863 	.word	0x429a6863
   2d210:	f64bd02c 	.word	0xf64bd02c
   2d214:	f8ad63ef 	.word	0xf8ad63ef
   2d218:	78233000 	.word	0x78233000
   2d21c:	f88d466e 	.word	0xf88d466e
   2d220:	68633004 	.word	0x68633004
   2d224:	429a2105 	.word	0x429a2105
   2d228:	6927bf2a 	.word	0x6927bf2a
   2d22c:	1abf1a9f 	.word	0x1abf1a9f
   2d230:	bf94429a 	.word	0xbf94429a
   2d234:	68e52500 	.word	0x68e52500
   2d238:	bf88b2bf 	.word	0xbf88b2bf
   2d23c:	46301b5b 	.word	0x46301b5b
   2d240:	b29dbf88 	.word	0xb29dbf88
   2d244:	7002f8ad 	.word	0x7002f8ad
   2d248:	fb2df013 	.word	0xfb2df013
   2d24c:	1002f8bd 	.word	0x1002f8bd
   2d250:	f01368a0 	.word	0xf01368a0
   2d254:	68a3fb28 	.word	0x68a3fb28
   2d258:	441f6922 	.word	0x441f6922
   2d25c:	bf084297 	.word	0xbf084297
   2d260:	60a768e3 	.word	0x60a768e3
   2d264:	60a3bf08 	.word	0x60a3bf08
   2d268:	d1482d00 	.word	0xd1482d00
   2d26c:	681c4b38 	.word	0x681c4b38
   2d270:	686368a2 	.word	0x686368a2
   2d274:	d02b429a 	.word	0xd02b429a
   2d278:	63eff64b 	.word	0x63eff64b
   2d27c:	3000f8ad 	.word	0x3000f8ad
   2d280:	466e7823 	.word	0x466e7823
   2d284:	3004f88d 	.word	0x3004f88d
   2d288:	21056863 	.word	0x21056863
   2d28c:	bf2a429a 	.word	0xbf2a429a
   2d290:	1a9f6927 	.word	0x1a9f6927
   2d294:	429a1abf 	.word	0x429a1abf
   2d298:	2500bf94 	.word	0x2500bf94
   2d29c:	b2bf68e5 	.word	0xb2bf68e5
   2d2a0:	1b5bbf88 	.word	0x1b5bbf88
   2d2a4:	bf884630 	.word	0xbf884630
   2d2a8:	f8adb29d 	.word	0xf8adb29d
   2d2ac:	f0137002 	.word	0xf0137002
   2d2b0:	f8bdfafa 	.word	0xf8bdfafa
   2d2b4:	68a01002 	.word	0x68a01002
   2d2b8:	faf5f013 	.word	0xfaf5f013
   2d2bc:	692268a3 	.word	0x692268a3
   2d2c0:	4297441f 	.word	0x4297441f
   2d2c4:	68e3bf08 	.word	0x68e3bf08
   2d2c8:	bf0860a7 	.word	0xbf0860a7
   2d2cc:	b90d60a3 	.word	0xb90d60a3
   2d2d0:	bdf0b003 	.word	0xbdf0b003
   2d2d4:	21054630 	.word	0x21054630
   2d2d8:	5002f8ad 	.word	0x5002f8ad
   2d2dc:	fae3f013 	.word	0xfae3f013
   2d2e0:	1002f8bd 	.word	0x1002f8bd
   2d2e4:	f01368e0 	.word	0xf01368e0
   2d2e8:	f8bdfade 	.word	0xf8bdfade
   2d2ec:	68e32002 	.word	0x68e32002
   2d2f0:	60a34413 	.word	0x60a34413
   2d2f4:	bdf0b003 	.word	0xbdf0b003
   2d2f8:	f8aaf7f6 	.word	0xf8aaf7f6
   2d2fc:	2105e74f 	.word	0x2105e74f
   2d300:	f8ad4630 	.word	0xf8ad4630
   2d304:	f0135002 	.word	0xf0135002
   2d308:	f8bdface 	.word	0xf8bdface
   2d30c:	68e01002 	.word	0x68e01002
   2d310:	fac9f013 	.word	0xfac9f013
   2d314:	2002f8bd 	.word	0x2002f8bd
   2d318:	441368e3 	.word	0x441368e3
   2d31c:	e7a560a3 	.word	0xe7a560a3
   2d320:	46302105 	.word	0x46302105
   2d324:	5002f8ad 	.word	0x5002f8ad
   2d328:	fabdf013 	.word	0xfabdf013
   2d32c:	1002f8bd 	.word	0x1002f8bd
   2d330:	f01368e0 	.word	0xf01368e0
   2d334:	f8bdfab8 	.word	0xf8bdfab8
   2d338:	68e32002 	.word	0x68e32002
   2d33c:	60a34413 	.word	0x60a34413
   2d340:	bf00e761 	.word	0xbf00e761
   2d344:	2002c8b7 	.word	0x2002c8b7
   2d348:	20024ae8 	.word	0x20024ae8
   2d34c:	20024ae0 	.word	0x20024ae0
   2d350:	20024ae4 	.word	0x20024ae4

0002d354 <ipc_trace_handle>:
   2d354:	e92d2200 	.word	0xe92d2200
   2d358:	4bb04ff0 	.word	0x4bb04ff0
   2d35c:	681bb083 	.word	0x681bb083
   2d360:	695c6919 	.word	0x695c6919
   2d364:	741a7c18 	.word	0x741a7c18
   2d368:	745a7c58 	.word	0x745a7c58
   2d36c:	749a7c98 	.word	0x749a7c98
   2d370:	74da7cd8 	.word	0x74da7cd8
   2d374:	751a7d18 	.word	0x751a7d18
   2d378:	755a7d58 	.word	0x755a7d58
   2d37c:	759a7d98 	.word	0x759a7d98
   2d380:	75da7dd8 	.word	0x75da7dd8
   2d384:	3901b1b9 	.word	0x3901b1b9
   2d388:	d8142903 	.word	0xd8142903
   2d38c:	f011e8df 	.word	0xf011e8df
   2d390:	010300d6 	.word	0x010300d6
   2d394:	00160004 	.word	0x00160004
   2d398:	20032501 	.word	0x20032501
   2d39c:	f06f2200 	.word	0xf06f2200
   2d3a0:	4c9f015f 	.word	0x4c9f015f
   2d3a4:	7a1c7025 	.word	0x7a1c7025
   2d3a8:	7a587218 	.word	0x7a587218
   2d3ac:	7a98725a 	.word	0x7a98725a
   2d3b0:	7ada729a 	.word	0x7ada729a
   2d3b4:	b00372d9 	.word	0xb00372d9
   2d3b8:	8ff0e8bd 	.word	0x8ff0e8bd
   2d3bc:	22002104 	.word	0x22002104
   2d3c0:	005ff06f 	.word	0x005ff06f
   2d3c4:	72197a1c 	.word	0x72197a1c
   2d3c8:	725a7a59 	.word	0x725a7a59
   2d3cc:	7a9c4994 	.word	0x7a9c4994
   2d3d0:	7adc729a 	.word	0x7adc729a
   2d3d4:	700a72d8 	.word	0x700a72d8
   2d3d8:	2b00780b 	.word	0x2b00780b
   2d3dc:	8117f000 	.word	0x8117f000
   2d3e0:	681c4b90 	.word	0x681c4b90
   2d3e4:	686368a2 	.word	0x686368a2
   2d3e8:	d02d429a 	.word	0xd02d429a
   2d3ec:	63eff64b 	.word	0x63eff64b
   2d3f0:	3000f8ad 	.word	0x3000f8ad
   2d3f4:	466e7823 	.word	0x466e7823
   2d3f8:	3004f88d 	.word	0x3004f88d
   2d3fc:	21056863 	.word	0x21056863
   2d400:	bf2a429a 	.word	0xbf2a429a
   2d404:	1a9f6927 	.word	0x1a9f6927
   2d408:	429a1abf 	.word	0x429a1abf
   2d40c:	2500bf94 	.word	0x2500bf94
   2d410:	b2bf68e5 	.word	0xb2bf68e5
   2d414:	1b5bbf88 	.word	0x1b5bbf88
   2d418:	bf884630 	.word	0xbf884630
   2d41c:	f8adb29d 	.word	0xf8adb29d
   2d420:	f0137002 	.word	0xf0137002
   2d424:	f8bdfa40 	.word	0xf8bdfa40
   2d428:	68a01002 	.word	0x68a01002
   2d42c:	fa3bf013 	.word	0xfa3bf013
   2d430:	692268a3 	.word	0x692268a3
   2d434:	4297441f 	.word	0x4297441f
   2d438:	68e3bf08 	.word	0x68e3bf08
   2d43c:	bf0860a7 	.word	0xbf0860a7
   2d440:	2d0060a3 	.word	0x2d0060a3
   2d444:	80d2f040 	.word	0x80d2f040
   2d448:	681c4b77 	.word	0x681c4b77
   2d44c:	686368a2 	.word	0x686368a2
   2d450:	d02d429a 	.word	0xd02d429a
   2d454:	63eff64b 	.word	0x63eff64b
   2d458:	3000f8ad 	.word	0x3000f8ad
   2d45c:	466e7823 	.word	0x466e7823
   2d460:	3004f88d 	.word	0x3004f88d
   2d464:	21056863 	.word	0x21056863
   2d468:	bf2a429a 	.word	0xbf2a429a
   2d46c:	1a9f6927 	.word	0x1a9f6927
   2d470:	429a1abf 	.word	0x429a1abf
   2d474:	2500bf94 	.word	0x2500bf94
   2d478:	b2bf68e5 	.word	0xb2bf68e5
   2d47c:	1b5bbf88 	.word	0x1b5bbf88
   2d480:	bf884630 	.word	0xbf884630
   2d484:	f8adb29d 	.word	0xf8adb29d
   2d488:	f0137002 	.word	0xf0137002
   2d48c:	f8bdfa0c 	.word	0xf8bdfa0c
   2d490:	68a01002 	.word	0x68a01002
   2d494:	fa07f013 	.word	0xfa07f013
   2d498:	692268a3 	.word	0x692268a3
   2d49c:	4297441f 	.word	0x4297441f
   2d4a0:	68e3bf08 	.word	0x68e3bf08
   2d4a4:	bf0860a7 	.word	0xbf0860a7
   2d4a8:	2d0060a3 	.word	0x2d0060a3
   2d4ac:	808df040 	.word	0x808df040
   2d4b0:	681c4b5e 	.word	0x681c4b5e
   2d4b4:	686368a2 	.word	0x686368a2
   2d4b8:	f43f429a 	.word	0xf43f429a
   2d4bc:	f64baf7c 	.word	0xf64baf7c
   2d4c0:	f8ad63ef 	.word	0xf8ad63ef
   2d4c4:	78233000 	.word	0x78233000
   2d4c8:	f88d466e 	.word	0xf88d466e
   2d4cc:	68633004 	.word	0x68633004
   2d4d0:	429a2105 	.word	0x429a2105
   2d4d4:	6927bf2a 	.word	0x6927bf2a
   2d4d8:	1abf1a9f 	.word	0x1abf1a9f
   2d4dc:	bf94429a 	.word	0xbf94429a
   2d4e0:	68e52500 	.word	0x68e52500
   2d4e4:	bf88b2bf 	.word	0xbf88b2bf
   2d4e8:	46301b5b 	.word	0x46301b5b
   2d4ec:	b29dbf88 	.word	0xb29dbf88
   2d4f0:	7002f8ad 	.word	0x7002f8ad
   2d4f4:	f9d7f013 	.word	0xf9d7f013
   2d4f8:	1002f8bd 	.word	0x1002f8bd
   2d4fc:	f01368a0 	.word	0xf01368a0
   2d500:	68a3f9d2 	.word	0x68a3f9d2
   2d504:	441f6922 	.word	0x441f6922
   2d508:	bf084297 	.word	0xbf084297
   2d50c:	60a768e3 	.word	0x60a768e3
   2d510:	60a3bf08 	.word	0x60a3bf08
   2d514:	f43f2d00 	.word	0xf43f2d00
   2d518:	2105af4e 	.word	0x2105af4e
   2d51c:	f8ad4630 	.word	0xf8ad4630
   2d520:	f0135002 	.word	0xf0135002
   2d524:	f8bdf9c0 	.word	0xf8bdf9c0
   2d528:	68e01002 	.word	0x68e01002
   2d52c:	f9bbf013 	.word	0xf9bbf013
   2d530:	2002f8bd 	.word	0x2002f8bd
   2d534:	441368e3 	.word	0x441368e3
   2d538:	e73c60a3 	.word	0xe73c60a3
   2d53c:	78114a38 	.word	0x78114a38
   2d540:	2100b109 	.word	0x2100b109
   2d544:	68a57011 	.word	0x68a57011
   2d548:	d0392d00 	.word	0xd0392d00
   2d54c:	0c00f04f 	.word	0x0c00f04f
   2d550:	a0d4f8df 	.word	0xa0d4f8df
   2d554:	b0ccf8df 	.word	0xb0ccf8df
   2d558:	46e14934 	.word	0x46e14934
   2d55c:	46624666 	.word	0x46624666
   2d560:	e000f8d1 	.word	0xe000f8d1
   2d564:	8000f8da 	.word	0x8000f8da
   2d568:	7000f8db 	.word	0x7000f8db
   2d56c:	2963e008 	.word	0x2963e008
   2d570:	2961d016 	.word	0x2961d016
   2d574:	4607bf04 	.word	0x4607bf04
   2d578:	32012601 	.word	0x32012601
   2d57c:	d01342aa 	.word	0xd01342aa
   2d580:	eb041c91 	.word	0xeb041c91
   2d584:	68480181 	.word	0x68480181
   2d588:	29627801 	.word	0x29627801
   2d58c:	4680d1ef 	.word	0x4680d1ef
   2d590:	0901f04f 	.word	0x0901f04f
   2d594:	f7f5e7f1 	.word	0xf7f5e7f1
   2d598:	b003ff53 	.word	0xb003ff53
   2d59c:	8ff0e8bd 	.word	0x8ff0e8bd
   2d5a0:	f04f4686 	.word	0xf04f4686
   2d5a4:	e7e80c01 	.word	0xe7e80c01
   2d5a8:	f1b9bba6 	.word	0xf1b9bba6
   2d5ac:	d0010f00 	.word	0xd0010f00
   2d5b0:	8000f8ca 	.word	0x8000f8ca
   2d5b4:	0f00f1bc 	.word	0x0f00f1bc
   2d5b8:	4a1cd002 	.word	0x4a1cd002
   2d5bc:	e000f8c2 	.word	0xe000f8c2
   2d5c0:	22002001 	.word	0x22002001
   2d5c4:	015ff06f 	.word	0x015ff06f
   2d5c8:	2105e6ed 	.word	0x2105e6ed
   2d5cc:	f8ad4630 	.word	0xf8ad4630
   2d5d0:	f0135002 	.word	0xf0135002
   2d5d4:	f8bdf968 	.word	0xf8bdf968
   2d5d8:	68e01002 	.word	0x68e01002
   2d5dc:	f963f013 	.word	0xf963f013
   2d5e0:	2002f8bd 	.word	0x2002f8bd
   2d5e4:	441368e3 	.word	0x441368e3
   2d5e8:	e76160a3 	.word	0xe76160a3
   2d5ec:	46302105 	.word	0x46302105
   2d5f0:	5002f8ad 	.word	0x5002f8ad
   2d5f4:	f957f013 	.word	0xf957f013
   2d5f8:	1002f8bd 	.word	0x1002f8bd
   2d5fc:	f01368e0 	.word	0xf01368e0
   2d600:	f8bdf952 	.word	0xf8bdf952
   2d604:	68e32002 	.word	0x68e32002
   2d608:	60a34413 	.word	0x60a34413
   2d60c:	f7f5e71c 	.word	0xf7f5e71c
   2d610:	e6e5ff1f 	.word	0xe6e5ff1f
   2d614:	7000f8cb 	.word	0x7000f8cb
   2d618:	bf00e7c7 	.word	0xbf00e7c7
   2d61c:	20024aec 	.word	0x20024aec
   2d620:	2002c8b7 	.word	0x2002c8b7
   2d624:	20024ae8 	.word	0x20024ae8
   2d628:	20024ae0 	.word	0x20024ae0
   2d62c:	20024ae4 	.word	0x20024ae4

0002d630 <rpc_trace_coredump_in_progress>:
   2d630:	78184b01 	.word	0x78184b01
   2d634:	bf004770 	.word	0xbf004770
   2d638:	2002c8b7 	.word	0x2002c8b7

0002d63c <ecp_modp>:
   2d63c:	6e4bb570 	.word	0x6e4bb570
   2d640:	2b004604 	.word	0x2b004604
   2d644:	6803d03d 	.word	0x6803d03d
   2d648:	2b00460d 	.word	0x2b00460d
   2d64c:	4620db2f 	.word	0x4620db2f
   2d650:	fe88f005 	.word	0xfe88f005
   2d654:	ebb06dab 	.word	0xebb06dab
   2d658:	d82d0f43 	.word	0xd82d0f43
   2d65c:	46206e6b 	.word	0x46206e6b
   2d660:	46064798 	.word	0x46064798
   2d664:	3504bb08 	.word	0x3504bb08
   2d668:	2100e00a 	.word	0x2100e00a
   2d66c:	f0064620 	.word	0xf0064620
   2d670:	b1a0f949 	.word	0xb1a0f949
   2d674:	4621462a 	.word	0x4621462a
   2d678:	f0064620 	.word	0xf0064620
   2d67c:	b9e8fafb 	.word	0xb9e8fafb
   2d680:	2b006823 	.word	0x2b006823
   2d684:	4629dbf1 	.word	0x4629dbf1
   2d688:	f0064620 	.word	0xf0064620
   2d68c:	2800f8d3 	.word	0x2800f8d3
   2d690:	462adb0b 	.word	0x462adb0b
   2d694:	46204621 	.word	0x46204621
   2d698:	fa2cf006 	.word	0xfa2cf006
   2d69c:	4629b970 	.word	0x4629b970
   2d6a0:	f0064620 	.word	0xf0064620
   2d6a4:	2800f8c7 	.word	0x2800f8c7
   2d6a8:	4630daf3 	.word	0x4630daf3
   2d6ac:	2100bd70 	.word	0x2100bd70
   2d6b0:	f928f006 	.word	0xf928f006
   2d6b4:	d0ca2800 	.word	0xd0ca2800
   2d6b8:	e7f64e05 	.word	0xe7f64e05
   2d6bc:	46304606 	.word	0x46304606
   2d6c0:	1d0abd70 	.word	0x1d0abd70
   2d6c4:	4070e8bd 	.word	0x4070e8bd
   2d6c8:	f0074601 	.word	0xf0074601
   2d6cc:	bf00b8cf 	.word	0xbf00b8cf
   2d6d0:	ffffb080 	.word	0xffffb080

0002d6d4 <ecp_double_jac>:
   2d6d4:	43f0e92d 	.word	0x43f0e92d
   2d6d8:	b08d4606 	.word	0xb08d4606
   2d6dc:	46884668 	.word	0x46884668
   2d6e0:	f0054615 	.word	0xf0054615
   2d6e4:	a803fbe5 	.word	0xa803fbe5
   2d6e8:	fbe2f005 	.word	0xfbe2f005
   2d6ec:	f005a806 	.word	0xf005a806
   2d6f0:	a809fbdf 	.word	0xa809fbdf
   2d6f4:	fbdcf005 	.word	0xfbdcf005
   2d6f8:	2b0069b3 	.word	0x2b0069b3
   2d6fc:	80b2f000 	.word	0x80b2f000
   2d700:	4629462a 	.word	0x4629462a
   2d704:	f006a803 	.word	0xf006a803
   2d708:	4604fbe9 	.word	0x4604fbe9
   2d70c:	4668b178 	.word	0x4668b178
   2d710:	fbd6f005 	.word	0xfbd6f005
   2d714:	f005a803 	.word	0xf005a803
   2d718:	a806fbd3 	.word	0xa806fbd3
   2d71c:	fbd0f005 	.word	0xfbd0f005
   2d720:	f005a809 	.word	0xf005a809
   2d724:	4620fbcd 	.word	0x4620fbcd
   2d728:	e8bdb00d 	.word	0xe8bdb00d
   2d72c:	463183f0 	.word	0x463183f0
   2d730:	f7ffa803 	.word	0xf7ffa803
   2d734:	4604ff83 	.word	0x4604ff83
   2d738:	d1e82800 	.word	0xd1e82800
   2d73c:	a9032203 	.word	0xa9032203
   2d740:	f0064668 	.word	0xf0064668
   2d744:	4604fcc3 	.word	0x4604fcc3
   2d748:	d1e02800 	.word	0xd1e02800
   2d74c:	e0071d37 	.word	0xe0071d37
   2d750:	4669463a 	.word	0x4669463a
   2d754:	f0064668 	.word	0xf0064668
   2d758:	4604f9cd 	.word	0x4604f9cd
   2d75c:	d1d62800 	.word	0xd1d62800
   2d760:	46684639 	.word	0x46684639
   2d764:	f866f006 	.word	0xf866f006
   2d768:	daf12800 	.word	0xdaf12800
   2d76c:	0910f106 	.word	0x0910f106
   2d770:	21004648 	.word	0x21004648
   2d774:	f8c6f006 	.word	0xf8c6f006
   2d778:	f0402800 	.word	0xf0402800
   2d77c:	f10580e2 	.word	0xf10580e2
   2d780:	464a090c 	.word	0x464a090c
   2d784:	a8064649 	.word	0xa8064649
   2d788:	fba8f006 	.word	0xfba8f006
   2d78c:	28004604 	.word	0x28004604
   2d790:	4631d1bd 	.word	0x4631d1bd
   2d794:	f7ffa806 	.word	0xf7ffa806
   2d798:	4604ff51 	.word	0x4604ff51
   2d79c:	d1b62800 	.word	0xd1b62800
   2d7a0:	a8062101 	.word	0xa8062101
   2d7a4:	ff20f005 	.word	0xff20f005
   2d7a8:	b1404604 	.word	0xb1404604
   2d7ac:	a906e7af 	.word	0xa906e7af
   2d7b0:	4608463a 	.word	0x4608463a
   2d7b4:	f99ef006 	.word	0xf99ef006
   2d7b8:	28004604 	.word	0x28004604
   2d7bc:	4639d1a7 	.word	0x4639d1a7
   2d7c0:	f006a806 	.word	0xf006a806
   2d7c4:	2800f837 	.word	0x2800f837
   2d7c8:	aa06daf1 	.word	0xaa06daf1
   2d7cc:	a8034629 	.word	0xa8034629
   2d7d0:	fb84f006 	.word	0xfb84f006
   2d7d4:	28004604 	.word	0x28004604
   2d7d8:	4631d199 	.word	0x4631d199
   2d7dc:	f7ffa803 	.word	0xf7ffa803
   2d7e0:	4604ff2d 	.word	0x4604ff2d
   2d7e4:	d1922800 	.word	0xd1922800
   2d7e8:	a8032101 	.word	0xa8032101
   2d7ec:	fefcf005 	.word	0xfefcf005
   2d7f0:	b1404604 	.word	0xb1404604
   2d7f4:	a903e78b 	.word	0xa903e78b
   2d7f8:	4608463a 	.word	0x4608463a
   2d7fc:	f97af006 	.word	0xf97af006
   2d800:	28004604 	.word	0x28004604
   2d804:	4639d183 	.word	0x4639d183
   2d808:	f006a803 	.word	0xf006a803
   2d80c:	2800f813 	.word	0x2800f813
   2d810:	aa06daf1 	.word	0xaa06daf1
   2d814:	a8094611 	.word	0xa8094611
   2d818:	fb60f006 	.word	0xfb60f006
   2d81c:	28004604 	.word	0x28004604
   2d820:	af75f47f 	.word	0xaf75f47f
   2d824:	a8094631 	.word	0xa8094631
   2d828:	ff08f7ff 	.word	0xff08f7ff
   2d82c:	28004604 	.word	0x28004604
   2d830:	af6df47f 	.word	0xaf6df47f
   2d834:	a8092101 	.word	0xa8092101
   2d838:	fed6f005 	.word	0xfed6f005
   2d83c:	28004604 	.word	0x28004604
   2d840:	af65f47f 	.word	0xaf65f47f
   2d844:	a8094639 	.word	0xa8094639
   2d848:	fff4f005 	.word	0xfff4f005
   2d84c:	f2c02800 	.word	0xf2c02800
   2d850:	a90980c5 	.word	0xa90980c5
   2d854:	4608463a 	.word	0x4608463a
   2d858:	f94cf006 	.word	0xf94cf006
   2d85c:	28004604 	.word	0x28004604
   2d860:	e754d0f0 	.word	0xe754d0f0
   2d864:	0218f105 	.word	0x0218f105
   2d868:	a8034611 	.word	0xa8034611
   2d86c:	fb36f006 	.word	0xfb36f006
   2d870:	28004604 	.word	0x28004604
   2d874:	af4bf47f 	.word	0xaf4bf47f
   2d878:	a8034631 	.word	0xa8034631
   2d87c:	fedef7ff 	.word	0xfedef7ff
   2d880:	28004604 	.word	0x28004604
   2d884:	af43f47f 	.word	0xaf43f47f
   2d888:	4629aa03 	.word	0x4629aa03
   2d88c:	f006a806 	.word	0xf006a806
   2d890:	4604f9f1 	.word	0x4604f9f1
   2d894:	f47f2800 	.word	0xf47f2800
   2d898:	1d37af3a 	.word	0x1d37af3a
   2d89c:	a906e008 	.word	0xa906e008
   2d8a0:	4608463a 	.word	0x4608463a
   2d8a4:	f926f006 	.word	0xf926f006
   2d8a8:	28004604 	.word	0x28004604
   2d8ac:	af2ff47f 	.word	0xaf2ff47f
   2d8b0:	a8064639 	.word	0xa8064639
   2d8b4:	ffbef005 	.word	0xffbef005
   2d8b8:	daf02800 	.word	0xdaf02800
   2d8bc:	4629aa03 	.word	0x4629aa03
   2d8c0:	f006a809 	.word	0xf006a809
   2d8c4:	4604fa4b 	.word	0x4604fa4b
   2d8c8:	e720b170 	.word	0xe720b170
   2d8cc:	a8092100 	.word	0xa8092100
   2d8d0:	f818f006 	.word	0xf818f006
   2d8d4:	a909b158 	.word	0xa909b158
   2d8d8:	4608463a 	.word	0x4608463a
   2d8dc:	f9caf006 	.word	0xf9caf006
   2d8e0:	28004604 	.word	0x28004604
   2d8e4:	af13f47f 	.word	0xaf13f47f
   2d8e8:	2b009b09 	.word	0x2b009b09
   2d8ec:	aa09dbee 	.word	0xaa09dbee
   2d8f0:	a803a906 	.word	0xa803a906
   2d8f4:	faf2f006 	.word	0xfaf2f006
   2d8f8:	28004604 	.word	0x28004604
   2d8fc:	af07f47f 	.word	0xaf07f47f
   2d900:	a8034631 	.word	0xa8034631
   2d904:	fe9af7ff 	.word	0xfe9af7ff
   2d908:	28004604 	.word	0x28004604
   2d90c:	aefff47f 	.word	0xaefff47f
   2d910:	a9032203 	.word	0xa9032203
   2d914:	f0064668 	.word	0xf0064668
   2d918:	4604fbd9 	.word	0x4604fbd9
   2d91c:	f47f2800 	.word	0xf47f2800
   2d920:	4639aef6 	.word	0x4639aef6
   2d924:	f0054668 	.word	0xf0054668
   2d928:	2800ff85 	.word	0x2800ff85
   2d92c:	af27f6ff 	.word	0xaf27f6ff
   2d930:	4669463a 	.word	0x4669463a
   2d934:	f0064668 	.word	0xf0064668
   2d938:	4604f8dd 	.word	0x4604f8dd
   2d93c:	d0f02800 	.word	0xd0f02800
   2d940:	f105e6e5 	.word	0xf105e6e5
   2d944:	46110218 	.word	0x46110218
   2d948:	f006a803 	.word	0xf006a803
   2d94c:	4604fac7 	.word	0x4604fac7
   2d950:	f47f2800 	.word	0xf47f2800
   2d954:	4631aedc 	.word	0x4631aedc
   2d958:	f7ffa803 	.word	0xf7ffa803
   2d95c:	4604fe6f 	.word	0x4604fe6f
   2d960:	f47f2800 	.word	0xf47f2800
   2d964:	aa03aed4 	.word	0xaa03aed4
   2d968:	a8064611 	.word	0xa8064611
   2d96c:	fab6f006 	.word	0xfab6f006
   2d970:	28004604 	.word	0x28004604
   2d974:	aecbf47f 	.word	0xaecbf47f
   2d978:	a8064631 	.word	0xa8064631
   2d97c:	fe5ef7ff 	.word	0xfe5ef7ff
   2d980:	28004604 	.word	0x28004604
   2d984:	aec3f47f 	.word	0xaec3f47f
   2d988:	a906464a 	.word	0xa906464a
   2d98c:	f006a803 	.word	0xf006a803
   2d990:	4604faa5 	.word	0x4604faa5
   2d994:	f47f2800 	.word	0xf47f2800
   2d998:	4631aeba 	.word	0x4631aeba
   2d99c:	f7ffa803 	.word	0xf7ffa803
   2d9a0:	4604fe4d 	.word	0x4604fe4d
   2d9a4:	f47f2800 	.word	0xf47f2800
   2d9a8:	aa03aeb2 	.word	0xaa03aeb2
   2d9ac:	46684669 	.word	0x46684669
   2d9b0:	f960f006 	.word	0xf960f006
   2d9b4:	28004604 	.word	0x28004604
   2d9b8:	aea9f47f 	.word	0xaea9f47f
   2d9bc:	46684639 	.word	0x46684639
   2d9c0:	ff38f005 	.word	0xff38f005
   2d9c4:	f6ff2800 	.word	0xf6ff2800
   2d9c8:	463aaeda 	.word	0x463aaeda
   2d9cc:	46684669 	.word	0x46684669
   2d9d0:	f890f006 	.word	0xf890f006
   2d9d4:	28004604 	.word	0x28004604
   2d9d8:	e698d0f0 	.word	0xe698d0f0
   2d9dc:	4669466a 	.word	0x4669466a
   2d9e0:	f006a806 	.word	0xf006a806
   2d9e4:	4604fa7b 	.word	0x4604fa7b
   2d9e8:	f47f2800 	.word	0xf47f2800
   2d9ec:	4631ae90 	.word	0x4631ae90
   2d9f0:	f7ffa806 	.word	0xf7ffa806
   2d9f4:	4604fe23 	.word	0x4604fe23
   2d9f8:	f47f2800 	.word	0xf47f2800
   2d9fc:	a906ae88 	.word	0xa906ae88
   2da00:	4608aa03 	.word	0x4608aa03
   2da04:	f9aaf006 	.word	0xf9aaf006
   2da08:	28004604 	.word	0x28004604
   2da0c:	ae7ff47f 	.word	0xae7ff47f
   2da10:	2b009b06 	.word	0x2b009b06
   2da14:	2100da0d 	.word	0x2100da0d
   2da18:	f005a806 	.word	0xf005a806
   2da1c:	b140ff73 	.word	0xb140ff73
   2da20:	463aa906 	.word	0x463aa906
   2da24:	f0064608 	.word	0xf0064608
   2da28:	4604f925 	.word	0x4604f925
   2da2c:	d0ef2800 	.word	0xd0ef2800
   2da30:	a906e66d 	.word	0xa906e66d
   2da34:	4608aa03 	.word	0x4608aa03
   2da38:	f990f006 	.word	0xf990f006
   2da3c:	28004604 	.word	0x28004604
   2da40:	ae65f47f 	.word	0xae65f47f
   2da44:	2b009b06 	.word	0x2b009b06
   2da48:	2100da0d 	.word	0x2100da0d
   2da4c:	f005a806 	.word	0xf005a806
   2da50:	b140ff59 	.word	0xb140ff59
   2da54:	463aa906 	.word	0x463aa906
   2da58:	f0064608 	.word	0xf0064608
   2da5c:	4604f90b 	.word	0x4604f90b
   2da60:	d0ef2800 	.word	0xd0ef2800
   2da64:	a903e653 	.word	0xa903e653
   2da68:	4608aa06 	.word	0x4608aa06
   2da6c:	f976f006 	.word	0xf976f006
   2da70:	28004604 	.word	0x28004604
   2da74:	ae4bf47f 	.word	0xae4bf47f
   2da78:	2b009b03 	.word	0x2b009b03
   2da7c:	2100da0d 	.word	0x2100da0d
   2da80:	f005a803 	.word	0xf005a803
   2da84:	b140ff3f 	.word	0xb140ff3f
   2da88:	463aa903 	.word	0x463aa903
   2da8c:	f0064608 	.word	0xf0064608
   2da90:	4604f8f1 	.word	0x4604f8f1
   2da94:	d0ef2800 	.word	0xd0ef2800
   2da98:	a903e639 	.word	0xa903e639
   2da9c:	4608466a 	.word	0x4608466a
   2daa0:	fa1cf006 	.word	0xfa1cf006
   2daa4:	28004604 	.word	0x28004604
   2daa8:	ae31f47f 	.word	0xae31f47f
   2daac:	a8034631 	.word	0xa8034631
   2dab0:	fdc4f7ff 	.word	0xfdc4f7ff
   2dab4:	28004604 	.word	0x28004604
   2dab8:	ae29f47f 	.word	0xae29f47f
   2dabc:	aa09a903 	.word	0xaa09a903
   2dac0:	f0064608 	.word	0xf0064608
   2dac4:	4604f94b 	.word	0x4604f94b
   2dac8:	f47f2800 	.word	0xf47f2800
   2dacc:	9b03ae20 	.word	0x9b03ae20
   2dad0:	da0d2b00 	.word	0xda0d2b00
   2dad4:	a8032100 	.word	0xa8032100
   2dad8:	ff14f005 	.word	0xff14f005
   2dadc:	a903b140 	.word	0xa903b140
   2dae0:	4608463a 	.word	0x4608463a
   2dae4:	f8c6f006 	.word	0xf8c6f006
   2dae8:	28004604 	.word	0x28004604
   2daec:	e60ed0ef 	.word	0xe60ed0ef
   2daf0:	0218f105 	.word	0x0218f105
   2daf4:	a8094649 	.word	0xa8094649
   2daf8:	f9f0f006 	.word	0xf9f0f006
   2dafc:	28004604 	.word	0x28004604
   2db00:	ae05f47f 	.word	0xae05f47f
   2db04:	a8094631 	.word	0xa8094631
   2db08:	fd98f7ff 	.word	0xfd98f7ff
   2db0c:	28004604 	.word	0x28004604
   2db10:	adfdf47f 	.word	0xadfdf47f
   2db14:	a8092101 	.word	0xa8092101
   2db18:	fd66f005 	.word	0xfd66f005
   2db1c:	28004604 	.word	0x28004604
   2db20:	adf5f47f 	.word	0xadf5f47f
   2db24:	a8094639 	.word	0xa8094639
   2db28:	fe84f005 	.word	0xfe84f005
   2db2c:	db082800 	.word	0xdb082800
   2db30:	463aa909 	.word	0x463aa909
   2db34:	f0054608 	.word	0xf0054608
   2db38:	4604ffdd 	.word	0x4604ffdd
   2db3c:	d0f12800 	.word	0xd0f12800
   2db40:	a906e5e5 	.word	0xa906e5e5
   2db44:	f0054640 	.word	0xf0054640
   2db48:	4604fa37 	.word	0x4604fa37
   2db4c:	f47f2800 	.word	0xf47f2800
   2db50:	a903adde 	.word	0xa903adde
   2db54:	000cf108 	.word	0x000cf108
   2db58:	fa2ef005 	.word	0xfa2ef005
   2db5c:	28004604 	.word	0x28004604
   2db60:	add5f47f 	.word	0xadd5f47f
   2db64:	0018f108 	.word	0x0018f108
   2db68:	f005a909 	.word	0xf005a909
   2db6c:	4604fa25 	.word	0x4604fa25
   2db70:	bf00e5cd 	.word	0xbf00e5cd

0002db74 <ecp_normalize_jac>:
   2db74:	f101b5f0 	.word	0xf101b5f0
   2db78:	b0870518 	.word	0xb0870518
   2db7c:	4607460e 	.word	0x4607460e
   2db80:	46282100 	.word	0x46282100
   2db84:	febef005 	.word	0xfebef005
   2db88:	4604b918 	.word	0x4604b918
   2db8c:	b0074620 	.word	0xb0074620
   2db90:	4668bdf0 	.word	0x4668bdf0
   2db94:	f98cf005 	.word	0xf98cf005
   2db98:	f005a803 	.word	0xf005a803
   2db9c:	4668f989 	.word	0x4668f989
   2dba0:	46291d3a 	.word	0x46291d3a
   2dba4:	f9b8f007 	.word	0xf9b8f007
   2dba8:	b1404604 	.word	0xb1404604
   2dbac:	f0054668 	.word	0xf0054668
   2dbb0:	a803f987 	.word	0xa803f987
   2dbb4:	f984f005 	.word	0xf984f005
   2dbb8:	b0074620 	.word	0xb0074620
   2dbbc:	466abdf0 	.word	0x466abdf0
   2dbc0:	a8034669 	.word	0xa8034669
   2dbc4:	f98af006 	.word	0xf98af006
   2dbc8:	28004604 	.word	0x28004604
   2dbcc:	4639d1ee 	.word	0x4639d1ee
   2dbd0:	f7ffa803 	.word	0xf7ffa803
   2dbd4:	4604fd33 	.word	0x4604fd33
   2dbd8:	d1e72800 	.word	0xd1e72800
   2dbdc:	4631aa03 	.word	0x4631aa03
   2dbe0:	f0064630 	.word	0xf0064630
   2dbe4:	4604f97b 	.word	0x4604f97b
   2dbe8:	d1df2800 	.word	0xd1df2800
   2dbec:	46304639 	.word	0x46304639
   2dbf0:	fd24f7ff 	.word	0xfd24f7ff
   2dbf4:	28004604 	.word	0x28004604
   2dbf8:	360cd1d8 	.word	0x360cd1d8
   2dbfc:	46304631 	.word	0x46304631
   2dc00:	f006aa03 	.word	0xf006aa03
   2dc04:	4604f96b 	.word	0x4604f96b
   2dc08:	d1cf2800 	.word	0xd1cf2800
   2dc0c:	46304639 	.word	0x46304639
   2dc10:	fd14f7ff 	.word	0xfd14f7ff
   2dc14:	28004604 	.word	0x28004604
   2dc18:	466ad1c8 	.word	0x466ad1c8
   2dc1c:	46304631 	.word	0x46304631
   2dc20:	f95cf006 	.word	0xf95cf006
   2dc24:	28004604 	.word	0x28004604
   2dc28:	4639d1c0 	.word	0x4639d1c0
   2dc2c:	f7ff4630 	.word	0xf7ff4630
   2dc30:	4604fd05 	.word	0x4604fd05
   2dc34:	d1b92800 	.word	0xd1b92800
   2dc38:	21014628 	.word	0x21014628
   2dc3c:	fb48f005 	.word	0xfb48f005
   2dc40:	e7b34604 	.word	0xe7b34604

0002dc44 <ecp_normalize_jac_many.part.3>:
   2dc44:	4ff0e92d 	.word	0x4ff0e92d
   2dc48:	b08b4682 	.word	0xb08b4682
   2dc4c:	4610468b 	.word	0x4610468b
   2dc50:	4616210c 	.word	0x4616210c
   2dc54:	fd80f008 	.word	0xfd80f008
   2dc58:	f0002800 	.word	0xf0002800
   2dc5c:	468080fe 	.word	0x468080fe
   2dc60:	f005a801 	.word	0xf005a801
   2dc64:	a804f925 	.word	0xa804f925
   2dc68:	f922f005 	.word	0xf922f005
   2dc6c:	f005a807 	.word	0xf005a807
   2dc70:	f8dbf91f 	.word	0xf8dbf91f
   2dc74:	46401000 	.word	0x46401000
   2dc78:	f0053118 	.word	0xf0053118
   2dc7c:	4604f99d 	.word	0x4604f99d
   2dc80:	2e01bb60 	.word	0x2e01bb60
   2dc84:	46d9d946 	.word	0x46d9d946
   2dc88:	f1082701 	.word	0xf1082701
   2dc8c:	e008050c 	.word	0xe008050c
   2dc90:	46514628 	.word	0x46514628
   2dc94:	fcd2f7ff 	.word	0xfcd2f7ff
   2dc98:	4604350c 	.word	0x4604350c
   2dc9c:	42beb968 	.word	0x42beb968
   2dca0:	f859d038 	.word	0xf859d038
   2dca4:	f1a52f04 	.word	0xf1a52f04
   2dca8:	3218010c 	.word	0x3218010c
   2dcac:	f0064628 	.word	0xf0064628
   2dcb0:	3701f915 	.word	0x3701f915
   2dcb4:	28004604 	.word	0x28004604
   2dcb8:	a801d0ea 	.word	0xa801d0ea
   2dcbc:	f900f005 	.word	0xf900f005
   2dcc0:	f005a804 	.word	0xf005a804
   2dcc4:	a807f8fd 	.word	0xa807f8fd
   2dcc8:	f8faf005 	.word	0xf8faf005
   2dccc:	a901e010 	.word	0xa901e010
   2dcd0:	f005a804 	.word	0xf005a804
   2dcd4:	4604f971 	.word	0x4604f971
   2dcd8:	d0532800 	.word	0xd0532800
   2dcdc:	f005a801 	.word	0xf005a801
   2dce0:	a804f8ef 	.word	0xa804f8ef
   2dce4:	f8ecf005 	.word	0xf8ecf005
   2dce8:	f005a807 	.word	0xf005a807
   2dcec:	b156f8e9 	.word	0xb156f8e9
   2dcf0:	eb064645 	.word	0xeb064645
   2dcf4:	eb080646 	.word	0xeb080646
   2dcf8:	46280686 	.word	0x46280686
   2dcfc:	f005350c 	.word	0xf005350c
   2dd00:	42b5f8df 	.word	0x42b5f8df
   2dd04:	4640d1f9 	.word	0x4640d1f9
   2dd08:	fd3af008 	.word	0xfd3af008
   2dd0c:	b00b4620 	.word	0xb00b4620
   2dd10:	8ff0e8bd 	.word	0x8ff0e8bd
   2dd14:	0546eb06 	.word	0x0546eb06
   2dd18:	f1a500ad 	.word	0xf1a500ad
   2dd1c:	4441010c 	.word	0x4441010c
   2dd20:	0204f10a 	.word	0x0204f10a
   2dd24:	f007a801 	.word	0xf007a801
   2dd28:	4604f8f7 	.word	0x4604f8f7
   2dd2c:	d1d52800 	.word	0xd1d52800
   2dd30:	4380f106 	.word	0x4380f106
   2dd34:	3b013d18 	.word	0x3b013d18
   2dd38:	eb0b4445 	.word	0xeb0b4445
   2dd3c:	1e770b83 	.word	0x1e770b83
   2dd40:	d0c42f00 	.word	0xd0c42f00
   2dd44:	a901462a 	.word	0xa901462a
   2dd48:	f006a804 	.word	0xf006a804
   2dd4c:	4604f8c7 	.word	0x4604f8c7
   2dd50:	d1c32800 	.word	0xd1c32800
   2dd54:	a8044651 	.word	0xa8044651
   2dd58:	fc70f7ff 	.word	0xfc70f7ff
   2dd5c:	28004604 	.word	0x28004604
   2dd60:	f8dbd1bc 	.word	0xf8dbd1bc
   2dd64:	a9012000 	.word	0xa9012000
   2dd68:	46083218 	.word	0x46083218
   2dd6c:	f8b6f006 	.word	0xf8b6f006
   2dd70:	28004604 	.word	0x28004604
   2dd74:	4651d1b2 	.word	0x4651d1b2
   2dd78:	f7ffa801 	.word	0xf7ffa801
   2dd7c:	4604fc5f 	.word	0x4604fc5f
   2dd80:	d1ab2800 	.word	0xd1ab2800
   2dd84:	4611aa04 	.word	0x4611aa04
   2dd88:	f006a807 	.word	0xf006a807
   2dd8c:	4604f8a7 	.word	0x4604f8a7
   2dd90:	d1a32800 	.word	0xd1a32800
   2dd94:	a8074651 	.word	0xa8074651
   2dd98:	fc50f7ff 	.word	0xfc50f7ff
   2dd9c:	28004604 	.word	0x28004604
   2dda0:	f8dbd19c 	.word	0xf8dbd19c
   2dda4:	aa071000 	.word	0xaa071000
   2dda8:	f0064608 	.word	0xf0064608
   2ddac:	4604f897 	.word	0x4604f897
   2ddb0:	d1932800 	.word	0xd1932800
   2ddb4:	f8db4651 	.word	0xf8db4651
   2ddb8:	f7ff0000 	.word	0xf7ff0000
   2ddbc:	4604fc3f 	.word	0x4604fc3f
   2ddc0:	d18b2800 	.word	0xd18b2800
   2ddc4:	1000f8db 	.word	0x1000f8db
   2ddc8:	310caa07 	.word	0x310caa07
   2ddcc:	f0064608 	.word	0xf0064608
   2ddd0:	4604f885 	.word	0x4604f885
   2ddd4:	d1812800 	.word	0xd1812800
   2ddd8:	0000f8db 	.word	0x0000f8db
   2dddc:	300c4651 	.word	0x300c4651
   2dde0:	fc2cf7ff 	.word	0xfc2cf7ff
   2dde4:	28004604 	.word	0x28004604
   2dde8:	af78f47f 	.word	0xaf78f47f
   2ddec:	1000f8db 	.word	0x1000f8db
   2ddf0:	310caa04 	.word	0x310caa04
   2ddf4:	f0064608 	.word	0xf0064608
   2ddf8:	4604f871 	.word	0x4604f871
   2ddfc:	f47f2800 	.word	0xf47f2800
   2de00:	f8dbaf6d 	.word	0xf8dbaf6d
   2de04:	46510000 	.word	0x46510000
   2de08:	f7ff300c 	.word	0xf7ff300c
   2de0c:	4604fc17 	.word	0x4604fc17
   2de10:	f47f2800 	.word	0xf47f2800
   2de14:	f8daaf63 	.word	0xf8daaf63
   2de18:	f8db1008 	.word	0xf8db1008
   2de1c:	f0050000 	.word	0xf0050000
   2de20:	4604f869 	.word	0x4604f869
   2de24:	f47f2800 	.word	0xf47f2800
   2de28:	f8dbaf59 	.word	0xf8dbaf59
   2de2c:	f8da0000 	.word	0xf8da0000
   2de30:	300c1008 	.word	0x300c1008
   2de34:	f85ef005 	.word	0xf85ef005
   2de38:	28004604 	.word	0x28004604
   2de3c:	af4ef47f 	.word	0xaf4ef47f
   2de40:	0000f8db 	.word	0x0000f8db
   2de44:	30183d0c 	.word	0x30183d0c
   2de48:	0b04f1ab 	.word	0x0b04f1ab
   2de4c:	f838f005 	.word	0xf838f005
   2de50:	f43f2f00 	.word	0xf43f2f00
   2de54:	3f01af43 	.word	0x3f01af43
   2de58:	4c01e772 	.word	0x4c01e772
   2de5c:	bf00e756 	.word	0xbf00e756
   2de60:	ffffb280 	.word	0xffffb280

0002de64 <symbol_0002b14>:
   2de64:	b510b1b8 	.word	0xb510b1b8
   2de68:	227c4604 	.word	0x227c4604
   2de6c:	f0132100 	.word	0xf0132100
   2de70:	f104fdc0 	.word	0xf104fdc0
   2de74:	f005007c 	.word	0xf005007c
   2de78:	f104f81b 	.word	0xf104f81b
   2de7c:	f0050088 	.word	0xf0050088
   2de80:	f104f817 	.word	0xf104f817
   2de84:	f0050094 	.word	0xf0050094
   2de88:	f104f813 	.word	0xf104f813
   2de8c:	e8bd00a0 	.word	0xe8bd00a0
   2de90:	f0054010 	.word	0xf0054010
   2de94:	4770b80d 	.word	0x4770b80d

0002de98 <symbol_0000ef7>:
   2de98:	d0482800 	.word	0xd0482800
   2de9c:	6e03b570 	.word	0x6e03b570
   2dea0:	2b014604 	.word	0x2b014604
   2dea4:	6f60d123 	.word	0x6f60d123
   2dea8:	6fa2b1c8 	.word	0x6fa2b1c8
   2deac:	2600b1aa 	.word	0x2600b1aa
   2deb0:	03c6eb06 	.word	0x03c6eb06
   2deb4:	0583eb10 	.word	0x0583eb10
   2deb8:	4628d035 	.word	0x4628d035
   2debc:	f800f005 	.word	0xf800f005
   2dec0:	000cf105 	.word	0x000cf105
   2dec4:	fffcf004 	.word	0xfffcf004
   2dec8:	0018f105 	.word	0x0018f105
   2decc:	fff8f004 	.word	0xfff8f004
   2ded0:	36016fa2 	.word	0x36016fa2
   2ded4:	6f604296 	.word	0x6f604296
   2ded8:	f008d3ea 	.word	0xf008d3ea
   2dedc:	2200fc51 	.word	0x2200fc51
   2dee0:	037cf104 	.word	0x037cf104
   2dee4:	34017022 	.word	0x34017022
   2dee8:	d1fb429c 	.word	0xd1fb429c
   2deec:	3004bd70 	.word	0x3004bd70
   2def0:	ffe6f004 	.word	0xffe6f004
   2def4:	0010f104 	.word	0x0010f104
   2def8:	ffe2f004 	.word	0xffe2f004
   2defc:	001cf104 	.word	0x001cf104
   2df00:	ffdef004 	.word	0xffdef004
   2df04:	0028f104 	.word	0x0028f104
   2df08:	ffdaf004 	.word	0xffdaf004
   2df0c:	0034f104 	.word	0x0034f104
   2df10:	ffd6f004 	.word	0xffd6f004
   2df14:	0040f104 	.word	0x0040f104
   2df18:	ffd2f004 	.word	0xffd2f004
   2df1c:	004cf104 	.word	0x004cf104
   2df20:	ffcef004 	.word	0xffcef004
   2df24:	3601e7bf 	.word	0x3601e7bf
   2df28:	d3c14296 	.word	0xd3c14296
   2df2c:	4770e7d5 	.word	0x4770e7d5

0002df30 <symbol_0001d5f>:
   2df30:	b510b1a8 	.word	0xb510b1a8
   2df34:	f7ff4604 	.word	0xf7ff4604
   2df38:	f104ffaf 	.word	0xf104ffaf
   2df3c:	f004007c 	.word	0xf004007c
   2df40:	f104ffbf 	.word	0xf104ffbf
   2df44:	f0040088 	.word	0xf0040088
   2df48:	f104ffbb 	.word	0xf104ffbb
   2df4c:	f0040094 	.word	0xf0040094
   2df50:	f104ffb7 	.word	0xf104ffb7
   2df54:	e8bd00a0 	.word	0xe8bd00a0
   2df58:	f0044010 	.word	0xf0044010
   2df5c:	4770bfb1 	.word	0x4770bfb1

0002df60 <symbol_000d41f>:
   2df60:	2101b510 	.word	0x2101b510
   2df64:	f0054604 	.word	0xf0054604
   2df68:	b100f9b3 	.word	0xb100f9b3
   2df6c:	2101bd10 	.word	0x2101bd10
   2df70:	000cf104 	.word	0x000cf104
   2df74:	f9acf005 	.word	0xf9acf005
   2df78:	d1f72800 	.word	0xd1f72800
   2df7c:	f1044601 	.word	0xf1044601
   2df80:	e8bd0018 	.word	0xe8bd0018
   2df84:	f0054010 	.word	0xf0054010
   2df88:	bf00b9a3 	.word	0xbf00b9a3

0002df8c <ecp_add_mixed>:
   2df8c:	47f0e92d 	.word	0x47f0e92d
   2df90:	0518f102 	.word	0x0518f102
   2df94:	4681b096 	.word	0x4681b096
   2df98:	46284688 	.word	0x46284688
   2df9c:	46172100 	.word	0x46172100
   2dfa0:	f005461e 	.word	0xf005461e
   2dfa4:	2800fcaf 	.word	0x2800fcaf
   2dfa8:	6a33d048 	.word	0x6a33d048
   2dfac:	f106b18b 	.word	0xf106b18b
   2dfb0:	46200418 	.word	0x46200418
   2dfb4:	f0052100 	.word	0xf0052100
   2dfb8:	2800fca5 	.word	0x2800fca5
   2dfbc:	80d7f000 	.word	0x80d7f000
   2dfc0:	b1336a33 	.word	0xb1336a33
   2dfc4:	21014620 	.word	0x21014620
   2dfc8:	fc9cf005 	.word	0xfc9cf005
   2dfcc:	f0402800 	.word	0xf0402800
   2dfd0:	a80180e7 	.word	0xa80180e7
   2dfd4:	ff6cf004 	.word	0xff6cf004
   2dfd8:	f004a804 	.word	0xf004a804
   2dfdc:	a807ff69 	.word	0xa807ff69
   2dfe0:	ff66f004 	.word	0xff66f004
   2dfe4:	f004a80a 	.word	0xf004a80a
   2dfe8:	a80dff63 	.word	0xa80dff63
   2dfec:	ff60f004 	.word	0xff60f004
   2dff0:	f004a810 	.word	0xf004a810
   2dff4:	a813ff5d 	.word	0xa813ff5d
   2dff8:	ff5af004 	.word	0xff5af004
   2dffc:	4629462a 	.word	0x4629462a
   2e000:	f005a801 	.word	0xf005a801
   2e004:	4604ff6b 	.word	0x4604ff6b
   2e008:	a801b380 	.word	0xa801b380
   2e00c:	ff58f004 	.word	0xff58f004
   2e010:	f004a804 	.word	0xf004a804
   2e014:	a807ff55 	.word	0xa807ff55
   2e018:	ff52f004 	.word	0xff52f004
   2e01c:	f004a80a 	.word	0xf004a80a
   2e020:	a80dff4f 	.word	0xa80dff4f
   2e024:	ff4cf004 	.word	0xff4cf004
   2e028:	f004a810 	.word	0xf004a810
   2e02c:	a813ff49 	.word	0xa813ff49
   2e030:	ff46f004 	.word	0xff46f004
   2e034:	b0164620 	.word	0xb0164620
   2e038:	87f0e8bd 	.word	0x87f0e8bd
   2e03c:	46404631 	.word	0x46404631
   2e040:	ffbaf004 	.word	0xffbaf004
   2e044:	28004604 	.word	0x28004604
   2e048:	f106d1f4 	.word	0xf106d1f4
   2e04c:	f108010c 	.word	0xf108010c
   2e050:	f004000c 	.word	0xf004000c
   2e054:	4604ffb1 	.word	0x4604ffb1
   2e058:	d1eb2800 	.word	0xd1eb2800
   2e05c:	0118f106 	.word	0x0118f106
   2e060:	0018f108 	.word	0x0018f108
   2e064:	ffa8f004 	.word	0xffa8f004
   2e068:	e7e34604 	.word	0xe7e34604
   2e06c:	a8014649 	.word	0xa8014649
   2e070:	fae4f7ff 	.word	0xfae4f7ff
   2e074:	28004604 	.word	0x28004604
   2e078:	462ad1c7 	.word	0x462ad1c7
   2e07c:	a804a901 	.word	0xa804a901
   2e080:	ff2cf005 	.word	0xff2cf005
   2e084:	28004604 	.word	0x28004604
   2e088:	4649d1bf 	.word	0x4649d1bf
   2e08c:	f7ffa804 	.word	0xf7ffa804
   2e090:	4604fad5 	.word	0x4604fad5
   2e094:	d1b82800 	.word	0xd1b82800
   2e098:	4632a901 	.word	0x4632a901
   2e09c:	f0054608 	.word	0xf0054608
   2e0a0:	4604ff1d 	.word	0x4604ff1d
   2e0a4:	d1b02800 	.word	0xd1b02800
   2e0a8:	a8014649 	.word	0xa8014649
   2e0ac:	fac6f7ff 	.word	0xfac6f7ff
   2e0b0:	28004604 	.word	0x28004604
   2e0b4:	a904d1a9 	.word	0xa904d1a9
   2e0b8:	020cf106 	.word	0x020cf106
   2e0bc:	f0054608 	.word	0xf0054608
   2e0c0:	4604ff0d 	.word	0x4604ff0d
   2e0c4:	d1a02800 	.word	0xd1a02800
   2e0c8:	a8044649 	.word	0xa8044649
   2e0cc:	fab6f7ff 	.word	0xfab6f7ff
   2e0d0:	28004604 	.word	0x28004604
   2e0d4:	a901d199 	.word	0xa901d199
   2e0d8:	4608463a 	.word	0x4608463a
   2e0dc:	fe3ef005 	.word	0xfe3ef005
   2e0e0:	28004604 	.word	0x28004604
   2e0e4:	f109d191 	.word	0xf109d191
   2e0e8:	e00c0604 	.word	0xe00c0604
   2e0ec:	a8012100 	.word	0xa8012100
   2e0f0:	fc08f005 	.word	0xfc08f005
   2e0f4:	a901b150 	.word	0xa901b150
   2e0f8:	46084632 	.word	0x46084632
   2e0fc:	fdbaf005 	.word	0xfdbaf005
   2e100:	28004604 	.word	0x28004604
   2e104:	9b01d181 	.word	0x9b01d181
   2e108:	dbef2b00 	.word	0xdbef2b00
   2e10c:	f107a904 	.word	0xf107a904
   2e110:	4632060c 	.word	0x4632060c
   2e114:	f0054608 	.word	0xf0054608
   2e118:	4604fe21 	.word	0x4604fe21
   2e11c:	f47f2800 	.word	0xf47f2800
   2e120:	f109af74 	.word	0xf109af74
   2e124:	e00d0a04 	.word	0xe00d0a04
   2e128:	a8042100 	.word	0xa8042100
   2e12c:	fbeaf005 	.word	0xfbeaf005
   2e130:	a904b158 	.word	0xa904b158
   2e134:	46084652 	.word	0x46084652
   2e138:	fd9cf005 	.word	0xfd9cf005
   2e13c:	28004604 	.word	0x28004604
   2e140:	af63f47f 	.word	0xaf63f47f
   2e144:	2b009b04 	.word	0x2b009b04
   2e148:	2100dbee 	.word	0x2100dbee
   2e14c:	f005a801 	.word	0xf005a801
   2e150:	4601fbd9 	.word	0x4601fbd9
   2e154:	a804bb30 	.word	0xa804bb30
   2e158:	fbd4f005 	.word	0xfbd4f005
   2e15c:	d17f2800 	.word	0xd17f2800
   2e160:	4641463a 	.word	0x4641463a
   2e164:	f7ff4648 	.word	0xf7ff4648
   2e168:	4604fab5 	.word	0x4604fab5
   2e16c:	4639e74d 	.word	0x4639e74d
   2e170:	f0044640 	.word	0xf0044640
   2e174:	4604ff21 	.word	0x4604ff21
   2e178:	f47f2800 	.word	0xf47f2800
   2e17c:	f107af5b 	.word	0xf107af5b
   2e180:	f108010c 	.word	0xf108010c
   2e184:	f004000c 	.word	0xf004000c
   2e188:	4604ff17 	.word	0x4604ff17
   2e18c:	f47f2800 	.word	0xf47f2800
   2e190:	4629af51 	.word	0x4629af51
   2e194:	0018f108 	.word	0x0018f108
   2e198:	ff0ef004 	.word	0xff0ef004
   2e19c:	e7494604 	.word	0xe7494604
   2e1a0:	e7474c8b 	.word	0xe7474c8b
   2e1a4:	aa014629 	.word	0xaa014629
   2e1a8:	f005a813 	.word	0xf005a813
   2e1ac:	4604fe97 	.word	0x4604fe97
   2e1b0:	f47f2800 	.word	0xf47f2800
   2e1b4:	4649af2a 	.word	0x4649af2a
   2e1b8:	f7ffa813 	.word	0xf7ffa813
   2e1bc:	4604fa3f 	.word	0x4604fa3f
   2e1c0:	f47f2800 	.word	0xf47f2800
   2e1c4:	aa01af22 	.word	0xaa01af22
   2e1c8:	a8074611 	.word	0xa8074611
   2e1cc:	fe86f005 	.word	0xfe86f005
   2e1d0:	28004604 	.word	0x28004604
   2e1d4:	af19f47f 	.word	0xaf19f47f
   2e1d8:	a8074649 	.word	0xa8074649
   2e1dc:	fa2ef7ff 	.word	0xfa2ef7ff
   2e1e0:	28004604 	.word	0x28004604
   2e1e4:	af11f47f 	.word	0xaf11f47f
   2e1e8:	a907aa01 	.word	0xa907aa01
   2e1ec:	f005a80a 	.word	0xf005a80a
   2e1f0:	4604fe75 	.word	0x4604fe75
   2e1f4:	f47f2800 	.word	0xf47f2800
   2e1f8:	4649af08 	.word	0x4649af08
   2e1fc:	f7ffa80a 	.word	0xf7ffa80a
   2e200:	4604fa1d 	.word	0x4604fa1d
   2e204:	f47f2800 	.word	0xf47f2800
   2e208:	a907af00 	.word	0xa907af00
   2e20c:	4608463a 	.word	0x4608463a
   2e210:	fe64f005 	.word	0xfe64f005
   2e214:	28004604 	.word	0x28004604
   2e218:	aef7f47f 	.word	0xaef7f47f
   2e21c:	a8074649 	.word	0xa8074649
   2e220:	fa0cf7ff 	.word	0xfa0cf7ff
   2e224:	28004604 	.word	0x28004604
   2e228:	aeeff47f 	.word	0xaeeff47f
   2e22c:	a9072202 	.word	0xa9072202
   2e230:	f005a801 	.word	0xf005a801
   2e234:	4604ff4b 	.word	0x4604ff4b
   2e238:	f47f2800 	.word	0xf47f2800
   2e23c:	f109aee6 	.word	0xf109aee6
   2e240:	46290504 	.word	0x46290504
   2e244:	f005a801 	.word	0xf005a801
   2e248:	2800faf5 	.word	0x2800faf5
   2e24c:	a901db0d 	.word	0xa901db0d
   2e250:	4608462a 	.word	0x4608462a
   2e254:	fc4ef005 	.word	0xfc4ef005
   2e258:	28004604 	.word	0x28004604
   2e25c:	e6d4d0f1 	.word	0xe6d4d0f1
   2e260:	f7ff4640 	.word	0xf7ff4640
   2e264:	4604fe7d 	.word	0x4604fe7d
   2e268:	aa04e6cf 	.word	0xaa04e6cf
   2e26c:	a80d4611 	.word	0xa80d4611
   2e270:	fe34f005 	.word	0xfe34f005
   2e274:	28004604 	.word	0x28004604
   2e278:	aec7f47f 	.word	0xaec7f47f
   2e27c:	a80d4649 	.word	0xa80d4649
   2e280:	f9dcf7ff 	.word	0xf9dcf7ff
   2e284:	28004604 	.word	0x28004604
   2e288:	aebff47f 	.word	0xaebff47f
   2e28c:	aa01a90d 	.word	0xaa01a90d
   2e290:	f0054608 	.word	0xf0054608
   2e294:	4604fd63 	.word	0x4604fd63
   2e298:	f47f2800 	.word	0xf47f2800
   2e29c:	9b0daeb6 	.word	0x9b0daeb6
   2e2a0:	da0d2b00 	.word	0xda0d2b00
   2e2a4:	a80d2100 	.word	0xa80d2100
   2e2a8:	fb2cf005 	.word	0xfb2cf005
   2e2ac:	a90db140 	.word	0xa90db140
   2e2b0:	4608462a 	.word	0x4608462a
   2e2b4:	fcdef005 	.word	0xfcdef005
   2e2b8:	28004604 	.word	0x28004604
   2e2bc:	e6a4d0ef 	.word	0xe6a4d0ef
   2e2c0:	aa0aa90d 	.word	0xaa0aa90d
   2e2c4:	f0054608 	.word	0xf0054608
   2e2c8:	4604fd49 	.word	0x4604fd49
   2e2cc:	f47f2800 	.word	0xf47f2800
   2e2d0:	9b0dae9c 	.word	0x9b0dae9c
   2e2d4:	da0d2b00 	.word	0xda0d2b00
   2e2d8:	a80d2100 	.word	0xa80d2100
   2e2dc:	fb12f005 	.word	0xfb12f005
   2e2e0:	a90db140 	.word	0xa90db140
   2e2e4:	4608462a 	.word	0x4608462a
   2e2e8:	fcc4f005 	.word	0xfcc4f005
   2e2ec:	28004604 	.word	0x28004604
   2e2f0:	e68ad0ef 	.word	0xe68ad0ef
   2e2f4:	aa0da907 	.word	0xaa0da907
   2e2f8:	f0054608 	.word	0xf0054608
   2e2fc:	4604fd2f 	.word	0x4604fd2f
   2e300:	f47f2800 	.word	0xf47f2800
   2e304:	9b07ae82 	.word	0x9b07ae82
   2e308:	da0d2b00 	.word	0xda0d2b00
   2e30c:	a8072100 	.word	0xa8072100
   2e310:	faf8f005 	.word	0xfaf8f005
   2e314:	a907b140 	.word	0xa907b140
   2e318:	4608462a 	.word	0x4608462a
   2e31c:	fcaaf005 	.word	0xfcaaf005
   2e320:	28004604 	.word	0x28004604
   2e324:	e670d0ef 	.word	0xe670d0ef
   2e328:	aa04a907 	.word	0xaa04a907
   2e32c:	f0054608 	.word	0xf0054608
   2e330:	4604fdd5 	.word	0x4604fdd5
   2e334:	f47f2800 	.word	0xf47f2800
   2e338:	4649ae68 	.word	0x4649ae68
   2e33c:	f7ffa807 	.word	0xf7ffa807
   2e340:	4604f97d 	.word	0x4604f97d
   2e344:	f47f2800 	.word	0xf47f2800
   2e348:	a90aae60 	.word	0xa90aae60
   2e34c:	46084632 	.word	0x46084632
   2e350:	fdc4f005 	.word	0xfdc4f005
   2e354:	28004604 	.word	0x28004604
   2e358:	ae57f47f 	.word	0xae57f47f
   2e35c:	a80a4649 	.word	0xa80a4649
   2e360:	f96cf7ff 	.word	0xf96cf7ff
   2e364:	28004604 	.word	0x28004604
   2e368:	ae4ff47f 	.word	0xae4ff47f
   2e36c:	a907aa0a 	.word	0xa907aa0a
   2e370:	f005a810 	.word	0xf005a810
   2e374:	4604fcf3 	.word	0x4604fcf3
   2e378:	f47f2800 	.word	0xf47f2800
   2e37c:	9b10ae46 	.word	0x9b10ae46
   2e380:	da0d2b00 	.word	0xda0d2b00
   2e384:	a8102100 	.word	0xa8102100
   2e388:	fabcf005 	.word	0xfabcf005
   2e38c:	a910b140 	.word	0xa910b140
   2e390:	4608462a 	.word	0x4608462a
   2e394:	fc6ef005 	.word	0xfc6ef005
   2e398:	28004604 	.word	0x28004604
   2e39c:	e634d0ef 	.word	0xe634d0ef
   2e3a0:	4640a90d 	.word	0x4640a90d
   2e3a4:	fe08f004 	.word	0xfe08f004
   2e3a8:	28004604 	.word	0x28004604
   2e3ac:	ae2df47f 	.word	0xae2df47f
   2e3b0:	f108a910 	.word	0xf108a910
   2e3b4:	f004000c 	.word	0xf004000c
   2e3b8:	4604fdff 	.word	0x4604fdff
   2e3bc:	f47f2800 	.word	0xf47f2800
   2e3c0:	f108ae24 	.word	0xf108ae24
   2e3c4:	a9130018 	.word	0xa9130018
   2e3c8:	fdf6f004 	.word	0xfdf6f004
   2e3cc:	e61c4604 	.word	0xe61c4604
   2e3d0:	ffffb080 	.word	0xffffb080

0002e3d4 <ecp_mul_comb>:
   2e3d4:	4ff0e92d 	.word	0x4ff0e92d
   2e3d8:	46984605 	.word	0x46984605
   2e3dc:	034cf105 	.word	0x034cf105
   2e3e0:	b0e5461c 	.word	0xb0e5461c
   2e3e4:	9104a80d 	.word	0x9104a80d
   2e3e8:	93084617 	.word	0x93084617
   2e3ec:	fd60f004 	.word	0xfd60f004
   2e3f0:	f004a810 	.word	0xf004a810
   2e3f4:	4620fd5d 	.word	0x4620fd5d
   2e3f8:	f0042100 	.word	0xf0042100
   2e3fc:	2801ffa3 	.word	0x2801ffa3
   2e400:	f0409007 	.word	0xf0409007
   2e404:	6deb81c9 	.word	0x6deb81c9
   2e408:	090cf108 	.word	0x090cf108
   2e40c:	7fc0f5b3 	.word	0x7fc0f5b3
   2e410:	2605bf2c 	.word	0x2605bf2c
   2e414:	46482604 	.word	0x46482604
   2e418:	0134f105 	.word	0x0134f105
   2e41c:	f04fbf2c 	.word	0xf04fbf2c
   2e420:	f04f0a06 	.word	0xf04f0a06
   2e424:	46b30a05 	.word	0x46b30a05
   2e428:	fa04f005 	.word	0xfa04f005
   2e42c:	d0722800 	.word	0xd0722800
   2e430:	42a66dec 	.word	0x42a66dec
   2e434:	2301d245 	.word	0x2301d245
   2e438:	32fff10b 	.word	0x32fff10b
   2e43c:	93024093 	.word	0x93024093
   2e440:	b2db4434 	.word	0xb2db4434
   2e444:	93033c01 	.word	0x93033c01
   2e448:	fbb42300 	.word	0xfbb42300
   2e44c:	9802f4f6 	.word	0x9802f4f6
   2e450:	93059206 	.word	0x93059206
   2e454:	f0082124 	.word	0xf0082124
   2e458:	9001f97f 	.word	0x9001f97f
   2e45c:	d0402800 	.word	0xd0402800
   2e460:	f0044641 	.word	0xf0044641
   2e464:	f8ddfda9 	.word	0xf8ddfda9
   2e468:	4683a004 	.word	0x4683a004
   2e46c:	f0002800 	.word	0xf0002800
   2e470:	9b058086 	.word	0x9b058086
   2e474:	d17b2b00 	.word	0xd17b2b00
   2e478:	9c012500 	.word	0x9c012500
   2e47c:	35019e03 	.word	0x35019e03
   2e480:	4620b154 	.word	0x4620b154
   2e484:	fd1cf004 	.word	0xfd1cf004
   2e488:	000cf104 	.word	0x000cf104
   2e48c:	fd18f004 	.word	0xfd18f004
   2e490:	0018f104 	.word	0x0018f104
   2e494:	fd14f004 	.word	0xfd14f004
   2e498:	429eb2eb 	.word	0x429eb2eb
   2e49c:	0424f104 	.word	0x0424f104
   2e4a0:	9801d8ed 	.word	0x9801d8ed
   2e4a4:	f96cf008 	.word	0xf96cf008
   2e4a8:	f004a80d 	.word	0xf004a80d
   2e4ac:	a810fd09 	.word	0xa810fd09
   2e4b0:	fd06f004 	.word	0xfd06f004
   2e4b4:	0f00f1bb 	.word	0x0f00f1bb
   2e4b8:	4658d11b 	.word	0x4658d11b
   2e4bc:	e8bdb065 	.word	0xe8bdb065
   2e4c0:	26028ff0 	.word	0x26028ff0
   2e4c4:	22012300 	.word	0x22012300
   2e4c8:	21244630 	.word	0x21244630
   2e4cc:	6602e9cd 	.word	0x6602e9cd
   2e4d0:	3205e9cd 	.word	0x3205e9cd
   2e4d4:	f940f008 	.word	0xf940f008
   2e4d8:	08643401 	.word	0x08643401
   2e4dc:	28009001 	.word	0x28009001
   2e4e0:	a80dd1be 	.word	0xa80dd1be
   2e4e4:	fcecf004 	.word	0xfcecf004
   2e4e8:	f004a810 	.word	0xf004a810
   2e4ec:	f8dffce9 	.word	0xf8dffce9
   2e4f0:	9c04b644 	.word	0x9c04b644
   2e4f4:	d0e02c00 	.word	0xd0e02c00
   2e4f8:	f0044620 	.word	0xf0044620
   2e4fc:	f104fce1 	.word	0xf104fce1
   2e500:	f004000c 	.word	0xf004000c
   2e504:	f104fcdd 	.word	0xf104fcdd
   2e508:	f0040018 	.word	0xf0040018
   2e50c:	4658fcd9 	.word	0x4658fcd9
   2e510:	e8bdb065 	.word	0xe8bdb065
   2e514:	f1058ff0 	.word	0xf1058ff0
   2e518:	46400128 	.word	0x46400128
   2e51c:	f98af005 	.word	0xf98af005
   2e520:	d1852800 	.word	0xd1852800
   2e524:	459a6deb 	.word	0x459a6deb
   2e528:	82f4f0c0 	.word	0x82f4f0c0
   2e52c:	1c5c2602 	.word	0x1c5c2602
   2e530:	e9cd2301 	.word	0xe9cd2301
   2e534:	08646602 	.word	0x08646602
   2e538:	6f6b9306 	.word	0x6f6b9306
   2e53c:	2b009301 	.word	0x2b009301
   2e540:	80eaf000 	.word	0x80eaf000
   2e544:	46382100 	.word	0x46382100
   2e548:	fefcf004 	.word	0xfefcf004
   2e54c:	46804639 	.word	0x46804639
   2e550:	f004a80d 	.word	0xf004a80d
   2e554:	4683fd31 	.word	0x4683fd31
   2e558:	463ab950 	.word	0x463ab950
   2e55c:	a8109908 	.word	0xa8109908
   2e560:	fbfcf005 	.word	0xfbfcf005
   2e564:	28004683 	.word	0x28004683
   2e568:	9b07d036 	.word	0x9b07d036
   2e56c:	d0832b00 	.word	0xd0832b00
   2e570:	f004a80d 	.word	0xf004a80d
   2e574:	a810fca5 	.word	0xa810fca5
   2e578:	fca2f004 	.word	0xfca2f004
   2e57c:	4649e7b9 	.word	0x4649e7b9
   2e580:	000cf10a 	.word	0x000cf10a
   2e584:	fd18f004 	.word	0xfd18f004
   2e588:	28004683 	.word	0x28004683
   2e58c:	af71f47f 	.word	0xaf71f47f
   2e590:	f1089b01 	.word	0xf1089b01
   2e594:	f1030118 	.word	0xf1030118
   2e598:	f0040018 	.word	0xf0040018
   2e59c:	4683fd0d 	.word	0x4683fd0d
   2e5a0:	f47f2800 	.word	0xf47f2800
   2e5a4:	462aaf66 	.word	0x462aaf66
   2e5a8:	0901f04f 	.word	0x0901f04f
   2e5ac:	46254651 	.word	0x46254651
   2e5b0:	464c4682 	.word	0x464c4682
   2e5b4:	96094690 	.word	0x96094690
   2e5b8:	9e06970a 	.word	0x9e06970a
   2e5bc:	eb049f01 	.word	0xeb049f01
   2e5c0:	eb0704c4 	.word	0xeb0704c4
   2e5c4:	46200484 	.word	0x46200484
   2e5c8:	fcf6f004 	.word	0xfcf6f004
   2e5cc:	f0002800 	.word	0xf0002800
   2e5d0:	468380a7 	.word	0x468380a7
   2e5d4:	e74d9b05 	.word	0xe74d9b05
   2e5d8:	33fff118 	.word	0x33fff118
   2e5dc:	2301bf18 	.word	0x2301bf18
   2e5e0:	461aa910 	.word	0x461aa910
   2e5e4:	9302a80d 	.word	0x9302a80d
   2e5e8:	fe14f004 	.word	0xfe14f004
   2e5ec:	28004683 	.word	0x28004683
   2e5f0:	a822d1bb 	.word	0xa822d1bb
   2e5f4:	46591c62 	.word	0x46591c62
   2e5f8:	f9fbf013 	.word	0xf9fbf013
   2e5fc:	f10db3d4 	.word	0xf10db3d4
   2e600:	46d80988 	.word	0x46d80988
   2e604:	46c246cb 	.word	0x46c246cb
   2e608:	46512700 	.word	0x46512700
   2e60c:	f004a80d 	.word	0xf004a80d
   2e610:	f89bfe99 	.word	0xf89bfe99
   2e614:	40b83000 	.word	0x40b83000
   2e618:	43033701 	.word	0x43033701
   2e61c:	44a242b7 	.word	0x44a242b7
   2e620:	3000f88b 	.word	0x3000f88b
   2e624:	f108d1f1 	.word	0xf108d1f1
   2e628:	45a00801 	.word	0x45a00801
   2e62c:	0b01f10b 	.word	0x0b01f10b
   2e630:	2300d1e9 	.word	0x2300d1e9
   2e634:	0c01f04f 	.word	0x0c01f04f
   2e638:	1088f89d 	.word	0x1088f89d
   2e63c:	6f01f819 	.word	0x6f01f819
   2e640:	0c01f10c 	.word	0x0c01f10c
   2e644:	0203ea86 	.word	0x0203ea86
   2e648:	f00043d0 	.word	0xf00043d0
   2e64c:	fb000001 	.word	0xfb000001
   2e650:	b252f701 	.word	0xb252f701
   2e654:	4033b27f 	.word	0x4033b27f
   2e658:	0607ea02 	.word	0x0607ea02
   2e65c:	ea41407a 	.word	0xea41407a
   2e660:	433310c0 	.word	0x433310c0
   2e664:	45e0b2d1 	.word	0x45e0b2d1
   2e668:	0c01f809 	.word	0x0c01f809
   2e66c:	f889b2db 	.word	0xf889b2db
   2e670:	d2e31000 	.word	0xd2e31000
   2e674:	a8192600 	.word	0xa8192600
   2e678:	fc1af004 	.word	0xfc1af004
   2e67c:	f004a81c 	.word	0xf004a81c
   2e680:	a81ffc17 	.word	0xa81ffc17
   2e684:	fc14f004 	.word	0xfc14f004
   2e688:	f813ab22 	.word	0xf813ab22
   2e68c:	44239004 	.word	0x44239004
   2e690:	9b049306 	.word	0x9b049306
   2e694:	469b4632 	.word	0x469b4632
   2e698:	95059f01 	.word	0x95059f01
   2e69c:	9f03463d 	.word	0x9f03463d
   2e6a0:	0845f3c9 	.word	0x0845f3c9
   2e6a4:	0a0cf103 	.word	0x0a0cf103
   2e6a8:	0408eba2 	.word	0x0408eba2
   2e6ac:	f484fab4 	.word	0xf484fab4
   2e6b0:	46290964 	.word	0x46290964
   2e6b4:	46584622 	.word	0x46584622
   2e6b8:	fdacf004 	.word	0xfdacf004
   2e6bc:	f1053601 	.word	0xf1053601
   2e6c0:	3524010c 	.word	0x3524010c
   2e6c4:	d16a2800 	.word	0xd16a2800
   2e6c8:	46504622 	.word	0x46504622
   2e6cc:	fda2f004 	.word	0xfda2f004
   2e6d0:	2800b2f2 	.word	0x2800b2f2
   2e6d4:	42bad163 	.word	0x42bad163
   2e6d8:	9d05d3e6 	.word	0x9d05d3e6
   2e6dc:	1d2ba816 	.word	0x1d2ba816
   2e6e0:	9308461c 	.word	0x9308461c
   2e6e4:	fbe4f004 	.word	0xfbe4f004
   2e6e8:	4621a816 	.word	0x4621a816
   2e6ec:	f0054652 	.word	0xf0054652
   2e6f0:	4683fb35 	.word	0x4683fb35
   2e6f4:	f0002800 	.word	0xf0002800
   2e6f8:	a81680c3 	.word	0xa81680c3
   2e6fc:	fbe0f004 	.word	0xfbe0f004
   2e700:	f004a819 	.word	0xf004a819
   2e704:	a81cfbdd 	.word	0xa81cfbdd
   2e708:	fbdaf004 	.word	0xfbdaf004
   2e70c:	f004a81f 	.word	0xf004a81f
   2e710:	9b07fbd7 	.word	0x9b07fbd7
   2e714:	e6ac9305 	.word	0xe6ac9305
   2e718:	98022301 	.word	0x98022301
   2e71c:	e6999305 	.word	0xe6999305
   2e720:	0b59ea4f 	.word	0x0b59ea4f
   2e724:	0bcbeb0b 	.word	0x0bcbeb0b
   2e728:	0b8beb07 	.word	0x0b8beb07
   2e72c:	010cf10b 	.word	0x010cf10b
   2e730:	000cf104 	.word	0x000cf104
   2e734:	fc40f004 	.word	0xfc40f004
   2e738:	f47f2800 	.word	0xf47f2800
   2e73c:	f10baf4a 	.word	0xf10baf4a
   2e740:	f1040118 	.word	0xf1040118
   2e744:	f0040018 	.word	0xf0040018
   2e748:	2800fc37 	.word	0x2800fc37
   2e74c:	af41f47f 	.word	0xaf41f47f
   2e750:	4683b165 	.word	0x4683b165
   2e754:	46214622 	.word	0x46214622
   2e758:	f7fe4640 	.word	0xf7fe4640
   2e75c:	f10bffbb 	.word	0xf10bffbb
   2e760:	28000b01 	.word	0x28000b01
   2e764:	af35f47f 	.word	0xaf35f47f
   2e768:	d1f345ab 	.word	0xd1f345ab
   2e76c:	0949ea4f 	.word	0x0949ea4f
   2e770:	f989fa5f 	.word	0xf989fa5f
   2e774:	0301f10a 	.word	0x0301f10a
   2e778:	f842aa22 	.word	0xf842aa22
   2e77c:	fa5f402a 	.word	0xfa5f402a
   2e780:	fa39fa83 	.word	0xfa39fa83
   2e784:	464cf306 	.word	0x464cf306
   2e788:	ea4fd10b 	.word	0xea4fd10b
   2e78c:	eb010159 	.word	0xeb010159
   2e790:	eb0701c1 	.word	0xeb0701c1
   2e794:	e7120181 	.word	0xe7120181
   2e798:	b39cf8df 	.word	0xb39cf8df
   2e79c:	4683e68d 	.word	0x4683e68d
   2e7a0:	4652e7ae 	.word	0x4652e7ae
   2e7a4:	462c2a01 	.word	0x462c2a01
   2e7a8:	46459e09 	.word	0x46459e09
   2e7ac:	d9619f0a 	.word	0xd9619f0a
   2e7b0:	4640a922 	.word	0x4640a922
   2e7b4:	fa46f7ff 	.word	0xfa46f7ff
   2e7b8:	f1bb4683 	.word	0xf1bb4683
   2e7bc:	f47f0f00 	.word	0xf47f0f00
   2e7c0:	2301ae58 	.word	0x2301ae58
   2e7c4:	46da9a01 	.word	0x46da9a01
   2e7c8:	970b3a24 	.word	0x970b3a24
   2e7cc:	461f4693 	.word	0x461f4693
   2e7d0:	4609e9cd 	.word	0x4609e9cd
   2e7d4:	eb03b303 	.word	0xeb03b303
   2e7d8:	ea4f03c3 	.word	0xea4f03c3
   2e7dc:	9b010883 	.word	0x9b010883
   2e7e0:	0424f1a8 	.word	0x0424f1a8
   2e7e4:	eb03441c 	.word	0xeb03441c
   2e7e8:	e0050908 	.word	0xe0050908
   2e7ec:	45a3aa22 	.word	0x45a3aa22
   2e7f0:	602af842 	.word	0x602af842
   2e7f4:	d00f469a 	.word	0xd00f469a
   2e7f8:	0604eb08 	.word	0x0604eb08
   2e7fc:	4622464b 	.word	0x4622464b
   2e800:	46284631 	.word	0x46284631
   2e804:	fbc2f7ff 	.word	0xfbc2f7ff
   2e808:	0301f10a 	.word	0x0301f10a
   2e80c:	b2db3c24 	.word	0xb2db3c24
   2e810:	d0eb2800 	.word	0xd0eb2800
   2e814:	e6dd4683 	.word	0xe6dd4683
   2e818:	9a06007b 	.word	0x9a06007b
   2e81c:	fa37b2df 	.word	0xfa37b2df
   2e820:	463bf202 	.word	0x463bf202
   2e824:	f1bad0d6 	.word	0xf1bad0d6
   2e828:	e9dd0f01 	.word	0xe9dd0f01
   2e82c:	9f0b4609 	.word	0x9f0b4609
   2e830:	8167f240 	.word	0x8167f240
   2e834:	a9224652 	.word	0xa9224652
   2e838:	f7ff4628 	.word	0xf7ff4628
   2e83c:	4683fa03 	.word	0x4683fa03
   2e840:	f1bb9b05 	.word	0xf1bb9b05
   2e844:	f47f0f00 	.word	0xf47f0f00
   2e848:	b123ae15 	.word	0xb123ae15
   2e84c:	676b9b01 	.word	0x676b9b01
   2e850:	67ab9b02 	.word	0x67ab9b02
   2e854:	4619e676 	.word	0x4619e676
   2e858:	f0044638 	.word	0xf0044638
   2e85c:	4639fd73 	.word	0x4639fd73
   2e860:	a80d4680 	.word	0xa80d4680
   2e864:	fba8f004 	.word	0xfba8f004
   2e868:	28004683 	.word	0x28004683
   2e86c:	ae04f47f 	.word	0xae04f47f
   2e870:	e6729007 	.word	0xe6729007
   2e874:	46289922 	.word	0x46289922
   2e878:	f97cf7ff 	.word	0xf97cf7ff
   2e87c:	e79c4683 	.word	0xe79c4683
   2e880:	46504601 	.word	0x46504601
   2e884:	f83ef005 	.word	0xf83ef005
   2e888:	bf181c02 	.word	0xbf181c02
   2e88c:	a9162201 	.word	0xa9162201
   2e890:	12d9ea02 	.word	0x12d9ea02
   2e894:	f0044650 	.word	0xf0044650
   2e898:	4683fcbd 	.word	0x4683fcbd
   2e89c:	f004a816 	.word	0xf004a816
   2e8a0:	f1bbfb0f 	.word	0xf1bbfb0f
   2e8a4:	f47f0f00 	.word	0xf47f0f00
   2e8a8:	9b04af2b 	.word	0x9b04af2b
   2e8ac:	f1032101 	.word	0xf1032101
   2e8b0:	46200418 	.word	0x46200418
   2e8b4:	fd0cf004 	.word	0xfd0cf004
   2e8b8:	28004683 	.word	0x28004683
   2e8bc:	af20f47f 	.word	0xaf20f47f
   2e8c0:	2b009b6e 	.word	0x2b009b6e
   2e8c4:	8082f000 	.word	0x8082f000
   2e8c8:	6dab260c 	.word	0x6dab260c
   2e8cc:	3307a813 	.word	0x3307a813
   2e8d0:	f00408df 	.word	0xf00408df
   2e8d4:	a816faed 	.word	0xa816faed
   2e8d8:	faeaf004 	.word	0xfaeaf004
   2e8dc:	8020f8dd 	.word	0x8020f8dd
   2e8e0:	9a6e9b6f 	.word	0x9a6e9b6f
   2e8e4:	a8134639 	.word	0xa8134639
   2e8e8:	fa64f006 	.word	0xfa64f006
   2e8ec:	2101e006 	.word	0x2101e006
   2e8f0:	f004a813 	.word	0xf004a813
   2e8f4:	2800ff2f 	.word	0x2800ff2f
   2e8f8:	80c8f040 	.word	0x80c8f040
   2e8fc:	a8134641 	.word	0xa8134641
   2e900:	ff98f004 	.word	0xff98f004
   2e904:	daf22800 	.word	0xdaf22800
   2e908:	f0003e01 	.word	0xf0003e01
   2e90c:	21018100 	.word	0x21018100
   2e910:	f004a813 	.word	0xf004a813
   2e914:	2800fff7 	.word	0x2800fff7
   2e918:	aa13dde2 	.word	0xaa13dde2
   2e91c:	46204621 	.word	0x46204621
   2e920:	fadcf005 	.word	0xfadcf005
   2e924:	b1304683 	.word	0xb1304683
   2e928:	f004a813 	.word	0xf004a813
   2e92c:	a816fac9 	.word	0xa816fac9
   2e930:	fac6f004 	.word	0xfac6f004
   2e934:	4620e6e4 	.word	0x4620e6e4
   2e938:	f7fe4629 	.word	0xf7fe4629
   2e93c:	4683fe7f 	.word	0x4683fe7f
   2e940:	d1f12800 	.word	0xd1f12800
   2e944:	4611aa13 	.word	0x4611aa13
   2e948:	f005a816 	.word	0xf005a816
   2e94c:	4683fac7 	.word	0x4683fac7
   2e950:	d1e92800 	.word	0xd1e92800
   2e954:	a8164629 	.word	0xa8164629
   2e958:	fe70f7fe 	.word	0xfe70f7fe
   2e95c:	28004683 	.word	0x28004683
   2e960:	9804d1e2 	.word	0x9804d1e2
   2e964:	4601aa16 	.word	0x4601aa16
   2e968:	fab8f005 	.word	0xfab8f005
   2e96c:	28004683 	.word	0x28004683
   2e970:	4629d1da 	.word	0x4629d1da
   2e974:	f7fe9804 	.word	0xf7fe9804
   2e978:	4683fe61 	.word	0x4683fe61
   2e97c:	d1d32800 	.word	0xd1d32800
   2e980:	aa13a916 	.word	0xaa13a916
   2e984:	f0054608 	.word	0xf0054608
   2e988:	4683faa9 	.word	0x4683faa9
   2e98c:	d1cb2800 	.word	0xd1cb2800
   2e990:	a8164629 	.word	0xa8164629
   2e994:	fe52f7fe 	.word	0xfe52f7fe
   2e998:	28004683 	.word	0x28004683
   2e99c:	aa16d1c4 	.word	0xaa16d1c4
   2e9a0:	46504651 	.word	0x46504651
   2e9a4:	fa9af005 	.word	0xfa9af005
   2e9a8:	28004683 	.word	0x28004683
   2e9ac:	4629d1bc 	.word	0x4629d1bc
   2e9b0:	f7fe4650 	.word	0xf7fe4650
   2e9b4:	4683fe43 	.word	0x4683fe43
   2e9b8:	f004a813 	.word	0xf004a813
   2e9bc:	a816fa81 	.word	0xa816fa81
   2e9c0:	fa7ef004 	.word	0xfa7ef004
   2e9c4:	0f00f1bb 	.word	0x0f00f1bb
   2e9c8:	ae9af47f 	.word	0xae9af47f
   2e9cc:	f8dd46ab 	.word	0xf8dd46ab
   2e9d0:	f8dd8018 	.word	0xf8dd8018
   2e9d4:	f8cd900c 	.word	0xf8cd900c
   2e9d8:	f8dda018 	.word	0xf8dda018
   2e9dc:	ab22a010 	.word	0xab22a010
   2e9e0:	d0554543 	.word	0xd0554543
   2e9e4:	46514652 	.word	0x46514652
   2e9e8:	f7fe4658 	.word	0xf7fe4658
   2e9ec:	4602fe73 	.word	0x4602fe73
   2e9f0:	d1492800 	.word	0xd1492800
   2e9f4:	46044606 	.word	0x46044606
   2e9f8:	3d01f818 	.word	0x3d01f818
   2e9fc:	93059d01 	.word	0x93059d01
   2ea00:	0745f3c3 	.word	0x0745f3c3
   2ea04:	fab41be4 	.word	0xfab41be4
   2ea08:	0964f484 	.word	0x0964f484
   2ea0c:	46224629 	.word	0x46224629
   2ea10:	f004a819 	.word	0xf004a819
   2ea14:	3601fbff 	.word	0x3601fbff
   2ea18:	010cf105 	.word	0x010cf105
   2ea1c:	28003524 	.word	0x28003524
   2ea20:	aebdf47f 	.word	0xaebdf47f
   2ea24:	a81c4622 	.word	0xa81c4622
   2ea28:	fbf4f004 	.word	0xfbf4f004
   2ea2c:	2800b2f4 	.word	0x2800b2f4
   2ea30:	aeb5f47f 	.word	0xaeb5f47f
   2ea34:	d8e545a1 	.word	0xd8e545a1
   2ea38:	f004a816 	.word	0xf004a816
   2ea3c:	aa1cfa39 	.word	0xaa1cfa39
   2ea40:	a8169908 	.word	0xa8169908
   2ea44:	f98af005 	.word	0xf98af005
   2ea48:	4683b108 	.word	0x4683b108
   2ea4c:	4601e655 	.word	0x4601e655
   2ea50:	f004a81c 	.word	0xf004a81c
   2ea54:	1c02ff57 	.word	0x1c02ff57
   2ea58:	2201bf18 	.word	0x2201bf18
   2ea5c:	a9169b05 	.word	0xa9169b05
   2ea60:	12d3ea02 	.word	0x12d3ea02
   2ea64:	f004a81c 	.word	0xf004a81c
   2ea68:	9005fbd5 	.word	0x9005fbd5
   2ea6c:	f004a816 	.word	0xf004a816
   2ea70:	9a05fa27 	.word	0x9a05fa27
   2ea74:	4652b942 	.word	0x4652b942
   2ea78:	4651ab19 	.word	0x4651ab19
   2ea7c:	f7ff4658 	.word	0xf7ff4658
   2ea80:	4602fa85 	.word	0x4602fa85
   2ea84:	d0aa2800 	.word	0xd0aa2800
   2ea88:	e6394693 	.word	0xe6394693
   2ea8c:	e74b4683 	.word	0xe74b4683
   2ea90:	f8dda819 	.word	0xf8dda819
   2ea94:	f004a018 	.word	0xf004a018
   2ea98:	a81cfa13 	.word	0xa81cfa13
   2ea9c:	fa10f004 	.word	0xfa10f004
   2eaa0:	f004a81f 	.word	0xf004a81f
   2eaa4:	a819fa0d 	.word	0xa819fa0d
   2eaa8:	fa02f004 	.word	0xfa02f004
   2eaac:	99084652 	.word	0x99084652
   2eab0:	f005a819 	.word	0xf005a819
   2eab4:	465df953 	.word	0x465df953
   2eab8:	b1184683 	.word	0xb1184683
   2eabc:	f004a819 	.word	0xf004a819
   2eac0:	e552f9ff 	.word	0xe552f9ff
   2eac4:	46504659 	.word	0x46504659
   2eac8:	ff1cf004 	.word	0xff1cf004
   2eacc:	a9199b02 	.word	0xa9199b02
   2ead0:	bf082800 	.word	0xbf082800
   2ead4:	46502300 	.word	0x46502300
   2ead8:	f004461a 	.word	0xf004461a
   2eadc:	4683fb9b 	.word	0x4683fb9b
   2eae0:	f004a819 	.word	0xf004a819
   2eae4:	f1bbf9ed 	.word	0xf1bbf9ed
   2eae8:	f47f0f00 	.word	0xf47f0f00
   2eaec:	4628ad3e 	.word	0x4628ad3e
   2eaf0:	f7ff9904 	.word	0xf7ff9904
   2eaf4:	9b07f83f 	.word	0x9b07f83f
   2eaf8:	2b004683 	.word	0x2b004683
   2eafc:	acd4f47f 	.word	0xacd4f47f
   2eb00:	9922e4ba 	.word	0x9922e4ba
   2eb04:	f7ff4628 	.word	0xf7ff4628
   2eb08:	4683f835 	.word	0x4683f835
   2eb0c:	f8dfe698 	.word	0xf8dfe698
   2eb10:	e5f5b02c 	.word	0xe5f5b02c
   2eb14:	f10a2201 	.word	0xf10a2201
   2eb18:	eb0a31ff 	.word	0xeb0a31ff
   2eb1c:	fa020403 	.word	0xfa020403
   2eb20:	3c01f301 	.word	0x3c01f301
   2eb24:	b2db9302 	.word	0xb2db9302
   2eb28:	fbb49106 	.word	0xfbb49106
   2eb2c:	4656f4fa 	.word	0x4656f4fa
   2eb30:	e5029303 	.word	0xe5029303
   2eb34:	ffffb280 	.word	0xffffb280
   2eb38:	ffffb080 	.word	0xffffb080
   2eb3c:	ffffb300 	.word	0xffffb300

0002eb40 <symbol_000637b>:
   2eb40:	43f8e92d 	.word	0x43f8e92d
   2eb44:	e9dd2a01 	.word	0xe9dd2a01
   2eb48:	d8437808 	.word	0xd8437808
   2eb4c:	4681460d 	.word	0x4681460d
   2eb50:	f1052100 	.word	0xf1052100
   2eb54:	461e0018 	.word	0x461e0018
   2eb58:	f0044614 	.word	0xf0044614
   2eb5c:	b938fed3 	.word	0xb938fed3
   2eb60:	0f00f1b8 	.word	0x0f00f1b8
   2eb64:	2301d038 	.word	0x2301d038
   2eb68:	60337038 	.word	0x60337038
   2eb6c:	83f8e8bd 	.word	0x83f8e8bd
   2eb70:	0004f109 	.word	0x0004f109
   2eb74:	fc24f004 	.word	0xfc24f004
   2eb78:	b9c44681 	.word	0xb9c44681
   2eb7c:	33010043 	.word	0x33010043
   2eb80:	60334598 	.word	0x60334598
   2eb84:	2304d328 	.word	0x2304d328
   2eb88:	46024639 	.word	0x46024639
   2eb8c:	3b01f801 	.word	0x3b01f801
   2eb90:	f0044628 	.word	0xf0044628
   2eb94:	2800fcd7 	.word	0x2800fcd7
   2eb98:	f109d1e8 	.word	0xf109d1e8
   2eb9c:	f1050101 	.word	0xf1050101
   2eba0:	4439000c 	.word	0x4439000c
   2eba4:	e8bd464a 	.word	0xe8bd464a
   2eba8:	f00443f8 	.word	0xf00443f8
   2ebac:	1c43bccb 	.word	0x1c43bccb
   2ebb0:	60334598 	.word	0x60334598
   2ebb4:	2100d310 	.word	0x2100d310
   2ebb8:	000cf105 	.word	0x000cf105
   2ebbc:	fbc2f004 	.word	0xfbc2f004
   2ebc0:	30024639 	.word	0x30024639
   2ebc4:	0b01f801 	.word	0x0b01f801
   2ebc8:	4628464a 	.word	0x4628464a
   2ebcc:	43f8e8bd 	.word	0x43f8e8bd
   2ebd0:	bcb8f004 	.word	0xbcb8f004
   2ebd4:	e7c94801 	.word	0xe7c94801
   2ebd8:	e7c74801 	.word	0xe7c74801
   2ebdc:	ffffb080 	.word	0xffffb080
   2ebe0:	ffffb100 	.word	0xffffb100

0002ebe4 <symbol_0007a22>:
   2ebe4:	d0412b00 	.word	0xd0412b00
   2ebe8:	461eb5f8 	.word	0x461eb5f8
   2ebec:	46147813 	.word	0x46147813
   2ebf0:	b9ab460d 	.word	0xb9ab460d
   2ebf4:	d1352e01 	.word	0xd1352e01
   2ebf8:	46284631 	.word	0x46284631
   2ebfc:	fb68f004 	.word	0xfb68f004
   2ec00:	bdf8b100 	.word	0xbdf8b100
   2ec04:	f1054631 	.word	0xf1054631
   2ec08:	f004000c 	.word	0xf004000c
   2ec0c:	2800fb61 	.word	0x2800fb61
   2ec10:	4601d1f7 	.word	0x4601d1f7
   2ec14:	0018f105 	.word	0x0018f105
   2ec18:	40f8e8bd 	.word	0x40f8e8bd
   2ec1c:	bb58f004 	.word	0xbb58f004
   2ec20:	f0043004 	.word	0xf0043004
   2ec24:	7823fbcd 	.word	0x7823fbcd
   2ec28:	2b044607 	.word	0x2b044607
   2ec2c:	0043d11c 	.word	0x0043d11c
   2ec30:	429e3301 	.word	0x429e3301
   2ec34:	4602d116 	.word	0x4602d116
   2ec38:	46281c61 	.word	0x46281c61
   2ec3c:	fbf0f004 	.word	0xfbf0f004
   2ec40:	d1de2800 	.word	0xd1de2800
   2ec44:	44211c79 	.word	0x44211c79
   2ec48:	f105463a 	.word	0xf105463a
   2ec4c:	f004000c 	.word	0xf004000c
   2ec50:	2800fbe7 	.word	0x2800fbe7
   2ec54:	f105d1d5 	.word	0xf105d1d5
   2ec58:	21010018 	.word	0x21010018
   2ec5c:	40f8e8bd 	.word	0x40f8e8bd
   2ec60:	bb36f004 	.word	0xbb36f004
   2ec64:	bdf84802 	.word	0xbdf84802
   2ec68:	bdf84802 	.word	0xbdf84802
   2ec6c:	47704800 	.word	0x47704800
   2ec70:	ffffb080 	.word	0xffffb080
   2ec74:	ffffb180 	.word	0xffffb180

0002ec78 <symbol_000e8bc>:
   2ec78:	41f0e92d 	.word	0x41f0e92d
   2ec7c:	b086460c 	.word	0xb086460c
   2ec80:	21014605 	.word	0x21014605
   2ec84:	0018f104 	.word	0x0018f104
   2ec88:	fe3cf004 	.word	0xfe3cf004
   2ec8c:	f0402800 	.word	0xf0402800
   2ec90:	6b2b809f 	.word	0x6b2b809f
   2ec94:	f0002b00 	.word	0xf0002b00
   2ec98:	6beb80a0 	.word	0x6beb80a0
   2ec9c:	f0002b00 	.word	0xf0002b00
   2eca0:	4601809c 	.word	0x4601809c
   2eca4:	46204606 	.word	0x46204606
   2eca8:	fe2cf004 	.word	0xfe2cf004
   2ecac:	f2c02800 	.word	0xf2c02800
   2ecb0:	f104808f 	.word	0xf104808f
   2ecb4:	4631070c 	.word	0x4631070c
   2ecb8:	f0044638 	.word	0xf0044638
   2ecbc:	2800fe23 	.word	0x2800fe23
   2ecc0:	8086f2c0 	.word	0x8086f2c0
   2ecc4:	0804f105 	.word	0x0804f105
   2ecc8:	46204641 	.word	0x46204641
   2eccc:	fdb2f004 	.word	0xfdb2f004
   2ecd0:	da7d2800 	.word	0xda7d2800
   2ecd4:	46384641 	.word	0x46384641
   2ecd8:	fdacf004 	.word	0xfdacf004
   2ecdc:	da772800 	.word	0xda772800
   2ece0:	f0044668 	.word	0xf0044668
   2ece4:	a803f8e5 	.word	0xa803f8e5
   2ece8:	f8e2f004 	.word	0xf8e2f004
   2ecec:	4639463a 	.word	0x4639463a
   2ecf0:	f0054668 	.word	0xf0054668
   2ecf4:	4606f8f3 	.word	0x4606f8f3
   2ecf8:	4668b148 	.word	0x4668b148
   2ecfc:	f8e0f004 	.word	0xf8e0f004
   2ed00:	f004a803 	.word	0xf004a803
   2ed04:	4630f8dd 	.word	0x4630f8dd
   2ed08:	e8bdb006 	.word	0xe8bdb006
   2ed0c:	462981f0 	.word	0x462981f0
   2ed10:	f7fe4668 	.word	0xf7fe4668
   2ed14:	4606fc93 	.word	0x4606fc93
   2ed18:	d1ee2800 	.word	0xd1ee2800
   2ed1c:	46214622 	.word	0x46214622
   2ed20:	f005a803 	.word	0xf005a803
   2ed24:	4606f8db 	.word	0x4606f8db
   2ed28:	d1e62800 	.word	0xd1e62800
   2ed2c:	a8034629 	.word	0xa8034629
   2ed30:	fc84f7fe 	.word	0xfc84f7fe
   2ed34:	28004606 	.word	0x28004606
   2ed38:	69abd1df 	.word	0x69abd1df
   2ed3c:	d04e2b00 	.word	0xd04e2b00
   2ed40:	f105a903 	.word	0xf105a903
   2ed44:	46080210 	.word	0x46080210
   2ed48:	ff94f004 	.word	0xff94f004
   2ed4c:	28004606 	.word	0x28004606
   2ed50:	e007d1d3 	.word	0xe007d1d3
   2ed54:	4642a903 	.word	0x4642a903
   2ed58:	f0044608 	.word	0xf0044608
   2ed5c:	4606fecb 	.word	0x4606fecb
   2ed60:	d1ca2800 	.word	0xd1ca2800
   2ed64:	a8034641 	.word	0xa8034641
   2ed68:	fd64f004 	.word	0xfd64f004
   2ed6c:	daf12800 	.word	0xdaf12800
   2ed70:	4622a903 	.word	0x4622a903
   2ed74:	f0054608 	.word	0xf0054608
   2ed78:	4606f8b1 	.word	0x4606f8b1
   2ed7c:	d1bc2800 	.word	0xd1bc2800
   2ed80:	a8034629 	.word	0xa8034629
   2ed84:	fc5af7fe 	.word	0xfc5af7fe
   2ed88:	28004606 	.word	0x28004606
   2ed8c:	a903d1b5 	.word	0xa903d1b5
   2ed90:	021cf105 	.word	0x021cf105
   2ed94:	f0044608 	.word	0xf0044608
   2ed98:	4606ff6d 	.word	0x4606ff6d
   2ed9c:	d1ac2800 	.word	0xd1ac2800
   2eda0:	a903e007 	.word	0xa903e007
   2eda4:	46084642 	.word	0x46084642
   2eda8:	fea4f004 	.word	0xfea4f004
   2edac:	28004606 	.word	0x28004606
   2edb0:	4641d1a3 	.word	0x4641d1a3
   2edb4:	f004a803 	.word	0xf004a803
   2edb8:	2800fd3d 	.word	0x2800fd3d
   2edbc:	a903daf1 	.word	0xa903daf1
   2edc0:	f0044668 	.word	0xf0044668
   2edc4:	4e14fd37 	.word	0x4e14fd37
   2edc8:	bf082800 	.word	0xbf082800
   2edcc:	e7942600 	.word	0xe7942600
   2edd0:	46304e11 	.word	0x46304e11
   2edd4:	e8bdb006 	.word	0xe8bdb006
   2edd8:	4e1081f0 	.word	0x4e1081f0
   2eddc:	a903e793 	.word	0xa903e793
   2ede0:	46082203 	.word	0x46082203
   2ede4:	f82ef005 	.word	0xf82ef005
   2ede8:	28004606 	.word	0x28004606
   2edec:	e00ed185 	.word	0xe00ed185
   2edf0:	a8032100 	.word	0xa8032100
   2edf4:	fd86f004 	.word	0xfd86f004
   2edf8:	d0b92800 	.word	0xd0b92800
   2edfc:	4642a903 	.word	0x4642a903
   2ee00:	f0044608 	.word	0xf0044608
   2ee04:	4606ff37 	.word	0x4606ff37
   2ee08:	f47f2800 	.word	0xf47f2800
   2ee0c:	9b03af76 	.word	0x9b03af76
   2ee10:	dbed2b00 	.word	0xdbed2b00
   2ee14:	bf00e7ac 	.word	0xbf00e7ac
   2ee18:	ffffb380 	.word	0xffffb380
   2ee1c:	ffffb080 	.word	0xffffb080

0002ee20 <symbol_0001f66>:
   2ee20:	43f0e92d 	.word	0x43f0e92d
   2ee24:	b0ab7803 	.word	0xb0ab7803
   2ee28:	f0002b00 	.word	0xf0002b00
   2ee2c:	780a80c4 	.word	0x780a80c4
   2ee30:	f040429a 	.word	0xf040429a
   2ee34:	f10180c0 	.word	0xf10180c0
   2ee38:	460c0788 	.word	0x460c0788
   2ee3c:	46394605 	.word	0x46394605
   2ee40:	f0043088 	.word	0xf0043088
   2ee44:	2800fcf7 	.word	0x2800fcf7
   2ee48:	80b5f040 	.word	0x80b5f040
   2ee4c:	0994f104 	.word	0x0994f104
   2ee50:	f1054649 	.word	0xf1054649
   2ee54:	f0040094 	.word	0xf0040094
   2ee58:	2800fced 	.word	0x2800fced
   2ee5c:	80abf040 	.word	0x80abf040
   2ee60:	08a0f104 	.word	0x08a0f104
   2ee64:	00a0f105 	.word	0x00a0f105
   2ee68:	f0044641 	.word	0xf0044641
   2ee6c:	4606fce3 	.word	0x4606fce3
   2ee70:	f0402800 	.word	0xf0402800
   2ee74:	462580a0 	.word	0x462580a0
   2ee78:	f004a802 	.word	0xf004a802
   2ee7c:	a805f819 	.word	0xa805f819
   2ee80:	f816f004 	.word	0xf816f004
   2ee84:	f004a808 	.word	0xf004a808
   2ee88:	4631f813 	.word	0x4631f813
   2ee8c:	a80b227c 	.word	0xa80b227c
   2ee90:	fdaff012 	.word	0xfdaff012
   2ee94:	1b7cf815 	.word	0x1b7cf815
   2ee98:	f7fda80b 	.word	0xf7fda80b
   2ee9c:	f104fbd5 	.word	0xf104fbd5
   2eea0:	21010040 	.word	0x21010040
   2eea4:	f0043428 	.word	0xf0043428
   2eea8:	2800fd2d 	.word	0x2800fd2d
   2eeac:	8081f040 	.word	0x8081f040
   2eeb0:	2b009b17 	.word	0x2b009b17
   2eeb4:	9b1ad07d 	.word	0x9b1ad07d
   2eeb8:	d07a2b00 	.word	0xd07a2b00
   2eebc:	46282101 	.word	0x46282101
   2eec0:	fd20f004 	.word	0xfd20f004
   2eec4:	f2c02800 	.word	0xf2c02800
   2eec8:	a91e8083 	.word	0xa91e8083
   2eecc:	f0044628 	.word	0xf0044628
   2eed0:	2800fcb1 	.word	0x2800fcb1
   2eed4:	4621da7c 	.word	0x4621da7c
   2eed8:	f7ffa80b 	.word	0xf7ffa80b
   2eedc:	4606fecd 	.word	0x4606fecd
   2eee0:	9b17b980 	.word	0x9b17b980
   2eee4:	d0642b00 	.word	0xd0642b00
   2eee8:	2b009b1a 	.word	0x2b009b1a
   2eeec:	e9cdd061 	.word	0xe9cdd061
   2eef0:	46230000 	.word	0x46230000
   2eef4:	a902462a 	.word	0xa902462a
   2eef8:	f7ffa80b 	.word	0xf7ffa80b
   2eefc:	4606fa6b 	.word	0x4606fa6b
   2ef00:	d04c2800 	.word	0xd04c2800
   2ef04:	f003a802 	.word	0xf003a802
   2ef08:	a805ffdb 	.word	0xa805ffdb
   2ef0c:	ffd8f003 	.word	0xffd8f003
   2ef10:	f003a808 	.word	0xf003a808
   2ef14:	9b23ffd5 	.word	0x9b23ffd5
   2ef18:	d1262b01 	.word	0xd1262b01
   2ef1c:	b1c89828 	.word	0xb1c89828
   2ef20:	b1aa9a29 	.word	0xb1aa9a29
   2ef24:	eb052500 	.word	0xeb052500
   2ef28:	eb1003c5 	.word	0xeb1003c5
   2ef2c:	d0320483 	.word	0xd0320483
   2ef30:	f0034620 	.word	0xf0034620
   2ef34:	f104ffc5 	.word	0xf104ffc5
   2ef38:	f003000c 	.word	0xf003000c
   2ef3c:	f104ffc1 	.word	0xf104ffc1
   2ef40:	f0030018 	.word	0xf0030018
   2ef44:	9a29ffbd 	.word	0x9a29ffbd
   2ef48:	42953501 	.word	0x42953501
   2ef4c:	d3ea9828 	.word	0xd3ea9828
   2ef50:	fc16f007 	.word	0xfc16f007
   2ef54:	ab0b2200 	.word	0xab0b2200
   2ef58:	a92a701a 	.word	0xa92a701a
   2ef5c:	428b3301 	.word	0x428b3301
   2ef60:	4630d1fa 	.word	0x4630d1fa
   2ef64:	e8bdb02b 	.word	0xe8bdb02b
   2ef68:	a80c83f0 	.word	0xa80c83f0
   2ef6c:	ffa8f003 	.word	0xffa8f003
   2ef70:	f003a80f 	.word	0xf003a80f
   2ef74:	a812ffa5 	.word	0xa812ffa5
   2ef78:	ffa2f003 	.word	0xffa2f003
   2ef7c:	f003a815 	.word	0xf003a815
   2ef80:	a818ff9f 	.word	0xa818ff9f
   2ef84:	ff9cf003 	.word	0xff9cf003
   2ef88:	f003a81b 	.word	0xf003a81b
   2ef8c:	a81eff99 	.word	0xa81eff99
   2ef90:	ff96f003 	.word	0xff96f003
   2ef94:	3501e7c2 	.word	0x3501e7c2
   2ef98:	d3c44295 	.word	0xd3c44295
   2ef9c:	4639e7d8 	.word	0x4639e7d8
   2efa0:	f004a802 	.word	0xf004a802
   2efa4:	b920fc47 	.word	0xb920fc47
   2efa8:	a8054649 	.word	0xa8054649
   2efac:	fc42f004 	.word	0xfc42f004
   2efb0:	4e08b130 	.word	0x4e08b130
   2efb4:	4e07e7a6 	.word	0x4e07e7a6
   2efb8:	b02b4630 	.word	0xb02b4630
   2efbc:	83f0e8bd 	.word	0x83f0e8bd
   2efc0:	a8084641 	.word	0xa8084641
   2efc4:	fc36f004 	.word	0xfc36f004
   2efc8:	28004606 	.word	0x28004606
   2efcc:	e7f0d09a 	.word	0xe7f0d09a
   2efd0:	e7974e01 	.word	0xe7974e01
   2efd4:	ffffb080 	.word	0xffffb080
   2efd8:	ffffb380 	.word	0xffffb380

0002efdc <interface_init>:
   2efdc:	f44fb508 	.word	0xf44fb508
   2efe0:	21007290 	.word	0x21007290
   2efe4:	f0124802 	.word	0xf0124802
   2efe8:	2000fd04 	.word	0x2000fd04
   2efec:	bf00bd08 	.word	0xbf00bd08
   2eff0:	2002c8dc 	.word	0x2002c8dc

0002eff4 <interface_socket_allocate>:
   2eff4:	4b29b5f8 	.word	0x4b29b5f8
   2eff8:	681d4606 	.word	0x681d4606
   2effc:	b1e54608 	.word	0xb1e54608
   2f000:	2c006a5c 	.word	0x2c006a5c
   2f004:	6c9cd03d 	.word	0x6c9cd03d
   2f008:	d03c2c00 	.word	0xd03c2c00
   2f00c:	2c006edc 	.word	0x2c006edc
   2f010:	f8d3d03b 	.word	0xf8d3d03b
   2f014:	b1791090 	.word	0xb1791090
   2f018:	10b4f8d3 	.word	0x10b4f8d3
   2f01c:	f8d3b3b9 	.word	0xf8d3b3b9
   2f020:	b3b110d8 	.word	0xb3b110d8
   2f024:	10fcf8d3 	.word	0x10fcf8d3
   2f028:	f04fb3a9 	.word	0xf04fb3a9
   2f02c:	200c35ff 	.word	0x200c35ff
   2f030:	f90cf7f4 	.word	0xf90cf7f4
   2f034:	bdf84628 	.word	0xbdf84628
   2f038:	f04f2504 	.word	0xf04f2504
   2f03c:	f04f0c01 	.word	0xf04f0c01
   2f040:	eb0537ff 	.word	0xeb0537ff
   2f044:	00a404c5 	.word	0x00a404c5
   2f048:	c004f843 	.word	0xc004f843
   2f04c:	4611441c 	.word	0x4611441c
   2f050:	462261a7 	.word	0x462261a7
   2f054:	facaf7fd 	.word	0xfacaf7fd
   2f058:	61e04603 	.word	0x61e04603
   2f05c:	681bb158 	.word	0x681bb158
   2f060:	4798681b 	.word	0x4798681b
   2f064:	6034b910 	.word	0x6034b910
   2f068:	bdf84628 	.word	0xbdf84628
   2f06c:	f7fd69e0 	.word	0xf7fd69e0
   2f070:	2300fadd 	.word	0x2300fadd
   2f074:	462061e3 	.word	0x462061e3
   2f078:	21002224 	.word	0x21002224
   2f07c:	fcb9f012 	.word	0xfcb9f012
   2f080:	2501e7d3 	.word	0x2501e7d3
   2f084:	2502e7d9 	.word	0x2502e7d9
   2f088:	2503e7d7 	.word	0x2503e7d7
   2f08c:	2505e7d5 	.word	0x2505e7d5
   2f090:	2506e7d3 	.word	0x2506e7d3
   2f094:	2507e7d1 	.word	0x2507e7d1
   2f098:	bf00e7cf 	.word	0xbf00e7cf
   2f09c:	2002c8dc 	.word	0x2002c8dc

0002f0a0 <interface_socket_free>:
   2f0a0:	d9002807 	.word	0xd9002807
   2f0a4:	b5104770 	.word	0xb5104770
   2f0a8:	eb004c07 	.word	0xeb004c07
   2f0ac:	eb0400c0 	.word	0xeb0400c0
   2f0b0:	69e00480 	.word	0x69e00480
   2f0b4:	f7fdb108 	.word	0xf7fdb108
   2f0b8:	4620fab9 	.word	0x4620fab9
   2f0bc:	4010e8bd 	.word	0x4010e8bd
   2f0c0:	21002224 	.word	0x21002224
   2f0c4:	bc95f012 	.word	0xbc95f012
   2f0c8:	2002c8dc 	.word	0x2002c8dc

0002f0cc <interface_socket_packet_handler_update>:
   2f0cc:	e92d2807 	.word	0xe92d2807
   2f0d0:	d81e43f8 	.word	0xd81e43f8
   2f0d4:	08c0ea4f 	.word	0x08c0ea4f
   2f0d8:	eb084e17 	.word	0xeb084e17
   2f0dc:	009b0300 	.word	0x009b0300
   2f0e0:	18f558f4 	.word	0x18f558f4
   2f0e4:	460bb1ac 	.word	0x460bb1ac
   2f0e8:	46114604 	.word	0x46114604
   2f0ec:	462a4618 	.word	0x462a4618
   2f0f0:	901cf8d5 	.word	0x901cf8d5
   2f0f4:	fa7af7fd 	.word	0xfa7af7fd
   2f0f8:	b1d061e8 	.word	0xb1d061e8
   2f0fc:	681b6803 	.word	0x681b6803
   2f100:	46074798 	.word	0x46074798
   2f104:	4648b948 	.word	0x4648b948
   2f108:	fa90f7fd 	.word	0xfa90f7fd
   2f10c:	e8bd4638 	.word	0xe8bd4638
   2f110:	270583f8 	.word	0x270583f8
   2f114:	e8bd4638 	.word	0xe8bd4638
   2f118:	69e883f8 	.word	0x69e883f8
   2f11c:	fa86f7fd 	.word	0xfa86f7fd
   2f120:	0004eb08 	.word	0x0004eb08
   2f124:	0680eb06 	.word	0x0680eb06
   2f128:	901cf8c6 	.word	0x901cf8c6
   2f12c:	e8bd4638 	.word	0xe8bd4638
   2f130:	270483f8 	.word	0x270483f8
   2f134:	bf00e7f4 	.word	0xbf00e7f4
   2f138:	2002c8dc 	.word	0x2002c8dc

0002f13c <interface_socket_wait>:
   2f13c:	eb00b5f0 	.word	0xeb00b5f0
   2f140:	4c0e00c0 	.word	0x4c0e00c0
   2f144:	58250080 	.word	0x58250080
   2f148:	4015b083 	.word	0x4015b083
   2f14c:	9301428d 	.word	0x9301428d
   2f150:	d0104404 	.word	0xd0104404
   2f154:	b9736863 	.word	0xb9736863
   2f158:	4616460f 	.word	0x4616460f
   2f15c:	e0064625 	.word	0xe0064625
   2f160:	b943686b 	.word	0xb943686b
   2f164:	4620a901 	.word	0x4620a901
   2f168:	ffdcf7f3 	.word	0xffdcf7f3
   2f16c:	682bb920 	.word	0x682bb920
   2f170:	42bb4033 	.word	0x42bb4033
   2f174:	2000d1f4 	.word	0x2000d1f4
   2f178:	bdf0b003 	.word	0xbdf0b003
   2f17c:	2002c8dc 	.word	0x2002c8dc

0002f180 <interface_from_internal_id_search>:
   2f180:	681a4b23 	.word	0x681a4b23
   2f184:	699ab112 	.word	0x699ab112
   2f188:	d0324282 	.word	0xd0324282
   2f18c:	b1126a5a 	.word	0xb1126a5a
   2f190:	42826bda 	.word	0x42826bda
   2f194:	6c9ad02f 	.word	0x6c9ad02f
   2f198:	6e1ab112 	.word	0x6e1ab112
   2f19c:	d02c4282 	.word	0xd02c4282
   2f1a0:	b11a6eda 	.word	0xb11a6eda
   2f1a4:	2084f8d3 	.word	0x2084f8d3
   2f1a8:	d0284282 	.word	0xd0284282
   2f1ac:	2090f8d3 	.word	0x2090f8d3
   2f1b0:	f8d3b11a 	.word	0xf8d3b11a
   2f1b4:	428220a8 	.word	0x428220a8
   2f1b8:	f8d3d023 	.word	0xf8d3d023
   2f1bc:	b11a20b4 	.word	0xb11a20b4
   2f1c0:	20ccf8d3 	.word	0x20ccf8d3
   2f1c4:	d01e4282 	.word	0xd01e4282
   2f1c8:	20d8f8d3 	.word	0x20d8f8d3
   2f1cc:	f8d3b11a 	.word	0xf8d3b11a
   2f1d0:	428220f0 	.word	0x428220f0
   2f1d4:	f8d3d019 	.word	0xf8d3d019
   2f1d8:	b13a20fc 	.word	0xb13a20fc
   2f1dc:	3114f8d3 	.word	0x3114f8d3
   2f1e0:	bf144283 	.word	0xbf144283
   2f1e4:	30fff04f 	.word	0x30fff04f
   2f1e8:	47702007 	.word	0x47702007
   2f1ec:	30fff04f 	.word	0x30fff04f
   2f1f0:	20004770 	.word	0x20004770
   2f1f4:	20014770 	.word	0x20014770
   2f1f8:	20024770 	.word	0x20024770
   2f1fc:	20034770 	.word	0x20034770
   2f200:	20044770 	.word	0x20044770
   2f204:	20054770 	.word	0x20054770
   2f208:	20064770 	.word	0x20064770
   2f20c:	bf004770 	.word	0xbf004770
   2f210:	2002c8dc 	.word	0x2002c8dc

0002f214 <interface_socket_from_handle_get>:
   2f214:	d8072807 	.word	0xd8072807
   2f218:	00c0eb00 	.word	0x00c0eb00
   2f21c:	00804b03 	.word	0x00804b03
   2f220:	b10a581a 	.word	0xb10a581a
   2f224:	47704418 	.word	0x47704418
   2f228:	47702000 	.word	0x47702000
   2f22c:	2002c8dc 	.word	0x2002c8dc

0002f230 <interface_socket_event_get>:
   2f230:	2807b119 	.word	0x2807b119
   2f234:	2310d902 	.word	0x2310d902
   2f238:	4770600b 	.word	0x4770600b
   2f23c:	00c0eb00 	.word	0x00c0eb00
   2f240:	00804b07 	.word	0x00804b07
   2f244:	2a00581a 	.word	0x2a00581a
   2f248:	581bd0f5 	.word	0x581bd0f5
   2f24c:	f0030c1b 	.word	0xf0030c1b
   2f250:	2a0a020a 	.word	0x2a0a020a
   2f254:	f003bf14 	.word	0xf003bf14
   2f258:	f003030f 	.word	0xf003030f
   2f25c:	e7eb030d 	.word	0xe7eb030d
   2f260:	2002c8dc 	.word	0x2002c8dc

0002f264 <interface_socket_setopt>:
   2f264:	b5702807 	.word	0xb5702807
   2f268:	eb00d827 	.word	0xeb00d827
   2f26c:	4c1600c0 	.word	0x4c1600c0
   2f270:	58250080 	.word	0x58250080
   2f274:	2901b30d 	.word	0x2901b30d
   2f278:	2a14d119 	.word	0x2a14d119
   2f27c:	b183d117 	.word	0xb183d117
   2f280:	2a089a04 	.word	0x2a089a04
   2f284:	f44fd10d 	.word	0xf44fd10d
   2f288:	685a757a 	.word	0x685a757a
   2f28c:	68194e0f 	.word	0x68194e0f
   2f290:	2302fba6 	.word	0x2302fba6
   2f294:	fb05099b 	.word	0xfb05099b
   2f298:	44203301 	.word	0x44203301
   2f29c:	20006203 	.word	0x20006203
   2f2a0:	2016bd70 	.word	0x2016bd70
   2f2a4:	ffd2f7f3 	.word	0xffd2f7f3
   2f2a8:	30fff04f 	.word	0x30fff04f
   2f2ac:	202abd70 	.word	0x202abd70
   2f2b0:	ffccf7f3 	.word	0xffccf7f3
   2f2b4:	30fff04f 	.word	0x30fff04f
   2f2b8:	2009bd70 	.word	0x2009bd70
   2f2bc:	ffc6f7f3 	.word	0xffc6f7f3
   2f2c0:	30fff04f 	.word	0x30fff04f
   2f2c4:	bf00bd70 	.word	0xbf00bd70
   2f2c8:	2002c8dc 	.word	0x2002c8dc
   2f2cc:	10624dd3 	.word	0x10624dd3

0002f2d0 <interface_socket_getopt>:
   2f2d0:	2807b570 	.word	0x2807b570
   2f2d4:	d8219d04 	.word	0xd8219d04
   2f2d8:	eb004c13 	.word	0xeb004c13
   2f2dc:	008000c0 	.word	0x008000c0
   2f2e0:	44045826 	.word	0x44045826
   2f2e4:	2901b1d6 	.word	0x2901b1d6
   2f2e8:	2a04d112 	.word	0x2a04d112
   2f2ec:	b14bd110 	.word	0xb14bd110
   2f2f0:	682ab145 	.word	0x682ab145
   2f2f4:	d1052a04 	.word	0xd1052a04
   2f2f8:	68612200 	.word	0x68612200
   2f2fc:	60194610 	.word	0x60194610
   2f300:	bd706062 	.word	0xbd706062
   2f304:	f7f32016 	.word	0xf7f32016
   2f308:	f04fffa1 	.word	0xf04fffa1
   2f30c:	bd7030ff 	.word	0xbd7030ff
   2f310:	f7f3202a 	.word	0xf7f3202a
   2f314:	f04fff9b 	.word	0xf04fff9b
   2f318:	bd7030ff 	.word	0xbd7030ff
   2f31c:	f7f32009 	.word	0xf7f32009
   2f320:	f04fff95 	.word	0xf04fff95
   2f324:	bd7030ff 	.word	0xbd7030ff
   2f328:	2002c8dc 	.word	0x2002c8dc

0002f32c <interface_shutdown>:
   2f32c:	681a4b15 	.word	0x681a4b15
   2f330:	2270b10a 	.word	0x2270b10a
   2f334:	6a5a605a 	.word	0x6a5a605a
   2f338:	2270b10a 	.word	0x2270b10a
   2f33c:	6c9a629a 	.word	0x6c9a629a
   2f340:	2270b10a 	.word	0x2270b10a
   2f344:	6eda64da 	.word	0x6eda64da
   2f348:	2270b10a 	.word	0x2270b10a
   2f34c:	f8d3671a 	.word	0xf8d3671a
   2f350:	b1122090 	.word	0xb1122090
   2f354:	f8c32270 	.word	0xf8c32270
   2f358:	f8d32094 	.word	0xf8d32094
   2f35c:	b11220b4 	.word	0xb11220b4
   2f360:	f8c32270 	.word	0xf8c32270
   2f364:	f8d320b8 	.word	0xf8d320b8
   2f368:	b11220d8 	.word	0xb11220d8
   2f36c:	f8c32270 	.word	0xf8c32270
   2f370:	f8d320dc 	.word	0xf8d320dc
   2f374:	b11220fc 	.word	0xb11220fc
   2f378:	f8c32270 	.word	0xf8c32270
   2f37c:	20002100 	.word	0x20002100
   2f380:	bf004770 	.word	0xbf004770
   2f384:	2002c8dc 	.word	0x2002c8dc

0002f388 <interface_socket_fcntl>:
   2f388:	b5102807 	.word	0xb5102807
   2f38c:	eb00d818 	.word	0xeb00d818
   2f390:	4c1100c0 	.word	0x4c1100c0
   2f394:	58e00083 	.word	0x58e00083
   2f398:	2901b190 	.word	0x2901b190
   2f39c:	2902d005 	.word	0x2902d005
   2f3a0:	58e0d114 	.word	0x58e0d114
   2f3a4:	7000f3c0 	.word	0x7000f3c0
   2f3a8:	f012bd10 	.word	0xf012bd10
   2f3ac:	58e20001 	.word	0x58e20001
   2f3b0:	2000bf1a 	.word	0x2000bf1a
   2f3b4:	5280f042 	.word	0x5280f042
   2f3b8:	5280f022 	.word	0x5280f022
   2f3bc:	bd1050e2 	.word	0xbd1050e2
   2f3c0:	f7f32009 	.word	0xf7f32009
   2f3c4:	f04fff43 	.word	0xf04fff43
   2f3c8:	bd1030ff 	.word	0xbd1030ff
   2f3cc:	f7f32016 	.word	0xf7f32016
   2f3d0:	f04fff3d 	.word	0xf04fff3d
   2f3d4:	bd1030ff 	.word	0xbd1030ff
   2f3d8:	2002c8dc 	.word	0x2002c8dc

0002f3dc <symbol_00026c2>:
   2f3dc:	4ff0e92d 	.word	0x4ff0e92d
   2f3e0:	2100460e 	.word	0x2100460e
   2f3e4:	b0854605 	.word	0xb0854605
   2f3e8:	93004608 	.word	0x93004608
   2f3ec:	461c4617 	.word	0x461c4617
   2f3f0:	aa034613 	.word	0xaa034613
   2f3f4:	9038f8dd 	.word	0x9038f8dd
   2f3f8:	f88af7fb 	.word	0xf88af7fb
   2f3fc:	f7ea4628 	.word	0xf7ea4628
   2f400:	4682fd71 	.word	0x4682fd71
   2f404:	f7ea4630 	.word	0xf7ea4630
   2f408:	9903fd6d 	.word	0x9903fd6d
   2f40c:	eb031c4b 	.word	0xeb031c4b
   2f410:	44531391 	.word	0x44531391
   2f414:	9b0f4418 	.word	0x9b0f4418
   2f418:	d8534298 	.word	0xd8534298
   2f41c:	f0072001 	.word	0xf0072001
   2f420:	4682f99b 	.word	0x4682f99b
   2f424:	d0522800 	.word	0xd0522800
   2f428:	94009903 	.word	0x94009903
   2f42c:	aa03463b 	.word	0xaa03463b
   2f430:	f86ef7fb 	.word	0xf86ef7fb
   2f434:	28004680 	.word	0x28004680
   2f438:	4628d13d 	.word	0x4628d13d
   2f43c:	fd52f7ea 	.word	0xfd52f7ea
   2f440:	46024629 	.word	0x46024629
   2f444:	f0124648 	.word	0xf0124648
   2f448:	4628fab4 	.word	0x4628fab4
   2f44c:	fd4af7ea 	.word	0xfd4af7ea
   2f450:	eb099b03 	.word	0xeb099b03
   2f454:	b19b0400 	.word	0xb19b0400
   2f458:	270a46d3 	.word	0x270a46d3
   2f45c:	bf282b40 	.word	0xbf282b40
   2f460:	461d2340 	.word	0x461d2340
   2f464:	461a4659 	.word	0x461a4659
   2f468:	f0124620 	.word	0xf0124620
   2f46c:	9b03faa2 	.word	0x9b03faa2
   2f470:	1b5b442c 	.word	0x1b5b442c
   2f474:	44ab7027 	.word	0x44ab7027
   2f478:	93033401 	.word	0x93033401
   2f47c:	d1ed2b00 	.word	0xd1ed2b00
   2f480:	f7ea4630 	.word	0xf7ea4630
   2f484:	4631fd2f 	.word	0x4631fd2f
   2f488:	46204602 	.word	0x46204602
   2f48c:	fa91f012 	.word	0xfa91f012
   2f490:	f7ea4630 	.word	0xf7ea4630
   2f494:	2100fd27 	.word	0x2100fd27
   2f498:	18234602 	.word	0x18234602
   2f49c:	330154a1 	.word	0x330154a1
   2f4a0:	eba39a10 	.word	0xeba39a10
   2f4a4:	46500309 	.word	0x46500309
   2f4a8:	f0076013 	.word	0xf0076013
   2f4ac:	4640f969 	.word	0x4640f969
   2f4b0:	e8bdb005 	.word	0xe8bdb005
   2f4b4:	46508ff0 	.word	0x46508ff0
   2f4b8:	f962f007 	.word	0xf962f007
   2f4bc:	b0054640 	.word	0xb0054640
   2f4c0:	8ff0e8bd 	.word	0x8ff0e8bd
   2f4c4:	f06f9b10 	.word	0xf06f9b10
   2f4c8:	60180829 	.word	0x60180829
   2f4cc:	f8dfe7ef 	.word	0xf8dfe7ef
   2f4d0:	e7ec8004 	.word	0xe7ec8004
   2f4d4:	ffffee80 	.word	0xffffee80

0002f4d8 <ip_recvd_packet_free_cb>:
   2f4d8:	4604b510 	.word	0x4604b510
   2f4dc:	f7fa6800 	.word	0xf7fa6800
   2f4e0:	68a0fc9f 	.word	0x68a0fc9f
   2f4e4:	e8bdb118 	.word	0xe8bdb118
   2f4e8:	f0074010 	.word	0xf0074010
   2f4ec:	bd10b949 	.word	0xbd10b949

0002f4f0 <rpc_error_to_nrf_bsd_error>:
   2f4f0:	bf9a2810 	.word	0xbf9a2810
   2f4f4:	f8534b02 	.word	0xf8534b02
   2f4f8:	202d0020 	.word	0x202d0020
   2f4fc:	bf004770 	.word	0xbf004770
   2f500:	00043d60 	.word	0x00043d60

0002f504 <ip_interface_request_create>:
   2f504:	2500b570 	.word	0x2500b570
   2f508:	ac02b082 	.word	0xac02b082
   2f50c:	5d04f844 	.word	0x5d04f844
   2f510:	460d4606 	.word	0x460d4606
   2f514:	46194620 	.word	0x46194620
   2f518:	f7fa4614 	.word	0xf7fa4614
   2f51c:	b960fc4f 	.word	0xb960fc4f
   2f520:	22089b01 	.word	0x22089b01
   2f524:	72987258 	.word	0x72987258
   2f528:	461872d8 	.word	0x461872d8
   2f52c:	4406ea44 	.word	0x4406ea44
   2f530:	611d60dc 	.word	0x611d60dc
   2f534:	b002721a 	.word	0xb002721a
   2f538:	9b01bd70 	.word	0x9b01bd70
   2f53c:	b0024618 	.word	0xb0024618
   2f540:	bf00bd70 	.word	0xbf00bd70

0002f544 <ip_interface_request_send>:
   2f544:	460cb570 	.word	0x460cb570
   2f548:	46114605 	.word	0x46114605
   2f54c:	461e4620 	.word	0x461e4620
   2f550:	fc48f7fa 	.word	0xfc48f7fa
   2f554:	bd70b900 	.word	0xbd70b900
   2f558:	b1086820 	.word	0xb1086820
   2f55c:	fc60f7fa 	.word	0xfc60f7fa
   2f560:	f7fa4620 	.word	0xf7fa4620
   2f564:	602efc55 	.word	0x602efc55
   2f568:	bd702023 	.word	0xbd702023

0002f56c <ip_interface_wait>:
   2f56c:	4605b538 	.word	0x4605b538
   2f570:	fde4f7ff 	.word	0xfde4f7ff
   2f574:	b1084604 	.word	0xb1084604
   2f578:	bd384620 	.word	0xbd384620
   2f57c:	f7ff4628 	.word	0xf7ff4628
   2f580:	2800fe49 	.word	0x2800fe49
   2f584:	6844d0f8 	.word	0x6844d0f8
   2f588:	d0f52c00 	.word	0xd0f52c00
   2f58c:	60432300 	.word	0x60432300
   2f590:	bd384620 	.word	0xbd384620

0002f594 <ip_interface_init>:
   2f594:	2300b538 	.word	0x2300b538
   2f598:	4c084d07 	.word	0x4c084d07
   2f59c:	22204619 	.word	0x22204619
   2f5a0:	602b4807 	.word	0x602b4807
   2f5a4:	f0126023 	.word	0xf0126023
   2f5a8:	f7fafa24 	.word	0xf7fafa24
   2f5ac:	3000fc01 	.word	0x3000fc01
   2f5b0:	2001bf18 	.word	0x2001bf18
   2f5b4:	bd384240 	.word	0xbd384240
   2f5b8:	20024b00 	.word	0x20024b00
   2f5bc:	20024afc 	.word	0x20024afc
   2f5c0:	20024b08 	.word	0x20024b08

0002f5c4 <ip_interface_open>:
   2f5c4:	41f0e92d 	.word	0x41f0e92d
   2f5c8:	20004606 	.word	0x20004606
   2f5cc:	0308f026 	.word	0x0308f026
   2f5d0:	2b02b082 	.word	0x2b02b082
   2f5d4:	4617460c 	.word	0x4617460c
   2f5d8:	d0029000 	.word	0xd0029000
   2f5dc:	f0402e05 	.word	0xf0402e05
   2f5e0:	1e638084 	.word	0x1e638084
   2f5e4:	d85c2b02 	.word	0xd85c2b02
   2f5e8:	d1542f00 	.word	0xd1542f00
   2f5ec:	d0672c01 	.word	0xd0672c01
   2f5f0:	bf182c03 	.word	0xbf182c03
   2f5f4:	4a482702 	.word	0x4a482702
   2f5f8:	46684621 	.word	0x46684621
   2f5fc:	fcfaf7ff 	.word	0xfcfaf7ff
   2f600:	46809b00 	.word	0x46809b00
   2f604:	d0592b00 	.word	0xd0592b00
   2f608:	a8022100 	.word	0xa8022100
   2f60c:	1d04f840 	.word	0x1d04f840
   2f610:	6403e9c3 	.word	0x6403e9c3
   2f614:	f7fa615f 	.word	0xf7fa615f
   2f618:	2800fbd1 	.word	0x2800fbd1
   2f61c:	f247d14b 	.word	0xf247d14b
   2f620:	f04f0201 	.word	0xf04f0201
   2f624:	210833ff 	.word	0x210833ff
   2f628:	ea429d01 	.word	0xea429d01
   2f62c:	60ea4208 	.word	0x60ea4208
   2f630:	72a87268 	.word	0x72a87268
   2f634:	722972e8 	.word	0x722972e8
   2f638:	746b742b 	.word	0x746b742b
   2f63c:	74eb74ab 	.word	0x74eb74ab
   2f640:	2e0568ab 	.word	0x2e0568ab
   2f644:	030cf103 	.word	0x030cf103
   2f648:	d00360ab 	.word	0xd00360ab
   2f64c:	bf142e0a 	.word	0xbf142e0a
   2f650:	26022601 	.word	0x26022601
   2f654:	61ef616e 	.word	0x61ef616e
   2f658:	f24761ac 	.word	0xf24761ac
   2f65c:	46280101 	.word	0x46280101
   2f660:	f7fa9f00 	.word	0xf7fa9f00
   2f664:	4606fbbf 	.word	0x4606fbbf
   2f668:	6828b360 	.word	0x6828b360
   2f66c:	f7fab108 	.word	0xf7fab108
   2f670:	4628fbd7 	.word	0x4628fbd7
   2f674:	fbccf7fa 	.word	0xfbccf7fa
   2f678:	25232301 	.word	0x25232301
   2f67c:	4640603b 	.word	0x4640603b
   2f680:	fd0ef7ff 	.word	0xfd0ef7ff
   2f684:	f7f34628 	.word	0xf7f34628
   2f688:	f04ffde1 	.word	0xf04ffde1
   2f68c:	464038ff 	.word	0x464038ff
   2f690:	e8bdb002 	.word	0xe8bdb002
   2f694:	2c0181f0 	.word	0x2c0181f0
   2f698:	2c02d009 	.word	0x2c02d009
   2f69c:	2f02d109 	.word	0x2f02d109
   2f6a0:	2016d0a9 	.word	0x2016d0a9
   2f6a4:	fdd2f7f3 	.word	0xfdd2f7f3
   2f6a8:	38fff04f 	.word	0x38fff04f
   2f6ac:	2f01e7ef 	.word	0x2f01e7ef
   2f6b0:	2702d1f7 	.word	0x2702d1f7
   2f6b4:	9d01e79f 	.word	0x9d01e79f
   2f6b8:	d1c12d00 	.word	0xd1c12d00
   2f6bc:	e7de250c 	.word	0xe7de250c
   2f6c0:	e7984627 	.word	0xe7984627
   2f6c4:	33fff04f 	.word	0x33fff04f
   2f6c8:	72fff64f 	.word	0x72fff64f
   2f6cc:	46402102 	.word	0x46402102
   2f6d0:	fd34f7ff 	.word	0xfd34f7ff
   2f6d4:	28004605 	.word	0x28004605
   2f6d8:	4640d1d1 	.word	0x4640d1d1
   2f6dc:	fd9af7ff 	.word	0xfd9af7ff
   2f6e0:	6845b148 	.word	0x6845b148
   2f6e4:	6046b13d 	.word	0x6046b13d
   2f6e8:	202fe7c9 	.word	0x202fe7c9
   2f6ec:	fdaef7f3 	.word	0xfdaef7f3
   2f6f0:	38fff04f 	.word	0x38fff04f
   2f6f4:	3c02e7cb 	.word	0x3c02e7cb
   2f6f8:	d8c82c01 	.word	0xd8c82c01
   2f6fc:	9b004640 	.word	0x9b004640
   2f700:	f442681a 	.word	0xf442681a
   2f704:	601a3200 	.word	0x601a3200
   2f708:	f442681a 	.word	0xf442681a
   2f70c:	601a1280 	.word	0x601a1280
   2f710:	e8bdb002 	.word	0xe8bdb002
   2f714:	bf0081f0 	.word	0xbf0081f0
   2f718:	0002f4d9 	.word	0x0002f4d9

0002f71c <ip_interface_close>:
   2f71c:	41f0e92d 	.word	0x41f0e92d
   2f720:	4606b082 	.word	0x4606b082
   2f724:	fd76f7ff 	.word	0xfd76f7ff
   2f728:	d0632800 	.word	0xd0632800
   2f72c:	21004604 	.word	0x21004604
   2f730:	6827a802 	.word	0x6827a802
   2f734:	1d04f840 	.word	0x1d04f840
   2f738:	8018f8d4 	.word	0x8018f8d4
   2f73c:	fb3ef7fa 	.word	0xfb3ef7fa
   2f740:	d13a2800 	.word	0xd13a2800
   2f744:	0309f247 	.word	0x0309f247
   2f748:	9d012208 	.word	0x9d012208
   2f74c:	4306ea43 	.word	0x4306ea43
   2f750:	f8c560eb 	.word	0xf8c560eb
   2f754:	72688010 	.word	0x72688010
   2f758:	72e872a8 	.word	0x72e872a8
   2f75c:	6823722a 	.word	0x6823722a
   2f760:	0109f247 	.word	0x0109f247
   2f764:	041b0c1b 	.word	0x041b0c1b
   2f768:	030df043 	.word	0x030df043
   2f76c:	68236023 	.word	0x68236023
   2f770:	f4234628 	.word	0xf4234628
   2f774:	60233300 	.word	0x60233300
   2f778:	f4236823 	.word	0xf4236823
   2f77c:	60231380 	.word	0x60231380
   2f780:	fb30f7fa 	.word	0xfb30f7fa
   2f784:	f04fbb40 	.word	0xf04fbb40
   2f788:	f64f33ff 	.word	0xf64f33ff
   2f78c:	210e72ff 	.word	0x210e72ff
   2f790:	f7ff4630 	.word	0xf7ff4630
   2f794:	4604fcd3 	.word	0x4604fcd3
   2f798:	4c17b1a0 	.word	0x4c17b1a0
   2f79c:	0026f854 	.word	0x0026f854
   2f7a0:	f7fab120 	.word	0xf7fab120
   2f7a4:	2300fb35 	.word	0x2300fb35
   2f7a8:	3026f844 	.word	0x3026f844
   2f7ac:	f7ff4630 	.word	0xf7ff4630
   2f7b0:	2000fc77 	.word	0x2000fc77
   2f7b4:	e8bdb002 	.word	0xe8bdb002
   2f7b8:	9d0181f0 	.word	0x9d0181f0
   2f7bc:	2d00200c 	.word	0x2d00200c
   2f7c0:	e012d1cd 	.word	0xe012d1cd
   2f7c4:	f7ff4630 	.word	0xf7ff4630
   2f7c8:	2800fd25 	.word	0x2800fd25
   2f7cc:	6843d0e5 	.word	0x6843d0e5
   2f7d0:	d0e22b00 	.word	0xd0e22b00
   2f7d4:	e7e06044 	.word	0xe7e06044
   2f7d8:	b1086828 	.word	0xb1086828
   2f7dc:	fb20f7fa 	.word	0xfb20f7fa
   2f7e0:	f7fa4628 	.word	0xf7fa4628
   2f7e4:	2023fb15 	.word	0x2023fb15
   2f7e8:	f7f36027 	.word	0xf7f36027
   2f7ec:	f04ffd2f 	.word	0xf04ffd2f
   2f7f0:	e7df30ff 	.word	0xe7df30ff
   2f7f4:	e7f82009 	.word	0xe7f82009
   2f7f8:	20024b08 	.word	0x20024b08

0002f7fc <ip_interface_sendto>:
   2f7fc:	4ff0e92d 	.word	0x4ff0e92d
   2f800:	b0892500 	.word	0xb0892500
   2f804:	46149103 	.word	0x46149103
   2f808:	95079301 	.word	0x95079301
   2f80c:	9e124607 	.word	0x9e124607
   2f810:	fd00f7ff 	.word	0xfd00f7ff
   2f814:	f0002800 	.word	0xf0002800
   2f818:	f5b48124 	.word	0xf5b48124
   2f81c:	f3005f80 	.word	0xf3005f80
   2f820:	69038118 	.word	0x69038118
   2f824:	2b014605 	.word	0x2b014605
   2f828:	80d1f000 	.word	0x80d1f000
   2f82c:	0390682a 	.word	0x0390682a
   2f830:	682ad423 	.word	0x682ad423
   2f834:	d4060091 	.word	0xd4060091
   2f838:	f0002b01 	.word	0xf0002b01
   2f83c:	682b80ed 	.word	0x682b80ed
   2f840:	f140031a 	.word	0xf140031a
   2f844:	682b8102 	.word	0x682b8102
   2f848:	f140031b 	.word	0xf140031b
   2f84c:	68a88106 	.word	0x68a88106
   2f850:	9218f8df 	.word	0x9218f8df
   2f854:	f0402800 	.word	0xf0402800
   2f858:	682b8096 	.word	0x682b8096
   2f85c:	f1400118 	.word	0xf1400118
   2f860:	682b8082 	.word	0x682b8082
   2f864:	6300f023 	.word	0x6300f023
   2f868:	f859602b 	.word	0xf859602b
   2f86c:	28000027 	.word	0x28000027
   2f870:	4620d17c 	.word	0x4620d17c
   2f874:	e8bdb009 	.word	0xe8bdb009
   2f878:	f2478ff0 	.word	0xf2478ff0
   2f87c:	f04f0806 	.word	0xf04f0806
   2f880:	043b0a0c 	.word	0x043b0a0c
   2f884:	91e4f8df 	.word	0x91e4f8df
   2f888:	46219304 	.word	0x46219304
   2f88c:	f7faa807 	.word	0xf7faa807
   2f890:	2804fa95 	.word	0x2804fa95
   2f894:	2800d0f9 	.word	0x2800d0f9
   2f898:	9b07d171 	.word	0x9b07d171
   2f89c:	a008f883 	.word	0xa008f883
   2f8a0:	72987258 	.word	0x72987258
   2f8a4:	b33e72d8 	.word	0xb33e72d8
   2f8a8:	687168ea 	.word	0x687168ea
   2f8ac:	d10a428a 	.word	0xd10a428a
   2f8b0:	f1032a02 	.word	0xf1032a02
   2f8b4:	7831001c 	.word	0x7831001c
   2f8b8:	8090f000 	.word	0x8090f000
   2f8bc:	d1022a0a 	.word	0xd1022a0a
   2f8c0:	f0002924 	.word	0xf0002924
   2f8c4:	681880af 	.word	0x681880af
   2f8c8:	f7fab110 	.word	0xf7fab110
   2f8cc:	9b07faa9 	.word	0x9b07faa9
   2f8d0:	f7fa4618 	.word	0xf7fa4618
   2f8d4:	2016fa9d 	.word	0x2016fa9d
   2f8d8:	031a682b 	.word	0x031a682b
   2f8dc:	682bd453 	.word	0x682bd453
   2f8e0:	2b0db29b 	.word	0x2b0db29b
   2f8e4:	682bd0b6 	.word	0x682bd0b6
   2f8e8:	1300f423 	.word	0x1300f423
   2f8ec:	682b602b 	.word	0x682b602b
   2f8f0:	3300f443 	.word	0x3300f443
   2f8f4:	e7ad602b 	.word	0xe7ad602b
   2f8f8:	99014642 	.word	0x99014642
   2f8fc:	69a96159 	.word	0x69a96159
   2f900:	61199804 	.word	0x61199804
   2f904:	43029903 	.word	0x43029903
   2f908:	605c60da 	.word	0x605c60da
   2f90c:	6818b119 	.word	0x6818b119
   2f910:	f0124622 	.word	0xf0124622
   2f914:	682bf84e 	.word	0x682bf84e
   2f918:	93054641 	.word	0x93054641
   2f91c:	f423682b 	.word	0xf423682b
   2f920:	602b3300 	.word	0x602b3300
   2f924:	f443682b 	.word	0xf443682b
   2f928:	602b1300 	.word	0x602b1300
   2f92c:	46189b07 	.word	0x46189b07
   2f930:	f7fa9302 	.word	0xf7fa9302
   2f934:	9b02fa57 	.word	0x9b02fa57
   2f938:	bb584683 	.word	0xbb584683
   2f93c:	3200f44f 	.word	0x3200f44f
   2f940:	33fff04f 	.word	0x33fff04f
   2f944:	46384611 	.word	0x46384611
   2f948:	fbf8f7ff 	.word	0xfbf8f7ff
   2f94c:	682bb370 	.word	0x682bb370
   2f950:	d4370319 	.word	0xd4370319
   2f954:	d1bf280c 	.word	0xd1bf280c
   2f958:	0027f859 	.word	0x0027f859
   2f95c:	d0942800 	.word	0xd0942800
   2f960:	fa56f7fa 	.word	0xfa56f7fa
   2f964:	f859e791 	.word	0xf859e791
   2f968:	69840027 	.word	0x69840027
   2f96c:	fa50f7fa 	.word	0xfa50f7fa
   2f970:	46202300 	.word	0x46202300
   2f974:	3027f849 	.word	0x3027f849
   2f978:	e8bdb009 	.word	0xe8bdb009
   2f97c:	682b8ff0 	.word	0x682b8ff0
   2f980:	031a200c 	.word	0x031a200c
   2f984:	f7f3d5ab 	.word	0xf7f3d5ab
   2f988:	f04ffc61 	.word	0xf04ffc61
   2f98c:	f85934ff 	.word	0xf85934ff
   2f990:	e76c0027 	.word	0xe76c0027
   2f994:	469b6818 	.word	0x469b6818
   2f998:	f7fab108 	.word	0xf7fab108
   2f99c:	4658fa41 	.word	0x4658fa41
   2f9a0:	fa36f7fa 	.word	0xfa36f7fa
   2f9a4:	20239b05 	.word	0x20239b05
   2f9a8:	e795602b 	.word	0xe795602b
   2f9ac:	f7ff4638 	.word	0xf7ff4638
   2f9b0:	4603fc31 	.word	0x4603fc31
   2f9b4:	6840b1f0 	.word	0x6840b1f0
   2f9b8:	f8c3b1e0 	.word	0xf8c3b1e0
   2f9bc:	682bb004 	.word	0x682bb004
   2f9c0:	d5c70319 	.word	0xd5c70319
   2f9c4:	682b68a8 	.word	0x682b68a8
   2f9c8:	d588031e 	.word	0xd588031e
   2f9cc:	2e00e742 	.word	0x2e00e742
   2f9d0:	af2cf43f 	.word	0xaf2cf43f
   2f9d4:	f8df2016 	.word	0xf8df2016
   2f9d8:	e7d49094 	.word	0xe7d49094
   2f9dc:	f47f2910 	.word	0xf47f2910
   2f9e0:	2204af72 	.word	0x2204af72
   2f9e4:	835a8931 	.word	0x835a8931
   2f9e8:	f1068319 	.word	0xf1068319
   2f9ec:	f011010c 	.word	0xf011010c
   2f9f0:	e01effe0 	.word	0xe01effe0
   2f9f4:	031b682b 	.word	0x031b682b
   2f9f8:	af2ff53f 	.word	0xaf2ff53f
   2f9fc:	b29b682b 	.word	0xb29b682b
   2fa00:	f43f2b0d 	.word	0xf43f2b0d
   2fa04:	682baf2a 	.word	0x682baf2a
   2fa08:	1300f423 	.word	0x1300f423
   2fa0c:	682b602b 	.word	0x682b602b
   2fa10:	3300f443 	.word	0x3300f443
   2fa14:	e720602b 	.word	0xe720602b
   2fa18:	b29b682b 	.word	0xb29b682b
   2fa1c:	f47f2b05 	.word	0xf47f2b05
   2fa20:	e70caf12 	.word	0xe70caf12
   2fa24:	89312210 	.word	0x89312210
   2fa28:	8319835a 	.word	0x8319835a
   2fa2c:	f01118b1 	.word	0xf01118b1
   2fa30:	f247ffc0 	.word	0xf247ffc0
   2fa34:	9b070207 	.word	0x9b070207
   2fa38:	68994690 	.word	0x68994690
   2fa3c:	31048b58 	.word	0x31048b58
   2fa40:	98014401 	.word	0x98014401
   2fa44:	61586099 	.word	0x61586099
   2fa48:	2023e759 	.word	0x2023e759
   2fa4c:	901cf8df 	.word	0x901cf8df
   2fa50:	2028e799 	.word	0x2028e799
   2fa54:	9014f8df 	.word	0x9014f8df
   2fa58:	2039e795 	.word	0x2039e795
   2fa5c:	900cf8df 	.word	0x900cf8df
   2fa60:	2009e791 	.word	0x2009e791
   2fa64:	9004f8df 	.word	0x9004f8df
   2fa68:	bf00e78d 	.word	0xbf00e78d
   2fa6c:	20024b08 	.word	0x20024b08

0002fa70 <ip_interface_recvfrom>:
   2fa70:	4ff0e92d 	.word	0x4ff0e92d
   2fa74:	2a00b085 	.word	0x2a00b085
   2fa78:	8110f000 	.word	0x8110f000
   2fa7c:	4699468a 	.word	0x4699468a
   2fa80:	46164607 	.word	0x46164607
   2fa84:	fbc6f7ff 	.word	0xfbc6f7ff
   2fa88:	28004604 	.word	0x28004604
   2fa8c:	810df000 	.word	0x810df000
   2fa90:	02d96803 	.word	0x02d96803
   2fa94:	f019d565 	.word	0xf019d565
   2fa98:	bf180f02 	.word	0xbf180f02
   2fa9c:	0800f04f 	.word	0x0800f04f
   2faa0:	3bfff04f 	.word	0x3bfff04f
   2faa4:	6803bf08 	.word	0x6803bf08
   2faa8:	0510f009 	.word	0x0510f009
   2faac:	f083bf04 	.word	0xf083bf04
   2fab0:	f3c85880 	.word	0xf3c85880
   2fab4:	68237800 	.word	0x68237800
   2fab8:	d56d03da 	.word	0xd56d03da
   2fabc:	69e06823 	.word	0x69e06823
   2fac0:	3380f423 	.word	0x3380f423
   2fac4:	68036023 	.word	0x68036023
   2fac8:	479868db 	.word	0x479868db
   2facc:	3ffff1b0 	.word	0x3ffff1b0
   2fad0:	f0004683 	.word	0xf0004683
   2fad4:	42868081 	.word	0x42868081
   2fad8:	6923dd03 	.word	0x6923dd03
   2fadc:	f0002b01 	.word	0xf0002b01
   2fae0:	250080a7 	.word	0x250080a7
   2fae4:	9b0f69e0 	.word	0x9b0f69e0
   2fae8:	681bb103 	.word	0x681bb103
   2faec:	e9cd9a0e 	.word	0xe9cd9a0e
   2faf0:	e9cda600 	.word	0xe9cda600
   2faf4:	68032302 	.word	0x68032302
   2faf8:	689b464a 	.word	0x689b464a
   2fafc:	47984669 	.word	0x47984669
   2fb00:	69e04683 	.word	0x69e04683
   2fb04:	3ffff1bb 	.word	0x3ffff1bb
   2fb08:	bf186803 	.word	0xbf186803
   2fb0c:	68db2601 	.word	0x68db2601
   2fb10:	2600bf0a 	.word	0x2600bf0a
   2fb14:	0800f04f 	.word	0x0800f04f
   2fb18:	0823f04f 	.word	0x0823f04f
   2fb1c:	30014798 	.word	0x30014798
   2fb20:	2d00d135 	.word	0x2d00d135
   2fb24:	80b6f000 	.word	0x80b6f000
   2fb28:	f0002e00 	.word	0xf0002e00
   2fb2c:	682380a6 	.word	0x682380a6
   2fb30:	d5060319 	.word	0xd5060319
   2fb34:	b29b6823 	.word	0xb29b6823
   2fb38:	d0022b0d 	.word	0xd0022b0d
   2fb3c:	2b016923 	.word	0x2b016923
   2fb40:	6823d025 	.word	0x6823d025
   2fb44:	4f80f013 	.word	0x4f80f013
   2fb48:	f0406823 	.word	0xf0406823
   2fb4c:	031a80b1 	.word	0x031a80b1
   2fb50:	f1b8d475 	.word	0xf1b8d475
   2fb54:	f0400f00 	.word	0xf0400f00
   2fb58:	4658808a 	.word	0x4658808a
   2fb5c:	e8bdb005 	.word	0xe8bdb005
   2fb60:	68038ff0 	.word	0x68038ff0
   2fb64:	2b06b29b 	.word	0x2b06b29b
   2fb68:	6803d073 	.word	0x6803d073
   2fb6c:	2b07b29b 	.word	0x2b07b29b
   2fb70:	f04fbf0c 	.word	0xf04fbf0c
   2fb74:	f04f0809 	.word	0xf04f0809
   2fb78:	69e00839 	.word	0x69e00839
   2fb7c:	68db6803 	.word	0x68db6803
   2fb80:	f1b04798 	.word	0xf1b04798
   2fb84:	46833fff 	.word	0x46833fff
   2fb88:	f04fd0db 	.word	0xf04fd0db
   2fb8c:	68233bff 	.word	0x68233bff
   2fb90:	3380f443 	.word	0x3380f443
   2fb94:	e7dc6023 	.word	0xe7dc6023
   2fb98:	0f00f1b8 	.word	0x0f00f1b8
   2fb9c:	8081f000 	.word	0x8081f000
   2fba0:	3280f44f 	.word	0x3280f44f
   2fba4:	46116a23 	.word	0x46116a23
   2fba8:	bf082b00 	.word	0xbf082b00
   2fbac:	33fff04f 	.word	0x33fff04f
   2fbb0:	f7ff4638 	.word	0xf7ff4638
   2fbb4:	4680fac3 	.word	0x4680fac3
   2fbb8:	6823b358 	.word	0x6823b358
   2fbbc:	031b69e0 	.word	0x031b69e0
   2fbc0:	6823d521 	.word	0x6823d521
   2fbc4:	2b0db29b 	.word	0x2b0db29b
   2fbc8:	6925d01d 	.word	0x6925d01d
   2fbcc:	0501f1a5 	.word	0x0501f1a5
   2fbd0:	f585fab5 	.word	0xf585fab5
   2fbd4:	e786096d 	.word	0xe786096d
   2fbd8:	03186823 	.word	0x03186823
   2fbdc:	6823d5dc 	.word	0x6823d5dc
   2fbe0:	2b0db29b 	.word	0x2b0db29b
   2fbe4:	6923d0d8 	.word	0x6923d0d8
   2fbe8:	2b0169e0 	.word	0x2b0169e0
   2fbec:	f04fd034 	.word	0xf04fd034
   2fbf0:	68230839 	.word	0x68230839
   2fbf4:	041b0c1b 	.word	0x041b0c1b
   2fbf8:	030df043 	.word	0x030df043
   2fbfc:	68236023 	.word	0x68236023
   2fc00:	1380f423 	.word	0x1380f423
   2fc04:	68036023 	.word	0x68036023
   2fc08:	479868db 	.word	0x479868db
   2fc0c:	d1be3001 	.word	0xd1be3001
   2fc10:	4638e797 	.word	0x4638e797
   2fc14:	fafef7ff 	.word	0xfafef7ff
   2fc18:	f8d0b138 	.word	0xf8d0b138
   2fc1c:	f1b88004 	.word	0xf1b88004
   2fc20:	d0020f00 	.word	0xd0020f00
   2fc24:	60432300 	.word	0x60432300
   2fc28:	f04fe7c7 	.word	0xf04fe7c7
   2fc2c:	e7420801 	.word	0xe7420801
   2fc30:	6823b11d 	.word	0x6823b11d
   2fc34:	d5b300db 	.word	0xd5b300db
   2fc38:	69e0e753 	.word	0x69e0e753
   2fc3c:	6823e753 	.word	0x6823e753
   2fc40:	2b0db29b 	.word	0x2b0db29b
   2fc44:	68a3d185 	.word	0x68a3d185
   2fc48:	d0822b00 	.word	0xd0822b00
   2fc4c:	8008f8d4 	.word	0x8008f8d4
   2fc50:	f04fe77f 	.word	0xf04fe77f
   2fc54:	e7900809 	.word	0xe7900809
   2fc58:	68db6803 	.word	0x68db6803
   2fc5c:	30014798 	.word	0x30014798
   2fc60:	f04fd00b 	.word	0xf04fd00b
   2fc64:	68230823 	.word	0x68230823
   2fc68:	3380f443 	.word	0x3380f443
   2fc6c:	46406023 	.word	0x46406023
   2fc70:	faecf7f3 	.word	0xfaecf7f3
   2fc74:	3bfff04f 	.word	0x3bfff04f
   2fc78:	6823e76f 	.word	0x6823e76f
   2fc7c:	0b00f04f 	.word	0x0b00f04f
   2fc80:	041b0c1b 	.word	0x041b0c1b
   2fc84:	030df043 	.word	0x030df043
   2fc88:	68236023 	.word	0x68236023
   2fc8c:	1380f423 	.word	0x1380f423
   2fc90:	e7626023 	.word	0xe7626023
   2fc94:	f47f2e00 	.word	0xf47f2e00
   2fc98:	e752af4a 	.word	0xe752af4a
   2fc9c:	0816f04f 	.word	0x0816f04f
   2fca0:	f04fe7e5 	.word	0xf04fe7e5
   2fca4:	69e00823 	.word	0x69e00823
   2fca8:	f04fe7ad 	.word	0xf04fe7ad
   2fcac:	e7de0809 	.word	0xe7de0809
   2fcb0:	4380f023 	.word	0x4380f023
   2fcb4:	68236023 	.word	0x68236023
   2fcb8:	0869f04f 	.word	0x0869f04f
   2fcbc:	041b0c1b 	.word	0x041b0c1b
   2fcc0:	030df043 	.word	0x030df043
   2fcc4:	e7d26023 	.word	0xe7d26023

0002fcc8 <ip_interface_connect>:
   2fcc8:	41f0e92d 	.word	0x41f0e92d
   2fccc:	2900b082 	.word	0x2900b082
   2fcd0:	2a00d044 	.word	0x2a00d044
   2fcd4:	4606d042 	.word	0x4606d042
   2fcd8:	f7ff460f 	.word	0xf7ff460f
   2fcdc:	4605fa9b 	.word	0x4605fa9b
   2fce0:	f0002800 	.word	0xf0002800
   2fce4:	68038096 	.word	0x68038096
   2fce8:	2b02b29b 	.word	0x2b02b29b
   2fcec:	6803d004 	.word	0x6803d004
   2fcf0:	2b04b29b 	.word	0x2b04b29b
   2fcf4:	808df040 	.word	0x808df040
   2fcf8:	f0116829 	.word	0xf0116829
   2fcfc:	f0405100 	.word	0xf0405100
   2fd00:	a8028084 	.word	0xa8028084
   2fd04:	1d04f840 	.word	0x1d04f840
   2fd08:	8018f8d5 	.word	0x8018f8d5
   2fd0c:	f856f7fa 	.word	0xf856f7fa
   2fd10:	2108bb70 	.word	0x2108bb70
   2fd14:	9c010433 	.word	0x9c010433
   2fd18:	42e0f443 	.word	0x42e0f443
   2fd1c:	0202f042 	.word	0x0202f042
   2fd20:	f8c460e2 	.word	0xf8c460e2
   2fd24:	72608010 	.word	0x72608010
   2fd28:	72e072a0 	.word	0x72e072a0
   2fd2c:	f4437221 	.word	0xf4437221
   2fd30:	f04343e0 	.word	0xf04343e0
   2fd34:	60e30302 	.word	0x60e30302
   2fd38:	69aa68a3 	.word	0x69aa68a3
   2fd3c:	61223304 	.word	0x61223304
   2fd40:	68eb60a3 	.word	0x68eb60a3
   2fd44:	4293687a 	.word	0x4293687a
   2fd48:	2b02d108 	.word	0x2b02d108
   2fd4c:	0018f104 	.word	0x0018f104
   2fd50:	d03a783a 	.word	0xd03a783a
   2fd54:	d1012b0a 	.word	0xd1012b0a
   2fd58:	d00e2a24 	.word	0xd00e2a24
   2fd5c:	46202416 	.word	0x46202416
   2fd60:	fa74f7f3 	.word	0xfa74f7f3
   2fd64:	34fff04f 	.word	0x34fff04f
   2fd68:	b0024620 	.word	0xb0024620
   2fd6c:	81f0e8bd 	.word	0x81f0e8bd
   2fd70:	2c009c01 	.word	0x2c009c01
   2fd74:	0433d04f 	.word	0x0433d04f
   2fd78:	2210e7d9 	.word	0x2210e7d9
   2fd7c:	18b9893b 	.word	0x18b9893b
   2fd80:	82a382e2 	.word	0x82a382e2
   2fd84:	fe15f011 	.word	0xfe15f011
   2fd88:	8ae268a3 	.word	0x8ae268a3
   2fd8c:	0102f247 	.word	0x0102f247
   2fd90:	60a34413 	.word	0x60a34413
   2fd94:	682b682f 	.word	0x682b682f
   2fd98:	f0434620 	.word	0xf0434620
   2fd9c:	602b5300 	.word	0x602b5300
   2fda0:	f820f7fa 	.word	0xf820f7fa
   2fda4:	682bb9e0 	.word	0x682bb9e0
   2fda8:	5880f013 	.word	0x5880f013
   2fdac:	f04fd12f 	.word	0xf04fd12f
   2fdb0:	f64f33ff 	.word	0xf64f33ff
   2fdb4:	210572ff 	.word	0x210572ff
   2fdb8:	f7ff4630 	.word	0xf7ff4630
   2fdbc:	4604f9bf 	.word	0x4604f9bf
   2fdc0:	2c73b1c0 	.word	0x2c73b1c0
   2fdc4:	602fd0cb 	.word	0x602fd0cb
   2fdc8:	2a10e7c9 	.word	0x2a10e7c9
   2fdcc:	2204d1c6 	.word	0x2204d1c6
   2fdd0:	f107893b 	.word	0xf107893b
   2fdd4:	82e2010c 	.word	0x82e2010c
   2fdd8:	f01182a3 	.word	0xf01182a3
   2fddc:	e7d3fdea 	.word	0xe7d3fdea
   2fde0:	b1086820 	.word	0xb1086820
   2fde4:	f81cf7fa 	.word	0xf81cf7fa
   2fde8:	f7fa4620 	.word	0xf7fa4620
   2fdec:	2423f811 	.word	0x2423f811
   2fdf0:	e7b4602f 	.word	0xe7b4602f
   2fdf4:	f7ff4630 	.word	0xf7ff4630
   2fdf8:	2800fa0d 	.word	0x2800fa0d
   2fdfc:	6844d0b4 	.word	0x6844d0b4
   2fe00:	d0b12c00 	.word	0xd0b12c00
   2fe04:	8004f8c0 	.word	0x8004f8c0
   2fe08:	2472e7db 	.word	0x2472e7db
   2fe0c:	2473e7a7 	.word	0x2473e7a7
   2fe10:	2409e7a5 	.word	0x2409e7a5
   2fe14:	240ce7a3 	.word	0x240ce7a3
   2fe18:	bf00e7a1 	.word	0xbf00e7a1

0002fe1c <ip_interface_bind>:
   2fe1c:	41f0e92d 	.word	0x41f0e92d
   2fe20:	b389b082 	.word	0xb389b082
   2fe24:	4607b382 	.word	0x4607b382
   2fe28:	f7ff460e 	.word	0xf7ff460e
   2fe2c:	4605f9f3 	.word	0x4605f9f3
   2fe30:	d07b2800 	.word	0xd07b2800
   2fe34:	b29b6803 	.word	0xb29b6803
   2fe38:	d1772b02 	.word	0xd1772b02
   2fe3c:	a8022100 	.word	0xa8022100
   2fe40:	1d04f840 	.word	0x1d04f840
   2fe44:	8018f8d5 	.word	0x8018f8d5
   2fe48:	ffb8f7f9 	.word	0xffb8f7f9
   2fe4c:	f247bb30 	.word	0xf247bb30
   2fe50:	22080305 	.word	0x22080305
   2fe54:	ea439c01 	.word	0xea439c01
   2fe58:	60e34307 	.word	0x60e34307
   2fe5c:	8010f8c4 	.word	0x8010f8c4
   2fe60:	72a07260 	.word	0x72a07260
   2fe64:	722272e0 	.word	0x722272e0
   2fe68:	330468a3 	.word	0x330468a3
   2fe6c:	68eb60a3 	.word	0x68eb60a3
   2fe70:	42936872 	.word	0x42936872
   2fe74:	2b02d108 	.word	0x2b02d108
   2fe78:	0018f104 	.word	0x0018f104
   2fe7c:	d03c7832 	.word	0xd03c7832
   2fe80:	d1012b0a 	.word	0xd1012b0a
   2fe84:	d00e2a24 	.word	0xd00e2a24
   2fe88:	46202416 	.word	0x46202416
   2fe8c:	f9def7f3 	.word	0xf9def7f3
   2fe90:	34fff04f 	.word	0x34fff04f
   2fe94:	b0024620 	.word	0xb0024620
   2fe98:	81f0e8bd 	.word	0x81f0e8bd
   2fe9c:	2c009c01 	.word	0x2c009c01
   2fea0:	240cd1e2 	.word	0x240cd1e2
   2fea4:	2210e7f1 	.word	0x2210e7f1
   2fea8:	18b18933 	.word	0x18b18933
   2feac:	82a382e2 	.word	0x82a382e2
   2feb0:	fd7ff011 	.word	0xfd7ff011
   2feb4:	8ae268a3 	.word	0x8ae268a3
   2feb8:	0105f247 	.word	0x0105f247
   2febc:	60a34413 	.word	0x60a34413
   2fec0:	4620682b 	.word	0x4620682b
   2fec4:	041b0c1b 	.word	0x041b0c1b
   2fec8:	0303f043 	.word	0x0303f043
   2fecc:	682e602b 	.word	0x682e602b
   2fed0:	ff88f7f9 	.word	0xff88f7f9
   2fed4:	b9d84680 	.word	0xb9d84680
   2fed8:	33fff04f 	.word	0x33fff04f
   2fedc:	72fff64f 	.word	0x72fff64f
   2fee0:	46382104 	.word	0x46382104
   2fee4:	f92af7ff 	.word	0xf92af7ff
   2fee8:	b3084604 	.word	0xb3084604
   2feec:	0c1b682b 	.word	0x0c1b682b
   2fef0:	f043041b 	.word	0xf043041b
   2fef4:	602b0302 	.word	0x602b0302
   2fef8:	2a10e7c7 	.word	0x2a10e7c7
   2fefc:	2204d1c4 	.word	0x2204d1c4
   2ff00:	f1068933 	.word	0xf1068933
   2ff04:	82e2010c 	.word	0x82e2010c
   2ff08:	f01182a3 	.word	0xf01182a3
   2ff0c:	e7d1fd52 	.word	0xe7d1fd52
   2ff10:	b1086820 	.word	0xb1086820
   2ff14:	ff84f7f9 	.word	0xff84f7f9
   2ff18:	04360c36 	.word	0x04360c36
   2ff1c:	f0464620 	.word	0xf0464620
   2ff20:	f7f90602 	.word	0xf7f90602
   2ff24:	2423ff75 	.word	0x2423ff75
   2ff28:	e7ae602e 	.word	0xe7ae602e
   2ff2c:	e7ac2409 	.word	0xe7ac2409
   2ff30:	f7ff4638 	.word	0xf7ff4638
   2ff34:	2800f96f 	.word	0x2800f96f
   2ff38:	6844d0ac 	.word	0x6844d0ac
   2ff3c:	d0a92c00 	.word	0xd0a92c00
   2ff40:	8004f8c0 	.word	0x8004f8c0
   2ff44:	bf00e7d2 	.word	0xbf00e7d2

0002ff48 <ip_interface_listen>:
   2ff48:	41f0e92d 	.word	0x41f0e92d
   2ff4c:	4606b082 	.word	0x4606b082
   2ff50:	f960f7ff 	.word	0xf960f7ff
   2ff54:	d0672800 	.word	0xd0672800
   2ff58:	46056803 	.word	0x46056803
   2ff5c:	2b04b29b 	.word	0x2b04b29b
   2ff60:	2100d162 	.word	0x2100d162
   2ff64:	46304a32 	.word	0x46304a32
   2ff68:	f8b0f7ff 	.word	0xf8b0f7ff
   2ff6c:	28004601 	.word	0x28004601
   2ff70:	a802d15c 	.word	0xa802d15c
   2ff74:	1d04f840 	.word	0x1d04f840
   2ff78:	f7f969af 	.word	0xf7f969af
   2ff7c:	bba8ff1f 	.word	0xbba8ff1f
   2ff80:	0308f247 	.word	0x0308f247
   2ff84:	9c012208 	.word	0x9c012208
   2ff88:	4306ea43 	.word	0x4306ea43
   2ff8c:	612760e3 	.word	0x612760e3
   2ff90:	72a07260 	.word	0x72a07260
   2ff94:	722272e0 	.word	0x722272e0
   2ff98:	f24768a3 	.word	0xf24768a3
   2ff9c:	33040108 	.word	0x33040108
   2ffa0:	682b60a3 	.word	0x682b60a3
   2ffa4:	0c1b4620 	.word	0x0c1b4620
   2ffa8:	f043041b 	.word	0xf043041b
   2ffac:	602b0306 	.word	0x602b0306
   2ffb0:	f7f9682f 	.word	0xf7f9682f
   2ffb4:	4680ff17 	.word	0x4680ff17
   2ffb8:	f04fb9e8 	.word	0xf04fb9e8
   2ffbc:	f64f33ff 	.word	0xf64f33ff
   2ffc0:	210772ff 	.word	0x210772ff
   2ffc4:	f7ff4630 	.word	0xf7ff4630
   2ffc8:	4604f8b9 	.word	0x4604f8b9
   2ffcc:	682bb308 	.word	0x682bb308
   2ffd0:	041b0c1b 	.word	0x041b0c1b
   2ffd4:	0304f043 	.word	0x0304f043
   2ffd8:	4620602b 	.word	0x4620602b
   2ffdc:	f936f7f3 	.word	0xf936f7f3
   2ffe0:	34fff04f 	.word	0x34fff04f
   2ffe4:	b0024620 	.word	0xb0024620
   2ffe8:	81f0e8bd 	.word	0x81f0e8bd
   2ffec:	2c009c01 	.word	0x2c009c01
   2fff0:	240cd1d2 	.word	0x240cd1d2
   2fff4:	6820e7f1 	.word	0x6820e7f1
   2fff8:	f7f9b108 	.word	0xf7f9b108
   2fffc:	0c3fff11 	.word	0x0c3fff11
   30000:	4620043f 	.word	0x4620043f
   30004:	0704f047 	.word	0x0704f047
   30008:	ff02f7f9 	.word	0xff02f7f9
   3000c:	602f2423 	.word	0x602f2423
   30010:	4630e7e3 	.word	0x4630e7e3
   30014:	f8fef7ff 	.word	0xf8fef7ff
   30018:	d0e32800 	.word	0xd0e32800
   3001c:	2c006844 	.word	0x2c006844
   30020:	f8c0d0e0 	.word	0xf8c0d0e0
   30024:	e7d28004 	.word	0xe7d28004
   30028:	e7d62409 	.word	0xe7d62409
   3002c:	e7d42423 	.word	0xe7d42423
   30030:	0002f4d9 	.word	0x0002f4d9

00030034 <ip_interface_accept>:
   30034:	4ff0e92d 	.word	0x4ff0e92d
   30038:	b0852500 	.word	0xb0852500
   3003c:	4690460f 	.word	0x4690460f
   30040:	46069502 	.word	0x46069502
   30044:	f8e6f7ff 	.word	0xf8e6f7ff
   30048:	28004604 	.word	0x28004604
   3004c:	811cf000 	.word	0x811cf000
   30050:	b29b6803 	.word	0xb29b6803
   30054:	d10a2b07 	.word	0xd10a2b07
   30058:	68056803 	.word	0x68056803
   3005c:	d41600db 	.word	0xd41600db
   30060:	3580f415 	.word	0x3580f415
   30064:	6805d019 	.word	0x6805d019
   30068:	3580f415 	.word	0x3580f415
   3006c:	f04fd124 	.word	0xf04fd124
   30070:	9b020909 	.word	0x9b020909
   30074:	4628b113 	.word	0x4628b113
   30078:	f812f7ff 	.word	0xf812f7ff
   3007c:	f04f4648 	.word	0xf04f4648
   30080:	f7f339ff 	.word	0xf7f339ff
   30084:	4648f8e3 	.word	0x4648f8e3
   30088:	e8bdb005 	.word	0xe8bdb005
   3008c:	f4158ff0 	.word	0xf4158ff0
   30090:	d16d3580 	.word	0xd16d3580
   30094:	0923f04f 	.word	0x0923f04f
   30098:	f44fe7eb 	.word	0xf44fe7eb
   3009c:	f04f3280 	.word	0xf04f3280
   300a0:	461133ff 	.word	0x461133ff
   300a4:	f7ff4630 	.word	0xf7ff4630
   300a8:	4681f849 	.word	0x4681f849
   300ac:	d07e2800 	.word	0xd07e2800
   300b0:	f4156825 	.word	0xf4156825
   300b4:	d0dc3580 	.word	0xd0dc3580
   300b8:	30fff04f 	.word	0x30fff04f
   300bc:	e9cd2300 	.word	0xe9cd2300
   300c0:	4a750300 	.word	0x4a750300
   300c4:	a8026921 	.word	0xa8026921
   300c8:	ff94f7fe 	.word	0xff94f7fe
   300cc:	46059b02 	.word	0x46059b02
   300d0:	f0002b00 	.word	0xf0002b00
   300d4:	210080dd 	.word	0x210080dd
   300d8:	a8046962 	.word	0xa8046962
   300dc:	68e2615a 	.word	0x68e2615a
   300e0:	1d04f840 	.word	0x1d04f840
   300e4:	692260da 	.word	0x692260da
   300e8:	f8d4611a 	.word	0xf8d4611a
   300ec:	f7f99018 	.word	0xf7f99018
   300f0:	2800fe65 	.word	0x2800fe65
   300f4:	f247d143 	.word	0xf247d143
   300f8:	2108030c 	.word	0x2108030c
   300fc:	b00cf8dd 	.word	0xb00cf8dd
   30100:	4306ea43 	.word	0x4306ea43
   30104:	300cf8cb 	.word	0x300cf8cb
   30108:	9010f8cb 	.word	0x9010f8cb
   3010c:	0009f88b 	.word	0x0009f88b
   30110:	000af88b 	.word	0x000af88b
   30114:	000bf88b 	.word	0x000bf88b
   30118:	1008f88b 	.word	0x1008f88b
   3011c:	f2476823 	.word	0xf2476823
   30120:	0c1b010c 	.word	0x0c1b010c
   30124:	f043041b 	.word	0xf043041b
   30128:	60230308 	.word	0x60230308
   3012c:	f8d44658 	.word	0xf8d44658
   30130:	f7f99000 	.word	0xf7f99000
   30134:	4682fe57 	.word	0x4682fe57
   30138:	6822bb48 	.word	0x6822bb48
   3013c:	f04f9900 	.word	0xf04f9900
   30140:	400a33ff 	.word	0x400a33ff
   30144:	21096022 	.word	0x21096022
   30148:	72fff64f 	.word	0x72fff64f
   3014c:	f7fe4630 	.word	0xf7fe4630
   30150:	4681fff5 	.word	0x4681fff5
   30154:	f0002800 	.word	0xf0002800
   30158:	68238085 	.word	0x68238085
   3015c:	431a9a01 	.word	0x431a9a01
   30160:	68236022 	.word	0x68236022
   30164:	041b0c1b 	.word	0x041b0c1b
   30168:	0307f043 	.word	0x0307f043
   3016c:	e7806023 	.word	0xe7806023
   30170:	5280f06f 	.word	0x5280f06f
   30174:	5380f04f 	.word	0x5380f04f
   30178:	2300e9cd 	.word	0x2300e9cd
   3017c:	f8dde7a1 	.word	0xf8dde7a1
   30180:	f04fb00c 	.word	0xf04fb00c
   30184:	f1bb090c 	.word	0xf1bb090c
   30188:	d1c70f00 	.word	0xd1c70f00
   3018c:	f8dbe771 	.word	0xf8dbe771
   30190:	b1080000 	.word	0xb1080000
   30194:	fe44f7f9 	.word	0xfe44f7f9
   30198:	4919ea4f 	.word	0x4919ea4f
   3019c:	ea4f4658 	.word	0xea4f4658
   301a0:	f7f94909 	.word	0xf7f94909
   301a4:	f049fe35 	.word	0xf049fe35
   301a8:	60230307 	.word	0x60230307
   301ac:	4630e772 	.word	0x4630e772
   301b0:	f830f7ff 	.word	0xf830f7ff
   301b4:	f8d0b130 	.word	0xf8d0b130
   301b8:	f1b99004 	.word	0xf1b99004
   301bc:	d0010f00 	.word	0xd0010f00
   301c0:	e7756045 	.word	0xe7756045
   301c4:	03d96823 	.word	0x03d96823
   301c8:	af76f53f 	.word	0xaf76f53f
   301cc:	99024d33 	.word	0x99024d33
   301d0:	3026f855 	.word	0x3026f855
   301d4:	618b699b 	.word	0x618b699b
   301d8:	68cbb147 	.word	0x68cbb147
   301dc:	d0242b0a 	.word	0xd0242b0a
   301e0:	d1032b02 	.word	0xd1032b02
   301e4:	2000f8d8 	.word	0x2000f8d8
   301e8:	d0322a10 	.word	0xd0322a10
   301ec:	482c680a 	.word	0x482c680a
   301f0:	f0424002 	.word	0xf0424002
   301f4:	600a0205 	.word	0x600a0205
   301f8:	68119a02 	.word	0x68119a02
   301fc:	3100f441 	.word	0x3100f441
   30200:	68116011 	.word	0x68116011
   30204:	1180f441 	.word	0x1180f441
   30208:	68236011 	.word	0x68236011
   3020c:	f0434003 	.word	0xf0434003
   30210:	60230307 	.word	0x60230307
   30214:	0026f855 	.word	0x0026f855
   30218:	fdfaf7f9 	.word	0xfdfaf7f9
   3021c:	46482300 	.word	0x46482300
   30220:	3026f845 	.word	0x3026f845
   30224:	e8bdb005 	.word	0xe8bdb005
   30228:	f8d88ff0 	.word	0xf8d88ff0
   3022c:	2a242000 	.word	0x2a242000
   30230:	703ad1dc 	.word	0x703ad1dc
   30234:	607b2210 	.word	0x607b2210
   30238:	3026f855 	.word	0x3026f855
   3023c:	0010f107 	.word	0x0010f107
   30240:	813b8b9b 	.word	0x813b8b9b
   30244:	1026f855 	.word	0x1026f855
   30248:	f0113120 	.word	0xf0113120
   3024c:	9902fbb2 	.word	0x9902fbb2
   30250:	703ae7cc 	.word	0x703ae7cc
   30254:	f855607b 	.word	0xf855607b
   30258:	f1073026 	.word	0xf1073026
   3025c:	8b9b000c 	.word	0x8b9b000c
   30260:	e7ee2204 	.word	0xe7ee2204
   30264:	f7fe4630 	.word	0xf7fe4630
   30268:	b138ffd5 	.word	0xb138ffd5
   3026c:	9004f8d0 	.word	0x9004f8d0
   30270:	0f00f1b9 	.word	0x0f00f1b9
   30274:	f8c0d002 	.word	0xf8c0d002
   30278:	e76ea004 	.word	0xe76ea004
   3027c:	9a016823 	.word	0x9a016823
   30280:	431346a9 	.word	0x431346a9
   30284:	e7a16023 	.word	0xe7a16023
   30288:	f04f4605 	.word	0xf04f4605
   3028c:	e6f00909 	.word	0xe6f00909
   30290:	090cf04f 	.word	0x090cf04f
   30294:	bf00e6f2 	.word	0xbf00e6f2
   30298:	0002f4d9 	.word	0x0002f4d9
   3029c:	20024b08 	.word	0x20024b08
   302a0:	ffff0000 	.word	0xffff0000

000302a4 <ip_interface_setopt>:
   302a4:	41f0e92d 	.word	0x41f0e92d
   302a8:	b0842901 	.word	0xb0842901
   302ac:	809cf040 	.word	0x809cf040
   302b0:	4690460e 	.word	0x4690460e
   302b4:	4607461d 	.word	0x4607461d
   302b8:	ffacf7fe 	.word	0xffacf7fe
   302bc:	28004604 	.word	0x28004604
   302c0:	80a5f000 	.word	0x80a5f000
   302c4:	0f19f1b8 	.word	0x0f19f1b8
   302c8:	2d00d16e 	.word	0x2d00d16e
   302cc:	8092f000 	.word	0x8092f000
   302d0:	f7e94628 	.word	0xf7e94628
   302d4:	9b0afe07 	.word	0x9b0afe07
   302d8:	f0404298 	.word	0xf0404298
   302dc:	6823808b 	.word	0x6823808b
   302e0:	2b02b29b 	.word	0x2b02b29b
   302e4:	4629d173 	.word	0x4629d173
   302e8:	f00768e0 	.word	0xf00768e0
   302ec:	9002ff0d 	.word	0x9002ff0d
   302f0:	bf083001 	.word	0xbf083001
   302f4:	d04e2516 	.word	0xd04e2516
   302f8:	025b6823 	.word	0x025b6823
   302fc:	6823d44a 	.word	0x6823d44a
   30300:	0300f413 	.word	0x0300f413
   30304:	6826d146 	.word	0x6826d146
   30308:	a8046822 	.word	0xa8046822
   3030c:	0280f442 	.word	0x0280f442
   30310:	21046022 	.word	0x21046022
   30314:	3d04f840 	.word	0x3d04f840
   30318:	8018f8d4 	.word	0x8018f8d4
   3031c:	fd4ef7f9 	.word	0xfd4ef7f9
   30320:	d14e2800 	.word	0xd14e2800
   30324:	0203f247 	.word	0x0203f247
   30328:	21082300 	.word	0x21082300
   3032c:	ea429d03 	.word	0xea429d03
   30330:	60ea4207 	.word	0x60ea4207
   30334:	8010f8c5 	.word	0x8010f8c5
   30338:	726b7229 	.word	0x726b7229
   3033c:	72eb72ab 	.word	0x72eb72ab
   30340:	0c08f04f 	.word	0x0c08f04f
   30344:	20102300 	.word	0x20102300
   30348:	68aa2130 	.word	0x68aa2130
   3034c:	4462756b 	.word	0x4462756b
   30350:	75ab60aa 	.word	0x75ab60aa
   30354:	76ab75eb 	.word	0x76ab75eb
   30358:	f88576eb 	.word	0xf88576eb
   3035c:	7628c014 	.word	0x7628c014
   30360:	22047669 	.word	0x22047669
   30364:	010ceb0d 	.word	0x010ceb0d
   30368:	f0116828 	.word	0xf0116828
   3036c:	f247fb22 	.word	0xf247fb22
   30370:	46280103 	.word	0x46280103
   30374:	fd36f7f9 	.word	0xfd36f7f9
   30378:	bb504680 	.word	0xbb504680
   3037c:	0200f44f 	.word	0x0200f44f
   30380:	33fff04f 	.word	0x33fff04f
   30384:	46384611 	.word	0x46384611
   30388:	fed8f7fe 	.word	0xfed8f7fe
   3038c:	b3984605 	.word	0xb3984605
   30390:	e0006026 	.word	0xe0006026
   30394:	46282523 	.word	0x46282523
   30398:	ff58f7f2 	.word	0xff58f7f2
   3039c:	35fff04f 	.word	0x35fff04f
   303a0:	b0044628 	.word	0xb0044628
   303a4:	81f0e8bd 	.word	0x81f0e8bd
   303a8:	46429b0a 	.word	0x46429b0a
   303ac:	46319300 	.word	0x46319300
   303b0:	4638462b 	.word	0x4638462b
   303b4:	ff56f7fe 	.word	0xff56f7fe
   303b8:	46284605 	.word	0x46284605
   303bc:	e8bdb004 	.word	0xe8bdb004
   303c0:	9d0381f0 	.word	0x9d0381f0
   303c4:	d1bb2d00 	.word	0xd1bb2d00
   303c8:	250c6026 	.word	0x250c6026
   303cc:	2509e7e3 	.word	0x2509e7e3
   303d0:	6828e7e1 	.word	0x6828e7e1
   303d4:	f7f9b108 	.word	0xf7f9b108
   303d8:	4628fd23 	.word	0x4628fd23
   303dc:	fd18f7f9 	.word	0xfd18f7f9
   303e0:	60262523 	.word	0x60262523
   303e4:	e7d66026 	.word	0xe7d66026
   303e8:	f7f2202a 	.word	0xf7f2202a
   303ec:	f04fff2f 	.word	0xf04fff2f
   303f0:	e7d535ff 	.word	0xe7d535ff
   303f4:	e7ce250e 	.word	0xe7ce250e
   303f8:	f7fe4638 	.word	0xf7fe4638
   303fc:	b120ff0b 	.word	0xb120ff0b
   30400:	b1156845 	.word	0xb1156845
   30404:	8004f8c0 	.word	0x8004f8c0
   30408:	6026e7c2 	.word	0x6026e7c2
   3040c:	2009e7c8 	.word	0x2009e7c8
   30410:	ff1cf7f2 	.word	0xff1cf7f2
   30414:	35fff04f 	.word	0x35fff04f
   30418:	bf00e7c2 	.word	0xbf00e7c2

0003041c <ip_interface_getopt>:
   3041c:	bf58f7fe 	.word	0xbf58f7fe

00030420 <ip_interface_getaddrinfo>:
   30420:	4ff0e92d 	.word	0x4ff0e92d
   30424:	0c00f04f 	.word	0x0c00f04f
   30428:	4e722401 	.word	0x4e722401
   3042c:	a1d0f8df 	.word	0xa1d0f8df
   30430:	91d0f8df 	.word	0x91d0f8df
   30434:	4607b085 	.word	0x4607b085
   30438:	93014615 	.word	0x93014615
   3043c:	c000f8a6 	.word	0xc000f8a6
   30440:	4000f8ca 	.word	0x4000f8ca
   30444:	4000f8c9 	.word	0x4000f8c9
   30448:	4608b171 	.word	0x4608b171
   3044c:	4661220a 	.word	0x4661220a
   30450:	f930f00d 	.word	0xf930f00d
   30454:	73fef64f 	.word	0x73fef64f
   30458:	429a1e42 	.word	0x429a1e42
   3045c:	8083f200 	.word	0x8083f200
   30460:	ea430203 	.word	0xea430203
   30464:	80302020 	.word	0x80302020
   30468:	819cf8df 	.word	0x819cf8df
   3046c:	3000f8d8 	.word	0x3000f8d8
   30470:	d1742b00 	.word	0xd1742b00
   30474:	60134a60 	.word	0x60134a60
   30478:	60134a60 	.word	0x60134a60
   3047c:	d0622f00 	.word	0xd0622f00
   30480:	f7e94638 	.word	0xf7e94638
   30484:	4683fd2f 	.word	0x4683fd2f
   30488:	69eab125 	.word	0x69eab125
   3048c:	6851b112 	.word	0x6851b112
   30490:	d06c2966 	.word	0xd06c2966
   30494:	32fff04f 	.word	0x32fff04f
   30498:	ae042100 	.word	0xae042100
   3049c:	1d04f846 	.word	0x1d04f846
   304a0:	46594630 	.word	0x46594630
   304a4:	f7f99200 	.word	0xf7f99200
   304a8:	9a00fc89 	.word	0x9a00fc89
   304ac:	d14c2800 	.word	0xd14c2800
   304b0:	010df247 	.word	0x010df247
   304b4:	0c08f04f 	.word	0x0c08f04f
   304b8:	ea419c03 	.word	0xea419c03
   304bc:	60e14102 	.word	0x60e14102
   304c0:	72606122 	.word	0x72606122
   304c4:	72e072a0 	.word	0x72e072a0
   304c8:	c008f884 	.word	0xc008f884
   304cc:	d0762d00 	.word	0xd0762d00
   304d0:	f022686a 	.word	0xf022686a
   304d4:	29020108 	.word	0x29020108
   304d8:	2a05d05c 	.word	0x2a05d05c
   304dc:	68a9d178 	.word	0x68a9d178
   304e0:	f8c92902 	.word	0xf8c92902
   304e4:	d0611000 	.word	0xd0611000
   304e8:	68ea61a2 	.word	0x68ea61a2
   304ec:	68aa6222 	.word	0x68aa6222
   304f0:	682a61e2 	.word	0x682a61e2
   304f4:	68a26162 	.word	0x68a26162
   304f8:	60a23210 	.word	0x60a23210
   304fc:	6820b12f 	.word	0x6820b12f
   30500:	465ab118 	.word	0x465ab118
   30504:	f0114639 	.word	0xf0114639
   30508:	2301fa54 	.word	0x2301fa54
   3050c:	010df247 	.word	0x010df247
   30510:	f8c84620 	.word	0xf8c84620
   30514:	f7f93000 	.word	0xf7f93000
   30518:	2800fc65 	.word	0x2800fc65
   3051c:	f04fd156 	.word	0xf04fd156
   30520:	930333ff 	.word	0x930333ff
   30524:	46204631 	.word	0x46204631
   30528:	fdfcf7f2 	.word	0xfdfcf7f2
   3052c:	3000f8d8 	.word	0x3000f8d8
   30530:	d0f72b01 	.word	0xd0f72b01
   30534:	68184b31 	.word	0x68184b31
   30538:	d13b2800 	.word	0xd13b2800
   3053c:	9a014b2e 	.word	0x9a014b2e
   30540:	6013681b 	.word	0x6013681b
   30544:	46bbe00c 	.word	0x46bbe00c
   30548:	9c03e79e 	.word	0x9c03e79e
   3054c:	d1bd2c00 	.word	0xd1bd2c00
   30550:	2300200c 	.word	0x2300200c
   30554:	3000f8c8 	.word	0x3000f8c8
   30558:	e8bdb005 	.word	0xe8bdb005
   3055c:	20738ff0 	.word	0x20738ff0
   30560:	e8bdb005 	.word	0xe8bdb005
   30564:	20168ff0 	.word	0x20168ff0
   30568:	e8bdb005 	.word	0xe8bdb005
   3056c:	68918ff0 	.word	0x68918ff0
   30570:	7f00f5b1 	.word	0x7f00f5b1
   30574:	f240d18e 	.word	0xf240d18e
   30578:	68d02102 	.word	0x68d02102
   3057c:	d1894288 	.word	0xd1894288
   30580:	29006991 	.word	0x29006991
   30584:	6868d086 	.word	0x6868d086
   30588:	fdbef007 	.word	0xfdbef007
   3058c:	d0811c43 	.word	0xd0811c43
   30590:	e7814602 	.word	0xe7814602
   30594:	290268a9 	.word	0x290268a9
   30598:	1000f8c9 	.word	0x1000f8c9
   3059c:	2a05d006 	.word	0x2a05d006
   305a0:	2a0ad0a2 	.word	0x2a0ad0a2
   305a4:	2201bf14 	.word	0x2201bf14
   305a8:	e79d2202 	.word	0xe79d2202
   305ac:	f8ca2102 	.word	0xf8ca2102
   305b0:	e7f41000 	.word	0xe7f41000
   305b4:	68184b11 	.word	0x68184b11
   305b8:	d0d12800 	.word	0xd0d12800
   305bc:	4629e7c9 	.word	0x4629e7c9
   305c0:	f1042210 	.word	0xf1042210
   305c4:	f0110014 	.word	0xf0110014
   305c8:	e794fa14 	.word	0xe794fa14
   305cc:	e7c02023 	.word	0xe7c02023
   305d0:	f7f2202f 	.word	0xf7f2202f
   305d4:	68a2fe3b 	.word	0x68a2fe3b
   305d8:	60a23210 	.word	0x60a23210
   305dc:	f04fb917 	.word	0xf04fb917
   305e0:	e7b630ff 	.word	0xe7b630ff
   305e4:	28006820 	.word	0x28006820
   305e8:	465ad0f9 	.word	0x465ad0f9
   305ec:	f0114639 	.word	0xf0114639
   305f0:	e7f4f9e0 	.word	0xe7f4f9e0
   305f4:	2002a304 	.word	0x2002a304
   305f8:	20024b00 	.word	0x20024b00
   305fc:	20024af8 	.word	0x20024af8
   30600:	20024af0 	.word	0x20024af0
   30604:	20024af4 	.word	0x20024af4
   30608:	20024afc 	.word	0x20024afc

0003060c <ip_interface_freeaddrinfo>:
   3060c:	4c0bb538 	.word	0x4c0bb538
   30610:	2b026823 	.word	0x2b026823
   30614:	bd38d000 	.word	0xbd38d000
   30618:	4605b130 	.word	0x4605b130
   3061c:	f0066940 	.word	0xf0066940
   30620:	4628f8af 	.word	0x4628f8af
   30624:	f8acf006 	.word	0xf8acf006
   30628:	4a052300 	.word	0x4a052300
   3062c:	60234905 	.word	0x60234905
   30630:	68086013 	.word	0x68086013
   30634:	4038e8bd 	.word	0x4038e8bd
   30638:	bbf2f7f9 	.word	0xbbf2f7f9
   3063c:	20024afc 	.word	0x20024afc
   30640:	20024af8 	.word	0x20024af8
   30644:	20024b04 	.word	0x20024b04

00030648 <rpc_ip_event_handler>:
   30648:	4ff0e92d 	.word	0x4ff0e92d
   3064c:	4310f401 	.word	0x4310f401
   30650:	4f10f5b3 	.word	0x4f10f5b3
   30654:	b0894605 	.word	0xb0894605
   30658:	68c0460e 	.word	0x68c0460e
   3065c:	0c04d05e 	.word	0x0c04d05e
   30660:	f7fe4620 	.word	0xf7fe4620
   30664:	f248fdd7 	.word	0xf248fdd7
   30668:	429e030d 	.word	0x429e030d
   3066c:	46a04607 	.word	0x46a04607
   30670:	2f00d041 	.word	0x2f00d041
   30674:	4640d04e 	.word	0x4640d04e
   30678:	462a4633 	.word	0x462a4633
   3067c:	f7fc4639 	.word	0xf7fc4639
   30680:	2800fbd1 	.word	0x2800fbd1
   30684:	f248d042 	.word	0xf248d042
   30688:	429e0307 	.word	0x429e0307
   3068c:	f248d961 	.word	0xf248d961
   30690:	429e030c 	.word	0x429e030c
   30694:	816bf000 	.word	0x816bf000
   30698:	8106f240 	.word	0x8106f240
   3069c:	0302f249 	.word	0x0302f249
   306a0:	f000429e 	.word	0xf000429e
   306a4:	f249808c 	.word	0xf249808c
   306a8:	429e0303 	.word	0x429e0303
   306ac:	8180f000 	.word	0x8180f000
   306b0:	0301f249 	.word	0x0301f249
   306b4:	d12d429e 	.word	0xd12d429e
   306b8:	f414683c 	.word	0xf414683c
   306bc:	f0001480 	.word	0xf0001480
   306c0:	68ab81c3 	.word	0x68ab81c3
   306c4:	f2002b04 	.word	0xf2002b04
   306c8:	240081eb 	.word	0x240081eb
   306cc:	68294626 	.word	0x68294626
   306d0:	e9cd686a 	.word	0xe9cd686a
   306d4:	e9cd6406 	.word	0xe9cd6406
   306d8:	69f81204 	.word	0x69f81204
   306dc:	6803a904 	.word	0x6803a904
   306e0:	4798685b 	.word	0x4798685b
   306e4:	f0003001 	.word	0xf0003001
   306e8:	683b81cc 	.word	0x683b81cc
   306ec:	f4432000 	.word	0xf4432000
   306f0:	603b3380 	.word	0x603b3380
   306f4:	f8dfe00b 	.word	0xf8dfe00b
   306f8:	682f9344 	.word	0x682f9344
   306fc:	3000f8d9 	.word	0x3000f8d9
   30700:	d0152b01 	.word	0xd0152b01
   30704:	4638b117 	.word	0x4638b117
   30708:	fb8af7f9 	.word	0xfb8af7f9
   3070c:	b0092000 	.word	0xb0092000
   30710:	8ff0e8bd 	.word	0x8ff0e8bd
   30714:	28006828 	.word	0x28006828
   30718:	e7f7d1f6 	.word	0xe7f7d1f6
   3071c:	fd30f7fe 	.word	0xfd30f7fe
   30720:	f7fe4680 	.word	0xf7fe4680
   30724:	4607fd77 	.word	0x4607fd77
   30728:	2f004644 	.word	0x2f004644
   3072c:	e7f1d1a3 	.word	0xe7f1d1a3
   30730:	2b00696b 	.word	0x2b00696b
   30734:	2b10d048 	.word	0x2b10d048
   30738:	4ababf96 	.word	0x4ababf96
   3073c:	f852212d 	.word	0xf852212d
   30740:	23021023 	.word	0x23021023
   30744:	60114ab8 	.word	0x60114ab8
   30748:	3000f8c9 	.word	0x3000f8c9
   3074c:	d1da2f00 	.word	0xd1da2f00
   30750:	f248e7dc 	.word	0xf248e7dc
   30754:	429e0306 	.word	0x429e0306
   30758:	80e6f080 	.word	0x80e6f080
   3075c:	0302f248 	.word	0x0302f248
   30760:	f000429e 	.word	0xf000429e
   30764:	d91880c8 	.word	0xd91880c8
   30768:	0303f248 	.word	0x0303f248
   3076c:	f000429e 	.word	0xf000429e
   30770:	f2488112 	.word	0xf2488112
   30774:	429e0305 	.word	0x429e0305
   30778:	683bd1cc 	.word	0x683bd1cc
   3077c:	2b03b29b 	.word	0x2b03b29b
   30780:	696bd1c4 	.word	0x696bd1c4
   30784:	f0002b00 	.word	0xf0002b00
   30788:	2b10817e 	.word	0x2b10817e
   3078c:	813bf200 	.word	0x813bf200
   30790:	f8524aa4 	.word	0xf8524aa4
   30794:	607b3023 	.word	0x607b3023
   30798:	f248e7b8 	.word	0xf248e7b8
   3079c:	429e0301 	.word	0x429e0301
   307a0:	683bd1b8 	.word	0x683bd1b8
   307a4:	d1b12b01 	.word	0xd1b12b01
   307a8:	28006968 	.word	0x28006968
   307ac:	8173f000 	.word	0x8173f000
   307b0:	f2002810 	.word	0xf2002810
   307b4:	4b9b8128 	.word	0x4b9b8128
   307b8:	3020f853 	.word	0x3020f853
   307bc:	683be7eb 	.word	0x683be7eb
   307c0:	2b07b29b 	.word	0x2b07b29b
   307c4:	e790d1a2 	.word	0xe790d1a2
   307c8:	601f4b98 	.word	0x601f4b98
   307cc:	016369ac 	.word	0x016369ac
   307d0:	93034618 	.word	0x93034618
   307d4:	ffb6f005 	.word	0xffb6f005
   307d8:	28009002 	.word	0x28009002
   307dc:	8103f000 	.word	0x8103f000
   307e0:	192800e5 	.word	0x192800e5
   307e4:	f0050080 	.word	0xf0050080
   307e8:	2800ffad 	.word	0x2800ffad
   307ec:	810df000 	.word	0x810df000
   307f0:	d0782c00 	.word	0xd0782c00
   307f4:	0210f105 	.word	0x0210f105
   307f8:	93011883 	.word	0x93011883
   307fc:	24049b02 	.word	0x24049b02
   30800:	a23cf8df 	.word	0xa23cf8df
   30804:	b23cf8df 	.word	0xb23cf8df
   30808:	0810f100 	.word	0x0810f100
   3080c:	0620f103 	.word	0x0620f103
   30810:	220ae01d 	.word	0x220ae01d
   30814:	2c0cf848 	.word	0x2c0cf848
   30818:	0224f04f 	.word	0x0224f04f
   3081c:	f8084640 	.word	0xf8084640
   30820:	f8282c10 	.word	0xf8282c10
   30824:	f8563c08 	.word	0xf8563c08
   30828:	f0112c10 	.word	0xf0112c10
   3082c:	f856f8c2 	.word	0xf856f8c2
   30830:	f1083c10 	.word	0xf1083c10
   30834:	441c0808 	.word	0x441c0808
   30838:	f846193b 	.word	0xf846193b
   3083c:	9b013c08 	.word	0x9b013c08
   30840:	6c04f846 	.word	0x6c04f846
   30844:	442c4598 	.word	0x442c4598
   30848:	0620f106 	.word	0x0620f106
   3084c:	593bd045 	.word	0x593bd045
   30850:	f846193a 	.word	0xf846193a
   30854:	68533c20 	.word	0x68533c20
   30858:	1000f8da 	.word	0x1000f8da
   3085c:	bf142b02 	.word	0xbf142b02
   30860:	200a2002 	.word	0x200a2002
   30864:	3000f8db 	.word	0x3000f8db
   30868:	0107e946 	.word	0x0107e946
   3086c:	3c14f846 	.word	0x3c14f846
   30870:	f1a88a10 	.word	0xf1a88a10
   30874:	f8460310 	.word	0xf8460310
   30878:	8a550c10 	.word	0x8a550c10
   3087c:	3c0cf846 	.word	0x3c0cf846
   30880:	34144b6b 	.word	0x34144b6b
   30884:	eb072804 	.word	0xeb072804
   30888:	881b0104 	.word	0x881b0104
   3088c:	2210d1c1 	.word	0x2210d1c1
   30890:	f8282002 	.word	0xf8282002
   30894:	f8483c08 	.word	0xf8483c08
   30898:	f8080c0c 	.word	0xf8080c0c
   3089c:	f8562c10 	.word	0xf8562c10
   308a0:	f1a82c10 	.word	0xf1a82c10
   308a4:	e7c00004 	.word	0xe7c00004
   308a8:	0308f248 	.word	0x0308f248
   308ac:	d04e429e 	.word	0xd04e429e
   308b0:	0309f248 	.word	0x0309f248
   308b4:	f47f429e 	.word	0xf47f429e
   308b8:	683baf2d 	.word	0x683baf2d
   308bc:	2b0db29b 	.word	0x2b0db29b
   308c0:	af24f47f 	.word	0xaf24f47f
   308c4:	28006968 	.word	0x28006968
   308c8:	af72f47f 	.word	0xaf72f47f
   308cc:	0c1b683b 	.word	0x0c1b683b
   308d0:	f043041b 	.word	0xf043041b
   308d4:	603b030e 	.word	0x603b030e
   308d8:	2200e719 	.word	0x2200e719
   308dc:	1302e9dd 	.word	0x1302e9dd
   308e0:	f843440b 	.word	0xf843440b
   308e4:	22022c04 	.word	0x22022c04
   308e8:	f8c94b52 	.word	0xf8c94b52
   308ec:	9a022000 	.word	0x9a022000
   308f0:	601a2000 	.word	0x601a2000
   308f4:	683be70b 	.word	0x683be70b
   308f8:	f57f0099 	.word	0xf57f0099
   308fc:	683baf07 	.word	0x683baf07
   30900:	5300f023 	.word	0x5300f023
   30904:	6968603b 	.word	0x6968603b
   30908:	f0002800 	.word	0xf0002800
   3090c:	281080a2 	.word	0x281080a2
   30910:	232dbf8e 	.word	0x232dbf8e
   30914:	f8534b43 	.word	0xf8534b43
   30918:	20003020 	.word	0x20003020
   3091c:	683b607b 	.word	0x683b607b
   30920:	2380f443 	.word	0x2380f443
   30924:	e6f2603b 	.word	0xe6f2603b
   30928:	029a683b 	.word	0x029a683b
   3092c:	aeeef57f 	.word	0xaeeef57f
   30930:	2b00696b 	.word	0x2b00696b
   30934:	809cf000 	.word	0x809cf000
   30938:	f47f2b6b 	.word	0xf47f2b6b
   3093c:	693baf26 	.word	0x693baf26
   30940:	f0002b01 	.word	0xf0002b01
   30944:	230c80b1 	.word	0x230c80b1
   30948:	607b2000 	.word	0x607b2000
   3094c:	683be6df 	.word	0x683be6df
   30950:	2b06b29b 	.word	0x2b06b29b
   30954:	aedaf47f 	.word	0xaedaf47f
   30958:	28006968 	.word	0x28006968
   3095c:	af28f47f 	.word	0xaf28f47f
   30960:	0c1b683b 	.word	0x0c1b683b
   30964:	f043041b 	.word	0xf043041b
   30968:	603b0307 	.word	0x603b0307
   3096c:	683be6cf 	.word	0x683be6cf
   30970:	2b08b29b 	.word	0x2b08b29b
   30974:	aecaf47f 	.word	0xaecaf47f
   30978:	2b00696b 	.word	0x2b00696b
   3097c:	af05f47f 	.word	0xaf05f47f
   30980:	20014b2d 	.word	0x20014b2d
   30984:	5024f843 	.word	0x5024f843
   30988:	0c1b683b 	.word	0x0c1b683b
   3098c:	f043041b 	.word	0xf043041b
   30990:	603b0309 	.word	0x603b0309
   30994:	683be6bb 	.word	0x683be6bb
   30998:	f57f025b 	.word	0xf57f025b
   3099c:	6968aeb7 	.word	0x6968aeb7
   309a0:	f47f2800 	.word	0xf47f2800
   309a4:	683baf05 	.word	0x683baf05
   309a8:	0300f443 	.word	0x0300f443
   309ac:	e6ae603b 	.word	0xe6ae603b
   309b0:	f443683b 	.word	0xf443683b
   309b4:	603b2300 	.word	0x603b2300
   309b8:	f423683b 	.word	0xf423683b
   309bc:	603b1300 	.word	0x603b1300
   309c0:	f423683b 	.word	0xf423683b
   309c4:	603b3300 	.word	0x603b3300
   309c8:	2b6c692b 	.word	0x2b6c692b
   309cc:	2b10d021 	.word	0x2b10d021
   309d0:	232dbf8c 	.word	0x232dbf8c
   309d4:	f04f4a13 	.word	0xf04f4a13
   309d8:	bf980000 	.word	0xbf980000
   309dc:	3023f852 	.word	0x3023f852
   309e0:	60bb607b 	.word	0x60bb607b
   309e4:	f005e693 	.word	0xf005e693
   309e8:	200cfecb 	.word	0x200cfecb
   309ec:	490e2302 	.word	0x490e2302
   309f0:	60084a10 	.word	0x60084a10
   309f4:	9902682f 	.word	0x9902682f
   309f8:	f8c96011 	.word	0xf8c96011
   309fc:	2f003000 	.word	0x2f003000
   30a00:	ae81f47f 	.word	0xae81f47f
   30a04:	232de682 	.word	0x232de682
   30a08:	220ce6c5 	.word	0x220ce6c5
   30a0c:	601a4b06 	.word	0x601a4b06
   30a10:	2239e769 	.word	0x2239e769
   30a14:	2000683b 	.word	0x2000683b
   30a18:	4380f043 	.word	0x4380f043
   30a1c:	607a603b 	.word	0x607a603b
   30a20:	e67460ba 	.word	0xe67460ba
   30a24:	00043d60 	.word	0x00043d60
   30a28:	20024af8 	.word	0x20024af8
   30a2c:	20024b04 	.word	0x20024b04
   30a30:	2002a304 	.word	0x2002a304
   30a34:	20024b00 	.word	0x20024b00
   30a38:	20024b08 	.word	0x20024b08
   30a3c:	20024afc 	.word	0x20024afc
   30a40:	20024af4 	.word	0x20024af4
   30a44:	20024af0 	.word	0x20024af0
   30a48:	f7f96828 	.word	0xf7f96828
   30a4c:	4620f9e9 	.word	0x4620f9e9
   30a50:	683be65d 	.word	0x683be65d
   30a54:	3300f443 	.word	0x3300f443
   30a58:	683b603b 	.word	0x683b603b
   30a5c:	1380f443 	.word	0x1380f443
   30a60:	683b603b 	.word	0x683b603b
   30a64:	041b0c1b 	.word	0x041b0c1b
   30a68:	0305f043 	.word	0x0305f043
   30a6c:	e64e603b 	.word	0xe64e603b
   30a70:	4a28683b 	.word	0x4a28683b
   30a74:	3300f443 	.word	0x3300f443
   30a78:	2001603b 	.word	0x2001603b
   30a7c:	5024f842 	.word	0x5024f842
   30a80:	2002e645 	.word	0x2002e645
   30a84:	683be643 	.word	0x683be643
   30a88:	0c1b2000 	.word	0x0c1b2000
   30a8c:	f043041b 	.word	0xf043041b
   30a90:	603b0304 	.word	0x603b0304
   30a94:	2302e63b 	.word	0x2302e63b
   30a98:	69ab603b 	.word	0x69ab603b
   30a9c:	e63661bb 	.word	0xe63661bb
   30aa0:	b94c8a6c 	.word	0xb94c8a6c
   30aa4:	e6124626 	.word	0xe6124626
   30aa8:	683b220c 	.word	0x683b220c
   30aac:	f0432000 	.word	0xf0432000
   30ab0:	603b6300 	.word	0x603b6300
   30ab4:	e62a607a 	.word	0xe62a607a
   30ab8:	f0052024 	.word	0xf0052024
   30abc:	4606fe43 	.word	0x4606fe43
   30ac0:	8a6ab158 	.word	0x8a6ab158
   30ac4:	d0182a10 	.word	0xd0182a10
   30ac8:	d00a2a04 	.word	0xd00a2a04
   30acc:	f7f96828 	.word	0xf7f96828
   30ad0:	4630f9a7 	.word	0x4630f9a7
   30ad4:	fe54f005 	.word	0xfe54f005
   30ad8:	6828e618 	.word	0x6828e618
   30adc:	f9a0f7f9 	.word	0xf9a0f7f9
   30ae0:	2302e614 	.word	0x2302e614
   30ae4:	60432410 	.word	0x60432410
   30ae8:	8a2b7004 	.word	0x8a2b7004
   30aec:	0114f105 	.word	0x0114f105
   30af0:	300c8103 	.word	0x300c8103
   30af4:	ff5df010 	.word	0xff5df010
   30af8:	230ae5e9 	.word	0x230ae5e9
   30afc:	60432424 	.word	0x60432424
   30b00:	8a2b7004 	.word	0x8a2b7004
   30b04:	0114f105 	.word	0x0114f105
   30b08:	30108103 	.word	0x30108103
   30b0c:	ff51f010 	.word	0xff51f010
   30b10:	bf00e5dd 	.word	0xbf00e5dd
   30b14:	20024b08 	.word	0x20024b08

00030b18 <rpc_logobj_client_evt_handler>:
   30b18:	f850b120 	.word	0xf850b120
   30b1c:	0c091b08 	.word	0x0c091b08
   30b20:	bf7cf7f9 	.word	0xbf7cf7f9
   30b24:	bf004770 	.word	0xbf004770

00030b28 <rpc_logobj_client_init>:
   30b28:	f0044801 	.word	0xf0044801
   30b2c:	bf00bd45 	.word	0xbf00bd45
   30b30:	00043da4 	.word	0x00043da4

00030b34 <rpc_logobj_client_request_alloc>:
   30b34:	b5102300 	.word	0xb5102300
   30b38:	9301b082 	.word	0x9301b082
   30b3c:	b170b961 	.word	0xb170b961
   30b40:	aa014604 	.word	0xaa014604
   30b44:	f0042009 	.word	0xf0042009
   30b48:	b918ff6f 	.word	0xb918ff6f
   30b4c:	b10b9b01 	.word	0xb10b9b01
   30b50:	60233308 	.word	0x60233308
   30b54:	bd10b002 	.word	0xbd10b002
   30b58:	b002200f 	.word	0xb002200f
   30b5c:	200ebd10 	.word	0x200ebd10
   30b60:	bd10b002 	.word	0xbd10b002

00030b64 <rpc_logobj_client_request_send>:
   30b64:	4370f401 	.word	0x4370f401
   30b68:	4fe0f5b3 	.word	0x4fe0f5b3
   30b6c:	b160d10b 	.word	0xb160d10b
   30b70:	f8304603 	.word	0xf8304603
   30b74:	20092c08 	.word	0x20092c08
   30b78:	4101ea42 	.word	0x4101ea42
   30b7c:	1d08f843 	.word	0x1d08f843
   30b80:	f0044619 	.word	0xf0044619
   30b84:	200fbf39 	.word	0x200fbf39
   30b88:	200e4770 	.word	0x200e4770
   30b8c:	bf004770 	.word	0xbf004770

00030b90 <rpc_logobj_client_message_free>:
   30b90:	f1a0b120 	.word	0xf1a0b120
   30b94:	20090108 	.word	0x20090108
   30b98:	bf78f004 	.word	0xbf78f004
   30b9c:	4770200e 	.word	0x4770200e

00030ba0 <rpc_logobj_client_data_free>:
   30ba0:	4601b118 	.word	0x4601b118
   30ba4:	f0052009 	.word	0xf0052009
   30ba8:	200eb883 	.word	0x200eb883
   30bac:	bf004770 	.word	0xbf004770

00030bb0 <datagram_handler_init>:
   30bb0:	4604b510 	.word	0x4604b510
   30bb4:	f005200c 	.word	0xf005200c
   30bb8:	60e0fdc5 	.word	0x60e0fdc5
   30bbc:	e8bdb118 	.word	0xe8bdb118
   30bc0:	f0004010 	.word	0xf0004010
   30bc4:	2004b8bd 	.word	0x2004b8bd
   30bc8:	bf00bd10 	.word	0xbf00bd10

00030bcc <datagram_handler_put>:
   30bcc:	4606b570 	.word	0x4606b570
   30bd0:	460d2014 	.word	0x460d2014
   30bd4:	fdb6f005 	.word	0xfdb6f005
   30bd8:	682bb178 	.word	0x682bb178
   30bdc:	60434604 	.word	0x60434604
   30be0:	4601686b 	.word	0x4601686b
   30be4:	68eb6083 	.word	0x68eb6083
   30be8:	68ab60c3 	.word	0x68ab60c3
   30bec:	68f06103 	.word	0x68f06103
   30bf0:	f8b0f000 	.word	0xf8b0f000
   30bf4:	6868b920 	.word	0x6868b920
   30bf8:	f04fbd70 	.word	0xf04fbd70
   30bfc:	bd7030ff 	.word	0xbd7030ff
   30c00:	f0054620 	.word	0xf0054620
   30c04:	f04ffdbd 	.word	0xf04ffdbd
   30c08:	bd7030ff 	.word	0xbd7030ff

00030c0c <datagram_handler_get>:
   30c0c:	4606b5f0 	.word	0x4606b5f0
   30c10:	68c0b085 	.word	0x68c0b085
   30c14:	4617460c 	.word	0x4617460c
   30c18:	f8bcf000 	.word	0xf8bcf000
   30c1c:	d0372800 	.word	0xd0372800
   30c20:	46056882 	.word	0x46056882
   30c24:	0300e9d4 	.word	0x0300e9d4
   30c28:	bf28429a 	.word	0xbf28429a
   30c2c:	6062461a 	.word	0x6062461a
   30c30:	6869b110 	.word	0x6869b110
   30c34:	febdf010 	.word	0xfebdf010
   30c38:	b11868a0 	.word	0xb11868a0
   30c3c:	b10b692b 	.word	0xb10b692b
   30c40:	b9e268ea 	.word	0xb9e268ea
   30c44:	60e32300 	.word	0x60e32300
   30c48:	d502073b 	.word	0xd502073b
   30c4c:	b0056860 	.word	0xb0056860
   30c50:	68f0bdf0 	.word	0x68f0bdf0
   30c54:	f894f000 	.word	0xf894f000
   30c58:	28004605 	.word	0x28004605
   30c5c:	e9d0d0f6 	.word	0xe9d0d0f6
   30c60:	69023101 	.word	0x69023101
   30c64:	68c39300 	.word	0x68c39300
   30c68:	1201e9cd 	.word	0x1201e9cd
   30c6c:	46689303 	.word	0x46689303
   30c70:	3101e9d6 	.word	0x3101e9d6
   30c74:	46284798 	.word	0x46284798
   30c78:	fd82f005 	.word	0xfd82f005
   30c7c:	68e3e7e6 	.word	0x68e3e7e6
   30c80:	bf28429a 	.word	0xbf28429a
   30c84:	60e2461a 	.word	0x60e2461a
   30c88:	f0106929 	.word	0xf0106929
   30c8c:	e7dbfe92 	.word	0xe7dbfe92
   30c90:	30fff04f 	.word	0x30fff04f
   30c94:	bf00e7db 	.word	0xbf00e7db

00030c98 <datagram_handler_available>:
   30c98:	68c0b508 	.word	0x68c0b508
   30c9c:	f87af000 	.word	0xf87af000
   30ca0:	6880b108 	.word	0x6880b108
   30ca4:	f04fbd08 	.word	0xf04fbd08
   30ca8:	bd0830ff 	.word	0xbd0830ff

00030cac <datagram_handler_flush>:
   30cac:	4605b530 	.word	0x4605b530
   30cb0:	b08568c0 	.word	0xb08568c0
   30cb4:	e01ab9a8 	.word	0xe01ab9a8
   30cb8:	f00068e8 	.word	0xf00068e8
   30cbc:	4604f861 	.word	0x4604f861
   30cc0:	e9d0b170 	.word	0xe9d0b170
   30cc4:	e9d40101 	.word	0xe9d40101
   30cc8:	e9cd3203 	.word	0xe9cd3203
   30ccc:	e9cd0100 	.word	0xe9cd0100
   30cd0:	e9d52302 	.word	0xe9d52302
   30cd4:	46683101 	.word	0x46683101
   30cd8:	46204798 	.word	0x46204798
   30cdc:	fd50f005 	.word	0xfd50f005
   30ce0:	f00068e8 	.word	0xf00068e8
   30ce4:	2800f85d 	.word	0x2800f85d
   30ce8:	b005d1e6 	.word	0xb005d1e6
   30cec:	2008bd30 	.word	0x2008bd30
   30cf0:	bd30b005 	.word	0xbd30b005

00030cf4 <datagram_handler_free>:
   30cf4:	4605b530 	.word	0x4605b530
   30cf8:	b08568c0 	.word	0xb08568c0
   30cfc:	e01cb9a0 	.word	0xe01cb9a0
   30d00:	f83ef000 	.word	0xf83ef000
   30d04:	b1704604 	.word	0xb1704604
   30d08:	0101e9d0 	.word	0x0101e9d0
   30d0c:	3203e9d4 	.word	0x3203e9d4
   30d10:	0100e9cd 	.word	0x0100e9cd
   30d14:	2302e9cd 	.word	0x2302e9cd
   30d18:	3101e9d5 	.word	0x3101e9d5
   30d1c:	47984668 	.word	0x47984668
   30d20:	f0054620 	.word	0xf0054620
   30d24:	68e8fd2d 	.word	0x68e8fd2d
   30d28:	f83af000 	.word	0xf83af000
   30d2c:	68e84604 	.word	0x68e84604
   30d30:	d1e52c00 	.word	0xd1e52c00
   30d34:	fd24f005 	.word	0xfd24f005
   30d38:	b00560ec 	.word	0xb00560ec
   30d3c:	bf00bd30 	.word	0xbf00bd30

00030d40 <linked_list_init>:
   30d40:	2300b128 	.word	0x2300b128
   30d44:	e9c06003 	.word	0xe9c06003
   30d48:	46183301 	.word	0x46183301
   30d4c:	20074770 	.word	0x20074770
   30d50:	bf004770 	.word	0xbf004770

00030d54 <linked_list_push>:
   30d54:	46036802 	.word	0x46036802
   30d58:	d00e3201 	.word	0xd00e3201
   30d5c:	600a2200 	.word	0x600a2200
   30d60:	b13a6802 	.word	0xb13a6802
   30d64:	60116882 	.word	0x60116882
   30d68:	681a6081 	.word	0x681a6081
   30d6c:	32012000 	.word	0x32012000
   30d70:	4770601a 	.word	0x4770601a
   30d74:	1101e9c0 	.word	0x1101e9c0
   30d78:	2004e7f7 	.word	0x2004e7f7
   30d7c:	bf004770 	.word	0xbf004770

00030d80 <linked_list_pop>:
   30d80:	68004603 	.word	0x68004603
   30d84:	6858b128 	.word	0x6858b128
   30d88:	6801681a 	.word	0x6801681a
   30d8c:	60593a01 	.word	0x60593a01
   30d90:	4770601a 	.word	0x4770601a

00030d94 <linked_list_peek>:
   30d94:	b10b6803 	.word	0xb10b6803
   30d98:	47706840 	.word	0x47706840
   30d9c:	47704618 	.word	0x47704618

00030da0 <linked_list_size_get>:
   30da0:	47706800 	.word	0x47706800

00030da4 <linked_list_get_next>:
   30da4:	47706800 	.word	0x47706800

00030da8 <rpc_transport_ipc_tx_init>:
   30da8:	f0002800 	.word	0xf0002800
   30dac:	290080b8 	.word	0x290080b8
   30db0:	80b5f000 	.word	0x80b5f000
   30db4:	f0002a00 	.word	0xf0002a00
   30db8:	e92d80b2 	.word	0xe92d80b2
   30dbc:	6a044ff0 	.word	0x6a044ff0
   30dc0:	2c00b085 	.word	0x2c00b085
   30dc4:	80a6f000 	.word	0x80a6f000
   30dc8:	28006a40 	.word	0x28006a40
   30dcc:	80a2f000 	.word	0x80a2f000
   30dd0:	4587f642 	.word	0x4587f642
   30dd4:	0a00f04f 	.word	0x0a00f04f
   30dd8:	42a84e55 	.word	0x42a84e55
   30ddc:	a000f886 	.word	0xa000f886
   30de0:	80a0f240 	.word	0x80a0f240
   30de4:	f8df2708 	.word	0xf8df2708
   30de8:	46209180 	.word	0x46209180
   30dec:	460d4616 	.word	0x460d4616
   30df0:	46512244 	.word	0x46512244
   30df4:	4000f8c9 	.word	0x4000f8c9
   30df8:	fdfbf010 	.word	0xfdfbf010
   30dfc:	2000f8d9 	.word	0x2000f8d9
   30e00:	0344f104 	.word	0x0344f104
   30e04:	8164f8df 	.word	0x8164f8df
   30e08:	a001f882 	.word	0xa001f882
   30e0c:	a002f882 	.word	0xa002f882
   30e10:	a003f882 	.word	0xa003f882
   30e14:	46187017 	.word	0x46187017
   30e18:	46512244 	.word	0x46512244
   30e1c:	3000f8c8 	.word	0x3000f8c8
   30e20:	fde7f010 	.word	0xfde7f010
   30e24:	2000f8d8 	.word	0x2000f8d8
   30e28:	0388f104 	.word	0x0388f104
   30e2c:	b140f8df 	.word	0xb140f8df
   30e30:	f8827017 	.word	0xf8827017
   30e34:	f882a001 	.word	0xf882a001
   30e38:	f882a002 	.word	0xf882a002
   30e3c:	4618a003 	.word	0x4618a003
   30e40:	7200f44f 	.word	0x7200f44f
   30e44:	f8cb4651 	.word	0xf8cb4651
   30e48:	f0103000 	.word	0xf0103000
   30e4c:	4b39fdd2 	.word	0x4b39fdd2
   30e50:	7c22f504 	.word	0x7c22f504
   30e54:	c000f8c3 	.word	0xc000f8c3
   30e58:	46604651 	.word	0x46604651
   30e5c:	7200f44f 	.word	0x7200f44f
   30e60:	fdc7f010 	.word	0xfdc7f010
   30e64:	5c20f44f 	.word	0x5c20f44f
   30e68:	f04f2106 	.word	0xf04f2106
   30e6c:	f44f0e01 	.word	0xf44f0e01
   30e70:	f44f3001 	.word	0xf44f3001
   30e74:	4b303288 	.word	0x4b303288
   30e78:	6491f504 	.word	0x6491f504
   30e7c:	4c2f605c 	.word	0x4c2f605c
   30e80:	c008f8c3 	.word	0xc008f8c3
   30e84:	f8a38199 	.word	0xf8a38199
   30e88:	4619e000 	.word	0x4619e000
   30e8c:	4b2c611c 	.word	0x4b2c611c
   30e90:	c0e0f8df 	.word	0xc0e0f8df
   30e94:	482b6120 	.word	0x482b6120
   30e98:	f5036063 	.word	0xf5036063
   30e9c:	60a073c0 	.word	0x60a073c0
   30ea0:	c000f8c4 	.word	0xc000f8c4
   30ea4:	60e34828 	.word	0x60e34828
   30ea8:	f0056162 	.word	0xf0056162
   30eac:	2800fb31 	.word	0x2800fb31
   30eb0:	f04fd132 	.word	0xf04fd132
   30eb4:	24200c02 	.word	0x24200c02
   30eb8:	1000f8d9 	.word	0x1000f8d9
   30ebc:	2000f8db 	.word	0x2000f8db
   30ec0:	4b1c6029 	.word	0x4b1c6029
   30ec4:	1000f8d8 	.word	0x1000f8d8
   30ec8:	e0acf8df 	.word	0xe0acf8df
   30ecc:	60314d1f 	.word	0x60314d1f
   30ed0:	2000f8ce 	.word	0x2000f8ce
   30ed4:	491e681b 	.word	0x491e681b
   30ed8:	7200f502 	.word	0x7200f502
   30edc:	4e1d602a 	.word	0x4e1d602a
   30ee0:	4d1e4a1d 	.word	0x4d1e4a1d
   30ee4:	f503600b 	.word	0xf503600b
   30ee8:	491d7300 	.word	0x491d7300
   30eec:	80286033 	.word	0x80286033
   30ef0:	c514f8c2 	.word	0xc514f8c2
   30ef4:	4b1b6809 	.word	0x4b1b6809
   30ef8:	99039103 	.word	0x99039103
   30efc:	751cf8c2 	.word	0x751cf8c2
   30f00:	443b6819 	.word	0x443b6819
   30f04:	99029102 	.word	0x99029102
   30f08:	4524f8c2 	.word	0x4524f8c2
   30f0c:	9301681b 	.word	0x9301681b
   30f10:	e0019b01 	.word	0xe0019b01
   30f14:	0007f24c 	.word	0x0007f24c
   30f18:	e8bdb005 	.word	0xe8bdb005
   30f1c:	f24c8ff0 	.word	0xf24c8ff0
   30f20:	4770000e 	.word	0x4770000e
   30f24:	0004f24c 	.word	0x0004f24c
   30f28:	e8bdb005 	.word	0xe8bdb005
   30f2c:	bf008ff0 	.word	0xbf008ff0
   30f30:	2002c8b8 	.word	0x2002c8b8
   30f34:	20024b58 	.word	0x20024b58
   30f38:	20024b44 	.word	0x20024b44
   30f3c:	20024b68 	.word	0x20024b68
   30f40:	00040080 	.word	0x00040080
   30f44:	00040100 	.word	0x00040100
   30f48:	20024b30 	.word	0x20024b30
   30f4c:	20024b3c 	.word	0x20024b3c
   30f50:	20024b38 	.word	0x20024b38
   30f54:	20024b34 	.word	0x20024b34
   30f58:	4002a000 	.word	0x4002a000
   30f5c:	2002a306 	.word	0x2002a306
   30f60:	4002a514 	.word	0x4002a514
   30f64:	4002a51c 	.word	0x4002a51c
   30f68:	20024b64 	.word	0x20024b64
   30f6c:	20024b5c 	.word	0x20024b5c
   30f70:	20024b60 	.word	0x20024b60
   30f74:	00080040 	.word	0x00080040
   30f78:	20024b40 	.word	0x20024b40

00030f7c <rpc_transport_ipc_tx_send>:
   30f7c:	d05f2800 	.word	0xd05f2800
   30f80:	4b33b470 	.word	0x4b33b470
   30f84:	681ab083 	.word	0x681ab083
   30f88:	42824b32 	.word	0x42824b32
   30f8c:	681bd81e 	.word	0x681bd81e
   30f90:	42834931 	.word	0x42834931
   30f94:	d8036809 	.word	0xd8036809
   30f98:	68244c30 	.word	0x68244c30
   30f9c:	d8474284 	.word	0xd8474284
   30fa0:	d90e4281 	.word	0xd90e4281
   30fa4:	781b4b2e 	.word	0x781b4b2e
   30fa8:	d14c2b00 	.word	0xd14c2b00
   30fac:	492d1a83 	.word	0x492d1a83
   30fb0:	069b099e 	.word	0x069b099e
   30fb4:	4c2c680a 	.word	0x4c2c680a
   30fb8:	0103f04f 	.word	0x0103f04f
   30fbc:	0502f04f 	.word	0x0502f04f
   30fc0:	f24cd014 	.word	0xf24cd014
   30fc4:	b0030010 	.word	0xb0030010
   30fc8:	4770bc70 	.word	0x4770bc70
   30fcc:	4298681b 	.word	0x4298681b
   30fd0:	4a22d3f7 	.word	0x4a22d3f7
   30fd4:	42906812 	.word	0x42906812
   30fd8:	2101d2f3 	.word	0x2101d2f3
   30fdc:	4a231ac3 	.word	0x4a231ac3
   30fe0:	069b099e 	.word	0x069b099e
   30fe4:	6812460d 	.word	0x6812460d
   30fe8:	d1ea4c21 	.word	0xd1ea4c21
   30fec:	b2db6843 	.word	0xb2db6843
   30ff0:	d120429d 	.word	0xd120429d
   30ff4:	eb022020 	.word	0xeb022020
   30ff8:	4d1e02c6 	.word	0x4d1e02c6
   30ffc:	882e6853 	.word	0x882e6853
   31000:	ea43b29b 	.word	0xea43b29b
   31004:	f0234306 	.word	0xf0234306
   31008:	f04303ff 	.word	0xf04303ff
   3100c:	60530301 	.word	0x60530301
   31010:	3801bf00 	.word	0x3801bf00
   31014:	2201d1fc 	.word	0x2201d1fc
   31018:	f8434b17 	.word	0xf8434b17
   3101c:	68222021 	.word	0x68222021
   31020:	9201882b 	.word	0x9201882b
   31024:	33019a01 	.word	0x33019a01
   31028:	b003802b 	.word	0xb003802b
   3102c:	4770bc70 	.word	0x4770bc70
   31030:	d9d24281 	.word	0xd9d24281
   31034:	f24ce7b6 	.word	0xf24ce7b6
   31038:	b0030007 	.word	0xb0030007
   3103c:	4770bc70 	.word	0x4770bc70
   31040:	000ef24c 	.word	0x000ef24c
   31044:	f24c4770 	.word	0xf24c4770
   31048:	b003000f 	.word	0xb003000f
   3104c:	4770bc70 	.word	0x4770bc70
   31050:	20024b40 	.word	0x20024b40
   31054:	20024b38 	.word	0x20024b38
   31058:	20024b3c 	.word	0x20024b3c
   3105c:	20024b34 	.word	0x20024b34
   31060:	2002c8b8 	.word	0x2002c8b8
   31064:	20024b64 	.word	0x20024b64
   31068:	4002a00c 	.word	0x4002a00c
   3106c:	20024b5c 	.word	0x20024b5c
   31070:	4002a004 	.word	0x4002a004
   31074:	2002a306 	.word	0x2002a306
   31078:	4002a000 	.word	0x4002a000

0003107c <rpc_transport_ipc_tx_rpc_data_alloc>:
   3107c:	781b4b18 	.word	0x781b4b18
   31080:	b4f0bb63 	.word	0xb4f0bb63
   31084:	f0034a17 	.word	0xf0034a17
   31088:	681400ff 	.word	0x681400ff
   3108c:	68254b16 	.word	0x68254b16
   31090:	b1a5681e 	.word	0xb1a5681e
   31094:	00c14607 	.word	0x00c14607
   31098:	685a1863 	.word	0x685a1863
   3109c:	2a03b2d2 	.word	0x2a03b2d2
   310a0:	609fd104 	.word	0x609fd104
   310a4:	f022685a 	.word	0xf022685a
   310a8:	605a02ff 	.word	0x605a02ff
   310ac:	f012685a 	.word	0xf012685a
   310b0:	d1010fff 	.word	0xd1010fff
   310b4:	b12b689b 	.word	0xb12b689b
   310b8:	42a83001 	.word	0x42a83001
   310bc:	2000d1eb 	.word	0x2000d1eb
   310c0:	4770bcf0 	.word	0x4770bcf0
   310c4:	1080eb06 	.word	0x1080eb06
   310c8:	60884421 	.word	0x60884421
   310cc:	f0236843 	.word	0xf0236843
   310d0:	f04303ff 	.word	0xf04303ff
   310d4:	60430302 	.word	0x60430302
   310d8:	4770bcf0 	.word	0x4770bcf0
   310dc:	47702000 	.word	0x47702000
   310e0:	2002c8b8 	.word	0x2002c8b8
   310e4:	20024b64 	.word	0x20024b64
   310e8:	20024b60 	.word	0x20024b60

000310ec <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   310ec:	4a15b4f0 	.word	0x4a15b4f0
   310f0:	68144b15 	.word	0x68144b15
   310f4:	6825681e 	.word	0x6825681e
   310f8:	2000b1ad 	.word	0x2000b1ad
   310fc:	00c14607 	.word	0x00c14607
   31100:	685a1863 	.word	0x685a1863
   31104:	2a03b2d2 	.word	0x2a03b2d2
   31108:	609fd104 	.word	0x609fd104
   3110c:	f022685a 	.word	0xf022685a
   31110:	605a02ff 	.word	0x605a02ff
   31114:	f012685a 	.word	0xf012685a
   31118:	d1010fff 	.word	0xd1010fff
   3111c:	b12b689b 	.word	0xb12b689b
   31120:	42853001 	.word	0x42853001
   31124:	2000d1eb 	.word	0x2000d1eb
   31128:	4770bcf0 	.word	0x4770bcf0
   3112c:	1080eb06 	.word	0x1080eb06
   31130:	60884421 	.word	0x60884421
   31134:	f0236843 	.word	0xf0236843
   31138:	f04303ff 	.word	0xf04303ff
   3113c:	60430301 	.word	0x60430301
   31140:	4770bcf0 	.word	0x4770bcf0
   31144:	20024b5c 	.word	0x20024b5c
   31148:	20024b58 	.word	0x20024b58

0003114c <rpc_transport_ipc_tx_data_alloc>:
   3114c:	781b4b03 	.word	0x781b4b03
   31150:	f005b90b 	.word	0xf005b90b
   31154:	2000bb21 	.word	0x2000bb21
   31158:	bf004770 	.word	0xbf004770
   3115c:	2002c8b8 	.word	0x2002c8b8

00031160 <rpc_transport_ipc_tx_suspend>:
   31160:	4b012201 	.word	0x4b012201
   31164:	4770701a 	.word	0x4770701a
   31168:	2002c8b8 	.word	0x2002c8b8

0003116c <rpc_transport_ipc_tx_shutdown>:
   3116c:	4a16b4f0 	.word	0x4a16b4f0
   31170:	68144b16 	.word	0x68144b16
   31174:	6825681e 	.word	0x6825681e
   31178:	2200b1ad 	.word	0x2200b1ad
   3117c:	00d04617 	.word	0x00d04617
   31180:	68591823 	.word	0x68591823
   31184:	2903b2c9 	.word	0x2903b2c9
   31188:	609fd104 	.word	0x609fd104
   3118c:	f0216859 	.word	0xf0216859
   31190:	605901ff 	.word	0x605901ff
   31194:	f0116859 	.word	0xf0116859
   31198:	d1010fff 	.word	0xd1010fff
   3119c:	b123689b 	.word	0xb123689b
   311a0:	42aa3201 	.word	0x42aa3201
   311a4:	bcf0d1eb 	.word	0xbcf0d1eb
   311a8:	01924770 	.word	0x01924770
   311ac:	18b04404 	.word	0x18b04404
   311b0:	684360a0 	.word	0x684360a0
   311b4:	f0234906 	.word	0xf0234906
   311b8:	f04303ff 	.word	0xf04303ff
   311bc:	60430301 	.word	0x60430301
   311c0:	bcf050b1 	.word	0xbcf050b1
   311c4:	bedaf7ff 	.word	0xbedaf7ff
   311c8:	20024b5c 	.word	0x20024b5c
   311cc:	20024b58 	.word	0x20024b58
   311d0:	00030001 	.word	0x00030001

000311d4 <null_handler_init>:
   311d4:	47702000 	.word	0x47702000

000311d8 <null_handler_put>:
   311d8:	460cb510 	.word	0x460cb510
   311dc:	3101e9d0 	.word	0x3101e9d0
   311e0:	47984620 	.word	0x47984620
   311e4:	bd106860 	.word	0xbd106860

000311e8 <null_handler_get>:
   311e8:	30fff04f 	.word	0x30fff04f
   311ec:	bf004770 	.word	0xbf004770

000311f0 <null_handler_available>:
   311f0:	30fff04f 	.word	0x30fff04f
   311f4:	bf004770 	.word	0xbf004770

000311f8 <null_handler_flush>:
   311f8:	47702000 	.word	0x47702000

000311fc <null_handler_free>:
   311fc:	bf004770 	.word	0xbf004770

00031200 <rpc_gnss_event_handler>:
   31200:	4b5db5f0 	.word	0x4b5db5f0
   31204:	68004606 	.word	0x68004606
   31208:	6802881b 	.word	0x6802881b
   3120c:	ebb34c5b 	.word	0xebb34c5b
   31210:	b0854f12 	.word	0xb0854f12
   31214:	6020460d 	.word	0x6020460d
   31218:	f505d033 	.word	0xf505d033
   3121c:	33ff433f 	.word	0x33ff433f
   31220:	2b02b29b 	.word	0x2b02b29b
   31224:	4c56d80e 	.word	0x4c56d80e
   31228:	075a6823 	.word	0x075a6823
   3122c:	6823d40d 	.word	0x6823d40d
   31230:	d503079b 	.word	0xd503079b
   31234:	0303f244 	.word	0x0303f244
   31238:	d006429d 	.word	0xd006429d
   3123c:	b1086830 	.word	0xb1086830
   31240:	f92ef7f9 	.word	0xf92ef7f9
   31244:	b0052000 	.word	0xb0052000
   31248:	2002bdf0 	.word	0x2002bdf0
   3124c:	fa7af005 	.word	0xfa7af005
   31250:	28004607 	.word	0x28004607
   31254:	2302d0f2 	.word	0x2302d0f2
   31258:	68318005 	.word	0x68318005
   3125c:	48496872 	.word	0x48496872
   31260:	0086e88d 	.word	0x0086e88d
   31264:	93036800 	.word	0x93036800
   31268:	46696803 	.word	0x46696803
   3126c:	4798685b 	.word	0x4798685b
   31270:	d06d3001 	.word	0xd06d3001
   31274:	68232000 	.word	0x68232000
   31278:	3380f443 	.word	0x3380f443
   3127c:	b0056023 	.word	0xb0056023
   31280:	4c3fbdf0 	.word	0x4c3fbdf0
   31284:	01da6823 	.word	0x01da6823
   31288:	f242d523 	.word	0xf242d523
   3128c:	42991302 	.word	0x42991302
   31290:	6843d11f 	.word	0x6843d11f
   31294:	6823b91b 	.word	0x6823b91b
   31298:	7300f043 	.word	0x7300f043
   3129c:	68236023 	.word	0x68236023
   312a0:	7380f023 	.word	0x7380f023
   312a4:	68236023 	.word	0x68236023
   312a8:	d430025b 	.word	0xd430025b
   312ac:	0305f242 	.word	0x0305f242
   312b0:	d12c429d 	.word	0xd12c429d
   312b4:	02996823 	.word	0x02996823
   312b8:	6843d529 	.word	0x6843d529
   312bc:	d1552b00 	.word	0xd1552b00
   312c0:	f4236823 	.word	0xf4236823
   312c4:	60231300 	.word	0x60231300
   312c8:	f4436823 	.word	0xf4436823
   312cc:	60233300 	.word	0x60233300
   312d0:	6823e01d 	.word	0x6823e01d
   312d4:	d50e025f 	.word	0xd50e025f
   312d8:	1303f242 	.word	0x1303f242
   312dc:	d10a429d 	.word	0xd10a429d
   312e0:	b91b6843 	.word	0xb91b6843
   312e4:	f4436823 	.word	0xf4436823
   312e8:	60230300 	.word	0x60230300
   312ec:	f4236823 	.word	0xf4236823
   312f0:	60230380 	.word	0x60230380
   312f4:	f242e00b 	.word	0xf242e00b
   312f8:	429d0301 	.word	0x429d0301
   312fc:	6843d10a 	.word	0x6843d10a
   31300:	6823b92b 	.word	0x6823b92b
   31304:	041b0c1b 	.word	0x041b0c1b
   31308:	0302f043 	.word	0x0302f043
   3130c:	f7f96023 	.word	0xf7f96023
   31310:	e782f8c7 	.word	0xe782f8c7
   31314:	0304f242 	.word	0x0304f242
   31318:	d1c7429d 	.word	0xd1c7429d
   3131c:	b9936843 	.word	0xb9936843
   31320:	f4436823 	.word	0xf4436823
   31324:	60230300 	.word	0x60230300
   31328:	b29b6823 	.word	0xb29b6823
   3132c:	68232b03 	.word	0x68232b03
   31330:	b29bd016 	.word	0xb29bd016
   31334:	d1d92b04 	.word	0xd1d92b04
   31338:	0c1b6823 	.word	0x0c1b6823
   3133c:	f043041b 	.word	0xf043041b
   31340:	60230302 	.word	0x60230302
   31344:	6823e7d2 	.word	0x6823e7d2
   31348:	2b03b29b 	.word	0x2b03b29b
   3134c:	e7f3d1ce 	.word	0xe7f3d1ce
   31350:	f0054638 	.word	0xf0054638
   31354:	6830fa15 	.word	0x6830fa15
   31358:	f47f2800 	.word	0xf47f2800
   3135c:	e771af71 	.word	0xe771af71
   31360:	041b0c1b 	.word	0x041b0c1b
   31364:	0304f043 	.word	0x0304f043
   31368:	e7bf6023 	.word	0xe7bf6023
   3136c:	f4236823 	.word	0xf4236823
   31370:	60231300 	.word	0x60231300
   31374:	bf00e7cb 	.word	0xbf00e7cb
   31378:	2002a308 	.word	0x2002a308
   3137c:	20024b28 	.word	0x20024b28
   31380:	20024b80 	.word	0x20024b80
   31384:	20024b84 	.word	0x20024b84

00031388 <gnss_interface_write>:
   31388:	43f0e92d 	.word	0x43f0e92d
   3138c:	b09f4a75 	.word	0xb09f4a75
   31390:	9d264290 	.word	0x9d264290
   31394:	80d3f040 	.word	0x80d3f040
   31398:	f0002900 	.word	0xf0002900
   3139c:	2d0080c8 	.word	0x2d0080c8
   313a0:	80c5f000 	.word	0x80c5f000
   313a4:	2a029a27 	.word	0x2a029a27
   313a8:	80c1f040 	.word	0x80c1f040
   313ac:	68224c6e 	.word	0x68224c6e
   313b0:	2a02b292 	.word	0x2a02b292
   313b4:	6822d004 	.word	0x6822d004
   313b8:	2a04b292 	.word	0x2a04b292
   313bc:	80c5f040 	.word	0x80c5f040
   313c0:	f1000798 	.word	0xf1000798
   313c4:	682080c8 	.word	0x682080c8
   313c8:	3000f410 	.word	0x3000f410
   313cc:	6822d065 	.word	0x6822d065
   313d0:	f422882b 	.word	0xf422882b
   313d4:	60223200 	.word	0x60223200
   313d8:	3b016822 	.word	0x3b016822
   313dc:	1200f442 	.word	0x1200f442
   313e0:	2b076022 	.word	0x2b076022
   313e4:	80a3f200 	.word	0x80a3f200
   313e8:	f003e8df 	.word	0xf003e8df
   313ec:	696e7378 	.word	0x696e7378
   313f0:	045f5a64 	.word	0x045f5a64
   313f4:	a9024608 	.word	0xa9024608
   313f8:	feb6f7fb 	.word	0xfeb6f7fb
   313fc:	46682172 	.word	0x46682172
   31400:	f81cf7f9 	.word	0xf81cf7f9
   31404:	98004605 	.word	0x98004605
   31408:	d16c2d00 	.word	0xd16c2d00
   3140c:	d06a2800 	.word	0xd06a2800
   31410:	0605f241 	.word	0x0605f241
   31414:	0c49f04f 	.word	0x0c49f04f
   31418:	f04f2272 	.word	0xf04f2272
   3141c:	f04f0e76 	.word	0xf04f0e76
   31420:	f04f0943 	.word	0xf04f0943
   31424:	4f510854 	.word	0x4f510854
   31428:	883ba91e 	.word	0x883ba91e
   3142c:	c00ff880 	.word	0xc00ff880
   31430:	b29b3301 	.word	0xb29b3301
   31434:	4c03ea46 	.word	0x4c03ea46
   31438:	cd74f841 	.word	0xcd74f841
   3143c:	71857145 	.word	0x71857145
   31440:	720571c5 	.word	0x720571c5
   31444:	72857245 	.word	0x72857245
   31448:	710272c5 	.word	0x710272c5
   3144c:	900cf880 	.word	0x900cf880
   31450:	800df880 	.word	0x800df880
   31454:	e00ef880 	.word	0xe00ef880
   31458:	803b6800 	.word	0x803b6800
   3145c:	faa9f010 	.word	0xfaa9f010
   31460:	46314b43 	.word	0x46314b43
   31464:	601d9800 	.word	0x601d9800
   31468:	fffcf7f8 	.word	0xfffcf7f8
   3146c:	d1472800 	.word	0xd1472800
   31470:	02996823 	.word	0x02996823
   31474:	4e3fd50d 	.word	0x4e3fd50d
   31478:	e0014d3a 	.word	0xe0014d3a
   3147c:	d14f2800 	.word	0xd14f2800
   31480:	46284631 	.word	0x46284631
   31484:	fe4ef7f1 	.word	0xfe4ef7f1
   31488:	029a6823 	.word	0x029a6823
   3148c:	2800d4f6 	.word	0x2800d4f6
   31490:	6823d146 	.word	0x6823d146
   31494:	d53e039b 	.word	0xd53e039b
   31498:	b01f2000 	.word	0xb01f2000
   3149c:	83f0e8bd 	.word	0x83f0e8bd
   314a0:	a9024608 	.word	0xa9024608
   314a4:	fe18f7fb 	.word	0xfe18f7fb
   314a8:	4608e7a8 	.word	0x4608e7a8
   314ac:	f7fba902 	.word	0xf7fba902
   314b0:	e7a3fe3b 	.word	0xe7a3fe3b
   314b4:	a9024608 	.word	0xa9024608
   314b8:	fdf4f7fb 	.word	0xfdf4f7fb
   314bc:	4608e79e 	.word	0x4608e79e
   314c0:	f7fba902 	.word	0xf7fba902
   314c4:	e799fdcb 	.word	0xe799fdcb
   314c8:	a9024608 	.word	0xa9024608
   314cc:	fd94f7fb 	.word	0xfd94f7fb
   314d0:	4608e794 	.word	0x4608e794
   314d4:	f7fba902 	.word	0xf7fba902
   314d8:	e78ffd3d 	.word	0xe78ffd3d
   314dc:	a9024608 	.word	0xa9024608
   314e0:	fd16f7fb 	.word	0xfd16f7fb
   314e4:	6803e78a 	.word	0x6803e78a
   314e8:	4618b11b 	.word	0x4618b11b
   314ec:	ffd8f7f8 	.word	0xffd8f7f8
   314f0:	f7f89800 	.word	0xf7f89800
   314f4:	2023ffcd 	.word	0x2023ffcd
   314f8:	fea8f7f1 	.word	0xfea8f7f1
   314fc:	30fff04f 	.word	0x30fff04f
   31500:	f4236823 	.word	0xf4236823
   31504:	60231300 	.word	0x60231300
   31508:	f4436823 	.word	0xf4436823
   3150c:	60233300 	.word	0x60233300
   31510:	e8bdb01f 	.word	0xe8bdb01f
   31514:	200583f0 	.word	0x200583f0
   31518:	f4436823 	.word	0xf4436823
   3151c:	60233300 	.word	0x60233300
   31520:	fe94f7f1 	.word	0xfe94f7f1
   31524:	30fff04f 	.word	0x30fff04f
   31528:	e8bdb01f 	.word	0xe8bdb01f
   3152c:	201683f0 	.word	0x201683f0
   31530:	fe8cf7f1 	.word	0xfe8cf7f1
   31534:	30fff04f 	.word	0x30fff04f
   31538:	e8bdb01f 	.word	0xe8bdb01f
   3153c:	200983f0 	.word	0x200983f0
   31540:	fe84f7f1 	.word	0xfe84f7f1
   31544:	30fff04f 	.word	0x30fff04f
   31548:	2039e7a7 	.word	0x2039e7a7
   3154c:	fe7ef7f1 	.word	0xfe7ef7f1
   31550:	30fff04f 	.word	0x30fff04f
   31554:	202de7a1 	.word	0x202de7a1
   31558:	fe78f7f1 	.word	0xfe78f7f1
   3155c:	30fff04f 	.word	0x30fff04f
   31560:	bf00e79b 	.word	0xbf00e79b
   31564:	49765443 	.word	0x49765443
   31568:	20024b80 	.word	0x20024b80
   3156c:	2002a308 	.word	0x2002a308
   31570:	20024b28 	.word	0x20024b28
   31574:	20031c64 	.word	0x20031c64

00031578 <gnss_interface_read>:
   31578:	4ff0e92d 	.word	0x4ff0e92d
   3157c:	b0b74c4a 	.word	0xb0b74c4a
   31580:	f04042a0 	.word	0xf04042a0
   31584:	468881ec 	.word	0x468881ec
   31588:	f0002900 	.word	0xf0002900
   3158c:	2ad781e2 	.word	0x2ad781e2
   31590:	81dff240 	.word	0x81dff240
   31594:	46994d45 	.word	0x46994d45
   31598:	b29b682b 	.word	0xb29b682b
   3159c:	d0042b04 	.word	0xd0042b04
   315a0:	b29b682b 	.word	0xb29b682b
   315a4:	f0402b02 	.word	0xf0402b02
   315a8:	210281e0 	.word	0x210281e0
   315ac:	240020b6 	.word	0x240020b6
   315b0:	f10d682b 	.word	0xf10d682b
   315b4:	f423020e 	.word	0xf423020e
   315b8:	602b3380 	.word	0x602b3380
   315bc:	a0f4f8df 	.word	0xa0f4f8df
   315c0:	4f3bab08 	.word	0x4f3bab08
   315c4:	90054e38 	.word	0x90054e38
   315c8:	93049107 	.word	0x93049107
   315cc:	ea099206 	.word	0xea099206
   315d0:	f8da0b01 	.word	0xf8da0b01
   315d4:	464a0000 	.word	0x464a0000
   315d8:	a9046803 	.word	0xa9046803
   315dc:	4798689b 	.word	0x4798689b
   315e0:	da112800 	.word	0xda112800
   315e4:	0f00f1bb 	.word	0x0f00f1bb
   315e8:	682bd138 	.word	0x682bd138
   315ec:	d4f003d8 	.word	0xd4f003d8
   315f0:	e7eeb10c 	.word	0xe7eeb10c
   315f4:	4639b930 	.word	0x4639b930
   315f8:	f7f14630 	.word	0xf7f14630
   315fc:	682bfd93 	.word	0x682bfd93
   31600:	d5f703d9 	.word	0xd5f703d9
   31604:	e7e44604 	.word	0xe7e44604
   31608:	0202f244 	.word	0x0202f244
   3160c:	300ef8bd 	.word	0x300ef8bd
   31610:	d0394293 	.word	0xd0394293
   31614:	0201f244 	.word	0x0201f244
   31618:	d04d4293 	.word	0xd04d4293
   3161c:	0203f244 	.word	0x0203f244
   31620:	f0404293 	.word	0xf0404293
   31624:	22018196 	.word	0x22018196
   31628:	9b082414 	.word	0x9b082414
   3162c:	2000f888 	.word	0x2000f888
   31630:	f8c89a09 	.word	0xf8c89a09
   31634:	f8bd3008 	.word	0xf8bd3008
   31638:	e9c83028 	.word	0xe9c83028
   3163c:	f8da2303 	.word	0xf8da2303
   31640:	68030000 	.word	0x68030000
   31644:	479868db 	.word	0x479868db
   31648:	dd032800 	.word	0xdd032800
   3164c:	f443682b 	.word	0xf443682b
   31650:	602b3380 	.word	0x602b3380
   31654:	b0374620 	.word	0xb0374620
   31658:	8ff0e8bd 	.word	0x8ff0e8bd
   3165c:	46031c42 	.word	0x46031c42
   31660:	b93cd1d2 	.word	0xb93cd1d2
   31664:	2023461c 	.word	0x2023461c
   31668:	fdf0f7f1 	.word	0xfdf0f7f1
   3166c:	b0374620 	.word	0xb0374620
   31670:	8ff0e8bd 	.word	0x8ff0e8bd
   31674:	46209001 	.word	0x46209001
   31678:	fde8f7f1 	.word	0xfde8f7f1
   3167c:	461c9b01 	.word	0x461c9b01
   31680:	b0374620 	.word	0xb0374620
   31684:	8ff0e8bd 	.word	0x8ff0e8bd
   31688:	f7e8a808 	.word	0xf7e8a808
   3168c:	2302fc2b 	.word	0x2302fc2b
   31690:	b2a41c44 	.word	0xb2a41c44
   31694:	3b08f808 	.word	0x3b08f808
   31698:	a9084622 	.word	0xa9084622
   3169c:	f0104640 	.word	0xf0104640
   316a0:	3408f988 	.word	0x3408f988
   316a4:	bf00e7cb 	.word	0xbf00e7cb
   316a8:	49765443 	.word	0x49765443
   316ac:	20024b80 	.word	0x20024b80
   316b0:	20031c64 	.word	0x20031c64
   316b4:	20024b84 	.word	0x20024b84
   316b8:	a8092401 	.word	0xa8092401
   316bc:	e9c8c80f 	.word	0xe9c8c80f
   316c0:	e9c80102 	.word	0xe9c80102
   316c4:	990d2304 	.word	0x990d2304
   316c8:	f8889a0e 	.word	0xf8889a0e
   316cc:	9b0f4000 	.word	0x9b0f4000
   316d0:	1018f8c8 	.word	0x1018f8c8
   316d4:	f8c89910 	.word	0xf8c89910
   316d8:	f8c8201c 	.word	0xf8c8201c
   316dc:	f89d3020 	.word	0xf89d3020
   316e0:	f8dd205d 	.word	0xf8dd205d
   316e4:	f8c8304d 	.word	0xf8c8304d
   316e8:	f8dd1024 	.word	0xf8dd1024
   316ec:	f8881051 	.word	0xf8881051
   316f0:	f8dd2044 	.word	0xf8dd2044
   316f4:	f8c82055 	.word	0xf8c82055
   316f8:	f8dd3034 	.word	0xf8dd3034
   316fc:	f8c83059 	.word	0xf8c83059
   31700:	f8bd1038 	.word	0xf8bd1038
   31704:	f8c81044 	.word	0xf8c81044
   31708:	f8c8203c 	.word	0xf8c8203c
   3170c:	f8dd3040 	.word	0xf8dd3040
   31710:	f89d2046 	.word	0xf89d2046
   31714:	f8a8304a 	.word	0xf8a8304a
   31718:	f8881028 	.word	0xf8881028
   3171c:	f8c8302e 	.word	0xf8c8302e
   31720:	f89d202a 	.word	0xf89d202a
   31724:	f89d004b 	.word	0xf89d004b
   31728:	9b18204c 	.word	0x9b18204c
   3172c:	406cf89d 	.word	0x406cf89d
   31730:	2002ea40 	.word	0x2002ea40
   31734:	206bf89d 	.word	0x206bf89d
   31738:	210ff3c3 	.word	0x210ff3c3
   3173c:	ea429b1d 	.word	0xea429b1d
   31740:	f8a82204 	.word	0xf8a82204
   31744:	f8a80030 	.word	0xf8a80030
   31748:	f8bd104a 	.word	0xf8bd104a
   3174c:	f3c3105e 	.word	0xf3c3105e
   31750:	f8a8230f 	.word	0xf8a8230f
   31754:	f89d2056 	.word	0xf89d2056
   31758:	f8a82060 	.word	0xf8a82060
   3175c:	f8dd3062 	.word	0xf8dd3062
   31760:	f8a83063 	.word	0xf8a83063
   31764:	f8881046 	.word	0xf8881046
   31768:	f8bd2048 	.word	0xf8bd2048
   3176c:	f89d2068 	.word	0xf89d2068
   31770:	f8c81067 	.word	0xf8c81067
   31774:	f89d304c 	.word	0xf89d304c
   31778:	f888306a 	.word	0xf888306a
   3177c:	f8a81050 	.word	0xf8a81050
   31780:	f8882052 	.word	0xf8882052
   31784:	f8bd3054 	.word	0xf8bd3054
   31788:	f8dd3072 	.word	0xf8dd3072
   3178c:	f89d106d 	.word	0xf89d106d
   31790:	f8c82071 	.word	0xf8c82071
   31794:	f8881058 	.word	0xf8881058
   31798:	f89d205c 	.word	0xf89d205c
   3179c:	f8dd1074 	.word	0xf8dd1074
   317a0:	f8a82077 	.word	0xf8a82077
   317a4:	f89d305e 	.word	0xf89d305e
   317a8:	f888307b 	.word	0xf888307b
   317ac:	f8c81060 	.word	0xf8c81060
   317b0:	f8882064 	.word	0xf8882064
   317b4:	f89d3068 	.word	0xf89d3068
   317b8:	f89d3080 	.word	0xf89d3080
   317bc:	9a22107f 	.word	0x9a22107f
   317c0:	0094f89d 	.word	0x0094f89d
   317c4:	2103ea41 	.word	0x2103ea41
   317c8:	3093f89d 	.word	0x3093f89d
   317cc:	220ff3c2 	.word	0x220ff3c2
   317d0:	106ef8a8 	.word	0x106ef8a8
   317d4:	107cf8bd 	.word	0x107cf8bd
   317d8:	2300ea43 	.word	0x2300ea43
   317dc:	207af8a8 	.word	0x207af8a8
   317e0:	207ef89d 	.word	0x207ef89d
   317e4:	3086f8a8 	.word	0x3086f8a8
   317e8:	3081f8dd 	.word	0x3081f8dd
   317ec:	106af8a8 	.word	0x106af8a8
   317f0:	206cf888 	.word	0x206cf888
   317f4:	2086f8bd 	.word	0x2086f8bd
   317f8:	1085f89d 	.word	0x1085f89d
   317fc:	3070f8c8 	.word	0x3070f8c8
   31800:	3088f89d 	.word	0x3088f89d
   31804:	1074f888 	.word	0x1074f888
   31808:	2076f8a8 	.word	0x2076f8a8
   3180c:	3078f888 	.word	0x3078f888
   31810:	3090f8bd 	.word	0x3090f8bd
   31814:	108bf8dd 	.word	0x108bf8dd
   31818:	208ff89d 	.word	0x208ff89d
   3181c:	107cf8c8 	.word	0x107cf8c8
   31820:	2080f888 	.word	0x2080f888
   31824:	1092f89d 	.word	0x1092f89d
   31828:	2095f8dd 	.word	0x2095f8dd
   3182c:	3082f8a8 	.word	0x3082f8a8
   31830:	3099f89d 	.word	0x3099f89d
   31834:	1084f888 	.word	0x1084f888
   31838:	2088f8c8 	.word	0x2088f8c8
   3183c:	308cf888 	.word	0x308cf888
   31840:	009af8bd 	.word	0x009af8bd
   31844:	f89d9b27 	.word	0xf89d9b27
   31848:	f89d40a8 	.word	0xf89d40a8
   3184c:	f3c320a7 	.word	0xf3c320a7
   31850:	9b2c210f 	.word	0x9b2c210f
   31854:	2204ea42 	.word	0x2204ea42
   31858:	1092f8a8 	.word	0x1092f8a8
   3185c:	109cf89d 	.word	0x109cf89d
   31860:	209ef8a8 	.word	0x209ef8a8
   31864:	230ff3c3 	.word	0x230ff3c3
   31868:	209ff8dd 	.word	0x209ff8dd
   3186c:	008ef8a8 	.word	0x008ef8a8
   31870:	30aaf8a8 	.word	0x30aaf8a8
   31874:	1090f888 	.word	0x1090f888
   31878:	30a3f89d 	.word	0x30a3f89d
   3187c:	10a4f8bd 	.word	0x10a4f8bd
   31880:	2094f8c8 	.word	0x2094f8c8
   31884:	20a6f89d 	.word	0x20a6f89d
   31888:	3098f888 	.word	0x3098f888
   3188c:	30a9f8dd 	.word	0x30a9f8dd
   31890:	109af8a8 	.word	0x109af8a8
   31894:	209cf888 	.word	0x209cf888
   31898:	20aef8bd 	.word	0x20aef8bd
   3189c:	10adf89d 	.word	0x10adf89d
   318a0:	30a0f8c8 	.word	0x30a0f8c8
   318a4:	30b0f89d 	.word	0x30b0f89d
   318a8:	10a4f888 	.word	0x10a4f888
   318ac:	20a6f8a8 	.word	0x20a6f8a8
   318b0:	30a8f888 	.word	0x30a8f888
   318b4:	30b8f8bd 	.word	0x30b8f8bd
   318b8:	10b3f8dd 	.word	0x10b3f8dd
   318bc:	20b7f89d 	.word	0x20b7f89d
   318c0:	10acf8c8 	.word	0x10acf8c8
   318c4:	20b0f888 	.word	0x20b0f888
   318c8:	30b2f8a8 	.word	0x30b2f8a8
   318cc:	30bcf89d 	.word	0x30bcf89d
   318d0:	10bbf89d 	.word	0x10bbf89d
   318d4:	00d0f89d 	.word	0x00d0f89d
   318d8:	ea419a31 	.word	0xea419a31
   318dc:	f89d2103 	.word	0xf89d2103
   318e0:	f89d30cf 	.word	0xf89d30cf
   318e4:	ea4340ba 	.word	0xea4340ba
   318e8:	f3c22300 	.word	0xf3c22300
   318ec:	f8a8220f 	.word	0xf8a8220f
   318f0:	f8a810b6 	.word	0xf8a810b6
   318f4:	f88830ce 	.word	0xf88830ce
   318f8:	f8a840b4 	.word	0xf8a840b4
   318fc:	f8bd20c2 	.word	0xf8bd20c2
   31900:	f89d20c2 	.word	0xf89d20c2
   31904:	f89d10c1 	.word	0xf89d10c1
   31908:	f8dd30c4 	.word	0xf8dd30c4
   3190c:	f88800bd 	.word	0xf88800bd
   31910:	f8a810bc 	.word	0xf8a810bc
   31914:	f8c820be 	.word	0xf8c820be
   31918:	f88800b8 	.word	0xf88800b8
   3191c:	f8bd30c0 	.word	0xf8bd30c0
   31920:	f8dd30cc 	.word	0xf8dd30cc
   31924:	f89d10c7 	.word	0xf89d10c7
   31928:	f8c820cb 	.word	0xf8c820cb
   3192c:	f88810c4 	.word	0xf88810c4
   31930:	f89d20c8 	.word	0xf89d20c8
   31934:	f8dd10ce 	.word	0xf8dd10ce
   31938:	f8a820d1 	.word	0xf8a820d1
   3193c:	f89d30ca 	.word	0xf89d30ca
   31940:	f88830d5 	.word	0xf88830d5
   31944:	f8c810cc 	.word	0xf8c810cc
   31948:	f88820d0 	.word	0xf88820d0
   3194c:	24d830d4 	.word	0x24d830d4
   31950:	2016e675 	.word	0x2016e675
   31954:	fc7af7f1 	.word	0xfc7af7f1
   31958:	34fff04f 	.word	0x34fff04f
   3195c:	2009e67a 	.word	0x2009e67a
   31960:	fc74f7f1 	.word	0xfc74f7f1
   31964:	34fff04f 	.word	0x34fff04f
   31968:	2039e674 	.word	0x2039e674
   3196c:	fc6ef7f1 	.word	0xfc6ef7f1
   31970:	34fff04f 	.word	0x34fff04f
   31974:	bf00e66e 	.word	0xbf00e66e

00031978 <gnss_interface_setopt>:
   31978:	47f0e92d 	.word	0x47f0e92d
   3197c:	1402f241 	.word	0x1402f241
   31980:	b0864222 	.word	0xb0864222
   31984:	d0044d9b 	.word	0xd0044d9b
   31988:	b2a4682c 	.word	0xb2a4682c
   3198c:	f0402c02 	.word	0xf0402c02
   31990:	682c8104 	.word	0x682c8104
   31994:	f1000264 	.word	0xf1000264
   31998:	f5b18127 	.word	0xf5b18127
   3199c:	f0407f01 	.word	0xf0407f01
   319a0:	4995811d 	.word	0x4995811d
   319a4:	f0404288 	.word	0xf0404288
   319a8:	3a018113 	.word	0x3a018113
   319ac:	f2002a08 	.word	0xf2002a08
   319b0:	e8df80ec 	.word	0xe8df80ec
   319b4:	0075f012 	.word	0x0075f012
   319b8:	00c200d8 	.word	0x00c200d8
   319bc:	008100cc 	.word	0x008100cc
   319c0:	0098008c 	.word	0x0098008c
   319c4:	000900af 	.word	0x000900af
   319c8:	2a019a0e 	.word	0x2a019a0e
   319cc:	80ddf040 	.word	0x80ddf040
   319d0:	1603f241 	.word	0x1603f241
   319d4:	46372240 	.word	0x46372240
   319d8:	9202781b 	.word	0x9202781b
   319dc:	3015f88d 	.word	0x3015f88d
   319e0:	2112682b 	.word	0x2112682b
   319e4:	0380f443 	.word	0x0380f443
   319e8:	602b4668 	.word	0x602b4668
   319ec:	fd26f7f8 	.word	0xfd26f7f8
   319f0:	98004604 	.word	0x98004604
   319f4:	f0402c00 	.word	0xf0402c00
   319f8:	280080d6 	.word	0x280080d6
   319fc:	80d3f000 	.word	0x80d3f000
   31a00:	f04f2212 	.word	0xf04f2212
   31a04:	f04f0876 	.word	0xf04f0876
   31a08:	f04f0e49 	.word	0xf04f0e49
   31a0c:	f04f0a43 	.word	0xf04f0a43
   31a10:	f8df0954 	.word	0xf8df0954
   31a14:	a906c1ec 	.word	0xa906c1ec
   31a18:	3000f8bc 	.word	0x3000f8bc
   31a1c:	800ef880 	.word	0x800ef880
   31a20:	b29b3301 	.word	0xb29b3301
   31a24:	4603ea46 	.word	0x4603ea46
   31a28:	6d14f841 	.word	0x6d14f841
   31a2c:	71847144 	.word	0x71847144
   31a30:	720471c4 	.word	0x720471c4
   31a34:	72847244 	.word	0x72847244
   31a38:	710272c4 	.word	0x710272c4
   31a3c:	a00cf880 	.word	0xa00cf880
   31a40:	900df880 	.word	0x900df880
   31a44:	e00ff880 	.word	0xe00ff880
   31a48:	81b8f8df 	.word	0x81b8f8df
   31a4c:	f8ac6800 	.word	0xf8ac6800
   31a50:	f00f3000 	.word	0xf00f3000
   31a54:	4639ffae 	.word	0x4639ffae
   31a58:	f8c89800 	.word	0xf8c89800
   31a5c:	f7f84000 	.word	0xf7f84000
   31a60:	2800fd01 	.word	0x2800fd01
   31a64:	80aaf040 	.word	0x80aaf040
   31a68:	4e634f64 	.word	0x4e634f64
   31a6c:	46304639 	.word	0x46304639
   31a70:	fb58f7f1 	.word	0xfb58f7f1
   31a74:	f414682c 	.word	0xf414682c
   31a78:	d1f70480 	.word	0xd1f70480
   31a7c:	0000f8d8 	.word	0x0000f8d8
   31a80:	f7f8b118 	.word	0xf7f8b118
   31a84:	f8c8fd0d 	.word	0xf8c8fd0d
   31a88:	682b4000 	.word	0x682b4000
   31a8c:	d576021b 	.word	0xd576021b
   31a90:	682b2000 	.word	0x682b2000
   31a94:	0300f423 	.word	0x0300f423
   31a98:	b006602b 	.word	0xb006602b
   31a9c:	87f0e8bd 	.word	0x87f0e8bd
   31aa0:	2a029a0e 	.word	0x2a029a0e
   31aa4:	2208d171 	.word	0x2208d171
   31aa8:	1603f241 	.word	0x1603f241
   31aac:	9202881b 	.word	0x9202881b
   31ab0:	300ff8ad 	.word	0x300ff8ad
   31ab4:	e7934637 	.word	0xe7934637
   31ab8:	2a019a0e 	.word	0x2a019a0e
   31abc:	f241d165 	.word	0xf241d165
   31ac0:	781b1603 	.word	0x781b1603
   31ac4:	f88d9202 	.word	0xf88d9202
   31ac8:	4637300c 	.word	0x4637300c
   31acc:	9a0ee788 	.word	0x9a0ee788
   31ad0:	d15a2a01 	.word	0xd15a2a01
   31ad4:	f2412202 	.word	0xf2412202
   31ad8:	781b1603 	.word	0x781b1603
   31adc:	f88d9202 	.word	0xf88d9202
   31ae0:	4637300d 	.word	0x4637300d
   31ae4:	682ae77c 	.word	0x682ae77c
   31ae8:	2a02b292 	.word	0x2a02b292
   31aec:	9a0ed155 	.word	0x9a0ed155
   31af0:	d14a2a04 	.word	0xd14a2a04
   31af4:	f2412101 	.word	0xf2412101
   31af8:	682a0604 	.word	0x682a0604
   31afc:	0c136818 	.word	0x0c136818
   31b00:	f043041b 	.word	0xf043041b
   31b04:	f8cd0303 	.word	0xf8cd0303
   31b08:	602b0009 	.word	0x602b0009
   31b0c:	1008f88d 	.word	0x1008f88d
   31b10:	e7654637 	.word	0xe7654637
   31b14:	b29b682b 	.word	0xb29b682b
   31b18:	d13e2b04 	.word	0xd13e2b04
   31b1c:	f2412300 	.word	0xf2412300
   31b20:	f88d0604 	.word	0xf88d0604
   31b24:	f88d3008 	.word	0xf88d3008
   31b28:	f88d3009 	.word	0xf88d3009
   31b2c:	f88d300a 	.word	0xf88d300a
   31b30:	f88d300b 	.word	0xf88d300b
   31b34:	4637300c 	.word	0x4637300c
   31b38:	9a0ee752 	.word	0x9a0ee752
   31b3c:	d1242a01 	.word	0xd1242a01
   31b40:	2b01781b 	.word	0x2b01781b
   31b44:	f241d121 	.word	0xf241d121
   31b48:	46371603 	.word	0x46371603
   31b4c:	9a0ee748 	.word	0x9a0ee748
   31b50:	d11a2a02 	.word	0xd11a2a02
   31b54:	f2412220 	.word	0xf2412220
   31b58:	881b1603 	.word	0x881b1603
   31b5c:	f8ad9202 	.word	0xf8ad9202
   31b60:	46373013 	.word	0x46373013
   31b64:	9a0ee73c 	.word	0x9a0ee73c
   31b68:	d10e2a02 	.word	0xd10e2a02
   31b6c:	f2412210 	.word	0xf2412210
   31b70:	881b1603 	.word	0x881b1603
   31b74:	f8ad9202 	.word	0xf8ad9202
   31b78:	46373011 	.word	0x46373011
   31b7c:	200ee730 	.word	0x200ee730
   31b80:	fb64f7f1 	.word	0xfb64f7f1
   31b84:	30fff04f 	.word	0x30fff04f
   31b88:	2016e783 	.word	0x2016e783
   31b8c:	fb5ef7f1 	.word	0xfb5ef7f1
   31b90:	30fff04f 	.word	0x30fff04f
   31b94:	e8bdb006 	.word	0xe8bdb006
   31b98:	200e87f0 	.word	0x200e87f0
   31b9c:	fb56f7f1 	.word	0xfb56f7f1
   31ba0:	30fff04f 	.word	0x30fff04f
   31ba4:	6803e779 	.word	0x6803e779
   31ba8:	4618b11b 	.word	0x4618b11b
   31bac:	fc78f7f8 	.word	0xfc78f7f8
   31bb0:	f7f89800 	.word	0xf7f89800
   31bb4:	2023fc6d 	.word	0x2023fc6d
   31bb8:	fb48f7f1 	.word	0xfb48f7f1
   31bbc:	200e682b 	.word	0x200e682b
   31bc0:	0380f423 	.word	0x0380f423
   31bc4:	f7f1602b 	.word	0xf7f1602b
   31bc8:	f04ffb41 	.word	0xf04ffb41
   31bcc:	e76430ff 	.word	0xe76430ff
   31bd0:	f7f12009 	.word	0xf7f12009
   31bd4:	f04ffb3b 	.word	0xf04ffb3b
   31bd8:	e75e30ff 	.word	0xe75e30ff
   31bdc:	f7f1202a 	.word	0xf7f1202a
   31be0:	f04ffb35 	.word	0xf04ffb35
   31be4:	e75830ff 	.word	0xe75830ff
   31be8:	f7f12073 	.word	0xf7f12073
   31bec:	f04ffb2f 	.word	0xf04ffb2f
   31bf0:	e75230ff 	.word	0xe75230ff
   31bf4:	20024b80 	.word	0x20024b80
   31bf8:	49765443 	.word	0x49765443
   31bfc:	20031c64 	.word	0x20031c64
   31c00:	2002a308 	.word	0x2002a308
   31c04:	20024b28 	.word	0x20024b28

00031c08 <gnss_interface_getopt>:
   31c08:	4ff0e92d 	.word	0x4ff0e92d
   31c0c:	b0874c81 	.word	0xb0874c81
   31c10:	46986825 	.word	0x46986825
   31c14:	2d02b2ad 	.word	0x2d02b2ad
   31c18:	f0409b10 	.word	0xf0409b10
   31c1c:	682580dc 	.word	0x682580dc
   31c20:	f10003ee 	.word	0xf10003ee
   31c24:	682580f0 	.word	0x682580f0
   31c28:	f10001ed 	.word	0xf10001ed
   31c2c:	f5b180e6 	.word	0xf5b180e6
   31c30:	f0407f01 	.word	0xf0407f01
   31c34:	497880d6 	.word	0x497880d6
   31c38:	f0404288 	.word	0xf0404288
   31c3c:	f1b880d8 	.word	0xf1b880d8
   31c40:	d00b0f00 	.word	0xd00b0f00
   31c44:	1e57b153 	.word	0x1e57b153
   31c48:	d8072f05 	.word	0xd8072f05
   31c4c:	f007e8df 	.word	0xf007e8df
   31c50:	0f030f0f 	.word	0x0f030f0f
   31c54:	681b0303 	.word	0x681b0303
   31c58:	d00b2b01 	.word	0xd00b2b01
   31c5c:	f7f12016 	.word	0xf7f12016
   31c60:	f04ffaf5 	.word	0xf04ffaf5
   31c64:	462835ff 	.word	0x462835ff
   31c68:	e8bdb007 	.word	0xe8bdb007
   31c6c:	681b8ff0 	.word	0x681b8ff0
   31c70:	d1f32b02 	.word	0xd1f32b02
   31c74:	22126823 	.word	0x22126823
   31c78:	7380f043 	.word	0x7380f043
   31c7c:	a8012100 	.word	0xa8012100
   31c80:	f00f6023 	.word	0xf00f6023
   31c84:	2112feb6 	.word	0x2112feb6
   31c88:	f7f84668 	.word	0xf7f84668
   31c8c:	4605fbd7 	.word	0x4605fbd7
   31c90:	2d009800 	.word	0x2d009800
   31c94:	808af040 	.word	0x808af040
   31c98:	f0002800 	.word	0xf0002800
   31c9c:	f2418087 	.word	0xf2418087
   31ca0:	f04f1602 	.word	0xf04f1602
   31ca4:	22120e49 	.word	0x22120e49
   31ca8:	0976f04f 	.word	0x0976f04f
   31cac:	0b43f04f 	.word	0x0b43f04f
   31cb0:	0a54f04f 	.word	0x0a54f04f
   31cb4:	c168f8df 	.word	0xc168f8df
   31cb8:	e00ff880 	.word	0xe00ff880
   31cbc:	3000f8bc 	.word	0x3000f8bc
   31cc0:	900ef880 	.word	0x900ef880
   31cc4:	b29b3301 	.word	0xb29b3301
   31cc8:	4e03ea46 	.word	0x4e03ea46
   31ccc:	e004f8cd 	.word	0xe004f8cd
   31cd0:	71857145 	.word	0x71857145
   31cd4:	720571c5 	.word	0x720571c5
   31cd8:	72857245 	.word	0x72857245
   31cdc:	a90172c5 	.word	0xa90172c5
   31ce0:	f8807102 	.word	0xf8807102
   31ce4:	f880b00c 	.word	0xf880b00c
   31ce8:	f8dfa00d 	.word	0xf8dfa00d
   31cec:	68009138 	.word	0x68009138
   31cf0:	3000f8ac 	.word	0x3000f8ac
   31cf4:	fe5df00f 	.word	0xfe5df00f
   31cf8:	98004631 	.word	0x98004631
   31cfc:	5000f8c9 	.word	0x5000f8c9
   31d00:	fbb0f7f8 	.word	0xfbb0f7f8
   31d04:	d15c2800 	.word	0xd15c2800
   31d08:	4d434e44 	.word	0x4d434e44
   31d0c:	46284631 	.word	0x46284631
   31d10:	fa08f7f1 	.word	0xfa08f7f1
   31d14:	01db6823 	.word	0x01db6823
   31d18:	f8d9d4f8 	.word	0xf8d9d4f8
   31d1c:	b1d80000 	.word	0xb1d80000
   31d20:	f0156825 	.word	0xf0156825
   31d24:	d00f7500 	.word	0xd00f7500
   31d28:	d8372f05 	.word	0xd8372f05
   31d2c:	f007e8df 	.word	0xf007e8df
   31d30:	2b26201a 	.word	0x2b26201a
   31d34:	25000331 	.word	0x25000331
   31d38:	f8887b43 	.word	0xf8887b43
   31d3c:	f7f83000 	.word	0xf7f83000
   31d40:	2300fbaf 	.word	0x2300fbaf
   31d44:	3000f8c9 	.word	0x3000f8c9
   31d48:	f0236823 	.word	0xf0236823
   31d4c:	60237300 	.word	0x60237300
   31d50:	b0074628 	.word	0xb0074628
   31d54:	8ff0e8bd 	.word	0x8ff0e8bd
   31d58:	46056823 	.word	0x46056823
   31d5c:	7300f023 	.word	0x7300f023
   31d60:	e7f56023 	.word	0xe7f56023
   31d64:	300ff8b0 	.word	0x300ff8b0
   31d68:	f8a82500 	.word	0xf8a82500
   31d6c:	e7e63000 	.word	0xe7e63000
   31d70:	3011f8b0 	.word	0x3011f8b0
   31d74:	f8a82500 	.word	0xf8a82500
   31d78:	e7e03000 	.word	0xe7e03000
   31d7c:	25007b83 	.word	0x25007b83
   31d80:	3000f888 	.word	0x3000f888
   31d84:	f8b0e7db 	.word	0xf8b0e7db
   31d88:	25003013 	.word	0x25003013
   31d8c:	3000f8a8 	.word	0x3000f8a8
   31d90:	7b03e7d5 	.word	0x7b03e7d5
   31d94:	f8882500 	.word	0xf8882500
   31d98:	e7d03000 	.word	0xe7d03000
   31d9c:	f7f12016 	.word	0xf7f12016
   31da0:	f04ffa55 	.word	0xf04ffa55
   31da4:	f8d935ff 	.word	0xf8d935ff
   31da8:	e7c80000 	.word	0xe7c80000
   31dac:	b11b6803 	.word	0xb11b6803
   31db0:	f7f84618 	.word	0xf7f84618
   31db4:	9800fb75 	.word	0x9800fb75
   31db8:	fb6af7f8 	.word	0xfb6af7f8
   31dbc:	f7f12023 	.word	0xf7f12023
   31dc0:	6823fa45 	.word	0x6823fa45
   31dc4:	f023200e 	.word	0xf023200e
   31dc8:	60237380 	.word	0x60237380
   31dcc:	35fff04f 	.word	0x35fff04f
   31dd0:	fa3cf7f1 	.word	0xfa3cf7f1
   31dd4:	200ee747 	.word	0x200ee747
   31dd8:	fa38f7f1 	.word	0xfa38f7f1
   31ddc:	35fff04f 	.word	0x35fff04f
   31de0:	202ae741 	.word	0x202ae741
   31de4:	fa32f7f1 	.word	0xfa32f7f1
   31de8:	35fff04f 	.word	0x35fff04f
   31dec:	2009e73b 	.word	0x2009e73b
   31df0:	fa2cf7f1 	.word	0xfa2cf7f1
   31df4:	35fff04f 	.word	0x35fff04f
   31df8:	2073e735 	.word	0x2073e735
   31dfc:	fa26f7f1 	.word	0xfa26f7f1
   31e00:	35fff04f 	.word	0x35fff04f
   31e04:	2005e72f 	.word	0x2005e72f
   31e08:	fa20f7f1 	.word	0xfa20f7f1
   31e0c:	35fff04f 	.word	0x35fff04f
   31e10:	bf00e729 	.word	0xbf00e729
   31e14:	20024b80 	.word	0x20024b80
   31e18:	49765443 	.word	0x49765443
   31e1c:	20031c64 	.word	0x20031c64
   31e20:	2002a308 	.word	0x2002a308
   31e24:	20024b28 	.word	0x20024b28

00031e28 <gnss_interface_init>:
   31e28:	b5382100 	.word	0xb5382100
   31e2c:	4d0a4c09 	.word	0x4d0a4c09
   31e30:	480a6822 	.word	0x480a6822
   31e34:	402a4b0a 	.word	0x402a4b0a
   31e38:	80016022 	.word	0x80016022
   31e3c:	f7f86019 	.word	0xf7f86019
   31e40:	b928faf7 	.word	0xb928faf7
   31e44:	402b6823 	.word	0x402b6823
   31e48:	0301f043 	.word	0x0301f043
   31e4c:	bd386023 	.word	0xbd386023
   31e50:	bd382003 	.word	0xbd382003
   31e54:	20024b80 	.word	0x20024b80
   31e58:	ffff0000 	.word	0xffff0000
   31e5c:	2002a308 	.word	0x2002a308
   31e60:	20024b28 	.word	0x20024b28

00031e64 <gnss_interface_open>:
   31e64:	b5102801 	.word	0xb5102801
   31e68:	f5b2d120 	.word	0xf5b2d120
   31e6c:	d11d7f01 	.word	0xd11d7f01
   31e70:	d11b2902 	.word	0xd11b2902
   31e74:	68234c13 	.word	0x68234c13
   31e78:	2b01b29b 	.word	0x2b01b29b
   31e7c:	6823d11c 	.word	0x6823d11c
   31e80:	0c1b4608 	.word	0x0c1b4608
   31e84:	f043041b 	.word	0xf043041b
   31e88:	22000302 	.word	0x22000302
   31e8c:	6023490e 	.word	0x6023490e
   31e90:	fbacf7fa 	.word	0xfbacf7fa
   31e94:	60104a0d 	.word	0x60104a0d
   31e98:	6823b170 	.word	0x6823b170
   31e9c:	f4436802 	.word	0xf4436802
   31ea0:	68123300 	.word	0x68123300
   31ea4:	47906023 	.word	0x47906023
   31ea8:	bd104809 	.word	0xbd104809
   31eac:	f7f12016 	.word	0xf7f12016
   31eb0:	f04ff9cd 	.word	0xf04ff9cd
   31eb4:	bd1030ff 	.word	0xbd1030ff
   31eb8:	f7f1200e 	.word	0xf7f1200e
   31ebc:	f04ff9c7 	.word	0xf04ff9c7
   31ec0:	bd1030ff 	.word	0xbd1030ff
   31ec4:	20024b80 	.word	0x20024b80
   31ec8:	0002a651 	.word	0x0002a651
   31ecc:	20024b84 	.word	0x20024b84
   31ed0:	49765443 	.word	0x49765443

00031ed4 <gnss_interface_close>:
   31ed4:	4b13b530 	.word	0x4b13b530
   31ed8:	4298b083 	.word	0x4298b083
   31edc:	4c12d11c 	.word	0x4c12d11c
   31ee0:	b29b6823 	.word	0xb29b6823
   31ee4:	d00f2b04 	.word	0xd00f2b04
   31ee8:	68284d10 	.word	0x68284d10
   31eec:	f7fab118 	.word	0xf7fab118
   31ef0:	2300fb9d 	.word	0x2300fb9d
   31ef4:	2000602b 	.word	0x2000602b
   31ef8:	0c1b6823 	.word	0x0c1b6823
   31efc:	f043041b 	.word	0xf043041b
   31f00:	60230301 	.word	0x60230301
   31f04:	bd30b003 	.word	0xbd30b003
   31f08:	22082300 	.word	0x22082300
   31f0c:	f44f9300 	.word	0xf44f9300
   31f10:	f7f97101 	.word	0xf7f97101
   31f14:	e7e7fa7b 	.word	0xe7e7fa7b
   31f18:	f7f12009 	.word	0xf7f12009
   31f1c:	f04ff997 	.word	0xf04ff997
   31f20:	e7ef30ff 	.word	0xe7ef30ff
   31f24:	49765443 	.word	0x49765443
   31f28:	20024b80 	.word	0x20024b80
   31f2c:	20024b84 	.word	0x20024b84

00031f30 <rpc_dfu_event_handler>:
   31f30:	4a08b508 	.word	0x4a08b508
   31f34:	881268c1 	.word	0x881268c1
   31f38:	ebb24603 	.word	0xebb24603
   31f3c:	d0054f11 	.word	0xd0054f11
   31f40:	b1106800 	.word	0xb1106800
   31f44:	f838f004 	.word	0xf838f004
   31f48:	bd082000 	.word	0xbd082000
   31f4c:	20014a02 	.word	0x20014a02
   31f50:	bd086013 	.word	0xbd086013
   31f54:	2002a30a 	.word	0x2002a30a
   31f58:	20024b2c 	.word	0x20024b2c

00031f5c <mfu_interface_init>:
   31f5c:	b5102300 	.word	0xb5102300
   31f60:	49094808 	.word	0x49094808
   31f64:	4c0a4a09 	.word	0x4c0a4a09
   31f68:	600b8003 	.word	0x600b8003
   31f6c:	60236013 	.word	0x60236013
   31f70:	ffecf003 	.word	0xffecf003
   31f74:	2301b910 	.word	0x2301b910
   31f78:	bd106023 	.word	0xbd106023
   31f7c:	30fff04f 	.word	0x30fff04f
   31f80:	bf00bd10 	.word	0xbf00bd10
   31f84:	2002a30a 	.word	0x2002a30a
   31f88:	20024b2c 	.word	0x20024b2c
   31f8c:	20024b90 	.word	0x20024b90
   31f90:	20024b88 	.word	0x20024b88

00031f94 <mfu_interface_open>:
   31f94:	b5082801 	.word	0xb5082801
   31f98:	f240d10b 	.word	0xf240d10b
   31f9c:	429a2303 	.word	0x429a2303
   31fa0:	4b09d107 	.word	0x4b09d107
   31fa4:	2a01681a 	.word	0x2a01681a
   31fa8:	2202d109 	.word	0x2202d109
   31fac:	4807601a 	.word	0x4807601a
   31fb0:	2016bd08 	.word	0x2016bd08
   31fb4:	f94af7f1 	.word	0xf94af7f1
   31fb8:	30fff04f 	.word	0x30fff04f
   31fbc:	f7f1bd08 	.word	0xf7f1bd08
   31fc0:	f04ff945 	.word	0xf04ff945
   31fc4:	bd0830ff 	.word	0xbd0830ff
   31fc8:	20024b88 	.word	0x20024b88
   31fcc:	49765432 	.word	0x49765432

00031fd0 <mfu_interface_close>:
   31fd0:	4c32b5f0 	.word	0x4c32b5f0
   31fd4:	6823b083 	.word	0x6823b083
   31fd8:	2a011e9a 	.word	0x2a011e9a
   31fdc:	2b03d857 	.word	0x2b03d857
   31fe0:	2301d004 	.word	0x2301d004
   31fe4:	60232000 	.word	0x60232000
   31fe8:	bdf0b003 	.word	0xbdf0b003
   31fec:	46682100 	.word	0x46682100
   31ff0:	ffb2f003 	.word	0xffb2f003
   31ff4:	28004603 	.word	0x28004603
   31ff8:	2104d13d 	.word	0x2104d13d
   31ffc:	98004e28 	.word	0x98004e28
   32000:	72018832 	.word	0x72018832
   32004:	b2923201 	.word	0xb2923201
   32008:	f0410411 	.word	0xf0410411
   3200c:	4d250106 	.word	0x4d250106
   32010:	710360c1 	.word	0x710360c1
   32014:	71837143 	.word	0x71837143
   32018:	724371c3 	.word	0x724371c3
   3201c:	72c37283 	.word	0x72c37283
   32020:	80322106 	.word	0x80322106
   32024:	f003602b 	.word	0xf003602b
   32028:	b9d8ffab 	.word	0xb9d8ffab
   3202c:	33fff04f 	.word	0x33fff04f
   32030:	4627ae02 	.word	0x4627ae02
   32034:	3d04f846 	.word	0x3d04f846
   32038:	4631e004 	.word	0x4631e004
   3203c:	f7f14638 	.word	0xf7f14638
   32040:	b9f0f871 	.word	0xb9f0f871
   32044:	28006828 	.word	0x28006828
   32048:	6905d0f7 	.word	0x6905d0f7
   3204c:	ffacf003 	.word	0xffacf003
   32050:	d0c62d00 	.word	0xd0c62d00
   32054:	20084b14 	.word	0x20084b14
   32058:	f7f1601d 	.word	0xf7f1601d
   3205c:	f04ff8f7 	.word	0xf04ff8f7
   32060:	e7c130ff 	.word	0xe7c130ff
   32064:	68039800 	.word	0x68039800
   32068:	4618b11b 	.word	0x4618b11b
   3206c:	ffa4f003 	.word	0xffa4f003
   32070:	f0039800 	.word	0xf0039800
   32074:	200cff99 	.word	0x200cff99
   32078:	f8e8f7f1 	.word	0xf8e8f7f1
   3207c:	30fff04f 	.word	0x30fff04f
   32080:	203ce7b2 	.word	0x203ce7b2
   32084:	f8e2f7f1 	.word	0xf8e2f7f1
   32088:	30fff04f 	.word	0x30fff04f
   3208c:	2001e7ac 	.word	0x2001e7ac
   32090:	f8dcf7f1 	.word	0xf8dcf7f1
   32094:	30fff04f 	.word	0x30fff04f
   32098:	bf00e7a6 	.word	0xbf00e7a6
   3209c:	20024b88 	.word	0x20024b88
   320a0:	2002a30a 	.word	0x2002a30a
   320a4:	20024b2c 	.word	0x20024b2c
   320a8:	20024b8c 	.word	0x20024b8c

000320ac <mfu_interface_sendto>:
   320ac:	47f0e92d 	.word	0x47f0e92d
   320b0:	46154e5a 	.word	0x46154e5a
   320b4:	b0826833 	.word	0xb0826833
   320b8:	2a011e9a 	.word	0x2a011e9a
   320bc:	80a7f200 	.word	0x80a7f200
   320c0:	2900460f 	.word	0x2900460f
   320c4:	809df000 	.word	0x809df000
   320c8:	f0002d00 	.word	0xf0002d00
   320cc:	2b02809a 	.word	0x2b02809a
   320d0:	d04e46e8 	.word	0xd04e46e8
   320d4:	46294640 	.word	0x46294640
   320d8:	ff3ef003 	.word	0xff3ef003
   320dc:	b1404606 	.word	0xb1404606
   320e0:	f7f1200c 	.word	0xf7f1200c
   320e4:	f04ff8b3 	.word	0xf04ff8b3
   320e8:	462835ff 	.word	0x462835ff
   320ec:	e8bdb002 	.word	0xe8bdb002
   320f0:	9b0087f0 	.word	0x9b0087f0
   320f4:	68184639 	.word	0x68184639
   320f8:	f00f462a 	.word	0xf00f462a
   320fc:	2104fc5a 	.word	0x2104fc5a
   32100:	98004c47 	.word	0x98004c47
   32104:	60458823 	.word	0x60458823
   32108:	b29b3301 	.word	0xb29b3301
   3210c:	8023041a 	.word	0x8023041a
   32110:	4c44430a 	.word	0x4c44430a
   32114:	724660c2 	.word	0x724660c2
   32118:	72c67286 	.word	0x72c67286
   3211c:	60267201 	.word	0x60267201
   32120:	ff2ef003 	.word	0xff2ef003
   32124:	d1622800 	.word	0xd1622800
   32128:	33fff04f 	.word	0x33fff04f
   3212c:	4f3bae02 	.word	0x4f3bae02
   32130:	3d04f846 	.word	0x3d04f846
   32134:	4631e004 	.word	0x4631e004
   32138:	f7f04638 	.word	0xf7f04638
   3213c:	b978fff3 	.word	0xb978fff3
   32140:	28006820 	.word	0x28006820
   32144:	6904d0f7 	.word	0x6904d0f7
   32148:	ff2ef003 	.word	0xff2ef003
   3214c:	d0cc2c00 	.word	0xd0cc2c00
   32150:	20084b35 	.word	0x20084b35
   32154:	f04f601c 	.word	0xf04f601c
   32158:	f7f135ff 	.word	0xf7f135ff
   3215c:	e7c4f877 	.word	0xe7c4f877
   32160:	35fff04f 	.word	0x35fff04f
   32164:	f7f1203c 	.word	0xf7f1203c
   32168:	4628f871 	.word	0x4628f871
   3216c:	e8bdb002 	.word	0xe8bdb002
   32170:	464087f0 	.word	0x464087f0
   32174:	f0032100 	.word	0xf0032100
   32178:	4602feef 	.word	0x4602feef
   3217c:	d1af2800 	.word	0xd1af2800
   32180:	0c08f04f 	.word	0x0c08f04f
   32184:	48294926 	.word	0x48294926
   32188:	6804880b 	.word	0x6804880b
   3218c:	98003301 	.word	0x98003301
   32190:	800bb29b 	.word	0x800bb29b
   32194:	f043041b 	.word	0xf043041b
   32198:	61040303 	.word	0x61040303
   3219c:	60c34c21 	.word	0x60c34c21
   321a0:	71427102 	.word	0x71427102
   321a4:	71c27182 	.word	0x71c27182
   321a8:	72827242 	.word	0x72827242
   321ac:	f88072c2 	.word	0xf88072c2
   321b0:	2103c008 	.word	0x2103c008
   321b4:	f0036022 	.word	0xf0036022
   321b8:	b9c0fee3 	.word	0xb9c0fee3
   321bc:	33fff04f 	.word	0x33fff04f
   321c0:	0908f10d 	.word	0x0908f10d
   321c4:	3d04f849 	.word	0x3d04f849
   321c8:	e00546b2 	.word	0xe00546b2
   321cc:	46504649 	.word	0x46504649
   321d0:	ffa8f7f0 	.word	0xffa8f7f0
   321d4:	d1c32800 	.word	0xd1c32800
   321d8:	28006820 	.word	0x28006820
   321dc:	6904d0f6 	.word	0x6904d0f6
   321e0:	fee2f003 	.word	0xfee2f003
   321e4:	d1b32c00 	.word	0xd1b32c00
   321e8:	60332303 	.word	0x60332303
   321ec:	9800e772 	.word	0x9800e772
   321f0:	b11b6803 	.word	0xb11b6803
   321f4:	f0034618 	.word	0xf0034618
   321f8:	9800fedf 	.word	0x9800fedf
   321fc:	fed4f003 	.word	0xfed4f003
   32200:	2016e76e 	.word	0x2016e76e
   32204:	f822f7f1 	.word	0xf822f7f1
   32208:	35fff04f 	.word	0x35fff04f
   3220c:	2001e76d 	.word	0x2001e76d
   32210:	f81cf7f1 	.word	0xf81cf7f1
   32214:	35fff04f 	.word	0x35fff04f
   32218:	bf00e767 	.word	0xbf00e767
   3221c:	20024b88 	.word	0x20024b88
   32220:	2002a30a 	.word	0x2002a30a
   32224:	20024b2c 	.word	0x20024b2c
   32228:	20024b8c 	.word	0x20024b8c
   3222c:	20024b90 	.word	0x20024b90

00032230 <mfu_interface_setopt>:
   32230:	4846b5f0 	.word	0x4846b5f0
   32234:	6800b083 	.word	0x6800b083
   32238:	28013802 	.word	0x28013802
   3223c:	f240d877 	.word	0xf240d877
   32240:	42812003 	.word	0x42812003
   32244:	3a04d16d 	.word	0x3a04d16d
   32248:	d85c2a03 	.word	0xd85c2a03
   3224c:	f002e8df 	.word	0xf002e8df
   32250:	514e024b 	.word	0x514e024b
   32254:	46252407 	.word	0x46252407
   32258:	46682100 	.word	0x46682100
   3225c:	fe7cf003 	.word	0xfe7cf003
   32260:	28004603 	.word	0x28004603
   32264:	2704d138 	.word	0x2704d138
   32268:	98004e39 	.word	0x98004e39
   3226c:	46298832 	.word	0x46298832
   32270:	b2923201 	.word	0xb2923201
   32274:	4502ea44 	.word	0x4502ea44
   32278:	60c54c36 	.word	0x60c54c36
   3227c:	71437103 	.word	0x71437103
   32280:	71c37183 	.word	0x71c37183
   32284:	72837243 	.word	0x72837243
   32288:	720772c3 	.word	0x720772c3
   3228c:	60238032 	.word	0x60238032
   32290:	fe76f003 	.word	0xfe76f003
   32294:	f04fb9b8 	.word	0xf04fb9b8
   32298:	ad0233ff 	.word	0xad0233ff
   3229c:	f8454e2b 	.word	0xf8454e2b
   322a0:	e0053d04 	.word	0xe0053d04
   322a4:	46304629 	.word	0x46304629
   322a8:	ff3cf7f0 	.word	0xff3cf7f0
   322ac:	d1312800 	.word	0xd1312800
   322b0:	28006820 	.word	0x28006820
   322b4:	6904d0f6 	.word	0x6904d0f6
   322b8:	fe76f003 	.word	0xfe76f003
   322bc:	d13c2c00 	.word	0xd13c2c00
   322c0:	b0034620 	.word	0xb0034620
   322c4:	9800bdf0 	.word	0x9800bdf0
   322c8:	b11b6803 	.word	0xb11b6803
   322cc:	f0034618 	.word	0xf0034618
   322d0:	9800fe73 	.word	0x9800fe73
   322d4:	fe68f003 	.word	0xfe68f003
   322d8:	f7f0200c 	.word	0xf7f0200c
   322dc:	f04fffb7 	.word	0xf04fffb7
   322e0:	b00330ff 	.word	0xb00330ff
   322e4:	2405bdf0 	.word	0x2405bdf0
   322e8:	e7b54625 	.word	0xe7b54625
   322ec:	46252408 	.word	0x46252408
   322f0:	b1b3e7b2 	.word	0xb1b3e7b2
   322f4:	2a049a08 	.word	0x2a049a08
   322f8:	2000d113 	.word	0x2000d113
   322fc:	4b16681a 	.word	0x4b16681a
   32300:	b003601a 	.word	0xb003601a
   32304:	202abdf0 	.word	0x202abdf0
   32308:	ffa0f7f0 	.word	0xffa0f7f0
   3230c:	30fff04f 	.word	0x30fff04f
   32310:	bdf0b003 	.word	0xbdf0b003
   32314:	f7f0203c 	.word	0xf7f0203c
   32318:	f04fff99 	.word	0xf04fff99
   3231c:	b00330ff 	.word	0xb00330ff
   32320:	2016bdf0 	.word	0x2016bdf0
   32324:	ff92f7f0 	.word	0xff92f7f0
   32328:	30fff04f 	.word	0x30fff04f
   3232c:	2001e7c9 	.word	0x2001e7c9
   32330:	ff8cf7f0 	.word	0xff8cf7f0
   32334:	30fff04f 	.word	0x30fff04f
   32338:	4b08e7c3 	.word	0x4b08e7c3
   3233c:	601c2008 	.word	0x601c2008
   32340:	ff84f7f0 	.word	0xff84f7f0
   32344:	30fff04f 	.word	0x30fff04f
   32348:	bf00e7bb 	.word	0xbf00e7bb
   3234c:	20024b88 	.word	0x20024b88
   32350:	2002a30a 	.word	0x2002a30a
   32354:	20024b2c 	.word	0x20024b2c
   32358:	20024b90 	.word	0x20024b90
   3235c:	20024b8c 	.word	0x20024b8c

00032360 <mfu_interface_getopt>:
   32360:	2003f240 	.word	0x2003f240
   32364:	41f0e92d 	.word	0x41f0e92d
   32368:	b0824281 	.word	0xb0824281
   3236c:	f0409e08 	.word	0xf0409e08
   32370:	461d80ae 	.word	0x461d80ae
   32374:	f0002b00 	.word	0xf0002b00
   32378:	2e0080aa 	.word	0x2e0080aa
   3237c:	80a7f000 	.word	0x80a7f000
   32380:	681b4b5e 	.word	0x681b4b5e
   32384:	2b013b02 	.word	0x2b013b02
   32388:	80a7f200 	.word	0x80a7f200
   3238c:	2a133a01 	.word	0x2a133a01
   32390:	e8dfd879 	.word	0xe8dfd879
   32394:	5f17f002 	.word	0x5f17f002
   32398:	78787878 	.word	0x78787878
   3239c:	78787872 	.word	0x78787872
   323a0:	78787878 	.word	0x78787878
   323a4:	78787878 	.word	0x78787878
   323a8:	68330a78 	.word	0x68330a78
   323ac:	f0402b04 	.word	0xf0402b04
   323b0:	2200808e 	.word	0x2200808e
   323b4:	4b524610 	.word	0x4b524610
   323b8:	601a6819 	.word	0x601a6819
   323bc:	b0026029 	.word	0xb0026029
   323c0:	81f0e8bd 	.word	0x81f0e8bd
   323c4:	2b246833 	.word	0x2b246833
   323c8:	8081f040 	.word	0x8081f040
   323cc:	46a02401 	.word	0x46a02401
   323d0:	46682100 	.word	0x46682100
   323d4:	fdc0f003 	.word	0xfdc0f003
   323d8:	d1462800 	.word	0xd1462800
   323dc:	9b004949 	.word	0x9b004949
   323e0:	f1b8880a 	.word	0xf1b8880a
   323e4:	f1020f03 	.word	0xf1020f03
   323e8:	b2920201 	.word	0xb2920201
   323ec:	4402ea44 	.word	0x4402ea44
   323f0:	800a7118 	.word	0x800a7118
   323f4:	715860dc 	.word	0x715860dc
   323f8:	71d87198 	.word	0x71d87198
   323fc:	2104d04b 	.word	0x2104d04b
   32400:	4f412200 	.word	0x4f412200
   32404:	46186099 	.word	0x46186099
   32408:	603a4641 	.word	0x603a4641
   3240c:	fdb8f003 	.word	0xfdb8f003
   32410:	d14d2800 	.word	0xd14d2800
   32414:	33fff04f 	.word	0x33fff04f
   32418:	f844ac02 	.word	0xf844ac02
   3241c:	f8df3d04 	.word	0xf8df3d04
   32420:	e00580dc 	.word	0xe00580dc
   32424:	46404621 	.word	0x46404621
   32428:	fe7cf7f0 	.word	0xfe7cf7f0
   3242c:	d1372800 	.word	0xd1372800
   32430:	29006839 	.word	0x29006839
   32434:	690cd0f6 	.word	0x690cd0f6
   32438:	d1542c00 	.word	0xd1542c00
   3243c:	31146832 	.word	0x31146832
   32440:	f00f4628 	.word	0xf00f4628
   32444:	6838fab6 	.word	0x6838fab6
   32448:	fdaef003 	.word	0xfdaef003
   3244c:	b0024620 	.word	0xb0024620
   32450:	81f0e8bd 	.word	0x81f0e8bd
   32454:	2b046833 	.word	0x2b046833
   32458:	2402d139 	.word	0x2402d139
   3245c:	46682100 	.word	0x46682100
   32460:	f00346a0 	.word	0xf00346a0
   32464:	2800fd79 	.word	0x2800fd79
   32468:	200cd0b8 	.word	0x200cd0b8
   3246c:	feeef7f0 	.word	0xfeeef7f0
   32470:	30fff04f 	.word	0x30fff04f
   32474:	e8bdb002 	.word	0xe8bdb002
   32478:	683381f0 	.word	0x683381f0
   3247c:	d1262b04 	.word	0xd1262b04
   32480:	46a02409 	.word	0x46a02409
   32484:	202ae7a4 	.word	0x202ae7a4
   32488:	fee0f7f0 	.word	0xfee0f7f0
   3248c:	30fff04f 	.word	0x30fff04f
   32490:	e8bdb002 	.word	0xe8bdb002
   32494:	4a1d81f0 	.word	0x4a1d81f0
   32498:	68122108 	.word	0x68122108
   3249c:	e7af611a 	.word	0xe7af611a
   324a0:	f7f0203c 	.word	0xf7f0203c
   324a4:	f04ffed3 	.word	0xf04ffed3
   324a8:	b00230ff 	.word	0xb00230ff
   324ac:	81f0e8bd 	.word	0x81f0e8bd
   324b0:	68039800 	.word	0x68039800
   324b4:	4618b11b 	.word	0x4618b11b
   324b8:	fd7ef003 	.word	0xfd7ef003
   324bc:	f0039800 	.word	0xf0039800
   324c0:	200cfd73 	.word	0x200cfd73
   324c4:	fec2f7f0 	.word	0xfec2f7f0
   324c8:	30fff04f 	.word	0x30fff04f
   324cc:	2016e7d2 	.word	0x2016e7d2
   324d0:	febcf7f0 	.word	0xfebcf7f0
   324d4:	30fff04f 	.word	0x30fff04f
   324d8:	2001e771 	.word	0x2001e771
   324dc:	feb6f7f0 	.word	0xfeb6f7f0
   324e0:	30fff04f 	.word	0x30fff04f
   324e4:	4b06e76b 	.word	0x4b06e76b
   324e8:	601c2008 	.word	0x601c2008
   324ec:	feaef7f0 	.word	0xfeaef7f0
   324f0:	f0036838 	.word	0xf0036838
   324f4:	f04ffd59 	.word	0xf04ffd59
   324f8:	e76030ff 	.word	0xe76030ff
   324fc:	20024b88 	.word	0x20024b88
   32500:	20024b8c 	.word	0x20024b8c
   32504:	2002a30a 	.word	0x2002a30a
   32508:	20024b2c 	.word	0x20024b2c
   3250c:	20024b90 	.word	0x20024b90

00032510 <unimplemented_method>:
   32510:	b508b40f 	.word	0xb508b40f
   32514:	f7f0202d 	.word	0xf7f0202d
   32518:	e8bdfe99 	.word	0xe8bdfe99
   3251c:	f04f4008 	.word	0xf04f4008
   32520:	b00430ff 	.word	0xb00430ff
   32524:	bf004770 	.word	0xbf004770

00032528 <bsd_platform_init>:
   32528:	b093b5f0 	.word	0xb093b5f0
   3252c:	ff7cf003 	.word	0xff7cf003
   32530:	d1522800 	.word	0xd1522800
   32534:	a801492b 	.word	0xa801492b
   32538:	ffeaf003 	.word	0xffeaf003
   3253c:	d14c2800 	.word	0xd14c2800
   32540:	ff8ef7f0 	.word	0xff8ef7f0
   32544:	f82ef003 	.word	0xf82ef003
   32548:	d1462800 	.word	0xd1462800
   3254c:	f44f2320 	.word	0xf44f2320
   32550:	22084180 	.word	0x22084180
   32554:	5c40f44f 	.word	0x5c40f44f
   32558:	4e244f23 	.word	0x4e244f23
   3255c:	93059303 	.word	0x93059303
   32560:	4d239307 	.word	0x4d239307
   32564:	910d9109 	.word	0x910d9109
   32568:	49234c22 	.word	0x49234c22
   3256c:	e9cd4b23 	.word	0xe9cd4b23
   32570:	eb0d0010 	.word	0xeb0d0010
   32574:	f8cd0002 	.word	0xf8cd0002
   32578:	e9cdc02c 	.word	0xe9cdc02c
   3257c:	9702220e 	.word	0x9702220e
   32580:	95069604 	.word	0x95069604
   32584:	910a9408 	.word	0x910a9408
   32588:	f7f8930c 	.word	0xf7f8930c
   3258c:	b108fdc9 	.word	0xb108fdc9
   32590:	bdf0b013 	.word	0xbdf0b013
   32594:	fd22f7fc 	.word	0xfd22f7fc
   32598:	f7f8b9f8 	.word	0xf7f8b9f8
   3259c:	b9e0f8b9 	.word	0xb9e0f8b9
   325a0:	fff8f7fc 	.word	0xfff8f7fc
   325a4:	f7fab9c8 	.word	0xf7fab9c8
   325a8:	b9b0f8fd 	.word	0xb9b0f8fd
   325ac:	fcd6f7ff 	.word	0xfcd6f7ff
   325b0:	f7f7b998 	.word	0xf7f7b998
   325b4:	b980feaf 	.word	0xb980feaf
   325b8:	f8f2f000 	.word	0xf8f2f000
   325bc:	f005b968 	.word	0xf005b968
   325c0:	b950f929 	.word	0xb950f929
   325c4:	fc30f7ff 	.word	0xfc30f7ff
   325c8:	f7f8b938 	.word	0xf7f8b938
   325cc:	3000faa5 	.word	0x3000faa5
   325d0:	2001bf18 	.word	0x2001bf18
   325d4:	b0134240 	.word	0xb0134240
   325d8:	f04fbdf0 	.word	0xf04fbdf0
   325dc:	b01330ff 	.word	0xb01330ff
   325e0:	bf00bdf0 	.word	0xbf00bdf0
   325e4:	00043f10 	.word	0x00043f10
   325e8:	20010000 	.word	0x20010000
   325ec:	20010040 	.word	0x20010040
   325f0:	20010020 	.word	0x20010020
   325f4:	20017060 	.word	0x20017060
   325f8:	20010060 	.word	0x20010060
   325fc:	20013060 	.word	0x20013060

00032600 <bsd_platform_shutdown>:
   32600:	f000b508 	.word	0xf000b508
   32604:	f7f7f913 	.word	0xf7f7f913
   32608:	f7fcff07 	.word	0xf7fcff07
   3260c:	f7f8fe8f 	.word	0xf7f8fe8f
   32610:	2000fdef 	.word	0x2000fdef
   32614:	bf00bd08 	.word	0xbf00bd08

00032618 <bsd_platform_af_method_table_get>:
   32618:	d02a2805 	.word	0xd02a2805
   3261c:	d914b508 	.word	0xd914b508
   32620:	d016280a 	.word	0xd016280a
   32624:	d10b2866 	.word	0xd10b2866
   32628:	2302f240 	.word	0x2302f240
   3262c:	d032429a 	.word	0xd032429a
   32630:	2305f240 	.word	0x2305f240
   32634:	d032429a 	.word	0xd032429a
   32638:	2301f240 	.word	0x2301f240
   3263c:	d02c429a 	.word	0xd02c429a
   32640:	f7f02016 	.word	0xf7f02016
   32644:	2000fe03 	.word	0x2000fe03
   32648:	2801bd08 	.word	0x2801bd08
   3264c:	2802d016 	.word	0x2802d016
   32650:	f5a2d1f6 	.word	0xf5a2d1f6
   32654:	2a0a7282 	.word	0x2a0a7282
   32658:	2301d819 	.word	0x2301d819
   3265c:	4103f240 	.word	0x4103f240
   32660:	fa034810 	.word	0xfa034810
   32664:	420af202 	.word	0x420af202
   32668:	0328f100 	.word	0x0328f100
   3266c:	4618bf18 	.word	0x4618bf18
   32670:	2903bd08 	.word	0x2903bd08
   32674:	bf18480c 	.word	0xbf18480c
   32678:	47702000 	.word	0x47702000
   3267c:	2303f240 	.word	0x2303f240
   32680:	d006429a 	.word	0xd006429a
   32684:	7f01f5b2 	.word	0x7f01f5b2
   32688:	4808d1da 	.word	0x4808d1da
   3268c:	4805bd08 	.word	0x4805bd08
   32690:	4807bd08 	.word	0x4807bd08
   32694:	4807bd08 	.word	0x4807bd08
   32698:	4807bd08 	.word	0x4807bd08
   3269c:	4807bd08 	.word	0x4807bd08
   326a0:	bf00bd08 	.word	0xbf00bd08
   326a4:	00043ddc 	.word	0x00043ddc
   326a8:	00043ecc 	.word	0x00043ecc
   326ac:	00043e7c 	.word	0x00043e7c
   326b0:	00043e2c 	.word	0x00043e2c
   326b4:	00043e54 	.word	0x00043e54
   326b8:	00043db4 	.word	0x00043db4
   326bc:	00043ea4 	.word	0x00043ea4

000326c0 <bsd_platform_fd_method_table_get>:
   326c0:	4605b538 	.word	0x4605b538
   326c4:	fda6f7fc 	.word	0xfda6f7fc
   326c8:	b9504604 	.word	0xb9504604
   326cc:	43ab4b2a 	.word	0x43ab4b2a
   326d0:	4b2ad032 	.word	0x4b2ad032
   326d4:	d04343ab 	.word	0xd04343ab
   326d8:	43ab4b29 	.word	0x43ab4b29
   326dc:	4829d146 	.word	0x4829d146
   326e0:	68c3bd38 	.word	0x68c3bd38
   326e4:	2b056942 	.word	0x2b056942
   326e8:	d911d034 	.word	0xd911d034
   326ec:	d0132b0a 	.word	0xd0132b0a
   326f0:	d12a2b66 	.word	0xd12a2b66
   326f4:	2302f240 	.word	0x2302f240
   326f8:	d031429a 	.word	0xd031429a
   326fc:	2305f240 	.word	0x2305f240
   32700:	d031429a 	.word	0xd031429a
   32704:	2301f240 	.word	0x2301f240
   32708:	d11e429a 	.word	0xd11e429a
   3270c:	bd38481e 	.word	0xbd38481e
   32710:	d0132b01 	.word	0xd0132b01
   32714:	d1182b02 	.word	0xd1182b02
   32718:	7282f5a2 	.word	0x7282f5a2
   3271c:	d8212a0a 	.word	0xd8212a0a
   32720:	f2402301 	.word	0xf2402301
   32724:	48194103 	.word	0x48194103
   32728:	f202fa03 	.word	0xf202fa03
   3272c:	f100420a 	.word	0xf100420a
   32730:	bf180428 	.word	0xbf180428
   32734:	bd384620 	.word	0xbd384620
   32738:	bd384815 	.word	0xbd384815
   3273c:	2303f240 	.word	0x2303f240
   32740:	d0f9429a 	.word	0xd0f9429a
   32744:	7f01f5b2 	.word	0x7f01f5b2
   32748:	2016d0c9 	.word	0x2016d0c9
   3274c:	fd7ef7f0 	.word	0xfd7ef7f0
   32750:	bd382000 	.word	0xbd382000
   32754:	480f6903 	.word	0x480f6903
   32758:	bf182b03 	.word	0xbf182b03
   3275c:	bd382000 	.word	0xbd382000
   32760:	bd38480d 	.word	0xbd38480d
   32764:	bd384809 	.word	0xbd384809
   32768:	bd38480c 	.word	0xbd38480c
   3276c:	f7f02009 	.word	0xf7f02009
   32770:	4620fd6d 	.word	0x4620fd6d
   32774:	bf00bd38 	.word	0xbf00bd38
   32778:	49765432 	.word	0x49765432
   3277c:	789a0000 	.word	0x789a0000
   32780:	49765443 	.word	0x49765443
   32784:	00043e7c 	.word	0x00043e7c
   32788:	00043db4 	.word	0x00043db4
   3278c:	00043ddc 	.word	0x00043ddc
   32790:	00043e2c 	.word	0x00043e2c
   32794:	00043ecc 	.word	0x00043ecc
   32798:	00043e54 	.word	0x00043e54
   3279c:	00043ea4 	.word	0x00043ea4

000327a0 <nrf_inbuilt_key_init>:
   327a0:	b086b570 	.word	0xb086b570
   327a4:	a802491d 	.word	0xa802491d
   327a8:	feb2f003 	.word	0xfeb2f003
   327ac:	4601bb00 	.word	0x4601bb00
   327b0:	f2404604 	.word	0xf2404604
   327b4:	20662201 	.word	0x20662201
   327b8:	ffacf7f7 	.word	0xffacf7f7
   327bc:	28004e18 	.word	0x28004e18
   327c0:	60304605 	.word	0x60304605
   327c4:	4817db10 	.word	0x4817db10
   327c8:	fb8cf7e7 	.word	0xfb8cf7e7
   327cc:	46024623 	.word	0x46024623
   327d0:	46284914 	.word	0x46284914
   327d4:	94009401 	.word	0x94009401
   327d8:	ff46f7f7 	.word	0xff46f7f7
   327dc:	48114605 	.word	0x48114605
   327e0:	fb80f7e7 	.word	0xfb80f7e7
   327e4:	d00742a8 	.word	0xd00742a8
   327e8:	46202405 	.word	0x46202405
   327ec:	bd70b006 	.word	0xbd70b006
   327f0:	46202469 	.word	0x46202469
   327f4:	bd70b006 	.word	0xbd70b006
   327f8:	e9cd6830 	.word	0xe9cd6830
   327fc:	a9034400 	.word	0xa9034400
   32800:	220a4623 	.word	0x220a4623
   32804:	f818f7f8 	.word	0xf818f7f8
   32808:	dded2801 	.word	0xdded2801
   3280c:	2202a803 	.word	0x2202a803
   32810:	f00f4905 	.word	0xf00f4905
   32814:	2800fac7 	.word	0x2800fac7
   32818:	e7e5d0e7 	.word	0xe7e5d0e7
   3281c:	20031c6c 	.word	0x20031c6c
   32820:	20031c68 	.word	0x20031c68
   32824:	00043f24 	.word	0x00043f24
   32828:	00043b04 	.word	0x00043b04

0003282c <nrf_inbuilt_key_deinit>:
   3282c:	4c05b510 	.word	0x4c05b510
   32830:	28006820 	.word	0x28006820
   32834:	f7f7db01 	.word	0xf7f7db01
   32838:	f04fffb7 	.word	0xf04fffb7
   3283c:	200033ff 	.word	0x200033ff
   32840:	bd106023 	.word	0xbd106023
   32844:	20031c68 	.word	0x20031c68

00032848 <symbol_0005436>:
   32848:	460a4b02 	.word	0x460a4b02
   3284c:	2100681b 	.word	0x2100681b
   32850:	bf004718 	.word	0xbf004718
   32854:	20031c80 	.word	0x20031c80

00032858 <mpi_mul_hlp>:
   32858:	e92d280f 	.word	0xe92d280f
   3285c:	46864ff0 	.word	0x46864ff0
   32860:	82e0f240 	.word	0x82e0f240
   32864:	0800f04f 	.word	0x0800f04f
   32868:	f1014684 	.word	0xf1014684
   3286c:	f1020440 	.word	0xf1020440
   32870:	f8540040 	.word	0xf8540040
   32874:	f8506c40 	.word	0xf8506c40
   32878:	fba35c40 	.word	0xfba35c40
   3287c:	eb186706 	.word	0xeb186706
   32880:	bf2c0806 	.word	0xbf2c0806
   32884:	0901f04f 	.word	0x0901f04f
   32888:	0900f04f 	.word	0x0900f04f
   3288c:	0508eb15 	.word	0x0508eb15
   32890:	f04f444f 	.word	0xf04f444f
   32894:	bf280900 	.word	0xbf280900
   32898:	0901f04f 	.word	0x0901f04f
   3289c:	5c40f840 	.word	0x5c40f840
   328a0:	6c3cf854 	.word	0x6c3cf854
   328a4:	fba344b9 	.word	0xfba344b9
   328a8:	eb19ab06 	.word	0xeb19ab06
   328ac:	bf2c090a 	.word	0xbf2c090a
   328b0:	0801f04f 	.word	0x0801f04f
   328b4:	0800f04f 	.word	0x0800f04f
   328b8:	6c3cf850 	.word	0x6c3cf850
   328bc:	050beb08 	.word	0x050beb08
   328c0:	0609eb16 	.word	0x0609eb16
   328c4:	0800f04f 	.word	0x0800f04f
   328c8:	f04fbf28 	.word	0xf04fbf28
   328cc:	f8400801 	.word	0xf8400801
   328d0:	f8546c3c 	.word	0xf8546c3c
   328d4:	44a86c38 	.word	0x44a86c38
   328d8:	6706fba3 	.word	0x6706fba3
   328dc:	0806eb18 	.word	0x0806eb18
   328e0:	f04fbf2c 	.word	0xf04fbf2c
   328e4:	f04f0901 	.word	0xf04f0901
   328e8:	f8500900 	.word	0xf8500900
   328ec:	444f5c38 	.word	0x444f5c38
   328f0:	0508eb15 	.word	0x0508eb15
   328f4:	0900f04f 	.word	0x0900f04f
   328f8:	f04fbf28 	.word	0xf04fbf28
   328fc:	f8400901 	.word	0xf8400901
   32900:	f8545c38 	.word	0xf8545c38
   32904:	44b96c34 	.word	0x44b96c34
   32908:	ab06fba3 	.word	0xab06fba3
   3290c:	090aeb19 	.word	0x090aeb19
   32910:	f04fbf2c 	.word	0xf04fbf2c
   32914:	f04f0801 	.word	0xf04f0801
   32918:	f8500800 	.word	0xf8500800
   3291c:	eb086c34 	.word	0xeb086c34
   32920:	eb16050b 	.word	0xeb16050b
   32924:	f04f0609 	.word	0xf04f0609
   32928:	bf280800 	.word	0xbf280800
   3292c:	0801f04f 	.word	0x0801f04f
   32930:	6c34f840 	.word	0x6c34f840
   32934:	6c30f854 	.word	0x6c30f854
   32938:	fba344a8 	.word	0xfba344a8
   3293c:	eb186706 	.word	0xeb186706
   32940:	bf2c0806 	.word	0xbf2c0806
   32944:	0901f04f 	.word	0x0901f04f
   32948:	0900f04f 	.word	0x0900f04f
   3294c:	5c30f850 	.word	0x5c30f850
   32950:	eb15444f 	.word	0xeb15444f
   32954:	f04f0508 	.word	0xf04f0508
   32958:	bf280900 	.word	0xbf280900
   3295c:	0901f04f 	.word	0x0901f04f
   32960:	5c30f840 	.word	0x5c30f840
   32964:	6c2cf854 	.word	0x6c2cf854
   32968:	fba344b9 	.word	0xfba344b9
   3296c:	eb19ab06 	.word	0xeb19ab06
   32970:	bf2c090a 	.word	0xbf2c090a
   32974:	0801f04f 	.word	0x0801f04f
   32978:	0800f04f 	.word	0x0800f04f
   3297c:	6c2cf850 	.word	0x6c2cf850
   32980:	050beb08 	.word	0x050beb08
   32984:	0609eb16 	.word	0x0609eb16
   32988:	0800f04f 	.word	0x0800f04f
   3298c:	f04fbf28 	.word	0xf04fbf28
   32990:	f8400801 	.word	0xf8400801
   32994:	f8546c2c 	.word	0xf8546c2c
   32998:	44a86c28 	.word	0x44a86c28
   3299c:	6706fba3 	.word	0x6706fba3
   329a0:	0806eb18 	.word	0x0806eb18
   329a4:	f04fbf2c 	.word	0xf04fbf2c
   329a8:	f04f0901 	.word	0xf04f0901
   329ac:	f8500900 	.word	0xf8500900
   329b0:	444f5c28 	.word	0x444f5c28
   329b4:	0508eb15 	.word	0x0508eb15
   329b8:	0900f04f 	.word	0x0900f04f
   329bc:	f04fbf28 	.word	0xf04fbf28
   329c0:	f8400901 	.word	0xf8400901
   329c4:	f8545c28 	.word	0xf8545c28
   329c8:	44b96c24 	.word	0x44b96c24
   329cc:	ab06fba3 	.word	0xab06fba3
   329d0:	090aeb19 	.word	0x090aeb19
   329d4:	f04fbf2c 	.word	0xf04fbf2c
   329d8:	f04f0801 	.word	0xf04f0801
   329dc:	f8500800 	.word	0xf8500800
   329e0:	eb086c24 	.word	0xeb086c24
   329e4:	eb16050b 	.word	0xeb16050b
   329e8:	f04f0609 	.word	0xf04f0609
   329ec:	bf280800 	.word	0xbf280800
   329f0:	0801f04f 	.word	0x0801f04f
   329f4:	6c24f840 	.word	0x6c24f840
   329f8:	6c20f854 	.word	0x6c20f854
   329fc:	fba344a8 	.word	0xfba344a8
   32a00:	eb186706 	.word	0xeb186706
   32a04:	bf2c0806 	.word	0xbf2c0806
   32a08:	0901f04f 	.word	0x0901f04f
   32a0c:	0900f04f 	.word	0x0900f04f
   32a10:	5c20f850 	.word	0x5c20f850
   32a14:	eb15444f 	.word	0xeb15444f
   32a18:	f04f0508 	.word	0xf04f0508
   32a1c:	bf280900 	.word	0xbf280900
   32a20:	0901f04f 	.word	0x0901f04f
   32a24:	5c20f840 	.word	0x5c20f840
   32a28:	6c1cf854 	.word	0x6c1cf854
   32a2c:	fba344b9 	.word	0xfba344b9
   32a30:	eb19ab06 	.word	0xeb19ab06
   32a34:	bf2c090a 	.word	0xbf2c090a
   32a38:	0801f04f 	.word	0x0801f04f
   32a3c:	0800f04f 	.word	0x0800f04f
   32a40:	6c1cf850 	.word	0x6c1cf850
   32a44:	050beb08 	.word	0x050beb08
   32a48:	0609eb16 	.word	0x0609eb16
   32a4c:	0800f04f 	.word	0x0800f04f
   32a50:	f04fbf28 	.word	0xf04fbf28
   32a54:	f8400801 	.word	0xf8400801
   32a58:	f8546c1c 	.word	0xf8546c1c
   32a5c:	44a86c18 	.word	0x44a86c18
   32a60:	6706fba3 	.word	0x6706fba3
   32a64:	0806eb18 	.word	0x0806eb18
   32a68:	f04fbf2c 	.word	0xf04fbf2c
   32a6c:	f04f0901 	.word	0xf04f0901
   32a70:	f8500900 	.word	0xf8500900
   32a74:	444f5c18 	.word	0x444f5c18
   32a78:	0508eb15 	.word	0x0508eb15
   32a7c:	0900f04f 	.word	0x0900f04f
   32a80:	f04fbf28 	.word	0xf04fbf28
   32a84:	f8400901 	.word	0xf8400901
   32a88:	f8545c18 	.word	0xf8545c18
   32a8c:	44b96c14 	.word	0x44b96c14
   32a90:	ab06fba3 	.word	0xab06fba3
   32a94:	090aeb19 	.word	0x090aeb19
   32a98:	f04fbf2c 	.word	0xf04fbf2c
   32a9c:	f04f0801 	.word	0xf04f0801
   32aa0:	f8500800 	.word	0xf8500800
   32aa4:	eb086c14 	.word	0xeb086c14
   32aa8:	eb16050b 	.word	0xeb16050b
   32aac:	f04f0609 	.word	0xf04f0609
   32ab0:	bf280800 	.word	0xbf280800
   32ab4:	0801f04f 	.word	0x0801f04f
   32ab8:	6c14f840 	.word	0x6c14f840
   32abc:	6c10f854 	.word	0x6c10f854
   32ac0:	fba344a8 	.word	0xfba344a8
   32ac4:	eb186706 	.word	0xeb186706
   32ac8:	bf2c0806 	.word	0xbf2c0806
   32acc:	0901f04f 	.word	0x0901f04f
   32ad0:	0900f04f 	.word	0x0900f04f
   32ad4:	5c10f850 	.word	0x5c10f850
   32ad8:	eb15444f 	.word	0xeb15444f
   32adc:	f04f0508 	.word	0xf04f0508
   32ae0:	bf280900 	.word	0xbf280900
   32ae4:	0901f04f 	.word	0x0901f04f
   32ae8:	5c10f840 	.word	0x5c10f840
   32aec:	6c0cf854 	.word	0x6c0cf854
   32af0:	fba344b9 	.word	0xfba344b9
   32af4:	eb19ab06 	.word	0xeb19ab06
   32af8:	bf2c090a 	.word	0xbf2c090a
   32afc:	0801f04f 	.word	0x0801f04f
   32b00:	0800f04f 	.word	0x0800f04f
   32b04:	6c0cf850 	.word	0x6c0cf850
   32b08:	050beb08 	.word	0x050beb08
   32b0c:	0609eb16 	.word	0x0609eb16
   32b10:	0800f04f 	.word	0x0800f04f
   32b14:	f04fbf28 	.word	0xf04fbf28
   32b18:	f8400801 	.word	0xf8400801
   32b1c:	f8546c0c 	.word	0xf8546c0c
   32b20:	44a86c08 	.word	0x44a86c08
   32b24:	6706fba3 	.word	0x6706fba3
   32b28:	0806eb18 	.word	0x0806eb18
   32b2c:	f04fbf2c 	.word	0xf04fbf2c
   32b30:	f04f0901 	.word	0xf04f0901
   32b34:	f8500900 	.word	0xf8500900
   32b38:	444f5c08 	.word	0x444f5c08
   32b3c:	0508eb15 	.word	0x0508eb15
   32b40:	0900f04f 	.word	0x0900f04f
   32b44:	f04fbf28 	.word	0xf04fbf28
   32b48:	f8400901 	.word	0xf8400901
   32b4c:	f8545c08 	.word	0xf8545c08
   32b50:	44b96c04 	.word	0x44b96c04
   32b54:	ab06fba3 	.word	0xab06fba3
   32b58:	090aeb19 	.word	0x090aeb19
   32b5c:	f04fbf2c 	.word	0xf04fbf2c
   32b60:	f04f0801 	.word	0xf04f0801
   32b64:	f8500800 	.word	0xf8500800
   32b68:	eb086c04 	.word	0xeb086c04
   32b6c:	eb16050b 	.word	0xeb16050b
   32b70:	f04f0609 	.word	0xf04f0609
   32b74:	bf280800 	.word	0xbf280800
   32b78:	0801f04f 	.word	0x0801f04f
   32b7c:	0c10f1ac 	.word	0x0c10f1ac
   32b80:	0f0ff1bc 	.word	0x0f0ff1bc
   32b84:	6c04f840 	.word	0x6c04f840
   32b88:	f10444a8 	.word	0xf10444a8
   32b8c:	f1000440 	.word	0xf1000440
   32b90:	f63f0040 	.word	0xf63f0040
   32b94:	f1aeae6e 	.word	0xf1aeae6e
   32b98:	09000010 	.word	0x09000010
   32b9c:	01803001 	.word	0x01803001
   32ba0:	44024401 	.word	0x44024401
   32ba4:	000ff00e 	.word	0x000ff00e
   32ba8:	68172807 	.word	0x68172807
   32bac:	8092f240 	.word	0x8092f240
   32bb0:	6856680c 	.word	0x6856680c
   32bb4:	9a04fba3 	.word	0x9a04fba3
   32bb8:	0809eb18 	.word	0x0809eb18
   32bbc:	f04fbf2c 	.word	0xf04fbf2c
   32bc0:	f04f0c01 	.word	0xf04f0c01
   32bc4:	eb170c00 	.word	0xeb170c00
   32bc8:	bf2c0708 	.word	0xbf2c0708
   32bcc:	24002401 	.word	0x24002401
   32bd0:	684f6017 	.word	0x684f6017
   32bd4:	050ceb0a 	.word	0x050ceb0a
   32bd8:	8907fba3 	.word	0x8907fba3
   32bdc:	eb14442c 	.word	0xeb14442c
   32be0:	bf2c0408 	.word	0xbf2c0408
   32be4:	25002501 	.word	0x25002501
   32be8:	eb0519a6 	.word	0xeb0519a6
   32bec:	f04f0709 	.word	0xf04f0709
   32bf0:	bf280500 	.word	0xbf280500
   32bf4:	60562501 	.word	0x60562501
   32bf8:	443d688e 	.word	0x443d688e
   32bfc:	7806fba3 	.word	0x7806fba3
   32c00:	bf2c19ed 	.word	0xbf2c19ed
   32c04:	24002401 	.word	0x24002401
   32c08:	eb086896 	.word	0xeb086896
   32c0c:	19ad0704 	.word	0x19ad0704
   32c10:	0400f04f 	.word	0x0400f04f
   32c14:	2401bf28 	.word	0x2401bf28
   32c18:	68ce6095 	.word	0x68ce6095
   32c1c:	fba3443c 	.word	0xfba3443c
   32c20:	19e47806 	.word	0x19e47806
   32c24:	2501bf2c 	.word	0x2501bf2c
   32c28:	68d62500 	.word	0x68d62500
   32c2c:	0705eb08 	.word	0x0705eb08
   32c30:	f04f19a4 	.word	0xf04f19a4
   32c34:	bf280500 	.word	0xbf280500
   32c38:	60d42501 	.word	0x60d42501
   32c3c:	443d690e 	.word	0x443d690e
   32c40:	7806fba3 	.word	0x7806fba3
   32c44:	bf2c19ed 	.word	0xbf2c19ed
   32c48:	24002401 	.word	0x24002401
   32c4c:	eb086916 	.word	0xeb086916
   32c50:	19ad0704 	.word	0x19ad0704
   32c54:	0400f04f 	.word	0x0400f04f
   32c58:	2401bf28 	.word	0x2401bf28
   32c5c:	694e6115 	.word	0x694e6115
   32c60:	fba3443c 	.word	0xfba3443c
   32c64:	19e47806 	.word	0x19e47806
   32c68:	2501bf2c 	.word	0x2501bf2c
   32c6c:	69562500 	.word	0x69562500
   32c70:	0705eb08 	.word	0x0705eb08
   32c74:	f04f19a4 	.word	0xf04f19a4
   32c78:	bf280500 	.word	0xbf280500
   32c7c:	61542501 	.word	0x61542501
   32c80:	443d698e 	.word	0x443d698e
   32c84:	7806fba3 	.word	0x7806fba3
   32c88:	bf2c19ed 	.word	0xbf2c19ed
   32c8c:	24002401 	.word	0x24002401
   32c90:	eb086996 	.word	0xeb086996
   32c94:	19ad0704 	.word	0x19ad0704
   32c98:	0400f04f 	.word	0x0400f04f
   32c9c:	2401bf28 	.word	0x2401bf28
   32ca0:	69ce6195 	.word	0x69ce6195
   32ca4:	fba3443c 	.word	0xfba3443c
   32ca8:	eb149a06 	.word	0xeb149a06
   32cac:	bf2c0409 	.word	0xbf2c0409
   32cb0:	0801f04f 	.word	0x0801f04f
   32cb4:	0800f04f 	.word	0x0800f04f
   32cb8:	eb0869d6 	.word	0xeb0869d6
   32cbc:	19a4050a 	.word	0x19a4050a
   32cc0:	0800f04f 	.word	0x0800f04f
   32cc4:	f04fbf28 	.word	0xf04fbf28
   32cc8:	61d40801 	.word	0x61d40801
   32ccc:	44a83120 	.word	0x44a83120
   32cd0:	32203808 	.word	0x32203808
   32cd4:	f0002800 	.word	0xf0002800
   32cd8:	680c8097 	.word	0x680c8097
   32cdc:	fba36816 	.word	0xfba36816
   32ce0:	eb199a04 	.word	0xeb199a04
   32ce4:	bf2c0808 	.word	0xbf2c0808
   32ce8:	24002401 	.word	0x24002401
   32cec:	0608eb16 	.word	0x0608eb16
   32cf0:	0500f04f 	.word	0x0500f04f
   32cf4:	2501bf28 	.word	0x2501bf28
   32cf8:	28014454 	.word	0x28014454
   32cfc:	0804eb05 	.word	0x0804eb05
   32d00:	d07f6016 	.word	0xd07f6016
   32d04:	6856684c 	.word	0x6856684c
   32d08:	9a04fba3 	.word	0x9a04fba3
   32d0c:	0808eb19 	.word	0x0808eb19
   32d10:	2401bf2c 	.word	0x2401bf2c
   32d14:	eb162400 	.word	0xeb162400
   32d18:	f04f0608 	.word	0xf04f0608
   32d1c:	bf280500 	.word	0xbf280500
   32d20:	44542501 	.word	0x44542501
   32d24:	eb052802 	.word	0xeb052802
   32d28:	60560804 	.word	0x60560804
   32d2c:	688cd06a 	.word	0x688cd06a
   32d30:	fba36896 	.word	0xfba36896
   32d34:	eb199a04 	.word	0xeb199a04
   32d38:	bf2c0808 	.word	0xbf2c0808
   32d3c:	24002401 	.word	0x24002401
   32d40:	0608eb16 	.word	0x0608eb16
   32d44:	0500f04f 	.word	0x0500f04f
   32d48:	2501bf28 	.word	0x2501bf28
   32d4c:	28034454 	.word	0x28034454
   32d50:	0804eb05 	.word	0x0804eb05
   32d54:	d0556096 	.word	0xd0556096
   32d58:	68d668cc 	.word	0x68d668cc
   32d5c:	9a04fba3 	.word	0x9a04fba3
   32d60:	0808eb19 	.word	0x0808eb19
   32d64:	2401bf2c 	.word	0x2401bf2c
   32d68:	eb162400 	.word	0xeb162400
   32d6c:	f04f0608 	.word	0xf04f0608
   32d70:	bf280500 	.word	0xbf280500
   32d74:	44542501 	.word	0x44542501
   32d78:	eb052804 	.word	0xeb052804
   32d7c:	60d60804 	.word	0x60d60804
   32d80:	690cd040 	.word	0x690cd040
   32d84:	fba36916 	.word	0xfba36916
   32d88:	eb199a04 	.word	0xeb199a04
   32d8c:	bf2c0408 	.word	0xbf2c0408
   32d90:	0801f04f 	.word	0x0801f04f
   32d94:	0800f04f 	.word	0x0800f04f
   32d98:	eb0a19a6 	.word	0xeb0a19a6
   32d9c:	f04f0508 	.word	0xf04f0508
   32da0:	bf280800 	.word	0xbf280800
   32da4:	0801f04f 	.word	0x0801f04f
   32da8:	44a82805 	.word	0x44a82805
   32dac:	d0296116 	.word	0xd0296116
   32db0:	6956694c 	.word	0x6956694c
   32db4:	9a04fba3 	.word	0x9a04fba3
   32db8:	0409eb18 	.word	0x0409eb18
   32dbc:	f04fbf2c 	.word	0xf04fbf2c
   32dc0:	f04f0801 	.word	0xf04f0801
   32dc4:	19a60800 	.word	0x19a60800
   32dc8:	0508eb0a 	.word	0x0508eb0a
   32dcc:	0800f04f 	.word	0x0800f04f
   32dd0:	f04fbf28 	.word	0xf04fbf28
   32dd4:	28060801 	.word	0x28060801
   32dd8:	615644a8 	.word	0x615644a8
   32ddc:	698cd012 	.word	0x698cd012
   32de0:	fba36991 	.word	0xfba36991
   32de4:	eb144504 	.word	0xeb144504
   32de8:	bf2c0808 	.word	0xbf2c0808
   32dec:	23002301 	.word	0x23002301
   32df0:	0108eb11 	.word	0x0108eb11
   32df4:	0400f04f 	.word	0x0400f04f
   32df8:	2401bf28 	.word	0x2401bf28
   32dfc:	eb04442b 	.word	0xeb04442b
   32e00:	61910803 	.word	0x61910803
   32e04:	0280eb02 	.word	0x0280eb02
   32e08:	23006815 	.word	0x23006815
   32e0c:	0508eb15 	.word	0x0508eb15
   32e10:	2301bf28 	.word	0x2301bf28
   32e14:	5b04f842 	.word	0x5b04f842
   32e18:	0801f04f 	.word	0x0801f04f
   32e1c:	d1f32b00 	.word	0xd1f32b00
   32e20:	8ff0e8bd 	.word	0x8ff0e8bd
   32e24:	0800f04f 	.word	0x0800f04f
   32e28:	bf00e6be 	.word	0xbf00e6be

00032e2c <symbol_0002616>:
   32e2c:	2b006843 	.word	0x2b006843
   32e30:	b430d033 	.word	0xb430d033
   32e34:	4280f103 	.word	0x4280f103
   32e38:	3a016885 	.word	0x3a016885
   32e3c:	4022f855 	.word	0x4022f855
   32e40:	0282eb05 	.word	0x0282eb05
   32e44:	e009b11c 	.word	0xe009b11c
   32e48:	4d04f852 	.word	0x4d04f852
   32e4c:	3b01b934 	.word	0x3b01b934
   32e50:	688bd1fa 	.word	0x688bd1fa
   32e54:	b9d06818 	.word	0xb9d06818
   32e58:	4770bc30 	.word	0x4770bc30
   32e5c:	6812688a 	.word	0x6812688a
   32e60:	2b01b192 	.word	0x2b01b192
   32e64:	6800d810 	.word	0x6800d810
   32e68:	2800680b 	.word	0x2800680b
   32e6c:	2b00dd01 	.word	0x2b00dd01
   32e70:	2b00db11 	.word	0x2b00db11
   32e74:	2800dd01 	.word	0x2800dd01
   32e78:	682bdb16 	.word	0x682bdb16
   32e7c:	d8eb4293 	.word	0xd8eb4293
   32e80:	bc30d306 	.word	0xbc30d306
   32e84:	47702000 	.word	0x47702000
   32e88:	bc306800 	.word	0xbc306800
   32e8c:	68084770 	.word	0x68084770
   32e90:	bc304240 	.word	0xbc304240
   32e94:	20014770 	.word	0x20014770
   32e98:	688be7de 	.word	0x688be7de
   32e9c:	b9006818 	.word	0xb9006818
   32ea0:	68084770 	.word	0x68084770
   32ea4:	e7fb4240 	.word	0xe7fb4240
   32ea8:	30fff04f 	.word	0x30fff04f
   32eac:	bf00e7d4 	.word	0xbf00e7d4

00032eb0 <symbol_00038d0>:
   32eb0:	2300b120 	.word	0x2300b120
   32eb4:	e9c02201 	.word	0xe9c02201
   32eb8:	60832300 	.word	0x60832300
   32ebc:	bf004770 	.word	0xbf004770

00032ec0 <symbol_000fb6e>:
   32ec0:	b510b1b0 	.word	0xb510b1b0
   32ec4:	68804604 	.word	0x68804604
   32ec8:	6862b160 	.word	0x6862b160
   32ecc:	b13a1e53 	.word	0xb13a1e53
   32ed0:	3b012200 	.word	0x3b012200
   32ed4:	60021c59 	.word	0x60021c59
   32ed8:	0004f100 	.word	0x0004f100
   32edc:	68a0d1f9 	.word	0x68a0d1f9
   32ee0:	fc4ef003 	.word	0xfc4ef003
   32ee4:	22012300 	.word	0x22012300
   32ee8:	2300e9c4 	.word	0x2300e9c4
   32eec:	bd1060a3 	.word	0xbd1060a3
   32ef0:	bf004770 	.word	0xbf004770

00032ef4 <symbol_0006423>:
   32ef4:	6842b570 	.word	0x6842b570
   32ef8:	428a4605 	.word	0x428a4605
   32efc:	d807460c 	.word	0xd807460c
   32f00:	7310f242 	.word	0x7310f242
   32f04:	d8514299 	.word	0xd8514299
   32f08:	d335428a 	.word	0xd335428a
   32f0c:	bd702000 	.word	0xbd702000
   32f10:	d0101e51 	.word	0xd0101e51
   32f14:	f8536883 	.word	0xf8536883
   32f18:	28000021 	.word	0x28000021
   32f1c:	f102d149 	.word	0xf102d149
   32f20:	3a014280 	.word	0x3a014280
   32f24:	0382eb03 	.word	0x0382eb03
   32f28:	f853e003 	.word	0xf853e003
   32f2c:	b9180d04 	.word	0xb9180d04
   32f30:	1e4a4611 	.word	0x1e4a4611
   32f34:	2101d1f9 	.word	0x2101d1f9
   32f38:	bf38428c 	.word	0xbf38428c
   32f3c:	2104460c 	.word	0x2104460c
   32f40:	f0034620 	.word	0xf0034620
   32f44:	4606fc09 	.word	0x4606fc09
   32f48:	68a9b380 	.word	0x68a9b380
   32f4c:	00a2b181 	.word	0x00a2b181
   32f50:	fd2ff00e 	.word	0xfd2ff00e
   32f54:	2001e9d5 	.word	0x2001e9d5
   32f58:	b13a1e53 	.word	0xb13a1e53
   32f5c:	3b012200 	.word	0x3b012200
   32f60:	60021c59 	.word	0x60021c59
   32f64:	0004f100 	.word	0x0004f100
   32f68:	68a8d1f9 	.word	0x68a8d1f9
   32f6c:	fc08f003 	.word	0xfc08f003
   32f70:	4601e9c5 	.word	0x4601e9c5
   32f74:	bd702000 	.word	0xbd702000
   32f78:	46202104 	.word	0x46202104
   32f7c:	fbecf003 	.word	0xfbecf003
   32f80:	b1984606 	.word	0xb1984606
   32f84:	290068a9 	.word	0x290068a9
   32f88:	686ad0f2 	.word	0x686ad0f2
   32f8c:	f00e0092 	.word	0xf00e0092
   32f90:	e9d5fd10 	.word	0xe9d5fd10
   32f94:	1e532001 	.word	0x1e532001
   32f98:	d0e72a00 	.word	0xd0e72a00
   32f9c:	3b012200 	.word	0x3b012200
   32fa0:	60021c59 	.word	0x60021c59
   32fa4:	0004f100 	.word	0x0004f100
   32fa8:	e7ded1f9 	.word	0xe7ded1f9
   32fac:	000ff06f 	.word	0x000ff06f
   32fb0:	4611bd70 	.word	0x4611bd70
   32fb4:	bf00e7c0 	.word	0xbf00e7c0

00032fb8 <symbol_00084df>:
   32fb8:	d0524288 	.word	0xd0524288
   32fbc:	688ab5f8 	.word	0x688ab5f8
   32fc0:	4605460e 	.word	0x4605460e
   32fc4:	d04e2a00 	.word	0xd04e2a00
   32fc8:	1e4b6849 	.word	0x1e4b6849
   32fcc:	f852d00e 	.word	0xf852d00e
   32fd0:	28000023 	.word	0x28000023
   32fd4:	f101d13b 	.word	0xf101d13b
   32fd8:	39014180 	.word	0x39014180
   32fdc:	0281eb02 	.word	0x0281eb02
   32fe0:	f852e002 	.word	0xf852e002
   32fe4:	bb900d04 	.word	0xbb900d04
   32fe8:	d1fa3b01 	.word	0xd1fa3b01
   32fec:	68332401 	.word	0x68332401
   32ff0:	686a602b 	.word	0x686a602b
   32ff4:	d30c42a2 	.word	0xd30c42a2
   32ff8:	009268af 	.word	0x009268af
   32ffc:	46382100 	.word	0x46382100
   33000:	fcf7f00e 	.word	0xfcf7f00e
   33004:	68b100a2 	.word	0x68b100a2
   33008:	f00e68a8 	.word	0xf00e68a8
   3300c:	2000fcd2 	.word	0x2000fcd2
   33010:	2104bdf8 	.word	0x2104bdf8
   33014:	f0034620 	.word	0xf0034620
   33018:	4607fb9f 	.word	0x4607fb9f
   3301c:	68a9b1f0 	.word	0x68a9b1f0
   33020:	686ab189 	.word	0x686ab189
   33024:	f00e0092 	.word	0xf00e0092
   33028:	e9d5fcc4 	.word	0xe9d5fcc4
   3302c:	1e532001 	.word	0x1e532001
   33030:	2200b13a 	.word	0x2200b13a
   33034:	1c593b01 	.word	0x1c593b01
   33038:	f1006002 	.word	0xf1006002
   3303c:	d1f90004 	.word	0xd1f90004
   33040:	f00368a8 	.word	0xf00368a8
   33044:	4622fb9d 	.word	0x4622fb9d
   33048:	4701e9c5 	.word	0x4701e9c5
   3304c:	f242e7d5 	.word	0xf242e7d5
   33050:	68317210 	.word	0x68317210
   33054:	42941c5c 	.word	0x42941c5c
   33058:	d9ca6029 	.word	0xd9ca6029
   3305c:	000ff06f 	.word	0x000ff06f
   33060:	2000bdf8 	.word	0x2000bdf8
   33064:	28004770 	.word	0x28004770
   33068:	6880d0d1 	.word	0x6880d0d1
   3306c:	6869b158 	.word	0x6869b158
   33070:	b1311e4b 	.word	0xb1311e4b
   33074:	1c5c3b01 	.word	0x1c5c3b01
   33078:	f1006002 	.word	0xf1006002
   3307c:	d1f90004 	.word	0xd1f90004
   33080:	f00368a8 	.word	0xf00368a8
   33084:	2000fb7d 	.word	0x2000fb7d
   33088:	e9c52301 	.word	0xe9c52301
   3308c:	60a83000 	.word	0x60a83000
   33090:	bf00bdf8 	.word	0xbf00bdf8

00033094 <symbol_000fa6b>:
   33094:	684bb5f0 	.word	0x684bb5f0
   33098:	b085460d 	.word	0xb085460d
   3309c:	46064614 	.word	0x46064614
   330a0:	b17b6851 	.word	0xb17b6851
   330a4:	f10368a8 	.word	0xf10368a8
   330a8:	3a014280 	.word	0x3a014280
   330ac:	7022f850 	.word	0x7022f850
   330b0:	0082eb00 	.word	0x0082eb00
   330b4:	e04fb127 	.word	0xe04fb127
   330b8:	2d04f850 	.word	0x2d04f850
   330bc:	d14b2a00 	.word	0xd14b2a00
   330c0:	d1f93b01 	.word	0xd1f93b01
   330c4:	f101b189 	.word	0xf101b189
   330c8:	68a74080 	.word	0x68a74080
   330cc:	f8573801 	.word	0xf8573801
   330d0:	2a002020 	.word	0x2a002020
   330d4:	8099f040 	.word	0x8099f040
   330d8:	0080eb07 	.word	0x0080eb07
   330dc:	f850e003 	.word	0xf850e003
   330e0:	2a002d04 	.word	0x2a002d04
   330e4:	3901d142 	.word	0x3901d142
   330e8:	2300d1f9 	.word	0x2300d1f9
   330ec:	42b42201 	.word	0x42b42201
   330f0:	2301e9cd 	.word	0x2301e9cd
   330f4:	d07f9303 	.word	0xd07f9303
   330f8:	d00542b5 	.word	0xd00542b5
   330fc:	46304629 	.word	0x46304629
   33100:	ff5af7ff 	.word	0xff5af7ff
   33104:	b9a84607 	.word	0xb9a84607
   33108:	60332301 	.word	0x60332301
   3310c:	b1806860 	.word	0xb1806860
   33110:	c008f8d4 	.word	0xc008f8d4
   33114:	4380f100 	.word	0x4380f100
   33118:	f85c3b01 	.word	0xf85c3b01
   3311c:	eb0c2023 	.word	0xeb0c2023
   33120:	b1220383 	.word	0xb1220383
   33124:	f853e042 	.word	0xf853e042
   33128:	2a002d04 	.word	0x2a002d04
   3312c:	3801d13e 	.word	0x3801d13e
   33130:	2700d1f9 	.word	0x2700d1f9
   33134:	b1609803 	.word	0xb1609803
   33138:	1e539a02 	.word	0x1e539a02
   3313c:	2200b13a 	.word	0x2200b13a
   33140:	1c593b01 	.word	0x1c593b01
   33144:	f1006002 	.word	0xf1006002
   33148:	d1f90004 	.word	0xd1f90004
   3314c:	f0039803 	.word	0xf0039803
   33150:	4638fb17 	.word	0x4638fb17
   33154:	bdf0b005 	.word	0xbdf0b005
   33158:	d0c62900 	.word	0xd0c62900
   3315c:	4080f101 	.word	0x4080f101
   33160:	380168a7 	.word	0x380168a7
   33164:	2020f857 	.word	0x2020f857
   33168:	d0b52a00 	.word	0xd0b52a00
   3316c:	d8bc428b 	.word	0xd8bc428b
   33170:	2b00d34b 	.word	0x2b00d34b
   33174:	68a8d0b9 	.word	0x68a8d0b9
   33178:	4180f103 	.word	0x4180f103
   3317c:	f8503901 	.word	0xf8503901
   33180:	f857c021 	.word	0xf857c021
   33184:	0089e021 	.word	0x0089e021
   33188:	440845e6 	.word	0x440845e6
   3318c:	0201eb07 	.word	0x0201eb07
   33190:	d83ad3ab 	.word	0xd83ad3ab
   33194:	e0064601 	.word	0xe0064601
   33198:	7d04f851 	.word	0x7d04f851
   3319c:	0d04f852 	.word	0x0d04f852
   331a0:	d8a24287 	.word	0xd8a24287
   331a4:	3b01d331 	.word	0x3b01d331
   331a8:	e79ed1f6 	.word	0xe79ed1f6
   331ac:	462b2500 	.word	0x462b2500
   331b0:	f85168b1 	.word	0xf85168b1
   331b4:	35016b04 	.word	0x35016b04
   331b8:	f8411af2 	.word	0xf8411af2
   331bc:	f85c2c04 	.word	0xf85c2c04
   331c0:	460c7b04 	.word	0x460c7b04
   331c4:	bf2c42ba 	.word	0xbf2c42ba
   331c8:	0e00f04f 	.word	0x0e00f04f
   331cc:	0e01f04f 	.word	0x0e01f04f
   331d0:	429e1bd2 	.word	0x429e1bd2
   331d4:	4673bf2c 	.word	0x4673bf2c
   331d8:	0301f10e 	.word	0x0301f10e
   331dc:	f8414285 	.word	0xf8414285
   331e0:	d3e62c04 	.word	0xd3e62c04
   331e4:	e7a4b90b 	.word	0xe7a4b90b
   331e8:	68222301 	.word	0x68222301
   331ec:	429a1ad1 	.word	0x429a1ad1
   331f0:	1b04f844 	.word	0x1b04f844
   331f4:	e79cd3f8 	.word	0xe79cd3f8
   331f8:	a8014621 	.word	0xa8014621
   331fc:	fedcf7ff 	.word	0xfedcf7ff
   33200:	28004607 	.word	0x28004607
   33204:	ac01d196 	.word	0xac01d196
   33208:	f06fe776 	.word	0xf06fe776
   3320c:	46380709 	.word	0x46380709
   33210:	bdf0b005 	.word	0xbdf0b005

00033214 <symbol_0006ccd>:
   33214:	7310f242 	.word	0x7310f242
   33218:	41f0e92d 	.word	0x41f0e92d
   3321c:	4256684f 	.word	0x4256684f
   33220:	429f4316 	.word	0x429f4316
   33224:	16c0f3c6 	.word	0x16c0f3c6
   33228:	6842d84f 	.word	0x6842d84f
   3322c:	42974604 	.word	0x42974604
   33230:	d82c460d 	.word	0xd82c460d
   33234:	68236829 	.word	0x68236829
   33238:	f106fb01 	.word	0xf106fb01
   3323c:	0701f1c6 	.word	0x0701f1c6
   33240:	1307fb03 	.word	0x1307fb03
   33244:	686b6023 	.word	0x686b6023
   33248:	2300b18b 	.word	0x2300b18b
   3324c:	68aa68a1 	.word	0x68aa68a1
   33250:	0023f851 	.word	0x0023f851
   33254:	2023f852 	.word	0x2023f852
   33258:	f007fb00 	.word	0xf007fb00
   3325c:	0206fb02 	.word	0x0206fb02
   33260:	2023f841 	.word	0x2023f841
   33264:	3301686a 	.word	0x3301686a
   33268:	d8ef429a 	.word	0xd8ef429a
   3326c:	42936862 	.word	0x42936862
   33270:	009ad20a 	.word	0x009ad20a
   33274:	330168a0 	.word	0x330168a0
   33278:	fb075881 	.word	0xfb075881
   3327c:	5081f101 	.word	0x5081f101
   33280:	32046861 	.word	0x32046861
   33284:	d8f54299 	.word	0xd8f54299
   33288:	e8bd2000 	.word	0xe8bd2000
   3328c:	210481f0 	.word	0x210481f0
   33290:	f0034638 	.word	0xf0034638
   33294:	4680fa61 	.word	0x4680fa61
   33298:	68a1b1b8 	.word	0x68a1b1b8
   3329c:	6862b189 	.word	0x6862b189
   332a0:	f00e0092 	.word	0xf00e0092
   332a4:	e9d4fb86 	.word	0xe9d4fb86
   332a8:	1e532001 	.word	0x1e532001
   332ac:	2200b13a 	.word	0x2200b13a
   332b0:	1c593b01 	.word	0x1c593b01
   332b4:	f1006002 	.word	0xf1006002
   332b8:	d1f90004 	.word	0xd1f90004
   332bc:	f00368a0 	.word	0xf00368a0
   332c0:	463afa5f 	.word	0x463afa5f
   332c4:	7801e9c4 	.word	0x7801e9c4
   332c8:	f06fe7b4 	.word	0xf06fe7b4
   332cc:	e7dc000f 	.word	0xe7dc000f

000332d0 <symbol_000b345>:
   332d0:	6845b5f8 	.word	0x6845b5f8
   332d4:	460e4604 	.word	0x460e4604
   332d8:	6887b19d 	.word	0x6887b19d
   332dc:	463800aa 	.word	0x463800aa
   332e0:	f00e2100 	.word	0xf00e2100
   332e4:	2e00fb86 	.word	0x2e00fb86
   332e8:	2301bfac 	.word	0x2301bfac
   332ec:	33fff04f 	.word	0x33fff04f
   332f0:	71e6ea86 	.word	0x71e6ea86
   332f4:	eba168a2 	.word	0xeba168a2
   332f8:	601171e6 	.word	0x601171e6
   332fc:	20006023 	.word	0x20006023
   33300:	2104bdf8 	.word	0x2104bdf8
   33304:	f0032001 	.word	0xf0032001
   33308:	4607fa27 	.word	0x4607fa27
   3330c:	68a1b1b8 	.word	0x68a1b1b8
   33310:	6862b181 	.word	0x6862b181
   33314:	f00e0092 	.word	0xf00e0092
   33318:	e9d4fb4c 	.word	0xe9d4fb4c
   3331c:	1e532001 	.word	0x1e532001
   33320:	3b01b132 	.word	0x3b01b132
   33324:	60051c5a 	.word	0x60051c5a
   33328:	0004f100 	.word	0x0004f100
   3332c:	68a0d1f9 	.word	0x68a0d1f9
   33330:	fa26f003 	.word	0xfa26f003
   33334:	22042301 	.word	0x22042301
   33338:	3701e9c4 	.word	0x3701e9c4
   3333c:	f06fe7cf 	.word	0xf06fe7cf
   33340:	bdf8000f 	.word	0xbdf8000f

00033344 <symbol_0007f0f>:
   33344:	ebb16843 	.word	0xebb16843
   33348:	d2091f43 	.word	0xd2091f43
   3334c:	094a6883 	.word	0x094a6883
   33350:	0022f853 	.word	0x0022f853
   33354:	011ff001 	.word	0x011ff001
   33358:	f00040c8 	.word	0xf00040c8
   3335c:	47700001 	.word	0x47700001
   33360:	47702000 	.word	0x47702000

00033364 <symbol_00030c0>:
   33364:	b3136843 	.word	0xb3136843
   33368:	6882b410 	.word	0x6882b410
   3336c:	d0241e58 	.word	0xd0241e58
   33370:	1020f852 	.word	0x1020f852
   33374:	f103b9e9 	.word	0xf103b9e9
   33378:	3b014380 	.word	0x3b014380
   3337c:	0383eb02 	.word	0x0383eb02
   33380:	f853e002 	.word	0xf853e002
   33384:	b9a11d04 	.word	0xb9a11d04
   33388:	d1fa3801 	.word	0xd1fa3801
   3338c:	68112420 	.word	0x68112420
   33390:	f04f2200 	.word	0xf04f2200
   33394:	e0024300 	.word	0xe0024300
   33398:	2a203201 	.word	0x2a203201
   3339c:	420bd004 	.word	0x420bd004
   333a0:	0353ea4f 	.word	0x0353ea4f
   333a4:	1aa0d0f8 	.word	0x1aa0d0f8
   333a8:	4b04f85d 	.word	0x4b04f85d
   333ac:	46184770 	.word	0x46184770
   333b0:	01404770 	.word	0x01404770
   333b4:	0420f100 	.word	0x0420f100
   333b8:	6811e7ea 	.word	0x6811e7ea
   333bc:	e7e72420 	.word	0xe7e72420

000333c0 <symbol_000b7da>:
   333c0:	b3236843 	.word	0xb3236843
   333c4:	6882b410 	.word	0x6882b410
   333c8:	d0261e58 	.word	0xd0261e58
   333cc:	1020f852 	.word	0x1020f852
   333d0:	f103b9f9 	.word	0xf103b9f9
   333d4:	3b014380 	.word	0x3b014380
   333d8:	0383eb02 	.word	0x0383eb02
   333dc:	f853e002 	.word	0xf853e002
   333e0:	b9b11d04 	.word	0xb9b11d04
   333e4:	d1fa3801 	.word	0xd1fa3801
   333e8:	68112420 	.word	0x68112420
   333ec:	f04f2200 	.word	0xf04f2200
   333f0:	e0024300 	.word	0xe0024300
   333f4:	2a203201 	.word	0x2a203201
   333f8:	420bd004 	.word	0x420bd004
   333fc:	0353ea4f 	.word	0x0353ea4f
   33400:	1aa0d0f8 	.word	0x1aa0d0f8
   33404:	08c03007 	.word	0x08c03007
   33408:	4b04f85d 	.word	0x4b04f85d
   3340c:	46184770 	.word	0x46184770
   33410:	01404770 	.word	0x01404770
   33414:	0420f100 	.word	0x0420f100
   33418:	6811e7e8 	.word	0x6811e7e8
   3341c:	e7e52420 	.word	0xe7e52420

00033420 <symbol_000eaf4>:
   33420:	43f8e92d 	.word	0x43f8e92d
   33424:	460f4605 	.word	0x460f4605
   33428:	2a004616 	.word	0x2a004616
   3342c:	780cd07e 	.word	0x780cd07e
   33430:	b124460b 	.word	0xb124460b
   33434:	f813e07e 	.word	0xf813e07e
   33438:	2a002f01 	.word	0x2a002f01
   3343c:	3401d146 	.word	0x3401d146
   33440:	d1f842a6 	.word	0xd1f842a6
   33444:	8004f8d5 	.word	0x8004f8d5
   33448:	0f00f1b8 	.word	0x0f00f1b8
   3344c:	2104d169 	.word	0x2104d169
   33450:	f0032001 	.word	0xf0032001
   33454:	4681f981 	.word	0x4681f981
   33458:	d06d2800 	.word	0xd06d2800
   3345c:	b18968a9 	.word	0xb18968a9
   33460:	0092686a 	.word	0x0092686a
   33464:	faa5f00e 	.word	0xfaa5f00e
   33468:	2001e9d5 	.word	0x2001e9d5
   3346c:	b13a1e53 	.word	0xb13a1e53
   33470:	3b014642 	.word	0x3b014642
   33474:	60021c59 	.word	0x60021c59
   33478:	0004f100 	.word	0x0004f100
   3347c:	68a8d1f9 	.word	0x68a8d1f9
   33480:	f97ef003 	.word	0xf97ef003
   33484:	22042301 	.word	0x22042301
   33488:	3901e9c5 	.word	0x3901e9c5
   3348c:	46482100 	.word	0x46482100
   33490:	faaff00e 	.word	0xfaaff00e
   33494:	22012300 	.word	0x22012300
   33498:	42a668a9 	.word	0x42a668a9
   3349c:	602a600b 	.word	0x602a600b
   334a0:	eb07d911 	.word	0xeb07d911
   334a4:	1b340c06 	.word	0x1b340c06
   334a8:	f02368ae 	.word	0xf02368ae
   334ac:	00df0103 	.word	0x00df0103
   334b0:	0d01f81c 	.word	0x0d01f81c
   334b4:	f0075872 	.word	0xf0075872
   334b8:	40b80718 	.word	0x40b80718
   334bc:	43023301 	.word	0x43023301
   334c0:	507242a3 	.word	0x507242a3
   334c4:	2000d1f0 	.word	0x2000d1f0
   334c8:	83f8e8bd 	.word	0x83f8e8bd
   334cc:	f0121b32 	.word	0xf0121b32
   334d0:	bf180803 	.word	0xbf180803
   334d4:	0801f04f 	.word	0x0801f04f
   334d8:	7310f242 	.word	0x7310f242
   334dc:	0892eb08 	.word	0x0892eb08
   334e0:	d8294598 	.word	0xd8294598
   334e4:	4598686b 	.word	0x4598686b
   334e8:	2104d929 	.word	0x2104d929
   334ec:	f0034640 	.word	0xf0034640
   334f0:	4681f933 	.word	0x4681f933
   334f4:	68a9b300 	.word	0x68a9b300
   334f8:	686ab189 	.word	0x686ab189
   334fc:	f00e0092 	.word	0xf00e0092
   33500:	e9d5fa58 	.word	0xe9d5fa58
   33504:	1e532001 	.word	0x1e532001
   33508:	2200b13a 	.word	0x2200b13a
   3350c:	1c593b01 	.word	0x1c593b01
   33510:	f1006002 	.word	0xf1006002
   33514:	d1f90004 	.word	0xd1f90004
   33518:	f00368a8 	.word	0xf00368a8
   3351c:	e9c5f931 	.word	0xe9c5f931
   33520:	ea4f8901 	.word	0xea4f8901
   33524:	f8d50288 	.word	0xf8d50288
   33528:	e7af9008 	.word	0xe7af9008
   3352c:	8004f8d0 	.word	0x8004f8d0
   33530:	e7894614 	.word	0xe7894614
   33534:	e7ca2400 	.word	0xe7ca2400
   33538:	000ff06f 	.word	0x000ff06f
   3353c:	4698e7c4 	.word	0x4698e7c4
   33540:	bf00e782 	.word	0xbf00e782

00033544 <symbol_000116e>:
   33544:	41f0e92d 	.word	0x41f0e92d
   33548:	46886844 	.word	0x46886844
   3354c:	d03e2c00 	.word	0xd03e2c00
   33550:	1e624615 	.word	0x1e624615
   33554:	68804607 	.word	0x68804607
   33558:	f850d040 	.word	0xf850d040
   3355c:	bb991022 	.word	0xbb991022
   33560:	4380f104 	.word	0x4380f104
   33564:	eb003b01 	.word	0xeb003b01
   33568:	e0020383 	.word	0xe0020383
   3356c:	1d04f853 	.word	0x1d04f853
   33570:	3a01bb51 	.word	0x3a01bb51
   33574:	2627d1fa 	.word	0x2627d1fa
   33578:	22006801 	.word	0x22006801
   3357c:	4300f04f 	.word	0x4300f04f
   33580:	3201e002 	.word	0x3201e002
   33584:	d0032a20 	.word	0xd0032a20
   33588:	ea4f420b 	.word	0xea4f420b
   3358c:	d0f80353 	.word	0xd0f80353
   33590:	08f61ab6 	.word	0x08f61ab6
   33594:	d32442b5 	.word	0xd32442b5
   33598:	2100462a 	.word	0x2100462a
   3359c:	f00e4640 	.word	0xf00e4640
   335a0:	b176fa28 	.word	0xb176fa28
   335a4:	44a82300 	.word	0x44a82300
   335a8:	f02368b9 	.word	0xf02368b9
   335ac:	588c0203 	.word	0x588c0203
   335b0:	f00500dd 	.word	0xf00500dd
   335b4:	33010518 	.word	0x33010518
   335b8:	42b340ec 	.word	0x42b340ec
   335bc:	4d01f808 	.word	0x4d01f808
   335c0:	2000d1f2 	.word	0x2000d1f2
   335c4:	81f0e8bd 	.word	0x81f0e8bd
   335c8:	36270156 	.word	0x36270156
   335cc:	4608e7d5 	.word	0x4608e7d5
   335d0:	f00e4621 	.word	0xf00e4621
   335d4:	4620fa0e 	.word	0x4620fa0e
   335d8:	81f0e8bd 	.word	0x81f0e8bd
   335dc:	26276801 	.word	0x26276801
   335e0:	f06fe7cb 	.word	0xf06fe7cb
   335e4:	e7ed0007 	.word	0xe7ed0007

000335e8 <symbol_0004fb7>:
   335e8:	41f0e92d 	.word	0x41f0e92d
   335ec:	46046843 	.word	0x46046843
   335f0:	f001094d 	.word	0xf001094d
   335f4:	b343061f 	.word	0xb343061f
   335f8:	f8d01e5a 	.word	0xf8d01e5a
   335fc:	f000e008 	.word	0xf000e008
   33600:	f85e8099 	.word	0xf85e8099
   33604:	f1bcc022 	.word	0xf1bcc022
   33608:	f0400f00 	.word	0xf0400f00
   3360c:	f103809c 	.word	0xf103809c
   33610:	38014080 	.word	0x38014080
   33614:	0080eb0e 	.word	0x0080eb0e
   33618:	f850e003 	.word	0xf850e003
   3361c:	2f007d04 	.word	0x2f007d04
   33620:	3a01d15e 	.word	0x3a01d15e
   33624:	f04fd1f9 	.word	0xf04fd1f9
   33628:	f8de0820 	.word	0xf8de0820
   3362c:	20007000 	.word	0x20007000
   33630:	4200f04f 	.word	0x4200f04f
   33634:	3001e002 	.word	0x3001e002
   33638:	d0052820 	.word	0xd0052820
   3363c:	ea4f423a 	.word	0xea4f423a
   33640:	d0f80252 	.word	0xd0f80252
   33644:	0c00eba8 	.word	0x0c00eba8
   33648:	ebb14461 	.word	0xebb14461
   3364c:	d90b1f43 	.word	0xd90b1f43
   33650:	021ff011 	.word	0x021ff011
   33654:	2201bf18 	.word	0x2201bf18
   33658:	7010f242 	.word	0x7010f242
   3365c:	1751eb02 	.word	0x1751eb02
   33660:	d86d4287 	.word	0xd86d4287
   33664:	d840429f 	.word	0xd840429f
   33668:	429db1f5 	.word	0x429db1f5
   3366c:	f06fd25d 	.word	0xf06fd25d
   33670:	1b7f4740 	.word	0x1b7f4740
   33674:	ebc719da 	.word	0xebc719da
   33678:	00927787 	.word	0x00927787
   3367c:	68a000bf 	.word	0x68a000bf
   33680:	19c13b01 	.word	0x19c13b01
   33684:	44115880 	.word	0x44115880
   33688:	f841429d 	.word	0xf841429d
   3368c:	f1a20c04 	.word	0xf1a20c04
   33690:	d1f40204 	.word	0xd1f40204
   33694:	f1032100 	.word	0xf1032100
   33698:	3b014380 	.word	0x3b014380
   3369c:	68a2009b 	.word	0x68a2009b
   336a0:	3b0450d1 	.word	0x3b0450d1
   336a4:	d1fa1d1a 	.word	0xd1fa1d1a
   336a8:	6863b1be 	.word	0x6863b1be
   336ac:	d214429d 	.word	0xd214429d
   336b0:	f1c62700 	.word	0xf1c62700
   336b4:	00ab0c20 	.word	0x00ab0c20
   336b8:	350168a0 	.word	0x350168a0
   336bc:	fa0158c1 	.word	0xfa0158c1
   336c0:	50c2f206 	.word	0x50c2f206
   336c4:	58c268a0 	.word	0x58c268a0
   336c8:	50c2433a 	.word	0x50c2433a
   336cc:	fa216862 	.word	0xfa216862
   336d0:	42aaf70c 	.word	0x42aaf70c
   336d4:	0304f103 	.word	0x0304f103
   336d8:	2000d8ee 	.word	0x2000d8ee
   336dc:	81f0e8bd 	.word	0x81f0e8bd
   336e0:	1c42ea4f 	.word	0x1c42ea4f
   336e4:	0820f10c 	.word	0x0820f10c
   336e8:	2104e7a1 	.word	0x2104e7a1
   336ec:	f0034638 	.word	0xf0034638
   336f0:	4680f833 	.word	0x4680f833
   336f4:	68a1b320 	.word	0x68a1b320
   336f8:	6862b189 	.word	0x6862b189
   336fc:	f00e0092 	.word	0xf00e0092
   33700:	e9d4f958 	.word	0xe9d4f958
   33704:	1e532001 	.word	0x1e532001
   33708:	2200b13a 	.word	0x2200b13a
   3370c:	1c593b01 	.word	0x1c593b01
   33710:	f1006002 	.word	0xf1006002
   33714:	d1f90004 	.word	0xd1f90004
   33718:	f00368a0 	.word	0xf00368a0
   3371c:	463bf831 	.word	0x463bf831
   33720:	7801e9c4 	.word	0x7801e9c4
   33724:	d0bf2d00 	.word	0xd0bf2d00
   33728:	2b00e79f 	.word	0x2b00e79f
   3372c:	2e00d1b2 	.word	0x2e00d1b2
   33730:	e7d2d1bb 	.word	0xe7d2d1bb
   33734:	7000f8de 	.word	0x7000f8de
   33738:	f04f4694 	.word	0xf04f4694
   3373c:	e7760820 	.word	0xe7760820
   33740:	000ff06f 	.word	0x000ff06f
   33744:	0152e7ca 	.word	0x0152e7ca
   33748:	f1024667 	.word	0xf1024667
   3374c:	46940820 	.word	0x46940820
   33750:	bf00e76d 	.word	0xbf00e76d

00033754 <symbol_0000994>:
   33754:	6844b5f8 	.word	0x6844b5f8
   33758:	42ac094d 	.word	0x42ac094d
   3375c:	f001d33a 	.word	0xf001d33a
   33760:	d032011f 	.word	0xd032011f
   33764:	2300b1b5 	.word	0x2300b1b5
   33768:	688400aa 	.word	0x688400aa
   3376c:	320458a6 	.word	0x320458a6
   33770:	6023f844 	.word	0x6023f844
   33774:	33016844 	.word	0x33016844
   33778:	429e1b66 	.word	0x429e1b66
   3377c:	429cd8f5 	.word	0x429cd8f5
   33780:	2500d908 	.word	0x2500d908
   33784:	6884009a 	.word	0x6884009a
   33788:	50a53301 	.word	0x50a53301
   3378c:	32046844 	.word	0x32046844
   33790:	d8f8429c 	.word	0xd8f8429c
   33794:	b1b4b1b9 	.word	0xb1b4b1b9
   33798:	f1042700 	.word	0xf1042700
   3379c:	3b014380 	.word	0x3b014380
   337a0:	f1c1009b 	.word	0xf1c1009b
   337a4:	68860c20 	.word	0x68860c20
   337a8:	58f53c01 	.word	0x58f53c01
   337ac:	f201fa25 	.word	0xf201fa25
   337b0:	688650f2 	.word	0x688650f2
   337b4:	ea4258f2 	.word	0xea4258f2
   337b8:	50f20207 	.word	0x50f20207
   337bc:	f70cfa05 	.word	0xf70cfa05
   337c0:	0304f1a3 	.word	0x0304f1a3
   337c4:	2000d1ef 	.word	0x2000d1ef
   337c8:	b919bdf8 	.word	0xb919bdf8
   337cc:	d0fa2c00 	.word	0xd0fa2c00
   337d0:	e7d6460b 	.word	0xe7d6460b
   337d4:	b1644605 	.word	0xb1644605
   337d8:	00a26886 	.word	0x00a26886
   337dc:	21004630 	.word	0x21004630
   337e0:	f907f00e 	.word	0xf907f00e
   337e4:	22012300 	.word	0x22012300
   337e8:	461868a9 	.word	0x461868a9
   337ec:	602a600b 	.word	0x602a600b
   337f0:	2104bdf8 	.word	0x2104bdf8
   337f4:	f0022001 	.word	0xf0022001
   337f8:	4606ffaf 	.word	0x4606ffaf
   337fc:	68a9b1b8 	.word	0x68a9b1b8
   33800:	686ab181 	.word	0x686ab181
   33804:	f00e0092 	.word	0xf00e0092
   33808:	e9d5f8d4 	.word	0xe9d5f8d4
   3380c:	1e532001 	.word	0x1e532001
   33810:	3b01b132 	.word	0x3b01b132
   33814:	60041c5a 	.word	0x60041c5a
   33818:	0004f100 	.word	0x0004f100
   3381c:	68a8d1f9 	.word	0x68a8d1f9
   33820:	ffaef002 	.word	0xffaef002
   33824:	22042301 	.word	0x22042301
   33828:	3601e9c5 	.word	0x3601e9c5
   3382c:	f06fe7d6 	.word	0xf06fe7d6
   33830:	bdf8000f 	.word	0xbdf8000f

00033834 <symbol_000242f>:
   33834:	6843b470 	.word	0x6843b470
   33838:	b173684a 	.word	0xb173684a
   3383c:	f1036884 	.word	0xf1036884
   33840:	3d014580 	.word	0x3d014580
   33844:	6025f854 	.word	0x6025f854
   33848:	0485eb04 	.word	0x0485eb04
   3384c:	e01ab11e 	.word	0xe01ab11e
   33850:	5d04f854 	.word	0x5d04f854
   33854:	3b01b9bd 	.word	0x3b01b9bd
   33858:	b18ad1fa 	.word	0xb18ad1fa
   3385c:	4480f102 	.word	0x4480f102
   33860:	3c01688e 	.word	0x3c01688e
   33864:	5024f856 	.word	0x5024f856
   33868:	eb06b9cd 	.word	0xeb06b9cd
   3386c:	e0020484 	.word	0xe0020484
   33870:	5d04f854 	.word	0x5d04f854
   33874:	3a01b98d 	.word	0x3a01b98d
   33878:	2b00d1fa 	.word	0x2b00d1fa
   3387c:	6802d037 	.word	0x6802d037
   33880:	bc704610 	.word	0xbc704610
   33884:	2a004770 	.word	0x2a004770
   33888:	f102d0f9 	.word	0xf102d0f9
   3388c:	688e4480 	.word	0x688e4480
   33890:	f8563c01 	.word	0xf8563c01
   33894:	2d005024 	.word	0x2d005024
   33898:	4293d0e7 	.word	0x4293d0e7
   3389c:	4293d8ef 	.word	0x4293d8ef
   338a0:	d2036809 	.word	0xd2036809
   338a4:	424abc70 	.word	0x424abc70
   338a8:	47704610 	.word	0x47704610
   338ac:	2a006802 	.word	0x2a006802
   338b0:	2900dd01 	.word	0x2900dd01
   338b4:	2900db24 	.word	0x2900db24
   338b8:	2a00dd01 	.word	0x2a00dd01
   338bc:	b1b3db1d 	.word	0xb1b3db1d
   338c0:	f1036884 	.word	0xf1036884
   338c4:	39014180 	.word	0x39014180
   338c8:	5021f854 	.word	0x5021f854
   338cc:	0021f856 	.word	0x0021f856
   338d0:	42850089 	.word	0x42850089
   338d4:	4431440c 	.word	0x4431440c
   338d8:	d30cd8d2 	.word	0xd30cd8d2
   338dc:	d0063b01 	.word	0xd0063b01
   338e0:	5d04f854 	.word	0x5d04f854
   338e4:	0d04f851 	.word	0x0d04f851
   338e8:	d9f64285 	.word	0xd9f64285
   338ec:	461ae7c8 	.word	0x461ae7c8
   338f0:	4610bc70 	.word	0x4610bc70
   338f4:	42524770 	.word	0x42524770
   338f8:	f04fe7c2 	.word	0xf04fe7c2
   338fc:	e7bf32ff 	.word	0xe7bf32ff
   33900:	e7bd2201 	.word	0xe7bd2201

00033904 <symbol_000ccad>:
   33904:	2900b4f0 	.word	0x2900b4f0
   33908:	68434605 	.word	0x68434605
   3390c:	2b00db32 	.word	0x2b00db32
   33910:	6886d042 	.word	0x6886d042
   33914:	4280f103 	.word	0x4280f103
   33918:	f8563a01 	.word	0xf8563a01
   3391c:	eb060022 	.word	0xeb060022
   33920:	b9680282 	.word	0xb9680282
   33924:	30fff04f 	.word	0x30fff04f
   33928:	e0022701 	.word	0xe0022701
   3392c:	4d04f852 	.word	0x4d04f852
   33930:	3b01b93c 	.word	0x3b01b93c
   33934:	2900d1fa 	.word	0x2900d1fa
   33938:	2000bf08 	.word	0x2000bf08
   3393c:	4770bcf0 	.word	0x4770bcf0
   33940:	b1a12701 	.word	0xb1a12701
   33944:	d8122b01 	.word	0xd8122b01
   33948:	28006828 	.word	0x28006828
   3394c:	1c7bdd01 	.word	0x1c7bdd01
   33950:	2f01d01e 	.word	0x2f01d01e
   33954:	2800d101 	.word	0x2800d101
   33958:	2900db24 	.word	0x2900db24
   3395c:	bfb86833 	.word	0xbfb86833
   33960:	42994249 	.word	0x42994249
   33964:	d815d3ea 	.word	0xd815d3ea
   33968:	2000bcf0 	.word	0x2000bcf0
   3396c:	68284770 	.word	0x68284770
   33970:	4770bcf0 	.word	0x4770bcf0
   33974:	6886b163 	.word	0x6886b163
   33978:	4280f103 	.word	0x4280f103
   3397c:	f8563a01 	.word	0xf8563a01
   33980:	eb060022 	.word	0xeb060022
   33984:	b9500282 	.word	0xb9500282
   33988:	f04f2001 	.word	0xf04f2001
   3398c:	e7d037ff 	.word	0xe7d037ff
   33990:	e7d32001 	.word	0xe7d32001
   33994:	e7d14240 	.word	0xe7d14240
   33998:	30fff04f 	.word	0x30fff04f
   3399c:	f04fe7cb 	.word	0xf04fe7cb
   339a0:	e7cf37ff 	.word	0xe7cf37ff
   339a4:	30fff04f 	.word	0x30fff04f
   339a8:	bf00e7c8 	.word	0xbf00e7c8

000339ac <symbol_000c914>:
   339ac:	e92d4290 	.word	0xe92d4290
   339b0:	460747f0 	.word	0x460747f0
   339b4:	d006460c 	.word	0xd006460c
   339b8:	46154288 	.word	0x46154288
   339bc:	f7ffd002 	.word	0xf7ffd002
   339c0:	b9a0fafb 	.word	0xb9a0fafb
   339c4:	2301462c 	.word	0x2301462c
   339c8:	6865603b 	.word	0x6865603b
   339cc:	68a3b175 	.word	0x68a3b175
   339d0:	4280f105 	.word	0x4280f105
   339d4:	f8533a01 	.word	0xf8533a01
   339d8:	eb031022 	.word	0xeb031022
   339dc:	b1190282 	.word	0xb1190282
   339e0:	f852e007 	.word	0xf852e007
   339e4:	b9211d04 	.word	0xb9211d04
   339e8:	d1fa3d01 	.word	0xd1fa3d01
   339ec:	e8bd2000 	.word	0xe8bd2000
   339f0:	f24287f0 	.word	0xf24287f0
   339f4:	42957210 	.word	0x42957210
   339f8:	687ad875 	.word	0x687ad875
   339fc:	d27642aa 	.word	0xd27642aa
   33a00:	46282104 	.word	0x46282104
   33a04:	fea8f002 	.word	0xfea8f002
   33a08:	28004606 	.word	0x28004606
   33a0c:	68b9d06b 	.word	0x68b9d06b
   33a10:	687ab189 	.word	0x687ab189
   33a14:	f00d0092 	.word	0xf00d0092
   33a18:	e9d7ffcc 	.word	0xe9d7ffcc
   33a1c:	1e532001 	.word	0x1e532001
   33a20:	2200b13a 	.word	0x2200b13a
   33a24:	1c593b01 	.word	0x1c593b01
   33a28:	f1006002 	.word	0xf1006002
   33a2c:	d1f90004 	.word	0xd1f90004
   33a30:	f00268b8 	.word	0xf00268b8
   33a34:	e9c7fea5 	.word	0xe9c7fea5
   33a38:	68a35601 	.word	0x68a35601
   33a3c:	ea4f2400 	.word	0xea4f2400
   33a40:	f1a30a85 	.word	0xf1a30a85
   33a44:	eb060c04 	.word	0xeb060c04
   33a48:	2200000a 	.word	0x2200000a
   33a4c:	f10c6833 	.word	0xf10c6833
   33a50:	f8dc0c04 	.word	0xf8dc0c04
   33a54:	191b1000 	.word	0x191b1000
   33a58:	bf284614 	.word	0xbf284614
   33a5c:	185b2201 	.word	0x185b2201
   33a60:	2401bf28 	.word	0x2401bf28
   33a64:	3b04f846 	.word	0x3b04f846
   33a68:	44144286 	.word	0x44144286
   33a6c:	2c00d1ed 	.word	0x2c00d1ed
   33a70:	f242d0bc 	.word	0xf242d0bc
   33a74:	f04f7810 	.word	0xf04f7810
   33a78:	e00f0900 	.word	0xe00f0900
   33a7c:	eb0568bd 	.word	0xeb0568bd
   33a80:	6803000a 	.word	0x6803000a
   33a84:	191c2200 	.word	0x191c2200
   33a88:	2201bf28 	.word	0x2201bf28
   33a8c:	4b04f840 	.word	0x4b04f840
   33a90:	0a04f10a 	.word	0x0a04f10a
   33a94:	24014635 	.word	0x24014635
   33a98:	d0a72a00 	.word	0xd0a72a00
   33a9c:	1c6e687b 	.word	0x1c6e687b
   33aa0:	d8ee42ab 	.word	0xd8ee42ab
   33aa4:	d81e4546 	.word	0xd81e4546
   33aa8:	d2e742b3 	.word	0xd2e742b3
   33aac:	46302104 	.word	0x46302104
   33ab0:	fe52f002 	.word	0xfe52f002
   33ab4:	b1b04605 	.word	0xb1b04605
   33ab8:	b18968b9 	.word	0xb18968b9
   33abc:	0092687a 	.word	0x0092687a
   33ac0:	ff77f00d 	.word	0xff77f00d
   33ac4:	2001e9d7 	.word	0x2001e9d7
   33ac8:	b13a1e53 	.word	0xb13a1e53
   33acc:	1c5a3b01 	.word	0x1c5a3b01
   33ad0:	9000f8c0 	.word	0x9000f8c0
   33ad4:	0004f100 	.word	0x0004f100
   33ad8:	68b8d1f8 	.word	0x68b8d1f8
   33adc:	fe50f002 	.word	0xfe50f002
   33ae0:	6501e9c7 	.word	0x6501e9c7
   33ae4:	f06fe7cb 	.word	0xf06fe7cb
   33ae8:	e8bd000f 	.word	0xe8bd000f
   33aec:	68be87f0 	.word	0x68be87f0
   33af0:	bf00e7a4 	.word	0xbf00e7a4

00033af4 <symbol_0004fdf>:
   33af4:	684bb5f0 	.word	0x684bb5f0
   33af8:	b085460d 	.word	0xb085460d
   33afc:	46064614 	.word	0x46064614
   33b00:	b17b6851 	.word	0xb17b6851
   33b04:	f10368a8 	.word	0xf10368a8
   33b08:	3a014280 	.word	0x3a014280
   33b0c:	7022f850 	.word	0x7022f850
   33b10:	0082eb00 	.word	0x0082eb00
   33b14:	e04fb127 	.word	0xe04fb127
   33b18:	2d04f850 	.word	0x2d04f850
   33b1c:	d14b2a00 	.word	0xd14b2a00
   33b20:	d1f93b01 	.word	0xd1f93b01
   33b24:	f101b189 	.word	0xf101b189
   33b28:	68a74080 	.word	0x68a74080
   33b2c:	f8573801 	.word	0xf8573801
   33b30:	2a002020 	.word	0x2a002020
   33b34:	8099f040 	.word	0x8099f040
   33b38:	0080eb07 	.word	0x0080eb07
   33b3c:	f850e003 	.word	0xf850e003
   33b40:	2a002d04 	.word	0x2a002d04
   33b44:	3901d142 	.word	0x3901d142
   33b48:	2300d1f9 	.word	0x2300d1f9
   33b4c:	42b42201 	.word	0x42b42201
   33b50:	2301e9cd 	.word	0x2301e9cd
   33b54:	d07f9303 	.word	0xd07f9303
   33b58:	d00542b5 	.word	0xd00542b5
   33b5c:	46304629 	.word	0x46304629
   33b60:	fa2af7ff 	.word	0xfa2af7ff
   33b64:	b9a84607 	.word	0xb9a84607
   33b68:	60332301 	.word	0x60332301
   33b6c:	b1806860 	.word	0xb1806860
   33b70:	c008f8d4 	.word	0xc008f8d4
   33b74:	4380f100 	.word	0x4380f100
   33b78:	f85c3b01 	.word	0xf85c3b01
   33b7c:	eb0c2023 	.word	0xeb0c2023
   33b80:	b1220383 	.word	0xb1220383
   33b84:	f853e042 	.word	0xf853e042
   33b88:	2a002d04 	.word	0x2a002d04
   33b8c:	3801d13e 	.word	0x3801d13e
   33b90:	2700d1f9 	.word	0x2700d1f9
   33b94:	b1609803 	.word	0xb1609803
   33b98:	1e539a02 	.word	0x1e539a02
   33b9c:	2200b13a 	.word	0x2200b13a
   33ba0:	1c593b01 	.word	0x1c593b01
   33ba4:	f1006002 	.word	0xf1006002
   33ba8:	d1f90004 	.word	0xd1f90004
   33bac:	f0029803 	.word	0xf0029803
   33bb0:	4638fde7 	.word	0x4638fde7
   33bb4:	bdf0b005 	.word	0xbdf0b005
   33bb8:	d0c62900 	.word	0xd0c62900
   33bbc:	4080f101 	.word	0x4080f101
   33bc0:	380168a7 	.word	0x380168a7
   33bc4:	2020f857 	.word	0x2020f857
   33bc8:	d0b52a00 	.word	0xd0b52a00
   33bcc:	d8bc428b 	.word	0xd8bc428b
   33bd0:	2b00d34b 	.word	0x2b00d34b
   33bd4:	68a8d0b9 	.word	0x68a8d0b9
   33bd8:	4180f103 	.word	0x4180f103
   33bdc:	f8503901 	.word	0xf8503901
   33be0:	f857c021 	.word	0xf857c021
   33be4:	0089e021 	.word	0x0089e021
   33be8:	440845e6 	.word	0x440845e6
   33bec:	0201eb07 	.word	0x0201eb07
   33bf0:	d83ad3ab 	.word	0xd83ad3ab
   33bf4:	e0064601 	.word	0xe0064601
   33bf8:	7d04f851 	.word	0x7d04f851
   33bfc:	0d04f852 	.word	0x0d04f852
   33c00:	d8a24287 	.word	0xd8a24287
   33c04:	3b01d331 	.word	0x3b01d331
   33c08:	e79ed1f6 	.word	0xe79ed1f6
   33c0c:	462b2500 	.word	0x462b2500
   33c10:	f85168b1 	.word	0xf85168b1
   33c14:	35016b04 	.word	0x35016b04
   33c18:	f8411af2 	.word	0xf8411af2
   33c1c:	f85c2c04 	.word	0xf85c2c04
   33c20:	460c7b04 	.word	0x460c7b04
   33c24:	bf2c42ba 	.word	0xbf2c42ba
   33c28:	0e00f04f 	.word	0x0e00f04f
   33c2c:	0e01f04f 	.word	0x0e01f04f
   33c30:	429e1bd2 	.word	0x429e1bd2
   33c34:	4673bf2c 	.word	0x4673bf2c
   33c38:	0301f10e 	.word	0x0301f10e
   33c3c:	f8414285 	.word	0xf8414285
   33c40:	d3e62c04 	.word	0xd3e62c04
   33c44:	e7a4b90b 	.word	0xe7a4b90b
   33c48:	68222301 	.word	0x68222301
   33c4c:	429a1ad1 	.word	0x429a1ad1
   33c50:	1b04f844 	.word	0x1b04f844
   33c54:	e79cd3f8 	.word	0xe79cd3f8
   33c58:	a8014621 	.word	0xa8014621
   33c5c:	f9acf7ff 	.word	0xf9acf7ff
   33c60:	28004607 	.word	0x28004607
   33c64:	ac01d196 	.word	0xac01d196
   33c68:	f06fe776 	.word	0xf06fe776
   33c6c:	46380709 	.word	0x46380709
   33c70:	bdf0b005 	.word	0xbdf0b005

00033c74 <symbol_0005cc7>:
   33c74:	41f0e92d 	.word	0x41f0e92d
   33c78:	6813680c 	.word	0x6813680c
   33c7c:	fb034605 	.word	0xfb034605
   33c80:	2b00f304 	.word	0x2b00f304
   33c84:	684bda39 	.word	0x684bda39
   33c88:	460e4617 	.word	0x460e4617
   33c8c:	b1836852 	.word	0xb1836852
   33c90:	f1036889 	.word	0xf1036889
   33c94:	38014080 	.word	0x38014080
   33c98:	c020f851 	.word	0xc020f851
   33c9c:	0180eb01 	.word	0x0180eb01
   33ca0:	0f00f1bc 	.word	0x0f00f1bc
   33ca4:	e02ed003 	.word	0xe02ed003
   33ca8:	0d04f851 	.word	0x0d04f851
   33cac:	3b01bb58 	.word	0x3b01bb58
   33cb0:	b17ad1fa 	.word	0xb17ad1fa
   33cb4:	4180f102 	.word	0x4180f102
   33cb8:	c008f8d7 	.word	0xc008f8d7
   33cbc:	f85c3901 	.word	0xf85c3901
   33cc0:	b9780021 	.word	0xb9780021
   33cc4:	0181eb0c 	.word	0x0181eb0c
   33cc8:	f851e002 	.word	0xf851e002
   33ccc:	bb280d04 	.word	0xbb280d04
   33cd0:	d1fa3a01 	.word	0xd1fa3a01
   33cd4:	4631463a 	.word	0x4631463a
   33cd8:	f7ff4628 	.word	0xf7ff4628
   33cdc:	b148ff0b 	.word	0xb148ff0b
   33ce0:	81f0e8bd 	.word	0x81f0e8bd
   33ce4:	46394632 	.word	0x46394632
   33ce8:	f7ff4628 	.word	0xf7ff4628
   33cec:	2800ff03 	.word	0x2800ff03
   33cf0:	4264d1f6 	.word	0x4264d1f6
   33cf4:	e8bd602c 	.word	0xe8bd602c
   33cf8:	f7ff81f0 	.word	0xf7ff81f0
   33cfc:	2800fe57 	.word	0x2800fe57
   33d00:	602cd1ee 	.word	0x602cd1ee
   33d04:	2a00e7f7 	.word	0x2a00e7f7
   33d08:	f102d0e4 	.word	0xf102d0e4
   33d0c:	f8d74180 	.word	0xf8d74180
   33d10:	3901c008 	.word	0x3901c008
   33d14:	0021f85c 	.word	0x0021f85c
   33d18:	d0d32800 	.word	0xd0d32800
   33d1c:	d8d94293 	.word	0xd8d94293
   33d20:	2b00d3e0 	.word	0x2b00d3e0
   33d24:	68b0d0d6 	.word	0x68b0d0d6
   33d28:	4180f103 	.word	0x4180f103
   33d2c:	f8503901 	.word	0xf8503901
   33d30:	f85c8021 	.word	0xf85c8021
   33d34:	0089e021 	.word	0x0089e021
   33d38:	440845f0 	.word	0x440845f0
   33d3c:	0201eb0c 	.word	0x0201eb0c
   33d40:	d3cfd8c8 	.word	0xd3cfd8c8
   33d44:	e0064601 	.word	0xe0064601
   33d48:	cd04f851 	.word	0xcd04f851
   33d4c:	0d04f852 	.word	0x0d04f852
   33d50:	d8bf4584 	.word	0xd8bf4584
   33d54:	3b01d3c6 	.word	0x3b01d3c6
   33d58:	e7bbd1f6 	.word	0xe7bbd1f6

00033d5c <symbol_000d773>:
   33d5c:	41f0e92d 	.word	0x41f0e92d
   33d60:	6813680c 	.word	0x6813680c
   33d64:	fb034605 	.word	0xfb034605
   33d68:	2b00f304 	.word	0x2b00f304
   33d6c:	684bdd64 	.word	0x684bdd64
   33d70:	460e4617 	.word	0x460e4617
   33d74:	b1836852 	.word	0xb1836852
   33d78:	f1036889 	.word	0xf1036889
   33d7c:	38014080 	.word	0x38014080
   33d80:	c020f851 	.word	0xc020f851
   33d84:	0180eb01 	.word	0x0180eb01
   33d88:	0f00f1bc 	.word	0x0f00f1bc
   33d8c:	e01fd003 	.word	0xe01fd003
   33d90:	0d04f851 	.word	0x0d04f851
   33d94:	3b01b9e0 	.word	0x3b01b9e0
   33d98:	b182d1fa 	.word	0xb182d1fa
   33d9c:	4180f102 	.word	0x4180f102
   33da0:	c008f8d7 	.word	0xc008f8d7
   33da4:	f85c3901 	.word	0xf85c3901
   33da8:	28000021 	.word	0x28000021
   33dac:	eb0cd13b 	.word	0xeb0cd13b
   33db0:	e0020181 	.word	0xe0020181
   33db4:	0d04f851 	.word	0x0d04f851
   33db8:	3a01b9a8 	.word	0x3a01b9a8
   33dbc:	463ad1fa 	.word	0x463ad1fa
   33dc0:	46284631 	.word	0x46284631
   33dc4:	fe96f7ff 	.word	0xfe96f7ff
   33dc8:	602cb900 	.word	0x602cb900
   33dcc:	81f0e8bd 	.word	0x81f0e8bd
   33dd0:	d0f42a00 	.word	0xd0f42a00
   33dd4:	4180f102 	.word	0x4180f102
   33dd8:	c008f8d7 	.word	0xc008f8d7
   33ddc:	f85c3901 	.word	0xf85c3901
   33de0:	28000021 	.word	0x28000021
   33de4:	4293d0e3 	.word	0x4293d0e3
   33de8:	d31cd8e9 	.word	0xd31cd8e9
   33dec:	d0e62b00 	.word	0xd0e62b00
   33df0:	f10368b0 	.word	0xf10368b0
   33df4:	39014180 	.word	0x39014180
   33df8:	8021f850 	.word	0x8021f850
   33dfc:	e021f85c 	.word	0xe021f85c
   33e00:	45f00089 	.word	0x45f00089
   33e04:	eb0c4408 	.word	0xeb0c4408
   33e08:	d8d80201 	.word	0xd8d80201
   33e0c:	4601d30b 	.word	0x4601d30b
   33e10:	f851e006 	.word	0xf851e006
   33e14:	f852cd04 	.word	0xf852cd04
   33e18:	45840d04 	.word	0x45840d04
   33e1c:	d302d8cf 	.word	0xd302d8cf
   33e20:	d1f63b01 	.word	0xd1f63b01
   33e24:	4632e7cb 	.word	0x4632e7cb
   33e28:	46284639 	.word	0x46284639
   33e2c:	fe62f7ff 	.word	0xfe62f7ff
   33e30:	d1cb2800 	.word	0xd1cb2800
   33e34:	e7c84264 	.word	0xe7c84264
   33e38:	fdb8f7ff 	.word	0xfdb8f7ff
   33e3c:	d0c42800 	.word	0xd0c42800
   33e40:	81f0e8bd 	.word	0x81f0e8bd

00033e44 <symbol_000f268>:
   33e44:	bfac2a00 	.word	0xbfac2a00
   33e48:	f04f2301 	.word	0xf04f2301
   33e4c:	b5f033ff 	.word	0xb5f033ff
   33e50:	680d2601 	.word	0x680d2601
   33e54:	7ce2ea82 	.word	0x7ce2ea82
   33e58:	f703fb05 	.word	0xf703fb05
   33e5c:	ebacb085 	.word	0xebacb085
   33e60:	2f007ce2 	.word	0x2f007ce2
   33e64:	e9cd9602 	.word	0xe9cd9602
   33e68:	f8cdc300 	.word	0xf8cdc300
   33e6c:	4606d00c 	.word	0x4606d00c
   33e70:	684bdd2c 	.word	0x684bdd2c
   33e74:	b173460c 	.word	0xb173460c
   33e78:	f10368a7 	.word	0xf10368a7
   33e7c:	39014180 	.word	0x39014180
   33e80:	0021f857 	.word	0x0021f857
   33e84:	0181eb07 	.word	0x0181eb07
   33e88:	e00eb118 	.word	0xe00eb118
   33e8c:	0d04f851 	.word	0x0d04f851
   33e90:	3b01b958 	.word	0x3b01b958
   33e94:	b982d1fa 	.word	0xb982d1fa
   33e98:	aa014621 	.word	0xaa014621
   33e9c:	f7ff4630 	.word	0xf7ff4630
   33ea0:	b900f8f9 	.word	0xb900f8f9
   33ea4:	b0056035 	.word	0xb0056035
   33ea8:	2a00bdf0 	.word	0x2a00bdf0
   33eac:	2b01d0f4 	.word	0x2b01d0f4
   33eb0:	683bd8f2 	.word	0x683bd8f2
   33eb4:	d3ef459c 	.word	0xd3ef459c
   33eb8:	4622d9ee 	.word	0x4622d9ee
   33ebc:	4630a901 	.word	0x4630a901
   33ec0:	fe18f7ff 	.word	0xfe18f7ff
   33ec4:	d1ee2800 	.word	0xd1ee2800
   33ec8:	e7eb426d 	.word	0xe7eb426d
   33ecc:	f7ffaa01 	.word	0xf7ffaa01
   33ed0:	2800fd6d 	.word	0x2800fd6d
   33ed4:	b005d0e6 	.word	0xb005d0e6
   33ed8:	bf00bdf0 	.word	0xbf00bdf0

00033edc <symbol_000b923>:
   33edc:	47f0e92d 	.word	0x47f0e92d
   33ee0:	23004606 	.word	0x23004606
   33ee4:	b0862001 	.word	0xb0862001
   33ee8:	4690428e 	.word	0x4690428e
   33eec:	90039000 	.word	0x90039000
   33ef0:	3301e9cd 	.word	0x3301e9cd
   33ef4:	3304e9cd 	.word	0x3304e9cd
   33ef8:	80d1f000 	.word	0x80d1f000
   33efc:	4546460f 	.word	0x4546460f
   33f00:	80d5f000 	.word	0x80d5f000
   33f04:	b185687d 	.word	0xb185687d
   33f08:	f10568bb 	.word	0xf10568bb
   33f0c:	3a014280 	.word	0x3a014280
   33f10:	1022f853 	.word	0x1022f853
   33f14:	0382eb03 	.word	0x0382eb03
   33f18:	e0bab129 	.word	0xe0bab129
   33f1c:	2d04f853 	.word	0x2d04f853
   33f20:	f0402a00 	.word	0xf0402a00
   33f24:	3d0180b6 	.word	0x3d0180b6
   33f28:	f8d8d1f8 	.word	0xf8d8d1f8
   33f2c:	25004004 	.word	0x25004004
   33f30:	d03d2c00 	.word	0xd03d2c00
   33f34:	3008f8d8 	.word	0x3008f8d8
   33f38:	4280f104 	.word	0x4280f104
   33f3c:	f8533a01 	.word	0xf8533a01
   33f40:	eb031022 	.word	0xeb031022
   33f44:	b1190382 	.word	0xb1190382
   33f48:	f853e004 	.word	0xf853e004
   33f4c:	b90a2d04 	.word	0xb90a2d04
   33f50:	d1fa3c01 	.word	0xd1fa3c01
   33f54:	7310f242 	.word	0x7310f242
   33f58:	0905eb04 	.word	0x0905eb04
   33f5c:	f2004599 	.word	0xf2004599
   33f60:	f8d680b0 	.word	0xf8d680b0
   33f64:	45d1a004 	.word	0x45d1a004
   33f68:	2104d925 	.word	0x2104d925
   33f6c:	f0024648 	.word	0xf0024648
   33f70:	4682fbf3 	.word	0x4682fbf3
   33f74:	f0002800 	.word	0xf0002800
   33f78:	68b180a4 	.word	0x68b180a4
   33f7c:	6872b189 	.word	0x6872b189
   33f80:	f00d0092 	.word	0xf00d0092
   33f84:	e9d6fd16 	.word	0xe9d6fd16
   33f88:	1e532001 	.word	0x1e532001
   33f8c:	2200b13a 	.word	0x2200b13a
   33f90:	1c593b01 	.word	0x1c593b01
   33f94:	f1006002 	.word	0xf1006002
   33f98:	d1f90004 	.word	0xd1f90004
   33f9c:	f00268b0 	.word	0xf00268b0
   33fa0:	e9c6fbef 	.word	0xe9c6fbef
   33fa4:	ea4f9a01 	.word	0xea4f9a01
   33fa8:	f8d60289 	.word	0xf8d60289
   33fac:	e0259008 	.word	0xe0259008
   33fb0:	f8d64625 	.word	0xf8d64625
   33fb4:	f1baa004 	.word	0xf1baa004
   33fb8:	f0400f00 	.word	0xf0400f00
   33fbc:	21048085 	.word	0x21048085
   33fc0:	f0022001 	.word	0xf0022001
   33fc4:	4681fbc9 	.word	0x4681fbc9
   33fc8:	d07a2800 	.word	0xd07a2800
   33fcc:	b18968b1 	.word	0xb18968b1
   33fd0:	00926872 	.word	0x00926872
   33fd4:	fcedf00d 	.word	0xfcedf00d
   33fd8:	2001e9d6 	.word	0x2001e9d6
   33fdc:	b13a1e53 	.word	0xb13a1e53
   33fe0:	3b014652 	.word	0x3b014652
   33fe4:	60021c59 	.word	0x60021c59
   33fe8:	0004f100 	.word	0x0004f100
   33fec:	68b0d1f9 	.word	0x68b0d1f9
   33ff0:	fbc6f002 	.word	0xfbc6f002
   33ff4:	22042301 	.word	0x22042301
   33ff8:	3901e9c6 	.word	0x3901e9c6
   33ffc:	46482100 	.word	0x46482100
   34000:	fcf7f00d 	.word	0xfcf7f00d
   34004:	23012100 	.word	0x23012100
   34008:	601168b2 	.word	0x601168b2
   3400c:	b19c6033 	.word	0xb19c6033
   34010:	4980f104 	.word	0x4980f104
   34014:	39fff109 	.word	0x39fff109
   34018:	0989ea4f 	.word	0x0989ea4f
   3401c:	3008f8d8 	.word	0x3008f8d8
   34020:	f85368b2 	.word	0xf85368b2
   34024:	444a3009 	.word	0x444a3009
   34028:	462868b9 	.word	0x462868b9
   3402c:	fc14f7fe 	.word	0xfc14f7fe
   34030:	f1a93c01 	.word	0xf1a93c01
   34034:	d1f10904 	.word	0xd1f10904
   34038:	683a2400 	.word	0x683a2400
   3403c:	3000f8d8 	.word	0x3000f8d8
   34040:	f302fb03 	.word	0xf302fb03
   34044:	98056033 	.word	0x98056033
   34048:	9a04b160 	.word	0x9a04b160
   3404c:	b13a1e53 	.word	0xb13a1e53
   34050:	3b012200 	.word	0x3b012200
   34054:	60021c5d 	.word	0x60021c5d
   34058:	0004f100 	.word	0x0004f100
   3405c:	9805d1f9 	.word	0x9805d1f9
   34060:	fb8ef002 	.word	0xfb8ef002
   34064:	23012200 	.word	0x23012200
   34068:	e9cd9802 	.word	0xe9cd9802
   3406c:	92053203 	.word	0x92053203
   34070:	9901b158 	.word	0x9901b158
   34074:	b1311e4b 	.word	0xb1311e4b
   34078:	1c593b01 	.word	0x1c593b01
   3407c:	f1006002 	.word	0xf1006002
   34080:	d1f90004 	.word	0xd1f90004
   34084:	f0029802 	.word	0xf0029802
   34088:	4620fb7b 	.word	0x4620fb7b
   3408c:	e8bdb006 	.word	0xe8bdb006
   34090:	f8d887f0 	.word	0xf8d887f0
   34094:	2c004004 	.word	0x2c004004
   34098:	af4cf47f 	.word	0xaf4cf47f
   3409c:	4668e75a 	.word	0x4668e75a
   340a0:	ff8af7fe 	.word	0xff8af7fe
   340a4:	28004604 	.word	0x28004604
   340a8:	466fd1cd 	.word	0x466fd1cd
   340ac:	a803e727 	.word	0xa803e727
   340b0:	f7fe4631 	.word	0xf7fe4631
   340b4:	4604ff81 	.word	0x4604ff81
   340b8:	d1c42800 	.word	0xd1c42800
   340bc:	080cf10d 	.word	0x080cf10d
   340c0:	f06fe720 	.word	0xf06fe720
   340c4:	e7be040f 	.word	0xe7be040f
   340c8:	e76c46d1 	.word	0xe76c46d1

000340cc <symbol_0008c0f>:
   340cc:	b5002301 	.word	0xb5002301
   340d0:	9200b085 	.word	0x9200b085
   340d4:	e9cdaa01 	.word	0xe9cdaa01
   340d8:	f8cd3301 	.word	0xf8cd3301
   340dc:	f7ffd00c 	.word	0xf7ffd00c
   340e0:	b005fefd 	.word	0xb005fefd
   340e4:	fb04f85d 	.word	0xfb04f85d

000340e8 <symbol_0007bb0>:
   340e8:	4ff0e92d 	.word	0x4ff0e92d
   340ec:	b0a3685e 	.word	0xb0a3685e
   340f0:	f8d3b196 	.word	0xf8d3b196
   340f4:	f1068008 	.word	0xf1068008
   340f8:	f1094980 	.word	0xf1094980
   340fc:	f85839ff 	.word	0xf85839ff
   34100:	eb085029 	.word	0xeb085029
   34104:	b96d0e89 	.word	0xb96d0e89
   34108:	463746f4 	.word	0x463746f4
   3410c:	f85ce002 	.word	0xf85ce002
   34110:	b93c4d04 	.word	0xb93c4d04
   34114:	d1fa3f01 	.word	0xd1fa3f01
   34118:	060bf06f 	.word	0x060bf06f
   3411c:	b0234630 	.word	0xb0234630
   34120:	8ff0e8bd 	.word	0x8ff0e8bd
   34124:	2d00681d 	.word	0x2d00681d
   34128:	4614d0f6 	.word	0x4614d0f6
   3412c:	2200468a 	.word	0x2200468a
   34130:	469b2101 	.word	0x469b2101
   34134:	46056863 	.word	0x46056863
   34138:	91139110 	.word	0x91139110
   3413c:	91199116 	.word	0x91199116
   34140:	e9cd911c 	.word	0xe9cd911c
   34144:	e9cd2211 	.word	0xe9cd2211
   34148:	e9cd2214 	.word	0xe9cd2214
   3414c:	e9cd2217 	.word	0xe9cd2217
   34150:	e9cd221a 	.word	0xe9cd221a
   34154:	2b00221d 	.word	0x2b00221d
   34158:	821af000 	.word	0x821af000
   3415c:	f10368a2 	.word	0xf10368a2
   34160:	39014180 	.word	0x39014180
   34164:	0021f852 	.word	0x0021f852
   34168:	0281eb02 	.word	0x0281eb02
   3416c:	e07bb120 	.word	0xe07bb120
   34170:	1d04f852 	.word	0x1d04f852
   34174:	d1772900 	.word	0xd1772900
   34178:	d1f93b01 	.word	0xd1f93b01
   3417c:	2029f858 	.word	0x2029f858
   34180:	d1772a00 	.word	0xd1772a00
   34184:	e0034672 	.word	0xe0034672
   34188:	1d04f852 	.word	0x1d04f852
   3418c:	d16f2900 	.word	0xd16f2900
   34190:	d1f93e01 	.word	0xd1f93e01
   34194:	4621a810 	.word	0x4621a810
   34198:	ff0ef7fe 	.word	0xff0ef7fe
   3419c:	28004606 	.word	0x28004606
   341a0:	8092f000 	.word	0x8092f000
   341a4:	98122700 	.word	0x98122700
   341a8:	9a11b160 	.word	0x9a11b160
   341ac:	b13a1e53 	.word	0xb13a1e53
   341b0:	3b012200 	.word	0x3b012200
   341b4:	60021c5c 	.word	0x60021c5c
   341b8:	0004f100 	.word	0x0004f100
   341bc:	9812d1f9 	.word	0x9812d1f9
   341c0:	fadef002 	.word	0xfadef002
   341c4:	23012200 	.word	0x23012200
   341c8:	e9cd9815 	.word	0xe9cd9815
   341cc:	92123210 	.word	0x92123210
   341d0:	9914b158 	.word	0x9914b158
   341d4:	b1311e4b 	.word	0xb1311e4b
   341d8:	1c593b01 	.word	0x1c593b01
   341dc:	f1006002 	.word	0xf1006002
   341e0:	d1f90004 	.word	0xd1f90004
   341e4:	f0029815 	.word	0xf0029815
   341e8:	2200facb 	.word	0x2200facb
   341ec:	98182301 	.word	0x98182301
   341f0:	3213e9cd 	.word	0x3213e9cd
   341f4:	b1589215 	.word	0xb1589215
   341f8:	1e4b9917 	.word	0x1e4b9917
   341fc:	3b01b131 	.word	0x3b01b131
   34200:	60021c5d 	.word	0x60021c5d
   34204:	0004f100 	.word	0x0004f100
   34208:	9818d1f9 	.word	0x9818d1f9
   3420c:	fab8f002 	.word	0xfab8f002
   34210:	23012200 	.word	0x23012200
   34214:	e9cd981b 	.word	0xe9cd981b
   34218:	92183216 	.word	0x92183216
   3421c:	991ab158 	.word	0x991ab158
   34220:	b1311e4b 	.word	0xb1311e4b
   34224:	1c5c3b01 	.word	0x1c5c3b01
   34228:	f1006002 	.word	0xf1006002
   3422c:	d1f90004 	.word	0xd1f90004
   34230:	f002981b 	.word	0xf002981b
   34234:	2100faa5 	.word	0x2100faa5
   34238:	911b2301 	.word	0x911b2301
   3423c:	3119e9cd 	.word	0x3119e9cd
   34240:	f43f2f00 	.word	0xf43f2f00
   34244:	9a1daf6b 	.word	0x9a1daf6b
   34248:	b1321e53 	.word	0xb1321e53
   3424c:	3b01463a 	.word	0x3b01463a
   34250:	60111c58 	.word	0x60111c58
   34254:	0204f102 	.word	0x0204f102
   34258:	4638d1f9 	.word	0x4638d1f9
   3425c:	fa90f002 	.word	0xfa90f002
   34260:	b0234630 	.word	0xb0234630
   34264:	8ff0e8bd 	.word	0x8ff0e8bd
   34268:	2029f858 	.word	0x2029f858
   3426c:	d0892a00 	.word	0xd0892a00
   34270:	d38f429e 	.word	0xd38f429e
   34274:	f200429e 	.word	0xf200429e
   34278:	2b008190 	.word	0x2b008190
   3427c:	68a1d08a 	.word	0x68a1d08a
   34280:	4280f103 	.word	0x4280f103
   34284:	f8513a01 	.word	0xf8513a01
   34288:	f8580022 	.word	0xf8580022
   3428c:	00926022 	.word	0x00926022
   34290:	44114286 	.word	0x44114286
   34294:	f4ff4490 	.word	0xf4ff4490
   34298:	f200af7d 	.word	0xf200af7d
   3429c:	460a817e 	.word	0x460a817e
   342a0:	f852e008 	.word	0xf852e008
   342a4:	f8580d04 	.word	0xf8580d04
   342a8:	42881d04 	.word	0x42881d04
   342ac:	af72f63f 	.word	0xaf72f63f
   342b0:	8173f0c0 	.word	0x8173f0c0
   342b4:	d1f43b01 	.word	0xd1f43b01
   342b8:	4621a810 	.word	0x4621a810
   342bc:	fe7cf7fe 	.word	0xfe7cf7fe
   342c0:	28004606 	.word	0x28004606
   342c4:	af6ef47f 	.word	0xaf6ef47f
   342c8:	4659a813 	.word	0x4659a813
   342cc:	fe74f7fe 	.word	0xfe74f7fe
   342d0:	28004606 	.word	0x28004606
   342d4:	af66f47f 	.word	0xaf66f47f
   342d8:	7210f242 	.word	0x7210f242
   342dc:	68672301 	.word	0x68672301
   342e0:	37029313 	.word	0x37029313
   342e4:	93104297 	.word	0x93104297
   342e8:	8193f200 	.word	0x8193f200
   342ec:	805cf8dd 	.word	0x805cf8dd
   342f0:	d91d4547 	.word	0xd91d4547
   342f4:	46382104 	.word	0x46382104
   342f8:	fa2ef002 	.word	0xfa2ef002
   342fc:	28004681 	.word	0x28004681
   34300:	8187f000 	.word	0x8187f000
   34304:	b1819918 	.word	0xb1819918
   34308:	00929a17 	.word	0x00929a17
   3430c:	fb51f00d 	.word	0xfb51f00d
   34310:	2017e9dd 	.word	0x2017e9dd
   34314:	b1321e53 	.word	0xb1321e53
   34318:	1c5a3b01 	.word	0x1c5a3b01
   3431c:	f1006006 	.word	0xf1006006
   34320:	d1f90004 	.word	0xd1f90004
   34324:	f0029818 	.word	0xf0029818
   34328:	46b8fa2b 	.word	0x46b8fa2b
   3432c:	7917e9cd 	.word	0x7917e9cd
   34330:	0f00f1b8 	.word	0x0f00f1b8
   34334:	8171f000 	.word	0x8171f000
   34338:	ea4f9e18 	.word	0xea4f9e18
   3433c:	27000288 	.word	0x27000288
   34340:	46394630 	.word	0x46394630
   34344:	fb55f00d 	.word	0xfb55f00d
   34348:	9b182201 	.word	0x9b182201
   3434c:	9b1a601f 	.word	0x9b1a601f
   34350:	42939216 	.word	0x42939216
   34354:	81b2f240 	.word	0x81b2f240
   34358:	20032104 	.word	0x20032104
   3435c:	f9fcf002 	.word	0xf9fcf002
   34360:	28004607 	.word	0x28004607
   34364:	8155f000 	.word	0x8155f000
   34368:	9a142303 	.word	0x9a142303
   3436c:	301de9cd 	.word	0x301de9cd
   34370:	2a009203 	.word	0x2a009203
   34374:	8171f000 	.word	0x8171f000
   34378:	0901f1b2 	.word	0x0901f1b2
   3437c:	f0009915 	.word	0xf0009915
   34380:	f85181cf 	.word	0xf85181cf
   34384:	28000029 	.word	0x28000029
   34388:	81c5f040 	.word	0x81c5f040
   3438c:	4280f102 	.word	0x4280f102
   34390:	464b3a01 	.word	0x464b3a01
   34394:	0282eb01 	.word	0x0282eb01
   34398:	f852e004 	.word	0xf852e004
   3439c:	28000d04 	.word	0x28000d04
   343a0:	81aef040 	.word	0x81aef040
   343a4:	d1f83b01 	.word	0xd1f83b01
   343a8:	68082620 	.word	0x68082620
   343ac:	f04f2200 	.word	0xf04f2200
   343b0:	e0024100 	.word	0xe0024100
   343b4:	2a203201 	.word	0x2a203201
   343b8:	4201d004 	.word	0x4201d004
   343bc:	0151ea4f 	.word	0x0151ea4f
   343c0:	1ab3d0f8 	.word	0x1ab3d0f8
   343c4:	031ff003 	.word	0x031ff003
   343c8:	f0402b1f 	.word	0xf0402b1f
   343cc:	2300819f 	.word	0x2300819f
   343d0:	9b119302 	.word	0x9b119302
   343d4:	9304a813 	.word	0x9304a813
   343d8:	eba33b01 	.word	0xeba33b01
   343dc:	93010809 	.word	0x93010809
   343e0:	1348ea4f 	.word	0x1348ea4f
   343e4:	93054619 	.word	0x93054619
   343e8:	f8fef7ff 	.word	0xf8fef7ff
   343ec:	28004606 	.word	0x28004606
   343f0:	aed9f47f 	.word	0xaed9f47f
   343f4:	0888ea4f 	.word	0x0888ea4f
   343f8:	9818e00d 	.word	0x9818e00d
   343fc:	f850a910 	.word	0xf850a910
   34400:	aa133008 	.word	0xaa133008
   34404:	f8403301 	.word	0xf8403301
   34408:	46083008 	.word	0x46083008
   3440c:	fca6f7ff 	.word	0xfca6f7ff
   34410:	f0402800 	.word	0xf0402800
   34414:	a9138179 	.word	0xa9138179
   34418:	f7ffa810 	.word	0xf7ffa810
   3441c:	2800fa0b 	.word	0x2800fa0b
   34420:	9905daeb 	.word	0x9905daeb
   34424:	f7ffa813 	.word	0xf7ffa813
   34428:	4606f995 	.word	0x4606f995
   3442c:	f47f2800 	.word	0xf47f2800
   34430:	f06faeba 	.word	0xf06faeba
   34434:	9a030303 	.word	0x9a030303
   34438:	b508e9cd 	.word	0xb508e9cd
   3443c:	4780f102 	.word	0x4780f102
   34440:	fb039a04 	.word	0xfb039a04
   34444:	f102f309 	.word	0xf102f309
   34448:	3a024280 	.word	0x3a024280
   3444c:	46150092 	.word	0x46150092
   34450:	ea4f9305 	.word	0xea4f9305
   34454:	93030389 	.word	0x93030389
   34458:	63c9ebc9 	.word	0x63c9ebc9
   3445c:	e9cd3f02 	.word	0xe9cd3f02
   34460:	e9cd3006 	.word	0xe9cd3006
   34464:	00b9a40a 	.word	0x00b9a40a
   34468:	9b019104 	.word	0x9b019104
   3446c:	f240454b 	.word	0xf240454b
   34470:	98038173 	.word	0x98038173
   34474:	9a159912 	.word	0x9a159912
   34478:	0a04f105 	.word	0x0a04f105
   3447c:	f8515812 	.word	0xf8515812
   34480:	9805300a 	.word	0x9805300a
   34484:	eb004293 	.word	0xeb004293
   34488:	9e180405 	.word	0x9e180405
   3448c:	814cf0c0 	.word	0x814cf0c0
   34490:	33fff04f 	.word	0x33fff04f
   34494:	26015133 	.word	0x26015133
   34498:	9f1e9a18 	.word	0x9f1e9a18
   3449c:	f1a55913 	.word	0xf1a55913
   344a0:	44330b04 	.word	0x44330b04
   344a4:	e04b5113 	.word	0xe04b5113
   344a8:	806cf8dd 	.word	0x806cf8dd
   344ac:	46400092 	.word	0x46400092
   344b0:	f00d2100 	.word	0xf00d2100
   344b4:	2200fa9e 	.word	0x2200fa9e
   344b8:	601a9b1b 	.word	0x601a9b1b
   344bc:	f1b99619 	.word	0xf1b99619
   344c0:	f0000f00 	.word	0xf0000f00
   344c4:	9b1580f9 	.word	0x9b1580f9
   344c8:	589b9a04 	.word	0x589b9a04
   344cc:	99039a1b 	.word	0x99039a1b
   344d0:	9a156013 	.word	0x9a156013
   344d4:	58529b1b 	.word	0x58529b1b
   344d8:	605aa919 	.word	0x605aa919
   344dc:	f10d9b18 	.word	0xf10d9b18
   344e0:	591b083c 	.word	0x591b083c
   344e4:	4608aa1f 	.word	0x4608aa1f
   344e8:	e9cd930f 	.word	0xe9cd930f
   344ec:	f8cd661f 	.word	0xf8cd661f
   344f0:	f7ff8084 	.word	0xf7ff8084
   344f4:	2800fcf3 	.word	0x2800fcf3
   344f8:	8106f040 	.word	0x8106f040
   344fc:	2a009a1d 	.word	0x2a009a1d
   34500:	80c2f000 	.word	0x80c2f000
   34504:	21000092 	.word	0x21000092
   34508:	f00d4638 	.word	0xf00d4638
   3450c:	2300fa72 	.word	0x2300fa72
   34510:	9b01603b 	.word	0x9b01603b
   34514:	2b01961c 	.word	0x2b01961c
   34518:	9b12a91c 	.word	0x9b12a91c
   3451c:	80edf000 	.word	0x80edf000
   34520:	300bf853 	.word	0x300bf853
   34524:	603ba819 	.word	0x603ba819
   34528:	595b9b12 	.word	0x595b9b12
   3452c:	9b12607b 	.word	0x9b12607b
   34530:	300af853 	.word	0x300af853
   34534:	f7ff60bb 	.word	0xf7ff60bb
   34538:	2800f97d 	.word	0x2800f97d
   3453c:	811cf340 	.word	0x811cf340
   34540:	59139a18 	.word	0x59139a18
   34544:	51133b01 	.word	0x51133b01
   34548:	2a009a1a 	.word	0x2a009a1a
   3454c:	2104d1ac 	.word	0x2104d1ac
   34550:	f0022001 	.word	0xf0022001
   34554:	4680f901 	.word	0x4680f901
   34558:	f0002800 	.word	0xf0002800
   3455c:	991b8140 	.word	0x991b8140
   34560:	9a1ab191 	.word	0x9a1ab191
   34564:	f00d0092 	.word	0xf00d0092
   34568:	e9ddfa24 	.word	0xe9ddfa24
   3456c:	4602101a 	.word	0x4602101a
   34570:	b1391e4b 	.word	0xb1391e4b
   34574:	3b012100 	.word	0x3b012100
   34578:	1c596011 	.word	0x1c596011
   3457c:	0204f102 	.word	0x0204f102
   34580:	981bd1f8 	.word	0x981bd1f8
   34584:	f8fcf002 	.word	0xf8fcf002
   34588:	e9cd2204 	.word	0xe9cd2204
   3458c:	e78e681a 	.word	0xe78e681a
   34590:	2029f858 	.word	0x2029f858
   34594:	f43f2a00 	.word	0xf43f2a00
   34598:	b355adf5 	.word	0xb355adf5
   3459c:	b9ee686e 	.word	0xb9ee686e
   345a0:	20012104 	.word	0x20012104
   345a4:	f8d8f002 	.word	0xf8d8f002
   345a8:	b3904607 	.word	0xb3904607
   345ac:	b18168a9 	.word	0xb18168a9
   345b0:	0092686a 	.word	0x0092686a
   345b4:	f9fdf00d 	.word	0xf9fdf00d
   345b8:	2001e9d5 	.word	0x2001e9d5
   345bc:	b1321e53 	.word	0xb1321e53
   345c0:	1c593b01 	.word	0x1c593b01
   345c4:	f1006006 	.word	0xf1006006
   345c8:	d1f90004 	.word	0xd1f90004
   345cc:	f00268a8 	.word	0xf00268a8
   345d0:	2301f8d7 	.word	0x2301f8d7
   345d4:	e9c52204 	.word	0xe9c52204
   345d8:	e0013701 	.word	0xe0013701
   345dc:	00b268af 	.word	0x00b268af
   345e0:	46382100 	.word	0x46382100
   345e4:	fa05f00d 	.word	0xfa05f00d
   345e8:	23012100 	.word	0x23012100
   345ec:	601168aa 	.word	0x601168aa
   345f0:	f1ba602b 	.word	0xf1ba602b
   345f4:	d0070f00 	.word	0xd0070f00
   345f8:	46504621 	.word	0x46504621
   345fc:	fcdcf7fe 	.word	0xfcdcf7fe
   34600:	28004606 	.word	0x28004606
   34604:	adcef47f 	.word	0xadcef47f
   34608:	46302600 	.word	0x46302600
   3460c:	e8bdb023 	.word	0xe8bdb023
   34610:	27008ff0 	.word	0x27008ff0
   34614:	060ff06f 	.word	0x060ff06f
   34618:	2104e5c5 	.word	0x2104e5c5
   3461c:	f0022001 	.word	0xf0022001
   34620:	4606f89b 	.word	0x4606f89b
   34624:	d0f42800 	.word	0xd0f42800
   34628:	b1899918 	.word	0xb1899918
   3462c:	00929a17 	.word	0x00929a17
   34630:	f9bff00d 	.word	0xf9bff00d
   34634:	3017e9dd 	.word	0x3017e9dd
   34638:	b13b1e5a 	.word	0xb13b1e5a
   3463c:	3a014643 	.word	0x3a014643
   34640:	60031c57 	.word	0x60031c57
   34644:	0004f100 	.word	0x0004f100
   34648:	9818d1f9 	.word	0x9818d1f9
   3464c:	f898f002 	.word	0xf898f002
   34650:	22042301 	.word	0x22042301
   34654:	3617e9cd 	.word	0x3617e9cd
   34658:	231fe671 	.word	0x231fe671
   3465c:	93024619 	.word	0x93024619
   34660:	f7fea810 	.word	0xf7fea810
   34664:	4606ffc1 	.word	0x4606ffc1
   34668:	f47f2800 	.word	0xf47f2800
   3466c:	9902ad9c 	.word	0x9902ad9c
   34670:	f7fea813 	.word	0xf7fea813
   34674:	4606ffb9 	.word	0x4606ffb9
   34678:	f47f2800 	.word	0xf47f2800
   3467c:	9b14ad94 	.word	0x9b14ad94
   34680:	f1039303 	.word	0xf1039303
   34684:	e6a439ff 	.word	0xe6a439ff
   34688:	20012104 	.word	0x20012104
   3468c:	f002920d 	.word	0xf002920d
   34690:	4603f863 	.word	0x4603f863
   34694:	f0002800 	.word	0xf0002800
   34698:	b14780a2 	.word	0xb14780a2
   3469c:	46399a0d 	.word	0x46399a0d
   346a0:	f00d900c 	.word	0xf00d900c
   346a4:	4638f986 	.word	0x4638f986
   346a8:	f86af002 	.word	0xf86af002
   346ac:	461f9b0c 	.word	0x461f9b0c
   346b0:	e9cd2204 	.word	0xe9cd2204
   346b4:	e726631d 	.word	0xe726631d
   346b8:	e707464b 	.word	0xe707464b
   346bc:	20022104 	.word	0x20022104
   346c0:	f84af002 	.word	0xf84af002
   346c4:	28004606 	.word	0x28004606
   346c8:	991bd0a3 	.word	0x991bd0a3
   346cc:	9a1ab189 	.word	0x9a1ab189
   346d0:	f00d0092 	.word	0xf00d0092
   346d4:	e9ddf96e 	.word	0xe9ddf96e
   346d8:	4618131a 	.word	0x4618131a
   346dc:	b1311e4a 	.word	0xb1311e4a
   346e0:	1c503a01 	.word	0x1c503a01
   346e4:	f103601f 	.word	0xf103601f
   346e8:	d1f90304 	.word	0xd1f90304
   346ec:	f002981b 	.word	0xf002981b
   346f0:	2302f847 	.word	0x2302f847
   346f4:	361ae9cd 	.word	0x361ae9cd
   346f8:	595be62e 	.word	0x595be62e
   346fc:	e715a819 	.word	0xe715a819
   34700:	f103015b 	.word	0xf103015b
   34704:	e6510620 	.word	0xe6510620
   34708:	e54c4606 	.word	0xe54c4606
   3470c:	031ff1c3 	.word	0x031ff1c3
   34710:	46199302 	.word	0x46199302
   34714:	ea4fe7a4 	.word	0xea4fe7a4
   34718:	f1031349 	.word	0xf1031349
   3471c:	e6450620 	.word	0xe6450620
   34720:	26206808 	.word	0x26206808
   34724:	e641464b 	.word	0xe641464b
   34728:	b192594f 	.word	0xb192594f
   3472c:	f04f469c 	.word	0xf04f469c
   34730:	46610b00 	.word	0x46610b00
   34734:	ea4b465b 	.word	0xea4b465b
   34738:	f7e40007 	.word	0xf7e40007
   3473c:	2300fb0f 	.word	0x2300fb0f
   34740:	32fff04f 	.word	0x32fff04f
   34744:	bf08428b 	.word	0xbf08428b
   34748:	d2004282 	.word	0xd2004282
   3474c:	51304610 	.word	0x51304610
   34750:	f04fe6a1 	.word	0xf04fe6a1
   34754:	e7fa30ff 	.word	0xe7fa30ff
   34758:	6b07e9dd 	.word	0x6b07e9dd
   3475c:	5a09e9dd 	.word	0x5a09e9dd
   34760:	2d009c0b 	.word	0x2d009c0b
   34764:	a916d05f 	.word	0xa916d05f
   34768:	f7fe4628 	.word	0xf7fe4628
   3476c:	2800fc25 	.word	0x2800fc25
   34770:	4606d053 	.word	0x4606d053
   34774:	e5169f1e 	.word	0xe5169f1e
   34778:	9b182501 	.word	0x9b182501
   3477c:	591baa1f 	.word	0x591baa1f
   34780:	a819a913 	.word	0xa819a913
   34784:	f8cd930f 	.word	0xf8cd930f
   34788:	e9cd8084 	.word	0xe9cd8084
   3478c:	f7ff551f 	.word	0xf7ff551f
   34790:	2800fba5 	.word	0x2800fba5
   34794:	9b06d1b8 	.word	0x9b06d1b8
   34798:	f1039a01 	.word	0xf1039a01
   3479c:	3b016300 	.word	0x3b016300
   347a0:	015e4413 	.word	0x015e4413
   347a4:	a8194631 	.word	0xa8194631
   347a8:	ff1ef7fe 	.word	0xff1ef7fe
   347ac:	d1ab2800 	.word	0xd1ab2800
   347b0:	aa19a910 	.word	0xaa19a910
   347b4:	f7ff4608 	.word	0xf7ff4608
   347b8:	4603fad1 	.word	0x4603fad1
   347bc:	a91fbb58 	.word	0xa91fbb58
   347c0:	930fa810 	.word	0x930fa810
   347c4:	551fe9cd 	.word	0x551fe9cd
   347c8:	8084f8cd 	.word	0x8084f8cd
   347cc:	fb2ef7fe 	.word	0xfb2ef7fe
   347d0:	db072800 	.word	0xdb072800
   347d4:	465d9b01 	.word	0x465d9b01
   347d8:	93013b01 	.word	0x93013b01
   347dc:	f06fe645 	.word	0xf06fe645
   347e0:	e4e0060f 	.word	0xe4e0060f
   347e4:	a819a913 	.word	0xa819a913
   347e8:	fbe6f7fe 	.word	0xfbe6f7fe
   347ec:	d18b2800 	.word	0xd18b2800
   347f0:	a8194631 	.word	0xa8194631
   347f4:	fef8f7fe 	.word	0xfef8f7fe
   347f8:	d1852800 	.word	0xd1852800
   347fc:	aa19a910 	.word	0xaa19a910
   34800:	f7ff4608 	.word	0xf7ff4608
   34804:	2800fa37 	.word	0x2800fa37
   34808:	af7ef47f 	.word	0xaf7ef47f
   3480c:	59139a18 	.word	0x59139a18
   34810:	51133b01 	.word	0x51133b01
   34814:	4606e7de 	.word	0x4606e7de
   34818:	f8dbe4c5 	.word	0xf8dbe4c5
   3481c:	68223000 	.word	0x68223000
   34820:	f302fb03 	.word	0xf302fb03
   34824:	f1ba602b 	.word	0xf1ba602b
   34828:	d0050f00 	.word	0xd0050f00
   3482c:	a8109902 	.word	0xa8109902
   34830:	ff90f7fe 	.word	0xff90f7fe
   34834:	b1084606 	.word	0xb1084606
   34838:	e4b49f1e 	.word	0xe4b49f1e
   3483c:	a9106823 	.word	0xa9106823
   34840:	93104650 	.word	0x93104650
   34844:	fbb8f7fe 	.word	0xfbb8f7fe
   34848:	28004606 	.word	0x28004606
   3484c:	2401d1f4 	.word	0x2401d1f4
   34850:	a91fab0f 	.word	0xa91fab0f
   34854:	960f4650 	.word	0x960f4650
   34858:	441fe9cd 	.word	0x441fe9cd
   3485c:	f7fe9321 	.word	0xf7fe9321
   34860:	2800fae5 	.word	0x2800fae5
   34864:	f8cad1e8 	.word	0xf8cad1e8
   34868:	e7e54000 	.word	0xe7e54000

0003486c <symbol_000dbba>:
   3486c:	41f0e92d 	.word	0x41f0e92d
   34870:	46176853 	.word	0x46176853
   34874:	6894b183 	.word	0x6894b183
   34878:	4580f103 	.word	0x4580f103
   3487c:	f8543d01 	.word	0xf8543d01
   34880:	eb042025 	.word	0xeb042025
   34884:	b12a0485 	.word	0xb12a0485
   34888:	f854e11a 	.word	0xf854e11a
   3488c:	2d005d04 	.word	0x2d005d04
   34890:	8116f040 	.word	0x8116f040
   34894:	d1f83b01 	.word	0xd1f83b01
   34898:	4606460a 	.word	0x4606460a
   3489c:	463b4601 	.word	0x463b4601
   348a0:	f7ff2000 	.word	0xf7ff2000
   348a4:	2800fc21 	.word	0x2800fc21
   348a8:	f06fd151 	.word	0xf06fd151
   348ac:	68714840 	.word	0x68714840
   348b0:	68b0b191 	.word	0x68b0b191
   348b4:	0308eb01 	.word	0x0308eb01
   348b8:	c023f850 	.word	0xc023f850
   348bc:	0283eb00 	.word	0x0283eb00
   348c0:	0f00f1bc 	.word	0x0f00f1bc
   348c4:	4614d156 	.word	0x4614d156
   348c8:	e003460b 	.word	0xe003460b
   348cc:	5d04f854 	.word	0x5d04f854
   348d0:	d14f2d00 	.word	0xd14f2d00
   348d4:	d1f93b01 	.word	0xd1f93b01
   348d8:	4440f06f 	.word	0x4440f06f
   348dc:	46304639 	.word	0x46304639
   348e0:	ffa8f7fe 	.word	0xffa8f7fe
   348e4:	db422800 	.word	0xdb422800
   348e8:	683b6835 	.word	0x683b6835
   348ec:	f305fb03 	.word	0xf305fb03
   348f0:	dd2e2b00 	.word	0xdd2e2b00
   348f4:	687a6873 	.word	0x687a6873
   348f8:	68b1b183 	.word	0x68b1b183
   348fc:	f8511918 	.word	0xf8511918
   34900:	eb01c020 	.word	0xeb01c020
   34904:	f1bc0180 	.word	0xf1bc0180
   34908:	d0050f00 	.word	0xd0050f00
   3490c:	f851e090 	.word	0xf851e090
   34910:	28000d04 	.word	0x28000d04
   34914:	808cf040 	.word	0x808cf040
   34918:	d1f83b01 	.word	0xd1f83b01
   3491c:	f8d7b18a 	.word	0xf8d7b18a
   34920:	1911c008 	.word	0x1911c008
   34924:	0021f85c 	.word	0x0021f85c
   34928:	f0402800 	.word	0xf0402800
   3492c:	eb0c80be 	.word	0xeb0c80be
   34930:	e0040181 	.word	0xe0040181
   34934:	0d04f851 	.word	0x0d04f851
   34938:	f0402800 	.word	0xf0402800
   3493c:	3a018083 	.word	0x3a018083
   34940:	463ad1f8 	.word	0x463ad1f8
   34944:	46304631 	.word	0x46304631
   34948:	f8d4f7ff 	.word	0xf8d4f7ff
   3494c:	e8bdb140 	.word	0xe8bdb140
   34950:	463a81f0 	.word	0x463a81f0
   34954:	46304631 	.word	0x46304631
   34958:	f828f7ff 	.word	0xf828f7ff
   3495c:	d1f62800 	.word	0xd1f62800
   34960:	46396035 	.word	0x46396035
   34964:	f7fe4630 	.word	0xf7fe4630
   34968:	2800ff65 	.word	0x2800ff65
   3496c:	2000dabc 	.word	0x2000dabc
   34970:	81f0e8bd 	.word	0x81f0e8bd
   34974:	2c006834 	.word	0x2c006834
   34978:	683bdaae 	.word	0x683bdaae
   3497c:	f304fb03 	.word	0xf304fb03
   34980:	da232b00 	.word	0xda232b00
   34984:	0f00f1bc 	.word	0x0f00f1bc
   34988:	4613d129 	.word	0x4613d129
   3498c:	f853e002 	.word	0xf853e002
   34990:	bb222d04 	.word	0xbb222d04
   34994:	d1fa3901 	.word	0xd1fa3901
   34998:	b173687b 	.word	0xb173687b
   3499c:	c008f8d7 	.word	0xc008f8d7
   349a0:	0208eb03 	.word	0x0208eb03
   349a4:	5022f85c 	.word	0x5022f85c
   349a8:	0282eb0c 	.word	0x0282eb0c
   349ac:	e071b11d 	.word	0xe071b11d
   349b0:	5d04f852 	.word	0x5d04f852
   349b4:	3b01bb05 	.word	0x3b01bb05
   349b8:	463ad1fa 	.word	0x463ad1fa
   349bc:	46304631 	.word	0x46304631
   349c0:	f898f7ff 	.word	0xf898f7ff
   349c4:	d1c22800 	.word	0xd1c22800
   349c8:	e7706034 	.word	0xe7706034
   349cc:	4631463a 	.word	0x4631463a
   349d0:	f7fe4630 	.word	0xf7fe4630
   349d4:	2800ffeb 	.word	0x2800ffeb
   349d8:	e8bdd0f6 	.word	0xe8bdd0f6
   349dc:	687b81f0 	.word	0x687b81f0
   349e0:	d0ea2b00 	.word	0xd0ea2b00
   349e4:	c008f8d7 	.word	0xc008f8d7
   349e8:	0208eb03 	.word	0x0208eb03
   349ec:	5022f85c 	.word	0x5022f85c
   349f0:	0282eb0c 	.word	0x0282eb0c
   349f4:	d0de2d00 	.word	0xd0de2d00
   349f8:	d8de4299 	.word	0xd8de4299
   349fc:	2900d34a 	.word	0x2900d34a
   34a00:	eb01d0db 	.word	0xeb01d0db
   34a04:	f8500308 	.word	0xf8500308
   34a08:	f85c2023 	.word	0xf85c2023
   34a0c:	009b5023 	.word	0x009b5023
   34a10:	44184295 	.word	0x44184295
   34a14:	d3d04463 	.word	0xd3d04463
   34a18:	e03bd907 	.word	0xe03bd907
   34a1c:	5d04f850 	.word	0x5d04f850
   34a20:	2d04f853 	.word	0x2d04f853
   34a24:	d8c84295 	.word	0xd8c84295
   34a28:	3901d334 	.word	0x3901d334
   34a2c:	e7c4d1f6 	.word	0xe7c4d1f6
   34a30:	d0862a00 	.word	0xd0862a00
   34a34:	c008f8d7 	.word	0xc008f8d7
   34a38:	f85c1911 	.word	0xf85c1911
   34a3c:	28000021 	.word	0x28000021
   34a40:	af75f43f 	.word	0xaf75f43f
   34a44:	f63f4293 	.word	0xf63f4293
   34a48:	d32eaf7c 	.word	0xd32eaf7c
   34a4c:	f43f2b00 	.word	0xf43f2b00
   34a50:	68b1af78 	.word	0x68b1af78
   34a54:	f851191a 	.word	0xf851191a
   34a58:	f85c0022 	.word	0xf85c0022
   34a5c:	0092e022 	.word	0x0092e022
   34a60:	44114586 	.word	0x44114586
   34a64:	f4ff4462 	.word	0xf4ff4462
   34a68:	d908af6c 	.word	0xd908af6c
   34a6c:	f851e01d 	.word	0xf851e01d
   34a70:	f852cd04 	.word	0xf852cd04
   34a74:	45840d04 	.word	0x45840d04
   34a78:	af63f63f 	.word	0xaf63f63f
   34a7c:	3b01d315 	.word	0x3b01d315
   34a80:	463ad1f5 	.word	0x463ad1f5
   34a84:	46304631 	.word	0x46304631
   34a88:	f834f7ff 	.word	0xf834f7ff
   34a8c:	f47f2800 	.word	0xf47f2800
   34a90:	e765af5e 	.word	0xe765af5e
   34a94:	46394632 	.word	0x46394632
   34a98:	f7ff4630 	.word	0xf7ff4630
   34a9c:	2800f82b 	.word	0x2800f82b
   34aa0:	af55f47f 	.word	0xaf55f47f
   34aa4:	60344264 	.word	0x60344264
   34aa8:	4632e701 	.word	0x4632e701
   34aac:	46304639 	.word	0x46304639
   34ab0:	f820f7ff 	.word	0xf820f7ff
   34ab4:	f47f2800 	.word	0xf47f2800
   34ab8:	426daf4a 	.word	0x426daf4a
   34abc:	e70d6035 	.word	0xe70d6035
   34ac0:	2b00683b 	.word	0x2b00683b
   34ac4:	aee8f6bf 	.word	0xaee8f6bf
   34ac8:	0009f06f 	.word	0x0009f06f
   34acc:	bf00e73f 	.word	0xbf00e73f

00034ad0 <symbol_0005f38>:
   34ad0:	41f0e92d 	.word	0x41f0e92d
   34ad4:	2501460f 	.word	0x2501460f
   34ad8:	68bb2100 	.word	0x68bb2100
   34adc:	4604b086 	.word	0x4604b086
   34ae0:	95004616 	.word	0x95004616
   34ae4:	e9cd9503 	.word	0xe9cd9503
   34ae8:	e9cd1101 	.word	0xe9cd1101
   34aec:	2b001104 	.word	0x2b001104
   34af0:	6879d040 	.word	0x6879d040
   34af4:	d0111e4a 	.word	0xd0111e4a
   34af8:	0022f853 	.word	0x0022f853
   34afc:	f0402800 	.word	0xf0402800
   34b00:	f10180c4 	.word	0xf10180c4
   34b04:	39014180 	.word	0x39014180
   34b08:	0381eb03 	.word	0x0381eb03
   34b0c:	f853e004 	.word	0xf853e004
   34b10:	29001d04 	.word	0x29001d04
   34b14:	80b9f040 	.word	0x80b9f040
   34b18:	d1f83a01 	.word	0xd1f83a01
   34b1c:	683b2501 	.word	0x683b2501
   34b20:	21049300 	.word	0x21049300
   34b24:	f0014628 	.word	0xf0014628
   34b28:	4680fe17 	.word	0x4680fe17
   34b2c:	f0002800 	.word	0xf0002800
   34b30:	9902813c 	.word	0x9902813c
   34b34:	9a01b189 	.word	0x9a01b189
   34b38:	f00c0092 	.word	0xf00c0092
   34b3c:	e9ddff3a 	.word	0xe9ddff3a
   34b40:	1e532001 	.word	0x1e532001
   34b44:	2200b13a 	.word	0x2200b13a
   34b48:	1c593b01 	.word	0x1c593b01
   34b4c:	f1006002 	.word	0xf1006002
   34b50:	d1f90004 	.word	0xd1f90004
   34b54:	f0019802 	.word	0xf0019802
   34b58:	e9cdfe13 	.word	0xe9cdfe13
   34b5c:	00ad5801 	.word	0x00ad5801
   34b60:	2100462a 	.word	0x2100462a
   34b64:	f00c4640 	.word	0xf00c4640
   34b68:	462aff44 	.word	0x462aff44
   34b6c:	980268b9 	.word	0x980268b9
   34b70:	ff1ff00c 	.word	0xff1ff00c
   34b74:	a8034631 	.word	0xa8034631
   34b78:	fa1ef7fe 	.word	0xfa1ef7fe
   34b7c:	28004607 	.word	0x28004607
   34b80:	9e01d15d 	.word	0x9e01d15d
   34b84:	f0002e00 	.word	0xf0002e00
   34b88:	4601810e 	.word	0x4601810e
   34b8c:	3d049d02 	.word	0x3d049d02
   34b90:	f8552200 	.word	0xf8552200
   34b94:	e0040f04 	.word	0xe0040f04
   34b98:	f1012a20 	.word	0xf1012a20
   34b9c:	f0000101 	.word	0xf0000101
   34ba0:	fa208081 	.word	0xfa208081
   34ba4:	f013f302 	.word	0xf013f302
   34ba8:	f1020301 	.word	0xf1020301
   34bac:	d0f30201 	.word	0xd0f30201
   34bb0:	b1b59d04 	.word	0xb1b59d04
   34bb4:	46842000 	.word	0x46842000
   34bb8:	3f049f05 	.word	0x3f049f05
   34bbc:	f8572200 	.word	0xf8572200
   34bc0:	e0036f04 	.word	0xe0036f04
   34bc4:	f1002a20 	.word	0xf1002a20
   34bc8:	d0710001 	.word	0xd0710001
   34bcc:	f302fa26 	.word	0xf302fa26
   34bd0:	0301f013 	.word	0x0301f013
   34bd4:	0201f102 	.word	0x0201f102
   34bd8:	4281d0f4 	.word	0x4281d0f4
   34bdc:	4601bf28 	.word	0x4601bf28
   34be0:	4668460d 	.word	0x4668460d
   34be4:	f7fe4629 	.word	0xf7fe4629
   34be8:	4607fdb5 	.word	0x4607fdb5
   34bec:	4629bb38 	.word	0x4629bb38
   34bf0:	f7fea803 	.word	0xf7fea803
   34bf4:	4607fdaf 	.word	0x4607fdaf
   34bf8:	2301bb08 	.word	0x2301bb08
   34bfc:	4640f06f 	.word	0x4640f06f
   34c00:	93009303 	.word	0x93009303
   34c04:	b17f9f01 	.word	0xb17f9f01
   34c08:	19ba9802 	.word	0x19ba9802
   34c0c:	3022f850 	.word	0x3022f850
   34c10:	0282eb00 	.word	0x0282eb00
   34c14:	d1512b00 	.word	0xd1512b00
   34c18:	e003463b 	.word	0xe003463b
   34c1c:	1d04f852 	.word	0x1d04f852
   34c20:	d14b2900 	.word	0xd14b2900
   34c24:	d1f93b01 	.word	0xd1f93b01
   34c28:	a8034629 	.word	0xa8034629
   34c2c:	fcdcf7fe 	.word	0xfcdcf7fe
   34c30:	b9204607 	.word	0xb9204607
   34c34:	4620a903 	.word	0x4620a903
   34c38:	f9bef7fe 	.word	0xf9bef7fe
   34c3c:	98024607 	.word	0x98024607
   34c40:	9a01b160 	.word	0x9a01b160
   34c44:	b13a1e53 	.word	0xb13a1e53
   34c48:	3b012200 	.word	0x3b012200
   34c4c:	60021c5c 	.word	0x60021c5c
   34c50:	0004f100 	.word	0x0004f100
   34c54:	9802d1f9 	.word	0x9802d1f9
   34c58:	fd92f001 	.word	0xfd92f001
   34c5c:	23012200 	.word	0x23012200
   34c60:	e9cd9805 	.word	0xe9cd9805
   34c64:	92023200 	.word	0x92023200
   34c68:	9904b158 	.word	0x9904b158
   34c6c:	b1311e4b 	.word	0xb1311e4b
   34c70:	1c593b01 	.word	0x1c593b01
   34c74:	f1006002 	.word	0xf1006002
   34c78:	d1f90004 	.word	0xd1f90004
   34c7c:	f0019805 	.word	0xf0019805
   34c80:	4638fd7f 	.word	0x4638fd7f
   34c84:	e8bdb006 	.word	0xe8bdb006
   34c88:	f24281f0 	.word	0xf24281f0
   34c8c:	68397310 	.word	0x68397310
   34c90:	429d1c55 	.word	0x429d1c55
   34c94:	f2009100 	.word	0xf2009100
   34c98:	2d008083 	.word	0x2d008083
   34c9c:	af41f47f 	.word	0xaf41f47f
   34ca0:	e75d46a8 	.word	0xe75d46a8
   34ca4:	42be3701 	.word	0x42be3701
   34ca8:	af72f47f 	.word	0xaf72f47f
   34cac:	e77f4619 	.word	0xe77f4619
   34cb0:	0c01f10c 	.word	0x0c01f10c
   34cb4:	d18145ac 	.word	0xd18145ac
   34cb8:	e792461d 	.word	0xe792461d
   34cbc:	2b009b00 	.word	0x2b009b00
   34cc0:	2100d0b2 	.word	0x2100d0b2
   34cc4:	f1a0468e 	.word	0xf1a0468e
   34cc8:	22000c04 	.word	0x22000c04
   34ccc:	0f04f85c 	.word	0x0f04f85c
   34cd0:	2a20e003 	.word	0x2a20e003
   34cd4:	0101f101 	.word	0x0101f101
   34cd8:	fa20d042 	.word	0xfa20d042
   34cdc:	f013f302 	.word	0xf013f302
   34ce0:	f1020301 	.word	0xf1020301
   34ce4:	d0f40201 	.word	0xd0f40201
   34ce8:	f7fe4668 	.word	0xf7fe4668
   34cec:	4607fd33 	.word	0x4607fd33
   34cf0:	d1a42800 	.word	0xd1a42800
   34cf4:	c010f8dd 	.word	0xc010f8dd
   34cf8:	0f00f1bc 	.word	0x0f00f1bc
   34cfc:	4601d04e 	.word	0x4601d04e
   34d00:	9f054686 	.word	0x9f054686
   34d04:	22003f04 	.word	0x22003f04
   34d08:	0f04f857 	.word	0x0f04f857
   34d0c:	2a20e003 	.word	0x2a20e003
   34d10:	0101f101 	.word	0x0101f101
   34d14:	fa20d02a 	.word	0xfa20d02a
   34d18:	f013f302 	.word	0xf013f302
   34d1c:	f1020301 	.word	0xf1020301
   34d20:	d0f40201 	.word	0xd0f40201
   34d24:	f7fea803 	.word	0xf7fea803
   34d28:	4607fd15 	.word	0x4607fd15
   34d2c:	d1862800 	.word	0xd1862800
   34d30:	4668a903 	.word	0x4668a903
   34d34:	fd7ef7fe 	.word	0xfd7ef7fe
   34d38:	db1d2800 	.word	0xdb1d2800
   34d3c:	4669aa03 	.word	0x4669aa03
   34d40:	f7fe4668 	.word	0xf7fe4668
   34d44:	4607fed7 	.word	0x4607fed7
   34d48:	f47f2800 	.word	0xf47f2800
   34d4c:	2101af78 	.word	0x2101af78
   34d50:	f7fe4668 	.word	0xf7fe4668
   34d54:	4607fcff 	.word	0x4607fcff
   34d58:	f43f2800 	.word	0xf43f2800
   34d5c:	e76eaf53 	.word	0xe76eaf53
   34d60:	0e01f10e 	.word	0x0e01f10e
   34d64:	d1b045be 	.word	0xd1b045be
   34d68:	e7bd4619 	.word	0xe7bd4619
   34d6c:	0e01f10e 	.word	0x0e01f10e
   34d70:	d1c845e6 	.word	0xd1c845e6
   34d74:	e7d54619 	.word	0xe7d54619
   34d78:	466aa903 	.word	0x466aa903
   34d7c:	f7fe4608 	.word	0xf7fe4608
   34d80:	4607feb9 	.word	0x4607feb9
   34d84:	f47f2800 	.word	0xf47f2800
   34d88:	2101af5a 	.word	0x2101af5a
   34d8c:	f7fea803 	.word	0xf7fea803
   34d90:	4607fce1 	.word	0x4607fce1
   34d94:	f43f2800 	.word	0xf43f2800
   34d98:	e750af35 	.word	0xe750af35
   34d9c:	e7c14661 	.word	0xe7c14661
   34da0:	070ff06f 	.word	0x070ff06f
   34da4:	4631e75a 	.word	0x4631e75a
   34da8:	9802e702 	.word	0x9802e702
   34dac:	070ff06f 	.word	0x070ff06f
   34db0:	bf00e746 	.word	0xbf00e746

00034db4 <symbol_000644e>:
   34db4:	43f0e92d 	.word	0x43f0e92d
   34db8:	6f80f5b1 	.word	0x6f80f5b1
   34dbc:	4d04f2ad 	.word	0x4d04f2ad
   34dc0:	80a5f200 	.word	0x80a5f200
   34dc4:	4617460d 	.word	0x4617460d
   34dc8:	46694606 	.word	0x46694606
   34dcc:	462a4618 	.word	0x462a4618
   34dd0:	460747b8 	.word	0x460747b8
   34dd4:	4638b120 	.word	0x4638b120
   34dd8:	4d04f20d 	.word	0x4d04f20d
   34ddc:	83f0e8bd 	.word	0x83f0e8bd
   34de0:	f0002d00 	.word	0xf0002d00
   34de4:	f89d808a 	.word	0xf89d808a
   34de8:	2b003000 	.word	0x2b003000
   34dec:	8089f040 	.word	0x8089f040
   34df0:	4604466b 	.word	0x4604466b
   34df4:	f813e003 	.word	0xf813e003
   34df8:	2a002f01 	.word	0x2a002f01
   34dfc:	3401d14d 	.word	0x3401d14d
   34e00:	d1f842a5 	.word	0xd1f842a5
   34e04:	8004f8d6 	.word	0x8004f8d6
   34e08:	0f00f1b8 	.word	0x0f00f1b8
   34e0c:	2104d170 	.word	0x2104d170
   34e10:	f0012001 	.word	0xf0012001
   34e14:	4681fca1 	.word	0x4681fca1
   34e18:	d0752800 	.word	0xd0752800
   34e1c:	b18968b1 	.word	0xb18968b1
   34e20:	00926872 	.word	0x00926872
   34e24:	fdc5f00c 	.word	0xfdc5f00c
   34e28:	2001e9d6 	.word	0x2001e9d6
   34e2c:	b13a1e53 	.word	0xb13a1e53
   34e30:	3b014642 	.word	0x3b014642
   34e34:	60021c59 	.word	0x60021c59
   34e38:	0004f100 	.word	0x0004f100
   34e3c:	68b0d1f9 	.word	0x68b0d1f9
   34e40:	fc9ef001 	.word	0xfc9ef001
   34e44:	22042301 	.word	0x22042301
   34e48:	3901e9c6 	.word	0x3901e9c6
   34e4c:	46482100 	.word	0x46482100
   34e50:	fdcff00c 	.word	0xfdcff00c
   34e54:	22012300 	.word	0x22012300
   34e58:	42a568b1 	.word	0x42a568b1
   34e5c:	6032600b 	.word	0x6032600b
   34e60:	eb0dd9b9 	.word	0xeb0dd9b9
   34e64:	1b2c0205 	.word	0x1b2c0205
   34e68:	f02368b1 	.word	0xf02368b1
   34e6c:	ea4f0803 	.word	0xea4f0803
   34e70:	f8120ec3 	.word	0xf8120ec3
   34e74:	f851cd01 	.word	0xf851cd01
   34e78:	f00e0008 	.word	0xf00e0008
   34e7c:	fa0c0e18 	.word	0xfa0c0e18
   34e80:	3301fc0e 	.word	0x3301fc0e
   34e84:	000cea40 	.word	0x000cea40
   34e88:	f84142a3 	.word	0xf84142a3
   34e8c:	d1eb0008 	.word	0xd1eb0008
   34e90:	f20d4638 	.word	0xf20d4638
   34e94:	e8bd4d04 	.word	0xe8bd4d04
   34e98:	1b2a83f0 	.word	0x1b2a83f0
   34e9c:	0803f012 	.word	0x0803f012
   34ea0:	f04fbf18 	.word	0xf04fbf18
   34ea4:	f2420801 	.word	0xf2420801
   34ea8:	eb087310 	.word	0xeb087310
   34eac:	45980892 	.word	0x45980892
   34eb0:	6873d82a 	.word	0x6873d82a
   34eb4:	d92d4598 	.word	0xd92d4598
   34eb8:	46402104 	.word	0x46402104
   34ebc:	fc4cf001 	.word	0xfc4cf001
   34ec0:	b3084681 	.word	0xb3084681
   34ec4:	b18968b1 	.word	0xb18968b1
   34ec8:	00926872 	.word	0x00926872
   34ecc:	fd71f00c 	.word	0xfd71f00c
   34ed0:	2001e9d6 	.word	0x2001e9d6
   34ed4:	b13a1e53 	.word	0xb13a1e53
   34ed8:	3b012200 	.word	0x3b012200
   34edc:	60021c59 	.word	0x60021c59
   34ee0:	0004f100 	.word	0x0004f100
   34ee4:	68b0d1f9 	.word	0x68b0d1f9
   34ee8:	fc4af001 	.word	0xfc4af001
   34eec:	8901e9c6 	.word	0x8901e9c6
   34ef0:	0288ea4f 	.word	0x0288ea4f
   34ef4:	9008f8d6 	.word	0x9008f8d6
   34ef8:	f8d6e7a8 	.word	0xf8d6e7a8
   34efc:	462c8004 	.word	0x462c8004
   34f00:	462ae782 	.word	0x462ae782
   34f04:	e7c94604 	.word	0xe7c94604
   34f08:	070ff06f 	.word	0x070ff06f
   34f0c:	f06fe763 	.word	0xf06fe763
   34f10:	e7600703 	.word	0xe7600703
   34f14:	e7774698 	.word	0xe7774698

00034f18 <symbol_0004482>:
   34f18:	43f0e92d 	.word	0x43f0e92d
   34f1c:	b0a16853 	.word	0xb0a16853
   34f20:	6894b17b 	.word	0x6894b17b
   34f24:	4c80f103 	.word	0x4c80f103
   34f28:	3cfff10c 	.word	0x3cfff10c
   34f2c:	502cf854 	.word	0x502cf854
   34f30:	048ceb04 	.word	0x048ceb04
   34f34:	e00ab11d 	.word	0xe00ab11d
   34f38:	5d04f854 	.word	0x5d04f854
   34f3c:	3b01b93d 	.word	0x3b01b93d
   34f40:	f06fd1fa 	.word	0xf06fd1fa
   34f44:	46200403 	.word	0x46200403
   34f48:	e8bdb021 	.word	0xe8bdb021
   34f4c:	681383f0 	.word	0x681383f0
   34f50:	ddf62b00 	.word	0xddf62b00
   34f54:	23002401 	.word	0x23002401
   34f58:	a8024606 	.word	0xa8024606
   34f5c:	94089405 	.word	0x94089405
   34f60:	940e940b 	.word	0x940e940b
   34f64:	94119402 	.word	0x94119402
   34f68:	94179414 	.word	0x94179414
   34f6c:	460f941a 	.word	0x460f941a
   34f70:	e9cd4615 	.word	0xe9cd4615
   34f74:	e9cd3306 	.word	0xe9cd3306
   34f78:	e9cd3309 	.word	0xe9cd3309
   34f7c:	e9cd330c 	.word	0xe9cd330c
   34f80:	e9cd330f 	.word	0xe9cd330f
   34f84:	e9cd3303 	.word	0xe9cd3303
   34f88:	e9cd3312 	.word	0xe9cd3312
   34f8c:	e9cd3315 	.word	0xe9cd3315
   34f90:	e9cd3318 	.word	0xe9cd3318
   34f94:	f7ff331b 	.word	0xf7ff331b
   34f98:	4604fd9b 	.word	0x4604fd9b
   34f9c:	9b03b9a0 	.word	0x9b03b9a0
   34fa0:	9904b183 	.word	0x9904b183
   34fa4:	4480f103 	.word	0x4480f103
   34fa8:	f8513c01 	.word	0xf8513c01
   34fac:	eb012024 	.word	0xeb012024
   34fb0:	b12a0484 	.word	0xb12a0484
   34fb4:	f854e0b5 	.word	0xf854e0b5
   34fb8:	2a002d04 	.word	0x2a002d04
   34fbc:	80b1f040 	.word	0x80b1f040
   34fc0:	d1f83b01 	.word	0xd1f83b01
   34fc4:	040df06f 	.word	0x040df06f
   34fc8:	b1609807 	.word	0xb1609807
   34fcc:	1e539a06 	.word	0x1e539a06
   34fd0:	2200b13a 	.word	0x2200b13a
   34fd4:	1c593b01 	.word	0x1c593b01
   34fd8:	f1006002 	.word	0xf1006002
   34fdc:	d1f90004 	.word	0xd1f90004
   34fe0:	f0019807 	.word	0xf0019807
   34fe4:	2200fbcd 	.word	0x2200fbcd
   34fe8:	980a2301 	.word	0x980a2301
   34fec:	3205e9cd 	.word	0x3205e9cd
   34ff0:	b1589207 	.word	0xb1589207
   34ff4:	1e4b9909 	.word	0x1e4b9909
   34ff8:	3b01b131 	.word	0x3b01b131
   34ffc:	60021c5f 	.word	0x60021c5f
   35000:	0004f100 	.word	0x0004f100
   35004:	980ad1f9 	.word	0x980ad1f9
   35008:	fbbaf001 	.word	0xfbbaf001
   3500c:	23012200 	.word	0x23012200
   35010:	e9cd980d 	.word	0xe9cd980d
   35014:	920a3208 	.word	0x920a3208
   35018:	990cb158 	.word	0x990cb158
   3501c:	b1311e4b 	.word	0xb1311e4b
   35020:	1c5e3b01 	.word	0x1c5e3b01
   35024:	f1006002 	.word	0xf1006002
   35028:	d1f90004 	.word	0xd1f90004
   3502c:	f001980d 	.word	0xf001980d
   35030:	2200fba7 	.word	0x2200fba7
   35034:	98102301 	.word	0x98102301
   35038:	320be9cd 	.word	0x320be9cd
   3503c:	b158920d 	.word	0xb158920d
   35040:	1e4b990f 	.word	0x1e4b990f
   35044:	3b01b131 	.word	0x3b01b131
   35048:	60021c5d 	.word	0x60021c5d
   3504c:	0004f100 	.word	0x0004f100
   35050:	9810d1f9 	.word	0x9810d1f9
   35054:	fb94f001 	.word	0xfb94f001
   35058:	23012200 	.word	0x23012200
   3505c:	e9cd9804 	.word	0xe9cd9804
   35060:	9210320e 	.word	0x9210320e
   35064:	9903b158 	.word	0x9903b158
   35068:	b1311e4b 	.word	0xb1311e4b
   3506c:	1c593b01 	.word	0x1c593b01
   35070:	f1006002 	.word	0xf1006002
   35074:	d1f90004 	.word	0xd1f90004
   35078:	f0019804 	.word	0xf0019804
   3507c:	2200fb81 	.word	0x2200fb81
   35080:	98132301 	.word	0x98132301
   35084:	3202e9cd 	.word	0x3202e9cd
   35088:	b1589204 	.word	0xb1589204
   3508c:	1e4b9912 	.word	0x1e4b9912
   35090:	3b01b131 	.word	0x3b01b131
   35094:	60021c5f 	.word	0x60021c5f
   35098:	0004f100 	.word	0x0004f100
   3509c:	9813d1f9 	.word	0x9813d1f9
   350a0:	fb6ef001 	.word	0xfb6ef001
   350a4:	23012200 	.word	0x23012200
   350a8:	e9cd9816 	.word	0xe9cd9816
   350ac:	92133211 	.word	0x92133211
   350b0:	9915b158 	.word	0x9915b158
   350b4:	b1311e4b 	.word	0xb1311e4b
   350b8:	1c5e3b01 	.word	0x1c5e3b01
   350bc:	f1006002 	.word	0xf1006002
   350c0:	d1f90004 	.word	0xd1f90004
   350c4:	f0019816 	.word	0xf0019816
   350c8:	2200fb5b 	.word	0x2200fb5b
   350cc:	98192301 	.word	0x98192301
   350d0:	3214e9cd 	.word	0x3214e9cd
   350d4:	b1589216 	.word	0xb1589216
   350d8:	1e4b9918 	.word	0x1e4b9918
   350dc:	3b01b131 	.word	0x3b01b131
   350e0:	60021c5d 	.word	0x60021c5d
   350e4:	0004f100 	.word	0x0004f100
   350e8:	9819d1f9 	.word	0x9819d1f9
   350ec:	fb48f001 	.word	0xfb48f001
   350f0:	23012200 	.word	0x23012200
   350f4:	e9cd981c 	.word	0xe9cd981c
   350f8:	92193217 	.word	0x92193217
   350fc:	f43f2800 	.word	0xf43f2800
   35100:	991baf22 	.word	0x991baf22
   35104:	b1311e4b 	.word	0xb1311e4b
   35108:	1c593b01 	.word	0x1c593b01
   3510c:	f1006002 	.word	0xf1006002
   35110:	d1f90004 	.word	0xd1f90004
   35114:	f001981c 	.word	0xf001981c
   35118:	4620fb33 	.word	0x4620fb33
   3511c:	e8bdb021 	.word	0xe8bdb021
   35120:	2b0183f0 	.word	0x2b0183f0
   35124:	d96b9a02 	.word	0xd96b9a02
   35128:	f47f2a00 	.word	0xf47f2a00
   3512c:	4639af4b 	.word	0x4639af4b
   35130:	462aa805 	.word	0x462aa805
   35134:	fb9af7ff 	.word	0xfb9af7ff
   35138:	28004604 	.word	0x28004604
   3513c:	af44f47f 	.word	0xaf44f47f
   35140:	a905a808 	.word	0xa905a808
   35144:	ff38f7fd 	.word	0xff38f7fd
   35148:	28004604 	.word	0x28004604
   3514c:	af3cf47f 	.word	0xaf3cf47f
   35150:	4629a811 	.word	0x4629a811
   35154:	ff30f7fd 	.word	0xff30f7fd
   35158:	28004604 	.word	0x28004604
   3515c:	af34f47f 	.word	0xaf34f47f
   35160:	4629a814 	.word	0x4629a814
   35164:	ff28f7fd 	.word	0xff28f7fd
   35168:	28004604 	.word	0x28004604
   3516c:	af2cf47f 	.word	0xaf2cf47f
   35170:	2101a80b 	.word	0x2101a80b
   35174:	f8acf7fe 	.word	0xf8acf7fe
   35178:	28004604 	.word	0x28004604
   3517c:	af24f47f 	.word	0xaf24f47f
   35180:	a80e4601 	.word	0xa80e4601
   35184:	f8a4f7fe 	.word	0xf8a4f7fe
   35188:	28004604 	.word	0x28004604
   3518c:	af1cf47f 	.word	0xaf1cf47f
   35190:	a8174601 	.word	0xa8174601
   35194:	f89cf7fe 	.word	0xf89cf7fe
   35198:	28004604 	.word	0x28004604
   3519c:	af14f47f 	.word	0xaf14f47f
   351a0:	2101a81a 	.word	0x2101a81a
   351a4:	f894f7fe 	.word	0xf894f7fe
   351a8:	28004604 	.word	0x28004604
   351ac:	af0cf47f 	.word	0xaf0cf47f
   351b0:	f04f4681 	.word	0xf04f4681
   351b4:	af010801 	.word	0xaf010801
   351b8:	681b9b0a 	.word	0x681b9b0a
   351bc:	d42c07da 	.word	0xd42c07da
   351c0:	a8082101 	.word	0xa8082101
   351c4:	fac6f7fe 	.word	0xfac6f7fe
   351c8:	28004604 	.word	0x28004604
   351cc:	aefcf47f 	.word	0xaefcf47f
   351d0:	681b9b0d 	.word	0x681b9b0d
   351d4:	d44407d8 	.word	0xd44407d8
   351d8:	681b9b10 	.word	0x681b9b10
   351dc:	d44007d9 	.word	0xd44007d9
   351e0:	a80b2101 	.word	0xa80b2101
   351e4:	fab6f7fe 	.word	0xfab6f7fe
   351e8:	28004604 	.word	0x28004604
   351ec:	aeecf47f 	.word	0xaeecf47f
   351f0:	a80e2101 	.word	0xa80e2101
   351f4:	faaef7fe 	.word	0xfaaef7fe
   351f8:	28004604 	.word	0x28004604
   351fc:	e6e3d0dc 	.word	0xe6e3d0dc
   35200:	f6ff2a00 	.word	0xf6ff2a00
   35204:	680baedf 	.word	0x680baedf
   35208:	d88d2b01 	.word	0xd88d2b01
   3520c:	d18e2b00 	.word	0xd18e2b00
   35210:	2a004252 	.word	0x2a004252
   35214:	aed6f47f 	.word	0xaed6f47f
   35218:	9b16e789 	.word	0x9b16e789
   3521c:	07d8681b 	.word	0x07d8681b
   35220:	2101d443 	.word	0x2101d443
   35224:	f7fea814 	.word	0xf7fea814
   35228:	4604fa95 	.word	0x4604fa95
   3522c:	f47f2800 	.word	0xf47f2800
   35230:	9b19aecb 	.word	0x9b19aecb
   35234:	07db681b 	.word	0x07db681b
   35238:	9b1cd425 	.word	0x9b1cd425
   3523c:	07dc681b 	.word	0x07dc681b
   35240:	2101d421 	.word	0x2101d421
   35244:	f7fea817 	.word	0xf7fea817
   35248:	4604fa85 	.word	0x4604fa85
   3524c:	f47f2800 	.word	0xf47f2800
   35250:	2101aebb 	.word	0x2101aebb
   35254:	f7fea81a 	.word	0xf7fea81a
   35258:	4604fa7d 	.word	0x4604fa7d
   3525c:	d0dc2800 	.word	0xd0dc2800
   35260:	a90be6b2 	.word	0xa90be6b2
   35264:	4608aa11 	.word	0x4608aa11
   35268:	fd04f7fe 	.word	0xfd04f7fe
   3526c:	28004604 	.word	0x28004604
   35270:	aeaaf47f 	.word	0xaeaaf47f
   35274:	aa05a90e 	.word	0xaa05a90e
   35278:	f7fe4608 	.word	0xf7fe4608
   3527c:	4604fd6f 	.word	0x4604fd6f
   35280:	d0ad2800 	.word	0xd0ad2800
   35284:	a917e6a0 	.word	0xa917e6a0
   35288:	4608aa11 	.word	0x4608aa11
   3528c:	fcf2f7fe 	.word	0xfcf2f7fe
   35290:	28004604 	.word	0x28004604
   35294:	ae98f47f 	.word	0xae98f47f
   35298:	aa05a91a 	.word	0xaa05a91a
   3529c:	f7fe4608 	.word	0xf7fe4608
   352a0:	4604fd5d 	.word	0x4604fd5d
   352a4:	d0cc2800 	.word	0xd0cc2800
   352a8:	a914e68e 	.word	0xa914e68e
   352ac:	f7fea808 	.word	0xf7fea808
   352b0:	2800fac1 	.word	0x2800fac1
   352b4:	a908db3d 	.word	0xa908db3d
   352b8:	4608aa14 	.word	0x4608aa14
   352bc:	fd4ef7fe 	.word	0xfd4ef7fe
   352c0:	28004604 	.word	0x28004604
   352c4:	ae80f47f 	.word	0xae80f47f
   352c8:	aa17a90b 	.word	0xaa17a90b
   352cc:	f7fe4608 	.word	0xf7fe4608
   352d0:	4604fd45 	.word	0x4604fd45
   352d4:	f47f2800 	.word	0xf47f2800
   352d8:	a90eae77 	.word	0xa90eae77
   352dc:	4608aa1a 	.word	0x4608aa1a
   352e0:	fd3cf7fe 	.word	0xfd3cf7fe
   352e4:	28004604 	.word	0x28004604
   352e8:	ae6ef47f 	.word	0xae6ef47f
   352ec:	a808a91d 	.word	0xa808a91d
   352f0:	9004f8cd 	.word	0x9004f8cd
   352f4:	881de9cd 	.word	0x881de9cd
   352f8:	f7fd971f 	.word	0xf7fd971f
   352fc:	2800fd97 	.word	0x2800fd97
   35300:	af5af47f 	.word	0xaf5af47f
   35304:	f04f4680 	.word	0xf04f4680
   35308:	a91d0901 	.word	0xa91d0901
   3530c:	f8cda817 	.word	0xf8cda817
   35310:	e9cd8004 	.word	0xe9cd8004
   35314:	971f991d 	.word	0x971f991d
   35318:	fd88f7fd 	.word	0xfd88f7fd
   3531c:	da232800 	.word	0xda232800
   35320:	462aa917 	.word	0x462aa917
   35324:	f7fe4608 	.word	0xf7fe4608
   35328:	4604fca5 	.word	0x4604fca5
   3532c:	d0ec2800 	.word	0xd0ec2800
   35330:	a914e64a 	.word	0xa914e64a
   35334:	4608aa08 	.word	0x4608aa08
   35338:	fd10f7fe 	.word	0xfd10f7fe
   3533c:	28004604 	.word	0x28004604
   35340:	ae42f47f 	.word	0xae42f47f
   35344:	aa0ba917 	.word	0xaa0ba917
   35348:	f7fe4608 	.word	0xf7fe4608
   3534c:	4604fd07 	.word	0x4604fd07
   35350:	f47f2800 	.word	0xf47f2800
   35354:	a91aae39 	.word	0xa91aae39
   35358:	4608aa0e 	.word	0x4608aa0e
   3535c:	fcfef7fe 	.word	0xfcfef7fe
   35360:	28004604 	.word	0x28004604
   35364:	e62fd0c2 	.word	0xe62fd0c2
   35368:	a8174629 	.word	0xa8174629
   3536c:	fa62f7fe 	.word	0xfa62f7fe
   35370:	db082800 	.word	0xdb082800
   35374:	462aa917 	.word	0x462aa917
   35378:	f7fe4608 	.word	0xf7fe4608
   3537c:	4604fcef 	.word	0x4604fcef
   35380:	d0f12800 	.word	0xd0f12800
   35384:	a917e620 	.word	0xa917e620
   35388:	f7fd4630 	.word	0xf7fd4630
   3538c:	4604fe15 	.word	0x4604fe15
   35390:	bf00e61a 	.word	0xbf00e61a

00035394 <entropy_callback>:
   35394:	4c0ab538 	.word	0x4c0ab538
   35398:	78254b0a 	.word	0x78254b0a
   3539c:	bf282a07 	.word	0xbf282a07
   353a0:	46082207 	.word	0x46082207
   353a4:	1145eb03 	.word	0x1145eb03
   353a8:	fb03f00c 	.word	0xfb03f00c
   353ac:	20007823 	.word	0x20007823
   353b0:	b2db3301 	.word	0xb2db3301
   353b4:	bf082b07 	.word	0xbf082b07
   353b8:	70232300 	.word	0x70232300
   353bc:	bf00bd38 	.word	0xbf00bd38
   353c0:	2002c8b9 	.word	0x2002c8b9
   353c4:	00043f30 	.word	0x00043f30

000353c8 <es256_key_generate>:
   353c8:	b0e5b5f0 	.word	0xb0e5b5f0
   353cc:	71a8f89d 	.word	0x71a8f89d
   353d0:	b152b158 	.word	0xb152b158
   353d4:	291fb14b 	.word	0x291fb14b
   353d8:	6819d907 	.word	0x6819d907
   353dc:	d904293f 	.word	0xd904293f
   353e0:	2955b13f 	.word	0x2955b13f
   353e4:	240cd805 	.word	0x240cd805
   353e8:	2416e000 	.word	0x2416e000
   353ec:	b0654620 	.word	0xb0654620
   353f0:	461dbdf0 	.word	0x461dbdf0
   353f4:	21002304 	.word	0x21002304
   353f8:	46164604 	.word	0x46164604
   353fc:	f44fa814 	.word	0xf44fa814
   35400:	f88d72a0 	.word	0xf88d72a0
   35404:	f00c300c 	.word	0xf00c300c
   35408:	a814faf4 	.word	0xa814faf4
   3540c:	fd90f7f6 	.word	0xfd90f7f6
   35410:	49292300 	.word	0x49292300
   35414:	a814461a 	.word	0xa814461a
   35418:	f7f69300 	.word	0xf7f69300
   3541c:	a814fe8b 	.word	0xa814fe8b
   35420:	46212220 	.word	0x46212220
   35424:	feaef7f6 	.word	0xfeaef7f6
   35428:	a814b9b8 	.word	0xa814b9b8
   3542c:	fd86f7f6 	.word	0xfd86f7f6
   35430:	f10d4621 	.word	0xf10d4621
   35434:	f006000d 	.word	0xf006000d
   35438:	4604ffa7 	.word	0x4604ffa7
   3543c:	b1c7b9b8 	.word	0xb1c7b9b8
   35440:	f7f6a814 	.word	0xf7f6a814
   35444:	2002f845 	.word	0x2002f845
   35448:	f848f7f6 	.word	0xf848f7f6
   3544c:	a8144601 	.word	0xa8144601
   35450:	f852f7f6 	.word	0xf852f7f6
   35454:	240eb1a8 	.word	0x240eb1a8
   35458:	4a18e7c8 	.word	0x4a18e7c8
   3545c:	78114b18 	.word	0x78114b18
   35460:	22074620 	.word	0x22074620
   35464:	1141eb03 	.word	0x1141eb03
   35468:	faa3f00c 	.word	0xfaa3f00c
   3546c:	2423e7dd 	.word	0x2423e7dd
   35470:	a903e7bc 	.word	0xa903e7bc
   35474:	22401c70 	.word	0x22401c70
   35478:	fa9bf00c 	.word	0xfa9bf00c
   3547c:	602b2341 	.word	0x602b2341
   35480:	2103e7b4 	.word	0x2103e7b4
   35484:	f7f79815 	.word	0xf7f79815
   35488:	2800f8df 	.word	0x2800f8df
   3548c:	9815d1e3 	.word	0x9815d1e3
   35490:	f100aa03 	.word	0xf100aa03
   35494:	23410188 	.word	0x23410188
   35498:	fba4f7f9 	.word	0xfba4f7f9
   3549c:	d1da2800 	.word	0xd1da2800
   354a0:	a8144631 	.word	0xa8144631
   354a4:	f7f4682a 	.word	0xf7f4682a
   354a8:	23b2fe89 	.word	0x23b2fe89
   354ac:	602b4604 	.word	0x602b4604
   354b0:	d09b2800 	.word	0xd09b2800
   354b4:	bf00e7cf 	.word	0xbf00e7cf
   354b8:	00035395 	.word	0x00035395
   354bc:	2002c8b9 	.word	0x2002c8b9
   354c0:	00043f30 	.word	0x00043f30

000354c4 <bsd_os_application_irq_handler>:
   354c4:	41f0e92d 	.word	0x41f0e92d
   354c8:	f7ed4c33 	.word	0xf7ed4c33
   354cc:	f04fffb1 	.word	0xf04fffb1
   354d0:	4d320803 	.word	0x4d320803
   354d4:	f1044f32 	.word	0xf1044f32
   354d8:	e0040680 	.word	0xe0040680
   354dc:	d0062b04 	.word	0xd0062b04
   354e0:	42b43408 	.word	0x42b43408
   354e4:	f814d03b 	.word	0xf814d03b
   354e8:	2b023c04 	.word	0x2b023c04
   354ec:	6820d1f6 	.word	0x6820d1f6
   354f0:	6803882a 	.word	0x6803882a
   354f4:	429ab29b 	.word	0x429ab29b
   354f8:	8a2ad033 	.word	0x8a2ad033
   354fc:	d032429a 	.word	0xd032429a
   35500:	429a8c2a 	.word	0x429a8c2a
   35504:	8e2ad031 	.word	0x8e2ad031
   35508:	d030429a 	.word	0xd030429a
   3550c:	2040f8b5 	.word	0x2040f8b5
   35510:	d036429a 	.word	0xd036429a
   35514:	2050f8b5 	.word	0x2050f8b5
   35518:	d034429a 	.word	0xd034429a
   3551c:	2060f8b5 	.word	0x2060f8b5
   35520:	d032429a 	.word	0xd032429a
   35524:	2070f8b5 	.word	0x2070f8b5
   35528:	d030429a 	.word	0xd030429a
   3552c:	2080f8b5 	.word	0x2080f8b5
   35530:	d02e429a 	.word	0xd02e429a
   35534:	2090f8b5 	.word	0x2090f8b5
   35538:	bf08429a 	.word	0xbf08429a
   3553c:	d1cf2309 	.word	0xd1cf2309
   35540:	1303eb05 	.word	0x1303eb05
   35544:	68d9685a 	.word	0x68d9685a
   35548:	b9904790 	.word	0xb9904790
   3554c:	68202201 	.word	0x68202201
   35550:	2c04f804 	.word	0x2c04f804
   35554:	340868fb 	.word	0x340868fb
   35558:	42b44798 	.word	0x42b44798
   3555c:	e8bdd1c3 	.word	0xe8bdd1c3
   35560:	230081f0 	.word	0x230081f0
   35564:	2301e7ec 	.word	0x2301e7ec
   35568:	2302e7ea 	.word	0x2302e7ea
   3556c:	2303e7e8 	.word	0x2303e7e8
   35570:	2802e7e6 	.word	0x2802e7e6
   35574:	2304bf0a 	.word	0x2304bf0a
   35578:	8c04f804 	.word	0x8c04f804
   3557c:	3c04f804 	.word	0x3c04f804
   35580:	2304e7ae 	.word	0x2304e7ae
   35584:	2305e7dc 	.word	0x2305e7dc
   35588:	2306e7da 	.word	0x2306e7da
   3558c:	2307e7d8 	.word	0x2307e7d8
   35590:	2308e7d6 	.word	0x2308e7d6
   35594:	bf00e7d4 	.word	0xbf00e7d4
   35598:	20025cd0 	.word	0x20025cd0
   3559c:	20025b94 	.word	0x20025b94
   355a0:	20025c34 	.word	0x20025c34

000355a4 <rpc_framework_init>:
   355a4:	22a0b508 	.word	0x22a0b508
   355a8:	48022100 	.word	0x48022100
   355ac:	fa21f00c 	.word	0xfa21f00c
   355b0:	bd082000 	.word	0xbd082000
   355b4:	20025b94 	.word	0x20025b94

000355b8 <rpc_client_register>:
   355b8:	2b008803 	.word	0x2b008803
   355bc:	6842d045 	.word	0x6842d045
   355c0:	2a004601 	.word	0x2a004601
   355c4:	4a30d050 	.word	0x4a30d050
   355c8:	42838810 	.word	0x42838810
   355cc:	e92dd03d 	.word	0xe92dd03d
   355d0:	8a1447f0 	.word	0x8a1447f0
   355d4:	d03542a3 	.word	0xd03542a3
   355d8:	42ab8c15 	.word	0x42ab8c15
   355dc:	8e16d032 	.word	0x8e16d032
   355e0:	d02f42b3 	.word	0xd02f42b3
   355e4:	7040f8b2 	.word	0x7040f8b2
   355e8:	d02b42bb 	.word	0xd02b42bb
   355ec:	c050f8b2 	.word	0xc050f8b2
   355f0:	d0274563 	.word	0xd0274563
   355f4:	e060f8b2 	.word	0xe060f8b2
   355f8:	d0234573 	.word	0xd0234573
   355fc:	8070f8b2 	.word	0x8070f8b2
   35600:	d01f4543 	.word	0xd01f4543
   35604:	9080f8b2 	.word	0x9080f8b2
   35608:	d01b454b 	.word	0xd01b454b
   3560c:	a090f8b2 	.word	0xa090f8b2
   35610:	d0174553 	.word	0xd0174553
   35614:	b35cb1e0 	.word	0xb35cb1e0
   35618:	b36eb365 	.word	0xb36eb365
   3561c:	f1bcb377 	.word	0xf1bcb377
   35620:	d02d0f00 	.word	0xd02d0f00
   35624:	0f00f1be 	.word	0x0f00f1be
   35628:	f1b8d020 	.word	0xf1b8d020
   3562c:	d0290f00 	.word	0xd0290f00
   35630:	0f00f1b9 	.word	0x0f00f1b9
   35634:	2009d00b 	.word	0x2009d00b
   35638:	0f00f1ba 	.word	0x0f00f1ba
   3563c:	2004d008 	.word	0x2004d008
   35640:	87f0e8bd 	.word	0x87f0e8bd
   35644:	e8bd2007 	.word	0xe8bd2007
   35648:	200787f0 	.word	0x200787f0
   3564c:	20084770 	.word	0x20084770
   35650:	52130100 	.word	0x52130100
   35654:	4402684b 	.word	0x4402684b
   35658:	688b6053 	.word	0x688b6053
   3565c:	60932000 	.word	0x60932000
   35660:	60d368cb 	.word	0x60d368cb
   35664:	87f0e8bd 	.word	0x87f0e8bd
   35668:	4770200e 	.word	0x4770200e
   3566c:	e7ef2006 	.word	0xe7ef2006
   35670:	e7ed2001 	.word	0xe7ed2001
   35674:	e7eb2002 	.word	0xe7eb2002
   35678:	e7e92003 	.word	0xe7e92003
   3567c:	e7e72004 	.word	0xe7e72004
   35680:	e7e52005 	.word	0xe7e52005
   35684:	e7e32007 	.word	0xe7e32007
   35688:	20025b94 	.word	0x20025b94

0003568c <rpc_transport_input>:
   3568c:	4a82b538 	.word	0x4a82b538
   35690:	8810680b 	.word	0x8810680b
   35694:	4298b29b 	.word	0x4298b29b
   35698:	8a10d027 	.word	0x8a10d027
   3569c:	d0244298 	.word	0xd0244298
   356a0:	42988c10 	.word	0x42988c10
   356a4:	8e10d021 	.word	0x8e10d021
   356a8:	d01e4298 	.word	0xd01e4298
   356ac:	0040f8b2 	.word	0x0040f8b2
   356b0:	d01a4298 	.word	0xd01a4298
   356b4:	0050f8b2 	.word	0x0050f8b2
   356b8:	d0164298 	.word	0xd0164298
   356bc:	0060f8b2 	.word	0x0060f8b2
   356c0:	d0124298 	.word	0xd0124298
   356c4:	0070f8b2 	.word	0x0070f8b2
   356c8:	d00e4298 	.word	0xd00e4298
   356cc:	0080f8b2 	.word	0x0080f8b2
   356d0:	d00a4298 	.word	0xd00a4298
   356d4:	2090f8b2 	.word	0x2090f8b2
   356d8:	d006429a 	.word	0xd006429a
   356dc:	b1186888 	.word	0xb1186888
   356e0:	691b4b6e 	.word	0x691b4b6e
   356e4:	20004798 	.word	0x20004798
   356e8:	6888bd38 	.word	0x6888bd38
   356ec:	f0002800 	.word	0xf0002800
   356f0:	4a6b8098 	.word	0x4a6b8098
   356f4:	2c006814 	.word	0x2c006814
   356f8:	6894d03c 	.word	0x6894d03c
   356fc:	f0002c00 	.word	0xf0002c00
   35700:	6914809a 	.word	0x6914809a
   35704:	f0002c00 	.word	0xf0002c00
   35708:	6994809a 	.word	0x6994809a
   3570c:	f0002c00 	.word	0xf0002c00
   35710:	6a14809a 	.word	0x6a14809a
   35714:	f0002c00 	.word	0xf0002c00
   35718:	6a94809a 	.word	0x6a94809a
   3571c:	f0002c00 	.word	0xf0002c00
   35720:	6b148084 	.word	0x6b148084
   35724:	f0002c00 	.word	0xf0002c00
   35728:	6b948098 	.word	0x6b948098
   3572c:	f0002c00 	.word	0xf0002c00
   35730:	6c148096 	.word	0x6c148096
   35734:	f0002c00 	.word	0xf0002c00
   35738:	6c948096 	.word	0x6c948096
   3573c:	f0002c00 	.word	0xf0002c00
   35740:	6d148096 	.word	0x6d148096
   35744:	f0002c00 	.word	0xf0002c00
   35748:	6d948096 	.word	0x6d948096
   3574c:	f0002c00 	.word	0xf0002c00
   35750:	6e148098 	.word	0x6e148098
   35754:	f0002c00 	.word	0xf0002c00
   35758:	6e948098 	.word	0x6e948098
   3575c:	f0002c00 	.word	0xf0002c00
   35760:	6f148096 	.word	0x6f148096
   35764:	f0002c00 	.word	0xf0002c00
   35768:	6f948094 	.word	0x6f948094
   3576c:	2001b10c 	.word	0x2001b10c
   35770:	240fbd38 	.word	0x240fbd38
   35774:	05c4eb02 	.word	0x05c4eb02
   35778:	0034f842 	.word	0x0034f842
   3577c:	4b4980ab 	.word	0x4b4980ab
   35780:	2a01781a 	.word	0x2a01781a
   35784:	7a1ad053 	.word	0x7a1ad053
   35788:	d0412a01 	.word	0xd0412a01
   3578c:	2a017c1a 	.word	0x2a017c1a
   35790:	7e1ad04f 	.word	0x7e1ad04f
   35794:	d0502a01 	.word	0xd0502a01
   35798:	2020f893 	.word	0x2020f893
   3579c:	d0502a01 	.word	0xd0502a01
   357a0:	2028f893 	.word	0x2028f893
   357a4:	d0502a01 	.word	0xd0502a01
   357a8:	2030f893 	.word	0x2030f893
   357ac:	d03a2a01 	.word	0xd03a2a01
   357b0:	2038f893 	.word	0x2038f893
   357b4:	d04c2a01 	.word	0xd04c2a01
   357b8:	2040f893 	.word	0x2040f893
   357bc:	d04a2a01 	.word	0xd04a2a01
   357c0:	2048f893 	.word	0x2048f893
   357c4:	d04c2a01 	.word	0xd04c2a01
   357c8:	2050f893 	.word	0x2050f893
   357cc:	d04c2a01 	.word	0xd04c2a01
   357d0:	2058f893 	.word	0x2058f893
   357d4:	d04c2a01 	.word	0xd04c2a01
   357d8:	2060f893 	.word	0x2060f893
   357dc:	d04c2a01 	.word	0xd04c2a01
   357e0:	2068f893 	.word	0x2068f893
   357e4:	d04a2a01 	.word	0xd04a2a01
   357e8:	2070f893 	.word	0x2070f893
   357ec:	d04a2a01 	.word	0xd04a2a01
   357f0:	2078f893 	.word	0x2078f893
   357f4:	d00a2a01 	.word	0xd00a2a01
   357f8:	d0b82c10 	.word	0xd0b82c10
   357fc:	4b282200 	.word	0x4b282200
   35800:	eb032001 	.word	0xeb032001
   35804:	808a01c4 	.word	0x808a01c4
   35808:	2034f843 	.word	0x2034f843
   3580c:	220fbd38 	.word	0x220fbd38
   35810:	eb032402 	.word	0xeb032402
   35814:	f80300c2 	.word	0xf80300c2
   35818:	60414032 	.word	0x60414032
   3581c:	fe00f7ed 	.word	0xfe00f7ed
   35820:	2410e7a5 	.word	0x2410e7a5
   35824:	2206e7ab 	.word	0x2206e7ab
   35828:	2405e7f2 	.word	0x2405e7f2
   3582c:	2200e7a2 	.word	0x2200e7a2
   35830:	2202e7ee 	.word	0x2202e7ee
   35834:	2401e7ec 	.word	0x2401e7ec
   35838:	2203e79c 	.word	0x2203e79c
   3583c:	2402e7e8 	.word	0x2402e7e8
   35840:	2204e798 	.word	0x2204e798
   35844:	2403e7e4 	.word	0x2403e7e4
   35848:	2205e794 	.word	0x2205e794
   3584c:	2404e7e0 	.word	0x2404e7e0
   35850:	2207e790 	.word	0x2207e790
   35854:	2208e7dc 	.word	0x2208e7dc
   35858:	2406e7da 	.word	0x2406e7da
   3585c:	2407e78a 	.word	0x2407e78a
   35860:	2209e788 	.word	0x2209e788
   35864:	2408e7d4 	.word	0x2408e7d4
   35868:	220ae784 	.word	0x220ae784
   3586c:	2409e7d0 	.word	0x2409e7d0
   35870:	220be780 	.word	0x220be780
   35874:	240ae7cc 	.word	0x240ae7cc
   35878:	220ce77c 	.word	0x220ce77c
   3587c:	220de7c8 	.word	0x220de7c8
   35880:	240be7c6 	.word	0x240be7c6
   35884:	220ee776 	.word	0x220ee776
   35888:	240ce7c2 	.word	0x240ce7c2
   3588c:	240de772 	.word	0x240de772
   35890:	240ee770 	.word	0x240ee770
   35894:	bf00e76e 	.word	0xbf00e76e
   35898:	20025b94 	.word	0x20025b94
   3589c:	20025c34 	.word	0x20025c34
   358a0:	20025c4c 	.word	0x20025c4c
   358a4:	20025ccc 	.word	0x20025ccc

000358a8 <rpc_transport_register>:
   358a8:	2900b4f0 	.word	0x2900b4f0
   358ac:	2800d052 	.word	0x2800d052
   358b0:	6883d050 	.word	0x6883d050
   358b4:	d04d2b00 	.word	0xd04d2b00
   358b8:	2b006903 	.word	0x2b006903
   358bc:	6843d04a 	.word	0x6843d04a
   358c0:	d0472b00 	.word	0xd0472b00
   358c4:	2b0068c3 	.word	0x2b0068c3
   358c8:	6803d044 	.word	0x6803d044
   358cc:	d0412b00 	.word	0xd0412b00
   358d0:	2b006943 	.word	0x2b006943
   358d4:	2601d03e 	.word	0x2601d03e
   358d8:	46042500 	.word	0x46042500
   358dc:	4a1f460f 	.word	0x4a1f460f
   358e0:	f8df4b1f 	.word	0xf8df4b1f
   358e4:	7416c080 	.word	0x7416c080
   358e8:	f8827616 	.word	0xf8827616
   358ec:	f8826020 	.word	0xf8826020
   358f0:	f8826028 	.word	0xf8826028
   358f4:	f8826030 	.word	0xf8826030
   358f8:	f8826038 	.word	0xf8826038
   358fc:	f8826040 	.word	0xf8826040
   35900:	f8826048 	.word	0xf8826048
   35904:	f8826050 	.word	0xf8826050
   35908:	f8826058 	.word	0xf8826058
   3590c:	f8826060 	.word	0xf8826060
   35910:	f8826068 	.word	0xf8826068
   35914:	f8826070 	.word	0xf8826070
   35918:	611d6078 	.word	0x611d6078
   3591c:	621d619d 	.word	0x621d619d
   35920:	631d629d 	.word	0x631d629d
   35924:	641d639d 	.word	0x641d639d
   35928:	651d649d 	.word	0x651d649d
   3592c:	661d659d 	.word	0x661d659d
   35930:	671d669d 	.word	0x671d669d
   35934:	7016679d 	.word	0x7016679d
   35938:	601d7216 	.word	0x601d7216
   3593c:	cc0f609d 	.word	0xcc0f609d
   35940:	000fe8ac 	.word	0x000fe8ac
   35944:	0003e894 	.word	0x0003e894
   35948:	0003e88c 	.word	0x0003e88c
   3594c:	4628603e 	.word	0x4628603e
   35950:	4770bcf0 	.word	0x4770bcf0
   35954:	4628250e 	.word	0x4628250e
   35958:	4770bcf0 	.word	0x4770bcf0
   3595c:	20025ccc 	.word	0x20025ccc
   35960:	20025c4c 	.word	0x20025c4c
   35964:	20025c34 	.word	0x20025c34

00035968 <rpc_transport_unregister>:
   35968:	d03a2800 	.word	0xd03a2800
   3596c:	47f0e92d 	.word	0x47f0e92d
   35970:	4c1d4680 	.word	0x4c1d4680
   35974:	05a0f104 	.word	0x05a0f104
   35978:	341068a3 	.word	0x341068a3
   3597c:	4798b103 	.word	0x4798b103
   35980:	d1f942ac 	.word	0xd1f942ac
   35984:	0901f04f 	.word	0x0901f04f
   35988:	4c182600 	.word	0x4c182600
   3598c:	f8df4d18 	.word	0xf8df4d18
   35990:	f104a064 	.word	0xf104a064
   35994:	f8140780 	.word	0xf8140780
   35998:	2b013c04 	.word	0x2b013c04
   3599c:	f8dad005 	.word	0xf8dad005
   359a0:	6820300c 	.word	0x6820300c
   359a4:	f8044798 	.word	0xf8044798
   359a8:	f8559c04 	.word	0xf8559c04
   359ac:	34080c04 	.word	0x34080c04
   359b0:	f8dab128 	.word	0xf8dab128
   359b4:	47983010 	.word	0x47983010
   359b8:	f845802e 	.word	0xf845802e
   359bc:	42bc6c04 	.word	0x42bc6c04
   359c0:	0508f105 	.word	0x0508f105
   359c4:	f8d8d1e7 	.word	0xf8d8d1e7
   359c8:	22180000 	.word	0x22180000
   359cc:	eb003801 	.word	0xeb003801
   359d0:	eb0a0040 	.word	0xeb0a0040
   359d4:	210000c0 	.word	0x210000c0
   359d8:	f80bf00c 	.word	0xf80bf00c
   359dc:	e8bd2000 	.word	0xe8bd2000
   359e0:	200e87f0 	.word	0x200e87f0
   359e4:	bf004770 	.word	0xbf004770
   359e8:	20025b94 	.word	0x20025b94
   359ec:	20025cd0 	.word	0x20025cd0
   359f0:	20025c50 	.word	0x20025c50
   359f4:	20025c34 	.word	0x20025c34

000359f8 <rpc_message_send>:
   359f8:	b171b168 	.word	0xb171b168
   359fc:	68534a09 	.word	0x68534a09
   35a00:	684bb16b 	.word	0x684bb16b
   35a04:	f0238008 	.word	0xf0238008
   35a08:	f04303ff 	.word	0xf04303ff
   35a0c:	68120302 	.word	0x68120302
   35a10:	4608604b 	.word	0x4608604b
   35a14:	20074710 	.word	0x20074710
   35a18:	200e4770 	.word	0x200e4770
   35a1c:	20084770 	.word	0x20084770
   35a20:	bf004770 	.word	0xbf004770
   35a24:	20025c34 	.word	0x20025c34

00035a28 <rpc_message_alloc>:
   35a28:	b330b35a 	.word	0xb330b35a
   35a2c:	e92d2300 	.word	0xe92d2300
   35a30:	4f1541f0 	.word	0x4f1541f0
   35a34:	687b6013 	.word	0x687b6013
   35a38:	4615b30b 	.word	0x4615b30b
   35a3c:	4606460c 	.word	0x4606460c
   35a40:	4798b959 	.word	0x4798b959
   35a44:	b1a84603 	.word	0xb1a84603
   35a48:	60dc46a0 	.word	0x60dc46a0
   35a4c:	8008f8c3 	.word	0x8008f8c3
   35a50:	602b801e 	.word	0x602b801e
   35a54:	e8bd2000 	.word	0xe8bd2000
   35a58:	68bb81f0 	.word	0x68bb81f0
   35a5c:	47984608 	.word	0x47984608
   35a60:	b1384680 	.word	0xb1384680
   35a64:	4798687b 	.word	0x4798687b
   35a68:	28004603 	.word	0x28004603
   35a6c:	693bd1ed 	.word	0x693bd1ed
   35a70:	47984640 	.word	0x47984640
   35a74:	e8bd2004 	.word	0xe8bd2004
   35a78:	200781f0 	.word	0x200781f0
   35a7c:	20084770 	.word	0x20084770
   35a80:	200ee7f9 	.word	0x200ee7f9
   35a84:	bf004770 	.word	0xbf004770
   35a88:	20025c34 	.word	0x20025c34

00035a8c <rpc_message_free>:
   35a8c:	f0002800 	.word	0xf0002800
   35a90:	2900808c 	.word	0x2900808c
   35a94:	80e9f000 	.word	0x80e9f000
   35a98:	4a83b538 	.word	0x4a83b538
   35a9c:	2b006853 	.word	0x2b006853
   35aa0:	8085f000 	.word	0x8085f000
   35aa4:	46084c81 	.word	0x46084c81
   35aa8:	42996863 	.word	0x42996863
   35aac:	8085f000 	.word	0x8085f000
   35ab0:	429868e3 	.word	0x429868e3
   35ab4:	808ef000 	.word	0x808ef000
   35ab8:	42986963 	.word	0x42986963
   35abc:	8090f000 	.word	0x8090f000
   35ac0:	429869e3 	.word	0x429869e3
   35ac4:	8092f000 	.word	0x8092f000
   35ac8:	42986a63 	.word	0x42986a63
   35acc:	8095f000 	.word	0x8095f000
   35ad0:	42986ae3 	.word	0x42986ae3
   35ad4:	8098f000 	.word	0x8098f000
   35ad8:	42986b63 	.word	0x42986b63
   35adc:	809bf000 	.word	0x809bf000
   35ae0:	42986be3 	.word	0x42986be3
   35ae4:	809ef000 	.word	0x809ef000
   35ae8:	42986c63 	.word	0x42986c63
   35aec:	80a1f000 	.word	0x80a1f000
   35af0:	42986ce3 	.word	0x42986ce3
   35af4:	80a4f000 	.word	0x80a4f000
   35af8:	42986d63 	.word	0x42986d63
   35afc:	80a7f000 	.word	0x80a7f000
   35b00:	42986de3 	.word	0x42986de3
   35b04:	80aaf000 	.word	0x80aaf000
   35b08:	42986e63 	.word	0x42986e63
   35b0c:	80aff000 	.word	0x80aff000
   35b10:	42986ee3 	.word	0x42986ee3
   35b14:	80b2f000 	.word	0x80b2f000
   35b18:	42986f63 	.word	0x42986f63
   35b1c:	80b5f000 	.word	0x80b5f000
   35b20:	42836fe3 	.word	0x42836fe3
   35b24:	80b8f000 	.word	0x80b8f000
   35b28:	479868d3 	.word	0x479868d3
   35b2c:	2b047823 	.word	0x2b047823
   35b30:	7a23d03f 	.word	0x7a23d03f
   35b34:	d03c2b04 	.word	0xd03c2b04
   35b38:	2b047c23 	.word	0x2b047c23
   35b3c:	7e23d039 	.word	0x7e23d039
   35b40:	d0362b04 	.word	0xd0362b04
   35b44:	3020f894 	.word	0x3020f894
   35b48:	d0322b04 	.word	0xd0322b04
   35b4c:	3028f894 	.word	0x3028f894
   35b50:	d02e2b04 	.word	0xd02e2b04
   35b54:	3030f894 	.word	0x3030f894
   35b58:	d02a2b04 	.word	0xd02a2b04
   35b5c:	3038f894 	.word	0x3038f894
   35b60:	d0262b04 	.word	0xd0262b04
   35b64:	3040f894 	.word	0x3040f894
   35b68:	d0222b04 	.word	0xd0222b04
   35b6c:	3048f894 	.word	0x3048f894
   35b70:	d01e2b04 	.word	0xd01e2b04
   35b74:	3050f894 	.word	0x3050f894
   35b78:	d01a2b04 	.word	0xd01a2b04
   35b7c:	3058f894 	.word	0x3058f894
   35b80:	d0162b04 	.word	0xd0162b04
   35b84:	3060f894 	.word	0x3060f894
   35b88:	d0122b04 	.word	0xd0122b04
   35b8c:	3068f894 	.word	0x3068f894
   35b90:	d00e2b04 	.word	0xd00e2b04
   35b94:	3070f894 	.word	0x3070f894
   35b98:	d00a2b04 	.word	0xd00a2b04
   35b9c:	3078f894 	.word	0x3078f894
   35ba0:	bf182b04 	.word	0xbf182b04
   35ba4:	d0042000 	.word	0xd0042000
   35ba8:	2007bd38 	.word	0x2007bd38
   35bac:	20084770 	.word	0x20084770
   35bb0:	f7edbd38 	.word	0xf7edbd38
   35bb4:	2000fc35 	.word	0x2000fc35
   35bb8:	7821bd38 	.word	0x7821bd38
   35bbc:	f47f2903 	.word	0xf47f2903
   35bc0:	2100af77 	.word	0x2100af77
   35bc4:	46182501 	.word	0x46182501
   35bc8:	f80468d2 	.word	0xf80468d2
   35bcc:	47905031 	.word	0x47905031
   35bd0:	bd382000 	.word	0xbd382000
   35bd4:	29037a21 	.word	0x29037a21
   35bd8:	af6ef47f 	.word	0xaf6ef47f
   35bdc:	e7f12101 	.word	0xe7f12101
   35be0:	29037c21 	.word	0x29037c21
   35be4:	af6cf47f 	.word	0xaf6cf47f
   35be8:	e7eb2102 	.word	0xe7eb2102
   35bec:	29037e21 	.word	0x29037e21
   35bf0:	6a63d0e8 	.word	0x6a63d0e8
   35bf4:	f47f4298 	.word	0xf47f4298
   35bf8:	f894af6b 	.word	0xf894af6b
   35bfc:	29031020 	.word	0x29031020
   35c00:	af66f47f 	.word	0xaf66f47f
   35c04:	e7dd2104 	.word	0xe7dd2104
   35c08:	1028f894 	.word	0x1028f894
   35c0c:	f47f2903 	.word	0xf47f2903
   35c10:	2105af63 	.word	0x2105af63
   35c14:	f894e7d6 	.word	0xf894e7d6
   35c18:	29031030 	.word	0x29031030
   35c1c:	af60f47f 	.word	0xaf60f47f
   35c20:	e7cf2106 	.word	0xe7cf2106
   35c24:	1038f894 	.word	0x1038f894
   35c28:	f47f2903 	.word	0xf47f2903
   35c2c:	2107af5d 	.word	0x2107af5d
   35c30:	f894e7c8 	.word	0xf894e7c8
   35c34:	29031040 	.word	0x29031040
   35c38:	af5af47f 	.word	0xaf5af47f
   35c3c:	e7c12108 	.word	0xe7c12108
   35c40:	1048f894 	.word	0x1048f894
   35c44:	f47f2903 	.word	0xf47f2903
   35c48:	2109af57 	.word	0x2109af57
   35c4c:	f894e7ba 	.word	0xf894e7ba
   35c50:	29031050 	.word	0x29031050
   35c54:	af54f47f 	.word	0xaf54f47f
   35c58:	e7b3210a 	.word	0xe7b3210a
   35c5c:	1058f894 	.word	0x1058f894
   35c60:	f47f2903 	.word	0xf47f2903
   35c64:	210baf51 	.word	0x210baf51
   35c68:	200ee7ac 	.word	0x200ee7ac
   35c6c:	f8944770 	.word	0xf8944770
   35c70:	29031060 	.word	0x29031060
   35c74:	af4cf47f 	.word	0xaf4cf47f
   35c78:	e7a3210c 	.word	0xe7a3210c
   35c7c:	1068f894 	.word	0x1068f894
   35c80:	f47f2903 	.word	0xf47f2903
   35c84:	210daf49 	.word	0x210daf49
   35c88:	f894e79c 	.word	0xf894e79c
   35c8c:	29031070 	.word	0x29031070
   35c90:	af46f47f 	.word	0xaf46f47f
   35c94:	e795210e 	.word	0xe795210e
   35c98:	3078f894 	.word	0x3078f894
   35c9c:	f47f2b03 	.word	0xf47f2b03
   35ca0:	4603af43 	.word	0x4603af43
   35ca4:	e78d210f 	.word	0xe78d210f
   35ca8:	20025c34 	.word	0x20025c34
   35cac:	20025ccc 	.word	0x20025ccc

00035cb0 <rpc_message_data_free>:
   35cb0:	f0002800 	.word	0xf0002800
   35cb4:	29008091 	.word	0x29008091
   35cb8:	80e4f000 	.word	0x80e4f000
   35cbc:	4a81b538 	.word	0x4a81b538
   35cc0:	2b006853 	.word	0x2b006853
   35cc4:	808af000 	.word	0x808af000
   35cc8:	681c4b7f 	.word	0x681c4b7f
   35ccc:	f00042a1 	.word	0xf00042a1
   35cd0:	689c8087 	.word	0x689c8087
   35cd4:	f00042a1 	.word	0xf00042a1
   35cd8:	691c808f 	.word	0x691c808f
   35cdc:	f00042a1 	.word	0xf00042a1
   35ce0:	699c8091 	.word	0x699c8091
   35ce4:	f00042a1 	.word	0xf00042a1
   35ce8:	6a1c8093 	.word	0x6a1c8093
   35cec:	f00042a1 	.word	0xf00042a1
   35cf0:	6a9c8095 	.word	0x6a9c8095
   35cf4:	f00042a1 	.word	0xf00042a1
   35cf8:	6b1c8097 	.word	0x6b1c8097
   35cfc:	f00042a1 	.word	0xf00042a1
   35d00:	6b9c8099 	.word	0x6b9c8099
   35d04:	f00042a1 	.word	0xf00042a1
   35d08:	6c1c809b 	.word	0x6c1c809b
   35d0c:	f00042a1 	.word	0xf00042a1
   35d10:	6c9c809d 	.word	0x6c9c809d
   35d14:	f00042a1 	.word	0xf00042a1
   35d18:	6d1c80a0 	.word	0x6d1c80a0
   35d1c:	f00042a1 	.word	0xf00042a1
   35d20:	6d9c80a3 	.word	0x6d9c80a3
   35d24:	f00042a1 	.word	0xf00042a1
   35d28:	6e1c80a6 	.word	0x6e1c80a6
   35d2c:	f00042a1 	.word	0xf00042a1
   35d30:	6e9c80ab 	.word	0x6e9c80ab
   35d34:	f00042a1 	.word	0xf00042a1
   35d38:	6f1c80ae 	.word	0x6f1c80ae
   35d3c:	f00042a1 	.word	0xf00042a1
   35d40:	6f9c80b1 	.word	0x6f9c80b1
   35d44:	f000428c 	.word	0xf000428c
   35d48:	691380b4 	.word	0x691380b4
   35d4c:	47984608 	.word	0x47984608
   35d50:	781a4b5e 	.word	0x781a4b5e
   35d54:	d03b2a04 	.word	0xd03b2a04
   35d58:	2a047a1a 	.word	0x2a047a1a
   35d5c:	7c1ad038 	.word	0x7c1ad038
   35d60:	d0352a04 	.word	0xd0352a04
   35d64:	2a047e1a 	.word	0x2a047e1a
   35d68:	f893d032 	.word	0xf893d032
   35d6c:	2a042020 	.word	0x2a042020
   35d70:	f893d02e 	.word	0xf893d02e
   35d74:	2a042028 	.word	0x2a042028
   35d78:	f893d02a 	.word	0xf893d02a
   35d7c:	2a042030 	.word	0x2a042030
   35d80:	f893d026 	.word	0xf893d026
   35d84:	2a042038 	.word	0x2a042038
   35d88:	f893d022 	.word	0xf893d022
   35d8c:	2a042040 	.word	0x2a042040
   35d90:	f893d01e 	.word	0xf893d01e
   35d94:	2a042048 	.word	0x2a042048
   35d98:	f893d01a 	.word	0xf893d01a
   35d9c:	2a042050 	.word	0x2a042050
   35da0:	f893d016 	.word	0xf893d016
   35da4:	2a042058 	.word	0x2a042058
   35da8:	f893d012 	.word	0xf893d012
   35dac:	2a042060 	.word	0x2a042060
   35db0:	f893d00e 	.word	0xf893d00e
   35db4:	2a042068 	.word	0x2a042068
   35db8:	f893d00a 	.word	0xf893d00a
   35dbc:	2a042070 	.word	0x2a042070
   35dc0:	f893d006 	.word	0xf893d006
   35dc4:	2b043078 	.word	0x2b043078
   35dc8:	2000bf18 	.word	0x2000bf18
   35dcc:	bd38d000 	.word	0xbd38d000
   35dd0:	fb26f7ed 	.word	0xfb26f7ed
   35dd4:	bd382000 	.word	0xbd382000
   35dd8:	47702007 	.word	0x47702007
   35ddc:	bd382008 	.word	0xbd382008
   35de0:	4284889c 	.word	0x4284889c
   35de4:	af75f47f 	.word	0xaf75f47f
   35de8:	20002400 	.word	0x20002400
   35dec:	05c4eb03 	.word	0x05c4eb03
   35df0:	0034f843 	.word	0x0034f843
   35df4:	e7a880a8 	.word	0xe7a880a8
   35df8:	4284899c 	.word	0x4284899c
   35dfc:	af6df47f 	.word	0xaf6df47f
   35e00:	e7f22401 	.word	0xe7f22401
   35e04:	42848a9c 	.word	0x42848a9c
   35e08:	af6bf47f 	.word	0xaf6bf47f
   35e0c:	e7ec2402 	.word	0xe7ec2402
   35e10:	42848b9c 	.word	0x42848b9c
   35e14:	af69f47f 	.word	0xaf69f47f
   35e18:	e7e62403 	.word	0xe7e62403
   35e1c:	42848c9c 	.word	0x42848c9c
   35e20:	af67f47f 	.word	0xaf67f47f
   35e24:	e7e02404 	.word	0xe7e02404
   35e28:	42848d9c 	.word	0x42848d9c
   35e2c:	af65f47f 	.word	0xaf65f47f
   35e30:	e7da2405 	.word	0xe7da2405
   35e34:	42848e9c 	.word	0x42848e9c
   35e38:	af63f47f 	.word	0xaf63f47f
   35e3c:	e7d42406 	.word	0xe7d42406
   35e40:	42848f9c 	.word	0x42848f9c
   35e44:	af61f47f 	.word	0xaf61f47f
   35e48:	e7ce2407 	.word	0xe7ce2407
   35e4c:	4044f8b3 	.word	0x4044f8b3
   35e50:	f47f4284 	.word	0xf47f4284
   35e54:	2408af5e 	.word	0x2408af5e
   35e58:	f8b3e7c7 	.word	0xf8b3e7c7
   35e5c:	4284404c 	.word	0x4284404c
   35e60:	af5bf47f 	.word	0xaf5bf47f
   35e64:	e7c02409 	.word	0xe7c02409
   35e68:	4054f8b3 	.word	0x4054f8b3
   35e6c:	f47f4284 	.word	0xf47f4284
   35e70:	240aaf58 	.word	0x240aaf58
   35e74:	f8b3e7b9 	.word	0xf8b3e7b9
   35e78:	4284405c 	.word	0x4284405c
   35e7c:	af55f47f 	.word	0xaf55f47f
   35e80:	e7b2240b 	.word	0xe7b2240b
   35e84:	4770200e 	.word	0x4770200e
   35e88:	4064f8b3 	.word	0x4064f8b3
   35e8c:	f47f4284 	.word	0xf47f4284
   35e90:	240caf50 	.word	0x240caf50
   35e94:	f8b3e7a9 	.word	0xf8b3e7a9
   35e98:	4284406c 	.word	0x4284406c
   35e9c:	af4df47f 	.word	0xaf4df47f
   35ea0:	e7a2240d 	.word	0xe7a2240d
   35ea4:	4074f8b3 	.word	0x4074f8b3
   35ea8:	f47f4284 	.word	0xf47f4284
   35eac:	240eaf4a 	.word	0x240eaf4a
   35eb0:	f8b3e79b 	.word	0xf8b3e79b
   35eb4:	4284407c 	.word	0x4284407c
   35eb8:	240fbf08 	.word	0x240fbf08
   35ebc:	af45f47f 	.word	0xaf45f47f
   35ec0:	bf00e793 	.word	0xbf00e793
   35ec4:	20025c34 	.word	0x20025c34
   35ec8:	20025c4c 	.word	0x20025c4c
   35ecc:	20025ccc 	.word	0x20025ccc

00035ed0 <symbol_000fb79>:
   35ed0:	b4302801 	.word	0xb4302801
   35ed4:	d1034b0a 	.word	0xd1034b0a
   35ed8:	7c1de00a 	.word	0x7c1de00a
   35edc:	d0084285 	.word	0xd0084285
   35ee0:	4f14f853 	.word	0x4f14f853
   35ee4:	d1f82c00 	.word	0xd1f82c00
   35ee8:	002df06f 	.word	0x002df06f
   35eec:	4770bc30 	.word	0x4770bc30
   35ef0:	600c4c04 	.word	0x600c4c04
   35ef4:	2000685b 	.word	0x2000685b
   35ef8:	6013bc30 	.word	0x6013bc30
   35efc:	bf004770 	.word	0xbf004770
   35f00:	00044050 	.word	0x00044050
   35f04:	0004401c 	.word	0x0004401c

00035f08 <symbol_000494c>:
   35f08:	b4302803 	.word	0xb4302803
   35f0c:	d1034b0a 	.word	0xd1034b0a
   35f10:	7c1de00a 	.word	0x7c1de00a
   35f14:	d0084285 	.word	0xd0084285
   35f18:	4f14f853 	.word	0x4f14f853
   35f1c:	d1f82c00 	.word	0xd1f82c00
   35f20:	002df06f 	.word	0x002df06f
   35f24:	4770bc30 	.word	0x4770bc30
   35f28:	600c4c04 	.word	0x600c4c04
   35f2c:	2000685b 	.word	0x2000685b
   35f30:	6013bc30 	.word	0x6013bc30
   35f34:	bf004770 	.word	0xbf004770
   35f38:	00044028 	.word	0x00044028
   35f3c:	00044010 	.word	0x00044010

00035f40 <dfu_client_event_handler>:
   35f40:	1b08f850 	.word	0x1b08f850
   35f44:	f7fb0c09 	.word	0xf7fb0c09
   35f48:	bf00bff3 	.word	0xbf00bff3

00035f4c <rpc_dfu_client_init>:
   35f4c:	f7ff4801 	.word	0xf7ff4801
   35f50:	bf00bb33 	.word	0xbf00bb33
   35f54:	000440a0 	.word	0x000440a0

00035f58 <rpc_dfu_client_request_alloc>:
   35f58:	b5102300 	.word	0xb5102300
   35f5c:	9301b082 	.word	0x9301b082
   35f60:	4604b158 	.word	0x4604b158
   35f64:	2006aa01 	.word	0x2006aa01
   35f68:	fd5ef7ff 	.word	0xfd5ef7ff
   35f6c:	9b01b918 	.word	0x9b01b918
   35f70:	3308b10b 	.word	0x3308b10b
   35f74:	b0026023 	.word	0xb0026023
   35f78:	2007bd10 	.word	0x2007bd10
   35f7c:	bd10b002 	.word	0xbd10b002

00035f80 <rpc_dfu_client_request_send>:
   35f80:	4f70f411 	.word	0x4f70f411
   35f84:	b160d10b 	.word	0xb160d10b
   35f88:	f8304603 	.word	0xf8304603
   35f8c:	20062c08 	.word	0x20062c08
   35f90:	4101ea42 	.word	0x4101ea42
   35f94:	1d08f843 	.word	0x1d08f843
   35f98:	f7ff4619 	.word	0xf7ff4619
   35f9c:	200fbd2d 	.word	0x200fbd2d
   35fa0:	20074770 	.word	0x20074770
   35fa4:	bf004770 	.word	0xbf004770

00035fa8 <rpc_dfu_client_message_free>:
   35fa8:	f1a0b120 	.word	0xf1a0b120
   35fac:	20060108 	.word	0x20060108
   35fb0:	bd6cf7ff 	.word	0xbd6cf7ff
   35fb4:	47702007 	.word	0x47702007

00035fb8 <rpc_dfu_client_data_free>:
   35fb8:	4601b118 	.word	0x4601b118
   35fbc:	f7ff2006 	.word	0xf7ff2006
   35fc0:	2007be77 	.word	0x2007be77
   35fc4:	bf004770 	.word	0xbf004770

00035fc8 <mem_free>:
   35fc8:	4ff0e92d 	.word	0x4ff0e92d
   35fcc:	c0ccf8df 	.word	0xc0ccf8df
   35fd0:	9000b083 	.word	0x9000b083
   35fd4:	0b3cf10c 	.word	0x0b3cf10c
   35fd8:	3008f8dc 	.word	0x3008f8dc
   35fdc:	f8dcb12b 	.word	0xf8dcb12b
   35fe0:	9c002000 	.word	0x9c002000
   35fe4:	42a07810 	.word	0x42a07810
   35fe8:	f10cd006 	.word	0xf10cd006
   35fec:	45e30c0c 	.word	0x45e30c0c
   35ff0:	b003d1f2 	.word	0xb003d1f2
   35ff4:	8ff0e8bd 	.word	0x8ff0e8bd
   35ff8:	a004f8dc 	.word	0xa004f8dc
   35ffc:	080aeb03 	.word	0x080aeb03
   36000:	d2f245c2 	.word	0xd2f245c2
   36004:	f8cd6853 	.word	0xf8cd6853
   36008:	46d6c004 	.word	0x46d6c004
   3600c:	f8d2469c 	.word	0xf8d2469c
   36010:	89979010 	.word	0x89979010
   36014:	000aebae 	.word	0x000aebae
   36018:	f8b9b3df 	.word	0xf8b9b3df
   3601c:	42902002 	.word	0x42902002
   36020:	4665d31c 	.word	0x4665d31c
   36024:	f1092400 	.word	0xf1092400
   36028:	e0030304 	.word	0xe0030304
   3602c:	3304885a 	.word	0x3304885a
   36030:	d8154282 	.word	0xd8154282
   36034:	6c04f833 	.word	0x6c04f833
   36038:	42a73401 	.word	0x42a73401
   3603c:	5506fb02 	.word	0x5506fb02
   36040:	0002eba0 	.word	0x0002eba0
   36044:	d1f1461e 	.word	0xd1f1461e
   36048:	42812000 	.word	0x42812000
   3604c:	f10ed00d 	.word	0xf10ed00d
   36050:	45f00e01 	.word	0x45f00e01
   36054:	f8ddd1de 	.word	0xf8ddd1de
   36058:	e7c6c004 	.word	0xe7c6c004
   3605c:	464e4665 	.word	0x464e4665
   36060:	fb008833 	.word	0xfb008833
   36064:	42815003 	.word	0x42815003
   36068:	f5bed1f1 	.word	0xf5bed1f1
   3606c:	f8dd7f00 	.word	0xf8dd7f00
   36070:	d0bac004 	.word	0xd0bac004
   36074:	4a082301 	.word	0x4a082301
   36078:	115eea4f 	.word	0x115eea4f
   3607c:	0021f852 	.word	0x0021f852
   36080:	0e1ff00e 	.word	0x0e1ff00e
   36084:	fe0efa03 	.word	0xfe0efa03
   36088:	0000ea4e 	.word	0x0000ea4e
   3608c:	0021f842 	.word	0x0021f842
   36090:	4638e7af 	.word	0x4638e7af
   36094:	bf00e7d9 	.word	0xbf00e7d9
   36098:	20025d4c 	.word	0x20025d4c
   3609c:	20025d90 	.word	0x20025d90

000360a0 <mem_alloc.constprop.5>:
   360a0:	d0502800 	.word	0xd0502800
   360a4:	f8d34b6d 	.word	0xf8d34b6d
   360a8:	42902088 	.word	0x42902088
   360ac:	e92dd84b 	.word	0xe92dd84b
   360b0:	f8d34ff0 	.word	0xf8d34ff0
   360b4:	b083b08c 	.word	0xb083b08c
   360b8:	0f00f1bb 	.word	0x0f00f1bb
   360bc:	f10bd054 	.word	0xf10bd054
   360c0:	469132ff 	.word	0x469132ff
   360c4:	f04f2600 	.word	0xf04f2600
   360c8:	4f650812 	.word	0x4f650812
   360cc:	f10b9201 	.word	0xf10b9201
   360d0:	eb060e11 	.word	0xeb060e11
   360d4:	f8530209 	.word	0xf8530209
   360d8:	32014038 	.word	0x32014038
   360dc:	eb040852 	.word	0xeb040852
   360e0:	f1020c44 	.word	0xf1020c44
   360e4:	f8530112 	.word	0xf8530112
   360e8:	f8575031 	.word	0xf8575031
   360ec:	f853a02c 	.word	0xf853a02c
   360f0:	eb03403e 	.word	0xeb03403e
   360f4:	f8dc0cc8 	.word	0xf8dc0cc8
   360f8:	eb05c004 	.word	0xeb05c004
   360fc:	eb040545 	.word	0xeb040545
   36100:	f8da0444 	.word	0xf8da0444
   36104:	f857a010 	.word	0xf857a010
   36108:	f8575025 	.word	0xf8575025
   3610c:	f83a4024 	.word	0xf83a4024
   36110:	eb03a02c 	.word	0xeb03a02c
   36114:	eb0301c1 	.word	0xeb0301c1
   36118:	68490cce 	.word	0x68490cce
   3611c:	6924692d 	.word	0x6924692d
   36120:	c004f8dc 	.word	0xc004f8dc
   36124:	f8354550 	.word	0xf8354550
   36128:	f8345021 	.word	0xf8345021
   3612c:	d915102c 	.word	0xd915102c
   36130:	d2114288 	.word	0xd2114288
   36134:	d90842a8 	.word	0xd90842a8
   36138:	45b11c56 	.word	0x45b11c56
   3613c:	8087f0c0 	.word	0x8087f0c0
   36140:	0813f102 	.word	0x0813f102
   36144:	2000e7c5 	.word	0x2000e7c5
   36148:	f1024770 	.word	0xf1024770
   3614c:	454e39ff 	.word	0x454e39ff
   36150:	f102d87d 	.word	0xf102d87d
   36154:	e7bc0e11 	.word	0xe7bc0e11
   36158:	0601f109 	.word	0x0601f109
   3615c:	d00745b3 	.word	0xd00745b3
   36160:	d0012e10 	.word	0xd0012e10
   36164:	d80845b3 	.word	0xd80845b3
   36168:	b0032000 	.word	0xb0032000
   3616c:	8ff0e8bd 	.word	0x8ff0e8bd
   36170:	2a109a01 	.word	0x2a109a01
   36174:	4616bf18 	.word	0x4616bf18
   36178:	f8dfd0f6 	.word	0xf8dfd0f6
   3617c:	eb03c0e8 	.word	0xeb03c0e8
   36180:	e9d808c6 	.word	0xe9d808c6
   36184:	eb022424 	.word	0xeb022424
   36188:	f8570242 	.word	0xf8570242
   3618c:	eb073022 	.word	0xeb073022
   36190:	f8d20282 	.word	0xf8d20282
   36194:	691de004 	.word	0x691de004
   36198:	d0562c00 	.word	0xd0562c00
   3619c:	4670462a 	.word	0x4670462a
   361a0:	eb0500a4 	.word	0xeb0500a4
   361a4:	88510904 	.word	0x88510904
   361a8:	45913204 	.word	0x45913204
   361ac:	d1fa4408 	.word	0xd1fa4408
   361b0:	f8b11929 	.word	0xf8b11929
   361b4:	4482a002 	.word	0x4482a002
   361b8:	d9184582 	.word	0xd9184582
   361bc:	f85c0941 	.word	0xf85c0941
   361c0:	f0002021 	.word	0xf0002021
   361c4:	fa22041f 	.word	0xfa22041f
   361c8:	f019f904 	.word	0xf019f904
   361cc:	d0070f01 	.word	0xd0070f01
   361d0:	f85ce013 	.word	0xf85ce013
   361d4:	fa222021 	.word	0xfa222021
   361d8:	f019f904 	.word	0xf019f904
   361dc:	d10c0f01 	.word	0xd10c0f01
   361e0:	45823001 	.word	0x45823001
   361e4:	1150ea4f 	.word	0x1150ea4f
   361e8:	041ff000 	.word	0x041ff000
   361ec:	3601d1f1 	.word	0x3601d1f1
   361f0:	f108455e 	.word	0xf108455e
   361f4:	d3c40808 	.word	0xd3c40808
   361f8:	2601e7b6 	.word	0x2601e7b6
   361fc:	f404fa06 	.word	0xf404fa06
   36200:	ea22899e 	.word	0xea22899e
   36204:	eba00204 	.word	0xeba00204
   36208:	f84c000e 	.word	0xf84c000e
   3620c:	685c2021 	.word	0x685c2021
   36210:	d0a92e00 	.word	0xd0a92e00
   36214:	4282886a 	.word	0x4282886a
   36218:	2100d811 	.word	0x2100d811
   3621c:	e0031d2b 	.word	0xe0031d2b
   36220:	3304885a 	.word	0x3304885a
   36224:	d80a4282 	.word	0xd80a4282
   36228:	5c04f833 	.word	0x5c04f833
   3622c:	428e3101 	.word	0x428e3101
   36230:	4405fb02 	.word	0x4405fb02
   36234:	0002eba0 	.word	0x0002eba0
   36238:	d1f1461d 	.word	0xd1f1461d
   3623c:	882be794 	.word	0x882be794
   36240:	4003fb00 	.word	0x4003fb00
   36244:	e8bdb003 	.word	0xe8bdb003
   36248:	46708ff0 	.word	0x46708ff0
   3624c:	f1bbe7b0 	.word	0xf1bbe7b0
   36250:	bf080f10 	.word	0xbf080f10
   36254:	d090260f 	.word	0xd090260f
   36258:	bf00e786 	.word	0xbf00e786
   3625c:	20025dcc 	.word	0x20025dcc
   36260:	20025d90 	.word	0x20025d90
   36264:	20025d4c 	.word	0x20025d4c

00036268 <mem_alloc.constprop.4>:
   36268:	d04c2800 	.word	0xd04c2800
   3626c:	681a4b6b 	.word	0x681a4b6b
   36270:	d8484290 	.word	0xd8484290
   36274:	4ff0e92d 	.word	0x4ff0e92d
   36278:	b083685f 	.word	0xb083685f
   3627c:	2f009700 	.word	0x2f009700
   36280:	1e7ad051 	.word	0x1e7ad051
   36284:	21004696 	.word	0x21004696
   36288:	0c01f04f 	.word	0x0c01f04f
   3628c:	92014c64 	.word	0x92014c64
   36290:	020eeb01 	.word	0x020eeb01
   36294:	f8533201 	.word	0xf8533201
   36298:	0852503c 	.word	0x0852503c
   3629c:	0801f102 	.word	0x0801f102
   362a0:	0545eb05 	.word	0x0545eb05
   362a4:	9037f853 	.word	0x9037f853
   362a8:	a025f854 	.word	0xa025f854
   362ac:	6038f853 	.word	0x6038f853
   362b0:	0549eb09 	.word	0x0549eb09
   362b4:	09cceb03 	.word	0x09cceb03
   362b8:	9004f8d9 	.word	0x9004f8d9
   362bc:	0646eb06 	.word	0x0646eb06
   362c0:	a010f8da 	.word	0xa010f8da
   362c4:	6026f854 	.word	0x6026f854
   362c8:	5025f854 	.word	0x5025f854
   362cc:	a029f83a 	.word	0xa029f83a
   362d0:	0bc8eb03 	.word	0x0bc8eb03
   362d4:	09c7eb03 	.word	0x09c7eb03
   362d8:	f8db6936 	.word	0xf8db6936
   362dc:	692db004 	.word	0x692db004
   362e0:	9004f8d9 	.word	0x9004f8d9
   362e4:	f8364550 	.word	0xf8364550
   362e8:	f835602b 	.word	0xf835602b
   362ec:	d9135029 	.word	0xd9135029
   362f0:	d21042a8 	.word	0xd21042a8
   362f4:	d90842b0 	.word	0xd90842b0
   362f8:	464145c6 	.word	0x464145c6
   362fc:	8087f0c0 	.word	0x8087f0c0
   36300:	0c01f108 	.word	0x0c01f108
   36304:	2000e7c4 	.word	0x2000e7c4
   36308:	f1024770 	.word	0xf1024770
   3630c:	45713eff 	.word	0x45713eff
   36310:	4617d87d 	.word	0x4617d87d
   36314:	4639e7bc 	.word	0x4639e7bc
   36318:	428a9a00 	.word	0x428a9a00
   3631c:	2910d007 	.word	0x2910d007
   36320:	428ad001 	.word	0x428ad001
   36324:	2000d808 	.word	0x2000d808
   36328:	e8bdb003 	.word	0xe8bdb003
   3632c:	9a018ff0 	.word	0x9a018ff0
   36330:	bf182a10 	.word	0xbf182a10
   36334:	d0f64611 	.word	0xd0f64611
   36338:	c0e8f8df 	.word	0xc0e8f8df
   3633c:	9000f8dd 	.word	0x9000f8dd
   36340:	08c1eb03 	.word	0x08c1eb03
   36344:	2602e9d8 	.word	0x2602e9d8
   36348:	0242eb02 	.word	0x0242eb02
   3634c:	3022f854 	.word	0x3022f854
   36350:	0282eb04 	.word	0x0282eb04
   36354:	e004f8d2 	.word	0xe004f8d2
   36358:	2e00691f 	.word	0x2e00691f
   3635c:	463ad055 	.word	0x463ad055
   36360:	00b64670 	.word	0x00b64670
   36364:	0a06eb07 	.word	0x0a06eb07
   36368:	32048855 	.word	0x32048855
   3636c:	44284592 	.word	0x44284592
   36370:	19bdd1fa 	.word	0x19bdd1fa
   36374:	b002f8b5 	.word	0xb002f8b5
   36378:	45834483 	.word	0x45834483
   3637c:	0945d918 	.word	0x0945d918
   36380:	2025f85c 	.word	0x2025f85c
   36384:	061ff000 	.word	0x061ff000
   36388:	fa06fa22 	.word	0xfa06fa22
   3638c:	0f01f01a 	.word	0x0f01f01a
   36390:	e013d007 	.word	0xe013d007
   36394:	2025f85c 	.word	0x2025f85c
   36398:	fa06fa22 	.word	0xfa06fa22
   3639c:	0f01f01a 	.word	0x0f01f01a
   363a0:	3001d10c 	.word	0x3001d10c
   363a4:	ea4f4583 	.word	0xea4f4583
   363a8:	f0001550 	.word	0xf0001550
   363ac:	d1f1061f 	.word	0xd1f1061f
   363b0:	45493101 	.word	0x45493101
   363b4:	0808f108 	.word	0x0808f108
   363b8:	e7b4d3c4 	.word	0xe7b4d3c4
   363bc:	40b12101 	.word	0x40b12101
   363c0:	ea22899e 	.word	0xea22899e
   363c4:	eba00201 	.word	0xeba00201
   363c8:	f84c000e 	.word	0xf84c000e
   363cc:	685c2025 	.word	0x685c2025
   363d0:	d0a82e00 	.word	0xd0a82e00
   363d4:	4282887a 	.word	0x4282887a
   363d8:	2100d811 	.word	0x2100d811
   363dc:	e0031d3b 	.word	0xe0031d3b
   363e0:	3304885a 	.word	0x3304885a
   363e4:	d80a4282 	.word	0xd80a4282
   363e8:	5c04f833 	.word	0x5c04f833
   363ec:	428e3101 	.word	0x428e3101
   363f0:	0002eba0 	.word	0x0002eba0
   363f4:	4405fb02 	.word	0x4405fb02
   363f8:	d1f1461f 	.word	0xd1f1461f
   363fc:	883be793 	.word	0x883be793
   36400:	4003fb00 	.word	0x4003fb00
   36404:	e8bdb003 	.word	0xe8bdb003
   36408:	46708ff0 	.word	0x46708ff0
   3640c:	9a00e7b1 	.word	0x9a00e7b1
   36410:	bf082a10 	.word	0xbf082a10
   36414:	d08f210f 	.word	0xd08f210f
   36418:	bf00e785 	.word	0xbf00e785
   3641c:	20025dcc 	.word	0x20025dcc
   36420:	20025d90 	.word	0x20025d90
   36424:	20025d4c 	.word	0x20025d4c

00036428 <nrf_mem_init>:
   36428:	2200b570 	.word	0x2200b570
   3642c:	48332501 	.word	0x48332501
   36430:	f8500951 	.word	0xf8500951
   36434:	f0024021 	.word	0xf0024021
   36438:	fa05031f 	.word	0xfa05031f
   3643c:	3201f303 	.word	0x3201f303
   36440:	f5b24323 	.word	0xf5b24323
   36444:	f8407f00 	.word	0xf8407f00
   36448:	d1f13021 	.word	0xd1f13021
   3644c:	4b2c2400 	.word	0x4b2c2400
   36450:	223c4621 	.word	0x223c4621
   36454:	601c482b 	.word	0x601c482b
   36458:	facbf00b 	.word	0xfacbf00b
   3645c:	22052110 	.word	0x22052110
   36460:	4e2a4b29 	.word	0x4e2a4b29
   36464:	4400e9c3 	.word	0x4400e9c3
   36468:	615960d9 	.word	0x615960d9
   3646c:	625961d9 	.word	0x625961d9
   36470:	635962d9 	.word	0x635962d9
   36474:	645963d9 	.word	0x645963d9
   36478:	655964d9 	.word	0x655964d9
   3647c:	665965d9 	.word	0x665965d9
   36480:	675966d9 	.word	0x675966d9
   36484:	609a67d9 	.word	0x609a67d9
   36488:	619a611a 	.word	0x619a611a
   3648c:	629a621a 	.word	0x629a621a
   36490:	639a631a 	.word	0x639a631a
   36494:	649a641a 	.word	0x649a641a
   36498:	659a651a 	.word	0x659a651a
   3649c:	669a661a 	.word	0x669a661a
   364a0:	679a671a 	.word	0x679a671a
   364a4:	2120e9c3 	.word	0x2120e9c3
   364a8:	4422e9c3 	.word	0x4422e9c3
   364ac:	2124e9c3 	.word	0x2124e9c3
   364b0:	2126e9c3 	.word	0x2126e9c3
   364b4:	2128e9c3 	.word	0x2128e9c3
   364b8:	212ae9c3 	.word	0x212ae9c3
   364bc:	212ce9c3 	.word	0x212ce9c3
   364c0:	212ee9c3 	.word	0x212ee9c3
   364c4:	2130e9c3 	.word	0x2130e9c3
   364c8:	2132e9c3 	.word	0x2132e9c3
   364cc:	2134e9c3 	.word	0x2134e9c3
   364d0:	2136e9c3 	.word	0x2136e9c3
   364d4:	2138e9c3 	.word	0x2138e9c3
   364d8:	213ae9c3 	.word	0x213ae9c3
   364dc:	213ce9c3 	.word	0x213ce9c3
   364e0:	213ee9c3 	.word	0x213ee9c3
   364e4:	1104f8c3 	.word	0x1104f8c3
   364e8:	2100f8c3 	.word	0x2100f8c3
   364ec:	110cf8c3 	.word	0x110cf8c3
   364f0:	2108f8c3 	.word	0x2108f8c3
   364f4:	70354620 	.word	0x70354620
   364f8:	bf00bd70 	.word	0xbf00bd70
   364fc:	20025d4c 	.word	0x20025d4c
   36500:	20025d8c 	.word	0x20025d8c
   36504:	20025d90 	.word	0x20025d90
   36508:	20025dcc 	.word	0x20025dcc
   3650c:	2002c8ba 	.word	0x2002c8ba

00036510 <nrf_mem_register>:
   36510:	4ff0e92d 	.word	0x4ff0e92d
   36514:	b0874b87 	.word	0xb0874b87
   36518:	2b00781b 	.word	0x2b00781b
   3651c:	808cf000 	.word	0x808cf000
   36520:	b321b328 	.word	0xb321b328
   36524:	f8df780b 	.word	0xf8df780b
   36528:	eb038218 	.word	0xeb038218
   3652c:	eb081303 	.word	0xeb081303
   36530:	685b03c3 	.word	0x685b03c3
   36534:	c00cf8b1 	.word	0xc00cf8b1
   36538:	2b104463 	.word	0x2b104463
   3653c:	f04fd811 	.word	0xf04fd811
   36540:	46890a00 	.word	0x46890a00
   36544:	4f7d4b7c 	.word	0x4f7d4b7c
   36548:	ea4f681b 	.word	0xea4f681b
   3654c:	93000e8c 	.word	0x93000e8c
   36550:	b19168b9 	.word	0xb19168b9
   36554:	0a01f10a 	.word	0x0a01f10a
   36558:	0f05f1ba 	.word	0x0f05f1ba
   3655c:	070cf107 	.word	0x070cf107
   36560:	f248d1f6 	.word	0xf248d1f6
   36564:	46581b07 	.word	0x46581b07
   36568:	e8bdb007 	.word	0xe8bdb007
   3656c:	f2488ff0 	.word	0xf2488ff0
   36570:	46581b0e 	.word	0x46581b0e
   36574:	e8bdb007 	.word	0xe8bdb007
   36578:	f1bc8ff0 	.word	0xf1bc8ff0
   3657c:	d0610f00 	.word	0xd0610f00
   36580:	460c460d 	.word	0x460c460d
   36584:	3010f8d9 	.word	0x3010f8d9
   36588:	0b03eb0e 	.word	0x0b03eb0e
   3658c:	f833885a 	.word	0xf833885a
   36590:	44156b04 	.word	0x44156b04
   36594:	fb02459b 	.word	0xfb02459b
   36598:	d1f74406 	.word	0xd1f74406
   3659c:	3008f8d9 	.word	0x3008f8d9
   365a0:	d3d742a3 	.word	0xd3d742a3
   365a4:	442b9b00 	.word	0x442b9b00
   365a8:	7f00f5b3 	.word	0x7f00f5b3
   365ac:	4c63d2d2 	.word	0x4c63d2d2
   365b0:	024aeb0a 	.word	0x024aeb0a
   365b4:	f8c00092 	.word	0xf8c00092
   365b8:	18a0a000 	.word	0x18a0a000
   365bc:	9002f844 	.word	0x9002f844
   365c0:	468b9a00 	.word	0x468b9a00
   365c4:	2501e9c0 	.word	0x2501e9c0
   365c8:	2001f899 	.word	0x2001f899
   365cc:	2a01485a 	.word	0x2a01485a
   365d0:	d0c86003 	.word	0xd0c86003
   365d4:	300cf8b9 	.word	0x300cf8b9
   365d8:	d0c42b00 	.word	0xd0c42b00
   365dc:	f8cd2500 	.word	0xf8cd2500
   365e0:	f8cd9004 	.word	0xf8cd9004
   365e4:	f8cda00c 	.word	0xf8cda00c
   365e8:	9b01b014 	.word	0x9b01b014
   365ec:	691a781f 	.word	0x691a781f
   365f0:	eb03013b 	.word	0xeb03013b
   365f4:	93000907 	.word	0x93000907
   365f8:	03c9eb08 	.word	0x03c9eb08
   365fc:	f8326859 	.word	0xf8326859
   36600:	91024025 	.word	0x91024025
   36604:	9a03bb39 	.word	0x9a03bb39
   36608:	609a60dd 	.word	0x609a60dd
   3660c:	443b9b00 	.word	0x443b9b00
   36610:	eb08461f 	.word	0xeb08461f
   36614:	684b01c3 	.word	0x684b01c3
   36618:	2037f858 	.word	0x2037f858
   3661c:	42943301 	.word	0x42943301
   36620:	d912604b 	.word	0xd912604b
   36624:	f8489b01 	.word	0xf8489b01
   36628:	899b4037 	.word	0x899b4037
   3662c:	429d3501 	.word	0x429d3501
   36630:	f8ddd3db 	.word	0xf8ddd3db
   36634:	e796b014 	.word	0xe796b014
   36638:	1b08f248 	.word	0x1b08f248
   3663c:	b0074658 	.word	0xb0074658
   36640:	8ff0e8bd 	.word	0x8ff0e8bd
   36644:	46659b00 	.word	0x46659b00
   36648:	9b01e7ae 	.word	0x9b01e7ae
   3664c:	899b3501 	.word	0x899b3501
   36650:	d8ca42ab 	.word	0xd8ca42ab
   36654:	2600e7ed 	.word	0x2600e7ed
   36658:	3afff101 	.word	0x3afff101
   3665c:	eb069504 	.word	0xeb069504
   36660:	eb09000a 	.word	0xeb09000a
   36664:	32010206 	.word	0x32010206
   36668:	f8583001 	.word	0xf8583001
   3666c:	0840c032 	.word	0x0840c032
   36670:	eb094d32 	.word	0xeb094d32
   36674:	eb090100 	.word	0xeb090100
   36678:	3101030a 	.word	0x3101030a
   3667c:	eb0c3301 	.word	0xeb0c3301
   36680:	f8580c4c 	.word	0xf8580c4c
   36684:	f855e031 	.word	0xf855e031
   36688:	f858b02c 	.word	0xf858b02c
   3668c:	eb08c033 	.word	0xeb08c033
   36690:	eb0e02c2 	.word	0xeb0e02c2
   36694:	eb0c0e4e 	.word	0xeb0c0e4e
   36698:	f8db0c4c 	.word	0xf8db0c4c
   3669c:	6852b010 	.word	0x6852b010
   366a0:	e02ef855 	.word	0xe02ef855
   366a4:	c02cf855 	.word	0xc02cf855
   366a8:	01c1eb08 	.word	0x01c1eb08
   366ac:	03c3eb08 	.word	0x03c3eb08
   366b0:	2022f83b 	.word	0x2022f83b
   366b4:	e010f8de 	.word	0xe010f8de
   366b8:	f8dc6849 	.word	0xf8dc6849
   366bc:	685bc010 	.word	0x685bc010
   366c0:	f83e4294 	.word	0xf83e4294
   366c4:	f83c1021 	.word	0xf83c1021
   366c8:	d92d3023 	.word	0xd92d3023
   366cc:	d22d429c 	.word	0xd22d429c
   366d0:	d924428c 	.word	0xd924428c
   366d4:	45b21c46 	.word	0x45b21c46
   366d8:	2610d2c1 	.word	0x2610d2c1
   366dc:	9a029d04 	.word	0x9a029d04
   366e0:	d91142b2 	.word	0xd91142b2
   366e4:	443b9b00 	.word	0x443b9b00
   366e8:	4433441a 	.word	0x4433441a
   366ec:	0ac2eb08 	.word	0x0ac2eb08
   366f0:	09c3eb08 	.word	0x09c3eb08
   366f4:	46512208 	.word	0x46512208
   366f8:	0002eb0a 	.word	0x0002eb0a
   366fc:	0a08f1aa 	.word	0x0a08f1aa
   36700:	f957f00b 	.word	0xf957f00b
   36704:	d1f545d1 	.word	0xd1f545d1
   36708:	99039b00 	.word	0x99039b00
   3670c:	4433443b 	.word	0x4433443b
   36710:	eb083301 	.word	0xeb083301
   36714:	f84802c3 	.word	0xf84802c3
   36718:	60551033 	.word	0x60551033
   3671c:	f100e776 	.word	0xf100e776
   36720:	45563aff 	.word	0x45563aff
   36724:	e7d8d99b 	.word	0xe7d8d99b
   36728:	e7d89d04 	.word	0xe7d89d04
   3672c:	f10a9d04 	.word	0xf10a9d04
   36730:	e7d40601 	.word	0xe7d40601
   36734:	2002c8ba 	.word	0x2002c8ba
   36738:	20025d8c 	.word	0x20025d8c
   3673c:	20025d90 	.word	0x20025d90
   36740:	20025dcc 	.word	0x20025dcc

00036744 <nrf_malloc>:
   36744:	781b4b03 	.word	0x781b4b03
   36748:	f7ffb10b 	.word	0xf7ffb10b
   3674c:	4618bd8d 	.word	0x4618bd8d
   36750:	bf004770 	.word	0xbf004770
   36754:	2002c8ba 	.word	0x2002c8ba

00036758 <nrf_calloc>:
   36758:	4b08b538 	.word	0x4b08b538
   3675c:	b155781d 	.word	0xb155781d
   36760:	f400fb01 	.word	0xf400fb01
   36764:	f7ff4620 	.word	0xf7ff4620
   36768:	4605fd7f 	.word	0x4605fd7f
   3676c:	4622b118 	.word	0x4622b118
   36770:	f00b2100 	.word	0xf00b2100
   36774:	4628f93e 	.word	0x4628f93e
   36778:	bf00bd38 	.word	0xbf00bd38
   3677c:	2002c8ba 	.word	0x2002c8ba

00036780 <nrf_free>:
   36780:	781b4b04 	.word	0x781b4b04
   36784:	b118b123 	.word	0xb118b123
   36788:	20004601 	.word	0x20004601
   3678c:	bc1cf7ff 	.word	0xbc1cf7ff
   36790:	bf004770 	.word	0xbf004770
   36794:	2002c8ba 	.word	0x2002c8ba

00036798 <nrf_shared_malloc>:
   36798:	781b4b03 	.word	0x781b4b03
   3679c:	f7ffb10b 	.word	0xf7ffb10b
   367a0:	4618bc7f 	.word	0x4618bc7f
   367a4:	bf004770 	.word	0xbf004770
   367a8:	2002c8ba 	.word	0x2002c8ba

000367ac <nrf_shared_free>:
   367ac:	781b4b04 	.word	0x781b4b04
   367b0:	b118b123 	.word	0xb118b123
   367b4:	20014601 	.word	0x20014601
   367b8:	bc06f7ff 	.word	0xbc06f7ff
   367bc:	bf004770 	.word	0xbf004770
   367c0:	2002c8ba 	.word	0x2002c8ba

000367c4 <symbol_0003897>:
   367c4:	728cf44f 	.word	0x728cf44f
   367c8:	f00b2100 	.word	0xf00b2100
   367cc:	bf00b912 	.word	0xbf00b912

000367d0 <symbol_0006f61>:
   367d0:	f44fb118 	.word	0xf44fb118
   367d4:	f7fc718c 	.word	0xf7fc718c
   367d8:	4770b837 	.word	0x4770b837

000367dc <symbol_000468b>:
   367dc:	f0002ac0 	.word	0xf0002ac0
   367e0:	f5b28184 	.word	0xf5b28184
   367e4:	f0007f80 	.word	0xf0007f80
   367e8:	2a80817d 	.word	0x2a80817d
   367ec:	f06fd002 	.word	0xf06fd002
   367f0:	4770001f 	.word	0x4770001f
   367f4:	6003230a 	.word	0x6003230a
   367f8:	4ff0e92d 	.word	0x4ff0e92d
   367fc:	f04f4607 	.word	0xf04f4607
   36800:	f1000c00 	.word	0xf1000c00
   36804:	b0850408 	.word	0xb0850408
   36808:	f8470952 	.word	0xf8470952
   3680c:	788b4f04 	.word	0x788b4f04
   36810:	780e784d 	.word	0x780e784d
   36814:	ea43041b 	.word	0xea43041b
   36818:	78cd2305 	.word	0x78cd2305
   3681c:	f10c4333 	.word	0xf10c4333
   36820:	ea430c01 	.word	0xea430c01
   36824:	45946305 	.word	0x45946305
   36828:	3f04f847 	.word	0x3f04f847
   3682c:	0104f101 	.word	0x0104f101
   36830:	6803d3ed 	.word	0x6803d3ed
   36834:	f0002b0c 	.word	0xf0002b0c
   36838:	2b0e81bf 	.word	0x2b0e81bf
   3683c:	8158f000 	.word	0x8158f000
   36840:	f0402b0a 	.word	0xf0402b0a
   36844:	6944814b 	.word	0x6944814b
   36848:	f3c44bd8 	.word	0xf3c44bd8
   3684c:	68812207 	.word	0x68812207
   36850:	0e255c9a 	.word	0x0e255c9a
   36854:	f0815d5e 	.word	0xf0815d5e
   36858:	b2e50101 	.word	0xb2e50101
   3685c:	404a5d5d 	.word	0x404a5d5d
   36860:	4107f3c4 	.word	0x4107f3c4
   36864:	4206ea82 	.word	0x4206ea82
   36868:	ea825c5e 	.word	0xea825c5e
   3686c:	68c16505 	.word	0x68c16505
   36870:	2206ea85 	.word	0x2206ea85
   36874:	40516907 	.word	0x40516907
   36878:	0907ea81 	.word	0x0907ea81
   3687c:	0404ea89 	.word	0x0404ea89
   36880:	2507f3c4 	.word	0x2507f3c4
   36884:	0e265d5d 	.word	0x0e265d5d
   36888:	f0825d9e 	.word	0xf0825d9e
   3688c:	ea850c02 	.word	0xea850c02
   36890:	ea85050c 	.word	0xea85050c
   36894:	b2e64506 	.word	0xb2e64506
   36898:	c006f813 	.word	0xc006f813
   3689c:	4607f3c4 	.word	0x4607f3c4
   368a0:	ea855d9e 	.word	0xea855d9e
   368a4:	ea85650c 	.word	0xea85650c
   368a8:	406f2506 	.word	0x406f2506
   368ac:	0c04ea87 	.word	0x0c04ea87
   368b0:	2607f3cc 	.word	0x2607f3cc
   368b4:	ea4f5d9e 	.word	0xea4f5d9e
   368b8:	f8136e1c 	.word	0xf8136e1c
   368bc:	f085e00e 	.word	0xf085e00e
   368c0:	ea860804 	.word	0xea860804
   368c4:	ea860608 	.word	0xea860608
   368c8:	fa5f460e 	.word	0xfa5f460e
   368cc:	f813fe8c 	.word	0xf813fe8c
   368d0:	6182e00e 	.word	0x6182e00e
   368d4:	4207f3cc 	.word	0x4207f3cc
   368d8:	660eea86 	.word	0x660eea86
   368dc:	e002f813 	.word	0xe002f813
   368e0:	0201ea85 	.word	0x0201ea85
   368e4:	260eea86 	.word	0x260eea86
   368e8:	0802ea86 	.word	0x0802ea86
   368ec:	0e04ea88 	.word	0x0e04ea88
   368f0:	f3ce61c1 	.word	0xf3ce61c1
   368f4:	5c592107 	.word	0x5c592107
   368f8:	6a1eea4f 	.word	0x6a1eea4f
   368fc:	a00af813 	.word	0xa00af813
   36900:	0b08f086 	.word	0x0b08f086
   36904:	010bea81 	.word	0x010bea81
   36908:	410aea81 	.word	0x410aea81
   3690c:	fa8efa5f 	.word	0xfa8efa5f
   36910:	a00af813 	.word	0xa00af813
   36914:	f3ce6244 	.word	0xf3ce6244
   36918:	5d1c4407 	.word	0x5d1c4407
   3691c:	610aea81 	.word	0x610aea81
   36920:	2104ea81 	.word	0x2104ea81
   36924:	0a07ea81 	.word	0x0a07ea81
   36928:	040eea8a 	.word	0x040eea8a
   3692c:	630762c2 	.word	0x630762c2
   36930:	2207f3c4 	.word	0x2207f3c4
   36934:	0707ea88 	.word	0x0707ea88
   36938:	680ee9c0 	.word	0x680ee9c0
   3693c:	9020f8c0 	.word	0x9020f8c0
   36940:	f8c06285 	.word	0xf8c06285
   36944:	f8c0c034 	.word	0xf8c0c034
   36948:	6407e044 	.word	0x6407e044
   3694c:	f8136481 	.word	0xf8136481
   36950:	0e22c002 	.word	0x0e22c002
   36954:	f0815c9a 	.word	0xf0815c9a
   36958:	ea8c0510 	.word	0xea8c0510
   3695c:	ea8c0c05 	.word	0xea8c0c05
   36960:	b2e24c02 	.word	0xb2e24c02
   36964:	f3c45c9d 	.word	0xf3c45c9d
   36968:	5c9a4207 	.word	0x5c9a4207
   3696c:	6c05ea8c 	.word	0x6c05ea8c
   36970:	2c02ea8c 	.word	0x2c02ea8c
   36974:	0108ea81 	.word	0x0108ea81
   36978:	090cea81 	.word	0x090cea81
   3697c:	0209ea8e 	.word	0x0209ea8e
   36980:	2507f3c2 	.word	0x2507f3c2
   36984:	0e155d5e 	.word	0x0e155d5e
   36988:	f08c5d5d 	.word	0xf08c5d5d
   3698c:	407e0720 	.word	0x407e0720
   36990:	4605ea86 	.word	0x4605ea86
   36994:	5d5db2d5 	.word	0x5d5db2d5
   36998:	f3c264c1 	.word	0xf3c264c1
   3699c:	5c594107 	.word	0x5c594107
   369a0:	6605ea86 	.word	0x6605ea86
   369a4:	2601ea86 	.word	0x2601ea86
   369a8:	0e06ea8a 	.word	0x0e06ea8a
   369ac:	080eea82 	.word	0x080eea82
   369b0:	2107f3c8 	.word	0x2107f3c8
   369b4:	ea4f5c5f 	.word	0xea4f5c5f
   369b8:	5c596118 	.word	0x5c596118
   369bc:	0540f086 	.word	0x0540f086
   369c0:	ea87406f 	.word	0xea87406f
   369c4:	fa5f4701 	.word	0xfa5f4701
   369c8:	5c59f188 	.word	0x5c59f188
   369cc:	0509ea8a 	.word	0x0509ea8a
   369d0:	6701ea87 	.word	0x6701ea87
   369d4:	4107f3c8 	.word	0x4107f3c8
   369d8:	f8c05c59 	.word	0xf8c05c59
   369dc:	ea87a050 	.word	0xea87a050
   369e0:	ea892701 	.word	0xea892701
   369e4:	66050a06 	.word	0x66050a06
   369e8:	0507ea8a 	.word	0x0507ea8a
   369ec:	0105ea82 	.word	0x0105ea82
   369f0:	f3c16544 	.word	0xf3c16544
   369f4:	5d1c2407 	.word	0x5d1c2407
   369f8:	6b11ea4f 	.word	0x6b11ea4f
   369fc:	b00bf813 	.word	0xb00bf813
   36a00:	f0876642 	.word	0xf0876642
   36a04:	40620280 	.word	0x40620280
   36a08:	ea82b2cc 	.word	0xea82b2cc
   36a0c:	f813420b 	.word	0xf813420b
   36a10:	f3c1b004 	.word	0xf3c1b004
   36a14:	5d1c4407 	.word	0x5d1c4407
   36a18:	620bea82 	.word	0x620bea82
   36a1c:	2204ea82 	.word	0x2204ea82
   36a20:	0402ea8e 	.word	0x0402ea8e
   36a24:	c058f8c0 	.word	0xc058f8c0
   36a28:	0c04ea81 	.word	0x0c04ea81
   36a2c:	67c56686 	.word	0x67c56686
   36a30:	0605ea8e 	.word	0x0605ea8e
   36a34:	40556787 	.word	0x40556787
   36a38:	2707f3cc 	.word	0x2707f3cc
   36a3c:	ae1be9c0 	.word	0xae1be9c0
   36a40:	1084f8c0 	.word	0x1084f8c0
   36a44:	2088f8c0 	.word	0x2088f8c0
   36a48:	6080f8c0 	.word	0x6080f8c0
   36a4c:	905cf8c0 	.word	0x905cf8c0
   36a50:	8074f8c0 	.word	0x8074f8c0
   36a54:	508cf8c0 	.word	0x508cf8c0
   36a58:	f0825dde 	.word	0xf0825dde
   36a5c:	ea4f021b 	.word	0xea4f021b
   36a60:	f813671c 	.word	0xf813671c
   36a64:	4056e007 	.word	0x4056e007
   36a68:	f28cfa5f 	.word	0xf28cfa5f
   36a6c:	f3cc5c9f 	.word	0xf3cc5c9f
   36a70:	5c9a4207 	.word	0x5c9a4207
   36a74:	460eea86 	.word	0x460eea86
   36a78:	6607ea86 	.word	0x6607ea86
   36a7c:	2602ea86 	.word	0x2602ea86
   36a80:	40694075 	.word	0x40694075
   36a84:	2207f3c1 	.word	0x2207f3c1
   36a88:	0e0f5c9a 	.word	0x0e0f5c9a
   36a8c:	f0865ddf 	.word	0xf0865ddf
   36a90:	ea820e36 	.word	0xea820e36
   36a94:	ea82020e 	.word	0xea82020e
   36a98:	b2cf4207 	.word	0xb2cf4207
   36a9c:	e007f813 	.word	0xe007f813
   36aa0:	4707f3c1 	.word	0x4707f3c1
   36aa4:	ea825ddf 	.word	0xea825ddf
   36aa8:	ea83630e 	.word	0xea83630e
   36aac:	ea832307 	.word	0xea832307
   36ab0:	ea820204 	.word	0xea820204
   36ab4:	e9c00e01 	.word	0xe9c00e01
   36ab8:	e9c06526 	.word	0xe9c06526
   36abc:	f8c02e2c 	.word	0xf8c02e2c
   36ac0:	ea834090 	.word	0xea834090
   36ac4:	406c0705 	.word	0x406c0705
   36ac8:	c094f8c0 	.word	0xc094f8c0
   36acc:	10a4f8c0 	.word	0x10a4f8c0
   36ad0:	30a8f8c0 	.word	0x30a8f8c0
   36ad4:	70acf8c0 	.word	0x70acf8c0
   36ad8:	40a0f8c0 	.word	0x40a0f8c0
   36adc:	b0052000 	.word	0xb0052000
   36ae0:	8ff0e8bd 	.word	0x8ff0e8bd
   36ae4:	6003230e 	.word	0x6003230e
   36ae8:	230ce686 	.word	0x230ce686
   36aec:	e6836003 	.word	0xe6836003
   36af0:	ce03e9d0 	.word	0xce03e9d0
   36af4:	8907e9d0 	.word	0x8907e9d0
   36af8:	7205e9d0 	.word	0x7205e9d0
   36afc:	68836a46 	.word	0x68836a46
   36b00:	f8df4670 	.word	0xf8df4670
   36b04:	4d29a0b0 	.word	0x4d29a0b0
   36b08:	c000f8cd 	.word	0xc000f8cd
   36b0c:	bf04f85a 	.word	0xbf04f85a
   36b10:	2c07f3c6 	.word	0x2c07f3c6
   36b14:	e00cf815 	.word	0xe00cf815
   36b18:	6c16ea4f 	.word	0x6c16ea4f
   36b1c:	030bea83 	.word	0x030bea83
   36b20:	b00cf815 	.word	0xb00cf815
   36b24:	fc86fa5f 	.word	0xfc86fa5f
   36b28:	0303ea8e 	.word	0x0303ea8e
   36b2c:	c00cf815 	.word	0xc00cf815
   36b30:	4e07f3c6 	.word	0x4e07f3c6
   36b34:	430bea83 	.word	0x430bea83
   36b38:	e00ef815 	.word	0xe00ef815
   36b3c:	630cea83 	.word	0x630cea83
   36b40:	ea839900 	.word	0xea839900
   36b44:	4059230e 	.word	0x4059230e
   36b48:	40474048 	.word	0x40474048
   36b4c:	fc87fa5f 	.word	0xfc87fa5f
   36b50:	e00cf815 	.word	0xe00cf815
   36b54:	6c17ea4f 	.word	0x6c17ea4f
   36b58:	b00cf815 	.word	0xb00cf815
   36b5c:	2c07f3c7 	.word	0x2c07f3c7
   36b60:	0202ea8e 	.word	0x0202ea8e
   36b64:	c00cf815 	.word	0xc00cf815
   36b68:	4e07f3c7 	.word	0x4e07f3c7
   36b6c:	620bea82 	.word	0x620bea82
   36b70:	e00ef815 	.word	0xe00ef815
   36b74:	220cea82 	.word	0x220cea82
   36b78:	420eea82 	.word	0x420eea82
   36b7c:	0802ea88 	.word	0x0802ea88
   36b80:	3108e9c4 	.word	0x3108e9c4
   36b84:	490a9100 	.word	0x490a9100
   36b88:	0908ea89 	.word	0x0908ea89
   36b8c:	0609ea86 	.word	0x0609ea86
   36b90:	e9c4458a 	.word	0xe9c4458a
   36b94:	e9c4070a 	.word	0xe9c4070a
   36b98:	e9c4960e 	.word	0xe9c4960e
   36b9c:	f104280c 	.word	0xf104280c
   36ba0:	d1b30420 	.word	0xd1b30420
   36ba4:	b0052000 	.word	0xb0052000
   36ba8:	8ff0e8bd 	.word	0x8ff0e8bd
   36bac:	000440b0 	.word	0x000440b0
   36bb0:	000445c8 	.word	0x000445c8
   36bb4:	000445ac 	.word	0x000445ac
   36bb8:	4bb269c2 	.word	0x4bb269c2
   36bbc:	2407f3c2 	.word	0x2407f3c2
   36bc0:	5d1d6881 	.word	0x5d1d6881
   36bc4:	5d1e0e14 	.word	0x5d1e0e14
   36bc8:	0101f081 	.word	0x0101f081
   36bcc:	5d1cb2d4 	.word	0x5d1cb2d4
   36bd0:	f3c2404d 	.word	0xf3c2404d
   36bd4:	5c594107 	.word	0x5c594107
   36bd8:	4506ea85 	.word	0x4506ea85
   36bdc:	ea8568c7 	.word	0xea8568c7
   36be0:	ea856504 	.word	0xea856504
   36be4:	69012501 	.word	0x69012501
   36be8:	6946406f 	.word	0x6946406f
   36bec:	0907ea81 	.word	0x0907ea81
   36bf0:	ea866984 	.word	0xea866984
   36bf4:	ea840609 	.word	0xea840609
   36bf8:	ea820806 	.word	0xea820806
   36bfc:	f3c20208 	.word	0xf3c20208
   36c00:	f8132407 	.word	0xf8132407
   36c04:	ea4fe004 	.word	0xea4fe004
   36c08:	f8136c12 	.word	0xf8136c12
   36c0c:	f085a00c 	.word	0xf085a00c
   36c10:	fa5f0402 	.word	0xfa5f0402
   36c14:	ea8efc82 	.word	0xea8efc82
   36c18:	f8130404 	.word	0xf8130404
   36c1c:	f3c2e00c 	.word	0xf3c2e00c
   36c20:	f8134c07 	.word	0xf8134c07
   36c24:	ea84c00c 	.word	0xea84c00c
   36c28:	ea84440a 	.word	0xea84440a
   36c2c:	ea84640e 	.word	0xea84640e
   36c30:	4061240c 	.word	0x4061240c
   36c34:	460c9401 	.word	0x460c9401
   36c38:	62056981 	.word	0x62056981
   36c3c:	ea824061 	.word	0xea824061
   36c40:	91030c01 	.word	0x91030c01
   36c44:	2e07f3cc 	.word	0x2e07f3cc
   36c48:	f8139901 	.word	0xf8139901
   36c4c:	ea4fe00e 	.word	0xea4fe00e
   36c50:	f8136a1c 	.word	0xf8136a1c
   36c54:	f081a00a 	.word	0xf081a00a
   36c58:	ea8e0b04 	.word	0xea8e0b04
   36c5c:	ea8e0e0b 	.word	0xea8e0e0b
   36c60:	fa5f4a0a 	.word	0xfa5f4a0a
   36c64:	f813fe8c 	.word	0xf813fe8c
   36c68:	e9c0e00e 	.word	0xe9c0e00e
   36c6c:	ea8a960a 	.word	0xea8a960a
   36c70:	f3cc650e 	.word	0xf3cc650e
   36c74:	f8134e07 	.word	0xf8134e07
   36c78:	ea87e00e 	.word	0xea87e00e
   36c7c:	ea850a01 	.word	0xea850a01
   36c80:	ea8a250e 	.word	0xea8a250e
   36c84:	ea860e05 	.word	0xea860e05
   36c88:	9100010e 	.word	0x9100010e
   36c8c:	ea864621 	.word	0xea864621
   36c90:	9c000904 	.word	0x9c000904
   36c94:	820ce9c0 	.word	0x820ce9c0
   36c98:	0604ea82 	.word	0x0604ea82
   36c9c:	f8c06247 	.word	0xf8c06247
   36ca0:	9102a03c 	.word	0x9102a03c
   36ca4:	9f036401 	.word	0x9f036401
   36ca8:	2407f3c6 	.word	0x2407f3c6
   36cac:	080eea81 	.word	0x080eea81
   36cb0:	7c12e9c0 	.word	0x7c12e9c0
   36cb4:	ea4f5d1c 	.word	0xea4f5d1c
   36cb8:	e9c06c16 	.word	0xe9c06c16
   36cbc:	f8c05e14 	.word	0xf8c05e14
   36cc0:	f0858058 	.word	0xf0858058
   36cc4:	f8130508 	.word	0xf8130508
   36cc8:	fa5f800c 	.word	0xfa5f800c
   36ccc:	9901fc86 	.word	0x9901fc86
   36cd0:	c00cf813 	.word	0xc00cf813
   36cd4:	f3c64065 	.word	0xf3c64065
   36cd8:	5d1c4407 	.word	0x5d1c4407
   36cdc:	4508ea85 	.word	0x4508ea85
   36ce0:	ea856381 	.word	0xea856381
   36ce4:	9902650c 	.word	0x9902650c
   36ce8:	2504ea85 	.word	0x2504ea85
   36cec:	91014069 	.word	0x91014069
   36cf0:	69844639 	.word	0x69844639
   36cf4:	9044f8c0 	.word	0x9044f8c0
   36cf8:	0805ea84 	.word	0x0805ea84
   36cfc:	0908ea86 	.word	0x0908ea86
   36d00:	2407f3c9 	.word	0x2407f3c9
   36d04:	a004f813 	.word	0xa004f813
   36d08:	6419ea4f 	.word	0x6419ea4f
   36d0c:	f0855d1c 	.word	0xf0855d1c
   36d10:	ea8a0c10 	.word	0xea8a0c10
   36d14:	fa5f0c0c 	.word	0xfa5f0c0c
   36d18:	f813fa89 	.word	0xf813fa89
   36d1c:	ea8ca00a 	.word	0xea8ca00a
   36d20:	f3c94c04 	.word	0xf3c94c04
   36d24:	5d1c4407 	.word	0x5d1c4407
   36d28:	6c0aea8c 	.word	0x6c0aea8c
   36d2c:	0e05ea8e 	.word	0x0e05ea8e
   36d30:	2c04ea8c 	.word	0x2c04ea8c
   36d34:	040cea8e 	.word	0x040cea8e
   36d38:	f8c04062 	.word	0xf8c04062
   36d3c:	f3c2e06c 	.word	0xf3c2e06c
   36d40:	f8132e07 	.word	0xf8132e07
   36d44:	ea4fe00e 	.word	0xea4fe00e
   36d48:	f8136a12 	.word	0xf8136a12
   36d4c:	f08ca00a 	.word	0xf08ca00a
   36d50:	ea8e0b20 	.word	0xea8e0b20
   36d54:	ea8e0e0b 	.word	0xea8e0e0b
   36d58:	fa5f4a0a 	.word	0xfa5f4a0a
   36d5c:	f813fe82 	.word	0xf813fe82
   36d60:	9f00e00e 	.word	0x9f00e00e
   36d64:	6a0eea8a 	.word	0x6a0eea8a
   36d68:	4e07f3c2 	.word	0x4e07f3c2
   36d6c:	b00ef813 	.word	0xb00ef813
   36d70:	0e07ea81 	.word	0x0e07ea81
   36d74:	ea8a9901 	.word	0xea8a9901
   36d78:	ea812b0b 	.word	0xea812b0b
   36d7c:	9f000a0b 	.word	0x9f000a0b
   36d80:	e060f8c0 	.word	0xe060f8c0
   36d84:	0e0aea88 	.word	0x0e0aea88
   36d88:	664665c7 	.word	0x664665c7
   36d8c:	907cf8c0 	.word	0x907cf8c0
   36d90:	060eea82 	.word	0x060eea82
   36d94:	ea876701 	.word	0xea876701
   36d98:	404f0904 	.word	0x404f0904
   36d9c:	66854061 	.word	0x66854061
   36da0:	1088f8c0 	.word	0x1088f8c0
   36da4:	2507f3c6 	.word	0x2507f3c6
   36da8:	0109ea88 	.word	0x0109ea88
   36dac:	1090f8c0 	.word	0x1090f8c0
   36db0:	0e315d5d 	.word	0x0e315d5d
   36db4:	f8c05c59 	.word	0xf8c05c59
   36db8:	f8c04084 	.word	0xf8c04084
   36dbc:	ea84b098 	.word	0xea84b098
   36dc0:	6747040b 	.word	0x6747040b
   36dc4:	0b40f08b 	.word	0x0b40f08b
   36dc8:	5ddfb2f7 	.word	0x5ddfb2f7
   36dcc:	60acf8c0 	.word	0x60acf8c0
   36dd0:	050bea85 	.word	0x050bea85
   36dd4:	4607f3c6 	.word	0x4607f3c6
   36dd8:	4501ea85 	.word	0x4501ea85
   36ddc:	ea855d99 	.word	0xea855d99
   36de0:	ea856507 	.word	0xea856507
   36de4:	f8c02501 	.word	0xf8c02501
   36de8:	406c409c 	.word	0x406c409c
   36dec:	0604ea89 	.word	0x0604ea89
   36df0:	2094f8c0 	.word	0x2094f8c0
   36df4:	f3c24072 	.word	0xf3c24072
   36df8:	f8c02107 	.word	0xf8c02107
   36dfc:	5c59c080 	.word	0x5c59c080
   36e00:	0c0aea89 	.word	0x0c0aea89
   36e04:	f8c00e17 	.word	0xf8c00e17
   36e08:	f8c0908c 	.word	0xf8c0908c
   36e0c:	f813c0a4 	.word	0xf813c0a4
   36e10:	f0859007 	.word	0xf0859007
   36e14:	b2d70c80 	.word	0xb2d70c80
   36e18:	010cea81 	.word	0x010cea81
   36e1c:	c007f813 	.word	0xc007f813
   36e20:	4707f3c2 	.word	0x4707f3c2
   36e24:	ea815ddf 	.word	0xea815ddf
   36e28:	ea814109 	.word	0xea814109
   36e2c:	ea83630c 	.word	0xea83630c
   36e30:	f8c02307 	.word	0xf8c02307
   36e34:	ea838078 	.word	0xea838078
   36e38:	ea830c0a 	.word	0xea830c0a
   36e3c:	f8c00808 	.word	0xf8c00808
   36e40:	ea8ee0a8 	.word	0xea8ee0a8
   36e44:	ea880706 	.word	0xea880706
   36e48:	ea8c0b02 	.word	0xea8c0b02
   36e4c:	ea830906 	.word	0xea830906
   36e50:	ea8a0e04 	.word	0xea8a0e04
   36e54:	f8c00104 	.word	0xf8c00104
   36e58:	e9c0a0a0 	.word	0xe9c0a0a0
   36e5c:	f8c07230 	.word	0xf8c07230
   36e60:	e9c060bc 	.word	0xe9c060bc
   36e64:	e9c0542c 	.word	0xe9c0542c
   36e68:	f8c08b36 	.word	0xf8c08b36
   36e6c:	e9c030c8 	.word	0xe9c030c8
   36e70:	f8c0c934 	.word	0xf8c0c934
   36e74:	f8c0e0cc 	.word	0xf8c0e0cc
   36e78:	200010b8 	.word	0x200010b8
   36e7c:	e8bdb005 	.word	0xe8bdb005
   36e80:	bf008ff0 	.word	0xbf008ff0
   36e84:	000440b0 	.word	0x000440b0

00036e88 <symbol_000e9b3>:
   36e88:	4ff0e92d 	.word	0x4ff0e92d
   36e8c:	0400e9d0 	.word	0x0400e9d0
   36e90:	46061040 	.word	0x46061040
   36e94:	f8d16823 	.word	0xf8d16823
   36e98:	b089a000 	.word	0xb089a000
   36e9c:	0a03ea8a 	.word	0x0a03ea8a
   36ea0:	800cf8d1 	.word	0x800cf8d1
   36ea4:	3e0168e3 	.word	0x3e0168e3
   36ea8:	68659006 	.word	0x68659006
   36eac:	68a0684f 	.word	0x68a0684f
   36eb0:	688a9205 	.word	0x688a9205
   36eb4:	0803ea88 	.word	0x0803ea88
   36eb8:	f1042e00 	.word	0xf1042e00
   36ebc:	96010310 	.word	0x96010310
   36ec0:	0507ea85 	.word	0x0507ea85
   36ec4:	0200ea82 	.word	0x0200ea82
   36ec8:	f8df9304 	.word	0xf8df9304
   36ecc:	f340b3e8 	.word	0xf340b3e8
   36ed0:	462b80db 	.word	0x462b80db
   36ed4:	0930f104 	.word	0x0930f104
   36ed8:	f18afa5f 	.word	0xf18afa5f
   36edc:	f788fa5f 	.word	0xf788fa5f
   36ee0:	b2d4b2de 	.word	0xb2d4b2de
   36ee4:	0021f85b 	.word	0x0021f85b
   36ee8:	5027f85b 	.word	0x5027f85b
   36eec:	7026f85b 	.word	0x7026f85b
   36ef0:	6024f85b 	.word	0x6024f85b
   36ef4:	4c20f859 	.word	0x4c20f859
   36ef8:	6118ea4f 	.word	0x6118ea4f
   36efc:	0c04ea80 	.word	0x0c04ea80
   36f00:	0c14f859 	.word	0x0c14f859
   36f04:	1021f85b 	.word	0x1021f85b
   36f08:	0e00ea85 	.word	0x0e00ea85
   36f0c:	f85b0e10 	.word	0xf85b0e10
   36f10:	f3c35020 	.word	0xf3c35020
   36f14:	ea8c2407 	.word	0xea8c2407
   36f18:	f3c22c31 	.word	0xf3c22c31
   36f1c:	f3c24107 	.word	0xf3c24107
   36f20:	f85b2207 	.word	0xf85b2207
   36f24:	f85b4024 	.word	0xf85b4024
   36f28:	ea8e0022 	.word	0xea8e0022
   36f2c:	0e1d2235 	.word	0x0e1d2235
   36f30:	4307f3c3 	.word	0x4307f3c3
   36f34:	3023f85b 	.word	0x3023f85b
   36f38:	6c34ea8c 	.word	0x6c34ea8c
   36f3c:	4c18f859 	.word	0x4c18f859
   36f40:	f85b9302 	.word	0xf85b9302
   36f44:	f8595025 	.word	0xf8595025
   36f48:	ea4f3c1c 	.word	0xea4f3c1c
   36f4c:	f85b6e1a 	.word	0xf85b6e1a
   36f50:	4066e02e 	.word	0x4066e02e
   36f54:	f3ca405f 	.word	0xf3ca405f
   36f58:	ea862407 	.word	0xea862407
   36f5c:	f3c82635 	.word	0xf3c82635
   36f60:	f3c82507 	.word	0xf3c82507
   36f64:	ea874807 	.word	0xea874807
   36f68:	f85b273e 	.word	0xf85b273e
   36f6c:	f85b4024 	.word	0xf85b4024
   36f70:	f85be025 	.word	0xf85be025
   36f74:	9b025028 	.word	0x9b025028
   36f78:	6030ea87 	.word	0x6030ea87
   36f7c:	4035ea80 	.word	0x4035ea80
   36f80:	1021f85b 	.word	0x1021f85b
   36f84:	6434ea82 	.word	0x6434ea82
   36f88:	4433ea84 	.word	0x4433ea84
   36f8c:	ea8cb2c3 	.word	0xea8cb2c3
   36f90:	f85b4131 	.word	0xf85b4131
   36f94:	f3ca3023 	.word	0xf3ca3023
   36f98:	f85b4a07 	.word	0xf85b4a07
   36f9c:	b2ca702a 	.word	0xb2ca702a
   36fa0:	6c14ea4f 	.word	0x6c14ea4f
   36fa4:	2022f85b 	.word	0x2022f85b
   36fa8:	663eea86 	.word	0x663eea86
   36fac:	f8599302 	.word	0xf8599302
   36fb0:	ea863c10 	.word	0xea863c10
   36fb4:	f85b4637 	.word	0xf85b4637
   36fb8:	f3c0e02c 	.word	0xf3c0e02c
   36fbc:	f85b2707 	.word	0xf85b2707
   36fc0:	ea82c027 	.word	0xea82c027
   36fc4:	f3c60a03 	.word	0xf3c60a03
   36fc8:	f3c64507 	.word	0xf3c64507
   36fcc:	f85b2207 	.word	0xf85b2207
   36fd0:	f85b3022 	.word	0xf85b3022
   36fd4:	ea8a5025 	.word	0xea8a5025
   36fd8:	f3c42a3e 	.word	0xf3c42a3e
   36fdc:	0e0f4207 	.word	0x0e0f4207
   36fe0:	6a3cea8a 	.word	0x6a3cea8a
   36fe4:	7027f85b 	.word	0x7027f85b
   36fe8:	ea8a9303 	.word	0xea8a9303
   36fec:	f85b4a35 	.word	0xf85b4a35
   36ff0:	f8598022 	.word	0xf8598022
   36ff4:	9b025c0c 	.word	0x9b025c0c
   36ff8:	406bb2f2 	.word	0x406bb2f2
   36ffc:	2022f85b 	.word	0x2022f85b
   37000:	2337ea83 	.word	0x2337ea83
   37004:	7c08f859 	.word	0x7c08f859
   37008:	fc84fa5f 	.word	0xfc84fa5f
   3700c:	2407f3c4 	.word	0x2407f3c4
   37010:	502cf85b 	.word	0x502cf85b
   37014:	0e364057 	.word	0x0e364057
   37018:	2024f85b 	.word	0x2024f85b
   3701c:	4c04f859 	.word	0x4c04f859
   37020:	6e10ea4f 	.word	0x6e10ea4f
   37024:	6026f85b 	.word	0x6026f85b
   37028:	f85b406c 	.word	0xf85b406c
   3702c:	ea84e02e 	.word	0xea84e02e
   37030:	f3c12636 	.word	0xf3c12636
   37034:	f3c12407 	.word	0xf3c12407
   37038:	f85b4107 	.word	0xf85b4107
   3703c:	ea871021 	.word	0xea871021
   37040:	ea8e2e3e 	.word	0xea8e2e3e
   37044:	f3c06232 	.word	0xf3c06232
   37048:	f85b4007 	.word	0xf85b4007
   3704c:	9d034024 	.word	0x9d034024
   37050:	4231ea82 	.word	0x4231ea82
   37054:	f85b9901 	.word	0xf85b9901
   37058:	ea830020 	.word	0xea830020
   3705c:	ea866335 	.word	0xea866335
   37060:	39016634 	.word	0x39016634
   37064:	4338ea83 	.word	0x4338ea83
   37068:	0920f109 	.word	0x0920f109
   3706c:	4830ea86 	.word	0x4830ea86
   37070:	f47f9101 	.word	0xf47f9101
   37074:	461daf31 	.word	0x461daf31
   37078:	99049b06 	.word	0x99049b06
   3707c:	6300f103 	.word	0x6300f103
   37080:	eb013b01 	.word	0xeb013b01
   37084:	93041343 	.word	0x93041343
   37088:	fa5f2400 	.word	0xfa5f2400
   3708c:	f85bf38a 	.word	0xf85bf38a
   37090:	9b047023 	.word	0x9b047023
   37094:	fa5f46a1 	.word	0xfa5f46a1
   37098:	6819fc85 	.word	0x6819fc85
   3709c:	6318ea4f 	.word	0x6318ea4f
   370a0:	46a69407 	.word	0x46a69407
   370a4:	402cf85b 	.word	0x402cf85b
   370a8:	c023f85b 	.word	0xc023f85b
   370ac:	f3c54079 	.word	0xf3c54079
   370b0:	f85b2307 	.word	0xf85b2307
   370b4:	f3c23023 	.word	0xf3c23023
   370b8:	ea814707 	.word	0xea814707
   370bc:	fa5f213c 	.word	0xfa5f213c
   370c0:	f85bfc82 	.word	0xf85bfc82
   370c4:	f85b002c 	.word	0xf85b002c
   370c8:	ea817027 	.word	0xea817027
   370cc:	90036133 	.word	0x90036133
   370d0:	4037ea81 	.word	0x4037ea81
   370d4:	fa5f9f04 	.word	0xfa5f9f04
   370d8:	f85bf688 	.word	0xf85bf688
   370dc:	68fb6026 	.word	0x68fb6026
   370e0:	40739001 	.word	0x40739001
   370e4:	f85b0e16 	.word	0xf85b0e16
   370e8:	98046026 	.word	0x98046026
   370ec:	2636ea83 	.word	0x2636ea83
   370f0:	f85b0e2b 	.word	0xf85b0e2b
   370f4:	f3c53023 	.word	0xf3c53023
   370f8:	496d4507 	.word	0x496d4507
   370fc:	7025f85b 	.word	0x7025f85b
   37100:	f89d9306 	.word	0xf89d9306
   37104:	6843c004 	.word	0x6843c004
   37108:	651aea4f 	.word	0x651aea4f
   3710c:	5025f85b 	.word	0x5025f85b
   37110:	2207f3c2 	.word	0x2207f3c2
   37114:	2022f85b 	.word	0x2022f85b
   37118:	c00cf811 	.word	0xc00cf811
   3711c:	69044063 	.word	0x69044063
   37120:	2535ea83 	.word	0x2535ea83
   37124:	2307f3ca 	.word	0x2307f3ca
   37128:	3023f85b 	.word	0x3023f85b
   3712c:	0c04ea8c 	.word	0x0c04ea8c
   37130:	6532ea85 	.word	0x6532ea85
   37134:	68829c03 	.word	0x68829c03
   37138:	6633ea86 	.word	0x6633ea86
   3713c:	f3c84660 	.word	0xf3c84660
   37140:	ea842307 	.word	0xea842307
   37144:	9c060c02 	.word	0x9c060c02
   37148:	3023f85b 	.word	0x3023f85b
   3714c:	4a07f3ca 	.word	0x4a07f3ca
   37150:	202af85b 	.word	0x202af85b
   37154:	2c34ea8c 	.word	0x2c34ea8c
   37158:	4807f3c8 	.word	0x4807f3c8
   3715c:	4637ea86 	.word	0x4637ea86
   37160:	6c33ea8c 	.word	0x6c33ea8c
   37164:	7028f85b 	.word	0x7028f85b
   37168:	4232ea8c 	.word	0x4232ea8c
   3716c:	4537ea85 	.word	0x4537ea85
   37170:	4c07f3c2 	.word	0x4c07f3c2
   37174:	5ccb0e33 	.word	0x5ccb0e33
   37178:	a00cf811 	.word	0xa00cf811
   3717c:	fc85fa5f 	.word	0xfc85fa5f
   37180:	400cf811 	.word	0x400cf811
   37184:	2707f3c5 	.word	0x2707f3c5
   37188:	464c9403 	.word	0x464c9403
   3718c:	ea805dcf 	.word	0xea805dcf
   37190:	98016303 	.word	0x98016303
   37194:	2307ea83 	.word	0x2307ea83
   37198:	fb82fa5f 	.word	0xfb82fa5f
   3719c:	430aea83 	.word	0x430aea83
   371a0:	b00bf811 	.word	0xb00bf811
   371a4:	6c10ea4f 	.word	0x6c10ea4f
   371a8:	f3639804 	.word	0xf3639804
   371ac:	f8110407 	.word	0xf8110407
   371b0:	f8cd800c 	.word	0xf8cd800c
   371b4:	9402b018 	.word	0x9402b018
   371b8:	2c07f3c2 	.word	0x2c07f3c2
   371bc:	ea4f9c03 	.word	0xea4f9c03
   371c0:	69426b12 	.word	0x69426b12
   371c4:	c00cf811 	.word	0xc00cf811
   371c8:	f3c64062 	.word	0xf3c64062
   371cc:	5dcf4707 	.word	0x5dcf4707
   371d0:	6808ea82 	.word	0x6808ea82
   371d4:	6a15ea4f 	.word	0x6a15ea4f
   371d8:	ea886982 	.word	0xea886982
   371dc:	9c062c0c 	.word	0x9c062c0c
   371e0:	f886fa5f 	.word	0xf886fa5f
   371e4:	4707ea8c 	.word	0x4707ea8c
   371e8:	8008f811 	.word	0x8008f811
   371ec:	c00af811 	.word	0xc00af811
   371f0:	a01cf8d0 	.word	0xa01cf8d0
   371f4:	40629801 	.word	0x40629801
   371f8:	0a0aea88 	.word	0x0a0aea88
   371fc:	620cea82 	.word	0x620cea82
   37200:	4807f3c0 	.word	0x4807f3c0
   37204:	2c07f3c0 	.word	0x2c07f3c0
   37208:	f8112000 	.word	0xf8112000
   3720c:	f3c6b00b 	.word	0xf3c6b00b
   37210:	5d8e2607 	.word	0x5d8e2607
   37214:	6b0bea8a 	.word	0x6b0bea8a
   37218:	4507f3c5 	.word	0x4507f3c5
   3721c:	a00cf811 	.word	0xa00cf811
   37220:	f8115d4d 	.word	0xf8115d4d
   37224:	ea821008 	.word	0xea821008
   37228:	ea8b2606 	.word	0xea8b2606
   3722c:	9c022b0a 	.word	0x9c022b0a
   37230:	4b05ea8b 	.word	0x4b05ea8b
   37234:	4601ea86 	.word	0x4601ea86
   37238:	2c13ea4f 	.word	0x2c13ea4f
   3723c:	ea4f0a31 	.word	0xea4f0a31
   37240:	f366221b 	.word	0xf366221b
   37244:	f36b0e07 	.word	0xf36b0e07
   37248:	f36c0007 	.word	0xf36c0007
   3724c:	ea4f240f 	.word	0xea4f240f
   37250:	f3624c13 	.word	0xf3624c13
   37254:	f361200f 	.word	0xf361200f
   37258:	f36c2e0f 	.word	0xf36c2e0f
   3725c:	0c314417 	.word	0x0c314417
   37260:	4e17f361 	.word	0x4e17f361
   37264:	46204601 	.word	0x46204601
   37268:	f3630e1b 	.word	0xf3630e1b
   3726c:	9b05601f 	.word	0x9b05601f
   37270:	60180a3d 	.word	0x60180a3d
   37274:	f3672000 	.word	0xf3672000
   37278:	ea4f0907 	.word	0xea4f0907
   3727c:	f365421b 	.word	0xf365421b
   37280:	0c3d290f 	.word	0x0c3d290f
   37284:	4917f365 	.word	0x4917f365
   37288:	0e360e3f 	.word	0x0e360e3f
   3728c:	4117f362 	.word	0x4117f362
   37290:	6b1bea4f 	.word	0x6b1bea4f
   37294:	691ff367 	.word	0x691ff367
   37298:	6e1ff366 	.word	0x6e1ff366
   3729c:	611ff36b 	.word	0x611ff36b
   372a0:	9004f8c3 	.word	0x9004f8c3
   372a4:	e008f8c3 	.word	0xe008f8c3
   372a8:	b00960d9 	.word	0xb00960d9
   372ac:	8ff0e8bd 	.word	0x8ff0e8bd
   372b0:	000440b0 	.word	0x000440b0
   372b4:	000441b0 	.word	0x000441b0

000372b8 <symbol_000e471>:
   372b8:	4ff0e92d 	.word	0x4ff0e92d
   372bc:	3500e9d0 	.word	0x3500e9d0
   372c0:	682fb089 	.word	0x682fb089
   372c4:	f8d1105b 	.word	0xf8d1105b
   372c8:	9306a000 	.word	0x9306a000
   372cc:	684c3b01 	.word	0x684c3b01
   372d0:	ea8a9301 	.word	0xea8a9301
   372d4:	68eb0a07 	.word	0x68eb0a07
   372d8:	68c9688f 	.word	0x68c9688f
   372dc:	40596868 	.word	0x40596868
   372e0:	68ae9b01 	.word	0x68ae9b01
   372e4:	2b009205 	.word	0x2b009205
   372e8:	0210f105 	.word	0x0210f105
   372ec:	0004ea80 	.word	0x0004ea80
   372f0:	0706ea87 	.word	0x0706ea87
   372f4:	f8df9204 	.word	0xf8df9204
   372f8:	f340b3dc 	.word	0xf340b3dc
   372fc:	46d180d7 	.word	0x46d180d7
   37300:	0830f105 	.word	0x0830f105
   37304:	f489fa5f 	.word	0xf489fa5f
   37308:	5024f85b 	.word	0x5024f85b
   3730c:	6c20f858 	.word	0x6c20f858
   37310:	fc80fa5f 	.word	0xfc80fa5f
   37314:	f85b0e04 	.word	0xf85b0e04
   37318:	f85bc02c 	.word	0xf85bc02c
   3731c:	406e4024 	.word	0x406e4024
   37320:	5c1cf858 	.word	0x5c1cf858
   37324:	2e07f3c1 	.word	0x2e07f3c1
   37328:	a02ef85b 	.word	0xa02ef85b
   3732c:	0505ea8c 	.word	0x0505ea8c
   37330:	2e34ea86 	.word	0x2e34ea86
   37334:	b2fbb2ca 	.word	0xb2fbb2ca
   37338:	6c17ea4f 	.word	0x6c17ea4f
   3733c:	4407f3c7 	.word	0x4407f3c7
   37340:	2707f3c7 	.word	0x2707f3c7
   37344:	6027f85b 	.word	0x6027f85b
   37348:	2022f85b 	.word	0x2022f85b
   3734c:	7c14f858 	.word	0x7c14f858
   37350:	3023f85b 	.word	0x3023f85b
   37354:	ea4f407a 	.word	0xea4f407a
   37358:	f85b6719 	.word	0xf85b6719
   3735c:	f85b7027 	.word	0xf85b7027
   37360:	ea82c02c 	.word	0xea82c02c
   37364:	ea822237 	.word	0xea822237
   37368:	f8586636 	.word	0xf8586636
   3736c:	ea852c18 	.word	0xea852c18
   37370:	ea8e2c3c 	.word	0xea8e2c3c
   37374:	0e0d6e3a 	.word	0x0e0d6e3a
   37378:	0a02ea83 	.word	0x0a02ea83
   3737c:	2307f3c9 	.word	0x2307f3c9
   37380:	3023f85b 	.word	0x3023f85b
   37384:	5025f85b 	.word	0x5025f85b
   37388:	4107f3c1 	.word	0x4107f3c1
   3738c:	1021f85b 	.word	0x1021f85b
   37390:	2707f3c0 	.word	0x2707f3c0
   37394:	2535ea8a 	.word	0x2535ea8a
   37398:	4a07f3c0 	.word	0x4a07f3c0
   3739c:	6033ea8c 	.word	0x6033ea8c
   373a0:	4031ea80 	.word	0x4031ea80
   373a4:	4024f85b 	.word	0x4024f85b
   373a8:	ea8e0e03 	.word	0xea8e0e03
   373ac:	f85b4434 	.word	0xf85b4434
   373b0:	b2e13023 	.word	0xb2e13023
   373b4:	f3c99302 	.word	0xf3c99302
   373b8:	f8584907 	.word	0xf8584907
   373bc:	f85b3c10 	.word	0xf85b3c10
   373c0:	f85b1021 	.word	0xf85b1021
   373c4:	f3c42029 	.word	0xf3c42029
   373c8:	f85b2c07 	.word	0xf85b2c07
   373cc:	f85b9027 	.word	0xf85b9027
   373d0:	4059702a 	.word	0x4059702a
   373d4:	302cf85b 	.word	0x302cf85b
   373d8:	4637ea86 	.word	0x4637ea86
   373dc:	6539ea85 	.word	0x6539ea85
   373e0:	4532ea85 	.word	0x4532ea85
   373e4:	2707f3c6 	.word	0x2707f3c6
   373e8:	9b029303 	.word	0x9b029303
   373ec:	4e07f3c5 	.word	0x4e07f3c5
   373f0:	7027f85b 	.word	0x7027f85b
   373f4:	902ef85b 	.word	0x902ef85b
   373f8:	4c07f3c6 	.word	0x4c07f3c6
   373fc:	ea4fb2c2 	.word	0xea4fb2c2
   37400:	ea816e15 	.word	0xea816e15
   37404:	b2e92333 	.word	0xb2e92333
   37408:	a02cf85b 	.word	0xa02cf85b
   3740c:	6337ea83 	.word	0x6337ea83
   37410:	2022f85b 	.word	0x2022f85b
   37414:	e02ef85b 	.word	0xe02ef85b
   37418:	1021f85b 	.word	0x1021f85b
   3741c:	7c0cf858 	.word	0x7c0cf858
   37420:	6c16ea4f 	.word	0x6c16ea4f
   37424:	b2f6407a 	.word	0xb2f6407a
   37428:	2e3eea82 	.word	0x2e3eea82
   3742c:	2026f85b 	.word	0x2026f85b
   37430:	6c08f858 	.word	0x6c08f858
   37434:	4939ea83 	.word	0x4939ea83
   37438:	40710e23 	.word	0x40710e23
   3743c:	6023f85b 	.word	0x6023f85b
   37440:	3c04f858 	.word	0x3c04f858
   37444:	702cf85b 	.word	0x702cf85b
   37448:	f3c54053 	.word	0xf3c54053
   3744c:	ea832507 	.word	0xea832507
   37450:	f85b2636 	.word	0xf85b2636
   37454:	f3c05025 	.word	0xf3c05025
   37458:	f3c02307 	.word	0xf3c02307
   3745c:	ea814007 	.word	0xea814007
   37460:	f85b2137 	.word	0xf85b2137
   37464:	f85b7023 	.word	0xf85b7023
   37468:	ea863020 	.word	0xea863020
   3746c:	ea816635 	.word	0xea816635
   37470:	f3c46737 	.word	0xf3c46737
   37474:	9a034407 	.word	0x9a034407
   37478:	4133ea86 	.word	0x4133ea86
   3747c:	f85b9b01 	.word	0xf85b9b01
   37480:	ea8e4024 	.word	0xea8e4024
   37484:	3b016e32 	.word	0x3b016e32
   37488:	403aea8e 	.word	0x403aea8e
   3748c:	4734ea87 	.word	0x4734ea87
   37490:	0820f108 	.word	0x0820f108
   37494:	f47f9301 	.word	0xf47f9301
   37498:	46caaf35 	.word	0x46caaf35
   3749c:	9a049b06 	.word	0x9a049b06
   374a0:	6300f103 	.word	0x6300f103
   374a4:	eb023b01 	.word	0xeb023b01
   374a8:	93041343 	.word	0x93041343
   374ac:	f38afa5f 	.word	0xf38afa5f
   374b0:	5023f85b 	.word	0x5023f85b
   374b4:	fa5f9b04 	.word	0xfa5f9b04
   374b8:	681cf881 	.word	0x681cf881
   374bc:	f85b0e03 	.word	0xf85b0e03
   374c0:	f85b2028 	.word	0xf85b2028
   374c4:	f3c18023 	.word	0xf3c18023
   374c8:	f85b2307 	.word	0xf85b2307
   374cc:	406c3023 	.word	0x406c3023
   374d0:	4507f3c7 	.word	0x4507f3c7
   374d4:	5025f85b 	.word	0x5025f85b
   374d8:	2438ea84 	.word	0x2438ea84
   374dc:	f887fa5f 	.word	0xf887fa5f
   374e0:	6028f85b 	.word	0x6028f85b
   374e4:	6433ea84 	.word	0x6433ea84
   374e8:	4535ea84 	.word	0x4535ea84
   374ec:	462e9602 	.word	0x462e9602
   374f0:	fa5f9c04 	.word	0xfa5f9c04
   374f4:	f85bf980 	.word	0xf85bf980
   374f8:	68639029 	.word	0x68639029
   374fc:	f85b0e3c 	.word	0xf85b0e3c
   37500:	96014024 	.word	0x96014024
   37504:	0303ea89 	.word	0x0303ea89
   37508:	ea839e04 	.word	0xea839e04
   3750c:	f3c72434 	.word	0xf3c72434
   37510:	0e0b2707 	.word	0x0e0b2707
   37514:	f85b4d6e 	.word	0xf85b4d6e
   37518:	f89d9027 	.word	0xf89d9027
   3751c:	f85b8004 	.word	0xf85b8004
   37520:	68f37023 	.word	0x68f37023
   37524:	0e00f04f 	.word	0x0e00f04f
   37528:	8008f815 	.word	0x8008f815
   3752c:	69324053 	.word	0x69324053
   37530:	4107f3c1 	.word	0x4107f3c1
   37534:	0802ea88 	.word	0x0802ea88
   37538:	97034642 	.word	0x97034642
   3753c:	7021f85b 	.word	0x7021f85b
   37540:	611aea4f 	.word	0x611aea4f
   37544:	1021f85b 	.word	0x1021f85b
   37548:	e018f8cd 	.word	0xe018f8cd
   3754c:	2331ea83 	.word	0x2331ea83
   37550:	6939ea83 	.word	0x6939ea83
   37554:	2307f3ca 	.word	0x2307f3ca
   37558:	3023f85b 	.word	0x3023f85b
   3755c:	9e0268b1 	.word	0x9e0268b1
   37560:	6333ea84 	.word	0x6333ea84
   37564:	4737ea83 	.word	0x4737ea83
   37568:	0801ea86 	.word	0x0801ea86
   3756c:	2307f3c0 	.word	0x2307f3c0
   37570:	f3ca9e03 	.word	0xf3ca9e03
   37574:	f3c04a07 	.word	0xf3c04a07
   37578:	f85b4007 	.word	0xf85b4007
   3757c:	f85b102a 	.word	0xf85b102a
   37580:	f8cd4023 	.word	0xf8cd4023
   37584:	f85be01c 	.word	0xf85be01c
   37588:	0e383020 	.word	0x0e383020
   3758c:	ea885c28 	.word	0xea885c28
   37590:	ea892836 	.word	0xea892836
   37594:	ea884933 	.word	0xea884933
   37598:	ea886834 	.word	0xea886834
   3759c:	f3c94131 	.word	0xf3c94131
   375a0:	ea822407 	.word	0xea822407
   375a4:	9a016000 	.word	0x9a016000
   375a8:	8004f815 	.word	0x8004f815
   375ac:	4307f3c1 	.word	0x4307f3c1
   375b0:	6a11ea4f 	.word	0x6a11ea4f
   375b4:	f8155cec 	.word	0xf8155cec
   375b8:	f3c2b00a 	.word	0xf3c2b00a
   375bc:	9a042a07 	.word	0x9a042a07
   375c0:	ea80b2fb 	.word	0xea80b2fb
   375c4:	ea802008 	.word	0xea802008
   375c8:	5ceb4004 	.word	0x5ceb4004
   375cc:	f8156954 	.word	0xf8156954
   375d0:	f3c9a00a 	.word	0xf3c9a00a
   375d4:	40634807 	.word	0x40634807
   375d8:	6008f815 	.word	0x6008f815
   375dc:	6b0bea83 	.word	0x6b0bea83
   375e0:	2b0aea8b 	.word	0x2b0aea8b
   375e4:	4b06ea8b 	.word	0x4b06ea8b
   375e8:	260046f4 	.word	0x260046f4
   375ec:	f881fa5f 	.word	0xf881fa5f
   375f0:	f8156994 	.word	0xf8156994
   375f4:	ea4f8008 	.word	0xea4f8008
   375f8:	f8d26319 	.word	0xf8d26319
   375fc:	5ceba01c 	.word	0x5ceba01c
   37600:	fa5f9a01 	.word	0xfa5f9a01
   37604:	f815f989 	.word	0xf815f989
   37608:	ea889009 	.word	0xea889009
   3760c:	ea880804 	.word	0xea880804
   37610:	0e136803 	.word	0x0e136803
   37614:	090aea89 	.word	0x090aea89
   37618:	a003f815 	.word	0xa003f815
   3761c:	4307f3c2 	.word	0x4307f3c2
   37620:	f3c75cec 	.word	0xf3c75cec
   37624:	5ceb2307 	.word	0x5ceb2307
   37628:	2107f3c1 	.word	0x2107f3c1
   3762c:	ea885c69 	.word	0xea885c69
   37630:	ea882803 	.word	0xea882803
   37634:	ea894804 	.word	0xea894804
   37638:	ea4f690a 	.word	0xea4f690a
   3763c:	ea89241b 	.word	0xea89241b
   37640:	f36b2901 	.word	0xf36b2901
   37644:	ea4f0c07 	.word	0xea4f0c07
   37648:	f3682118 	.word	0xf3682118
   3764c:	22000607 	.word	0x22000607
   37650:	260ff361 	.word	0x260ff361
   37654:	2c0ff364 	.word	0x2c0ff364
   37658:	441bea4f 	.word	0x441bea4f
   3765c:	4c17f364 	.word	0x4c17f364
   37660:	f3c74634 	.word	0xf3c74634
   37664:	5ded4707 	.word	0x5ded4707
   37668:	0e07f360 	.word	0x0e07f360
   3766c:	4905ea89 	.word	0x4905ea89
   37670:	2319ea4f 	.word	0x2319ea4f
   37674:	f3690a05 	.word	0xf3690a05
   37678:	ea4f0207 	.word	0xea4f0207
   3767c:	f3634118 	.word	0xf3634118
   37680:	f365220f 	.word	0xf365220f
   37684:	0c052e0f 	.word	0x0c052e0f
   37688:	4417f361 	.word	0x4417f361
   3768c:	4e17f365 	.word	0x4e17f365
   37690:	46110e00 	.word	0x46110e00
   37694:	6e1ff360 	.word	0x6e1ff360
   37698:	ea4f4620 	.word	0xea4f4620
   3769c:	ea4f4319 	.word	0xea4f4319
   376a0:	f3636818 	.word	0xf3636818
   376a4:	9b054117 	.word	0x9b054117
   376a8:	601ff368 	.word	0x601ff368
   376ac:	20006098 	.word	0x20006098
   376b0:	6b1bea4f 	.word	0x6b1bea4f
   376b4:	6919ea4f 	.word	0x6919ea4f
   376b8:	6c1ff36b 	.word	0x6c1ff36b
   376bc:	611ff369 	.word	0x611ff369
   376c0:	e000f8c3 	.word	0xe000f8c3
   376c4:	c004f8c3 	.word	0xc004f8c3
   376c8:	b00960d9 	.word	0xb00960d9
   376cc:	8ff0e8bd 	.word	0x8ff0e8bd
   376d0:	000445d8 	.word	0x000445d8
   376d4:	000446d8 	.word	0x000446d8

000376d8 <symbol_0005bab>:
   376d8:	4614b410 	.word	0x4614b410
   376dc:	461a2901 	.word	0x461a2901
   376e0:	d0034621 	.word	0xd0034621
   376e4:	4b04f85d 	.word	0x4b04f85d
   376e8:	bde6f7ff 	.word	0xbde6f7ff
   376ec:	4b04f85d 	.word	0x4b04f85d
   376f0:	bbcaf7ff 	.word	0xbbcaf7ff

000376f4 <ok_rsp_parser>:
   376f4:	47702000 	.word	0x47702000

000376f8 <pdn_state_get_parser>:
   376f8:	b5702200 	.word	0xb5702200
   376fc:	b084780b 	.word	0xb084780b
   37700:	e9cd460e 	.word	0xe9cd460e
   37704:	e9cd2200 	.word	0xe9cd2200
   37708:	b3232202 	.word	0xb3232202
   3770c:	2b20460c 	.word	0x2b20460c
   37710:	d01b460d 	.word	0xd01b460d
   37714:	3201700b 	.word	0x3201700b
   37718:	3f01f814 	.word	0x3f01f814
   3771c:	460d18b1 	.word	0x460d18b1
   37720:	d1f42b00 	.word	0xd1f42b00
   37724:	4b0d2200 	.word	0x4b0d2200
   37728:	f853702a 	.word	0xf853702a
   3772c:	4a0c3020 	.word	0x4a0c3020
   37730:	2110681b 	.word	0x2110681b
   37734:	f0054668 	.word	0xf0054668
   37738:	4669fedb 	.word	0x4669fedb
   3773c:	f00a4630 	.word	0xf00a4630
   37740:	3000fb62 	.word	0x3000fb62
   37744:	2001bf18 	.word	0x2001bf18
   37748:	bd70b004 	.word	0xbd70b004
   3774c:	3f01f814 	.word	0x3f01f814
   37750:	d1dc2b00 	.word	0xd1dc2b00
   37754:	460de7e6 	.word	0x460de7e6
   37758:	bf00e7e4 	.word	0xbf00e7e4
   3775c:	20025fe0 	.word	0x20025fe0
   37760:	00044b7c 	.word	0x00044b7c

00037764 <pdn_id_get_parser>:
   37764:	780bb570 	.word	0x780bb570
   37768:	b3134606 	.word	0xb3134606
   3776c:	24004608 	.word	0x24004608
   37770:	2b20460a 	.word	0x2b20460a
   37774:	d0174615 	.word	0xd0174615
   37778:	34017013 	.word	0x34017013
   3777c:	3f01f810 	.word	0x3f01f810
   37780:	4615190a 	.word	0x4615190a
   37784:	d1f42b00 	.word	0xd1f42b00
   37788:	46082300 	.word	0x46082300
   3778c:	213a702b 	.word	0x213a702b
   37790:	fad7f00a 	.word	0xfad7f00a
   37794:	3001b130 	.word	0x3001b130
   37798:	f8ebf00a 	.word	0xf8ebf00a
   3779c:	f8534b06 	.word	0xf8534b06
   377a0:	60583026 	.word	0x60583026
   377a4:	bd702000 	.word	0xbd702000
   377a8:	3f01f810 	.word	0x3f01f810
   377ac:	d1e02b00 	.word	0xd1e02b00
   377b0:	460de7ea 	.word	0x460de7ea
   377b4:	bf00e7e8 	.word	0xbf00e7e8
   377b8:	20025fe0 	.word	0x20025fe0

000377bc <context_create_parser>:
   377bc:	780bb570 	.word	0x780bb570
   377c0:	b3134606 	.word	0xb3134606
   377c4:	24004608 	.word	0x24004608
   377c8:	2b20460a 	.word	0x2b20460a
   377cc:	d0174615 	.word	0xd0174615
   377d0:	34017013 	.word	0x34017013
   377d4:	3f01f810 	.word	0x3f01f810
   377d8:	4615190a 	.word	0x4615190a
   377dc:	d1f42b00 	.word	0xd1f42b00
   377e0:	46082300 	.word	0x46082300
   377e4:	213a702b 	.word	0x213a702b
   377e8:	faabf00a 	.word	0xfaabf00a
   377ec:	4b08b130 	.word	0x4b08b130
   377f0:	f8533001 	.word	0xf8533001
   377f4:	f00a4026 	.word	0xf00a4026
   377f8:	6020f8bc 	.word	0x6020f8bc
   377fc:	bd702000 	.word	0xbd702000
   37800:	3f01f810 	.word	0x3f01f810
   37804:	d1e02b00 	.word	0xd1e02b00
   37808:	460de7ea 	.word	0x460de7ea
   3780c:	bf00e7e8 	.word	0xbf00e7e8
   37810:	20025fe0 	.word	0x20025fe0

00037814 <pdn_interface_init>:
   37814:	33fff04f 	.word	0x33fff04f
   37818:	4c09b510 	.word	0x4c09b510
   3781c:	21002228 	.word	0x21002228
   37820:	60234808 	.word	0x60234808
   37824:	f8e5f00a 	.word	0xf8e5f00a
   37828:	2201f240 	.word	0x2201f240
   3782c:	20662100 	.word	0x20662100
   37830:	ff70f7f2 	.word	0xff70f7f2
   37834:	60202800 	.word	0x60202800
   37838:	2003bfb4 	.word	0x2003bfb4
   3783c:	bd102000 	.word	0xbd102000
   37840:	20025edc 	.word	0x20025edc
   37844:	20025fe0 	.word	0x20025fe0

00037848 <pdn_interface_open>:
   37848:	43f0e92d 	.word	0x43f0e92d
   3784c:	b0832866 	.word	0xb0832866
   37850:	80bcf040 	.word	0x80bcf040
   37854:	7f00f5b1 	.word	0x7f00f5b1
   37858:	80aaf040 	.word	0x80aaf040
   3785c:	2302f240 	.word	0x2302f240
   37860:	f040429a 	.word	0xf040429a
   37864:	4c6280a5 	.word	0x4c6280a5
   37868:	b34d6825 	.word	0xb34d6825
   3786c:	2b006863 	.word	0x2b006863
   37870:	8098f000 	.word	0x8098f000
   37874:	2b0068a3 	.word	0x2b0068a3
   37878:	8096f000 	.word	0x8096f000
   3787c:	2b0068e3 	.word	0x2b0068e3
   37880:	8094f000 	.word	0x8094f000
   37884:	2b006923 	.word	0x2b006923
   37888:	8098f000 	.word	0x8098f000
   3788c:	2b006963 	.word	0x2b006963
   37890:	8098f000 	.word	0x8098f000
   37894:	2b0069a3 	.word	0x2b0069a3
   37898:	8096f000 	.word	0x8096f000
   3789c:	2b0069e3 	.word	0x2b0069e3
   378a0:	808ef000 	.word	0x808ef000
   378a4:	b1536a23 	.word	0xb1536a23
   378a8:	25096a63 	.word	0x25096a63
   378ac:	200cb143 	.word	0x200cb143
   378b0:	fcccf7eb 	.word	0xfcccf7eb
   378b4:	30fff04f 	.word	0x30fff04f
   378b8:	e8bdb003 	.word	0xe8bdb003
   378bc:	250883f0 	.word	0x250883f0
   378c0:	f7fe2074 	.word	0xf7fe2074
   378c4:	f844ff3f 	.word	0xf844ff3f
   378c8:	28000025 	.word	0x28000025
   378cc:	2274d0ef 	.word	0x2274d0ef
   378d0:	f00a2100 	.word	0xf00a2100
   378d4:	2101f88e 	.word	0x2101f88e
   378d8:	f04f2003 	.word	0xf04f2003
   378dc:	f85437ff 	.word	0xf85437ff
   378e0:	4a443025 	.word	0x4a443025
   378e4:	f8546099 	.word	0xf8546099
   378e8:	f44f3025 	.word	0xf44f3025
   378ec:	67187180 	.word	0x67187180
   378f0:	4841605f 	.word	0x4841605f
   378f4:	810cf8df 	.word	0x810cf8df
   378f8:	fdfaf005 	.word	0xfdfaf005
   378fc:	f8d8483e 	.word	0xf8d8483e
   37900:	26009000 	.word	0x26009000
   37904:	faeef7e2 	.word	0xfaeef7e2
   37908:	46024633 	.word	0x46024633
   3790c:	4648493a 	.word	0x4648493a
   37910:	96009601 	.word	0x96009601
   37914:	fea8f7f2 	.word	0xfea8f7f2
   37918:	48374681 	.word	0x48374681
   3791c:	fae2f7e2 	.word	0xfae2f7e2
   37920:	d1594548 	.word	0xd1594548
   37924:	e9cd4633 	.word	0xe9cd4633
   37928:	f44f6600 	.word	0xf44f6600
   3792c:	49327280 	.word	0x49327280
   37930:	0000f8d8 	.word	0x0000f8d8
   37934:	ff80f7f2 	.word	0xff80f7f2
   37938:	48304606 	.word	0x48304606
   3793c:	fad2f7e2 	.word	0xfad2f7e2
   37940:	db154286 	.word	0xdb154286
   37944:	492c4602 	.word	0x492c4602
   37948:	f00a482c 	.word	0xf00a482c
   3794c:	b978fa2b 	.word	0xb978fa2b
   37950:	46284929 	.word	0x46284929
   37954:	ff32f7ff 	.word	0xff32f7ff
   37958:	2202b9b0 	.word	0x2202b9b0
   3795c:	3025f854 	.word	0x3025f854
   37960:	40f1f045 	.word	0x40f1f045
   37964:	10d0f440 	.word	0x10d0f440
   37968:	b003609a 	.word	0xb003609a
   3796c:	83f0e8bd 	.word	0x83f0e8bd
   37970:	f7e24823 	.word	0xf7e24823
   37974:	4920fab7 	.word	0x4920fab7
   37978:	48214602 	.word	0x48214602
   3797c:	fa12f00a 	.word	0xfa12f00a
   37980:	2008b960 	.word	0x2008b960
   37984:	fc62f7eb 	.word	0xfc62f7eb
   37988:	0025f854 	.word	0x0025f854
   3798c:	fef8f7fe 	.word	0xfef8f7fe
   37990:	f04f2300 	.word	0xf04f2300
   37994:	f84430ff 	.word	0xf84430ff
   37998:	e78d3025 	.word	0xe78d3025
   3799c:	f7eb2005 	.word	0xf7eb2005
   379a0:	e7f1fc55 	.word	0xe7f1fc55
   379a4:	e78b2501 	.word	0xe78b2501
   379a8:	e7892502 	.word	0xe7892502
   379ac:	e7872503 	.word	0xe7872503
   379b0:	f7eb2016 	.word	0xf7eb2016
   379b4:	f04ffc4b 	.word	0xf04ffc4b
   379b8:	e77d30ff 	.word	0xe77d30ff
   379bc:	e77f2504 	.word	0xe77f2504
   379c0:	e77d2507 	.word	0xe77d2507
   379c4:	e77b2505 	.word	0xe77b2505
   379c8:	e7792506 	.word	0xe7792506
   379cc:	f7eb202f 	.word	0xf7eb202f
   379d0:	f04ffc3d 	.word	0xf04ffc3d
   379d4:	e76f30ff 	.word	0xe76f30ff
   379d8:	f7eb2005 	.word	0xf7eb2005
   379dc:	f854fc37 	.word	0xf854fc37
   379e0:	f7fe0025 	.word	0xf7fe0025
   379e4:	f844fecd 	.word	0xf844fecd
   379e8:	46386025 	.word	0x46386025
   379ec:	bf00e764 	.word	0xbf00e764
   379f0:	20025fe0 	.word	0x20025fe0
   379f4:	00044b58 	.word	0x00044b58
   379f8:	20025ee0 	.word	0x20025ee0
   379fc:	00044b68 	.word	0x00044b68
   37a00:	00044b74 	.word	0x00044b74
   37a04:	20025edc 	.word	0x20025edc

00037a08 <pdn_interface_connect>:
   37a08:	4ff0e92d 	.word	0x4ff0e92d
   37a0c:	2900b083 	.word	0x2900b083
   37a10:	813ef000 	.word	0x813ef000
   37a14:	46912a64 	.word	0x46912a64
   37a18:	813af200 	.word	0x813af200
   37a1c:	46084605 	.word	0x46084605
   37a20:	f7e24688 	.word	0xf7e24688
   37a24:	2864fa5f 	.word	0x2864fa5f
   37a28:	8132f200 	.word	0x8132f200
   37a2c:	43ab4ba5 	.word	0x43ab4ba5
   37a30:	8125f040 	.word	0x8125f040
   37a34:	45f1f025 	.word	0x45f1f025
   37a38:	15d0f425 	.word	0x15d0f425
   37a3c:	f3002d09 	.word	0xf3002d09
   37a40:	4fa1811e 	.word	0x4fa1811e
   37a44:	3025f857 	.word	0x3025f857
   37a48:	f0002b00 	.word	0xf0002b00
   37a4c:	689a8118 	.word	0x689a8118
   37a50:	f0002a00 	.word	0xf0002a00
   37a54:	2d008114 	.word	0x2d008114
   37a58:	8111f2c0 	.word	0x8111f2c0
   37a5c:	2b02689b 	.word	0x2b02689b
   37a60:	810df040 	.word	0x810df040
   37a64:	4a9a4e99 	.word	0x4a9a4e99
   37a68:	7180f44f 	.word	0x7180f44f
   37a6c:	f0054630 	.word	0xf0054630
   37a70:	f857fd3f 	.word	0xf857fd3f
   37a74:	46043025 	.word	0x46043025
   37a78:	7180f5c0 	.word	0x7180f5c0
   37a7c:	4a95681b 	.word	0x4a95681b
   37a80:	f0051830 	.word	0xf0051830
   37a84:	f857fd35 	.word	0xf857fd35
   37a88:	44043025 	.word	0x44043025
   37a8c:	f0036f1b 	.word	0xf0036f1b
   37a90:	2a030203 	.word	0x2a030203
   37a94:	80eaf000 	.word	0x80eaf000
   37a98:	eb06079b 	.word	0xeb06079b
   37a9c:	f5c40004 	.word	0xf5c40004
   37aa0:	bf4c7180 	.word	0xbf4c7180
   37aa4:	4b8d4b8c 	.word	0x4b8d4b8c
   37aa8:	f0054a8d 	.word	0xf0054a8d
   37aac:	4404fd21 	.word	0x4404fd21
   37ab0:	4a8c4643 	.word	0x4a8c4643
   37ab4:	7180f5c4 	.word	0x7180f5c4
   37ab8:	f0051930 	.word	0xf0051930
   37abc:	4420fd19 	.word	0x4420fd19
   37ac0:	7f80f5b0 	.word	0x7f80f5b0
   37ac4:	80f7f300 	.word	0x80f7f300
   37ac8:	a238f8df 	.word	0xa238f8df
   37acc:	f8da487f 	.word	0xf8da487f
   37ad0:	2400b000 	.word	0x2400b000
   37ad4:	fa06f7e2 	.word	0xfa06f7e2
   37ad8:	46024623 	.word	0x46024623
   37adc:	4658497b 	.word	0x4658497b
   37ae0:	94009401 	.word	0x94009401
   37ae4:	fdc0f7f2 	.word	0xfdc0f7f2
   37ae8:	48784683 	.word	0x48784683
   37aec:	f9faf7e2 	.word	0xf9faf7e2
   37af0:	d0084558 	.word	0xd0084558
   37af4:	f7eb2005 	.word	0xf7eb2005
   37af8:	f04ffba9 	.word	0xf04ffba9
   37afc:	462034ff 	.word	0x462034ff
   37b00:	e8bdb003 	.word	0xe8bdb003
   37b04:	46238ff0 	.word	0x46238ff0
   37b08:	4400e9cd 	.word	0x4400e9cd
   37b0c:	7280f44f 	.word	0x7280f44f
   37b10:	f8da496e 	.word	0xf8da496e
   37b14:	f7f20000 	.word	0xf7f20000
   37b18:	4604fe8f 	.word	0x4604fe8f
   37b1c:	f7e24872 	.word	0xf7e24872
   37b20:	4284f9e1 	.word	0x4284f9e1
   37b24:	8091f2c0 	.word	0x8091f2c0
   37b28:	49684602 	.word	0x49684602
   37b2c:	f00a486e 	.word	0xf00a486e
   37b30:	2800f939 	.word	0x2800f939
   37b34:	8089f040 	.word	0x8089f040
   37b38:	46284964 	.word	0x46284964
   37b3c:	fddaf7ff 	.word	0xfddaf7ff
   37b40:	28004604 	.word	0x28004604
   37b44:	4a69d1db 	.word	0x4a69d1db
   37b48:	7180f44f 	.word	0x7180f44f
   37b4c:	f005485f 	.word	0xf005485f
   37b50:	f857fccf 	.word	0xf857fccf
   37b54:	f5c03025 	.word	0xf5c03025
   37b58:	681b7180 	.word	0x681b7180
   37b5c:	44304a64 	.word	0x44304a64
   37b60:	fcc6f005 	.word	0xfcc6f005
   37b64:	f8da4859 	.word	0xf8da4859
   37b68:	f7e2b000 	.word	0xf7e2b000
   37b6c:	4623f9bb 	.word	0x4623f9bb
   37b70:	49564602 	.word	0x49564602
   37b74:	94014658 	.word	0x94014658
   37b78:	f7f29400 	.word	0xf7f29400
   37b7c:	4683fd75 	.word	0x4683fd75
   37b80:	f7e24852 	.word	0xf7e24852
   37b84:	4558f9af 	.word	0x4558f9af
   37b88:	4623d1b4 	.word	0x4623d1b4
   37b8c:	7280f44f 	.word	0x7280f44f
   37b90:	f8da494e 	.word	0xf8da494e
   37b94:	e9cd0000 	.word	0xe9cd0000
   37b98:	f7f24400 	.word	0xf7f24400
   37b9c:	4683fe4d 	.word	0x4683fe4d
   37ba0:	f7e24851 	.word	0xf7e24851
   37ba4:	4583f99f 	.word	0x4583f99f
   37ba8:	4602db4f 	.word	0x4602db4f
   37bac:	484e4947 	.word	0x484e4947
   37bb0:	f8f8f00a 	.word	0xf8f8f00a
   37bb4:	d1482800 	.word	0xd1482800
   37bb8:	f8572103 	.word	0xf8572103
   37bbc:	464a3025 	.word	0x464a3025
   37bc0:	f8576099 	.word	0xf8576099
   37bc4:	46410025 	.word	0x46410025
   37bc8:	f009300c 	.word	0xf009300c
   37bcc:	4a49fef2 	.word	0x4a49fef2
   37bd0:	7180f44f 	.word	0x7180f44f
   37bd4:	f005483d 	.word	0xf005483d
   37bd8:	4601fc8b 	.word	0x4601fc8b
   37bdc:	3025f857 	.word	0x3025f857
   37be0:	7180f5c1 	.word	0x7180f5c1
   37be4:	4a42681b 	.word	0x4a42681b
   37be8:	f0051830 	.word	0xf0051830
   37bec:	4837fc81 	.word	0x4837fc81
   37bf0:	6000f8da 	.word	0x6000f8da
   37bf4:	f976f7e2 	.word	0xf976f7e2
   37bf8:	46024623 	.word	0x46024623
   37bfc:	46304933 	.word	0x46304933
   37c00:	94009401 	.word	0x94009401
   37c04:	fd30f7f2 	.word	0xfd30f7f2
   37c08:	48304606 	.word	0x48304606
   37c0c:	f96af7e2 	.word	0xf96af7e2
   37c10:	d15342b0 	.word	0xd15342b0
   37c14:	f44f4623 	.word	0xf44f4623
   37c18:	492c7280 	.word	0x492c7280
   37c1c:	0000f8da 	.word	0x0000f8da
   37c20:	4400e9cd 	.word	0x4400e9cd
   37c24:	fe08f7f2 	.word	0xfe08f7f2
   37c28:	48334606 	.word	0x48334606
   37c2c:	f95af7e2 	.word	0xf95af7e2
   37c30:	db334286 	.word	0xdb334286
   37c34:	49254602 	.word	0x49254602
   37c38:	f00a482f 	.word	0xf00a482f
   37c3c:	bb68f8b3 	.word	0xbb68f8b3
   37c40:	49224628 	.word	0x49224628
   37c44:	fd8ef7ff 	.word	0xfd8ef7ff
   37c48:	482ce759 	.word	0x482ce759
   37c4c:	f94af7e2 	.word	0xf94af7e2
   37c50:	4602491e 	.word	0x4602491e
   37c54:	f00a4829 	.word	0xf00a4829
   37c58:	2800f8a5 	.word	0x2800f8a5
   37c5c:	af4af47f 	.word	0xaf4af47f
   37c60:	f7eb2008 	.word	0xf7eb2008
   37c64:	f04ffaf3 	.word	0xf04ffaf3
   37c68:	e74834ff 	.word	0xe74834ff
   37c6c:	7180f5c4 	.word	0x7180f5c4
   37c70:	4b231930 	.word	0x4b231930
   37c74:	f0054a1a 	.word	0xf0054a1a
   37c78:	4404fc3b 	.word	0x4404fc3b
   37c7c:	f04fe718 	.word	0xf04fe718
   37c80:	200934ff 	.word	0x200934ff
   37c84:	fae2f7eb 	.word	0xfae2f7eb
   37c88:	b0034620 	.word	0xb0034620
   37c8c:	8ff0e8bd 	.word	0x8ff0e8bd
   37c90:	f7eb2016 	.word	0xf7eb2016
   37c94:	f04ffadb 	.word	0xf04ffadb
   37c98:	e73034ff 	.word	0xe73034ff
   37c9c:	f7e24817 	.word	0xf7e24817
   37ca0:	490af921 	.word	0x490af921
   37ca4:	48154602 	.word	0x48154602
   37ca8:	f87cf00a 	.word	0xf87cf00a
   37cac:	2008b930 	.word	0x2008b930
   37cb0:	faccf7eb 	.word	0xfaccf7eb
   37cb4:	f04fe723 	.word	0xf04fe723
   37cb8:	e72034ff 	.word	0xe72034ff
   37cbc:	f7eb2005 	.word	0xf7eb2005
   37cc0:	e71cfac5 	.word	0xe71cfac5
   37cc4:	789a0000 	.word	0x789a0000
   37cc8:	20025fe0 	.word	0x20025fe0
   37ccc:	20025ee0 	.word	0x20025ee0
   37cd0:	00044ae4 	.word	0x00044ae4
   37cd4:	00044af0 	.word	0x00044af0
   37cd8:	00044b04 	.word	0x00044b04
   37cdc:	00044b0c 	.word	0x00044b0c
   37ce0:	00044afc 	.word	0x00044afc
   37ce4:	00044b3c 	.word	0x00044b3c
   37ce8:	00043b04 	.word	0x00043b04
   37cec:	00044b10 	.word	0x00044b10
   37cf0:	00044b1c 	.word	0x00044b1c
   37cf4:	00044b20 	.word	0x00044b20
   37cf8:	00044b30 	.word	0x00044b30
   37cfc:	00044b74 	.word	0x00044b74
   37d00:	00044af4 	.word	0x00044af4
   37d04:	20025edc 	.word	0x20025edc

00037d08 <pdn_interface_close>:
   37d08:	43f0e92d 	.word	0x43f0e92d
   37d0c:	b0834b63 	.word	0xb0834b63
   37d10:	f0404383 	.word	0xf0404383
   37d14:	f020809d 	.word	0xf020809d
   37d18:	f42444f1 	.word	0xf42444f1
   37d1c:	2c0914d0 	.word	0x2c0914d0
   37d20:	8096f300 	.word	0x8096f300
   37d24:	f8554d5e 	.word	0xf8554d5e
   37d28:	28000024 	.word	0x28000024
   37d2c:	8090f000 	.word	0x8090f000
   37d30:	2b006883 	.word	0x2b006883
   37d34:	808cf000 	.word	0x808cf000
   37d38:	2b036883 	.word	0x2b036883
   37d3c:	f7fed008 	.word	0xf7fed008
   37d40:	2300fd1f 	.word	0x2300fd1f
   37d44:	f8454618 	.word	0xf8454618
   37d48:	b0033024 	.word	0xb0033024
   37d4c:	83f0e8bd 	.word	0x83f0e8bd
   37d50:	4a554e54 	.word	0x4a554e54
   37d54:	7180f44f 	.word	0x7180f44f
   37d58:	f0054630 	.word	0xf0054630
   37d5c:	f855fbc9 	.word	0xf855fbc9
   37d60:	f5c03024 	.word	0xf5c03024
   37d64:	681b7180 	.word	0x681b7180
   37d68:	44304a50 	.word	0x44304a50
   37d6c:	814cf8df 	.word	0x814cf8df
   37d70:	fbbef005 	.word	0xfbbef005
   37d74:	f8d84630 	.word	0xf8d84630
   37d78:	27009000 	.word	0x27009000
   37d7c:	f8b2f7e2 	.word	0xf8b2f7e2
   37d80:	46024631 	.word	0x46024631
   37d84:	4648463b 	.word	0x4648463b
   37d88:	97009701 	.word	0x97009701
   37d8c:	fc6cf7f2 	.word	0xfc6cf7f2
   37d90:	46304681 	.word	0x46304681
   37d94:	f8a6f7e2 	.word	0xf8a6f7e2
   37d98:	d1764548 	.word	0xd1764548
   37d9c:	e9cd463b 	.word	0xe9cd463b
   37da0:	f44f7700 	.word	0xf44f7700
   37da4:	46317280 	.word	0x46317280
   37da8:	0000f8d8 	.word	0x0000f8d8
   37dac:	fd44f7f2 	.word	0xfd44f7f2
   37db0:	483f4607 	.word	0x483f4607
   37db4:	f896f7e2 	.word	0xf896f7e2
   37db8:	da4f4287 	.word	0xda4f4287
   37dbc:	f7e2483d 	.word	0xf7e2483d
   37dc0:	4938f891 	.word	0x4938f891
   37dc4:	483b4602 	.word	0x483b4602
   37dc8:	ffecf009 	.word	0xffecf009
   37dcc:	d15c2800 	.word	0xd15c2800
   37dd0:	f7eb2008 	.word	0xf7eb2008
   37dd4:	4a38fa3b 	.word	0x4a38fa3b
   37dd8:	7180f44f 	.word	0x7180f44f
   37ddc:	f0054831 	.word	0xf0054831
   37de0:	4601fb87 	.word	0x4601fb87
   37de4:	3024f855 	.word	0x3024f855
   37de8:	7180f5c1 	.word	0x7180f5c1
   37dec:	4a2f681b 	.word	0x4a2f681b
   37df0:	f0051830 	.word	0xf0051830
   37df4:	482bfb7d 	.word	0x482bfb7d
   37df8:	7000f8d8 	.word	0x7000f8d8
   37dfc:	f7e22600 	.word	0xf7e22600
   37e00:	4633f871 	.word	0x4633f871
   37e04:	49274602 	.word	0x49274602
   37e08:	96014638 	.word	0x96014638
   37e0c:	f7f29600 	.word	0xf7f29600
   37e10:	4607fc2b 	.word	0x4607fc2b
   37e14:	f7e24823 	.word	0xf7e24823
   37e18:	42b8f865 	.word	0x42b8f865
   37e1c:	4633d139 	.word	0x4633d139
   37e20:	6600e9cd 	.word	0x6600e9cd
   37e24:	7280f44f 	.word	0x7280f44f
   37e28:	f8d8491e 	.word	0xf8d8491e
   37e2c:	f7f20000 	.word	0xf7f20000
   37e30:	4606fd03 	.word	0x4606fd03
   37e34:	f7e2481e 	.word	0xf7e2481e
   37e38:	4286f855 	.word	0x4286f855
   37e3c:	4602db16 	.word	0x4602db16
   37e40:	481b4918 	.word	0x481b4918
   37e44:	ffaef009 	.word	0xffaef009
   37e48:	f855b980 	.word	0xf855b980
   37e4c:	e7760024 	.word	0xe7760024
   37e50:	f7eb2009 	.word	0xf7eb2009
   37e54:	f04ff9fb 	.word	0xf04ff9fb
   37e58:	e77630ff 	.word	0xe77630ff
   37e5c:	46314602 	.word	0x46314602
   37e60:	f0094813 	.word	0xf0094813
   37e64:	2800ff9f 	.word	0x2800ff9f
   37e68:	e7a7d0b5 	.word	0xe7a7d0b5
   37e6c:	f7e24811 	.word	0xf7e24811
   37e70:	490cf839 	.word	0x490cf839
   37e74:	480f4602 	.word	0x480f4602
   37e78:	ff94f009 	.word	0xff94f009
   37e7c:	2008b948 	.word	0x2008b948
   37e80:	f9e4f7eb 	.word	0xf9e4f7eb
   37e84:	0024f855 	.word	0x0024f855
   37e88:	2005e759 	.word	0x2005e759
   37e8c:	f9def7eb 	.word	0xf9def7eb
   37e90:	2005e7a1 	.word	0x2005e7a1
   37e94:	f9daf7eb 	.word	0xf9daf7eb
   37e98:	bf00e7d7 	.word	0xbf00e7d7
   37e9c:	789a0000 	.word	0x789a0000
   37ea0:	20025fe0 	.word	0x20025fe0
   37ea4:	20025ee0 	.word	0x20025ee0
   37ea8:	00044ad8 	.word	0x00044ad8
   37eac:	00044b1c 	.word	0x00044b1c
   37eb0:	00043b04 	.word	0x00043b04
   37eb4:	00044b74 	.word	0x00044b74
   37eb8:	00044ae4 	.word	0x00044ae4
   37ebc:	20025edc 	.word	0x20025edc

00037ec0 <pdn_interface_setopt>:
   37ec0:	f240b510 	.word	0xf240b510
   37ec4:	42a12402 	.word	0x42a12402
   37ec8:	b153d10b 	.word	0xb153d10b
   37ecc:	b1419902 	.word	0xb1419902
   37ed0:	43814925 	.word	0x43814925
   37ed4:	2009d00b 	.word	0x2009d00b
   37ed8:	f9b8f7eb 	.word	0xf9b8f7eb
   37edc:	30fff04f 	.word	0x30fff04f
   37ee0:	2016bd10 	.word	0x2016bd10
   37ee4:	f9b2f7eb 	.word	0xf9b2f7eb
   37ee8:	30fff04f 	.word	0x30fff04f
   37eec:	f020bd10 	.word	0xf020bd10
   37ef0:	f42040f1 	.word	0xf42040f1
   37ef4:	280910d0 	.word	0x280910d0
   37ef8:	491cdced 	.word	0x491cdced
   37efc:	1020f851 	.word	0x1020f851
   37f00:	d0e82900 	.word	0xd0e82900
   37f04:	2c00688c 	.word	0x2c00688c
   37f08:	2800d0e5 	.word	0x2800d0e5
   37f0c:	2a01dbe3 	.word	0x2a01dbe3
   37f10:	202dd001 	.word	0x202dd001
   37f14:	688ae7e6 	.word	0x688ae7e6
   37f18:	688ab1fa 	.word	0x688ab1fa
   37f1c:	d01c2a03 	.word	0xd01c2a03
   37f20:	2a04688a 	.word	0x2a04688a
   37f24:	9a02d019 	.word	0x9a02d019
   37f28:	1e420890 	.word	0x1e420890
   37f2c:	d8d82a01 	.word	0xd8d82a01
   37f30:	07929a02 	.word	0x07929a02
   37f34:	681ad1d5 	.word	0x681ad1d5
   37f38:	d0102a02 	.word	0xd0102a02
   37f3c:	d1d02a0a 	.word	0xd1d02a0a
   37f40:	28022202 	.word	0x28022202
   37f44:	685bd106 	.word	0x685bd106
   37f48:	d00a2b02 	.word	0xd00a2b02
   37f4c:	d1c82b0a 	.word	0xd1c82b0a
   37f50:	0202f042 	.word	0x0202f042
   37f54:	2000670a 	.word	0x2000670a
   37f58:	200ee7c4 	.word	0x200ee7c4
   37f5c:	2201e7c2 	.word	0x2201e7c2
   37f60:	f042e7ef 	.word	0xf042e7ef
   37f64:	e7f50201 	.word	0xe7f50201
   37f68:	789a0000 	.word	0x789a0000
   37f6c:	20025fe0 	.word	0x20025fe0

00037f70 <pdn_interface_getopt>:
   37f70:	43f0e92d 	.word	0x43f0e92d
   37f74:	2402f240 	.word	0x2402f240
   37f78:	42a1b083 	.word	0x42a1b083
   37f7c:	f0409d0a 	.word	0xf0409d0a
   37f80:	461e80a9 	.word	0x461e80a9
   37f84:	f0002b00 	.word	0xf0002b00
   37f88:	2d0080a5 	.word	0x2d0080a5
   37f8c:	80a2f000 	.word	0x80a2f000
   37f90:	43834b56 	.word	0x43834b56
   37f94:	8084f040 	.word	0x8084f040
   37f98:	44f1f020 	.word	0x44f1f020
   37f9c:	14d0f424 	.word	0x14d0f424
   37fa0:	dc7d2c09 	.word	0xdc7d2c09
   37fa4:	f8534b52 	.word	0xf8534b52
   37fa8:	2b003024 	.word	0x2b003024
   37fac:	6899d078 	.word	0x6899d078
   37fb0:	d0752900 	.word	0xd0752900
   37fb4:	db732c00 	.word	0xdb732c00
   37fb8:	d00e2a02 	.word	0xd00e2a02
   37fbc:	d0082a03 	.word	0xd0082a03
   37fc0:	d0152a01 	.word	0xd0152a01
   37fc4:	f7eb202d 	.word	0xf7eb202d
   37fc8:	2000f941 	.word	0x2000f941
   37fcc:	e8bdb003 	.word	0xe8bdb003
   37fd0:	682b83f0 	.word	0x682b83f0
   37fd4:	2016bb23 	.word	0x2016bb23
   37fd8:	682ae7f5 	.word	0x682ae7f5
   37fdc:	d0fa2a00 	.word	0xd0fa2a00
   37fe0:	20002201 	.word	0x20002201
   37fe4:	7033681b 	.word	0x7033681b
   37fe8:	b003602a 	.word	0xb003602a
   37fec:	83f0e8bd 	.word	0x83f0e8bd
   37ff0:	2a00689a 	.word	0x2a00689a
   37ff4:	689ad052 	.word	0x689ad052
   37ff8:	d04f2a04 	.word	0xd04f2a04
   37ffc:	2a07682a 	.word	0x2a07682a
   38000:	f012d9e9 	.word	0xf012d9e9
   38004:	d1e60203 	.word	0xd1e60203
   38008:	07996f1b 	.word	0x07996f1b
   3800c:	2104d45d 	.word	0x2104d45d
   38010:	d50207db 	.word	0xd50207db
   38014:	50b32302 	.word	0x50b32302
   38018:	602a460a 	.word	0x602a460a
   3801c:	e7d52000 	.word	0xe7d52000
   38020:	f44f4a34 	.word	0xf44f4a34
   38024:	48347180 	.word	0x48347180
   38028:	80d8f8df 	.word	0x80d8f8df
   3802c:	fa60f005 	.word	0xfa60f005
   38030:	f8d84831 	.word	0xf8d84831
   38034:	27009000 	.word	0x27009000
   38038:	ff54f7e1 	.word	0xff54f7e1
   3803c:	4602463b 	.word	0x4602463b
   38040:	4648492d 	.word	0x4648492d
   38044:	97009701 	.word	0x97009701
   38048:	fb0ef7f2 	.word	0xfb0ef7f2
   3804c:	482a4681 	.word	0x482a4681
   38050:	ff48f7e1 	.word	0xff48f7e1
   38054:	d1434548 	.word	0xd1434548
   38058:	e9cd463b 	.word	0xe9cd463b
   3805c:	f44f7700 	.word	0xf44f7700
   38060:	49257280 	.word	0x49257280
   38064:	0000f8d8 	.word	0x0000f8d8
   38068:	fbe6f7f2 	.word	0xfbe6f7f2
   3806c:	48234607 	.word	0x48234607
   38070:	ff38f7e1 	.word	0xff38f7e1
   38074:	db194287 	.word	0xdb194287
   38078:	491f4602 	.word	0x491f4602
   3807c:	f009481f 	.word	0xf009481f
   38080:	4607fe91 	.word	0x4607fe91
   38084:	4620b990 	.word	0x4620b990
   38088:	f7ff491b 	.word	0xf7ff491b
   3808c:	2800fb35 	.word	0x2800fb35
   38090:	2301db99 	.word	0x2301db99
   38094:	46387030 	.word	0x46387030
   38098:	e797602b 	.word	0xe797602b
   3809c:	e792200e 	.word	0xe792200e
   380a0:	f7eb2009 	.word	0xf7eb2009
   380a4:	f04ff8d3 	.word	0xf04ff8d3
   380a8:	e78f30ff 	.word	0xe78f30ff
   380ac:	f7e14814 	.word	0xf7e14814
   380b0:	4911ff19 	.word	0x4911ff19
   380b4:	48124602 	.word	0x48124602
   380b8:	fe74f009 	.word	0xfe74f009
   380bc:	2008b980 	.word	0x2008b980
   380c0:	f8c4f7eb 	.word	0xf8c4f7eb
   380c4:	30fff04f 	.word	0x30fff04f
   380c8:	220ae77d 	.word	0x220ae77d
   380cc:	60322108 	.word	0x60322108
   380d0:	e79d2204 	.word	0xe79d2204
   380d4:	f7eb2016 	.word	0xf7eb2016
   380d8:	f04ff8b9 	.word	0xf04ff8b9
   380dc:	e77530ff 	.word	0xe77530ff
   380e0:	f7eb2005 	.word	0xf7eb2005
   380e4:	f04ff8b3 	.word	0xf04ff8b3
   380e8:	e76c30ff 	.word	0xe76c30ff
   380ec:	789a0000 	.word	0x789a0000
   380f0:	20025fe0 	.word	0x20025fe0
   380f4:	00044b44 	.word	0x00044b44
   380f8:	20025ee0 	.word	0x20025ee0
   380fc:	00044b50 	.word	0x00044b50
   38100:	00044b74 	.word	0x00044b74
   38104:	20025edc 	.word	0x20025edc

00038108 <pdn_interface_pdn_id_get>:
   38108:	f0002900 	.word	0xf0002900
   3810c:	e92d83b9 	.word	0xe92d83b9
   38110:	4ca343f0 	.word	0x4ca343f0
   38114:	b0832802 	.word	0xb0832802
   38118:	6823460d 	.word	0x6823460d
   3811c:	8094f000 	.word	0x8094f000
   38120:	d03f280a 	.word	0xd03f280a
   38124:	689bb11b 	.word	0x689bb11b
   38128:	f0002b03 	.word	0xf0002b03
   3812c:	68638127 	.word	0x68638127
   38130:	689bb11b 	.word	0x689bb11b
   38134:	f0002b03 	.word	0xf0002b03
   38138:	68a38110 	.word	0x68a38110
   3813c:	689bb11b 	.word	0x689bb11b
   38140:	f0002b03 	.word	0xf0002b03
   38144:	68e380f9 	.word	0x68e380f9
   38148:	689bb11b 	.word	0x689bb11b
   3814c:	f0002b03 	.word	0xf0002b03
   38150:	692380e2 	.word	0x692380e2
   38154:	689bb11b 	.word	0x689bb11b
   38158:	f0002b03 	.word	0xf0002b03
   3815c:	69638123 	.word	0x69638123
   38160:	689bb11b 	.word	0x689bb11b
   38164:	f0002b03 	.word	0xf0002b03
   38168:	69a38161 	.word	0x69a38161
   3816c:	689bb11b 	.word	0x689bb11b
   38170:	f0002b03 	.word	0xf0002b03
   38174:	69e3814a 	.word	0x69e3814a
   38178:	689bb11b 	.word	0x689bb11b
   3817c:	f0002b03 	.word	0xf0002b03
   38180:	6a238133 	.word	0x6a238133
   38184:	689bb11b 	.word	0x689bb11b
   38188:	f0002b03 	.word	0xf0002b03
   3818c:	6a63811c 	.word	0x6a63811c
   38190:	689bb11b 	.word	0x689bb11b
   38194:	f0002b03 	.word	0xf0002b03
   38198:	f04f80ad 	.word	0xf04f80ad
   3819c:	b00330ff 	.word	0xb00330ff
   381a0:	83f0e8bd 	.word	0x83f0e8bd
   381a4:	689bb11b 	.word	0x689bb11b
   381a8:	f0002b03 	.word	0xf0002b03
   381ac:	68638335 	.word	0x68638335
   381b0:	689bb11b 	.word	0x689bb11b
   381b4:	f0002b03 	.word	0xf0002b03
   381b8:	68a382fd 	.word	0x68a382fd
   381bc:	689bb11b 	.word	0x689bb11b
   381c0:	f0002b03 	.word	0xf0002b03
   381c4:	68e382d5 	.word	0x68e382d5
   381c8:	689eb11b 	.word	0x689eb11b
   381cc:	f0002e03 	.word	0xf0002e03
   381d0:	692381f0 	.word	0x692381f0
   381d4:	689bb11b 	.word	0x689bb11b
   381d8:	f0002b03 	.word	0xf0002b03
   381dc:	69638203 	.word	0x69638203
   381e0:	689bb11b 	.word	0x689bb11b
   381e4:	f0002b03 	.word	0xf0002b03
   381e8:	69a38215 	.word	0x69a38215
   381ec:	689bb11b 	.word	0x689bb11b
   381f0:	f0002b03 	.word	0xf0002b03
   381f4:	69e38227 	.word	0x69e38227
   381f8:	689bb11b 	.word	0x689bb11b
   381fc:	f0002b03 	.word	0xf0002b03
   38200:	6a238239 	.word	0x6a238239
   38204:	689bb11b 	.word	0x689bb11b
   38208:	f0002b03 	.word	0xf0002b03
   3820c:	6a63824d 	.word	0x6a63824d
   38210:	d0c22b00 	.word	0xd0c22b00
   38214:	2b03689b 	.word	0x2b03689b
   38218:	4628d1bf 	.word	0x4628d1bf
   3821c:	fe62f7e1 	.word	0xfe62f7e1
   38220:	6a604606 	.word	0x6a604606
   38224:	f7e1300c 	.word	0xf7e1300c
   38228:	42b0fe5d 	.word	0x42b0fe5d
   3822c:	6a61d1b5 	.word	0x6a61d1b5
   38230:	310c4628 	.word	0x310c4628
   38234:	fe4cf7e1 	.word	0xfe4cf7e1
   38238:	d1ae2800 	.word	0xd1ae2800
   3823c:	6f1a6a63 	.word	0x6f1a6a63
   38240:	d5aa0792 	.word	0xd5aa0792
   38244:	e11a2609 	.word	0xe11a2609
   38248:	689bb11b 	.word	0x689bb11b
   3824c:	f0002b03 	.word	0xf0002b03
   38250:	686382fd 	.word	0x686382fd
   38254:	689bb11b 	.word	0x689bb11b
   38258:	f0002b03 	.word	0xf0002b03
   3825c:	68a382c5 	.word	0x68a382c5
   38260:	689bb11b 	.word	0x689bb11b
   38264:	f0002b03 	.word	0xf0002b03
   38268:	68e38269 	.word	0x68e38269
   3826c:	689eb11b 	.word	0x689eb11b
   38270:	f0002e03 	.word	0xf0002e03
   38274:	692380ec 	.word	0x692380ec
   38278:	689bb11b 	.word	0x689bb11b
   3827c:	f0002b03 	.word	0xf0002b03
   38280:	6963814a 	.word	0x6963814a
   38284:	689bb11b 	.word	0x689bb11b
   38288:	f0002b03 	.word	0xf0002b03
   3828c:	69a3815e 	.word	0x69a3815e
   38290:	689bb11b 	.word	0x689bb11b
   38294:	f0002b03 	.word	0xf0002b03
   38298:	69e38172 	.word	0x69e38172
   3829c:	689bb11b 	.word	0x689bb11b
   382a0:	f0002b03 	.word	0xf0002b03
   382a4:	6a23821b 	.word	0x6a23821b
   382a8:	689bb11b 	.word	0x689bb11b
   382ac:	f0002b03 	.word	0xf0002b03
   382b0:	6a63822d 	.word	0x6a63822d
   382b4:	f43f2b00 	.word	0xf43f2b00
   382b8:	689baf70 	.word	0x689baf70
   382bc:	f47f2b03 	.word	0xf47f2b03
   382c0:	4628af6c 	.word	0x4628af6c
   382c4:	fe0ef7e1 	.word	0xfe0ef7e1
   382c8:	6a604606 	.word	0x6a604606
   382cc:	f7e1300c 	.word	0xf7e1300c
   382d0:	4286fe09 	.word	0x4286fe09
   382d4:	af61f47f 	.word	0xaf61f47f
   382d8:	46286a61 	.word	0x46286a61
   382dc:	f7e1310c 	.word	0xf7e1310c
   382e0:	2800fdf7 	.word	0x2800fdf7
   382e4:	af59f47f 	.word	0xaf59f47f
   382e8:	6f1a6a63 	.word	0x6f1a6a63
   382ec:	f57f07d2 	.word	0xf57f07d2
   382f0:	e7a7af54 	.word	0xe7a7af54
   382f4:	f7e14628 	.word	0xf7e14628
   382f8:	4606fdf5 	.word	0x4606fdf5
   382fc:	300c6a60 	.word	0x300c6a60
   38300:	fdf0f7e1 	.word	0xfdf0f7e1
   38304:	f47f42b0 	.word	0xf47f42b0
   38308:	6a61af48 	.word	0x6a61af48
   3830c:	310c4628 	.word	0x310c4628
   38310:	fddef7e1 	.word	0xfddef7e1
   38314:	4628e741 	.word	0x4628e741
   38318:	fde4f7e1 	.word	0xfde4f7e1
   3831c:	68e04606 	.word	0x68e04606
   38320:	f7e1300c 	.word	0xf7e1300c
   38324:	4286fddf 	.word	0x4286fddf
   38328:	af13f47f 	.word	0xaf13f47f
   3832c:	462868e1 	.word	0x462868e1
   38330:	f7e1310c 	.word	0xf7e1310c
   38334:	e70cfdcd 	.word	0xe70cfdcd
   38338:	f7e14628 	.word	0xf7e14628
   3833c:	4606fdd3 	.word	0x4606fdd3
   38340:	300c68a0 	.word	0x300c68a0
   38344:	fdcef7e1 	.word	0xfdcef7e1
   38348:	f47f4286 	.word	0xf47f4286
   3834c:	68a1aefc 	.word	0x68a1aefc
   38350:	310c4628 	.word	0x310c4628
   38354:	fdbcf7e1 	.word	0xfdbcf7e1
   38358:	4628e6f5 	.word	0x4628e6f5
   3835c:	fdc2f7e1 	.word	0xfdc2f7e1
   38360:	68604606 	.word	0x68604606
   38364:	f7e1300c 	.word	0xf7e1300c
   38368:	4286fdbd 	.word	0x4286fdbd
   3836c:	aee5f47f 	.word	0xaee5f47f
   38370:	46286861 	.word	0x46286861
   38374:	f7e1310c 	.word	0xf7e1310c
   38378:	e6defdab 	.word	0xe6defdab
   3837c:	f7e14608 	.word	0xf7e14608
   38380:	4606fdb1 	.word	0x4606fdb1
   38384:	300c6820 	.word	0x300c6820
   38388:	fdacf7e1 	.word	0xfdacf7e1
   3838c:	f47f4286 	.word	0xf47f4286
   38390:	6821aece 	.word	0x6821aece
   38394:	310c4628 	.word	0x310c4628
   38398:	fd9af7e1 	.word	0xfd9af7e1
   3839c:	bf00e6c7 	.word	0xbf00e6c7
   383a0:	20025fe0 	.word	0x20025fe0
   383a4:	f7e14628 	.word	0xf7e14628
   383a8:	4606fd9d 	.word	0x4606fd9d
   383ac:	300c6920 	.word	0x300c6920
   383b0:	fd98f7e1 	.word	0xfd98f7e1
   383b4:	f47f4286 	.word	0xf47f4286
   383b8:	6921aed2 	.word	0x6921aed2
   383bc:	310c4628 	.word	0x310c4628
   383c0:	fd86f7e1 	.word	0xfd86f7e1
   383c4:	4628e6cb 	.word	0x4628e6cb
   383c8:	fd8cf7e1 	.word	0xfd8cf7e1
   383cc:	6a204606 	.word	0x6a204606
   383d0:	f7e1300c 	.word	0xf7e1300c
   383d4:	4286fd87 	.word	0x4286fd87
   383d8:	aed9f47f 	.word	0xaed9f47f
   383dc:	46286a21 	.word	0x46286a21
   383e0:	f7e1310c 	.word	0xf7e1310c
   383e4:	e6d2fd75 	.word	0xe6d2fd75
   383e8:	f7e14628 	.word	0xf7e14628
   383ec:	4606fd7b 	.word	0x4606fd7b
   383f0:	300c69e0 	.word	0x300c69e0
   383f4:	fd76f7e1 	.word	0xfd76f7e1
   383f8:	f47f4286 	.word	0xf47f4286
   383fc:	69e1aec2 	.word	0x69e1aec2
   38400:	310c4628 	.word	0x310c4628
   38404:	fd64f7e1 	.word	0xfd64f7e1
   38408:	4628e6bb 	.word	0x4628e6bb
   3840c:	fd6af7e1 	.word	0xfd6af7e1
   38410:	69a04606 	.word	0x69a04606
   38414:	f7e1300c 	.word	0xf7e1300c
   38418:	4286fd65 	.word	0x4286fd65
   3841c:	aeabf47f 	.word	0xaeabf47f
   38420:	462869a1 	.word	0x462869a1
   38424:	f7e1310c 	.word	0xf7e1310c
   38428:	e6a4fd53 	.word	0xe6a4fd53
   3842c:	f7e14628 	.word	0xf7e14628
   38430:	4606fd59 	.word	0x4606fd59
   38434:	300c6960 	.word	0x300c6960
   38438:	fd54f7e1 	.word	0xfd54f7e1
   3843c:	f47f4286 	.word	0xf47f4286
   38440:	6961ae94 	.word	0x6961ae94
   38444:	310c4628 	.word	0x310c4628
   38448:	fd42f7e1 	.word	0xfd42f7e1
   3844c:	4628e68d 	.word	0x4628e68d
   38450:	fd48f7e1 	.word	0xfd48f7e1
   38454:	68e04607 	.word	0x68e04607
   38458:	f7e1300c 	.word	0xf7e1300c
   3845c:	4287fd43 	.word	0x4287fd43
   38460:	af09f47f 	.word	0xaf09f47f
   38464:	462868e1 	.word	0x462868e1
   38468:	f7e1310c 	.word	0xf7e1310c
   3846c:	2800fd31 	.word	0x2800fd31
   38470:	af01f47f 	.word	0xaf01f47f
   38474:	6f1a68e3 	.word	0x6f1a68e3
   38478:	f57f07d1 	.word	0xf57f07d1
   3847c:	6858aefc 	.word	0x6858aefc
   38480:	f47f1c43 	.word	0xf47f1c43
   38484:	4dc6ae8c 	.word	0x4dc6ae8c
   38488:	f44f4ac6 	.word	0xf44f4ac6
   3848c:	46287180 	.word	0x46287180
   38490:	f82ef005 	.word	0xf82ef005
   38494:	3026f854 	.word	0x3026f854
   38498:	7180f5c0 	.word	0x7180f5c0
   3849c:	4ac2681b 	.word	0x4ac2681b
   384a0:	f8df4428 	.word	0xf8df4428
   384a4:	f005830c 	.word	0xf005830c
   384a8:	4628f823 	.word	0x4628f823
   384ac:	9000f8d8 	.word	0x9000f8d8
   384b0:	f7e12700 	.word	0xf7e12700
   384b4:	4629fd17 	.word	0x4629fd17
   384b8:	463b4602 	.word	0x463b4602
   384bc:	97014648 	.word	0x97014648
   384c0:	f7f29700 	.word	0xf7f29700
   384c4:	4681f8d1 	.word	0x4681f8d1
   384c8:	f7e14628 	.word	0xf7e14628
   384cc:	4548fd0b 	.word	0x4548fd0b
   384d0:	81e9f040 	.word	0x81e9f040
   384d4:	f44f463b 	.word	0xf44f463b
   384d8:	e9cd7280 	.word	0xe9cd7280
   384dc:	46297700 	.word	0x46297700
   384e0:	0000f8d8 	.word	0x0000f8d8
   384e4:	f9a8f7f2 	.word	0xf9a8f7f2
   384e8:	48b04607 	.word	0x48b04607
   384ec:	fcfaf7e1 	.word	0xfcfaf7e1
   384f0:	46024287 	.word	0x46024287
   384f4:	81c7f2c0 	.word	0x81c7f2c0
   384f8:	48ac4629 	.word	0x48ac4629
   384fc:	fc52f009 	.word	0xfc52f009
   38500:	f0402800 	.word	0xf0402800
   38504:	462981c0 	.word	0x462981c0
   38508:	f7ff4630 	.word	0xf7ff4630
   3850c:	f854f92b 	.word	0xf854f92b
   38510:	68583026 	.word	0x68583026
   38514:	4628e643 	.word	0x4628e643
   38518:	fce4f7e1 	.word	0xfce4f7e1
   3851c:	69204606 	.word	0x69204606
   38520:	f7e1300c 	.word	0xf7e1300c
   38524:	4286fcdf 	.word	0x4286fcdf
   38528:	aeabf47f 	.word	0xaeabf47f
   3852c:	46286921 	.word	0x46286921
   38530:	f7e1310c 	.word	0xf7e1310c
   38534:	2800fccd 	.word	0x2800fccd
   38538:	aea3f47f 	.word	0xaea3f47f
   3853c:	6f1a6923 	.word	0x6f1a6923
   38540:	f57f07d2 	.word	0xf57f07d2
   38544:	2604ae9e 	.word	0x2604ae9e
   38548:	4628e799 	.word	0x4628e799
   3854c:	fccaf7e1 	.word	0xfccaf7e1
   38550:	69604606 	.word	0x69604606
   38554:	f7e1300c 	.word	0xf7e1300c
   38558:	4286fcc5 	.word	0x4286fcc5
   3855c:	ae97f47f 	.word	0xae97f47f
   38560:	46286961 	.word	0x46286961
   38564:	f7e1310c 	.word	0xf7e1310c
   38568:	2800fcb3 	.word	0x2800fcb3
   3856c:	ae8ff47f 	.word	0xae8ff47f
   38570:	6f1a6963 	.word	0x6f1a6963
   38574:	f57f07d7 	.word	0xf57f07d7
   38578:	2605ae8a 	.word	0x2605ae8a
   3857c:	4628e77f 	.word	0x4628e77f
   38580:	fcb0f7e1 	.word	0xfcb0f7e1
   38584:	69a04606 	.word	0x69a04606
   38588:	f7e1300c 	.word	0xf7e1300c
   3858c:	4286fcab 	.word	0x4286fcab
   38590:	ae83f47f 	.word	0xae83f47f
   38594:	462869a1 	.word	0x462869a1
   38598:	f7e1310c 	.word	0xf7e1310c
   3859c:	2800fc99 	.word	0x2800fc99
   385a0:	ae7bf47f 	.word	0xae7bf47f
   385a4:	6f1a69a3 	.word	0x6f1a69a3
   385a8:	f57f07d6 	.word	0xf57f07d6
   385ac:	2606ae76 	.word	0x2606ae76
   385b0:	4628e765 	.word	0x4628e765
   385b4:	fc96f7e1 	.word	0xfc96f7e1
   385b8:	68e04607 	.word	0x68e04607
   385bc:	f7e1300c 	.word	0xf7e1300c
   385c0:	4287fc91 	.word	0x4287fc91
   385c4:	ae05f47f 	.word	0xae05f47f
   385c8:	462868e1 	.word	0x462868e1
   385cc:	f7e1310c 	.word	0xf7e1310c
   385d0:	2800fc7f 	.word	0x2800fc7f
   385d4:	adfdf47f 	.word	0xadfdf47f
   385d8:	6f1a68e3 	.word	0x6f1a68e3
   385dc:	f53f0791 	.word	0xf53f0791
   385e0:	e5f6af4e 	.word	0xe5f6af4e
   385e4:	f7e14628 	.word	0xf7e14628
   385e8:	4606fc7d 	.word	0x4606fc7d
   385ec:	300c6920 	.word	0x300c6920
   385f0:	fc78f7e1 	.word	0xfc78f7e1
   385f4:	f47f4286 	.word	0xf47f4286
   385f8:	6921adf2 	.word	0x6921adf2
   385fc:	310c4628 	.word	0x310c4628
   38600:	fc66f7e1 	.word	0xfc66f7e1
   38604:	f47f2800 	.word	0xf47f2800
   38608:	6923adea 	.word	0x6923adea
   3860c:	07926f1a 	.word	0x07926f1a
   38610:	e5e4d499 	.word	0xe5e4d499
   38614:	f7e14628 	.word	0xf7e14628
   38618:	4606fc65 	.word	0x4606fc65
   3861c:	300c6960 	.word	0x300c6960
   38620:	fc60f7e1 	.word	0xfc60f7e1
   38624:	f47f4286 	.word	0xf47f4286
   38628:	6961ade0 	.word	0x6961ade0
   3862c:	310c4628 	.word	0x310c4628
   38630:	fc4ef7e1 	.word	0xfc4ef7e1
   38634:	f47f2800 	.word	0xf47f2800
   38638:	6963add8 	.word	0x6963add8
   3863c:	07976f1a 	.word	0x07976f1a
   38640:	e5d2d49b 	.word	0xe5d2d49b
   38644:	f7e14628 	.word	0xf7e14628
   38648:	4606fc4d 	.word	0x4606fc4d
   3864c:	300c69a0 	.word	0x300c69a0
   38650:	fc48f7e1 	.word	0xfc48f7e1
   38654:	f47f4286 	.word	0xf47f4286
   38658:	69a1adce 	.word	0x69a1adce
   3865c:	310c4628 	.word	0x310c4628
   38660:	fc36f7e1 	.word	0xfc36f7e1
   38664:	f47f2800 	.word	0xf47f2800
   38668:	69a3adc6 	.word	0x69a3adc6
   3866c:	07966f1a 	.word	0x07966f1a
   38670:	e5c0d49d 	.word	0xe5c0d49d
   38674:	f7e14628 	.word	0xf7e14628
   38678:	4606fc35 	.word	0x4606fc35
   3867c:	300c69e0 	.word	0x300c69e0
   38680:	fc30f7e1 	.word	0xfc30f7e1
   38684:	f47f4286 	.word	0xf47f4286
   38688:	69e1adbc 	.word	0x69e1adbc
   3868c:	310c4628 	.word	0x310c4628
   38690:	fc1ef7e1 	.word	0xfc1ef7e1
   38694:	f47f2800 	.word	0xf47f2800
   38698:	69e3adb4 	.word	0x69e3adb4
   3869c:	07906f1a 	.word	0x07906f1a
   386a0:	adaff57f 	.word	0xadaff57f
   386a4:	e6ea2607 	.word	0xe6ea2607
   386a8:	f7e14628 	.word	0xf7e14628
   386ac:	4606fc1b 	.word	0x4606fc1b
   386b0:	300c6a20 	.word	0x300c6a20
   386b4:	fc16f7e1 	.word	0xfc16f7e1
   386b8:	f47f4286 	.word	0xf47f4286
   386bc:	6a21ada8 	.word	0x6a21ada8
   386c0:	310c4628 	.word	0x310c4628
   386c4:	fc04f7e1 	.word	0xfc04f7e1
   386c8:	f47f2800 	.word	0xf47f2800
   386cc:	6a23ada0 	.word	0x6a23ada0
   386d0:	07916f1a 	.word	0x07916f1a
   386d4:	ad9bf57f 	.word	0xad9bf57f
   386d8:	e6d02608 	.word	0xe6d02608
   386dc:	f7e14628 	.word	0xf7e14628
   386e0:	4606fc01 	.word	0x4606fc01
   386e4:	300c69e0 	.word	0x300c69e0
   386e8:	fbfcf7e1 	.word	0xfbfcf7e1
   386ec:	f47f4286 	.word	0xf47f4286
   386f0:	69e1adda 	.word	0x69e1adda
   386f4:	310c4628 	.word	0x310c4628
   386f8:	fbeaf7e1 	.word	0xfbeaf7e1
   386fc:	f47f2800 	.word	0xf47f2800
   38700:	69e3add2 	.word	0x69e3add2
   38704:	07d06f1a 	.word	0x07d06f1a
   38708:	e5ccd4cc 	.word	0xe5ccd4cc
   3870c:	f7e14628 	.word	0xf7e14628
   38710:	4606fbe9 	.word	0x4606fbe9
   38714:	300c6a20 	.word	0x300c6a20
   38718:	fbe4f7e1 	.word	0xfbe4f7e1
   3871c:	f47f4286 	.word	0xf47f4286
   38720:	6a21adc8 	.word	0x6a21adc8
   38724:	310c4628 	.word	0x310c4628
   38728:	fbd2f7e1 	.word	0xfbd2f7e1
   3872c:	f47f2800 	.word	0xf47f2800
   38730:	6a23adc0 	.word	0x6a23adc0
   38734:	07d16f1a 	.word	0x07d16f1a
   38738:	e5bad4ce 	.word	0xe5bad4ce
   3873c:	f7e14628 	.word	0xf7e14628
   38740:	4606fbd1 	.word	0x4606fbd1
   38744:	300c68a0 	.word	0x300c68a0
   38748:	fbccf7e1 	.word	0xfbccf7e1
   3874c:	f47f4286 	.word	0xf47f4286
   38750:	68a1ad8c 	.word	0x68a1ad8c
   38754:	310c4628 	.word	0x310c4628
   38758:	fbbaf7e1 	.word	0xfbbaf7e1
   3875c:	f47f2800 	.word	0xf47f2800
   38760:	68a3ad84 	.word	0x68a3ad84
   38764:	07d06f1a 	.word	0x07d06f1a
   38768:	ad7ff57f 	.word	0xad7ff57f
   3876c:	e6862602 	.word	0xe6862602
   38770:	f7e14628 	.word	0xf7e14628
   38774:	4606fbb7 	.word	0x4606fbb7
   38778:	300c68a0 	.word	0x300c68a0
   3877c:	fbb2f7e1 	.word	0xfbb2f7e1
   38780:	f47f4286 	.word	0xf47f4286
   38784:	68a1ad20 	.word	0x68a1ad20
   38788:	310c4628 	.word	0x310c4628
   3878c:	fba0f7e1 	.word	0xfba0f7e1
   38790:	f47f2800 	.word	0xf47f2800
   38794:	68a3ad18 	.word	0x68a3ad18
   38798:	07906f1a 	.word	0x07906f1a
   3879c:	e512d4e6 	.word	0xe512d4e6
   387a0:	20025ee0 	.word	0x20025ee0
   387a4:	00044b20 	.word	0x00044b20
   387a8:	00044b1c 	.word	0x00044b1c
   387ac:	00044b30 	.word	0x00044b30
   387b0:	20025edc 	.word	0x20025edc
   387b4:	f7e14628 	.word	0xf7e14628
   387b8:	4606fb95 	.word	0x4606fb95
   387bc:	300c6860 	.word	0x300c6860
   387c0:	fb90f7e1 	.word	0xfb90f7e1
   387c4:	f47f4286 	.word	0xf47f4286
   387c8:	6861acf8 	.word	0x6861acf8
   387cc:	310c4628 	.word	0x310c4628
   387d0:	fb7ef7e1 	.word	0xfb7ef7e1
   387d4:	f47f2800 	.word	0xf47f2800
   387d8:	6863acf0 	.word	0x6863acf0
   387dc:	07966f1a 	.word	0x07966f1a
   387e0:	acebf57f 	.word	0xacebf57f
   387e4:	e64a2601 	.word	0xe64a2601
   387e8:	f7e14628 	.word	0xf7e14628
   387ec:	4606fb7b 	.word	0x4606fb7b
   387f0:	300c6860 	.word	0x300c6860
   387f4:	fb76f7e1 	.word	0xfb76f7e1
   387f8:	f47f4286 	.word	0xf47f4286
   387fc:	6861ad30 	.word	0x6861ad30
   38800:	310c4628 	.word	0x310c4628
   38804:	fb64f7e1 	.word	0xfb64f7e1
   38808:	f47f2800 	.word	0xf47f2800
   3880c:	6863ad28 	.word	0x6863ad28
   38810:	07d66f1a 	.word	0x07d66f1a
   38814:	e522d4e6 	.word	0xe522d4e6
   38818:	f7e14608 	.word	0xf7e14608
   3881c:	4606fb63 	.word	0x4606fb63
   38820:	300c6820 	.word	0x300c6820
   38824:	fb5ef7e1 	.word	0xfb5ef7e1
   38828:	f47f4286 	.word	0xf47f4286
   3882c:	6821acc0 	.word	0x6821acc0
   38830:	310c4628 	.word	0x310c4628
   38834:	fb4cf7e1 	.word	0xfb4cf7e1
   38838:	28004606 	.word	0x28004606
   3883c:	acb7f47f 	.word	0xacb7f47f
   38840:	6f1a6823 	.word	0x6f1a6823
   38844:	f53f0797 	.word	0xf53f0797
   38848:	e4b0ae1a 	.word	0xe4b0ae1a
   3884c:	f7e14608 	.word	0xf7e14608
   38850:	4606fb49 	.word	0x4606fb49
   38854:	300c6820 	.word	0x300c6820
   38858:	fb44f7e1 	.word	0xfb44f7e1
   3885c:	f47f4286 	.word	0xf47f4286
   38860:	6821acf8 	.word	0x6821acf8
   38864:	310c4628 	.word	0x310c4628
   38868:	fb32f7e1 	.word	0xfb32f7e1
   3886c:	28004606 	.word	0x28004606
   38870:	aceff47f 	.word	0xaceff47f
   38874:	6f1a6823 	.word	0x6f1a6823
   38878:	f53f07d7 	.word	0xf53f07d7
   3887c:	e4e8ae00 	.word	0xe4e8ae00
   38880:	30fff04f 	.word	0x30fff04f
   38884:	480b4770 	.word	0x480b4770
   38888:	fb2cf7e1 	.word	0xfb2cf7e1
   3888c:	4602490a 	.word	0x4602490a
   38890:	f0094808 	.word	0xf0094808
   38894:	b930fa87 	.word	0xb930fa87
   38898:	f7ea2008 	.word	0xf7ea2008
   3889c:	f854fcd7 	.word	0xf854fcd7
   388a0:	68583026 	.word	0x68583026
   388a4:	2005e47b 	.word	0x2005e47b
   388a8:	fcd0f7ea 	.word	0xfcd0f7ea
   388ac:	3026f854 	.word	0x3026f854
   388b0:	e4746858 	.word	0xe4746858
   388b4:	00044b74 	.word	0x00044b74
   388b8:	20025ee0 	.word	0x20025ee0

000388bc <bsd_platform_getaddrinfo>:
   388bc:	bdb0f7f7 	.word	0xbdb0f7f7

000388c0 <bsd_platform_freeaddrinfo>:
   388c0:	bea4f7f7 	.word	0xbea4f7f7

000388c4 <bsd_platform_poll>:
   388c4:	43f0e92d 	.word	0x43f0e92d
   388c8:	72e2ea42 	.word	0x72e2ea42
   388cc:	9200b083 	.word	0x9200b083
   388d0:	d0482800 	.word	0xd0482800
   388d4:	2b071e4b 	.word	0x2b071e4b
   388d8:	4680d845 	.word	0x4680d845
   388dc:	24004605 	.word	0x24004605
   388e0:	07c1eb00 	.word	0x07c1eb00
   388e4:	682888ab 	.word	0x682888ab
   388e8:	0303f003 	.word	0x0303f003
   388ec:	f043a901 	.word	0xf043a901
   388f0:	f7f6061c 	.word	0xf7f6061c
   388f4:	9b01fc9d 	.word	0x9b01fc9d
   388f8:	40333508 	.word	0x40333508
   388fc:	3c02f825 	.word	0x3c02f825
   38900:	3401b103 	.word	0x3401b103
   38904:	d1ed42af 	.word	0xd1ed42af
   38908:	4669bb9c 	.word	0x4669bb9c
   3890c:	f7ea4640 	.word	0xf7ea4640
   38910:	4607fc09 	.word	0x4607fc09
   38914:	283cb108 	.word	0x283cb108
   38918:	46c1d11d 	.word	0x46c1d11d
   3891c:	f8b92600 	.word	0xf8b92600
   38920:	f8d93004 	.word	0xf8d93004
   38924:	f0030000 	.word	0xf0030000
   38928:	a9010303 	.word	0xa9010303
   3892c:	041cf043 	.word	0x041cf043
   38930:	fc7ef7f6 	.word	0xfc7ef7f6
   38934:	f1099b01 	.word	0xf1099b01
   38938:	40230908 	.word	0x40230908
   3893c:	3c02f829 	.word	0x3c02f829
   38940:	3601b103 	.word	0x3601b103
   38944:	d1ea454d 	.word	0xd1ea454d
   38948:	2f00b90e 	.word	0x2f00b90e
   3894c:	4630d0dd 	.word	0x4630d0dd
   38950:	e8bdb003 	.word	0xe8bdb003
   38954:	202383f0 	.word	0x202383f0
   38958:	fc78f7ea 	.word	0xfc78f7ea
   3895c:	30fff04f 	.word	0x30fff04f
   38960:	e8bdb003 	.word	0xe8bdb003
   38964:	201683f0 	.word	0x201683f0
   38968:	fc70f7ea 	.word	0xfc70f7ea
   3896c:	30fff04f 	.word	0x30fff04f
   38970:	4620e7ee 	.word	0x4620e7ee
   38974:	bf00e7ec 	.word	0xbf00e7ec

00038978 <bsd_platform_fcntl>:
   38978:	4b06b508 	.word	0x4b06b508
   3897c:	d0034383 	.word	0xd0034383
   38980:	4008e8bd 	.word	0x4008e8bd
   38984:	bd00f7f6 	.word	0xbd00f7f6
   38988:	f7ea202d 	.word	0xf7ea202d
   3898c:	f04ffc5f 	.word	0xf04ffc5f
   38990:	bd0830ff 	.word	0xbd0830ff
   38994:	49765432 	.word	0x49765432

00038998 <stream_handler_init>:
   38998:	4604b510 	.word	0x4604b510
   3899c:	f7fd200c 	.word	0xf7fd200c
   389a0:	60e0fed1 	.word	0x60e0fed1
   389a4:	2300b128 	.word	0x2300b128
   389a8:	e8bd6123 	.word	0xe8bd6123
   389ac:	f7f84010 	.word	0xf7f84010
   389b0:	2004b9c7 	.word	0x2004b9c7
   389b4:	bf00bd10 	.word	0xbf00bd10

000389b8 <stream_handler_put>:
   389b8:	4606b570 	.word	0x4606b570
   389bc:	460d2014 	.word	0x460d2014
   389c0:	fec0f7fd 	.word	0xfec0f7fd
   389c4:	682bb178 	.word	0x682bb178
   389c8:	60434604 	.word	0x60434604
   389cc:	4601686b 	.word	0x4601686b
   389d0:	68eb6083 	.word	0x68eb6083
   389d4:	68ab60c3 	.word	0x68ab60c3
   389d8:	68f06103 	.word	0x68f06103
   389dc:	f9baf7f8 	.word	0xf9baf7f8
   389e0:	6868b920 	.word	0x6868b920
   389e4:	f04fbd70 	.word	0xf04fbd70
   389e8:	bd7030ff 	.word	0xbd7030ff
   389ec:	f7fd4620 	.word	0xf7fd4620
   389f0:	f04ffec7 	.word	0xf04ffec7
   389f4:	bd7030ff 	.word	0xbd7030ff

000389f8 <stream_handler_get>:
   389f8:	4ff0e92d 	.word	0x4ff0e92d
   389fc:	b0874682 	.word	0xb0874682
   38a00:	468968c0 	.word	0x468968c0
   38a04:	f7f84693 	.word	0xf7f84693
   38a08:	2800f9c5 	.word	0x2800f9c5
   38a0c:	4605d072 	.word	0x4605d072
   38a10:	0008f8d9 	.word	0x0008f8d9
   38a14:	692bb120 	.word	0x692bb120
   38a18:	68eab113 	.word	0x68eab113
   38a1c:	d15c2a00 	.word	0xd15c2a00
   38a20:	f8c92300 	.word	0xf8c92300
   38a24:	f8d9300c 	.word	0xf8d9300c
   38a28:	f8d92000 	.word	0xf8d92000
   38a2c:	f8da8004 	.word	0xf8da8004
   38a30:	92011010 	.word	0x92011010
   38a34:	0f00f1b8 	.word	0x0f00f1b8
   38a38:	f00bd05a 	.word	0xf00bd05a
   38a3c:	24000308 	.word	0x24000308
   38a40:	e0109300 	.word	0xe0109300
   38a44:	3010f8da 	.word	0x3010f8da
   38a48:	f8ca443b 	.word	0xf8ca443b
   38a4c:	46283010 	.word	0x46283010
   38a50:	f9a8f7f8 	.word	0xf9a8f7f8
   38a54:	4605443c 	.word	0x4605443c
   38a58:	d0382800 	.word	0xd0382800
   38a5c:	d93645a0 	.word	0xd93645a0
   38a60:	f8d92100 	.word	0xf8d92100
   38a64:	68ae2000 	.word	0x68ae2000
   38a68:	0b04eba8 	.word	0x0b04eba8
   38a6c:	455e1a76 	.word	0x455e1a76
   38a70:	bf284637 	.word	0xbf284637
   38a74:	b132465f 	.word	0xb132465f
   38a78:	9b016868 	.word	0x9b016868
   38a7c:	463a4401 	.word	0x463a4401
   38a80:	f0081918 	.word	0xf0081918
   38a84:	9b00ff96 	.word	0x9b00ff96
   38a88:	d1e02b00 	.word	0xd1e02b00
   38a8c:	d8d9455e 	.word	0xd8d9455e
   38a90:	000cf8da 	.word	0x000cf8da
   38a94:	f974f7f8 	.word	0xf974f7f8
   38a98:	b1704606 	.word	0xb1704606
   38a9c:	2301e9d0 	.word	0x2301e9d0
   38aa0:	0103e9d0 	.word	0x0103e9d0
   38aa4:	2302e9cd 	.word	0x2302e9cd
   38aa8:	1004e9cd 	.word	0x1004e9cd
   38aac:	3101e9da 	.word	0x3101e9da
   38ab0:	4798a802 	.word	0x4798a802
   38ab4:	f7fd4630 	.word	0xf7fd4630
   38ab8:	2300fe63 	.word	0x2300fe63
   38abc:	f8ca4628 	.word	0xf8ca4628
   38ac0:	f7f83010 	.word	0xf7f83010
   38ac4:	443cf96f 	.word	0x443cf96f
   38ac8:	28004605 	.word	0x28004605
   38acc:	4620d1c6 	.word	0x4620d1c6
   38ad0:	4004f8c9 	.word	0x4004f8c9
   38ad4:	e8bdb007 	.word	0xe8bdb007
   38ad8:	f8d98ff0 	.word	0xf8d98ff0
   38adc:	429a300c 	.word	0x429a300c
   38ae0:	461abf28 	.word	0x461abf28
   38ae4:	200cf8c9 	.word	0x200cf8c9
   38ae8:	f0086929 	.word	0xf0086929
   38aec:	e79aff62 	.word	0xe79aff62
   38af0:	e7ec4644 	.word	0xe7ec4644
   38af4:	30fff04f 	.word	0x30fff04f
   38af8:	bf00e7ec 	.word	0xbf00e7ec

00038afc <stream_handler_available>:
   38afc:	4604b510 	.word	0x4604b510
   38b00:	f7f868c0 	.word	0xf7f868c0
   38b04:	b150f947 	.word	0xb150f947
   38b08:	42646924 	.word	0x42646924
   38b0c:	441c6883 	.word	0x441c6883
   38b10:	f948f7f8 	.word	0xf948f7f8
   38b14:	d1f92800 	.word	0xd1f92800
   38b18:	70e4ea24 	.word	0x70e4ea24
   38b1c:	f04fbd10 	.word	0xf04fbd10
   38b20:	bd1030ff 	.word	0xbd1030ff

00038b24 <stream_handler_flush>:
   38b24:	4605b530 	.word	0x4605b530
   38b28:	b08568c0 	.word	0xb08568c0
   38b2c:	e01ab9a8 	.word	0xe01ab9a8
   38b30:	f7f868e8 	.word	0xf7f868e8
   38b34:	4604f925 	.word	0x4604f925
   38b38:	e9d0b170 	.word	0xe9d0b170
   38b3c:	e9d40101 	.word	0xe9d40101
   38b40:	e9cd3203 	.word	0xe9cd3203
   38b44:	e9cd0100 	.word	0xe9cd0100
   38b48:	e9d52302 	.word	0xe9d52302
   38b4c:	46683101 	.word	0x46683101
   38b50:	46204798 	.word	0x46204798
   38b54:	fe14f7fd 	.word	0xfe14f7fd
   38b58:	f7f868e8 	.word	0xf7f868e8
   38b5c:	2800f921 	.word	0x2800f921
   38b60:	b005d1e6 	.word	0xb005d1e6
   38b64:	2008bd30 	.word	0x2008bd30
   38b68:	bd30b005 	.word	0xbd30b005

00038b6c <stream_handler_free>:
   38b6c:	4605b530 	.word	0x4605b530
   38b70:	b08568c0 	.word	0xb08568c0
   38b74:	e01cb9a0 	.word	0xe01cb9a0
   38b78:	f902f7f8 	.word	0xf902f7f8
   38b7c:	b1704604 	.word	0xb1704604
   38b80:	0101e9d0 	.word	0x0101e9d0
   38b84:	3203e9d4 	.word	0x3203e9d4
   38b88:	0100e9cd 	.word	0x0100e9cd
   38b8c:	2302e9cd 	.word	0x2302e9cd
   38b90:	3101e9d5 	.word	0x3101e9d5
   38b94:	47984668 	.word	0x47984668
   38b98:	f7fd4620 	.word	0xf7fd4620
   38b9c:	68e8fdf1 	.word	0x68e8fdf1
   38ba0:	f8fef7f8 	.word	0xf8fef7f8
   38ba4:	68e84604 	.word	0x68e84604
   38ba8:	d1e52c00 	.word	0xd1e52c00
   38bac:	fde8f7fd 	.word	0xfde8f7fd
   38bb0:	b00560ec 	.word	0xb00560ec
   38bb4:	bf00bd30 	.word	0xbf00bd30

00038bb8 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   38bb8:	4a07      	ldr	r2, [pc, #28]	; (38bd8 <SystemInit+0x20>)
   38bba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   38bbe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   38bc2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   38bc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   38bca:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   38bce:	4b03      	ldr	r3, [pc, #12]	; (38bdc <SystemInit+0x24>)
   38bd0:	4a03      	ldr	r2, [pc, #12]	; (38be0 <SystemInit+0x28>)
   38bd2:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   38bd4:	4770      	bx	lr
   38bd6:	bf00      	nop
   38bd8:	e000ed00 	.word	0xe000ed00
   38bdc:	20031c84 	.word	0x20031c84
   38be0:	03d09000 	.word	0x03d09000

00038be4 <nvmc_word_write>:
}

#if defined(NVMC_READYNEXT_READYNEXT_Msk)
NRF_STATIC_INLINE bool nrf_nvmc_write_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   38be4:	4a04      	ldr	r2, [pc, #16]	; (38bf8 <nvmc_word_write+0x14>)
   38be6:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   38bea:	07db      	lsls	r3, r3, #31
   38bec:	d5fb      	bpl.n	38be6 <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
   38bee:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   38bf0:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   38bf4:	4770      	bx	lr
   38bf6:	bf00      	nop
   38bf8:	40039000 	.word	0x40039000

00038bfc <partial_word_create>:
{
   38bfc:	b507      	push	{r0, r1, r2, lr}
    byte_shift = addr % NVMC_BYTES_IN_WORD;
   38bfe:	f000 0003 	and.w	r0, r0, #3
    NRFX_ASSERT(bytes_count <= (NVMC_BYTES_IN_WORD - byte_shift));
   38c02:	f1c0 0304 	rsb	r3, r0, #4
   38c06:	4293      	cmp	r3, r2
   38c08:	d205      	bcs.n	38c16 <partial_word_create+0x1a>
   38c0a:	4b0b      	ldr	r3, [pc, #44]	; (38c38 <partial_word_create+0x3c>)
   38c0c:	4a0b      	ldr	r2, [pc, #44]	; (38c3c <partial_word_create+0x40>)
   38c0e:	2197      	movs	r1, #151	; 0x97
   38c10:	480b      	ldr	r0, [pc, #44]	; (38c40 <partial_word_create+0x44>)
   38c12:	f003 feaf 	bl	3c974 <__assert_func>
    value32 = 0xFFFFFFFF;
   38c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   38c1a:	9301      	str	r3, [sp, #4]
    for (uint32_t i = 0; i < bytes_count; i++)
   38c1c:	ab01      	add	r3, sp, #4
   38c1e:	4418      	add	r0, r3
   38c20:	440a      	add	r2, r1
   38c22:	4291      	cmp	r1, r2
   38c24:	d103      	bne.n	38c2e <partial_word_create+0x32>
}
   38c26:	9801      	ldr	r0, [sp, #4]
   38c28:	b003      	add	sp, #12
   38c2a:	f85d fb04 	ldr.w	pc, [sp], #4
        ((uint8_t *)&value32)[byte_shift] = bytes[i];
   38c2e:	f811 3b01 	ldrb.w	r3, [r1], #1
   38c32:	f800 3b01 	strb.w	r3, [r0], #1
        byte_shift++;
   38c36:	e7f4      	b.n	38c22 <partial_word_create+0x26>
   38c38:	00049e64 	.word	0x00049e64
   38c3c:	00049dc9 	.word	0x00049dc9
   38c40:	00049e84 	.word	0x00049e84

00038c44 <nrfx_nvmc_page_erase>:
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(addr < flash_total_size_get());
   38c44:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   38c48:	b508      	push	{r3, lr}
    NRFX_ASSERT(addr < flash_total_size_get());
   38c4a:	d305      	bcc.n	38c58 <nrfx_nvmc_page_erase+0x14>
   38c4c:	4b0d      	ldr	r3, [pc, #52]	; (38c84 <nrfx_nvmc_page_erase+0x40>)
   38c4e:	4a0e      	ldr	r2, [pc, #56]	; (38c88 <nrfx_nvmc_page_erase+0x44>)
   38c50:	21d6      	movs	r1, #214	; 0xd6
   38c52:	480e      	ldr	r0, [pc, #56]	; (38c8c <nrfx_nvmc_page_erase+0x48>)
   38c54:	f003 fe8e 	bl	3c974 <__assert_func>
    return !(addr % flash_page_size_get());
   38c58:	f3c0 030b 	ubfx	r3, r0, #0, #12

    if (!is_page_aligned_check(addr))
   38c5c:	b97b      	cbnz	r3, 38c7e <nrfx_nvmc_page_erase+0x3a>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   38c5e:	2202      	movs	r2, #2
   38c60:	4b0b      	ldr	r3, [pc, #44]	; (38c90 <nrfx_nvmc_page_erase+0x4c>)
   38c62:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   38c66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   38c6a:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   38c6c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   38c70:	07d2      	lsls	r2, r2, #31
   38c72:	d5fb      	bpl.n	38c6c <nrfx_nvmc_page_erase+0x28>
    p_reg->CONFIGNS = (uint32_t)mode;
   38c74:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   38c76:	4807      	ldr	r0, [pc, #28]	; (38c94 <nrfx_nvmc_page_erase+0x50>)
   38c78:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   38c7c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
   38c7e:	4806      	ldr	r0, [pc, #24]	; (38c98 <nrfx_nvmc_page_erase+0x54>)
   38c80:	e7fc      	b.n	38c7c <nrfx_nvmc_page_erase+0x38>
   38c82:	bf00      	nop
   38c84:	00049e1d 	.word	0x00049e1d
   38c88:	00049ddd 	.word	0x00049ddd
   38c8c:	00049e84 	.word	0x00049e84
   38c90:	40039000 	.word	0x40039000
   38c94:	0bad0000 	.word	0x0bad0000
   38c98:	0bad000a 	.word	0x0bad000a

00038c9c <nrfx_nvmc_word_write>:
    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, &value, 1));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    NRFX_ASSERT(addr < flash_total_size_get());
   38c9c:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   38ca0:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(addr < flash_total_size_get());
   38ca2:	d306      	bcc.n	38cb2 <nrfx_nvmc_word_write+0x16>
   38ca4:	f44f 71a3 	mov.w	r1, #326	; 0x146
   38ca8:	4b0a      	ldr	r3, [pc, #40]	; (38cd4 <nrfx_nvmc_word_write+0x38>)
   38caa:	4a0b      	ldr	r2, [pc, #44]	; (38cd8 <nrfx_nvmc_word_write+0x3c>)
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   38cac:	480b      	ldr	r0, [pc, #44]	; (38cdc <nrfx_nvmc_word_write+0x40>)
   38cae:	f003 fe61 	bl	3c974 <__assert_func>
   38cb2:	f010 0403 	ands.w	r4, r0, #3
   38cb6:	d004      	beq.n	38cc2 <nrfx_nvmc_word_write+0x26>
   38cb8:	4b09      	ldr	r3, [pc, #36]	; (38ce0 <nrfx_nvmc_word_write+0x44>)
   38cba:	4a07      	ldr	r2, [pc, #28]	; (38cd8 <nrfx_nvmc_word_write+0x3c>)
   38cbc:	f240 1147 	movw	r1, #327	; 0x147
   38cc0:	e7f4      	b.n	38cac <nrfx_nvmc_word_write+0x10>
   38cc2:	2301      	movs	r3, #1
   38cc4:	4d07      	ldr	r5, [pc, #28]	; (38ce4 <nrfx_nvmc_word_write+0x48>)
   38cc6:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   38cca:	f7ff ff8b 	bl	38be4 <nvmc_word_write>
   38cce:	f8c5 4584 	str.w	r4, [r5, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   38cd2:	bd38      	pop	{r3, r4, r5, pc}
   38cd4:	00049e1d 	.word	0x00049e1d
   38cd8:	00049df2 	.word	0x00049df2
   38cdc:	00049e84 	.word	0x00049e84
   38ce0:	00049e3b 	.word	0x00049e3b
   38ce4:	40039000 	.word	0x40039000

00038ce8 <nrfx_nvmc_bytes_write>:

void nrfx_nvmc_bytes_write(uint32_t addr, void const * src, uint32_t num_bytes)
{
    NRFX_ASSERT(addr < flash_total_size_get());
   38ce8:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   38cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   38cf0:	4604      	mov	r4, r0
   38cf2:	460e      	mov	r6, r1
   38cf4:	4615      	mov	r5, r2
    NRFX_ASSERT(addr < flash_total_size_get());
   38cf6:	d306      	bcc.n	38d06 <nrfx_nvmc_bytes_write+0x1e>
   38cf8:	4b20      	ldr	r3, [pc, #128]	; (38d7c <nrfx_nvmc_bytes_write+0x94>)
   38cfa:	4a21      	ldr	r2, [pc, #132]	; (38d80 <nrfx_nvmc_bytes_write+0x98>)
   38cfc:	f44f 71a9 	mov.w	r1, #338	; 0x152
   38d00:	4820      	ldr	r0, [pc, #128]	; (38d84 <nrfx_nvmc_bytes_write+0x9c>)
   38d02:	f003 fe37 	bl	3c974 <__assert_func>
   38d06:	2201      	movs	r2, #1
   38d08:	4b1f      	ldr	r3, [pc, #124]	; (38d88 <nrfx_nvmc_bytes_write+0xa0>)
   38d0a:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nvmc_write_mode_set();

    uint8_t const * bytes_src = (uint8_t const *)src;

    uint32_t unaligned_bytes = addr % NVMC_BYTES_IN_WORD;
    if (unaligned_bytes != 0)
   38d0e:	f010 0303 	ands.w	r3, r0, #3
   38d12:	d010      	beq.n	38d36 <nrfx_nvmc_bytes_write+0x4e>
    {
        uint32_t leading_bytes = NVMC_BYTES_IN_WORD - unaligned_bytes;
   38d14:	f1c3 0704 	rsb	r7, r3, #4
        if (leading_bytes > num_bytes)
   38d18:	42af      	cmp	r7, r5
   38d1a:	bf28      	it	cs
   38d1c:	462f      	movcs	r7, r5
        {
            leading_bytes = num_bytes;
        }

        nvmc_word_write(addr - unaligned_bytes,
   38d1e:	463a      	mov	r2, r7
   38d20:	eba0 0803 	sub.w	r8, r0, r3
   38d24:	f7ff ff6a 	bl	38bfc <partial_word_create>
   38d28:	4601      	mov	r1, r0
   38d2a:	4640      	mov	r0, r8
   38d2c:	f7ff ff5a 	bl	38be4 <nvmc_word_write>
                        partial_word_create(addr, bytes_src, leading_bytes));
        num_bytes -= leading_bytes;
   38d30:	1bed      	subs	r5, r5, r7
        addr      += leading_bytes;
   38d32:	443c      	add	r4, r7
        bytes_src += leading_bytes;
   38d34:	443e      	add	r6, r7
        }
    }
    else
#endif
    {
        uint32_t word_count = num_bytes / NVMC_BYTES_IN_WORD;
   38d36:	4637      	mov	r7, r6
   38d38:	f025 0803 	bic.w	r8, r5, #3
   38d3c:	44b0      	add	r8, r6
   38d3e:	eba4 0906 	sub.w	r9, r4, r6
    for (uint32_t i = 0; i < num_words; i++)
   38d42:	45b8      	cmp	r8, r7
   38d44:	d113      	bne.n	38d6e <nrfx_nvmc_bytes_write+0x86>
        addr += word_count * NVMC_BYTES_IN_WORD;
        bytes_src += word_count * NVMC_BYTES_IN_WORD;
    }

    uint32_t trailing_bytes = num_bytes % NVMC_BYTES_IN_WORD;
    if (trailing_bytes != 0)
   38d46:	f015 0203 	ands.w	r2, r5, #3
   38d4a:	d00a      	beq.n	38d62 <nrfx_nvmc_bytes_write+0x7a>
        addr += word_count * NVMC_BYTES_IN_WORD;
   38d4c:	f025 0103 	bic.w	r1, r5, #3
   38d50:	440c      	add	r4, r1
    {
        nvmc_word_write(addr, partial_word_create(addr, bytes_src, trailing_bytes));
   38d52:	4620      	mov	r0, r4
   38d54:	4431      	add	r1, r6
   38d56:	f7ff ff51 	bl	38bfc <partial_word_create>
   38d5a:	4601      	mov	r1, r0
   38d5c:	4620      	mov	r0, r4
   38d5e:	f7ff ff41 	bl	38be4 <nvmc_word_write>
   38d62:	2200      	movs	r2, #0
   38d64:	4b08      	ldr	r3, [pc, #32]	; (38d88 <nrfx_nvmc_bytes_write+0xa0>)
   38d66:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    }

    nvmc_readonly_mode_set();
}
   38d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
   38d6e:	eb09 0007 	add.w	r0, r9, r7
   38d72:	f857 1b04 	ldr.w	r1, [r7], #4
   38d76:	f7ff ff35 	bl	38be4 <nvmc_word_write>
   38d7a:	e7e2      	b.n	38d42 <nrfx_nvmc_bytes_write+0x5a>
   38d7c:	00049e1d 	.word	0x00049e1d
   38d80:	00049e07 	.word	0x00049e07
   38d84:	00049e84 	.word	0x00049e84
   38d88:	40039000 	.word	0x40039000

00038d8c <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   38d8c:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   38d8e:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   38d90:	4b08      	ldr	r3, [pc, #32]	; (38db4 <z_sys_device_do_config_level+0x28>)
   38d92:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   38d96:	3001      	adds	r0, #1
   38d98:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   38d9c:	42a5      	cmp	r5, r4
   38d9e:	d800      	bhi.n	38da2 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   38da0:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   38da2:	6823      	ldr	r3, [r4, #0]
   38da4:	4620      	mov	r0, r4
   38da6:	685b      	ldr	r3, [r3, #4]
   38da8:	4798      	blx	r3
		if (retval != 0) {
   38daa:	b100      	cbz	r0, 38dae <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   38dac:	6066      	str	r6, [r4, #4]
								info++) {
   38dae:	340c      	adds	r4, #12
   38db0:	e7f4      	b.n	38d9c <z_sys_device_do_config_level+0x10>
   38db2:	bf00      	nop
   38db4:	00044b88 	.word	0x00044b88

00038db8 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   38db8:	4b10      	ldr	r3, [pc, #64]	; (38dfc <z_impl_device_get_binding+0x44>)
{
   38dba:	b570      	push	{r4, r5, r6, lr}
   38dbc:	4605      	mov	r5, r0
   38dbe:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   38dc0:	4c0f      	ldr	r4, [pc, #60]	; (38e00 <z_impl_device_get_binding+0x48>)
   38dc2:	429c      	cmp	r4, r3
   38dc4:	d104      	bne.n	38dd0 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   38dc6:	4c0e      	ldr	r4, [pc, #56]	; (38e00 <z_impl_device_get_binding+0x48>)
   38dc8:	42b4      	cmp	r4, r6
   38dca:	d109      	bne.n	38de0 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   38dcc:	2400      	movs	r4, #0
   38dce:	e012      	b.n	38df6 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   38dd0:	6862      	ldr	r2, [r4, #4]
   38dd2:	b11a      	cbz	r2, 38ddc <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   38dd4:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   38dd6:	6812      	ldr	r2, [r2, #0]
   38dd8:	42aa      	cmp	r2, r5
   38dda:	d00c      	beq.n	38df6 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   38ddc:	340c      	adds	r4, #12
   38dde:	e7f0      	b.n	38dc2 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   38de0:	6863      	ldr	r3, [r4, #4]
   38de2:	b90b      	cbnz	r3, 38de8 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   38de4:	340c      	adds	r4, #12
   38de6:	e7ef      	b.n	38dc8 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   38de8:	6823      	ldr	r3, [r4, #0]
   38dea:	4628      	mov	r0, r5
   38dec:	6819      	ldr	r1, [r3, #0]
   38dee:	f7e1 f86f 	bl	19ed0 <strcmp>
   38df2:	2800      	cmp	r0, #0
   38df4:	d1f6      	bne.n	38de4 <z_impl_device_get_binding+0x2c>
}
   38df6:	4620      	mov	r0, r4
   38df8:	bd70      	pop	{r4, r5, r6, pc}
   38dfa:	bf00      	nop
   38dfc:	20031f70 	.word	0x20031f70
   38e00:	20031e68 	.word	0x20031e68

00038e04 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   38e04:	4b01      	ldr	r3, [pc, #4]	; (38e0c <z_impl_z_errno+0x8>)
   38e06:	6898      	ldr	r0, [r3, #8]
}
   38e08:	3054      	adds	r0, #84	; 0x54
   38e0a:	4770      	bx	lr
   38e0c:	2002a1d8 	.word	0x2002a1d8

00038e10 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   38e10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   38e14:	4605      	mov	r5, r0
   38e16:	4688      	mov	r8, r1
	return z_impl_k_current_get();
   38e18:	f002 f800 	bl	3ae1c <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   38e1c:	2301      	movs	r3, #1
   38e1e:	4606      	mov	r6, r0
   38e20:	f04f 0000 	mov.w	r0, #0
   38e24:	2200      	movs	r2, #0
   38e26:	f363 0007 	bfi	r0, r3, #0, #8
   38e2a:	4c2b      	ldr	r4, [pc, #172]	; (38ed8 <z_fatal_error+0xc8>)
   38e2c:	4b2b      	ldr	r3, [pc, #172]	; (38edc <z_fatal_error+0xcc>)
   38e2e:	2d04      	cmp	r5, #4
   38e30:	eba4 0403 	sub.w	r4, r4, r3
   38e34:	bf98      	it	ls
   38e36:	4b2a      	ldrls	r3, [pc, #168]	; (38ee0 <z_fatal_error+0xd0>)
   38e38:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   38e3c:	bf94      	ite	ls
   38e3e:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   38e42:	4b28      	ldrhi	r3, [pc, #160]	; (38ee4 <z_fatal_error+0xd4>)
   38e44:	9200      	str	r2, [sp, #0]
   38e46:	f364 108f 	bfi	r0, r4, #6, #10
   38e4a:	462a      	mov	r2, r5
   38e4c:	4926      	ldr	r1, [pc, #152]	; (38ee8 <z_fatal_error+0xd8>)
   38e4e:	f006 fb18 	bl	3f482 <log_string_sync>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   38e52:	f8d8 301c 	ldr.w	r3, [r8, #28]
   38e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
   38e5a:	b14b      	cbz	r3, 38e70 <z_fatal_error+0x60>
		LOG_ERR("Fault during interrupt handling\n");
   38e5c:	f04f 0000 	mov.w	r0, #0
   38e60:	2301      	movs	r3, #1
   38e62:	f363 0007 	bfi	r0, r3, #0, #8
   38e66:	f364 108f 	bfi	r0, r4, #6, #10
   38e6a:	4920      	ldr	r1, [pc, #128]	; (38eec <z_fatal_error+0xdc>)
   38e6c:	f006 fb09 	bl	3f482 <log_string_sync>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   38e70:	f04f 0700 	mov.w	r7, #0
   38e74:	2301      	movs	r3, #1
	const char *thread_name = k_thread_name_get(thread);
   38e76:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
   38e78:	f363 0707 	bfi	r7, r3, #0, #8
   38e7c:	f364 178f 	bfi	r7, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   38e80:	f008 fca0 	bl	417c4 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   38e84:	b328      	cbz	r0, 38ed2 <z_fatal_error+0xc2>
   38e86:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   38e88:	4b19      	ldr	r3, [pc, #100]	; (38ef0 <z_fatal_error+0xe0>)
   38e8a:	2a00      	cmp	r2, #0
   38e8c:	bf08      	it	eq
   38e8e:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   38e90:	f006 fb09 	bl	3f4a6 <log_strdup>
   38e94:	4632      	mov	r2, r6
   38e96:	4603      	mov	r3, r0
   38e98:	4916      	ldr	r1, [pc, #88]	; (38ef4 <z_fatal_error+0xe4>)
   38e9a:	4638      	mov	r0, r7
   38e9c:	f006 faf1 	bl	3f482 <log_string_sync>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   38ea0:	4641      	mov	r1, r8
   38ea2:	4628      	mov	r0, r5
   38ea4:	f7e4 fd2c 	bl	1d900 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   38ea8:	2d04      	cmp	r5, #4
   38eaa:	d10c      	bne.n	38ec6 <z_fatal_error+0xb6>
   38eac:	4912      	ldr	r1, [pc, #72]	; (38ef8 <z_fatal_error+0xe8>)
   38eae:	2387      	movs	r3, #135	; 0x87
   38eb0:	4a12      	ldr	r2, [pc, #72]	; (38efc <z_fatal_error+0xec>)
   38eb2:	4813      	ldr	r0, [pc, #76]	; (38f00 <z_fatal_error+0xf0>)
   38eb4:	f006 fac7 	bl	3f446 <printk>
   38eb8:	4812      	ldr	r0, [pc, #72]	; (38f04 <z_fatal_error+0xf4>)
   38eba:	f006 fac4 	bl	3f446 <printk>
   38ebe:	2187      	movs	r1, #135	; 0x87
   38ec0:	480e      	ldr	r0, [pc, #56]	; (38efc <z_fatal_error+0xec>)
   38ec2:	f006 facd 	bl	3f460 <assert_post_action>
	z_impl_k_thread_abort(thread);
   38ec6:	4630      	mov	r0, r6
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
   38ec8:	b002      	add	sp, #8
   38eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   38ece:	f7e7 bfa1 	b.w	20e14 <z_impl_k_thread_abort>
		thread_name = "unknown";
   38ed2:	4807      	ldr	r0, [pc, #28]	; (38ef0 <z_fatal_error+0xe0>)
   38ed4:	e7dc      	b.n	38e90 <z_fatal_error+0x80>
   38ed6:	bf00      	nop
   38ed8:	00043094 	.word	0x00043094
   38edc:	00042fb4 	.word	0x00042fb4
   38ee0:	00044ba0 	.word	0x00044ba0
   38ee4:	00049f2b 	.word	0x00049f2b
   38ee8:	00049f41 	.word	0x00049f41
   38eec:	00049f69 	.word	0x00049f69
   38ef0:	00049f39 	.word	0x00049f39
   38ef4:	00049f8a 	.word	0x00049f8a
   38ef8:	00049fbd 	.word	0x00049fbd
   38efc:	00049fa2 	.word	0x00049fa2
   38f00:	00045316 	.word	0x00045316
   38f04:	00049fda 	.word	0x00049fda

00038f08 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   38f08:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   38f0a:	4d0b      	ldr	r5, [pc, #44]	; (38f38 <idle+0x30>)
	__asm__ volatile(
   38f0c:	f04f 0220 	mov.w	r2, #32
   38f10:	f3ef 8311 	mrs	r3, BASEPRI
   38f14:	f382 8811 	msr	BASEPRI, r2
   38f18:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   38f1c:	f002 fd68 	bl	3b9f0 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   38f20:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   38f22:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   38f24:	2802      	cmp	r0, #2
   38f26:	bfd8      	it	le
   38f28:	4608      	movle	r0, r1
   38f2a:	f002 fda7 	bl	3ba7c <z_set_timeout_expiry>
	_kernel.idle = ticks;
   38f2e:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
   38f30:	f7e7 fb6a 	bl	20608 <arch_cpu_idle>
   38f34:	e7ea      	b.n	38f0c <idle+0x4>
   38f36:	bf00      	nop
   38f38:	2002a1d8 	.word	0x2002a1d8

00038f3c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   38f3c:	4802      	ldr	r0, [pc, #8]	; (38f48 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   38f3e:	4a03      	ldr	r2, [pc, #12]	; (38f4c <z_bss_zero+0x10>)
   38f40:	2100      	movs	r1, #0
   38f42:	1a12      	subs	r2, r2, r0
   38f44:	f008 bd55 	b.w	419f2 <memset>
   38f48:	20020000 	.word	0x20020000
   38f4c:	2002ca0c 	.word	0x2002ca0c

00038f50 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   38f50:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   38f52:	4806      	ldr	r0, [pc, #24]	; (38f6c <z_data_copy+0x1c>)
   38f54:	4a06      	ldr	r2, [pc, #24]	; (38f70 <z_data_copy+0x20>)
   38f56:	4907      	ldr	r1, [pc, #28]	; (38f74 <z_data_copy+0x24>)
   38f58:	1a12      	subs	r2, r2, r0
   38f5a:	f008 fd2a 	bl	419b2 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   38f5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   38f62:	4a05      	ldr	r2, [pc, #20]	; (38f78 <z_data_copy+0x28>)
   38f64:	4905      	ldr	r1, [pc, #20]	; (38f7c <z_data_copy+0x2c>)
   38f66:	4806      	ldr	r0, [pc, #24]	; (38f80 <z_data_copy+0x30>)
   38f68:	f008 bd23 	b.w	419b2 <memcpy>
   38f6c:	20031698 	.word	0x20031698
   38f70:	2003209c 	.word	0x2003209c
   38f74:	0004a91c 	.word	0x0004a91c
   38f78:	00000000 	.word	0x00000000
   38f7c:	0004a918 	.word	0x0004a918
   38f80:	20020000 	.word	0x20020000

00038f84 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   38f84:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   38f86:	2002      	movs	r0, #2
   38f88:	f7ff ff00 	bl	38d8c <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   38f8c:	4807      	ldr	r0, [pc, #28]	; (38fac <bg_thread_main+0x28>)
   38f8e:	f006 fa5a 	bl	3f446 <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   38f92:	2003      	movs	r0, #3
   38f94:	f7ff fefa 	bl	38d8c <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   38f98:	f002 f944 	bl	3b224 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   38f9c:	f7e4 ff90 	bl	1dec0 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   38fa0:	4a03      	ldr	r2, [pc, #12]	; (38fb0 <bg_thread_main+0x2c>)
   38fa2:	7b13      	ldrb	r3, [r2, #12]
   38fa4:	f023 0301 	bic.w	r3, r3, #1
   38fa8:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   38faa:	bd08      	pop	{r3, pc}
   38fac:	0004a00f 	.word	0x0004a00f
   38fb0:	200260b8 	.word	0x200260b8

00038fb4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   38fb4:	b580      	push	{r7, lr}
   38fb6:	b0b2      	sub	sp, #200	; 0xc8
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   38fb8:	f7e6 fa7a 	bl	1f4b0 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   38fbc:	4b36      	ldr	r3, [pc, #216]	; (39098 <z_cstart+0xe4>)
   38fbe:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   38fc2:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   38fc6:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   38fca:	2400      	movs	r4, #0
   38fcc:	23e0      	movs	r3, #224	; 0xe0
   38fce:	4d33      	ldr	r5, [pc, #204]	; (3909c <z_cstart+0xe8>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   38fd0:	2701      	movs	r7, #1
   38fd2:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   38fd6:	77ec      	strb	r4, [r5, #31]
   38fd8:	762c      	strb	r4, [r5, #24]
   38fda:	766c      	strb	r4, [r5, #25]
   38fdc:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   38fde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   38fe0:	4e2f      	ldr	r6, [pc, #188]	; (390a0 <z_cstart+0xec>)
   38fe2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   38fe6:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   38fe8:	f7e7 feea 	bl	20dc0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   38fec:	f7e7 fb06 	bl	205fc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   38ff0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   38ff4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   38ff6:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   38ff8:	ab06      	add	r3, sp, #24
   38ffa:	22b0      	movs	r2, #176	; 0xb0
   38ffc:	4621      	mov	r1, r4
   38ffe:	4618      	mov	r0, r3
   39000:	f008 fcf7 	bl	419f2 <memset>
	_current = &dummy_thread;
   39004:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   39006:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   39008:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   3900c:	f7ff febe 	bl	38d8c <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   39010:	4638      	mov	r0, r7
   39012:	f7ff febb 	bl	38d8c <z_sys_device_do_config_level>
	z_sched_init();
   39016:	f001 fd95 	bl	3ab44 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   3901a:	4b22      	ldr	r3, [pc, #136]	; (390a4 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
   3901c:	4d22      	ldr	r5, [pc, #136]	; (390a8 <z_cstart+0xf4>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
   3901e:	e9cd 7304 	strd	r7, r3, [sp, #16]
   39022:	2307      	movs	r3, #7
   39024:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   39028:	e9cd 4302 	strd	r4, r3, [sp, #8]
   3902c:	e9cd 4400 	strd	r4, r4, [sp]
   39030:	4b1e      	ldr	r3, [pc, #120]	; (390ac <z_cstart+0xf8>)
   39032:	491f      	ldr	r1, [pc, #124]	; (390b0 <z_cstart+0xfc>)
   39034:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   39036:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   39038:	f002 f80c 	bl	3b054 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3903c:	7b6b      	ldrb	r3, [r5, #13]
   3903e:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   39042:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   39046:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   39048:	d104      	bne.n	39054 <z_cstart+0xa0>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   3904a:	69ab      	ldr	r3, [r5, #24]
   3904c:	b913      	cbnz	r3, 39054 <z_cstart+0xa0>
		z_add_thread_to_ready_q(thread);
   3904e:	4628      	mov	r0, r5
   39050:	f001 f96a 	bl	3a328 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
   39054:	4b17      	ldr	r3, [pc, #92]	; (390b4 <z_cstart+0x100>)
   39056:	2201      	movs	r2, #1
   39058:	9305      	str	r3, [sp, #20]
   3905a:	230f      	movs	r3, #15
   3905c:	e9cd 3203 	strd	r3, r2, [sp, #12]
   39060:	2300      	movs	r3, #0
   39062:	4d15      	ldr	r5, [pc, #84]	; (390b8 <z_cstart+0x104>)
   39064:	e9cd 3301 	strd	r3, r3, [sp, #4]
   39068:	9300      	str	r3, [sp, #0]
   3906a:	f44f 72a0 	mov.w	r2, #320	; 0x140
   3906e:	4b13      	ldr	r3, [pc, #76]	; (390bc <z_cstart+0x108>)
   39070:	4913      	ldr	r1, [pc, #76]	; (390c0 <z_cstart+0x10c>)
   39072:	4628      	mov	r0, r5
   39074:	f001 ffee 	bl	3b054 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   39078:	7b6b      	ldrb	r3, [r5, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   3907a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   3907e:	f023 0304 	bic.w	r3, r3, #4
   39082:	736b      	strb	r3, [r5, #13]
	list->head = (sys_dnode_t *)list;
   39084:	4b0f      	ldr	r3, [pc, #60]	; (390c4 <z_cstart+0x110>)
   39086:	490a      	ldr	r1, [pc, #40]	; (390b0 <z_cstart+0xfc>)
	list->tail = (sys_dnode_t *)list;
   39088:	e9c6 3306 	strd	r3, r3, [r6, #24]
   3908c:	4806      	ldr	r0, [pc, #24]	; (390a8 <z_cstart+0xf4>)
   3908e:	4b07      	ldr	r3, [pc, #28]	; (390ac <z_cstart+0xf8>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   39090:	60f5      	str	r5, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   39092:	f7e7 fa87 	bl	205a4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   39096:	bf00      	nop
   39098:	2002f150 	.word	0x2002f150
   3909c:	e000ed00 	.word	0xe000ed00
   390a0:	2002a1d8 	.word	0x2002a1d8
   390a4:	0004a05a 	.word	0x0004a05a
   390a8:	200260b8 	.word	0x200260b8
   390ac:	00038f85 	.word	0x00038f85
   390b0:	2002d010 	.word	0x2002d010
   390b4:	0004a05f 	.word	0x0004a05f
   390b8:	20026008 	.word	0x20026008
   390bc:	00038f09 	.word	0x00038f09
   390c0:	2002f010 	.word	0x2002f010
   390c4:	2002a1f0 	.word	0x2002a1f0

000390c8 <create_free_list>:
{
	u32_t j;
	char *p;

	/* blocks must be word aligned */
	__ASSERT(((slab->block_size | (uintptr_t)slab->buffer)
   390c8:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   390cc:	4313      	orrs	r3, r2
   390ce:	079b      	lsls	r3, r3, #30
{
   390d0:	b510      	push	{r4, lr}
   390d2:	4604      	mov	r4, r0
	__ASSERT(((slab->block_size | (uintptr_t)slab->buffer)
   390d4:	d00d      	beq.n	390f2 <create_free_list+0x2a>
   390d6:	2327      	movs	r3, #39	; 0x27
   390d8:	4a0d      	ldr	r2, [pc, #52]	; (39110 <create_free_list+0x48>)
   390da:	490e      	ldr	r1, [pc, #56]	; (39114 <create_free_list+0x4c>)
   390dc:	480e      	ldr	r0, [pc, #56]	; (39118 <create_free_list+0x50>)
   390de:	f006 f9b2 	bl	3f446 <printk>
   390e2:	4621      	mov	r1, r4
   390e4:	480d      	ldr	r0, [pc, #52]	; (3911c <create_free_list+0x54>)
   390e6:	f006 f9ae 	bl	3f446 <printk>
   390ea:	2127      	movs	r1, #39	; 0x27
   390ec:	4808      	ldr	r0, [pc, #32]	; (39110 <create_free_list+0x48>)
   390ee:	f006 f9b7 	bl	3f460 <assert_post_action>
					& (sizeof(void *) - 1)) == 0,
		 "slab at %p not word aligned", slab);

	slab->free_list = NULL;
   390f2:	2300      	movs	r3, #0
	p = slab->buffer;
   390f4:	6922      	ldr	r2, [r4, #16]

	for (j = 0U; j < slab->num_blocks; j++) {
   390f6:	68a1      	ldr	r1, [r4, #8]
	slab->free_list = NULL;
   390f8:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   390fa:	4299      	cmp	r1, r3
   390fc:	d100      	bne.n	39100 <create_free_list+0x38>
		*(char **)p = slab->free_list;
		slab->free_list = p;
		p += slab->block_size;
	}
}
   390fe:	bd10      	pop	{r4, pc}
		*(char **)p = slab->free_list;
   39100:	6960      	ldr	r0, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   39102:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   39104:	6010      	str	r0, [r2, #0]
		p += slab->block_size;
   39106:	68e0      	ldr	r0, [r4, #12]
		slab->free_list = p;
   39108:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   3910a:	4402      	add	r2, r0
   3910c:	e7f5      	b.n	390fa <create_free_list+0x32>
   3910e:	bf00      	nop
   39110:	0004a064 	.word	0x0004a064
   39114:	0004a082 	.word	0x0004a082
   39118:	00045316 	.word	0x00045316
   3911c:	0004a0cd 	.word	0x0004a0cd

00039120 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   39120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   39122:	4d0e      	ldr	r5, [pc, #56]	; (3915c <init_mem_slab_module+0x3c>)
   39124:	4c0e      	ldr	r4, [pc, #56]	; (39160 <init_mem_slab_module+0x40>)
   39126:	462f      	mov	r7, r5
   39128:	4e0e      	ldr	r6, [pc, #56]	; (39164 <init_mem_slab_module+0x44>)
   3912a:	42ac      	cmp	r4, r5
   3912c:	d90c      	bls.n	39148 <init_mem_slab_module+0x28>
   3912e:	490e      	ldr	r1, [pc, #56]	; (39168 <init_mem_slab_module+0x48>)
   39130:	233e      	movs	r3, #62	; 0x3e
   39132:	4632      	mov	r2, r6
   39134:	480d      	ldr	r0, [pc, #52]	; (3916c <init_mem_slab_module+0x4c>)
   39136:	f006 f986 	bl	3f446 <printk>
   3913a:	480d      	ldr	r0, [pc, #52]	; (39170 <init_mem_slab_module+0x50>)
   3913c:	f006 f983 	bl	3f446 <printk>
   39140:	213e      	movs	r1, #62	; 0x3e
   39142:	4630      	mov	r0, r6
   39144:	f006 f98c 	bl	3f460 <assert_post_action>
   39148:	42bc      	cmp	r4, r7
   3914a:	d301      	bcc.n	39150 <init_mem_slab_module+0x30>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
   3914c:	2000      	movs	r0, #0
   3914e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		create_free_list(slab);
   39150:	4620      	mov	r0, r4
   39152:	f7ff ffb9 	bl	390c8 <create_free_list>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   39156:	341c      	adds	r4, #28
   39158:	e7e7      	b.n	3912a <init_mem_slab_module+0xa>
   3915a:	bf00      	nop
   3915c:	20031f8c 	.word	0x20031f8c
   39160:	20031f70 	.word	0x20031f70
   39164:	0004a064 	.word	0x0004a064
   39168:	0004a0eb 	.word	0x0004a0eb
   3916c:	00045316 	.word	0x00045316
   39170:	0004a108 	.word	0x0004a108

00039174 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   39174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39176:	4604      	mov	r4, r0
   39178:	460d      	mov	r5, r1
   3917a:	4616      	mov	r6, r2
   3917c:	f04f 0320 	mov.w	r3, #32
   39180:	f3ef 8711 	mrs	r7, BASEPRI
   39184:	f383 8811 	msr	BASEPRI, r3
   39188:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3918c:	4822      	ldr	r0, [pc, #136]	; (39218 <k_mem_slab_alloc+0xa4>)
   3918e:	f001 ff79 	bl	3b084 <z_spin_lock_valid>
   39192:	b960      	cbnz	r0, 391ae <k_mem_slab_alloc+0x3a>
   39194:	4921      	ldr	r1, [pc, #132]	; (3921c <k_mem_slab_alloc+0xa8>)
   39196:	234f      	movs	r3, #79	; 0x4f
   39198:	4a21      	ldr	r2, [pc, #132]	; (39220 <k_mem_slab_alloc+0xac>)
   3919a:	4822      	ldr	r0, [pc, #136]	; (39224 <k_mem_slab_alloc+0xb0>)
   3919c:	f006 f953 	bl	3f446 <printk>
   391a0:	4821      	ldr	r0, [pc, #132]	; (39228 <k_mem_slab_alloc+0xb4>)
   391a2:	f006 f950 	bl	3f446 <printk>
   391a6:	214f      	movs	r1, #79	; 0x4f
   391a8:	481d      	ldr	r0, [pc, #116]	; (39220 <k_mem_slab_alloc+0xac>)
   391aa:	f006 f959 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   391ae:	481a      	ldr	r0, [pc, #104]	; (39218 <k_mem_slab_alloc+0xa4>)
   391b0:	f001 ff86 	bl	3b0c0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   391b4:	6963      	ldr	r3, [r4, #20]
   391b6:	b1e3      	cbz	r3, 391f2 <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
   391b8:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   391ba:	681b      	ldr	r3, [r3, #0]
   391bc:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   391be:	69a3      	ldr	r3, [r4, #24]
   391c0:	3301      	adds	r3, #1
   391c2:	61a3      	str	r3, [r4, #24]
		result = 0;
   391c4:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   391c6:	4814      	ldr	r0, [pc, #80]	; (39218 <k_mem_slab_alloc+0xa4>)
   391c8:	f001 ff6a 	bl	3b0a0 <z_spin_unlock_valid>
   391cc:	b960      	cbnz	r0, 391e8 <k_mem_slab_alloc+0x74>
   391ce:	4917      	ldr	r1, [pc, #92]	; (3922c <k_mem_slab_alloc+0xb8>)
   391d0:	2362      	movs	r3, #98	; 0x62
   391d2:	4a13      	ldr	r2, [pc, #76]	; (39220 <k_mem_slab_alloc+0xac>)
   391d4:	4813      	ldr	r0, [pc, #76]	; (39224 <k_mem_slab_alloc+0xb0>)
   391d6:	f006 f936 	bl	3f446 <printk>
   391da:	4815      	ldr	r0, [pc, #84]	; (39230 <k_mem_slab_alloc+0xbc>)
   391dc:	f006 f933 	bl	3f446 <printk>
   391e0:	2162      	movs	r1, #98	; 0x62
   391e2:	480f      	ldr	r0, [pc, #60]	; (39220 <k_mem_slab_alloc+0xac>)
   391e4:	f006 f93c 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   391e8:	f387 8811 	msr	BASEPRI, r7
   391ec:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   391f0:	e010      	b.n	39214 <k_mem_slab_alloc+0xa0>
	} else if (timeout == K_NO_WAIT) {
   391f2:	b91e      	cbnz	r6, 391fc <k_mem_slab_alloc+0x88>
		*mem = NULL;
   391f4:	602e      	str	r6, [r5, #0]
		result = -ENOMEM;
   391f6:	f06f 040b 	mvn.w	r4, #11
   391fa:	e7e4      	b.n	391c6 <k_mem_slab_alloc+0x52>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   391fc:	4622      	mov	r2, r4
   391fe:	4633      	mov	r3, r6
   39200:	4639      	mov	r1, r7
   39202:	4805      	ldr	r0, [pc, #20]	; (39218 <k_mem_slab_alloc+0xa4>)
   39204:	f001 fb58 	bl	3a8b8 <z_pend_curr>
		if (result == 0) {
   39208:	4604      	mov	r4, r0
   3920a:	b918      	cbnz	r0, 39214 <k_mem_slab_alloc+0xa0>
			*mem = _current->base.swap_data;
   3920c:	4b09      	ldr	r3, [pc, #36]	; (39234 <k_mem_slab_alloc+0xc0>)
   3920e:	689b      	ldr	r3, [r3, #8]
   39210:	695b      	ldr	r3, [r3, #20]
   39212:	602b      	str	r3, [r5, #0]
}
   39214:	4620      	mov	r0, r4
   39216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   39218:	20026168 	.word	0x20026168
   3921c:	00045d2d 	.word	0x00045d2d
   39220:	00045d0e 	.word	0x00045d0e
   39224:	00045316 	.word	0x00045316
   39228:	00045d42 	.word	0x00045d42
   3922c:	00045d57 	.word	0x00045d57
   39230:	00045d6e 	.word	0x00045d6e
   39234:	2002a1d8 	.word	0x2002a1d8

00039238 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   39238:	b570      	push	{r4, r5, r6, lr}
   3923a:	4604      	mov	r4, r0
   3923c:	460d      	mov	r5, r1
	__asm__ volatile(
   3923e:	f04f 0320 	mov.w	r3, #32
   39242:	f3ef 8611 	mrs	r6, BASEPRI
   39246:	f383 8811 	msr	BASEPRI, r3
   3924a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3924e:	4823      	ldr	r0, [pc, #140]	; (392dc <k_mem_slab_free+0xa4>)
   39250:	f001 ff18 	bl	3b084 <z_spin_lock_valid>
   39254:	b960      	cbnz	r0, 39270 <k_mem_slab_free+0x38>
   39256:	4922      	ldr	r1, [pc, #136]	; (392e0 <k_mem_slab_free+0xa8>)
   39258:	234f      	movs	r3, #79	; 0x4f
   3925a:	4a22      	ldr	r2, [pc, #136]	; (392e4 <k_mem_slab_free+0xac>)
   3925c:	4822      	ldr	r0, [pc, #136]	; (392e8 <k_mem_slab_free+0xb0>)
   3925e:	f006 f8f2 	bl	3f446 <printk>
   39262:	4822      	ldr	r0, [pc, #136]	; (392ec <k_mem_slab_free+0xb4>)
   39264:	f006 f8ef 	bl	3f446 <printk>
   39268:	214f      	movs	r1, #79	; 0x4f
   3926a:	481e      	ldr	r0, [pc, #120]	; (392e4 <k_mem_slab_free+0xac>)
   3926c:	f006 f8f8 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   39270:	481a      	ldr	r0, [pc, #104]	; (392dc <k_mem_slab_free+0xa4>)
   39272:	f001 ff25 	bl	3b0c0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   39276:	4620      	mov	r0, r4
   39278:	f001 fbd8 	bl	3aa2c <z_unpend_first_thread>

	if (pending_thread != NULL) {
   3927c:	b180      	cbz	r0, 392a0 <k_mem_slab_free+0x68>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   3927e:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   39280:	682a      	ldr	r2, [r5, #0]
   39282:	6681      	str	r1, [r0, #104]	; 0x68
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   39284:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   39286:	7b42      	ldrb	r2, [r0, #13]
   39288:	06d2      	lsls	r2, r2, #27
   3928a:	d103      	bne.n	39294 <k_mem_slab_free+0x5c>
	if (z_is_thread_ready(thread)) {
   3928c:	6983      	ldr	r3, [r0, #24]
   3928e:	b90b      	cbnz	r3, 39294 <k_mem_slab_free+0x5c>
		z_add_thread_to_ready_q(thread);
   39290:	f001 f84a 	bl	3a328 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   39294:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   39296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   3929a:	4810      	ldr	r0, [pc, #64]	; (392dc <k_mem_slab_free+0xa4>)
   3929c:	f000 be62 	b.w	39f64 <z_reschedule>
		**(char ***)mem = slab->free_list;
   392a0:	682b      	ldr	r3, [r5, #0]
   392a2:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   392a4:	480d      	ldr	r0, [pc, #52]	; (392dc <k_mem_slab_free+0xa4>)
   392a6:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   392a8:	682b      	ldr	r3, [r5, #0]
   392aa:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   392ac:	69a3      	ldr	r3, [r4, #24]
   392ae:	3b01      	subs	r3, #1
   392b0:	61a3      	str	r3, [r4, #24]
   392b2:	f001 fef5 	bl	3b0a0 <z_spin_unlock_valid>
   392b6:	b960      	cbnz	r0, 392d2 <k_mem_slab_free+0x9a>
   392b8:	490d      	ldr	r1, [pc, #52]	; (392f0 <k_mem_slab_free+0xb8>)
   392ba:	2362      	movs	r3, #98	; 0x62
   392bc:	4a09      	ldr	r2, [pc, #36]	; (392e4 <k_mem_slab_free+0xac>)
   392be:	480a      	ldr	r0, [pc, #40]	; (392e8 <k_mem_slab_free+0xb0>)
   392c0:	f006 f8c1 	bl	3f446 <printk>
   392c4:	480b      	ldr	r0, [pc, #44]	; (392f4 <k_mem_slab_free+0xbc>)
   392c6:	f006 f8be 	bl	3f446 <printk>
   392ca:	2162      	movs	r1, #98	; 0x62
   392cc:	4805      	ldr	r0, [pc, #20]	; (392e4 <k_mem_slab_free+0xac>)
   392ce:	f006 f8c7 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   392d2:	f386 8811 	msr	BASEPRI, r6
   392d6:	f3bf 8f6f 	isb	sy
}
   392da:	bd70      	pop	{r4, r5, r6, pc}
   392dc:	20026168 	.word	0x20026168
   392e0:	00045d2d 	.word	0x00045d2d
   392e4:	00045d0e 	.word	0x00045d0e
   392e8:	00045316 	.word	0x00045316
   392ec:	00045d42 	.word	0x00045d42
   392f0:	00045d57 	.word	0x00045d57
   392f4:	00045d6e 	.word	0x00045d6e

000392f8 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   392f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   392fa:	4d10      	ldr	r5, [pc, #64]	; (3933c <init_static_pools+0x44>)
   392fc:	4c10      	ldr	r4, [pc, #64]	; (39340 <init_static_pools+0x48>)
   392fe:	462f      	mov	r7, r5
   39300:	4e10      	ldr	r6, [pc, #64]	; (39344 <init_static_pools+0x4c>)
   39302:	42ac      	cmp	r4, r5
   39304:	d90c      	bls.n	39320 <init_static_pools+0x28>
   39306:	4910      	ldr	r1, [pc, #64]	; (39348 <init_static_pools+0x50>)
   39308:	2328      	movs	r3, #40	; 0x28
   3930a:	4632      	mov	r2, r6
   3930c:	480f      	ldr	r0, [pc, #60]	; (3934c <init_static_pools+0x54>)
   3930e:	f006 f89a 	bl	3f446 <printk>
   39312:	480f      	ldr	r0, [pc, #60]	; (39350 <init_static_pools+0x58>)
   39314:	f006 f897 	bl	3f446 <printk>
   39318:	2128      	movs	r1, #40	; 0x28
   3931a:	4630      	mov	r0, r6
   3931c:	f006 f8a0 	bl	3f460 <assert_post_action>
   39320:	42bc      	cmp	r4, r7
   39322:	d301      	bcc.n	39328 <init_static_pools+0x30>
		k_mem_pool_init(p);
	}

	return 0;
}
   39324:	2000      	movs	r0, #0
   39326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   39328:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   3932c:	4620      	mov	r0, r4
   3932e:	e9c4 3305 	strd	r3, r3, [r4, #20]
   39332:	f005 fcd0 	bl	3ecd6 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   39336:	341c      	adds	r4, #28
   39338:	e7e3      	b.n	39302 <init_static_pools+0xa>
   3933a:	bf00      	nop
   3933c:	20031fa8 	.word	0x20031fa8
   39340:	20031f8c 	.word	0x20031f8c
   39344:	0004a127 	.word	0x0004a127
   39348:	0004a144 	.word	0x0004a144
   3934c:	00045316 	.word	0x00045316
   39350:	0004a108 	.word	0x0004a108

00039354 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   39354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39358:	4607      	mov	r7, r0
   3935a:	b085      	sub	sp, #20
   3935c:	460d      	mov	r5, r1
   3935e:	4692      	mov	sl, r2
   39360:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   39362:	f3ef 8305 	mrs	r3, IPSR
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");
   39366:	2b00      	cmp	r3, #0
   39368:	d048      	beq.n	393fc <k_mem_pool_alloc+0xa8>
   3936a:	2c00      	cmp	r4, #0
   3936c:	d139      	bne.n	393e2 <k_mem_pool_alloc+0x8e>
	s64_t end = 0;
   3936e:	f04f 0800 	mov.w	r8, #0
	return pool - &_k_mem_pool_list_start[0];
   39372:	4b26      	ldr	r3, [pc, #152]	; (3940c <k_mem_pool_alloc+0xb8>)
   39374:	4e26      	ldr	r6, [pc, #152]	; (39410 <k_mem_pool_alloc+0xbc>)
   39376:	1afb      	subs	r3, r7, r3
   39378:	109b      	asrs	r3, r3, #2
   3937a:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   3937c:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   39380:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   39382:	ab03      	add	r3, sp, #12
   39384:	aa02      	add	r2, sp, #8
   39386:	9500      	str	r5, [sp, #0]
   39388:	4651      	mov	r1, sl
   3938a:	4638      	mov	r0, r7
   3938c:	f005 fce9 	bl	3ed62 <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   39390:	796b      	ldrb	r3, [r5, #5]
   39392:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   39394:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   39396:	f362 0303 	bfi	r3, r2, #0, #4
   3939a:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   3939c:	686b      	ldr	r3, [r5, #4]
   3939e:	9a03      	ldr	r2, [sp, #12]
   393a0:	f362 331f 	bfi	r3, r2, #12, #20
   393a4:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   393a6:	b1c8      	cbz	r0, 393dc <k_mem_pool_alloc+0x88>
   393a8:	b1c4      	cbz	r4, 393dc <k_mem_pool_alloc+0x88>
   393aa:	f110 0f0c 	cmn.w	r0, #12
   393ae:	d115      	bne.n	393dc <k_mem_pool_alloc+0x88>
	__asm__ volatile(
   393b0:	f04f 0320 	mov.w	r3, #32
   393b4:	f3ef 8011 	mrs	r0, BASEPRI
   393b8:	f383 8811 	msr	BASEPRI, r3
   393bc:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
   393c0:	4622      	mov	r2, r4
   393c2:	4659      	mov	r1, fp
   393c4:	f001 fa20 	bl	3a808 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   393c8:	1c63      	adds	r3, r4, #1
   393ca:	d0da      	beq.n	39382 <k_mem_pool_alloc+0x2e>
	return z_impl_k_uptime_get();
   393cc:	f008 fa6b 	bl	418a6 <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   393d0:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   393d4:	2c00      	cmp	r4, #0
   393d6:	dcd4      	bgt.n	39382 <k_mem_pool_alloc+0x2e>
				break;
			}
		}
	}

	return -EAGAIN;
   393d8:	f06f 000a 	mvn.w	r0, #10
}
   393dc:	b005      	add	sp, #20
   393de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");
   393e2:	490c      	ldr	r1, [pc, #48]	; (39414 <k_mem_pool_alloc+0xc0>)
   393e4:	2337      	movs	r3, #55	; 0x37
   393e6:	4a0c      	ldr	r2, [pc, #48]	; (39418 <k_mem_pool_alloc+0xc4>)
   393e8:	480c      	ldr	r0, [pc, #48]	; (3941c <k_mem_pool_alloc+0xc8>)
   393ea:	f006 f82c 	bl	3f446 <printk>
   393ee:	480c      	ldr	r0, [pc, #48]	; (39420 <k_mem_pool_alloc+0xcc>)
   393f0:	f006 f829 	bl	3f446 <printk>
   393f4:	2137      	movs	r1, #55	; 0x37
   393f6:	4808      	ldr	r0, [pc, #32]	; (39418 <k_mem_pool_alloc+0xc4>)
   393f8:	f006 f832 	bl	3f460 <assert_post_action>
	if (timeout > 0) {
   393fc:	2c00      	cmp	r4, #0
   393fe:	ddb6      	ble.n	3936e <k_mem_pool_alloc+0x1a>
   39400:	f008 fa51 	bl	418a6 <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   39404:	eb10 0804 	adds.w	r8, r0, r4
   39408:	e7b3      	b.n	39372 <k_mem_pool_alloc+0x1e>
   3940a:	bf00      	nop
   3940c:	20031f8c 	.word	0x20031f8c
   39410:	b6db6db7 	.word	0xb6db6db7
   39414:	0004a15e 	.word	0x0004a15e
   39418:	0004a127 	.word	0x0004a127
   3941c:	00045316 	.word	0x00045316
   39420:	0004a182 	.word	0x0004a182

00039424 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   39424:	b570      	push	{r4, r5, r6, lr}
   39426:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   39428:	6802      	ldr	r2, [r0, #0]
   3942a:	7841      	ldrb	r1, [r0, #1]
   3942c:	4d23      	ldr	r5, [pc, #140]	; (394bc <k_mem_pool_free_id+0x98>)
   3942e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   39432:	00a4      	lsls	r4, r4, #2
   39434:	0b12      	lsrs	r2, r2, #12
   39436:	f001 010f 	and.w	r1, r1, #15
   3943a:	1928      	adds	r0, r5, r4
   3943c:	f7e5 fcc0 	bl	1edc0 <z_sys_mem_pool_block_free>
   39440:	f04f 0320 	mov.w	r3, #32
   39444:	f3ef 8611 	mrs	r6, BASEPRI
   39448:	f383 8811 	msr	BASEPRI, r3
   3944c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   39450:	481b      	ldr	r0, [pc, #108]	; (394c0 <k_mem_pool_free_id+0x9c>)
   39452:	f001 fe17 	bl	3b084 <z_spin_lock_valid>
   39456:	b960      	cbnz	r0, 39472 <k_mem_pool_free_id+0x4e>
   39458:	491a      	ldr	r1, [pc, #104]	; (394c4 <k_mem_pool_free_id+0xa0>)
   3945a:	234f      	movs	r3, #79	; 0x4f
   3945c:	4a1a      	ldr	r2, [pc, #104]	; (394c8 <k_mem_pool_free_id+0xa4>)
   3945e:	481b      	ldr	r0, [pc, #108]	; (394cc <k_mem_pool_free_id+0xa8>)
   39460:	f005 fff1 	bl	3f446 <printk>
   39464:	481a      	ldr	r0, [pc, #104]	; (394d0 <k_mem_pool_free_id+0xac>)
   39466:	f005 ffee 	bl	3f446 <printk>
   3946a:	214f      	movs	r1, #79	; 0x4f
   3946c:	4816      	ldr	r0, [pc, #88]	; (394c8 <k_mem_pool_free_id+0xa4>)
   3946e:	f005 fff7 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   39472:	4813      	ldr	r0, [pc, #76]	; (394c0 <k_mem_pool_free_id+0x9c>)
   39474:	f001 fe24 	bl	3b0c0 <z_spin_lock_set_owner>
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   39478:	f104 0014 	add.w	r0, r4, #20
   3947c:	4428      	add	r0, r5
   3947e:	f008 f97f 	bl	41780 <z_unpend_all>

	if (need_sched != 0) {
   39482:	b128      	cbz	r0, 39490 <k_mem_pool_free_id+0x6c>
		z_reschedule(&lock, key);
   39484:	4631      	mov	r1, r6
	} else {
		k_spin_unlock(&lock, key);
	}
}
   39486:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   3948a:	480d      	ldr	r0, [pc, #52]	; (394c0 <k_mem_pool_free_id+0x9c>)
   3948c:	f000 bd6a 	b.w	39f64 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   39490:	480b      	ldr	r0, [pc, #44]	; (394c0 <k_mem_pool_free_id+0x9c>)
   39492:	f001 fe05 	bl	3b0a0 <z_spin_unlock_valid>
   39496:	b960      	cbnz	r0, 394b2 <k_mem_pool_free_id+0x8e>
   39498:	490e      	ldr	r1, [pc, #56]	; (394d4 <k_mem_pool_free_id+0xb0>)
   3949a:	2362      	movs	r3, #98	; 0x62
   3949c:	4a0a      	ldr	r2, [pc, #40]	; (394c8 <k_mem_pool_free_id+0xa4>)
   3949e:	480b      	ldr	r0, [pc, #44]	; (394cc <k_mem_pool_free_id+0xa8>)
   394a0:	f005 ffd1 	bl	3f446 <printk>
   394a4:	480c      	ldr	r0, [pc, #48]	; (394d8 <k_mem_pool_free_id+0xb4>)
   394a6:	f005 ffce 	bl	3f446 <printk>
   394aa:	2162      	movs	r1, #98	; 0x62
   394ac:	4806      	ldr	r0, [pc, #24]	; (394c8 <k_mem_pool_free_id+0xa4>)
   394ae:	f005 ffd7 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   394b2:	f386 8811 	msr	BASEPRI, r6
   394b6:	f3bf 8f6f 	isb	sy
}
   394ba:	bd70      	pop	{r4, r5, r6, pc}
   394bc:	20031f8c 	.word	0x20031f8c
   394c0:	2002a1d0 	.word	0x2002a1d0
   394c4:	00045d2d 	.word	0x00045d2d
   394c8:	00045d0e 	.word	0x00045d0e
   394cc:	00045316 	.word	0x00045316
   394d0:	00045d42 	.word	0x00045d42
   394d4:	00045d57 	.word	0x00045d57
   394d8:	00045d6e 	.word	0x00045d6e

000394dc <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   394dc:	4601      	mov	r1, r0
   394de:	4801      	ldr	r0, [pc, #4]	; (394e4 <k_malloc+0x8>)
   394e0:	f008 b8d3 	b.w	4168a <k_mem_pool_malloc>
   394e4:	20031f8c 	.word	0x20031f8c

000394e8 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   394e8:	4b03      	ldr	r3, [pc, #12]	; (394f8 <z_thread_malloc+0x10>)
{
   394ea:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   394ec:	689b      	ldr	r3, [r3, #8]
   394ee:	6e18      	ldr	r0, [r3, #96]	; 0x60
   394f0:	b108      	cbz	r0, 394f6 <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   394f2:	f008 b8ca 	b.w	4168a <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   394f6:	4770      	bx	lr
   394f8:	2002a1d8 	.word	0x2002a1d8

000394fc <z_impl_k_msgq_put>:
	}
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
   394fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39500:	4604      	mov	r4, r0
   39502:	4688      	mov	r8, r1
   39504:	4615      	mov	r5, r2
   39506:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || timeout == K_NO_WAIT, "");
   3950a:	b16b      	cbz	r3, 39528 <z_impl_k_msgq_put+0x2c>
   3950c:	b162      	cbz	r2, 39528 <z_impl_k_msgq_put+0x2c>
   3950e:	4940      	ldr	r1, [pc, #256]	; (39610 <z_impl_k_msgq_put+0x114>)
   39510:	2372      	movs	r3, #114	; 0x72
   39512:	4a40      	ldr	r2, [pc, #256]	; (39614 <z_impl_k_msgq_put+0x118>)
   39514:	4840      	ldr	r0, [pc, #256]	; (39618 <z_impl_k_msgq_put+0x11c>)
   39516:	f005 ff96 	bl	3f446 <printk>
   3951a:	4840      	ldr	r0, [pc, #256]	; (3961c <z_impl_k_msgq_put+0x120>)
   3951c:	f005 ff93 	bl	3f446 <printk>
   39520:	2172      	movs	r1, #114	; 0x72
   39522:	483c      	ldr	r0, [pc, #240]	; (39614 <z_impl_k_msgq_put+0x118>)
   39524:	f005 ff9c 	bl	3f460 <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   39528:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   3952c:	f04f 0320 	mov.w	r3, #32
   39530:	f3ef 8711 	mrs	r7, BASEPRI
   39534:	f383 8811 	msr	BASEPRI, r3
   39538:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3953c:	4630      	mov	r0, r6
   3953e:	f001 fda1 	bl	3b084 <z_spin_lock_valid>
   39542:	b960      	cbnz	r0, 3955e <z_impl_k_msgq_put+0x62>
   39544:	4936      	ldr	r1, [pc, #216]	; (39620 <z_impl_k_msgq_put+0x124>)
   39546:	234f      	movs	r3, #79	; 0x4f
   39548:	4a36      	ldr	r2, [pc, #216]	; (39624 <z_impl_k_msgq_put+0x128>)
   3954a:	4833      	ldr	r0, [pc, #204]	; (39618 <z_impl_k_msgq_put+0x11c>)
   3954c:	f005 ff7b 	bl	3f446 <printk>
   39550:	4835      	ldr	r0, [pc, #212]	; (39628 <z_impl_k_msgq_put+0x12c>)
   39552:	f005 ff78 	bl	3f446 <printk>
   39556:	214f      	movs	r1, #79	; 0x4f
   39558:	4832      	ldr	r0, [pc, #200]	; (39624 <z_impl_k_msgq_put+0x128>)
   3955a:	f005 ff81 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3955e:	4630      	mov	r0, r6
   39560:	f001 fdae 	bl	3b0c0 <z_spin_lock_set_owner>

	if (msgq->used_msgs < msgq->max_msgs) {
   39564:	6a62      	ldr	r2, [r4, #36]	; 0x24
   39566:	6923      	ldr	r3, [r4, #16]
   39568:	429a      	cmp	r2, r3
   3956a:	d241      	bcs.n	395f0 <z_impl_k_msgq_put+0xf4>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   3956c:	4620      	mov	r0, r4
   3956e:	f001 fa5d 	bl	3aa2c <z_unpend_first_thread>
		if (pending_thread != NULL) {
   39572:	68e2      	ldr	r2, [r4, #12]
   39574:	4605      	mov	r5, r0
   39576:	4641      	mov	r1, r8
   39578:	b1a0      	cbz	r0, 395a4 <z_impl_k_msgq_put+0xa8>
   3957a:	6940      	ldr	r0, [r0, #20]
   3957c:	f008 fa19 	bl	419b2 <memcpy>
   39580:	2300      	movs	r3, #0
   39582:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   39584:	7b6b      	ldrb	r3, [r5, #13]
   39586:	06db      	lsls	r3, r3, #27
   39588:	d104      	bne.n	39594 <z_impl_k_msgq_put+0x98>
	if (z_is_thread_ready(thread)) {
   3958a:	69ab      	ldr	r3, [r5, #24]
   3958c:	b913      	cbnz	r3, 39594 <z_impl_k_msgq_put+0x98>
		z_add_thread_to_ready_q(thread);
   3958e:	4628      	mov	r0, r5
   39590:	f000 feca 	bl	3a328 <z_add_thread_to_ready_q>
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   39594:	4639      	mov	r1, r7
   39596:	4630      	mov	r0, r6
   39598:	f000 fce4 	bl	39f64 <z_reschedule>
			return 0;
   3959c:	2400      	movs	r4, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   3959e:	4620      	mov	r0, r4
   395a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   395a4:	6a20      	ldr	r0, [r4, #32]
   395a6:	f008 fa04 	bl	419b2 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   395aa:	6a23      	ldr	r3, [r4, #32]
   395ac:	68e2      	ldr	r2, [r4, #12]
   395ae:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   395b0:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   395b2:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   395b4:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   395b6:	bf04      	itt	eq
   395b8:	6963      	ldreq	r3, [r4, #20]
   395ba:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   395bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   395be:	3301      	adds	r3, #1
   395c0:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
   395c2:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   395c4:	4630      	mov	r0, r6
   395c6:	f001 fd6b 	bl	3b0a0 <z_spin_unlock_valid>
   395ca:	b960      	cbnz	r0, 395e6 <z_impl_k_msgq_put+0xea>
   395cc:	4917      	ldr	r1, [pc, #92]	; (3962c <z_impl_k_msgq_put+0x130>)
   395ce:	2362      	movs	r3, #98	; 0x62
   395d0:	4a14      	ldr	r2, [pc, #80]	; (39624 <z_impl_k_msgq_put+0x128>)
   395d2:	4811      	ldr	r0, [pc, #68]	; (39618 <z_impl_k_msgq_put+0x11c>)
   395d4:	f005 ff37 	bl	3f446 <printk>
   395d8:	4815      	ldr	r0, [pc, #84]	; (39630 <z_impl_k_msgq_put+0x134>)
   395da:	f005 ff34 	bl	3f446 <printk>
   395de:	2162      	movs	r1, #98	; 0x62
   395e0:	4810      	ldr	r0, [pc, #64]	; (39624 <z_impl_k_msgq_put+0x128>)
   395e2:	f005 ff3d 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   395e6:	f387 8811 	msr	BASEPRI, r7
   395ea:	f3bf 8f6f 	isb	sy
	return result;
   395ee:	e7d6      	b.n	3959e <z_impl_k_msgq_put+0xa2>
	} else if (timeout == K_NO_WAIT) {
   395f0:	b15d      	cbz	r5, 3960a <z_impl_k_msgq_put+0x10e>
		_current->base.swap_data = data;
   395f2:	4b10      	ldr	r3, [pc, #64]	; (39634 <z_impl_k_msgq_put+0x138>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   395f4:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   395f6:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   395f8:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   395fa:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   395fe:	4630      	mov	r0, r6
   39600:	462b      	mov	r3, r5
}
   39602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   39606:	f001 b957 	b.w	3a8b8 <z_pend_curr>
		result = -ENOMSG;
   3960a:	f06f 0422 	mvn.w	r4, #34	; 0x22
   3960e:	e7d9      	b.n	395c4 <z_impl_k_msgq_put+0xc8>
   39610:	0004a1cb 	.word	0x0004a1cb
   39614:	0004a185 	.word	0x0004a185
   39618:	00045316 	.word	0x00045316
   3961c:	0004a182 	.word	0x0004a182
   39620:	00045d2d 	.word	0x00045d2d
   39624:	00045d0e 	.word	0x00045d0e
   39628:	00045d42 	.word	0x00045d42
   3962c:	00045d57 	.word	0x00045d57
   39630:	00045d6e 	.word	0x00045d6e
   39634:	2002a1d8 	.word	0x2002a1d8

00039638 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
   39638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3963c:	4604      	mov	r4, r0
   3963e:	4688      	mov	r8, r1
   39640:	4615      	mov	r5, r2
   39642:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || timeout == K_NO_WAIT, "");
   39646:	b16b      	cbz	r3, 39664 <z_impl_k_msgq_get+0x2c>
   39648:	b162      	cbz	r2, 39664 <z_impl_k_msgq_get+0x2c>
   3964a:	4946      	ldr	r1, [pc, #280]	; (39764 <z_impl_k_msgq_get+0x12c>)
   3964c:	23bd      	movs	r3, #189	; 0xbd
   3964e:	4a46      	ldr	r2, [pc, #280]	; (39768 <z_impl_k_msgq_get+0x130>)
   39650:	4846      	ldr	r0, [pc, #280]	; (3976c <z_impl_k_msgq_get+0x134>)
   39652:	f005 fef8 	bl	3f446 <printk>
   39656:	4846      	ldr	r0, [pc, #280]	; (39770 <z_impl_k_msgq_get+0x138>)
   39658:	f005 fef5 	bl	3f446 <printk>
   3965c:	21bd      	movs	r1, #189	; 0xbd
   3965e:	4842      	ldr	r0, [pc, #264]	; (39768 <z_impl_k_msgq_get+0x130>)
   39660:	f005 fefe 	bl	3f460 <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   39664:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   39668:	f04f 0320 	mov.w	r3, #32
   3966c:	f3ef 8711 	mrs	r7, BASEPRI
   39670:	f383 8811 	msr	BASEPRI, r3
   39674:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   39678:	4630      	mov	r0, r6
   3967a:	f001 fd03 	bl	3b084 <z_spin_lock_valid>
   3967e:	b960      	cbnz	r0, 3969a <z_impl_k_msgq_get+0x62>
   39680:	493c      	ldr	r1, [pc, #240]	; (39774 <z_impl_k_msgq_get+0x13c>)
   39682:	234f      	movs	r3, #79	; 0x4f
   39684:	4a3c      	ldr	r2, [pc, #240]	; (39778 <z_impl_k_msgq_get+0x140>)
   39686:	4839      	ldr	r0, [pc, #228]	; (3976c <z_impl_k_msgq_get+0x134>)
   39688:	f005 fedd 	bl	3f446 <printk>
   3968c:	483b      	ldr	r0, [pc, #236]	; (3977c <z_impl_k_msgq_get+0x144>)
   3968e:	f005 feda 	bl	3f446 <printk>
   39692:	214f      	movs	r1, #79	; 0x4f
   39694:	4838      	ldr	r0, [pc, #224]	; (39778 <z_impl_k_msgq_get+0x140>)
   39696:	f005 fee3 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3969a:	4630      	mov	r0, r6
   3969c:	f001 fd10 	bl	3b0c0 <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0) {
   396a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   396a2:	2b00      	cmp	r3, #0
   396a4:	d039      	beq.n	3971a <z_impl_k_msgq_get+0xe2>
   396a6:	68e2      	ldr	r2, [r4, #12]
   396a8:	69e1      	ldr	r1, [r4, #28]
   396aa:	4640      	mov	r0, r8
   396ac:	f008 f981 	bl	419b2 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   396b0:	69e3      	ldr	r3, [r4, #28]
   396b2:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   396b4:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   396b6:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   396b8:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   396ba:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   396bc:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   396be:	bf04      	itt	eq
   396c0:	6963      	ldreq	r3, [r4, #20]
   396c2:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   396c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   396c6:	3b01      	subs	r3, #1
   396c8:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   396ca:	f001 f9af 	bl	3aa2c <z_unpend_first_thread>
		if (pending_thread != NULL) {
   396ce:	4605      	mov	r5, r0
   396d0:	2800      	cmp	r0, #0
   396d2:	d031      	beq.n	39738 <z_impl_k_msgq_get+0x100>
   396d4:	68e2      	ldr	r2, [r4, #12]
   396d6:	6941      	ldr	r1, [r0, #20]
   396d8:	6a20      	ldr	r0, [r4, #32]
   396da:	f008 f96a 	bl	419b2 <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   396de:	6a23      	ldr	r3, [r4, #32]
   396e0:	68e2      	ldr	r2, [r4, #12]
   396e2:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   396e4:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   396e6:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   396e8:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   396ea:	bf04      	itt	eq
   396ec:	6963      	ldreq	r3, [r4, #20]
   396ee:	6223      	streq	r3, [r4, #32]
			}
			msgq->used_msgs++;
   396f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   396f2:	3301      	adds	r3, #1
   396f4:	6263      	str	r3, [r4, #36]	; 0x24
   396f6:	2300      	movs	r3, #0
   396f8:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   396fa:	7b6b      	ldrb	r3, [r5, #13]
   396fc:	06db      	lsls	r3, r3, #27
   396fe:	d104      	bne.n	3970a <z_impl_k_msgq_get+0xd2>
	if (z_is_thread_ready(thread)) {
   39700:	69ab      	ldr	r3, [r5, #24]
   39702:	b913      	cbnz	r3, 3970a <z_impl_k_msgq_get+0xd2>
		z_add_thread_to_ready_q(thread);
   39704:	4628      	mov	r0, r5
   39706:	f000 fe0f 	bl	3a328 <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   3970a:	4639      	mov	r1, r7
   3970c:	4630      	mov	r0, r6
   3970e:	f000 fc29 	bl	39f64 <z_reschedule>
			return 0;
   39712:	2500      	movs	r5, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   39714:	4628      	mov	r0, r5
   39716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   3971a:	b15d      	cbz	r5, 39734 <z_impl_k_msgq_get+0xfc>
		_current->base.swap_data = data;
   3971c:	4b18      	ldr	r3, [pc, #96]	; (39780 <z_impl_k_msgq_get+0x148>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3971e:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   39720:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   39722:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   39724:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   39728:	4630      	mov	r0, r6
   3972a:	462b      	mov	r3, r5
}
   3972c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   39730:	f001 b8c2 	b.w	3a8b8 <z_pend_curr>
		result = -ENOMSG;
   39734:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   39738:	4630      	mov	r0, r6
   3973a:	f001 fcb1 	bl	3b0a0 <z_spin_unlock_valid>
   3973e:	b960      	cbnz	r0, 3975a <z_impl_k_msgq_get+0x122>
   39740:	4910      	ldr	r1, [pc, #64]	; (39784 <z_impl_k_msgq_get+0x14c>)
   39742:	2362      	movs	r3, #98	; 0x62
   39744:	4a0c      	ldr	r2, [pc, #48]	; (39778 <z_impl_k_msgq_get+0x140>)
   39746:	4809      	ldr	r0, [pc, #36]	; (3976c <z_impl_k_msgq_get+0x134>)
   39748:	f005 fe7d 	bl	3f446 <printk>
   3974c:	480e      	ldr	r0, [pc, #56]	; (39788 <z_impl_k_msgq_get+0x150>)
   3974e:	f005 fe7a 	bl	3f446 <printk>
   39752:	2162      	movs	r1, #98	; 0x62
   39754:	4808      	ldr	r0, [pc, #32]	; (39778 <z_impl_k_msgq_get+0x140>)
   39756:	f005 fe83 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3975a:	f387 8811 	msr	BASEPRI, r7
   3975e:	f3bf 8f6f 	isb	sy
	return result;
   39762:	e7d7      	b.n	39714 <z_impl_k_msgq_get+0xdc>
   39764:	0004a1cb 	.word	0x0004a1cb
   39768:	0004a185 	.word	0x0004a185
   3976c:	00045316 	.word	0x00045316
   39770:	0004a182 	.word	0x0004a182
   39774:	00045d2d 	.word	0x00045d2d
   39778:	00045d0e 	.word	0x00045d0e
   3977c:	00045d42 	.word	0x00045d42
   39780:	2002a1d8 	.word	0x2002a1d8
   39784:	00045d57 	.word	0x00045d57
   39788:	00045d6e 	.word	0x00045d6e

0003978c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   3978c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3978e:	4604      	mov	r4, r0
   39790:	460e      	mov	r6, r1
	__asm__ volatile(
   39792:	f04f 0320 	mov.w	r3, #32
   39796:	f3ef 8511 	mrs	r5, BASEPRI
   3979a:	f383 8811 	msr	BASEPRI, r3
   3979e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   397a2:	485f      	ldr	r0, [pc, #380]	; (39920 <z_impl_k_mutex_lock+0x194>)
   397a4:	f001 fc6e 	bl	3b084 <z_spin_lock_valid>
   397a8:	b960      	cbnz	r0, 397c4 <z_impl_k_mutex_lock+0x38>
   397aa:	495e      	ldr	r1, [pc, #376]	; (39924 <z_impl_k_mutex_lock+0x198>)
   397ac:	234f      	movs	r3, #79	; 0x4f
   397ae:	4a5e      	ldr	r2, [pc, #376]	; (39928 <z_impl_k_mutex_lock+0x19c>)
   397b0:	485e      	ldr	r0, [pc, #376]	; (3992c <z_impl_k_mutex_lock+0x1a0>)
   397b2:	f005 fe48 	bl	3f446 <printk>
   397b6:	485e      	ldr	r0, [pc, #376]	; (39930 <z_impl_k_mutex_lock+0x1a4>)
   397b8:	f005 fe45 	bl	3f446 <printk>
   397bc:	214f      	movs	r1, #79	; 0x4f
   397be:	485a      	ldr	r0, [pc, #360]	; (39928 <z_impl_k_mutex_lock+0x19c>)
   397c0:	f005 fe4e 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   397c4:	4856      	ldr	r0, [pc, #344]	; (39920 <z_impl_k_mutex_lock+0x194>)
   397c6:	f001 fc7b 	bl	3b0c0 <z_spin_lock_set_owner>
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   397ca:	68e3      	ldr	r3, [r4, #12]
   397cc:	4a59      	ldr	r2, [pc, #356]	; (39934 <z_impl_k_mutex_lock+0x1a8>)
   397ce:	b1eb      	cbz	r3, 3980c <z_impl_k_mutex_lock+0x80>
   397d0:	68a0      	ldr	r0, [r4, #8]
   397d2:	6891      	ldr	r1, [r2, #8]
   397d4:	4288      	cmp	r0, r1
   397d6:	d038      	beq.n	3984a <z_impl_k_mutex_lock+0xbe>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   397d8:	2e00      	cmp	r6, #0
   397da:	d138      	bne.n	3984e <z_impl_k_mutex_lock+0xc2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   397dc:	4850      	ldr	r0, [pc, #320]	; (39920 <z_impl_k_mutex_lock+0x194>)
   397de:	f001 fc5f 	bl	3b0a0 <z_spin_unlock_valid>
   397e2:	b960      	cbnz	r0, 397fe <z_impl_k_mutex_lock+0x72>
   397e4:	4954      	ldr	r1, [pc, #336]	; (39938 <z_impl_k_mutex_lock+0x1ac>)
   397e6:	2362      	movs	r3, #98	; 0x62
   397e8:	4a4f      	ldr	r2, [pc, #316]	; (39928 <z_impl_k_mutex_lock+0x19c>)
   397ea:	4850      	ldr	r0, [pc, #320]	; (3992c <z_impl_k_mutex_lock+0x1a0>)
   397ec:	f005 fe2b 	bl	3f446 <printk>
   397f0:	4852      	ldr	r0, [pc, #328]	; (3993c <z_impl_k_mutex_lock+0x1b0>)
   397f2:	f005 fe28 	bl	3f446 <printk>
   397f6:	2162      	movs	r1, #98	; 0x62
   397f8:	484b      	ldr	r0, [pc, #300]	; (39928 <z_impl_k_mutex_lock+0x19c>)
   397fa:	f005 fe31 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   397fe:	f385 8811 	msr	BASEPRI, r5
   39802:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   39806:	f06f 000f 	mvn.w	r0, #15
   3980a:	e01d      	b.n	39848 <z_impl_k_mutex_lock+0xbc>
					_current->base.prio :
   3980c:	6891      	ldr	r1, [r2, #8]
   3980e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   39812:	3301      	adds	r3, #1
   39814:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   39816:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   39818:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   3981a:	60a3      	str	r3, [r4, #8]
   3981c:	4840      	ldr	r0, [pc, #256]	; (39920 <z_impl_k_mutex_lock+0x194>)
   3981e:	f001 fc3f 	bl	3b0a0 <z_spin_unlock_valid>
   39822:	b960      	cbnz	r0, 3983e <z_impl_k_mutex_lock+0xb2>
   39824:	4944      	ldr	r1, [pc, #272]	; (39938 <z_impl_k_mutex_lock+0x1ac>)
   39826:	2362      	movs	r3, #98	; 0x62
   39828:	4a3f      	ldr	r2, [pc, #252]	; (39928 <z_impl_k_mutex_lock+0x19c>)
   3982a:	4840      	ldr	r0, [pc, #256]	; (3992c <z_impl_k_mutex_lock+0x1a0>)
   3982c:	f005 fe0b 	bl	3f446 <printk>
   39830:	4842      	ldr	r0, [pc, #264]	; (3993c <z_impl_k_mutex_lock+0x1b0>)
   39832:	f005 fe08 	bl	3f446 <printk>
   39836:	2162      	movs	r1, #98	; 0x62
   39838:	483b      	ldr	r0, [pc, #236]	; (39928 <z_impl_k_mutex_lock+0x19c>)
   3983a:	f005 fe11 	bl	3f460 <assert_post_action>
   3983e:	f385 8811 	msr	BASEPRI, r5
   39842:	f3bf 8f6f 	isb	sy
		return 0;
   39846:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   39848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   3984a:	6921      	ldr	r1, [r4, #16]
   3984c:	e7e1      	b.n	39812 <z_impl_k_mutex_lock+0x86>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   3984e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   39852:	f991 100e 	ldrsb.w	r1, [r1, #14]
   39856:	4299      	cmp	r1, r3
   39858:	bfa8      	it	ge
   3985a:	4619      	movge	r1, r3
   3985c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   39860:	4299      	cmp	r1, r3
   39862:	da3f      	bge.n	398e4 <z_impl_k_mutex_lock+0x158>
		return z_set_prio(mutex->owner, new_prio);
   39864:	f001 f856 	bl	3a914 <z_set_prio>
   39868:	4607      	mov	r7, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   3986a:	4633      	mov	r3, r6
   3986c:	4622      	mov	r2, r4
   3986e:	4629      	mov	r1, r5
   39870:	482b      	ldr	r0, [pc, #172]	; (39920 <z_impl_k_mutex_lock+0x194>)
   39872:	f001 f821 	bl	3a8b8 <z_pend_curr>
	if (got_mutex == 0) {
   39876:	2800      	cmp	r0, #0
   39878:	d0e6      	beq.n	39848 <z_impl_k_mutex_lock+0xbc>
	__asm__ volatile(
   3987a:	f04f 0320 	mov.w	r3, #32
   3987e:	f3ef 8511 	mrs	r5, BASEPRI
   39882:	f383 8811 	msr	BASEPRI, r3
   39886:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3988a:	4825      	ldr	r0, [pc, #148]	; (39920 <z_impl_k_mutex_lock+0x194>)
   3988c:	f001 fbfa 	bl	3b084 <z_spin_lock_valid>
   39890:	b960      	cbnz	r0, 398ac <z_impl_k_mutex_lock+0x120>
   39892:	4924      	ldr	r1, [pc, #144]	; (39924 <z_impl_k_mutex_lock+0x198>)
   39894:	234f      	movs	r3, #79	; 0x4f
   39896:	4a24      	ldr	r2, [pc, #144]	; (39928 <z_impl_k_mutex_lock+0x19c>)
   39898:	4824      	ldr	r0, [pc, #144]	; (3992c <z_impl_k_mutex_lock+0x1a0>)
   3989a:	f005 fdd4 	bl	3f446 <printk>
   3989e:	4824      	ldr	r0, [pc, #144]	; (39930 <z_impl_k_mutex_lock+0x1a4>)
   398a0:	f005 fdd1 	bl	3f446 <printk>
   398a4:	214f      	movs	r1, #79	; 0x4f
   398a6:	4820      	ldr	r0, [pc, #128]	; (39928 <z_impl_k_mutex_lock+0x19c>)
   398a8:	f005 fdda 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   398ac:	481c      	ldr	r0, [pc, #112]	; (39920 <z_impl_k_mutex_lock+0x194>)
   398ae:	f001 fc07 	bl	3b0c0 <z_spin_lock_set_owner>
	return list->head == list;
   398b2:	6823      	ldr	r3, [r4, #0]
   398b4:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   398b6:	429c      	cmp	r4, r3
   398b8:	d007      	beq.n	398ca <z_impl_k_mutex_lock+0x13e>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
   398ba:	b133      	cbz	r3, 398ca <z_impl_k_mutex_lock+0x13e>
   398bc:	f993 300e 	ldrsb.w	r3, [r3, #14]
   398c0:	4299      	cmp	r1, r3
   398c2:	bfa8      	it	ge
   398c4:	4619      	movge	r1, r3
   398c6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   398ca:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   398cc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   398d0:	4299      	cmp	r1, r3
   398d2:	d109      	bne.n	398e8 <z_impl_k_mutex_lock+0x15c>
	if (resched) {
   398d4:	b16f      	cbz	r7, 398f2 <z_impl_k_mutex_lock+0x166>
		z_reschedule(&lock, key);
   398d6:	4629      	mov	r1, r5
   398d8:	4811      	ldr	r0, [pc, #68]	; (39920 <z_impl_k_mutex_lock+0x194>)
   398da:	f000 fb43 	bl	39f64 <z_reschedule>
	return -EAGAIN;
   398de:	f06f 000a 	mvn.w	r0, #10
   398e2:	e7b1      	b.n	39848 <z_impl_k_mutex_lock+0xbc>
	bool resched = false;
   398e4:	2700      	movs	r7, #0
   398e6:	e7c0      	b.n	3986a <z_impl_k_mutex_lock+0xde>
		return z_set_prio(mutex->owner, new_prio);
   398e8:	f001 f814 	bl	3a914 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   398ec:	2800      	cmp	r0, #0
   398ee:	d1f2      	bne.n	398d6 <z_impl_k_mutex_lock+0x14a>
   398f0:	e7f0      	b.n	398d4 <z_impl_k_mutex_lock+0x148>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   398f2:	480b      	ldr	r0, [pc, #44]	; (39920 <z_impl_k_mutex_lock+0x194>)
   398f4:	f001 fbd4 	bl	3b0a0 <z_spin_unlock_valid>
   398f8:	b960      	cbnz	r0, 39914 <z_impl_k_mutex_lock+0x188>
   398fa:	490f      	ldr	r1, [pc, #60]	; (39938 <z_impl_k_mutex_lock+0x1ac>)
   398fc:	2362      	movs	r3, #98	; 0x62
   398fe:	4a0a      	ldr	r2, [pc, #40]	; (39928 <z_impl_k_mutex_lock+0x19c>)
   39900:	480a      	ldr	r0, [pc, #40]	; (3992c <z_impl_k_mutex_lock+0x1a0>)
   39902:	f005 fda0 	bl	3f446 <printk>
   39906:	480d      	ldr	r0, [pc, #52]	; (3993c <z_impl_k_mutex_lock+0x1b0>)
   39908:	f005 fd9d 	bl	3f446 <printk>
   3990c:	2162      	movs	r1, #98	; 0x62
   3990e:	4806      	ldr	r0, [pc, #24]	; (39928 <z_impl_k_mutex_lock+0x19c>)
   39910:	f005 fda6 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   39914:	f385 8811 	msr	BASEPRI, r5
   39918:	f3bf 8f6f 	isb	sy
   3991c:	e7df      	b.n	398de <z_impl_k_mutex_lock+0x152>
   3991e:	bf00      	nop
   39920:	2002a1d4 	.word	0x2002a1d4
   39924:	00045d2d 	.word	0x00045d2d
   39928:	00045d0e 	.word	0x00045d0e
   3992c:	00045316 	.word	0x00045316
   39930:	00045d42 	.word	0x00045d42
   39934:	2002a1d8 	.word	0x2002a1d8
   39938:	00045d57 	.word	0x00045d57
   3993c:	00045d6e 	.word	0x00045d6e

00039940 <z_impl_k_mutex_unlock>:

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
	struct k_thread *new_owner;

	__ASSERT(mutex->lock_count > 0U, "");
   39940:	68c3      	ldr	r3, [r0, #12]
{
   39942:	b570      	push	{r4, r5, r6, lr}
   39944:	4604      	mov	r4, r0
	__ASSERT(mutex->lock_count > 0U, "");
   39946:	b963      	cbnz	r3, 39962 <z_impl_k_mutex_unlock+0x22>
   39948:	4959      	ldr	r1, [pc, #356]	; (39ab0 <z_impl_k_mutex_unlock+0x170>)
   3994a:	23d3      	movs	r3, #211	; 0xd3
   3994c:	4a59      	ldr	r2, [pc, #356]	; (39ab4 <z_impl_k_mutex_unlock+0x174>)
   3994e:	485a      	ldr	r0, [pc, #360]	; (39ab8 <z_impl_k_mutex_unlock+0x178>)
   39950:	f005 fd79 	bl	3f446 <printk>
   39954:	4859      	ldr	r0, [pc, #356]	; (39abc <z_impl_k_mutex_unlock+0x17c>)
   39956:	f005 fd76 	bl	3f446 <printk>
   3995a:	21d3      	movs	r1, #211	; 0xd3
   3995c:	4855      	ldr	r0, [pc, #340]	; (39ab4 <z_impl_k_mutex_unlock+0x174>)
   3995e:	f005 fd7f 	bl	3f460 <assert_post_action>
	__ASSERT(mutex->owner == _current, "");
   39962:	4d57      	ldr	r5, [pc, #348]	; (39ac0 <z_impl_k_mutex_unlock+0x180>)
   39964:	68a2      	ldr	r2, [r4, #8]
   39966:	68ab      	ldr	r3, [r5, #8]
   39968:	429a      	cmp	r2, r3
   3996a:	d00c      	beq.n	39986 <z_impl_k_mutex_unlock+0x46>
   3996c:	4955      	ldr	r1, [pc, #340]	; (39ac4 <z_impl_k_mutex_unlock+0x184>)
   3996e:	23d4      	movs	r3, #212	; 0xd4
   39970:	4a50      	ldr	r2, [pc, #320]	; (39ab4 <z_impl_k_mutex_unlock+0x174>)
   39972:	4851      	ldr	r0, [pc, #324]	; (39ab8 <z_impl_k_mutex_unlock+0x178>)
   39974:	f005 fd67 	bl	3f446 <printk>
   39978:	4850      	ldr	r0, [pc, #320]	; (39abc <z_impl_k_mutex_unlock+0x17c>)
   3997a:	f005 fd64 	bl	3f446 <printk>
   3997e:	21d4      	movs	r1, #212	; 0xd4
   39980:	484c      	ldr	r0, [pc, #304]	; (39ab4 <z_impl_k_mutex_unlock+0x174>)
   39982:	f005 fd6d 	bl	3f460 <assert_post_action>
   39986:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   3998a:	b173      	cbz	r3, 399aa <z_impl_k_mutex_unlock+0x6a>
   3998c:	494e      	ldr	r1, [pc, #312]	; (39ac8 <z_impl_k_mutex_unlock+0x188>)
   3998e:	f44f 7386 	mov.w	r3, #268	; 0x10c
   39992:	4a4e      	ldr	r2, [pc, #312]	; (39acc <z_impl_k_mutex_unlock+0x18c>)
   39994:	4848      	ldr	r0, [pc, #288]	; (39ab8 <z_impl_k_mutex_unlock+0x178>)
   39996:	f005 fd56 	bl	3f446 <printk>
   3999a:	4848      	ldr	r0, [pc, #288]	; (39abc <z_impl_k_mutex_unlock+0x17c>)
   3999c:	f005 fd53 	bl	3f446 <printk>
   399a0:	f44f 7186 	mov.w	r1, #268	; 0x10c
   399a4:	4849      	ldr	r0, [pc, #292]	; (39acc <z_impl_k_mutex_unlock+0x18c>)
   399a6:	f005 fd5b 	bl	3f460 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   399aa:	68ab      	ldr	r3, [r5, #8]
   399ac:	7bdb      	ldrb	r3, [r3, #15]
   399ae:	2b01      	cmp	r3, #1
   399b0:	d10e      	bne.n	399d0 <z_impl_k_mutex_unlock+0x90>
   399b2:	4947      	ldr	r1, [pc, #284]	; (39ad0 <z_impl_k_mutex_unlock+0x190>)
   399b4:	f240 130d 	movw	r3, #269	; 0x10d
   399b8:	4a44      	ldr	r2, [pc, #272]	; (39acc <z_impl_k_mutex_unlock+0x18c>)
   399ba:	483f      	ldr	r0, [pc, #252]	; (39ab8 <z_impl_k_mutex_unlock+0x178>)
   399bc:	f005 fd43 	bl	3f446 <printk>
   399c0:	483e      	ldr	r0, [pc, #248]	; (39abc <z_impl_k_mutex_unlock+0x17c>)
   399c2:	f005 fd40 	bl	3f446 <printk>
   399c6:	f240 110d 	movw	r1, #269	; 0x10d
   399ca:	4840      	ldr	r0, [pc, #256]	; (39acc <z_impl_k_mutex_unlock+0x18c>)
   399cc:	f005 fd48 	bl	3f460 <assert_post_action>

	--_current->base.sched_locked;
   399d0:	68aa      	ldr	r2, [r5, #8]
   399d2:	7bd3      	ldrb	r3, [r2, #15]
   399d4:	3b01      	subs	r3, #1
   399d6:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
   399d8:	68e3      	ldr	r3, [r4, #12]
   399da:	2b01      	cmp	r3, #1
   399dc:	d005      	beq.n	399ea <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
   399de:	3b01      	subs	r3, #1
   399e0:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
   399e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   399e6:	f000 bc25 	b.w	3a234 <k_sched_unlock>
	__asm__ volatile(
   399ea:	f04f 0320 	mov.w	r3, #32
   399ee:	f3ef 8611 	mrs	r6, BASEPRI
   399f2:	f383 8811 	msr	BASEPRI, r3
   399f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   399fa:	4836      	ldr	r0, [pc, #216]	; (39ad4 <z_impl_k_mutex_unlock+0x194>)
   399fc:	f001 fb42 	bl	3b084 <z_spin_lock_valid>
   39a00:	b960      	cbnz	r0, 39a1c <z_impl_k_mutex_unlock+0xdc>
   39a02:	4935      	ldr	r1, [pc, #212]	; (39ad8 <z_impl_k_mutex_unlock+0x198>)
   39a04:	234f      	movs	r3, #79	; 0x4f
   39a06:	4a35      	ldr	r2, [pc, #212]	; (39adc <z_impl_k_mutex_unlock+0x19c>)
   39a08:	482b      	ldr	r0, [pc, #172]	; (39ab8 <z_impl_k_mutex_unlock+0x178>)
   39a0a:	f005 fd1c 	bl	3f446 <printk>
   39a0e:	4834      	ldr	r0, [pc, #208]	; (39ae0 <z_impl_k_mutex_unlock+0x1a0>)
   39a10:	f005 fd19 	bl	3f446 <printk>
   39a14:	214f      	movs	r1, #79	; 0x4f
   39a16:	4831      	ldr	r0, [pc, #196]	; (39adc <z_impl_k_mutex_unlock+0x19c>)
   39a18:	f005 fd22 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   39a1c:	482d      	ldr	r0, [pc, #180]	; (39ad4 <z_impl_k_mutex_unlock+0x194>)
   39a1e:	f001 fb4f 	bl	3b0c0 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   39a22:	68a0      	ldr	r0, [r4, #8]
   39a24:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   39a26:	f990 300e 	ldrsb.w	r3, [r0, #14]
   39a2a:	4299      	cmp	r1, r3
   39a2c:	d001      	beq.n	39a32 <z_impl_k_mutex_unlock+0xf2>
		return z_set_prio(mutex->owner, new_prio);
   39a2e:	f000 ff71 	bl	3a914 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   39a32:	4620      	mov	r0, r4
   39a34:	f000 fffa 	bl	3aa2c <z_unpend_first_thread>
   39a38:	4605      	mov	r5, r0
	mutex->owner = new_owner;
   39a3a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   39a3c:	b308      	cbz	r0, 39a82 <z_impl_k_mutex_unlock+0x142>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   39a3e:	7b43      	ldrb	r3, [r0, #13]
   39a40:	06db      	lsls	r3, r3, #27
   39a42:	d103      	bne.n	39a4c <z_impl_k_mutex_unlock+0x10c>
	if (z_is_thread_ready(thread)) {
   39a44:	6983      	ldr	r3, [r0, #24]
   39a46:	b90b      	cbnz	r3, 39a4c <z_impl_k_mutex_unlock+0x10c>
		z_add_thread_to_ready_q(thread);
   39a48:	f000 fc6e 	bl	3a328 <z_add_thread_to_ready_q>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   39a4c:	4821      	ldr	r0, [pc, #132]	; (39ad4 <z_impl_k_mutex_unlock+0x194>)
   39a4e:	f001 fb27 	bl	3b0a0 <z_spin_unlock_valid>
   39a52:	b960      	cbnz	r0, 39a6e <z_impl_k_mutex_unlock+0x12e>
   39a54:	4923      	ldr	r1, [pc, #140]	; (39ae4 <z_impl_k_mutex_unlock+0x1a4>)
   39a56:	2362      	movs	r3, #98	; 0x62
   39a58:	4a20      	ldr	r2, [pc, #128]	; (39adc <z_impl_k_mutex_unlock+0x19c>)
   39a5a:	4817      	ldr	r0, [pc, #92]	; (39ab8 <z_impl_k_mutex_unlock+0x178>)
   39a5c:	f005 fcf3 	bl	3f446 <printk>
   39a60:	4821      	ldr	r0, [pc, #132]	; (39ae8 <z_impl_k_mutex_unlock+0x1a8>)
   39a62:	f005 fcf0 	bl	3f446 <printk>
   39a66:	2162      	movs	r1, #98	; 0x62
   39a68:	481c      	ldr	r0, [pc, #112]	; (39adc <z_impl_k_mutex_unlock+0x19c>)
   39a6a:	f005 fcf9 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   39a6e:	f386 8811 	msr	BASEPRI, r6
   39a72:	f3bf 8f6f 	isb	sy
   39a76:	2300      	movs	r3, #0
   39a78:	66ab      	str	r3, [r5, #104]	; 0x68
		mutex->owner_orig_prio = new_owner->base.prio;
   39a7a:	f995 300e 	ldrsb.w	r3, [r5, #14]
   39a7e:	6123      	str	r3, [r4, #16]
   39a80:	e7af      	b.n	399e2 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
   39a82:	60e0      	str	r0, [r4, #12]
   39a84:	4813      	ldr	r0, [pc, #76]	; (39ad4 <z_impl_k_mutex_unlock+0x194>)
   39a86:	f001 fb0b 	bl	3b0a0 <z_spin_unlock_valid>
   39a8a:	b960      	cbnz	r0, 39aa6 <z_impl_k_mutex_unlock+0x166>
   39a8c:	4915      	ldr	r1, [pc, #84]	; (39ae4 <z_impl_k_mutex_unlock+0x1a4>)
   39a8e:	2362      	movs	r3, #98	; 0x62
   39a90:	4a12      	ldr	r2, [pc, #72]	; (39adc <z_impl_k_mutex_unlock+0x19c>)
   39a92:	4809      	ldr	r0, [pc, #36]	; (39ab8 <z_impl_k_mutex_unlock+0x178>)
   39a94:	f005 fcd7 	bl	3f446 <printk>
   39a98:	4813      	ldr	r0, [pc, #76]	; (39ae8 <z_impl_k_mutex_unlock+0x1a8>)
   39a9a:	f005 fcd4 	bl	3f446 <printk>
   39a9e:	2162      	movs	r1, #98	; 0x62
   39aa0:	480e      	ldr	r0, [pc, #56]	; (39adc <z_impl_k_mutex_unlock+0x19c>)
   39aa2:	f005 fcdd 	bl	3f460 <assert_post_action>
   39aa6:	f386 8811 	msr	BASEPRI, r6
   39aaa:	f3bf 8f6f 	isb	sy
   39aae:	e798      	b.n	399e2 <z_impl_k_mutex_unlock+0xa2>
   39ab0:	0004a208 	.word	0x0004a208
   39ab4:	0004a1ed 	.word	0x0004a1ed
   39ab8:	00045316 	.word	0x00045316
   39abc:	0004a182 	.word	0x0004a182
   39ac0:	2002a1d8 	.word	0x2002a1d8
   39ac4:	0004a21f 	.word	0x0004a21f
   39ac8:	0004a263 	.word	0x0004a263
   39acc:	0004a23f 	.word	0x0004a23f
   39ad0:	0004a275 	.word	0x0004a275
   39ad4:	2002a1d4 	.word	0x2002a1d4
   39ad8:	00045d2d 	.word	0x00045d2d
   39adc:	00045d0e 	.word	0x00045d0e
   39ae0:	00045d42 	.word	0x00045d42
   39ae4:	00045d57 	.word	0x00045d57
   39ae8:	00045d6e 	.word	0x00045d6e

00039aec <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   39aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   39af0:	4604      	mov	r4, r0
   39af2:	460e      	mov	r6, r1
   39af4:	4690      	mov	r8, r2
   39af6:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   39af8:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   39afc:	f04f 0320 	mov.w	r3, #32
   39b00:	f3ef 8711 	mrs	r7, BASEPRI
   39b04:	f383 8811 	msr	BASEPRI, r3
   39b08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   39b0c:	4628      	mov	r0, r5
   39b0e:	f001 fab9 	bl	3b084 <z_spin_lock_valid>
   39b12:	b960      	cbnz	r0, 39b2e <queue_insert+0x42>
   39b14:	4932      	ldr	r1, [pc, #200]	; (39be0 <queue_insert+0xf4>)
   39b16:	234f      	movs	r3, #79	; 0x4f
   39b18:	4a32      	ldr	r2, [pc, #200]	; (39be4 <queue_insert+0xf8>)
   39b1a:	4833      	ldr	r0, [pc, #204]	; (39be8 <queue_insert+0xfc>)
   39b1c:	f005 fc93 	bl	3f446 <printk>
   39b20:	4832      	ldr	r0, [pc, #200]	; (39bec <queue_insert+0x100>)
   39b22:	f005 fc90 	bl	3f446 <printk>
   39b26:	214f      	movs	r1, #79	; 0x4f
   39b28:	482e      	ldr	r0, [pc, #184]	; (39be4 <queue_insert+0xf8>)
   39b2a:	f005 fc99 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   39b2e:	4628      	mov	r0, r5
   39b30:	f001 fac6 	bl	3b0c0 <z_spin_lock_set_owner>
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   39b34:	f1b9 0f00 	cmp.w	r9, #0
   39b38:	d02c      	beq.n	39b94 <queue_insert+0xa8>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   39b3a:	2008      	movs	r0, #8
   39b3c:	f7ff fcd4 	bl	394e8 <z_thread_malloc>
		if (anode == NULL) {
   39b40:	b9c0      	cbnz	r0, 39b74 <queue_insert+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   39b42:	4628      	mov	r0, r5
   39b44:	f001 faac 	bl	3b0a0 <z_spin_unlock_valid>
   39b48:	b960      	cbnz	r0, 39b64 <queue_insert+0x78>
   39b4a:	4929      	ldr	r1, [pc, #164]	; (39bf0 <queue_insert+0x104>)
   39b4c:	2362      	movs	r3, #98	; 0x62
   39b4e:	4a25      	ldr	r2, [pc, #148]	; (39be4 <queue_insert+0xf8>)
   39b50:	4825      	ldr	r0, [pc, #148]	; (39be8 <queue_insert+0xfc>)
   39b52:	f005 fc78 	bl	3f446 <printk>
   39b56:	4827      	ldr	r0, [pc, #156]	; (39bf4 <queue_insert+0x108>)
   39b58:	f005 fc75 	bl	3f446 <printk>
   39b5c:	2162      	movs	r1, #98	; 0x62
   39b5e:	4821      	ldr	r0, [pc, #132]	; (39be4 <queue_insert+0xf8>)
   39b60:	f005 fc7e 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   39b64:	f387 8811 	msr	BASEPRI, r7
   39b68:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   39b6c:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   39b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   39b74:	2301      	movs	r3, #1
		anode->data = data;
   39b76:	f8c0 8004 	str.w	r8, [r0, #4]
   39b7a:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   39b7c:	6803      	ldr	r3, [r0, #0]
   39b7e:	f003 0203 	and.w	r2, r3, #3
   39b82:	b95e      	cbnz	r6, 39b9c <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   39b84:	6823      	ldr	r3, [r4, #0]
   39b86:	4313      	orrs	r3, r2
   39b88:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   39b8a:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   39b8c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   39b8e:	b973      	cbnz	r3, 39bae <queue_insert+0xc2>
	list->tail = node;
   39b90:	6060      	str	r0, [r4, #4]
   39b92:	e00c      	b.n	39bae <queue_insert+0xc2>
	node->next_and_flags = flags;
   39b94:	f8c8 9000 	str.w	r9, [r8]
   39b98:	4640      	mov	r0, r8
   39b9a:	e7ef      	b.n	39b7c <queue_insert+0x90>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   39b9c:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   39b9e:	f033 0303 	bics.w	r3, r3, #3
   39ba2:	d115      	bne.n	39bd0 <queue_insert+0xe4>
	parent->next_and_flags = cur_flags | (unative_t)child;
   39ba4:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   39ba6:	6862      	ldr	r2, [r4, #4]
   39ba8:	b962      	cbnz	r2, 39bc4 <queue_insert+0xd8>
	list->head = node;
   39baa:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   39bae:	2104      	movs	r1, #4
   39bb0:	f104 000c 	add.w	r0, r4, #12
   39bb4:	f007 fece 	bl	41954 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   39bb8:	4628      	mov	r0, r5
   39bba:	4639      	mov	r1, r7
   39bbc:	f000 f9d2 	bl	39f64 <z_reschedule>
	return 0;
   39bc0:	2000      	movs	r0, #0
   39bc2:	e7d5      	b.n	39b70 <queue_insert+0x84>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   39bc4:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   39bc6:	f003 0303 	and.w	r3, r3, #3
   39bca:	4303      	orrs	r3, r0
   39bcc:	6013      	str	r3, [r2, #0]
   39bce:	e7df      	b.n	39b90 <queue_insert+0xa4>
   39bd0:	4313      	orrs	r3, r2
   39bd2:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   39bd4:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   39bd6:	f003 0303 	and.w	r3, r3, #3
   39bda:	4318      	orrs	r0, r3
   39bdc:	6030      	str	r0, [r6, #0]
   39bde:	e7e6      	b.n	39bae <queue_insert+0xc2>
   39be0:	00045d2d 	.word	0x00045d2d
   39be4:	00045d0e 	.word	0x00045d0e
   39be8:	00045316 	.word	0x00045316
   39bec:	00045d42 	.word	0x00045d42
   39bf0:	00045d57 	.word	0x00045d57
   39bf4:	00045d6e 	.word	0x00045d6e

00039bf8 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   39bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39bfc:	4605      	mov	r5, r0
   39bfe:	b089      	sub	sp, #36	; 0x24
   39c00:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   39c02:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   39c06:	f04f 0320 	mov.w	r3, #32
   39c0a:	f3ef 8811 	mrs	r8, BASEPRI
   39c0e:	f383 8811 	msr	BASEPRI, r3
   39c12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   39c16:	4630      	mov	r0, r6
   39c18:	f001 fa34 	bl	3b084 <z_spin_lock_valid>
   39c1c:	b960      	cbnz	r0, 39c38 <z_impl_k_queue_get+0x40>
   39c1e:	495d      	ldr	r1, [pc, #372]	; (39d94 <z_impl_k_queue_get+0x19c>)
   39c20:	234f      	movs	r3, #79	; 0x4f
   39c22:	4a5d      	ldr	r2, [pc, #372]	; (39d98 <z_impl_k_queue_get+0x1a0>)
   39c24:	485d      	ldr	r0, [pc, #372]	; (39d9c <z_impl_k_queue_get+0x1a4>)
   39c26:	f005 fc0e 	bl	3f446 <printk>
   39c2a:	485d      	ldr	r0, [pc, #372]	; (39da0 <z_impl_k_queue_get+0x1a8>)
   39c2c:	f005 fc0b 	bl	3f446 <printk>
   39c30:	214f      	movs	r1, #79	; 0x4f
   39c32:	4859      	ldr	r0, [pc, #356]	; (39d98 <z_impl_k_queue_get+0x1a0>)
   39c34:	f005 fc14 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   39c38:	4630      	mov	r0, r6
   39c3a:	f001 fa41 	bl	3b0c0 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   39c3e:	682c      	ldr	r4, [r5, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   39c40:	b32c      	cbz	r4, 39c8e <z_impl_k_queue_get+0x96>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   39c42:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   39c44:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   39c46:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   39c4a:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   39c4c:	4620      	mov	r0, r4
	list->head = node;
   39c4e:	602b      	str	r3, [r5, #0]
	list->tail = node;
   39c50:	bf08      	it	eq
   39c52:	606b      	streq	r3, [r5, #4]
   39c54:	2101      	movs	r1, #1
   39c56:	f007 fd4b 	bl	416f0 <z_queue_node_peek>
   39c5a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   39c5c:	4630      	mov	r0, r6
   39c5e:	f001 fa1f 	bl	3b0a0 <z_spin_unlock_valid>
   39c62:	b960      	cbnz	r0, 39c7e <z_impl_k_queue_get+0x86>
   39c64:	494f      	ldr	r1, [pc, #316]	; (39da4 <z_impl_k_queue_get+0x1ac>)
   39c66:	2362      	movs	r3, #98	; 0x62
   39c68:	4a4b      	ldr	r2, [pc, #300]	; (39d98 <z_impl_k_queue_get+0x1a0>)
   39c6a:	484c      	ldr	r0, [pc, #304]	; (39d9c <z_impl_k_queue_get+0x1a4>)
   39c6c:	f005 fbeb 	bl	3f446 <printk>
   39c70:	484d      	ldr	r0, [pc, #308]	; (39da8 <z_impl_k_queue_get+0x1b0>)
   39c72:	f005 fbe8 	bl	3f446 <printk>
   39c76:	2162      	movs	r1, #98	; 0x62
   39c78:	4847      	ldr	r0, [pc, #284]	; (39d98 <z_impl_k_queue_get+0x1a0>)
   39c7a:	f005 fbf1 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   39c7e:	f388 8811 	msr	BASEPRI, r8
   39c82:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   39c86:	4620      	mov	r0, r4
   39c88:	b009      	add	sp, #36	; 0x24
   39c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39c8e:	4630      	mov	r0, r6
	if (timeout == K_NO_WAIT) {
   39c90:	2f00      	cmp	r7, #0
   39c92:	d0e4      	beq.n	39c5e <z_impl_k_queue_get+0x66>
   39c94:	f001 fa04 	bl	3b0a0 <z_spin_unlock_valid>
   39c98:	b960      	cbnz	r0, 39cb4 <z_impl_k_queue_get+0xbc>
   39c9a:	4942      	ldr	r1, [pc, #264]	; (39da4 <z_impl_k_queue_get+0x1ac>)
   39c9c:	2362      	movs	r3, #98	; 0x62
   39c9e:	4a3e      	ldr	r2, [pc, #248]	; (39d98 <z_impl_k_queue_get+0x1a0>)
   39ca0:	483e      	ldr	r0, [pc, #248]	; (39d9c <z_impl_k_queue_get+0x1a4>)
   39ca2:	f005 fbd0 	bl	3f446 <printk>
   39ca6:	4840      	ldr	r0, [pc, #256]	; (39da8 <z_impl_k_queue_get+0x1b0>)
   39ca8:	f005 fbcd 	bl	3f446 <printk>
   39cac:	2162      	movs	r1, #98	; 0x62
   39cae:	483a      	ldr	r0, [pc, #232]	; (39d98 <z_impl_k_queue_get+0x1a0>)
   39cb0:	f005 fbd6 	bl	3f460 <assert_post_action>
   39cb4:	f388 8811 	msr	BASEPRI, r8
   39cb8:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   39cbc:	2200      	movs	r2, #0
   39cbe:	462b      	mov	r3, r5
   39cc0:	2104      	movs	r1, #4
   39cc2:	a803      	add	r0, sp, #12
   39cc4:	f002 fa0e 	bl	3c0e4 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   39cc8:	1c7a      	adds	r2, r7, #1
   39cca:	d002      	beq.n	39cd2 <z_impl_k_queue_get+0xda>
   39ccc:	f007 fdeb 	bl	418a6 <z_impl_k_uptime_get>
   39cd0:	4683      	mov	fp, r0
{
   39cd2:	f04f 0900 	mov.w	r9, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   39cd6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 39d98 <z_impl_k_queue_get+0x1a0>
   39cda:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 39d9c <z_impl_k_queue_get+0x1a4>
		event.state = K_POLL_STATE_NOT_READY;
   39cde:	9b06      	ldr	r3, [sp, #24]
   39ce0:	f36f 3310 	bfc	r3, #12, #5
   39ce4:	9306      	str	r3, [sp, #24]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   39ce6:	2101      	movs	r1, #1
   39ce8:	eba7 0209 	sub.w	r2, r7, r9
   39cec:	a803      	add	r0, sp, #12
   39cee:	f002 fa4b 	bl	3c188 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   39cf2:	b118      	cbz	r0, 39cfc <z_impl_k_queue_get+0x104>
   39cf4:	300b      	adds	r0, #11
   39cf6:	d001      	beq.n	39cfc <z_impl_k_queue_get+0x104>
			return NULL;
   39cf8:	2400      	movs	r4, #0
   39cfa:	e7c4      	b.n	39c86 <z_impl_k_queue_get+0x8e>
	__asm__ volatile(
   39cfc:	f04f 0320 	mov.w	r3, #32
   39d00:	f3ef 8211 	mrs	r2, BASEPRI
   39d04:	f383 8811 	msr	BASEPRI, r3
   39d08:	f3bf 8f6f 	isb	sy
   39d0c:	4630      	mov	r0, r6
   39d0e:	9201      	str	r2, [sp, #4]
   39d10:	f001 f9b8 	bl	3b084 <z_spin_lock_valid>
   39d14:	b960      	cbnz	r0, 39d30 <z_impl_k_queue_get+0x138>
   39d16:	491f      	ldr	r1, [pc, #124]	; (39d94 <z_impl_k_queue_get+0x19c>)
   39d18:	234f      	movs	r3, #79	; 0x4f
   39d1a:	4642      	mov	r2, r8
   39d1c:	4650      	mov	r0, sl
   39d1e:	f005 fb92 	bl	3f446 <printk>
   39d22:	481f      	ldr	r0, [pc, #124]	; (39da0 <z_impl_k_queue_get+0x1a8>)
   39d24:	f005 fb8f 	bl	3f446 <printk>
   39d28:	214f      	movs	r1, #79	; 0x4f
   39d2a:	4640      	mov	r0, r8
   39d2c:	f005 fb98 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   39d30:	4630      	mov	r0, r6
   39d32:	f001 f9c5 	bl	3b0c0 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   39d36:	6828      	ldr	r0, [r5, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   39d38:	b138      	cbz	r0, 39d4a <z_impl_k_queue_get+0x152>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   39d3a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   39d3c:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   39d3e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   39d42:	4290      	cmp	r0, r2
	list->head = node;
   39d44:	602b      	str	r3, [r5, #0]
	list->tail = node;
   39d46:	bf08      	it	eq
   39d48:	606b      	streq	r3, [r5, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   39d4a:	2101      	movs	r1, #1
   39d4c:	f007 fcd0 	bl	416f0 <z_queue_node_peek>
   39d50:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   39d52:	4630      	mov	r0, r6
   39d54:	f001 f9a4 	bl	3b0a0 <z_spin_unlock_valid>
   39d58:	b960      	cbnz	r0, 39d74 <z_impl_k_queue_get+0x17c>
   39d5a:	4912      	ldr	r1, [pc, #72]	; (39da4 <z_impl_k_queue_get+0x1ac>)
   39d5c:	2362      	movs	r3, #98	; 0x62
   39d5e:	4642      	mov	r2, r8
   39d60:	4650      	mov	r0, sl
   39d62:	f005 fb70 	bl	3f446 <printk>
   39d66:	4810      	ldr	r0, [pc, #64]	; (39da8 <z_impl_k_queue_get+0x1b0>)
   39d68:	f005 fb6d 	bl	3f446 <printk>
   39d6c:	2162      	movs	r1, #98	; 0x62
   39d6e:	4640      	mov	r0, r8
   39d70:	f005 fb76 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   39d74:	9b01      	ldr	r3, [sp, #4]
   39d76:	f383 8811 	msr	BASEPRI, r3
   39d7a:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   39d7e:	2c00      	cmp	r4, #0
   39d80:	d181      	bne.n	39c86 <z_impl_k_queue_get+0x8e>
   39d82:	1c7b      	adds	r3, r7, #1
   39d84:	d0ab      	beq.n	39cde <z_impl_k_queue_get+0xe6>
	return z_impl_k_uptime_get();
   39d86:	f007 fd8e 	bl	418a6 <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   39d8a:	eba0 090b 	sub.w	r9, r0, fp
	} while (!val && !done);
   39d8e:	454f      	cmp	r7, r9
   39d90:	daa5      	bge.n	39cde <z_impl_k_queue_get+0xe6>
   39d92:	e7b1      	b.n	39cf8 <z_impl_k_queue_get+0x100>
   39d94:	00045d2d 	.word	0x00045d2d
   39d98:	00045d0e 	.word	0x00045d0e
   39d9c:	00045316 	.word	0x00045316
   39da0:	00045d42 	.word	0x00045d42
   39da4:	00045d57 	.word	0x00045d57
   39da8:	00045d6e 	.word	0x00045d6e

00039dac <pended_on.isra.16>:
	pend(thread, wait_q, timeout);
}

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   39dac:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   39dae:	b510      	push	{r4, lr}
   39db0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   39db2:	b95b      	cbnz	r3, 39dcc <pended_on.isra.16+0x20>
   39db4:	4906      	ldr	r1, [pc, #24]	; (39dd0 <pended_on.isra.16+0x24>)
   39db6:	4807      	ldr	r0, [pc, #28]	; (39dd4 <pended_on.isra.16+0x28>)
   39db8:	f44f 73c6 	mov.w	r3, #396	; 0x18c
   39dbc:	4a06      	ldr	r2, [pc, #24]	; (39dd8 <pended_on.isra.16+0x2c>)
   39dbe:	f005 fb42 	bl	3f446 <printk>
   39dc2:	f44f 71c6 	mov.w	r1, #396	; 0x18c
   39dc6:	4804      	ldr	r0, [pc, #16]	; (39dd8 <pended_on.isra.16+0x2c>)
   39dc8:	f005 fb4a 	bl	3f460 <assert_post_action>

	return thread->base.pended_on;
}
   39dcc:	6820      	ldr	r0, [r4, #0]
   39dce:	bd10      	pop	{r4, pc}
   39dd0:	0004a316 	.word	0x0004a316
   39dd4:	00045316 	.word	0x00045316
   39dd8:	0004a2fb 	.word	0x0004a2fb

00039ddc <z_reset_time_slice>:
{
   39ddc:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   39dde:	4c08      	ldr	r4, [pc, #32]	; (39e00 <z_reset_time_slice+0x24>)
   39de0:	6823      	ldr	r3, [r4, #0]
   39de2:	b15b      	cbz	r3, 39dfc <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   39de4:	f7e6 fa04 	bl	201f0 <z_clock_elapsed>
   39de8:	6823      	ldr	r3, [r4, #0]
   39dea:	4a06      	ldr	r2, [pc, #24]	; (39e04 <z_reset_time_slice+0x28>)
   39dec:	4418      	add	r0, r3
   39dee:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   39df0:	2100      	movs	r1, #0
}
   39df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   39df6:	4618      	mov	r0, r3
   39df8:	f001 be40 	b.w	3ba7c <z_set_timeout_expiry>
}
   39dfc:	bd10      	pop	{r4, pc}
   39dfe:	bf00      	nop
   39e00:	2002a218 	.word	0x2002a218
   39e04:	2002a1d8 	.word	0x2002a1d8

00039e08 <k_sched_time_slice_set>:
{
   39e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39e0a:	4607      	mov	r7, r0
   39e0c:	460d      	mov	r5, r1
	__asm__ volatile(
   39e0e:	f04f 0320 	mov.w	r3, #32
   39e12:	f3ef 8411 	mrs	r4, BASEPRI
   39e16:	f383 8811 	msr	BASEPRI, r3
   39e1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   39e1e:	481f      	ldr	r0, [pc, #124]	; (39e9c <k_sched_time_slice_set+0x94>)
   39e20:	f001 f930 	bl	3b084 <z_spin_lock_valid>
   39e24:	b960      	cbnz	r0, 39e40 <k_sched_time_slice_set+0x38>
   39e26:	491e      	ldr	r1, [pc, #120]	; (39ea0 <k_sched_time_slice_set+0x98>)
   39e28:	234f      	movs	r3, #79	; 0x4f
   39e2a:	4a1e      	ldr	r2, [pc, #120]	; (39ea4 <k_sched_time_slice_set+0x9c>)
   39e2c:	481e      	ldr	r0, [pc, #120]	; (39ea8 <k_sched_time_slice_set+0xa0>)
   39e2e:	f005 fb0a 	bl	3f446 <printk>
   39e32:	481e      	ldr	r0, [pc, #120]	; (39eac <k_sched_time_slice_set+0xa4>)
   39e34:	f005 fb07 	bl	3f446 <printk>
   39e38:	214f      	movs	r1, #79	; 0x4f
   39e3a:	481a      	ldr	r0, [pc, #104]	; (39ea4 <k_sched_time_slice_set+0x9c>)
   39e3c:	f005 fb10 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   39e40:	4816      	ldr	r0, [pc, #88]	; (39e9c <k_sched_time_slice_set+0x94>)
   39e42:	f001 f93d 	bl	3b0c0 <z_spin_lock_set_owner>
			return (u32_t)((t * to_hz + off) / from_hz);
   39e46:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   39e4a:	2200      	movs	r2, #0
   39e4c:	f240 30e7 	movw	r0, #999	; 0x3e7
   39e50:	2100      	movs	r1, #0
   39e52:	4b17      	ldr	r3, [pc, #92]	; (39eb0 <k_sched_time_slice_set+0xa8>)
   39e54:	fbe6 0107 	umlal	r0, r1, r6, r7
   39e58:	611a      	str	r2, [r3, #16]
   39e5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   39e5e:	2300      	movs	r3, #0
   39e60:	f7de ff7c 	bl	18d5c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   39e64:	4b13      	ldr	r3, [pc, #76]	; (39eb4 <k_sched_time_slice_set+0xac>)
   39e66:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   39e68:	4b13      	ldr	r3, [pc, #76]	; (39eb8 <k_sched_time_slice_set+0xb0>)
   39e6a:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   39e6c:	f7ff ffb6 	bl	39ddc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   39e70:	480a      	ldr	r0, [pc, #40]	; (39e9c <k_sched_time_slice_set+0x94>)
   39e72:	f001 f915 	bl	3b0a0 <z_spin_unlock_valid>
   39e76:	b960      	cbnz	r0, 39e92 <k_sched_time_slice_set+0x8a>
   39e78:	4910      	ldr	r1, [pc, #64]	; (39ebc <k_sched_time_slice_set+0xb4>)
   39e7a:	2362      	movs	r3, #98	; 0x62
   39e7c:	4a09      	ldr	r2, [pc, #36]	; (39ea4 <k_sched_time_slice_set+0x9c>)
   39e7e:	480a      	ldr	r0, [pc, #40]	; (39ea8 <k_sched_time_slice_set+0xa0>)
   39e80:	f005 fae1 	bl	3f446 <printk>
   39e84:	480e      	ldr	r0, [pc, #56]	; (39ec0 <k_sched_time_slice_set+0xb8>)
   39e86:	f005 fade 	bl	3f446 <printk>
   39e8a:	2162      	movs	r1, #98	; 0x62
   39e8c:	4805      	ldr	r0, [pc, #20]	; (39ea4 <k_sched_time_slice_set+0x9c>)
   39e8e:	f005 fae7 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   39e92:	f384 8811 	msr	BASEPRI, r4
   39e96:	f3bf 8f6f 	isb	sy
}
   39e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   39e9c:	2002a210 	.word	0x2002a210
   39ea0:	00045d2d 	.word	0x00045d2d
   39ea4:	00045d0e 	.word	0x00045d0e
   39ea8:	00045316 	.word	0x00045316
   39eac:	00045d42 	.word	0x00045d42
   39eb0:	2002a1d8 	.word	0x2002a1d8
   39eb4:	2002a218 	.word	0x2002a218
   39eb8:	2002a214 	.word	0x2002a214
   39ebc:	00045d57 	.word	0x00045d57
   39ec0:	00045d6e 	.word	0x00045d6e

00039ec4 <z_unpend_thread_no_timeout>:

	return ret;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   39ec4:	b538      	push	{r3, r4, r5, lr}
   39ec6:	4604      	mov	r4, r0
	__asm__ volatile(
   39ec8:	f04f 0320 	mov.w	r3, #32
   39ecc:	f3ef 8511 	mrs	r5, BASEPRI
   39ed0:	f383 8811 	msr	BASEPRI, r3
   39ed4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   39ed8:	481b      	ldr	r0, [pc, #108]	; (39f48 <z_unpend_thread_no_timeout+0x84>)
   39eda:	f001 f8d3 	bl	3b084 <z_spin_lock_valid>
   39ede:	b960      	cbnz	r0, 39efa <z_unpend_thread_no_timeout+0x36>
   39ee0:	491a      	ldr	r1, [pc, #104]	; (39f4c <z_unpend_thread_no_timeout+0x88>)
   39ee2:	234f      	movs	r3, #79	; 0x4f
   39ee4:	4a1a      	ldr	r2, [pc, #104]	; (39f50 <z_unpend_thread_no_timeout+0x8c>)
   39ee6:	481b      	ldr	r0, [pc, #108]	; (39f54 <z_unpend_thread_no_timeout+0x90>)
   39ee8:	f005 faad 	bl	3f446 <printk>
   39eec:	481a      	ldr	r0, [pc, #104]	; (39f58 <z_unpend_thread_no_timeout+0x94>)
   39eee:	f005 faaa 	bl	3f446 <printk>
   39ef2:	214f      	movs	r1, #79	; 0x4f
   39ef4:	4816      	ldr	r0, [pc, #88]	; (39f50 <z_unpend_thread_no_timeout+0x8c>)
   39ef6:	f005 fab3 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   39efa:	4813      	ldr	r0, [pc, #76]	; (39f48 <z_unpend_thread_no_timeout+0x84>)
   39efc:	f001 f8e0 	bl	3b0c0 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   39f00:	f104 0008 	add.w	r0, r4, #8
   39f04:	f7ff ff52 	bl	39dac <pended_on.isra.16>
   39f08:	4621      	mov	r1, r4
   39f0a:	f000 f8db 	bl	3a0c4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   39f0e:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   39f10:	480d      	ldr	r0, [pc, #52]	; (39f48 <z_unpend_thread_no_timeout+0x84>)
   39f12:	f023 0302 	bic.w	r3, r3, #2
   39f16:	7363      	strb	r3, [r4, #13]
   39f18:	f001 f8c2 	bl	3b0a0 <z_spin_unlock_valid>
   39f1c:	b960      	cbnz	r0, 39f38 <z_unpend_thread_no_timeout+0x74>
   39f1e:	490f      	ldr	r1, [pc, #60]	; (39f5c <z_unpend_thread_no_timeout+0x98>)
   39f20:	2362      	movs	r3, #98	; 0x62
   39f22:	4a0b      	ldr	r2, [pc, #44]	; (39f50 <z_unpend_thread_no_timeout+0x8c>)
   39f24:	480b      	ldr	r0, [pc, #44]	; (39f54 <z_unpend_thread_no_timeout+0x90>)
   39f26:	f005 fa8e 	bl	3f446 <printk>
   39f2a:	480d      	ldr	r0, [pc, #52]	; (39f60 <z_unpend_thread_no_timeout+0x9c>)
   39f2c:	f005 fa8b 	bl	3f446 <printk>
   39f30:	2162      	movs	r1, #98	; 0x62
   39f32:	4807      	ldr	r0, [pc, #28]	; (39f50 <z_unpend_thread_no_timeout+0x8c>)
   39f34:	f005 fa94 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   39f38:	f385 8811 	msr	BASEPRI, r5
   39f3c:	f3bf 8f6f 	isb	sy
		z_mark_thread_as_not_pending(thread);
	}

	thread->base.pended_on = NULL;
   39f40:	2300      	movs	r3, #0
   39f42:	60a3      	str	r3, [r4, #8]
}
   39f44:	bd38      	pop	{r3, r4, r5, pc}
   39f46:	bf00      	nop
   39f48:	2002a210 	.word	0x2002a210
   39f4c:	00045d2d 	.word	0x00045d2d
   39f50:	00045d0e 	.word	0x00045d0e
   39f54:	00045316 	.word	0x00045316
   39f58:	00045d42 	.word	0x00045d42
   39f5c:	00045d57 	.word	0x00045d57
   39f60:	00045d6e 	.word	0x00045d6e

00039f64 <z_reschedule>:

	return arch_irq_unlocked(key) && !arch_is_in_isr();
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   39f64:	b510      	push	{r4, lr}
   39f66:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   39f68:	460c      	mov	r4, r1
   39f6a:	b9b9      	cbnz	r1, 39f9c <z_reschedule+0x38>
   39f6c:	f3ef 8205 	mrs	r2, IPSR
   39f70:	b9a2      	cbnz	r2, 39f9c <z_reschedule+0x38>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   39f72:	f001 f895 	bl	3b0a0 <z_spin_unlock_valid>
   39f76:	b960      	cbnz	r0, 39f92 <z_reschedule+0x2e>
   39f78:	4913      	ldr	r1, [pc, #76]	; (39fc8 <z_reschedule+0x64>)
   39f7a:	2379      	movs	r3, #121	; 0x79
   39f7c:	4a13      	ldr	r2, [pc, #76]	; (39fcc <z_reschedule+0x68>)
   39f7e:	4814      	ldr	r0, [pc, #80]	; (39fd0 <z_reschedule+0x6c>)
   39f80:	f005 fa61 	bl	3f446 <printk>
   39f84:	4813      	ldr	r0, [pc, #76]	; (39fd4 <z_reschedule+0x70>)
   39f86:	f005 fa5e 	bl	3f446 <printk>
   39f8a:	2179      	movs	r1, #121	; 0x79
   39f8c:	480f      	ldr	r0, [pc, #60]	; (39fcc <z_reschedule+0x68>)
   39f8e:	f005 fa67 	bl	3f460 <assert_post_action>
	if (resched(key.key)) {
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   39f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   39f96:	2000      	movs	r0, #0
   39f98:	f7e6 b9d6 	b.w	20348 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   39f9c:	4618      	mov	r0, r3
   39f9e:	f001 f87f 	bl	3b0a0 <z_spin_unlock_valid>
   39fa2:	b960      	cbnz	r0, 39fbe <z_reschedule+0x5a>
   39fa4:	4908      	ldr	r1, [pc, #32]	; (39fc8 <z_reschedule+0x64>)
   39fa6:	2362      	movs	r3, #98	; 0x62
   39fa8:	4a08      	ldr	r2, [pc, #32]	; (39fcc <z_reschedule+0x68>)
   39faa:	4809      	ldr	r0, [pc, #36]	; (39fd0 <z_reschedule+0x6c>)
   39fac:	f005 fa4b 	bl	3f446 <printk>
   39fb0:	4808      	ldr	r0, [pc, #32]	; (39fd4 <z_reschedule+0x70>)
   39fb2:	f005 fa48 	bl	3f446 <printk>
   39fb6:	2162      	movs	r1, #98	; 0x62
   39fb8:	4804      	ldr	r0, [pc, #16]	; (39fcc <z_reschedule+0x68>)
   39fba:	f005 fa51 	bl	3f460 <assert_post_action>
   39fbe:	f384 8811 	msr	BASEPRI, r4
   39fc2:	f3bf 8f6f 	isb	sy
   39fc6:	bd10      	pop	{r4, pc}
   39fc8:	00045d57 	.word	0x00045d57
   39fcc:	00045d0e 	.word	0x00045d0e
   39fd0:	00045316 	.word	0x00045316
   39fd4:	00045d6e 	.word	0x00045d6e

00039fd8 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   39fd8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   39fda:	f04f 0320 	mov.w	r3, #32
   39fde:	f3ef 8511 	mrs	r5, BASEPRI
   39fe2:	f383 8811 	msr	BASEPRI, r3
   39fe6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   39fea:	482a      	ldr	r0, [pc, #168]	; (3a094 <k_sched_lock+0xbc>)
   39fec:	f001 f84a 	bl	3b084 <z_spin_lock_valid>
   39ff0:	b960      	cbnz	r0, 3a00c <k_sched_lock+0x34>
   39ff2:	4929      	ldr	r1, [pc, #164]	; (3a098 <k_sched_lock+0xc0>)
   39ff4:	234f      	movs	r3, #79	; 0x4f
   39ff6:	4a29      	ldr	r2, [pc, #164]	; (3a09c <k_sched_lock+0xc4>)
   39ff8:	4829      	ldr	r0, [pc, #164]	; (3a0a0 <k_sched_lock+0xc8>)
   39ffa:	f005 fa24 	bl	3f446 <printk>
   39ffe:	4829      	ldr	r0, [pc, #164]	; (3a0a4 <k_sched_lock+0xcc>)
   3a000:	f005 fa21 	bl	3f446 <printk>
   3a004:	214f      	movs	r1, #79	; 0x4f
   3a006:	4825      	ldr	r0, [pc, #148]	; (3a09c <k_sched_lock+0xc4>)
   3a008:	f005 fa2a 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3a00c:	4821      	ldr	r0, [pc, #132]	; (3a094 <k_sched_lock+0xbc>)
   3a00e:	f001 f857 	bl	3b0c0 <z_spin_lock_set_owner>
   3a012:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   3a016:	b173      	cbz	r3, 3a036 <k_sched_lock+0x5e>
   3a018:	4923      	ldr	r1, [pc, #140]	; (3a0a8 <k_sched_lock+0xd0>)
   3a01a:	f44f 7386 	mov.w	r3, #268	; 0x10c
   3a01e:	4a23      	ldr	r2, [pc, #140]	; (3a0ac <k_sched_lock+0xd4>)
   3a020:	481f      	ldr	r0, [pc, #124]	; (3a0a0 <k_sched_lock+0xc8>)
   3a022:	f005 fa10 	bl	3f446 <printk>
   3a026:	4822      	ldr	r0, [pc, #136]	; (3a0b0 <k_sched_lock+0xd8>)
   3a028:	f005 fa0d 	bl	3f446 <printk>
   3a02c:	f44f 7186 	mov.w	r1, #268	; 0x10c
   3a030:	481e      	ldr	r0, [pc, #120]	; (3a0ac <k_sched_lock+0xd4>)
   3a032:	f005 fa15 	bl	3f460 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   3a036:	4c1f      	ldr	r4, [pc, #124]	; (3a0b4 <k_sched_lock+0xdc>)
   3a038:	68a2      	ldr	r2, [r4, #8]
   3a03a:	7bd2      	ldrb	r2, [r2, #15]
   3a03c:	2a01      	cmp	r2, #1
   3a03e:	d10e      	bne.n	3a05e <k_sched_lock+0x86>
   3a040:	491d      	ldr	r1, [pc, #116]	; (3a0b8 <k_sched_lock+0xe0>)
   3a042:	f240 130d 	movw	r3, #269	; 0x10d
   3a046:	4a19      	ldr	r2, [pc, #100]	; (3a0ac <k_sched_lock+0xd4>)
   3a048:	4815      	ldr	r0, [pc, #84]	; (3a0a0 <k_sched_lock+0xc8>)
   3a04a:	f005 f9fc 	bl	3f446 <printk>
   3a04e:	4818      	ldr	r0, [pc, #96]	; (3a0b0 <k_sched_lock+0xd8>)
   3a050:	f005 f9f9 	bl	3f446 <printk>
   3a054:	f240 110d 	movw	r1, #269	; 0x10d
   3a058:	4814      	ldr	r0, [pc, #80]	; (3a0ac <k_sched_lock+0xd4>)
   3a05a:	f005 fa01 	bl	3f460 <assert_post_action>
	--_current->base.sched_locked;
   3a05e:	68a2      	ldr	r2, [r4, #8]
   3a060:	7bd3      	ldrb	r3, [r2, #15]
   3a062:	3b01      	subs	r3, #1
   3a064:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3a066:	480b      	ldr	r0, [pc, #44]	; (3a094 <k_sched_lock+0xbc>)
   3a068:	f001 f81a 	bl	3b0a0 <z_spin_unlock_valid>
   3a06c:	b960      	cbnz	r0, 3a088 <k_sched_lock+0xb0>
   3a06e:	4913      	ldr	r1, [pc, #76]	; (3a0bc <k_sched_lock+0xe4>)
   3a070:	2362      	movs	r3, #98	; 0x62
   3a072:	4a0a      	ldr	r2, [pc, #40]	; (3a09c <k_sched_lock+0xc4>)
   3a074:	480a      	ldr	r0, [pc, #40]	; (3a0a0 <k_sched_lock+0xc8>)
   3a076:	f005 f9e6 	bl	3f446 <printk>
   3a07a:	4811      	ldr	r0, [pc, #68]	; (3a0c0 <k_sched_lock+0xe8>)
   3a07c:	f005 f9e3 	bl	3f446 <printk>
   3a080:	2162      	movs	r1, #98	; 0x62
   3a082:	4806      	ldr	r0, [pc, #24]	; (3a09c <k_sched_lock+0xc4>)
   3a084:	f005 f9ec 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3a088:	f385 8811 	msr	BASEPRI, r5
   3a08c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   3a090:	bd38      	pop	{r3, r4, r5, pc}
   3a092:	bf00      	nop
   3a094:	2002a210 	.word	0x2002a210
   3a098:	00045d2d 	.word	0x00045d2d
   3a09c:	00045d0e 	.word	0x00045d0e
   3a0a0:	00045316 	.word	0x00045316
   3a0a4:	00045d42 	.word	0x00045d42
   3a0a8:	0004a263 	.word	0x0004a263
   3a0ac:	0004a23f 	.word	0x0004a23f
   3a0b0:	0004a182 	.word	0x0004a182
   3a0b4:	2002a1d8 	.word	0x2002a1d8
   3a0b8:	0004a275 	.word	0x0004a275
   3a0bc:	00045d57 	.word	0x00045d57
   3a0c0:	00045d6e 	.word	0x00045d6e

0003a0c4 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   3a0c4:	4b11      	ldr	r3, [pc, #68]	; (3a10c <z_priq_dumb_remove+0x48>)
{
   3a0c6:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   3a0c8:	f103 0228 	add.w	r2, r3, #40	; 0x28
   3a0cc:	4282      	cmp	r2, r0
{
   3a0ce:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   3a0d0:	d105      	bne.n	3a0de <z_priq_dumb_remove+0x1a>
   3a0d2:	689b      	ldr	r3, [r3, #8]
   3a0d4:	428b      	cmp	r3, r1
   3a0d6:	d102      	bne.n	3a0de <z_priq_dumb_remove+0x1a>
   3a0d8:	7b4b      	ldrb	r3, [r1, #13]
   3a0da:	06db      	lsls	r3, r3, #27
   3a0dc:	d115      	bne.n	3a10a <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3a0de:	4b0c      	ldr	r3, [pc, #48]	; (3a110 <z_priq_dumb_remove+0x4c>)
   3a0e0:	429c      	cmp	r4, r3
   3a0e2:	d10b      	bne.n	3a0fc <z_priq_dumb_remove+0x38>
   3a0e4:	490b      	ldr	r1, [pc, #44]	; (3a114 <z_priq_dumb_remove+0x50>)
   3a0e6:	480c      	ldr	r0, [pc, #48]	; (3a118 <z_priq_dumb_remove+0x54>)
   3a0e8:	f240 239d 	movw	r3, #669	; 0x29d
   3a0ec:	4a0b      	ldr	r2, [pc, #44]	; (3a11c <z_priq_dumb_remove+0x58>)
   3a0ee:	f005 f9aa 	bl	3f446 <printk>
   3a0f2:	f240 219d 	movw	r1, #669	; 0x29d
   3a0f6:	4809      	ldr	r0, [pc, #36]	; (3a11c <z_priq_dumb_remove+0x58>)
   3a0f8:	f005 f9b2 	bl	3f460 <assert_post_action>
	node->prev->next = node->next;
   3a0fc:	e9d4 3200 	ldrd	r3, r2, [r4]
   3a100:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3a102:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3a104:	2300      	movs	r3, #0
	node->prev = NULL;
   3a106:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   3a10a:	bd10      	pop	{r4, pc}
   3a10c:	2002a1d8 	.word	0x2002a1d8
   3a110:	20026008 	.word	0x20026008
   3a114:	0004a34c 	.word	0x0004a34c
   3a118:	00045316 	.word	0x00045316
   3a11c:	0004a2fb 	.word	0x0004a2fb

0003a120 <z_unpend_thread>:
{
   3a120:	b538      	push	{r3, r4, r5, lr}
   3a122:	4604      	mov	r4, r0
	__asm__ volatile(
   3a124:	f04f 0320 	mov.w	r3, #32
   3a128:	f3ef 8511 	mrs	r5, BASEPRI
   3a12c:	f383 8811 	msr	BASEPRI, r3
   3a130:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3a134:	481d      	ldr	r0, [pc, #116]	; (3a1ac <z_unpend_thread+0x8c>)
   3a136:	f000 ffa5 	bl	3b084 <z_spin_lock_valid>
   3a13a:	b960      	cbnz	r0, 3a156 <z_unpend_thread+0x36>
   3a13c:	491c      	ldr	r1, [pc, #112]	; (3a1b0 <z_unpend_thread+0x90>)
   3a13e:	234f      	movs	r3, #79	; 0x4f
   3a140:	4a1c      	ldr	r2, [pc, #112]	; (3a1b4 <z_unpend_thread+0x94>)
   3a142:	481d      	ldr	r0, [pc, #116]	; (3a1b8 <z_unpend_thread+0x98>)
   3a144:	f005 f97f 	bl	3f446 <printk>
   3a148:	481c      	ldr	r0, [pc, #112]	; (3a1bc <z_unpend_thread+0x9c>)
   3a14a:	f005 f97c 	bl	3f446 <printk>
   3a14e:	214f      	movs	r1, #79	; 0x4f
   3a150:	4818      	ldr	r0, [pc, #96]	; (3a1b4 <z_unpend_thread+0x94>)
   3a152:	f005 f985 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3a156:	4815      	ldr	r0, [pc, #84]	; (3a1ac <z_unpend_thread+0x8c>)
   3a158:	f000 ffb2 	bl	3b0c0 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   3a15c:	f104 0008 	add.w	r0, r4, #8
   3a160:	f7ff fe24 	bl	39dac <pended_on.isra.16>
   3a164:	4621      	mov	r1, r4
   3a166:	f7ff ffad 	bl	3a0c4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   3a16a:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3a16c:	480f      	ldr	r0, [pc, #60]	; (3a1ac <z_unpend_thread+0x8c>)
   3a16e:	f023 0302 	bic.w	r3, r3, #2
   3a172:	7363      	strb	r3, [r4, #13]
   3a174:	f000 ff94 	bl	3b0a0 <z_spin_unlock_valid>
   3a178:	b960      	cbnz	r0, 3a194 <z_unpend_thread+0x74>
   3a17a:	4911      	ldr	r1, [pc, #68]	; (3a1c0 <z_unpend_thread+0xa0>)
   3a17c:	2362      	movs	r3, #98	; 0x62
   3a17e:	4a0d      	ldr	r2, [pc, #52]	; (3a1b4 <z_unpend_thread+0x94>)
   3a180:	480d      	ldr	r0, [pc, #52]	; (3a1b8 <z_unpend_thread+0x98>)
   3a182:	f005 f960 	bl	3f446 <printk>
   3a186:	480f      	ldr	r0, [pc, #60]	; (3a1c4 <z_unpend_thread+0xa4>)
   3a188:	f005 f95d 	bl	3f446 <printk>
   3a18c:	2162      	movs	r1, #98	; 0x62
   3a18e:	4809      	ldr	r0, [pc, #36]	; (3a1b4 <z_unpend_thread+0x94>)
   3a190:	f005 f966 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3a194:	f385 8811 	msr	BASEPRI, r5
   3a198:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   3a19c:	2300      	movs	r3, #0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   3a19e:	f104 0018 	add.w	r0, r4, #24
   3a1a2:	60a3      	str	r3, [r4, #8]
}
   3a1a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3a1a8:	f001 bb78 	b.w	3b89c <z_abort_timeout>
   3a1ac:	2002a210 	.word	0x2002a210
   3a1b0:	00045d2d 	.word	0x00045d2d
   3a1b4:	00045d0e 	.word	0x00045d0e
   3a1b8:	00045316 	.word	0x00045316
   3a1bc:	00045d42 	.word	0x00045d42
   3a1c0:	00045d57 	.word	0x00045d57
   3a1c4:	00045d6e 	.word	0x00045d6e

0003a1c8 <update_cache>:
{
   3a1c8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   3a1ca:	4c15      	ldr	r4, [pc, #84]	; (3a220 <update_cache+0x58>)
{
   3a1cc:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   3a1ce:	f104 0028 	add.w	r0, r4, #40	; 0x28
   3a1d2:	f007 facf 	bl	41774 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
   3a1d6:	4605      	mov	r5, r0
   3a1d8:	b900      	cbnz	r0, 3a1dc <update_cache+0x14>
   3a1da:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   3a1dc:	b9ca      	cbnz	r2, 3a212 <update_cache+0x4a>
	__ASSERT(_current != NULL, "");
   3a1de:	68a3      	ldr	r3, [r4, #8]
   3a1e0:	b963      	cbnz	r3, 3a1fc <update_cache+0x34>
   3a1e2:	4910      	ldr	r1, [pc, #64]	; (3a224 <update_cache+0x5c>)
   3a1e4:	2375      	movs	r3, #117	; 0x75
   3a1e6:	4a10      	ldr	r2, [pc, #64]	; (3a228 <update_cache+0x60>)
   3a1e8:	4810      	ldr	r0, [pc, #64]	; (3a22c <update_cache+0x64>)
   3a1ea:	f005 f92c 	bl	3f446 <printk>
   3a1ee:	4810      	ldr	r0, [pc, #64]	; (3a230 <update_cache+0x68>)
   3a1f0:	f005 f929 	bl	3f446 <printk>
   3a1f4:	2175      	movs	r1, #117	; 0x75
   3a1f6:	480c      	ldr	r0, [pc, #48]	; (3a228 <update_cache+0x60>)
   3a1f8:	f005 f932 	bl	3f460 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   3a1fc:	68a3      	ldr	r3, [r4, #8]
   3a1fe:	7b5a      	ldrb	r2, [r3, #13]
   3a200:	06d2      	lsls	r2, r2, #27
   3a202:	d106      	bne.n	3a212 <update_cache+0x4a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   3a204:	69aa      	ldr	r2, [r5, #24]
   3a206:	b922      	cbnz	r2, 3a212 <update_cache+0x4a>
	if (is_preempt(_current) || is_metairq(th)) {
   3a208:	89da      	ldrh	r2, [r3, #14]
   3a20a:	2a7f      	cmp	r2, #127	; 0x7f
   3a20c:	d901      	bls.n	3a212 <update_cache+0x4a>
		_kernel.ready_q.cache = _current;
   3a20e:	6263      	str	r3, [r4, #36]	; 0x24
}
   3a210:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   3a212:	68a3      	ldr	r3, [r4, #8]
   3a214:	42ab      	cmp	r3, r5
   3a216:	d001      	beq.n	3a21c <update_cache+0x54>
			z_reset_time_slice();
   3a218:	f7ff fde0 	bl	39ddc <z_reset_time_slice>
		_kernel.ready_q.cache = th;
   3a21c:	6265      	str	r5, [r4, #36]	; 0x24
}
   3a21e:	e7f7      	b.n	3a210 <update_cache+0x48>
   3a220:	2002a1d8 	.word	0x2002a1d8
   3a224:	0004a32d 	.word	0x0004a32d
   3a228:	0004a2fb 	.word	0x0004a2fb
   3a22c:	00045316 	.word	0x00045316
   3a230:	0004a182 	.word	0x0004a182

0003a234 <k_sched_unlock>:
{
   3a234:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current->base.sched_locked != 0, "");
   3a236:	4c30      	ldr	r4, [pc, #192]	; (3a2f8 <k_sched_unlock+0xc4>)
   3a238:	68a2      	ldr	r2, [r4, #8]
   3a23a:	7bd2      	ldrb	r2, [r2, #15]
   3a23c:	b972      	cbnz	r2, 3a25c <k_sched_unlock+0x28>
   3a23e:	492f      	ldr	r1, [pc, #188]	; (3a2fc <k_sched_unlock+0xc8>)
   3a240:	f240 2336 	movw	r3, #566	; 0x236
   3a244:	4a2e      	ldr	r2, [pc, #184]	; (3a300 <k_sched_unlock+0xcc>)
   3a246:	482f      	ldr	r0, [pc, #188]	; (3a304 <k_sched_unlock+0xd0>)
   3a248:	f005 f8fd 	bl	3f446 <printk>
   3a24c:	482e      	ldr	r0, [pc, #184]	; (3a308 <k_sched_unlock+0xd4>)
   3a24e:	f005 f8fa 	bl	3f446 <printk>
   3a252:	f240 2136 	movw	r1, #566	; 0x236
   3a256:	482a      	ldr	r0, [pc, #168]	; (3a300 <k_sched_unlock+0xcc>)
   3a258:	f005 f902 	bl	3f460 <assert_post_action>
   3a25c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   3a260:	b173      	cbz	r3, 3a280 <k_sched_unlock+0x4c>
   3a262:	492a      	ldr	r1, [pc, #168]	; (3a30c <k_sched_unlock+0xd8>)
   3a264:	f240 2337 	movw	r3, #567	; 0x237
   3a268:	4a25      	ldr	r2, [pc, #148]	; (3a300 <k_sched_unlock+0xcc>)
   3a26a:	4826      	ldr	r0, [pc, #152]	; (3a304 <k_sched_unlock+0xd0>)
   3a26c:	f005 f8eb 	bl	3f446 <printk>
   3a270:	4825      	ldr	r0, [pc, #148]	; (3a308 <k_sched_unlock+0xd4>)
   3a272:	f005 f8e8 	bl	3f446 <printk>
   3a276:	f240 2137 	movw	r1, #567	; 0x237
   3a27a:	4821      	ldr	r0, [pc, #132]	; (3a300 <k_sched_unlock+0xcc>)
   3a27c:	f005 f8f0 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3a280:	f04f 0320 	mov.w	r3, #32
   3a284:	f3ef 8511 	mrs	r5, BASEPRI
   3a288:	f383 8811 	msr	BASEPRI, r3
   3a28c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3a290:	481f      	ldr	r0, [pc, #124]	; (3a310 <k_sched_unlock+0xdc>)
   3a292:	f000 fef7 	bl	3b084 <z_spin_lock_valid>
   3a296:	b960      	cbnz	r0, 3a2b2 <k_sched_unlock+0x7e>
   3a298:	491e      	ldr	r1, [pc, #120]	; (3a314 <k_sched_unlock+0xe0>)
   3a29a:	234f      	movs	r3, #79	; 0x4f
   3a29c:	4a1e      	ldr	r2, [pc, #120]	; (3a318 <k_sched_unlock+0xe4>)
   3a29e:	4819      	ldr	r0, [pc, #100]	; (3a304 <k_sched_unlock+0xd0>)
   3a2a0:	f005 f8d1 	bl	3f446 <printk>
   3a2a4:	481d      	ldr	r0, [pc, #116]	; (3a31c <k_sched_unlock+0xe8>)
   3a2a6:	f005 f8ce 	bl	3f446 <printk>
   3a2aa:	214f      	movs	r1, #79	; 0x4f
   3a2ac:	481a      	ldr	r0, [pc, #104]	; (3a318 <k_sched_unlock+0xe4>)
   3a2ae:	f005 f8d7 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3a2b2:	4817      	ldr	r0, [pc, #92]	; (3a310 <k_sched_unlock+0xdc>)
   3a2b4:	f000 ff04 	bl	3b0c0 <z_spin_lock_set_owner>
		++_current->base.sched_locked;
   3a2b8:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   3a2ba:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   3a2bc:	7bd3      	ldrb	r3, [r2, #15]
   3a2be:	3301      	adds	r3, #1
   3a2c0:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   3a2c2:	f7ff ff81 	bl	3a1c8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3a2c6:	4812      	ldr	r0, [pc, #72]	; (3a310 <k_sched_unlock+0xdc>)
   3a2c8:	f000 feea 	bl	3b0a0 <z_spin_unlock_valid>
   3a2cc:	b960      	cbnz	r0, 3a2e8 <k_sched_unlock+0xb4>
   3a2ce:	4914      	ldr	r1, [pc, #80]	; (3a320 <k_sched_unlock+0xec>)
   3a2d0:	2362      	movs	r3, #98	; 0x62
   3a2d2:	4a11      	ldr	r2, [pc, #68]	; (3a318 <k_sched_unlock+0xe4>)
   3a2d4:	480b      	ldr	r0, [pc, #44]	; (3a304 <k_sched_unlock+0xd0>)
   3a2d6:	f005 f8b6 	bl	3f446 <printk>
   3a2da:	4812      	ldr	r0, [pc, #72]	; (3a324 <k_sched_unlock+0xf0>)
   3a2dc:	f005 f8b3 	bl	3f446 <printk>
   3a2e0:	2162      	movs	r1, #98	; 0x62
   3a2e2:	480d      	ldr	r0, [pc, #52]	; (3a318 <k_sched_unlock+0xe4>)
   3a2e4:	f005 f8bc 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3a2e8:	f385 8811 	msr	BASEPRI, r5
   3a2ec:	f3bf 8f6f 	isb	sy
}
   3a2f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   3a2f4:	f007 ba34 	b.w	41760 <z_reschedule_unlocked>
   3a2f8:	2002a1d8 	.word	0x2002a1d8
   3a2fc:	0004a29d 	.word	0x0004a29d
   3a300:	0004a2fb 	.word	0x0004a2fb
   3a304:	00045316 	.word	0x00045316
   3a308:	0004a182 	.word	0x0004a182
   3a30c:	0004a263 	.word	0x0004a263
   3a310:	2002a210 	.word	0x2002a210
   3a314:	00045d2d 	.word	0x00045d2d
   3a318:	00045d0e 	.word	0x00045d0e
   3a31c:	00045d42 	.word	0x00045d42
   3a320:	00045d57 	.word	0x00045d57
   3a324:	00045d6e 	.word	0x00045d6e

0003a328 <z_add_thread_to_ready_q>:
{
   3a328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a32a:	4604      	mov	r4, r0
	__asm__ volatile(
   3a32c:	f04f 0320 	mov.w	r3, #32
   3a330:	f3ef 8511 	mrs	r5, BASEPRI
   3a334:	f383 8811 	msr	BASEPRI, r3
   3a338:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3a33c:	482e      	ldr	r0, [pc, #184]	; (3a3f8 <z_add_thread_to_ready_q+0xd0>)
   3a33e:	f000 fea1 	bl	3b084 <z_spin_lock_valid>
   3a342:	b960      	cbnz	r0, 3a35e <z_add_thread_to_ready_q+0x36>
   3a344:	492d      	ldr	r1, [pc, #180]	; (3a3fc <z_add_thread_to_ready_q+0xd4>)
   3a346:	234f      	movs	r3, #79	; 0x4f
   3a348:	4a2d      	ldr	r2, [pc, #180]	; (3a400 <z_add_thread_to_ready_q+0xd8>)
   3a34a:	482e      	ldr	r0, [pc, #184]	; (3a404 <z_add_thread_to_ready_q+0xdc>)
   3a34c:	f005 f87b 	bl	3f446 <printk>
   3a350:	482d      	ldr	r0, [pc, #180]	; (3a408 <z_add_thread_to_ready_q+0xe0>)
   3a352:	f005 f878 	bl	3f446 <printk>
   3a356:	214f      	movs	r1, #79	; 0x4f
   3a358:	4829      	ldr	r0, [pc, #164]	; (3a400 <z_add_thread_to_ready_q+0xd8>)
   3a35a:	f005 f881 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3a35e:	4826      	ldr	r0, [pc, #152]	; (3a3f8 <z_add_thread_to_ready_q+0xd0>)
   3a360:	f000 feae 	bl	3b0c0 <z_spin_lock_set_owner>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3a364:	4b29      	ldr	r3, [pc, #164]	; (3a40c <z_add_thread_to_ready_q+0xe4>)
   3a366:	429c      	cmp	r4, r3
   3a368:	d10b      	bne.n	3a382 <z_add_thread_to_ready_q+0x5a>
   3a36a:	4929      	ldr	r1, [pc, #164]	; (3a410 <z_add_thread_to_ready_q+0xe8>)
   3a36c:	4825      	ldr	r0, [pc, #148]	; (3a404 <z_add_thread_to_ready_q+0xdc>)
   3a36e:	f240 2387 	movw	r3, #647	; 0x287
   3a372:	4a28      	ldr	r2, [pc, #160]	; (3a414 <z_add_thread_to_ready_q+0xec>)
   3a374:	f005 f867 	bl	3f446 <printk>
   3a378:	f240 2187 	movw	r1, #647	; 0x287
   3a37c:	4825      	ldr	r0, [pc, #148]	; (3a414 <z_add_thread_to_ready_q+0xec>)
   3a37e:	f005 f86f 	bl	3f460 <assert_post_action>
	return list->head == list;
   3a382:	4a25      	ldr	r2, [pc, #148]	; (3a418 <z_add_thread_to_ready_q+0xf0>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3a384:	f102 0128 	add.w	r1, r2, #40	; 0x28
   3a388:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   3a38c:	428b      	cmp	r3, r1
   3a38e:	d02d      	beq.n	3a3ec <z_add_thread_to_ready_q+0xc4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3a390:	b363      	cbz	r3, 3a3ec <z_add_thread_to_ready_q+0xc4>
	if (t1->base.prio < t2->base.prio) {
   3a392:	f994 600e 	ldrsb.w	r6, [r4, #14]
   3a396:	f993 700e 	ldrsb.w	r7, [r3, #14]
   3a39a:	42b7      	cmp	r7, r6
   3a39c:	dd21      	ble.n	3a3e2 <z_add_thread_to_ready_q+0xba>
	node->prev = successor->prev;
   3a39e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3a3a0:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   3a3a4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3a3a6:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   3a3a8:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   3a3aa:	2000      	movs	r0, #0
   3a3ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3a3b0:	7363      	strb	r3, [r4, #13]
   3a3b2:	f7ff ff09 	bl	3a1c8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3a3b6:	4810      	ldr	r0, [pc, #64]	; (3a3f8 <z_add_thread_to_ready_q+0xd0>)
   3a3b8:	f000 fe72 	bl	3b0a0 <z_spin_unlock_valid>
   3a3bc:	b960      	cbnz	r0, 3a3d8 <z_add_thread_to_ready_q+0xb0>
   3a3be:	4917      	ldr	r1, [pc, #92]	; (3a41c <z_add_thread_to_ready_q+0xf4>)
   3a3c0:	2362      	movs	r3, #98	; 0x62
   3a3c2:	4a0f      	ldr	r2, [pc, #60]	; (3a400 <z_add_thread_to_ready_q+0xd8>)
   3a3c4:	480f      	ldr	r0, [pc, #60]	; (3a404 <z_add_thread_to_ready_q+0xdc>)
   3a3c6:	f005 f83e 	bl	3f446 <printk>
   3a3ca:	4815      	ldr	r0, [pc, #84]	; (3a420 <z_add_thread_to_ready_q+0xf8>)
   3a3cc:	f005 f83b 	bl	3f446 <printk>
   3a3d0:	2162      	movs	r1, #98	; 0x62
   3a3d2:	480b      	ldr	r0, [pc, #44]	; (3a400 <z_add_thread_to_ready_q+0xd8>)
   3a3d4:	f005 f844 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3a3d8:	f385 8811 	msr	BASEPRI, r5
   3a3dc:	f3bf 8f6f 	isb	sy
}
   3a3e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   3a3e2:	4298      	cmp	r0, r3
   3a3e4:	d002      	beq.n	3a3ec <z_add_thread_to_ready_q+0xc4>
   3a3e6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3a3e8:	2b00      	cmp	r3, #0
   3a3ea:	d1d4      	bne.n	3a396 <z_add_thread_to_ready_q+0x6e>
	node->prev = list->tail;
   3a3ec:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   3a3f0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   3a3f2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3a3f4:	62d4      	str	r4, [r2, #44]	; 0x2c
   3a3f6:	e7d7      	b.n	3a3a8 <z_add_thread_to_ready_q+0x80>
   3a3f8:	2002a210 	.word	0x2002a210
   3a3fc:	00045d2d 	.word	0x00045d2d
   3a400:	00045d0e 	.word	0x00045d0e
   3a404:	00045316 	.word	0x00045316
   3a408:	00045d42 	.word	0x00045d42
   3a40c:	20026008 	.word	0x20026008
   3a410:	0004a34c 	.word	0x0004a34c
   3a414:	0004a2fb 	.word	0x0004a2fb
   3a418:	2002a1d8 	.word	0x2002a1d8
   3a41c:	00045d57 	.word	0x00045d57
   3a420:	00045d6e 	.word	0x00045d6e

0003a424 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   3a424:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   3a428:	b570      	push	{r4, r5, r6, lr}
   3a42a:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   3a42c:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   3a430:	2b00      	cmp	r3, #0
   3a432:	d040      	beq.n	3a4b6 <z_thread_timeout+0x92>
	__asm__ volatile(
   3a434:	f04f 0320 	mov.w	r3, #32
   3a438:	f3ef 8611 	mrs	r6, BASEPRI
   3a43c:	f383 8811 	msr	BASEPRI, r3
   3a440:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3a444:	4824      	ldr	r0, [pc, #144]	; (3a4d8 <z_thread_timeout+0xb4>)
   3a446:	f000 fe1d 	bl	3b084 <z_spin_lock_valid>
   3a44a:	b960      	cbnz	r0, 3a466 <z_thread_timeout+0x42>
   3a44c:	4923      	ldr	r1, [pc, #140]	; (3a4dc <z_thread_timeout+0xb8>)
   3a44e:	234f      	movs	r3, #79	; 0x4f
   3a450:	4a23      	ldr	r2, [pc, #140]	; (3a4e0 <z_thread_timeout+0xbc>)
   3a452:	4824      	ldr	r0, [pc, #144]	; (3a4e4 <z_thread_timeout+0xc0>)
   3a454:	f004 fff7 	bl	3f446 <printk>
   3a458:	4823      	ldr	r0, [pc, #140]	; (3a4e8 <z_thread_timeout+0xc4>)
   3a45a:	f004 fff4 	bl	3f446 <printk>
   3a45e:	214f      	movs	r1, #79	; 0x4f
   3a460:	481f      	ldr	r0, [pc, #124]	; (3a4e0 <z_thread_timeout+0xbc>)
   3a462:	f004 fffd 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3a466:	481c      	ldr	r0, [pc, #112]	; (3a4d8 <z_thread_timeout+0xb4>)
   3a468:	f000 fe2a 	bl	3b0c0 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   3a46c:	f1a4 0010 	sub.w	r0, r4, #16
   3a470:	f7ff fc9c 	bl	39dac <pended_on.isra.16>
   3a474:	4629      	mov	r1, r5
   3a476:	f7ff fe25 	bl	3a0c4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   3a47a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3a47e:	4816      	ldr	r0, [pc, #88]	; (3a4d8 <z_thread_timeout+0xb4>)
   3a480:	f023 0302 	bic.w	r3, r3, #2
   3a484:	f804 3c0b 	strb.w	r3, [r4, #-11]
   3a488:	f000 fe0a 	bl	3b0a0 <z_spin_unlock_valid>
   3a48c:	b960      	cbnz	r0, 3a4a8 <z_thread_timeout+0x84>
   3a48e:	4917      	ldr	r1, [pc, #92]	; (3a4ec <z_thread_timeout+0xc8>)
   3a490:	2362      	movs	r3, #98	; 0x62
   3a492:	4a13      	ldr	r2, [pc, #76]	; (3a4e0 <z_thread_timeout+0xbc>)
   3a494:	4813      	ldr	r0, [pc, #76]	; (3a4e4 <z_thread_timeout+0xc0>)
   3a496:	f004 ffd6 	bl	3f446 <printk>
   3a49a:	4815      	ldr	r0, [pc, #84]	; (3a4f0 <z_thread_timeout+0xcc>)
   3a49c:	f004 ffd3 	bl	3f446 <printk>
   3a4a0:	2162      	movs	r1, #98	; 0x62
   3a4a2:	480f      	ldr	r0, [pc, #60]	; (3a4e0 <z_thread_timeout+0xbc>)
   3a4a4:	f004 ffdc 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3a4a8:	f386 8811 	msr	BASEPRI, r6
   3a4ac:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   3a4b0:	2300      	movs	r3, #0
   3a4b2:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   3a4b6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   3a4ba:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   3a4bc:	f023 0314 	bic.w	r3, r3, #20
   3a4c0:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   3a4c4:	f007 f92e 	bl	41724 <z_is_thread_ready>
   3a4c8:	b120      	cbz	r0, 3a4d4 <z_thread_timeout+0xb0>
		z_add_thread_to_ready_q(thread);
   3a4ca:	4628      	mov	r0, r5
}
   3a4cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3a4d0:	f7ff bf2a 	b.w	3a328 <z_add_thread_to_ready_q>
   3a4d4:	bd70      	pop	{r4, r5, r6, pc}
   3a4d6:	bf00      	nop
   3a4d8:	2002a210 	.word	0x2002a210
   3a4dc:	00045d2d 	.word	0x00045d2d
   3a4e0:	00045d0e 	.word	0x00045d0e
   3a4e4:	00045316 	.word	0x00045316
   3a4e8:	00045d42 	.word	0x00045d42
   3a4ec:	00045d57 	.word	0x00045d57
   3a4f0:	00045d6e 	.word	0x00045d6e

0003a4f4 <z_move_thread_to_end_of_prio_q>:
{
   3a4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a4f6:	4604      	mov	r4, r0
	__asm__ volatile(
   3a4f8:	f04f 0320 	mov.w	r3, #32
   3a4fc:	f3ef 8511 	mrs	r5, BASEPRI
   3a500:	f383 8811 	msr	BASEPRI, r3
   3a504:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3a508:	4834      	ldr	r0, [pc, #208]	; (3a5dc <z_move_thread_to_end_of_prio_q+0xe8>)
   3a50a:	f000 fdbb 	bl	3b084 <z_spin_lock_valid>
   3a50e:	b960      	cbnz	r0, 3a52a <z_move_thread_to_end_of_prio_q+0x36>
   3a510:	4933      	ldr	r1, [pc, #204]	; (3a5e0 <z_move_thread_to_end_of_prio_q+0xec>)
   3a512:	234f      	movs	r3, #79	; 0x4f
   3a514:	4a33      	ldr	r2, [pc, #204]	; (3a5e4 <z_move_thread_to_end_of_prio_q+0xf0>)
   3a516:	4834      	ldr	r0, [pc, #208]	; (3a5e8 <z_move_thread_to_end_of_prio_q+0xf4>)
   3a518:	f004 ff95 	bl	3f446 <printk>
   3a51c:	4833      	ldr	r0, [pc, #204]	; (3a5ec <z_move_thread_to_end_of_prio_q+0xf8>)
   3a51e:	f004 ff92 	bl	3f446 <printk>
   3a522:	214f      	movs	r1, #79	; 0x4f
   3a524:	482f      	ldr	r0, [pc, #188]	; (3a5e4 <z_move_thread_to_end_of_prio_q+0xf0>)
   3a526:	f004 ff9b 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3a52a:	482c      	ldr	r0, [pc, #176]	; (3a5dc <z_move_thread_to_end_of_prio_q+0xe8>)
   3a52c:	f000 fdc8 	bl	3b0c0 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   3a530:	7b63      	ldrb	r3, [r4, #13]
   3a532:	065a      	lsls	r2, r3, #25
   3a534:	d503      	bpl.n	3a53e <z_move_thread_to_end_of_prio_q+0x4a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   3a536:	4621      	mov	r1, r4
   3a538:	482d      	ldr	r0, [pc, #180]	; (3a5f0 <z_move_thread_to_end_of_prio_q+0xfc>)
   3a53a:	f7ff fdc3 	bl	3a0c4 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3a53e:	4b2d      	ldr	r3, [pc, #180]	; (3a5f4 <z_move_thread_to_end_of_prio_q+0x100>)
   3a540:	429c      	cmp	r4, r3
   3a542:	d10b      	bne.n	3a55c <z_move_thread_to_end_of_prio_q+0x68>
   3a544:	492c      	ldr	r1, [pc, #176]	; (3a5f8 <z_move_thread_to_end_of_prio_q+0x104>)
   3a546:	4828      	ldr	r0, [pc, #160]	; (3a5e8 <z_move_thread_to_end_of_prio_q+0xf4>)
   3a548:	f240 2387 	movw	r3, #647	; 0x287
   3a54c:	4a2b      	ldr	r2, [pc, #172]	; (3a5fc <z_move_thread_to_end_of_prio_q+0x108>)
   3a54e:	f004 ff7a 	bl	3f446 <printk>
   3a552:	f240 2187 	movw	r1, #647	; 0x287
   3a556:	4829      	ldr	r0, [pc, #164]	; (3a5fc <z_move_thread_to_end_of_prio_q+0x108>)
   3a558:	f004 ff82 	bl	3f460 <assert_post_action>
	return list->head == list;
   3a55c:	4a28      	ldr	r2, [pc, #160]	; (3a600 <z_move_thread_to_end_of_prio_q+0x10c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3a55e:	f102 0128 	add.w	r1, r2, #40	; 0x28
   3a562:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   3a566:	428b      	cmp	r3, r1
   3a568:	d031      	beq.n	3a5ce <z_move_thread_to_end_of_prio_q+0xda>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3a56a:	2b00      	cmp	r3, #0
   3a56c:	d02f      	beq.n	3a5ce <z_move_thread_to_end_of_prio_q+0xda>
	if (t1->base.prio < t2->base.prio) {
   3a56e:	f994 600e 	ldrsb.w	r6, [r4, #14]
   3a572:	f993 700e 	ldrsb.w	r7, [r3, #14]
   3a576:	42b7      	cmp	r7, r6
   3a578:	dd24      	ble.n	3a5c4 <z_move_thread_to_end_of_prio_q+0xd0>
	node->prev = successor->prev;
   3a57a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   3a57c:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   3a580:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   3a582:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   3a584:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   3a586:	6890      	ldr	r0, [r2, #8]
   3a588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3a58c:	7363      	strb	r3, [r4, #13]
   3a58e:	1b03      	subs	r3, r0, r4
   3a590:	4258      	negs	r0, r3
   3a592:	4158      	adcs	r0, r3
   3a594:	f7ff fe18 	bl	3a1c8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3a598:	4810      	ldr	r0, [pc, #64]	; (3a5dc <z_move_thread_to_end_of_prio_q+0xe8>)
   3a59a:	f000 fd81 	bl	3b0a0 <z_spin_unlock_valid>
   3a59e:	b960      	cbnz	r0, 3a5ba <z_move_thread_to_end_of_prio_q+0xc6>
   3a5a0:	4918      	ldr	r1, [pc, #96]	; (3a604 <z_move_thread_to_end_of_prio_q+0x110>)
   3a5a2:	2362      	movs	r3, #98	; 0x62
   3a5a4:	4a0f      	ldr	r2, [pc, #60]	; (3a5e4 <z_move_thread_to_end_of_prio_q+0xf0>)
   3a5a6:	4810      	ldr	r0, [pc, #64]	; (3a5e8 <z_move_thread_to_end_of_prio_q+0xf4>)
   3a5a8:	f004 ff4d 	bl	3f446 <printk>
   3a5ac:	4816      	ldr	r0, [pc, #88]	; (3a608 <z_move_thread_to_end_of_prio_q+0x114>)
   3a5ae:	f004 ff4a 	bl	3f446 <printk>
   3a5b2:	2162      	movs	r1, #98	; 0x62
   3a5b4:	480b      	ldr	r0, [pc, #44]	; (3a5e4 <z_move_thread_to_end_of_prio_q+0xf0>)
   3a5b6:	f004 ff53 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3a5ba:	f385 8811 	msr	BASEPRI, r5
   3a5be:	f3bf 8f6f 	isb	sy
}
   3a5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   3a5c4:	4298      	cmp	r0, r3
   3a5c6:	d002      	beq.n	3a5ce <z_move_thread_to_end_of_prio_q+0xda>
   3a5c8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3a5ca:	2b00      	cmp	r3, #0
   3a5cc:	d1d1      	bne.n	3a572 <z_move_thread_to_end_of_prio_q+0x7e>
	node->prev = list->tail;
   3a5ce:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   3a5d2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   3a5d4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3a5d6:	62d4      	str	r4, [r2, #44]	; 0x2c
   3a5d8:	e7d4      	b.n	3a584 <z_move_thread_to_end_of_prio_q+0x90>
   3a5da:	bf00      	nop
   3a5dc:	2002a210 	.word	0x2002a210
   3a5e0:	00045d2d 	.word	0x00045d2d
   3a5e4:	00045d0e 	.word	0x00045d0e
   3a5e8:	00045316 	.word	0x00045316
   3a5ec:	00045d42 	.word	0x00045d42
   3a5f0:	2002a200 	.word	0x2002a200
   3a5f4:	20026008 	.word	0x20026008
   3a5f8:	0004a34c 	.word	0x0004a34c
   3a5fc:	0004a2fb 	.word	0x0004a2fb
   3a600:	2002a1d8 	.word	0x2002a1d8
   3a604:	00045d57 	.word	0x00045d57
   3a608:	00045d6e 	.word	0x00045d6e

0003a60c <z_time_slice>:
	if (pending_current == _current) {
   3a60c:	4a15      	ldr	r2, [pc, #84]	; (3a664 <z_time_slice+0x58>)
   3a60e:	4916      	ldr	r1, [pc, #88]	; (3a668 <z_time_slice+0x5c>)
{
   3a610:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   3a612:	680c      	ldr	r4, [r1, #0]
   3a614:	6893      	ldr	r3, [r2, #8]
   3a616:	42a3      	cmp	r3, r4
   3a618:	4614      	mov	r4, r2
   3a61a:	d103      	bne.n	3a624 <z_time_slice+0x18>
}
   3a61c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   3a620:	f7ff bbdc 	b.w	39ddc <z_reset_time_slice>
	pending_current = NULL;
   3a624:	2500      	movs	r5, #0
   3a626:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   3a628:	4910      	ldr	r1, [pc, #64]	; (3a66c <z_time_slice+0x60>)
   3a62a:	6809      	ldr	r1, [r1, #0]
   3a62c:	b1b9      	cbz	r1, 3a65e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   3a62e:	89d9      	ldrh	r1, [r3, #14]
   3a630:	297f      	cmp	r1, #127	; 0x7f
   3a632:	d814      	bhi.n	3a65e <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
   3a634:	490e      	ldr	r1, [pc, #56]	; (3a670 <z_time_slice+0x64>)
   3a636:	f993 500e 	ldrsb.w	r5, [r3, #14]
   3a63a:	6809      	ldr	r1, [r1, #0]
   3a63c:	428d      	cmp	r5, r1
   3a63e:	db0e      	blt.n	3a65e <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
   3a640:	490c      	ldr	r1, [pc, #48]	; (3a674 <z_time_slice+0x68>)
   3a642:	428b      	cmp	r3, r1
   3a644:	d00b      	beq.n	3a65e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   3a646:	6999      	ldr	r1, [r3, #24]
   3a648:	b949      	cbnz	r1, 3a65e <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   3a64a:	6911      	ldr	r1, [r2, #16]
   3a64c:	4281      	cmp	r1, r0
   3a64e:	dc03      	bgt.n	3a658 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   3a650:	4618      	mov	r0, r3
   3a652:	f7ff ff4f 	bl	3a4f4 <z_move_thread_to_end_of_prio_q>
   3a656:	e7e1      	b.n	3a61c <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   3a658:	1a09      	subs	r1, r1, r0
   3a65a:	6111      	str	r1, [r2, #16]
}
   3a65c:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   3a65e:	2300      	movs	r3, #0
   3a660:	6123      	str	r3, [r4, #16]
   3a662:	e7fb      	b.n	3a65c <z_time_slice+0x50>
   3a664:	2002a1d8 	.word	0x2002a1d8
   3a668:	2002a20c 	.word	0x2002a20c
   3a66c:	2002a218 	.word	0x2002a218
   3a670:	2002a214 	.word	0x2002a214
   3a674:	20026008 	.word	0x20026008

0003a678 <z_remove_thread_from_ready_q>:
{
   3a678:	b538      	push	{r3, r4, r5, lr}
   3a67a:	4604      	mov	r4, r0
	__asm__ volatile(
   3a67c:	f04f 0320 	mov.w	r3, #32
   3a680:	f3ef 8511 	mrs	r5, BASEPRI
   3a684:	f383 8811 	msr	BASEPRI, r3
   3a688:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3a68c:	481d      	ldr	r0, [pc, #116]	; (3a704 <z_remove_thread_from_ready_q+0x8c>)
   3a68e:	f000 fcf9 	bl	3b084 <z_spin_lock_valid>
   3a692:	b960      	cbnz	r0, 3a6ae <z_remove_thread_from_ready_q+0x36>
   3a694:	491c      	ldr	r1, [pc, #112]	; (3a708 <z_remove_thread_from_ready_q+0x90>)
   3a696:	234f      	movs	r3, #79	; 0x4f
   3a698:	4a1c      	ldr	r2, [pc, #112]	; (3a70c <z_remove_thread_from_ready_q+0x94>)
   3a69a:	481d      	ldr	r0, [pc, #116]	; (3a710 <z_remove_thread_from_ready_q+0x98>)
   3a69c:	f004 fed3 	bl	3f446 <printk>
   3a6a0:	481c      	ldr	r0, [pc, #112]	; (3a714 <z_remove_thread_from_ready_q+0x9c>)
   3a6a2:	f004 fed0 	bl	3f446 <printk>
   3a6a6:	214f      	movs	r1, #79	; 0x4f
   3a6a8:	4818      	ldr	r0, [pc, #96]	; (3a70c <z_remove_thread_from_ready_q+0x94>)
   3a6aa:	f004 fed9 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3a6ae:	4815      	ldr	r0, [pc, #84]	; (3a704 <z_remove_thread_from_ready_q+0x8c>)
   3a6b0:	f000 fd06 	bl	3b0c0 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   3a6b4:	7b63      	ldrb	r3, [r4, #13]
   3a6b6:	065a      	lsls	r2, r3, #25
   3a6b8:	d507      	bpl.n	3a6ca <z_remove_thread_from_ready_q+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   3a6ba:	4621      	mov	r1, r4
   3a6bc:	4816      	ldr	r0, [pc, #88]	; (3a718 <z_remove_thread_from_ready_q+0xa0>)
   3a6be:	f7ff fd01 	bl	3a0c4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   3a6c2:	7b63      	ldrb	r3, [r4, #13]
   3a6c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   3a6c8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   3a6ca:	4b14      	ldr	r3, [pc, #80]	; (3a71c <z_remove_thread_from_ready_q+0xa4>)
   3a6cc:	6898      	ldr	r0, [r3, #8]
   3a6ce:	1b03      	subs	r3, r0, r4
   3a6d0:	4258      	negs	r0, r3
   3a6d2:	4158      	adcs	r0, r3
   3a6d4:	f7ff fd78 	bl	3a1c8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3a6d8:	480a      	ldr	r0, [pc, #40]	; (3a704 <z_remove_thread_from_ready_q+0x8c>)
   3a6da:	f000 fce1 	bl	3b0a0 <z_spin_unlock_valid>
   3a6de:	b960      	cbnz	r0, 3a6fa <z_remove_thread_from_ready_q+0x82>
   3a6e0:	490f      	ldr	r1, [pc, #60]	; (3a720 <z_remove_thread_from_ready_q+0xa8>)
   3a6e2:	2362      	movs	r3, #98	; 0x62
   3a6e4:	4a09      	ldr	r2, [pc, #36]	; (3a70c <z_remove_thread_from_ready_q+0x94>)
   3a6e6:	480a      	ldr	r0, [pc, #40]	; (3a710 <z_remove_thread_from_ready_q+0x98>)
   3a6e8:	f004 fead 	bl	3f446 <printk>
   3a6ec:	480d      	ldr	r0, [pc, #52]	; (3a724 <z_remove_thread_from_ready_q+0xac>)
   3a6ee:	f004 feaa 	bl	3f446 <printk>
   3a6f2:	2162      	movs	r1, #98	; 0x62
   3a6f4:	4805      	ldr	r0, [pc, #20]	; (3a70c <z_remove_thread_from_ready_q+0x94>)
   3a6f6:	f004 feb3 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3a6fa:	f385 8811 	msr	BASEPRI, r5
   3a6fe:	f3bf 8f6f 	isb	sy
}
   3a702:	bd38      	pop	{r3, r4, r5, pc}
   3a704:	2002a210 	.word	0x2002a210
   3a708:	00045d2d 	.word	0x00045d2d
   3a70c:	00045d0e 	.word	0x00045d0e
   3a710:	00045316 	.word	0x00045316
   3a714:	00045d42 	.word	0x00045d42
   3a718:	2002a200 	.word	0x2002a200
   3a71c:	2002a1d8 	.word	0x2002a1d8
   3a720:	00045d57 	.word	0x00045d57
   3a724:	00045d6e 	.word	0x00045d6e

0003a728 <pend>:
{
   3a728:	b570      	push	{r4, r5, r6, lr}
   3a72a:	4604      	mov	r4, r0
   3a72c:	460d      	mov	r5, r1
   3a72e:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   3a730:	f7ff ffa2 	bl	3a678 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   3a734:	7b63      	ldrb	r3, [r4, #13]
   3a736:	f043 0302 	orr.w	r3, r3, #2
   3a73a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   3a73c:	b1fd      	cbz	r5, 3a77e <pend+0x56>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3a73e:	4b2b      	ldr	r3, [pc, #172]	; (3a7ec <pend+0xc4>)
		thread->base.pended_on = wait_q;
   3a740:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3a742:	429c      	cmp	r4, r3
   3a744:	d10b      	bne.n	3a75e <pend+0x36>
   3a746:	492a      	ldr	r1, [pc, #168]	; (3a7f0 <pend+0xc8>)
   3a748:	482a      	ldr	r0, [pc, #168]	; (3a7f4 <pend+0xcc>)
   3a74a:	f240 2387 	movw	r3, #647	; 0x287
   3a74e:	4a2a      	ldr	r2, [pc, #168]	; (3a7f8 <pend+0xd0>)
   3a750:	f004 fe79 	bl	3f446 <printk>
   3a754:	f240 2187 	movw	r1, #647	; 0x287
   3a758:	4827      	ldr	r0, [pc, #156]	; (3a7f8 <pend+0xd0>)
   3a75a:	f004 fe81 	bl	3f460 <assert_post_action>
	return list->head == list;
   3a75e:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3a760:	429d      	cmp	r5, r3
   3a762:	d03b      	beq.n	3a7dc <pend+0xb4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3a764:	2b00      	cmp	r3, #0
   3a766:	d039      	beq.n	3a7dc <pend+0xb4>
	if (t1->base.prio < t2->base.prio) {
   3a768:	f994 200e 	ldrsb.w	r2, [r4, #14]
   3a76c:	f993 100e 	ldrsb.w	r1, [r3, #14]
   3a770:	4291      	cmp	r1, r2
   3a772:	dd2d      	ble.n	3a7d0 <pend+0xa8>
	node->prev = successor->prev;
   3a774:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3a776:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   3a77a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3a77c:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   3a77e:	1c73      	adds	r3, r6, #1
   3a780:	d033      	beq.n	3a7ea <pend+0xc2>
		__ASSERT(timeout >= 0,
   3a782:	2e00      	cmp	r6, #0
   3a784:	da0e      	bge.n	3a7a4 <pend+0x7c>
   3a786:	491d      	ldr	r1, [pc, #116]	; (3a7fc <pend+0xd4>)
   3a788:	f44f 73bb 	mov.w	r3, #374	; 0x176
   3a78c:	4a1a      	ldr	r2, [pc, #104]	; (3a7f8 <pend+0xd0>)
   3a78e:	4819      	ldr	r0, [pc, #100]	; (3a7f4 <pend+0xcc>)
   3a790:	f004 fe59 	bl	3f446 <printk>
   3a794:	481a      	ldr	r0, [pc, #104]	; (3a800 <pend+0xd8>)
   3a796:	f004 fe56 	bl	3f446 <printk>
   3a79a:	f44f 71bb 	mov.w	r1, #374	; 0x176
   3a79e:	4816      	ldr	r0, [pc, #88]	; (3a7f8 <pend+0xd0>)
   3a7a0:	f004 fe5e 	bl	3f460 <assert_post_action>
   3a7a4:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   3a7a8:	f240 30e7 	movw	r0, #999	; 0x3e7
   3a7ac:	2100      	movs	r1, #0
   3a7ae:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   3a7b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3a7b6:	fbc5 0106 	smlal	r0, r1, r5, r6
   3a7ba:	2300      	movs	r3, #0
   3a7bc:	f7de face 	bl	18d5c <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   3a7c0:	4910      	ldr	r1, [pc, #64]	; (3a804 <pend+0xdc>)
   3a7c2:	1c42      	adds	r2, r0, #1
   3a7c4:	f104 0018 	add.w	r0, r4, #24
}
   3a7c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3a7cc:	f000 bfc2 	b.w	3b754 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   3a7d0:	6869      	ldr	r1, [r5, #4]
   3a7d2:	428b      	cmp	r3, r1
   3a7d4:	d002      	beq.n	3a7dc <pend+0xb4>
   3a7d6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3a7d8:	2b00      	cmp	r3, #0
   3a7da:	d1c7      	bne.n	3a76c <pend+0x44>
	node->prev = list->tail;
   3a7dc:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   3a7de:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   3a7e0:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   3a7e2:	686b      	ldr	r3, [r5, #4]
   3a7e4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3a7e6:	606c      	str	r4, [r5, #4]
   3a7e8:	e7c9      	b.n	3a77e <pend+0x56>
}
   3a7ea:	bd70      	pop	{r4, r5, r6, pc}
   3a7ec:	20026008 	.word	0x20026008
   3a7f0:	0004a34c 	.word	0x0004a34c
   3a7f4:	00045316 	.word	0x00045316
   3a7f8:	0004a2fb 	.word	0x0004a2fb
   3a7fc:	0004a2c5 	.word	0x0004a2c5
   3a800:	0004a2d2 	.word	0x0004a2d2
   3a804:	0003a425 	.word	0x0003a425

0003a808 <z_pend_curr_irqlock>:
{
   3a808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a80a:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   3a80c:	4d21      	ldr	r5, [pc, #132]	; (3a894 <z_pend_curr_irqlock+0x8c>)
	pending_current = _current;
   3a80e:	4c22      	ldr	r4, [pc, #136]	; (3a898 <z_pend_curr_irqlock+0x90>)
	pend(_current, wait_q, timeout);
   3a810:	68a8      	ldr	r0, [r5, #8]
   3a812:	f7ff ff89 	bl	3a728 <pend>
	pending_current = _current;
   3a816:	68ab      	ldr	r3, [r5, #8]
   3a818:	4630      	mov	r0, r6
   3a81a:	6023      	str	r3, [r4, #0]
   3a81c:	f7e5 fd94 	bl	20348 <arch_swap>
   3a820:	4606      	mov	r6, r0
	__asm__ volatile(
   3a822:	f04f 0320 	mov.w	r3, #32
   3a826:	f3ef 8711 	mrs	r7, BASEPRI
   3a82a:	f383 8811 	msr	BASEPRI, r3
   3a82e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3a832:	481a      	ldr	r0, [pc, #104]	; (3a89c <z_pend_curr_irqlock+0x94>)
   3a834:	f000 fc26 	bl	3b084 <z_spin_lock_valid>
   3a838:	b960      	cbnz	r0, 3a854 <z_pend_curr_irqlock+0x4c>
   3a83a:	4919      	ldr	r1, [pc, #100]	; (3a8a0 <z_pend_curr_irqlock+0x98>)
   3a83c:	234f      	movs	r3, #79	; 0x4f
   3a83e:	4a19      	ldr	r2, [pc, #100]	; (3a8a4 <z_pend_curr_irqlock+0x9c>)
   3a840:	4819      	ldr	r0, [pc, #100]	; (3a8a8 <z_pend_curr_irqlock+0xa0>)
   3a842:	f004 fe00 	bl	3f446 <printk>
   3a846:	4819      	ldr	r0, [pc, #100]	; (3a8ac <z_pend_curr_irqlock+0xa4>)
   3a848:	f004 fdfd 	bl	3f446 <printk>
   3a84c:	214f      	movs	r1, #79	; 0x4f
   3a84e:	4815      	ldr	r0, [pc, #84]	; (3a8a4 <z_pend_curr_irqlock+0x9c>)
   3a850:	f004 fe06 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3a854:	4811      	ldr	r0, [pc, #68]	; (3a89c <z_pend_curr_irqlock+0x94>)
   3a856:	f000 fc33 	bl	3b0c0 <z_spin_lock_set_owner>
		if (pending_current == _current) {
   3a85a:	6823      	ldr	r3, [r4, #0]
   3a85c:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3a85e:	480f      	ldr	r0, [pc, #60]	; (3a89c <z_pend_curr_irqlock+0x94>)
   3a860:	429a      	cmp	r2, r3
			pending_current = NULL;
   3a862:	bf04      	itt	eq
   3a864:	2300      	moveq	r3, #0
   3a866:	6023      	streq	r3, [r4, #0]
   3a868:	f000 fc1a 	bl	3b0a0 <z_spin_unlock_valid>
   3a86c:	b960      	cbnz	r0, 3a888 <z_pend_curr_irqlock+0x80>
   3a86e:	4910      	ldr	r1, [pc, #64]	; (3a8b0 <z_pend_curr_irqlock+0xa8>)
   3a870:	2362      	movs	r3, #98	; 0x62
   3a872:	4a0c      	ldr	r2, [pc, #48]	; (3a8a4 <z_pend_curr_irqlock+0x9c>)
   3a874:	480c      	ldr	r0, [pc, #48]	; (3a8a8 <z_pend_curr_irqlock+0xa0>)
   3a876:	f004 fde6 	bl	3f446 <printk>
   3a87a:	480e      	ldr	r0, [pc, #56]	; (3a8b4 <z_pend_curr_irqlock+0xac>)
   3a87c:	f004 fde3 	bl	3f446 <printk>
   3a880:	2162      	movs	r1, #98	; 0x62
   3a882:	4808      	ldr	r0, [pc, #32]	; (3a8a4 <z_pend_curr_irqlock+0x9c>)
   3a884:	f004 fdec 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3a888:	f387 8811 	msr	BASEPRI, r7
   3a88c:	f3bf 8f6f 	isb	sy
}
   3a890:	4630      	mov	r0, r6
   3a892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3a894:	2002a1d8 	.word	0x2002a1d8
   3a898:	2002a20c 	.word	0x2002a20c
   3a89c:	2002a210 	.word	0x2002a210
   3a8a0:	00045d2d 	.word	0x00045d2d
   3a8a4:	00045d0e 	.word	0x00045d0e
   3a8a8:	00045316 	.word	0x00045316
   3a8ac:	00045d42 	.word	0x00045d42
   3a8b0:	00045d57 	.word	0x00045d57
   3a8b4:	00045d6e 	.word	0x00045d6e

0003a8b8 <z_pend_curr>:
{
   3a8b8:	b538      	push	{r3, r4, r5, lr}
   3a8ba:	4605      	mov	r5, r0
   3a8bc:	460c      	mov	r4, r1
   3a8be:	4611      	mov	r1, r2
	pending_current = _current;
   3a8c0:	4a0e      	ldr	r2, [pc, #56]	; (3a8fc <z_pend_curr+0x44>)
   3a8c2:	6890      	ldr	r0, [r2, #8]
   3a8c4:	4a0e      	ldr	r2, [pc, #56]	; (3a900 <z_pend_curr+0x48>)
   3a8c6:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   3a8c8:	461a      	mov	r2, r3
   3a8ca:	f7ff ff2d 	bl	3a728 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3a8ce:	4628      	mov	r0, r5
   3a8d0:	f000 fbe6 	bl	3b0a0 <z_spin_unlock_valid>
   3a8d4:	b960      	cbnz	r0, 3a8f0 <z_pend_curr+0x38>
   3a8d6:	490b      	ldr	r1, [pc, #44]	; (3a904 <z_pend_curr+0x4c>)
   3a8d8:	2379      	movs	r3, #121	; 0x79
   3a8da:	4a0b      	ldr	r2, [pc, #44]	; (3a908 <z_pend_curr+0x50>)
   3a8dc:	480b      	ldr	r0, [pc, #44]	; (3a90c <z_pend_curr+0x54>)
   3a8de:	f004 fdb2 	bl	3f446 <printk>
   3a8e2:	480b      	ldr	r0, [pc, #44]	; (3a910 <z_pend_curr+0x58>)
   3a8e4:	f004 fdaf 	bl	3f446 <printk>
   3a8e8:	2179      	movs	r1, #121	; 0x79
   3a8ea:	4807      	ldr	r0, [pc, #28]	; (3a908 <z_pend_curr+0x50>)
   3a8ec:	f004 fdb8 	bl	3f460 <assert_post_action>
   3a8f0:	4620      	mov	r0, r4
}
   3a8f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3a8f6:	f7e5 bd27 	b.w	20348 <arch_swap>
   3a8fa:	bf00      	nop
   3a8fc:	2002a1d8 	.word	0x2002a1d8
   3a900:	2002a20c 	.word	0x2002a20c
   3a904:	00045d57 	.word	0x00045d57
   3a908:	00045d0e 	.word	0x00045d0e
   3a90c:	00045316 	.word	0x00045316
   3a910:	00045d6e 	.word	0x00045d6e

0003a914 <z_set_prio>:
{
   3a914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a916:	4604      	mov	r4, r0
   3a918:	460d      	mov	r5, r1
	__asm__ volatile(
   3a91a:	f04f 0320 	mov.w	r3, #32
   3a91e:	f3ef 8611 	mrs	r6, BASEPRI
   3a922:	f383 8811 	msr	BASEPRI, r3
   3a926:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3a92a:	4834      	ldr	r0, [pc, #208]	; (3a9fc <z_set_prio+0xe8>)
   3a92c:	f000 fbaa 	bl	3b084 <z_spin_lock_valid>
   3a930:	b960      	cbnz	r0, 3a94c <z_set_prio+0x38>
   3a932:	4933      	ldr	r1, [pc, #204]	; (3aa00 <z_set_prio+0xec>)
   3a934:	234f      	movs	r3, #79	; 0x4f
   3a936:	4a33      	ldr	r2, [pc, #204]	; (3aa04 <z_set_prio+0xf0>)
   3a938:	4833      	ldr	r0, [pc, #204]	; (3aa08 <z_set_prio+0xf4>)
   3a93a:	f004 fd84 	bl	3f446 <printk>
   3a93e:	4833      	ldr	r0, [pc, #204]	; (3aa0c <z_set_prio+0xf8>)
   3a940:	f004 fd81 	bl	3f446 <printk>
   3a944:	214f      	movs	r1, #79	; 0x4f
   3a946:	482f      	ldr	r0, [pc, #188]	; (3aa04 <z_set_prio+0xf0>)
   3a948:	f004 fd8a 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3a94c:	482b      	ldr	r0, [pc, #172]	; (3a9fc <z_set_prio+0xe8>)
   3a94e:	f000 fbb7 	bl	3b0c0 <z_spin_lock_set_owner>
		need_sched = z_is_thread_ready(thread);
   3a952:	4620      	mov	r0, r4
   3a954:	f006 fee6 	bl	41724 <z_is_thread_ready>
		if (need_sched) {
   3a958:	b26d      	sxtb	r5, r5
   3a95a:	4607      	mov	r7, r0
   3a95c:	2800      	cmp	r0, #0
   3a95e:	d04b      	beq.n	3a9f8 <z_set_prio+0xe4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   3a960:	4621      	mov	r1, r4
   3a962:	482b      	ldr	r0, [pc, #172]	; (3aa10 <z_set_prio+0xfc>)
   3a964:	f7ff fbae 	bl	3a0c4 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3a968:	4b2a      	ldr	r3, [pc, #168]	; (3aa14 <z_set_prio+0x100>)
				thread->base.prio = prio;
   3a96a:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3a96c:	429c      	cmp	r4, r3
   3a96e:	d10b      	bne.n	3a988 <z_set_prio+0x74>
   3a970:	4929      	ldr	r1, [pc, #164]	; (3aa18 <z_set_prio+0x104>)
   3a972:	4825      	ldr	r0, [pc, #148]	; (3aa08 <z_set_prio+0xf4>)
   3a974:	f240 2387 	movw	r3, #647	; 0x287
   3a978:	4a28      	ldr	r2, [pc, #160]	; (3aa1c <z_set_prio+0x108>)
   3a97a:	f004 fd64 	bl	3f446 <printk>
   3a97e:	f240 2187 	movw	r1, #647	; 0x287
   3a982:	4826      	ldr	r0, [pc, #152]	; (3aa1c <z_set_prio+0x108>)
   3a984:	f004 fd6c 	bl	3f460 <assert_post_action>
	return list->head == list;
   3a988:	4a25      	ldr	r2, [pc, #148]	; (3aa20 <z_set_prio+0x10c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3a98a:	f102 0128 	add.w	r1, r2, #40	; 0x28
   3a98e:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   3a992:	428b      	cmp	r3, r1
   3a994:	d02a      	beq.n	3a9ec <z_set_prio+0xd8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3a996:	b34b      	cbz	r3, 3a9ec <z_set_prio+0xd8>
	if (t1->base.prio < t2->base.prio) {
   3a998:	f994 500e 	ldrsb.w	r5, [r4, #14]
   3a99c:	f993 c00e 	ldrsb.w	ip, [r3, #14]
   3a9a0:	45ac      	cmp	ip, r5
   3a9a2:	dd1e      	ble.n	3a9e2 <z_set_prio+0xce>
	node->prev = successor->prev;
   3a9a4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3a9a6:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   3a9aa:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3a9ac:	605c      	str	r4, [r3, #4]
			update_cache(1);
   3a9ae:	2001      	movs	r0, #1
   3a9b0:	f7ff fc0a 	bl	3a1c8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3a9b4:	4811      	ldr	r0, [pc, #68]	; (3a9fc <z_set_prio+0xe8>)
   3a9b6:	f000 fb73 	bl	3b0a0 <z_spin_unlock_valid>
   3a9ba:	b960      	cbnz	r0, 3a9d6 <z_set_prio+0xc2>
   3a9bc:	4919      	ldr	r1, [pc, #100]	; (3aa24 <z_set_prio+0x110>)
   3a9be:	2362      	movs	r3, #98	; 0x62
   3a9c0:	4a10      	ldr	r2, [pc, #64]	; (3aa04 <z_set_prio+0xf0>)
   3a9c2:	4811      	ldr	r0, [pc, #68]	; (3aa08 <z_set_prio+0xf4>)
   3a9c4:	f004 fd3f 	bl	3f446 <printk>
   3a9c8:	4817      	ldr	r0, [pc, #92]	; (3aa28 <z_set_prio+0x114>)
   3a9ca:	f004 fd3c 	bl	3f446 <printk>
   3a9ce:	2162      	movs	r1, #98	; 0x62
   3a9d0:	480c      	ldr	r0, [pc, #48]	; (3aa04 <z_set_prio+0xf0>)
   3a9d2:	f004 fd45 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3a9d6:	f386 8811 	msr	BASEPRI, r6
   3a9da:	f3bf 8f6f 	isb	sy
}
   3a9de:	4638      	mov	r0, r7
   3a9e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   3a9e2:	4298      	cmp	r0, r3
   3a9e4:	d002      	beq.n	3a9ec <z_set_prio+0xd8>
   3a9e6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3a9e8:	2b00      	cmp	r3, #0
   3a9ea:	d1d7      	bne.n	3a99c <z_set_prio+0x88>
	node->prev = list->tail;
   3a9ec:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   3a9f0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   3a9f2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3a9f4:	62d4      	str	r4, [r2, #44]	; 0x2c
   3a9f6:	e7da      	b.n	3a9ae <z_set_prio+0x9a>
			thread->base.prio = prio;
   3a9f8:	73a5      	strb	r5, [r4, #14]
   3a9fa:	e7db      	b.n	3a9b4 <z_set_prio+0xa0>
   3a9fc:	2002a210 	.word	0x2002a210
   3aa00:	00045d2d 	.word	0x00045d2d
   3aa04:	00045d0e 	.word	0x00045d0e
   3aa08:	00045316 	.word	0x00045316
   3aa0c:	00045d42 	.word	0x00045d42
   3aa10:	2002a200 	.word	0x2002a200
   3aa14:	20026008 	.word	0x20026008
   3aa18:	0004a34c 	.word	0x0004a34c
   3aa1c:	0004a2fb 	.word	0x0004a2fb
   3aa20:	2002a1d8 	.word	0x2002a1d8
   3aa24:	00045d57 	.word	0x00045d57
   3aa28:	00045d6e 	.word	0x00045d6e

0003aa2c <z_unpend_first_thread>:
{
   3aa2c:	b538      	push	{r3, r4, r5, lr}
   3aa2e:	4604      	mov	r4, r0
	__asm__ volatile(
   3aa30:	f04f 0320 	mov.w	r3, #32
   3aa34:	f3ef 8511 	mrs	r5, BASEPRI
   3aa38:	f383 8811 	msr	BASEPRI, r3
   3aa3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3aa40:	4839      	ldr	r0, [pc, #228]	; (3ab28 <z_unpend_first_thread+0xfc>)
   3aa42:	f000 fb1f 	bl	3b084 <z_spin_lock_valid>
   3aa46:	b960      	cbnz	r0, 3aa62 <z_unpend_first_thread+0x36>
   3aa48:	4938      	ldr	r1, [pc, #224]	; (3ab2c <z_unpend_first_thread+0x100>)
   3aa4a:	234f      	movs	r3, #79	; 0x4f
   3aa4c:	4a38      	ldr	r2, [pc, #224]	; (3ab30 <z_unpend_first_thread+0x104>)
   3aa4e:	4839      	ldr	r0, [pc, #228]	; (3ab34 <z_unpend_first_thread+0x108>)
   3aa50:	f004 fcf9 	bl	3f446 <printk>
   3aa54:	4838      	ldr	r0, [pc, #224]	; (3ab38 <z_unpend_first_thread+0x10c>)
   3aa56:	f004 fcf6 	bl	3f446 <printk>
   3aa5a:	214f      	movs	r1, #79	; 0x4f
   3aa5c:	4834      	ldr	r0, [pc, #208]	; (3ab30 <z_unpend_first_thread+0x104>)
   3aa5e:	f004 fcff 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3aa62:	4831      	ldr	r0, [pc, #196]	; (3ab28 <z_unpend_first_thread+0xfc>)
   3aa64:	f000 fb2c 	bl	3b0c0 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   3aa68:	4620      	mov	r0, r4
   3aa6a:	f006 fe83 	bl	41774 <z_priq_dumb_best>
   3aa6e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3aa70:	482d      	ldr	r0, [pc, #180]	; (3ab28 <z_unpend_first_thread+0xfc>)
   3aa72:	f000 fb15 	bl	3b0a0 <z_spin_unlock_valid>
   3aa76:	b960      	cbnz	r0, 3aa92 <z_unpend_first_thread+0x66>
   3aa78:	4930      	ldr	r1, [pc, #192]	; (3ab3c <z_unpend_first_thread+0x110>)
   3aa7a:	2362      	movs	r3, #98	; 0x62
   3aa7c:	4a2c      	ldr	r2, [pc, #176]	; (3ab30 <z_unpend_first_thread+0x104>)
   3aa7e:	482d      	ldr	r0, [pc, #180]	; (3ab34 <z_unpend_first_thread+0x108>)
   3aa80:	f004 fce1 	bl	3f446 <printk>
   3aa84:	482e      	ldr	r0, [pc, #184]	; (3ab40 <z_unpend_first_thread+0x114>)
   3aa86:	f004 fcde 	bl	3f446 <printk>
   3aa8a:	2162      	movs	r1, #98	; 0x62
   3aa8c:	4828      	ldr	r0, [pc, #160]	; (3ab30 <z_unpend_first_thread+0x104>)
   3aa8e:	f004 fce7 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3aa92:	f385 8811 	msr	BASEPRI, r5
   3aa96:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   3aa9a:	2c00      	cmp	r4, #0
   3aa9c:	d041      	beq.n	3ab22 <z_unpend_first_thread+0xf6>
	__asm__ volatile(
   3aa9e:	f04f 0320 	mov.w	r3, #32
   3aaa2:	f3ef 8511 	mrs	r5, BASEPRI
   3aaa6:	f383 8811 	msr	BASEPRI, r3
   3aaaa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3aaae:	481e      	ldr	r0, [pc, #120]	; (3ab28 <z_unpend_first_thread+0xfc>)
   3aab0:	f000 fae8 	bl	3b084 <z_spin_lock_valid>
   3aab4:	b960      	cbnz	r0, 3aad0 <z_unpend_first_thread+0xa4>
   3aab6:	491d      	ldr	r1, [pc, #116]	; (3ab2c <z_unpend_first_thread+0x100>)
   3aab8:	234f      	movs	r3, #79	; 0x4f
   3aaba:	4a1d      	ldr	r2, [pc, #116]	; (3ab30 <z_unpend_first_thread+0x104>)
   3aabc:	481d      	ldr	r0, [pc, #116]	; (3ab34 <z_unpend_first_thread+0x108>)
   3aabe:	f004 fcc2 	bl	3f446 <printk>
   3aac2:	481d      	ldr	r0, [pc, #116]	; (3ab38 <z_unpend_first_thread+0x10c>)
   3aac4:	f004 fcbf 	bl	3f446 <printk>
   3aac8:	214f      	movs	r1, #79	; 0x4f
   3aaca:	4819      	ldr	r0, [pc, #100]	; (3ab30 <z_unpend_first_thread+0x104>)
   3aacc:	f004 fcc8 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3aad0:	4815      	ldr	r0, [pc, #84]	; (3ab28 <z_unpend_first_thread+0xfc>)
   3aad2:	f000 faf5 	bl	3b0c0 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   3aad6:	f104 0008 	add.w	r0, r4, #8
   3aada:	f7ff f967 	bl	39dac <pended_on.isra.16>
   3aade:	4621      	mov	r1, r4
   3aae0:	f7ff faf0 	bl	3a0c4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   3aae4:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3aae6:	4810      	ldr	r0, [pc, #64]	; (3ab28 <z_unpend_first_thread+0xfc>)
   3aae8:	f023 0302 	bic.w	r3, r3, #2
   3aaec:	7363      	strb	r3, [r4, #13]
   3aaee:	f000 fad7 	bl	3b0a0 <z_spin_unlock_valid>
   3aaf2:	b960      	cbnz	r0, 3ab0e <z_unpend_first_thread+0xe2>
   3aaf4:	4911      	ldr	r1, [pc, #68]	; (3ab3c <z_unpend_first_thread+0x110>)
   3aaf6:	2362      	movs	r3, #98	; 0x62
   3aaf8:	4a0d      	ldr	r2, [pc, #52]	; (3ab30 <z_unpend_first_thread+0x104>)
   3aafa:	480e      	ldr	r0, [pc, #56]	; (3ab34 <z_unpend_first_thread+0x108>)
   3aafc:	f004 fca3 	bl	3f446 <printk>
   3ab00:	480f      	ldr	r0, [pc, #60]	; (3ab40 <z_unpend_first_thread+0x114>)
   3ab02:	f004 fca0 	bl	3f446 <printk>
   3ab06:	2162      	movs	r1, #98	; 0x62
   3ab08:	4809      	ldr	r0, [pc, #36]	; (3ab30 <z_unpend_first_thread+0x104>)
   3ab0a:	f004 fca9 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3ab0e:	f385 8811 	msr	BASEPRI, r5
   3ab12:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   3ab16:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   3ab18:	f104 0018 	add.w	r0, r4, #24
   3ab1c:	60a3      	str	r3, [r4, #8]
   3ab1e:	f000 febd 	bl	3b89c <z_abort_timeout>
}
   3ab22:	4620      	mov	r0, r4
   3ab24:	bd38      	pop	{r3, r4, r5, pc}
   3ab26:	bf00      	nop
   3ab28:	2002a210 	.word	0x2002a210
   3ab2c:	00045d2d 	.word	0x00045d2d
   3ab30:	00045d0e 	.word	0x00045d0e
   3ab34:	00045316 	.word	0x00045316
   3ab38:	00045d42 	.word	0x00045d42
   3ab3c:	00045d57 	.word	0x00045d57
   3ab40:	00045d6e 	.word	0x00045d6e

0003ab44 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   3ab44:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   3ab46:	4b04      	ldr	r3, [pc, #16]	; (3ab58 <z_sched_init+0x14>)
   3ab48:	4608      	mov	r0, r1
   3ab4a:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   3ab4e:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   3ab52:	f7ff b959 	b.w	39e08 <k_sched_time_slice_set>
   3ab56:	bf00      	nop
   3ab58:	2002a1d8 	.word	0x2002a1d8

0003ab5c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   3ab5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ab5e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   3ab62:	b173      	cbz	r3, 3ab82 <z_impl_k_yield+0x26>
   3ab64:	4944      	ldr	r1, [pc, #272]	; (3ac78 <z_impl_k_yield+0x11c>)
   3ab66:	f240 3391 	movw	r3, #913	; 0x391
   3ab6a:	4a44      	ldr	r2, [pc, #272]	; (3ac7c <z_impl_k_yield+0x120>)
   3ab6c:	4844      	ldr	r0, [pc, #272]	; (3ac80 <z_impl_k_yield+0x124>)
   3ab6e:	f004 fc6a 	bl	3f446 <printk>
   3ab72:	4844      	ldr	r0, [pc, #272]	; (3ac84 <z_impl_k_yield+0x128>)
   3ab74:	f004 fc67 	bl	3f446 <printk>
   3ab78:	f240 3191 	movw	r1, #913	; 0x391
   3ab7c:	483f      	ldr	r0, [pc, #252]	; (3ac7c <z_impl_k_yield+0x120>)
   3ab7e:	f004 fc6f 	bl	3f460 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   3ab82:	4c41      	ldr	r4, [pc, #260]	; (3ac88 <z_impl_k_yield+0x12c>)
   3ab84:	4e41      	ldr	r6, [pc, #260]	; (3ac8c <z_impl_k_yield+0x130>)
   3ab86:	68a2      	ldr	r2, [r4, #8]
   3ab88:	42b2      	cmp	r2, r6
   3ab8a:	d05d      	beq.n	3ac48 <z_impl_k_yield+0xec>
	__asm__ volatile(
   3ab8c:	f04f 0320 	mov.w	r3, #32
   3ab90:	f3ef 8711 	mrs	r7, BASEPRI
   3ab94:	f383 8811 	msr	BASEPRI, r3
   3ab98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3ab9c:	483c      	ldr	r0, [pc, #240]	; (3ac90 <z_impl_k_yield+0x134>)
   3ab9e:	f000 fa71 	bl	3b084 <z_spin_lock_valid>
   3aba2:	b960      	cbnz	r0, 3abbe <z_impl_k_yield+0x62>
   3aba4:	493b      	ldr	r1, [pc, #236]	; (3ac94 <z_impl_k_yield+0x138>)
   3aba6:	234f      	movs	r3, #79	; 0x4f
   3aba8:	4a3b      	ldr	r2, [pc, #236]	; (3ac98 <z_impl_k_yield+0x13c>)
   3abaa:	4835      	ldr	r0, [pc, #212]	; (3ac80 <z_impl_k_yield+0x124>)
   3abac:	f004 fc4b 	bl	3f446 <printk>
   3abb0:	483a      	ldr	r0, [pc, #232]	; (3ac9c <z_impl_k_yield+0x140>)
   3abb2:	f004 fc48 	bl	3f446 <printk>
   3abb6:	214f      	movs	r1, #79	; 0x4f
   3abb8:	4837      	ldr	r0, [pc, #220]	; (3ac98 <z_impl_k_yield+0x13c>)
   3abba:	f004 fc51 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3abbe:	4834      	ldr	r0, [pc, #208]	; (3ac90 <z_impl_k_yield+0x134>)
   3abc0:	f000 fa7e 	bl	3b0c0 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   3abc4:	68a1      	ldr	r1, [r4, #8]
   3abc6:	4836      	ldr	r0, [pc, #216]	; (3aca0 <z_impl_k_yield+0x144>)
   3abc8:	f7ff fa7c 	bl	3a0c4 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   3abcc:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3abce:	42b5      	cmp	r5, r6
   3abd0:	d10b      	bne.n	3abea <z_impl_k_yield+0x8e>
   3abd2:	4934      	ldr	r1, [pc, #208]	; (3aca4 <z_impl_k_yield+0x148>)
   3abd4:	482a      	ldr	r0, [pc, #168]	; (3ac80 <z_impl_k_yield+0x124>)
   3abd6:	f240 2387 	movw	r3, #647	; 0x287
   3abda:	4a28      	ldr	r2, [pc, #160]	; (3ac7c <z_impl_k_yield+0x120>)
   3abdc:	f004 fc33 	bl	3f446 <printk>
   3abe0:	f240 2187 	movw	r1, #647	; 0x287
   3abe4:	4825      	ldr	r0, [pc, #148]	; (3ac7c <z_impl_k_yield+0x120>)
   3abe6:	f004 fc3b 	bl	3f460 <assert_post_action>
	return list->head == list;
   3abea:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3abee:	4a2c      	ldr	r2, [pc, #176]	; (3aca0 <z_impl_k_yield+0x144>)
   3abf0:	4293      	cmp	r3, r2
   3abf2:	d03a      	beq.n	3ac6a <z_impl_k_yield+0x10e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3abf4:	2b00      	cmp	r3, #0
   3abf6:	d038      	beq.n	3ac6a <z_impl_k_yield+0x10e>
	if (t1->base.prio < t2->base.prio) {
   3abf8:	f995 000e 	ldrsb.w	r0, [r5, #14]
   3abfc:	f993 600e 	ldrsb.w	r6, [r3, #14]
   3ac00:	4286      	cmp	r6, r0
   3ac02:	dd2d      	ble.n	3ac60 <z_impl_k_yield+0x104>
	node->prev = successor->prev;
   3ac04:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3ac06:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   3ac0a:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   3ac0c:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   3ac0e:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   3ac10:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   3ac12:	7b53      	ldrb	r3, [r2, #13]
   3ac14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3ac18:	7353      	strb	r3, [r2, #13]
   3ac1a:	f7ff fad5 	bl	3a1c8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3ac1e:	481c      	ldr	r0, [pc, #112]	; (3ac90 <z_impl_k_yield+0x134>)
   3ac20:	f000 fa3e 	bl	3b0a0 <z_spin_unlock_valid>
   3ac24:	b960      	cbnz	r0, 3ac40 <z_impl_k_yield+0xe4>
   3ac26:	4920      	ldr	r1, [pc, #128]	; (3aca8 <z_impl_k_yield+0x14c>)
   3ac28:	2362      	movs	r3, #98	; 0x62
   3ac2a:	4a1b      	ldr	r2, [pc, #108]	; (3ac98 <z_impl_k_yield+0x13c>)
   3ac2c:	4814      	ldr	r0, [pc, #80]	; (3ac80 <z_impl_k_yield+0x124>)
   3ac2e:	f004 fc0a 	bl	3f446 <printk>
   3ac32:	481e      	ldr	r0, [pc, #120]	; (3acac <z_impl_k_yield+0x150>)
   3ac34:	f004 fc07 	bl	3f446 <printk>
   3ac38:	2162      	movs	r1, #98	; 0x62
   3ac3a:	4817      	ldr	r0, [pc, #92]	; (3ac98 <z_impl_k_yield+0x13c>)
   3ac3c:	f004 fc10 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3ac40:	f387 8811 	msr	BASEPRI, r7
   3ac44:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   3ac48:	f04f 0320 	mov.w	r3, #32
   3ac4c:	f3ef 8011 	mrs	r0, BASEPRI
   3ac50:	f383 8811 	msr	BASEPRI, r3
   3ac54:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   3ac58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   3ac5c:	f7e5 bb74 	b.w	20348 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   3ac60:	4299      	cmp	r1, r3
   3ac62:	d002      	beq.n	3ac6a <z_impl_k_yield+0x10e>
   3ac64:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3ac66:	2b00      	cmp	r3, #0
   3ac68:	d1c8      	bne.n	3abfc <z_impl_k_yield+0xa0>
	node->prev = list->tail;
   3ac6a:	e9c5 2100 	strd	r2, r1, [r5]
	list->tail->next = node;
   3ac6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   3ac70:	601d      	str	r5, [r3, #0]
	list->tail = node;
   3ac72:	62e5      	str	r5, [r4, #44]	; 0x2c
   3ac74:	e7cb      	b.n	3ac0e <z_impl_k_yield+0xb2>
   3ac76:	bf00      	nop
   3ac78:	0004a263 	.word	0x0004a263
   3ac7c:	0004a2fb 	.word	0x0004a2fb
   3ac80:	00045316 	.word	0x00045316
   3ac84:	0004a182 	.word	0x0004a182
   3ac88:	2002a1d8 	.word	0x2002a1d8
   3ac8c:	20026008 	.word	0x20026008
   3ac90:	2002a210 	.word	0x2002a210
   3ac94:	00045d2d 	.word	0x00045d2d
   3ac98:	00045d0e 	.word	0x00045d0e
   3ac9c:	00045d42 	.word	0x00045d42
   3aca0:	2002a200 	.word	0x2002a200
   3aca4:	0004a34c 	.word	0x0004a34c
   3aca8:	00045d57 	.word	0x00045d57
   3acac:	00045d6e 	.word	0x00045d6e

0003acb0 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
{
   3acb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3acb2:	4604      	mov	r4, r0
   3acb4:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	u32_t expected_wakeup_time;

	__ASSERT(!arch_is_in_isr(), "");
   3acb8:	b173      	cbz	r3, 3acd8 <z_tick_sleep+0x28>
   3acba:	493a      	ldr	r1, [pc, #232]	; (3ada4 <z_tick_sleep+0xf4>)
   3acbc:	f240 33af 	movw	r3, #943	; 0x3af
   3acc0:	4a39      	ldr	r2, [pc, #228]	; (3ada8 <z_tick_sleep+0xf8>)
   3acc2:	483a      	ldr	r0, [pc, #232]	; (3adac <z_tick_sleep+0xfc>)
   3acc4:	f004 fbbf 	bl	3f446 <printk>
   3acc8:	4839      	ldr	r0, [pc, #228]	; (3adb0 <z_tick_sleep+0x100>)
   3acca:	f004 fbbc 	bl	3f446 <printk>
   3acce:	f240 31af 	movw	r1, #943	; 0x3af
   3acd2:	4835      	ldr	r0, [pc, #212]	; (3ada8 <z_tick_sleep+0xf8>)
   3acd4:	f004 fbc4 	bl	3f460 <assert_post_action>

	K_DEBUG("thread %p for %d ticks\n", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   3acd8:	b924      	cbnz	r4, 3ace4 <z_tick_sleep+0x34>
	z_impl_k_yield();
   3acda:	f7ff ff3f 	bl	3ab5c <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   3acde:	4620      	mov	r0, r4
   3ace0:	b003      	add	sp, #12
   3ace2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   3ace4:	f006 fddb 	bl	4189e <z_tick_get_32>
	struct k_spinlock local_lock = {};
   3ace8:	2300      	movs	r3, #0
	ticks += _TICK_ALIGN;
   3acea:	1c66      	adds	r6, r4, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   3acec:	1834      	adds	r4, r6, r0
	struct k_spinlock local_lock = {};
   3acee:	9301      	str	r3, [sp, #4]
   3acf0:	f04f 0320 	mov.w	r3, #32
   3acf4:	f3ef 8711 	mrs	r7, BASEPRI
   3acf8:	f383 8811 	msr	BASEPRI, r3
   3acfc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3ad00:	a801      	add	r0, sp, #4
   3ad02:	f000 f9bf 	bl	3b084 <z_spin_lock_valid>
   3ad06:	b960      	cbnz	r0, 3ad22 <z_tick_sleep+0x72>
   3ad08:	492a      	ldr	r1, [pc, #168]	; (3adb4 <z_tick_sleep+0x104>)
   3ad0a:	234f      	movs	r3, #79	; 0x4f
   3ad0c:	4a2a      	ldr	r2, [pc, #168]	; (3adb8 <z_tick_sleep+0x108>)
   3ad0e:	4827      	ldr	r0, [pc, #156]	; (3adac <z_tick_sleep+0xfc>)
   3ad10:	f004 fb99 	bl	3f446 <printk>
   3ad14:	4829      	ldr	r0, [pc, #164]	; (3adbc <z_tick_sleep+0x10c>)
   3ad16:	f004 fb96 	bl	3f446 <printk>
   3ad1a:	214f      	movs	r1, #79	; 0x4f
   3ad1c:	4826      	ldr	r0, [pc, #152]	; (3adb8 <z_tick_sleep+0x108>)
   3ad1e:	f004 fb9f 	bl	3f460 <assert_post_action>
	pending_current = _current;
   3ad22:	4d27      	ldr	r5, [pc, #156]	; (3adc0 <z_tick_sleep+0x110>)
	z_spin_lock_set_owner(l);
   3ad24:	a801      	add	r0, sp, #4
   3ad26:	f000 f9cb 	bl	3b0c0 <z_spin_lock_set_owner>
   3ad2a:	4b26      	ldr	r3, [pc, #152]	; (3adc4 <z_tick_sleep+0x114>)
   3ad2c:	68a8      	ldr	r0, [r5, #8]
   3ad2e:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
   3ad30:	f7ff fca2 	bl	3a678 <z_remove_thread_from_ready_q>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   3ad34:	68a8      	ldr	r0, [r5, #8]
   3ad36:	4632      	mov	r2, r6
   3ad38:	3018      	adds	r0, #24
   3ad3a:	4923      	ldr	r1, [pc, #140]	; (3adc8 <z_tick_sleep+0x118>)
   3ad3c:	f000 fd0a 	bl	3b754 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   3ad40:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3ad42:	a801      	add	r0, sp, #4
	thread->base.thread_state |= _THREAD_SUSPENDED;
   3ad44:	7b53      	ldrb	r3, [r2, #13]
   3ad46:	f043 0310 	orr.w	r3, r3, #16
   3ad4a:	7353      	strb	r3, [r2, #13]
   3ad4c:	f000 f9a8 	bl	3b0a0 <z_spin_unlock_valid>
   3ad50:	b960      	cbnz	r0, 3ad6c <z_tick_sleep+0xbc>
   3ad52:	491e      	ldr	r1, [pc, #120]	; (3adcc <z_tick_sleep+0x11c>)
   3ad54:	2379      	movs	r3, #121	; 0x79
   3ad56:	4a18      	ldr	r2, [pc, #96]	; (3adb8 <z_tick_sleep+0x108>)
   3ad58:	4814      	ldr	r0, [pc, #80]	; (3adac <z_tick_sleep+0xfc>)
   3ad5a:	f004 fb74 	bl	3f446 <printk>
   3ad5e:	481c      	ldr	r0, [pc, #112]	; (3add0 <z_tick_sleep+0x120>)
   3ad60:	f004 fb71 	bl	3f446 <printk>
   3ad64:	2179      	movs	r1, #121	; 0x79
   3ad66:	4814      	ldr	r0, [pc, #80]	; (3adb8 <z_tick_sleep+0x108>)
   3ad68:	f004 fb7a 	bl	3f460 <assert_post_action>
   3ad6c:	4638      	mov	r0, r7
   3ad6e:	f7e5 faeb 	bl	20348 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   3ad72:	68ab      	ldr	r3, [r5, #8]
   3ad74:	7b5b      	ldrb	r3, [r3, #13]
   3ad76:	06db      	lsls	r3, r3, #27
   3ad78:	d50e      	bpl.n	3ad98 <z_tick_sleep+0xe8>
   3ad7a:	4916      	ldr	r1, [pc, #88]	; (3add4 <z_tick_sleep+0x124>)
   3ad7c:	f44f 7373 	mov.w	r3, #972	; 0x3cc
   3ad80:	4a09      	ldr	r2, [pc, #36]	; (3ada8 <z_tick_sleep+0xf8>)
   3ad82:	480a      	ldr	r0, [pc, #40]	; (3adac <z_tick_sleep+0xfc>)
   3ad84:	f004 fb5f 	bl	3f446 <printk>
   3ad88:	4809      	ldr	r0, [pc, #36]	; (3adb0 <z_tick_sleep+0x100>)
   3ad8a:	f004 fb5c 	bl	3f446 <printk>
   3ad8e:	f44f 7173 	mov.w	r1, #972	; 0x3cc
   3ad92:	4805      	ldr	r0, [pc, #20]	; (3ada8 <z_tick_sleep+0xf8>)
   3ad94:	f004 fb64 	bl	3f460 <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   3ad98:	f006 fd81 	bl	4189e <z_tick_get_32>
   3ad9c:	1a24      	subs	r4, r4, r0
   3ad9e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   3ada2:	e79c      	b.n	3acde <z_tick_sleep+0x2e>
   3ada4:	0004a263 	.word	0x0004a263
   3ada8:	0004a2fb 	.word	0x0004a2fb
   3adac:	00045316 	.word	0x00045316
   3adb0:	0004a182 	.word	0x0004a182
   3adb4:	00045d2d 	.word	0x00045d2d
   3adb8:	00045d0e 	.word	0x00045d0e
   3adbc:	00045d42 	.word	0x00045d42
   3adc0:	2002a1d8 	.word	0x2002a1d8
   3adc4:	2002a20c 	.word	0x2002a20c
   3adc8:	0003a425 	.word	0x0003a425
   3adcc:	00045d57 	.word	0x00045d57
   3add0:	00045d6e 	.word	0x00045d6e
   3add4:	0004a36d 	.word	0x0004a36d

0003add8 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
   3add8:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	if (ms == K_FOREVER) {
   3adda:	1c43      	adds	r3, r0, #1
{
   3addc:	4604      	mov	r4, r0
	if (ms == K_FOREVER) {
   3adde:	d105      	bne.n	3adec <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
   3ade0:	4b0d      	ldr	r3, [pc, #52]	; (3ae18 <z_impl_k_sleep+0x40>)
   3ade2:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   3ade4:	f000 faa8 	bl	3b338 <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   3ade8:	4620      	mov	r0, r4
   3adea:	bd38      	pop	{r3, r4, r5, pc}
   3adec:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   3adf0:	f240 30e7 	movw	r0, #999	; 0x3e7
   3adf4:	2100      	movs	r1, #0
   3adf6:	2300      	movs	r3, #0
   3adf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3adfc:	fbe5 0104 	umlal	r0, r1, r5, r4
   3ae00:	f7dd ffac 	bl	18d5c <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
   3ae04:	f7ff ff54 	bl	3acb0 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   3ae08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3ae0c:	fb80 0103 	smull	r0, r1, r0, r3
   3ae10:	0bc4      	lsrs	r4, r0, #15
   3ae12:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   3ae16:	e7e7      	b.n	3ade8 <z_impl_k_sleep+0x10>
   3ae18:	2002a1d8 	.word	0x2002a1d8

0003ae1c <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   3ae1c:	4b01      	ldr	r3, [pc, #4]	; (3ae24 <z_impl_k_current_get+0x8>)
   3ae1e:	6898      	ldr	r0, [r3, #8]
   3ae20:	4770      	bx	lr
   3ae22:	bf00      	nop
   3ae24:	2002a1d8 	.word	0x2002a1d8

0003ae28 <z_impl_k_sem_init>:

#endif /* CONFIG_OBJECT_TRACING */

void z_impl_k_sem_init(struct k_sem *sem, unsigned int initial_count,
		      unsigned int limit)
{
   3ae28:	b570      	push	{r4, r5, r6, lr}
   3ae2a:	4604      	mov	r4, r0
   3ae2c:	460e      	mov	r6, r1
	__ASSERT(limit != 0U, "limit cannot be zero");
   3ae2e:	4615      	mov	r5, r2
   3ae30:	b962      	cbnz	r2, 3ae4c <z_impl_k_sem_init+0x24>
   3ae32:	4912      	ldr	r1, [pc, #72]	; (3ae7c <z_impl_k_sem_init+0x54>)
   3ae34:	2341      	movs	r3, #65	; 0x41
   3ae36:	4a12      	ldr	r2, [pc, #72]	; (3ae80 <z_impl_k_sem_init+0x58>)
   3ae38:	4812      	ldr	r0, [pc, #72]	; (3ae84 <z_impl_k_sem_init+0x5c>)
   3ae3a:	f004 fb04 	bl	3f446 <printk>
   3ae3e:	4812      	ldr	r0, [pc, #72]	; (3ae88 <z_impl_k_sem_init+0x60>)
   3ae40:	f004 fb01 	bl	3f446 <printk>
   3ae44:	2141      	movs	r1, #65	; 0x41
   3ae46:	480e      	ldr	r0, [pc, #56]	; (3ae80 <z_impl_k_sem_init+0x58>)
   3ae48:	f004 fb0a 	bl	3f460 <assert_post_action>
	__ASSERT(initial_count <= limit, "count cannot be greater than limit");
   3ae4c:	42b5      	cmp	r5, r6
   3ae4e:	d20c      	bcs.n	3ae6a <z_impl_k_sem_init+0x42>
   3ae50:	490e      	ldr	r1, [pc, #56]	; (3ae8c <z_impl_k_sem_init+0x64>)
   3ae52:	2342      	movs	r3, #66	; 0x42
   3ae54:	4a0a      	ldr	r2, [pc, #40]	; (3ae80 <z_impl_k_sem_init+0x58>)
   3ae56:	480b      	ldr	r0, [pc, #44]	; (3ae84 <z_impl_k_sem_init+0x5c>)
   3ae58:	f004 faf5 	bl	3f446 <printk>
   3ae5c:	480c      	ldr	r0, [pc, #48]	; (3ae90 <z_impl_k_sem_init+0x68>)
   3ae5e:	f004 faf2 	bl	3f446 <printk>
   3ae62:	2142      	movs	r1, #66	; 0x42
   3ae64:	4806      	ldr	r0, [pc, #24]	; (3ae80 <z_impl_k_sem_init+0x58>)
   3ae66:	f004 fafb 	bl	3f460 <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SEMA_INIT);
	sem->count = initial_count;
	sem->limit = limit;
	z_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   3ae6a:	f104 0310 	add.w	r3, r4, #16
	sem->limit = limit;
   3ae6e:	e9c4 6502 	strd	r6, r5, [r4, #8]
	list->tail = (sys_dnode_t *)list;
   3ae72:	e9c4 4400 	strd	r4, r4, [r4]
   3ae76:	e9c4 3304 	strd	r3, r3, [r4, #16]

	SYS_TRACING_OBJ_INIT(k_sem, sem);

	z_object_init(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_INIT);
}
   3ae7a:	bd70      	pop	{r4, r5, r6, pc}
   3ae7c:	0004a3be 	.word	0x0004a3be
   3ae80:	0004a3a5 	.word	0x0004a3a5
   3ae84:	00045316 	.word	0x00045316
   3ae88:	0004a3ca 	.word	0x0004a3ca
   3ae8c:	0004a3e1 	.word	0x0004a3e1
   3ae90:	0004a3f8 	.word	0x0004a3f8

0003ae94 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   3ae94:	b570      	push	{r4, r5, r6, lr}
   3ae96:	4604      	mov	r4, r0
   3ae98:	f04f 0320 	mov.w	r3, #32
   3ae9c:	f3ef 8611 	mrs	r6, BASEPRI
   3aea0:	f383 8811 	msr	BASEPRI, r3
   3aea4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3aea8:	4819      	ldr	r0, [pc, #100]	; (3af10 <z_impl_k_sem_give+0x7c>)
   3aeaa:	f000 f8eb 	bl	3b084 <z_spin_lock_valid>
   3aeae:	b960      	cbnz	r0, 3aeca <z_impl_k_sem_give+0x36>
   3aeb0:	4918      	ldr	r1, [pc, #96]	; (3af14 <z_impl_k_sem_give+0x80>)
   3aeb2:	234f      	movs	r3, #79	; 0x4f
   3aeb4:	4a18      	ldr	r2, [pc, #96]	; (3af18 <z_impl_k_sem_give+0x84>)
   3aeb6:	4819      	ldr	r0, [pc, #100]	; (3af1c <z_impl_k_sem_give+0x88>)
   3aeb8:	f004 fac5 	bl	3f446 <printk>
   3aebc:	4818      	ldr	r0, [pc, #96]	; (3af20 <z_impl_k_sem_give+0x8c>)
   3aebe:	f004 fac2 	bl	3f446 <printk>
   3aec2:	214f      	movs	r1, #79	; 0x4f
   3aec4:	4814      	ldr	r0, [pc, #80]	; (3af18 <z_impl_k_sem_give+0x84>)
   3aec6:	f004 facb 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3aeca:	4811      	ldr	r0, [pc, #68]	; (3af10 <z_impl_k_sem_give+0x7c>)
   3aecc:	f000 f8f8 	bl	3b0c0 <z_spin_lock_set_owner>
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   3aed0:	4620      	mov	r0, r4
   3aed2:	f7ff fdab 	bl	3aa2c <z_unpend_first_thread>
	if (thread != NULL) {
   3aed6:	4605      	mov	r5, r0
   3aed8:	b170      	cbz	r0, 3aef8 <z_impl_k_sem_give+0x64>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3aeda:	7b43      	ldrb	r3, [r0, #13]
   3aedc:	06db      	lsls	r3, r3, #27
   3aede:	d103      	bne.n	3aee8 <z_impl_k_sem_give+0x54>
	if (z_is_thread_ready(thread)) {
   3aee0:	6983      	ldr	r3, [r0, #24]
   3aee2:	b90b      	cbnz	r3, 3aee8 <z_impl_k_sem_give+0x54>
		z_add_thread_to_ready_q(thread);
   3aee4:	f7ff fa20 	bl	3a328 <z_add_thread_to_ready_q>
   3aee8:	2300      	movs	r3, #0
   3aeea:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   3aeec:	4631      	mov	r1, r6
}
   3aeee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   3aef2:	4807      	ldr	r0, [pc, #28]	; (3af10 <z_impl_k_sem_give+0x7c>)
   3aef4:	f7ff b836 	b.w	39f64 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   3aef8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   3aefc:	429a      	cmp	r2, r3
   3aefe:	bf18      	it	ne
   3af00:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   3af02:	2102      	movs	r1, #2
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   3af04:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   3af06:	f104 0010 	add.w	r0, r4, #16
   3af0a:	f006 fd23 	bl	41954 <z_handle_obj_poll_events>
   3af0e:	e7ed      	b.n	3aeec <z_impl_k_sem_give+0x58>
   3af10:	2002a21c 	.word	0x2002a21c
   3af14:	00045d2d 	.word	0x00045d2d
   3af18:	00045d0e 	.word	0x00045d0e
   3af1c:	00045316 	.word	0x00045316
   3af20:	00045d42 	.word	0x00045d42

0003af24 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   3af24:	b570      	push	{r4, r5, r6, lr}
   3af26:	4605      	mov	r5, r0
   3af28:	460e      	mov	r6, r1
   3af2a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");
   3af2e:	b16b      	cbz	r3, 3af4c <z_impl_k_sem_take+0x28>
   3af30:	b161      	cbz	r1, 3af4c <z_impl_k_sem_take+0x28>
   3af32:	4932      	ldr	r1, [pc, #200]	; (3affc <z_impl_k_sem_take+0xd8>)
   3af34:	238d      	movs	r3, #141	; 0x8d
   3af36:	4a32      	ldr	r2, [pc, #200]	; (3b000 <z_impl_k_sem_take+0xdc>)
   3af38:	4832      	ldr	r0, [pc, #200]	; (3b004 <z_impl_k_sem_take+0xe0>)
   3af3a:	f004 fa84 	bl	3f446 <printk>
   3af3e:	4832      	ldr	r0, [pc, #200]	; (3b008 <z_impl_k_sem_take+0xe4>)
   3af40:	f004 fa81 	bl	3f446 <printk>
   3af44:	218d      	movs	r1, #141	; 0x8d
   3af46:	482e      	ldr	r0, [pc, #184]	; (3b000 <z_impl_k_sem_take+0xdc>)
   3af48:	f004 fa8a 	bl	3f460 <assert_post_action>
   3af4c:	f04f 0320 	mov.w	r3, #32
   3af50:	f3ef 8411 	mrs	r4, BASEPRI
   3af54:	f383 8811 	msr	BASEPRI, r3
   3af58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3af5c:	482b      	ldr	r0, [pc, #172]	; (3b00c <z_impl_k_sem_take+0xe8>)
   3af5e:	f000 f891 	bl	3b084 <z_spin_lock_valid>
   3af62:	b960      	cbnz	r0, 3af7e <z_impl_k_sem_take+0x5a>
   3af64:	492a      	ldr	r1, [pc, #168]	; (3b010 <z_impl_k_sem_take+0xec>)
   3af66:	234f      	movs	r3, #79	; 0x4f
   3af68:	4a2a      	ldr	r2, [pc, #168]	; (3b014 <z_impl_k_sem_take+0xf0>)
   3af6a:	4826      	ldr	r0, [pc, #152]	; (3b004 <z_impl_k_sem_take+0xe0>)
   3af6c:	f004 fa6b 	bl	3f446 <printk>
   3af70:	4829      	ldr	r0, [pc, #164]	; (3b018 <z_impl_k_sem_take+0xf4>)
   3af72:	f004 fa68 	bl	3f446 <printk>
   3af76:	214f      	movs	r1, #79	; 0x4f
   3af78:	4826      	ldr	r0, [pc, #152]	; (3b014 <z_impl_k_sem_take+0xf0>)
   3af7a:	f004 fa71 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3af7e:	4823      	ldr	r0, [pc, #140]	; (3b00c <z_impl_k_sem_take+0xe8>)
   3af80:	f000 f89e 	bl	3b0c0 <z_spin_lock_set_owner>

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   3af84:	68ab      	ldr	r3, [r5, #8]
   3af86:	b1c3      	cbz	r3, 3afba <z_impl_k_sem_take+0x96>
		sem->count--;
   3af88:	3b01      	subs	r3, #1
   3af8a:	60ab      	str	r3, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3af8c:	481f      	ldr	r0, [pc, #124]	; (3b00c <z_impl_k_sem_take+0xe8>)
   3af8e:	f000 f887 	bl	3b0a0 <z_spin_unlock_valid>
   3af92:	b960      	cbnz	r0, 3afae <z_impl_k_sem_take+0x8a>
   3af94:	4921      	ldr	r1, [pc, #132]	; (3b01c <z_impl_k_sem_take+0xf8>)
   3af96:	2362      	movs	r3, #98	; 0x62
   3af98:	4a1e      	ldr	r2, [pc, #120]	; (3b014 <z_impl_k_sem_take+0xf0>)
   3af9a:	481a      	ldr	r0, [pc, #104]	; (3b004 <z_impl_k_sem_take+0xe0>)
   3af9c:	f004 fa53 	bl	3f446 <printk>
   3afa0:	481f      	ldr	r0, [pc, #124]	; (3b020 <z_impl_k_sem_take+0xfc>)
   3afa2:	f004 fa50 	bl	3f446 <printk>
   3afa6:	2162      	movs	r1, #98	; 0x62
   3afa8:	481a      	ldr	r0, [pc, #104]	; (3b014 <z_impl_k_sem_take+0xf0>)
   3afaa:	f004 fa59 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3afae:	f384 8811 	msr	BASEPRI, r4
   3afb2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   3afb6:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   3afb8:	bd70      	pop	{r4, r5, r6, pc}
	if (timeout == K_NO_WAIT) {
   3afba:	b9be      	cbnz	r6, 3afec <z_impl_k_sem_take+0xc8>
   3afbc:	4813      	ldr	r0, [pc, #76]	; (3b00c <z_impl_k_sem_take+0xe8>)
   3afbe:	f000 f86f 	bl	3b0a0 <z_spin_unlock_valid>
   3afc2:	b960      	cbnz	r0, 3afde <z_impl_k_sem_take+0xba>
   3afc4:	4915      	ldr	r1, [pc, #84]	; (3b01c <z_impl_k_sem_take+0xf8>)
   3afc6:	2362      	movs	r3, #98	; 0x62
   3afc8:	4a12      	ldr	r2, [pc, #72]	; (3b014 <z_impl_k_sem_take+0xf0>)
   3afca:	480e      	ldr	r0, [pc, #56]	; (3b004 <z_impl_k_sem_take+0xe0>)
   3afcc:	f004 fa3b 	bl	3f446 <printk>
   3afd0:	4813      	ldr	r0, [pc, #76]	; (3b020 <z_impl_k_sem_take+0xfc>)
   3afd2:	f004 fa38 	bl	3f446 <printk>
   3afd6:	2162      	movs	r1, #98	; 0x62
   3afd8:	480e      	ldr	r0, [pc, #56]	; (3b014 <z_impl_k_sem_take+0xf0>)
   3afda:	f004 fa41 	bl	3f460 <assert_post_action>
   3afde:	f384 8811 	msr	BASEPRI, r4
   3afe2:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   3afe6:	f06f 000f 	mvn.w	r0, #15
   3afea:	e7e5      	b.n	3afb8 <z_impl_k_sem_take+0x94>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   3afec:	4633      	mov	r3, r6
   3afee:	462a      	mov	r2, r5
   3aff0:	4621      	mov	r1, r4
}
   3aff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   3aff6:	4805      	ldr	r0, [pc, #20]	; (3b00c <z_impl_k_sem_take+0xe8>)
   3aff8:	f7ff bc5e 	b.w	3a8b8 <z_pend_curr>
   3affc:	0004a41d 	.word	0x0004a41d
   3b000:	0004a3a5 	.word	0x0004a3a5
   3b004:	00045316 	.word	0x00045316
   3b008:	0004a182 	.word	0x0004a182
   3b00c:	2002a21c 	.word	0x2002a21c
   3b010:	00045d2d 	.word	0x00045d2d
   3b014:	00045d0e 	.word	0x00045d0e
   3b018:	00045d42 	.word	0x00045d42
   3b01c:	00045d57 	.word	0x00045d57
   3b020:	00045d6e 	.word	0x00045d6e

0003b024 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   3b024:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   3b026:	4c08      	ldr	r4, [pc, #32]	; (3b048 <k_sys_work_q_init+0x24>)
   3b028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3b02c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   3b030:	4906      	ldr	r1, [pc, #24]	; (3b04c <k_sys_work_q_init+0x28>)
   3b032:	4620      	mov	r0, r4
   3b034:	f000 fa58 	bl	3b4e8 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   3b038:	4905      	ldr	r1, [pc, #20]	; (3b050 <k_sys_work_q_init+0x2c>)
   3b03a:	f104 0014 	add.w	r0, r4, #20
   3b03e:	f006 fbbe 	bl	417be <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   3b042:	2000      	movs	r0, #0
   3b044:	bd10      	pop	{r4, pc}
   3b046:	bf00      	nop
   3b048:	2002a220 	.word	0x2002a220
   3b04c:	2002f950 	.word	0x2002f950
   3b050:	0004a449 	.word	0x0004a449

0003b054 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   3b054:	b530      	push	{r4, r5, lr}
   3b056:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   3b058:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   3b05a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   3b05c:	9504      	str	r5, [sp, #16]
   3b05e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   3b060:	9503      	str	r5, [sp, #12]
   3b062:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   3b064:	9502      	str	r5, [sp, #8]
   3b066:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   3b068:	9501      	str	r5, [sp, #4]
   3b06a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   3b06c:	9500      	str	r5, [sp, #0]
   3b06e:	f7e5 fa47 	bl	20500 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   3b072:	4b03      	ldr	r3, [pc, #12]	; (3b080 <z_setup_new_thread+0x2c>)
   3b074:	689b      	ldr	r3, [r3, #8]
   3b076:	b103      	cbz	r3, 3b07a <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   3b078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3b07a:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   3b07c:	b007      	add	sp, #28
   3b07e:	bd30      	pop	{r4, r5, pc}
   3b080:	2002a1d8 	.word	0x2002a1d8

0003b084 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   3b084:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   3b086:	b138      	cbz	r0, 3b098 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   3b088:	4b04      	ldr	r3, [pc, #16]	; (3b09c <z_spin_lock_valid+0x18>)
   3b08a:	f000 0003 	and.w	r0, r0, #3
   3b08e:	7d1b      	ldrb	r3, [r3, #20]
   3b090:	1ac0      	subs	r0, r0, r3
   3b092:	bf18      	it	ne
   3b094:	2001      	movne	r0, #1
   3b096:	4770      	bx	lr
			return false;
		}
	}
	return true;
   3b098:	2001      	movs	r0, #1
}
   3b09a:	4770      	bx	lr
   3b09c:	2002a1d8 	.word	0x2002a1d8

0003b0a0 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   3b0a0:	4a06      	ldr	r2, [pc, #24]	; (3b0bc <z_spin_unlock_valid+0x1c>)
   3b0a2:	7d11      	ldrb	r1, [r2, #20]
   3b0a4:	6893      	ldr	r3, [r2, #8]
   3b0a6:	6802      	ldr	r2, [r0, #0]
   3b0a8:	430b      	orrs	r3, r1
   3b0aa:	429a      	cmp	r2, r3
   3b0ac:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   3b0b0:	bf06      	itte	eq
   3b0b2:	6003      	streq	r3, [r0, #0]
	return true;
   3b0b4:	2001      	moveq	r0, #1
		return false;
   3b0b6:	4618      	movne	r0, r3
}
   3b0b8:	4770      	bx	lr
   3b0ba:	bf00      	nop
   3b0bc:	2002a1d8 	.word	0x2002a1d8

0003b0c0 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   3b0c0:	4a02      	ldr	r2, [pc, #8]	; (3b0cc <z_spin_lock_set_owner+0xc>)
   3b0c2:	7d11      	ldrb	r1, [r2, #20]
   3b0c4:	6893      	ldr	r3, [r2, #8]
   3b0c6:	430b      	orrs	r3, r1
   3b0c8:	6003      	str	r3, [r0, #0]
}
   3b0ca:	4770      	bx	lr
   3b0cc:	2002a1d8 	.word	0x2002a1d8

0003b0d0 <z_impl_k_thread_start>:
{
   3b0d0:	b538      	push	{r3, r4, r5, lr}
   3b0d2:	4604      	mov	r4, r0
	__asm__ volatile(
   3b0d4:	f04f 0320 	mov.w	r3, #32
   3b0d8:	f3ef 8511 	mrs	r5, BASEPRI
   3b0dc:	f383 8811 	msr	BASEPRI, r3
   3b0e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3b0e4:	481e      	ldr	r0, [pc, #120]	; (3b160 <z_impl_k_thread_start+0x90>)
   3b0e6:	f7ff ffcd 	bl	3b084 <z_spin_lock_valid>
   3b0ea:	b960      	cbnz	r0, 3b106 <z_impl_k_thread_start+0x36>
   3b0ec:	491d      	ldr	r1, [pc, #116]	; (3b164 <z_impl_k_thread_start+0x94>)
   3b0ee:	234f      	movs	r3, #79	; 0x4f
   3b0f0:	4a1d      	ldr	r2, [pc, #116]	; (3b168 <z_impl_k_thread_start+0x98>)
   3b0f2:	481e      	ldr	r0, [pc, #120]	; (3b16c <z_impl_k_thread_start+0x9c>)
   3b0f4:	f004 f9a7 	bl	3f446 <printk>
   3b0f8:	481d      	ldr	r0, [pc, #116]	; (3b170 <z_impl_k_thread_start+0xa0>)
   3b0fa:	f004 f9a4 	bl	3f446 <printk>
   3b0fe:	214f      	movs	r1, #79	; 0x4f
   3b100:	4819      	ldr	r0, [pc, #100]	; (3b168 <z_impl_k_thread_start+0x98>)
   3b102:	f004 f9ad 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3b106:	4816      	ldr	r0, [pc, #88]	; (3b160 <z_impl_k_thread_start+0x90>)
   3b108:	f7ff ffda 	bl	3b0c0 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   3b10c:	7b63      	ldrb	r3, [r4, #13]
   3b10e:	075a      	lsls	r2, r3, #29
   3b110:	d415      	bmi.n	3b13e <z_impl_k_thread_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3b112:	4813      	ldr	r0, [pc, #76]	; (3b160 <z_impl_k_thread_start+0x90>)
   3b114:	f7ff ffc4 	bl	3b0a0 <z_spin_unlock_valid>
   3b118:	b960      	cbnz	r0, 3b134 <z_impl_k_thread_start+0x64>
   3b11a:	4916      	ldr	r1, [pc, #88]	; (3b174 <z_impl_k_thread_start+0xa4>)
   3b11c:	2362      	movs	r3, #98	; 0x62
   3b11e:	4a12      	ldr	r2, [pc, #72]	; (3b168 <z_impl_k_thread_start+0x98>)
   3b120:	4812      	ldr	r0, [pc, #72]	; (3b16c <z_impl_k_thread_start+0x9c>)
   3b122:	f004 f990 	bl	3f446 <printk>
   3b126:	4814      	ldr	r0, [pc, #80]	; (3b178 <z_impl_k_thread_start+0xa8>)
   3b128:	f004 f98d 	bl	3f446 <printk>
   3b12c:	2162      	movs	r1, #98	; 0x62
   3b12e:	480e      	ldr	r0, [pc, #56]	; (3b168 <z_impl_k_thread_start+0x98>)
   3b130:	f004 f996 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3b134:	f385 8811 	msr	BASEPRI, r5
   3b138:	f3bf 8f6f 	isb	sy
}
   3b13c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3b13e:	f023 0304 	bic.w	r3, r3, #4
   3b142:	7363      	strb	r3, [r4, #13]
	if (z_is_thread_ready(thread)) {
   3b144:	4620      	mov	r0, r4
   3b146:	f006 fb31 	bl	417ac <z_is_thread_ready>
   3b14a:	b110      	cbz	r0, 3b152 <z_impl_k_thread_start+0x82>
		z_add_thread_to_ready_q(thread);
   3b14c:	4620      	mov	r0, r4
   3b14e:	f7ff f8eb 	bl	3a328 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   3b152:	4629      	mov	r1, r5
}
   3b154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   3b158:	4801      	ldr	r0, [pc, #4]	; (3b160 <z_impl_k_thread_start+0x90>)
   3b15a:	f7fe bf03 	b.w	39f64 <z_reschedule>
   3b15e:	bf00      	nop
   3b160:	2002a2e4 	.word	0x2002a2e4
   3b164:	00045d2d 	.word	0x00045d2d
   3b168:	00045d0e 	.word	0x00045d0e
   3b16c:	00045316 	.word	0x00045316
   3b170:	00045d42 	.word	0x00045d42
   3b174:	00045d57 	.word	0x00045d57
   3b178:	00045d6e 	.word	0x00045d6e

0003b17c <z_impl_k_thread_create>:
{
   3b17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b180:	b086      	sub	sp, #24
   3b182:	4604      	mov	r4, r0
   3b184:	460e      	mov	r6, r1
   3b186:	4617      	mov	r7, r2
   3b188:	4698      	mov	r8, r3
   3b18a:	9d11      	ldr	r5, [sp, #68]	; 0x44
   3b18c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   3b190:	b173      	cbz	r3, 3b1b0 <z_impl_k_thread_create+0x34>
   3b192:	491f      	ldr	r1, [pc, #124]	; (3b210 <z_impl_k_thread_create+0x94>)
   3b194:	f240 233f 	movw	r3, #575	; 0x23f
   3b198:	4a1e      	ldr	r2, [pc, #120]	; (3b214 <z_impl_k_thread_create+0x98>)
   3b19a:	481f      	ldr	r0, [pc, #124]	; (3b218 <z_impl_k_thread_create+0x9c>)
   3b19c:	f004 f953 	bl	3f446 <printk>
   3b1a0:	481e      	ldr	r0, [pc, #120]	; (3b21c <z_impl_k_thread_create+0xa0>)
   3b1a2:	f004 f950 	bl	3f446 <printk>
   3b1a6:	f240 213f 	movw	r1, #575	; 0x23f
   3b1aa:	481a      	ldr	r0, [pc, #104]	; (3b214 <z_impl_k_thread_create+0x98>)
   3b1ac:	f004 f958 	bl	3f460 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   3b1b0:	2300      	movs	r3, #0
   3b1b2:	9305      	str	r3, [sp, #20]
   3b1b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3b1b6:	463a      	mov	r2, r7
   3b1b8:	9304      	str	r3, [sp, #16]
   3b1ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3b1bc:	4631      	mov	r1, r6
   3b1be:	9303      	str	r3, [sp, #12]
   3b1c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3b1c2:	4620      	mov	r0, r4
   3b1c4:	9302      	str	r3, [sp, #8]
   3b1c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3b1c8:	9301      	str	r3, [sp, #4]
   3b1ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   3b1cc:	9300      	str	r3, [sp, #0]
   3b1ce:	4643      	mov	r3, r8
   3b1d0:	f7ff ff40 	bl	3b054 <z_setup_new_thread>
	if (delay != K_FOREVER) {
   3b1d4:	1c6b      	adds	r3, r5, #1
   3b1d6:	d003      	beq.n	3b1e0 <z_impl_k_thread_create+0x64>
	if (delay == 0) {
   3b1d8:	b935      	cbnz	r5, 3b1e8 <z_impl_k_thread_create+0x6c>
	z_impl_k_thread_start(thread);
   3b1da:	4620      	mov	r0, r4
   3b1dc:	f7ff ff78 	bl	3b0d0 <z_impl_k_thread_start>
}
   3b1e0:	4620      	mov	r0, r4
   3b1e2:	b006      	add	sp, #24
   3b1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   3b1e8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   3b1ec:	f240 30e7 	movw	r0, #999	; 0x3e7
   3b1f0:	2100      	movs	r1, #0
   3b1f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3b1f6:	2300      	movs	r3, #0
   3b1f8:	fbe6 0105 	umlal	r0, r1, r6, r5
   3b1fc:	f7dd fdae 	bl	18d5c <__aeabi_uldivmod>
   3b200:	4907      	ldr	r1, [pc, #28]	; (3b220 <z_impl_k_thread_create+0xa4>)
   3b202:	1c42      	adds	r2, r0, #1
   3b204:	f104 0018 	add.w	r0, r4, #24
   3b208:	f000 faa4 	bl	3b754 <z_add_timeout>
   3b20c:	e7e8      	b.n	3b1e0 <z_impl_k_thread_create+0x64>
   3b20e:	bf00      	nop
   3b210:	0004a263 	.word	0x0004a263
   3b214:	0004a452 	.word	0x0004a452
   3b218:	00045316 	.word	0x00045316
   3b21c:	0004a46e 	.word	0x0004a46e
   3b220:	0003a425 	.word	0x0003a425

0003b224 <z_init_static_threads>:
{
   3b224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   3b228:	4f3c      	ldr	r7, [pc, #240]	; (3b31c <z_init_static_threads+0xf8>)
   3b22a:	4d3d      	ldr	r5, [pc, #244]	; (3b320 <z_init_static_threads+0xfc>)
   3b22c:	463e      	mov	r6, r7
   3b22e:	f8df 8100 	ldr.w	r8, [pc, #256]	; 3b330 <z_init_static_threads+0x10c>
{
   3b232:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   3b234:	42bd      	cmp	r5, r7
   3b236:	d90e      	bls.n	3b256 <z_init_static_threads+0x32>
   3b238:	493a      	ldr	r1, [pc, #232]	; (3b324 <z_init_static_threads+0x100>)
   3b23a:	f240 23fe 	movw	r3, #766	; 0x2fe
   3b23e:	4642      	mov	r2, r8
   3b240:	4839      	ldr	r0, [pc, #228]	; (3b328 <z_init_static_threads+0x104>)
   3b242:	f004 f900 	bl	3f446 <printk>
   3b246:	4839      	ldr	r0, [pc, #228]	; (3b32c <z_init_static_threads+0x108>)
   3b248:	f004 f8fd 	bl	3f446 <printk>
   3b24c:	f240 21fe 	movw	r1, #766	; 0x2fe
   3b250:	4640      	mov	r0, r8
   3b252:	f004 f905 	bl	3f460 <assert_post_action>
   3b256:	42b5      	cmp	r5, r6
   3b258:	f105 0430 	add.w	r4, r5, #48	; 0x30
   3b25c:	d31f      	bcc.n	3b29e <z_init_static_threads+0x7a>
	k_sched_lock();
   3b25e:	f7fe febb 	bl	39fd8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   3b262:	4c2f      	ldr	r4, [pc, #188]	; (3b320 <z_init_static_threads+0xfc>)
   3b264:	4d32      	ldr	r5, [pc, #200]	; (3b330 <z_init_static_threads+0x10c>)
   3b266:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 3b324 <z_init_static_threads+0x100>
   3b26a:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 3b328 <z_init_static_threads+0x104>
   3b26e:	42b4      	cmp	r4, r6
   3b270:	d90e      	bls.n	3b290 <z_init_static_threads+0x6c>
   3b272:	4641      	mov	r1, r8
   3b274:	f240 331d 	movw	r3, #797	; 0x31d
   3b278:	462a      	mov	r2, r5
   3b27a:	4648      	mov	r0, r9
   3b27c:	f004 f8e3 	bl	3f446 <printk>
   3b280:	482a      	ldr	r0, [pc, #168]	; (3b32c <z_init_static_threads+0x108>)
   3b282:	f004 f8e0 	bl	3f446 <printk>
   3b286:	f240 311d 	movw	r1, #797	; 0x31d
   3b28a:	4628      	mov	r0, r5
   3b28c:	f004 f8e8 	bl	3f460 <assert_post_action>
   3b290:	42b4      	cmp	r4, r6
   3b292:	d321      	bcc.n	3b2d8 <z_init_static_threads+0xb4>
}
   3b294:	b007      	add	sp, #28
   3b296:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   3b29a:	f7fe bfcb 	b.w	3a234 <k_sched_unlock>
		z_setup_new_thread(
   3b29e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3b2a2:	9305      	str	r3, [sp, #20]
   3b2a4:	f854 3c10 	ldr.w	r3, [r4, #-16]
   3b2a8:	9304      	str	r3, [sp, #16]
   3b2aa:	f854 3c14 	ldr.w	r3, [r4, #-20]
   3b2ae:	9303      	str	r3, [sp, #12]
   3b2b0:	f854 3c18 	ldr.w	r3, [r4, #-24]
   3b2b4:	9302      	str	r3, [sp, #8]
   3b2b6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   3b2ba:	9301      	str	r3, [sp, #4]
   3b2bc:	f854 3c20 	ldr.w	r3, [r4, #-32]
   3b2c0:	9300      	str	r3, [sp, #0]
   3b2c2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   3b2c6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   3b2ca:	f7ff fec3 	bl	3b054 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   3b2ce:	f854 3c30 	ldr.w	r3, [r4, #-48]
   3b2d2:	64dd      	str	r5, [r3, #76]	; 0x4c
   3b2d4:	4625      	mov	r5, r4
   3b2d6:	e7ad      	b.n	3b234 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_FOREVER) {
   3b2d8:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   3b2dc:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
   3b2e0:	d006      	beq.n	3b2f0 <z_init_static_threads+0xcc>
			schedule_new_thread(thread_data->init_thread,
   3b2e2:	6827      	ldr	r7, [r4, #0]
	if (delay == 0) {
   3b2e4:	f1bc 0f00 	cmp.w	ip, #0
   3b2e8:	d104      	bne.n	3b2f4 <z_init_static_threads+0xd0>
   3b2ea:	4638      	mov	r0, r7
   3b2ec:	f7ff fef0 	bl	3b0d0 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   3b2f0:	3430      	adds	r4, #48	; 0x30
   3b2f2:	e7bc      	b.n	3b26e <z_init_static_threads+0x4a>
   3b2f4:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   3b2f8:	f240 30e7 	movw	r0, #999	; 0x3e7
   3b2fc:	2100      	movs	r1, #0
   3b2fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3b302:	2300      	movs	r3, #0
   3b304:	fbee 010c 	umlal	r0, r1, lr, ip
   3b308:	f7dd fd28 	bl	18d5c <__aeabi_uldivmod>
   3b30c:	4909      	ldr	r1, [pc, #36]	; (3b334 <z_init_static_threads+0x110>)
   3b30e:	1c42      	adds	r2, r0, #1
   3b310:	f107 0018 	add.w	r0, r7, #24
   3b314:	f000 fa1e 	bl	3b754 <z_add_timeout>
   3b318:	e7ea      	b.n	3b2f0 <z_init_static_threads+0xcc>
   3b31a:	bf00      	nop
   3b31c:	20031f70 	.word	0x20031f70
   3b320:	20031f70 	.word	0x20031f70
   3b324:	0004a493 	.word	0x0004a493
   3b328:	00045316 	.word	0x00045316
   3b32c:	0004a108 	.word	0x0004a108
   3b330:	0004a452 	.word	0x0004a452
   3b334:	0003a425 	.word	0x0003a425

0003b338 <z_impl_k_thread_suspend>:
{
   3b338:	b538      	push	{r3, r4, r5, lr}
   3b33a:	4605      	mov	r5, r0
	__asm__ volatile(
   3b33c:	f04f 0320 	mov.w	r3, #32
   3b340:	f3ef 8411 	mrs	r4, BASEPRI
   3b344:	f383 8811 	msr	BASEPRI, r3
   3b348:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3b34c:	481b      	ldr	r0, [pc, #108]	; (3b3bc <z_impl_k_thread_suspend+0x84>)
   3b34e:	f7ff fe99 	bl	3b084 <z_spin_lock_valid>
   3b352:	b960      	cbnz	r0, 3b36e <z_impl_k_thread_suspend+0x36>
   3b354:	491a      	ldr	r1, [pc, #104]	; (3b3c0 <z_impl_k_thread_suspend+0x88>)
   3b356:	234f      	movs	r3, #79	; 0x4f
   3b358:	4a1a      	ldr	r2, [pc, #104]	; (3b3c4 <z_impl_k_thread_suspend+0x8c>)
   3b35a:	481b      	ldr	r0, [pc, #108]	; (3b3c8 <z_impl_k_thread_suspend+0x90>)
   3b35c:	f004 f873 	bl	3f446 <printk>
   3b360:	481a      	ldr	r0, [pc, #104]	; (3b3cc <z_impl_k_thread_suspend+0x94>)
   3b362:	f004 f870 	bl	3f446 <printk>
   3b366:	214f      	movs	r1, #79	; 0x4f
   3b368:	4816      	ldr	r0, [pc, #88]	; (3b3c4 <z_impl_k_thread_suspend+0x8c>)
   3b36a:	f004 f879 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3b36e:	4813      	ldr	r0, [pc, #76]	; (3b3bc <z_impl_k_thread_suspend+0x84>)
   3b370:	f7ff fea6 	bl	3b0c0 <z_spin_lock_set_owner>
	z_thread_single_suspend(thread);
   3b374:	4628      	mov	r0, r5
   3b376:	f006 fa36 	bl	417e6 <z_thread_single_suspend>
	if (thread == _current) {
   3b37a:	4b15      	ldr	r3, [pc, #84]	; (3b3d0 <z_impl_k_thread_suspend+0x98>)
   3b37c:	689b      	ldr	r3, [r3, #8]
   3b37e:	42ab      	cmp	r3, r5
   3b380:	d105      	bne.n	3b38e <z_impl_k_thread_suspend+0x56>
		z_reschedule(&lock, key);
   3b382:	4621      	mov	r1, r4
}
   3b384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   3b388:	480c      	ldr	r0, [pc, #48]	; (3b3bc <z_impl_k_thread_suspend+0x84>)
   3b38a:	f7fe bdeb 	b.w	39f64 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3b38e:	480b      	ldr	r0, [pc, #44]	; (3b3bc <z_impl_k_thread_suspend+0x84>)
   3b390:	f7ff fe86 	bl	3b0a0 <z_spin_unlock_valid>
   3b394:	b960      	cbnz	r0, 3b3b0 <z_impl_k_thread_suspend+0x78>
   3b396:	490f      	ldr	r1, [pc, #60]	; (3b3d4 <z_impl_k_thread_suspend+0x9c>)
   3b398:	2362      	movs	r3, #98	; 0x62
   3b39a:	4a0a      	ldr	r2, [pc, #40]	; (3b3c4 <z_impl_k_thread_suspend+0x8c>)
   3b39c:	480a      	ldr	r0, [pc, #40]	; (3b3c8 <z_impl_k_thread_suspend+0x90>)
   3b39e:	f004 f852 	bl	3f446 <printk>
   3b3a2:	480d      	ldr	r0, [pc, #52]	; (3b3d8 <z_impl_k_thread_suspend+0xa0>)
   3b3a4:	f004 f84f 	bl	3f446 <printk>
   3b3a8:	2162      	movs	r1, #98	; 0x62
   3b3aa:	4806      	ldr	r0, [pc, #24]	; (3b3c4 <z_impl_k_thread_suspend+0x8c>)
   3b3ac:	f004 f858 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3b3b0:	f384 8811 	msr	BASEPRI, r4
   3b3b4:	f3bf 8f6f 	isb	sy
}
   3b3b8:	bd38      	pop	{r3, r4, r5, pc}
   3b3ba:	bf00      	nop
   3b3bc:	2002a2e4 	.word	0x2002a2e4
   3b3c0:	00045d2d 	.word	0x00045d2d
   3b3c4:	00045d0e 	.word	0x00045d0e
   3b3c8:	00045316 	.word	0x00045316
   3b3cc:	00045d42 	.word	0x00045d42
   3b3d0:	2002a1d8 	.word	0x2002a1d8
   3b3d4:	00045d57 	.word	0x00045d57
   3b3d8:	00045d6e 	.word	0x00045d6e

0003b3dc <z_impl_k_thread_resume>:
{
   3b3dc:	b538      	push	{r3, r4, r5, lr}
   3b3de:	4605      	mov	r5, r0
	__asm__ volatile(
   3b3e0:	f04f 0320 	mov.w	r3, #32
   3b3e4:	f3ef 8411 	mrs	r4, BASEPRI
   3b3e8:	f383 8811 	msr	BASEPRI, r3
   3b3ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3b3f0:	480e      	ldr	r0, [pc, #56]	; (3b42c <z_impl_k_thread_resume+0x50>)
   3b3f2:	f7ff fe47 	bl	3b084 <z_spin_lock_valid>
   3b3f6:	b960      	cbnz	r0, 3b412 <z_impl_k_thread_resume+0x36>
   3b3f8:	490d      	ldr	r1, [pc, #52]	; (3b430 <z_impl_k_thread_resume+0x54>)
   3b3fa:	234f      	movs	r3, #79	; 0x4f
   3b3fc:	4a0d      	ldr	r2, [pc, #52]	; (3b434 <z_impl_k_thread_resume+0x58>)
   3b3fe:	480e      	ldr	r0, [pc, #56]	; (3b438 <z_impl_k_thread_resume+0x5c>)
   3b400:	f004 f821 	bl	3f446 <printk>
   3b404:	480d      	ldr	r0, [pc, #52]	; (3b43c <z_impl_k_thread_resume+0x60>)
   3b406:	f004 f81e 	bl	3f446 <printk>
   3b40a:	214f      	movs	r1, #79	; 0x4f
   3b40c:	4809      	ldr	r0, [pc, #36]	; (3b434 <z_impl_k_thread_resume+0x58>)
   3b40e:	f004 f827 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3b412:	4806      	ldr	r0, [pc, #24]	; (3b42c <z_impl_k_thread_resume+0x50>)
   3b414:	f7ff fe54 	bl	3b0c0 <z_spin_lock_set_owner>
	z_thread_single_resume(thread);
   3b418:	4628      	mov	r0, r5
   3b41a:	f006 f9f1 	bl	41800 <z_thread_single_resume>
	z_reschedule(&lock, key);
   3b41e:	4621      	mov	r1, r4
}
   3b420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   3b424:	4801      	ldr	r0, [pc, #4]	; (3b42c <z_impl_k_thread_resume+0x50>)
   3b426:	f7fe bd9d 	b.w	39f64 <z_reschedule>
   3b42a:	bf00      	nop
   3b42c:	2002a2e4 	.word	0x2002a2e4
   3b430:	00045d2d 	.word	0x00045d2d
   3b434:	00045d0e 	.word	0x00045d0e
   3b438:	00045316 	.word	0x00045316
   3b43c:	00045d42 	.word	0x00045d42

0003b440 <work_cancel>:
	work->work_q = NULL;
}

static int work_cancel(struct k_delayed_work *work)
{
	__ASSERT(work->work_q != NULL, "");
   3b440:	69c3      	ldr	r3, [r0, #28]
{
   3b442:	b570      	push	{r4, r5, r6, lr}
   3b444:	4604      	mov	r4, r0
	__ASSERT(work->work_q != NULL, "");
   3b446:	b963      	cbnz	r3, 3b462 <work_cancel+0x22>
   3b448:	4923      	ldr	r1, [pc, #140]	; (3b4d8 <work_cancel+0x98>)
   3b44a:	2339      	movs	r3, #57	; 0x39
   3b44c:	4a23      	ldr	r2, [pc, #140]	; (3b4dc <work_cancel+0x9c>)
   3b44e:	4824      	ldr	r0, [pc, #144]	; (3b4e0 <work_cancel+0xa0>)
   3b450:	f003 fff9 	bl	3f446 <printk>
   3b454:	4823      	ldr	r0, [pc, #140]	; (3b4e4 <work_cancel+0xa4>)
   3b456:	f003 fff6 	bl	3f446 <printk>
   3b45a:	2139      	movs	r1, #57	; 0x39
   3b45c:	481f      	ldr	r0, [pc, #124]	; (3b4dc <work_cancel+0x9c>)
   3b45e:	f003 ffff 	bl	3f460 <assert_post_action>
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   3b462:	f104 0508 	add.w	r5, r4, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3b466:	e8d5 3faf 	lda	r3, [r5]

	if (k_work_pending(&work->work)) {
   3b46a:	07db      	lsls	r3, r3, #31
   3b46c:	d52f      	bpl.n	3b4ce <work_cancel+0x8e>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   3b46e:	2100      	movs	r1, #0
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   3b470:	69e2      	ldr	r2, [r4, #28]
   3b472:	6813      	ldr	r3, [r2, #0]
   3b474:	b913      	cbnz	r3, 3b47c <work_cancel+0x3c>
			return -EINVAL;
   3b476:	f06f 0015 	mvn.w	r0, #21
	work->work_q = NULL;

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);

	return 0;
}
   3b47a:	bd70      	pop	{r4, r5, r6, pc}
   3b47c:	429c      	cmp	r4, r3
   3b47e:	d121      	bne.n	3b4c4 <work_cancel+0x84>
Z_GENLIST_REMOVE(sflist, sfnode)
   3b480:	6823      	ldr	r3, [r4, #0]
   3b482:	6856      	ldr	r6, [r2, #4]
   3b484:	f023 0003 	bic.w	r0, r3, #3
   3b488:	b991      	cbnz	r1, 3b4b0 <work_cancel+0x70>
   3b48a:	42b4      	cmp	r4, r6
	list->head = node;
   3b48c:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   3b48e:	d100      	bne.n	3b492 <work_cancel+0x52>
	list->tail = node;
   3b490:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3b492:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3b494:	f003 0303 	and.w	r3, r3, #3
   3b498:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   3b49a:	2000      	movs	r0, #0
   3b49c:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3b49e:	e8d5 3fef 	ldaex	r3, [r5]
   3b4a2:	f023 0301 	bic.w	r3, r3, #1
   3b4a6:	e8c5 3fe2 	stlex	r2, r3, [r5]
   3b4aa:	2a00      	cmp	r2, #0
   3b4ac:	d0e5      	beq.n	3b47a <work_cancel+0x3a>
   3b4ae:	e7f6      	b.n	3b49e <work_cancel+0x5e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3b4b0:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   3b4b2:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   3b4b4:	f003 0303 	and.w	r3, r3, #3
   3b4b8:	ea43 0300 	orr.w	r3, r3, r0
   3b4bc:	600b      	str	r3, [r1, #0]
	list->tail = node;
   3b4be:	bf08      	it	eq
   3b4c0:	6051      	streq	r1, [r2, #4]
   3b4c2:	e7e6      	b.n	3b492 <work_cancel+0x52>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3b4c4:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   3b4c6:	4619      	mov	r1, r3
   3b4c8:	f020 0303 	bic.w	r3, r0, #3
   3b4cc:	e7d2      	b.n	3b474 <work_cancel+0x34>
		(void)z_abort_timeout(&work->timeout);
   3b4ce:	f104 000c 	add.w	r0, r4, #12
   3b4d2:	f000 f9e3 	bl	3b89c <z_abort_timeout>
   3b4d6:	e7e0      	b.n	3b49a <work_cancel+0x5a>
   3b4d8:	0004a4dc 	.word	0x0004a4dc
   3b4dc:	0004a4c0 	.word	0x0004a4c0
   3b4e0:	00045316 	.word	0x00045316
   3b4e4:	0004a182 	.word	0x0004a182

0003b4e8 <k_work_q_start>:
{
   3b4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b4ec:	4605      	mov	r5, r0
   3b4ee:	b086      	sub	sp, #24
   3b4f0:	460e      	mov	r6, r1
   3b4f2:	4617      	mov	r7, r2
   3b4f4:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   3b4f6:	f006 f907 	bl	41708 <z_impl_k_queue_init>
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   3b4fa:	f105 0414 	add.w	r4, r5, #20
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   3b4fe:	2000      	movs	r0, #0
   3b500:	4b09      	ldr	r3, [pc, #36]	; (3b528 <k_work_q_start+0x40>)
   3b502:	e9cd 0004 	strd	r0, r0, [sp, #16]
   3b506:	e9cd 0802 	strd	r0, r8, [sp, #8]
   3b50a:	e9cd 5000 	strd	r5, r0, [sp]
   3b50e:	463a      	mov	r2, r7
   3b510:	4631      	mov	r1, r6
   3b512:	4620      	mov	r0, r4
   3b514:	f7ff fe32 	bl	3b17c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   3b518:	4620      	mov	r0, r4
   3b51a:	4904      	ldr	r1, [pc, #16]	; (3b52c <k_work_q_start+0x44>)
}
   3b51c:	b006      	add	sp, #24
   3b51e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3b522:	f006 b94c 	b.w	417be <z_impl_k_thread_name_set>
   3b526:	bf00      	nop
   3b528:	0003ef03 	.word	0x0003ef03
   3b52c:	00047161 	.word	0x00047161

0003b530 <k_delayed_work_submit_to_queue>:

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
   3b530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b534:	4606      	mov	r6, r0
   3b536:	460d      	mov	r5, r1
   3b538:	4690      	mov	r8, r2
   3b53a:	f04f 0320 	mov.w	r3, #32
   3b53e:	f3ef 8711 	mrs	r7, BASEPRI
   3b542:	f383 8811 	msr	BASEPRI, r3
   3b546:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3b54a:	4836      	ldr	r0, [pc, #216]	; (3b624 <k_delayed_work_submit_to_queue+0xf4>)
   3b54c:	f7ff fd9a 	bl	3b084 <z_spin_lock_valid>
   3b550:	b960      	cbnz	r0, 3b56c <k_delayed_work_submit_to_queue+0x3c>
   3b552:	4935      	ldr	r1, [pc, #212]	; (3b628 <k_delayed_work_submit_to_queue+0xf8>)
   3b554:	234f      	movs	r3, #79	; 0x4f
   3b556:	4a35      	ldr	r2, [pc, #212]	; (3b62c <k_delayed_work_submit_to_queue+0xfc>)
   3b558:	4835      	ldr	r0, [pc, #212]	; (3b630 <k_delayed_work_submit_to_queue+0x100>)
   3b55a:	f003 ff74 	bl	3f446 <printk>
   3b55e:	4835      	ldr	r0, [pc, #212]	; (3b634 <k_delayed_work_submit_to_queue+0x104>)
   3b560:	f003 ff71 	bl	3f446 <printk>
   3b564:	214f      	movs	r1, #79	; 0x4f
   3b566:	4831      	ldr	r0, [pc, #196]	; (3b62c <k_delayed_work_submit_to_queue+0xfc>)
   3b568:	f003 ff7a 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3b56c:	482d      	ldr	r0, [pc, #180]	; (3b624 <k_delayed_work_submit_to_queue+0xf4>)
   3b56e:	f7ff fda7 	bl	3b0c0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   3b572:	69ec      	ldr	r4, [r5, #28]
   3b574:	b1e4      	cbz	r4, 3b5b0 <k_delayed_work_submit_to_queue+0x80>
   3b576:	42b4      	cmp	r4, r6
   3b578:	d150      	bne.n	3b61c <k_delayed_work_submit_to_queue+0xec>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   3b57a:	4628      	mov	r0, r5
   3b57c:	f7ff ff60 	bl	3b440 <work_cancel>
		if (err < 0) {
   3b580:	1e04      	subs	r4, r0, #0
   3b582:	da17      	bge.n	3b5b4 <k_delayed_work_submit_to_queue+0x84>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3b584:	4827      	ldr	r0, [pc, #156]	; (3b624 <k_delayed_work_submit_to_queue+0xf4>)
   3b586:	f7ff fd8b 	bl	3b0a0 <z_spin_unlock_valid>
   3b58a:	b960      	cbnz	r0, 3b5a6 <k_delayed_work_submit_to_queue+0x76>
   3b58c:	492a      	ldr	r1, [pc, #168]	; (3b638 <k_delayed_work_submit_to_queue+0x108>)
   3b58e:	2362      	movs	r3, #98	; 0x62
   3b590:	4a26      	ldr	r2, [pc, #152]	; (3b62c <k_delayed_work_submit_to_queue+0xfc>)
   3b592:	4827      	ldr	r0, [pc, #156]	; (3b630 <k_delayed_work_submit_to_queue+0x100>)
   3b594:	f003 ff57 	bl	3f446 <printk>
   3b598:	4828      	ldr	r0, [pc, #160]	; (3b63c <k_delayed_work_submit_to_queue+0x10c>)
   3b59a:	f003 ff54 	bl	3f446 <printk>
   3b59e:	2162      	movs	r1, #98	; 0x62
   3b5a0:	4822      	ldr	r0, [pc, #136]	; (3b62c <k_delayed_work_submit_to_queue+0xfc>)
   3b5a2:	f003 ff5d 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3b5a6:	f387 8811 	msr	BASEPRI, r7
   3b5aa:	f3bf 8f6f 	isb	sy
	z_add_timeout(&work->timeout, work_timeout,
		     _TICK_ALIGN + k_ms_to_ticks_ceil32(delay));

done:
	k_spin_unlock(&lock, key);
	return err;
   3b5ae:	e01f      	b.n	3b5f0 <k_delayed_work_submit_to_queue+0xc0>
	if (work->work_q == work_q) {
   3b5b0:	2e00      	cmp	r6, #0
   3b5b2:	d0e2      	beq.n	3b57a <k_delayed_work_submit_to_queue+0x4a>
	work->work_q = work_q;
   3b5b4:	61ee      	str	r6, [r5, #28]
	if (delay == 0) {
   3b5b6:	f1b8 0f00 	cmp.w	r8, #0
   3b5ba:	d11c      	bne.n	3b5f6 <k_delayed_work_submit_to_queue+0xc6>
   3b5bc:	4819      	ldr	r0, [pc, #100]	; (3b624 <k_delayed_work_submit_to_queue+0xf4>)
   3b5be:	f7ff fd6f 	bl	3b0a0 <z_spin_unlock_valid>
   3b5c2:	b960      	cbnz	r0, 3b5de <k_delayed_work_submit_to_queue+0xae>
   3b5c4:	491c      	ldr	r1, [pc, #112]	; (3b638 <k_delayed_work_submit_to_queue+0x108>)
   3b5c6:	2362      	movs	r3, #98	; 0x62
   3b5c8:	4a18      	ldr	r2, [pc, #96]	; (3b62c <k_delayed_work_submit_to_queue+0xfc>)
   3b5ca:	4819      	ldr	r0, [pc, #100]	; (3b630 <k_delayed_work_submit_to_queue+0x100>)
   3b5cc:	f003 ff3b 	bl	3f446 <printk>
   3b5d0:	481a      	ldr	r0, [pc, #104]	; (3b63c <k_delayed_work_submit_to_queue+0x10c>)
   3b5d2:	f003 ff38 	bl	3f446 <printk>
   3b5d6:	2162      	movs	r1, #98	; 0x62
   3b5d8:	4814      	ldr	r0, [pc, #80]	; (3b62c <k_delayed_work_submit_to_queue+0xfc>)
   3b5da:	f003 ff41 	bl	3f460 <assert_post_action>
   3b5de:	f387 8811 	msr	BASEPRI, r7
   3b5e2:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   3b5e6:	4629      	mov	r1, r5
   3b5e8:	4630      	mov	r0, r6
   3b5ea:	f006 f937 	bl	4185c <k_work_submit_to_queue>
		return 0;
   3b5ee:	2400      	movs	r4, #0
}
   3b5f0:	4620      	mov	r0, r4
   3b5f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3b5f6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   3b5fa:	f240 30e7 	movw	r0, #999	; 0x3e7
   3b5fe:	2100      	movs	r1, #0
   3b600:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3b604:	2300      	movs	r3, #0
   3b606:	fbe6 0108 	umlal	r0, r1, r6, r8
   3b60a:	f7dd fba7 	bl	18d5c <__aeabi_uldivmod>
	z_add_timeout(&work->timeout, work_timeout,
   3b60e:	490c      	ldr	r1, [pc, #48]	; (3b640 <k_delayed_work_submit_to_queue+0x110>)
   3b610:	1c42      	adds	r2, r0, #1
   3b612:	f105 000c 	add.w	r0, r5, #12
   3b616:	f000 f89d 	bl	3b754 <z_add_timeout>
   3b61a:	e7b3      	b.n	3b584 <k_delayed_work_submit_to_queue+0x54>
		err = -EADDRINUSE;
   3b61c:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   3b620:	e7b0      	b.n	3b584 <k_delayed_work_submit_to_queue+0x54>
   3b622:	bf00      	nop
   3b624:	2002a2e8 	.word	0x2002a2e8
   3b628:	00045d2d 	.word	0x00045d2d
   3b62c:	00045d0e 	.word	0x00045d0e
   3b630:	00045316 	.word	0x00045316
   3b634:	00045d42 	.word	0x00045d42
   3b638:	00045d57 	.word	0x00045d57
   3b63c:	00045d6e 	.word	0x00045d6e
   3b640:	00041885 	.word	0x00041885

0003b644 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   3b644:	b538      	push	{r3, r4, r5, lr}
	if (!work->work_q) {
   3b646:	69c3      	ldr	r3, [r0, #28]
{
   3b648:	4604      	mov	r4, r0
	if (!work->work_q) {
   3b64a:	2b00      	cmp	r3, #0
   3b64c:	d036      	beq.n	3b6bc <k_delayed_work_cancel+0x78>
	__asm__ volatile(
   3b64e:	f04f 0320 	mov.w	r3, #32
   3b652:	f3ef 8511 	mrs	r5, BASEPRI
   3b656:	f383 8811 	msr	BASEPRI, r3
   3b65a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3b65e:	4819      	ldr	r0, [pc, #100]	; (3b6c4 <k_delayed_work_cancel+0x80>)
   3b660:	f7ff fd10 	bl	3b084 <z_spin_lock_valid>
   3b664:	b960      	cbnz	r0, 3b680 <k_delayed_work_cancel+0x3c>
   3b666:	4918      	ldr	r1, [pc, #96]	; (3b6c8 <k_delayed_work_cancel+0x84>)
   3b668:	234f      	movs	r3, #79	; 0x4f
   3b66a:	4a18      	ldr	r2, [pc, #96]	; (3b6cc <k_delayed_work_cancel+0x88>)
   3b66c:	4818      	ldr	r0, [pc, #96]	; (3b6d0 <k_delayed_work_cancel+0x8c>)
   3b66e:	f003 feea 	bl	3f446 <printk>
   3b672:	4818      	ldr	r0, [pc, #96]	; (3b6d4 <k_delayed_work_cancel+0x90>)
   3b674:	f003 fee7 	bl	3f446 <printk>
   3b678:	214f      	movs	r1, #79	; 0x4f
   3b67a:	4814      	ldr	r0, [pc, #80]	; (3b6cc <k_delayed_work_cancel+0x88>)
   3b67c:	f003 fef0 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3b680:	4810      	ldr	r0, [pc, #64]	; (3b6c4 <k_delayed_work_cancel+0x80>)
   3b682:	f7ff fd1d 	bl	3b0c0 <z_spin_lock_set_owner>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   3b686:	4620      	mov	r0, r4
   3b688:	f7ff feda 	bl	3b440 <work_cancel>
   3b68c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3b68e:	480d      	ldr	r0, [pc, #52]	; (3b6c4 <k_delayed_work_cancel+0x80>)
   3b690:	f7ff fd06 	bl	3b0a0 <z_spin_unlock_valid>
   3b694:	b960      	cbnz	r0, 3b6b0 <k_delayed_work_cancel+0x6c>
   3b696:	4910      	ldr	r1, [pc, #64]	; (3b6d8 <k_delayed_work_cancel+0x94>)
   3b698:	2362      	movs	r3, #98	; 0x62
   3b69a:	4a0c      	ldr	r2, [pc, #48]	; (3b6cc <k_delayed_work_cancel+0x88>)
   3b69c:	480c      	ldr	r0, [pc, #48]	; (3b6d0 <k_delayed_work_cancel+0x8c>)
   3b69e:	f003 fed2 	bl	3f446 <printk>
   3b6a2:	480e      	ldr	r0, [pc, #56]	; (3b6dc <k_delayed_work_cancel+0x98>)
   3b6a4:	f003 fecf 	bl	3f446 <printk>
   3b6a8:	2162      	movs	r1, #98	; 0x62
   3b6aa:	4808      	ldr	r0, [pc, #32]	; (3b6cc <k_delayed_work_cancel+0x88>)
   3b6ac:	f003 fed8 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3b6b0:	f385 8811 	msr	BASEPRI, r5
   3b6b4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   3b6b8:	4620      	mov	r0, r4
   3b6ba:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3b6bc:	f06f 0415 	mvn.w	r4, #21
   3b6c0:	e7fa      	b.n	3b6b8 <k_delayed_work_cancel+0x74>
   3b6c2:	bf00      	nop
   3b6c4:	2002a2e8 	.word	0x2002a2e8
   3b6c8:	00045d2d 	.word	0x00045d2d
   3b6cc:	00045d0e 	.word	0x00045d0e
   3b6d0:	00045316 	.word	0x00045316
   3b6d4:	00045d42 	.word	0x00045d42
   3b6d8:	00045d57 	.word	0x00045d57
   3b6dc:	00045d6e 	.word	0x00045d6e

0003b6e0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   3b6e0:	4b03      	ldr	r3, [pc, #12]	; (3b6f0 <elapsed+0x10>)
   3b6e2:	681b      	ldr	r3, [r3, #0]
   3b6e4:	b90b      	cbnz	r3, 3b6ea <elapsed+0xa>
   3b6e6:	f7e4 bd83 	b.w	201f0 <z_clock_elapsed>
}
   3b6ea:	2000      	movs	r0, #0
   3b6ec:	4770      	bx	lr
   3b6ee:	bf00      	nop
   3b6f0:	2002a2ec 	.word	0x2002a2ec

0003b6f4 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3b6f4:	6803      	ldr	r3, [r0, #0]
   3b6f6:	b140      	cbz	r0, 3b70a <remove_timeout+0x16>
   3b6f8:	4a07      	ldr	r2, [pc, #28]	; (3b718 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   3b6fa:	6852      	ldr	r2, [r2, #4]
   3b6fc:	4290      	cmp	r0, r2
   3b6fe:	d004      	beq.n	3b70a <remove_timeout+0x16>
	if (next(t) != NULL) {
   3b700:	b11b      	cbz	r3, 3b70a <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   3b702:	689a      	ldr	r2, [r3, #8]
   3b704:	6881      	ldr	r1, [r0, #8]
   3b706:	440a      	add	r2, r1
   3b708:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   3b70a:	6842      	ldr	r2, [r0, #4]
   3b70c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3b70e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3b710:	2300      	movs	r3, #0
	node->prev = NULL;
   3b712:	e9c0 3300 	strd	r3, r3, [r0]
}
   3b716:	4770      	bx	lr
   3b718:	20031c88 	.word	0x20031c88

0003b71c <next_timeout>:
	return list->head == list;
   3b71c:	4b0b      	ldr	r3, [pc, #44]	; (3b74c <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   3b71e:	b510      	push	{r4, lr}
   3b720:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3b722:	429c      	cmp	r4, r3
   3b724:	bf08      	it	eq
   3b726:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   3b728:	f7ff ffda 	bl	3b6e0 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   3b72c:	b154      	cbz	r4, 3b744 <next_timeout+0x28>
   3b72e:	68a3      	ldr	r3, [r4, #8]
   3b730:	1a18      	subs	r0, r3, r0
   3b732:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   3b736:	4b06      	ldr	r3, [pc, #24]	; (3b750 <next_timeout+0x34>)
   3b738:	691b      	ldr	r3, [r3, #16]
   3b73a:	b113      	cbz	r3, 3b742 <next_timeout+0x26>
   3b73c:	4298      	cmp	r0, r3
   3b73e:	bfa8      	it	ge
   3b740:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   3b742:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   3b744:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   3b748:	e7f5      	b.n	3b736 <next_timeout+0x1a>
   3b74a:	bf00      	nop
   3b74c:	20031c88 	.word	0x20031c88
   3b750:	2002a1d8 	.word	0x2002a1d8

0003b754 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   3b754:	6803      	ldr	r3, [r0, #0]
{
   3b756:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3b75a:	4604      	mov	r4, r0
   3b75c:	460e      	mov	r6, r1
   3b75e:	4615      	mov	r5, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   3b760:	b163      	cbz	r3, 3b77c <z_add_timeout+0x28>
   3b762:	4942      	ldr	r1, [pc, #264]	; (3b86c <z_add_timeout+0x118>)
   3b764:	2358      	movs	r3, #88	; 0x58
   3b766:	4a42      	ldr	r2, [pc, #264]	; (3b870 <z_add_timeout+0x11c>)
   3b768:	4842      	ldr	r0, [pc, #264]	; (3b874 <z_add_timeout+0x120>)
   3b76a:	f003 fe6c 	bl	3f446 <printk>
   3b76e:	4842      	ldr	r0, [pc, #264]	; (3b878 <z_add_timeout+0x124>)
   3b770:	f003 fe69 	bl	3f446 <printk>
   3b774:	2158      	movs	r1, #88	; 0x58
   3b776:	483e      	ldr	r0, [pc, #248]	; (3b870 <z_add_timeout+0x11c>)
   3b778:	f003 fe72 	bl	3f460 <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   3b77c:	2d01      	cmp	r5, #1
   3b77e:	bfb8      	it	lt
   3b780:	2501      	movlt	r5, #1
	to->fn = fn;
   3b782:	60e6      	str	r6, [r4, #12]
	__asm__ volatile(
   3b784:	f04f 0320 	mov.w	r3, #32
   3b788:	f3ef 8811 	mrs	r8, BASEPRI
   3b78c:	f383 8811 	msr	BASEPRI, r3
   3b790:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3b794:	4839      	ldr	r0, [pc, #228]	; (3b87c <z_add_timeout+0x128>)
   3b796:	f7ff fc75 	bl	3b084 <z_spin_lock_valid>
   3b79a:	b960      	cbnz	r0, 3b7b6 <z_add_timeout+0x62>
   3b79c:	4938      	ldr	r1, [pc, #224]	; (3b880 <z_add_timeout+0x12c>)
   3b79e:	234f      	movs	r3, #79	; 0x4f
   3b7a0:	4a38      	ldr	r2, [pc, #224]	; (3b884 <z_add_timeout+0x130>)
   3b7a2:	4834      	ldr	r0, [pc, #208]	; (3b874 <z_add_timeout+0x120>)
   3b7a4:	f003 fe4f 	bl	3f446 <printk>
   3b7a8:	4837      	ldr	r0, [pc, #220]	; (3b888 <z_add_timeout+0x134>)
   3b7aa:	f003 fe4c 	bl	3f446 <printk>
   3b7ae:	214f      	movs	r1, #79	; 0x4f
   3b7b0:	4834      	ldr	r0, [pc, #208]	; (3b884 <z_add_timeout+0x130>)
   3b7b2:	f003 fe55 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3b7b6:	4831      	ldr	r0, [pc, #196]	; (3b87c <z_add_timeout+0x128>)
   3b7b8:	f7ff fc82 	bl	3b0c0 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   3b7bc:	f7ff ff90 	bl	3b6e0 <elapsed>
   3b7c0:	4428      	add	r0, r5
	return list->head == list;
   3b7c2:	4d32      	ldr	r5, [pc, #200]	; (3b88c <z_add_timeout+0x138>)
   3b7c4:	60a0      	str	r0, [r4, #8]
   3b7c6:	682e      	ldr	r6, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3b7c8:	42ae      	cmp	r6, r5
   3b7ca:	d005      	beq.n	3b7d8 <z_add_timeout+0x84>
		for (t = first(); t != NULL; t = next(t)) {
			__ASSERT(t->dticks >= 0, "");
   3b7cc:	4f28      	ldr	r7, [pc, #160]	; (3b870 <z_add_timeout+0x11c>)
   3b7ce:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 3b898 <z_add_timeout+0x144>
   3b7d2:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 3b874 <z_add_timeout+0x120>
		for (t = first(); t != NULL; t = next(t)) {
   3b7d6:	b936      	cbnz	r6, 3b7e6 <z_add_timeout+0x92>
	node->prev = list->tail;
   3b7d8:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   3b7da:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   3b7dc:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   3b7de:	686b      	ldr	r3, [r5, #4]
   3b7e0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3b7e2:	606c      	str	r4, [r5, #4]
   3b7e4:	e01a      	b.n	3b81c <z_add_timeout+0xc8>
			__ASSERT(t->dticks >= 0, "");
   3b7e6:	68b3      	ldr	r3, [r6, #8]
   3b7e8:	2b00      	cmp	r3, #0
   3b7ea:	da0c      	bge.n	3b806 <z_add_timeout+0xb2>
   3b7ec:	4649      	mov	r1, r9
   3b7ee:	2361      	movs	r3, #97	; 0x61
   3b7f0:	463a      	mov	r2, r7
   3b7f2:	4650      	mov	r0, sl
   3b7f4:	f003 fe27 	bl	3f446 <printk>
   3b7f8:	481f      	ldr	r0, [pc, #124]	; (3b878 <z_add_timeout+0x124>)
   3b7fa:	f003 fe24 	bl	3f446 <printk>
   3b7fe:	2161      	movs	r1, #97	; 0x61
   3b800:	4638      	mov	r0, r7
   3b802:	f003 fe2d 	bl	3f460 <assert_post_action>

			if (t->dticks > to->dticks) {
   3b806:	68b2      	ldr	r2, [r6, #8]
   3b808:	68a3      	ldr	r3, [r4, #8]
   3b80a:	429a      	cmp	r2, r3
   3b80c:	dd27      	ble.n	3b85e <z_add_timeout+0x10a>
				t->dticks -= to->dticks;
   3b80e:	1ad3      	subs	r3, r2, r3
   3b810:	60b3      	str	r3, [r6, #8]
	node->prev = successor->prev;
   3b812:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   3b814:	e9c4 6300 	strd	r6, r3, [r4]
	successor->prev->next = node;
   3b818:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   3b81a:	6074      	str	r4, [r6, #4]
	return list->head == list;
   3b81c:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3b81e:	42ab      	cmp	r3, r5
   3b820:	d006      	beq.n	3b830 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   3b822:	429c      	cmp	r4, r3
   3b824:	d104      	bne.n	3b830 <z_add_timeout+0xdc>
			z_clock_set_timeout(next_timeout(), false);
   3b826:	f7ff ff79 	bl	3b71c <next_timeout>
   3b82a:	2100      	movs	r1, #0
   3b82c:	f7e4 fc5e 	bl	200ec <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3b830:	4812      	ldr	r0, [pc, #72]	; (3b87c <z_add_timeout+0x128>)
   3b832:	f7ff fc35 	bl	3b0a0 <z_spin_unlock_valid>
   3b836:	b960      	cbnz	r0, 3b852 <z_add_timeout+0xfe>
   3b838:	4915      	ldr	r1, [pc, #84]	; (3b890 <z_add_timeout+0x13c>)
   3b83a:	2362      	movs	r3, #98	; 0x62
   3b83c:	4a11      	ldr	r2, [pc, #68]	; (3b884 <z_add_timeout+0x130>)
   3b83e:	480d      	ldr	r0, [pc, #52]	; (3b874 <z_add_timeout+0x120>)
   3b840:	f003 fe01 	bl	3f446 <printk>
   3b844:	4813      	ldr	r0, [pc, #76]	; (3b894 <z_add_timeout+0x140>)
   3b846:	f003 fdfe 	bl	3f446 <printk>
   3b84a:	2162      	movs	r1, #98	; 0x62
   3b84c:	480d      	ldr	r0, [pc, #52]	; (3b884 <z_add_timeout+0x130>)
   3b84e:	f003 fe07 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3b852:	f388 8811 	msr	BASEPRI, r8
   3b856:	f3bf 8f6f 	isb	sy
		}
	}
}
   3b85a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			to->dticks -= t->dticks;
   3b85e:	1a9b      	subs	r3, r3, r2
   3b860:	60a3      	str	r3, [r4, #8]
	return (node == list->tail) ? NULL : node->next;
   3b862:	686b      	ldr	r3, [r5, #4]
   3b864:	429e      	cmp	r6, r3
   3b866:	d0b7      	beq.n	3b7d8 <z_add_timeout+0x84>
   3b868:	6836      	ldr	r6, [r6, #0]
   3b86a:	e7b4      	b.n	3b7d6 <z_add_timeout+0x82>
   3b86c:	0004a515 	.word	0x0004a515
   3b870:	0004a4f8 	.word	0x0004a4f8
   3b874:	00045316 	.word	0x00045316
   3b878:	0004a182 	.word	0x0004a182
   3b87c:	2002a2f0 	.word	0x2002a2f0
   3b880:	00045d2d 	.word	0x00045d2d
   3b884:	00045d0e 	.word	0x00045d0e
   3b888:	00045d42 	.word	0x00045d42
   3b88c:	20031c88 	.word	0x20031c88
   3b890:	00045d57 	.word	0x00045d57
   3b894:	00045d6e 	.word	0x00045d6e
   3b898:	0004a535 	.word	0x0004a535

0003b89c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   3b89c:	b538      	push	{r3, r4, r5, lr}
   3b89e:	4604      	mov	r4, r0
	__asm__ volatile(
   3b8a0:	f04f 0320 	mov.w	r3, #32
   3b8a4:	f3ef 8511 	mrs	r5, BASEPRI
   3b8a8:	f383 8811 	msr	BASEPRI, r3
   3b8ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3b8b0:	4819      	ldr	r0, [pc, #100]	; (3b918 <z_abort_timeout+0x7c>)
   3b8b2:	f7ff fbe7 	bl	3b084 <z_spin_lock_valid>
   3b8b6:	b960      	cbnz	r0, 3b8d2 <z_abort_timeout+0x36>
   3b8b8:	4918      	ldr	r1, [pc, #96]	; (3b91c <z_abort_timeout+0x80>)
   3b8ba:	234f      	movs	r3, #79	; 0x4f
   3b8bc:	4a18      	ldr	r2, [pc, #96]	; (3b920 <z_abort_timeout+0x84>)
   3b8be:	4819      	ldr	r0, [pc, #100]	; (3b924 <z_abort_timeout+0x88>)
   3b8c0:	f003 fdc1 	bl	3f446 <printk>
   3b8c4:	4818      	ldr	r0, [pc, #96]	; (3b928 <z_abort_timeout+0x8c>)
   3b8c6:	f003 fdbe 	bl	3f446 <printk>
   3b8ca:	214f      	movs	r1, #79	; 0x4f
   3b8cc:	4814      	ldr	r0, [pc, #80]	; (3b920 <z_abort_timeout+0x84>)
   3b8ce:	f003 fdc7 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3b8d2:	4811      	ldr	r0, [pc, #68]	; (3b918 <z_abort_timeout+0x7c>)
   3b8d4:	f7ff fbf4 	bl	3b0c0 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   3b8d8:	6823      	ldr	r3, [r4, #0]
   3b8da:	b1d3      	cbz	r3, 3b912 <z_abort_timeout+0x76>
			remove_timeout(to);
   3b8dc:	4620      	mov	r0, r4
   3b8de:	f7ff ff09 	bl	3b6f4 <remove_timeout>
			ret = 0;
   3b8e2:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3b8e4:	480c      	ldr	r0, [pc, #48]	; (3b918 <z_abort_timeout+0x7c>)
   3b8e6:	f7ff fbdb 	bl	3b0a0 <z_spin_unlock_valid>
   3b8ea:	b960      	cbnz	r0, 3b906 <z_abort_timeout+0x6a>
   3b8ec:	490f      	ldr	r1, [pc, #60]	; (3b92c <z_abort_timeout+0x90>)
   3b8ee:	2362      	movs	r3, #98	; 0x62
   3b8f0:	4a0b      	ldr	r2, [pc, #44]	; (3b920 <z_abort_timeout+0x84>)
   3b8f2:	480c      	ldr	r0, [pc, #48]	; (3b924 <z_abort_timeout+0x88>)
   3b8f4:	f003 fda7 	bl	3f446 <printk>
   3b8f8:	480d      	ldr	r0, [pc, #52]	; (3b930 <z_abort_timeout+0x94>)
   3b8fa:	f003 fda4 	bl	3f446 <printk>
   3b8fe:	2162      	movs	r1, #98	; 0x62
   3b900:	4807      	ldr	r0, [pc, #28]	; (3b920 <z_abort_timeout+0x84>)
   3b902:	f003 fdad 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3b906:	f385 8811 	msr	BASEPRI, r5
   3b90a:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   3b90e:	4620      	mov	r0, r4
   3b910:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   3b912:	f06f 0415 	mvn.w	r4, #21
   3b916:	e7e5      	b.n	3b8e4 <z_abort_timeout+0x48>
   3b918:	2002a2f0 	.word	0x2002a2f0
   3b91c:	00045d2d 	.word	0x00045d2d
   3b920:	00045d0e 	.word	0x00045d0e
   3b924:	00045316 	.word	0x00045316
   3b928:	00045d42 	.word	0x00045d42
   3b92c:	00045d57 	.word	0x00045d57
   3b930:	00045d6e 	.word	0x00045d6e

0003b934 <z_timeout_remaining>:

s32_t z_timeout_remaining(struct _timeout *timeout)
{
   3b934:	b570      	push	{r4, r5, r6, lr}
   3b936:	4605      	mov	r5, r0
	s32_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   3b938:	6800      	ldr	r0, [r0, #0]
   3b93a:	2800      	cmp	r0, #0
   3b93c:	d03a      	beq.n	3b9b4 <z_timeout_remaining+0x80>
	__asm__ volatile(
   3b93e:	f04f 0320 	mov.w	r3, #32
   3b942:	f3ef 8611 	mrs	r6, BASEPRI
   3b946:	f383 8811 	msr	BASEPRI, r3
   3b94a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3b94e:	4820      	ldr	r0, [pc, #128]	; (3b9d0 <z_timeout_remaining+0x9c>)
   3b950:	f7ff fb98 	bl	3b084 <z_spin_lock_valid>
   3b954:	b960      	cbnz	r0, 3b970 <z_timeout_remaining+0x3c>
   3b956:	491f      	ldr	r1, [pc, #124]	; (3b9d4 <z_timeout_remaining+0xa0>)
   3b958:	234f      	movs	r3, #79	; 0x4f
   3b95a:	4a1f      	ldr	r2, [pc, #124]	; (3b9d8 <z_timeout_remaining+0xa4>)
   3b95c:	481f      	ldr	r0, [pc, #124]	; (3b9dc <z_timeout_remaining+0xa8>)
   3b95e:	f003 fd72 	bl	3f446 <printk>
   3b962:	481f      	ldr	r0, [pc, #124]	; (3b9e0 <z_timeout_remaining+0xac>)
   3b964:	f003 fd6f 	bl	3f446 <printk>
   3b968:	214f      	movs	r1, #79	; 0x4f
   3b96a:	481b      	ldr	r0, [pc, #108]	; (3b9d8 <z_timeout_remaining+0xa4>)
   3b96c:	f003 fd78 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3b970:	4817      	ldr	r0, [pc, #92]	; (3b9d0 <z_timeout_remaining+0x9c>)
   3b972:	f7ff fba5 	bl	3b0c0 <z_spin_lock_set_owner>
	return list->head == list;
   3b976:	4a1b      	ldr	r2, [pc, #108]	; (3b9e4 <z_timeout_remaining+0xb0>)
   3b978:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3b97a:	4293      	cmp	r3, r2
   3b97c:	d025      	beq.n	3b9ca <z_timeout_remaining+0x96>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3b97e:	2400      	movs	r4, #0
   3b980:	6852      	ldr	r2, [r2, #4]
		return 0;
	}

	LOCKED(&timeout_lock) {
		for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   3b982:	b9c3      	cbnz	r3, 3b9b6 <z_timeout_remaining+0x82>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3b984:	4812      	ldr	r0, [pc, #72]	; (3b9d0 <z_timeout_remaining+0x9c>)
   3b986:	f7ff fb8b 	bl	3b0a0 <z_spin_unlock_valid>
   3b98a:	b960      	cbnz	r0, 3b9a6 <z_timeout_remaining+0x72>
   3b98c:	4916      	ldr	r1, [pc, #88]	; (3b9e8 <z_timeout_remaining+0xb4>)
   3b98e:	2362      	movs	r3, #98	; 0x62
   3b990:	4a11      	ldr	r2, [pc, #68]	; (3b9d8 <z_timeout_remaining+0xa4>)
   3b992:	4812      	ldr	r0, [pc, #72]	; (3b9dc <z_timeout_remaining+0xa8>)
   3b994:	f003 fd57 	bl	3f446 <printk>
   3b998:	4814      	ldr	r0, [pc, #80]	; (3b9ec <z_timeout_remaining+0xb8>)
   3b99a:	f003 fd54 	bl	3f446 <printk>
   3b99e:	2162      	movs	r1, #98	; 0x62
   3b9a0:	480d      	ldr	r0, [pc, #52]	; (3b9d8 <z_timeout_remaining+0xa4>)
   3b9a2:	f003 fd5d 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3b9a6:	f386 8811 	msr	BASEPRI, r6
   3b9aa:	f3bf 8f6f 	isb	sy
				break;
			}
		}
	}

	return ticks - elapsed();
   3b9ae:	f7ff fe97 	bl	3b6e0 <elapsed>
   3b9b2:	1a20      	subs	r0, r4, r0
}
   3b9b4:	bd70      	pop	{r4, r5, r6, pc}
			ticks += t->dticks;
   3b9b6:	6899      	ldr	r1, [r3, #8]
			if (timeout == t) {
   3b9b8:	42ab      	cmp	r3, r5
			ticks += t->dticks;
   3b9ba:	440c      	add	r4, r1
			if (timeout == t) {
   3b9bc:	d0e2      	beq.n	3b984 <z_timeout_remaining+0x50>
   3b9be:	2b00      	cmp	r3, #0
   3b9c0:	d0e0      	beq.n	3b984 <z_timeout_remaining+0x50>
	return (node == list->tail) ? NULL : node->next;
   3b9c2:	4293      	cmp	r3, r2
   3b9c4:	d0de      	beq.n	3b984 <z_timeout_remaining+0x50>
   3b9c6:	681b      	ldr	r3, [r3, #0]
   3b9c8:	e7db      	b.n	3b982 <z_timeout_remaining+0x4e>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3b9ca:	2400      	movs	r4, #0
   3b9cc:	e7da      	b.n	3b984 <z_timeout_remaining+0x50>
   3b9ce:	bf00      	nop
   3b9d0:	2002a2f0 	.word	0x2002a2f0
   3b9d4:	00045d2d 	.word	0x00045d2d
   3b9d8:	00045d0e 	.word	0x00045d0e
   3b9dc:	00045316 	.word	0x00045316
   3b9e0:	00045d42 	.word	0x00045d42
   3b9e4:	20031c88 	.word	0x20031c88
   3b9e8:	00045d57 	.word	0x00045d57
   3b9ec:	00045d6e 	.word	0x00045d6e

0003b9f0 <z_get_next_timeout_expiry>:

s32_t z_get_next_timeout_expiry(void)
{
   3b9f0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   3b9f2:	f04f 0320 	mov.w	r3, #32
   3b9f6:	f3ef 8511 	mrs	r5, BASEPRI
   3b9fa:	f383 8811 	msr	BASEPRI, r3
   3b9fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3ba02:	4817      	ldr	r0, [pc, #92]	; (3ba60 <z_get_next_timeout_expiry+0x70>)
   3ba04:	f7ff fb3e 	bl	3b084 <z_spin_lock_valid>
   3ba08:	b960      	cbnz	r0, 3ba24 <z_get_next_timeout_expiry+0x34>
   3ba0a:	4916      	ldr	r1, [pc, #88]	; (3ba64 <z_get_next_timeout_expiry+0x74>)
   3ba0c:	234f      	movs	r3, #79	; 0x4f
   3ba0e:	4a16      	ldr	r2, [pc, #88]	; (3ba68 <z_get_next_timeout_expiry+0x78>)
   3ba10:	4816      	ldr	r0, [pc, #88]	; (3ba6c <z_get_next_timeout_expiry+0x7c>)
   3ba12:	f003 fd18 	bl	3f446 <printk>
   3ba16:	4816      	ldr	r0, [pc, #88]	; (3ba70 <z_get_next_timeout_expiry+0x80>)
   3ba18:	f003 fd15 	bl	3f446 <printk>
   3ba1c:	214f      	movs	r1, #79	; 0x4f
   3ba1e:	4812      	ldr	r0, [pc, #72]	; (3ba68 <z_get_next_timeout_expiry+0x78>)
   3ba20:	f003 fd1e 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3ba24:	480e      	ldr	r0, [pc, #56]	; (3ba60 <z_get_next_timeout_expiry+0x70>)
   3ba26:	f7ff fb4b 	bl	3b0c0 <z_spin_lock_set_owner>
	s32_t ret = K_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   3ba2a:	f7ff fe77 	bl	3b71c <next_timeout>
   3ba2e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3ba30:	480b      	ldr	r0, [pc, #44]	; (3ba60 <z_get_next_timeout_expiry+0x70>)
   3ba32:	f7ff fb35 	bl	3b0a0 <z_spin_unlock_valid>
   3ba36:	b960      	cbnz	r0, 3ba52 <z_get_next_timeout_expiry+0x62>
   3ba38:	490e      	ldr	r1, [pc, #56]	; (3ba74 <z_get_next_timeout_expiry+0x84>)
   3ba3a:	2362      	movs	r3, #98	; 0x62
   3ba3c:	4a0a      	ldr	r2, [pc, #40]	; (3ba68 <z_get_next_timeout_expiry+0x78>)
   3ba3e:	480b      	ldr	r0, [pc, #44]	; (3ba6c <z_get_next_timeout_expiry+0x7c>)
   3ba40:	f003 fd01 	bl	3f446 <printk>
   3ba44:	480c      	ldr	r0, [pc, #48]	; (3ba78 <z_get_next_timeout_expiry+0x88>)
   3ba46:	f003 fcfe 	bl	3f446 <printk>
   3ba4a:	2162      	movs	r1, #98	; 0x62
   3ba4c:	4806      	ldr	r0, [pc, #24]	; (3ba68 <z_get_next_timeout_expiry+0x78>)
   3ba4e:	f003 fd07 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3ba52:	f385 8811 	msr	BASEPRI, r5
   3ba56:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   3ba5a:	4620      	mov	r0, r4
   3ba5c:	bd38      	pop	{r3, r4, r5, pc}
   3ba5e:	bf00      	nop
   3ba60:	2002a2f0 	.word	0x2002a2f0
   3ba64:	00045d2d 	.word	0x00045d2d
   3ba68:	00045d0e 	.word	0x00045d0e
   3ba6c:	00045316 	.word	0x00045316
   3ba70:	00045d42 	.word	0x00045d42
   3ba74:	00045d57 	.word	0x00045d57
   3ba78:	00045d6e 	.word	0x00045d6e

0003ba7c <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
   3ba7c:	b570      	push	{r4, r5, r6, lr}
   3ba7e:	4604      	mov	r4, r0
   3ba80:	460e      	mov	r6, r1
	__asm__ volatile(
   3ba82:	f04f 0320 	mov.w	r3, #32
   3ba86:	f3ef 8511 	mrs	r5, BASEPRI
   3ba8a:	f383 8811 	msr	BASEPRI, r3
   3ba8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3ba92:	481a      	ldr	r0, [pc, #104]	; (3bafc <z_set_timeout_expiry+0x80>)
   3ba94:	f7ff faf6 	bl	3b084 <z_spin_lock_valid>
   3ba98:	b960      	cbnz	r0, 3bab4 <z_set_timeout_expiry+0x38>
   3ba9a:	4919      	ldr	r1, [pc, #100]	; (3bb00 <z_set_timeout_expiry+0x84>)
   3ba9c:	234f      	movs	r3, #79	; 0x4f
   3ba9e:	4a19      	ldr	r2, [pc, #100]	; (3bb04 <z_set_timeout_expiry+0x88>)
   3baa0:	4819      	ldr	r0, [pc, #100]	; (3bb08 <z_set_timeout_expiry+0x8c>)
   3baa2:	f003 fcd0 	bl	3f446 <printk>
   3baa6:	4819      	ldr	r0, [pc, #100]	; (3bb0c <z_set_timeout_expiry+0x90>)
   3baa8:	f003 fccd 	bl	3f446 <printk>
   3baac:	214f      	movs	r1, #79	; 0x4f
   3baae:	4815      	ldr	r0, [pc, #84]	; (3bb04 <z_set_timeout_expiry+0x88>)
   3bab0:	f003 fcd6 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3bab4:	4811      	ldr	r0, [pc, #68]	; (3bafc <z_set_timeout_expiry+0x80>)
   3bab6:	f7ff fb03 	bl	3b0c0 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next = next_timeout();
   3baba:	f7ff fe2f 	bl	3b71c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   3babe:	2801      	cmp	r0, #1
   3bac0:	dd05      	ble.n	3bace <z_set_timeout_expiry+0x52>
   3bac2:	42a0      	cmp	r0, r4
   3bac4:	dd03      	ble.n	3bace <z_set_timeout_expiry+0x52>
			z_clock_set_timeout(ticks, idle);
   3bac6:	4631      	mov	r1, r6
   3bac8:	4620      	mov	r0, r4
   3baca:	f7e4 fb0f 	bl	200ec <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3bace:	480b      	ldr	r0, [pc, #44]	; (3bafc <z_set_timeout_expiry+0x80>)
   3bad0:	f7ff fae6 	bl	3b0a0 <z_spin_unlock_valid>
   3bad4:	b960      	cbnz	r0, 3baf0 <z_set_timeout_expiry+0x74>
   3bad6:	490e      	ldr	r1, [pc, #56]	; (3bb10 <z_set_timeout_expiry+0x94>)
   3bad8:	2362      	movs	r3, #98	; 0x62
   3bada:	4a0a      	ldr	r2, [pc, #40]	; (3bb04 <z_set_timeout_expiry+0x88>)
   3badc:	480a      	ldr	r0, [pc, #40]	; (3bb08 <z_set_timeout_expiry+0x8c>)
   3bade:	f003 fcb2 	bl	3f446 <printk>
   3bae2:	480c      	ldr	r0, [pc, #48]	; (3bb14 <z_set_timeout_expiry+0x98>)
   3bae4:	f003 fcaf 	bl	3f446 <printk>
   3bae8:	2162      	movs	r1, #98	; 0x62
   3baea:	4806      	ldr	r0, [pc, #24]	; (3bb04 <z_set_timeout_expiry+0x88>)
   3baec:	f003 fcb8 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3baf0:	f385 8811 	msr	BASEPRI, r5
   3baf4:	f3bf 8f6f 	isb	sy
		}
	}
}
   3baf8:	bd70      	pop	{r4, r5, r6, pc}
   3bafa:	bf00      	nop
   3bafc:	2002a2f0 	.word	0x2002a2f0
   3bb00:	00045d2d 	.word	0x00045d2d
   3bb04:	00045d0e 	.word	0x00045d0e
   3bb08:	00045316 	.word	0x00045316
   3bb0c:	00045d42 	.word	0x00045d42
   3bb10:	00045d57 	.word	0x00045d57
   3bb14:	00045d6e 	.word	0x00045d6e

0003bb18 <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
   3bb18:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   3bb1c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   3bb1e:	f7fe fd75 	bl	3a60c <z_time_slice>
	__asm__ volatile(
   3bb22:	f04f 0320 	mov.w	r3, #32
   3bb26:	f3ef 8511 	mrs	r5, BASEPRI
   3bb2a:	f383 8811 	msr	BASEPRI, r3
   3bb2e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3bb32:	4846      	ldr	r0, [pc, #280]	; (3bc4c <z_clock_announce+0x134>)
   3bb34:	f7ff faa6 	bl	3b084 <z_spin_lock_valid>
   3bb38:	b960      	cbnz	r0, 3bb54 <z_clock_announce+0x3c>
   3bb3a:	4945      	ldr	r1, [pc, #276]	; (3bc50 <z_clock_announce+0x138>)
   3bb3c:	234f      	movs	r3, #79	; 0x4f
   3bb3e:	4a45      	ldr	r2, [pc, #276]	; (3bc54 <z_clock_announce+0x13c>)
   3bb40:	4845      	ldr	r0, [pc, #276]	; (3bc58 <z_clock_announce+0x140>)
   3bb42:	f003 fc80 	bl	3f446 <printk>
   3bb46:	4845      	ldr	r0, [pc, #276]	; (3bc5c <z_clock_announce+0x144>)
   3bb48:	f003 fc7d 	bl	3f446 <printk>
   3bb4c:	214f      	movs	r1, #79	; 0x4f
   3bb4e:	4841      	ldr	r0, [pc, #260]	; (3bc54 <z_clock_announce+0x13c>)
   3bb50:	f003 fc86 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3bb54:	4f42      	ldr	r7, [pc, #264]	; (3bc60 <z_clock_announce+0x148>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   3bb56:	4e43      	ldr	r6, [pc, #268]	; (3bc64 <z_clock_announce+0x14c>)
   3bb58:	46b9      	mov	r9, r7
   3bb5a:	483c      	ldr	r0, [pc, #240]	; (3bc4c <z_clock_announce+0x134>)
	return list->head == list;
   3bb5c:	f8df 8110 	ldr.w	r8, [pc, #272]	; 3bc70 <z_clock_announce+0x158>
   3bb60:	f7ff faae 	bl	3b0c0 <z_spin_lock_set_owner>
   3bb64:	6034      	str	r4, [r6, #0]
   3bb66:	f8d8 4000 	ldr.w	r4, [r8]
   3bb6a:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3bb6c:	4544      	cmp	r4, r8
   3bb6e:	e9d7 bc00 	ldrd	fp, ip, [r7]
   3bb72:	d005      	beq.n	3bb80 <z_clock_announce+0x68>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   3bb74:	b124      	cbz	r4, 3bb80 <z_clock_announce+0x68>
   3bb76:	68a3      	ldr	r3, [r4, #8]
   3bb78:	4293      	cmp	r3, r2
   3bb7a:	dd25      	ble.n	3bbc8 <z_clock_announce+0xb0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   3bb7c:	1a9b      	subs	r3, r3, r2
   3bb7e:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   3bb80:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   3bb82:	eb1b 0002 	adds.w	r0, fp, r2
   3bb86:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   3bb8a:	e9c9 0100 	strd	r0, r1, [r9]
	announce_remaining = 0;
   3bb8e:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   3bb90:	f7ff fdc4 	bl	3b71c <next_timeout>
   3bb94:	4621      	mov	r1, r4
   3bb96:	f7e4 faa9 	bl	200ec <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3bb9a:	482c      	ldr	r0, [pc, #176]	; (3bc4c <z_clock_announce+0x134>)
   3bb9c:	f7ff fa80 	bl	3b0a0 <z_spin_unlock_valid>
   3bba0:	b960      	cbnz	r0, 3bbbc <z_clock_announce+0xa4>
   3bba2:	4931      	ldr	r1, [pc, #196]	; (3bc68 <z_clock_announce+0x150>)
   3bba4:	2362      	movs	r3, #98	; 0x62
   3bba6:	4a2b      	ldr	r2, [pc, #172]	; (3bc54 <z_clock_announce+0x13c>)
   3bba8:	482b      	ldr	r0, [pc, #172]	; (3bc58 <z_clock_announce+0x140>)
   3bbaa:	f003 fc4c 	bl	3f446 <printk>
   3bbae:	482f      	ldr	r0, [pc, #188]	; (3bc6c <z_clock_announce+0x154>)
   3bbb0:	f003 fc49 	bl	3f446 <printk>
   3bbb4:	2162      	movs	r1, #98	; 0x62
   3bbb6:	4827      	ldr	r0, [pc, #156]	; (3bc54 <z_clock_announce+0x13c>)
   3bbb8:	f003 fc52 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3bbbc:	f385 8811 	msr	BASEPRI, r5
   3bbc0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   3bbc4:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   3bbc8:	eb1b 0003 	adds.w	r0, fp, r3
   3bbcc:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   3bbd0:	1ad3      	subs	r3, r2, r3
   3bbd2:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   3bbd4:	2300      	movs	r3, #0
		curr_tick += dt;
   3bbd6:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   3bbda:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   3bbdc:	4620      	mov	r0, r4
   3bbde:	f7ff fd89 	bl	3b6f4 <remove_timeout>
   3bbe2:	481a      	ldr	r0, [pc, #104]	; (3bc4c <z_clock_announce+0x134>)
   3bbe4:	f7ff fa5c 	bl	3b0a0 <z_spin_unlock_valid>
   3bbe8:	b960      	cbnz	r0, 3bc04 <z_clock_announce+0xec>
   3bbea:	491f      	ldr	r1, [pc, #124]	; (3bc68 <z_clock_announce+0x150>)
   3bbec:	2362      	movs	r3, #98	; 0x62
   3bbee:	4a19      	ldr	r2, [pc, #100]	; (3bc54 <z_clock_announce+0x13c>)
   3bbf0:	4819      	ldr	r0, [pc, #100]	; (3bc58 <z_clock_announce+0x140>)
   3bbf2:	f003 fc28 	bl	3f446 <printk>
   3bbf6:	481d      	ldr	r0, [pc, #116]	; (3bc6c <z_clock_announce+0x154>)
   3bbf8:	f003 fc25 	bl	3f446 <printk>
   3bbfc:	2162      	movs	r1, #98	; 0x62
   3bbfe:	4815      	ldr	r0, [pc, #84]	; (3bc54 <z_clock_announce+0x13c>)
   3bc00:	f003 fc2e 	bl	3f460 <assert_post_action>
   3bc04:	f385 8811 	msr	BASEPRI, r5
   3bc08:	f3bf 8f6f 	isb	sy
		t->fn(t);
   3bc0c:	68e3      	ldr	r3, [r4, #12]
   3bc0e:	4620      	mov	r0, r4
   3bc10:	4798      	blx	r3
	__asm__ volatile(
   3bc12:	f04f 0320 	mov.w	r3, #32
   3bc16:	f3ef 8511 	mrs	r5, BASEPRI
   3bc1a:	f383 8811 	msr	BASEPRI, r3
   3bc1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3bc22:	480a      	ldr	r0, [pc, #40]	; (3bc4c <z_clock_announce+0x134>)
   3bc24:	f7ff fa2e 	bl	3b084 <z_spin_lock_valid>
   3bc28:	b960      	cbnz	r0, 3bc44 <z_clock_announce+0x12c>
   3bc2a:	4909      	ldr	r1, [pc, #36]	; (3bc50 <z_clock_announce+0x138>)
   3bc2c:	234f      	movs	r3, #79	; 0x4f
   3bc2e:	4a09      	ldr	r2, [pc, #36]	; (3bc54 <z_clock_announce+0x13c>)
   3bc30:	4809      	ldr	r0, [pc, #36]	; (3bc58 <z_clock_announce+0x140>)
   3bc32:	f003 fc08 	bl	3f446 <printk>
   3bc36:	4809      	ldr	r0, [pc, #36]	; (3bc5c <z_clock_announce+0x144>)
   3bc38:	f003 fc05 	bl	3f446 <printk>
   3bc3c:	214f      	movs	r1, #79	; 0x4f
   3bc3e:	4805      	ldr	r0, [pc, #20]	; (3bc54 <z_clock_announce+0x13c>)
   3bc40:	f003 fc0e 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3bc44:	4801      	ldr	r0, [pc, #4]	; (3bc4c <z_clock_announce+0x134>)
   3bc46:	f7ff fa3b 	bl	3b0c0 <z_spin_lock_set_owner>
	return k;
   3bc4a:	e78c      	b.n	3bb66 <z_clock_announce+0x4e>
   3bc4c:	2002a2f0 	.word	0x2002a2f0
   3bc50:	00045d2d 	.word	0x00045d2d
   3bc54:	00045d0e 	.word	0x00045d0e
   3bc58:	00045316 	.word	0x00045316
   3bc5c:	00045d42 	.word	0x00045d42
   3bc60:	200237c0 	.word	0x200237c0
   3bc64:	2002a2ec 	.word	0x2002a2ec
   3bc68:	00045d57 	.word	0x00045d57
   3bc6c:	00045d6e 	.word	0x00045d6e
   3bc70:	20031c88 	.word	0x20031c88

0003bc74 <z_tick_get>:

s64_t z_tick_get(void)
{
   3bc74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3bc78:	f04f 0320 	mov.w	r3, #32
   3bc7c:	f3ef 8611 	mrs	r6, BASEPRI
   3bc80:	f383 8811 	msr	BASEPRI, r3
   3bc84:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3bc88:	481a      	ldr	r0, [pc, #104]	; (3bcf4 <z_tick_get+0x80>)
   3bc8a:	f7ff f9fb 	bl	3b084 <z_spin_lock_valid>
   3bc8e:	b960      	cbnz	r0, 3bcaa <z_tick_get+0x36>
   3bc90:	4919      	ldr	r1, [pc, #100]	; (3bcf8 <z_tick_get+0x84>)
   3bc92:	234f      	movs	r3, #79	; 0x4f
   3bc94:	4a19      	ldr	r2, [pc, #100]	; (3bcfc <z_tick_get+0x88>)
   3bc96:	481a      	ldr	r0, [pc, #104]	; (3bd00 <z_tick_get+0x8c>)
   3bc98:	f003 fbd5 	bl	3f446 <printk>
   3bc9c:	4819      	ldr	r0, [pc, #100]	; (3bd04 <z_tick_get+0x90>)
   3bc9e:	f003 fbd2 	bl	3f446 <printk>
   3bca2:	214f      	movs	r1, #79	; 0x4f
   3bca4:	4815      	ldr	r0, [pc, #84]	; (3bcfc <z_tick_get+0x88>)
   3bca6:	f003 fbdb 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3bcaa:	4812      	ldr	r0, [pc, #72]	; (3bcf4 <z_tick_get+0x80>)
   3bcac:	f7ff fa08 	bl	3b0c0 <z_spin_lock_set_owner>
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   3bcb0:	f7e4 fa9e 	bl	201f0 <z_clock_elapsed>
   3bcb4:	4b14      	ldr	r3, [pc, #80]	; (3bd08 <z_tick_get+0x94>)
   3bcb6:	e9d3 4500 	ldrd	r4, r5, [r3]
   3bcba:	1827      	adds	r7, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3bcbc:	480d      	ldr	r0, [pc, #52]	; (3bcf4 <z_tick_get+0x80>)
   3bcbe:	f145 0800 	adc.w	r8, r5, #0
   3bcc2:	f7ff f9ed 	bl	3b0a0 <z_spin_unlock_valid>
   3bcc6:	b960      	cbnz	r0, 3bce2 <z_tick_get+0x6e>
   3bcc8:	4910      	ldr	r1, [pc, #64]	; (3bd0c <z_tick_get+0x98>)
   3bcca:	2362      	movs	r3, #98	; 0x62
   3bccc:	4a0b      	ldr	r2, [pc, #44]	; (3bcfc <z_tick_get+0x88>)
   3bcce:	480c      	ldr	r0, [pc, #48]	; (3bd00 <z_tick_get+0x8c>)
   3bcd0:	f003 fbb9 	bl	3f446 <printk>
   3bcd4:	480e      	ldr	r0, [pc, #56]	; (3bd10 <z_tick_get+0x9c>)
   3bcd6:	f003 fbb6 	bl	3f446 <printk>
   3bcda:	2162      	movs	r1, #98	; 0x62
   3bcdc:	4807      	ldr	r0, [pc, #28]	; (3bcfc <z_tick_get+0x88>)
   3bcde:	f003 fbbf 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3bce2:	f386 8811 	msr	BASEPRI, r6
   3bce6:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   3bcea:	4638      	mov	r0, r7
   3bcec:	4641      	mov	r1, r8
   3bcee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3bcf2:	bf00      	nop
   3bcf4:	2002a2f0 	.word	0x2002a2f0
   3bcf8:	00045d2d 	.word	0x00045d2d
   3bcfc:	00045d0e 	.word	0x00045d0e
   3bd00:	00045316 	.word	0x00045316
   3bd04:	00045d42 	.word	0x00045d42
   3bd08:	200237c0 	.word	0x200237c0
   3bd0c:	00045d57 	.word	0x00045d57
   3bd10:	00045d6e 	.word	0x00045d6e

0003bd14 <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, u32_t state)
{
   3bd14:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   3bd16:	6883      	ldr	r3, [r0, #8]
{
   3bd18:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   3bd1a:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   3bd1c:	b964      	cbnz	r4, 3bd38 <k_poll_poller_cb+0x24>
   3bd1e:	4915      	ldr	r1, [pc, #84]	; (3bd74 <k_poll_poller_cb+0x60>)
   3bd20:	23e0      	movs	r3, #224	; 0xe0
   3bd22:	4a15      	ldr	r2, [pc, #84]	; (3bd78 <k_poll_poller_cb+0x64>)
   3bd24:	4815      	ldr	r0, [pc, #84]	; (3bd7c <k_poll_poller_cb+0x68>)
   3bd26:	f003 fb8e 	bl	3f446 <printk>
   3bd2a:	4815      	ldr	r0, [pc, #84]	; (3bd80 <k_poll_poller_cb+0x6c>)
   3bd2c:	f003 fb8b 	bl	3f446 <printk>
   3bd30:	21e0      	movs	r1, #224	; 0xe0
   3bd32:	4811      	ldr	r0, [pc, #68]	; (3bd78 <k_poll_poller_cb+0x64>)
   3bd34:	f003 fb94 	bl	3f460 <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   3bd38:	7b63      	ldrb	r3, [r4, #13]
   3bd3a:	079a      	lsls	r2, r3, #30
   3bd3c:	d401      	bmi.n	3bd42 <k_poll_poller_cb+0x2e>
		return 0;
   3bd3e:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   3bd40:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   3bd42:	6a23      	ldr	r3, [r4, #32]
   3bd44:	3302      	adds	r3, #2
   3bd46:	d012      	beq.n	3bd6e <k_poll_poller_cb+0x5a>
	z_unpend_thread(thread);
   3bd48:	4620      	mov	r0, r4
   3bd4a:	f7fe f9e9 	bl	3a120 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   3bd4e:	2d08      	cmp	r5, #8
   3bd50:	bf0c      	ite	eq
   3bd52:	f06f 0303 	mvneq.w	r3, #3
   3bd56:	2300      	movne	r3, #0
   3bd58:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3bd5a:	7b63      	ldrb	r3, [r4, #13]
   3bd5c:	06db      	lsls	r3, r3, #27
   3bd5e:	d1ee      	bne.n	3bd3e <k_poll_poller_cb+0x2a>
	if (!z_is_thread_ready(thread)) {
   3bd60:	69a5      	ldr	r5, [r4, #24]
   3bd62:	2d00      	cmp	r5, #0
   3bd64:	d1eb      	bne.n	3bd3e <k_poll_poller_cb+0x2a>
		z_add_thread_to_ready_q(thread);
   3bd66:	4620      	mov	r0, r4
   3bd68:	f7fe fade 	bl	3a328 <z_add_thread_to_ready_q>
	return 0;
   3bd6c:	e7e7      	b.n	3bd3e <k_poll_poller_cb+0x2a>
		return -EAGAIN;
   3bd6e:	f06f 000a 	mvn.w	r0, #10
   3bd72:	e7e5      	b.n	3bd40 <k_poll_poller_cb+0x2c>
   3bd74:	0004a6ab 	.word	0x0004a6ab
   3bd78:	0004a691 	.word	0x0004a691
   3bd7c:	00045316 	.word	0x00045316
   3bd80:	0004a6c1 	.word	0x0004a6c1

0003bd84 <clear_event_registrations>:
{
   3bd84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3bd88:	2414      	movs	r4, #20
   3bd8a:	4680      	mov	r8, r0
   3bd8c:	4617      	mov	r7, r2
	while (num_events--) {
   3bd8e:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   3bd92:	4d47      	ldr	r5, [pc, #284]	; (3beb0 <clear_event_registrations+0x12c>)
   3bd94:	f8df 9154 	ldr.w	r9, [pc, #340]	; 3beec <clear_event_registrations+0x168>
   3bd98:	4e46      	ldr	r6, [pc, #280]	; (3beb4 <clear_event_registrations+0x130>)
	while (num_events--) {
   3bd9a:	4544      	cmp	r4, r8
   3bd9c:	d101      	bne.n	3bda2 <clear_event_registrations+0x1e>
}
   3bd9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   3bda2:	2300      	movs	r3, #0
   3bda4:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   3bda8:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   3bdac:	f003 030f 	and.w	r3, r3, #15
   3bdb0:	2b04      	cmp	r3, #4
   3bdb2:	d83d      	bhi.n	3be30 <clear_event_registrations+0xac>
   3bdb4:	e8df f003 	tbb	[pc, r3]
   3bdb8:	3c032d49 	.word	0x3c032d49
   3bdbc:	1e          	.byte	0x1e
   3bdbd:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3bdbe:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3bdc2:	b963      	cbnz	r3, 3bdde <clear_event_registrations+0x5a>
   3bdc4:	493c      	ldr	r1, [pc, #240]	; (3beb8 <clear_event_registrations+0x134>)
   3bdc6:	2396      	movs	r3, #150	; 0x96
   3bdc8:	462a      	mov	r2, r5
   3bdca:	4630      	mov	r0, r6
   3bdcc:	f003 fb3b 	bl	3f446 <printk>
   3bdd0:	483a      	ldr	r0, [pc, #232]	; (3bebc <clear_event_registrations+0x138>)
   3bdd2:	f003 fb38 	bl	3f446 <printk>
   3bdd6:	2196      	movs	r1, #150	; 0x96
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3bdd8:	4628      	mov	r0, r5
   3bdda:	f003 fb41 	bl	3f460 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   3bdde:	f854 3c14 	ldr.w	r3, [r4, #-20]
   3bde2:	b393      	cbz	r3, 3be4a <clear_event_registrations+0xc6>
	node->prev->next = node->next;
   3bde4:	f854 2c10 	ldr.w	r2, [r4, #-16]
   3bde8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3bdea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3bdec:	2300      	movs	r3, #0
	node->prev = NULL;
   3bdee:	e944 3305 	strd	r3, r3, [r4, #-20]
   3bdf2:	e02a      	b.n	3be4a <clear_event_registrations+0xc6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   3bdf4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3bdf8:	2b00      	cmp	r3, #0
   3bdfa:	d1f0      	bne.n	3bdde <clear_event_registrations+0x5a>
   3bdfc:	4930      	ldr	r1, [pc, #192]	; (3bec0 <clear_event_registrations+0x13c>)
   3bdfe:	239a      	movs	r3, #154	; 0x9a
   3be00:	462a      	mov	r2, r5
   3be02:	4630      	mov	r0, r6
   3be04:	f003 fb1f 	bl	3f446 <printk>
   3be08:	482e      	ldr	r0, [pc, #184]	; (3bec4 <clear_event_registrations+0x140>)
   3be0a:	f003 fb1c 	bl	3f446 <printk>
   3be0e:	219a      	movs	r1, #154	; 0x9a
   3be10:	e7e2      	b.n	3bdd8 <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3be12:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3be16:	2b00      	cmp	r3, #0
   3be18:	d1e1      	bne.n	3bdde <clear_event_registrations+0x5a>
   3be1a:	492b      	ldr	r1, [pc, #172]	; (3bec8 <clear_event_registrations+0x144>)
   3be1c:	239e      	movs	r3, #158	; 0x9e
   3be1e:	462a      	mov	r2, r5
   3be20:	4630      	mov	r0, r6
   3be22:	f003 fb10 	bl	3f446 <printk>
   3be26:	4829      	ldr	r0, [pc, #164]	; (3becc <clear_event_registrations+0x148>)
   3be28:	f003 fb0d 	bl	3f446 <printk>
   3be2c:	219e      	movs	r1, #158	; 0x9e
   3be2e:	e7d3      	b.n	3bdd8 <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   3be30:	4649      	mov	r1, r9
   3be32:	23a5      	movs	r3, #165	; 0xa5
   3be34:	462a      	mov	r2, r5
   3be36:	4630      	mov	r0, r6
   3be38:	f003 fb05 	bl	3f446 <printk>
   3be3c:	4824      	ldr	r0, [pc, #144]	; (3bed0 <clear_event_registrations+0x14c>)
   3be3e:	f003 fb02 	bl	3f446 <printk>
   3be42:	21a5      	movs	r1, #165	; 0xa5
   3be44:	4628      	mov	r0, r5
   3be46:	f003 fb0b 	bl	3f460 <assert_post_action>
   3be4a:	4822      	ldr	r0, [pc, #136]	; (3bed4 <clear_event_registrations+0x150>)
   3be4c:	f7ff f928 	bl	3b0a0 <z_spin_unlock_valid>
   3be50:	b960      	cbnz	r0, 3be6c <clear_event_registrations+0xe8>
   3be52:	4921      	ldr	r1, [pc, #132]	; (3bed8 <clear_event_registrations+0x154>)
   3be54:	2362      	movs	r3, #98	; 0x62
   3be56:	4a21      	ldr	r2, [pc, #132]	; (3bedc <clear_event_registrations+0x158>)
   3be58:	4630      	mov	r0, r6
   3be5a:	f003 faf4 	bl	3f446 <printk>
   3be5e:	4820      	ldr	r0, [pc, #128]	; (3bee0 <clear_event_registrations+0x15c>)
   3be60:	f003 faf1 	bl	3f446 <printk>
   3be64:	2162      	movs	r1, #98	; 0x62
   3be66:	481d      	ldr	r0, [pc, #116]	; (3bedc <clear_event_registrations+0x158>)
   3be68:	f003 fafa 	bl	3f460 <assert_post_action>
   3be6c:	f387 8811 	msr	BASEPRI, r7
   3be70:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   3be74:	f04f 0320 	mov.w	r3, #32
   3be78:	f3ef 8711 	mrs	r7, BASEPRI
   3be7c:	f383 8811 	msr	BASEPRI, r3
   3be80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3be84:	4813      	ldr	r0, [pc, #76]	; (3bed4 <clear_event_registrations+0x150>)
   3be86:	f7ff f8fd 	bl	3b084 <z_spin_lock_valid>
   3be8a:	b960      	cbnz	r0, 3bea6 <clear_event_registrations+0x122>
   3be8c:	4915      	ldr	r1, [pc, #84]	; (3bee4 <clear_event_registrations+0x160>)
   3be8e:	234f      	movs	r3, #79	; 0x4f
   3be90:	4a12      	ldr	r2, [pc, #72]	; (3bedc <clear_event_registrations+0x158>)
   3be92:	4630      	mov	r0, r6
   3be94:	f003 fad7 	bl	3f446 <printk>
   3be98:	4813      	ldr	r0, [pc, #76]	; (3bee8 <clear_event_registrations+0x164>)
   3be9a:	f003 fad4 	bl	3f446 <printk>
   3be9e:	214f      	movs	r1, #79	; 0x4f
   3bea0:	480e      	ldr	r0, [pc, #56]	; (3bedc <clear_event_registrations+0x158>)
   3bea2:	f003 fadd 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3bea6:	480b      	ldr	r0, [pc, #44]	; (3bed4 <clear_event_registrations+0x150>)
   3bea8:	f7ff f90a 	bl	3b0c0 <z_spin_lock_set_owner>
	return k;
   3beac:	3c14      	subs	r4, #20
   3beae:	e774      	b.n	3bd9a <clear_event_registrations+0x16>
   3beb0:	0004a691 	.word	0x0004a691
   3beb4:	00045316 	.word	0x00045316
   3beb8:	0004a544 	.word	0x0004a544
   3bebc:	0004a55e 	.word	0x0004a55e
   3bec0:	0004a573 	.word	0x0004a573
   3bec4:	0004a58f 	.word	0x0004a58f
   3bec8:	0004a5a0 	.word	0x0004a5a0
   3becc:	0004a5bd 	.word	0x0004a5bd
   3bed0:	0004a5d4 	.word	0x0004a5d4
   3bed4:	2002a2f4 	.word	0x2002a2f4
   3bed8:	00045d57 	.word	0x00045d57
   3bedc:	00045d0e 	.word	0x00045d0e
   3bee0:	00045d6e 	.word	0x00045d6e
   3bee4:	00045d2d 	.word	0x00045d2d
   3bee8:	00045d42 	.word	0x00045d42
   3beec:	0004a2c3 	.word	0x0004a2c3

0003bef0 <register_events>:
{
   3bef0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   3bef4:	2600      	movs	r6, #0
{
   3bef6:	468a      	mov	sl, r1
   3bef8:	4615      	mov	r5, r2
   3befa:	4604      	mov	r4, r0
	int events_registered = 0;
   3befc:	46b0      	mov	r8, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3befe:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 3c0e0 <register_events+0x1f0>
   3bf02:	4f67      	ldr	r7, [pc, #412]	; (3c0a0 <register_events+0x1b0>)
{
   3bf04:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   3bf06:	4556      	cmp	r6, sl
   3bf08:	db03      	blt.n	3bf12 <register_events+0x22>
}
   3bf0a:	4640      	mov	r0, r8
   3bf0c:	b003      	add	sp, #12
   3bf0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bf12:	f04f 0320 	mov.w	r3, #32
   3bf16:	f3ef 8b11 	mrs	fp, BASEPRI
   3bf1a:	f383 8811 	msr	BASEPRI, r3
   3bf1e:	f3bf 8f6f 	isb	sy
   3bf22:	4648      	mov	r0, r9
   3bf24:	f7ff f8ae 	bl	3b084 <z_spin_lock_valid>
   3bf28:	b960      	cbnz	r0, 3bf44 <register_events+0x54>
   3bf2a:	495e      	ldr	r1, [pc, #376]	; (3c0a4 <register_events+0x1b4>)
   3bf2c:	234f      	movs	r3, #79	; 0x4f
   3bf2e:	463a      	mov	r2, r7
   3bf30:	485d      	ldr	r0, [pc, #372]	; (3c0a8 <register_events+0x1b8>)
   3bf32:	f003 fa88 	bl	3f446 <printk>
   3bf36:	485d      	ldr	r0, [pc, #372]	; (3c0ac <register_events+0x1bc>)
   3bf38:	f003 fa85 	bl	3f446 <printk>
   3bf3c:	214f      	movs	r1, #79	; 0x4f
   3bf3e:	4638      	mov	r0, r7
   3bf40:	f003 fa8e 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3bf44:	4648      	mov	r0, r9
   3bf46:	f7ff f8bb 	bl	3b0c0 <z_spin_lock_set_owner>
	switch (event->type) {
   3bf4a:	7b63      	ldrb	r3, [r4, #13]
   3bf4c:	f003 030f 	and.w	r3, r3, #15
   3bf50:	2b04      	cmp	r3, #4
   3bf52:	d843      	bhi.n	3bfdc <register_events+0xec>
   3bf54:	e8df f003 	tbb	[pc, r3]
   3bf58:	42033c2c 	.word	0x42033c2c
   3bf5c:	29          	.byte	0x29
   3bf5d:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   3bf5e:	6923      	ldr	r3, [r4, #16]
   3bf60:	689b      	ldr	r3, [r3, #8]
   3bf62:	b32b      	cbz	r3, 3bfb0 <register_events+0xc0>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   3bf64:	2202      	movs	r2, #2
	event->poller = NULL;
   3bf66:	2100      	movs	r1, #0
	event->state |= state;
   3bf68:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   3bf6a:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   3bf6c:	f3c3 3004 	ubfx	r0, r3, #12, #5
   3bf70:	4302      	orrs	r2, r0
   3bf72:	f362 3310 	bfi	r3, r2, #12, #5
   3bf76:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   3bf78:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3bf7a:	4648      	mov	r0, r9
   3bf7c:	f7ff f890 	bl	3b0a0 <z_spin_unlock_valid>
   3bf80:	b960      	cbnz	r0, 3bf9c <register_events+0xac>
   3bf82:	494b      	ldr	r1, [pc, #300]	; (3c0b0 <register_events+0x1c0>)
   3bf84:	2362      	movs	r3, #98	; 0x62
   3bf86:	463a      	mov	r2, r7
   3bf88:	4847      	ldr	r0, [pc, #284]	; (3c0a8 <register_events+0x1b8>)
   3bf8a:	f003 fa5c 	bl	3f446 <printk>
   3bf8e:	4849      	ldr	r0, [pc, #292]	; (3c0b4 <register_events+0x1c4>)
   3bf90:	f003 fa59 	bl	3f446 <printk>
   3bf94:	2162      	movs	r1, #98	; 0x62
   3bf96:	4638      	mov	r0, r7
   3bf98:	f003 fa62 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3bf9c:	f38b 8811 	msr	BASEPRI, fp
   3bfa0:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   3bfa4:	3601      	adds	r6, #1
   3bfa6:	3414      	adds	r4, #20
   3bfa8:	e7ad      	b.n	3bf06 <register_events+0x16>
		if (!k_queue_is_empty(event->queue)) {
   3bfaa:	6923      	ldr	r3, [r4, #16]
   3bfac:	681b      	ldr	r3, [r3, #0]
   3bfae:	bb33      	cbnz	r3, 3bffe <register_events+0x10e>
		} else if (!just_check && poller->is_polling) {
   3bfb0:	9b01      	ldr	r3, [sp, #4]
   3bfb2:	2b00      	cmp	r3, #0
   3bfb4:	d1e1      	bne.n	3bf7a <register_events+0x8a>
   3bfb6:	782b      	ldrb	r3, [r5, #0]
   3bfb8:	2b00      	cmp	r3, #0
   3bfba:	d0de      	beq.n	3bf7a <register_events+0x8a>
	switch (event->type) {
   3bfbc:	7b63      	ldrb	r3, [r4, #13]
   3bfbe:	f003 030f 	and.w	r3, r3, #15
   3bfc2:	2b04      	cmp	r3, #4
   3bfc4:	d85d      	bhi.n	3c082 <register_events+0x192>
   3bfc6:	e8df f003 	tbb	[pc, r3]
   3bfca:	4931      	.short	0x4931
   3bfcc:	5c1c      	.short	0x5c1c
   3bfce:	35          	.byte	0x35
   3bfcf:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   3bfd0:	6923      	ldr	r3, [r4, #16]
   3bfd2:	689b      	ldr	r3, [r3, #8]
   3bfd4:	2b00      	cmp	r3, #0
   3bfd6:	d0eb      	beq.n	3bfb0 <register_events+0xc0>
			*state = K_POLL_STATE_SIGNALED;
   3bfd8:	2201      	movs	r2, #1
   3bfda:	e7c4      	b.n	3bf66 <register_events+0x76>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   3bfdc:	2350      	movs	r3, #80	; 0x50
   3bfde:	4a36      	ldr	r2, [pc, #216]	; (3c0b8 <register_events+0x1c8>)
   3bfe0:	4936      	ldr	r1, [pc, #216]	; (3c0bc <register_events+0x1cc>)
   3bfe2:	4831      	ldr	r0, [pc, #196]	; (3c0a8 <register_events+0x1b8>)
   3bfe4:	f003 fa2f 	bl	3f446 <printk>
   3bfe8:	7b61      	ldrb	r1, [r4, #13]
   3bfea:	4835      	ldr	r0, [pc, #212]	; (3c0c0 <register_events+0x1d0>)
   3bfec:	f001 010f 	and.w	r1, r1, #15
   3bff0:	f003 fa29 	bl	3f446 <printk>
   3bff4:	2150      	movs	r1, #80	; 0x50
   3bff6:	4830      	ldr	r0, [pc, #192]	; (3c0b8 <register_events+0x1c8>)
   3bff8:	f003 fa32 	bl	3f460 <assert_post_action>
		break;
   3bffc:	e7d8      	b.n	3bfb0 <register_events+0xc0>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   3bffe:	2204      	movs	r2, #4
   3c000:	e7b1      	b.n	3bf66 <register_events+0x76>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3c002:	6923      	ldr	r3, [r4, #16]
   3c004:	b963      	cbnz	r3, 3c020 <register_events+0x130>
   3c006:	492f      	ldr	r1, [pc, #188]	; (3c0c4 <register_events+0x1d4>)
   3c008:	2375      	movs	r3, #117	; 0x75
   3c00a:	4a2b      	ldr	r2, [pc, #172]	; (3c0b8 <register_events+0x1c8>)
   3c00c:	4826      	ldr	r0, [pc, #152]	; (3c0a8 <register_events+0x1b8>)
   3c00e:	f003 fa1a 	bl	3f446 <printk>
   3c012:	482d      	ldr	r0, [pc, #180]	; (3c0c8 <register_events+0x1d8>)
   3c014:	f003 fa17 	bl	3f446 <printk>
   3c018:	2175      	movs	r1, #117	; 0x75
   3c01a:	4827      	ldr	r0, [pc, #156]	; (3c0b8 <register_events+0x1c8>)
   3c01c:	f003 fa20 	bl	3f460 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   3c020:	462a      	mov	r2, r5
   3c022:	4621      	mov	r1, r4
   3c024:	6920      	ldr	r0, [r4, #16]
   3c026:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   3c028:	f005 fc66 	bl	418f8 <add_event>
	event->poller = poller;
   3c02c:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   3c02e:	f108 0801 	add.w	r8, r8, #1
   3c032:	e7a2      	b.n	3bf7a <register_events+0x8a>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   3c034:	6923      	ldr	r3, [r4, #16]
   3c036:	b963      	cbnz	r3, 3c052 <register_events+0x162>
   3c038:	4924      	ldr	r1, [pc, #144]	; (3c0cc <register_events+0x1dc>)
   3c03a:	2379      	movs	r3, #121	; 0x79
   3c03c:	4a1e      	ldr	r2, [pc, #120]	; (3c0b8 <register_events+0x1c8>)
   3c03e:	481a      	ldr	r0, [pc, #104]	; (3c0a8 <register_events+0x1b8>)
   3c040:	f003 fa01 	bl	3f446 <printk>
   3c044:	4822      	ldr	r0, [pc, #136]	; (3c0d0 <register_events+0x1e0>)
   3c046:	f003 f9fe 	bl	3f446 <printk>
   3c04a:	2179      	movs	r1, #121	; 0x79
   3c04c:	481a      	ldr	r0, [pc, #104]	; (3c0b8 <register_events+0x1c8>)
   3c04e:	f003 fa07 	bl	3f460 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   3c052:	6920      	ldr	r0, [r4, #16]
   3c054:	462a      	mov	r2, r5
   3c056:	4621      	mov	r1, r4
   3c058:	300c      	adds	r0, #12
   3c05a:	e7e5      	b.n	3c028 <register_events+0x138>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3c05c:	6923      	ldr	r3, [r4, #16]
   3c05e:	b963      	cbnz	r3, 3c07a <register_events+0x18a>
   3c060:	491c      	ldr	r1, [pc, #112]	; (3c0d4 <register_events+0x1e4>)
   3c062:	237d      	movs	r3, #125	; 0x7d
   3c064:	4a14      	ldr	r2, [pc, #80]	; (3c0b8 <register_events+0x1c8>)
   3c066:	4810      	ldr	r0, [pc, #64]	; (3c0a8 <register_events+0x1b8>)
   3c068:	f003 f9ed 	bl	3f446 <printk>
   3c06c:	481a      	ldr	r0, [pc, #104]	; (3c0d8 <register_events+0x1e8>)
   3c06e:	f003 f9ea 	bl	3f446 <printk>
   3c072:	217d      	movs	r1, #125	; 0x7d
   3c074:	4810      	ldr	r0, [pc, #64]	; (3c0b8 <register_events+0x1c8>)
   3c076:	f003 f9f3 	bl	3f460 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   3c07a:	462a      	mov	r2, r5
   3c07c:	4621      	mov	r1, r4
   3c07e:	6920      	ldr	r0, [r4, #16]
   3c080:	e7d2      	b.n	3c028 <register_events+0x138>
		__ASSERT(false, "invalid event type\n");
   3c082:	2384      	movs	r3, #132	; 0x84
   3c084:	4a0c      	ldr	r2, [pc, #48]	; (3c0b8 <register_events+0x1c8>)
   3c086:	490d      	ldr	r1, [pc, #52]	; (3c0bc <register_events+0x1cc>)
   3c088:	4807      	ldr	r0, [pc, #28]	; (3c0a8 <register_events+0x1b8>)
   3c08a:	f003 f9dc 	bl	3f446 <printk>
   3c08e:	4813      	ldr	r0, [pc, #76]	; (3c0dc <register_events+0x1ec>)
   3c090:	f003 f9d9 	bl	3f446 <printk>
   3c094:	2184      	movs	r1, #132	; 0x84
   3c096:	4808      	ldr	r0, [pc, #32]	; (3c0b8 <register_events+0x1c8>)
   3c098:	f003 f9e2 	bl	3f460 <assert_post_action>
		break;
   3c09c:	e7c6      	b.n	3c02c <register_events+0x13c>
   3c09e:	bf00      	nop
   3c0a0:	00045d0e 	.word	0x00045d0e
   3c0a4:	00045d2d 	.word	0x00045d2d
   3c0a8:	00045316 	.word	0x00045316
   3c0ac:	00045d42 	.word	0x00045d42
   3c0b0:	00045d57 	.word	0x00045d57
   3c0b4:	00045d6e 	.word	0x00045d6e
   3c0b8:	0004a691 	.word	0x0004a691
   3c0bc:	0004a2c3 	.word	0x0004a2c3
   3c0c0:	0004a6e0 	.word	0x0004a6e0
   3c0c4:	0004a544 	.word	0x0004a544
   3c0c8:	0004a55e 	.word	0x0004a55e
   3c0cc:	0004a573 	.word	0x0004a573
   3c0d0:	0004a58f 	.word	0x0004a58f
   3c0d4:	0004a5a0 	.word	0x0004a5a0
   3c0d8:	0004a5bd 	.word	0x0004a5bd
   3c0dc:	0004a5d4 	.word	0x0004a5d4
   3c0e0:	2002a2f4 	.word	0x2002a2f4

0003c0e4 <k_poll_event_init>:
{
   3c0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3c0e6:	4604      	mov	r4, r0
   3c0e8:	460f      	mov	r7, r1
   3c0ea:	461d      	mov	r5, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   3c0ec:	4616      	mov	r6, r2
   3c0ee:	b162      	cbz	r2, 3c10a <k_poll_event_init+0x26>
   3c0f0:	491c      	ldr	r1, [pc, #112]	; (3c164 <k_poll_event_init+0x80>)
   3c0f2:	232a      	movs	r3, #42	; 0x2a
   3c0f4:	4a1c      	ldr	r2, [pc, #112]	; (3c168 <k_poll_event_init+0x84>)
   3c0f6:	481d      	ldr	r0, [pc, #116]	; (3c16c <k_poll_event_init+0x88>)
   3c0f8:	f003 f9a5 	bl	3f446 <printk>
   3c0fc:	481c      	ldr	r0, [pc, #112]	; (3c170 <k_poll_event_init+0x8c>)
   3c0fe:	f003 f9a2 	bl	3f446 <printk>
   3c102:	212a      	movs	r1, #42	; 0x2a
   3c104:	4818      	ldr	r0, [pc, #96]	; (3c168 <k_poll_event_init+0x84>)
   3c106:	f003 f9ab 	bl	3f460 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   3c10a:	2f0f      	cmp	r7, #15
   3c10c:	d90c      	bls.n	3c128 <k_poll_event_init+0x44>
   3c10e:	4919      	ldr	r1, [pc, #100]	; (3c174 <k_poll_event_init+0x90>)
   3c110:	232b      	movs	r3, #43	; 0x2b
   3c112:	4a15      	ldr	r2, [pc, #84]	; (3c168 <k_poll_event_init+0x84>)
   3c114:	4815      	ldr	r0, [pc, #84]	; (3c16c <k_poll_event_init+0x88>)
   3c116:	f003 f996 	bl	3f446 <printk>
   3c11a:	4817      	ldr	r0, [pc, #92]	; (3c178 <k_poll_event_init+0x94>)
   3c11c:	f003 f993 	bl	3f446 <printk>
   3c120:	212b      	movs	r1, #43	; 0x2b
   3c122:	4811      	ldr	r0, [pc, #68]	; (3c168 <k_poll_event_init+0x84>)
   3c124:	f003 f99c 	bl	3f460 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   3c128:	b965      	cbnz	r5, 3c144 <k_poll_event_init+0x60>
   3c12a:	4914      	ldr	r1, [pc, #80]	; (3c17c <k_poll_event_init+0x98>)
   3c12c:	232c      	movs	r3, #44	; 0x2c
   3c12e:	4a0e      	ldr	r2, [pc, #56]	; (3c168 <k_poll_event_init+0x84>)
   3c130:	480e      	ldr	r0, [pc, #56]	; (3c16c <k_poll_event_init+0x88>)
   3c132:	f003 f988 	bl	3f446 <printk>
   3c136:	4812      	ldr	r0, [pc, #72]	; (3c180 <k_poll_event_init+0x9c>)
   3c138:	f003 f985 	bl	3f446 <printk>
   3c13c:	212c      	movs	r1, #44	; 0x2c
   3c13e:	480a      	ldr	r0, [pc, #40]	; (3c168 <k_poll_event_init+0x84>)
   3c140:	f003 f98e 	bl	3f460 <assert_post_action>
	event->type = type;
   3c144:	7b63      	ldrb	r3, [r4, #13]
   3c146:	f367 0303 	bfi	r3, r7, #0, #4
   3c14a:	7363      	strb	r3, [r4, #13]
	event->mode = mode;
   3c14c:	7ba3      	ldrb	r3, [r4, #14]
   3c14e:	f366 0341 	bfi	r3, r6, #1, #1
   3c152:	73a3      	strb	r3, [r4, #14]
	event->poller = NULL;
   3c154:	2300      	movs	r3, #0
	event->state = K_POLL_STATE_NOT_READY;
   3c156:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   3c158:	60a3      	str	r3, [r4, #8]
	event->state = K_POLL_STATE_NOT_READY;
   3c15a:	4b0a      	ldr	r3, [pc, #40]	; (3c184 <k_poll_event_init+0xa0>)
   3c15c:	4013      	ands	r3, r2
	event->obj = obj;
   3c15e:	e9c4 3503 	strd	r3, r5, [r4, #12]
}
   3c162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3c164:	0004a5ea 	.word	0x0004a5ea
   3c168:	0004a691 	.word	0x0004a691
   3c16c:	00045316 	.word	0x00045316
   3c170:	0004a60a 	.word	0x0004a60a
   3c174:	0004a630 	.word	0x0004a630
   3c178:	0004a654 	.word	0x0004a654
   3c17c:	0004a664 	.word	0x0004a664
   3c180:	0004a677 	.word	0x0004a677
   3c184:	00020fff 	.word	0x00020fff

0003c188 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   3c188:	2301      	movs	r3, #1
{
   3c18a:	b5f0      	push	{r4, r5, r6, r7, lr}
   3c18c:	b087      	sub	sp, #28
	struct _poller poller = { .is_polling = true,
   3c18e:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   3c192:	4b6d      	ldr	r3, [pc, #436]	; (3c348 <z_impl_k_poll+0x1c0>)
{
   3c194:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   3c196:	689b      	ldr	r3, [r3, #8]
{
   3c198:	460d      	mov	r5, r1
	struct _poller poller = { .is_polling = true,
   3c19a:	9304      	str	r3, [sp, #16]
   3c19c:	4b6b      	ldr	r3, [pc, #428]	; (3c34c <z_impl_k_poll+0x1c4>)
{
   3c19e:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   3c1a0:	9305      	str	r3, [sp, #20]
   3c1a2:	f3ef 8305 	mrs	r3, IPSR
				  .cb         = k_poll_poller_cb };

	__ASSERT(!arch_is_in_isr(), "");
   3c1a6:	b163      	cbz	r3, 3c1c2 <z_impl_k_poll+0x3a>
   3c1a8:	4969      	ldr	r1, [pc, #420]	; (3c350 <z_impl_k_poll+0x1c8>)
   3c1aa:	23ff      	movs	r3, #255	; 0xff
   3c1ac:	4a69      	ldr	r2, [pc, #420]	; (3c354 <z_impl_k_poll+0x1cc>)
   3c1ae:	486a      	ldr	r0, [pc, #424]	; (3c358 <z_impl_k_poll+0x1d0>)
   3c1b0:	f003 f949 	bl	3f446 <printk>
   3c1b4:	4869      	ldr	r0, [pc, #420]	; (3c35c <z_impl_k_poll+0x1d4>)
   3c1b6:	f003 f946 	bl	3f446 <printk>
   3c1ba:	21ff      	movs	r1, #255	; 0xff
   3c1bc:	4865      	ldr	r0, [pc, #404]	; (3c354 <z_impl_k_poll+0x1cc>)
   3c1be:	f003 f94f 	bl	3f460 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   3c1c2:	b974      	cbnz	r4, 3c1e2 <z_impl_k_poll+0x5a>
   3c1c4:	4966      	ldr	r1, [pc, #408]	; (3c360 <z_impl_k_poll+0x1d8>)
   3c1c6:	f44f 7380 	mov.w	r3, #256	; 0x100
   3c1ca:	4a62      	ldr	r2, [pc, #392]	; (3c354 <z_impl_k_poll+0x1cc>)
   3c1cc:	4862      	ldr	r0, [pc, #392]	; (3c358 <z_impl_k_poll+0x1d0>)
   3c1ce:	f003 f93a 	bl	3f446 <printk>
   3c1d2:	4864      	ldr	r0, [pc, #400]	; (3c364 <z_impl_k_poll+0x1dc>)
   3c1d4:	f003 f937 	bl	3f446 <printk>
   3c1d8:	f44f 7180 	mov.w	r1, #256	; 0x100
   3c1dc:	485d      	ldr	r0, [pc, #372]	; (3c354 <z_impl_k_poll+0x1cc>)
   3c1de:	f003 f93f 	bl	3f460 <assert_post_action>
	__ASSERT(num_events > 0, "zero events\n");
   3c1e2:	2d00      	cmp	r5, #0
   3c1e4:	dc0e      	bgt.n	3c204 <z_impl_k_poll+0x7c>
   3c1e6:	4960      	ldr	r1, [pc, #384]	; (3c368 <z_impl_k_poll+0x1e0>)
   3c1e8:	f240 1301 	movw	r3, #257	; 0x101
   3c1ec:	4a59      	ldr	r2, [pc, #356]	; (3c354 <z_impl_k_poll+0x1cc>)
   3c1ee:	485a      	ldr	r0, [pc, #360]	; (3c358 <z_impl_k_poll+0x1d0>)
   3c1f0:	f003 f929 	bl	3f446 <printk>
   3c1f4:	485d      	ldr	r0, [pc, #372]	; (3c36c <z_impl_k_poll+0x1e4>)
   3c1f6:	f003 f926 	bl	3f446 <printk>
   3c1fa:	f240 1101 	movw	r1, #257	; 0x101
   3c1fe:	4855      	ldr	r0, [pc, #340]	; (3c354 <z_impl_k_poll+0x1cc>)
   3c200:	f003 f92e 	bl	3f460 <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   3c204:	fab6 f386 	clz	r3, r6
   3c208:	aa03      	add	r2, sp, #12
   3c20a:	095b      	lsrs	r3, r3, #5
   3c20c:	4629      	mov	r1, r5
   3c20e:	4620      	mov	r0, r4
   3c210:	f7ff fe6e 	bl	3bef0 <register_events>
   3c214:	4607      	mov	r7, r0
	__asm__ volatile(
   3c216:	f04f 0320 	mov.w	r3, #32
   3c21a:	f3ef 8511 	mrs	r5, BASEPRI
   3c21e:	f383 8811 	msr	BASEPRI, r3
   3c222:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3c226:	4852      	ldr	r0, [pc, #328]	; (3c370 <z_impl_k_poll+0x1e8>)
   3c228:	f7fe ff2c 	bl	3b084 <z_spin_lock_valid>
   3c22c:	b960      	cbnz	r0, 3c248 <z_impl_k_poll+0xc0>
   3c22e:	4951      	ldr	r1, [pc, #324]	; (3c374 <z_impl_k_poll+0x1ec>)
   3c230:	234f      	movs	r3, #79	; 0x4f
   3c232:	4a51      	ldr	r2, [pc, #324]	; (3c378 <z_impl_k_poll+0x1f0>)
   3c234:	4848      	ldr	r0, [pc, #288]	; (3c358 <z_impl_k_poll+0x1d0>)
   3c236:	f003 f906 	bl	3f446 <printk>
   3c23a:	4850      	ldr	r0, [pc, #320]	; (3c37c <z_impl_k_poll+0x1f4>)
   3c23c:	f003 f903 	bl	3f446 <printk>
   3c240:	214f      	movs	r1, #79	; 0x4f
   3c242:	484d      	ldr	r0, [pc, #308]	; (3c378 <z_impl_k_poll+0x1f0>)
   3c244:	f003 f90c 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3c248:	4849      	ldr	r0, [pc, #292]	; (3c370 <z_impl_k_poll+0x1e8>)
   3c24a:	f7fe ff39 	bl	3b0c0 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   3c24e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   3c252:	b9eb      	cbnz	r3, 3c290 <z_impl_k_poll+0x108>
		clear_event_registrations(events, events_registered, key);
   3c254:	4620      	mov	r0, r4
   3c256:	462a      	mov	r2, r5
   3c258:	4639      	mov	r1, r7
   3c25a:	f7ff fd93 	bl	3bd84 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3c25e:	4844      	ldr	r0, [pc, #272]	; (3c370 <z_impl_k_poll+0x1e8>)
   3c260:	f7fe ff1e 	bl	3b0a0 <z_spin_unlock_valid>
   3c264:	b960      	cbnz	r0, 3c280 <z_impl_k_poll+0xf8>
   3c266:	4946      	ldr	r1, [pc, #280]	; (3c380 <z_impl_k_poll+0x1f8>)
   3c268:	2362      	movs	r3, #98	; 0x62
   3c26a:	4a43      	ldr	r2, [pc, #268]	; (3c378 <z_impl_k_poll+0x1f0>)
   3c26c:	483a      	ldr	r0, [pc, #232]	; (3c358 <z_impl_k_poll+0x1d0>)
   3c26e:	f003 f8ea 	bl	3f446 <printk>
   3c272:	4844      	ldr	r0, [pc, #272]	; (3c384 <z_impl_k_poll+0x1fc>)
   3c274:	f003 f8e7 	bl	3f446 <printk>
   3c278:	2162      	movs	r1, #98	; 0x62
   3c27a:	483f      	ldr	r0, [pc, #252]	; (3c378 <z_impl_k_poll+0x1f0>)
   3c27c:	f003 f8f0 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3c280:	f385 8811 	msr	BASEPRI, r5
   3c284:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   3c288:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   3c28a:	4628      	mov	r0, r5
   3c28c:	b007      	add	sp, #28
   3c28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	poller.is_polling = false;
   3c290:	2300      	movs	r3, #0
   3c292:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   3c296:	b9be      	cbnz	r6, 3c2c8 <z_impl_k_poll+0x140>
   3c298:	4835      	ldr	r0, [pc, #212]	; (3c370 <z_impl_k_poll+0x1e8>)
   3c29a:	f7fe ff01 	bl	3b0a0 <z_spin_unlock_valid>
   3c29e:	b960      	cbnz	r0, 3c2ba <z_impl_k_poll+0x132>
   3c2a0:	4937      	ldr	r1, [pc, #220]	; (3c380 <z_impl_k_poll+0x1f8>)
   3c2a2:	2362      	movs	r3, #98	; 0x62
   3c2a4:	4a34      	ldr	r2, [pc, #208]	; (3c378 <z_impl_k_poll+0x1f0>)
   3c2a6:	482c      	ldr	r0, [pc, #176]	; (3c358 <z_impl_k_poll+0x1d0>)
   3c2a8:	f003 f8cd 	bl	3f446 <printk>
   3c2ac:	4835      	ldr	r0, [pc, #212]	; (3c384 <z_impl_k_poll+0x1fc>)
   3c2ae:	f003 f8ca 	bl	3f446 <printk>
   3c2b2:	2162      	movs	r1, #98	; 0x62
   3c2b4:	4830      	ldr	r0, [pc, #192]	; (3c378 <z_impl_k_poll+0x1f0>)
   3c2b6:	f003 f8d3 	bl	3f460 <assert_post_action>
   3c2ba:	f385 8811 	msr	BASEPRI, r5
   3c2be:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   3c2c2:	f06f 050a 	mvn.w	r5, #10
   3c2c6:	e7e0      	b.n	3c28a <z_impl_k_poll+0x102>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   3c2c8:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   3c2ca:	4629      	mov	r1, r5
   3c2cc:	4633      	mov	r3, r6
   3c2ce:	4828      	ldr	r0, [pc, #160]	; (3c370 <z_impl_k_poll+0x1e8>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   3c2d0:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   3c2d4:	f7fe faf0 	bl	3a8b8 <z_pend_curr>
   3c2d8:	4605      	mov	r5, r0
	__asm__ volatile(
   3c2da:	f04f 0320 	mov.w	r3, #32
   3c2de:	f3ef 8611 	mrs	r6, BASEPRI
   3c2e2:	f383 8811 	msr	BASEPRI, r3
   3c2e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3c2ea:	4821      	ldr	r0, [pc, #132]	; (3c370 <z_impl_k_poll+0x1e8>)
   3c2ec:	f7fe feca 	bl	3b084 <z_spin_lock_valid>
   3c2f0:	b960      	cbnz	r0, 3c30c <z_impl_k_poll+0x184>
   3c2f2:	4920      	ldr	r1, [pc, #128]	; (3c374 <z_impl_k_poll+0x1ec>)
   3c2f4:	234f      	movs	r3, #79	; 0x4f
   3c2f6:	4a20      	ldr	r2, [pc, #128]	; (3c378 <z_impl_k_poll+0x1f0>)
   3c2f8:	4817      	ldr	r0, [pc, #92]	; (3c358 <z_impl_k_poll+0x1d0>)
   3c2fa:	f003 f8a4 	bl	3f446 <printk>
   3c2fe:	481f      	ldr	r0, [pc, #124]	; (3c37c <z_impl_k_poll+0x1f4>)
   3c300:	f003 f8a1 	bl	3f446 <printk>
   3c304:	214f      	movs	r1, #79	; 0x4f
   3c306:	481c      	ldr	r0, [pc, #112]	; (3c378 <z_impl_k_poll+0x1f0>)
   3c308:	f003 f8aa 	bl	3f460 <assert_post_action>
	z_spin_lock_set_owner(l);
   3c30c:	4818      	ldr	r0, [pc, #96]	; (3c370 <z_impl_k_poll+0x1e8>)
   3c30e:	f7fe fed7 	bl	3b0c0 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   3c312:	4620      	mov	r0, r4
   3c314:	4632      	mov	r2, r6
   3c316:	4639      	mov	r1, r7
   3c318:	f7ff fd34 	bl	3bd84 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3c31c:	4814      	ldr	r0, [pc, #80]	; (3c370 <z_impl_k_poll+0x1e8>)
   3c31e:	f7fe febf 	bl	3b0a0 <z_spin_unlock_valid>
   3c322:	b960      	cbnz	r0, 3c33e <z_impl_k_poll+0x1b6>
   3c324:	4916      	ldr	r1, [pc, #88]	; (3c380 <z_impl_k_poll+0x1f8>)
   3c326:	2362      	movs	r3, #98	; 0x62
   3c328:	4a13      	ldr	r2, [pc, #76]	; (3c378 <z_impl_k_poll+0x1f0>)
   3c32a:	480b      	ldr	r0, [pc, #44]	; (3c358 <z_impl_k_poll+0x1d0>)
   3c32c:	f003 f88b 	bl	3f446 <printk>
   3c330:	4814      	ldr	r0, [pc, #80]	; (3c384 <z_impl_k_poll+0x1fc>)
   3c332:	f003 f888 	bl	3f446 <printk>
   3c336:	2162      	movs	r1, #98	; 0x62
   3c338:	480f      	ldr	r0, [pc, #60]	; (3c378 <z_impl_k_poll+0x1f0>)
   3c33a:	f003 f891 	bl	3f460 <assert_post_action>
	__asm__ volatile(
   3c33e:	f386 8811 	msr	BASEPRI, r6
   3c342:	f3bf 8f6f 	isb	sy
	return swap_rc;
   3c346:	e7a0      	b.n	3c28a <z_impl_k_poll+0x102>
   3c348:	2002a1d8 	.word	0x2002a1d8
   3c34c:	0003bd15 	.word	0x0003bd15
   3c350:	0004a263 	.word	0x0004a263
   3c354:	0004a691 	.word	0x0004a691
   3c358:	00045316 	.word	0x00045316
   3c35c:	0004a182 	.word	0x0004a182
   3c360:	0004a6fd 	.word	0x0004a6fd
   3c364:	0004a713 	.word	0x0004a713
   3c368:	0004a722 	.word	0x0004a722
   3c36c:	0004a731 	.word	0x0004a731
   3c370:	2002a2f4 	.word	0x2002a2f4
   3c374:	00045d2d 	.word	0x00045d2d
   3c378:	00045d0e 	.word	0x00045d0e
   3c37c:	00045d42 	.word	0x00045d42
   3c380:	00045d57 	.word	0x00045d57
   3c384:	00045d6e 	.word	0x00045d6e

0003c388 <ocrypto_ecdsa_p256_public_key>:
   3c388:	b530      	push	{r4, r5, lr}
   3c38a:	b099      	sub	sp, #100	; 0x64
   3c38c:	4605      	mov	r5, r0
   3c38e:	4668      	mov	r0, sp
   3c390:	f000 f8f2 	bl	3c578 <ocrypto_sc_p256_from32bytes>
   3c394:	4669      	mov	r1, sp
   3c396:	a808      	add	r0, sp, #32
   3c398:	f000 fae6 	bl	3c968 <ocrypto_curve_p256_scalarmult_base>
   3c39c:	4604      	mov	r4, r0
   3c39e:	a908      	add	r1, sp, #32
   3c3a0:	4628      	mov	r0, r5
   3c3a2:	f000 fa21 	bl	3c7e8 <ocrypto_curve_p256_to64bytes>
   3c3a6:	4620      	mov	r0, r4
   3c3a8:	b019      	add	sp, #100	; 0x64
   3c3aa:	bd30      	pop	{r4, r5, pc}

0003c3ac <ocrypto_mod_p256_cneg>:
   3c3ac:	b570      	push	{r4, r5, r6, lr}
   3c3ae:	b088      	sub	sp, #32
   3c3b0:	4604      	mov	r4, r0
   3c3b2:	460d      	mov	r5, r1
   3c3b4:	4668      	mov	r0, sp
   3c3b6:	2120      	movs	r1, #32
   3c3b8:	4616      	mov	r6, r2
   3c3ba:	f7dd f9c8 	bl	1974e <ocrypto_constant_time_fill_zero>
   3c3be:	2300      	movs	r3, #0
   3c3c0:	4629      	mov	r1, r5
   3c3c2:	4620      	mov	r0, r4
   3c3c4:	2220      	movs	r2, #32
   3c3c6:	9300      	str	r3, [sp, #0]
   3c3c8:	f7dd f9ba 	bl	19740 <ocrypto_constant_time_copy>
   3c3cc:	462a      	mov	r2, r5
   3c3ce:	4669      	mov	r1, sp
   3c3d0:	4668      	mov	r0, sp
   3c3d2:	f7dd fa02 	bl	197da <ocrypto_mod_p256_sub>
   3c3d6:	4632      	mov	r2, r6
   3c3d8:	4669      	mov	r1, sp
   3c3da:	4620      	mov	r0, r4
   3c3dc:	f7dc ff0d 	bl	191fa <ocrypto_bigint_cswap256>
   3c3e0:	b008      	add	sp, #32
   3c3e2:	bd70      	pop	{r4, r5, r6, pc}

0003c3e4 <ocrypto_mod_p256_toBytes>:
   3c3e4:	69cb      	ldr	r3, [r1, #28]
   3c3e6:	ba1b      	rev	r3, r3
   3c3e8:	6003      	str	r3, [r0, #0]
   3c3ea:	698b      	ldr	r3, [r1, #24]
   3c3ec:	ba1b      	rev	r3, r3
   3c3ee:	6043      	str	r3, [r0, #4]
   3c3f0:	694b      	ldr	r3, [r1, #20]
   3c3f2:	ba1b      	rev	r3, r3
   3c3f4:	6083      	str	r3, [r0, #8]
   3c3f6:	690b      	ldr	r3, [r1, #16]
   3c3f8:	ba1b      	rev	r3, r3
   3c3fa:	60c3      	str	r3, [r0, #12]
   3c3fc:	68cb      	ldr	r3, [r1, #12]
   3c3fe:	ba1b      	rev	r3, r3
   3c400:	6103      	str	r3, [r0, #16]
   3c402:	688b      	ldr	r3, [r1, #8]
   3c404:	ba1b      	rev	r3, r3
   3c406:	6143      	str	r3, [r0, #20]
   3c408:	684b      	ldr	r3, [r1, #4]
   3c40a:	ba1b      	rev	r3, r3
   3c40c:	6183      	str	r3, [r0, #24]
   3c40e:	680b      	ldr	r3, [r1, #0]
   3c410:	ba1b      	rev	r3, r3
   3c412:	61c3      	str	r3, [r0, #28]
   3c414:	4770      	bx	lr
   3c416:	bf00      	nop

0003c418 <ocrypto_mod_p256_invert>:
   3c418:	b570      	push	{r4, r5, r6, lr}
   3c41a:	460d      	mov	r5, r1
   3c41c:	2405      	movs	r4, #5
   3c41e:	b098      	sub	sp, #96	; 0x60
   3c420:	4606      	mov	r6, r0
   3c422:	a810      	add	r0, sp, #64	; 0x40
   3c424:	f7dd fa06 	bl	19834 <ocrypto_mod_p256_square>
   3c428:	462a      	mov	r2, r5
   3c42a:	a910      	add	r1, sp, #64	; 0x40
   3c42c:	4668      	mov	r0, sp
   3c42e:	f7dd fa02 	bl	19836 <ocrypto_mod_p256_mul>
   3c432:	4669      	mov	r1, sp
   3c434:	a810      	add	r0, sp, #64	; 0x40
   3c436:	f7dd f9fd 	bl	19834 <ocrypto_mod_p256_square>
   3c43a:	a910      	add	r1, sp, #64	; 0x40
   3c43c:	4608      	mov	r0, r1
   3c43e:	f7dd f9f9 	bl	19834 <ocrypto_mod_p256_square>
   3c442:	466a      	mov	r2, sp
   3c444:	a910      	add	r1, sp, #64	; 0x40
   3c446:	a808      	add	r0, sp, #32
   3c448:	f7dd f9f5 	bl	19836 <ocrypto_mod_p256_mul>
   3c44c:	a908      	add	r1, sp, #32
   3c44e:	a810      	add	r0, sp, #64	; 0x40
   3c450:	f7dd f9f0 	bl	19834 <ocrypto_mod_p256_square>
   3c454:	a910      	add	r1, sp, #64	; 0x40
   3c456:	4608      	mov	r0, r1
   3c458:	f7dd f9ec 	bl	19834 <ocrypto_mod_p256_square>
   3c45c:	a910      	add	r1, sp, #64	; 0x40
   3c45e:	4608      	mov	r0, r1
   3c460:	f7dd f9e8 	bl	19834 <ocrypto_mod_p256_square>
   3c464:	a910      	add	r1, sp, #64	; 0x40
   3c466:	4608      	mov	r0, r1
   3c468:	f7dd f9e4 	bl	19834 <ocrypto_mod_p256_square>
   3c46c:	a910      	add	r1, sp, #64	; 0x40
   3c46e:	aa08      	add	r2, sp, #32
   3c470:	4608      	mov	r0, r1
   3c472:	f7dd f9e0 	bl	19836 <ocrypto_mod_p256_mul>
   3c476:	a910      	add	r1, sp, #64	; 0x40
   3c478:	4608      	mov	r0, r1
   3c47a:	f7dd f9db 	bl	19834 <ocrypto_mod_p256_square>
   3c47e:	a910      	add	r1, sp, #64	; 0x40
   3c480:	4608      	mov	r0, r1
   3c482:	f7dd f9d7 	bl	19834 <ocrypto_mod_p256_square>
   3c486:	a910      	add	r1, sp, #64	; 0x40
   3c488:	466a      	mov	r2, sp
   3c48a:	a808      	add	r0, sp, #32
   3c48c:	f7dd f9d3 	bl	19836 <ocrypto_mod_p256_mul>
   3c490:	a908      	add	r1, sp, #32
   3c492:	a810      	add	r0, sp, #64	; 0x40
   3c494:	f7dd f9ce 	bl	19834 <ocrypto_mod_p256_square>
   3c498:	a910      	add	r1, sp, #64	; 0x40
   3c49a:	4608      	mov	r0, r1
   3c49c:	f7dd f9ca 	bl	19834 <ocrypto_mod_p256_square>
   3c4a0:	3c01      	subs	r4, #1
   3c4a2:	a910      	add	r1, sp, #64	; 0x40
   3c4a4:	d1f5      	bne.n	3c492 <ocrypto_mod_p256_invert+0x7a>
   3c4a6:	aa08      	add	r2, sp, #32
   3c4a8:	4608      	mov	r0, r1
   3c4aa:	f7dd f9c4 	bl	19836 <ocrypto_mod_p256_mul>
   3c4ae:	2405      	movs	r4, #5
   3c4b0:	a910      	add	r1, sp, #64	; 0x40
   3c4b2:	4608      	mov	r0, r1
   3c4b4:	f7dd f9be 	bl	19834 <ocrypto_mod_p256_square>
   3c4b8:	a910      	add	r1, sp, #64	; 0x40
   3c4ba:	4608      	mov	r0, r1
   3c4bc:	f7dd f9ba 	bl	19834 <ocrypto_mod_p256_square>
   3c4c0:	3c01      	subs	r4, #1
   3c4c2:	d1f5      	bne.n	3c4b0 <ocrypto_mod_p256_invert+0x98>
   3c4c4:	a910      	add	r1, sp, #64	; 0x40
   3c4c6:	aa08      	add	r2, sp, #32
   3c4c8:	4608      	mov	r0, r1
   3c4ca:	f7dd f9b4 	bl	19836 <ocrypto_mod_p256_mul>
   3c4ce:	a910      	add	r1, sp, #64	; 0x40
   3c4d0:	a808      	add	r0, sp, #32
   3c4d2:	f7dd f9af 	bl	19834 <ocrypto_mod_p256_square>
   3c4d6:	a908      	add	r1, sp, #32
   3c4d8:	4608      	mov	r0, r1
   3c4da:	f7dd f9ab 	bl	19834 <ocrypto_mod_p256_square>
   3c4de:	a908      	add	r1, sp, #32
   3c4e0:	466a      	mov	r2, sp
   3c4e2:	4668      	mov	r0, sp
   3c4e4:	f7dd f9a7 	bl	19836 <ocrypto_mod_p256_mul>
   3c4e8:	2410      	movs	r4, #16
   3c4ea:	4669      	mov	r1, sp
   3c4ec:	a810      	add	r0, sp, #64	; 0x40
   3c4ee:	f7dd f9a1 	bl	19834 <ocrypto_mod_p256_square>
   3c4f2:	a910      	add	r1, sp, #64	; 0x40
   3c4f4:	4608      	mov	r0, r1
   3c4f6:	f7dd f99d 	bl	19834 <ocrypto_mod_p256_square>
   3c4fa:	3c01      	subs	r4, #1
   3c4fc:	a910      	add	r1, sp, #64	; 0x40
   3c4fe:	d1f5      	bne.n	3c4ec <ocrypto_mod_p256_invert+0xd4>
   3c500:	462a      	mov	r2, r5
   3c502:	4608      	mov	r0, r1
   3c504:	f7dd f997 	bl	19836 <ocrypto_mod_p256_mul>
   3c508:	2440      	movs	r4, #64	; 0x40
   3c50a:	a910      	add	r1, sp, #64	; 0x40
   3c50c:	4608      	mov	r0, r1
   3c50e:	f7dd f991 	bl	19834 <ocrypto_mod_p256_square>
   3c512:	a910      	add	r1, sp, #64	; 0x40
   3c514:	4608      	mov	r0, r1
   3c516:	f7dd f98d 	bl	19834 <ocrypto_mod_p256_square>
   3c51a:	3c01      	subs	r4, #1
   3c51c:	d1f5      	bne.n	3c50a <ocrypto_mod_p256_invert+0xf2>
   3c51e:	a910      	add	r1, sp, #64	; 0x40
   3c520:	466a      	mov	r2, sp
   3c522:	4608      	mov	r0, r1
   3c524:	f7dd f987 	bl	19836 <ocrypto_mod_p256_mul>
   3c528:	2410      	movs	r4, #16
   3c52a:	a910      	add	r1, sp, #64	; 0x40
   3c52c:	4608      	mov	r0, r1
   3c52e:	f7dd f981 	bl	19834 <ocrypto_mod_p256_square>
   3c532:	a910      	add	r1, sp, #64	; 0x40
   3c534:	4608      	mov	r0, r1
   3c536:	f7dd f97d 	bl	19834 <ocrypto_mod_p256_square>
   3c53a:	3c01      	subs	r4, #1
   3c53c:	d1f5      	bne.n	3c52a <ocrypto_mod_p256_invert+0x112>
   3c53e:	a910      	add	r1, sp, #64	; 0x40
   3c540:	466a      	mov	r2, sp
   3c542:	4608      	mov	r0, r1
   3c544:	f7dd f977 	bl	19836 <ocrypto_mod_p256_mul>
   3c548:	2410      	movs	r4, #16
   3c54a:	a910      	add	r1, sp, #64	; 0x40
   3c54c:	4608      	mov	r0, r1
   3c54e:	f7dd f971 	bl	19834 <ocrypto_mod_p256_square>
   3c552:	a910      	add	r1, sp, #64	; 0x40
   3c554:	4608      	mov	r0, r1
   3c556:	f7dd f96d 	bl	19834 <ocrypto_mod_p256_square>
   3c55a:	3c01      	subs	r4, #1
   3c55c:	d1f5      	bne.n	3c54a <ocrypto_mod_p256_invert+0x132>
   3c55e:	a910      	add	r1, sp, #64	; 0x40
   3c560:	aa08      	add	r2, sp, #32
   3c562:	4608      	mov	r0, r1
   3c564:	f7dd f967 	bl	19836 <ocrypto_mod_p256_mul>
   3c568:	462a      	mov	r2, r5
   3c56a:	a910      	add	r1, sp, #64	; 0x40
   3c56c:	4630      	mov	r0, r6
   3c56e:	f7dd f962 	bl	19836 <ocrypto_mod_p256_mul>
   3c572:	b018      	add	sp, #96	; 0x60
   3c574:	bd70      	pop	{r4, r5, r6, pc}
   3c576:	bf00      	nop

0003c578 <ocrypto_sc_p256_from32bytes>:
   3c578:	b538      	push	{r3, r4, r5, lr}
   3c57a:	460b      	mov	r3, r1
   3c57c:	680a      	ldr	r2, [r1, #0]
   3c57e:	4d12      	ldr	r5, [pc, #72]	; (3c5c8 <ocrypto_sc_p256_from32bytes+0x50>)
   3c580:	ba12      	rev	r2, r2
   3c582:	61c2      	str	r2, [r0, #28]
   3c584:	684a      	ldr	r2, [r1, #4]
   3c586:	4601      	mov	r1, r0
   3c588:	ba12      	rev	r2, r2
   3c58a:	6182      	str	r2, [r0, #24]
   3c58c:	689a      	ldr	r2, [r3, #8]
   3c58e:	4604      	mov	r4, r0
   3c590:	ba12      	rev	r2, r2
   3c592:	6142      	str	r2, [r0, #20]
   3c594:	68da      	ldr	r2, [r3, #12]
   3c596:	ba12      	rev	r2, r2
   3c598:	6102      	str	r2, [r0, #16]
   3c59a:	691a      	ldr	r2, [r3, #16]
   3c59c:	ba12      	rev	r2, r2
   3c59e:	60c2      	str	r2, [r0, #12]
   3c5a0:	695a      	ldr	r2, [r3, #20]
   3c5a2:	ba12      	rev	r2, r2
   3c5a4:	6082      	str	r2, [r0, #8]
   3c5a6:	699a      	ldr	r2, [r3, #24]
   3c5a8:	ba12      	rev	r2, r2
   3c5aa:	6042      	str	r2, [r0, #4]
   3c5ac:	69db      	ldr	r3, [r3, #28]
   3c5ae:	462a      	mov	r2, r5
   3c5b0:	ba1b      	rev	r3, r3
   3c5b2:	6003      	str	r3, [r0, #0]
   3c5b4:	f7dc fd96 	bl	190e4 <ocrypto_bigint_sub256>
   3c5b8:	4629      	mov	r1, r5
   3c5ba:	4602      	mov	r2, r0
   3c5bc:	4620      	mov	r0, r4
   3c5be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3c5c2:	f7dc bdaf 	b.w	19124 <ocrypto_bigint_cadd256>
   3c5c6:	bf00      	nop
   3c5c8:	00044bb4 	.word	0x00044bb4

0003c5cc <p256_zdblu>:
   3c5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3c5d0:	4607      	mov	r7, r0
   3c5d2:	460d      	mov	r5, r1
   3c5d4:	4690      	mov	r8, r2
   3c5d6:	b088      	sub	sp, #32
   3c5d8:	f102 0120 	add.w	r1, r2, #32
   3c5dc:	4668      	mov	r0, sp
   3c5de:	f107 0620 	add.w	r6, r7, #32
   3c5e2:	f7dd f927 	bl	19834 <ocrypto_mod_p256_square>
   3c5e6:	466a      	mov	r2, sp
   3c5e8:	4669      	mov	r1, sp
   3c5ea:	4668      	mov	r0, sp
   3c5ec:	f7dd f8b6 	bl	1975c <ocrypto_mod_p256_add>
   3c5f0:	4630      	mov	r0, r6
   3c5f2:	4669      	mov	r1, sp
   3c5f4:	f7dd f91e 	bl	19834 <ocrypto_mod_p256_square>
   3c5f8:	4632      	mov	r2, r6
   3c5fa:	4631      	mov	r1, r6
   3c5fc:	4630      	mov	r0, r6
   3c5fe:	f105 0420 	add.w	r4, r5, #32
   3c602:	f7dd f8ab 	bl	1975c <ocrypto_mod_p256_add>
   3c606:	466a      	mov	r2, sp
   3c608:	4669      	mov	r1, sp
   3c60a:	4668      	mov	r0, sp
   3c60c:	f7dd f8a6 	bl	1975c <ocrypto_mod_p256_add>
   3c610:	4620      	mov	r0, r4
   3c612:	4641      	mov	r1, r8
   3c614:	f7dd f90e 	bl	19834 <ocrypto_mod_p256_square>
   3c618:	466a      	mov	r2, sp
   3c61a:	4641      	mov	r1, r8
   3c61c:	4638      	mov	r0, r7
   3c61e:	f7dd f90a 	bl	19836 <ocrypto_mod_p256_mul>
   3c622:	4622      	mov	r2, r4
   3c624:	4621      	mov	r1, r4
   3c626:	4668      	mov	r0, sp
   3c628:	f7dd f898 	bl	1975c <ocrypto_mod_p256_add>
   3c62c:	4622      	mov	r2, r4
   3c62e:	4669      	mov	r1, sp
   3c630:	4668      	mov	r0, sp
   3c632:	f7dd f893 	bl	1975c <ocrypto_mod_p256_add>
   3c636:	4669      	mov	r1, sp
   3c638:	4668      	mov	r0, sp
   3c63a:	4a11      	ldr	r2, [pc, #68]	; (3c680 <p256_zdblu+0xb4>)
   3c63c:	f7dd f88e 	bl	1975c <ocrypto_mod_p256_add>
   3c640:	4669      	mov	r1, sp
   3c642:	4628      	mov	r0, r5
   3c644:	f7dd f8f6 	bl	19834 <ocrypto_mod_p256_square>
   3c648:	463a      	mov	r2, r7
   3c64a:	4629      	mov	r1, r5
   3c64c:	4628      	mov	r0, r5
   3c64e:	f7dd f8c4 	bl	197da <ocrypto_mod_p256_sub>
   3c652:	463a      	mov	r2, r7
   3c654:	4629      	mov	r1, r5
   3c656:	4628      	mov	r0, r5
   3c658:	f7dd f8bf 	bl	197da <ocrypto_mod_p256_sub>
   3c65c:	462a      	mov	r2, r5
   3c65e:	4639      	mov	r1, r7
   3c660:	4620      	mov	r0, r4
   3c662:	f7dd f8ba 	bl	197da <ocrypto_mod_p256_sub>
   3c666:	466a      	mov	r2, sp
   3c668:	4621      	mov	r1, r4
   3c66a:	4620      	mov	r0, r4
   3c66c:	f7dd f8e3 	bl	19836 <ocrypto_mod_p256_mul>
   3c670:	4632      	mov	r2, r6
   3c672:	4621      	mov	r1, r4
   3c674:	4620      	mov	r0, r4
   3c676:	f7dd f8b0 	bl	197da <ocrypto_mod_p256_sub>
   3c67a:	b008      	add	sp, #32
   3c67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3c680:	00044c54 	.word	0x00044c54

0003c684 <p256_zaddc>:
   3c684:	b5f0      	push	{r4, r5, r6, r7, lr}
   3c686:	4604      	mov	r4, r0
   3c688:	460e      	mov	r6, r1
   3c68a:	b099      	sub	sp, #100	; 0x64
   3c68c:	460a      	mov	r2, r1
   3c68e:	4601      	mov	r1, r0
   3c690:	4668      	mov	r0, sp
   3c692:	f7dd f8a2 	bl	197da <ocrypto_mod_p256_sub>
   3c696:	4669      	mov	r1, sp
   3c698:	4668      	mov	r0, sp
   3c69a:	f7dd f8cb 	bl	19834 <ocrypto_mod_p256_square>
   3c69e:	466a      	mov	r2, sp
   3c6a0:	4621      	mov	r1, r4
   3c6a2:	a808      	add	r0, sp, #32
   3c6a4:	f106 0520 	add.w	r5, r6, #32
   3c6a8:	f104 0720 	add.w	r7, r4, #32
   3c6ac:	f7dd f8c3 	bl	19836 <ocrypto_mod_p256_mul>
   3c6b0:	466a      	mov	r2, sp
   3c6b2:	4631      	mov	r1, r6
   3c6b4:	4668      	mov	r0, sp
   3c6b6:	f7dd f8be 	bl	19836 <ocrypto_mod_p256_mul>
   3c6ba:	4639      	mov	r1, r7
   3c6bc:	462a      	mov	r2, r5
   3c6be:	a810      	add	r0, sp, #64	; 0x40
   3c6c0:	f7dd f84c 	bl	1975c <ocrypto_mod_p256_add>
   3c6c4:	462a      	mov	r2, r5
   3c6c6:	4639      	mov	r1, r7
   3c6c8:	4628      	mov	r0, r5
   3c6ca:	f7dd f886 	bl	197da <ocrypto_mod_p256_sub>
   3c6ce:	4629      	mov	r1, r5
   3c6d0:	4630      	mov	r0, r6
   3c6d2:	f7dd f8af 	bl	19834 <ocrypto_mod_p256_square>
   3c6d6:	466a      	mov	r2, sp
   3c6d8:	a908      	add	r1, sp, #32
   3c6da:	4620      	mov	r0, r4
   3c6dc:	f7dd f83e 	bl	1975c <ocrypto_mod_p256_add>
   3c6e0:	4622      	mov	r2, r4
   3c6e2:	4631      	mov	r1, r6
   3c6e4:	4630      	mov	r0, r6
   3c6e6:	f7dd f878 	bl	197da <ocrypto_mod_p256_sub>
   3c6ea:	466a      	mov	r2, sp
   3c6ec:	a908      	add	r1, sp, #32
   3c6ee:	4668      	mov	r0, sp
   3c6f0:	f7dd f873 	bl	197da <ocrypto_mod_p256_sub>
   3c6f4:	466a      	mov	r2, sp
   3c6f6:	4639      	mov	r1, r7
   3c6f8:	4638      	mov	r0, r7
   3c6fa:	f7dd f89c 	bl	19836 <ocrypto_mod_p256_mul>
   3c6fe:	4632      	mov	r2, r6
   3c700:	a908      	add	r1, sp, #32
   3c702:	4668      	mov	r0, sp
   3c704:	f7dd f869 	bl	197da <ocrypto_mod_p256_sub>
   3c708:	466a      	mov	r2, sp
   3c70a:	4629      	mov	r1, r5
   3c70c:	4628      	mov	r0, r5
   3c70e:	f7dd f892 	bl	19836 <ocrypto_mod_p256_mul>
   3c712:	463a      	mov	r2, r7
   3c714:	4629      	mov	r1, r5
   3c716:	4628      	mov	r0, r5
   3c718:	f7dd f85f 	bl	197da <ocrypto_mod_p256_sub>
   3c71c:	a910      	add	r1, sp, #64	; 0x40
   3c71e:	4668      	mov	r0, sp
   3c720:	f7dd f888 	bl	19834 <ocrypto_mod_p256_square>
   3c724:	4622      	mov	r2, r4
   3c726:	4669      	mov	r1, sp
   3c728:	4620      	mov	r0, r4
   3c72a:	f7dd f856 	bl	197da <ocrypto_mod_p256_sub>
   3c72e:	a908      	add	r1, sp, #32
   3c730:	4622      	mov	r2, r4
   3c732:	4608      	mov	r0, r1
   3c734:	f7dd f851 	bl	197da <ocrypto_mod_p256_sub>
   3c738:	a910      	add	r1, sp, #64	; 0x40
   3c73a:	aa08      	add	r2, sp, #32
   3c73c:	4608      	mov	r0, r1
   3c73e:	f7dd f87a 	bl	19836 <ocrypto_mod_p256_mul>
   3c742:	463a      	mov	r2, r7
   3c744:	a910      	add	r1, sp, #64	; 0x40
   3c746:	4638      	mov	r0, r7
   3c748:	f7dd f847 	bl	197da <ocrypto_mod_p256_sub>
   3c74c:	b019      	add	sp, #100	; 0x64
   3c74e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003c750 <p256_zaddu>:
   3c750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3c754:	460c      	mov	r4, r1
   3c756:	4605      	mov	r5, r0
   3c758:	4690      	mov	r8, r2
   3c75a:	b088      	sub	sp, #32
   3c75c:	4622      	mov	r2, r4
   3c75e:	4601      	mov	r1, r0
   3c760:	4668      	mov	r0, sp
   3c762:	f7dd f83a 	bl	197da <ocrypto_mod_p256_sub>
   3c766:	4669      	mov	r1, sp
   3c768:	4668      	mov	r0, sp
   3c76a:	f7dd f863 	bl	19834 <ocrypto_mod_p256_square>
   3c76e:	466a      	mov	r2, sp
   3c770:	4629      	mov	r1, r5
   3c772:	4628      	mov	r0, r5
   3c774:	f104 0620 	add.w	r6, r4, #32
   3c778:	f7dd f85d 	bl	19836 <ocrypto_mod_p256_mul>
   3c77c:	f105 0720 	add.w	r7, r5, #32
   3c780:	466a      	mov	r2, sp
   3c782:	4621      	mov	r1, r4
   3c784:	4668      	mov	r0, sp
   3c786:	f7dd f856 	bl	19836 <ocrypto_mod_p256_mul>
   3c78a:	4632      	mov	r2, r6
   3c78c:	4630      	mov	r0, r6
   3c78e:	4639      	mov	r1, r7
   3c790:	f7dd f823 	bl	197da <ocrypto_mod_p256_sub>
   3c794:	4631      	mov	r1, r6
   3c796:	4620      	mov	r0, r4
   3c798:	f7dd f84c 	bl	19834 <ocrypto_mod_p256_square>
   3c79c:	462a      	mov	r2, r5
   3c79e:	4621      	mov	r1, r4
   3c7a0:	4620      	mov	r0, r4
   3c7a2:	f7dd f81a 	bl	197da <ocrypto_mod_p256_sub>
   3c7a6:	466a      	mov	r2, sp
   3c7a8:	4621      	mov	r1, r4
   3c7aa:	4620      	mov	r0, r4
   3c7ac:	f7dd f815 	bl	197da <ocrypto_mod_p256_sub>
   3c7b0:	466a      	mov	r2, sp
   3c7b2:	4629      	mov	r1, r5
   3c7b4:	4640      	mov	r0, r8
   3c7b6:	f7dd f810 	bl	197da <ocrypto_mod_p256_sub>
   3c7ba:	4642      	mov	r2, r8
   3c7bc:	4639      	mov	r1, r7
   3c7be:	4638      	mov	r0, r7
   3c7c0:	f7dd f839 	bl	19836 <ocrypto_mod_p256_mul>
   3c7c4:	4622      	mov	r2, r4
   3c7c6:	4629      	mov	r1, r5
   3c7c8:	4668      	mov	r0, sp
   3c7ca:	f7dd f806 	bl	197da <ocrypto_mod_p256_sub>
   3c7ce:	466a      	mov	r2, sp
   3c7d0:	4631      	mov	r1, r6
   3c7d2:	4630      	mov	r0, r6
   3c7d4:	f7dd f82f 	bl	19836 <ocrypto_mod_p256_mul>
   3c7d8:	463a      	mov	r2, r7
   3c7da:	4631      	mov	r1, r6
   3c7dc:	4630      	mov	r0, r6
   3c7de:	f7dc fffc 	bl	197da <ocrypto_mod_p256_sub>
   3c7e2:	b008      	add	sp, #32
   3c7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003c7e8 <ocrypto_curve_p256_to64bytes>:
   3c7e8:	b538      	push	{r3, r4, r5, lr}
   3c7ea:	4604      	mov	r4, r0
   3c7ec:	460d      	mov	r5, r1
   3c7ee:	f7ff fdf9 	bl	3c3e4 <ocrypto_mod_p256_toBytes>
   3c7f2:	f105 0120 	add.w	r1, r5, #32
   3c7f6:	f104 0020 	add.w	r0, r4, #32
   3c7fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3c7fe:	f7ff bdf1 	b.w	3c3e4 <ocrypto_mod_p256_toBytes>
   3c802:	bf00      	nop

0003c804 <ocrypto_curve_p256_scalarmult>:
   3c804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3c808:	b0b8      	sub	sp, #224	; 0xe0
   3c80a:	468a      	mov	sl, r1
   3c80c:	4681      	mov	r9, r0
   3c80e:	4611      	mov	r1, r2
   3c810:	a810      	add	r0, sp, #64	; 0x40
   3c812:	4a51      	ldr	r2, [pc, #324]	; (3c958 <ocrypto_curve_p256_scalarmult+0x154>)
   3c814:	f7dc fc66 	bl	190e4 <ocrypto_bigint_sub256>
   3c818:	4950      	ldr	r1, [pc, #320]	; (3c95c <ocrypto_curve_p256_scalarmult+0x158>)
   3c81a:	4602      	mov	r2, r0
   3c81c:	a810      	add	r0, sp, #64	; 0x40
   3c81e:	f7dc fc81 	bl	19124 <ocrypto_bigint_cadd256>
   3c822:	4680      	mov	r8, r0
   3c824:	9f17      	ldr	r7, [sp, #92]	; 0x5c
   3c826:	494c      	ldr	r1, [pc, #304]	; (3c958 <ocrypto_curve_p256_scalarmult+0x154>)
   3c828:	ea08 77d7 	and.w	r7, r8, r7, lsr #31
   3c82c:	f1c7 0201 	rsb	r2, r7, #1
   3c830:	a810      	add	r0, sp, #64	; 0x40
   3c832:	f7dc fc77 	bl	19124 <ocrypto_bigint_cadd256>
   3c836:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   3c838:	4652      	mov	r2, sl
   3c83a:	43ed      	mvns	r5, r5
   3c83c:	a928      	add	r1, sp, #160	; 0xa0
   3c83e:	a818      	add	r0, sp, #96	; 0x60
   3c840:	f7ff fec4 	bl	3c5cc <p256_zdblu>
   3c844:	0fed      	lsrs	r5, r5, #31
   3c846:	a920      	add	r1, sp, #128	; 0x80
   3c848:	f1c5 0201 	rsb	r2, r5, #1
   3c84c:	4608      	mov	r0, r1
   3c84e:	f7ff fdad 	bl	3c3ac <ocrypto_mod_p256_cneg>
   3c852:	26fe      	movs	r6, #254	; 0xfe
   3c854:	f1c8 0801 	rsb	r8, r8, #1
   3c858:	466a      	mov	r2, sp
   3c85a:	a918      	add	r1, sp, #96	; 0x60
   3c85c:	a828      	add	r0, sp, #160	; 0xa0
   3c85e:	f7ff ff77 	bl	3c750 <p256_zaddu>
   3c862:	1173      	asrs	r3, r6, #5
   3c864:	aa38      	add	r2, sp, #224	; 0xe0
   3c866:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   3c86a:	f853 4ca0 	ldr.w	r4, [r3, #-160]
   3c86e:	f006 031f 	and.w	r3, r6, #31
   3c872:	40dc      	lsrs	r4, r3
   3c874:	f004 0401 	and.w	r4, r4, #1
   3c878:	4065      	eors	r5, r4
   3c87a:	462a      	mov	r2, r5
   3c87c:	a928      	add	r1, sp, #160	; 0xa0
   3c87e:	a818      	add	r0, sp, #96	; 0x60
   3c880:	f7dc fcbb 	bl	191fa <ocrypto_bigint_cswap256>
   3c884:	462a      	mov	r2, r5
   3c886:	a930      	add	r1, sp, #192	; 0xc0
   3c888:	a820      	add	r0, sp, #128	; 0x80
   3c88a:	f7dc fcb6 	bl	191fa <ocrypto_bigint_cswap256>
   3c88e:	3e01      	subs	r6, #1
   3c890:	a928      	add	r1, sp, #160	; 0xa0
   3c892:	a818      	add	r0, sp, #96	; 0x60
   3c894:	f7ff fef6 	bl	3c684 <p256_zaddc>
   3c898:	1c73      	adds	r3, r6, #1
   3c89a:	4625      	mov	r5, r4
   3c89c:	d1dc      	bne.n	3c858 <ocrypto_curve_p256_scalarmult+0x54>
   3c89e:	f1c4 0201 	rsb	r2, r4, #1
   3c8a2:	a808      	add	r0, sp, #32
   3c8a4:	a920      	add	r1, sp, #128	; 0x80
   3c8a6:	f7ff fd81 	bl	3c3ac <ocrypto_mod_p256_cneg>
   3c8aa:	407d      	eors	r5, r7
   3c8ac:	466a      	mov	r2, sp
   3c8ae:	a918      	add	r1, sp, #96	; 0x60
   3c8b0:	a828      	add	r0, sp, #160	; 0xa0
   3c8b2:	f7ff ff4d 	bl	3c750 <p256_zaddu>
   3c8b6:	a928      	add	r1, sp, #160	; 0xa0
   3c8b8:	462a      	mov	r2, r5
   3c8ba:	a818      	add	r0, sp, #96	; 0x60
   3c8bc:	f7dc fc9d 	bl	191fa <ocrypto_bigint_cswap256>
   3c8c0:	462a      	mov	r2, r5
   3c8c2:	a930      	add	r1, sp, #192	; 0xc0
   3c8c4:	a820      	add	r0, sp, #128	; 0x80
   3c8c6:	f7dc fc98 	bl	191fa <ocrypto_bigint_cswap256>
   3c8ca:	a908      	add	r1, sp, #32
   3c8cc:	466a      	mov	r2, sp
   3c8ce:	4608      	mov	r0, r1
   3c8d0:	f7dc ffb1 	bl	19836 <ocrypto_mod_p256_mul>
   3c8d4:	a908      	add	r1, sp, #32
   3c8d6:	4608      	mov	r0, r1
   3c8d8:	f7ff fd9e 	bl	3c418 <ocrypto_mod_p256_invert>
   3c8dc:	a908      	add	r1, sp, #32
   3c8de:	f109 0420 	add.w	r4, r9, #32
   3c8e2:	f10a 0220 	add.w	r2, sl, #32
   3c8e6:	4608      	mov	r0, r1
   3c8e8:	f7dc ffa5 	bl	19836 <ocrypto_mod_p256_mul>
   3c8ec:	a920      	add	r1, sp, #128	; 0x80
   3c8ee:	aa08      	add	r2, sp, #32
   3c8f0:	4620      	mov	r0, r4
   3c8f2:	f7dc ffa0 	bl	19836 <ocrypto_mod_p256_mul>
   3c8f6:	aa08      	add	r2, sp, #32
   3c8f8:	a918      	add	r1, sp, #96	; 0x60
   3c8fa:	4668      	mov	r0, sp
   3c8fc:	f7dc ff9b 	bl	19836 <ocrypto_mod_p256_mul>
   3c900:	4669      	mov	r1, sp
   3c902:	4668      	mov	r0, sp
   3c904:	f7dc ff96 	bl	19834 <ocrypto_mod_p256_square>
   3c908:	aa18      	add	r2, sp, #96	; 0x60
   3c90a:	4669      	mov	r1, sp
   3c90c:	a808      	add	r0, sp, #32
   3c90e:	f7dc ff92 	bl	19836 <ocrypto_mod_p256_mul>
   3c912:	4621      	mov	r1, r4
   3c914:	4668      	mov	r0, sp
   3c916:	f7dc ff8d 	bl	19834 <ocrypto_mod_p256_square>
   3c91a:	aa08      	add	r2, sp, #32
   3c91c:	4669      	mov	r1, sp
   3c91e:	4610      	mov	r0, r2
   3c920:	f7dc ff5b 	bl	197da <ocrypto_mod_p256_sub>
   3c924:	a908      	add	r1, sp, #32
   3c926:	4a0e      	ldr	r2, [pc, #56]	; (3c960 <ocrypto_curve_p256_scalarmult+0x15c>)
   3c928:	4668      	mov	r0, sp
   3c92a:	f7dc ff56 	bl	197da <ocrypto_mod_p256_sub>
   3c92e:	4620      	mov	r0, r4
   3c930:	2120      	movs	r1, #32
   3c932:	f7dc fef8 	bl	19726 <ocrypto_constant_time_is_zero>
   3c936:	a908      	add	r1, sp, #32
   3c938:	4243      	negs	r3, r0
   3c93a:	4602      	mov	r2, r0
   3c93c:	4668      	mov	r0, sp
   3c93e:	ea43 0808 	orr.w	r8, r3, r8
   3c942:	f7dc fc5a 	bl	191fa <ocrypto_bigint_cswap256>
   3c946:	4648      	mov	r0, r9
   3c948:	4669      	mov	r1, sp
   3c94a:	4a06      	ldr	r2, [pc, #24]	; (3c964 <ocrypto_curve_p256_scalarmult+0x160>)
   3c94c:	f7dc ff73 	bl	19836 <ocrypto_mod_p256_mul>
   3c950:	4640      	mov	r0, r8
   3c952:	b038      	add	sp, #224	; 0xe0
   3c954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3c958:	00044c94 	.word	0x00044c94
   3c95c:	00044c14 	.word	0x00044c14
   3c960:	00044c74 	.word	0x00044c74
   3c964:	00044c34 	.word	0x00044c34

0003c968 <ocrypto_curve_p256_scalarmult_base>:
   3c968:	460a      	mov	r2, r1
   3c96a:	4901      	ldr	r1, [pc, #4]	; (3c970 <ocrypto_curve_p256_scalarmult_base+0x8>)
   3c96c:	f7ff bf4a 	b.w	3c804 <ocrypto_curve_p256_scalarmult>
   3c970:	00044bd4 	.word	0x00044bd4

0003c974 <__assert_func>:
   3c974:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   3c976:	461c      	mov	r4, r3
   3c978:	4b09      	ldr	r3, [pc, #36]	; (3c9a0 <__assert_func+0x2c>)
   3c97a:	4605      	mov	r5, r0
   3c97c:	681b      	ldr	r3, [r3, #0]
   3c97e:	68d8      	ldr	r0, [r3, #12]
   3c980:	b152      	cbz	r2, 3c998 <__assert_func+0x24>
   3c982:	4b08      	ldr	r3, [pc, #32]	; (3c9a4 <__assert_func+0x30>)
   3c984:	9100      	str	r1, [sp, #0]
   3c986:	4908      	ldr	r1, [pc, #32]	; (3c9a8 <__assert_func+0x34>)
   3c988:	e9cd 3201 	strd	r3, r2, [sp, #4]
   3c98c:	462b      	mov	r3, r5
   3c98e:	4622      	mov	r2, r4
   3c990:	f000 f80e 	bl	3c9b0 <fiprintf>
   3c994:	f005 fa9a 	bl	41ecc <abort>
   3c998:	4b04      	ldr	r3, [pc, #16]	; (3c9ac <__assert_func+0x38>)
   3c99a:	461a      	mov	r2, r3
   3c99c:	e7f2      	b.n	3c984 <__assert_func+0x10>
   3c99e:	bf00      	nop
   3c9a0:	20031c90 	.word	0x20031c90
   3c9a4:	0004a740 	.word	0x0004a740
   3c9a8:	0004a74d 	.word	0x0004a74d
   3c9ac:	0004a184 	.word	0x0004a184

0003c9b0 <fiprintf>:
   3c9b0:	b40e      	push	{r1, r2, r3}
   3c9b2:	b503      	push	{r0, r1, lr}
   3c9b4:	ab03      	add	r3, sp, #12
   3c9b6:	4601      	mov	r1, r0
   3c9b8:	4805      	ldr	r0, [pc, #20]	; (3c9d0 <fiprintf+0x20>)
   3c9ba:	f853 2b04 	ldr.w	r2, [r3], #4
   3c9be:	6800      	ldr	r0, [r0, #0]
   3c9c0:	9301      	str	r3, [sp, #4]
   3c9c2:	f000 f8bf 	bl	3cb44 <_vfiprintf_r>
   3c9c6:	b002      	add	sp, #8
   3c9c8:	f85d eb04 	ldr.w	lr, [sp], #4
   3c9cc:	b003      	add	sp, #12
   3c9ce:	4770      	bx	lr
   3c9d0:	20031c90 	.word	0x20031c90

0003c9d4 <malloc>:
   3c9d4:	4b02      	ldr	r3, [pc, #8]	; (3c9e0 <malloc+0xc>)
   3c9d6:	4601      	mov	r1, r0
   3c9d8:	6818      	ldr	r0, [r3, #0]
   3c9da:	f000 b859 	b.w	3ca90 <_malloc_r>
   3c9de:	bf00      	nop
   3c9e0:	20031c90 	.word	0x20031c90

0003c9e4 <free>:
   3c9e4:	4b02      	ldr	r3, [pc, #8]	; (3c9f0 <free+0xc>)
   3c9e6:	4601      	mov	r1, r0
   3c9e8:	6818      	ldr	r0, [r3, #0]
   3c9ea:	f000 b803 	b.w	3c9f4 <_free_r>
   3c9ee:	bf00      	nop
   3c9f0:	20031c90 	.word	0x20031c90

0003c9f4 <_free_r>:
   3c9f4:	b538      	push	{r3, r4, r5, lr}
   3c9f6:	4605      	mov	r5, r0
   3c9f8:	2900      	cmp	r1, #0
   3c9fa:	d045      	beq.n	3ca88 <_free_r+0x94>
   3c9fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
   3ca00:	1f0c      	subs	r4, r1, #4
   3ca02:	2b00      	cmp	r3, #0
   3ca04:	bfb8      	it	lt
   3ca06:	18e4      	addlt	r4, r4, r3
   3ca08:	f001 fc08 	bl	3e21c <__malloc_lock>
   3ca0c:	4a1f      	ldr	r2, [pc, #124]	; (3ca8c <_free_r+0x98>)
   3ca0e:	6813      	ldr	r3, [r2, #0]
   3ca10:	4610      	mov	r0, r2
   3ca12:	b933      	cbnz	r3, 3ca22 <_free_r+0x2e>
   3ca14:	6063      	str	r3, [r4, #4]
   3ca16:	6014      	str	r4, [r2, #0]
   3ca18:	4628      	mov	r0, r5
   3ca1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3ca1e:	f001 bc03 	b.w	3e228 <__malloc_unlock>
   3ca22:	42a3      	cmp	r3, r4
   3ca24:	d90c      	bls.n	3ca40 <_free_r+0x4c>
   3ca26:	6821      	ldr	r1, [r4, #0]
   3ca28:	1862      	adds	r2, r4, r1
   3ca2a:	4293      	cmp	r3, r2
   3ca2c:	bf02      	ittt	eq
   3ca2e:	681a      	ldreq	r2, [r3, #0]
   3ca30:	685b      	ldreq	r3, [r3, #4]
   3ca32:	1852      	addeq	r2, r2, r1
   3ca34:	6063      	str	r3, [r4, #4]
   3ca36:	bf08      	it	eq
   3ca38:	6022      	streq	r2, [r4, #0]
   3ca3a:	6004      	str	r4, [r0, #0]
   3ca3c:	e7ec      	b.n	3ca18 <_free_r+0x24>
   3ca3e:	4613      	mov	r3, r2
   3ca40:	685a      	ldr	r2, [r3, #4]
   3ca42:	b10a      	cbz	r2, 3ca48 <_free_r+0x54>
   3ca44:	42a2      	cmp	r2, r4
   3ca46:	d9fa      	bls.n	3ca3e <_free_r+0x4a>
   3ca48:	6819      	ldr	r1, [r3, #0]
   3ca4a:	1858      	adds	r0, r3, r1
   3ca4c:	42a0      	cmp	r0, r4
   3ca4e:	d10b      	bne.n	3ca68 <_free_r+0x74>
   3ca50:	6820      	ldr	r0, [r4, #0]
   3ca52:	4401      	add	r1, r0
   3ca54:	1858      	adds	r0, r3, r1
   3ca56:	6019      	str	r1, [r3, #0]
   3ca58:	4282      	cmp	r2, r0
   3ca5a:	d1dd      	bne.n	3ca18 <_free_r+0x24>
   3ca5c:	6810      	ldr	r0, [r2, #0]
   3ca5e:	6852      	ldr	r2, [r2, #4]
   3ca60:	4401      	add	r1, r0
   3ca62:	605a      	str	r2, [r3, #4]
   3ca64:	6019      	str	r1, [r3, #0]
   3ca66:	e7d7      	b.n	3ca18 <_free_r+0x24>
   3ca68:	d902      	bls.n	3ca70 <_free_r+0x7c>
   3ca6a:	230c      	movs	r3, #12
   3ca6c:	602b      	str	r3, [r5, #0]
   3ca6e:	e7d3      	b.n	3ca18 <_free_r+0x24>
   3ca70:	6820      	ldr	r0, [r4, #0]
   3ca72:	1821      	adds	r1, r4, r0
   3ca74:	428a      	cmp	r2, r1
   3ca76:	bf02      	ittt	eq
   3ca78:	6811      	ldreq	r1, [r2, #0]
   3ca7a:	6852      	ldreq	r2, [r2, #4]
   3ca7c:	1809      	addeq	r1, r1, r0
   3ca7e:	6062      	str	r2, [r4, #4]
   3ca80:	bf08      	it	eq
   3ca82:	6021      	streq	r1, [r4, #0]
   3ca84:	605c      	str	r4, [r3, #4]
   3ca86:	e7c7      	b.n	3ca18 <_free_r+0x24>
   3ca88:	bd38      	pop	{r3, r4, r5, pc}
   3ca8a:	bf00      	nop
   3ca8c:	2002a2f8 	.word	0x2002a2f8

0003ca90 <_malloc_r>:
   3ca90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ca92:	1ccd      	adds	r5, r1, #3
   3ca94:	4606      	mov	r6, r0
   3ca96:	f025 0503 	bic.w	r5, r5, #3
   3ca9a:	3508      	adds	r5, #8
   3ca9c:	2d0c      	cmp	r5, #12
   3ca9e:	bf38      	it	cc
   3caa0:	250c      	movcc	r5, #12
   3caa2:	2d00      	cmp	r5, #0
   3caa4:	db01      	blt.n	3caaa <_malloc_r+0x1a>
   3caa6:	42a9      	cmp	r1, r5
   3caa8:	d903      	bls.n	3cab2 <_malloc_r+0x22>
   3caaa:	230c      	movs	r3, #12
   3caac:	6033      	str	r3, [r6, #0]
   3caae:	2000      	movs	r0, #0
   3cab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3cab2:	f001 fbb3 	bl	3e21c <__malloc_lock>
   3cab6:	4921      	ldr	r1, [pc, #132]	; (3cb3c <_malloc_r+0xac>)
   3cab8:	680a      	ldr	r2, [r1, #0]
   3caba:	4614      	mov	r4, r2
   3cabc:	b99c      	cbnz	r4, 3cae6 <_malloc_r+0x56>
   3cabe:	4f20      	ldr	r7, [pc, #128]	; (3cb40 <_malloc_r+0xb0>)
   3cac0:	683b      	ldr	r3, [r7, #0]
   3cac2:	b923      	cbnz	r3, 3cace <_malloc_r+0x3e>
   3cac4:	4621      	mov	r1, r4
   3cac6:	4630      	mov	r0, r6
   3cac8:	f000 fd02 	bl	3d4d0 <_sbrk_r>
   3cacc:	6038      	str	r0, [r7, #0]
   3cace:	4629      	mov	r1, r5
   3cad0:	4630      	mov	r0, r6
   3cad2:	f000 fcfd 	bl	3d4d0 <_sbrk_r>
   3cad6:	1c43      	adds	r3, r0, #1
   3cad8:	d123      	bne.n	3cb22 <_malloc_r+0x92>
   3cada:	230c      	movs	r3, #12
   3cadc:	4630      	mov	r0, r6
   3cade:	6033      	str	r3, [r6, #0]
   3cae0:	f001 fba2 	bl	3e228 <__malloc_unlock>
   3cae4:	e7e3      	b.n	3caae <_malloc_r+0x1e>
   3cae6:	6823      	ldr	r3, [r4, #0]
   3cae8:	1b5b      	subs	r3, r3, r5
   3caea:	d417      	bmi.n	3cb1c <_malloc_r+0x8c>
   3caec:	2b0b      	cmp	r3, #11
   3caee:	d903      	bls.n	3caf8 <_malloc_r+0x68>
   3caf0:	6023      	str	r3, [r4, #0]
   3caf2:	441c      	add	r4, r3
   3caf4:	6025      	str	r5, [r4, #0]
   3caf6:	e004      	b.n	3cb02 <_malloc_r+0x72>
   3caf8:	6863      	ldr	r3, [r4, #4]
   3cafa:	42a2      	cmp	r2, r4
   3cafc:	bf0c      	ite	eq
   3cafe:	600b      	streq	r3, [r1, #0]
   3cb00:	6053      	strne	r3, [r2, #4]
   3cb02:	4630      	mov	r0, r6
   3cb04:	f001 fb90 	bl	3e228 <__malloc_unlock>
   3cb08:	f104 000b 	add.w	r0, r4, #11
   3cb0c:	1d23      	adds	r3, r4, #4
   3cb0e:	f020 0007 	bic.w	r0, r0, #7
   3cb12:	1ac2      	subs	r2, r0, r3
   3cb14:	d0cc      	beq.n	3cab0 <_malloc_r+0x20>
   3cb16:	1a1b      	subs	r3, r3, r0
   3cb18:	50a3      	str	r3, [r4, r2]
   3cb1a:	e7c9      	b.n	3cab0 <_malloc_r+0x20>
   3cb1c:	4622      	mov	r2, r4
   3cb1e:	6864      	ldr	r4, [r4, #4]
   3cb20:	e7cc      	b.n	3cabc <_malloc_r+0x2c>
   3cb22:	1cc4      	adds	r4, r0, #3
   3cb24:	f024 0403 	bic.w	r4, r4, #3
   3cb28:	42a0      	cmp	r0, r4
   3cb2a:	d0e3      	beq.n	3caf4 <_malloc_r+0x64>
   3cb2c:	1a21      	subs	r1, r4, r0
   3cb2e:	4630      	mov	r0, r6
   3cb30:	f000 fcce 	bl	3d4d0 <_sbrk_r>
   3cb34:	3001      	adds	r0, #1
   3cb36:	d1dd      	bne.n	3caf4 <_malloc_r+0x64>
   3cb38:	e7cf      	b.n	3cada <_malloc_r+0x4a>
   3cb3a:	bf00      	nop
   3cb3c:	2002a2f8 	.word	0x2002a2f8
   3cb40:	2002a2fc 	.word	0x2002a2fc

0003cb44 <_vfiprintf_r>:
   3cb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cb48:	460d      	mov	r5, r1
   3cb4a:	b09d      	sub	sp, #116	; 0x74
   3cb4c:	4614      	mov	r4, r2
   3cb4e:	461e      	mov	r6, r3
   3cb50:	4607      	mov	r7, r0
   3cb52:	b118      	cbz	r0, 3cb5c <_vfiprintf_r+0x18>
   3cb54:	6983      	ldr	r3, [r0, #24]
   3cb56:	b90b      	cbnz	r3, 3cb5c <_vfiprintf_r+0x18>
   3cb58:	f001 f86a 	bl	3dc30 <__sinit>
   3cb5c:	4b85      	ldr	r3, [pc, #532]	; (3cd74 <_vfiprintf_r+0x230>)
   3cb5e:	429d      	cmp	r5, r3
   3cb60:	d11b      	bne.n	3cb9a <_vfiprintf_r+0x56>
   3cb62:	687d      	ldr	r5, [r7, #4]
   3cb64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3cb66:	07d9      	lsls	r1, r3, #31
   3cb68:	d405      	bmi.n	3cb76 <_vfiprintf_r+0x32>
   3cb6a:	89ab      	ldrh	r3, [r5, #12]
   3cb6c:	059a      	lsls	r2, r3, #22
   3cb6e:	d402      	bmi.n	3cb76 <_vfiprintf_r+0x32>
   3cb70:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3cb72:	f005 fb7a 	bl	4226a <__retarget_lock_acquire_recursive>
   3cb76:	89ab      	ldrh	r3, [r5, #12]
   3cb78:	071b      	lsls	r3, r3, #28
   3cb7a:	d501      	bpl.n	3cb80 <_vfiprintf_r+0x3c>
   3cb7c:	692b      	ldr	r3, [r5, #16]
   3cb7e:	b9eb      	cbnz	r3, 3cbbc <_vfiprintf_r+0x78>
   3cb80:	4629      	mov	r1, r5
   3cb82:	4638      	mov	r0, r7
   3cb84:	f000 feb0 	bl	3d8e8 <__swsetup_r>
   3cb88:	b1c0      	cbz	r0, 3cbbc <_vfiprintf_r+0x78>
   3cb8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3cb8c:	07d8      	lsls	r0, r3, #31
   3cb8e:	d50e      	bpl.n	3cbae <_vfiprintf_r+0x6a>
   3cb90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3cb94:	b01d      	add	sp, #116	; 0x74
   3cb96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cb9a:	4b77      	ldr	r3, [pc, #476]	; (3cd78 <_vfiprintf_r+0x234>)
   3cb9c:	429d      	cmp	r5, r3
   3cb9e:	d101      	bne.n	3cba4 <_vfiprintf_r+0x60>
   3cba0:	68bd      	ldr	r5, [r7, #8]
   3cba2:	e7df      	b.n	3cb64 <_vfiprintf_r+0x20>
   3cba4:	4b75      	ldr	r3, [pc, #468]	; (3cd7c <_vfiprintf_r+0x238>)
   3cba6:	429d      	cmp	r5, r3
   3cba8:	bf08      	it	eq
   3cbaa:	68fd      	ldreq	r5, [r7, #12]
   3cbac:	e7da      	b.n	3cb64 <_vfiprintf_r+0x20>
   3cbae:	89ab      	ldrh	r3, [r5, #12]
   3cbb0:	0599      	lsls	r1, r3, #22
   3cbb2:	d4ed      	bmi.n	3cb90 <_vfiprintf_r+0x4c>
   3cbb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3cbb6:	f005 fb59 	bl	4226c <__retarget_lock_release_recursive>
   3cbba:	e7e9      	b.n	3cb90 <_vfiprintf_r+0x4c>
   3cbbc:	2300      	movs	r3, #0
   3cbbe:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 3cd80 <_vfiprintf_r+0x23c>
   3cbc2:	f04f 0a01 	mov.w	sl, #1
   3cbc6:	9603      	str	r6, [sp, #12]
   3cbc8:	9309      	str	r3, [sp, #36]	; 0x24
   3cbca:	2320      	movs	r3, #32
   3cbcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   3cbd0:	2330      	movs	r3, #48	; 0x30
   3cbd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   3cbd6:	4623      	mov	r3, r4
   3cbd8:	461e      	mov	r6, r3
   3cbda:	f813 2b01 	ldrb.w	r2, [r3], #1
   3cbde:	b10a      	cbz	r2, 3cbe4 <_vfiprintf_r+0xa0>
   3cbe0:	2a25      	cmp	r2, #37	; 0x25
   3cbe2:	d1f9      	bne.n	3cbd8 <_vfiprintf_r+0x94>
   3cbe4:	ebb6 0b04 	subs.w	fp, r6, r4
   3cbe8:	d00b      	beq.n	3cc02 <_vfiprintf_r+0xbe>
   3cbea:	465b      	mov	r3, fp
   3cbec:	4622      	mov	r2, r4
   3cbee:	4629      	mov	r1, r5
   3cbf0:	4638      	mov	r0, r7
   3cbf2:	f004 ff1d 	bl	41a30 <__sfputs_r>
   3cbf6:	3001      	adds	r0, #1
   3cbf8:	f000 80a3 	beq.w	3cd42 <_vfiprintf_r+0x1fe>
   3cbfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3cbfe:	445b      	add	r3, fp
   3cc00:	9309      	str	r3, [sp, #36]	; 0x24
   3cc02:	7833      	ldrb	r3, [r6, #0]
   3cc04:	2b00      	cmp	r3, #0
   3cc06:	f000 809c 	beq.w	3cd42 <_vfiprintf_r+0x1fe>
   3cc0a:	2300      	movs	r3, #0
   3cc0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3cc10:	3601      	adds	r6, #1
   3cc12:	9304      	str	r3, [sp, #16]
   3cc14:	9307      	str	r3, [sp, #28]
   3cc16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   3cc1a:	931a      	str	r3, [sp, #104]	; 0x68
   3cc1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
   3cc20:	4634      	mov	r4, r6
   3cc22:	2205      	movs	r2, #5
   3cc24:	4856      	ldr	r0, [pc, #344]	; (3cd80 <_vfiprintf_r+0x23c>)
   3cc26:	f814 1b01 	ldrb.w	r1, [r4], #1
   3cc2a:	f004 fea6 	bl	4197a <memchr>
   3cc2e:	9b04      	ldr	r3, [sp, #16]
   3cc30:	b9c0      	cbnz	r0, 3cc64 <_vfiprintf_r+0x120>
   3cc32:	06da      	lsls	r2, r3, #27
   3cc34:	bf44      	itt	mi
   3cc36:	2220      	movmi	r2, #32
   3cc38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   3cc3c:	0718      	lsls	r0, r3, #28
   3cc3e:	bf44      	itt	mi
   3cc40:	222b      	movmi	r2, #43	; 0x2b
   3cc42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   3cc46:	7832      	ldrb	r2, [r6, #0]
   3cc48:	2a2a      	cmp	r2, #42	; 0x2a
   3cc4a:	d013      	beq.n	3cc74 <_vfiprintf_r+0x130>
   3cc4c:	4634      	mov	r4, r6
   3cc4e:	9a07      	ldr	r2, [sp, #28]
   3cc50:	2000      	movs	r0, #0
   3cc52:	260a      	movs	r6, #10
   3cc54:	4621      	mov	r1, r4
   3cc56:	f811 3b01 	ldrb.w	r3, [r1], #1
   3cc5a:	3b30      	subs	r3, #48	; 0x30
   3cc5c:	2b09      	cmp	r3, #9
   3cc5e:	d94b      	bls.n	3ccf8 <_vfiprintf_r+0x1b4>
   3cc60:	b970      	cbnz	r0, 3cc80 <_vfiprintf_r+0x13c>
   3cc62:	e014      	b.n	3cc8e <_vfiprintf_r+0x14a>
   3cc64:	eba0 0009 	sub.w	r0, r0, r9
   3cc68:	4626      	mov	r6, r4
   3cc6a:	fa0a f000 	lsl.w	r0, sl, r0
   3cc6e:	4318      	orrs	r0, r3
   3cc70:	9004      	str	r0, [sp, #16]
   3cc72:	e7d5      	b.n	3cc20 <_vfiprintf_r+0xdc>
   3cc74:	9a03      	ldr	r2, [sp, #12]
   3cc76:	1d11      	adds	r1, r2, #4
   3cc78:	6812      	ldr	r2, [r2, #0]
   3cc7a:	2a00      	cmp	r2, #0
   3cc7c:	9103      	str	r1, [sp, #12]
   3cc7e:	db01      	blt.n	3cc84 <_vfiprintf_r+0x140>
   3cc80:	9207      	str	r2, [sp, #28]
   3cc82:	e004      	b.n	3cc8e <_vfiprintf_r+0x14a>
   3cc84:	4252      	negs	r2, r2
   3cc86:	f043 0302 	orr.w	r3, r3, #2
   3cc8a:	9207      	str	r2, [sp, #28]
   3cc8c:	9304      	str	r3, [sp, #16]
   3cc8e:	7823      	ldrb	r3, [r4, #0]
   3cc90:	2b2e      	cmp	r3, #46	; 0x2e
   3cc92:	d10c      	bne.n	3ccae <_vfiprintf_r+0x16a>
   3cc94:	7863      	ldrb	r3, [r4, #1]
   3cc96:	2b2a      	cmp	r3, #42	; 0x2a
   3cc98:	d133      	bne.n	3cd02 <_vfiprintf_r+0x1be>
   3cc9a:	9b03      	ldr	r3, [sp, #12]
   3cc9c:	3402      	adds	r4, #2
   3cc9e:	1d1a      	adds	r2, r3, #4
   3cca0:	681b      	ldr	r3, [r3, #0]
   3cca2:	2b00      	cmp	r3, #0
   3cca4:	9203      	str	r2, [sp, #12]
   3cca6:	bfb8      	it	lt
   3cca8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   3ccac:	9305      	str	r3, [sp, #20]
   3ccae:	4e35      	ldr	r6, [pc, #212]	; (3cd84 <_vfiprintf_r+0x240>)
   3ccb0:	2203      	movs	r2, #3
   3ccb2:	7821      	ldrb	r1, [r4, #0]
   3ccb4:	4630      	mov	r0, r6
   3ccb6:	f004 fe60 	bl	4197a <memchr>
   3ccba:	b138      	cbz	r0, 3cccc <_vfiprintf_r+0x188>
   3ccbc:	2340      	movs	r3, #64	; 0x40
   3ccbe:	1b80      	subs	r0, r0, r6
   3ccc0:	3401      	adds	r4, #1
   3ccc2:	fa03 f000 	lsl.w	r0, r3, r0
   3ccc6:	9b04      	ldr	r3, [sp, #16]
   3ccc8:	4303      	orrs	r3, r0
   3ccca:	9304      	str	r3, [sp, #16]
   3cccc:	f814 1b01 	ldrb.w	r1, [r4], #1
   3ccd0:	2206      	movs	r2, #6
   3ccd2:	482d      	ldr	r0, [pc, #180]	; (3cd88 <_vfiprintf_r+0x244>)
   3ccd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   3ccd8:	f004 fe4f 	bl	4197a <memchr>
   3ccdc:	2800      	cmp	r0, #0
   3ccde:	d03f      	beq.n	3cd60 <_vfiprintf_r+0x21c>
   3cce0:	4b2a      	ldr	r3, [pc, #168]	; (3cd8c <_vfiprintf_r+0x248>)
   3cce2:	bb13      	cbnz	r3, 3cd2a <_vfiprintf_r+0x1e6>
   3cce4:	9b03      	ldr	r3, [sp, #12]
   3cce6:	3307      	adds	r3, #7
   3cce8:	f023 0307 	bic.w	r3, r3, #7
   3ccec:	3308      	adds	r3, #8
   3ccee:	9303      	str	r3, [sp, #12]
   3ccf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3ccf2:	4443      	add	r3, r8
   3ccf4:	9309      	str	r3, [sp, #36]	; 0x24
   3ccf6:	e76e      	b.n	3cbd6 <_vfiprintf_r+0x92>
   3ccf8:	fb06 3202 	mla	r2, r6, r2, r3
   3ccfc:	2001      	movs	r0, #1
   3ccfe:	460c      	mov	r4, r1
   3cd00:	e7a8      	b.n	3cc54 <_vfiprintf_r+0x110>
   3cd02:	2300      	movs	r3, #0
   3cd04:	3401      	adds	r4, #1
   3cd06:	260a      	movs	r6, #10
   3cd08:	4619      	mov	r1, r3
   3cd0a:	9305      	str	r3, [sp, #20]
   3cd0c:	4620      	mov	r0, r4
   3cd0e:	f810 2b01 	ldrb.w	r2, [r0], #1
   3cd12:	3a30      	subs	r2, #48	; 0x30
   3cd14:	2a09      	cmp	r2, #9
   3cd16:	d903      	bls.n	3cd20 <_vfiprintf_r+0x1dc>
   3cd18:	2b00      	cmp	r3, #0
   3cd1a:	d0c8      	beq.n	3ccae <_vfiprintf_r+0x16a>
   3cd1c:	9105      	str	r1, [sp, #20]
   3cd1e:	e7c6      	b.n	3ccae <_vfiprintf_r+0x16a>
   3cd20:	fb06 2101 	mla	r1, r6, r1, r2
   3cd24:	2301      	movs	r3, #1
   3cd26:	4604      	mov	r4, r0
   3cd28:	e7f0      	b.n	3cd0c <_vfiprintf_r+0x1c8>
   3cd2a:	ab03      	add	r3, sp, #12
   3cd2c:	462a      	mov	r2, r5
   3cd2e:	a904      	add	r1, sp, #16
   3cd30:	4638      	mov	r0, r7
   3cd32:	9300      	str	r3, [sp, #0]
   3cd34:	4b16      	ldr	r3, [pc, #88]	; (3cd90 <_vfiprintf_r+0x24c>)
   3cd36:	f000 f82d 	bl	3cd94 <_printf_float>
   3cd3a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   3cd3e:	4680      	mov	r8, r0
   3cd40:	d1d6      	bne.n	3ccf0 <_vfiprintf_r+0x1ac>
   3cd42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3cd44:	07d9      	lsls	r1, r3, #31
   3cd46:	d405      	bmi.n	3cd54 <_vfiprintf_r+0x210>
   3cd48:	89ab      	ldrh	r3, [r5, #12]
   3cd4a:	059a      	lsls	r2, r3, #22
   3cd4c:	d402      	bmi.n	3cd54 <_vfiprintf_r+0x210>
   3cd4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3cd50:	f005 fa8c 	bl	4226c <__retarget_lock_release_recursive>
   3cd54:	89ab      	ldrh	r3, [r5, #12]
   3cd56:	065b      	lsls	r3, r3, #25
   3cd58:	f53f af1a 	bmi.w	3cb90 <_vfiprintf_r+0x4c>
   3cd5c:	9809      	ldr	r0, [sp, #36]	; 0x24
   3cd5e:	e719      	b.n	3cb94 <_vfiprintf_r+0x50>
   3cd60:	ab03      	add	r3, sp, #12
   3cd62:	462a      	mov	r2, r5
   3cd64:	a904      	add	r1, sp, #16
   3cd66:	4638      	mov	r0, r7
   3cd68:	9300      	str	r3, [sp, #0]
   3cd6a:	4b09      	ldr	r3, [pc, #36]	; (3cd90 <_vfiprintf_r+0x24c>)
   3cd6c:	f000 fa3c 	bl	3d1e8 <_printf_i>
   3cd70:	e7e3      	b.n	3cd3a <_vfiprintf_r+0x1f6>
   3cd72:	bf00      	nop
   3cd74:	00044d00 	.word	0x00044d00
   3cd78:	00044d20 	.word	0x00044d20
   3cd7c:	00044ce0 	.word	0x00044ce0
   3cd80:	0004a87d 	.word	0x0004a87d
   3cd84:	0004a883 	.word	0x0004a883
   3cd88:	0004a887 	.word	0x0004a887
   3cd8c:	0003cd95 	.word	0x0003cd95
   3cd90:	00041a31 	.word	0x00041a31

0003cd94 <_printf_float>:
   3cd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cd98:	b08d      	sub	sp, #52	; 0x34
   3cd9a:	460c      	mov	r4, r1
   3cd9c:	4616      	mov	r6, r2
   3cd9e:	461f      	mov	r7, r3
   3cda0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   3cda4:	4605      	mov	r5, r0
   3cda6:	f001 f9e3 	bl	3e170 <_localeconv_r>
   3cdaa:	6803      	ldr	r3, [r0, #0]
   3cdac:	4618      	mov	r0, r3
   3cdae:	9306      	str	r3, [sp, #24]
   3cdb0:	f7dd f898 	bl	19ee4 <strlen>
   3cdb4:	2300      	movs	r3, #0
   3cdb6:	9007      	str	r0, [sp, #28]
   3cdb8:	930a      	str	r3, [sp, #40]	; 0x28
   3cdba:	f8d8 3000 	ldr.w	r3, [r8]
   3cdbe:	f894 a018 	ldrb.w	sl, [r4, #24]
   3cdc2:	3307      	adds	r3, #7
   3cdc4:	f8d4 b000 	ldr.w	fp, [r4]
   3cdc8:	f023 0307 	bic.w	r3, r3, #7
   3cdcc:	f103 0208 	add.w	r2, r3, #8
   3cdd0:	f8c8 2000 	str.w	r2, [r8]
   3cdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   3cdd8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   3cddc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
   3cde0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3cde4:	ed8d 7b04 	vstr	d7, [sp, #16]
   3cde8:	e9dd 8304 	ldrd	r8, r3, [sp, #16]
   3cdec:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
   3cdf0:	4640      	mov	r0, r8
   3cdf2:	4ba6      	ldr	r3, [pc, #664]	; (3d08c <_printf_float+0x2f8>)
   3cdf4:	4649      	mov	r1, r9
   3cdf6:	f7dd f81f 	bl	19e38 <__aeabi_dcmpun>
   3cdfa:	bb70      	cbnz	r0, 3ce5a <_printf_float+0xc6>
   3cdfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3ce00:	4ba2      	ldr	r3, [pc, #648]	; (3d08c <_printf_float+0x2f8>)
   3ce02:	4640      	mov	r0, r8
   3ce04:	4649      	mov	r1, r9
   3ce06:	f7db ff43 	bl	18c90 <__aeabi_dcmple>
   3ce0a:	bb30      	cbnz	r0, 3ce5a <_printf_float+0xc6>
   3ce0c:	2200      	movs	r2, #0
   3ce0e:	2300      	movs	r3, #0
   3ce10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   3ce14:	f7db ff32 	bl	18c7c <__aeabi_dcmplt>
   3ce18:	b110      	cbz	r0, 3ce20 <_printf_float+0x8c>
   3ce1a:	232d      	movs	r3, #45	; 0x2d
   3ce1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3ce20:	4a9b      	ldr	r2, [pc, #620]	; (3d090 <_printf_float+0x2fc>)
   3ce22:	4b9c      	ldr	r3, [pc, #624]	; (3d094 <_printf_float+0x300>)
   3ce24:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   3ce28:	bf94      	ite	ls
   3ce2a:	4690      	movls	r8, r2
   3ce2c:	4698      	movhi	r8, r3
   3ce2e:	f04f 0900 	mov.w	r9, #0
   3ce32:	2303      	movs	r3, #3
   3ce34:	f02b 0204 	bic.w	r2, fp, #4
   3ce38:	6123      	str	r3, [r4, #16]
   3ce3a:	6022      	str	r2, [r4, #0]
   3ce3c:	9700      	str	r7, [sp, #0]
   3ce3e:	4633      	mov	r3, r6
   3ce40:	aa0b      	add	r2, sp, #44	; 0x2c
   3ce42:	4621      	mov	r1, r4
   3ce44:	4628      	mov	r0, r5
   3ce46:	f004 fe95 	bl	41b74 <_printf_common>
   3ce4a:	3001      	adds	r0, #1
   3ce4c:	f040 808c 	bne.w	3cf68 <_printf_float+0x1d4>
   3ce50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3ce54:	b00d      	add	sp, #52	; 0x34
   3ce56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ce5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   3ce5e:	4610      	mov	r0, r2
   3ce60:	4619      	mov	r1, r3
   3ce62:	f7dc ffe9 	bl	19e38 <__aeabi_dcmpun>
   3ce66:	b140      	cbz	r0, 3ce7a <_printf_float+0xe6>
   3ce68:	9b05      	ldr	r3, [sp, #20]
   3ce6a:	4a8b      	ldr	r2, [pc, #556]	; (3d098 <_printf_float+0x304>)
   3ce6c:	2b00      	cmp	r3, #0
   3ce6e:	bfbc      	itt	lt
   3ce70:	232d      	movlt	r3, #45	; 0x2d
   3ce72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   3ce76:	4b89      	ldr	r3, [pc, #548]	; (3d09c <_printf_float+0x308>)
   3ce78:	e7d4      	b.n	3ce24 <_printf_float+0x90>
   3ce7a:	6863      	ldr	r3, [r4, #4]
   3ce7c:	f00a 09df 	and.w	r9, sl, #223	; 0xdf
   3ce80:	1c5a      	adds	r2, r3, #1
   3ce82:	d13e      	bne.n	3cf02 <_printf_float+0x16e>
   3ce84:	2306      	movs	r3, #6
   3ce86:	6063      	str	r3, [r4, #4]
   3ce88:	2300      	movs	r3, #0
   3ce8a:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
   3ce8e:	6861      	ldr	r1, [r4, #4]
   3ce90:	4628      	mov	r0, r5
   3ce92:	9303      	str	r3, [sp, #12]
   3ce94:	ab0a      	add	r3, sp, #40	; 0x28
   3ce96:	6022      	str	r2, [r4, #0]
   3ce98:	e9cd a301 	strd	sl, r3, [sp, #4]
   3ce9c:	ab09      	add	r3, sp, #36	; 0x24
   3ce9e:	ed9d 0b04 	vldr	d0, [sp, #16]
   3cea2:	9300      	str	r3, [sp, #0]
   3cea4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   3cea8:	f004 fdd4 	bl	41a54 <__cvt>
   3ceac:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   3ceb0:	4680      	mov	r8, r0
   3ceb2:	9909      	ldr	r1, [sp, #36]	; 0x24
   3ceb4:	d108      	bne.n	3cec8 <_printf_float+0x134>
   3ceb6:	1cc8      	adds	r0, r1, #3
   3ceb8:	db02      	blt.n	3cec0 <_printf_float+0x12c>
   3ceba:	6863      	ldr	r3, [r4, #4]
   3cebc:	4299      	cmp	r1, r3
   3cebe:	dd41      	ble.n	3cf44 <_printf_float+0x1b0>
   3cec0:	f1aa 0a02 	sub.w	sl, sl, #2
   3cec4:	fa5f fa8a 	uxtb.w	sl, sl
   3cec8:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   3cecc:	d820      	bhi.n	3cf10 <_printf_float+0x17c>
   3cece:	3901      	subs	r1, #1
   3ced0:	4652      	mov	r2, sl
   3ced2:	f104 0050 	add.w	r0, r4, #80	; 0x50
   3ced6:	9109      	str	r1, [sp, #36]	; 0x24
   3ced8:	f004 fe19 	bl	41b0e <__exponent>
   3cedc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3cede:	4681      	mov	r9, r0
   3cee0:	1813      	adds	r3, r2, r0
   3cee2:	2a01      	cmp	r2, #1
   3cee4:	6123      	str	r3, [r4, #16]
   3cee6:	dc02      	bgt.n	3ceee <_printf_float+0x15a>
   3cee8:	6822      	ldr	r2, [r4, #0]
   3ceea:	07d2      	lsls	r2, r2, #31
   3ceec:	d501      	bpl.n	3cef2 <_printf_float+0x15e>
   3ceee:	3301      	adds	r3, #1
   3cef0:	6123      	str	r3, [r4, #16]
   3cef2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   3cef6:	2b00      	cmp	r3, #0
   3cef8:	d0a0      	beq.n	3ce3c <_printf_float+0xa8>
   3cefa:	232d      	movs	r3, #45	; 0x2d
   3cefc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3cf00:	e79c      	b.n	3ce3c <_printf_float+0xa8>
   3cf02:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   3cf06:	d1bf      	bne.n	3ce88 <_printf_float+0xf4>
   3cf08:	2b00      	cmp	r3, #0
   3cf0a:	d1bd      	bne.n	3ce88 <_printf_float+0xf4>
   3cf0c:	2301      	movs	r3, #1
   3cf0e:	e7ba      	b.n	3ce86 <_printf_float+0xf2>
   3cf10:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   3cf14:	d118      	bne.n	3cf48 <_printf_float+0x1b4>
   3cf16:	2900      	cmp	r1, #0
   3cf18:	6863      	ldr	r3, [r4, #4]
   3cf1a:	dd0b      	ble.n	3cf34 <_printf_float+0x1a0>
   3cf1c:	6121      	str	r1, [r4, #16]
   3cf1e:	b913      	cbnz	r3, 3cf26 <_printf_float+0x192>
   3cf20:	6822      	ldr	r2, [r4, #0]
   3cf22:	07d0      	lsls	r0, r2, #31
   3cf24:	d502      	bpl.n	3cf2c <_printf_float+0x198>
   3cf26:	3301      	adds	r3, #1
   3cf28:	440b      	add	r3, r1
   3cf2a:	6123      	str	r3, [r4, #16]
   3cf2c:	65a1      	str	r1, [r4, #88]	; 0x58
   3cf2e:	f04f 0900 	mov.w	r9, #0
   3cf32:	e7de      	b.n	3cef2 <_printf_float+0x15e>
   3cf34:	b913      	cbnz	r3, 3cf3c <_printf_float+0x1a8>
   3cf36:	6822      	ldr	r2, [r4, #0]
   3cf38:	07d2      	lsls	r2, r2, #31
   3cf3a:	d501      	bpl.n	3cf40 <_printf_float+0x1ac>
   3cf3c:	3302      	adds	r3, #2
   3cf3e:	e7f4      	b.n	3cf2a <_printf_float+0x196>
   3cf40:	2301      	movs	r3, #1
   3cf42:	e7f2      	b.n	3cf2a <_printf_float+0x196>
   3cf44:	f04f 0a67 	mov.w	sl, #103	; 0x67
   3cf48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3cf4a:	4299      	cmp	r1, r3
   3cf4c:	db05      	blt.n	3cf5a <_printf_float+0x1c6>
   3cf4e:	6823      	ldr	r3, [r4, #0]
   3cf50:	6121      	str	r1, [r4, #16]
   3cf52:	07d8      	lsls	r0, r3, #31
   3cf54:	d5ea      	bpl.n	3cf2c <_printf_float+0x198>
   3cf56:	1c4b      	adds	r3, r1, #1
   3cf58:	e7e7      	b.n	3cf2a <_printf_float+0x196>
   3cf5a:	2900      	cmp	r1, #0
   3cf5c:	bfd4      	ite	le
   3cf5e:	f1c1 0202 	rsble	r2, r1, #2
   3cf62:	2201      	movgt	r2, #1
   3cf64:	4413      	add	r3, r2
   3cf66:	e7e0      	b.n	3cf2a <_printf_float+0x196>
   3cf68:	6823      	ldr	r3, [r4, #0]
   3cf6a:	055a      	lsls	r2, r3, #21
   3cf6c:	d407      	bmi.n	3cf7e <_printf_float+0x1ea>
   3cf6e:	6923      	ldr	r3, [r4, #16]
   3cf70:	4642      	mov	r2, r8
   3cf72:	4631      	mov	r1, r6
   3cf74:	4628      	mov	r0, r5
   3cf76:	47b8      	blx	r7
   3cf78:	3001      	adds	r0, #1
   3cf7a:	d12b      	bne.n	3cfd4 <_printf_float+0x240>
   3cf7c:	e768      	b.n	3ce50 <_printf_float+0xbc>
   3cf7e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   3cf82:	f240 80dc 	bls.w	3d13e <_printf_float+0x3aa>
   3cf86:	2200      	movs	r2, #0
   3cf88:	2300      	movs	r3, #0
   3cf8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3cf8e:	f7db fe6b 	bl	18c68 <__aeabi_dcmpeq>
   3cf92:	2800      	cmp	r0, #0
   3cf94:	d033      	beq.n	3cffe <_printf_float+0x26a>
   3cf96:	2301      	movs	r3, #1
   3cf98:	4a41      	ldr	r2, [pc, #260]	; (3d0a0 <_printf_float+0x30c>)
   3cf9a:	4631      	mov	r1, r6
   3cf9c:	4628      	mov	r0, r5
   3cf9e:	47b8      	blx	r7
   3cfa0:	3001      	adds	r0, #1
   3cfa2:	f43f af55 	beq.w	3ce50 <_printf_float+0xbc>
   3cfa6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3cfaa:	429a      	cmp	r2, r3
   3cfac:	db02      	blt.n	3cfb4 <_printf_float+0x220>
   3cfae:	6823      	ldr	r3, [r4, #0]
   3cfb0:	07d8      	lsls	r0, r3, #31
   3cfb2:	d50f      	bpl.n	3cfd4 <_printf_float+0x240>
   3cfb4:	4631      	mov	r1, r6
   3cfb6:	4628      	mov	r0, r5
   3cfb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3cfbc:	47b8      	blx	r7
   3cfbe:	3001      	adds	r0, #1
   3cfc0:	f43f af46 	beq.w	3ce50 <_printf_float+0xbc>
   3cfc4:	f04f 0800 	mov.w	r8, #0
   3cfc8:	f104 091a 	add.w	r9, r4, #26
   3cfcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3cfce:	3b01      	subs	r3, #1
   3cfd0:	4543      	cmp	r3, r8
   3cfd2:	dc09      	bgt.n	3cfe8 <_printf_float+0x254>
   3cfd4:	6823      	ldr	r3, [r4, #0]
   3cfd6:	079b      	lsls	r3, r3, #30
   3cfd8:	f100 8101 	bmi.w	3d1de <_printf_float+0x44a>
   3cfdc:	68e0      	ldr	r0, [r4, #12]
   3cfde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3cfe0:	4298      	cmp	r0, r3
   3cfe2:	bfb8      	it	lt
   3cfe4:	4618      	movlt	r0, r3
   3cfe6:	e735      	b.n	3ce54 <_printf_float+0xc0>
   3cfe8:	2301      	movs	r3, #1
   3cfea:	464a      	mov	r2, r9
   3cfec:	4631      	mov	r1, r6
   3cfee:	4628      	mov	r0, r5
   3cff0:	47b8      	blx	r7
   3cff2:	3001      	adds	r0, #1
   3cff4:	f43f af2c 	beq.w	3ce50 <_printf_float+0xbc>
   3cff8:	f108 0801 	add.w	r8, r8, #1
   3cffc:	e7e6      	b.n	3cfcc <_printf_float+0x238>
   3cffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3d000:	2b00      	cmp	r3, #0
   3d002:	dc2b      	bgt.n	3d05c <_printf_float+0x2c8>
   3d004:	2301      	movs	r3, #1
   3d006:	4a26      	ldr	r2, [pc, #152]	; (3d0a0 <_printf_float+0x30c>)
   3d008:	4631      	mov	r1, r6
   3d00a:	4628      	mov	r0, r5
   3d00c:	47b8      	blx	r7
   3d00e:	3001      	adds	r0, #1
   3d010:	f43f af1e 	beq.w	3ce50 <_printf_float+0xbc>
   3d014:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3d018:	4313      	orrs	r3, r2
   3d01a:	d102      	bne.n	3d022 <_printf_float+0x28e>
   3d01c:	6823      	ldr	r3, [r4, #0]
   3d01e:	07d9      	lsls	r1, r3, #31
   3d020:	d5d8      	bpl.n	3cfd4 <_printf_float+0x240>
   3d022:	4631      	mov	r1, r6
   3d024:	4628      	mov	r0, r5
   3d026:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3d02a:	47b8      	blx	r7
   3d02c:	3001      	adds	r0, #1
   3d02e:	f43f af0f 	beq.w	3ce50 <_printf_float+0xbc>
   3d032:	f04f 0900 	mov.w	r9, #0
   3d036:	f104 0a1a 	add.w	sl, r4, #26
   3d03a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3d03c:	425b      	negs	r3, r3
   3d03e:	454b      	cmp	r3, r9
   3d040:	dc01      	bgt.n	3d046 <_printf_float+0x2b2>
   3d042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3d044:	e794      	b.n	3cf70 <_printf_float+0x1dc>
   3d046:	2301      	movs	r3, #1
   3d048:	4652      	mov	r2, sl
   3d04a:	4631      	mov	r1, r6
   3d04c:	4628      	mov	r0, r5
   3d04e:	47b8      	blx	r7
   3d050:	3001      	adds	r0, #1
   3d052:	f43f aefd 	beq.w	3ce50 <_printf_float+0xbc>
   3d056:	f109 0901 	add.w	r9, r9, #1
   3d05a:	e7ee      	b.n	3d03a <_printf_float+0x2a6>
   3d05c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3d05e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   3d060:	429a      	cmp	r2, r3
   3d062:	bfa8      	it	ge
   3d064:	461a      	movge	r2, r3
   3d066:	2a00      	cmp	r2, #0
   3d068:	4691      	mov	r9, r2
   3d06a:	dd07      	ble.n	3d07c <_printf_float+0x2e8>
   3d06c:	4613      	mov	r3, r2
   3d06e:	4631      	mov	r1, r6
   3d070:	4642      	mov	r2, r8
   3d072:	4628      	mov	r0, r5
   3d074:	47b8      	blx	r7
   3d076:	3001      	adds	r0, #1
   3d078:	f43f aeea 	beq.w	3ce50 <_printf_float+0xbc>
   3d07c:	f104 031a 	add.w	r3, r4, #26
   3d080:	f04f 0b00 	mov.w	fp, #0
   3d084:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3d088:	9304      	str	r3, [sp, #16]
   3d08a:	e015      	b.n	3d0b8 <_printf_float+0x324>
   3d08c:	7fefffff 	.word	0x7fefffff
   3d090:	0004a88e 	.word	0x0004a88e
   3d094:	00045fe7 	.word	0x00045fe7
   3d098:	0004a892 	.word	0x0004a892
   3d09c:	0004a896 	.word	0x0004a896
   3d0a0:	0004a2c3 	.word	0x0004a2c3
   3d0a4:	2301      	movs	r3, #1
   3d0a6:	9a04      	ldr	r2, [sp, #16]
   3d0a8:	4631      	mov	r1, r6
   3d0aa:	4628      	mov	r0, r5
   3d0ac:	47b8      	blx	r7
   3d0ae:	3001      	adds	r0, #1
   3d0b0:	f43f aece 	beq.w	3ce50 <_printf_float+0xbc>
   3d0b4:	f10b 0b01 	add.w	fp, fp, #1
   3d0b8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   3d0bc:	ebaa 0309 	sub.w	r3, sl, r9
   3d0c0:	455b      	cmp	r3, fp
   3d0c2:	dcef      	bgt.n	3d0a4 <_printf_float+0x310>
   3d0c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3d0c8:	429a      	cmp	r2, r3
   3d0ca:	db1b      	blt.n	3d104 <_printf_float+0x370>
   3d0cc:	6823      	ldr	r3, [r4, #0]
   3d0ce:	07da      	lsls	r2, r3, #31
   3d0d0:	d418      	bmi.n	3d104 <_printf_float+0x370>
   3d0d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3d0d6:	4592      	cmp	sl, r2
   3d0d8:	db1c      	blt.n	3d114 <_printf_float+0x380>
   3d0da:	eba3 090a 	sub.w	r9, r3, sl
   3d0de:	f1b9 0f00 	cmp.w	r9, #0
   3d0e2:	dd08      	ble.n	3d0f6 <_printf_float+0x362>
   3d0e4:	464b      	mov	r3, r9
   3d0e6:	eb08 020a 	add.w	r2, r8, sl
   3d0ea:	4631      	mov	r1, r6
   3d0ec:	4628      	mov	r0, r5
   3d0ee:	47b8      	blx	r7
   3d0f0:	3001      	adds	r0, #1
   3d0f2:	f43f aead 	beq.w	3ce50 <_printf_float+0xbc>
   3d0f6:	f04f 0800 	mov.w	r8, #0
   3d0fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3d0fe:	f104 0a1a 	add.w	sl, r4, #26
   3d102:	e014      	b.n	3d12e <_printf_float+0x39a>
   3d104:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3d108:	4631      	mov	r1, r6
   3d10a:	4628      	mov	r0, r5
   3d10c:	47b8      	blx	r7
   3d10e:	3001      	adds	r0, #1
   3d110:	d1df      	bne.n	3d0d2 <_printf_float+0x33e>
   3d112:	e69d      	b.n	3ce50 <_printf_float+0xbc>
   3d114:	eba3 0902 	sub.w	r9, r3, r2
   3d118:	e7e1      	b.n	3d0de <_printf_float+0x34a>
   3d11a:	2301      	movs	r3, #1
   3d11c:	4652      	mov	r2, sl
   3d11e:	4631      	mov	r1, r6
   3d120:	4628      	mov	r0, r5
   3d122:	47b8      	blx	r7
   3d124:	3001      	adds	r0, #1
   3d126:	f43f ae93 	beq.w	3ce50 <_printf_float+0xbc>
   3d12a:	f108 0801 	add.w	r8, r8, #1
   3d12e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3d132:	1a9b      	subs	r3, r3, r2
   3d134:	eba3 0309 	sub.w	r3, r3, r9
   3d138:	4543      	cmp	r3, r8
   3d13a:	dcee      	bgt.n	3d11a <_printf_float+0x386>
   3d13c:	e74a      	b.n	3cfd4 <_printf_float+0x240>
   3d13e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3d140:	2a01      	cmp	r2, #1
   3d142:	dc01      	bgt.n	3d148 <_printf_float+0x3b4>
   3d144:	07db      	lsls	r3, r3, #31
   3d146:	d537      	bpl.n	3d1b8 <_printf_float+0x424>
   3d148:	2301      	movs	r3, #1
   3d14a:	4642      	mov	r2, r8
   3d14c:	4631      	mov	r1, r6
   3d14e:	4628      	mov	r0, r5
   3d150:	47b8      	blx	r7
   3d152:	3001      	adds	r0, #1
   3d154:	f43f ae7c 	beq.w	3ce50 <_printf_float+0xbc>
   3d158:	4631      	mov	r1, r6
   3d15a:	4628      	mov	r0, r5
   3d15c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3d160:	47b8      	blx	r7
   3d162:	3001      	adds	r0, #1
   3d164:	f43f ae74 	beq.w	3ce50 <_printf_float+0xbc>
   3d168:	2200      	movs	r2, #0
   3d16a:	2300      	movs	r3, #0
   3d16c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3d170:	f7db fd7a 	bl	18c68 <__aeabi_dcmpeq>
   3d174:	b9d8      	cbnz	r0, 3d1ae <_printf_float+0x41a>
   3d176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3d178:	f108 0201 	add.w	r2, r8, #1
   3d17c:	3b01      	subs	r3, #1
   3d17e:	4631      	mov	r1, r6
   3d180:	4628      	mov	r0, r5
   3d182:	47b8      	blx	r7
   3d184:	3001      	adds	r0, #1
   3d186:	d10e      	bne.n	3d1a6 <_printf_float+0x412>
   3d188:	e662      	b.n	3ce50 <_printf_float+0xbc>
   3d18a:	2301      	movs	r3, #1
   3d18c:	4652      	mov	r2, sl
   3d18e:	4631      	mov	r1, r6
   3d190:	4628      	mov	r0, r5
   3d192:	47b8      	blx	r7
   3d194:	3001      	adds	r0, #1
   3d196:	f43f ae5b 	beq.w	3ce50 <_printf_float+0xbc>
   3d19a:	f108 0801 	add.w	r8, r8, #1
   3d19e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3d1a0:	3b01      	subs	r3, #1
   3d1a2:	4543      	cmp	r3, r8
   3d1a4:	dcf1      	bgt.n	3d18a <_printf_float+0x3f6>
   3d1a6:	464b      	mov	r3, r9
   3d1a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
   3d1ac:	e6e1      	b.n	3cf72 <_printf_float+0x1de>
   3d1ae:	f04f 0800 	mov.w	r8, #0
   3d1b2:	f104 0a1a 	add.w	sl, r4, #26
   3d1b6:	e7f2      	b.n	3d19e <_printf_float+0x40a>
   3d1b8:	2301      	movs	r3, #1
   3d1ba:	4642      	mov	r2, r8
   3d1bc:	e7df      	b.n	3d17e <_printf_float+0x3ea>
   3d1be:	2301      	movs	r3, #1
   3d1c0:	464a      	mov	r2, r9
   3d1c2:	4631      	mov	r1, r6
   3d1c4:	4628      	mov	r0, r5
   3d1c6:	47b8      	blx	r7
   3d1c8:	3001      	adds	r0, #1
   3d1ca:	f43f ae41 	beq.w	3ce50 <_printf_float+0xbc>
   3d1ce:	f108 0801 	add.w	r8, r8, #1
   3d1d2:	68e3      	ldr	r3, [r4, #12]
   3d1d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   3d1d6:	1a9b      	subs	r3, r3, r2
   3d1d8:	4543      	cmp	r3, r8
   3d1da:	dcf0      	bgt.n	3d1be <_printf_float+0x42a>
   3d1dc:	e6fe      	b.n	3cfdc <_printf_float+0x248>
   3d1de:	f04f 0800 	mov.w	r8, #0
   3d1e2:	f104 0919 	add.w	r9, r4, #25
   3d1e6:	e7f4      	b.n	3d1d2 <_printf_float+0x43e>

0003d1e8 <_printf_i>:
   3d1e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3d1ec:	4606      	mov	r6, r0
   3d1ee:	460c      	mov	r4, r1
   3d1f0:	f101 0043 	add.w	r0, r1, #67	; 0x43
   3d1f4:	7e09      	ldrb	r1, [r1, #24]
   3d1f6:	b085      	sub	sp, #20
   3d1f8:	4698      	mov	r8, r3
   3d1fa:	296e      	cmp	r1, #110	; 0x6e
   3d1fc:	4617      	mov	r7, r2
   3d1fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   3d200:	f000 80ba 	beq.w	3d378 <_printf_i+0x190>
   3d204:	d824      	bhi.n	3d250 <_printf_i+0x68>
   3d206:	2963      	cmp	r1, #99	; 0x63
   3d208:	d039      	beq.n	3d27e <_printf_i+0x96>
   3d20a:	d80a      	bhi.n	3d222 <_printf_i+0x3a>
   3d20c:	2900      	cmp	r1, #0
   3d20e:	f000 80c3 	beq.w	3d398 <_printf_i+0x1b0>
   3d212:	2958      	cmp	r1, #88	; 0x58
   3d214:	f000 8091 	beq.w	3d33a <_printf_i+0x152>
   3d218:	f104 0542 	add.w	r5, r4, #66	; 0x42
   3d21c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
   3d220:	e035      	b.n	3d28e <_printf_i+0xa6>
   3d222:	2964      	cmp	r1, #100	; 0x64
   3d224:	d001      	beq.n	3d22a <_printf_i+0x42>
   3d226:	2969      	cmp	r1, #105	; 0x69
   3d228:	d1f6      	bne.n	3d218 <_printf_i+0x30>
   3d22a:	6825      	ldr	r5, [r4, #0]
   3d22c:	681a      	ldr	r2, [r3, #0]
   3d22e:	f015 0f80 	tst.w	r5, #128	; 0x80
   3d232:	f102 0104 	add.w	r1, r2, #4
   3d236:	d02c      	beq.n	3d292 <_printf_i+0xaa>
   3d238:	6812      	ldr	r2, [r2, #0]
   3d23a:	6019      	str	r1, [r3, #0]
   3d23c:	2a00      	cmp	r2, #0
   3d23e:	da03      	bge.n	3d248 <_printf_i+0x60>
   3d240:	232d      	movs	r3, #45	; 0x2d
   3d242:	4252      	negs	r2, r2
   3d244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3d248:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 3d408 <_printf_i+0x220>
   3d24c:	230a      	movs	r3, #10
   3d24e:	e03f      	b.n	3d2d0 <_printf_i+0xe8>
   3d250:	2973      	cmp	r1, #115	; 0x73
   3d252:	f000 80a5 	beq.w	3d3a0 <_printf_i+0x1b8>
   3d256:	d808      	bhi.n	3d26a <_printf_i+0x82>
   3d258:	296f      	cmp	r1, #111	; 0x6f
   3d25a:	d021      	beq.n	3d2a0 <_printf_i+0xb8>
   3d25c:	2970      	cmp	r1, #112	; 0x70
   3d25e:	d1db      	bne.n	3d218 <_printf_i+0x30>
   3d260:	6822      	ldr	r2, [r4, #0]
   3d262:	f042 0220 	orr.w	r2, r2, #32
   3d266:	6022      	str	r2, [r4, #0]
   3d268:	e003      	b.n	3d272 <_printf_i+0x8a>
   3d26a:	2975      	cmp	r1, #117	; 0x75
   3d26c:	d018      	beq.n	3d2a0 <_printf_i+0xb8>
   3d26e:	2978      	cmp	r1, #120	; 0x78
   3d270:	d1d2      	bne.n	3d218 <_printf_i+0x30>
   3d272:	2278      	movs	r2, #120	; 0x78
   3d274:	f8df c194 	ldr.w	ip, [pc, #404]	; 3d40c <_printf_i+0x224>
   3d278:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
   3d27c:	e061      	b.n	3d342 <_printf_i+0x15a>
   3d27e:	681a      	ldr	r2, [r3, #0]
   3d280:	f104 0542 	add.w	r5, r4, #66	; 0x42
   3d284:	1d11      	adds	r1, r2, #4
   3d286:	6019      	str	r1, [r3, #0]
   3d288:	6813      	ldr	r3, [r2, #0]
   3d28a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   3d28e:	2301      	movs	r3, #1
   3d290:	e093      	b.n	3d3ba <_printf_i+0x1d2>
   3d292:	6812      	ldr	r2, [r2, #0]
   3d294:	f015 0f40 	tst.w	r5, #64	; 0x40
   3d298:	6019      	str	r1, [r3, #0]
   3d29a:	bf18      	it	ne
   3d29c:	b212      	sxthne	r2, r2
   3d29e:	e7cd      	b.n	3d23c <_printf_i+0x54>
   3d2a0:	f8d4 c000 	ldr.w	ip, [r4]
   3d2a4:	681a      	ldr	r2, [r3, #0]
   3d2a6:	f01c 0f80 	tst.w	ip, #128	; 0x80
   3d2aa:	f102 0504 	add.w	r5, r2, #4
   3d2ae:	601d      	str	r5, [r3, #0]
   3d2b0:	d001      	beq.n	3d2b6 <_printf_i+0xce>
   3d2b2:	6812      	ldr	r2, [r2, #0]
   3d2b4:	e003      	b.n	3d2be <_printf_i+0xd6>
   3d2b6:	f01c 0f40 	tst.w	ip, #64	; 0x40
   3d2ba:	d0fa      	beq.n	3d2b2 <_printf_i+0xca>
   3d2bc:	8812      	ldrh	r2, [r2, #0]
   3d2be:	296f      	cmp	r1, #111	; 0x6f
   3d2c0:	f8df c144 	ldr.w	ip, [pc, #324]	; 3d408 <_printf_i+0x220>
   3d2c4:	bf0c      	ite	eq
   3d2c6:	2308      	moveq	r3, #8
   3d2c8:	230a      	movne	r3, #10
   3d2ca:	2100      	movs	r1, #0
   3d2cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   3d2d0:	6865      	ldr	r5, [r4, #4]
   3d2d2:	2d00      	cmp	r5, #0
   3d2d4:	60a5      	str	r5, [r4, #8]
   3d2d6:	bfa2      	ittt	ge
   3d2d8:	6821      	ldrge	r1, [r4, #0]
   3d2da:	f021 0104 	bicge.w	r1, r1, #4
   3d2de:	6021      	strge	r1, [r4, #0]
   3d2e0:	b90a      	cbnz	r2, 3d2e6 <_printf_i+0xfe>
   3d2e2:	2d00      	cmp	r5, #0
   3d2e4:	d046      	beq.n	3d374 <_printf_i+0x18c>
   3d2e6:	4605      	mov	r5, r0
   3d2e8:	4293      	cmp	r3, r2
   3d2ea:	fbb2 f1f3 	udiv	r1, r2, r3
   3d2ee:	fb03 2e11 	mls	lr, r3, r1, r2
   3d2f2:	f81c e00e 	ldrb.w	lr, [ip, lr]
   3d2f6:	f805 ed01 	strb.w	lr, [r5, #-1]!
   3d2fa:	d939      	bls.n	3d370 <_printf_i+0x188>
   3d2fc:	2b08      	cmp	r3, #8
   3d2fe:	d10b      	bne.n	3d318 <_printf_i+0x130>
   3d300:	6823      	ldr	r3, [r4, #0]
   3d302:	07da      	lsls	r2, r3, #31
   3d304:	d508      	bpl.n	3d318 <_printf_i+0x130>
   3d306:	6923      	ldr	r3, [r4, #16]
   3d308:	6862      	ldr	r2, [r4, #4]
   3d30a:	429a      	cmp	r2, r3
   3d30c:	bfde      	ittt	le
   3d30e:	2330      	movle	r3, #48	; 0x30
   3d310:	f805 3c01 	strble.w	r3, [r5, #-1]
   3d314:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
   3d318:	1b40      	subs	r0, r0, r5
   3d31a:	6120      	str	r0, [r4, #16]
   3d31c:	f8cd 8000 	str.w	r8, [sp]
   3d320:	463b      	mov	r3, r7
   3d322:	aa03      	add	r2, sp, #12
   3d324:	4621      	mov	r1, r4
   3d326:	4630      	mov	r0, r6
   3d328:	f004 fc24 	bl	41b74 <_printf_common>
   3d32c:	3001      	adds	r0, #1
   3d32e:	d149      	bne.n	3d3c4 <_printf_i+0x1dc>
   3d330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3d334:	b005      	add	sp, #20
   3d336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3d33a:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 3d408 <_printf_i+0x220>
   3d33e:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
   3d342:	681d      	ldr	r5, [r3, #0]
   3d344:	6821      	ldr	r1, [r4, #0]
   3d346:	f855 2b04 	ldr.w	r2, [r5], #4
   3d34a:	601d      	str	r5, [r3, #0]
   3d34c:	060d      	lsls	r5, r1, #24
   3d34e:	d50b      	bpl.n	3d368 <_printf_i+0x180>
   3d350:	07cd      	lsls	r5, r1, #31
   3d352:	bf44      	itt	mi
   3d354:	f041 0120 	orrmi.w	r1, r1, #32
   3d358:	6021      	strmi	r1, [r4, #0]
   3d35a:	b91a      	cbnz	r2, 3d364 <_printf_i+0x17c>
   3d35c:	6823      	ldr	r3, [r4, #0]
   3d35e:	f023 0320 	bic.w	r3, r3, #32
   3d362:	6023      	str	r3, [r4, #0]
   3d364:	2310      	movs	r3, #16
   3d366:	e7b0      	b.n	3d2ca <_printf_i+0xe2>
   3d368:	064b      	lsls	r3, r1, #25
   3d36a:	bf48      	it	mi
   3d36c:	b292      	uxthmi	r2, r2
   3d36e:	e7ef      	b.n	3d350 <_printf_i+0x168>
   3d370:	460a      	mov	r2, r1
   3d372:	e7b9      	b.n	3d2e8 <_printf_i+0x100>
   3d374:	4605      	mov	r5, r0
   3d376:	e7c1      	b.n	3d2fc <_printf_i+0x114>
   3d378:	681a      	ldr	r2, [r3, #0]
   3d37a:	f8d4 c000 	ldr.w	ip, [r4]
   3d37e:	1d15      	adds	r5, r2, #4
   3d380:	6961      	ldr	r1, [r4, #20]
   3d382:	f01c 0f80 	tst.w	ip, #128	; 0x80
   3d386:	601d      	str	r5, [r3, #0]
   3d388:	6813      	ldr	r3, [r2, #0]
   3d38a:	d001      	beq.n	3d390 <_printf_i+0x1a8>
   3d38c:	6019      	str	r1, [r3, #0]
   3d38e:	e003      	b.n	3d398 <_printf_i+0x1b0>
   3d390:	f01c 0f40 	tst.w	ip, #64	; 0x40
   3d394:	d0fa      	beq.n	3d38c <_printf_i+0x1a4>
   3d396:	8019      	strh	r1, [r3, #0]
   3d398:	2300      	movs	r3, #0
   3d39a:	4605      	mov	r5, r0
   3d39c:	6123      	str	r3, [r4, #16]
   3d39e:	e7bd      	b.n	3d31c <_printf_i+0x134>
   3d3a0:	681a      	ldr	r2, [r3, #0]
   3d3a2:	1d11      	adds	r1, r2, #4
   3d3a4:	6019      	str	r1, [r3, #0]
   3d3a6:	2100      	movs	r1, #0
   3d3a8:	6815      	ldr	r5, [r2, #0]
   3d3aa:	6862      	ldr	r2, [r4, #4]
   3d3ac:	4628      	mov	r0, r5
   3d3ae:	f004 fae4 	bl	4197a <memchr>
   3d3b2:	b108      	cbz	r0, 3d3b8 <_printf_i+0x1d0>
   3d3b4:	1b40      	subs	r0, r0, r5
   3d3b6:	6060      	str	r0, [r4, #4]
   3d3b8:	6863      	ldr	r3, [r4, #4]
   3d3ba:	6123      	str	r3, [r4, #16]
   3d3bc:	2300      	movs	r3, #0
   3d3be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3d3c2:	e7ab      	b.n	3d31c <_printf_i+0x134>
   3d3c4:	6923      	ldr	r3, [r4, #16]
   3d3c6:	462a      	mov	r2, r5
   3d3c8:	4639      	mov	r1, r7
   3d3ca:	4630      	mov	r0, r6
   3d3cc:	47c0      	blx	r8
   3d3ce:	3001      	adds	r0, #1
   3d3d0:	d0ae      	beq.n	3d330 <_printf_i+0x148>
   3d3d2:	6823      	ldr	r3, [r4, #0]
   3d3d4:	079b      	lsls	r3, r3, #30
   3d3d6:	d413      	bmi.n	3d400 <_printf_i+0x218>
   3d3d8:	68e0      	ldr	r0, [r4, #12]
   3d3da:	9b03      	ldr	r3, [sp, #12]
   3d3dc:	4298      	cmp	r0, r3
   3d3de:	bfb8      	it	lt
   3d3e0:	4618      	movlt	r0, r3
   3d3e2:	e7a7      	b.n	3d334 <_printf_i+0x14c>
   3d3e4:	2301      	movs	r3, #1
   3d3e6:	464a      	mov	r2, r9
   3d3e8:	4639      	mov	r1, r7
   3d3ea:	4630      	mov	r0, r6
   3d3ec:	47c0      	blx	r8
   3d3ee:	3001      	adds	r0, #1
   3d3f0:	d09e      	beq.n	3d330 <_printf_i+0x148>
   3d3f2:	3501      	adds	r5, #1
   3d3f4:	68e3      	ldr	r3, [r4, #12]
   3d3f6:	9a03      	ldr	r2, [sp, #12]
   3d3f8:	1a9b      	subs	r3, r3, r2
   3d3fa:	42ab      	cmp	r3, r5
   3d3fc:	dcf2      	bgt.n	3d3e4 <_printf_i+0x1fc>
   3d3fe:	e7eb      	b.n	3d3d8 <_printf_i+0x1f0>
   3d400:	2500      	movs	r5, #0
   3d402:	f104 0919 	add.w	r9, r4, #25
   3d406:	e7f5      	b.n	3d3f4 <_printf_i+0x20c>
   3d408:	0004a89a 	.word	0x0004a89a
   3d40c:	0004a8ab 	.word	0x0004a8ab

0003d410 <srand>:
   3d410:	b538      	push	{r3, r4, r5, lr}
   3d412:	4b0d      	ldr	r3, [pc, #52]	; (3d448 <srand+0x38>)
   3d414:	4605      	mov	r5, r0
   3d416:	681c      	ldr	r4, [r3, #0]
   3d418:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3d41a:	b97b      	cbnz	r3, 3d43c <srand+0x2c>
   3d41c:	2018      	movs	r0, #24
   3d41e:	f7ff fad9 	bl	3c9d4 <malloc>
   3d422:	4a0a      	ldr	r2, [pc, #40]	; (3d44c <srand+0x3c>)
   3d424:	4b0a      	ldr	r3, [pc, #40]	; (3d450 <srand+0x40>)
   3d426:	63a0      	str	r0, [r4, #56]	; 0x38
   3d428:	e9c0 2300 	strd	r2, r3, [r0]
   3d42c:	4b09      	ldr	r3, [pc, #36]	; (3d454 <srand+0x44>)
   3d42e:	2201      	movs	r2, #1
   3d430:	6083      	str	r3, [r0, #8]
   3d432:	230b      	movs	r3, #11
   3d434:	8183      	strh	r3, [r0, #12]
   3d436:	2300      	movs	r3, #0
   3d438:	e9c0 2304 	strd	r2, r3, [r0, #16]
   3d43c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3d43e:	2200      	movs	r2, #0
   3d440:	611d      	str	r5, [r3, #16]
   3d442:	615a      	str	r2, [r3, #20]
   3d444:	bd38      	pop	{r3, r4, r5, pc}
   3d446:	bf00      	nop
   3d448:	20031c90 	.word	0x20031c90
   3d44c:	abcd330e 	.word	0xabcd330e
   3d450:	e66d1234 	.word	0xe66d1234
   3d454:	0005deec 	.word	0x0005deec

0003d458 <rand>:
   3d458:	4b13      	ldr	r3, [pc, #76]	; (3d4a8 <rand+0x50>)
   3d45a:	b510      	push	{r4, lr}
   3d45c:	681c      	ldr	r4, [r3, #0]
   3d45e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3d460:	b97b      	cbnz	r3, 3d482 <rand+0x2a>
   3d462:	2018      	movs	r0, #24
   3d464:	f7ff fab6 	bl	3c9d4 <malloc>
   3d468:	4a10      	ldr	r2, [pc, #64]	; (3d4ac <rand+0x54>)
   3d46a:	4b11      	ldr	r3, [pc, #68]	; (3d4b0 <rand+0x58>)
   3d46c:	63a0      	str	r0, [r4, #56]	; 0x38
   3d46e:	e9c0 2300 	strd	r2, r3, [r0]
   3d472:	4b10      	ldr	r3, [pc, #64]	; (3d4b4 <rand+0x5c>)
   3d474:	2201      	movs	r2, #1
   3d476:	6083      	str	r3, [r0, #8]
   3d478:	230b      	movs	r3, #11
   3d47a:	8183      	strh	r3, [r0, #12]
   3d47c:	2300      	movs	r3, #0
   3d47e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   3d482:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   3d484:	480c      	ldr	r0, [pc, #48]	; (3d4b8 <rand+0x60>)
   3d486:	690a      	ldr	r2, [r1, #16]
   3d488:	694b      	ldr	r3, [r1, #20]
   3d48a:	4c0c      	ldr	r4, [pc, #48]	; (3d4bc <rand+0x64>)
   3d48c:	4350      	muls	r0, r2
   3d48e:	fb04 0003 	mla	r0, r4, r3, r0
   3d492:	fba2 3404 	umull	r3, r4, r2, r4
   3d496:	1c5a      	adds	r2, r3, #1
   3d498:	4404      	add	r4, r0
   3d49a:	f144 0000 	adc.w	r0, r4, #0
   3d49e:	e9c1 2004 	strd	r2, r0, [r1, #16]
   3d4a2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   3d4a6:	bd10      	pop	{r4, pc}
   3d4a8:	20031c90 	.word	0x20031c90
   3d4ac:	abcd330e 	.word	0xabcd330e
   3d4b0:	e66d1234 	.word	0xe66d1234
   3d4b4:	0005deec 	.word	0x0005deec
   3d4b8:	5851f42d 	.word	0x5851f42d
   3d4bc:	4c957f2d 	.word	0x4c957f2d

0003d4c0 <realloc>:
   3d4c0:	4b02      	ldr	r3, [pc, #8]	; (3d4cc <realloc+0xc>)
   3d4c2:	460a      	mov	r2, r1
   3d4c4:	4601      	mov	r1, r0
   3d4c6:	6818      	ldr	r0, [r3, #0]
   3d4c8:	f005 ba66 	b.w	42998 <_realloc_r>
   3d4cc:	20031c90 	.word	0x20031c90

0003d4d0 <_sbrk_r>:
   3d4d0:	b538      	push	{r3, r4, r5, lr}
   3d4d2:	2300      	movs	r3, #0
   3d4d4:	4c05      	ldr	r4, [pc, #20]	; (3d4ec <_sbrk_r+0x1c>)
   3d4d6:	4605      	mov	r5, r0
   3d4d8:	4608      	mov	r0, r1
   3d4da:	6023      	str	r3, [r4, #0]
   3d4dc:	f7e3 ffa2 	bl	21424 <_sbrk>
   3d4e0:	1c43      	adds	r3, r0, #1
   3d4e2:	d102      	bne.n	3d4ea <_sbrk_r+0x1a>
   3d4e4:	6823      	ldr	r3, [r4, #0]
   3d4e6:	b103      	cbz	r3, 3d4ea <_sbrk_r+0x1a>
   3d4e8:	602b      	str	r3, [r5, #0]
   3d4ea:	bd38      	pop	{r3, r4, r5, pc}
   3d4ec:	2002c9fc 	.word	0x2002c9fc

0003d4f0 <sniprintf>:
   3d4f0:	b40c      	push	{r2, r3}
   3d4f2:	4b18      	ldr	r3, [pc, #96]	; (3d554 <sniprintf+0x64>)
   3d4f4:	b530      	push	{r4, r5, lr}
   3d4f6:	1e0c      	subs	r4, r1, #0
   3d4f8:	b09d      	sub	sp, #116	; 0x74
   3d4fa:	681d      	ldr	r5, [r3, #0]
   3d4fc:	da08      	bge.n	3d510 <sniprintf+0x20>
   3d4fe:	238b      	movs	r3, #139	; 0x8b
   3d500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3d504:	602b      	str	r3, [r5, #0]
   3d506:	b01d      	add	sp, #116	; 0x74
   3d508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3d50c:	b002      	add	sp, #8
   3d50e:	4770      	bx	lr
   3d510:	f44f 7302 	mov.w	r3, #520	; 0x208
   3d514:	9002      	str	r0, [sp, #8]
   3d516:	9006      	str	r0, [sp, #24]
   3d518:	a902      	add	r1, sp, #8
   3d51a:	f8ad 3014 	strh.w	r3, [sp, #20]
   3d51e:	bf14      	ite	ne
   3d520:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   3d524:	4623      	moveq	r3, r4
   3d526:	9a20      	ldr	r2, [sp, #128]	; 0x80
   3d528:	4628      	mov	r0, r5
   3d52a:	9304      	str	r3, [sp, #16]
   3d52c:	9307      	str	r3, [sp, #28]
   3d52e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3d532:	f8ad 3016 	strh.w	r3, [sp, #22]
   3d536:	ab21      	add	r3, sp, #132	; 0x84
   3d538:	9301      	str	r3, [sp, #4]
   3d53a:	f000 ff3d 	bl	3e3b8 <_svfiprintf_r>
   3d53e:	1c43      	adds	r3, r0, #1
   3d540:	bfbc      	itt	lt
   3d542:	238b      	movlt	r3, #139	; 0x8b
   3d544:	602b      	strlt	r3, [r5, #0]
   3d546:	2c00      	cmp	r4, #0
   3d548:	d0dd      	beq.n	3d506 <sniprintf+0x16>
   3d54a:	9b02      	ldr	r3, [sp, #8]
   3d54c:	2200      	movs	r2, #0
   3d54e:	701a      	strb	r2, [r3, #0]
   3d550:	e7d9      	b.n	3d506 <sniprintf+0x16>
   3d552:	bf00      	nop
   3d554:	20031c90 	.word	0x20031c90

0003d558 <siscanf>:
   3d558:	b40e      	push	{r1, r2, r3}
   3d55a:	b530      	push	{r4, r5, lr}
   3d55c:	b09c      	sub	sp, #112	; 0x70
   3d55e:	f44f 7201 	mov.w	r2, #516	; 0x204
   3d562:	ac1f      	add	r4, sp, #124	; 0x7c
   3d564:	f8ad 2014 	strh.w	r2, [sp, #20]
   3d568:	9002      	str	r0, [sp, #8]
   3d56a:	f854 5b04 	ldr.w	r5, [r4], #4
   3d56e:	9006      	str	r0, [sp, #24]
   3d570:	f7dc fcb8 	bl	19ee4 <strlen>
   3d574:	4b0b      	ldr	r3, [pc, #44]	; (3d5a4 <siscanf+0x4c>)
   3d576:	462a      	mov	r2, r5
   3d578:	9003      	str	r0, [sp, #12]
   3d57a:	a902      	add	r1, sp, #8
   3d57c:	930b      	str	r3, [sp, #44]	; 0x2c
   3d57e:	2300      	movs	r3, #0
   3d580:	9007      	str	r0, [sp, #28]
   3d582:	930f      	str	r3, [sp, #60]	; 0x3c
   3d584:	9314      	str	r3, [sp, #80]	; 0x50
   3d586:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3d58a:	4807      	ldr	r0, [pc, #28]	; (3d5a8 <siscanf+0x50>)
   3d58c:	f8ad 3016 	strh.w	r3, [sp, #22]
   3d590:	4623      	mov	r3, r4
   3d592:	6800      	ldr	r0, [r0, #0]
   3d594:	9401      	str	r4, [sp, #4]
   3d596:	f001 f807 	bl	3e5a8 <__ssvfiscanf_r>
   3d59a:	b01c      	add	sp, #112	; 0x70
   3d59c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3d5a0:	b003      	add	sp, #12
   3d5a2:	4770      	bx	lr
   3d5a4:	00041cbb 	.word	0x00041cbb
   3d5a8:	20031c90 	.word	0x20031c90

0003d5ac <strtod>:
   3d5ac:	460a      	mov	r2, r1
   3d5ae:	4601      	mov	r1, r0
   3d5b0:	4802      	ldr	r0, [pc, #8]	; (3d5bc <strtod+0x10>)
   3d5b2:	4b03      	ldr	r3, [pc, #12]	; (3d5c0 <strtod+0x14>)
   3d5b4:	6800      	ldr	r0, [r0, #0]
   3d5b6:	f7dd ba57 	b.w	1aa68 <_strtod_l>
   3d5ba:	bf00      	nop
   3d5bc:	20031c90 	.word	0x20031c90
   3d5c0:	20031cf4 	.word	0x20031cf4

0003d5c4 <_strtol_l.isra.0>:
   3d5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3d5c8:	4686      	mov	lr, r0
   3d5ca:	4f39      	ldr	r7, [pc, #228]	; (3d6b0 <_strtol_l.isra.0+0xec>)
   3d5cc:	4608      	mov	r0, r1
   3d5ce:	4605      	mov	r5, r0
   3d5d0:	f815 4b01 	ldrb.w	r4, [r5], #1
   3d5d4:	5de6      	ldrb	r6, [r4, r7]
   3d5d6:	f016 0608 	ands.w	r6, r6, #8
   3d5da:	d135      	bne.n	3d648 <_strtol_l.isra.0+0x84>
   3d5dc:	2c2d      	cmp	r4, #45	; 0x2d
   3d5de:	d135      	bne.n	3d64c <_strtol_l.isra.0+0x88>
   3d5e0:	782c      	ldrb	r4, [r5, #0]
   3d5e2:	f04f 0801 	mov.w	r8, #1
   3d5e6:	1c85      	adds	r5, r0, #2
   3d5e8:	2b00      	cmp	r3, #0
   3d5ea:	d05c      	beq.n	3d6a6 <_strtol_l.isra.0+0xe2>
   3d5ec:	2b10      	cmp	r3, #16
   3d5ee:	d109      	bne.n	3d604 <_strtol_l.isra.0+0x40>
   3d5f0:	2c30      	cmp	r4, #48	; 0x30
   3d5f2:	d107      	bne.n	3d604 <_strtol_l.isra.0+0x40>
   3d5f4:	7828      	ldrb	r0, [r5, #0]
   3d5f6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   3d5fa:	2858      	cmp	r0, #88	; 0x58
   3d5fc:	d14e      	bne.n	3d69c <_strtol_l.isra.0+0xd8>
   3d5fe:	786c      	ldrb	r4, [r5, #1]
   3d600:	2310      	movs	r3, #16
   3d602:	3502      	adds	r5, #2
   3d604:	f1b8 0f00 	cmp.w	r8, #0
   3d608:	f04f 0700 	mov.w	r7, #0
   3d60c:	bf14      	ite	ne
   3d60e:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   3d612:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   3d616:	4638      	mov	r0, r7
   3d618:	fbbc f9f3 	udiv	r9, ip, r3
   3d61c:	fb03 ca19 	mls	sl, r3, r9, ip
   3d620:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   3d624:	2e09      	cmp	r6, #9
   3d626:	d817      	bhi.n	3d658 <_strtol_l.isra.0+0x94>
   3d628:	4634      	mov	r4, r6
   3d62a:	42a3      	cmp	r3, r4
   3d62c:	dd23      	ble.n	3d676 <_strtol_l.isra.0+0xb2>
   3d62e:	1c7e      	adds	r6, r7, #1
   3d630:	d007      	beq.n	3d642 <_strtol_l.isra.0+0x7e>
   3d632:	4581      	cmp	r9, r0
   3d634:	d31c      	bcc.n	3d670 <_strtol_l.isra.0+0xac>
   3d636:	d101      	bne.n	3d63c <_strtol_l.isra.0+0x78>
   3d638:	45a2      	cmp	sl, r4
   3d63a:	db19      	blt.n	3d670 <_strtol_l.isra.0+0xac>
   3d63c:	fb00 4003 	mla	r0, r0, r3, r4
   3d640:	2701      	movs	r7, #1
   3d642:	f815 4b01 	ldrb.w	r4, [r5], #1
   3d646:	e7eb      	b.n	3d620 <_strtol_l.isra.0+0x5c>
   3d648:	4628      	mov	r0, r5
   3d64a:	e7c0      	b.n	3d5ce <_strtol_l.isra.0+0xa>
   3d64c:	2c2b      	cmp	r4, #43	; 0x2b
   3d64e:	46b0      	mov	r8, r6
   3d650:	bf04      	itt	eq
   3d652:	782c      	ldrbeq	r4, [r5, #0]
   3d654:	1c85      	addeq	r5, r0, #2
   3d656:	e7c7      	b.n	3d5e8 <_strtol_l.isra.0+0x24>
   3d658:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   3d65c:	2e19      	cmp	r6, #25
   3d65e:	d801      	bhi.n	3d664 <_strtol_l.isra.0+0xa0>
   3d660:	3c37      	subs	r4, #55	; 0x37
   3d662:	e7e2      	b.n	3d62a <_strtol_l.isra.0+0x66>
   3d664:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   3d668:	2e19      	cmp	r6, #25
   3d66a:	d804      	bhi.n	3d676 <_strtol_l.isra.0+0xb2>
   3d66c:	3c57      	subs	r4, #87	; 0x57
   3d66e:	e7dc      	b.n	3d62a <_strtol_l.isra.0+0x66>
   3d670:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   3d674:	e7e5      	b.n	3d642 <_strtol_l.isra.0+0x7e>
   3d676:	1c7b      	adds	r3, r7, #1
   3d678:	d106      	bne.n	3d688 <_strtol_l.isra.0+0xc4>
   3d67a:	2322      	movs	r3, #34	; 0x22
   3d67c:	4660      	mov	r0, ip
   3d67e:	f8ce 3000 	str.w	r3, [lr]
   3d682:	b942      	cbnz	r2, 3d696 <_strtol_l.isra.0+0xd2>
   3d684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3d688:	f1b8 0f00 	cmp.w	r8, #0
   3d68c:	d000      	beq.n	3d690 <_strtol_l.isra.0+0xcc>
   3d68e:	4240      	negs	r0, r0
   3d690:	2a00      	cmp	r2, #0
   3d692:	d0f7      	beq.n	3d684 <_strtol_l.isra.0+0xc0>
   3d694:	b107      	cbz	r7, 3d698 <_strtol_l.isra.0+0xd4>
   3d696:	1e69      	subs	r1, r5, #1
   3d698:	6011      	str	r1, [r2, #0]
   3d69a:	e7f3      	b.n	3d684 <_strtol_l.isra.0+0xc0>
   3d69c:	2430      	movs	r4, #48	; 0x30
   3d69e:	2b00      	cmp	r3, #0
   3d6a0:	d1b0      	bne.n	3d604 <_strtol_l.isra.0+0x40>
   3d6a2:	2308      	movs	r3, #8
   3d6a4:	e7ae      	b.n	3d604 <_strtol_l.isra.0+0x40>
   3d6a6:	2c30      	cmp	r4, #48	; 0x30
   3d6a8:	d0a4      	beq.n	3d5f4 <_strtol_l.isra.0+0x30>
   3d6aa:	230a      	movs	r3, #10
   3d6ac:	e7aa      	b.n	3d604 <_strtol_l.isra.0+0x40>
   3d6ae:	bf00      	nop
   3d6b0:	0004a77d 	.word	0x0004a77d

0003d6b4 <strtol>:
   3d6b4:	4613      	mov	r3, r2
   3d6b6:	460a      	mov	r2, r1
   3d6b8:	4601      	mov	r1, r0
   3d6ba:	4802      	ldr	r0, [pc, #8]	; (3d6c4 <strtol+0x10>)
   3d6bc:	6800      	ldr	r0, [r0, #0]
   3d6be:	f7ff bf81 	b.w	3d5c4 <_strtol_l.isra.0>
   3d6c2:	bf00      	nop
   3d6c4:	20031c90 	.word	0x20031c90

0003d6c8 <_strtoul_l.isra.0>:
   3d6c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3d6cc:	4686      	mov	lr, r0
   3d6ce:	4f37      	ldr	r7, [pc, #220]	; (3d7ac <_strtoul_l.isra.0+0xe4>)
   3d6d0:	4608      	mov	r0, r1
   3d6d2:	4605      	mov	r5, r0
   3d6d4:	f815 4b01 	ldrb.w	r4, [r5], #1
   3d6d8:	5de6      	ldrb	r6, [r4, r7]
   3d6da:	f016 0608 	ands.w	r6, r6, #8
   3d6de:	d131      	bne.n	3d744 <_strtoul_l.isra.0+0x7c>
   3d6e0:	2c2d      	cmp	r4, #45	; 0x2d
   3d6e2:	d131      	bne.n	3d748 <_strtoul_l.isra.0+0x80>
   3d6e4:	782c      	ldrb	r4, [r5, #0]
   3d6e6:	f04f 0801 	mov.w	r8, #1
   3d6ea:	1c85      	adds	r5, r0, #2
   3d6ec:	2b00      	cmp	r3, #0
   3d6ee:	d059      	beq.n	3d7a4 <_strtoul_l.isra.0+0xdc>
   3d6f0:	2b10      	cmp	r3, #16
   3d6f2:	d109      	bne.n	3d708 <_strtoul_l.isra.0+0x40>
   3d6f4:	2c30      	cmp	r4, #48	; 0x30
   3d6f6:	d107      	bne.n	3d708 <_strtoul_l.isra.0+0x40>
   3d6f8:	7828      	ldrb	r0, [r5, #0]
   3d6fa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   3d6fe:	2858      	cmp	r0, #88	; 0x58
   3d700:	d14b      	bne.n	3d79a <_strtoul_l.isra.0+0xd2>
   3d702:	786c      	ldrb	r4, [r5, #1]
   3d704:	2310      	movs	r3, #16
   3d706:	3502      	adds	r5, #2
   3d708:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   3d70c:	2600      	movs	r6, #0
   3d70e:	fbbc fcf3 	udiv	ip, ip, r3
   3d712:	fb03 f90c 	mul.w	r9, r3, ip
   3d716:	4630      	mov	r0, r6
   3d718:	ea6f 0909 	mvn.w	r9, r9
   3d71c:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   3d720:	2f09      	cmp	r7, #9
   3d722:	d817      	bhi.n	3d754 <_strtoul_l.isra.0+0x8c>
   3d724:	463c      	mov	r4, r7
   3d726:	42a3      	cmp	r3, r4
   3d728:	dd23      	ble.n	3d772 <_strtoul_l.isra.0+0xaa>
   3d72a:	2e00      	cmp	r6, #0
   3d72c:	db1e      	blt.n	3d76c <_strtoul_l.isra.0+0xa4>
   3d72e:	4584      	cmp	ip, r0
   3d730:	d31c      	bcc.n	3d76c <_strtoul_l.isra.0+0xa4>
   3d732:	d101      	bne.n	3d738 <_strtoul_l.isra.0+0x70>
   3d734:	45a1      	cmp	r9, r4
   3d736:	db19      	blt.n	3d76c <_strtoul_l.isra.0+0xa4>
   3d738:	fb00 4003 	mla	r0, r0, r3, r4
   3d73c:	2601      	movs	r6, #1
   3d73e:	f815 4b01 	ldrb.w	r4, [r5], #1
   3d742:	e7eb      	b.n	3d71c <_strtoul_l.isra.0+0x54>
   3d744:	4628      	mov	r0, r5
   3d746:	e7c4      	b.n	3d6d2 <_strtoul_l.isra.0+0xa>
   3d748:	2c2b      	cmp	r4, #43	; 0x2b
   3d74a:	46b0      	mov	r8, r6
   3d74c:	bf04      	itt	eq
   3d74e:	782c      	ldrbeq	r4, [r5, #0]
   3d750:	1c85      	addeq	r5, r0, #2
   3d752:	e7cb      	b.n	3d6ec <_strtoul_l.isra.0+0x24>
   3d754:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   3d758:	2f19      	cmp	r7, #25
   3d75a:	d801      	bhi.n	3d760 <_strtoul_l.isra.0+0x98>
   3d75c:	3c37      	subs	r4, #55	; 0x37
   3d75e:	e7e2      	b.n	3d726 <_strtoul_l.isra.0+0x5e>
   3d760:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   3d764:	2f19      	cmp	r7, #25
   3d766:	d804      	bhi.n	3d772 <_strtoul_l.isra.0+0xaa>
   3d768:	3c57      	subs	r4, #87	; 0x57
   3d76a:	e7dc      	b.n	3d726 <_strtoul_l.isra.0+0x5e>
   3d76c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   3d770:	e7e5      	b.n	3d73e <_strtoul_l.isra.0+0x76>
   3d772:	2e00      	cmp	r6, #0
   3d774:	da07      	bge.n	3d786 <_strtoul_l.isra.0+0xbe>
   3d776:	2322      	movs	r3, #34	; 0x22
   3d778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3d77c:	f8ce 3000 	str.w	r3, [lr]
   3d780:	b942      	cbnz	r2, 3d794 <_strtoul_l.isra.0+0xcc>
   3d782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3d786:	f1b8 0f00 	cmp.w	r8, #0
   3d78a:	d000      	beq.n	3d78e <_strtoul_l.isra.0+0xc6>
   3d78c:	4240      	negs	r0, r0
   3d78e:	2a00      	cmp	r2, #0
   3d790:	d0f7      	beq.n	3d782 <_strtoul_l.isra.0+0xba>
   3d792:	b106      	cbz	r6, 3d796 <_strtoul_l.isra.0+0xce>
   3d794:	1e69      	subs	r1, r5, #1
   3d796:	6011      	str	r1, [r2, #0]
   3d798:	e7f3      	b.n	3d782 <_strtoul_l.isra.0+0xba>
   3d79a:	2430      	movs	r4, #48	; 0x30
   3d79c:	2b00      	cmp	r3, #0
   3d79e:	d1b3      	bne.n	3d708 <_strtoul_l.isra.0+0x40>
   3d7a0:	2308      	movs	r3, #8
   3d7a2:	e7b1      	b.n	3d708 <_strtoul_l.isra.0+0x40>
   3d7a4:	2c30      	cmp	r4, #48	; 0x30
   3d7a6:	d0a7      	beq.n	3d6f8 <_strtoul_l.isra.0+0x30>
   3d7a8:	230a      	movs	r3, #10
   3d7aa:	e7ad      	b.n	3d708 <_strtoul_l.isra.0+0x40>
   3d7ac:	0004a77d 	.word	0x0004a77d

0003d7b0 <strtoul>:
   3d7b0:	4613      	mov	r3, r2
   3d7b2:	460a      	mov	r2, r1
   3d7b4:	4601      	mov	r1, r0
   3d7b6:	4802      	ldr	r0, [pc, #8]	; (3d7c0 <strtoul+0x10>)
   3d7b8:	6800      	ldr	r0, [r0, #0]
   3d7ba:	f7ff bf85 	b.w	3d6c8 <_strtoul_l.isra.0>
   3d7be:	bf00      	nop
   3d7c0:	20031c90 	.word	0x20031c90

0003d7c4 <vsniprintf>:
   3d7c4:	b507      	push	{r0, r1, r2, lr}
   3d7c6:	9300      	str	r3, [sp, #0]
   3d7c8:	4613      	mov	r3, r2
   3d7ca:	460a      	mov	r2, r1
   3d7cc:	4601      	mov	r1, r0
   3d7ce:	4803      	ldr	r0, [pc, #12]	; (3d7dc <vsniprintf+0x18>)
   3d7d0:	6800      	ldr	r0, [r0, #0]
   3d7d2:	f004 fb4f 	bl	41e74 <_vsniprintf_r>
   3d7d6:	b003      	add	sp, #12
   3d7d8:	f85d fb04 	ldr.w	pc, [sp], #4
   3d7dc:	20031c90 	.word	0x20031c90

0003d7e0 <_vsiprintf_r>:
   3d7e0:	b500      	push	{lr}
   3d7e2:	b09b      	sub	sp, #108	; 0x6c
   3d7e4:	9100      	str	r1, [sp, #0]
   3d7e6:	9104      	str	r1, [sp, #16]
   3d7e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   3d7ec:	9105      	str	r1, [sp, #20]
   3d7ee:	9102      	str	r1, [sp, #8]
   3d7f0:	4905      	ldr	r1, [pc, #20]	; (3d808 <_vsiprintf_r+0x28>)
   3d7f2:	9103      	str	r1, [sp, #12]
   3d7f4:	4669      	mov	r1, sp
   3d7f6:	f000 fddf 	bl	3e3b8 <_svfiprintf_r>
   3d7fa:	9b00      	ldr	r3, [sp, #0]
   3d7fc:	2200      	movs	r2, #0
   3d7fe:	701a      	strb	r2, [r3, #0]
   3d800:	b01b      	add	sp, #108	; 0x6c
   3d802:	f85d fb04 	ldr.w	pc, [sp], #4
   3d806:	bf00      	nop
   3d808:	ffff0208 	.word	0xffff0208

0003d80c <vsiprintf>:
   3d80c:	4613      	mov	r3, r2
   3d80e:	460a      	mov	r2, r1
   3d810:	4601      	mov	r1, r0
   3d812:	4802      	ldr	r0, [pc, #8]	; (3d81c <vsiprintf+0x10>)
   3d814:	6800      	ldr	r0, [r0, #0]
   3d816:	f7ff bfe3 	b.w	3d7e0 <_vsiprintf_r>
   3d81a:	bf00      	nop
   3d81c:	20031c90 	.word	0x20031c90

0003d820 <__swbuf_r>:
   3d820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d822:	460e      	mov	r6, r1
   3d824:	4614      	mov	r4, r2
   3d826:	4605      	mov	r5, r0
   3d828:	b118      	cbz	r0, 3d832 <__swbuf_r+0x12>
   3d82a:	6983      	ldr	r3, [r0, #24]
   3d82c:	b90b      	cbnz	r3, 3d832 <__swbuf_r+0x12>
   3d82e:	f000 f9ff 	bl	3dc30 <__sinit>
   3d832:	4b21      	ldr	r3, [pc, #132]	; (3d8b8 <__swbuf_r+0x98>)
   3d834:	429c      	cmp	r4, r3
   3d836:	d12b      	bne.n	3d890 <__swbuf_r+0x70>
   3d838:	686c      	ldr	r4, [r5, #4]
   3d83a:	69a3      	ldr	r3, [r4, #24]
   3d83c:	60a3      	str	r3, [r4, #8]
   3d83e:	89a3      	ldrh	r3, [r4, #12]
   3d840:	071a      	lsls	r2, r3, #28
   3d842:	d52f      	bpl.n	3d8a4 <__swbuf_r+0x84>
   3d844:	6923      	ldr	r3, [r4, #16]
   3d846:	b36b      	cbz	r3, 3d8a4 <__swbuf_r+0x84>
   3d848:	6923      	ldr	r3, [r4, #16]
   3d84a:	b2f6      	uxtb	r6, r6
   3d84c:	6820      	ldr	r0, [r4, #0]
   3d84e:	4637      	mov	r7, r6
   3d850:	1ac0      	subs	r0, r0, r3
   3d852:	6963      	ldr	r3, [r4, #20]
   3d854:	4283      	cmp	r3, r0
   3d856:	dc04      	bgt.n	3d862 <__swbuf_r+0x42>
   3d858:	4621      	mov	r1, r4
   3d85a:	4628      	mov	r0, r5
   3d85c:	f000 f96a 	bl	3db34 <_fflush_r>
   3d860:	bb30      	cbnz	r0, 3d8b0 <__swbuf_r+0x90>
   3d862:	68a3      	ldr	r3, [r4, #8]
   3d864:	3001      	adds	r0, #1
   3d866:	3b01      	subs	r3, #1
   3d868:	60a3      	str	r3, [r4, #8]
   3d86a:	6823      	ldr	r3, [r4, #0]
   3d86c:	1c5a      	adds	r2, r3, #1
   3d86e:	6022      	str	r2, [r4, #0]
   3d870:	701e      	strb	r6, [r3, #0]
   3d872:	6963      	ldr	r3, [r4, #20]
   3d874:	4283      	cmp	r3, r0
   3d876:	d004      	beq.n	3d882 <__swbuf_r+0x62>
   3d878:	89a3      	ldrh	r3, [r4, #12]
   3d87a:	07db      	lsls	r3, r3, #31
   3d87c:	d506      	bpl.n	3d88c <__swbuf_r+0x6c>
   3d87e:	2e0a      	cmp	r6, #10
   3d880:	d104      	bne.n	3d88c <__swbuf_r+0x6c>
   3d882:	4621      	mov	r1, r4
   3d884:	4628      	mov	r0, r5
   3d886:	f000 f955 	bl	3db34 <_fflush_r>
   3d88a:	b988      	cbnz	r0, 3d8b0 <__swbuf_r+0x90>
   3d88c:	4638      	mov	r0, r7
   3d88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3d890:	4b0a      	ldr	r3, [pc, #40]	; (3d8bc <__swbuf_r+0x9c>)
   3d892:	429c      	cmp	r4, r3
   3d894:	d101      	bne.n	3d89a <__swbuf_r+0x7a>
   3d896:	68ac      	ldr	r4, [r5, #8]
   3d898:	e7cf      	b.n	3d83a <__swbuf_r+0x1a>
   3d89a:	4b09      	ldr	r3, [pc, #36]	; (3d8c0 <__swbuf_r+0xa0>)
   3d89c:	429c      	cmp	r4, r3
   3d89e:	bf08      	it	eq
   3d8a0:	68ec      	ldreq	r4, [r5, #12]
   3d8a2:	e7ca      	b.n	3d83a <__swbuf_r+0x1a>
   3d8a4:	4621      	mov	r1, r4
   3d8a6:	4628      	mov	r0, r5
   3d8a8:	f000 f81e 	bl	3d8e8 <__swsetup_r>
   3d8ac:	2800      	cmp	r0, #0
   3d8ae:	d0cb      	beq.n	3d848 <__swbuf_r+0x28>
   3d8b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   3d8b4:	e7ea      	b.n	3d88c <__swbuf_r+0x6c>
   3d8b6:	bf00      	nop
   3d8b8:	00044d00 	.word	0x00044d00
   3d8bc:	00044d20 	.word	0x00044d20
   3d8c0:	00044ce0 	.word	0x00044ce0

0003d8c4 <_write_r>:
   3d8c4:	b538      	push	{r3, r4, r5, lr}
   3d8c6:	4605      	mov	r5, r0
   3d8c8:	4c06      	ldr	r4, [pc, #24]	; (3d8e4 <_write_r+0x20>)
   3d8ca:	4608      	mov	r0, r1
   3d8cc:	4611      	mov	r1, r2
   3d8ce:	2200      	movs	r2, #0
   3d8d0:	6022      	str	r2, [r4, #0]
   3d8d2:	461a      	mov	r2, r3
   3d8d4:	f001 ffd8 	bl	3f888 <_write>
   3d8d8:	1c43      	adds	r3, r0, #1
   3d8da:	d102      	bne.n	3d8e2 <_write_r+0x1e>
   3d8dc:	6823      	ldr	r3, [r4, #0]
   3d8de:	b103      	cbz	r3, 3d8e2 <_write_r+0x1e>
   3d8e0:	602b      	str	r3, [r5, #0]
   3d8e2:	bd38      	pop	{r3, r4, r5, pc}
   3d8e4:	2002c9fc 	.word	0x2002c9fc

0003d8e8 <__swsetup_r>:
   3d8e8:	4b32      	ldr	r3, [pc, #200]	; (3d9b4 <__swsetup_r+0xcc>)
   3d8ea:	b570      	push	{r4, r5, r6, lr}
   3d8ec:	681d      	ldr	r5, [r3, #0]
   3d8ee:	4606      	mov	r6, r0
   3d8f0:	460c      	mov	r4, r1
   3d8f2:	b125      	cbz	r5, 3d8fe <__swsetup_r+0x16>
   3d8f4:	69ab      	ldr	r3, [r5, #24]
   3d8f6:	b913      	cbnz	r3, 3d8fe <__swsetup_r+0x16>
   3d8f8:	4628      	mov	r0, r5
   3d8fa:	f000 f999 	bl	3dc30 <__sinit>
   3d8fe:	4b2e      	ldr	r3, [pc, #184]	; (3d9b8 <__swsetup_r+0xd0>)
   3d900:	429c      	cmp	r4, r3
   3d902:	d10f      	bne.n	3d924 <__swsetup_r+0x3c>
   3d904:	686c      	ldr	r4, [r5, #4]
   3d906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3d90a:	b29a      	uxth	r2, r3
   3d90c:	0715      	lsls	r5, r2, #28
   3d90e:	d42c      	bmi.n	3d96a <__swsetup_r+0x82>
   3d910:	06d0      	lsls	r0, r2, #27
   3d912:	d411      	bmi.n	3d938 <__swsetup_r+0x50>
   3d914:	2209      	movs	r2, #9
   3d916:	6032      	str	r2, [r6, #0]
   3d918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3d91c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3d920:	81a3      	strh	r3, [r4, #12]
   3d922:	e03e      	b.n	3d9a2 <__swsetup_r+0xba>
   3d924:	4b25      	ldr	r3, [pc, #148]	; (3d9bc <__swsetup_r+0xd4>)
   3d926:	429c      	cmp	r4, r3
   3d928:	d101      	bne.n	3d92e <__swsetup_r+0x46>
   3d92a:	68ac      	ldr	r4, [r5, #8]
   3d92c:	e7eb      	b.n	3d906 <__swsetup_r+0x1e>
   3d92e:	4b24      	ldr	r3, [pc, #144]	; (3d9c0 <__swsetup_r+0xd8>)
   3d930:	429c      	cmp	r4, r3
   3d932:	bf08      	it	eq
   3d934:	68ec      	ldreq	r4, [r5, #12]
   3d936:	e7e6      	b.n	3d906 <__swsetup_r+0x1e>
   3d938:	0751      	lsls	r1, r2, #29
   3d93a:	d512      	bpl.n	3d962 <__swsetup_r+0x7a>
   3d93c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3d93e:	b141      	cbz	r1, 3d952 <__swsetup_r+0x6a>
   3d940:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3d944:	4299      	cmp	r1, r3
   3d946:	d002      	beq.n	3d94e <__swsetup_r+0x66>
   3d948:	4630      	mov	r0, r6
   3d94a:	f7ff f853 	bl	3c9f4 <_free_r>
   3d94e:	2300      	movs	r3, #0
   3d950:	6363      	str	r3, [r4, #52]	; 0x34
   3d952:	89a3      	ldrh	r3, [r4, #12]
   3d954:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   3d958:	81a3      	strh	r3, [r4, #12]
   3d95a:	2300      	movs	r3, #0
   3d95c:	6063      	str	r3, [r4, #4]
   3d95e:	6923      	ldr	r3, [r4, #16]
   3d960:	6023      	str	r3, [r4, #0]
   3d962:	89a3      	ldrh	r3, [r4, #12]
   3d964:	f043 0308 	orr.w	r3, r3, #8
   3d968:	81a3      	strh	r3, [r4, #12]
   3d96a:	6923      	ldr	r3, [r4, #16]
   3d96c:	b94b      	cbnz	r3, 3d982 <__swsetup_r+0x9a>
   3d96e:	89a3      	ldrh	r3, [r4, #12]
   3d970:	f403 7320 	and.w	r3, r3, #640	; 0x280
   3d974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   3d978:	d003      	beq.n	3d982 <__swsetup_r+0x9a>
   3d97a:	4621      	mov	r1, r4
   3d97c:	4630      	mov	r0, r6
   3d97e:	f000 fc0d 	bl	3e19c <__smakebuf_r>
   3d982:	89a2      	ldrh	r2, [r4, #12]
   3d984:	f012 0301 	ands.w	r3, r2, #1
   3d988:	d00c      	beq.n	3d9a4 <__swsetup_r+0xbc>
   3d98a:	2300      	movs	r3, #0
   3d98c:	60a3      	str	r3, [r4, #8]
   3d98e:	6963      	ldr	r3, [r4, #20]
   3d990:	425b      	negs	r3, r3
   3d992:	61a3      	str	r3, [r4, #24]
   3d994:	6923      	ldr	r3, [r4, #16]
   3d996:	b953      	cbnz	r3, 3d9ae <__swsetup_r+0xc6>
   3d998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3d99c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   3d9a0:	d1ba      	bne.n	3d918 <__swsetup_r+0x30>
   3d9a2:	bd70      	pop	{r4, r5, r6, pc}
   3d9a4:	0792      	lsls	r2, r2, #30
   3d9a6:	bf58      	it	pl
   3d9a8:	6963      	ldrpl	r3, [r4, #20]
   3d9aa:	60a3      	str	r3, [r4, #8]
   3d9ac:	e7f2      	b.n	3d994 <__swsetup_r+0xac>
   3d9ae:	2000      	movs	r0, #0
   3d9b0:	e7f7      	b.n	3d9a2 <__swsetup_r+0xba>
   3d9b2:	bf00      	nop
   3d9b4:	20031c90 	.word	0x20031c90
   3d9b8:	00044d00 	.word	0x00044d00
   3d9bc:	00044d20 	.word	0x00044d20
   3d9c0:	00044ce0 	.word	0x00044ce0

0003d9c4 <__chk_fail>:
   3d9c4:	b500      	push	{lr}
   3d9c6:	b08d      	sub	sp, #52	; 0x34
   3d9c8:	4b0f      	ldr	r3, [pc, #60]	; (3da08 <__chk_fail+0x44>)
   3d9ca:	466a      	mov	r2, sp
   3d9cc:	f103 0628 	add.w	r6, r3, #40	; 0x28
   3d9d0:	4615      	mov	r5, r2
   3d9d2:	6818      	ldr	r0, [r3, #0]
   3d9d4:	3308      	adds	r3, #8
   3d9d6:	f853 1c04 	ldr.w	r1, [r3, #-4]
   3d9da:	4614      	mov	r4, r2
   3d9dc:	42b3      	cmp	r3, r6
   3d9de:	c403      	stmia	r4!, {r0, r1}
   3d9e0:	4622      	mov	r2, r4
   3d9e2:	d1f6      	bne.n	3d9d2 <__chk_fail+0xe>
   3d9e4:	6818      	ldr	r0, [r3, #0]
   3d9e6:	889b      	ldrh	r3, [r3, #4]
   3d9e8:	6020      	str	r0, [r4, #0]
   3d9ea:	4628      	mov	r0, r5
   3d9ec:	80a3      	strh	r3, [r4, #4]
   3d9ee:	f7dc fa79 	bl	19ee4 <strlen>
   3d9f2:	4629      	mov	r1, r5
   3d9f4:	4602      	mov	r2, r0
   3d9f6:	2002      	movs	r0, #2
   3d9f8:	f001 ff46 	bl	3f888 <_write>
   3d9fc:	2006      	movs	r0, #6
   3d9fe:	f001 f879 	bl	3eaf4 <raise>
   3da02:	207f      	movs	r0, #127	; 0x7f
   3da04:	f7e3 fd06 	bl	21414 <_exit>
   3da08:	0004a8bc 	.word	0x0004a8bc

0003da0c <_close_r>:
   3da0c:	b538      	push	{r3, r4, r5, lr}
   3da0e:	2300      	movs	r3, #0
   3da10:	4c05      	ldr	r4, [pc, #20]	; (3da28 <_close_r+0x1c>)
   3da12:	4605      	mov	r5, r0
   3da14:	4608      	mov	r0, r1
   3da16:	6023      	str	r3, [r4, #0]
   3da18:	f001 ff3a 	bl	3f890 <_close>
   3da1c:	1c43      	adds	r3, r0, #1
   3da1e:	d102      	bne.n	3da26 <_close_r+0x1a>
   3da20:	6823      	ldr	r3, [r4, #0]
   3da22:	b103      	cbz	r3, 3da26 <_close_r+0x1a>
   3da24:	602b      	str	r3, [r5, #0]
   3da26:	bd38      	pop	{r3, r4, r5, pc}
   3da28:	2002c9fc 	.word	0x2002c9fc

0003da2c <__sflush_r>:
   3da2c:	898a      	ldrh	r2, [r1, #12]
   3da2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3da32:	4605      	mov	r5, r0
   3da34:	0710      	lsls	r0, r2, #28
   3da36:	460c      	mov	r4, r1
   3da38:	d458      	bmi.n	3daec <__sflush_r+0xc0>
   3da3a:	684b      	ldr	r3, [r1, #4]
   3da3c:	2b00      	cmp	r3, #0
   3da3e:	dc05      	bgt.n	3da4c <__sflush_r+0x20>
   3da40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   3da42:	2b00      	cmp	r3, #0
   3da44:	dc02      	bgt.n	3da4c <__sflush_r+0x20>
   3da46:	2000      	movs	r0, #0
   3da48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3da4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3da4e:	2e00      	cmp	r6, #0
   3da50:	d0f9      	beq.n	3da46 <__sflush_r+0x1a>
   3da52:	2300      	movs	r3, #0
   3da54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   3da58:	682f      	ldr	r7, [r5, #0]
   3da5a:	602b      	str	r3, [r5, #0]
   3da5c:	d032      	beq.n	3dac4 <__sflush_r+0x98>
   3da5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
   3da60:	89a3      	ldrh	r3, [r4, #12]
   3da62:	075a      	lsls	r2, r3, #29
   3da64:	d505      	bpl.n	3da72 <__sflush_r+0x46>
   3da66:	6863      	ldr	r3, [r4, #4]
   3da68:	1ac0      	subs	r0, r0, r3
   3da6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3da6c:	b10b      	cbz	r3, 3da72 <__sflush_r+0x46>
   3da6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   3da70:	1ac0      	subs	r0, r0, r3
   3da72:	2300      	movs	r3, #0
   3da74:	4602      	mov	r2, r0
   3da76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3da78:	4628      	mov	r0, r5
   3da7a:	6a21      	ldr	r1, [r4, #32]
   3da7c:	47b0      	blx	r6
   3da7e:	1c43      	adds	r3, r0, #1
   3da80:	89a3      	ldrh	r3, [r4, #12]
   3da82:	d106      	bne.n	3da92 <__sflush_r+0x66>
   3da84:	6829      	ldr	r1, [r5, #0]
   3da86:	291d      	cmp	r1, #29
   3da88:	d82c      	bhi.n	3dae4 <__sflush_r+0xb8>
   3da8a:	4a29      	ldr	r2, [pc, #164]	; (3db30 <__sflush_r+0x104>)
   3da8c:	40ca      	lsrs	r2, r1
   3da8e:	07d6      	lsls	r6, r2, #31
   3da90:	d528      	bpl.n	3dae4 <__sflush_r+0xb8>
   3da92:	2200      	movs	r2, #0
   3da94:	04d9      	lsls	r1, r3, #19
   3da96:	6062      	str	r2, [r4, #4]
   3da98:	6922      	ldr	r2, [r4, #16]
   3da9a:	6022      	str	r2, [r4, #0]
   3da9c:	d504      	bpl.n	3daa8 <__sflush_r+0x7c>
   3da9e:	1c42      	adds	r2, r0, #1
   3daa0:	d101      	bne.n	3daa6 <__sflush_r+0x7a>
   3daa2:	682b      	ldr	r3, [r5, #0]
   3daa4:	b903      	cbnz	r3, 3daa8 <__sflush_r+0x7c>
   3daa6:	6560      	str	r0, [r4, #84]	; 0x54
   3daa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3daaa:	602f      	str	r7, [r5, #0]
   3daac:	2900      	cmp	r1, #0
   3daae:	d0ca      	beq.n	3da46 <__sflush_r+0x1a>
   3dab0:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3dab4:	4299      	cmp	r1, r3
   3dab6:	d002      	beq.n	3dabe <__sflush_r+0x92>
   3dab8:	4628      	mov	r0, r5
   3daba:	f7fe ff9b 	bl	3c9f4 <_free_r>
   3dabe:	2000      	movs	r0, #0
   3dac0:	6360      	str	r0, [r4, #52]	; 0x34
   3dac2:	e7c1      	b.n	3da48 <__sflush_r+0x1c>
   3dac4:	6a21      	ldr	r1, [r4, #32]
   3dac6:	2301      	movs	r3, #1
   3dac8:	4628      	mov	r0, r5
   3daca:	47b0      	blx	r6
   3dacc:	1c41      	adds	r1, r0, #1
   3dace:	d1c7      	bne.n	3da60 <__sflush_r+0x34>
   3dad0:	682b      	ldr	r3, [r5, #0]
   3dad2:	2b00      	cmp	r3, #0
   3dad4:	d0c4      	beq.n	3da60 <__sflush_r+0x34>
   3dad6:	2b1d      	cmp	r3, #29
   3dad8:	d001      	beq.n	3dade <__sflush_r+0xb2>
   3dada:	2b16      	cmp	r3, #22
   3dadc:	d101      	bne.n	3dae2 <__sflush_r+0xb6>
   3dade:	602f      	str	r7, [r5, #0]
   3dae0:	e7b1      	b.n	3da46 <__sflush_r+0x1a>
   3dae2:	89a3      	ldrh	r3, [r4, #12]
   3dae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3dae8:	81a3      	strh	r3, [r4, #12]
   3daea:	e7ad      	b.n	3da48 <__sflush_r+0x1c>
   3daec:	690f      	ldr	r7, [r1, #16]
   3daee:	2f00      	cmp	r7, #0
   3daf0:	d0a9      	beq.n	3da46 <__sflush_r+0x1a>
   3daf2:	0793      	lsls	r3, r2, #30
   3daf4:	680e      	ldr	r6, [r1, #0]
   3daf6:	600f      	str	r7, [r1, #0]
   3daf8:	bf0c      	ite	eq
   3dafa:	694b      	ldreq	r3, [r1, #20]
   3dafc:	2300      	movne	r3, #0
   3dafe:	eba6 0807 	sub.w	r8, r6, r7
   3db02:	608b      	str	r3, [r1, #8]
   3db04:	f1b8 0f00 	cmp.w	r8, #0
   3db08:	dd9d      	ble.n	3da46 <__sflush_r+0x1a>
   3db0a:	4643      	mov	r3, r8
   3db0c:	463a      	mov	r2, r7
   3db0e:	6a21      	ldr	r1, [r4, #32]
   3db10:	4628      	mov	r0, r5
   3db12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   3db14:	47b0      	blx	r6
   3db16:	2800      	cmp	r0, #0
   3db18:	dc06      	bgt.n	3db28 <__sflush_r+0xfc>
   3db1a:	89a3      	ldrh	r3, [r4, #12]
   3db1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3db20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3db24:	81a3      	strh	r3, [r4, #12]
   3db26:	e78f      	b.n	3da48 <__sflush_r+0x1c>
   3db28:	4407      	add	r7, r0
   3db2a:	eba8 0800 	sub.w	r8, r8, r0
   3db2e:	e7e9      	b.n	3db04 <__sflush_r+0xd8>
   3db30:	20400001 	.word	0x20400001

0003db34 <_fflush_r>:
   3db34:	b538      	push	{r3, r4, r5, lr}
   3db36:	690b      	ldr	r3, [r1, #16]
   3db38:	4605      	mov	r5, r0
   3db3a:	460c      	mov	r4, r1
   3db3c:	b913      	cbnz	r3, 3db44 <_fflush_r+0x10>
   3db3e:	2500      	movs	r5, #0
   3db40:	4628      	mov	r0, r5
   3db42:	bd38      	pop	{r3, r4, r5, pc}
   3db44:	b118      	cbz	r0, 3db4e <_fflush_r+0x1a>
   3db46:	6983      	ldr	r3, [r0, #24]
   3db48:	b90b      	cbnz	r3, 3db4e <_fflush_r+0x1a>
   3db4a:	f000 f871 	bl	3dc30 <__sinit>
   3db4e:	4b14      	ldr	r3, [pc, #80]	; (3dba0 <_fflush_r+0x6c>)
   3db50:	429c      	cmp	r4, r3
   3db52:	d11b      	bne.n	3db8c <_fflush_r+0x58>
   3db54:	686c      	ldr	r4, [r5, #4]
   3db56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3db5a:	2b00      	cmp	r3, #0
   3db5c:	d0ef      	beq.n	3db3e <_fflush_r+0xa>
   3db5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   3db60:	07d0      	lsls	r0, r2, #31
   3db62:	d404      	bmi.n	3db6e <_fflush_r+0x3a>
   3db64:	0599      	lsls	r1, r3, #22
   3db66:	d402      	bmi.n	3db6e <_fflush_r+0x3a>
   3db68:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3db6a:	f004 fb7e 	bl	4226a <__retarget_lock_acquire_recursive>
   3db6e:	4628      	mov	r0, r5
   3db70:	4621      	mov	r1, r4
   3db72:	f7ff ff5b 	bl	3da2c <__sflush_r>
   3db76:	6e63      	ldr	r3, [r4, #100]	; 0x64
   3db78:	4605      	mov	r5, r0
   3db7a:	07da      	lsls	r2, r3, #31
   3db7c:	d4e0      	bmi.n	3db40 <_fflush_r+0xc>
   3db7e:	89a3      	ldrh	r3, [r4, #12]
   3db80:	059b      	lsls	r3, r3, #22
   3db82:	d4dd      	bmi.n	3db40 <_fflush_r+0xc>
   3db84:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3db86:	f004 fb71 	bl	4226c <__retarget_lock_release_recursive>
   3db8a:	e7d9      	b.n	3db40 <_fflush_r+0xc>
   3db8c:	4b05      	ldr	r3, [pc, #20]	; (3dba4 <_fflush_r+0x70>)
   3db8e:	429c      	cmp	r4, r3
   3db90:	d101      	bne.n	3db96 <_fflush_r+0x62>
   3db92:	68ac      	ldr	r4, [r5, #8]
   3db94:	e7df      	b.n	3db56 <_fflush_r+0x22>
   3db96:	4b04      	ldr	r3, [pc, #16]	; (3dba8 <_fflush_r+0x74>)
   3db98:	429c      	cmp	r4, r3
   3db9a:	bf08      	it	eq
   3db9c:	68ec      	ldreq	r4, [r5, #12]
   3db9e:	e7da      	b.n	3db56 <_fflush_r+0x22>
   3dba0:	00044d00 	.word	0x00044d00
   3dba4:	00044d20 	.word	0x00044d20
   3dba8:	00044ce0 	.word	0x00044ce0

0003dbac <std>:
   3dbac:	2300      	movs	r3, #0
   3dbae:	b510      	push	{r4, lr}
   3dbb0:	4604      	mov	r4, r0
   3dbb2:	6083      	str	r3, [r0, #8]
   3dbb4:	8181      	strh	r1, [r0, #12]
   3dbb6:	4619      	mov	r1, r3
   3dbb8:	6643      	str	r3, [r0, #100]	; 0x64
   3dbba:	81c2      	strh	r2, [r0, #14]
   3dbbc:	2208      	movs	r2, #8
   3dbbe:	6183      	str	r3, [r0, #24]
   3dbc0:	e9c0 3300 	strd	r3, r3, [r0]
   3dbc4:	e9c0 3304 	strd	r3, r3, [r0, #16]
   3dbc8:	305c      	adds	r0, #92	; 0x5c
   3dbca:	f003 ff12 	bl	419f2 <memset>
   3dbce:	4b05      	ldr	r3, [pc, #20]	; (3dbe4 <std+0x38>)
   3dbd0:	6224      	str	r4, [r4, #32]
   3dbd2:	6263      	str	r3, [r4, #36]	; 0x24
   3dbd4:	4b04      	ldr	r3, [pc, #16]	; (3dbe8 <std+0x3c>)
   3dbd6:	62a3      	str	r3, [r4, #40]	; 0x28
   3dbd8:	4b04      	ldr	r3, [pc, #16]	; (3dbec <std+0x40>)
   3dbda:	62e3      	str	r3, [r4, #44]	; 0x2c
   3dbdc:	4b04      	ldr	r3, [pc, #16]	; (3dbf0 <std+0x44>)
   3dbde:	6323      	str	r3, [r4, #48]	; 0x30
   3dbe0:	bd10      	pop	{r4, pc}
   3dbe2:	bf00      	nop
   3dbe4:	00041c99 	.word	0x00041c99
   3dbe8:	00041cbf 	.word	0x00041cbf
   3dbec:	00041cf7 	.word	0x00041cf7
   3dbf0:	00041d1b 	.word	0x00041d1b

0003dbf4 <_cleanup_r>:
   3dbf4:	4901      	ldr	r1, [pc, #4]	; (3dbfc <_cleanup_r+0x8>)
   3dbf6:	f004 ba14 	b.w	42022 <_fwalk_reent>
   3dbfa:	bf00      	nop
   3dbfc:	0003db35 	.word	0x0003db35

0003dc00 <__sfp_lock_acquire>:
   3dc00:	4801      	ldr	r0, [pc, #4]	; (3dc08 <__sfp_lock_acquire+0x8>)
   3dc02:	f004 bb32 	b.w	4226a <__retarget_lock_acquire_recursive>
   3dc06:	bf00      	nop
   3dc08:	2002ca08 	.word	0x2002ca08

0003dc0c <__sfp_lock_release>:
   3dc0c:	4801      	ldr	r0, [pc, #4]	; (3dc14 <__sfp_lock_release+0x8>)
   3dc0e:	f004 bb2d 	b.w	4226c <__retarget_lock_release_recursive>
   3dc12:	bf00      	nop
   3dc14:	2002ca08 	.word	0x2002ca08

0003dc18 <__sinit_lock_acquire>:
   3dc18:	4801      	ldr	r0, [pc, #4]	; (3dc20 <__sinit_lock_acquire+0x8>)
   3dc1a:	f004 bb26 	b.w	4226a <__retarget_lock_acquire_recursive>
   3dc1e:	bf00      	nop
   3dc20:	2002ca03 	.word	0x2002ca03

0003dc24 <__sinit_lock_release>:
   3dc24:	4801      	ldr	r0, [pc, #4]	; (3dc2c <__sinit_lock_release+0x8>)
   3dc26:	f004 bb21 	b.w	4226c <__retarget_lock_release_recursive>
   3dc2a:	bf00      	nop
   3dc2c:	2002ca03 	.word	0x2002ca03

0003dc30 <__sinit>:
   3dc30:	b510      	push	{r4, lr}
   3dc32:	4604      	mov	r4, r0
   3dc34:	f7ff fff0 	bl	3dc18 <__sinit_lock_acquire>
   3dc38:	69a3      	ldr	r3, [r4, #24]
   3dc3a:	b11b      	cbz	r3, 3dc44 <__sinit+0x14>
   3dc3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3dc40:	f7ff bff0 	b.w	3dc24 <__sinit_lock_release>
   3dc44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   3dc48:	6523      	str	r3, [r4, #80]	; 0x50
   3dc4a:	4620      	mov	r0, r4
   3dc4c:	4b12      	ldr	r3, [pc, #72]	; (3dc98 <__sinit+0x68>)
   3dc4e:	4a13      	ldr	r2, [pc, #76]	; (3dc9c <__sinit+0x6c>)
   3dc50:	681b      	ldr	r3, [r3, #0]
   3dc52:	62a2      	str	r2, [r4, #40]	; 0x28
   3dc54:	42a3      	cmp	r3, r4
   3dc56:	bf04      	itt	eq
   3dc58:	2301      	moveq	r3, #1
   3dc5a:	61a3      	streq	r3, [r4, #24]
   3dc5c:	f000 f820 	bl	3dca0 <__sfp>
   3dc60:	6060      	str	r0, [r4, #4]
   3dc62:	4620      	mov	r0, r4
   3dc64:	f000 f81c 	bl	3dca0 <__sfp>
   3dc68:	60a0      	str	r0, [r4, #8]
   3dc6a:	4620      	mov	r0, r4
   3dc6c:	f000 f818 	bl	3dca0 <__sfp>
   3dc70:	2200      	movs	r2, #0
   3dc72:	60e0      	str	r0, [r4, #12]
   3dc74:	2104      	movs	r1, #4
   3dc76:	6860      	ldr	r0, [r4, #4]
   3dc78:	f7ff ff98 	bl	3dbac <std>
   3dc7c:	2201      	movs	r2, #1
   3dc7e:	2109      	movs	r1, #9
   3dc80:	68a0      	ldr	r0, [r4, #8]
   3dc82:	f7ff ff93 	bl	3dbac <std>
   3dc86:	2202      	movs	r2, #2
   3dc88:	2112      	movs	r1, #18
   3dc8a:	68e0      	ldr	r0, [r4, #12]
   3dc8c:	f7ff ff8e 	bl	3dbac <std>
   3dc90:	2301      	movs	r3, #1
   3dc92:	61a3      	str	r3, [r4, #24]
   3dc94:	e7d2      	b.n	3dc3c <__sinit+0xc>
   3dc96:	bf00      	nop
   3dc98:	00044cb4 	.word	0x00044cb4
   3dc9c:	0003dbf5 	.word	0x0003dbf5

0003dca0 <__sfp>:
   3dca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3dca2:	4607      	mov	r7, r0
   3dca4:	f7ff ffac 	bl	3dc00 <__sfp_lock_acquire>
   3dca8:	4b1e      	ldr	r3, [pc, #120]	; (3dd24 <__sfp+0x84>)
   3dcaa:	681e      	ldr	r6, [r3, #0]
   3dcac:	69b3      	ldr	r3, [r6, #24]
   3dcae:	b913      	cbnz	r3, 3dcb6 <__sfp+0x16>
   3dcb0:	4630      	mov	r0, r6
   3dcb2:	f7ff ffbd 	bl	3dc30 <__sinit>
   3dcb6:	3648      	adds	r6, #72	; 0x48
   3dcb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   3dcbc:	3b01      	subs	r3, #1
   3dcbe:	d503      	bpl.n	3dcc8 <__sfp+0x28>
   3dcc0:	6833      	ldr	r3, [r6, #0]
   3dcc2:	b30b      	cbz	r3, 3dd08 <__sfp+0x68>
   3dcc4:	6836      	ldr	r6, [r6, #0]
   3dcc6:	e7f7      	b.n	3dcb8 <__sfp+0x18>
   3dcc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   3dccc:	b9d5      	cbnz	r5, 3dd04 <__sfp+0x64>
   3dcce:	4b16      	ldr	r3, [pc, #88]	; (3dd28 <__sfp+0x88>)
   3dcd0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   3dcd4:	6665      	str	r5, [r4, #100]	; 0x64
   3dcd6:	60e3      	str	r3, [r4, #12]
   3dcd8:	f004 fac6 	bl	42268 <__retarget_lock_init_recursive>
   3dcdc:	f7ff ff96 	bl	3dc0c <__sfp_lock_release>
   3dce0:	6025      	str	r5, [r4, #0]
   3dce2:	61a5      	str	r5, [r4, #24]
   3dce4:	2208      	movs	r2, #8
   3dce6:	4629      	mov	r1, r5
   3dce8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   3dcec:	e9c4 5501 	strd	r5, r5, [r4, #4]
   3dcf0:	e9c4 5504 	strd	r5, r5, [r4, #16]
   3dcf4:	f003 fe7d 	bl	419f2 <memset>
   3dcf8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   3dcfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   3dd00:	4620      	mov	r0, r4
   3dd02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3dd04:	3468      	adds	r4, #104	; 0x68
   3dd06:	e7d9      	b.n	3dcbc <__sfp+0x1c>
   3dd08:	2104      	movs	r1, #4
   3dd0a:	4638      	mov	r0, r7
   3dd0c:	f004 f973 	bl	41ff6 <__sfmoreglue>
   3dd10:	4604      	mov	r4, r0
   3dd12:	6030      	str	r0, [r6, #0]
   3dd14:	2800      	cmp	r0, #0
   3dd16:	d1d5      	bne.n	3dcc4 <__sfp+0x24>
   3dd18:	f7ff ff78 	bl	3dc0c <__sfp_lock_release>
   3dd1c:	230c      	movs	r3, #12
   3dd1e:	603b      	str	r3, [r7, #0]
   3dd20:	e7ee      	b.n	3dd00 <__sfp+0x60>
   3dd22:	bf00      	nop
   3dd24:	00044cb4 	.word	0x00044cb4
   3dd28:	ffff0001 	.word	0xffff0001

0003dd2c <__gethex>:
   3dd2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3dd30:	b08b      	sub	sp, #44	; 0x2c
   3dd32:	468b      	mov	fp, r1
   3dd34:	4690      	mov	r8, r2
   3dd36:	9306      	str	r3, [sp, #24]
   3dd38:	4bb5      	ldr	r3, [pc, #724]	; (3e010 <__gethex+0x2e4>)
   3dd3a:	9002      	str	r0, [sp, #8]
   3dd3c:	681b      	ldr	r3, [r3, #0]
   3dd3e:	4618      	mov	r0, r3
   3dd40:	9303      	str	r3, [sp, #12]
   3dd42:	f7dc f8cf 	bl	19ee4 <strlen>
   3dd46:	9b03      	ldr	r3, [sp, #12]
   3dd48:	f8db 2000 	ldr.w	r2, [fp]
   3dd4c:	4403      	add	r3, r0
   3dd4e:	9001      	str	r0, [sp, #4]
   3dd50:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   3dd54:	9307      	str	r3, [sp, #28]
   3dd56:	1c93      	adds	r3, r2, #2
   3dd58:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   3dd5c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   3dd60:	32fe      	adds	r2, #254	; 0xfe
   3dd62:	eb02 0a03 	add.w	sl, r2, r3
   3dd66:	461f      	mov	r7, r3
   3dd68:	f813 0b01 	ldrb.w	r0, [r3], #1
   3dd6c:	2830      	cmp	r0, #48	; 0x30
   3dd6e:	d0f8      	beq.n	3dd62 <__gethex+0x36>
   3dd70:	f004 f9af 	bl	420d2 <__hexdig_fun>
   3dd74:	4604      	mov	r4, r0
   3dd76:	2800      	cmp	r0, #0
   3dd78:	d167      	bne.n	3de4a <__gethex+0x11e>
   3dd7a:	9a01      	ldr	r2, [sp, #4]
   3dd7c:	4638      	mov	r0, r7
   3dd7e:	9903      	ldr	r1, [sp, #12]
   3dd80:	f004 f810 	bl	41da4 <strncmp>
   3dd84:	4605      	mov	r5, r0
   3dd86:	2800      	cmp	r0, #0
   3dd88:	d162      	bne.n	3de50 <__gethex+0x124>
   3dd8a:	9b01      	ldr	r3, [sp, #4]
   3dd8c:	5cf8      	ldrb	r0, [r7, r3]
   3dd8e:	18fe      	adds	r6, r7, r3
   3dd90:	f004 f99f 	bl	420d2 <__hexdig_fun>
   3dd94:	2800      	cmp	r0, #0
   3dd96:	d05d      	beq.n	3de54 <__gethex+0x128>
   3dd98:	4633      	mov	r3, r6
   3dd9a:	7818      	ldrb	r0, [r3, #0]
   3dd9c:	461f      	mov	r7, r3
   3dd9e:	3301      	adds	r3, #1
   3dda0:	2830      	cmp	r0, #48	; 0x30
   3dda2:	d0fa      	beq.n	3dd9a <__gethex+0x6e>
   3dda4:	f004 f995 	bl	420d2 <__hexdig_fun>
   3dda8:	fab0 f480 	clz	r4, r0
   3ddac:	4635      	mov	r5, r6
   3ddae:	f04f 0a01 	mov.w	sl, #1
   3ddb2:	0964      	lsrs	r4, r4, #5
   3ddb4:	463a      	mov	r2, r7
   3ddb6:	4616      	mov	r6, r2
   3ddb8:	3201      	adds	r2, #1
   3ddba:	7830      	ldrb	r0, [r6, #0]
   3ddbc:	f004 f989 	bl	420d2 <__hexdig_fun>
   3ddc0:	2800      	cmp	r0, #0
   3ddc2:	d1f8      	bne.n	3ddb6 <__gethex+0x8a>
   3ddc4:	9a01      	ldr	r2, [sp, #4]
   3ddc6:	4630      	mov	r0, r6
   3ddc8:	9903      	ldr	r1, [sp, #12]
   3ddca:	f003 ffeb 	bl	41da4 <strncmp>
   3ddce:	b950      	cbnz	r0, 3dde6 <__gethex+0xba>
   3ddd0:	b955      	cbnz	r5, 3dde8 <__gethex+0xbc>
   3ddd2:	9b01      	ldr	r3, [sp, #4]
   3ddd4:	18f5      	adds	r5, r6, r3
   3ddd6:	462a      	mov	r2, r5
   3ddd8:	4616      	mov	r6, r2
   3ddda:	3201      	adds	r2, #1
   3dddc:	7830      	ldrb	r0, [r6, #0]
   3ddde:	f004 f978 	bl	420d2 <__hexdig_fun>
   3dde2:	2800      	cmp	r0, #0
   3dde4:	d1f8      	bne.n	3ddd8 <__gethex+0xac>
   3dde6:	b10d      	cbz	r5, 3ddec <__gethex+0xc0>
   3dde8:	1bad      	subs	r5, r5, r6
   3ddea:	00ad      	lsls	r5, r5, #2
   3ddec:	7833      	ldrb	r3, [r6, #0]
   3ddee:	2b50      	cmp	r3, #80	; 0x50
   3ddf0:	d001      	beq.n	3ddf6 <__gethex+0xca>
   3ddf2:	2b70      	cmp	r3, #112	; 0x70
   3ddf4:	d13c      	bne.n	3de70 <__gethex+0x144>
   3ddf6:	7873      	ldrb	r3, [r6, #1]
   3ddf8:	2b2b      	cmp	r3, #43	; 0x2b
   3ddfa:	d02d      	beq.n	3de58 <__gethex+0x12c>
   3ddfc:	2b2d      	cmp	r3, #45	; 0x2d
   3ddfe:	d02f      	beq.n	3de60 <__gethex+0x134>
   3de00:	1c71      	adds	r1, r6, #1
   3de02:	f04f 0900 	mov.w	r9, #0
   3de06:	7808      	ldrb	r0, [r1, #0]
   3de08:	f004 f963 	bl	420d2 <__hexdig_fun>
   3de0c:	1e43      	subs	r3, r0, #1
   3de0e:	b2db      	uxtb	r3, r3
   3de10:	2b18      	cmp	r3, #24
   3de12:	d82d      	bhi.n	3de70 <__gethex+0x144>
   3de14:	f1a0 0210 	sub.w	r2, r0, #16
   3de18:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   3de1c:	f004 f959 	bl	420d2 <__hexdig_fun>
   3de20:	1e43      	subs	r3, r0, #1
   3de22:	b2db      	uxtb	r3, r3
   3de24:	2b18      	cmp	r3, #24
   3de26:	d91e      	bls.n	3de66 <__gethex+0x13a>
   3de28:	f1b9 0f00 	cmp.w	r9, #0
   3de2c:	d000      	beq.n	3de30 <__gethex+0x104>
   3de2e:	4252      	negs	r2, r2
   3de30:	4415      	add	r5, r2
   3de32:	f8cb 1000 	str.w	r1, [fp]
   3de36:	b1ec      	cbz	r4, 3de74 <__gethex+0x148>
   3de38:	f1ba 0f00 	cmp.w	sl, #0
   3de3c:	bf14      	ite	ne
   3de3e:	2700      	movne	r7, #0
   3de40:	2706      	moveq	r7, #6
   3de42:	4638      	mov	r0, r7
   3de44:	b00b      	add	sp, #44	; 0x2c
   3de46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3de4a:	2400      	movs	r4, #0
   3de4c:	4625      	mov	r5, r4
   3de4e:	e7b1      	b.n	3ddb4 <__gethex+0x88>
   3de50:	463e      	mov	r6, r7
   3de52:	4625      	mov	r5, r4
   3de54:	2401      	movs	r4, #1
   3de56:	e7c9      	b.n	3ddec <__gethex+0xc0>
   3de58:	f04f 0900 	mov.w	r9, #0
   3de5c:	1cb1      	adds	r1, r6, #2
   3de5e:	e7d2      	b.n	3de06 <__gethex+0xda>
   3de60:	f04f 0901 	mov.w	r9, #1
   3de64:	e7fa      	b.n	3de5c <__gethex+0x130>
   3de66:	230a      	movs	r3, #10
   3de68:	fb03 0202 	mla	r2, r3, r2, r0
   3de6c:	3a10      	subs	r2, #16
   3de6e:	e7d3      	b.n	3de18 <__gethex+0xec>
   3de70:	4631      	mov	r1, r6
   3de72:	e7de      	b.n	3de32 <__gethex+0x106>
   3de74:	1bf3      	subs	r3, r6, r7
   3de76:	4621      	mov	r1, r4
   3de78:	3b01      	subs	r3, #1
   3de7a:	2b07      	cmp	r3, #7
   3de7c:	dc4f      	bgt.n	3df1e <__gethex+0x1f2>
   3de7e:	9802      	ldr	r0, [sp, #8]
   3de80:	f04f 0b00 	mov.w	fp, #0
   3de84:	f004 fa43 	bl	4230e <_Balloc>
   3de88:	9b01      	ldr	r3, [sp, #4]
   3de8a:	f100 0914 	add.w	r9, r0, #20
   3de8e:	4604      	mov	r4, r0
   3de90:	f1c3 0301 	rsb	r3, r3, #1
   3de94:	46da      	mov	sl, fp
   3de96:	f8cd 9010 	str.w	r9, [sp, #16]
   3de9a:	9308      	str	r3, [sp, #32]
   3de9c:	42b7      	cmp	r7, r6
   3de9e:	d341      	bcc.n	3df24 <__gethex+0x1f8>
   3dea0:	9804      	ldr	r0, [sp, #16]
   3dea2:	f840 ab04 	str.w	sl, [r0], #4
   3dea6:	eba0 0009 	sub.w	r0, r0, r9
   3deaa:	1080      	asrs	r0, r0, #2
   3deac:	0147      	lsls	r7, r0, #5
   3deae:	6120      	str	r0, [r4, #16]
   3deb0:	4650      	mov	r0, sl
   3deb2:	f004 faf2 	bl	4249a <__hi0bits>
   3deb6:	f8d8 6000 	ldr.w	r6, [r8]
   3deba:	1a3f      	subs	r7, r7, r0
   3debc:	42b7      	cmp	r7, r6
   3debe:	dd63      	ble.n	3df88 <__gethex+0x25c>
   3dec0:	1bbf      	subs	r7, r7, r6
   3dec2:	4620      	mov	r0, r4
   3dec4:	4639      	mov	r1, r7
   3dec6:	f004 fd38 	bl	4293a <__any_on>
   3deca:	4682      	mov	sl, r0
   3decc:	b1a8      	cbz	r0, 3defa <__gethex+0x1ce>
   3dece:	1e7b      	subs	r3, r7, #1
   3ded0:	f04f 0a01 	mov.w	sl, #1
   3ded4:	1159      	asrs	r1, r3, #5
   3ded6:	f003 021f 	and.w	r2, r3, #31
   3deda:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   3dede:	fa0a f202 	lsl.w	r2, sl, r2
   3dee2:	420a      	tst	r2, r1
   3dee4:	d009      	beq.n	3defa <__gethex+0x1ce>
   3dee6:	4553      	cmp	r3, sl
   3dee8:	dd05      	ble.n	3def6 <__gethex+0x1ca>
   3deea:	1eb9      	subs	r1, r7, #2
   3deec:	4620      	mov	r0, r4
   3deee:	f004 fd24 	bl	4293a <__any_on>
   3def2:	2800      	cmp	r0, #0
   3def4:	d145      	bne.n	3df82 <__gethex+0x256>
   3def6:	f04f 0a02 	mov.w	sl, #2
   3defa:	443d      	add	r5, r7
   3defc:	4639      	mov	r1, r7
   3defe:	4620      	mov	r0, r4
   3df00:	f004 f8ad 	bl	4205e <rshift>
   3df04:	f8d8 3008 	ldr.w	r3, [r8, #8]
   3df08:	42ab      	cmp	r3, r5
   3df0a:	da4b      	bge.n	3dfa4 <__gethex+0x278>
   3df0c:	4621      	mov	r1, r4
   3df0e:	9802      	ldr	r0, [sp, #8]
   3df10:	f004 fa31 	bl	42376 <_Bfree>
   3df14:	2300      	movs	r3, #0
   3df16:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3df18:	27a3      	movs	r7, #163	; 0xa3
   3df1a:	6013      	str	r3, [r2, #0]
   3df1c:	e791      	b.n	3de42 <__gethex+0x116>
   3df1e:	3101      	adds	r1, #1
   3df20:	105b      	asrs	r3, r3, #1
   3df22:	e7aa      	b.n	3de7a <__gethex+0x14e>
   3df24:	1e73      	subs	r3, r6, #1
   3df26:	9a07      	ldr	r2, [sp, #28]
   3df28:	9305      	str	r3, [sp, #20]
   3df2a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   3df2e:	4293      	cmp	r3, r2
   3df30:	d017      	beq.n	3df62 <__gethex+0x236>
   3df32:	f1bb 0f20 	cmp.w	fp, #32
   3df36:	d106      	bne.n	3df46 <__gethex+0x21a>
   3df38:	9b04      	ldr	r3, [sp, #16]
   3df3a:	f843 ab04 	str.w	sl, [r3], #4
   3df3e:	f04f 0a00 	mov.w	sl, #0
   3df42:	9304      	str	r3, [sp, #16]
   3df44:	46d3      	mov	fp, sl
   3df46:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   3df4a:	f004 f8c2 	bl	420d2 <__hexdig_fun>
   3df4e:	f000 000f 	and.w	r0, r0, #15
   3df52:	9b05      	ldr	r3, [sp, #20]
   3df54:	fa00 f00b 	lsl.w	r0, r0, fp
   3df58:	f10b 0b04 	add.w	fp, fp, #4
   3df5c:	ea4a 0a00 	orr.w	sl, sl, r0
   3df60:	e00d      	b.n	3df7e <__gethex+0x252>
   3df62:	9b05      	ldr	r3, [sp, #20]
   3df64:	9a08      	ldr	r2, [sp, #32]
   3df66:	4413      	add	r3, r2
   3df68:	42bb      	cmp	r3, r7
   3df6a:	d3e2      	bcc.n	3df32 <__gethex+0x206>
   3df6c:	4618      	mov	r0, r3
   3df6e:	9a01      	ldr	r2, [sp, #4]
   3df70:	9903      	ldr	r1, [sp, #12]
   3df72:	9309      	str	r3, [sp, #36]	; 0x24
   3df74:	f003 ff16 	bl	41da4 <strncmp>
   3df78:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3df7a:	2800      	cmp	r0, #0
   3df7c:	d1d9      	bne.n	3df32 <__gethex+0x206>
   3df7e:	461e      	mov	r6, r3
   3df80:	e78c      	b.n	3de9c <__gethex+0x170>
   3df82:	f04f 0a03 	mov.w	sl, #3
   3df86:	e7b8      	b.n	3defa <__gethex+0x1ce>
   3df88:	da09      	bge.n	3df9e <__gethex+0x272>
   3df8a:	1bf7      	subs	r7, r6, r7
   3df8c:	4621      	mov	r1, r4
   3df8e:	9802      	ldr	r0, [sp, #8]
   3df90:	463a      	mov	r2, r7
   3df92:	1bed      	subs	r5, r5, r7
   3df94:	f004 fb69 	bl	4266a <__lshift>
   3df98:	4604      	mov	r4, r0
   3df9a:	f100 0914 	add.w	r9, r0, #20
   3df9e:	f04f 0a00 	mov.w	sl, #0
   3dfa2:	e7af      	b.n	3df04 <__gethex+0x1d8>
   3dfa4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   3dfa8:	42ab      	cmp	r3, r5
   3dfaa:	dd6d      	ble.n	3e088 <__gethex+0x35c>
   3dfac:	1b5d      	subs	r5, r3, r5
   3dfae:	42ae      	cmp	r6, r5
   3dfb0:	dc30      	bgt.n	3e014 <__gethex+0x2e8>
   3dfb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   3dfb6:	2b02      	cmp	r3, #2
   3dfb8:	d022      	beq.n	3e000 <__gethex+0x2d4>
   3dfba:	2b03      	cmp	r3, #3
   3dfbc:	d024      	beq.n	3e008 <__gethex+0x2dc>
   3dfbe:	2b01      	cmp	r3, #1
   3dfc0:	d115      	bne.n	3dfee <__gethex+0x2c2>
   3dfc2:	42ae      	cmp	r6, r5
   3dfc4:	d113      	bne.n	3dfee <__gethex+0x2c2>
   3dfc6:	2e01      	cmp	r6, #1
   3dfc8:	d10b      	bne.n	3dfe2 <__gethex+0x2b6>
   3dfca:	f8d8 3004 	ldr.w	r3, [r8, #4]
   3dfce:	2762      	movs	r7, #98	; 0x62
   3dfd0:	9a06      	ldr	r2, [sp, #24]
   3dfd2:	6013      	str	r3, [r2, #0]
   3dfd4:	2301      	movs	r3, #1
   3dfd6:	6123      	str	r3, [r4, #16]
   3dfd8:	f8c9 3000 	str.w	r3, [r9]
   3dfdc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   3dfde:	601c      	str	r4, [r3, #0]
   3dfe0:	e72f      	b.n	3de42 <__gethex+0x116>
   3dfe2:	1e71      	subs	r1, r6, #1
   3dfe4:	4620      	mov	r0, r4
   3dfe6:	f004 fca8 	bl	4293a <__any_on>
   3dfea:	2800      	cmp	r0, #0
   3dfec:	d1ed      	bne.n	3dfca <__gethex+0x29e>
   3dfee:	4621      	mov	r1, r4
   3dff0:	9802      	ldr	r0, [sp, #8]
   3dff2:	f004 f9c0 	bl	42376 <_Bfree>
   3dff6:	2300      	movs	r3, #0
   3dff8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3dffa:	2750      	movs	r7, #80	; 0x50
   3dffc:	6013      	str	r3, [r2, #0]
   3dffe:	e720      	b.n	3de42 <__gethex+0x116>
   3e000:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3e002:	2b00      	cmp	r3, #0
   3e004:	d1f3      	bne.n	3dfee <__gethex+0x2c2>
   3e006:	e7e0      	b.n	3dfca <__gethex+0x29e>
   3e008:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3e00a:	2b00      	cmp	r3, #0
   3e00c:	d1dd      	bne.n	3dfca <__gethex+0x29e>
   3e00e:	e7ee      	b.n	3dfee <__gethex+0x2c2>
   3e010:	00044d40 	.word	0x00044d40
   3e014:	1e6f      	subs	r7, r5, #1
   3e016:	f1ba 0f00 	cmp.w	sl, #0
   3e01a:	d132      	bne.n	3e082 <__gethex+0x356>
   3e01c:	b127      	cbz	r7, 3e028 <__gethex+0x2fc>
   3e01e:	4639      	mov	r1, r7
   3e020:	4620      	mov	r0, r4
   3e022:	f004 fc8a 	bl	4293a <__any_on>
   3e026:	4682      	mov	sl, r0
   3e028:	117a      	asrs	r2, r7, #5
   3e02a:	2301      	movs	r3, #1
   3e02c:	f007 071f 	and.w	r7, r7, #31
   3e030:	4629      	mov	r1, r5
   3e032:	4620      	mov	r0, r4
   3e034:	1b76      	subs	r6, r6, r5
   3e036:	fa03 f707 	lsl.w	r7, r3, r7
   3e03a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
   3e03e:	421f      	tst	r7, r3
   3e040:	f04f 0702 	mov.w	r7, #2
   3e044:	bf18      	it	ne
   3e046:	f04a 0a02 	orrne.w	sl, sl, #2
   3e04a:	f004 f808 	bl	4205e <rshift>
   3e04e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   3e052:	f1ba 0f00 	cmp.w	sl, #0
   3e056:	d048      	beq.n	3e0ea <__gethex+0x3be>
   3e058:	f8d8 300c 	ldr.w	r3, [r8, #12]
   3e05c:	2b02      	cmp	r3, #2
   3e05e:	d015      	beq.n	3e08c <__gethex+0x360>
   3e060:	2b03      	cmp	r3, #3
   3e062:	d017      	beq.n	3e094 <__gethex+0x368>
   3e064:	2b01      	cmp	r3, #1
   3e066:	d109      	bne.n	3e07c <__gethex+0x350>
   3e068:	f01a 0f02 	tst.w	sl, #2
   3e06c:	d006      	beq.n	3e07c <__gethex+0x350>
   3e06e:	f8d9 3000 	ldr.w	r3, [r9]
   3e072:	ea4a 0a03 	orr.w	sl, sl, r3
   3e076:	f01a 0f01 	tst.w	sl, #1
   3e07a:	d10e      	bne.n	3e09a <__gethex+0x36e>
   3e07c:	f047 0710 	orr.w	r7, r7, #16
   3e080:	e033      	b.n	3e0ea <__gethex+0x3be>
   3e082:	f04f 0a01 	mov.w	sl, #1
   3e086:	e7cf      	b.n	3e028 <__gethex+0x2fc>
   3e088:	2701      	movs	r7, #1
   3e08a:	e7e2      	b.n	3e052 <__gethex+0x326>
   3e08c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3e08e:	f1c3 0301 	rsb	r3, r3, #1
   3e092:	9315      	str	r3, [sp, #84]	; 0x54
   3e094:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3e096:	2b00      	cmp	r3, #0
   3e098:	d0f0      	beq.n	3e07c <__gethex+0x350>
   3e09a:	f8d4 9010 	ldr.w	r9, [r4, #16]
   3e09e:	f104 0314 	add.w	r3, r4, #20
   3e0a2:	f04f 0c00 	mov.w	ip, #0
   3e0a6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
   3e0aa:	eb03 010a 	add.w	r1, r3, sl
   3e0ae:	4618      	mov	r0, r3
   3e0b0:	f853 2b04 	ldr.w	r2, [r3], #4
   3e0b4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   3e0b8:	d01c      	beq.n	3e0f4 <__gethex+0x3c8>
   3e0ba:	3201      	adds	r2, #1
   3e0bc:	6002      	str	r2, [r0, #0]
   3e0be:	2f02      	cmp	r7, #2
   3e0c0:	f104 0314 	add.w	r3, r4, #20
   3e0c4:	d138      	bne.n	3e138 <__gethex+0x40c>
   3e0c6:	f8d8 2000 	ldr.w	r2, [r8]
   3e0ca:	3a01      	subs	r2, #1
   3e0cc:	42b2      	cmp	r2, r6
   3e0ce:	d10a      	bne.n	3e0e6 <__gethex+0x3ba>
   3e0d0:	1171      	asrs	r1, r6, #5
   3e0d2:	2201      	movs	r2, #1
   3e0d4:	f006 061f 	and.w	r6, r6, #31
   3e0d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   3e0dc:	fa02 f606 	lsl.w	r6, r2, r6
   3e0e0:	421e      	tst	r6, r3
   3e0e2:	bf18      	it	ne
   3e0e4:	4617      	movne	r7, r2
   3e0e6:	f047 0720 	orr.w	r7, r7, #32
   3e0ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   3e0ec:	601c      	str	r4, [r3, #0]
   3e0ee:	9b06      	ldr	r3, [sp, #24]
   3e0f0:	601d      	str	r5, [r3, #0]
   3e0f2:	e6a6      	b.n	3de42 <__gethex+0x116>
   3e0f4:	4299      	cmp	r1, r3
   3e0f6:	f843 cc04 	str.w	ip, [r3, #-4]
   3e0fa:	d8d8      	bhi.n	3e0ae <__gethex+0x382>
   3e0fc:	68a3      	ldr	r3, [r4, #8]
   3e0fe:	4599      	cmp	r9, r3
   3e100:	db12      	blt.n	3e128 <__gethex+0x3fc>
   3e102:	6861      	ldr	r1, [r4, #4]
   3e104:	9802      	ldr	r0, [sp, #8]
   3e106:	3101      	adds	r1, #1
   3e108:	f004 f901 	bl	4230e <_Balloc>
   3e10c:	6922      	ldr	r2, [r4, #16]
   3e10e:	4683      	mov	fp, r0
   3e110:	f104 010c 	add.w	r1, r4, #12
   3e114:	3202      	adds	r2, #2
   3e116:	300c      	adds	r0, #12
   3e118:	0092      	lsls	r2, r2, #2
   3e11a:	f003 fc4a 	bl	419b2 <memcpy>
   3e11e:	4621      	mov	r1, r4
   3e120:	465c      	mov	r4, fp
   3e122:	9802      	ldr	r0, [sp, #8]
   3e124:	f004 f927 	bl	42376 <_Bfree>
   3e128:	6923      	ldr	r3, [r4, #16]
   3e12a:	1c5a      	adds	r2, r3, #1
   3e12c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   3e130:	6122      	str	r2, [r4, #16]
   3e132:	2201      	movs	r2, #1
   3e134:	615a      	str	r2, [r3, #20]
   3e136:	e7c2      	b.n	3e0be <__gethex+0x392>
   3e138:	6922      	ldr	r2, [r4, #16]
   3e13a:	454a      	cmp	r2, r9
   3e13c:	dd0b      	ble.n	3e156 <__gethex+0x42a>
   3e13e:	2101      	movs	r1, #1
   3e140:	4620      	mov	r0, r4
   3e142:	f003 ff8c 	bl	4205e <rshift>
   3e146:	3501      	adds	r5, #1
   3e148:	f8d8 3008 	ldr.w	r3, [r8, #8]
   3e14c:	42ab      	cmp	r3, r5
   3e14e:	f6ff aedd 	blt.w	3df0c <__gethex+0x1e0>
   3e152:	2701      	movs	r7, #1
   3e154:	e7c7      	b.n	3e0e6 <__gethex+0x3ba>
   3e156:	f016 061f 	ands.w	r6, r6, #31
   3e15a:	d0fa      	beq.n	3e152 <__gethex+0x426>
   3e15c:	449a      	add	sl, r3
   3e15e:	f1c6 0620 	rsb	r6, r6, #32
   3e162:	f85a 0c04 	ldr.w	r0, [sl, #-4]
   3e166:	f004 f998 	bl	4249a <__hi0bits>
   3e16a:	42b0      	cmp	r0, r6
   3e16c:	dbe7      	blt.n	3e13e <__gethex+0x412>
   3e16e:	e7f0      	b.n	3e152 <__gethex+0x426>

0003e170 <_localeconv_r>:
   3e170:	4800      	ldr	r0, [pc, #0]	; (3e174 <_localeconv_r+0x4>)
   3e172:	4770      	bx	lr
   3e174:	20031de4 	.word	0x20031de4

0003e178 <_lseek_r>:
   3e178:	b538      	push	{r3, r4, r5, lr}
   3e17a:	4605      	mov	r5, r0
   3e17c:	4c06      	ldr	r4, [pc, #24]	; (3e198 <_lseek_r+0x20>)
   3e17e:	4608      	mov	r0, r1
   3e180:	4611      	mov	r1, r2
   3e182:	2200      	movs	r2, #0
   3e184:	6022      	str	r2, [r4, #0]
   3e186:	461a      	mov	r2, r3
   3e188:	f001 fb85 	bl	3f896 <_lseek>
   3e18c:	1c43      	adds	r3, r0, #1
   3e18e:	d102      	bne.n	3e196 <_lseek_r+0x1e>
   3e190:	6823      	ldr	r3, [r4, #0]
   3e192:	b103      	cbz	r3, 3e196 <_lseek_r+0x1e>
   3e194:	602b      	str	r3, [r5, #0]
   3e196:	bd38      	pop	{r3, r4, r5, pc}
   3e198:	2002c9fc 	.word	0x2002c9fc

0003e19c <__smakebuf_r>:
   3e19c:	898b      	ldrh	r3, [r1, #12]
   3e19e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3e1a0:	079d      	lsls	r5, r3, #30
   3e1a2:	4606      	mov	r6, r0
   3e1a4:	460c      	mov	r4, r1
   3e1a6:	d507      	bpl.n	3e1b8 <__smakebuf_r+0x1c>
   3e1a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
   3e1ac:	6023      	str	r3, [r4, #0]
   3e1ae:	6123      	str	r3, [r4, #16]
   3e1b0:	2301      	movs	r3, #1
   3e1b2:	6163      	str	r3, [r4, #20]
   3e1b4:	b002      	add	sp, #8
   3e1b6:	bd70      	pop	{r4, r5, r6, pc}
   3e1b8:	ab01      	add	r3, sp, #4
   3e1ba:	466a      	mov	r2, sp
   3e1bc:	f004 f857 	bl	4226e <__swhatbuf_r>
   3e1c0:	9900      	ldr	r1, [sp, #0]
   3e1c2:	4605      	mov	r5, r0
   3e1c4:	4630      	mov	r0, r6
   3e1c6:	f7fe fc63 	bl	3ca90 <_malloc_r>
   3e1ca:	b948      	cbnz	r0, 3e1e0 <__smakebuf_r+0x44>
   3e1cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3e1d0:	059a      	lsls	r2, r3, #22
   3e1d2:	d4ef      	bmi.n	3e1b4 <__smakebuf_r+0x18>
   3e1d4:	f023 0303 	bic.w	r3, r3, #3
   3e1d8:	f043 0302 	orr.w	r3, r3, #2
   3e1dc:	81a3      	strh	r3, [r4, #12]
   3e1de:	e7e3      	b.n	3e1a8 <__smakebuf_r+0xc>
   3e1e0:	4b0d      	ldr	r3, [pc, #52]	; (3e218 <__smakebuf_r+0x7c>)
   3e1e2:	62b3      	str	r3, [r6, #40]	; 0x28
   3e1e4:	89a3      	ldrh	r3, [r4, #12]
   3e1e6:	6020      	str	r0, [r4, #0]
   3e1e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3e1ec:	6120      	str	r0, [r4, #16]
   3e1ee:	81a3      	strh	r3, [r4, #12]
   3e1f0:	9b00      	ldr	r3, [sp, #0]
   3e1f2:	6163      	str	r3, [r4, #20]
   3e1f4:	9b01      	ldr	r3, [sp, #4]
   3e1f6:	b15b      	cbz	r3, 3e210 <__smakebuf_r+0x74>
   3e1f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   3e1fc:	4630      	mov	r0, r6
   3e1fe:	f000 fca5 	bl	3eb4c <_isatty_r>
   3e202:	b128      	cbz	r0, 3e210 <__smakebuf_r+0x74>
   3e204:	89a3      	ldrh	r3, [r4, #12]
   3e206:	f023 0303 	bic.w	r3, r3, #3
   3e20a:	f043 0301 	orr.w	r3, r3, #1
   3e20e:	81a3      	strh	r3, [r4, #12]
   3e210:	89a3      	ldrh	r3, [r4, #12]
   3e212:	431d      	orrs	r5, r3
   3e214:	81a5      	strh	r5, [r4, #12]
   3e216:	e7cd      	b.n	3e1b4 <__smakebuf_r+0x18>
   3e218:	0003dbf5 	.word	0x0003dbf5

0003e21c <__malloc_lock>:
   3e21c:	4801      	ldr	r0, [pc, #4]	; (3e224 <__malloc_lock+0x8>)
   3e21e:	f004 b824 	b.w	4226a <__retarget_lock_acquire_recursive>
   3e222:	bf00      	nop
   3e224:	2002ca04 	.word	0x2002ca04

0003e228 <__malloc_unlock>:
   3e228:	4801      	ldr	r0, [pc, #4]	; (3e230 <__malloc_unlock+0x8>)
   3e22a:	f004 b81f 	b.w	4226c <__retarget_lock_release_recursive>
   3e22e:	bf00      	nop
   3e230:	2002ca04 	.word	0x2002ca04

0003e234 <__pow5mult>:
   3e234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e238:	4615      	mov	r5, r2
   3e23a:	f012 0203 	ands.w	r2, r2, #3
   3e23e:	4606      	mov	r6, r0
   3e240:	460f      	mov	r7, r1
   3e242:	d007      	beq.n	3e254 <__pow5mult+0x20>
   3e244:	3a01      	subs	r2, #1
   3e246:	4c21      	ldr	r4, [pc, #132]	; (3e2cc <__pow5mult+0x98>)
   3e248:	2300      	movs	r3, #0
   3e24a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   3e24e:	f004 f8a9 	bl	423a4 <__multadd>
   3e252:	4607      	mov	r7, r0
   3e254:	10ad      	asrs	r5, r5, #2
   3e256:	d035      	beq.n	3e2c4 <__pow5mult+0x90>
   3e258:	6a74      	ldr	r4, [r6, #36]	; 0x24
   3e25a:	b93c      	cbnz	r4, 3e26c <__pow5mult+0x38>
   3e25c:	2010      	movs	r0, #16
   3e25e:	f7fe fbb9 	bl	3c9d4 <malloc>
   3e262:	6270      	str	r0, [r6, #36]	; 0x24
   3e264:	6004      	str	r4, [r0, #0]
   3e266:	60c4      	str	r4, [r0, #12]
   3e268:	e9c0 4401 	strd	r4, r4, [r0, #4]
   3e26c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   3e270:	f8d8 4008 	ldr.w	r4, [r8, #8]
   3e274:	b94c      	cbnz	r4, 3e28a <__pow5mult+0x56>
   3e276:	f240 2171 	movw	r1, #625	; 0x271
   3e27a:	4630      	mov	r0, r6
   3e27c:	f004 f95d 	bl	4253a <__i2b>
   3e280:	2300      	movs	r3, #0
   3e282:	4604      	mov	r4, r0
   3e284:	f8c8 0008 	str.w	r0, [r8, #8]
   3e288:	6003      	str	r3, [r0, #0]
   3e28a:	f04f 0800 	mov.w	r8, #0
   3e28e:	07eb      	lsls	r3, r5, #31
   3e290:	d50a      	bpl.n	3e2a8 <__pow5mult+0x74>
   3e292:	4639      	mov	r1, r7
   3e294:	4622      	mov	r2, r4
   3e296:	4630      	mov	r0, r6
   3e298:	f004 f958 	bl	4254c <__multiply>
   3e29c:	4681      	mov	r9, r0
   3e29e:	4639      	mov	r1, r7
   3e2a0:	4630      	mov	r0, r6
   3e2a2:	464f      	mov	r7, r9
   3e2a4:	f004 f867 	bl	42376 <_Bfree>
   3e2a8:	106d      	asrs	r5, r5, #1
   3e2aa:	d00b      	beq.n	3e2c4 <__pow5mult+0x90>
   3e2ac:	6820      	ldr	r0, [r4, #0]
   3e2ae:	b938      	cbnz	r0, 3e2c0 <__pow5mult+0x8c>
   3e2b0:	4622      	mov	r2, r4
   3e2b2:	4621      	mov	r1, r4
   3e2b4:	4630      	mov	r0, r6
   3e2b6:	f004 f949 	bl	4254c <__multiply>
   3e2ba:	6020      	str	r0, [r4, #0]
   3e2bc:	f8c0 8000 	str.w	r8, [r0]
   3e2c0:	4604      	mov	r4, r0
   3e2c2:	e7e4      	b.n	3e28e <__pow5mult+0x5a>
   3e2c4:	4638      	mov	r0, r7
   3e2c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3e2ca:	bf00      	nop
   3e2cc:	00044d4c 	.word	0x00044d4c

0003e2d0 <__ulp>:
   3e2d0:	4b10      	ldr	r3, [pc, #64]	; (3e314 <__ulp+0x44>)
   3e2d2:	ee10 2a90 	vmov	r2, s1
   3e2d6:	401a      	ands	r2, r3
   3e2d8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   3e2dc:	2b00      	cmp	r3, #0
   3e2de:	dd04      	ble.n	3e2ea <__ulp+0x1a>
   3e2e0:	2000      	movs	r0, #0
   3e2e2:	4619      	mov	r1, r3
   3e2e4:	ec41 0b10 	vmov	d0, r0, r1
   3e2e8:	4770      	bx	lr
   3e2ea:	425b      	negs	r3, r3
   3e2ec:	2000      	movs	r0, #0
   3e2ee:	2100      	movs	r1, #0
   3e2f0:	151b      	asrs	r3, r3, #20
   3e2f2:	2b13      	cmp	r3, #19
   3e2f4:	dc04      	bgt.n	3e300 <__ulp+0x30>
   3e2f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   3e2fa:	fa42 f103 	asr.w	r1, r2, r3
   3e2fe:	e7f1      	b.n	3e2e4 <__ulp+0x14>
   3e300:	3b14      	subs	r3, #20
   3e302:	2b1e      	cmp	r3, #30
   3e304:	bfd6      	itet	le
   3e306:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   3e30a:	2301      	movgt	r3, #1
   3e30c:	fa22 f303 	lsrle.w	r3, r2, r3
   3e310:	4618      	mov	r0, r3
   3e312:	e7e7      	b.n	3e2e4 <__ulp+0x14>
   3e314:	7ff00000 	.word	0x7ff00000

0003e318 <__b2d>:
   3e318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e31a:	6905      	ldr	r5, [r0, #16]
   3e31c:	f100 0714 	add.w	r7, r0, #20
   3e320:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   3e324:	f855 4c04 	ldr.w	r4, [r5, #-4]
   3e328:	1f2e      	subs	r6, r5, #4
   3e32a:	4620      	mov	r0, r4
   3e32c:	f004 f8b5 	bl	4249a <__hi0bits>
   3e330:	f1c0 0320 	rsb	r3, r0, #32
   3e334:	280a      	cmp	r0, #10
   3e336:	f8df c07c 	ldr.w	ip, [pc, #124]	; 3e3b4 <__b2d+0x9c>
   3e33a:	600b      	str	r3, [r1, #0]
   3e33c:	dc15      	bgt.n	3e36a <__b2d+0x52>
   3e33e:	f1c0 0e0b 	rsb	lr, r0, #11
   3e342:	42b7      	cmp	r7, r6
   3e344:	f100 0015 	add.w	r0, r0, #21
   3e348:	fa24 f10e 	lsr.w	r1, r4, lr
   3e34c:	fa04 f000 	lsl.w	r0, r4, r0
   3e350:	ea41 030c 	orr.w	r3, r1, ip
   3e354:	bf34      	ite	cc
   3e356:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   3e35a:	2100      	movcs	r1, #0
   3e35c:	fa21 f10e 	lsr.w	r1, r1, lr
   3e360:	ea40 0201 	orr.w	r2, r0, r1
   3e364:	ec43 2b10 	vmov	d0, r2, r3
   3e368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3e36a:	42b7      	cmp	r7, r6
   3e36c:	bf3a      	itte	cc
   3e36e:	f1a5 0608 	subcc.w	r6, r5, #8
   3e372:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   3e376:	2100      	movcs	r1, #0
   3e378:	380b      	subs	r0, #11
   3e37a:	d017      	beq.n	3e3ac <__b2d+0x94>
   3e37c:	f1c0 0c20 	rsb	ip, r0, #32
   3e380:	fa04 f500 	lsl.w	r5, r4, r0
   3e384:	42be      	cmp	r6, r7
   3e386:	fa01 f000 	lsl.w	r0, r1, r0
   3e38a:	fa21 f40c 	lsr.w	r4, r1, ip
   3e38e:	ea45 0504 	orr.w	r5, r5, r4
   3e392:	bf8c      	ite	hi
   3e394:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   3e398:	2400      	movls	r4, #0
   3e39a:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   3e39e:	fa24 f40c 	lsr.w	r4, r4, ip
   3e3a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   3e3a6:	ea40 0204 	orr.w	r2, r0, r4
   3e3aa:	e7db      	b.n	3e364 <__b2d+0x4c>
   3e3ac:	ea44 030c 	orr.w	r3, r4, ip
   3e3b0:	460a      	mov	r2, r1
   3e3b2:	e7d7      	b.n	3e364 <__b2d+0x4c>
   3e3b4:	3ff00000 	.word	0x3ff00000

0003e3b8 <_svfiprintf_r>:
   3e3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e3bc:	461e      	mov	r6, r3
   3e3be:	898b      	ldrh	r3, [r1, #12]
   3e3c0:	b09d      	sub	sp, #116	; 0x74
   3e3c2:	4607      	mov	r7, r0
   3e3c4:	061b      	lsls	r3, r3, #24
   3e3c6:	460d      	mov	r5, r1
   3e3c8:	4614      	mov	r4, r2
   3e3ca:	d50e      	bpl.n	3e3ea <_svfiprintf_r+0x32>
   3e3cc:	690b      	ldr	r3, [r1, #16]
   3e3ce:	b963      	cbnz	r3, 3e3ea <_svfiprintf_r+0x32>
   3e3d0:	2140      	movs	r1, #64	; 0x40
   3e3d2:	f7fe fb5d 	bl	3ca90 <_malloc_r>
   3e3d6:	6028      	str	r0, [r5, #0]
   3e3d8:	6128      	str	r0, [r5, #16]
   3e3da:	b920      	cbnz	r0, 3e3e6 <_svfiprintf_r+0x2e>
   3e3dc:	230c      	movs	r3, #12
   3e3de:	603b      	str	r3, [r7, #0]
   3e3e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3e3e4:	e0c9      	b.n	3e57a <_svfiprintf_r+0x1c2>
   3e3e6:	2340      	movs	r3, #64	; 0x40
   3e3e8:	616b      	str	r3, [r5, #20]
   3e3ea:	2300      	movs	r3, #0
   3e3ec:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 3e594 <_svfiprintf_r+0x1dc>
   3e3f0:	f04f 0a01 	mov.w	sl, #1
   3e3f4:	9603      	str	r6, [sp, #12]
   3e3f6:	9309      	str	r3, [sp, #36]	; 0x24
   3e3f8:	2320      	movs	r3, #32
   3e3fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   3e3fe:	2330      	movs	r3, #48	; 0x30
   3e400:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   3e404:	4623      	mov	r3, r4
   3e406:	461e      	mov	r6, r3
   3e408:	f813 2b01 	ldrb.w	r2, [r3], #1
   3e40c:	b10a      	cbz	r2, 3e412 <_svfiprintf_r+0x5a>
   3e40e:	2a25      	cmp	r2, #37	; 0x25
   3e410:	d1f9      	bne.n	3e406 <_svfiprintf_r+0x4e>
   3e412:	ebb6 0b04 	subs.w	fp, r6, r4
   3e416:	d00b      	beq.n	3e430 <_svfiprintf_r+0x78>
   3e418:	465b      	mov	r3, fp
   3e41a:	4622      	mov	r2, r4
   3e41c:	4629      	mov	r1, r5
   3e41e:	4638      	mov	r0, r7
   3e420:	f004 fae0 	bl	429e4 <__ssputs_r>
   3e424:	3001      	adds	r0, #1
   3e426:	f000 80a3 	beq.w	3e570 <_svfiprintf_r+0x1b8>
   3e42a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3e42c:	445b      	add	r3, fp
   3e42e:	9309      	str	r3, [sp, #36]	; 0x24
   3e430:	7833      	ldrb	r3, [r6, #0]
   3e432:	2b00      	cmp	r3, #0
   3e434:	f000 809c 	beq.w	3e570 <_svfiprintf_r+0x1b8>
   3e438:	2300      	movs	r3, #0
   3e43a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3e43e:	3601      	adds	r6, #1
   3e440:	9304      	str	r3, [sp, #16]
   3e442:	9307      	str	r3, [sp, #28]
   3e444:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   3e448:	931a      	str	r3, [sp, #104]	; 0x68
   3e44a:	e9cd 2305 	strd	r2, r3, [sp, #20]
   3e44e:	4634      	mov	r4, r6
   3e450:	2205      	movs	r2, #5
   3e452:	4850      	ldr	r0, [pc, #320]	; (3e594 <_svfiprintf_r+0x1dc>)
   3e454:	f814 1b01 	ldrb.w	r1, [r4], #1
   3e458:	f003 fa8f 	bl	4197a <memchr>
   3e45c:	9b04      	ldr	r3, [sp, #16]
   3e45e:	b9c0      	cbnz	r0, 3e492 <_svfiprintf_r+0xda>
   3e460:	06d9      	lsls	r1, r3, #27
   3e462:	bf44      	itt	mi
   3e464:	2220      	movmi	r2, #32
   3e466:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   3e46a:	071a      	lsls	r2, r3, #28
   3e46c:	bf44      	itt	mi
   3e46e:	222b      	movmi	r2, #43	; 0x2b
   3e470:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   3e474:	7832      	ldrb	r2, [r6, #0]
   3e476:	2a2a      	cmp	r2, #42	; 0x2a
   3e478:	d013      	beq.n	3e4a2 <_svfiprintf_r+0xea>
   3e47a:	4634      	mov	r4, r6
   3e47c:	9a07      	ldr	r2, [sp, #28]
   3e47e:	2000      	movs	r0, #0
   3e480:	260a      	movs	r6, #10
   3e482:	4621      	mov	r1, r4
   3e484:	f811 3b01 	ldrb.w	r3, [r1], #1
   3e488:	3b30      	subs	r3, #48	; 0x30
   3e48a:	2b09      	cmp	r3, #9
   3e48c:	d94b      	bls.n	3e526 <_svfiprintf_r+0x16e>
   3e48e:	b970      	cbnz	r0, 3e4ae <_svfiprintf_r+0xf6>
   3e490:	e014      	b.n	3e4bc <_svfiprintf_r+0x104>
   3e492:	eba0 0009 	sub.w	r0, r0, r9
   3e496:	4626      	mov	r6, r4
   3e498:	fa0a f000 	lsl.w	r0, sl, r0
   3e49c:	4318      	orrs	r0, r3
   3e49e:	9004      	str	r0, [sp, #16]
   3e4a0:	e7d5      	b.n	3e44e <_svfiprintf_r+0x96>
   3e4a2:	9a03      	ldr	r2, [sp, #12]
   3e4a4:	1d11      	adds	r1, r2, #4
   3e4a6:	6812      	ldr	r2, [r2, #0]
   3e4a8:	2a00      	cmp	r2, #0
   3e4aa:	9103      	str	r1, [sp, #12]
   3e4ac:	db01      	blt.n	3e4b2 <_svfiprintf_r+0xfa>
   3e4ae:	9207      	str	r2, [sp, #28]
   3e4b0:	e004      	b.n	3e4bc <_svfiprintf_r+0x104>
   3e4b2:	4252      	negs	r2, r2
   3e4b4:	f043 0302 	orr.w	r3, r3, #2
   3e4b8:	9207      	str	r2, [sp, #28]
   3e4ba:	9304      	str	r3, [sp, #16]
   3e4bc:	7823      	ldrb	r3, [r4, #0]
   3e4be:	2b2e      	cmp	r3, #46	; 0x2e
   3e4c0:	d10c      	bne.n	3e4dc <_svfiprintf_r+0x124>
   3e4c2:	7863      	ldrb	r3, [r4, #1]
   3e4c4:	2b2a      	cmp	r3, #42	; 0x2a
   3e4c6:	d133      	bne.n	3e530 <_svfiprintf_r+0x178>
   3e4c8:	9b03      	ldr	r3, [sp, #12]
   3e4ca:	3402      	adds	r4, #2
   3e4cc:	1d1a      	adds	r2, r3, #4
   3e4ce:	681b      	ldr	r3, [r3, #0]
   3e4d0:	2b00      	cmp	r3, #0
   3e4d2:	9203      	str	r2, [sp, #12]
   3e4d4:	bfb8      	it	lt
   3e4d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   3e4da:	9305      	str	r3, [sp, #20]
   3e4dc:	4e2e      	ldr	r6, [pc, #184]	; (3e598 <_svfiprintf_r+0x1e0>)
   3e4de:	2203      	movs	r2, #3
   3e4e0:	7821      	ldrb	r1, [r4, #0]
   3e4e2:	4630      	mov	r0, r6
   3e4e4:	f003 fa49 	bl	4197a <memchr>
   3e4e8:	b138      	cbz	r0, 3e4fa <_svfiprintf_r+0x142>
   3e4ea:	2340      	movs	r3, #64	; 0x40
   3e4ec:	1b80      	subs	r0, r0, r6
   3e4ee:	3401      	adds	r4, #1
   3e4f0:	fa03 f000 	lsl.w	r0, r3, r0
   3e4f4:	9b04      	ldr	r3, [sp, #16]
   3e4f6:	4303      	orrs	r3, r0
   3e4f8:	9304      	str	r3, [sp, #16]
   3e4fa:	f814 1b01 	ldrb.w	r1, [r4], #1
   3e4fe:	2206      	movs	r2, #6
   3e500:	4826      	ldr	r0, [pc, #152]	; (3e59c <_svfiprintf_r+0x1e4>)
   3e502:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   3e506:	f003 fa38 	bl	4197a <memchr>
   3e50a:	2800      	cmp	r0, #0
   3e50c:	d038      	beq.n	3e580 <_svfiprintf_r+0x1c8>
   3e50e:	4b24      	ldr	r3, [pc, #144]	; (3e5a0 <_svfiprintf_r+0x1e8>)
   3e510:	bb13      	cbnz	r3, 3e558 <_svfiprintf_r+0x1a0>
   3e512:	9b03      	ldr	r3, [sp, #12]
   3e514:	3307      	adds	r3, #7
   3e516:	f023 0307 	bic.w	r3, r3, #7
   3e51a:	3308      	adds	r3, #8
   3e51c:	9303      	str	r3, [sp, #12]
   3e51e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3e520:	4443      	add	r3, r8
   3e522:	9309      	str	r3, [sp, #36]	; 0x24
   3e524:	e76e      	b.n	3e404 <_svfiprintf_r+0x4c>
   3e526:	fb06 3202 	mla	r2, r6, r2, r3
   3e52a:	2001      	movs	r0, #1
   3e52c:	460c      	mov	r4, r1
   3e52e:	e7a8      	b.n	3e482 <_svfiprintf_r+0xca>
   3e530:	2300      	movs	r3, #0
   3e532:	3401      	adds	r4, #1
   3e534:	260a      	movs	r6, #10
   3e536:	4619      	mov	r1, r3
   3e538:	9305      	str	r3, [sp, #20]
   3e53a:	4620      	mov	r0, r4
   3e53c:	f810 2b01 	ldrb.w	r2, [r0], #1
   3e540:	3a30      	subs	r2, #48	; 0x30
   3e542:	2a09      	cmp	r2, #9
   3e544:	d903      	bls.n	3e54e <_svfiprintf_r+0x196>
   3e546:	2b00      	cmp	r3, #0
   3e548:	d0c8      	beq.n	3e4dc <_svfiprintf_r+0x124>
   3e54a:	9105      	str	r1, [sp, #20]
   3e54c:	e7c6      	b.n	3e4dc <_svfiprintf_r+0x124>
   3e54e:	fb06 2101 	mla	r1, r6, r1, r2
   3e552:	2301      	movs	r3, #1
   3e554:	4604      	mov	r4, r0
   3e556:	e7f0      	b.n	3e53a <_svfiprintf_r+0x182>
   3e558:	ab03      	add	r3, sp, #12
   3e55a:	462a      	mov	r2, r5
   3e55c:	a904      	add	r1, sp, #16
   3e55e:	4638      	mov	r0, r7
   3e560:	9300      	str	r3, [sp, #0]
   3e562:	4b10      	ldr	r3, [pc, #64]	; (3e5a4 <_svfiprintf_r+0x1ec>)
   3e564:	f7fe fc16 	bl	3cd94 <_printf_float>
   3e568:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   3e56c:	4680      	mov	r8, r0
   3e56e:	d1d6      	bne.n	3e51e <_svfiprintf_r+0x166>
   3e570:	89ab      	ldrh	r3, [r5, #12]
   3e572:	065b      	lsls	r3, r3, #25
   3e574:	f53f af34 	bmi.w	3e3e0 <_svfiprintf_r+0x28>
   3e578:	9809      	ldr	r0, [sp, #36]	; 0x24
   3e57a:	b01d      	add	sp, #116	; 0x74
   3e57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e580:	ab03      	add	r3, sp, #12
   3e582:	462a      	mov	r2, r5
   3e584:	a904      	add	r1, sp, #16
   3e586:	4638      	mov	r0, r7
   3e588:	9300      	str	r3, [sp, #0]
   3e58a:	4b06      	ldr	r3, [pc, #24]	; (3e5a4 <_svfiprintf_r+0x1ec>)
   3e58c:	f7fe fe2c 	bl	3d1e8 <_printf_i>
   3e590:	e7ea      	b.n	3e568 <_svfiprintf_r+0x1b0>
   3e592:	bf00      	nop
   3e594:	0004a87d 	.word	0x0004a87d
   3e598:	0004a883 	.word	0x0004a883
   3e59c:	0004a887 	.word	0x0004a887
   3e5a0:	0003cd95 	.word	0x0003cd95
   3e5a4:	000429e5 	.word	0x000429e5

0003e5a8 <__ssvfiscanf_r>:
   3e5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e5ac:	460c      	mov	r4, r1
   3e5ae:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
   3e5b2:	2100      	movs	r1, #0
   3e5b4:	4606      	mov	r6, r0
   3e5b6:	f10d 0804 	add.w	r8, sp, #4
   3e5ba:	4f9b      	ldr	r7, [pc, #620]	; (3e828 <__ssvfiscanf_r+0x280>)
   3e5bc:	f8df 9274 	ldr.w	r9, [pc, #628]	; 3e834 <__ssvfiscanf_r+0x28c>
   3e5c0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   3e5c4:	9300      	str	r3, [sp, #0]
   3e5c6:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   3e5ca:	4998      	ldr	r1, [pc, #608]	; (3e82c <__ssvfiscanf_r+0x284>)
   3e5cc:	91a0      	str	r1, [sp, #640]	; 0x280
   3e5ce:	4998      	ldr	r1, [pc, #608]	; (3e830 <__ssvfiscanf_r+0x288>)
   3e5d0:	91a1      	str	r1, [sp, #644]	; 0x284
   3e5d2:	f892 a000 	ldrb.w	sl, [r2]
   3e5d6:	f1ba 0f00 	cmp.w	sl, #0
   3e5da:	f000 8122 	beq.w	3e822 <__ssvfiscanf_r+0x27a>
   3e5de:	f81a 3007 	ldrb.w	r3, [sl, r7]
   3e5e2:	1c55      	adds	r5, r2, #1
   3e5e4:	f013 0308 	ands.w	r3, r3, #8
   3e5e8:	d019      	beq.n	3e61e <__ssvfiscanf_r+0x76>
   3e5ea:	6863      	ldr	r3, [r4, #4]
   3e5ec:	2b00      	cmp	r3, #0
   3e5ee:	dd0f      	ble.n	3e610 <__ssvfiscanf_r+0x68>
   3e5f0:	6823      	ldr	r3, [r4, #0]
   3e5f2:	781a      	ldrb	r2, [r3, #0]
   3e5f4:	5cba      	ldrb	r2, [r7, r2]
   3e5f6:	0712      	lsls	r2, r2, #28
   3e5f8:	d401      	bmi.n	3e5fe <__ssvfiscanf_r+0x56>
   3e5fa:	462a      	mov	r2, r5
   3e5fc:	e7e9      	b.n	3e5d2 <__ssvfiscanf_r+0x2a>
   3e5fe:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3e600:	3301      	adds	r3, #1
   3e602:	3201      	adds	r2, #1
   3e604:	6023      	str	r3, [r4, #0]
   3e606:	9245      	str	r2, [sp, #276]	; 0x114
   3e608:	6862      	ldr	r2, [r4, #4]
   3e60a:	3a01      	subs	r2, #1
   3e60c:	6062      	str	r2, [r4, #4]
   3e60e:	e7ec      	b.n	3e5ea <__ssvfiscanf_r+0x42>
   3e610:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3e612:	4621      	mov	r1, r4
   3e614:	4630      	mov	r0, r6
   3e616:	4798      	blx	r3
   3e618:	2800      	cmp	r0, #0
   3e61a:	d0e9      	beq.n	3e5f0 <__ssvfiscanf_r+0x48>
   3e61c:	e7ed      	b.n	3e5fa <__ssvfiscanf_r+0x52>
   3e61e:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
   3e622:	d17f      	bne.n	3e724 <__ssvfiscanf_r+0x17c>
   3e624:	9341      	str	r3, [sp, #260]	; 0x104
   3e626:	9343      	str	r3, [sp, #268]	; 0x10c
   3e628:	7853      	ldrb	r3, [r2, #1]
   3e62a:	2b2a      	cmp	r3, #42	; 0x2a
   3e62c:	bf04      	itt	eq
   3e62e:	2310      	moveq	r3, #16
   3e630:	1c95      	addeq	r5, r2, #2
   3e632:	f04f 020a 	mov.w	r2, #10
   3e636:	bf08      	it	eq
   3e638:	9341      	streq	r3, [sp, #260]	; 0x104
   3e63a:	46ab      	mov	fp, r5
   3e63c:	f81b 1b01 	ldrb.w	r1, [fp], #1
   3e640:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   3e644:	2b09      	cmp	r3, #9
   3e646:	d921      	bls.n	3e68c <__ssvfiscanf_r+0xe4>
   3e648:	2203      	movs	r2, #3
   3e64a:	487a      	ldr	r0, [pc, #488]	; (3e834 <__ssvfiscanf_r+0x28c>)
   3e64c:	f003 f995 	bl	4197a <memchr>
   3e650:	b138      	cbz	r0, 3e662 <__ssvfiscanf_r+0xba>
   3e652:	eba0 0309 	sub.w	r3, r0, r9
   3e656:	2001      	movs	r0, #1
   3e658:	465d      	mov	r5, fp
   3e65a:	4098      	lsls	r0, r3
   3e65c:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3e65e:	4318      	orrs	r0, r3
   3e660:	9041      	str	r0, [sp, #260]	; 0x104
   3e662:	f815 3b01 	ldrb.w	r3, [r5], #1
   3e666:	2b67      	cmp	r3, #103	; 0x67
   3e668:	d848      	bhi.n	3e6fc <__ssvfiscanf_r+0x154>
   3e66a:	2b65      	cmp	r3, #101	; 0x65
   3e66c:	f080 809f 	bcs.w	3e7ae <__ssvfiscanf_r+0x206>
   3e670:	2b47      	cmp	r3, #71	; 0x47
   3e672:	d812      	bhi.n	3e69a <__ssvfiscanf_r+0xf2>
   3e674:	2b45      	cmp	r3, #69	; 0x45
   3e676:	f080 809a 	bcs.w	3e7ae <__ssvfiscanf_r+0x206>
   3e67a:	2b00      	cmp	r3, #0
   3e67c:	d06b      	beq.n	3e756 <__ssvfiscanf_r+0x1ae>
   3e67e:	2b25      	cmp	r3, #37	; 0x25
   3e680:	d050      	beq.n	3e724 <__ssvfiscanf_r+0x17c>
   3e682:	2303      	movs	r3, #3
   3e684:	9347      	str	r3, [sp, #284]	; 0x11c
   3e686:	230a      	movs	r3, #10
   3e688:	9342      	str	r3, [sp, #264]	; 0x108
   3e68a:	e016      	b.n	3e6ba <__ssvfiscanf_r+0x112>
   3e68c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   3e68e:	465d      	mov	r5, fp
   3e690:	fb02 1303 	mla	r3, r2, r3, r1
   3e694:	3b30      	subs	r3, #48	; 0x30
   3e696:	9343      	str	r3, [sp, #268]	; 0x10c
   3e698:	e7cf      	b.n	3e63a <__ssvfiscanf_r+0x92>
   3e69a:	2b5b      	cmp	r3, #91	; 0x5b
   3e69c:	d067      	beq.n	3e76e <__ssvfiscanf_r+0x1c6>
   3e69e:	d827      	bhi.n	3e6f0 <__ssvfiscanf_r+0x148>
   3e6a0:	2b58      	cmp	r3, #88	; 0x58
   3e6a2:	d1ee      	bne.n	3e682 <__ssvfiscanf_r+0xda>
   3e6a4:	9a41      	ldr	r2, [sp, #260]	; 0x104
   3e6a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   3e6aa:	9241      	str	r2, [sp, #260]	; 0x104
   3e6ac:	2210      	movs	r2, #16
   3e6ae:	2b6f      	cmp	r3, #111	; 0x6f
   3e6b0:	9242      	str	r2, [sp, #264]	; 0x108
   3e6b2:	bf34      	ite	cc
   3e6b4:	2303      	movcc	r3, #3
   3e6b6:	2304      	movcs	r3, #4
   3e6b8:	9347      	str	r3, [sp, #284]	; 0x11c
   3e6ba:	6863      	ldr	r3, [r4, #4]
   3e6bc:	2b00      	cmp	r3, #0
   3e6be:	dd78      	ble.n	3e7b2 <__ssvfiscanf_r+0x20a>
   3e6c0:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3e6c2:	0659      	lsls	r1, r3, #25
   3e6c4:	d404      	bmi.n	3e6d0 <__ssvfiscanf_r+0x128>
   3e6c6:	6823      	ldr	r3, [r4, #0]
   3e6c8:	781a      	ldrb	r2, [r3, #0]
   3e6ca:	5cba      	ldrb	r2, [r7, r2]
   3e6cc:	0712      	lsls	r2, r2, #28
   3e6ce:	d477      	bmi.n	3e7c0 <__ssvfiscanf_r+0x218>
   3e6d0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   3e6d2:	2b02      	cmp	r3, #2
   3e6d4:	f300 8087 	bgt.w	3e7e6 <__ssvfiscanf_r+0x23e>
   3e6d8:	466b      	mov	r3, sp
   3e6da:	4622      	mov	r2, r4
   3e6dc:	a941      	add	r1, sp, #260	; 0x104
   3e6de:	4630      	mov	r0, r6
   3e6e0:	f000 f8ac 	bl	3e83c <_scanf_chars>
   3e6e4:	2801      	cmp	r0, #1
   3e6e6:	f000 809c 	beq.w	3e822 <__ssvfiscanf_r+0x27a>
   3e6ea:	2802      	cmp	r0, #2
   3e6ec:	d185      	bne.n	3e5fa <__ssvfiscanf_r+0x52>
   3e6ee:	e02f      	b.n	3e750 <__ssvfiscanf_r+0x1a8>
   3e6f0:	2b63      	cmp	r3, #99	; 0x63
   3e6f2:	d047      	beq.n	3e784 <__ssvfiscanf_r+0x1dc>
   3e6f4:	2b64      	cmp	r3, #100	; 0x64
   3e6f6:	d1c4      	bne.n	3e682 <__ssvfiscanf_r+0xda>
   3e6f8:	220a      	movs	r2, #10
   3e6fa:	e7d8      	b.n	3e6ae <__ssvfiscanf_r+0x106>
   3e6fc:	2b70      	cmp	r3, #112	; 0x70
   3e6fe:	d02d      	beq.n	3e75c <__ssvfiscanf_r+0x1b4>
   3e700:	d808      	bhi.n	3e714 <__ssvfiscanf_r+0x16c>
   3e702:	2b6e      	cmp	r3, #110	; 0x6e
   3e704:	d044      	beq.n	3e790 <__ssvfiscanf_r+0x1e8>
   3e706:	d82e      	bhi.n	3e766 <__ssvfiscanf_r+0x1be>
   3e708:	2b69      	cmp	r3, #105	; 0x69
   3e70a:	d1ba      	bne.n	3e682 <__ssvfiscanf_r+0xda>
   3e70c:	2300      	movs	r3, #0
   3e70e:	9342      	str	r3, [sp, #264]	; 0x108
   3e710:	2303      	movs	r3, #3
   3e712:	e7d1      	b.n	3e6b8 <__ssvfiscanf_r+0x110>
   3e714:	2b75      	cmp	r3, #117	; 0x75
   3e716:	d0ef      	beq.n	3e6f8 <__ssvfiscanf_r+0x150>
   3e718:	2b78      	cmp	r3, #120	; 0x78
   3e71a:	d0c3      	beq.n	3e6a4 <__ssvfiscanf_r+0xfc>
   3e71c:	2b73      	cmp	r3, #115	; 0x73
   3e71e:	d1b0      	bne.n	3e682 <__ssvfiscanf_r+0xda>
   3e720:	2302      	movs	r3, #2
   3e722:	e7c9      	b.n	3e6b8 <__ssvfiscanf_r+0x110>
   3e724:	6863      	ldr	r3, [r4, #4]
   3e726:	2b00      	cmp	r3, #0
   3e728:	dd0c      	ble.n	3e744 <__ssvfiscanf_r+0x19c>
   3e72a:	6823      	ldr	r3, [r4, #0]
   3e72c:	781a      	ldrb	r2, [r3, #0]
   3e72e:	4552      	cmp	r2, sl
   3e730:	d177      	bne.n	3e822 <__ssvfiscanf_r+0x27a>
   3e732:	3301      	adds	r3, #1
   3e734:	6862      	ldr	r2, [r4, #4]
   3e736:	6023      	str	r3, [r4, #0]
   3e738:	3a01      	subs	r2, #1
   3e73a:	9b45      	ldr	r3, [sp, #276]	; 0x114
   3e73c:	6062      	str	r2, [r4, #4]
   3e73e:	3301      	adds	r3, #1
   3e740:	9345      	str	r3, [sp, #276]	; 0x114
   3e742:	e75a      	b.n	3e5fa <__ssvfiscanf_r+0x52>
   3e744:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3e746:	4621      	mov	r1, r4
   3e748:	4630      	mov	r0, r6
   3e74a:	4798      	blx	r3
   3e74c:	2800      	cmp	r0, #0
   3e74e:	d0ec      	beq.n	3e72a <__ssvfiscanf_r+0x182>
   3e750:	9844      	ldr	r0, [sp, #272]	; 0x110
   3e752:	2800      	cmp	r0, #0
   3e754:	d15b      	bne.n	3e80e <__ssvfiscanf_r+0x266>
   3e756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3e75a:	e05e      	b.n	3e81a <__ssvfiscanf_r+0x272>
   3e75c:	9a41      	ldr	r2, [sp, #260]	; 0x104
   3e75e:	f042 0220 	orr.w	r2, r2, #32
   3e762:	9241      	str	r2, [sp, #260]	; 0x104
   3e764:	e79e      	b.n	3e6a4 <__ssvfiscanf_r+0xfc>
   3e766:	2308      	movs	r3, #8
   3e768:	9342      	str	r3, [sp, #264]	; 0x108
   3e76a:	2304      	movs	r3, #4
   3e76c:	e7a4      	b.n	3e6b8 <__ssvfiscanf_r+0x110>
   3e76e:	4629      	mov	r1, r5
   3e770:	4640      	mov	r0, r8
   3e772:	f004 f9ec 	bl	42b4e <__sccl>
   3e776:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3e778:	4605      	mov	r5, r0
   3e77a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3e77e:	9341      	str	r3, [sp, #260]	; 0x104
   3e780:	2301      	movs	r3, #1
   3e782:	e799      	b.n	3e6b8 <__ssvfiscanf_r+0x110>
   3e784:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3e786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3e78a:	9341      	str	r3, [sp, #260]	; 0x104
   3e78c:	2300      	movs	r3, #0
   3e78e:	e793      	b.n	3e6b8 <__ssvfiscanf_r+0x110>
   3e790:	9841      	ldr	r0, [sp, #260]	; 0x104
   3e792:	06c3      	lsls	r3, r0, #27
   3e794:	f53f af31 	bmi.w	3e5fa <__ssvfiscanf_r+0x52>
   3e798:	9b00      	ldr	r3, [sp, #0]
   3e79a:	07c0      	lsls	r0, r0, #31
   3e79c:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3e79e:	f103 0104 	add.w	r1, r3, #4
   3e7a2:	9100      	str	r1, [sp, #0]
   3e7a4:	681b      	ldr	r3, [r3, #0]
   3e7a6:	bf4c      	ite	mi
   3e7a8:	801a      	strhmi	r2, [r3, #0]
   3e7aa:	601a      	strpl	r2, [r3, #0]
   3e7ac:	e725      	b.n	3e5fa <__ssvfiscanf_r+0x52>
   3e7ae:	2305      	movs	r3, #5
   3e7b0:	e782      	b.n	3e6b8 <__ssvfiscanf_r+0x110>
   3e7b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3e7b4:	4621      	mov	r1, r4
   3e7b6:	4630      	mov	r0, r6
   3e7b8:	4798      	blx	r3
   3e7ba:	2800      	cmp	r0, #0
   3e7bc:	d080      	beq.n	3e6c0 <__ssvfiscanf_r+0x118>
   3e7be:	e7c7      	b.n	3e750 <__ssvfiscanf_r+0x1a8>
   3e7c0:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3e7c2:	3201      	adds	r2, #1
   3e7c4:	9245      	str	r2, [sp, #276]	; 0x114
   3e7c6:	6862      	ldr	r2, [r4, #4]
   3e7c8:	3a01      	subs	r2, #1
   3e7ca:	2a00      	cmp	r2, #0
   3e7cc:	6062      	str	r2, [r4, #4]
   3e7ce:	dd02      	ble.n	3e7d6 <__ssvfiscanf_r+0x22e>
   3e7d0:	3301      	adds	r3, #1
   3e7d2:	6023      	str	r3, [r4, #0]
   3e7d4:	e777      	b.n	3e6c6 <__ssvfiscanf_r+0x11e>
   3e7d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3e7d8:	4621      	mov	r1, r4
   3e7da:	4630      	mov	r0, r6
   3e7dc:	4798      	blx	r3
   3e7de:	2800      	cmp	r0, #0
   3e7e0:	f43f af71 	beq.w	3e6c6 <__ssvfiscanf_r+0x11e>
   3e7e4:	e7b4      	b.n	3e750 <__ssvfiscanf_r+0x1a8>
   3e7e6:	2b04      	cmp	r3, #4
   3e7e8:	dc06      	bgt.n	3e7f8 <__ssvfiscanf_r+0x250>
   3e7ea:	466b      	mov	r3, sp
   3e7ec:	4622      	mov	r2, r4
   3e7ee:	a941      	add	r1, sp, #260	; 0x104
   3e7f0:	4630      	mov	r0, r6
   3e7f2:	f000 f87b 	bl	3e8ec <_scanf_i>
   3e7f6:	e775      	b.n	3e6e4 <__ssvfiscanf_r+0x13c>
   3e7f8:	4b0f      	ldr	r3, [pc, #60]	; (3e838 <__ssvfiscanf_r+0x290>)
   3e7fa:	2b00      	cmp	r3, #0
   3e7fc:	f43f aefd 	beq.w	3e5fa <__ssvfiscanf_r+0x52>
   3e800:	466b      	mov	r3, sp
   3e802:	4622      	mov	r2, r4
   3e804:	a941      	add	r1, sp, #260	; 0x104
   3e806:	4630      	mov	r0, r6
   3e808:	e000      	b.n	3e80c <__ssvfiscanf_r+0x264>
   3e80a:	bf00      	nop
   3e80c:	e76a      	b.n	3e6e4 <__ssvfiscanf_r+0x13c>
   3e80e:	89a3      	ldrh	r3, [r4, #12]
   3e810:	f013 0f40 	tst.w	r3, #64	; 0x40
   3e814:	bf18      	it	ne
   3e816:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   3e81a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
   3e81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e822:	9844      	ldr	r0, [sp, #272]	; 0x110
   3e824:	e7f9      	b.n	3e81a <__ssvfiscanf_r+0x272>
   3e826:	bf00      	nop
   3e828:	0004a77d 	.word	0x0004a77d
   3e82c:	00042a9b 	.word	0x00042a9b
   3e830:	00042b15 	.word	0x00042b15
   3e834:	0004a883 	.word	0x0004a883
   3e838:	00000000 	.word	0x00000000

0003e83c <_scanf_chars>:
   3e83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e840:	4615      	mov	r5, r2
   3e842:	688a      	ldr	r2, [r1, #8]
   3e844:	4680      	mov	r8, r0
   3e846:	460c      	mov	r4, r1
   3e848:	b932      	cbnz	r2, 3e858 <_scanf_chars+0x1c>
   3e84a:	698a      	ldr	r2, [r1, #24]
   3e84c:	2a00      	cmp	r2, #0
   3e84e:	bf0c      	ite	eq
   3e850:	2201      	moveq	r2, #1
   3e852:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   3e856:	608a      	str	r2, [r1, #8]
   3e858:	6822      	ldr	r2, [r4, #0]
   3e85a:	2700      	movs	r7, #0
   3e85c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 3e8e8 <_scanf_chars+0xac>
   3e860:	06d1      	lsls	r1, r2, #27
   3e862:	bf5f      	itttt	pl
   3e864:	681a      	ldrpl	r2, [r3, #0]
   3e866:	1d11      	addpl	r1, r2, #4
   3e868:	6019      	strpl	r1, [r3, #0]
   3e86a:	6816      	ldrpl	r6, [r2, #0]
   3e86c:	69a0      	ldr	r0, [r4, #24]
   3e86e:	b188      	cbz	r0, 3e894 <_scanf_chars+0x58>
   3e870:	2801      	cmp	r0, #1
   3e872:	d107      	bne.n	3e884 <_scanf_chars+0x48>
   3e874:	682b      	ldr	r3, [r5, #0]
   3e876:	781a      	ldrb	r2, [r3, #0]
   3e878:	6963      	ldr	r3, [r4, #20]
   3e87a:	5c9b      	ldrb	r3, [r3, r2]
   3e87c:	b953      	cbnz	r3, 3e894 <_scanf_chars+0x58>
   3e87e:	bb27      	cbnz	r7, 3e8ca <_scanf_chars+0x8e>
   3e880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3e884:	2802      	cmp	r0, #2
   3e886:	d120      	bne.n	3e8ca <_scanf_chars+0x8e>
   3e888:	682b      	ldr	r3, [r5, #0]
   3e88a:	781b      	ldrb	r3, [r3, #0]
   3e88c:	f813 3009 	ldrb.w	r3, [r3, r9]
   3e890:	071b      	lsls	r3, r3, #28
   3e892:	d41a      	bmi.n	3e8ca <_scanf_chars+0x8e>
   3e894:	6823      	ldr	r3, [r4, #0]
   3e896:	3701      	adds	r7, #1
   3e898:	06da      	lsls	r2, r3, #27
   3e89a:	bf5e      	ittt	pl
   3e89c:	682b      	ldrpl	r3, [r5, #0]
   3e89e:	781b      	ldrbpl	r3, [r3, #0]
   3e8a0:	f806 3b01 	strbpl.w	r3, [r6], #1
   3e8a4:	682a      	ldr	r2, [r5, #0]
   3e8a6:	686b      	ldr	r3, [r5, #4]
   3e8a8:	3201      	adds	r2, #1
   3e8aa:	3b01      	subs	r3, #1
   3e8ac:	602a      	str	r2, [r5, #0]
   3e8ae:	68a2      	ldr	r2, [r4, #8]
   3e8b0:	606b      	str	r3, [r5, #4]
   3e8b2:	3a01      	subs	r2, #1
   3e8b4:	60a2      	str	r2, [r4, #8]
   3e8b6:	b142      	cbz	r2, 3e8ca <_scanf_chars+0x8e>
   3e8b8:	2b00      	cmp	r3, #0
   3e8ba:	dcd7      	bgt.n	3e86c <_scanf_chars+0x30>
   3e8bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   3e8c0:	4629      	mov	r1, r5
   3e8c2:	4640      	mov	r0, r8
   3e8c4:	4798      	blx	r3
   3e8c6:	2800      	cmp	r0, #0
   3e8c8:	d0d0      	beq.n	3e86c <_scanf_chars+0x30>
   3e8ca:	6823      	ldr	r3, [r4, #0]
   3e8cc:	f013 0310 	ands.w	r3, r3, #16
   3e8d0:	d105      	bne.n	3e8de <_scanf_chars+0xa2>
   3e8d2:	68e2      	ldr	r2, [r4, #12]
   3e8d4:	3201      	adds	r2, #1
   3e8d6:	60e2      	str	r2, [r4, #12]
   3e8d8:	69a2      	ldr	r2, [r4, #24]
   3e8da:	b102      	cbz	r2, 3e8de <_scanf_chars+0xa2>
   3e8dc:	7033      	strb	r3, [r6, #0]
   3e8de:	6923      	ldr	r3, [r4, #16]
   3e8e0:	2000      	movs	r0, #0
   3e8e2:	441f      	add	r7, r3
   3e8e4:	6127      	str	r7, [r4, #16]
   3e8e6:	e7cb      	b.n	3e880 <_scanf_chars+0x44>
   3e8e8:	0004a77d 	.word	0x0004a77d

0003e8ec <_scanf_i>:
   3e8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e8f0:	4699      	mov	r9, r3
   3e8f2:	b087      	sub	sp, #28
   3e8f4:	4b72      	ldr	r3, [pc, #456]	; (3eac0 <_scanf_i+0x1d4>)
   3e8f6:	460c      	mov	r4, r1
   3e8f8:	4682      	mov	sl, r0
   3e8fa:	4616      	mov	r6, r2
   3e8fc:	4627      	mov	r7, r4
   3e8fe:	f04f 0b00 	mov.w	fp, #0
   3e902:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   3e906:	ab03      	add	r3, sp, #12
   3e908:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   3e90c:	4b6d      	ldr	r3, [pc, #436]	; (3eac4 <_scanf_i+0x1d8>)
   3e90e:	69a1      	ldr	r1, [r4, #24]
   3e910:	4a6d      	ldr	r2, [pc, #436]	; (3eac8 <_scanf_i+0x1dc>)
   3e912:	2903      	cmp	r1, #3
   3e914:	bf18      	it	ne
   3e916:	461a      	movne	r2, r3
   3e918:	68a3      	ldr	r3, [r4, #8]
   3e91a:	9201      	str	r2, [sp, #4]
   3e91c:	1e5a      	subs	r2, r3, #1
   3e91e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   3e922:	bf89      	itett	hi
   3e924:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   3e928:	f04f 0800 	movls.w	r8, #0
   3e92c:	eb03 0805 	addhi.w	r8, r3, r5
   3e930:	f240 135d 	movwhi	r3, #349	; 0x15d
   3e934:	bf88      	it	hi
   3e936:	60a3      	strhi	r3, [r4, #8]
   3e938:	f857 3b1c 	ldr.w	r3, [r7], #28
   3e93c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   3e940:	463d      	mov	r5, r7
   3e942:	6023      	str	r3, [r4, #0]
   3e944:	6831      	ldr	r1, [r6, #0]
   3e946:	ab03      	add	r3, sp, #12
   3e948:	2202      	movs	r2, #2
   3e94a:	7809      	ldrb	r1, [r1, #0]
   3e94c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   3e950:	f003 f813 	bl	4197a <memchr>
   3e954:	b328      	cbz	r0, 3e9a2 <_scanf_i+0xb6>
   3e956:	f1bb 0f01 	cmp.w	fp, #1
   3e95a:	d159      	bne.n	3ea10 <_scanf_i+0x124>
   3e95c:	6862      	ldr	r2, [r4, #4]
   3e95e:	b92a      	cbnz	r2, 3e96c <_scanf_i+0x80>
   3e960:	6822      	ldr	r2, [r4, #0]
   3e962:	2308      	movs	r3, #8
   3e964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   3e968:	6063      	str	r3, [r4, #4]
   3e96a:	6022      	str	r2, [r4, #0]
   3e96c:	6822      	ldr	r2, [r4, #0]
   3e96e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   3e972:	6022      	str	r2, [r4, #0]
   3e974:	68a2      	ldr	r2, [r4, #8]
   3e976:	1e51      	subs	r1, r2, #1
   3e978:	60a1      	str	r1, [r4, #8]
   3e97a:	b192      	cbz	r2, 3e9a2 <_scanf_i+0xb6>
   3e97c:	6832      	ldr	r2, [r6, #0]
   3e97e:	1c51      	adds	r1, r2, #1
   3e980:	6031      	str	r1, [r6, #0]
   3e982:	7812      	ldrb	r2, [r2, #0]
   3e984:	f805 2b01 	strb.w	r2, [r5], #1
   3e988:	6872      	ldr	r2, [r6, #4]
   3e98a:	3a01      	subs	r2, #1
   3e98c:	2a00      	cmp	r2, #0
   3e98e:	6072      	str	r2, [r6, #4]
   3e990:	dc07      	bgt.n	3e9a2 <_scanf_i+0xb6>
   3e992:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   3e996:	4631      	mov	r1, r6
   3e998:	4650      	mov	r0, sl
   3e99a:	4790      	blx	r2
   3e99c:	2800      	cmp	r0, #0
   3e99e:	f040 8085 	bne.w	3eaac <_scanf_i+0x1c0>
   3e9a2:	f10b 0b01 	add.w	fp, fp, #1
   3e9a6:	f1bb 0f03 	cmp.w	fp, #3
   3e9aa:	d1cb      	bne.n	3e944 <_scanf_i+0x58>
   3e9ac:	6863      	ldr	r3, [r4, #4]
   3e9ae:	b90b      	cbnz	r3, 3e9b4 <_scanf_i+0xc8>
   3e9b0:	230a      	movs	r3, #10
   3e9b2:	6063      	str	r3, [r4, #4]
   3e9b4:	6863      	ldr	r3, [r4, #4]
   3e9b6:	f04f 0b00 	mov.w	fp, #0
   3e9ba:	4944      	ldr	r1, [pc, #272]	; (3eacc <_scanf_i+0x1e0>)
   3e9bc:	6960      	ldr	r0, [r4, #20]
   3e9be:	1ac9      	subs	r1, r1, r3
   3e9c0:	f004 f8c5 	bl	42b4e <__sccl>
   3e9c4:	68a3      	ldr	r3, [r4, #8]
   3e9c6:	6822      	ldr	r2, [r4, #0]
   3e9c8:	2b00      	cmp	r3, #0
   3e9ca:	d03d      	beq.n	3ea48 <_scanf_i+0x15c>
   3e9cc:	6831      	ldr	r1, [r6, #0]
   3e9ce:	6960      	ldr	r0, [r4, #20]
   3e9d0:	f891 c000 	ldrb.w	ip, [r1]
   3e9d4:	f810 000c 	ldrb.w	r0, [r0, ip]
   3e9d8:	2800      	cmp	r0, #0
   3e9da:	d035      	beq.n	3ea48 <_scanf_i+0x15c>
   3e9dc:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   3e9e0:	d124      	bne.n	3ea2c <_scanf_i+0x140>
   3e9e2:	0510      	lsls	r0, r2, #20
   3e9e4:	d522      	bpl.n	3ea2c <_scanf_i+0x140>
   3e9e6:	f10b 0b01 	add.w	fp, fp, #1
   3e9ea:	f1b8 0f00 	cmp.w	r8, #0
   3e9ee:	d003      	beq.n	3e9f8 <_scanf_i+0x10c>
   3e9f0:	3301      	adds	r3, #1
   3e9f2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   3e9f6:	60a3      	str	r3, [r4, #8]
   3e9f8:	6873      	ldr	r3, [r6, #4]
   3e9fa:	3b01      	subs	r3, #1
   3e9fc:	2b00      	cmp	r3, #0
   3e9fe:	6073      	str	r3, [r6, #4]
   3ea00:	dd1b      	ble.n	3ea3a <_scanf_i+0x14e>
   3ea02:	6833      	ldr	r3, [r6, #0]
   3ea04:	3301      	adds	r3, #1
   3ea06:	6033      	str	r3, [r6, #0]
   3ea08:	68a3      	ldr	r3, [r4, #8]
   3ea0a:	3b01      	subs	r3, #1
   3ea0c:	60a3      	str	r3, [r4, #8]
   3ea0e:	e7d9      	b.n	3e9c4 <_scanf_i+0xd8>
   3ea10:	f1bb 0f02 	cmp.w	fp, #2
   3ea14:	d1ae      	bne.n	3e974 <_scanf_i+0x88>
   3ea16:	6822      	ldr	r2, [r4, #0]
   3ea18:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   3ea1c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   3ea20:	d1bf      	bne.n	3e9a2 <_scanf_i+0xb6>
   3ea22:	2310      	movs	r3, #16
   3ea24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   3ea28:	6063      	str	r3, [r4, #4]
   3ea2a:	e7a2      	b.n	3e972 <_scanf_i+0x86>
   3ea2c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   3ea30:	6022      	str	r2, [r4, #0]
   3ea32:	780b      	ldrb	r3, [r1, #0]
   3ea34:	f805 3b01 	strb.w	r3, [r5], #1
   3ea38:	e7de      	b.n	3e9f8 <_scanf_i+0x10c>
   3ea3a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   3ea3e:	4631      	mov	r1, r6
   3ea40:	4650      	mov	r0, sl
   3ea42:	4798      	blx	r3
   3ea44:	2800      	cmp	r0, #0
   3ea46:	d0df      	beq.n	3ea08 <_scanf_i+0x11c>
   3ea48:	6823      	ldr	r3, [r4, #0]
   3ea4a:	05d9      	lsls	r1, r3, #23
   3ea4c:	d50d      	bpl.n	3ea6a <_scanf_i+0x17e>
   3ea4e:	42bd      	cmp	r5, r7
   3ea50:	d909      	bls.n	3ea66 <_scanf_i+0x17a>
   3ea52:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   3ea56:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   3ea5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   3ea5e:	4632      	mov	r2, r6
   3ea60:	4645      	mov	r5, r8
   3ea62:	4650      	mov	r0, sl
   3ea64:	4798      	blx	r3
   3ea66:	42bd      	cmp	r5, r7
   3ea68:	d028      	beq.n	3eabc <_scanf_i+0x1d0>
   3ea6a:	6822      	ldr	r2, [r4, #0]
   3ea6c:	f012 0210 	ands.w	r2, r2, #16
   3ea70:	d113      	bne.n	3ea9a <_scanf_i+0x1ae>
   3ea72:	702a      	strb	r2, [r5, #0]
   3ea74:	4639      	mov	r1, r7
   3ea76:	6863      	ldr	r3, [r4, #4]
   3ea78:	4650      	mov	r0, sl
   3ea7a:	9e01      	ldr	r6, [sp, #4]
   3ea7c:	47b0      	blx	r6
   3ea7e:	f8d9 3000 	ldr.w	r3, [r9]
   3ea82:	6821      	ldr	r1, [r4, #0]
   3ea84:	1d1a      	adds	r2, r3, #4
   3ea86:	f011 0f20 	tst.w	r1, #32
   3ea8a:	f8c9 2000 	str.w	r2, [r9]
   3ea8e:	681b      	ldr	r3, [r3, #0]
   3ea90:	d00f      	beq.n	3eab2 <_scanf_i+0x1c6>
   3ea92:	6018      	str	r0, [r3, #0]
   3ea94:	68e3      	ldr	r3, [r4, #12]
   3ea96:	3301      	adds	r3, #1
   3ea98:	60e3      	str	r3, [r4, #12]
   3ea9a:	1bed      	subs	r5, r5, r7
   3ea9c:	2000      	movs	r0, #0
   3ea9e:	44ab      	add	fp, r5
   3eaa0:	6925      	ldr	r5, [r4, #16]
   3eaa2:	445d      	add	r5, fp
   3eaa4:	6125      	str	r5, [r4, #16]
   3eaa6:	b007      	add	sp, #28
   3eaa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3eaac:	f04f 0b00 	mov.w	fp, #0
   3eab0:	e7ca      	b.n	3ea48 <_scanf_i+0x15c>
   3eab2:	07ca      	lsls	r2, r1, #31
   3eab4:	bf4c      	ite	mi
   3eab6:	8018      	strhmi	r0, [r3, #0]
   3eab8:	6018      	strpl	r0, [r3, #0]
   3eaba:	e7eb      	b.n	3ea94 <_scanf_i+0x1a8>
   3eabc:	2001      	movs	r0, #1
   3eabe:	e7f2      	b.n	3eaa6 <_scanf_i+0x1ba>
   3eac0:	000430f4 	.word	0x000430f4
   3eac4:	00041e71 	.word	0x00041e71
   3eac8:	00041e6d 	.word	0x00041e6d
   3eacc:	0004a90d 	.word	0x0004a90d

0003ead0 <_read_r>:
   3ead0:	b538      	push	{r3, r4, r5, lr}
   3ead2:	4605      	mov	r5, r0
   3ead4:	4c06      	ldr	r4, [pc, #24]	; (3eaf0 <_read_r+0x20>)
   3ead6:	4608      	mov	r0, r1
   3ead8:	4611      	mov	r1, r2
   3eada:	2200      	movs	r2, #0
   3eadc:	6022      	str	r2, [r4, #0]
   3eade:	461a      	mov	r2, r3
   3eae0:	f000 fece 	bl	3f880 <_read>
   3eae4:	1c43      	adds	r3, r0, #1
   3eae6:	d102      	bne.n	3eaee <_read_r+0x1e>
   3eae8:	6823      	ldr	r3, [r4, #0]
   3eaea:	b103      	cbz	r3, 3eaee <_read_r+0x1e>
   3eaec:	602b      	str	r3, [r5, #0]
   3eaee:	bd38      	pop	{r3, r4, r5, pc}
   3eaf0:	2002c9fc 	.word	0x2002c9fc

0003eaf4 <raise>:
   3eaf4:	4b02      	ldr	r3, [pc, #8]	; (3eb00 <raise+0xc>)
   3eaf6:	4601      	mov	r1, r0
   3eaf8:	6818      	ldr	r0, [r3, #0]
   3eafa:	f004 b859 	b.w	42bb0 <_raise_r>
   3eafe:	bf00      	nop
   3eb00:	20031c90 	.word	0x20031c90

0003eb04 <_kill_r>:
   3eb04:	b538      	push	{r3, r4, r5, lr}
   3eb06:	2300      	movs	r3, #0
   3eb08:	4c06      	ldr	r4, [pc, #24]	; (3eb24 <_kill_r+0x20>)
   3eb0a:	4605      	mov	r5, r0
   3eb0c:	4608      	mov	r0, r1
   3eb0e:	4611      	mov	r1, r2
   3eb10:	6023      	str	r3, [r4, #0]
   3eb12:	f000 fec4 	bl	3f89e <_kill>
   3eb16:	1c43      	adds	r3, r0, #1
   3eb18:	d102      	bne.n	3eb20 <_kill_r+0x1c>
   3eb1a:	6823      	ldr	r3, [r4, #0]
   3eb1c:	b103      	cbz	r3, 3eb20 <_kill_r+0x1c>
   3eb1e:	602b      	str	r3, [r5, #0]
   3eb20:	bd38      	pop	{r3, r4, r5, pc}
   3eb22:	bf00      	nop
   3eb24:	2002c9fc 	.word	0x2002c9fc

0003eb28 <_fstat_r>:
   3eb28:	b538      	push	{r3, r4, r5, lr}
   3eb2a:	2300      	movs	r3, #0
   3eb2c:	4c06      	ldr	r4, [pc, #24]	; (3eb48 <_fstat_r+0x20>)
   3eb2e:	4605      	mov	r5, r0
   3eb30:	4608      	mov	r0, r1
   3eb32:	4611      	mov	r1, r2
   3eb34:	6023      	str	r3, [r4, #0]
   3eb36:	f000 feb6 	bl	3f8a6 <_fstat>
   3eb3a:	1c43      	adds	r3, r0, #1
   3eb3c:	d102      	bne.n	3eb44 <_fstat_r+0x1c>
   3eb3e:	6823      	ldr	r3, [r4, #0]
   3eb40:	b103      	cbz	r3, 3eb44 <_fstat_r+0x1c>
   3eb42:	602b      	str	r3, [r5, #0]
   3eb44:	bd38      	pop	{r3, r4, r5, pc}
   3eb46:	bf00      	nop
   3eb48:	2002c9fc 	.word	0x2002c9fc

0003eb4c <_isatty_r>:
   3eb4c:	b538      	push	{r3, r4, r5, lr}
   3eb4e:	2300      	movs	r3, #0
   3eb50:	4c05      	ldr	r4, [pc, #20]	; (3eb68 <_isatty_r+0x1c>)
   3eb52:	4605      	mov	r5, r0
   3eb54:	4608      	mov	r0, r1
   3eb56:	6023      	str	r3, [r4, #0]
   3eb58:	f000 fe9f 	bl	3f89a <_isatty>
   3eb5c:	1c43      	adds	r3, r0, #1
   3eb5e:	d102      	bne.n	3eb66 <_isatty_r+0x1a>
   3eb60:	6823      	ldr	r3, [r4, #0]
   3eb62:	b103      	cbz	r3, 3eb66 <_isatty_r+0x1a>
   3eb64:	602b      	str	r3, [r5, #0]
   3eb66:	bd38      	pop	{r3, r4, r5, pc}
   3eb68:	2002c9fc 	.word	0x2002c9fc

0003eb6c <fabs>:
   3eb6c:	ec51 0b10 	vmov	r0, r1, d0
   3eb70:	ee10 2a10 	vmov	r2, s0
   3eb74:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   3eb78:	ec43 2b10 	vmov	d0, r2, r3
   3eb7c:	4770      	bx	lr
   3eb7e:	bf00      	nop

0003eb80 <cloud_connect>:
	if (backend == NULL || backend->api == NULL ||
   3eb80:	b120      	cbz	r0, 3eb8c <cloud_connect+0xc>
   3eb82:	6803      	ldr	r3, [r0, #0]
   3eb84:	b113      	cbz	r3, 3eb8c <cloud_connect+0xc>
	    backend->api->connect == NULL) {
   3eb86:	689b      	ldr	r3, [r3, #8]
	if (backend == NULL || backend->api == NULL ||
   3eb88:	b103      	cbz	r3, 3eb8c <cloud_connect+0xc>
	return backend->api->connect(backend);
   3eb8a:	4718      	bx	r3
}
   3eb8c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3eb90:	4770      	bx	lr

0003eb92 <cloud_send>:
	if (backend == NULL || backend->api == NULL ||
   3eb92:	b120      	cbz	r0, 3eb9e <cloud_send+0xc>
   3eb94:	6803      	ldr	r3, [r0, #0]
   3eb96:	b113      	cbz	r3, 3eb9e <cloud_send+0xc>
	    backend->api->send == NULL) {
   3eb98:	691b      	ldr	r3, [r3, #16]
	if (backend == NULL || backend->api == NULL ||
   3eb9a:	b103      	cbz	r3, 3eb9e <cloud_send+0xc>
	return backend->api->send(backend, msg);
   3eb9c:	4718      	bx	r3
}
   3eb9e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3eba2:	4770      	bx	lr

0003eba4 <atomic_set>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3eba4:	e8d0 3fef 	ldaex	r3, [r0]
   3eba8:	e8c0 1fe2 	stlex	r2, r1, [r0]
   3ebac:	2a00      	cmp	r2, #0
   3ebae:	d1f9      	bne.n	3eba4 <atomic_set>
}
   3ebb0:	4618      	mov	r0, r3
   3ebb2:	4770      	bx	lr

0003ebb4 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3ebb4:	e8d0 0faf 	lda	r0, [r0]
}
   3ebb8:	4770      	bx	lr

0003ebba <cloud_reboot_handler>:
	error_handler(ERROR_CLOUD, -ETIMEDOUT);
   3ebba:	f06f 0173 	mvn.w	r1, #115	; 0x73
   3ebbe:	2000      	movs	r0, #0
   3ebc0:	f7de be74 	b.w	1d8ac <error_handler>

0003ebc4 <cloud_error_handler>:
	error_handler(ERROR_CLOUD, err);
   3ebc4:	4601      	mov	r1, r0
   3ebc6:	2000      	movs	r0, #0
   3ebc8:	f7de be70 	b.w	1d8ac <error_handler>

0003ebcc <bsd_recoverable_error_handler>:
{
   3ebcc:	b508      	push	{r3, lr}
   3ebce:	f7e0 fceb 	bl	1f5a8 <z_impl_log_panic>
}
   3ebd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_reboot(0);
   3ebd6:	2000      	movs	r0, #0
   3ebd8:	f7e1 b8f2 	b.w	1fdc0 <sys_reboot>

0003ebdc <sensor_channel_get>:
	return api->channel_get(dev, chan, val);
   3ebdc:	6843      	ldr	r3, [r0, #4]
   3ebde:	68db      	ldr	r3, [r3, #12]
   3ebe0:	4718      	bx	r3

0003ebe2 <motion_simulate_trigger>:

void motion_simulate_trigger(void)
{
	sensor_trigger_handler(NULL, NULL);
   3ebe2:	f7db b989 	b.w	19ef8 <sensor_trigger_handler.isra.0>

0003ebe6 <ui_led_set_color>:
}
   3ebe6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3ebea:	4770      	bx	lr

0003ebec <json_value_string_compare>:
{
   3ebec:	b510      	push	{r4, lr}
   3ebee:	460c      	mov	r4, r1
	char *json_str = cJSON_GetStringValue(obj);
   3ebf0:	f001 fe0e 	bl	40810 <cJSON_GetStringValue>
	if ((json_str == NULL) || (str == NULL)) {
   3ebf4:	b130      	cbz	r0, 3ec04 <json_value_string_compare+0x18>
   3ebf6:	b134      	cbz	r4, 3ec06 <json_value_string_compare+0x1a>
	return (strcmp(json_str, str) == 0);
   3ebf8:	4621      	mov	r1, r4
   3ebfa:	f7db f969 	bl	19ed0 <strcmp>
   3ebfe:	fab0 f080 	clz	r0, r0
   3ec02:	0940      	lsrs	r0, r0, #5
}
   3ec04:	bd10      	pop	{r4, pc}
		return false;
   3ec06:	4620      	mov	r0, r4
   3ec08:	e7fc      	b.n	3ec04 <json_value_string_compare+0x18>

0003ec0a <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   3ec0a:	b108      	cbz	r0, 3ec10 <json_object_decode+0x6>
   3ec0c:	f001 bdd7 	b.w	407be <cJSON_GetObjectItem>
}
   3ec10:	4770      	bx	lr

0003ec12 <add_array_obj>:
{
   3ec12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3ec16:	4681      	mov	r9, r0
   3ec18:	4688      	mov	r8, r1
   3ec1a:	4617      	mov	r7, r2
	if ((obj == NULL) || (item_name == NULL)) {
   3ec1c:	461e      	mov	r6, r3
   3ec1e:	b32b      	cbz	r3, 3ec6c <add_array_obj+0x5a>
	obj_to_add = cJSON_CreateArray();
   3ec20:	f7e4 fa02 	bl	23028 <cJSON_CreateArray>
	if (obj_to_add == NULL) {
   3ec24:	4604      	mov	r4, r0
   3ec26:	b1d0      	cbz	r0, 3ec5e <add_array_obj+0x4c>
	for (u32_t cnt = 0; cnt < item_cnt; ++cnt) {
   3ec28:	2500      	movs	r5, #0
   3ec2a:	4545      	cmp	r5, r8
   3ec2c:	d10d      	bne.n	3ec4a <add_array_obj+0x38>
	if (cJSON_GetArraySize(obj_to_add) == 0) {
   3ec2e:	4620      	mov	r0, r4
   3ec30:	f001 fdbd 	bl	407ae <cJSON_GetArraySize>
   3ec34:	b908      	cbnz	r0, 3ec3a <add_array_obj+0x28>
		obj_to_add->type = cJSON_NULL;
   3ec36:	2304      	movs	r3, #4
   3ec38:	60e3      	str	r3, [r4, #12]
	cJSON_AddItemToObject(obj, item_name, obj_to_add);
   3ec3a:	4630      	mov	r0, r6
   3ec3c:	4622      	mov	r2, r4
   3ec3e:	4639      	mov	r1, r7
   3ec40:	f001 fdc2 	bl	407c8 <cJSON_AddItemToObject>
	return 0;
   3ec44:	2000      	movs	r0, #0
}
   3ec46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (items[cnt] != NULL) {
   3ec4a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
   3ec4e:	b158      	cbz	r0, 3ec68 <add_array_obj+0x56>
			str = cJSON_CreateString(items[cnt]);
   3ec50:	f7e4 f9d2 	bl	22ff8 <cJSON_CreateString>
			if (str == NULL) {
   3ec54:	4601      	mov	r1, r0
				cJSON_Delete(obj_to_add);
   3ec56:	4620      	mov	r0, r4
			if (str == NULL) {
   3ec58:	b921      	cbnz	r1, 3ec64 <add_array_obj+0x52>
				cJSON_Delete(obj_to_add);
   3ec5a:	f7e4 f92d 	bl	22eb8 <cJSON_Delete>
		return -ENOMEM;
   3ec5e:	f06f 000b 	mvn.w	r0, #11
   3ec62:	e7f0      	b.n	3ec46 <add_array_obj+0x34>
			cJSON_AddItemToArray(obj_to_add, str);
   3ec64:	f001 fdae 	bl	407c4 <cJSON_AddItemToArray>
	for (u32_t cnt = 0; cnt < item_cnt; ++cnt) {
   3ec68:	3501      	adds	r5, #1
   3ec6a:	e7de      	b.n	3ec2a <add_array_obj+0x18>
		return -EINVAL;
   3ec6c:	f06f 0015 	mvn.w	r0, #21
   3ec70:	e7e9      	b.n	3ec46 <add_array_obj+0x34>

0003ec72 <atomic_set>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3ec72:	e8d0 3fef 	ldaex	r3, [r0]
   3ec76:	e8c0 1fe2 	stlex	r2, r1, [r0]
   3ec7a:	2a00      	cmp	r2, #0
   3ec7c:	d1f9      	bne.n	3ec72 <atomic_set>
}
   3ec7e:	4618      	mov	r0, r3
   3ec80:	4770      	bx	lr

0003ec82 <env_sensors_get_air_quality>:
}
   3ec82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3ec86:	4770      	bx	lr

0003ec88 <get_bit_ptr>:
{
   3ec88:	b570      	push	{r4, r5, r6, lr}
   3ec8a:	250c      	movs	r5, #12
   3ec8c:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   3ec8e:	f990 000b 	ldrsb.w	r0, [r0, #11]
   3ec92:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
   3ec94:	4288      	cmp	r0, r1
	*word = &bitarray[bn / 32];
   3ec96:	4610      	mov	r0, r2
   3ec98:	eb06 0405 	add.w	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   3ec9c:	bfb8      	it	lt
   3ec9e:	5974      	ldrlt	r4, [r6, r5]
	*word = &bitarray[bn / 32];
   3eca0:	2a00      	cmp	r2, #0
   3eca2:	bfb8      	it	lt
   3eca4:	f102 001f 	addlt.w	r0, r2, #31
   3eca8:	1140      	asrs	r0, r0, #5
   3ecaa:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   3ecae:	6019      	str	r1, [r3, #0]
}
   3ecb0:	f002 001f 	and.w	r0, r2, #31
   3ecb4:	bd70      	pop	{r4, r5, r6, pc}

0003ecb6 <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
   3ecb6:	f04f 0320 	mov.w	r3, #32
   3ecba:	f3ef 8011 	mrs	r0, BASEPRI
   3ecbe:	f383 8811 	msr	BASEPRI, r3
   3ecc2:	f3bf 8f6f 	isb	sy
}
   3ecc6:	4770      	bx	lr

0003ecc8 <pool_irq_unlock.isra.4>:
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   3ecc8:	07c3      	lsls	r3, r0, #31
   3ecca:	d503      	bpl.n	3ecd4 <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   3eccc:	f381 8811 	msr	BASEPRI, r1
   3ecd0:	f3bf 8f6f 	isb	sy
}
   3ecd4:	4770      	bx	lr

0003ecd6 <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   3ecd6:	23ff      	movs	r3, #255	; 0xff
{
   3ecd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   3ecdc:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
   3ecde:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   3ece0:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
   3ece2:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
   3ece4:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   3ece8:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   3ecea:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   3ecec:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
   3ecf0:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   3ecf4:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
   3ecf6:	4598      	cmp	r8, r3
   3ecf8:	dc05      	bgt.n	3ed06 <z_sys_mem_pool_base_init+0x30>
   3ecfa:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   3ecfc:	4619      	mov	r1, r3
   3ecfe:	428f      	cmp	r7, r1
   3ed00:	dc20      	bgt.n	3ed44 <z_sys_mem_pool_base_init+0x6e>
}
   3ed02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   3ed06:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   3ed0a:	fb09 fe03 	mul.w	lr, r9, r3
   3ed0e:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   3ed12:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
   3ed14:	eb0a 040e 	add.w	r4, sl, lr
   3ed18:	f104 0b04 	add.w	fp, r4, #4
	list->tail = (sys_dnode_t *)list;
   3ed1c:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   3ed20:	d805      	bhi.n	3ed2e <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   3ed22:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   3ed24:	0892      	lsrs	r2, r2, #2
   3ed26:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   3ed2a:	3301      	adds	r3, #1
   3ed2c:	e7e3      	b.n	3ecf6 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   3ed2e:	f115 041f 	adds.w	r4, r5, #31
   3ed32:	bf48      	it	mi
   3ed34:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   3ed38:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   3ed3a:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   3ed3e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   3ed42:	e7ef      	b.n	3ed24 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   3ed44:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   3ed46:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   3ed48:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   3ed4c:	18ec      	adds	r4, r5, r3
	node->next = list;
   3ed4e:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   3ed52:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   3ed54:	3101      	adds	r1, #1
   3ed56:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   3ed58:	6895      	ldr	r5, [r2, #8]
   3ed5a:	4433      	add	r3, r6
   3ed5c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   3ed5e:	6094      	str	r4, [r2, #8]
   3ed60:	e7cd      	b.n	3ecfe <z_sys_mem_pool_base_init+0x28>

0003ed62 <z_sys_mem_pool_block_alloc>:
{
   3ed62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ed66:	b087      	sub	sp, #28
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   3ed68:	7a84      	ldrb	r4, [r0, #10]
{
   3ed6a:	af00      	add	r7, sp, #0
   3ed6c:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   3ed70:	00a3      	lsls	r3, r4, #2
   3ed72:	3307      	adds	r3, #7
   3ed74:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   3ed78:	ebad 0d03 	sub.w	sp, sp, r3
   3ed7c:	46ea      	mov	sl, sp
	lsizes[0] = p->max_sz;
   3ed7e:	4653      	mov	r3, sl
   3ed80:	6842      	ldr	r2, [r0, #4]
{
   3ed82:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   3ed84:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   3ed88:	2200      	movs	r2, #0
   3ed8a:	4294      	cmp	r4, r2
   3ed8c:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   3ed90:	dd09      	ble.n	3eda6 <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   3ed92:	b122      	cbz	r2, 3ed9e <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   3ed94:	6818      	ldr	r0, [r3, #0]
   3ed96:	0880      	lsrs	r0, r0, #2
   3ed98:	f020 0003 	bic.w	r0, r0, #3
   3ed9c:	6058      	str	r0, [r3, #4]
		if (lsizes[i] < size) {
   3ed9e:	f853 0f04 	ldr.w	r0, [r3, #4]!
   3eda2:	4288      	cmp	r0, r1
   3eda4:	d208      	bcs.n	3edb8 <z_sys_mem_pool_block_alloc+0x56>
	if (alloc_l < 0) {
   3eda6:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   3edaa:	d107      	bne.n	3edbc <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   3edac:	2300      	movs	r3, #0
   3edae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   3edb0:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
   3edb2:	f06f 000b 	mvn.w	r0, #11
   3edb6:	e02c      	b.n	3ee12 <z_sys_mem_pool_block_alloc+0xb0>
	for (i = 0; i < p->n_levels; i++) {
   3edb8:	3201      	adds	r2, #1
   3edba:	e7e6      	b.n	3ed8a <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   3edbc:	7c28      	ldrb	r0, [r5, #16]
   3edbe:	f010 0001 	ands.w	r0, r0, #1
   3edc2:	d001      	beq.n	3edc8 <z_sys_mem_pool_block_alloc+0x66>
   3edc4:	f7ff ff77 	bl	3ecb6 <pool_irq_lock.isra.2.part.3>
   3edc8:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
   3edca:	4680      	mov	r8, r0
	block = sys_dlist_get(&p->levels[l].free_list);
   3edcc:	464e      	mov	r6, r9
   3edce:	68ea      	ldr	r2, [r5, #12]
   3edd0:	fb03 2309 	mla	r3, r3, r9, r2
	return list->head == list;
   3edd4:	461a      	mov	r2, r3
   3edd6:	f852 4f04 	ldr.w	r4, [r2, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   3edda:	4294      	cmp	r4, r2
   3eddc:	d11d      	bne.n	3ee1a <z_sys_mem_pool_block_alloc+0xb8>
	for (i = alloc_l; i >= 0; i--) {
   3edde:	3e01      	subs	r6, #1
   3ede0:	1c72      	adds	r2, r6, #1
   3ede2:	f1a3 030c 	sub.w	r3, r3, #12
   3ede6:	d1f5      	bne.n	3edd4 <z_sys_mem_pool_block_alloc+0x72>
   3ede8:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
   3edea:	4641      	mov	r1, r8
   3edec:	7c28      	ldrb	r0, [r5, #16]
   3edee:	f7ff ff6b 	bl	3ecc8 <pool_irq_unlock.isra.4>
	*data_p = data;
   3edf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   3edf4:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   3edf6:	2c00      	cmp	r4, #0
   3edf8:	d0db      	beq.n	3edb2 <z_sys_mem_pool_block_alloc+0x50>
	*level_p = alloc_l;
   3edfa:	68bb      	ldr	r3, [r7, #8]
	return 0;
   3edfc:	2000      	movs	r0, #0
	*level_p = alloc_l;
   3edfe:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   3ee02:	682b      	ldr	r3, [r5, #0]
   3ee04:	1ae4      	subs	r4, r4, r3
   3ee06:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   3ee0a:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   3ee0e:	687b      	ldr	r3, [r7, #4]
   3ee10:	601c      	str	r4, [r3, #0]
}
   3ee12:	371c      	adds	r7, #28
   3ee14:	46bd      	mov	sp, r7
   3ee16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	node->prev->next = node->next;
   3ee1a:	e9d4 3200 	ldrd	r3, r2, [r4]
   3ee1e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3ee20:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3ee22:	2300      	movs	r3, #0
	node->prev = NULL;
   3ee24:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   3ee28:	682b      	ldr	r3, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   3ee2a:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   3ee2e:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   3ee30:	f107 0b14 	add.w	fp, r7, #20
   3ee34:	fb92 f2f1 	sdiv	r2, r2, r1
   3ee38:	465b      	mov	r3, fp
   3ee3a:	4631      	mov	r1, r6
   3ee3c:	4628      	mov	r0, r5
   3ee3e:	f7ff ff23 	bl	3ec88 <get_bit_ptr>
	*word |= (1<<bit);
   3ee42:	2201      	movs	r2, #1
   3ee44:	6979      	ldr	r1, [r7, #20]
   3ee46:	fa02 f000 	lsl.w	r0, r2, r0
   3ee4a:	680b      	ldr	r3, [r1, #0]
   3ee4c:	603a      	str	r2, [r7, #0]
   3ee4e:	4303      	orrs	r3, r0
   3ee50:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
   3ee52:	454e      	cmp	r6, r9
   3ee54:	dac9      	bge.n	3edea <z_sys_mem_pool_block_alloc+0x88>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   3ee56:	682a      	ldr	r2, [r5, #0]
   3ee58:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
   3ee5c:	1aa2      	subs	r2, r4, r2
   3ee5e:	fb92 f2f3 	sdiv	r2, r2, r3
	set_alloc_bit(p, l + 1, 4*bn);
   3ee62:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   3ee64:	465b      	mov	r3, fp
   3ee66:	0092      	lsls	r2, r2, #2
   3ee68:	4631      	mov	r1, r6
   3ee6a:	4628      	mov	r0, r5
   3ee6c:	f7ff ff0c 	bl	3ec88 <get_bit_ptr>
	*word |= (1<<bit);
   3ee70:	697a      	ldr	r2, [r7, #20]
   3ee72:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   3ee74:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   3ee76:	fa03 f000 	lsl.w	r0, r3, r0
   3ee7a:	6813      	ldr	r3, [r2, #0]
   3ee7c:	4303      	orrs	r3, r0
   3ee7e:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   3ee80:	230c      	movs	r3, #12
   3ee82:	2203      	movs	r2, #3
   3ee84:	fb03 1106 	mla	r1, r3, r6, r1
		int lsz = lsizes[l + 1];
   3ee88:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   3ee8c:	f101 0e04 	add.w	lr, r1, #4
   3ee90:	1823      	adds	r3, r4, r0
   3ee92:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
   3ee94:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   3ee96:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   3ee9a:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   3ee9c:	688a      	ldr	r2, [r1, #8]
   3ee9e:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   3eea0:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
   3eea2:	608b      	str	r3, [r1, #8]
   3eea4:	3a01      	subs	r2, #1
   3eea6:	4403      	add	r3, r0
   3eea8:	60fa      	str	r2, [r7, #12]
   3eeaa:	d1f3      	bne.n	3ee94 <z_sys_mem_pool_block_alloc+0x132>
				pool_irq_unlock(p, key);
   3eeac:	4641      	mov	r1, r8
   3eeae:	7c28      	ldrb	r0, [r5, #16]
   3eeb0:	f7ff ff0a 	bl	3ecc8 <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   3eeb4:	7c2b      	ldrb	r3, [r5, #16]
   3eeb6:	07db      	lsls	r3, r3, #31
   3eeb8:	d503      	bpl.n	3eec2 <z_sys_mem_pool_block_alloc+0x160>
   3eeba:	f7ff fefc 	bl	3ecb6 <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   3eebe:	4680      	mov	r8, r0
   3eec0:	e7c7      	b.n	3ee52 <z_sys_mem_pool_block_alloc+0xf0>
		return 0;
   3eec2:	68f8      	ldr	r0, [r7, #12]
   3eec4:	e7fb      	b.n	3eebe <z_sys_mem_pool_block_alloc+0x15c>

0003eec6 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   3eec6:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   3eec8:	f7fb ffe4 	bl	3ae94 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   3eecc:	2000      	movs	r0, #0
   3eece:	bd08      	pop	{r3, pc}

0003eed0 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, s32_t timeout)
{
   3eed0:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   3eed2:	f7fc f827 	bl	3af24 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   3eed6:	f110 0f0b 	cmn.w	r0, #11
   3eeda:	d005      	beq.n	3eee8 <sys_sem_take+0x18>
   3eedc:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   3eee0:	bf08      	it	eq
   3eee2:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   3eee6:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   3eee8:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   3eeec:	e7fb      	b.n	3eee6 <sys_sem_take+0x16>

0003eeee <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   3eeee:	4604      	mov	r4, r0
   3eef0:	b508      	push	{r3, lr}
   3eef2:	4608      	mov	r0, r1
   3eef4:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   3eef6:	461a      	mov	r2, r3
   3eef8:	47a0      	blx	r4
	return z_impl_k_current_get();
   3eefa:	f7fb ff8f 	bl	3ae1c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   3eefe:	f7e1 ff89 	bl	20e14 <z_impl_k_thread_abort>

0003ef02 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   3ef02:	b510      	push	{r4, lr}
   3ef04:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   3ef06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3ef0a:	4620      	mov	r0, r4
   3ef0c:	f7fa fe74 	bl	39bf8 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   3ef10:	4603      	mov	r3, r0
   3ef12:	2800      	cmp	r0, #0
   3ef14:	d0f7      	beq.n	3ef06 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   3ef16:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3ef18:	3308      	adds	r3, #8
   3ef1a:	e8d3 1fef 	ldaex	r1, [r3]
   3ef1e:	f021 0c01 	bic.w	ip, r1, #1
   3ef22:	e8c3 cfee 	stlex	lr, ip, [r3]
   3ef26:	f1be 0f00 	cmp.w	lr, #0
   3ef2a:	d1f6      	bne.n	3ef1a <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   3ef2c:	07cb      	lsls	r3, r1, #31
   3ef2e:	d500      	bpl.n	3ef32 <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   3ef30:	4790      	blx	r2
	z_impl_k_yield();
   3ef32:	f7fb fe13 	bl	3ab5c <z_impl_k_yield>
   3ef36:	e7e6      	b.n	3ef06 <z_work_q_main+0x4>

0003ef38 <next>:
	if (lexer->pos >= lexer->end) {
   3ef38:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   3ef3c:	429a      	cmp	r2, r3
	return *lexer->pos++;
   3ef3e:	bf35      	itete	cc
   3ef40:	1c53      	addcc	r3, r2, #1
		lexer->pos = lexer->end + 1;
   3ef42:	3301      	addcs	r3, #1
	return *lexer->pos++;
   3ef44:	6083      	strcc	r3, [r0, #8]
		lexer->pos = lexer->end + 1;
   3ef46:	6083      	strcs	r3, [r0, #8]
		return '\0';
   3ef48:	bf2c      	ite	cs
   3ef4a:	2000      	movcs	r0, #0
	return *lexer->pos++;
   3ef4c:	7810      	ldrbcc	r0, [r2, #0]
}
   3ef4e:	4770      	bx	lr

0003ef50 <accept_run>:
{
   3ef50:	b510      	push	{r4, lr}
   3ef52:	4604      	mov	r4, r0
   3ef54:	3901      	subs	r1, #1
	for (; *run; run++) {
   3ef56:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   3ef5a:	b900      	cbnz	r0, 3ef5e <accept_run+0xe>
}
   3ef5c:	bd10      	pop	{r4, pc}
		if (next(lexer) != *run) {
   3ef5e:	4620      	mov	r0, r4
   3ef60:	f7ff ffea 	bl	3ef38 <next>
   3ef64:	780b      	ldrb	r3, [r1, #0]
   3ef66:	4298      	cmp	r0, r3
   3ef68:	d0f5      	beq.n	3ef56 <accept_run+0x6>
			return -EINVAL;
   3ef6a:	f06f 0015 	mvn.w	r0, #21
   3ef6e:	e7f5      	b.n	3ef5c <accept_run+0xc>

0003ef70 <element_token>:
	switch (token) {
   3ef70:	285b      	cmp	r0, #91	; 0x5b
   3ef72:	d00e      	beq.n	3ef92 <element_token+0x22>
   3ef74:	d807      	bhi.n	3ef86 <element_token+0x16>
   3ef76:	2822      	cmp	r0, #34	; 0x22
   3ef78:	d00b      	beq.n	3ef92 <element_token+0x22>
   3ef7a:	2830      	cmp	r0, #48	; 0x30
		return -EINVAL;
   3ef7c:	bf0c      	ite	eq
   3ef7e:	2000      	moveq	r0, #0
   3ef80:	f06f 0015 	mvnne.w	r0, #21
   3ef84:	4770      	bx	lr
	switch (token) {
   3ef86:	2874      	cmp	r0, #116	; 0x74
   3ef88:	d003      	beq.n	3ef92 <element_token+0x22>
   3ef8a:	287b      	cmp	r0, #123	; 0x7b
   3ef8c:	d001      	beq.n	3ef92 <element_token+0x22>
   3ef8e:	2866      	cmp	r0, #102	; 0x66
   3ef90:	e7f4      	b.n	3ef7c <element_token+0xc>
		return 0;
   3ef92:	2000      	movs	r0, #0
}
   3ef94:	4770      	bx	lr

0003ef96 <get_elem_size>:
{
   3ef96:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3ef9a:	4605      	mov	r5, r0
   3ef9c:	2701      	movs	r7, #1
	switch (descr->type) {
   3ef9e:	796b      	ldrb	r3, [r5, #5]
   3efa0:	085b      	lsrs	r3, r3, #1
   3efa2:	2b5b      	cmp	r3, #91	; 0x5b
   3efa4:	d02d      	beq.n	3f002 <get_elem_size+0x6c>
   3efa6:	d80b      	bhi.n	3efc0 <get_elem_size+0x2a>
   3efa8:	2b22      	cmp	r3, #34	; 0x22
   3efaa:	d02e      	beq.n	3f00a <get_elem_size+0x74>
		return -EINVAL;
   3efac:	2b30      	cmp	r3, #48	; 0x30
   3efae:	bf08      	it	eq
   3efb0:	2404      	moveq	r4, #4
   3efb2:	bf18      	it	ne
   3efb4:	f06f 0415 	mvnne.w	r4, #21
}
   3efb8:	fb07 f004 	mul.w	r0, r7, r4
   3efbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (descr->type) {
   3efc0:	2b74      	cmp	r3, #116	; 0x74
   3efc2:	d024      	beq.n	3f00e <get_elem_size+0x78>
   3efc4:	2b7b      	cmp	r3, #123	; 0x7b
   3efc6:	d003      	beq.n	3efd0 <get_elem_size+0x3a>
		return -EINVAL;
   3efc8:	2b66      	cmp	r3, #102	; 0x66
   3efca:	bf08      	it	eq
   3efcc:	2401      	moveq	r4, #1
   3efce:	e7f0      	b.n	3efb2 <get_elem_size+0x1c>
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   3efd0:	2600      	movs	r6, #0
			total += ROUND_UP(s, 1 << descr->align_shift);
   3efd2:	f04f 0901 	mov.w	r9, #1
		ptrdiff_t total = 0;
   3efd6:	4634      	mov	r4, r6
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   3efd8:	f8d5 800c 	ldr.w	r8, [r5, #12]
   3efdc:	45b0      	cmp	r8, r6
   3efde:	d0eb      	beq.n	3efb8 <get_elem_size+0x22>
			ptrdiff_t s = get_elem_size(&descr->object.sub_descr[i]);
   3efe0:	68a8      	ldr	r0, [r5, #8]
   3efe2:	eb00 1006 	add.w	r0, r0, r6, lsl #4
   3efe6:	f7ff ffd6 	bl	3ef96 <get_elem_size>
			total += ROUND_UP(s, 1 << descr->align_shift);
   3efea:	792b      	ldrb	r3, [r5, #4]
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   3efec:	3601      	adds	r6, #1
			total += ROUND_UP(s, 1 << descr->align_shift);
   3efee:	f003 0303 	and.w	r3, r3, #3
   3eff2:	fa09 f303 	lsl.w	r3, r9, r3
   3eff6:	1e5a      	subs	r2, r3, #1
   3eff8:	4410      	add	r0, r2
   3effa:	425b      	negs	r3, r3
   3effc:	4003      	ands	r3, r0
   3effe:	441c      	add	r4, r3
   3f000:	e7ec      	b.n	3efdc <get_elem_size+0x46>
		return descr->array.n_elements * get_elem_size(descr->array.element_descr);
   3f002:	e9d5 5302 	ldrd	r5, r3, [r5, #8]
   3f006:	435f      	muls	r7, r3
   3f008:	e7c9      	b.n	3ef9e <get_elem_size+0x8>
		return sizeof(s32_t);
   3f00a:	2404      	movs	r4, #4
   3f00c:	e7d4      	b.n	3efb8 <get_elem_size+0x22>
		return sizeof(bool);
   3f00e:	2401      	movs	r4, #1
   3f010:	e7d2      	b.n	3efb8 <get_elem_size+0x22>

0003f012 <lexer_next>:
{
   3f012:	b538      	push	{r3, r4, r5, lr}
   3f014:	4604      	mov	r4, r0
   3f016:	460d      	mov	r5, r1
	while (lexer->state) {
   3f018:	6823      	ldr	r3, [r4, #0]
   3f01a:	7c20      	ldrb	r0, [r4, #16]
   3f01c:	b933      	cbnz	r3, 3f02c <lexer_next+0x1a>
	if (lexer->token.type == empty_token) {
   3f01e:	b1a0      	cbz	r0, 3f04a <lexer_next+0x38>
	*token = lexer->token;
   3f020:	f104 0210 	add.w	r2, r4, #16
   3f024:	ca07      	ldmia	r2, {r0, r1, r2}
   3f026:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   3f02a:	e00c      	b.n	3f046 <lexer_next+0x34>
	if (lexer->token.type == empty_token) {
   3f02c:	285f      	cmp	r0, #95	; 0x5f
   3f02e:	d103      	bne.n	3f038 <lexer_next+0x26>
		lexer->state = lexer->state(lexer);
   3f030:	4620      	mov	r0, r4
   3f032:	4798      	blx	r3
   3f034:	6020      	str	r0, [r4, #0]
   3f036:	e7ef      	b.n	3f018 <lexer_next+0x6>
	*token = lexer->token;
   3f038:	f104 0310 	add.w	r3, r4, #16
   3f03c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
	lexer->token.type = empty_token;
   3f040:	235f      	movs	r3, #95	; 0x5f
	*token = lexer->token;
   3f042:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	return true;
   3f046:	2001      	movs	r0, #1
	lexer->token.type = empty_token;
   3f048:	7423      	strb	r3, [r4, #16]
}
   3f04a:	bd38      	pop	{r3, r4, r5, pc}

0003f04c <obj_parse>:
{
   3f04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f050:	4607      	mov	r7, r0
   3f052:	468a      	mov	sl, r1
   3f054:	469b      	mov	fp, r3
	s32_t decoded_fields = 0;
   3f056:	2400      	movs	r4, #0
{
   3f058:	b08d      	sub	sp, #52	; 0x34
   3f05a:	9202      	str	r2, [sp, #8]
	if (!lexer_next(&json->lexer, &token)) {
   3f05c:	ad04      	add	r5, sp, #16
	if (!lexer_next(&json->lexer, &kv->value)) {
   3f05e:	f10d 0824 	add.w	r8, sp, #36	; 0x24
	if (!lexer_next(&json->lexer, &token)) {
   3f062:	4629      	mov	r1, r5
   3f064:	4638      	mov	r0, r7
   3f066:	f7ff ffd4 	bl	3f012 <lexer_next>
   3f06a:	b938      	cbnz	r0, 3f07c <obj_parse+0x30>
	return -EINVAL;
   3f06c:	f06f 0415 	mvn.w	r4, #21
}
   3f070:	4620      	mov	r0, r4
   3f072:	b00d      	add	sp, #52	; 0x34
   3f074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (i = 0; i < descr_len; i++) {
   3f078:	3601      	adds	r6, #1
   3f07a:	e02e      	b.n	3f0da <obj_parse+0x8e>
	switch (token.type) {
   3f07c:	f89d 3010 	ldrb.w	r3, [sp, #16]
   3f080:	2b2c      	cmp	r3, #44	; 0x2c
   3f082:	d055      	beq.n	3f130 <obj_parse+0xe4>
   3f084:	2b7d      	cmp	r3, #125	; 0x7d
   3f086:	d01c      	beq.n	3f0c2 <obj_parse+0x76>
		if (token.type != JSON_TOK_STRING) {
   3f088:	2b22      	cmp	r3, #34	; 0x22
   3f08a:	d1ef      	bne.n	3f06c <obj_parse+0x20>
		kv->key = token.start;
   3f08c:	9a05      	ldr	r2, [sp, #20]
		kv->key_len = (size_t)(token.end - token.start);
   3f08e:	9b06      	ldr	r3, [sp, #24]
	if (!lexer_next(&json->lexer, &token)) {
   3f090:	4629      	mov	r1, r5
		kv->key_len = (size_t)(token.end - token.start);
   3f092:	1a9b      	subs	r3, r3, r2
	if (!lexer_next(&json->lexer, &token)) {
   3f094:	4638      	mov	r0, r7
		kv->key = token.start;
   3f096:	9207      	str	r2, [sp, #28]
		kv->key_len = (size_t)(token.end - token.start);
   3f098:	9308      	str	r3, [sp, #32]
	if (!lexer_next(&json->lexer, &token)) {
   3f09a:	f7ff ffba 	bl	3f012 <lexer_next>
   3f09e:	2800      	cmp	r0, #0
   3f0a0:	d0e4      	beq.n	3f06c <obj_parse+0x20>
	if (token.type != JSON_TOK_COLON) {
   3f0a2:	f89d 3010 	ldrb.w	r3, [sp, #16]
   3f0a6:	2b3a      	cmp	r3, #58	; 0x3a
   3f0a8:	d1e0      	bne.n	3f06c <obj_parse+0x20>
	if (!lexer_next(&json->lexer, &kv->value)) {
   3f0aa:	4641      	mov	r1, r8
   3f0ac:	4638      	mov	r0, r7
   3f0ae:	f7ff ffb0 	bl	3f012 <lexer_next>
   3f0b2:	2800      	cmp	r0, #0
   3f0b4:	d0da      	beq.n	3f06c <obj_parse+0x20>
	return element_token(kv->value.type);
   3f0b6:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
   3f0ba:	f7ff ff59 	bl	3ef70 <element_token>
	while (!obj_next(obj, &kv)) {
   3f0be:	b138      	cbz	r0, 3f0d0 <obj_parse+0x84>
   3f0c0:	e7d4      	b.n	3f06c <obj_parse+0x20>
		kv->key = NULL;
   3f0c2:	2300      	movs	r3, #0
		kv->value = token;
   3f0c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   3f0c8:	e888 0007 	stmia.w	r8, {r0, r1, r2}
		kv->key_len = 0;
   3f0cc:	e9cd 3307 	strd	r3, r3, [sp, #28]
		if (kv.value.type == JSON_TOK_OBJECT_END) {
   3f0d0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   3f0d4:	2b7d      	cmp	r3, #125	; 0x7d
   3f0d6:	d0cb      	beq.n	3f070 <obj_parse+0x24>
		for (i = 0; i < descr_len; i++) {
   3f0d8:	2600      	movs	r6, #0
   3f0da:	9b02      	ldr	r3, [sp, #8]
   3f0dc:	429e      	cmp	r6, r3
   3f0de:	d0c0      	beq.n	3f062 <obj_parse+0x16>
			if (decoded_fields & (1 << i)) {
   3f0e0:	fa44 f306 	asr.w	r3, r4, r6
   3f0e4:	07db      	lsls	r3, r3, #31
   3f0e6:	d4c7      	bmi.n	3f078 <obj_parse+0x2c>
   3f0e8:	0131      	lsls	r1, r6, #4
   3f0ea:	eb0a 0901 	add.w	r9, sl, r1
			if (kv.key_len != descr[i].field_name_len) {
   3f0ee:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   3f0f2:	9a08      	ldr	r2, [sp, #32]
   3f0f4:	f3c3 0386 	ubfx	r3, r3, #2, #7
   3f0f8:	429a      	cmp	r2, r3
   3f0fa:	d1bd      	bne.n	3f078 <obj_parse+0x2c>
			void *decode_field = (char *)val + descr[i].offset;
   3f0fc:	f8b9 3006 	ldrh.w	r3, [r9, #6]
			if (memcmp(kv.key, descr[i].field_name,
   3f100:	f85a 1001 	ldr.w	r1, [sl, r1]
   3f104:	9807      	ldr	r0, [sp, #28]
			void *decode_field = (char *)val + descr[i].offset;
   3f106:	9303      	str	r3, [sp, #12]
			if (memcmp(kv.key, descr[i].field_name,
   3f108:	f002 fc45 	bl	41996 <memcmp>
   3f10c:	2800      	cmp	r0, #0
   3f10e:	d1b3      	bne.n	3f078 <obj_parse+0x2c>
			ret = decode_value(obj, &descr[i], &kv.value,
   3f110:	9b03      	ldr	r3, [sp, #12]
   3f112:	f8cd b000 	str.w	fp, [sp]
   3f116:	445b      	add	r3, fp
   3f118:	4642      	mov	r2, r8
   3f11a:	4649      	mov	r1, r9
   3f11c:	4638      	mov	r0, r7
   3f11e:	f7e0 f83d 	bl	1f19c <decode_value>
			if (ret < 0) {
   3f122:	2800      	cmp	r0, #0
   3f124:	db0d      	blt.n	3f142 <obj_parse+0xf6>
			decoded_fields |= 1<<i;
   3f126:	2301      	movs	r3, #1
   3f128:	fa03 f606 	lsl.w	r6, r3, r6
   3f12c:	4334      	orrs	r4, r6
			break;
   3f12e:	e798      	b.n	3f062 <obj_parse+0x16>
		if (!lexer_next(&json->lexer, &token)) {
   3f130:	4629      	mov	r1, r5
   3f132:	4638      	mov	r0, r7
   3f134:	f7ff ff6d 	bl	3f012 <lexer_next>
   3f138:	2800      	cmp	r0, #0
   3f13a:	d097      	beq.n	3f06c <obj_parse+0x20>
		if (token.type != JSON_TOK_STRING) {
   3f13c:	f89d 3010 	ldrb.w	r3, [sp, #16]
   3f140:	e7a2      	b.n	3f088 <obj_parse+0x3c>
   3f142:	4604      	mov	r4, r0
   3f144:	e794      	b.n	3f070 <obj_parse+0x24>

0003f146 <arch_printk_char_out>:
}
   3f146:	2000      	movs	r0, #0
   3f148:	4770      	bx	lr

0003f14a <print_err>:
{
   3f14a:	b570      	push	{r4, r5, r6, lr}
   3f14c:	460d      	mov	r5, r1
   3f14e:	4604      	mov	r4, r0
	out('E', ctx);
   3f150:	2045      	movs	r0, #69	; 0x45
   3f152:	47a0      	blx	r4
	out('R', ctx);
   3f154:	4629      	mov	r1, r5
   3f156:	2052      	movs	r0, #82	; 0x52
   3f158:	47a0      	blx	r4
	out('R', ctx);
   3f15a:	4629      	mov	r1, r5
   3f15c:	4623      	mov	r3, r4
}
   3f15e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   3f162:	2052      	movs	r0, #82	; 0x52
   3f164:	4718      	bx	r3

0003f166 <z_vprintk>:
{
   3f166:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   3f16a:	f04f 0800 	mov.w	r8, #0
{
   3f16e:	4606      	mov	r6, r0
   3f170:	460f      	mov	r7, r1
	int min_width = -1;
   3f172:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   3f176:	46c1      	mov	r9, r8
{
   3f178:	b08b      	sub	sp, #44	; 0x2c
   3f17a:	461c      	mov	r4, r3
	while (*fmt) {
   3f17c:	1e53      	subs	r3, r2, #1
   3f17e:	9302      	str	r3, [sp, #8]
			might_format = 0;
   3f180:	2500      	movs	r5, #0
					break;
   3f182:	e005      	b.n	3f190 <z_vprintk+0x2a>
		if (!might_format) {
   3f184:	b96d      	cbnz	r5, 3f1a2 <z_vprintk+0x3c>
			if (*fmt != '%') {
   3f186:	2825      	cmp	r0, #37	; 0x25
   3f188:	f000 814f 	beq.w	3f42a <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   3f18c:	4639      	mov	r1, r7
   3f18e:	47b0      	blx	r6
	while (*fmt) {
   3f190:	9b02      	ldr	r3, [sp, #8]
   3f192:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   3f196:	9302      	str	r3, [sp, #8]
   3f198:	2800      	cmp	r0, #0
   3f19a:	d1f3      	bne.n	3f184 <z_vprintk+0x1e>
}
   3f19c:	b00b      	add	sp, #44	; 0x2c
   3f19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   3f1a2:	2864      	cmp	r0, #100	; 0x64
   3f1a4:	d06e      	beq.n	3f284 <z_vprintk+0x11e>
   3f1a6:	d81a      	bhi.n	3f1de <z_vprintk+0x78>
   3f1a8:	2839      	cmp	r0, #57	; 0x39
   3f1aa:	d80a      	bhi.n	3f1c2 <z_vprintk+0x5c>
   3f1ac:	2831      	cmp	r0, #49	; 0x31
   3f1ae:	d260      	bcs.n	3f272 <z_vprintk+0x10c>
   3f1b0:	282d      	cmp	r0, #45	; 0x2d
   3f1b2:	f000 8140 	beq.w	3f436 <z_vprintk+0x2d0>
   3f1b6:	2830      	cmp	r0, #48	; 0x30
   3f1b8:	d04c      	beq.n	3f254 <z_vprintk+0xee>
   3f1ba:	2825      	cmp	r0, #37	; 0x25
   3f1bc:	d107      	bne.n	3f1ce <z_vprintk+0x68>
				out((int)'%', ctx);
   3f1be:	4639      	mov	r1, r7
   3f1c0:	e00b      	b.n	3f1da <z_vprintk+0x74>
			switch (*fmt) {
   3f1c2:	2858      	cmp	r0, #88	; 0x58
   3f1c4:	f000 80bb 	beq.w	3f33e <z_vprintk+0x1d8>
   3f1c8:	2863      	cmp	r0, #99	; 0x63
   3f1ca:	f000 812a 	beq.w	3f422 <z_vprintk+0x2bc>
					out((int)'%', ctx);
   3f1ce:	4639      	mov	r1, r7
   3f1d0:	2025      	movs	r0, #37	; 0x25
   3f1d2:	47b0      	blx	r6
					out((int)*fmt, ctx);
   3f1d4:	4639      	mov	r1, r7
   3f1d6:	9b02      	ldr	r3, [sp, #8]
   3f1d8:	7818      	ldrb	r0, [r3, #0]
   3f1da:	47b0      	blx	r6
   3f1dc:	e7d0      	b.n	3f180 <z_vprintk+0x1a>
			switch (*fmt) {
   3f1de:	2870      	cmp	r0, #112	; 0x70
   3f1e0:	f000 80a3 	beq.w	3f32a <z_vprintk+0x1c4>
   3f1e4:	d811      	bhi.n	3f20a <z_vprintk+0xa4>
   3f1e6:	2869      	cmp	r0, #105	; 0x69
   3f1e8:	d04c      	beq.n	3f284 <z_vprintk+0x11e>
   3f1ea:	286c      	cmp	r0, #108	; 0x6c
   3f1ec:	d105      	bne.n	3f1fa <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
   3f1ee:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   3f1f2:	d12a      	bne.n	3f24a <z_vprintk+0xe4>
					length_mod = 'L';
   3f1f4:	f04f 084c 	mov.w	r8, #76	; 0x4c
   3f1f8:	e7ca      	b.n	3f190 <z_vprintk+0x2a>
			switch (*fmt) {
   3f1fa:	2868      	cmp	r0, #104	; 0x68
   3f1fc:	d1e7      	bne.n	3f1ce <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   3f1fe:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   3f202:	d122      	bne.n	3f24a <z_vprintk+0xe4>
					length_mod = 'H';
   3f204:	f04f 0848 	mov.w	r8, #72	; 0x48
   3f208:	e7c2      	b.n	3f190 <z_vprintk+0x2a>
			switch (*fmt) {
   3f20a:	2875      	cmp	r0, #117	; 0x75
   3f20c:	d071      	beq.n	3f2f2 <z_vprintk+0x18c>
   3f20e:	d818      	bhi.n	3f242 <z_vprintk+0xdc>
   3f210:	2873      	cmp	r0, #115	; 0x73
   3f212:	d1dc      	bne.n	3f1ce <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   3f214:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   3f218:	46ab      	mov	fp, r5
   3f21a:	465b      	mov	r3, fp
   3f21c:	f81b 0b01 	ldrb.w	r0, [fp], #1
   3f220:	2800      	cmp	r0, #0
   3f222:	f040 80fb 	bne.w	3f41c <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
   3f226:	f1b9 0f03 	cmp.w	r9, #3
   3f22a:	f040 810a 	bne.w	3f442 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   3f22e:	1b5d      	subs	r5, r3, r5
   3f230:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   3f234:	2d00      	cmp	r5, #0
   3f236:	dda3      	ble.n	3f180 <z_vprintk+0x1a>
						out(' ', ctx);
   3f238:	4639      	mov	r1, r7
   3f23a:	2020      	movs	r0, #32
   3f23c:	47b0      	blx	r6
   3f23e:	3d01      	subs	r5, #1
   3f240:	e7f8      	b.n	3f234 <z_vprintk+0xce>
			switch (*fmt) {
   3f242:	2878      	cmp	r0, #120	; 0x78
   3f244:	d07b      	beq.n	3f33e <z_vprintk+0x1d8>
   3f246:	287a      	cmp	r0, #122	; 0x7a
   3f248:	d1c1      	bne.n	3f1ce <z_vprintk+0x68>
				} else if (length_mod == 0) {
   3f24a:	f1b8 0f00 	cmp.w	r8, #0
   3f24e:	d1be      	bne.n	3f1ce <z_vprintk+0x68>
   3f250:	4680      	mov	r8, r0
   3f252:	e79d      	b.n	3f190 <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
   3f254:	f1ba 0f00 	cmp.w	sl, #0
   3f258:	da0e      	bge.n	3f278 <z_vprintk+0x112>
   3f25a:	f1b9 0f00 	cmp.w	r9, #0
   3f25e:	f000 80ed 	beq.w	3f43c <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   3f262:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   3f266:	f1b9 0f00 	cmp.w	r9, #0
   3f26a:	bf08      	it	eq
   3f26c:	f04f 0902 	moveq.w	r9, #2
   3f270:	e78e      	b.n	3f190 <z_vprintk+0x2a>
				if (min_width < 0) {
   3f272:	f1ba 0f00 	cmp.w	sl, #0
   3f276:	dbf4      	blt.n	3f262 <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
   3f278:	230a      	movs	r3, #10
   3f27a:	fb03 0a0a 	mla	sl, r3, sl, r0
   3f27e:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   3f282:	e7f0      	b.n	3f266 <z_vprintk+0x100>
				if (length_mod == 'z') {
   3f284:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   3f288:	d102      	bne.n	3f290 <z_vprintk+0x12a>
					d = va_arg(ap, int);
   3f28a:	f854 5b04 	ldr.w	r5, [r4], #4
   3f28e:	e01f      	b.n	3f2d0 <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
   3f290:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   3f294:	d0f9      	beq.n	3f28a <z_vprintk+0x124>
				} else if (length_mod == 'L') {
   3f296:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   3f29a:	d1f6      	bne.n	3f28a <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
   3f29c:	3407      	adds	r4, #7
   3f29e:	f024 0407 	bic.w	r4, r4, #7
   3f2a2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   3f2a6:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   3f2aa:	9106      	str	r1, [sp, #24]
   3f2ac:	f143 0100 	adc.w	r1, r3, #0
   3f2b0:	9107      	str	r1, [sp, #28]
   3f2b2:	2100      	movs	r1, #0
   3f2b4:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   3f2b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3f2bc:	4561      	cmp	r1, ip
   3f2be:	bf08      	it	eq
   3f2c0:	4558      	cmpeq	r0, fp
   3f2c2:	d204      	bcs.n	3f2ce <z_vprintk+0x168>
						print_err(out, ctx);
   3f2c4:	4639      	mov	r1, r7
   3f2c6:	4630      	mov	r0, r6
   3f2c8:	f7ff ff3f 	bl	3f14a <print_err>
						break;
   3f2cc:	e758      	b.n	3f180 <z_vprintk+0x1a>
					d = lld;
   3f2ce:	4615      	mov	r5, r2
				if (d < 0) {
   3f2d0:	2d00      	cmp	r5, #0
   3f2d2:	da05      	bge.n	3f2e0 <z_vprintk+0x17a>
					out((int)'-', ctx);
   3f2d4:	4639      	mov	r1, r7
   3f2d6:	202d      	movs	r0, #45	; 0x2d
   3f2d8:	47b0      	blx	r6
					d = -d;
   3f2da:	426d      	negs	r5, r5
					min_width--;
   3f2dc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   3f2e0:	464b      	mov	r3, r9
   3f2e2:	462a      	mov	r2, r5
   3f2e4:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   3f2e8:	4639      	mov	r1, r7
   3f2ea:	4630      	mov	r0, r6
   3f2ec:	f7e0 f83e 	bl	1f36c <_printk_dec_ulong>
				break;
   3f2f0:	e746      	b.n	3f180 <z_vprintk+0x1a>
				if (length_mod == 'z') {
   3f2f2:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   3f2f6:	d102      	bne.n	3f2fe <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
   3f2f8:	f854 2b04 	ldr.w	r2, [r4], #4
   3f2fc:	e011      	b.n	3f322 <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
   3f2fe:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   3f302:	d0f9      	beq.n	3f2f8 <z_vprintk+0x192>
				} else if (length_mod == 'L') {
   3f304:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   3f308:	d1f6      	bne.n	3f2f8 <z_vprintk+0x192>
					if (llu > ~0UL) {
   3f30a:	2100      	movs	r1, #0
   3f30c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
   3f310:	3407      	adds	r4, #7
   3f312:	f024 0407 	bic.w	r4, r4, #7
   3f316:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   3f31a:	4299      	cmp	r1, r3
   3f31c:	bf08      	it	eq
   3f31e:	4290      	cmpeq	r0, r2
   3f320:	d3d0      	bcc.n	3f2c4 <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
   3f322:	f8cd a000 	str.w	sl, [sp]
   3f326:	464b      	mov	r3, r9
   3f328:	e7de      	b.n	3f2e8 <z_vprintk+0x182>
				out('0', ctx);
   3f32a:	4639      	mov	r1, r7
   3f32c:	2030      	movs	r0, #48	; 0x30
   3f32e:	47b0      	blx	r6
				out('x', ctx);
   3f330:	4639      	mov	r1, r7
   3f332:	2078      	movs	r0, #120	; 0x78
   3f334:	47b0      	blx	r6
					min_width = 8;
   3f336:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
   3f33a:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   3f33e:	9b02      	ldr	r3, [sp, #8]
   3f340:	781b      	ldrb	r3, [r3, #0]
   3f342:	2b70      	cmp	r3, #112	; 0x70
   3f344:	d104      	bne.n	3f350 <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
   3f346:	f854 3b04 	ldr.w	r3, [r4], #4
   3f34a:	9304      	str	r3, [sp, #16]
   3f34c:	2300      	movs	r3, #0
   3f34e:	e00d      	b.n	3f36c <z_vprintk+0x206>
				} else if (length_mod == 'l') {
   3f350:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   3f354:	d0f7      	beq.n	3f346 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
   3f356:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   3f35a:	d1f4      	bne.n	3f346 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
   3f35c:	3407      	adds	r4, #7
   3f35e:	f024 0307 	bic.w	r3, r4, #7
   3f362:	461c      	mov	r4, r3
   3f364:	f854 2b08 	ldr.w	r2, [r4], #8
   3f368:	685b      	ldr	r3, [r3, #4]
   3f36a:	9204      	str	r2, [sp, #16]
	int digits = 0;
   3f36c:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   3f36e:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
   3f370:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
   3f374:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   3f376:	9105      	str	r1, [sp, #20]
		shift -= 4;
   3f378:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   3f37c:	9804      	ldr	r0, [sp, #16]
   3f37e:	f1cb 0c20 	rsb	ip, fp, #32
   3f382:	f1ab 0120 	sub.w	r1, fp, #32
   3f386:	fa20 f00b 	lsr.w	r0, r0, fp
   3f38a:	fa03 fc0c 	lsl.w	ip, r3, ip
   3f38e:	ea40 000c 	orr.w	r0, r0, ip
   3f392:	fa23 f101 	lsr.w	r1, r3, r1
   3f396:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   3f398:	f010 000f 	ands.w	r0, r0, #15
   3f39c:	d106      	bne.n	3f3ac <z_vprintk+0x246>
   3f39e:	9905      	ldr	r1, [sp, #20]
   3f3a0:	b911      	cbnz	r1, 3f3a8 <z_vprintk+0x242>
   3f3a2:	f1bb 0f00 	cmp.w	fp, #0
   3f3a6:	d122      	bne.n	3f3ee <z_vprintk+0x288>
			nibble += nibble > 9 ? 87 : 48;
   3f3a8:	2130      	movs	r1, #48	; 0x30
   3f3aa:	e003      	b.n	3f3b4 <z_vprintk+0x24e>
   3f3ac:	2809      	cmp	r0, #9
   3f3ae:	bf8c      	ite	hi
   3f3b0:	2157      	movhi	r1, #87	; 0x57
   3f3b2:	2130      	movls	r1, #48	; 0x30
   3f3b4:	4408      	add	r0, r1
			out((int)nibble, ctx);
   3f3b6:	b240      	sxtb	r0, r0
   3f3b8:	4639      	mov	r1, r7
   3f3ba:	9308      	str	r3, [sp, #32]
   3f3bc:	9205      	str	r2, [sp, #20]
   3f3be:	47b0      	blx	r6
			digits++;
   3f3c0:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   3f3c2:	9a05      	ldr	r2, [sp, #20]
			digits++;
   3f3c4:	3301      	adds	r3, #1
   3f3c6:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   3f3c8:	9b08      	ldr	r3, [sp, #32]
   3f3ca:	f1bb 0f00 	cmp.w	fp, #0
   3f3ce:	d123      	bne.n	3f418 <z_vprintk+0x2b2>
	if (padding == PAD_SPACE_AFTER) {
   3f3d0:	f1b9 0f03 	cmp.w	r9, #3
   3f3d4:	f47f aed4 	bne.w	3f180 <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
   3f3d8:	9b03      	ldr	r3, [sp, #12]
   3f3da:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   3f3de:	2d00      	cmp	r5, #0
   3f3e0:	f77f aece 	ble.w	3f180 <z_vprintk+0x1a>
			out(' ', ctx);
   3f3e4:	4639      	mov	r1, r7
   3f3e6:	2020      	movs	r0, #32
   3f3e8:	47b0      	blx	r6
   3f3ea:	3d01      	subs	r5, #1
   3f3ec:	e7f7      	b.n	3f3de <z_vprintk+0x278>
		if (remaining-- <= min_width) {
   3f3ee:	1e51      	subs	r1, r2, #1
   3f3f0:	4592      	cmp	sl, r2
   3f3f2:	9108      	str	r1, [sp, #32]
   3f3f4:	db07      	blt.n	3f406 <z_vprintk+0x2a0>
			if (padding == PAD_ZERO_BEFORE) {
   3f3f6:	f1b9 0f01 	cmp.w	r9, #1
   3f3fa:	d106      	bne.n	3f40a <z_vprintk+0x2a4>
				out('0', ctx);
   3f3fc:	4639      	mov	r1, r7
   3f3fe:	2030      	movs	r0, #48	; 0x30
   3f400:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   3f402:	47b0      	blx	r6
   3f404:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
   3f406:	9a08      	ldr	r2, [sp, #32]
   3f408:	e7b6      	b.n	3f378 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
   3f40a:	f1b9 0f02 	cmp.w	r9, #2
   3f40e:	d1fa      	bne.n	3f406 <z_vprintk+0x2a0>
   3f410:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   3f412:	4639      	mov	r1, r7
   3f414:	2020      	movs	r0, #32
   3f416:	e7f4      	b.n	3f402 <z_vprintk+0x29c>
			found_largest_digit = 1;
   3f418:	9505      	str	r5, [sp, #20]
   3f41a:	e7ad      	b.n	3f378 <z_vprintk+0x212>
					out((int)(*s++), ctx);
   3f41c:	4639      	mov	r1, r7
   3f41e:	47b0      	blx	r6
   3f420:	e6fb      	b.n	3f21a <z_vprintk+0xb4>
				out(c, ctx);
   3f422:	4639      	mov	r1, r7
   3f424:	f854 0b04 	ldr.w	r0, [r4], #4
   3f428:	e6d7      	b.n	3f1da <z_vprintk+0x74>
				length_mod = 0;
   3f42a:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   3f42c:	46a9      	mov	r9, r5
				min_width = -1;
   3f42e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
   3f432:	2501      	movs	r5, #1
   3f434:	e6ac      	b.n	3f190 <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
   3f436:	f04f 0903 	mov.w	r9, #3
   3f43a:	e6a9      	b.n	3f190 <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
   3f43c:	f04f 0901 	mov.w	r9, #1
   3f440:	e6a6      	b.n	3f190 <z_vprintk+0x2a>
			might_format = 0;
   3f442:	4605      	mov	r5, r0
		++fmt;
   3f444:	e6a4      	b.n	3f190 <z_vprintk+0x2a>

0003f446 <printk>:
{
   3f446:	b40f      	push	{r0, r1, r2, r3}
   3f448:	b507      	push	{r0, r1, r2, lr}
   3f44a:	a904      	add	r1, sp, #16
   3f44c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   3f450:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   3f452:	f7df ffdd 	bl	1f410 <vprintk>
}
   3f456:	b003      	add	sp, #12
   3f458:	f85d eb04 	ldr.w	lr, [sp], #4
   3f45c:	b004      	add	sp, #16
   3f45e:	4770      	bx	lr

0003f460 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   3f460:	4040      	eors	r0, r0
   3f462:	f380 8811 	msr	BASEPRI, r0
   3f466:	f04f 0004 	mov.w	r0, #4
   3f46a:	df02      	svc	2
}
   3f46c:	4770      	bx	lr

0003f46e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_BOOTLOADER_MCUBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   3f46e:	4770      	bx	lr

0003f470 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   3f470:	f7f9 bba2 	b.w	38bb8 <SystemInit>

0003f474 <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   3f474:	6843      	ldr	r3, [r0, #4]
}
   3f476:	7958      	ldrb	r0, [r3, #5]
   3f478:	4770      	bx	lr

0003f47a <k_cycle_get_32_wrapper>:
   3f47a:	f7e0 bf07 	b.w	2028c <z_timer_cycle_get_32>

0003f47e <dummy_timestamp>:
   3f47e:	2000      	movs	r0, #0
   3f480:	4770      	bx	lr

0003f482 <log_string_sync>:
{
   3f482:	b40e      	push	{r1, r2, r3}
   3f484:	b503      	push	{r0, r1, lr}
   3f486:	aa03      	add	r2, sp, #12
   3f488:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   3f48c:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap);
   3f48e:	f7df ffe1 	bl	1f454 <log_generic>
}
   3f492:	b002      	add	sp, #8
   3f494:	f85d eb04 	ldr.w	lr, [sp], #4
   3f498:	b003      	add	sp, #12
   3f49a:	4770      	bx	lr

0003f49c <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
   3f49c:	b508      	push	{r3, lr}
				K_THREAD_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
   3f49e:	f7e0 f84f 	bl	1f540 <log_init>
	}

	return 0;
}
   3f4a2:	2000      	movs	r0, #0
   3f4a4:	bd08      	pop	{r3, pc}

0003f4a6 <log_strdup>:
}
   3f4a6:	4770      	bx	lr

0003f4a8 <buffer_write>:
{
   3f4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3f4aa:	4606      	mov	r6, r0
   3f4ac:	460d      	mov	r5, r1
   3f4ae:	4614      	mov	r4, r2
   3f4b0:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   3f4b2:	4621      	mov	r1, r4
   3f4b4:	4628      	mov	r0, r5
   3f4b6:	463a      	mov	r2, r7
   3f4b8:	47b0      	blx	r6
	} while (len != 0);
   3f4ba:	1a24      	subs	r4, r4, r0
		buf += processed;
   3f4bc:	4405      	add	r5, r0
	} while (len != 0);
   3f4be:	d1f8      	bne.n	3f4b2 <buffer_write+0xa>
}
   3f4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003f4c2 <log_output_flush>:
		     log_output->control_block->offset,
   3f4c2:	6842      	ldr	r2, [r0, #4]
{
   3f4c4:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   3f4c6:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   3f4ca:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   3f4cc:	6881      	ldr	r1, [r0, #8]
   3f4ce:	6800      	ldr	r0, [r0, #0]
   3f4d0:	f7ff ffea 	bl	3f4a8 <buffer_write>
	log_output->control_block->offset = 0;
   3f4d4:	2200      	movs	r2, #0
   3f4d6:	6863      	ldr	r3, [r4, #4]
   3f4d8:	601a      	str	r2, [r3, #0]
}
   3f4da:	bd10      	pop	{r4, pc}

0003f4dc <char_out>:
{
   3f4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3f4de:	460d      	mov	r5, r1
   3f4e0:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
   3f4e2:	4604      	mov	r4, r0
   3f4e4:	1847      	adds	r7, r0, r1
   3f4e6:	42bc      	cmp	r4, r7
   3f4e8:	d101      	bne.n	3f4ee <char_out+0x12>
}
   3f4ea:	4628      	mov	r0, r5
   3f4ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   3f4ee:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   3f4f2:	6873      	ldr	r3, [r6, #4]
   3f4f4:	4630      	mov	r0, r6
   3f4f6:	685b      	ldr	r3, [r3, #4]
   3f4f8:	4798      	blx	r3
   3f4fa:	e7f4      	b.n	3f4e6 <char_out+0xa>

0003f4fc <boot_flag_read.constprop.6>:
static int boot_flag_read(int flag, u8_t bank_id)
   3f4fc:	b507      	push	{r0, r1, r2, lr}
	rc = flash_area_open(bank_id, &fa);
   3f4fe:	2002      	movs	r0, #2
   3f500:	a901      	add	r1, sp, #4
   3f502:	f7e0 fc49 	bl	1fd98 <flash_area_open>
	if (rc) {
   3f506:	b950      	cbnz	r0, 3f51e <boot_flag_read.constprop.6+0x22>
	rc = boot_flag_offs(flag, fa, &offs);
   3f508:	9801      	ldr	r0, [sp, #4]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   3f50a:	2301      	movs	r3, #1
		*offs = IMAGE_OK_OFFS(fa);
   3f50c:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   3f50e:	f10d 0203 	add.w	r2, sp, #3
   3f512:	3918      	subs	r1, #24
   3f514:	f000 f88e 	bl	3f634 <flash_area_read>
	if (rc != 0) {
   3f518:	b908      	cbnz	r0, 3f51e <boot_flag_read.constprop.6+0x22>
	return flag_val;
   3f51a:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
   3f51e:	b003      	add	sp, #12
   3f520:	f85d fb04 	ldr.w	pc, [sp], #4

0003f524 <boot_flag_write.constprop.7>:
static int boot_flag_write(int flag, u8_t bank_id)
   3f524:	b513      	push	{r0, r1, r4, lr}
	rc = flash_area_open(bank_id, &fa);
   3f526:	a901      	add	r1, sp, #4
   3f528:	f7e0 fc36 	bl	1fd98 <flash_area_open>
	if (rc) {
   3f52c:	4604      	mov	r4, r0
   3f52e:	b948      	cbnz	r0, 3f544 <boot_flag_write.constprop.7+0x20>
	rc = boot_flag_offs(flag, fa, &offs);
   3f530:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   3f532:	2201      	movs	r2, #1
		*offs = IMAGE_OK_OFFS(fa);
   3f534:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   3f536:	3918      	subs	r1, #24
   3f538:	f7e0 fa9e 	bl	1fa78 <boot_write_trailer_byte>
   3f53c:	4604      	mov	r4, r0
	flash_area_close(fa);
   3f53e:	9801      	ldr	r0, [sp, #4]
   3f540:	f000 f877 	bl	3f632 <flash_area_close>
}
   3f544:	4620      	mov	r0, r4
   3f546:	b002      	add	sp, #8
   3f548:	bd10      	pop	{r4, pc}

0003f54a <boot_write_img_confirmed>:
{
	return boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) == BOOT_FLAG_SET;
}

int boot_write_img_confirmed(void)
{
   3f54a:	b513      	push	{r0, r1, r4, lr}
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   3f54c:	f7ff ffd6 	bl	3f4fc <boot_flag_read.constprop.6>
	rc = flash_area_open(bank_id, &fa);
   3f550:	a901      	add	r1, sp, #4
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   3f552:	4604      	mov	r4, r0
	rc = flash_area_open(bank_id, &fa);
   3f554:	2002      	movs	r0, #2
   3f556:	f7e0 fc1f 	bl	1fd98 <flash_area_open>
	if (rc) {
   3f55a:	2800      	cmp	r0, #0
		return -EINVAL;
   3f55c:	bf0c      	ite	eq
   3f55e:	23ff      	moveq	r3, #255	; 0xff
   3f560:	f06f 0315 	mvnne.w	r3, #21
	int rc;

	if (boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) !=
   3f564:	42a3      	cmp	r3, r4
   3f566:	d104      	bne.n	3f572 <boot_write_img_confirmed+0x28>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   3f568:	2002      	movs	r0, #2
   3f56a:	f7ff ffdb 	bl	3f524 <boot_flag_write.constprop.7>
	}

	rc = boot_image_ok_write(FLASH_AREA_IMAGE_PRIMARY);

	return rc;
}
   3f56e:	b002      	add	sp, #8
   3f570:	bd10      	pop	{r4, pc}
		return 0;
   3f572:	2000      	movs	r0, #0
   3f574:	e7fb      	b.n	3f56e <boot_write_img_confirmed+0x24>

0003f576 <flash_img_buffered_write>:

int flash_img_buffered_write(struct flash_img_context *ctx, u8_t *data,
			     size_t len, bool flush)
{
   3f576:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f57a:	4604      	mov	r4, r0
   3f57c:	4689      	mov	r9, r1
   3f57e:	4616      	mov	r6, r2
   3f580:	4698      	mov	r8, r3
	int processed = 0;
   3f582:	2700      	movs	r7, #0
	while ((len - processed) >=
	       (buf_empty_bytes = CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes)) {
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
		       buf_empty_bytes);

		ctx->buf_bytes = CONFIG_IMG_BLOCK_BUF_SIZE;
   3f584:	f44f 7a00 	mov.w	sl, #512	; 0x200
	       (buf_empty_bytes = CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes)) {
   3f588:	f8b4 0208 	ldrh.w	r0, [r4, #520]	; 0x208
	while ((len - processed) >=
   3f58c:	1bf2      	subs	r2, r6, r7
	       (buf_empty_bytes = CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes)) {
   3f58e:	f5c0 7b00 	rsb	fp, r0, #512	; 0x200
	while ((len - processed) >=
   3f592:	455a      	cmp	r2, fp
   3f594:	d222      	bcs.n	3f5dc <flash_img_buffered_write+0x66>

		processed += buf_empty_bytes;
	}

	/* place rest of the data into ctx->buf */
	if (processed < len) {
   3f596:	42b7      	cmp	r7, r6
   3f598:	d20a      	bcs.n	3f5b0 <flash_img_buffered_write+0x3a>
   3f59a:	eb09 0107 	add.w	r1, r9, r7
   3f59e:	4420      	add	r0, r4
   3f5a0:	f002 fa07 	bl	419b2 <memcpy>
		memcpy(ctx->buf + ctx->buf_bytes,
		       data + processed, len - processed);
		ctx->buf_bytes += len - processed;
   3f5a4:	f8b4 3208 	ldrh.w	r3, [r4, #520]	; 0x208
   3f5a8:	441e      	add	r6, r3
   3f5aa:	1bf6      	subs	r6, r6, r7
   3f5ac:	f8a4 6208 	strh.w	r6, [r4, #520]	; 0x208
	}

	if (!flush) {
   3f5b0:	f1b8 0f00 	cmp.w	r8, #0
   3f5b4:	d02a      	beq.n	3f60c <flash_img_buffered_write+0x96>
		return rc;
	}

	if (ctx->buf_bytes > 0) {
   3f5b6:	f8b4 3208 	ldrh.w	r3, [r4, #520]	; 0x208
   3f5ba:	b9f3      	cbnz	r3, 3f5fa <flash_img_buffered_write+0x84>
		}
	}
#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	/* erase the image trailer area if it was not erased */
	rc = flash_progressive_erase(ctx,
				BOOT_TRAILER_IMG_STATUS_OFFS(ctx->flash_area));
   3f5bc:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	rc = flash_progressive_erase(ctx,
   3f5c0:	4620      	mov	r0, r4
				BOOT_TRAILER_IMG_STATUS_OFFS(ctx->flash_area));
   3f5c2:	6899      	ldr	r1, [r3, #8]
	rc = flash_progressive_erase(ctx,
   3f5c4:	3920      	subs	r1, #32
   3f5c6:	f7e0 fab1 	bl	1fb2c <flash_progressive_erase>
	if (rc) {
   3f5ca:	4605      	mov	r5, r0
   3f5cc:	b9d8      	cbnz	r0, 3f606 <flash_img_buffered_write+0x90>
		return rc;
	}
#endif

	flash_area_close(ctx->flash_area);
   3f5ce:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
   3f5d2:	f000 f82e 	bl	3f632 <flash_area_close>
	ctx->flash_area = NULL;
   3f5d6:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200

	return rc;
   3f5da:	e014      	b.n	3f606 <flash_img_buffered_write+0x90>
   3f5dc:	465a      	mov	r2, fp
   3f5de:	eb09 0107 	add.w	r1, r9, r7
   3f5e2:	4420      	add	r0, r4
   3f5e4:	f002 f9e5 	bl	419b2 <memcpy>
		ctx->buf_bytes = CONFIG_IMG_BLOCK_BUF_SIZE;
   3f5e8:	f8a4 a208 	strh.w	sl, [r4, #520]	; 0x208
		rc = flash_sync(ctx);
   3f5ec:	4620      	mov	r0, r4
   3f5ee:	f7e0 faf9 	bl	1fbe4 <flash_sync>
		if (rc) {
   3f5f2:	4605      	mov	r5, r0
   3f5f4:	b938      	cbnz	r0, 3f606 <flash_img_buffered_write+0x90>
		processed += buf_empty_bytes;
   3f5f6:	445f      	add	r7, fp
   3f5f8:	e7c6      	b.n	3f588 <flash_img_buffered_write+0x12>
		rc = flash_sync(ctx);
   3f5fa:	4620      	mov	r0, r4
   3f5fc:	f7e0 faf2 	bl	1fbe4 <flash_sync>
		if (rc) {
   3f600:	4605      	mov	r5, r0
   3f602:	2800      	cmp	r0, #0
   3f604:	d0da      	beq.n	3f5bc <flash_img_buffered_write+0x46>
}
   3f606:	4628      	mov	r0, r5
   3f608:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f60c:	4645      	mov	r5, r8
   3f60e:	e7fa      	b.n	3f606 <flash_img_buffered_write+0x90>

0003f610 <flash_img_init>:
	return ctx->bytes_written;
}

int flash_img_init(struct flash_img_context *ctx)
{
	ctx->bytes_written = 0;
   3f610:	2300      	movs	r3, #0
   3f612:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
	ctx->buf_bytes = 0U;
   3f616:	f8a0 3208 	strh.w	r3, [r0, #520]	; 0x208
#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	ctx->off_last = -1;
   3f61a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif
	return flash_area_open(FLASH_AREA_IMAGE_SECONDARY,
   3f61e:	f500 7100 	add.w	r1, r0, #512	; 0x200
	ctx->off_last = -1;
   3f622:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
	return flash_area_open(FLASH_AREA_IMAGE_SECONDARY,
   3f626:	2006      	movs	r0, #6
   3f628:	f7e0 bbb6 	b.w	1fd98 <flash_area_open>

0003f62c <z_impl_flash_write_protection_set>:
static inline int z_impl_flash_write_protection_set(struct device *dev,
						   bool enable)
{
	const struct flash_driver_api *api = dev->driver_api;

	return api->write_protection(dev, enable);
   3f62c:	6843      	ldr	r3, [r0, #4]
   3f62e:	68db      	ldr	r3, [r3, #12]
   3f630:	4718      	bx	r3

0003f632 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   3f632:	4770      	bx	lr

0003f634 <flash_area_read>:
}
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   3f634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3f638:	461e      	mov	r6, r3
	struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   3f63a:	6883      	ldr	r3, [r0, #8]
{
   3f63c:	4605      	mov	r5, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3f63e:	428b      	cmp	r3, r1
{
   3f640:	460c      	mov	r4, r1
   3f642:	4617      	mov	r7, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3f644:	d30f      	bcc.n	3f666 <flash_area_read+0x32>
   3f646:	1872      	adds	r2, r6, r1
   3f648:	4293      	cmp	r3, r2
   3f64a:	d30c      	bcc.n	3f666 <flash_area_read+0x32>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   3f64c:	68c0      	ldr	r0, [r0, #12]
   3f64e:	f7f9 fbb3 	bl	38db8 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   3f652:	6869      	ldr	r1, [r5, #4]
   3f654:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   3f656:	6843      	ldr	r3, [r0, #4]
   3f658:	463a      	mov	r2, r7
   3f65a:	681c      	ldr	r4, [r3, #0]
   3f65c:	4633      	mov	r3, r6
   3f65e:	46a4      	mov	ip, r4
}
   3f660:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3f664:	4760      	bx	ip
   3f666:	f06f 0015 	mvn.w	r0, #21
   3f66a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003f66e <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   3f66e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3f672:	4698      	mov	r8, r3
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   3f674:	6883      	ldr	r3, [r0, #8]
{
   3f676:	4607      	mov	r7, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3f678:	428b      	cmp	r3, r1
{
   3f67a:	460d      	mov	r5, r1
   3f67c:	4691      	mov	r9, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3f67e:	d31c      	bcc.n	3f6ba <flash_area_write+0x4c>
   3f680:	eb08 0201 	add.w	r2, r8, r1
   3f684:	4293      	cmp	r3, r2
   3f686:	d318      	bcc.n	3f6ba <flash_area_write+0x4c>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   3f688:	68c0      	ldr	r0, [r0, #12]
   3f68a:	f7f9 fb95 	bl	38db8 <z_impl_device_get_binding>
   3f68e:	4606      	mov	r6, r0
	return z_impl_flash_write_protection_set(dev, enable);
   3f690:	2100      	movs	r1, #0
   3f692:	f7ff ffcb 	bl	3f62c <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   3f696:	4604      	mov	r4, r0
   3f698:	b960      	cbnz	r0, 3f6b4 <flash_area_write+0x46>
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   3f69a:	6879      	ldr	r1, [r7, #4]
   3f69c:	4429      	add	r1, r5
	return api->write(dev, offset, data, len);
   3f69e:	6873      	ldr	r3, [r6, #4]
   3f6a0:	464a      	mov	r2, r9
   3f6a2:	685c      	ldr	r4, [r3, #4]
   3f6a4:	4630      	mov	r0, r6
   3f6a6:	4643      	mov	r3, r8
   3f6a8:	47a0      	blx	r4
   3f6aa:	4604      	mov	r4, r0
   3f6ac:	2101      	movs	r1, #1
   3f6ae:	4630      	mov	r0, r6
   3f6b0:	f7ff ffbc 	bl	3f62c <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   3f6b4:	4620      	mov	r0, r4
   3f6b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   3f6ba:	f06f 0415 	mvn.w	r4, #21
   3f6be:	e7f9      	b.n	3f6b4 <flash_area_write+0x46>

0003f6c0 <flash_area_erase>:
int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   3f6c0:	6883      	ldr	r3, [r0, #8]
{
   3f6c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3f6c6:	428b      	cmp	r3, r1
{
   3f6c8:	4607      	mov	r7, r0
   3f6ca:	460d      	mov	r5, r1
   3f6cc:	4690      	mov	r8, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3f6ce:	d31a      	bcc.n	3f706 <flash_area_erase+0x46>
   3f6d0:	440a      	add	r2, r1
   3f6d2:	4293      	cmp	r3, r2
   3f6d4:	d317      	bcc.n	3f706 <flash_area_erase+0x46>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   3f6d6:	68c0      	ldr	r0, [r0, #12]
   3f6d8:	f7f9 fb6e 	bl	38db8 <z_impl_device_get_binding>
   3f6dc:	4606      	mov	r6, r0
   3f6de:	2100      	movs	r1, #0
   3f6e0:	f7ff ffa4 	bl	3f62c <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   3f6e4:	4604      	mov	r4, r0
   3f6e6:	b958      	cbnz	r0, 3f700 <flash_area_erase+0x40>
		return rc;
	}

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   3f6e8:	6879      	ldr	r1, [r7, #4]
   3f6ea:	4429      	add	r1, r5
	return api->erase(dev, offset, size);
   3f6ec:	6873      	ldr	r3, [r6, #4]
   3f6ee:	4642      	mov	r2, r8
   3f6f0:	689b      	ldr	r3, [r3, #8]
   3f6f2:	4630      	mov	r0, r6
   3f6f4:	4798      	blx	r3
   3f6f6:	4604      	mov	r4, r0
   3f6f8:	2101      	movs	r1, #1
   3f6fa:	4630      	mov	r0, r6
   3f6fc:	f7ff ff96 	bl	3f62c <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   3f700:	4620      	mov	r0, r4
   3f702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   3f706:	f06f 0415 	mvn.w	r4, #21
   3f70a:	e7f9      	b.n	3f700 <flash_area_erase+0x40>

0003f70c <flash_area_align>:

u8_t flash_area_align(const struct flash_area *fa)
{
   3f70c:	b508      	push	{r3, lr}
	struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   3f70e:	68c0      	ldr	r0, [r0, #12]
   3f710:	f7f9 fb52 	bl	38db8 <z_impl_device_get_binding>

static inline size_t z_impl_flash_get_write_block_size(struct device *dev)
{
	const struct flash_driver_api *api = dev->driver_api;

	return api->write_block_size;
   3f714:	6843      	ldr	r3, [r0, #4]

	return flash_get_write_block_size(dev);
}
   3f716:	7d18      	ldrb	r0, [r3, #20]
   3f718:	bd08      	pop	{r3, pc}

0003f71a <flash_area_get_device>:
	return 1;
}

struct device *flash_area_get_device(const struct flash_area *fa)
{
	return device_get_binding(fa->fa_dev_name);
   3f71a:	68c0      	ldr	r0, [r0, #12]
   3f71c:	f7f9 bb4c 	b.w	38db8 <z_impl_device_get_binding>

0003f720 <uart_poll_out>:
   3f720:	6843      	ldr	r3, [r0, #4]
   3f722:	685b      	ldr	r3, [r3, #4]
   3f724:	4718      	bx	r3

0003f726 <debug_hook_out_nop>:
}
   3f726:	2000      	movs	r0, #0
   3f728:	4770      	bx	lr

0003f72a <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
   3f72a:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
   3f72c:	7a5a      	ldrb	r2, [r3, #9]
   3f72e:	b932      	cbnz	r2, 3f73e <get_status+0x14>
	if (data->ref > 0) {
   3f730:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
   3f734:	2800      	cmp	r0, #0
   3f736:	bfcc      	ite	gt
   3f738:	2000      	movgt	r0, #0
   3f73a:	2001      	movle	r0, #1
   3f73c:	4770      	bx	lr
   3f73e:	2002      	movs	r0, #2
}
   3f740:	4770      	bx	lr

0003f742 <clock_stop>:
	const struct nrf_clock_control_config *config =
   3f742:	6802      	ldr	r2, [r0, #0]
{
   3f744:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
   3f746:	6896      	ldr	r6, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
   3f748:	6884      	ldr	r4, [r0, #8]
	__asm__ volatile(
   3f74a:	f04f 0320 	mov.w	r3, #32
   3f74e:	f3ef 8511 	mrs	r5, BASEPRI
   3f752:	f383 8811 	msr	BASEPRI, r3
   3f756:	f3bf 8f6f 	isb	sy
	data->ref--;
   3f75a:	7a23      	ldrb	r3, [r4, #8]
   3f75c:	3b01      	subs	r3, #1
   3f75e:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
   3f760:	2b00      	cmp	r3, #0
	data->ref--;
   3f762:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
   3f764:	d11c      	bne.n	3f7a0 <clock_stop+0x5e>
	list->tail = NULL;
   3f766:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
   3f76a:	6873      	ldr	r3, [r6, #4]
				config->stop_handler(dev) : true;
   3f76c:	b9a3      	cbnz	r3, 3f798 <clock_stop+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f76e:	2201      	movs	r2, #1
   3f770:	7af3      	ldrb	r3, [r6, #11]
   3f772:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3f776:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   3f77a:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f77c:	2200      	movs	r2, #0
   3f77e:	8933      	ldrh	r3, [r6, #8]
   3f780:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3f784:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   3f788:	601a      	str	r2, [r3, #0]
		data->started = false;
   3f78a:	2000      	movs	r0, #0
   3f78c:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   3f78e:	f385 8811 	msr	BASEPRI, r5
   3f792:	f3bf 8f6f 	isb	sy
}
   3f796:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
   3f798:	4798      	blx	r3
   3f79a:	2800      	cmp	r0, #0
   3f79c:	d1e7      	bne.n	3f76e <clock_stop+0x2c>
   3f79e:	e7f4      	b.n	3f78a <clock_stop+0x48>
	} else if (data->ref < 0) {
   3f7a0:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
   3f7a4:	bfbc      	itt	lt
   3f7a6:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
   3f7a8:	f06f 0077 	mvnlt.w	r0, #119	; 0x77
   3f7ac:	e7ef      	b.n	3f78e <clock_stop+0x4c>

0003f7ae <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
   3f7ae:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
   3f7b0:	2000      	movs	r0, #0
	list->tail = NULL;
   3f7b2:	e9c3 0000 	strd	r0, r0, [r3]
}
   3f7b6:	4770      	bx	lr

0003f7b8 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   3f7b8:	2200      	movs	r2, #0
   3f7ba:	f7e0 bb65 	b.w	1fe88 <clock_async_start>

0003f7be <clkstarted_handle>:
{
   3f7be:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
   3f7c0:	6884      	ldr	r4, [r0, #8]
{
   3f7c2:	4605      	mov	r5, r0
Z_GENLIST_IS_EMPTY(slist)
   3f7c4:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   3f7c6:	b12b      	cbz	r3, 3f7d4 <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   3f7c8:	6861      	ldr	r1, [r4, #4]
   3f7ca:	681a      	ldr	r2, [r3, #0]
   3f7cc:	428b      	cmp	r3, r1
	list->head = node;
   3f7ce:	6022      	str	r2, [r4, #0]
	list->tail = node;
   3f7d0:	bf08      	it	eq
   3f7d2:	6062      	streq	r2, [r4, #4]
	data->started = true;
   3f7d4:	2201      	movs	r2, #1
   3f7d6:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
   3f7d8:	b903      	cbnz	r3, 3f7dc <clkstarted_handle+0x1e>
}
   3f7da:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   3f7dc:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   3f7e0:	4628      	mov	r0, r5
   3f7e2:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
   3f7e4:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   3f7e6:	2b00      	cmp	r3, #0
   3f7e8:	d0f7      	beq.n	3f7da <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   3f7ea:	6861      	ldr	r1, [r4, #4]
   3f7ec:	681a      	ldr	r2, [r3, #0]
   3f7ee:	428b      	cmp	r3, r1
	list->head = node;
   3f7f0:	6022      	str	r2, [r4, #0]
	list->tail = node;
   3f7f2:	bf08      	it	eq
   3f7f4:	6062      	streq	r2, [r4, #4]
   3f7f6:	e7ef      	b.n	3f7d8 <clkstarted_handle+0x1a>

0003f7f8 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   3f7f8:	4770      	bx	lr

0003f7fa <sys_clock_disable>:
   3f7fa:	4770      	bx	lr

0003f7fc <z_irq_spurious>:
	z_arm_reserved();
   3f7fc:	f7e0 bf0a 	b.w	20614 <z_arm_bus_fault>

0003f800 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   3f800:	6d83      	ldr	r3, [r0, #88]	; 0x58
   3f802:	f383 880b 	msr	PSPLIM, r3
}
   3f806:	4770      	bx	lr

0003f808 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   3f808:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   3f80a:	6800      	ldr	r0, [r0, #0]
   3f80c:	f7e0 bf0c 	b.w	20628 <z_arm_fatal_error>

0003f810 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   3f810:	b508      	push	{r3, lr}
	handler();
   3f812:	f7e0 ff9d 	bl	20750 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   3f816:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   3f81a:	f7e0 bd87 	b.w	2032c <z_arm_exc_exit>

0003f81e <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   3f81e:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   3f820:	2100      	movs	r1, #0
   3f822:	a801      	add	r0, sp, #4
   3f824:	f7e1 fd62 	bl	212ec <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   3f828:	b003      	add	sp, #12
   3f82a:	f85d fb04 	ldr.w	pc, [sp], #4

0003f82e <mpu_configure_region>:
{
   3f82e:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   3f830:	684b      	ldr	r3, [r1, #4]
{
   3f832:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   3f834:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   3f836:	f89d 2008 	ldrb.w	r2, [sp, #8]
   3f83a:	890d      	ldrh	r5, [r1, #8]
   3f83c:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   3f83e:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3f840:	f024 041f 	bic.w	r4, r4, #31
   3f844:	3b01      	subs	r3, #1
	p_attr->rbar = attr->rbar &
   3f846:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3f84a:	4423      	add	r3, r4
	p_attr->mair_idx = attr->mair_idx;
   3f84c:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3f850:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   3f854:	4669      	mov	r1, sp
	p_attr->mair_idx = attr->mair_idx;
   3f856:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3f85a:	9303      	str	r3, [sp, #12]
   3f85c:	f7e1 fb42 	bl	20ee4 <region_allocate_and_init>
}
   3f860:	b005      	add	sp, #20
   3f862:	bd30      	pop	{r4, r5, pc}

0003f864 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   3f864:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   3f868:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   3f86c:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   3f86e:	bf08      	it	eq
   3f870:	f06f 0015 	mvneq.w	r0, #21
   3f874:	4770      	bx	lr

0003f876 <_stdout_hook_default>:
}
   3f876:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3f87a:	4770      	bx	lr

0003f87c <_stdin_hook_default>:
}
   3f87c:	2000      	movs	r0, #0
   3f87e:	4770      	bx	lr

0003f880 <_read>:
{
   3f880:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   3f882:	4611      	mov	r1, r2
   3f884:	f7e1 bd9a 	b.w	213bc <z_impl_zephyr_read_stdin>

0003f888 <_write>:
{
   3f888:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   3f88a:	4611      	mov	r1, r2
   3f88c:	f7e1 bdaa 	b.w	213e4 <z_impl_zephyr_write_stdout>

0003f890 <_close>:
   3f890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3f894:	4770      	bx	lr

0003f896 <_lseek>:
}
   3f896:	2000      	movs	r0, #0
   3f898:	4770      	bx	lr

0003f89a <_isatty>:
}
   3f89a:	2001      	movs	r0, #1
   3f89c:	4770      	bx	lr

0003f89e <_kill>:
}
   3f89e:	2000      	movs	r0, #0
   3f8a0:	4770      	bx	lr

0003f8a2 <_getpid>:
}
   3f8a2:	2000      	movs	r0, #0
   3f8a4:	4770      	bx	lr

0003f8a6 <_fstat>:
	st->st_mode = S_IFCHR;
   3f8a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   3f8aa:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   3f8ac:	604b      	str	r3, [r1, #4]
}
   3f8ae:	4770      	bx	lr

0003f8b0 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   3f8b0:	f7f9 baa8 	b.w	38e04 <z_impl_z_errno>

0003f8b4 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   3f8b4:	b508      	push	{r3, lr}
	net_if_init();
   3f8b6:	f7e1 fe4b 	bl	21550 <net_if_init>
	net_if_post_init();
   3f8ba:	f7e1 fe5d 	bl	21578 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   3f8be:	2000      	movs	r0, #0
   3f8c0:	bd08      	pop	{r3, pc}

0003f8c2 <l2_flags_get>:
	return iface->if_dev->l2;
   3f8c2:	6803      	ldr	r3, [r0, #0]
   3f8c4:	685b      	ldr	r3, [r3, #4]
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   3f8c6:	b113      	cbz	r3, 3f8ce <l2_flags_get+0xc>
   3f8c8:	68db      	ldr	r3, [r3, #12]
   3f8ca:	b103      	cbz	r3, 3f8ce <l2_flags_get+0xc>
		flags = net_if_l2(iface)->get_flags(iface);
   3f8cc:	4718      	bx	r3
}
   3f8ce:	2000      	movs	r0, #0
   3f8d0:	4770      	bx	lr

0003f8d2 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, u16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   3f8d2:	e9d0 2300 	ldrd	r2, r3, [r0]
   3f8d6:	1a9b      	subs	r3, r3, r2
   3f8d8:	2b01      	cmp	r3, #1
{
   3f8da:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   3f8dc:	d90c      	bls.n	3f8f8 <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   3f8de:	4614      	mov	r4, r2
   3f8e0:	1c53      	adds	r3, r2, #1
   3f8e2:	6003      	str	r3, [r0, #0]
   3f8e4:	f814 3b02 	ldrb.w	r3, [r4], #2
   3f8e8:	021b      	lsls	r3, r3, #8
   3f8ea:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   3f8ec:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   3f8ee:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   3f8f0:	7852      	ldrb	r2, [r2, #1]
   3f8f2:	4313      	orrs	r3, r2
   3f8f4:	800b      	strh	r3, [r1, #0]
}
   3f8f6:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3f8f8:	f06f 0015 	mvn.w	r0, #21
   3f8fc:	e7fb      	b.n	3f8f6 <unpack_uint16+0x24>

0003f8fe <packet_length_decode>:
int packet_length_decode(struct buf_ctx *buf, u32_t *length)
{
	u8_t shift = 0U;
	u8_t bytes = 0U;

	*length = 0U;
   3f8fe:	2300      	movs	r3, #0
{
   3f900:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		if (bytes > MQTT_MAX_LENGTH_BYTES) {
			return -EINVAL;
		}

		if (buf->cur >= buf->end) {
   3f902:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   3f904:	600b      	str	r3, [r1, #0]
		if (buf->cur >= buf->end) {
   3f906:	6804      	ldr	r4, [r0, #0]
   3f908:	42bc      	cmp	r4, r7
   3f90a:	d215      	bcs.n	3f938 <packet_length_decode+0x3a>
			return -EAGAIN;
		}

		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   3f90c:	4625      	mov	r5, r4
   3f90e:	f815 2b01 	ldrb.w	r2, [r5], #1
   3f912:	680e      	ldr	r6, [r1, #0]
   3f914:	f002 027f 	and.w	r2, r2, #127	; 0x7f
								<< shift;
   3f918:	409a      	lsls	r2, r3
		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   3f91a:	4432      	add	r2, r6
   3f91c:	600a      	str	r2, [r1, #0]
		shift += MQTT_LENGTH_SHIFT;
		bytes++;
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   3f91e:	6005      	str	r5, [r0, #0]
   3f920:	f994 2000 	ldrsb.w	r2, [r4]
   3f924:	2a00      	cmp	r2, #0
   3f926:	db01      	blt.n	3f92c <packet_length_decode+0x2e>

	MQTT_TRC("length:0x%08x", *length);

	return 0;
   3f928:	2000      	movs	r0, #0
}
   3f92a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (bytes > MQTT_MAX_LENGTH_BYTES) {
   3f92c:	3307      	adds	r3, #7
   3f92e:	2b23      	cmp	r3, #35	; 0x23
   3f930:	d1e9      	bne.n	3f906 <packet_length_decode+0x8>
			return -EINVAL;
   3f932:	f06f 0015 	mvn.w	r0, #21
   3f936:	e7f8      	b.n	3f92a <packet_length_decode+0x2c>
			return -EAGAIN;
   3f938:	f06f 000a 	mvn.w	r0, #10
   3f93c:	e7f5      	b.n	3f92a <packet_length_decode+0x2c>

0003f93e <fixed_header_decode>:

int fixed_header_decode(struct buf_ctx *buf, u8_t *type_and_flags,
			u32_t *length)
{
   3f93e:	b430      	push	{r4, r5}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3f940:	e9d0 3500 	ldrd	r3, r5, [r0]
   3f944:	429d      	cmp	r5, r3
   3f946:	d007      	beq.n	3f958 <fixed_header_decode+0x1a>
	*val = *(buf->cur++);
   3f948:	1c5d      	adds	r5, r3, #1
   3f94a:	6005      	str	r5, [r0, #0]
   3f94c:	781b      	ldrb	r3, [r3, #0]
   3f94e:	700b      	strb	r3, [r1, #0]
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   3f950:	bc30      	pop	{r4, r5}
	return packet_length_decode(buf, length);
   3f952:	4611      	mov	r1, r2
   3f954:	f7ff bfd3 	b.w	3f8fe <packet_length_decode>
}
   3f958:	f06f 0015 	mvn.w	r0, #21
   3f95c:	bc30      	pop	{r4, r5}
   3f95e:	4770      	bx	lr

0003f960 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   3f960:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3f962:	e9d1 3500 	ldrd	r3, r5, [r1]
   3f966:	429d      	cmp	r5, r3
   3f968:	d102      	bne.n	3f970 <connect_ack_decode+0x10>
		return -EINVAL;
   3f96a:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   3f96e:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   3f970:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3f972:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   3f974:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3f976:	d0f8      	beq.n	3f96a <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   3f978:	461d      	mov	r5, r3
   3f97a:	f815 4b02 	ldrb.w	r4, [r5], #2
   3f97e:	600d      	str	r5, [r1, #0]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   3f980:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
	*val = *(buf->cur++);
   3f984:	785b      	ldrb	r3, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   3f986:	2904      	cmp	r1, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   3f988:	bf04      	itt	eq
   3f98a:	f004 0401 	andeq.w	r4, r4, #1
		param->session_present_flag =
   3f98e:	7014      	strbeq	r4, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   3f990:	7053      	strb	r3, [r2, #1]
	return 0;
   3f992:	2000      	movs	r0, #0
   3f994:	e7eb      	b.n	3f96e <connect_ack_decode+0xe>

0003f996 <publish_decode>:

int publish_decode(u8_t flags, u32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   3f996:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3f99a:	461c      	mov	r4, r3
	int err_code;
	u32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   3f99c:	7d9b      	ldrb	r3, [r3, #22]
{
   3f99e:	4688      	mov	r8, r1
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   3f9a0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   3f9a4:	f360 0341 	bfi	r3, r0, #1, #1
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   3f9a8:	f3c0 0041 	ubfx	r0, r0, #1, #2
   3f9ac:	7220      	strb	r0, [r4, #8]
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   3f9ae:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   3f9b0:	f10d 0106 	add.w	r1, sp, #6
   3f9b4:	4610      	mov	r0, r2
{
   3f9b6:	4616      	mov	r6, r2
	err_code = unpack_uint16(buf, &utf8_strlen);
   3f9b8:	f7ff ff8b 	bl	3f8d2 <unpack_uint16>
	if (err_code != 0) {
   3f9bc:	4607      	mov	r7, r0
   3f9be:	b940      	cbnz	r0, 3f9d2 <publish_decode+0x3c>
	if ((buf->end - buf->cur) < utf8_strlen) {
   3f9c0:	6833      	ldr	r3, [r6, #0]
   3f9c2:	6872      	ldr	r2, [r6, #4]
   3f9c4:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   3f9c8:	1ad2      	subs	r2, r2, r3
   3f9ca:	42aa      	cmp	r2, r5
   3f9cc:	da05      	bge.n	3f9da <publish_decode+0x44>
		return -EINVAL;
   3f9ce:	f06f 0715 	mvn.w	r7, #21

	param->message.payload.data = NULL;
	param->message.payload.len = var_length - var_header_length;

	return 0;
}
   3f9d2:	4638      	mov	r0, r7
   3f9d4:	b002      	add	sp, #8
   3f9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	str->size = utf8_strlen;
   3f9da:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   3f9dc:	b15d      	cbz	r5, 3f9f6 <publish_decode+0x60>
		str->utf8 = buf->cur;
   3f9de:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   3f9e0:	442b      	add	r3, r5
   3f9e2:	6033      	str	r3, [r6, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   3f9e4:	7a23      	ldrb	r3, [r4, #8]
   3f9e6:	b943      	cbnz	r3, 3f9fa <publish_decode+0x64>
	var_header_length = param->message.topic.topic.size + sizeof(u16_t);
   3f9e8:	3502      	adds	r5, #2
	param->message.payload.data = NULL;
   3f9ea:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   3f9ec:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   3f9f0:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   3f9f2:	6125      	str	r5, [r4, #16]
	return 0;
   3f9f4:	e7ed      	b.n	3f9d2 <publish_decode+0x3c>
		str->utf8 = NULL;
   3f9f6:	6025      	str	r5, [r4, #0]
	if (err_code != 0) {
   3f9f8:	e7f4      	b.n	3f9e4 <publish_decode+0x4e>
		err_code = unpack_uint16(buf, &param->message_id);
   3f9fa:	f104 0114 	add.w	r1, r4, #20
   3f9fe:	4630      	mov	r0, r6
   3fa00:	f7ff ff67 	bl	3f8d2 <unpack_uint16>
		if (err_code != 0) {
   3fa04:	b908      	cbnz	r0, 3fa0a <publish_decode+0x74>
		var_header_length += sizeof(u16_t);
   3fa06:	3504      	adds	r5, #4
   3fa08:	e7ef      	b.n	3f9ea <publish_decode+0x54>
   3fa0a:	4607      	mov	r7, r0
   3fa0c:	e7e1      	b.n	3f9d2 <publish_decode+0x3c>

0003fa0e <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3fa0e:	f7ff bf60 	b.w	3f8d2 <unpack_uint16>

0003fa12 <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3fa12:	f7ff bf5e 	b.w	3f8d2 <unpack_uint16>

0003fa16 <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3fa16:	f7ff bf5c 	b.w	3f8d2 <unpack_uint16>

0003fa1a <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3fa1a:	f7ff bf5a 	b.w	3f8d2 <unpack_uint16>

0003fa1e <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   3fa1e:	b538      	push	{r3, r4, r5, lr}
   3fa20:	4605      	mov	r5, r0
   3fa22:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   3fa24:	f7ff ff55 	bl	3f8d2 <unpack_uint16>
	if (err_code != 0) {
   3fa28:	b930      	cbnz	r0, 3fa38 <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   3fa2a:	e9d5 2300 	ldrd	r2, r3, [r5]
   3fa2e:	1a99      	subs	r1, r3, r2
	str->len = length;
   3fa30:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   3fa32:	b111      	cbz	r1, 3fa3a <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   3fa34:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   3fa36:	602b      	str	r3, [r5, #0]
}
   3fa38:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   3fa3a:	6060      	str	r0, [r4, #4]
   3fa3c:	e7fc      	b.n	3fa38 <subscribe_ack_decode+0x1a>

0003fa3e <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3fa3e:	f7ff bf48 	b.w	3f8d2 <unpack_uint16>

0003fa42 <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   3fa42:	e9d1 3200 	ldrd	r3, r2, [r1]
   3fa46:	1ad2      	subs	r2, r2, r3
   3fa48:	2a01      	cmp	r2, #1
   3fa4a:	d909      	bls.n	3fa60 <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   3fa4c:	1c5a      	adds	r2, r3, #1
   3fa4e:	600a      	str	r2, [r1, #0]
   3fa50:	0a02      	lsrs	r2, r0, #8
   3fa52:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   3fa54:	680b      	ldr	r3, [r1, #0]
   3fa56:	1c5a      	adds	r2, r3, #1
   3fa58:	600a      	str	r2, [r1, #0]
   3fa5a:	7018      	strb	r0, [r3, #0]
	return 0;
   3fa5c:	2000      	movs	r0, #0
   3fa5e:	4770      	bx	lr
		return -ENOMEM;
   3fa60:	f06f 000b 	mvn.w	r0, #11
}
   3fa64:	4770      	bx	lr

0003fa66 <pack_utf8_str>:
{
   3fa66:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3fa68:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   3fa6c:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3fa6e:	6840      	ldr	r0, [r0, #4]
   3fa70:	1a9b      	subs	r3, r3, r2
   3fa72:	1c82      	adds	r2, r0, #2
   3fa74:	4293      	cmp	r3, r2
{
   3fa76:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3fa78:	d30d      	bcc.n	3fa96 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   3fa7a:	b280      	uxth	r0, r0
   3fa7c:	f7ff ffe1 	bl	3fa42 <pack_uint16>
   3fa80:	e9d5 1200 	ldrd	r1, r2, [r5]
   3fa84:	6820      	ldr	r0, [r4, #0]
   3fa86:	f001 ff94 	bl	419b2 <memcpy>
	return 0;
   3fa8a:	2000      	movs	r0, #0
	buf->cur += str->size;
   3fa8c:	6823      	ldr	r3, [r4, #0]
   3fa8e:	686a      	ldr	r2, [r5, #4]
   3fa90:	4413      	add	r3, r2
   3fa92:	6023      	str	r3, [r4, #0]
}
   3fa94:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   3fa96:	f06f 000b 	mvn.w	r0, #11
   3fa9a:	e7fb      	b.n	3fa94 <pack_utf8_str+0x2e>

0003fa9c <mqtt_encode_fixed_header>:
{
   3fa9c:	b570      	push	{r4, r5, r6, lr}
	u32_t length = buf->cur - start;
   3fa9e:	6815      	ldr	r5, [r2, #0]
   3faa0:	1a6d      	subs	r5, r5, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   3faa2:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
   3faa6:	d227      	bcs.n	3faf8 <mqtt_encode_fixed_header+0x5c>
   3faa8:	462c      	mov	r4, r5
   3faaa:	2600      	movs	r6, #0
	} while (length > 0);
   3faac:	09e4      	lsrs	r4, r4, #7
   3faae:	b2f3      	uxtb	r3, r6
		if (buf != NULL) {
   3fab0:	f106 0601 	add.w	r6, r6, #1
	} while (length > 0);
   3fab4:	d1fa      	bne.n	3faac <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(u8_t);
   3fab6:	3302      	adds	r3, #2
	buf->cur = start - fixed_header_length;
   3fab8:	b2db      	uxtb	r3, r3
   3faba:	425b      	negs	r3, r3
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3fabc:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   3fabe:	18cc      	adds	r4, r1, r3
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3fac0:	42b4      	cmp	r4, r6
	buf->cur = start - fixed_header_length;
   3fac2:	6014      	str	r4, [r2, #0]
	*(buf->cur++) = val;
   3fac4:	bf1e      	ittt	ne
   3fac6:	3401      	addne	r4, #1
   3fac8:	6014      	strne	r4, [r2, #0]
   3faca:	54c8      	strbne	r0, [r1, r3]
	return 0;
   3facc:	4628      	mov	r0, r5
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   3face:	6811      	ldr	r1, [r2, #0]
   3fad0:	f000 047f 	and.w	r4, r0, #127	; 0x7f
   3fad4:	700c      	strb	r4, [r1, #0]
			if (length > 0) {
   3fad6:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   3fad8:	bf1f      	itttt	ne
   3fada:	6814      	ldrne	r4, [r2, #0]
   3fadc:	7821      	ldrbne	r1, [r4, #0]
   3fade:	f061 017f 	ornne	r1, r1, #127	; 0x7f
   3fae2:	7021      	strbne	r1, [r4, #0]
			buf->cur++;
   3fae4:	6811      	ldr	r1, [r2, #0]
   3fae6:	3101      	adds	r1, #1
   3fae8:	6011      	str	r1, [r2, #0]
	} while (length > 0);
   3faea:	2800      	cmp	r0, #0
   3faec:	d1ef      	bne.n	3face <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   3faee:	440b      	add	r3, r1
	buf->end = buf->cur + length + fixed_header_length;
   3faf0:	4429      	add	r1, r5
	buf->cur = buf->cur - fixed_header_length;
   3faf2:	6013      	str	r3, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   3faf4:	6051      	str	r1, [r2, #4]
}
   3faf6:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   3faf8:	f06f 0079 	mvn.w	r0, #121	; 0x79
   3fafc:	e7fb      	b.n	3faf6 <mqtt_encode_fixed_header+0x5a>

0003fafe <mqtt_message_id_only_enc>:
{
   3fafe:	b570      	push	{r4, r5, r6, lr}
   3fb00:	4606      	mov	r6, r0
   3fb02:	4615      	mov	r5, r2
	if (message_id == 0U) {
   3fb04:	4608      	mov	r0, r1
   3fb06:	b169      	cbz	r1, 3fb24 <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3fb08:	6814      	ldr	r4, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   3fb0a:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3fb0c:	3405      	adds	r4, #5
   3fb0e:	6014      	str	r4, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   3fb10:	f7ff ff97 	bl	3fa42 <pack_uint16>
	if (err_code != 0) {
   3fb14:	b940      	cbnz	r0, 3fb28 <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3fb16:	462a      	mov	r2, r5
   3fb18:	4621      	mov	r1, r4
   3fb1a:	4630      	mov	r0, r6
}
   3fb1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3fb20:	f7ff bfbc 	b.w	3fa9c <mqtt_encode_fixed_header>
		return -EINVAL;
   3fb24:	f06f 0015 	mvn.w	r0, #21
}
   3fb28:	bd70      	pop	{r4, r5, r6, pc}

0003fb2a <publish_encode>:
{
   3fb2a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3fb2e:	4607      	mov	r7, r0
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   3fb30:	7d80      	ldrb	r0, [r0, #22]
   3fb32:	7a3c      	ldrb	r4, [r7, #8]
{
   3fb34:	460d      	mov	r5, r1
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   3fb36:	f000 0801 	and.w	r8, r0, #1
   3fb3a:	f3c0 0940 	ubfx	r9, r0, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   3fb3e:	b10c      	cbz	r4, 3fb44 <publish_encode+0x1a>
   3fb40:	8abb      	ldrh	r3, [r7, #20]
   3fb42:	b35b      	cbz	r3, 3fb9c <publish_encode+0x72>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3fb44:	682e      	ldr	r6, [r5, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3fb46:	4629      	mov	r1, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3fb48:	3605      	adds	r6, #5
   3fb4a:	602e      	str	r6, [r5, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3fb4c:	4638      	mov	r0, r7
   3fb4e:	f7ff ff8a 	bl	3fa66 <pack_utf8_str>
	if (err_code != 0) {
   3fb52:	b9a8      	cbnz	r0, 3fb80 <publish_encode+0x56>
	if (param->message.topic.qos) {
   3fb54:	7a3b      	ldrb	r3, [r7, #8]
   3fb56:	b9ab      	cbnz	r3, 3fb84 <publish_encode+0x5a>
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   3fb58:	0060      	lsls	r0, r4, #1
   3fb5a:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   3fb5e:	693a      	ldr	r2, [r7, #16]
   3fb60:	682b      	ldr	r3, [r5, #0]
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   3fb62:	ea40 0009 	orr.w	r0, r0, r9
   3fb66:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   3fb6a:	4413      	add	r3, r2
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   3fb6c:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	buf->cur += param->message.payload.len;
   3fb70:	602b      	str	r3, [r5, #0]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   3fb72:	462a      	mov	r2, r5
   3fb74:	4631      	mov	r1, r6
   3fb76:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3fb7a:	f7ff ff8f 	bl	3fa9c <mqtt_encode_fixed_header>
	if (err_code != 0) {
   3fb7e:	b140      	cbz	r0, 3fb92 <publish_encode+0x68>
}
   3fb80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   3fb84:	4629      	mov	r1, r5
   3fb86:	8ab8      	ldrh	r0, [r7, #20]
   3fb88:	f7ff ff5b 	bl	3fa42 <pack_uint16>
		if (err_code != 0) {
   3fb8c:	2800      	cmp	r0, #0
   3fb8e:	d0e3      	beq.n	3fb58 <publish_encode+0x2e>
   3fb90:	e7f6      	b.n	3fb80 <publish_encode+0x56>
	buf->end -= param->message.payload.len;
   3fb92:	686b      	ldr	r3, [r5, #4]
   3fb94:	693a      	ldr	r2, [r7, #16]
   3fb96:	1a9b      	subs	r3, r3, r2
   3fb98:	606b      	str	r3, [r5, #4]
	return 0;
   3fb9a:	e7f1      	b.n	3fb80 <publish_encode+0x56>
		return -EINVAL;
   3fb9c:	f06f 0015 	mvn.w	r0, #21
   3fba0:	e7ee      	b.n	3fb80 <publish_encode+0x56>

0003fba2 <publish_ack_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   3fba2:	460a      	mov	r2, r1
   3fba4:	8801      	ldrh	r1, [r0, #0]
   3fba6:	2040      	movs	r0, #64	; 0x40
   3fba8:	f7ff bfa9 	b.w	3fafe <mqtt_message_id_only_enc>

0003fbac <subscribe_encode>:
{
   3fbac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3fbb0:	4607      	mov	r7, r0
	if (param->message_id == 0U) {
   3fbb2:	88c0      	ldrh	r0, [r0, #6]
{
   3fbb4:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   3fbb6:	b330      	cbz	r0, 3fc06 <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3fbb8:	680e      	ldr	r6, [r1, #0]
   3fbba:	3605      	adds	r6, #5
   3fbbc:	600e      	str	r6, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   3fbbe:	f7ff ff40 	bl	3fa42 <pack_uint16>
	if (err_code != 0) {
   3fbc2:	4604      	mov	r4, r0
   3fbc4:	bb08      	cbnz	r0, 3fc0a <subscribe_encode+0x5e>
   3fbc6:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < param->list_count; i++) {
   3fbca:	88bb      	ldrh	r3, [r7, #4]
   3fbcc:	42a3      	cmp	r3, r4
   3fbce:	dc06      	bgt.n	3fbde <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3fbd0:	462a      	mov	r2, r5
   3fbd2:	4631      	mov	r1, r6
}
   3fbd4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3fbd8:	2082      	movs	r0, #130	; 0x82
   3fbda:	f7ff bf5f 	b.w	3fa9c <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3fbde:	fb09 f804 	mul.w	r8, r9, r4
   3fbe2:	6838      	ldr	r0, [r7, #0]
   3fbe4:	4629      	mov	r1, r5
   3fbe6:	4440      	add	r0, r8
   3fbe8:	f7ff ff3d 	bl	3fa66 <pack_utf8_str>
		if (err_code != 0) {
   3fbec:	b980      	cbnz	r0, 3fc10 <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   3fbee:	683b      	ldr	r3, [r7, #0]
   3fbf0:	4443      	add	r3, r8
   3fbf2:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3fbf4:	e9d5 3100 	ldrd	r3, r1, [r5]
   3fbf8:	4299      	cmp	r1, r3
   3fbfa:	d00b      	beq.n	3fc14 <subscribe_encode+0x68>
	*(buf->cur++) = val;
   3fbfc:	1c59      	adds	r1, r3, #1
   3fbfe:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   3fc00:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   3fc02:	701a      	strb	r2, [r3, #0]
		if (err_code != 0) {
   3fc04:	e7e1      	b.n	3fbca <subscribe_encode+0x1e>
		return -EINVAL;
   3fc06:	f06f 0415 	mvn.w	r4, #21
}
   3fc0a:	4620      	mov	r0, r4
   3fc0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3fc10:	4604      	mov	r4, r0
   3fc12:	e7fa      	b.n	3fc0a <subscribe_encode+0x5e>
		return -ENOMEM;
   3fc14:	f06f 040b 	mvn.w	r4, #11
   3fc18:	e7f7      	b.n	3fc0a <subscribe_encode+0x5e>

0003fc1a <unsubscribe_encode>:
{
   3fc1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3fc1e:	680d      	ldr	r5, [r1, #0]
{
   3fc20:	4607      	mov	r7, r0
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3fc22:	3505      	adds	r5, #5
   3fc24:	600d      	str	r5, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   3fc26:	88c0      	ldrh	r0, [r0, #6]
{
   3fc28:	460e      	mov	r6, r1
	err_code = pack_uint16(param->message_id, buf);
   3fc2a:	f7ff ff0a 	bl	3fa42 <pack_uint16>
	if (err_code != 0) {
   3fc2e:	4604      	mov	r4, r0
   3fc30:	b9a8      	cbnz	r0, 3fc5e <unsubscribe_encode+0x44>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3fc32:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   3fc36:	88bb      	ldrh	r3, [r7, #4]
   3fc38:	42a3      	cmp	r3, r4
   3fc3a:	dc06      	bgt.n	3fc4a <unsubscribe_encode+0x30>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3fc3c:	4632      	mov	r2, r6
   3fc3e:	4629      	mov	r1, r5
}
   3fc40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3fc44:	20a2      	movs	r0, #162	; 0xa2
   3fc46:	f7ff bf29 	b.w	3fa9c <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3fc4a:	6838      	ldr	r0, [r7, #0]
   3fc4c:	4631      	mov	r1, r6
   3fc4e:	fb08 0004 	mla	r0, r8, r4, r0
   3fc52:	f7ff ff08 	bl	3fa66 <pack_utf8_str>
		if (err_code != 0) {
   3fc56:	b908      	cbnz	r0, 3fc5c <unsubscribe_encode+0x42>
	for (i = 0; i < param->list_count; i++) {
   3fc58:	3401      	adds	r4, #1
   3fc5a:	e7ec      	b.n	3fc36 <unsubscribe_encode+0x1c>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3fc5c:	4604      	mov	r4, r0
}
   3fc5e:	4620      	mov	r0, r4
   3fc60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003fc64 <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, u32_t length)
{
   3fc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3fc66:	460d      	mov	r5, r1
	int len;

	/* Calculate how much data we need to read from the transport,
	 * given the already buffered data.
	 */
	remaining = length - (buf->end - buf->cur);
   3fc68:	e9d1 4100 	ldrd	r4, r1, [r1]
   3fc6c:	1b0c      	subs	r4, r1, r4
   3fc6e:	1b14      	subs	r4, r2, r4
	if (remaining <= 0) {
   3fc70:	2c00      	cmp	r4, #0
{
   3fc72:	4606      	mov	r6, r0
	if (remaining <= 0) {
   3fc74:	dd14      	ble.n	3fca0 <mqtt_read_message_chunk+0x3c>
		return 0;
	}

	/* Check if read does not exceed the buffer. */
	if (buf->end + remaining > client->rx_buf + client->rx_buf_size) {
   3fc76:	e9d0 3719 	ldrd	r3, r7, [r0, #100]	; 0x64
   3fc7a:	190a      	adds	r2, r1, r4
   3fc7c:	443b      	add	r3, r7
   3fc7e:	429a      	cmp	r2, r3
   3fc80:	d810      	bhi.n	3fca4 <mqtt_read_message_chunk+0x40>
		MQTT_ERR("[CID %p]: Buffer too small to receive the message",
			 client);
		return -ENOMEM;
	}

	len = mqtt_transport_read(client, buf->end, remaining, false);
   3fc82:	2300      	movs	r3, #0
   3fc84:	4622      	mov	r2, r4
   3fc86:	f7e1 fe63 	bl	21950 <mqtt_transport_read>
	if (len < 0) {
   3fc8a:	2800      	cmp	r0, #0
   3fc8c:	db09      	blt.n	3fca2 <mqtt_read_message_chunk+0x3e>
		MQTT_TRC("[CID %p]: Transport read error: %d", client, len);
		return len;
	}

	if (len == 0) {
   3fc8e:	d00c      	beq.n	3fcaa <mqtt_read_message_chunk+0x46>
		MQTT_TRC("[CID %p]: Connection closed.", client);
		return -ENOTCONN;
	}

	client->internal.rx_buf_datalen += len;
   3fc90:	69f3      	ldr	r3, [r6, #28]
	buf->end += len;

	if (len < remaining) {
   3fc92:	4284      	cmp	r4, r0
	client->internal.rx_buf_datalen += len;
   3fc94:	4403      	add	r3, r0
   3fc96:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   3fc98:	686b      	ldr	r3, [r5, #4]
   3fc9a:	4403      	add	r3, r0
   3fc9c:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   3fc9e:	dc07      	bgt.n	3fcb0 <mqtt_read_message_chunk+0x4c>
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
   3fca0:	2000      	movs	r0, #0
}
   3fca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOMEM;
   3fca4:	f06f 000b 	mvn.w	r0, #11
   3fca8:	e7fb      	b.n	3fca2 <mqtt_read_message_chunk+0x3e>
		return -ENOTCONN;
   3fcaa:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   3fcae:	e7f8      	b.n	3fca2 <mqtt_read_message_chunk+0x3e>
		return -EAGAIN;
   3fcb0:	f06f 000a 	mvn.w	r0, #10
   3fcb4:	e7f5      	b.n	3fca2 <mqtt_read_message_chunk+0x3e>

0003fcb6 <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   3fcb6:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	u8_t type_and_flags;
	u32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   3fcb8:	6e43      	ldr	r3, [r0, #100]	; 0x64
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3fcba:	69c2      	ldr	r2, [r0, #28]
{
   3fcbc:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   3fcbe:	9302      	str	r3, [sp, #8]
{
   3fcc0:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3fcc2:	4413      	add	r3, r2
	u8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   3fcc4:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3fcc6:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   3fcc8:	a902      	add	r1, sp, #8
   3fcca:	4628      	mov	r0, r5
   3fccc:	f7ff ffca 	bl	3fc64 <mqtt_read_message_chunk>
		if (err_code < 0) {
   3fcd0:	1e04      	subs	r4, r0, #0
   3fcd2:	db2b      	blt.n	3fd2c <mqtt_handle_rx+0x76>
		buf->cur = client->rx_buf;
   3fcd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3fcd6:	aa01      	add	r2, sp, #4
   3fcd8:	f10d 0103 	add.w	r1, sp, #3
   3fcdc:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   3fcde:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3fce0:	f7ff fe2d 	bl	3f93e <fixed_header_decode>
	} while (err_code == -EAGAIN);
   3fce4:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3fce8:	4604      	mov	r4, r0
		chunk_size = 1U;
   3fcea:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   3fcee:	d0eb      	beq.n	3fcc8 <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   3fcf0:	2800      	cmp	r0, #0
   3fcf2:	db1f      	blt.n	3fd34 <mqtt_handle_rx+0x7e>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   3fcf4:	f89d 6003 	ldrb.w	r6, [sp, #3]
   3fcf8:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   3fcfc:	2b30      	cmp	r3, #48	; 0x30
   3fcfe:	d11c      	bne.n	3fd3a <mqtt_handle_rx+0x84>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(u16_t));
   3fd00:	2202      	movs	r2, #2
   3fd02:	a902      	add	r1, sp, #8
   3fd04:	4628      	mov	r0, r5
   3fd06:	f7ff ffad 	bl	3fc64 <mqtt_read_message_chunk>
	if (err_code < 0) {
   3fd0a:	1e04      	subs	r4, r0, #0
   3fd0c:	db0e      	blt.n	3fd2c <mqtt_handle_rx+0x76>
	variable_header_length = *buf->cur << 8; /* MSB */
   3fd0e:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   3fd10:	f016 0f06 	tst.w	r6, #6
   3fd14:	881a      	ldrh	r2, [r3, #0]
   3fd16:	ba52      	rev16	r2, r2
   3fd18:	b292      	uxth	r2, r2
	variable_header_length += sizeof(u16_t);
   3fd1a:	bf0c      	ite	eq
   3fd1c:	3202      	addeq	r2, #2
		variable_header_length += sizeof(u16_t);
   3fd1e:	3204      	addne	r2, #4
		err_code = mqtt_read_publish_var_header(client, type_and_flags,
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   3fd20:	a902      	add	r1, sp, #8
   3fd22:	4628      	mov	r0, r5
   3fd24:	f7ff ff9e 	bl	3fc64 <mqtt_read_message_chunk>
	}

	if (err_code < 0) {
   3fd28:	1e04      	subs	r4, r0, #0
   3fd2a:	da08      	bge.n	3fd3e <mqtt_handle_rx+0x88>
		return (err_code == -EAGAIN) ? 0 : err_code;
   3fd2c:	f114 0f0b 	cmn.w	r4, #11
   3fd30:	d100      	bne.n	3fd34 <mqtt_handle_rx+0x7e>
   3fd32:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   3fd34:	4620      	mov	r0, r4
   3fd36:	b00c      	add	sp, #48	; 0x30
   3fd38:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   3fd3a:	9a01      	ldr	r2, [sp, #4]
   3fd3c:	e7f0      	b.n	3fd20 <mqtt_handle_rx+0x6a>
	evt.result = 0;
   3fd3e:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   3fd40:	f89d 0003 	ldrb.w	r0, [sp, #3]
   3fd44:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   3fd46:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   3fd4a:	2b50      	cmp	r3, #80	; 0x50
	evt.result = 0;
   3fd4c:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   3fd4e:	d04a      	beq.n	3fde6 <mqtt_handle_rx+0x130>
   3fd50:	d81e      	bhi.n	3fd90 <mqtt_handle_rx+0xda>
   3fd52:	2b30      	cmp	r3, #48	; 0x30
   3fd54:	d031      	beq.n	3fdba <mqtt_handle_rx+0x104>
   3fd56:	2b40      	cmp	r3, #64	; 0x40
   3fd58:	d03b      	beq.n	3fdd2 <mqtt_handle_rx+0x11c>
   3fd5a:	2b20      	cmp	r3, #32
   3fd5c:	d11d      	bne.n	3fd9a <mqtt_handle_rx+0xe4>
		evt.type = MQTT_EVT_CONNACK;
   3fd5e:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   3fd62:	a902      	add	r1, sp, #8
   3fd64:	aa05      	add	r2, sp, #20
   3fd66:	4628      	mov	r0, r5
   3fd68:	f7ff fdfa 	bl	3f960 <connect_ack_decode>
		if (err_code == 0) {
   3fd6c:	4604      	mov	r4, r0
   3fd6e:	2800      	cmp	r0, #0
   3fd70:	d137      	bne.n	3fde2 <mqtt_handle_rx+0x12c>
			if (evt.param.connack.return_code ==
   3fd72:	f89d 2015 	ldrb.w	r2, [sp, #21]
   3fd76:	b91a      	cbnz	r2, 3fd80 <mqtt_handle_rx+0xca>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   3fd78:	69ab      	ldr	r3, [r5, #24]
   3fd7a:	f043 0304 	orr.w	r3, r3, #4
   3fd7e:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   3fd80:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   3fd82:	a904      	add	r1, sp, #16
   3fd84:	4628      	mov	r0, r5
   3fd86:	f000 f869 	bl	3fe5c <event_notify>
	if (err_code < 0) {
   3fd8a:	2c00      	cmp	r4, #0
   3fd8c:	da05      	bge.n	3fd9a <mqtt_handle_rx+0xe4>
   3fd8e:	e7d1      	b.n	3fd34 <mqtt_handle_rx+0x7e>
	switch (type_and_flags & 0xF0) {
   3fd90:	2b70      	cmp	r3, #112	; 0x70
   3fd92:	d038      	beq.n	3fe06 <mqtt_handle_rx+0x150>
   3fd94:	d804      	bhi.n	3fda0 <mqtt_handle_rx+0xea>
   3fd96:	2b60      	cmp	r3, #96	; 0x60
   3fd98:	d02d      	beq.n	3fdf6 <mqtt_handle_rx+0x140>
	client->internal.rx_buf_datalen = 0U;
   3fd9a:	2400      	movs	r4, #0
   3fd9c:	61ec      	str	r4, [r5, #28]
	return 0;
   3fd9e:	e7c9      	b.n	3fd34 <mqtt_handle_rx+0x7e>
	switch (type_and_flags & 0xF0) {
   3fda0:	2b90      	cmp	r3, #144	; 0x90
   3fda2:	d038      	beq.n	3fe16 <mqtt_handle_rx+0x160>
   3fda4:	2bb0      	cmp	r3, #176	; 0xb0
   3fda6:	d1f8      	bne.n	3fd9a <mqtt_handle_rx+0xe4>
		evt.type = MQTT_EVT_UNSUBACK;
   3fda8:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3fdaa:	a905      	add	r1, sp, #20
   3fdac:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   3fdb0:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3fdb4:	f7ff fe43 	bl	3fa3e <unsubscribe_ack_decode>
   3fdb8:	e012      	b.n	3fde0 <mqtt_handle_rx+0x12a>
		evt.type = MQTT_EVT_PUBLISH;
   3fdba:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   3fdbc:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   3fdbe:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   3fdc2:	ab05      	add	r3, sp, #20
   3fdc4:	f7ff fde7 	bl	3f996 <publish_decode>
		client->internal.remaining_payload =
   3fdc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   3fdca:	4604      	mov	r4, r0
		evt.result = err_code;
   3fdcc:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   3fdce:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   3fdd0:	e7d7      	b.n	3fd82 <mqtt_handle_rx+0xcc>
		evt.type = MQTT_EVT_PUBACK;
   3fdd2:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   3fdd4:	a905      	add	r1, sp, #20
   3fdd6:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   3fdd8:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   3fddc:	f7ff fe17 	bl	3fa0e <publish_ack_decode>
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3fde0:	4604      	mov	r4, r0
		evt.result = err_code;
   3fde2:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   3fde4:	e7cd      	b.n	3fd82 <mqtt_handle_rx+0xcc>
		evt.type = MQTT_EVT_PUBREC;
   3fde6:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   3fde8:	a905      	add	r1, sp, #20
   3fdea:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   3fdec:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   3fdf0:	f7ff fe0f 	bl	3fa12 <publish_receive_decode>
   3fdf4:	e7f4      	b.n	3fde0 <mqtt_handle_rx+0x12a>
		evt.type = MQTT_EVT_PUBREL;
   3fdf6:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   3fdf8:	a905      	add	r1, sp, #20
   3fdfa:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   3fdfc:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   3fe00:	f7ff fe09 	bl	3fa16 <publish_release_decode>
   3fe04:	e7ec      	b.n	3fde0 <mqtt_handle_rx+0x12a>
		evt.type = MQTT_EVT_PUBCOMP;
   3fe06:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   3fe08:	a905      	add	r1, sp, #20
   3fe0a:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   3fe0c:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   3fe10:	f7ff fe03 	bl	3fa1a <publish_complete_decode>
   3fe14:	e7e4      	b.n	3fde0 <mqtt_handle_rx+0x12a>
		evt.type = MQTT_EVT_SUBACK;
   3fe16:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   3fe18:	a905      	add	r1, sp, #20
   3fe1a:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   3fe1c:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   3fe20:	f7ff fdfd 	bl	3fa1e <subscribe_ack_decode>
   3fe24:	e7dc      	b.n	3fde0 <mqtt_handle_rx+0x12a>

0003fe26 <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   3fe26:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = close(client->transport.tcp.sock);
   3fe28:	6a80      	ldr	r0, [r0, #40]	; 0x28
   3fe2a:	f7e1 fc5d 	bl	216e8 <close>
	if (ret < 0) {
   3fe2e:	2800      	cmp	r0, #0
   3fe30:	da04      	bge.n	3fe3c <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   3fe32:	f7ff fd3d 	bl	3f8b0 <__errno>
   3fe36:	6800      	ldr	r0, [r0, #0]
   3fe38:	4240      	negs	r0, r0
	}

	return 0;
}
   3fe3a:	bd08      	pop	{r3, pc}
	return 0;
   3fe3c:	2000      	movs	r0, #0
   3fe3e:	e7fc      	b.n	3fe3a <mqtt_client_tcp_disconnect+0x14>

0003fe40 <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   3fe40:	b538      	push	{r3, r4, r5, lr}
   3fe42:	4604      	mov	r4, r0
   3fe44:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   3fe46:	6f02      	ldr	r2, [r0, #112]	; 0x70
   3fe48:	2100      	movs	r1, #0
   3fe4a:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   3fe4c:	f001 fdd1 	bl	419f2 <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   3fe50:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	buf->end = client->tx_buf + client->tx_buf_size;
   3fe52:	6f22      	ldr	r2, [r4, #112]	; 0x70
	buf->cur = client->tx_buf;
   3fe54:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   3fe56:	4413      	add	r3, r2
   3fe58:	606b      	str	r3, [r5, #4]
}
   3fe5a:	bd38      	pop	{r3, r4, r5, pc}

0003fe5c <event_notify>:
	/* Reset internal state. */
	client_reset(client);
}

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   3fe5c:	b538      	push	{r3, r4, r5, lr}
	if (client->evt_cb != NULL) {
   3fe5e:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
   3fe60:	4604      	mov	r4, r0
   3fe62:	460d      	mov	r5, r1
	if (client->evt_cb != NULL) {
   3fe64:	b153      	cbz	r3, 3fe7c <event_notify+0x20>
		mqtt_mutex_unlock(client);
   3fe66:	f7e1 fd89 	bl	2197c <mqtt_mutex_unlock>

		client->evt_cb(client, evt);
   3fe6a:	4620      	mov	r0, r4
   3fe6c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   3fe6e:	4629      	mov	r1, r5
   3fe70:	4798      	blx	r3

		mqtt_mutex_lock(client);
   3fe72:	4620      	mov	r0, r4
	}
}
   3fe74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		mqtt_mutex_lock(client);
   3fe78:	f7e1 bdac 	b.w	219d4 <mqtt_mutex_lock>
}
   3fe7c:	bd38      	pop	{r3, r4, r5, pc}

0003fe7e <client_disconnect>:

static void client_disconnect(struct mqtt_client *client, int result)
{
   3fe7e:	b530      	push	{r4, r5, lr}
   3fe80:	4604      	mov	r4, r0
   3fe82:	b089      	sub	sp, #36	; 0x24
   3fe84:	460d      	mov	r5, r1
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   3fe86:	f7e1 fd6f 	bl	21968 <mqtt_transport_disconnect>
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED) ||
   3fe8a:	69a3      	ldr	r3, [r4, #24]
	event_notify(client, &evt);
   3fe8c:	4669      	mov	r1, sp
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED) ||
   3fe8e:	f013 030c 	ands.w	r3, r3, #12
		evt.type = MQTT_EVT_DISCONNECT;
   3fe92:	bf12      	itee	ne
   3fe94:	2301      	movne	r3, #1
		evt.type = MQTT_EVT_CONNACK;
   3fe96:	f88d 3000 	strbeq.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   3fe9a:	f06f 036e 	mvneq.w	r3, #110	; 0x6e
	event_notify(client, &evt);
   3fe9e:	4620      	mov	r0, r4
		evt.type = MQTT_EVT_DISCONNECT;
   3fea0:	bf16      	itet	ne
   3fea2:	f88d 3000 	strbne.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   3fea6:	9307      	streq	r3, [sp, #28]
		evt.result = result;
   3fea8:	9507      	strne	r5, [sp, #28]
	event_notify(client, &evt);
   3feaa:	f7ff ffd7 	bl	3fe5c <event_notify>
	MQTT_STATE_INIT(client);
   3feae:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   3feb0:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   3feb4:	e9c4 3307 	strd	r3, r3, [r4, #28]
	if (err_code < 0) {
		MQTT_ERR("Failed to disconnect transport!");
	}

	disconnect_event_notify(client, result);
}
   3feb8:	b009      	add	sp, #36	; 0x24
   3feba:	bd30      	pop	{r4, r5, pc}

0003febc <client_write>:
	return err_code;
}

static int client_write(struct mqtt_client *client, const u8_t *data,
			u32_t datalen)
{
   3febc:	b538      	push	{r3, r4, r5, lr}
   3febe:	4605      	mov	r5, r0
	int err_code;

	MQTT_TRC("[%p]: Transport writing %d bytes.", client, datalen);

	err_code = mqtt_transport_write(client, data, datalen);
   3fec0:	f7e1 fd3a 	bl	21938 <mqtt_transport_write>
	if (err_code < 0) {
   3fec4:	1e04      	subs	r4, r0, #0
   3fec6:	da05      	bge.n	3fed4 <client_write+0x18>
		MQTT_TRC("TCP write failed, errno = %d, "
			 "closing connection", errno);
		client_disconnect(client, err_code);
   3fec8:	4621      	mov	r1, r4
   3feca:	4628      	mov	r0, r5
   3fecc:	f7ff ffd7 	bl	3fe7e <client_disconnect>

	MQTT_TRC("[%p]: Transport write complete.", client);
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();

	return 0;
}
   3fed0:	4620      	mov	r0, r4
   3fed2:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_uptime_get();
   3fed4:	f001 fce7 	bl	418a6 <z_impl_k_uptime_get>
	return 0;
   3fed8:	2400      	movs	r4, #0
	return (u32_t)k_uptime_get();
   3feda:	6168      	str	r0, [r5, #20]
   3fedc:	e7f8      	b.n	3fed0 <client_write+0x14>

0003fede <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   3fede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3fee2:	460f      	mov	r7, r1
   3fee4:	4690      	mov	r8, r2
   3fee6:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   3fee8:	4605      	mov	r5, r0
   3feea:	b320      	cbz	r0, 3ff36 <read_publish_payload+0x58>

	mqtt_mutex_lock(client);
   3feec:	f7e1 fd72 	bl	219d4 <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   3fef0:	6a2c      	ldr	r4, [r5, #32]
   3fef2:	b1b4      	cbz	r4, 3ff22 <read_publish_payload+0x44>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   3fef4:	4544      	cmp	r4, r8
   3fef6:	4622      	mov	r2, r4
   3fef8:	4633      	mov	r3, r6
   3fefa:	bf28      	it	cs
   3fefc:	4642      	movcs	r2, r8
   3fefe:	4639      	mov	r1, r7
   3ff00:	4628      	mov	r0, r5
   3ff02:	f7e1 fd25 	bl	21950 <mqtt_transport_read>
   3ff06:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   3ff08:	b916      	cbnz	r6, 3ff10 <read_publish_payload+0x32>
   3ff0a:	f110 0f0b 	cmn.w	r0, #11
   3ff0e:	d008      	beq.n	3ff22 <read_publish_payload+0x44>
		goto exit;
	}

	if (ret <= 0) {
   3ff10:	2c00      	cmp	r4, #0
   3ff12:	dc0c      	bgt.n	3ff2e <read_publish_payload+0x50>
		if (ret == 0) {
			ret = -ENOTCONN;
   3ff14:	bf08      	it	eq
   3ff16:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret);
   3ff1a:	4628      	mov	r0, r5
   3ff1c:	4621      	mov	r1, r4
   3ff1e:	f7ff ffae 	bl	3fe7e <client_disconnect>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   3ff22:	4628      	mov	r0, r5
   3ff24:	f7e1 fd2a 	bl	2197c <mqtt_mutex_unlock>

	return ret;
}
   3ff28:	4620      	mov	r0, r4
   3ff2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	client->internal.remaining_payload -= ret;
   3ff2e:	6a2b      	ldr	r3, [r5, #32]
   3ff30:	1b1b      	subs	r3, r3, r4
   3ff32:	622b      	str	r3, [r5, #32]
   3ff34:	e7f5      	b.n	3ff22 <read_publish_payload+0x44>
	NULL_PARAM_CHECK(client);
   3ff36:	f06f 0415 	mvn.w	r4, #21
   3ff3a:	e7f5      	b.n	3ff28 <read_publish_payload+0x4a>

0003ff3c <mqtt_client_init>:
{
   3ff3c:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   3ff3e:	4604      	mov	r4, r0
   3ff40:	b180      	cbz	r0, 3ff64 <mqtt_client_init+0x28>
   3ff42:	2278      	movs	r2, #120	; 0x78
   3ff44:	2100      	movs	r1, #0
   3ff46:	f001 fd54 	bl	419f2 <memset>
	MQTT_STATE_INIT(client);
   3ff4a:	2300      	movs	r3, #0
   3ff4c:	61a3      	str	r3, [r4, #24]
	z_impl_k_mutex_init(mutex);
   3ff4e:	4620      	mov	r0, r4
   3ff50:	f001 fbc8 	bl	416e4 <z_impl_k_mutex_init>
	client->keepalive = MQTT_KEEPALIVE;
   3ff54:	6f63      	ldr	r3, [r4, #116]	; 0x74
   3ff56:	f003 437d 	and.w	r3, r3, #4244635648	; 0xfd000000
   3ff5a:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
   3ff5e:	f443 6396 	orr.w	r3, r3, #1200	; 0x4b0
   3ff62:	6763      	str	r3, [r4, #116]	; 0x74
}
   3ff64:	bd10      	pop	{r4, pc}

0003ff66 <mqtt_connect>:
{
   3ff66:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3ff68:	4604      	mov	r4, r0
   3ff6a:	2800      	cmp	r0, #0
   3ff6c:	d03a      	beq.n	3ffe4 <mqtt_connect+0x7e>
	NULL_PARAM_CHECK(client->client_id.utf8);
   3ff6e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   3ff70:	2b00      	cmp	r3, #0
   3ff72:	d037      	beq.n	3ffe4 <mqtt_connect+0x7e>
	mqtt_mutex_lock(client);
   3ff74:	f7e1 fd2e 	bl	219d4 <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   3ff78:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   3ff7a:	b383      	cbz	r3, 3ffde <mqtt_connect+0x78>
   3ff7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   3ff7e:	b373      	cbz	r3, 3ffde <mqtt_connect+0x78>
	err_code = mqtt_transport_connect(client);
   3ff80:	4620      	mov	r0, r4
   3ff82:	f7e1 fcd1 	bl	21928 <mqtt_transport_connect>
	if (err_code < 0) {
   3ff86:	1e05      	subs	r5, r0, #0
   3ff88:	db23      	blt.n	3ffd2 <mqtt_connect+0x6c>
	tx_buf_init(client, &packet);
   3ff8a:	4669      	mov	r1, sp
   3ff8c:	4620      	mov	r0, r4
   3ff8e:	f7ff ff57 	bl	3fe40 <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3ff92:	69a3      	ldr	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   3ff94:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3ff96:	f043 0302 	orr.w	r3, r3, #2
   3ff9a:	61a3      	str	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   3ff9c:	4620      	mov	r0, r4
   3ff9e:	f7e1 faff 	bl	215a0 <connect_request_encode>
	if (err_code < 0) {
   3ffa2:	1e05      	subs	r5, r0, #0
   3ffa4:	db11      	blt.n	3ffca <mqtt_connect+0x64>
	err_code = mqtt_transport_write(client, packet.cur,
   3ffa6:	e9dd 1200 	ldrd	r1, r2, [sp]
   3ffaa:	4620      	mov	r0, r4
   3ffac:	1a52      	subs	r2, r2, r1
   3ffae:	f7e1 fcc3 	bl	21938 <mqtt_transport_write>
	if (err_code < 0) {
   3ffb2:	1e05      	subs	r5, r0, #0
   3ffb4:	db09      	blt.n	3ffca <mqtt_connect+0x64>
	return z_impl_k_uptime_get();
   3ffb6:	f001 fc76 	bl	418a6 <z_impl_k_uptime_get>
	return 0;
   3ffba:	2500      	movs	r5, #0
   3ffbc:	6160      	str	r0, [r4, #20]
	mqtt_mutex_unlock(client);
   3ffbe:	4620      	mov	r0, r4
   3ffc0:	f7e1 fcdc 	bl	2197c <mqtt_mutex_unlock>
}
   3ffc4:	4628      	mov	r0, r5
   3ffc6:	b003      	add	sp, #12
   3ffc8:	bd30      	pop	{r4, r5, pc}
	client_disconnect(client, err_code);
   3ffca:	4629      	mov	r1, r5
   3ffcc:	4620      	mov	r0, r4
   3ffce:	f7ff ff56 	bl	3fe7e <client_disconnect>
	MQTT_STATE_INIT(client);
   3ffd2:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   3ffd4:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   3ffd8:	e9c4 3307 	strd	r3, r3, [r4, #28]
   3ffdc:	e7ef      	b.n	3ffbe <mqtt_connect+0x58>
		err_code = -ENOMEM;
   3ffde:	f06f 050b 	mvn.w	r5, #11
   3ffe2:	e7f6      	b.n	3ffd2 <mqtt_connect+0x6c>
	NULL_PARAM_CHECK(client);
   3ffe4:	f06f 0515 	mvn.w	r5, #21
   3ffe8:	e7ec      	b.n	3ffc4 <mqtt_connect+0x5e>

0003ffea <mqtt_publish>:
{
   3ffea:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3ffec:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   3ffee:	4605      	mov	r5, r0
   3fff0:	b330      	cbz	r0, 40040 <CONFIG_FLASH_LOAD_OFFSET+0x40>
	NULL_PARAM_CHECK(param);
   3fff2:	b329      	cbz	r1, 40040 <CONFIG_FLASH_LOAD_OFFSET+0x40>
	mqtt_mutex_lock(client);
   3fff4:	f7e1 fcee 	bl	219d4 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3fff8:	4669      	mov	r1, sp
   3fffa:	4628      	mov	r0, r5
   3fffc:	f7ff ff20 	bl	3fe40 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   40000:	69ab      	ldr	r3, [r5, #24]
   40002:	075b      	lsls	r3, r3, #29
   40004:	d519      	bpl.n	4003a <CONFIG_FLASH_LOAD_OFFSET+0x3a>
	err_code = publish_encode(param, &packet);
   40006:	4669      	mov	r1, sp
   40008:	4630      	mov	r0, r6
   4000a:	f7ff fd8e 	bl	3fb2a <publish_encode>
	if (err_code < 0) {
   4000e:	1e04      	subs	r4, r0, #0
   40010:	db0d      	blt.n	4002e <CONFIG_FLASH_LOAD_OFFSET+0x2e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   40012:	e9dd 1200 	ldrd	r1, r2, [sp]
   40016:	4628      	mov	r0, r5
   40018:	1a52      	subs	r2, r2, r1
   4001a:	f7ff ff4f 	bl	3febc <client_write>
	if (err_code < 0) {
   4001e:	1e04      	subs	r4, r0, #0
   40020:	db05      	blt.n	4002e <CONFIG_FLASH_LOAD_OFFSET+0x2e>
	err_code = client_write(client, param->message.payload.data,
   40022:	e9d6 1203 	ldrd	r1, r2, [r6, #12]
   40026:	4628      	mov	r0, r5
   40028:	f7ff ff48 	bl	3febc <client_write>
   4002c:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   4002e:	4628      	mov	r0, r5
   40030:	f7e1 fca4 	bl	2197c <mqtt_mutex_unlock>
}
   40034:	4620      	mov	r0, r4
   40036:	b002      	add	sp, #8
   40038:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTCONN;
   4003a:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   4003e:	e7f6      	b.n	4002e <CONFIG_FLASH_LOAD_OFFSET+0x2e>
	NULL_PARAM_CHECK(client);
   40040:	f06f 0415 	mvn.w	r4, #21
   40044:	e7f6      	b.n	40034 <CONFIG_FLASH_LOAD_OFFSET+0x34>

00040046 <mqtt_publish_qos1_ack>:
{
   40046:	b537      	push	{r0, r1, r2, r4, r5, lr}
   40048:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   4004a:	4605      	mov	r5, r0
   4004c:	b1f8      	cbz	r0, 4008e <mqtt_publish_qos1_ack+0x48>
	NULL_PARAM_CHECK(param);
   4004e:	b1f1      	cbz	r1, 4008e <mqtt_publish_qos1_ack+0x48>
	mqtt_mutex_lock(client);
   40050:	f7e1 fcc0 	bl	219d4 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   40054:	4669      	mov	r1, sp
   40056:	4628      	mov	r0, r5
   40058:	f7ff fef2 	bl	3fe40 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   4005c:	69ab      	ldr	r3, [r5, #24]
   4005e:	075b      	lsls	r3, r3, #29
   40060:	d512      	bpl.n	40088 <mqtt_publish_qos1_ack+0x42>
	err_code = publish_ack_encode(param, &packet);
   40062:	4620      	mov	r0, r4
   40064:	4669      	mov	r1, sp
   40066:	f7ff fd9c 	bl	3fba2 <publish_ack_encode>
	if (err_code < 0) {
   4006a:	1e04      	subs	r4, r0, #0
   4006c:	db06      	blt.n	4007c <mqtt_publish_qos1_ack+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   4006e:	e9dd 1200 	ldrd	r1, r2, [sp]
   40072:	4628      	mov	r0, r5
   40074:	1a52      	subs	r2, r2, r1
   40076:	f7ff ff21 	bl	3febc <client_write>
   4007a:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   4007c:	4628      	mov	r0, r5
   4007e:	f7e1 fc7d 	bl	2197c <mqtt_mutex_unlock>
}
   40082:	4620      	mov	r0, r4
   40084:	b003      	add	sp, #12
   40086:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   40088:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   4008c:	e7f6      	b.n	4007c <mqtt_publish_qos1_ack+0x36>
	NULL_PARAM_CHECK(client);
   4008e:	f06f 0415 	mvn.w	r4, #21
   40092:	e7f6      	b.n	40082 <mqtt_publish_qos1_ack+0x3c>

00040094 <mqtt_disconnect>:
{
   40094:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   40096:	4604      	mov	r4, r0
   40098:	b300      	cbz	r0, 400dc <mqtt_disconnect+0x48>
	mqtt_mutex_lock(client);
   4009a:	f7e1 fc9b 	bl	219d4 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   4009e:	4669      	mov	r1, sp
   400a0:	4620      	mov	r0, r4
   400a2:	f7ff fecd 	bl	3fe40 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   400a6:	69a3      	ldr	r3, [r4, #24]
   400a8:	075b      	lsls	r3, r3, #29
   400aa:	d514      	bpl.n	400d6 <mqtt_disconnect+0x42>
	err_code = disconnect_encode(&packet);
   400ac:	4668      	mov	r0, sp
   400ae:	f7e1 faf7 	bl	216a0 <disconnect_encode>
	if (err_code < 0) {
   400b2:	1e05      	subs	r5, r0, #0
   400b4:	db09      	blt.n	400ca <mqtt_disconnect+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   400b6:	e9dd 1200 	ldrd	r1, r2, [sp]
   400ba:	4620      	mov	r0, r4
   400bc:	1a52      	subs	r2, r2, r1
   400be:	f7ff fefd 	bl	3febc <client_write>
	if (err_code < 0) {
   400c2:	1e05      	subs	r5, r0, #0
   400c4:	db01      	blt.n	400ca <mqtt_disconnect+0x36>
	MQTT_SET_STATE_EXCLUSIVE(client, MQTT_STATE_DISCONNECTING);
   400c6:	2308      	movs	r3, #8
   400c8:	61a3      	str	r3, [r4, #24]
	mqtt_mutex_unlock(client);
   400ca:	4620      	mov	r0, r4
   400cc:	f7e1 fc56 	bl	2197c <mqtt_mutex_unlock>
}
   400d0:	4628      	mov	r0, r5
   400d2:	b003      	add	sp, #12
   400d4:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   400d6:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   400da:	e7f6      	b.n	400ca <mqtt_disconnect+0x36>
	NULL_PARAM_CHECK(client);
   400dc:	f06f 0515 	mvn.w	r5, #21
   400e0:	e7f6      	b.n	400d0 <mqtt_disconnect+0x3c>

000400e2 <mqtt_subscribe>:
{
   400e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   400e4:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   400e6:	4605      	mov	r5, r0
   400e8:	b1f8      	cbz	r0, 4012a <mqtt_subscribe+0x48>
	NULL_PARAM_CHECK(param);
   400ea:	b1f1      	cbz	r1, 4012a <mqtt_subscribe+0x48>
	mqtt_mutex_lock(client);
   400ec:	f7e1 fc72 	bl	219d4 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   400f0:	4669      	mov	r1, sp
   400f2:	4628      	mov	r0, r5
   400f4:	f7ff fea4 	bl	3fe40 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   400f8:	69ab      	ldr	r3, [r5, #24]
   400fa:	075b      	lsls	r3, r3, #29
   400fc:	d512      	bpl.n	40124 <mqtt_subscribe+0x42>
	err_code = subscribe_encode(param, &packet);
   400fe:	4620      	mov	r0, r4
   40100:	4669      	mov	r1, sp
   40102:	f7ff fd53 	bl	3fbac <subscribe_encode>
	if (err_code < 0) {
   40106:	1e04      	subs	r4, r0, #0
   40108:	db06      	blt.n	40118 <mqtt_subscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   4010a:	e9dd 1200 	ldrd	r1, r2, [sp]
   4010e:	4628      	mov	r0, r5
   40110:	1a52      	subs	r2, r2, r1
   40112:	f7ff fed3 	bl	3febc <client_write>
   40116:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   40118:	4628      	mov	r0, r5
   4011a:	f7e1 fc2f 	bl	2197c <mqtt_mutex_unlock>
}
   4011e:	4620      	mov	r0, r4
   40120:	b003      	add	sp, #12
   40122:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   40124:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   40128:	e7f6      	b.n	40118 <mqtt_subscribe+0x36>
	NULL_PARAM_CHECK(client);
   4012a:	f06f 0415 	mvn.w	r4, #21
   4012e:	e7f6      	b.n	4011e <mqtt_subscribe+0x3c>

00040130 <mqtt_unsubscribe>:
{
   40130:	b537      	push	{r0, r1, r2, r4, r5, lr}
   40132:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   40134:	4605      	mov	r5, r0
   40136:	b1f8      	cbz	r0, 40178 <mqtt_unsubscribe+0x48>
	NULL_PARAM_CHECK(param);
   40138:	b1f1      	cbz	r1, 40178 <mqtt_unsubscribe+0x48>
	mqtt_mutex_lock(client);
   4013a:	f7e1 fc4b 	bl	219d4 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   4013e:	4669      	mov	r1, sp
   40140:	4628      	mov	r0, r5
   40142:	f7ff fe7d 	bl	3fe40 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   40146:	69ab      	ldr	r3, [r5, #24]
   40148:	075b      	lsls	r3, r3, #29
   4014a:	d512      	bpl.n	40172 <mqtt_unsubscribe+0x42>
	err_code = unsubscribe_encode(param, &packet);
   4014c:	4620      	mov	r0, r4
   4014e:	4669      	mov	r1, sp
   40150:	f7ff fd63 	bl	3fc1a <unsubscribe_encode>
	if (err_code < 0) {
   40154:	1e04      	subs	r4, r0, #0
   40156:	db06      	blt.n	40166 <mqtt_unsubscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   40158:	e9dd 1200 	ldrd	r1, r2, [sp]
   4015c:	4628      	mov	r0, r5
   4015e:	1a52      	subs	r2, r2, r1
   40160:	f7ff feac 	bl	3febc <client_write>
   40164:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   40166:	4628      	mov	r0, r5
   40168:	f7e1 fc08 	bl	2197c <mqtt_mutex_unlock>
}
   4016c:	4620      	mov	r0, r4
   4016e:	b003      	add	sp, #12
   40170:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   40172:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   40176:	e7f6      	b.n	40166 <mqtt_unsubscribe+0x36>
	NULL_PARAM_CHECK(client);
   40178:	f06f 0415 	mvn.w	r4, #21
   4017c:	e7f6      	b.n	4016c <mqtt_unsubscribe+0x3c>

0004017e <mqtt_ping>:
{
   4017e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   40180:	4605      	mov	r5, r0
   40182:	b1e8      	cbz	r0, 401c0 <mqtt_ping+0x42>
	mqtt_mutex_lock(client);
   40184:	f7e1 fc26 	bl	219d4 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   40188:	4669      	mov	r1, sp
   4018a:	4628      	mov	r0, r5
   4018c:	f7ff fe58 	bl	3fe40 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   40190:	69ab      	ldr	r3, [r5, #24]
   40192:	075b      	lsls	r3, r3, #29
   40194:	d511      	bpl.n	401ba <mqtt_ping+0x3c>
	err_code = ping_request_encode(&packet);
   40196:	4668      	mov	r0, sp
   40198:	f7e1 fa94 	bl	216c4 <ping_request_encode>
	if (err_code < 0) {
   4019c:	1e04      	subs	r4, r0, #0
   4019e:	db06      	blt.n	401ae <mqtt_ping+0x30>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   401a0:	e9dd 1200 	ldrd	r1, r2, [sp]
   401a4:	4628      	mov	r0, r5
   401a6:	1a52      	subs	r2, r2, r1
   401a8:	f7ff fe88 	bl	3febc <client_write>
   401ac:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   401ae:	4628      	mov	r0, r5
   401b0:	f7e1 fbe4 	bl	2197c <mqtt_mutex_unlock>
}
   401b4:	4620      	mov	r0, r4
   401b6:	b003      	add	sp, #12
   401b8:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   401ba:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   401be:	e7f6      	b.n	401ae <mqtt_ping+0x30>
	NULL_PARAM_CHECK(client);
   401c0:	f06f 0415 	mvn.w	r4, #21
   401c4:	e7f6      	b.n	401b4 <mqtt_ping+0x36>

000401c6 <mqtt_live>:
{
   401c6:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   401c8:	4604      	mov	r4, r0
   401ca:	b300      	cbz	r0, 4020e <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   401cc:	f7e1 fc02 	bl	219d4 <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_DISCONNECTING)) {
   401d0:	69a3      	ldr	r3, [r4, #24]
   401d2:	071b      	lsls	r3, r3, #28
   401d4:	d508      	bpl.n	401e8 <mqtt_live+0x22>
		client_disconnect(client, 0);
   401d6:	2100      	movs	r1, #0
   401d8:	4620      	mov	r0, r4
   401da:	f7ff fe50 	bl	3fe7e <client_disconnect>
	mqtt_mutex_unlock(client);
   401de:	4620      	mov	r0, r4
   401e0:	f7e1 fbcc 	bl	2197c <mqtt_mutex_unlock>
	return 0;
   401e4:	2000      	movs	r0, #0
}
   401e6:	bd38      	pop	{r3, r4, r5, pc}
		elapsed_time = mqtt_elapsed_time_in_ms_get(
   401e8:	6965      	ldr	r5, [r4, #20]
   401ea:	f001 fb5c 	bl	418a6 <z_impl_k_uptime_get>
		if ((client->keepalive > 0) &&
   401ee:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
 *
 * @retval Time elapsed since last_activity time.
 */
static inline u32_t mqtt_elapsed_time_in_ms_get(u32_t last_activity)
{
	s32_t diff = k_uptime_get_32() - last_activity;
   401f2:	1b40      	subs	r0, r0, r5

	if (diff < 0) {
		return 0;
   401f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   401f8:	2a00      	cmp	r2, #0
   401fa:	d0f0      	beq.n	401de <mqtt_live+0x18>
		    (elapsed_time >= (client->keepalive * 1000))) {
   401fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   40200:	4353      	muls	r3, r2
		if ((client->keepalive > 0) &&
   40202:	4283      	cmp	r3, r0
   40204:	d8eb      	bhi.n	401de <mqtt_live+0x18>
			(void)mqtt_ping(client);
   40206:	4620      	mov	r0, r4
   40208:	f7ff ffb9 	bl	4017e <mqtt_ping>
   4020c:	e7e7      	b.n	401de <mqtt_live+0x18>
	NULL_PARAM_CHECK(client);
   4020e:	f06f 0015 	mvn.w	r0, #21
   40212:	e7e8      	b.n	401e6 <mqtt_live+0x20>

00040214 <mqtt_input>:
{
   40214:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   40216:	4605      	mov	r5, r0
   40218:	b310      	cbz	r0, 40260 <mqtt_input+0x4c>
	mqtt_mutex_lock(client);
   4021a:	f7e1 fbdb 	bl	219d4 <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_DISCONNECTING)) {
   4021e:	69ab      	ldr	r3, [r5, #24]
   40220:	071a      	lsls	r2, r3, #28
   40222:	d509      	bpl.n	40238 <mqtt_input+0x24>
		client_disconnect(client, 0);
   40224:	2100      	movs	r1, #0
   40226:	4628      	mov	r0, r5
   40228:	f7ff fe29 	bl	3fe7e <client_disconnect>
	int err_code = 0;
   4022c:	2400      	movs	r4, #0
	mqtt_mutex_unlock(client);
   4022e:	4628      	mov	r0, r5
   40230:	f7e1 fba4 	bl	2197c <mqtt_mutex_unlock>
}
   40234:	4620      	mov	r0, r4
   40236:	bd38      	pop	{r3, r4, r5, pc}
	} else if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   40238:	079b      	lsls	r3, r3, #30
   4023a:	d50b      	bpl.n	40254 <mqtt_input+0x40>
	if (client->internal.remaining_payload > 0) {
   4023c:	6a2b      	ldr	r3, [r5, #32]
   4023e:	b963      	cbnz	r3, 4025a <mqtt_input+0x46>
	err_code = mqtt_handle_rx(client);
   40240:	4628      	mov	r0, r5
   40242:	f7ff fd38 	bl	3fcb6 <mqtt_handle_rx>
	if (err_code < 0) {
   40246:	1e04      	subs	r4, r0, #0
   40248:	daf1      	bge.n	4022e <mqtt_input+0x1a>
		client_disconnect(client, err_code);
   4024a:	4621      	mov	r1, r4
   4024c:	4628      	mov	r0, r5
   4024e:	f7ff fe16 	bl	3fe7e <client_disconnect>
   40252:	e7ec      	b.n	4022e <mqtt_input+0x1a>
		err_code = -EACCES;
   40254:	f06f 040c 	mvn.w	r4, #12
   40258:	e7e9      	b.n	4022e <mqtt_input+0x1a>
		return -EBUSY;
   4025a:	f06f 040f 	mvn.w	r4, #15
   4025e:	e7e6      	b.n	4022e <mqtt_input+0x1a>
	NULL_PARAM_CHECK(client);
   40260:	f06f 0415 	mvn.w	r4, #21
   40264:	e7e6      	b.n	40234 <mqtt_input+0x20>

00040266 <mqtt_read_publish_payload_blocking>:
}

int mqtt_read_publish_payload_blocking(struct mqtt_client *client, void *buffer,
				       size_t length)
{
	return read_publish_payload(client, buffer, length, true);
   40266:	2301      	movs	r3, #1
   40268:	f7ff be39 	b.w	3fede <read_publish_payload>

0004026c <mqtt_readall_publish_payload>:
}

int mqtt_readall_publish_payload(struct mqtt_client *client, u8_t *buffer,
				 size_t length)
{
   4026c:	b570      	push	{r4, r5, r6, lr}
   4026e:	4606      	mov	r6, r0
   40270:	460c      	mov	r4, r1
	u8_t *end = buffer + length;
   40272:	188d      	adds	r5, r1, r2

	while (buffer < end) {
   40274:	42ac      	cmp	r4, r5
   40276:	d301      	bcc.n	4027c <mqtt_readall_publish_payload+0x10>
		}

		buffer += ret;
	}

	return 0;
   40278:	2000      	movs	r0, #0
}
   4027a:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buffer,
   4027c:	1b2a      	subs	r2, r5, r4
   4027e:	4621      	mov	r1, r4
   40280:	4630      	mov	r0, r6
   40282:	f7ff fff0 	bl	40266 <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   40286:	2800      	cmp	r0, #0
   40288:	dbf7      	blt.n	4027a <mqtt_readall_publish_payload+0xe>
		} else if (ret == 0) {
   4028a:	d001      	beq.n	40290 <mqtt_readall_publish_payload+0x24>
		buffer += ret;
   4028c:	4404      	add	r4, r0
   4028e:	e7f1      	b.n	40274 <mqtt_readall_publish_payload+0x8>
			return -EIO;
   40290:	f06f 0004 	mvn.w	r0, #4
   40294:	e7f1      	b.n	4027a <mqtt_readall_publish_payload+0xe>

00040296 <mqtt_client_tls_disconnect>:

int mqtt_client_tls_disconnect(struct mqtt_client *client)
{
   40296:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tls.sock);
	ret = close(client->transport.tls.sock);
   40298:	6a80      	ldr	r0, [r0, #40]	; 0x28
   4029a:	f7e1 fbbb 	bl	21a14 <close>
	if (ret < 0) {
   4029e:	2800      	cmp	r0, #0
   402a0:	da04      	bge.n	402ac <mqtt_client_tls_disconnect+0x16>
		return -errno;
   402a2:	f7ff fb05 	bl	3f8b0 <__errno>
   402a6:	6800      	ldr	r0, [r0, #0]
   402a8:	4240      	negs	r0, r0
	}

	return 0;
}
   402aa:	bd08      	pop	{r3, pc}
	return 0;
   402ac:	2000      	movs	r0, #0
   402ae:	e7fc      	b.n	402aa <mqtt_client_tls_disconnect+0x14>

000402b0 <gpio_nrfx_write>:
{
   402b0:	b510      	push	{r4, lr}
	return port->config->config_info;
   402b2:	6804      	ldr	r4, [r0, #0]
   402b4:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   402b6:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   402b8:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   402ba:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   402bc:	69c0      	ldr	r0, [r0, #28]
   402be:	d103      	bne.n	402c8 <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   402c0:	4058      	eors	r0, r3
    p_reg->OUT = value;
   402c2:	6060      	str	r0, [r4, #4]
}
   402c4:	2000      	movs	r0, #0
   402c6:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   402c8:	3300      	adds	r3, #0
   402ca:	f04f 0101 	mov.w	r1, #1
   402ce:	bf18      	it	ne
   402d0:	2301      	movne	r3, #1
   402d2:	40d0      	lsrs	r0, r2
   402d4:	f000 0001 	and.w	r0, r0, #1
   402d8:	4091      	lsls	r1, r2
   402da:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   402dc:	bf14      	ite	ne
   402de:	60a1      	strne	r1, [r4, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   402e0:	60e1      	streq	r1, [r4, #12]
   402e2:	e7ef      	b.n	402c4 <gpio_nrfx_write+0x14>

000402e4 <gpio_nrfx_read>:
{
   402e4:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   402e6:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   402e8:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   402ea:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   402ec:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   402ee:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   402f0:	2901      	cmp	r1, #1
    return p_reg->DIR;
   402f2:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   402f4:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   402f6:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   402f8:	ea80 0004 	eor.w	r0, r0, r4
   402fc:	ea84 0405 	eor.w	r4, r4, r5
   40300:	ea04 0406 	and.w	r4, r4, r6
   40304:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   40308:	bf1c      	itt	ne
   4030a:	40d0      	lsrne	r0, r2
   4030c:	f000 0001 	andne.w	r0, r0, #1
   40310:	6018      	str	r0, [r3, #0]
}
   40312:	2000      	movs	r0, #0
   40314:	bd70      	pop	{r4, r5, r6, pc}

00040316 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   40316:	2901      	cmp	r1, #1
{
   40318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   4031c:	bf18      	it	ne
   4031e:	b2d4      	uxtbne	r4, r2
{
   40320:	4606      	mov	r6, r0
		to_pin   = pin;
   40322:	bf12      	itee	ne
   40324:	4625      	movne	r5, r4
		to_pin   = 31U;
   40326:	251f      	moveq	r5, #31
		from_pin = 0U;
   40328:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   4032a:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   4032e:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   40330:	42ac      	cmp	r4, r5
   40332:	d902      	bls.n	4033a <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   40334:	2000      	movs	r0, #0
}
   40336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   4033a:	68fb      	ldr	r3, [r7, #12]
   4033c:	fa08 f204 	lsl.w	r2, r8, r4
   40340:	ea23 0302 	bic.w	r3, r3, r2
   40344:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   40346:	4621      	mov	r1, r4
   40348:	4630      	mov	r0, r6
   4034a:	f7e1 fdd7 	bl	21efc <gpiote_pin_int_cfg>
		if (res != 0) {
   4034e:	2800      	cmp	r0, #0
   40350:	d1f1      	bne.n	40336 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   40352:	3401      	adds	r4, #1
   40354:	b2e4      	uxtb	r4, r4
   40356:	e7eb      	b.n	40330 <gpio_nrfx_pin_disable_callback+0x1a>

00040358 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   40358:	2901      	cmp	r1, #1
{
   4035a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   4035e:	bf18      	it	ne
   40360:	b2d4      	uxtbne	r4, r2
{
   40362:	4606      	mov	r6, r0
		to_pin   = pin;
   40364:	bf12      	itee	ne
   40366:	4625      	movne	r5, r4
		to_pin   = 31U;
   40368:	251f      	moveq	r5, #31
		from_pin = 0U;
   4036a:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   4036c:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   40370:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   40372:	42ac      	cmp	r4, r5
   40374:	d902      	bls.n	4037c <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   40376:	2000      	movs	r0, #0
}
   40378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   4037c:	68fb      	ldr	r3, [r7, #12]
   4037e:	fa08 f204 	lsl.w	r2, r8, r4
   40382:	4313      	orrs	r3, r2
   40384:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   40386:	4621      	mov	r1, r4
   40388:	4630      	mov	r0, r6
   4038a:	f7e1 fdb7 	bl	21efc <gpiote_pin_int_cfg>
		if (res != 0) {
   4038e:	2800      	cmp	r0, #0
   40390:	d1f2      	bne.n	40378 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   40392:	3401      	adds	r4, #1
   40394:	b2e4      	uxtb	r4, r4
   40396:	e7ec      	b.n	40372 <gpio_nrfx_pin_enable_callback+0x1a>

00040398 <is_regular_addr_valid>:
{
   40398:	b538      	push	{r3, r4, r5, lr}
   4039a:	4604      	mov	r4, r0
   4039c:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   4039e:	f001 f969 	bl	41674 <nrfx_nvmc_flash_size_get>
	if (addr >= DT_FLASH_BASE_ADDRESS + flash_size ||
   403a2:	4284      	cmp	r4, r0
   403a4:	d209      	bcs.n	403ba <is_regular_addr_valid+0x22>
   403a6:	2c00      	cmp	r4, #0
   403a8:	db07      	blt.n	403ba <is_regular_addr_valid+0x22>
	    addr < DT_FLASH_BASE_ADDRESS ||
   403aa:	42a8      	cmp	r0, r5
   403ac:	d305      	bcc.n	403ba <is_regular_addr_valid+0x22>
	    (addr - DT_FLASH_BASE_ADDRESS) + len > flash_size) {
   403ae:	442c      	add	r4, r5
	    len > flash_size ||
   403b0:	4284      	cmp	r4, r0
   403b2:	bf8c      	ite	hi
   403b4:	2000      	movhi	r0, #0
   403b6:	2001      	movls	r0, #1
}
   403b8:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   403ba:	2000      	movs	r0, #0
   403bc:	e7fc      	b.n	403b8 <is_regular_addr_valid+0x20>

000403be <flash_nrf_read>:
{
   403be:	b570      	push	{r4, r5, r6, lr}
   403c0:	460d      	mov	r5, r1
	return is_regular_addr_valid(addr, len) ||
   403c2:	4619      	mov	r1, r3
   403c4:	4628      	mov	r0, r5
{
   403c6:	4616      	mov	r6, r2
   403c8:	461c      	mov	r4, r3
	return is_regular_addr_valid(addr, len) ||
   403ca:	f7ff ffe5 	bl	40398 <is_regular_addr_valid>
	if (!is_addr_valid(addr, len)) {
   403ce:	b170      	cbz	r0, 403ee <flash_nrf_read+0x30>
	if (!len) {
   403d0:	b184      	cbz	r4, 403f4 <flash_nrf_read+0x36>
	if (addr < PM_APP_ADDRESS) {
   403d2:	f5b5 3fc1 	cmp.w	r5, #98816	; 0x18200
		return spm_request_read(data, addr, len);
   403d6:	4622      	mov	r2, r4
   403d8:	4629      	mov	r1, r5
   403da:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   403dc:	da03      	bge.n	403e6 <flash_nrf_read+0x28>
}
   403de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return spm_request_read(data, addr, len);
   403e2:	f7d7 bdfd 	b.w	17fe0 <spm_request_read>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   403e6:	f001 fae4 	bl	419b2 <memcpy>
   403ea:	2000      	movs	r0, #0
}
   403ec:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   403ee:	f06f 0015 	mvn.w	r0, #21
   403f2:	e7fb      	b.n	403ec <flash_nrf_read+0x2e>
		return 0;
   403f4:	4620      	mov	r0, r4
   403f6:	e7f9      	b.n	403ec <flash_nrf_read+0x2e>

000403f8 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   403f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   403fc:	461d      	mov	r5, r3
	off_t group_offs = 0;
	u32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   403fe:	6843      	ldr	r3, [r0, #4]
{
   40400:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   40402:	691b      	ldr	r3, [r3, #16]
   40404:	4669      	mov	r1, sp
{
   40406:	4616      	mov	r6, r2
	api->page_layout(dev, &layout, &layout_size);
   40408:	aa01      	add	r2, sp, #4
   4040a:	4798      	blx	r3

	while (layout_size--) {
   4040c:	e9dd 1200 	ldrd	r1, r2, [sp]
   40410:	2300      	movs	r3, #0
	off_t end = 0;
   40412:	4618      	mov	r0, r3
	off_t group_offs = 0;
   40414:	469e      	mov	lr, r3
	size_t page_count = 0;
   40416:	469c      	mov	ip, r3
   40418:	3a01      	subs	r2, #1
	while (layout_size--) {
   4041a:	1c57      	adds	r7, r2, #1
   4041c:	d102      	bne.n	40424 <flash_get_page_info+0x2c>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   4041e:	f06f 0015 	mvn.w	r0, #21
   40422:	e01a      	b.n	4045a <flash_get_page_info+0x62>
		if (use_addr) {
   40424:	f8d1 8000 	ldr.w	r8, [r1]
   40428:	b1d6      	cbz	r6, 40460 <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   4042a:	684f      	ldr	r7, [r1, #4]
   4042c:	fb07 0008 	mla	r0, r7, r8, r0
		if (offs < end) {
   40430:	42a0      	cmp	r0, r4
   40432:	f102 37ff 	add.w	r7, r2, #4294967295	; 0xffffffff
   40436:	dd18      	ble.n	4046a <flash_get_page_info+0x72>
   40438:	9201      	str	r2, [sp, #4]
   4043a:	b103      	cbz	r3, 4043e <flash_get_page_info+0x46>
   4043c:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   4043e:	9b00      	ldr	r3, [sp, #0]
   40440:	685b      	ldr	r3, [r3, #4]
   40442:	606b      	str	r3, [r5, #4]
			if (use_addr) {
   40444:	b176      	cbz	r6, 40464 <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   40446:	eba4 040e 	sub.w	r4, r4, lr
   4044a:	fbb4 f4f3 	udiv	r4, r4, r3
			return 0;
   4044e:	2000      	movs	r0, #0
			info->start_offset = group_offs +
   40450:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   40454:	4464      	add	r4, ip
			info->start_offset = group_offs +
   40456:	602b      	str	r3, [r5, #0]
			info->index = page_count + num_in_group;
   40458:	60ac      	str	r4, [r5, #8]
}
   4045a:	b002      	add	sp, #8
   4045c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   40460:	4440      	add	r0, r8
   40462:	e7e5      	b.n	40430 <flash_get_page_info+0x38>
				num_in_group = offs - page_count;
   40464:	eba4 040c 	sub.w	r4, r4, ip
   40468:	e7f1      	b.n	4044e <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   4046a:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   4046c:	44c4      	add	ip, r8
		group_offs += layout->pages_count * layout->pages_size;
   4046e:	fb03 ee08 	mla	lr, r3, r8, lr
		layout++;
   40472:	3108      	adds	r1, #8
   40474:	2301      	movs	r3, #1
   40476:	463a      	mov	r2, r7
   40478:	e7cf      	b.n	4041a <flash_get_page_info+0x22>

0004047a <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(struct device *dev, off_t offs,
				      struct flash_pages_info *info)
{
	return flash_get_page_info(dev, offs, true, info);
   4047a:	4613      	mov	r3, r2
   4047c:	2201      	movs	r2, #1
   4047e:	f7ff bfbb 	b.w	403f8 <flash_get_page_info>

00040482 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   40482:	6883      	ldr	r3, [r0, #8]
   40484:	689b      	ldr	r3, [r3, #8]
   40486:	7b9a      	ldrb	r2, [r3, #14]
   40488:	b172      	cbz	r2, 404a8 <uarte_nrfx_isr_int+0x26>
	return dev->config->config_info;
   4048a:	6802      	ldr	r2, [r0, #0]
	return config->uarte_regs;
   4048c:	6892      	ldr	r2, [r2, #8]
   4048e:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   40490:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (data->int_driven->disable_tx_irq &&
   40494:	b141      	cbz	r1, 404a8 <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   40496:	f44f 7180 	mov.w	r1, #256	; 0x100
   4049a:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4049e:	2101      	movs	r1, #1
   404a0:	60d1      	str	r1, [r2, #12]
		data->int_driven->disable_tx_irq = false;
   404a2:	2200      	movs	r2, #0
   404a4:	739a      	strb	r2, [r3, #14]
		return;
   404a6:	4770      	bx	lr
	if (data->int_driven->cb) {
   404a8:	681a      	ldr	r2, [r3, #0]
   404aa:	b10a      	cbz	r2, 404b0 <uarte_nrfx_isr_int+0x2e>
		data->int_driven->cb(data->int_driven->cb_data);
   404ac:	6858      	ldr	r0, [r3, #4]
   404ae:	4710      	bx	r2
}
   404b0:	4770      	bx	lr

000404b2 <uarte_nrfx_config_get>:
{
   404b2:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   404b4:	6882      	ldr	r2, [r0, #8]
   404b6:	e892 0003 	ldmia.w	r2, {r0, r1}
   404ba:	e883 0003 	stmia.w	r3, {r0, r1}
}
   404be:	2000      	movs	r0, #0
   404c0:	4770      	bx	lr

000404c2 <uarte_nrfx_err_check>:
	return dev->config->config_info;
   404c2:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   404c4:	689b      	ldr	r3, [r3, #8]
   404c6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   404c8:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   404cc:	b118      	cbz	r0, 404d6 <uarte_nrfx_err_check+0x14>
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   404ce:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   404d2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   404d6:	4770      	bx	lr

000404d8 <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   404d8:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   404da:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   404dc:	689b      	ldr	r3, [r3, #8]
   404de:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   404e0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   404e4:	b138      	cbz	r0, 404f6 <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   404e6:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   404e8:	2000      	movs	r0, #0
   404ea:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   404ec:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   404ee:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   404f2:	601a      	str	r2, [r3, #0]
	return 0;
   404f4:	4770      	bx	lr
		return -1;
   404f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   404fa:	4770      	bx	lr

000404fc <uarte_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   404fc:	2200      	movs	r2, #0
	return dev->config->config_info;
   404fe:	6803      	ldr	r3, [r0, #0]
{
   40500:	b082      	sub	sp, #8
	return config->uarte_regs;
   40502:	689b      	ldr	r3, [r3, #8]
{
   40504:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   40508:	681b      	ldr	r3, [r3, #0]
   4050a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   4050e:	f10d 0207 	add.w	r2, sp, #7
   40512:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   40516:	2201      	movs	r2, #1
   40518:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4051c:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4051e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   40522:	2900      	cmp	r1, #0
   40524:	d0fb      	beq.n	4051e <uarte_nrfx_poll_out+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   40526:	60da      	str	r2, [r3, #12]
}
   40528:	b002      	add	sp, #8
   4052a:	4770      	bx	lr

0004052c <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   4052c:	6803      	ldr	r3, [r0, #0]
{
   4052e:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   40530:	689b      	ldr	r3, [r3, #8]
   40532:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   40534:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   40538:	b1bb      	cbz	r3, 4056a <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   4053a:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   4053c:	68ab      	ldr	r3, [r5, #8]
   4053e:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   40540:	2300      	movs	r3, #0
   40542:	4290      	cmp	r0, r2
   40544:	bfa8      	it	ge
   40546:	4610      	movge	r0, r2
   40548:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   4054c:	68aa      	ldr	r2, [r5, #8]
   4054e:	4283      	cmp	r3, r0
   40550:	6892      	ldr	r2, [r2, #8]
   40552:	db06      	blt.n	40562 <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   40554:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   40556:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   4055a:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4055e:	60a3      	str	r3, [r4, #8]
}
   40560:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   40562:	5cce      	ldrb	r6, [r1, r3]
   40564:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   40566:	3301      	adds	r3, #1
   40568:	e7f0      	b.n	4054c <uarte_nrfx_fifo_fill+0x20>
		return 0;
   4056a:	4618      	mov	r0, r3
   4056c:	e7f8      	b.n	40560 <uarte_nrfx_fifo_fill+0x34>

0004056e <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   4056e:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   40570:	689b      	ldr	r3, [r3, #8]
   40572:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   40574:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   40578:	b143      	cbz	r3, 4058c <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   4057a:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4057c:	2000      	movs	r0, #0
   4057e:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   40582:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   40584:	7b1b      	ldrb	r3, [r3, #12]
   40586:	700b      	strb	r3, [r1, #0]
   40588:	6010      	str	r0, [r2, #0]
   4058a:	4770      	bx	lr
	int num_rx = 0;
   4058c:	4618      	mov	r0, r3
}
   4058e:	4770      	bx	lr

00040590 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   40590:	2100      	movs	r1, #0
	return dev->config->config_info;
   40592:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   40594:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   40596:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   40598:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   4059a:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   4059c:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   4059e:	f44f 7280 	mov.w	r2, #256	; 0x100
   405a2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   405a6:	4770      	bx	lr

000405a8 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   405a8:	2201      	movs	r2, #1
   405aa:	6883      	ldr	r3, [r0, #8]
   405ac:	689b      	ldr	r3, [r3, #8]
   405ae:	739a      	strb	r2, [r3, #14]
}
   405b0:	4770      	bx	lr

000405b2 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   405b2:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   405b4:	689b      	ldr	r3, [r3, #8]
   405b6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   405b8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   405bc:	b118      	cbz	r0, 405c6 <uarte_nrfx_irq_tx_ready_complete+0x14>
    return p_reg->INTENSET & mask;
   405be:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   405c2:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   405c6:	4770      	bx	lr

000405c8 <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   405c8:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   405ca:	689b      	ldr	r3, [r3, #8]
   405cc:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   405ce:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   405d2:	3000      	adds	r0, #0
   405d4:	bf18      	it	ne
   405d6:	2001      	movne	r0, #1
   405d8:	4770      	bx	lr

000405da <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   405da:	2210      	movs	r2, #16
	return dev->config->config_info;
   405dc:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   405de:	689b      	ldr	r3, [r3, #8]
   405e0:	681b      	ldr	r3, [r3, #0]
   405e2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   405e6:	4770      	bx	lr

000405e8 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   405e8:	2210      	movs	r2, #16
	return dev->config->config_info;
   405ea:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   405ec:	689b      	ldr	r3, [r3, #8]
   405ee:	681b      	ldr	r3, [r3, #0]
   405f0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   405f4:	4770      	bx	lr

000405f6 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   405f6:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   405fa:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   405fc:	689b      	ldr	r3, [r3, #8]
   405fe:	681b      	ldr	r3, [r3, #0]
   40600:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   40604:	4770      	bx	lr

00040606 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   40606:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   4060a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   4060c:	689b      	ldr	r3, [r3, #8]
   4060e:	681b      	ldr	r3, [r3, #0]
   40610:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   40614:	4770      	bx	lr

00040616 <uarte_nrfx_irq_update>:
}
   40616:	2001      	movs	r0, #1
   40618:	4770      	bx	lr

0004061a <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   4061a:	6883      	ldr	r3, [r0, #8]
   4061c:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   4061e:	e9c3 1200 	strd	r1, r2, [r3]
}
   40622:	4770      	bx	lr

00040624 <uarte_nrfx_irq_is_pending>:
{
   40624:	b508      	push	{r3, lr}
	return dev->config->config_info;
   40626:	6803      	ldr	r3, [r0, #0]
{
   40628:	4602      	mov	r2, r0
	return config->uarte_regs;
   4062a:	689b      	ldr	r3, [r3, #8]
   4062c:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   4062e:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   40632:	05db      	lsls	r3, r3, #23
   40634:	d405      	bmi.n	40642 <uarte_nrfx_irq_is_pending+0x1e>
   40636:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   4063a:	f010 0010 	ands.w	r0, r0, #16
   4063e:	d106      	bne.n	4064e <uarte_nrfx_irq_is_pending+0x2a>
}
   40640:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   40642:	f7ff ffb6 	bl	405b2 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   40646:	2800      	cmp	r0, #0
   40648:	d0f5      	beq.n	40636 <uarte_nrfx_irq_is_pending+0x12>
		||
   4064a:	2001      	movs	r0, #1
   4064c:	e7f8      	b.n	40640 <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   4064e:	4610      	mov	r0, r2
   40650:	f7ff ffba 	bl	405c8 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   40654:	3000      	adds	r0, #0
   40656:	bf18      	it	ne
   40658:	2001      	movne	r0, #1
   4065a:	e7f1      	b.n	40640 <uarte_nrfx_irq_is_pending+0x1c>

0004065c <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   4065c:	2000      	movs	r0, #0
   4065e:	4770      	bx	lr

00040660 <parse_hex4>:
    for (i = 0; i < 4; i++)
   40660:	2200      	movs	r2, #0
    unsigned int h = 0;
   40662:	4613      	mov	r3, r2
{
   40664:	b510      	push	{r4, lr}
        if ((input[i] >= '0') && (input[i] <= '9'))
   40666:	5c81      	ldrb	r1, [r0, r2]
   40668:	f1a1 0430 	sub.w	r4, r1, #48	; 0x30
   4066c:	2c09      	cmp	r4, #9
   4066e:	d80a      	bhi.n	40686 <parse_hex4+0x26>
            h += (unsigned int) input[i] - '0';
   40670:	3b30      	subs	r3, #48	; 0x30
        if (i < 3)
   40672:	2a03      	cmp	r2, #3
            h += (unsigned int) 10 + input[i] - 'a';
   40674:	440b      	add	r3, r1
    for (i = 0; i < 4; i++)
   40676:	f102 0201 	add.w	r2, r2, #1
            h = h << 4;
   4067a:	bf18      	it	ne
   4067c:	011b      	lslne	r3, r3, #4
    for (i = 0; i < 4; i++)
   4067e:	2a04      	cmp	r2, #4
   40680:	d1f1      	bne.n	40666 <parse_hex4+0x6>
}
   40682:	4618      	mov	r0, r3
   40684:	bd10      	pop	{r4, pc}
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
   40686:	f1a1 0441 	sub.w	r4, r1, #65	; 0x41
   4068a:	2c05      	cmp	r4, #5
   4068c:	d801      	bhi.n	40692 <parse_hex4+0x32>
            h += (unsigned int) 10 + input[i] - 'A';
   4068e:	3b37      	subs	r3, #55	; 0x37
   40690:	e7ef      	b.n	40672 <parse_hex4+0x12>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
   40692:	f1a1 0461 	sub.w	r4, r1, #97	; 0x61
   40696:	2c05      	cmp	r4, #5
   40698:	d801      	bhi.n	4069e <parse_hex4+0x3e>
            h += (unsigned int) 10 + input[i] - 'a';
   4069a:	3b57      	subs	r3, #87	; 0x57
   4069c:	e7e9      	b.n	40672 <parse_hex4+0x12>
            return 0;
   4069e:	2300      	movs	r3, #0
   406a0:	e7ef      	b.n	40682 <parse_hex4+0x22>

000406a2 <buffer_skip_whitespace>:
{
   406a2:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
   406a4:	b140      	cbz	r0, 406b8 <buffer_skip_whitespace+0x16>
   406a6:	6801      	ldr	r1, [r0, #0]
   406a8:	b171      	cbz	r1, 406c8 <buffer_skip_whitespace+0x26>
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   406aa:	6842      	ldr	r2, [r0, #4]
   406ac:	6883      	ldr	r3, [r0, #8]
   406ae:	4293      	cmp	r3, r2
   406b0:	d206      	bcs.n	406c0 <buffer_skip_whitespace+0x1e>
   406b2:	5ccc      	ldrb	r4, [r1, r3]
   406b4:	2c20      	cmp	r4, #32
   406b6:	d900      	bls.n	406ba <buffer_skip_whitespace+0x18>
}
   406b8:	bd10      	pop	{r4, pc}
       buffer->offset++;
   406ba:	3301      	adds	r3, #1
   406bc:	6083      	str	r3, [r0, #8]
   406be:	e7f5      	b.n	406ac <buffer_skip_whitespace+0xa>
    if (buffer->offset == buffer->length)
   406c0:	d1fa      	bne.n	406b8 <buffer_skip_whitespace+0x16>
        buffer->offset--;
   406c2:	3a01      	subs	r2, #1
   406c4:	6082      	str	r2, [r0, #8]
   406c6:	e7f7      	b.n	406b8 <buffer_skip_whitespace+0x16>
        return NULL;
   406c8:	4608      	mov	r0, r1
   406ca:	e7f5      	b.n	406b8 <buffer_skip_whitespace+0x16>

000406cc <update_offset>:
{
   406cc:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   406ce:	4604      	mov	r4, r0
   406d0:	b140      	cbz	r0, 406e4 <update_offset+0x18>
   406d2:	6803      	ldr	r3, [r0, #0]
   406d4:	b133      	cbz	r3, 406e4 <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   406d6:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   406d8:	4418      	add	r0, r3
   406da:	f7d9 fc03 	bl	19ee4 <strlen>
   406de:	68a3      	ldr	r3, [r4, #8]
   406e0:	4418      	add	r0, r3
   406e2:	60a0      	str	r0, [r4, #8]
}
   406e4:	bd10      	pop	{r4, pc}

000406e6 <add_item_to_array>:
    if ((item == NULL) || (array == NULL))
   406e6:	b161      	cbz	r1, 40702 <add_item_to_array+0x1c>
   406e8:	b160      	cbz	r0, 40704 <add_item_to_array+0x1e>
    child = array->child;
   406ea:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   406ec:	b91b      	cbnz	r3, 406f6 <add_item_to_array+0x10>
        array->child = item;
   406ee:	6081      	str	r1, [r0, #8]
    item->prev = prev;
   406f0:	2001      	movs	r0, #1
   406f2:	4770      	bx	lr
        while (child->next)
   406f4:	4613      	mov	r3, r2
   406f6:	681a      	ldr	r2, [r3, #0]
   406f8:	2a00      	cmp	r2, #0
   406fa:	d1fb      	bne.n	406f4 <add_item_to_array+0xe>
    prev->next = item;
   406fc:	6019      	str	r1, [r3, #0]
    item->prev = prev;
   406fe:	604b      	str	r3, [r1, #4]
   40700:	e7f6      	b.n	406f0 <add_item_to_array+0xa>
        return false;
   40702:	4608      	mov	r0, r1
}
   40704:	4770      	bx	lr

00040706 <cJSON_New_Item.isra.1>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   40706:	b510      	push	{r4, lr}
   40708:	4603      	mov	r3, r0
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   4070a:	2028      	movs	r0, #40	; 0x28
   4070c:	4798      	blx	r3
    if (node)
   4070e:	4604      	mov	r4, r0
   40710:	b118      	cbz	r0, 4071a <cJSON_New_Item.isra.1+0x14>
__ssp_bos_icheck3(memset, void *, int)
   40712:	2228      	movs	r2, #40	; 0x28
   40714:	2100      	movs	r1, #0
   40716:	f001 f96c 	bl	419f2 <memset>
}
   4071a:	4620      	mov	r0, r4
   4071c:	bd10      	pop	{r4, pc}

0004071e <ensure>:
{
   4071e:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   40720:	4604      	mov	r4, r0
   40722:	b1b8      	cbz	r0, 40754 <ensure+0x36>
   40724:	6805      	ldr	r5, [r0, #0]
   40726:	b165      	cbz	r5, 40742 <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   40728:	6843      	ldr	r3, [r0, #4]
   4072a:	b113      	cbz	r3, 40732 <ensure+0x14>
   4072c:	6882      	ldr	r2, [r0, #8]
   4072e:	4293      	cmp	r3, r2
   40730:	d910      	bls.n	40754 <ensure+0x36>
    if (needed > INT_MAX)
   40732:	2900      	cmp	r1, #0
   40734:	db0e      	blt.n	40754 <ensure+0x36>
    needed += p->offset + 1;
   40736:	68a2      	ldr	r2, [r4, #8]
   40738:	1c4e      	adds	r6, r1, #1
   4073a:	4416      	add	r6, r2
    if (needed <= p->length)
   4073c:	42b3      	cmp	r3, r6
   4073e:	d302      	bcc.n	40746 <ensure+0x28>
        return p->buffer + p->offset;
   40740:	4415      	add	r5, r2
}
   40742:	4628      	mov	r0, r5
   40744:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   40746:	6923      	ldr	r3, [r4, #16]
   40748:	b923      	cbnz	r3, 40754 <ensure+0x36>
    if (needed > (INT_MAX / 2))
   4074a:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
   4074e:	d303      	bcc.n	40758 <ensure+0x3a>
        if (needed <= INT_MAX)
   40750:	2e00      	cmp	r6, #0
   40752:	da0f      	bge.n	40774 <ensure+0x56>
        return NULL;
   40754:	2500      	movs	r5, #0
   40756:	e7f4      	b.n	40742 <ensure+0x24>
        newsize = needed * 2;
   40758:	0076      	lsls	r6, r6, #1
    if (p->hooks.reallocate != NULL)
   4075a:	6a23      	ldr	r3, [r4, #32]
   4075c:	b16b      	cbz	r3, 4077a <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   4075e:	4628      	mov	r0, r5
   40760:	4631      	mov	r1, r6
   40762:	4798      	blx	r3
        if (newbuffer == NULL)
   40764:	4605      	mov	r5, r0
   40766:	b9b0      	cbnz	r0, 40796 <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   40768:	69e3      	ldr	r3, [r4, #28]
   4076a:	6820      	ldr	r0, [r4, #0]
   4076c:	4798      	blx	r3
            p->buffer = NULL;
   4076e:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   40772:	e7e6      	b.n	40742 <ensure+0x24>
            newsize = INT_MAX;
   40774:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   40778:	e7ef      	b.n	4075a <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   4077a:	69a3      	ldr	r3, [r4, #24]
   4077c:	4630      	mov	r0, r6
   4077e:	4798      	blx	r3
        if (!newbuffer)
   40780:	4605      	mov	r5, r0
   40782:	2800      	cmp	r0, #0
   40784:	d0f0      	beq.n	40768 <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   40786:	68a2      	ldr	r2, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   40788:	6821      	ldr	r1, [r4, #0]
   4078a:	3201      	adds	r2, #1
   4078c:	f001 f911 	bl	419b2 <memcpy>
        p->hooks.deallocate(p->buffer);
   40790:	69e3      	ldr	r3, [r4, #28]
   40792:	6820      	ldr	r0, [r4, #0]
   40794:	4798      	blx	r3
    return newbuffer + p->offset;
   40796:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   40798:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   4079c:	441d      	add	r5, r3
   4079e:	e7d0      	b.n	40742 <ensure+0x24>

000407a0 <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
   407a0:	2200      	movs	r2, #0
   407a2:	4611      	mov	r1, r2
   407a4:	f7e2 bbac 	b.w	22f00 <cJSON_ParseWithOpts>

000407a8 <cJSON_PrintUnformatted>:
    return (char*)print(item, false, &global_hooks);
   407a8:	2100      	movs	r1, #0
   407aa:	f7e2 bad7 	b.w	22d5c <print.constprop.14>

000407ae <cJSON_GetArraySize>:
    if (array == NULL)
   407ae:	b110      	cbz	r0, 407b6 <cJSON_GetArraySize+0x8>
    child = array->child;
   407b0:	6883      	ldr	r3, [r0, #8]
    size_t size = 0;
   407b2:	2000      	movs	r0, #0
    while(child != NULL)
   407b4:	b903      	cbnz	r3, 407b8 <cJSON_GetArraySize+0xa>
}
   407b6:	4770      	bx	lr
        size++;
   407b8:	3001      	adds	r0, #1
        child = child->next;
   407ba:	681b      	ldr	r3, [r3, #0]
   407bc:	e7fa      	b.n	407b4 <cJSON_GetArraySize+0x6>

000407be <cJSON_GetObjectItem>:
    return get_object_item(object, string, false);
   407be:	2200      	movs	r2, #0
   407c0:	f7e2 b85c 	b.w	2287c <get_object_item>

000407c4 <cJSON_AddItemToArray>:
    add_item_to_array(array, item);
   407c4:	f7ff bf8f 	b.w	406e6 <add_item_to_array>

000407c8 <cJSON_AddItemToObject>:
    add_item_to_object(object, string, item, &global_hooks, false);
   407c8:	2300      	movs	r3, #0
   407ca:	f7e2 bb29 	b.w	22e20 <add_item_to_object.constprop.12>

000407ce <cJSON_IsTrue>:
    return (item->type & 0xFF) == cJSON_False;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
{
    if (item == NULL)
   407ce:	b118      	cbz	r0, 407d8 <cJSON_IsTrue+0xa>
    {
        return false;
    }

    return (item->type & 0xff) == cJSON_True;
   407d0:	7b00      	ldrb	r0, [r0, #12]
   407d2:	1e83      	subs	r3, r0, #2
   407d4:	4258      	negs	r0, r3
   407d6:	4158      	adcs	r0, r3
}
   407d8:	4770      	bx	lr

000407da <cJSON_IsBool>:


CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
{
    if (item == NULL)
   407da:	b120      	cbz	r0, 407e6 <cJSON_IsBool+0xc>
    {
        return false;
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
   407dc:	68c0      	ldr	r0, [r0, #12]
   407de:	f010 0003 	ands.w	r0, r0, #3
   407e2:	bf18      	it	ne
   407e4:	2001      	movne	r0, #1
}
   407e6:	4770      	bx	lr

000407e8 <cJSON_IsNull>:
CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item)
{
    if (item == NULL)
   407e8:	b118      	cbz	r0, 407f2 <cJSON_IsNull+0xa>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_NULL;
   407ea:	7b00      	ldrb	r0, [r0, #12]
   407ec:	1f03      	subs	r3, r0, #4
   407ee:	4258      	negs	r0, r3
   407f0:	4158      	adcs	r0, r3
}
   407f2:	4770      	bx	lr

000407f4 <cJSON_IsNumber>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
    if (item == NULL)
   407f4:	b120      	cbz	r0, 40800 <cJSON_IsNumber+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Number;
   407f6:	7b00      	ldrb	r0, [r0, #12]
   407f8:	f1a0 0308 	sub.w	r3, r0, #8
   407fc:	4258      	negs	r0, r3
   407fe:	4158      	adcs	r0, r3
}
   40800:	4770      	bx	lr

00040802 <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
    if (item == NULL)
   40802:	b120      	cbz	r0, 4080e <cJSON_IsString+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_String;
   40804:	7b00      	ldrb	r0, [r0, #12]
   40806:	f1a0 0310 	sub.w	r3, r0, #16
   4080a:	4258      	negs	r0, r3
   4080c:	4158      	adcs	r0, r3
}
   4080e:	4770      	bx	lr

00040810 <cJSON_GetStringValue>:
CJSON_PUBLIC(char *) cJSON_GetStringValue(cJSON *item) {
   40810:	b508      	push	{r3, lr}
   40812:	4602      	mov	r2, r0
    if (!cJSON_IsString(item)) {
   40814:	f7ff fff5 	bl	40802 <cJSON_IsString>
   40818:	b100      	cbz	r0, 4081c <cJSON_GetStringValue+0xc>
    return item->valuestring;
   4081a:	6910      	ldr	r0, [r2, #16]
}
   4081c:	bd08      	pop	{r3, pc}

0004081e <cJSON_IsObject>:
    return (item->type & 0xFF) == cJSON_Array;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
{
    if (item == NULL)
   4081e:	b120      	cbz	r0, 4082a <cJSON_IsObject+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Object;
   40820:	7b00      	ldrb	r0, [r0, #12]
   40822:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
   40826:	4258      	negs	r0, r3
   40828:	4158      	adcs	r0, r3
}
   4082a:	4770      	bx	lr

0004082c <free_fn_hook>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }
   4082c:	f000 bf40 	b.w	416b0 <k_free>

00040830 <malloc_fn_hook>:
static void *malloc_fn_hook(size_t sz) { return k_malloc(sz); }
   40830:	f7f8 be54 	b.w	394dc <k_malloc>

00040834 <bsdlib_shutdown>:

int bsdlib_shutdown(void)
{
   40834:	b508      	push	{r3, lr}
	bsd_shutdown();
   40836:	f7ea fe3d 	bl	2b4b4 <bsd_shutdown>

	return 0;
}
   4083a:	2000      	movs	r0, #0
   4083c:	bd08      	pop	{r3, pc}

0004083e <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   4083e:	4668      	mov	r0, sp
   40840:	f020 0107 	bic.w	r1, r0, #7
   40844:	468d      	mov	sp, r1
   40846:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   40848:	f7ec fca2 	bl	2d190 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   4084c:	f7df fe4a 	bl	204e4 <_arch_isr_direct_pm>
   40850:	f7df fd6c 	bl	2032c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   40854:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   40858:	4685      	mov	sp, r0
   4085a:	4770      	bx	lr

0004085c <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   4085c:	4668      	mov	r0, sp
   4085e:	f020 0107 	bic.w	r1, r0, #7
   40862:	468d      	mov	sp, r1
   40864:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   40866:	f7ea ff85 	bl	2b774 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   4086a:	f7df fe3b 	bl	204e4 <_arch_isr_direct_pm>
   4086e:	f7df fd5d 	bl	2032c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   40872:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   40876:	4685      	mov	sp, r0
   40878:	4770      	bx	lr

0004087a <trace_task_create>:
{
   4087a:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   4087c:	201d      	movs	r0, #29
   4087e:	2200      	movs	r2, #0
   40880:	2106      	movs	r1, #6
   40882:	f7df fdfd 	bl	20480 <z_arm_irq_priority_set>
}
   40886:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   4088a:	201d      	movs	r0, #29
   4088c:	f7df bde8 	b.w	20460 <arch_irq_enable>

00040890 <read_task_create>:
{
   40890:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   40892:	201c      	movs	r0, #28
   40894:	2200      	movs	r2, #0
   40896:	2106      	movs	r1, #6
   40898:	f7df fdf2 	bl	20480 <z_arm_irq_priority_set>
}
   4089c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   408a0:	201c      	movs	r0, #28
   408a2:	f7df bddd 	b.w	20460 <arch_irq_enable>

000408a6 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   408a6:	2000      	movs	r0, #0
   408a8:	4770      	bx	lr

000408aa <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   408aa:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   408ae:	bf18      	it	ne
   408b0:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   408b2:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   408b4:	bf48      	it	mi
   408b6:	f043 0308 	orrmi.w	r3, r3, #8
}
   408ba:	4618      	mov	r0, r3
   408bc:	4770      	bx	lr

000408be <z_to_nrf_family>:
	switch (z_family) {
   408be:	2803      	cmp	r0, #3
   408c0:	d00f      	beq.n	408e2 <z_to_nrf_family+0x24>
   408c2:	d808      	bhi.n	408d6 <z_to_nrf_family+0x18>
   408c4:	2801      	cmp	r0, #1
   408c6:	d00e      	beq.n	408e6 <z_to_nrf_family+0x28>
   408c8:	2802      	cmp	r0, #2
		return -EAFNOSUPPORT;
   408ca:	bf08      	it	eq
   408cc:	200a      	moveq	r0, #10
   408ce:	bf18      	it	ne
   408d0:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   408d4:	4770      	bx	lr
	switch (z_family) {
   408d6:	2866      	cmp	r0, #102	; 0x66
   408d8:	d006      	beq.n	408e8 <z_to_nrf_family+0x2a>
   408da:	2867      	cmp	r0, #103	; 0x67
		return -EAFNOSUPPORT;
   408dc:	bf08      	it	eq
   408de:	2001      	moveq	r0, #1
   408e0:	e7f5      	b.n	408ce <z_to_nrf_family+0x10>
		return NRF_AF_PACKET;
   408e2:	2005      	movs	r0, #5
   408e4:	4770      	bx	lr
		return NRF_AF_INET;
   408e6:	2002      	movs	r0, #2
}
   408e8:	4770      	bx	lr

000408ea <z_to_nrf_protocol>:
	switch (proto) {
   408ea:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   408ee:	d01d      	beq.n	4092c <z_to_nrf_protocol+0x42>
   408f0:	dc08      	bgt.n	40904 <z_to_nrf_protocol+0x1a>
   408f2:	2806      	cmp	r0, #6
   408f4:	d01d      	beq.n	40932 <z_to_nrf_protocol+0x48>
   408f6:	2811      	cmp	r0, #17
   408f8:	d01d      	beq.n	40936 <z_to_nrf_protocol+0x4c>
   408fa:	2800      	cmp	r0, #0
		return -EPROTONOSUPPORT;
   408fc:	bf18      	it	ne
   408fe:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   40902:	4770      	bx	lr
	switch (proto) {
   40904:	f240 2301 	movw	r3, #513	; 0x201
   40908:	4298      	cmp	r0, r3
   4090a:	d015      	beq.n	40938 <z_to_nrf_protocol+0x4e>
   4090c:	dc06      	bgt.n	4091c <z_to_nrf_protocol+0x32>
   4090e:	f240 1311 	movw	r3, #273	; 0x111
   40912:	4298      	cmp	r0, r3
		return -EPROTONOSUPPORT;
   40914:	bf08      	it	eq
   40916:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   4091a:	e7ef      	b.n	408fc <z_to_nrf_protocol+0x12>
	switch (proto) {
   4091c:	f240 2302 	movw	r3, #514	; 0x202
   40920:	4298      	cmp	r0, r3
   40922:	d009      	beq.n	40938 <z_to_nrf_protocol+0x4e>
   40924:	f240 2303 	movw	r3, #515	; 0x203
   40928:	4298      	cmp	r0, r3
   4092a:	e7e7      	b.n	408fc <z_to_nrf_protocol+0x12>
		return NRF_SPROTO_TLS1v2;
   4092c:	f44f 7082 	mov.w	r0, #260	; 0x104
   40930:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   40932:	2001      	movs	r0, #1
   40934:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   40936:	2002      	movs	r0, #2
}
   40938:	4770      	bx	lr

0004093a <nrf91_bsdlib_socket_offload_init>:
}
   4093a:	2000      	movs	r0, #0
   4093c:	4770      	bx	lr

0004093e <nrf91_socket_offload_freeaddrinfo>:
{
   4093e:	b538      	push	{r3, r4, r5, lr}
   40940:	4604      	mov	r4, r0
	while (next != NULL) {
   40942:	b904      	cbnz	r4, 40946 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   40944:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   40946:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   40948:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   4094a:	f000 feb1 	bl	416b0 <k_free>
		k_free(this);
   4094e:	4620      	mov	r0, r4
   40950:	f000 feae 	bl	416b0 <k_free>
		next = next->ai_next;
   40954:	462c      	mov	r4, r5
   40956:	e7f4      	b.n	40942 <nrf91_socket_offload_freeaddrinfo+0x4>

00040958 <z_to_nrf_addrinfo_hints>:
{
   40958:	b538      	push	{r3, r4, r5, lr}
   4095a:	460c      	mov	r4, r1
   4095c:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   4095e:	221c      	movs	r2, #28
   40960:	2100      	movs	r1, #0
   40962:	1d20      	adds	r0, r4, #4
   40964:	f001 f845 	bl	419f2 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   40968:	2300      	movs	r3, #0
   4096a:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   4096c:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   4096e:	2b03      	cmp	r3, #3
   40970:	d003      	beq.n	4097a <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   40972:	2b04      	cmp	r3, #4
   40974:	bf08      	it	eq
   40976:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   4097a:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   4097c:	88a8      	ldrh	r0, [r5, #4]
   4097e:	f7ff ff9e 	bl	408be <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   40982:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   40986:	d00b      	beq.n	409a0 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   40988:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   4098a:	68e8      	ldr	r0, [r5, #12]
   4098c:	f7ff ffad 	bl	408ea <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   40990:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   40994:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   40996:	d003      	beq.n	409a0 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   40998:	69a8      	ldr	r0, [r5, #24]
   4099a:	b108      	cbz	r0, 409a0 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   4099c:	61a0      	str	r0, [r4, #24]
	return 0;
   4099e:	2000      	movs	r0, #0
}
   409a0:	bd38      	pop	{r3, r4, r5, pc}

000409a2 <nrf91_socket_offload_send>:
{
   409a2:	b570      	push	{r4, r5, r6, lr}
   409a4:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   409a6:	4618      	mov	r0, r3
{
   409a8:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   409aa:	f7ff ff7e 	bl	408aa <z_to_nrf_flags>
   409ae:	462a      	mov	r2, r5
   409b0:	4603      	mov	r3, r0
   409b2:	4620      	mov	r0, r4
}
   409b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   409b8:	f7ea bc62 	b.w	2b280 <nrf_send>

000409bc <nrf91_socket_offload_recv>:
{
   409bc:	b570      	push	{r4, r5, r6, lr}
   409be:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   409c0:	4618      	mov	r0, r3
{
   409c2:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   409c4:	f7ff ff71 	bl	408aa <z_to_nrf_flags>
   409c8:	462a      	mov	r2, r5
   409ca:	4603      	mov	r3, r0
   409cc:	4620      	mov	r0, r4
}
   409ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   409d2:	f7ea bca1 	b.w	2b318 <nrf_recv>

000409d6 <nrf91_socket_offload_getsockopt>:
{
   409d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   409da:	461d      	mov	r5, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   409dc:	2300      	movs	r3, #0
{
   409de:	b086      	sub	sp, #24
   409e0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   409e4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   409e8:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   409ec:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   409f0:	4607      	mov	r7, r0
   409f2:	460c      	mov	r4, r1
   409f4:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   409f6:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   409f8:	d002      	beq.n	40a00 <nrf91_socket_offload_getsockopt+0x2a>
   409fa:	dc2b      	bgt.n	40a54 <nrf91_socket_offload_getsockopt+0x7e>
   409fc:	2901      	cmp	r1, #1
   409fe:	d13d      	bne.n	40a7c <nrf91_socket_offload_getsockopt+0xa6>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   40a00:	aa02      	add	r2, sp, #8
   40a02:	4631      	mov	r1, r6
   40a04:	4620      	mov	r0, r4
   40a06:	f7e2 fd41 	bl	2348c <z_to_nrf_optname>
   40a0a:	2800      	cmp	r0, #0
   40a0c:	db36      	blt.n	40a7c <nrf91_socket_offload_getsockopt+0xa6>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   40a0e:	2c01      	cmp	r4, #1
   40a10:	d128      	bne.n	40a64 <nrf91_socket_offload_getsockopt+0x8e>
   40a12:	2e14      	cmp	r6, #20
   40a14:	d126      	bne.n	40a64 <nrf91_socket_offload_getsockopt+0x8e>
		nrf_optlen = sizeof(struct nrf_timeval);
   40a16:	2308      	movs	r3, #8
   40a18:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   40a1a:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   40a1c:	aa03      	add	r2, sp, #12
   40a1e:	9200      	str	r2, [sp, #0]
   40a20:	4638      	mov	r0, r7
   40a22:	9a02      	ldr	r2, [sp, #8]
   40a24:	4621      	mov	r1, r4
   40a26:	f7ea fd0d 	bl	2b444 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   40a2a:	4607      	mov	r7, r0
   40a2c:	b970      	cbnz	r0, 40a4c <nrf91_socket_offload_getsockopt+0x76>
   40a2e:	b16d      	cbz	r5, 40a4c <nrf91_socket_offload_getsockopt+0x76>
		*optlen = nrf_optlen;
   40a30:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   40a32:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   40a34:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   40a38:	d108      	bne.n	40a4c <nrf91_socket_offload_getsockopt+0x76>
			if (optname == SO_ERROR) {
   40a3a:	2e04      	cmp	r6, #4
   40a3c:	d114      	bne.n	40a68 <nrf91_socket_offload_getsockopt+0x92>
				bsd_os_errno_set(*(int *)optval);
   40a3e:	6828      	ldr	r0, [r5, #0]
   40a40:	f7e2 fc04 	bl	2324c <bsd_os_errno_set>
				*(int *)optval = errno;
   40a44:	f7fe ff34 	bl	3f8b0 <__errno>
   40a48:	6803      	ldr	r3, [r0, #0]
   40a4a:	602b      	str	r3, [r5, #0]
}
   40a4c:	4638      	mov	r0, r7
   40a4e:	b006      	add	sp, #24
   40a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   40a54:	f240 2302 	movw	r3, #514	; 0x202
   40a58:	4299      	cmp	r1, r3
   40a5a:	d0d1      	beq.n	40a00 <nrf91_socket_offload_getsockopt+0x2a>
   40a5c:	f240 2303 	movw	r3, #515	; 0x203
   40a60:	4299      	cmp	r1, r3
   40a62:	e7cc      	b.n	409fe <nrf91_socket_offload_getsockopt+0x28>
   40a64:	462b      	mov	r3, r5
   40a66:	e7d9      	b.n	40a1c <nrf91_socket_offload_getsockopt+0x46>
			} else if (optname == SO_RCVTIMEO) {
   40a68:	2e14      	cmp	r6, #20
   40a6a:	d1ef      	bne.n	40a4c <nrf91_socket_offload_getsockopt+0x76>
				((struct timeval *)optval)->tv_sec =
   40a6c:	9b04      	ldr	r3, [sp, #16]
   40a6e:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   40a70:	9b05      	ldr	r3, [sp, #20]
   40a72:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   40a74:	2308      	movs	r3, #8
   40a76:	f8c8 3000 	str.w	r3, [r8]
   40a7a:	e7e7      	b.n	40a4c <nrf91_socket_offload_getsockopt+0x76>
	errno = ENOPROTOOPT;
   40a7c:	f7fe ff18 	bl	3f8b0 <__errno>
   40a80:	236d      	movs	r3, #109	; 0x6d
	return retval;
   40a82:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	errno = ENOPROTOOPT;
   40a86:	6003      	str	r3, [r0, #0]
	return retval;
   40a88:	e7e0      	b.n	40a4c <nrf91_socket_offload_getsockopt+0x76>

00040a8a <nrf91_socket_offload_poll>:
{
   40a8a:	b5f0      	push	{r4, r5, r6, r7, lr}
   40a8c:	b091      	sub	sp, #68	; 0x44
   40a8e:	4605      	mov	r5, r0
   40a90:	460c      	mov	r4, r1
   40a92:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   40a94:	2100      	movs	r1, #0
   40a96:	2240      	movs	r2, #64	; 0x40
   40a98:	4668      	mov	r0, sp
   40a9a:	f000 ffaa 	bl	419f2 <memset>
	for (int i = 0; i < nfds; i++) {
   40a9e:	466a      	mov	r2, sp
   40aa0:	2100      	movs	r1, #0
		if (fds[i].events & POLLIN) {
   40aa2:	1d2f      	adds	r7, r5, #4
	for (int i = 0; i < nfds; i++) {
   40aa4:	42a1      	cmp	r1, r4
   40aa6:	db0c      	blt.n	40ac2 <nrf91_socket_offload_poll+0x38>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   40aa8:	4632      	mov	r2, r6
   40aaa:	4621      	mov	r1, r4
   40aac:	4668      	mov	r0, sp
   40aae:	f7ea fce9 	bl	2b484 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   40ab2:	2200      	movs	r2, #0
   40ab4:	462b      	mov	r3, r5
		fds[i].revents = 0;
   40ab6:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   40ab8:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   40aba:	42a2      	cmp	r2, r4
   40abc:	db1a      	blt.n	40af4 <nrf91_socket_offload_poll+0x6a>
}
   40abe:	b011      	add	sp, #68	; 0x44
   40ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   40ac2:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   40ac6:	f837 0031 	ldrh.w	r0, [r7, r1, lsl #3]
		tmp[i].handle = fds[i].fd;
   40aca:	6013      	str	r3, [r2, #0]
		if (fds[i].events & POLLIN) {
   40acc:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   40ace:	bf48      	it	mi
   40ad0:	8893      	ldrhmi	r3, [r2, #4]
	for (int i = 0; i < nfds; i++) {
   40ad2:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   40ad6:	bf44      	itt	mi
   40ad8:	f043 0301 	orrmi.w	r3, r3, #1
   40adc:	8093      	strhmi	r3, [r2, #4]
		if (fds[i].events & POLLOUT) {
   40ade:	0743      	lsls	r3, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   40ae0:	bf48      	it	mi
   40ae2:	8893      	ldrhmi	r3, [r2, #4]
   40ae4:	f102 0208 	add.w	r2, r2, #8
   40ae8:	bf44      	itt	mi
   40aea:	f043 0302 	orrmi.w	r3, r3, #2
   40aee:	f822 3c04 	strhmi.w	r3, [r2, #-4]
   40af2:	e7d7      	b.n	40aa4 <nrf91_socket_offload_poll+0x1a>
		if (tmp[i].returned & NRF_POLLIN) {
   40af4:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   40af8:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   40afa:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   40afc:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   40afe:	bf48      	it	mi
   40b00:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   40b02:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   40b04:	bf48      	it	mi
   40b06:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   40b08:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   40b0c:	bf44      	itt	mi
   40b0e:	f045 0504 	orrmi.w	r5, r5, #4
   40b12:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   40b14:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   40b16:	bf48      	it	mi
   40b18:	88dd      	ldrhmi	r5, [r3, #6]
   40b1a:	f103 0308 	add.w	r3, r3, #8
   40b1e:	bf44      	itt	mi
   40b20:	f045 0508 	orrmi.w	r5, r5, #8
   40b24:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   40b28:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   40b2a:	bf42      	ittt	mi
   40b2c:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   40b30:	f045 0520 	orrmi.w	r5, r5, #32
   40b34:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   40b38:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   40b3a:	bf42      	ittt	mi
   40b3c:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   40b40:	f041 0110 	orrmi.w	r1, r1, #16
   40b44:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   40b48:	e7b7      	b.n	40aba <nrf91_socket_offload_poll+0x30>

00040b4a <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   40b4a:	f7ea bc27 	b.w	2b39c <nrf_listen>

00040b4e <nrf91_socket_offload_close>:
	return nrf_close(sd);
   40b4e:	f7ea bb6d 	b.w	2b22c <nrf_close>

00040b52 <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   40b52:	2903      	cmp	r1, #3
{
   40b54:	b508      	push	{r3, lr}
	switch (cmd) {
   40b56:	d00b      	beq.n	40b70 <nrf91_socket_offload_fcntl+0x1e>
   40b58:	2904      	cmp	r1, #4
   40b5a:	d111      	bne.n	40b80 <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   40b5c:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   40b5e:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   40b62:	d10d      	bne.n	40b80 <nrf91_socket_offload_fcntl+0x2e>
}
   40b64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   40b68:	1392      	asrs	r2, r2, #14
   40b6a:	2101      	movs	r1, #1
   40b6c:	f7ea bc8c 	b.w	2b488 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   40b70:	2200      	movs	r2, #0
   40b72:	2102      	movs	r1, #2
   40b74:	f7ea fc88 	bl	2b488 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   40b78:	0380      	lsls	r0, r0, #14
   40b7a:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   40b7e:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   40b80:	f7fe fe96 	bl	3f8b0 <__errno>
   40b84:	2316      	movs	r3, #22
   40b86:	6003      	str	r3, [r0, #0]
	return retval;
   40b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   40b8c:	e7f7      	b.n	40b7e <nrf91_socket_offload_fcntl+0x2c>

00040b8e <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   40b8e:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   40b90:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   40b92:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   40b94:	4603      	mov	r3, r0
{
   40b96:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   40b98:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   40b9c:	f101 0210 	add.w	r2, r1, #16
   40ba0:	f102 0410 	add.w	r4, r2, #16
   40ba4:	f852 5b04 	ldr.w	r5, [r2], #4
   40ba8:	42a2      	cmp	r2, r4
   40baa:	f843 5b04 	str.w	r5, [r3], #4
   40bae:	d1f9      	bne.n	40ba4 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   40bb0:	6a0b      	ldr	r3, [r1, #32]
   40bb2:	7503      	strb	r3, [r0, #20]
}
   40bb4:	bd30      	pop	{r4, r5, pc}

00040bb6 <nrf91_socket_offload_getaddrinfo>:
{
   40bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   40bba:	4614      	mov	r4, r2
   40bbc:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   40bbe:	2100      	movs	r1, #0
{
   40bc0:	b092      	sub	sp, #72	; 0x48
   40bc2:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   40bc4:	2220      	movs	r2, #32
   40bc6:	a802      	add	r0, sp, #8
{
   40bc8:	4698      	mov	r8, r3
	struct nrf_addrinfo *nrf_res = NULL;
   40bca:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   40bcc:	f000 ff11 	bl	419f2 <memset>
	if (hints != NULL) {
   40bd0:	b194      	cbz	r4, 40bf8 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   40bd2:	a902      	add	r1, sp, #8
   40bd4:	4620      	mov	r0, r4
   40bd6:	f7ff febf 	bl	40958 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   40bda:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   40bde:	f000 80af 	beq.w	40d40 <nrf91_socket_offload_getaddrinfo+0x18a>
		} else if (error == -EAFNOSUPPORT) {
   40be2:	306a      	adds	r0, #106	; 0x6a
   40be4:	f000 80af 	beq.w	40d46 <nrf91_socket_offload_getaddrinfo+0x190>
		if (hints->ai_next != NULL) {
   40be8:	69e0      	ldr	r0, [r4, #28]
   40bea:	b120      	cbz	r0, 40bf6 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   40bec:	ac0a      	add	r4, sp, #40	; 0x28
   40bee:	4621      	mov	r1, r4
   40bf0:	f7ff feb2 	bl	40958 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   40bf4:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   40bf6:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   40bf8:	4631      	mov	r1, r6
   40bfa:	4628      	mov	r0, r5
   40bfc:	ab01      	add	r3, sp, #4
   40bfe:	4622      	mov	r2, r4
   40c00:	f7ea fc3c 	bl	2b47c <nrf_getaddrinfo>
	*res = NULL;
   40c04:	2700      	movs	r7, #0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   40c06:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   40c08:	f8c8 7000 	str.w	r7, [r8]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   40c0c:	4605      	mov	r5, r0
   40c0e:	2800      	cmp	r0, #0
   40c10:	d04a      	beq.n	40ca8 <nrf91_socket_offload_getaddrinfo+0xf2>
		nrf91_socket_offload_freeaddrinfo(*res);
   40c12:	f8d8 0000 	ldr.w	r0, [r8]
   40c16:	f7ff fe92 	bl	4093e <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   40c1a:	2300      	movs	r3, #0
   40c1c:	f8c8 3000 	str.w	r3, [r8]
   40c20:	e044      	b.n	40cac <nrf91_socket_offload_getaddrinfo+0xf6>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   40c22:	2020      	movs	r0, #32
   40c24:	f7f8 fc5a 	bl	394dc <k_malloc>
		if (next_z_res == NULL) {
   40c28:	4604      	mov	r4, r0
   40c2a:	2800      	cmp	r0, #0
   40c2c:	f000 8083 	beq.w	40d36 <nrf91_socket_offload_getaddrinfo+0x180>
	family = nrf_to_z_family(nrf_in->ai_family);
   40c30:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   40c32:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   40c34:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   40c36:	e9c0 5506 	strd	r5, r5, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   40c3a:	6005      	str	r5, [r0, #0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   40c3c:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   40c3e:	d03c      	beq.n	40cba <nrf91_socket_offload_getaddrinfo+0x104>
   40c40:	dc09      	bgt.n	40c56 <nrf91_socket_offload_getaddrinfo+0xa0>
   40c42:	2a01      	cmp	r2, #1
   40c44:	d03b      	beq.n	40cbe <nrf91_socket_offload_getaddrinfo+0x108>
   40c46:	2a02      	cmp	r2, #2
   40c48:	d03b      	beq.n	40cc2 <nrf91_socket_offload_getaddrinfo+0x10c>
			k_free(next_z_res);
   40c4a:	4620      	mov	r0, r4
   40c4c:	f000 fd30 	bl	416b0 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   40c50:	f06f 0508 	mvn.w	r5, #8
   40c54:	e7dd      	b.n	40c12 <nrf91_socket_offload_getaddrinfo+0x5c>
	switch (nrf_family) {
   40c56:	2a0a      	cmp	r2, #10
   40c58:	d035      	beq.n	40cc6 <nrf91_socket_offload_getaddrinfo+0x110>
   40c5a:	2a66      	cmp	r2, #102	; 0x66
   40c5c:	d1f5      	bne.n	40c4a <nrf91_socket_offload_getaddrinfo+0x94>
		return AF_LTE;
   40c5e:	4613      	mov	r3, r2
	z_out->ai_family = family;
   40c60:	6063      	str	r3, [r4, #4]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   40c62:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   40c64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   40c68:	d04e      	beq.n	40d08 <nrf91_socket_offload_getaddrinfo+0x152>
   40c6a:	dc2e      	bgt.n	40cca <nrf91_socket_offload_getaddrinfo+0x114>
   40c6c:	2b01      	cmp	r3, #1
   40c6e:	d050      	beq.n	40d12 <nrf91_socket_offload_getaddrinfo+0x15c>
   40c70:	2b02      	cmp	r3, #2
   40c72:	d04c      	beq.n	40d0e <nrf91_socket_offload_getaddrinfo+0x158>
   40c74:	2b00      	cmp	r3, #0
   40c76:	d130      	bne.n	40cda <nrf91_socket_offload_getaddrinfo+0x124>
	if (nrf_in->ai_family == NRF_AF_INET) {
   40c78:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   40c7a:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   40c7c:	d14b      	bne.n	40d16 <nrf91_socket_offload_getaddrinfo+0x160>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   40c7e:	2008      	movs	r0, #8
   40c80:	f7f8 fc2c 	bl	394dc <k_malloc>
   40c84:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   40c86:	2800      	cmp	r0, #0
   40c88:	d052      	beq.n	40d30 <nrf91_socket_offload_getaddrinfo+0x17a>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   40c8a:	2308      	movs	r3, #8
   40c8c:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   40c8e:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   40c90:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   40c92:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   40c94:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   40c96:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   40c98:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   40c9a:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   40c9c:	2f00      	cmp	r7, #0
   40c9e:	d14d      	bne.n	40d3c <nrf91_socket_offload_getaddrinfo+0x186>
			*res = next_z_res;
   40ca0:	f8c8 4000 	str.w	r4, [r8]
		next_nrf_res = next_nrf_res->ai_next;
   40ca4:	4627      	mov	r7, r4
   40ca6:	69f6      	ldr	r6, [r6, #28]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   40ca8:	2e00      	cmp	r6, #0
   40caa:	d1ba      	bne.n	40c22 <nrf91_socket_offload_getaddrinfo+0x6c>
	nrf_freeaddrinfo(nrf_res);
   40cac:	9801      	ldr	r0, [sp, #4]
   40cae:	f7ea fbe7 	bl	2b480 <nrf_freeaddrinfo>
}
   40cb2:	4628      	mov	r0, r5
   40cb4:	b012      	add	sp, #72	; 0x48
   40cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return AF_PACKET;
   40cba:	2303      	movs	r3, #3
   40cbc:	e7d0      	b.n	40c60 <nrf91_socket_offload_getaddrinfo+0xaa>
		return AF_LOCAL;
   40cbe:	2367      	movs	r3, #103	; 0x67
   40cc0:	e7ce      	b.n	40c60 <nrf91_socket_offload_getaddrinfo+0xaa>
		return AF_INET;
   40cc2:	2301      	movs	r3, #1
   40cc4:	e7cc      	b.n	40c60 <nrf91_socket_offload_getaddrinfo+0xaa>
		return AF_INET6;
   40cc6:	2302      	movs	r3, #2
   40cc8:	e7ca      	b.n	40c60 <nrf91_socket_offload_getaddrinfo+0xaa>
	switch (proto) {
   40cca:	f240 2101 	movw	r1, #513	; 0x201
   40cce:	428b      	cmp	r3, r1
   40cd0:	d0d2      	beq.n	40c78 <nrf91_socket_offload_getaddrinfo+0xc2>
   40cd2:	dc0d      	bgt.n	40cf0 <nrf91_socket_offload_getaddrinfo+0x13a>
   40cd4:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   40cd8:	d013      	beq.n	40d02 <nrf91_socket_offload_getaddrinfo+0x14c>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   40cda:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   40cde:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   40ce0:	2300      	movs	r3, #0
   40ce2:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   40ce4:	4620      	mov	r0, r4
   40ce6:	f000 fce3 	bl	416b0 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   40cea:	f06f 0506 	mvn.w	r5, #6
   40cee:	e790      	b.n	40c12 <nrf91_socket_offload_getaddrinfo+0x5c>
	switch (proto) {
   40cf0:	f240 2102 	movw	r1, #514	; 0x202
   40cf4:	428b      	cmp	r3, r1
   40cf6:	d0bf      	beq.n	40c78 <nrf91_socket_offload_getaddrinfo+0xc2>
   40cf8:	f240 2103 	movw	r1, #515	; 0x203
   40cfc:	428b      	cmp	r3, r1
   40cfe:	d0bb      	beq.n	40c78 <nrf91_socket_offload_getaddrinfo+0xc2>
   40d00:	e7eb      	b.n	40cda <nrf91_socket_offload_getaddrinfo+0x124>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   40d02:	f240 1311 	movw	r3, #273	; 0x111
   40d06:	e7b7      	b.n	40c78 <nrf91_socket_offload_getaddrinfo+0xc2>
   40d08:	f44f 7381 	mov.w	r3, #258	; 0x102
   40d0c:	e7b4      	b.n	40c78 <nrf91_socket_offload_getaddrinfo+0xc2>
   40d0e:	2311      	movs	r3, #17
   40d10:	e7b2      	b.n	40c78 <nrf91_socket_offload_getaddrinfo+0xc2>
   40d12:	2306      	movs	r3, #6
   40d14:	e7b0      	b.n	40c78 <nrf91_socket_offload_getaddrinfo+0xc2>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   40d16:	2a0a      	cmp	r2, #10
   40d18:	d1e4      	bne.n	40ce4 <nrf91_socket_offload_getaddrinfo+0x12e>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   40d1a:	2018      	movs	r0, #24
   40d1c:	f7f8 fbde 	bl	394dc <k_malloc>
   40d20:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   40d22:	b128      	cbz	r0, 40d30 <nrf91_socket_offload_getaddrinfo+0x17a>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   40d24:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   40d26:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   40d28:	6123      	str	r3, [r4, #16]
		nrf_to_z_ipv6(z_out->ai_addr,
   40d2a:	f7ff ff30 	bl	40b8e <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   40d2e:	e7b5      	b.n	40c9c <nrf91_socket_offload_getaddrinfo+0xe6>
			k_free(next_z_res);
   40d30:	4620      	mov	r0, r4
   40d32:	f000 fcbd 	bl	416b0 <k_free>
			retval = DNS_EAI_MEMORY;
   40d36:	f06f 0509 	mvn.w	r5, #9
   40d3a:	e76a      	b.n	40c12 <nrf91_socket_offload_getaddrinfo+0x5c>
			latest_z_res->ai_next = next_z_res;
   40d3c:	61fc      	str	r4, [r7, #28]
   40d3e:	e7b1      	b.n	40ca4 <nrf91_socket_offload_getaddrinfo+0xee>
			return DNS_EAI_SOCKTYPE;
   40d40:	f06f 0506 	mvn.w	r5, #6
   40d44:	e7b5      	b.n	40cb2 <nrf91_socket_offload_getaddrinfo+0xfc>
			return DNS_EAI_ADDRFAMILY;
   40d46:	f06f 0508 	mvn.w	r5, #8
   40d4a:	e7b2      	b.n	40cb2 <nrf91_socket_offload_getaddrinfo+0xfc>

00040d4c <z_to_nrf_ipv6>:
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   40d4c:	2224      	movs	r2, #36	; 0x24
{
   40d4e:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   40d50:	700a      	strb	r2, [r1, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   40d52:	8842      	ldrh	r2, [r0, #2]
{
   40d54:	4604      	mov	r4, r0
	nrf_out->sin6_port = ptr->sin6_port;
   40d56:	810a      	strh	r2, [r1, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   40d58:	220a      	movs	r2, #10
{
   40d5a:	460b      	mov	r3, r1
	nrf_out->sin6_family = NRF_AF_INET6;
   40d5c:	604a      	str	r2, [r1, #4]
   40d5e:	f101 0610 	add.w	r6, r1, #16
   40d62:	1d02      	adds	r2, r0, #4
   40d64:	f100 0714 	add.w	r7, r0, #20
   40d68:	4635      	mov	r5, r6
   40d6a:	6810      	ldr	r0, [r2, #0]
   40d6c:	6851      	ldr	r1, [r2, #4]
   40d6e:	3208      	adds	r2, #8
   40d70:	c503      	stmia	r5!, {r0, r1}
   40d72:	42ba      	cmp	r2, r7
   40d74:	462e      	mov	r6, r5
   40d76:	d1f7      	bne.n	40d68 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   40d78:	7d22      	ldrb	r2, [r4, #20]
   40d7a:	621a      	str	r2, [r3, #32]
}
   40d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00040d7e <nrf91_socket_offload_sendto>:
{
   40d7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   40d82:	b08d      	sub	sp, #52	; 0x34
   40d84:	9c14      	ldr	r4, [sp, #80]	; 0x50
   40d86:	4605      	mov	r5, r0
   40d88:	460e      	mov	r6, r1
   40d8a:	4617      	mov	r7, r2
   40d8c:	4698      	mov	r8, r3
	if (to == NULL) {
   40d8e:	b96c      	cbnz	r4, 40dac <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   40d90:	4618      	mov	r0, r3
   40d92:	f7ff fd8a 	bl	408aa <z_to_nrf_flags>
   40d96:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   40d9a:	4603      	mov	r3, r0
   40d9c:	463a      	mov	r2, r7
   40d9e:	4631      	mov	r1, r6
   40da0:	4628      	mov	r0, r5
   40da2:	f7ea fa51 	bl	2b248 <nrf_sendto>
}
   40da6:	b00d      	add	sp, #52	; 0x34
   40da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   40dac:	8823      	ldrh	r3, [r4, #0]
   40dae:	2b01      	cmp	r3, #1
   40db0:	d110      	bne.n	40dd4 <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   40db2:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   40db4:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   40db6:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   40dba:	2302      	movs	r3, #2
   40dbc:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   40dbe:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   40dc0:	4640      	mov	r0, r8
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   40dc2:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   40dc4:	f88d 100c 	strb.w	r1, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   40dc8:	f7ff fd6f 	bl	408aa <z_to_nrf_flags>
   40dcc:	ab03      	add	r3, sp, #12
   40dce:	9101      	str	r1, [sp, #4]
   40dd0:	9300      	str	r3, [sp, #0]
   40dd2:	e7e2      	b.n	40d9a <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   40dd4:	2b02      	cmp	r3, #2
   40dd6:	d10c      	bne.n	40df2 <nrf91_socket_offload_sendto+0x74>
		z_to_nrf_ipv6(to, &ipv6);
   40dd8:	f10d 090c 	add.w	r9, sp, #12
   40ddc:	4649      	mov	r1, r9
   40dde:	4620      	mov	r0, r4
   40de0:	f7ff ffb4 	bl	40d4c <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   40de4:	4640      	mov	r0, r8
   40de6:	f7ff fd60 	bl	408aa <z_to_nrf_flags>
   40dea:	2324      	movs	r3, #36	; 0x24
   40dec:	e9cd 9300 	strd	r9, r3, [sp]
   40df0:	e7d3      	b.n	40d9a <nrf91_socket_offload_sendto+0x1c>
	errno = ENOTSUP;
   40df2:	f7fe fd5d 	bl	3f8b0 <__errno>
   40df6:	2386      	movs	r3, #134	; 0x86
   40df8:	6003      	str	r3, [r0, #0]
	return retval;
   40dfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   40dfe:	e7d2      	b.n	40da6 <nrf91_socket_offload_sendto+0x28>

00040e00 <nrf91_socket_offload_recvfrom>:
{
   40e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   40e04:	4605      	mov	r5, r0
   40e06:	b08c      	sub	sp, #48	; 0x30
   40e08:	4618      	mov	r0, r3
   40e0a:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   40e0e:	4690      	mov	r8, r2
	if (from == NULL) {
   40e10:	f7ff fd4b 	bl	408aa <z_to_nrf_flags>
   40e14:	4603      	mov	r3, r0
   40e16:	b954      	cbnz	r4, 40e2e <nrf91_socket_offload_recvfrom+0x2e>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   40e18:	4628      	mov	r0, r5
   40e1a:	e9cd 4400 	strd	r4, r4, [sp]
   40e1e:	4642      	mov	r2, r8
   40e20:	f7ea fa5e 	bl	2b2e0 <nrf_recvfrom>
   40e24:	4605      	mov	r5, r0
}
   40e26:	4628      	mov	r0, r5
   40e28:	b00c      	add	sp, #48	; 0x30
   40e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   40e2e:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   40e30:	af03      	add	r7, sp, #12
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   40e32:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   40e34:	aa02      	add	r2, sp, #8
   40e36:	9201      	str	r2, [sp, #4]
   40e38:	4628      	mov	r0, r5
   40e3a:	9700      	str	r7, [sp, #0]
   40e3c:	4642      	mov	r2, r8
   40e3e:	f7ea fa4f 	bl	2b2e0 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   40e42:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   40e44:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   40e46:	2b02      	cmp	r3, #2
   40e48:	d109      	bne.n	40e5e <nrf91_socket_offload_recvfrom+0x5e>
	ptr->sin_port = nrf_in->sin_port;
   40e4a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   40e4e:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   40e50:	2301      	movs	r3, #1
   40e52:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   40e54:	9b06      	ldr	r3, [sp, #24]
   40e56:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   40e58:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   40e5a:	6033      	str	r3, [r6, #0]
	return retval;
   40e5c:	e7e3      	b.n	40e26 <nrf91_socket_offload_recvfrom+0x26>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   40e5e:	2b0a      	cmp	r3, #10
   40e60:	d1e1      	bne.n	40e26 <nrf91_socket_offload_recvfrom+0x26>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   40e62:	4639      	mov	r1, r7
   40e64:	4620      	mov	r0, r4
   40e66:	f7ff fe92 	bl	40b8e <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   40e6a:	2318      	movs	r3, #24
   40e6c:	e7f5      	b.n	40e5a <nrf91_socket_offload_recvfrom+0x5a>

00040e6e <nrf91_socket_offload_connect>:
{
   40e6e:	b530      	push	{r4, r5, lr}
	if (addr->sa_family == AF_INET) {
   40e70:	880c      	ldrh	r4, [r1, #0]
{
   40e72:	b08b      	sub	sp, #44	; 0x2c
	if (addr->sa_family == AF_INET) {
   40e74:	2c01      	cmp	r4, #1
{
   40e76:	4605      	mov	r5, r0
   40e78:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   40e7a:	d10e      	bne.n	40e9a <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   40e7c:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   40e7e:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   40e80:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   40e84:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   40e86:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   40e88:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   40e8a:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   40e8e:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   40e90:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   40e92:	f7ea fa71 	bl	2b378 <nrf_connect>
}
   40e96:	b00b      	add	sp, #44	; 0x2c
   40e98:	bd30      	pop	{r4, r5, pc}
	} else if (addr->sa_family == AF_INET6) {
   40e9a:	2c02      	cmp	r4, #2
   40e9c:	d107      	bne.n	40eae <nrf91_socket_offload_connect+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   40e9e:	a901      	add	r1, sp, #4
   40ea0:	4618      	mov	r0, r3
   40ea2:	f7ff ff53 	bl	40d4c <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   40ea6:	2224      	movs	r2, #36	; 0x24
   40ea8:	a901      	add	r1, sp, #4
   40eaa:	4628      	mov	r0, r5
   40eac:	e7f1      	b.n	40e92 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   40eae:	f7ea fa63 	bl	2b378 <nrf_connect>
		if (retval < 0) {
   40eb2:	2800      	cmp	r0, #0
   40eb4:	daef      	bge.n	40e96 <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   40eb6:	f7fe fcfb 	bl	3f8b0 <__errno>
   40eba:	2386      	movs	r3, #134	; 0x86
   40ebc:	6003      	str	r3, [r0, #0]
   40ebe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   40ec2:	e7e8      	b.n	40e96 <nrf91_socket_offload_connect+0x28>

00040ec4 <nrf91_socket_offload_accept>:
{
   40ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   40ec6:	2708      	movs	r7, #8
{
   40ec8:	b085      	sub	sp, #20
   40eca:	460c      	mov	r4, r1
   40ecc:	4616      	mov	r6, r2
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   40ece:	eb0d 0107 	add.w	r1, sp, r7
   40ed2:	aa01      	add	r2, sp, #4
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   40ed4:	9701      	str	r7, [sp, #4]
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   40ed6:	f7ea fa71 	bl	2b3bc <nrf_accept>
	if (retval < 0) {
   40eda:	1e05      	subs	r5, r0, #0
   40edc:	db1a      	blt.n	40f14 <nrf91_socket_offload_accept+0x50>
	if (nrf_addr.sa_family == NRF_AF_INET) {
   40ede:	9b03      	ldr	r3, [sp, #12]
   40ee0:	2b02      	cmp	r3, #2
   40ee2:	d10a      	bne.n	40efa <nrf91_socket_offload_accept+0x36>
	ptr->sin_port = nrf_in->sin_port;
   40ee4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		*addrlen = sizeof(struct sockaddr_in);
   40ee8:	6037      	str	r7, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   40eea:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   40eec:	2301      	movs	r3, #1
   40eee:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   40ef0:	9b05      	ldr	r3, [sp, #20]
   40ef2:	6063      	str	r3, [r4, #4]
}
   40ef4:	4628      	mov	r0, r5
   40ef6:	b005      	add	sp, #20
   40ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (nrf_addr.sa_family == NRF_AF_INET6) {
   40efa:	2b0a      	cmp	r3, #10
   40efc:	d106      	bne.n	40f0c <nrf91_socket_offload_accept+0x48>
		*addrlen = sizeof(struct sockaddr_in6);
   40efe:	2318      	movs	r3, #24
		nrf_to_z_ipv6(addr, (const struct nrf_sockaddr_in6 *)&nrf_addr);
   40f00:	a902      	add	r1, sp, #8
		*addrlen = sizeof(struct sockaddr_in6);
   40f02:	6033      	str	r3, [r6, #0]
		nrf_to_z_ipv6(addr, (const struct nrf_sockaddr_in6 *)&nrf_addr);
   40f04:	4620      	mov	r0, r4
   40f06:	f7ff fe42 	bl	40b8e <nrf_to_z_ipv6>
   40f0a:	e7f3      	b.n	40ef4 <nrf91_socket_offload_accept+0x30>
	errno = ENOTSUP;
   40f0c:	f7fe fcd0 	bl	3f8b0 <__errno>
   40f10:	2386      	movs	r3, #134	; 0x86
   40f12:	6003      	str	r3, [r0, #0]
		return -1;
   40f14:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   40f18:	e7ec      	b.n	40ef4 <nrf91_socket_offload_accept+0x30>

00040f1a <nrf91_socket_offload_socket>:
{
   40f1a:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   40f1c:	b280      	uxth	r0, r0
   40f1e:	f7ff fcce 	bl	408be <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   40f22:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   40f26:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   40f28:	d106      	bne.n	40f38 <nrf91_socket_offload_socket+0x1e>
		errno = EAFNOSUPPORT;
   40f2a:	f7fe fcc1 	bl	3f8b0 <__errno>
   40f2e:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   40f30:	6003      	str	r3, [r0, #0]
}
   40f32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   40f36:	bd10      	pop	{r4, pc}
	switch (socktype) {
   40f38:	2903      	cmp	r1, #3
   40f3a:	d003      	beq.n	40f44 <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   40f3c:	2904      	cmp	r1, #4
   40f3e:	bf08      	it	eq
   40f40:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   40f44:	4610      	mov	r0, r2
   40f46:	f7ff fcd0 	bl	408ea <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   40f4a:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   40f4e:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   40f50:	d103      	bne.n	40f5a <nrf91_socket_offload_socket+0x40>
		errno = EPROTONOSUPPORT;
   40f52:	f7fe fcad 	bl	3f8b0 <__errno>
   40f56:	237b      	movs	r3, #123	; 0x7b
   40f58:	e7ea      	b.n	40f30 <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   40f5a:	4620      	mov	r0, r4
}
   40f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   40f60:	f7ea b952 	b.w	2b208 <nrf_socket>

00040f64 <nrf91_socket_offload_setsockopt>:
{
   40f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   40f68:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   40f6c:	b086      	sub	sp, #24
   40f6e:	4680      	mov	r8, r0
   40f70:	460c      	mov	r4, r1
   40f72:	4617      	mov	r7, r2
   40f74:	461d      	mov	r5, r3
   40f76:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   40f78:	d002      	beq.n	40f80 <nrf91_socket_offload_setsockopt+0x1c>
   40f7a:	dc1c      	bgt.n	40fb6 <nrf91_socket_offload_setsockopt+0x52>
   40f7c:	2901      	cmp	r1, #1
   40f7e:	d122      	bne.n	40fc6 <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   40f80:	aa03      	add	r2, sp, #12
   40f82:	4639      	mov	r1, r7
   40f84:	4620      	mov	r0, r4
   40f86:	f7e2 fa81 	bl	2348c <z_to_nrf_optname>
   40f8a:	2800      	cmp	r0, #0
   40f8c:	db1b      	blt.n	40fc6 <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   40f8e:	2c01      	cmp	r4, #1
   40f90:	d107      	bne.n	40fa2 <nrf91_socket_offload_setsockopt+0x3e>
   40f92:	2f14      	cmp	r7, #20
   40f94:	d105      	bne.n	40fa2 <nrf91_socket_offload_setsockopt+0x3e>
		nrf_optlen = sizeof(struct nrf_timeval);
   40f96:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   40f98:	682b      	ldr	r3, [r5, #0]
   40f9a:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   40f9c:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   40f9e:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   40fa0:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   40fa2:	9600      	str	r6, [sp, #0]
   40fa4:	462b      	mov	r3, r5
   40fa6:	9a03      	ldr	r2, [sp, #12]
   40fa8:	4621      	mov	r1, r4
   40faa:	4640      	mov	r0, r8
   40fac:	f7ea fa2e 	bl	2b40c <nrf_setsockopt>
}
   40fb0:	b006      	add	sp, #24
   40fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   40fb6:	f240 2302 	movw	r3, #514	; 0x202
   40fba:	4299      	cmp	r1, r3
   40fbc:	d0e0      	beq.n	40f80 <nrf91_socket_offload_setsockopt+0x1c>
   40fbe:	f240 2303 	movw	r3, #515	; 0x203
   40fc2:	4299      	cmp	r1, r3
   40fc4:	e7db      	b.n	40f7e <nrf91_socket_offload_setsockopt+0x1a>
	errno = ENOPROTOOPT;
   40fc6:	f7fe fc73 	bl	3f8b0 <__errno>
   40fca:	236d      	movs	r3, #109	; 0x6d
   40fcc:	6003      	str	r3, [r0, #0]
   40fce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   40fd2:	e7ed      	b.n	40fb0 <nrf91_socket_offload_setsockopt+0x4c>

00040fd4 <nrf91_socket_offload_bind>:
{
   40fd4:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   40fd6:	880a      	ldrh	r2, [r1, #0]
{
   40fd8:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   40fda:	2a01      	cmp	r2, #1
{
   40fdc:	4604      	mov	r4, r0
   40fde:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   40fe0:	d10e      	bne.n	41000 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   40fe2:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   40fe4:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   40fe6:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   40fea:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   40fec:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   40fee:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   40ff0:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   40ff4:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   40ff6:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   40ff8:	f7ea f9f6 	bl	2b3e8 <nrf_bind>
}
   40ffc:	b00a      	add	sp, #40	; 0x28
   40ffe:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   41000:	2a02      	cmp	r2, #2
   41002:	d107      	bne.n	41014 <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   41004:	a901      	add	r1, sp, #4
   41006:	4618      	mov	r0, r3
   41008:	f7ff fea0 	bl	40d4c <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   4100c:	2224      	movs	r2, #36	; 0x24
   4100e:	a901      	add	r1, sp, #4
   41010:	4620      	mov	r0, r4
   41012:	e7f1      	b.n	40ff8 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   41014:	f7fe fc4c 	bl	3f8b0 <__errno>
   41018:	2386      	movs	r3, #134	; 0x86
   4101a:	6003      	str	r3, [r0, #0]
   4101c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   41020:	e7ec      	b.n	40ffc <nrf91_socket_offload_bind+0x28>

00041022 <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   41022:	ea40 0301 	orr.w	r3, r0, r1
   41026:	f033 030f 	bics.w	r3, r3, #15
   4102a:	d101      	bne.n	41030 <dk_set_leds_state+0xe>
   4102c:	f7e2 baa2 	b.w	23574 <dk_set_leds_state.part.7>
}
   41030:	f06f 0015 	mvn.w	r0, #21
   41034:	4770      	bx	lr

00041036 <dk_set_leds>:
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
   41036:	210f      	movs	r1, #15
   41038:	f7ff bff3 	b.w	41022 <dk_set_leds_state>

0004103c <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   4103c:	6843      	ldr	r3, [r0, #4]
   4103e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   41040:	b103      	cbz	r3, 41044 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   41042:	4718      	bx	r3
}
   41044:	4770      	bx	lr

00041046 <response_handler>:
	write_uart_string(response);
   41046:	4608      	mov	r0, r1
   41048:	f7e2 be74 	b.w	23d34 <write_uart_string>

0004104c <at_params_list_init>:
{
   4104c:	b538      	push	{r3, r4, r5, lr}
   4104e:	460d      	mov	r5, r1
	if (list == NULL) {
   41050:	4604      	mov	r4, r0
   41052:	b140      	cbz	r0, 41066 <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   41054:	210c      	movs	r1, #12
   41056:	4628      	mov	r0, r5
   41058:	f000 fb2f 	bl	416ba <k_calloc>
   4105c:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   4105e:	b128      	cbz	r0, 4106c <at_params_list_init+0x20>
	return 0;
   41060:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   41062:	6025      	str	r5, [r4, #0]
}
   41064:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   41066:	f06f 0015 	mvn.w	r0, #21
   4106a:	e7fb      	b.n	41064 <at_params_list_init+0x18>
		return -ENOMEM;
   4106c:	f06f 000b 	mvn.w	r0, #11
   41070:	e7f8      	b.n	41064 <at_params_list_init+0x18>

00041072 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   41072:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   41074:	4604      	mov	r4, r0
   41076:	b148      	cbz	r0, 4108c <at_params_list_free+0x1a>
   41078:	6843      	ldr	r3, [r0, #4]
   4107a:	b13b      	cbz	r3, 4108c <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   4107c:	2500      	movs	r5, #0
	at_params_list_clear(list);
   4107e:	f7e3 fa57 	bl	24530 <at_params_list_clear>
	list->param_count = 0;
   41082:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   41084:	6860      	ldr	r0, [r4, #4]
   41086:	f000 fb13 	bl	416b0 <k_free>
	list->params = NULL;
   4108a:	6065      	str	r5, [r4, #4]
}
   4108c:	bd38      	pop	{r3, r4, r5, pc}

0004108e <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   4108e:	b538      	push	{r3, r4, r5, lr}
   41090:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   41092:	b910      	cbnz	r0, 4109a <at_params_short_put+0xc>
		return -EINVAL;
   41094:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_SHORT;
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
}
   41098:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   4109a:	6843      	ldr	r3, [r0, #4]
   4109c:	2b00      	cmp	r3, #0
   4109e:	d0f9      	beq.n	41094 <at_params_short_put+0x6>
	struct at_param *param = at_params_get(list, index);
   410a0:	f7e3 f9da 	bl	24458 <at_params_get>
	if (param == NULL) {
   410a4:	4604      	mov	r4, r0
   410a6:	2800      	cmp	r0, #0
   410a8:	d0f4      	beq.n	41094 <at_params_short_put+0x6>
	at_param_clear(param);
   410aa:	f7e3 fa1f 	bl	244ec <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   410ae:	2301      	movs	r3, #1
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   410b0:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   410b2:	7023      	strb	r3, [r4, #0]
	return 0;
   410b4:	2000      	movs	r0, #0
   410b6:	e7ef      	b.n	41098 <at_params_short_put+0xa>

000410b8 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   410b8:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   410ba:	b910      	cbnz	r0, 410c2 <at_params_empty_put+0xa>
		return -EINVAL;
   410bc:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   410c0:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   410c2:	6843      	ldr	r3, [r0, #4]
   410c4:	2b00      	cmp	r3, #0
   410c6:	d0f9      	beq.n	410bc <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   410c8:	f7e3 f9c6 	bl	24458 <at_params_get>
	if (param == NULL) {
   410cc:	4604      	mov	r4, r0
   410ce:	2800      	cmp	r0, #0
   410d0:	d0f4      	beq.n	410bc <at_params_empty_put+0x4>
	at_param_clear(param);
   410d2:	f7e3 fa0b 	bl	244ec <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   410d6:	2305      	movs	r3, #5
	param->value.int_val = 0;
   410d8:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   410da:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   410dc:	60a0      	str	r0, [r4, #8]
	return 0;
   410de:	e7ef      	b.n	410c0 <at_params_empty_put+0x8>

000410e0 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   410e0:	b538      	push	{r3, r4, r5, lr}
   410e2:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   410e4:	b910      	cbnz	r0, 410ec <at_params_int_put+0xc>
		return -EINVAL;
   410e6:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   410ea:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   410ec:	6843      	ldr	r3, [r0, #4]
   410ee:	2b00      	cmp	r3, #0
   410f0:	d0f9      	beq.n	410e6 <at_params_int_put+0x6>
	struct at_param *param = at_params_get(list, index);
   410f2:	f7e3 f9b1 	bl	24458 <at_params_get>
	if (param == NULL) {
   410f6:	4604      	mov	r4, r0
   410f8:	2800      	cmp	r0, #0
   410fa:	d0f4      	beq.n	410e6 <at_params_int_put+0x6>
	at_param_clear(param);
   410fc:	f7e3 f9f6 	bl	244ec <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   41100:	2302      	movs	r3, #2
	param->value.int_val = value;
   41102:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   41104:	7023      	strb	r3, [r4, #0]
	return 0;
   41106:	2000      	movs	r0, #0
   41108:	e7ef      	b.n	410ea <at_params_int_put+0xa>

0004110a <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   4110a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4110c:	4616      	mov	r6, r2
   4110e:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   41110:	b910      	cbnz	r0, 41118 <at_params_string_put+0xe>
		return -EINVAL;
   41112:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   41116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   41118:	6843      	ldr	r3, [r0, #4]
   4111a:	2b00      	cmp	r3, #0
   4111c:	d0f9      	beq.n	41112 <at_params_string_put+0x8>
   4111e:	2a00      	cmp	r2, #0
   41120:	d0f7      	beq.n	41112 <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   41122:	f7e3 f999 	bl	24458 <at_params_get>
	if (param == NULL) {
   41126:	4604      	mov	r4, r0
   41128:	2800      	cmp	r0, #0
   4112a:	d0f2      	beq.n	41112 <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   4112c:	1c68      	adds	r0, r5, #1
   4112e:	f7f8 f9d5 	bl	394dc <k_malloc>
	if (param_value == NULL) {
   41132:	4607      	mov	r7, r0
   41134:	b160      	cbz	r0, 41150 <at_params_string_put+0x46>
   41136:	462a      	mov	r2, r5
   41138:	4631      	mov	r1, r6
   4113a:	f000 fc3a 	bl	419b2 <memcpy>
	at_param_clear(param);
   4113e:	4620      	mov	r0, r4
   41140:	f7e3 f9d4 	bl	244ec <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   41144:	2303      	movs	r3, #3
	param->size = str_len;
   41146:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   41148:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   4114a:	60a7      	str	r7, [r4, #8]
	return 0;
   4114c:	2000      	movs	r0, #0
   4114e:	e7e2      	b.n	41116 <at_params_string_put+0xc>
		return -ENOMEM;
   41150:	f06f 000b 	mvn.w	r0, #11
   41154:	e7df      	b.n	41116 <at_params_string_put+0xc>

00041156 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			 const u32_t *array, size_t array_len)
{
   41156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41158:	4616      	mov	r6, r2
   4115a:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   4115c:	b910      	cbnz	r0, 41164 <at_params_array_put+0xe>
		return -EINVAL;
   4115e:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   41162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   41164:	6843      	ldr	r3, [r0, #4]
   41166:	2b00      	cmp	r3, #0
   41168:	d0f9      	beq.n	4115e <at_params_array_put+0x8>
   4116a:	2a00      	cmp	r2, #0
   4116c:	d0f7      	beq.n	4115e <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   4116e:	f7e3 f973 	bl	24458 <at_params_get>
	if (param == NULL) {
   41172:	4604      	mov	r4, r0
   41174:	2800      	cmp	r0, #0
   41176:	d0f2      	beq.n	4115e <at_params_array_put+0x8>
	u32_t *param_value = (u32_t *)k_malloc(array_len);
   41178:	4628      	mov	r0, r5
   4117a:	f7f8 f9af 	bl	394dc <k_malloc>
	if (param_value == NULL) {
   4117e:	4607      	mov	r7, r0
   41180:	b160      	cbz	r0, 4119c <at_params_array_put+0x46>
   41182:	462a      	mov	r2, r5
   41184:	4631      	mov	r1, r6
   41186:	f000 fc14 	bl	419b2 <memcpy>
	at_param_clear(param);
   4118a:	4620      	mov	r0, r4
   4118c:	f7e3 f9ae 	bl	244ec <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   41190:	2304      	movs	r3, #4
	param->size = array_len;
   41192:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   41194:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   41196:	60a7      	str	r7, [r4, #8]
	return 0;
   41198:	2000      	movs	r0, #0
   4119a:	e7e2      	b.n	41162 <at_params_array_put+0xc>
		return -ENOMEM;
   4119c:	f06f 000b 	mvn.w	r0, #11
   411a0:	e7df      	b.n	41162 <at_params_array_put+0xc>

000411a2 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			u16_t *value)
{
   411a2:	b510      	push	{r4, lr}
   411a4:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   411a6:	b910      	cbnz	r0, 411ae <at_params_short_get+0xc>
		return -EINVAL;
   411a8:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (u16_t)param->value.int_val;
	return 0;
}
   411ac:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   411ae:	6843      	ldr	r3, [r0, #4]
   411b0:	2b00      	cmp	r3, #0
   411b2:	d0f9      	beq.n	411a8 <at_params_short_get+0x6>
   411b4:	2a00      	cmp	r2, #0
   411b6:	d0f7      	beq.n	411a8 <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   411b8:	f7e3 f94e 	bl	24458 <at_params_get>
	if (param == NULL) {
   411bc:	2800      	cmp	r0, #0
   411be:	d0f3      	beq.n	411a8 <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   411c0:	7803      	ldrb	r3, [r0, #0]
   411c2:	2b01      	cmp	r3, #1
   411c4:	d1f0      	bne.n	411a8 <at_params_short_get+0x6>
	*value = (u16_t)param->value.int_val;
   411c6:	6883      	ldr	r3, [r0, #8]
	return 0;
   411c8:	2000      	movs	r0, #0
	*value = (u16_t)param->value.int_val;
   411ca:	8023      	strh	r3, [r4, #0]
	return 0;
   411cc:	e7ee      	b.n	411ac <at_params_short_get+0xa>

000411ce <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      u32_t *value)
{
   411ce:	b510      	push	{r4, lr}
   411d0:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   411d2:	b910      	cbnz	r0, 411da <at_params_int_get+0xc>
		return -EINVAL;
   411d4:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   411d8:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   411da:	6843      	ldr	r3, [r0, #4]
   411dc:	2b00      	cmp	r3, #0
   411de:	d0f9      	beq.n	411d4 <at_params_int_get+0x6>
   411e0:	2a00      	cmp	r2, #0
   411e2:	d0f7      	beq.n	411d4 <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   411e4:	f7e3 f938 	bl	24458 <at_params_get>
	if (param == NULL) {
   411e8:	2800      	cmp	r0, #0
   411ea:	d0f3      	beq.n	411d4 <at_params_int_get+0x6>
	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   411ec:	7803      	ldrb	r3, [r0, #0]
   411ee:	3b01      	subs	r3, #1
   411f0:	2b01      	cmp	r3, #1
   411f2:	d8ef      	bhi.n	411d4 <at_params_int_get+0x6>
	*value = param->value.int_val;
   411f4:	6883      	ldr	r3, [r0, #8]
	return 0;
   411f6:	2000      	movs	r0, #0
	*value = param->value.int_val;
   411f8:	6023      	str	r3, [r4, #0]
	return 0;
   411fa:	e7ed      	b.n	411d8 <at_params_int_get+0xa>

000411fc <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   411fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   411fe:	4616      	mov	r6, r2
   41200:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   41202:	b910      	cbnz	r0, 4120a <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   41204:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   41208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   4120a:	6843      	ldr	r3, [r0, #4]
   4120c:	2b00      	cmp	r3, #0
   4120e:	d0f9      	beq.n	41204 <at_params_string_get+0x8>
   41210:	2a00      	cmp	r2, #0
   41212:	d0f7      	beq.n	41204 <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   41214:	2c00      	cmp	r4, #0
   41216:	d0f5      	beq.n	41204 <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   41218:	f7e3 f91e 	bl	24458 <at_params_get>
	if (param == NULL) {
   4121c:	4607      	mov	r7, r0
   4121e:	2800      	cmp	r0, #0
   41220:	d0f0      	beq.n	41204 <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   41222:	7803      	ldrb	r3, [r0, #0]
   41224:	2b03      	cmp	r3, #3
   41226:	d1ed      	bne.n	41204 <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   41228:	f7e3 f938 	bl	2449c <at_param_size>
	if (*len < param_len) {
   4122c:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   4122e:	4605      	mov	r5, r0
	if (*len < param_len) {
   41230:	4283      	cmp	r3, r0
   41232:	d307      	bcc.n	41244 <at_params_string_get+0x48>
   41234:	4602      	mov	r2, r0
   41236:	68b9      	ldr	r1, [r7, #8]
   41238:	4630      	mov	r0, r6
   4123a:	f000 fbba 	bl	419b2 <memcpy>
	*len = param_len;
   4123e:	6025      	str	r5, [r4, #0]
	return 0;
   41240:	2000      	movs	r0, #0
   41242:	e7e1      	b.n	41208 <at_params_string_get+0xc>
		return -ENOMEM;
   41244:	f06f 000b 	mvn.w	r0, #11
   41248:	e7de      	b.n	41208 <at_params_string_get+0xc>

0004124a <at_params_valid_count_get>:

	return 0;
}

u32_t at_params_valid_count_get(const struct at_param_list *list)
{
   4124a:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   4124c:	4605      	mov	r5, r0
   4124e:	b180      	cbz	r0, 41272 <at_params_valid_count_get+0x28>
   41250:	6843      	ldr	r3, [r0, #4]
   41252:	b173      	cbz	r3, 41272 <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   41254:	2100      	movs	r1, #0
   41256:	f7e3 f8ff 	bl	24458 <at_params_get>
	size_t valid_i = 0;
   4125a:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   4125c:	b108      	cbz	r0, 41262 <at_params_valid_count_get+0x18>
   4125e:	7803      	ldrb	r3, [r0, #0]
   41260:	b90b      	cbnz	r3, 41266 <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   41262:	4620      	mov	r0, r4
   41264:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   41266:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   41268:	4621      	mov	r1, r4
   4126a:	4628      	mov	r0, r5
   4126c:	f7e3 f8f4 	bl	24458 <at_params_get>
   41270:	e7f4      	b.n	4125c <at_params_valid_count_get+0x12>
		return -EINVAL;
   41272:	f06f 0415 	mvn.w	r4, #21
   41276:	e7f4      	b.n	41262 <at_params_valid_count_get+0x18>

00041278 <json_add_str>:
{
   41278:	b538      	push	{r3, r4, r5, lr}
   4127a:	460d      	mov	r5, r1
	if (parent == NULL || str == NULL || item == NULL) {
   4127c:	4604      	mov	r4, r0
   4127e:	b158      	cbz	r0, 41298 <json_add_str+0x20>
   41280:	b152      	cbz	r2, 41298 <json_add_str+0x20>
	json_str = cJSON_CreateString(item);
   41282:	4610      	mov	r0, r2
   41284:	f7e1 feb8 	bl	22ff8 <cJSON_CreateString>
	if (json_str == NULL) {
   41288:	4602      	mov	r2, r0
   4128a:	b140      	cbz	r0, 4129e <json_add_str+0x26>
	cJSON_AddItemToObject(parent, str, item);
   4128c:	4620      	mov	r0, r4
   4128e:	4629      	mov	r1, r5
   41290:	f7ff fa9a 	bl	407c8 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   41294:	2000      	movs	r0, #0
}
   41296:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   41298:	f06f 0015 	mvn.w	r0, #21
   4129c:	e7fb      	b.n	41296 <json_add_str+0x1e>
		return -ENOMEM;
   4129e:	f06f 000b 	mvn.w	r0, #11
   412a2:	e7f8      	b.n	41296 <json_add_str+0x1e>

000412a4 <json_add_data>:
{
   412a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   412a6:	4604      	mov	r4, r0
   412a8:	b09b      	sub	sp, #108	; 0x6c
	if (param == NULL || json_obj == NULL) {
   412aa:	460f      	mov	r7, r1
   412ac:	b921      	cbnz	r1, 412b8 <json_add_data+0x14>
		return -EINVAL;
   412ae:	f06f 0615 	mvn.w	r6, #21
}
   412b2:	4630      	mov	r0, r6
   412b4:	b01b      	add	sp, #108	; 0x6c
   412b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(data_name, 0, MODEM_INFO_MAX_RESPONSE_SIZE);
   412b8:	2264      	movs	r2, #100	; 0x64
   412ba:	2100      	movs	r1, #0
   412bc:	a801      	add	r0, sp, #4
   412be:	f000 fb98 	bl	419f2 <memset>
	ret = modem_info_name_get(param->type,
   412c2:	a901      	add	r1, sp, #4
   412c4:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
   412c8:	f7e3 f9d6 	bl	24678 <modem_info_name_get>
	if (ret < 0) {
   412cc:	1e05      	subs	r5, r0, #0
   412ce:	dbee      	blt.n	412ae <json_add_data+0xa>
	data_type = modem_info_type_get(param->type);
   412d0:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
   412d4:	f7e3 f9c6 	bl	24664 <modem_info_type_get>
	if (data_type == AT_PARAM_TYPE_STRING &&
   412d8:	2803      	cmp	r0, #3
   412da:	d113      	bne.n	41304 <json_add_data+0x60>
   412dc:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   412e0:	2b03      	cmp	r3, #3
   412e2:	d00f      	beq.n	41304 <json_add_data+0x60>
		total_len += strlen(param->value_string);
   412e4:	3402      	adds	r4, #2
   412e6:	4620      	mov	r0, r4
   412e8:	f7d8 fdfc 	bl	19ee4 <strlen>
		ret += json_add_str(json_obj, data_name, param->value_string);
   412ec:	4622      	mov	r2, r4
		total_len += strlen(param->value_string);
   412ee:	4606      	mov	r6, r0
		ret += json_add_str(json_obj, data_name, param->value_string);
   412f0:	a901      	add	r1, sp, #4
   412f2:	4638      	mov	r0, r7
   412f4:	f7ff ffc0 	bl	41278 <json_add_str>
   412f8:	4428      	add	r0, r5
	if (ret < 0) {
   412fa:	ea36 0620 	bics.w	r6, r6, r0, asr #32
   412fe:	bf28      	it	cs
   41300:	4606      	movcs	r6, r0
   41302:	e7d6      	b.n	412b2 <json_add_data+0xe>
		ret += json_add_num(json_obj, data_name, param->value);
   41304:	8820      	ldrh	r0, [r4, #0]
   41306:	f7d7 f9cd 	bl	186a4 <__aeabi_ui2d>
	json_num = cJSON_CreateNumber(num);
   4130a:	ec41 0b10 	vmov	d0, r0, r1
   4130e:	f7d9 fa8f 	bl	1a830 <cJSON_CreateNumber>
	if (json_num == NULL) {
   41312:	4602      	mov	r2, r0
   41314:	b138      	cbz	r0, 41326 <json_add_data+0x82>
	cJSON_AddItemToObject(parent, str, item);
   41316:	4638      	mov	r0, r7
   41318:	a901      	add	r1, sp, #4
   4131a:	f7ff fa55 	bl	407c8 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_num);
   4131e:	2000      	movs	r0, #0
		ret += json_add_num(json_obj, data_name, param->value);
   41320:	4428      	add	r0, r5
		total_len += sizeof(u16_t);
   41322:	2602      	movs	r6, #2
   41324:	e7e9      	b.n	412fa <json_add_data+0x56>
		return -ENOMEM;
   41326:	f06f 000b 	mvn.w	r0, #11
   4132a:	e7f9      	b.n	41320 <json_add_data+0x7c>

0004132c <sim_data_add>:
{
   4132c:	b570      	push	{r4, r5, r6, lr}
   4132e:	460d      	mov	r5, r1
	if (sim == NULL || json_obj == NULL) {
   41330:	4606      	mov	r6, r0
   41332:	b180      	cbz	r0, 41356 <sim_data_add+0x2a>
   41334:	b179      	cbz	r1, 41356 <sim_data_add+0x2a>
	total_len = json_add_data(&sim->uicc, json_obj);
   41336:	f7ff ffb5 	bl	412a4 <json_add_data>
	total_len += json_add_data(&sim->iccid, json_obj);
   4133a:	4629      	mov	r1, r5
	total_len = json_add_data(&sim->uicc, json_obj);
   4133c:	4604      	mov	r4, r0
	total_len += json_add_data(&sim->iccid, json_obj);
   4133e:	f106 0070 	add.w	r0, r6, #112	; 0x70
   41342:	f7ff ffaf 	bl	412a4 <json_add_data>
	total_len += json_add_data(&sim->imsi, json_obj);
   41346:	4629      	mov	r1, r5
	total_len += json_add_data(&sim->iccid, json_obj);
   41348:	4404      	add	r4, r0
	total_len += json_add_data(&sim->imsi, json_obj);
   4134a:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
   4134e:	f7ff ffa9 	bl	412a4 <json_add_data>
   41352:	4420      	add	r0, r4
}
   41354:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   41356:	f06f 0015 	mvn.w	r0, #21
   4135a:	e7fb      	b.n	41354 <sim_data_add+0x28>

0004135c <cloud_notify_event>:
 */
static inline void cloud_notify_event(struct cloud_backend *backend,
			struct cloud_event *evt,
			void *user_data)
{
	if (backend->config->handler) {
   4135c:	6843      	ldr	r3, [r0, #4]
   4135e:	685b      	ldr	r3, [r3, #4]
   41360:	b103      	cbz	r3, 41364 <cloud_notify_event+0x8>
		backend->config->handler(backend, evt, user_data);
   41362:	4718      	bx	r3
	}
}
   41364:	4770      	bx	lr

00041366 <user_data_set>:
}

static int user_data_set(const struct cloud_backend *const backend,
			 void *user_data)
{
	backend->config->user_data = user_data;
   41366:	6843      	ldr	r3, [r0, #4]

	return 0;
}
   41368:	2000      	movs	r0, #0
	backend->config->user_data = user_data;
   4136a:	60d9      	str	r1, [r3, #12]
}
   4136c:	4770      	bx	lr

0004136e <ping>:
{
   4136e:	b508      	push	{r3, lr}
	nct_process();
   41370:	f7e5 f906 	bl	26580 <nct_process>
}
   41374:	2000      	movs	r0, #0
   41376:	bd08      	pop	{r3, pc}

00041378 <input>:
   41378:	b508      	push	{r3, lr}
   4137a:	f7e5 f901 	bl	26580 <nct_process>
   4137e:	2000      	movs	r0, #0
   41380:	bd08      	pop	{r3, pc}

00041382 <connect>:
{
   41382:	b538      	push	{r3, r4, r5, lr}
   41384:	4605      	mov	r5, r0
	err = nrf_cloud_connect(NULL);
   41386:	2000      	movs	r0, #0
   41388:	f7e3 fed8 	bl	2513c <nrf_cloud_connect>
	backend->config->socket = nct_socket_get();
   4138c:	686d      	ldr	r5, [r5, #4]
	err = nrf_cloud_connect(NULL);
   4138e:	4604      	mov	r4, r0
	backend->config->socket = nct_socket_get();
   41390:	f7e5 f902 	bl	26598 <nct_socket_get>
   41394:	60a8      	str	r0, [r5, #8]
}
   41396:	4620      	mov	r0, r4
   41398:	bd38      	pop	{r3, r4, r5, pc}

0004139a <disconnect>:
	return nrf_cloud_disconnect();
   4139a:	f7e3 bedb 	b.w	25154 <nrf_cloud_disconnect>

0004139e <json_add_str>:
{
   4139e:	b538      	push	{r3, r4, r5, lr}
   413a0:	4604      	mov	r4, r0
	json_str = cJSON_CreateString(item);
   413a2:	4610      	mov	r0, r2
{
   413a4:	460d      	mov	r5, r1
	json_str = cJSON_CreateString(item);
   413a6:	f7e1 fe27 	bl	22ff8 <cJSON_CreateString>
	if (json_str == NULL) {
   413aa:	4602      	mov	r2, r0
   413ac:	b128      	cbz	r0, 413ba <json_add_str+0x1c>
	cJSON_AddItemToObject(parent, str, item);
   413ae:	4620      	mov	r0, r4
   413b0:	4629      	mov	r1, r5
   413b2:	f7ff fa09 	bl	407c8 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   413b6:	2000      	movs	r0, #0
}
   413b8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   413ba:	f06f 000b 	mvn.w	r0, #11
   413be:	e7fb      	b.n	413b8 <json_add_str+0x1a>

000413c0 <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   413c0:	b108      	cbz	r0, 413c6 <json_object_decode+0x6>
   413c2:	f7ff b9fc 	b.w	407be <cJSON_GetObjectItem>
}
   413c6:	4770      	bx	lr

000413c8 <json_add_null>:
{
   413c8:	b538      	push	{r3, r4, r5, lr}
   413ca:	4604      	mov	r4, r0
   413cc:	460d      	mov	r5, r1
	json_null = cJSON_CreateNull();
   413ce:	f7e1 fe07 	bl	22fe0 <cJSON_CreateNull>
	if (json_null == NULL) {
   413d2:	4602      	mov	r2, r0
   413d4:	b128      	cbz	r0, 413e2 <json_add_null+0x1a>
	cJSON_AddItemToObject(parent, str, item);
   413d6:	4620      	mov	r0, r4
   413d8:	4629      	mov	r1, r5
   413da:	f7ff f9f5 	bl	407c8 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_null);
   413de:	2000      	movs	r0, #0
}
   413e0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   413e2:	f06f 000b 	mvn.w	r0, #11
   413e6:	e7fb      	b.n	413e0 <json_add_null+0x18>

000413e8 <json_decode_and_alloc>:
{
   413e8:	b538      	push	{r3, r4, r5, lr}
   413ea:	460d      	mov	r5, r1
	if (obj == NULL || (obj->type != cJSON_String)) {
   413ec:	4604      	mov	r4, r0
   413ee:	b110      	cbz	r0, 413f6 <json_decode_and_alloc+0xe>
   413f0:	68c3      	ldr	r3, [r0, #12]
   413f2:	2b10      	cmp	r3, #16
   413f4:	d004      	beq.n	41400 <json_decode_and_alloc+0x18>
		data->ptr = NULL;
   413f6:	2300      	movs	r3, #0
		return -ENOENT;
   413f8:	f06f 0001 	mvn.w	r0, #1
		data->ptr = NULL;
   413fc:	606b      	str	r3, [r5, #4]
}
   413fe:	bd38      	pop	{r3, r4, r5, pc}
	data->len = strlen(obj->valuestring);
   41400:	6900      	ldr	r0, [r0, #16]
   41402:	f7d8 fd6f 	bl	19ee4 <strlen>
   41406:	6028      	str	r0, [r5, #0]
	data->ptr = nrf_cloud_malloc(data->len + 1);
   41408:	3001      	adds	r0, #1
   4140a:	f7f8 f867 	bl	394dc <k_malloc>
   4140e:	6068      	str	r0, [r5, #4]
	if (data->ptr == NULL) {
   41410:	b130      	cbz	r0, 41420 <json_decode_and_alloc+0x38>
	strncpy((char *)data->ptr, obj->valuestring, data->len + 1);
   41412:	682a      	ldr	r2, [r5, #0]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   41414:	6921      	ldr	r1, [r4, #16]
   41416:	3201      	adds	r2, #1
   41418:	f000 fcd6 	bl	41dc8 <strncpy>
	return 0;
   4141c:	2000      	movs	r0, #0
   4141e:	e7ee      	b.n	413fe <json_decode_and_alloc+0x16>
		return -ENOMEM;
   41420:	f06f 000b 	mvn.w	r0, #11
   41424:	e7eb      	b.n	413fe <json_decode_and_alloc+0x16>

00041426 <nrf_codec_init>:
{
   41426:	b508      	push	{r3, lr}
	cJSON_Init();
   41428:	f7e1 fe16 	bl	23058 <cJSON_Init>
}
   4142c:	2000      	movs	r0, #0
   4142e:	bd08      	pop	{r3, pc}

00041430 <cc_disconnection_handler>:
}

static int cc_disconnection_handler(const struct nct_evt *nct_evt)
{
	return 0; /* Nothing to do */
}
   41430:	2000      	movs	r0, #0
   41432:	4770      	bx	lr

00041434 <disconnection_handler>:
{
   41434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct nrf_cloud_evt evt = {
   41436:	2210      	movs	r2, #16
   41438:	2100      	movs	r1, #0
   4143a:	4668      	mov	r0, sp
   4143c:	f000 fad9 	bl	419f2 <memset>
   41440:	2308      	movs	r3, #8
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   41442:	4669      	mov	r1, sp
   41444:	2001      	movs	r0, #1
	const struct nrf_cloud_evt evt = {
   41446:	f88d 3000 	strb.w	r3, [sp]
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   4144a:	f7e3 fe1b 	bl	25084 <nfsm_set_current_state_and_notify>
}
   4144e:	2000      	movs	r0, #0
   41450:	b005      	add	sp, #20
   41452:	f85d fb04 	ldr.w	pc, [sp], #4

00041456 <dc_rx_data_handler>:
	}
	return 0;
}

static int dc_rx_data_handler(const struct nct_evt *nct_evt)
{
   41456:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct nrf_cloud_evt cloud_evt = {
   41458:	2400      	movs	r4, #0
   4145a:	2306      	movs	r3, #6
   4145c:	e9cd 4400 	strd	r4, r4, [sp]
   41460:	f88d 3000 	strb.w	r3, [sp]
   41464:	6843      	ldr	r3, [r0, #4]
   41466:	e893 0003 	ldmia.w	r3, {r0, r1}
   4146a:	ab04      	add	r3, sp, #16
   4146c:	e903 0003 	stmdb	r3, {r0, r1}
		.type = NRF_CLOUD_EVT_RX_DATA,
		.data = nct_evt->param.dc->data,
	};

	/* All data is forwared to the app */
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   41470:	f7e3 fe02 	bl	25078 <nfsm_get_current_state>
   41474:	4669      	mov	r1, sp
   41476:	f7e3 fe05 	bl	25084 <nfsm_set_current_state_and_notify>

	return 0;
}
   4147a:	4620      	mov	r0, r4
   4147c:	b004      	add	sp, #16
   4147e:	bd10      	pop	{r4, pc}

00041480 <dc_connection_handler>:
{
   41480:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (nct_evt->status == 0) {
   41482:	6801      	ldr	r1, [r0, #0]
   41484:	b951      	cbnz	r1, 4149c <dc_connection_handler+0x1c>
		struct nrf_cloud_evt evt = {
   41486:	2210      	movs	r2, #16
   41488:	4668      	mov	r0, sp
   4148a:	f000 fab2 	bl	419f2 <memset>
   4148e:	2304      	movs	r3, #4
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   41490:	4669      	mov	r1, sp
   41492:	2009      	movs	r0, #9
		struct nrf_cloud_evt evt = {
   41494:	f88d 3000 	strb.w	r3, [sp]
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   41498:	f7e3 fdf4 	bl	25084 <nfsm_set_current_state_and_notify>
}
   4149c:	2000      	movs	r0, #0
   4149e:	b005      	add	sp, #20
   414a0:	f85d fb04 	ldr.w	pc, [sp], #4

000414a4 <cc_tx_ack_in_state_requested_handler>:
{
   414a4:	b508      	push	{r3, lr}
	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   414a6:	f241 632e 	movw	r3, #5678	; 0x162e
   414aa:	6842      	ldr	r2, [r0, #4]
   414ac:	429a      	cmp	r2, r3
   414ae:	d103      	bne.n	414b8 <cc_tx_ack_in_state_requested_handler+0x14>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   414b0:	2100      	movs	r1, #0
   414b2:	2005      	movs	r0, #5
   414b4:	f7e3 fde6 	bl	25084 <nfsm_set_current_state_and_notify>
}
   414b8:	2000      	movs	r0, #0
   414ba:	bd08      	pop	{r3, pc}

000414bc <cc_tx_ack_handler>:
	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   414bc:	f241 622e 	movw	r2, #5678	; 0x162e
   414c0:	6843      	ldr	r3, [r0, #4]
{
   414c2:	b510      	push	{r4, lr}
	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   414c4:	4293      	cmp	r3, r2
   414c6:	d105      	bne.n	414d4 <cc_tx_ack_handler+0x18>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   414c8:	2100      	movs	r1, #0
   414ca:	2005      	movs	r0, #5
   414cc:	f7e3 fdda 	bl	25084 <nfsm_set_current_state_and_notify>
	return 0;
   414d0:	2400      	movs	r4, #0
   414d2:	e00b      	b.n	414ec <cc_tx_ack_handler+0x30>
	if (nct_evt->param.data_id == PAIRING_STATUS_REPORT_ID) {
   414d4:	f641 62d2 	movw	r2, #7890	; 0x1ed2
   414d8:	4293      	cmp	r3, r2
   414da:	d1f9      	bne.n	414d0 <cc_tx_ack_handler+0x14>
		err = nct_dc_connect();
   414dc:	f7e4 ffd2 	bl	26484 <nct_dc_connect>
		if (err) {
   414e0:	4604      	mov	r4, r0
   414e2:	b918      	cbnz	r0, 414ec <cc_tx_ack_handler+0x30>
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTING, NULL);
   414e4:	4601      	mov	r1, r0
   414e6:	2008      	movs	r0, #8
   414e8:	f7e3 fdcc 	bl	25084 <nfsm_set_current_state_and_notify>
}
   414ec:	4620      	mov	r0, r4
   414ee:	bd10      	pop	{r4, pc}

000414f0 <connection_handler>:
{
   414f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (nct_evt->status != 0) {
   414f2:	6803      	ldr	r3, [r0, #0]
   414f4:	b153      	cbz	r3, 4150c <connection_handler+0x1c>
		evt.type = NRF_CLOUD_EVT_ERROR;
   414f6:	23ff      	movs	r3, #255	; 0xff
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   414f8:	4669      	mov	r1, sp
   414fa:	2002      	movs	r0, #2
		evt.type = NRF_CLOUD_EVT_ERROR;
   414fc:	f88d 3000 	strb.w	r3, [sp]
		return 0;
   41500:	2400      	movs	r4, #0
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   41502:	f7e3 fdbf 	bl	25084 <nfsm_set_current_state_and_notify>
}
   41506:	4620      	mov	r0, r4
   41508:	b004      	add	sp, #16
   4150a:	bd10      	pop	{r4, pc}
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   4150c:	2301      	movs	r3, #1
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   4150e:	4669      	mov	r1, sp
   41510:	2002      	movs	r0, #2
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   41512:	f88d 3000 	strb.w	r3, [sp]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   41516:	f7e3 fdb5 	bl	25084 <nfsm_set_current_state_and_notify>
	err = nct_cc_connect();
   4151a:	f7e4 fea5 	bl	26268 <nct_cc_connect>
	if (err) {
   4151e:	4604      	mov	r4, r0
   41520:	2800      	cmp	r0, #0
   41522:	d1f0      	bne.n	41506 <connection_handler+0x16>
	nfsm_set_current_state_and_notify(STATE_CC_CONNECTING, NULL);
   41524:	4601      	mov	r1, r0
   41526:	2003      	movs	r0, #3
   41528:	f7e3 fdac 	bl	25084 <nfsm_set_current_state_and_notify>
	return 0;
   4152c:	e7eb      	b.n	41506 <connection_handler+0x16>

0004152e <dc_disconnection_handler>:
   4152e:	2000      	movs	r0, #0
   41530:	4770      	bx	lr

00041532 <dc_tx_ack_handler>:
   41532:	2000      	movs	r0, #0
   41534:	4770      	bx	lr

00041536 <nfsm_init>:
}
   41536:	2000      	movs	r0, #0
   41538:	4770      	bx	lr

0004153a <nct_dc_send>:
	return dc_send(dc_data, MQTT_QOS_1_AT_LEAST_ONCE);
   4153a:	2101      	movs	r1, #1
   4153c:	f7e4 ba58 	b.w	259f0 <dc_send>

00041540 <nct_dc_stream>:
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
   41540:	2100      	movs	r1, #0
   41542:	f7e4 ba55 	b.w	259f0 <dc_send>

00041546 <error_evt_send.isra.1>:
static int error_evt_send(const struct download_client *dl, int error)
   41546:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct download_client_evt evt = {
   41548:	2300      	movs	r3, #0
   4154a:	9301      	str	r3, [sp, #4]
   4154c:	9303      	str	r3, [sp, #12]
   4154e:	2301      	movs	r3, #1
		.error = -error
   41550:	4249      	negs	r1, r1
	const struct download_client_evt evt = {
   41552:	f88d 3004 	strb.w	r3, [sp, #4]
   41556:	9102      	str	r1, [sp, #8]
	return dl->callback(&evt);
   41558:	6803      	ldr	r3, [r0, #0]
   4155a:	a801      	add	r0, sp, #4
   4155c:	4798      	blx	r3
}
   4155e:	b005      	add	sp, #20
   41560:	f85d fb04 	ldr.w	pc, [sp], #4

00041564 <download_client_file_size_get>:
	k_thread_resume(client->tid);
}

int download_client_file_size_get(struct download_client *client, size_t *size)
{
	if (!client || !size) {
   41564:	b130      	cbz	r0, 41574 <download_client_file_size_get+0x10>
   41566:	b129      	cbz	r1, 41574 <download_client_file_size_get+0x10>
		return -EINVAL;
	}

	*size = client->file_size;
   41568:	f241 0308 	movw	r3, #4104	; 0x1008
   4156c:	58c3      	ldr	r3, [r0, r3]

	return 0;
   4156e:	2000      	movs	r0, #0
	*size = client->file_size;
   41570:	600b      	str	r3, [r1, #0]
	return 0;
   41572:	4770      	bx	lr
		return -EINVAL;
   41574:	f06f 0015 	mvn.w	r0, #21
}
   41578:	4770      	bx	lr

0004157a <aws_jobs_cmp>:

bool aws_jobs_cmp(const char *sub, const char *pub, size_t pub_len,
		 const u8_t *suffix)
{
   4157a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4157e:	460c      	mov	r4, r1
   41580:	4690      	mov	r8, r2
   41582:	461d      	mov	r5, r3
	int ret;

	if (sub == NULL || pub == NULL || suffix == NULL ||
   41584:	4606      	mov	r6, r0
   41586:	b328      	cbz	r0, 415d4 <aws_jobs_cmp+0x5a>
   41588:	b331      	cbz	r1, 415d8 <aws_jobs_cmp+0x5e>
   4158a:	b33b      	cbz	r3, 415dc <aws_jobs_cmp+0x62>
   4158c:	7803      	ldrb	r3, [r0, #0]
   4158e:	b33b      	cbz	r3, 415e0 <aws_jobs_cmp+0x66>
	    sub[0] == '\0' || pub[0] == '\0') {
   41590:	780b      	ldrb	r3, [r1, #0]
   41592:	b32b      	cbz	r3, 415e0 <aws_jobs_cmp+0x66>
		return false;
	}

	size_t sub_len = strlen(sub);
   41594:	f7d8 fca6 	bl	19ee4 <strlen>
   41598:	4607      	mov	r7, r0
	size_t suff_len = strlen(suffix);
   4159a:	4628      	mov	r0, r5
   4159c:	f7d8 fca2 	bl	19ee4 <strlen>

	if (sub[sub_len - 1] == '#') {
   415a0:	19f3      	adds	r3, r6, r7
   415a2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
	size_t suff_len = strlen(suffix);
   415a6:	4681      	mov	r9, r0
	if (sub[sub_len - 1] == '#') {
   415a8:	2b23      	cmp	r3, #35	; 0x23
		/* Strip trailing '/#' */
		sub_len -= 2;
   415aa:	bf08      	it	eq
   415ac:	3f02      	subeq	r7, #2
	}

	ret = strncmp(sub, pub, sub_len);
   415ae:	463a      	mov	r2, r7
   415b0:	4621      	mov	r1, r4
   415b2:	4630      	mov	r0, r6
   415b4:	f000 fbf6 	bl	41da4 <strncmp>
	if (ret == 0 && suff_len > 0) {
   415b8:	b948      	cbnz	r0, 415ce <aws_jobs_cmp+0x54>
   415ba:	f1b9 0f00 	cmp.w	r9, #0
   415be:	d006      	beq.n	415ce <aws_jobs_cmp+0x54>
		/* Everything up until suffix is correct, check suffix */
		return strncmp(&pub[pub_len - suff_len], suffix, suff_len) == 0;
   415c0:	eba8 0009 	sub.w	r0, r8, r9
   415c4:	464a      	mov	r2, r9
   415c6:	4629      	mov	r1, r5
   415c8:	4420      	add	r0, r4
   415ca:	f000 fbeb 	bl	41da4 <strncmp>
	} else {
		return ret == 0;
   415ce:	fab0 f080 	clz	r0, r0
   415d2:	0940      	lsrs	r0, r0, #5
	}
}
   415d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return false;
   415d8:	4608      	mov	r0, r1
   415da:	e7fb      	b.n	415d4 <aws_jobs_cmp+0x5a>
   415dc:	4618      	mov	r0, r3
   415de:	e7f9      	b.n	415d4 <aws_jobs_cmp+0x5a>
   415e0:	4618      	mov	r0, r3
   415e2:	e7f7      	b.n	415d4 <aws_jobs_cmp+0x5a>

000415e4 <strncpy_nullterm>:
{
   415e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   415e6:	4604      	mov	r4, r0
	size_t len = strlen(src) + 1;
   415e8:	4608      	mov	r0, r1
{
   415ea:	4615      	mov	r5, r2
   415ec:	460f      	mov	r7, r1
	size_t len = strlen(src) + 1;
   415ee:	f7d8 fc79 	bl	19ee4 <strlen>
   415f2:	1c46      	adds	r6, r0, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   415f4:	42ae      	cmp	r6, r5
   415f6:	4632      	mov	r2, r6
   415f8:	4620      	mov	r0, r4
   415fa:	bf28      	it	cs
   415fc:	462a      	movcs	r2, r5
   415fe:	4639      	mov	r1, r7
   41600:	f000 f9d7 	bl	419b2 <memcpy>
	if (len > maxlen) {
   41604:	42ae      	cmp	r6, r5
		dst[maxlen - 1] = '\0';
   41606:	bf82      	ittt	hi
   41608:	2300      	movhi	r3, #0
   4160a:	1964      	addhi	r4, r4, r5
   4160c:	f804 3c01 	strbhi.w	r3, [r4, #-1]
}
   41610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00041612 <response_is_valid>:
{
   41612:	b570      	push	{r4, r5, r6, lr}
   41614:	4606      	mov	r6, r0
	if ((response_len < strlen(check)) ||
   41616:	4610      	mov	r0, r2
{
   41618:	460d      	mov	r5, r1
   4161a:	4614      	mov	r4, r2
	if ((response_len < strlen(check)) ||
   4161c:	f7d8 fc62 	bl	19ee4 <strlen>
   41620:	42a8      	cmp	r0, r5
   41622:	d808      	bhi.n	41636 <response_is_valid+0x24>
	    (memcmp(response, check, response_len) != 0)) {
   41624:	462a      	mov	r2, r5
   41626:	4621      	mov	r1, r4
   41628:	4630      	mov	r0, r6
   4162a:	f000 f9b4 	bl	41996 <memcmp>
	if ((response_len < strlen(check)) ||
   4162e:	fab0 f080 	clz	r0, r0
   41632:	0940      	lsrs	r0, r0, #5
}
   41634:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   41636:	2000      	movs	r0, #0
   41638:	e7fc      	b.n	41634 <response_is_valid+0x22>

0004163a <lte_lc_init_and_connect>:
{
   4163a:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   4163c:	f7e7 fbf8 	bl	28e30 <w_lte_lc_init>
	if (ret) {
   41640:	b918      	cbnz	r0, 4164a <lte_lc_init_and_connect+0x10>
}
   41642:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect();
   41646:	f7e7 bcf3 	b.w	29030 <w_lte_lc_connect>
}
   4164a:	bd08      	pop	{r3, pc}

0004164c <sensor_sim_attr_set>:
}
   4164c:	2000      	movs	r0, #0
   4164e:	4770      	bx	lr

00041650 <sensor_sim_thread>:
{
   41650:	b570      	push	{r4, r5, r6, lr}
   41652:	4604      	mov	r4, r0
	struct sensor_sim_data *drv_data = dev->driver_data;
   41654:	6885      	ldr	r5, [r0, #8]
			drv_data->drdy_handler(dev, &drv_data->drdy_trigger);
   41656:	f105 0634 	add.w	r6, r5, #52	; 0x34
	return z_impl_k_sleep(ms);
   4165a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   4165e:	f7f9 fbbb 	bl	3add8 <z_impl_k_sleep>
		if (drv_data->drdy_handler != NULL) {
   41662:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   41664:	2b00      	cmp	r3, #0
   41666:	d0f8      	beq.n	4165a <sensor_sim_thread+0xa>
			drv_data->drdy_handler(dev, &drv_data->drdy_trigger);
   41668:	4631      	mov	r1, r6
   4166a:	4620      	mov	r0, r4
   4166c:	4798      	blx	r3
   4166e:	e7f4      	b.n	4165a <sensor_sim_thread+0xa>

00041670 <sample_fetch>:
}
   41670:	2000      	movs	r0, #0
   41672:	4770      	bx	lr

00041674 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   41674:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   41678:	4770      	bx	lr

0004167a <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   4167a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   4167e:	4770      	bx	lr

00041680 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   41680:	f44f 7080 	mov.w	r0, #256	; 0x100
   41684:	4770      	bx	lr

00041686 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   41686:	f7fe b8b7 	b.w	3f7f8 <z_clock_idle_exit>

0004168a <k_mem_pool_malloc>:
{
   4168a:	b507      	push	{r0, r1, r2, lr}
   4168c:	2204      	movs	r2, #4
   4168e:	188a      	adds	r2, r1, r2
   41690:	d204      	bcs.n	4169c <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   41692:	2300      	movs	r3, #0
   41694:	4669      	mov	r1, sp
   41696:	f7f7 fe5d 	bl	39354 <k_mem_pool_alloc>
   4169a:	b118      	cbz	r0, 416a4 <k_mem_pool_malloc+0x1a>
		return NULL;
   4169c:	2000      	movs	r0, #0
}
   4169e:	b003      	add	sp, #12
   416a0:	f85d fb04 	ldr.w	pc, [sp], #4
   416a4:	e9dd 3200 	ldrd	r3, r2, [sp]
   416a8:	601a      	str	r2, [r3, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   416aa:	9800      	ldr	r0, [sp, #0]
   416ac:	3004      	adds	r0, #4
   416ae:	e7f6      	b.n	4169e <k_mem_pool_malloc+0x14>

000416b0 <k_free>:
	if (ptr != NULL) {
   416b0:	b110      	cbz	r0, 416b8 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   416b2:	3804      	subs	r0, #4
   416b4:	f7f7 beb6 	b.w	39424 <k_mem_pool_free_id>
}
   416b8:	4770      	bx	lr

000416ba <k_calloc>:
{
   416ba:	b538      	push	{r3, r4, r5, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   416bc:	fb01 f400 	mul.w	r4, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   416c0:	b118      	cbz	r0, 416ca <k_calloc+0x10>
   416c2:	fbb4 f0f0 	udiv	r0, r4, r0
   416c6:	4281      	cmp	r1, r0
   416c8:	d10a      	bne.n	416e0 <k_calloc+0x26>
	ret = k_malloc(bounds);
   416ca:	4620      	mov	r0, r4
   416cc:	f7f7 ff06 	bl	394dc <k_malloc>
	if (ret != NULL) {
   416d0:	4605      	mov	r5, r0
   416d2:	b118      	cbz	r0, 416dc <k_calloc+0x22>
__ssp_bos_icheck3(memset, void *, int)
   416d4:	4622      	mov	r2, r4
   416d6:	2100      	movs	r1, #0
   416d8:	f000 f98b 	bl	419f2 <memset>
}
   416dc:	4628      	mov	r0, r5
   416de:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   416e0:	2500      	movs	r5, #0
   416e2:	e7fb      	b.n	416dc <k_calloc+0x22>

000416e4 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   416e4:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   416e6:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   416ea:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   416ee:	4770      	bx	lr

000416f0 <z_queue_node_peek>:
{
   416f0:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   416f2:	4604      	mov	r4, r0
   416f4:	b130      	cbz	r0, 41704 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   416f6:	6802      	ldr	r2, [r0, #0]
   416f8:	0793      	lsls	r3, r2, #30
   416fa:	d003      	beq.n	41704 <z_queue_node_peek+0x14>
		ret = anode->data;
   416fc:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   416fe:	b109      	cbz	r1, 41704 <z_queue_node_peek+0x14>
			k_free(anode);
   41700:	f7ff ffd6 	bl	416b0 <k_free>
}
   41704:	4620      	mov	r0, r4
   41706:	bd10      	pop	{r4, pc}

00041708 <z_impl_k_queue_init>:
	list->head = NULL;
   41708:	2300      	movs	r3, #0
	list->tail = NULL;
   4170a:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   4170e:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   41710:	f100 030c 	add.w	r3, r0, #12
   41714:	e9c0 3303 	strd	r3, r3, [r0, #12]
}
   41718:	4770      	bx	lr

0004171a <k_queue_append>:
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   4171a:	460a      	mov	r2, r1
   4171c:	2300      	movs	r3, #0
   4171e:	6841      	ldr	r1, [r0, #4]
   41720:	f7f8 b9e4 	b.w	39aec <queue_insert>

00041724 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   41724:	7b43      	ldrb	r3, [r0, #13]
   41726:	06db      	lsls	r3, r3, #27
   41728:	bf03      	ittte	eq
   4172a:	6980      	ldreq	r0, [r0, #24]
   4172c:	fab0 f080 	clzeq	r0, r0
   41730:	0940      	lsreq	r0, r0, #5
   41732:	2000      	movne	r0, #0
}
   41734:	4770      	bx	lr

00041736 <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   41736:	f990 000e 	ldrsb.w	r0, [r0, #14]
   4173a:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   4173e:	4298      	cmp	r0, r3
   41740:	bfac      	ite	ge
   41742:	2000      	movge	r0, #0
   41744:	2001      	movlt	r0, #1
   41746:	4770      	bx	lr

00041748 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   41748:	4603      	mov	r3, r0
   4174a:	b920      	cbnz	r0, 41756 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   4174c:	f3ef 8205 	mrs	r2, IPSR
   41750:	b90a      	cbnz	r2, 41756 <z_reschedule_irqlock+0xe>
   41752:	f7de bdf9 	b.w	20348 <arch_swap>
   41756:	f383 8811 	msr	BASEPRI, r3
   4175a:	f3bf 8f6f 	isb	sy
}
   4175e:	4770      	bx	lr

00041760 <z_reschedule_unlocked>:
	__asm__ volatile(
   41760:	f04f 0320 	mov.w	r3, #32
   41764:	f3ef 8011 	mrs	r0, BASEPRI
   41768:	f383 8811 	msr	BASEPRI, r3
   4176c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   41770:	f7ff bfea 	b.w	41748 <z_reschedule_irqlock>

00041774 <z_priq_dumb_best>:
	return list->head == list;
   41774:	6803      	ldr	r3, [r0, #0]
}
   41776:	4298      	cmp	r0, r3
   41778:	bf14      	ite	ne
   4177a:	4618      	movne	r0, r3
   4177c:	2000      	moveq	r0, #0
   4177e:	4770      	bx	lr

00041780 <z_unpend_all>:
{
   41780:	b570      	push	{r4, r5, r6, lr}
   41782:	4606      	mov	r6, r0
	int need_sched = 0;
   41784:	2500      	movs	r5, #0
   41786:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41788:	42a6      	cmp	r6, r4
   4178a:	d000      	beq.n	4178e <z_unpend_all+0xe>
	while ((th = z_waitq_head(wait_q)) != NULL) {
   4178c:	b90c      	cbnz	r4, 41792 <z_unpend_all+0x12>
}
   4178e:	4628      	mov	r0, r5
   41790:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(th);
   41792:	4620      	mov	r0, r4
   41794:	f7f8 fcc4 	bl	3a120 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   41798:	4620      	mov	r0, r4
   4179a:	f7ff ffc3 	bl	41724 <z_is_thread_ready>
		need_sched = 1;
   4179e:	2501      	movs	r5, #1
   417a0:	2800      	cmp	r0, #0
   417a2:	d0f0      	beq.n	41786 <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   417a4:	4620      	mov	r0, r4
   417a6:	f7f8 fdbf 	bl	3a328 <z_add_thread_to_ready_q>
   417aa:	e7ec      	b.n	41786 <z_unpend_all+0x6>

000417ac <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   417ac:	7b43      	ldrb	r3, [r0, #13]
   417ae:	06db      	lsls	r3, r3, #27
   417b0:	bf03      	ittte	eq
   417b2:	6980      	ldreq	r0, [r0, #24]
   417b4:	fab0 f080 	clzeq	r0, r0
   417b8:	0940      	lsreq	r0, r0, #5
   417ba:	2000      	movne	r0, #0
}
   417bc:	4770      	bx	lr

000417be <z_impl_k_thread_name_set>:
}
   417be:	f06f 0057 	mvn.w	r0, #87	; 0x57
   417c2:	4770      	bx	lr

000417c4 <k_thread_name_get>:
}
   417c4:	2000      	movs	r0, #0
   417c6:	4770      	bx	lr

000417c8 <z_new_thread_init>:
{
   417c8:	b510      	push	{r4, lr}
	thread_base->user_options = (u8_t)options;
   417ca:	9c02      	ldr	r4, [sp, #8]
	thread_base->prio = priority;
   417cc:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
   417ce:	7304      	strb	r4, [r0, #12]
	thread_base->sched_locked = 0U;
   417d0:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   417d2:	2404      	movs	r4, #4
	thread_base->sched_locked = 0U;
   417d4:	73c3      	strb	r3, [r0, #15]
	thread_base->thread_state = (u8_t)initial_state;
   417d6:	7344      	strb	r4, [r0, #13]
	node->prev = NULL;
   417d8:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   417dc:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   417e0:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
   417e4:	bd10      	pop	{r4, pc}

000417e6 <z_thread_single_suspend>:
{
   417e6:	b510      	push	{r4, lr}
   417e8:	4604      	mov	r4, r0
	if (z_is_thread_ready(thread)) {
   417ea:	f7ff ffdf 	bl	417ac <z_is_thread_ready>
   417ee:	b110      	cbz	r0, 417f6 <z_thread_single_suspend+0x10>
		z_remove_thread_from_ready_q(thread);
   417f0:	4620      	mov	r0, r4
   417f2:	f7f8 ff41 	bl	3a678 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   417f6:	7b63      	ldrb	r3, [r4, #13]
   417f8:	f043 0310 	orr.w	r3, r3, #16
   417fc:	7363      	strb	r3, [r4, #13]
}
   417fe:	bd10      	pop	{r4, pc}

00041800 <z_thread_single_resume>:
{
   41800:	b508      	push	{r3, lr}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   41802:	7b43      	ldrb	r3, [r0, #13]
   41804:	4602      	mov	r2, r0
   41806:	f023 0310 	bic.w	r3, r3, #16
   4180a:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   4180c:	f7ff ffce 	bl	417ac <z_is_thread_ready>
   41810:	b120      	cbz	r0, 4181c <z_thread_single_resume+0x1c>
}
   41812:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_add_thread_to_ready_q(thread);
   41816:	4610      	mov	r0, r2
   41818:	f7f8 bd86 	b.w	3a328 <z_add_thread_to_ready_q>
   4181c:	bd08      	pop	{r3, pc}

0004181e <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   4181e:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   41820:	b510      	push	{r4, lr}
   41822:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   41824:	b103      	cbz	r3, 41828 <z_thread_single_abort+0xa>
		thread->fn_abort();
   41826:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   41828:	4620      	mov	r0, r4
   4182a:	f7ff ffbf 	bl	417ac <z_is_thread_ready>
   4182e:	b138      	cbz	r0, 41840 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
   41830:	4620      	mov	r0, r4
   41832:	f7f8 ff21 	bl	3a678 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   41836:	7b63      	ldrb	r3, [r4, #13]
   41838:	f043 0308 	orr.w	r3, r3, #8
   4183c:	7363      	strb	r3, [r4, #13]
}
   4183e:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
   41840:	7b63      	ldrb	r3, [r4, #13]
   41842:	079b      	lsls	r3, r3, #30
   41844:	d502      	bpl.n	4184c <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
   41846:	4620      	mov	r0, r4
   41848:	f7f8 fb3c 	bl	39ec4 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   4184c:	69a3      	ldr	r3, [r4, #24]
   4184e:	2b00      	cmp	r3, #0
   41850:	d0f1      	beq.n	41836 <z_thread_single_abort+0x18>
	return z_abort_timeout(&thread->base.timeout);
   41852:	f104 0018 	add.w	r0, r4, #24
   41856:	f7fa f821 	bl	3b89c <z_abort_timeout>
   4185a:	e7ec      	b.n	41836 <z_thread_single_abort+0x18>

0004185c <k_work_submit_to_queue>:
{
   4185c:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4185e:	f101 0308 	add.w	r3, r1, #8
   41862:	e8d3 2fef 	ldaex	r2, [r3]
   41866:	f042 0c01 	orr.w	ip, r2, #1
   4186a:	e8c3 cfee 	stlex	lr, ip, [r3]
   4186e:	f1be 0f00 	cmp.w	lr, #0
   41872:	d1f6      	bne.n	41862 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   41874:	07d3      	lsls	r3, r2, #31
   41876:	d403      	bmi.n	41880 <k_work_submit_to_queue+0x24>
}
   41878:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   4187c:	f7ff bf4d 	b.w	4171a <k_queue_append>
}
   41880:	f85d fb04 	ldr.w	pc, [sp], #4

00041884 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   41884:	f1a0 010c 	sub.w	r1, r0, #12
   41888:	6900      	ldr	r0, [r0, #16]
   4188a:	f7ff bfe7 	b.w	4185c <k_work_submit_to_queue>

0004188e <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   4188e:	2300      	movs	r3, #0
   41890:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   41894:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   41898:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   4189a:	61c3      	str	r3, [r0, #28]
}
   4189c:	4770      	bx	lr

0004189e <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   4189e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   418a0:	f7fa f9e8 	bl	3bc74 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   418a4:	bd08      	pop	{r3, pc}

000418a6 <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   418a6:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
   418a8:	f7fa f9e4 	bl	3bc74 <z_tick_get>
			return (t * to_hz + off) / from_hz;
   418ac:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   418b0:	fba0 2304 	umull	r2, r3, r0, r4
   418b4:	fb04 3301 	mla	r3, r4, r1, r3
   418b8:	0bd0      	lsrs	r0, r2, #15
}
   418ba:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   418be:	0bd9      	lsrs	r1, r3, #15
   418c0:	bd10      	pop	{r4, pc}

000418c2 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   418c2:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   418c4:	6884      	ldr	r4, [r0, #8]
{
   418c6:	4605      	mov	r5, r0
   418c8:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   418ca:	b19c      	cbz	r4, 418f4 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   418cc:	68a3      	ldr	r3, [r4, #8]
   418ce:	b95b      	cbnz	r3, 418e8 <signal_poll_event+0x26>
	int retcode = 0;
   418d0:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   418d2:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   418d4:	2300      	movs	r3, #0
   418d6:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   418d8:	68eb      	ldr	r3, [r5, #12]
   418da:	f3c3 3204 	ubfx	r2, r3, #12, #5
   418de:	4316      	orrs	r6, r2
   418e0:	f366 3310 	bfi	r3, r6, #12, #5
   418e4:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   418e6:	e004      	b.n	418f2 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   418e8:	4798      	blx	r3
		poller->is_polling = false;
   418ea:	2300      	movs	r3, #0
		if (retcode < 0) {
   418ec:	2800      	cmp	r0, #0
		poller->is_polling = false;
   418ee:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   418f0:	daf0      	bge.n	418d4 <signal_poll_event+0x12>
}
   418f2:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   418f4:	4620      	mov	r0, r4
   418f6:	e7ed      	b.n	418d4 <signal_poll_event+0x12>

000418f8 <add_event>:
{
   418f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   418fa:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   418fc:	e9d0 2300 	ldrd	r2, r3, [r0]
   41900:	4290      	cmp	r0, r2
   41902:	4604      	mov	r4, r0
   41904:	460d      	mov	r5, r1
   41906:	d106      	bne.n	41916 <add_event+0x1e>
	node->prev = list->tail;
   41908:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   4190a:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   4190c:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   4190e:	6863      	ldr	r3, [r4, #4]
   41910:	601d      	str	r5, [r3, #0]
	list->tail = node;
   41912:	6065      	str	r5, [r4, #4]
}
   41914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   41916:	2b00      	cmp	r3, #0
   41918:	d0f6      	beq.n	41908 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   4191a:	689b      	ldr	r3, [r3, #8]
   4191c:	6879      	ldr	r1, [r7, #4]
   4191e:	6858      	ldr	r0, [r3, #4]
   41920:	f7ff ff09 	bl	41736 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   41924:	2800      	cmp	r0, #0
   41926:	d1ef      	bne.n	41908 <add_event+0x10>
	return list->head == list;
   41928:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4192a:	42b4      	cmp	r4, r6
   4192c:	d0ec      	beq.n	41908 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   4192e:	2e00      	cmp	r6, #0
   41930:	d0ea      	beq.n	41908 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   41932:	68b3      	ldr	r3, [r6, #8]
   41934:	6878      	ldr	r0, [r7, #4]
   41936:	6859      	ldr	r1, [r3, #4]
   41938:	f7ff fefd 	bl	41736 <z_is_t1_higher_prio_than_t2>
   4193c:	b128      	cbz	r0, 4194a <add_event+0x52>
	node->prev = successor->prev;
   4193e:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   41940:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   41944:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   41946:	6075      	str	r5, [r6, #4]
			return;
   41948:	e7e4      	b.n	41914 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   4194a:	6863      	ldr	r3, [r4, #4]
   4194c:	429e      	cmp	r6, r3
   4194e:	d0db      	beq.n	41908 <add_event+0x10>
   41950:	6836      	ldr	r6, [r6, #0]
   41952:	e7ec      	b.n	4192e <add_event+0x36>

00041954 <z_handle_obj_poll_events>:
	return list->head == list;
   41954:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   41956:	4298      	cmp	r0, r3
   41958:	d009      	beq.n	4196e <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   4195a:	e9d3 2000 	ldrd	r2, r0, [r3]
   4195e:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   41960:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   41962:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   41964:	4618      	mov	r0, r3
	node->prev = NULL;
   41966:	e9c3 2200 	strd	r2, r2, [r3]
   4196a:	f7ff bfaa 	b.w	418c2 <signal_poll_event>
	}
}
   4196e:	4770      	bx	lr

00041970 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   41970:	4770      	bx	lr

00041972 <atoi>:
   41972:	220a      	movs	r2, #10
   41974:	2100      	movs	r1, #0
   41976:	f7fb be9d 	b.w	3d6b4 <strtol>

0004197a <memchr>:
   4197a:	b2c9      	uxtb	r1, r1
   4197c:	4402      	add	r2, r0
   4197e:	b510      	push	{r4, lr}
   41980:	4290      	cmp	r0, r2
   41982:	4603      	mov	r3, r0
   41984:	d101      	bne.n	4198a <memchr+0x10>
   41986:	2300      	movs	r3, #0
   41988:	e003      	b.n	41992 <memchr+0x18>
   4198a:	781c      	ldrb	r4, [r3, #0]
   4198c:	3001      	adds	r0, #1
   4198e:	428c      	cmp	r4, r1
   41990:	d1f6      	bne.n	41980 <memchr+0x6>
   41992:	4618      	mov	r0, r3
   41994:	bd10      	pop	{r4, pc}

00041996 <memcmp>:
   41996:	b530      	push	{r4, r5, lr}
   41998:	3901      	subs	r1, #1
   4199a:	2400      	movs	r4, #0
   4199c:	42a2      	cmp	r2, r4
   4199e:	d101      	bne.n	419a4 <memcmp+0xe>
   419a0:	2000      	movs	r0, #0
   419a2:	e005      	b.n	419b0 <memcmp+0x1a>
   419a4:	5d03      	ldrb	r3, [r0, r4]
   419a6:	3401      	adds	r4, #1
   419a8:	5d0d      	ldrb	r5, [r1, r4]
   419aa:	42ab      	cmp	r3, r5
   419ac:	d0f6      	beq.n	4199c <memcmp+0x6>
   419ae:	1b58      	subs	r0, r3, r5
   419b0:	bd30      	pop	{r4, r5, pc}

000419b2 <memcpy>:
   419b2:	440a      	add	r2, r1
   419b4:	1e43      	subs	r3, r0, #1
   419b6:	4291      	cmp	r1, r2
   419b8:	d100      	bne.n	419bc <memcpy+0xa>
   419ba:	4770      	bx	lr
   419bc:	b510      	push	{r4, lr}
   419be:	f811 4b01 	ldrb.w	r4, [r1], #1
   419c2:	4291      	cmp	r1, r2
   419c4:	f803 4f01 	strb.w	r4, [r3, #1]!
   419c8:	d1f9      	bne.n	419be <memcpy+0xc>
   419ca:	bd10      	pop	{r4, pc}

000419cc <__memcpy_chk>:
   419cc:	429a      	cmp	r2, r3
   419ce:	b508      	push	{r3, lr}
   419d0:	d901      	bls.n	419d6 <__memcpy_chk+0xa>
   419d2:	f7fb fff7 	bl	3d9c4 <__chk_fail>
   419d6:	4281      	cmp	r1, r0
   419d8:	d804      	bhi.n	419e4 <__memcpy_chk+0x18>
   419da:	188b      	adds	r3, r1, r2
   419dc:	4298      	cmp	r0, r3
   419de:	d3f8      	bcc.n	419d2 <__memcpy_chk+0x6>
   419e0:	4281      	cmp	r1, r0
   419e2:	d102      	bne.n	419ea <__memcpy_chk+0x1e>
   419e4:	1883      	adds	r3, r0, r2
   419e6:	4299      	cmp	r1, r3
   419e8:	d3f3      	bcc.n	419d2 <__memcpy_chk+0x6>
   419ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   419ee:	f7ff bfe0 	b.w	419b2 <memcpy>

000419f2 <memset>:
   419f2:	4402      	add	r2, r0
   419f4:	4603      	mov	r3, r0
   419f6:	4293      	cmp	r3, r2
   419f8:	d100      	bne.n	419fc <memset+0xa>
   419fa:	4770      	bx	lr
   419fc:	f803 1b01 	strb.w	r1, [r3], #1
   41a00:	e7f9      	b.n	419f6 <memset+0x4>

00041a02 <__sfputc_r>:
   41a02:	6893      	ldr	r3, [r2, #8]
   41a04:	3b01      	subs	r3, #1
   41a06:	2b00      	cmp	r3, #0
   41a08:	6093      	str	r3, [r2, #8]
   41a0a:	b410      	push	{r4}
   41a0c:	da08      	bge.n	41a20 <__sfputc_r+0x1e>
   41a0e:	6994      	ldr	r4, [r2, #24]
   41a10:	42a3      	cmp	r3, r4
   41a12:	db01      	blt.n	41a18 <__sfputc_r+0x16>
   41a14:	290a      	cmp	r1, #10
   41a16:	d103      	bne.n	41a20 <__sfputc_r+0x1e>
   41a18:	f85d 4b04 	ldr.w	r4, [sp], #4
   41a1c:	f7fb bf00 	b.w	3d820 <__swbuf_r>
   41a20:	6813      	ldr	r3, [r2, #0]
   41a22:	1c58      	adds	r0, r3, #1
   41a24:	6010      	str	r0, [r2, #0]
   41a26:	4608      	mov	r0, r1
   41a28:	7019      	strb	r1, [r3, #0]
   41a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
   41a2e:	4770      	bx	lr

00041a30 <__sfputs_r>:
   41a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41a32:	4606      	mov	r6, r0
   41a34:	460f      	mov	r7, r1
   41a36:	4614      	mov	r4, r2
   41a38:	18d5      	adds	r5, r2, r3
   41a3a:	42ac      	cmp	r4, r5
   41a3c:	d101      	bne.n	41a42 <__sfputs_r+0x12>
   41a3e:	2000      	movs	r0, #0
   41a40:	e007      	b.n	41a52 <__sfputs_r+0x22>
   41a42:	463a      	mov	r2, r7
   41a44:	f814 1b01 	ldrb.w	r1, [r4], #1
   41a48:	4630      	mov	r0, r6
   41a4a:	f7ff ffda 	bl	41a02 <__sfputc_r>
   41a4e:	1c43      	adds	r3, r0, #1
   41a50:	d1f3      	bne.n	41a3a <__sfputs_r+0xa>
   41a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00041a54 <__cvt>:
   41a54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   41a58:	ec55 4b10 	vmov	r4, r5, d0
   41a5c:	2d00      	cmp	r5, #0
   41a5e:	460e      	mov	r6, r1
   41a60:	4691      	mov	r9, r2
   41a62:	4619      	mov	r1, r3
   41a64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   41a68:	f04f 0200 	mov.w	r2, #0
   41a6c:	da03      	bge.n	41a76 <__cvt+0x22>
   41a6e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   41a72:	222d      	movs	r2, #45	; 0x2d
   41a74:	461d      	mov	r5, r3
   41a76:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   41a78:	700a      	strb	r2, [r1, #0]
   41a7a:	f027 0720 	bic.w	r7, r7, #32
   41a7e:	2f46      	cmp	r7, #70	; 0x46
   41a80:	d004      	beq.n	41a8c <__cvt+0x38>
   41a82:	2f45      	cmp	r7, #69	; 0x45
   41a84:	d100      	bne.n	41a88 <__cvt+0x34>
   41a86:	3601      	adds	r6, #1
   41a88:	2102      	movs	r1, #2
   41a8a:	e000      	b.n	41a8e <__cvt+0x3a>
   41a8c:	2103      	movs	r1, #3
   41a8e:	ab03      	add	r3, sp, #12
   41a90:	4632      	mov	r2, r6
   41a92:	9301      	str	r3, [sp, #4]
   41a94:	ab02      	add	r3, sp, #8
   41a96:	ec45 4b10 	vmov	d0, r4, r5
   41a9a:	9300      	str	r3, [sp, #0]
   41a9c:	4653      	mov	r3, sl
   41a9e:	f7d9 fdab 	bl	1b5f8 <_dtoa_r>
   41aa2:	2f47      	cmp	r7, #71	; 0x47
   41aa4:	4680      	mov	r8, r0
   41aa6:	d102      	bne.n	41aae <__cvt+0x5a>
   41aa8:	f019 0f01 	tst.w	r9, #1
   41aac:	d022      	beq.n	41af4 <__cvt+0xa0>
   41aae:	2f46      	cmp	r7, #70	; 0x46
   41ab0:	eb08 0906 	add.w	r9, r8, r6
   41ab4:	d111      	bne.n	41ada <__cvt+0x86>
   41ab6:	f898 3000 	ldrb.w	r3, [r8]
   41aba:	2b30      	cmp	r3, #48	; 0x30
   41abc:	d10a      	bne.n	41ad4 <__cvt+0x80>
   41abe:	2200      	movs	r2, #0
   41ac0:	2300      	movs	r3, #0
   41ac2:	4620      	mov	r0, r4
   41ac4:	4629      	mov	r1, r5
   41ac6:	f7d7 f8cf 	bl	18c68 <__aeabi_dcmpeq>
   41aca:	b918      	cbnz	r0, 41ad4 <__cvt+0x80>
   41acc:	f1c6 0601 	rsb	r6, r6, #1
   41ad0:	f8ca 6000 	str.w	r6, [sl]
   41ad4:	f8da 3000 	ldr.w	r3, [sl]
   41ad8:	4499      	add	r9, r3
   41ada:	2200      	movs	r2, #0
   41adc:	2300      	movs	r3, #0
   41ade:	4620      	mov	r0, r4
   41ae0:	4629      	mov	r1, r5
   41ae2:	f7d7 f8c1 	bl	18c68 <__aeabi_dcmpeq>
   41ae6:	b108      	cbz	r0, 41aec <__cvt+0x98>
   41ae8:	f8cd 900c 	str.w	r9, [sp, #12]
   41aec:	2230      	movs	r2, #48	; 0x30
   41aee:	9b03      	ldr	r3, [sp, #12]
   41af0:	454b      	cmp	r3, r9
   41af2:	d308      	bcc.n	41b06 <__cvt+0xb2>
   41af4:	9b03      	ldr	r3, [sp, #12]
   41af6:	4640      	mov	r0, r8
   41af8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   41afa:	eba3 0308 	sub.w	r3, r3, r8
   41afe:	6013      	str	r3, [r2, #0]
   41b00:	b004      	add	sp, #16
   41b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   41b06:	1c59      	adds	r1, r3, #1
   41b08:	9103      	str	r1, [sp, #12]
   41b0a:	701a      	strb	r2, [r3, #0]
   41b0c:	e7ef      	b.n	41aee <__cvt+0x9a>

00041b0e <__exponent>:
   41b0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   41b10:	2900      	cmp	r1, #0
   41b12:	7002      	strb	r2, [r0, #0]
   41b14:	bfba      	itte	lt
   41b16:	4249      	neglt	r1, r1
   41b18:	232d      	movlt	r3, #45	; 0x2d
   41b1a:	232b      	movge	r3, #43	; 0x2b
   41b1c:	2909      	cmp	r1, #9
   41b1e:	7043      	strb	r3, [r0, #1]
   41b20:	dd22      	ble.n	41b68 <__exponent+0x5a>
   41b22:	f10d 0307 	add.w	r3, sp, #7
   41b26:	260a      	movs	r6, #10
   41b28:	461f      	mov	r7, r3
   41b2a:	2963      	cmp	r1, #99	; 0x63
   41b2c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
   41b30:	fb91 f2f6 	sdiv	r2, r1, r6
   41b34:	fb06 1412 	mls	r4, r6, r2, r1
   41b38:	f104 0430 	add.w	r4, r4, #48	; 0x30
   41b3c:	f803 4c01 	strb.w	r4, [r3, #-1]
   41b40:	dc0a      	bgt.n	41b58 <__exponent+0x4a>
   41b42:	3230      	adds	r2, #48	; 0x30
   41b44:	3b02      	subs	r3, #2
   41b46:	f805 2c01 	strb.w	r2, [r5, #-1]
   41b4a:	1c82      	adds	r2, r0, #2
   41b4c:	42bb      	cmp	r3, r7
   41b4e:	4614      	mov	r4, r2
   41b50:	d305      	bcc.n	41b5e <__exponent+0x50>
   41b52:	1a20      	subs	r0, r4, r0
   41b54:	b003      	add	sp, #12
   41b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   41b58:	462b      	mov	r3, r5
   41b5a:	4611      	mov	r1, r2
   41b5c:	e7e5      	b.n	41b2a <__exponent+0x1c>
   41b5e:	f813 1b01 	ldrb.w	r1, [r3], #1
   41b62:	f802 1b01 	strb.w	r1, [r2], #1
   41b66:	e7f1      	b.n	41b4c <__exponent+0x3e>
   41b68:	2330      	movs	r3, #48	; 0x30
   41b6a:	1d04      	adds	r4, r0, #4
   41b6c:	4419      	add	r1, r3
   41b6e:	7083      	strb	r3, [r0, #2]
   41b70:	70c1      	strb	r1, [r0, #3]
   41b72:	e7ee      	b.n	41b52 <__exponent+0x44>

00041b74 <_printf_common>:
   41b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   41b78:	4691      	mov	r9, r2
   41b7a:	461f      	mov	r7, r3
   41b7c:	688a      	ldr	r2, [r1, #8]
   41b7e:	4606      	mov	r6, r0
   41b80:	690b      	ldr	r3, [r1, #16]
   41b82:	460c      	mov	r4, r1
   41b84:	f8dd 8020 	ldr.w	r8, [sp, #32]
   41b88:	4293      	cmp	r3, r2
   41b8a:	bfb8      	it	lt
   41b8c:	4613      	movlt	r3, r2
   41b8e:	f8c9 3000 	str.w	r3, [r9]
   41b92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   41b96:	b112      	cbz	r2, 41b9e <_printf_common+0x2a>
   41b98:	3301      	adds	r3, #1
   41b9a:	f8c9 3000 	str.w	r3, [r9]
   41b9e:	6823      	ldr	r3, [r4, #0]
   41ba0:	0699      	lsls	r1, r3, #26
   41ba2:	bf42      	ittt	mi
   41ba4:	f8d9 3000 	ldrmi.w	r3, [r9]
   41ba8:	3302      	addmi	r3, #2
   41baa:	f8c9 3000 	strmi.w	r3, [r9]
   41bae:	6825      	ldr	r5, [r4, #0]
   41bb0:	f015 0506 	ands.w	r5, r5, #6
   41bb4:	d107      	bne.n	41bc6 <_printf_common+0x52>
   41bb6:	f104 0a19 	add.w	sl, r4, #25
   41bba:	68e3      	ldr	r3, [r4, #12]
   41bbc:	f8d9 2000 	ldr.w	r2, [r9]
   41bc0:	1a9b      	subs	r3, r3, r2
   41bc2:	42ab      	cmp	r3, r5
   41bc4:	dc2b      	bgt.n	41c1e <_printf_common+0xaa>
   41bc6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   41bca:	6822      	ldr	r2, [r4, #0]
   41bcc:	3300      	adds	r3, #0
   41bce:	bf18      	it	ne
   41bd0:	2301      	movne	r3, #1
   41bd2:	0692      	lsls	r2, r2, #26
   41bd4:	d430      	bmi.n	41c38 <_printf_common+0xc4>
   41bd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   41bda:	4639      	mov	r1, r7
   41bdc:	4630      	mov	r0, r6
   41bde:	47c0      	blx	r8
   41be0:	3001      	adds	r0, #1
   41be2:	d023      	beq.n	41c2c <_printf_common+0xb8>
   41be4:	6823      	ldr	r3, [r4, #0]
   41be6:	341a      	adds	r4, #26
   41be8:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   41bec:	f003 0306 	and.w	r3, r3, #6
   41bf0:	f8d9 2000 	ldr.w	r2, [r9]
   41bf4:	f04f 0900 	mov.w	r9, #0
   41bf8:	2b04      	cmp	r3, #4
   41bfa:	f854 3c12 	ldr.w	r3, [r4, #-18]
   41bfe:	bf08      	it	eq
   41c00:	1aad      	subeq	r5, r5, r2
   41c02:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   41c06:	bf14      	ite	ne
   41c08:	2500      	movne	r5, #0
   41c0a:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   41c0e:	4293      	cmp	r3, r2
   41c10:	bfc4      	itt	gt
   41c12:	1a9b      	subgt	r3, r3, r2
   41c14:	18ed      	addgt	r5, r5, r3
   41c16:	454d      	cmp	r5, r9
   41c18:	d11a      	bne.n	41c50 <_printf_common+0xdc>
   41c1a:	2000      	movs	r0, #0
   41c1c:	e008      	b.n	41c30 <_printf_common+0xbc>
   41c1e:	2301      	movs	r3, #1
   41c20:	4652      	mov	r2, sl
   41c22:	4639      	mov	r1, r7
   41c24:	4630      	mov	r0, r6
   41c26:	47c0      	blx	r8
   41c28:	3001      	adds	r0, #1
   41c2a:	d103      	bne.n	41c34 <_printf_common+0xc0>
   41c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   41c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   41c34:	3501      	adds	r5, #1
   41c36:	e7c0      	b.n	41bba <_printf_common+0x46>
   41c38:	18e1      	adds	r1, r4, r3
   41c3a:	1c5a      	adds	r2, r3, #1
   41c3c:	2030      	movs	r0, #48	; 0x30
   41c3e:	3302      	adds	r3, #2
   41c40:	4422      	add	r2, r4
   41c42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   41c46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   41c4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   41c4e:	e7c2      	b.n	41bd6 <_printf_common+0x62>
   41c50:	2301      	movs	r3, #1
   41c52:	4622      	mov	r2, r4
   41c54:	4639      	mov	r1, r7
   41c56:	4630      	mov	r0, r6
   41c58:	47c0      	blx	r8
   41c5a:	3001      	adds	r0, #1
   41c5c:	d0e6      	beq.n	41c2c <_printf_common+0xb8>
   41c5e:	f109 0901 	add.w	r9, r9, #1
   41c62:	e7d8      	b.n	41c16 <_printf_common+0xa2>

00041c64 <__sprintf_chk>:
   41c64:	b408      	push	{r3}
   41c66:	b517      	push	{r0, r1, r2, r4, lr}
   41c68:	ab05      	add	r3, sp, #20
   41c6a:	1e14      	subs	r4, r2, #0
   41c6c:	f853 1b04 	ldr.w	r1, [r3], #4
   41c70:	9301      	str	r3, [sp, #4]
   41c72:	da07      	bge.n	41c84 <__sprintf_chk+0x20>
   41c74:	461a      	mov	r2, r3
   41c76:	f7fb fdc9 	bl	3d80c <vsiprintf>
   41c7a:	b003      	add	sp, #12
   41c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   41c80:	b001      	add	sp, #4
   41c82:	4770      	bx	lr
   41c84:	460a      	mov	r2, r1
   41c86:	4621      	mov	r1, r4
   41c88:	f7fb fd9c 	bl	3d7c4 <vsniprintf>
   41c8c:	2800      	cmp	r0, #0
   41c8e:	dbf4      	blt.n	41c7a <__sprintf_chk+0x16>
   41c90:	42a0      	cmp	r0, r4
   41c92:	d3f2      	bcc.n	41c7a <__sprintf_chk+0x16>
   41c94:	f7fb fe96 	bl	3d9c4 <__chk_fail>

00041c98 <__sread>:
   41c98:	b510      	push	{r4, lr}
   41c9a:	460c      	mov	r4, r1
   41c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   41ca0:	f7fc ff16 	bl	3ead0 <_read_r>
   41ca4:	2800      	cmp	r0, #0
   41ca6:	bfab      	itete	ge
   41ca8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   41caa:	89a3      	ldrhlt	r3, [r4, #12]
   41cac:	181b      	addge	r3, r3, r0
   41cae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   41cb2:	bfac      	ite	ge
   41cb4:	6563      	strge	r3, [r4, #84]	; 0x54
   41cb6:	81a3      	strhlt	r3, [r4, #12]
   41cb8:	bd10      	pop	{r4, pc}

00041cba <__seofread>:
   41cba:	2000      	movs	r0, #0
   41cbc:	4770      	bx	lr

00041cbe <__swrite>:
   41cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41cc2:	461f      	mov	r7, r3
   41cc4:	898b      	ldrh	r3, [r1, #12]
   41cc6:	4605      	mov	r5, r0
   41cc8:	460c      	mov	r4, r1
   41cca:	05db      	lsls	r3, r3, #23
   41ccc:	4616      	mov	r6, r2
   41cce:	d505      	bpl.n	41cdc <__swrite+0x1e>
   41cd0:	2302      	movs	r3, #2
   41cd2:	2200      	movs	r2, #0
   41cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   41cd8:	f7fc fa4e 	bl	3e178 <_lseek_r>
   41cdc:	89a3      	ldrh	r3, [r4, #12]
   41cde:	4632      	mov	r2, r6
   41ce0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   41ce4:	4628      	mov	r0, r5
   41ce6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   41cea:	81a3      	strh	r3, [r4, #12]
   41cec:	463b      	mov	r3, r7
   41cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   41cf2:	f7fb bde7 	b.w	3d8c4 <_write_r>

00041cf6 <__sseek>:
   41cf6:	b510      	push	{r4, lr}
   41cf8:	460c      	mov	r4, r1
   41cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   41cfe:	f7fc fa3b 	bl	3e178 <_lseek_r>
   41d02:	1c43      	adds	r3, r0, #1
   41d04:	89a3      	ldrh	r3, [r4, #12]
   41d06:	bf15      	itete	ne
   41d08:	6560      	strne	r0, [r4, #84]	; 0x54
   41d0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   41d0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   41d12:	81a3      	strheq	r3, [r4, #12]
   41d14:	bf18      	it	ne
   41d16:	81a3      	strhne	r3, [r4, #12]
   41d18:	bd10      	pop	{r4, pc}

00041d1a <__sclose>:
   41d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   41d1e:	f7fb be75 	b.w	3da0c <_close_r>

00041d22 <strcat>:
   41d22:	4603      	mov	r3, r0
   41d24:	b510      	push	{r4, lr}
   41d26:	461a      	mov	r2, r3
   41d28:	f812 4b01 	ldrb.w	r4, [r2], #1
   41d2c:	b93c      	cbnz	r4, 41d3e <strcat+0x1c>
   41d2e:	3b01      	subs	r3, #1
   41d30:	f811 2b01 	ldrb.w	r2, [r1], #1
   41d34:	f803 2f01 	strb.w	r2, [r3, #1]!
   41d38:	2a00      	cmp	r2, #0
   41d3a:	d1f9      	bne.n	41d30 <strcat+0xe>
   41d3c:	bd10      	pop	{r4, pc}
   41d3e:	4613      	mov	r3, r2
   41d40:	e7f1      	b.n	41d26 <strcat+0x4>

00041d42 <strchr>:
   41d42:	b2c9      	uxtb	r1, r1
   41d44:	4603      	mov	r3, r0
   41d46:	f810 2b01 	ldrb.w	r2, [r0], #1
   41d4a:	b11a      	cbz	r2, 41d54 <strchr+0x12>
   41d4c:	428a      	cmp	r2, r1
   41d4e:	d1f9      	bne.n	41d44 <strchr+0x2>
   41d50:	4618      	mov	r0, r3
   41d52:	4770      	bx	lr
   41d54:	2900      	cmp	r1, #0
   41d56:	bf18      	it	ne
   41d58:	2300      	movne	r3, #0
   41d5a:	e7f9      	b.n	41d50 <strchr+0xe>

00041d5c <strcpy>:
   41d5c:	4603      	mov	r3, r0
   41d5e:	f811 2b01 	ldrb.w	r2, [r1], #1
   41d62:	f803 2b01 	strb.w	r2, [r3], #1
   41d66:	2a00      	cmp	r2, #0
   41d68:	d1f9      	bne.n	41d5e <strcpy+0x2>
   41d6a:	4770      	bx	lr

00041d6c <__strcpy_chk>:
   41d6c:	b570      	push	{r4, r5, r6, lr}
   41d6e:	4605      	mov	r5, r0
   41d70:	4608      	mov	r0, r1
   41d72:	4616      	mov	r6, r2
   41d74:	460c      	mov	r4, r1
   41d76:	f7d8 f8b5 	bl	19ee4 <strlen>
   41d7a:	1c42      	adds	r2, r0, #1
   41d7c:	42b2      	cmp	r2, r6
   41d7e:	d901      	bls.n	41d84 <__strcpy_chk+0x18>
   41d80:	f7fb fe20 	bl	3d9c4 <__chk_fail>
   41d84:	42ac      	cmp	r4, r5
   41d86:	d804      	bhi.n	41d92 <__strcpy_chk+0x26>
   41d88:	18a3      	adds	r3, r4, r2
   41d8a:	429d      	cmp	r5, r3
   41d8c:	d3f8      	bcc.n	41d80 <__strcpy_chk+0x14>
   41d8e:	42ac      	cmp	r4, r5
   41d90:	d102      	bne.n	41d98 <__strcpy_chk+0x2c>
   41d92:	18ab      	adds	r3, r5, r2
   41d94:	429c      	cmp	r4, r3
   41d96:	d3f3      	bcc.n	41d80 <__strcpy_chk+0x14>
   41d98:	4621      	mov	r1, r4
   41d9a:	4628      	mov	r0, r5
   41d9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   41da0:	f7ff be07 	b.w	419b2 <memcpy>

00041da4 <strncmp>:
   41da4:	b510      	push	{r4, lr}
   41da6:	b16a      	cbz	r2, 41dc4 <strncmp+0x20>
   41da8:	3901      	subs	r1, #1
   41daa:	1884      	adds	r4, r0, r2
   41dac:	f810 3b01 	ldrb.w	r3, [r0], #1
   41db0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   41db4:	4293      	cmp	r3, r2
   41db6:	d103      	bne.n	41dc0 <strncmp+0x1c>
   41db8:	42a0      	cmp	r0, r4
   41dba:	d001      	beq.n	41dc0 <strncmp+0x1c>
   41dbc:	2b00      	cmp	r3, #0
   41dbe:	d1f5      	bne.n	41dac <strncmp+0x8>
   41dc0:	1a98      	subs	r0, r3, r2
   41dc2:	bd10      	pop	{r4, pc}
   41dc4:	4610      	mov	r0, r2
   41dc6:	e7fc      	b.n	41dc2 <strncmp+0x1e>

00041dc8 <strncpy>:
   41dc8:	3901      	subs	r1, #1
   41dca:	4603      	mov	r3, r0
   41dcc:	b510      	push	{r4, lr}
   41dce:	b132      	cbz	r2, 41dde <strncpy+0x16>
   41dd0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   41dd4:	3a01      	subs	r2, #1
   41dd6:	f803 4b01 	strb.w	r4, [r3], #1
   41dda:	2c00      	cmp	r4, #0
   41ddc:	d1f7      	bne.n	41dce <strncpy+0x6>
   41dde:	441a      	add	r2, r3
   41de0:	2100      	movs	r1, #0
   41de2:	4293      	cmp	r3, r2
   41de4:	d100      	bne.n	41de8 <strncpy+0x20>
   41de6:	bd10      	pop	{r4, pc}
   41de8:	f803 1b01 	strb.w	r1, [r3], #1
   41dec:	e7f9      	b.n	41de2 <strncpy+0x1a>

00041dee <strnlen>:
   41dee:	4602      	mov	r2, r0
   41df0:	4401      	add	r1, r0
   41df2:	b510      	push	{r4, lr}
   41df4:	428a      	cmp	r2, r1
   41df6:	4613      	mov	r3, r2
   41df8:	d003      	beq.n	41e02 <strnlen+0x14>
   41dfa:	781c      	ldrb	r4, [r3, #0]
   41dfc:	3201      	adds	r2, #1
   41dfe:	2c00      	cmp	r4, #0
   41e00:	d1f8      	bne.n	41df4 <strnlen+0x6>
   41e02:	1a18      	subs	r0, r3, r0
   41e04:	bd10      	pop	{r4, pc}

00041e06 <strstr>:
   41e06:	b5f0      	push	{r4, r5, r6, r7, lr}
   41e08:	780c      	ldrb	r4, [r1, #0]
   41e0a:	b164      	cbz	r4, 41e26 <strstr+0x20>
   41e0c:	4603      	mov	r3, r0
   41e0e:	781a      	ldrb	r2, [r3, #0]
   41e10:	4618      	mov	r0, r3
   41e12:	1c5e      	adds	r6, r3, #1
   41e14:	b90a      	cbnz	r2, 41e1a <strstr+0x14>
   41e16:	4610      	mov	r0, r2
   41e18:	e005      	b.n	41e26 <strstr+0x20>
   41e1a:	4294      	cmp	r4, r2
   41e1c:	d108      	bne.n	41e30 <strstr+0x2a>
   41e1e:	460d      	mov	r5, r1
   41e20:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   41e24:	b902      	cbnz	r2, 41e28 <strstr+0x22>
   41e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   41e28:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   41e2c:	4297      	cmp	r7, r2
   41e2e:	d0f7      	beq.n	41e20 <strstr+0x1a>
   41e30:	4633      	mov	r3, r6
   41e32:	e7ec      	b.n	41e0e <strstr+0x8>

00041e34 <sulp>:
   41e34:	b570      	push	{r4, r5, r6, lr}
   41e36:	4604      	mov	r4, r0
   41e38:	460d      	mov	r5, r1
   41e3a:	4616      	mov	r6, r2
   41e3c:	ec45 4b10 	vmov	d0, r4, r5
   41e40:	f7fc fa46 	bl	3e2d0 <__ulp>
   41e44:	ec51 0b10 	vmov	r0, r1, d0
   41e48:	b17e      	cbz	r6, 41e6a <sulp+0x36>
   41e4a:	f3c5 530a 	ubfx	r3, r5, #20, #11
   41e4e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   41e52:	2b00      	cmp	r3, #0
   41e54:	dd09      	ble.n	41e6a <sulp+0x36>
   41e56:	051b      	lsls	r3, r3, #20
   41e58:	2400      	movs	r4, #0
   41e5a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   41e5e:	4622      	mov	r2, r4
   41e60:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   41e64:	462b      	mov	r3, r5
   41e66:	f7d6 fc97 	bl	18798 <__aeabi_dmul>
   41e6a:	bd70      	pop	{r4, r5, r6, pc}

00041e6c <_strtol_r>:
   41e6c:	f7fb bbaa 	b.w	3d5c4 <_strtol_l.isra.0>

00041e70 <_strtoul_r>:
   41e70:	f7fb bc2a 	b.w	3d6c8 <_strtoul_l.isra.0>

00041e74 <_vsniprintf_r>:
   41e74:	b530      	push	{r4, r5, lr}
   41e76:	1e14      	subs	r4, r2, #0
   41e78:	4605      	mov	r5, r0
   41e7a:	b09b      	sub	sp, #108	; 0x6c
   41e7c:	4618      	mov	r0, r3
   41e7e:	da05      	bge.n	41e8c <_vsniprintf_r+0x18>
   41e80:	238b      	movs	r3, #139	; 0x8b
   41e82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   41e86:	602b      	str	r3, [r5, #0]
   41e88:	b01b      	add	sp, #108	; 0x6c
   41e8a:	bd30      	pop	{r4, r5, pc}
   41e8c:	f44f 7302 	mov.w	r3, #520	; 0x208
   41e90:	9100      	str	r1, [sp, #0]
   41e92:	9104      	str	r1, [sp, #16]
   41e94:	4602      	mov	r2, r0
   41e96:	f8ad 300c 	strh.w	r3, [sp, #12]
   41e9a:	bf14      	ite	ne
   41e9c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   41ea0:	4623      	moveq	r3, r4
   41ea2:	4669      	mov	r1, sp
   41ea4:	4628      	mov	r0, r5
   41ea6:	9302      	str	r3, [sp, #8]
   41ea8:	9305      	str	r3, [sp, #20]
   41eaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   41eae:	f8ad 300e 	strh.w	r3, [sp, #14]
   41eb2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   41eb4:	f7fc fa80 	bl	3e3b8 <_svfiprintf_r>
   41eb8:	1c43      	adds	r3, r0, #1
   41eba:	bfbc      	itt	lt
   41ebc:	238b      	movlt	r3, #139	; 0x8b
   41ebe:	602b      	strlt	r3, [r5, #0]
   41ec0:	2c00      	cmp	r4, #0
   41ec2:	d0e1      	beq.n	41e88 <_vsniprintf_r+0x14>
   41ec4:	9b00      	ldr	r3, [sp, #0]
   41ec6:	2200      	movs	r2, #0
   41ec8:	701a      	strb	r2, [r3, #0]
   41eca:	e7dd      	b.n	41e88 <_vsniprintf_r+0x14>

00041ecc <abort>:
   41ecc:	b508      	push	{r3, lr}
   41ece:	2006      	movs	r0, #6
   41ed0:	f7fc fe10 	bl	3eaf4 <raise>
   41ed4:	2001      	movs	r0, #1
   41ed6:	f7df fa9d 	bl	21414 <_exit>

00041eda <quorem>:
   41eda:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41ede:	6903      	ldr	r3, [r0, #16]
   41ee0:	4680      	mov	r8, r0
   41ee2:	690c      	ldr	r4, [r1, #16]
   41ee4:	42a3      	cmp	r3, r4
   41ee6:	f2c0 8084 	blt.w	41ff2 <quorem+0x118>
   41eea:	3c01      	subs	r4, #1
   41eec:	f108 0514 	add.w	r5, r8, #20
   41ef0:	f101 0714 	add.w	r7, r1, #20
   41ef4:	00a0      	lsls	r0, r4, #2
   41ef6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   41efa:	182b      	adds	r3, r5, r0
   41efc:	eb07 0900 	add.w	r9, r7, r0
   41f00:	9301      	str	r3, [sp, #4]
   41f02:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   41f06:	3301      	adds	r3, #1
   41f08:	429a      	cmp	r2, r3
   41f0a:	fbb2 f6f3 	udiv	r6, r2, r3
   41f0e:	d333      	bcc.n	41f78 <quorem+0x9e>
   41f10:	f04f 0a00 	mov.w	sl, #0
   41f14:	46bc      	mov	ip, r7
   41f16:	46ae      	mov	lr, r5
   41f18:	46d3      	mov	fp, sl
   41f1a:	f85c 2b04 	ldr.w	r2, [ip], #4
   41f1e:	b293      	uxth	r3, r2
   41f20:	45e1      	cmp	r9, ip
   41f22:	ea4f 4212 	mov.w	r2, r2, lsr #16
   41f26:	fb06 a303 	mla	r3, r6, r3, sl
   41f2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   41f2e:	b29b      	uxth	r3, r3
   41f30:	fb06 a202 	mla	r2, r6, r2, sl
   41f34:	ebab 0303 	sub.w	r3, fp, r3
   41f38:	f8de b000 	ldr.w	fp, [lr]
   41f3c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
   41f40:	fa1f fb8b 	uxth.w	fp, fp
   41f44:	445b      	add	r3, fp
   41f46:	fa1f fb82 	uxth.w	fp, r2
   41f4a:	f8de 2000 	ldr.w	r2, [lr]
   41f4e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
   41f52:	eb02 4223 	add.w	r2, r2, r3, asr #16
   41f56:	b29b      	uxth	r3, r3
   41f58:	ea4f 4b22 	mov.w	fp, r2, asr #16
   41f5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   41f60:	f84e 3b04 	str.w	r3, [lr], #4
   41f64:	d2d9      	bcs.n	41f1a <quorem+0x40>
   41f66:	582b      	ldr	r3, [r5, r0]
   41f68:	b933      	cbnz	r3, 41f78 <quorem+0x9e>
   41f6a:	9b01      	ldr	r3, [sp, #4]
   41f6c:	3b04      	subs	r3, #4
   41f6e:	429d      	cmp	r5, r3
   41f70:	461a      	mov	r2, r3
   41f72:	d332      	bcc.n	41fda <quorem+0x100>
   41f74:	f8c8 4010 	str.w	r4, [r8, #16]
   41f78:	4640      	mov	r0, r8
   41f7a:	f000 fbc9 	bl	42710 <__mcmp>
   41f7e:	2800      	cmp	r0, #0
   41f80:	db27      	blt.n	41fd2 <quorem+0xf8>
   41f82:	3601      	adds	r6, #1
   41f84:	4628      	mov	r0, r5
   41f86:	f04f 0c00 	mov.w	ip, #0
   41f8a:	f857 1b04 	ldr.w	r1, [r7], #4
   41f8e:	f8d0 e000 	ldr.w	lr, [r0]
   41f92:	b28b      	uxth	r3, r1
   41f94:	45b9      	cmp	r9, r7
   41f96:	fa1f f28e 	uxth.w	r2, lr
   41f9a:	ebac 0303 	sub.w	r3, ip, r3
   41f9e:	4413      	add	r3, r2
   41fa0:	ea4f 4211 	mov.w	r2, r1, lsr #16
   41fa4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   41fa8:	eb02 4223 	add.w	r2, r2, r3, asr #16
   41fac:	b29b      	uxth	r3, r3
   41fae:	ea4f 4c22 	mov.w	ip, r2, asr #16
   41fb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   41fb6:	f840 3b04 	str.w	r3, [r0], #4
   41fba:	d2e6      	bcs.n	41f8a <quorem+0xb0>
   41fbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   41fc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   41fc4:	b92a      	cbnz	r2, 41fd2 <quorem+0xf8>
   41fc6:	3b04      	subs	r3, #4
   41fc8:	429d      	cmp	r5, r3
   41fca:	461a      	mov	r2, r3
   41fcc:	d30b      	bcc.n	41fe6 <quorem+0x10c>
   41fce:	f8c8 4010 	str.w	r4, [r8, #16]
   41fd2:	4630      	mov	r0, r6
   41fd4:	b003      	add	sp, #12
   41fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41fda:	6812      	ldr	r2, [r2, #0]
   41fdc:	3b04      	subs	r3, #4
   41fde:	2a00      	cmp	r2, #0
   41fe0:	d1c8      	bne.n	41f74 <quorem+0x9a>
   41fe2:	3c01      	subs	r4, #1
   41fe4:	e7c3      	b.n	41f6e <quorem+0x94>
   41fe6:	6812      	ldr	r2, [r2, #0]
   41fe8:	3b04      	subs	r3, #4
   41fea:	2a00      	cmp	r2, #0
   41fec:	d1ef      	bne.n	41fce <quorem+0xf4>
   41fee:	3c01      	subs	r4, #1
   41ff0:	e7ea      	b.n	41fc8 <quorem+0xee>
   41ff2:	2000      	movs	r0, #0
   41ff4:	e7ee      	b.n	41fd4 <quorem+0xfa>

00041ff6 <__sfmoreglue>:
   41ff6:	b570      	push	{r4, r5, r6, lr}
   41ff8:	1e4a      	subs	r2, r1, #1
   41ffa:	2568      	movs	r5, #104	; 0x68
   41ffc:	460e      	mov	r6, r1
   41ffe:	4355      	muls	r5, r2
   42000:	f105 0174 	add.w	r1, r5, #116	; 0x74
   42004:	f7fa fd44 	bl	3ca90 <_malloc_r>
   42008:	4604      	mov	r4, r0
   4200a:	b140      	cbz	r0, 4201e <__sfmoreglue+0x28>
   4200c:	2100      	movs	r1, #0
   4200e:	f105 0268 	add.w	r2, r5, #104	; 0x68
   42012:	e9c0 1600 	strd	r1, r6, [r0]
   42016:	300c      	adds	r0, #12
   42018:	60a0      	str	r0, [r4, #8]
   4201a:	f7ff fcea 	bl	419f2 <memset>
   4201e:	4620      	mov	r0, r4
   42020:	bd70      	pop	{r4, r5, r6, pc}

00042022 <_fwalk_reent>:
   42022:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   42026:	4680      	mov	r8, r0
   42028:	4689      	mov	r9, r1
   4202a:	f100 0448 	add.w	r4, r0, #72	; 0x48
   4202e:	2600      	movs	r6, #0
   42030:	b914      	cbnz	r4, 42038 <_fwalk_reent+0x16>
   42032:	4630      	mov	r0, r6
   42034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   42038:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
   4203c:	3f01      	subs	r7, #1
   4203e:	d501      	bpl.n	42044 <_fwalk_reent+0x22>
   42040:	6824      	ldr	r4, [r4, #0]
   42042:	e7f5      	b.n	42030 <_fwalk_reent+0xe>
   42044:	89ab      	ldrh	r3, [r5, #12]
   42046:	2b01      	cmp	r3, #1
   42048:	d907      	bls.n	4205a <_fwalk_reent+0x38>
   4204a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   4204e:	3301      	adds	r3, #1
   42050:	d003      	beq.n	4205a <_fwalk_reent+0x38>
   42052:	4629      	mov	r1, r5
   42054:	4640      	mov	r0, r8
   42056:	47c8      	blx	r9
   42058:	4306      	orrs	r6, r0
   4205a:	3568      	adds	r5, #104	; 0x68
   4205c:	e7ee      	b.n	4203c <_fwalk_reent+0x1a>

0004205e <rshift>:
   4205e:	b5f0      	push	{r4, r5, r6, r7, lr}
   42060:	114b      	asrs	r3, r1, #5
   42062:	6906      	ldr	r6, [r0, #16]
   42064:	f100 0414 	add.w	r4, r0, #20
   42068:	429e      	cmp	r6, r3
   4206a:	dd30      	ble.n	420ce <rshift+0x70>
   4206c:	f011 011f 	ands.w	r1, r1, #31
   42070:	eb04 0686 	add.w	r6, r4, r6, lsl #2
   42074:	eb04 0283 	add.w	r2, r4, r3, lsl #2
   42078:	d108      	bne.n	4208c <rshift+0x2e>
   4207a:	4621      	mov	r1, r4
   4207c:	42b2      	cmp	r2, r6
   4207e:	460b      	mov	r3, r1
   42080:	d211      	bcs.n	420a6 <rshift+0x48>
   42082:	f852 3b04 	ldr.w	r3, [r2], #4
   42086:	f841 3b04 	str.w	r3, [r1], #4
   4208a:	e7f7      	b.n	4207c <rshift+0x1e>
   4208c:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
   42090:	f1c1 0c20 	rsb	ip, r1, #32
   42094:	3204      	adds	r2, #4
   42096:	4623      	mov	r3, r4
   42098:	40cd      	lsrs	r5, r1
   4209a:	4296      	cmp	r6, r2
   4209c:	4617      	mov	r7, r2
   4209e:	d80c      	bhi.n	420ba <rshift+0x5c>
   420a0:	601d      	str	r5, [r3, #0]
   420a2:	b105      	cbz	r5, 420a6 <rshift+0x48>
   420a4:	3304      	adds	r3, #4
   420a6:	1b1a      	subs	r2, r3, r4
   420a8:	42a3      	cmp	r3, r4
   420aa:	ea4f 02a2 	mov.w	r2, r2, asr #2
   420ae:	bf08      	it	eq
   420b0:	2300      	moveq	r3, #0
   420b2:	6102      	str	r2, [r0, #16]
   420b4:	bf08      	it	eq
   420b6:	6143      	streq	r3, [r0, #20]
   420b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   420ba:	683f      	ldr	r7, [r7, #0]
   420bc:	fa07 f70c 	lsl.w	r7, r7, ip
   420c0:	433d      	orrs	r5, r7
   420c2:	f843 5b04 	str.w	r5, [r3], #4
   420c6:	f852 5b04 	ldr.w	r5, [r2], #4
   420ca:	40cd      	lsrs	r5, r1
   420cc:	e7e5      	b.n	4209a <rshift+0x3c>
   420ce:	4623      	mov	r3, r4
   420d0:	e7e9      	b.n	420a6 <rshift+0x48>

000420d2 <__hexdig_fun>:
   420d2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   420d6:	2b09      	cmp	r3, #9
   420d8:	d802      	bhi.n	420e0 <__hexdig_fun+0xe>
   420da:	3820      	subs	r0, #32
   420dc:	b2c0      	uxtb	r0, r0
   420de:	4770      	bx	lr
   420e0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   420e4:	2b05      	cmp	r3, #5
   420e6:	d801      	bhi.n	420ec <__hexdig_fun+0x1a>
   420e8:	3847      	subs	r0, #71	; 0x47
   420ea:	e7f7      	b.n	420dc <__hexdig_fun+0xa>
   420ec:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   420f0:	2b05      	cmp	r3, #5
   420f2:	d801      	bhi.n	420f8 <__hexdig_fun+0x26>
   420f4:	3827      	subs	r0, #39	; 0x27
   420f6:	e7f1      	b.n	420dc <__hexdig_fun+0xa>
   420f8:	2000      	movs	r0, #0
   420fa:	4770      	bx	lr

000420fc <L_shift>:
   420fc:	f1c2 0208 	rsb	r2, r2, #8
   42100:	0092      	lsls	r2, r2, #2
   42102:	b570      	push	{r4, r5, r6, lr}
   42104:	f1c2 0620 	rsb	r6, r2, #32
   42108:	6843      	ldr	r3, [r0, #4]
   4210a:	6804      	ldr	r4, [r0, #0]
   4210c:	fa03 f506 	lsl.w	r5, r3, r6
   42110:	40d3      	lsrs	r3, r2
   42112:	432c      	orrs	r4, r5
   42114:	6004      	str	r4, [r0, #0]
   42116:	f840 3f04 	str.w	r3, [r0, #4]!
   4211a:	4288      	cmp	r0, r1
   4211c:	d3f4      	bcc.n	42108 <L_shift+0xc>
   4211e:	bd70      	pop	{r4, r5, r6, pc}

00042120 <__match>:
   42120:	6803      	ldr	r3, [r0, #0]
   42122:	3301      	adds	r3, #1
   42124:	b530      	push	{r4, r5, lr}
   42126:	f811 4b01 	ldrb.w	r4, [r1], #1
   4212a:	b914      	cbnz	r4, 42132 <__match+0x12>
   4212c:	6003      	str	r3, [r0, #0]
   4212e:	2001      	movs	r0, #1
   42130:	bd30      	pop	{r4, r5, pc}
   42132:	f813 2b01 	ldrb.w	r2, [r3], #1
   42136:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   4213a:	2d19      	cmp	r5, #25
   4213c:	bf98      	it	ls
   4213e:	3220      	addls	r2, #32
   42140:	42a2      	cmp	r2, r4
   42142:	d0f0      	beq.n	42126 <__match+0x6>
   42144:	2000      	movs	r0, #0
   42146:	e7f3      	b.n	42130 <__match+0x10>

00042148 <__hexnan>:
   42148:	680b      	ldr	r3, [r1, #0]
   4214a:	6801      	ldr	r1, [r0, #0]
   4214c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42150:	115f      	asrs	r7, r3, #5
   42152:	f013 031f 	ands.w	r3, r3, #31
   42156:	f04f 0500 	mov.w	r5, #0
   4215a:	b087      	sub	sp, #28
   4215c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
   42160:	4682      	mov	sl, r0
   42162:	4690      	mov	r8, r2
   42164:	46ab      	mov	fp, r5
   42166:	bf18      	it	ne
   42168:	3704      	addne	r7, #4
   4216a:	9301      	str	r3, [sp, #4]
   4216c:	9502      	str	r5, [sp, #8]
   4216e:	1f3e      	subs	r6, r7, #4
   42170:	f847 5c04 	str.w	r5, [r7, #-4]
   42174:	46b1      	mov	r9, r6
   42176:	4634      	mov	r4, r6
   42178:	1c4b      	adds	r3, r1, #1
   4217a:	784a      	ldrb	r2, [r1, #1]
   4217c:	9303      	str	r3, [sp, #12]
   4217e:	b342      	cbz	r2, 421d2 <__hexnan+0x8a>
   42180:	4610      	mov	r0, r2
   42182:	9105      	str	r1, [sp, #20]
   42184:	9204      	str	r2, [sp, #16]
   42186:	f7ff ffa4 	bl	420d2 <__hexdig_fun>
   4218a:	2800      	cmp	r0, #0
   4218c:	d143      	bne.n	42216 <__hexnan+0xce>
   4218e:	9a04      	ldr	r2, [sp, #16]
   42190:	9905      	ldr	r1, [sp, #20]
   42192:	2a20      	cmp	r2, #32
   42194:	d818      	bhi.n	421c8 <__hexnan+0x80>
   42196:	9b02      	ldr	r3, [sp, #8]
   42198:	459b      	cmp	fp, r3
   4219a:	dd13      	ble.n	421c4 <__hexnan+0x7c>
   4219c:	454c      	cmp	r4, r9
   4219e:	d206      	bcs.n	421ae <__hexnan+0x66>
   421a0:	2d07      	cmp	r5, #7
   421a2:	dc04      	bgt.n	421ae <__hexnan+0x66>
   421a4:	462a      	mov	r2, r5
   421a6:	4649      	mov	r1, r9
   421a8:	4620      	mov	r0, r4
   421aa:	f7ff ffa7 	bl	420fc <L_shift>
   421ae:	4544      	cmp	r4, r8
   421b0:	d943      	bls.n	4223a <__hexnan+0xf2>
   421b2:	2300      	movs	r3, #0
   421b4:	f1a4 0904 	sub.w	r9, r4, #4
   421b8:	f8cd b008 	str.w	fp, [sp, #8]
   421bc:	f844 3c04 	str.w	r3, [r4, #-4]
   421c0:	461d      	mov	r5, r3
   421c2:	464c      	mov	r4, r9
   421c4:	9903      	ldr	r1, [sp, #12]
   421c6:	e7d7      	b.n	42178 <__hexnan+0x30>
   421c8:	2a29      	cmp	r2, #41	; 0x29
   421ca:	d149      	bne.n	42260 <__hexnan+0x118>
   421cc:	3102      	adds	r1, #2
   421ce:	f8ca 1000 	str.w	r1, [sl]
   421d2:	f1bb 0f00 	cmp.w	fp, #0
   421d6:	d043      	beq.n	42260 <__hexnan+0x118>
   421d8:	454c      	cmp	r4, r9
   421da:	d206      	bcs.n	421ea <__hexnan+0xa2>
   421dc:	2d07      	cmp	r5, #7
   421de:	dc04      	bgt.n	421ea <__hexnan+0xa2>
   421e0:	462a      	mov	r2, r5
   421e2:	4649      	mov	r1, r9
   421e4:	4620      	mov	r0, r4
   421e6:	f7ff ff89 	bl	420fc <L_shift>
   421ea:	4544      	cmp	r4, r8
   421ec:	d927      	bls.n	4223e <__hexnan+0xf6>
   421ee:	4643      	mov	r3, r8
   421f0:	f854 2b04 	ldr.w	r2, [r4], #4
   421f4:	42a6      	cmp	r6, r4
   421f6:	f843 2b04 	str.w	r2, [r3], #4
   421fa:	d2f9      	bcs.n	421f0 <__hexnan+0xa8>
   421fc:	2200      	movs	r2, #0
   421fe:	f843 2b04 	str.w	r2, [r3], #4
   42202:	429e      	cmp	r6, r3
   42204:	d2fb      	bcs.n	421fe <__hexnan+0xb6>
   42206:	6833      	ldr	r3, [r6, #0]
   42208:	b91b      	cbnz	r3, 42212 <__hexnan+0xca>
   4220a:	4546      	cmp	r6, r8
   4220c:	d126      	bne.n	4225c <__hexnan+0x114>
   4220e:	2301      	movs	r3, #1
   42210:	6033      	str	r3, [r6, #0]
   42212:	2005      	movs	r0, #5
   42214:	e025      	b.n	42262 <__hexnan+0x11a>
   42216:	3501      	adds	r5, #1
   42218:	f10b 0b01 	add.w	fp, fp, #1
   4221c:	2d08      	cmp	r5, #8
   4221e:	dd05      	ble.n	4222c <__hexnan+0xe4>
   42220:	4544      	cmp	r4, r8
   42222:	d9cf      	bls.n	421c4 <__hexnan+0x7c>
   42224:	2300      	movs	r3, #0
   42226:	3c04      	subs	r4, #4
   42228:	2501      	movs	r5, #1
   4222a:	6023      	str	r3, [r4, #0]
   4222c:	6822      	ldr	r2, [r4, #0]
   4222e:	f000 000f 	and.w	r0, r0, #15
   42232:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
   42236:	6020      	str	r0, [r4, #0]
   42238:	e7c4      	b.n	421c4 <__hexnan+0x7c>
   4223a:	2508      	movs	r5, #8
   4223c:	e7c2      	b.n	421c4 <__hexnan+0x7c>
   4223e:	9b01      	ldr	r3, [sp, #4]
   42240:	2b00      	cmp	r3, #0
   42242:	d0e0      	beq.n	42206 <__hexnan+0xbe>
   42244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   42248:	f1c3 0320 	rsb	r3, r3, #32
   4224c:	fa22 f303 	lsr.w	r3, r2, r3
   42250:	f857 2c04 	ldr.w	r2, [r7, #-4]
   42254:	401a      	ands	r2, r3
   42256:	f847 2c04 	str.w	r2, [r7, #-4]
   4225a:	e7d4      	b.n	42206 <__hexnan+0xbe>
   4225c:	3e04      	subs	r6, #4
   4225e:	e7d2      	b.n	42206 <__hexnan+0xbe>
   42260:	2004      	movs	r0, #4
   42262:	b007      	add	sp, #28
   42264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00042268 <__retarget_lock_init_recursive>:
   42268:	4770      	bx	lr

0004226a <__retarget_lock_acquire_recursive>:
   4226a:	4770      	bx	lr

0004226c <__retarget_lock_release_recursive>:
   4226c:	4770      	bx	lr

0004226e <__swhatbuf_r>:
   4226e:	b570      	push	{r4, r5, r6, lr}
   42270:	460e      	mov	r6, r1
   42272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   42276:	b096      	sub	sp, #88	; 0x58
   42278:	4614      	mov	r4, r2
   4227a:	2900      	cmp	r1, #0
   4227c:	461d      	mov	r5, r3
   4227e:	da07      	bge.n	42290 <__swhatbuf_r+0x22>
   42280:	2300      	movs	r3, #0
   42282:	602b      	str	r3, [r5, #0]
   42284:	89b3      	ldrh	r3, [r6, #12]
   42286:	061a      	lsls	r2, r3, #24
   42288:	d410      	bmi.n	422ac <__swhatbuf_r+0x3e>
   4228a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   4228e:	e00e      	b.n	422ae <__swhatbuf_r+0x40>
   42290:	466a      	mov	r2, sp
   42292:	f7fc fc49 	bl	3eb28 <_fstat_r>
   42296:	2800      	cmp	r0, #0
   42298:	dbf2      	blt.n	42280 <__swhatbuf_r+0x12>
   4229a:	9a01      	ldr	r2, [sp, #4]
   4229c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   422a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   422a4:	425a      	negs	r2, r3
   422a6:	415a      	adcs	r2, r3
   422a8:	602a      	str	r2, [r5, #0]
   422aa:	e7ee      	b.n	4228a <__swhatbuf_r+0x1c>
   422ac:	2340      	movs	r3, #64	; 0x40
   422ae:	2000      	movs	r0, #0
   422b0:	6023      	str	r3, [r4, #0]
   422b2:	b016      	add	sp, #88	; 0x58
   422b4:	bd70      	pop	{r4, r5, r6, pc}

000422b6 <__ascii_mbtowc>:
   422b6:	b082      	sub	sp, #8
   422b8:	b901      	cbnz	r1, 422bc <__ascii_mbtowc+0x6>
   422ba:	a901      	add	r1, sp, #4
   422bc:	b142      	cbz	r2, 422d0 <__ascii_mbtowc+0x1a>
   422be:	b14b      	cbz	r3, 422d4 <__ascii_mbtowc+0x1e>
   422c0:	7813      	ldrb	r3, [r2, #0]
   422c2:	600b      	str	r3, [r1, #0]
   422c4:	7812      	ldrb	r2, [r2, #0]
   422c6:	1c10      	adds	r0, r2, #0
   422c8:	bf18      	it	ne
   422ca:	2001      	movne	r0, #1
   422cc:	b002      	add	sp, #8
   422ce:	4770      	bx	lr
   422d0:	4610      	mov	r0, r2
   422d2:	e7fb      	b.n	422cc <__ascii_mbtowc+0x16>
   422d4:	f06f 0001 	mvn.w	r0, #1
   422d8:	e7f8      	b.n	422cc <__ascii_mbtowc+0x16>

000422da <memmove>:
   422da:	4288      	cmp	r0, r1
   422dc:	eb01 0302 	add.w	r3, r1, r2
   422e0:	b510      	push	{r4, lr}
   422e2:	d902      	bls.n	422ea <memmove+0x10>
   422e4:	4283      	cmp	r3, r0
   422e6:	461c      	mov	r4, r3
   422e8:	d807      	bhi.n	422fa <memmove+0x20>
   422ea:	1e42      	subs	r2, r0, #1
   422ec:	4299      	cmp	r1, r3
   422ee:	d008      	beq.n	42302 <memmove+0x28>
   422f0:	f811 4b01 	ldrb.w	r4, [r1], #1
   422f4:	f802 4f01 	strb.w	r4, [r2, #1]!
   422f8:	e7f8      	b.n	422ec <memmove+0x12>
   422fa:	1883      	adds	r3, r0, r2
   422fc:	1a9a      	subs	r2, r3, r2
   422fe:	429a      	cmp	r2, r3
   42300:	d100      	bne.n	42304 <memmove+0x2a>
   42302:	bd10      	pop	{r4, pc}
   42304:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   42308:	f803 1d01 	strb.w	r1, [r3, #-1]!
   4230c:	e7f7      	b.n	422fe <memmove+0x24>

0004230e <_Balloc>:
   4230e:	b570      	push	{r4, r5, r6, lr}
   42310:	6a45      	ldr	r5, [r0, #36]	; 0x24
   42312:	4604      	mov	r4, r0
   42314:	460e      	mov	r6, r1
   42316:	b93d      	cbnz	r5, 42328 <_Balloc+0x1a>
   42318:	2010      	movs	r0, #16
   4231a:	f7fa fb5b 	bl	3c9d4 <malloc>
   4231e:	6260      	str	r0, [r4, #36]	; 0x24
   42320:	6005      	str	r5, [r0, #0]
   42322:	60c5      	str	r5, [r0, #12]
   42324:	e9c0 5501 	strd	r5, r5, [r0, #4]
   42328:	6a65      	ldr	r5, [r4, #36]	; 0x24
   4232a:	68eb      	ldr	r3, [r5, #12]
   4232c:	b183      	cbz	r3, 42350 <_Balloc+0x42>
   4232e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   42330:	68db      	ldr	r3, [r3, #12]
   42332:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   42336:	b9b8      	cbnz	r0, 42368 <_Balloc+0x5a>
   42338:	2101      	movs	r1, #1
   4233a:	4620      	mov	r0, r4
   4233c:	fa01 f506 	lsl.w	r5, r1, r6
   42340:	1d6a      	adds	r2, r5, #5
   42342:	0092      	lsls	r2, r2, #2
   42344:	f000 fb1a 	bl	4297c <_calloc_r>
   42348:	b160      	cbz	r0, 42364 <_Balloc+0x56>
   4234a:	e9c0 6501 	strd	r6, r5, [r0, #4]
   4234e:	e00e      	b.n	4236e <_Balloc+0x60>
   42350:	2221      	movs	r2, #33	; 0x21
   42352:	2104      	movs	r1, #4
   42354:	4620      	mov	r0, r4
   42356:	f000 fb11 	bl	4297c <_calloc_r>
   4235a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   4235c:	60e8      	str	r0, [r5, #12]
   4235e:	68db      	ldr	r3, [r3, #12]
   42360:	2b00      	cmp	r3, #0
   42362:	d1e4      	bne.n	4232e <_Balloc+0x20>
   42364:	2000      	movs	r0, #0
   42366:	bd70      	pop	{r4, r5, r6, pc}
   42368:	6802      	ldr	r2, [r0, #0]
   4236a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   4236e:	2300      	movs	r3, #0
   42370:	e9c0 3303 	strd	r3, r3, [r0, #12]
   42374:	e7f7      	b.n	42366 <_Balloc+0x58>

00042376 <_Bfree>:
   42376:	b570      	push	{r4, r5, r6, lr}
   42378:	6a44      	ldr	r4, [r0, #36]	; 0x24
   4237a:	4606      	mov	r6, r0
   4237c:	460d      	mov	r5, r1
   4237e:	b93c      	cbnz	r4, 42390 <_Bfree+0x1a>
   42380:	2010      	movs	r0, #16
   42382:	f7fa fb27 	bl	3c9d4 <malloc>
   42386:	6270      	str	r0, [r6, #36]	; 0x24
   42388:	6004      	str	r4, [r0, #0]
   4238a:	60c4      	str	r4, [r0, #12]
   4238c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   42390:	b13d      	cbz	r5, 423a2 <_Bfree+0x2c>
   42392:	6a73      	ldr	r3, [r6, #36]	; 0x24
   42394:	686a      	ldr	r2, [r5, #4]
   42396:	68db      	ldr	r3, [r3, #12]
   42398:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   4239c:	6029      	str	r1, [r5, #0]
   4239e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   423a2:	bd70      	pop	{r4, r5, r6, pc}

000423a4 <__multadd>:
   423a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   423a8:	f101 0c14 	add.w	ip, r1, #20
   423ac:	461f      	mov	r7, r3
   423ae:	4606      	mov	r6, r0
   423b0:	460c      	mov	r4, r1
   423b2:	690d      	ldr	r5, [r1, #16]
   423b4:	2300      	movs	r3, #0
   423b6:	f8dc 0000 	ldr.w	r0, [ip]
   423ba:	3301      	adds	r3, #1
   423bc:	b281      	uxth	r1, r0
   423be:	429d      	cmp	r5, r3
   423c0:	ea4f 4010 	mov.w	r0, r0, lsr #16
   423c4:	fb02 7101 	mla	r1, r2, r1, r7
   423c8:	ea4f 4711 	mov.w	r7, r1, lsr #16
   423cc:	b289      	uxth	r1, r1
   423ce:	fb02 7000 	mla	r0, r2, r0, r7
   423d2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   423d6:	ea4f 4710 	mov.w	r7, r0, lsr #16
   423da:	f84c 1b04 	str.w	r1, [ip], #4
   423de:	dcea      	bgt.n	423b6 <__multadd+0x12>
   423e0:	b1d7      	cbz	r7, 42418 <__multadd+0x74>
   423e2:	68a3      	ldr	r3, [r4, #8]
   423e4:	42ab      	cmp	r3, r5
   423e6:	dc12      	bgt.n	4240e <__multadd+0x6a>
   423e8:	6861      	ldr	r1, [r4, #4]
   423ea:	4630      	mov	r0, r6
   423ec:	3101      	adds	r1, #1
   423ee:	f7ff ff8e 	bl	4230e <_Balloc>
   423f2:	6922      	ldr	r2, [r4, #16]
   423f4:	4680      	mov	r8, r0
   423f6:	f104 010c 	add.w	r1, r4, #12
   423fa:	3202      	adds	r2, #2
   423fc:	300c      	adds	r0, #12
   423fe:	0092      	lsls	r2, r2, #2
   42400:	f7ff fad7 	bl	419b2 <memcpy>
   42404:	4621      	mov	r1, r4
   42406:	4644      	mov	r4, r8
   42408:	4630      	mov	r0, r6
   4240a:	f7ff ffb4 	bl	42376 <_Bfree>
   4240e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   42412:	3501      	adds	r5, #1
   42414:	615f      	str	r7, [r3, #20]
   42416:	6125      	str	r5, [r4, #16]
   42418:	4620      	mov	r0, r4
   4241a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004241e <__s2b>:
   4241e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   42422:	4615      	mov	r5, r2
   42424:	461f      	mov	r7, r3
   42426:	2209      	movs	r2, #9
   42428:	3308      	adds	r3, #8
   4242a:	460c      	mov	r4, r1
   4242c:	4606      	mov	r6, r0
   4242e:	2100      	movs	r1, #0
   42430:	fb93 f3f2 	sdiv	r3, r3, r2
   42434:	2201      	movs	r2, #1
   42436:	429a      	cmp	r2, r3
   42438:	db20      	blt.n	4247c <__s2b+0x5e>
   4243a:	4630      	mov	r0, r6
   4243c:	f7ff ff67 	bl	4230e <_Balloc>
   42440:	9b08      	ldr	r3, [sp, #32]
   42442:	2d09      	cmp	r5, #9
   42444:	6143      	str	r3, [r0, #20]
   42446:	f04f 0301 	mov.w	r3, #1
   4244a:	6103      	str	r3, [r0, #16]
   4244c:	dd19      	ble.n	42482 <__s2b+0x64>
   4244e:	f104 0909 	add.w	r9, r4, #9
   42452:	442c      	add	r4, r5
   42454:	46c8      	mov	r8, r9
   42456:	f818 3b01 	ldrb.w	r3, [r8], #1
   4245a:	4601      	mov	r1, r0
   4245c:	220a      	movs	r2, #10
   4245e:	4630      	mov	r0, r6
   42460:	3b30      	subs	r3, #48	; 0x30
   42462:	f7ff ff9f 	bl	423a4 <__multadd>
   42466:	45a0      	cmp	r8, r4
   42468:	d1f5      	bne.n	42456 <__s2b+0x38>
   4246a:	f1a5 0408 	sub.w	r4, r5, #8
   4246e:	444c      	add	r4, r9
   42470:	1b2d      	subs	r5, r5, r4
   42472:	1963      	adds	r3, r4, r5
   42474:	42bb      	cmp	r3, r7
   42476:	db07      	blt.n	42488 <__s2b+0x6a>
   42478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   4247c:	0052      	lsls	r2, r2, #1
   4247e:	3101      	adds	r1, #1
   42480:	e7d9      	b.n	42436 <__s2b+0x18>
   42482:	340a      	adds	r4, #10
   42484:	2509      	movs	r5, #9
   42486:	e7f3      	b.n	42470 <__s2b+0x52>
   42488:	f814 3b01 	ldrb.w	r3, [r4], #1
   4248c:	4601      	mov	r1, r0
   4248e:	220a      	movs	r2, #10
   42490:	4630      	mov	r0, r6
   42492:	3b30      	subs	r3, #48	; 0x30
   42494:	f7ff ff86 	bl	423a4 <__multadd>
   42498:	e7eb      	b.n	42472 <__s2b+0x54>

0004249a <__hi0bits>:
   4249a:	0c02      	lsrs	r2, r0, #16
   4249c:	4603      	mov	r3, r0
   4249e:	0412      	lsls	r2, r2, #16
   424a0:	b9ca      	cbnz	r2, 424d6 <__hi0bits+0x3c>
   424a2:	0403      	lsls	r3, r0, #16
   424a4:	2010      	movs	r0, #16
   424a6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   424aa:	bf04      	itt	eq
   424ac:	021b      	lsleq	r3, r3, #8
   424ae:	3008      	addeq	r0, #8
   424b0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   424b4:	bf04      	itt	eq
   424b6:	011b      	lsleq	r3, r3, #4
   424b8:	3004      	addeq	r0, #4
   424ba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   424be:	bf04      	itt	eq
   424c0:	009b      	lsleq	r3, r3, #2
   424c2:	3002      	addeq	r0, #2
   424c4:	2b00      	cmp	r3, #0
   424c6:	db05      	blt.n	424d4 <__hi0bits+0x3a>
   424c8:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   424cc:	f100 0001 	add.w	r0, r0, #1
   424d0:	bf08      	it	eq
   424d2:	2020      	moveq	r0, #32
   424d4:	4770      	bx	lr
   424d6:	2000      	movs	r0, #0
   424d8:	e7e5      	b.n	424a6 <__hi0bits+0xc>

000424da <__lo0bits>:
   424da:	6803      	ldr	r3, [r0, #0]
   424dc:	4601      	mov	r1, r0
   424de:	f013 0207 	ands.w	r2, r3, #7
   424e2:	d00b      	beq.n	424fc <__lo0bits+0x22>
   424e4:	07da      	lsls	r2, r3, #31
   424e6:	d424      	bmi.n	42532 <__lo0bits+0x58>
   424e8:	0798      	lsls	r0, r3, #30
   424ea:	bf47      	ittee	mi
   424ec:	085b      	lsrmi	r3, r3, #1
   424ee:	2001      	movmi	r0, #1
   424f0:	089b      	lsrpl	r3, r3, #2
   424f2:	2002      	movpl	r0, #2
   424f4:	bf4c      	ite	mi
   424f6:	600b      	strmi	r3, [r1, #0]
   424f8:	600b      	strpl	r3, [r1, #0]
   424fa:	4770      	bx	lr
   424fc:	b298      	uxth	r0, r3
   424fe:	b9b0      	cbnz	r0, 4252e <__lo0bits+0x54>
   42500:	0c1b      	lsrs	r3, r3, #16
   42502:	2010      	movs	r0, #16
   42504:	f013 0fff 	tst.w	r3, #255	; 0xff
   42508:	bf04      	itt	eq
   4250a:	0a1b      	lsreq	r3, r3, #8
   4250c:	3008      	addeq	r0, #8
   4250e:	071a      	lsls	r2, r3, #28
   42510:	bf04      	itt	eq
   42512:	091b      	lsreq	r3, r3, #4
   42514:	3004      	addeq	r0, #4
   42516:	079a      	lsls	r2, r3, #30
   42518:	bf04      	itt	eq
   4251a:	089b      	lsreq	r3, r3, #2
   4251c:	3002      	addeq	r0, #2
   4251e:	07da      	lsls	r2, r3, #31
   42520:	d403      	bmi.n	4252a <__lo0bits+0x50>
   42522:	085b      	lsrs	r3, r3, #1
   42524:	f100 0001 	add.w	r0, r0, #1
   42528:	d005      	beq.n	42536 <__lo0bits+0x5c>
   4252a:	600b      	str	r3, [r1, #0]
   4252c:	4770      	bx	lr
   4252e:	4610      	mov	r0, r2
   42530:	e7e8      	b.n	42504 <__lo0bits+0x2a>
   42532:	2000      	movs	r0, #0
   42534:	4770      	bx	lr
   42536:	2020      	movs	r0, #32
   42538:	4770      	bx	lr

0004253a <__i2b>:
   4253a:	b510      	push	{r4, lr}
   4253c:	460c      	mov	r4, r1
   4253e:	2101      	movs	r1, #1
   42540:	f7ff fee5 	bl	4230e <_Balloc>
   42544:	2201      	movs	r2, #1
   42546:	6144      	str	r4, [r0, #20]
   42548:	6102      	str	r2, [r0, #16]
   4254a:	bd10      	pop	{r4, pc}

0004254c <__multiply>:
   4254c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42550:	4690      	mov	r8, r2
   42552:	690a      	ldr	r2, [r1, #16]
   42554:	460c      	mov	r4, r1
   42556:	f8d8 3010 	ldr.w	r3, [r8, #16]
   4255a:	429a      	cmp	r2, r3
   4255c:	bfbe      	ittt	lt
   4255e:	460b      	movlt	r3, r1
   42560:	4644      	movlt	r4, r8
   42562:	4698      	movlt	r8, r3
   42564:	6927      	ldr	r7, [r4, #16]
   42566:	68a3      	ldr	r3, [r4, #8]
   42568:	f8d8 9010 	ldr.w	r9, [r8, #16]
   4256c:	6861      	ldr	r1, [r4, #4]
   4256e:	eb07 0609 	add.w	r6, r7, r9
   42572:	42b3      	cmp	r3, r6
   42574:	bfb8      	it	lt
   42576:	3101      	addlt	r1, #1
   42578:	f7ff fec9 	bl	4230e <_Balloc>
   4257c:	f100 0514 	add.w	r5, r0, #20
   42580:	2200      	movs	r2, #0
   42582:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
   42586:	462b      	mov	r3, r5
   42588:	4573      	cmp	r3, lr
   4258a:	d316      	bcc.n	425ba <__multiply+0x6e>
   4258c:	f104 0314 	add.w	r3, r4, #20
   42590:	f108 0214 	add.w	r2, r8, #20
   42594:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   42598:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   4259c:	9300      	str	r3, [sp, #0]
   4259e:	9b00      	ldr	r3, [sp, #0]
   425a0:	9201      	str	r2, [sp, #4]
   425a2:	4293      	cmp	r3, r2
   425a4:	d80c      	bhi.n	425c0 <__multiply+0x74>
   425a6:	2e00      	cmp	r6, #0
   425a8:	dd03      	ble.n	425b2 <__multiply+0x66>
   425aa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
   425ae:	2b00      	cmp	r3, #0
   425b0:	d059      	beq.n	42666 <__multiply+0x11a>
   425b2:	6106      	str	r6, [r0, #16]
   425b4:	b003      	add	sp, #12
   425b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   425ba:	f843 2b04 	str.w	r2, [r3], #4
   425be:	e7e3      	b.n	42588 <__multiply+0x3c>
   425c0:	f8b2 a000 	ldrh.w	sl, [r2]
   425c4:	f1ba 0f00 	cmp.w	sl, #0
   425c8:	d023      	beq.n	42612 <__multiply+0xc6>
   425ca:	f104 0914 	add.w	r9, r4, #20
   425ce:	46ac      	mov	ip, r5
   425d0:	f04f 0800 	mov.w	r8, #0
   425d4:	f859 1b04 	ldr.w	r1, [r9], #4
   425d8:	f8dc b000 	ldr.w	fp, [ip]
   425dc:	b28b      	uxth	r3, r1
   425de:	454f      	cmp	r7, r9
   425e0:	fa1f fb8b 	uxth.w	fp, fp
   425e4:	fb0a b303 	mla	r3, sl, r3, fp
   425e8:	ea4f 4b11 	mov.w	fp, r1, lsr #16
   425ec:	f8dc 1000 	ldr.w	r1, [ip]
   425f0:	4443      	add	r3, r8
   425f2:	ea4f 4811 	mov.w	r8, r1, lsr #16
   425f6:	fb0a 810b 	mla	r1, sl, fp, r8
   425fa:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   425fe:	b29b      	uxth	r3, r3
   42600:	ea4f 4811 	mov.w	r8, r1, lsr #16
   42604:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   42608:	f84c 3b04 	str.w	r3, [ip], #4
   4260c:	d8e2      	bhi.n	425d4 <__multiply+0x88>
   4260e:	f8cc 8000 	str.w	r8, [ip]
   42612:	9b01      	ldr	r3, [sp, #4]
   42614:	3204      	adds	r2, #4
   42616:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   4261a:	f1b9 0f00 	cmp.w	r9, #0
   4261e:	d020      	beq.n	42662 <__multiply+0x116>
   42620:	682b      	ldr	r3, [r5, #0]
   42622:	f104 0814 	add.w	r8, r4, #20
   42626:	46ac      	mov	ip, r5
   42628:	f04f 0a00 	mov.w	sl, #0
   4262c:	f8b8 1000 	ldrh.w	r1, [r8]
   42630:	b29b      	uxth	r3, r3
   42632:	f8bc b002 	ldrh.w	fp, [ip, #2]
   42636:	fb09 b101 	mla	r1, r9, r1, fp
   4263a:	448a      	add	sl, r1
   4263c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   42640:	f84c 3b04 	str.w	r3, [ip], #4
   42644:	f858 3b04 	ldr.w	r3, [r8], #4
   42648:	f8bc 1000 	ldrh.w	r1, [ip]
   4264c:	0c1b      	lsrs	r3, r3, #16
   4264e:	4547      	cmp	r7, r8
   42650:	fb09 1303 	mla	r3, r9, r3, r1
   42654:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   42658:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   4265c:	d8e6      	bhi.n	4262c <__multiply+0xe0>
   4265e:	f8cc 3000 	str.w	r3, [ip]
   42662:	3504      	adds	r5, #4
   42664:	e79b      	b.n	4259e <__multiply+0x52>
   42666:	3e01      	subs	r6, #1
   42668:	e79d      	b.n	425a6 <__multiply+0x5a>

0004266a <__lshift>:
   4266a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4266e:	460c      	mov	r4, r1
   42670:	ea4f 1a62 	mov.w	sl, r2, asr #5
   42674:	4607      	mov	r7, r0
   42676:	4616      	mov	r6, r2
   42678:	6923      	ldr	r3, [r4, #16]
   4267a:	6849      	ldr	r1, [r1, #4]
   4267c:	eb0a 0903 	add.w	r9, sl, r3
   42680:	68a3      	ldr	r3, [r4, #8]
   42682:	f109 0501 	add.w	r5, r9, #1
   42686:	42ab      	cmp	r3, r5
   42688:	db33      	blt.n	426f2 <__lshift+0x88>
   4268a:	4638      	mov	r0, r7
   4268c:	f7ff fe3f 	bl	4230e <_Balloc>
   42690:	2300      	movs	r3, #0
   42692:	4680      	mov	r8, r0
   42694:	f100 0114 	add.w	r1, r0, #20
   42698:	f100 0210 	add.w	r2, r0, #16
   4269c:	4618      	mov	r0, r3
   4269e:	4553      	cmp	r3, sl
   426a0:	db2a      	blt.n	426f8 <__lshift+0x8e>
   426a2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   426a6:	f104 0314 	add.w	r3, r4, #20
   426aa:	6920      	ldr	r0, [r4, #16]
   426ac:	f016 021f 	ands.w	r2, r6, #31
   426b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   426b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   426b8:	d022      	beq.n	42700 <__lshift+0x96>
   426ba:	f1c2 0e20 	rsb	lr, r2, #32
   426be:	2000      	movs	r0, #0
   426c0:	681e      	ldr	r6, [r3, #0]
   426c2:	4096      	lsls	r6, r2
   426c4:	4330      	orrs	r0, r6
   426c6:	f841 0b04 	str.w	r0, [r1], #4
   426ca:	f853 0b04 	ldr.w	r0, [r3], #4
   426ce:	459c      	cmp	ip, r3
   426d0:	fa20 f00e 	lsr.w	r0, r0, lr
   426d4:	d8f4      	bhi.n	426c0 <__lshift+0x56>
   426d6:	6008      	str	r0, [r1, #0]
   426d8:	b108      	cbz	r0, 426de <__lshift+0x74>
   426da:	f109 0502 	add.w	r5, r9, #2
   426de:	3d01      	subs	r5, #1
   426e0:	4638      	mov	r0, r7
   426e2:	4621      	mov	r1, r4
   426e4:	f8c8 5010 	str.w	r5, [r8, #16]
   426e8:	f7ff fe45 	bl	42376 <_Bfree>
   426ec:	4640      	mov	r0, r8
   426ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   426f2:	3101      	adds	r1, #1
   426f4:	005b      	lsls	r3, r3, #1
   426f6:	e7c6      	b.n	42686 <__lshift+0x1c>
   426f8:	f842 0f04 	str.w	r0, [r2, #4]!
   426fc:	3301      	adds	r3, #1
   426fe:	e7ce      	b.n	4269e <__lshift+0x34>
   42700:	3904      	subs	r1, #4
   42702:	f853 2b04 	ldr.w	r2, [r3], #4
   42706:	459c      	cmp	ip, r3
   42708:	f841 2f04 	str.w	r2, [r1, #4]!
   4270c:	d8f9      	bhi.n	42702 <__lshift+0x98>
   4270e:	e7e6      	b.n	426de <__lshift+0x74>

00042710 <__mcmp>:
   42710:	6903      	ldr	r3, [r0, #16]
   42712:	690a      	ldr	r2, [r1, #16]
   42714:	1a9b      	subs	r3, r3, r2
   42716:	b530      	push	{r4, r5, lr}
   42718:	d10c      	bne.n	42734 <__mcmp+0x24>
   4271a:	0092      	lsls	r2, r2, #2
   4271c:	3014      	adds	r0, #20
   4271e:	3114      	adds	r1, #20
   42720:	1884      	adds	r4, r0, r2
   42722:	4411      	add	r1, r2
   42724:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   42728:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   4272c:	4295      	cmp	r5, r2
   4272e:	d003      	beq.n	42738 <__mcmp+0x28>
   42730:	d305      	bcc.n	4273e <__mcmp+0x2e>
   42732:	2301      	movs	r3, #1
   42734:	4618      	mov	r0, r3
   42736:	bd30      	pop	{r4, r5, pc}
   42738:	42a0      	cmp	r0, r4
   4273a:	d3f3      	bcc.n	42724 <__mcmp+0x14>
   4273c:	e7fa      	b.n	42734 <__mcmp+0x24>
   4273e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   42742:	e7f7      	b.n	42734 <__mcmp+0x24>

00042744 <__mdiff>:
   42744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   42748:	460d      	mov	r5, r1
   4274a:	4607      	mov	r7, r0
   4274c:	4611      	mov	r1, r2
   4274e:	4614      	mov	r4, r2
   42750:	4628      	mov	r0, r5
   42752:	f7ff ffdd 	bl	42710 <__mcmp>
   42756:	1e06      	subs	r6, r0, #0
   42758:	d108      	bne.n	4276c <__mdiff+0x28>
   4275a:	4631      	mov	r1, r6
   4275c:	4638      	mov	r0, r7
   4275e:	f7ff fdd6 	bl	4230e <_Balloc>
   42762:	2301      	movs	r3, #1
   42764:	e9c0 3604 	strd	r3, r6, [r0, #16]
   42768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   4276c:	bfa3      	ittte	ge
   4276e:	4623      	movge	r3, r4
   42770:	462c      	movge	r4, r5
   42772:	2600      	movge	r6, #0
   42774:	2601      	movlt	r6, #1
   42776:	bfa8      	it	ge
   42778:	461d      	movge	r5, r3
   4277a:	6861      	ldr	r1, [r4, #4]
   4277c:	4638      	mov	r0, r7
   4277e:	f7ff fdc6 	bl	4230e <_Balloc>
   42782:	f105 0914 	add.w	r9, r5, #20
   42786:	60c6      	str	r6, [r0, #12]
   42788:	f104 0214 	add.w	r2, r4, #20
   4278c:	6926      	ldr	r6, [r4, #16]
   4278e:	f100 0114 	add.w	r1, r0, #20
   42792:	692b      	ldr	r3, [r5, #16]
   42794:	f04f 0e00 	mov.w	lr, #0
   42798:	eb02 0786 	add.w	r7, r2, r6, lsl #2
   4279c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   427a0:	f852 ab04 	ldr.w	sl, [r2], #4
   427a4:	f859 5b04 	ldr.w	r5, [r9], #4
   427a8:	fa1f f38a 	uxth.w	r3, sl
   427ac:	4694      	mov	ip, r2
   427ae:	b2ac      	uxth	r4, r5
   427b0:	45c8      	cmp	r8, r9
   427b2:	4473      	add	r3, lr
   427b4:	eba3 0304 	sub.w	r3, r3, r4
   427b8:	ea4f 4415 	mov.w	r4, r5, lsr #16
   427bc:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
   427c0:	eb04 4423 	add.w	r4, r4, r3, asr #16
   427c4:	b29b      	uxth	r3, r3
   427c6:	ea4f 4e24 	mov.w	lr, r4, asr #16
   427ca:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   427ce:	f841 4b04 	str.w	r4, [r1], #4
   427d2:	d8e5      	bhi.n	427a0 <__mdiff+0x5c>
   427d4:	45bc      	cmp	ip, r7
   427d6:	d304      	bcc.n	427e2 <__mdiff+0x9e>
   427d8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   427dc:	b183      	cbz	r3, 42800 <__mdiff+0xbc>
   427de:	6106      	str	r6, [r0, #16]
   427e0:	e7c2      	b.n	42768 <__mdiff+0x24>
   427e2:	f85c 4b04 	ldr.w	r4, [ip], #4
   427e6:	b2a2      	uxth	r2, r4
   427e8:	4472      	add	r2, lr
   427ea:	1413      	asrs	r3, r2, #16
   427ec:	b292      	uxth	r2, r2
   427ee:	eb03 4314 	add.w	r3, r3, r4, lsr #16
   427f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   427f6:	ea4f 4e23 	mov.w	lr, r3, asr #16
   427fa:	f841 2b04 	str.w	r2, [r1], #4
   427fe:	e7e9      	b.n	427d4 <__mdiff+0x90>
   42800:	3e01      	subs	r6, #1
   42802:	e7e9      	b.n	427d8 <__mdiff+0x94>

00042804 <__d2b>:
   42804:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   42808:	ec59 8b10 	vmov	r8, r9, d0
   4280c:	f3c9 540a 	ubfx	r4, r9, #20, #11
   42810:	460e      	mov	r6, r1
   42812:	2101      	movs	r1, #1
   42814:	4615      	mov	r5, r2
   42816:	f7ff fd7a 	bl	4230e <_Balloc>
   4281a:	f3c9 0313 	ubfx	r3, r9, #0, #20
   4281e:	4607      	mov	r7, r0
   42820:	bb2c      	cbnz	r4, 4286e <__d2b+0x6a>
   42822:	9301      	str	r3, [sp, #4]
   42824:	f1b8 0300 	subs.w	r3, r8, #0
   42828:	d026      	beq.n	42878 <__d2b+0x74>
   4282a:	4668      	mov	r0, sp
   4282c:	9300      	str	r3, [sp, #0]
   4282e:	f7ff fe54 	bl	424da <__lo0bits>
   42832:	9900      	ldr	r1, [sp, #0]
   42834:	b1f0      	cbz	r0, 42874 <__d2b+0x70>
   42836:	9a01      	ldr	r2, [sp, #4]
   42838:	f1c0 0320 	rsb	r3, r0, #32
   4283c:	fa02 f303 	lsl.w	r3, r2, r3
   42840:	40c2      	lsrs	r2, r0
   42842:	430b      	orrs	r3, r1
   42844:	9201      	str	r2, [sp, #4]
   42846:	617b      	str	r3, [r7, #20]
   42848:	9b01      	ldr	r3, [sp, #4]
   4284a:	2b00      	cmp	r3, #0
   4284c:	61bb      	str	r3, [r7, #24]
   4284e:	bf14      	ite	ne
   42850:	2102      	movne	r1, #2
   42852:	2101      	moveq	r1, #1
   42854:	6139      	str	r1, [r7, #16]
   42856:	b1c4      	cbz	r4, 4288a <__d2b+0x86>
   42858:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   4285c:	4404      	add	r4, r0
   4285e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   42862:	6034      	str	r4, [r6, #0]
   42864:	6028      	str	r0, [r5, #0]
   42866:	4638      	mov	r0, r7
   42868:	b003      	add	sp, #12
   4286a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   4286e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   42872:	e7d6      	b.n	42822 <__d2b+0x1e>
   42874:	6179      	str	r1, [r7, #20]
   42876:	e7e7      	b.n	42848 <__d2b+0x44>
   42878:	a801      	add	r0, sp, #4
   4287a:	f7ff fe2e 	bl	424da <__lo0bits>
   4287e:	9b01      	ldr	r3, [sp, #4]
   42880:	2101      	movs	r1, #1
   42882:	3020      	adds	r0, #32
   42884:	617b      	str	r3, [r7, #20]
   42886:	6139      	str	r1, [r7, #16]
   42888:	e7e5      	b.n	42856 <__d2b+0x52>
   4288a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   4288e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   42892:	6030      	str	r0, [r6, #0]
   42894:	6918      	ldr	r0, [r3, #16]
   42896:	f7ff fe00 	bl	4249a <__hi0bits>
   4289a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   4289e:	e7e1      	b.n	42864 <__d2b+0x60>

000428a0 <__ratio>:
   428a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   428a4:	4688      	mov	r8, r1
   428a6:	4681      	mov	r9, r0
   428a8:	4669      	mov	r1, sp
   428aa:	f7fb fd35 	bl	3e318 <__b2d>
   428ae:	a901      	add	r1, sp, #4
   428b0:	4640      	mov	r0, r8
   428b2:	ec57 6b10 	vmov	r6, r7, d0
   428b6:	f7fb fd2f 	bl	3e318 <__b2d>
   428ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
   428be:	f8d8 2010 	ldr.w	r2, [r8, #16]
   428c2:	463d      	mov	r5, r7
   428c4:	4630      	mov	r0, r6
   428c6:	eba3 0c02 	sub.w	ip, r3, r2
   428ca:	e9dd 3200 	ldrd	r3, r2, [sp]
   428ce:	ec5b ab10 	vmov	sl, fp, d0
   428d2:	1a9b      	subs	r3, r3, r2
   428d4:	4659      	mov	r1, fp
   428d6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   428da:	2b00      	cmp	r3, #0
   428dc:	bfcd      	iteet	gt
   428de:	463a      	movgt	r2, r7
   428e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   428e4:	465a      	movle	r2, fp
   428e6:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
   428ea:	bfd8      	it	le
   428ec:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
   428f0:	ee10 2a10 	vmov	r2, s0
   428f4:	460b      	mov	r3, r1
   428f6:	4629      	mov	r1, r5
   428f8:	f7d6 f878 	bl	189ec <__aeabi_ddiv>
   428fc:	ec41 0b10 	vmov	d0, r0, r1
   42900:	b003      	add	sp, #12
   42902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00042906 <__copybits>:
   42906:	3901      	subs	r1, #1
   42908:	f102 0314 	add.w	r3, r2, #20
   4290c:	1149      	asrs	r1, r1, #5
   4290e:	b510      	push	{r4, lr}
   42910:	3101      	adds	r1, #1
   42912:	6914      	ldr	r4, [r2, #16]
   42914:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   42918:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   4291c:	42a3      	cmp	r3, r4
   4291e:	4602      	mov	r2, r0
   42920:	d303      	bcc.n	4292a <__copybits+0x24>
   42922:	2300      	movs	r3, #0
   42924:	428a      	cmp	r2, r1
   42926:	d305      	bcc.n	42934 <__copybits+0x2e>
   42928:	bd10      	pop	{r4, pc}
   4292a:	f853 2b04 	ldr.w	r2, [r3], #4
   4292e:	f840 2b04 	str.w	r2, [r0], #4
   42932:	e7f3      	b.n	4291c <__copybits+0x16>
   42934:	f842 3b04 	str.w	r3, [r2], #4
   42938:	e7f4      	b.n	42924 <__copybits+0x1e>

0004293a <__any_on>:
   4293a:	f100 0214 	add.w	r2, r0, #20
   4293e:	114b      	asrs	r3, r1, #5
   42940:	6900      	ldr	r0, [r0, #16]
   42942:	4298      	cmp	r0, r3
   42944:	b510      	push	{r4, lr}
   42946:	db11      	blt.n	4296c <__any_on+0x32>
   42948:	dd0a      	ble.n	42960 <__any_on+0x26>
   4294a:	f011 011f 	ands.w	r1, r1, #31
   4294e:	d007      	beq.n	42960 <__any_on+0x26>
   42950:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   42954:	fa24 f001 	lsr.w	r0, r4, r1
   42958:	fa00 f101 	lsl.w	r1, r0, r1
   4295c:	428c      	cmp	r4, r1
   4295e:	d10b      	bne.n	42978 <__any_on+0x3e>
   42960:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   42964:	4293      	cmp	r3, r2
   42966:	d803      	bhi.n	42970 <__any_on+0x36>
   42968:	2000      	movs	r0, #0
   4296a:	bd10      	pop	{r4, pc}
   4296c:	4603      	mov	r3, r0
   4296e:	e7f7      	b.n	42960 <__any_on+0x26>
   42970:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   42974:	2900      	cmp	r1, #0
   42976:	d0f5      	beq.n	42964 <__any_on+0x2a>
   42978:	2001      	movs	r0, #1
   4297a:	e7f6      	b.n	4296a <__any_on+0x30>

0004297c <_calloc_r>:
   4297c:	b538      	push	{r3, r4, r5, lr}
   4297e:	fb02 f401 	mul.w	r4, r2, r1
   42982:	4621      	mov	r1, r4
   42984:	f7fa f884 	bl	3ca90 <_malloc_r>
   42988:	4605      	mov	r5, r0
   4298a:	b118      	cbz	r0, 42994 <_calloc_r+0x18>
   4298c:	4622      	mov	r2, r4
   4298e:	2100      	movs	r1, #0
   42990:	f7ff f82f 	bl	419f2 <memset>
   42994:	4628      	mov	r0, r5
   42996:	bd38      	pop	{r3, r4, r5, pc}

00042998 <_realloc_r>:
   42998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4299a:	4607      	mov	r7, r0
   4299c:	4614      	mov	r4, r2
   4299e:	460e      	mov	r6, r1
   429a0:	b921      	cbnz	r1, 429ac <_realloc_r+0x14>
   429a2:	4611      	mov	r1, r2
   429a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   429a8:	f7fa b872 	b.w	3ca90 <_malloc_r>
   429ac:	b922      	cbnz	r2, 429b8 <_realloc_r+0x20>
   429ae:	4625      	mov	r5, r4
   429b0:	f7fa f820 	bl	3c9f4 <_free_r>
   429b4:	4628      	mov	r0, r5
   429b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   429b8:	f000 f968 	bl	42c8c <_malloc_usable_size_r>
   429bc:	42a0      	cmp	r0, r4
   429be:	d20f      	bcs.n	429e0 <_realloc_r+0x48>
   429c0:	4621      	mov	r1, r4
   429c2:	4638      	mov	r0, r7
   429c4:	f7fa f864 	bl	3ca90 <_malloc_r>
   429c8:	4605      	mov	r5, r0
   429ca:	2800      	cmp	r0, #0
   429cc:	d0f2      	beq.n	429b4 <_realloc_r+0x1c>
   429ce:	4631      	mov	r1, r6
   429d0:	4622      	mov	r2, r4
   429d2:	f7fe ffee 	bl	419b2 <memcpy>
   429d6:	4631      	mov	r1, r6
   429d8:	4638      	mov	r0, r7
   429da:	f7fa f80b 	bl	3c9f4 <_free_r>
   429de:	e7e9      	b.n	429b4 <_realloc_r+0x1c>
   429e0:	4635      	mov	r5, r6
   429e2:	e7e7      	b.n	429b4 <_realloc_r+0x1c>

000429e4 <__ssputs_r>:
   429e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   429e8:	688e      	ldr	r6, [r1, #8]
   429ea:	4682      	mov	sl, r0
   429ec:	460c      	mov	r4, r1
   429ee:	4691      	mov	r9, r2
   429f0:	429e      	cmp	r6, r3
   429f2:	4698      	mov	r8, r3
   429f4:	d838      	bhi.n	42a68 <__ssputs_r+0x84>
   429f6:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   429fa:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   429fe:	d031      	beq.n	42a64 <__ssputs_r+0x80>
   42a00:	6962      	ldr	r2, [r4, #20]
   42a02:	3301      	adds	r3, #1
   42a04:	6825      	ldr	r5, [r4, #0]
   42a06:	6909      	ldr	r1, [r1, #16]
   42a08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   42a0c:	1a6f      	subs	r7, r5, r1
   42a0e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   42a12:	443b      	add	r3, r7
   42a14:	1055      	asrs	r5, r2, #1
   42a16:	429d      	cmp	r5, r3
   42a18:	bf38      	it	cc
   42a1a:	461d      	movcc	r5, r3
   42a1c:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   42a20:	d030      	beq.n	42a84 <__ssputs_r+0xa0>
   42a22:	4629      	mov	r1, r5
   42a24:	f7fa f834 	bl	3ca90 <_malloc_r>
   42a28:	4606      	mov	r6, r0
   42a2a:	b950      	cbnz	r0, 42a42 <__ssputs_r+0x5e>
   42a2c:	230c      	movs	r3, #12
   42a2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   42a32:	f8ca 3000 	str.w	r3, [sl]
   42a36:	89a3      	ldrh	r3, [r4, #12]
   42a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   42a3c:	81a3      	strh	r3, [r4, #12]
   42a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   42a42:	463a      	mov	r2, r7
   42a44:	6921      	ldr	r1, [r4, #16]
   42a46:	f7fe ffb4 	bl	419b2 <memcpy>
   42a4a:	89a3      	ldrh	r3, [r4, #12]
   42a4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   42a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   42a54:	81a3      	strh	r3, [r4, #12]
   42a56:	6126      	str	r6, [r4, #16]
   42a58:	443e      	add	r6, r7
   42a5a:	6165      	str	r5, [r4, #20]
   42a5c:	1bed      	subs	r5, r5, r7
   42a5e:	6026      	str	r6, [r4, #0]
   42a60:	4646      	mov	r6, r8
   42a62:	60a5      	str	r5, [r4, #8]
   42a64:	4546      	cmp	r6, r8
   42a66:	d900      	bls.n	42a6a <__ssputs_r+0x86>
   42a68:	4646      	mov	r6, r8
   42a6a:	4632      	mov	r2, r6
   42a6c:	4649      	mov	r1, r9
   42a6e:	6820      	ldr	r0, [r4, #0]
   42a70:	f7ff fc33 	bl	422da <memmove>
   42a74:	68a3      	ldr	r3, [r4, #8]
   42a76:	2000      	movs	r0, #0
   42a78:	1b9b      	subs	r3, r3, r6
   42a7a:	60a3      	str	r3, [r4, #8]
   42a7c:	6823      	ldr	r3, [r4, #0]
   42a7e:	441e      	add	r6, r3
   42a80:	6026      	str	r6, [r4, #0]
   42a82:	e7dc      	b.n	42a3e <__ssputs_r+0x5a>
   42a84:	462a      	mov	r2, r5
   42a86:	f7ff ff87 	bl	42998 <_realloc_r>
   42a8a:	4606      	mov	r6, r0
   42a8c:	2800      	cmp	r0, #0
   42a8e:	d1e2      	bne.n	42a56 <__ssputs_r+0x72>
   42a90:	6921      	ldr	r1, [r4, #16]
   42a92:	4650      	mov	r0, sl
   42a94:	f7f9 ffae 	bl	3c9f4 <_free_r>
   42a98:	e7c8      	b.n	42a2c <__ssputs_r+0x48>

00042a9a <_sungetc_r>:
   42a9a:	b538      	push	{r3, r4, r5, lr}
   42a9c:	1c4b      	adds	r3, r1, #1
   42a9e:	4614      	mov	r4, r2
   42aa0:	d103      	bne.n	42aaa <_sungetc_r+0x10>
   42aa2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   42aa6:	4628      	mov	r0, r5
   42aa8:	bd38      	pop	{r3, r4, r5, pc}
   42aaa:	8993      	ldrh	r3, [r2, #12]
   42aac:	b2cd      	uxtb	r5, r1
   42aae:	f023 0320 	bic.w	r3, r3, #32
   42ab2:	8193      	strh	r3, [r2, #12]
   42ab4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   42ab6:	6852      	ldr	r2, [r2, #4]
   42ab8:	b18b      	cbz	r3, 42ade <_sungetc_r+0x44>
   42aba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   42abc:	4293      	cmp	r3, r2
   42abe:	dd08      	ble.n	42ad2 <_sungetc_r+0x38>
   42ac0:	6823      	ldr	r3, [r4, #0]
   42ac2:	1e5a      	subs	r2, r3, #1
   42ac4:	6022      	str	r2, [r4, #0]
   42ac6:	f803 5c01 	strb.w	r5, [r3, #-1]
   42aca:	6863      	ldr	r3, [r4, #4]
   42acc:	3301      	adds	r3, #1
   42ace:	6063      	str	r3, [r4, #4]
   42ad0:	e7e9      	b.n	42aa6 <_sungetc_r+0xc>
   42ad2:	4621      	mov	r1, r4
   42ad4:	f000 f896 	bl	42c04 <__submore>
   42ad8:	2800      	cmp	r0, #0
   42ada:	d0f1      	beq.n	42ac0 <_sungetc_r+0x26>
   42adc:	e7e1      	b.n	42aa2 <_sungetc_r+0x8>
   42ade:	6921      	ldr	r1, [r4, #16]
   42ae0:	6823      	ldr	r3, [r4, #0]
   42ae2:	b151      	cbz	r1, 42afa <_sungetc_r+0x60>
   42ae4:	4299      	cmp	r1, r3
   42ae6:	d208      	bcs.n	42afa <_sungetc_r+0x60>
   42ae8:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   42aec:	42a9      	cmp	r1, r5
   42aee:	d104      	bne.n	42afa <_sungetc_r+0x60>
   42af0:	3b01      	subs	r3, #1
   42af2:	3201      	adds	r2, #1
   42af4:	6023      	str	r3, [r4, #0]
   42af6:	6062      	str	r2, [r4, #4]
   42af8:	e7d5      	b.n	42aa6 <_sungetc_r+0xc>
   42afa:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   42afe:	f104 0344 	add.w	r3, r4, #68	; 0x44
   42b02:	6363      	str	r3, [r4, #52]	; 0x34
   42b04:	2303      	movs	r3, #3
   42b06:	63a3      	str	r3, [r4, #56]	; 0x38
   42b08:	4623      	mov	r3, r4
   42b0a:	f803 5f46 	strb.w	r5, [r3, #70]!
   42b0e:	6023      	str	r3, [r4, #0]
   42b10:	2301      	movs	r3, #1
   42b12:	e7dc      	b.n	42ace <_sungetc_r+0x34>

00042b14 <__ssrefill_r>:
   42b14:	b510      	push	{r4, lr}
   42b16:	460c      	mov	r4, r1
   42b18:	6b49      	ldr	r1, [r1, #52]	; 0x34
   42b1a:	b169      	cbz	r1, 42b38 <__ssrefill_r+0x24>
   42b1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   42b20:	4299      	cmp	r1, r3
   42b22:	d001      	beq.n	42b28 <__ssrefill_r+0x14>
   42b24:	f7f9 ff66 	bl	3c9f4 <_free_r>
   42b28:	2000      	movs	r0, #0
   42b2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   42b2c:	6360      	str	r0, [r4, #52]	; 0x34
   42b2e:	6063      	str	r3, [r4, #4]
   42b30:	b113      	cbz	r3, 42b38 <__ssrefill_r+0x24>
   42b32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   42b34:	6023      	str	r3, [r4, #0]
   42b36:	bd10      	pop	{r4, pc}
   42b38:	6923      	ldr	r3, [r4, #16]
   42b3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   42b3e:	6023      	str	r3, [r4, #0]
   42b40:	2300      	movs	r3, #0
   42b42:	6063      	str	r3, [r4, #4]
   42b44:	89a3      	ldrh	r3, [r4, #12]
   42b46:	f043 0320 	orr.w	r3, r3, #32
   42b4a:	81a3      	strh	r3, [r4, #12]
   42b4c:	e7f3      	b.n	42b36 <__ssrefill_r+0x22>

00042b4e <__sccl>:
   42b4e:	b570      	push	{r4, r5, r6, lr}
   42b50:	780b      	ldrb	r3, [r1, #0]
   42b52:	1e44      	subs	r4, r0, #1
   42b54:	f100 05ff 	add.w	r5, r0, #255	; 0xff
   42b58:	2b5e      	cmp	r3, #94	; 0x5e
   42b5a:	bf13      	iteet	ne
   42b5c:	1c4a      	addne	r2, r1, #1
   42b5e:	1c8a      	addeq	r2, r1, #2
   42b60:	784b      	ldrbeq	r3, [r1, #1]
   42b62:	2100      	movne	r1, #0
   42b64:	bf08      	it	eq
   42b66:	2101      	moveq	r1, #1
   42b68:	f804 1f01 	strb.w	r1, [r4, #1]!
   42b6c:	42ac      	cmp	r4, r5
   42b6e:	d1fb      	bne.n	42b68 <__sccl+0x1a>
   42b70:	b913      	cbnz	r3, 42b78 <__sccl+0x2a>
   42b72:	3a01      	subs	r2, #1
   42b74:	4610      	mov	r0, r2
   42b76:	bd70      	pop	{r4, r5, r6, pc}
   42b78:	f081 0401 	eor.w	r4, r1, #1
   42b7c:	1c51      	adds	r1, r2, #1
   42b7e:	54c4      	strb	r4, [r0, r3]
   42b80:	f811 5c01 	ldrb.w	r5, [r1, #-1]
   42b84:	1e4e      	subs	r6, r1, #1
   42b86:	460a      	mov	r2, r1
   42b88:	2d2d      	cmp	r5, #45	; 0x2d
   42b8a:	d006      	beq.n	42b9a <__sccl+0x4c>
   42b8c:	2d5d      	cmp	r5, #93	; 0x5d
   42b8e:	d0f1      	beq.n	42b74 <__sccl+0x26>
   42b90:	b90d      	cbnz	r5, 42b96 <__sccl+0x48>
   42b92:	4632      	mov	r2, r6
   42b94:	e7ee      	b.n	42b74 <__sccl+0x26>
   42b96:	462b      	mov	r3, r5
   42b98:	e7f0      	b.n	42b7c <__sccl+0x2e>
   42b9a:	780e      	ldrb	r6, [r1, #0]
   42b9c:	2e5d      	cmp	r6, #93	; 0x5d
   42b9e:	d0fa      	beq.n	42b96 <__sccl+0x48>
   42ba0:	42b3      	cmp	r3, r6
   42ba2:	dcf8      	bgt.n	42b96 <__sccl+0x48>
   42ba4:	3301      	adds	r3, #1
   42ba6:	429e      	cmp	r6, r3
   42ba8:	54c4      	strb	r4, [r0, r3]
   42baa:	dcfb      	bgt.n	42ba4 <__sccl+0x56>
   42bac:	3102      	adds	r1, #2
   42bae:	e7e7      	b.n	42b80 <__sccl+0x32>

00042bb0 <_raise_r>:
   42bb0:	291f      	cmp	r1, #31
   42bb2:	b538      	push	{r3, r4, r5, lr}
   42bb4:	4604      	mov	r4, r0
   42bb6:	460d      	mov	r5, r1
   42bb8:	d904      	bls.n	42bc4 <_raise_r+0x14>
   42bba:	2316      	movs	r3, #22
   42bbc:	6003      	str	r3, [r0, #0]
   42bbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   42bc2:	bd38      	pop	{r3, r4, r5, pc}
   42bc4:	6c42      	ldr	r2, [r0, #68]	; 0x44
   42bc6:	b112      	cbz	r2, 42bce <_raise_r+0x1e>
   42bc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   42bcc:	b94b      	cbnz	r3, 42be2 <_raise_r+0x32>
   42bce:	4620      	mov	r0, r4
   42bd0:	f000 f816 	bl	42c00 <_getpid_r>
   42bd4:	462a      	mov	r2, r5
   42bd6:	4601      	mov	r1, r0
   42bd8:	4620      	mov	r0, r4
   42bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   42bde:	f7fb bf91 	b.w	3eb04 <_kill_r>
   42be2:	2b01      	cmp	r3, #1
   42be4:	d00a      	beq.n	42bfc <_raise_r+0x4c>
   42be6:	1c59      	adds	r1, r3, #1
   42be8:	d103      	bne.n	42bf2 <_raise_r+0x42>
   42bea:	2316      	movs	r3, #22
   42bec:	6003      	str	r3, [r0, #0]
   42bee:	2001      	movs	r0, #1
   42bf0:	e7e7      	b.n	42bc2 <_raise_r+0x12>
   42bf2:	2400      	movs	r4, #0
   42bf4:	4628      	mov	r0, r5
   42bf6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   42bfa:	4798      	blx	r3
   42bfc:	2000      	movs	r0, #0
   42bfe:	e7e0      	b.n	42bc2 <_raise_r+0x12>

00042c00 <_getpid_r>:
   42c00:	f7fc be4f 	b.w	3f8a2 <_getpid>

00042c04 <__submore>:
   42c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   42c08:	460c      	mov	r4, r1
   42c0a:	6b49      	ldr	r1, [r1, #52]	; 0x34
   42c0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   42c10:	4299      	cmp	r1, r3
   42c12:	d11a      	bne.n	42c4a <__submore+0x46>
   42c14:	f44f 6180 	mov.w	r1, #1024	; 0x400
   42c18:	f7f9 ff3a 	bl	3ca90 <_malloc_r>
   42c1c:	b918      	cbnz	r0, 42c26 <__submore+0x22>
   42c1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   42c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   42c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
   42c2a:	6360      	str	r0, [r4, #52]	; 0x34
   42c2c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   42c30:	63a3      	str	r3, [r4, #56]	; 0x38
   42c32:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   42c36:	7083      	strb	r3, [r0, #2]
   42c38:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   42c3c:	7043      	strb	r3, [r0, #1]
   42c3e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   42c42:	7003      	strb	r3, [r0, #0]
   42c44:	6020      	str	r0, [r4, #0]
   42c46:	2000      	movs	r0, #0
   42c48:	e7eb      	b.n	42c22 <__submore+0x1e>
   42c4a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   42c4c:	0077      	lsls	r7, r6, #1
   42c4e:	463a      	mov	r2, r7
   42c50:	f7ff fea2 	bl	42998 <_realloc_r>
   42c54:	4605      	mov	r5, r0
   42c56:	2800      	cmp	r0, #0
   42c58:	d0e1      	beq.n	42c1e <__submore+0x1a>
   42c5a:	eb00 0806 	add.w	r8, r0, r6
   42c5e:	4601      	mov	r1, r0
   42c60:	4632      	mov	r2, r6
   42c62:	4640      	mov	r0, r8
   42c64:	f7fe fea5 	bl	419b2 <memcpy>
   42c68:	f8c4 8000 	str.w	r8, [r4]
   42c6c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   42c70:	e7e9      	b.n	42c46 <__submore+0x42>

00042c72 <__ascii_wctomb>:
   42c72:	b149      	cbz	r1, 42c88 <__ascii_wctomb+0x16>
   42c74:	2aff      	cmp	r2, #255	; 0xff
   42c76:	bf8d      	iteet	hi
   42c78:	238a      	movhi	r3, #138	; 0x8a
   42c7a:	700a      	strbls	r2, [r1, #0]
   42c7c:	2001      	movls	r0, #1
   42c7e:	6003      	strhi	r3, [r0, #0]
   42c80:	bf88      	it	hi
   42c82:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   42c86:	4770      	bx	lr
   42c88:	4608      	mov	r0, r1
   42c8a:	4770      	bx	lr

00042c8c <_malloc_usable_size_r>:
   42c8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
   42c90:	1f18      	subs	r0, r3, #4
   42c92:	2b00      	cmp	r3, #0
   42c94:	bfbc      	itt	lt
   42c96:	580b      	ldrlt	r3, [r1, r0]
   42c98:	18c0      	addlt	r0, r0, r3
   42c9a:	4770      	bx	lr
