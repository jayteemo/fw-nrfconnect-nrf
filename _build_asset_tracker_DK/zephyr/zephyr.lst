
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00018200 <_vector_table>:
   18200:	2002e5b8 	.word	0x2002e5b8
   18204:	00020021 	.word	0x00020021
   18208:	0003ec85 	.word	0x0003ec85
   1820c:	0001fe3d 	.word	0x0001fe3d
   18210:	0001fe3d 	.word	0x0001fe3d
   18214:	0001fe3d 	.word	0x0001fe3d
   18218:	0001fe3d 	.word	0x0001fe3d
   1821c:	0001fe3d 	.word	0x0001fe3d
   18220:	0001fe3d 	.word	0x0001fe3d
   18224:	0001fe3d 	.word	0x0001fe3d
   18228:	0001fe3d 	.word	0x0001fe3d
   1822c:	0001fc61 	.word	0x0001fc61
   18230:	0001fe3d 	.word	0x0001fe3d
   18234:	0001fe3d 	.word	0x0001fe3d
   18238:	0001fb9d 	.word	0x0001fb9d
   1823c:	0001f7bd 	.word	0x0001f7bd

00018240 <_irq_vector_table>:
   18240:	0001ffe1 0001ffe1 0001ffe1 0001ffe1     ................
   18250:	0001ffe1 0001ffe1 0001ffe1 0001ffe1     ................
   18260:	0001ffe1 0001ffe1 0001ffe1 0001ffe1     ................
   18270:	0001ffe1 0001ffe1 0001ffe1 0001ffe1     ................
   18280:	0001ffe1 0001ffe1 0001ffe1 0001ffe1     ................
   18290:	0001ffe1 0001ffe1 0001ffe1 0001ffe1     ................
   182a0:	0001ffe1 0001ffe1 0001ffe1 0001ffe1     ................
   182b0:	00022799 0003fbb9 0001ffe1 0001ffe1     .'..............
   182c0:	0001ffe1 0001ffe1 0001ffe1 0001ffe1     ................
   182d0:	0001ffe1 0001ffe1 0001ffe1 0001ffe1     ................
   182e0:	0001ffe1 0001ffe1 0003fbdb 0001ffe1     ................
   182f0:	0001ffe1 0001ffe1 0001ffe1 0001ffe1     ................
   18300:	0001ffe1 0001ffe1 0001ffe1 0001ffe1     ................
   18310:	0001ffe1 0001ffe1 0001ffe1 0001ffe1     ................
   18320:	0001ffe1 0001ffe1 0001ffe1 0001ffe1     ................
   18330:	0001ffe1 0001ffe1 0001ffe1 0001ffe1     ................
   18340:	0001ffe1                                ....

00018344 <_vector_end>:
	...

00018400 <m_firmware_info>:
   18400:	281ee6de 8fcebb4c 00005b01 000320d0     ...(L....[... ..
   18410:	00000001 00018200 2002f6f8 00027d99     ........... .}..

Disassembly of section _TEXT_SECTION_NAME_2:

00018420 <__aeabi_drsub>:
   18420:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   18424:	e002      	b.n	1842c <__adddf3>
   18426:	bf00      	nop

00018428 <__aeabi_dsub>:
   18428:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001842c <__adddf3>:
   1842c:	b530      	push	{r4, r5, lr}
   1842e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   18432:	ea4f 0543 	mov.w	r5, r3, lsl #1
   18436:	ea94 0f05 	teq	r4, r5
   1843a:	bf08      	it	eq
   1843c:	ea90 0f02 	teqeq	r0, r2
   18440:	bf1f      	itttt	ne
   18442:	ea54 0c00 	orrsne.w	ip, r4, r0
   18446:	ea55 0c02 	orrsne.w	ip, r5, r2
   1844a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1844e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   18452:	f000 80e2 	beq.w	1861a <__adddf3+0x1ee>
   18456:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1845a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1845e:	bfb8      	it	lt
   18460:	426d      	neglt	r5, r5
   18462:	dd0c      	ble.n	1847e <__adddf3+0x52>
   18464:	442c      	add	r4, r5
   18466:	ea80 0202 	eor.w	r2, r0, r2
   1846a:	ea81 0303 	eor.w	r3, r1, r3
   1846e:	ea82 0000 	eor.w	r0, r2, r0
   18472:	ea83 0101 	eor.w	r1, r3, r1
   18476:	ea80 0202 	eor.w	r2, r0, r2
   1847a:	ea81 0303 	eor.w	r3, r1, r3
   1847e:	2d36      	cmp	r5, #54	; 0x36
   18480:	bf88      	it	hi
   18482:	bd30      	pophi	{r4, r5, pc}
   18484:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18488:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1848c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   18490:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   18494:	d002      	beq.n	1849c <__adddf3+0x70>
   18496:	4240      	negs	r0, r0
   18498:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1849c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   184a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   184a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   184a8:	d002      	beq.n	184b0 <__adddf3+0x84>
   184aa:	4252      	negs	r2, r2
   184ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   184b0:	ea94 0f05 	teq	r4, r5
   184b4:	f000 80a7 	beq.w	18606 <__adddf3+0x1da>
   184b8:	f1a4 0401 	sub.w	r4, r4, #1
   184bc:	f1d5 0e20 	rsbs	lr, r5, #32
   184c0:	db0d      	blt.n	184de <__adddf3+0xb2>
   184c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   184c6:	fa22 f205 	lsr.w	r2, r2, r5
   184ca:	1880      	adds	r0, r0, r2
   184cc:	f141 0100 	adc.w	r1, r1, #0
   184d0:	fa03 f20e 	lsl.w	r2, r3, lr
   184d4:	1880      	adds	r0, r0, r2
   184d6:	fa43 f305 	asr.w	r3, r3, r5
   184da:	4159      	adcs	r1, r3
   184dc:	e00e      	b.n	184fc <__adddf3+0xd0>
   184de:	f1a5 0520 	sub.w	r5, r5, #32
   184e2:	f10e 0e20 	add.w	lr, lr, #32
   184e6:	2a01      	cmp	r2, #1
   184e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   184ec:	bf28      	it	cs
   184ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   184f2:	fa43 f305 	asr.w	r3, r3, r5
   184f6:	18c0      	adds	r0, r0, r3
   184f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   184fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   18500:	d507      	bpl.n	18512 <__adddf3+0xe6>
   18502:	f04f 0e00 	mov.w	lr, #0
   18506:	f1dc 0c00 	rsbs	ip, ip, #0
   1850a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1850e:	eb6e 0101 	sbc.w	r1, lr, r1
   18512:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   18516:	d31b      	bcc.n	18550 <__adddf3+0x124>
   18518:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1851c:	d30c      	bcc.n	18538 <__adddf3+0x10c>
   1851e:	0849      	lsrs	r1, r1, #1
   18520:	ea5f 0030 	movs.w	r0, r0, rrx
   18524:	ea4f 0c3c 	mov.w	ip, ip, rrx
   18528:	f104 0401 	add.w	r4, r4, #1
   1852c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   18530:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   18534:	f080 809a 	bcs.w	1866c <__adddf3+0x240>
   18538:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1853c:	bf08      	it	eq
   1853e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   18542:	f150 0000 	adcs.w	r0, r0, #0
   18546:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1854a:	ea41 0105 	orr.w	r1, r1, r5
   1854e:	bd30      	pop	{r4, r5, pc}
   18550:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   18554:	4140      	adcs	r0, r0
   18556:	eb41 0101 	adc.w	r1, r1, r1
   1855a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1855e:	f1a4 0401 	sub.w	r4, r4, #1
   18562:	d1e9      	bne.n	18538 <__adddf3+0x10c>
   18564:	f091 0f00 	teq	r1, #0
   18568:	bf04      	itt	eq
   1856a:	4601      	moveq	r1, r0
   1856c:	2000      	moveq	r0, #0
   1856e:	fab1 f381 	clz	r3, r1
   18572:	bf08      	it	eq
   18574:	3320      	addeq	r3, #32
   18576:	f1a3 030b 	sub.w	r3, r3, #11
   1857a:	f1b3 0220 	subs.w	r2, r3, #32
   1857e:	da0c      	bge.n	1859a <__adddf3+0x16e>
   18580:	320c      	adds	r2, #12
   18582:	dd08      	ble.n	18596 <__adddf3+0x16a>
   18584:	f102 0c14 	add.w	ip, r2, #20
   18588:	f1c2 020c 	rsb	r2, r2, #12
   1858c:	fa01 f00c 	lsl.w	r0, r1, ip
   18590:	fa21 f102 	lsr.w	r1, r1, r2
   18594:	e00c      	b.n	185b0 <__adddf3+0x184>
   18596:	f102 0214 	add.w	r2, r2, #20
   1859a:	bfd8      	it	le
   1859c:	f1c2 0c20 	rsble	ip, r2, #32
   185a0:	fa01 f102 	lsl.w	r1, r1, r2
   185a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   185a8:	bfdc      	itt	le
   185aa:	ea41 010c 	orrle.w	r1, r1, ip
   185ae:	4090      	lslle	r0, r2
   185b0:	1ae4      	subs	r4, r4, r3
   185b2:	bfa2      	ittt	ge
   185b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   185b8:	4329      	orrge	r1, r5
   185ba:	bd30      	popge	{r4, r5, pc}
   185bc:	ea6f 0404 	mvn.w	r4, r4
   185c0:	3c1f      	subs	r4, #31
   185c2:	da1c      	bge.n	185fe <__adddf3+0x1d2>
   185c4:	340c      	adds	r4, #12
   185c6:	dc0e      	bgt.n	185e6 <__adddf3+0x1ba>
   185c8:	f104 0414 	add.w	r4, r4, #20
   185cc:	f1c4 0220 	rsb	r2, r4, #32
   185d0:	fa20 f004 	lsr.w	r0, r0, r4
   185d4:	fa01 f302 	lsl.w	r3, r1, r2
   185d8:	ea40 0003 	orr.w	r0, r0, r3
   185dc:	fa21 f304 	lsr.w	r3, r1, r4
   185e0:	ea45 0103 	orr.w	r1, r5, r3
   185e4:	bd30      	pop	{r4, r5, pc}
   185e6:	f1c4 040c 	rsb	r4, r4, #12
   185ea:	f1c4 0220 	rsb	r2, r4, #32
   185ee:	fa20 f002 	lsr.w	r0, r0, r2
   185f2:	fa01 f304 	lsl.w	r3, r1, r4
   185f6:	ea40 0003 	orr.w	r0, r0, r3
   185fa:	4629      	mov	r1, r5
   185fc:	bd30      	pop	{r4, r5, pc}
   185fe:	fa21 f004 	lsr.w	r0, r1, r4
   18602:	4629      	mov	r1, r5
   18604:	bd30      	pop	{r4, r5, pc}
   18606:	f094 0f00 	teq	r4, #0
   1860a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1860e:	bf06      	itte	eq
   18610:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   18614:	3401      	addeq	r4, #1
   18616:	3d01      	subne	r5, #1
   18618:	e74e      	b.n	184b8 <__adddf3+0x8c>
   1861a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1861e:	bf18      	it	ne
   18620:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   18624:	d029      	beq.n	1867a <__adddf3+0x24e>
   18626:	ea94 0f05 	teq	r4, r5
   1862a:	bf08      	it	eq
   1862c:	ea90 0f02 	teqeq	r0, r2
   18630:	d005      	beq.n	1863e <__adddf3+0x212>
   18632:	ea54 0c00 	orrs.w	ip, r4, r0
   18636:	bf04      	itt	eq
   18638:	4619      	moveq	r1, r3
   1863a:	4610      	moveq	r0, r2
   1863c:	bd30      	pop	{r4, r5, pc}
   1863e:	ea91 0f03 	teq	r1, r3
   18642:	bf1e      	ittt	ne
   18644:	2100      	movne	r1, #0
   18646:	2000      	movne	r0, #0
   18648:	bd30      	popne	{r4, r5, pc}
   1864a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1864e:	d105      	bne.n	1865c <__adddf3+0x230>
   18650:	0040      	lsls	r0, r0, #1
   18652:	4149      	adcs	r1, r1
   18654:	bf28      	it	cs
   18656:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1865a:	bd30      	pop	{r4, r5, pc}
   1865c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   18660:	bf3c      	itt	cc
   18662:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   18666:	bd30      	popcc	{r4, r5, pc}
   18668:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1866c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   18670:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   18674:	f04f 0000 	mov.w	r0, #0
   18678:	bd30      	pop	{r4, r5, pc}
   1867a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1867e:	bf1a      	itte	ne
   18680:	4619      	movne	r1, r3
   18682:	4610      	movne	r0, r2
   18684:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   18688:	bf1c      	itt	ne
   1868a:	460b      	movne	r3, r1
   1868c:	4602      	movne	r2, r0
   1868e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18692:	bf06      	itte	eq
   18694:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   18698:	ea91 0f03 	teqeq	r1, r3
   1869c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   186a0:	bd30      	pop	{r4, r5, pc}
   186a2:	bf00      	nop

000186a4 <__aeabi_ui2d>:
   186a4:	f090 0f00 	teq	r0, #0
   186a8:	bf04      	itt	eq
   186aa:	2100      	moveq	r1, #0
   186ac:	4770      	bxeq	lr
   186ae:	b530      	push	{r4, r5, lr}
   186b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   186b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   186b8:	f04f 0500 	mov.w	r5, #0
   186bc:	f04f 0100 	mov.w	r1, #0
   186c0:	e750      	b.n	18564 <__adddf3+0x138>
   186c2:	bf00      	nop

000186c4 <__aeabi_i2d>:
   186c4:	f090 0f00 	teq	r0, #0
   186c8:	bf04      	itt	eq
   186ca:	2100      	moveq	r1, #0
   186cc:	4770      	bxeq	lr
   186ce:	b530      	push	{r4, r5, lr}
   186d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   186d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   186d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   186dc:	bf48      	it	mi
   186de:	4240      	negmi	r0, r0
   186e0:	f04f 0100 	mov.w	r1, #0
   186e4:	e73e      	b.n	18564 <__adddf3+0x138>
   186e6:	bf00      	nop

000186e8 <__aeabi_f2d>:
   186e8:	0042      	lsls	r2, r0, #1
   186ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   186ee:	ea4f 0131 	mov.w	r1, r1, rrx
   186f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   186f6:	bf1f      	itttt	ne
   186f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   186fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   18700:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   18704:	4770      	bxne	lr
   18706:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1870a:	bf08      	it	eq
   1870c:	4770      	bxeq	lr
   1870e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   18712:	bf04      	itt	eq
   18714:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   18718:	4770      	bxeq	lr
   1871a:	b530      	push	{r4, r5, lr}
   1871c:	f44f 7460 	mov.w	r4, #896	; 0x380
   18720:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   18724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   18728:	e71c      	b.n	18564 <__adddf3+0x138>
   1872a:	bf00      	nop

0001872c <__aeabi_ul2d>:
   1872c:	ea50 0201 	orrs.w	r2, r0, r1
   18730:	bf08      	it	eq
   18732:	4770      	bxeq	lr
   18734:	b530      	push	{r4, r5, lr}
   18736:	f04f 0500 	mov.w	r5, #0
   1873a:	e00a      	b.n	18752 <__aeabi_l2d+0x16>

0001873c <__aeabi_l2d>:
   1873c:	ea50 0201 	orrs.w	r2, r0, r1
   18740:	bf08      	it	eq
   18742:	4770      	bxeq	lr
   18744:	b530      	push	{r4, r5, lr}
   18746:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1874a:	d502      	bpl.n	18752 <__aeabi_l2d+0x16>
   1874c:	4240      	negs	r0, r0
   1874e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18752:	f44f 6480 	mov.w	r4, #1024	; 0x400
   18756:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1875a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1875e:	f43f aed8 	beq.w	18512 <__adddf3+0xe6>
   18762:	f04f 0203 	mov.w	r2, #3
   18766:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1876a:	bf18      	it	ne
   1876c:	3203      	addne	r2, #3
   1876e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   18772:	bf18      	it	ne
   18774:	3203      	addne	r2, #3
   18776:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1877a:	f1c2 0320 	rsb	r3, r2, #32
   1877e:	fa00 fc03 	lsl.w	ip, r0, r3
   18782:	fa20 f002 	lsr.w	r0, r0, r2
   18786:	fa01 fe03 	lsl.w	lr, r1, r3
   1878a:	ea40 000e 	orr.w	r0, r0, lr
   1878e:	fa21 f102 	lsr.w	r1, r1, r2
   18792:	4414      	add	r4, r2
   18794:	e6bd      	b.n	18512 <__adddf3+0xe6>
   18796:	bf00      	nop

00018798 <__aeabi_dmul>:
   18798:	b570      	push	{r4, r5, r6, lr}
   1879a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1879e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   187a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   187a6:	bf1d      	ittte	ne
   187a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   187ac:	ea94 0f0c 	teqne	r4, ip
   187b0:	ea95 0f0c 	teqne	r5, ip
   187b4:	f000 f8de 	bleq	18974 <__aeabi_dmul+0x1dc>
   187b8:	442c      	add	r4, r5
   187ba:	ea81 0603 	eor.w	r6, r1, r3
   187be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   187c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   187c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   187ca:	bf18      	it	ne
   187cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   187d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   187d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   187d8:	d038      	beq.n	1884c <__aeabi_dmul+0xb4>
   187da:	fba0 ce02 	umull	ip, lr, r0, r2
   187de:	f04f 0500 	mov.w	r5, #0
   187e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   187e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   187ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   187ee:	f04f 0600 	mov.w	r6, #0
   187f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   187f6:	f09c 0f00 	teq	ip, #0
   187fa:	bf18      	it	ne
   187fc:	f04e 0e01 	orrne.w	lr, lr, #1
   18800:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   18804:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   18808:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1880c:	d204      	bcs.n	18818 <__aeabi_dmul+0x80>
   1880e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   18812:	416d      	adcs	r5, r5
   18814:	eb46 0606 	adc.w	r6, r6, r6
   18818:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1881c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   18820:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   18824:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   18828:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1882c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   18830:	bf88      	it	hi
   18832:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   18836:	d81e      	bhi.n	18876 <__aeabi_dmul+0xde>
   18838:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1883c:	bf08      	it	eq
   1883e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   18842:	f150 0000 	adcs.w	r0, r0, #0
   18846:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1884a:	bd70      	pop	{r4, r5, r6, pc}
   1884c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   18850:	ea46 0101 	orr.w	r1, r6, r1
   18854:	ea40 0002 	orr.w	r0, r0, r2
   18858:	ea81 0103 	eor.w	r1, r1, r3
   1885c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   18860:	bfc2      	ittt	gt
   18862:	ebd4 050c 	rsbsgt	r5, r4, ip
   18866:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1886a:	bd70      	popgt	{r4, r5, r6, pc}
   1886c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18870:	f04f 0e00 	mov.w	lr, #0
   18874:	3c01      	subs	r4, #1
   18876:	f300 80ab 	bgt.w	189d0 <__aeabi_dmul+0x238>
   1887a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1887e:	bfde      	ittt	le
   18880:	2000      	movle	r0, #0
   18882:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   18886:	bd70      	pople	{r4, r5, r6, pc}
   18888:	f1c4 0400 	rsb	r4, r4, #0
   1888c:	3c20      	subs	r4, #32
   1888e:	da35      	bge.n	188fc <__aeabi_dmul+0x164>
   18890:	340c      	adds	r4, #12
   18892:	dc1b      	bgt.n	188cc <__aeabi_dmul+0x134>
   18894:	f104 0414 	add.w	r4, r4, #20
   18898:	f1c4 0520 	rsb	r5, r4, #32
   1889c:	fa00 f305 	lsl.w	r3, r0, r5
   188a0:	fa20 f004 	lsr.w	r0, r0, r4
   188a4:	fa01 f205 	lsl.w	r2, r1, r5
   188a8:	ea40 0002 	orr.w	r0, r0, r2
   188ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   188b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   188b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   188b8:	fa21 f604 	lsr.w	r6, r1, r4
   188bc:	eb42 0106 	adc.w	r1, r2, r6
   188c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   188c4:	bf08      	it	eq
   188c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   188ca:	bd70      	pop	{r4, r5, r6, pc}
   188cc:	f1c4 040c 	rsb	r4, r4, #12
   188d0:	f1c4 0520 	rsb	r5, r4, #32
   188d4:	fa00 f304 	lsl.w	r3, r0, r4
   188d8:	fa20 f005 	lsr.w	r0, r0, r5
   188dc:	fa01 f204 	lsl.w	r2, r1, r4
   188e0:	ea40 0002 	orr.w	r0, r0, r2
   188e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   188e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   188ec:	f141 0100 	adc.w	r1, r1, #0
   188f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   188f4:	bf08      	it	eq
   188f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   188fa:	bd70      	pop	{r4, r5, r6, pc}
   188fc:	f1c4 0520 	rsb	r5, r4, #32
   18900:	fa00 f205 	lsl.w	r2, r0, r5
   18904:	ea4e 0e02 	orr.w	lr, lr, r2
   18908:	fa20 f304 	lsr.w	r3, r0, r4
   1890c:	fa01 f205 	lsl.w	r2, r1, r5
   18910:	ea43 0302 	orr.w	r3, r3, r2
   18914:	fa21 f004 	lsr.w	r0, r1, r4
   18918:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1891c:	fa21 f204 	lsr.w	r2, r1, r4
   18920:	ea20 0002 	bic.w	r0, r0, r2
   18924:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   18928:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1892c:	bf08      	it	eq
   1892e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   18932:	bd70      	pop	{r4, r5, r6, pc}
   18934:	f094 0f00 	teq	r4, #0
   18938:	d10f      	bne.n	1895a <__aeabi_dmul+0x1c2>
   1893a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1893e:	0040      	lsls	r0, r0, #1
   18940:	eb41 0101 	adc.w	r1, r1, r1
   18944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18948:	bf08      	it	eq
   1894a:	3c01      	subeq	r4, #1
   1894c:	d0f7      	beq.n	1893e <__aeabi_dmul+0x1a6>
   1894e:	ea41 0106 	orr.w	r1, r1, r6
   18952:	f095 0f00 	teq	r5, #0
   18956:	bf18      	it	ne
   18958:	4770      	bxne	lr
   1895a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1895e:	0052      	lsls	r2, r2, #1
   18960:	eb43 0303 	adc.w	r3, r3, r3
   18964:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   18968:	bf08      	it	eq
   1896a:	3d01      	subeq	r5, #1
   1896c:	d0f7      	beq.n	1895e <__aeabi_dmul+0x1c6>
   1896e:	ea43 0306 	orr.w	r3, r3, r6
   18972:	4770      	bx	lr
   18974:	ea94 0f0c 	teq	r4, ip
   18978:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1897c:	bf18      	it	ne
   1897e:	ea95 0f0c 	teqne	r5, ip
   18982:	d00c      	beq.n	1899e <__aeabi_dmul+0x206>
   18984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18988:	bf18      	it	ne
   1898a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1898e:	d1d1      	bne.n	18934 <__aeabi_dmul+0x19c>
   18990:	ea81 0103 	eor.w	r1, r1, r3
   18994:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18998:	f04f 0000 	mov.w	r0, #0
   1899c:	bd70      	pop	{r4, r5, r6, pc}
   1899e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   189a2:	bf06      	itte	eq
   189a4:	4610      	moveq	r0, r2
   189a6:	4619      	moveq	r1, r3
   189a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   189ac:	d019      	beq.n	189e2 <__aeabi_dmul+0x24a>
   189ae:	ea94 0f0c 	teq	r4, ip
   189b2:	d102      	bne.n	189ba <__aeabi_dmul+0x222>
   189b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   189b8:	d113      	bne.n	189e2 <__aeabi_dmul+0x24a>
   189ba:	ea95 0f0c 	teq	r5, ip
   189be:	d105      	bne.n	189cc <__aeabi_dmul+0x234>
   189c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   189c4:	bf1c      	itt	ne
   189c6:	4610      	movne	r0, r2
   189c8:	4619      	movne	r1, r3
   189ca:	d10a      	bne.n	189e2 <__aeabi_dmul+0x24a>
   189cc:	ea81 0103 	eor.w	r1, r1, r3
   189d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   189d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   189d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   189dc:	f04f 0000 	mov.w	r0, #0
   189e0:	bd70      	pop	{r4, r5, r6, pc}
   189e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   189e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   189ea:	bd70      	pop	{r4, r5, r6, pc}

000189ec <__aeabi_ddiv>:
   189ec:	b570      	push	{r4, r5, r6, lr}
   189ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   189f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   189f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   189fa:	bf1d      	ittte	ne
   189fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   18a00:	ea94 0f0c 	teqne	r4, ip
   18a04:	ea95 0f0c 	teqne	r5, ip
   18a08:	f000 f8a7 	bleq	18b5a <__aeabi_ddiv+0x16e>
   18a0c:	eba4 0405 	sub.w	r4, r4, r5
   18a10:	ea81 0e03 	eor.w	lr, r1, r3
   18a14:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18a18:	ea4f 3101 	mov.w	r1, r1, lsl #12
   18a1c:	f000 8088 	beq.w	18b30 <__aeabi_ddiv+0x144>
   18a20:	ea4f 3303 	mov.w	r3, r3, lsl #12
   18a24:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   18a28:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   18a2c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   18a30:	ea4f 2202 	mov.w	r2, r2, lsl #8
   18a34:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   18a38:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   18a3c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   18a40:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   18a44:	429d      	cmp	r5, r3
   18a46:	bf08      	it	eq
   18a48:	4296      	cmpeq	r6, r2
   18a4a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   18a4e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   18a52:	d202      	bcs.n	18a5a <__aeabi_ddiv+0x6e>
   18a54:	085b      	lsrs	r3, r3, #1
   18a56:	ea4f 0232 	mov.w	r2, r2, rrx
   18a5a:	1ab6      	subs	r6, r6, r2
   18a5c:	eb65 0503 	sbc.w	r5, r5, r3
   18a60:	085b      	lsrs	r3, r3, #1
   18a62:	ea4f 0232 	mov.w	r2, r2, rrx
   18a66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   18a6a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   18a6e:	ebb6 0e02 	subs.w	lr, r6, r2
   18a72:	eb75 0e03 	sbcs.w	lr, r5, r3
   18a76:	bf22      	ittt	cs
   18a78:	1ab6      	subcs	r6, r6, r2
   18a7a:	4675      	movcs	r5, lr
   18a7c:	ea40 000c 	orrcs.w	r0, r0, ip
   18a80:	085b      	lsrs	r3, r3, #1
   18a82:	ea4f 0232 	mov.w	r2, r2, rrx
   18a86:	ebb6 0e02 	subs.w	lr, r6, r2
   18a8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   18a8e:	bf22      	ittt	cs
   18a90:	1ab6      	subcs	r6, r6, r2
   18a92:	4675      	movcs	r5, lr
   18a94:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   18a98:	085b      	lsrs	r3, r3, #1
   18a9a:	ea4f 0232 	mov.w	r2, r2, rrx
   18a9e:	ebb6 0e02 	subs.w	lr, r6, r2
   18aa2:	eb75 0e03 	sbcs.w	lr, r5, r3
   18aa6:	bf22      	ittt	cs
   18aa8:	1ab6      	subcs	r6, r6, r2
   18aaa:	4675      	movcs	r5, lr
   18aac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18ab0:	085b      	lsrs	r3, r3, #1
   18ab2:	ea4f 0232 	mov.w	r2, r2, rrx
   18ab6:	ebb6 0e02 	subs.w	lr, r6, r2
   18aba:	eb75 0e03 	sbcs.w	lr, r5, r3
   18abe:	bf22      	ittt	cs
   18ac0:	1ab6      	subcs	r6, r6, r2
   18ac2:	4675      	movcs	r5, lr
   18ac4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18ac8:	ea55 0e06 	orrs.w	lr, r5, r6
   18acc:	d018      	beq.n	18b00 <__aeabi_ddiv+0x114>
   18ace:	ea4f 1505 	mov.w	r5, r5, lsl #4
   18ad2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   18ad6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   18ada:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   18ade:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   18ae2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   18ae6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   18aea:	d1c0      	bne.n	18a6e <__aeabi_ddiv+0x82>
   18aec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18af0:	d10b      	bne.n	18b0a <__aeabi_ddiv+0x11e>
   18af2:	ea41 0100 	orr.w	r1, r1, r0
   18af6:	f04f 0000 	mov.w	r0, #0
   18afa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   18afe:	e7b6      	b.n	18a6e <__aeabi_ddiv+0x82>
   18b00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18b04:	bf04      	itt	eq
   18b06:	4301      	orreq	r1, r0
   18b08:	2000      	moveq	r0, #0
   18b0a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   18b0e:	bf88      	it	hi
   18b10:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   18b14:	f63f aeaf 	bhi.w	18876 <__aeabi_dmul+0xde>
   18b18:	ebb5 0c03 	subs.w	ip, r5, r3
   18b1c:	bf04      	itt	eq
   18b1e:	ebb6 0c02 	subseq.w	ip, r6, r2
   18b22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   18b26:	f150 0000 	adcs.w	r0, r0, #0
   18b2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   18b2e:	bd70      	pop	{r4, r5, r6, pc}
   18b30:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   18b34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   18b38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   18b3c:	bfc2      	ittt	gt
   18b3e:	ebd4 050c 	rsbsgt	r5, r4, ip
   18b42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   18b46:	bd70      	popgt	{r4, r5, r6, pc}
   18b48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18b4c:	f04f 0e00 	mov.w	lr, #0
   18b50:	3c01      	subs	r4, #1
   18b52:	e690      	b.n	18876 <__aeabi_dmul+0xde>
   18b54:	ea45 0e06 	orr.w	lr, r5, r6
   18b58:	e68d      	b.n	18876 <__aeabi_dmul+0xde>
   18b5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   18b5e:	ea94 0f0c 	teq	r4, ip
   18b62:	bf08      	it	eq
   18b64:	ea95 0f0c 	teqeq	r5, ip
   18b68:	f43f af3b 	beq.w	189e2 <__aeabi_dmul+0x24a>
   18b6c:	ea94 0f0c 	teq	r4, ip
   18b70:	d10a      	bne.n	18b88 <__aeabi_ddiv+0x19c>
   18b72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18b76:	f47f af34 	bne.w	189e2 <__aeabi_dmul+0x24a>
   18b7a:	ea95 0f0c 	teq	r5, ip
   18b7e:	f47f af25 	bne.w	189cc <__aeabi_dmul+0x234>
   18b82:	4610      	mov	r0, r2
   18b84:	4619      	mov	r1, r3
   18b86:	e72c      	b.n	189e2 <__aeabi_dmul+0x24a>
   18b88:	ea95 0f0c 	teq	r5, ip
   18b8c:	d106      	bne.n	18b9c <__aeabi_ddiv+0x1b0>
   18b8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18b92:	f43f aefd 	beq.w	18990 <__aeabi_dmul+0x1f8>
   18b96:	4610      	mov	r0, r2
   18b98:	4619      	mov	r1, r3
   18b9a:	e722      	b.n	189e2 <__aeabi_dmul+0x24a>
   18b9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18ba0:	bf18      	it	ne
   18ba2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18ba6:	f47f aec5 	bne.w	18934 <__aeabi_dmul+0x19c>
   18baa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   18bae:	f47f af0d 	bne.w	189cc <__aeabi_dmul+0x234>
   18bb2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   18bb6:	f47f aeeb 	bne.w	18990 <__aeabi_dmul+0x1f8>
   18bba:	e712      	b.n	189e2 <__aeabi_dmul+0x24a>

00018bbc <__gedf2>:
   18bbc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   18bc0:	e006      	b.n	18bd0 <__cmpdf2+0x4>
   18bc2:	bf00      	nop

00018bc4 <__ledf2>:
   18bc4:	f04f 0c01 	mov.w	ip, #1
   18bc8:	e002      	b.n	18bd0 <__cmpdf2+0x4>
   18bca:	bf00      	nop

00018bcc <__cmpdf2>:
   18bcc:	f04f 0c01 	mov.w	ip, #1
   18bd0:	f84d cd04 	str.w	ip, [sp, #-4]!
   18bd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18bd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18bdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18be0:	bf18      	it	ne
   18be2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   18be6:	d01b      	beq.n	18c20 <__cmpdf2+0x54>
   18be8:	b001      	add	sp, #4
   18bea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   18bee:	bf0c      	ite	eq
   18bf0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   18bf4:	ea91 0f03 	teqne	r1, r3
   18bf8:	bf02      	ittt	eq
   18bfa:	ea90 0f02 	teqeq	r0, r2
   18bfe:	2000      	moveq	r0, #0
   18c00:	4770      	bxeq	lr
   18c02:	f110 0f00 	cmn.w	r0, #0
   18c06:	ea91 0f03 	teq	r1, r3
   18c0a:	bf58      	it	pl
   18c0c:	4299      	cmppl	r1, r3
   18c0e:	bf08      	it	eq
   18c10:	4290      	cmpeq	r0, r2
   18c12:	bf2c      	ite	cs
   18c14:	17d8      	asrcs	r0, r3, #31
   18c16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   18c1a:	f040 0001 	orr.w	r0, r0, #1
   18c1e:	4770      	bx	lr
   18c20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18c24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18c28:	d102      	bne.n	18c30 <__cmpdf2+0x64>
   18c2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   18c2e:	d107      	bne.n	18c40 <__cmpdf2+0x74>
   18c30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18c34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18c38:	d1d6      	bne.n	18be8 <__cmpdf2+0x1c>
   18c3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   18c3e:	d0d3      	beq.n	18be8 <__cmpdf2+0x1c>
   18c40:	f85d 0b04 	ldr.w	r0, [sp], #4
   18c44:	4770      	bx	lr
   18c46:	bf00      	nop

00018c48 <__aeabi_cdrcmple>:
   18c48:	4684      	mov	ip, r0
   18c4a:	4610      	mov	r0, r2
   18c4c:	4662      	mov	r2, ip
   18c4e:	468c      	mov	ip, r1
   18c50:	4619      	mov	r1, r3
   18c52:	4663      	mov	r3, ip
   18c54:	e000      	b.n	18c58 <__aeabi_cdcmpeq>
   18c56:	bf00      	nop

00018c58 <__aeabi_cdcmpeq>:
   18c58:	b501      	push	{r0, lr}
   18c5a:	f7ff ffb7 	bl	18bcc <__cmpdf2>
   18c5e:	2800      	cmp	r0, #0
   18c60:	bf48      	it	mi
   18c62:	f110 0f00 	cmnmi.w	r0, #0
   18c66:	bd01      	pop	{r0, pc}

00018c68 <__aeabi_dcmpeq>:
   18c68:	f84d ed08 	str.w	lr, [sp, #-8]!
   18c6c:	f7ff fff4 	bl	18c58 <__aeabi_cdcmpeq>
   18c70:	bf0c      	ite	eq
   18c72:	2001      	moveq	r0, #1
   18c74:	2000      	movne	r0, #0
   18c76:	f85d fb08 	ldr.w	pc, [sp], #8
   18c7a:	bf00      	nop

00018c7c <__aeabi_dcmplt>:
   18c7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18c80:	f7ff ffea 	bl	18c58 <__aeabi_cdcmpeq>
   18c84:	bf34      	ite	cc
   18c86:	2001      	movcc	r0, #1
   18c88:	2000      	movcs	r0, #0
   18c8a:	f85d fb08 	ldr.w	pc, [sp], #8
   18c8e:	bf00      	nop

00018c90 <__aeabi_dcmple>:
   18c90:	f84d ed08 	str.w	lr, [sp, #-8]!
   18c94:	f7ff ffe0 	bl	18c58 <__aeabi_cdcmpeq>
   18c98:	bf94      	ite	ls
   18c9a:	2001      	movls	r0, #1
   18c9c:	2000      	movhi	r0, #0
   18c9e:	f85d fb08 	ldr.w	pc, [sp], #8
   18ca2:	bf00      	nop

00018ca4 <__aeabi_dcmpge>:
   18ca4:	f84d ed08 	str.w	lr, [sp, #-8]!
   18ca8:	f7ff ffce 	bl	18c48 <__aeabi_cdrcmple>
   18cac:	bf94      	ite	ls
   18cae:	2001      	movls	r0, #1
   18cb0:	2000      	movhi	r0, #0
   18cb2:	f85d fb08 	ldr.w	pc, [sp], #8
   18cb6:	bf00      	nop

00018cb8 <__aeabi_dcmpgt>:
   18cb8:	f84d ed08 	str.w	lr, [sp, #-8]!
   18cbc:	f7ff ffc4 	bl	18c48 <__aeabi_cdrcmple>
   18cc0:	bf34      	ite	cc
   18cc2:	2001      	movcc	r0, #1
   18cc4:	2000      	movcs	r0, #0
   18cc6:	f85d fb08 	ldr.w	pc, [sp], #8
   18cca:	bf00      	nop

00018ccc <__aeabi_d2iz>:
   18ccc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18cd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   18cd4:	d215      	bcs.n	18d02 <__aeabi_d2iz+0x36>
   18cd6:	d511      	bpl.n	18cfc <__aeabi_d2iz+0x30>
   18cd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   18cdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   18ce0:	d912      	bls.n	18d08 <__aeabi_d2iz+0x3c>
   18ce2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18ce6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18cea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   18cee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18cf2:	fa23 f002 	lsr.w	r0, r3, r2
   18cf6:	bf18      	it	ne
   18cf8:	4240      	negne	r0, r0
   18cfa:	4770      	bx	lr
   18cfc:	f04f 0000 	mov.w	r0, #0
   18d00:	4770      	bx	lr
   18d02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   18d06:	d105      	bne.n	18d14 <__aeabi_d2iz+0x48>
   18d08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   18d0c:	bf08      	it	eq
   18d0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   18d12:	4770      	bx	lr
   18d14:	f04f 0000 	mov.w	r0, #0
   18d18:	4770      	bx	lr
   18d1a:	bf00      	nop

00018d1c <__aeabi_ldivmod>:
   18d1c:	b97b      	cbnz	r3, 18d3e <__aeabi_ldivmod+0x22>
   18d1e:	b972      	cbnz	r2, 18d3e <__aeabi_ldivmod+0x22>
   18d20:	2900      	cmp	r1, #0
   18d22:	bfbe      	ittt	lt
   18d24:	2000      	movlt	r0, #0
   18d26:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   18d2a:	e006      	blt.n	18d3a <__aeabi_ldivmod+0x1e>
   18d2c:	bf08      	it	eq
   18d2e:	2800      	cmpeq	r0, #0
   18d30:	bf1c      	itt	ne
   18d32:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   18d36:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   18d3a:	f000 b9bb 	b.w	190b4 <__aeabi_idiv0>
   18d3e:	f1ad 0c08 	sub.w	ip, sp, #8
   18d42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   18d46:	2900      	cmp	r1, #0
   18d48:	db09      	blt.n	18d5e <__aeabi_ldivmod+0x42>
   18d4a:	2b00      	cmp	r3, #0
   18d4c:	db1a      	blt.n	18d84 <__aeabi_ldivmod+0x68>
   18d4e:	f000 f84d 	bl	18dec <__udivmoddi4>
   18d52:	f8dd e004 	ldr.w	lr, [sp, #4]
   18d56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18d5a:	b004      	add	sp, #16
   18d5c:	4770      	bx	lr
   18d5e:	4240      	negs	r0, r0
   18d60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18d64:	2b00      	cmp	r3, #0
   18d66:	db1b      	blt.n	18da0 <__aeabi_ldivmod+0x84>
   18d68:	f000 f840 	bl	18dec <__udivmoddi4>
   18d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
   18d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18d74:	b004      	add	sp, #16
   18d76:	4240      	negs	r0, r0
   18d78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18d7c:	4252      	negs	r2, r2
   18d7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18d82:	4770      	bx	lr
   18d84:	4252      	negs	r2, r2
   18d86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18d8a:	f000 f82f 	bl	18dec <__udivmoddi4>
   18d8e:	f8dd e004 	ldr.w	lr, [sp, #4]
   18d92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18d96:	b004      	add	sp, #16
   18d98:	4240      	negs	r0, r0
   18d9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18d9e:	4770      	bx	lr
   18da0:	4252      	negs	r2, r2
   18da2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18da6:	f000 f821 	bl	18dec <__udivmoddi4>
   18daa:	f8dd e004 	ldr.w	lr, [sp, #4]
   18dae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18db2:	b004      	add	sp, #16
   18db4:	4252      	negs	r2, r2
   18db6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18dba:	4770      	bx	lr

00018dbc <__aeabi_uldivmod>:
   18dbc:	b953      	cbnz	r3, 18dd4 <__aeabi_uldivmod+0x18>
   18dbe:	b94a      	cbnz	r2, 18dd4 <__aeabi_uldivmod+0x18>
   18dc0:	2900      	cmp	r1, #0
   18dc2:	bf08      	it	eq
   18dc4:	2800      	cmpeq	r0, #0
   18dc6:	bf1c      	itt	ne
   18dc8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   18dcc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   18dd0:	f000 b970 	b.w	190b4 <__aeabi_idiv0>
   18dd4:	f1ad 0c08 	sub.w	ip, sp, #8
   18dd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   18ddc:	f000 f806 	bl	18dec <__udivmoddi4>
   18de0:	f8dd e004 	ldr.w	lr, [sp, #4]
   18de4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18de8:	b004      	add	sp, #16
   18dea:	4770      	bx	lr

00018dec <__udivmoddi4>:
   18dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18df0:	9e09      	ldr	r6, [sp, #36]	; 0x24
   18df2:	4604      	mov	r4, r0
   18df4:	4689      	mov	r9, r1
   18df6:	2b00      	cmp	r3, #0
   18df8:	f040 8083 	bne.w	18f02 <__udivmoddi4+0x116>
   18dfc:	428a      	cmp	r2, r1
   18dfe:	4615      	mov	r5, r2
   18e00:	d945      	bls.n	18e8e <__udivmoddi4+0xa2>
   18e02:	fab2 f282 	clz	r2, r2
   18e06:	b14a      	cbz	r2, 18e1c <__udivmoddi4+0x30>
   18e08:	f1c2 0720 	rsb	r7, r2, #32
   18e0c:	fa01 f302 	lsl.w	r3, r1, r2
   18e10:	4095      	lsls	r5, r2
   18e12:	4094      	lsls	r4, r2
   18e14:	fa20 f707 	lsr.w	r7, r0, r7
   18e18:	ea47 0903 	orr.w	r9, r7, r3
   18e1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18e20:	0c23      	lsrs	r3, r4, #16
   18e22:	fa1f f885 	uxth.w	r8, r5
   18e26:	fbb9 fcfe 	udiv	ip, r9, lr
   18e2a:	fb0e 991c 	mls	r9, lr, ip, r9
   18e2e:	fb0c f108 	mul.w	r1, ip, r8
   18e32:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
   18e36:	4299      	cmp	r1, r3
   18e38:	d90a      	bls.n	18e50 <__udivmoddi4+0x64>
   18e3a:	18eb      	adds	r3, r5, r3
   18e3c:	bf2c      	ite	cs
   18e3e:	2001      	movcs	r0, #1
   18e40:	2000      	movcc	r0, #0
   18e42:	4299      	cmp	r1, r3
   18e44:	d902      	bls.n	18e4c <__udivmoddi4+0x60>
   18e46:	2800      	cmp	r0, #0
   18e48:	f000 811d 	beq.w	19086 <__udivmoddi4+0x29a>
   18e4c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   18e50:	1a59      	subs	r1, r3, r1
   18e52:	b2a3      	uxth	r3, r4
   18e54:	fbb1 f0fe 	udiv	r0, r1, lr
   18e58:	fb0e 1110 	mls	r1, lr, r0, r1
   18e5c:	fb00 f808 	mul.w	r8, r0, r8
   18e60:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   18e64:	45a0      	cmp	r8, r4
   18e66:	d905      	bls.n	18e74 <__udivmoddi4+0x88>
   18e68:	192c      	adds	r4, r5, r4
   18e6a:	d202      	bcs.n	18e72 <__udivmoddi4+0x86>
   18e6c:	45a0      	cmp	r8, r4
   18e6e:	f200 810e 	bhi.w	1908e <__udivmoddi4+0x2a2>
   18e72:	3801      	subs	r0, #1
   18e74:	eba4 0408 	sub.w	r4, r4, r8
   18e78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   18e7c:	2700      	movs	r7, #0
   18e7e:	b11e      	cbz	r6, 18e88 <__udivmoddi4+0x9c>
   18e80:	40d4      	lsrs	r4, r2
   18e82:	2300      	movs	r3, #0
   18e84:	e9c6 4300 	strd	r4, r3, [r6]
   18e88:	4639      	mov	r1, r7
   18e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e8e:	2a00      	cmp	r2, #0
   18e90:	d051      	beq.n	18f36 <__udivmoddi4+0x14a>
   18e92:	fab2 f282 	clz	r2, r2
   18e96:	2a00      	cmp	r2, #0
   18e98:	f040 80af 	bne.w	18ffa <__udivmoddi4+0x20e>
   18e9c:	1b49      	subs	r1, r1, r5
   18e9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   18ea2:	fa1f f885 	uxth.w	r8, r5
   18ea6:	2701      	movs	r7, #1
   18ea8:	0c23      	lsrs	r3, r4, #16
   18eaa:	fbb1 fcfe 	udiv	ip, r1, lr
   18eae:	fb0e 111c 	mls	r1, lr, ip, r1
   18eb2:	fb08 f00c 	mul.w	r0, r8, ip
   18eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   18eba:	4298      	cmp	r0, r3
   18ebc:	d90a      	bls.n	18ed4 <__udivmoddi4+0xe8>
   18ebe:	18eb      	adds	r3, r5, r3
   18ec0:	bf2c      	ite	cs
   18ec2:	2101      	movcs	r1, #1
   18ec4:	2100      	movcc	r1, #0
   18ec6:	4298      	cmp	r0, r3
   18ec8:	d902      	bls.n	18ed0 <__udivmoddi4+0xe4>
   18eca:	2900      	cmp	r1, #0
   18ecc:	f000 80d7 	beq.w	1907e <__udivmoddi4+0x292>
   18ed0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   18ed4:	1a19      	subs	r1, r3, r0
   18ed6:	b2a3      	uxth	r3, r4
   18ed8:	fbb1 f0fe 	udiv	r0, r1, lr
   18edc:	fb0e 1110 	mls	r1, lr, r0, r1
   18ee0:	fb08 f800 	mul.w	r8, r8, r0
   18ee4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   18ee8:	45a0      	cmp	r8, r4
   18eea:	d905      	bls.n	18ef8 <__udivmoddi4+0x10c>
   18eec:	192c      	adds	r4, r5, r4
   18eee:	d202      	bcs.n	18ef6 <__udivmoddi4+0x10a>
   18ef0:	45a0      	cmp	r8, r4
   18ef2:	f200 80c1 	bhi.w	19078 <__udivmoddi4+0x28c>
   18ef6:	3801      	subs	r0, #1
   18ef8:	eba4 0408 	sub.w	r4, r4, r8
   18efc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   18f00:	e7bd      	b.n	18e7e <__udivmoddi4+0x92>
   18f02:	428b      	cmp	r3, r1
   18f04:	d908      	bls.n	18f18 <__udivmoddi4+0x12c>
   18f06:	2e00      	cmp	r6, #0
   18f08:	d074      	beq.n	18ff4 <__udivmoddi4+0x208>
   18f0a:	2700      	movs	r7, #0
   18f0c:	e9c6 0100 	strd	r0, r1, [r6]
   18f10:	4638      	mov	r0, r7
   18f12:	4639      	mov	r1, r7
   18f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f18:	fab3 f783 	clz	r7, r3
   18f1c:	b967      	cbnz	r7, 18f38 <__udivmoddi4+0x14c>
   18f1e:	428b      	cmp	r3, r1
   18f20:	f0c0 80a4 	bcc.w	1906c <__udivmoddi4+0x280>
   18f24:	4282      	cmp	r2, r0
   18f26:	f240 80a1 	bls.w	1906c <__udivmoddi4+0x280>
   18f2a:	4638      	mov	r0, r7
   18f2c:	2e00      	cmp	r6, #0
   18f2e:	d0ab      	beq.n	18e88 <__udivmoddi4+0x9c>
   18f30:	e9c6 4900 	strd	r4, r9, [r6]
   18f34:	e7a8      	b.n	18e88 <__udivmoddi4+0x9c>
   18f36:	deff      	udf	#255	; 0xff
   18f38:	f1c7 0520 	rsb	r5, r7, #32
   18f3c:	40bb      	lsls	r3, r7
   18f3e:	fa02 fc07 	lsl.w	ip, r2, r7
   18f42:	fa01 f407 	lsl.w	r4, r1, r7
   18f46:	40ea      	lsrs	r2, r5
   18f48:	fa20 f805 	lsr.w	r8, r0, r5
   18f4c:	40e9      	lsrs	r1, r5
   18f4e:	fa00 fe07 	lsl.w	lr, r0, r7
   18f52:	431a      	orrs	r2, r3
   18f54:	ea48 0404 	orr.w	r4, r8, r4
   18f58:	ea4f 4812 	mov.w	r8, r2, lsr #16
   18f5c:	0c20      	lsrs	r0, r4, #16
   18f5e:	fa1f f982 	uxth.w	r9, r2
   18f62:	fbb1 faf8 	udiv	sl, r1, r8
   18f66:	fb08 111a 	mls	r1, r8, sl, r1
   18f6a:	fb0a fb09 	mul.w	fp, sl, r9
   18f6e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   18f72:	458b      	cmp	fp, r1
   18f74:	d90a      	bls.n	18f8c <__udivmoddi4+0x1a0>
   18f76:	1851      	adds	r1, r2, r1
   18f78:	bf2c      	ite	cs
   18f7a:	2301      	movcs	r3, #1
   18f7c:	2300      	movcc	r3, #0
   18f7e:	458b      	cmp	fp, r1
   18f80:	d902      	bls.n	18f88 <__udivmoddi4+0x19c>
   18f82:	2b00      	cmp	r3, #0
   18f84:	f000 8088 	beq.w	19098 <__udivmoddi4+0x2ac>
   18f88:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   18f8c:	eba1 010b 	sub.w	r1, r1, fp
   18f90:	b2a4      	uxth	r4, r4
   18f92:	fbb1 f0f8 	udiv	r0, r1, r8
   18f96:	fb08 1110 	mls	r1, r8, r0, r1
   18f9a:	fb00 f909 	mul.w	r9, r0, r9
   18f9e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   18fa2:	4589      	cmp	r9, r1
   18fa4:	d904      	bls.n	18fb0 <__udivmoddi4+0x1c4>
   18fa6:	1851      	adds	r1, r2, r1
   18fa8:	d201      	bcs.n	18fae <__udivmoddi4+0x1c2>
   18faa:	4589      	cmp	r9, r1
   18fac:	d87b      	bhi.n	190a6 <__udivmoddi4+0x2ba>
   18fae:	3801      	subs	r0, #1
   18fb0:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   18fb4:	eba1 0109 	sub.w	r1, r1, r9
   18fb8:	fba0 890c 	umull	r8, r9, r0, ip
   18fbc:	4549      	cmp	r1, r9
   18fbe:	4644      	mov	r4, r8
   18fc0:	464b      	mov	r3, r9
   18fc2:	d302      	bcc.n	18fca <__udivmoddi4+0x1de>
   18fc4:	d106      	bne.n	18fd4 <__udivmoddi4+0x1e8>
   18fc6:	45c6      	cmp	lr, r8
   18fc8:	d204      	bcs.n	18fd4 <__udivmoddi4+0x1e8>
   18fca:	3801      	subs	r0, #1
   18fcc:	ebb8 040c 	subs.w	r4, r8, ip
   18fd0:	eb69 0302 	sbc.w	r3, r9, r2
   18fd4:	2e00      	cmp	r6, #0
   18fd6:	d05d      	beq.n	19094 <__udivmoddi4+0x2a8>
   18fd8:	ebbe 0204 	subs.w	r2, lr, r4
   18fdc:	eb61 0103 	sbc.w	r1, r1, r3
   18fe0:	fa01 f505 	lsl.w	r5, r1, r5
   18fe4:	fa22 f307 	lsr.w	r3, r2, r7
   18fe8:	40f9      	lsrs	r1, r7
   18fea:	2700      	movs	r7, #0
   18fec:	431d      	orrs	r5, r3
   18fee:	e9c6 5100 	strd	r5, r1, [r6]
   18ff2:	e749      	b.n	18e88 <__udivmoddi4+0x9c>
   18ff4:	4637      	mov	r7, r6
   18ff6:	4630      	mov	r0, r6
   18ff8:	e746      	b.n	18e88 <__udivmoddi4+0x9c>
   18ffa:	f1c2 0020 	rsb	r0, r2, #32
   18ffe:	4095      	lsls	r5, r2
   19000:	fa01 f702 	lsl.w	r7, r1, r2
   19004:	fa21 f300 	lsr.w	r3, r1, r0
   19008:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1900c:	fa24 f100 	lsr.w	r1, r4, r0
   19010:	fa1f f885 	uxth.w	r8, r5
   19014:	4094      	lsls	r4, r2
   19016:	4339      	orrs	r1, r7
   19018:	fbb3 f0fe 	udiv	r0, r3, lr
   1901c:	0c0f      	lsrs	r7, r1, #16
   1901e:	fb0e 3310 	mls	r3, lr, r0, r3
   19022:	fb00 fc08 	mul.w	ip, r0, r8
   19026:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   1902a:	459c      	cmp	ip, r3
   1902c:	d907      	bls.n	1903e <__udivmoddi4+0x252>
   1902e:	18eb      	adds	r3, r5, r3
   19030:	bf2c      	ite	cs
   19032:	2701      	movcs	r7, #1
   19034:	2700      	movcc	r7, #0
   19036:	459c      	cmp	ip, r3
   19038:	d900      	bls.n	1903c <__udivmoddi4+0x250>
   1903a:	b38f      	cbz	r7, 190a0 <__udivmoddi4+0x2b4>
   1903c:	3801      	subs	r0, #1
   1903e:	eba3 030c 	sub.w	r3, r3, ip
   19042:	b289      	uxth	r1, r1
   19044:	fbb3 f7fe 	udiv	r7, r3, lr
   19048:	fb0e 3317 	mls	r3, lr, r7, r3
   1904c:	fb07 fc08 	mul.w	ip, r7, r8
   19050:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   19054:	458c      	cmp	ip, r1
   19056:	d904      	bls.n	19062 <__udivmoddi4+0x276>
   19058:	1869      	adds	r1, r5, r1
   1905a:	d201      	bcs.n	19060 <__udivmoddi4+0x274>
   1905c:	458c      	cmp	ip, r1
   1905e:	d825      	bhi.n	190ac <__udivmoddi4+0x2c0>
   19060:	3f01      	subs	r7, #1
   19062:	eba1 010c 	sub.w	r1, r1, ip
   19066:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
   1906a:	e71d      	b.n	18ea8 <__udivmoddi4+0xbc>
   1906c:	1a84      	subs	r4, r0, r2
   1906e:	eb61 0303 	sbc.w	r3, r1, r3
   19072:	2001      	movs	r0, #1
   19074:	4699      	mov	r9, r3
   19076:	e759      	b.n	18f2c <__udivmoddi4+0x140>
   19078:	3802      	subs	r0, #2
   1907a:	442c      	add	r4, r5
   1907c:	e73c      	b.n	18ef8 <__udivmoddi4+0x10c>
   1907e:	f1ac 0c02 	sub.w	ip, ip, #2
   19082:	442b      	add	r3, r5
   19084:	e726      	b.n	18ed4 <__udivmoddi4+0xe8>
   19086:	f1ac 0c02 	sub.w	ip, ip, #2
   1908a:	442b      	add	r3, r5
   1908c:	e6e0      	b.n	18e50 <__udivmoddi4+0x64>
   1908e:	3802      	subs	r0, #2
   19090:	442c      	add	r4, r5
   19092:	e6ef      	b.n	18e74 <__udivmoddi4+0x88>
   19094:	4637      	mov	r7, r6
   19096:	e6f7      	b.n	18e88 <__udivmoddi4+0x9c>
   19098:	f1aa 0a02 	sub.w	sl, sl, #2
   1909c:	4411      	add	r1, r2
   1909e:	e775      	b.n	18f8c <__udivmoddi4+0x1a0>
   190a0:	3802      	subs	r0, #2
   190a2:	442b      	add	r3, r5
   190a4:	e7cb      	b.n	1903e <__udivmoddi4+0x252>
   190a6:	3802      	subs	r0, #2
   190a8:	4411      	add	r1, r2
   190aa:	e781      	b.n	18fb0 <__udivmoddi4+0x1c4>
   190ac:	3f02      	subs	r7, #2
   190ae:	4429      	add	r1, r5
   190b0:	e7d7      	b.n	19062 <__udivmoddi4+0x276>
   190b2:	bf00      	nop

000190b4 <__aeabi_idiv0>:
   190b4:	4770      	bx	lr
   190b6:	bf00      	nop

000190b8 <ocrypto_bigint_add128>:
   190b8:	b470      	push	{r4, r5, r6}
   190ba:	e891 0078 	ldmia.w	r1, {r3, r4, r5, r6}
   190be:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   190c2:	185b      	adds	r3, r3, r1
   190c4:	eb54 040c 	adcs.w	r4, r4, ip
   190c8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   190cc:	414d      	adcs	r5, r1
   190ce:	eb56 060c 	adcs.w	r6, r6, ip
   190d2:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
   190d6:	4180      	sbcs	r0, r0
   190d8:	3001      	adds	r0, #1
   190da:	bc70      	pop	{r4, r5, r6}
   190dc:	4770      	bx	lr

000190de <ocrypto_bigint_sub128>:
   190de:	b470      	push	{r4, r5, r6}
   190e0:	e891 0078 	ldmia.w	r1, {r3, r4, r5, r6}
   190e4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   190e8:	1a5b      	subs	r3, r3, r1
   190ea:	eb74 040c 	sbcs.w	r4, r4, ip
   190ee:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   190f2:	418d      	sbcs	r5, r1
   190f4:	eb76 060c 	sbcs.w	r6, r6, ip
   190f8:	e880 0078 	stmia.w	r0, {r3, r4, r5, r6}
   190fc:	4180      	sbcs	r0, r0
   190fe:	4240      	negs	r0, r0
   19100:	bc70      	pop	{r4, r5, r6}
   19102:	4770      	bx	lr

00019104 <ocrypto_bigint_add256>:
   19104:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19108:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
   1910c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19110:	185b      	adds	r3, r3, r1
   19112:	eb54 040c 	adcs.w	r4, r4, ip
   19116:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   1911a:	414d      	adcs	r5, r1
   1911c:	eb56 060c 	adcs.w	r6, r6, ip
   19120:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19124:	414f      	adcs	r7, r1
   19126:	eb58 080c 	adcs.w	r8, r8, ip
   1912a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   1912e:	eb59 0901 	adcs.w	r9, r9, r1
   19132:	eb5a 0a0c 	adcs.w	sl, sl, ip
   19136:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
   1913a:	4180      	sbcs	r0, r0
   1913c:	3001      	adds	r0, #1
   1913e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19142:	4770      	bx	lr

00019144 <ocrypto_bigint_sub256>:
   19144:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19148:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
   1914c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19150:	1a5b      	subs	r3, r3, r1
   19152:	eb74 040c 	sbcs.w	r4, r4, ip
   19156:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   1915a:	418d      	sbcs	r5, r1
   1915c:	eb76 060c 	sbcs.w	r6, r6, ip
   19160:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19164:	418f      	sbcs	r7, r1
   19166:	eb78 080c 	sbcs.w	r8, r8, ip
   1916a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   1916e:	eb79 0901 	sbcs.w	r9, r9, r1
   19172:	eb7a 0a0c 	sbcs.w	sl, sl, ip
   19176:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
   1917a:	4180      	sbcs	r0, r0
   1917c:	4240      	negs	r0, r0
   1917e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19182:	4770      	bx	lr

00019184 <ocrypto_bigint_cadd256>:
   19184:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19188:	4252      	negs	r2, r2
   1918a:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
   1918e:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
   19192:	4017      	ands	r7, r2
   19194:	19db      	adds	r3, r3, r7
   19196:	ea18 0802 	ands.w	r8, r8, r2
   1919a:	eb54 0408 	adcs.w	r4, r4, r8
   1919e:	ea19 0902 	ands.w	r9, r9, r2
   191a2:	eb55 0509 	adcs.w	r5, r5, r9
   191a6:	ea1a 0a02 	ands.w	sl, sl, r2
   191aa:	eb56 060a 	adcs.w	r6, r6, sl
   191ae:	c078      	stmia	r0!, {r3, r4, r5, r6}
   191b0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
   191b4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
   191b8:	4017      	ands	r7, r2
   191ba:	417b      	adcs	r3, r7
   191bc:	ea18 0802 	ands.w	r8, r8, r2
   191c0:	eb54 0408 	adcs.w	r4, r4, r8
   191c4:	ea19 0902 	ands.w	r9, r9, r2
   191c8:	eb55 0509 	adcs.w	r5, r5, r9
   191cc:	ea1a 0a02 	ands.w	sl, sl, r2
   191d0:	eb56 060a 	adcs.w	r6, r6, sl
   191d4:	c078      	stmia	r0!, {r3, r4, r5, r6}
   191d6:	4180      	sbcs	r0, r0
   191d8:	3001      	adds	r0, #1
   191da:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   191de:	4770      	bx	lr

000191e0 <ocrypto_bigint_csub256>:
   191e0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   191e4:	4252      	negs	r2, r2
   191e6:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
   191ea:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
   191ee:	4017      	ands	r7, r2
   191f0:	1bdb      	subs	r3, r3, r7
   191f2:	ea18 0802 	ands.w	r8, r8, r2
   191f6:	eb74 0408 	sbcs.w	r4, r4, r8
   191fa:	ea19 0902 	ands.w	r9, r9, r2
   191fe:	eb75 0509 	sbcs.w	r5, r5, r9
   19202:	ea1a 0a02 	ands.w	sl, sl, r2
   19206:	eb76 060a 	sbcs.w	r6, r6, sl
   1920a:	c078      	stmia	r0!, {r3, r4, r5, r6}
   1920c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
   19210:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
   19214:	4017      	ands	r7, r2
   19216:	41bb      	sbcs	r3, r7
   19218:	ea18 0802 	ands.w	r8, r8, r2
   1921c:	eb74 0408 	sbcs.w	r4, r4, r8
   19220:	ea19 0902 	ands.w	r9, r9, r2
   19224:	eb75 0509 	sbcs.w	r5, r5, r9
   19228:	ea1a 0a02 	ands.w	sl, sl, r2
   1922c:	eb76 060a 	sbcs.w	r6, r6, sl
   19230:	c078      	stmia	r0!, {r3, r4, r5, r6}
   19232:	4180      	sbcs	r0, r0
   19234:	4240      	negs	r0, r0
   19236:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   1923a:	4770      	bx	lr

0001923c <cswap64>:
   1923c:	e890 0030 	ldmia.w	r0, {r4, r5}
   19240:	e891 00c0 	ldmia.w	r1, {r6, r7}
   19244:	1ba3      	subs	r3, r4, r6
   19246:	4013      	ands	r3, r2
   19248:	1ae4      	subs	r4, r4, r3
   1924a:	18f6      	adds	r6, r6, r3
   1924c:	1beb      	subs	r3, r5, r7
   1924e:	4013      	ands	r3, r2
   19250:	1aed      	subs	r5, r5, r3
   19252:	18ff      	adds	r7, r7, r3
   19254:	c030      	stmia	r0!, {r4, r5}
   19256:	c1c0      	stmia	r1!, {r6, r7}
   19258:	4770      	bx	lr

0001925a <ocrypto_bigint_cswap256>:
   1925a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1925c:	4252      	negs	r2, r2
   1925e:	f7ff ffed 	bl	1923c <cswap64>
   19262:	f7ff ffeb 	bl	1923c <cswap64>
   19266:	f7ff ffe9 	bl	1923c <cswap64>
   1926a:	f7ff ffe7 	bl	1923c <cswap64>
   1926e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019270 <ocrypto_bigint_mul128>:
   19270:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19274:	c93a      	ldmia	r1, {r1, r3, r4, r5}
   19276:	6816      	ldr	r6, [r2, #0]
   19278:	fba1 9a06 	umull	r9, sl, r1, r6
   1927c:	f04f 0c00 	mov.w	ip, #0
   19280:	fbe3 ac06 	umlal	sl, ip, r3, r6
   19284:	f04f 0700 	mov.w	r7, #0
   19288:	fbe4 c706 	umlal	ip, r7, r4, r6
   1928c:	f04f 0800 	mov.w	r8, #0
   19290:	fbe5 7806 	umlal	r7, r8, r5, r6
   19294:	f840 9b04 	str.w	r9, [r0], #4
   19298:	6856      	ldr	r6, [r2, #4]
   1929a:	f04f 0900 	mov.w	r9, #0
   1929e:	fbe1 a906 	umlal	sl, r9, r1, r6
   192a2:	eb1c 0c09 	adds.w	ip, ip, r9
   192a6:	f04f 0900 	mov.w	r9, #0
   192aa:	eb49 0909 	adc.w	r9, r9, r9
   192ae:	fbe3 c906 	umlal	ip, r9, r3, r6
   192b2:	eb17 0709 	adds.w	r7, r7, r9
   192b6:	f04f 0900 	mov.w	r9, #0
   192ba:	eb49 0909 	adc.w	r9, r9, r9
   192be:	fbe4 7906 	umlal	r7, r9, r4, r6
   192c2:	eb18 0809 	adds.w	r8, r8, r9
   192c6:	f04f 0900 	mov.w	r9, #0
   192ca:	eb49 0909 	adc.w	r9, r9, r9
   192ce:	fbe5 8906 	umlal	r8, r9, r5, r6
   192d2:	f840 ab04 	str.w	sl, [r0], #4
   192d6:	6896      	ldr	r6, [r2, #8]
   192d8:	f04f 0a00 	mov.w	sl, #0
   192dc:	fbe1 ca06 	umlal	ip, sl, r1, r6
   192e0:	eb17 070a 	adds.w	r7, r7, sl
   192e4:	f04f 0a00 	mov.w	sl, #0
   192e8:	eb4a 0a0a 	adc.w	sl, sl, sl
   192ec:	fbe3 7a06 	umlal	r7, sl, r3, r6
   192f0:	eb18 080a 	adds.w	r8, r8, sl
   192f4:	f04f 0a00 	mov.w	sl, #0
   192f8:	eb4a 0a0a 	adc.w	sl, sl, sl
   192fc:	fbe4 8a06 	umlal	r8, sl, r4, r6
   19300:	eb19 090a 	adds.w	r9, r9, sl
   19304:	f04f 0a00 	mov.w	sl, #0
   19308:	eb4a 0a0a 	adc.w	sl, sl, sl
   1930c:	fbe5 9a06 	umlal	r9, sl, r5, r6
   19310:	f840 cb04 	str.w	ip, [r0], #4
   19314:	68d6      	ldr	r6, [r2, #12]
   19316:	f04f 0c00 	mov.w	ip, #0
   1931a:	fbe1 7c06 	umlal	r7, ip, r1, r6
   1931e:	eb18 080c 	adds.w	r8, r8, ip
   19322:	f04f 0c00 	mov.w	ip, #0
   19326:	eb4c 0c0c 	adc.w	ip, ip, ip
   1932a:	fbe3 8c06 	umlal	r8, ip, r3, r6
   1932e:	eb19 090c 	adds.w	r9, r9, ip
   19332:	f04f 0c00 	mov.w	ip, #0
   19336:	eb4c 0c0c 	adc.w	ip, ip, ip
   1933a:	fbe4 9c06 	umlal	r9, ip, r4, r6
   1933e:	eb1a 0a0c 	adds.w	sl, sl, ip
   19342:	f04f 0c00 	mov.w	ip, #0
   19346:	eb4c 0c0c 	adc.w	ip, ip, ip
   1934a:	fbe5 ac06 	umlal	sl, ip, r5, r6
   1934e:	e880 1780 	stmia.w	r0, {r7, r8, r9, sl, ip}
   19352:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19356:	4770      	bx	lr

00019358 <ocrypto_bigint_sqr256>:
   19358:	460a      	mov	r2, r1

0001935a <ocrypto_bigint_mul256>:
   1935a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1935e:	ec41 0a14 	vmov	s8, s9, r0, r1
   19362:	ec92 0a08 	vldmia	r2, {s0-s7}
   19366:	c91e      	ldmia	r1, {r1, r2, r3, r4}
   19368:	ee10 0a10 	vmov	r0, s0
   1936c:	fba1 7800 	umull	r7, r8, r1, r0
   19370:	f04f 0900 	mov.w	r9, #0
   19374:	fbe2 8900 	umlal	r8, r9, r2, r0
   19378:	f04f 0a00 	mov.w	sl, #0
   1937c:	fbe3 9a00 	umlal	r9, sl, r3, r0
   19380:	f04f 0b00 	mov.w	fp, #0
   19384:	fbe4 ab00 	umlal	sl, fp, r4, r0
   19388:	ee12 0a10 	vmov	r0, s4
   1938c:	f04f 0c00 	mov.w	ip, #0
   19390:	fbe1 bc00 	umlal	fp, ip, r1, r0
   19394:	f04f 0e00 	mov.w	lr, #0
   19398:	fbe2 ce00 	umlal	ip, lr, r2, r0
   1939c:	f04f 0500 	mov.w	r5, #0
   193a0:	fbe3 e500 	umlal	lr, r5, r3, r0
   193a4:	f04f 0600 	mov.w	r6, #0
   193a8:	fbe4 5600 	umlal	r5, r6, r4, r0
   193ac:	ee05 7a10 	vmov	s10, r7
   193b0:	ee10 0a90 	vmov	r0, s1
   193b4:	f04f 0700 	mov.w	r7, #0
   193b8:	fbe1 8700 	umlal	r8, r7, r1, r0
   193bc:	eb19 0907 	adds.w	r9, r9, r7
   193c0:	f04f 0700 	mov.w	r7, #0
   193c4:	eb47 0707 	adc.w	r7, r7, r7
   193c8:	fbe2 9700 	umlal	r9, r7, r2, r0
   193cc:	eb1a 0a07 	adds.w	sl, sl, r7
   193d0:	f04f 0700 	mov.w	r7, #0
   193d4:	eb47 0707 	adc.w	r7, r7, r7
   193d8:	fbe3 a700 	umlal	sl, r7, r3, r0
   193dc:	eb1b 0b07 	adds.w	fp, fp, r7
   193e0:	f04f 0700 	mov.w	r7, #0
   193e4:	eb47 0707 	adc.w	r7, r7, r7
   193e8:	fbe4 b700 	umlal	fp, r7, r4, r0
   193ec:	ee12 0a90 	vmov	r0, s5
   193f0:	eb1c 0c07 	adds.w	ip, ip, r7
   193f4:	f04f 0700 	mov.w	r7, #0
   193f8:	eb47 0707 	adc.w	r7, r7, r7
   193fc:	fbe1 c700 	umlal	ip, r7, r1, r0
   19400:	eb1e 0e07 	adds.w	lr, lr, r7
   19404:	f04f 0700 	mov.w	r7, #0
   19408:	eb47 0707 	adc.w	r7, r7, r7
   1940c:	fbe2 e700 	umlal	lr, r7, r2, r0
   19410:	19ed      	adds	r5, r5, r7
   19412:	f04f 0700 	mov.w	r7, #0
   19416:	eb47 0707 	adc.w	r7, r7, r7
   1941a:	fbe3 5700 	umlal	r5, r7, r3, r0
   1941e:	19f6      	adds	r6, r6, r7
   19420:	f04f 0700 	mov.w	r7, #0
   19424:	eb47 0707 	adc.w	r7, r7, r7
   19428:	fbe4 6700 	umlal	r6, r7, r4, r0
   1942c:	ee05 8a90 	vmov	s11, r8
   19430:	ee11 0a10 	vmov	r0, s2
   19434:	f04f 0800 	mov.w	r8, #0
   19438:	fbe1 9800 	umlal	r9, r8, r1, r0
   1943c:	eb1a 0a08 	adds.w	sl, sl, r8
   19440:	f04f 0800 	mov.w	r8, #0
   19444:	eb48 0808 	adc.w	r8, r8, r8
   19448:	fbe2 a800 	umlal	sl, r8, r2, r0
   1944c:	eb1b 0b08 	adds.w	fp, fp, r8
   19450:	f04f 0800 	mov.w	r8, #0
   19454:	eb48 0808 	adc.w	r8, r8, r8
   19458:	fbe3 b800 	umlal	fp, r8, r3, r0
   1945c:	eb1c 0c08 	adds.w	ip, ip, r8
   19460:	f04f 0800 	mov.w	r8, #0
   19464:	eb48 0808 	adc.w	r8, r8, r8
   19468:	fbe4 c800 	umlal	ip, r8, r4, r0
   1946c:	ee13 0a10 	vmov	r0, s6
   19470:	eb1e 0e08 	adds.w	lr, lr, r8
   19474:	f04f 0800 	mov.w	r8, #0
   19478:	eb48 0808 	adc.w	r8, r8, r8
   1947c:	fbe1 e800 	umlal	lr, r8, r1, r0
   19480:	eb15 0508 	adds.w	r5, r5, r8
   19484:	f04f 0800 	mov.w	r8, #0
   19488:	eb48 0808 	adc.w	r8, r8, r8
   1948c:	fbe2 5800 	umlal	r5, r8, r2, r0
   19490:	eb16 0608 	adds.w	r6, r6, r8
   19494:	f04f 0800 	mov.w	r8, #0
   19498:	eb48 0808 	adc.w	r8, r8, r8
   1949c:	fbe3 6800 	umlal	r6, r8, r3, r0
   194a0:	eb17 0708 	adds.w	r7, r7, r8
   194a4:	f04f 0800 	mov.w	r8, #0
   194a8:	eb48 0808 	adc.w	r8, r8, r8
   194ac:	fbe4 7800 	umlal	r7, r8, r4, r0
   194b0:	ee06 9a10 	vmov	s12, r9
   194b4:	ee11 0a90 	vmov	r0, s3
   194b8:	f04f 0900 	mov.w	r9, #0
   194bc:	fbe1 a900 	umlal	sl, r9, r1, r0
   194c0:	eb1b 0b09 	adds.w	fp, fp, r9
   194c4:	f04f 0900 	mov.w	r9, #0
   194c8:	eb49 0909 	adc.w	r9, r9, r9
   194cc:	fbe2 b900 	umlal	fp, r9, r2, r0
   194d0:	eb1c 0c09 	adds.w	ip, ip, r9
   194d4:	f04f 0900 	mov.w	r9, #0
   194d8:	eb49 0909 	adc.w	r9, r9, r9
   194dc:	fbe3 c900 	umlal	ip, r9, r3, r0
   194e0:	eb1e 0e09 	adds.w	lr, lr, r9
   194e4:	f04f 0900 	mov.w	r9, #0
   194e8:	eb49 0909 	adc.w	r9, r9, r9
   194ec:	fbe4 e900 	umlal	lr, r9, r4, r0
   194f0:	ee13 0a90 	vmov	r0, s7
   194f4:	eb15 0509 	adds.w	r5, r5, r9
   194f8:	f04f 0900 	mov.w	r9, #0
   194fc:	eb49 0909 	adc.w	r9, r9, r9
   19500:	fbe1 5900 	umlal	r5, r9, r1, r0
   19504:	eb16 0609 	adds.w	r6, r6, r9
   19508:	f04f 0900 	mov.w	r9, #0
   1950c:	eb49 0909 	adc.w	r9, r9, r9
   19510:	fbe2 6900 	umlal	r6, r9, r2, r0
   19514:	eb17 0709 	adds.w	r7, r7, r9
   19518:	f04f 0900 	mov.w	r9, #0
   1951c:	eb49 0909 	adc.w	r9, r9, r9
   19520:	fbe3 7900 	umlal	r7, r9, r3, r0
   19524:	eb18 0809 	adds.w	r8, r8, r9
   19528:	f04f 0900 	mov.w	r9, #0
   1952c:	eb49 0909 	adc.w	r9, r9, r9
   19530:	fbe4 8900 	umlal	r8, r9, r4, r0
   19534:	ee06 aa90 	vmov	s13, sl
   19538:	ee14 1a90 	vmov	r1, s9
   1953c:	f101 0110 	add.w	r1, r1, #16
   19540:	c91e      	ldmia	r1, {r1, r2, r3, r4}
   19542:	ee10 0a10 	vmov	r0, s0
   19546:	f04f 0a00 	mov.w	sl, #0
   1954a:	fbe1 ba00 	umlal	fp, sl, r1, r0
   1954e:	eb1c 0c0a 	adds.w	ip, ip, sl
   19552:	f04f 0a00 	mov.w	sl, #0
   19556:	eb4a 0a0a 	adc.w	sl, sl, sl
   1955a:	fbe2 ca00 	umlal	ip, sl, r2, r0
   1955e:	eb1e 0e0a 	adds.w	lr, lr, sl
   19562:	f04f 0a00 	mov.w	sl, #0
   19566:	eb4a 0a0a 	adc.w	sl, sl, sl
   1956a:	fbe3 ea00 	umlal	lr, sl, r3, r0
   1956e:	eb15 050a 	adds.w	r5, r5, sl
   19572:	f04f 0a00 	mov.w	sl, #0
   19576:	eb4a 0a0a 	adc.w	sl, sl, sl
   1957a:	fbe4 5a00 	umlal	r5, sl, r4, r0
   1957e:	ee12 0a10 	vmov	r0, s4
   19582:	eb16 060a 	adds.w	r6, r6, sl
   19586:	f04f 0a00 	mov.w	sl, #0
   1958a:	eb4a 0a0a 	adc.w	sl, sl, sl
   1958e:	fbe1 6a00 	umlal	r6, sl, r1, r0
   19592:	eb17 070a 	adds.w	r7, r7, sl
   19596:	f04f 0a00 	mov.w	sl, #0
   1959a:	eb4a 0a0a 	adc.w	sl, sl, sl
   1959e:	fbe2 7a00 	umlal	r7, sl, r2, r0
   195a2:	eb18 080a 	adds.w	r8, r8, sl
   195a6:	f04f 0a00 	mov.w	sl, #0
   195aa:	eb4a 0a0a 	adc.w	sl, sl, sl
   195ae:	fbe3 8a00 	umlal	r8, sl, r3, r0
   195b2:	eb19 090a 	adds.w	r9, r9, sl
   195b6:	f04f 0a00 	mov.w	sl, #0
   195ba:	eb4a 0a0a 	adc.w	sl, sl, sl
   195be:	fbe4 9a00 	umlal	r9, sl, r4, r0
   195c2:	ee07 ba10 	vmov	s14, fp
   195c6:	ee10 0a90 	vmov	r0, s1
   195ca:	f04f 0b00 	mov.w	fp, #0
   195ce:	fbe1 cb00 	umlal	ip, fp, r1, r0
   195d2:	eb1e 0e0b 	adds.w	lr, lr, fp
   195d6:	f04f 0b00 	mov.w	fp, #0
   195da:	eb4b 0b0b 	adc.w	fp, fp, fp
   195de:	fbe2 eb00 	umlal	lr, fp, r2, r0
   195e2:	eb15 050b 	adds.w	r5, r5, fp
   195e6:	f04f 0b00 	mov.w	fp, #0
   195ea:	eb4b 0b0b 	adc.w	fp, fp, fp
   195ee:	fbe3 5b00 	umlal	r5, fp, r3, r0
   195f2:	eb16 060b 	adds.w	r6, r6, fp
   195f6:	f04f 0b00 	mov.w	fp, #0
   195fa:	eb4b 0b0b 	adc.w	fp, fp, fp
   195fe:	fbe4 6b00 	umlal	r6, fp, r4, r0
   19602:	ee12 0a90 	vmov	r0, s5
   19606:	eb17 070b 	adds.w	r7, r7, fp
   1960a:	f04f 0b00 	mov.w	fp, #0
   1960e:	eb4b 0b0b 	adc.w	fp, fp, fp
   19612:	fbe1 7b00 	umlal	r7, fp, r1, r0
   19616:	eb18 080b 	adds.w	r8, r8, fp
   1961a:	f04f 0b00 	mov.w	fp, #0
   1961e:	eb4b 0b0b 	adc.w	fp, fp, fp
   19622:	fbe2 8b00 	umlal	r8, fp, r2, r0
   19626:	eb19 090b 	adds.w	r9, r9, fp
   1962a:	f04f 0b00 	mov.w	fp, #0
   1962e:	eb4b 0b0b 	adc.w	fp, fp, fp
   19632:	fbe3 9b00 	umlal	r9, fp, r3, r0
   19636:	eb1a 0a0b 	adds.w	sl, sl, fp
   1963a:	f04f 0b00 	mov.w	fp, #0
   1963e:	eb4b 0b0b 	adc.w	fp, fp, fp
   19642:	fbe4 ab00 	umlal	sl, fp, r4, r0
   19646:	ee07 ca90 	vmov	s15, ip
   1964a:	ee11 0a10 	vmov	r0, s2
   1964e:	f04f 0c00 	mov.w	ip, #0
   19652:	fbe1 ec00 	umlal	lr, ip, r1, r0
   19656:	eb15 050c 	adds.w	r5, r5, ip
   1965a:	f04f 0c00 	mov.w	ip, #0
   1965e:	eb4c 0c0c 	adc.w	ip, ip, ip
   19662:	fbe2 5c00 	umlal	r5, ip, r2, r0
   19666:	eb16 060c 	adds.w	r6, r6, ip
   1966a:	f04f 0c00 	mov.w	ip, #0
   1966e:	eb4c 0c0c 	adc.w	ip, ip, ip
   19672:	fbe3 6c00 	umlal	r6, ip, r3, r0
   19676:	eb17 070c 	adds.w	r7, r7, ip
   1967a:	f04f 0c00 	mov.w	ip, #0
   1967e:	eb4c 0c0c 	adc.w	ip, ip, ip
   19682:	fbe4 7c00 	umlal	r7, ip, r4, r0
   19686:	ee13 0a10 	vmov	r0, s6
   1968a:	eb18 080c 	adds.w	r8, r8, ip
   1968e:	f04f 0c00 	mov.w	ip, #0
   19692:	eb4c 0c0c 	adc.w	ip, ip, ip
   19696:	fbe1 8c00 	umlal	r8, ip, r1, r0
   1969a:	eb19 090c 	adds.w	r9, r9, ip
   1969e:	f04f 0c00 	mov.w	ip, #0
   196a2:	eb4c 0c0c 	adc.w	ip, ip, ip
   196a6:	fbe2 9c00 	umlal	r9, ip, r2, r0
   196aa:	eb1a 0a0c 	adds.w	sl, sl, ip
   196ae:	f04f 0c00 	mov.w	ip, #0
   196b2:	eb4c 0c0c 	adc.w	ip, ip, ip
   196b6:	fbe3 ac00 	umlal	sl, ip, r3, r0
   196ba:	eb1b 0b0c 	adds.w	fp, fp, ip
   196be:	f04f 0c00 	mov.w	ip, #0
   196c2:	eb4c 0c0c 	adc.w	ip, ip, ip
   196c6:	fbe4 bc00 	umlal	fp, ip, r4, r0
   196ca:	ee08 ea10 	vmov	s16, lr
   196ce:	ee11 0a90 	vmov	r0, s3
   196d2:	f04f 0e00 	mov.w	lr, #0
   196d6:	fbe1 5e00 	umlal	r5, lr, r1, r0
   196da:	eb16 060e 	adds.w	r6, r6, lr
   196de:	f04f 0e00 	mov.w	lr, #0
   196e2:	eb4e 0e0e 	adc.w	lr, lr, lr
   196e6:	fbe2 6e00 	umlal	r6, lr, r2, r0
   196ea:	eb17 070e 	adds.w	r7, r7, lr
   196ee:	f04f 0e00 	mov.w	lr, #0
   196f2:	eb4e 0e0e 	adc.w	lr, lr, lr
   196f6:	fbe3 7e00 	umlal	r7, lr, r3, r0
   196fa:	eb18 080e 	adds.w	r8, r8, lr
   196fe:	f04f 0e00 	mov.w	lr, #0
   19702:	eb4e 0e0e 	adc.w	lr, lr, lr
   19706:	fbe4 8e00 	umlal	r8, lr, r4, r0
   1970a:	ee13 0a90 	vmov	r0, s7
   1970e:	eb19 090e 	adds.w	r9, r9, lr
   19712:	f04f 0e00 	mov.w	lr, #0
   19716:	eb4e 0e0e 	adc.w	lr, lr, lr
   1971a:	fbe1 9e00 	umlal	r9, lr, r1, r0
   1971e:	eb1a 0a0e 	adds.w	sl, sl, lr
   19722:	f04f 0e00 	mov.w	lr, #0
   19726:	eb4e 0e0e 	adc.w	lr, lr, lr
   1972a:	fbe2 ae00 	umlal	sl, lr, r2, r0
   1972e:	eb1b 0b0e 	adds.w	fp, fp, lr
   19732:	f04f 0e00 	mov.w	lr, #0
   19736:	eb4e 0e0e 	adc.w	lr, lr, lr
   1973a:	fbe3 be00 	umlal	fp, lr, r3, r0
   1973e:	eb1c 0c0e 	adds.w	ip, ip, lr
   19742:	f04f 0e00 	mov.w	lr, #0
   19746:	eb4e 0e0e 	adc.w	lr, lr, lr
   1974a:	fbe4 ce00 	umlal	ip, lr, r4, r0
   1974e:	ee14 0a10 	vmov	r0, s8
   19752:	eca0 5a07 	vstmia	r0!, {s10-s16}
   19756:	e880 5fe0 	stmia.w	r0, {r5, r6, r7, r8, r9, sl, fp, ip, lr}
   1975a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1975e:	bf00      	nop

00019760 <ocrypto_constant_time_equal>:
   19760:	b430      	push	{r4, r5}
   19762:	f04f 0300 	mov.w	r3, #0

00019766 <constant_time_equal_loop>:
   19766:	f810 4b01 	ldrb.w	r4, [r0], #1
   1976a:	f811 5b01 	ldrb.w	r5, [r1], #1
   1976e:	3a01      	subs	r2, #1
   19770:	ea84 0405 	eor.w	r4, r4, r5
   19774:	ea43 0304 	orr.w	r3, r3, r4
   19778:	d1f5      	bne.n	19766 <constant_time_equal_loop>
   1977a:	f1a3 0301 	sub.w	r3, r3, #1
   1977e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
   19782:	bc30      	pop	{r4, r5}
   19784:	4770      	bx	lr

00019786 <ocrypto_constant_time_is_zero>:
   19786:	f04f 0300 	mov.w	r3, #0

0001978a <constant_time_is_zero_loop>:
   1978a:	f810 2b01 	ldrb.w	r2, [r0], #1
   1978e:	3901      	subs	r1, #1
   19790:	ea43 0302 	orr.w	r3, r3, r2
   19794:	d1f9      	bne.n	1978a <constant_time_is_zero_loop>
   19796:	f1a3 0301 	sub.w	r3, r3, #1
   1979a:	ea4f 70d3 	mov.w	r0, r3, lsr #31
   1979e:	4770      	bx	lr

000197a0 <ocrypto_constant_time_copy>:
   197a0:	f811 3b01 	ldrb.w	r3, [r1], #1
   197a4:	f800 3b01 	strb.w	r3, [r0], #1
   197a8:	3a01      	subs	r2, #1
   197aa:	d1f9      	bne.n	197a0 <ocrypto_constant_time_copy>
   197ac:	4770      	bx	lr

000197ae <ocrypto_constant_time_fill_zero>:
   197ae:	2200      	movs	r2, #0

000197b0 <constant_time_fill_zero_loop>:
   197b0:	f800 2b01 	strb.w	r2, [r0], #1
   197b4:	3901      	subs	r1, #1
   197b6:	d1fb      	bne.n	197b0 <constant_time_fill_zero_loop>
   197b8:	4770      	bx	lr
   197ba:	bf00      	nop

000197bc <ocrypto_mod_p256_add>:
   197bc:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   197c0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
   197c4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   197c8:	185b      	adds	r3, r3, r1
   197ca:	eb54 040c 	adcs.w	r4, r4, ip
   197ce:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   197d2:	414d      	adcs	r5, r1
   197d4:	eb56 060c 	adcs.w	r6, r6, ip
   197d8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   197dc:	414f      	adcs	r7, r1
   197de:	eb58 080c 	adcs.w	r8, r8, ip
   197e2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   197e6:	eb59 0901 	adcs.w	r9, r9, r1
   197ea:	eb5a 0a0c 	adcs.w	sl, sl, ip
   197ee:	4189      	sbcs	r1, r1
   197f0:	f1b3 33ff 	subs.w	r3, r3, #4294967295	; 0xffffffff
   197f4:	f174 34ff 	sbcs.w	r4, r4, #4294967295	; 0xffffffff
   197f8:	f175 35ff 	sbcs.w	r5, r5, #4294967295	; 0xffffffff
   197fc:	f176 0600 	sbcs.w	r6, r6, #0
   19800:	f177 0700 	sbcs.w	r7, r7, #0
   19804:	f178 0800 	sbcs.w	r8, r8, #0
   19808:	f179 0901 	sbcs.w	r9, r9, #1
   1980c:	f17a 3aff 	sbcs.w	sl, sl, #4294967295	; 0xffffffff
   19810:	f151 0100 	adcs.w	r1, r1, #0
   19814:	424a      	negs	r2, r1
   19816:	185b      	adds	r3, r3, r1
   19818:	414c      	adcs	r4, r1
   1981a:	414d      	adcs	r5, r1
   1981c:	f156 0600 	adcs.w	r6, r6, #0
   19820:	f157 0700 	adcs.w	r7, r7, #0
   19824:	f158 0800 	adcs.w	r8, r8, #0
   19828:	eb59 0902 	adcs.w	r9, r9, r2
   1982c:	eb5a 0a01 	adcs.w	sl, sl, r1
   19830:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
   19834:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19838:	4770      	bx	lr

0001983a <ocrypto_mod_p256_sub>:
   1983a:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
   1983e:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
   19842:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19846:	1a5b      	subs	r3, r3, r1
   19848:	eb74 040c 	sbcs.w	r4, r4, ip
   1984c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19850:	418d      	sbcs	r5, r1
   19852:	eb76 060c 	sbcs.w	r6, r6, ip
   19856:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   1985a:	418f      	sbcs	r7, r1
   1985c:	eb78 080c 	sbcs.w	r8, r8, ip
   19860:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
   19864:	eb79 0901 	sbcs.w	r9, r9, r1
   19868:	eb7a 0a0c 	sbcs.w	sl, sl, ip
   1986c:	4189      	sbcs	r1, r1
   1986e:	424a      	negs	r2, r1
   19870:	185b      	adds	r3, r3, r1
   19872:	414c      	adcs	r4, r1
   19874:	414d      	adcs	r5, r1
   19876:	f156 0600 	adcs.w	r6, r6, #0
   1987a:	f157 0700 	adcs.w	r7, r7, #0
   1987e:	f158 0800 	adcs.w	r8, r8, #0
   19882:	eb59 0902 	adcs.w	r9, r9, r2
   19886:	eb5a 0a01 	adcs.w	sl, sl, r1
   1988a:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
   1988e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
   19892:	4770      	bx	lr

00019894 <ocrypto_mod_p256_square>:
   19894:	460a      	mov	r2, r1

00019896 <ocrypto_mod_p256_mul>:
   19896:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1989a:	ec41 0a14 	vmov	s8, s9, r0, r1
   1989e:	ec92 0a08 	vldmia	r2, {s0-s7}
   198a2:	c91e      	ldmia	r1, {r1, r2, r3, r4}
   198a4:	ee10 0a10 	vmov	r0, s0
   198a8:	fba1 7800 	umull	r7, r8, r1, r0
   198ac:	f04f 0900 	mov.w	r9, #0
   198b0:	fbe2 8900 	umlal	r8, r9, r2, r0
   198b4:	f04f 0a00 	mov.w	sl, #0
   198b8:	fbe3 9a00 	umlal	r9, sl, r3, r0
   198bc:	f04f 0b00 	mov.w	fp, #0
   198c0:	fbe4 ab00 	umlal	sl, fp, r4, r0
   198c4:	ee12 0a10 	vmov	r0, s4
   198c8:	f04f 0c00 	mov.w	ip, #0
   198cc:	fbe1 bc00 	umlal	fp, ip, r1, r0
   198d0:	f04f 0e00 	mov.w	lr, #0
   198d4:	fbe2 ce00 	umlal	ip, lr, r2, r0
   198d8:	f04f 0500 	mov.w	r5, #0
   198dc:	fbe3 e500 	umlal	lr, r5, r3, r0
   198e0:	f04f 0600 	mov.w	r6, #0
   198e4:	fbe4 5600 	umlal	r5, r6, r4, r0
   198e8:	ee05 7a10 	vmov	s10, r7
   198ec:	ee10 0a90 	vmov	r0, s1
   198f0:	f04f 0700 	mov.w	r7, #0
   198f4:	fbe1 8700 	umlal	r8, r7, r1, r0
   198f8:	eb19 0907 	adds.w	r9, r9, r7
   198fc:	f04f 0700 	mov.w	r7, #0
   19900:	eb47 0707 	adc.w	r7, r7, r7
   19904:	fbe2 9700 	umlal	r9, r7, r2, r0
   19908:	eb1a 0a07 	adds.w	sl, sl, r7
   1990c:	f04f 0700 	mov.w	r7, #0
   19910:	eb47 0707 	adc.w	r7, r7, r7
   19914:	fbe3 a700 	umlal	sl, r7, r3, r0
   19918:	eb1b 0b07 	adds.w	fp, fp, r7
   1991c:	f04f 0700 	mov.w	r7, #0
   19920:	eb47 0707 	adc.w	r7, r7, r7
   19924:	fbe4 b700 	umlal	fp, r7, r4, r0
   19928:	ee12 0a90 	vmov	r0, s5
   1992c:	eb1c 0c07 	adds.w	ip, ip, r7
   19930:	f04f 0700 	mov.w	r7, #0
   19934:	eb47 0707 	adc.w	r7, r7, r7
   19938:	fbe1 c700 	umlal	ip, r7, r1, r0
   1993c:	eb1e 0e07 	adds.w	lr, lr, r7
   19940:	f04f 0700 	mov.w	r7, #0
   19944:	eb47 0707 	adc.w	r7, r7, r7
   19948:	fbe2 e700 	umlal	lr, r7, r2, r0
   1994c:	19ed      	adds	r5, r5, r7
   1994e:	f04f 0700 	mov.w	r7, #0
   19952:	eb47 0707 	adc.w	r7, r7, r7
   19956:	fbe3 5700 	umlal	r5, r7, r3, r0
   1995a:	19f6      	adds	r6, r6, r7
   1995c:	f04f 0700 	mov.w	r7, #0
   19960:	eb47 0707 	adc.w	r7, r7, r7
   19964:	fbe4 6700 	umlal	r6, r7, r4, r0
   19968:	ee05 8a90 	vmov	s11, r8
   1996c:	ee11 0a10 	vmov	r0, s2
   19970:	f04f 0800 	mov.w	r8, #0
   19974:	fbe1 9800 	umlal	r9, r8, r1, r0
   19978:	eb1a 0a08 	adds.w	sl, sl, r8
   1997c:	f04f 0800 	mov.w	r8, #0
   19980:	eb48 0808 	adc.w	r8, r8, r8
   19984:	fbe2 a800 	umlal	sl, r8, r2, r0
   19988:	eb1b 0b08 	adds.w	fp, fp, r8
   1998c:	f04f 0800 	mov.w	r8, #0
   19990:	eb48 0808 	adc.w	r8, r8, r8
   19994:	fbe3 b800 	umlal	fp, r8, r3, r0
   19998:	eb1c 0c08 	adds.w	ip, ip, r8
   1999c:	f04f 0800 	mov.w	r8, #0
   199a0:	eb48 0808 	adc.w	r8, r8, r8
   199a4:	fbe4 c800 	umlal	ip, r8, r4, r0
   199a8:	ee13 0a10 	vmov	r0, s6
   199ac:	eb1e 0e08 	adds.w	lr, lr, r8
   199b0:	f04f 0800 	mov.w	r8, #0
   199b4:	eb48 0808 	adc.w	r8, r8, r8
   199b8:	fbe1 e800 	umlal	lr, r8, r1, r0
   199bc:	eb15 0508 	adds.w	r5, r5, r8
   199c0:	f04f 0800 	mov.w	r8, #0
   199c4:	eb48 0808 	adc.w	r8, r8, r8
   199c8:	fbe2 5800 	umlal	r5, r8, r2, r0
   199cc:	eb16 0608 	adds.w	r6, r6, r8
   199d0:	f04f 0800 	mov.w	r8, #0
   199d4:	eb48 0808 	adc.w	r8, r8, r8
   199d8:	fbe3 6800 	umlal	r6, r8, r3, r0
   199dc:	eb17 0708 	adds.w	r7, r7, r8
   199e0:	f04f 0800 	mov.w	r8, #0
   199e4:	eb48 0808 	adc.w	r8, r8, r8
   199e8:	fbe4 7800 	umlal	r7, r8, r4, r0
   199ec:	ee06 9a10 	vmov	s12, r9
   199f0:	ee11 0a90 	vmov	r0, s3
   199f4:	f04f 0900 	mov.w	r9, #0
   199f8:	fbe1 a900 	umlal	sl, r9, r1, r0
   199fc:	eb1b 0b09 	adds.w	fp, fp, r9
   19a00:	f04f 0900 	mov.w	r9, #0
   19a04:	eb49 0909 	adc.w	r9, r9, r9
   19a08:	fbe2 b900 	umlal	fp, r9, r2, r0
   19a0c:	eb1c 0c09 	adds.w	ip, ip, r9
   19a10:	f04f 0900 	mov.w	r9, #0
   19a14:	eb49 0909 	adc.w	r9, r9, r9
   19a18:	fbe3 c900 	umlal	ip, r9, r3, r0
   19a1c:	eb1e 0e09 	adds.w	lr, lr, r9
   19a20:	f04f 0900 	mov.w	r9, #0
   19a24:	eb49 0909 	adc.w	r9, r9, r9
   19a28:	fbe4 e900 	umlal	lr, r9, r4, r0
   19a2c:	ee13 0a90 	vmov	r0, s7
   19a30:	eb15 0509 	adds.w	r5, r5, r9
   19a34:	f04f 0900 	mov.w	r9, #0
   19a38:	eb49 0909 	adc.w	r9, r9, r9
   19a3c:	fbe1 5900 	umlal	r5, r9, r1, r0
   19a40:	eb16 0609 	adds.w	r6, r6, r9
   19a44:	f04f 0900 	mov.w	r9, #0
   19a48:	eb49 0909 	adc.w	r9, r9, r9
   19a4c:	fbe2 6900 	umlal	r6, r9, r2, r0
   19a50:	eb17 0709 	adds.w	r7, r7, r9
   19a54:	f04f 0900 	mov.w	r9, #0
   19a58:	eb49 0909 	adc.w	r9, r9, r9
   19a5c:	fbe3 7900 	umlal	r7, r9, r3, r0
   19a60:	eb18 0809 	adds.w	r8, r8, r9
   19a64:	f04f 0900 	mov.w	r9, #0
   19a68:	eb49 0909 	adc.w	r9, r9, r9
   19a6c:	fbe4 8900 	umlal	r8, r9, r4, r0
   19a70:	ee06 aa90 	vmov	s13, sl
   19a74:	ee14 1a90 	vmov	r1, s9
   19a78:	f101 0110 	add.w	r1, r1, #16
   19a7c:	c91e      	ldmia	r1, {r1, r2, r3, r4}
   19a7e:	ee10 0a10 	vmov	r0, s0
   19a82:	f04f 0a00 	mov.w	sl, #0
   19a86:	fbe1 ba00 	umlal	fp, sl, r1, r0
   19a8a:	eb1c 0c0a 	adds.w	ip, ip, sl
   19a8e:	f04f 0a00 	mov.w	sl, #0
   19a92:	eb4a 0a0a 	adc.w	sl, sl, sl
   19a96:	fbe2 ca00 	umlal	ip, sl, r2, r0
   19a9a:	eb1e 0e0a 	adds.w	lr, lr, sl
   19a9e:	f04f 0a00 	mov.w	sl, #0
   19aa2:	eb4a 0a0a 	adc.w	sl, sl, sl
   19aa6:	fbe3 ea00 	umlal	lr, sl, r3, r0
   19aaa:	eb15 050a 	adds.w	r5, r5, sl
   19aae:	f04f 0a00 	mov.w	sl, #0
   19ab2:	eb4a 0a0a 	adc.w	sl, sl, sl
   19ab6:	fbe4 5a00 	umlal	r5, sl, r4, r0
   19aba:	ee12 0a10 	vmov	r0, s4
   19abe:	eb16 060a 	adds.w	r6, r6, sl
   19ac2:	f04f 0a00 	mov.w	sl, #0
   19ac6:	eb4a 0a0a 	adc.w	sl, sl, sl
   19aca:	fbe1 6a00 	umlal	r6, sl, r1, r0
   19ace:	eb17 070a 	adds.w	r7, r7, sl
   19ad2:	f04f 0a00 	mov.w	sl, #0
   19ad6:	eb4a 0a0a 	adc.w	sl, sl, sl
   19ada:	fbe2 7a00 	umlal	r7, sl, r2, r0
   19ade:	eb18 080a 	adds.w	r8, r8, sl
   19ae2:	f04f 0a00 	mov.w	sl, #0
   19ae6:	eb4a 0a0a 	adc.w	sl, sl, sl
   19aea:	fbe3 8a00 	umlal	r8, sl, r3, r0
   19aee:	eb19 090a 	adds.w	r9, r9, sl
   19af2:	f04f 0a00 	mov.w	sl, #0
   19af6:	eb4a 0a0a 	adc.w	sl, sl, sl
   19afa:	fbe4 9a00 	umlal	r9, sl, r4, r0
   19afe:	ee07 ba10 	vmov	s14, fp
   19b02:	ee10 0a90 	vmov	r0, s1
   19b06:	f04f 0b00 	mov.w	fp, #0
   19b0a:	fbe1 cb00 	umlal	ip, fp, r1, r0
   19b0e:	eb1e 0e0b 	adds.w	lr, lr, fp
   19b12:	f04f 0b00 	mov.w	fp, #0
   19b16:	eb4b 0b0b 	adc.w	fp, fp, fp
   19b1a:	fbe2 eb00 	umlal	lr, fp, r2, r0
   19b1e:	eb15 050b 	adds.w	r5, r5, fp
   19b22:	f04f 0b00 	mov.w	fp, #0
   19b26:	eb4b 0b0b 	adc.w	fp, fp, fp
   19b2a:	fbe3 5b00 	umlal	r5, fp, r3, r0
   19b2e:	eb16 060b 	adds.w	r6, r6, fp
   19b32:	f04f 0b00 	mov.w	fp, #0
   19b36:	eb4b 0b0b 	adc.w	fp, fp, fp
   19b3a:	fbe4 6b00 	umlal	r6, fp, r4, r0
   19b3e:	ee12 0a90 	vmov	r0, s5
   19b42:	eb17 070b 	adds.w	r7, r7, fp
   19b46:	f04f 0b00 	mov.w	fp, #0
   19b4a:	eb4b 0b0b 	adc.w	fp, fp, fp
   19b4e:	fbe1 7b00 	umlal	r7, fp, r1, r0
   19b52:	eb18 080b 	adds.w	r8, r8, fp
   19b56:	f04f 0b00 	mov.w	fp, #0
   19b5a:	eb4b 0b0b 	adc.w	fp, fp, fp
   19b5e:	fbe2 8b00 	umlal	r8, fp, r2, r0
   19b62:	eb19 090b 	adds.w	r9, r9, fp
   19b66:	f04f 0b00 	mov.w	fp, #0
   19b6a:	eb4b 0b0b 	adc.w	fp, fp, fp
   19b6e:	fbe3 9b00 	umlal	r9, fp, r3, r0
   19b72:	eb1a 0a0b 	adds.w	sl, sl, fp
   19b76:	f04f 0b00 	mov.w	fp, #0
   19b7a:	eb4b 0b0b 	adc.w	fp, fp, fp
   19b7e:	fbe4 ab00 	umlal	sl, fp, r4, r0
   19b82:	ee07 ca90 	vmov	s15, ip
   19b86:	ee11 0a10 	vmov	r0, s2
   19b8a:	f04f 0c00 	mov.w	ip, #0
   19b8e:	fbe1 ec00 	umlal	lr, ip, r1, r0
   19b92:	eb15 050c 	adds.w	r5, r5, ip
   19b96:	f04f 0c00 	mov.w	ip, #0
   19b9a:	eb4c 0c0c 	adc.w	ip, ip, ip
   19b9e:	fbe2 5c00 	umlal	r5, ip, r2, r0
   19ba2:	eb16 060c 	adds.w	r6, r6, ip
   19ba6:	f04f 0c00 	mov.w	ip, #0
   19baa:	eb4c 0c0c 	adc.w	ip, ip, ip
   19bae:	fbe3 6c00 	umlal	r6, ip, r3, r0
   19bb2:	eb17 070c 	adds.w	r7, r7, ip
   19bb6:	f04f 0c00 	mov.w	ip, #0
   19bba:	eb4c 0c0c 	adc.w	ip, ip, ip
   19bbe:	fbe4 7c00 	umlal	r7, ip, r4, r0
   19bc2:	ee13 0a10 	vmov	r0, s6
   19bc6:	eb18 080c 	adds.w	r8, r8, ip
   19bca:	f04f 0c00 	mov.w	ip, #0
   19bce:	eb4c 0c0c 	adc.w	ip, ip, ip
   19bd2:	fbe1 8c00 	umlal	r8, ip, r1, r0
   19bd6:	eb19 090c 	adds.w	r9, r9, ip
   19bda:	f04f 0c00 	mov.w	ip, #0
   19bde:	eb4c 0c0c 	adc.w	ip, ip, ip
   19be2:	fbe2 9c00 	umlal	r9, ip, r2, r0
   19be6:	eb1a 0a0c 	adds.w	sl, sl, ip
   19bea:	f04f 0c00 	mov.w	ip, #0
   19bee:	eb4c 0c0c 	adc.w	ip, ip, ip
   19bf2:	fbe3 ac00 	umlal	sl, ip, r3, r0
   19bf6:	eb1b 0b0c 	adds.w	fp, fp, ip
   19bfa:	f04f 0c00 	mov.w	ip, #0
   19bfe:	eb4c 0c0c 	adc.w	ip, ip, ip
   19c02:	fbe4 bc00 	umlal	fp, ip, r4, r0
   19c06:	ee08 ea10 	vmov	s16, lr
   19c0a:	ee11 0a90 	vmov	r0, s3
   19c0e:	f04f 0e00 	mov.w	lr, #0
   19c12:	fbe1 5e00 	umlal	r5, lr, r1, r0
   19c16:	eb16 060e 	adds.w	r6, r6, lr
   19c1a:	f04f 0e00 	mov.w	lr, #0
   19c1e:	eb4e 0e0e 	adc.w	lr, lr, lr
   19c22:	fbe2 6e00 	umlal	r6, lr, r2, r0
   19c26:	eb17 070e 	adds.w	r7, r7, lr
   19c2a:	f04f 0e00 	mov.w	lr, #0
   19c2e:	eb4e 0e0e 	adc.w	lr, lr, lr
   19c32:	fbe3 7e00 	umlal	r7, lr, r3, r0
   19c36:	eb18 080e 	adds.w	r8, r8, lr
   19c3a:	f04f 0e00 	mov.w	lr, #0
   19c3e:	eb4e 0e0e 	adc.w	lr, lr, lr
   19c42:	fbe4 8e00 	umlal	r8, lr, r4, r0
   19c46:	ee13 0a90 	vmov	r0, s7
   19c4a:	eb19 090e 	adds.w	r9, r9, lr
   19c4e:	f04f 0e00 	mov.w	lr, #0
   19c52:	eb4e 0e0e 	adc.w	lr, lr, lr
   19c56:	fbe1 9e00 	umlal	r9, lr, r1, r0
   19c5a:	eb1a 0a0e 	adds.w	sl, sl, lr
   19c5e:	f04f 0e00 	mov.w	lr, #0
   19c62:	eb4e 0e0e 	adc.w	lr, lr, lr
   19c66:	fbe2 ae00 	umlal	sl, lr, r2, r0
   19c6a:	eb1b 0b0e 	adds.w	fp, fp, lr
   19c6e:	f04f 0e00 	mov.w	lr, #0
   19c72:	eb4e 0e0e 	adc.w	lr, lr, lr
   19c76:	fbe3 be00 	umlal	fp, lr, r3, r0
   19c7a:	eb1c 0c0e 	adds.w	ip, ip, lr
   19c7e:	f04f 0e00 	mov.w	lr, #0
   19c82:	eb4e 0e0e 	adc.w	lr, lr, lr
   19c86:	fbe4 ce00 	umlal	ip, lr, r4, r0
   19c8a:	ec53 2a17 	vmov	r2, r3, s14, s15
   19c8e:	ee18 4a10 	vmov	r4, s16
   19c92:	eb12 020a 	adds.w	r2, r2, sl
   19c96:	eb53 030b 	adcs.w	r3, r3, fp
   19c9a:	eb54 040c 	adcs.w	r4, r4, ip
   19c9e:	eb55 050e 	adcs.w	r5, r5, lr
   19ca2:	2000      	movs	r0, #0
   19ca4:	f140 0000 	adc.w	r0, r0, #0
   19ca8:	eb12 020b 	adds.w	r2, r2, fp
   19cac:	eb53 030c 	adcs.w	r3, r3, ip
   19cb0:	eb54 040e 	adcs.w	r4, r4, lr
   19cb4:	eb55 050e 	adcs.w	r5, r5, lr
   19cb8:	4146      	adcs	r6, r0
   19cba:	2000      	movs	r0, #0
   19cbc:	4147      	adcs	r7, r0
   19cbe:	eb58 0800 	adcs.w	r8, r8, r0
   19cc2:	eb59 090a 	adcs.w	r9, r9, sl
   19cc6:	f140 0000 	adc.w	r0, r0, #0
   19cca:	ebb2 020e 	subs.w	r2, r2, lr
   19cce:	f173 0300 	sbcs.w	r3, r3, #0
   19cd2:	f174 0400 	sbcs.w	r4, r4, #0
   19cd6:	eb75 050a 	sbcs.w	r5, r5, sl
   19cda:	eb76 060b 	sbcs.w	r6, r6, fp
   19cde:	eb77 070c 	sbcs.w	r7, r7, ip
   19ce2:	eb78 080a 	sbcs.w	r8, r8, sl
   19ce6:	eb79 090c 	sbcs.w	r9, r9, ip
   19cea:	f160 0000 	sbc.w	r0, r0, #0
   19cee:	ebb5 050b 	subs.w	r5, r5, fp
   19cf2:	eb76 060c 	sbcs.w	r6, r6, ip
   19cf6:	eb77 070e 	sbcs.w	r7, r7, lr
   19cfa:	eb78 080b 	sbcs.w	r8, r8, fp
   19cfe:	eb79 090e 	sbcs.w	r9, r9, lr
   19d02:	f160 0000 	sbc.w	r0, r0, #0
   19d06:	ea5f 7ce0 	movs.w	ip, r0, asr #31
   19d0a:	ea7f 0c0c 	mvns.w	ip, ip
   19d0e:	f1dc 0e00 	rsbs	lr, ip, #0
   19d12:	ebb2 020c 	subs.w	r2, r2, ip
   19d16:	eb73 030c 	sbcs.w	r3, r3, ip
   19d1a:	eb74 040c 	sbcs.w	r4, r4, ip
   19d1e:	f175 0500 	sbcs.w	r5, r5, #0
   19d22:	f176 0600 	sbcs.w	r6, r6, #0
   19d26:	f177 0700 	sbcs.w	r7, r7, #0
   19d2a:	eb78 080e 	sbcs.w	r8, r8, lr
   19d2e:	eb79 090c 	sbcs.w	r9, r9, ip
   19d32:	f160 0000 	sbc.w	r0, r0, #0
   19d36:	ea5f 7ce0 	movs.w	ip, r0, asr #31
   19d3a:	f1dc 0e00 	rsbs	lr, ip, #0
   19d3e:	eb12 020c 	adds.w	r2, r2, ip
   19d42:	eb53 030c 	adcs.w	r3, r3, ip
   19d46:	eb54 040c 	adcs.w	r4, r4, ip
   19d4a:	f155 0500 	adcs.w	r5, r5, #0
   19d4e:	f156 0600 	adcs.w	r6, r6, #0
   19d52:	f157 0700 	adcs.w	r7, r7, #0
   19d56:	eb58 080e 	adcs.w	r8, r8, lr
   19d5a:	eb59 090c 	adcs.w	r9, r9, ip
   19d5e:	f140 0000 	adc.w	r0, r0, #0
   19d62:	ea5f 7ce0 	movs.w	ip, r0, asr #31
   19d66:	f1dc 0e00 	rsbs	lr, ip, #0
   19d6a:	eb12 020c 	adds.w	r2, r2, ip
   19d6e:	eb53 030c 	adcs.w	r3, r3, ip
   19d72:	eb54 040c 	adcs.w	r4, r4, ip
   19d76:	f155 0500 	adcs.w	r5, r5, #0
   19d7a:	f156 0600 	adcs.w	r6, r6, #0
   19d7e:	f157 0700 	adcs.w	r7, r7, #0
   19d82:	eb58 080e 	adcs.w	r8, r8, lr
   19d86:	eb59 090c 	adcs.w	r9, r9, ip
   19d8a:	ec5b aa15 	vmov	sl, fp, s10, s11
   19d8e:	ec51 0a16 	vmov	r0, r1, s12, s13
   19d92:	eb1a 0a06 	adds.w	sl, sl, r6
   19d96:	eb5b 0b07 	adcs.w	fp, fp, r7
   19d9a:	eb50 0008 	adcs.w	r0, r0, r8
   19d9e:	eb51 0109 	adcs.w	r1, r1, r9
   19da2:	f05f 0c00 	movs.w	ip, #0
   19da6:	f14c 0c00 	adc.w	ip, ip, #0
   19daa:	eb1a 0a07 	adds.w	sl, sl, r7
   19dae:	eb5b 0b08 	adcs.w	fp, fp, r8
   19db2:	eb50 0009 	adcs.w	r0, r0, r9
   19db6:	eb51 0109 	adcs.w	r1, r1, r9
   19dba:	eb52 020c 	adcs.w	r2, r2, ip
   19dbe:	f05f 0c00 	movs.w	ip, #0
   19dc2:	eb53 030c 	adcs.w	r3, r3, ip
   19dc6:	eb54 040c 	adcs.w	r4, r4, ip
   19dca:	4175      	adcs	r5, r6
   19dcc:	f14c 0c00 	adc.w	ip, ip, #0
   19dd0:	ebba 0a09 	subs.w	sl, sl, r9
   19dd4:	f17b 0b00 	sbcs.w	fp, fp, #0
   19dd8:	f170 0000 	sbcs.w	r0, r0, #0
   19ddc:	41b1      	sbcs	r1, r6
   19dde:	41ba      	sbcs	r2, r7
   19de0:	eb73 0308 	sbcs.w	r3, r3, r8
   19de4:	41b4      	sbcs	r4, r6
   19de6:	eb75 0508 	sbcs.w	r5, r5, r8
   19dea:	f16c 0c00 	sbc.w	ip, ip, #0
   19dee:	1bc9      	subs	r1, r1, r7
   19df0:	eb72 0208 	sbcs.w	r2, r2, r8
   19df4:	eb73 0309 	sbcs.w	r3, r3, r9
   19df8:	41bc      	sbcs	r4, r7
   19dfa:	eb75 0509 	sbcs.w	r5, r5, r9
   19dfe:	f16c 0c00 	sbc.w	ip, ip, #0
   19e02:	ea5f 78ec 	movs.w	r8, ip, asr #31
   19e06:	ea7f 0808 	mvns.w	r8, r8
   19e0a:	f1d8 0900 	rsbs	r9, r8, #0
   19e0e:	ebba 0a08 	subs.w	sl, sl, r8
   19e12:	eb7b 0b08 	sbcs.w	fp, fp, r8
   19e16:	eb70 0008 	sbcs.w	r0, r0, r8
   19e1a:	f171 0100 	sbcs.w	r1, r1, #0
   19e1e:	f172 0200 	sbcs.w	r2, r2, #0
   19e22:	f173 0300 	sbcs.w	r3, r3, #0
   19e26:	eb74 0409 	sbcs.w	r4, r4, r9
   19e2a:	eb75 0508 	sbcs.w	r5, r5, r8
   19e2e:	f16c 0c00 	sbc.w	ip, ip, #0
   19e32:	ea5f 78ec 	movs.w	r8, ip, asr #31
   19e36:	f1d8 0900 	rsbs	r9, r8, #0
   19e3a:	eb1a 0a08 	adds.w	sl, sl, r8
   19e3e:	eb5b 0b08 	adcs.w	fp, fp, r8
   19e42:	eb50 0008 	adcs.w	r0, r0, r8
   19e46:	f151 0100 	adcs.w	r1, r1, #0
   19e4a:	f152 0200 	adcs.w	r2, r2, #0
   19e4e:	f153 0300 	adcs.w	r3, r3, #0
   19e52:	eb54 0409 	adcs.w	r4, r4, r9
   19e56:	eb55 0508 	adcs.w	r5, r5, r8
   19e5a:	f14c 0c00 	adc.w	ip, ip, #0
   19e5e:	ea5f 78ec 	movs.w	r8, ip, asr #31
   19e62:	f1d8 0900 	rsbs	r9, r8, #0
   19e66:	eb1a 0a08 	adds.w	sl, sl, r8
   19e6a:	eb5b 0b08 	adcs.w	fp, fp, r8
   19e6e:	eb50 0008 	adcs.w	r0, r0, r8
   19e72:	f151 0100 	adcs.w	r1, r1, #0
   19e76:	f152 0200 	adcs.w	r2, r2, #0
   19e7a:	f153 0300 	adcs.w	r3, r3, #0
   19e7e:	eb54 0409 	adcs.w	r4, r4, r9
   19e82:	eb55 0508 	adcs.w	r5, r5, r8
   19e86:	ee14 7a10 	vmov	r7, s8
   19e8a:	e8a7 0c00 	stmia.w	r7!, {sl, fp}
   19e8e:	e887 003f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5}
   19e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e96:	bf00      	nop

00019e98 <__aeabi_dcmpun>:
   19e98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   19e9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   19ea0:	d102      	bne.n	19ea8 <__aeabi_dcmpun+0x10>
   19ea2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   19ea6:	d10a      	bne.n	19ebe <__aeabi_dcmpun+0x26>
   19ea8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   19eac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   19eb0:	d102      	bne.n	19eb8 <__aeabi_dcmpun+0x20>
   19eb2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   19eb6:	d102      	bne.n	19ebe <__aeabi_dcmpun+0x26>
   19eb8:	f04f 0000 	mov.w	r0, #0
   19ebc:	4770      	bx	lr
   19ebe:	f04f 0001 	mov.w	r0, #1
   19ec2:	4770      	bx	lr

00019ec4 <__aeabi_d2uiz>:
   19ec4:	004a      	lsls	r2, r1, #1
   19ec6:	d211      	bcs.n	19eec <__aeabi_d2uiz+0x28>
   19ec8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   19ecc:	d211      	bcs.n	19ef2 <__aeabi_d2uiz+0x2e>
   19ece:	d50d      	bpl.n	19eec <__aeabi_d2uiz+0x28>
   19ed0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   19ed4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   19ed8:	d40e      	bmi.n	19ef8 <__aeabi_d2uiz+0x34>
   19eda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   19ede:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   19ee2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   19ee6:	fa23 f002 	lsr.w	r0, r3, r2
   19eea:	4770      	bx	lr
   19eec:	f04f 0000 	mov.w	r0, #0
   19ef0:	4770      	bx	lr
   19ef2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   19ef6:	d102      	bne.n	19efe <__aeabi_d2uiz+0x3a>
   19ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19efc:	4770      	bx	lr
   19efe:	f04f 0000 	mov.w	r0, #0
   19f02:	4770      	bx	lr

00019f04 <__aeabi_d2lz>:
   19f04:	b538      	push	{r3, r4, r5, lr}
   19f06:	2200      	movs	r2, #0
   19f08:	2300      	movs	r3, #0
   19f0a:	4604      	mov	r4, r0
   19f0c:	460d      	mov	r5, r1
   19f0e:	f7fe feb5 	bl	18c7c <__aeabi_dcmplt>
   19f12:	b928      	cbnz	r0, 19f20 <__aeabi_d2lz+0x1c>
   19f14:	4620      	mov	r0, r4
   19f16:	4629      	mov	r1, r5
   19f18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19f1c:	f000 b80a 	b.w	19f34 <__aeabi_d2ulz>
   19f20:	4620      	mov	r0, r4
   19f22:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   19f26:	f000 f805 	bl	19f34 <__aeabi_d2ulz>
   19f2a:	4240      	negs	r0, r0
   19f2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   19f30:	bd38      	pop	{r3, r4, r5, pc}
   19f32:	bf00      	nop

00019f34 <__aeabi_d2ulz>:
   19f34:	b5d0      	push	{r4, r6, r7, lr}
   19f36:	2200      	movs	r2, #0
   19f38:	4b0b      	ldr	r3, [pc, #44]	; (19f68 <__aeabi_d2ulz+0x34>)
   19f3a:	4606      	mov	r6, r0
   19f3c:	460f      	mov	r7, r1
   19f3e:	f7fe fc2b 	bl	18798 <__aeabi_dmul>
   19f42:	f7ff ffbf 	bl	19ec4 <__aeabi_d2uiz>
   19f46:	4604      	mov	r4, r0
   19f48:	f7fe fbac 	bl	186a4 <__aeabi_ui2d>
   19f4c:	2200      	movs	r2, #0
   19f4e:	4b07      	ldr	r3, [pc, #28]	; (19f6c <__aeabi_d2ulz+0x38>)
   19f50:	f7fe fc22 	bl	18798 <__aeabi_dmul>
   19f54:	4602      	mov	r2, r0
   19f56:	460b      	mov	r3, r1
   19f58:	4630      	mov	r0, r6
   19f5a:	4639      	mov	r1, r7
   19f5c:	f7fe fa64 	bl	18428 <__aeabi_dsub>
   19f60:	f7ff ffb0 	bl	19ec4 <__aeabi_d2uiz>
   19f64:	4621      	mov	r1, r4
   19f66:	bdd0      	pop	{r4, r6, r7, pc}
   19f68:	3df00000 	.word	0x3df00000
   19f6c:	41f00000 	.word	0x41f00000

00019f70 <strcmp>:
   19f70:	f810 2b01 	ldrb.w	r2, [r0], #1
   19f74:	f811 3b01 	ldrb.w	r3, [r1], #1
   19f78:	2a01      	cmp	r2, #1
   19f7a:	bf28      	it	cs
   19f7c:	429a      	cmpcs	r2, r3
   19f7e:	d0f7      	beq.n	19f70 <strcmp>
   19f80:	1ad0      	subs	r0, r2, r3
   19f82:	4770      	bx	lr

00019f84 <strlen>:
   19f84:	4603      	mov	r3, r0
   19f86:	f813 2b01 	ldrb.w	r2, [r3], #1
   19f8a:	2a00      	cmp	r2, #0
   19f8c:	d1fb      	bne.n	19f86 <strlen+0x2>
   19f8e:	1a18      	subs	r0, r3, r0
   19f90:	3801      	subs	r0, #1
   19f92:	4770      	bx	lr
   19f94:	0000      	movs	r0, r0
	...

00019f98 <orientation_detector_poll>:
static struct device *dev;
static double accel_offset[3];

int orientation_detector_poll(
	struct orientation_detector_sensor_data *sensor_data)
{
   19f98:	b5f0      	push	{r4, r5, r6, r7, lr}
		/* If using the ADXL362 driver, all channels must be fetched */
		if (IS_ENABLED(CONFIG_ADXL362)) {
			err = sensor_sample_fetch_chan(dev,
						       SENSOR_CHAN_ALL);
		} else {
			err = sensor_sample_fetch_chan(dev,
   19f9a:	4e29      	ldr	r6, [pc, #164]	; (1a040 <orientation_detector_poll+0xa8>)
{
   19f9c:	4605      	mov	r5, r0
   19f9e:	b087      	sub	sp, #28
			err = sensor_sample_fetch_chan(dev,
   19fa0:	6830      	ldr	r0, [r6, #0]
static inline int z_impl_sensor_sample_fetch_chan(struct device *dev,
						 enum sensor_channel type)
{
	const struct sensor_driver_api *api = dev->driver_api;

	return api->sample_fetch(dev, type);
   19fa2:	6843      	ldr	r3, [r0, #4]
   19fa4:	2102      	movs	r1, #2
   19fa6:	689b      	ldr	r3, [r3, #8]
   19fa8:	4798      	blx	r3
						       SENSOR_CHAN_ACCEL_Z);
		}

		if (err) {
   19faa:	4604      	mov	r4, r0
   19fac:	b128      	cbz	r0, 19fba <orientation_detector_poll+0x22>
			printk("sensor_sample_fetch failed\n");
   19fae:	4825      	ldr	r0, [pc, #148]	; (1a044 <orientation_detector_poll+0xac>)

		err = sensor_channel_get(dev,
				SENSOR_CHAN_ACCEL_Z, &accel_data[2]);

		if (err) {
			printk("sensor_channel_get failed\n");
   19fb0:	f024 fcbc 	bl	3e92c <printk>
	}

	sensor_data->orientation = current_orientation;

	return 0;
}
   19fb4:	4620      	mov	r0, r4
   19fb6:	b007      	add	sp, #28
   19fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = sensor_channel_get(dev,
   19fba:	6830      	ldr	r0, [r6, #0]
					   enum sensor_channel chan,
					   struct sensor_value *val)
{
	const struct sensor_driver_api *api = dev->driver_api;

	return api->channel_get(dev, chan, val);
   19fbc:	6843      	ldr	r3, [r0, #4]
   19fbe:	aa04      	add	r2, sp, #16
   19fc0:	68db      	ldr	r3, [r3, #12]
   19fc2:	2102      	movs	r1, #2
   19fc4:	4798      	blx	r3
		if (err) {
   19fc6:	4604      	mov	r4, r0
   19fc8:	b108      	cbz	r0, 19fce <orientation_detector_poll+0x36>
			printk("sensor_channel_get failed\n");
   19fca:	481f      	ldr	r0, [pc, #124]	; (1a048 <orientation_detector_poll+0xb0>)
   19fcc:	e7f0      	b.n	19fb0 <orientation_detector_poll+0x18>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
   19fce:	9805      	ldr	r0, [sp, #20]
   19fd0:	f7fe fb78 	bl	186c4 <__aeabi_i2d>
   19fd4:	a318      	add	r3, pc, #96	; (adr r3, 1a038 <orientation_detector_poll+0xa0>)
   19fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   19fda:	f7fe fd07 	bl	189ec <__aeabi_ddiv>
   19fde:	4606      	mov	r6, r0
   19fe0:	9804      	ldr	r0, [sp, #16]
   19fe2:	460f      	mov	r7, r1
   19fe4:	f7fe fb6e 	bl	186c4 <__aeabi_i2d>
   19fe8:	4602      	mov	r2, r0
   19fea:	460b      	mov	r3, r1
   19fec:	4630      	mov	r0, r6
   19fee:	4639      	mov	r1, r7
   19ff0:	f7fe fa1c 	bl	1842c <__adddf3>
		aggregated_data[2] += sensor_value_to_double(&accel_data[2]);
   19ff4:	2200      	movs	r2, #0
   19ff6:	2300      	movs	r3, #0
   19ff8:	f7fe fa18 	bl	1842c <__adddf3>
				accel_offset[2];
   19ffc:	4b13      	ldr	r3, [pc, #76]	; (1a04c <orientation_detector_poll+0xb4>)
	sensor_data->z = (aggregated_data[2] / (double)MEASUREMENT_ITERATIONS) -
   19ffe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
   1a002:	f7fe fa11 	bl	18428 <__aeabi_dsub>
   1a006:	4606      	mov	r6, r0
   1a008:	460f      	mov	r7, r1
	if (sensor_data->z >= FLIP_ACCELERATION_THRESHOLD) {
   1a00a:	2200      	movs	r2, #0
	sensor_data->z = (aggregated_data[2] / (double)MEASUREMENT_ITERATIONS) -
   1a00c:	e9c5 6704 	strd	r6, r7, [r5, #16]
	if (sensor_data->z >= FLIP_ACCELERATION_THRESHOLD) {
   1a010:	4b0f      	ldr	r3, [pc, #60]	; (1a050 <orientation_detector_poll+0xb8>)
   1a012:	f7fe fe47 	bl	18ca4 <__aeabi_dcmpge>
   1a016:	b958      	cbnz	r0, 1a030 <orientation_detector_poll+0x98>
	} else if (sensor_data->z <= -FLIP_ACCELERATION_THRESHOLD) {
   1a018:	4b0e      	ldr	r3, [pc, #56]	; (1a054 <orientation_detector_poll+0xbc>)
   1a01a:	2200      	movs	r2, #0
   1a01c:	4630      	mov	r0, r6
   1a01e:	4639      	mov	r1, r7
   1a020:	f7fe fe36 	bl	18c90 <__aeabi_dcmple>
   1a024:	2800      	cmp	r0, #0
		current_orientation = ORIENTATION_ON_SIDE;
   1a026:	bf14      	ite	ne
   1a028:	2302      	movne	r3, #2
   1a02a:	2303      	moveq	r3, #3
	sensor_data->orientation = current_orientation;
   1a02c:	762b      	strb	r3, [r5, #24]
	return 0;
   1a02e:	e7c1      	b.n	19fb4 <orientation_detector_poll+0x1c>
			current_orientation = ORIENTATION_NORMAL;
   1a030:	2301      	movs	r3, #1
   1a032:	e7fb      	b.n	1a02c <orientation_detector_poll+0x94>
   1a034:	f3af 8000 	nop.w
   1a038:	00000000 	.word	0x00000000
   1a03c:	412e8480 	.word	0x412e8480
   1a040:	200238f4 	.word	0x200238f4
   1a044:	000448da 	.word	0x000448da
   1a048:	000448f6 	.word	0x000448f6
   1a04c:	20020958 	.word	0x20020958
   1a050:	40140000 	.word	0x40140000
   1a054:	c0140000 	.word	0xc0140000

0001a058 <env_sensors_poll_fn>:
};

static struct k_delayed_work env_sensors_poller;

static void env_sensors_poll_fn(struct k_work *work)
{
   1a058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (err) {
			printk("Failed to fetch data from %s, error: %d\n",
				env_sensors[0]->dev_name, err);
		}
	}
	for (int i = 0; i < num_sensors; i++) {
   1a05c:	2700      	movs	r7, #0
{
   1a05e:	b089      	sub	sp, #36	; 0x24
	for (int i = 0; i < num_sensors; i++) {
   1a060:	4c41      	ldr	r4, [pc, #260]	; (1a168 <env_sensors_poll_fn+0x110>)
		if (!(IS_ENABLED(CONFIG_BME680))) {
			err = sensor_sample_fetch_chan(env_sensors[i]->dev,
				env_sensors[i]->channel);
			if (err) {
				printk("Failed to fetch data from %s, error: %d\n",
   1a062:	f8df a128 	ldr.w	sl, [pc, #296]	; 1a18c <env_sensors_poll_fn+0x134>
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1a066:	4e41      	ldr	r6, [pc, #260]	; (1a16c <env_sensors_poll_fn+0x114>)
   1a068:	ad02      	add	r5, sp, #8
			err = sensor_sample_fetch_chan(env_sensors[i]->dev,
   1a06a:	f854 3b04 	ldr.w	r3, [r4], #4
   1a06e:	6998      	ldr	r0, [r3, #24]
   1a070:	8a19      	ldrh	r1, [r3, #16]
	return api->sample_fetch(dev, type);
   1a072:	6843      	ldr	r3, [r0, #4]
   1a074:	689b      	ldr	r3, [r3, #8]
   1a076:	4798      	blx	r3
			if (err) {
   1a078:	4602      	mov	r2, r0
   1a07a:	b128      	cbz	r0, 1a088 <env_sensors_poll_fn+0x30>
				printk("Failed to fetch data from %s, error: %d\n",
   1a07c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a080:	4650      	mov	r0, sl
   1a082:	6959      	ldr	r1, [r3, #20]
   1a084:	f024 fc52 	bl	3e92c <printk>
					env_sensors[i]->dev_name, err);
			}
		}
		err = sensor_channel_get(env_sensors[i]->dev,
   1a088:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a08c:	6998      	ldr	r0, [r3, #24]
   1a08e:	8a19      	ldrh	r1, [r3, #16]
	return api->channel_get(dev, chan, val);
   1a090:	6843      	ldr	r3, [r0, #4]
   1a092:	462a      	mov	r2, r5
   1a094:	68db      	ldr	r3, [r3, #12]
   1a096:	4798      	blx	r3
			env_sensors[i]->channel, &data[i]);
		if (err) {
   1a098:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a09c:	4602      	mov	r2, r0
   1a09e:	b188      	cbz	r0, 1a0c4 <env_sensors_poll_fn+0x6c>
			printk("Failed to fetch data from %s, error: %d\n",
   1a0a0:	6959      	ldr	r1, [r3, #20]
   1a0a2:	4650      	mov	r0, sl
   1a0a4:	f024 fc42 	bl	3e92c <printk>
	for (int i = 0; i < num_sensors; i++) {
   1a0a8:	3701      	adds	r7, #1
   1a0aa:	2f03      	cmp	r7, #3
   1a0ac:	f105 0508 	add.w	r5, r5, #8
   1a0b0:	d1db      	bne.n	1a06a <env_sensors_poll_fn+0x12>
 * @req K-DWORK-001
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1a0b2:	f242 7210 	movw	r2, #10000	; 0x2710
   1a0b6:	492e      	ldr	r1, [pc, #184]	; (1a170 <env_sensors_poll_fn+0x118>)
   1a0b8:	482e      	ldr	r0, [pc, #184]	; (1a174 <env_sensors_poll_fn+0x11c>)
   1a0ba:	f020 fce7 	bl	3aa8c <k_delayed_work_submit_to_queue>
			k_spin_unlock(&(env_sensors[i]->lock), key);
		}
	}

	 k_delayed_work_submit(&env_sensors_poller, K_SECONDS(10));
}
   1a0be:	b009      	add	sp, #36	; 0x24
   1a0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			k_spinlock_key_t key = k_spin_lock(&(env_sensors[i]->lock));
   1a0c4:	f103 081c 	add.w	r8, r3, #28
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   1a0c8:	f04f 0320 	mov.w	r3, #32
   1a0cc:	f3ef 8211 	mrs	r2, BASEPRI
   1a0d0:	f383 8811 	msr	BASEPRI, r3
   1a0d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1a0d8:	4640      	mov	r0, r8
   1a0da:	9201      	str	r2, [sp, #4]
   1a0dc:	f020 fa78 	bl	3a5d0 <z_spin_lock_valid>
   1a0e0:	b960      	cbnz	r0, 1a0fc <env_sensors_poll_fn+0xa4>
   1a0e2:	4925      	ldr	r1, [pc, #148]	; (1a178 <env_sensors_poll_fn+0x120>)
   1a0e4:	235f      	movs	r3, #95	; 0x5f
   1a0e6:	4632      	mov	r2, r6
   1a0e8:	4824      	ldr	r0, [pc, #144]	; (1a17c <env_sensors_poll_fn+0x124>)
   1a0ea:	f024 fc1f 	bl	3e92c <printk>
   1a0ee:	4824      	ldr	r0, [pc, #144]	; (1a180 <env_sensors_poll_fn+0x128>)
   1a0f0:	f024 fc1c 	bl	3e92c <printk>
   1a0f4:	215f      	movs	r1, #95	; 0x5f
   1a0f6:	4630      	mov	r0, r6
   1a0f8:	f024 fc25 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a0fc:	4640      	mov	r0, r8
   1a0fe:	f020 fa85 	bl	3a60c <z_spin_lock_set_owner>
	return (double)val->val1 + (double)val->val2 / 1000000;
   1a102:	6868      	ldr	r0, [r5, #4]
   1a104:	f7fe fade 	bl	186c4 <__aeabi_i2d>
   1a108:	a315      	add	r3, pc, #84	; (adr r3, 1a160 <env_sensors_poll_fn+0x108>)
   1a10a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a10e:	f7fe fc6d 	bl	189ec <__aeabi_ddiv>
   1a112:	4680      	mov	r8, r0
   1a114:	6828      	ldr	r0, [r5, #0]
   1a116:	4689      	mov	r9, r1
   1a118:	f7fe fad4 	bl	186c4 <__aeabi_i2d>
   1a11c:	4602      	mov	r2, r0
   1a11e:	460b      	mov	r3, r1
   1a120:	4640      	mov	r0, r8
   1a122:	4649      	mov	r1, r9
   1a124:	f7fe f982 	bl	1842c <__adddf3>
			env_sensors[i]->sensor.value = sensor_value_to_double(&data[i]);
   1a128:	f854 bc04 	ldr.w	fp, [r4, #-4]
   1a12c:	e9cb 0102 	strd	r0, r1, [fp, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1a130:	f10b 001c 	add.w	r0, fp, #28
   1a134:	f020 fa5a 	bl	3a5ec <z_spin_unlock_valid>
   1a138:	b960      	cbnz	r0, 1a154 <env_sensors_poll_fn+0xfc>
   1a13a:	4912      	ldr	r1, [pc, #72]	; (1a184 <env_sensors_poll_fn+0x12c>)
   1a13c:	2372      	movs	r3, #114	; 0x72
   1a13e:	4632      	mov	r2, r6
   1a140:	480e      	ldr	r0, [pc, #56]	; (1a17c <env_sensors_poll_fn+0x124>)
   1a142:	f024 fbf3 	bl	3e92c <printk>
   1a146:	4810      	ldr	r0, [pc, #64]	; (1a188 <env_sensors_poll_fn+0x130>)
   1a148:	f024 fbf0 	bl	3e92c <printk>
   1a14c:	2172      	movs	r1, #114	; 0x72
   1a14e:	4630      	mov	r0, r6
   1a150:	f024 fbf9 	bl	3e946 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1a154:	9b01      	ldr	r3, [sp, #4]
   1a156:	f383 8811 	msr	BASEPRI, r3
   1a15a:	f3bf 8f6f 	isb	sy
   1a15e:	e7a3      	b.n	1a0a8 <env_sensors_poll_fn+0x50>
   1a160:	00000000 	.word	0x00000000
   1a164:	412e8480 	.word	0x412e8480
   1a168:	000425e8 	.word	0x000425e8
   1a16c:	00044e3b 	.word	0x00044e3b
   1a170:	20023950 	.word	0x20023950
   1a174:	2002a25c 	.word	0x2002a25c
   1a178:	00044e5a 	.word	0x00044e5a
   1a17c:	00044643 	.word	0x00044643
   1a180:	00044e6f 	.word	0x00044e6f
   1a184:	00044e84 	.word	0x00044e84
   1a188:	00044e9b 	.word	0x00044e9b
   1a18c:	00044e12 	.word	0x00044e12

0001a190 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
   1a190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a194:	4605      	mov	r5, r0
   1a196:	b093      	sub	sp, #76	; 0x4c
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1a198:	460c      	mov	r4, r1
   1a19a:	b909      	cbnz	r1, 1a1a0 <parse_value+0x10>
    if (head != NULL)
    {
        cJSON_Delete(head);
    }

    return false;
   1a19c:	2000      	movs	r0, #0
   1a19e:	e024      	b.n	1a1ea <parse_value+0x5a>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1a1a0:	6808      	ldr	r0, [r1, #0]
   1a1a2:	2800      	cmp	r0, #0
   1a1a4:	d0fa      	beq.n	1a19c <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
   1a1a6:	688b      	ldr	r3, [r1, #8]
   1a1a8:	6862      	ldr	r2, [r4, #4]
   1a1aa:	1d19      	adds	r1, r3, #4
   1a1ac:	4291      	cmp	r1, r2
   1a1ae:	d80b      	bhi.n	1a1c8 <parse_value+0x38>
   1a1b0:	2204      	movs	r2, #4
   1a1b2:	49b1      	ldr	r1, [pc, #708]	; (1a478 <parse_value+0x2e8>)
   1a1b4:	4418      	add	r0, r3
   1a1b6:	f026 ffb0 	bl	4111a <strncmp>
   1a1ba:	b928      	cbnz	r0, 1a1c8 <parse_value+0x38>
        item->type = cJSON_NULL;
   1a1bc:	2304      	movs	r3, #4
   1a1be:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
   1a1c0:	68a3      	ldr	r3, [r4, #8]
   1a1c2:	3304      	adds	r3, #4
    input_buffer->offset++;
   1a1c4:	60a3      	str	r3, [r4, #8]
   1a1c6:	e074      	b.n	1a2b2 <parse_value+0x122>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
   1a1c8:	68a3      	ldr	r3, [r4, #8]
   1a1ca:	6862      	ldr	r2, [r4, #4]
   1a1cc:	1d59      	adds	r1, r3, #5
   1a1ce:	4291      	cmp	r1, r2
   1a1d0:	d80e      	bhi.n	1a1f0 <parse_value+0x60>
   1a1d2:	6820      	ldr	r0, [r4, #0]
   1a1d4:	2205      	movs	r2, #5
   1a1d6:	49a9      	ldr	r1, [pc, #676]	; (1a47c <parse_value+0x2ec>)
   1a1d8:	4418      	add	r0, r3
   1a1da:	f026 ff9e 	bl	4111a <strncmp>
   1a1de:	b938      	cbnz	r0, 1a1f0 <parse_value+0x60>
        item->type = cJSON_False;
   1a1e0:	2001      	movs	r0, #1
        input_buffer->offset += 5;
   1a1e2:	68a3      	ldr	r3, [r4, #8]
        item->type = cJSON_False;
   1a1e4:	60e8      	str	r0, [r5, #12]
        input_buffer->offset += 5;
   1a1e6:	3305      	adds	r3, #5
        input_buffer->offset += 4;
   1a1e8:	60a3      	str	r3, [r4, #8]
}
   1a1ea:	b013      	add	sp, #76	; 0x4c
   1a1ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
   1a1f0:	68a3      	ldr	r3, [r4, #8]
   1a1f2:	6862      	ldr	r2, [r4, #4]
   1a1f4:	1d19      	adds	r1, r3, #4
   1a1f6:	4291      	cmp	r1, r2
   1a1f8:	d80d      	bhi.n	1a216 <parse_value+0x86>
   1a1fa:	6820      	ldr	r0, [r4, #0]
   1a1fc:	2204      	movs	r2, #4
   1a1fe:	49a0      	ldr	r1, [pc, #640]	; (1a480 <parse_value+0x2f0>)
   1a200:	4418      	add	r0, r3
   1a202:	f026 ff8a 	bl	4111a <strncmp>
   1a206:	b930      	cbnz	r0, 1a216 <parse_value+0x86>
        item->type = cJSON_True;
   1a208:	2302      	movs	r3, #2
        item->valueint = 1;
   1a20a:	2001      	movs	r0, #1
        item->type = cJSON_True;
   1a20c:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
   1a20e:	68a3      	ldr	r3, [r4, #8]
        item->valueint = 1;
   1a210:	6168      	str	r0, [r5, #20]
        input_buffer->offset += 4;
   1a212:	3304      	adds	r3, #4
   1a214:	e7e8      	b.n	1a1e8 <parse_value+0x58>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
   1a216:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
   1a21a:	42ba      	cmp	r2, r7
   1a21c:	d2be      	bcs.n	1a19c <parse_value+0xc>
   1a21e:	6820      	ldr	r0, [r4, #0]
   1a220:	5c83      	ldrb	r3, [r0, r2]
   1a222:	2b22      	cmp	r3, #34	; 0x22
   1a224:	d104      	bne.n	1a230 <parse_value+0xa0>
        return parse_string(item, input_buffer);
   1a226:	4621      	mov	r1, r4
   1a228:	4628      	mov	r0, r5
   1a22a:	f007 fd99 	bl	21d60 <parse_string>
   1a22e:	e7dc      	b.n	1a1ea <parse_value+0x5a>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
   1a230:	2b2d      	cmp	r3, #45	; 0x2d
   1a232:	d003      	beq.n	1a23c <parse_value+0xac>
   1a234:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   1a238:	2e09      	cmp	r6, #9
   1a23a:	d850      	bhi.n	1a2de <parse_value+0x14e>
    unsigned char *after_end = NULL;
   1a23c:	2300      	movs	r3, #0
   1a23e:	9301      	str	r3, [sp, #4]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1a240:	2800      	cmp	r0, #0
   1a242:	d0ab      	beq.n	1a19c <parse_value+0xc>
   1a244:	1abf      	subs	r7, r7, r2
   1a246:	ae02      	add	r6, sp, #8
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   1a248:	429f      	cmp	r7, r3
   1a24a:	eb02 0103 	add.w	r1, r2, r3
   1a24e:	d00e      	beq.n	1a26e <parse_value+0xde>
        switch (buffer_at_offset(input_buffer)[i])
   1a250:	5c41      	ldrb	r1, [r0, r1]
   1a252:	2939      	cmp	r1, #57	; 0x39
   1a254:	d82f      	bhi.n	1a2b6 <parse_value+0x126>
   1a256:	2930      	cmp	r1, #48	; 0x30
   1a258:	d205      	bcs.n	1a266 <parse_value+0xd6>
   1a25a:	292d      	cmp	r1, #45	; 0x2d
   1a25c:	d003      	beq.n	1a266 <parse_value+0xd6>
   1a25e:	292e      	cmp	r1, #46	; 0x2e
   1a260:	d001      	beq.n	1a266 <parse_value+0xd6>
   1a262:	292b      	cmp	r1, #43	; 0x2b
   1a264:	d103      	bne.n	1a26e <parse_value+0xde>
                number_c_string[i] = decimal_point;
   1a266:	54f1      	strb	r1, [r6, r3]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   1a268:	3301      	adds	r3, #1
   1a26a:	2b3f      	cmp	r3, #63	; 0x3f
   1a26c:	d1ec      	bne.n	1a248 <parse_value+0xb8>
    number_c_string[i] = '\0';
   1a26e:	aa12      	add	r2, sp, #72	; 0x48
   1a270:	4413      	add	r3, r2
   1a272:	2200      	movs	r2, #0
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1a274:	a901      	add	r1, sp, #4
   1a276:	4630      	mov	r0, r6
    number_c_string[i] = '\0';
   1a278:	f803 2c40 	strb.w	r2, [r3, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1a27c:	f022 fbee 	bl	3ca5c <strtod>
    if (number_c_string == after_end)
   1a280:	9f01      	ldr	r7, [sp, #4]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1a282:	ec59 8b10 	vmov	r8, r9, d0
    if (number_c_string == after_end)
   1a286:	42b7      	cmp	r7, r6
   1a288:	d088      	beq.n	1a19c <parse_value+0xc>
    if (number >= INT_MAX)
   1a28a:	a379      	add	r3, pc, #484	; (adr r3, 1a470 <parse_value+0x2e0>)
   1a28c:	e9d3 2300 	ldrd	r2, r3, [r3]
    item->valuedouble = number;
   1a290:	ed85 0b06 	vstr	d0, [r5, #24]
    if (number >= INT_MAX)
   1a294:	ee10 0a10 	vmov	r0, s0
   1a298:	4649      	mov	r1, r9
   1a29a:	f7fe fd03 	bl	18ca4 <__aeabi_dcmpge>
   1a29e:	b170      	cbz	r0, 1a2be <parse_value+0x12e>
        item->valueint = INT_MAX;
   1a2a0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        item->valueint = INT_MIN;
   1a2a4:	616b      	str	r3, [r5, #20]
    item->type = cJSON_Number;
   1a2a6:	2308      	movs	r3, #8
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1a2a8:	1bbe      	subs	r6, r7, r6
   1a2aa:	68a7      	ldr	r7, [r4, #8]
    item->type = cJSON_Number;
   1a2ac:	60eb      	str	r3, [r5, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1a2ae:	443e      	add	r6, r7
   1a2b0:	60a6      	str	r6, [r4, #8]
    return true;
   1a2b2:	2001      	movs	r0, #1
   1a2b4:	e799      	b.n	1a1ea <parse_value+0x5a>
        switch (buffer_at_offset(input_buffer)[i])
   1a2b6:	2945      	cmp	r1, #69	; 0x45
   1a2b8:	d0d5      	beq.n	1a266 <parse_value+0xd6>
   1a2ba:	2965      	cmp	r1, #101	; 0x65
   1a2bc:	e7d2      	b.n	1a264 <parse_value+0xd4>
    else if (number <= (double)INT_MIN)
   1a2be:	2200      	movs	r2, #0
   1a2c0:	4b70      	ldr	r3, [pc, #448]	; (1a484 <parse_value+0x2f4>)
   1a2c2:	4640      	mov	r0, r8
   1a2c4:	4649      	mov	r1, r9
   1a2c6:	f7fe fce3 	bl	18c90 <__aeabi_dcmple>
   1a2ca:	b110      	cbz	r0, 1a2d2 <parse_value+0x142>
        item->valueint = INT_MIN;
   1a2cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1a2d0:	e7e8      	b.n	1a2a4 <parse_value+0x114>
        item->valueint = (int)number;
   1a2d2:	4640      	mov	r0, r8
   1a2d4:	4649      	mov	r1, r9
   1a2d6:	f7fe fcf9 	bl	18ccc <__aeabi_d2iz>
   1a2da:	6168      	str	r0, [r5, #20]
   1a2dc:	e7e3      	b.n	1a2a6 <parse_value+0x116>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
   1a2de:	2b5b      	cmp	r3, #91	; 0x5b
   1a2e0:	d153      	bne.n	1a38a <parse_value+0x1fa>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1a2e2:	68e3      	ldr	r3, [r4, #12]
   1a2e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1a2e8:	f4bf af58 	bcs.w	1a19c <parse_value+0xc>
    input_buffer->depth++;
   1a2ec:	3301      	adds	r3, #1
   1a2ee:	60e3      	str	r3, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
   1a2f0:	5c83      	ldrb	r3, [r0, r2]
   1a2f2:	2b5b      	cmp	r3, #91	; 0x5b
   1a2f4:	f47f af52 	bne.w	1a19c <parse_value+0xc>
    input_buffer->offset++;
   1a2f8:	3201      	adds	r2, #1
   1a2fa:	60a2      	str	r2, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1a2fc:	4620      	mov	r0, r4
   1a2fe:	f025 fbbc 	bl	3fa7a <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
   1a302:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1a306:	4293      	cmp	r3, r2
   1a308:	d262      	bcs.n	1a3d0 <parse_value+0x240>
   1a30a:	6822      	ldr	r2, [r4, #0]
   1a30c:	5cd2      	ldrb	r2, [r2, r3]
   1a30e:	2a5d      	cmp	r2, #93	; 0x5d
   1a310:	d109      	bne.n	1a326 <parse_value+0x196>
    cJSON *head = NULL; /* head of the linked list */
   1a312:	2600      	movs	r6, #0
    input_buffer->depth--;
   1a314:	68e3      	ldr	r3, [r4, #12]
   1a316:	3b01      	subs	r3, #1
   1a318:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Array;
   1a31a:	2320      	movs	r3, #32
    item->child = head;
   1a31c:	e9c5 6302 	strd	r6, r3, [r5, #8]
    input_buffer->offset++;
   1a320:	68a3      	ldr	r3, [r4, #8]
   1a322:	3301      	adds	r3, #1
   1a324:	e74e      	b.n	1a1c4 <parse_value+0x34>
    cJSON *current_item = NULL;
   1a326:	f04f 0800 	mov.w	r8, #0
    cJSON *head = NULL; /* head of the linked list */
   1a32a:	4646      	mov	r6, r8
    input_buffer->offset--;
   1a32c:	3b01      	subs	r3, #1
   1a32e:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1a330:	6920      	ldr	r0, [r4, #16]
   1a332:	f025 fbd4 	bl	3fade <cJSON_New_Item.isra.1>
        if (new_item == NULL)
   1a336:	4607      	mov	r7, r0
   1a338:	b300      	cbz	r0, 1a37c <parse_value+0x1ec>
        if (head == NULL)
   1a33a:	b1ee      	cbz	r6, 1a378 <parse_value+0x1e8>
            current_item->next = new_item;
   1a33c:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   1a340:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   1a344:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1a346:	4620      	mov	r0, r4
        input_buffer->offset++;
   1a348:	3301      	adds	r3, #1
   1a34a:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1a34c:	f025 fb95 	bl	3fa7a <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1a350:	4621      	mov	r1, r4
   1a352:	4638      	mov	r0, r7
   1a354:	f7ff ff1c 	bl	1a190 <parse_value>
   1a358:	b198      	cbz	r0, 1a382 <parse_value+0x1f2>
        buffer_skip_whitespace(input_buffer);
   1a35a:	4620      	mov	r0, r4
   1a35c:	f025 fb8d 	bl	3fa7a <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1a360:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1a364:	4293      	cmp	r3, r2
   1a366:	d20c      	bcs.n	1a382 <parse_value+0x1f2>
   1a368:	6822      	ldr	r2, [r4, #0]
   1a36a:	46b8      	mov	r8, r7
   1a36c:	5cd3      	ldrb	r3, [r2, r3]
   1a36e:	2b2c      	cmp	r3, #44	; 0x2c
   1a370:	d0de      	beq.n	1a330 <parse_value+0x1a0>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
   1a372:	2b5d      	cmp	r3, #93	; 0x5d
   1a374:	d105      	bne.n	1a382 <parse_value+0x1f2>
   1a376:	e7cd      	b.n	1a314 <parse_value+0x184>
        if (head == NULL)
   1a378:	4606      	mov	r6, r0
   1a37a:	e7e3      	b.n	1a344 <parse_value+0x1b4>
    if (head != NULL)
   1a37c:	2e00      	cmp	r6, #0
   1a37e:	f43f af0d 	beq.w	1a19c <parse_value+0xc>
        cJSON_Delete(head);
   1a382:	4630      	mov	r0, r6
        cJSON_Delete(head);
   1a384:	f008 f8f6 	bl	22574 <cJSON_Delete>
   1a388:	e708      	b.n	1a19c <parse_value+0xc>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
   1a38a:	2b7b      	cmp	r3, #123	; 0x7b
   1a38c:	f47f af06 	bne.w	1a19c <parse_value+0xc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1a390:	68e3      	ldr	r3, [r4, #12]
   1a392:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1a396:	f4bf af01 	bcs.w	1a19c <parse_value+0xc>
    input_buffer->depth++;
   1a39a:	3301      	adds	r3, #1
   1a39c:	60e3      	str	r3, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
   1a39e:	5c83      	ldrb	r3, [r0, r2]
   1a3a0:	2b7b      	cmp	r3, #123	; 0x7b
   1a3a2:	f47f aefb 	bne.w	1a19c <parse_value+0xc>
    input_buffer->offset++;
   1a3a6:	3201      	adds	r2, #1
   1a3a8:	60a2      	str	r2, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1a3aa:	4620      	mov	r0, r4
   1a3ac:	f025 fb65 	bl	3fa7a <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
   1a3b0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1a3b4:	4293      	cmp	r3, r2
   1a3b6:	d20b      	bcs.n	1a3d0 <parse_value+0x240>
   1a3b8:	6822      	ldr	r2, [r4, #0]
   1a3ba:	5cd2      	ldrb	r2, [r2, r3]
   1a3bc:	2a7d      	cmp	r2, #125	; 0x7d
   1a3be:	d10a      	bne.n	1a3d6 <parse_value+0x246>
    cJSON *head = NULL; /* linked list head */
   1a3c0:	2700      	movs	r7, #0
    input_buffer->depth--;
   1a3c2:	68e3      	ldr	r3, [r4, #12]
   1a3c4:	3b01      	subs	r3, #1
   1a3c6:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Object;
   1a3c8:	2340      	movs	r3, #64	; 0x40
    item->child = head;
   1a3ca:	e9c5 7302 	strd	r7, r3, [r5, #8]
   1a3ce:	e7a7      	b.n	1a320 <parse_value+0x190>
        input_buffer->offset--;
   1a3d0:	3b01      	subs	r3, #1
   1a3d2:	60a3      	str	r3, [r4, #8]
    if (head != NULL)
   1a3d4:	e6e2      	b.n	1a19c <parse_value+0xc>
    cJSON *current_item = NULL;
   1a3d6:	f04f 0800 	mov.w	r8, #0
    cJSON *head = NULL; /* linked list head */
   1a3da:	4647      	mov	r7, r8
        current_item->valuestring = NULL;
   1a3dc:	46c1      	mov	r9, r8
    input_buffer->offset--;
   1a3de:	3b01      	subs	r3, #1
   1a3e0:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1a3e2:	6920      	ldr	r0, [r4, #16]
   1a3e4:	f025 fb7b 	bl	3fade <cJSON_New_Item.isra.1>
        if (new_item == NULL)
   1a3e8:	4606      	mov	r6, r0
   1a3ea:	2800      	cmp	r0, #0
   1a3ec:	d039      	beq.n	1a462 <parse_value+0x2d2>
        if (head == NULL)
   1a3ee:	b3b7      	cbz	r7, 1a45e <parse_value+0x2ce>
            current_item->next = new_item;
   1a3f0:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   1a3f4:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   1a3f8:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1a3fa:	4620      	mov	r0, r4
        input_buffer->offset++;
   1a3fc:	3301      	adds	r3, #1
   1a3fe:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1a400:	f025 fb3b 	bl	3fa7a <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
   1a404:	4621      	mov	r1, r4
   1a406:	4630      	mov	r0, r6
   1a408:	f007 fcaa 	bl	21d60 <parse_string>
   1a40c:	b360      	cbz	r0, 1a468 <parse_value+0x2d8>
        buffer_skip_whitespace(input_buffer);
   1a40e:	4620      	mov	r0, r4
   1a410:	f025 fb33 	bl	3fa7a <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
   1a414:	6933      	ldr	r3, [r6, #16]
        current_item->valuestring = NULL;
   1a416:	f8c6 9010 	str.w	r9, [r6, #16]
        current_item->string = current_item->valuestring;
   1a41a:	6233      	str	r3, [r6, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
   1a41c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1a420:	4293      	cmp	r3, r2
   1a422:	d221      	bcs.n	1a468 <parse_value+0x2d8>
   1a424:	6822      	ldr	r2, [r4, #0]
   1a426:	5cd2      	ldrb	r2, [r2, r3]
   1a428:	2a3a      	cmp	r2, #58	; 0x3a
   1a42a:	d11d      	bne.n	1a468 <parse_value+0x2d8>
        input_buffer->offset++;
   1a42c:	3301      	adds	r3, #1
   1a42e:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1a430:	4620      	mov	r0, r4
   1a432:	f025 fb22 	bl	3fa7a <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1a436:	4621      	mov	r1, r4
   1a438:	4630      	mov	r0, r6
   1a43a:	f7ff fea9 	bl	1a190 <parse_value>
   1a43e:	b198      	cbz	r0, 1a468 <parse_value+0x2d8>
        buffer_skip_whitespace(input_buffer);
   1a440:	4620      	mov	r0, r4
   1a442:	f025 fb1a 	bl	3fa7a <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1a446:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1a44a:	4293      	cmp	r3, r2
   1a44c:	d20c      	bcs.n	1a468 <parse_value+0x2d8>
   1a44e:	6822      	ldr	r2, [r4, #0]
   1a450:	46b0      	mov	r8, r6
   1a452:	5cd3      	ldrb	r3, [r2, r3]
   1a454:	2b2c      	cmp	r3, #44	; 0x2c
   1a456:	d0c4      	beq.n	1a3e2 <parse_value+0x252>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
   1a458:	2b7d      	cmp	r3, #125	; 0x7d
   1a45a:	d105      	bne.n	1a468 <parse_value+0x2d8>
   1a45c:	e7b1      	b.n	1a3c2 <parse_value+0x232>
        if (head == NULL)
   1a45e:	4607      	mov	r7, r0
   1a460:	e7ca      	b.n	1a3f8 <parse_value+0x268>
    if (head != NULL)
   1a462:	2f00      	cmp	r7, #0
   1a464:	f43f ae9a 	beq.w	1a19c <parse_value+0xc>
        cJSON_Delete(head);
   1a468:	4638      	mov	r0, r7
   1a46a:	e78b      	b.n	1a384 <parse_value+0x1f4>
   1a46c:	f3af 8000 	nop.w
   1a470:	ffc00000 	.word	0xffc00000
   1a474:	41dfffff 	.word	0x41dfffff
   1a478:	00045ff1 	.word	0x00045ff1
   1a47c:	00046008 	.word	0x00046008
   1a480:	0004600e 	.word	0x0004600e
   1a484:	c1e00000 	.word	0xc1e00000

0001a488 <cJSON_CreateNumber>:
    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
    cJSON *item = cJSON_New_Item(&global_hooks);
   1a488:	4b17      	ldr	r3, [pc, #92]	; (1a4e8 <cJSON_CreateNumber+0x60>)
{
   1a48a:	b5d0      	push	{r4, r6, r7, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   1a48c:	6818      	ldr	r0, [r3, #0]
{
   1a48e:	ec57 6b10 	vmov	r6, r7, d0
    cJSON *item = cJSON_New_Item(&global_hooks);
   1a492:	f025 fb24 	bl	3fade <cJSON_New_Item.isra.1>
    if(item)
   1a496:	4604      	mov	r4, r0
   1a498:	b170      	cbz	r0, 1a4b8 <cJSON_CreateNumber+0x30>
    {
        item->type = cJSON_Number;
   1a49a:	2308      	movs	r3, #8
        item->valuedouble = num;
   1a49c:	e9c0 6706 	strd	r6, r7, [r0, #24]
        item->type = cJSON_Number;
   1a4a0:	60c3      	str	r3, [r0, #12]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
   1a4a2:	4639      	mov	r1, r7
   1a4a4:	a30e      	add	r3, pc, #56	; (adr r3, 1a4e0 <cJSON_CreateNumber+0x58>)
   1a4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a4aa:	4630      	mov	r0, r6
   1a4ac:	f7fe fbfa 	bl	18ca4 <__aeabi_dcmpge>
   1a4b0:	b120      	cbz	r0, 1a4bc <cJSON_CreateNumber+0x34>
        {
            item->valueint = INT_MAX;
   1a4b2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        }
        else if (num <= (double)INT_MIN)
        {
            item->valueint = INT_MIN;
   1a4b6:	6163      	str	r3, [r4, #20]
            item->valueint = (int)num;
        }
    }

    return item;
}
   1a4b8:	4620      	mov	r0, r4
   1a4ba:	bdd0      	pop	{r4, r6, r7, pc}
        else if (num <= (double)INT_MIN)
   1a4bc:	2200      	movs	r2, #0
   1a4be:	4b0b      	ldr	r3, [pc, #44]	; (1a4ec <cJSON_CreateNumber+0x64>)
   1a4c0:	4630      	mov	r0, r6
   1a4c2:	4639      	mov	r1, r7
   1a4c4:	f7fe fbe4 	bl	18c90 <__aeabi_dcmple>
   1a4c8:	b110      	cbz	r0, 1a4d0 <cJSON_CreateNumber+0x48>
            item->valueint = INT_MIN;
   1a4ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1a4ce:	e7f2      	b.n	1a4b6 <cJSON_CreateNumber+0x2e>
            item->valueint = (int)num;
   1a4d0:	4630      	mov	r0, r6
   1a4d2:	4639      	mov	r1, r7
   1a4d4:	f7fe fbfa 	bl	18ccc <__aeabi_d2iz>
   1a4d8:	6160      	str	r0, [r4, #20]
    return item;
   1a4da:	e7ed      	b.n	1a4b8 <cJSON_CreateNumber+0x30>
   1a4dc:	f3af 8000 	nop.w
   1a4e0:	ffc00000 	.word	0xffc00000
   1a4e4:	41dfffff 	.word	0x41dfffff
   1a4e8:	20031268 	.word	0x20031268
   1a4ec:	c1e00000 	.word	0xc1e00000

0001a4f0 <double_to_sensor_value>:
 * @param val Sensor value to convert.
 * @param sense_val Pointer to sensor_value to store the converted data.
 */
static void double_to_sensor_value(double val,
				struct sensor_value *sense_val)
{
   1a4f0:	b5d0      	push	{r4, r6, r7, lr}
   1a4f2:	4614      	mov	r4, r2
   1a4f4:	460f      	mov	r7, r1
   1a4f6:	4606      	mov	r6, r0
	sense_val->val1 = (int)val;
   1a4f8:	f7fe fbe8 	bl	18ccc <__aeabi_d2iz>
   1a4fc:	6020      	str	r0, [r4, #0]
	sense_val->val2 = (val - (int)val) * 1000000;
   1a4fe:	f7fe f8e1 	bl	186c4 <__aeabi_i2d>
   1a502:	4602      	mov	r2, r0
   1a504:	460b      	mov	r3, r1
   1a506:	4630      	mov	r0, r6
   1a508:	4639      	mov	r1, r7
   1a50a:	f7fd ff8d 	bl	18428 <__aeabi_dsub>
   1a50e:	a304      	add	r3, pc, #16	; (adr r3, 1a520 <double_to_sensor_value+0x30>)
   1a510:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a514:	f7fe f940 	bl	18798 <__aeabi_dmul>
   1a518:	f7fe fbd8 	bl	18ccc <__aeabi_d2iz>
   1a51c:	6060      	str	r0, [r4, #4]
}
   1a51e:	bdd0      	pop	{r4, r6, r7, pc}
   1a520:	00000000 	.word	0x00000000
   1a524:	412e8480 	.word	0x412e8480

0001a528 <sensor_sim_sample_fetch>:
	return 0;
}

static int sensor_sim_sample_fetch(struct device *dev,
				enum sensor_channel chan)
{
   1a528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (chan) {
   1a52a:	2910      	cmp	r1, #16
   1a52c:	f200 80a6 	bhi.w	1a67c <sensor_sim_sample_fetch+0x154>
   1a530:	e8df f001 	tbb	[pc, r1]
   1a534:	40302009 	.word	0x40302009
   1a538:	a4a4a4a4 	.word	0xa4a4a4a4
   1a53c:	a4a4a4a4 	.word	0xa4a4a4a4
   1a540:	a49068a4 	.word	0xa49068a4
   1a544:	7d          	.byte	0x7d
   1a545:	00          	.byte	0x00
			accel_samples[0] = static_val_coeff * max_variation;
   1a546:	4c54      	ldr	r4, [pc, #336]	; (1a698 <sensor_sim_sample_fetch+0x170>)
			accel_samples[0] = generate_sine(base_accel_samples[0],
   1a548:	f00e f954 	bl	287f4 <generate_sine.constprop.2>
			accel_samples[0] = static_val_coeff * max_variation;
   1a54c:	6820      	ldr	r0, [r4, #0]
   1a54e:	f7fe f8b9 	bl	186c4 <__aeabi_i2d>
   1a552:	4b52      	ldr	r3, [pc, #328]	; (1a69c <sensor_sim_sample_fetch+0x174>)
   1a554:	2200      	movs	r2, #0
   1a556:	4606      	mov	r6, r0
   1a558:	460f      	mov	r7, r1
   1a55a:	f7fe f91d 	bl	18798 <__aeabi_dmul>
   1a55e:	4b50      	ldr	r3, [pc, #320]	; (1a6a0 <sensor_sim_sample_fetch+0x178>)
   1a560:	e9c3 0100 	strd	r0, r1, [r3]
		static_val_coeff *= -1.0;
   1a564:	4630      	mov	r0, r6
   1a566:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
   1a56a:	f7fe fbaf 	bl	18ccc <__aeabi_d2iz>
   1a56e:	6020      	str	r0, [r4, #0]
	return 0;
   1a570:	2000      	movs	r0, #0
	return sensor_sim_generate_data(chan);
}
   1a572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			accel_samples[1] = static_val_coeff * max_variation;
   1a574:	4c48      	ldr	r4, [pc, #288]	; (1a698 <sensor_sim_sample_fetch+0x170>)
			accel_samples[1] = generate_sine(base_accel_samples[1],
   1a576:	f00e f93d 	bl	287f4 <generate_sine.constprop.2>
			accel_samples[1] = static_val_coeff * max_variation;
   1a57a:	6820      	ldr	r0, [r4, #0]
   1a57c:	f7fe f8a2 	bl	186c4 <__aeabi_i2d>
   1a580:	4b46      	ldr	r3, [pc, #280]	; (1a69c <sensor_sim_sample_fetch+0x174>)
   1a582:	2200      	movs	r2, #0
   1a584:	4606      	mov	r6, r0
   1a586:	460f      	mov	r7, r1
   1a588:	f7fe f906 	bl	18798 <__aeabi_dmul>
   1a58c:	4b44      	ldr	r3, [pc, #272]	; (1a6a0 <sensor_sim_sample_fetch+0x178>)
   1a58e:	e9c3 0102 	strd	r0, r1, [r3, #8]
		static_val_coeff *= -1.0;
   1a592:	e7e7      	b.n	1a564 <sensor_sim_sample_fetch+0x3c>
			accel_samples[2] = static_val_coeff * max_variation;
   1a594:	4c40      	ldr	r4, [pc, #256]	; (1a698 <sensor_sim_sample_fetch+0x170>)
			accel_samples[2] = generate_sine(base_accel_samples[2],
   1a596:	f00e f92d 	bl	287f4 <generate_sine.constprop.2>
			accel_samples[2] = static_val_coeff * max_variation;
   1a59a:	6820      	ldr	r0, [r4, #0]
   1a59c:	f7fe f892 	bl	186c4 <__aeabi_i2d>
   1a5a0:	4b3e      	ldr	r3, [pc, #248]	; (1a69c <sensor_sim_sample_fetch+0x174>)
   1a5a2:	2200      	movs	r2, #0
   1a5a4:	4606      	mov	r6, r0
   1a5a6:	460f      	mov	r7, r1
   1a5a8:	f7fe f8f6 	bl	18798 <__aeabi_dmul>
   1a5ac:	4b3c      	ldr	r3, [pc, #240]	; (1a6a0 <sensor_sim_sample_fetch+0x178>)
   1a5ae:	e9c3 0104 	strd	r0, r1, [r3, #16]
   1a5b2:	e7d7      	b.n	1a564 <sensor_sim_sample_fetch+0x3c>
			accel_samples[0] = generate_sine(base_accel_samples[0],
   1a5b4:	f00e f91e 	bl	287f4 <generate_sine.constprop.2>
   1a5b8:	4c39      	ldr	r4, [pc, #228]	; (1a6a0 <sensor_sim_sample_fetch+0x178>)
   1a5ba:	e9c4 0100 	strd	r0, r1, [r4]
	if (z_syscall_trap()) {
		return (s32_t) z_arch_syscall_invoke1(*(u32_t *)&ms, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(ms);
   1a5be:	2001      	movs	r0, #1
   1a5c0:	f026 fab9 	bl	40b36 <z_impl_k_sleep>
			accel_samples[1] = generate_sine(base_accel_samples[1],
   1a5c4:	f00e f916 	bl	287f4 <generate_sine.constprop.2>
   1a5c8:	e9c4 0102 	strd	r0, r1, [r4, #8]
			accel_samples[0] = static_val_coeff * max_variation;
   1a5cc:	4d32      	ldr	r5, [pc, #200]	; (1a698 <sensor_sim_sample_fetch+0x170>)
   1a5ce:	2001      	movs	r0, #1
   1a5d0:	f026 fab1 	bl	40b36 <z_impl_k_sleep>
			accel_samples[2] = generate_sine(base_accel_samples[2],
   1a5d4:	f00e f90e 	bl	287f4 <generate_sine.constprop.2>
			accel_samples[0] = static_val_coeff * max_variation;
   1a5d8:	6828      	ldr	r0, [r5, #0]
   1a5da:	f7fe f873 	bl	186c4 <__aeabi_i2d>
   1a5de:	2200      	movs	r2, #0
   1a5e0:	4b2e      	ldr	r3, [pc, #184]	; (1a69c <sensor_sim_sample_fetch+0x174>)
   1a5e2:	4606      	mov	r6, r0
   1a5e4:	460f      	mov	r7, r1
   1a5e6:	f7fe f8d7 	bl	18798 <__aeabi_dmul>
   1a5ea:	e9c4 0100 	strd	r0, r1, [r4]
			accel_samples[1] = static_val_coeff * max_variation;
   1a5ee:	e9c4 0102 	strd	r0, r1, [r4, #8]
			accel_samples[2] = static_val_coeff * max_variation;
   1a5f2:	e9c4 0104 	strd	r0, r1, [r4, #16]
		static_val_coeff *= -1.0;
   1a5f6:	4630      	mov	r0, r6
   1a5f8:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
   1a5fc:	f7fe fb66 	bl	18ccc <__aeabi_d2iz>
   1a600:	6028      	str	r0, [r5, #0]
	return retval;
   1a602:	e7b5      	b.n	1a570 <sensor_sim_sample_fetch+0x48>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1a604:	f022 f980 	bl	3c908 <rand>
   1a608:	f7fe f85c 	bl	186c4 <__aeabi_i2d>
   1a60c:	a31e      	add	r3, pc, #120	; (adr r3, 1a688 <sensor_sim_sample_fetch+0x160>)
   1a60e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a612:	f7fe f9eb 	bl	189ec <__aeabi_ddiv>
   1a616:	2200      	movs	r2, #0
   1a618:	4b22      	ldr	r3, [pc, #136]	; (1a6a4 <sensor_sim_sample_fetch+0x17c>)
   1a61a:	f7fd ff05 	bl	18428 <__aeabi_dsub>
	temp_sample = base_temp_sample + generate_pseudo_random();
   1a61e:	4b22      	ldr	r3, [pc, #136]	; (1a6a8 <sensor_sim_sample_fetch+0x180>)
   1a620:	2200      	movs	r2, #0
   1a622:	f7fd ff03 	bl	1842c <__adddf3>
   1a626:	4b21      	ldr	r3, [pc, #132]	; (1a6ac <sensor_sim_sample_fetch+0x184>)
	pressure_sample = base_pressure_sample + generate_pseudo_random();
   1a628:	e9c3 0100 	strd	r0, r1, [r3]
   1a62c:	e7a0      	b.n	1a570 <sensor_sim_sample_fetch+0x48>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1a62e:	f022 f96b 	bl	3c908 <rand>
   1a632:	f7fe f847 	bl	186c4 <__aeabi_i2d>
   1a636:	a314      	add	r3, pc, #80	; (adr r3, 1a688 <sensor_sim_sample_fetch+0x160>)
   1a638:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a63c:	f7fe f9d6 	bl	189ec <__aeabi_ddiv>
   1a640:	2200      	movs	r2, #0
   1a642:	4b18      	ldr	r3, [pc, #96]	; (1a6a4 <sensor_sim_sample_fetch+0x17c>)
   1a644:	f7fd fef0 	bl	18428 <__aeabi_dsub>
	humidity_sample = base_humidity_sample + generate_pseudo_random();
   1a648:	4b19      	ldr	r3, [pc, #100]	; (1a6b0 <sensor_sim_sample_fetch+0x188>)
   1a64a:	2200      	movs	r2, #0
   1a64c:	f7fd feee 	bl	1842c <__adddf3>
   1a650:	4b18      	ldr	r3, [pc, #96]	; (1a6b4 <sensor_sim_sample_fetch+0x18c>)
   1a652:	e7e9      	b.n	1a628 <sensor_sim_sample_fetch+0x100>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1a654:	f022 f958 	bl	3c908 <rand>
   1a658:	f7fe f834 	bl	186c4 <__aeabi_i2d>
   1a65c:	a30a      	add	r3, pc, #40	; (adr r3, 1a688 <sensor_sim_sample_fetch+0x160>)
   1a65e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a662:	f7fe f9c3 	bl	189ec <__aeabi_ddiv>
   1a666:	2200      	movs	r2, #0
   1a668:	4b0e      	ldr	r3, [pc, #56]	; (1a6a4 <sensor_sim_sample_fetch+0x17c>)
   1a66a:	f7fd fedd 	bl	18428 <__aeabi_dsub>
	pressure_sample = base_pressure_sample + generate_pseudo_random();
   1a66e:	a308      	add	r3, pc, #32	; (adr r3, 1a690 <sensor_sim_sample_fetch+0x168>)
   1a670:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a674:	f7fd feda 	bl	1842c <__adddf3>
   1a678:	4b0f      	ldr	r3, [pc, #60]	; (1a6b8 <sensor_sim_sample_fetch+0x190>)
   1a67a:	e7d5      	b.n	1a628 <sensor_sim_sample_fetch+0x100>
		return -ENOTSUP;
   1a67c:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return sensor_sim_generate_data(chan);
   1a680:	e777      	b.n	1a572 <sensor_sim_sample_fetch+0x4a>
   1a682:	bf00      	nop
   1a684:	f3af 8000 	nop.w
   1a688:	ffc00000 	.word	0xffc00000
   1a68c:	41cfffff 	.word	0x41cfffff
   1a690:	cccccccd 	.word	0xcccccccd
   1a694:	40588ccc 	.word	0x40588ccc
   1a698:	20031290 	.word	0x20031290
   1a69c:	40340000 	.word	0x40340000
   1a6a0:	20022a68 	.word	0x20022a68
   1a6a4:	3ff00000 	.word	0x3ff00000
   1a6a8:	40350000 	.word	0x40350000
   1a6ac:	20022d78 	.word	0x20022d78
   1a6b0:	404a0000 	.word	0x404a0000
   1a6b4:	20022a80 	.word	0x20022a80
   1a6b8:	20022a88 	.word	0x20022a88
   1a6bc:	00000000 	.word	0x00000000

0001a6c0 <_strtod_l>:
   1a6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6c4:	461f      	mov	r7, r3
   1a6c6:	b0a1      	sub	sp, #132	; 0x84
   1a6c8:	2300      	movs	r3, #0
   1a6ca:	460e      	mov	r6, r1
   1a6cc:	9004      	str	r0, [sp, #16]
   1a6ce:	f04f 0a00 	mov.w	sl, #0
   1a6d2:	931c      	str	r3, [sp, #112]	; 0x70
   1a6d4:	f04f 0b00 	mov.w	fp, #0
   1a6d8:	4b97      	ldr	r3, [pc, #604]	; (1a938 <_strtod_l+0x278>)
   1a6da:	9217      	str	r2, [sp, #92]	; 0x5c
   1a6dc:	681b      	ldr	r3, [r3, #0]
   1a6de:	4618      	mov	r0, r3
   1a6e0:	9305      	str	r3, [sp, #20]
   1a6e2:	f7ff fc4f 	bl	19f84 <strlen>
   1a6e6:	4604      	mov	r4, r0
   1a6e8:	961b      	str	r6, [sp, #108]	; 0x6c
   1a6ea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1a6ec:	7813      	ldrb	r3, [r2, #0]
   1a6ee:	2b0d      	cmp	r3, #13
   1a6f0:	d832      	bhi.n	1a758 <_strtod_l+0x98>
   1a6f2:	2b09      	cmp	r3, #9
   1a6f4:	d236      	bcs.n	1a764 <_strtod_l+0xa4>
   1a6f6:	2b00      	cmp	r3, #0
   1a6f8:	d03e      	beq.n	1a778 <_strtod_l+0xb8>
   1a6fa:	2300      	movs	r3, #0
   1a6fc:	930c      	str	r3, [sp, #48]	; 0x30
   1a6fe:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
   1a700:	782b      	ldrb	r3, [r5, #0]
   1a702:	2b30      	cmp	r3, #48	; 0x30
   1a704:	f040 80a9 	bne.w	1a85a <_strtod_l+0x19a>
   1a708:	786b      	ldrb	r3, [r5, #1]
   1a70a:	2b58      	cmp	r3, #88	; 0x58
   1a70c:	d001      	beq.n	1a712 <_strtod_l+0x52>
   1a70e:	2b78      	cmp	r3, #120	; 0x78
   1a710:	d167      	bne.n	1a7e2 <_strtod_l+0x122>
   1a712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a714:	a91b      	add	r1, sp, #108	; 0x6c
   1a716:	9702      	str	r7, [sp, #8]
   1a718:	9301      	str	r3, [sp, #4]
   1a71a:	ab1c      	add	r3, sp, #112	; 0x70
   1a71c:	4a87      	ldr	r2, [pc, #540]	; (1a93c <_strtod_l+0x27c>)
   1a71e:	9300      	str	r3, [sp, #0]
   1a720:	ab1d      	add	r3, sp, #116	; 0x74
   1a722:	9804      	ldr	r0, [sp, #16]
   1a724:	f022 fd5a 	bl	3d1dc <__gethex>
   1a728:	f010 0407 	ands.w	r4, r0, #7
   1a72c:	4606      	mov	r6, r0
   1a72e:	d005      	beq.n	1a73c <_strtod_l+0x7c>
   1a730:	2c06      	cmp	r4, #6
   1a732:	d12b      	bne.n	1a78c <_strtod_l+0xcc>
   1a734:	3501      	adds	r5, #1
   1a736:	2300      	movs	r3, #0
   1a738:	951b      	str	r5, [sp, #108]	; 0x6c
   1a73a:	930c      	str	r3, [sp, #48]	; 0x30
   1a73c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1a73e:	2b00      	cmp	r3, #0
   1a740:	f040 8572 	bne.w	1b228 <_strtod_l+0xb68>
   1a744:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a746:	b1e3      	cbz	r3, 1a782 <_strtod_l+0xc2>
   1a748:	4652      	mov	r2, sl
   1a74a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   1a74e:	ec43 2b10 	vmov	d0, r2, r3
   1a752:	b021      	add	sp, #132	; 0x84
   1a754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a758:	2b2b      	cmp	r3, #43	; 0x2b
   1a75a:	d006      	beq.n	1a76a <_strtod_l+0xaa>
   1a75c:	2b2d      	cmp	r3, #45	; 0x2d
   1a75e:	d013      	beq.n	1a788 <_strtod_l+0xc8>
   1a760:	2b20      	cmp	r3, #32
   1a762:	d1ca      	bne.n	1a6fa <_strtod_l+0x3a>
   1a764:	3201      	adds	r2, #1
   1a766:	921b      	str	r2, [sp, #108]	; 0x6c
   1a768:	e7bf      	b.n	1a6ea <_strtod_l+0x2a>
   1a76a:	2300      	movs	r3, #0
   1a76c:	930c      	str	r3, [sp, #48]	; 0x30
   1a76e:	1c53      	adds	r3, r2, #1
   1a770:	931b      	str	r3, [sp, #108]	; 0x6c
   1a772:	7853      	ldrb	r3, [r2, #1]
   1a774:	2b00      	cmp	r3, #0
   1a776:	d1c2      	bne.n	1a6fe <_strtod_l+0x3e>
   1a778:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1a77a:	961b      	str	r6, [sp, #108]	; 0x6c
   1a77c:	2b00      	cmp	r3, #0
   1a77e:	f040 8551 	bne.w	1b224 <_strtod_l+0xb64>
   1a782:	4652      	mov	r2, sl
   1a784:	465b      	mov	r3, fp
   1a786:	e7e2      	b.n	1a74e <_strtod_l+0x8e>
   1a788:	2301      	movs	r3, #1
   1a78a:	e7ef      	b.n	1a76c <_strtod_l+0xac>
   1a78c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1a78e:	b13a      	cbz	r2, 1a7a0 <_strtod_l+0xe0>
   1a790:	2135      	movs	r1, #53	; 0x35
   1a792:	a81e      	add	r0, sp, #120	; 0x78
   1a794:	f027 fa66 	bl	41c64 <__copybits>
   1a798:	991c      	ldr	r1, [sp, #112]	; 0x70
   1a79a:	9804      	ldr	r0, [sp, #16]
   1a79c:	f026 ff9a 	bl	416d4 <_Bfree>
   1a7a0:	3c01      	subs	r4, #1
   1a7a2:	2c04      	cmp	r4, #4
   1a7a4:	d806      	bhi.n	1a7b4 <_strtod_l+0xf4>
   1a7a6:	e8df f004 	tbb	[pc, r4]
   1a7aa:	030a      	.short	0x030a
   1a7ac:	1714      	.short	0x1714
   1a7ae:	0a          	.byte	0x0a
   1a7af:	00          	.byte	0x00
   1a7b0:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
   1a7b4:	0731      	lsls	r1, r6, #28
   1a7b6:	d5c1      	bpl.n	1a73c <_strtod_l+0x7c>
   1a7b8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   1a7bc:	e7be      	b.n	1a73c <_strtod_l+0x7c>
   1a7be:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
   1a7c2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1a7c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1a7c8:	f202 4233 	addw	r2, r2, #1075	; 0x433
   1a7cc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   1a7d0:	e7f0      	b.n	1a7b4 <_strtod_l+0xf4>
   1a7d2:	f8df b16c 	ldr.w	fp, [pc, #364]	; 1a940 <_strtod_l+0x280>
   1a7d6:	e7ed      	b.n	1a7b4 <_strtod_l+0xf4>
   1a7d8:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   1a7dc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   1a7e0:	e7e8      	b.n	1a7b4 <_strtod_l+0xf4>
   1a7e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1a7e4:	1c5a      	adds	r2, r3, #1
   1a7e6:	921b      	str	r2, [sp, #108]	; 0x6c
   1a7e8:	785b      	ldrb	r3, [r3, #1]
   1a7ea:	2b30      	cmp	r3, #48	; 0x30
   1a7ec:	d0f9      	beq.n	1a7e2 <_strtod_l+0x122>
   1a7ee:	2b00      	cmp	r3, #0
   1a7f0:	d0a4      	beq.n	1a73c <_strtod_l+0x7c>
   1a7f2:	2301      	movs	r3, #1
   1a7f4:	f04f 0900 	mov.w	r9, #0
   1a7f8:	9306      	str	r3, [sp, #24]
   1a7fa:	220a      	movs	r2, #10
   1a7fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1a7fe:	46c8      	mov	r8, r9
   1a800:	f8cd 901c 	str.w	r9, [sp, #28]
   1a804:	9309      	str	r3, [sp, #36]	; 0x24
   1a806:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1a808:	7805      	ldrb	r5, [r0, #0]
   1a80a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
   1a80e:	b2d9      	uxtb	r1, r3
   1a810:	2909      	cmp	r1, #9
   1a812:	d924      	bls.n	1a85e <_strtod_l+0x19e>
   1a814:	4622      	mov	r2, r4
   1a816:	9905      	ldr	r1, [sp, #20]
   1a818:	f026 fc7f 	bl	4111a <strncmp>
   1a81c:	b378      	cbz	r0, 1a87e <_strtod_l+0x1be>
   1a81e:	2000      	movs	r0, #0
   1a820:	462b      	mov	r3, r5
   1a822:	4644      	mov	r4, r8
   1a824:	4602      	mov	r2, r0
   1a826:	9005      	str	r0, [sp, #20]
   1a828:	2b65      	cmp	r3, #101	; 0x65
   1a82a:	d001      	beq.n	1a830 <_strtod_l+0x170>
   1a82c:	2b45      	cmp	r3, #69	; 0x45
   1a82e:	d112      	bne.n	1a856 <_strtod_l+0x196>
   1a830:	b91c      	cbnz	r4, 1a83a <_strtod_l+0x17a>
   1a832:	9b06      	ldr	r3, [sp, #24]
   1a834:	4303      	orrs	r3, r0
   1a836:	d09f      	beq.n	1a778 <_strtod_l+0xb8>
   1a838:	2400      	movs	r4, #0
   1a83a:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
   1a83c:	1c73      	adds	r3, r6, #1
   1a83e:	931b      	str	r3, [sp, #108]	; 0x6c
   1a840:	7873      	ldrb	r3, [r6, #1]
   1a842:	2b2b      	cmp	r3, #43	; 0x2b
   1a844:	d071      	beq.n	1a92a <_strtod_l+0x26a>
   1a846:	2b2d      	cmp	r3, #45	; 0x2d
   1a848:	d074      	beq.n	1a934 <_strtod_l+0x274>
   1a84a:	2700      	movs	r7, #0
   1a84c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1a850:	2909      	cmp	r1, #9
   1a852:	d97b      	bls.n	1a94c <_strtod_l+0x28c>
   1a854:	961b      	str	r6, [sp, #108]	; 0x6c
   1a856:	2500      	movs	r5, #0
   1a858:	e098      	b.n	1a98c <_strtod_l+0x2cc>
   1a85a:	2300      	movs	r3, #0
   1a85c:	e7ca      	b.n	1a7f4 <_strtod_l+0x134>
   1a85e:	f1b8 0f08 	cmp.w	r8, #8
   1a862:	f100 0001 	add.w	r0, r0, #1
   1a866:	f108 0801 	add.w	r8, r8, #1
   1a86a:	bfd4      	ite	le
   1a86c:	9907      	ldrle	r1, [sp, #28]
   1a86e:	fb02 3909 	mlagt	r9, r2, r9, r3
   1a872:	901b      	str	r0, [sp, #108]	; 0x6c
   1a874:	bfdc      	itt	le
   1a876:	fb02 3301 	mlale	r3, r2, r1, r3
   1a87a:	9307      	strle	r3, [sp, #28]
   1a87c:	e7c3      	b.n	1a806 <_strtod_l+0x146>
   1a87e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1a880:	191a      	adds	r2, r3, r4
   1a882:	921b      	str	r2, [sp, #108]	; 0x6c
   1a884:	5d1b      	ldrb	r3, [r3, r4]
   1a886:	f1b8 0f00 	cmp.w	r8, #0
   1a88a:	d035      	beq.n	1a8f8 <_strtod_l+0x238>
   1a88c:	4644      	mov	r4, r8
   1a88e:	9005      	str	r0, [sp, #20]
   1a890:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1a894:	2a09      	cmp	r2, #9
   1a896:	d912      	bls.n	1a8be <_strtod_l+0x1fe>
   1a898:	2201      	movs	r2, #1
   1a89a:	e7c5      	b.n	1a828 <_strtod_l+0x168>
   1a89c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1a89e:	3001      	adds	r0, #1
   1a8a0:	1c5a      	adds	r2, r3, #1
   1a8a2:	921b      	str	r2, [sp, #108]	; 0x6c
   1a8a4:	785b      	ldrb	r3, [r3, #1]
   1a8a6:	2b30      	cmp	r3, #48	; 0x30
   1a8a8:	d0f8      	beq.n	1a89c <_strtod_l+0x1dc>
   1a8aa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   1a8ae:	2a08      	cmp	r2, #8
   1a8b0:	f200 84bf 	bhi.w	1b232 <_strtod_l+0xb72>
   1a8b4:	9005      	str	r0, [sp, #20]
   1a8b6:	2000      	movs	r0, #0
   1a8b8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1a8ba:	4604      	mov	r4, r0
   1a8bc:	9209      	str	r2, [sp, #36]	; 0x24
   1a8be:	3b30      	subs	r3, #48	; 0x30
   1a8c0:	f100 0201 	add.w	r2, r0, #1
   1a8c4:	d012      	beq.n	1a8ec <_strtod_l+0x22c>
   1a8c6:	9905      	ldr	r1, [sp, #20]
   1a8c8:	1905      	adds	r5, r0, r4
   1a8ca:	4411      	add	r1, r2
   1a8cc:	4622      	mov	r2, r4
   1a8ce:	9105      	str	r1, [sp, #20]
   1a8d0:	210a      	movs	r1, #10
   1a8d2:	42aa      	cmp	r2, r5
   1a8d4:	d112      	bne.n	1a8fc <_strtod_l+0x23c>
   1a8d6:	1822      	adds	r2, r4, r0
   1a8d8:	3401      	adds	r4, #1
   1a8da:	2a08      	cmp	r2, #8
   1a8dc:	4404      	add	r4, r0
   1a8de:	dc1a      	bgt.n	1a916 <_strtod_l+0x256>
   1a8e0:	9907      	ldr	r1, [sp, #28]
   1a8e2:	220a      	movs	r2, #10
   1a8e4:	fb02 3301 	mla	r3, r2, r1, r3
   1a8e8:	9307      	str	r3, [sp, #28]
   1a8ea:	2200      	movs	r2, #0
   1a8ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1a8ee:	4610      	mov	r0, r2
   1a8f0:	1c59      	adds	r1, r3, #1
   1a8f2:	911b      	str	r1, [sp, #108]	; 0x6c
   1a8f4:	785b      	ldrb	r3, [r3, #1]
   1a8f6:	e7cb      	b.n	1a890 <_strtod_l+0x1d0>
   1a8f8:	4640      	mov	r0, r8
   1a8fa:	e7d4      	b.n	1a8a6 <_strtod_l+0x1e6>
   1a8fc:	2a08      	cmp	r2, #8
   1a8fe:	dc04      	bgt.n	1a90a <_strtod_l+0x24a>
   1a900:	9f07      	ldr	r7, [sp, #28]
   1a902:	434f      	muls	r7, r1
   1a904:	9707      	str	r7, [sp, #28]
   1a906:	3201      	adds	r2, #1
   1a908:	e7e3      	b.n	1a8d2 <_strtod_l+0x212>
   1a90a:	1c57      	adds	r7, r2, #1
   1a90c:	2f10      	cmp	r7, #16
   1a90e:	bfd8      	it	le
   1a910:	fb01 f909 	mulle.w	r9, r1, r9
   1a914:	e7f7      	b.n	1a906 <_strtod_l+0x246>
   1a916:	2c10      	cmp	r4, #16
   1a918:	bfdc      	itt	le
   1a91a:	220a      	movle	r2, #10
   1a91c:	fb02 3909 	mlale	r9, r2, r9, r3
   1a920:	e7e3      	b.n	1a8ea <_strtod_l+0x22a>
   1a922:	2300      	movs	r3, #0
   1a924:	2201      	movs	r2, #1
   1a926:	9305      	str	r3, [sp, #20]
   1a928:	e783      	b.n	1a832 <_strtod_l+0x172>
   1a92a:	2700      	movs	r7, #0
   1a92c:	1cb3      	adds	r3, r6, #2
   1a92e:	931b      	str	r3, [sp, #108]	; 0x6c
   1a930:	78b3      	ldrb	r3, [r6, #2]
   1a932:	e78b      	b.n	1a84c <_strtod_l+0x18c>
   1a934:	2701      	movs	r7, #1
   1a936:	e7f9      	b.n	1a92c <_strtod_l+0x26c>
   1a938:	00044030 	.word	0x00044030
   1a93c:	00043fa8 	.word	0x00043fa8
   1a940:	7ff00000 	.word	0x7ff00000
   1a944:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1a946:	1c59      	adds	r1, r3, #1
   1a948:	911b      	str	r1, [sp, #108]	; 0x6c
   1a94a:	785b      	ldrb	r3, [r3, #1]
   1a94c:	2b30      	cmp	r3, #48	; 0x30
   1a94e:	d0f9      	beq.n	1a944 <_strtod_l+0x284>
   1a950:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   1a954:	2908      	cmp	r1, #8
   1a956:	f63f af7e 	bhi.w	1a856 <_strtod_l+0x196>
   1a95a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
   1a95e:	f04f 0e0a 	mov.w	lr, #10
   1a962:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1a964:	9308      	str	r3, [sp, #32]
   1a966:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1a968:	1c59      	adds	r1, r3, #1
   1a96a:	911b      	str	r1, [sp, #108]	; 0x6c
   1a96c:	785b      	ldrb	r3, [r3, #1]
   1a96e:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
   1a972:	2d09      	cmp	r5, #9
   1a974:	d92e      	bls.n	1a9d4 <_strtod_l+0x314>
   1a976:	9d08      	ldr	r5, [sp, #32]
   1a978:	1b49      	subs	r1, r1, r5
   1a97a:	f644 651f 	movw	r5, #19999	; 0x4e1f
   1a97e:	2908      	cmp	r1, #8
   1a980:	dc02      	bgt.n	1a988 <_strtod_l+0x2c8>
   1a982:	4565      	cmp	r5, ip
   1a984:	bfa8      	it	ge
   1a986:	4665      	movge	r5, ip
   1a988:	b107      	cbz	r7, 1a98c <_strtod_l+0x2cc>
   1a98a:	426d      	negs	r5, r5
   1a98c:	2c00      	cmp	r4, #0
   1a98e:	d14b      	bne.n	1aa28 <_strtod_l+0x368>
   1a990:	9906      	ldr	r1, [sp, #24]
   1a992:	4301      	orrs	r1, r0
   1a994:	f47f aed2 	bne.w	1a73c <_strtod_l+0x7c>
   1a998:	2a00      	cmp	r2, #0
   1a99a:	f47f aeed 	bne.w	1a778 <_strtod_l+0xb8>
   1a99e:	2b4e      	cmp	r3, #78	; 0x4e
   1a9a0:	d022      	beq.n	1a9e8 <_strtod_l+0x328>
   1a9a2:	dc1c      	bgt.n	1a9de <_strtod_l+0x31e>
   1a9a4:	2b49      	cmp	r3, #73	; 0x49
   1a9a6:	f47f aee7 	bne.w	1a778 <_strtod_l+0xb8>
   1a9aa:	499a      	ldr	r1, [pc, #616]	; (1ac14 <_strtod_l+0x554>)
   1a9ac:	a81b      	add	r0, sp, #108	; 0x6c
   1a9ae:	f026 fd66 	bl	4147e <__match>
   1a9b2:	2800      	cmp	r0, #0
   1a9b4:	f43f aee0 	beq.w	1a778 <_strtod_l+0xb8>
   1a9b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1a9ba:	a81b      	add	r0, sp, #108	; 0x6c
   1a9bc:	4996      	ldr	r1, [pc, #600]	; (1ac18 <_strtod_l+0x558>)
   1a9be:	3b01      	subs	r3, #1
   1a9c0:	931b      	str	r3, [sp, #108]	; 0x6c
   1a9c2:	f026 fd5c 	bl	4147e <__match>
   1a9c6:	b910      	cbnz	r0, 1a9ce <_strtod_l+0x30e>
   1a9c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1a9ca:	3301      	adds	r3, #1
   1a9cc:	931b      	str	r3, [sp, #108]	; 0x6c
   1a9ce:	f8df b260 	ldr.w	fp, [pc, #608]	; 1ac30 <_strtod_l+0x570>
   1a9d2:	e6b3      	b.n	1a73c <_strtod_l+0x7c>
   1a9d4:	fb0e 3c0c 	mla	ip, lr, ip, r3
   1a9d8:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
   1a9dc:	e7c3      	b.n	1a966 <_strtod_l+0x2a6>
   1a9de:	2b69      	cmp	r3, #105	; 0x69
   1a9e0:	d0e3      	beq.n	1a9aa <_strtod_l+0x2ea>
   1a9e2:	2b6e      	cmp	r3, #110	; 0x6e
   1a9e4:	f47f aec8 	bne.w	1a778 <_strtod_l+0xb8>
   1a9e8:	498c      	ldr	r1, [pc, #560]	; (1ac1c <_strtod_l+0x55c>)
   1a9ea:	a81b      	add	r0, sp, #108	; 0x6c
   1a9ec:	f026 fd47 	bl	4147e <__match>
   1a9f0:	2800      	cmp	r0, #0
   1a9f2:	f43f aec1 	beq.w	1a778 <_strtod_l+0xb8>
   1a9f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1a9f8:	781b      	ldrb	r3, [r3, #0]
   1a9fa:	2b28      	cmp	r3, #40	; 0x28
   1a9fc:	d10e      	bne.n	1aa1c <_strtod_l+0x35c>
   1a9fe:	aa1e      	add	r2, sp, #120	; 0x78
   1aa00:	4987      	ldr	r1, [pc, #540]	; (1ac20 <_strtod_l+0x560>)
   1aa02:	a81b      	add	r0, sp, #108	; 0x6c
   1aa04:	f026 fd4f 	bl	414a6 <__hexnan>
   1aa08:	2805      	cmp	r0, #5
   1aa0a:	d107      	bne.n	1aa1c <_strtod_l+0x35c>
   1aa0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1aa0e:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
   1aa12:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   1aa16:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   1aa1a:	e68f      	b.n	1a73c <_strtod_l+0x7c>
   1aa1c:	4881      	ldr	r0, [pc, #516]	; (1ac24 <_strtod_l+0x564>)
   1aa1e:	f001 f9c7 	bl	1bdb0 <nan>
   1aa22:	ec5b ab10 	vmov	sl, fp, d0
   1aa26:	e689      	b.n	1a73c <_strtod_l+0x7c>
   1aa28:	9b05      	ldr	r3, [sp, #20]
   1aa2a:	f1b8 0f00 	cmp.w	r8, #0
   1aa2e:	bf08      	it	eq
   1aa30:	46a0      	moveq	r8, r4
   1aa32:	2c10      	cmp	r4, #16
   1aa34:	9807      	ldr	r0, [sp, #28]
   1aa36:	eba5 0303 	sub.w	r3, r5, r3
   1aa3a:	4626      	mov	r6, r4
   1aa3c:	bfa8      	it	ge
   1aa3e:	2610      	movge	r6, #16
   1aa40:	9308      	str	r3, [sp, #32]
   1aa42:	f7fd fe2f 	bl	186a4 <__aeabi_ui2d>
   1aa46:	2c09      	cmp	r4, #9
   1aa48:	4682      	mov	sl, r0
   1aa4a:	468b      	mov	fp, r1
   1aa4c:	dd13      	ble.n	1aa76 <_strtod_l+0x3b6>
   1aa4e:	4b76      	ldr	r3, [pc, #472]	; (1ac28 <_strtod_l+0x568>)
   1aa50:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1aa54:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   1aa58:	f7fd fe9e 	bl	18798 <__aeabi_dmul>
   1aa5c:	4682      	mov	sl, r0
   1aa5e:	468b      	mov	fp, r1
   1aa60:	4648      	mov	r0, r9
   1aa62:	f7fd fe1f 	bl	186a4 <__aeabi_ui2d>
   1aa66:	4602      	mov	r2, r0
   1aa68:	460b      	mov	r3, r1
   1aa6a:	4650      	mov	r0, sl
   1aa6c:	4659      	mov	r1, fp
   1aa6e:	f7fd fcdd 	bl	1842c <__adddf3>
   1aa72:	4682      	mov	sl, r0
   1aa74:	468b      	mov	fp, r1
   1aa76:	2c0f      	cmp	r4, #15
   1aa78:	dc38      	bgt.n	1aaec <_strtod_l+0x42c>
   1aa7a:	9b08      	ldr	r3, [sp, #32]
   1aa7c:	2b00      	cmp	r3, #0
   1aa7e:	f43f ae5d 	beq.w	1a73c <_strtod_l+0x7c>
   1aa82:	dd24      	ble.n	1aace <_strtod_l+0x40e>
   1aa84:	2b16      	cmp	r3, #22
   1aa86:	dc0b      	bgt.n	1aaa0 <_strtod_l+0x3e0>
   1aa88:	4c67      	ldr	r4, [pc, #412]	; (1ac28 <_strtod_l+0x568>)
   1aa8a:	4652      	mov	r2, sl
   1aa8c:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   1aa90:	465b      	mov	r3, fp
   1aa92:	e9d4 0100 	ldrd	r0, r1, [r4]
   1aa96:	f7fd fe7f 	bl	18798 <__aeabi_dmul>
   1aa9a:	4682      	mov	sl, r0
   1aa9c:	468b      	mov	fp, r1
   1aa9e:	e64d      	b.n	1a73c <_strtod_l+0x7c>
   1aaa0:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
   1aaa4:	9a08      	ldr	r2, [sp, #32]
   1aaa6:	4293      	cmp	r3, r2
   1aaa8:	db20      	blt.n	1aaec <_strtod_l+0x42c>
   1aaaa:	f1c4 040f 	rsb	r4, r4, #15
   1aaae:	4d5e      	ldr	r5, [pc, #376]	; (1ac28 <_strtod_l+0x568>)
   1aab0:	4652      	mov	r2, sl
   1aab2:	465b      	mov	r3, fp
   1aab4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
   1aab8:	e9d1 0100 	ldrd	r0, r1, [r1]
   1aabc:	f7fd fe6c 	bl	18798 <__aeabi_dmul>
   1aac0:	9b08      	ldr	r3, [sp, #32]
   1aac2:	1b1c      	subs	r4, r3, r4
   1aac4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1aac8:	e9d5 2300 	ldrd	r2, r3, [r5]
   1aacc:	e7e3      	b.n	1aa96 <_strtod_l+0x3d6>
   1aace:	9b08      	ldr	r3, [sp, #32]
   1aad0:	3316      	adds	r3, #22
   1aad2:	db0b      	blt.n	1aaec <_strtod_l+0x42c>
   1aad4:	9b05      	ldr	r3, [sp, #20]
   1aad6:	4650      	mov	r0, sl
   1aad8:	4a53      	ldr	r2, [pc, #332]	; (1ac28 <_strtod_l+0x568>)
   1aada:	4659      	mov	r1, fp
   1aadc:	1b5d      	subs	r5, r3, r5
   1aade:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
   1aae2:	e9d5 2300 	ldrd	r2, r3, [r5]
   1aae6:	f7fd ff81 	bl	189ec <__aeabi_ddiv>
   1aaea:	e7d6      	b.n	1aa9a <_strtod_l+0x3da>
   1aaec:	1ba6      	subs	r6, r4, r6
   1aaee:	9b08      	ldr	r3, [sp, #32]
   1aaf0:	441e      	add	r6, r3
   1aaf2:	2e00      	cmp	r6, #0
   1aaf4:	dd6e      	ble.n	1abd4 <_strtod_l+0x514>
   1aaf6:	f016 030f 	ands.w	r3, r6, #15
   1aafa:	d00a      	beq.n	1ab12 <_strtod_l+0x452>
   1aafc:	494a      	ldr	r1, [pc, #296]	; (1ac28 <_strtod_l+0x568>)
   1aafe:	4652      	mov	r2, sl
   1ab00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1ab04:	465b      	mov	r3, fp
   1ab06:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ab0a:	f7fd fe45 	bl	18798 <__aeabi_dmul>
   1ab0e:	4682      	mov	sl, r0
   1ab10:	468b      	mov	fp, r1
   1ab12:	f036 060f 	bics.w	r6, r6, #15
   1ab16:	d04e      	beq.n	1abb6 <_strtod_l+0x4f6>
   1ab18:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
   1ab1c:	dd23      	ble.n	1ab66 <_strtod_l+0x4a6>
   1ab1e:	2400      	movs	r4, #0
   1ab20:	9405      	str	r4, [sp, #20]
   1ab22:	9409      	str	r4, [sp, #36]	; 0x24
   1ab24:	9407      	str	r4, [sp, #28]
   1ab26:	2322      	movs	r3, #34	; 0x22
   1ab28:	9a04      	ldr	r2, [sp, #16]
   1ab2a:	f8df b104 	ldr.w	fp, [pc, #260]	; 1ac30 <_strtod_l+0x570>
   1ab2e:	f04f 0a00 	mov.w	sl, #0
   1ab32:	6013      	str	r3, [r2, #0]
   1ab34:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ab36:	2b00      	cmp	r3, #0
   1ab38:	f43f ae00 	beq.w	1a73c <_strtod_l+0x7c>
   1ab3c:	991c      	ldr	r1, [sp, #112]	; 0x70
   1ab3e:	9804      	ldr	r0, [sp, #16]
   1ab40:	f026 fdc8 	bl	416d4 <_Bfree>
   1ab44:	9907      	ldr	r1, [sp, #28]
   1ab46:	9804      	ldr	r0, [sp, #16]
   1ab48:	f026 fdc4 	bl	416d4 <_Bfree>
   1ab4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1ab50:	f026 fdc0 	bl	416d4 <_Bfree>
   1ab54:	9909      	ldr	r1, [sp, #36]	; 0x24
   1ab56:	9804      	ldr	r0, [sp, #16]
   1ab58:	f026 fdbc 	bl	416d4 <_Bfree>
   1ab5c:	4621      	mov	r1, r4
   1ab5e:	9804      	ldr	r0, [sp, #16]
   1ab60:	f026 fdb8 	bl	416d4 <_Bfree>
   1ab64:	e5ea      	b.n	1a73c <_strtod_l+0x7c>
   1ab66:	2300      	movs	r3, #0
   1ab68:	1136      	asrs	r6, r6, #4
   1ab6a:	4650      	mov	r0, sl
   1ab6c:	4659      	mov	r1, fp
   1ab6e:	461f      	mov	r7, r3
   1ab70:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 1ac2c <_strtod_l+0x56c>
   1ab74:	2e01      	cmp	r6, #1
   1ab76:	dc21      	bgt.n	1abbc <_strtod_l+0x4fc>
   1ab78:	b10b      	cbz	r3, 1ab7e <_strtod_l+0x4be>
   1ab7a:	4682      	mov	sl, r0
   1ab7c:	468b      	mov	fp, r1
   1ab7e:	4b2b      	ldr	r3, [pc, #172]	; (1ac2c <_strtod_l+0x56c>)
   1ab80:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   1ab84:	4652      	mov	r2, sl
   1ab86:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   1ab8a:	465b      	mov	r3, fp
   1ab8c:	e9d7 0100 	ldrd	r0, r1, [r7]
   1ab90:	f7fd fe02 	bl	18798 <__aeabi_dmul>
   1ab94:	4b26      	ldr	r3, [pc, #152]	; (1ac30 <_strtod_l+0x570>)
   1ab96:	460a      	mov	r2, r1
   1ab98:	4682      	mov	sl, r0
   1ab9a:	400b      	ands	r3, r1
   1ab9c:	4925      	ldr	r1, [pc, #148]	; (1ac34 <_strtod_l+0x574>)
   1ab9e:	428b      	cmp	r3, r1
   1aba0:	d8bd      	bhi.n	1ab1e <_strtod_l+0x45e>
   1aba2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   1aba6:	428b      	cmp	r3, r1
   1aba8:	bf86      	itte	hi
   1abaa:	f8df b08c 	ldrhi.w	fp, [pc, #140]	; 1ac38 <_strtod_l+0x578>
   1abae:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   1abb2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   1abb6:	2300      	movs	r3, #0
   1abb8:	9306      	str	r3, [sp, #24]
   1abba:	e078      	b.n	1acae <_strtod_l+0x5ee>
   1abbc:	07f2      	lsls	r2, r6, #31
   1abbe:	d506      	bpl.n	1abce <_strtod_l+0x50e>
   1abc0:	eb09 03c7 	add.w	r3, r9, r7, lsl #3
   1abc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1abc8:	f7fd fde6 	bl	18798 <__aeabi_dmul>
   1abcc:	2301      	movs	r3, #1
   1abce:	3701      	adds	r7, #1
   1abd0:	1076      	asrs	r6, r6, #1
   1abd2:	e7cf      	b.n	1ab74 <_strtod_l+0x4b4>
   1abd4:	d0ef      	beq.n	1abb6 <_strtod_l+0x4f6>
   1abd6:	4276      	negs	r6, r6
   1abd8:	f016 020f 	ands.w	r2, r6, #15
   1abdc:	d00a      	beq.n	1abf4 <_strtod_l+0x534>
   1abde:	4b12      	ldr	r3, [pc, #72]	; (1ac28 <_strtod_l+0x568>)
   1abe0:	4650      	mov	r0, sl
   1abe2:	4659      	mov	r1, fp
   1abe4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1abe8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1abec:	f7fd fefe 	bl	189ec <__aeabi_ddiv>
   1abf0:	4682      	mov	sl, r0
   1abf2:	468b      	mov	fp, r1
   1abf4:	1136      	asrs	r6, r6, #4
   1abf6:	d0de      	beq.n	1abb6 <_strtod_l+0x4f6>
   1abf8:	2e1f      	cmp	r6, #31
   1abfa:	dd1f      	ble.n	1ac3c <_strtod_l+0x57c>
   1abfc:	2400      	movs	r4, #0
   1abfe:	9405      	str	r4, [sp, #20]
   1ac00:	9409      	str	r4, [sp, #36]	; 0x24
   1ac02:	9407      	str	r4, [sp, #28]
   1ac04:	2322      	movs	r3, #34	; 0x22
   1ac06:	9a04      	ldr	r2, [sp, #16]
   1ac08:	f04f 0a00 	mov.w	sl, #0
   1ac0c:	f04f 0b00 	mov.w	fp, #0
   1ac10:	6013      	str	r3, [r2, #0]
   1ac12:	e78f      	b.n	1ab34 <_strtod_l+0x474>
   1ac14:	000450d1 	.word	0x000450d1
   1ac18:	0004981a 	.word	0x0004981a
   1ac1c:	000497c4 	.word	0x000497c4
   1ac20:	00043fbc 	.word	0x00043fbc
   1ac24:	000490e1 	.word	0x000490e1
   1ac28:	000424a8 	.word	0x000424a8
   1ac2c:	00042480 	.word	0x00042480
   1ac30:	7ff00000 	.word	0x7ff00000
   1ac34:	7ca00000 	.word	0x7ca00000
   1ac38:	7fefffff 	.word	0x7fefffff
   1ac3c:	f016 0310 	ands.w	r3, r6, #16
   1ac40:	4650      	mov	r0, sl
   1ac42:	4659      	mov	r1, fp
   1ac44:	4fac      	ldr	r7, [pc, #688]	; (1aef8 <_strtod_l+0x838>)
   1ac46:	bf18      	it	ne
   1ac48:	236a      	movne	r3, #106	; 0x6a
   1ac4a:	9306      	str	r3, [sp, #24]
   1ac4c:	2300      	movs	r3, #0
   1ac4e:	07f2      	lsls	r2, r6, #31
   1ac50:	d504      	bpl.n	1ac5c <_strtod_l+0x59c>
   1ac52:	e9d7 2300 	ldrd	r2, r3, [r7]
   1ac56:	f7fd fd9f 	bl	18798 <__aeabi_dmul>
   1ac5a:	2301      	movs	r3, #1
   1ac5c:	1076      	asrs	r6, r6, #1
   1ac5e:	f107 0708 	add.w	r7, r7, #8
   1ac62:	d1f4      	bne.n	1ac4e <_strtod_l+0x58e>
   1ac64:	b10b      	cbz	r3, 1ac6a <_strtod_l+0x5aa>
   1ac66:	4682      	mov	sl, r0
   1ac68:	468b      	mov	fp, r1
   1ac6a:	9b06      	ldr	r3, [sp, #24]
   1ac6c:	b1bb      	cbz	r3, 1ac9e <_strtod_l+0x5de>
   1ac6e:	f3cb 530a 	ubfx	r3, fp, #20, #11
   1ac72:	4659      	mov	r1, fp
   1ac74:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1ac78:	2b00      	cmp	r3, #0
   1ac7a:	dd10      	ble.n	1ac9e <_strtod_l+0x5de>
   1ac7c:	2b1f      	cmp	r3, #31
   1ac7e:	f340 8126 	ble.w	1aece <_strtod_l+0x80e>
   1ac82:	2b34      	cmp	r3, #52	; 0x34
   1ac84:	f04f 0a00 	mov.w	sl, #0
   1ac88:	bfdb      	ittet	le
   1ac8a:	3b20      	suble	r3, #32
   1ac8c:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   1ac90:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   1ac94:	fa02 f303 	lslle.w	r3, r2, r3
   1ac98:	bfd8      	it	le
   1ac9a:	ea03 0b01 	andle.w	fp, r3, r1
   1ac9e:	2200      	movs	r2, #0
   1aca0:	2300      	movs	r3, #0
   1aca2:	4650      	mov	r0, sl
   1aca4:	4659      	mov	r1, fp
   1aca6:	f7fd ffdf 	bl	18c68 <__aeabi_dcmpeq>
   1acaa:	2800      	cmp	r0, #0
   1acac:	d1a6      	bne.n	1abfc <_strtod_l+0x53c>
   1acae:	9b07      	ldr	r3, [sp, #28]
   1acb0:	4642      	mov	r2, r8
   1acb2:	9909      	ldr	r1, [sp, #36]	; 0x24
   1acb4:	9300      	str	r3, [sp, #0]
   1acb6:	4623      	mov	r3, r4
   1acb8:	9804      	ldr	r0, [sp, #16]
   1acba:	f026 fd5f 	bl	4177c <__s2b>
   1acbe:	9009      	str	r0, [sp, #36]	; 0x24
   1acc0:	2800      	cmp	r0, #0
   1acc2:	f43f af2c 	beq.w	1ab1e <_strtod_l+0x45e>
   1acc6:	9b05      	ldr	r3, [sp, #20]
   1acc8:	2400      	movs	r4, #0
   1acca:	1b5d      	subs	r5, r3, r5
   1accc:	9b08      	ldr	r3, [sp, #32]
   1acce:	9405      	str	r4, [sp, #20]
   1acd0:	2b00      	cmp	r3, #0
   1acd2:	bfb4      	ite	lt
   1acd4:	462b      	movlt	r3, r5
   1acd6:	2300      	movge	r3, #0
   1acd8:	930e      	str	r3, [sp, #56]	; 0x38
   1acda:	9b08      	ldr	r3, [sp, #32]
   1acdc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1ace0:	9316      	str	r3, [sp, #88]	; 0x58
   1ace2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ace4:	9804      	ldr	r0, [sp, #16]
   1ace6:	6859      	ldr	r1, [r3, #4]
   1ace8:	f026 fcc0 	bl	4166c <_Balloc>
   1acec:	9007      	str	r0, [sp, #28]
   1acee:	2800      	cmp	r0, #0
   1acf0:	f43f af19 	beq.w	1ab26 <_strtod_l+0x466>
   1acf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1acf6:	300c      	adds	r0, #12
   1acf8:	691a      	ldr	r2, [r3, #16]
   1acfa:	f103 010c 	add.w	r1, r3, #12
   1acfe:	3202      	adds	r2, #2
   1ad00:	0092      	lsls	r2, r2, #2
   1ad02:	f026 f82d 	bl	40d60 <memcpy>
   1ad06:	aa1e      	add	r2, sp, #120	; 0x78
   1ad08:	a91d      	add	r1, sp, #116	; 0x74
   1ad0a:	9804      	ldr	r0, [sp, #16]
   1ad0c:	ec4b ab10 	vmov	d0, sl, fp
   1ad10:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   1ad14:	f026 ff25 	bl	41b62 <__d2b>
   1ad18:	901c      	str	r0, [sp, #112]	; 0x70
   1ad1a:	2800      	cmp	r0, #0
   1ad1c:	f43f af03 	beq.w	1ab26 <_strtod_l+0x466>
   1ad20:	2101      	movs	r1, #1
   1ad22:	9804      	ldr	r0, [sp, #16]
   1ad24:	f026 fdb8 	bl	41898 <__i2b>
   1ad28:	9005      	str	r0, [sp, #20]
   1ad2a:	4603      	mov	r3, r0
   1ad2c:	2800      	cmp	r0, #0
   1ad2e:	f43f aefa 	beq.w	1ab26 <_strtod_l+0x466>
   1ad32:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   1ad34:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1ad36:	2e00      	cmp	r6, #0
   1ad38:	bfa9      	itett	ge
   1ad3a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
   1ad3c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
   1ad3e:	18f7      	addge	r7, r6, r3
   1ad40:	9d16      	ldrge	r5, [sp, #88]	; 0x58
   1ad42:	bfb8      	it	lt
   1ad44:	1b9d      	sublt	r5, r3, r6
   1ad46:	9b06      	ldr	r3, [sp, #24]
   1ad48:	bfb8      	it	lt
   1ad4a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
   1ad4c:	1af6      	subs	r6, r6, r3
   1ad4e:	4b6b      	ldr	r3, [pc, #428]	; (1aefc <_strtod_l+0x83c>)
   1ad50:	4416      	add	r6, r2
   1ad52:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   1ad56:	3e01      	subs	r6, #1
   1ad58:	429e      	cmp	r6, r3
   1ad5a:	f280 80bf 	bge.w	1aedc <_strtod_l+0x81c>
   1ad5e:	1b9b      	subs	r3, r3, r6
   1ad60:	f04f 0801 	mov.w	r8, #1
   1ad64:	2b1f      	cmp	r3, #31
   1ad66:	eba2 0203 	sub.w	r2, r2, r3
   1ad6a:	bfcd      	iteet	gt
   1ad6c:	f1c6 467f 	rsbgt	r6, r6, #4278190080	; 0xff000000
   1ad70:	fa08 f803 	lslle.w	r8, r8, r3
   1ad74:	2600      	movle	r6, #0
   1ad76:	f506 067f 	addgt.w	r6, r6, #16711680	; 0xff0000
   1ad7a:	bfc2      	ittt	gt
   1ad7c:	f506 467b 	addgt.w	r6, r6, #64256	; 0xfb00
   1ad80:	36e2      	addgt	r6, #226	; 0xe2
   1ad82:	fa08 f606 	lslgt.w	r6, r8, r6
   1ad86:	eb07 0902 	add.w	r9, r7, r2
   1ad8a:	9b06      	ldr	r3, [sp, #24]
   1ad8c:	4415      	add	r5, r2
   1ad8e:	454f      	cmp	r7, r9
   1ad90:	441d      	add	r5, r3
   1ad92:	463b      	mov	r3, r7
   1ad94:	bfa8      	it	ge
   1ad96:	464b      	movge	r3, r9
   1ad98:	42ab      	cmp	r3, r5
   1ad9a:	bfa8      	it	ge
   1ad9c:	462b      	movge	r3, r5
   1ad9e:	2b00      	cmp	r3, #0
   1ada0:	bfc2      	ittt	gt
   1ada2:	eba9 0903 	subgt.w	r9, r9, r3
   1ada6:	1aed      	subgt	r5, r5, r3
   1ada8:	1aff      	subgt	r7, r7, r3
   1adaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1adac:	2b00      	cmp	r3, #0
   1adae:	dd17      	ble.n	1ade0 <_strtod_l+0x720>
   1adb0:	461a      	mov	r2, r3
   1adb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1adb6:	f022 fc95 	bl	3d6e4 <__pow5mult>
   1adba:	9005      	str	r0, [sp, #20]
   1adbc:	2800      	cmp	r0, #0
   1adbe:	f43f aeb2 	beq.w	1ab26 <_strtod_l+0x466>
   1adc2:	4601      	mov	r1, r0
   1adc4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1adc6:	9804      	ldr	r0, [sp, #16]
   1adc8:	f026 fd6f 	bl	418aa <__multiply>
   1adcc:	900d      	str	r0, [sp, #52]	; 0x34
   1adce:	2800      	cmp	r0, #0
   1add0:	f43f aea9 	beq.w	1ab26 <_strtod_l+0x466>
   1add4:	991c      	ldr	r1, [sp, #112]	; 0x70
   1add6:	9804      	ldr	r0, [sp, #16]
   1add8:	f026 fc7c 	bl	416d4 <_Bfree>
   1addc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1adde:	931c      	str	r3, [sp, #112]	; 0x70
   1ade0:	f1b9 0f00 	cmp.w	r9, #0
   1ade4:	dc7e      	bgt.n	1aee4 <_strtod_l+0x824>
   1ade6:	9b08      	ldr	r3, [sp, #32]
   1ade8:	2b00      	cmp	r3, #0
   1adea:	dd08      	ble.n	1adfe <_strtod_l+0x73e>
   1adec:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1adee:	9907      	ldr	r1, [sp, #28]
   1adf0:	9804      	ldr	r0, [sp, #16]
   1adf2:	f022 fc77 	bl	3d6e4 <__pow5mult>
   1adf6:	9007      	str	r0, [sp, #28]
   1adf8:	2800      	cmp	r0, #0
   1adfa:	f43f ae94 	beq.w	1ab26 <_strtod_l+0x466>
   1adfe:	2d00      	cmp	r5, #0
   1ae00:	dd08      	ble.n	1ae14 <_strtod_l+0x754>
   1ae02:	462a      	mov	r2, r5
   1ae04:	9907      	ldr	r1, [sp, #28]
   1ae06:	9804      	ldr	r0, [sp, #16]
   1ae08:	f026 fdde 	bl	419c8 <__lshift>
   1ae0c:	9007      	str	r0, [sp, #28]
   1ae0e:	2800      	cmp	r0, #0
   1ae10:	f43f ae89 	beq.w	1ab26 <_strtod_l+0x466>
   1ae14:	2f00      	cmp	r7, #0
   1ae16:	dd08      	ble.n	1ae2a <_strtod_l+0x76a>
   1ae18:	463a      	mov	r2, r7
   1ae1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1ae1e:	f026 fdd3 	bl	419c8 <__lshift>
   1ae22:	9005      	str	r0, [sp, #20]
   1ae24:	2800      	cmp	r0, #0
   1ae26:	f43f ae7e 	beq.w	1ab26 <_strtod_l+0x466>
   1ae2a:	9a07      	ldr	r2, [sp, #28]
   1ae2c:	991c      	ldr	r1, [sp, #112]	; 0x70
   1ae2e:	9804      	ldr	r0, [sp, #16]
   1ae30:	f026 fe37 	bl	41aa2 <__mdiff>
   1ae34:	4604      	mov	r4, r0
   1ae36:	2800      	cmp	r0, #0
   1ae38:	f43f ae75 	beq.w	1ab26 <_strtod_l+0x466>
   1ae3c:	68c3      	ldr	r3, [r0, #12]
   1ae3e:	9905      	ldr	r1, [sp, #20]
   1ae40:	930d      	str	r3, [sp, #52]	; 0x34
   1ae42:	2300      	movs	r3, #0
   1ae44:	60c3      	str	r3, [r0, #12]
   1ae46:	f026 fe12 	bl	41a6e <__mcmp>
   1ae4a:	2800      	cmp	r0, #0
   1ae4c:	da5c      	bge.n	1af08 <_strtod_l+0x848>
   1ae4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ae50:	ea53 030a 	orrs.w	r3, r3, sl
   1ae54:	d17e      	bne.n	1af54 <_strtod_l+0x894>
   1ae56:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1ae5a:	2b00      	cmp	r3, #0
   1ae5c:	d17a      	bne.n	1af54 <_strtod_l+0x894>
   1ae5e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1ae62:	0d1b      	lsrs	r3, r3, #20
   1ae64:	051b      	lsls	r3, r3, #20
   1ae66:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1ae6a:	d973      	bls.n	1af54 <_strtod_l+0x894>
   1ae6c:	6963      	ldr	r3, [r4, #20]
   1ae6e:	b913      	cbnz	r3, 1ae76 <_strtod_l+0x7b6>
   1ae70:	6923      	ldr	r3, [r4, #16]
   1ae72:	2b01      	cmp	r3, #1
   1ae74:	dd6e      	ble.n	1af54 <_strtod_l+0x894>
   1ae76:	4621      	mov	r1, r4
   1ae78:	2201      	movs	r2, #1
   1ae7a:	9804      	ldr	r0, [sp, #16]
   1ae7c:	f026 fda4 	bl	419c8 <__lshift>
   1ae80:	9905      	ldr	r1, [sp, #20]
   1ae82:	4604      	mov	r4, r0
   1ae84:	f026 fdf3 	bl	41a6e <__mcmp>
   1ae88:	2800      	cmp	r0, #0
   1ae8a:	dd63      	ble.n	1af54 <_strtod_l+0x894>
   1ae8c:	9906      	ldr	r1, [sp, #24]
   1ae8e:	465b      	mov	r3, fp
   1ae90:	4a1b      	ldr	r2, [pc, #108]	; (1af00 <_strtod_l+0x840>)
   1ae92:	2900      	cmp	r1, #0
   1ae94:	d07d      	beq.n	1af92 <_strtod_l+0x8d2>
   1ae96:	ea02 010b 	and.w	r1, r2, fp
   1ae9a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   1ae9e:	dc78      	bgt.n	1af92 <_strtod_l+0x8d2>
   1aea0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   1aea4:	f77f aeae 	ble.w	1ac04 <_strtod_l+0x544>
   1aea8:	2300      	movs	r3, #0
   1aeaa:	4a16      	ldr	r2, [pc, #88]	; (1af04 <_strtod_l+0x844>)
   1aeac:	4650      	mov	r0, sl
   1aeae:	4659      	mov	r1, fp
   1aeb0:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
   1aeb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   1aeb8:	f7fd fc6e 	bl	18798 <__aeabi_dmul>
   1aebc:	460b      	mov	r3, r1
   1aebe:	4682      	mov	sl, r0
   1aec0:	468b      	mov	fp, r1
   1aec2:	4303      	orrs	r3, r0
   1aec4:	bf02      	ittt	eq
   1aec6:	2322      	moveq	r3, #34	; 0x22
   1aec8:	9a04      	ldreq	r2, [sp, #16]
   1aeca:	6013      	streq	r3, [r2, #0]
   1aecc:	e636      	b.n	1ab3c <_strtod_l+0x47c>
   1aece:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1aed2:	fa02 f303 	lsl.w	r3, r2, r3
   1aed6:	ea03 0a0a 	and.w	sl, r3, sl
   1aeda:	e6e0      	b.n	1ac9e <_strtod_l+0x5de>
   1aedc:	2600      	movs	r6, #0
   1aede:	f04f 0801 	mov.w	r8, #1
   1aee2:	e750      	b.n	1ad86 <_strtod_l+0x6c6>
   1aee4:	464a      	mov	r2, r9
   1aee6:	991c      	ldr	r1, [sp, #112]	; 0x70
   1aee8:	9804      	ldr	r0, [sp, #16]
   1aeea:	f026 fd6d 	bl	419c8 <__lshift>
   1aeee:	901c      	str	r0, [sp, #112]	; 0x70
   1aef0:	2800      	cmp	r0, #0
   1aef2:	f47f af78 	bne.w	1ade6 <_strtod_l+0x726>
   1aef6:	e616      	b.n	1ab26 <_strtod_l+0x466>
   1aef8:	00042458 	.word	0x00042458
   1aefc:	fffffc02 	.word	0xfffffc02
   1af00:	7ff00000 	.word	0x7ff00000
   1af04:	39500000 	.word	0x39500000
   1af08:	465d      	mov	r5, fp
   1af0a:	d160      	bne.n	1afce <_strtod_l+0x90e>
   1af0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1af0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1af12:	b342      	cbz	r2, 1af66 <_strtod_l+0x8a6>
   1af14:	4ab8      	ldr	r2, [pc, #736]	; (1b1f8 <_strtod_l+0xb38>)
   1af16:	4293      	cmp	r3, r2
   1af18:	d128      	bne.n	1af6c <_strtod_l+0x8ac>
   1af1a:	9b06      	ldr	r3, [sp, #24]
   1af1c:	4650      	mov	r0, sl
   1af1e:	b1eb      	cbz	r3, 1af5c <_strtod_l+0x89c>
   1af20:	4ab6      	ldr	r2, [pc, #728]	; (1b1fc <_strtod_l+0xb3c>)
   1af22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1af26:	402a      	ands	r2, r5
   1af28:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   1af2c:	d819      	bhi.n	1af62 <_strtod_l+0x8a2>
   1af2e:	0d12      	lsrs	r2, r2, #20
   1af30:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   1af34:	fa01 f303 	lsl.w	r3, r1, r3
   1af38:	4298      	cmp	r0, r3
   1af3a:	d117      	bne.n	1af6c <_strtod_l+0x8ac>
   1af3c:	4bb0      	ldr	r3, [pc, #704]	; (1b200 <_strtod_l+0xb40>)
   1af3e:	429d      	cmp	r5, r3
   1af40:	d102      	bne.n	1af48 <_strtod_l+0x888>
   1af42:	3001      	adds	r0, #1
   1af44:	f43f adef 	beq.w	1ab26 <_strtod_l+0x466>
   1af48:	4bac      	ldr	r3, [pc, #688]	; (1b1fc <_strtod_l+0xb3c>)
   1af4a:	f04f 0a00 	mov.w	sl, #0
   1af4e:	402b      	ands	r3, r5
   1af50:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   1af54:	9b06      	ldr	r3, [sp, #24]
   1af56:	2b00      	cmp	r3, #0
   1af58:	d1a6      	bne.n	1aea8 <_strtod_l+0x7e8>
   1af5a:	e5ef      	b.n	1ab3c <_strtod_l+0x47c>
   1af5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1af60:	e7ea      	b.n	1af38 <_strtod_l+0x878>
   1af62:	460b      	mov	r3, r1
   1af64:	e7e8      	b.n	1af38 <_strtod_l+0x878>
   1af66:	ea53 030a 	orrs.w	r3, r3, sl
   1af6a:	d08f      	beq.n	1ae8c <_strtod_l+0x7cc>
   1af6c:	b1de      	cbz	r6, 1afa6 <_strtod_l+0x8e6>
   1af6e:	422e      	tst	r6, r5
   1af70:	d0f0      	beq.n	1af54 <_strtod_l+0x894>
   1af72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1af74:	4650      	mov	r0, sl
   1af76:	9a06      	ldr	r2, [sp, #24]
   1af78:	4659      	mov	r1, fp
   1af7a:	b1bb      	cbz	r3, 1afac <_strtod_l+0x8ec>
   1af7c:	f026 f909 	bl	41192 <sulp>
   1af80:	4602      	mov	r2, r0
   1af82:	460b      	mov	r3, r1
   1af84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1af88:	f7fd fa50 	bl	1842c <__adddf3>
   1af8c:	4682      	mov	sl, r0
   1af8e:	468b      	mov	fp, r1
   1af90:	e7e0      	b.n	1af54 <_strtod_l+0x894>
   1af92:	4013      	ands	r3, r2
   1af94:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   1af98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   1af9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   1afa0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   1afa4:	e7d6      	b.n	1af54 <_strtod_l+0x894>
   1afa6:	ea18 0f0a 	tst.w	r8, sl
   1afaa:	e7e1      	b.n	1af70 <_strtod_l+0x8b0>
   1afac:	f026 f8f1 	bl	41192 <sulp>
   1afb0:	4602      	mov	r2, r0
   1afb2:	460b      	mov	r3, r1
   1afb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1afb8:	f7fd fa36 	bl	18428 <__aeabi_dsub>
   1afbc:	2200      	movs	r2, #0
   1afbe:	2300      	movs	r3, #0
   1afc0:	4682      	mov	sl, r0
   1afc2:	468b      	mov	fp, r1
   1afc4:	f7fd fe50 	bl	18c68 <__aeabi_dcmpeq>
   1afc8:	2800      	cmp	r0, #0
   1afca:	d0c3      	beq.n	1af54 <_strtod_l+0x894>
   1afcc:	e61a      	b.n	1ac04 <_strtod_l+0x544>
   1afce:	9905      	ldr	r1, [sp, #20]
   1afd0:	4620      	mov	r0, r4
   1afd2:	f026 fe14 	bl	41bfe <__ratio>
   1afd6:	2200      	movs	r2, #0
   1afd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1afdc:	ee10 0a10 	vmov	r0, s0
   1afe0:	ec57 6b10 	vmov	r6, r7, d0
   1afe4:	4639      	mov	r1, r7
   1afe6:	f7fd fe53 	bl	18c90 <__aeabi_dcmple>
   1afea:	2800      	cmp	r0, #0
   1afec:	d073      	beq.n	1b0d6 <_strtod_l+0xa16>
   1afee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1aff0:	2b00      	cmp	r3, #0
   1aff2:	d046      	beq.n	1b082 <_strtod_l+0x9c2>
   1aff4:	f04f 0800 	mov.w	r8, #0
   1aff8:	f8df 9208 	ldr.w	r9, [pc, #520]	; 1b204 <_strtod_l+0xb44>
   1affc:	2600      	movs	r6, #0
   1affe:	4f81      	ldr	r7, [pc, #516]	; (1b204 <_strtod_l+0xb44>)
   1b000:	4b7e      	ldr	r3, [pc, #504]	; (1b1fc <_strtod_l+0xb3c>)
   1b002:	402b      	ands	r3, r5
   1b004:	930f      	str	r3, [sp, #60]	; 0x3c
   1b006:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1b008:	4b7f      	ldr	r3, [pc, #508]	; (1b208 <_strtod_l+0xb48>)
   1b00a:	429a      	cmp	r2, r3
   1b00c:	f040 80ab 	bne.w	1b166 <_strtod_l+0xaa6>
   1b010:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
   1b014:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1b018:	ec4b ab10 	vmov	d0, sl, fp
   1b01c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   1b020:	f022 fbae 	bl	3d780 <__ulp>
   1b024:	4640      	mov	r0, r8
   1b026:	4649      	mov	r1, r9
   1b028:	ec53 2b10 	vmov	r2, r3, d0
   1b02c:	f7fd fbb4 	bl	18798 <__aeabi_dmul>
   1b030:	4652      	mov	r2, sl
   1b032:	465b      	mov	r3, fp
   1b034:	f7fd f9fa 	bl	1842c <__adddf3>
   1b038:	460b      	mov	r3, r1
   1b03a:	4970      	ldr	r1, [pc, #448]	; (1b1fc <_strtod_l+0xb3c>)
   1b03c:	4682      	mov	sl, r0
   1b03e:	4a73      	ldr	r2, [pc, #460]	; (1b20c <_strtod_l+0xb4c>)
   1b040:	4019      	ands	r1, r3
   1b042:	4291      	cmp	r1, r2
   1b044:	d95b      	bls.n	1b0fe <_strtod_l+0xa3e>
   1b046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b048:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   1b04c:	4293      	cmp	r3, r2
   1b04e:	d103      	bne.n	1b058 <_strtod_l+0x998>
   1b050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b052:	3301      	adds	r3, #1
   1b054:	f43f ad67 	beq.w	1ab26 <_strtod_l+0x466>
   1b058:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 1b200 <_strtod_l+0xb40>
   1b05c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   1b060:	991c      	ldr	r1, [sp, #112]	; 0x70
   1b062:	9804      	ldr	r0, [sp, #16]
   1b064:	f026 fb36 	bl	416d4 <_Bfree>
   1b068:	9907      	ldr	r1, [sp, #28]
   1b06a:	9804      	ldr	r0, [sp, #16]
   1b06c:	f026 fb32 	bl	416d4 <_Bfree>
   1b070:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1b074:	f026 fb2e 	bl	416d4 <_Bfree>
   1b078:	4621      	mov	r1, r4
   1b07a:	9804      	ldr	r0, [sp, #16]
   1b07c:	f026 fb2a 	bl	416d4 <_Bfree>
   1b080:	e62f      	b.n	1ace2 <_strtod_l+0x622>
   1b082:	f1ba 0f00 	cmp.w	sl, #0
   1b086:	d118      	bne.n	1b0ba <_strtod_l+0x9fa>
   1b088:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1b08c:	b9db      	cbnz	r3, 1b0c6 <_strtod_l+0xa06>
   1b08e:	2200      	movs	r2, #0
   1b090:	4b5c      	ldr	r3, [pc, #368]	; (1b204 <_strtod_l+0xb44>)
   1b092:	4630      	mov	r0, r6
   1b094:	4639      	mov	r1, r7
   1b096:	f7fd fdf1 	bl	18c7c <__aeabi_dcmplt>
   1b09a:	b9c8      	cbnz	r0, 1b0d0 <_strtod_l+0xa10>
   1b09c:	4630      	mov	r0, r6
   1b09e:	4639      	mov	r1, r7
   1b0a0:	2200      	movs	r2, #0
   1b0a2:	4b5b      	ldr	r3, [pc, #364]	; (1b210 <_strtod_l+0xb50>)
   1b0a4:	f7fd fb78 	bl	18798 <__aeabi_dmul>
   1b0a8:	4606      	mov	r6, r0
   1b0aa:	460f      	mov	r7, r1
   1b0ac:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   1b0b0:	9618      	str	r6, [sp, #96]	; 0x60
   1b0b2:	9319      	str	r3, [sp, #100]	; 0x64
   1b0b4:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
   1b0b8:	e7a2      	b.n	1b000 <_strtod_l+0x940>
   1b0ba:	f1ba 0f01 	cmp.w	sl, #1
   1b0be:	d102      	bne.n	1b0c6 <_strtod_l+0xa06>
   1b0c0:	2d00      	cmp	r5, #0
   1b0c2:	f43f ad9f 	beq.w	1ac04 <_strtod_l+0x544>
   1b0c6:	f04f 0800 	mov.w	r8, #0
   1b0ca:	f8df 9148 	ldr.w	r9, [pc, #328]	; 1b214 <_strtod_l+0xb54>
   1b0ce:	e795      	b.n	1affc <_strtod_l+0x93c>
   1b0d0:	2600      	movs	r6, #0
   1b0d2:	4f4f      	ldr	r7, [pc, #316]	; (1b210 <_strtod_l+0xb50>)
   1b0d4:	e7ea      	b.n	1b0ac <_strtod_l+0x9ec>
   1b0d6:	4b4e      	ldr	r3, [pc, #312]	; (1b210 <_strtod_l+0xb50>)
   1b0d8:	4630      	mov	r0, r6
   1b0da:	4639      	mov	r1, r7
   1b0dc:	2200      	movs	r2, #0
   1b0de:	f7fd fb5b 	bl	18798 <__aeabi_dmul>
   1b0e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b0e4:	4606      	mov	r6, r0
   1b0e6:	460f      	mov	r7, r1
   1b0e8:	b933      	cbnz	r3, 1b0f8 <_strtod_l+0xa38>
   1b0ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1b0ee:	9010      	str	r0, [sp, #64]	; 0x40
   1b0f0:	9311      	str	r3, [sp, #68]	; 0x44
   1b0f2:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   1b0f6:	e783      	b.n	1b000 <_strtod_l+0x940>
   1b0f8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   1b0fc:	e7f9      	b.n	1b0f2 <_strtod_l+0xa32>
   1b0fe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   1b102:	9b06      	ldr	r3, [sp, #24]
   1b104:	2b00      	cmp	r3, #0
   1b106:	d1ab      	bne.n	1b060 <_strtod_l+0x9a0>
   1b108:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1b10c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1b10e:	0d1b      	lsrs	r3, r3, #20
   1b110:	051b      	lsls	r3, r3, #20
   1b112:	429a      	cmp	r2, r3
   1b114:	d1a4      	bne.n	1b060 <_strtod_l+0x9a0>
   1b116:	4630      	mov	r0, r6
   1b118:	4639      	mov	r1, r7
   1b11a:	f7fe fef3 	bl	19f04 <__aeabi_d2lz>
   1b11e:	f7fd fb0d 	bl	1873c <__aeabi_l2d>
   1b122:	4602      	mov	r2, r0
   1b124:	460b      	mov	r3, r1
   1b126:	4630      	mov	r0, r6
   1b128:	4639      	mov	r1, r7
   1b12a:	f7fd f97d 	bl	18428 <__aeabi_dsub>
   1b12e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1b132:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1b134:	4606      	mov	r6, r0
   1b136:	ea43 030a 	orr.w	r3, r3, sl
   1b13a:	460f      	mov	r7, r1
   1b13c:	4313      	orrs	r3, r2
   1b13e:	d06b      	beq.n	1b218 <_strtod_l+0xb58>
   1b140:	a327      	add	r3, pc, #156	; (adr r3, 1b1e0 <_strtod_l+0xb20>)
   1b142:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b146:	f7fd fd99 	bl	18c7c <__aeabi_dcmplt>
   1b14a:	2800      	cmp	r0, #0
   1b14c:	f47f acf6 	bne.w	1ab3c <_strtod_l+0x47c>
   1b150:	4630      	mov	r0, r6
   1b152:	4639      	mov	r1, r7
   1b154:	a324      	add	r3, pc, #144	; (adr r3, 1b1e8 <_strtod_l+0xb28>)
   1b156:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b15a:	f7fd fdad 	bl	18cb8 <__aeabi_dcmpgt>
   1b15e:	2800      	cmp	r0, #0
   1b160:	f43f af7e 	beq.w	1b060 <_strtod_l+0x9a0>
   1b164:	e4ea      	b.n	1ab3c <_strtod_l+0x47c>
   1b166:	9b06      	ldr	r3, [sp, #24]
   1b168:	b31b      	cbz	r3, 1b1b2 <_strtod_l+0xaf2>
   1b16a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b16c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   1b170:	d81f      	bhi.n	1b1b2 <_strtod_l+0xaf2>
   1b172:	4630      	mov	r0, r6
   1b174:	4639      	mov	r1, r7
   1b176:	a31e      	add	r3, pc, #120	; (adr r3, 1b1f0 <_strtod_l+0xb30>)
   1b178:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b17c:	f7fd fd88 	bl	18c90 <__aeabi_dcmple>
   1b180:	b190      	cbz	r0, 1b1a8 <_strtod_l+0xae8>
   1b182:	4639      	mov	r1, r7
   1b184:	4630      	mov	r0, r6
   1b186:	f7fe fe9d 	bl	19ec4 <__aeabi_d2uiz>
   1b18a:	2800      	cmp	r0, #0
   1b18c:	bf08      	it	eq
   1b18e:	2001      	moveq	r0, #1
   1b190:	f7fd fa88 	bl	186a4 <__aeabi_ui2d>
   1b194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b196:	4606      	mov	r6, r0
   1b198:	460f      	mov	r7, r1
   1b19a:	b9db      	cbnz	r3, 1b1d4 <_strtod_l+0xb14>
   1b19c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1b1a0:	9012      	str	r0, [sp, #72]	; 0x48
   1b1a2:	9313      	str	r3, [sp, #76]	; 0x4c
   1b1a4:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
   1b1a8:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   1b1ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1b1ae:	eba3 0902 	sub.w	r9, r3, r2
   1b1b2:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   1b1b6:	f022 fae3 	bl	3d780 <__ulp>
   1b1ba:	4640      	mov	r0, r8
   1b1bc:	4649      	mov	r1, r9
   1b1be:	ec53 2b10 	vmov	r2, r3, d0
   1b1c2:	f7fd fae9 	bl	18798 <__aeabi_dmul>
   1b1c6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1b1ca:	f7fd f92f 	bl	1842c <__adddf3>
   1b1ce:	4682      	mov	sl, r0
   1b1d0:	468b      	mov	fp, r1
   1b1d2:	e796      	b.n	1b102 <_strtod_l+0xa42>
   1b1d4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
   1b1d8:	e7e4      	b.n	1b1a4 <_strtod_l+0xae4>
   1b1da:	bf00      	nop
   1b1dc:	f3af 8000 	nop.w
   1b1e0:	94a03595 	.word	0x94a03595
   1b1e4:	3fdfffff 	.word	0x3fdfffff
   1b1e8:	35afe535 	.word	0x35afe535
   1b1ec:	3fe00000 	.word	0x3fe00000
   1b1f0:	ffc00000 	.word	0xffc00000
   1b1f4:	41dfffff 	.word	0x41dfffff
   1b1f8:	000fffff 	.word	0x000fffff
   1b1fc:	7ff00000 	.word	0x7ff00000
   1b200:	7fefffff 	.word	0x7fefffff
   1b204:	3ff00000 	.word	0x3ff00000
   1b208:	7fe00000 	.word	0x7fe00000
   1b20c:	7c9fffff 	.word	0x7c9fffff
   1b210:	3fe00000 	.word	0x3fe00000
   1b214:	bff00000 	.word	0xbff00000
   1b218:	a30b      	add	r3, pc, #44	; (adr r3, 1b248 <_strtod_l+0xb88>)
   1b21a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b21e:	f7fd fd2d 	bl	18c7c <__aeabi_dcmplt>
   1b222:	e79c      	b.n	1b15e <_strtod_l+0xa9e>
   1b224:	2300      	movs	r3, #0
   1b226:	930c      	str	r3, [sp, #48]	; 0x30
   1b228:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1b22a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1b22c:	6013      	str	r3, [r2, #0]
   1b22e:	f7ff ba89 	b.w	1a744 <_strtod_l+0x84>
   1b232:	2b65      	cmp	r3, #101	; 0x65
   1b234:	f43f ab75 	beq.w	1a922 <_strtod_l+0x262>
   1b238:	2b45      	cmp	r3, #69	; 0x45
   1b23a:	f43f ab72 	beq.w	1a922 <_strtod_l+0x262>
   1b23e:	2201      	movs	r2, #1
   1b240:	f7ff bba6 	b.w	1a990 <_strtod_l+0x2d0>
   1b244:	f3af 8000 	nop.w
   1b248:	94a03595 	.word	0x94a03595
   1b24c:	3fcfffff 	.word	0x3fcfffff

0001b250 <_dtoa_r>:
   1b250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b254:	6a47      	ldr	r7, [r0, #36]	; 0x24
   1b256:	b099      	sub	sp, #100	; 0x64
   1b258:	4683      	mov	fp, r0
   1b25a:	9108      	str	r1, [sp, #32]
   1b25c:	920d      	str	r2, [sp, #52]	; 0x34
   1b25e:	9314      	str	r3, [sp, #80]	; 0x50
   1b260:	9e22      	ldr	r6, [sp, #136]	; 0x88
   1b262:	ec55 4b10 	vmov	r4, r5, d0
   1b266:	e9cd 4500 	strd	r4, r5, [sp]
   1b26a:	b947      	cbnz	r7, 1b27e <_dtoa_r+0x2e>
   1b26c:	2010      	movs	r0, #16
   1b26e:	f020 fe09 	bl	3be84 <malloc>
   1b272:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
   1b276:	6007      	str	r7, [r0, #0]
   1b278:	60c7      	str	r7, [r0, #12]
   1b27a:	e9c0 7701 	strd	r7, r7, [r0, #4]
   1b27e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   1b282:	6819      	ldr	r1, [r3, #0]
   1b284:	b159      	cbz	r1, 1b29e <_dtoa_r+0x4e>
   1b286:	685a      	ldr	r2, [r3, #4]
   1b288:	2301      	movs	r3, #1
   1b28a:	4658      	mov	r0, fp
   1b28c:	4093      	lsls	r3, r2
   1b28e:	604a      	str	r2, [r1, #4]
   1b290:	608b      	str	r3, [r1, #8]
   1b292:	f026 fa1f 	bl	416d4 <_Bfree>
   1b296:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   1b29a:	2200      	movs	r2, #0
   1b29c:	601a      	str	r2, [r3, #0]
   1b29e:	1e2b      	subs	r3, r5, #0
   1b2a0:	bfb7      	itett	lt
   1b2a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   1b2a6:	2300      	movge	r3, #0
   1b2a8:	2201      	movlt	r2, #1
   1b2aa:	9301      	strlt	r3, [sp, #4]
   1b2ac:	bfa8      	it	ge
   1b2ae:	6033      	strge	r3, [r6, #0]
   1b2b0:	9c01      	ldr	r4, [sp, #4]
   1b2b2:	4bb1      	ldr	r3, [pc, #708]	; (1b578 <_dtoa_r+0x328>)
   1b2b4:	bfb8      	it	lt
   1b2b6:	6032      	strlt	r2, [r6, #0]
   1b2b8:	43a3      	bics	r3, r4
   1b2ba:	d11a      	bne.n	1b2f2 <_dtoa_r+0xa2>
   1b2bc:	f242 730f 	movw	r3, #9999	; 0x270f
   1b2c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1b2c2:	6013      	str	r3, [r2, #0]
   1b2c4:	f3c4 0313 	ubfx	r3, r4, #0, #20
   1b2c8:	9a00      	ldr	r2, [sp, #0]
   1b2ca:	4313      	orrs	r3, r2
   1b2cc:	f000 8547 	beq.w	1bd5e <_dtoa_r+0xb0e>
   1b2d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1b2d2:	b953      	cbnz	r3, 1b2ea <_dtoa_r+0x9a>
   1b2d4:	4ba9      	ldr	r3, [pc, #676]	; (1b57c <_dtoa_r+0x32c>)
   1b2d6:	e023      	b.n	1b320 <_dtoa_r+0xd0>
   1b2d8:	4ba9      	ldr	r3, [pc, #676]	; (1b580 <_dtoa_r+0x330>)
   1b2da:	9303      	str	r3, [sp, #12]
   1b2dc:	3308      	adds	r3, #8
   1b2de:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1b2e0:	6013      	str	r3, [r2, #0]
   1b2e2:	9803      	ldr	r0, [sp, #12]
   1b2e4:	b019      	add	sp, #100	; 0x64
   1b2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b2ea:	4ba4      	ldr	r3, [pc, #656]	; (1b57c <_dtoa_r+0x32c>)
   1b2ec:	9303      	str	r3, [sp, #12]
   1b2ee:	3303      	adds	r3, #3
   1b2f0:	e7f5      	b.n	1b2de <_dtoa_r+0x8e>
   1b2f2:	ed9d 7b00 	vldr	d7, [sp]
   1b2f6:	2200      	movs	r2, #0
   1b2f8:	2300      	movs	r3, #0
   1b2fa:	ec51 0b17 	vmov	r0, r1, d7
   1b2fe:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   1b302:	f7fd fcb1 	bl	18c68 <__aeabi_dcmpeq>
   1b306:	4607      	mov	r7, r0
   1b308:	b160      	cbz	r0, 1b324 <_dtoa_r+0xd4>
   1b30a:	2301      	movs	r3, #1
   1b30c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1b30e:	6013      	str	r3, [r2, #0]
   1b310:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1b312:	2b00      	cmp	r3, #0
   1b314:	f000 8520 	beq.w	1bd58 <_dtoa_r+0xb08>
   1b318:	4b9a      	ldr	r3, [pc, #616]	; (1b584 <_dtoa_r+0x334>)
   1b31a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1b31c:	6013      	str	r3, [r2, #0]
   1b31e:	3b01      	subs	r3, #1
   1b320:	9303      	str	r3, [sp, #12]
   1b322:	e7de      	b.n	1b2e2 <_dtoa_r+0x92>
   1b324:	f3c4 560a 	ubfx	r6, r4, #20, #11
   1b328:	aa16      	add	r2, sp, #88	; 0x58
   1b32a:	a917      	add	r1, sp, #92	; 0x5c
   1b32c:	4658      	mov	r0, fp
   1b32e:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
   1b332:	f026 fc16 	bl	41b62 <__d2b>
   1b336:	4680      	mov	r8, r0
   1b338:	2e00      	cmp	r6, #0
   1b33a:	d07d      	beq.n	1b438 <_dtoa_r+0x1e8>
   1b33c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b33e:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   1b342:	9715      	str	r7, [sp, #84]	; 0x54
   1b344:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1b348:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
   1b34c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
   1b350:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   1b354:	2200      	movs	r2, #0
   1b356:	4b8c      	ldr	r3, [pc, #560]	; (1b588 <_dtoa_r+0x338>)
   1b358:	4620      	mov	r0, r4
   1b35a:	4629      	mov	r1, r5
   1b35c:	f7fd f864 	bl	18428 <__aeabi_dsub>
   1b360:	a37f      	add	r3, pc, #508	; (adr r3, 1b560 <_dtoa_r+0x310>)
   1b362:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b366:	f7fd fa17 	bl	18798 <__aeabi_dmul>
   1b36a:	a37f      	add	r3, pc, #508	; (adr r3, 1b568 <_dtoa_r+0x318>)
   1b36c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b370:	f7fd f85c 	bl	1842c <__adddf3>
   1b374:	4604      	mov	r4, r0
   1b376:	460d      	mov	r5, r1
   1b378:	4630      	mov	r0, r6
   1b37a:	f7fd f9a3 	bl	186c4 <__aeabi_i2d>
   1b37e:	a37c      	add	r3, pc, #496	; (adr r3, 1b570 <_dtoa_r+0x320>)
   1b380:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b384:	f7fd fa08 	bl	18798 <__aeabi_dmul>
   1b388:	4602      	mov	r2, r0
   1b38a:	460b      	mov	r3, r1
   1b38c:	4620      	mov	r0, r4
   1b38e:	4629      	mov	r1, r5
   1b390:	f7fd f84c 	bl	1842c <__adddf3>
   1b394:	4604      	mov	r4, r0
   1b396:	460d      	mov	r5, r1
   1b398:	f7fd fc98 	bl	18ccc <__aeabi_d2iz>
   1b39c:	2200      	movs	r2, #0
   1b39e:	4682      	mov	sl, r0
   1b3a0:	2300      	movs	r3, #0
   1b3a2:	4620      	mov	r0, r4
   1b3a4:	4629      	mov	r1, r5
   1b3a6:	f7fd fc69 	bl	18c7c <__aeabi_dcmplt>
   1b3aa:	b148      	cbz	r0, 1b3c0 <_dtoa_r+0x170>
   1b3ac:	4650      	mov	r0, sl
   1b3ae:	f7fd f989 	bl	186c4 <__aeabi_i2d>
   1b3b2:	4622      	mov	r2, r4
   1b3b4:	462b      	mov	r3, r5
   1b3b6:	f7fd fc57 	bl	18c68 <__aeabi_dcmpeq>
   1b3ba:	b908      	cbnz	r0, 1b3c0 <_dtoa_r+0x170>
   1b3bc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1b3c0:	f1ba 0f16 	cmp.w	sl, #22
   1b3c4:	d857      	bhi.n	1b476 <_dtoa_r+0x226>
   1b3c6:	4b71      	ldr	r3, [pc, #452]	; (1b58c <_dtoa_r+0x33c>)
   1b3c8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   1b3cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1b3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b3d4:	f7fd fc52 	bl	18c7c <__aeabi_dcmplt>
   1b3d8:	2800      	cmp	r0, #0
   1b3da:	d04e      	beq.n	1b47a <_dtoa_r+0x22a>
   1b3dc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1b3e0:	2300      	movs	r3, #0
   1b3e2:	9311      	str	r3, [sp, #68]	; 0x44
   1b3e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1b3e6:	1b9e      	subs	r6, r3, r6
   1b3e8:	1e73      	subs	r3, r6, #1
   1b3ea:	9307      	str	r3, [sp, #28]
   1b3ec:	bf49      	itett	mi
   1b3ee:	f1c6 0301 	rsbmi	r3, r6, #1
   1b3f2:	2300      	movpl	r3, #0
   1b3f4:	9306      	strmi	r3, [sp, #24]
   1b3f6:	2300      	movmi	r3, #0
   1b3f8:	bf54      	ite	pl
   1b3fa:	9306      	strpl	r3, [sp, #24]
   1b3fc:	9307      	strmi	r3, [sp, #28]
   1b3fe:	f1ba 0f00 	cmp.w	sl, #0
   1b402:	db3c      	blt.n	1b47e <_dtoa_r+0x22e>
   1b404:	9b07      	ldr	r3, [sp, #28]
   1b406:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
   1b40a:	4453      	add	r3, sl
   1b40c:	9307      	str	r3, [sp, #28]
   1b40e:	2300      	movs	r3, #0
   1b410:	9309      	str	r3, [sp, #36]	; 0x24
   1b412:	9b08      	ldr	r3, [sp, #32]
   1b414:	2b09      	cmp	r3, #9
   1b416:	f200 808d 	bhi.w	1b534 <_dtoa_r+0x2e4>
   1b41a:	2b05      	cmp	r3, #5
   1b41c:	bfc5      	ittet	gt
   1b41e:	3b04      	subgt	r3, #4
   1b420:	2400      	movgt	r4, #0
   1b422:	2401      	movle	r4, #1
   1b424:	9308      	strgt	r3, [sp, #32]
   1b426:	9b08      	ldr	r3, [sp, #32]
   1b428:	3b02      	subs	r3, #2
   1b42a:	2b03      	cmp	r3, #3
   1b42c:	f200 808d 	bhi.w	1b54a <_dtoa_r+0x2fa>
   1b430:	e8df f003 	tbb	[pc, r3]
   1b434:	7e3a3c2f 	.word	0x7e3a3c2f
   1b438:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	; 0x58
   1b43c:	441e      	add	r6, r3
   1b43e:	f206 4032 	addw	r0, r6, #1074	; 0x432
   1b442:	2820      	cmp	r0, #32
   1b444:	dd11      	ble.n	1b46a <_dtoa_r+0x21a>
   1b446:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
   1b44a:	9b00      	ldr	r3, [sp, #0]
   1b44c:	4084      	lsls	r4, r0
   1b44e:	f206 4012 	addw	r0, r6, #1042	; 0x412
   1b452:	fa23 f000 	lsr.w	r0, r3, r0
   1b456:	4320      	orrs	r0, r4
   1b458:	f7fd f924 	bl	186a4 <__aeabi_ui2d>
   1b45c:	2301      	movs	r3, #1
   1b45e:	4604      	mov	r4, r0
   1b460:	f1a1 75f8 	sub.w	r5, r1, #32505856	; 0x1f00000
   1b464:	3e01      	subs	r6, #1
   1b466:	9315      	str	r3, [sp, #84]	; 0x54
   1b468:	e774      	b.n	1b354 <_dtoa_r+0x104>
   1b46a:	f1c0 0020 	rsb	r0, r0, #32
   1b46e:	9b00      	ldr	r3, [sp, #0]
   1b470:	fa03 f000 	lsl.w	r0, r3, r0
   1b474:	e7f0      	b.n	1b458 <_dtoa_r+0x208>
   1b476:	2301      	movs	r3, #1
   1b478:	e7b3      	b.n	1b3e2 <_dtoa_r+0x192>
   1b47a:	9011      	str	r0, [sp, #68]	; 0x44
   1b47c:	e7b2      	b.n	1b3e4 <_dtoa_r+0x194>
   1b47e:	9b06      	ldr	r3, [sp, #24]
   1b480:	eba3 030a 	sub.w	r3, r3, sl
   1b484:	9306      	str	r3, [sp, #24]
   1b486:	f1ca 0300 	rsb	r3, sl, #0
   1b48a:	9309      	str	r3, [sp, #36]	; 0x24
   1b48c:	2300      	movs	r3, #0
   1b48e:	9310      	str	r3, [sp, #64]	; 0x40
   1b490:	e7bf      	b.n	1b412 <_dtoa_r+0x1c2>
   1b492:	2300      	movs	r3, #0
   1b494:	930c      	str	r3, [sp, #48]	; 0x30
   1b496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b498:	2b00      	cmp	r3, #0
   1b49a:	dc59      	bgt.n	1b550 <_dtoa_r+0x300>
   1b49c:	2301      	movs	r3, #1
   1b49e:	4699      	mov	r9, r3
   1b4a0:	461a      	mov	r2, r3
   1b4a2:	9304      	str	r3, [sp, #16]
   1b4a4:	920d      	str	r2, [sp, #52]	; 0x34
   1b4a6:	e00c      	b.n	1b4c2 <_dtoa_r+0x272>
   1b4a8:	2301      	movs	r3, #1
   1b4aa:	e7f3      	b.n	1b494 <_dtoa_r+0x244>
   1b4ac:	2300      	movs	r3, #0
   1b4ae:	930c      	str	r3, [sp, #48]	; 0x30
   1b4b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b4b2:	4453      	add	r3, sl
   1b4b4:	f103 0901 	add.w	r9, r3, #1
   1b4b8:	9304      	str	r3, [sp, #16]
   1b4ba:	464b      	mov	r3, r9
   1b4bc:	2b01      	cmp	r3, #1
   1b4be:	bfb8      	it	lt
   1b4c0:	2301      	movlt	r3, #1
   1b4c2:	2200      	movs	r2, #0
   1b4c4:	f8db 5024 	ldr.w	r5, [fp, #36]	; 0x24
   1b4c8:	606a      	str	r2, [r5, #4]
   1b4ca:	2204      	movs	r2, #4
   1b4cc:	f102 0014 	add.w	r0, r2, #20
   1b4d0:	6869      	ldr	r1, [r5, #4]
   1b4d2:	4298      	cmp	r0, r3
   1b4d4:	d940      	bls.n	1b558 <_dtoa_r+0x308>
   1b4d6:	4658      	mov	r0, fp
   1b4d8:	f026 f8c8 	bl	4166c <_Balloc>
   1b4dc:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   1b4e0:	6028      	str	r0, [r5, #0]
   1b4e2:	f1b9 0f0e 	cmp.w	r9, #14
   1b4e6:	681b      	ldr	r3, [r3, #0]
   1b4e8:	9303      	str	r3, [sp, #12]
   1b4ea:	f200 80d4 	bhi.w	1b696 <_dtoa_r+0x446>
   1b4ee:	2c00      	cmp	r4, #0
   1b4f0:	f000 80d1 	beq.w	1b696 <_dtoa_r+0x446>
   1b4f4:	f1ba 0f00 	cmp.w	sl, #0
   1b4f8:	dd66      	ble.n	1b5c8 <_dtoa_r+0x378>
   1b4fa:	4a24      	ldr	r2, [pc, #144]	; (1b58c <_dtoa_r+0x33c>)
   1b4fc:	f00a 030f 	and.w	r3, sl, #15
   1b500:	ea4f 142a 	mov.w	r4, sl, asr #4
   1b504:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1b508:	06e2      	lsls	r2, r4, #27
   1b50a:	ed93 7b00 	vldr	d7, [r3]
   1b50e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   1b512:	d557      	bpl.n	1b5c4 <_dtoa_r+0x374>
   1b514:	4b1e      	ldr	r3, [pc, #120]	; (1b590 <_dtoa_r+0x340>)
   1b516:	f004 040f 	and.w	r4, r4, #15
   1b51a:	2603      	movs	r6, #3
   1b51c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1b520:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1b524:	f7fd fa62 	bl	189ec <__aeabi_ddiv>
   1b528:	e9cd 0100 	strd	r0, r1, [sp]
   1b52c:	4d18      	ldr	r5, [pc, #96]	; (1b590 <_dtoa_r+0x340>)
   1b52e:	e03e      	b.n	1b5ae <_dtoa_r+0x35e>
   1b530:	2301      	movs	r3, #1
   1b532:	e7bc      	b.n	1b4ae <_dtoa_r+0x25e>
   1b534:	2401      	movs	r4, #1
   1b536:	2300      	movs	r3, #0
   1b538:	940c      	str	r4, [sp, #48]	; 0x30
   1b53a:	9308      	str	r3, [sp, #32]
   1b53c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b540:	2200      	movs	r2, #0
   1b542:	9304      	str	r3, [sp, #16]
   1b544:	4699      	mov	r9, r3
   1b546:	2312      	movs	r3, #18
   1b548:	e7ac      	b.n	1b4a4 <_dtoa_r+0x254>
   1b54a:	2301      	movs	r3, #1
   1b54c:	930c      	str	r3, [sp, #48]	; 0x30
   1b54e:	e7f5      	b.n	1b53c <_dtoa_r+0x2ec>
   1b550:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b552:	9304      	str	r3, [sp, #16]
   1b554:	4699      	mov	r9, r3
   1b556:	e7b4      	b.n	1b4c2 <_dtoa_r+0x272>
   1b558:	3101      	adds	r1, #1
   1b55a:	0052      	lsls	r2, r2, #1
   1b55c:	6069      	str	r1, [r5, #4]
   1b55e:	e7b5      	b.n	1b4cc <_dtoa_r+0x27c>
   1b560:	636f4361 	.word	0x636f4361
   1b564:	3fd287a7 	.word	0x3fd287a7
   1b568:	8b60c8b3 	.word	0x8b60c8b3
   1b56c:	3fc68a28 	.word	0x3fc68a28
   1b570:	509f79fb 	.word	0x509f79fb
   1b574:	3fd34413 	.word	0x3fd34413
   1b578:	7ff00000 	.word	0x7ff00000
   1b57c:	00049820 	.word	0x00049820
   1b580:	00049817 	.word	0x00049817
   1b584:	00049225 	.word	0x00049225
   1b588:	3ff80000 	.word	0x3ff80000
   1b58c:	000424a8 	.word	0x000424a8
   1b590:	00042480 	.word	0x00042480
   1b594:	07e3      	lsls	r3, r4, #31
   1b596:	d508      	bpl.n	1b5aa <_dtoa_r+0x35a>
   1b598:	3601      	adds	r6, #1
   1b59a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1b59e:	e9d5 2300 	ldrd	r2, r3, [r5]
   1b5a2:	f7fd f8f9 	bl	18798 <__aeabi_dmul>
   1b5a6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1b5aa:	1064      	asrs	r4, r4, #1
   1b5ac:	3508      	adds	r5, #8
   1b5ae:	2c00      	cmp	r4, #0
   1b5b0:	d1f0      	bne.n	1b594 <_dtoa_r+0x344>
   1b5b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1b5b6:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b5ba:	f7fd fa17 	bl	189ec <__aeabi_ddiv>
   1b5be:	e9cd 0100 	strd	r0, r1, [sp]
   1b5c2:	e01a      	b.n	1b5fa <_dtoa_r+0x3aa>
   1b5c4:	2602      	movs	r6, #2
   1b5c6:	e7b1      	b.n	1b52c <_dtoa_r+0x2dc>
   1b5c8:	f000 809f 	beq.w	1b70a <_dtoa_r+0x4ba>
   1b5cc:	f1ca 0400 	rsb	r4, sl, #0
   1b5d0:	4b9e      	ldr	r3, [pc, #632]	; (1b84c <_dtoa_r+0x5fc>)
   1b5d2:	4d9f      	ldr	r5, [pc, #636]	; (1b850 <_dtoa_r+0x600>)
   1b5d4:	2602      	movs	r6, #2
   1b5d6:	f004 020f 	and.w	r2, r4, #15
   1b5da:	1124      	asrs	r4, r4, #4
   1b5dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1b5e0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1b5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b5e8:	f7fd f8d6 	bl	18798 <__aeabi_dmul>
   1b5ec:	2300      	movs	r3, #0
   1b5ee:	e9cd 0100 	strd	r0, r1, [sp]
   1b5f2:	2c00      	cmp	r4, #0
   1b5f4:	d17e      	bne.n	1b6f4 <_dtoa_r+0x4a4>
   1b5f6:	2b00      	cmp	r3, #0
   1b5f8:	d1e1      	bne.n	1b5be <_dtoa_r+0x36e>
   1b5fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b5fc:	2b00      	cmp	r3, #0
   1b5fe:	f000 8086 	beq.w	1b70e <_dtoa_r+0x4be>
   1b602:	2200      	movs	r2, #0
   1b604:	4b93      	ldr	r3, [pc, #588]	; (1b854 <_dtoa_r+0x604>)
   1b606:	e9dd 4500 	ldrd	r4, r5, [sp]
   1b60a:	4620      	mov	r0, r4
   1b60c:	4629      	mov	r1, r5
   1b60e:	f7fd fb35 	bl	18c7c <__aeabi_dcmplt>
   1b612:	2800      	cmp	r0, #0
   1b614:	d07b      	beq.n	1b70e <_dtoa_r+0x4be>
   1b616:	f1b9 0f00 	cmp.w	r9, #0
   1b61a:	d078      	beq.n	1b70e <_dtoa_r+0x4be>
   1b61c:	9b04      	ldr	r3, [sp, #16]
   1b61e:	2b00      	cmp	r3, #0
   1b620:	dd35      	ble.n	1b68e <_dtoa_r+0x43e>
   1b622:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   1b626:	4620      	mov	r0, r4
   1b628:	2200      	movs	r2, #0
   1b62a:	4629      	mov	r1, r5
   1b62c:	930a      	str	r3, [sp, #40]	; 0x28
   1b62e:	3601      	adds	r6, #1
   1b630:	4b89      	ldr	r3, [pc, #548]	; (1b858 <_dtoa_r+0x608>)
   1b632:	f7fd f8b1 	bl	18798 <__aeabi_dmul>
   1b636:	9c04      	ldr	r4, [sp, #16]
   1b638:	e9cd 0100 	strd	r0, r1, [sp]
   1b63c:	4630      	mov	r0, r6
   1b63e:	f7fd f841 	bl	186c4 <__aeabi_i2d>
   1b642:	e9dd 2300 	ldrd	r2, r3, [sp]
   1b646:	f7fd f8a7 	bl	18798 <__aeabi_dmul>
   1b64a:	2200      	movs	r2, #0
   1b64c:	4b83      	ldr	r3, [pc, #524]	; (1b85c <_dtoa_r+0x60c>)
   1b64e:	f7fc feed 	bl	1842c <__adddf3>
   1b652:	4606      	mov	r6, r0
   1b654:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   1b658:	2c00      	cmp	r4, #0
   1b65a:	d15c      	bne.n	1b716 <_dtoa_r+0x4c6>
   1b65c:	2200      	movs	r2, #0
   1b65e:	4b80      	ldr	r3, [pc, #512]	; (1b860 <_dtoa_r+0x610>)
   1b660:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b664:	f7fc fee0 	bl	18428 <__aeabi_dsub>
   1b668:	4632      	mov	r2, r6
   1b66a:	463b      	mov	r3, r7
   1b66c:	e9cd 0100 	strd	r0, r1, [sp]
   1b670:	f7fd fb22 	bl	18cb8 <__aeabi_dcmpgt>
   1b674:	2800      	cmp	r0, #0
   1b676:	f040 8289 	bne.w	1bb8c <_dtoa_r+0x93c>
   1b67a:	4632      	mov	r2, r6
   1b67c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   1b680:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b684:	f7fd fafa 	bl	18c7c <__aeabi_dcmplt>
   1b688:	2800      	cmp	r0, #0
   1b68a:	f040 827d 	bne.w	1bb88 <_dtoa_r+0x938>
   1b68e:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   1b692:	e9cd 3400 	strd	r3, r4, [sp]
   1b696:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1b698:	2b00      	cmp	r3, #0
   1b69a:	f2c0 814c 	blt.w	1b936 <_dtoa_r+0x6e6>
   1b69e:	f1ba 0f0e 	cmp.w	sl, #14
   1b6a2:	f300 8148 	bgt.w	1b936 <_dtoa_r+0x6e6>
   1b6a6:	4b69      	ldr	r3, [pc, #420]	; (1b84c <_dtoa_r+0x5fc>)
   1b6a8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   1b6ac:	ed93 7b00 	vldr	d7, [r3]
   1b6b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b6b2:	2b00      	cmp	r3, #0
   1b6b4:	ed8d 7b04 	vstr	d7, [sp, #16]
   1b6b8:	f280 80d6 	bge.w	1b868 <_dtoa_r+0x618>
   1b6bc:	f1b9 0f00 	cmp.w	r9, #0
   1b6c0:	f300 80d2 	bgt.w	1b868 <_dtoa_r+0x618>
   1b6c4:	f040 825f 	bne.w	1bb86 <_dtoa_r+0x936>
   1b6c8:	2200      	movs	r2, #0
   1b6ca:	4b65      	ldr	r3, [pc, #404]	; (1b860 <_dtoa_r+0x610>)
   1b6cc:	464c      	mov	r4, r9
   1b6ce:	464e      	mov	r6, r9
   1b6d0:	ec51 0b17 	vmov	r0, r1, d7
   1b6d4:	f7fd f860 	bl	18798 <__aeabi_dmul>
   1b6d8:	e9dd 2300 	ldrd	r2, r3, [sp]
   1b6dc:	f7fd fae2 	bl	18ca4 <__aeabi_dcmpge>
   1b6e0:	2800      	cmp	r0, #0
   1b6e2:	f040 8238 	bne.w	1bb56 <_dtoa_r+0x906>
   1b6e6:	9d03      	ldr	r5, [sp, #12]
   1b6e8:	2331      	movs	r3, #49	; 0x31
   1b6ea:	f10a 0a01 	add.w	sl, sl, #1
   1b6ee:	f805 3b01 	strb.w	r3, [r5], #1
   1b6f2:	e234      	b.n	1bb5e <_dtoa_r+0x90e>
   1b6f4:	07e7      	lsls	r7, r4, #31
   1b6f6:	d505      	bpl.n	1b704 <_dtoa_r+0x4b4>
   1b6f8:	3601      	adds	r6, #1
   1b6fa:	e9d5 2300 	ldrd	r2, r3, [r5]
   1b6fe:	f7fd f84b 	bl	18798 <__aeabi_dmul>
   1b702:	2301      	movs	r3, #1
   1b704:	1064      	asrs	r4, r4, #1
   1b706:	3508      	adds	r5, #8
   1b708:	e773      	b.n	1b5f2 <_dtoa_r+0x3a2>
   1b70a:	2602      	movs	r6, #2
   1b70c:	e775      	b.n	1b5fa <_dtoa_r+0x3aa>
   1b70e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   1b712:	464c      	mov	r4, r9
   1b714:	e792      	b.n	1b63c <_dtoa_r+0x3ec>
   1b716:	4b4d      	ldr	r3, [pc, #308]	; (1b84c <_dtoa_r+0x5fc>)
   1b718:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1b71c:	e953 0102 	ldrd	r0, r1, [r3, #-8]
   1b720:	9b03      	ldr	r3, [sp, #12]
   1b722:	441c      	add	r4, r3
   1b724:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b726:	2b00      	cmp	r3, #0
   1b728:	d046      	beq.n	1b7b8 <_dtoa_r+0x568>
   1b72a:	4602      	mov	r2, r0
   1b72c:	460b      	mov	r3, r1
   1b72e:	2000      	movs	r0, #0
   1b730:	494c      	ldr	r1, [pc, #304]	; (1b864 <_dtoa_r+0x614>)
   1b732:	f7fd f95b 	bl	189ec <__aeabi_ddiv>
   1b736:	4632      	mov	r2, r6
   1b738:	463b      	mov	r3, r7
   1b73a:	f7fc fe75 	bl	18428 <__aeabi_dsub>
   1b73e:	9d03      	ldr	r5, [sp, #12]
   1b740:	4606      	mov	r6, r0
   1b742:	460f      	mov	r7, r1
   1b744:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b748:	f7fd fac0 	bl	18ccc <__aeabi_d2iz>
   1b74c:	9012      	str	r0, [sp, #72]	; 0x48
   1b74e:	f7fc ffb9 	bl	186c4 <__aeabi_i2d>
   1b752:	4602      	mov	r2, r0
   1b754:	460b      	mov	r3, r1
   1b756:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b75a:	f7fc fe65 	bl	18428 <__aeabi_dsub>
   1b75e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b760:	4632      	mov	r2, r6
   1b762:	3330      	adds	r3, #48	; 0x30
   1b764:	f805 3b01 	strb.w	r3, [r5], #1
   1b768:	463b      	mov	r3, r7
   1b76a:	e9cd 0100 	strd	r0, r1, [sp]
   1b76e:	f7fd fa85 	bl	18c7c <__aeabi_dcmplt>
   1b772:	2800      	cmp	r0, #0
   1b774:	d15f      	bne.n	1b836 <_dtoa_r+0x5e6>
   1b776:	2000      	movs	r0, #0
   1b778:	4936      	ldr	r1, [pc, #216]	; (1b854 <_dtoa_r+0x604>)
   1b77a:	e9dd 2300 	ldrd	r2, r3, [sp]
   1b77e:	f7fc fe53 	bl	18428 <__aeabi_dsub>
   1b782:	4632      	mov	r2, r6
   1b784:	463b      	mov	r3, r7
   1b786:	f7fd fa79 	bl	18c7c <__aeabi_dcmplt>
   1b78a:	2800      	cmp	r0, #0
   1b78c:	f040 80b2 	bne.w	1b8f4 <_dtoa_r+0x6a4>
   1b790:	42a5      	cmp	r5, r4
   1b792:	f43f af7c 	beq.w	1b68e <_dtoa_r+0x43e>
   1b796:	2200      	movs	r2, #0
   1b798:	4b2f      	ldr	r3, [pc, #188]	; (1b858 <_dtoa_r+0x608>)
   1b79a:	4630      	mov	r0, r6
   1b79c:	4639      	mov	r1, r7
   1b79e:	f7fc fffb 	bl	18798 <__aeabi_dmul>
   1b7a2:	2200      	movs	r2, #0
   1b7a4:	4606      	mov	r6, r0
   1b7a6:	460f      	mov	r7, r1
   1b7a8:	4b2b      	ldr	r3, [pc, #172]	; (1b858 <_dtoa_r+0x608>)
   1b7aa:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b7ae:	f7fc fff3 	bl	18798 <__aeabi_dmul>
   1b7b2:	e9cd 0100 	strd	r0, r1, [sp]
   1b7b6:	e7c5      	b.n	1b744 <_dtoa_r+0x4f4>
   1b7b8:	4632      	mov	r2, r6
   1b7ba:	463b      	mov	r3, r7
   1b7bc:	f7fc ffec 	bl	18798 <__aeabi_dmul>
   1b7c0:	4625      	mov	r5, r4
   1b7c2:	9e03      	ldr	r6, [sp, #12]
   1b7c4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   1b7c8:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b7cc:	f7fd fa7e 	bl	18ccc <__aeabi_d2iz>
   1b7d0:	4607      	mov	r7, r0
   1b7d2:	f7fc ff77 	bl	186c4 <__aeabi_i2d>
   1b7d6:	4602      	mov	r2, r0
   1b7d8:	3730      	adds	r7, #48	; 0x30
   1b7da:	460b      	mov	r3, r1
   1b7dc:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b7e0:	f7fc fe22 	bl	18428 <__aeabi_dsub>
   1b7e4:	f806 7b01 	strb.w	r7, [r6], #1
   1b7e8:	42a6      	cmp	r6, r4
   1b7ea:	f04f 0200 	mov.w	r2, #0
   1b7ee:	e9cd 0100 	strd	r0, r1, [sp]
   1b7f2:	d125      	bne.n	1b840 <_dtoa_r+0x5f0>
   1b7f4:	4b1b      	ldr	r3, [pc, #108]	; (1b864 <_dtoa_r+0x614>)
   1b7f6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   1b7fa:	f7fc fe17 	bl	1842c <__adddf3>
   1b7fe:	4602      	mov	r2, r0
   1b800:	460b      	mov	r3, r1
   1b802:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b806:	f7fd fa57 	bl	18cb8 <__aeabi_dcmpgt>
   1b80a:	2800      	cmp	r0, #0
   1b80c:	d172      	bne.n	1b8f4 <_dtoa_r+0x6a4>
   1b80e:	2000      	movs	r0, #0
   1b810:	4914      	ldr	r1, [pc, #80]	; (1b864 <_dtoa_r+0x614>)
   1b812:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   1b816:	f7fc fe07 	bl	18428 <__aeabi_dsub>
   1b81a:	4602      	mov	r2, r0
   1b81c:	460b      	mov	r3, r1
   1b81e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b822:	f7fd fa2b 	bl	18c7c <__aeabi_dcmplt>
   1b826:	2800      	cmp	r0, #0
   1b828:	f43f af31 	beq.w	1b68e <_dtoa_r+0x43e>
   1b82c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1b830:	1e6a      	subs	r2, r5, #1
   1b832:	2b30      	cmp	r3, #48	; 0x30
   1b834:	d002      	beq.n	1b83c <_dtoa_r+0x5ec>
   1b836:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   1b83a:	e049      	b.n	1b8d0 <_dtoa_r+0x680>
   1b83c:	4615      	mov	r5, r2
   1b83e:	e7f5      	b.n	1b82c <_dtoa_r+0x5dc>
   1b840:	4b05      	ldr	r3, [pc, #20]	; (1b858 <_dtoa_r+0x608>)
   1b842:	f7fc ffa9 	bl	18798 <__aeabi_dmul>
   1b846:	e9cd 0100 	strd	r0, r1, [sp]
   1b84a:	e7bd      	b.n	1b7c8 <_dtoa_r+0x578>
   1b84c:	000424a8 	.word	0x000424a8
   1b850:	00042480 	.word	0x00042480
   1b854:	3ff00000 	.word	0x3ff00000
   1b858:	40240000 	.word	0x40240000
   1b85c:	401c0000 	.word	0x401c0000
   1b860:	40140000 	.word	0x40140000
   1b864:	3fe00000 	.word	0x3fe00000
   1b868:	e9dd 6700 	ldrd	r6, r7, [sp]
   1b86c:	9d03      	ldr	r5, [sp, #12]
   1b86e:	4630      	mov	r0, r6
   1b870:	4639      	mov	r1, r7
   1b872:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b876:	f7fd f8b9 	bl	189ec <__aeabi_ddiv>
   1b87a:	f7fd fa27 	bl	18ccc <__aeabi_d2iz>
   1b87e:	4604      	mov	r4, r0
   1b880:	f7fc ff20 	bl	186c4 <__aeabi_i2d>
   1b884:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b888:	f7fc ff86 	bl	18798 <__aeabi_dmul>
   1b88c:	4602      	mov	r2, r0
   1b88e:	4630      	mov	r0, r6
   1b890:	f104 0630 	add.w	r6, r4, #48	; 0x30
   1b894:	460b      	mov	r3, r1
   1b896:	4639      	mov	r1, r7
   1b898:	f7fc fdc6 	bl	18428 <__aeabi_dsub>
   1b89c:	f805 6b01 	strb.w	r6, [r5], #1
   1b8a0:	9e03      	ldr	r6, [sp, #12]
   1b8a2:	4602      	mov	r2, r0
   1b8a4:	460b      	mov	r3, r1
   1b8a6:	1bae      	subs	r6, r5, r6
   1b8a8:	45b1      	cmp	r9, r6
   1b8aa:	d137      	bne.n	1b91c <_dtoa_r+0x6cc>
   1b8ac:	f7fc fdbe 	bl	1842c <__adddf3>
   1b8b0:	4606      	mov	r6, r0
   1b8b2:	460f      	mov	r7, r1
   1b8b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b8b8:	f7fd f9fe 	bl	18cb8 <__aeabi_dcmpgt>
   1b8bc:	b9c0      	cbnz	r0, 1b8f0 <_dtoa_r+0x6a0>
   1b8be:	4630      	mov	r0, r6
   1b8c0:	4639      	mov	r1, r7
   1b8c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b8c6:	f7fd f9cf 	bl	18c68 <__aeabi_dcmpeq>
   1b8ca:	b108      	cbz	r0, 1b8d0 <_dtoa_r+0x680>
   1b8cc:	07e1      	lsls	r1, r4, #31
   1b8ce:	d40f      	bmi.n	1b8f0 <_dtoa_r+0x6a0>
   1b8d0:	4641      	mov	r1, r8
   1b8d2:	4658      	mov	r0, fp
   1b8d4:	f025 fefe 	bl	416d4 <_Bfree>
   1b8d8:	2300      	movs	r3, #0
   1b8da:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1b8dc:	702b      	strb	r3, [r5, #0]
   1b8de:	f10a 0301 	add.w	r3, sl, #1
   1b8e2:	6013      	str	r3, [r2, #0]
   1b8e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1b8e6:	2b00      	cmp	r3, #0
   1b8e8:	f43f acfb 	beq.w	1b2e2 <_dtoa_r+0x92>
   1b8ec:	601d      	str	r5, [r3, #0]
   1b8ee:	e4f8      	b.n	1b2e2 <_dtoa_r+0x92>
   1b8f0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   1b8f4:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   1b8f8:	1e6b      	subs	r3, r5, #1
   1b8fa:	2a39      	cmp	r2, #57	; 0x39
   1b8fc:	d108      	bne.n	1b910 <_dtoa_r+0x6c0>
   1b8fe:	9a03      	ldr	r2, [sp, #12]
   1b900:	429a      	cmp	r2, r3
   1b902:	d109      	bne.n	1b918 <_dtoa_r+0x6c8>
   1b904:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b906:	9903      	ldr	r1, [sp, #12]
   1b908:	3201      	adds	r2, #1
   1b90a:	920a      	str	r2, [sp, #40]	; 0x28
   1b90c:	2230      	movs	r2, #48	; 0x30
   1b90e:	700a      	strb	r2, [r1, #0]
   1b910:	781a      	ldrb	r2, [r3, #0]
   1b912:	3201      	adds	r2, #1
   1b914:	701a      	strb	r2, [r3, #0]
   1b916:	e78e      	b.n	1b836 <_dtoa_r+0x5e6>
   1b918:	461d      	mov	r5, r3
   1b91a:	e7eb      	b.n	1b8f4 <_dtoa_r+0x6a4>
   1b91c:	2200      	movs	r2, #0
   1b91e:	4b9d      	ldr	r3, [pc, #628]	; (1bb94 <_dtoa_r+0x944>)
   1b920:	f7fc ff3a 	bl	18798 <__aeabi_dmul>
   1b924:	2200      	movs	r2, #0
   1b926:	2300      	movs	r3, #0
   1b928:	4606      	mov	r6, r0
   1b92a:	460f      	mov	r7, r1
   1b92c:	f7fd f99c 	bl	18c68 <__aeabi_dcmpeq>
   1b930:	2800      	cmp	r0, #0
   1b932:	d09c      	beq.n	1b86e <_dtoa_r+0x61e>
   1b934:	e7cc      	b.n	1b8d0 <_dtoa_r+0x680>
   1b936:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1b938:	2a00      	cmp	r2, #0
   1b93a:	f000 80cb 	beq.w	1bad4 <_dtoa_r+0x884>
   1b93e:	9a08      	ldr	r2, [sp, #32]
   1b940:	2a01      	cmp	r2, #1
   1b942:	f300 80ae 	bgt.w	1baa2 <_dtoa_r+0x852>
   1b946:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1b948:	2a00      	cmp	r2, #0
   1b94a:	f000 80a6 	beq.w	1ba9a <_dtoa_r+0x84a>
   1b94e:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1b952:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1b954:	9d06      	ldr	r5, [sp, #24]
   1b956:	9a06      	ldr	r2, [sp, #24]
   1b958:	2101      	movs	r1, #1
   1b95a:	4658      	mov	r0, fp
   1b95c:	441a      	add	r2, r3
   1b95e:	9206      	str	r2, [sp, #24]
   1b960:	9a07      	ldr	r2, [sp, #28]
   1b962:	441a      	add	r2, r3
   1b964:	9207      	str	r2, [sp, #28]
   1b966:	f025 ff97 	bl	41898 <__i2b>
   1b96a:	4606      	mov	r6, r0
   1b96c:	2d00      	cmp	r5, #0
   1b96e:	dd0c      	ble.n	1b98a <_dtoa_r+0x73a>
   1b970:	9b07      	ldr	r3, [sp, #28]
   1b972:	2b00      	cmp	r3, #0
   1b974:	dd09      	ble.n	1b98a <_dtoa_r+0x73a>
   1b976:	42ab      	cmp	r3, r5
   1b978:	9a06      	ldr	r2, [sp, #24]
   1b97a:	bfa8      	it	ge
   1b97c:	462b      	movge	r3, r5
   1b97e:	1ad2      	subs	r2, r2, r3
   1b980:	1aed      	subs	r5, r5, r3
   1b982:	9206      	str	r2, [sp, #24]
   1b984:	9a07      	ldr	r2, [sp, #28]
   1b986:	1ad3      	subs	r3, r2, r3
   1b988:	9307      	str	r3, [sp, #28]
   1b98a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b98c:	b1f3      	cbz	r3, 1b9cc <_dtoa_r+0x77c>
   1b98e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b990:	2b00      	cmp	r3, #0
   1b992:	f000 80a3 	beq.w	1badc <_dtoa_r+0x88c>
   1b996:	2c00      	cmp	r4, #0
   1b998:	dd10      	ble.n	1b9bc <_dtoa_r+0x76c>
   1b99a:	4631      	mov	r1, r6
   1b99c:	4622      	mov	r2, r4
   1b99e:	4658      	mov	r0, fp
   1b9a0:	f021 fea0 	bl	3d6e4 <__pow5mult>
   1b9a4:	4642      	mov	r2, r8
   1b9a6:	4601      	mov	r1, r0
   1b9a8:	4606      	mov	r6, r0
   1b9aa:	4658      	mov	r0, fp
   1b9ac:	f025 ff7d 	bl	418aa <__multiply>
   1b9b0:	4607      	mov	r7, r0
   1b9b2:	4641      	mov	r1, r8
   1b9b4:	4658      	mov	r0, fp
   1b9b6:	46b8      	mov	r8, r7
   1b9b8:	f025 fe8c 	bl	416d4 <_Bfree>
   1b9bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b9be:	1b1a      	subs	r2, r3, r4
   1b9c0:	d004      	beq.n	1b9cc <_dtoa_r+0x77c>
   1b9c2:	4641      	mov	r1, r8
   1b9c4:	4658      	mov	r0, fp
   1b9c6:	f021 fe8d 	bl	3d6e4 <__pow5mult>
   1b9ca:	4680      	mov	r8, r0
   1b9cc:	2101      	movs	r1, #1
   1b9ce:	4658      	mov	r0, fp
   1b9d0:	f025 ff62 	bl	41898 <__i2b>
   1b9d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b9d6:	4604      	mov	r4, r0
   1b9d8:	2b00      	cmp	r3, #0
   1b9da:	f340 8081 	ble.w	1bae0 <_dtoa_r+0x890>
   1b9de:	461a      	mov	r2, r3
   1b9e0:	4601      	mov	r1, r0
   1b9e2:	4658      	mov	r0, fp
   1b9e4:	f021 fe7e 	bl	3d6e4 <__pow5mult>
   1b9e8:	9b08      	ldr	r3, [sp, #32]
   1b9ea:	4604      	mov	r4, r0
   1b9ec:	2b01      	cmp	r3, #1
   1b9ee:	dd7a      	ble.n	1bae6 <_dtoa_r+0x896>
   1b9f0:	2700      	movs	r7, #0
   1b9f2:	6923      	ldr	r3, [r4, #16]
   1b9f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1b9f8:	6918      	ldr	r0, [r3, #16]
   1b9fa:	f025 fefd 	bl	417f8 <__hi0bits>
   1b9fe:	f1c0 0020 	rsb	r0, r0, #32
   1ba02:	9b07      	ldr	r3, [sp, #28]
   1ba04:	4418      	add	r0, r3
   1ba06:	f010 001f 	ands.w	r0, r0, #31
   1ba0a:	f000 808b 	beq.w	1bb24 <_dtoa_r+0x8d4>
   1ba0e:	f1c0 0320 	rsb	r3, r0, #32
   1ba12:	2b04      	cmp	r3, #4
   1ba14:	f340 8084 	ble.w	1bb20 <_dtoa_r+0x8d0>
   1ba18:	f1c0 001c 	rsb	r0, r0, #28
   1ba1c:	9b06      	ldr	r3, [sp, #24]
   1ba1e:	4405      	add	r5, r0
   1ba20:	4403      	add	r3, r0
   1ba22:	9306      	str	r3, [sp, #24]
   1ba24:	9b07      	ldr	r3, [sp, #28]
   1ba26:	4403      	add	r3, r0
   1ba28:	9307      	str	r3, [sp, #28]
   1ba2a:	9b06      	ldr	r3, [sp, #24]
   1ba2c:	2b00      	cmp	r3, #0
   1ba2e:	dd05      	ble.n	1ba3c <_dtoa_r+0x7ec>
   1ba30:	4641      	mov	r1, r8
   1ba32:	461a      	mov	r2, r3
   1ba34:	4658      	mov	r0, fp
   1ba36:	f025 ffc7 	bl	419c8 <__lshift>
   1ba3a:	4680      	mov	r8, r0
   1ba3c:	9b07      	ldr	r3, [sp, #28]
   1ba3e:	2b00      	cmp	r3, #0
   1ba40:	dd05      	ble.n	1ba4e <_dtoa_r+0x7fe>
   1ba42:	4621      	mov	r1, r4
   1ba44:	461a      	mov	r2, r3
   1ba46:	4658      	mov	r0, fp
   1ba48:	f025 ffbe 	bl	419c8 <__lshift>
   1ba4c:	4604      	mov	r4, r0
   1ba4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ba50:	2b00      	cmp	r3, #0
   1ba52:	d069      	beq.n	1bb28 <_dtoa_r+0x8d8>
   1ba54:	4621      	mov	r1, r4
   1ba56:	4640      	mov	r0, r8
   1ba58:	f026 f809 	bl	41a6e <__mcmp>
   1ba5c:	2800      	cmp	r0, #0
   1ba5e:	da63      	bge.n	1bb28 <_dtoa_r+0x8d8>
   1ba60:	2300      	movs	r3, #0
   1ba62:	4641      	mov	r1, r8
   1ba64:	220a      	movs	r2, #10
   1ba66:	4658      	mov	r0, fp
   1ba68:	f025 fe4b 	bl	41702 <__multadd>
   1ba6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ba6e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1ba72:	4680      	mov	r8, r0
   1ba74:	2b00      	cmp	r3, #0
   1ba76:	f000 8179 	beq.w	1bd6c <_dtoa_r+0xb1c>
   1ba7a:	2300      	movs	r3, #0
   1ba7c:	4631      	mov	r1, r6
   1ba7e:	220a      	movs	r2, #10
   1ba80:	4658      	mov	r0, fp
   1ba82:	f025 fe3e 	bl	41702 <__multadd>
   1ba86:	9b04      	ldr	r3, [sp, #16]
   1ba88:	4606      	mov	r6, r0
   1ba8a:	2b00      	cmp	r3, #0
   1ba8c:	f300 808a 	bgt.w	1bba4 <_dtoa_r+0x954>
   1ba90:	9b08      	ldr	r3, [sp, #32]
   1ba92:	2b02      	cmp	r3, #2
   1ba94:	f340 8086 	ble.w	1bba4 <_dtoa_r+0x954>
   1ba98:	e04e      	b.n	1bb38 <_dtoa_r+0x8e8>
   1ba9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1ba9c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   1baa0:	e757      	b.n	1b952 <_dtoa_r+0x702>
   1baa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1baa4:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
   1baa8:	42a3      	cmp	r3, r4
   1baaa:	bfb7      	itett	lt
   1baac:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
   1baae:	1b1c      	subge	r4, r3, r4
   1bab0:	9409      	strlt	r4, [sp, #36]	; 0x24
   1bab2:	1ae2      	sublt	r2, r4, r3
   1bab4:	bfbf      	itttt	lt
   1bab6:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   1bab8:	2400      	movlt	r4, #0
   1baba:	189b      	addlt	r3, r3, r2
   1babc:	9310      	strlt	r3, [sp, #64]	; 0x40
   1babe:	f1b9 0f00 	cmp.w	r9, #0
   1bac2:	bfb3      	iteet	lt
   1bac4:	9b06      	ldrlt	r3, [sp, #24]
   1bac6:	464b      	movge	r3, r9
   1bac8:	9d06      	ldrge	r5, [sp, #24]
   1baca:	eba3 0509 	sublt.w	r5, r3, r9
   1bace:	bfb8      	it	lt
   1bad0:	2300      	movlt	r3, #0
   1bad2:	e740      	b.n	1b956 <_dtoa_r+0x706>
   1bad4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1bad6:	9d06      	ldr	r5, [sp, #24]
   1bad8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1bada:	e747      	b.n	1b96c <_dtoa_r+0x71c>
   1badc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1bade:	e770      	b.n	1b9c2 <_dtoa_r+0x772>
   1bae0:	9b08      	ldr	r3, [sp, #32]
   1bae2:	2b01      	cmp	r3, #1
   1bae4:	dc18      	bgt.n	1bb18 <_dtoa_r+0x8c8>
   1bae6:	9b00      	ldr	r3, [sp, #0]
   1bae8:	b9b3      	cbnz	r3, 1bb18 <_dtoa_r+0x8c8>
   1baea:	9b01      	ldr	r3, [sp, #4]
   1baec:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1baf0:	b9a3      	cbnz	r3, 1bb1c <_dtoa_r+0x8cc>
   1baf2:	9b01      	ldr	r3, [sp, #4]
   1baf4:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   1baf8:	0d3f      	lsrs	r7, r7, #20
   1bafa:	053f      	lsls	r7, r7, #20
   1bafc:	b137      	cbz	r7, 1bb0c <_dtoa_r+0x8bc>
   1bafe:	9b06      	ldr	r3, [sp, #24]
   1bb00:	2701      	movs	r7, #1
   1bb02:	3301      	adds	r3, #1
   1bb04:	9306      	str	r3, [sp, #24]
   1bb06:	9b07      	ldr	r3, [sp, #28]
   1bb08:	3301      	adds	r3, #1
   1bb0a:	9307      	str	r3, [sp, #28]
   1bb0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1bb0e:	2b00      	cmp	r3, #0
   1bb10:	f47f af6f 	bne.w	1b9f2 <_dtoa_r+0x7a2>
   1bb14:	2001      	movs	r0, #1
   1bb16:	e774      	b.n	1ba02 <_dtoa_r+0x7b2>
   1bb18:	2700      	movs	r7, #0
   1bb1a:	e7f7      	b.n	1bb0c <_dtoa_r+0x8bc>
   1bb1c:	9f00      	ldr	r7, [sp, #0]
   1bb1e:	e7f5      	b.n	1bb0c <_dtoa_r+0x8bc>
   1bb20:	d083      	beq.n	1ba2a <_dtoa_r+0x7da>
   1bb22:	4618      	mov	r0, r3
   1bb24:	301c      	adds	r0, #28
   1bb26:	e779      	b.n	1ba1c <_dtoa_r+0x7cc>
   1bb28:	f1b9 0f00 	cmp.w	r9, #0
   1bb2c:	dc34      	bgt.n	1bb98 <_dtoa_r+0x948>
   1bb2e:	9b08      	ldr	r3, [sp, #32]
   1bb30:	2b02      	cmp	r3, #2
   1bb32:	dd31      	ble.n	1bb98 <_dtoa_r+0x948>
   1bb34:	f8cd 9010 	str.w	r9, [sp, #16]
   1bb38:	9b04      	ldr	r3, [sp, #16]
   1bb3a:	b963      	cbnz	r3, 1bb56 <_dtoa_r+0x906>
   1bb3c:	4621      	mov	r1, r4
   1bb3e:	2205      	movs	r2, #5
   1bb40:	4658      	mov	r0, fp
   1bb42:	f025 fdde 	bl	41702 <__multadd>
   1bb46:	4601      	mov	r1, r0
   1bb48:	4604      	mov	r4, r0
   1bb4a:	4640      	mov	r0, r8
   1bb4c:	f025 ff8f 	bl	41a6e <__mcmp>
   1bb50:	2800      	cmp	r0, #0
   1bb52:	f73f adc8 	bgt.w	1b6e6 <_dtoa_r+0x496>
   1bb56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1bb58:	9d03      	ldr	r5, [sp, #12]
   1bb5a:	ea6f 0a03 	mvn.w	sl, r3
   1bb5e:	2700      	movs	r7, #0
   1bb60:	4621      	mov	r1, r4
   1bb62:	4658      	mov	r0, fp
   1bb64:	f025 fdb6 	bl	416d4 <_Bfree>
   1bb68:	2e00      	cmp	r6, #0
   1bb6a:	f43f aeb1 	beq.w	1b8d0 <_dtoa_r+0x680>
   1bb6e:	b12f      	cbz	r7, 1bb7c <_dtoa_r+0x92c>
   1bb70:	42b7      	cmp	r7, r6
   1bb72:	d003      	beq.n	1bb7c <_dtoa_r+0x92c>
   1bb74:	4639      	mov	r1, r7
   1bb76:	4658      	mov	r0, fp
   1bb78:	f025 fdac 	bl	416d4 <_Bfree>
   1bb7c:	4631      	mov	r1, r6
   1bb7e:	4658      	mov	r0, fp
   1bb80:	f025 fda8 	bl	416d4 <_Bfree>
   1bb84:	e6a4      	b.n	1b8d0 <_dtoa_r+0x680>
   1bb86:	2400      	movs	r4, #0
   1bb88:	4626      	mov	r6, r4
   1bb8a:	e7e4      	b.n	1bb56 <_dtoa_r+0x906>
   1bb8c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   1bb90:	4626      	mov	r6, r4
   1bb92:	e5a8      	b.n	1b6e6 <_dtoa_r+0x496>
   1bb94:	40240000 	.word	0x40240000
   1bb98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1bb9a:	f8cd 9010 	str.w	r9, [sp, #16]
   1bb9e:	2b00      	cmp	r3, #0
   1bba0:	f000 80eb 	beq.w	1bd7a <_dtoa_r+0xb2a>
   1bba4:	2d00      	cmp	r5, #0
   1bba6:	dd05      	ble.n	1bbb4 <_dtoa_r+0x964>
   1bba8:	4631      	mov	r1, r6
   1bbaa:	462a      	mov	r2, r5
   1bbac:	4658      	mov	r0, fp
   1bbae:	f025 ff0b 	bl	419c8 <__lshift>
   1bbb2:	4606      	mov	r6, r0
   1bbb4:	2f00      	cmp	r7, #0
   1bbb6:	d056      	beq.n	1bc66 <_dtoa_r+0xa16>
   1bbb8:	6871      	ldr	r1, [r6, #4]
   1bbba:	4658      	mov	r0, fp
   1bbbc:	f025 fd56 	bl	4166c <_Balloc>
   1bbc0:	6932      	ldr	r2, [r6, #16]
   1bbc2:	4605      	mov	r5, r0
   1bbc4:	f106 010c 	add.w	r1, r6, #12
   1bbc8:	3202      	adds	r2, #2
   1bbca:	300c      	adds	r0, #12
   1bbcc:	0092      	lsls	r2, r2, #2
   1bbce:	f025 f8c7 	bl	40d60 <memcpy>
   1bbd2:	2201      	movs	r2, #1
   1bbd4:	4629      	mov	r1, r5
   1bbd6:	4658      	mov	r0, fp
   1bbd8:	f025 fef6 	bl	419c8 <__lshift>
   1bbdc:	9b03      	ldr	r3, [sp, #12]
   1bbde:	4637      	mov	r7, r6
   1bbe0:	4606      	mov	r6, r0
   1bbe2:	f103 0901 	add.w	r9, r3, #1
   1bbe6:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   1bbea:	4413      	add	r3, r2
   1bbec:	9309      	str	r3, [sp, #36]	; 0x24
   1bbee:	9b00      	ldr	r3, [sp, #0]
   1bbf0:	f003 0301 	and.w	r3, r3, #1
   1bbf4:	9307      	str	r3, [sp, #28]
   1bbf6:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   1bbfa:	4621      	mov	r1, r4
   1bbfc:	4640      	mov	r0, r8
   1bbfe:	9300      	str	r3, [sp, #0]
   1bc00:	f025 fb1a 	bl	41238 <quorem>
   1bc04:	4603      	mov	r3, r0
   1bc06:	9004      	str	r0, [sp, #16]
   1bc08:	4639      	mov	r1, r7
   1bc0a:	4640      	mov	r0, r8
   1bc0c:	3330      	adds	r3, #48	; 0x30
   1bc0e:	930a      	str	r3, [sp, #40]	; 0x28
   1bc10:	f025 ff2d 	bl	41a6e <__mcmp>
   1bc14:	4632      	mov	r2, r6
   1bc16:	9006      	str	r0, [sp, #24]
   1bc18:	4621      	mov	r1, r4
   1bc1a:	4658      	mov	r0, fp
   1bc1c:	f025 ff41 	bl	41aa2 <__mdiff>
   1bc20:	68c2      	ldr	r2, [r0, #12]
   1bc22:	4605      	mov	r5, r0
   1bc24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bc26:	bb02      	cbnz	r2, 1bc6a <_dtoa_r+0xa1a>
   1bc28:	4601      	mov	r1, r0
   1bc2a:	4640      	mov	r0, r8
   1bc2c:	f025 ff1f 	bl	41a6e <__mcmp>
   1bc30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bc32:	4602      	mov	r2, r0
   1bc34:	4629      	mov	r1, r5
   1bc36:	4658      	mov	r0, fp
   1bc38:	920c      	str	r2, [sp, #48]	; 0x30
   1bc3a:	464d      	mov	r5, r9
   1bc3c:	930a      	str	r3, [sp, #40]	; 0x28
   1bc3e:	f025 fd49 	bl	416d4 <_Bfree>
   1bc42:	9b08      	ldr	r3, [sp, #32]
   1bc44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1bc46:	ea43 0102 	orr.w	r1, r3, r2
   1bc4a:	9b07      	ldr	r3, [sp, #28]
   1bc4c:	430b      	orrs	r3, r1
   1bc4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bc50:	d10d      	bne.n	1bc6e <_dtoa_r+0xa1e>
   1bc52:	2b39      	cmp	r3, #57	; 0x39
   1bc54:	d027      	beq.n	1bca6 <_dtoa_r+0xa56>
   1bc56:	9a06      	ldr	r2, [sp, #24]
   1bc58:	2a00      	cmp	r2, #0
   1bc5a:	dd01      	ble.n	1bc60 <_dtoa_r+0xa10>
   1bc5c:	9b04      	ldr	r3, [sp, #16]
   1bc5e:	3331      	adds	r3, #49	; 0x31
   1bc60:	9a00      	ldr	r2, [sp, #0]
   1bc62:	7013      	strb	r3, [r2, #0]
   1bc64:	e77c      	b.n	1bb60 <_dtoa_r+0x910>
   1bc66:	4630      	mov	r0, r6
   1bc68:	e7b8      	b.n	1bbdc <_dtoa_r+0x98c>
   1bc6a:	2201      	movs	r2, #1
   1bc6c:	e7e2      	b.n	1bc34 <_dtoa_r+0x9e4>
   1bc6e:	9906      	ldr	r1, [sp, #24]
   1bc70:	2900      	cmp	r1, #0
   1bc72:	db04      	blt.n	1bc7e <_dtoa_r+0xa2e>
   1bc74:	9808      	ldr	r0, [sp, #32]
   1bc76:	4301      	orrs	r1, r0
   1bc78:	9807      	ldr	r0, [sp, #28]
   1bc7a:	4301      	orrs	r1, r0
   1bc7c:	d11d      	bne.n	1bcba <_dtoa_r+0xa6a>
   1bc7e:	2a00      	cmp	r2, #0
   1bc80:	ddee      	ble.n	1bc60 <_dtoa_r+0xa10>
   1bc82:	4641      	mov	r1, r8
   1bc84:	2201      	movs	r2, #1
   1bc86:	4658      	mov	r0, fp
   1bc88:	9306      	str	r3, [sp, #24]
   1bc8a:	f025 fe9d 	bl	419c8 <__lshift>
   1bc8e:	4621      	mov	r1, r4
   1bc90:	4680      	mov	r8, r0
   1bc92:	f025 feec 	bl	41a6e <__mcmp>
   1bc96:	2800      	cmp	r0, #0
   1bc98:	9b06      	ldr	r3, [sp, #24]
   1bc9a:	dc02      	bgt.n	1bca2 <_dtoa_r+0xa52>
   1bc9c:	d1e0      	bne.n	1bc60 <_dtoa_r+0xa10>
   1bc9e:	07da      	lsls	r2, r3, #31
   1bca0:	d5de      	bpl.n	1bc60 <_dtoa_r+0xa10>
   1bca2:	2b39      	cmp	r3, #57	; 0x39
   1bca4:	d1da      	bne.n	1bc5c <_dtoa_r+0xa0c>
   1bca6:	2339      	movs	r3, #57	; 0x39
   1bca8:	9a00      	ldr	r2, [sp, #0]
   1bcaa:	7013      	strb	r3, [r2, #0]
   1bcac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1bcb0:	1e6a      	subs	r2, r5, #1
   1bcb2:	2b39      	cmp	r3, #57	; 0x39
   1bcb4:	d046      	beq.n	1bd44 <_dtoa_r+0xaf4>
   1bcb6:	3301      	adds	r3, #1
   1bcb8:	e7d3      	b.n	1bc62 <_dtoa_r+0xa12>
   1bcba:	2a00      	cmp	r2, #0
   1bcbc:	dd03      	ble.n	1bcc6 <_dtoa_r+0xa76>
   1bcbe:	2b39      	cmp	r3, #57	; 0x39
   1bcc0:	d0f1      	beq.n	1bca6 <_dtoa_r+0xa56>
   1bcc2:	3301      	adds	r3, #1
   1bcc4:	e7cc      	b.n	1bc60 <_dtoa_r+0xa10>
   1bcc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1bcc8:	f809 3c01 	strb.w	r3, [r9, #-1]
   1bccc:	4591      	cmp	r9, r2
   1bcce:	d021      	beq.n	1bd14 <_dtoa_r+0xac4>
   1bcd0:	4641      	mov	r1, r8
   1bcd2:	2300      	movs	r3, #0
   1bcd4:	220a      	movs	r2, #10
   1bcd6:	4658      	mov	r0, fp
   1bcd8:	f025 fd13 	bl	41702 <__multadd>
   1bcdc:	42b7      	cmp	r7, r6
   1bcde:	4680      	mov	r8, r0
   1bce0:	f04f 0300 	mov.w	r3, #0
   1bce4:	f04f 020a 	mov.w	r2, #10
   1bce8:	4639      	mov	r1, r7
   1bcea:	4658      	mov	r0, fp
   1bcec:	d106      	bne.n	1bcfc <_dtoa_r+0xaac>
   1bcee:	f025 fd08 	bl	41702 <__multadd>
   1bcf2:	4607      	mov	r7, r0
   1bcf4:	4606      	mov	r6, r0
   1bcf6:	f109 0901 	add.w	r9, r9, #1
   1bcfa:	e77c      	b.n	1bbf6 <_dtoa_r+0x9a6>
   1bcfc:	f025 fd01 	bl	41702 <__multadd>
   1bd00:	4631      	mov	r1, r6
   1bd02:	4607      	mov	r7, r0
   1bd04:	2300      	movs	r3, #0
   1bd06:	220a      	movs	r2, #10
   1bd08:	4658      	mov	r0, fp
   1bd0a:	f025 fcfa 	bl	41702 <__multadd>
   1bd0e:	4606      	mov	r6, r0
   1bd10:	e7f1      	b.n	1bcf6 <_dtoa_r+0xaa6>
   1bd12:	2700      	movs	r7, #0
   1bd14:	4641      	mov	r1, r8
   1bd16:	2201      	movs	r2, #1
   1bd18:	4658      	mov	r0, fp
   1bd1a:	9300      	str	r3, [sp, #0]
   1bd1c:	f025 fe54 	bl	419c8 <__lshift>
   1bd20:	4621      	mov	r1, r4
   1bd22:	4680      	mov	r8, r0
   1bd24:	f025 fea3 	bl	41a6e <__mcmp>
   1bd28:	2800      	cmp	r0, #0
   1bd2a:	dcbf      	bgt.n	1bcac <_dtoa_r+0xa5c>
   1bd2c:	d102      	bne.n	1bd34 <_dtoa_r+0xae4>
   1bd2e:	9b00      	ldr	r3, [sp, #0]
   1bd30:	07db      	lsls	r3, r3, #31
   1bd32:	d4bb      	bmi.n	1bcac <_dtoa_r+0xa5c>
   1bd34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1bd38:	1e6a      	subs	r2, r5, #1
   1bd3a:	2b30      	cmp	r3, #48	; 0x30
   1bd3c:	f47f af10 	bne.w	1bb60 <_dtoa_r+0x910>
   1bd40:	4615      	mov	r5, r2
   1bd42:	e7f7      	b.n	1bd34 <_dtoa_r+0xae4>
   1bd44:	9b03      	ldr	r3, [sp, #12]
   1bd46:	4293      	cmp	r3, r2
   1bd48:	d104      	bne.n	1bd54 <_dtoa_r+0xb04>
   1bd4a:	f10a 0a01 	add.w	sl, sl, #1
   1bd4e:	2331      	movs	r3, #49	; 0x31
   1bd50:	9a03      	ldr	r2, [sp, #12]
   1bd52:	e786      	b.n	1bc62 <_dtoa_r+0xa12>
   1bd54:	4615      	mov	r5, r2
   1bd56:	e7a9      	b.n	1bcac <_dtoa_r+0xa5c>
   1bd58:	4b13      	ldr	r3, [pc, #76]	; (1bda8 <_dtoa_r+0xb58>)
   1bd5a:	f7ff bae1 	b.w	1b320 <_dtoa_r+0xd0>
   1bd5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1bd60:	2b00      	cmp	r3, #0
   1bd62:	f47f aab9 	bne.w	1b2d8 <_dtoa_r+0x88>
   1bd66:	4b11      	ldr	r3, [pc, #68]	; (1bdac <_dtoa_r+0xb5c>)
   1bd68:	f7ff bada 	b.w	1b320 <_dtoa_r+0xd0>
   1bd6c:	9b04      	ldr	r3, [sp, #16]
   1bd6e:	2b00      	cmp	r3, #0
   1bd70:	dc03      	bgt.n	1bd7a <_dtoa_r+0xb2a>
   1bd72:	9b08      	ldr	r3, [sp, #32]
   1bd74:	2b02      	cmp	r3, #2
   1bd76:	f73f aedf 	bgt.w	1bb38 <_dtoa_r+0x8e8>
   1bd7a:	9d03      	ldr	r5, [sp, #12]
   1bd7c:	4621      	mov	r1, r4
   1bd7e:	4640      	mov	r0, r8
   1bd80:	f025 fa5a 	bl	41238 <quorem>
   1bd84:	9a03      	ldr	r2, [sp, #12]
   1bd86:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1bd8a:	9904      	ldr	r1, [sp, #16]
   1bd8c:	f805 3b01 	strb.w	r3, [r5], #1
   1bd90:	1aaa      	subs	r2, r5, r2
   1bd92:	4291      	cmp	r1, r2
   1bd94:	ddbd      	ble.n	1bd12 <_dtoa_r+0xac2>
   1bd96:	4641      	mov	r1, r8
   1bd98:	2300      	movs	r3, #0
   1bd9a:	220a      	movs	r2, #10
   1bd9c:	4658      	mov	r0, fp
   1bd9e:	f025 fcb0 	bl	41702 <__multadd>
   1bda2:	4680      	mov	r8, r0
   1bda4:	e7ea      	b.n	1bd7c <_dtoa_r+0xb2c>
   1bda6:	bf00      	nop
   1bda8:	00049224 	.word	0x00049224
   1bdac:	00049817 	.word	0x00049817

0001bdb0 <nan>:
   1bdb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 1bdb8 <nan+0x8>
   1bdb4:	4770      	bx	lr
   1bdb6:	bf00      	nop
   1bdb8:	00000000 	.word	0x00000000
   1bdbc:	7ff80000 	.word	0x7ff80000

0001bdc0 <sin>:
   1bdc0:	ec51 0b10 	vmov	r0, r1, d0
   1bdc4:	4a2c      	ldr	r2, [pc, #176]	; (1be78 <sin+0xb8>)
   1bdc6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1bdca:	4293      	cmp	r3, r2
   1bdcc:	b500      	push	{lr}
   1bdce:	b085      	sub	sp, #20
   1bdd0:	dd27      	ble.n	1be22 <sin+0x62>
   1bdd2:	4a2a      	ldr	r2, [pc, #168]	; (1be7c <sin+0xbc>)
   1bdd4:	4293      	cmp	r3, r2
   1bdd6:	dd09      	ble.n	1bdec <sin+0x2c>
   1bdd8:	ee10 2a10 	vmov	r2, s0
   1bddc:	460b      	mov	r3, r1
   1bdde:	f7fc fb23 	bl	18428 <__aeabi_dsub>
   1bde2:	ec41 0b10 	vmov	d0, r0, r1
   1bde6:	b005      	add	sp, #20
   1bde8:	f85d fb04 	ldr.w	pc, [sp], #4
   1bdec:	4668      	mov	r0, sp
   1bdee:	f000 f847 	bl	1be80 <__ieee754_rem_pio2>
   1bdf2:	f000 0003 	and.w	r0, r0, #3
   1bdf6:	2801      	cmp	r0, #1
   1bdf8:	d01f      	beq.n	1be3a <sin+0x7a>
   1bdfa:	2802      	cmp	r0, #2
   1bdfc:	d030      	beq.n	1be60 <sin+0xa0>
   1bdfe:	b328      	cbz	r0, 1be4c <sin+0x8c>
   1be00:	ed9d 1b02 	vldr	d1, [sp, #8]
   1be04:	ed9d 0b00 	vldr	d0, [sp]
   1be08:	f000 fa56 	bl	1c2b8 <__kernel_cos>
   1be0c:	ee10 0a10 	vmov	r0, s0
   1be10:	ec53 2b10 	vmov	r2, r3, d0
   1be14:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   1be18:	ec41 0b10 	vmov	d0, r0, r1
   1be1c:	b005      	add	sp, #20
   1be1e:	f85d fb04 	ldr.w	pc, [sp], #4
   1be22:	2000      	movs	r0, #0
   1be24:	ed9f 1b12 	vldr	d1, [pc, #72]	; 1be70 <sin+0xb0>
   1be28:	f000 ff9e 	bl	1cd68 <__kernel_sin>
   1be2c:	ec51 0b10 	vmov	r0, r1, d0
   1be30:	ec41 0b10 	vmov	d0, r0, r1
   1be34:	b005      	add	sp, #20
   1be36:	f85d fb04 	ldr.w	pc, [sp], #4
   1be3a:	ed9d 1b02 	vldr	d1, [sp, #8]
   1be3e:	ed9d 0b00 	vldr	d0, [sp]
   1be42:	f000 fa39 	bl	1c2b8 <__kernel_cos>
   1be46:	ec51 0b10 	vmov	r0, r1, d0
   1be4a:	e7ca      	b.n	1bde2 <sin+0x22>
   1be4c:	2001      	movs	r0, #1
   1be4e:	ed9d 1b02 	vldr	d1, [sp, #8]
   1be52:	ed9d 0b00 	vldr	d0, [sp]
   1be56:	f000 ff87 	bl	1cd68 <__kernel_sin>
   1be5a:	ec51 0b10 	vmov	r0, r1, d0
   1be5e:	e7c0      	b.n	1bde2 <sin+0x22>
   1be60:	2001      	movs	r0, #1
   1be62:	ed9d 1b02 	vldr	d1, [sp, #8]
   1be66:	ed9d 0b00 	vldr	d0, [sp]
   1be6a:	f000 ff7d 	bl	1cd68 <__kernel_sin>
   1be6e:	e7cd      	b.n	1be0c <sin+0x4c>
	...
   1be78:	3fe921fb 	.word	0x3fe921fb
   1be7c:	7fefffff 	.word	0x7fefffff

0001be80 <__ieee754_rem_pio2>:
   1be80:	ec53 2b10 	vmov	r2, r3, d0
   1be84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be88:	4999      	ldr	r1, [pc, #612]	; (1c0f0 <__ieee754_rem_pio2+0x270>)
   1be8a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   1be8e:	b08f      	sub	sp, #60	; 0x3c
   1be90:	428d      	cmp	r5, r1
   1be92:	f340 8088 	ble.w	1bfa6 <__ieee754_rem_pio2+0x126>
   1be96:	4997      	ldr	r1, [pc, #604]	; (1c0f4 <__ieee754_rem_pio2+0x274>)
   1be98:	461e      	mov	r6, r3
   1be9a:	4604      	mov	r4, r0
   1be9c:	428d      	cmp	r5, r1
   1be9e:	dc29      	bgt.n	1bef4 <__ieee754_rem_pio2+0x74>
   1bea0:	2e00      	cmp	r6, #0
   1bea2:	4619      	mov	r1, r3
   1bea4:	ee10 0a10 	vmov	r0, s0
   1bea8:	a387      	add	r3, pc, #540	; (adr r3, 1c0c8 <__ieee754_rem_pio2+0x248>)
   1beaa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1beae:	f340 81ae 	ble.w	1c20e <__ieee754_rem_pio2+0x38e>
   1beb2:	f7fc fab9 	bl	18428 <__aeabi_dsub>
   1beb6:	4b90      	ldr	r3, [pc, #576]	; (1c0f8 <__ieee754_rem_pio2+0x278>)
   1beb8:	4680      	mov	r8, r0
   1beba:	4689      	mov	r9, r1
   1bebc:	429d      	cmp	r5, r3
   1bebe:	f000 8088 	beq.w	1bfd2 <__ieee754_rem_pio2+0x152>
   1bec2:	2701      	movs	r7, #1
   1bec4:	a382      	add	r3, pc, #520	; (adr r3, 1c0d0 <__ieee754_rem_pio2+0x250>)
   1bec6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1beca:	f7fc faad 	bl	18428 <__aeabi_dsub>
   1bece:	4602      	mov	r2, r0
   1bed0:	460b      	mov	r3, r1
   1bed2:	4640      	mov	r0, r8
   1bed4:	4649      	mov	r1, r9
   1bed6:	e9c4 2300 	strd	r2, r3, [r4]
   1beda:	f7fc faa5 	bl	18428 <__aeabi_dsub>
   1bede:	a37c      	add	r3, pc, #496	; (adr r3, 1c0d0 <__ieee754_rem_pio2+0x250>)
   1bee0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bee4:	f7fc faa0 	bl	18428 <__aeabi_dsub>
   1bee8:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1beec:	4638      	mov	r0, r7
   1beee:	b00f      	add	sp, #60	; 0x3c
   1bef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bef4:	4981      	ldr	r1, [pc, #516]	; (1c0fc <__ieee754_rem_pio2+0x27c>)
   1bef6:	428d      	cmp	r5, r1
   1bef8:	f340 808b 	ble.w	1c012 <__ieee754_rem_pio2+0x192>
   1befc:	4980      	ldr	r1, [pc, #512]	; (1c100 <__ieee754_rem_pio2+0x280>)
   1befe:	428d      	cmp	r5, r1
   1bf00:	dc5c      	bgt.n	1bfbc <__ieee754_rem_pio2+0x13c>
   1bf02:	152f      	asrs	r7, r5, #20
   1bf04:	ee10 0a10 	vmov	r0, s0
   1bf08:	ee10 8a10 	vmov	r8, s0
   1bf0c:	f2a7 4716 	subw	r7, r7, #1046	; 0x416
   1bf10:	eba5 5907 	sub.w	r9, r5, r7, lsl #20
   1bf14:	4649      	mov	r1, r9
   1bf16:	f7fc fed9 	bl	18ccc <__aeabi_d2iz>
   1bf1a:	f7fc fbd3 	bl	186c4 <__aeabi_i2d>
   1bf1e:	4682      	mov	sl, r0
   1bf20:	468b      	mov	fp, r1
   1bf22:	4640      	mov	r0, r8
   1bf24:	4649      	mov	r1, r9
   1bf26:	4652      	mov	r2, sl
   1bf28:	465b      	mov	r3, fp
   1bf2a:	e9cd ab08 	strd	sl, fp, [sp, #32]
   1bf2e:	f7fc fa7b 	bl	18428 <__aeabi_dsub>
   1bf32:	2200      	movs	r2, #0
   1bf34:	4b73      	ldr	r3, [pc, #460]	; (1c104 <__ieee754_rem_pio2+0x284>)
   1bf36:	f7fc fc2f 	bl	18798 <__aeabi_dmul>
   1bf3a:	4689      	mov	r9, r1
   1bf3c:	4680      	mov	r8, r0
   1bf3e:	f7fc fec5 	bl	18ccc <__aeabi_d2iz>
   1bf42:	4605      	mov	r5, r0
   1bf44:	f7fc fbbe 	bl	186c4 <__aeabi_i2d>
   1bf48:	4602      	mov	r2, r0
   1bf4a:	460b      	mov	r3, r1
   1bf4c:	4640      	mov	r0, r8
   1bf4e:	4649      	mov	r1, r9
   1bf50:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   1bf54:	f7fc fa68 	bl	18428 <__aeabi_dsub>
   1bf58:	2200      	movs	r2, #0
   1bf5a:	4b6a      	ldr	r3, [pc, #424]	; (1c104 <__ieee754_rem_pio2+0x284>)
   1bf5c:	f7fc fc1c 	bl	18798 <__aeabi_dmul>
   1bf60:	2200      	movs	r2, #0
   1bf62:	2300      	movs	r3, #0
   1bf64:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1bf68:	f7fc fe7e 	bl	18c68 <__aeabi_dcmpeq>
   1bf6c:	2800      	cmp	r0, #0
   1bf6e:	f000 814c 	beq.w	1c20a <__ieee754_rem_pio2+0x38a>
   1bf72:	2d00      	cmp	r5, #0
   1bf74:	bf0c      	ite	eq
   1bf76:	2301      	moveq	r3, #1
   1bf78:	2302      	movne	r3, #2
   1bf7a:	4963      	ldr	r1, [pc, #396]	; (1c108 <__ieee754_rem_pio2+0x288>)
   1bf7c:	2002      	movs	r0, #2
   1bf7e:	463a      	mov	r2, r7
   1bf80:	9101      	str	r1, [sp, #4]
   1bf82:	4621      	mov	r1, r4
   1bf84:	9000      	str	r0, [sp, #0]
   1bf86:	a808      	add	r0, sp, #32
   1bf88:	f000 fada 	bl	1c540 <__kernel_rem_pio2>
   1bf8c:	2e00      	cmp	r6, #0
   1bf8e:	4607      	mov	r7, r0
   1bf90:	daac      	bge.n	1beec <__ieee754_rem_pio2+0x6c>
   1bf92:	6862      	ldr	r2, [r4, #4]
   1bf94:	4247      	negs	r7, r0
   1bf96:	68e3      	ldr	r3, [r4, #12]
   1bf98:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   1bf9c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1bfa0:	6062      	str	r2, [r4, #4]
   1bfa2:	60e3      	str	r3, [r4, #12]
   1bfa4:	e7a2      	b.n	1beec <__ieee754_rem_pio2+0x6c>
   1bfa6:	2700      	movs	r7, #0
   1bfa8:	2400      	movs	r4, #0
   1bfaa:	2500      	movs	r5, #0
   1bfac:	ed80 0b00 	vstr	d0, [r0]
   1bfb0:	e9c0 4502 	strd	r4, r5, [r0, #8]
   1bfb4:	4638      	mov	r0, r7
   1bfb6:	b00f      	add	sp, #60	; 0x3c
   1bfb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bfbc:	ee10 0a10 	vmov	r0, s0
   1bfc0:	4619      	mov	r1, r3
   1bfc2:	f7fc fa31 	bl	18428 <__aeabi_dsub>
   1bfc6:	2700      	movs	r7, #0
   1bfc8:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1bfcc:	e9c4 0100 	strd	r0, r1, [r4]
   1bfd0:	e78c      	b.n	1beec <__ieee754_rem_pio2+0x6c>
   1bfd2:	a341      	add	r3, pc, #260	; (adr r3, 1c0d8 <__ieee754_rem_pio2+0x258>)
   1bfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bfd8:	f7fc fa26 	bl	18428 <__aeabi_dsub>
   1bfdc:	4606      	mov	r6, r0
   1bfde:	460f      	mov	r7, r1
   1bfe0:	a33f      	add	r3, pc, #252	; (adr r3, 1c0e0 <__ieee754_rem_pio2+0x260>)
   1bfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bfe6:	f7fc fa1f 	bl	18428 <__aeabi_dsub>
   1bfea:	4602      	mov	r2, r0
   1bfec:	460b      	mov	r3, r1
   1bfee:	4630      	mov	r0, r6
   1bff0:	4639      	mov	r1, r7
   1bff2:	2701      	movs	r7, #1
   1bff4:	e9c4 2300 	strd	r2, r3, [r4]
   1bff8:	f7fc fa16 	bl	18428 <__aeabi_dsub>
   1bffc:	a338      	add	r3, pc, #224	; (adr r3, 1c0e0 <__ieee754_rem_pio2+0x260>)
   1bffe:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c002:	f7fc fa11 	bl	18428 <__aeabi_dsub>
   1c006:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1c00a:	4638      	mov	r0, r7
   1c00c:	b00f      	add	sp, #60	; 0x3c
   1c00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c012:	f022 f803 	bl	3e01c <fabs>
   1c016:	ee10 0a10 	vmov	r0, s0
   1c01a:	ec59 8b10 	vmov	r8, r9, d0
   1c01e:	a332      	add	r3, pc, #200	; (adr r3, 1c0e8 <__ieee754_rem_pio2+0x268>)
   1c020:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c024:	4649      	mov	r1, r9
   1c026:	f7fc fbb7 	bl	18798 <__aeabi_dmul>
   1c02a:	2200      	movs	r2, #0
   1c02c:	4b37      	ldr	r3, [pc, #220]	; (1c10c <__ieee754_rem_pio2+0x28c>)
   1c02e:	f7fc f9fd 	bl	1842c <__adddf3>
   1c032:	f7fc fe4b 	bl	18ccc <__aeabi_d2iz>
   1c036:	4607      	mov	r7, r0
   1c038:	f7fc fb44 	bl	186c4 <__aeabi_i2d>
   1c03c:	a322      	add	r3, pc, #136	; (adr r3, 1c0c8 <__ieee754_rem_pio2+0x248>)
   1c03e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c042:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1c046:	f7fc fba7 	bl	18798 <__aeabi_dmul>
   1c04a:	4602      	mov	r2, r0
   1c04c:	460b      	mov	r3, r1
   1c04e:	4640      	mov	r0, r8
   1c050:	4649      	mov	r1, r9
   1c052:	f7fc f9e9 	bl	18428 <__aeabi_dsub>
   1c056:	4682      	mov	sl, r0
   1c058:	468b      	mov	fp, r1
   1c05a:	a31d      	add	r3, pc, #116	; (adr r3, 1c0d0 <__ieee754_rem_pio2+0x250>)
   1c05c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c060:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1c064:	f7fc fb98 	bl	18798 <__aeabi_dmul>
   1c068:	2f1f      	cmp	r7, #31
   1c06a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1c06e:	dc51      	bgt.n	1c114 <__ieee754_rem_pio2+0x294>
   1c070:	4602      	mov	r2, r0
   1c072:	460b      	mov	r3, r1
   1c074:	4650      	mov	r0, sl
   1c076:	4659      	mov	r1, fp
   1c078:	f7fc f9d6 	bl	18428 <__aeabi_dsub>
   1c07c:	4b24      	ldr	r3, [pc, #144]	; (1c110 <__ieee754_rem_pio2+0x290>)
   1c07e:	1e7a      	subs	r2, r7, #1
   1c080:	4680      	mov	r8, r0
   1c082:	4689      	mov	r9, r1
   1c084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1c088:	42ab      	cmp	r3, r5
   1c08a:	d04b      	beq.n	1c124 <__ieee754_rem_pio2+0x2a4>
   1c08c:	4642      	mov	r2, r8
   1c08e:	464b      	mov	r3, r9
   1c090:	4650      	mov	r0, sl
   1c092:	4659      	mov	r1, fp
   1c094:	e9c4 8900 	strd	r8, r9, [r4]
   1c098:	f7fc f9c6 	bl	18428 <__aeabi_dsub>
   1c09c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c0a0:	f7fc f9c2 	bl	18428 <__aeabi_dsub>
   1c0a4:	2e00      	cmp	r6, #0
   1c0a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1c0aa:	f6bf af1f 	bge.w	1beec <__ieee754_rem_pio2+0x6c>
   1c0ae:	f109 4500 	add.w	r5, r9, #2147483648	; 0x80000000
   1c0b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1c0b6:	427f      	negs	r7, r7
   1c0b8:	e9c4 8500 	strd	r8, r5, [r4]
   1c0bc:	e9c4 0302 	strd	r0, r3, [r4, #8]
   1c0c0:	e714      	b.n	1beec <__ieee754_rem_pio2+0x6c>
   1c0c2:	bf00      	nop
   1c0c4:	f3af 8000 	nop.w
   1c0c8:	54400000 	.word	0x54400000
   1c0cc:	3ff921fb 	.word	0x3ff921fb
   1c0d0:	1a626331 	.word	0x1a626331
   1c0d4:	3dd0b461 	.word	0x3dd0b461
   1c0d8:	1a600000 	.word	0x1a600000
   1c0dc:	3dd0b461 	.word	0x3dd0b461
   1c0e0:	2e037073 	.word	0x2e037073
   1c0e4:	3ba3198a 	.word	0x3ba3198a
   1c0e8:	6dc9c883 	.word	0x6dc9c883
   1c0ec:	3fe45f30 	.word	0x3fe45f30
   1c0f0:	3fe921fb 	.word	0x3fe921fb
   1c0f4:	4002d97b 	.word	0x4002d97b
   1c0f8:	3ff921fb 	.word	0x3ff921fb
   1c0fc:	413921fb 	.word	0x413921fb
   1c100:	7fefffff 	.word	0x7fefffff
   1c104:	41700000 	.word	0x41700000
   1c108:	000440c8 	.word	0x000440c8
   1c10c:	3fe00000 	.word	0x3fe00000
   1c110:	00044048 	.word	0x00044048
   1c114:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c118:	4650      	mov	r0, sl
   1c11a:	4659      	mov	r1, fp
   1c11c:	f7fc f984 	bl	18428 <__aeabi_dsub>
   1c120:	4680      	mov	r8, r0
   1c122:	4689      	mov	r9, r1
   1c124:	152d      	asrs	r5, r5, #20
   1c126:	f3c9 530a 	ubfx	r3, r9, #20, #11
   1c12a:	1aeb      	subs	r3, r5, r3
   1c12c:	2b10      	cmp	r3, #16
   1c12e:	ddad      	ble.n	1c08c <__ieee754_rem_pio2+0x20c>
   1c130:	a357      	add	r3, pc, #348	; (adr r3, 1c290 <__ieee754_rem_pio2+0x410>)
   1c132:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c136:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1c13a:	f7fc fb2d 	bl	18798 <__aeabi_dmul>
   1c13e:	4680      	mov	r8, r0
   1c140:	4689      	mov	r9, r1
   1c142:	4602      	mov	r2, r0
   1c144:	460b      	mov	r3, r1
   1c146:	4650      	mov	r0, sl
   1c148:	4659      	mov	r1, fp
   1c14a:	f7fc f96d 	bl	18428 <__aeabi_dsub>
   1c14e:	4602      	mov	r2, r0
   1c150:	460b      	mov	r3, r1
   1c152:	4650      	mov	r0, sl
   1c154:	4659      	mov	r1, fp
   1c156:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1c15a:	f7fc f965 	bl	18428 <__aeabi_dsub>
   1c15e:	4642      	mov	r2, r8
   1c160:	464b      	mov	r3, r9
   1c162:	f7fc f961 	bl	18428 <__aeabi_dsub>
   1c166:	4680      	mov	r8, r0
   1c168:	4689      	mov	r9, r1
   1c16a:	a34b      	add	r3, pc, #300	; (adr r3, 1c298 <__ieee754_rem_pio2+0x418>)
   1c16c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c170:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1c174:	f7fc fb10 	bl	18798 <__aeabi_dmul>
   1c178:	4642      	mov	r2, r8
   1c17a:	464b      	mov	r3, r9
   1c17c:	f7fc f954 	bl	18428 <__aeabi_dsub>
   1c180:	460b      	mov	r3, r1
   1c182:	4602      	mov	r2, r0
   1c184:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
   1c188:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1c18c:	4650      	mov	r0, sl
   1c18e:	4659      	mov	r1, fp
   1c190:	f7fc f94a 	bl	18428 <__aeabi_dsub>
   1c194:	f3c1 530a 	ubfx	r3, r1, #20, #11
   1c198:	4680      	mov	r8, r0
   1c19a:	4689      	mov	r9, r1
   1c19c:	1aed      	subs	r5, r5, r3
   1c19e:	2d31      	cmp	r5, #49	; 0x31
   1c1a0:	f77f af74 	ble.w	1c08c <__ieee754_rem_pio2+0x20c>
   1c1a4:	a33f      	add	r3, pc, #252	; (adr r3, 1c2a4 <__ieee754_rem_pio2+0x424>)
   1c1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c1aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1c1ae:	f7fc faf3 	bl	18798 <__aeabi_dmul>
   1c1b2:	4680      	mov	r8, r0
   1c1b4:	4689      	mov	r9, r1
   1c1b6:	4602      	mov	r2, r0
   1c1b8:	460b      	mov	r3, r1
   1c1ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1c1be:	f7fc f933 	bl	18428 <__aeabi_dsub>
   1c1c2:	4602      	mov	r2, r0
   1c1c4:	460b      	mov	r3, r1
   1c1c6:	4682      	mov	sl, r0
   1c1c8:	468b      	mov	fp, r1
   1c1ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1c1ce:	f7fc f92b 	bl	18428 <__aeabi_dsub>
   1c1d2:	4642      	mov	r2, r8
   1c1d4:	464b      	mov	r3, r9
   1c1d6:	f7fc f927 	bl	18428 <__aeabi_dsub>
   1c1da:	4680      	mov	r8, r0
   1c1dc:	4689      	mov	r9, r1
   1c1de:	a333      	add	r3, pc, #204	; (adr r3, 1c2ac <__ieee754_rem_pio2+0x42c>)
   1c1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c1e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1c1e8:	f7fc fad6 	bl	18798 <__aeabi_dmul>
   1c1ec:	4642      	mov	r2, r8
   1c1ee:	464b      	mov	r3, r9
   1c1f0:	f7fc f91a 	bl	18428 <__aeabi_dsub>
   1c1f4:	4602      	mov	r2, r0
   1c1f6:	460b      	mov	r3, r1
   1c1f8:	4650      	mov	r0, sl
   1c1fa:	4659      	mov	r1, fp
   1c1fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1c200:	f7fc f912 	bl	18428 <__aeabi_dsub>
   1c204:	4680      	mov	r8, r0
   1c206:	4689      	mov	r9, r1
   1c208:	e740      	b.n	1c08c <__ieee754_rem_pio2+0x20c>
   1c20a:	2303      	movs	r3, #3
   1c20c:	e6b5      	b.n	1bf7a <__ieee754_rem_pio2+0xfa>
   1c20e:	f7fc f90d 	bl	1842c <__adddf3>
   1c212:	4b23      	ldr	r3, [pc, #140]	; (1c2a0 <__ieee754_rem_pio2+0x420>)
   1c214:	4680      	mov	r8, r0
   1c216:	4689      	mov	r9, r1
   1c218:	429d      	cmp	r5, r3
   1c21a:	d016      	beq.n	1c24a <__ieee754_rem_pio2+0x3ca>
   1c21c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1c220:	a319      	add	r3, pc, #100	; (adr r3, 1c288 <__ieee754_rem_pio2+0x408>)
   1c222:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c226:	f7fc f901 	bl	1842c <__adddf3>
   1c22a:	4602      	mov	r2, r0
   1c22c:	460b      	mov	r3, r1
   1c22e:	4640      	mov	r0, r8
   1c230:	4649      	mov	r1, r9
   1c232:	e9c4 2300 	strd	r2, r3, [r4]
   1c236:	f7fc f8f7 	bl	18428 <__aeabi_dsub>
   1c23a:	a313      	add	r3, pc, #76	; (adr r3, 1c288 <__ieee754_rem_pio2+0x408>)
   1c23c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c240:	f7fc f8f4 	bl	1842c <__adddf3>
   1c244:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1c248:	e650      	b.n	1beec <__ieee754_rem_pio2+0x6c>
   1c24a:	a311      	add	r3, pc, #68	; (adr r3, 1c290 <__ieee754_rem_pio2+0x410>)
   1c24c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c250:	f7fc f8ec 	bl	1842c <__adddf3>
   1c254:	460f      	mov	r7, r1
   1c256:	4606      	mov	r6, r0
   1c258:	a30f      	add	r3, pc, #60	; (adr r3, 1c298 <__ieee754_rem_pio2+0x418>)
   1c25a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c25e:	f7fc f8e5 	bl	1842c <__adddf3>
   1c262:	4602      	mov	r2, r0
   1c264:	460b      	mov	r3, r1
   1c266:	4630      	mov	r0, r6
   1c268:	4639      	mov	r1, r7
   1c26a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1c26e:	e9c4 2300 	strd	r2, r3, [r4]
   1c272:	f7fc f8d9 	bl	18428 <__aeabi_dsub>
   1c276:	a308      	add	r3, pc, #32	; (adr r3, 1c298 <__ieee754_rem_pio2+0x418>)
   1c278:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c27c:	f7fc f8d6 	bl	1842c <__adddf3>
   1c280:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1c284:	e632      	b.n	1beec <__ieee754_rem_pio2+0x6c>
   1c286:	bf00      	nop
   1c288:	1a626331 	.word	0x1a626331
   1c28c:	3dd0b461 	.word	0x3dd0b461
   1c290:	1a600000 	.word	0x1a600000
   1c294:	3dd0b461 	.word	0x3dd0b461
   1c298:	2e037073 	.word	0x2e037073
   1c29c:	3ba3198a 	.word	0x3ba3198a
   1c2a0:	3ff921fb 	.word	0x3ff921fb
   1c2a4:	2e000000 	.word	0x2e000000
   1c2a8:	3ba3198a 	.word	0x3ba3198a
   1c2ac:	252049c1 	.word	0x252049c1
   1c2b0:	397b839a 	.word	0x397b839a
   1c2b4:	00000000 	.word	0x00000000

0001c2b8 <__kernel_cos>:
   1c2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c2bc:	ec57 6b10 	vmov	r6, r7, d0
   1c2c0:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   1c2c4:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   1c2c8:	ed2d 8b02 	vpush	{d8}
   1c2cc:	eeb0 8a41 	vmov.f32	s16, s2
   1c2d0:	eef0 8a61 	vmov.f32	s17, s3
   1c2d4:	b083      	sub	sp, #12
   1c2d6:	da72      	bge.n	1c3be <__kernel_cos+0x106>
   1c2d8:	ee10 0a10 	vmov	r0, s0
   1c2dc:	4639      	mov	r1, r7
   1c2de:	f7fc fcf5 	bl	18ccc <__aeabi_d2iz>
   1c2e2:	2800      	cmp	r0, #0
   1c2e4:	f000 80f6 	beq.w	1c4d4 <__kernel_cos+0x21c>
   1c2e8:	4632      	mov	r2, r6
   1c2ea:	463b      	mov	r3, r7
   1c2ec:	4630      	mov	r0, r6
   1c2ee:	4639      	mov	r1, r7
   1c2f0:	f7fc fa52 	bl	18798 <__aeabi_dmul>
   1c2f4:	4604      	mov	r4, r0
   1c2f6:	460d      	mov	r5, r1
   1c2f8:	a37b      	add	r3, pc, #492	; (adr r3, 1c4e8 <__kernel_cos+0x230>)
   1c2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c2fe:	f7fc fa4b 	bl	18798 <__aeabi_dmul>
   1c302:	a37b      	add	r3, pc, #492	; (adr r3, 1c4f0 <__kernel_cos+0x238>)
   1c304:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c308:	f7fc f890 	bl	1842c <__adddf3>
   1c30c:	4622      	mov	r2, r4
   1c30e:	462b      	mov	r3, r5
   1c310:	f7fc fa42 	bl	18798 <__aeabi_dmul>
   1c314:	a378      	add	r3, pc, #480	; (adr r3, 1c4f8 <__kernel_cos+0x240>)
   1c316:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c31a:	f7fc f885 	bl	18428 <__aeabi_dsub>
   1c31e:	4622      	mov	r2, r4
   1c320:	462b      	mov	r3, r5
   1c322:	f7fc fa39 	bl	18798 <__aeabi_dmul>
   1c326:	a376      	add	r3, pc, #472	; (adr r3, 1c500 <__kernel_cos+0x248>)
   1c328:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c32c:	f7fc f87e 	bl	1842c <__adddf3>
   1c330:	4622      	mov	r2, r4
   1c332:	462b      	mov	r3, r5
   1c334:	f7fc fa30 	bl	18798 <__aeabi_dmul>
   1c338:	a373      	add	r3, pc, #460	; (adr r3, 1c508 <__kernel_cos+0x250>)
   1c33a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c33e:	f7fc f873 	bl	18428 <__aeabi_dsub>
   1c342:	4622      	mov	r2, r4
   1c344:	462b      	mov	r3, r5
   1c346:	f7fc fa27 	bl	18798 <__aeabi_dmul>
   1c34a:	a371      	add	r3, pc, #452	; (adr r3, 1c510 <__kernel_cos+0x258>)
   1c34c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c350:	f7fc f86c 	bl	1842c <__adddf3>
   1c354:	4622      	mov	r2, r4
   1c356:	462b      	mov	r3, r5
   1c358:	f7fc fa1e 	bl	18798 <__aeabi_dmul>
   1c35c:	4682      	mov	sl, r0
   1c35e:	468b      	mov	fp, r1
   1c360:	2200      	movs	r2, #0
   1c362:	4b71      	ldr	r3, [pc, #452]	; (1c528 <__kernel_cos+0x270>)
   1c364:	4620      	mov	r0, r4
   1c366:	4629      	mov	r1, r5
   1c368:	f7fc fa16 	bl	18798 <__aeabi_dmul>
   1c36c:	4652      	mov	r2, sl
   1c36e:	4680      	mov	r8, r0
   1c370:	4689      	mov	r9, r1
   1c372:	465b      	mov	r3, fp
   1c374:	4620      	mov	r0, r4
   1c376:	4629      	mov	r1, r5
   1c378:	f7fc fa0e 	bl	18798 <__aeabi_dmul>
   1c37c:	4604      	mov	r4, r0
   1c37e:	460d      	mov	r5, r1
   1c380:	4630      	mov	r0, r6
   1c382:	4639      	mov	r1, r7
   1c384:	ec53 2b18 	vmov	r2, r3, d8
   1c388:	f7fc fa06 	bl	18798 <__aeabi_dmul>
   1c38c:	4602      	mov	r2, r0
   1c38e:	460b      	mov	r3, r1
   1c390:	4620      	mov	r0, r4
   1c392:	4629      	mov	r1, r5
   1c394:	f7fc f848 	bl	18428 <__aeabi_dsub>
   1c398:	4602      	mov	r2, r0
   1c39a:	460b      	mov	r3, r1
   1c39c:	4640      	mov	r0, r8
   1c39e:	4649      	mov	r1, r9
   1c3a0:	f7fc f842 	bl	18428 <__aeabi_dsub>
   1c3a4:	4602      	mov	r2, r0
   1c3a6:	460b      	mov	r3, r1
   1c3a8:	2000      	movs	r0, #0
   1c3aa:	4960      	ldr	r1, [pc, #384]	; (1c52c <__kernel_cos+0x274>)
   1c3ac:	f7fc f83c 	bl	18428 <__aeabi_dsub>
   1c3b0:	ec41 0b10 	vmov	d0, r0, r1
   1c3b4:	b003      	add	sp, #12
   1c3b6:	ecbd 8b02 	vpop	{d8}
   1c3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c3be:	ee10 2a10 	vmov	r2, s0
   1c3c2:	ee10 0a10 	vmov	r0, s0
   1c3c6:	463b      	mov	r3, r7
   1c3c8:	4639      	mov	r1, r7
   1c3ca:	f7fc f9e5 	bl	18798 <__aeabi_dmul>
   1c3ce:	4604      	mov	r4, r0
   1c3d0:	460d      	mov	r5, r1
   1c3d2:	a345      	add	r3, pc, #276	; (adr r3, 1c4e8 <__kernel_cos+0x230>)
   1c3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c3d8:	f7fc f9de 	bl	18798 <__aeabi_dmul>
   1c3dc:	a344      	add	r3, pc, #272	; (adr r3, 1c4f0 <__kernel_cos+0x238>)
   1c3de:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c3e2:	f7fc f823 	bl	1842c <__adddf3>
   1c3e6:	4622      	mov	r2, r4
   1c3e8:	462b      	mov	r3, r5
   1c3ea:	f7fc f9d5 	bl	18798 <__aeabi_dmul>
   1c3ee:	a342      	add	r3, pc, #264	; (adr r3, 1c4f8 <__kernel_cos+0x240>)
   1c3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c3f4:	f7fc f818 	bl	18428 <__aeabi_dsub>
   1c3f8:	4622      	mov	r2, r4
   1c3fa:	462b      	mov	r3, r5
   1c3fc:	f7fc f9cc 	bl	18798 <__aeabi_dmul>
   1c400:	a33f      	add	r3, pc, #252	; (adr r3, 1c500 <__kernel_cos+0x248>)
   1c402:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c406:	f7fc f811 	bl	1842c <__adddf3>
   1c40a:	4622      	mov	r2, r4
   1c40c:	462b      	mov	r3, r5
   1c40e:	f7fc f9c3 	bl	18798 <__aeabi_dmul>
   1c412:	a33d      	add	r3, pc, #244	; (adr r3, 1c508 <__kernel_cos+0x250>)
   1c414:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c418:	f7fc f806 	bl	18428 <__aeabi_dsub>
   1c41c:	4622      	mov	r2, r4
   1c41e:	462b      	mov	r3, r5
   1c420:	f7fc f9ba 	bl	18798 <__aeabi_dmul>
   1c424:	a33a      	add	r3, pc, #232	; (adr r3, 1c510 <__kernel_cos+0x258>)
   1c426:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c42a:	f7fb ffff 	bl	1842c <__adddf3>
   1c42e:	462b      	mov	r3, r5
   1c430:	4622      	mov	r2, r4
   1c432:	f7fc f9b1 	bl	18798 <__aeabi_dmul>
   1c436:	4b3e      	ldr	r3, [pc, #248]	; (1c530 <__kernel_cos+0x278>)
   1c438:	4682      	mov	sl, r0
   1c43a:	468b      	mov	fp, r1
   1c43c:	4599      	cmp	r9, r3
   1c43e:	dd8f      	ble.n	1c360 <__kernel_cos+0xa8>
   1c440:	4b3c      	ldr	r3, [pc, #240]	; (1c534 <__kernel_cos+0x27c>)
   1c442:	4599      	cmp	r9, r3
   1c444:	dc3d      	bgt.n	1c4c2 <__kernel_cos+0x20a>
   1c446:	2200      	movs	r2, #0
   1c448:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   1c44c:	2000      	movs	r0, #0
   1c44e:	4937      	ldr	r1, [pc, #220]	; (1c52c <__kernel_cos+0x274>)
   1c450:	4690      	mov	r8, r2
   1c452:	4699      	mov	r9, r3
   1c454:	f7fb ffe8 	bl	18428 <__aeabi_dsub>
   1c458:	e9cd 0100 	strd	r0, r1, [sp]
   1c45c:	2200      	movs	r2, #0
   1c45e:	4b32      	ldr	r3, [pc, #200]	; (1c528 <__kernel_cos+0x270>)
   1c460:	4620      	mov	r0, r4
   1c462:	4629      	mov	r1, r5
   1c464:	f7fc f998 	bl	18798 <__aeabi_dmul>
   1c468:	4642      	mov	r2, r8
   1c46a:	464b      	mov	r3, r9
   1c46c:	f7fb ffdc 	bl	18428 <__aeabi_dsub>
   1c470:	4652      	mov	r2, sl
   1c472:	4680      	mov	r8, r0
   1c474:	4689      	mov	r9, r1
   1c476:	465b      	mov	r3, fp
   1c478:	4620      	mov	r0, r4
   1c47a:	4629      	mov	r1, r5
   1c47c:	f7fc f98c 	bl	18798 <__aeabi_dmul>
   1c480:	4604      	mov	r4, r0
   1c482:	460d      	mov	r5, r1
   1c484:	4630      	mov	r0, r6
   1c486:	4639      	mov	r1, r7
   1c488:	ec53 2b18 	vmov	r2, r3, d8
   1c48c:	f7fc f984 	bl	18798 <__aeabi_dmul>
   1c490:	4602      	mov	r2, r0
   1c492:	460b      	mov	r3, r1
   1c494:	4620      	mov	r0, r4
   1c496:	4629      	mov	r1, r5
   1c498:	f7fb ffc6 	bl	18428 <__aeabi_dsub>
   1c49c:	4602      	mov	r2, r0
   1c49e:	460b      	mov	r3, r1
   1c4a0:	4640      	mov	r0, r8
   1c4a2:	4649      	mov	r1, r9
   1c4a4:	f7fb ffc0 	bl	18428 <__aeabi_dsub>
   1c4a8:	4602      	mov	r2, r0
   1c4aa:	460b      	mov	r3, r1
   1c4ac:	e9dd 0100 	ldrd	r0, r1, [sp]
   1c4b0:	f7fb ffba 	bl	18428 <__aeabi_dsub>
   1c4b4:	ec41 0b10 	vmov	d0, r0, r1
   1c4b8:	b003      	add	sp, #12
   1c4ba:	ecbd 8b02 	vpop	{d8}
   1c4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c4c2:	ed9f 7b15 	vldr	d7, [pc, #84]	; 1c518 <__kernel_cos+0x260>
   1c4c6:	f04f 0800 	mov.w	r8, #0
   1c4ca:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1c538 <__kernel_cos+0x280>
   1c4ce:	ed8d 7b00 	vstr	d7, [sp]
   1c4d2:	e7c3      	b.n	1c45c <__kernel_cos+0x1a4>
   1c4d4:	ed9f 0b12 	vldr	d0, [pc, #72]	; 1c520 <__kernel_cos+0x268>
   1c4d8:	b003      	add	sp, #12
   1c4da:	ecbd 8b02 	vpop	{d8}
   1c4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c4e2:	bf00      	nop
   1c4e4:	f3af 8000 	nop.w
   1c4e8:	be8838d4 	.word	0xbe8838d4
   1c4ec:	bda8fae9 	.word	0xbda8fae9
   1c4f0:	bdb4b1c4 	.word	0xbdb4b1c4
   1c4f4:	3e21ee9e 	.word	0x3e21ee9e
   1c4f8:	809c52ad 	.word	0x809c52ad
   1c4fc:	3e927e4f 	.word	0x3e927e4f
   1c500:	19cb1590 	.word	0x19cb1590
   1c504:	3efa01a0 	.word	0x3efa01a0
   1c508:	16c15177 	.word	0x16c15177
   1c50c:	3f56c16c 	.word	0x3f56c16c
   1c510:	5555554c 	.word	0x5555554c
   1c514:	3fa55555 	.word	0x3fa55555
   1c518:	00000000 	.word	0x00000000
   1c51c:	3fe70000 	.word	0x3fe70000
   1c520:	00000000 	.word	0x00000000
   1c524:	3ff00000 	.word	0x3ff00000
   1c528:	3fe00000 	.word	0x3fe00000
   1c52c:	3ff00000 	.word	0x3ff00000
   1c530:	3fd33332 	.word	0x3fd33332
   1c534:	3fe90000 	.word	0x3fe90000
   1c538:	3fd20000 	.word	0x3fd20000
   1c53c:	00000000 	.word	0x00000000

0001c540 <__kernel_rem_pio2>:
   1c540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c544:	461c      	mov	r4, r3
   1c546:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
   1c54a:	f112 0f14 	cmn.w	r2, #20
   1c54e:	910b      	str	r1, [sp, #44]	; 0x2c
   1c550:	f104 31ff 	add.w	r1, r4, #4294967295	; 0xffffffff
   1c554:	9308      	str	r3, [sp, #32]
   1c556:	9103      	str	r1, [sp, #12]
   1c558:	4bb1      	ldr	r3, [pc, #708]	; (1c820 <__kernel_rem_pio2+0x2e0>)
   1c55a:	99a2      	ldr	r1, [sp, #648]	; 0x288
   1c55c:	9004      	str	r0, [sp, #16]
   1c55e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1c562:	9305      	str	r3, [sp, #20]
   1c564:	f2c0 82c1 	blt.w	1caea <__kernel_rem_pio2+0x5aa>
   1c568:	1ed3      	subs	r3, r2, #3
   1c56a:	49ae      	ldr	r1, [pc, #696]	; (1c824 <__kernel_rem_pio2+0x2e4>)
   1c56c:	fb81 0103 	smull	r0, r1, r1, r3
   1c570:	17db      	asrs	r3, r3, #31
   1c572:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   1c576:	9307      	str	r3, [sp, #28]
   1c578:	3301      	adds	r3, #1
   1c57a:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   1c57e:	00db      	lsls	r3, r3, #3
   1c580:	18d3      	adds	r3, r2, r3
   1c582:	9a07      	ldr	r2, [sp, #28]
   1c584:	9306      	str	r3, [sp, #24]
   1c586:	9b03      	ldr	r3, [sp, #12]
   1c588:	1ad6      	subs	r6, r2, r3
   1c58a:	9a05      	ldr	r2, [sp, #20]
   1c58c:	eb12 0803 	adds.w	r8, r2, r3
   1c590:	d414      	bmi.n	1c5bc <__kernel_rem_pio2+0x7c>
   1c592:	f108 0801 	add.w	r8, r8, #1
   1c596:	af20      	add	r7, sp, #128	; 0x80
   1c598:	2400      	movs	r4, #0
   1c59a:	2500      	movs	r5, #0
   1c59c:	44b0      	add	r8, r6
   1c59e:	f8dd 928c 	ldr.w	r9, [sp, #652]	; 0x28c
   1c5a2:	2e00      	cmp	r6, #0
   1c5a4:	4620      	mov	r0, r4
   1c5a6:	4629      	mov	r1, r5
   1c5a8:	db03      	blt.n	1c5b2 <__kernel_rem_pio2+0x72>
   1c5aa:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
   1c5ae:	f7fc f889 	bl	186c4 <__aeabi_i2d>
   1c5b2:	3601      	adds	r6, #1
   1c5b4:	4546      	cmp	r6, r8
   1c5b6:	e8e7 0102 	strd	r0, r1, [r7], #8
   1c5ba:	d1f2      	bne.n	1c5a2 <__kernel_rem_pio2+0x62>
   1c5bc:	9b05      	ldr	r3, [sp, #20]
   1c5be:	2b00      	cmp	r3, #0
   1c5c0:	9b08      	ldr	r3, [sp, #32]
   1c5c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1c5c6:	9301      	str	r3, [sp, #4]
   1c5c8:	db29      	blt.n	1c61e <__kernel_rem_pio2+0xde>
   1c5ca:	9a04      	ldr	r2, [sp, #16]
   1c5cc:	a920      	add	r1, sp, #128	; 0x80
   1c5ce:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
   1c5d2:	eb02 0803 	add.w	r8, r2, r3
   1c5d6:	eb01 0903 	add.w	r9, r1, r3
   1c5da:	aa72      	add	r2, sp, #456	; 0x1c8
   1c5dc:	9b05      	ldr	r3, [sp, #20]
   1c5de:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
   1c5e2:	9b03      	ldr	r3, [sp, #12]
   1c5e4:	2b00      	cmp	r3, #0
   1c5e6:	f2c0 819e 	blt.w	1c926 <__kernel_rem_pio2+0x3e6>
   1c5ea:	464d      	mov	r5, r9
   1c5ec:	9c04      	ldr	r4, [sp, #16]
   1c5ee:	2600      	movs	r6, #0
   1c5f0:	2700      	movs	r7, #0
   1c5f2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   1c5f6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   1c5fa:	f7fc f8cd 	bl	18798 <__aeabi_dmul>
   1c5fe:	4602      	mov	r2, r0
   1c600:	460b      	mov	r3, r1
   1c602:	4630      	mov	r0, r6
   1c604:	4639      	mov	r1, r7
   1c606:	f7fb ff11 	bl	1842c <__adddf3>
   1c60a:	4544      	cmp	r4, r8
   1c60c:	4606      	mov	r6, r0
   1c60e:	460f      	mov	r7, r1
   1c610:	d1ef      	bne.n	1c5f2 <__kernel_rem_pio2+0xb2>
   1c612:	f109 0908 	add.w	r9, r9, #8
   1c616:	e8ea 6702 	strd	r6, r7, [sl], #8
   1c61a:	45da      	cmp	sl, fp
   1c61c:	d1e1      	bne.n	1c5e2 <__kernel_rem_pio2+0xa2>
   1c61e:	9905      	ldr	r1, [sp, #20]
   1c620:	9a01      	ldr	r2, [sp, #4]
   1c622:	9804      	ldr	r0, [sp, #16]
   1c624:	008b      	lsls	r3, r1, #2
   1c626:	9101      	str	r1, [sp, #4]
   1c628:	4402      	add	r2, r0
   1c62a:	a80b      	add	r0, sp, #44	; 0x2c
   1c62c:	4693      	mov	fp, r2
   1c62e:	f1a3 0208 	sub.w	r2, r3, #8
   1c632:	18c3      	adds	r3, r0, r3
   1c634:	930a      	str	r3, [sp, #40]	; 0x28
   1c636:	ab0c      	add	r3, sp, #48	; 0x30
   1c638:	4413      	add	r3, r2
   1c63a:	9309      	str	r3, [sp, #36]	; 0x24
   1c63c:	9a01      	ldr	r2, [sp, #4]
   1c63e:	a998      	add	r1, sp, #608	; 0x260
   1c640:	2a00      	cmp	r2, #0
   1c642:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   1c646:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   1c64a:	dd29      	ble.n	1c6a0 <__kernel_rem_pio2+0x160>
   1c64c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
   1c650:	f10d 0930 	add.w	r9, sp, #48	; 0x30
   1c654:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   1c658:	2200      	movs	r2, #0
   1c65a:	4b73      	ldr	r3, [pc, #460]	; (1c828 <__kernel_rem_pio2+0x2e8>)
   1c65c:	4620      	mov	r0, r4
   1c65e:	4629      	mov	r1, r5
   1c660:	f7fc f89a 	bl	18798 <__aeabi_dmul>
   1c664:	f7fc fb32 	bl	18ccc <__aeabi_d2iz>
   1c668:	f7fc f82c 	bl	186c4 <__aeabi_i2d>
   1c66c:	2200      	movs	r2, #0
   1c66e:	4b6f      	ldr	r3, [pc, #444]	; (1c82c <__kernel_rem_pio2+0x2ec>)
   1c670:	4606      	mov	r6, r0
   1c672:	460f      	mov	r7, r1
   1c674:	f7fc f890 	bl	18798 <__aeabi_dmul>
   1c678:	4602      	mov	r2, r0
   1c67a:	460b      	mov	r3, r1
   1c67c:	4620      	mov	r0, r4
   1c67e:	4629      	mov	r1, r5
   1c680:	f7fb fed2 	bl	18428 <__aeabi_dsub>
   1c684:	f7fc fb22 	bl	18ccc <__aeabi_d2iz>
   1c688:	4639      	mov	r1, r7
   1c68a:	f849 0b04 	str.w	r0, [r9], #4
   1c68e:	4630      	mov	r0, r6
   1c690:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   1c694:	f7fb feca 	bl	1842c <__adddf3>
   1c698:	4604      	mov	r4, r0
   1c69a:	45d0      	cmp	r8, sl
   1c69c:	460d      	mov	r5, r1
   1c69e:	d1db      	bne.n	1c658 <__kernel_rem_pio2+0x118>
   1c6a0:	f8dd 9018 	ldr.w	r9, [sp, #24]
   1c6a4:	ec45 4b10 	vmov	d0, r4, r5
   1c6a8:	4648      	mov	r0, r9
   1c6aa:	f000 fcad 	bl	1d008 <scalbn>
   1c6ae:	2200      	movs	r2, #0
   1c6b0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   1c6b4:	ee10 0a10 	vmov	r0, s0
   1c6b8:	ec55 4b10 	vmov	r4, r5, d0
   1c6bc:	4629      	mov	r1, r5
   1c6be:	f7fc f86b 	bl	18798 <__aeabi_dmul>
   1c6c2:	ec41 0b10 	vmov	d0, r0, r1
   1c6c6:	f000 fc1b 	bl	1cf00 <floor>
   1c6ca:	2200      	movs	r2, #0
   1c6cc:	4b58      	ldr	r3, [pc, #352]	; (1c830 <__kernel_rem_pio2+0x2f0>)
   1c6ce:	ec51 0b10 	vmov	r0, r1, d0
   1c6d2:	f7fc f861 	bl	18798 <__aeabi_dmul>
   1c6d6:	4602      	mov	r2, r0
   1c6d8:	460b      	mov	r3, r1
   1c6da:	4620      	mov	r0, r4
   1c6dc:	4629      	mov	r1, r5
   1c6de:	f7fb fea3 	bl	18428 <__aeabi_dsub>
   1c6e2:	460d      	mov	r5, r1
   1c6e4:	4604      	mov	r4, r0
   1c6e6:	f7fc faf1 	bl	18ccc <__aeabi_d2iz>
   1c6ea:	4680      	mov	r8, r0
   1c6ec:	f7fb ffea 	bl	186c4 <__aeabi_i2d>
   1c6f0:	460b      	mov	r3, r1
   1c6f2:	4602      	mov	r2, r0
   1c6f4:	4629      	mov	r1, r5
   1c6f6:	4620      	mov	r0, r4
   1c6f8:	f7fb fe96 	bl	18428 <__aeabi_dsub>
   1c6fc:	464b      	mov	r3, r9
   1c6fe:	4606      	mov	r6, r0
   1c700:	460f      	mov	r7, r1
   1c702:	2b00      	cmp	r3, #0
   1c704:	f340 8096 	ble.w	1c834 <__kernel_rem_pio2+0x2f4>
   1c708:	9a01      	ldr	r2, [sp, #4]
   1c70a:	a90c      	add	r1, sp, #48	; 0x30
   1c70c:	f1c9 0318 	rsb	r3, r9, #24
   1c710:	f1c9 0517 	rsb	r5, r9, #23
   1c714:	3a01      	subs	r2, #1
   1c716:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   1c71a:	fa41 f003 	asr.w	r0, r1, r3
   1c71e:	fa00 f303 	lsl.w	r3, r0, r3
   1c722:	4480      	add	r8, r0
   1c724:	1acb      	subs	r3, r1, r3
   1c726:	a90c      	add	r1, sp, #48	; 0x30
   1c728:	fa43 f505 	asr.w	r5, r3, r5
   1c72c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1c730:	2d00      	cmp	r5, #0
   1c732:	f300 8089 	bgt.w	1c848 <__kernel_rem_pio2+0x308>
   1c736:	2200      	movs	r2, #0
   1c738:	2300      	movs	r3, #0
   1c73a:	4630      	mov	r0, r6
   1c73c:	4639      	mov	r1, r7
   1c73e:	f7fc fa93 	bl	18c68 <__aeabi_dcmpeq>
   1c742:	2800      	cmp	r0, #0
   1c744:	f000 8297 	beq.w	1cc76 <__kernel_rem_pio2+0x736>
   1c748:	9901      	ldr	r1, [sp, #4]
   1c74a:	9b05      	ldr	r3, [sp, #20]
   1c74c:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
   1c750:	454b      	cmp	r3, r9
   1c752:	dc10      	bgt.n	1c776 <__kernel_rem_pio2+0x236>
   1c754:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
   1c758:	2200      	movs	r2, #0
   1c75a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c75c:	440b      	add	r3, r1
   1c75e:	a90c      	add	r1, sp, #48	; 0x30
   1c760:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1c764:	f853 1904 	ldr.w	r1, [r3], #-4
   1c768:	4283      	cmp	r3, r0
   1c76a:	ea42 0201 	orr.w	r2, r2, r1
   1c76e:	d1f9      	bne.n	1c764 <__kernel_rem_pio2+0x224>
   1c770:	2a00      	cmp	r2, #0
   1c772:	f040 80e2 	bne.w	1c93a <__kernel_rem_pio2+0x3fa>
   1c776:	9b05      	ldr	r3, [sp, #20]
   1c778:	aa0c      	add	r2, sp, #48	; 0x30
   1c77a:	3b01      	subs	r3, #1
   1c77c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1c780:	2b00      	cmp	r3, #0
   1c782:	f040 80cb 	bne.w	1c91c <__kernel_rem_pio2+0x3dc>
   1c786:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c788:	2301      	movs	r3, #1
   1c78a:	f852 1904 	ldr.w	r1, [r2], #-4
   1c78e:	3301      	adds	r3, #1
   1c790:	2900      	cmp	r1, #0
   1c792:	d0fa      	beq.n	1c78a <__kernel_rem_pio2+0x24a>
   1c794:	9901      	ldr	r1, [sp, #4]
   1c796:	1c4a      	adds	r2, r1, #1
   1c798:	18cb      	adds	r3, r1, r3
   1c79a:	4691      	mov	r9, r2
   1c79c:	9302      	str	r3, [sp, #8]
   1c79e:	9b07      	ldr	r3, [sp, #28]
   1c7a0:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
   1c7a4:	9901      	ldr	r1, [sp, #4]
   1c7a6:	18d3      	adds	r3, r2, r3
   1c7a8:	9808      	ldr	r0, [sp, #32]
   1c7aa:	449a      	add	sl, r3
   1c7ac:	4401      	add	r1, r0
   1c7ae:	ab20      	add	r3, sp, #128	; 0x80
   1c7b0:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
   1c7b4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
   1c7b6:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
   1c7ba:	ab70      	add	r3, sp, #448	; 0x1c0
   1c7bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1c7c0:	9301      	str	r3, [sp, #4]
   1c7c2:	f85a 0f04 	ldr.w	r0, [sl, #4]!
   1c7c6:	46a8      	mov	r8, r5
   1c7c8:	f7fb ff7c 	bl	186c4 <__aeabi_i2d>
   1c7cc:	460b      	mov	r3, r1
   1c7ce:	9903      	ldr	r1, [sp, #12]
   1c7d0:	4602      	mov	r2, r0
   1c7d2:	2900      	cmp	r1, #0
   1c7d4:	e8e8 2302 	strd	r2, r3, [r8], #8
   1c7d8:	db1f      	blt.n	1c81a <__kernel_rem_pio2+0x2da>
   1c7da:	9c04      	ldr	r4, [sp, #16]
   1c7dc:	2600      	movs	r6, #0
   1c7de:	2700      	movs	r7, #0
   1c7e0:	e001      	b.n	1c7e6 <__kernel_rem_pio2+0x2a6>
   1c7e2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   1c7e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   1c7ea:	f7fb ffd5 	bl	18798 <__aeabi_dmul>
   1c7ee:	4602      	mov	r2, r0
   1c7f0:	460b      	mov	r3, r1
   1c7f2:	4630      	mov	r0, r6
   1c7f4:	4639      	mov	r1, r7
   1c7f6:	f7fb fe19 	bl	1842c <__adddf3>
   1c7fa:	455c      	cmp	r4, fp
   1c7fc:	4606      	mov	r6, r0
   1c7fe:	460f      	mov	r7, r1
   1c800:	d1ef      	bne.n	1c7e2 <__kernel_rem_pio2+0x2a2>
   1c802:	9b01      	ldr	r3, [sp, #4]
   1c804:	f109 0901 	add.w	r9, r9, #1
   1c808:	4645      	mov	r5, r8
   1c80a:	e8e3 6702 	strd	r6, r7, [r3], #8
   1c80e:	9301      	str	r3, [sp, #4]
   1c810:	9b02      	ldr	r3, [sp, #8]
   1c812:	4599      	cmp	r9, r3
   1c814:	ddd5      	ble.n	1c7c2 <__kernel_rem_pio2+0x282>
   1c816:	9301      	str	r3, [sp, #4]
   1c818:	e710      	b.n	1c63c <__kernel_rem_pio2+0xfc>
   1c81a:	2600      	movs	r6, #0
   1c81c:	2700      	movs	r7, #0
   1c81e:	e7f0      	b.n	1c802 <__kernel_rem_pio2+0x2c2>
   1c820:	000441d0 	.word	0x000441d0
   1c824:	2aaaaaab 	.word	0x2aaaaaab
   1c828:	3e700000 	.word	0x3e700000
   1c82c:	41700000 	.word	0x41700000
   1c830:	40200000 	.word	0x40200000
   1c834:	d169      	bne.n	1c90a <__kernel_rem_pio2+0x3ca>
   1c836:	9b01      	ldr	r3, [sp, #4]
   1c838:	aa0c      	add	r2, sp, #48	; 0x30
   1c83a:	3b01      	subs	r3, #1
   1c83c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1c840:	15ed      	asrs	r5, r5, #23
   1c842:	2d00      	cmp	r5, #0
   1c844:	f77f af77 	ble.w	1c736 <__kernel_rem_pio2+0x1f6>
   1c848:	9b01      	ldr	r3, [sp, #4]
   1c84a:	f108 0801 	add.w	r8, r8, #1
   1c84e:	2b00      	cmp	r3, #0
   1c850:	f340 820f 	ble.w	1cc72 <__kernel_rem_pio2+0x732>
   1c854:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1c856:	2c00      	cmp	r4, #0
   1c858:	d13a      	bne.n	1c8d0 <__kernel_rem_pio2+0x390>
   1c85a:	9b01      	ldr	r3, [sp, #4]
   1c85c:	2b01      	cmp	r3, #1
   1c85e:	d009      	beq.n	1c874 <__kernel_rem_pio2+0x334>
   1c860:	a90c      	add	r1, sp, #48	; 0x30
   1c862:	2201      	movs	r2, #1
   1c864:	f851 4f04 	ldr.w	r4, [r1, #4]!
   1c868:	1c53      	adds	r3, r2, #1
   1c86a:	bb9c      	cbnz	r4, 1c8d4 <__kernel_rem_pio2+0x394>
   1c86c:	461a      	mov	r2, r3
   1c86e:	9b01      	ldr	r3, [sp, #4]
   1c870:	4293      	cmp	r3, r2
   1c872:	d1f7      	bne.n	1c864 <__kernel_rem_pio2+0x324>
   1c874:	9b06      	ldr	r3, [sp, #24]
   1c876:	2b00      	cmp	r3, #0
   1c878:	dd0e      	ble.n	1c898 <__kernel_rem_pio2+0x358>
   1c87a:	2b01      	cmp	r3, #1
   1c87c:	f000 811a 	beq.w	1cab4 <__kernel_rem_pio2+0x574>
   1c880:	2b02      	cmp	r3, #2
   1c882:	d109      	bne.n	1c898 <__kernel_rem_pio2+0x358>
   1c884:	9b01      	ldr	r3, [sp, #4]
   1c886:	a90c      	add	r1, sp, #48	; 0x30
   1c888:	1e5a      	subs	r2, r3, #1
   1c88a:	ab0c      	add	r3, sp, #48	; 0x30
   1c88c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1c890:	f3c3 0315 	ubfx	r3, r3, #0, #22
   1c894:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1c898:	2d02      	cmp	r5, #2
   1c89a:	f47f af4c 	bne.w	1c736 <__kernel_rem_pio2+0x1f6>
   1c89e:	4632      	mov	r2, r6
   1c8a0:	463b      	mov	r3, r7
   1c8a2:	2000      	movs	r0, #0
   1c8a4:	4998      	ldr	r1, [pc, #608]	; (1cb08 <__kernel_rem_pio2+0x5c8>)
   1c8a6:	f7fb fdbf 	bl	18428 <__aeabi_dsub>
   1c8aa:	4606      	mov	r6, r0
   1c8ac:	460f      	mov	r7, r1
   1c8ae:	2c00      	cmp	r4, #0
   1c8b0:	f43f af41 	beq.w	1c736 <__kernel_rem_pio2+0x1f6>
   1c8b4:	9806      	ldr	r0, [sp, #24]
   1c8b6:	ed9f 0b90 	vldr	d0, [pc, #576]	; 1caf8 <__kernel_rem_pio2+0x5b8>
   1c8ba:	f000 fba5 	bl	1d008 <scalbn>
   1c8be:	4630      	mov	r0, r6
   1c8c0:	4639      	mov	r1, r7
   1c8c2:	ec53 2b10 	vmov	r2, r3, d0
   1c8c6:	f7fb fdaf 	bl	18428 <__aeabi_dsub>
   1c8ca:	4606      	mov	r6, r0
   1c8cc:	460f      	mov	r7, r1
   1c8ce:	e732      	b.n	1c736 <__kernel_rem_pio2+0x1f6>
   1c8d0:	2301      	movs	r3, #1
   1c8d2:	2200      	movs	r2, #0
   1c8d4:	a90c      	add	r1, sp, #48	; 0x30
   1c8d6:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
   1c8da:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
   1c8de:	9901      	ldr	r1, [sp, #4]
   1c8e0:	4299      	cmp	r1, r3
   1c8e2:	dd10      	ble.n	1c906 <__kernel_rem_pio2+0x3c6>
   1c8e4:	a80c      	add	r0, sp, #48	; 0x30
   1c8e6:	aa0c      	add	r2, sp, #48	; 0x30
   1c8e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1c8ec:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1c8f0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1c8f4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   1c8f8:	e000      	b.n	1c8fc <__kernel_rem_pio2+0x3bc>
   1c8fa:	681a      	ldr	r2, [r3, #0]
   1c8fc:	1a8a      	subs	r2, r1, r2
   1c8fe:	f843 2b04 	str.w	r2, [r3], #4
   1c902:	4283      	cmp	r3, r0
   1c904:	d1f9      	bne.n	1c8fa <__kernel_rem_pio2+0x3ba>
   1c906:	2401      	movs	r4, #1
   1c908:	e7b4      	b.n	1c874 <__kernel_rem_pio2+0x334>
   1c90a:	2200      	movs	r2, #0
   1c90c:	4b7f      	ldr	r3, [pc, #508]	; (1cb0c <__kernel_rem_pio2+0x5cc>)
   1c90e:	f7fc f9c9 	bl	18ca4 <__aeabi_dcmpge>
   1c912:	2800      	cmp	r0, #0
   1c914:	f040 80d9 	bne.w	1caca <__kernel_rem_pio2+0x58a>
   1c918:	4605      	mov	r5, r0
   1c91a:	e70c      	b.n	1c736 <__kernel_rem_pio2+0x1f6>
   1c91c:	9b01      	ldr	r3, [sp, #4]
   1c91e:	1c5a      	adds	r2, r3, #1
   1c920:	4691      	mov	r9, r2
   1c922:	9202      	str	r2, [sp, #8]
   1c924:	e73b      	b.n	1c79e <__kernel_rem_pio2+0x25e>
   1c926:	2600      	movs	r6, #0
   1c928:	2700      	movs	r7, #0
   1c92a:	f109 0908 	add.w	r9, r9, #8
   1c92e:	e8ea 6702 	strd	r6, r7, [sl], #8
   1c932:	45da      	cmp	sl, fp
   1c934:	f47f ae55 	bne.w	1c5e2 <__kernel_rem_pio2+0xa2>
   1c938:	e671      	b.n	1c61e <__kernel_rem_pio2+0xde>
   1c93a:	9a06      	ldr	r2, [sp, #24]
   1c93c:	ab0c      	add	r3, sp, #48	; 0x30
   1c93e:	f8cd 801c 	str.w	r8, [sp, #28]
   1c942:	3a18      	subs	r2, #24
   1c944:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
   1c948:	9504      	str	r5, [sp, #16]
   1c94a:	9206      	str	r2, [sp, #24]
   1c94c:	b973      	cbnz	r3, 1c96c <__kernel_rem_pio2+0x42c>
   1c94e:	4b70      	ldr	r3, [pc, #448]	; (1cb10 <__kernel_rem_pio2+0x5d0>)
   1c950:	9901      	ldr	r1, [sp, #4]
   1c952:	4419      	add	r1, r3
   1c954:	460b      	mov	r3, r1
   1c956:	a90c      	add	r1, sp, #48	; 0x30
   1c958:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1c95c:	f853 1904 	ldr.w	r1, [r3], #-4
   1c960:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1c964:	3a18      	subs	r2, #24
   1c966:	2900      	cmp	r1, #0
   1c968:	d0f8      	beq.n	1c95c <__kernel_rem_pio2+0x41c>
   1c96a:	9206      	str	r2, [sp, #24]
   1c96c:	9806      	ldr	r0, [sp, #24]
   1c96e:	ed9f 0b62 	vldr	d0, [pc, #392]	; 1caf8 <__kernel_rem_pio2+0x5b8>
   1c972:	f000 fb49 	bl	1d008 <scalbn>
   1c976:	f1b9 0f00 	cmp.w	r9, #0
   1c97a:	ec55 4b10 	vmov	r4, r5, d0
   1c97e:	f2c0 81da 	blt.w	1cd36 <__kernel_rem_pio2+0x7f6>
   1c982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
   1c986:	aa70      	add	r2, sp, #448	; 0x1c0
   1c988:	f109 0601 	add.w	r6, r9, #1
   1c98c:	f04f 0a00 	mov.w	sl, #0
   1c990:	eb02 0803 	add.w	r8, r2, r3
   1c994:	9306      	str	r3, [sp, #24]
   1c996:	ab0c      	add	r3, sp, #48	; 0x30
   1c998:	f8df b178 	ldr.w	fp, [pc, #376]	; 1cb14 <__kernel_rem_pio2+0x5d4>
   1c99c:	f108 0708 	add.w	r7, r8, #8
   1c9a0:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1c9a4:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   1c9a8:	f7fb fe8c 	bl	186c4 <__aeabi_i2d>
   1c9ac:	4622      	mov	r2, r4
   1c9ae:	462b      	mov	r3, r5
   1c9b0:	f7fb fef2 	bl	18798 <__aeabi_dmul>
   1c9b4:	465b      	mov	r3, fp
   1c9b6:	4652      	mov	r2, sl
   1c9b8:	e967 0102 	strd	r0, r1, [r7, #-8]!
   1c9bc:	4620      	mov	r0, r4
   1c9be:	4629      	mov	r1, r5
   1c9c0:	f7fb feea 	bl	18798 <__aeabi_dmul>
   1c9c4:	ab0c      	add	r3, sp, #48	; 0x30
   1c9c6:	4604      	mov	r4, r0
   1c9c8:	460d      	mov	r5, r1
   1c9ca:	429e      	cmp	r6, r3
   1c9cc:	d1ea      	bne.n	1c9a4 <__kernel_rem_pio2+0x464>
   1c9ce:	ab48      	add	r3, sp, #288	; 0x120
   1c9d0:	46c3      	mov	fp, r8
   1c9d2:	f04f 0a00 	mov.w	sl, #0
   1c9d6:	9303      	str	r3, [sp, #12]
   1c9d8:	e9cd 3901 	strd	r3, r9, [sp, #4]
   1c9dc:	f8dd 9014 	ldr.w	r9, [sp, #20]
   1c9e0:	f1b9 0f00 	cmp.w	r9, #0
   1c9e4:	db2b      	blt.n	1ca3e <__kernel_rem_pio2+0x4fe>
   1c9e6:	f8df 8130 	ldr.w	r8, [pc, #304]	; 1cb18 <__kernel_rem_pio2+0x5d8>
   1c9ea:	465d      	mov	r5, fp
   1c9ec:	2400      	movs	r4, #0
   1c9ee:	2600      	movs	r6, #0
   1c9f0:	2700      	movs	r7, #0
   1c9f2:	a343      	add	r3, pc, #268	; (adr r3, 1cb00 <__kernel_rem_pio2+0x5c0>)
   1c9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c9f8:	e003      	b.n	1ca02 <__kernel_rem_pio2+0x4c2>
   1c9fa:	4554      	cmp	r4, sl
   1c9fc:	dc10      	bgt.n	1ca20 <__kernel_rem_pio2+0x4e0>
   1c9fe:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   1ca02:	3401      	adds	r4, #1
   1ca04:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   1ca08:	f7fb fec6 	bl	18798 <__aeabi_dmul>
   1ca0c:	4602      	mov	r2, r0
   1ca0e:	460b      	mov	r3, r1
   1ca10:	4630      	mov	r0, r6
   1ca12:	4639      	mov	r1, r7
   1ca14:	f7fb fd0a 	bl	1842c <__adddf3>
   1ca18:	45a1      	cmp	r9, r4
   1ca1a:	4606      	mov	r6, r0
   1ca1c:	460f      	mov	r7, r1
   1ca1e:	daec      	bge.n	1c9fa <__kernel_rem_pio2+0x4ba>
   1ca20:	9a02      	ldr	r2, [sp, #8]
   1ca22:	f1ab 0b08 	sub.w	fp, fp, #8
   1ca26:	9b01      	ldr	r3, [sp, #4]
   1ca28:	4592      	cmp	sl, r2
   1ca2a:	e8e3 6702 	strd	r6, r7, [r3], #8
   1ca2e:	9301      	str	r3, [sp, #4]
   1ca30:	f10a 0301 	add.w	r3, sl, #1
   1ca34:	d006      	beq.n	1ca44 <__kernel_rem_pio2+0x504>
   1ca36:	f1b9 0f00 	cmp.w	r9, #0
   1ca3a:	469a      	mov	sl, r3
   1ca3c:	dad3      	bge.n	1c9e6 <__kernel_rem_pio2+0x4a6>
   1ca3e:	2600      	movs	r6, #0
   1ca40:	2700      	movs	r7, #0
   1ca42:	e7ed      	b.n	1ca20 <__kernel_rem_pio2+0x4e0>
   1ca44:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   1ca46:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1ca4a:	2b03      	cmp	r3, #3
   1ca4c:	d82b      	bhi.n	1caa6 <__kernel_rem_pio2+0x566>
   1ca4e:	e8df f013 	tbh	[pc, r3, lsl #1]
   1ca52:	00f5      	.short	0x00f5
   1ca54:	00e400e4 	.word	0x00e400e4
   1ca58:	0067      	.short	0x0067
   1ca5a:	ab48      	add	r3, sp, #288	; 0x120
   1ca5c:	2400      	movs	r4, #0
   1ca5e:	2500      	movs	r5, #0
   1ca60:	9303      	str	r3, [sp, #12]
   1ca62:	9903      	ldr	r1, [sp, #12]
   1ca64:	462b      	mov	r3, r5
   1ca66:	4622      	mov	r2, r4
   1ca68:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ca6c:	f7fb fcdc 	bl	18428 <__aeabi_dsub>
   1ca70:	9b04      	ldr	r3, [sp, #16]
   1ca72:	2b00      	cmp	r3, #0
   1ca74:	f040 813e 	bne.w	1ccf4 <__kernel_rem_pio2+0x7b4>
   1ca78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ca7a:	f1b9 0f00 	cmp.w	r9, #0
   1ca7e:	e9c3 4500 	strd	r4, r5, [r3]
   1ca82:	dd0d      	ble.n	1caa0 <__kernel_rem_pio2+0x560>
   1ca84:	ad4a      	add	r5, sp, #296	; 0x128
   1ca86:	2401      	movs	r4, #1
   1ca88:	3401      	adds	r4, #1
   1ca8a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   1ca8e:	f7fb fccd 	bl	1842c <__adddf3>
   1ca92:	45a1      	cmp	r9, r4
   1ca94:	daf8      	bge.n	1ca88 <__kernel_rem_pio2+0x548>
   1ca96:	9b04      	ldr	r3, [sp, #16]
   1ca98:	b113      	cbz	r3, 1caa0 <__kernel_rem_pio2+0x560>
   1ca9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1ca9e:	4619      	mov	r1, r3
   1caa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1caa2:	e9c3 0102 	strd	r0, r1, [r3, #8]
   1caa6:	9b07      	ldr	r3, [sp, #28]
   1caa8:	f003 0007 	and.w	r0, r3, #7
   1caac:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1cab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cab4:	9b01      	ldr	r3, [sp, #4]
   1cab6:	a90c      	add	r1, sp, #48	; 0x30
   1cab8:	1e5a      	subs	r2, r3, #1
   1caba:	ab0c      	add	r3, sp, #48	; 0x30
   1cabc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1cac0:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1cac4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1cac8:	e6e6      	b.n	1c898 <__kernel_rem_pio2+0x358>
   1caca:	9b01      	ldr	r3, [sp, #4]
   1cacc:	f108 0801 	add.w	r8, r8, #1
   1cad0:	2502      	movs	r5, #2
   1cad2:	2b00      	cmp	r3, #0
   1cad4:	f73f aebe 	bgt.w	1c854 <__kernel_rem_pio2+0x314>
   1cad8:	4632      	mov	r2, r6
   1cada:	463b      	mov	r3, r7
   1cadc:	2000      	movs	r0, #0
   1cade:	490a      	ldr	r1, [pc, #40]	; (1cb08 <__kernel_rem_pio2+0x5c8>)
   1cae0:	f7fb fca2 	bl	18428 <__aeabi_dsub>
   1cae4:	4606      	mov	r6, r0
   1cae6:	460f      	mov	r7, r1
   1cae8:	e625      	b.n	1c736 <__kernel_rem_pio2+0x1f6>
   1caea:	2100      	movs	r1, #0
   1caec:	f06f 0317 	mvn.w	r3, #23
   1caf0:	9107      	str	r1, [sp, #28]
   1caf2:	e545      	b.n	1c580 <__kernel_rem_pio2+0x40>
   1caf4:	f3af 8000 	nop.w
   1caf8:	00000000 	.word	0x00000000
   1cafc:	3ff00000 	.word	0x3ff00000
   1cb00:	40000000 	.word	0x40000000
   1cb04:	3ff921fb 	.word	0x3ff921fb
   1cb08:	3ff00000 	.word	0x3ff00000
   1cb0c:	3fe00000 	.word	0x3fe00000
   1cb10:	3ffffffe 	.word	0x3ffffffe
   1cb14:	3e700000 	.word	0x3e700000
   1cb18:	00042578 	.word	0x00042578
   1cb1c:	ab48      	add	r3, sp, #288	; 0x120
   1cb1e:	9303      	str	r3, [sp, #12]
   1cb20:	f1b9 0f00 	cmp.w	r9, #0
   1cb24:	f340 8119 	ble.w	1cd5a <__kernel_rem_pio2+0x81a>
   1cb28:	9a03      	ldr	r2, [sp, #12]
   1cb2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
   1cb2e:	eb02 08c9 	add.w	r8, r2, r9, lsl #3
   1cb32:	9301      	str	r3, [sp, #4]
   1cb34:	e9d8 ab00 	ldrd	sl, fp, [r8]
   1cb38:	e978 6702 	ldrd	r6, r7, [r8, #-8]!
   1cb3c:	4652      	mov	r2, sl
   1cb3e:	465b      	mov	r3, fp
   1cb40:	4630      	mov	r0, r6
   1cb42:	4639      	mov	r1, r7
   1cb44:	f7fb fc72 	bl	1842c <__adddf3>
   1cb48:	4604      	mov	r4, r0
   1cb4a:	460d      	mov	r5, r1
   1cb4c:	4602      	mov	r2, r0
   1cb4e:	460b      	mov	r3, r1
   1cb50:	4630      	mov	r0, r6
   1cb52:	4639      	mov	r1, r7
   1cb54:	f7fb fc68 	bl	18428 <__aeabi_dsub>
   1cb58:	465b      	mov	r3, fp
   1cb5a:	4652      	mov	r2, sl
   1cb5c:	46ab      	mov	fp, r5
   1cb5e:	f7fb fc65 	bl	1842c <__adddf3>
   1cb62:	9b03      	ldr	r3, [sp, #12]
   1cb64:	46a2      	mov	sl, r4
   1cb66:	4543      	cmp	r3, r8
   1cb68:	e9c8 0102 	strd	r0, r1, [r8, #8]
   1cb6c:	e9c8 4500 	strd	r4, r5, [r8]
   1cb70:	d1e2      	bne.n	1cb38 <__kernel_rem_pio2+0x5f8>
   1cb72:	f1b9 0f01 	cmp.w	r9, #1
   1cb76:	f340 80f0 	ble.w	1cd5a <__kernel_rem_pio2+0x81a>
   1cb7a:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   1cb7e:	9b01      	ldr	r3, [sp, #4]
   1cb80:	9903      	ldr	r1, [sp, #12]
   1cb82:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
   1cb86:	444a      	add	r2, r9
   1cb88:	440b      	add	r3, r1
   1cb8a:	00d2      	lsls	r2, r2, #3
   1cb8c:	f102 0b08 	add.w	fp, r2, #8
   1cb90:	9201      	str	r2, [sp, #4]
   1cb92:	e9d3 6700 	ldrd	r6, r7, [r3]
   1cb96:	448b      	add	fp, r1
   1cb98:	4632      	mov	r2, r6
   1cb9a:	463b      	mov	r3, r7
   1cb9c:	e97b 8902 	ldrd	r8, r9, [fp, #-8]!
   1cba0:	4640      	mov	r0, r8
   1cba2:	4649      	mov	r1, r9
   1cba4:	f7fb fc42 	bl	1842c <__adddf3>
   1cba8:	4604      	mov	r4, r0
   1cbaa:	460d      	mov	r5, r1
   1cbac:	4602      	mov	r2, r0
   1cbae:	460b      	mov	r3, r1
   1cbb0:	4640      	mov	r0, r8
   1cbb2:	4649      	mov	r1, r9
   1cbb4:	f7fb fc38 	bl	18428 <__aeabi_dsub>
   1cbb8:	4632      	mov	r2, r6
   1cbba:	463b      	mov	r3, r7
   1cbbc:	4626      	mov	r6, r4
   1cbbe:	f7fb fc35 	bl	1842c <__adddf3>
   1cbc2:	45da      	cmp	sl, fp
   1cbc4:	462f      	mov	r7, r5
   1cbc6:	e9cb 0102 	strd	r0, r1, [fp, #8]
   1cbca:	e9cb 4500 	strd	r4, r5, [fp]
   1cbce:	d1e3      	bne.n	1cb98 <__kernel_rem_pio2+0x658>
   1cbd0:	9c01      	ldr	r4, [sp, #4]
   1cbd2:	2000      	movs	r0, #0
   1cbd4:	9b03      	ldr	r3, [sp, #12]
   1cbd6:	2100      	movs	r1, #0
   1cbd8:	3410      	adds	r4, #16
   1cbda:	f103 0510 	add.w	r5, r3, #16
   1cbde:	441c      	add	r4, r3
   1cbe0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   1cbe4:	f7fb fc22 	bl	1842c <__adddf3>
   1cbe8:	42a5      	cmp	r5, r4
   1cbea:	d1f9      	bne.n	1cbe0 <__kernel_rem_pio2+0x6a0>
   1cbec:	9c03      	ldr	r4, [sp, #12]
   1cbee:	9e04      	ldr	r6, [sp, #16]
   1cbf0:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cbf4:	e9d4 4502 	ldrd	r4, r5, [r4, #8]
   1cbf8:	2e00      	cmp	r6, #0
   1cbfa:	f040 8086 	bne.w	1cd0a <__kernel_rem_pio2+0x7ca>
   1cbfe:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1cc00:	e9c6 2300 	strd	r2, r3, [r6]
   1cc04:	9b07      	ldr	r3, [sp, #28]
   1cc06:	e9c6 0104 	strd	r0, r1, [r6, #16]
   1cc0a:	f003 0007 	and.w	r0, r3, #7
   1cc0e:	e9c6 4502 	strd	r4, r5, [r6, #8]
   1cc12:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1cc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc1a:	9e06      	ldr	r6, [sp, #24]
   1cc1c:	2400      	movs	r4, #0
   1cc1e:	9f03      	ldr	r7, [sp, #12]
   1cc20:	2500      	movs	r5, #0
   1cc22:	3608      	adds	r6, #8
   1cc24:	443e      	add	r6, r7
   1cc26:	4620      	mov	r0, r4
   1cc28:	4629      	mov	r1, r5
   1cc2a:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
   1cc2e:	f7fb fbfd 	bl	1842c <__adddf3>
   1cc32:	4604      	mov	r4, r0
   1cc34:	42b7      	cmp	r7, r6
   1cc36:	460d      	mov	r5, r1
   1cc38:	d1f5      	bne.n	1cc26 <__kernel_rem_pio2+0x6e6>
   1cc3a:	e712      	b.n	1ca62 <__kernel_rem_pio2+0x522>
   1cc3c:	9c06      	ldr	r4, [sp, #24]
   1cc3e:	2000      	movs	r0, #0
   1cc40:	9d03      	ldr	r5, [sp, #12]
   1cc42:	2100      	movs	r1, #0
   1cc44:	3408      	adds	r4, #8
   1cc46:	442c      	add	r4, r5
   1cc48:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   1cc4c:	f7fb fbee 	bl	1842c <__adddf3>
   1cc50:	42a5      	cmp	r5, r4
   1cc52:	d1f9      	bne.n	1cc48 <__kernel_rem_pio2+0x708>
   1cc54:	9b04      	ldr	r3, [sp, #16]
   1cc56:	b113      	cbz	r3, 1cc5e <__kernel_rem_pio2+0x71e>
   1cc58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1cc5c:	4619      	mov	r1, r3
   1cc5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1cc60:	e9c3 0100 	strd	r0, r1, [r3]
   1cc64:	9b07      	ldr	r3, [sp, #28]
   1cc66:	f003 0007 	and.w	r0, r3, #7
   1cc6a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1cc6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc72:	2400      	movs	r4, #0
   1cc74:	e5fe      	b.n	1c874 <__kernel_rem_pio2+0x334>
   1cc76:	9c06      	ldr	r4, [sp, #24]
   1cc78:	f8cd 801c 	str.w	r8, [sp, #28]
   1cc7c:	4260      	negs	r0, r4
   1cc7e:	9504      	str	r5, [sp, #16]
   1cc80:	ec47 6b10 	vmov	d0, r6, r7
   1cc84:	f000 f9c0 	bl	1d008 <scalbn>
   1cc88:	2200      	movs	r2, #0
   1cc8a:	ee10 0a10 	vmov	r0, s0
   1cc8e:	4b34      	ldr	r3, [pc, #208]	; (1cd60 <__kernel_rem_pio2+0x820>)
   1cc90:	ec57 6b10 	vmov	r6, r7, d0
   1cc94:	4639      	mov	r1, r7
   1cc96:	f7fc f805 	bl	18ca4 <__aeabi_dcmpge>
   1cc9a:	b308      	cbz	r0, 1cce0 <__kernel_rem_pio2+0x7a0>
   1cc9c:	3418      	adds	r4, #24
   1cc9e:	2200      	movs	r2, #0
   1cca0:	4b30      	ldr	r3, [pc, #192]	; (1cd64 <__kernel_rem_pio2+0x824>)
   1cca2:	4630      	mov	r0, r6
   1cca4:	4639      	mov	r1, r7
   1cca6:	9406      	str	r4, [sp, #24]
   1cca8:	f7fb fd76 	bl	18798 <__aeabi_dmul>
   1ccac:	9d01      	ldr	r5, [sp, #4]
   1ccae:	f7fc f80d 	bl	18ccc <__aeabi_d2iz>
   1ccb2:	4604      	mov	r4, r0
   1ccb4:	f7fb fd06 	bl	186c4 <__aeabi_i2d>
   1ccb8:	2200      	movs	r2, #0
   1ccba:	4b29      	ldr	r3, [pc, #164]	; (1cd60 <__kernel_rem_pio2+0x820>)
   1ccbc:	f105 0901 	add.w	r9, r5, #1
   1ccc0:	f7fb fd6a 	bl	18798 <__aeabi_dmul>
   1ccc4:	460b      	mov	r3, r1
   1ccc6:	4602      	mov	r2, r0
   1ccc8:	4639      	mov	r1, r7
   1ccca:	4630      	mov	r0, r6
   1cccc:	f7fb fbac 	bl	18428 <__aeabi_dsub>
   1ccd0:	f7fb fffc 	bl	18ccc <__aeabi_d2iz>
   1ccd4:	ab0c      	add	r3, sp, #48	; 0x30
   1ccd6:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
   1ccda:	f843 4029 	str.w	r4, [r3, r9, lsl #2]
   1ccde:	e645      	b.n	1c96c <__kernel_rem_pio2+0x42c>
   1cce0:	4630      	mov	r0, r6
   1cce2:	4639      	mov	r1, r7
   1cce4:	9c01      	ldr	r4, [sp, #4]
   1cce6:	f7fb fff1 	bl	18ccc <__aeabi_d2iz>
   1ccea:	aa0c      	add	r2, sp, #48	; 0x30
   1ccec:	46a1      	mov	r9, r4
   1ccee:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
   1ccf2:	e63b      	b.n	1c96c <__kernel_rem_pio2+0x42c>
   1ccf4:	4622      	mov	r2, r4
   1ccf6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   1ccfa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1ccfc:	f1b9 0f00 	cmp.w	r9, #0
   1cd00:	e9c4 2300 	strd	r2, r3, [r4]
   1cd04:	f73f aebe 	bgt.w	1ca84 <__kernel_rem_pio2+0x544>
   1cd08:	e6c7      	b.n	1ca9a <__kernel_rem_pio2+0x55a>
   1cd0a:	f103 4700 	add.w	r7, r3, #2147483648	; 0x80000000
   1cd0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1cd12:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1cd14:	4626      	mov	r6, r4
   1cd16:	4694      	mov	ip, r2
   1cd18:	f105 4400 	add.w	r4, r5, #2147483648	; 0x80000000
   1cd1c:	e9c1 0304 	strd	r0, r3, [r1, #16]
   1cd20:	9b07      	ldr	r3, [sp, #28]
   1cd22:	f003 0007 	and.w	r0, r3, #7
   1cd26:	e9c1 c700 	strd	ip, r7, [r1]
   1cd2a:	e9c1 6402 	strd	r6, r4, [r1, #8]
   1cd2e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1cd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd36:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   1cd38:	2b03      	cmp	r3, #3
   1cd3a:	f63f aeb4 	bhi.w	1caa6 <__kernel_rem_pio2+0x566>
   1cd3e:	a201      	add	r2, pc, #4	; (adr r2, 1cd44 <__kernel_rem_pio2+0x804>)
   1cd40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1cd44:	0001cd55 	.word	0x0001cd55
   1cd48:	0001ca5b 	.word	0x0001ca5b
   1cd4c:	0001ca5b 	.word	0x0001ca5b
   1cd50:	0001cb1d 	.word	0x0001cb1d
   1cd54:	2000      	movs	r0, #0
   1cd56:	2100      	movs	r1, #0
   1cd58:	e77c      	b.n	1cc54 <__kernel_rem_pio2+0x714>
   1cd5a:	2000      	movs	r0, #0
   1cd5c:	2100      	movs	r1, #0
   1cd5e:	e745      	b.n	1cbec <__kernel_rem_pio2+0x6ac>
   1cd60:	41700000 	.word	0x41700000
   1cd64:	3e700000 	.word	0x3e700000

0001cd68 <__kernel_sin>:
   1cd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd6c:	ec55 4b10 	vmov	r4, r5, d0
   1cd70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   1cd74:	4682      	mov	sl, r0
   1cd76:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   1cd7a:	ed2d 8b02 	vpush	{d8}
   1cd7e:	eeb0 8a41 	vmov.f32	s16, s2
   1cd82:	eef0 8a61 	vmov.f32	s17, s3
   1cd86:	b083      	sub	sp, #12
   1cd88:	da07      	bge.n	1cd9a <__kernel_sin+0x32>
   1cd8a:	ee10 0a10 	vmov	r0, s0
   1cd8e:	4629      	mov	r1, r5
   1cd90:	f7fb ff9c 	bl	18ccc <__aeabi_d2iz>
   1cd94:	2800      	cmp	r0, #0
   1cd96:	f000 808e 	beq.w	1ceb6 <__kernel_sin+0x14e>
   1cd9a:	4622      	mov	r2, r4
   1cd9c:	462b      	mov	r3, r5
   1cd9e:	4620      	mov	r0, r4
   1cda0:	4629      	mov	r1, r5
   1cda2:	f7fb fcf9 	bl	18798 <__aeabi_dmul>
   1cda6:	4606      	mov	r6, r0
   1cda8:	460f      	mov	r7, r1
   1cdaa:	4602      	mov	r2, r0
   1cdac:	460b      	mov	r3, r1
   1cdae:	4620      	mov	r0, r4
   1cdb0:	4629      	mov	r1, r5
   1cdb2:	f7fb fcf1 	bl	18798 <__aeabi_dmul>
   1cdb6:	4680      	mov	r8, r0
   1cdb8:	4689      	mov	r9, r1
   1cdba:	4630      	mov	r0, r6
   1cdbc:	4639      	mov	r1, r7
   1cdbe:	a345      	add	r3, pc, #276	; (adr r3, 1ced4 <__kernel_sin+0x16c>)
   1cdc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cdc4:	f7fb fce8 	bl	18798 <__aeabi_dmul>
   1cdc8:	a344      	add	r3, pc, #272	; (adr r3, 1cedc <__kernel_sin+0x174>)
   1cdca:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cdce:	f7fb fb2b 	bl	18428 <__aeabi_dsub>
   1cdd2:	4632      	mov	r2, r6
   1cdd4:	463b      	mov	r3, r7
   1cdd6:	f7fb fcdf 	bl	18798 <__aeabi_dmul>
   1cdda:	a342      	add	r3, pc, #264	; (adr r3, 1cee4 <__kernel_sin+0x17c>)
   1cddc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cde0:	f7fb fb24 	bl	1842c <__adddf3>
   1cde4:	4632      	mov	r2, r6
   1cde6:	463b      	mov	r3, r7
   1cde8:	f7fb fcd6 	bl	18798 <__aeabi_dmul>
   1cdec:	a33f      	add	r3, pc, #252	; (adr r3, 1ceec <__kernel_sin+0x184>)
   1cdee:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cdf2:	f7fb fb19 	bl	18428 <__aeabi_dsub>
   1cdf6:	4632      	mov	r2, r6
   1cdf8:	463b      	mov	r3, r7
   1cdfa:	f7fb fccd 	bl	18798 <__aeabi_dmul>
   1cdfe:	a33d      	add	r3, pc, #244	; (adr r3, 1cef4 <__kernel_sin+0x18c>)
   1ce00:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ce04:	f7fb fb12 	bl	1842c <__adddf3>
   1ce08:	e9cd 0100 	strd	r0, r1, [sp]
   1ce0c:	f1ba 0f00 	cmp.w	sl, #0
   1ce10:	d037      	beq.n	1ce82 <__kernel_sin+0x11a>
   1ce12:	2200      	movs	r2, #0
   1ce14:	4b2e      	ldr	r3, [pc, #184]	; (1ced0 <__kernel_sin+0x168>)
   1ce16:	ec51 0b18 	vmov	r0, r1, d8
   1ce1a:	f7fb fcbd 	bl	18798 <__aeabi_dmul>
   1ce1e:	4682      	mov	sl, r0
   1ce20:	468b      	mov	fp, r1
   1ce22:	4640      	mov	r0, r8
   1ce24:	4649      	mov	r1, r9
   1ce26:	e9dd 2300 	ldrd	r2, r3, [sp]
   1ce2a:	f7fb fcb5 	bl	18798 <__aeabi_dmul>
   1ce2e:	4602      	mov	r2, r0
   1ce30:	460b      	mov	r3, r1
   1ce32:	4650      	mov	r0, sl
   1ce34:	4659      	mov	r1, fp
   1ce36:	f7fb faf7 	bl	18428 <__aeabi_dsub>
   1ce3a:	4632      	mov	r2, r6
   1ce3c:	463b      	mov	r3, r7
   1ce3e:	f7fb fcab 	bl	18798 <__aeabi_dmul>
   1ce42:	ec53 2b18 	vmov	r2, r3, d8
   1ce46:	f7fb faef 	bl	18428 <__aeabi_dsub>
   1ce4a:	4606      	mov	r6, r0
   1ce4c:	460f      	mov	r7, r1
   1ce4e:	4640      	mov	r0, r8
   1ce50:	4649      	mov	r1, r9
   1ce52:	a31d      	add	r3, pc, #116	; (adr r3, 1cec8 <__kernel_sin+0x160>)
   1ce54:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ce58:	f7fb fc9e 	bl	18798 <__aeabi_dmul>
   1ce5c:	4602      	mov	r2, r0
   1ce5e:	460b      	mov	r3, r1
   1ce60:	4630      	mov	r0, r6
   1ce62:	4639      	mov	r1, r7
   1ce64:	f7fb fae2 	bl	1842c <__adddf3>
   1ce68:	4602      	mov	r2, r0
   1ce6a:	460b      	mov	r3, r1
   1ce6c:	4620      	mov	r0, r4
   1ce6e:	4629      	mov	r1, r5
   1ce70:	f7fb fada 	bl	18428 <__aeabi_dsub>
   1ce74:	ec41 0b10 	vmov	d0, r0, r1
   1ce78:	b003      	add	sp, #12
   1ce7a:	ecbd 8b02 	vpop	{d8}
   1ce7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce82:	4602      	mov	r2, r0
   1ce84:	460b      	mov	r3, r1
   1ce86:	4630      	mov	r0, r6
   1ce88:	4639      	mov	r1, r7
   1ce8a:	f7fb fc85 	bl	18798 <__aeabi_dmul>
   1ce8e:	a30e      	add	r3, pc, #56	; (adr r3, 1cec8 <__kernel_sin+0x160>)
   1ce90:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ce94:	f7fb fac8 	bl	18428 <__aeabi_dsub>
   1ce98:	4642      	mov	r2, r8
   1ce9a:	464b      	mov	r3, r9
   1ce9c:	f7fb fc7c 	bl	18798 <__aeabi_dmul>
   1cea0:	4622      	mov	r2, r4
   1cea2:	462b      	mov	r3, r5
   1cea4:	f7fb fac2 	bl	1842c <__adddf3>
   1cea8:	ec41 0b10 	vmov	d0, r0, r1
   1ceac:	b003      	add	sp, #12
   1ceae:	ecbd 8b02 	vpop	{d8}
   1ceb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ceb6:	ec45 4b10 	vmov	d0, r4, r5
   1ceba:	b003      	add	sp, #12
   1cebc:	ecbd 8b02 	vpop	{d8}
   1cec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cec4:	f3af 8000 	nop.w
   1cec8:	55555549 	.word	0x55555549
   1cecc:	3fc55555 	.word	0x3fc55555
   1ced0:	3fe00000 	.word	0x3fe00000
   1ced4:	5acfd57c 	.word	0x5acfd57c
   1ced8:	3de5d93a 	.word	0x3de5d93a
   1cedc:	8a2b9ceb 	.word	0x8a2b9ceb
   1cee0:	3e5ae5e6 	.word	0x3e5ae5e6
   1cee4:	57b1fe7d 	.word	0x57b1fe7d
   1cee8:	3ec71de3 	.word	0x3ec71de3
   1ceec:	19c161d5 	.word	0x19c161d5
   1cef0:	3f2a01a0 	.word	0x3f2a01a0
   1cef4:	1110f8a6 	.word	0x1110f8a6
   1cef8:	3f811111 	.word	0x3f811111
   1cefc:	00000000 	.word	0x00000000

0001cf00 <floor>:
   1cf00:	ec51 0b10 	vmov	r0, r1, d0
   1cf04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cf06:	f3c1 530a 	ubfx	r3, r1, #20, #11
   1cf0a:	460c      	mov	r4, r1
   1cf0c:	ee10 6a10 	vmov	r6, s0
   1cf10:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   1cf14:	2d13      	cmp	r5, #19
   1cf16:	dc30      	bgt.n	1cf7a <floor+0x7a>
   1cf18:	2d00      	cmp	r5, #0
   1cf1a:	db1e      	blt.n	1cf5a <floor+0x5a>
   1cf1c:	4f38      	ldr	r7, [pc, #224]	; (1d000 <floor+0x100>)
   1cf1e:	412f      	asrs	r7, r5
   1cf20:	ea07 0301 	and.w	r3, r7, r1
   1cf24:	4303      	orrs	r3, r0
   1cf26:	d02d      	beq.n	1cf84 <floor+0x84>
   1cf28:	a333      	add	r3, pc, #204	; (adr r3, 1cff8 <floor+0xf8>)
   1cf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cf2e:	f7fb fa7d 	bl	1842c <__adddf3>
   1cf32:	2200      	movs	r2, #0
   1cf34:	2300      	movs	r3, #0
   1cf36:	f7fb febf 	bl	18cb8 <__aeabi_dcmpgt>
   1cf3a:	b148      	cbz	r0, 1cf50 <floor+0x50>
   1cf3c:	2c00      	cmp	r4, #0
   1cf3e:	da04      	bge.n	1cf4a <floor+0x4a>
   1cf40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1cf44:	fa43 f505 	asr.w	r5, r3, r5
   1cf48:	442c      	add	r4, r5
   1cf4a:	ea24 0407 	bic.w	r4, r4, r7
   1cf4e:	2600      	movs	r6, #0
   1cf50:	4623      	mov	r3, r4
   1cf52:	4632      	mov	r2, r6
   1cf54:	ec43 2b10 	vmov	d0, r2, r3
   1cf58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cf5a:	a327      	add	r3, pc, #156	; (adr r3, 1cff8 <floor+0xf8>)
   1cf5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cf60:	f7fb fa64 	bl	1842c <__adddf3>
   1cf64:	2200      	movs	r2, #0
   1cf66:	2300      	movs	r3, #0
   1cf68:	f7fb fea6 	bl	18cb8 <__aeabi_dcmpgt>
   1cf6c:	2800      	cmp	r0, #0
   1cf6e:	d0ef      	beq.n	1cf50 <floor+0x50>
   1cf70:	2c00      	cmp	r4, #0
   1cf72:	db29      	blt.n	1cfc8 <floor+0xc8>
   1cf74:	2600      	movs	r6, #0
   1cf76:	4634      	mov	r4, r6
   1cf78:	e7ea      	b.n	1cf50 <floor+0x50>
   1cf7a:	2d33      	cmp	r5, #51	; 0x33
   1cf7c:	dd05      	ble.n	1cf8a <floor+0x8a>
   1cf7e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   1cf82:	d019      	beq.n	1cfb8 <floor+0xb8>
   1cf84:	ec41 0b10 	vmov	d0, r0, r1
   1cf88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cf8a:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   1cf8e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1cf92:	40df      	lsrs	r7, r3
   1cf94:	4207      	tst	r7, r0
   1cf96:	d0f5      	beq.n	1cf84 <floor+0x84>
   1cf98:	a317      	add	r3, pc, #92	; (adr r3, 1cff8 <floor+0xf8>)
   1cf9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cf9e:	f7fb fa45 	bl	1842c <__adddf3>
   1cfa2:	2200      	movs	r2, #0
   1cfa4:	2300      	movs	r3, #0
   1cfa6:	f7fb fe87 	bl	18cb8 <__aeabi_dcmpgt>
   1cfaa:	2800      	cmp	r0, #0
   1cfac:	d0d0      	beq.n	1cf50 <floor+0x50>
   1cfae:	2c00      	cmp	r4, #0
   1cfb0:	db13      	blt.n	1cfda <floor+0xda>
   1cfb2:	ea26 0607 	bic.w	r6, r6, r7
   1cfb6:	e7cb      	b.n	1cf50 <floor+0x50>
   1cfb8:	ee10 2a10 	vmov	r2, s0
   1cfbc:	460b      	mov	r3, r1
   1cfbe:	f7fb fa35 	bl	1842c <__adddf3>
   1cfc2:	ec41 0b10 	vmov	d0, r0, r1
   1cfc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cfc8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   1cfcc:	4a0d      	ldr	r2, [pc, #52]	; (1d004 <floor+0x104>)
   1cfce:	4333      	orrs	r3, r6
   1cfd0:	2600      	movs	r6, #0
   1cfd2:	42b3      	cmp	r3, r6
   1cfd4:	bf18      	it	ne
   1cfd6:	4614      	movne	r4, r2
   1cfd8:	e7ba      	b.n	1cf50 <floor+0x50>
   1cfda:	2d14      	cmp	r5, #20
   1cfdc:	d008      	beq.n	1cff0 <floor+0xf0>
   1cfde:	2301      	movs	r3, #1
   1cfe0:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   1cfe4:	fa03 f505 	lsl.w	r5, r3, r5
   1cfe8:	19ae      	adds	r6, r5, r6
   1cfea:	bf28      	it	cs
   1cfec:	18e4      	addcs	r4, r4, r3
   1cfee:	e7e0      	b.n	1cfb2 <floor+0xb2>
   1cff0:	3401      	adds	r4, #1
   1cff2:	e7de      	b.n	1cfb2 <floor+0xb2>
   1cff4:	f3af 8000 	nop.w
   1cff8:	8800759c 	.word	0x8800759c
   1cffc:	7e37e43c 	.word	0x7e37e43c
   1d000:	000fffff 	.word	0x000fffff
   1d004:	bff00000 	.word	0xbff00000

0001d008 <scalbn>:
   1d008:	b538      	push	{r3, r4, r5, lr}
   1d00a:	ec53 2b10 	vmov	r2, r3, d0
   1d00e:	f3c3 510a 	ubfx	r1, r3, #20, #11
   1d012:	461c      	mov	r4, r3
   1d014:	4605      	mov	r5, r0
   1d016:	bb81      	cbnz	r1, 1d07a <scalbn+0x72>
   1d018:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   1d01c:	ee10 1a10 	vmov	r1, s0
   1d020:	4321      	orrs	r1, r4
   1d022:	d029      	beq.n	1d078 <scalbn+0x70>
   1d024:	4c3c      	ldr	r4, [pc, #240]	; (1d118 <scalbn+0x110>)
   1d026:	4619      	mov	r1, r3
   1d028:	2200      	movs	r2, #0
   1d02a:	4b3c      	ldr	r3, [pc, #240]	; (1d11c <scalbn+0x114>)
   1d02c:	ee10 0a10 	vmov	r0, s0
   1d030:	f7fb fbb2 	bl	18798 <__aeabi_dmul>
   1d034:	42a5      	cmp	r5, r4
   1d036:	4602      	mov	r2, r0
   1d038:	460b      	mov	r3, r1
   1d03a:	db16      	blt.n	1d06a <scalbn+0x62>
   1d03c:	460c      	mov	r4, r1
   1d03e:	f3c1 510a 	ubfx	r1, r1, #20, #11
   1d042:	3936      	subs	r1, #54	; 0x36
   1d044:	4429      	add	r1, r5
   1d046:	f240 70fe 	movw	r0, #2046	; 0x7fe
   1d04a:	4281      	cmp	r1, r0
   1d04c:	dc21      	bgt.n	1d092 <scalbn+0x8a>
   1d04e:	2900      	cmp	r1, #0
   1d050:	dc45      	bgt.n	1d0de <scalbn+0xd6>
   1d052:	f111 0f35 	cmn.w	r1, #53	; 0x35
   1d056:	da34      	bge.n	1d0c2 <scalbn+0xba>
   1d058:	f24c 3150 	movw	r1, #50000	; 0xc350
   1d05c:	428d      	cmp	r5, r1
   1d05e:	dc18      	bgt.n	1d092 <scalbn+0x8a>
   1d060:	2b00      	cmp	r3, #0
   1d062:	a125      	add	r1, pc, #148	; (adr r1, 1d0f8 <scalbn+0xf0>)
   1d064:	e9d1 0100 	ldrd	r0, r1, [r1]
   1d068:	db40      	blt.n	1d0ec <scalbn+0xe4>
   1d06a:	a323      	add	r3, pc, #140	; (adr r3, 1d0f8 <scalbn+0xf0>)
   1d06c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d070:	f7fb fb92 	bl	18798 <__aeabi_dmul>
   1d074:	ec41 0b10 	vmov	d0, r0, r1
   1d078:	bd38      	pop	{r3, r4, r5, pc}
   1d07a:	f240 70ff 	movw	r0, #2047	; 0x7ff
   1d07e:	4281      	cmp	r1, r0
   1d080:	d1e0      	bne.n	1d044 <scalbn+0x3c>
   1d082:	ee10 0a10 	vmov	r0, s0
   1d086:	4619      	mov	r1, r3
   1d088:	f7fb f9d0 	bl	1842c <__adddf3>
   1d08c:	ec41 0b10 	vmov	d0, r0, r1
   1d090:	bd38      	pop	{r3, r4, r5, pc}
   1d092:	2b00      	cmp	r3, #0
   1d094:	a11a      	add	r1, pc, #104	; (adr r1, 1d100 <scalbn+0xf8>)
   1d096:	e9d1 0100 	ldrd	r0, r1, [r1]
   1d09a:	db07      	blt.n	1d0ac <scalbn+0xa4>
   1d09c:	a318      	add	r3, pc, #96	; (adr r3, 1d100 <scalbn+0xf8>)
   1d09e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d0a2:	f7fb fb79 	bl	18798 <__aeabi_dmul>
   1d0a6:	ec41 0b10 	vmov	d0, r0, r1
   1d0aa:	bd38      	pop	{r3, r4, r5, pc}
   1d0ac:	a116      	add	r1, pc, #88	; (adr r1, 1d108 <scalbn+0x100>)
   1d0ae:	e9d1 0100 	ldrd	r0, r1, [r1]
   1d0b2:	a313      	add	r3, pc, #76	; (adr r3, 1d100 <scalbn+0xf8>)
   1d0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d0b8:	f7fb fb6e 	bl	18798 <__aeabi_dmul>
   1d0bc:	ec41 0b10 	vmov	d0, r0, r1
   1d0c0:	e7f3      	b.n	1d0aa <scalbn+0xa2>
   1d0c2:	4817      	ldr	r0, [pc, #92]	; (1d120 <scalbn+0x118>)
   1d0c4:	3136      	adds	r1, #54	; 0x36
   1d0c6:	4020      	ands	r0, r4
   1d0c8:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
   1d0cc:	4610      	mov	r0, r2
   1d0ce:	2200      	movs	r2, #0
   1d0d0:	4619      	mov	r1, r3
   1d0d2:	4b14      	ldr	r3, [pc, #80]	; (1d124 <scalbn+0x11c>)
   1d0d4:	f7fb fb60 	bl	18798 <__aeabi_dmul>
   1d0d8:	ec41 0b10 	vmov	d0, r0, r1
   1d0dc:	bd38      	pop	{r3, r4, r5, pc}
   1d0de:	4810      	ldr	r0, [pc, #64]	; (1d120 <scalbn+0x118>)
   1d0e0:	4020      	ands	r0, r4
   1d0e2:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
   1d0e6:	ec43 2b10 	vmov	d0, r2, r3
   1d0ea:	bd38      	pop	{r3, r4, r5, pc}
   1d0ec:	a108      	add	r1, pc, #32	; (adr r1, 1d110 <scalbn+0x108>)
   1d0ee:	e9d1 0100 	ldrd	r0, r1, [r1]
   1d0f2:	e7ba      	b.n	1d06a <scalbn+0x62>
   1d0f4:	f3af 8000 	nop.w
   1d0f8:	c2f8f359 	.word	0xc2f8f359
   1d0fc:	01a56e1f 	.word	0x01a56e1f
   1d100:	8800759c 	.word	0x8800759c
   1d104:	7e37e43c 	.word	0x7e37e43c
   1d108:	8800759c 	.word	0x8800759c
   1d10c:	fe37e43c 	.word	0xfe37e43c
   1d110:	c2f8f359 	.word	0xc2f8f359
   1d114:	81a56e1f 	.word	0x81a56e1f
   1d118:	ffff3cb0 	.word	0xffff3cb0
   1d11c:	43500000 	.word	0x43500000
   1d120:	800fffff 	.word	0x800fffff
   1d124:	3c900000 	.word	0x3c900000

0001d128 <k_delayed_work_submit>:
   1d128:	460a      	mov	r2, r1
   1d12a:	4601      	mov	r1, r0
   1d12c:	4801      	ldr	r0, [pc, #4]	; (1d134 <k_delayed_work_submit+0xc>)
   1d12e:	f01d bcad 	b.w	3aa8c <k_delayed_work_submit_to_queue>
   1d132:	bf00      	nop
   1d134:	2002a25c 	.word	0x2002a25c

0001d138 <association_retry>:

static void association_retry(struct k_work *work)
{
	int err;

	if (atomic_get(&association_requested)) {
   1d138:	4b20      	ldr	r3, [pc, #128]	; (1d1bc <association_retry+0x84>)
{
   1d13a:	b510      	push	{r4, lr}
	if (atomic_get(&association_requested)) {
   1d13c:	4618      	mov	r0, r3
   1d13e:	f020 ff8b 	bl	3e058 <atomic_get>
   1d142:	2800      	cmp	r0, #0
   1d144:	d039      	beq.n	1d1ba <association_retry+0x82>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d146:	2200      	movs	r2, #0
   1d148:	e8d3 1fef 	ldaex	r1, [r3]
   1d14c:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1d150:	2800      	cmp	r0, #0
   1d152:	d1f9      	bne.n	1d148 <association_retry+0x10>
		atomic_set(&association_requested, 0);

		printk("Disconnecting from cloud...\n");
		err = cloud_disconnect(cloud_backend);
   1d154:	4c1a      	ldr	r4, [pc, #104]	; (1d1c0 <association_retry+0x88>)
		printk("Disconnecting from cloud...\n");
   1d156:	481b      	ldr	r0, [pc, #108]	; (1d1c4 <association_retry+0x8c>)
   1d158:	f021 fbe8 	bl	3e92c <printk>
		err = cloud_disconnect(cloud_backend);
   1d15c:	6820      	ldr	r0, [r4, #0]
 *
 * @return 0 or a negative error code indicating reason of failure.
 */
static inline int cloud_disconnect(const struct cloud_backend *const backend)
{
	if (backend == NULL
   1d15e:	b340      	cbz	r0, 1d1b2 <association_retry+0x7a>
	    || backend->api == NULL
   1d160:	6803      	ldr	r3, [r0, #0]
   1d162:	b333      	cbz	r3, 1d1b2 <association_retry+0x7a>
	    || backend->api->disconnect == NULL) {
   1d164:	68db      	ldr	r3, [r3, #12]
   1d166:	b323      	cbz	r3, 1d1b2 <association_retry+0x7a>
		return -ENOTSUP;
	}

	return backend->api->disconnect(backend);
   1d168:	4798      	blx	r3
		if (err == 0) {
   1d16a:	bb10      	cbnz	r0, 1d1b2 <association_retry+0x7a>
			printk("Reconnecting to cloud...\n");
   1d16c:	4816      	ldr	r0, [pc, #88]	; (1d1c8 <association_retry+0x90>)
   1d16e:	f021 fbdd 	bl	3e92c <printk>
			err = cloud_connect(cloud_backend);
   1d172:	6820      	ldr	r0, [r4, #0]
   1d174:	f020 ff5c 	bl	3e030 <cloud_connect>
			if (err == 0) {
   1d178:	b1f8      	cbz	r0, 1d1ba <association_retry+0x82>
				return;
			}
			printk("Could not reconnect\n");
   1d17a:	4814      	ldr	r0, [pc, #80]	; (1d1cc <association_retry+0x94>)
		} else {
			printk("Disconnection failed\n");
   1d17c:	f021 fbd6 	bl	3e92c <printk>
		}

		printk("Fallback to controlled reboot\n");
   1d180:	4813      	ldr	r0, [pc, #76]	; (1d1d0 <association_retry+0x98>)
   1d182:	f021 fbd3 	bl	3e92c <printk>
		printk("Shutting down LTE link...\n");
   1d186:	4813      	ldr	r0, [pc, #76]	; (1d1d4 <association_retry+0x9c>)
   1d188:	f021 fbd0 	bl	3e92c <printk>

	#if defined(CONFIG_BSD_LIBRARY)
		err = lte_lc_power_off();
   1d18c:	f00b faac 	bl	286e8 <lte_lc_power_off>
		if (err) {
   1d190:	b188      	cbz	r0, 1d1b6 <association_retry+0x7e>
			printk("Could not shut down link\n");
   1d192:	4811      	ldr	r0, [pc, #68]	; (1d1d8 <association_retry+0xa0>)
		} else {
			printk("LTE link disconnected\n");
   1d194:	f021 fbca 	bl	3e92c <printk>
		}
	#endif

	#ifdef CONFIG_REBOOT
		printk("Rebooting...\n");
   1d198:	4810      	ldr	r0, [pc, #64]	; (1d1dc <association_retry+0xa4>)
   1d19a:	f021 fbc7 	bl	3e92c <printk>
		LOG_PANIC();
   1d19e:	f020 ff59 	bl	3e054 <log_panic>
		sys_reboot(SYS_REBOOT_COLD);
   1d1a2:	2001      	movs	r0, #1
   1d1a4:	f002 fa1c 	bl	1f5e0 <sys_reboot>
	#endif
		printk("**** Manual reboot required ***\n");
	}
}
   1d1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("**** Manual reboot required ***\n");
   1d1ac:	480c      	ldr	r0, [pc, #48]	; (1d1e0 <association_retry+0xa8>)
   1d1ae:	f021 bbbd 	b.w	3e92c <printk>
			printk("Disconnection failed\n");
   1d1b2:	480c      	ldr	r0, [pc, #48]	; (1d1e4 <association_retry+0xac>)
   1d1b4:	e7e2      	b.n	1d17c <association_retry+0x44>
			printk("LTE link disconnected\n");
   1d1b6:	480c      	ldr	r0, [pc, #48]	; (1d1e8 <association_retry+0xb0>)
   1d1b8:	e7ec      	b.n	1d194 <association_retry+0x5c>
}
   1d1ba:	bd10      	pop	{r4, pc}
   1d1bc:	20023800 	.word	0x20023800
   1d1c0:	20023824 	.word	0x20023824
   1d1c4:	000441fa 	.word	0x000441fa
   1d1c8:	00044217 	.word	0x00044217
   1d1cc:	00044231 	.word	0x00044231
   1d1d0:	0004425c 	.word	0x0004425c
   1d1d4:	0004427b 	.word	0x0004427b
   1d1d8:	00044296 	.word	0x00044296
   1d1dc:	000442c7 	.word	0x000442c7
   1d1e0:	000442d5 	.word	0x000442d5
   1d1e4:	00044246 	.word	0x00044246
   1d1e8:	000442b0 	.word	0x000442b0

0001d1ec <long_press_handler>:
{
   1d1ec:	b508      	push	{r3, lr}
	if (!atomic_get(&send_data_enable)) {
   1d1ee:	480f      	ldr	r0, [pc, #60]	; (1d22c <long_press_handler+0x40>)
   1d1f0:	f020 ff32 	bl	3e058 <atomic_get>
   1d1f4:	b920      	cbnz	r0, 1d200 <long_press_handler+0x14>
}
   1d1f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Link not ready, long press disregarded\n");
   1d1fa:	480d      	ldr	r0, [pc, #52]	; (1d230 <long_press_handler+0x44>)
   1d1fc:	f021 bb96 	b.w	3e92c <printk>
	if (gps_control_is_enabled()) {
   1d200:	f001 f86a 	bl	1e2d8 <gps_control_is_enabled>
   1d204:	b130      	cbz	r0, 1d214 <long_press_handler+0x28>
		printk("Stopping GPS\n");
   1d206:	480b      	ldr	r0, [pc, #44]	; (1d234 <long_press_handler+0x48>)
   1d208:	f021 fb90 	bl	3e92c <printk>
}
   1d20c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		gps_control_disable();
   1d210:	f001 b880 	b.w	1e314 <gps_control_disable>
		printk("Starting GPS\n");
   1d214:	4808      	ldr	r0, [pc, #32]	; (1d238 <long_press_handler+0x4c>)
   1d216:	f021 fb89 	bl	3e92c <printk>
		gps_control_enable();
   1d21a:	f001 f89f 	bl	1e35c <gps_control_enable>
}
   1d21e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		gps_control_start(K_SECONDS(1));
   1d222:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1d226:	f001 b885 	b.w	1e334 <gps_control_start>
   1d22a:	bf00      	nop
   1d22c:	200238a4 	.word	0x200238a4
   1d230:	000445a5 	.word	0x000445a5
   1d234:	000445cd 	.word	0x000445cd
   1d238:	000445db 	.word	0x000445db

0001d23c <k_work_submit_to_queue.constprop.14>:
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
   1d23c:	4601      	mov	r1, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d23e:	f100 0308 	add.w	r3, r0, #8
   1d242:	e8d3 2fef 	ldaex	r2, [r3]
   1d246:	f042 0001 	orr.w	r0, r2, #1
   1d24a:	e8c3 0fec 	stlex	ip, r0, [r3]
   1d24e:	f1bc 0f00 	cmp.w	ip, #0
   1d252:	d1f6      	bne.n	1d242 <k_work_submit_to_queue.constprop.14+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1d254:	07d3      	lsls	r3, r2, #31
   1d256:	d402      	bmi.n	1d25e <k_work_submit_to_queue.constprop.14+0x22>
		k_queue_append(&work_q->queue, work);
   1d258:	4801      	ldr	r0, [pc, #4]	; (1d260 <k_work_submit_to_queue.constprop.14+0x24>)
   1d25a:	f023 bc1f 	b.w	40a9c <k_queue_append>
}
   1d25e:	4770      	bx	lr
   1d260:	2002a25c 	.word	0x2002a25c

0001d264 <ui_evt_handler>:
}

#if defined(CONFIG_USE_UI_MODULE)
/**@brief User interface event handler. */
static void ui_evt_handler(struct ui_evt evt)
{
   1d264:	b513      	push	{r0, r1, r4, lr}
   1d266:	ab02      	add	r3, sp, #8
   1d268:	e903 0003 	stmdb	r3, {r0, r1}
   1d26c:	9b01      	ldr	r3, [sp, #4]
	if (IS_ENABLED(CONFIG_CLOUD_BUTTON) &&
	   (evt.button == CONFIG_CLOUD_BUTTON_INPUT)) {
		button_send(evt.type == UI_EVT_BUTTON_ACTIVE ? 1 : 0);
	}

	if (IS_ENABLED(CONFIG_ACCEL_USE_SIM) && (evt.button == FLIP_INPUT)
   1d26e:	2b03      	cmp	r3, #3
   1d270:	d128      	bne.n	1d2c4 <ui_evt_handler+0x60>
	   && atomic_get(&send_data_enable)) {
   1d272:	481e      	ldr	r0, [pc, #120]	; (1d2ec <ui_evt_handler+0x88>)
   1d274:	f020 fef0 	bl	3e058 <atomic_get>
   1d278:	b188      	cbz	r0, 1d29e <ui_evt_handler+0x3a>
	if (!flip_mode_enabled || !atomic_get(&send_data_enable)) {
   1d27a:	481c      	ldr	r0, [pc, #112]	; (1d2ec <ui_evt_handler+0x88>)
   1d27c:	f020 feec 	bl	3e058 <atomic_get>
   1d280:	b168      	cbz	r0, 1d29e <ui_evt_handler+0x3a>
	if (orientation_detector_poll(&sensor_data) == 0) {
   1d282:	4c1b      	ldr	r4, [pc, #108]	; (1d2f0 <ui_evt_handler+0x8c>)
   1d284:	4620      	mov	r0, r4
   1d286:	f7fc fe87 	bl	19f98 <orientation_detector_poll>
   1d28a:	b940      	cbnz	r0, 1d29e <ui_evt_handler+0x3a>
		if (sensor_data.orientation == last_orientation_state) {
   1d28c:	4b19      	ldr	r3, [pc, #100]	; (1d2f4 <ui_evt_handler+0x90>)
   1d28e:	7e22      	ldrb	r2, [r4, #24]
   1d290:	7819      	ldrb	r1, [r3, #0]
   1d292:	4291      	cmp	r1, r2
   1d294:	d003      	beq.n	1d29e <ui_evt_handler+0x3a>
		switch (sensor_data.orientation) {
   1d296:	2a01      	cmp	r2, #1
   1d298:	d003      	beq.n	1d2a2 <ui_evt_handler+0x3e>
   1d29a:	2a02      	cmp	r2, #2
   1d29c:	d00d      	beq.n	1d2ba <ui_evt_handler+0x56>
				error_handler(ERROR_LTE_LC, err);
			}
		}
	}
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */
}
   1d29e:	b002      	add	sp, #8
   1d2a0:	bd10      	pop	{r4, pc}
			flip_cloud_data.data.buf = "NORMAL";
   1d2a2:	4815      	ldr	r0, [pc, #84]	; (1d2f8 <ui_evt_handler+0x94>)
   1d2a4:	4915      	ldr	r1, [pc, #84]	; (1d2fc <ui_evt_handler+0x98>)
   1d2a6:	6048      	str	r0, [r1, #4]
			flip_cloud_data.data.len = sizeof("NORMAL") - 1;
   1d2a8:	2006      	movs	r0, #6
			flip_cloud_data.data.len = sizeof("UPSIDE_DOWN") - 1;
   1d2aa:	6088      	str	r0, [r1, #8]
	k_work_submit_to_queue(&k_sys_work_q, work);
   1d2ac:	4814      	ldr	r0, [pc, #80]	; (1d300 <ui_evt_handler+0x9c>)
		last_orientation_state = sensor_data.orientation;
   1d2ae:	701a      	strb	r2, [r3, #0]
}
   1d2b0:	b002      	add	sp, #8
   1d2b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d2b6:	f7ff bfc1 	b.w	1d23c <k_work_submit_to_queue.constprop.14>
			flip_cloud_data.data.buf = "UPSIDE_DOWN";
   1d2ba:	4812      	ldr	r0, [pc, #72]	; (1d304 <ui_evt_handler+0xa0>)
   1d2bc:	490f      	ldr	r1, [pc, #60]	; (1d2fc <ui_evt_handler+0x98>)
   1d2be:	6048      	str	r0, [r1, #4]
			flip_cloud_data.data.len = sizeof("UPSIDE_DOWN") - 1;
   1d2c0:	200b      	movs	r0, #11
   1d2c2:	e7f2      	b.n	1d2aa <ui_evt_handler+0x46>
	if (IS_ENABLED(CONFIG_GPS_CONTROL_ON_LONG_PRESS) &&
   1d2c4:	2b01      	cmp	r3, #1
   1d2c6:	d1ea      	bne.n	1d29e <ui_evt_handler+0x3a>
		if (evt.type == UI_EVT_BUTTON_ACTIVE) {
   1d2c8:	f89d 3000 	ldrb.w	r3, [sp]
   1d2cc:	b93b      	cbnz	r3, 1d2de <ui_evt_handler+0x7a>
			k_delayed_work_submit(&long_press_button_work,
   1d2ce:	f241 3188 	movw	r1, #5000	; 0x1388
   1d2d2:	480d      	ldr	r0, [pc, #52]	; (1d308 <ui_evt_handler+0xa4>)
}
   1d2d4:	b002      	add	sp, #8
   1d2d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_delayed_work_submit(&long_press_button_work,
   1d2da:	f7ff bf25 	b.w	1d128 <k_delayed_work_submit>
			k_delayed_work_cancel(&long_press_button_work);
   1d2de:	480a      	ldr	r0, [pc, #40]	; (1d308 <ui_evt_handler+0xa4>)
}
   1d2e0:	b002      	add	sp, #8
   1d2e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_delayed_work_cancel(&long_press_button_work);
   1d2e6:	f01d bc5b 	b.w	3aba0 <k_delayed_work_cancel>
   1d2ea:	bf00      	nop
   1d2ec:	200238a4 	.word	0x200238a4
   1d2f0:	20020938 	.word	0x20020938
   1d2f4:	2002a348 	.word	0x2002a348
   1d2f8:	000448c7 	.word	0x000448c7
   1d2fc:	20023858 	.word	0x20023858
   1d300:	200238c8 	.word	0x200238c8
   1d304:	000448ce 	.word	0x000448ce
   1d308:	20023878 	.word	0x20023878

0001d30c <modem_rsrp_handler>:
	rsrp.value = rsrp_value;
   1d30c:	4b03      	ldr	r3, [pc, #12]	; (1d31c <modem_rsrp_handler+0x10>)
	if (rsrp.value == 255) {
   1d30e:	28ff      	cmp	r0, #255	; 0xff
	rsrp.value = rsrp_value;
   1d310:	8018      	strh	r0, [r3, #0]
	if (rsrp.value == 255) {
   1d312:	d002      	beq.n	1d31a <modem_rsrp_handler+0xe>
   1d314:	4802      	ldr	r0, [pc, #8]	; (1d320 <modem_rsrp_handler+0x14>)
   1d316:	f7ff bf91 	b.w	1d23c <k_work_submit_to_queue.constprop.14>
}
   1d31a:	4770      	bx	lr
   1d31c:	20031494 	.word	0x20031494
   1d320:	20023898 	.word	0x20023898

0001d324 <gps_trigger_handler>:
{
   1d324:	b570      	push	{r4, r5, r6, lr}
   1d326:	4604      	mov	r4, r0
	if (ui_button_is_active(UI_SWITCH_2)
   1d328:	2004      	movs	r0, #4
   1d32a:	f020 fecc 	bl	3e0c6 <ui_button_is_active>
   1d32e:	4606      	mov	r6, r0
   1d330:	b948      	cbnz	r0, 1d346 <gps_trigger_handler+0x22>
	   || !atomic_get(&send_data_enable)) {
   1d332:	4819      	ldr	r0, [pc, #100]	; (1d398 <gps_trigger_handler+0x74>)
   1d334:	f020 fe90 	bl	3e058 <atomic_get>
   1d338:	b128      	cbz	r0, 1d346 <gps_trigger_handler+0x22>
	if (++fix_count < CONFIG_GPS_CONTROL_FIX_COUNT) {
   1d33a:	4a18      	ldr	r2, [pc, #96]	; (1d39c <gps_trigger_handler+0x78>)
   1d33c:	6813      	ldr	r3, [r2, #0]
   1d33e:	3301      	adds	r3, #1
   1d340:	2b02      	cmp	r3, #2
   1d342:	d801      	bhi.n	1d348 <gps_trigger_handler+0x24>
   1d344:	6013      	str	r3, [r2, #0]
}
   1d346:	bd70      	pop	{r4, r5, r6, pc}
	ui_led_set_pattern(UI_LED_GPS_FIX);
   1d348:	2008      	movs	r0, #8
	fix_count = 0;
   1d34a:	6016      	str	r6, [r2, #0]
	ui_led_set_pattern(UI_LED_GPS_FIX);
   1d34c:	f000 fc9a 	bl	1dc84 <ui_led_set_pattern>
static inline int gps_sample_fetch(struct device *dev)
{
	const struct gps_driver_api *api =
		(const struct gps_driver_api *)dev->driver_api;

	return api->sample_fetch(dev);
   1d350:	6863      	ldr	r3, [r4, #4]
   1d352:	4620      	mov	r0, r4
   1d354:	685b      	ldr	r3, [r3, #4]
   1d356:	4798      	blx	r3
				  struct gps_data *data)
{
	const struct gps_driver_api *api =
		(const struct gps_driver_api *)dev->driver_api;

	return api->channel_get(dev, chan, data);
   1d358:	4d11      	ldr	r5, [pc, #68]	; (1d3a0 <gps_trigger_handler+0x7c>)
   1d35a:	6863      	ldr	r3, [r4, #4]
   1d35c:	4631      	mov	r1, r6
   1d35e:	462a      	mov	r2, r5
   1d360:	689b      	ldr	r3, [r3, #8]
   1d362:	4620      	mov	r0, r4
   1d364:	4798      	blx	r3
	gps_cloud_data.data.buf = gps_data.nmea.buf;
   1d366:	4b0f      	ldr	r3, [pc, #60]	; (1d3a4 <gps_trigger_handler+0x80>)
   1d368:	f105 0208 	add.w	r2, r5, #8
   1d36c:	605a      	str	r2, [r3, #4]
	gps_cloud_data.data.len = gps_data.nmea.len;
   1d36e:	f895 205b 	ldrb.w	r2, [r5, #91]	; 0x5b
	gps_control_stop(K_NO_WAIT);
   1d372:	2000      	movs	r0, #0
	gps_cloud_data.data.len = gps_data.nmea.len;
   1d374:	609a      	str	r2, [r3, #8]
	gps_cloud_data.tag += 1;
   1d376:	68da      	ldr	r2, [r3, #12]
	if (gps_cloud_data.tag == 0) {
   1d378:	3201      	adds	r2, #1
		gps_cloud_data.tag = 0x1;
   1d37a:	bf08      	it	eq
   1d37c:	2201      	moveq	r2, #1
   1d37e:	60da      	str	r2, [r3, #12]
	gps_control_stop(K_NO_WAIT);
   1d380:	f000 ffb4 	bl	1e2ec <gps_control_stop>
   1d384:	4808      	ldr	r0, [pc, #32]	; (1d3a8 <gps_trigger_handler+0x84>)
   1d386:	f7ff ff59 	bl	1d23c <k_work_submit_to_queue.constprop.14>
}
   1d38a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_delayed_work_submit(&send_env_data_work, K_NO_WAIT);
   1d38e:	2100      	movs	r1, #0
   1d390:	4806      	ldr	r0, [pc, #24]	; (1d3ac <gps_trigger_handler+0x88>)
   1d392:	f7ff bec9 	b.w	1d128 <k_delayed_work_submit>
   1d396:	bf00      	nop
   1d398:	200238a4 	.word	0x200238a4
   1d39c:	20023854 	.word	0x20023854
   1d3a0:	20020000 	.word	0x20020000
   1d3a4:	20023868 	.word	0x20023868
   1d3a8:	200238d4 	.word	0x200238d4
   1d3ac:	200238a8 	.word	0x200238a8

0001d3b0 <error_handler>:
{
   1d3b0:	b510      	push	{r4, lr}
	if (err_type == ERROR_CLOUD) {
   1d3b2:	4604      	mov	r4, r0
   1d3b4:	b9b8      	cbnz	r0, 1d3e6 <error_handler+0x36>
		if (gps_control_is_enabled()) {
   1d3b6:	f000 ff8f 	bl	1e2d8 <gps_control_is_enabled>
   1d3ba:	b128      	cbz	r0, 1d3c8 <error_handler+0x18>
			printk("Reboot\n");
   1d3bc:	480d      	ldr	r0, [pc, #52]	; (1d3f4 <error_handler+0x44>)
   1d3be:	f021 fab5 	bl	3e92c <printk>
			sys_reboot(0);
   1d3c2:	4620      	mov	r0, r4
   1d3c4:	f002 f90c 	bl	1f5e0 <sys_reboot>
		printk("LTE link disconnect\n");
   1d3c8:	480b      	ldr	r0, [pc, #44]	; (1d3f8 <error_handler+0x48>)
   1d3ca:	f021 faaf 	bl	3e92c <printk>
		int err = lte_lc_power_off();
   1d3ce:	f00b f98b 	bl	286e8 <lte_lc_power_off>
		if (err) {
   1d3d2:	4601      	mov	r1, r0
   1d3d4:	b110      	cbz	r0, 1d3dc <error_handler+0x2c>
			printk("lte_lc_power_off failed: %d\n", err);
   1d3d6:	4809      	ldr	r0, [pc, #36]	; (1d3fc <error_handler+0x4c>)
   1d3d8:	f021 faa8 	bl	3e92c <printk>
		printk("Shutdown modem\n");
   1d3dc:	4808      	ldr	r0, [pc, #32]	; (1d400 <error_handler+0x50>)
   1d3de:	f021 faa5 	bl	3e92c <printk>
		bsdlib_shutdown();
   1d3e2:	f022 fbe4 	bl	3fbae <bsdlib_shutdown>
	LOG_PANIC();
   1d3e6:	f020 fe35 	bl	3e054 <log_panic>
}
   1d3ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sys_reboot(0);
   1d3ee:	2000      	movs	r0, #0
   1d3f0:	f002 b8f6 	b.w	1f5e0 <sys_reboot>
   1d3f4:	000444bb 	.word	0x000444bb
   1d3f8:	000444c3 	.word	0x000444c3
   1d3fc:	000444d8 	.word	0x000444d8
   1d400:	000444f5 	.word	0x000444f5

0001d404 <k_sys_fatal_error_handler>:
{
   1d404:	b508      	push	{r3, lr}
	LOG_PANIC();
   1d406:	f020 fe25 	bl	3e054 <log_panic>
	printk("Running main.c error handler");
   1d40a:	4804      	ldr	r0, [pc, #16]	; (1d41c <k_sys_fatal_error_handler+0x18>)
   1d40c:	f021 fa8e 	bl	3e92c <printk>
	LOG_PANIC();
   1d410:	f020 fe20 	bl	3e054 <log_panic>
	sys_reboot(0);
   1d414:	2000      	movs	r0, #0
   1d416:	f002 f8e3 	bl	1f5e0 <sys_reboot>
	CODE_UNREACHABLE;
   1d41a:	bf00      	nop
   1d41c:	00044588 	.word	0x00044588

0001d420 <sensor_data_send>:
{
   1d420:	b510      	push	{r4, lr}
   1d422:	4604      	mov	r4, r0
   1d424:	b086      	sub	sp, #24
	struct cloud_msg msg = {
   1d426:	2218      	movs	r2, #24
   1d428:	2100      	movs	r1, #0
   1d42a:	4668      	mov	r0, sp
   1d42c:	f023 fcb8 	bl	40da0 <memset>
	if (data->type == CLOUD_CHANNEL_DEVICE_INFO) {
   1d430:	7823      	ldrb	r3, [r4, #0]
	if (!atomic_get(&send_data_enable) || gps_control_is_active()) {
   1d432:	4817      	ldr	r0, [pc, #92]	; (1d490 <sensor_data_send+0x70>)
	if (data->type == CLOUD_CHANNEL_DEVICE_INFO) {
   1d434:	2b0c      	cmp	r3, #12
		msg.endpoint.type = CLOUD_EP_TOPIC_STATE;
   1d436:	bf04      	itt	eq
   1d438:	2301      	moveq	r3, #1
   1d43a:	f88d 300c 	strbeq.w	r3, [sp, #12]
	if (!atomic_get(&send_data_enable) || gps_control_is_active()) {
   1d43e:	f020 fe0b 	bl	3e058 <atomic_get>
   1d442:	b1f8      	cbz	r0, 1d484 <sensor_data_send+0x64>
   1d444:	f000 ff3e 	bl	1e2c4 <gps_control_is_active>
   1d448:	b9e0      	cbnz	r0, 1d484 <sensor_data_send+0x64>
	if (data->type != CLOUD_CHANNEL_DEVICE_INFO) {
   1d44a:	7823      	ldrb	r3, [r4, #0]
		err = cloud_encode_data(data, &msg);
   1d44c:	4669      	mov	r1, sp
	if (data->type != CLOUD_CHANNEL_DEVICE_INFO) {
   1d44e:	2b0c      	cmp	r3, #12
		err = cloud_encode_data(data, &msg);
   1d450:	4620      	mov	r0, r4
	if (data->type != CLOUD_CHANNEL_DEVICE_INFO) {
   1d452:	d019      	beq.n	1d488 <sensor_data_send+0x68>
		err = cloud_encode_data(data, &msg);
   1d454:	f000 fcdc 	bl	1de10 <cloud_encode_data>
	if (err) {
   1d458:	b118      	cbz	r0, 1d462 <sensor_data_send+0x42>
		printk("Unable to encode cloud data: %d\n", err);
   1d45a:	4601      	mov	r1, r0
   1d45c:	480d      	ldr	r0, [pc, #52]	; (1d494 <sensor_data_send+0x74>)
   1d45e:	f021 fa65 	bl	3e92c <printk>
	err = cloud_send(cloud_backend, &msg);
   1d462:	4b0d      	ldr	r3, [pc, #52]	; (1d498 <sensor_data_send+0x78>)
   1d464:	4669      	mov	r1, sp
   1d466:	6818      	ldr	r0, [r3, #0]
   1d468:	f020 fdeb 	bl	3e042 <cloud_send>
   1d46c:	4604      	mov	r4, r0
 *
 * @return 0 if the operation was successful, otherwise a (negative) error code.
 */
static inline void cloud_release_data(struct cloud_msg *data)
{
	k_free(data->buf);
   1d46e:	9800      	ldr	r0, [sp, #0]
   1d470:	f023 fadf 	bl	40a32 <k_free>
	if (err) {
   1d474:	b134      	cbz	r4, 1d484 <sensor_data_send+0x64>
		printk("sensor_data_send failed: %d\n", err);
   1d476:	4809      	ldr	r0, [pc, #36]	; (1d49c <sensor_data_send+0x7c>)
   1d478:	4621      	mov	r1, r4
   1d47a:	f021 fa57 	bl	3e92c <printk>
		cloud_error_handler(err);
   1d47e:	4620      	mov	r0, r4
   1d480:	f020 fdf2 	bl	3e068 <cloud_error_handler>
}
   1d484:	b006      	add	sp, #24
   1d486:	bd10      	pop	{r4, pc}
		err = cloud_encode_digital_twin_data(data, &msg);
   1d488:	f000 fd22 	bl	1ded0 <cloud_encode_digital_twin_data>
   1d48c:	e7e4      	b.n	1d458 <sensor_data_send+0x38>
   1d48e:	bf00      	nop
   1d490:	200238a4 	.word	0x200238a4
   1d494:	000447ef 	.word	0x000447ef
   1d498:	20023824 	.word	0x20023824
   1d49c:	00044810 	.word	0x00044810

0001d4a0 <device_status_send>:
{
   1d4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!atomic_get(&send_data_enable)) {
   1d4a2:	4824      	ldr	r0, [pc, #144]	; (1d534 <device_status_send+0x94>)
{
   1d4a4:	b08b      	sub	sp, #44	; 0x2c
	if (!atomic_get(&send_data_enable)) {
   1d4a6:	f020 fdd7 	bl	3e058 <atomic_get>
   1d4aa:	b130      	cbz	r0, 1d4ba <device_status_send+0x1a>
	cJSON *root_obj = cJSON_CreateObject();
   1d4ac:	f005 f926 	bl	226fc <cJSON_CreateObject>
	if (root_obj == NULL) {
   1d4b0:	4607      	mov	r7, r0
   1d4b2:	b920      	cbnz	r0, 1d4be <device_status_send+0x1e>
		printk("Unable to allocate JSON object\n");
   1d4b4:	4820      	ldr	r0, [pc, #128]	; (1d538 <device_status_send+0x98>)
   1d4b6:	f021 fa39 	bl	3e92c <printk>
}
   1d4ba:	b00b      	add	sp, #44	; 0x2c
   1d4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int ret = modem_info_params_get(&modem_param);
   1d4be:	481f      	ldr	r0, [pc, #124]	; (1d53c <device_status_send+0x9c>)
   1d4c0:	f006 fd74 	bl	23fac <modem_info_params_get>
	if (ret < 0) {
   1d4c4:	1e01      	subs	r1, r0, #0
   1d4c6:	da25      	bge.n	1d514 <device_status_send+0x74>
		printk("Unable to obtain modem parameters: %d\n", ret);
   1d4c8:	481d      	ldr	r0, [pc, #116]	; (1d540 <device_status_send+0xa0>)
   1d4ca:	f021 fa2f 	bl	3e92c <printk>
	size_t item_cnt = 0;
   1d4ce:	2500      	movs	r5, #0
	const char *const ui[] = {
   1d4d0:	4c1c      	ldr	r4, [pc, #112]	; (1d544 <device_status_send+0xa4>)
   1d4d2:	ae05      	add	r6, sp, #20
   1d4d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1d4d6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1d4d8:	f854 3b04 	ldr.w	r3, [r4], #4
	const char *const fota[] = {
   1d4dc:	aa03      	add	r2, sp, #12
	const char *const ui[] = {
   1d4de:	6033      	str	r3, [r6, #0]
	if (service_info_json_object_encode(ui, ARRAY_SIZE(ui),
   1d4e0:	2301      	movs	r3, #1
	const char *const fota[] = {
   1d4e2:	e894 0003 	ldmia.w	r4, {r0, r1}
   1d4e6:	e882 0003 	stmia.w	r2, {r0, r1}
	if (service_info_json_object_encode(ui, ARRAY_SIZE(ui),
   1d4ea:	9300      	str	r3, [sp, #0]
   1d4ec:	9701      	str	r7, [sp, #4]
   1d4ee:	2302      	movs	r3, #2
   1d4f0:	2105      	movs	r1, #5
   1d4f2:	a805      	add	r0, sp, #20
   1d4f4:	f000 fe08 	bl	1e108 <service_info_json_object_encode>
   1d4f8:	b9a8      	cbnz	r0, 1d526 <device_status_send+0x86>
		++item_cnt;
   1d4fa:	3501      	adds	r5, #1
	device_cloud_data.data.buf = (char *)root_obj;
   1d4fc:	4b12      	ldr	r3, [pc, #72]	; (1d548 <device_status_send+0xa8>)
	sensor_data_send(&device_cloud_data);
   1d4fe:	4812      	ldr	r0, [pc, #72]	; (1d548 <device_status_send+0xa8>)
	device_cloud_data.tag += 1;
   1d500:	68da      	ldr	r2, [r3, #12]
	device_cloud_data.data.len = item_cnt;
   1d502:	e9c3 7501 	strd	r7, r5, [r3, #4]
	if (device_cloud_data.tag == 0) {
   1d506:	3201      	adds	r2, #1
		device_cloud_data.tag = 0x1;
   1d508:	bf08      	it	eq
   1d50a:	2201      	moveq	r2, #1
   1d50c:	60da      	str	r2, [r3, #12]
	sensor_data_send(&device_cloud_data);
   1d50e:	f7ff ff87 	bl	1d420 <sensor_data_send>
   1d512:	e7d2      	b.n	1d4ba <device_status_send+0x1a>
		ret = modem_info_json_object_encode(&modem_param, root_obj);
   1d514:	4639      	mov	r1, r7
   1d516:	4809      	ldr	r0, [pc, #36]	; (1d53c <device_status_send+0x9c>)
   1d518:	f006 fec2 	bl	242a0 <modem_info_json_object_encode>
			item_cnt = (size_t)ret;
   1d51c:	2800      	cmp	r0, #0
   1d51e:	bfcc      	ite	gt
   1d520:	4605      	movgt	r5, r0
   1d522:	2500      	movle	r5, #0
   1d524:	e7d4      	b.n	1d4d0 <device_status_send+0x30>
	if (item_cnt == 0) {
   1d526:	2d00      	cmp	r5, #0
   1d528:	d1e8      	bne.n	1d4fc <device_status_send+0x5c>
		cJSON_Delete(root_obj);
   1d52a:	4638      	mov	r0, r7
   1d52c:	f005 f822 	bl	22574 <cJSON_Delete>
		return;
   1d530:	e7c3      	b.n	1d4ba <device_status_send+0x1a>
   1d532:	bf00      	nop
   1d534:	200238a4 	.word	0x200238a4
   1d538:	00044474 	.word	0x00044474
   1d53c:	200200c0 	.word	0x200200c0
   1d540:	00044494 	.word	0x00044494
   1d544:	00042430 	.word	0x00042430
   1d548:	20030ca0 	.word	0x20030ca0

0001d54c <modem_rsrp_data_send>:
{
   1d54c:	b510      	push	{r4, lr}
   1d54e:	b0a0      	sub	sp, #128	; 0x80
	char buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   1d550:	2280      	movs	r2, #128	; 0x80
   1d552:	2100      	movs	r1, #0
   1d554:	4668      	mov	r0, sp
   1d556:	f023 fc23 	bl	40da0 <memset>
	if (!atomic_get(&send_data_enable)) {
   1d55a:	4813      	ldr	r0, [pc, #76]	; (1d5a8 <modem_rsrp_data_send+0x5c>)
   1d55c:	f020 fd7c 	bl	3e058 <atomic_get>
   1d560:	b300      	cbz	r0, 1d5a4 <modem_rsrp_data_send+0x58>
		(void)z_arch_syscall_invoke1((u32_t)&ret64, K_SYSCALL_K_UPTIME_GET);
		return (s64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_get();
   1d562:	f023 fb77 	bl	40c54 <z_impl_k_uptime_get>
	if (k_uptime_get_32() - timestamp_prev <
   1d566:	4c11      	ldr	r4, [pc, #68]	; (1d5ac <modem_rsrp_data_send+0x60>)
   1d568:	6822      	ldr	r2, [r4, #0]
   1d56a:	1a80      	subs	r0, r0, r2
   1d56c:	f64e 225f 	movw	r2, #59999	; 0xea5f
   1d570:	4290      	cmp	r0, r2
   1d572:	d917      	bls.n	1d5a4 <modem_rsrp_data_send+0x58>
	len = snprintf(buf, CONFIG_MODEM_INFO_BUFFER_SIZE,
   1d574:	4a0e      	ldr	r2, [pc, #56]	; (1d5b0 <modem_rsrp_data_send+0x64>)
   1d576:	4668      	mov	r0, sp
   1d578:	8811      	ldrh	r1, [r2, #0]
   1d57a:	8853      	ldrh	r3, [r2, #2]
   1d57c:	4a0d      	ldr	r2, [pc, #52]	; (1d5b4 <modem_rsrp_data_send+0x68>)
   1d57e:	1acb      	subs	r3, r1, r3
   1d580:	2180      	movs	r1, #128	; 0x80
   1d582:	f01f fa0d 	bl	3c9a0 <sniprintf>
	signal_strength_cloud_data.data.buf = buf;
   1d586:	4b0c      	ldr	r3, [pc, #48]	; (1d5b8 <modem_rsrp_data_send+0x6c>)
	signal_strength_cloud_data.tag += 1;
   1d588:	68da      	ldr	r2, [r3, #12]
	signal_strength_cloud_data.data.len = len;
   1d58a:	6098      	str	r0, [r3, #8]
	if (signal_strength_cloud_data.tag == 0) {
   1d58c:	3201      	adds	r2, #1
		signal_strength_cloud_data.tag = 0x1;
   1d58e:	bf08      	it	eq
   1d590:	2201      	moveq	r2, #1
	sensor_data_send(&signal_strength_cloud_data);
   1d592:	4809      	ldr	r0, [pc, #36]	; (1d5b8 <modem_rsrp_data_send+0x6c>)
	signal_strength_cloud_data.data.buf = buf;
   1d594:	f8c3 d004 	str.w	sp, [r3, #4]
		signal_strength_cloud_data.tag = 0x1;
   1d598:	60da      	str	r2, [r3, #12]
	sensor_data_send(&signal_strength_cloud_data);
   1d59a:	f7ff ff41 	bl	1d420 <sensor_data_send>
   1d59e:	f023 fb59 	bl	40c54 <z_impl_k_uptime_get>
	return (u32_t)k_uptime_get();
   1d5a2:	6020      	str	r0, [r4, #0]
}
   1d5a4:	b020      	add	sp, #128	; 0x80
   1d5a6:	bd10      	pop	{r4, pc}
   1d5a8:	200238a4 	.word	0x200238a4
   1d5ac:	200238f0 	.word	0x200238f0
   1d5b0:	20031494 	.word	0x20031494
   1d5b4:	00047204 	.word	0x00047204
   1d5b8:	200238e0 	.word	0x200238e0

0001d5bc <send_flip_data_work_fn>:
	sensor_data_send(&flip_cloud_data);
   1d5bc:	4801      	ldr	r0, [pc, #4]	; (1d5c4 <send_flip_data_work_fn+0x8>)
   1d5be:	f7ff bf2f 	b.w	1d420 <sensor_data_send>
   1d5c2:	bf00      	nop
   1d5c4:	20023858 	.word	0x20023858

0001d5c8 <send_gps_data_work_fn>:
	sensor_data_send(&gps_cloud_data);
   1d5c8:	4801      	ldr	r0, [pc, #4]	; (1d5d0 <send_gps_data_work_fn+0x8>)
   1d5ca:	f7ff bf29 	b.w	1d420 <sensor_data_send>
   1d5ce:	bf00      	nop
   1d5d0:	20023868 	.word	0x20023868

0001d5d4 <send_env_data_work_fn>:
{
   1d5d4:	b510      	push	{r4, lr}
   1d5d6:	b08a      	sub	sp, #40	; 0x28
	struct cloud_msg msg = {
   1d5d8:	2218      	movs	r2, #24
   1d5da:	2100      	movs	r1, #0
   1d5dc:	a804      	add	r0, sp, #16
   1d5de:	f023 fbdf 	bl	40da0 <memset>
	if (!atomic_get(&send_data_enable)) {
   1d5e2:	4839      	ldr	r0, [pc, #228]	; (1d6c8 <send_env_data_work_fn+0xf4>)
   1d5e4:	f020 fd38 	bl	3e058 <atomic_get>
   1d5e8:	b138      	cbz	r0, 1d5fa <send_env_data_work_fn+0x26>
	if (gps_control_is_active()) {
   1d5ea:	f000 fe6b 	bl	1e2c4 <gps_control_is_active>
   1d5ee:	b130      	cbz	r0, 1d5fe <send_env_data_work_fn+0x2a>
		k_delayed_work_submit(&send_env_data_work,
   1d5f0:	f644 6120 	movw	r1, #20000	; 0x4e20
	k_delayed_work_submit(&send_env_data_work,
   1d5f4:	4835      	ldr	r0, [pc, #212]	; (1d6cc <send_env_data_work_fn+0xf8>)
   1d5f6:	f7ff fd97 	bl	1d128 <k_delayed_work_submit>
}
   1d5fa:	b00a      	add	sp, #40	; 0x28
   1d5fc:	bd10      	pop	{r4, pc}
	if (env_sensors_get_temperature(&env_data) == 0) {
   1d5fe:	4668      	mov	r0, sp
   1d600:	f000 ff32 	bl	1e468 <env_sensors_get_temperature>
   1d604:	b180      	cbz	r0, 1d628 <send_env_data_work_fn+0x54>
	if (env_sensors_get_humidity(&env_data) == 0) {
   1d606:	4668      	mov	r0, sp
   1d608:	f000 ff86 	bl	1e518 <env_sensors_get_humidity>
   1d60c:	b328      	cbz	r0, 1d65a <send_env_data_work_fn+0x86>
	if (env_sensors_get_pressure(&env_data) == 0) {
   1d60e:	4668      	mov	r0, sp
   1d610:	f000 ffda 	bl	1e5c8 <env_sensors_get_pressure>
   1d614:	2800      	cmp	r0, #0
   1d616:	d032      	beq.n	1d67e <send_env_data_work_fn+0xaa>
	if (env_sensors_get_air_quality(&env_data) == 0) {
   1d618:	4668      	mov	r0, sp
   1d61a:	f020 fd9c 	bl	3e156 <env_sensors_get_air_quality>
   1d61e:	2800      	cmp	r0, #0
   1d620:	d03f      	beq.n	1d6a2 <send_env_data_work_fn+0xce>
	k_delayed_work_submit(&send_env_data_work,
   1d622:	f247 5130 	movw	r1, #30000	; 0x7530
   1d626:	e7e5      	b.n	1d5f4 <send_env_data_work_fn+0x20>
		if (cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   1d628:	a904      	add	r1, sp, #16
   1d62a:	4668      	mov	r0, sp
   1d62c:	f000 fd1e 	bl	1e06c <cloud_encode_env_sensors_data>
   1d630:	2800      	cmp	r0, #0
   1d632:	d1e8      	bne.n	1d606 <send_env_data_work_fn+0x32>
			err = cloud_send(cloud_backend, &msg);
   1d634:	4b26      	ldr	r3, [pc, #152]	; (1d6d0 <send_env_data_work_fn+0xfc>)
   1d636:	a904      	add	r1, sp, #16
   1d638:	6818      	ldr	r0, [r3, #0]
   1d63a:	f020 fd02 	bl	3e042 <cloud_send>
   1d63e:	4604      	mov	r4, r0
   1d640:	9804      	ldr	r0, [sp, #16]
   1d642:	f023 f9f6 	bl	40a32 <k_free>
			if (err) {
   1d646:	2c00      	cmp	r4, #0
   1d648:	d0dd      	beq.n	1d606 <send_env_data_work_fn+0x32>
	printk("sensor_data_send failed: %d\n", err);
   1d64a:	4621      	mov	r1, r4
   1d64c:	4821      	ldr	r0, [pc, #132]	; (1d6d4 <send_env_data_work_fn+0x100>)
   1d64e:	f021 f96d 	bl	3e92c <printk>
	cloud_error_handler(err);
   1d652:	4620      	mov	r0, r4
   1d654:	f020 fd08 	bl	3e068 <cloud_error_handler>
   1d658:	e7cf      	b.n	1d5fa <send_env_data_work_fn+0x26>
		if (cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   1d65a:	a904      	add	r1, sp, #16
   1d65c:	4668      	mov	r0, sp
   1d65e:	f000 fd05 	bl	1e06c <cloud_encode_env_sensors_data>
   1d662:	2800      	cmp	r0, #0
   1d664:	d1d3      	bne.n	1d60e <send_env_data_work_fn+0x3a>
			err = cloud_send(cloud_backend, &msg);
   1d666:	4b1a      	ldr	r3, [pc, #104]	; (1d6d0 <send_env_data_work_fn+0xfc>)
   1d668:	a904      	add	r1, sp, #16
   1d66a:	6818      	ldr	r0, [r3, #0]
   1d66c:	f020 fce9 	bl	3e042 <cloud_send>
   1d670:	4604      	mov	r4, r0
   1d672:	9804      	ldr	r0, [sp, #16]
   1d674:	f023 f9dd 	bl	40a32 <k_free>
			if (err) {
   1d678:	2c00      	cmp	r4, #0
   1d67a:	d0c8      	beq.n	1d60e <send_env_data_work_fn+0x3a>
   1d67c:	e7e5      	b.n	1d64a <send_env_data_work_fn+0x76>
		if (cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   1d67e:	a904      	add	r1, sp, #16
   1d680:	4668      	mov	r0, sp
   1d682:	f000 fcf3 	bl	1e06c <cloud_encode_env_sensors_data>
   1d686:	2800      	cmp	r0, #0
   1d688:	d1c6      	bne.n	1d618 <send_env_data_work_fn+0x44>
			err = cloud_send(cloud_backend, &msg);
   1d68a:	4b11      	ldr	r3, [pc, #68]	; (1d6d0 <send_env_data_work_fn+0xfc>)
   1d68c:	a904      	add	r1, sp, #16
   1d68e:	6818      	ldr	r0, [r3, #0]
   1d690:	f020 fcd7 	bl	3e042 <cloud_send>
   1d694:	4604      	mov	r4, r0
   1d696:	9804      	ldr	r0, [sp, #16]
   1d698:	f023 f9cb 	bl	40a32 <k_free>
			if (err) {
   1d69c:	2c00      	cmp	r4, #0
   1d69e:	d0bb      	beq.n	1d618 <send_env_data_work_fn+0x44>
   1d6a0:	e7d3      	b.n	1d64a <send_env_data_work_fn+0x76>
		if (cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   1d6a2:	a904      	add	r1, sp, #16
   1d6a4:	4668      	mov	r0, sp
   1d6a6:	f000 fce1 	bl	1e06c <cloud_encode_env_sensors_data>
   1d6aa:	2800      	cmp	r0, #0
   1d6ac:	d1b9      	bne.n	1d622 <send_env_data_work_fn+0x4e>
			err = cloud_send(cloud_backend, &msg);
   1d6ae:	4b08      	ldr	r3, [pc, #32]	; (1d6d0 <send_env_data_work_fn+0xfc>)
   1d6b0:	a904      	add	r1, sp, #16
   1d6b2:	6818      	ldr	r0, [r3, #0]
   1d6b4:	f020 fcc5 	bl	3e042 <cloud_send>
   1d6b8:	4604      	mov	r4, r0
   1d6ba:	9804      	ldr	r0, [sp, #16]
   1d6bc:	f023 f9b9 	bl	40a32 <k_free>
			if (err) {
   1d6c0:	2c00      	cmp	r4, #0
   1d6c2:	d0ae      	beq.n	1d622 <send_env_data_work_fn+0x4e>
   1d6c4:	e7c1      	b.n	1d64a <send_env_data_work_fn+0x76>
   1d6c6:	bf00      	nop
   1d6c8:	200238a4 	.word	0x200238a4
   1d6cc:	200238a8 	.word	0x200238a8
   1d6d0:	20023824 	.word	0x20023824
   1d6d4:	00044810 	.word	0x00044810

0001d6d8 <sensors_start>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d6d8:	2201      	movs	r2, #1
{
   1d6da:	b508      	push	{r3, lr}
   1d6dc:	4b1d      	ldr	r3, [pc, #116]	; (1d754 <sensors_start+0x7c>)
   1d6de:	e8d3 1fef 	ldaex	r1, [r3]
   1d6e2:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1d6e6:	2800      	cmp	r0, #0
   1d6e8:	d1f9      	bne.n	1d6de <sensors_start+0x6>
	if (z_syscall_trap()) {
		return (struct device *) z_arch_syscall_invoke1(*(u32_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1d6ea:	481b      	ldr	r0, [pc, #108]	; (1d758 <sensors_start+0x80>)
   1d6ec:	f01a fdd8 	bl	382a0 <z_impl_device_get_binding>
	if (accel_dev == NULL) {
   1d6f0:	bb08      	cbnz	r0, 1d736 <sensors_start+0x5e>
		printk("Could not get %s device\n", CONFIG_ACCEL_DEV_NAME);
   1d6f2:	4919      	ldr	r1, [pc, #100]	; (1d758 <sensors_start+0x80>)
   1d6f4:	4819      	ldr	r0, [pc, #100]	; (1d75c <sensors_start+0x84>)
   1d6f6:	f021 f919 	bl	3e92c <printk>
	err = env_sensors_init_and_start();
   1d6fa:	f000 fe73 	bl	1e3e4 <env_sensors_init_and_start>
	if (err) {
   1d6fe:	4601      	mov	r1, r0
   1d700:	b110      	cbz	r0, 1d708 <sensors_start+0x30>
		printk("Environmental sensors init failed, error: %d\n", err);
   1d702:	4817      	ldr	r0, [pc, #92]	; (1d760 <sensors_start+0x88>)
   1d704:	f021 f912 	bl	3e92c <printk>
	err = modem_info_init();
   1d708:	f006 fbb4 	bl	23e74 <modem_info_init>
	if (err) {
   1d70c:	4601      	mov	r1, r0
   1d70e:	b1a8      	cbz	r0, 1d73c <sensors_start+0x64>
		printk("Modem info could not be established: %d\n", err);
   1d710:	4814      	ldr	r0, [pc, #80]	; (1d764 <sensors_start+0x8c>)
   1d712:	f021 f90b 	bl	3e92c <printk>
	k_work_submit_to_queue(&k_sys_work_q, work);
   1d716:	4814      	ldr	r0, [pc, #80]	; (1d768 <sensors_start+0x90>)
   1d718:	f7ff fd90 	bl	1d23c <k_work_submit_to_queue.constprop.14>
	gps_control_init(gps_trigger_handler);
   1d71c:	4813      	ldr	r0, [pc, #76]	; (1d76c <sensors_start+0x94>)
   1d71e:	f000 fe2b 	bl	1e378 <gps_control_init>
	flip_cloud_data.type = CLOUD_CHANNEL_FLIP;
   1d722:	2201      	movs	r2, #1
   1d724:	4b12      	ldr	r3, [pc, #72]	; (1d770 <sensors_start+0x98>)
	k_delayed_work_submit(&send_env_data_work, K_SECONDS(5));
   1d726:	f241 3188 	movw	r1, #5000	; 0x1388
	flip_cloud_data.type = CLOUD_CHANNEL_FLIP;
   1d72a:	701a      	strb	r2, [r3, #0]
	k_delayed_work_submit(&send_env_data_work, K_SECONDS(5));
   1d72c:	4811      	ldr	r0, [pc, #68]	; (1d774 <sensors_start+0x9c>)
}
   1d72e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_submit(&send_env_data_work, K_SECONDS(5));
   1d732:	f7ff bcf9 	b.w	1d128 <k_delayed_work_submit>
	orientation_detector_init(accel_dev);
   1d736:	f000 fa47 	bl	1dbc8 <orientation_detector_init>
		return;
   1d73a:	e7de      	b.n	1d6fa <sensors_start+0x22>
	modem_info_params_init(&modem_param);
   1d73c:	480e      	ldr	r0, [pc, #56]	; (1d778 <sensors_start+0xa0>)
   1d73e:	f006 fbe5 	bl	23f0c <modem_info_params_init>
	signal_strength_cloud_data.type = CLOUD_CHANNEL_LTE_LINK_RSRP;
   1d742:	220b      	movs	r2, #11
   1d744:	4b0d      	ldr	r3, [pc, #52]	; (1d77c <sensors_start+0xa4>)
	modem_info_rsrp_register(modem_rsrp_handler);
   1d746:	480e      	ldr	r0, [pc, #56]	; (1d780 <sensors_start+0xa8>)
	signal_strength_cloud_data.type = CLOUD_CHANNEL_LTE_LINK_RSRP;
   1d748:	701a      	strb	r2, [r3, #0]
	signal_strength_cloud_data.tag = 0x1;
   1d74a:	2201      	movs	r2, #1
   1d74c:	60da      	str	r2, [r3, #12]
	modem_info_rsrp_register(modem_rsrp_handler);
   1d74e:	f006 fb5f 	bl	23e10 <modem_info_rsrp_register>
   1d752:	e7e0      	b.n	1d716 <sensors_start+0x3e>
   1d754:	200238a4 	.word	0x200238a4
   1d758:	0004482d 	.word	0x0004482d
   1d75c:	00044838 	.word	0x00044838
   1d760:	00044851 	.word	0x00044851
   1d764:	0004487f 	.word	0x0004487f
   1d768:	20023848 	.word	0x20023848
   1d76c:	0001d325 	.word	0x0001d325
   1d770:	20023858 	.word	0x20023858
   1d774:	200238a8 	.word	0x200238a8
   1d778:	200200c0 	.word	0x200200c0
   1d77c:	200238e0 	.word	0x200238e0
   1d780:	0001d30d 	.word	0x0001d30d

0001d784 <on_pairing_done>:
   1d784:	2200      	movs	r2, #0
   1d786:	4b05      	ldr	r3, [pc, #20]	; (1d79c <on_pairing_done+0x18>)
   1d788:	e8d3 1fef 	ldaex	r1, [r3]
   1d78c:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1d790:	2800      	cmp	r0, #0
   1d792:	d1f9      	bne.n	1d788 <on_pairing_done+0x4>
	(void)k_delayed_work_cancel(&association_retry_work);
   1d794:	4802      	ldr	r0, [pc, #8]	; (1d7a0 <on_pairing_done+0x1c>)
   1d796:	f01d ba03 	b.w	3aba0 <k_delayed_work_cancel>
   1d79a:	bf00      	nop
   1d79c:	20023800 	.word	0x20023800
   1d7a0:	20023804 	.word	0x20023804

0001d7a4 <cloud_event_handler>:
{
   1d7a4:	b510      	push	{r4, lr}
   1d7a6:	460c      	mov	r4, r1
	switch (evt->type) {
   1d7a8:	7809      	ldrb	r1, [r1, #0]
   1d7aa:	2908      	cmp	r1, #8
   1d7ac:	d864      	bhi.n	1d878 <cloud_event_handler+0xd4>
   1d7ae:	e8df f001 	tbb	[pc, r1]
   1d7b2:	1c05      	.short	0x1c05
   1d7b4:	28262110 	.word	0x28262110
   1d7b8:	5430      	.short	0x5430
   1d7ba:	5b          	.byte	0x5b
   1d7bb:	00          	.byte	0x00
		printk("CLOUD_EVT_CONNECTED\n");
   1d7bc:	4830      	ldr	r0, [pc, #192]	; (1d880 <cloud_event_handler+0xdc>)
   1d7be:	f021 f8b5 	bl	3e92c <printk>
		k_delayed_work_cancel(&cloud_reboot_work);
   1d7c2:	4830      	ldr	r0, [pc, #192]	; (1d884 <cloud_event_handler+0xe0>)
   1d7c4:	f01d f9ec 	bl	3aba0 <k_delayed_work_cancel>
		ui_led_set_pattern(UI_CLOUD_CONNECTED);
   1d7c8:	2008      	movs	r0, #8
}
   1d7ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ui_led_set_pattern(UI_LTE_DISCONNECTED);
   1d7ce:	f000 ba59 	b.w	1dc84 <ui_led_set_pattern>
		printk("CLOUD_EVT_READY\n");
   1d7d2:	482d      	ldr	r0, [pc, #180]	; (1d888 <cloud_event_handler+0xe4>)
   1d7d4:	f021 f8aa 	bl	3e92c <printk>
		ui_led_set_pattern(UI_CLOUD_CONNECTED);
   1d7d8:	2008      	movs	r0, #8
   1d7da:	f000 fa53 	bl	1dc84 <ui_led_set_pattern>
		boot_write_img_confirmed();
   1d7de:	f021 f926 	bl	3ea2e <boot_write_img_confirmed>
}
   1d7e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		sensors_start();
   1d7e6:	f7ff bf77 	b.w	1d6d8 <sensors_start>
		printk("CLOUD_EVT_DISCONNECTED\n");
   1d7ea:	4828      	ldr	r0, [pc, #160]	; (1d88c <cloud_event_handler+0xe8>)
   1d7ec:	f021 f89e 	bl	3e92c <printk>
		ui_led_set_pattern(UI_LTE_DISCONNECTED);
   1d7f0:	2000      	movs	r0, #0
   1d7f2:	e7ea      	b.n	1d7ca <cloud_event_handler+0x26>
		printk("CLOUD_EVT_ERROR\n");
   1d7f4:	4826      	ldr	r0, [pc, #152]	; (1d890 <cloud_event_handler+0xec>)
}
   1d7f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("CLOUD_EVT_DATA_SENT\n");
   1d7fa:	f021 b897 	b.w	3e92c <printk>
   1d7fe:	4825      	ldr	r0, [pc, #148]	; (1d894 <cloud_event_handler+0xf0>)
   1d800:	e7f9      	b.n	1d7f6 <cloud_event_handler+0x52>
		printk("CLOUD_EVT_DATA_RECEIVED\n");
   1d802:	4825      	ldr	r0, [pc, #148]	; (1d898 <cloud_event_handler+0xf4>)
   1d804:	f021 f892 	bl	3e92c <printk>
		cloud_decode_command(evt->data.msg.buf);
   1d808:	6860      	ldr	r0, [r4, #4]
}
   1d80a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		cloud_decode_command(evt->data.msg.buf);
   1d80e:	f000 bbf5 	b.w	1dffc <cloud_decode_command>
		printk("CLOUD_EVT_PAIR_REQUEST\n");
   1d812:	4822      	ldr	r0, [pc, #136]	; (1d89c <cloud_event_handler+0xf8>)
   1d814:	f021 f88a 	bl	3e92c <printk>
	if (atomic_get(&association_requested) == 0)
   1d818:	4b21      	ldr	r3, [pc, #132]	; (1d8a0 <cloud_event_handler+0xfc>)
   1d81a:	4618      	mov	r0, r3
   1d81c:	f020 fc1c 	bl	3e058 <atomic_get>
   1d820:	bb60      	cbnz	r0, 1d87c <cloud_event_handler+0xd8>
   1d822:	2201      	movs	r2, #1
   1d824:	e8d3 1fef 	ldaex	r1, [r3]
   1d828:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1d82c:	2800      	cmp	r0, #0
   1d82e:	d1f9      	bne.n	1d824 <cloud_event_handler+0x80>
		ui_led_set_pattern(UI_CLOUD_PAIRING);
   1d830:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   1d834:	f000 fa26 	bl	1dc84 <ui_led_set_pattern>
		printk("Add device to cloud account.\n");
   1d838:	481a      	ldr	r0, [pc, #104]	; (1d8a4 <cloud_event_handler+0x100>)
   1d83a:	f021 f877 	bl	3e92c <printk>
		if (k_delayed_work_submit(&association_retry_work,
   1d83e:	f247 5130 	movw	r1, #30000	; 0x7530
   1d842:	4819      	ldr	r0, [pc, #100]	; (1d8a8 <cloud_event_handler+0x104>)
   1d844:	f7ff fc70 	bl	1d128 <k_delayed_work_submit>
   1d848:	b108      	cbz	r0, 1d84e <cloud_event_handler+0xaa>
			printk("A manual reboot may be required after "
   1d84a:	4818      	ldr	r0, [pc, #96]	; (1d8ac <cloud_event_handler+0x108>)
   1d84c:	e7d3      	b.n	1d7f6 <cloud_event_handler+0x52>
			printk("Waiting for cloud association, retrying in %d seconds...\n",
   1d84e:	211e      	movs	r1, #30
   1d850:	4817      	ldr	r0, [pc, #92]	; (1d8b0 <cloud_event_handler+0x10c>)
}
   1d852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Unknown cloud event type: %d\n", evt->type);
   1d856:	f021 b869 	b.w	3e92c <printk>
		printk("CLOUD_EVT_PAIR_DONE\n");
   1d85a:	4816      	ldr	r0, [pc, #88]	; (1d8b4 <cloud_event_handler+0x110>)
   1d85c:	f021 f866 	bl	3e92c <printk>
}
   1d860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		on_pairing_done();
   1d864:	f7ff bf8e 	b.w	1d784 <on_pairing_done>
		printk("CLOUD_EVT_FOTA_DONE\n");
   1d868:	4813      	ldr	r0, [pc, #76]	; (1d8b8 <cloud_event_handler+0x114>)
   1d86a:	f021 f85f 	bl	3e92c <printk>
}
   1d86e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		sys_reboot(SYS_REBOOT_COLD);
   1d872:	2001      	movs	r0, #1
   1d874:	f001 beb4 	b.w	1f5e0 <sys_reboot>
		printk("Unknown cloud event type: %d\n", evt->type);
   1d878:	4810      	ldr	r0, [pc, #64]	; (1d8bc <cloud_event_handler+0x118>)
   1d87a:	e7ea      	b.n	1d852 <cloud_event_handler+0xae>
}
   1d87c:	bd10      	pop	{r4, pc}
   1d87e:	bf00      	nop
   1d880:	000442f6 	.word	0x000442f6
   1d884:	20023828 	.word	0x20023828
   1d888:	0004430b 	.word	0x0004430b
   1d88c:	0004431c 	.word	0x0004431c
   1d890:	00044334 	.word	0x00044334
   1d894:	00044345 	.word	0x00044345
   1d898:	0004435a 	.word	0x0004435a
   1d89c:	00044373 	.word	0x00044373
   1d8a0:	20023800 	.word	0x20023800
   1d8a4:	0004438b 	.word	0x0004438b
   1d8a8:	20023804 	.word	0x20023804
   1d8ac:	000443a9 	.word	0x000443a9
   1d8b0:	000443f2 	.word	0x000443f2
   1d8b4:	0004442c 	.word	0x0004442c
   1d8b8:	00044441 	.word	0x00044441
   1d8bc:	00044456 	.word	0x00044456

0001d8c0 <handle_bsdlib_init_ret>:
#endif /* defined(CONFIG_USE_UI_MODULE) */

void handle_bsdlib_init_ret(void)
{
   1d8c0:	b508      	push	{r3, lr}
	#if defined(CONFIG_BSD_LIBRARY)
	int ret = bsdlib_get_init_ret();
   1d8c2:	f004 ff43 	bl	2274c <bsdlib_get_init_ret>

	/* Handle return values relating to modem firmware update */
	switch (ret) {
   1d8c6:	4b0e      	ldr	r3, [pc, #56]	; (1d900 <handle_bsdlib_init_ret+0x40>)
	int ret = bsdlib_get_init_ret();
   1d8c8:	4601      	mov	r1, r0
	switch (ret) {
   1d8ca:	4298      	cmp	r0, r3
   1d8cc:	dc06      	bgt.n	1d8dc <handle_bsdlib_init_ret+0x1c>
   1d8ce:	3b01      	subs	r3, #1
   1d8d0:	4298      	cmp	r0, r3
   1d8d2:	da0e      	bge.n	1d8f2 <handle_bsdlib_init_ret+0x32>
   1d8d4:	f1b0 6f88 	cmp.w	r0, #71303168	; 0x4400000
   1d8d8:	dc0f      	bgt.n	1d8fa <handle_bsdlib_init_ret+0x3a>
		break;
	default:
		break;
	}
	#endif /* CONFIG_BSD_LIBRARY */
}
   1d8da:	bd08      	pop	{r3, pc}
	switch (ret) {
   1d8dc:	4b09      	ldr	r3, [pc, #36]	; (1d904 <handle_bsdlib_init_ret+0x44>)
   1d8de:	4298      	cmp	r0, r3
   1d8e0:	d1fb      	bne.n	1d8da <handle_bsdlib_init_ret+0x1a>
		printk("MODEM UPDATE OK. Will run new firmware\n");
   1d8e2:	4809      	ldr	r0, [pc, #36]	; (1d908 <handle_bsdlib_init_ret+0x48>)
   1d8e4:	f021 f822 	bl	3e92c <printk>
}
   1d8e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sys_reboot(SYS_REBOOT_COLD);
   1d8ec:	2001      	movs	r0, #1
   1d8ee:	f001 be77 	b.w	1f5e0 <sys_reboot>
		printk("MODEM UPDATE ERROR %d. Will run old firmware\n", ret);
   1d8f2:	4806      	ldr	r0, [pc, #24]	; (1d90c <handle_bsdlib_init_ret+0x4c>)
		printk("MODEM UPDATE FATAL ERROR %d. Modem failiure\n", ret);
   1d8f4:	f021 f81a 	bl	3e92c <printk>
   1d8f8:	e7f6      	b.n	1d8e8 <handle_bsdlib_init_ret+0x28>
   1d8fa:	4805      	ldr	r0, [pc, #20]	; (1d910 <handle_bsdlib_init_ret+0x50>)
   1d8fc:	e7fa      	b.n	1d8f4 <handle_bsdlib_init_ret+0x34>
   1d8fe:	bf00      	nop
   1d900:	04400004 	.word	0x04400004
   1d904:	05500001 	.word	0x05500001
   1d908:	00044505 	.word	0x00044505
   1d90c:	0004452d 	.word	0x0004452d
   1d910:	0004455b 	.word	0x0004455b

0001d914 <main>:

void main(void)
{
   1d914:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	int ret;

	printk("Asset tracker started\n");
   1d918:	4881      	ldr	r0, [pc, #516]	; (1db20 <main+0x20c>)
   1d91a:	f021 f807 	bl	3e92c <printk>

	handle_bsdlib_init_ret();
   1d91e:	f7ff ffcf 	bl	1d8c0 <handle_bsdlib_init_ret>

	cloud_backend = cloud_get_binding("NRF_CLOUD");
   1d922:	4880      	ldr	r0, [pc, #512]	; (1db24 <main+0x210>)
   1d924:	f006 fd1c 	bl	24360 <cloud_get_binding>
   1d928:	4d7f      	ldr	r5, [pc, #508]	; (1db28 <main+0x214>)
   1d92a:	6028      	str	r0, [r5, #0]
	__ASSERT(cloud_backend != NULL, "nRF Cloud backend not found");
   1d92c:	b970      	cbnz	r0, 1d94c <main+0x38>
   1d92e:	497f      	ldr	r1, [pc, #508]	; (1db2c <main+0x218>)
   1d930:	f240 4325 	movw	r3, #1061	; 0x425
   1d934:	4a7e      	ldr	r2, [pc, #504]	; (1db30 <main+0x21c>)
   1d936:	487f      	ldr	r0, [pc, #508]	; (1db34 <main+0x220>)
   1d938:	f020 fff8 	bl	3e92c <printk>
   1d93c:	487e      	ldr	r0, [pc, #504]	; (1db38 <main+0x224>)
   1d93e:	f020 fff5 	bl	3e92c <printk>
   1d942:	f240 4125 	movw	r1, #1061	; 0x425
   1d946:	487a      	ldr	r0, [pc, #488]	; (1db30 <main+0x21c>)
   1d948:	f020 fffd 	bl	3e946 <assert_post_action>

	ret = cloud_init(cloud_backend, cloud_event_handler);
   1d94c:	6828      	ldr	r0, [r5, #0]
	if (backend == NULL
   1d94e:	2800      	cmp	r0, #0
   1d950:	f000 80a8 	beq.w	1daa4 <main+0x190>
	    || backend->api == NULL
   1d954:	6803      	ldr	r3, [r0, #0]
   1d956:	2b00      	cmp	r3, #0
   1d958:	f000 80a4 	beq.w	1daa4 <main+0x190>
	    || backend->api->init == NULL) {
   1d95c:	681b      	ldr	r3, [r3, #0]
   1d95e:	2b00      	cmp	r3, #0
   1d960:	f000 80a0 	beq.w	1daa4 <main+0x190>
	return backend->api->init(backend, handler);
   1d964:	4975      	ldr	r1, [pc, #468]	; (1db3c <main+0x228>)
   1d966:	4798      	blx	r3
	if (ret) {
   1d968:	4604      	mov	r4, r0
   1d96a:	b130      	cbz	r0, 1d97a <main+0x66>
		printk("Cloud backend could not be initialized, error: %d\n",
   1d96c:	4874      	ldr	r0, [pc, #464]	; (1db40 <main+0x22c>)
   1d96e:	4621      	mov	r1, r4
   1d970:	f020 ffdc 	bl	3e92c <printk>
			ret);
		cloud_error_handler(ret);
   1d974:	4620      	mov	r0, r4
   1d976:	f020 fb77 	bl	3e068 <cloud_error_handler>
	}

#if defined(CONFIG_USE_UI_MODULE)
	ui_init(ui_evt_handler);
   1d97a:	4872      	ldr	r0, [pc, #456]	; (1db44 <main+0x230>)
   1d97c:	f000 f988 	bl	1dc90 <ui_init>
#endif

	ret = cloud_decode_init(cloud_cmd_handler);
   1d980:	4871      	ldr	r0, [pc, #452]	; (1db48 <main+0x234>)
   1d982:	f000 fb6d 	bl	1e060 <cloud_decode_init>
	if (ret) {
   1d986:	4604      	mov	r4, r0
   1d988:	b130      	cbz	r0, 1d998 <main+0x84>
		printk("Cloud command decoder could not be initialized, error: %d\n", ret);
   1d98a:	4601      	mov	r1, r0
   1d98c:	486f      	ldr	r0, [pc, #444]	; (1db4c <main+0x238>)
   1d98e:	f020 ffcd 	bl	3e92c <printk>
		cloud_error_handler(ret);
   1d992:	4620      	mov	r0, r4
   1d994:	f020 fb68 	bl	3e068 <cloud_error_handler>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1d998:	2400      	movs	r4, #0
   1d99a:	4b6d      	ldr	r3, [pc, #436]	; (1db50 <main+0x23c>)
   1d99c:	4a6d      	ldr	r2, [pc, #436]	; (1db54 <main+0x240>)
   1d99e:	601c      	str	r4, [r3, #0]
   1d9a0:	e9c3 2401 	strd	r2, r4, [r3, #4]
   1d9a4:	4b6c      	ldr	r3, [pc, #432]	; (1db58 <main+0x244>)
   1d9a6:	4a6d      	ldr	r2, [pc, #436]	; (1db5c <main+0x248>)
	k_delayed_work_init(&send_env_data_work, send_env_data_work_fn);
   1d9a8:	496d      	ldr	r1, [pc, #436]	; (1db60 <main+0x24c>)
   1d9aa:	486e      	ldr	r0, [pc, #440]	; (1db64 <main+0x250>)
   1d9ac:	e9c3 2401 	strd	r2, r4, [r3, #4]
   1d9b0:	601c      	str	r4, [r3, #0]
   1d9b2:	f023 f943 	bl	40c3c <k_delayed_work_init>
	k_delayed_work_init(&long_press_button_work, long_press_handler);
   1d9b6:	496c      	ldr	r1, [pc, #432]	; (1db68 <main+0x254>)
   1d9b8:	486c      	ldr	r0, [pc, #432]	; (1db6c <main+0x258>)
   1d9ba:	f023 f93f 	bl	40c3c <k_delayed_work_init>
	k_delayed_work_init(&cloud_reboot_work, cloud_reboot_handler);
   1d9be:	496c      	ldr	r1, [pc, #432]	; (1db70 <main+0x25c>)
   1d9c0:	486c      	ldr	r0, [pc, #432]	; (1db74 <main+0x260>)
   1d9c2:	f023 f93b 	bl	40c3c <k_delayed_work_init>
   1d9c6:	4b6c      	ldr	r3, [pc, #432]	; (1db78 <main+0x264>)
   1d9c8:	4a6c      	ldr	r2, [pc, #432]	; (1db7c <main+0x268>)
	k_delayed_work_init(&association_retry_work, association_retry);
   1d9ca:	496d      	ldr	r1, [pc, #436]	; (1db80 <main+0x26c>)
   1d9cc:	486d      	ldr	r0, [pc, #436]	; (1db84 <main+0x270>)
   1d9ce:	e9c3 2401 	strd	r2, r4, [r3, #4]
   1d9d2:	601c      	str	r4, [r3, #0]
   1d9d4:	f023 f932 	bl	40c3c <k_delayed_work_init>
   1d9d8:	4b6b      	ldr	r3, [pc, #428]	; (1db88 <main+0x274>)
   1d9da:	4a6c      	ldr	r2, [pc, #432]	; (1db8c <main+0x278>)
		printk("Connecting to LTE network. ");
   1d9dc:	486c      	ldr	r0, [pc, #432]	; (1db90 <main+0x27c>)
   1d9de:	601c      	str	r4, [r3, #0]
   1d9e0:	e9c3 2401 	strd	r2, r4, [r3, #4]
   1d9e4:	f020 ffa2 	bl	3e92c <printk>
		printk("This may take several minutes.\n");
   1d9e8:	486a      	ldr	r0, [pc, #424]	; (1db94 <main+0x280>)
   1d9ea:	f020 ff9f 	bl	3e92c <printk>
		ui_led_set_pattern(UI_LTE_CONNECTING);
   1d9ee:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1d9f2:	f000 f947 	bl	1dc84 <ui_led_set_pattern>
		err = lte_lc_init_and_connect();
   1d9f6:	f022 ffe1 	bl	409bc <lte_lc_init_and_connect>
		if (err) {
   1d9fa:	b138      	cbz	r0, 1da0c <main+0xf8>
			printk("LTE link could not be established.\n");
   1d9fc:	4866      	ldr	r0, [pc, #408]	; (1db98 <main+0x284>)
   1d9fe:	f020 ff95 	bl	3e92c <printk>
	LOG_PANIC();
   1da02:	f020 fb27 	bl	3e054 <log_panic>
	sys_reboot(0);
   1da06:	4620      	mov	r0, r4
   1da08:	f001 fdea 	bl	1f5e0 <sys_reboot>
		printk("Connected to LTE network\n");
   1da0c:	4863      	ldr	r0, [pc, #396]	; (1db9c <main+0x288>)
   1da0e:	f020 ff8d 	bl	3e92c <printk>
		ui_led_set_pattern(UI_LTE_CONNECTED);
   1da12:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1da16:	f000 f935 	bl	1dc84 <ui_led_set_pattern>
	}

	work_init();
	modem_configure();
connect:
	ret = cloud_connect(cloud_backend);
   1da1a:	6828      	ldr	r0, [r5, #0]
   1da1c:	f020 fb08 	bl	3e030 <cloud_connect>
	if (ret) {
   1da20:	4604      	mov	r4, r0
   1da22:	2800      	cmp	r0, #0
   1da24:	d041      	beq.n	1daaa <main+0x196>
		printk("cloud_connect failed: %d\n", ret);
   1da26:	4601      	mov	r1, r0
   1da28:	485d      	ldr	r0, [pc, #372]	; (1dba0 <main+0x28c>)
   1da2a:	f020 ff7f 	bl	3e92c <printk>
		cloud_error_handler(ret);
   1da2e:	4620      	mov	r0, r4
   1da30:	f020 fb1a 	bl	3e068 <cloud_error_handler>
	} else {
		k_delayed_work_submit(&cloud_reboot_work,
				      CLOUD_CONNACK_WAIT_DURATION);
	}

	struct pollfd fds[] = {
   1da34:	2300      	movs	r3, #0
   1da36:	f8ad 3006 	strh.w	r3, [sp, #6]
		{
			.fd = cloud_backend->config->socket,
   1da3a:	682b      	ldr	r3, [r5, #0]
	return socket_ops->connect(sock, addr, addrlen);
}

static inline int poll(struct pollfd *fds, int nfds, int timeout)
{
	__ASSERT_NO_MSG(socket_ops);
   1da3c:	4e59      	ldr	r6, [pc, #356]	; (1dba4 <main+0x290>)
   1da3e:	685b      	ldr	r3, [r3, #4]
   1da40:	4637      	mov	r7, r6
	struct pollfd fds[] = {
   1da42:	689b      	ldr	r3, [r3, #8]
   1da44:	4c58      	ldr	r4, [pc, #352]	; (1dba8 <main+0x294>)
   1da46:	9300      	str	r3, [sp, #0]
   1da48:	2301      	movs	r3, #1
   1da4a:	f8ad 3004 	strh.w	r3, [sp, #4]
   1da4e:	6833      	ldr	r3, [r6, #0]
   1da50:	b94b      	cbnz	r3, 1da66 <main+0x152>
   1da52:	4956      	ldr	r1, [pc, #344]	; (1dbac <main+0x298>)
   1da54:	4837      	ldr	r0, [pc, #220]	; (1db34 <main+0x220>)
   1da56:	234d      	movs	r3, #77	; 0x4d
   1da58:	4622      	mov	r2, r4
   1da5a:	f020 ff67 	bl	3e92c <printk>
   1da5e:	214d      	movs	r1, #77	; 0x4d
   1da60:	4620      	mov	r0, r4
   1da62:	f020 ff70 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->poll);
   1da66:	683b      	ldr	r3, [r7, #0]
   1da68:	699b      	ldr	r3, [r3, #24]
   1da6a:	b94b      	cbnz	r3, 1da80 <main+0x16c>
   1da6c:	4950      	ldr	r1, [pc, #320]	; (1dbb0 <main+0x29c>)
   1da6e:	4831      	ldr	r0, [pc, #196]	; (1db34 <main+0x220>)
   1da70:	234e      	movs	r3, #78	; 0x4e
   1da72:	4622      	mov	r2, r4
   1da74:	f020 ff5a 	bl	3e92c <printk>
   1da78:	214e      	movs	r1, #78	; 0x4e
   1da7a:	4620      	mov	r0, r4
   1da7c:	f020 ff63 	bl	3e946 <assert_post_action>

	return socket_ops->poll(fds, nfds, timeout);
   1da80:	683b      	ldr	r3, [r7, #0]
   1da82:	4a4c      	ldr	r2, [pc, #304]	; (1dbb4 <main+0x2a0>)
   1da84:	699b      	ldr	r3, [r3, #24]
   1da86:	2101      	movs	r1, #1
   1da88:	4668      	mov	r0, sp
   1da8a:	4798      	blx	r3

	while (true) {
		ret = poll(fds, ARRAY_SIZE(fds),
			K_SECONDS(CONFIG_MQTT_KEEPALIVE));

		if (ret < 0) {
   1da8c:	f1b0 0800 	subs.w	r8, r0, #0
   1da90:	da11      	bge.n	1dab6 <main+0x1a2>
			printk("poll() returned an error: %d\n", ret);
   1da92:	4641      	mov	r1, r8
   1da94:	4848      	ldr	r0, [pc, #288]	; (1dbb8 <main+0x2a4>)
   1da96:	f020 ff49 	bl	3e92c <printk>
			error_handler(ERROR_CLOUD, ret);
   1da9a:	4641      	mov	r1, r8
   1da9c:	2000      	movs	r0, #0
   1da9e:	f7ff fc87 	bl	1d3b0 <error_handler>
			continue;
   1daa2:	e7d4      	b.n	1da4e <main+0x13a>
		return -ENOTSUP;
   1daa4:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1daa8:	e760      	b.n	1d96c <main+0x58>
		k_delayed_work_submit(&cloud_reboot_work,
   1daaa:	f247 5130 	movw	r1, #30000	; 0x7530
   1daae:	4831      	ldr	r0, [pc, #196]	; (1db74 <main+0x260>)
   1dab0:	f7ff fb3a 	bl	1d128 <k_delayed_work_submit>
   1dab4:	e7be      	b.n	1da34 <main+0x120>
		}

		if (ret == 0) {
   1dab6:	d10a      	bne.n	1dace <main+0x1ba>
			cloud_ping(cloud_backend);
   1dab8:	6828      	ldr	r0, [r5, #0]
 *
 * @return 0 or a negative error code indicating reason of failure.
 */
static inline int cloud_ping(const struct cloud_backend *const backend)
{
	if (backend == NULL || backend->api == NULL) {
   1daba:	2800      	cmp	r0, #0
   1dabc:	d0c7      	beq.n	1da4e <main+0x13a>
   1dabe:	6803      	ldr	r3, [r0, #0]
   1dac0:	2b00      	cmp	r3, #0
   1dac2:	d0c4      	beq.n	1da4e <main+0x13a>
		return -ENOTSUP;
	}

	/* Ping will only be sent if the backend has implemented it. */
	if (backend->api->ping != NULL) {
   1dac4:	695b      	ldr	r3, [r3, #20]
   1dac6:	2b00      	cmp	r3, #0
   1dac8:	d0c1      	beq.n	1da4e <main+0x13a>
		return backend->api->ping(backend);
   1daca:	4798      	blx	r3
   1dacc:	e7bf      	b.n	1da4e <main+0x13a>
			continue;
		}

		if ((fds[0].revents & POLLIN) == POLLIN) {
   1dace:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1dad2:	07da      	lsls	r2, r3, #31
   1dad4:	d506      	bpl.n	1dae4 <main+0x1d0>
			cloud_input(cloud_backend);
   1dad6:	6828      	ldr	r0, [r5, #0]
 *
 * @return 0 or a negative error code indicating reason of failure.
 */
static inline int cloud_input(const struct cloud_backend *const backend)
{
	if (backend == NULL
   1dad8:	b120      	cbz	r0, 1dae4 <main+0x1d0>
	    || backend->api == NULL
   1dada:	6803      	ldr	r3, [r0, #0]
   1dadc:	b113      	cbz	r3, 1dae4 <main+0x1d0>
	    || backend->api->input == NULL) {
   1dade:	699b      	ldr	r3, [r3, #24]
   1dae0:	b103      	cbz	r3, 1dae4 <main+0x1d0>
		return -ENOTSUP;
	}

	return backend->api->input(backend);
   1dae2:	4798      	blx	r3
		}

		if ((fds[0].revents & POLLNVAL) == POLLNVAL) {
   1dae4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1dae8:	f013 0920 	ands.w	r9, r3, #32
   1daec:	d00a      	beq.n	1db04 <main+0x1f0>
			printk("Socket error: POLLNVAL\n");
   1daee:	4833      	ldr	r0, [pc, #204]	; (1dbbc <main+0x2a8>)
   1daf0:	f020 ff1c 	bl	3e92c <printk>
			error_handler(ERROR_CLOUD, -EIO);
   1daf4:	f06f 0104 	mvn.w	r1, #4
   1daf8:	2000      	movs	r0, #0
			return;
		}

		if ((fds[0].revents & POLLERR) == POLLERR) {
			printk("Socket error: POLLERR\n");
			error_handler(ERROR_CLOUD, -EIO);
   1dafa:	f7ff fc59 	bl	1d3b0 <error_handler>
		}
	}

	cloud_disconnect(cloud_backend);
	goto connect;
}
   1dafe:	b003      	add	sp, #12
   1db00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if ((fds[0].revents & POLLHUP) == POLLHUP) {
   1db04:	f013 0810 	ands.w	r8, r3, #16
   1db08:	d001      	beq.n	1db0e <main+0x1fa>
			printk("Socket error: POLLHUP\n");
   1db0a:	482d      	ldr	r0, [pc, #180]	; (1dbc0 <main+0x2ac>)
   1db0c:	e7f0      	b.n	1daf0 <main+0x1dc>
		if ((fds[0].revents & POLLERR) == POLLERR) {
   1db0e:	071b      	lsls	r3, r3, #28
   1db10:	d59d      	bpl.n	1da4e <main+0x13a>
			printk("Socket error: POLLERR\n");
   1db12:	482c      	ldr	r0, [pc, #176]	; (1dbc4 <main+0x2b0>)
   1db14:	f020 ff0a 	bl	3e92c <printk>
			error_handler(ERROR_CLOUD, -EIO);
   1db18:	f06f 0104 	mvn.w	r1, #4
   1db1c:	4640      	mov	r0, r8
   1db1e:	e7ec      	b.n	1dafa <main+0x1e6>
   1db20:	000445e9 	.word	0x000445e9
   1db24:	00044600 	.word	0x00044600
   1db28:	20023824 	.word	0x20023824
   1db2c:	00044626 	.word	0x00044626
   1db30:	0004460a 	.word	0x0004460a
   1db34:	00044643 	.word	0x00044643
   1db38:	00044660 	.word	0x00044660
   1db3c:	0001d7a5 	.word	0x0001d7a5
   1db40:	0004467e 	.word	0x0004467e
   1db44:	0001d265 	.word	0x0001d265
   1db48:	0003e071 	.word	0x0003e071
   1db4c:	000446b1 	.word	0x000446b1
   1db50:	200238d4 	.word	0x200238d4
   1db54:	0001d5c9 	.word	0x0001d5c9
   1db58:	200238c8 	.word	0x200238c8
   1db5c:	0001d5bd 	.word	0x0001d5bd
   1db60:	0001d5d5 	.word	0x0001d5d5
   1db64:	200238a8 	.word	0x200238a8
   1db68:	0001d1ed 	.word	0x0001d1ed
   1db6c:	20023878 	.word	0x20023878
   1db70:	0003e05f 	.word	0x0003e05f
   1db74:	20023828 	.word	0x20023828
   1db78:	20023848 	.word	0x20023848
   1db7c:	0001d4a1 	.word	0x0001d4a1
   1db80:	0001d139 	.word	0x0001d139
   1db84:	20023804 	.word	0x20023804
   1db88:	20023898 	.word	0x20023898
   1db8c:	0001d54d 	.word	0x0001d54d
   1db90:	000446ec 	.word	0x000446ec
   1db94:	00044cab 	.word	0x00044cab
   1db98:	00044708 	.word	0x00044708
   1db9c:	0004472c 	.word	0x0004472c
   1dba0:	000441e0 	.word	0x000441e0
   1dba4:	20023990 	.word	0x20023990
   1dba8:	00044746 	.word	0x00044746
   1dbac:	0004476f 	.word	0x0004476f
   1dbb0:	0004477a 	.word	0x0004477a
   1dbb4:	00057e40 	.word	0x00057e40
   1dbb8:	0004478b 	.word	0x0004478b
   1dbbc:	000447a9 	.word	0x000447a9
   1dbc0:	000447c1 	.word	0x000447c1
   1dbc4:	000447d8 	.word	0x000447d8

0001dbc8 <orientation_detector_init>:
	return 0;
}

void orientation_detector_init(struct device *accel_device)
{
	dev = accel_device;
   1dbc8:	4b01      	ldr	r3, [pc, #4]	; (1dbd0 <orientation_detector_init+0x8>)
   1dbca:	6018      	str	r0, [r3, #0]
}
   1dbcc:	4770      	bx	lr
   1dbce:	bf00      	nop
   1dbd0:	200238f4 	.word	0x200238f4

0001dbd4 <button_handler>:
}
#endif /* CONFIG_UI_LED_USE_PWM */

/**@brief Callback for button events from the DK buttons and LEDs library. */
static void button_handler(u32_t button_states, u32_t has_changed)
{
   1dbd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1dbd6:	4605      	mov	r5, r0
   1dbd8:	460c      	mov	r4, r1
				break;
			}
		}

		/* Button number has been stored, remove from bitmask. */
		has_changed &= ~(1UL << (btn_num - 1));
   1dbda:	2601      	movs	r6, #1
		evt.button = btn_num;
		evt.type = (button_states & BIT(btn_num - 1))
				? UI_EVT_BUTTON_ACTIVE
				: UI_EVT_BUTTON_INACTIVE;

		callback(evt);
   1dbdc:	4f11      	ldr	r7, [pc, #68]	; (1dc24 <button_handler+0x50>)
	while (has_changed) {
   1dbde:	b90c      	cbnz	r4, 1dbe4 <button_handler+0x10>
	}
}
   1dbe0:	b003      	add	sp, #12
   1dbe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dbe4:	2300      	movs	r3, #0
			if (has_changed & BIT(i)) {
   1dbe6:	1c59      	adds	r1, r3, #1
   1dbe8:	fa24 f303 	lsr.w	r3, r4, r3
   1dbec:	f013 0001 	ands.w	r0, r3, #1
   1dbf0:	b2ca      	uxtb	r2, r1
   1dbf2:	d103      	bne.n	1dbfc <button_handler+0x28>
		for (u8_t i = 0; i < 32; i++) {
   1dbf4:	2920      	cmp	r1, #32
   1dbf6:	460b      	mov	r3, r1
   1dbf8:	d1f5      	bne.n	1dbe6 <button_handler+0x12>
		btn_num = 0;
   1dbfa:	4602      	mov	r2, r0
		has_changed &= ~(1UL << (btn_num - 1));
   1dbfc:	1e53      	subs	r3, r2, #1
   1dbfe:	fa06 f103 	lsl.w	r1, r6, r3
				? UI_EVT_BUTTON_ACTIVE
   1dc02:	fa25 f303 	lsr.w	r3, r5, r3
				: UI_EVT_BUTTON_INACTIVE;
   1dc06:	43db      	mvns	r3, r3
   1dc08:	f003 0301 	and.w	r3, r3, #1
		evt.button = btn_num;
   1dc0c:	9201      	str	r2, [sp, #4]
				: UI_EVT_BUTTON_INACTIVE;
   1dc0e:	f88d 3000 	strb.w	r3, [sp]
		callback(evt);
   1dc12:	aa02      	add	r2, sp, #8
		has_changed &= ~(1UL << (btn_num - 1));
   1dc14:	ea24 0401 	bic.w	r4, r4, r1
		callback(evt);
   1dc18:	683b      	ldr	r3, [r7, #0]
   1dc1a:	e912 0003 	ldmdb	r2, {r0, r1}
   1dc1e:	4798      	blx	r3
   1dc20:	e7dd      	b.n	1dbde <button_handler+0xa>
   1dc22:	bf00      	nop
   1dc24:	200238f8 	.word	0x200238f8

0001dc28 <leds_update>:
	led_on_mask = UI_LED_GET_ON(current_led_state);
   1dc28:	4b11      	ldr	r3, [pc, #68]	; (1dc70 <leds_update+0x48>)
{
   1dc2a:	b570      	push	{r4, r5, r6, lr}
	led_on_mask = UI_LED_GET_ON(current_led_state);
   1dc2c:	881c      	ldrh	r4, [r3, #0]
	led_on = !led_on;
   1dc2e:	4b11      	ldr	r3, [pc, #68]	; (1dc74 <leds_update+0x4c>)
{
   1dc30:	4606      	mov	r6, r0
	led_on = !led_on;
   1dc32:	781a      	ldrb	r2, [r3, #0]
   1dc34:	f082 0201 	eor.w	r2, r2, #1
   1dc38:	701a      	strb	r2, [r3, #0]
	if (led_on) {
   1dc3a:	f344 2307 	sbfx	r3, r4, #8, #8
   1dc3e:	b264      	sxtb	r4, r4
   1dc40:	b192      	cbz	r2, 1dc68 <leds_update+0x40>
		led_on_mask |= UI_LED_GET_BLINK(current_led_state);
   1dc42:	431c      	orrs	r4, r3
	if (led_on_mask != current_led_on_mask) {
   1dc44:	4d0c      	ldr	r5, [pc, #48]	; (1dc78 <leds_update+0x50>)
		led_on_mask &= ~UI_LED_GET_BLINK(current_led_state);
   1dc46:	b2e4      	uxtb	r4, r4
	if (led_on_mask != current_led_on_mask) {
   1dc48:	782b      	ldrb	r3, [r5, #0]
   1dc4a:	42a3      	cmp	r3, r4
   1dc4c:	d003      	beq.n	1dc56 <leds_update+0x2e>
		dk_set_leds(led_on_mask);
   1dc4e:	4620      	mov	r0, r4
   1dc50:	f022 fbb2 	bl	403b8 <dk_set_leds>
		current_led_on_mask = led_on_mask;
   1dc54:	702c      	strb	r4, [r5, #0]
	if (work) {
   1dc56:	b156      	cbz	r6, 1dc6e <leds_update+0x46>
}
   1dc58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1dc5c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   1dc60:	4906      	ldr	r1, [pc, #24]	; (1dc7c <leds_update+0x54>)
   1dc62:	4807      	ldr	r0, [pc, #28]	; (1dc80 <leds_update+0x58>)
   1dc64:	f01c bf12 	b.w	3aa8c <k_delayed_work_submit_to_queue>
		led_on_mask &= ~UI_LED_GET_BLINK(current_led_state);
   1dc68:	ea24 0403 	bic.w	r4, r4, r3
   1dc6c:	e7ea      	b.n	1dc44 <leds_update+0x1c>
}
   1dc6e:	bd70      	pop	{r4, r5, r6, pc}
   1dc70:	2002a33c 	.word	0x2002a33c
   1dc74:	2002a34a 	.word	0x2002a34a
   1dc78:	2002a349 	.word	0x2002a349
   1dc7c:	200238fc 	.word	0x200238fc
   1dc80:	2002a25c 	.word	0x2002a25c

0001dc84 <ui_led_set_pattern>:

void ui_led_set_pattern(enum ui_led_pattern state)
{
	current_led_state = state;
   1dc84:	4b01      	ldr	r3, [pc, #4]	; (1dc8c <ui_led_set_pattern+0x8>)
   1dc86:	8018      	strh	r0, [r3, #0]
#ifdef CONFIG_UI_LED_USE_PWM
	ui_led_set_effect(state);
#else
	current_led_state = state;
#endif /* CONFIG_UI_LED_USE_PWM */
}
   1dc88:	4770      	bx	lr
   1dc8a:	bf00      	nop
   1dc8c:	2002a33c 	.word	0x2002a33c

0001dc90 <ui_init>:
	}
#endif
}

int ui_init(ui_callback_t cb)
{
   1dc90:	b538      	push	{r3, r4, r5, lr}
   1dc92:	4605      	mov	r5, r0
	if (err) {
		LOG_ERR("Error when initializing PWM controlled LEDs");
		return err;
	}
#else
	err = dk_leds_init();
   1dc94:	f005 f98e 	bl	22fb4 <dk_leds_init>
	if (err) {
   1dc98:	4604      	mov	r4, r0
   1dc9a:	b180      	cbz	r0, 1dcbe <ui_init+0x2e>
		LOG_ERR("Could not initialize leds, err code: %d\n", err);
   1dc9c:	2301      	movs	r3, #1
   1dc9e:	f04f 0000 	mov.w	r0, #0
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   1dca2:	4a21      	ldr	r2, [pc, #132]	; (1dd28 <ui_init+0x98>)
   1dca4:	f363 0007 	bfi	r0, r3, #0, #8
   1dca8:	4b20      	ldr	r3, [pc, #128]	; (1dd2c <ui_init+0x9c>)
   1dcaa:	4921      	ldr	r1, [pc, #132]	; (1dd30 <ui_init+0xa0>)
   1dcac:	1a9b      	subs	r3, r3, r2
   1dcae:	4622      	mov	r2, r4
   1dcb0:	08db      	lsrs	r3, r3, #3
   1dcb2:	f363 108f 	bfi	r0, r3, #6, #10
	if (cb) {
		callback  = cb;

		err = dk_buttons_init(button_handler);
		if (err) {
			LOG_ERR("Could not initialize buttons, err code: %d\n",
   1dcb6:	f020 fe56 	bl	3e966 <log_string_sync>
		return err;
	}
#endif /* CONFIG_UI_NMOS */

	return err;
}
   1dcba:	4620      	mov	r0, r4
   1dcbc:	bd38      	pop	{r3, r4, r5, pc}
	err = dk_set_leds_state(0x00, DK_ALL_LEDS_MSK);
   1dcbe:	210f      	movs	r1, #15
   1dcc0:	f022 fb70 	bl	403a4 <dk_set_leds_state>
	if (err) {
   1dcc4:	4604      	mov	r4, r0
   1dcc6:	b168      	cbz	r0, 1dce4 <ui_init+0x54>
		LOG_ERR("Could not set leds state, err code: %d\n", err);
   1dcc8:	2301      	movs	r3, #1
   1dcca:	f04f 0000 	mov.w	r0, #0
   1dcce:	4a16      	ldr	r2, [pc, #88]	; (1dd28 <ui_init+0x98>)
   1dcd0:	f363 0007 	bfi	r0, r3, #0, #8
   1dcd4:	4b15      	ldr	r3, [pc, #84]	; (1dd2c <ui_init+0x9c>)
   1dcd6:	4917      	ldr	r1, [pc, #92]	; (1dd34 <ui_init+0xa4>)
   1dcd8:	1a9b      	subs	r3, r3, r2
   1dcda:	08db      	lsrs	r3, r3, #3
   1dcdc:	f363 108f 	bfi	r0, r3, #6, #10
   1dce0:	4622      	mov	r2, r4
   1dce2:	e7e8      	b.n	1dcb6 <ui_init+0x26>
	k_delayed_work_init(&leds_update_work, leds_update);
   1dce4:	4914      	ldr	r1, [pc, #80]	; (1dd38 <ui_init+0xa8>)
   1dce6:	4815      	ldr	r0, [pc, #84]	; (1dd3c <ui_init+0xac>)
   1dce8:	f022 ffa8 	bl	40c3c <k_delayed_work_init>
   1dcec:	4622      	mov	r2, r4
   1dcee:	4913      	ldr	r1, [pc, #76]	; (1dd3c <ui_init+0xac>)
   1dcf0:	4813      	ldr	r0, [pc, #76]	; (1dd40 <ui_init+0xb0>)
   1dcf2:	f01c fecb 	bl	3aa8c <k_delayed_work_submit_to_queue>
	if (cb) {
   1dcf6:	2d00      	cmp	r5, #0
   1dcf8:	d0df      	beq.n	1dcba <ui_init+0x2a>
		callback  = cb;
   1dcfa:	4b12      	ldr	r3, [pc, #72]	; (1dd44 <ui_init+0xb4>)
		err = dk_buttons_init(button_handler);
   1dcfc:	4812      	ldr	r0, [pc, #72]	; (1dd48 <ui_init+0xb8>)
		callback  = cb;
   1dcfe:	601d      	str	r5, [r3, #0]
		err = dk_buttons_init(button_handler);
   1dd00:	f005 f9b2 	bl	23068 <dk_buttons_init>
		if (err) {
   1dd04:	4604      	mov	r4, r0
   1dd06:	2800      	cmp	r0, #0
   1dd08:	d0d7      	beq.n	1dcba <ui_init+0x2a>
			LOG_ERR("Could not initialize buttons, err code: %d\n",
   1dd0a:	2301      	movs	r3, #1
   1dd0c:	f04f 0000 	mov.w	r0, #0
   1dd10:	4a05      	ldr	r2, [pc, #20]	; (1dd28 <ui_init+0x98>)
   1dd12:	f363 0007 	bfi	r0, r3, #0, #8
   1dd16:	4b05      	ldr	r3, [pc, #20]	; (1dd2c <ui_init+0x9c>)
   1dd18:	490c      	ldr	r1, [pc, #48]	; (1dd4c <ui_init+0xbc>)
   1dd1a:	1a9b      	subs	r3, r3, r2
   1dd1c:	08db      	lsrs	r3, r3, #3
   1dd1e:	f363 108f 	bfi	r0, r3, #6, #10
   1dd22:	4622      	mov	r2, r4
   1dd24:	e7c7      	b.n	1dcb6 <ui_init+0x26>
   1dd26:	bf00      	nop
   1dd28:	00042314 	.word	0x00042314
   1dd2c:	00042414 	.word	0x00042414
   1dd30:	00044914 	.word	0x00044914
   1dd34:	0004493d 	.word	0x0004493d
   1dd38:	0001dc29 	.word	0x0001dc29
   1dd3c:	200238fc 	.word	0x200238fc
   1dd40:	2002a25c 	.word	0x2002a25c
   1dd44:	200238f8 	.word	0x200238f8
   1dd48:	0001dbd5 	.word	0x0001dbd5
   1dd4c:	00044965 	.word	0x00044965

0001dd50 <cloud_search_cmd>:

	return 0;
}

static int cloud_search_cmd(cJSON *group_obj, enum cloud_cmd_group group)
{
   1dd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd54:	b087      	sub	sp, #28
	struct cmd *cmd_group;
	cJSON *recipient_obj	= NULL;
	cJSON *channel_obj	= NULL;
	cJSON *type_obj		= NULL;

	if (group_obj == NULL) {
   1dd56:	9002      	str	r0, [sp, #8]
   1dd58:	2800      	cmp	r0, #0
   1dd5a:	d04e      	beq.n	1ddfa <cloud_search_cmd+0xaa>
		return -EINVAL;
	}

	if (group == CLOUD_CMD_GROUP_SET) {
   1dd5c:	b161      	cbz	r1, 1dd78 <cloud_search_cmd+0x28>
		cmd_group = &group_set;
	} else if (group == CLOUD_CMD_GROUP_GET) {
   1dd5e:	2901      	cmp	r1, #1
   1dd60:	d14b      	bne.n	1ddfa <cloud_search_cmd+0xaa>
		cmd_group = &group_get;
   1dd62:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1de08 <cloud_search_cmd+0xb8>
	} else {
		return -EINVAL;
	}

	for (size_t i = 0; i < cmd_group->num_children; i++) {
   1dd66:	2700      	movs	r7, #0
   1dd68:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1dd6c:	42bb      	cmp	r3, r7
   1dd6e:	d806      	bhi.n	1dd7e <cloud_search_cmd+0x2e>
				cloud_command_cb(&cmd_parsed);
			}
		}
	}

	return 0;
   1dd70:	2000      	movs	r0, #0
}
   1dd72:	b007      	add	sp, #28
   1dd74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cmd_group = &group_set;
   1dd78:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1de0c <cloud_search_cmd+0xbc>
   1dd7c:	e7f3      	b.n	1dd66 <cloud_search_cmd+0x16>
		struct cmd rcpt = cmd_group->children[i];
   1dd7e:	f8d8 1008 	ldr.w	r1, [r8, #8]
   1dd82:	013b      	lsls	r3, r7, #4
   1dd84:	18ca      	adds	r2, r1, r3
		recipient_obj = json_object_decode(group_obj,
   1dd86:	9802      	ldr	r0, [sp, #8]
   1dd88:	58c9      	ldr	r1, [r1, r3]
		struct cmd rcpt = cmd_group->children[i];
   1dd8a:	7916      	ldrb	r6, [r2, #4]
   1dd8c:	e9d2 4202 	ldrd	r4, r2, [r2, #8]
   1dd90:	9203      	str	r2, [sp, #12]
		recipient_obj = json_object_decode(group_obj,
   1dd92:	f020 f9a4 	bl	3e0de <json_object_decode>
		if (recipient_obj == NULL) {
   1dd96:	9001      	str	r0, [sp, #4]
   1dd98:	b908      	cbnz	r0, 1dd9e <cloud_search_cmd+0x4e>
	for (size_t i = 0; i < cmd_group->num_children; i++) {
   1dd9a:	3701      	adds	r7, #1
   1dd9c:	e7e4      	b.n	1dd68 <cloud_search_cmd+0x18>
		for (size_t j = 0; j < rcpt.num_children; j++) {
   1dd9e:	f04f 0900 	mov.w	r9, #0
		cmd_parsed.recipient = rcpt.recipient;
   1dda2:	4d17      	ldr	r5, [pc, #92]	; (1de00 <cloud_search_cmd+0xb0>)
   1dda4:	706e      	strb	r6, [r5, #1]
		for (size_t j = 0; j < rcpt.num_children; j++) {
   1dda6:	9b03      	ldr	r3, [sp, #12]
   1dda8:	4599      	cmp	r9, r3
   1ddaa:	d0f6      	beq.n	1dd9a <cloud_search_cmd+0x4a>
			struct cmd chan = rcpt.children[j];
   1ddac:	e9d4 6302 	ldrd	r6, r3, [r4, #8]
			channel_obj = json_object_decode(recipient_obj,
   1ddb0:	6821      	ldr	r1, [r4, #0]
   1ddb2:	9801      	ldr	r0, [sp, #4]
			struct cmd chan = rcpt.children[j];
   1ddb4:	f894 a004 	ldrb.w	sl, [r4, #4]
   1ddb8:	9304      	str	r3, [sp, #16]
			channel_obj = json_object_decode(recipient_obj,
   1ddba:	f020 f990 	bl	3e0de <json_object_decode>
			if (channel_obj == NULL) {
   1ddbe:	4683      	mov	fp, r0
   1ddc0:	b918      	cbnz	r0, 1ddca <cloud_search_cmd+0x7a>
		for (size_t j = 0; j < rcpt.num_children; j++) {
   1ddc2:	f109 0901 	add.w	r9, r9, #1
   1ddc6:	3410      	adds	r4, #16
   1ddc8:	e7ed      	b.n	1dda6 <cloud_search_cmd+0x56>
			cmd_parsed.channel = chan.channel;
   1ddca:	f885 a002 	strb.w	sl, [r5, #2]
			for (size_t k = 0; k < chan.num_children; k++) {
   1ddce:	f04f 0a00 	mov.w	sl, #0
   1ddd2:	9b04      	ldr	r3, [sp, #16]
   1ddd4:	459a      	cmp	sl, r3
   1ddd6:	d0f4      	beq.n	1ddc2 <cloud_search_cmd+0x72>
				struct cmd typ = chan.children[k];
   1ddd8:	7932      	ldrb	r2, [r6, #4]
				type_obj = json_object_decode(channel_obj,
   1ddda:	6831      	ldr	r1, [r6, #0]
   1dddc:	4658      	mov	r0, fp
				struct cmd typ = chan.children[k];
   1ddde:	9205      	str	r2, [sp, #20]
				type_obj = json_object_decode(channel_obj,
   1dde0:	f020 f97d 	bl	3e0de <json_object_decode>
				if (type_obj == NULL) {
   1dde4:	b128      	cbz	r0, 1ddf2 <cloud_search_cmd+0xa2>
				cmd_parsed.type = typ.type;
   1dde6:	9a05      	ldr	r2, [sp, #20]
				cloud_command_cb(&cmd_parsed);
   1dde8:	4b06      	ldr	r3, [pc, #24]	; (1de04 <cloud_search_cmd+0xb4>)
				cmd_parsed.type = typ.type;
   1ddea:	70ea      	strb	r2, [r5, #3]
				cloud_command_cb(&cmd_parsed);
   1ddec:	4804      	ldr	r0, [pc, #16]	; (1de00 <cloud_search_cmd+0xb0>)
   1ddee:	681a      	ldr	r2, [r3, #0]
   1ddf0:	4790      	blx	r2
			for (size_t k = 0; k < chan.num_children; k++) {
   1ddf2:	f10a 0a01 	add.w	sl, sl, #1
   1ddf6:	3610      	adds	r6, #16
   1ddf8:	e7eb      	b.n	1ddd2 <cloud_search_cmd+0x82>
		return -EINVAL;
   1ddfa:	f06f 0015 	mvn.w	r0, #21
   1ddfe:	e7b8      	b.n	1dd72 <cloud_search_cmd+0x22>
   1de00:	20020970 	.word	0x20020970
   1de04:	2002391c 	.word	0x2002391c
   1de08:	20031210 	.word	0x20031210
   1de0c:	20031220 	.word	0x20031220

0001de10 <cloud_encode_data>:
{
   1de10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1de14:	460f      	mov	r7, r1
	if (channel == NULL || channel->data.buf == NULL ||
   1de16:	4606      	mov	r6, r0
   1de18:	2800      	cmp	r0, #0
   1de1a:	d04b      	beq.n	1deb4 <cloud_encode_data+0xa4>
   1de1c:	6843      	ldr	r3, [r0, #4]
   1de1e:	2b00      	cmp	r3, #0
   1de20:	d048      	beq.n	1deb4 <cloud_encode_data+0xa4>
   1de22:	6883      	ldr	r3, [r0, #8]
   1de24:	2b00      	cmp	r3, #0
   1de26:	d045      	beq.n	1deb4 <cloud_encode_data+0xa4>
	    channel->data.len == 0 || output == NULL) {
   1de28:	2900      	cmp	r1, #0
   1de2a:	d043      	beq.n	1deb4 <cloud_encode_data+0xa4>
	cJSON *root_obj = cJSON_CreateObject();
   1de2c:	f004 fc66 	bl	226fc <cJSON_CreateObject>
	if (root_obj == NULL) {
   1de30:	4605      	mov	r5, r0
   1de32:	b930      	cbnz	r0, 1de42 <cloud_encode_data+0x32>
		cJSON_Delete(root_obj);
   1de34:	f004 fb9e 	bl	22574 <cJSON_Delete>
		return -ENOMEM;
   1de38:	f06f 040b 	mvn.w	r4, #11
}
   1de3c:	4620      	mov	r0, r4
   1de3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = json_add_str(root_obj, "appId", channel_type_str[channel->type]);
   1de42:	7832      	ldrb	r2, [r6, #0]
	json_str = cJSON_CreateString(item);
   1de44:	4b1d      	ldr	r3, [pc, #116]	; (1debc <cloud_encode_data+0xac>)
   1de46:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1de4a:	f004 fc33 	bl	226b4 <cJSON_CreateString>
	if (json_str == NULL) {
   1de4e:	4602      	mov	r2, r0
   1de50:	b1b8      	cbz	r0, 1de82 <cloud_encode_data+0x72>
	cJSON_AddItemToObject(parent, str, item);
   1de52:	491b      	ldr	r1, [pc, #108]	; (1dec0 <cloud_encode_data+0xb0>)
   1de54:	4628      	mov	r0, r5
   1de56:	f021 fea3 	bl	3fba0 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   1de5a:	f04f 0800 	mov.w	r8, #0
	json_str = cJSON_CreateString(item);
   1de5e:	6870      	ldr	r0, [r6, #4]
   1de60:	f004 fc28 	bl	226b4 <cJSON_CreateString>
	if (json_str == NULL) {
   1de64:	4602      	mov	r2, r0
   1de66:	b178      	cbz	r0, 1de88 <cloud_encode_data+0x78>
	cJSON_AddItemToObject(parent, str, item);
   1de68:	4916      	ldr	r1, [pc, #88]	; (1dec4 <cloud_encode_data+0xb4>)
   1de6a:	4628      	mov	r0, r5
   1de6c:	f021 fe98 	bl	3fba0 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   1de70:	2400      	movs	r4, #0
	json_str = cJSON_CreateString(item);
   1de72:	4815      	ldr	r0, [pc, #84]	; (1dec8 <cloud_encode_data+0xb8>)
   1de74:	f004 fc1e 	bl	226b4 <cJSON_CreateString>
	ret += json_add_str(root_obj, "data", channel->data.buf);
   1de78:	4444      	add	r4, r8
	if (json_str == NULL) {
   1de7a:	4602      	mov	r2, r0
   1de7c:	b938      	cbnz	r0, 1de8e <cloud_encode_data+0x7e>
		cJSON_Delete(root_obj);
   1de7e:	4628      	mov	r0, r5
   1de80:	e7d8      	b.n	1de34 <cloud_encode_data+0x24>
		return -ENOMEM;
   1de82:	f06f 080b 	mvn.w	r8, #11
   1de86:	e7ea      	b.n	1de5e <cloud_encode_data+0x4e>
   1de88:	f06f 040b 	mvn.w	r4, #11
   1de8c:	e7f1      	b.n	1de72 <cloud_encode_data+0x62>
	cJSON_AddItemToObject(parent, str, item);
   1de8e:	490f      	ldr	r1, [pc, #60]	; (1decc <cloud_encode_data+0xbc>)
   1de90:	4628      	mov	r0, r5
   1de92:	f021 fe85 	bl	3fba0 <cJSON_AddItemToObject>
	if (ret != 0) {
   1de96:	2c00      	cmp	r4, #0
   1de98:	d1f1      	bne.n	1de7e <cloud_encode_data+0x6e>
	buffer = cJSON_PrintUnformatted(root_obj);
   1de9a:	4628      	mov	r0, r5
   1de9c:	f021 fe70 	bl	3fb80 <cJSON_PrintUnformatted>
   1dea0:	4606      	mov	r6, r0
	cJSON_Delete(root_obj);
   1dea2:	4628      	mov	r0, r5
   1dea4:	f004 fb66 	bl	22574 <cJSON_Delete>
	output->buf = buffer;
   1dea8:	603e      	str	r6, [r7, #0]
	output->len = strlen(buffer);
   1deaa:	4630      	mov	r0, r6
   1deac:	f7fc f86a 	bl	19f84 <strlen>
   1deb0:	6078      	str	r0, [r7, #4]
	return 0;
   1deb2:	e7c3      	b.n	1de3c <cloud_encode_data+0x2c>
		return -EINVAL;
   1deb4:	f06f 0415 	mvn.w	r4, #21
   1deb8:	e7c0      	b.n	1de3c <cloud_encode_data+0x2c>
   1deba:	bf00      	nop
   1debc:	000425b0 	.word	0x000425b0
   1dec0:	00044991 	.word	0x00044991
   1dec4:	00044997 	.word	0x00044997
   1dec8:	000468a1 	.word	0x000468a1
   1decc:	0004499c 	.word	0x0004499c

0001ded0 <cloud_encode_digital_twin_data>:
{
   1ded0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ded4:	4688      	mov	r8, r1
	__ASSERT_NO_MSG(channel != NULL);
   1ded6:	4604      	mov	r4, r0
   1ded8:	b958      	cbnz	r0, 1def2 <cloud_encode_digital_twin_data+0x22>
   1deda:	493e      	ldr	r1, [pc, #248]	; (1dfd4 <cloud_encode_digital_twin_data+0x104>)
   1dedc:	483e      	ldr	r0, [pc, #248]	; (1dfd8 <cloud_encode_digital_twin_data+0x108>)
   1dede:	f240 130b 	movw	r3, #267	; 0x10b
   1dee2:	4a3e      	ldr	r2, [pc, #248]	; (1dfdc <cloud_encode_digital_twin_data+0x10c>)
   1dee4:	f020 fd22 	bl	3e92c <printk>
   1dee8:	f240 110b 	movw	r1, #267	; 0x10b
   1deec:	483b      	ldr	r0, [pc, #236]	; (1dfdc <cloud_encode_digital_twin_data+0x10c>)
   1deee:	f020 fd2a 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(channel->data.buf != NULL);
   1def2:	6863      	ldr	r3, [r4, #4]
   1def4:	b95b      	cbnz	r3, 1df0e <cloud_encode_digital_twin_data+0x3e>
   1def6:	493a      	ldr	r1, [pc, #232]	; (1dfe0 <cloud_encode_digital_twin_data+0x110>)
   1def8:	4837      	ldr	r0, [pc, #220]	; (1dfd8 <cloud_encode_digital_twin_data+0x108>)
   1defa:	f44f 7386 	mov.w	r3, #268	; 0x10c
   1defe:	4a37      	ldr	r2, [pc, #220]	; (1dfdc <cloud_encode_digital_twin_data+0x10c>)
   1df00:	f020 fd14 	bl	3e92c <printk>
   1df04:	f44f 7186 	mov.w	r1, #268	; 0x10c
   1df08:	4834      	ldr	r0, [pc, #208]	; (1dfdc <cloud_encode_digital_twin_data+0x10c>)
   1df0a:	f020 fd1c 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(channel->data.len != 0);
   1df0e:	68a3      	ldr	r3, [r4, #8]
   1df10:	b95b      	cbnz	r3, 1df2a <cloud_encode_digital_twin_data+0x5a>
   1df12:	4934      	ldr	r1, [pc, #208]	; (1dfe4 <cloud_encode_digital_twin_data+0x114>)
   1df14:	4830      	ldr	r0, [pc, #192]	; (1dfd8 <cloud_encode_digital_twin_data+0x108>)
   1df16:	f240 130d 	movw	r3, #269	; 0x10d
   1df1a:	4a30      	ldr	r2, [pc, #192]	; (1dfdc <cloud_encode_digital_twin_data+0x10c>)
   1df1c:	f020 fd06 	bl	3e92c <printk>
   1df20:	f240 110d 	movw	r1, #269	; 0x10d
   1df24:	482d      	ldr	r0, [pc, #180]	; (1dfdc <cloud_encode_digital_twin_data+0x10c>)
   1df26:	f020 fd0e 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   1df2a:	f1b8 0f00 	cmp.w	r8, #0
   1df2e:	d10b      	bne.n	1df48 <cloud_encode_digital_twin_data+0x78>
   1df30:	492d      	ldr	r1, [pc, #180]	; (1dfe8 <cloud_encode_digital_twin_data+0x118>)
   1df32:	4829      	ldr	r0, [pc, #164]	; (1dfd8 <cloud_encode_digital_twin_data+0x108>)
   1df34:	f44f 7387 	mov.w	r3, #270	; 0x10e
   1df38:	4a28      	ldr	r2, [pc, #160]	; (1dfdc <cloud_encode_digital_twin_data+0x10c>)
   1df3a:	f020 fcf7 	bl	3e92c <printk>
   1df3e:	f44f 7187 	mov.w	r1, #270	; 0x10e
   1df42:	4826      	ldr	r0, [pc, #152]	; (1dfdc <cloud_encode_digital_twin_data+0x10c>)
   1df44:	f020 fcff 	bl	3e946 <assert_post_action>
	cJSON *root_obj = cJSON_CreateObject();
   1df48:	f004 fbd8 	bl	226fc <cJSON_CreateObject>
   1df4c:	4605      	mov	r5, r0
	cJSON *state_obj = cJSON_CreateObject();
   1df4e:	f004 fbd5 	bl	226fc <cJSON_CreateObject>
   1df52:	4607      	mov	r7, r0
	cJSON *reported_obj = cJSON_CreateObject();
   1df54:	f004 fbd2 	bl	226fc <cJSON_CreateObject>
   1df58:	4606      	mov	r6, r0
	if (root_obj == NULL || state_obj == NULL || reported_obj == NULL) {
   1df5a:	b10d      	cbz	r5, 1df60 <cloud_encode_digital_twin_data+0x90>
   1df5c:	b107      	cbz	r7, 1df60 <cloud_encode_digital_twin_data+0x90>
   1df5e:	b960      	cbnz	r0, 1df7a <cloud_encode_digital_twin_data+0xaa>
		cJSON_Delete(root_obj);
   1df60:	4628      	mov	r0, r5
   1df62:	f004 fb07 	bl	22574 <cJSON_Delete>
		cJSON_Delete(state_obj);
   1df66:	4638      	mov	r0, r7
   1df68:	f004 fb04 	bl	22574 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   1df6c:	4630      	mov	r0, r6
   1df6e:	f004 fb01 	bl	22574 <cJSON_Delete>
		return -ENOMEM;
   1df72:	f06f 000b 	mvn.w	r0, #11
}
   1df76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (channel->type == CLOUD_CHANNEL_DEVICE_INFO) {
   1df7a:	7823      	ldrb	r3, [r4, #0]
   1df7c:	2b0c      	cmp	r3, #12
   1df7e:	d107      	bne.n	1df90 <cloud_encode_digital_twin_data+0xc0>
		cJSON *dummy_obj = cJSON_CreateNull();
   1df80:	f004 fb8c 	bl	2269c <cJSON_CreateNull>
		if (dummy_obj == NULL) {
   1df84:	4602      	mov	r2, r0
   1df86:	b118      	cbz	r0, 1df90 <cloud_encode_digital_twin_data+0xc0>
	cJSON_AddItemToObject(parent, str, item);
   1df88:	4918      	ldr	r1, [pc, #96]	; (1dfec <cloud_encode_digital_twin_data+0x11c>)
   1df8a:	4630      	mov	r0, r6
   1df8c:	f021 fe08 	bl	3fba0 <cJSON_AddItemToObject>
   1df90:	4b17      	ldr	r3, [pc, #92]	; (1dff0 <cloud_encode_digital_twin_data+0x120>)
	ret += json_add_obj(reported_obj, channel_type_str[channel->type],
   1df92:	7821      	ldrb	r1, [r4, #0]
	cJSON_AddItemToObject(parent, str, item);
   1df94:	6862      	ldr	r2, [r4, #4]
   1df96:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
   1df9a:	4630      	mov	r0, r6
   1df9c:	f021 fe00 	bl	3fba0 <cJSON_AddItemToObject>
   1dfa0:	4632      	mov	r2, r6
   1dfa2:	4914      	ldr	r1, [pc, #80]	; (1dff4 <cloud_encode_digital_twin_data+0x124>)
   1dfa4:	4638      	mov	r0, r7
   1dfa6:	f021 fdfb 	bl	3fba0 <cJSON_AddItemToObject>
   1dfaa:	463a      	mov	r2, r7
   1dfac:	4912      	ldr	r1, [pc, #72]	; (1dff8 <cloud_encode_digital_twin_data+0x128>)
   1dfae:	4628      	mov	r0, r5
   1dfb0:	f021 fdf6 	bl	3fba0 <cJSON_AddItemToObject>
	buffer = cJSON_PrintUnformatted(root_obj);
   1dfb4:	4628      	mov	r0, r5
   1dfb6:	f021 fde3 	bl	3fb80 <cJSON_PrintUnformatted>
   1dfba:	4604      	mov	r4, r0
	cJSON_Delete(root_obj);
   1dfbc:	4628      	mov	r0, r5
   1dfbe:	f004 fad9 	bl	22574 <cJSON_Delete>
	output->buf = buffer;
   1dfc2:	f8c8 4000 	str.w	r4, [r8]
	output->len = strlen(buffer);
   1dfc6:	4620      	mov	r0, r4
   1dfc8:	f7fb ffdc 	bl	19f84 <strlen>
   1dfcc:	f8c8 0004 	str.w	r0, [r8, #4]
	return 0;
   1dfd0:	2000      	movs	r0, #0
   1dfd2:	e7d0      	b.n	1df76 <cloud_encode_digital_twin_data+0xa6>
   1dfd4:	000449d7 	.word	0x000449d7
   1dfd8:	00044643 	.word	0x00044643
   1dfdc:	000449a8 	.word	0x000449a8
   1dfe0:	000449ee 	.word	0x000449ee
   1dfe4:	00044a0f 	.word	0x00044a0f
   1dfe8:	00044a26 	.word	0x00044a26
   1dfec:	00044a3c 	.word	0x00044a3c
   1dff0:	000425b0 	.word	0x000425b0
   1dff4:	00044a43 	.word	0x00044a43
   1dff8:	00044a4c 	.word	0x00044a4c

0001dffc <cloud_decode_command>:

int cloud_decode_command(char const *input)
{
   1dffc:	b510      	push	{r4, lr}
	int ret;
	cJSON *root_obj		= NULL;
	cJSON *group_obj	= NULL;

	if (input == NULL) {
   1dffe:	b1f0      	cbz	r0, 1e03e <cloud_decode_command+0x42>
		return -EINVAL;
	}

	root_obj = cJSON_Parse(input);
   1e000:	f021 fdba 	bl	3fb78 <cJSON_Parse>
	if (root_obj == NULL) {
   1e004:	4604      	mov	r4, r0
   1e006:	b1e8      	cbz	r0, 1e044 <cloud_decode_command+0x48>
		return -ENOENT;
	}

	group_obj = json_object_decode(root_obj, "get");
   1e008:	4910      	ldr	r1, [pc, #64]	; (1e04c <cloud_decode_command+0x50>)
   1e00a:	f020 f868 	bl	3e0de <json_object_decode>
	if (group_obj != NULL) {
   1e00e:	b928      	cbnz	r0, 1e01c <cloud_decode_command+0x20>
		if (ret) {
			return ret;
		}
	}

	group_obj = json_object_decode(root_obj, "set");
   1e010:	490f      	ldr	r1, [pc, #60]	; (1e050 <cloud_decode_command+0x54>)
   1e012:	4620      	mov	r0, r4
   1e014:	f020 f863 	bl	3e0de <json_object_decode>
	if (group_obj != NULL) {
   1e018:	b948      	cbnz	r0, 1e02e <cloud_decode_command+0x32>
			return ret;
		}
	}

	return 0;
}
   1e01a:	bd10      	pop	{r4, pc}
		cmd_parsed.group = group_get.group;
   1e01c:	4b0d      	ldr	r3, [pc, #52]	; (1e054 <cloud_decode_command+0x58>)
   1e01e:	7919      	ldrb	r1, [r3, #4]
   1e020:	4b0d      	ldr	r3, [pc, #52]	; (1e058 <cloud_decode_command+0x5c>)
   1e022:	7019      	strb	r1, [r3, #0]
		ret = cloud_search_cmd(group_obj, cmd_parsed.group);
   1e024:	f7ff fe94 	bl	1dd50 <cloud_search_cmd>
		if (ret) {
   1e028:	2800      	cmp	r0, #0
   1e02a:	d0f1      	beq.n	1e010 <cloud_decode_command+0x14>
   1e02c:	e7f5      	b.n	1e01a <cloud_decode_command+0x1e>
		cmd_parsed.group = group_set.group;
   1e02e:	4b0b      	ldr	r3, [pc, #44]	; (1e05c <cloud_decode_command+0x60>)
}
   1e030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		cmd_parsed.group = group_set.group;
   1e034:	7919      	ldrb	r1, [r3, #4]
   1e036:	4b08      	ldr	r3, [pc, #32]	; (1e058 <cloud_decode_command+0x5c>)
   1e038:	7019      	strb	r1, [r3, #0]
		ret = cloud_search_cmd(group_obj, cmd_parsed.group);
   1e03a:	f7ff be89 	b.w	1dd50 <cloud_search_cmd>
		return -EINVAL;
   1e03e:	f06f 0015 	mvn.w	r0, #21
   1e042:	e7ea      	b.n	1e01a <cloud_decode_command+0x1e>
		return -ENOENT;
   1e044:	f06f 0001 	mvn.w	r0, #1
   1e048:	e7e7      	b.n	1e01a <cloud_decode_command+0x1e>
   1e04a:	bf00      	nop
   1e04c:	00047b46 	.word	0x00047b46
   1e050:	00044b0f 	.word	0x00044b0f
   1e054:	20031210 	.word	0x20031210
   1e058:	20020970 	.word	0x20020970
   1e05c:	20031220 	.word	0x20031220

0001e060 <cloud_decode_init>:

int cloud_decode_init(cloud_cmd_cb_t cb)
{
	cloud_command_cb = cb;
   1e060:	4b01      	ldr	r3, [pc, #4]	; (1e068 <cloud_decode_init+0x8>)
   1e062:	6018      	str	r0, [r3, #0]

	return 0;
}
   1e064:	2000      	movs	r0, #0
   1e066:	4770      	bx	lr
   1e068:	2002391c 	.word	0x2002391c

0001e06c <cloud_encode_env_sensors_data>:

int cloud_encode_env_sensors_data(const env_sensor_data_t *sensor_data,
				 struct cloud_msg *output)
{
   1e06c:	b570      	push	{r4, r5, r6, lr}
   1e06e:	460d      	mov	r5, r1
   1e070:	b088      	sub	sp, #32
	__ASSERT_NO_MSG(sensor_data != NULL);
   1e072:	4604      	mov	r4, r0
   1e074:	b958      	cbnz	r0, 1e08e <cloud_encode_env_sensors_data+0x22>
   1e076:	491f      	ldr	r1, [pc, #124]	; (1e0f4 <cloud_encode_env_sensors_data+0x88>)
   1e078:	481f      	ldr	r0, [pc, #124]	; (1e0f8 <cloud_encode_env_sensors_data+0x8c>)
   1e07a:	f240 13a9 	movw	r3, #425	; 0x1a9
   1e07e:	4a1f      	ldr	r2, [pc, #124]	; (1e0fc <cloud_encode_env_sensors_data+0x90>)
   1e080:	f020 fc54 	bl	3e92c <printk>
   1e084:	f240 11a9 	movw	r1, #425	; 0x1a9
   1e088:	481c      	ldr	r0, [pc, #112]	; (1e0fc <cloud_encode_env_sensors_data+0x90>)
   1e08a:	f020 fc5c 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   1e08e:	b95d      	cbnz	r5, 1e0a8 <cloud_encode_env_sensors_data+0x3c>
   1e090:	491b      	ldr	r1, [pc, #108]	; (1e100 <cloud_encode_env_sensors_data+0x94>)
   1e092:	4819      	ldr	r0, [pc, #100]	; (1e0f8 <cloud_encode_env_sensors_data+0x8c>)
   1e094:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   1e098:	4a18      	ldr	r2, [pc, #96]	; (1e0fc <cloud_encode_env_sensors_data+0x90>)
   1e09a:	f020 fc47 	bl	3e92c <printk>
   1e09e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   1e0a2:	4816      	ldr	r0, [pc, #88]	; (1e0fc <cloud_encode_env_sensors_data+0x90>)
   1e0a4:	f020 fc4f 	bl	3e946 <assert_post_action>

	char buf[6];
	u8_t len;
	struct cloud_channel_data cloud_sensor;

	switch (sensor_data->type) {
   1e0a8:	7823      	ldrb	r3, [r4, #0]
   1e0aa:	2b03      	cmp	r3, #3
   1e0ac:	d81f      	bhi.n	1e0ee <cloud_encode_env_sensors_data+0x82>
   1e0ae:	e8df f003 	tbb	[pc, r3]
   1e0b2:	1802      	.short	0x1802
   1e0b4:	1c1a      	.short	0x1c1a
	case ENV_SENSOR_TEMPERATURE:
		cloud_sensor.type = CLOUD_CHANNEL_TEMP;
   1e0b6:	2307      	movs	r3, #7

	default:
		return -1;
	}

	len = snprintf(buf, sizeof(buf), "%.1f",
   1e0b8:	ae02      	add	r6, sp, #8
		cloud_sensor.type = CLOUD_CHANNEL_AIR_QUAL;
   1e0ba:	f88d 3010 	strb.w	r3, [sp, #16]
	len = snprintf(buf, sizeof(buf), "%.1f",
   1e0be:	2106      	movs	r1, #6
   1e0c0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   1e0c4:	4630      	mov	r0, r6
   1e0c6:	e9cd 2300 	strd	r2, r3, [sp]
   1e0ca:	4a0e      	ldr	r2, [pc, #56]	; (1e104 <cloud_encode_env_sensors_data+0x98>)
   1e0cc:	f01e fc68 	bl	3c9a0 <sniprintf>
		sensor_data->value);
	cloud_sensor.data.buf = buf;
	cloud_sensor.data.len = len;
   1e0d0:	b2c0      	uxtb	r0, r0
   1e0d2:	9006      	str	r0, [sp, #24]

	return cloud_encode_data(&cloud_sensor, output);
   1e0d4:	4629      	mov	r1, r5
   1e0d6:	a804      	add	r0, sp, #16
	cloud_sensor.data.buf = buf;
   1e0d8:	9605      	str	r6, [sp, #20]
	return cloud_encode_data(&cloud_sensor, output);
   1e0da:	f7ff fe99 	bl	1de10 <cloud_encode_data>
}
   1e0de:	b008      	add	sp, #32
   1e0e0:	bd70      	pop	{r4, r5, r6, pc}
		cloud_sensor.type = CLOUD_CHANNEL_HUMID;
   1e0e2:	2308      	movs	r3, #8
   1e0e4:	e7e8      	b.n	1e0b8 <cloud_encode_env_sensors_data+0x4c>
		cloud_sensor.type = CLOUD_CHANNEL_AIR_PRESS;
   1e0e6:	2309      	movs	r3, #9
   1e0e8:	e7e6      	b.n	1e0b8 <cloud_encode_env_sensors_data+0x4c>
		cloud_sensor.type = CLOUD_CHANNEL_AIR_QUAL;
   1e0ea:	230a      	movs	r3, #10
   1e0ec:	e7e4      	b.n	1e0b8 <cloud_encode_env_sensors_data+0x4c>
		return -1;
   1e0ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e0f2:	e7f4      	b.n	1e0de <cloud_encode_env_sensors_data+0x72>
   1e0f4:	00044a52 	.word	0x00044a52
   1e0f8:	00044643 	.word	0x00044643
   1e0fc:	000449a8 	.word	0x000449a8
   1e100:	00044a26 	.word	0x00044a26
   1e104:	00044a6d 	.word	0x00044a6d

0001e108 <service_info_json_object_encode>:
}

int service_info_json_object_encode(
	const char * const ui[], const u32_t ui_count, const char * const fota[],
	const u32_t fota_count, const u16_t fota_version, cJSON * const obj_out)
{
   1e108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e10c:	b087      	sub	sp, #28
   1e10e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   1e110:	4604      	mov	r4, r0
   1e112:	4689      	mov	r9, r1
   1e114:	4617      	mov	r7, r2
   1e116:	4698      	mov	r8, r3
	int err = 0;
	cJSON *service_info_obj = NULL;
	char fota_name[FOTAS_JSON_NAME_SIZE];

	if ((obj_out == NULL) || ((ui == NULL) && ui_count) ||
   1e118:	b386      	cbz	r6, 1e17c <service_info_json_object_encode+0x74>
   1e11a:	b900      	cbnz	r0, 1e11e <service_info_json_object_encode+0x16>
   1e11c:	bb71      	cbnz	r1, 1e17c <service_info_json_object_encode+0x74>
   1e11e:	b917      	cbnz	r7, 1e126 <service_info_json_object_encode+0x1e>
	    ((fota == NULL) && fota_count)) {
   1e120:	f1b8 0f00 	cmp.w	r8, #0
   1e124:	d12a      	bne.n	1e17c <service_info_json_object_encode+0x74>
		return -EINVAL;
	}

	service_info_obj = cJSON_CreateObject();
   1e126:	f004 fae9 	bl	226fc <cJSON_CreateObject>
	if (service_info_obj == NULL) {
   1e12a:	4605      	mov	r5, r0
   1e12c:	b348      	cbz	r0, 1e182 <service_info_json_object_encode+0x7a>
		return -ENOMEM;
	}

	if (!err) {
		err = add_array_obj(ui, ui_count, UI_JSON_NAME,
   1e12e:	4603      	mov	r3, r0
   1e130:	4a15      	ldr	r2, [pc, #84]	; (1e188 <service_info_json_object_encode+0x80>)
   1e132:	4620      	mov	r0, r4
   1e134:	4649      	mov	r1, r9
   1e136:	f01f ffd6 	bl	3e0e6 <add_array_obj>
				    service_info_obj);
	}

	if (!err) {
   1e13a:	4604      	mov	r4, r0
   1e13c:	b9d0      	cbnz	r0, 1e174 <service_info_json_object_encode+0x6c>
		snprintf(fota_name, sizeof(fota_name), "%s%hu", FOTAS_JSON_NAME,
   1e13e:	210c      	movs	r1, #12
   1e140:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1e144:	4a11      	ldr	r2, [pc, #68]	; (1e18c <service_info_json_object_encode+0x84>)
   1e146:	9300      	str	r3, [sp, #0]
   1e148:	eb0d 0001 	add.w	r0, sp, r1
   1e14c:	4b10      	ldr	r3, [pc, #64]	; (1e190 <service_info_json_object_encode+0x88>)
   1e14e:	f01e fc27 	bl	3c9a0 <sniprintf>
			 fota_version);
		err = add_array_obj(fota, fota_count, fota_name,
   1e152:	462b      	mov	r3, r5
   1e154:	aa03      	add	r2, sp, #12
   1e156:	4641      	mov	r1, r8
   1e158:	4638      	mov	r0, r7
   1e15a:	f01f ffc4 	bl	3e0e6 <add_array_obj>
				    service_info_obj);
	}

	if (!err) {
   1e15e:	4604      	mov	r4, r0
   1e160:	b940      	cbnz	r0, 1e174 <service_info_json_object_encode+0x6c>
		cJSON_AddItemToObject(obj_out, SERVICE_INFO_JSON_NAME,
   1e162:	462a      	mov	r2, r5
   1e164:	490b      	ldr	r1, [pc, #44]	; (1e194 <service_info_json_object_encode+0x8c>)
   1e166:	4630      	mov	r0, r6
   1e168:	f021 fd1a 	bl	3fba0 <cJSON_AddItemToObject>
	} else {
		cJSON_Delete(service_info_obj);
	}

	return err;
}
   1e16c:	4620      	mov	r0, r4
   1e16e:	b007      	add	sp, #28
   1e170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cJSON_Delete(service_info_obj);
   1e174:	4628      	mov	r0, r5
   1e176:	f004 f9fd 	bl	22574 <cJSON_Delete>
   1e17a:	e7f7      	b.n	1e16c <service_info_json_object_encode+0x64>
		return -EINVAL;
   1e17c:	f06f 0415 	mvn.w	r4, #21
   1e180:	e7f4      	b.n	1e16c <service_info_json_object_encode+0x64>
		return -ENOMEM;
   1e182:	f06f 040b 	mvn.w	r4, #11
   1e186:	e7f1      	b.n	1e16c <service_info_json_object_encode+0x64>
   1e188:	00044911 	.word	0x00044911
   1e18c:	00044b7e 	.word	0x00044b7e
   1e190:	00044b77 	.word	0x00044b77
   1e194:	00044b84 	.word	0x00044b84

0001e198 <gps_work_handler>:

	return 0;
}

static void gps_work_handler(struct k_work *work)
{
   1e198:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (gps_work.type == GPS_WORK_START) {
   1e19a:	4c36      	ldr	r4, [pc, #216]	; (1e274 <gps_work_handler+0xdc>)
   1e19c:	7823      	ldrb	r3, [r4, #0]
   1e19e:	4625      	mov	r5, r4
   1e1a0:	2b00      	cmp	r3, #0
   1e1a2:	d146      	bne.n	1e232 <gps_work_handler+0x9a>
		printk("Enabling PSM\n");
   1e1a4:	4834      	ldr	r0, [pc, #208]	; (1e278 <gps_work_handler+0xe0>)
   1e1a6:	f020 fbc1 	bl	3e92c <printk>
		err = lte_lc_psm_req(true);
   1e1aa:	2001      	movs	r0, #1
   1e1ac:	f00a faaa 	bl	28704 <lte_lc_psm_req>
		if (err) {
   1e1b0:	b1c0      	cbz	r0, 1e1e4 <gps_work_handler+0x4c>
			printk("PSM mode could not be enabled");
   1e1b2:	4832      	ldr	r0, [pc, #200]	; (1e27c <gps_work_handler+0xe4>)
   1e1b4:	f020 fbba 	bl	3e92c <printk>
			printk(" or was already enabled\n.");
   1e1b8:	4831      	ldr	r0, [pc, #196]	; (1e280 <gps_work_handler+0xe8>)
			printk("PSM enabled\n");
   1e1ba:	f020 fbb7 	bl	3e92c <printk>
	return z_impl_k_sleep(ms);
   1e1be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1e1c2:	f022 fcb8 	bl	40b36 <z_impl_k_sleep>
	err = gps_start(gps_work.dev);
   1e1c6:	6a68      	ldr	r0, [r5, #36]	; 0x24
static inline int gps_start(struct device *dev)
{
	const struct gps_driver_api *api =
		(const struct gps_driver_api *)dev->driver_api;

	return api->start(dev);
   1e1c8:	6843      	ldr	r3, [r0, #4]
   1e1ca:	68db      	ldr	r3, [r3, #12]
   1e1cc:	4798      	blx	r3
	if (err) {
   1e1ce:	4604      	mov	r4, r0
   1e1d0:	b150      	cbz	r0, 1e1e8 <gps_work_handler+0x50>
		printk("Failed starting GPS!\n");
   1e1d2:	482c      	ldr	r0, [pc, #176]	; (1e284 <gps_work_handler+0xec>)
   1e1d4:	f020 fbaa 	bl	3e92c <printk>
		err = start();
		if (err) {
			printk("GPS could not be started, error: %d\n", err);
   1e1d8:	4621      	mov	r1, r4
   1e1da:	482b      	ldr	r0, [pc, #172]	; (1e288 <gps_work_handler+0xf0>)
			CONFIG_GPS_CONTROL_FIX_CHECK_INTERVAL);

		k_delayed_work_submit(&gps_work.work,
			K_SECONDS(CONFIG_GPS_CONTROL_FIX_CHECK_INTERVAL));
	}
}
   1e1dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("GPS could not be stopped, error: %d\n", err);
   1e1e0:	f020 bba4 	b.w	3e92c <printk>
			printk("PSM enabled\n");
   1e1e4:	4829      	ldr	r0, [pc, #164]	; (1e28c <gps_work_handler+0xf4>)
   1e1e6:	e7e8      	b.n	1e1ba <gps_work_handler+0x22>
	atomic_set(&gps_is_active, 1);
   1e1e8:	2101      	movs	r1, #1
   1e1ea:	4829      	ldr	r0, [pc, #164]	; (1e290 <gps_work_handler+0xf8>)
   1e1ec:	f01f ffab 	bl	3e146 <atomic_set>
	printk("GPS started successfully.\nSearching for satellites ");
   1e1f0:	4828      	ldr	r0, [pc, #160]	; (1e294 <gps_work_handler+0xfc>)
   1e1f2:	f020 fb9b 	bl	3e92c <printk>
	printk("to get position fix. This may take several minutes.\n");
   1e1f6:	4828      	ldr	r0, [pc, #160]	; (1e298 <gps_work_handler+0x100>)
   1e1f8:	f020 fb98 	bl	3e92c <printk>
	printk("The device will attempt to get a fix for %d seconds, ",
   1e1fc:	f44f 71b4 	mov.w	r1, #360	; 0x168
   1e200:	4826      	ldr	r0, [pc, #152]	; (1e29c <gps_work_handler+0x104>)
   1e202:	f020 fb93 	bl	3e92c <printk>
	printk("before the GPS is stopped.\n");
   1e206:	4826      	ldr	r0, [pc, #152]	; (1e2a0 <gps_work_handler+0x108>)
   1e208:	f020 fb90 	bl	3e92c <printk>
		printk("GPS operation started\n");
   1e20c:	4825      	ldr	r0, [pc, #148]	; (1e2a4 <gps_work_handler+0x10c>)
   1e20e:	f020 fb8d 	bl	3e92c <printk>
		atomic_set(&gps_is_active, 1);
   1e212:	2101      	movs	r1, #1
   1e214:	481e      	ldr	r0, [pc, #120]	; (1e290 <gps_work_handler+0xf8>)
   1e216:	f01f ff96 	bl	3e146 <atomic_set>
		ui_led_set_pattern(UI_LED_GPS_SEARCHING);
   1e21a:	2008      	movs	r0, #8
   1e21c:	f7ff fd32 	bl	1dc84 <ui_led_set_pattern>
		gps_work.type = GPS_WORK_STOP;
   1e220:	2301      	movs	r3, #1
   1e222:	4a21      	ldr	r2, [pc, #132]	; (1e2a8 <gps_work_handler+0x110>)
   1e224:	4921      	ldr	r1, [pc, #132]	; (1e2ac <gps_work_handler+0x114>)
   1e226:	702b      	strb	r3, [r5, #0]
   1e228:	4821      	ldr	r0, [pc, #132]	; (1e2b0 <gps_work_handler+0x118>)
}
   1e22a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1e22e:	f01c bc2d 	b.w	3aa8c <k_delayed_work_submit_to_queue>
	} else if (gps_work.type == GPS_WORK_STOP) {
   1e232:	2b01      	cmp	r3, #1
   1e234:	d11c      	bne.n	1e270 <gps_work_handler+0xd8>
	err = gps_stop(gps_work.dev);
   1e236:	6a60      	ldr	r0, [r4, #36]	; 0x24
static inline int gps_stop(struct device *dev)
{
	const struct gps_driver_api *api =
		(const struct gps_driver_api *)dev->driver_api;

	return api->stop(dev);
   1e238:	6843      	ldr	r3, [r0, #4]
   1e23a:	691b      	ldr	r3, [r3, #16]
   1e23c:	4798      	blx	r3
	if (err) {
   1e23e:	4605      	mov	r5, r0
   1e240:	b110      	cbz	r0, 1e248 <gps_work_handler+0xb0>
			printk("GPS could not be stopped, error: %d\n", err);
   1e242:	4601      	mov	r1, r0
   1e244:	481b      	ldr	r0, [pc, #108]	; (1e2b4 <gps_work_handler+0x11c>)
   1e246:	e7c9      	b.n	1e1dc <gps_work_handler+0x44>
		printk("GPS operation was stopped\n");
   1e248:	481b      	ldr	r0, [pc, #108]	; (1e2b8 <gps_work_handler+0x120>)
   1e24a:	f020 fb6f 	bl	3e92c <printk>
		atomic_set(&gps_is_active, 0);
   1e24e:	4629      	mov	r1, r5
   1e250:	480f      	ldr	r0, [pc, #60]	; (1e290 <gps_work_handler+0xf8>)
   1e252:	f01f ff78 	bl	3e146 <atomic_set>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e256:	4b19      	ldr	r3, [pc, #100]	; (1e2bc <gps_work_handler+0x124>)
   1e258:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&gps_is_enabled) == 0) {
   1e25c:	b143      	cbz	r3, 1e270 <gps_work_handler+0xd8>
		printk("The device will try to get fix again in %d seconds\n",
   1e25e:	211e      	movs	r1, #30
   1e260:	4817      	ldr	r0, [pc, #92]	; (1e2c0 <gps_work_handler+0x128>)
		gps_work.type = GPS_WORK_START;
   1e262:	7025      	strb	r5, [r4, #0]
		printk("The device will try to get fix again in %d seconds\n",
   1e264:	f020 fb62 	bl	3e92c <printk>
   1e268:	f247 5230 	movw	r2, #30000	; 0x7530
   1e26c:	1d21      	adds	r1, r4, #4
   1e26e:	e7db      	b.n	1e228 <gps_work_handler+0x90>
}
   1e270:	bd38      	pop	{r3, r4, r5, pc}
   1e272:	bf00      	nop
   1e274:	20023928 	.word	0x20023928
   1e278:	00044bd4 	.word	0x00044bd4
   1e27c:	00044be2 	.word	0x00044be2
   1e280:	00044c00 	.word	0x00044c00
   1e284:	00044c27 	.word	0x00044c27
   1e288:	00044c3d 	.word	0x00044c3d
   1e28c:	00044c1a 	.word	0x00044c1a
   1e290:	20023920 	.word	0x20023920
   1e294:	00044c62 	.word	0x00044c62
   1e298:	00044c96 	.word	0x00044c96
   1e29c:	00044ccb 	.word	0x00044ccb
   1e2a0:	00044d01 	.word	0x00044d01
   1e2a4:	00044d1d 	.word	0x00044d1d
   1e2a8:	00057e40 	.word	0x00057e40
   1e2ac:	2002392c 	.word	0x2002392c
   1e2b0:	2002a25c 	.word	0x2002a25c
   1e2b4:	00044d34 	.word	0x00044d34
   1e2b8:	00044d59 	.word	0x00044d59
   1e2bc:	20023924 	.word	0x20023924
   1e2c0:	00044d74 	.word	0x00044d74

0001e2c4 <gps_control_is_active>:
   1e2c4:	4b03      	ldr	r3, [pc, #12]	; (1e2d4 <gps_control_is_active+0x10>)
   1e2c6:	e8d3 0faf 	lda	r0, [r3]
#if !defined(CONFIG_GPS_SIM)
	return atomic_get(&gps_is_active);
#else
	return false;
#endif
}
   1e2ca:	3000      	adds	r0, #0
   1e2cc:	bf18      	it	ne
   1e2ce:	2001      	movne	r0, #1
   1e2d0:	4770      	bx	lr
   1e2d2:	bf00      	nop
   1e2d4:	20023920 	.word	0x20023920

0001e2d8 <gps_control_is_enabled>:
   1e2d8:	4b03      	ldr	r3, [pc, #12]	; (1e2e8 <gps_control_is_enabled+0x10>)
   1e2da:	e8d3 0faf 	lda	r0, [r3]
#if !defined(CONFIG_GPS_SIM)
	return atomic_get(&gps_is_enabled);
#else
	return false;
#endif
}
   1e2de:	3000      	adds	r0, #0
   1e2e0:	bf18      	it	ne
   1e2e2:	2001      	movne	r0, #1
   1e2e4:	4770      	bx	lr
   1e2e6:	bf00      	nop
   1e2e8:	20023924 	.word	0x20023924

0001e2ec <gps_control_stop>:
	ui_led_set_pattern(UI_CLOUD_CONNECTED);
#endif
}

void gps_control_stop(u32_t delay_ms)
{
   1e2ec:	b570      	push	{r4, r5, r6, lr}
#if !defined(CONFIG_GPS_SIM)
	k_delayed_work_cancel(&gps_work.work);
   1e2ee:	4d07      	ldr	r5, [pc, #28]	; (1e30c <gps_control_stop+0x20>)
{
   1e2f0:	4606      	mov	r6, r0
	k_delayed_work_cancel(&gps_work.work);
   1e2f2:	1d2c      	adds	r4, r5, #4
   1e2f4:	4620      	mov	r0, r4
   1e2f6:	f01c fc53 	bl	3aba0 <k_delayed_work_cancel>
	gps_work.type = GPS_WORK_STOP;
   1e2fa:	2301      	movs	r3, #1
   1e2fc:	4632      	mov	r2, r6
   1e2fe:	702b      	strb	r3, [r5, #0]
   1e300:	4621      	mov	r1, r4
	k_delayed_work_submit(&gps_work.work, delay_ms);
#endif
}
   1e302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e306:	4802      	ldr	r0, [pc, #8]	; (1e310 <gps_control_stop+0x24>)
   1e308:	f01c bbc0 	b.w	3aa8c <k_delayed_work_submit_to_queue>
   1e30c:	20023928 	.word	0x20023928
   1e310:	2002a25c 	.word	0x2002a25c

0001e314 <gps_control_disable>:
{
   1e314:	b508      	push	{r3, lr}
	atomic_set(&gps_is_enabled, 0);
   1e316:	2100      	movs	r1, #0
   1e318:	4805      	ldr	r0, [pc, #20]	; (1e330 <gps_control_disable+0x1c>)
   1e31a:	f01f ff14 	bl	3e146 <atomic_set>
	gps_control_stop(K_NO_WAIT);
   1e31e:	2000      	movs	r0, #0
   1e320:	f7ff ffe4 	bl	1e2ec <gps_control_stop>
}
   1e324:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ui_led_set_pattern(UI_CLOUD_CONNECTED);
   1e328:	2008      	movs	r0, #8
   1e32a:	f7ff bcab 	b.w	1dc84 <ui_led_set_pattern>
   1e32e:	bf00      	nop
   1e330:	20023924 	.word	0x20023924

0001e334 <gps_control_start>:

void gps_control_start(u32_t delay_ms)
{
   1e334:	b570      	push	{r4, r5, r6, lr}
#if !defined(CONFIG_GPS_SIM)
	k_delayed_work_cancel(&gps_work.work);
   1e336:	4d07      	ldr	r5, [pc, #28]	; (1e354 <gps_control_start+0x20>)
{
   1e338:	4606      	mov	r6, r0
	k_delayed_work_cancel(&gps_work.work);
   1e33a:	1d2c      	adds	r4, r5, #4
   1e33c:	4620      	mov	r0, r4
   1e33e:	f01c fc2f 	bl	3aba0 <k_delayed_work_cancel>
	gps_work.type = GPS_WORK_START;
   1e342:	2300      	movs	r3, #0
   1e344:	4632      	mov	r2, r6
   1e346:	702b      	strb	r3, [r5, #0]
   1e348:	4621      	mov	r1, r4
	k_delayed_work_submit(&gps_work.work, delay_ms);
#endif
}
   1e34a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e34e:	4802      	ldr	r0, [pc, #8]	; (1e358 <gps_control_start+0x24>)
   1e350:	f01c bb9c 	b.w	3aa8c <k_delayed_work_submit_to_queue>
   1e354:	20023928 	.word	0x20023928
   1e358:	2002a25c 	.word	0x2002a25c

0001e35c <gps_control_enable>:
{
   1e35c:	b508      	push	{r3, lr}
	atomic_set(&gps_is_enabled, 1);
   1e35e:	2101      	movs	r1, #1
   1e360:	4804      	ldr	r0, [pc, #16]	; (1e374 <gps_control_enable+0x18>)
   1e362:	f01f fef0 	bl	3e146 <atomic_set>
}
   1e366:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gps_control_start(K_SECONDS(1));
   1e36a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1e36e:	f7ff bfe1 	b.w	1e334 <gps_control_start>
   1e372:	bf00      	nop
   1e374:	20023924 	.word	0x20023924

0001e378 <gps_control_init>:
#ifdef CONFIG_GPS_SIM
	struct gps_trigger gps_trig = {
		.type = GPS_TRIG_DATA_READY
	};
#else
	struct gps_trigger gps_trig = {
   1e378:	2302      	movs	r3, #2
{
   1e37a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e37c:	4604      	mov	r4, r0
	struct gps_trigger gps_trig = {
   1e37e:	f8ad 3004 	strh.w	r3, [sp, #4]
   1e382:	4812      	ldr	r0, [pc, #72]	; (1e3cc <gps_control_init+0x54>)
   1e384:	f019 ff8c 	bl	382a0 <z_impl_device_get_binding>
		.chan = GPS_CHAN_NMEA
	};
#endif /* CONFIG_GPS_SIM */

	gps_dev = device_get_binding(CONFIG_GPS_DEV_NAME);
	if (gps_dev == NULL) {
   1e388:	4606      	mov	r6, r0
   1e38a:	b940      	cbnz	r0, 1e39e <gps_control_init+0x26>
		printk("Could not get %s device\n", CONFIG_GPS_DEV_NAME);
   1e38c:	490f      	ldr	r1, [pc, #60]	; (1e3cc <gps_control_init+0x54>)
   1e38e:	4810      	ldr	r0, [pc, #64]	; (1e3d0 <gps_control_init+0x58>)
   1e390:	f020 facc 	bl	3e92c <printk>
		return -ENODEV;
   1e394:	f06f 0412 	mvn.w	r4, #18
	gps_work.dev = gps_dev;
#endif
	printk("GPS initialized\n");

	return 0;
}
   1e398:	4620      	mov	r0, r4
   1e39a:	b002      	add	sp, #8
   1e39c:	bd70      	pop	{r4, r5, r6, pc}
	return api->trigger_set(dev, trigger, handler);
   1e39e:	6843      	ldr	r3, [r0, #4]
   1e3a0:	4622      	mov	r2, r4
   1e3a2:	681b      	ldr	r3, [r3, #0]
   1e3a4:	a901      	add	r1, sp, #4
   1e3a6:	4798      	blx	r3
	if (err) {
   1e3a8:	4604      	mov	r4, r0
   1e3aa:	b120      	cbz	r0, 1e3b6 <gps_control_init+0x3e>
		printk("Could not set trigger, error code: %d\n", err);
   1e3ac:	4601      	mov	r1, r0
   1e3ae:	4809      	ldr	r0, [pc, #36]	; (1e3d4 <gps_control_init+0x5c>)
   1e3b0:	f020 fabc 	bl	3e92c <printk>
		return err;
   1e3b4:	e7f0      	b.n	1e398 <gps_control_init+0x20>
	k_delayed_work_init(&gps_work.work, gps_work_handler);
   1e3b6:	4d08      	ldr	r5, [pc, #32]	; (1e3d8 <gps_control_init+0x60>)
   1e3b8:	4908      	ldr	r1, [pc, #32]	; (1e3dc <gps_control_init+0x64>)
   1e3ba:	1d28      	adds	r0, r5, #4
   1e3bc:	f022 fc3e 	bl	40c3c <k_delayed_work_init>
	printk("GPS initialized\n");
   1e3c0:	4807      	ldr	r0, [pc, #28]	; (1e3e0 <gps_control_init+0x68>)
	gps_work.dev = gps_dev;
   1e3c2:	626e      	str	r6, [r5, #36]	; 0x24
	printk("GPS initialized\n");
   1e3c4:	f020 fab2 	bl	3e92c <printk>
	return 0;
   1e3c8:	e7e6      	b.n	1e398 <gps_control_init+0x20>
   1e3ca:	bf00      	nop
   1e3cc:	00044b90 	.word	0x00044b90
   1e3d0:	00044838 	.word	0x00044838
   1e3d4:	00044b9c 	.word	0x00044b9c
   1e3d8:	20023928 	.word	0x20023928
   1e3dc:	0001e199 	.word	0x0001e199
   1e3e0:	00044bc3 	.word	0x00044bc3

0001e3e4 <env_sensors_init_and_start>:
/**@brief Initialize environment sensors. */
int env_sensors_init_and_start(void)
{
   1e3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e3e8:	2403      	movs	r4, #3
   1e3ea:	4d17      	ldr	r5, [pc, #92]	; (1e448 <env_sensors_init_and_start+0x64>)
	for (int i = 0; i < ARRAY_SIZE(env_sensors); i++) {
		env_sensors[i]->dev =
			device_get_binding(env_sensors[i]->dev_name);
		__ASSERT(env_sensors[i]->dev, "Could not get device %s\n",
   1e3ec:	4e17      	ldr	r6, [pc, #92]	; (1e44c <env_sensors_init_and_start+0x68>)
   1e3ee:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1e460 <env_sensors_init_and_start+0x7c>
   1e3f2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 1e464 <env_sensors_init_and_start+0x80>
			device_get_binding(env_sensors[i]->dev_name);
   1e3f6:	682f      	ldr	r7, [r5, #0]
   1e3f8:	6978      	ldr	r0, [r7, #20]
   1e3fa:	f019 ff51 	bl	382a0 <z_impl_device_get_binding>
		env_sensors[i]->dev =
   1e3fe:	61b8      	str	r0, [r7, #24]
		__ASSERT(env_sensors[i]->dev, "Could not get device %s\n",
   1e400:	f855 7b04 	ldr.w	r7, [r5], #4
   1e404:	69bb      	ldr	r3, [r7, #24]
   1e406:	b96b      	cbnz	r3, 1e424 <env_sensors_init_and_start+0x40>
   1e408:	2368      	movs	r3, #104	; 0x68
   1e40a:	4632      	mov	r2, r6
   1e40c:	4641      	mov	r1, r8
   1e40e:	4648      	mov	r0, r9
   1e410:	f020 fa8c 	bl	3e92c <printk>
   1e414:	6979      	ldr	r1, [r7, #20]
   1e416:	480e      	ldr	r0, [pc, #56]	; (1e450 <env_sensors_init_and_start+0x6c>)
   1e418:	f020 fa88 	bl	3e92c <printk>
   1e41c:	2168      	movs	r1, #104	; 0x68
   1e41e:	4630      	mov	r0, r6
   1e420:	f020 fa91 	bl	3e946 <assert_post_action>
	for (int i = 0; i < ARRAY_SIZE(env_sensors); i++) {
   1e424:	3c01      	subs	r4, #1
   1e426:	d1e6      	bne.n	1e3f6 <env_sensors_init_and_start+0x12>
			env_sensors[i]->dev_name);
	}

	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   1e428:	490a      	ldr	r1, [pc, #40]	; (1e454 <env_sensors_init_and_start+0x70>)
   1e42a:	480b      	ldr	r0, [pc, #44]	; (1e458 <env_sensors_init_and_start+0x74>)
   1e42c:	f022 fc06 	bl	40c3c <k_delayed_work_init>
	env_sensors_poll_fn(NULL);
   1e430:	4620      	mov	r0, r4
   1e432:	f7fb fe11 	bl	1a058 <env_sensors_poll_fn>

	return k_delayed_work_submit(&env_sensors_poller, K_SECONDS(10));
}
   1e436:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e43a:	f242 7210 	movw	r2, #10000	; 0x2710
   1e43e:	4906      	ldr	r1, [pc, #24]	; (1e458 <env_sensors_init_and_start+0x74>)
   1e440:	4806      	ldr	r0, [pc, #24]	; (1e45c <env_sensors_init_and_start+0x78>)
   1e442:	f01c bb23 	b.w	3aa8c <k_delayed_work_submit_to_queue>
   1e446:	bf00      	nop
   1e448:	000425e8 	.word	0x000425e8
   1e44c:	00044db4 	.word	0x00044db4
   1e450:	00044df7 	.word	0x00044df7
   1e454:	0001a059 	.word	0x0001a059
   1e458:	20023950 	.word	0x20023950
   1e45c:	2002a25c 	.word	0x2002a25c
   1e460:	00044de3 	.word	0x00044de3
   1e464:	00044643 	.word	0x00044643

0001e468 <env_sensors_get_temperature>:

int env_sensors_get_temperature(env_sensor_data_t *sensor_data)
{
   1e468:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   1e46a:	4604      	mov	r4, r0
   1e46c:	2800      	cmp	r0, #0
   1e46e:	d03f      	beq.n	1e4f0 <env_sensors_get_temperature+0x88>
	__asm__ volatile(
   1e470:	f04f 0320 	mov.w	r3, #32
   1e474:	f3ef 8611 	mrs	r6, BASEPRI
   1e478:	f383 8811 	msr	BASEPRI, r3
   1e47c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1e480:	481d      	ldr	r0, [pc, #116]	; (1e4f8 <env_sensors_get_temperature+0x90>)
   1e482:	f01c f8a5 	bl	3a5d0 <z_spin_lock_valid>
   1e486:	b960      	cbnz	r0, 1e4a2 <env_sensors_get_temperature+0x3a>
   1e488:	491c      	ldr	r1, [pc, #112]	; (1e4fc <env_sensors_get_temperature+0x94>)
   1e48a:	235f      	movs	r3, #95	; 0x5f
   1e48c:	4a1c      	ldr	r2, [pc, #112]	; (1e500 <env_sensors_get_temperature+0x98>)
   1e48e:	481d      	ldr	r0, [pc, #116]	; (1e504 <env_sensors_get_temperature+0x9c>)
   1e490:	f020 fa4c 	bl	3e92c <printk>
   1e494:	481c      	ldr	r0, [pc, #112]	; (1e508 <env_sensors_get_temperature+0xa0>)
   1e496:	f020 fa49 	bl	3e92c <printk>
   1e49a:	215f      	movs	r1, #95	; 0x5f
   1e49c:	4818      	ldr	r0, [pc, #96]	; (1e500 <env_sensors_get_temperature+0x98>)
   1e49e:	f020 fa52 	bl	3e946 <assert_post_action>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e4a2:	4d1a      	ldr	r5, [pc, #104]	; (1e50c <env_sensors_get_temperature+0xa4>)
	z_spin_lock_set_owner(l);
   1e4a4:	4814      	ldr	r0, [pc, #80]	; (1e4f8 <env_sensors_get_temperature+0x90>)
   1e4a6:	f01c f8b1 	bl	3a60c <z_spin_lock_set_owner>
   1e4aa:	4623      	mov	r3, r4
   1e4ac:	f105 0410 	add.w	r4, r5, #16
   1e4b0:	462a      	mov	r2, r5
   1e4b2:	ca03      	ldmia	r2!, {r0, r1}
   1e4b4:	42a2      	cmp	r2, r4
   1e4b6:	6018      	str	r0, [r3, #0]
   1e4b8:	6059      	str	r1, [r3, #4]
   1e4ba:	4615      	mov	r5, r2
   1e4bc:	f103 0308 	add.w	r3, r3, #8
   1e4c0:	d1f6      	bne.n	1e4b0 <env_sensors_get_temperature+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1e4c2:	480d      	ldr	r0, [pc, #52]	; (1e4f8 <env_sensors_get_temperature+0x90>)
   1e4c4:	f01c f892 	bl	3a5ec <z_spin_unlock_valid>
   1e4c8:	b960      	cbnz	r0, 1e4e4 <env_sensors_get_temperature+0x7c>
   1e4ca:	4911      	ldr	r1, [pc, #68]	; (1e510 <env_sensors_get_temperature+0xa8>)
   1e4cc:	2372      	movs	r3, #114	; 0x72
   1e4ce:	4a0c      	ldr	r2, [pc, #48]	; (1e500 <env_sensors_get_temperature+0x98>)
   1e4d0:	480c      	ldr	r0, [pc, #48]	; (1e504 <env_sensors_get_temperature+0x9c>)
   1e4d2:	f020 fa2b 	bl	3e92c <printk>
   1e4d6:	480f      	ldr	r0, [pc, #60]	; (1e514 <env_sensors_get_temperature+0xac>)
   1e4d8:	f020 fa28 	bl	3e92c <printk>
   1e4dc:	2172      	movs	r1, #114	; 0x72
   1e4de:	4808      	ldr	r0, [pc, #32]	; (1e500 <env_sensors_get_temperature+0x98>)
   1e4e0:	f020 fa31 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   1e4e4:	f386 8811 	msr	BASEPRI, r6
   1e4e8:	f3bf 8f6f 	isb	sy
	}
	k_spinlock_key_t key = k_spin_lock(&temp_sensor.lock);

	memcpy(sensor_data, &(temp_sensor.sensor), sizeof(temp_sensor.sensor));
	k_spin_unlock(&temp_sensor.lock, key);
	return 0;
   1e4ec:	2000      	movs	r0, #0
}
   1e4ee:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   1e4f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e4f4:	e7fb      	b.n	1e4ee <env_sensors_get_temperature+0x86>
   1e4f6:	bf00      	nop
   1e4f8:	20030c9c 	.word	0x20030c9c
   1e4fc:	00044e5a 	.word	0x00044e5a
   1e500:	00044e3b 	.word	0x00044e3b
   1e504:	00044643 	.word	0x00044643
   1e508:	00044e6f 	.word	0x00044e6f
   1e50c:	20030c80 	.word	0x20030c80
   1e510:	00044e84 	.word	0x00044e84
   1e514:	00044e9b 	.word	0x00044e9b

0001e518 <env_sensors_get_humidity>:

int env_sensors_get_humidity(env_sensor_data_t *sensor_data)
{
   1e518:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   1e51a:	4604      	mov	r4, r0
   1e51c:	2800      	cmp	r0, #0
   1e51e:	d03f      	beq.n	1e5a0 <env_sensors_get_humidity+0x88>
	__asm__ volatile(
   1e520:	f04f 0320 	mov.w	r3, #32
   1e524:	f3ef 8611 	mrs	r6, BASEPRI
   1e528:	f383 8811 	msr	BASEPRI, r3
   1e52c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1e530:	481d      	ldr	r0, [pc, #116]	; (1e5a8 <env_sensors_get_humidity+0x90>)
   1e532:	f01c f84d 	bl	3a5d0 <z_spin_lock_valid>
   1e536:	b960      	cbnz	r0, 1e552 <env_sensors_get_humidity+0x3a>
   1e538:	491c      	ldr	r1, [pc, #112]	; (1e5ac <env_sensors_get_humidity+0x94>)
   1e53a:	235f      	movs	r3, #95	; 0x5f
   1e53c:	4a1c      	ldr	r2, [pc, #112]	; (1e5b0 <env_sensors_get_humidity+0x98>)
   1e53e:	481d      	ldr	r0, [pc, #116]	; (1e5b4 <env_sensors_get_humidity+0x9c>)
   1e540:	f020 f9f4 	bl	3e92c <printk>
   1e544:	481c      	ldr	r0, [pc, #112]	; (1e5b8 <env_sensors_get_humidity+0xa0>)
   1e546:	f020 f9f1 	bl	3e92c <printk>
   1e54a:	215f      	movs	r1, #95	; 0x5f
   1e54c:	4818      	ldr	r0, [pc, #96]	; (1e5b0 <env_sensors_get_humidity+0x98>)
   1e54e:	f020 f9fa 	bl	3e946 <assert_post_action>
   1e552:	4d1a      	ldr	r5, [pc, #104]	; (1e5bc <env_sensors_get_humidity+0xa4>)
	z_spin_lock_set_owner(l);
   1e554:	4814      	ldr	r0, [pc, #80]	; (1e5a8 <env_sensors_get_humidity+0x90>)
   1e556:	f01c f859 	bl	3a60c <z_spin_lock_set_owner>
   1e55a:	4623      	mov	r3, r4
   1e55c:	f105 0410 	add.w	r4, r5, #16
   1e560:	462a      	mov	r2, r5
   1e562:	ca03      	ldmia	r2!, {r0, r1}
   1e564:	42a2      	cmp	r2, r4
   1e566:	6018      	str	r0, [r3, #0]
   1e568:	6059      	str	r1, [r3, #4]
   1e56a:	4615      	mov	r5, r2
   1e56c:	f103 0308 	add.w	r3, r3, #8
   1e570:	d1f6      	bne.n	1e560 <env_sensors_get_humidity+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1e572:	480d      	ldr	r0, [pc, #52]	; (1e5a8 <env_sensors_get_humidity+0x90>)
   1e574:	f01c f83a 	bl	3a5ec <z_spin_unlock_valid>
   1e578:	b960      	cbnz	r0, 1e594 <env_sensors_get_humidity+0x7c>
   1e57a:	4911      	ldr	r1, [pc, #68]	; (1e5c0 <env_sensors_get_humidity+0xa8>)
   1e57c:	2372      	movs	r3, #114	; 0x72
   1e57e:	4a0c      	ldr	r2, [pc, #48]	; (1e5b0 <env_sensors_get_humidity+0x98>)
   1e580:	480c      	ldr	r0, [pc, #48]	; (1e5b4 <env_sensors_get_humidity+0x9c>)
   1e582:	f020 f9d3 	bl	3e92c <printk>
   1e586:	480f      	ldr	r0, [pc, #60]	; (1e5c4 <env_sensors_get_humidity+0xac>)
   1e588:	f020 f9d0 	bl	3e92c <printk>
   1e58c:	2172      	movs	r1, #114	; 0x72
   1e58e:	4808      	ldr	r0, [pc, #32]	; (1e5b0 <env_sensors_get_humidity+0x98>)
   1e590:	f020 f9d9 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   1e594:	f386 8811 	msr	BASEPRI, r6
   1e598:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&humid_sensor.lock);

	memcpy(sensor_data, &(humid_sensor.sensor),
		sizeof(humid_sensor.sensor));
	k_spin_unlock(&humid_sensor.lock, key);
	return 0;
   1e59c:	2000      	movs	r0, #0
}
   1e59e:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   1e5a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e5a4:	e7fb      	b.n	1e59e <env_sensors_get_humidity+0x86>
   1e5a6:	bf00      	nop
   1e5a8:	20030c5c 	.word	0x20030c5c
   1e5ac:	00044e5a 	.word	0x00044e5a
   1e5b0:	00044e3b 	.word	0x00044e3b
   1e5b4:	00044643 	.word	0x00044643
   1e5b8:	00044e6f 	.word	0x00044e6f
   1e5bc:	20030c40 	.word	0x20030c40
   1e5c0:	00044e84 	.word	0x00044e84
   1e5c4:	00044e9b 	.word	0x00044e9b

0001e5c8 <env_sensors_get_pressure>:

int env_sensors_get_pressure(env_sensor_data_t *sensor_data)
{
   1e5c8:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   1e5ca:	4604      	mov	r4, r0
   1e5cc:	2800      	cmp	r0, #0
   1e5ce:	d03f      	beq.n	1e650 <env_sensors_get_pressure+0x88>
	__asm__ volatile(
   1e5d0:	f04f 0320 	mov.w	r3, #32
   1e5d4:	f3ef 8611 	mrs	r6, BASEPRI
   1e5d8:	f383 8811 	msr	BASEPRI, r3
   1e5dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1e5e0:	481d      	ldr	r0, [pc, #116]	; (1e658 <env_sensors_get_pressure+0x90>)
   1e5e2:	f01b fff5 	bl	3a5d0 <z_spin_lock_valid>
   1e5e6:	b960      	cbnz	r0, 1e602 <env_sensors_get_pressure+0x3a>
   1e5e8:	491c      	ldr	r1, [pc, #112]	; (1e65c <env_sensors_get_pressure+0x94>)
   1e5ea:	235f      	movs	r3, #95	; 0x5f
   1e5ec:	4a1c      	ldr	r2, [pc, #112]	; (1e660 <env_sensors_get_pressure+0x98>)
   1e5ee:	481d      	ldr	r0, [pc, #116]	; (1e664 <env_sensors_get_pressure+0x9c>)
   1e5f0:	f020 f99c 	bl	3e92c <printk>
   1e5f4:	481c      	ldr	r0, [pc, #112]	; (1e668 <env_sensors_get_pressure+0xa0>)
   1e5f6:	f020 f999 	bl	3e92c <printk>
   1e5fa:	215f      	movs	r1, #95	; 0x5f
   1e5fc:	4818      	ldr	r0, [pc, #96]	; (1e660 <env_sensors_get_pressure+0x98>)
   1e5fe:	f020 f9a2 	bl	3e946 <assert_post_action>
   1e602:	4d1a      	ldr	r5, [pc, #104]	; (1e66c <env_sensors_get_pressure+0xa4>)
	z_spin_lock_set_owner(l);
   1e604:	4814      	ldr	r0, [pc, #80]	; (1e658 <env_sensors_get_pressure+0x90>)
   1e606:	f01c f801 	bl	3a60c <z_spin_lock_set_owner>
   1e60a:	4623      	mov	r3, r4
   1e60c:	f105 0410 	add.w	r4, r5, #16
   1e610:	462a      	mov	r2, r5
   1e612:	ca03      	ldmia	r2!, {r0, r1}
   1e614:	42a2      	cmp	r2, r4
   1e616:	6018      	str	r0, [r3, #0]
   1e618:	6059      	str	r1, [r3, #4]
   1e61a:	4615      	mov	r5, r2
   1e61c:	f103 0308 	add.w	r3, r3, #8
   1e620:	d1f6      	bne.n	1e610 <env_sensors_get_pressure+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1e622:	480d      	ldr	r0, [pc, #52]	; (1e658 <env_sensors_get_pressure+0x90>)
   1e624:	f01b ffe2 	bl	3a5ec <z_spin_unlock_valid>
   1e628:	b960      	cbnz	r0, 1e644 <env_sensors_get_pressure+0x7c>
   1e62a:	4911      	ldr	r1, [pc, #68]	; (1e670 <env_sensors_get_pressure+0xa8>)
   1e62c:	2372      	movs	r3, #114	; 0x72
   1e62e:	4a0c      	ldr	r2, [pc, #48]	; (1e660 <env_sensors_get_pressure+0x98>)
   1e630:	480c      	ldr	r0, [pc, #48]	; (1e664 <env_sensors_get_pressure+0x9c>)
   1e632:	f020 f97b 	bl	3e92c <printk>
   1e636:	480f      	ldr	r0, [pc, #60]	; (1e674 <env_sensors_get_pressure+0xac>)
   1e638:	f020 f978 	bl	3e92c <printk>
   1e63c:	2172      	movs	r1, #114	; 0x72
   1e63e:	4808      	ldr	r0, [pc, #32]	; (1e660 <env_sensors_get_pressure+0x98>)
   1e640:	f020 f981 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   1e644:	f386 8811 	msr	BASEPRI, r6
   1e648:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&pressure_sensor.lock);

	memcpy(sensor_data, &(pressure_sensor.sensor),
		sizeof(pressure_sensor.sensor));
	k_spin_unlock(&pressure_sensor.lock, key);
	return 0;
   1e64c:	2000      	movs	r0, #0
}
   1e64e:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   1e650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e654:	e7fb      	b.n	1e64e <env_sensors_get_pressure+0x86>
   1e656:	bf00      	nop
   1e658:	20030c7c 	.word	0x20030c7c
   1e65c:	00044e5a 	.word	0x00044e5a
   1e660:	00044e3b 	.word	0x00044e3b
   1e664:	00044643 	.word	0x00044643
   1e668:	00044e6f 	.word	0x00044e6f
   1e66c:	20030c60 	.word	0x20030c60
   1e670:	00044e84 	.word	0x00044e84
   1e674:	00044e9b 	.word	0x00044e9b

0001e678 <z_sys_mem_pool_block_free>:
	return 0;
}

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   1e678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e67c:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1e67e:	7a83      	ldrb	r3, [r0, #10]
{
   1e680:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1e682:	009b      	lsls	r3, r3, #2
   1e684:	3307      	adds	r3, #7
   1e686:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1e68a:	ebad 0d03 	sub.w	sp, sp, r3
   1e68e:	46eb      	mov	fp, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   1e690:	6843      	ldr	r3, [r0, #4]
{
   1e692:	4606      	mov	r6, r0
	lsizes[0] = p->max_sz;
   1e694:	465c      	mov	r4, fp
	for (i = 1; i <= level; i++) {
   1e696:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
   1e698:	f8cb 3000 	str.w	r3, [fp]
	for (i = 1; i <= level; i++) {
   1e69c:	4281      	cmp	r1, r0
   1e69e:	d222      	bcs.n	1e6e6 <z_sys_mem_pool_block_free+0x6e>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1e6a0:	7c30      	ldrb	r0, [r6, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   1e6a2:	4688      	mov	r8, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1e6a4:	f010 0001 	ands.w	r0, r0, #1
	block_free(p, level, lsizes, block);
   1e6a8:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1e6aa:	d001      	beq.n	1e6b0 <z_sys_mem_pool_block_free+0x38>
   1e6ac:	f01f fd76 	bl	3e19c <pool_irq_lock.isra.2.part.3>
	unsigned int key = pool_irq_lock(p);
   1e6b0:	4604      	mov	r4, r0
	while (level >= 0) {
   1e6b2:	f1b8 0f00 	cmp.w	r8, #0
   1e6b6:	da1e      	bge.n	1e6f6 <z_sys_mem_pool_block_free+0x7e>
	__ASSERT(0, "out of levels");
   1e6b8:	23b0      	movs	r3, #176	; 0xb0
   1e6ba:	4a43      	ldr	r2, [pc, #268]	; (1e7c8 <z_sys_mem_pool_block_free+0x150>)
   1e6bc:	4943      	ldr	r1, [pc, #268]	; (1e7cc <z_sys_mem_pool_block_free+0x154>)
   1e6be:	4844      	ldr	r0, [pc, #272]	; (1e7d0 <z_sys_mem_pool_block_free+0x158>)
   1e6c0:	f020 f934 	bl	3e92c <printk>
   1e6c4:	4843      	ldr	r0, [pc, #268]	; (1e7d4 <z_sys_mem_pool_block_free+0x15c>)
   1e6c6:	f020 f931 	bl	3e92c <printk>
   1e6ca:	21b0      	movs	r1, #176	; 0xb0
   1e6cc:	483e      	ldr	r0, [pc, #248]	; (1e7c8 <z_sys_mem_pool_block_free+0x150>)
   1e6ce:	f020 f93a 	bl	3e946 <assert_post_action>
	return -1;
   1e6d2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
   1e6d6:	4621      	mov	r1, r4
   1e6d8:	7c30      	ldrb	r0, [r6, #16]
   1e6da:	f01f fd68 	bl	3e1ae <pool_irq_unlock.isra.4>
}
   1e6de:	3714      	adds	r7, #20
   1e6e0:	46bd      	mov	sp, r7
   1e6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1e6e6:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
   1e6e8:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1e6ea:	089b      	lsrs	r3, r3, #2
   1e6ec:	f023 0303 	bic.w	r3, r3, #3
   1e6f0:	f844 3f04 	str.w	r3, [r4, #4]!
   1e6f4:	e7d2      	b.n	1e69c <z_sys_mem_pool_block_free+0x24>
		int i, lsz = lsizes[level];
   1e6f6:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   1e6fa:	462a      	mov	r2, r5
	return (u8_t *)p->buf + lsz * block;
   1e6fc:	fb03 fa05 	mul.w	sl, r3, r5
		int i, lsz = lsizes[level];
   1e700:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   1e702:	6833      	ldr	r3, [r6, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1e704:	4641      	mov	r1, r8
	return (u8_t *)p->buf + lsz * block;
   1e706:	eb03 090a 	add.w	r9, r3, sl
   1e70a:	603b      	str	r3, [r7, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1e70c:	4630      	mov	r0, r6
   1e70e:	f107 030c 	add.w	r3, r7, #12
   1e712:	f01f fd2c 	bl	3e16e <get_bit_ptr>
	*word &= ~(1<<bit);
   1e716:	2301      	movs	r3, #1
   1e718:	68fa      	ldr	r2, [r7, #12]
   1e71a:	fa03 f000 	lsl.w	r0, r3, r0
   1e71e:	6813      	ldr	r3, [r2, #0]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   1e720:	6839      	ldr	r1, [r7, #0]
   1e722:	ea23 0300 	bic.w	r3, r3, r0
   1e726:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   1e728:	220c      	movs	r2, #12
   1e72a:	68f3      	ldr	r3, [r6, #12]
   1e72c:	fb02 3308 	mla	r3, r2, r8, r3
   1e730:	1d1a      	adds	r2, r3, #4
   1e732:	f841 200a 	str.w	r2, [r1, sl]
	node->prev = list->tail;
   1e736:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
   1e738:	4621      	mov	r1, r4
   1e73a:	f8c9 2004 	str.w	r2, [r9, #4]

	list->tail->next = node;
   1e73e:	689a      	ldr	r2, [r3, #8]
   1e740:	f8c2 9000 	str.w	r9, [r2]
	list->tail = node;
   1e744:	f8c3 9008 	str.w	r9, [r3, #8]
   1e748:	7c30      	ldrb	r0, [r6, #16]
   1e74a:	f01f fd30 	bl	3e1ae <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1e74e:	7c30      	ldrb	r0, [r6, #16]
   1e750:	f010 0001 	ands.w	r0, r0, #1
   1e754:	d001      	beq.n	1e75a <z_sys_mem_pool_block_free+0xe2>
   1e756:	f01f fd21 	bl	3e19c <pool_irq_lock.isra.2.part.3>
		key = pool_irq_lock(p);
   1e75a:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1e75c:	f1b8 0f00 	cmp.w	r8, #0
   1e760:	d0b9      	beq.n	1e6d6 <z_sys_mem_pool_block_free+0x5e>
	int bit = get_bit_ptr(p, level, bn, &word);
   1e762:	f107 030c 	add.w	r3, r7, #12
   1e766:	462a      	mov	r2, r5
   1e768:	4641      	mov	r1, r8
   1e76a:	4630      	mov	r0, r6
   1e76c:	f01f fcff 	bl	3e16e <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   1e770:	68fb      	ldr	r3, [r7, #12]
   1e772:	2800      	cmp	r0, #0
   1e774:	bfb8      	it	lt
   1e776:	3003      	addlt	r0, #3
   1e778:	681b      	ldr	r3, [r3, #0]
   1e77a:	f020 0003 	bic.w	r0, r0, #3
   1e77e:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1e782:	f010 000f 	ands.w	r0, r0, #15
   1e786:	d1a6      	bne.n	1e6d6 <z_sys_mem_pool_block_free+0x5e>
	node->next = NULL;
   1e788:	4684      	mov	ip, r0
			int b = (bn & ~3) + i;
   1e78a:	f025 0a03 	bic.w	sl, r5, #3
	return (u8_t *)p->buf + lsz * block;
   1e78e:	687a      	ldr	r2, [r7, #4]
			int b = (bn & ~3) + i;
   1e790:	eb0a 0300 	add.w	r3, sl, r0
	return (u8_t *)p->buf + lsz * block;
   1e794:	4353      	muls	r3, r2
   1e796:	6832      	ldr	r2, [r6, #0]
		for (i = 0; i < 4; i++) {
   1e798:	3001      	adds	r0, #1
	return (u8_t *)p->buf + lsz * block;
   1e79a:	18d1      	adds	r1, r2, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1e79c:	f8d1 9004 	ldr.w	r9, [r1, #4]
   1e7a0:	f852 e003 	ldr.w	lr, [r2, r3]
		for (i = 0; i < 4; i++) {
   1e7a4:	2804      	cmp	r0, #4
   1e7a6:	f8c9 e000 	str.w	lr, [r9]
	node->next->prev = node->prev;
   1e7aa:	f8ce 9004 	str.w	r9, [lr, #4]
	node->next = NULL;
   1e7ae:	f842 c003 	str.w	ip, [r2, r3]
	node->prev = NULL;
   1e7b2:	f8c1 c004 	str.w	ip, [r1, #4]
   1e7b6:	d1ea      	bne.n	1e78e <z_sys_mem_pool_block_free+0x116>
		bn = bn / 4;
   1e7b8:	2d00      	cmp	r5, #0
   1e7ba:	bfb8      	it	lt
   1e7bc:	3503      	addlt	r5, #3
		level = level - 1;
   1e7be:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		bn = bn / 4;
   1e7c2:	10ad      	asrs	r5, r5, #2
   1e7c4:	e775      	b.n	1e6b2 <z_sys_mem_pool_block_free+0x3a>
   1e7c6:	bf00      	nop
   1e7c8:	00044eae 	.word	0x00044eae
   1e7cc:	00049224 	.word	0x00049224
   1e7d0:	00044643 	.word	0x00044643
   1e7d4:	00044ecb 	.word	0x00044ecb

0001e7d8 <lexer_string>:

	return chr;
}

static void *lexer_string(struct lexer *lexer)
{
   1e7d8:	4601      	mov	r1, r0
	lexer->start = lexer->pos;
   1e7da:	6883      	ldr	r3, [r0, #8]
{
   1e7dc:	b510      	push	{r4, lr}
			case 'n':
			case 'r':
			case 't':
				continue;
			case 'u':
				if (!isxdigit(next(lexer))) {
   1e7de:	4c2f      	ldr	r4, [pc, #188]	; (1e89c <lexer_string+0xc4>)
	lexer->start = lexer->pos;
   1e7e0:	6043      	str	r3, [r0, #4]
		int chr = next(lexer);
   1e7e2:	4608      	mov	r0, r1
   1e7e4:	f01f fe1b 	bl	3e41e <next>
		if (chr == '\0') {
   1e7e8:	b938      	cbnz	r0, 1e7fa <lexer_string+0x22>
	lexer->token.type = token;
   1e7ea:	2321      	movs	r3, #33	; 0x21
   1e7ec:	740b      	strb	r3, [r1, #16]
	lexer->token.start = lexer->start;
   1e7ee:	684b      	ldr	r3, [r1, #4]
   1e7f0:	614b      	str	r3, [r1, #20]
	lexer->token.end = lexer->pos;
   1e7f2:	688b      	ldr	r3, [r1, #8]
   1e7f4:	618b      	str	r3, [r1, #24]
	lexer->start = lexer->pos;
   1e7f6:	604b      	str	r3, [r1, #4]
	}

error:
	emit(lexer, JSON_TOK_ERROR);
	return NULL;
}
   1e7f8:	bd10      	pop	{r4, pc}
		if (chr == '\\') {
   1e7fa:	285c      	cmp	r0, #92	; 0x5c
   1e7fc:	d13d      	bne.n	1e87a <lexer_string+0xa2>
			switch (next(lexer)) {
   1e7fe:	4608      	mov	r0, r1
   1e800:	f01f fe0d 	bl	3e41e <next>
   1e804:	2866      	cmp	r0, #102	; 0x66
   1e806:	d0ec      	beq.n	1e7e2 <lexer_string+0xa>
   1e808:	dc11      	bgt.n	1e82e <lexer_string+0x56>
   1e80a:	282f      	cmp	r0, #47	; 0x2f
   1e80c:	d0e9      	beq.n	1e7e2 <lexer_string+0xa>
   1e80e:	dc0a      	bgt.n	1e826 <lexer_string+0x4e>
   1e810:	2822      	cmp	r0, #34	; 0x22
   1e812:	d0e6      	beq.n	1e7e2 <lexer_string+0xa>
	lexer->token.type = token;
   1e814:	2321      	movs	r3, #33	; 0x21
   1e816:	740b      	strb	r3, [r1, #16]
	lexer->token.start = lexer->start;
   1e818:	684b      	ldr	r3, [r1, #4]
	return NULL;
   1e81a:	2000      	movs	r0, #0
	lexer->token.start = lexer->start;
   1e81c:	614b      	str	r3, [r1, #20]
	lexer->token.end = lexer->pos;
   1e81e:	688b      	ldr	r3, [r1, #8]
   1e820:	618b      	str	r3, [r1, #24]
	lexer->start = lexer->pos;
   1e822:	604b      	str	r3, [r1, #4]
	return NULL;
   1e824:	e7e8      	b.n	1e7f8 <lexer_string+0x20>
			switch (next(lexer)) {
   1e826:	285c      	cmp	r0, #92	; 0x5c
   1e828:	d0db      	beq.n	1e7e2 <lexer_string+0xa>
   1e82a:	2862      	cmp	r0, #98	; 0x62
   1e82c:	e7f1      	b.n	1e812 <lexer_string+0x3a>
   1e82e:	2872      	cmp	r0, #114	; 0x72
   1e830:	d0d7      	beq.n	1e7e2 <lexer_string+0xa>
   1e832:	dc01      	bgt.n	1e838 <lexer_string+0x60>
   1e834:	286e      	cmp	r0, #110	; 0x6e
   1e836:	e7ec      	b.n	1e812 <lexer_string+0x3a>
   1e838:	2874      	cmp	r0, #116	; 0x74
   1e83a:	d0d2      	beq.n	1e7e2 <lexer_string+0xa>
   1e83c:	2875      	cmp	r0, #117	; 0x75
   1e83e:	d1e9      	bne.n	1e814 <lexer_string+0x3c>
				if (!isxdigit(next(lexer))) {
   1e840:	4608      	mov	r0, r1
   1e842:	f01f fdec 	bl	3e41e <next>
   1e846:	5c23      	ldrb	r3, [r4, r0]
   1e848:	f013 0f44 	tst.w	r3, #68	; 0x44
   1e84c:	d0e2      	beq.n	1e814 <lexer_string+0x3c>
				if (!isxdigit(next(lexer))) {
   1e84e:	4608      	mov	r0, r1
   1e850:	f01f fde5 	bl	3e41e <next>
   1e854:	5c23      	ldrb	r3, [r4, r0]
   1e856:	f013 0f44 	tst.w	r3, #68	; 0x44
   1e85a:	d0db      	beq.n	1e814 <lexer_string+0x3c>
				if (!isxdigit(next(lexer))) {
   1e85c:	4608      	mov	r0, r1
   1e85e:	f01f fdde 	bl	3e41e <next>
   1e862:	5c23      	ldrb	r3, [r4, r0]
   1e864:	f013 0f44 	tst.w	r3, #68	; 0x44
   1e868:	d0d4      	beq.n	1e814 <lexer_string+0x3c>
				if (!isxdigit(next(lexer))) {
   1e86a:	4608      	mov	r0, r1
   1e86c:	f01f fdd7 	bl	3e41e <next>
   1e870:	5c23      	ldrb	r3, [r4, r0]
   1e872:	f013 0f44 	tst.w	r3, #68	; 0x44
   1e876:	d1b4      	bne.n	1e7e2 <lexer_string+0xa>
   1e878:	e7cc      	b.n	1e814 <lexer_string+0x3c>
		if (chr == '"') {
   1e87a:	2822      	cmp	r0, #34	; 0x22
   1e87c:	d1b1      	bne.n	1e7e2 <lexer_string+0xa>
	lexer->pos--;
   1e87e:	688b      	ldr	r3, [r1, #8]
	lexer->token.start = lexer->start;
   1e880:	684a      	ldr	r2, [r1, #4]
	lexer->pos--;
   1e882:	3b01      	subs	r3, #1
   1e884:	608b      	str	r3, [r1, #8]
	lexer->token.type = token;
   1e886:	7408      	strb	r0, [r1, #16]
	lexer->token.end = lexer->pos;
   1e888:	e9c1 2305 	strd	r2, r3, [r1, #20]
	lexer->start = lexer->pos;
   1e88c:	604b      	str	r3, [r1, #4]
			next(lexer);
   1e88e:	4608      	mov	r0, r1
   1e890:	f01f fdc5 	bl	3e41e <next>
	lexer->start = lexer->pos;
   1e894:	688b      	ldr	r3, [r1, #8]
			return lexer_json;
   1e896:	4802      	ldr	r0, [pc, #8]	; (1e8a0 <lexer_string+0xc8>)
	lexer->start = lexer->pos;
   1e898:	604b      	str	r3, [r1, #4]
			return lexer_json;
   1e89a:	e7ad      	b.n	1e7f8 <lexer_string+0x20>
   1e89c:	000496aa 	.word	0x000496aa
   1e8a0:	0001e965 	.word	0x0001e965

0001e8a4 <lexer_boolean>:

	return 0;
}

static void *lexer_boolean(struct lexer *lexer)
{
   1e8a4:	b538      	push	{r3, r4, r5, lr}
	lexer->pos--;
   1e8a6:	6883      	ldr	r3, [r0, #8]
{
   1e8a8:	4604      	mov	r4, r0
	lexer->pos--;
   1e8aa:	3b01      	subs	r3, #1
   1e8ac:	6083      	str	r3, [r0, #8]
	backup(lexer);

	switch (next(lexer)) {
   1e8ae:	f01f fdb6 	bl	3e41e <next>
   1e8b2:	2866      	cmp	r0, #102	; 0x66
   1e8b4:	4605      	mov	r5, r0
   1e8b6:	d00e      	beq.n	1e8d6 <lexer_boolean+0x32>
   1e8b8:	2874      	cmp	r0, #116	; 0x74
   1e8ba:	d10e      	bne.n	1e8da <lexer_boolean+0x36>
	case 't':
		if (!accept_run(lexer, "rue")) {
   1e8bc:	490b      	ldr	r1, [pc, #44]	; (1e8ec <lexer_boolean+0x48>)
			emit(lexer, JSON_TOK_TRUE);
			return lexer_json;
		}
		break;
	case 'f':
		if (!accept_run(lexer, "alse")) {
   1e8be:	4620      	mov	r0, r4
   1e8c0:	f01f fdb9 	bl	3e436 <accept_run>
   1e8c4:	b948      	cbnz	r0, 1e8da <lexer_boolean+0x36>
	lexer->token.start = lexer->start;
   1e8c6:	6863      	ldr	r3, [r4, #4]
			emit(lexer, JSON_TOK_FALSE);
			return lexer_json;
   1e8c8:	4809      	ldr	r0, [pc, #36]	; (1e8f0 <lexer_boolean+0x4c>)
	lexer->token.start = lexer->start;
   1e8ca:	6163      	str	r3, [r4, #20]
	lexer->token.end = lexer->pos;
   1e8cc:	68a3      	ldr	r3, [r4, #8]
	lexer->token.type = token;
   1e8ce:	7425      	strb	r5, [r4, #16]
	lexer->token.end = lexer->pos;
   1e8d0:	61a3      	str	r3, [r4, #24]
	lexer->start = lexer->pos;
   1e8d2:	6063      	str	r3, [r4, #4]
		break;
	}

	emit(lexer, JSON_TOK_ERROR);
	return NULL;
}
   1e8d4:	bd38      	pop	{r3, r4, r5, pc}
		if (!accept_run(lexer, "alse")) {
   1e8d6:	4907      	ldr	r1, [pc, #28]	; (1e8f4 <lexer_boolean+0x50>)
   1e8d8:	e7f1      	b.n	1e8be <lexer_boolean+0x1a>
	lexer->token.type = token;
   1e8da:	2321      	movs	r3, #33	; 0x21
   1e8dc:	7423      	strb	r3, [r4, #16]
	lexer->token.start = lexer->start;
   1e8de:	6863      	ldr	r3, [r4, #4]
	return NULL;
   1e8e0:	2000      	movs	r0, #0
	lexer->token.start = lexer->start;
   1e8e2:	6163      	str	r3, [r4, #20]
	lexer->token.end = lexer->pos;
   1e8e4:	68a3      	ldr	r3, [r4, #8]
   1e8e6:	61a3      	str	r3, [r4, #24]
	lexer->start = lexer->pos;
   1e8e8:	6063      	str	r3, [r4, #4]
	return NULL;
   1e8ea:	e7f3      	b.n	1e8d4 <lexer_boolean+0x30>
   1e8ec:	0004600f 	.word	0x0004600f
   1e8f0:	0001e965 	.word	0x0001e965
   1e8f4:	00046009 	.word	0x00046009

0001e8f8 <lexer_number>:
	emit(lexer, JSON_TOK_NULL);
	return lexer_json;
}

static void *lexer_number(struct lexer *lexer)
{
   1e8f8:	4601      	mov	r1, r0
   1e8fa:	b510      	push	{r4, lr}
	while (true) {
		int chr = next(lexer);

		if (isdigit(chr) || chr == '.') {
   1e8fc:	4c09      	ldr	r4, [pc, #36]	; (1e924 <lexer_number+0x2c>)
		int chr = next(lexer);
   1e8fe:	4608      	mov	r0, r1
   1e900:	f01f fd8d 	bl	3e41e <next>
		if (isdigit(chr) || chr == '.') {
   1e904:	5d03      	ldrb	r3, [r0, r4]
   1e906:	075b      	lsls	r3, r3, #29
   1e908:	d4f9      	bmi.n	1e8fe <lexer_number+0x6>
   1e90a:	282e      	cmp	r0, #46	; 0x2e
   1e90c:	d0f7      	beq.n	1e8fe <lexer_number+0x6>
	lexer->token.type = token;
   1e90e:	2230      	movs	r2, #48	; 0x30
	lexer->pos--;
   1e910:	688b      	ldr	r3, [r1, #8]
	lexer->token.type = token;
   1e912:	740a      	strb	r2, [r1, #16]
	lexer->token.start = lexer->start;
   1e914:	684a      	ldr	r2, [r1, #4]
	lexer->pos--;
   1e916:	3b01      	subs	r3, #1
   1e918:	608b      	str	r3, [r1, #8]
	lexer->token.end = lexer->pos;
   1e91a:	e9c1 2305 	strd	r2, r3, [r1, #20]
	lexer->start = lexer->pos;
   1e91e:	604b      	str	r3, [r1, #4]
		backup(lexer);
		emit(lexer, JSON_TOK_NUMBER);

		return lexer_json;
	}
}
   1e920:	4801      	ldr	r0, [pc, #4]	; (1e928 <lexer_number+0x30>)
   1e922:	bd10      	pop	{r4, pc}
   1e924:	000496aa 	.word	0x000496aa
   1e928:	0001e965 	.word	0x0001e965

0001e92c <lexer_null>:
{
   1e92c:	b510      	push	{r4, lr}
	if (accept_run(lexer, "ull") < 0) {
   1e92e:	490b      	ldr	r1, [pc, #44]	; (1e95c <lexer_null+0x30>)
{
   1e930:	4604      	mov	r4, r0
	if (accept_run(lexer, "ull") < 0) {
   1e932:	f01f fd80 	bl	3e436 <accept_run>
   1e936:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1e93a:	2800      	cmp	r0, #0
   1e93c:	da06      	bge.n	1e94c <lexer_null+0x20>
	lexer->token.type = token;
   1e93e:	2121      	movs	r1, #33	; 0x21
	lexer->start = lexer->pos;
   1e940:	2000      	movs	r0, #0
	lexer->token.end = lexer->pos;
   1e942:	e9c4 2305 	strd	r2, r3, [r4, #20]
	lexer->token.type = token;
   1e946:	7421      	strb	r1, [r4, #16]
	lexer->start = lexer->pos;
   1e948:	6063      	str	r3, [r4, #4]
}
   1e94a:	bd10      	pop	{r4, pc}
	lexer->token.type = token;
   1e94c:	216e      	movs	r1, #110	; 0x6e
	lexer->token.end = lexer->pos;
   1e94e:	e9c4 2305 	strd	r2, r3, [r4, #20]
	lexer->token.type = token;
   1e952:	7421      	strb	r1, [r4, #16]
	lexer->start = lexer->pos;
   1e954:	6063      	str	r3, [r4, #4]
	return lexer_json;
   1e956:	4802      	ldr	r0, [pc, #8]	; (1e960 <lexer_null+0x34>)
   1e958:	e7f7      	b.n	1e94a <lexer_null+0x1e>
   1e95a:	bf00      	nop
   1e95c:	00045ff2 	.word	0x00045ff2
   1e960:	0001e965 	.word	0x0001e965

0001e964 <lexer_json>:

static void *lexer_json(struct lexer *lexer)
{
   1e964:	b538      	push	{r3, r4, r5, lr}
   1e966:	4604      	mov	r4, r0
			return lexer_null;
		case 't':
		case 'f':
			return lexer_boolean;
		case '-':
			if (isdigit(peek(lexer))) {
   1e968:	4d25      	ldr	r5, [pc, #148]	; (1ea00 <lexer_json+0x9c>)
		int chr = next(lexer);
   1e96a:	4620      	mov	r0, r4
   1e96c:	f01f fd57 	bl	3e41e <next>
		switch (chr) {
   1e970:	285b      	cmp	r0, #91	; 0x5b
		int chr = next(lexer);
   1e972:	4601      	mov	r1, r0
		switch (chr) {
   1e974:	d010      	beq.n	1e998 <lexer_json+0x34>
   1e976:	dc17      	bgt.n	1e9a8 <lexer_json+0x44>
   1e978:	282c      	cmp	r0, #44	; 0x2c
   1e97a:	d00d      	beq.n	1e998 <lexer_json+0x34>
   1e97c:	dc08      	bgt.n	1e990 <lexer_json+0x2c>
   1e97e:	b310      	cbz	r0, 1e9c6 <lexer_json+0x62>
   1e980:	2822      	cmp	r0, #34	; 0x22
   1e982:	d039      	beq.n	1e9f8 <lexer_json+0x94>
				return lexer_number;
			}

			/* fallthrough */
		default:
			if (isspace(chr)) {
   1e984:	5d49      	ldrb	r1, [r1, r5]
   1e986:	070b      	lsls	r3, r1, #28
   1e988:	d530      	bpl.n	1e9ec <lexer_json+0x88>
	lexer->start = lexer->pos;
   1e98a:	68a3      	ldr	r3, [r4, #8]
   1e98c:	6063      	str	r3, [r4, #4]
				ignore(lexer);
				continue;
   1e98e:	e7ec      	b.n	1e96a <lexer_json+0x6>
		switch (chr) {
   1e990:	282d      	cmp	r0, #45	; 0x2d
   1e992:	d020      	beq.n	1e9d6 <lexer_json+0x72>
   1e994:	283a      	cmp	r0, #58	; 0x3a
   1e996:	d1f5      	bne.n	1e984 <lexer_json+0x20>
	lexer->token.start = lexer->start;
   1e998:	6863      	ldr	r3, [r4, #4]
			return lexer_json;
   1e99a:	481a      	ldr	r0, [pc, #104]	; (1ea04 <lexer_json+0xa0>)
	lexer->token.start = lexer->start;
   1e99c:	6163      	str	r3, [r4, #20]
	lexer->token.end = lexer->pos;
   1e99e:	68a3      	ldr	r3, [r4, #8]
			emit(lexer, (enum json_tokens)chr);
   1e9a0:	7421      	strb	r1, [r4, #16]
	lexer->token.end = lexer->pos;
   1e9a2:	61a3      	str	r3, [r4, #24]
	lexer->start = lexer->pos;
   1e9a4:	6063      	str	r3, [r4, #4]

			emit(lexer, JSON_TOK_ERROR);
			return NULL;
		}
	}
}
   1e9a6:	bd38      	pop	{r3, r4, r5, pc}
		switch (chr) {
   1e9a8:	286e      	cmp	r0, #110	; 0x6e
   1e9aa:	d027      	beq.n	1e9fc <lexer_json+0x98>
   1e9ac:	dc05      	bgt.n	1e9ba <lexer_json+0x56>
   1e9ae:	285d      	cmp	r0, #93	; 0x5d
   1e9b0:	d0f2      	beq.n	1e998 <lexer_json+0x34>
   1e9b2:	2866      	cmp	r0, #102	; 0x66
   1e9b4:	d1e6      	bne.n	1e984 <lexer_json+0x20>
			return lexer_boolean;
   1e9b6:	4814      	ldr	r0, [pc, #80]	; (1ea08 <lexer_json+0xa4>)
   1e9b8:	e7f5      	b.n	1e9a6 <lexer_json+0x42>
		switch (chr) {
   1e9ba:	287b      	cmp	r0, #123	; 0x7b
   1e9bc:	d0ec      	beq.n	1e998 <lexer_json+0x34>
   1e9be:	287d      	cmp	r0, #125	; 0x7d
   1e9c0:	d0ea      	beq.n	1e998 <lexer_json+0x34>
   1e9c2:	2874      	cmp	r0, #116	; 0x74
   1e9c4:	e7f6      	b.n	1e9b4 <lexer_json+0x50>
	lexer->token.type = token;
   1e9c6:	7420      	strb	r0, [r4, #16]
	lexer->token.start = lexer->start;
   1e9c8:	6863      	ldr	r3, [r4, #4]
			return NULL;
   1e9ca:	4608      	mov	r0, r1
	lexer->token.start = lexer->start;
   1e9cc:	6163      	str	r3, [r4, #20]
	lexer->token.end = lexer->pos;
   1e9ce:	68a3      	ldr	r3, [r4, #8]
   1e9d0:	61a3      	str	r3, [r4, #24]
	lexer->start = lexer->pos;
   1e9d2:	6063      	str	r3, [r4, #4]
			return NULL;
   1e9d4:	e7e7      	b.n	1e9a6 <lexer_json+0x42>
	int chr = next(lexer);
   1e9d6:	4620      	mov	r0, r4
   1e9d8:	f01f fd21 	bl	3e41e <next>
	lexer->pos--;
   1e9dc:	68a3      	ldr	r3, [r4, #8]
   1e9de:	3b01      	subs	r3, #1
   1e9e0:	60a3      	str	r3, [r4, #8]
			if (isdigit(peek(lexer))) {
   1e9e2:	5c2b      	ldrb	r3, [r5, r0]
   1e9e4:	075a      	lsls	r2, r3, #29
   1e9e6:	d5cd      	bpl.n	1e984 <lexer_json+0x20>
				return lexer_number;
   1e9e8:	4808      	ldr	r0, [pc, #32]	; (1ea0c <lexer_json+0xa8>)
   1e9ea:	e7dc      	b.n	1e9a6 <lexer_json+0x42>
			if (isdigit(chr)) {
   1e9ec:	f011 0104 	ands.w	r1, r1, #4
   1e9f0:	d1fa      	bne.n	1e9e8 <lexer_json+0x84>
	lexer->token.type = token;
   1e9f2:	2321      	movs	r3, #33	; 0x21
   1e9f4:	7423      	strb	r3, [r4, #16]
   1e9f6:	e7e7      	b.n	1e9c8 <lexer_json+0x64>
			return lexer_string;
   1e9f8:	4805      	ldr	r0, [pc, #20]	; (1ea10 <lexer_json+0xac>)
   1e9fa:	e7d4      	b.n	1e9a6 <lexer_json+0x42>
			return lexer_null;
   1e9fc:	4805      	ldr	r0, [pc, #20]	; (1ea14 <lexer_json+0xb0>)
   1e9fe:	e7d2      	b.n	1e9a6 <lexer_json+0x42>
   1ea00:	000496aa 	.word	0x000496aa
   1ea04:	0001e965 	.word	0x0001e965
   1ea08:	0001e8a5 	.word	0x0001e8a5
   1ea0c:	0001e8f9 	.word	0x0001e8f9
   1ea10:	0001e7d9 	.word	0x0001e7d9
   1ea14:	0001e92d 	.word	0x0001e92d

0001ea18 <decode_value>:
		     size_t max_elements, void *field, void *val);

static int decode_value(struct json_obj *obj,
			const struct json_obj_descr *descr,
			struct token *value, void *field, void *val)
{
   1ea18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ea1c:	4615      	mov	r5, r2

	if (!equivalent_types(value->type, descr->type)) {
   1ea1e:	7812      	ldrb	r2, [r2, #0]
{
   1ea20:	461c      	mov	r4, r3
	if (!equivalent_types(value->type, descr->type)) {
   1ea22:	794b      	ldrb	r3, [r1, #5]
{
   1ea24:	b086      	sub	sp, #24
	if (type1 == JSON_TOK_TRUE || type1 == JSON_TOK_FALSE) {
   1ea26:	2a74      	cmp	r2, #116	; 0x74
{
   1ea28:	4606      	mov	r6, r0
   1ea2a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	if (!equivalent_types(value->type, descr->type)) {
   1ea2c:	ea4f 0353 	mov.w	r3, r3, lsr #1
	if (type1 == JSON_TOK_TRUE || type1 == JSON_TOK_FALSE) {
   1ea30:	d001      	beq.n	1ea36 <decode_value+0x1e>
   1ea32:	2a66      	cmp	r2, #102	; 0x66
   1ea34:	d113      	bne.n	1ea5e <decode_value+0x46>
		return type2 == JSON_TOK_TRUE || type2 == JSON_TOK_FALSE;
   1ea36:	2b74      	cmp	r3, #116	; 0x74
   1ea38:	d004      	beq.n	1ea44 <decode_value+0x2c>
   1ea3a:	2b66      	cmp	r3, #102	; 0x66
	return type1 == type2;
   1ea3c:	bf14      	ite	ne
   1ea3e:	2000      	movne	r0, #0
   1ea40:	2001      	moveq	r0, #1
   1ea42:	e000      	b.n	1ea46 <decode_value+0x2e>
		return type2 == JSON_TOK_TRUE || type2 == JSON_TOK_FALSE;
   1ea44:	2001      	movs	r0, #1
	if (!equivalent_types(value->type, descr->type)) {
   1ea46:	b138      	cbz	r0, 1ea58 <decode_value+0x40>
		return -EINVAL;
	}

	switch (descr->type) {
   1ea48:	2b5b      	cmp	r3, #91	; 0x5b
   1ea4a:	d01f      	beq.n	1ea8c <decode_value+0x74>
   1ea4c:	d809      	bhi.n	1ea62 <decode_value+0x4a>
   1ea4e:	2b22      	cmp	r3, #34	; 0x22
   1ea50:	f000 8084 	beq.w	1eb5c <decode_value+0x144>
   1ea54:	2b30      	cmp	r3, #48	; 0x30
   1ea56:	d062      	beq.n	1eb1e <decode_value+0x106>
		return -EINVAL;
   1ea58:	f06f 0015 	mvn.w	r0, #21
   1ea5c:	e013      	b.n	1ea86 <decode_value+0x6e>
	return type1 == type2;
   1ea5e:	429a      	cmp	r2, r3
   1ea60:	e7ec      	b.n	1ea3c <decode_value+0x24>
	switch (descr->type) {
   1ea62:	2b74      	cmp	r3, #116	; 0x74
   1ea64:	d003      	beq.n	1ea6e <decode_value+0x56>
   1ea66:	2b7b      	cmp	r3, #123	; 0x7b
   1ea68:	d007      	beq.n	1ea7a <decode_value+0x62>
   1ea6a:	2b66      	cmp	r3, #102	; 0x66
   1ea6c:	d1f4      	bne.n	1ea58 <decode_value+0x40>
				 descr->array.n_elements, field, val);
	case JSON_TOK_FALSE:
	case JSON_TOK_TRUE: {
		bool *v = field;

		*v = value->type == JSON_TOK_TRUE;
   1ea6e:	f1a2 0374 	sub.w	r3, r2, #116	; 0x74
   1ea72:	425a      	negs	r2, r3
   1ea74:	415a      	adcs	r2, r3
   1ea76:	7022      	strb	r2, [r4, #0]
   1ea78:	e033      	b.n	1eae2 <decode_value+0xca>
		return obj_parse(obj, descr->object.sub_descr,
   1ea7a:	4623      	mov	r3, r4
   1ea7c:	e9d1 1202 	ldrd	r1, r2, [r1, #8]
   1ea80:	4630      	mov	r0, r6
   1ea82:	f01f fd56 	bl	3e532 <obj_parse>
		return 0;
	}
	default:
		return -EINVAL;
	}
}
   1ea86:	b006      	add	sp, #24
   1ea88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return arr_parse(obj, descr->array.element_descr,
   1ea8c:	688d      	ldr	r5, [r1, #8]

static int arr_parse(struct json_obj *obj,
		     const struct json_obj_descr *elem_descr,
		     size_t max_elements, void *field, void *val)
{
	ptrdiff_t elem_size = get_elem_size(elem_descr);
   1ea8e:	4628      	mov	r0, r5
   1ea90:	f01f fcf4 	bl	3e47c <get_elem_size>
	void *last_elem = (char *)field + elem_size * max_elements;
   1ea94:	68cb      	ldr	r3, [r1, #12]
	size_t *elements = (size_t *)((char *)val + elem_descr->offset);
	struct token value;

	assert(elem_size > 0);
   1ea96:	2800      	cmp	r0, #0
	void *last_elem = (char *)field + elem_size * max_elements;
   1ea98:	fb03 4900 	mla	r9, r3, r0, r4
	size_t *elements = (size_t *)((char *)val + elem_descr->offset);
   1ea9c:	88eb      	ldrh	r3, [r5, #6]
	ptrdiff_t elem_size = get_elem_size(elem_descr);
   1ea9e:	4680      	mov	r8, r0
	size_t *elements = (size_t *)((char *)val + elem_descr->offset);
   1eaa0:	eb07 0a03 	add.w	sl, r7, r3
	assert(elem_size > 0);
   1eaa4:	dc06      	bgt.n	1eab4 <decode_value+0x9c>
   1eaa6:	4b30      	ldr	r3, [pc, #192]	; (1eb68 <decode_value+0x150>)
   1eaa8:	4a30      	ldr	r2, [pc, #192]	; (1eb6c <decode_value+0x154>)
   1eaaa:	f240 2103 	movw	r1, #515	; 0x203
   1eaae:	4830      	ldr	r0, [pc, #192]	; (1eb70 <decode_value+0x158>)
   1eab0:	f01d f9b8 	bl	3be24 <__assert_func>

	*elements = 0;
   1eab4:	2200      	movs	r2, #0
   1eab6:	50fa      	str	r2, [r7, r3]
	if (!lexer_next(&json->lexer, value)) {
   1eab8:	a903      	add	r1, sp, #12
   1eaba:	4630      	mov	r0, r6
   1eabc:	f01f fd1c 	bl	3e4f8 <lexer_next>
   1eac0:	2800      	cmp	r0, #0
   1eac2:	d0c9      	beq.n	1ea58 <decode_value+0x40>
	if (value->type == JSON_TOK_LIST_END) {
   1eac4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1eac8:	2b5d      	cmp	r3, #93	; 0x5d
   1eaca:	d00a      	beq.n	1eae2 <decode_value+0xca>
	if (value->type == JSON_TOK_COMMA) {
   1eacc:	2b2c      	cmp	r3, #44	; 0x2c
   1eace:	d01c      	beq.n	1eb0a <decode_value+0xf2>
	return element_token(value->type);
   1ead0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1ead4:	4618      	mov	r0, r3
   1ead6:	f01f fcbe 	bl	3e456 <element_token>

	while (!arr_next(obj, &value)) {
   1eada:	2800      	cmp	r0, #0
   1eadc:	d1bc      	bne.n	1ea58 <decode_value+0x40>
		if (value.type == JSON_TOK_LIST_END) {
   1eade:	2b5d      	cmp	r3, #93	; 0x5d
   1eae0:	d101      	bne.n	1eae6 <decode_value+0xce>
		return 0;
   1eae2:	2000      	movs	r0, #0
   1eae4:	e7cf      	b.n	1ea86 <decode_value+0x6e>
			return 0;
		}

		if (field == last_elem) {
   1eae6:	45a1      	cmp	r9, r4
   1eae8:	d016      	beq.n	1eb18 <decode_value+0x100>
			return -ENOSPC;
		}

		if (decode_value(obj, elem_descr, &value, field, val) < 0) {
   1eaea:	9700      	str	r7, [sp, #0]
   1eaec:	4623      	mov	r3, r4
   1eaee:	aa03      	add	r2, sp, #12
   1eaf0:	4629      	mov	r1, r5
   1eaf2:	4630      	mov	r0, r6
   1eaf4:	f7ff ff90 	bl	1ea18 <decode_value>
   1eaf8:	2800      	cmp	r0, #0
   1eafa:	dbad      	blt.n	1ea58 <decode_value+0x40>
			return -EINVAL;
		}

		(*elements)++;
   1eafc:	f8da 3000 	ldr.w	r3, [sl]
		field = (char *)field + elem_size;
   1eb00:	4444      	add	r4, r8
		(*elements)++;
   1eb02:	3301      	adds	r3, #1
   1eb04:	f8ca 3000 	str.w	r3, [sl]
		field = (char *)field + elem_size;
   1eb08:	e7d6      	b.n	1eab8 <decode_value+0xa0>
		if (!lexer_next(&json->lexer, value)) {
   1eb0a:	a903      	add	r1, sp, #12
   1eb0c:	4630      	mov	r0, r6
   1eb0e:	f01f fcf3 	bl	3e4f8 <lexer_next>
   1eb12:	2800      	cmp	r0, #0
   1eb14:	d1dc      	bne.n	1ead0 <decode_value+0xb8>
   1eb16:	e79f      	b.n	1ea58 <decode_value+0x40>
			return -ENOSPC;
   1eb18:	f06f 001b 	mvn.w	r0, #27
		return arr_parse(obj, descr->array.element_descr,
   1eb1c:	e7b3      	b.n	1ea86 <decode_value+0x6e>
	*token->end = '\0';
   1eb1e:	2600      	movs	r6, #0
	prev_end = *token->end;
   1eb20:	68ab      	ldr	r3, [r5, #8]
   1eb22:	781f      	ldrb	r7, [r3, #0]
	*token->end = '\0';
   1eb24:	701e      	strb	r6, [r3, #0]
	errno = 0;
   1eb26:	f020 f8f4 	bl	3ed12 <__errno>
	*num = strtol(token->start, &endptr, 10);
   1eb2a:	220a      	movs	r2, #10
	errno = 0;
   1eb2c:	6006      	str	r6, [r0, #0]
	*num = strtol(token->start, &endptr, 10);
   1eb2e:	a903      	add	r1, sp, #12
   1eb30:	6868      	ldr	r0, [r5, #4]
   1eb32:	f01e f817 	bl	3cb64 <strtol>
	*token->end = prev_end;
   1eb36:	68ab      	ldr	r3, [r5, #8]
	*num = strtol(token->start, &endptr, 10);
   1eb38:	6020      	str	r0, [r4, #0]
	*token->end = prev_end;
   1eb3a:	701f      	strb	r7, [r3, #0]
	if (errno != 0) {
   1eb3c:	f020 f8e9 	bl	3ed12 <__errno>
   1eb40:	6800      	ldr	r0, [r0, #0]
   1eb42:	b120      	cbz	r0, 1eb4e <decode_value+0x136>
		return -errno;
   1eb44:	f020 f8e5 	bl	3ed12 <__errno>
   1eb48:	6800      	ldr	r0, [r0, #0]
   1eb4a:	4240      	negs	r0, r0
   1eb4c:	e79b      	b.n	1ea86 <decode_value+0x6e>
	if (endptr != token->end) {
   1eb4e:	68aa      	ldr	r2, [r5, #8]
   1eb50:	9b03      	ldr	r3, [sp, #12]
		return -EINVAL;
   1eb52:	429a      	cmp	r2, r3
   1eb54:	bf18      	it	ne
   1eb56:	f06f 0015 	mvnne.w	r0, #21
   1eb5a:	e794      	b.n	1ea86 <decode_value+0x6e>
		*value->end = '\0';
   1eb5c:	2000      	movs	r0, #0
   1eb5e:	68ab      	ldr	r3, [r5, #8]
   1eb60:	7018      	strb	r0, [r3, #0]
		*str = value->start;
   1eb62:	686b      	ldr	r3, [r5, #4]
   1eb64:	6023      	str	r3, [r4, #0]
		return 0;
   1eb66:	e78e      	b.n	1ea86 <decode_value+0x6e>
   1eb68:	00044ef4 	.word	0x00044ef4
   1eb6c:	00044edb 	.word	0x00044edb
   1eb70:	00044f02 	.word	0x00044f02

0001eb74 <json_obj_parse>:
}

int json_obj_parse(char *payload, size_t len,
		   const struct json_obj_descr *descr, size_t descr_len,
		   void *val)
{
   1eb74:	b530      	push	{r4, r5, lr}
	struct json_obj obj;
	int ret;

	assert(descr_len < (sizeof(ret) * CHAR_BIT - 1));
   1eb76:	2b1e      	cmp	r3, #30
{
   1eb78:	b08b      	sub	sp, #44	; 0x2c
   1eb7a:	4615      	mov	r5, r2
   1eb7c:	461c      	mov	r4, r3
	assert(descr_len < (sizeof(ret) * CHAR_BIT - 1));
   1eb7e:	d906      	bls.n	1eb8e <json_obj_parse+0x1a>
   1eb80:	4b11      	ldr	r3, [pc, #68]	; (1ebc8 <json_obj_parse+0x54>)
   1eb82:	4a12      	ldr	r2, [pc, #72]	; (1ebcc <json_obj_parse+0x58>)
   1eb84:	f44f 7114 	mov.w	r1, #592	; 0x250
   1eb88:	4811      	ldr	r0, [pc, #68]	; (1ebd0 <json_obj_parse+0x5c>)
   1eb8a:	f01d f94b 	bl	3be24 <__assert_func>
	lexer->state = lexer_json;
   1eb8e:	4b11      	ldr	r3, [pc, #68]	; (1ebd4 <json_obj_parse+0x60>)
	lexer->pos = data;
   1eb90:	9005      	str	r0, [sp, #20]
	lexer->start = data;
   1eb92:	e9cd 3003 	strd	r3, r0, [sp, #12]
	lexer->token.type = JSON_TOK_NONE;
   1eb96:	235f      	movs	r3, #95	; 0x5f
	lexer->end = data + len;
   1eb98:	4408      	add	r0, r1
   1eb9a:	9006      	str	r0, [sp, #24]
	if (!lexer_next(&json->lexer, &token)) {
   1eb9c:	4669      	mov	r1, sp
   1eb9e:	a803      	add	r0, sp, #12
	lexer->token.type = JSON_TOK_NONE;
   1eba0:	f88d 301c 	strb.w	r3, [sp, #28]
	if (!lexer_next(&json->lexer, &token)) {
   1eba4:	f01f fca8 	bl	3e4f8 <lexer_next>
   1eba8:	b918      	cbnz	r0, 1ebb2 <json_obj_parse+0x3e>
		return -EINVAL;
   1ebaa:	f06f 0015 	mvn.w	r0, #21
	if (ret < 0) {
		return ret;
	}

	return obj_parse(&obj, descr, descr_len, val);
}
   1ebae:	b00b      	add	sp, #44	; 0x2c
   1ebb0:	bd30      	pop	{r4, r5, pc}
	if (token.type != JSON_TOK_OBJECT_START) {
   1ebb2:	f89d 3000 	ldrb.w	r3, [sp]
   1ebb6:	2b7b      	cmp	r3, #123	; 0x7b
   1ebb8:	d1f7      	bne.n	1ebaa <json_obj_parse+0x36>
	return obj_parse(&obj, descr, descr_len, val);
   1ebba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ebbc:	4622      	mov	r2, r4
   1ebbe:	4629      	mov	r1, r5
   1ebc0:	a803      	add	r0, sp, #12
   1ebc2:	f01f fcb6 	bl	3e532 <obj_parse>
   1ebc6:	e7f2      	b.n	1ebae <json_obj_parse+0x3a>
   1ebc8:	00044f1c 	.word	0x00044f1c
   1ebcc:	00044ee5 	.word	0x00044ee5
   1ebd0:	00044f02 	.word	0x00044f02
   1ebd4:	0001e965 	.word	0x0001e965

0001ebd8 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   1ebd8:	680b      	ldr	r3, [r1, #0]
   1ebda:	3301      	adds	r3, #1
   1ebdc:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   1ebde:	4b01      	ldr	r3, [pc, #4]	; (1ebe4 <char_out+0xc>)
   1ebe0:	681b      	ldr	r3, [r3, #0]
   1ebe2:	4718      	bx	r3
   1ebe4:	20031230 	.word	0x20031230

0001ebe8 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
   1ebe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ebec:	b085      	sub	sp, #20
   1ebee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1ebf0:	469b      	mov	fp, r3
   1ebf2:	2c01      	cmp	r4, #1
   1ebf4:	bfb8      	it	lt
   1ebf6:	2401      	movlt	r4, #1
   1ebf8:	2b01      	cmp	r3, #1
   1ebfa:	bf0c      	ite	eq
   1ebfc:	2330      	moveq	r3, #48	; 0x30
   1ebfe:	2320      	movne	r3, #32
   1ec00:	4616      	mov	r6, r2
   1ec02:	4682      	mov	sl, r0
   1ec04:	4688      	mov	r8, r1
   1ec06:	2501      	movs	r5, #1
   1ec08:	270a      	movs	r7, #10
   1ec0a:	2200      	movs	r2, #0
   1ec0c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1ec7c <_printk_dec_ulong+0x94>
   1ec10:	9302      	str	r3, [sp, #8]
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
   1ec12:	fbb6 f3f9 	udiv	r3, r6, r9
   1ec16:	9301      	str	r3, [sp, #4]
   1ec18:	b90a      	cbnz	r2, 1ec1e <_printk_dec_ulong+0x36>
   1ec1a:	45b1      	cmp	r9, r6
   1ec1c:	d81c      	bhi.n	1ec58 <_printk_dec_ulong+0x70>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
   1ec1e:	9b01      	ldr	r3, [sp, #4]
   1ec20:	4641      	mov	r1, r8
   1ec22:	f103 0030 	add.w	r0, r3, #48	; 0x30
   1ec26:	47d0      	blx	sl
			found_largest_digit = 1;
   1ec28:	2201      	movs	r2, #1
			digits++;
   1ec2a:	3501      	adds	r5, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
   1ec2c:	9b01      	ldr	r3, [sp, #4]
		remaining--;
   1ec2e:	3f01      	subs	r7, #1
		remainder %= pos;
   1ec30:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
   1ec34:	230a      	movs	r3, #10
	while (pos >= 10) {
   1ec36:	2f01      	cmp	r7, #1
		pos /= 10;
   1ec38:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
   1ec3c:	d1e9      	bne.n	1ec12 <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
   1ec3e:	4641      	mov	r1, r8
   1ec40:	f106 0030 	add.w	r0, r6, #48	; 0x30
   1ec44:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
   1ec46:	f1bb 0f03 	cmp.w	fp, #3
   1ec4a:	d102      	bne.n	1ec52 <_printk_dec_ulong+0x6a>
		remaining = min_width - digits;
   1ec4c:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
   1ec4e:	2c00      	cmp	r4, #0
   1ec50:	dc0e      	bgt.n	1ec70 <_printk_dec_ulong+0x88>
			out(' ', ctx);
		}
	}
}
   1ec52:	b005      	add	sp, #20
   1ec54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
   1ec58:	42bc      	cmp	r4, r7
   1ec5a:	dbe7      	blt.n	1ec2c <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
   1ec5c:	f1bb 0f02 	cmp.w	fp, #2
   1ec60:	d8e4      	bhi.n	1ec2c <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   1ec62:	4641      	mov	r1, r8
   1ec64:	9802      	ldr	r0, [sp, #8]
   1ec66:	9203      	str	r2, [sp, #12]
			digits++;
   1ec68:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   1ec6a:	47d0      	blx	sl
			digits++;
   1ec6c:	9a03      	ldr	r2, [sp, #12]
   1ec6e:	e7dd      	b.n	1ec2c <_printk_dec_ulong+0x44>
			out(' ', ctx);
   1ec70:	4641      	mov	r1, r8
   1ec72:	2020      	movs	r0, #32
   1ec74:	47d0      	blx	sl
   1ec76:	3c01      	subs	r4, #1
   1ec78:	e7e9      	b.n	1ec4e <_printk_dec_ulong+0x66>
   1ec7a:	bf00      	nop
   1ec7c:	3b9aca00 	.word	0x3b9aca00

0001ec80 <__printk_hook_install>:
	_char_out = fn;
   1ec80:	4b01      	ldr	r3, [pc, #4]	; (1ec88 <__printk_hook_install+0x8>)
   1ec82:	6018      	str	r0, [r3, #0]
}
   1ec84:	4770      	bx	lr
   1ec86:	bf00      	nop
   1ec88:	20031230 	.word	0x20031230

0001ec8c <vprintk>:
	struct out_context ctx = { 0 };
   1ec8c:	2300      	movs	r3, #0
{
   1ec8e:	b507      	push	{r0, r1, r2, lr}
	z_vprintk(char_out, &ctx, fmt, ap);
   1ec90:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   1ec92:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
   1ec94:	4803      	ldr	r0, [pc, #12]	; (1eca4 <vprintk+0x18>)
   1ec96:	460b      	mov	r3, r1
   1ec98:	a901      	add	r1, sp, #4
   1ec9a:	f01f fcd7 	bl	3e64c <z_vprintk>
}
   1ec9e:	b003      	add	sp, #12
   1eca0:	f85d fb04 	ldr.w	pc, [sp], #4
   1eca4:	0001ebd9 	.word	0x0001ebd9

0001eca8 <nordicsemi_nrf91_init>:
	__asm__ volatile(
   1eca8:	f04f 0220 	mov.w	r2, #32
   1ecac:	f3ef 8311 	mrs	r3, BASEPRI
   1ecb0:	f382 8811 	msr	BASEPRI, r2
   1ecb4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1ecb8:	2101      	movs	r1, #1
   1ecba:	4a04      	ldr	r2, [pc, #16]	; (1eccc <nordicsemi_nrf91_init+0x24>)
   1ecbc:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   1ecc0:	f383 8811 	msr	BASEPRI, r3
   1ecc4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   1ecc8:	2000      	movs	r0, #0
   1ecca:	4770      	bx	lr
   1eccc:	40039000 	.word	0x40039000

0001ecd0 <log_generic>:
	if (_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else  if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		u32_t timestamp = timestamp_func();
   1ecd0:	4b13      	ldr	r3, [pc, #76]	; (1ed20 <log_generic+0x50>)
{
   1ecd2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		u32_t timestamp = timestamp_func();
   1ecd6:	681b      	ldr	r3, [r3, #0]
{
   1ecd8:	4680      	mov	r8, r0
   1ecda:	4689      	mov	r9, r1
   1ecdc:	4692      	mov	sl, r2
		u32_t timestamp = timestamp_func();
   1ecde:	4798      	blx	r3

		for (int i = 0; i < log_backend_count_get(); i++) {
   1ece0:	2600      	movs	r6, #0
		u32_t timestamp = timestamp_func();
   1ece2:	4607      	mov	r7, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   1ece4:	4c0f      	ldr	r4, [pc, #60]	; (1ed24 <log_generic+0x54>)
   1ece6:	4d10      	ldr	r5, [pc, #64]	; (1ed28 <log_generic+0x58>)
   1ece8:	1b2d      	subs	r5, r5, r4
   1ecea:	112d      	asrs	r5, r5, #4
		for (int i = 0; i < log_backend_count_get(); i++) {
   1ecec:	42ae      	cmp	r6, r5
   1ecee:	db02      	blt.n	1ecf6 <log_generic+0x26>
			args[i] = va_arg(ap, log_arg_t);
		}

		log_n(fmt, args, nargs, src_level);
	}
}
   1ecf0:	b003      	add	sp, #12
   1ecf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (log_backend_is_active(backend)) {
   1ecf6:	4620      	mov	r0, r4
   1ecf8:	f01f fe2e 	bl	3e958 <log_backend_is_active>
   1ecfc:	b160      	cbz	r0, 1ed18 <log_generic+0x48>
	if (backend->api->put_sync_string) {
   1ecfe:	6823      	ldr	r3, [r4, #0]
   1ed00:	f8d3 b004 	ldr.w	fp, [r3, #4]
   1ed04:	f1bb 0f00 	cmp.w	fp, #0
   1ed08:	d006      	beq.n	1ed18 <log_generic+0x48>
		backend->api->put_sync_string(backend, src_level,
   1ed0a:	f8cd a000 	str.w	sl, [sp]
   1ed0e:	464b      	mov	r3, r9
   1ed10:	463a      	mov	r2, r7
   1ed12:	4641      	mov	r1, r8
   1ed14:	4620      	mov	r0, r4
   1ed16:	47d8      	blx	fp
		for (int i = 0; i < log_backend_count_get(); i++) {
   1ed18:	3601      	adds	r6, #1
   1ed1a:	3410      	adds	r4, #16
   1ed1c:	e7e6      	b.n	1ecec <log_generic+0x1c>
   1ed1e:	bf00      	nop
   1ed20:	20031234 	.word	0x20031234
   1ed24:	0004241c 	.word	0x0004241c
   1ed28:	0004242c 	.word	0x0004242c

0001ed2c <log_core_init>:
	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
		timestamp_func = k_uptime_get_32;
		freq = 1000;
	} else {
		timestamp_func = k_cycle_get_32_wrapper;
   1ed2c:	4b03      	ldr	r3, [pc, #12]	; (1ed3c <log_core_init+0x10>)
   1ed2e:	4a04      	ldr	r2, [pc, #16]	; (1ed40 <log_core_init+0x14>)
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
   1ed30:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
   1ed34:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   1ed36:	f000 ba5d 	b.w	1f1f4 <log_output_timestamp_freq_set>
   1ed3a:	bf00      	nop
   1ed3c:	20031234 	.word	0x20031234
   1ed40:	0003e95f 	.word	0x0003e95f

0001ed44 <log_source_name_get>:
   1ed44:	4a04      	ldr	r2, [pc, #16]	; (1ed58 <log_source_name_get+0x14>)
   1ed46:	4b05      	ldr	r3, [pc, #20]	; (1ed5c <log_source_name_get+0x18>)
   1ed48:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(u32_t domain_id, u32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   1ed4a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   1ed4e:	bf34      	ite	cc
   1ed50:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   1ed54:	2000      	movcs	r0, #0
}
   1ed56:	4770      	bx	lr
   1ed58:	00042314 	.word	0x00042314
   1ed5c:	0004241c 	.word	0x0004241c

0001ed60 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			u32_t level)
{
   1ed60:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	u32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   1ed62:	4c10      	ldr	r4, [pc, #64]	; (1eda4 <log_backend_enable+0x44>)
{
   1ed64:	4605      	mov	r5, r0
	id += backend - log_backend_get(0);
   1ed66:	1b04      	subs	r4, r0, r4
   1ed68:	1124      	asrs	r4, r4, #4
   1ed6a:	3401      	adds	r4, #1
{
   1ed6c:	460e      	mov	r6, r1

	log_backend_id_set(backend, id);
   1ed6e:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   1ed70:	b948      	cbnz	r0, 1ed86 <log_backend_enable+0x26>
   1ed72:	490d      	ldr	r1, [pc, #52]	; (1eda8 <log_backend_enable+0x48>)
   1ed74:	480d      	ldr	r0, [pc, #52]	; (1edac <log_backend_enable+0x4c>)
   1ed76:	23bf      	movs	r3, #191	; 0xbf
   1ed78:	4a0d      	ldr	r2, [pc, #52]	; (1edb0 <log_backend_enable+0x50>)
   1ed7a:	f01f fdd7 	bl	3e92c <printk>
   1ed7e:	21bf      	movs	r1, #191	; 0xbf
   1ed80:	480b      	ldr	r0, [pc, #44]	; (1edb0 <log_backend_enable+0x50>)
   1ed82:	f01f fde0 	bl	3e946 <assert_post_action>
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   1ed86:	2201      	movs	r2, #1
	backend->cb->id = id;
   1ed88:	686b      	ldr	r3, [r5, #4]
   1ed8a:	711c      	strb	r4, [r3, #4]
	log_backend_activate(backend, ctx);

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (!backend_attached) {
   1ed8c:	4c09      	ldr	r4, [pc, #36]	; (1edb4 <log_backend_enable+0x54>)
	backend->cb->active = true;
   1ed8e:	715a      	strb	r2, [r3, #5]
   1ed90:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   1ed92:	601e      	str	r6, [r3, #0]
   1ed94:	b912      	cbnz	r2, 1ed9c <log_backend_enable+0x3c>
		z_arch_syscall_invoke1(*(u32_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1ed96:	4808      	ldr	r0, [pc, #32]	; (1edb8 <log_backend_enable+0x58>)
   1ed98:	f01b fb0a 	bl	3a3b0 <z_impl_k_sem_give>
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
   1ed9c:	2301      	movs	r3, #1
   1ed9e:	7023      	strb	r3, [r4, #0]
}
   1eda0:	bd70      	pop	{r4, r5, r6, pc}
   1eda2:	bf00      	nop
   1eda4:	0004241c 	.word	0x0004241c
   1eda8:	0004462c 	.word	0x0004462c
   1edac:	00044643 	.word	0x00044643
   1edb0:	00044f61 	.word	0x00044f61
   1edb4:	2002a34b 	.word	0x2002a34b
   1edb8:	200315dc 	.word	0x200315dc

0001edbc <log_init>:
{
   1edbc:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
   1edbe:	4b13      	ldr	r3, [pc, #76]	; (1ee0c <log_init+0x50>)
   1edc0:	4c13      	ldr	r4, [pc, #76]	; (1ee10 <log_init+0x54>)
   1edc2:	1b1b      	subs	r3, r3, r4
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   1edc4:	2b90      	cmp	r3, #144	; 0x90
   1edc6:	dd06      	ble.n	1edd6 <log_init+0x1a>
   1edc8:	4b12      	ldr	r3, [pc, #72]	; (1ee14 <log_init+0x58>)
   1edca:	4a13      	ldr	r2, [pc, #76]	; (1ee18 <log_init+0x5c>)
   1edcc:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
   1edd0:	4812      	ldr	r0, [pc, #72]	; (1ee1c <log_init+0x60>)
   1edd2:	f01d f827 	bl	3be24 <__assert_func>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1edd6:	4a12      	ldr	r2, [pc, #72]	; (1ee20 <log_init+0x64>)
   1edd8:	e8d2 6fef 	ldaex	r6, [r2]
   1eddc:	1c71      	adds	r1, r6, #1
   1edde:	e8c2 1fe0 	stlex	r0, r1, [r2]
   1ede2:	2800      	cmp	r0, #0
   1ede4:	d1f8      	bne.n	1edd8 <log_init+0x1c>
	if (atomic_inc(&initialized) != 0) {
   1ede6:	b916      	cbnz	r6, 1edee <log_init+0x32>
   1ede8:	111d      	asrs	r5, r3, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   1edea:	42ae      	cmp	r6, r5
   1edec:	db00      	blt.n	1edf0 <log_init+0x34>
}
   1edee:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   1edf0:	7b23      	ldrb	r3, [r4, #12]
   1edf2:	b143      	cbz	r3, 1ee06 <log_init+0x4a>
			if (backend->api->init != NULL) {
   1edf4:	6823      	ldr	r3, [r4, #0]
   1edf6:	695b      	ldr	r3, [r3, #20]
   1edf8:	b103      	cbz	r3, 1edfc <log_init+0x40>
				backend->api->init();
   1edfa:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   1edfc:	2204      	movs	r2, #4
   1edfe:	2100      	movs	r1, #0
   1ee00:	4620      	mov	r0, r4
   1ee02:	f7ff ffad 	bl	1ed60 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   1ee06:	3601      	adds	r6, #1
   1ee08:	3410      	adds	r4, #16
   1ee0a:	e7ee      	b.n	1edea <log_init+0x2e>
   1ee0c:	0004242c 	.word	0x0004242c
   1ee10:	0004241c 	.word	0x0004241c
   1ee14:	00044f8b 	.word	0x00044f8b
   1ee18:	00044f58 	.word	0x00044f58
   1ee1c:	00044fdf 	.word	0x00044fdf
   1ee20:	20023970 	.word	0x20023970

0001ee24 <z_impl_log_panic>:
{
   1ee24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   1ee26:	4f0c      	ldr	r7, [pc, #48]	; (1ee58 <z_impl_log_panic+0x34>)
   1ee28:	783d      	ldrb	r5, [r7, #0]
   1ee2a:	b94d      	cbnz	r5, 1ee40 <z_impl_log_panic+0x1c>
	log_init();
   1ee2c:	f7ff ffc6 	bl	1edbc <log_init>
   1ee30:	4c0a      	ldr	r4, [pc, #40]	; (1ee5c <z_impl_log_panic+0x38>)
   1ee32:	4e0b      	ldr	r6, [pc, #44]	; (1ee60 <z_impl_log_panic+0x3c>)
   1ee34:	1b36      	subs	r6, r6, r4
   1ee36:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   1ee38:	42b5      	cmp	r5, r6
   1ee3a:	db02      	blt.n	1ee42 <z_impl_log_panic+0x1e>
	panic_mode = true;
   1ee3c:	2301      	movs	r3, #1
   1ee3e:	703b      	strb	r3, [r7, #0]
}
   1ee40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   1ee42:	4620      	mov	r0, r4
   1ee44:	f01f fd88 	bl	3e958 <log_backend_is_active>
   1ee48:	b118      	cbz	r0, 1ee52 <z_impl_log_panic+0x2e>
	backend->api->panic(backend);
   1ee4a:	6823      	ldr	r3, [r4, #0]
   1ee4c:	4620      	mov	r0, r4
   1ee4e:	691b      	ldr	r3, [r3, #16]
   1ee50:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   1ee52:	3501      	adds	r5, #1
   1ee54:	3410      	adds	r4, #16
   1ee56:	e7ef      	b.n	1ee38 <z_impl_log_panic+0x14>
   1ee58:	2002a34c 	.word	0x2002a34c
   1ee5c:	0004241c 	.word	0x0004241c
   1ee60:	0004242c 	.word	0x0004242c

0001ee64 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   1ee64:	b40e      	push	{r1, r2, r3}
   1ee66:	b503      	push	{r0, r1, lr}
   1ee68:	ab03      	add	r3, sp, #12
   1ee6a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
   1ee6e:	4601      	mov	r1, r0
   1ee70:	4804      	ldr	r0, [pc, #16]	; (1ee84 <print_formatted+0x20>)
	va_start(args, fmt);
   1ee72:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
   1ee74:	f01f fbea 	bl	3e64c <z_vprintk>
#endif
	va_end(args);

	return length;
}
   1ee78:	2000      	movs	r0, #0
   1ee7a:	b002      	add	sp, #8
   1ee7c:	f85d eb04 	ldr.w	lr, [sp], #4
   1ee80:	b003      	add	sp, #12
   1ee82:	4770      	bx	lr
   1ee84:	0001f0c1 	.word	0x0001f0c1

0001ee88 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
   1ee88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   1ee8c:	f011 0402 	ands.w	r4, r1, #2
{
   1ee90:	b085      	sub	sp, #20
   1ee92:	4606      	mov	r6, r0
   1ee94:	4690      	mov	r8, r2
   1ee96:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   1ee9a:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   1ee9e:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   1eea2:	d007      	beq.n	1eeb4 <prefix_print+0x2c>
	if (!format) {
   1eea4:	f011 0f44 	tst.w	r1, #68	; 0x44
   1eea8:	d137      	bne.n	1ef1a <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   1eeaa:	461a      	mov	r2, r3
   1eeac:	4932      	ldr	r1, [pc, #200]	; (1ef78 <prefix_print+0xf0>)
   1eeae:	f7ff ffd9 	bl	1ee64 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
   1eeb2:	4604      	mov	r4, r0
	if (color) {
   1eeb4:	f1b9 0f00 	cmp.w	r9, #0
   1eeb8:	d00a      	beq.n	1eed0 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
   1eeba:	4b30      	ldr	r3, [pc, #192]	; (1ef7c <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
   1eebc:	4930      	ldr	r1, [pc, #192]	; (1ef80 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
   1eebe:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
   1eec2:	4b30      	ldr	r3, [pc, #192]	; (1ef84 <prefix_print+0xfc>)
   1eec4:	4630      	mov	r0, r6
   1eec6:	2a00      	cmp	r2, #0
   1eec8:	bf08      	it	eq
   1eeca:	461a      	moveq	r2, r3
   1eecc:	f7ff ffca 	bl	1ee64 <print_formatted>
	if (level_on) {
   1eed0:	b13d      	cbz	r5, 1eee2 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   1eed2:	4b2d      	ldr	r3, [pc, #180]	; (1ef88 <prefix_print+0x100>)
   1eed4:	492d      	ldr	r1, [pc, #180]	; (1ef8c <prefix_print+0x104>)
   1eed6:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   1eeda:	4630      	mov	r0, r6
   1eedc:	f7ff ffc2 	bl	1ee64 <print_formatted>
   1eee0:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   1eee2:	f1b8 0f00 	cmp.w	r8, #0
   1eee6:	d044      	beq.n	1ef72 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   1eee8:	2301      	movs	r3, #1
   1eeea:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   1eeee:	4b28      	ldr	r3, [pc, #160]	; (1ef90 <prefix_print+0x108>)
   1eef0:	f017 0f10 	tst.w	r7, #16
   1eef4:	4f27      	ldr	r7, [pc, #156]	; (1ef94 <prefix_print+0x10c>)
   1eef6:	bf18      	it	ne
   1eef8:	461f      	movne	r7, r3
   1eefa:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   1eefe:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   1ef02:	f7ff ff1f 	bl	1ed44 <log_source_name_get>
   1ef06:	4639      	mov	r1, r7
   1ef08:	4602      	mov	r2, r0
   1ef0a:	4630      	mov	r0, r6
   1ef0c:	f7ff ffaa 	bl	1ee64 <print_formatted>
   1ef10:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
   1ef12:	4420      	add	r0, r4
   1ef14:	b005      	add	sp, #20
   1ef16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   1ef1a:	4a1f      	ldr	r2, [pc, #124]	; (1ef98 <prefix_print+0x110>)
   1ef1c:	6811      	ldr	r1, [r2, #0]
   1ef1e:	b331      	cbz	r1, 1ef6e <prefix_print+0xe6>
		timestamp /= timestamp_div;
   1ef20:	4a1e      	ldr	r2, [pc, #120]	; (1ef9c <prefix_print+0x114>)
   1ef22:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   1ef26:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
   1ef28:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   1ef2c:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
   1ef30:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   1ef34:	fbb4 f2fe 	udiv	r2, r4, lr
   1ef38:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   1ef3c:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   1ef40:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1ef44:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   1ef48:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1ef4c:	fb01 441b 	mls	r4, r1, fp, r4
   1ef50:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   1ef54:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1ef58:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   1ef5c:	e9cd b101 	strd	fp, r1, [sp, #4]
   1ef60:	fb0a e113 	mls	r1, sl, r3, lr
   1ef64:	9100      	str	r1, [sp, #0]
   1ef66:	490e      	ldr	r1, [pc, #56]	; (1efa0 <prefix_print+0x118>)
   1ef68:	f7ff ff7c 	bl	1ee64 <print_formatted>
   1ef6c:	e7a1      	b.n	1eeb2 <prefix_print+0x2a>
		length = 0;
   1ef6e:	4608      	mov	r0, r1
   1ef70:	e79f      	b.n	1eeb2 <prefix_print+0x2a>
	total += print_formatted(log_output,
   1ef72:	4f08      	ldr	r7, [pc, #32]	; (1ef94 <prefix_print+0x10c>)
   1ef74:	e7c1      	b.n	1eefa <prefix_print+0x72>
   1ef76:	bf00      	nop
   1ef78:	0004508d 	.word	0x0004508d
   1ef7c:	0004261c 	.word	0x0004261c
   1ef80:	0004884d 	.word	0x0004884d
   1ef84:	0004507f 	.word	0x0004507f
   1ef88:	00042630 	.word	0x00042630
   1ef8c:	000450b2 	.word	0x000450b2
   1ef90:	00045089 	.word	0x00045089
   1ef94:	00045084 	.word	0x00045084
   1ef98:	20023974 	.word	0x20023974
   1ef9c:	20023978 	.word	0x20023978
   1efa0:	00045096 	.word	0x00045096

0001efa4 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
   1efa4:	b538      	push	{r3, r4, r5, lr}
   1efa6:	460c      	mov	r4, r1
	if (color) {
   1efa8:	07e1      	lsls	r1, r4, #31
{
   1efaa:	4605      	mov	r5, r0
	if (color) {
   1efac:	d503      	bpl.n	1efb6 <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
   1efae:	4a08      	ldr	r2, [pc, #32]	; (1efd0 <postfix_print+0x2c>)
   1efb0:	4908      	ldr	r1, [pc, #32]	; (1efd4 <postfix_print+0x30>)
   1efb2:	f7ff ff57 	bl	1ee64 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1efb6:	06e2      	lsls	r2, r4, #27
   1efb8:	d408      	bmi.n	1efcc <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1efba:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   1efbc:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   1efbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   1efc2:	bf4c      	ite	mi
   1efc4:	4904      	ldrmi	r1, [pc, #16]	; (1efd8 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   1efc6:	4905      	ldrpl	r1, [pc, #20]	; (1efdc <postfix_print+0x38>)
   1efc8:	f7ff bf4c 	b.w	1ee64 <print_formatted>
}
   1efcc:	bd38      	pop	{r3, r4, r5, pc}
   1efce:	bf00      	nop
   1efd0:	0004507f 	.word	0x0004507f
   1efd4:	0004884d 	.word	0x0004884d
   1efd8:	000490e0 	.word	0x000490e0
   1efdc:	0004770f 	.word	0x0004770f

0001efe0 <hexdump_line_print>:
{
   1efe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1efe4:	4698      	mov	r8, r3
   1efe6:	9b08      	ldr	r3, [sp, #32]
   1efe8:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1efea:	06dd      	lsls	r5, r3, #27
{
   1efec:	460e      	mov	r6, r1
   1efee:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1eff0:	d405      	bmi.n	1effe <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1eff2:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   1eff4:	bf4c      	ite	mi
   1eff6:	492a      	ldrmi	r1, [pc, #168]	; (1f0a0 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
   1eff8:	492a      	ldrpl	r1, [pc, #168]	; (1f0a4 <hexdump_line_print+0xc4>)
   1effa:	f7ff ff33 	bl	1ee64 <print_formatted>
{
   1effe:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
   1f000:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1f0ac <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
   1f004:	4545      	cmp	r5, r8
   1f006:	db2d      	blt.n	1f064 <hexdump_line_print+0x84>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1f008:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   1f00a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1f0b0 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
   1f00e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 1f0b4 <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
   1f012:	f8df a098 	ldr.w	sl, [pc, #152]	; 1f0ac <hexdump_line_print+0xcc>
		if (i < length) {
   1f016:	42bd      	cmp	r5, r7
   1f018:	d231      	bcs.n	1f07e <hexdump_line_print+0x9e>
			print_formatted(log_output, "%02x ", data[i]);
   1f01a:	5d72      	ldrb	r2, [r6, r5]
   1f01c:	4649      	mov	r1, r9
   1f01e:	4620      	mov	r0, r4
   1f020:	f7ff ff20 	bl	1ee64 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1f024:	3501      	adds	r5, #1
   1f026:	2d10      	cmp	r5, #16
   1f028:	d122      	bne.n	1f070 <hexdump_line_print+0x90>
	print_formatted(log_output, "|");
   1f02a:	491f      	ldr	r1, [pc, #124]	; (1f0a8 <hexdump_line_print+0xc8>)
   1f02c:	4620      	mov	r0, r4
   1f02e:	f7ff ff19 	bl	1ee64 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1f032:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   1f034:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1f0ac <hexdump_line_print+0xcc>
			      isprint((int)c) ? c : '.');
   1f038:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1f0b8 <hexdump_line_print+0xd8>
			print_formatted(log_output, "%c",
   1f03c:	f8df a07c 	ldr.w	sl, [pc, #124]	; 1f0bc <hexdump_line_print+0xdc>
		if (i < length) {
   1f040:	42af      	cmp	r7, r5
   1f042:	d928      	bls.n	1f096 <hexdump_line_print+0xb6>
			char c = (char)data[i];
   1f044:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
   1f046:	4651      	mov	r1, sl
   1f048:	f812 3009 	ldrb.w	r3, [r2, r9]
   1f04c:	4620      	mov	r0, r4
   1f04e:	f013 0f97 	tst.w	r3, #151	; 0x97
   1f052:	bf08      	it	eq
   1f054:	222e      	moveq	r2, #46	; 0x2e
   1f056:	f7ff ff05 	bl	1ee64 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1f05a:	3501      	adds	r5, #1
   1f05c:	2d10      	cmp	r5, #16
   1f05e:	d113      	bne.n	1f088 <hexdump_line_print+0xa8>
}
   1f060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   1f064:	4649      	mov	r1, r9
   1f066:	4620      	mov	r0, r4
   1f068:	f7ff fefc 	bl	1ee64 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   1f06c:	3501      	adds	r5, #1
   1f06e:	e7c9      	b.n	1f004 <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
   1f070:	076a      	lsls	r2, r5, #29
   1f072:	d1d0      	bne.n	1f016 <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
   1f074:	4651      	mov	r1, sl
   1f076:	4620      	mov	r0, r4
   1f078:	f7ff fef4 	bl	1ee64 <print_formatted>
   1f07c:	e7cb      	b.n	1f016 <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
   1f07e:	4641      	mov	r1, r8
   1f080:	4620      	mov	r0, r4
   1f082:	f7ff feef 	bl	1ee64 <print_formatted>
   1f086:	e7cd      	b.n	1f024 <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
   1f088:	076b      	lsls	r3, r5, #29
   1f08a:	d1d9      	bne.n	1f040 <hexdump_line_print+0x60>
			print_formatted(log_output, " ");
   1f08c:	4641      	mov	r1, r8
   1f08e:	4620      	mov	r0, r4
   1f090:	f7ff fee8 	bl	1ee64 <print_formatted>
   1f094:	e7d4      	b.n	1f040 <hexdump_line_print+0x60>
			print_formatted(log_output, " ");
   1f096:	4641      	mov	r1, r8
   1f098:	4620      	mov	r0, r4
   1f09a:	f7ff fee3 	bl	1ee64 <print_formatted>
   1f09e:	e7dc      	b.n	1f05a <hexdump_line_print+0x7a>
   1f0a0:	000490e0 	.word	0x000490e0
   1f0a4:	0004770f 	.word	0x0004770f
   1f0a8:	0004500f 	.word	0x0004500f
   1f0ac:	0004500d 	.word	0x0004500d
   1f0b0:	0004500b 	.word	0x0004500b
   1f0b4:	00045005 	.word	0x00045005
   1f0b8:	000496aa 	.word	0x000496aa
   1f0bc:	00045011 	.word	0x00045011

0001f0c0 <out_func>:
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
   1f0c0:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   1f0c4:	681b      	ldr	r3, [r3, #0]
{
   1f0c6:	b510      	push	{r4, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
   1f0c8:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
   1f0ca:	684a      	ldr	r2, [r1, #4]
{
   1f0cc:	460c      	mov	r4, r1
	out_ctx->control_block->offset++;
   1f0ce:	6813      	ldr	r3, [r2, #0]
   1f0d0:	3301      	adds	r3, #1
   1f0d2:	6013      	str	r3, [r2, #0]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   1f0d4:	68ca      	ldr	r2, [r1, #12]
   1f0d6:	4293      	cmp	r3, r2
   1f0d8:	d909      	bls.n	1f0ee <out_func+0x2e>
   1f0da:	490a      	ldr	r1, [pc, #40]	; (1f104 <out_func+0x44>)
   1f0dc:	480a      	ldr	r0, [pc, #40]	; (1f108 <out_func+0x48>)
   1f0de:	2365      	movs	r3, #101	; 0x65
   1f0e0:	4a0a      	ldr	r2, [pc, #40]	; (1f10c <out_func+0x4c>)
   1f0e2:	f01f fc23 	bl	3e92c <printk>
   1f0e6:	2165      	movs	r1, #101	; 0x65
   1f0e8:	4808      	ldr	r0, [pc, #32]	; (1f10c <out_func+0x4c>)
   1f0ea:	f01f fc2c 	bl	3e946 <assert_post_action>
	if (out_ctx->control_block->offset == out_ctx->size) {
   1f0ee:	6863      	ldr	r3, [r4, #4]
   1f0f0:	681a      	ldr	r2, [r3, #0]
   1f0f2:	68e3      	ldr	r3, [r4, #12]
   1f0f4:	429a      	cmp	r2, r3
   1f0f6:	d102      	bne.n	1f0fe <out_func+0x3e>
		log_output_flush(out_ctx);
   1f0f8:	4620      	mov	r0, r4
   1f0fa:	f01f fc54 	bl	3e9a6 <log_output_flush>
}
   1f0fe:	2000      	movs	r0, #0
   1f100:	bd10      	pop	{r4, pc}
   1f102:	bf00      	nop
   1f104:	0004504f 	.word	0x0004504f
   1f108:	00044643 	.word	0x00044643
   1f10c:	00045027 	.word	0x00045027

0001f110 <log_output_string>:
}

void log_output_string(const struct log_output *log_output,
		       struct log_msg_ids src_level, u32_t timestamp,
		       const char *fmt, va_list ap, u32_t flags)
{
   1f110:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	u8_t level = (u8_t)src_level.level;
	u8_t domain_id = (u8_t)src_level.domain_id;
	u16_t source_id = (u16_t)src_level.source_id;
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);

	if (!raw_string) {
   1f114:	f011 0407 	ands.w	r4, r1, #7
{
   1f118:	4606      	mov	r6, r0
   1f11a:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
   1f11e:	461d      	mov	r5, r3
	if (!raw_string) {
   1f120:	d00b      	beq.n	1f13a <log_output_string+0x2a>
		prefix_print(log_output, flags, true, timestamp,
   1f122:	f3c1 1389 	ubfx	r3, r1, #6, #10
   1f126:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   1f12a:	9302      	str	r3, [sp, #8]
   1f12c:	e9cd 4100 	strd	r4, r1, [sp]
   1f130:	4613      	mov	r3, r2
   1f132:	4639      	mov	r1, r7
   1f134:	2201      	movs	r2, #1
   1f136:	f7ff fea7 	bl	1ee88 <prefix_print>

#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, ap);
#else
	z_vprintk(out_func, (void *)log_output, fmt, ap);
   1f13a:	4643      	mov	r3, r8
   1f13c:	462a      	mov	r2, r5
   1f13e:	4631      	mov	r1, r6
   1f140:	480d      	ldr	r0, [pc, #52]	; (1f178 <log_output_string+0x68>)
   1f142:	f01f fa83 	bl	3e64c <z_vprintk>
#endif

	(void)length;

	if (raw_string) {
   1f146:	b98c      	cbnz	r4, 1f16c <log_output_string+0x5c>
   1f148:	3d01      	subs	r5, #1
	while (*fmt != '\0') {
   1f14a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   1f14e:	b95b      	cbnz	r3, 1f168 <log_output_string+0x58>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
   1f150:	2c0a      	cmp	r4, #10
   1f152:	d103      	bne.n	1f15c <log_output_string+0x4c>
			print_formatted(log_output, "\r");
   1f154:	4909      	ldr	r1, [pc, #36]	; (1f17c <log_output_string+0x6c>)
   1f156:	4630      	mov	r0, r6
   1f158:	f7ff fe84 	bl	1ee64 <print_formatted>
		}
	} else {
		postfix_print(log_output, flags, level);
	}

	log_output_flush(log_output);
   1f15c:	4630      	mov	r0, r6
}
   1f15e:	b004      	add	sp, #16
   1f160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log_output_flush(log_output);
   1f164:	f01f bc1f 	b.w	3e9a6 <log_output_flush>
	while (*fmt != '\0') {
   1f168:	461c      	mov	r4, r3
   1f16a:	e7ee      	b.n	1f14a <log_output_string+0x3a>
		postfix_print(log_output, flags, level);
   1f16c:	4622      	mov	r2, r4
   1f16e:	4639      	mov	r1, r7
   1f170:	4630      	mov	r0, r6
   1f172:	f7ff ff17 	bl	1efa4 <postfix_print>
   1f176:	e7f1      	b.n	1f15c <log_output_string+0x4c>
   1f178:	0001f0c1 	.word	0x0001f0c1
   1f17c:	00045025 	.word	0x00045025

0001f180 <log_output_hexdump>:

void log_output_hexdump(const struct log_output *log_output,
			     struct log_msg_ids src_level, u32_t timestamp,
			     const char *metadata, const u8_t *data,
			     u32_t length, u32_t flags)
{
   1f180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1f184:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1f186:	4698      	mov	r8, r3
   1f188:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
	u32_t prefix_offset;
	u8_t level = (u8_t)src_level.level;
	u8_t domain_id = (u8_t)src_level.domain_id;
	u16_t source_id = (u16_t)src_level.source_id;

	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   1f18c:	f3c1 1389 	ubfx	r3, r1, #6, #10
	u8_t level = (u8_t)src_level.level;
   1f190:	f001 0907 	and.w	r9, r1, #7
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   1f194:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   1f198:	9302      	str	r3, [sp, #8]
   1f19a:	e9cd 9100 	strd	r9, r1, [sp]
   1f19e:	4613      	mov	r3, r2
   1f1a0:	4631      	mov	r1, r6
   1f1a2:	2201      	movs	r2, #1
{
   1f1a4:	4604      	mov	r4, r0
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   1f1a6:	f7ff fe6f 	bl	1ee88 <prefix_print>
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(log_output, "%s", metadata);
   1f1aa:	4642      	mov	r2, r8
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   1f1ac:	4682      	mov	sl, r0
	print_formatted(log_output, "%s", metadata);
   1f1ae:	4910      	ldr	r1, [pc, #64]	; (1f1f0 <log_output_hexdump+0x70>)
   1f1b0:	4620      	mov	r0, r4
   1f1b2:	f7ff fe57 	bl	1ee64 <print_formatted>

	while (length) {
   1f1b6:	b955      	cbnz	r5, 1f1ce <log_output_hexdump+0x4e>

		data += part_len;
		length -= part_len;
	};

	postfix_print(log_output, flags, level);
   1f1b8:	4620      	mov	r0, r4
   1f1ba:	464a      	mov	r2, r9
   1f1bc:	4631      	mov	r1, r6
   1f1be:	f7ff fef1 	bl	1efa4 <postfix_print>
	log_output_flush(log_output);
   1f1c2:	4620      	mov	r0, r4
}
   1f1c4:	b004      	add	sp, #16
   1f1c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(log_output);
   1f1ca:	f01f bbec 	b.w	3e9a6 <log_output_flush>
		u32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
   1f1ce:	2d10      	cmp	r5, #16
   1f1d0:	46a8      	mov	r8, r5
   1f1d2:	bf28      	it	cs
   1f1d4:	f04f 0810 	movcs.w	r8, #16
		hexdump_line_print(log_output, data, part_len,
   1f1d8:	4639      	mov	r1, r7
   1f1da:	9600      	str	r6, [sp, #0]
   1f1dc:	4653      	mov	r3, sl
   1f1de:	4642      	mov	r2, r8
   1f1e0:	4620      	mov	r0, r4
   1f1e2:	f7ff fefd 	bl	1efe0 <hexdump_line_print>
		data += part_len;
   1f1e6:	4447      	add	r7, r8
		length -= part_len;
   1f1e8:	eba5 0508 	sub.w	r5, r5, r8
   1f1ec:	e7e3      	b.n	1f1b6 <log_output_hexdump+0x36>
   1f1ee:	bf00      	nop
   1f1f0:	0004884d 	.word	0x0004884d

0001f1f4 <log_output_timestamp_freq_set>:
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
}

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
   1f1f4:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   1f1f6:	2100      	movs	r1, #0
	timestamp_div = 1U;
   1f1f8:	4a07      	ldr	r2, [pc, #28]	; (1f218 <log_output_timestamp_freq_set+0x24>)
{
   1f1fa:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   1f1fc:	4c07      	ldr	r4, [pc, #28]	; (1f21c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   1f1fe:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   1f200:	42a0      	cmp	r0, r4
   1f202:	d804      	bhi.n	1f20e <log_output_timestamp_freq_set+0x1a>
   1f204:	b101      	cbz	r1, 1f208 <log_output_timestamp_freq_set+0x14>
   1f206:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   1f208:	4b05      	ldr	r3, [pc, #20]	; (1f220 <log_output_timestamp_freq_set+0x2c>)
   1f20a:	6018      	str	r0, [r3, #0]
}
   1f20c:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   1f20e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1f210:	005b      	lsls	r3, r3, #1
   1f212:	2101      	movs	r1, #1
   1f214:	e7f4      	b.n	1f200 <log_output_timestamp_freq_set+0xc>
   1f216:	bf00      	nop
   1f218:	20023978 	.word	0x20023978
   1f21c:	000f4240 	.word	0x000f4240
   1f220:	20023974 	.word	0x20023974

0001f224 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   1f224:	4801      	ldr	r0, [pc, #4]	; (1f22c <panic+0x8>)
   1f226:	f01f bbbe 	b.w	3e9a6 <log_output_flush>
   1f22a:	bf00      	nop
   1f22c:	0004265c 	.word	0x0004265c

0001f230 <log_backend_uart_init>:
{
	log_backend_std_put(&log_output, 0, msg);
}

static void log_backend_uart_init(void)
{
   1f230:	b508      	push	{r3, lr}
   1f232:	4806      	ldr	r0, [pc, #24]	; (1f24c <log_backend_uart_init+0x1c>)
   1f234:	f019 f834 	bl	382a0 <z_impl_device_get_binding>
	struct device *dev;

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);
   1f238:	b928      	cbnz	r0, 1f246 <log_backend_uart_init+0x16>
   1f23a:	4b05      	ldr	r3, [pc, #20]	; (1f250 <log_backend_uart_init+0x20>)
   1f23c:	4a05      	ldr	r2, [pc, #20]	; (1f254 <log_backend_uart_init+0x24>)
   1f23e:	212a      	movs	r1, #42	; 0x2a
   1f240:	4805      	ldr	r0, [pc, #20]	; (1f258 <log_backend_uart_init+0x28>)
   1f242:	f01c fdef 	bl	3be24 <__assert_func>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
   1f246:	4b05      	ldr	r3, [pc, #20]	; (1f25c <log_backend_uart_init+0x2c>)
   1f248:	6058      	str	r0, [r3, #4]

	log_output_ctx_set(&log_output, dev);
}
   1f24a:	bd08      	pop	{r3, pc}
   1f24c:	000450ee 	.word	0x000450ee
   1f250:	00044df3 	.word	0x00044df3
   1f254:	000450d8 	.word	0x000450d8
   1f258:	000450f5 	.word	0x000450f5
   1f25c:	20023984 	.word	0x20023984

0001f260 <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, u32_t timestamp,
			 const char *metadata, const u8_t *data, u32_t length)
{
   1f260:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1f264:	460e      	mov	r6, r1
   1f266:	4617      	mov	r7, r2
   1f268:	4698      	mov	r8, r3
	__asm__ volatile(
   1f26a:	f04f 0320 	mov.w	r3, #32
   1f26e:	f3ef 8511 	mrs	r5, BASEPRI
   1f272:	f383 8811 	msr	BASEPRI, r3
   1f276:	f3bf 8f6f 	isb	sy
	 * it may lead to failure. Log output is not re-entrant and irq_lock
	 * does not prevent NMI or ZLI (Zero latency interrupts). If context
	 * is interrupted by NMI it usually means fault scenario and best that
	 * can be done is to flush the output and process new data.
	 */
	log_output_flush(log_output);
   1f27a:	4c0b      	ldr	r4, [pc, #44]	; (1f2a8 <sync_hexdump+0x48>)
   1f27c:	4620      	mov	r0, r4
   1f27e:	f01f fb92 	bl	3e9a6 <log_output_flush>
	log_output_hexdump(log_output, src_level, timestamp,
   1f282:	230f      	movs	r3, #15
   1f284:	9302      	str	r3, [sp, #8]
   1f286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f288:	463a      	mov	r2, r7
   1f28a:	9301      	str	r3, [sp, #4]
   1f28c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f28e:	4631      	mov	r1, r6
   1f290:	9300      	str	r3, [sp, #0]
   1f292:	4620      	mov	r0, r4
   1f294:	4643      	mov	r3, r8
   1f296:	f7ff ff73 	bl	1f180 <log_output_hexdump>
	__asm__ volatile(
   1f29a:	f385 8811 	msr	BASEPRI, r5
   1f29e:	f3bf 8f6f 	isb	sy
	log_backend_std_sync_hexdump(&log_output, 0, src_level,
				     timestamp, metadata, data, length);
}
   1f2a2:	b004      	add	sp, #16
   1f2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f2a8:	0004265c 	.word	0x0004265c

0001f2ac <sync_string>:
{
   1f2ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f2b0:	460e      	mov	r6, r1
   1f2b2:	4617      	mov	r7, r2
   1f2b4:	4698      	mov	r8, r3
	__asm__ volatile(
   1f2b6:	f04f 0320 	mov.w	r3, #32
   1f2ba:	f3ef 8511 	mrs	r5, BASEPRI
   1f2be:	f383 8811 	msr	BASEPRI, r3
   1f2c2:	f3bf 8f6f 	isb	sy
	log_output_flush(log_output);
   1f2c6:	4c0a      	ldr	r4, [pc, #40]	; (1f2f0 <sync_string+0x44>)
   1f2c8:	4620      	mov	r0, r4
   1f2ca:	f01f fb6c 	bl	3e9a6 <log_output_flush>
	log_output_string(log_output, src_level, timestamp, fmt, ap, flags);
   1f2ce:	230f      	movs	r3, #15
   1f2d0:	9301      	str	r3, [sp, #4]
   1f2d2:	9b08      	ldr	r3, [sp, #32]
   1f2d4:	463a      	mov	r2, r7
   1f2d6:	9300      	str	r3, [sp, #0]
   1f2d8:	4631      	mov	r1, r6
   1f2da:	4643      	mov	r3, r8
   1f2dc:	4620      	mov	r0, r4
   1f2de:	f7ff ff17 	bl	1f110 <log_output_string>
	__asm__ volatile(
   1f2e2:	f385 8811 	msr	BASEPRI, r5
   1f2e6:	f3bf 8f6f 	isb	sy
}
   1f2ea:	b002      	add	sp, #8
   1f2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f2f0:	0004265c 	.word	0x0004265c

0001f2f4 <boot_write_trailer_byte>:
	}
}

static int boot_write_trailer_byte(const struct flash_area *fa, u32_t off,
				   u8_t val)
{
   1f2f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f2f6:	4604      	mov	r4, r0
   1f2f8:	460d      	mov	r5, r1
   1f2fa:	4616      	mov	r6, r2
	u8_t buf[BOOT_MAX_ALIGN];
	u8_t align;
	u8_t erased_val;
	int rc;

	align = flash_area_align(fa);
   1f2fc:	f01f fc42 	bl	3eb84 <flash_area_align>
	assert(align <= BOOT_MAX_ALIGN);
   1f300:	2808      	cmp	r0, #8
	align = flash_area_align(fa);
   1f302:	4603      	mov	r3, r0
	assert(align <= BOOT_MAX_ALIGN);
   1f304:	d906      	bls.n	1f314 <boot_write_trailer_byte+0x20>
   1f306:	4b0c      	ldr	r3, [pc, #48]	; (1f338 <boot_write_trailer_byte+0x44>)
   1f308:	4a0c      	ldr	r2, [pc, #48]	; (1f33c <boot_write_trailer_byte+0x48>)
   1f30a:	f44f 719b 	mov.w	r1, #310	; 0x136
   1f30e:	480c      	ldr	r0, [pc, #48]	; (1f340 <boot_write_trailer_byte+0x4c>)
   1f310:	f01c fd88 	bl	3be24 <__assert_func>
	erased_val = flash_area_erased_val(fa);
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   1f314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	buf[0] = val;

	rc = flash_area_write(fa, off, buf, align);
   1f318:	466a      	mov	r2, sp
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   1f31a:	e9cd 0000 	strd	r0, r0, [sp]
	rc = flash_area_write(fa, off, buf, align);
   1f31e:	4629      	mov	r1, r5
   1f320:	4620      	mov	r0, r4
	buf[0] = val;
   1f322:	f88d 6000 	strb.w	r6, [sp]
	rc = flash_area_write(fa, off, buf, align);
   1f326:	f01f fc04 	bl	3eb32 <flash_area_write>
	if (rc != 0) {
   1f32a:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   1f32c:	bf18      	it	ne
   1f32e:	f06f 0004 	mvnne.w	r0, #4
   1f332:	b002      	add	sp, #8
   1f334:	bd70      	pop	{r4, r5, r6, pc}
   1f336:	bf00      	nop
   1f338:	0004514c 	.word	0x0004514c
   1f33c:	00045134 	.word	0x00045134
   1f340:	00045164 	.word	0x00045164

0001f344 <boot_request_upgrade>:

	return BOOT_SWAP_TYPE_NONE;
}

int boot_request_upgrade(int permanent)
{
   1f344:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f346:	4605      	mov	r5, r0
	rc = flash_area_open(bank_id, &fa);
   1f348:	a901      	add	r1, sp, #4
   1f34a:	2006      	movs	r0, #6
   1f34c:	f000 f934 	bl	1f5b8 <flash_area_open>
	if (rc) {
   1f350:	4604      	mov	r4, r0
   1f352:	bb10      	cbnz	r0, 1f39a <boot_request_upgrade+0x56>
	offs = MAGIC_OFFS(fa);
   1f354:	9801      	ldr	r0, [sp, #4]
	rc = flash_area_write(fa, offs, boot_img_magic, BOOT_MAGIC_SZ);
   1f356:	2310      	movs	r3, #16
	offs = MAGIC_OFFS(fa);
   1f358:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_write(fa, offs, boot_img_magic, BOOT_MAGIC_SZ);
   1f35a:	4a12      	ldr	r2, [pc, #72]	; (1f3a4 <boot_request_upgrade+0x60>)
   1f35c:	3910      	subs	r1, #16
   1f35e:	f01f fbe8 	bl	3eb32 <flash_area_write>
   1f362:	4604      	mov	r4, r0
	flash_area_close(fa);
   1f364:	9801      	ldr	r0, [sp, #4]
   1f366:	f01f fbc6 	bl	3eaf6 <flash_area_close>
	u8_t swap_type;
#endif
	int rc;

	rc = boot_magic_write(FLASH_AREA_IMAGE_SECONDARY);
	if (rc) {
   1f36a:	b9b4      	cbnz	r4, 1f39a <boot_request_upgrade+0x56>
		goto op_end;
	}

	if (permanent) {
   1f36c:	b1c5      	cbz	r5, 1f3a0 <boot_request_upgrade+0x5c>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   1f36e:	2006      	movs	r0, #6
   1f370:	f01f fb4a 	bl	3ea08 <boot_flag_write.constprop.7>
		rc = boot_image_ok_write(FLASH_AREA_IMAGE_SECONDARY);

#ifdef CONFIG_MCUBOOT_TRAILER_SWAP_TYPE
		if (rc) {
   1f374:	4604      	mov	r4, r0
   1f376:	b980      	cbnz	r0, 1f39a <boot_request_upgrade+0x56>
			goto op_end;
		}

		swap_type = BOOT_SWAP_TYPE_PERM;
   1f378:	2503      	movs	r5, #3
	rc = flash_area_open(bank_id, &fa);
   1f37a:	a901      	add	r1, sp, #4
   1f37c:	2006      	movs	r0, #6
   1f37e:	f000 f91b 	bl	1f5b8 <flash_area_open>
	if (rc) {
   1f382:	4604      	mov	r4, r0
   1f384:	b948      	cbnz	r0, 1f39a <boot_request_upgrade+0x56>
	offs = SWAP_TYPE_OFFS(fa);
   1f386:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, swap_type);
   1f388:	462a      	mov	r2, r5
	offs = SWAP_TYPE_OFFS(fa);
   1f38a:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, swap_type);
   1f38c:	3928      	subs	r1, #40	; 0x28
   1f38e:	f7ff ffb1 	bl	1f2f4 <boot_write_trailer_byte>
   1f392:	4604      	mov	r4, r0
	flash_area_close(fa);
   1f394:	9801      	ldr	r0, [sp, #4]
   1f396:	f01f fbae 	bl	3eaf6 <flash_area_close>
#else
	}
#endif
op_end:
	return rc;
}
   1f39a:	4620      	mov	r0, r4
   1f39c:	b003      	add	sp, #12
   1f39e:	bd30      	pop	{r4, r5, pc}
		swap_type = BOOT_SWAP_TYPE_TEST;
   1f3a0:	2502      	movs	r5, #2
   1f3a2:	e7ea      	b.n	1f37a <boot_request_upgrade+0x36>
   1f3a4:	0004266c 	.word	0x0004266c

0001f3a8 <flash_sync>:
}

#endif /* CONFIG_IMG_ERASE_PROGRESSIVELY */

static int flash_sync(struct flash_img_context *ctx)
{
   1f3a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1f3ac:	4604      	mov	r4, r0
	int rc = 0;

	if (ctx->buf_bytes < CONFIG_IMG_BLOCK_BUF_SIZE) {
   1f3ae:	f8b0 0208 	ldrh.w	r0, [r0, #520]	; 0x208
   1f3b2:	46a1      	mov	r9, r4
   1f3b4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1f3b8:	d205      	bcs.n	1f3c6 <flash_sync+0x1e>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   1f3ba:	f5c0 7200 	rsb	r2, r0, #512	; 0x200
   1f3be:	21ff      	movs	r1, #255	; 0xff
   1f3c0:	4420      	add	r0, r4
   1f3c2:	f021 fced 	bl	40da0 <memset>
#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	flash_progressive_erase(ctx, ctx->bytes_written +
				CONFIG_IMG_BLOCK_BUF_SIZE);
#endif

	rc = flash_area_write(ctx->flash_area, ctx->bytes_written, ctx->buf,
   1f3c6:	e9d4 0180 	ldrd	r0, r1, [r4, #512]	; 0x200
   1f3ca:	f44f 7300 	mov.w	r3, #512	; 0x200
   1f3ce:	4622      	mov	r2, r4
   1f3d0:	f01f fbaf 	bl	3eb32 <flash_area_write>
			      CONFIG_IMG_BLOCK_BUF_SIZE);
	if (rc) {
   1f3d4:	4680      	mov	r8, r0
   1f3d6:	b1a0      	cbz	r0, 1f402 <flash_sync+0x5a>
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   1f3d8:	2301      	movs	r3, #1
   1f3da:	f04f 0000 	mov.w	r0, #0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   1f3de:	4a2f      	ldr	r2, [pc, #188]	; (1f49c <flash_sync+0xf4>)
   1f3e0:	f363 0007 	bfi	r0, r3, #0, #8
   1f3e4:	4b2e      	ldr	r3, [pc, #184]	; (1f4a0 <flash_sync+0xf8>)
   1f3e6:	492f      	ldr	r1, [pc, #188]	; (1f4a4 <flash_sync+0xfc>)
   1f3e8:	1a9b      	subs	r3, r3, r2
   1f3ea:	08db      	lsrs	r3, r3, #3
   1f3ec:	f363 108f 	bfi	r0, r3, #6, #10
   1f3f0:	4642      	mov	r2, r8
   1f3f2:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
   1f3f6:	f01f fab6 	bl	3e966 <log_string_sync>

	ctx->bytes_written += ctx->buf_bytes;
	ctx->buf_bytes = 0U;

	return rc;
}
   1f3fa:	4640      	mov	r0, r8
   1f3fc:	b004      	add	sp, #16
   1f3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!flash_verify(ctx->flash_area, ctx->bytes_written, ctx->buf,
   1f402:	f44f 7600 	mov.w	r6, #512	; 0x200
   1f406:	e9d4 a780 	ldrd	sl, r7, [r4, #512]	; 0x200
		size = (len >= sizeof(temp)) ? sizeof(temp) : len;
   1f40a:	2e04      	cmp	r6, #4
   1f40c:	4635      	mov	r5, r6
   1f40e:	bf28      	it	cs
   1f410:	2504      	movcs	r5, #4
		rc = flash_area_read(fa, offset, &temp, size);
   1f412:	aa03      	add	r2, sp, #12
   1f414:	462b      	mov	r3, r5
   1f416:	4639      	mov	r1, r7
   1f418:	4650      	mov	r0, sl
   1f41a:	f01f fb6d 	bl	3eaf8 <flash_area_read>
		if (rc) {
   1f41e:	4602      	mov	r2, r0
   1f420:	b190      	cbz	r0, 1f448 <flash_sync+0xa0>
			LOG_ERR("flash_read error %d offset=0x%08lx",
   1f422:	2301      	movs	r3, #1
   1f424:	f04f 0000 	mov.w	r0, #0
   1f428:	491c      	ldr	r1, [pc, #112]	; (1f49c <flash_sync+0xf4>)
   1f42a:	f363 0007 	bfi	r0, r3, #0, #8
   1f42e:	4b1c      	ldr	r3, [pc, #112]	; (1f4a0 <flash_sync+0xf8>)
   1f430:	1a5b      	subs	r3, r3, r1
   1f432:	08db      	lsrs	r3, r3, #3
   1f434:	f363 108f 	bfi	r0, r3, #6, #10
   1f438:	491b      	ldr	r1, [pc, #108]	; (1f4a8 <flash_sync+0x100>)
   1f43a:	463b      	mov	r3, r7
   1f43c:	f01f fa93 	bl	3e966 <log_string_sync>
	if (!flash_verify(ctx->flash_area, ctx->bytes_written, ctx->buf,
   1f440:	b306      	cbz	r6, 1f484 <flash_sync+0xdc>
		return -EIO;
   1f442:	f06f 0804 	mvn.w	r8, #4
   1f446:	e7d8      	b.n	1f3fa <flash_sync+0x52>
		if (memcmp(data, &temp, size)) {
   1f448:	462a      	mov	r2, r5
   1f44a:	a903      	add	r1, sp, #12
   1f44c:	4648      	mov	r0, r9
   1f44e:	f021 fc79 	bl	40d44 <memcmp>
   1f452:	b198      	cbz	r0, 1f47c <flash_sync+0xd4>
			LOG_ERR("offset=0x%08lx VERIFY FAIL. "
   1f454:	2301      	movs	r3, #1
   1f456:	f04f 0000 	mov.w	r0, #0
   1f45a:	4a10      	ldr	r2, [pc, #64]	; (1f49c <flash_sync+0xf4>)
   1f45c:	f363 0007 	bfi	r0, r3, #0, #8
   1f460:	4b0f      	ldr	r3, [pc, #60]	; (1f4a0 <flash_sync+0xf8>)
   1f462:	4912      	ldr	r1, [pc, #72]	; (1f4ac <flash_sync+0x104>)
   1f464:	1a9b      	subs	r3, r3, r2
   1f466:	08db      	lsrs	r3, r3, #3
   1f468:	f363 108f 	bfi	r0, r3, #6, #10
   1f46c:	f899 3000 	ldrb.w	r3, [r9]
   1f470:	463a      	mov	r2, r7
   1f472:	9300      	str	r3, [sp, #0]
   1f474:	9b03      	ldr	r3, [sp, #12]
   1f476:	f01f fa76 	bl	3e966 <log_string_sync>
   1f47a:	e7e1      	b.n	1f440 <flash_sync+0x98>
	while (len) {
   1f47c:	1b76      	subs	r6, r6, r5
		offset += size;
   1f47e:	442f      	add	r7, r5
		data += size;
   1f480:	44a9      	add	r9, r5
	while (len) {
   1f482:	d1c2      	bne.n	1f40a <flash_sync+0x62>
	ctx->bytes_written += ctx->buf_bytes;
   1f484:	f8b4 2208 	ldrh.w	r2, [r4, #520]	; 0x208
   1f488:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
   1f48c:	4413      	add	r3, r2
   1f48e:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
	ctx->buf_bytes = 0U;
   1f492:	2300      	movs	r3, #0
   1f494:	f8a4 3208 	strh.w	r3, [r4, #520]	; 0x208
	return rc;
   1f498:	e7af      	b.n	1f3fa <flash_sync+0x52>
   1f49a:	bf00      	nop
   1f49c:	00042314 	.word	0x00042314
   1f4a0:	0004237c 	.word	0x0004237c
   1f4a4:	0004518a 	.word	0x0004518a
   1f4a8:	000451ae 	.word	0x000451ae
   1f4ac:	000451d1 	.word	0x000451d1

0001f4b0 <socket_offload_register>:

/* Only one provider may register socket operations upon boot. */
const struct socket_offload *socket_ops;

void socket_offload_register(const struct socket_offload *ops)
{
   1f4b0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   1f4b2:	4605      	mov	r5, r0
   1f4b4:	b948      	cbnz	r0, 1f4ca <socket_offload_register+0x1a>
   1f4b6:	490c      	ldr	r1, [pc, #48]	; (1f4e8 <socket_offload_register+0x38>)
   1f4b8:	480c      	ldr	r0, [pc, #48]	; (1f4ec <socket_offload_register+0x3c>)
   1f4ba:	2311      	movs	r3, #17
   1f4bc:	4a0c      	ldr	r2, [pc, #48]	; (1f4f0 <socket_offload_register+0x40>)
   1f4be:	f01f fa35 	bl	3e92c <printk>
   1f4c2:	2111      	movs	r1, #17
   1f4c4:	480a      	ldr	r0, [pc, #40]	; (1f4f0 <socket_offload_register+0x40>)
   1f4c6:	f01f fa3e 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops == NULL);
   1f4ca:	4c0a      	ldr	r4, [pc, #40]	; (1f4f4 <socket_offload_register+0x44>)
   1f4cc:	6822      	ldr	r2, [r4, #0]
   1f4ce:	b14a      	cbz	r2, 1f4e4 <socket_offload_register+0x34>
   1f4d0:	4909      	ldr	r1, [pc, #36]	; (1f4f8 <socket_offload_register+0x48>)
   1f4d2:	4806      	ldr	r0, [pc, #24]	; (1f4ec <socket_offload_register+0x3c>)
   1f4d4:	2312      	movs	r3, #18
   1f4d6:	4a06      	ldr	r2, [pc, #24]	; (1f4f0 <socket_offload_register+0x40>)
   1f4d8:	f01f fa28 	bl	3e92c <printk>
   1f4dc:	2112      	movs	r1, #18
   1f4de:	4804      	ldr	r0, [pc, #16]	; (1f4f0 <socket_offload_register+0x40>)
   1f4e0:	f01f fa31 	bl	3e946 <assert_post_action>

	socket_ops = ops;
   1f4e4:	6025      	str	r5, [r4, #0]
}
   1f4e6:	bd38      	pop	{r3, r4, r5, pc}
   1f4e8:	00044776 	.word	0x00044776
   1f4ec:	00044643 	.word	0x00044643
   1f4f0:	0004521f 	.word	0x0004521f
   1f4f4:	20023990 	.word	0x20023990
   1f4f8:	00045253 	.word	0x00045253

0001f4fc <sys_rand32_get>:
#include <drivers/entropy.h>

static struct device *entropy_driver;

u32_t sys_rand32_get(void)
{
   1f4fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *dev = entropy_driver;
   1f4fe:	4d1a      	ldr	r5, [pc, #104]	; (1f568 <sys_rand32_get+0x6c>)
   1f500:	682c      	ldr	r4, [r5, #0]
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
   1f502:	b99c      	cbnz	r4, 1f52c <sys_rand32_get+0x30>
   1f504:	4819      	ldr	r0, [pc, #100]	; (1f56c <sys_rand32_get+0x70>)
   1f506:	f018 fecb 	bl	382a0 <z_impl_device_get_binding>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
		__ASSERT((dev != NULL),
   1f50a:	4604      	mov	r4, r0
   1f50c:	b968      	cbnz	r0, 1f52a <sys_rand32_get+0x2e>
   1f50e:	231b      	movs	r3, #27
   1f510:	4a17      	ldr	r2, [pc, #92]	; (1f570 <sys_rand32_get+0x74>)
   1f512:	4918      	ldr	r1, [pc, #96]	; (1f574 <sys_rand32_get+0x78>)
   1f514:	4818      	ldr	r0, [pc, #96]	; (1f578 <sys_rand32_get+0x7c>)
   1f516:	f01f fa09 	bl	3e92c <printk>
   1f51a:	4914      	ldr	r1, [pc, #80]	; (1f56c <sys_rand32_get+0x70>)
   1f51c:	4817      	ldr	r0, [pc, #92]	; (1f57c <sys_rand32_get+0x80>)
   1f51e:	f01f fa05 	bl	3e92c <printk>
   1f522:	211b      	movs	r1, #27
   1f524:	4812      	ldr	r0, [pc, #72]	; (1f570 <sys_rand32_get+0x74>)
   1f526:	f01f fa0e 	bl	3e946 <assert_post_action>
			"Device driver for %s (CONFIG_ENTROPY_NAME) not found. "
			"Check your build configuration!",
			CONFIG_ENTROPY_NAME);
		entropy_driver = dev;
   1f52a:	602c      	str	r4, [r5, #0]

static inline int z_impl_entropy_get_entropy(struct device *dev,
					    u8_t *buffer,
					    u16_t length)
{
	const struct entropy_driver_api *api =
   1f52c:	6865      	ldr	r5, [r4, #4]
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
   1f52e:	682b      	ldr	r3, [r5, #0]
   1f530:	b963      	cbnz	r3, 1f54c <sys_rand32_get+0x50>
   1f532:	4913      	ldr	r1, [pc, #76]	; (1f580 <sys_rand32_get+0x84>)
   1f534:	234c      	movs	r3, #76	; 0x4c
   1f536:	4a13      	ldr	r2, [pc, #76]	; (1f584 <sys_rand32_get+0x88>)
   1f538:	480f      	ldr	r0, [pc, #60]	; (1f578 <sys_rand32_get+0x7c>)
   1f53a:	f01f f9f7 	bl	3e92c <printk>
   1f53e:	4812      	ldr	r0, [pc, #72]	; (1f588 <sys_rand32_get+0x8c>)
   1f540:	f01f f9f4 	bl	3e92c <printk>
   1f544:	214c      	movs	r1, #76	; 0x4c
   1f546:	480f      	ldr	r0, [pc, #60]	; (1f584 <sys_rand32_get+0x88>)
   1f548:	f01f f9fd 	bl	3e946 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1f54c:	2204      	movs	r2, #4
   1f54e:	682b      	ldr	r3, [r5, #0]
   1f550:	eb0d 0102 	add.w	r1, sp, r2
   1f554:	4620      	mov	r0, r4
   1f556:	4798      	blx	r3
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   1f558:	2800      	cmp	r0, #0
   1f55a:	da02      	bge.n	1f562 <sys_rand32_get+0x66>
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t z_arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   1f55c:	f000 faa6 	bl	1faac <z_timer_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
   1f560:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
   1f562:	9801      	ldr	r0, [sp, #4]
   1f564:	b003      	add	sp, #12
   1f566:	bd30      	pop	{r4, r5, pc}
   1f568:	20023994 	.word	0x20023994
   1f56c:	0004526d 	.word	0x0004526d
   1f570:	00045277 	.word	0x00045277
   1f574:	000452a9 	.word	0x000452a9
   1f578:	00044643 	.word	0x00044643
   1f57c:	000452be 	.word	0x000452be
   1f580:	0004533c 	.word	0x0004533c
   1f584:	00045316 	.word	0x00045316
   1f588:	0004535c 	.word	0x0004535c

0001f58c <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   1f58c:	4b08      	ldr	r3, [pc, #32]	; (1f5b0 <get_flash_area_from_id+0x24>)
{
   1f58e:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
   1f590:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
   1f592:	4b08      	ldr	r3, [pc, #32]	; (1f5b4 <get_flash_area_from_id+0x28>)
   1f594:	6819      	ldr	r1, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
   1f596:	2300      	movs	r3, #0
   1f598:	429d      	cmp	r5, r3
   1f59a:	dc02      	bgt.n	1f5a2 <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
   1f59c:	2200      	movs	r2, #0
}
   1f59e:	4610      	mov	r0, r2
   1f5a0:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
   1f5a2:	011c      	lsls	r4, r3, #4
   1f5a4:	190a      	adds	r2, r1, r4
   1f5a6:	5d0c      	ldrb	r4, [r1, r4]
   1f5a8:	4284      	cmp	r4, r0
   1f5aa:	d0f8      	beq.n	1f59e <get_flash_area_from_id+0x12>
	for (int i = 0; i < flash_map_entries; i++) {
   1f5ac:	3301      	adds	r3, #1
   1f5ae:	e7f3      	b.n	1f598 <get_flash_area_from_id+0xc>
   1f5b0:	0004270c 	.word	0x0004270c
   1f5b4:	20031238 	.word	0x20031238

0001f5b8 <flash_area_open>:

int flash_area_open(u8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   1f5b8:	4b08      	ldr	r3, [pc, #32]	; (1f5dc <flash_area_open+0x24>)
{
   1f5ba:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
   1f5bc:	681b      	ldr	r3, [r3, #0]
{
   1f5be:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   1f5c0:	b12b      	cbz	r3, 1f5ce <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   1f5c2:	f7ff ffe3 	bl	1f58c <get_flash_area_from_id>
	if (area == NULL) {
   1f5c6:	b128      	cbz	r0, 1f5d4 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
   1f5c8:	6020      	str	r0, [r4, #0]
	return 0;
   1f5ca:	2000      	movs	r0, #0
}
   1f5cc:	bd10      	pop	{r4, pc}
		return -EACCES;
   1f5ce:	f06f 000c 	mvn.w	r0, #12
   1f5d2:	e7fb      	b.n	1f5cc <flash_area_open+0x14>
		return -ENOENT;
   1f5d4:	f06f 0001 	mvn.w	r0, #1
   1f5d8:	e7f8      	b.n	1f5cc <flash_area_open+0x14>
   1f5da:	bf00      	nop
   1f5dc:	20031238 	.word	0x20031238

0001f5e0 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   1f5e0:	b508      	push	{r3, lr}
   1f5e2:	4604      	mov	r4, r0
	__asm__ volatile(
   1f5e4:	f04f 0220 	mov.w	r2, #32
   1f5e8:	f3ef 8311 	mrs	r3, BASEPRI
   1f5ec:	f382 8811 	msr	BASEPRI, r2
   1f5f0:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   1f5f4:	f01f fb3a 	bl	3ec6c <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   1f5f8:	4620      	mov	r0, r4
   1f5fa:	f000 ffcf 	bl	2059c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   1f5fe:	4803      	ldr	r0, [pc, #12]	; (1f60c <sys_reboot+0x2c>)
   1f600:	f01f f994 	bl	3e92c <printk>
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	z_arch_cpu_idle();
   1f604:	f000 fc14 	bl	1fe30 <z_arch_cpu_idle>
   1f608:	e7fc      	b.n	1f604 <sys_reboot+0x24>
   1f60a:	bf00      	nop
   1f60c:	0004539b 	.word	0x0004539b

0001f610 <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   1f610:	4b0a      	ldr	r3, [pc, #40]	; (1f63c <console_out+0x2c>)
{
   1f612:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   1f614:	b2c6      	uxtb	r6, r0
{
   1f616:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   1f618:	681b      	ldr	r3, [r3, #0]
   1f61a:	4630      	mov	r0, r6
   1f61c:	4798      	blx	r3

	if (handled_by_debug_server) {
   1f61e:	2801      	cmp	r0, #1
   1f620:	d00a      	beq.n	1f638 <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   1f622:	2c0a      	cmp	r4, #10
   1f624:	4d06      	ldr	r5, [pc, #24]	; (1f640 <console_out+0x30>)
   1f626:	d103      	bne.n	1f630 <console_out+0x20>
		uart_poll_out(uart_console_dev, '\r');
   1f628:	210d      	movs	r1, #13
   1f62a:	6828      	ldr	r0, [r5, #0]
   1f62c:	f01f fab1 	bl	3eb92 <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
   1f630:	4631      	mov	r1, r6
   1f632:	6828      	ldr	r0, [r5, #0]
   1f634:	f01f faad 	bl	3eb92 <uart_poll_out>

	return c;
}
   1f638:	4620      	mov	r0, r4
   1f63a:	bd70      	pop	{r4, r5, r6, pc}
   1f63c:	2003123c 	.word	0x2003123c
   1f640:	20023998 	.word	0x20023998

0001f644 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
   1f644:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
   1f646:	4c04      	ldr	r4, [pc, #16]	; (1f658 <uart_console_hook_install+0x14>)
   1f648:	4620      	mov	r0, r4
   1f64a:	f001 fa5b 	bl	20b04 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1f64e:	4620      	mov	r0, r4
}
   1f650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
   1f654:	f7ff bb14 	b.w	1ec80 <__printk_hook_install>
   1f658:	0001f611 	.word	0x0001f611

0001f65c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
   1f65c:	b508      	push	{r3, lr}
   1f65e:	4804      	ldr	r0, [pc, #16]	; (1f670 <uart_console_init+0x14>)
   1f660:	f018 fe1e 	bl	382a0 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   1f664:	4b03      	ldr	r3, [pc, #12]	; (1f674 <uart_console_init+0x18>)
   1f666:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
   1f668:	f7ff ffec 	bl	1f644 <uart_console_hook_install>

	return 0;
}
   1f66c:	2000      	movs	r0, #0
   1f66e:	bd08      	pop	{r3, pc}
   1f670:	000450ee 	.word	0x000450ee
   1f674:	20023998 	.word	0x20023998

0001f678 <hfclk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int hfclk_init(struct device *dev)
{
   1f678:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   1f67a:	2200      	movs	r2, #0
{
   1f67c:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   1f67e:	2101      	movs	r1, #1
   1f680:	2005      	movs	r0, #5
   1f682:	f000 fb0d 	bl	1fca0 <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
   1f686:	2005      	movs	r0, #5
   1f688:	f000 fafa 	bl	1fc80 <z_arch_irq_enable>
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
}

__STATIC_INLINE void nrf_clock_lf_src_set(nrf_clock_lfclk_t source)
{
    NRF_CLOCK->LFCLKSRC = (uint32_t)(source);
   1f68c:	2202      	movs	r2, #2
   1f68e:	4b05      	ldr	r3, [pc, #20]	; (1f6a4 <hfclk_init+0x2c>)
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   1f690:	2000      	movs	r0, #0
   1f692:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NRF_CLOCK->INTENSET = int_mask;
   1f696:	2203      	movs	r2, #3
   1f698:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			(NRF_POWER_INT_USBDETECTED_MASK |
			NRF_POWER_INT_USBREMOVED_MASK |
			NRF_POWER_INT_USBPWRRDY_MASK),
			(0))));

	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
   1f69c:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
   1f69e:	e9c3 0000 	strd	r0, r0, [r3]

	return 0;
}
   1f6a2:	bd10      	pop	{r4, pc}
   1f6a4:	40005000 	.word	0x40005000

0001f6a8 <clock_async_start>:
{
   1f6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
   1f6aa:	6803      	ldr	r3, [r0, #0]
{
   1f6ac:	4606      	mov	r6, r0
	const struct nrf_clock_control_config *config =
   1f6ae:	689f      	ldr	r7, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
   1f6b0:	6885      	ldr	r5, [r0, #8]
	__ASSERT_NO_MSG((data == NULL) ||
   1f6b2:	4614      	mov	r4, r2
   1f6b4:	b15a      	cbz	r2, 1f6ce <clock_async_start+0x26>
   1f6b6:	6853      	ldr	r3, [r2, #4]
   1f6b8:	b94b      	cbnz	r3, 1f6ce <clock_async_start+0x26>
   1f6ba:	4927      	ldr	r1, [pc, #156]	; (1f758 <clock_async_start+0xb0>)
   1f6bc:	4827      	ldr	r0, [pc, #156]	; (1f75c <clock_async_start+0xb4>)
   1f6be:	2392      	movs	r3, #146	; 0x92
   1f6c0:	4a27      	ldr	r2, [pc, #156]	; (1f760 <clock_async_start+0xb8>)
   1f6c2:	f01f f933 	bl	3e92c <printk>
   1f6c6:	2192      	movs	r1, #146	; 0x92
   1f6c8:	4825      	ldr	r0, [pc, #148]	; (1f760 <clock_async_start+0xb8>)
   1f6ca:	f01f f93c 	bl	3e946 <assert_post_action>
   1f6ce:	f04f 0320 	mov.w	r3, #32
   1f6d2:	f3ef 8211 	mrs	r2, BASEPRI
   1f6d6:	f383 8811 	msr	BASEPRI, r3
   1f6da:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   1f6de:	7a2b      	ldrb	r3, [r5, #8]
   1f6e0:	3301      	adds	r3, #1
   1f6e2:	b25b      	sxtb	r3, r3
   1f6e4:	722b      	strb	r3, [r5, #8]
	__asm__ volatile(
   1f6e6:	f382 8811 	msr	BASEPRI, r2
   1f6ea:	f3bf 8f6f 	isb	sy
	if (clk_data->started) {
   1f6ee:	7a6a      	ldrb	r2, [r5, #9]
   1f6f0:	b13a      	cbz	r2, 1f702 <clock_async_start+0x5a>
		if (data) {
   1f6f2:	b90c      	cbnz	r4, 1f6f8 <clock_async_start+0x50>
	return 0;
   1f6f4:	2000      	movs	r0, #0
}
   1f6f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			data->cb(dev, data->user_data);
   1f6f8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1f6fc:	4630      	mov	r0, r6
   1f6fe:	4798      	blx	r3
   1f700:	e7f8      	b.n	1f6f4 <clock_async_start+0x4c>
		if (ref == 1) {
   1f702:	2b01      	cmp	r3, #1
   1f704:	d108      	bne.n	1f718 <clock_async_start+0x70>
			do_start =  (config->start_handler) ?
   1f706:	683b      	ldr	r3, [r7, #0]
					config->start_handler(dev) : true;
   1f708:	b943      	cbnz	r3, 1f71c <clock_async_start+0x74>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   1f70a:	2201      	movs	r2, #1
   1f70c:	7abb      	ldrb	r3, [r7, #10]
   1f70e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f712:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1f716:	601a      	str	r2, [r3, #0]
		if (data) {
   1f718:	b954      	cbnz	r4, 1f730 <clock_async_start+0x88>
   1f71a:	e7eb      	b.n	1f6f4 <clock_async_start+0x4c>
					config->start_handler(dev) : true;
   1f71c:	4630      	mov	r0, r6
   1f71e:	4798      	blx	r3
   1f720:	2800      	cmp	r0, #0
   1f722:	d1f2      	bne.n	1f70a <clock_async_start+0x62>
			} else if (data) {
   1f724:	2c00      	cmp	r4, #0
   1f726:	d0e5      	beq.n	1f6f4 <clock_async_start+0x4c>
				data->cb(dev, data->user_data);
   1f728:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1f72c:	4630      	mov	r0, r6
   1f72e:	4798      	blx	r3
	sys_snode_t *item = sys_slist_peek_head(list);
   1f730:	682b      	ldr	r3, [r5, #0]
		if (item == node) {
   1f732:	429c      	cmp	r4, r3
   1f734:	d00d      	beq.n	1f752 <clock_async_start+0xaa>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   1f736:	b113      	cbz	r3, 1f73e <clock_async_start+0x96>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f738:	681b      	ldr	r3, [r3, #0]
	} while (item);
   1f73a:	2b00      	cmp	r3, #0
   1f73c:	d1f9      	bne.n	1f732 <clock_async_start+0x8a>
	parent->next = child;
   1f73e:	2000      	movs	r0, #0
   1f740:	6020      	str	r0, [r4, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1f742:	686b      	ldr	r3, [r5, #4]
   1f744:	b913      	cbnz	r3, 1f74c <clock_async_start+0xa4>
	list->head = node;
   1f746:	e9c5 4400 	strd	r4, r4, [r5]
   1f74a:	e7d3      	b.n	1f6f4 <clock_async_start+0x4c>
	parent->next = child;
   1f74c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1f74e:	606c      	str	r4, [r5, #4]
   1f750:	e7d1      	b.n	1f6f6 <clock_async_start+0x4e>
				return -EALREADY;
   1f752:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1f756:	e7ce      	b.n	1f6f6 <clock_async_start+0x4e>
   1f758:	000453f8 	.word	0x000453f8
   1f75c:	00044643 	.word	0x00044643
   1f760:	000453c4 	.word	0x000453c4

0001f764 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
   1f764:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
   1f766:	4b10      	ldr	r3, [pc, #64]	; (1f7a8 <nrf_power_clock_isr+0x44>)
   1f768:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
   1f76a:	b162      	cbz	r2, 1f786 <nrf_power_clock_isr+0x22>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
   1f76c:	4a0f      	ldr	r2, [pc, #60]	; (1f7ac <nrf_power_clock_isr+0x48>)
   1f76e:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
   1f772:	07d1      	lsls	r1, r2, #31
   1f774:	d507      	bpl.n	1f786 <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
   1f776:	2200      	movs	r2, #0
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
   1f778:	480d      	ldr	r0, [pc, #52]	; (1f7b0 <nrf_power_clock_isr+0x4c>)
   1f77a:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
   1f77c:	6883      	ldr	r3, [r0, #8]
   1f77e:	7a5b      	ldrb	r3, [r3, #9]
   1f780:	b90b      	cbnz	r3, 1f786 <nrf_power_clock_isr+0x22>
			clkstarted_handle(hfclk_dev);
   1f782:	f01f fa55 	bl	3ec30 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event));
   1f786:	4b0b      	ldr	r3, [pc, #44]	; (1f7b4 <nrf_power_clock_isr+0x50>)
   1f788:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(evt) &&
   1f78a:	b15a      	cbz	r2, 1f7a4 <nrf_power_clock_isr+0x40>
    return (bool)(NRF_CLOCK->INTENCLR & int_mask);
   1f78c:	4a07      	ldr	r2, [pc, #28]	; (1f7ac <nrf_power_clock_isr+0x48>)
   1f78e:	f8d2 2308 	ldr.w	r2, [r2, #776]	; 0x308
	if (ret) {
   1f792:	0792      	lsls	r2, r2, #30
   1f794:	d506      	bpl.n	1f7a4 <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
   1f796:	2200      	movs	r2, #0

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
   1f798:	4807      	ldr	r0, [pc, #28]	; (1f7b8 <nrf_power_clock_isr+0x54>)
   1f79a:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
   1f79c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(lfclk_dev);
   1f7a0:	f01f ba46 	b.w	3ec30 <clkstarted_handle>
}
   1f7a4:	bd08      	pop	{r3, pc}
   1f7a6:	bf00      	nop
   1f7a8:	40005100 	.word	0x40005100
   1f7ac:	40005000 	.word	0x40005000
   1f7b0:	200314cc 	.word	0x200314cc
   1f7b4:	40005104 	.word	0x40005104
   1f7b8:	200314d8 	.word	0x200314d8

0001f7bc <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
   1f7bc:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   1f7be:	4c06      	ldr	r4, [pc, #24]	; (1f7d8 <z_clock_isr+0x1c>)
   1f7c0:	4906      	ldr	r1, [pc, #24]	; (1f7dc <z_clock_isr+0x20>)
   1f7c2:	4622      	mov	r2, r4
   1f7c4:	4806      	ldr	r0, [pc, #24]	; (1f7e0 <z_clock_isr+0x24>)
   1f7c6:	2317      	movs	r3, #23
   1f7c8:	f01f f8b0 	bl	3e92c <printk>
   1f7cc:	4620      	mov	r0, r4
}
   1f7ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   1f7d2:	2117      	movs	r1, #23
   1f7d4:	f01f b8b7 	b.w	3e946 <assert_post_action>
   1f7d8:	00045472 	.word	0x00045472
   1f7dc:	00049224 	.word	0x00049224
   1f7e0:	00044643 	.word	0x00044643

0001f7e4 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
   1f7e4:	2200      	movs	r2, #0
{
   1f7e6:	b538      	push	{r3, r4, r5, lr}
	RTC->EVENTS_COMPARE[0] = 0;
   1f7e8:	4b21      	ldr	r3, [pc, #132]	; (1f870 <rtc1_nrf_isr+0x8c>)
   1f7ea:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
   1f7ee:	f04f 0320 	mov.w	r3, #32
   1f7f2:	f3ef 8511 	mrs	r5, BASEPRI
   1f7f6:	f383 8811 	msr	BASEPRI, r3
   1f7fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1f7fe:	481d      	ldr	r0, [pc, #116]	; (1f874 <rtc1_nrf_isr+0x90>)
   1f800:	f01a fee6 	bl	3a5d0 <z_spin_lock_valid>
   1f804:	b960      	cbnz	r0, 1f820 <rtc1_nrf_isr+0x3c>
   1f806:	491c      	ldr	r1, [pc, #112]	; (1f878 <rtc1_nrf_isr+0x94>)
   1f808:	235f      	movs	r3, #95	; 0x5f
   1f80a:	4a1c      	ldr	r2, [pc, #112]	; (1f87c <rtc1_nrf_isr+0x98>)
   1f80c:	481c      	ldr	r0, [pc, #112]	; (1f880 <rtc1_nrf_isr+0x9c>)
   1f80e:	f01f f88d 	bl	3e92c <printk>
   1f812:	481c      	ldr	r0, [pc, #112]	; (1f884 <rtc1_nrf_isr+0xa0>)
   1f814:	f01f f88a 	bl	3e92c <printk>
   1f818:	215f      	movs	r1, #95	; 0x5f
   1f81a:	4818      	ldr	r0, [pc, #96]	; (1f87c <rtc1_nrf_isr+0x98>)
   1f81c:	f01f f893 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f820:	4814      	ldr	r0, [pc, #80]	; (1f874 <rtc1_nrf_isr+0x90>)
   1f822:	f01a fef3 	bl	3a60c <z_spin_lock_set_owner>
#endif
}

__STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type * p_reg)
{
     return p_reg->COUNTER;
   1f826:	4b12      	ldr	r3, [pc, #72]	; (1f870 <rtc1_nrf_isr+0x8c>)

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   1f828:	4a17      	ldr	r2, [pc, #92]	; (1f888 <rtc1_nrf_isr+0xa4>)
   1f82a:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
   1f82e:	6813      	ldr	r3, [r2, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1f830:	4810      	ldr	r0, [pc, #64]	; (1f874 <rtc1_nrf_isr+0x90>)
	return (a - b) & COUNTER_MAX;
   1f832:	1ae4      	subs	r4, r4, r3
   1f834:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   1f838:	4423      	add	r3, r4
   1f83a:	6013      	str	r3, [r2, #0]
   1f83c:	f01a fed6 	bl	3a5ec <z_spin_unlock_valid>
   1f840:	b960      	cbnz	r0, 1f85c <rtc1_nrf_isr+0x78>
   1f842:	4912      	ldr	r1, [pc, #72]	; (1f88c <rtc1_nrf_isr+0xa8>)
   1f844:	2372      	movs	r3, #114	; 0x72
   1f846:	4a0d      	ldr	r2, [pc, #52]	; (1f87c <rtc1_nrf_isr+0x98>)
   1f848:	480d      	ldr	r0, [pc, #52]	; (1f880 <rtc1_nrf_isr+0x9c>)
   1f84a:	f01f f86f 	bl	3e92c <printk>
   1f84e:	4810      	ldr	r0, [pc, #64]	; (1f890 <rtc1_nrf_isr+0xac>)
   1f850:	f01f f86c 	bl	3e92c <printk>
   1f854:	2172      	movs	r1, #114	; 0x72
   1f856:	4809      	ldr	r0, [pc, #36]	; (1f87c <rtc1_nrf_isr+0x98>)
   1f858:	f01f f875 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   1f85c:	f385 8811 	msr	BASEPRI, r5
   1f860:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   1f864:	4620      	mov	r0, r4
}
   1f866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   1f86a:	f01b bba5 	b.w	3afb8 <z_clock_announce>
   1f86e:	bf00      	nop
   1f870:	40015000 	.word	0x40015000
   1f874:	200239b8 	.word	0x200239b8
   1f878:	00044e5a 	.word	0x00044e5a
   1f87c:	00044e3b 	.word	0x00044e3b
   1f880:	00044643 	.word	0x00044643
   1f884:	00044e6f 	.word	0x00044e6f
   1f888:	200239b4 	.word	0x200239b4
   1f88c:	00044e84 	.word	0x00044e84
   1f890:	00044e9b 	.word	0x00044e9b

0001f894 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
   1f894:	b570      	push	{r4, r5, r6, lr}
   1f896:	4818      	ldr	r0, [pc, #96]	; (1f8f8 <z_clock_driver_init+0x64>)
   1f898:	f018 fd02 	bl	382a0 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
   1f89c:	b348      	cbz	r0, 1f8f2 <z_clock_driver_init+0x5e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
   1f89e:	6843      	ldr	r3, [r0, #4]
   1f8a0:	2100      	movs	r1, #0
   1f8a2:	681b      	ldr	r3, [r3, #0]
   1f8a4:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
   1f8a6:	2601      	movs	r6, #1
}

__STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   1f8a8:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
   1f8aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1f8ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
   1f8b2:	4d12      	ldr	r5, [pc, #72]	; (1f8fc <z_clock_driver_init+0x68>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
   1f8b4:	4631      	mov	r1, r6
   1f8b6:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
   1f8ba:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
   1f8be:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1f8c2:	4b0f      	ldr	r3, [pc, #60]	; (1f900 <z_clock_driver_init+0x6c>)
   1f8c4:	2015      	movs	r0, #21
   1f8c6:	601c      	str	r4, [r3, #0]
   1f8c8:	4b0e      	ldr	r3, [pc, #56]	; (1f904 <z_clock_driver_init+0x70>)
   1f8ca:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1f8ce:	4622      	mov	r2, r4
   1f8d0:	f000 f9e6 	bl	1fca0 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
   1f8d4:	2015      	movs	r0, #21
   1f8d6:	f000 f9d3 	bl	1fc80 <z_arch_irq_enable>

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
   1f8da:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

__STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1f8dc:	4b0a      	ldr	r3, [pc, #40]	; (1f908 <z_clock_driver_init+0x74>)
   1f8de:	601e      	str	r6, [r3, #0]
   1f8e0:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
   1f8e2:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
		set_comparator(counter() + CYC_PER_TICK);
   1f8e6:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1f8e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1f8ec:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
}
   1f8f0:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   1f8f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f8f6:	e7fb      	b.n	1f8f0 <z_clock_driver_init+0x5c>
   1f8f8:	00045446 	.word	0x00045446
   1f8fc:	40015000 	.word	0x40015000
   1f900:	40015140 	.word	0x40015140
   1f904:	e000e100 	.word	0xe000e100
   1f908:	40015008 	.word	0x40015008

0001f90c <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
   1f90c:	b538      	push	{r3, r4, r5, lr}
   1f90e:	4b34      	ldr	r3, [pc, #208]	; (1f9e0 <z_clock_set_timeout+0xd4>)
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
   1f910:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1f914:	bf08      	it	eq
   1f916:	4618      	moveq	r0, r3
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
   1f918:	1e44      	subs	r4, r0, #1
   1f91a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   1f91e:	429c      	cmp	r4, r3
   1f920:	bfa8      	it	ge
   1f922:	461c      	movge	r4, r3
	__asm__ volatile(
   1f924:	f04f 0320 	mov.w	r3, #32
   1f928:	f3ef 8511 	mrs	r5, BASEPRI
   1f92c:	f383 8811 	msr	BASEPRI, r3
   1f930:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1f934:	482b      	ldr	r0, [pc, #172]	; (1f9e4 <z_clock_set_timeout+0xd8>)
   1f936:	f01a fe4b 	bl	3a5d0 <z_spin_lock_valid>
   1f93a:	b960      	cbnz	r0, 1f956 <z_clock_set_timeout+0x4a>
   1f93c:	492a      	ldr	r1, [pc, #168]	; (1f9e8 <z_clock_set_timeout+0xdc>)
   1f93e:	235f      	movs	r3, #95	; 0x5f
   1f940:	4a2a      	ldr	r2, [pc, #168]	; (1f9ec <z_clock_set_timeout+0xe0>)
   1f942:	482b      	ldr	r0, [pc, #172]	; (1f9f0 <z_clock_set_timeout+0xe4>)
   1f944:	f01e fff2 	bl	3e92c <printk>
   1f948:	482a      	ldr	r0, [pc, #168]	; (1f9f4 <z_clock_set_timeout+0xe8>)
   1f94a:	f01e ffef 	bl	3e92c <printk>
   1f94e:	215f      	movs	r1, #95	; 0x5f
   1f950:	4826      	ldr	r0, [pc, #152]	; (1f9ec <z_clock_set_timeout+0xe0>)
   1f952:	f01e fff8 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f956:	4823      	ldr	r0, [pc, #140]	; (1f9e4 <z_clock_set_timeout+0xd8>)
   1f958:	f01a fe58 	bl	3a60c <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   1f95c:	4a26      	ldr	r2, [pc, #152]	; (1f9f8 <z_clock_set_timeout+0xec>)
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	bool zli_fixup = IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS);

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK + 1 + counter_sub(t, last_count);
   1f95e:	4927      	ldr	r1, [pc, #156]	; (1f9fc <z_clock_set_timeout+0xf0>)
   1f960:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
   1f964:	6809      	ldr	r1, [r1, #0]
	return (a - b) & COUNTER_MAX;
   1f966:	1a58      	subs	r0, r3, r1
   1f968:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	cyc += (CYC_PER_TICK - 1);
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
	cyc += last_count;
   1f96c:	3101      	adds	r1, #1
   1f96e:	4408      	add	r0, r1
   1f970:	4420      	add	r0, r4
	return (a - b) & COUNTER_MAX;
   1f972:	1ac3      	subs	r3, r0, r3
   1f974:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1f978:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
   1f97c:	2b02      	cmp	r3, #2
    p_reg->CC[ch] = cc_val;
   1f97e:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
   1f982:	d915      	bls.n	1f9b0 <z_clock_set_timeout+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1f984:	4817      	ldr	r0, [pc, #92]	; (1f9e4 <z_clock_set_timeout+0xd8>)
   1f986:	f01a fe31 	bl	3a5ec <z_spin_unlock_valid>
   1f98a:	b960      	cbnz	r0, 1f9a6 <z_clock_set_timeout+0x9a>
   1f98c:	491c      	ldr	r1, [pc, #112]	; (1fa00 <z_clock_set_timeout+0xf4>)
   1f98e:	2372      	movs	r3, #114	; 0x72
   1f990:	4a16      	ldr	r2, [pc, #88]	; (1f9ec <z_clock_set_timeout+0xe0>)
   1f992:	4817      	ldr	r0, [pc, #92]	; (1f9f0 <z_clock_set_timeout+0xe4>)
   1f994:	f01e ffca 	bl	3e92c <printk>
   1f998:	481a      	ldr	r0, [pc, #104]	; (1fa04 <z_clock_set_timeout+0xf8>)
   1f99a:	f01e ffc7 	bl	3e92c <printk>
   1f99e:	2172      	movs	r1, #114	; 0x72
   1f9a0:	4812      	ldr	r0, [pc, #72]	; (1f9ec <z_clock_set_timeout+0xe0>)
   1f9a2:	f01e ffd0 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   1f9a6:	f385 8811 	msr	BASEPRI, r5
   1f9aa:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
   1f9ae:	bd38      	pop	{r3, r4, r5, pc}
     return p_reg->COUNTER;
   1f9b0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
   1f9b4:	4914      	ldr	r1, [pc, #80]	; (1fa08 <z_clock_set_timeout+0xfc>)
	return (a - b) & COUNTER_MAX;
   1f9b6:	1ac3      	subs	r3, r0, r3
   1f9b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
   1f9bc:	1e5c      	subs	r4, r3, #1
   1f9be:	428c      	cmp	r4, r1
   1f9c0:	d905      	bls.n	1f9ce <z_clock_set_timeout+0xc2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1f9c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1f9c6:	4b11      	ldr	r3, [pc, #68]	; (1fa0c <z_clock_set_timeout+0x100>)
   1f9c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1f9cc:	e7da      	b.n	1f984 <z_clock_set_timeout+0x78>
		} else if (dt == 1) {
   1f9ce:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
   1f9d0:	bf02      	ittt	eq
   1f9d2:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1f9d4:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1f9d8:	f8c2 0540 	streq.w	r0, [r2, #1344]	; 0x540
   1f9dc:	e7d2      	b.n	1f984 <z_clock_set_timeout+0x78>
   1f9de:	bf00      	nop
   1f9e0:	00fffffe 	.word	0x00fffffe
   1f9e4:	200239b8 	.word	0x200239b8
   1f9e8:	00044e5a 	.word	0x00044e5a
   1f9ec:	00044e3b 	.word	0x00044e3b
   1f9f0:	00044643 	.word	0x00044643
   1f9f4:	00044e6f 	.word	0x00044e6f
   1f9f8:	40015000 	.word	0x40015000
   1f9fc:	200239b4 	.word	0x200239b4
   1fa00:	00044e84 	.word	0x00044e84
   1fa04:	00044e9b 	.word	0x00044e9b
   1fa08:	007ffffe 	.word	0x007ffffe
   1fa0c:	e000e100 	.word	0xe000e100

0001fa10 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
   1fa10:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1fa12:	f04f 0320 	mov.w	r3, #32
   1fa16:	f3ef 8511 	mrs	r5, BASEPRI
   1fa1a:	f383 8811 	msr	BASEPRI, r3
   1fa1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1fa22:	4819      	ldr	r0, [pc, #100]	; (1fa88 <z_clock_elapsed+0x78>)
   1fa24:	f01a fdd4 	bl	3a5d0 <z_spin_lock_valid>
   1fa28:	b960      	cbnz	r0, 1fa44 <z_clock_elapsed+0x34>
   1fa2a:	4918      	ldr	r1, [pc, #96]	; (1fa8c <z_clock_elapsed+0x7c>)
   1fa2c:	235f      	movs	r3, #95	; 0x5f
   1fa2e:	4a18      	ldr	r2, [pc, #96]	; (1fa90 <z_clock_elapsed+0x80>)
   1fa30:	4818      	ldr	r0, [pc, #96]	; (1fa94 <z_clock_elapsed+0x84>)
   1fa32:	f01e ff7b 	bl	3e92c <printk>
   1fa36:	4818      	ldr	r0, [pc, #96]	; (1fa98 <z_clock_elapsed+0x88>)
   1fa38:	f01e ff78 	bl	3e92c <printk>
   1fa3c:	215f      	movs	r1, #95	; 0x5f
   1fa3e:	4814      	ldr	r0, [pc, #80]	; (1fa90 <z_clock_elapsed+0x80>)
   1fa40:	f01e ff81 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fa44:	4810      	ldr	r0, [pc, #64]	; (1fa88 <z_clock_elapsed+0x78>)
   1fa46:	f01a fde1 	bl	3a60c <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   1fa4a:	4b14      	ldr	r3, [pc, #80]	; (1fa9c <z_clock_elapsed+0x8c>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1fa4c:	480e      	ldr	r0, [pc, #56]	; (1fa88 <z_clock_elapsed+0x78>)
   1fa4e:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   1fa52:	4b13      	ldr	r3, [pc, #76]	; (1faa0 <z_clock_elapsed+0x90>)
	return (a - b) & COUNTER_MAX;
   1fa54:	681b      	ldr	r3, [r3, #0]
   1fa56:	1ae4      	subs	r4, r4, r3
   1fa58:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   1fa5c:	f01a fdc6 	bl	3a5ec <z_spin_unlock_valid>
   1fa60:	b960      	cbnz	r0, 1fa7c <z_clock_elapsed+0x6c>
   1fa62:	4910      	ldr	r1, [pc, #64]	; (1faa4 <z_clock_elapsed+0x94>)
   1fa64:	2372      	movs	r3, #114	; 0x72
   1fa66:	4a0a      	ldr	r2, [pc, #40]	; (1fa90 <z_clock_elapsed+0x80>)
   1fa68:	480a      	ldr	r0, [pc, #40]	; (1fa94 <z_clock_elapsed+0x84>)
   1fa6a:	f01e ff5f 	bl	3e92c <printk>
   1fa6e:	480e      	ldr	r0, [pc, #56]	; (1faa8 <z_clock_elapsed+0x98>)
   1fa70:	f01e ff5c 	bl	3e92c <printk>
   1fa74:	2172      	movs	r1, #114	; 0x72
   1fa76:	4806      	ldr	r0, [pc, #24]	; (1fa90 <z_clock_elapsed+0x80>)
   1fa78:	f01e ff65 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   1fa7c:	f385 8811 	msr	BASEPRI, r5
   1fa80:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   1fa84:	4620      	mov	r0, r4
   1fa86:	bd38      	pop	{r3, r4, r5, pc}
   1fa88:	200239b8 	.word	0x200239b8
   1fa8c:	00044e5a 	.word	0x00044e5a
   1fa90:	00044e3b 	.word	0x00044e3b
   1fa94:	00044643 	.word	0x00044643
   1fa98:	00044e6f 	.word	0x00044e6f
   1fa9c:	40015000 	.word	0x40015000
   1faa0:	200239b4 	.word	0x200239b4
   1faa4:	00044e84 	.word	0x00044e84
   1faa8:	00044e9b 	.word	0x00044e9b

0001faac <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
   1faac:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1faae:	f04f 0320 	mov.w	r3, #32
   1fab2:	f3ef 8511 	mrs	r5, BASEPRI
   1fab6:	f383 8811 	msr	BASEPRI, r3
   1faba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   1fabe:	481a      	ldr	r0, [pc, #104]	; (1fb28 <z_timer_cycle_get_32+0x7c>)
   1fac0:	f01a fd86 	bl	3a5d0 <z_spin_lock_valid>
   1fac4:	b960      	cbnz	r0, 1fae0 <z_timer_cycle_get_32+0x34>
   1fac6:	4919      	ldr	r1, [pc, #100]	; (1fb2c <z_timer_cycle_get_32+0x80>)
   1fac8:	235f      	movs	r3, #95	; 0x5f
   1faca:	4a19      	ldr	r2, [pc, #100]	; (1fb30 <z_timer_cycle_get_32+0x84>)
   1facc:	4819      	ldr	r0, [pc, #100]	; (1fb34 <z_timer_cycle_get_32+0x88>)
   1face:	f01e ff2d 	bl	3e92c <printk>
   1fad2:	4819      	ldr	r0, [pc, #100]	; (1fb38 <z_timer_cycle_get_32+0x8c>)
   1fad4:	f01e ff2a 	bl	3e92c <printk>
   1fad8:	215f      	movs	r1, #95	; 0x5f
   1fada:	4815      	ldr	r0, [pc, #84]	; (1fb30 <z_timer_cycle_get_32+0x84>)
   1fadc:	f01e ff33 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fae0:	4811      	ldr	r0, [pc, #68]	; (1fb28 <z_timer_cycle_get_32+0x7c>)
   1fae2:	f01a fd93 	bl	3a60c <z_spin_lock_set_owner>
   1fae6:	4b15      	ldr	r3, [pc, #84]	; (1fb3c <z_timer_cycle_get_32+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   1fae8:	480f      	ldr	r0, [pc, #60]	; (1fb28 <z_timer_cycle_get_32+0x7c>)
   1faea:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   1faee:	4b14      	ldr	r3, [pc, #80]	; (1fb40 <z_timer_cycle_get_32+0x94>)
   1faf0:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   1faf2:	1ae4      	subs	r4, r4, r3
   1faf4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   1faf8:	441c      	add	r4, r3
   1fafa:	f01a fd77 	bl	3a5ec <z_spin_unlock_valid>
   1fafe:	b960      	cbnz	r0, 1fb1a <z_timer_cycle_get_32+0x6e>
   1fb00:	4910      	ldr	r1, [pc, #64]	; (1fb44 <z_timer_cycle_get_32+0x98>)
   1fb02:	2372      	movs	r3, #114	; 0x72
   1fb04:	4a0a      	ldr	r2, [pc, #40]	; (1fb30 <z_timer_cycle_get_32+0x84>)
   1fb06:	480b      	ldr	r0, [pc, #44]	; (1fb34 <z_timer_cycle_get_32+0x88>)
   1fb08:	f01e ff10 	bl	3e92c <printk>
   1fb0c:	480e      	ldr	r0, [pc, #56]	; (1fb48 <z_timer_cycle_get_32+0x9c>)
   1fb0e:	f01e ff0d 	bl	3e92c <printk>
   1fb12:	2172      	movs	r1, #114	; 0x72
   1fb14:	4806      	ldr	r0, [pc, #24]	; (1fb30 <z_timer_cycle_get_32+0x84>)
   1fb16:	f01e ff16 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   1fb1a:	f385 8811 	msr	BASEPRI, r5
   1fb1e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   1fb22:	4620      	mov	r0, r4
   1fb24:	bd38      	pop	{r3, r4, r5, pc}
   1fb26:	bf00      	nop
   1fb28:	200239b8 	.word	0x200239b8
   1fb2c:	00044e5a 	.word	0x00044e5a
   1fb30:	00044e3b 	.word	0x00044e3b
   1fb34:	00044643 	.word	0x00044643
   1fb38:	00044e6f 	.word	0x00044e6f
   1fb3c:	40015000 	.word	0x40015000
   1fb40:	200239b4 	.word	0x200239b4
   1fb44:	00044e84 	.word	0x00044e84
   1fb48:	00044e9b 	.word	0x00044e9b

0001fb4c <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   1fb4c:	4804      	ldr	r0, [pc, #16]	; (1fb60 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   1fb4e:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
   1fb50:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
   1fb52:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   1fb54:	d003      	beq.n	1fb5e <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   1fb56:	4903      	ldr	r1, [pc, #12]	; (1fb64 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   1fb58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   1fb5c:	600a      	str	r2, [r1, #0]

0001fb5e <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
   1fb5e:	4770      	bx	lr
    ldr r0, =_kernel
   1fb60:	2002a214 	.word	0x2002a214
    ldr r1, =_SCS_ICSR
   1fb64:	e000ed04 	.word	0xe000ed04

0001fb68 <z_arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
   1fb68:	4a09      	ldr	r2, [pc, #36]	; (1fb90 <z_arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1fb6a:	490a      	ldr	r1, [pc, #40]	; (1fb94 <z_arch_swap+0x2c>)
	_current->arch.basepri = key;
   1fb6c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1fb6e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   1fb70:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
   1fb72:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1fb74:	4908      	ldr	r1, [pc, #32]	; (1fb98 <z_arch_swap+0x30>)
   1fb76:	684b      	ldr	r3, [r1, #4]
   1fb78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1fb7c:	604b      	str	r3, [r1, #4]
   1fb7e:	2300      	movs	r3, #0
   1fb80:	f383 8811 	msr	BASEPRI, r3
   1fb84:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1fb88:	6893      	ldr	r3, [r2, #8]
}
   1fb8a:	6e98      	ldr	r0, [r3, #104]	; 0x68
   1fb8c:	4770      	bx	lr
   1fb8e:	bf00      	nop
   1fb90:	2002a214 	.word	0x2002a214
   1fb94:	00043e8c 	.word	0x00043e8c
   1fb98:	e000ed00 	.word	0xe000ed00

0001fb9c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1fb9c:	492e      	ldr	r1, [pc, #184]	; (1fc58 <in_fp_endif+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1fb9e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1fba0:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
   1fba4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1fba6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1fbaa:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   1fbae:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   1fbb2:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   1fbb6:	d004      	beq.n	1fbc2 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   1fbb8:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   1fbbc:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   1fbc0:	e007      	b.n	1fbd2 <out_fp_endif>

0001fbc2 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   1fbc2:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
   1fbc6:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   1fbca:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   1fbce:	f050 0004 	orrs.w	r0, r0, #4

0001fbd2 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   1fbd2:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1fbd6:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1fbd8:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1fbdc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1fbe0:	4f1e      	ldr	r7, [pc, #120]	; (1fc5c <in_fp_endif+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1fbe2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1fbe6:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   1fbe8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1fbea:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1fbec:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
   1fbee:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1fbf0:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1fbf2:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   1fbf6:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   1fbfa:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   1fbfe:	d105      	bne.n	1fc0c <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   1fc00:	2300      	movs	r3, #0
    vmsr fpscr, r3
   1fc02:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   1fc06:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   1fc0a:	e005      	b.n	1fc18 <in_fp_endif>

0001fc0c <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   1fc0c:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   1fc10:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
   1fc14:	ec90 8a10 	vldmia	r0, {s16-s31}

0001fc18 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   1fc18:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   1fc1c:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   1fc20:	f383 8814 	msr	CONTROL, r3
    isb
   1fc24:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
   1fc28:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   1fc2a:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   1fc2c:	f01f f831 	bl	3ec92 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   1fc30:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1fc34:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   1fc38:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
   1fc3c:	f04f 0000 	mov.w	r0, #0
    msr PSPLIM, r0
   1fc40:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1fc44:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   1fc48:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   1fc4c:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   1fc4e:	f01f f811 	bl	3ec74 <configure_builtin_stack_guard>
    pop {r2, lr}
   1fc52:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   1fc56:	4770      	bx	lr
    ldr r1, =_kernel
   1fc58:	2002a214 	.word	0x2002a214
    ldr v4, =_SCS_ICSR
   1fc5c:	e000ed04 	.word	0xe000ed04

0001fc60 <z_arm_svc>:
 */
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
    tst lr, #0x4    /* did we come from thread mode ? */
   1fc60:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1fc64:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1fc66:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1fc6a:	f3ef 8009 	mrsne	r0, PSP


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1fc6e:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
    ldrb r1, [r1, #-2]
   1fc70:	f811 1c02 	ldrb.w	r1, [r1, #-2]
    tst r2, #0x1
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1fc74:	2902      	cmp	r1, #2
    beq _oops
   1fc76:	d0ff      	beq.n	1fc78 <_oops>

0001fc78 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1fc78:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1fc7a:	f01e ffff 	bl	3ec7c <z_do_kernel_oops>
    pop {r0, pc}
   1fc7e:	bd01      	pop	{r0, pc}

0001fc80 <z_arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void z_arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   1fc80:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   1fc82:	2b00      	cmp	r3, #0
   1fc84:	db08      	blt.n	1fc98 <z_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1fc86:	2201      	movs	r2, #1
   1fc88:	f000 001f 	and.w	r0, r0, #31
   1fc8c:	fa02 f000 	lsl.w	r0, r2, r0
   1fc90:	4a02      	ldr	r2, [pc, #8]	; (1fc9c <z_arch_irq_enable+0x1c>)
   1fc92:	095b      	lsrs	r3, r3, #5
   1fc94:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   1fc98:	4770      	bx	lr
   1fc9a:	bf00      	nop
   1fc9c:	e000e100 	.word	0xe000e100

0001fca0 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
   1fca0:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   1fca2:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
   1fca4:	2c07      	cmp	r4, #7
{
   1fca6:	4605      	mov	r5, r0
   1fca8:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
   1fcaa:	d90e      	bls.n	1fcca <z_arm_irq_priority_set+0x2a>
   1fcac:	2360      	movs	r3, #96	; 0x60
   1fcae:	4a10      	ldr	r2, [pc, #64]	; (1fcf0 <z_arm_irq_priority_set+0x50>)
   1fcb0:	4910      	ldr	r1, [pc, #64]	; (1fcf4 <z_arm_irq_priority_set+0x54>)
   1fcb2:	4811      	ldr	r0, [pc, #68]	; (1fcf8 <z_arm_irq_priority_set+0x58>)
   1fcb4:	f01e fe3a 	bl	3e92c <printk>
   1fcb8:	4631      	mov	r1, r6
   1fcba:	4810      	ldr	r0, [pc, #64]	; (1fcfc <z_arm_irq_priority_set+0x5c>)
   1fcbc:	2207      	movs	r2, #7
   1fcbe:	f01e fe35 	bl	3e92c <printk>
   1fcc2:	2160      	movs	r1, #96	; 0x60
   1fcc4:	480a      	ldr	r0, [pc, #40]	; (1fcf0 <z_arm_irq_priority_set+0x50>)
   1fcc6:	f01e fe3e 	bl	3e946 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1fcca:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1fccc:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1fcce:	bfa8      	it	ge
   1fcd0:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
   1fcd4:	ea4f 1444 	mov.w	r4, r4, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1fcd8:	bfb8      	it	lt
   1fcda:	4b09      	ldrlt	r3, [pc, #36]	; (1fd00 <z_arm_irq_priority_set+0x60>)
   1fcdc:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1fcde:	bfab      	itete	ge
   1fce0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1fce4:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1fce8:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1fcec:	555c      	strblt	r4, [r3, r5]
}
   1fcee:	bd70      	pop	{r4, r5, r6, pc}
   1fcf0:	0004549d 	.word	0x0004549d
   1fcf4:	000454c4 	.word	0x000454c4
   1fcf8:	00044643 	.word	0x00044643
   1fcfc:	000454df 	.word	0x000454df
   1fd00:	e000ed14 	.word	0xe000ed14

0001fd04 <_arch_isr_direct_pm>:
 * See https://github.com/zephyrproject-rtos/zephyr/issues/3056
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   1fd04:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1fd06:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   1fd08:	4b04      	ldr	r3, [pc, #16]	; (1fd1c <_arch_isr_direct_pm+0x18>)
   1fd0a:	6a18      	ldr	r0, [r3, #32]
   1fd0c:	b118      	cbz	r0, 1fd16 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   1fd0e:	2200      	movs	r2, #0
   1fd10:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
   1fd12:	f020 fe79 	bl	40a08 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   1fd16:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   1fd18:	bd08      	pop	{r3, pc}
   1fd1a:	bf00      	nop
   1fd1c:	2002a214 	.word	0x2002a214

0001fd20 <z_arch_new_thread>:
 */
void z_arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		       size_t stackSize, k_thread_entry_t pEntry,
		       void *parameter1, void *parameter2, void *parameter3,
		       int priority, unsigned int options)
{
   1fd20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fd24:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1fd26:	4605      	mov	r5, r0
	char *pStackMem = Z_THREAD_STACK_BUFFER(stack);
	char *stackEnd;
	/* Offset between the top of stack and the high end of stack area. */
	u32_t top_of_stack_offset = 0U;

	Z_ASSERT_VALID_PRIO(priority, pEntry);
   1fd28:	2e0f      	cmp	r6, #15
{
   1fd2a:	4689      	mov	r9, r1
   1fd2c:	4690      	mov	r8, r2
   1fd2e:	461f      	mov	r7, r3
	Z_ASSERT_VALID_PRIO(priority, pEntry);
   1fd30:	d127      	bne.n	1fd82 <z_arch_new_thread+0x62>
   1fd32:	4b1f      	ldr	r3, [pc, #124]	; (1fdb0 <z_arch_new_thread+0x90>)
   1fd34:	429f      	cmp	r7, r3
   1fd36:	d128      	bne.n	1fd8a <z_arch_new_thread+0x6a>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	z_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
   1fd38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1fd3a:	2204      	movs	r2, #4
   1fd3c:	4631      	mov	r1, r6
   1fd3e:	4628      	mov	r0, r5
   1fd40:	f020 ff5b 	bl	40bfa <z_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
   1fd44:	2200      	movs	r2, #0
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
   1fd46:	eb09 0408 	add.w	r4, r9, r8
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
   1fd4a:	491a      	ldr	r1, [pc, #104]	; (1fdb4 <z_arch_new_thread+0x94>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   1fd4c:	f1a4 0320 	sub.w	r3, r4, #32
   1fd50:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
   1fd54:	f021 0101 	bic.w	r1, r1, #1
	thread->fn_abort = NULL;
   1fd58:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
   1fd5c:	e9c5 9816 	strd	r9, r8, [r5, #88]	; 0x58
   1fd60:	6199      	str	r1, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
   1fd62:	9908      	ldr	r1, [sp, #32]
	pInitCtx->basic.a1 = (u32_t)pEntry;
   1fd64:	601f      	str	r7, [r3, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
   1fd66:	6059      	str	r1, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
   1fd68:	9909      	ldr	r1, [sp, #36]	; 0x24
   1fd6a:	6099      	str	r1, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   1fd6c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1fd6e:	60d9      	str	r1, [r3, #12]
	pInitCtx->basic.xpsr =
   1fd70:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   1fd74:	61d9      	str	r1, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
   1fd76:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
   1fd78:	666a      	str	r2, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
   1fd7a:	f8c5 20ac 	str.w	r2, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1fd7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(priority, pEntry);
   1fd82:	f106 0310 	add.w	r3, r6, #16
   1fd86:	2b1e      	cmp	r3, #30
   1fd88:	d9d6      	bls.n	1fd38 <z_arch_new_thread+0x18>
   1fd8a:	232e      	movs	r3, #46	; 0x2e
   1fd8c:	4a0a      	ldr	r2, [pc, #40]	; (1fdb8 <z_arch_new_thread+0x98>)
   1fd8e:	490b      	ldr	r1, [pc, #44]	; (1fdbc <z_arch_new_thread+0x9c>)
   1fd90:	480b      	ldr	r0, [pc, #44]	; (1fdc0 <z_arch_new_thread+0xa0>)
   1fd92:	f01e fdcb 	bl	3e92c <printk>
   1fd96:	4631      	mov	r1, r6
   1fd98:	f06f 030f 	mvn.w	r3, #15
   1fd9c:	220e      	movs	r2, #14
   1fd9e:	4809      	ldr	r0, [pc, #36]	; (1fdc4 <z_arch_new_thread+0xa4>)
   1fda0:	f01e fdc4 	bl	3e92c <printk>
   1fda4:	212e      	movs	r1, #46	; 0x2e
   1fda6:	4804      	ldr	r0, [pc, #16]	; (1fdb8 <z_arch_new_thread+0x98>)
   1fda8:	f01e fdcd 	bl	3e946 <assert_post_action>
   1fdac:	e7c4      	b.n	1fd38 <z_arch_new_thread+0x18>
   1fdae:	bf00      	nop
   1fdb0:	000383f1 	.word	0x000383f1
   1fdb4:	0003e3d5 	.word	0x0003e3d5
   1fdb8:	00045514 	.word	0x00045514
   1fdbc:	00045537 	.word	0x00045537
   1fdc0:	00044643 	.word	0x00044643
   1fdc4:	000455c4 	.word	0x000455c4

0001fdc8 <z_arch_switch_to_main_thread>:

void z_arch_switch_to_main_thread(struct k_thread *main_thread,
				  k_thread_stack_t *main_stack,
				  size_t main_stack_size,
				  k_thread_entry_t _main)
{
   1fdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fdca:	461f      	mov	r7, r3
   1fdcc:	4606      	mov	r6, r0
   1fdce:	460d      	mov	r5, r1
   1fdd0:	4614      	mov	r4, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   1fdd2:	2300      	movs	r3, #0
   1fdd4:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1fdd8:	f3ef 8214 	mrs	r2, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   1fddc:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   1fde0:	f382 8814 	msr	CONTROL, r2
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   1fde4:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1fde8:	f000 fc34 	bl	20654 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
   1fdec:	4b0c      	ldr	r3, [pc, #48]	; (1fe20 <z_arch_switch_to_main_thread+0x58>)
	start_of_main_stack =
   1fdee:	442c      	add	r4, r5
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1fdf0:	4630      	mov	r0, r6
	_current = main_thread;
   1fdf2:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
   1fdf4:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1fdf8:	f01e ff4b 	bl	3ec92 <z_arm_configure_dynamic_mpu_regions>
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1fdfc:	f385 880b 	msr	PSPLIM, r5

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1fe00:	4638      	mov	r0, r7
   1fe02:	f384 8809 	msr	PSP, r4
   1fe06:	b663      	cpsie	if
   1fe08:	f04f 0100 	mov.w	r1, #0
   1fe0c:	f381 8811 	msr	BASEPRI, r1
   1fe10:	f3bf 8f6f 	isb	sy
   1fe14:	2100      	movs	r1, #0
   1fe16:	2200      	movs	r2, #0
   1fe18:	2300      	movs	r3, #0
   1fe1a:	f01e fadb 	bl	3e3d4 <z_thread_entry>
	"bl z_thread_entry\n\t"	/* z_thread_entry(_main, 0, 0, 0); */
	:
	: "r" (_main), "r" (start_of_main_stack)
	);

	CODE_UNREACHABLE;
   1fe1e:	bf00      	nop
   1fe20:	2002a214 	.word	0x2002a214

0001fe24 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
   1fe24:	4901      	ldr	r1, [pc, #4]	; (1fe2c <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   1fe26:	2210      	movs	r2, #16
	str r2, [r1]
   1fe28:	600a      	str	r2, [r1, #0]
#endif
	bx lr
   1fe2a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   1fe2c:	e000ed10 	.word	0xe000ed10

0001fe30 <z_arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   1fe30:	4040      	eors	r0, r0
	msr BASEPRI, r0
   1fe32:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
   1fe36:	bf30      	wfi

	bx lr
   1fe38:	4770      	bx	lr
   1fe3a:	bf00      	nop

0001fe3c <z_arm_bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
   1fe3c:	4040      	eors	r0, r0
	msr BASEPRI, r0
   1fe3e:	f380 8811 	msr	BASEPRI, r0
	/* RETTOBASE flag is not banked between security states.
	 * Therefore, we cannot rely on this flag, to obtain the SP
	 * of the current security state.
	 * Instead, we use the EXC_RETURN.SPSEL flag.
	 */
 	ldr r0, =0x4
   1fe42:	f04f 0004 	mov.w	r0, #4
	mov r1, lr
   1fe46:	4671      	mov	r1, lr
	tst r1, r0
   1fe48:	4201      	tst	r1, r0
	beq _s_stack_frame_msp
   1fe4a:	d002      	beq.n	1fe52 <_s_stack_frame_msp>
	mrs r0, PSP
   1fe4c:	f3ef 8009 	mrs	r0, PSP
	bne _s_stack_frame_endif
   1fe50:	d101      	bne.n	1fe56 <_s_stack_frame_endif>

0001fe52 <_s_stack_frame_msp>:
_s_stack_frame_msp:
	mrs r0, MSP
   1fe52:	f3ef 8008 	mrs	r0, MSP

0001fe56 <_s_stack_frame_endif>:
	 *
	 * To determine this we need to inspect the EXC_RETURN value
	 * located in the LR. Therefore, we supply the LR value as an
	 * argument to the fault handler.
	 */
	mov r1, lr
   1fe56:	4671      	mov	r1, lr
#endif /* CONFIG_ARM_SECURE_FIRMWARE || CONFIG_ARM_NONSECURE_FIRMWARE */
	push {r0, lr}
   1fe58:	b501      	push	{r0, lr}
	bl z_arm_fault
   1fe5a:	f000 fac5 	bl	203e8 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
   1fe5e:	bd01      	pop	{r0, pc}

0001fe60 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1fe60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fe64:	4681      	mov	r9, r0
   1fe66:	b086      	sub	sp, #24

	if (esf != NULL) {
   1fe68:	460c      	mov	r4, r1
   1fe6a:	2900      	cmp	r1, #0
   1fe6c:	d075      	beq.n	1ff5a <z_arm_fatal_error+0xfa>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1fe6e:	2301      	movs	r3, #1
   1fe70:	f04f 0000 	mov.w	r0, #0
   1fe74:	4d3c      	ldr	r5, [pc, #240]	; (1ff68 <z_arm_fatal_error+0x108>)
   1fe76:	f363 0007 	bfi	r0, r3, #0, #8
   1fe7a:	4b3c      	ldr	r3, [pc, #240]	; (1ff6c <z_arm_fatal_error+0x10c>)
   1fe7c:	4627      	mov	r7, r4
   1fe7e:	1aed      	subs	r5, r5, r3
   1fe80:	688b      	ldr	r3, [r1, #8]
   1fe82:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   1fe86:	9300      	str	r3, [sp, #0]
   1fe88:	e9d1 2300 	ldrd	r2, r3, [r1]
   1fe8c:	f365 108f 	bfi	r0, r5, #6, #10
   1fe90:	4937      	ldr	r1, [pc, #220]	; (1ff70 <z_arm_fatal_error+0x110>)
   1fe92:	f01e fd68 	bl	3e966 <log_string_sync>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1fe96:	2301      	movs	r3, #1
   1fe98:	f04f 0000 	mov.w	r0, #0
   1fe9c:	f363 0007 	bfi	r0, r3, #0, #8
   1fea0:	6963      	ldr	r3, [r4, #20]
   1fea2:	f365 108f 	bfi	r0, r5, #6, #10
   1fea6:	9300      	str	r3, [sp, #0]
   1fea8:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   1feac:	4931      	ldr	r1, [pc, #196]	; (1ff74 <z_arm_fatal_error+0x114>)
   1feae:	f01e fd5a 	bl	3e966 <log_string_sync>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1feb2:	2301      	movs	r3, #1
   1feb4:	f04f 0000 	mov.w	r0, #0
   1feb8:	f363 0007 	bfi	r0, r3, #0, #8
   1febc:	f365 108f 	bfi	r0, r5, #6, #10
   1fec0:	69e2      	ldr	r2, [r4, #28]
   1fec2:	492d      	ldr	r1, [pc, #180]	; (1ff78 <z_arm_fatal_error+0x118>)
   1fec4:	f01e fd4f 	bl	3e966 <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
   1fec8:	2600      	movs	r6, #0
		LOG_ERR("s[%d]:  0x%08x  s[%d]:  0x%08x"
   1feca:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1ff84 <z_arm_fatal_error+0x124>
   1fece:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   1fed2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1fed6:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   1feda:	f043 0301 	orr.w	r3, r3, #1
   1fede:	f363 0807 	bfi	r8, r3, #0, #8
   1fee2:	1cf3      	adds	r3, r6, #3
   1fee4:	ed97 7a08 	vldr	s14, [r7, #32]
   1fee8:	9304      	str	r3, [sp, #16]
   1feea:	edcd 7a05 	vstr	s15, [sp, #20]
   1feee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   1fef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1fef6:	1cb3      	adds	r3, r6, #2
   1fef8:	9302      	str	r3, [sp, #8]
   1fefa:	edcd 7a03 	vstr	s15, [sp, #12]
   1fefe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   1ff02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1ff06:	edcd 7a01 	vstr	s15, [sp, #4]
   1ff0a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   1ff0e:	1c73      	adds	r3, r6, #1
   1ff10:	f365 188f 	bfi	r8, r5, #6, #10
   1ff14:	9300      	str	r3, [sp, #0]
   1ff16:	4632      	mov	r2, r6
   1ff18:	ee17 3a90 	vmov	r3, s15
   1ff1c:	4651      	mov	r1, sl
   1ff1e:	4640      	mov	r0, r8
	for (int i = 0; i < 16; i += 4) {
   1ff20:	3604      	adds	r6, #4
		LOG_ERR("s[%d]:  0x%08x  s[%d]:  0x%08x"
   1ff22:	f01e fd20 	bl	3e966 <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
   1ff26:	2e10      	cmp	r6, #16
   1ff28:	f107 0710 	add.w	r7, r7, #16
   1ff2c:	d1cf      	bne.n	1fece <z_arm_fatal_error+0x6e>
	LOG_ERR("fpscr:  0x%08x\n", esf->fpscr);
   1ff2e:	2301      	movs	r3, #1
   1ff30:	f04f 0000 	mov.w	r0, #0
   1ff34:	f363 0007 	bfi	r0, r3, #0, #8
   1ff38:	f365 108f 	bfi	r0, r5, #6, #10
   1ff3c:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1ff3e:	490f      	ldr	r1, [pc, #60]	; (1ff7c <z_arm_fatal_error+0x11c>)
   1ff40:	f01e fd11 	bl	3e966 <log_string_sync>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   1ff44:	f04f 0000 	mov.w	r0, #0
   1ff48:	2301      	movs	r3, #1
   1ff4a:	f363 0007 	bfi	r0, r3, #0, #8
   1ff4e:	f365 108f 	bfi	r0, r5, #6, #10
   1ff52:	69a2      	ldr	r2, [r4, #24]
   1ff54:	490a      	ldr	r1, [pc, #40]	; (1ff80 <z_arm_fatal_error+0x120>)
   1ff56:	f01e fd06 	bl	3e966 <log_string_sync>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1ff5a:	4621      	mov	r1, r4
   1ff5c:	4648      	mov	r0, r9
}
   1ff5e:	b006      	add	sp, #24
   1ff60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_fatal_error(reason, esf);
   1ff64:	f018 b9c8 	b.w	382f8 <z_fatal_error>
   1ff68:	000423ec 	.word	0x000423ec
   1ff6c:	00042314 	.word	0x00042314
   1ff70:	000455f5 	.word	0x000455f5
   1ff74:	00045624 	.word	0x00045624
   1ff78:	00045653 	.word	0x00045653
   1ff7c:	000456a2 	.word	0x000456a2
   1ff80:	000456b2 	.word	0x000456b2
   1ff84:	00045662 	.word	0x00045662

0001ff88 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1ff88:	bf30      	wfi
    b z_SysNmiOnReset
   1ff8a:	f7ff bffd 	b.w	1ff88 <z_SysNmiOnReset>
   1ff8e:	bf00      	nop

0001ff90 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1ff90:	4a11      	ldr	r2, [pc, #68]	; (1ffd8 <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   1ff92:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1ff94:	4b11      	ldr	r3, [pc, #68]	; (1ffdc <z_arm_prep_c+0x4c>)
   1ff96:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1ff9a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1ff9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1ffa0:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   1ffa4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1ffa8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   1ffac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   1ffb0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   1ffb4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   1ffb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1ffbc:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   1ffc0:	2300      	movs	r3, #0
   1ffc2:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
   1ffc6:	f018 fa2d 	bl	38424 <z_bss_zero>
	z_data_copy();
   1ffca:	f018 fa35 	bl	38438 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
   1ffce:	f000 faf7 	bl	205c0 <z_arm_int_lib_init>
	z_cstart();
   1ffd2:	f018 fa63 	bl	3849c <z_cstart>
   1ffd6:	bf00      	nop
   1ffd8:	00018200 	.word	0x00018200
   1ffdc:	e000ed00 	.word	0xe000ed00

0001ffe0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   1ffe0:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
   1ffe2:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1ffe4:	4a0b      	ldr	r2, [pc, #44]	; (20014 <__kernel_ram_size+0x14>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1ffe6:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   1ffe8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1ffea:	bf1e      	ittt	ne
	movne	r1, #0
   1ffec:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1ffee:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   1fff0:	f020 fd0a 	blne	40a08 <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1fff4:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1fff6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1fffa:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1fffe:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
   20002:	4905      	ldr	r1, [pc, #20]	; (20018 <__kernel_ram_size+0x18>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   20004:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   20006:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   20008:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   2000a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   2000e:	4903      	ldr	r1, [pc, #12]	; (2001c <__kernel_ram_size+0x1c>)
	bx r1
   20010:	4708      	bx	r1
   20012:	0000      	.short	0x0000
	ldr r2, =_kernel
   20014:	2002a214 	.word	0x2002a214
	ldr r1, =_sw_isr_table
   20018:	00042004 	.word	0x00042004
	ldr r1, =z_arm_int_exit
   2001c:	0001fb4d 	.word	0x0001fb4d

00020020 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   20020:	f01e fc98 	bl	3e954 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   20024:	2020      	movs	r0, #32
    msr BASEPRI, r0
   20026:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
   2002a:	4808      	ldr	r0, [pc, #32]	; (2004c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   2002c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   20030:	1840      	adds	r0, r0, r1
    msr PSP, r0
   20032:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   20036:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   2003a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   2003c:	4308      	orrs	r0, r1
    msr CONTROL, r0
   2003e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   20042:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   20046:	f7ff ffa3 	bl	1ff90 <z_arm_prep_c>
   2004a:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   2004c:	2002e6f8 	.word	0x2002e6f8

00020050 <bus_fault.isra.2>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   20050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   20052:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   20054:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   20056:	f04f 0000 	mov.w	r0, #0
   2005a:	4c3d      	ldr	r4, [pc, #244]	; (20150 <bus_fault.isra.2+0x100>)
   2005c:	f363 0007 	bfi	r0, r3, #0, #8
   20060:	4b3c      	ldr	r3, [pc, #240]	; (20154 <bus_fault.isra.2+0x104>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   20062:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   20064:	1ae4      	subs	r4, r4, r3
   20066:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2006a:	493b      	ldr	r1, [pc, #236]	; (20158 <bus_fault.isra.2+0x108>)
   2006c:	f364 108f 	bfi	r0, r4, #6, #10
   20070:	f01e fc79 	bl	3e966 <log_string_sync>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   20074:	4b39      	ldr	r3, [pc, #228]	; (2015c <bus_fault.isra.2+0x10c>)
   20076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20078:	04d9      	lsls	r1, r3, #19
   2007a:	d509      	bpl.n	20090 <bus_fault.isra.2+0x40>
		PR_FAULT_INFO("  Stacking error");
   2007c:	f04f 0000 	mov.w	r0, #0
   20080:	2301      	movs	r3, #1
   20082:	f363 0007 	bfi	r0, r3, #0, #8
   20086:	f364 108f 	bfi	r0, r4, #6, #10
   2008a:	4935      	ldr	r1, [pc, #212]	; (20160 <bus_fault.isra.2+0x110>)
   2008c:	f01e fc6b 	bl	3e966 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   20090:	4b32      	ldr	r3, [pc, #200]	; (2015c <bus_fault.isra.2+0x10c>)
   20092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20094:	051a      	lsls	r2, r3, #20
   20096:	d509      	bpl.n	200ac <bus_fault.isra.2+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   20098:	f04f 0000 	mov.w	r0, #0
   2009c:	2301      	movs	r3, #1
   2009e:	f363 0007 	bfi	r0, r3, #0, #8
   200a2:	f364 108f 	bfi	r0, r4, #6, #10
   200a6:	492f      	ldr	r1, [pc, #188]	; (20164 <bus_fault.isra.2+0x114>)
   200a8:	f01e fc5d 	bl	3e966 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   200ac:	4d2b      	ldr	r5, [pc, #172]	; (2015c <bus_fault.isra.2+0x10c>)
   200ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
   200b0:	059b      	lsls	r3, r3, #22
   200b2:	d51c      	bpl.n	200ee <bus_fault.isra.2+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
   200b4:	2301      	movs	r3, #1
   200b6:	f04f 0000 	mov.w	r0, #0
   200ba:	f363 0007 	bfi	r0, r3, #0, #8
   200be:	f364 108f 	bfi	r0, r4, #6, #10
   200c2:	4929      	ldr	r1, [pc, #164]	; (20168 <bus_fault.isra.2+0x118>)
   200c4:	f01e fc4f 	bl	3e966 <log_string_sync>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   200c8:	6baa      	ldr	r2, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   200ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
   200cc:	0418      	lsls	r0, r3, #16
   200ce:	d50e      	bpl.n	200ee <bus_fault.isra.2+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   200d0:	f04f 0000 	mov.w	r0, #0
   200d4:	2301      	movs	r3, #1
   200d6:	f363 0007 	bfi	r0, r3, #0, #8
   200da:	f364 108f 	bfi	r0, r4, #6, #10
   200de:	4923      	ldr	r1, [pc, #140]	; (2016c <bus_fault.isra.2+0x11c>)
   200e0:	f01e fc41 	bl	3e966 <log_string_sync>
			if (from_hard_fault) {
   200e4:	b11f      	cbz	r7, 200ee <bus_fault.isra.2+0x9e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   200e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   200e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   200ec:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   200ee:	4b1b      	ldr	r3, [pc, #108]	; (2015c <bus_fault.isra.2+0x10c>)
   200f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   200f2:	0559      	lsls	r1, r3, #21
   200f4:	d509      	bpl.n	2010a <bus_fault.isra.2+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
   200f6:	f04f 0000 	mov.w	r0, #0
   200fa:	2301      	movs	r3, #1
   200fc:	f363 0007 	bfi	r0, r3, #0, #8
   20100:	f364 108f 	bfi	r0, r4, #6, #10
   20104:	491a      	ldr	r1, [pc, #104]	; (20170 <bus_fault.isra.2+0x120>)
   20106:	f01e fc2e 	bl	3e966 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   2010a:	4b14      	ldr	r3, [pc, #80]	; (2015c <bus_fault.isra.2+0x10c>)
   2010c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2010e:	05d2      	lsls	r2, r2, #23
   20110:	d511      	bpl.n	20136 <bus_fault.isra.2+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
   20112:	f04f 0000 	mov.w	r0, #0
   20116:	2301      	movs	r3, #1
   20118:	4916      	ldr	r1, [pc, #88]	; (20174 <bus_fault.isra.2+0x124>)
   2011a:	f363 0007 	bfi	r0, r3, #0, #8
   2011e:	f364 108f 	bfi	r0, r4, #6, #10
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   20122:	f01e fc20 	bl	3e966 <log_string_sync>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
   20126:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   20128:	4a0c      	ldr	r2, [pc, #48]	; (2015c <bus_fault.isra.2+0x10c>)
   2012a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2012c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   20130:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   20132:	7030      	strb	r0, [r6, #0]

	return reason;
}
   20134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   20136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20138:	049b      	lsls	r3, r3, #18
   2013a:	d5f4      	bpl.n	20126 <bus_fault.isra.2+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   2013c:	f04f 0000 	mov.w	r0, #0
   20140:	2301      	movs	r3, #1
   20142:	f363 0007 	bfi	r0, r3, #0, #8
   20146:	f364 108f 	bfi	r0, r4, #6, #10
   2014a:	490b      	ldr	r1, [pc, #44]	; (20178 <bus_fault.isra.2+0x128>)
   2014c:	e7e9      	b.n	20122 <bus_fault.isra.2+0xd2>
   2014e:	bf00      	nop
   20150:	000423ec 	.word	0x000423ec
   20154:	00042314 	.word	0x00042314
   20158:	000456e0 	.word	0x000456e0
   2015c:	e000ed00 	.word	0xe000ed00
   20160:	000456f6 	.word	0x000456f6
   20164:	00045707 	.word	0x00045707
   20168:	0004571a 	.word	0x0004571a
   2016c:	00045733 	.word	0x00045733
   20170:	00045748 	.word	0x00045748
   20174:	00045763 	.word	0x00045763
   20178:	0004577b 	.word	0x0004577b

0002017c <usage_fault.isra.3>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
   2017c:	b538      	push	{r3, r4, r5, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   2017e:	f04f 0000 	mov.w	r0, #0
   20182:	2301      	movs	r3, #1
   20184:	4c3c      	ldr	r4, [pc, #240]	; (20278 <usage_fault.isra.3+0xfc>)
   20186:	f363 0007 	bfi	r0, r3, #0, #8
   2018a:	4b3c      	ldr	r3, [pc, #240]	; (2027c <usage_fault.isra.3+0x100>)
   2018c:	493c      	ldr	r1, [pc, #240]	; (20280 <usage_fault.isra.3+0x104>)
   2018e:	1ae4      	subs	r4, r4, r3
   20190:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   20194:	f364 108f 	bfi	r0, r4, #6, #10
   20198:	f01e fbe5 	bl	3e966 <log_string_sync>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   2019c:	4b39      	ldr	r3, [pc, #228]	; (20284 <usage_fault.isra.3+0x108>)
   2019e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   201a0:	019b      	lsls	r3, r3, #6
   201a2:	d509      	bpl.n	201b8 <usage_fault.isra.3+0x3c>
		PR_FAULT_INFO("  Division by zero");
   201a4:	f04f 0000 	mov.w	r0, #0
   201a8:	2301      	movs	r3, #1
   201aa:	f363 0007 	bfi	r0, r3, #0, #8
   201ae:	f364 108f 	bfi	r0, r4, #6, #10
   201b2:	4935      	ldr	r1, [pc, #212]	; (20288 <usage_fault.isra.3+0x10c>)
   201b4:	f01e fbd7 	bl	3e966 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   201b8:	4b32      	ldr	r3, [pc, #200]	; (20284 <usage_fault.isra.3+0x108>)
   201ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   201bc:	01dd      	lsls	r5, r3, #7
   201be:	d509      	bpl.n	201d4 <usage_fault.isra.3+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
   201c0:	f04f 0000 	mov.w	r0, #0
   201c4:	2301      	movs	r3, #1
   201c6:	f363 0007 	bfi	r0, r3, #0, #8
   201ca:	f364 108f 	bfi	r0, r4, #6, #10
   201ce:	492f      	ldr	r1, [pc, #188]	; (2028c <usage_fault.isra.3+0x110>)
   201d0:	f01e fbc9 	bl	3e966 <log_string_sync>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   201d4:	4b2b      	ldr	r3, [pc, #172]	; (20284 <usage_fault.isra.3+0x108>)
   201d6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   201d8:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   201dc:	d00a      	beq.n	201f4 <usage_fault.isra.3+0x78>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   201de:	2301      	movs	r3, #1
   201e0:	f04f 0000 	mov.w	r0, #0
   201e4:	f363 0007 	bfi	r0, r3, #0, #8
   201e8:	f364 108f 	bfi	r0, r4, #6, #10
   201ec:	4928      	ldr	r1, [pc, #160]	; (20290 <usage_fault.isra.3+0x114>)
   201ee:	f01e fbba 	bl	3e966 <log_string_sync>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   201f2:	2502      	movs	r5, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   201f4:	4b23      	ldr	r3, [pc, #140]	; (20284 <usage_fault.isra.3+0x108>)
   201f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   201f8:	0318      	lsls	r0, r3, #12
   201fa:	d509      	bpl.n	20210 <usage_fault.isra.3+0x94>
		PR_FAULT_INFO("  No coprocessor instructions");
   201fc:	f04f 0000 	mov.w	r0, #0
   20200:	2301      	movs	r3, #1
   20202:	f363 0007 	bfi	r0, r3, #0, #8
   20206:	f364 108f 	bfi	r0, r4, #6, #10
   2020a:	4922      	ldr	r1, [pc, #136]	; (20294 <usage_fault.isra.3+0x118>)
   2020c:	f01e fbab 	bl	3e966 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   20210:	4b1c      	ldr	r3, [pc, #112]	; (20284 <usage_fault.isra.3+0x108>)
   20212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20214:	0359      	lsls	r1, r3, #13
   20216:	d509      	bpl.n	2022c <usage_fault.isra.3+0xb0>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   20218:	f04f 0000 	mov.w	r0, #0
   2021c:	2301      	movs	r3, #1
   2021e:	f363 0007 	bfi	r0, r3, #0, #8
   20222:	f364 108f 	bfi	r0, r4, #6, #10
   20226:	491c      	ldr	r1, [pc, #112]	; (20298 <usage_fault.isra.3+0x11c>)
   20228:	f01e fb9d 	bl	3e966 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   2022c:	4b15      	ldr	r3, [pc, #84]	; (20284 <usage_fault.isra.3+0x108>)
   2022e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20230:	039a      	lsls	r2, r3, #14
   20232:	d509      	bpl.n	20248 <usage_fault.isra.3+0xcc>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   20234:	f04f 0000 	mov.w	r0, #0
   20238:	2301      	movs	r3, #1
   2023a:	f363 0007 	bfi	r0, r3, #0, #8
   2023e:	f364 108f 	bfi	r0, r4, #6, #10
   20242:	4916      	ldr	r1, [pc, #88]	; (2029c <usage_fault.isra.3+0x120>)
   20244:	f01e fb8f 	bl	3e966 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   20248:	4b0e      	ldr	r3, [pc, #56]	; (20284 <usage_fault.isra.3+0x108>)
   2024a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2024c:	03db      	lsls	r3, r3, #15
   2024e:	d509      	bpl.n	20264 <usage_fault.isra.3+0xe8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   20250:	f04f 0000 	mov.w	r0, #0
   20254:	2301      	movs	r3, #1
   20256:	f363 0007 	bfi	r0, r3, #0, #8
   2025a:	f364 108f 	bfi	r0, r4, #6, #10
   2025e:	4910      	ldr	r1, [pc, #64]	; (202a0 <usage_fault.isra.3+0x124>)
   20260:	f01e fb81 	bl	3e966 <log_string_sync>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   20264:	4a07      	ldr	r2, [pc, #28]	; (20284 <usage_fault.isra.3+0x108>)

	return reason;
}
   20266:	4628      	mov	r0, r5
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   20268:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2026a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   2026e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   20272:	6293      	str	r3, [r2, #40]	; 0x28
}
   20274:	bd38      	pop	{r3, r4, r5, pc}
   20276:	bf00      	nop
   20278:	000423ec 	.word	0x000423ec
   2027c:	00042314 	.word	0x00042314
   20280:	000458a5 	.word	0x000458a5
   20284:	e000ed00 	.word	0xe000ed00
   20288:	000458bd 	.word	0x000458bd
   2028c:	000458d0 	.word	0x000458d0
   20290:	000458ea 	.word	0x000458ea
   20294:	00045914 	.word	0x00045914
   20298:	00045932 	.word	0x00045932
   2029c:	00045957 	.word	0x00045957
   202a0:	00045971 	.word	0x00045971

000202a4 <mem_manage_fault.isra.6>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   202a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
   202a6:	2301      	movs	r3, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   202a8:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   202aa:	f04f 0000 	mov.w	r0, #0
   202ae:	4c40      	ldr	r4, [pc, #256]	; (203b0 <mem_manage_fault.isra.6+0x10c>)
   202b0:	f363 0007 	bfi	r0, r3, #0, #8
   202b4:	4b3f      	ldr	r3, [pc, #252]	; (203b4 <mem_manage_fault.isra.6+0x110>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   202b6:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   202b8:	1ae4      	subs	r4, r4, r3
   202ba:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   202be:	493e      	ldr	r1, [pc, #248]	; (203b8 <mem_manage_fault.isra.6+0x114>)
   202c0:	f364 108f 	bfi	r0, r4, #6, #10
   202c4:	f01e fb4f 	bl	3e966 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   202c8:	4b3c      	ldr	r3, [pc, #240]	; (203bc <mem_manage_fault.isra.6+0x118>)
   202ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   202cc:	06d9      	lsls	r1, r3, #27
   202ce:	d509      	bpl.n	202e4 <mem_manage_fault.isra.6+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
   202d0:	f04f 0000 	mov.w	r0, #0
   202d4:	2301      	movs	r3, #1
   202d6:	f363 0007 	bfi	r0, r3, #0, #8
   202da:	f364 108f 	bfi	r0, r4, #6, #10
   202de:	4938      	ldr	r1, [pc, #224]	; (203c0 <mem_manage_fault.isra.6+0x11c>)
   202e0:	f01e fb41 	bl	3e966 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   202e4:	4b35      	ldr	r3, [pc, #212]	; (203bc <mem_manage_fault.isra.6+0x118>)
   202e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   202e8:	071a      	lsls	r2, r3, #28
   202ea:	d509      	bpl.n	20300 <mem_manage_fault.isra.6+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   202ec:	f04f 0000 	mov.w	r0, #0
   202f0:	2301      	movs	r3, #1
   202f2:	f363 0007 	bfi	r0, r3, #0, #8
   202f6:	f364 108f 	bfi	r0, r4, #6, #10
   202fa:	4932      	ldr	r1, [pc, #200]	; (203c4 <mem_manage_fault.isra.6+0x120>)
   202fc:	f01e fb33 	bl	3e966 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   20300:	4d2e      	ldr	r5, [pc, #184]	; (203bc <mem_manage_fault.isra.6+0x118>)
   20302:	6aab      	ldr	r3, [r5, #40]	; 0x28
   20304:	079b      	lsls	r3, r3, #30
   20306:	d51c      	bpl.n	20342 <mem_manage_fault.isra.6+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
   20308:	2301      	movs	r3, #1
   2030a:	f04f 0000 	mov.w	r0, #0
   2030e:	f363 0007 	bfi	r0, r3, #0, #8
   20312:	f364 108f 	bfi	r0, r4, #6, #10
   20316:	492c      	ldr	r1, [pc, #176]	; (203c8 <mem_manage_fault.isra.6+0x124>)
   20318:	f01e fb25 	bl	3e966 <log_string_sync>
		mmfar = SCB->MMFAR;
   2031c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   2031e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   20320:	0618      	lsls	r0, r3, #24
   20322:	d50e      	bpl.n	20342 <mem_manage_fault.isra.6+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   20324:	f04f 0000 	mov.w	r0, #0
   20328:	2301      	movs	r3, #1
   2032a:	f363 0007 	bfi	r0, r3, #0, #8
   2032e:	f364 108f 	bfi	r0, r4, #6, #10
   20332:	4926      	ldr	r1, [pc, #152]	; (203cc <mem_manage_fault.isra.6+0x128>)
   20334:	f01e fb17 	bl	3e966 <log_string_sync>
			if (from_hard_fault) {
   20338:	b11f      	cbz	r7, 20342 <mem_manage_fault.isra.6+0x9e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   2033a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2033c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   20340:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   20342:	4b1e      	ldr	r3, [pc, #120]	; (203bc <mem_manage_fault.isra.6+0x118>)
   20344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20346:	07d9      	lsls	r1, r3, #31
   20348:	d509      	bpl.n	2035e <mem_manage_fault.isra.6+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
   2034a:	f04f 0000 	mov.w	r0, #0
   2034e:	2301      	movs	r3, #1
   20350:	f363 0007 	bfi	r0, r3, #0, #8
   20354:	f364 108f 	bfi	r0, r4, #6, #10
   20358:	491d      	ldr	r1, [pc, #116]	; (203d0 <mem_manage_fault.isra.6+0x12c>)
   2035a:	f01e fb04 	bl	3e966 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   2035e:	4b17      	ldr	r3, [pc, #92]	; (203bc <mem_manage_fault.isra.6+0x118>)
   20360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20362:	069a      	lsls	r2, r3, #26
   20364:	d509      	bpl.n	2037a <mem_manage_fault.isra.6+0xd6>
		PR_FAULT_INFO(
   20366:	f04f 0000 	mov.w	r0, #0
   2036a:	2301      	movs	r3, #1
   2036c:	f363 0007 	bfi	r0, r3, #0, #8
   20370:	f364 108f 	bfi	r0, r4, #6, #10
   20374:	4917      	ldr	r1, [pc, #92]	; (203d4 <mem_manage_fault.isra.6+0x130>)
   20376:	f01e faf6 	bl	3e966 <log_string_sync>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   2037a:	4b10      	ldr	r3, [pc, #64]	; (203bc <mem_manage_fault.isra.6+0x118>)
   2037c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2037e:	06db      	lsls	r3, r3, #27
   20380:	d50e      	bpl.n	203a0 <mem_manage_fault.isra.6+0xfc>
	__ASSERT(0,
   20382:	4915      	ldr	r1, [pc, #84]	; (203d8 <mem_manage_fault.isra.6+0x134>)
   20384:	f240 133d 	movw	r3, #317	; 0x13d
   20388:	4a14      	ldr	r2, [pc, #80]	; (203dc <mem_manage_fault.isra.6+0x138>)
   2038a:	4815      	ldr	r0, [pc, #84]	; (203e0 <mem_manage_fault.isra.6+0x13c>)
   2038c:	f01e face 	bl	3e92c <printk>
   20390:	4814      	ldr	r0, [pc, #80]	; (203e4 <mem_manage_fault.isra.6+0x140>)
   20392:	f01e facb 	bl	3e92c <printk>
   20396:	f240 113d 	movw	r1, #317	; 0x13d
   2039a:	4810      	ldr	r0, [pc, #64]	; (203dc <mem_manage_fault.isra.6+0x138>)
   2039c:	f01e fad3 	bl	3e946 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
   203a0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   203a2:	4a06      	ldr	r2, [pc, #24]	; (203bc <mem_manage_fault.isra.6+0x118>)
   203a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   203a6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   203aa:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   203ac:	7030      	strb	r0, [r6, #0]
}
   203ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   203b0:	000423ec 	.word	0x000423ec
   203b4:	00042314 	.word	0x00042314
   203b8:	000457aa 	.word	0x000457aa
   203bc:	e000ed00 	.word	0xe000ed00
   203c0:	000457c0 	.word	0x000457c0
   203c4:	00045707 	.word	0x00045707
   203c8:	000457f3 	.word	0x000457f3
   203cc:	0004580b 	.word	0x0004580b
   203d0:	00045821 	.word	0x00045821
   203d4:	0004577b 	.word	0x0004577b
   203d8:	00049224 	.word	0x00049224
   203dc:	00045840 	.word	0x00045840
   203e0:	00044643 	.word	0x00044643
   203e4:	0004586b 	.word	0x0004586b

000203e8 <z_arm_fault>:
 * running a Secure Firmware.
 */
void z_arm_fault(z_arch_esf_t *esf, u32_t exc_return)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   203e8:	4b58      	ldr	r3, [pc, #352]	; (2054c <z_arm_fault+0x164>)
{
   203ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   203ec:	685d      	ldr	r5, [r3, #4]
				goto _exit_fatal;
			}
		}
	}
#elif defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   203ee:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
   203f2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
{
   203f6:	4606      	mov	r6, r0
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   203f8:	f040 80a1 	bne.w	2053e <z_arm_fault+0x156>
			EXC_RETURN_INDICATOR_PREFIX) {
		/* Invalid EXC_RETURN value */
		goto _exit_fatal;
	}
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   203fc:	f011 0401 	ands.w	r4, r1, #1
   20400:	f040 809d 	bne.w	2053e <z_arm_fault+0x156>
		 * This is a fatal error.
		 */
		goto _exit_fatal;
	}

	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   20404:	0649      	lsls	r1, r1, #25
   20406:	d50d      	bpl.n	20424 <z_arm_fault+0x3c>
		 * Note that Non-Secure firmware cannot inspect the Secure
		 * stack to determine the root cause of the fault. Fault
		 * inspection will indicate the Non-Secure instruction
		 * that performed the branch to the Secure domain.
		 */
		PR_FAULT_INFO("Exception occurred in Secure State");
   20408:	2301      	movs	r3, #1
   2040a:	f04f 0000 	mov.w	r0, #0
   2040e:	4a50      	ldr	r2, [pc, #320]	; (20550 <z_arm_fault+0x168>)
   20410:	f363 0007 	bfi	r0, r3, #0, #8
   20414:	4b4f      	ldr	r3, [pc, #316]	; (20554 <z_arm_fault+0x16c>)
   20416:	4950      	ldr	r1, [pc, #320]	; (20558 <z_arm_fault+0x170>)
   20418:	1a9b      	subs	r3, r3, r2
   2041a:	08db      	lsrs	r3, r3, #3
   2041c:	f363 108f 	bfi	r0, r3, #6, #10
   20420:	f01e faa1 	bl	3e966 <log_string_sync>
	*recoverable = false;
   20424:	2200      	movs	r2, #0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   20426:	f3c5 0308 	ubfx	r3, r5, #0, #9
	*recoverable = false;
   2042a:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   2042e:	1eda      	subs	r2, r3, #3
   20430:	2a09      	cmp	r2, #9
   20432:	d86b      	bhi.n	2050c <z_arm_fault+0x124>
   20434:	e8df f002 	tbb	[pc, r2]
   20438:	52595505 	.word	0x52595505
   2043c:	6a6a6a6a 	.word	0x6a6a6a6a
   20440:	5d6a      	.short	0x5d6a
	PR_FAULT_INFO("***** HARD FAULT *****");
   20442:	2301      	movs	r3, #1
   20444:	f04f 0000 	mov.w	r0, #0
   20448:	4d42      	ldr	r5, [pc, #264]	; (20554 <z_arm_fault+0x16c>)
   2044a:	f363 0007 	bfi	r0, r3, #0, #8
   2044e:	4b40      	ldr	r3, [pc, #256]	; (20550 <z_arm_fault+0x168>)
   20450:	4942      	ldr	r1, [pc, #264]	; (2055c <z_arm_fault+0x174>)
   20452:	1aed      	subs	r5, r5, r3
   20454:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   20458:	f365 108f 	bfi	r0, r5, #6, #10
   2045c:	f01e fa83 	bl	3e966 <log_string_sync>
	*recoverable = false;
   20460:	2300      	movs	r3, #0
   20462:	f88d 3007 	strb.w	r3, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   20466:	4b39      	ldr	r3, [pc, #228]	; (2054c <z_arm_fault+0x164>)
   20468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2046a:	0792      	lsls	r2, r2, #30
   2046c:	d50a      	bpl.n	20484 <z_arm_fault+0x9c>
		PR_EXC("  Bus fault on vector table read");
   2046e:	f04f 0000 	mov.w	r0, #0
   20472:	2301      	movs	r3, #1
   20474:	493a      	ldr	r1, [pc, #232]	; (20560 <z_arm_fault+0x178>)
   20476:	f363 0007 	bfi	r0, r3, #0, #8
   2047a:	f365 108f 	bfi	r0, r5, #6, #10
	PR_FAULT_INFO(
   2047e:	f01e fa72 	bl	3e966 <log_string_sync>
   20482:	e003      	b.n	2048c <z_arm_fault+0xa4>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   20484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20486:	005b      	lsls	r3, r3, #1
   20488:	d406      	bmi.n	20498 <z_arm_fault+0xb0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   2048a:	2400      	movs	r4, #0
#else
	(void) exc_return;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   2048c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20490:	2b00      	cmp	r3, #0
   20492:	d055      	beq.n	20540 <z_arm_fault+0x158>
#if defined(CONFIG_ARM_SECURE_FIRMWARE) || \
	defined(CONFIG_ARM_NONSECURE_FIRMWARE)
_exit_fatal:
#endif
	z_arm_fatal_error(reason, esf);
}
   20494:	b002      	add	sp, #8
   20496:	bd70      	pop	{r4, r5, r6, pc}
		PR_EXC("  Fault escalation (see below)");
   20498:	2301      	movs	r3, #1
   2049a:	f04f 0000 	mov.w	r0, #0
   2049e:	f363 0007 	bfi	r0, r3, #0, #8
   204a2:	f365 108f 	bfi	r0, r5, #6, #10
   204a6:	492f      	ldr	r1, [pc, #188]	; (20564 <z_arm_fault+0x17c>)
   204a8:	f01e fa5d 	bl	3e966 <log_string_sync>
		if (SCB_MMFSR != 0) {
   204ac:	4b2e      	ldr	r3, [pc, #184]	; (20568 <z_arm_fault+0x180>)
   204ae:	781b      	ldrb	r3, [r3, #0]
   204b0:	b133      	cbz	r3, 204c0 <z_arm_fault+0xd8>
			reason = mem_manage_fault(esf, 1, recoverable);
   204b2:	2001      	movs	r0, #1
   204b4:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   204b8:	f7ff fef4 	bl	202a4 <mem_manage_fault.isra.6>
   204bc:	4604      	mov	r4, r0
		break;
   204be:	e7e5      	b.n	2048c <z_arm_fault+0xa4>
		} else if (SCB_BFSR != 0) {
   204c0:	4b2a      	ldr	r3, [pc, #168]	; (2056c <z_arm_fault+0x184>)
   204c2:	781b      	ldrb	r3, [r3, #0]
   204c4:	b12b      	cbz	r3, 204d2 <z_arm_fault+0xea>
			reason = bus_fault(esf, 1, recoverable);
   204c6:	2001      	movs	r0, #1
   204c8:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   204cc:	f7ff fdc0 	bl	20050 <bus_fault.isra.2>
   204d0:	e7f4      	b.n	204bc <z_arm_fault+0xd4>
		} else if (SCB_UFSR != 0) {
   204d2:	4b27      	ldr	r3, [pc, #156]	; (20570 <z_arm_fault+0x188>)
   204d4:	881b      	ldrh	r3, [r3, #0]
   204d6:	b29b      	uxth	r3, r3
   204d8:	2b00      	cmp	r3, #0
   204da:	d0d6      	beq.n	2048a <z_arm_fault+0xa2>
		reason = usage_fault(esf);
   204dc:	f7ff fe4e 	bl	2017c <usage_fault.isra.3>
   204e0:	e7ec      	b.n	204bc <z_arm_fault+0xd4>
		reason = mem_manage_fault(esf, 0, recoverable);
   204e2:	f10d 0107 	add.w	r1, sp, #7
   204e6:	2000      	movs	r0, #0
   204e8:	e7e6      	b.n	204b8 <z_arm_fault+0xd0>
		reason = bus_fault(esf, 0, recoverable);
   204ea:	f10d 0107 	add.w	r1, sp, #7
   204ee:	2000      	movs	r0, #0
   204f0:	e7ec      	b.n	204cc <z_arm_fault+0xe4>
	PR_FAULT_INFO(
   204f2:	2301      	movs	r3, #1
   204f4:	f04f 0000 	mov.w	r0, #0
   204f8:	4a15      	ldr	r2, [pc, #84]	; (20550 <z_arm_fault+0x168>)
   204fa:	f363 0007 	bfi	r0, r3, #0, #8
   204fe:	4b15      	ldr	r3, [pc, #84]	; (20554 <z_arm_fault+0x16c>)
   20500:	491c      	ldr	r1, [pc, #112]	; (20574 <z_arm_fault+0x18c>)
   20502:	1a9b      	subs	r3, r3, r2
   20504:	08db      	lsrs	r3, r3, #3
   20506:	f363 108f 	bfi	r0, r3, #6, #10
   2050a:	e7b8      	b.n	2047e <z_arm_fault+0x96>
	PR_FAULT_INFO("***** %s %d) *****",
   2050c:	2201      	movs	r2, #1
   2050e:	f04f 0000 	mov.w	r0, #0
   20512:	490f      	ldr	r1, [pc, #60]	; (20550 <z_arm_fault+0x168>)
   20514:	f362 0007 	bfi	r0, r2, #0, #8
   20518:	4a0e      	ldr	r2, [pc, #56]	; (20554 <z_arm_fault+0x16c>)
   2051a:	f415 7ff8 	tst.w	r5, #496	; 0x1f0
   2051e:	eba2 0201 	sub.w	r2, r2, r1
   20522:	4915      	ldr	r1, [pc, #84]	; (20578 <z_arm_fault+0x190>)
   20524:	ea4f 02d2 	mov.w	r2, r2, lsr #3
   20528:	f362 108f 	bfi	r0, r2, #6, #10
   2052c:	f1a3 0310 	sub.w	r3, r3, #16
   20530:	4a12      	ldr	r2, [pc, #72]	; (2057c <z_arm_fault+0x194>)
   20532:	bf08      	it	eq
   20534:	460a      	moveq	r2, r1
   20536:	4912      	ldr	r1, [pc, #72]	; (20580 <z_arm_fault+0x198>)
   20538:	f01e fa15 	bl	3e966 <log_string_sync>
   2053c:	e7a6      	b.n	2048c <z_arm_fault+0xa4>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   2053e:	2400      	movs	r4, #0
	z_arm_fatal_error(reason, esf);
   20540:	4631      	mov	r1, r6
   20542:	4620      	mov	r0, r4
   20544:	f7ff fc8c 	bl	1fe60 <z_arm_fatal_error>
   20548:	e7a4      	b.n	20494 <z_arm_fault+0xac>
   2054a:	bf00      	nop
   2054c:	e000ed00 	.word	0xe000ed00
   20550:	00042314 	.word	0x00042314
   20554:	000423ec 	.word	0x000423ec
   20558:	000459ca 	.word	0x000459ca
   2055c:	000459ed 	.word	0x000459ed
   20560:	00045a04 	.word	0x00045a04
   20564:	00045a25 	.word	0x00045a25
   20568:	e000ed28 	.word	0xe000ed28
   2056c:	e000ed29 	.word	0xe000ed29
   20570:	e000ed2a 	.word	0xe000ed2a
   20574:	00045a44 	.word	0x00045a44
   20578:	0004599c 	.word	0x0004599c
   2057c:	000459b1 	.word	0x000459b1
   20580:	00045a7a 	.word	0x00045a7a

00020584 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   20584:	4b04      	ldr	r3, [pc, #16]	; (20598 <z_arm_fault_init+0x14>)
   20586:	695a      	ldr	r2, [r3, #20]
   20588:	f042 0210 	orr.w	r2, r2, #16
   2058c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   2058e:	695a      	ldr	r2, [r3, #20]
   20590:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   20594:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   20596:	4770      	bx	lr
   20598:	e000ed00 	.word	0xe000ed00

0002059c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   2059c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   205a0:	4905      	ldr	r1, [pc, #20]	; (205b8 <sys_arch_reboot+0x1c>)
   205a2:	4b06      	ldr	r3, [pc, #24]	; (205bc <sys_arch_reboot+0x20>)
   205a4:	68ca      	ldr	r2, [r1, #12]
   205a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   205aa:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   205ac:	60cb      	str	r3, [r1, #12]
   205ae:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   205b2:	bf00      	nop
   205b4:	e7fd      	b.n	205b2 <sys_arch_reboot+0x16>
   205b6:	bf00      	nop
   205b8:	e000ed00 	.word	0xe000ed00
   205bc:	05fa0004 	.word	0x05fa0004

000205c0 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
   205c0:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   205c2:	2120      	movs	r1, #32
   205c4:	4803      	ldr	r0, [pc, #12]	; (205d4 <z_arm_int_lib_init+0x14>)
   205c6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   205c8:	3301      	adds	r3, #1
   205ca:	2b41      	cmp	r3, #65	; 0x41
   205cc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   205d0:	d1f9      	bne.n	205c6 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   205d2:	4770      	bx	lr
   205d4:	e000e100 	.word	0xe000e100

000205d8 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   205d8:	b538      	push	{r3, r4, r5, lr}
   205da:	4604      	mov	r4, r0
	__asm__ volatile(
   205dc:	f04f 0320 	mov.w	r3, #32
   205e0:	f3ef 8511 	mrs	r5, BASEPRI
   205e4:	f383 8811 	msr	BASEPRI, r3
   205e8:	f3bf 8f6f 	isb	sy
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   205ec:	7b03      	ldrb	r3, [r0, #12]
   205ee:	07db      	lsls	r3, r3, #31
   205f0:	d50c      	bpl.n	2060c <z_impl_k_thread_abort+0x34>
   205f2:	4912      	ldr	r1, [pc, #72]	; (2063c <z_impl_k_thread_abort+0x64>)
   205f4:	2325      	movs	r3, #37	; 0x25
   205f6:	4a12      	ldr	r2, [pc, #72]	; (20640 <z_impl_k_thread_abort+0x68>)
   205f8:	4812      	ldr	r0, [pc, #72]	; (20644 <z_impl_k_thread_abort+0x6c>)
   205fa:	f01e f997 	bl	3e92c <printk>
   205fe:	4812      	ldr	r0, [pc, #72]	; (20648 <z_impl_k_thread_abort+0x70>)
   20600:	f01e f994 	bl	3e92c <printk>
   20604:	2125      	movs	r1, #37	; 0x25
   20606:	480e      	ldr	r0, [pc, #56]	; (20640 <z_impl_k_thread_abort+0x68>)
   20608:	f01e f99d 	bl	3e946 <assert_post_action>
		 "essential thread aborted");

	z_thread_single_abort(thread);
   2060c:	4620      	mov	r0, r4
   2060e:	f020 fad5 	bl	40bbc <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   20612:	4b0e      	ldr	r3, [pc, #56]	; (2064c <z_impl_k_thread_abort+0x74>)
   20614:	689b      	ldr	r3, [r3, #8]
   20616:	42a3      	cmp	r3, r4
   20618:	d10b      	bne.n	20632 <z_impl_k_thread_abort+0x5a>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   2061a:	4b0d      	ldr	r3, [pc, #52]	; (20650 <z_impl_k_thread_abort+0x78>)
   2061c:	685a      	ldr	r2, [r3, #4]
   2061e:	f3c2 0208 	ubfx	r2, r2, #0, #9
   20622:	b912      	cbnz	r2, 2062a <z_impl_k_thread_abort+0x52>
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = z_arch_swap(key);
   20624:	4628      	mov	r0, r5
   20626:	f7ff fa9f 	bl	1fb68 <z_arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2062a:	685a      	ldr	r2, [r3, #4]
   2062c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   20630:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   20632:	4628      	mov	r0, r5
}
   20634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   20638:	f020 ba47 	b.w	40aca <z_reschedule_irqlock>
   2063c:	00045abf 	.word	0x00045abf
   20640:	00045a8d 	.word	0x00045a8d
   20644:	00044643 	.word	0x00044643
   20648:	00045aed 	.word	0x00045aed
   2064c:	2002a214 	.word	0x2002a214
   20650:	e000ed00 	.word	0xe000ed00

00020654 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   20654:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   20656:	4b0e      	ldr	r3, [pc, #56]	; (20690 <z_arm_configure_static_mpu_regions+0x3c>)
{
   20658:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   2065a:	9302      	str	r3, [sp, #8]
   2065c:	4b0d      	ldr	r3, [pc, #52]	; (20694 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   2065e:	4c0e      	ldr	r4, [pc, #56]	; (20698 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   20660:	9303      	str	r3, [sp, #12]
   20662:	4b0e      	ldr	r3, [pc, #56]	; (2069c <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   20664:	4a0e      	ldr	r2, [pc, #56]	; (206a0 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   20666:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   20668:	ab02      	add	r3, sp, #8
   2066a:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   2066c:	a801      	add	r0, sp, #4
   2066e:	4623      	mov	r3, r4
   20670:	2101      	movs	r1, #1
   20672:	f000 f97d 	bl	20970 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   20676:	2300      	movs	r3, #0
   20678:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   2067a:	4b0a      	ldr	r3, [pc, #40]	; (206a4 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   2067c:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   2067e:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   20680:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   20682:	9305      	str	r3, [sp, #20]
   20684:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   20686:	f000 f997 	bl	209b8 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   2068a:	b008      	add	sp, #32
   2068c:	bd10      	pop	{r4, pc}
   2068e:	bf00      	nop
   20690:	20020000 	.word	0x20020000
   20694:	00000000 	.word	0x00000000
   20698:	20040000 	.word	0x20040000
   2069c:	00010006 	.word	0x00010006
   206a0:	20020000 	.word	0x20020000
   206a4:	20020000 	.word	0x20020000

000206a8 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   206a8:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   206aa:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   206ac:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   206ae:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   206b2:	f004 031f 	and.w	r3, r4, #31
   206b6:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   206b8:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   206ba:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   206bc:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   206c0:	4904      	ldr	r1, [pc, #16]	; (206d4 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   206c2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   206c6:	f043 0301 	orr.w	r3, r3, #1
   206ca:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   206cc:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   206ce:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   206d0:	bd10      	pop	{r4, pc}
   206d2:	bf00      	nop
   206d4:	e000ed90 	.word	0xe000ed90

000206d8 <region_allocate_and_init>:

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
   206d8:	280f      	cmp	r0, #15
{
   206da:	b510      	push	{r4, lr}
   206dc:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1)) {
   206de:	d912      	bls.n	20706 <region_allocate_and_init+0x2e>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   206e0:	2301      	movs	r3, #1
   206e2:	f04f 0000 	mov.w	r0, #0
   206e6:	4a09      	ldr	r2, [pc, #36]	; (2070c <region_allocate_and_init+0x34>)
   206e8:	f363 0007 	bfi	r0, r3, #0, #8
   206ec:	4b08      	ldr	r3, [pc, #32]	; (20710 <region_allocate_and_init+0x38>)
   206ee:	4909      	ldr	r1, [pc, #36]	; (20714 <region_allocate_and_init+0x3c>)
   206f0:	1a9b      	subs	r3, r3, r2
   206f2:	08db      	lsrs	r3, r3, #3
   206f4:	4622      	mov	r2, r4
   206f6:	f363 108f 	bfi	r0, r3, #6, #10
   206fa:	f01e f934 	bl	3e966 <log_string_sync>
		return -EINVAL;
   206fe:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   20702:	4620      	mov	r0, r4
   20704:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   20706:	f7ff ffcf 	bl	206a8 <region_init>
	return index;
   2070a:	e7fa      	b.n	20702 <region_allocate_and_init+0x2a>
   2070c:	00042314 	.word	0x00042314
   20710:	000423b4 	.word	0x000423b4
   20714:	00045cb1 	.word	0x00045cb1

00020718 <mpu_configure_regions.constprop.2>:

/* This internal function programs a set of given MPU regions
 * over a background memory area, optionally performing a
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
   20718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2071c:	4607      	mov	r7, r0
   2071e:	4688      	mov	r8, r1
   20720:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   20722:	2600      	movs	r6, #0
	MPU->RNR = index;
   20724:	4d58      	ldr	r5, [pc, #352]	; (20888 <mpu_configure_regions.constprop.2+0x170>)
static int mpu_configure_regions(const struct k_mem_partition
   20726:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   20728:	4546      	cmp	r6, r8
   2072a:	da3d      	bge.n	207a8 <mpu_configure_regions.constprop.2+0x90>
		if (regions[i]->size == 0U) {
   2072c:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   20730:	f8d3 9004 	ldr.w	r9, [r3, #4]
   20734:	f1b9 0f00 	cmp.w	r9, #0
   20738:	d059      	beq.n	207ee <mpu_configure_regions.constprop.2+0xd6>
		&&
   2073a:	f1b9 0f1f 	cmp.w	r9, #31
   2073e:	d922      	bls.n	20786 <mpu_configure_regions.constprop.2+0x6e>
		&&
   20740:	f019 0f1f 	tst.w	r9, #31
   20744:	d11f      	bne.n	20786 <mpu_configure_regions.constprop.2+0x6e>
		((part->start &
   20746:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   2074a:	f01a 0f1f 	tst.w	sl, #31
   2074e:	d11a      	bne.n	20786 <mpu_configure_regions.constprop.2+0x6e>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   20750:	4650      	mov	r0, sl
   20752:	f01d fd03 	bl	3e15c <arm_cmse_mpu_region_get>
   20756:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   20758:	eb09 000a 	add.w	r0, r9, sl
   2075c:	3801      	subs	r0, #1
   2075e:	f01d fcfd 	bl	3e15c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   20762:	4583      	cmp	fp, r0
   20764:	d024      	beq.n	207b0 <mpu_configure_regions.constprop.2+0x98>
	return -EINVAL;
   20766:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   2076a:	2301      	movs	r3, #1
   2076c:	f04f 0000 	mov.w	r0, #0
   20770:	4a46      	ldr	r2, [pc, #280]	; (2088c <mpu_configure_regions.constprop.2+0x174>)
   20772:	f363 0007 	bfi	r0, r3, #0, #8
   20776:	4b46      	ldr	r3, [pc, #280]	; (20890 <mpu_configure_regions.constprop.2+0x178>)
   20778:	4946      	ldr	r1, [pc, #280]	; (20894 <mpu_configure_regions.constprop.2+0x17c>)
   2077a:	1a9b      	subs	r3, r3, r2
   2077c:	08db      	lsrs	r3, r3, #3
   2077e:	f363 108f 	bfi	r0, r3, #6, #10
   20782:	465a      	mov	r2, fp
   20784:	e00c      	b.n	207a0 <mpu_configure_regions.constprop.2+0x88>
			LOG_ERR("Partition %u: sanity check failed.", i);
   20786:	2301      	movs	r3, #1
   20788:	f04f 0000 	mov.w	r0, #0
   2078c:	4a3f      	ldr	r2, [pc, #252]	; (2088c <mpu_configure_regions.constprop.2+0x174>)
   2078e:	f363 0007 	bfi	r0, r3, #0, #8
   20792:	4b3f      	ldr	r3, [pc, #252]	; (20890 <mpu_configure_regions.constprop.2+0x178>)
   20794:	4940      	ldr	r1, [pc, #256]	; (20898 <mpu_configure_regions.constprop.2+0x180>)
   20796:	1a9b      	subs	r3, r3, r2
   20798:	4632      	mov	r2, r6
   2079a:	08db      	lsrs	r3, r3, #3
   2079c:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
   207a0:	f01e f8e1 	bl	3e966 <log_string_sync>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   207a4:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   207a8:	4620      	mov	r0, r4
   207aa:	b005      	add	sp, #20
   207ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   207b0:	f11b 0f16 	cmn.w	fp, #22
   207b4:	d0d9      	beq.n	2076a <mpu_configure_regions.constprop.2+0x52>
			(u_reg_index > (reg_index - 1))) {
   207b6:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   207b8:	455b      	cmp	r3, fp
   207ba:	dbd6      	blt.n	2076a <mpu_configure_regions.constprop.2+0x52>
	MPU->RNR = index;
   207bc:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   207c0:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   207c2:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   207c6:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   207c8:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   207cc:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   207d0:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   207d4:	e9d1 3200 	ldrd	r3, r2, [r1]
   207d8:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   207da:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   207dc:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
   207e0:	d118      	bne.n	20814 <mpu_configure_regions.constprop.2+0xfc>
   207e2:	45ca      	cmp	sl, r9
   207e4:	d105      	bne.n	207f2 <mpu_configure_regions.constprop.2+0xda>
			mpu_configure_region(u_reg_index, regions[i]);
   207e6:	fa5f f08b 	uxtb.w	r0, fp
   207ea:	f01e fa5a 	bl	3eca2 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   207ee:	3601      	adds	r6, #1
   207f0:	e79a      	b.n	20728 <mpu_configure_regions.constprop.2+0x10>
	MPU->RNR = index;
   207f2:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   207f6:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   207f8:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   207fc:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   20800:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   20802:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   20804:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   20806:	f01e fa4c 	bl	3eca2 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   2080a:	f110 0f16 	cmn.w	r0, #22
   2080e:	d0c9      	beq.n	207a4 <mpu_configure_regions.constprop.2+0x8c>
			reg_index++;
   20810:	1c44      	adds	r4, r0, #1
   20812:	e7ec      	b.n	207ee <mpu_configure_regions.constprop.2+0xd6>
	MPU->RNR = index;
   20814:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   20818:	692a      	ldr	r2, [r5, #16]
   2081a:	3b01      	subs	r3, #1
   2081c:	f023 031f 	bic.w	r3, r3, #31
   20820:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   20824:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   20826:	45ca      	cmp	sl, r9
   20828:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   2082a:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   2082c:	d0eb      	beq.n	20806 <mpu_configure_regions.constprop.2+0xee>
				mpu_configure_region(reg_index, regions[i]);
   2082e:	f01e fa38 	bl	3eca2 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   20832:	f110 0f16 	cmn.w	r0, #22
   20836:	d0b5      	beq.n	207a4 <mpu_configure_regions.constprop.2+0x8c>
	MPU->RNR = index;
   20838:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   2083c:	68ea      	ldr	r2, [r5, #12]
   2083e:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   20842:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
   20846:	f362 0304 	bfi	r3, r2, #0, #5
   2084a:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   2084e:	692b      	ldr	r3, [r5, #16]
   20850:	f89d 2008 	ldrb.w	r2, [sp, #8]
   20854:	085b      	lsrs	r3, r3, #1
   20856:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   2085a:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   2085e:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   20862:	e9d3 2300 	ldrd	r2, r3, [r3]
   20866:	4413      	add	r3, r2
   20868:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   2086a:	f023 031f 	bic.w	r3, r3, #31
   2086e:	4453      	add	r3, sl
   20870:	eba3 0309 	sub.w	r3, r3, r9
			reg_index++;
   20874:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   20876:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   2087a:	4669      	mov	r1, sp
   2087c:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   2087e:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
   20880:	f7ff ff2a 	bl	206d8 <region_allocate_and_init>
   20884:	e7c1      	b.n	2080a <mpu_configure_regions.constprop.2+0xf2>
   20886:	bf00      	nop
   20888:	e000ed90 	.word	0xe000ed90
   2088c:	00042314 	.word	0x00042314
   20890:	000423b4 	.word	0x000423b4
   20894:	00045c8e 	.word	0x00045c8e
   20898:	00045c6b 	.word	0x00045c6b

0002089c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   2089c:	2205      	movs	r2, #5
   2089e:	4b03      	ldr	r3, [pc, #12]	; (208ac <arm_core_mpu_enable+0x10>)
   208a0:	605a      	str	r2, [r3, #4]
   208a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   208a6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   208aa:	4770      	bx	lr
   208ac:	e000ed90 	.word	0xe000ed90

000208b0 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   208b0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   208b4:	2200      	movs	r2, #0
   208b6:	4b01      	ldr	r3, [pc, #4]	; (208bc <arm_core_mpu_disable+0xc>)
   208b8:	605a      	str	r2, [r3, #4]
}
   208ba:	4770      	bx	lr
   208bc:	e000ed90 	.word	0xe000ed90

000208c0 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   208c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   208c2:	4f21      	ldr	r7, [pc, #132]	; (20948 <arm_mpu_init+0x88>)
   208c4:	683e      	ldr	r6, [r7, #0]
   208c6:	2e10      	cmp	r6, #16
   208c8:	d913      	bls.n	208f2 <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   208ca:	f240 1307 	movw	r3, #263	; 0x107
   208ce:	4a1f      	ldr	r2, [pc, #124]	; (2094c <arm_mpu_init+0x8c>)
   208d0:	491f      	ldr	r1, [pc, #124]	; (20950 <arm_mpu_init+0x90>)
   208d2:	4820      	ldr	r0, [pc, #128]	; (20954 <arm_mpu_init+0x94>)
   208d4:	f01e f82a 	bl	3e92c <printk>
   208d8:	2210      	movs	r2, #16
   208da:	4631      	mov	r1, r6
   208dc:	481e      	ldr	r0, [pc, #120]	; (20958 <arm_mpu_init+0x98>)
   208de:	f01e f825 	bl	3e92c <printk>
   208e2:	481a      	ldr	r0, [pc, #104]	; (2094c <arm_mpu_init+0x8c>)
   208e4:	f240 1107 	movw	r1, #263	; 0x107
   208e8:	f01e f82d 	bl	3e946 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   208ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
   208f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   208f2:	2400      	movs	r4, #0
	arm_core_mpu_disable();
   208f4:	f7ff ffdc 	bl	208b0 <arm_core_mpu_disable>
	MPU->MAIR0 =
   208f8:	4d18      	ldr	r5, [pc, #96]	; (2095c <arm_mpu_init+0x9c>)
   208fa:	4a19      	ldr	r2, [pc, #100]	; (20960 <arm_mpu_init+0xa0>)
   208fc:	632a      	str	r2, [r5, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   208fe:	42a6      	cmp	r6, r4
   20900:	d119      	bne.n	20936 <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
   20902:	4b18      	ldr	r3, [pc, #96]	; (20964 <arm_mpu_init+0xa4>)
   20904:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
   20906:	f7ff ffc9 	bl	2089c <arm_core_mpu_enable>
	__ASSERT(
   2090a:	682b      	ldr	r3, [r5, #0]
   2090c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   20910:	2b10      	cmp	r3, #16
   20912:	d00e      	beq.n	20932 <arm_mpu_init+0x72>
   20914:	4914      	ldr	r1, [pc, #80]	; (20968 <arm_mpu_init+0xa8>)
   20916:	f44f 7394 	mov.w	r3, #296	; 0x128
   2091a:	4a0c      	ldr	r2, [pc, #48]	; (2094c <arm_mpu_init+0x8c>)
   2091c:	480d      	ldr	r0, [pc, #52]	; (20954 <arm_mpu_init+0x94>)
   2091e:	f01e f805 	bl	3e92c <printk>
   20922:	4812      	ldr	r0, [pc, #72]	; (2096c <arm_mpu_init+0xac>)
   20924:	f01e f802 	bl	3e92c <printk>
   20928:	f44f 7194 	mov.w	r1, #296	; 0x128
   2092c:	4807      	ldr	r0, [pc, #28]	; (2094c <arm_mpu_init+0x8c>)
   2092e:	f01e f80a 	bl	3e946 <assert_post_action>
	return 0;
   20932:	2000      	movs	r0, #0
   20934:	e7dc      	b.n	208f0 <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   20936:	6879      	ldr	r1, [r7, #4]
   20938:	4620      	mov	r0, r4
   2093a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   2093e:	f7ff feb3 	bl	206a8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   20942:	3401      	adds	r4, #1
   20944:	e7db      	b.n	208fe <arm_mpu_init+0x3e>
   20946:	bf00      	nop
   20948:	000425f4 	.word	0x000425f4
   2094c:	00045b94 	.word	0x00045b94
   20950:	00049224 	.word	0x00049224
   20954:	00044643 	.word	0x00044643
   20958:	00045bc5 	.word	0x00045bc5
   2095c:	e000ed90 	.word	0xe000ed90
   20960:	0044ffaa 	.word	0x0044ffaa
   20964:	2002a34e 	.word	0x2002a34e
   20968:	00045bf9 	.word	0x00045bf9
   2096c:	00045c4a 	.word	0x00045c4a

00020970 <arm_core_mpu_configure_static_mpu_regions>:
{
   20970:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   20972:	4c0c      	ldr	r4, [pc, #48]	; (209a4 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   20974:	460d      	mov	r5, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   20976:	7822      	ldrb	r2, [r4, #0]
   20978:	f7ff fece 	bl	20718 <mpu_configure_regions.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   2097c:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   2097e:	3016      	adds	r0, #22
   20980:	d10f      	bne.n	209a2 <arm_core_mpu_configure_static_mpu_regions+0x32>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   20982:	23cd      	movs	r3, #205	; 0xcd
   20984:	4a08      	ldr	r2, [pc, #32]	; (209a8 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   20986:	4909      	ldr	r1, [pc, #36]	; (209ac <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   20988:	4809      	ldr	r0, [pc, #36]	; (209b0 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   2098a:	f01d ffcf 	bl	3e92c <printk>
   2098e:	4629      	mov	r1, r5
   20990:	4808      	ldr	r0, [pc, #32]	; (209b4 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   20992:	f01d ffcb 	bl	3e92c <printk>
}
   20996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   2099a:	21cd      	movs	r1, #205	; 0xcd
   2099c:	4802      	ldr	r0, [pc, #8]	; (209a8 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   2099e:	f01d bfd2 	b.w	3e946 <assert_post_action>
}
   209a2:	bd38      	pop	{r3, r4, r5, pc}
   209a4:	2002a34e 	.word	0x2002a34e
   209a8:	00045b94 	.word	0x00045b94
   209ac:	00049224 	.word	0x00049224
   209b0:	00044643 	.word	0x00044643
   209b4:	00045b39 	.word	0x00045b39

000209b8 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   209b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   209bc:	4c2d      	ldr	r4, [pc, #180]	; (20a74 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>)
   209be:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   209c0:	4680      	mov	r8, r0
   209c2:	2700      	movs	r7, #0
   209c4:	46a2      	mov	sl, r4
	attr->rbar = MPU->RBAR &
   209c6:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
   209ca:	4d2b      	ldr	r5, [pc, #172]	; (20a78 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   209cc:	454f      	cmp	r7, r9
   209ce:	db02      	blt.n	209d6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1e>
}
   209d0:	b003      	add	sp, #12
   209d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   209d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   209da:	9301      	str	r3, [sp, #4]
   209dc:	2b00      	cmp	r3, #0
   209de:	d044      	beq.n	20a6a <arm_core_mpu_mark_areas_for_dynamic_regions+0xb2>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   209e0:	f8d8 1000 	ldr.w	r1, [r8]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   209e4:	4608      	mov	r0, r1
   209e6:	9100      	str	r1, [sp, #0]
   209e8:	f01d fbb8 	bl	3e15c <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   209ec:	e9dd 1300 	ldrd	r1, r3, [sp]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   209f0:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   209f2:	1858      	adds	r0, r3, r1
   209f4:	3801      	subs	r0, #1
   209f6:	f01d fbb1 	bl	3e15c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   209fa:	4286      	cmp	r6, r0
   209fc:	4a1f      	ldr	r2, [pc, #124]	; (20a7c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
   209fe:	d016      	beq.n	20a2e <arm_core_mpu_mark_areas_for_dynamic_regions+0x76>
		dyn_reg_info[i].index =
   20a00:	2314      	movs	r3, #20
   20a02:	435f      	muls	r7, r3
   20a04:	f06f 0315 	mvn.w	r3, #21
   20a08:	f84a 3007 	str.w	r3, [sl, r7]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   20a0c:	23dd      	movs	r3, #221	; 0xdd
   20a0e:	4a1c      	ldr	r2, [pc, #112]	; (20a80 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
   20a10:	491c      	ldr	r1, [pc, #112]	; (20a84 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   20a12:	481d      	ldr	r0, [pc, #116]	; (20a88 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   20a14:	f01d ff8a 	bl	3e92c <printk>
   20a18:	4649      	mov	r1, r9
   20a1a:	481c      	ldr	r0, [pc, #112]	; (20a8c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   20a1c:	f01d ff86 	bl	3e92c <printk>
   20a20:	21dd      	movs	r1, #221	; 0xdd
   20a22:	4817      	ldr	r0, [pc, #92]	; (20a80 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
}
   20a24:	b003      	add	sp, #12
   20a26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   20a2a:	f01d bf8c 	b.w	3e946 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   20a2e:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
   20a32:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   20a34:	d0ea      	beq.n	20a0c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   20a36:	7813      	ldrb	r3, [r2, #0]
   20a38:	42b3      	cmp	r3, r6
   20a3a:	dde7      	ble.n	20a0c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   20a3c:	fb0b a307 	mla	r3, fp, r7, sl
	MPU->RNR = index;
   20a40:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
   20a42:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
   20a44:	68e8      	ldr	r0, [r5, #12]
   20a46:	7b19      	ldrb	r1, [r3, #12]
   20a48:	f360 0104 	bfi	r1, r0, #0, #5
   20a4c:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   20a4e:	6929      	ldr	r1, [r5, #16]
   20a50:	7b18      	ldrb	r0, [r3, #12]
   20a52:	0849      	lsrs	r1, r1, #1
   20a54:	f361 1047 	bfi	r0, r1, #5, #3
   20a58:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   20a5a:	68eb      	ldr	r3, [r5, #12]
   20a5c:	f023 031f 	bic.w	r3, r3, #31
   20a60:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   20a62:	692b      	ldr	r3, [r5, #16]
   20a64:	f023 031f 	bic.w	r3, r3, #31
   20a68:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   20a6a:	3701      	adds	r7, #1
   20a6c:	3414      	adds	r4, #20
   20a6e:	f108 080c 	add.w	r8, r8, #12
   20a72:	e7ab      	b.n	209cc <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   20a74:	200239bc 	.word	0x200239bc
   20a78:	e000ed90 	.word	0xe000ed90
   20a7c:	2002a34e 	.word	0x2002a34e
   20a80:	00045b94 	.word	0x00045b94
   20a84:	00049224 	.word	0x00049224
   20a88:	00044643 	.word	0x00044643
   20a8c:	00045b65 	.word	0x00045b65

00020a90 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   20a90:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
   20a92:	4b15      	ldr	r3, [pc, #84]	; (20ae8 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
   20a94:	460c      	mov	r4, r1
   20a96:	781d      	ldrb	r5, [r3, #0]
   20a98:	4606      	mov	r6, r0
   20a9a:	462b      	mov	r3, r5
  mpu->RLAR = 0U;
   20a9c:	2100      	movs	r1, #0
  mpu->RNR = rnr;
   20a9e:	4a13      	ldr	r2, [pc, #76]	; (20aec <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   20aa0:	2b0f      	cmp	r3, #15
   20aa2:	dd1b      	ble.n	20adc <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>

	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
   20aa4:	4912      	ldr	r1, [pc, #72]	; (20af0 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
   20aa6:	f851 0b04 	ldr.w	r0, [r1], #4
   20aaa:	f7ff fdfd 	bl	206a8 <region_init>
	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   20aae:	462a      	mov	r2, r5
   20ab0:	4621      	mov	r1, r4
   20ab2:	4630      	mov	r0, r6
   20ab4:	f7ff fe30 	bl	20718 <mpu_configure_regions.constprop.2>
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   20ab8:	3016      	adds	r0, #22
   20aba:	d113      	bne.n	20ae4 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   20abc:	23ec      	movs	r3, #236	; 0xec
   20abe:	4a0d      	ldr	r2, [pc, #52]	; (20af4 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
   20ac0:	490d      	ldr	r1, [pc, #52]	; (20af8 <arm_core_mpu_configure_dynamic_mpu_regions+0x68>)
   20ac2:	480e      	ldr	r0, [pc, #56]	; (20afc <arm_core_mpu_configure_dynamic_mpu_regions+0x6c>)
   20ac4:	f01d ff32 	bl	3e92c <printk>
   20ac8:	4621      	mov	r1, r4
   20aca:	480d      	ldr	r0, [pc, #52]	; (20b00 <arm_core_mpu_configure_dynamic_mpu_regions+0x70>)
   20acc:	f01d ff2e 	bl	3e92c <printk>
}
   20ad0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   20ad4:	21ec      	movs	r1, #236	; 0xec
   20ad6:	4807      	ldr	r0, [pc, #28]	; (20af4 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
   20ad8:	f01d bf35 	b.w	3e946 <assert_post_action>
   20adc:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   20ade:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   20ae0:	3301      	adds	r3, #1
   20ae2:	e7dd      	b.n	20aa0 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
}
   20ae4:	bd70      	pop	{r4, r5, r6, pc}
   20ae6:	bf00      	nop
   20ae8:	2002a34e 	.word	0x2002a34e
   20aec:	e000ed90 	.word	0xe000ed90
   20af0:	200239bc 	.word	0x200239bc
   20af4:	00045b94 	.word	0x00045b94
   20af8:	00049224 	.word	0x00049224
   20afc:	00044643 	.word	0x00044643
   20b00:	00045b0c 	.word	0x00045b0c

00020b04 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   20b04:	4b01      	ldr	r3, [pc, #4]	; (20b0c <__stdout_hook_install+0x8>)
   20b06:	6018      	str	r0, [r3, #0]
}
   20b08:	4770      	bx	lr
   20b0a:	bf00      	nop
   20b0c:	20031244 	.word	0x20031244

00020b10 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   20b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20b12:	4606      	mov	r6, r0
   20b14:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   20b16:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   20b18:	4f06      	ldr	r7, [pc, #24]	; (20b34 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   20b1a:	42ac      	cmp	r4, r5
   20b1c:	da08      	bge.n	20b30 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   20b1e:	683b      	ldr	r3, [r7, #0]
   20b20:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   20b22:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   20b24:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   20b26:	f104 0401 	add.w	r4, r4, #1
   20b2a:	d001      	beq.n	20b30 <z_impl_zephyr_read_stdin+0x20>
   20b2c:	280d      	cmp	r0, #13
   20b2e:	d1f4      	bne.n	20b1a <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   20b30:	4620      	mov	r0, r4
   20b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20b34:	20031240 	.word	0x20031240

00020b38 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   20b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20b3a:	460e      	mov	r6, r1
   20b3c:	4f09      	ldr	r7, [pc, #36]	; (20b64 <z_impl_zephyr_write_stdout+0x2c>)
   20b3e:	1e44      	subs	r4, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   20b40:	f1c0 0501 	rsb	r5, r0, #1
   20b44:	192b      	adds	r3, r5, r4
   20b46:	429e      	cmp	r6, r3
   20b48:	dc01      	bgt.n	20b4e <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   20b4a:	4630      	mov	r0, r6
   20b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   20b4e:	7863      	ldrb	r3, [r4, #1]
   20b50:	2b0a      	cmp	r3, #10
   20b52:	d102      	bne.n	20b5a <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   20b54:	683b      	ldr	r3, [r7, #0]
   20b56:	200d      	movs	r0, #13
   20b58:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   20b5a:	683b      	ldr	r3, [r7, #0]
   20b5c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   20b60:	4798      	blx	r3
   20b62:	e7ef      	b.n	20b44 <z_impl_zephyr_write_stdout+0xc>
   20b64:	20031244 	.word	0x20031244

00020b68 <_exit>:
	return 0;
}
FUNC_ALIAS(_fstat, fstat, int);

void _exit(int status)
{
   20b68:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   20b6a:	2105      	movs	r1, #5
   20b6c:	4801      	ldr	r0, [pc, #4]	; (20b74 <_exit+0xc>)
   20b6e:	f7ff ffe3 	bl	20b38 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
		;
   20b72:	e7fe      	b.n	20b72 <_exit+0xa>
   20b74:	00045cd7 	.word	0x00045cd7

00020b78 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   20b78:	b538      	push	{r3, r4, r5, lr}
   20b7a:	4605      	mov	r5, r0
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
   20b7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20b80:	480b      	ldr	r0, [pc, #44]	; (20bb0 <_sbrk+0x38>)
   20b82:	f01d fc18 	bl	3e3b6 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   20b86:	4a0b      	ldr	r2, [pc, #44]	; (20bb4 <_sbrk+0x3c>)
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   20b88:	490b      	ldr	r1, [pc, #44]	; (20bb8 <_sbrk+0x40>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
   20b8a:	6814      	ldr	r4, [r2, #0]
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   20b8c:	f1c1 5300 	rsb	r3, r1, #536870912	; 0x20000000
   20b90:	4425      	add	r5, r4
   20b92:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   20b96:	429d      	cmp	r5, r3
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   20b98:	bf2c      	ite	cs
   20b9a:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
   20b9e:	1864      	addcc	r4, r4, r1
	}

	sys_sem_give(&heap_sem);
   20ba0:	4803      	ldr	r0, [pc, #12]	; (20bb0 <_sbrk+0x38>)
		heap_sz += count;
   20ba2:	bf38      	it	cc
   20ba4:	6015      	strcc	r5, [r2, #0]
	sys_sem_give(&heap_sem);
   20ba6:	f01d fc01 	bl	3e3ac <sys_sem_give>

	return ret;
}
   20baa:	4620      	mov	r0, r4
   20bac:	bd38      	pop	{r3, r4, r5, pc}
   20bae:	bf00      	nop
   20bb0:	2003160c 	.word	0x2003160c
   20bb4:	200239d0 	.word	0x200239d0
   20bb8:	200316bc 	.word	0x200316bc

00020bbc <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
   20bbc:	b538      	push	{r3, r4, r5, lr}
   20bbe:	460d      	mov	r5, r1
	NET_ASSERT(iface);
   20bc0:	4604      	mov	r4, r0
   20bc2:	b958      	cbnz	r0, 20bdc <net_if_flag_is_set+0x20>
   20bc4:	4909      	ldr	r1, [pc, #36]	; (20bec <net_if_flag_is_set+0x30>)
   20bc6:	480a      	ldr	r0, [pc, #40]	; (20bf0 <net_if_flag_is_set+0x34>)
   20bc8:	f240 2311 	movw	r3, #529	; 0x211
   20bcc:	4a09      	ldr	r2, [pc, #36]	; (20bf4 <net_if_flag_is_set+0x38>)
   20bce:	f01d fead 	bl	3e92c <printk>
   20bd2:	f240 2111 	movw	r1, #529	; 0x211
   20bd6:	4807      	ldr	r0, [pc, #28]	; (20bf4 <net_if_flag_is_set+0x38>)
   20bd8:	f01d feb5 	bl	3e946 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20bdc:	6823      	ldr	r3, [r4, #0]
   20bde:	330c      	adds	r3, #12
   20be0:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   20be4:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
   20be6:	f000 0001 	and.w	r0, r0, #1
   20bea:	bd38      	pop	{r3, r4, r5, pc}
   20bec:	00045d06 	.word	0x00045d06
   20bf0:	00044643 	.word	0x00044643
   20bf4:	00045ce5 	.word	0x00045ce5

00020bf8 <net_if_flag_set.constprop.25>:
static inline void net_if_flag_set(struct net_if *iface,
   20bf8:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   20bfa:	4604      	mov	r4, r0
   20bfc:	b958      	cbnz	r0, 20c16 <net_if_flag_set.constprop.25+0x1e>
   20bfe:	490b      	ldr	r1, [pc, #44]	; (20c2c <net_if_flag_set.constprop.25+0x34>)
   20c00:	480b      	ldr	r0, [pc, #44]	; (20c30 <net_if_flag_set.constprop.25+0x38>)
   20c02:	f240 13e3 	movw	r3, #483	; 0x1e3
   20c06:	4a0b      	ldr	r2, [pc, #44]	; (20c34 <net_if_flag_set.constprop.25+0x3c>)
   20c08:	f01d fe90 	bl	3e92c <printk>
   20c0c:	f240 11e3 	movw	r1, #483	; 0x1e3
   20c10:	4808      	ldr	r0, [pc, #32]	; (20c34 <net_if_flag_set.constprop.25+0x3c>)
   20c12:	f01d fe98 	bl	3e946 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20c16:	6823      	ldr	r3, [r4, #0]
   20c18:	330c      	adds	r3, #12
   20c1a:	e8d3 2fef 	ldaex	r2, [r3]
   20c1e:	f042 0201 	orr.w	r2, r2, #1
   20c22:	e8c3 2fe1 	stlex	r1, r2, [r3]
   20c26:	2900      	cmp	r1, #0
   20c28:	d1f7      	bne.n	20c1a <net_if_flag_set.constprop.25+0x22>
}
   20c2a:	bd10      	pop	{r4, pc}
   20c2c:	00045d06 	.word	0x00045d06
   20c30:	00044643 	.word	0x00044643
   20c34:	00045ce5 	.word	0x00045ce5

00020c38 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   20c38:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   20c3a:	2100      	movs	r1, #0
{
   20c3c:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   20c3e:	f7ff ffbd 	bl	20bbc <net_if_flag_is_set>
   20c42:	b928      	cbnz	r0, 20c50 <net_if_up+0x18>
	}

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
   20c44:	682b      	ldr	r3, [r5, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   20c46:	7e9a      	ldrb	r2, [r3, #26]
   20c48:	b122      	cbz	r2, 20c54 <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
   20c4a:	4628      	mov	r0, r5
   20c4c:	f7ff ffd4 	bl	20bf8 <net_if_flag_set.constprop.25>
		return 0;
   20c50:	2000      	movs	r0, #0
   20c52:	e01f      	b.n	20c94 <net_if_up+0x5c>
 *
 * @return a pointer to the iface L2
 */
static inline const struct net_l2 * const net_if_l2(struct net_if *iface)
{
	return iface->if_dev->l2;
   20c54:	685b      	ldr	r3, [r3, #4]
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   20c56:	b9ab      	cbnz	r3, 20c84 <net_if_up+0x4c>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   20c58:	682b      	ldr	r3, [r5, #0]
   20c5a:	691b      	ldr	r3, [r3, #16]
   20c5c:	b95b      	cbnz	r3, 20c76 <net_if_up+0x3e>
   20c5e:	490e      	ldr	r1, [pc, #56]	; (20c98 <net_if_up+0x60>)
   20c60:	480e      	ldr	r0, [pc, #56]	; (20c9c <net_if_up+0x64>)
   20c62:	f640 5389 	movw	r3, #3465	; 0xd89
   20c66:	4a0e      	ldr	r2, [pc, #56]	; (20ca0 <net_if_up+0x68>)
   20c68:	f01d fe60 	bl	3e92c <printk>
   20c6c:	f640 5189 	movw	r1, #3465	; 0xd89
   20c70:	480b      	ldr	r0, [pc, #44]	; (20ca0 <net_if_up+0x68>)
   20c72:	f01d fe68 	bl	3e946 <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
   20c76:	4628      	mov	r0, r5
   20c78:	f7ff ffbe 	bl	20bf8 <net_if_flag_set.constprop.25>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   20c7c:	4628      	mov	r0, r5
   20c7e:	f01e f851 	bl	3ed24 <l2_flags_get>
   20c82:	e7e5      	b.n	20c50 <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   20c84:	689b      	ldr	r3, [r3, #8]
   20c86:	2b00      	cmp	r3, #0
   20c88:	d0e6      	beq.n	20c58 <net_if_up+0x20>
	status = net_if_l2(iface)->enable(iface, true);
   20c8a:	2101      	movs	r1, #1
   20c8c:	4628      	mov	r0, r5
   20c8e:	4798      	blx	r3
	if (status < 0) {
   20c90:	2800      	cmp	r0, #0
   20c92:	dae1      	bge.n	20c58 <net_if_up+0x20>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   20c94:	bd38      	pop	{r3, r4, r5, pc}
   20c96:	bf00      	nop
   20c98:	00045d0c 	.word	0x00045d0c
   20c9c:	00044643 	.word	0x00044643
   20ca0:	00045d3d 	.word	0x00045d3d

00020ca4 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   20ca4:	b538      	push	{r3, r4, r5, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   20ca6:	4c07      	ldr	r4, [pc, #28]	; (20cc4 <net_if_init+0x20>)
   20ca8:	4d07      	ldr	r5, [pc, #28]	; (20cc8 <net_if_init+0x24>)
   20caa:	42ac      	cmp	r4, r5
   20cac:	d100      	bne.n	20cb0 <net_if_init+0xc>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   20cae:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @return a pointer to the device driver instance
 */
static inline struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   20cb0:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   20cb2:	681b      	ldr	r3, [r3, #0]
   20cb4:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
   20cb6:	b11b      	cbz	r3, 20cc0 <net_if_init+0x1c>
   20cb8:	681b      	ldr	r3, [r3, #0]
   20cba:	b10b      	cbz	r3, 20cc0 <net_if_init+0x1c>
	api->init(iface);
   20cbc:	4620      	mov	r0, r4
   20cbe:	4798      	blx	r3
	     iface++, if_count++) {
   20cc0:	3420      	adds	r4, #32
   20cc2:	e7f2      	b.n	20caa <net_if_init+0x6>
   20cc4:	20031680 	.word	0x20031680
   20cc8:	200316a0 	.word	0x200316a0

00020ccc <net_if_post_init>:

void net_if_post_init(void)
{
   20ccc:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   20cce:	4c07      	ldr	r4, [pc, #28]	; (20cec <net_if_post_init+0x20>)
   20cd0:	4d07      	ldr	r5, [pc, #28]	; (20cf0 <net_if_post_init+0x24>)
   20cd2:	42ac      	cmp	r4, r5
   20cd4:	d100      	bne.n	20cd8 <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   20cd6:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   20cd8:	2103      	movs	r1, #3
   20cda:	4620      	mov	r0, r4
   20cdc:	f7ff ff6e 	bl	20bbc <net_if_flag_is_set>
   20ce0:	b910      	cbnz	r0, 20ce8 <net_if_post_init+0x1c>
			net_if_up(iface);
   20ce2:	4620      	mov	r0, r4
   20ce4:	f7ff ffa8 	bl	20c38 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   20ce8:	3420      	adds	r4, #32
   20cea:	e7f2      	b.n	20cd2 <net_if_post_init+0x6>
   20cec:	20031680 	.word	0x20031680
   20cf0:	200316a0 	.word	0x200316a0

00020cf4 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   20cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   20cf8:	680f      	ldr	r7, [r1, #0]
	u8_t connect_flags = client->clean_session << 1;
   20cfa:	f890 5077 	ldrb.w	r5, [r0, #119]	; 0x77
	start = buf->cur;

	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   20cfe:	4b3b      	ldr	r3, [pc, #236]	; (20dec <connect_request_encode+0xf8>)
   20d00:	4a3b      	ldr	r2, [pc, #236]	; (20df0 <connect_request_encode+0xfc>)
{
   20d02:	4606      	mov	r6, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   20d04:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   20d08:	3705      	adds	r7, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   20d0a:	2804      	cmp	r0, #4
   20d0c:	bf0c      	ite	eq
   20d0e:	4610      	moveq	r0, r2
   20d10:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   20d12:	600f      	str	r7, [r1, #0]
{
   20d14:	460c      	mov	r4, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   20d16:	f01e f8d7 	bl	3eec8 <pack_utf8_str>
	u8_t connect_flags = client->clean_session << 1;
   20d1a:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (err_code != 0) {
   20d1e:	4603      	mov	r3, r0
   20d20:	b938      	cbnz	r0, 20d32 <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   20d22:	e9d4 2000 	ldrd	r2, r0, [r4]
   20d26:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   20d28:	f896 1076 	ldrb.w	r1, [r6, #118]	; 0x76
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   20d2c:	d104      	bne.n	20d38 <connect_request_encode+0x44>
		return -ENOMEM;
   20d2e:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   20d32:	4618      	mov	r0, r3
   20d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   20d38:	1c50      	adds	r0, r2, #1
   20d3a:	6020      	str	r0, [r4, #0]
   20d3c:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   20d3e:	e9d4 8200 	ldrd	r8, r2, [r4]
   20d42:	4590      	cmp	r8, r2
   20d44:	d0f3      	beq.n	20d2e <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   20d46:	f108 0201 	add.w	r2, r8, #1
   20d4a:	6022      	str	r2, [r4, #0]
   20d4c:	f888 3000 	strb.w	r3, [r8]
	err_code = pack_uint16(client->keepalive, buf);
   20d50:	4621      	mov	r1, r4
   20d52:	f8b6 0074 	ldrh.w	r0, [r6, #116]	; 0x74
   20d56:	f01e f8a5 	bl	3eea4 <pack_uint16>
	if (err_code != 0) {
   20d5a:	4603      	mov	r3, r0
   20d5c:	2800      	cmp	r0, #0
   20d5e:	d1e8      	bne.n	20d32 <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   20d60:	f106 0044 	add.w	r0, r6, #68	; 0x44
   20d64:	f01e f8b0 	bl	3eec8 <pack_utf8_str>
	if (err_code != 0) {
   20d68:	4603      	mov	r3, r0
   20d6a:	2800      	cmp	r0, #0
   20d6c:	d1e1      	bne.n	20d32 <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   20d6e:	6db0      	ldr	r0, [r6, #88]	; 0x58
	u8_t connect_flags = client->clean_session << 1;
   20d70:	006d      	lsls	r5, r5, #1
	if (client->will_topic != NULL) {
   20d72:	b1d8      	cbz	r0, 20dac <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   20d74:	f896 3077 	ldrb.w	r3, [r6, #119]	; 0x77
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   20d78:	f045 0504 	orr.w	r5, r5, #4
		connect_flags |= client->will_retain << 5;
   20d7c:	f003 0301 	and.w	r3, r3, #1
   20d80:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   20d84:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   20d86:	4621      	mov	r1, r4
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   20d88:	00db      	lsls	r3, r3, #3
   20d8a:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   20d8e:	431d      	orrs	r5, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   20d90:	f01e f89a 	bl	3eec8 <pack_utf8_str>
		if (err_code != 0) {
   20d94:	4603      	mov	r3, r0
   20d96:	2800      	cmp	r0, #0
   20d98:	d1cb      	bne.n	20d32 <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   20d9a:	6df3      	ldr	r3, [r6, #92]	; 0x5c
			err_code = pack_utf8_str(client->will_message, buf);
   20d9c:	4621      	mov	r1, r4
		if (client->will_message != NULL) {
   20d9e:	b313      	cbz	r3, 20de6 <connect_request_encode+0xf2>
			err_code = pack_utf8_str(client->will_message, buf);
   20da0:	4618      	mov	r0, r3
   20da2:	f01e f891 	bl	3eec8 <pack_utf8_str>
			if (err_code != 0) {
   20da6:	4603      	mov	r3, r0
   20da8:	2800      	cmp	r0, #0
   20daa:	d1c2      	bne.n	20d32 <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   20dac:	6d30      	ldr	r0, [r6, #80]	; 0x50
   20dae:	b138      	cbz	r0, 20dc0 <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   20db0:	4621      	mov	r1, r4
   20db2:	f01e f889 	bl	3eec8 <pack_utf8_str>
		if (err_code != 0) {
   20db6:	4603      	mov	r3, r0
   20db8:	2800      	cmp	r0, #0
   20dba:	d1ba      	bne.n	20d32 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   20dbc:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	if (client->password != NULL) {
   20dc0:	6d70      	ldr	r0, [r6, #84]	; 0x54
   20dc2:	b138      	cbz	r0, 20dd4 <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   20dc4:	4621      	mov	r1, r4
   20dc6:	f01e f87f 	bl	3eec8 <pack_utf8_str>
		if (err_code != 0) {
   20dca:	4603      	mov	r3, r0
   20dcc:	2800      	cmp	r0, #0
   20dce:	d1b0      	bne.n	20d32 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   20dd0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
	*connect_flags_pos = connect_flags;
   20dd4:	f888 5000 	strb.w	r5, [r8]
	return mqtt_encode_fixed_header(message_type, start, buf);
   20dd8:	4622      	mov	r2, r4
   20dda:	4639      	mov	r1, r7
}
   20ddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   20de0:	2010      	movs	r0, #16
   20de2:	f01e b88c 	b.w	3eefe <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   20de6:	f01e f85d 	bl	3eea4 <pack_uint16>
   20dea:	e7dc      	b.n	20da6 <connect_request_encode+0xb2>
   20dec:	0004273c 	.word	0x0004273c
   20df0:	00042744 	.word	0x00042744

00020df4 <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   20df4:	e9d0 2300 	ldrd	r2, r3, [r0]
   20df8:	1a9b      	subs	r3, r3, r2
   20dfa:	2b01      	cmp	r3, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   20dfc:	bf81      	itttt	hi
   20dfe:	4b05      	ldrhi	r3, [pc, #20]	; (20e14 <disconnect_encode+0x20>)
   20e00:	881b      	ldrhhi	r3, [r3, #0]
   20e02:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   20e04:	6803      	ldrhi	r3, [r0, #0]
   20e06:	bf83      	ittte	hi
   20e08:	3302      	addhi	r3, #2
   20e0a:	6043      	strhi	r3, [r0, #4]

	return 0;
   20e0c:	2000      	movhi	r0, #0
		return -ENOMEM;
   20e0e:	f06f 000b 	mvnls.w	r0, #11
}
   20e12:	4770      	bx	lr
   20e14:	00045d60 	.word	0x00045d60

00020e18 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   20e18:	e9d0 2300 	ldrd	r2, r3, [r0]
   20e1c:	1a9b      	subs	r3, r3, r2
   20e1e:	2b01      	cmp	r3, #1
   20e20:	bf81      	itttt	hi
   20e22:	4b05      	ldrhi	r3, [pc, #20]	; (20e38 <ping_request_encode+0x20>)
   20e24:	881b      	ldrhhi	r3, [r3, #0]
   20e26:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   20e28:	6803      	ldrhi	r3, [r0, #0]
   20e2a:	bf83      	ittte	hi
   20e2c:	3302      	addhi	r3, #2
   20e2e:	6043      	strhi	r3, [r0, #4]

	return 0;
   20e30:	2000      	movhi	r0, #0
		return -ENOMEM;
   20e32:	f06f 000b 	mvnls.w	r0, #11
}
   20e36:	4770      	bx	lr
   20e38:	00045d6c 	.word	0x00045d6c

00020e3c <close>:
{
   20e3c:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   20e3e:	4c10      	ldr	r4, [pc, #64]	; (20e80 <close+0x44>)
{
   20e40:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   20e42:	6823      	ldr	r3, [r4, #0]
   20e44:	b94b      	cbnz	r3, 20e5a <close+0x1e>
   20e46:	490f      	ldr	r1, [pc, #60]	; (20e84 <close+0x48>)
   20e48:	480f      	ldr	r0, [pc, #60]	; (20e88 <close+0x4c>)
   20e4a:	2321      	movs	r3, #33	; 0x21
   20e4c:	4a0f      	ldr	r2, [pc, #60]	; (20e8c <close+0x50>)
   20e4e:	f01d fd6d 	bl	3e92c <printk>
   20e52:	2121      	movs	r1, #33	; 0x21
   20e54:	480d      	ldr	r0, [pc, #52]	; (20e8c <close+0x50>)
   20e56:	f01d fd76 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   20e5a:	6823      	ldr	r3, [r4, #0]
   20e5c:	685b      	ldr	r3, [r3, #4]
   20e5e:	b94b      	cbnz	r3, 20e74 <close+0x38>
   20e60:	490b      	ldr	r1, [pc, #44]	; (20e90 <close+0x54>)
   20e62:	4809      	ldr	r0, [pc, #36]	; (20e88 <close+0x4c>)
   20e64:	2322      	movs	r3, #34	; 0x22
   20e66:	4a09      	ldr	r2, [pc, #36]	; (20e8c <close+0x50>)
   20e68:	f01d fd60 	bl	3e92c <printk>
   20e6c:	2122      	movs	r1, #34	; 0x22
   20e6e:	4807      	ldr	r0, [pc, #28]	; (20e8c <close+0x50>)
   20e70:	f01d fd69 	bl	3e946 <assert_post_action>
	return socket_ops->close(sock);
   20e74:	6823      	ldr	r3, [r4, #0]
   20e76:	4628      	mov	r0, r5
}
   20e78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   20e7c:	685b      	ldr	r3, [r3, #4]
   20e7e:	4718      	bx	r3
   20e80:	20023990 	.word	0x20023990
   20e84:	0004476f 	.word	0x0004476f
   20e88:	00044643 	.word	0x00044643
   20e8c:	00044746 	.word	0x00044746
   20e90:	00045d6e 	.word	0x00045d6e

00020e94 <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   20e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   20e98:	4c2d      	ldr	r4, [pc, #180]	; (20f50 <mqtt_client_tcp_connect+0xbc>)
	const struct sockaddr *broker = client->broker;
   20e9a:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
   20e9c:	6823      	ldr	r3, [r4, #0]
{
   20e9e:	4606      	mov	r6, r0
	int ret;

	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   20ea0:	882f      	ldrh	r7, [r5, #0]
   20ea2:	b94b      	cbnz	r3, 20eb8 <mqtt_client_tcp_connect+0x24>
   20ea4:	492b      	ldr	r1, [pc, #172]	; (20f54 <mqtt_client_tcp_connect+0xc0>)
   20ea6:	482c      	ldr	r0, [pc, #176]	; (20f58 <mqtt_client_tcp_connect+0xc4>)
   20ea8:	2319      	movs	r3, #25
   20eaa:	4a2c      	ldr	r2, [pc, #176]	; (20f5c <mqtt_client_tcp_connect+0xc8>)
   20eac:	f01d fd3e 	bl	3e92c <printk>
   20eb0:	2119      	movs	r1, #25
   20eb2:	482a      	ldr	r0, [pc, #168]	; (20f5c <mqtt_client_tcp_connect+0xc8>)
   20eb4:	f01d fd47 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   20eb8:	6823      	ldr	r3, [r4, #0]
   20eba:	681b      	ldr	r3, [r3, #0]
   20ebc:	b94b      	cbnz	r3, 20ed2 <mqtt_client_tcp_connect+0x3e>
   20ebe:	4928      	ldr	r1, [pc, #160]	; (20f60 <mqtt_client_tcp_connect+0xcc>)
   20ec0:	4825      	ldr	r0, [pc, #148]	; (20f58 <mqtt_client_tcp_connect+0xc4>)
   20ec2:	231a      	movs	r3, #26
   20ec4:	4a25      	ldr	r2, [pc, #148]	; (20f5c <mqtt_client_tcp_connect+0xc8>)
   20ec6:	f01d fd31 	bl	3e92c <printk>
   20eca:	211a      	movs	r1, #26
   20ecc:	4823      	ldr	r0, [pc, #140]	; (20f5c <mqtt_client_tcp_connect+0xc8>)
   20ece:	f01d fd3a 	bl	3e946 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   20ed2:	6823      	ldr	r3, [r4, #0]
   20ed4:	4638      	mov	r0, r7
   20ed6:	681b      	ldr	r3, [r3, #0]
   20ed8:	2206      	movs	r2, #6
   20eda:	2101      	movs	r1, #1
   20edc:	4798      	blx	r3
					    IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   20ede:	2800      	cmp	r0, #0
   20ee0:	4607      	mov	r7, r0
	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   20ee2:	62b0      	str	r0, [r6, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   20ee4:	da05      	bge.n	20ef2 <mqtt_client_tcp_connect+0x5e>

	ret = connect(client->transport.tcp.sock, client->broker,
		      peer_addr_size);
	if (ret < 0) {
		(void)close(client->transport.tcp.sock);
		return -errno;
   20ee6:	f01d ff14 	bl	3ed12 <__errno>
   20eea:	6800      	ldr	r0, [r0, #0]
   20eec:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   20eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (broker->sa_family == AF_INET) {
   20ef2:	882b      	ldrh	r3, [r5, #0]
	ret = connect(client->transport.tcp.sock, client->broker,
   20ef4:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
		peer_addr_size = sizeof(struct sockaddr_in);
   20ef6:	2b01      	cmp	r3, #1
	__ASSERT_NO_MSG(socket_ops);
   20ef8:	6823      	ldr	r3, [r4, #0]
   20efa:	bf14      	ite	ne
   20efc:	f04f 0818 	movne.w	r8, #24
   20f00:	f04f 0808 	moveq.w	r8, #8
   20f04:	b94b      	cbnz	r3, 20f1a <mqtt_client_tcp_connect+0x86>
   20f06:	4913      	ldr	r1, [pc, #76]	; (20f54 <mqtt_client_tcp_connect+0xc0>)
   20f08:	4813      	ldr	r0, [pc, #76]	; (20f58 <mqtt_client_tcp_connect+0xc4>)
   20f0a:	2345      	movs	r3, #69	; 0x45
   20f0c:	4a13      	ldr	r2, [pc, #76]	; (20f5c <mqtt_client_tcp_connect+0xc8>)
   20f0e:	f01d fd0d 	bl	3e92c <printk>
   20f12:	2145      	movs	r1, #69	; 0x45
   20f14:	4811      	ldr	r0, [pc, #68]	; (20f5c <mqtt_client_tcp_connect+0xc8>)
   20f16:	f01d fd16 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->connect);
   20f1a:	6823      	ldr	r3, [r4, #0]
   20f1c:	695b      	ldr	r3, [r3, #20]
   20f1e:	b94b      	cbnz	r3, 20f34 <mqtt_client_tcp_connect+0xa0>
   20f20:	4910      	ldr	r1, [pc, #64]	; (20f64 <mqtt_client_tcp_connect+0xd0>)
   20f22:	480d      	ldr	r0, [pc, #52]	; (20f58 <mqtt_client_tcp_connect+0xc4>)
   20f24:	2346      	movs	r3, #70	; 0x46
   20f26:	4a0d      	ldr	r2, [pc, #52]	; (20f5c <mqtt_client_tcp_connect+0xc8>)
   20f28:	f01d fd00 	bl	3e92c <printk>
   20f2c:	2146      	movs	r1, #70	; 0x46
   20f2e:	480b      	ldr	r0, [pc, #44]	; (20f5c <mqtt_client_tcp_connect+0xc8>)
   20f30:	f01d fd09 	bl	3e946 <assert_post_action>
	return socket_ops->connect(sock, addr, addrlen);
   20f34:	6823      	ldr	r3, [r4, #0]
   20f36:	4642      	mov	r2, r8
   20f38:	695b      	ldr	r3, [r3, #20]
   20f3a:	4629      	mov	r1, r5
   20f3c:	4638      	mov	r0, r7
   20f3e:	4798      	blx	r3
	if (ret < 0) {
   20f40:	2800      	cmp	r0, #0
   20f42:	da03      	bge.n	20f4c <mqtt_client_tcp_connect+0xb8>
		(void)close(client->transport.tcp.sock);
   20f44:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   20f46:	f7ff ff79 	bl	20e3c <close>
   20f4a:	e7cc      	b.n	20ee6 <mqtt_client_tcp_connect+0x52>
	return 0;
   20f4c:	2000      	movs	r0, #0
   20f4e:	e7ce      	b.n	20eee <mqtt_client_tcp_connect+0x5a>
   20f50:	20023990 	.word	0x20023990
   20f54:	0004476f 	.word	0x0004476f
   20f58:	00044643 	.word	0x00044643
   20f5c:	00044746 	.word	0x00044746
   20f60:	00045d80 	.word	0x00045d80
   20f64:	00045d93 	.word	0x00045d93

00020f68 <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
   20f68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f6c:	4680      	mov	r8, r0
   20f6e:	4689      	mov	r9, r1
   20f70:	4617      	mov	r7, r2
	u32_t offset = 0U;
   20f72:	2400      	movs	r4, #0
}

static inline ssize_t send(int sock, const void *buf, size_t len,
			   int flags)
{
	__ASSERT_NO_MSG(socket_ops);
   20f74:	4d1d      	ldr	r5, [pc, #116]	; (20fec <mqtt_client_tcp_write+0x84>)
	int ret;

	while (offset < datalen) {
   20f76:	42bc      	cmp	r4, r7
   20f78:	d301      	bcc.n	20f7e <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   20f7a:	2000      	movs	r0, #0
   20f7c:	e031      	b.n	20fe2 <mqtt_client_tcp_write+0x7a>
		ret = send(client->transport.tcp.sock, data + offset,
   20f7e:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   20f82:	eb09 0a04 	add.w	sl, r9, r4
   20f86:	461e      	mov	r6, r3
   20f88:	4b19      	ldr	r3, [pc, #100]	; (20ff0 <mqtt_client_tcp_write+0x88>)
   20f8a:	eba7 0b04 	sub.w	fp, r7, r4
   20f8e:	681b      	ldr	r3, [r3, #0]
   20f90:	b94b      	cbnz	r3, 20fa6 <mqtt_client_tcp_write+0x3e>
   20f92:	4918      	ldr	r1, [pc, #96]	; (20ff4 <mqtt_client_tcp_write+0x8c>)
   20f94:	4818      	ldr	r0, [pc, #96]	; (20ff8 <mqtt_client_tcp_write+0x90>)
   20f96:	237e      	movs	r3, #126	; 0x7e
   20f98:	462a      	mov	r2, r5
   20f9a:	f01d fcc7 	bl	3e92c <printk>
   20f9e:	217e      	movs	r1, #126	; 0x7e
   20fa0:	4628      	mov	r0, r5
   20fa2:	f01d fcd0 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   20fa6:	4b12      	ldr	r3, [pc, #72]	; (20ff0 <mqtt_client_tcp_write+0x88>)
   20fa8:	681b      	ldr	r3, [r3, #0]
   20faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20fac:	b94b      	cbnz	r3, 20fc2 <mqtt_client_tcp_write+0x5a>
   20fae:	4913      	ldr	r1, [pc, #76]	; (20ffc <mqtt_client_tcp_write+0x94>)
   20fb0:	4811      	ldr	r0, [pc, #68]	; (20ff8 <mqtt_client_tcp_write+0x90>)
   20fb2:	237f      	movs	r3, #127	; 0x7f
   20fb4:	462a      	mov	r2, r5
   20fb6:	f01d fcb9 	bl	3e92c <printk>
   20fba:	217f      	movs	r1, #127	; 0x7f
   20fbc:	4628      	mov	r0, r5
   20fbe:	f01d fcc2 	bl	3e946 <assert_post_action>

	return socket_ops->send(sock, buf, len, flags);
   20fc2:	4b0b      	ldr	r3, [pc, #44]	; (20ff0 <mqtt_client_tcp_write+0x88>)
   20fc4:	4630      	mov	r0, r6
   20fc6:	681b      	ldr	r3, [r3, #0]
   20fc8:	465a      	mov	r2, fp
   20fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20fcc:	4651      	mov	r1, sl
   20fce:	469c      	mov	ip, r3
   20fd0:	2300      	movs	r3, #0
   20fd2:	4666      	mov	r6, ip
   20fd4:	47b0      	blx	r6
		if (ret < 0) {
   20fd6:	2800      	cmp	r0, #0
   20fd8:	da05      	bge.n	20fe6 <mqtt_client_tcp_write+0x7e>
			return -errno;
   20fda:	f01d fe9a 	bl	3ed12 <__errno>
   20fde:	6800      	ldr	r0, [r0, #0]
   20fe0:	4240      	negs	r0, r0
}
   20fe2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += ret;
   20fe6:	4404      	add	r4, r0
   20fe8:	e7c5      	b.n	20f76 <mqtt_client_tcp_write+0xe>
   20fea:	bf00      	nop
   20fec:	00044746 	.word	0x00044746
   20ff0:	20023990 	.word	0x20023990
   20ff4:	0004476f 	.word	0x0004476f
   20ff8:	00044643 	.word	0x00044643
   20ffc:	00045db8 	.word	0x00045db8

00021000 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			 bool shall_block)
{
   21000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   21004:	4c18      	ldr	r4, [pc, #96]	; (21068 <mqtt_client_tcp_read+0x68>)
	int flags = 0;
	int ret;

	if (!shall_block) {
		flags |= MSG_DONTWAIT;
   21006:	2b00      	cmp	r3, #0
   21008:	6823      	ldr	r3, [r4, #0]
{
   2100a:	460e      	mov	r6, r1
   2100c:	4617      	mov	r7, r2
		flags |= MSG_DONTWAIT;
   2100e:	bf14      	ite	ne
   21010:	f04f 0800 	movne.w	r8, #0
   21014:	f04f 0840 	moveq.w	r8, #64	; 0x40
	}

	ret = recv(client->transport.tcp.sock, data, buflen, flags);
   21018:	6a85      	ldr	r5, [r0, #40]	; 0x28
   2101a:	b94b      	cbnz	r3, 21030 <mqtt_client_tcp_read+0x30>
   2101c:	4913      	ldr	r1, [pc, #76]	; (2106c <mqtt_client_tcp_read+0x6c>)
   2101e:	4814      	ldr	r0, [pc, #80]	; (21070 <mqtt_client_tcp_read+0x70>)
   21020:	2369      	movs	r3, #105	; 0x69
   21022:	4a14      	ldr	r2, [pc, #80]	; (21074 <mqtt_client_tcp_read+0x74>)
   21024:	f01d fc82 	bl	3e92c <printk>
   21028:	2169      	movs	r1, #105	; 0x69
   2102a:	4812      	ldr	r0, [pc, #72]	; (21074 <mqtt_client_tcp_read+0x74>)
   2102c:	f01d fc8b 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   21030:	6823      	ldr	r3, [r4, #0]
   21032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21034:	b94b      	cbnz	r3, 2104a <mqtt_client_tcp_read+0x4a>
   21036:	4910      	ldr	r1, [pc, #64]	; (21078 <mqtt_client_tcp_read+0x78>)
   21038:	480d      	ldr	r0, [pc, #52]	; (21070 <mqtt_client_tcp_read+0x70>)
   2103a:	236a      	movs	r3, #106	; 0x6a
   2103c:	4a0d      	ldr	r2, [pc, #52]	; (21074 <mqtt_client_tcp_read+0x74>)
   2103e:	f01d fc75 	bl	3e92c <printk>
   21042:	216a      	movs	r1, #106	; 0x6a
   21044:	480b      	ldr	r0, [pc, #44]	; (21074 <mqtt_client_tcp_read+0x74>)
   21046:	f01d fc7e 	bl	3e946 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   2104a:	6823      	ldr	r3, [r4, #0]
   2104c:	463a      	mov	r2, r7
   2104e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   21050:	4631      	mov	r1, r6
   21052:	4643      	mov	r3, r8
   21054:	4628      	mov	r0, r5
   21056:	47a0      	blx	r4
	if (ret < 0) {
   21058:	2800      	cmp	r0, #0
   2105a:	da03      	bge.n	21064 <mqtt_client_tcp_read+0x64>
		return -errno;
   2105c:	f01d fe59 	bl	3ed12 <__errno>
   21060:	6800      	ldr	r0, [r0, #0]
   21062:	4240      	negs	r0, r0
	}

	return ret;
}
   21064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21068:	20023990 	.word	0x20023990
   2106c:	0004476f 	.word	0x0004476f
   21070:	00044643 	.word	0x00044643
   21074:	00044746 	.word	0x00044746
   21078:	00045da7 	.word	0x00045da7

0002107c <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   2107c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   21080:	4a01      	ldr	r2, [pc, #4]	; (21088 <mqtt_transport_connect+0xc>)
   21082:	011b      	lsls	r3, r3, #4
   21084:	58d3      	ldr	r3, [r2, r3]
   21086:	4718      	bx	r3
   21088:	0004274c 	.word	0x0004274c

0002108c <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const u8_t *data,
			 u32_t datalen)
{
   2108c:	b410      	push	{r4}
	return transport_fn[client->transport.type].write(client, data,
   2108e:	4b04      	ldr	r3, [pc, #16]	; (210a0 <mqtt_transport_write+0x14>)
   21090:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   21094:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   21098:	685b      	ldr	r3, [r3, #4]
							  datalen);
}
   2109a:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write(client, data,
   2109e:	4718      	bx	r3
   210a0:	0004274c 	.word	0x0004274c

000210a4 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			bool shall_block)
{
   210a4:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].read(client, data, buflen,
   210a6:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
   210aa:	4c03      	ldr	r4, [pc, #12]	; (210b8 <mqtt_transport_read+0x14>)
   210ac:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   210b0:	68a4      	ldr	r4, [r4, #8]
   210b2:	46a4      	mov	ip, r4
							 shall_block);
}
   210b4:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].read(client, data, buflen,
   210b6:	4760      	bx	ip
   210b8:	0004274c 	.word	0x0004274c

000210bc <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   210bc:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   210c0:	4b02      	ldr	r3, [pc, #8]	; (210cc <mqtt_transport_disconnect+0x10>)
   210c2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   210c6:	68db      	ldr	r3, [r3, #12]
   210c8:	4718      	bx	r3
   210ca:	bf00      	nop
   210cc:	0004274c 	.word	0x0004274c

000210d0 <mqtt_mutex_unlock>:
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
   210d0:	68c2      	ldr	r2, [r0, #12]
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   210d2:	b510      	push	{r4, lr}
   210d4:	b142      	cbz	r2, 210e8 <mqtt_mutex_unlock+0x18>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
   210d6:	4b0f      	ldr	r3, [pc, #60]	; (21114 <mqtt_mutex_unlock+0x44>)
   210d8:	6882      	ldr	r2, [r0, #8]
   210da:	689b      	ldr	r3, [r3, #8]
   210dc:	429a      	cmp	r2, r3
   210de:	d115      	bne.n	2110c <mqtt_mutex_unlock+0x3c>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
	(void)ret;
}
   210e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_impl_k_mutex_unlock(mutex);
   210e4:	f017 beb8 	b.w	38e58 <z_impl_k_mutex_unlock>
		return -EINVAL;
   210e8:	f06f 0415 	mvn.w	r4, #21
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   210ec:	2343      	movs	r3, #67	; 0x43
   210ee:	4a0a      	ldr	r2, [pc, #40]	; (21118 <mqtt_mutex_unlock+0x48>)
   210f0:	490a      	ldr	r1, [pc, #40]	; (2111c <mqtt_mutex_unlock+0x4c>)
   210f2:	480b      	ldr	r0, [pc, #44]	; (21120 <mqtt_mutex_unlock+0x50>)
   210f4:	f01d fc1a 	bl	3e92c <printk>
   210f8:	4621      	mov	r1, r4
   210fa:	480a      	ldr	r0, [pc, #40]	; (21124 <mqtt_mutex_unlock+0x54>)
   210fc:	f01d fc16 	bl	3e92c <printk>
}
   21100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   21104:	2143      	movs	r1, #67	; 0x43
   21106:	4804      	ldr	r0, [pc, #16]	; (21118 <mqtt_mutex_unlock+0x48>)
   21108:	f01d bc1d 	b.w	3e946 <assert_post_action>
		return -EPERM;
   2110c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   21110:	e7ec      	b.n	210ec <mqtt_mutex_unlock+0x1c>
   21112:	bf00      	nop
   21114:	2002a214 	.word	0x2002a214
   21118:	00045de9 	.word	0x00045de9
   2111c:	00045e13 	.word	0x00045e13
   21120:	00044643 	.word	0x00044643
   21124:	00045e1c 	.word	0x00045e1c

00021128 <mqtt_mutex_lock>:
{
   21128:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   2112a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2112e:	f017 fdb9 	bl	38ca4 <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   21132:	4604      	mov	r4, r0
   21134:	b178      	cbz	r0, 21156 <mqtt_mutex_lock+0x2e>
   21136:	2339      	movs	r3, #57	; 0x39
   21138:	4a07      	ldr	r2, [pc, #28]	; (21158 <mqtt_mutex_lock+0x30>)
   2113a:	4908      	ldr	r1, [pc, #32]	; (2115c <mqtt_mutex_lock+0x34>)
   2113c:	4808      	ldr	r0, [pc, #32]	; (21160 <mqtt_mutex_lock+0x38>)
   2113e:	f01d fbf5 	bl	3e92c <printk>
   21142:	4621      	mov	r1, r4
   21144:	4807      	ldr	r0, [pc, #28]	; (21164 <mqtt_mutex_lock+0x3c>)
   21146:	f01d fbf1 	bl	3e92c <printk>
}
   2114a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   2114e:	2139      	movs	r1, #57	; 0x39
   21150:	4801      	ldr	r0, [pc, #4]	; (21158 <mqtt_mutex_lock+0x30>)
   21152:	f01d bbf8 	b.w	3e946 <assert_post_action>
}
   21156:	bd10      	pop	{r4, pc}
   21158:	00045de9 	.word	0x00045de9
   2115c:	00045e13 	.word	0x00045e13
   21160:	00044643 	.word	0x00044643
   21164:	00045dc9 	.word	0x00045dc9

00021168 <close>:
{
   21168:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   2116a:	4c10      	ldr	r4, [pc, #64]	; (211ac <close+0x44>)
{
   2116c:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   2116e:	6823      	ldr	r3, [r4, #0]
   21170:	b94b      	cbnz	r3, 21186 <close+0x1e>
   21172:	490f      	ldr	r1, [pc, #60]	; (211b0 <close+0x48>)
   21174:	480f      	ldr	r0, [pc, #60]	; (211b4 <close+0x4c>)
   21176:	2321      	movs	r3, #33	; 0x21
   21178:	4a0f      	ldr	r2, [pc, #60]	; (211b8 <close+0x50>)
   2117a:	f01d fbd7 	bl	3e92c <printk>
   2117e:	2121      	movs	r1, #33	; 0x21
   21180:	480d      	ldr	r0, [pc, #52]	; (211b8 <close+0x50>)
   21182:	f01d fbe0 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   21186:	6823      	ldr	r3, [r4, #0]
   21188:	685b      	ldr	r3, [r3, #4]
   2118a:	b94b      	cbnz	r3, 211a0 <close+0x38>
   2118c:	490b      	ldr	r1, [pc, #44]	; (211bc <close+0x54>)
   2118e:	4809      	ldr	r0, [pc, #36]	; (211b4 <close+0x4c>)
   21190:	2322      	movs	r3, #34	; 0x22
   21192:	4a09      	ldr	r2, [pc, #36]	; (211b8 <close+0x50>)
   21194:	f01d fbca 	bl	3e92c <printk>
   21198:	2122      	movs	r1, #34	; 0x22
   2119a:	4807      	ldr	r0, [pc, #28]	; (211b8 <close+0x50>)
   2119c:	f01d fbd3 	bl	3e946 <assert_post_action>
	return socket_ops->close(sock);
   211a0:	6823      	ldr	r3, [r4, #0]
   211a2:	4628      	mov	r0, r5
}
   211a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   211a8:	685b      	ldr	r3, [r3, #4]
   211aa:	4718      	bx	r3
   211ac:	20023990 	.word	0x20023990
   211b0:	0004476f 	.word	0x0004476f
   211b4:	00044643 	.word	0x00044643
   211b8:	00044746 	.word	0x00044746
   211bc:	00045d6e 	.word	0x00045d6e

000211c0 <setsockopt.constprop.1>:
static inline int setsockopt(int sock, int level, int optname,
   211c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   211c4:	4c15      	ldr	r4, [pc, #84]	; (2121c <setsockopt.constprop.1+0x5c>)
static inline int setsockopt(int sock, int level, int optname,
   211c6:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   211c8:	6823      	ldr	r3, [r4, #0]
static inline int setsockopt(int sock, int level, int optname,
   211ca:	4605      	mov	r5, r0
   211cc:	460e      	mov	r6, r1
   211ce:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(socket_ops);
   211d0:	b94b      	cbnz	r3, 211e6 <setsockopt.constprop.1+0x26>
   211d2:	4913      	ldr	r1, [pc, #76]	; (21220 <setsockopt.constprop.1+0x60>)
   211d4:	4813      	ldr	r0, [pc, #76]	; (21224 <setsockopt.constprop.1+0x64>)
   211d6:	2357      	movs	r3, #87	; 0x57
   211d8:	4a13      	ldr	r2, [pc, #76]	; (21228 <setsockopt.constprop.1+0x68>)
   211da:	f01d fba7 	bl	3e92c <printk>
   211de:	2157      	movs	r1, #87	; 0x57
   211e0:	4811      	ldr	r0, [pc, #68]	; (21228 <setsockopt.constprop.1+0x68>)
   211e2:	f01d fbb0 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->setsockopt);
   211e6:	6823      	ldr	r3, [r4, #0]
   211e8:	69db      	ldr	r3, [r3, #28]
   211ea:	b94b      	cbnz	r3, 21200 <setsockopt.constprop.1+0x40>
   211ec:	490f      	ldr	r1, [pc, #60]	; (2122c <setsockopt.constprop.1+0x6c>)
   211ee:	480d      	ldr	r0, [pc, #52]	; (21224 <setsockopt.constprop.1+0x64>)
   211f0:	2358      	movs	r3, #88	; 0x58
   211f2:	4a0d      	ldr	r2, [pc, #52]	; (21228 <setsockopt.constprop.1+0x68>)
   211f4:	f01d fb9a 	bl	3e92c <printk>
   211f8:	2158      	movs	r1, #88	; 0x58
   211fa:	480b      	ldr	r0, [pc, #44]	; (21228 <setsockopt.constprop.1+0x68>)
   211fc:	f01d fba3 	bl	3e946 <assert_post_action>
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   21200:	6823      	ldr	r3, [r4, #0]
   21202:	f8cd 8000 	str.w	r8, [sp]
   21206:	69dc      	ldr	r4, [r3, #28]
   21208:	4632      	mov	r2, r6
   2120a:	463b      	mov	r3, r7
   2120c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   21210:	4628      	mov	r0, r5
   21212:	47a0      	blx	r4
}
   21214:	b002      	add	sp, #8
   21216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2121a:	bf00      	nop
   2121c:	20023990 	.word	0x20023990
   21220:	0004476f 	.word	0x0004476f
   21224:	00044643 	.word	0x00044643
   21228:	00044746 	.word	0x00044746
   2122c:	00045e3e 	.word	0x00045e3e

00021230 <mqtt_client_tls_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tls_connect(struct mqtt_client *client)
{
   21230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   21234:	4d48      	ldr	r5, [pc, #288]	; (21358 <mqtt_client_tls_connect+0x128>)
	const struct sockaddr *broker = client->broker;
   21236:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
   21238:	682b      	ldr	r3, [r5, #0]
{
   2123a:	4604      	mov	r4, r0
	struct mqtt_sec_config *tls_config = &client->transport.tls.config;
	int ret;

	client->transport.tls.sock = socket(broker->sa_family,
   2123c:	883e      	ldrh	r6, [r7, #0]
   2123e:	b94b      	cbnz	r3, 21254 <mqtt_client_tls_connect+0x24>
   21240:	4946      	ldr	r1, [pc, #280]	; (2135c <mqtt_client_tls_connect+0x12c>)
   21242:	4847      	ldr	r0, [pc, #284]	; (21360 <mqtt_client_tls_connect+0x130>)
   21244:	2319      	movs	r3, #25
   21246:	4a47      	ldr	r2, [pc, #284]	; (21364 <mqtt_client_tls_connect+0x134>)
   21248:	f01d fb70 	bl	3e92c <printk>
   2124c:	2119      	movs	r1, #25
   2124e:	4845      	ldr	r0, [pc, #276]	; (21364 <mqtt_client_tls_connect+0x134>)
   21250:	f01d fb79 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   21254:	682b      	ldr	r3, [r5, #0]
   21256:	681b      	ldr	r3, [r3, #0]
   21258:	b94b      	cbnz	r3, 2126e <mqtt_client_tls_connect+0x3e>
   2125a:	4943      	ldr	r1, [pc, #268]	; (21368 <mqtt_client_tls_connect+0x138>)
   2125c:	4840      	ldr	r0, [pc, #256]	; (21360 <mqtt_client_tls_connect+0x130>)
   2125e:	231a      	movs	r3, #26
   21260:	4a40      	ldr	r2, [pc, #256]	; (21364 <mqtt_client_tls_connect+0x134>)
   21262:	f01d fb63 	bl	3e92c <printk>
   21266:	211a      	movs	r1, #26
   21268:	483e      	ldr	r0, [pc, #248]	; (21364 <mqtt_client_tls_connect+0x134>)
   2126a:	f01d fb6c 	bl	3e946 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   2126e:	682b      	ldr	r3, [r5, #0]
   21270:	f44f 7281 	mov.w	r2, #258	; 0x102
   21274:	681b      	ldr	r3, [r3, #0]
   21276:	2101      	movs	r1, #1
   21278:	4630      	mov	r0, r6
   2127a:	4798      	blx	r3
					    SOCK_STREAM, IPPROTO_TLS_1_2);
	if (client->transport.tls.sock < 0) {
   2127c:	2800      	cmp	r0, #0
	client->transport.tls.sock = socket(broker->sa_family,
   2127e:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tls.sock < 0) {
   21280:	da05      	bge.n	2128e <mqtt_client_tls_connect+0x5e>
	MQTT_TRC("Connect completed");
	return 0;

error:
	(void)close(client->transport.tls.sock);
	return -errno;
   21282:	f01d fd46 	bl	3ed12 <__errno>
   21286:	6800      	ldr	r0, [r0, #0]
   21288:	4240      	negs	r0, r0
}
   2128a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = setsockopt(client->transport.tls.sock, SOL_TLS, TLS_PEER_VERIFY,
   2128e:	2304      	movs	r3, #4
   21290:	f104 022c 	add.w	r2, r4, #44	; 0x2c
   21294:	2105      	movs	r1, #5
   21296:	f7ff ff93 	bl	211c0 <setsockopt.constprop.1>
	if (ret < 0) {
   2129a:	2800      	cmp	r0, #0
   2129c:	da03      	bge.n	212a6 <mqtt_client_tls_connect+0x76>
	(void)close(client->transport.tls.sock);
   2129e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   212a0:	f7ff ff62 	bl	21168 <close>
   212a4:	e7ed      	b.n	21282 <mqtt_client_tls_connect+0x52>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   212a6:	6b62      	ldr	r2, [r4, #52]	; 0x34
   212a8:	2a00      	cmp	r2, #0
   212aa:	d131      	bne.n	21310 <mqtt_client_tls_connect+0xe0>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   212ac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   212ae:	2a00      	cmp	r2, #0
   212b0:	d139      	bne.n	21326 <mqtt_client_tls_connect+0xf6>
	if (tls_config->hostname) {
   212b2:	6c26      	ldr	r6, [r4, #64]	; 0x40
   212b4:	2e00      	cmp	r6, #0
   212b6:	d141      	bne.n	2133c <mqtt_client_tls_connect+0x10c>
	if (broker->sa_family == AF_INET) {
   212b8:	883b      	ldrh	r3, [r7, #0]
	ret = connect(client->transport.tls.sock, client->broker,
   212ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   212bc:	2b01      	cmp	r3, #1
	__ASSERT_NO_MSG(socket_ops);
   212be:	682b      	ldr	r3, [r5, #0]
   212c0:	bf0c      	ite	eq
   212c2:	f04f 0808 	moveq.w	r8, #8
   212c6:	f04f 0818 	movne.w	r8, #24
	ret = connect(client->transport.tls.sock, client->broker,
   212ca:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
   212cc:	b94b      	cbnz	r3, 212e2 <mqtt_client_tls_connect+0xb2>
   212ce:	4923      	ldr	r1, [pc, #140]	; (2135c <mqtt_client_tls_connect+0x12c>)
   212d0:	4823      	ldr	r0, [pc, #140]	; (21360 <mqtt_client_tls_connect+0x130>)
   212d2:	2345      	movs	r3, #69	; 0x45
   212d4:	4a23      	ldr	r2, [pc, #140]	; (21364 <mqtt_client_tls_connect+0x134>)
   212d6:	f01d fb29 	bl	3e92c <printk>
   212da:	2145      	movs	r1, #69	; 0x45
   212dc:	4821      	ldr	r0, [pc, #132]	; (21364 <mqtt_client_tls_connect+0x134>)
   212de:	f01d fb32 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->connect);
   212e2:	682b      	ldr	r3, [r5, #0]
   212e4:	695b      	ldr	r3, [r3, #20]
   212e6:	b94b      	cbnz	r3, 212fc <mqtt_client_tls_connect+0xcc>
   212e8:	4920      	ldr	r1, [pc, #128]	; (2136c <mqtt_client_tls_connect+0x13c>)
   212ea:	481d      	ldr	r0, [pc, #116]	; (21360 <mqtt_client_tls_connect+0x130>)
   212ec:	2346      	movs	r3, #70	; 0x46
   212ee:	4a1d      	ldr	r2, [pc, #116]	; (21364 <mqtt_client_tls_connect+0x134>)
   212f0:	f01d fb1c 	bl	3e92c <printk>
   212f4:	2146      	movs	r1, #70	; 0x46
   212f6:	481b      	ldr	r0, [pc, #108]	; (21364 <mqtt_client_tls_connect+0x134>)
   212f8:	f01d fb25 	bl	3e946 <assert_post_action>
	return socket_ops->connect(sock, addr, addrlen);
   212fc:	682b      	ldr	r3, [r5, #0]
   212fe:	4642      	mov	r2, r8
   21300:	695b      	ldr	r3, [r3, #20]
   21302:	4639      	mov	r1, r7
   21304:	4630      	mov	r0, r6
   21306:	4798      	blx	r3
	if (ret < 0) {
   21308:	2800      	cmp	r0, #0
   2130a:	dbc8      	blt.n	2129e <mqtt_client_tls_connect+0x6e>
	return 0;
   2130c:	2000      	movs	r0, #0
   2130e:	e7bc      	b.n	2128a <mqtt_client_tls_connect+0x5a>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   21310:	6b23      	ldr	r3, [r4, #48]	; 0x30
   21312:	2b00      	cmp	r3, #0
   21314:	d0ca      	beq.n	212ac <mqtt_client_tls_connect+0x7c>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   21316:	009b      	lsls	r3, r3, #2
   21318:	2103      	movs	r1, #3
   2131a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2131c:	f7ff ff50 	bl	211c0 <setsockopt.constprop.1>
		if (ret < 0) {
   21320:	2800      	cmp	r0, #0
   21322:	dac3      	bge.n	212ac <mqtt_client_tls_connect+0x7c>
   21324:	e7bb      	b.n	2129e <mqtt_client_tls_connect+0x6e>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   21326:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   21328:	2b00      	cmp	r3, #0
   2132a:	d0c2      	beq.n	212b2 <mqtt_client_tls_connect+0x82>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   2132c:	009b      	lsls	r3, r3, #2
   2132e:	2101      	movs	r1, #1
   21330:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   21332:	f7ff ff45 	bl	211c0 <setsockopt.constprop.1>
		if (ret < 0) {
   21336:	2800      	cmp	r0, #0
   21338:	dabb      	bge.n	212b2 <mqtt_client_tls_connect+0x82>
   2133a:	e7b0      	b.n	2129e <mqtt_client_tls_connect+0x6e>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   2133c:	4630      	mov	r0, r6
   2133e:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
   21342:	f7f8 fe1f 	bl	19f84 <strlen>
   21346:	4632      	mov	r2, r6
   21348:	4603      	mov	r3, r0
   2134a:	2102      	movs	r1, #2
   2134c:	4640      	mov	r0, r8
   2134e:	f7ff ff37 	bl	211c0 <setsockopt.constprop.1>
		if (ret < 0) {
   21352:	2800      	cmp	r0, #0
   21354:	dab0      	bge.n	212b8 <mqtt_client_tls_connect+0x88>
   21356:	e7a2      	b.n	2129e <mqtt_client_tls_connect+0x6e>
   21358:	20023990 	.word	0x20023990
   2135c:	0004476f 	.word	0x0004476f
   21360:	00044643 	.word	0x00044643
   21364:	00044746 	.word	0x00044746
   21368:	00045d80 	.word	0x00045d80
   2136c:	00045d93 	.word	0x00045d93

00021370 <mqtt_client_tls_write>:

int mqtt_client_tls_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
   21370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21374:	4680      	mov	r8, r0
   21376:	4689      	mov	r9, r1
   21378:	4617      	mov	r7, r2
	u32_t offset = 0U;
   2137a:	2400      	movs	r4, #0
	__ASSERT_NO_MSG(socket_ops);
   2137c:	4d1d      	ldr	r5, [pc, #116]	; (213f4 <mqtt_client_tls_write+0x84>)
	int ret;

	while (offset < datalen) {
   2137e:	42bc      	cmp	r4, r7
   21380:	d301      	bcc.n	21386 <mqtt_client_tls_write+0x16>
		}

		offset += ret;
	}

	return 0;
   21382:	2000      	movs	r0, #0
   21384:	e031      	b.n	213ea <mqtt_client_tls_write+0x7a>
		ret = send(client->transport.tls.sock, data + offset,
   21386:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   2138a:	eb09 0a04 	add.w	sl, r9, r4
   2138e:	461e      	mov	r6, r3
   21390:	4b19      	ldr	r3, [pc, #100]	; (213f8 <mqtt_client_tls_write+0x88>)
   21392:	eba7 0b04 	sub.w	fp, r7, r4
   21396:	681b      	ldr	r3, [r3, #0]
   21398:	b94b      	cbnz	r3, 213ae <mqtt_client_tls_write+0x3e>
   2139a:	4918      	ldr	r1, [pc, #96]	; (213fc <mqtt_client_tls_write+0x8c>)
   2139c:	4818      	ldr	r0, [pc, #96]	; (21400 <mqtt_client_tls_write+0x90>)
   2139e:	237e      	movs	r3, #126	; 0x7e
   213a0:	462a      	mov	r2, r5
   213a2:	f01d fac3 	bl	3e92c <printk>
   213a6:	217e      	movs	r1, #126	; 0x7e
   213a8:	4628      	mov	r0, r5
   213aa:	f01d facc 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   213ae:	4b12      	ldr	r3, [pc, #72]	; (213f8 <mqtt_client_tls_write+0x88>)
   213b0:	681b      	ldr	r3, [r3, #0]
   213b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   213b4:	b94b      	cbnz	r3, 213ca <mqtt_client_tls_write+0x5a>
   213b6:	4913      	ldr	r1, [pc, #76]	; (21404 <mqtt_client_tls_write+0x94>)
   213b8:	4811      	ldr	r0, [pc, #68]	; (21400 <mqtt_client_tls_write+0x90>)
   213ba:	237f      	movs	r3, #127	; 0x7f
   213bc:	462a      	mov	r2, r5
   213be:	f01d fab5 	bl	3e92c <printk>
   213c2:	217f      	movs	r1, #127	; 0x7f
   213c4:	4628      	mov	r0, r5
   213c6:	f01d fabe 	bl	3e946 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   213ca:	4b0b      	ldr	r3, [pc, #44]	; (213f8 <mqtt_client_tls_write+0x88>)
   213cc:	4630      	mov	r0, r6
   213ce:	681b      	ldr	r3, [r3, #0]
   213d0:	465a      	mov	r2, fp
   213d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   213d4:	4651      	mov	r1, sl
   213d6:	469c      	mov	ip, r3
   213d8:	2300      	movs	r3, #0
   213da:	4666      	mov	r6, ip
   213dc:	47b0      	blx	r6
		if (ret < 0) {
   213de:	2800      	cmp	r0, #0
   213e0:	da05      	bge.n	213ee <mqtt_client_tls_write+0x7e>
			return -errno;
   213e2:	f01d fc96 	bl	3ed12 <__errno>
   213e6:	6800      	ldr	r0, [r0, #0]
   213e8:	4240      	negs	r0, r0
}
   213ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += ret;
   213ee:	4404      	add	r4, r0
   213f0:	e7c5      	b.n	2137e <mqtt_client_tls_write+0xe>
   213f2:	bf00      	nop
   213f4:	00044746 	.word	0x00044746
   213f8:	20023990 	.word	0x20023990
   213fc:	0004476f 	.word	0x0004476f
   21400:	00044643 	.word	0x00044643
   21404:	00045db8 	.word	0x00045db8

00021408 <mqtt_client_tls_read>:

int mqtt_client_tls_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			 bool shall_block)
{
   21408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   2140c:	4c18      	ldr	r4, [pc, #96]	; (21470 <mqtt_client_tls_read+0x68>)
	int flags = 0;
	int ret;

	if (!shall_block) {
		flags |= MSG_DONTWAIT;
   2140e:	2b00      	cmp	r3, #0
   21410:	6823      	ldr	r3, [r4, #0]
{
   21412:	460e      	mov	r6, r1
   21414:	4617      	mov	r7, r2
		flags |= MSG_DONTWAIT;
   21416:	bf14      	ite	ne
   21418:	f04f 0800 	movne.w	r8, #0
   2141c:	f04f 0840 	moveq.w	r8, #64	; 0x40
	}

	ret = recv(client->transport.tls.sock, data, buflen, flags);
   21420:	6a85      	ldr	r5, [r0, #40]	; 0x28
   21422:	b94b      	cbnz	r3, 21438 <mqtt_client_tls_read+0x30>
   21424:	4913      	ldr	r1, [pc, #76]	; (21474 <mqtt_client_tls_read+0x6c>)
   21426:	4814      	ldr	r0, [pc, #80]	; (21478 <mqtt_client_tls_read+0x70>)
   21428:	2369      	movs	r3, #105	; 0x69
   2142a:	4a14      	ldr	r2, [pc, #80]	; (2147c <mqtt_client_tls_read+0x74>)
   2142c:	f01d fa7e 	bl	3e92c <printk>
   21430:	2169      	movs	r1, #105	; 0x69
   21432:	4812      	ldr	r0, [pc, #72]	; (2147c <mqtt_client_tls_read+0x74>)
   21434:	f01d fa87 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   21438:	6823      	ldr	r3, [r4, #0]
   2143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2143c:	b94b      	cbnz	r3, 21452 <mqtt_client_tls_read+0x4a>
   2143e:	4910      	ldr	r1, [pc, #64]	; (21480 <mqtt_client_tls_read+0x78>)
   21440:	480d      	ldr	r0, [pc, #52]	; (21478 <mqtt_client_tls_read+0x70>)
   21442:	236a      	movs	r3, #106	; 0x6a
   21444:	4a0d      	ldr	r2, [pc, #52]	; (2147c <mqtt_client_tls_read+0x74>)
   21446:	f01d fa71 	bl	3e92c <printk>
   2144a:	216a      	movs	r1, #106	; 0x6a
   2144c:	480b      	ldr	r0, [pc, #44]	; (2147c <mqtt_client_tls_read+0x74>)
   2144e:	f01d fa7a 	bl	3e946 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   21452:	6823      	ldr	r3, [r4, #0]
   21454:	463a      	mov	r2, r7
   21456:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   21458:	4631      	mov	r1, r6
   2145a:	4643      	mov	r3, r8
   2145c:	4628      	mov	r0, r5
   2145e:	47a0      	blx	r4
	if (ret < 0) {
   21460:	2800      	cmp	r0, #0
   21462:	da03      	bge.n	2146c <mqtt_client_tls_read+0x64>
		return -errno;
   21464:	f01d fc55 	bl	3ed12 <__errno>
   21468:	6800      	ldr	r0, [r0, #0]
   2146a:	4240      	negs	r0, r0
	}

	return ret;
}
   2146c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21470:	20023990 	.word	0x20023990
   21474:	0004476f 	.word	0x0004476f
   21478:	00044643 	.word	0x00044643
   2147c:	00044746 	.word	0x00044746
   21480:	00045da7 	.word	0x00045da7

00021484 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   21484:	b570      	push	{r4, r5, r6, lr}
   21486:	4616      	mov	r6, r2
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   21488:	6884      	ldr	r4, [r0, #8]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   2148a:	460d      	mov	r5, r1
   2148c:	b961      	cbnz	r1, 214a8 <gpio_nrfx_manage_callback+0x24>
   2148e:	4922      	ldr	r1, [pc, #136]	; (21518 <gpio_nrfx_manage_callback+0x94>)
   21490:	231c      	movs	r3, #28
   21492:	4a22      	ldr	r2, [pc, #136]	; (2151c <gpio_nrfx_manage_callback+0x98>)
   21494:	4822      	ldr	r0, [pc, #136]	; (21520 <gpio_nrfx_manage_callback+0x9c>)
   21496:	f01d fa49 	bl	3e92c <printk>
   2149a:	4822      	ldr	r0, [pc, #136]	; (21524 <gpio_nrfx_manage_callback+0xa0>)
   2149c:	f01d fa46 	bl	3e92c <printk>
   214a0:	211c      	movs	r1, #28
   214a2:	481e      	ldr	r0, [pc, #120]	; (2151c <gpio_nrfx_manage_callback+0x98>)
   214a4:	f01d fa4f 	bl	3e946 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   214a8:	686b      	ldr	r3, [r5, #4]
   214aa:	b963      	cbnz	r3, 214c6 <gpio_nrfx_manage_callback+0x42>
   214ac:	491e      	ldr	r1, [pc, #120]	; (21528 <gpio_nrfx_manage_callback+0xa4>)
   214ae:	231d      	movs	r3, #29
   214b0:	4a1a      	ldr	r2, [pc, #104]	; (2151c <gpio_nrfx_manage_callback+0x98>)
   214b2:	481b      	ldr	r0, [pc, #108]	; (21520 <gpio_nrfx_manage_callback+0x9c>)
   214b4:	f01d fa3a 	bl	3e92c <printk>
   214b8:	481c      	ldr	r0, [pc, #112]	; (2152c <gpio_nrfx_manage_callback+0xa8>)
   214ba:	f01d fa37 	bl	3e92c <printk>
   214be:	211d      	movs	r1, #29
   214c0:	4816      	ldr	r0, [pc, #88]	; (2151c <gpio_nrfx_manage_callback+0x98>)
   214c2:	f01d fa40 	bl	3e946 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   214c6:	6823      	ldr	r3, [r4, #0]

	if (!sys_slist_is_empty(callbacks)) {
   214c8:	b15b      	cbz	r3, 214e2 <gpio_nrfx_manage_callback+0x5e>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   214ca:	2200      	movs	r2, #0
   214cc:	429d      	cmp	r5, r3
   214ce:	d113      	bne.n	214f8 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   214d0:	682b      	ldr	r3, [r5, #0]
   214d2:	b95a      	cbnz	r2, 214ec <gpio_nrfx_manage_callback+0x68>
   214d4:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   214d6:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   214d8:	4295      	cmp	r5, r2
   214da:	d100      	bne.n	214de <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   214dc:	6063      	str	r3, [r4, #4]
	parent->next = child;
   214de:	2300      	movs	r3, #0
   214e0:	602b      	str	r3, [r5, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   214e2:	b976      	cbnz	r6, 21502 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   214e4:	2000      	movs	r0, #0
				     callback, set);
}
   214e6:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   214e8:	460b      	mov	r3, r1
   214ea:	e7ef      	b.n	214cc <gpio_nrfx_manage_callback+0x48>
	parent->next = child;
   214ec:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   214ee:	6863      	ldr	r3, [r4, #4]
   214f0:	429d      	cmp	r5, r3
	list->tail = node;
   214f2:	bf08      	it	eq
   214f4:	6062      	streq	r2, [r4, #4]
   214f6:	e7f2      	b.n	214de <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   214f8:	6819      	ldr	r1, [r3, #0]
	return node->next;
   214fa:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   214fc:	2900      	cmp	r1, #0
   214fe:	d1f3      	bne.n	214e8 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   21500:	b13e      	cbz	r6, 21512 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   21502:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   21504:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   21506:	6860      	ldr	r0, [r4, #4]
	list->head = node;
   21508:	6025      	str	r5, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2150a:	2800      	cmp	r0, #0
   2150c:	d1ea      	bne.n	214e4 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   2150e:	6065      	str	r5, [r4, #4]
   21510:	e7e9      	b.n	214e6 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   21512:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   21516:	e7e6      	b.n	214e6 <gpio_nrfx_manage_callback+0x62>
   21518:	000461cb 	.word	0x000461cb
   2151c:	00045e6e 	.word	0x00045e6e
   21520:	00044643 	.word	0x00044643
   21524:	00045e94 	.word	0x00045e94
   21528:	00045ea3 	.word	0x00045ea3
   2152c:	00045eb5 	.word	0x00045eb5

00021530 <nrf_gpio_pin_port_decode.isra.8.part.9>:
 *
 * @param[in,out] p_pin Pointer to the absolute pin number overriden by the pin number that is relative to the port.
 *
 * @return Pointer to port register set.
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   21530:	b508      	push	{r3, lr}
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   21532:	4a03      	ldr	r2, [pc, #12]	; (21540 <nrf_gpio_pin_port_decode.isra.8.part.9+0x10>)
   21534:	4b03      	ldr	r3, [pc, #12]	; (21544 <nrf_gpio_pin_port_decode.isra.8.part.9+0x14>)
   21536:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   2153a:	4803      	ldr	r0, [pc, #12]	; (21548 <nrf_gpio_pin_port_decode.isra.8.part.9+0x18>)
   2153c:	f01a fc72 	bl	3be24 <__assert_func>
   21540:	00045e55 	.word	0x00045e55
   21544:	00045efd 	.word	0x00045efd
   21548:	00045f0b 	.word	0x00045f0b

0002154c <nrf_gpio_cfg_sense_set>:
   2154c:	281f      	cmp	r0, #31
        sense_config);
}


__STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t pin_number, nrf_gpio_pin_sense_t sense_config)
{
   2154e:	b508      	push	{r3, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   21550:	d901      	bls.n	21556 <nrf_gpio_cfg_sense_set+0xa>
   21552:	f7ff ffed 	bl	21530 <nrf_gpio_pin_port_decode.isra.8.part.9>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
   21556:	4b08      	ldr	r3, [pc, #32]	; (21578 <nrf_gpio_cfg_sense_set+0x2c>)
   21558:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2155c:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
   21560:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
   21564:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   21568:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   2156c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   21570:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   21574:	bd08      	pop	{r3, pc}
   21576:	bf00      	nop
   21578:	40842500 	.word	0x40842500

0002157c <gpiote_pin_int_cfg>:
{
   2157c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->config->config_info;
   21580:	6803      	ldr	r3, [r0, #0]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   21582:	f001 041f 	and.w	r4, r1, #31
   21586:	689b      	ldr	r3, [r3, #8]
{
   21588:	460d      	mov	r5, r1
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2158a:	791b      	ldrb	r3, [r3, #4]
    NRF_GPIOTE->INTENCLR = mask;
}

__STATIC_INLINE uint32_t nrf_gpiote_int_is_enabled(uint32_t mask)
{
    return (NRF_GPIOTE->INTENSET & mask);
   2158c:	4e4b      	ldr	r6, [pc, #300]	; (216bc <gpiote_pin_int_cfg+0x140>)
   2158e:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   21592:	2300      	movs	r3, #0
   21594:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
	struct gpio_nrfx_data *data = get_port_data(port);
   21598:	6887      	ldr	r7, [r0, #8]
   2159a:	b2d2      	uxtb	r2, r2
                              ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

__STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(uint32_t idx)
{
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2159c:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   215a0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   215a4:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(i) == abs_pin)
   215a8:	428c      	cmp	r4, r1
   215aa:	d16c      	bne.n	21686 <gpiote_pin_int_cfg+0x10a>
		    && (intenset & BIT(i))) {
   215ac:	fa22 f103 	lsr.w	r1, r2, r3
   215b0:	07c9      	lsls	r1, r1, #31
   215b2:	d568      	bpl.n	21686 <gpiote_pin_int_cfg+0x10a>
   NRF_GPIOTE->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   215b4:	009a      	lsls	r2, r3, #2
   215b6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   215ba:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   215be:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   215c2:	f021 0101 	bic.w	r1, r1, #1
   215c6:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(BIT(i));
   215ca:	2201      	movs	r2, #1
   215cc:	fa02 f303 	lsl.w	r3, r2, r3
    NRF_GPIOTE->INTENCLR = mask;
   215d0:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   215d4:	4620      	mov	r0, r4
   215d6:	2100      	movs	r1, #0
   215d8:	f7ff ffb8 	bl	2154c <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   215dc:	68b8      	ldr	r0, [r7, #8]
   215de:	40e8      	lsrs	r0, r5
   215e0:	f010 0001 	ands.w	r0, r0, #1
   215e4:	d04d      	beq.n	21682 <gpiote_pin_int_cfg+0x106>
   215e6:	68f8      	ldr	r0, [r7, #12]
   215e8:	40e8      	lsrs	r0, r5
   215ea:	f010 0001 	ands.w	r0, r0, #1
   215ee:	d048      	beq.n	21682 <gpiote_pin_int_cfg+0x106>
		if (data->trig_edge & BIT(pin)) {
   215f0:	6978      	ldr	r0, [r7, #20]
   215f2:	40e8      	lsrs	r0, r5
   215f4:	f010 0801 	ands.w	r8, r0, #1
   215f8:	d051      	beq.n	2169e <gpiote_pin_int_cfg+0x122>
			if (data->double_edge & BIT(pin)) {
   215fa:	69bb      	ldr	r3, [r7, #24]
   215fc:	40eb      	lsrs	r3, r5
   215fe:	07db      	lsls	r3, r3, #31
   21600:	d445      	bmi.n	2168e <gpiote_pin_int_cfg+0x112>
			} else if (((data->active_level & BIT(pin)) != 0U)
   21602:	693b      	ldr	r3, [r7, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   21604:	69fa      	ldr	r2, [r7, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   21606:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   21608:	fa22 f505 	lsr.w	r5, r2, r5
			} else if (((data->active_level & BIT(pin)) != 0U)
   2160c:	f003 0301 	and.w	r3, r3, #1
   21610:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   21614:	42ab      	cmp	r3, r5
   21616:	bf14      	ite	ne
   21618:	2501      	movne	r5, #1
   2161a:	2502      	moveq	r5, #2
   2161c:	2100      	movs	r1, #0
    NRF_GPIOTE->CONFIG[idx] = 0;
}

__STATIC_INLINE bool nrf_gpiote_te_is_enabled(uint32_t idx)
{
    return (NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   2161e:	f501 73a2 	add.w	r3, r1, #324	; 0x144
   21622:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(channel)) {
   21626:	f010 0003 	ands.w	r0, r0, #3
   2162a:	d132      	bne.n	21692 <gpiote_pin_int_cfg+0x116>
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   2162c:	008b      	lsls	r3, r1, #2
   2162e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21632:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   21636:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2163a:	0224      	lsls	r4, r4, #8
  NRF_GPIOTE->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   2163c:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   21640:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   21644:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21648:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   2164c:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   21650:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   21654:	4315      	orrs	r5, r2
			nrf_gpiote_events_t evt =
   21656:	f101 0240 	add.w	r2, r1, #64	; 0x40
   2165a:	0092      	lsls	r2, r2, #2
    return ((uint32_t)NRF_GPIOTE + event);
   2165c:	b292      	uxth	r2, r2
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   2165e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   21662:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  NRF_GPIOTE->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21666:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   2166a:	6010      	str	r0, [r2, #0]
   NRF_GPIOTE->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   2166c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   21670:	f042 0201 	orr.w	r2, r2, #1
   21674:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_enable(BIT(channel));
   21678:	2301      	movs	r3, #1
   2167a:	fa03 f101 	lsl.w	r1, r3, r1
    NRF_GPIOTE->INTENSET = mask;
   2167e:	f8c6 1304 	str.w	r1, [r6, #772]	; 0x304
}
   21682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   21686:	3301      	adds	r3, #1
   21688:	2b08      	cmp	r3, #8
   2168a:	d187      	bne.n	2159c <gpiote_pin_int_cfg+0x20>
   2168c:	e7a2      	b.n	215d4 <gpiote_pin_int_cfg+0x58>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   2168e:	2503      	movs	r5, #3
   21690:	e7c4      	b.n	2161c <gpiote_pin_int_cfg+0xa0>
   21692:	3101      	adds	r1, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   21694:	2908      	cmp	r1, #8
   21696:	d1c2      	bne.n	2161e <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
   21698:	f06f 0012 	mvn.w	r0, #18
   2169c:	e7f1      	b.n	21682 <gpiote_pin_int_cfg+0x106>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   2169e:	693b      	ldr	r3, [r7, #16]
   216a0:	69fa      	ldr	r2, [r7, #28]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   216a2:	4620      	mov	r0, r4
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   216a4:	4053      	eors	r3, r2
   216a6:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   216aa:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   216ae:	bf0c      	ite	eq
   216b0:	2103      	moveq	r1, #3
   216b2:	2102      	movne	r1, #2
   216b4:	f7ff ff4a 	bl	2154c <nrf_gpio_cfg_sense_set>
	int res = 0;
   216b8:	4640      	mov	r0, r8
   216ba:	e7e2      	b.n	21682 <gpiote_pin_int_cfg+0x106>
   216bc:	40031000 	.word	0x40031000

000216c0 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   216c0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   216c2:	4b09      	ldr	r3, [pc, #36]	; (216e8 <gpio_nrfx_init+0x28>)
   216c4:	781a      	ldrb	r2, [r3, #0]
   216c6:	b96a      	cbnz	r2, 216e4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   216c8:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   216ca:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   216cc:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   216ce:	2105      	movs	r1, #5
   216d0:	f7fe fae6 	bl	1fca0 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
   216d4:	2031      	movs	r0, #49	; 0x31
   216d6:	f7fe fad3 	bl	1fc80 <z_arch_irq_enable>
   216da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   216de:	4b03      	ldr	r3, [pc, #12]	; (216ec <gpio_nrfx_init+0x2c>)
   216e0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   216e4:	2000      	movs	r0, #0
   216e6:	bd08      	pop	{r3, pc}
   216e8:	2002a34f 	.word	0x2002a34f
   216ec:	40031000 	.word	0x40031000

000216f0 <gpio_nrfx_config>:
{
   216f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   216f4:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
   216f6:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   216f8:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
   216fc:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
   21700:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   21702:	d040      	beq.n	21786 <gpio_nrfx_config+0x96>
   21704:	dc09      	bgt.n	2171a <gpio_nrfx_config+0x2a>
   21706:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   2170a:	d03e      	beq.n	2178a <gpio_nrfx_config+0x9a>
   2170c:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
   21710:	d03d      	beq.n	2178e <gpio_nrfx_config+0x9e>
   21712:	b190      	cbz	r0, 2173a <gpio_nrfx_config+0x4a>
		return -EINVAL;
   21714:	f06f 0015 	mvn.w	r0, #21
   21718:	e032      	b.n	21780 <gpio_nrfx_config+0x90>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   2171a:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
   2171e:	d038      	beq.n	21792 <gpio_nrfx_config+0xa2>
   21720:	dc04      	bgt.n	2172c <gpio_nrfx_config+0x3c>
   21722:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
   21726:	d1f5      	bne.n	21714 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
   21728:	2003      	movs	r0, #3
   2172a:	e006      	b.n	2173a <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   2172c:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
   21730:	d031      	beq.n	21796 <gpio_nrfx_config+0xa6>
   21732:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
   21736:	d1ed      	bne.n	21714 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
   21738:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   2173a:	f406 7740 	and.w	r7, r6, #768	; 0x300
   2173e:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   21742:	d02a      	beq.n	2179a <gpio_nrfx_config+0xaa>
		pull = NRF_GPIO_PIN_NOPULL;
   21744:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
   21748:	4263      	negs	r3, r4
   2174a:	4163      	adcs	r3, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
   2174c:	2901      	cmp	r1, #1
		from_pin = pin;
   2174e:	bf19      	ittee	ne
   21750:	b2d4      	uxtbne	r4, r2
		to_pin   = pin;
   21752:	46a1      	movne	r9, r4
		to_pin   = 31U;
   21754:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   21758:	2400      	moveq	r4, #0
   2175a:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   2175e:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   21762:	ea4f 074c 	mov.w	r7, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   21766:	ea47 070c 	orr.w	r7, r7, ip
   2176a:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2176e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 21818 <gpio_nrfx_config+0x128>
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   21772:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   21776:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2177a:	45a1      	cmp	r9, r4
   2177c:	d20f      	bcs.n	2179e <gpio_nrfx_config+0xae>
	return 0;
   2177e:	2000      	movs	r0, #0
}
   21780:	b003      	add	sp, #12
   21782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
   21786:	2002      	movs	r0, #2
   21788:	e7d7      	b.n	2173a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
   2178a:	2001      	movs	r0, #1
   2178c:	e7d5      	b.n	2173a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
   2178e:	2004      	movs	r0, #4
   21790:	e7d3      	b.n	2173a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
   21792:	2005      	movs	r0, #5
   21794:	e7d1      	b.n	2173a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
   21796:	2006      	movs	r0, #6
   21798:	e7cf      	b.n	2173a <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
   2179a:	2303      	movs	r3, #3
   2179c:	e7d6      	b.n	2174c <gpio_nrfx_config+0x5c>
	return port->config->config_info;
   2179e:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   217a2:	6892      	ldr	r2, [r2, #8]
   217a4:	7911      	ldrb	r1, [r2, #4]
   217a6:	f004 021f 	and.w	r2, r4, #31
   217aa:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   217ae:	2a1f      	cmp	r2, #31
   217b0:	dd01      	ble.n	217b6 <gpio_nrfx_config+0xc6>
   217b2:	f7ff febd 	bl	21530 <nrf_gpio_pin_port_decode.isra.8.part.9>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   217b6:	3280      	adds	r2, #128	; 0x80
   217b8:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   217bc:	68a9      	ldr	r1, [r5, #8]
   217be:	fa0b f204 	lsl.w	r2, fp, r4
   217c2:	2b00      	cmp	r3, #0
   217c4:	d025      	beq.n	21812 <gpio_nrfx_config+0x122>
   217c6:	4311      	orrs	r1, r2
   217c8:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   217ca:	6969      	ldr	r1, [r5, #20]
   217cc:	06b0      	lsls	r0, r6, #26
   217ce:	bf4c      	ite	mi
   217d0:	4311      	orrmi	r1, r2
   217d2:	4391      	bicpl	r1, r2
   217d4:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
   217d6:	69a9      	ldr	r1, [r5, #24]
   217d8:	0670      	lsls	r0, r6, #25
   217da:	bf4c      	ite	mi
   217dc:	4311      	orrmi	r1, r2
   217de:	4391      	bicpl	r1, r2
   217e0:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
   217e2:	6929      	ldr	r1, [r5, #16]
   217e4:	0770      	lsls	r0, r6, #29
   217e6:	bf4c      	ite	mi
   217e8:	4311      	orrmi	r1, r2
   217ea:	4391      	bicpl	r1, r2
   217ec:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   217ee:	69e9      	ldr	r1, [r5, #28]
   217f0:	0630      	lsls	r0, r6, #24
   217f2:	bf4c      	ite	mi
   217f4:	430a      	orrmi	r2, r1
   217f6:	ea21 0202 	bicpl.w	r2, r1, r2
   217fa:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   217fc:	4621      	mov	r1, r4
   217fe:	4640      	mov	r0, r8
   21800:	9301      	str	r3, [sp, #4]
   21802:	f7ff febb 	bl	2157c <gpiote_pin_int_cfg>
		if (res != 0) {
   21806:	2800      	cmp	r0, #0
   21808:	d1ba      	bne.n	21780 <gpio_nrfx_config+0x90>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2180a:	3401      	adds	r4, #1
   2180c:	b2e4      	uxtb	r4, r4
   2180e:	9b01      	ldr	r3, [sp, #4]
   21810:	e7b3      	b.n	2177a <gpio_nrfx_config+0x8a>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   21812:	ea21 0102 	bic.w	r1, r1, r2
   21816:	e7d7      	b.n	217c8 <gpio_nrfx_config+0xd8>
   21818:	40842500 	.word	0x40842500

0002181c <gpiote_event_handler>:
{
   2181c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (*(uint32_t *)nrf_gpiote_event_addr_get(event) == 0x1UL) ? true : false;
   21820:	4b56      	ldr	r3, [pc, #344]	; (2197c <gpiote_event_handler+0x160>)
   21822:	681e      	ldr	r6, [r3, #0]
	if (port_event) {
   21824:	4698      	mov	r8, r3
   21826:	2e01      	cmp	r6, #1
   21828:	d15d      	bne.n	218e6 <gpiote_event_handler+0xca>
	u32_t bit = 1U << pin;
   2182a:	4637      	mov	r7, r6
	u32_t pin = 0U;
   2182c:	f04f 0a00 	mov.w	sl, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   21830:	4a53      	ldr	r2, [pc, #332]	; (21980 <gpiote_event_handler+0x164>)
   21832:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
   21834:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   21836:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
   21838:	f8d2 9008 	ldr.w	r9, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
   2183c:	e9d3 2502 	ldrd	r2, r5, [r3, #8]
   21840:	4015      	ands	r5, r2
	out &= ~data->trig_edge & ~data->double_edge;
   21842:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   21846:	430a      	orrs	r2, r1
   21848:	ea25 0502 	bic.w	r5, r5, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   2184c:	f8d9 2000 	ldr.w	r2, [r9]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   21850:	691b      	ldr	r3, [r3, #16]
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   21852:	6912      	ldr	r2, [r2, #16]
   21854:	405c      	eors	r4, r3
   21856:	4054      	eors	r4, r2
	u32_t out = pin_states & level_pins;
   21858:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   2185c:	bb95      	cbnz	r5, 218c4 <gpiote_event_handler+0xa8>
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   2185e:	f8c8 5000 	str.w	r5, [r8]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   21862:	2300      	movs	r3, #0
		if (nrf_gpiote_int_is_enabled(BIT(i)) &&
   21864:	2701      	movs	r7, #1
   21866:	469c      	mov	ip, r3
    return (NRF_GPIOTE->INTENSET & mask);
   21868:	4846      	ldr	r0, [pc, #280]	; (21984 <gpiote_event_handler+0x168>)
   2186a:	4d47      	ldr	r5, [pc, #284]	; (21988 <gpiote_event_handler+0x16c>)
   2186c:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   21870:	fa07 f103 	lsl.w	r1, r7, r3
   21874:	4211      	tst	r1, r2
   21876:	d00d      	beq.n	21894 <gpiote_event_handler+0x78>
   21878:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   2187c:	2a01      	cmp	r2, #1
   2187e:	d109      	bne.n	21894 <gpiote_event_handler+0x78>
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   21880:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   21884:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *(uint32_t *)nrf_gpiote_event_addr_get(event) = 0;
   21888:	f845 c023 	str.w	ip, [r5, r3, lsl #2]
    return ((NRF_GPIOTE->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2188c:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   21890:	408a      	lsls	r2, r1
   21892:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   21894:	3301      	adds	r3, #1
   21896:	2b08      	cmp	r3, #8
   21898:	d1e8      	bne.n	2186c <gpiote_event_handler+0x50>
	if (fired_triggers[0]) {
   2189a:	bb34      	cbnz	r4, 218ea <gpiote_event_handler+0xce>
	if (port_event) {
   2189c:	2e01      	cmp	r6, #1
   2189e:	d10f      	bne.n	218c0 <gpiote_event_handler+0xa4>
	u32_t pin = 0U;
   218a0:	f04f 0800 	mov.w	r8, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   218a4:	4b36      	ldr	r3, [pc, #216]	; (21980 <gpiote_event_handler+0x164>)
   218a6:	689d      	ldr	r5, [r3, #8]
	return port->config->config_info;
   218a8:	681b      	ldr	r3, [r3, #0]
   218aa:	689f      	ldr	r7, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   218ac:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
   218b0:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
   218b2:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
   218b6:	4313      	orrs	r3, r2
   218b8:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   218bc:	2c00      	cmp	r4, #0
   218be:	d142      	bne.n	21946 <gpiote_event_handler+0x12a>
}
   218c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (level_pins & bit) {
   218c4:	423d      	tst	r5, r7
   218c6:	d00a      	beq.n	218de <gpiote_event_handler+0xc2>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   218c8:	f899 3004 	ldrb.w	r3, [r9, #4]
   218cc:	f00a 001f 	and.w	r0, sl, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   218d0:	2100      	movs	r1, #0
   218d2:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   218d6:	f7ff fe39 	bl	2154c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   218da:	ea25 0507 	bic.w	r5, r5, r7
		++pin;
   218de:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
   218e2:	007f      	lsls	r7, r7, #1
   218e4:	e7ba      	b.n	2185c <gpiote_event_handler+0x40>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   218e6:	2400      	movs	r4, #0
   218e8:	e7bb      	b.n	21862 <gpiote_event_handler+0x46>
	struct gpio_nrfx_data *data = get_port_data(port);
   218ea:	4b25      	ldr	r3, [pc, #148]	; (21980 <gpiote_event_handler+0x164>)
   218ec:	f8d3 9008 	ldr.w	r9, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   218f0:	f8d9 5000 	ldr.w	r5, [r9]
   218f4:	2d00      	cmp	r5, #0
   218f6:	d0d1      	beq.n	2189c <gpiote_event_handler+0x80>
			cb->handler(port, cb, pins);
   218f8:	4698      	mov	r8, r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   218fa:	682f      	ldr	r7, [r5, #0]
			__ASSERT(cb->handler, "No callback handler!");
   218fc:	f8df a094 	ldr.w	sl, [pc, #148]	; 21994 <gpiote_event_handler+0x178>
   21900:	f8df b094 	ldr.w	fp, [pc, #148]	; 21998 <gpiote_event_handler+0x17c>
		if ((cb->pin_mask & pins) & data->int_en) {
   21904:	f8d9 300c 	ldr.w	r3, [r9, #12]
   21908:	68aa      	ldr	r2, [r5, #8]
   2190a:	4023      	ands	r3, r4
   2190c:	4213      	tst	r3, r2
   2190e:	d015      	beq.n	2193c <gpiote_event_handler+0x120>
			__ASSERT(cb->handler, "No callback handler!");
   21910:	686b      	ldr	r3, [r5, #4]
   21912:	b973      	cbnz	r3, 21932 <gpiote_event_handler+0x116>
   21914:	4659      	mov	r1, fp
   21916:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
   2191a:	4652      	mov	r2, sl
   2191c:	481b      	ldr	r0, [pc, #108]	; (2198c <gpiote_event_handler+0x170>)
   2191e:	f01d f805 	bl	3e92c <printk>
   21922:	481b      	ldr	r0, [pc, #108]	; (21990 <gpiote_event_handler+0x174>)
   21924:	f01d f802 	bl	3e92c <printk>
   21928:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
   2192c:	4650      	mov	r0, sl
   2192e:	f01d f80a 	bl	3e946 <assert_post_action>
			cb->handler(port, cb, pins);
   21932:	686b      	ldr	r3, [r5, #4]
   21934:	4622      	mov	r2, r4
   21936:	4629      	mov	r1, r5
   21938:	4640      	mov	r0, r8
   2193a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2193c:	2f00      	cmp	r7, #0
   2193e:	d0ad      	beq.n	2189c <gpiote_event_handler+0x80>
   21940:	463d      	mov	r5, r7
   21942:	683f      	ldr	r7, [r7, #0]
   21944:	e7de      	b.n	21904 <gpiote_event_handler+0xe8>
		if (level_pins & bit) {
   21946:	4226      	tst	r6, r4
   21948:	d013      	beq.n	21972 <gpiote_event_handler+0x156>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   2194a:	692b      	ldr	r3, [r5, #16]
   2194c:	69ea      	ldr	r2, [r5, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2194e:	f897 c004 	ldrb.w	ip, [r7, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   21952:	4053      	eors	r3, r2
   21954:	fa23 f308 	lsr.w	r3, r3, r8
		return NRF_GPIO_PIN_SENSE_HIGH;
   21958:	f013 0f01 	tst.w	r3, #1
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2195c:	f008 001f 	and.w	r0, r8, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   21960:	bf0c      	ite	eq
   21962:	2103      	moveq	r1, #3
   21964:	2102      	movne	r1, #2
   21966:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
   2196a:	f7ff fdef 	bl	2154c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   2196e:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   21972:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
   21976:	0076      	lsls	r6, r6, #1
   21978:	e7a0      	b.n	218bc <gpiote_event_handler+0xa0>
   2197a:	bf00      	nop
   2197c:	4003117c 	.word	0x4003117c
   21980:	2003152c 	.word	0x2003152c
   21984:	40031000 	.word	0x40031000
   21988:	40031100 	.word	0x40031100
   2198c:	00044643 	.word	0x00044643
   21990:	00045eb5 	.word	0x00045eb5
   21994:	00045ecc 	.word	0x00045ecc
   21998:	00045ef1 	.word	0x00045ef1

0002199c <flash_nrf_write_protection>:
}

static int flash_nrf_write_protection(struct device *dev, bool enable)
{
	/* virtual write-erase protection */
	write_protect = enable;
   2199c:	4b01      	ldr	r3, [pc, #4]	; (219a4 <flash_nrf_write_protection+0x8>)

	return 0;
}
   2199e:	2000      	movs	r0, #0
	write_protect = enable;
   219a0:	7019      	strb	r1, [r3, #0]
}
   219a2:	4770      	bx	lr
   219a4:	2002a350 	.word	0x2002a350

000219a8 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   219a8:	4b02      	ldr	r3, [pc, #8]	; (219b4 <flash_nrf_pages_layout+0xc>)
   219aa:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   219ac:	2301      	movs	r3, #1
   219ae:	6013      	str	r3, [r2, #0]
}
   219b0:	4770      	bx	lr
   219b2:	bf00      	nop
   219b4:	200239f4 	.word	0x200239f4

000219b8 <flash_nrf_erase>:
{
   219b8:	b570      	push	{r4, r5, r6, lr}
   219ba:	460d      	mov	r5, r1
   219bc:	4614      	mov	r4, r2
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   219be:	f01f f81d 	bl	409fc <nrfx_nvmc_flash_page_size_get>
	if (write_protect) {
   219c2:	4b17      	ldr	r3, [pc, #92]	; (21a20 <flash_nrf_erase+0x68>)
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   219c4:	4606      	mov	r6, r0
	if (write_protect) {
   219c6:	781b      	ldrb	r3, [r3, #0]
   219c8:	bb1b      	cbnz	r3, 21a12 <flash_nrf_erase+0x5a>
	if (is_regular_addr_valid(addr, size)) {
   219ca:	4621      	mov	r1, r4
   219cc:	4628      	mov	r0, r5
   219ce:	f01d ff14 	bl	3f7fa <is_regular_addr_valid>
   219d2:	b308      	cbz	r0, 21a18 <flash_nrf_erase+0x60>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   219d4:	fbb5 f3f6 	udiv	r3, r5, r6
   219d8:	fb06 5313 	mls	r3, r6, r3, r5
   219dc:	b9e3      	cbnz	r3, 21a18 <flash_nrf_erase+0x60>
   219de:	fbb4 f0f6 	udiv	r0, r4, r6
   219e2:	fb06 4010 	mls	r0, r6, r0, r4
   219e6:	b9b8      	cbnz	r0, 21a18 <flash_nrf_erase+0x60>
		if (!n_pages) {
   219e8:	42a6      	cmp	r6, r4
   219ea:	d811      	bhi.n	21a10 <flash_nrf_erase+0x58>
	return z_impl_k_sem_take(sem, timeout);
   219ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   219f0:	480c      	ldr	r0, [pc, #48]	; (21a24 <flash_nrf_erase+0x6c>)
   219f2:	f018 fd25 	bl	3a440 <z_impl_k_sem_take>

#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

static int erase_op(void *context)
{
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   219f6:	f01f f801 	bl	409fc <nrfx_nvmc_flash_page_size_get>
   219fa:	4606      	mov	r6, r0
		return FLASH_OP_DONE;
	}
#endif

	do {
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   219fc:	4628      	mov	r0, r5
   219fe:	f016 fb95 	bl	3812c <nrfx_nvmc_page_erase>
				break;
			}
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	} while (e_ctx->len > 0);
   21a02:	1ba4      	subs	r4, r4, r6
   21a04:	4435      	add	r5, r6
   21a06:	d1f9      	bne.n	219fc <flash_nrf_erase+0x44>
	z_impl_k_sem_give(sem);
   21a08:	4806      	ldr	r0, [pc, #24]	; (21a24 <flash_nrf_erase+0x6c>)
   21a0a:	f018 fcd1 	bl	3a3b0 <z_impl_k_sem_give>
	return ret;
   21a0e:	4620      	mov	r0, r4
}
   21a10:	bd70      	pop	{r4, r5, r6, pc}
		return -EACCES;
   21a12:	f06f 000c 	mvn.w	r0, #12
   21a16:	e7fb      	b.n	21a10 <flash_nrf_erase+0x58>
		return -EINVAL;
   21a18:	f06f 0015 	mvn.w	r0, #21
   21a1c:	e7f8      	b.n	21a10 <flash_nrf_erase+0x58>
   21a1e:	bf00      	nop
   21a20:	2002a350 	.word	0x2002a350
   21a24:	200239fc 	.word	0x200239fc

00021a28 <nrf_flash_init>:
{
   21a28:	b510      	push	{r4, lr}
	z_impl_k_sem_init(sem, initial_count, limit);
   21a2a:	2201      	movs	r2, #1
   21a2c:	4807      	ldr	r0, [pc, #28]	; (21a4c <nrf_flash_init+0x24>)
   21a2e:	4611      	mov	r1, r2
   21a30:	f018 fc88 	bl	3a344 <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   21a34:	f01e ffe5 	bl	40a02 <nrfx_nvmc_flash_page_count_get>
   21a38:	4c05      	ldr	r4, [pc, #20]	; (21a50 <nrf_flash_init+0x28>)
   21a3a:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   21a3c:	f01e ffde 	bl	409fc <nrfx_nvmc_flash_page_size_get>
	write_protect = true;
   21a40:	2201      	movs	r2, #1
   21a42:	4b04      	ldr	r3, [pc, #16]	; (21a54 <nrf_flash_init+0x2c>)
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   21a44:	6060      	str	r0, [r4, #4]
	write_protect = true;
   21a46:	701a      	strb	r2, [r3, #0]
}
   21a48:	2000      	movs	r0, #0
   21a4a:	bd10      	pop	{r4, pc}
   21a4c:	200239fc 	.word	0x200239fc
   21a50:	200239f4 	.word	0x200239f4
   21a54:	2002a350 	.word	0x2002a350

00021a58 <flash_nrf_write>:
{
   21a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21a5c:	461c      	mov	r4, r3
	if (write_protect) {
   21a5e:	4b24      	ldr	r3, [pc, #144]	; (21af0 <flash_nrf_write+0x98>)
{
   21a60:	460e      	mov	r6, r1
	if (write_protect) {
   21a62:	781b      	ldrb	r3, [r3, #0]
{
   21a64:	4615      	mov	r5, r2
	if (write_protect) {
   21a66:	bbdb      	cbnz	r3, 21ae0 <flash_nrf_write+0x88>
	return is_regular_addr_valid(addr, len) ||
   21a68:	4621      	mov	r1, r4
   21a6a:	4630      	mov	r0, r6
   21a6c:	f01d fec5 	bl	3f7fa <is_regular_addr_valid>
	if (!is_addr_valid(addr, len)) {
   21a70:	b3c8      	cbz	r0, 21ae6 <flash_nrf_write+0x8e>
	if (!len) {
   21a72:	b3dc      	cbz	r4, 21aec <flash_nrf_write+0x94>
	return z_impl_k_sem_take(sem, timeout);
   21a74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21a78:	481e      	ldr	r0, [pc, #120]	; (21af4 <flash_nrf_write+0x9c>)
   21a7a:	f018 fce1 	bl	3a440 <z_impl_k_sem_take>
		ticks_begin = ticker_ticks_now_get();
	}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	/* If not aligned, write unaligned beginning */
	if (!is_aligned_32(w_ctx->flash_addr)) {
   21a7e:	f016 0703 	ands.w	r7, r6, #3
   21a82:	d00c      	beq.n	21a9e <flash_nrf_write+0x46>
		count = sizeof(u32_t) - (w_ctx->flash_addr & 0x3);
   21a84:	f1c7 0704 	rsb	r7, r7, #4
		if (count > w_ctx->len) {
   21a88:	42a7      	cmp	r7, r4
   21a8a:	bf28      	it	cs
   21a8c:	4627      	movcs	r7, r4
			count = w_ctx->len;
		}

		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
   21a8e:	4629      	mov	r1, r5
   21a90:	4630      	mov	r0, r6
   21a92:	463a      	mov	r2, r7
   21a94:	f016 fb9c 	bl	381d0 <nrfx_nvmc_bytes_write>
	w_ctx->flash_addr += shift;
   21a98:	443e      	add	r6, r7
	w_ctx->data_addr += shift;
   21a9a:	443d      	add	r5, r7
	w_ctx->len -= shift;
   21a9c:	1be4      	subs	r4, r4, r7
   21a9e:	f024 0803 	bic.w	r8, r4, #3
{
   21aa2:	2700      	movs	r7, #0
   21aa4:	e003      	b.n	21aae <flash_nrf_write+0x56>
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	}

	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(u32_t)) {
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   21aa6:	59e9      	ldr	r1, [r5, r7]
   21aa8:	f016 fb6c 	bl	38184 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   21aac:	3704      	adds	r7, #4
	while (w_ctx->len >= sizeof(u32_t)) {
   21aae:	45b8      	cmp	r8, r7
   21ab0:	eb06 0007 	add.w	r0, r6, r7
   21ab4:	d1f7      	bne.n	21aa6 <flash_nrf_write+0x4e>
   21ab6:	f06f 0303 	mvn.w	r3, #3
   21aba:	08a2      	lsrs	r2, r4, #2
   21abc:	fb03 4202 	mla	r2, r3, r2, r4
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	}

	/* Write remaining unaligned data */
	if (w_ctx->len) {
   21ac0:	eb05 0108 	add.w	r1, r5, r8
   21ac4:	b10a      	cbz	r2, 21aca <flash_nrf_write+0x72>
		nrfx_nvmc_bytes_write(w_ctx->flash_addr,
   21ac6:	f016 fb83 	bl	381d0 <nrfx_nvmc_bytes_write>

#ifndef SUPPRESS_INLINE_IMPLEMENTATION

__STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   21aca:	4a0b      	ldr	r2, [pc, #44]	; (21af8 <flash_nrf_write+0xa0>)
   21acc:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   21ad0:	07db      	lsls	r3, r3, #31
   21ad2:	d5fb      	bpl.n	21acc <flash_nrf_write+0x74>
	z_impl_k_sem_give(sem);
   21ad4:	4807      	ldr	r0, [pc, #28]	; (21af4 <flash_nrf_write+0x9c>)
   21ad6:	f018 fc6b 	bl	3a3b0 <z_impl_k_sem_give>
   21ada:	2000      	movs	r0, #0
}
   21adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EACCES;
   21ae0:	f06f 000c 	mvn.w	r0, #12
   21ae4:	e7fa      	b.n	21adc <flash_nrf_write+0x84>
		return -EINVAL;
   21ae6:	f06f 0015 	mvn.w	r0, #21
   21aea:	e7f7      	b.n	21adc <flash_nrf_write+0x84>
		return 0;
   21aec:	4620      	mov	r0, r4
   21aee:	e7f5      	b.n	21adc <flash_nrf_write+0x84>
   21af0:	2002a350 	.word	0x2002a350
   21af4:	200239fc 	.word	0x200239fc
   21af8:	40039000 	.word	0x40039000

00021afc <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   21afc:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_hwfc_t hwfc;
#ifdef UARTE_CONFIG_STOP_Two
	bool two_stop_bits = false;
#endif

	switch (cfg->stop_bits) {
   21afe:	794b      	ldrb	r3, [r1, #5]
   21b00:	2b01      	cmp	r3, #1
   21b02:	d029      	beq.n	21b58 <uarte_nrfx_configure+0x5c>
   21b04:	2b03      	cmp	r3, #3
   21b06:	d124      	bne.n	21b52 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		break;
#ifdef UARTE_CONFIG_STOP_Two
	case UART_CFG_STOP_BITS_2:
		two_stop_bits = true;
   21b08:	2601      	movs	r6, #1
#endif
	default:
		return -ENOTSUP;
	}

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   21b0a:	798b      	ldrb	r3, [r1, #6]
   21b0c:	2b03      	cmp	r3, #3
   21b0e:	d120      	bne.n	21b52 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   21b10:	79cd      	ldrb	r5, [r1, #7]
   21b12:	b12d      	cbz	r5, 21b20 <uarte_nrfx_configure+0x24>
   21b14:	2d01      	cmp	r5, #1
   21b16:	d11c      	bne.n	21b52 <uarte_nrfx_configure+0x56>
	return dev->config->config_info;
   21b18:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   21b1a:	689b      	ldr	r3, [r3, #8]
   21b1c:	791b      	ldrb	r3, [r3, #4]
   21b1e:	b1c3      	cbz	r3, 21b52 <uarte_nrfx_configure+0x56>
		break;
	default:
		return -ENOTSUP;
	}

	switch (cfg->parity) {
   21b20:	790a      	ldrb	r2, [r1, #4]
   21b22:	b112      	cbz	r2, 21b2a <uarte_nrfx_configure+0x2e>
   21b24:	2a02      	cmp	r2, #2
   21b26:	d114      	bne.n	21b52 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		parity = NRF_UARTE_PARITY_INCLUDED;
   21b28:	220e      	movs	r2, #14
	switch (baudrate) {
   21b2a:	f647 2712 	movw	r7, #31250	; 0x7a12
	return dev->config->config_info;
   21b2e:	6804      	ldr	r4, [r0, #0]
		break;
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   21b30:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   21b32:	68a4      	ldr	r4, [r4, #8]
	switch (baudrate) {
   21b34:	42bb      	cmp	r3, r7
	return config->uarte_regs;
   21b36:	6824      	ldr	r4, [r4, #0]
	switch (baudrate) {
   21b38:	d068      	beq.n	21c0c <uarte_nrfx_configure+0x110>
   21b3a:	d829      	bhi.n	21b90 <uarte_nrfx_configure+0x94>
   21b3c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   21b40:	d067      	beq.n	21c12 <uarte_nrfx_configure+0x116>
   21b42:	d814      	bhi.n	21b6e <uarte_nrfx_configure+0x72>
   21b44:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   21b48:	d065      	beq.n	21c16 <uarte_nrfx_configure+0x11a>
   21b4a:	d807      	bhi.n	21b5c <uarte_nrfx_configure+0x60>
   21b4c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   21b50:	d064      	beq.n	21c1c <uarte_nrfx_configure+0x120>
		return -ENOTSUP;
   21b52:	f06f 0085 	mvn.w	r0, #133	; 0x85
   21b56:	e058      	b.n	21c0a <uarte_nrfx_configure+0x10e>
	bool two_stop_bits = false;
   21b58:	2600      	movs	r6, #0
   21b5a:	e7d6      	b.n	21b0a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   21b5c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   21b60:	d05f      	beq.n	21c22 <uarte_nrfx_configure+0x126>
   21b62:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   21b66:	d1f4      	bne.n	21b52 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   21b68:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   21b6c:	e03c      	b.n	21be8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   21b6e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   21b72:	d059      	beq.n	21c28 <uarte_nrfx_configure+0x12c>
   21b74:	d804      	bhi.n	21b80 <uarte_nrfx_configure+0x84>
   21b76:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   21b7a:	d1ea      	bne.n	21b52 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   21b7c:	4b35      	ldr	r3, [pc, #212]	; (21c54 <uarte_nrfx_configure+0x158>)
   21b7e:	e033      	b.n	21be8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   21b80:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   21b84:	d052      	beq.n	21c2c <uarte_nrfx_configure+0x130>
   21b86:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   21b8a:	d1e2      	bne.n	21b52 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   21b8c:	4b32      	ldr	r3, [pc, #200]	; (21c58 <uarte_nrfx_configure+0x15c>)
   21b8e:	e02b      	b.n	21be8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   21b90:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   21b94:	d04c      	beq.n	21c30 <uarte_nrfx_configure+0x134>
   21b96:	d812      	bhi.n	21bbe <uarte_nrfx_configure+0xc2>
   21b98:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   21b9c:	42bb      	cmp	r3, r7
   21b9e:	d04a      	beq.n	21c36 <uarte_nrfx_configure+0x13a>
   21ba0:	d805      	bhi.n	21bae <uarte_nrfx_configure+0xb2>
   21ba2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   21ba6:	d1d4      	bne.n	21b52 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   21ba8:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   21bac:	e01c      	b.n	21be8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   21bae:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   21bb2:	d043      	beq.n	21c3c <uarte_nrfx_configure+0x140>
   21bb4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   21bb8:	d1cb      	bne.n	21b52 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   21bba:	4b28      	ldr	r3, [pc, #160]	; (21c5c <uarte_nrfx_configure+0x160>)
   21bbc:	e014      	b.n	21be8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   21bbe:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   21bc2:	d03e      	beq.n	21c42 <uarte_nrfx_configure+0x146>
   21bc4:	d808      	bhi.n	21bd8 <uarte_nrfx_configure+0xdc>
   21bc6:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   21bca:	d03d      	beq.n	21c48 <uarte_nrfx_configure+0x14c>
   21bcc:	4f24      	ldr	r7, [pc, #144]	; (21c60 <uarte_nrfx_configure+0x164>)
   21bce:	42bb      	cmp	r3, r7
   21bd0:	d1bf      	bne.n	21b52 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   21bd2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   21bd6:	e007      	b.n	21be8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   21bd8:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   21bdc:	d037      	beq.n	21c4e <uarte_nrfx_configure+0x152>
   21bde:	4f21      	ldr	r7, [pc, #132]	; (21c64 <uarte_nrfx_configure+0x168>)
   21be0:	42bb      	cmp	r3, r7
   21be2:	d1b6      	bne.n	21b52 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   21be4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000

__STATIC_INLINE void nrf_uarte_configure(NRF_UARTE_Type   * p_reg,
                                         nrf_uarte_parity_t parity,
                                         nrf_uarte_hwfc_t   hwfc)
{
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   21be8:	432a      	orrs	r2, r5
}

__STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type   * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   21bea:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)parity | (uint32_t)hwfc;
   21bee:	f8c4 256c 	str.w	r2, [r4, #1388]	; 0x56c
	}

	nrf_uarte_configure(get_uarte_instance(dev), parity, hwfc);

#ifdef UARTE_CONFIG_STOP_Two
	if (two_stop_bits) {
   21bf2:	b12e      	cbz	r6, 21c00 <uarte_nrfx_configure+0x104>
		/* TODO Change this to nrfx HAL function when available */
		get_uarte_instance(dev)->CONFIG |=
   21bf4:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
   21bf8:	f043 0310 	orr.w	r3, r3, #16
   21bfc:	f8c4 356c 	str.w	r3, [r4, #1388]	; 0x56c
			UARTE_CONFIG_STOP_Two << UARTE_CONFIG_STOP_Pos;
	}
#endif
	get_dev_data(dev)->uart_config = *cfg;
   21c00:	6883      	ldr	r3, [r0, #8]
   21c02:	c903      	ldmia	r1, {r0, r1}
   21c04:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   21c08:	2000      	movs	r0, #0
}
   21c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   21c0c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   21c10:	e7ea      	b.n	21be8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   21c12:	4b15      	ldr	r3, [pc, #84]	; (21c68 <uarte_nrfx_configure+0x16c>)
   21c14:	e7e8      	b.n	21be8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00027000;
   21c16:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   21c1a:	e7e5      	b.n	21be8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
   21c1c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   21c20:	e7e2      	b.n	21be8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   21c22:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   21c26:	e7df      	b.n	21be8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   21c28:	4b10      	ldr	r3, [pc, #64]	; (21c6c <uarte_nrfx_configure+0x170>)
   21c2a:	e7dd      	b.n	21be8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   21c2c:	4b10      	ldr	r3, [pc, #64]	; (21c70 <uarte_nrfx_configure+0x174>)
   21c2e:	e7db      	b.n	21be8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   21c30:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   21c34:	e7d8      	b.n	21be8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   21c36:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   21c3a:	e7d5      	b.n	21be8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   21c3c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   21c40:	e7d2      	b.n	21be8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   21c42:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   21c46:	e7cf      	b.n	21be8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   21c48:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   21c4c:	e7cc      	b.n	21be8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   21c4e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   21c52:	e7c9      	b.n	21be8 <uarte_nrfx_configure+0xec>
   21c54:	00275000 	.word	0x00275000
   21c58:	0075c000 	.word	0x0075c000
   21c5c:	013a9000 	.word	0x013a9000
   21c60:	0003d090 	.word	0x0003d090
   21c64:	000f4240 	.word	0x000f4240
   21c68:	0013b000 	.word	0x0013b000
   21c6c:	003af000 	.word	0x003af000
   21c70:	004ea000 	.word	0x004ea000

00021c74 <uarte_0_init>:
	#if defined(DT_NORDIC_NRF_UARTE_UART_0_RTS_PIN) && \
	    defined(DT_NORDIC_NRF_UARTE_UART_0_CTS_PIN)
		#define UARTE_0_CONFIG_RTS_CTS 1
	#endif

	UART_NRF_UARTE_DEVICE(0);
   21c74:	b570      	push	{r4, r5, r6, lr}
   21c76:	4606      	mov	r6, r0
   21c78:	2200      	movs	r2, #0
   21c7a:	2101      	movs	r1, #1
   21c7c:	2008      	movs	r0, #8
   21c7e:	f7fe f80f 	bl	1fca0 <z_arm_irq_priority_set>
   21c82:	2008      	movs	r0, #8
   21c84:	f7fd fffc 	bl	1fc80 <z_arch_irq_enable>
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   21c88:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	return dev->config->config_info;
   21c8c:	6833      	ldr	r3, [r6, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   21c8e:	68b5      	ldr	r5, [r6, #8]
	return config->uarte_regs;
   21c90:	689b      	ldr	r3, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   21c92:	2103      	movs	r1, #3
   21c94:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
   21c96:	4b1a      	ldr	r3, [pc, #104]	; (21d00 <uarte_0_init+0x8c>)
    p_reg->PSEL.TXD = pseltxd;
   21c98:	201d      	movs	r0, #29
   21c9a:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   21c9c:	2200      	movs	r2, #0
   21c9e:	f8c3 1274 	str.w	r1, [r3, #628]	; 0x274
   21ca2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
   21ca6:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   21caa:	201c      	movs	r0, #28
   21cac:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->OUTSET = set_mask;
   21cb0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   21cb4:	6098      	str	r0, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   21cb6:	f8c3 126c 	str.w	r1, [r3, #620]	; 0x26c
   21cba:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    p_reg->PSEL.RTS = pselrts;
   21cbe:	231b      	movs	r3, #27
   21cc0:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   21cc4:	231a      	movs	r3, #26
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   21cc6:	4629      	mov	r1, r5
   21cc8:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   21ccc:	4630      	mov	r0, r6
   21cce:	f7ff ff15 	bl	21afc <uarte_nrfx_configure>
	if (err) {
   21cd2:	b9a0      	cbnz	r0, 21cfe <uarte_0_init+0x8a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   21cd4:	2308      	movs	r3, #8
   21cd6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   21cda:	f105 030c 	add.w	r3, r5, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21cde:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

__STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                             uint8_t *        p_buffer,
                                             size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   21ce2:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   21ce6:	2301      	movs	r3, #1
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   21ce8:	68aa      	ldr	r2, [r5, #8]
   21cea:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   21cee:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21cf0:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   21cf2:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   21cf6:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21cfa:	60a3      	str	r3, [r4, #8]
   21cfc:	60e3      	str	r3, [r4, #12]
	UART_NRF_UARTE_DEVICE(0);
   21cfe:	bd70      	pop	{r4, r5, r6, pc}
   21d00:	40842500 	.word	0x40842500

00021d04 <entropy_cc310_rng_get_entropy>:
#include "nrf_cc310_platform_entropy.h"
#endif

static int entropy_cc310_rng_get_entropy(struct device *dev, u8_t *buffer,
					 u16_t length)
{
   21d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21d06:	460d      	mov	r5, r1
   21d08:	4614      	mov	r4, r2
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
   21d0a:	b948      	cbnz	r0, 21d20 <entropy_cc310_rng_get_entropy+0x1c>
   21d0c:	4910      	ldr	r1, [pc, #64]	; (21d50 <entropy_cc310_rng_get_entropy+0x4c>)
   21d0e:	4811      	ldr	r0, [pc, #68]	; (21d54 <entropy_cc310_rng_get_entropy+0x50>)
   21d10:	231e      	movs	r3, #30
   21d12:	4a11      	ldr	r2, [pc, #68]	; (21d58 <entropy_cc310_rng_get_entropy+0x54>)
   21d14:	f01c fe0a 	bl	3e92c <printk>
   21d18:	211e      	movs	r1, #30
   21d1a:	480f      	ldr	r0, [pc, #60]	; (21d58 <entropy_cc310_rng_get_entropy+0x54>)
   21d1c:	f01c fe13 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   21d20:	b94d      	cbnz	r5, 21d36 <entropy_cc310_rng_get_entropy+0x32>
   21d22:	490e      	ldr	r1, [pc, #56]	; (21d5c <entropy_cc310_rng_get_entropy+0x58>)
   21d24:	480b      	ldr	r0, [pc, #44]	; (21d54 <entropy_cc310_rng_get_entropy+0x50>)
   21d26:	231f      	movs	r3, #31
   21d28:	4a0b      	ldr	r2, [pc, #44]	; (21d58 <entropy_cc310_rng_get_entropy+0x54>)
   21d2a:	f01c fdff 	bl	3e92c <printk>
   21d2e:	211f      	movs	r1, #31
   21d30:	4809      	ldr	r0, [pc, #36]	; (21d58 <entropy_cc310_rng_get_entropy+0x54>)
   21d32:	f01c fe08 	bl	3e946 <assert_post_action>

#if defined(CONFIG_SPM)
	/** This is a call from a non-secure app that enables secure services,
	 *  in which case entropy is gathered by calling through SPM
	 */
	res = spm_request_random_number(buffer, length, &olen);
   21d36:	aa01      	add	r2, sp, #4
   21d38:	4621      	mov	r1, r4
   21d3a:	4628      	mov	r0, r5
   21d3c:	f7f6 f958 	bl	17ff0 <spm_request_random_number>
	if (olen != length) {
   21d40:	9b01      	ldr	r3, [sp, #4]
		return -EINVAL;
   21d42:	429c      	cmp	r4, r3
		return -EINVAL;
	}
#endif

	return res;
}
   21d44:	bf18      	it	ne
   21d46:	f06f 0015 	mvnne.w	r0, #21
   21d4a:	b003      	add	sp, #12
   21d4c:	bd30      	pop	{r4, r5, pc}
   21d4e:	bf00      	nop
   21d50:	00045fbb 	.word	0x00045fbb
   21d54:	00044643 	.word	0x00044643
   21d58:	00045f70 	.word	0x00045f70
   21d5c:	00045fce 	.word	0x00045fce

00021d60 <parse_string>:
{
   21d60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   21d64:	680a      	ldr	r2, [r1, #0]
   21d66:	688b      	ldr	r3, [r1, #8]
{
   21d68:	4680      	mov	r8, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   21d6a:	1c5d      	adds	r5, r3, #1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   21d6c:	18d0      	adds	r0, r2, r3
   21d6e:	5cd3      	ldrb	r3, [r2, r3]
{
   21d70:	468a      	mov	sl, r1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   21d72:	2b22      	cmp	r3, #34	; 0x22
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   21d74:	4415      	add	r5, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
   21d76:	f040 80d6 	bne.w	21f26 <parse_string+0x1c6>
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   21d7a:	462f      	mov	r7, r5
        size_t skipped_bytes = 0;
   21d7c:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   21d7e:	684c      	ldr	r4, [r1, #4]
   21d80:	1ab9      	subs	r1, r7, r2
   21d82:	42a1      	cmp	r1, r4
   21d84:	f080 80cf 	bcs.w	21f26 <parse_string+0x1c6>
   21d88:	7839      	ldrb	r1, [r7, #0]
   21d8a:	2922      	cmp	r1, #34	; 0x22
   21d8c:	d10e      	bne.n	21dac <parse_string+0x4c>
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   21d8e:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
   21d92:	1a38      	subs	r0, r7, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   21d94:	f8da 2010 	ldr.w	r2, [sl, #16]
   21d98:	4418      	add	r0, r3
   21d9a:	4790      	blx	r2
        if (output == NULL)
   21d9c:	4683      	mov	fp, r0
   21d9e:	2800      	cmp	r0, #0
   21da0:	f000 80c1 	beq.w	21f26 <parse_string+0x1c6>
   21da4:	4604      	mov	r4, r0
                    *output_pointer++ = '\f';
   21da6:	f04f 090c 	mov.w	r9, #12
   21daa:	e00f      	b.n	21dcc <parse_string+0x6c>
            if (input_end[0] == '\\')
   21dac:	295c      	cmp	r1, #92	; 0x5c
   21dae:	d105      	bne.n	21dbc <parse_string+0x5c>
   21db0:	3701      	adds	r7, #1
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
   21db2:	1ab9      	subs	r1, r7, r2
   21db4:	428c      	cmp	r4, r1
   21db6:	f240 80b6 	bls.w	21f26 <parse_string+0x1c6>
                skipped_bytes++;
   21dba:	3301      	adds	r3, #1
            input_end++;
   21dbc:	3701      	adds	r7, #1
   21dbe:	e7df      	b.n	21d80 <parse_string+0x20>
        if (*input_pointer != '\\')
   21dc0:	782b      	ldrb	r3, [r5, #0]
   21dc2:	2b5c      	cmp	r3, #92	; 0x5c
   21dc4:	d012      	beq.n	21dec <parse_string+0x8c>
            *output_pointer++ = *input_pointer++;
   21dc6:	3501      	adds	r5, #1
   21dc8:	f804 3b01 	strb.w	r3, [r4], #1
    while (input_pointer < input_end)
   21dcc:	42bd      	cmp	r5, r7
   21dce:	d3f7      	bcc.n	21dc0 <parse_string+0x60>
    *output_pointer = '\0';
   21dd0:	2300      	movs	r3, #0
   21dd2:	7023      	strb	r3, [r4, #0]
    item->type = cJSON_String;
   21dd4:	2310      	movs	r3, #16
    return true;
   21dd6:	2001      	movs	r0, #1
    item->valuestring = (char*)output;
   21dd8:	e9c8 3b03 	strd	r3, fp, [r8, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
   21ddc:	f8da 3000 	ldr.w	r3, [sl]
   21de0:	1aff      	subs	r7, r7, r3
    input_buffer->offset++;
   21de2:	3701      	adds	r7, #1
   21de4:	f8ca 7008 	str.w	r7, [sl, #8]
}
   21de8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((input_end - input_pointer) < 1)
   21dec:	1b7a      	subs	r2, r7, r5
   21dee:	2a00      	cmp	r2, #0
   21df0:	dd08      	ble.n	21e04 <parse_string+0xa4>
            switch (input_pointer[1])
   21df2:	786b      	ldrb	r3, [r5, #1]
   21df4:	2b66      	cmp	r3, #102	; 0x66
   21df6:	d063      	beq.n	21ec0 <parse_string+0x160>
   21df8:	d816      	bhi.n	21e28 <parse_string+0xc8>
   21dfa:	2b2f      	cmp	r3, #47	; 0x2f
   21dfc:	d011      	beq.n	21e22 <parse_string+0xc2>
   21dfe:	d80b      	bhi.n	21e18 <parse_string+0xb8>
   21e00:	2b22      	cmp	r3, #34	; 0x22
   21e02:	d00e      	beq.n	21e22 <parse_string+0xc2>
        input_buffer->hooks.deallocate(output);
   21e04:	f8da 3014 	ldr.w	r3, [sl, #20]
   21e08:	4658      	mov	r0, fp
   21e0a:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
   21e0c:	f8da 0000 	ldr.w	r0, [sl]
   21e10:	1a28      	subs	r0, r5, r0
   21e12:	f8ca 0008 	str.w	r0, [sl, #8]
   21e16:	e089      	b.n	21f2c <parse_string+0x1cc>
            switch (input_pointer[1])
   21e18:	2b5c      	cmp	r3, #92	; 0x5c
   21e1a:	d002      	beq.n	21e22 <parse_string+0xc2>
   21e1c:	2b62      	cmp	r3, #98	; 0x62
   21e1e:	d1f1      	bne.n	21e04 <parse_string+0xa4>
                    *output_pointer++ = '\b';
   21e20:	2308      	movs	r3, #8
                    *output_pointer++ = input_pointer[1];
   21e22:	f804 3b01 	strb.w	r3, [r4], #1
                    break;
   21e26:	e04d      	b.n	21ec4 <parse_string+0x164>
            switch (input_pointer[1])
   21e28:	2b72      	cmp	r3, #114	; 0x72
   21e2a:	d04e      	beq.n	21eca <parse_string+0x16a>
   21e2c:	d803      	bhi.n	21e36 <parse_string+0xd6>
   21e2e:	2b6e      	cmp	r3, #110	; 0x6e
   21e30:	d1e8      	bne.n	21e04 <parse_string+0xa4>
                    *output_pointer++ = '\n';
   21e32:	230a      	movs	r3, #10
   21e34:	e7f5      	b.n	21e22 <parse_string+0xc2>
            switch (input_pointer[1])
   21e36:	2b74      	cmp	r3, #116	; 0x74
   21e38:	d04a      	beq.n	21ed0 <parse_string+0x170>
   21e3a:	2b75      	cmp	r3, #117	; 0x75
   21e3c:	d1e2      	bne.n	21e04 <parse_string+0xa4>
    if ((input_end - first_sequence) < 6)
   21e3e:	2a05      	cmp	r2, #5
   21e40:	dde0      	ble.n	21e04 <parse_string+0xa4>
    first_code = parse_hex4(first_sequence + 2);
   21e42:	1ca8      	adds	r0, r5, #2
   21e44:	f01d fdf8 	bl	3fa38 <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   21e48:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   21e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
   21e50:	4606      	mov	r6, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   21e52:	d3d7      	bcc.n	21e04 <parse_string+0xa4>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
   21e54:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
   21e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   21e5c:	d23b      	bcs.n	21ed6 <parse_string+0x176>
        const unsigned char *second_sequence = first_sequence + 6;
   21e5e:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
   21e60:	1afb      	subs	r3, r7, r3
   21e62:	2b05      	cmp	r3, #5
   21e64:	ddce      	ble.n	21e04 <parse_string+0xa4>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
   21e66:	79ab      	ldrb	r3, [r5, #6]
   21e68:	2b5c      	cmp	r3, #92	; 0x5c
   21e6a:	d1cb      	bne.n	21e04 <parse_string+0xa4>
   21e6c:	79eb      	ldrb	r3, [r5, #7]
   21e6e:	2b75      	cmp	r3, #117	; 0x75
   21e70:	d1c8      	bne.n	21e04 <parse_string+0xa4>
        second_code = parse_hex4(second_sequence + 2);
   21e72:	f105 0008 	add.w	r0, r5, #8
   21e76:	f01d fddf 	bl	3fa38 <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
   21e7a:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   21e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   21e82:	d2bf      	bcs.n	21e04 <parse_string+0xa4>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   21e84:	4b2a      	ldr	r3, [pc, #168]	; (21f30 <parse_string+0x1d0>)
   21e86:	f3c0 0009 	ubfx	r0, r0, #0, #10
   21e8a:	ea03 2686 	and.w	r6, r3, r6, lsl #10
        sequence_length = 12; /* \uXXXX\uXXXX */
   21e8e:	230c      	movs	r3, #12
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   21e90:	4306      	orrs	r6, r0
   21e92:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
        first_byte_mark = 0xF0; /* 11110000 */
   21e96:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
        utf8_length = 4;
   21e9a:	2104      	movs	r1, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   21e9c:	1e48      	subs	r0, r1, #1
   21e9e:	b240      	sxtb	r0, r0
   21ea0:	fa5f fe80 	uxtb.w	lr, r0
   21ea4:	4420      	add	r0, r4
   21ea6:	b2f2      	uxtb	r2, r6
   21ea8:	f1be 0f00 	cmp.w	lr, #0
   21eac:	d12f      	bne.n	21f0e <parse_string+0x1ae>
    if (utf8_length > 1)
   21eae:	2901      	cmp	r1, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
   21eb0:	bf14      	ite	ne
   21eb2:	ea4c 0202 	orrne.w	r2, ip, r2
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
   21eb6:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
   21eba:	7022      	strb	r2, [r4, #0]
    *output_pointer += utf8_length;
   21ebc:	440c      	add	r4, r1
                    if (sequence_length == 0)
   21ebe:	e002      	b.n	21ec6 <parse_string+0x166>
                    *output_pointer++ = '\f';
   21ec0:	f804 9b01 	strb.w	r9, [r4], #1
            unsigned char sequence_length = 2;
   21ec4:	2302      	movs	r3, #2
            input_pointer += sequence_length;
   21ec6:	441d      	add	r5, r3
   21ec8:	e780      	b.n	21dcc <parse_string+0x6c>
                    *output_pointer++ = '\r';
   21eca:	f04f 030d 	mov.w	r3, #13
   21ece:	e7a8      	b.n	21e22 <parse_string+0xc2>
                    *output_pointer++ = '\t';
   21ed0:	f04f 0309 	mov.w	r3, #9
   21ed4:	e7a5      	b.n	21e22 <parse_string+0xc2>
    if (codepoint < 0x80)
   21ed6:	287f      	cmp	r0, #127	; 0x7f
   21ed8:	d90a      	bls.n	21ef0 <parse_string+0x190>
    else if (codepoint < 0x800)
   21eda:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   21ede:	d30c      	bcc.n	21efa <parse_string+0x19a>
    else if (codepoint < 0x10000)
   21ee0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   21ee4:	d30e      	bcc.n	21f04 <parse_string+0x1a4>
    else if (codepoint <= 0x10FFFF)
   21ee6:	4b13      	ldr	r3, [pc, #76]	; (21f34 <parse_string+0x1d4>)
   21ee8:	4298      	cmp	r0, r3
   21eea:	d88b      	bhi.n	21e04 <parse_string+0xa4>
        sequence_length = 6; /* \uXXXX */
   21eec:	2306      	movs	r3, #6
   21eee:	e7d2      	b.n	21e96 <parse_string+0x136>
   21ef0:	2306      	movs	r3, #6
    unsigned char first_byte_mark = 0;
   21ef2:	f04f 0c00 	mov.w	ip, #0
        utf8_length = 1;
   21ef6:	2101      	movs	r1, #1
   21ef8:	e7d0      	b.n	21e9c <parse_string+0x13c>
        sequence_length = 6; /* \uXXXX */
   21efa:	2306      	movs	r3, #6
        first_byte_mark = 0xC0; /* 11000000 */
   21efc:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
        utf8_length = 2;
   21f00:	2102      	movs	r1, #2
   21f02:	e7cb      	b.n	21e9c <parse_string+0x13c>
        sequence_length = 6; /* \uXXXX */
   21f04:	2306      	movs	r3, #6
        first_byte_mark = 0xE0; /* 11100000 */
   21f06:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
        utf8_length = 3;
   21f0a:	2103      	movs	r1, #3
   21f0c:	e7c6      	b.n	21e9c <parse_string+0x13c>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   21f0e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   21f12:	f062 027f 	orn	r2, r2, #127	; 0x7f
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   21f16:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   21f1a:	f800 2901 	strb.w	r2, [r0], #-1
        codepoint >>= 6;
   21f1e:	09b6      	lsrs	r6, r6, #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   21f20:	fa5f fe8e 	uxtb.w	lr, lr
   21f24:	e7bf      	b.n	21ea6 <parse_string+0x146>
    if (input_pointer != NULL)
   21f26:	2d00      	cmp	r5, #0
   21f28:	f47f af70 	bne.w	21e0c <parse_string+0xac>
    return false;
   21f2c:	2000      	movs	r0, #0
   21f2e:	e75b      	b.n	21de8 <parse_string+0x88>
   21f30:	000ffc00 	.word	0x000ffc00
   21f34:	0010ffff 	.word	0x0010ffff

00021f38 <get_object_item>:
{
   21f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21f3a:	460d      	mov	r5, r1
    if ((object == NULL) || (name == NULL))
   21f3c:	b360      	cbz	r0, 21f98 <get_object_item+0x60>
   21f3e:	b359      	cbz	r1, 21f98 <get_object_item+0x60>
    current_element = object->child;
   21f40:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
   21f42:	b9fa      	cbnz	r2, 21f84 <get_object_item+0x4c>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   21f44:	4e17      	ldr	r6, [pc, #92]	; (21fa4 <get_object_item+0x6c>)
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   21f46:	b33c      	cbz	r4, 21f98 <get_object_item+0x60>
   21f48:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
   21f4a:	b1c3      	cbz	r3, 21f7e <get_object_item+0x46>
    if (string1 == string2)
   21f4c:	42ab      	cmp	r3, r5
   21f4e:	d021      	beq.n	21f94 <get_object_item+0x5c>
   21f50:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   21f54:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   21f56:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   21f5a:	460f      	mov	r7, r1
   21f5c:	5d8a      	ldrb	r2, [r1, r6]
   21f5e:	f002 0203 	and.w	r2, r2, #3
   21f62:	2a01      	cmp	r2, #1
   21f64:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   21f68:	bf08      	it	eq
   21f6a:	f101 0720 	addeq.w	r7, r1, #32
   21f6e:	5cb0      	ldrb	r0, [r6, r2]
   21f70:	f000 0003 	and.w	r0, r0, #3
   21f74:	2801      	cmp	r0, #1
   21f76:	bf08      	it	eq
   21f78:	3220      	addeq	r2, #32
   21f7a:	4297      	cmp	r7, r2
   21f7c:	d00f      	beq.n	21f9e <get_object_item+0x66>
            current_element = current_element->next;
   21f7e:	6824      	ldr	r4, [r4, #0]
   21f80:	e7e1      	b.n	21f46 <get_object_item+0xe>
            current_element = current_element->next;
   21f82:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
   21f84:	b144      	cbz	r4, 21f98 <get_object_item+0x60>
   21f86:	6a21      	ldr	r1, [r4, #32]
   21f88:	b121      	cbz	r1, 21f94 <get_object_item+0x5c>
   21f8a:	4628      	mov	r0, r5
   21f8c:	f7f7 fff0 	bl	19f70 <strcmp>
   21f90:	2800      	cmp	r0, #0
   21f92:	d1f6      	bne.n	21f82 <get_object_item+0x4a>
    if ((current_element == NULL) || (current_element->string == NULL)) {
   21f94:	6a23      	ldr	r3, [r4, #32]
   21f96:	b903      	cbnz	r3, 21f9a <get_object_item+0x62>
        return NULL;
   21f98:	2400      	movs	r4, #0
}
   21f9a:	4620      	mov	r0, r4
   21f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (*string1 == '\0')
   21f9e:	2900      	cmp	r1, #0
   21fa0:	d1d9      	bne.n	21f56 <get_object_item+0x1e>
   21fa2:	e7f7      	b.n	21f94 <get_object_item+0x5c>
   21fa4:	000496aa 	.word	0x000496aa

00021fa8 <print_string_ptr>:
{
   21fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21fac:	4683      	mov	fp, r0
   21fae:	b085      	sub	sp, #20
    if (output_buffer == NULL)
   21fb0:	460f      	mov	r7, r1
   21fb2:	b919      	cbnz	r1, 21fbc <print_string_ptr+0x14>
        return false;
   21fb4:	2000      	movs	r0, #0
}
   21fb6:	b005      	add	sp, #20
   21fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const char quotes[] = "\"\"";
   21fbc:	4b48      	ldr	r3, [pc, #288]	; (220e0 <print_string_ptr+0x138>)
   21fbe:	881a      	ldrh	r2, [r3, #0]
   21fc0:	789b      	ldrb	r3, [r3, #2]
   21fc2:	f8ad 200c 	strh.w	r2, [sp, #12]
   21fc6:	f88d 300e 	strb.w	r3, [sp, #14]
    if (input == NULL)
   21fca:	b318      	cbz	r0, 22014 <print_string_ptr+0x6c>
   21fcc:	4602      	mov	r2, r0
    size_t escape_characters = 0;
   21fce:	2500      	movs	r5, #0
   21fd0:	4692      	mov	sl, r2
    for (input_pointer = input; *input_pointer; input_pointer++)
   21fd2:	f812 3b01 	ldrb.w	r3, [r2], #1
   21fd6:	bb5b      	cbnz	r3, 22030 <print_string_ptr+0x88>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   21fd8:	ebaa 0a0b 	sub.w	sl, sl, fp
   21fdc:	44aa      	add	sl, r5
    output = ensure(output_buffer, output_length + sizeof(quotes));
   21fde:	f10a 0103 	add.w	r1, sl, #3
   21fe2:	4638      	mov	r0, r7
   21fe4:	f01d fd87 	bl	3faf6 <ensure>
    if (output == NULL)
   21fe8:	4606      	mov	r6, r0
   21fea:	2800      	cmp	r0, #0
   21fec:	d0e2      	beq.n	21fb4 <print_string_ptr+0xc>
    if (escape_characters == 0)
   21fee:	2322      	movs	r3, #34	; 0x22
   21ff0:	1c44      	adds	r4, r0, #1
   21ff2:	f10a 0901 	add.w	r9, sl, #1
   21ff6:	f10a 0802 	add.w	r8, sl, #2
        output[0] = '\"';
   21ffa:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   21ffc:	bb55      	cbnz	r5, 22054 <print_string_ptr+0xac>
   21ffe:	4652      	mov	r2, sl
   22000:	4659      	mov	r1, fp
   22002:	4620      	mov	r0, r4
   22004:	f01e feac 	bl	40d60 <memcpy>
        output[output_length + 1] = '\"';
   22008:	2322      	movs	r3, #34	; 0x22
   2200a:	f806 3009 	strb.w	r3, [r6, r9]
        output[output_length + 2] = '\0';
   2200e:	f806 5008 	strb.w	r5, [r6, r8]
        return true;
   22012:	e00b      	b.n	2202c <print_string_ptr+0x84>
        output = ensure(output_buffer, sizeof(quotes));
   22014:	2103      	movs	r1, #3
   22016:	4638      	mov	r0, r7
   22018:	f01d fd6d 	bl	3faf6 <ensure>
        if (output == NULL)
   2201c:	2800      	cmp	r0, #0
   2201e:	d0c9      	beq.n	21fb4 <print_string_ptr+0xc>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   22020:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   22024:	a903      	add	r1, sp, #12
   22026:	1ad2      	subs	r2, r2, r3
   22028:	f01f f889 	bl	4113e <strncpy>
    return true;
   2202c:	2001      	movs	r0, #1
   2202e:	e7c2      	b.n	21fb6 <print_string_ptr+0xe>
        switch (*input_pointer)
   22030:	2b0d      	cmp	r3, #13
   22032:	d807      	bhi.n	22044 <print_string_ptr+0x9c>
   22034:	2b0c      	cmp	r3, #12
   22036:	d203      	bcs.n	22040 <print_string_ptr+0x98>
   22038:	f1a3 0108 	sub.w	r1, r3, #8
   2203c:	2902      	cmp	r1, #2
   2203e:	d805      	bhi.n	2204c <print_string_ptr+0xa4>
                escape_characters++;
   22040:	3501      	adds	r5, #1
                break;
   22042:	e7c5      	b.n	21fd0 <print_string_ptr+0x28>
        switch (*input_pointer)
   22044:	2b22      	cmp	r3, #34	; 0x22
   22046:	d0fb      	beq.n	22040 <print_string_ptr+0x98>
   22048:	2b5c      	cmp	r3, #92	; 0x5c
   2204a:	d0f9      	beq.n	22040 <print_string_ptr+0x98>
                if (*input_pointer < 32)
   2204c:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   2204e:	bf98      	it	ls
   22050:	3505      	addls	r5, #5
   22052:	e7bd      	b.n	21fd0 <print_string_ptr+0x28>
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   22054:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
                    *output_pointer = 'f';
   22058:	f04f 0a66 	mov.w	sl, #102	; 0x66
            *output_pointer++ = '\\';
   2205c:	f04f 0b5c 	mov.w	fp, #92	; 0x5c
   22060:	9301      	str	r3, [sp, #4]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   22062:	9a01      	ldr	r2, [sp, #4]
   22064:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   22068:	9201      	str	r2, [sp, #4]
   2206a:	b92b      	cbnz	r3, 22078 <print_string_ptr+0xd0>
    output[output_length + 1] = '\"';
   2206c:	2222      	movs	r2, #34	; 0x22
   2206e:	f806 2009 	strb.w	r2, [r6, r9]
    output[output_length + 2] = '\0';
   22072:	f806 3008 	strb.w	r3, [r6, r8]
   22076:	e7d9      	b.n	2202c <print_string_ptr+0x84>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   22078:	2b1f      	cmp	r3, #31
   2207a:	d907      	bls.n	2208c <print_string_ptr+0xe4>
   2207c:	2b22      	cmp	r3, #34	; 0x22
   2207e:	d005      	beq.n	2208c <print_string_ptr+0xe4>
   22080:	2b5c      	cmp	r3, #92	; 0x5c
   22082:	d003      	beq.n	2208c <print_string_ptr+0xe4>
            *output_pointer = *input_pointer;
   22084:	4620      	mov	r0, r4
   22086:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   22088:	1c44      	adds	r4, r0, #1
   2208a:	e7ea      	b.n	22062 <print_string_ptr+0xba>
            *output_pointer++ = '\\';
   2208c:	4620      	mov	r0, r4
            switch (*input_pointer)
   2208e:	9b01      	ldr	r3, [sp, #4]
            *output_pointer++ = '\\';
   22090:	f800 bb01 	strb.w	fp, [r0], #1
            switch (*input_pointer)
   22094:	781b      	ldrb	r3, [r3, #0]
   22096:	2b0c      	cmp	r3, #12
   22098:	d011      	beq.n	220be <print_string_ptr+0x116>
   2209a:	d808      	bhi.n	220ae <print_string_ptr+0x106>
   2209c:	2b09      	cmp	r3, #9
   2209e:	d013      	beq.n	220c8 <print_string_ptr+0x120>
   220a0:	2b0a      	cmp	r3, #10
   220a2:	d00f      	beq.n	220c4 <print_string_ptr+0x11c>
   220a4:	2b08      	cmp	r3, #8
   220a6:	d111      	bne.n	220cc <print_string_ptr+0x124>
                    *output_pointer = 'b';
   220a8:	2362      	movs	r3, #98	; 0x62
                    *output_pointer = 't';
   220aa:	7063      	strb	r3, [r4, #1]
                    break;
   220ac:	e7ec      	b.n	22088 <print_string_ptr+0xe0>
            switch (*input_pointer)
   220ae:	2b22      	cmp	r3, #34	; 0x22
   220b0:	d0fb      	beq.n	220aa <print_string_ptr+0x102>
   220b2:	2b5c      	cmp	r3, #92	; 0x5c
   220b4:	d0f9      	beq.n	220aa <print_string_ptr+0x102>
   220b6:	2b0d      	cmp	r3, #13
   220b8:	d108      	bne.n	220cc <print_string_ptr+0x124>
                    *output_pointer = 'r';
   220ba:	2372      	movs	r3, #114	; 0x72
   220bc:	e7f5      	b.n	220aa <print_string_ptr+0x102>
                    *output_pointer = 'f';
   220be:	f884 a001 	strb.w	sl, [r4, #1]
                    break;
   220c2:	e7e1      	b.n	22088 <print_string_ptr+0xe0>
                    *output_pointer = 'n';
   220c4:	236e      	movs	r3, #110	; 0x6e
   220c6:	e7f0      	b.n	220aa <print_string_ptr+0x102>
                    *output_pointer = 't';
   220c8:	2374      	movs	r3, #116	; 0x74
   220ca:	e7ee      	b.n	220aa <print_string_ptr+0x102>
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   220cc:	6839      	ldr	r1, [r7, #0]
   220ce:	687d      	ldr	r5, [r7, #4]
   220d0:	1a41      	subs	r1, r0, r1
   220d2:	4a04      	ldr	r2, [pc, #16]	; (220e4 <print_string_ptr+0x13c>)
   220d4:	1a69      	subs	r1, r5, r1
   220d6:	f01a fc63 	bl	3c9a0 <sniprintf>
                    output_pointer += 4;
   220da:	1d60      	adds	r0, r4, #5
                    break;
   220dc:	e7d4      	b.n	22088 <print_string_ptr+0xe0>
   220de:	bf00      	nop
   220e0:	00045fee 	.word	0x00045fee
   220e4:	00045fe8 	.word	0x00045fe8

000220e8 <print_value>:
{
   220e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   220ec:	460c      	mov	r4, r1
   220ee:	b08d      	sub	sp, #52	; 0x34
    if ((item == NULL) || (output_buffer == NULL))
   220f0:	4606      	mov	r6, r0
   220f2:	b908      	cbnz	r0, 220f8 <print_value+0x10>
        return false;
   220f4:	2500      	movs	r5, #0
   220f6:	e01d      	b.n	22134 <print_value+0x4c>
    if ((item == NULL) || (output_buffer == NULL))
   220f8:	2900      	cmp	r1, #0
   220fa:	d0fb      	beq.n	220f4 <print_value+0xc>
    switch ((item->type) & 0xFF)
   220fc:	7b05      	ldrb	r5, [r0, #12]
   220fe:	2d08      	cmp	r5, #8
   22100:	d053      	beq.n	221aa <print_value+0xc2>
   22102:	dc1b      	bgt.n	2213c <print_value+0x54>
   22104:	2d02      	cmp	r5, #2
   22106:	d04e      	beq.n	221a6 <print_value+0xbe>
   22108:	2d04      	cmp	r5, #4
   2210a:	d037      	beq.n	2217c <print_value+0x94>
   2210c:	2d01      	cmp	r5, #1
   2210e:	d1f1      	bne.n	220f4 <print_value+0xc>
            const char buff[] = "false";
   22110:	4b87      	ldr	r3, [pc, #540]	; (22330 <print_value+0x248>)
            output = ensure(output_buffer, sizeof(buff));
   22112:	2106      	movs	r1, #6
            const char buff[] = "false";
   22114:	6818      	ldr	r0, [r3, #0]
   22116:	889b      	ldrh	r3, [r3, #4]
   22118:	9005      	str	r0, [sp, #20]
            output = ensure(output_buffer, sizeof(buff));
   2211a:	4620      	mov	r0, r4
            const char buff[] = "false";
   2211c:	f8ad 3018 	strh.w	r3, [sp, #24]
            output = ensure(output_buffer, sizeof(buff));
   22120:	f01d fce9 	bl	3faf6 <ensure>
            if (output == NULL)
   22124:	2800      	cmp	r0, #0
   22126:	d0e5      	beq.n	220f4 <print_value+0xc>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   22128:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   2212c:	a905      	add	r1, sp, #20
   2212e:	1ad2      	subs	r2, r2, r3
   22130:	f01f f805 	bl	4113e <strncpy>
}
   22134:	4628      	mov	r0, r5
   22136:	b00d      	add	sp, #52	; 0x34
   22138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch ((item->type) & 0xFF)
   2213c:	2d20      	cmp	r5, #32
   2213e:	d07b      	beq.n	22238 <print_value+0x150>
   22140:	dc06      	bgt.n	22150 <print_value+0x68>
   22142:	2d10      	cmp	r5, #16
   22144:	d1d6      	bne.n	220f4 <print_value+0xc>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   22146:	6900      	ldr	r0, [r0, #16]
   22148:	f7ff ff2e 	bl	21fa8 <print_string_ptr>
   2214c:	4605      	mov	r5, r0
   2214e:	e7f1      	b.n	22134 <print_value+0x4c>
    switch ((item->type) & 0xFF)
   22150:	2d40      	cmp	r5, #64	; 0x40
   22152:	f000 80bc 	beq.w	222ce <print_value+0x1e6>
   22156:	2d80      	cmp	r5, #128	; 0x80
   22158:	d1cc      	bne.n	220f4 <print_value+0xc>
            if (item->valuestring == NULL)
   2215a:	6900      	ldr	r0, [r0, #16]
   2215c:	2800      	cmp	r0, #0
   2215e:	d0c9      	beq.n	220f4 <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   22160:	f7f7 ff10 	bl	19f84 <strlen>
   22164:	1c45      	adds	r5, r0, #1
            output = ensure(output_buffer, raw_length);
   22166:	4629      	mov	r1, r5
   22168:	4620      	mov	r0, r4
   2216a:	f01d fcc4 	bl	3faf6 <ensure>
            if (output == NULL)
   2216e:	2800      	cmp	r0, #0
   22170:	d0c0      	beq.n	220f4 <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22172:	462a      	mov	r2, r5
   22174:	6931      	ldr	r1, [r6, #16]
   22176:	f01e fdf3 	bl	40d60 <memcpy>
   2217a:	e012      	b.n	221a2 <print_value+0xba>
            const char buff[] = "null";
   2217c:	4b6d      	ldr	r3, [pc, #436]	; (22334 <print_value+0x24c>)
            const char buff[] = "true";
   2217e:	6818      	ldr	r0, [r3, #0]
   22180:	791b      	ldrb	r3, [r3, #4]
   22182:	9005      	str	r0, [sp, #20]
            output = ensure(output_buffer, sizeof(buff));
   22184:	2105      	movs	r1, #5
   22186:	4620      	mov	r0, r4
            const char buff[] = "true";
   22188:	f88d 3018 	strb.w	r3, [sp, #24]
            output = ensure(output_buffer, sizeof(buff));
   2218c:	f01d fcb3 	bl	3faf6 <ensure>
            if (output == NULL)
   22190:	4605      	mov	r5, r0
   22192:	2800      	cmp	r0, #0
   22194:	d0ce      	beq.n	22134 <print_value+0x4c>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   22196:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2219a:	a905      	add	r1, sp, #20
   2219c:	1ad2      	subs	r2, r2, r3
   2219e:	f01e ffce 	bl	4113e <strncpy>
    return true;
   221a2:	2501      	movs	r5, #1
   221a4:	e7c6      	b.n	22134 <print_value+0x4c>
            const char buff[] = "true";
   221a6:	4b64      	ldr	r3, [pc, #400]	; (22338 <print_value+0x250>)
   221a8:	e7e9      	b.n	2217e <print_value+0x96>
    double d = item->valuedouble;
   221aa:	e9d0 8906 	ldrd	r8, r9, [r0, #24]
    if ((d * 0) != 0)
   221ae:	2200      	movs	r2, #0
   221b0:	2300      	movs	r3, #0
   221b2:	4640      	mov	r0, r8
   221b4:	4649      	mov	r1, r9
   221b6:	f7f6 faef 	bl	18798 <__aeabi_dmul>
   221ba:	2200      	movs	r2, #0
   221bc:	2300      	movs	r3, #0
   221be:	f7f6 fd53 	bl	18c68 <__aeabi_dcmpeq>
   221c2:	ae05      	add	r6, sp, #20
   221c4:	b9b0      	cbnz	r0, 221f4 <print_value+0x10c>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   221c6:	495b      	ldr	r1, [pc, #364]	; (22334 <print_value+0x24c>)
   221c8:	4630      	mov	r0, r6
   221ca:	f01e ff9e 	bl	4110a <strcpy>
   221ce:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   221d0:	1c69      	adds	r1, r5, #1
   221d2:	4620      	mov	r0, r4
   221d4:	f01d fc8f 	bl	3faf6 <ensure>
    if (output_pointer == NULL)
   221d8:	2800      	cmp	r0, #0
   221da:	d08b      	beq.n	220f4 <print_value+0xc>
    for (i = 0; i < ((size_t)length); i++)
   221dc:	2300      	movs	r3, #0
        if (number_buffer[i] == decimal_point)
   221de:	5cf2      	ldrb	r2, [r6, r3]
        output_pointer[i] = number_buffer[i];
   221e0:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < ((size_t)length); i++)
   221e2:	3301      	adds	r3, #1
   221e4:	429d      	cmp	r5, r3
   221e6:	d1fa      	bne.n	221de <print_value+0xf6>
    output_pointer[i] = '\0';
   221e8:	2300      	movs	r3, #0
   221ea:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   221ec:	68a3      	ldr	r3, [r4, #8]
   221ee:	441d      	add	r5, r3
   221f0:	60a5      	str	r5, [r4, #8]
    return true;
   221f2:	e7d6      	b.n	221a2 <print_value+0xba>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   221f4:	4a51      	ldr	r2, [pc, #324]	; (2233c <print_value+0x254>)
   221f6:	211a      	movs	r1, #26
   221f8:	e9cd 8900 	strd	r8, r9, [sp]
   221fc:	4630      	mov	r0, r6
   221fe:	f01a fbcf 	bl	3c9a0 <sniprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   22202:	aa02      	add	r2, sp, #8
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   22204:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   22206:	494e      	ldr	r1, [pc, #312]	; (22340 <print_value+0x258>)
   22208:	4630      	mov	r0, r6
   2220a:	f01a fbfd 	bl	3ca08 <siscanf>
   2220e:	2801      	cmp	r0, #1
   22210:	d106      	bne.n	22220 <print_value+0x138>
   22212:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   22216:	4640      	mov	r0, r8
   22218:	4649      	mov	r1, r9
   2221a:	f7f6 fd25 	bl	18c68 <__aeabi_dcmpeq>
   2221e:	b938      	cbnz	r0, 22230 <print_value+0x148>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   22220:	e9cd 8900 	strd	r8, r9, [sp]
   22224:	4a47      	ldr	r2, [pc, #284]	; (22344 <print_value+0x25c>)
   22226:	211a      	movs	r1, #26
   22228:	4630      	mov	r0, r6
   2222a:	f01a fbb9 	bl	3c9a0 <sniprintf>
   2222e:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   22230:	2d19      	cmp	r5, #25
   22232:	f73f af5f 	bgt.w	220f4 <print_value+0xc>
   22236:	e7cb      	b.n	221d0 <print_value+0xe8>
            return print_array(item, output_buffer);
   22238:	6886      	ldr	r6, [r0, #8]
    output_pointer = ensure(output_buffer, 1);
   2223a:	2101      	movs	r1, #1
   2223c:	4620      	mov	r0, r4
   2223e:	f01d fc5a 	bl	3faf6 <ensure>
    if (output_pointer == NULL)
   22242:	2800      	cmp	r0, #0
   22244:	f43f af56 	beq.w	220f4 <print_value+0xc>
    *output_pointer = '[';
   22248:	235b      	movs	r3, #91	; 0x5b
            *output_pointer++ = ',';
   2224a:	272c      	movs	r7, #44	; 0x2c
            *output_pointer = '\0';
   2224c:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   22250:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   22252:	68a3      	ldr	r3, [r4, #8]
   22254:	3301      	adds	r3, #1
   22256:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   22258:	68e3      	ldr	r3, [r4, #12]
   2225a:	3301      	adds	r3, #1
   2225c:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   2225e:	b96e      	cbnz	r6, 2227c <print_value+0x194>
    output_pointer = ensure(output_buffer, 2);
   22260:	2102      	movs	r1, #2
   22262:	4620      	mov	r0, r4
   22264:	f01d fc47 	bl	3faf6 <ensure>
    if (output_pointer == NULL)
   22268:	2800      	cmp	r0, #0
   2226a:	f43f af43 	beq.w	220f4 <print_value+0xc>
    *output_pointer++ = ']';
   2226e:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   22270:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   22272:	7003      	strb	r3, [r0, #0]
    output_buffer->depth--;
   22274:	68e3      	ldr	r3, [r4, #12]
   22276:	3b01      	subs	r3, #1
   22278:	60e3      	str	r3, [r4, #12]
   2227a:	e792      	b.n	221a2 <print_value+0xba>
        if (!print_value(current_element, output_buffer))
   2227c:	4621      	mov	r1, r4
   2227e:	4630      	mov	r0, r6
   22280:	f7ff ff32 	bl	220e8 <print_value>
   22284:	2800      	cmp	r0, #0
   22286:	f43f af35 	beq.w	220f4 <print_value+0xc>
        update_offset(output_buffer);
   2228a:	4620      	mov	r0, r4
   2228c:	f01d fc0a 	bl	3faa4 <update_offset>
        if (current_element->next)
   22290:	6833      	ldr	r3, [r6, #0]
   22292:	b1bb      	cbz	r3, 222c4 <print_value+0x1dc>
            length = (size_t) (output_buffer->format ? 2 : 1);
   22294:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   22296:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   22298:	2b00      	cmp	r3, #0
   2229a:	bf14      	ite	ne
   2229c:	f04f 0902 	movne.w	r9, #2
   222a0:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   222a4:	f109 0101 	add.w	r1, r9, #1
   222a8:	f01d fc25 	bl	3faf6 <ensure>
            if (output_pointer == NULL)
   222ac:	2800      	cmp	r0, #0
   222ae:	f43f af21 	beq.w	220f4 <print_value+0xc>
            *output_pointer++ = ',';
   222b2:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   222b4:	6963      	ldr	r3, [r4, #20]
   222b6:	b93b      	cbnz	r3, 222c8 <print_value+0x1e0>
            *output_pointer++ = ',';
   222b8:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   222ba:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   222be:	68a3      	ldr	r3, [r4, #8]
   222c0:	444b      	add	r3, r9
   222c2:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   222c4:	6836      	ldr	r6, [r6, #0]
   222c6:	e7ca      	b.n	2225e <print_value+0x176>
                *output_pointer++ = ' ';
   222c8:	1c83      	adds	r3, r0, #2
   222ca:	7045      	strb	r5, [r0, #1]
   222cc:	e7f5      	b.n	222ba <print_value+0x1d2>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   222ce:	694b      	ldr	r3, [r1, #20]
            return print_object(item, output_buffer);
   222d0:	6885      	ldr	r5, [r0, #8]
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   222d2:	2b00      	cmp	r3, #0
   222d4:	bf14      	ite	ne
   222d6:	2702      	movne	r7, #2
   222d8:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   222da:	4620      	mov	r0, r4
   222dc:	1c79      	adds	r1, r7, #1
   222de:	f01d fc0a 	bl	3faf6 <ensure>
    if (output_pointer == NULL)
   222e2:	2800      	cmp	r0, #0
   222e4:	f43f af06 	beq.w	220f4 <print_value+0xc>
    *output_pointer++ = '{';
   222e8:	237b      	movs	r3, #123	; 0x7b
   222ea:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   222ec:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   222ee:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   222f0:	3201      	adds	r2, #1
   222f2:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   222f4:	b10b      	cbz	r3, 222fa <print_value+0x212>
        *output_pointer++ = '\n';
   222f6:	230a      	movs	r3, #10
   222f8:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   222fa:	68a3      	ldr	r3, [r4, #8]
        *output_pointer++ = ':';
   222fc:	f04f 083a 	mov.w	r8, #58	; 0x3a
    output_buffer->offset += length;
   22300:	443b      	add	r3, r7
                *output_pointer++ = '\t';
   22302:	2709      	movs	r7, #9
    output_buffer->offset += length;
   22304:	60a3      	str	r3, [r4, #8]
    while (current_item)
   22306:	6963      	ldr	r3, [r4, #20]
   22308:	b9f5      	cbnz	r5, 22348 <print_value+0x260>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   2230a:	2b00      	cmp	r3, #0
   2230c:	d077      	beq.n	223fe <print_value+0x316>
   2230e:	68e1      	ldr	r1, [r4, #12]
   22310:	3101      	adds	r1, #1
   22312:	4620      	mov	r0, r4
   22314:	f01d fbef 	bl	3faf6 <ensure>
    if (output_pointer == NULL)
   22318:	2800      	cmp	r0, #0
   2231a:	f43f aeeb 	beq.w	220f4 <print_value+0xc>
    if (output_buffer->format)
   2231e:	6963      	ldr	r3, [r4, #20]
   22320:	2b00      	cmp	r3, #0
   22322:	d176      	bne.n	22412 <print_value+0x32a>
   22324:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   22326:	227d      	movs	r2, #125	; 0x7d
   22328:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   2232a:	2200      	movs	r2, #0
   2232c:	705a      	strb	r2, [r3, #1]
   2232e:	e7a1      	b.n	22274 <print_value+0x18c>
   22330:	00046008 	.word	0x00046008
   22334:	00045ff1 	.word	0x00045ff1
   22338:	0004600e 	.word	0x0004600e
   2233c:	00045ff6 	.word	0x00045ff6
   22340:	00045ffd 	.word	0x00045ffd
   22344:	00046001 	.word	0x00046001
        if (output_buffer->format)
   22348:	b173      	cbz	r3, 22368 <print_value+0x280>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   2234a:	68e1      	ldr	r1, [r4, #12]
   2234c:	4620      	mov	r0, r4
   2234e:	f01d fbd2 	bl	3faf6 <ensure>
            if (output_pointer == NULL)
   22352:	2800      	cmp	r0, #0
   22354:	f43f aece 	beq.w	220f4 <print_value+0xc>
   22358:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   2235a:	68e1      	ldr	r1, [r4, #12]
   2235c:	1a13      	subs	r3, r2, r0
   2235e:	428b      	cmp	r3, r1
   22360:	d34a      	bcc.n	223f8 <print_value+0x310>
            output_buffer->offset += output_buffer->depth;
   22362:	68a3      	ldr	r3, [r4, #8]
   22364:	440b      	add	r3, r1
   22366:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   22368:	4621      	mov	r1, r4
   2236a:	6a28      	ldr	r0, [r5, #32]
   2236c:	f7ff fe1c 	bl	21fa8 <print_string_ptr>
   22370:	2800      	cmp	r0, #0
   22372:	f43f aebf 	beq.w	220f4 <print_value+0xc>
        update_offset(output_buffer);
   22376:	4620      	mov	r0, r4
   22378:	f01d fb94 	bl	3faa4 <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   2237c:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   2237e:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   22380:	2b00      	cmp	r3, #0
   22382:	bf14      	ite	ne
   22384:	2602      	movne	r6, #2
   22386:	2601      	moveq	r6, #1
        output_pointer = ensure(output_buffer, length);
   22388:	4631      	mov	r1, r6
   2238a:	f01d fbb4 	bl	3faf6 <ensure>
        if (output_pointer == NULL)
   2238e:	2800      	cmp	r0, #0
   22390:	f43f aeb0 	beq.w	220f4 <print_value+0xc>
        *output_pointer++ = ':';
   22394:	f880 8000 	strb.w	r8, [r0]
        if (output_buffer->format)
   22398:	6963      	ldr	r3, [r4, #20]
   2239a:	b103      	cbz	r3, 2239e <print_value+0x2b6>
            *output_pointer++ = '\t';
   2239c:	7047      	strb	r7, [r0, #1]
        output_buffer->offset += length;
   2239e:	68a1      	ldr	r1, [r4, #8]
        if (!print_value(current_item, output_buffer))
   223a0:	4628      	mov	r0, r5
        output_buffer->offset += length;
   223a2:	4431      	add	r1, r6
   223a4:	60a1      	str	r1, [r4, #8]
        if (!print_value(current_item, output_buffer))
   223a6:	4621      	mov	r1, r4
   223a8:	f7ff fe9e 	bl	220e8 <print_value>
   223ac:	2800      	cmp	r0, #0
   223ae:	f43f aea1 	beq.w	220f4 <print_value+0xc>
        update_offset(output_buffer);
   223b2:	4620      	mov	r0, r4
   223b4:	f01d fb76 	bl	3faa4 <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   223b8:	682e      	ldr	r6, [r5, #0]
   223ba:	6963      	ldr	r3, [r4, #20]
   223bc:	3600      	adds	r6, #0
   223be:	bf18      	it	ne
   223c0:	2601      	movne	r6, #1
   223c2:	2b00      	cmp	r3, #0
   223c4:	bf18      	it	ne
   223c6:	3601      	addne	r6, #1
        output_pointer = ensure(output_buffer, length + 1);
   223c8:	4620      	mov	r0, r4
   223ca:	1c71      	adds	r1, r6, #1
   223cc:	f01d fb93 	bl	3faf6 <ensure>
        if (output_pointer == NULL)
   223d0:	2800      	cmp	r0, #0
   223d2:	f43f ae8f 	beq.w	220f4 <print_value+0xc>
        if (current_item->next)
   223d6:	682b      	ldr	r3, [r5, #0]
   223d8:	b113      	cbz	r3, 223e0 <print_value+0x2f8>
            *output_pointer++ = ',';
   223da:	232c      	movs	r3, #44	; 0x2c
   223dc:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   223e0:	6963      	ldr	r3, [r4, #20]
   223e2:	b113      	cbz	r3, 223ea <print_value+0x302>
            *output_pointer++ = '\n';
   223e4:	230a      	movs	r3, #10
   223e6:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   223ea:	2300      	movs	r3, #0
   223ec:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   223ee:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
   223f0:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
   223f2:	441e      	add	r6, r3
   223f4:	60a6      	str	r6, [r4, #8]
        current_item = current_item->next;
   223f6:	e786      	b.n	22306 <print_value+0x21e>
                *output_pointer++ = '\t';
   223f8:	f802 7b01 	strb.w	r7, [r2], #1
   223fc:	e7ad      	b.n	2235a <print_value+0x272>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   223fe:	2102      	movs	r1, #2
   22400:	e787      	b.n	22312 <print_value+0x22a>
            *output_pointer++ = '\t';
   22402:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   22406:	68e2      	ldr	r2, [r4, #12]
   22408:	1a19      	subs	r1, r3, r0
   2240a:	3a01      	subs	r2, #1
   2240c:	4291      	cmp	r1, r2
   2240e:	d3f8      	bcc.n	22402 <print_value+0x31a>
   22410:	e789      	b.n	22326 <print_value+0x23e>
    if (output_buffer->format)
   22412:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   22414:	2509      	movs	r5, #9
   22416:	e7f6      	b.n	22406 <print_value+0x31e>

00022418 <print.constprop.14>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   22418:	b5f0      	push	{r4, r5, r6, r7, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   2241a:	4d24      	ldr	r5, [pc, #144]	; (224ac <print.constprop.14+0x94>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   2241c:	b08b      	sub	sp, #44	; 0x2c
   2241e:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   22420:	2224      	movs	r2, #36	; 0x24
   22422:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   22424:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   22426:	a801      	add	r0, sp, #4
   22428:	f01e fcba 	bl	40da0 <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   2242c:	682b      	ldr	r3, [r5, #0]
   2242e:	f44f 7080 	mov.w	r0, #256	; 0x100
   22432:	4798      	blx	r3
    buffer->length = default_buffer_size;
   22434:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   22438:	4603      	mov	r3, r0
    buffer->format = format;
   2243a:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   2243c:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   2243e:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   22440:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   22442:	462f      	mov	r7, r5
   22444:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   22448:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   2244c:	b17b      	cbz	r3, 2246e <print.constprop.14+0x56>
    if (!print_value(item, buffer))
   2244e:	a901      	add	r1, sp, #4
   22450:	4620      	mov	r0, r4
   22452:	f7ff fe49 	bl	220e8 <print_value>
   22456:	b150      	cbz	r0, 2246e <print.constprop.14+0x56>
    update_offset(buffer);
   22458:	a801      	add	r0, sp, #4
   2245a:	f01d fb23 	bl	3faa4 <update_offset>
    if (hooks->reallocate != NULL)
   2245e:	68ae      	ldr	r6, [r5, #8]
   22460:	9903      	ldr	r1, [sp, #12]
   22462:	b15e      	cbz	r6, 2247c <print.constprop.14+0x64>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   22464:	3101      	adds	r1, #1
   22466:	9801      	ldr	r0, [sp, #4]
   22468:	47b0      	blx	r6
        if (printed == NULL) {
   2246a:	4604      	mov	r4, r0
   2246c:	b9d0      	cbnz	r0, 224a4 <print.constprop.14+0x8c>
    if (buffer->buffer != NULL)
   2246e:	9c01      	ldr	r4, [sp, #4]
   22470:	b1c4      	cbz	r4, 224a4 <print.constprop.14+0x8c>
        hooks->deallocate(buffer->buffer);
   22472:	4620      	mov	r0, r4
   22474:	687b      	ldr	r3, [r7, #4]
   22476:	4798      	blx	r3
    return NULL;
   22478:	2400      	movs	r4, #0
   2247a:	e013      	b.n	224a4 <print.constprop.14+0x8c>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   2247c:	682b      	ldr	r3, [r5, #0]
   2247e:	1c48      	adds	r0, r1, #1
   22480:	4798      	blx	r3
        if (printed == NULL)
   22482:	4604      	mov	r4, r0
   22484:	2800      	cmp	r0, #0
   22486:	d0f2      	beq.n	2246e <print.constprop.14+0x56>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   22488:	9a03      	ldr	r2, [sp, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2248a:	9b02      	ldr	r3, [sp, #8]
   2248c:	3201      	adds	r2, #1
   2248e:	429a      	cmp	r2, r3
   22490:	bf28      	it	cs
   22492:	461a      	movcs	r2, r3
   22494:	9901      	ldr	r1, [sp, #4]
   22496:	f01e fc63 	bl	40d60 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   2249a:	9b03      	ldr	r3, [sp, #12]
   2249c:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   2249e:	686b      	ldr	r3, [r5, #4]
   224a0:	9801      	ldr	r0, [sp, #4]
   224a2:	4798      	blx	r3
}
   224a4:	4620      	mov	r0, r4
   224a6:	b00b      	add	sp, #44	; 0x2c
   224a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   224aa:	bf00      	nop
   224ac:	20031268 	.word	0x20031268

000224b0 <cJSON_strdup.isra.2.constprop.16>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   224b0:	b570      	push	{r4, r5, r6, lr}
    if (string == NULL)
   224b2:	4605      	mov	r5, r0
   224b4:	b170      	cbz	r0, 224d4 <cJSON_strdup.isra.2.constprop.16+0x24>
    length = strlen((const char*)string) + sizeof("");
   224b6:	f7f7 fd65 	bl	19f84 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   224ba:	4b07      	ldr	r3, [pc, #28]	; (224d8 <cJSON_strdup.isra.2.constprop.16+0x28>)
    length = strlen((const char*)string) + sizeof("");
   224bc:	1c46      	adds	r6, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   224be:	681b      	ldr	r3, [r3, #0]
   224c0:	4630      	mov	r0, r6
   224c2:	4798      	blx	r3
    if (copy == NULL)
   224c4:	4604      	mov	r4, r0
   224c6:	b118      	cbz	r0, 224d0 <cJSON_strdup.isra.2.constprop.16+0x20>
   224c8:	4632      	mov	r2, r6
   224ca:	4629      	mov	r1, r5
   224cc:	f01e fc48 	bl	40d60 <memcpy>
}
   224d0:	4620      	mov	r0, r4
   224d2:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
   224d4:	4604      	mov	r4, r0
   224d6:	e7fb      	b.n	224d0 <cJSON_strdup.isra.2.constprop.16+0x20>
   224d8:	20031268 	.word	0x20031268

000224dc <add_item_to_object.constprop.12>:
static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   224dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   224de:	460e      	mov	r6, r1
   224e0:	4614      	mov	r4, r2
    if ((object == NULL) || (string == NULL) || (item == NULL))
   224e2:	4607      	mov	r7, r0
   224e4:	b1f0      	cbz	r0, 22524 <add_item_to_object.constprop.12+0x48>
   224e6:	b1e9      	cbz	r1, 22524 <add_item_to_object.constprop.12+0x48>
   224e8:	b1e2      	cbz	r2, 22524 <add_item_to_object.constprop.12+0x48>
    if (constant_key)
   224ea:	b193      	cbz	r3, 22512 <add_item_to_object.constprop.12+0x36>
        new_type = item->type | cJSON_StringIsConst;
   224ec:	68d5      	ldr	r5, [r2, #12]
   224ee:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   224f2:	68e3      	ldr	r3, [r4, #12]
   224f4:	059b      	lsls	r3, r3, #22
   224f6:	d404      	bmi.n	22502 <add_item_to_object.constprop.12+0x26>
   224f8:	6a20      	ldr	r0, [r4, #32]
   224fa:	b110      	cbz	r0, 22502 <add_item_to_object.constprop.12+0x26>
        hooks->deallocate(item->string);
   224fc:	4b0a      	ldr	r3, [pc, #40]	; (22528 <add_item_to_object.constprop.12+0x4c>)
   224fe:	685b      	ldr	r3, [r3, #4]
   22500:	4798      	blx	r3
    item->string = new_key;
   22502:	6226      	str	r6, [r4, #32]
    item->type = new_type;
   22504:	60e5      	str	r5, [r4, #12]
    return add_item_to_array(object, item);
   22506:	4621      	mov	r1, r4
   22508:	4638      	mov	r0, r7
}
   2250a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   2250e:	f01d bad6 	b.w	3fabe <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   22512:	4608      	mov	r0, r1
   22514:	f7ff ffcc 	bl	224b0 <cJSON_strdup.isra.2.constprop.16>
        if (new_key == NULL)
   22518:	4606      	mov	r6, r0
   2251a:	b118      	cbz	r0, 22524 <add_item_to_object.constprop.12+0x48>
        new_type = item->type & ~cJSON_StringIsConst;
   2251c:	68e5      	ldr	r5, [r4, #12]
   2251e:	f425 7500 	bic.w	r5, r5, #512	; 0x200
   22522:	e7e6      	b.n	224f2 <add_item_to_object.constprop.12+0x16>
}
   22524:	2000      	movs	r0, #0
   22526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22528:	20031268 	.word	0x20031268

0002252c <cJSON_InitHooks>:
{
   2252c:	b530      	push	{r4, r5, lr}
   2252e:	4b0d      	ldr	r3, [pc, #52]	; (22564 <cJSON_InitHooks+0x38>)
   22530:	4d0d      	ldr	r5, [pc, #52]	; (22568 <cJSON_InitHooks+0x3c>)
   22532:	4c0e      	ldr	r4, [pc, #56]	; (2256c <cJSON_InitHooks+0x40>)
    if (hooks == NULL)
   22534:	b920      	cbnz	r0, 22540 <cJSON_InitHooks+0x14>
        global_hooks.deallocate = free;
   22536:	e9c3 5400 	strd	r5, r4, [r3]
        global_hooks.reallocate = realloc;
   2253a:	4a0d      	ldr	r2, [pc, #52]	; (22570 <cJSON_InitHooks+0x44>)
   2253c:	609a      	str	r2, [r3, #8]
   2253e:	e00f      	b.n	22560 <cJSON_InitHooks+0x34>
    if (hooks->malloc_fn != NULL)
   22540:	6801      	ldr	r1, [r0, #0]
    if (hooks->free_fn != NULL)
   22542:	6842      	ldr	r2, [r0, #4]
        global_hooks.allocate = hooks->malloc_fn;
   22544:	2900      	cmp	r1, #0
   22546:	bf08      	it	eq
   22548:	4629      	moveq	r1, r5
        global_hooks.deallocate = hooks->free_fn;
   2254a:	2a00      	cmp	r2, #0
   2254c:	bf08      	it	eq
   2254e:	4622      	moveq	r2, r4
    global_hooks.reallocate = NULL;
   22550:	2000      	movs	r0, #0
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   22552:	42a9      	cmp	r1, r5
        global_hooks.allocate = hooks->malloc_fn;
   22554:	6019      	str	r1, [r3, #0]
        global_hooks.deallocate = hooks->free_fn;
   22556:	605a      	str	r2, [r3, #4]
    global_hooks.reallocate = NULL;
   22558:	6098      	str	r0, [r3, #8]
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   2255a:	d101      	bne.n	22560 <cJSON_InitHooks+0x34>
   2255c:	42a2      	cmp	r2, r4
   2255e:	d0ec      	beq.n	2253a <cJSON_InitHooks+0xe>
}
   22560:	bd30      	pop	{r4, r5, pc}
   22562:	bf00      	nop
   22564:	20031268 	.word	0x20031268
   22568:	0003be85 	.word	0x0003be85
   2256c:	0003be95 	.word	0x0003be95
   22570:	0003c971 	.word	0x0003c971

00022574 <cJSON_Delete>:
{
   22574:	b570      	push	{r4, r5, r6, lr}
   22576:	4604      	mov	r4, r0
   22578:	4d0f      	ldr	r5, [pc, #60]	; (225b8 <cJSON_Delete+0x44>)
    while (item != NULL)
   2257a:	b904      	cbnz	r4, 2257e <cJSON_Delete+0xa>
}
   2257c:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   2257e:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   22580:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   22582:	05d9      	lsls	r1, r3, #23
   22584:	d403      	bmi.n	2258e <cJSON_Delete+0x1a>
   22586:	68a0      	ldr	r0, [r4, #8]
   22588:	b968      	cbnz	r0, 225a6 <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   2258a:	6920      	ldr	r0, [r4, #16]
   2258c:	b988      	cbnz	r0, 225b2 <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   2258e:	68e3      	ldr	r3, [r4, #12]
   22590:	059b      	lsls	r3, r3, #22
   22592:	d403      	bmi.n	2259c <cJSON_Delete+0x28>
   22594:	6a20      	ldr	r0, [r4, #32]
   22596:	b108      	cbz	r0, 2259c <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   22598:	686b      	ldr	r3, [r5, #4]
   2259a:	4798      	blx	r3
        global_hooks.deallocate(item);
   2259c:	4620      	mov	r0, r4
   2259e:	686b      	ldr	r3, [r5, #4]
   225a0:	4798      	blx	r3
        item = next;
   225a2:	4634      	mov	r4, r6
   225a4:	e7e9      	b.n	2257a <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   225a6:	f7ff ffe5 	bl	22574 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   225aa:	68e3      	ldr	r3, [r4, #12]
   225ac:	05da      	lsls	r2, r3, #23
   225ae:	d5ec      	bpl.n	2258a <cJSON_Delete+0x16>
   225b0:	e7ed      	b.n	2258e <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   225b2:	686b      	ldr	r3, [r5, #4]
   225b4:	4798      	blx	r3
   225b6:	e7ea      	b.n	2258e <cJSON_Delete+0x1a>
   225b8:	20031268 	.word	0x20031268

000225bc <cJSON_ParseWithOpts>:
{
   225bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   225c0:	4605      	mov	r5, r0
    global_error.json = NULL;
   225c2:	f04f 0800 	mov.w	r8, #0
{
   225c6:	b089      	sub	sp, #36	; 0x24
    global_error.json = NULL;
   225c8:	4e31      	ldr	r6, [pc, #196]	; (22690 <cJSON_ParseWithOpts+0xd4>)
{
   225ca:	460f      	mov	r7, r1
   225cc:	4691      	mov	r9, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   225ce:	2100      	movs	r1, #0
   225d0:	221c      	movs	r2, #28
   225d2:	a801      	add	r0, sp, #4
   225d4:	f01e fbe4 	bl	40da0 <memset>
    global_error.position = 0;
   225d8:	e9c6 8800 	strd	r8, r8, [r6]
    if (value == NULL)
   225dc:	2d00      	cmp	r5, #0
   225de:	d04d      	beq.n	2267c <cJSON_ParseWithOpts+0xc0>
    buffer.length = strlen((const char*)value) + sizeof("");
   225e0:	4628      	mov	r0, r5
    buffer.content = (const unsigned char*)value;
   225e2:	9501      	str	r5, [sp, #4]
    buffer.length = strlen((const char*)value) + sizeof("");
   225e4:	f7f7 fcce 	bl	19f84 <strlen>
    buffer.hooks = global_hooks;
   225e8:	4b2a      	ldr	r3, [pc, #168]	; (22694 <cJSON_ParseWithOpts+0xd8>)
    buffer.length = strlen((const char*)value) + sizeof("");
   225ea:	3001      	adds	r0, #1
    buffer.offset = 0;
   225ec:	e9cd 0802 	strd	r0, r8, [sp, #8]
    buffer.hooks = global_hooks;
   225f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   225f4:	ab08      	add	r3, sp, #32
   225f6:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
   225fa:	f01d fa70 	bl	3fade <cJSON_New_Item.isra.1>
    if (item == NULL) /* memory fail */
   225fe:	4604      	mov	r4, r0
   22600:	2800      	cmp	r0, #0
   22602:	d030      	beq.n	22666 <cJSON_ParseWithOpts+0xaa>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
   22604:	9801      	ldr	r0, [sp, #4]
   22606:	b128      	cbz	r0, 22614 <cJSON_ParseWithOpts+0x58>
   22608:	9b03      	ldr	r3, [sp, #12]
   2260a:	b9e3      	cbnz	r3, 22646 <cJSON_ParseWithOpts+0x8a>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   2260c:	9b02      	ldr	r3, [sp, #8]
   2260e:	2b04      	cmp	r3, #4
   22610:	d80f      	bhi.n	22632 <cJSON_ParseWithOpts+0x76>
    return buffer;
   22612:	a801      	add	r0, sp, #4
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
   22614:	f01d fa31 	bl	3fa7a <buffer_skip_whitespace>
   22618:	4601      	mov	r1, r0
   2261a:	4620      	mov	r0, r4
   2261c:	f7f7 fdb8 	bl	1a190 <parse_value>
   22620:	b1f0      	cbz	r0, 22660 <cJSON_ParseWithOpts+0xa4>
    if (require_null_terminated)
   22622:	f1b9 0f00 	cmp.w	r9, #0
   22626:	d110      	bne.n	2264a <cJSON_ParseWithOpts+0x8e>
    if (return_parse_end)
   22628:	bb57      	cbnz	r7, 22680 <cJSON_ParseWithOpts+0xc4>
}
   2262a:	4620      	mov	r0, r4
   2262c:	b009      	add	sp, #36	; 0x24
   2262e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   22632:	2203      	movs	r2, #3
   22634:	4918      	ldr	r1, [pc, #96]	; (22698 <cJSON_ParseWithOpts+0xdc>)
   22636:	f01e fd70 	bl	4111a <strncmp>
   2263a:	2800      	cmp	r0, #0
   2263c:	d1e9      	bne.n	22612 <cJSON_ParseWithOpts+0x56>
        buffer->offset += 3;
   2263e:	9b03      	ldr	r3, [sp, #12]
   22640:	3303      	adds	r3, #3
   22642:	9303      	str	r3, [sp, #12]
   22644:	e7e5      	b.n	22612 <cJSON_ParseWithOpts+0x56>
        return NULL;
   22646:	4640      	mov	r0, r8
   22648:	e7e4      	b.n	22614 <cJSON_ParseWithOpts+0x58>
        buffer_skip_whitespace(&buffer);
   2264a:	a801      	add	r0, sp, #4
   2264c:	f01d fa15 	bl	3fa7a <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
   22650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   22654:	4293      	cmp	r3, r2
   22656:	d203      	bcs.n	22660 <cJSON_ParseWithOpts+0xa4>
   22658:	9a01      	ldr	r2, [sp, #4]
   2265a:	5cd3      	ldrb	r3, [r2, r3]
   2265c:	2b00      	cmp	r3, #0
   2265e:	d0e3      	beq.n	22628 <cJSON_ParseWithOpts+0x6c>
        cJSON_Delete(item);
   22660:	4620      	mov	r0, r4
   22662:	f7ff ff87 	bl	22574 <cJSON_Delete>
        if (buffer.offset < buffer.length)
   22666:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2266a:	429a      	cmp	r2, r3
   2266c:	d30d      	bcc.n	2268a <cJSON_ParseWithOpts+0xce>
        else if (buffer.length > 0)
   2266e:	b103      	cbz	r3, 22672 <cJSON_ParseWithOpts+0xb6>
            local_error.position = buffer.length - 1;
   22670:	3b01      	subs	r3, #1
        if (return_parse_end != NULL)
   22672:	b10f      	cbz	r7, 22678 <cJSON_ParseWithOpts+0xbc>
            *return_parse_end = (const char*)local_error.json + local_error.position;
   22674:	18ea      	adds	r2, r5, r3
   22676:	603a      	str	r2, [r7, #0]
        global_error = local_error;
   22678:	e9c6 5300 	strd	r5, r3, [r6]
    return NULL;
   2267c:	2400      	movs	r4, #0
   2267e:	e7d4      	b.n	2262a <cJSON_ParseWithOpts+0x6e>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
   22680:	9b01      	ldr	r3, [sp, #4]
   22682:	9a03      	ldr	r2, [sp, #12]
   22684:	4413      	add	r3, r2
   22686:	603b      	str	r3, [r7, #0]
   22688:	e7cf      	b.n	2262a <cJSON_ParseWithOpts+0x6e>
   2268a:	4613      	mov	r3, r2
   2268c:	e7f1      	b.n	22672 <cJSON_ParseWithOpts+0xb6>
   2268e:	bf00      	nop
   22690:	20023a14 	.word	0x20023a14
   22694:	20031268 	.word	0x20031268
   22698:	00045fe4 	.word	0x00045fe4

0002269c <cJSON_CreateNull>:
{
   2269c:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   2269e:	4b04      	ldr	r3, [pc, #16]	; (226b0 <cJSON_CreateNull+0x14>)
   226a0:	6818      	ldr	r0, [r3, #0]
   226a2:	f01d fa1c 	bl	3fade <cJSON_New_Item.isra.1>
    if(item)
   226a6:	b108      	cbz	r0, 226ac <cJSON_CreateNull+0x10>
        item->type = cJSON_NULL;
   226a8:	2304      	movs	r3, #4
   226aa:	60c3      	str	r3, [r0, #12]
}
   226ac:	bd08      	pop	{r3, pc}
   226ae:	bf00      	nop
   226b0:	20031268 	.word	0x20031268

000226b4 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   226b4:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   226b6:	4b0a      	ldr	r3, [pc, #40]	; (226e0 <cJSON_CreateString+0x2c>)
{
   226b8:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   226ba:	6818      	ldr	r0, [r3, #0]
   226bc:	f01d fa0f 	bl	3fade <cJSON_New_Item.isra.1>
    if(item)
   226c0:	4604      	mov	r4, r0
   226c2:	b158      	cbz	r0, 226dc <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
   226c4:	2310      	movs	r3, #16
   226c6:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   226c8:	4628      	mov	r0, r5
   226ca:	f7ff fef1 	bl	224b0 <cJSON_strdup.isra.2.constprop.16>
   226ce:	4605      	mov	r5, r0
   226d0:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   226d2:	b918      	cbnz	r0, 226dc <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
   226d4:	4620      	mov	r0, r4
   226d6:	f7ff ff4d 	bl	22574 <cJSON_Delete>
            return NULL;
   226da:	462c      	mov	r4, r5
        }
    }

    return item;
}
   226dc:	4620      	mov	r0, r4
   226de:	bd38      	pop	{r3, r4, r5, pc}
   226e0:	20031268 	.word	0x20031268

000226e4 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
   226e4:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   226e6:	4b04      	ldr	r3, [pc, #16]	; (226f8 <cJSON_CreateArray+0x14>)
   226e8:	6818      	ldr	r0, [r3, #0]
   226ea:	f01d f9f8 	bl	3fade <cJSON_New_Item.isra.1>
    if(item)
   226ee:	b108      	cbz	r0, 226f4 <cJSON_CreateArray+0x10>
    {
        item->type=cJSON_Array;
   226f0:	2320      	movs	r3, #32
   226f2:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   226f4:	bd08      	pop	{r3, pc}
   226f6:	bf00      	nop
   226f8:	20031268 	.word	0x20031268

000226fc <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   226fc:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   226fe:	4b04      	ldr	r3, [pc, #16]	; (22710 <cJSON_CreateObject+0x14>)
   22700:	6818      	ldr	r0, [r3, #0]
   22702:	f01d f9ec 	bl	3fade <cJSON_New_Item.isra.1>
    if (item)
   22706:	b108      	cbz	r0, 2270c <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   22708:	2340      	movs	r3, #64	; 0x40
   2270a:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   2270c:	bd08      	pop	{r3, pc}
   2270e:	bf00      	nop
   22710:	20031268 	.word	0x20031268

00022714 <cJSON_Init>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }

/**@brief Initialize cJSON by assigning function hooks. */
void cJSON_Init(void)
{
	_cjson_hooks.malloc_fn = malloc_fn_hook;
   22714:	4803      	ldr	r0, [pc, #12]	; (22724 <cJSON_Init+0x10>)
   22716:	4b04      	ldr	r3, [pc, #16]	; (22728 <cJSON_Init+0x14>)
   22718:	6003      	str	r3, [r0, #0]
	_cjson_hooks.free_fn = free_fn_hook;
   2271a:	4b04      	ldr	r3, [pc, #16]	; (2272c <cJSON_Init+0x18>)
   2271c:	6043      	str	r3, [r0, #4]

	cJSON_InitHooks(&_cjson_hooks);
   2271e:	f7ff bf05 	b.w	2252c <cJSON_InitHooks>
   22722:	bf00      	nop
   22724:	20023a1c 	.word	0x20023a1c
   22728:	0003fbab 	.word	0x0003fbab
   2272c:	0003fba7 	.word	0x0003fba7

00022730 <_bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   22730:	2200      	movs	r2, #0
{
   22732:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   22734:	4611      	mov	r1, r2
   22736:	202a      	movs	r0, #42	; 0x2a
   22738:	f7fd fab2 	bl	1fca0 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	init_ret = bsd_init();
   2273c:	f008 f91e 	bl	2a97c <bsd_init>
   22740:	4b01      	ldr	r3, [pc, #4]	; (22748 <_bsdlib_init+0x18>)
   22742:	6018      	str	r0, [r3, #0]
		 */
		return 0;
	}

	return init_ret;
}
   22744:	2000      	movs	r0, #0
   22746:	bd08      	pop	{r3, pc}
   22748:	20023a24 	.word	0x20023a24

0002274c <bsdlib_get_init_ret>:
}

int bsdlib_get_init_ret(void)
{
	return init_ret;
}
   2274c:	4b01      	ldr	r3, [pc, #4]	; (22754 <bsdlib_get_init_ret+0x8>)
   2274e:	6818      	ldr	r0, [r3, #0]
   22750:	4770      	bx	lr
   22752:	bf00      	nop
   22754:	20023a24 	.word	0x20023a24

00022758 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   22758:	b570      	push	{r4, r5, r6, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   2275a:	4b0d      	ldr	r3, [pc, #52]	; (22790 <thread_monitor_entry_get+0x38>)
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   2275c:	4c0d      	ldr	r4, [pc, #52]	; (22794 <thread_monitor_entry_get+0x3c>)
		entry_age = rpc_event_cnt - entry->cnt;
   2275e:	681a      	ldr	r2, [r3, #0]
   22760:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   22762:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   22764:	4623      	mov	r3, r4
		if (entry->id == id) {
   22766:	6819      	ldr	r1, [r3, #0]
   22768:	4281      	cmp	r1, r0
   2276a:	d00e      	beq.n	2278a <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   2276c:	b151      	cbz	r1, 22784 <thread_monitor_entry_get+0x2c>
		entry_age = rpc_event_cnt - entry->cnt;
   2276e:	6859      	ldr	r1, [r3, #4]
   22770:	1a51      	subs	r1, r2, r1
		if (entry_age > oldest_entry_age) {
   22772:	42b1      	cmp	r1, r6
   22774:	bfc4      	itt	gt
   22776:	461c      	movgt	r4, r3
   22778:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   2277a:	3d01      	subs	r5, #1
   2277c:	f103 0308 	add.w	r3, r3, #8
   22780:	d1f1      	bne.n	22766 <thread_monitor_entry_get+0xe>
   22782:	4623      	mov	r3, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   22784:	3a01      	subs	r2, #1
	new_entry->id = id;
   22786:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   22788:	605a      	str	r2, [r3, #4]

	return new_entry;
}
   2278a:	4618      	mov	r0, r3
   2278c:	bd70      	pop	{r4, r5, r6, pc}
   2278e:	bf00      	nop
   22790:	20023a28 	.word	0x20023a28
   22794:	20023a34 	.word	0x20023a34

00022798 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   22798:	4668      	mov	r0, sp
   2279a:	f020 0107 	bic.w	r1, r0, #7
   2279e:	468d      	mov	sp, r1
   227a0:	b519      	push	{r0, r3, r4, lr}
   227a2:	f01c fa66 	bl	3ec72 <z_arch_isr_direct_header>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   227a6:	4b0d      	ldr	r3, [pc, #52]	; (227dc <rpc_proxy_irq_handler+0x44>)
   227a8:	e8d3 2fef 	ldaex	r2, [r3]
   227ac:	3201      	adds	r2, #1
   227ae:	e8c3 2fe1 	stlex	r1, r2, [r3]
   227b2:	2900      	cmp	r1, #0
   227b4:	d1f8      	bne.n	227a8 <rpc_proxy_irq_handler+0x10>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   227b6:	f012 f8f9 	bl	349ac <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   227ba:	4b09      	ldr	r3, [pc, #36]	; (227e0 <rpc_proxy_irq_handler+0x48>)
   227bc:	681c      	ldr	r4, [r3, #0]
   227be:	b93c      	cbnz	r4, 227d0 <rpc_proxy_irq_handler+0x38>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   227c0:	f7fd faa0 	bl	1fd04 <_arch_isr_direct_pm>

#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   227c4:	f7fd f9c2 	bl	1fb4c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   227c8:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   227cc:	4685      	mov	sp, r0
   227ce:	4770      	bx	lr
   227d0:	1d20      	adds	r0, r4, #4
   227d2:	f017 fded 	bl	3a3b0 <z_impl_k_sem_give>
   227d6:	6824      	ldr	r4, [r4, #0]
	return node->next;
   227d8:	e7f1      	b.n	227be <rpc_proxy_irq_handler+0x26>
   227da:	bf00      	nop
   227dc:	20023a28 	.word	0x20023a28
   227e0:	20023a2c 	.word	0x20023a2c

000227e4 <bsd_os_timedwait>:
{
   227e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   227e8:	4688      	mov	r8, r1
   227ea:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
   227ec:	f01e fa32 	bl	40c54 <z_impl_k_uptime_get>
	if (*timeout == 0) {
   227f0:	f8d8 3000 	ldr.w	r3, [r8]
   227f4:	4606      	mov	r6, r0
   227f6:	2b00      	cmp	r3, #0
   227f8:	460f      	mov	r7, r1
   227fa:	d103      	bne.n	22804 <bsd_os_timedwait+0x20>
	z_impl_k_yield();
   227fc:	f017 fc4e 	bl	3a09c <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   22800:	203c      	movs	r0, #60	; 0x3c
   22802:	e06e      	b.n	228e2 <bsd_os_timedwait+0xfe>
		*timeout = K_FOREVER;
   22804:	bfbc      	itt	lt
   22806:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   2280a:	f8c8 3000 	strlt.w	r3, [r8]
	z_impl_k_sem_init(sem, initial_count, limit);
   2280e:	2201      	movs	r2, #1
   22810:	2100      	movs	r1, #0
   22812:	a802      	add	r0, sp, #8
   22814:	f017 fd96 	bl	3a344 <z_impl_k_sem_init>
   22818:	f10d 0a04 	add.w	sl, sp, #4
   2281c:	f04f 0320 	mov.w	r3, #32
   22820:	f3ef 8b11 	mrs	fp, BASEPRI
   22824:	f383 8811 	msr	BASEPRI, r3
   22828:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   2282c:	f017 fd84 	bl	3a338 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   22830:	f7ff ff92 	bl	22758 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   22834:	4933      	ldr	r1, [pc, #204]	; (22904 <bsd_os_timedwait+0x120>)
   22836:	6843      	ldr	r3, [r0, #4]
   22838:	680a      	ldr	r2, [r1, #0]
   2283a:	4689      	mov	r9, r1
   2283c:	4293      	cmp	r3, r2
   2283e:	f04f 0300 	mov.w	r3, #0
   22842:	d108      	bne.n	22856 <bsd_os_timedwait+0x72>
	parent->next = child;
   22844:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   22846:	4b30      	ldr	r3, [pc, #192]	; (22908 <bsd_os_timedwait+0x124>)
   22848:	685a      	ldr	r2, [r3, #4]
   2284a:	2a00      	cmp	r2, #0
   2284c:	d14c      	bne.n	228e8 <bsd_os_timedwait+0x104>
	list->head = node;
   2284e:	e9c3 aa00 	strd	sl, sl, [r3]
		allow_to_sleep = true;
   22852:	2301      	movs	r3, #1
   22854:	e000      	b.n	22858 <bsd_os_timedwait+0x74>
	entry->cnt = rpc_event_cnt;
   22856:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   22858:	f38b 8811 	msr	BASEPRI, fp
   2285c:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   22860:	2b00      	cmp	r3, #0
   22862:	d03d      	beq.n	228e0 <bsd_os_timedwait+0xfc>
	(void)k_sem_take(&thread.sem, *timeout);
   22864:	f8d8 1000 	ldr.w	r1, [r8]
	return z_impl_k_sem_take(sem, timeout);
   22868:	a802      	add	r0, sp, #8
   2286a:	f017 fde9 	bl	3a440 <z_impl_k_sem_take>
	__asm__ volatile(
   2286e:	f04f 0320 	mov.w	r3, #32
   22872:	f3ef 8b11 	mrs	fp, BASEPRI
   22876:	f383 8811 	msr	BASEPRI, r3
   2287a:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2287e:	2000      	movs	r0, #0
   22880:	4b21      	ldr	r3, [pc, #132]	; (22908 <bsd_os_timedwait+0x124>)
   22882:	681a      	ldr	r2, [r3, #0]
   22884:	b152      	cbz	r2, 2289c <bsd_os_timedwait+0xb8>
   22886:	4552      	cmp	r2, sl
   22888:	d139      	bne.n	228fe <bsd_os_timedwait+0x11a>
Z_GENLIST_REMOVE(slist, snode)
   2288a:	9901      	ldr	r1, [sp, #4]
   2288c:	bb88      	cbnz	r0, 228f2 <bsd_os_timedwait+0x10e>
   2288e:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   22890:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   22892:	4290      	cmp	r0, r2
   22894:	d100      	bne.n	22898 <bsd_os_timedwait+0xb4>
	list->tail = node;
   22896:	6059      	str	r1, [r3, #4]
	parent->next = child;
   22898:	2300      	movs	r3, #0
   2289a:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   2289c:	f017 fd4c 	bl	3a338 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   228a0:	f7ff ff5a 	bl	22758 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   228a4:	f8d9 3000 	ldr.w	r3, [r9]
   228a8:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   228aa:	f38b 8811 	msr	BASEPRI, fp
   228ae:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
   228b2:	f8d8 9000 	ldr.w	r9, [r8]
   228b6:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   228ba:	d011      	beq.n	228e0 <bsd_os_timedwait+0xfc>
	return z_impl_k_uptime_get();
   228bc:	f01e f9ca 	bl	40c54 <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
   228c0:	eb16 0209 	adds.w	r2, r6, r9
   228c4:	eb47 73e9 	adc.w	r3, r7, r9, asr #31
   228c8:	1a14      	subs	r4, r2, r0
   228ca:	eb63 0501 	sbc.w	r5, r3, r1
	*timeout = remaining > 0 ? remaining : 0;
   228ce:	2c00      	cmp	r4, #0
   228d0:	f175 0300 	sbcs.w	r3, r5, #0
   228d4:	bfb8      	it	lt
   228d6:	2400      	movlt	r4, #0
   228d8:	f8c8 4000 	str.w	r4, [r8]
	if (*timeout == 0) {
   228dc:	2c00      	cmp	r4, #0
   228de:	d08f      	beq.n	22800 <bsd_os_timedwait+0x1c>
	return 0;
   228e0:	2000      	movs	r0, #0
}
   228e2:	b009      	add	sp, #36	; 0x24
   228e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   228e8:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   228ec:	f8c3 a004 	str.w	sl, [r3, #4]
   228f0:	e7af      	b.n	22852 <bsd_os_timedwait+0x6e>
	parent->next = child;
   228f2:	6001      	str	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   228f4:	6859      	ldr	r1, [r3, #4]
   228f6:	4291      	cmp	r1, r2
	list->tail = node;
   228f8:	bf08      	it	eq
   228fa:	6058      	streq	r0, [r3, #4]
   228fc:	e7cc      	b.n	22898 <bsd_os_timedwait+0xb4>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   228fe:	4610      	mov	r0, r2
   22900:	6812      	ldr	r2, [r2, #0]
   22902:	e7bf      	b.n	22884 <bsd_os_timedwait+0xa0>
   22904:	20023a28 	.word	0x20023a28
   22908:	20023a2c 	.word	0x20023a2c

0002290c <bsd_os_errno_set>:
	switch (err_code) {
   2290c:	282d      	cmp	r0, #45	; 0x2d
{
   2290e:	b510      	push	{r4, lr}
   22910:	4604      	mov	r4, r0
	switch (err_code) {
   22912:	f000 8099 	beq.w	22a48 <bsd_os_errno_set+0x13c>
   22916:	dc48      	bgt.n	229aa <bsd_os_errno_set+0x9e>
   22918:	280e      	cmp	r0, #14
   2291a:	d009      	beq.n	22930 <bsd_os_errno_set+0x24>
   2291c:	dc11      	bgt.n	22942 <bsd_os_errno_set+0x36>
   2291e:	2808      	cmp	r0, #8
   22920:	d006      	beq.n	22930 <bsd_os_errno_set+0x24>
   22922:	dc09      	bgt.n	22938 <bsd_os_errno_set+0x2c>
   22924:	2802      	cmp	r0, #2
   22926:	d003      	beq.n	22930 <bsd_os_errno_set+0x24>
   22928:	2805      	cmp	r0, #5
   2292a:	d001      	beq.n	22930 <bsd_os_errno_set+0x24>
   2292c:	2801      	cmp	r0, #1
   2292e:	d119      	bne.n	22964 <bsd_os_errno_set+0x58>
		errno = ENOBUFS;
   22930:	f01c f9ef 	bl	3ed12 <__errno>
   22934:	6004      	str	r4, [r0, #0]
}
   22936:	bd10      	pop	{r4, pc}
	switch (err_code) {
   22938:	280c      	cmp	r0, #12
   2293a:	d0f9      	beq.n	22930 <bsd_os_errno_set+0x24>
   2293c:	dc6b      	bgt.n	22a16 <bsd_os_errno_set+0x10a>
   2293e:	2809      	cmp	r0, #9
   22940:	e7f5      	b.n	2292e <bsd_os_errno_set+0x22>
   22942:	2828      	cmp	r0, #40	; 0x28
   22944:	f000 80b7 	beq.w	22ab6 <bsd_os_errno_set+0x1aa>
   22948:	dc05      	bgt.n	22956 <bsd_os_errno_set+0x4a>
   2294a:	2818      	cmp	r0, #24
   2294c:	d0f0      	beq.n	22930 <bsd_os_errno_set+0x24>
   2294e:	2823      	cmp	r0, #35	; 0x23
   22950:	d066      	beq.n	22a20 <bsd_os_errno_set+0x114>
   22952:	2816      	cmp	r0, #22
   22954:	e7eb      	b.n	2292e <bsd_os_errno_set+0x22>
   22956:	282a      	cmp	r0, #42	; 0x2a
   22958:	d06a      	beq.n	22a30 <bsd_os_errno_set+0x124>
   2295a:	db65      	blt.n	22a28 <bsd_os_errno_set+0x11c>
   2295c:	282b      	cmp	r0, #43	; 0x2b
   2295e:	d06b      	beq.n	22a38 <bsd_os_errno_set+0x12c>
   22960:	282c      	cmp	r0, #44	; 0x2c
   22962:	d06d      	beq.n	22a40 <bsd_os_errno_set+0x134>
		__ASSERT(false, "Untranslated errno %d set by bsdlib!", err_code);
   22964:	f44f 73a2 	mov.w	r3, #324	; 0x144
   22968:	4a55      	ldr	r2, [pc, #340]	; (22ac0 <bsd_os_errno_set+0x1b4>)
   2296a:	4956      	ldr	r1, [pc, #344]	; (22ac4 <bsd_os_errno_set+0x1b8>)
   2296c:	4856      	ldr	r0, [pc, #344]	; (22ac8 <bsd_os_errno_set+0x1bc>)
   2296e:	f01b ffdd 	bl	3e92c <printk>
   22972:	4621      	mov	r1, r4
   22974:	4855      	ldr	r0, [pc, #340]	; (22acc <bsd_os_errno_set+0x1c0>)
   22976:	f01b ffd9 	bl	3e92c <printk>
   2297a:	f44f 71a2 	mov.w	r1, #324	; 0x144
   2297e:	4850      	ldr	r0, [pc, #320]	; (22ac0 <bsd_os_errno_set+0x1b4>)
   22980:	f01b ffe1 	bl	3e946 <assert_post_action>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   22984:	2301      	movs	r3, #1
   22986:	f04f 0000 	mov.w	r0, #0
   2298a:	4a51      	ldr	r2, [pc, #324]	; (22ad0 <bsd_os_errno_set+0x1c4>)
   2298c:	f363 0007 	bfi	r0, r3, #0, #8
   22990:	4b50      	ldr	r3, [pc, #320]	; (22ad4 <bsd_os_errno_set+0x1c8>)
   22992:	4951      	ldr	r1, [pc, #324]	; (22ad8 <bsd_os_errno_set+0x1cc>)
   22994:	1a9b      	subs	r3, r3, r2
   22996:	08db      	lsrs	r3, r3, #3
   22998:	f363 108f 	bfi	r0, r3, #6, #10
   2299c:	4622      	mov	r2, r4
   2299e:	f01b ffe2 	bl	3e966 <log_string_sync>
		errno = 0xBAADBAAD;
   229a2:	f01c f9b6 	bl	3ed12 <__errno>
   229a6:	4b4d      	ldr	r3, [pc, #308]	; (22adc <bsd_os_errno_set+0x1d0>)
   229a8:	e038      	b.n	22a1c <bsd_os_errno_set+0x110>
	switch (err_code) {
   229aa:	283c      	cmp	r0, #60	; 0x3c
   229ac:	d064      	beq.n	22a78 <bsd_os_errno_set+0x16c>
   229ae:	dc1d      	bgt.n	229ec <bsd_os_errno_set+0xe0>
   229b0:	2833      	cmp	r0, #51	; 0x33
   229b2:	d055      	beq.n	22a60 <bsd_os_errno_set+0x154>
   229b4:	dc09      	bgt.n	229ca <bsd_os_errno_set+0xbe>
   229b6:	2830      	cmp	r0, #48	; 0x30
   229b8:	d04a      	beq.n	22a50 <bsd_os_errno_set+0x144>
   229ba:	2832      	cmp	r0, #50	; 0x32
   229bc:	d04c      	beq.n	22a58 <bsd_os_errno_set+0x14c>
   229be:	282f      	cmp	r0, #47	; 0x2f
   229c0:	d1d0      	bne.n	22964 <bsd_os_errno_set+0x58>
		errno = EAFNOSUPPORT;
   229c2:	f01c f9a6 	bl	3ed12 <__errno>
   229c6:	236a      	movs	r3, #106	; 0x6a
   229c8:	e028      	b.n	22a1c <bsd_os_errno_set+0x110>
	switch (err_code) {
   229ca:	2836      	cmp	r0, #54	; 0x36
   229cc:	d04c      	beq.n	22a68 <bsd_os_errno_set+0x15c>
   229ce:	dc05      	bgt.n	229dc <bsd_os_errno_set+0xd0>
   229d0:	2834      	cmp	r0, #52	; 0x34
   229d2:	d1c7      	bne.n	22964 <bsd_os_errno_set+0x58>
		errno = ENETRESET;
   229d4:	f01c f99d 	bl	3ed12 <__errno>
   229d8:	237e      	movs	r3, #126	; 0x7e
   229da:	e01f      	b.n	22a1c <bsd_os_errno_set+0x110>
	switch (err_code) {
   229dc:	2838      	cmp	r0, #56	; 0x38
   229de:	d047      	beq.n	22a70 <bsd_os_errno_set+0x164>
   229e0:	2839      	cmp	r0, #57	; 0x39
   229e2:	d1bf      	bne.n	22964 <bsd_os_errno_set+0x58>
		errno = ENOTCONN;
   229e4:	f01c f995 	bl	3ed12 <__errno>
   229e8:	2380      	movs	r3, #128	; 0x80
   229ea:	e017      	b.n	22a1c <bsd_os_errno_set+0x110>
	switch (err_code) {
   229ec:	287d      	cmp	r0, #125	; 0x7d
   229ee:	d04f      	beq.n	22a90 <bsd_os_errno_set+0x184>
   229f0:	dc05      	bgt.n	229fe <bsd_os_errno_set+0xf2>
   229f2:	2870      	cmp	r0, #112	; 0x70
   229f4:	d044      	beq.n	22a80 <bsd_os_errno_set+0x174>
   229f6:	2873      	cmp	r0, #115	; 0x73
   229f8:	d046      	beq.n	22a88 <bsd_os_errno_set+0x17c>
   229fa:	2869      	cmp	r0, #105	; 0x69
   229fc:	e797      	b.n	2292e <bsd_os_errno_set+0x22>
   229fe:	287f      	cmp	r0, #127	; 0x7f
   22a00:	d04f      	beq.n	22aa2 <bsd_os_errno_set+0x196>
   22a02:	db49      	blt.n	22a98 <bsd_os_errno_set+0x18c>
   22a04:	2880      	cmp	r0, #128	; 0x80
   22a06:	d051      	beq.n	22aac <bsd_os_errno_set+0x1a0>
   22a08:	2881      	cmp	r0, #129	; 0x81
   22a0a:	d1ab      	bne.n	22964 <bsd_os_errno_set+0x58>
		errno = EKEYREJECTED;
   22a0c:	f01c f981 	bl	3ed12 <__errno>
   22a10:	f240 73d4 	movw	r3, #2004	; 0x7d4
   22a14:	e002      	b.n	22a1c <bsd_os_errno_set+0x110>
		errno = EACCES;
   22a16:	f01c f97c 	bl	3ed12 <__errno>
   22a1a:	230d      	movs	r3, #13
		errno = 0xBAADBAAD;
   22a1c:	6003      	str	r3, [r0, #0]
}
   22a1e:	e78a      	b.n	22936 <bsd_os_errno_set+0x2a>
		errno = EAGAIN;
   22a20:	f01c f977 	bl	3ed12 <__errno>
   22a24:	230b      	movs	r3, #11
   22a26:	e7f9      	b.n	22a1c <bsd_os_errno_set+0x110>
		errno = EPROTOTYPE;
   22a28:	f01c f973 	bl	3ed12 <__errno>
   22a2c:	236b      	movs	r3, #107	; 0x6b
   22a2e:	e7f5      	b.n	22a1c <bsd_os_errno_set+0x110>
		errno = ENOPROTOOPT;
   22a30:	f01c f96f 	bl	3ed12 <__errno>
   22a34:	236d      	movs	r3, #109	; 0x6d
   22a36:	e7f1      	b.n	22a1c <bsd_os_errno_set+0x110>
		errno = EPROTONOSUPPORT;
   22a38:	f01c f96b 	bl	3ed12 <__errno>
   22a3c:	237b      	movs	r3, #123	; 0x7b
   22a3e:	e7ed      	b.n	22a1c <bsd_os_errno_set+0x110>
		errno = ESOCKTNOSUPPORT;
   22a40:	f01c f967 	bl	3ed12 <__errno>
   22a44:	237c      	movs	r3, #124	; 0x7c
   22a46:	e7e9      	b.n	22a1c <bsd_os_errno_set+0x110>
		errno = EOPNOTSUPP;
   22a48:	f01c f963 	bl	3ed12 <__errno>
   22a4c:	235f      	movs	r3, #95	; 0x5f
   22a4e:	e7e5      	b.n	22a1c <bsd_os_errno_set+0x110>
		errno = EADDRINUSE;
   22a50:	f01c f95f 	bl	3ed12 <__errno>
   22a54:	2370      	movs	r3, #112	; 0x70
   22a56:	e7e1      	b.n	22a1c <bsd_os_errno_set+0x110>
		errno = ENETDOWN;
   22a58:	f01c f95b 	bl	3ed12 <__errno>
   22a5c:	2373      	movs	r3, #115	; 0x73
   22a5e:	e7dd      	b.n	22a1c <bsd_os_errno_set+0x110>
		errno = ENETUNREACH;
   22a60:	f01c f957 	bl	3ed12 <__errno>
   22a64:	2372      	movs	r3, #114	; 0x72
   22a66:	e7d9      	b.n	22a1c <bsd_os_errno_set+0x110>
		errno = ECONNRESET;
   22a68:	f01c f953 	bl	3ed12 <__errno>
   22a6c:	2368      	movs	r3, #104	; 0x68
   22a6e:	e7d5      	b.n	22a1c <bsd_os_errno_set+0x110>
		errno = EISCONN;
   22a70:	f01c f94f 	bl	3ed12 <__errno>
   22a74:	237f      	movs	r3, #127	; 0x7f
   22a76:	e7d1      	b.n	22a1c <bsd_os_errno_set+0x110>
		errno = ETIMEDOUT;
   22a78:	f01c f94b 	bl	3ed12 <__errno>
   22a7c:	2374      	movs	r3, #116	; 0x74
   22a7e:	e7cd      	b.n	22a1c <bsd_os_errno_set+0x110>
		errno = EHOSTDOWN;
   22a80:	f01c f947 	bl	3ed12 <__errno>
   22a84:	2375      	movs	r3, #117	; 0x75
   22a86:	e7c9      	b.n	22a1c <bsd_os_errno_set+0x110>
		errno = EINPROGRESS;
   22a88:	f01c f943 	bl	3ed12 <__errno>
   22a8c:	2377      	movs	r3, #119	; 0x77
   22a8e:	e7c5      	b.n	22a1c <bsd_os_errno_set+0x110>
		errno = ECANCELED;
   22a90:	f01c f93f 	bl	3ed12 <__errno>
   22a94:	238c      	movs	r3, #140	; 0x8c
   22a96:	e7c1      	b.n	22a1c <bsd_os_errno_set+0x110>
		errno = ENOKEY;
   22a98:	f01c f93b 	bl	3ed12 <__errno>
   22a9c:	f240 73d1 	movw	r3, #2001	; 0x7d1
   22aa0:	e7bc      	b.n	22a1c <bsd_os_errno_set+0x110>
		errno = EKEYEXPIRED;
   22aa2:	f01c f936 	bl	3ed12 <__errno>
   22aa6:	f240 73d2 	movw	r3, #2002	; 0x7d2
   22aaa:	e7b7      	b.n	22a1c <bsd_os_errno_set+0x110>
		errno = EKEYREVOKED;
   22aac:	f01c f931 	bl	3ed12 <__errno>
   22ab0:	f240 73d3 	movw	r3, #2003	; 0x7d3
   22ab4:	e7b2      	b.n	22a1c <bsd_os_errno_set+0x110>
		errno = EMSGSIZE;
   22ab6:	f01c f92c 	bl	3ed12 <__errno>
   22aba:	237a      	movs	r3, #122	; 0x7a
   22abc:	e7ae      	b.n	22a1c <bsd_os_errno_set+0x110>
   22abe:	bf00      	nop
   22ac0:	00046013 	.word	0x00046013
   22ac4:	00049224 	.word	0x00049224
   22ac8:	00044643 	.word	0x00044643
   22acc:	00046052 	.word	0x00046052
   22ad0:	00042314 	.word	0x00042314
   22ad4:	0004233c 	.word	0x0004233c
   22ad8:	00046079 	.word	0x00046079
   22adc:	baadbaad 	.word	0xbaadbaad

00022ae0 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   22ae4:	4b01      	ldr	r3, [pc, #4]	; (22aec <bsd_os_application_irq_set+0xc>)
   22ae6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   22aea:	4770      	bx	lr
   22aec:	e000e100 	.word	0xe000e100

00022af0 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   22af4:	4b01      	ldr	r3, [pc, #4]	; (22afc <bsd_os_application_irq_clear+0xc>)
   22af6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   22afa:	4770      	bx	lr
   22afc:	e000e100 	.word	0xe000e100

00022b00 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22b00:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   22b04:	4b01      	ldr	r3, [pc, #4]	; (22b0c <bsd_os_trace_irq_set+0xc>)
   22b06:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   22b0a:	4770      	bx	lr
   22b0c:	e000e100 	.word	0xe000e100

00022b10 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22b10:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   22b14:	4b01      	ldr	r3, [pc, #4]	; (22b1c <bsd_os_trace_irq_clear+0xc>)
   22b16:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   22b1a:	4770      	bx	lr
   22b1c:	e000e100 	.word	0xe000e100

00022b20 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   22b20:	b508      	push	{r3, lr}
	list->head = NULL;
   22b22:	2300      	movs	r3, #0
   22b24:	4a07      	ldr	r2, [pc, #28]	; (22b44 <bsd_os_init+0x24>)
	list->tail = NULL;
   22b26:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   22b2a:	4a07      	ldr	r2, [pc, #28]	; (22b48 <bsd_os_init+0x28>)
   22b2c:	e8d2 1fef 	ldaex	r1, [r2]
   22b30:	e8c2 3fe0 	stlex	r0, r3, [r2]
   22b34:	2800      	cmp	r0, #0
   22b36:	d1f9      	bne.n	22b2c <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   22b38:	f01d f86b 	bl	3fc12 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   22b3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   22b40:	f01d b85c 	b.w	3fbfc <trace_task_create>
   22b44:	20023a2c 	.word	0x20023a2c
   22b48:	20023a28 	.word	0x20023a28

00022b4c <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   22b4c:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   22b50:	d03c      	beq.n	22bcc <z_to_nrf_optname+0x80>
   22b52:	dc04      	bgt.n	22b5e <z_to_nrf_optname+0x12>
   22b54:	2801      	cmp	r0, #1
   22b56:	d044      	beq.n	22be2 <z_to_nrf_optname+0x96>
			break;
		}
		break;

	default:
		retval = -1;
   22b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		break;
	}

	return retval;
}
   22b5c:	4770      	bx	lr
	switch (z_in_level) {
   22b5e:	f240 2302 	movw	r3, #514	; 0x202
   22b62:	4298      	cmp	r0, r3
   22b64:	d052      	beq.n	22c0c <z_to_nrf_optname+0xc0>
   22b66:	f240 2303 	movw	r3, #515	; 0x203
   22b6a:	4298      	cmp	r0, r3
   22b6c:	d1f4      	bne.n	22b58 <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
   22b6e:	3901      	subs	r1, #1
   22b70:	2913      	cmp	r1, #19
   22b72:	d8f1      	bhi.n	22b58 <z_to_nrf_optname+0xc>
   22b74:	a301      	add	r3, pc, #4	; (adr r3, 22b7c <z_to_nrf_optname+0x30>)
   22b76:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   22b7a:	bf00      	nop
   22b7c:	00022c19 	.word	0x00022c19
   22b80:	00022bdd 	.word	0x00022bdd
   22b84:	00022bfd 	.word	0x00022bfd
   22b88:	00022bef 	.word	0x00022bef
   22b8c:	00022c01 	.word	0x00022c01
   22b90:	00022c05 	.word	0x00022c05
   22b94:	00022c09 	.word	0x00022c09
   22b98:	00022b59 	.word	0x00022b59
   22b9c:	00022b59 	.word	0x00022b59
   22ba0:	00022b59 	.word	0x00022b59
   22ba4:	00022b59 	.word	0x00022b59
   22ba8:	00022b59 	.word	0x00022b59
   22bac:	00022b59 	.word	0x00022b59
   22bb0:	00022b59 	.word	0x00022b59
   22bb4:	00022b59 	.word	0x00022b59
   22bb8:	00022b59 	.word	0x00022b59
   22bbc:	00022b59 	.word	0x00022b59
   22bc0:	00022b59 	.word	0x00022b59
   22bc4:	00022b59 	.word	0x00022b59
   22bc8:	00022bf3 	.word	0x00022bf3
		switch (z_in_optname) {
   22bcc:	3901      	subs	r1, #1
   22bce:	2905      	cmp	r1, #5
   22bd0:	d8c2      	bhi.n	22b58 <z_to_nrf_optname+0xc>
   22bd2:	e8df f001 	tbb	[pc, r1]
   22bd6:	1503      	.short	0x1503
   22bd8:	210c1917 	.word	0x210c1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   22bdc:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   22bde:	6013      	str	r3, [r2, #0]
   22be0:	e00a      	b.n	22bf8 <z_to_nrf_optname+0xac>
		switch (z_in_optname) {
   22be2:	2914      	cmp	r1, #20
   22be4:	d005      	beq.n	22bf2 <z_to_nrf_optname+0xa6>
   22be6:	2919      	cmp	r1, #25
   22be8:	d005      	beq.n	22bf6 <z_to_nrf_optname+0xaa>
   22bea:	2904      	cmp	r1, #4
   22bec:	d1b4      	bne.n	22b58 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   22bee:	2304      	movs	r3, #4
   22bf0:	e7f5      	b.n	22bde <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   22bf2:	2314      	movs	r3, #20
   22bf4:	e7f3      	b.n	22bde <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   22bf6:	6011      	str	r1, [r2, #0]
	int retval = 0;
   22bf8:	2000      	movs	r0, #0
			break;
   22bfa:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   22bfc:	2303      	movs	r3, #3
   22bfe:	e7ee      	b.n	22bde <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   22c00:	2305      	movs	r3, #5
   22c02:	e7ec      	b.n	22bde <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   22c04:	2306      	movs	r3, #6
   22c06:	e7ea      	b.n	22bde <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   22c08:	2307      	movs	r3, #7
   22c0a:	e7e8      	b.n	22bde <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   22c0c:	2902      	cmp	r1, #2
   22c0e:	d0e5      	beq.n	22bdc <z_to_nrf_optname+0x90>
   22c10:	2903      	cmp	r1, #3
   22c12:	d0f3      	beq.n	22bfc <z_to_nrf_optname+0xb0>
   22c14:	2901      	cmp	r1, #1
   22c16:	d19f      	bne.n	22b58 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   22c18:	2301      	movs	r3, #1
   22c1a:	e7e0      	b.n	22bde <z_to_nrf_optname+0x92>

00022c1c <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   22c1c:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   22c1e:	4b03      	ldr	r3, [pc, #12]	; (22c2c <nrf91_socket_iface_init+0x10>)
   22c20:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   22c22:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
   22c24:	4802      	ldr	r0, [pc, #8]	; (22c30 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   22c26:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
   22c28:	f7fc bc42 	b.w	1f4b0 <socket_offload_register>
   22c2c:	20023a84 	.word	0x20023a84
   22c30:	00042804 	.word	0x00042804

00022c34 <dk_set_leds_state.part.0>:
int dk_set_leds(u32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(u32_t leds_on_mask, u32_t leds_off_mask)
   22c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22c38:	4606      	mov	r6, r0
   22c3a:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   22c3c:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_write(led_devs[i],
   22c3e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 22ca8 <dk_set_leds_state.part.0+0x74>
						 led_pins[i].number, val);
   22c42:	f8df 9068 	ldr.w	r9, [pc, #104]	; 22cac <dk_set_leds_state.part.0+0x78>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   22c46:	fa26 f304 	lsr.w	r3, r6, r4
   22c4a:	fa27 f204 	lsr.w	r2, r7, r4
   22c4e:	431a      	orrs	r2, r3
   22c50:	07d2      	lsls	r2, r2, #31
   22c52:	d51d      	bpl.n	22c90 <dk_set_leds_state.part.0+0x5c>
						 led_pins[i].number, val);
   22c54:	eb09 02c4 	add.w	r2, r9, r4, lsl #3
			int err = gpio_pin_write(led_devs[i],
   22c58:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
   22c5c:	7912      	ldrb	r2, [r2, #4]
				   u32_t pin, u32_t value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->write(port, access_op, pin, value);
   22c5e:	6841      	ldr	r1, [r0, #4]
   22c60:	f003 0301 	and.w	r3, r3, #1
   22c64:	684d      	ldr	r5, [r1, #4]
   22c66:	2100      	movs	r1, #0
   22c68:	47a8      	blx	r5
			if (err) {
   22c6a:	4605      	mov	r5, r0
   22c6c:	b180      	cbz	r0, 22c90 <dk_set_leds_state.part.0+0x5c>
				LOG_ERR("Cannot write LED gpio");
   22c6e:	2301      	movs	r3, #1
   22c70:	f04f 0000 	mov.w	r0, #0
   22c74:	4a09      	ldr	r2, [pc, #36]	; (22c9c <dk_set_leds_state.part.0+0x68>)
   22c76:	f363 0007 	bfi	r0, r3, #0, #8
   22c7a:	4b09      	ldr	r3, [pc, #36]	; (22ca0 <dk_set_leds_state.part.0+0x6c>)
   22c7c:	4909      	ldr	r1, [pc, #36]	; (22ca4 <dk_set_leds_state.part.0+0x70>)
   22c7e:	1a9b      	subs	r3, r3, r2
   22c80:	08db      	lsrs	r3, r3, #3
   22c82:	f363 108f 	bfi	r0, r3, #6, #10
   22c86:	f01b fe6e 	bl	3e966 <log_string_sync>
			}
		}
	}

	return 0;
}
   22c8a:	4628      	mov	r0, r5
   22c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   22c90:	3401      	adds	r4, #1
   22c92:	2c04      	cmp	r4, #4
   22c94:	d1d7      	bne.n	22c46 <dk_set_leds_state.part.0+0x12>
	return 0;
   22c96:	2500      	movs	r5, #0
   22c98:	e7f7      	b.n	22c8a <dk_set_leds_state.part.0+0x56>
   22c9a:	bf00      	nop
   22c9c:	00042314 	.word	0x00042314
   22ca0:	00042364 	.word	0x00042364
   22ca4:	00046206 	.word	0x00046206
   22ca8:	20023ad0 	.word	0x20023ad0
   22cac:	00042864 	.word	0x00042864

00022cb0 <button_pressed>:
{
   22cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   22cb2:	f04f 0320 	mov.w	r3, #32
   22cb6:	f3ef 8511 	mrs	r5, BASEPRI
   22cba:	f383 8811 	msr	BASEPRI, r3
   22cbe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   22cc2:	4832      	ldr	r0, [pc, #200]	; (22d8c <button_pressed+0xdc>)
   22cc4:	f017 fc84 	bl	3a5d0 <z_spin_lock_valid>
   22cc8:	b960      	cbnz	r0, 22ce4 <button_pressed+0x34>
   22cca:	4931      	ldr	r1, [pc, #196]	; (22d90 <button_pressed+0xe0>)
   22ccc:	235f      	movs	r3, #95	; 0x5f
   22cce:	4a31      	ldr	r2, [pc, #196]	; (22d94 <button_pressed+0xe4>)
   22cd0:	4831      	ldr	r0, [pc, #196]	; (22d98 <button_pressed+0xe8>)
   22cd2:	f01b fe2b 	bl	3e92c <printk>
   22cd6:	4831      	ldr	r0, [pc, #196]	; (22d9c <button_pressed+0xec>)
   22cd8:	f01b fe28 	bl	3e92c <printk>
   22cdc:	215f      	movs	r1, #95	; 0x5f
   22cde:	482d      	ldr	r0, [pc, #180]	; (22d94 <button_pressed+0xe4>)
   22ce0:	f01b fe31 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   22ce4:	4829      	ldr	r0, [pc, #164]	; (22d8c <button_pressed+0xdc>)
   22ce6:	f017 fc91 	bl	3a60c <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   22cea:	2400      	movs	r4, #0
   22cec:	4e2c      	ldr	r6, [pc, #176]	; (22da0 <button_pressed+0xf0>)
			  button_pins[i].number);
   22cee:	4f2d      	ldr	r7, [pc, #180]	; (22da4 <button_pressed+0xf4>)
   22cf0:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
			err = gpio_pin_disable_callback(button_devs[i],
   22cf4:	f856 0b04 	ldr.w	r0, [r6], #4
   22cf8:	791a      	ldrb	r2, [r3, #4]
					      int access_op, u32_t pin)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->disable_callback == NULL) {
   22cfa:	6843      	ldr	r3, [r0, #4]
   22cfc:	695b      	ldr	r3, [r3, #20]
   22cfe:	b1ab      	cbz	r3, 22d2c <button_pressed+0x7c>
		return -ENOTSUP;
	}

	return api->disable_callback(port, access_op, pin);
   22d00:	2100      	movs	r1, #0
   22d02:	4798      	blx	r3
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   22d04:	3401      	adds	r4, #1
   22d06:	2c04      	cmp	r4, #4
   22d08:	d013      	beq.n	22d32 <button_pressed+0x82>
   22d0a:	2800      	cmp	r0, #0
   22d0c:	d0f0      	beq.n	22cf0 <button_pressed+0x40>
		LOG_ERR("Cannot disable callbacks");
   22d0e:	2301      	movs	r3, #1
   22d10:	f04f 0000 	mov.w	r0, #0
   22d14:	4a24      	ldr	r2, [pc, #144]	; (22da8 <button_pressed+0xf8>)
   22d16:	f363 0007 	bfi	r0, r3, #0, #8
   22d1a:	4b24      	ldr	r3, [pc, #144]	; (22dac <button_pressed+0xfc>)
   22d1c:	4924      	ldr	r1, [pc, #144]	; (22db0 <button_pressed+0x100>)
   22d1e:	1a9b      	subs	r3, r3, r2
   22d20:	08db      	lsrs	r3, r3, #3
   22d22:	f363 108f 	bfi	r0, r3, #6, #10
   22d26:	f01b fe1e 	bl	3e966 <log_string_sync>
   22d2a:	e004      	b.n	22d36 <button_pressed+0x86>
		return -ENOTSUP;
   22d2c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22d30:	e7e8      	b.n	22d04 <button_pressed+0x54>
	if (err) {
   22d32:	2800      	cmp	r0, #0
   22d34:	d1eb      	bne.n	22d0e <button_pressed+0x5e>
	switch (state) {
   22d36:	4b1f      	ldr	r3, [pc, #124]	; (22db4 <button_pressed+0x104>)
   22d38:	781a      	ldrb	r2, [r3, #0]
   22d3a:	b9da      	cbnz	r2, 22d74 <button_pressed+0xc4>
		state = STATE_SCANNING;
   22d3c:	2201      	movs	r2, #1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   22d3e:	491e      	ldr	r1, [pc, #120]	; (22db8 <button_pressed+0x108>)
   22d40:	481e      	ldr	r0, [pc, #120]	; (22dbc <button_pressed+0x10c>)
   22d42:	701a      	strb	r2, [r3, #0]
   22d44:	f017 fea2 	bl	3aa8c <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   22d48:	4810      	ldr	r0, [pc, #64]	; (22d8c <button_pressed+0xdc>)
   22d4a:	f017 fc4f 	bl	3a5ec <z_spin_unlock_valid>
   22d4e:	b960      	cbnz	r0, 22d6a <button_pressed+0xba>
   22d50:	491b      	ldr	r1, [pc, #108]	; (22dc0 <button_pressed+0x110>)
   22d52:	2372      	movs	r3, #114	; 0x72
   22d54:	4a0f      	ldr	r2, [pc, #60]	; (22d94 <button_pressed+0xe4>)
   22d56:	4810      	ldr	r0, [pc, #64]	; (22d98 <button_pressed+0xe8>)
   22d58:	f01b fde8 	bl	3e92c <printk>
   22d5c:	4819      	ldr	r0, [pc, #100]	; (22dc4 <button_pressed+0x114>)
   22d5e:	f01b fde5 	bl	3e92c <printk>
   22d62:	2172      	movs	r1, #114	; 0x72
   22d64:	480b      	ldr	r0, [pc, #44]	; (22d94 <button_pressed+0xe4>)
   22d66:	f01b fdee 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   22d6a:	f385 8811 	msr	BASEPRI, r5
   22d6e:	f3bf 8f6f 	isb	sy
}
   22d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   22d74:	23e2      	movs	r3, #226	; 0xe2
   22d76:	4a14      	ldr	r2, [pc, #80]	; (22dc8 <button_pressed+0x118>)
   22d78:	4914      	ldr	r1, [pc, #80]	; (22dcc <button_pressed+0x11c>)
   22d7a:	4807      	ldr	r0, [pc, #28]	; (22d98 <button_pressed+0xe8>)
   22d7c:	f01b fdd6 	bl	3e92c <printk>
   22d80:	21e2      	movs	r1, #226	; 0xe2
   22d82:	4811      	ldr	r0, [pc, #68]	; (22dc8 <button_pressed+0x118>)
   22d84:	f01b fddf 	bl	3e946 <assert_post_action>
		break;
   22d88:	e7de      	b.n	22d48 <button_pressed+0x98>
   22d8a:	bf00      	nop
   22d8c:	20023ae0 	.word	0x20023ae0
   22d90:	00044e5a 	.word	0x00044e5a
   22d94:	00044e3b 	.word	0x00044e3b
   22d98:	00044643 	.word	0x00044643
   22d9c:	00044e6f 	.word	0x00044e6f
   22da0:	20023a88 	.word	0x20023a88
   22da4:	00042844 	.word	0x00042844
   22da8:	00042314 	.word	0x00042314
   22dac:	00042364 	.word	0x00042364
   22db0:	000460b2 	.word	0x000460b2
   22db4:	2002a371 	.word	0x2002a371
   22db8:	20023a9c 	.word	0x20023a9c
   22dbc:	2002a25c 	.word	0x2002a25c
   22dc0:	00044e84 	.word	0x00044e84
   22dc4:	00044e9b 	.word	0x00044e9b
   22dc8:	000460cb 	.word	0x000460cb
   22dcc:	00049224 	.word	0x00049224

00022dd0 <buttons_scan_fn>:
{
   22dd0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	u32_t ret = 0;
   22dd4:	2400      	movs	r4, #0
   22dd6:	4e60      	ldr	r6, [pc, #384]	; (22f58 <buttons_scan_fn+0x188>)
			button_devs[i], button_pins[i].number, &val)) {
   22dd8:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 22fb0 <buttons_scan_fn+0x1e0>
{
   22ddc:	46b0      	mov	r8, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   22dde:	4625      	mov	r5, r4
   22de0:	464f      	mov	r7, r9
			button_devs[i], button_pins[i].number, &val)) {
   22de2:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
		if (gpio_pin_read(
   22de6:	f858 0b04 	ldr.w	r0, [r8], #4
   22dea:	791a      	ldrb	r2, [r3, #4]
	return api->read(port, access_op, pin, value);
   22dec:	6843      	ldr	r3, [r0, #4]
   22dee:	2100      	movs	r1, #0
   22df0:	f8d3 a008 	ldr.w	sl, [r3, #8]
   22df4:	ab01      	add	r3, sp, #4
   22df6:	47d0      	blx	sl
   22df8:	2800      	cmp	r0, #0
   22dfa:	d03b      	beq.n	22e74 <buttons_scan_fn+0xa4>
			LOG_ERR("Cannot read gpio pin");
   22dfc:	2301      	movs	r3, #1
   22dfe:	f04f 0000 	mov.w	r0, #0
   22e02:	4a56      	ldr	r2, [pc, #344]	; (22f5c <buttons_scan_fn+0x18c>)
   22e04:	f363 0007 	bfi	r0, r3, #0, #8
   22e08:	4b55      	ldr	r3, [pc, #340]	; (22f60 <buttons_scan_fn+0x190>)
   22e0a:	4956      	ldr	r1, [pc, #344]	; (22f64 <buttons_scan_fn+0x194>)
   22e0c:	1a9b      	subs	r3, r3, r2
   22e0e:	08db      	lsrs	r3, r3, #3
   22e10:	f363 108f 	bfi	r0, r3, #6, #10
   22e14:	f01b fda7 	bl	3e966 <log_string_sync>
			return 0;
   22e18:	2400      	movs	r4, #0
   22e1a:	4b53      	ldr	r3, [pc, #332]	; (22f68 <buttons_scan_fn+0x198>)
   22e1c:	e8d3 2fef 	ldaex	r2, [r3]
   22e20:	e8c3 4fe1 	stlex	r1, r4, [r3]
   22e24:	2900      	cmp	r1, #0
   22e26:	d1f9      	bne.n	22e1c <buttons_scan_fn+0x4c>
	if (!initial_run) {
   22e28:	4b50      	ldr	r3, [pc, #320]	; (22f6c <buttons_scan_fn+0x19c>)
   22e2a:	4d51      	ldr	r5, [pc, #324]	; (22f70 <buttons_scan_fn+0x1a0>)
   22e2c:	781a      	ldrb	r2, [r3, #0]
   22e2e:	bb52      	cbnz	r2, 22e86 <buttons_scan_fn+0xb6>
		if (button_handler_cb != NULL) {
   22e30:	4b50      	ldr	r3, [pc, #320]	; (22f74 <buttons_scan_fn+0x1a4>)
   22e32:	681b      	ldr	r3, [r3, #0]
   22e34:	b12b      	cbz	r3, 22e42 <buttons_scan_fn+0x72>
			if (button_scan != last_button_scan) {
   22e36:	6829      	ldr	r1, [r5, #0]
   22e38:	42a1      	cmp	r1, r4
   22e3a:	d002      	beq.n	22e42 <buttons_scan_fn+0x72>
				button_handler_cb(button_scan, has_changed);
   22e3c:	4061      	eors	r1, r4
   22e3e:	4620      	mov	r0, r4
   22e40:	4798      	blx	r3
	last_button_scan = button_scan;
   22e42:	602c      	str	r4, [r5, #0]
	if (button_scan != 0) {
   22e44:	b314      	cbz	r4, 22e8c <buttons_scan_fn+0xbc>
   22e46:	220a      	movs	r2, #10
   22e48:	494b      	ldr	r1, [pc, #300]	; (22f78 <buttons_scan_fn+0x1a8>)
   22e4a:	484c      	ldr	r0, [pc, #304]	; (22f7c <buttons_scan_fn+0x1ac>)
   22e4c:	f017 fe1e 	bl	3aa8c <k_delayed_work_submit_to_queue>
		if (err) {
   22e50:	b168      	cbz	r0, 22e6e <buttons_scan_fn+0x9e>
			LOG_ERR("Cannot add work to workqueue");
   22e52:	2301      	movs	r3, #1
   22e54:	f04f 0000 	mov.w	r0, #0
   22e58:	4a40      	ldr	r2, [pc, #256]	; (22f5c <buttons_scan_fn+0x18c>)
   22e5a:	f363 0007 	bfi	r0, r3, #0, #8
   22e5e:	4b40      	ldr	r3, [pc, #256]	; (22f60 <buttons_scan_fn+0x190>)
   22e60:	4947      	ldr	r1, [pc, #284]	; (22f80 <buttons_scan_fn+0x1b0>)
   22e62:	1a9b      	subs	r3, r3, r2
   22e64:	08db      	lsrs	r3, r3, #3
   22e66:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Cannot enable callbacks");
   22e6a:	f01b fd7c 	bl	3e966 <log_string_sync>
}
   22e6e:	b002      	add	sp, #8
   22e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   22e74:	9b01      	ldr	r3, [sp, #4]
   22e76:	b913      	cbnz	r3, 22e7e <buttons_scan_fn+0xae>
			ret |= 1U << i;
   22e78:	2301      	movs	r3, #1
   22e7a:	40ab      	lsls	r3, r5
   22e7c:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   22e7e:	3501      	adds	r5, #1
   22e80:	2d04      	cmp	r5, #4
   22e82:	d1ae      	bne.n	22de2 <buttons_scan_fn+0x12>
   22e84:	e7c9      	b.n	22e1a <buttons_scan_fn+0x4a>
		initial_run = false;
   22e86:	2200      	movs	r2, #0
   22e88:	701a      	strb	r2, [r3, #0]
   22e8a:	e7da      	b.n	22e42 <buttons_scan_fn+0x72>
	__asm__ volatile(
   22e8c:	f04f 0320 	mov.w	r3, #32
   22e90:	f3ef 8811 	mrs	r8, BASEPRI
   22e94:	f383 8811 	msr	BASEPRI, r3
   22e98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   22e9c:	4839      	ldr	r0, [pc, #228]	; (22f84 <buttons_scan_fn+0x1b4>)
   22e9e:	f017 fb97 	bl	3a5d0 <z_spin_lock_valid>
   22ea2:	b960      	cbnz	r0, 22ebe <buttons_scan_fn+0xee>
   22ea4:	4938      	ldr	r1, [pc, #224]	; (22f88 <buttons_scan_fn+0x1b8>)
   22ea6:	235f      	movs	r3, #95	; 0x5f
   22ea8:	4a38      	ldr	r2, [pc, #224]	; (22f8c <buttons_scan_fn+0x1bc>)
   22eaa:	4839      	ldr	r0, [pc, #228]	; (22f90 <buttons_scan_fn+0x1c0>)
   22eac:	f01b fd3e 	bl	3e92c <printk>
   22eb0:	4838      	ldr	r0, [pc, #224]	; (22f94 <buttons_scan_fn+0x1c4>)
   22eb2:	f01b fd3b 	bl	3e92c <printk>
   22eb6:	215f      	movs	r1, #95	; 0x5f
   22eb8:	4834      	ldr	r0, [pc, #208]	; (22f8c <buttons_scan_fn+0x1bc>)
   22eba:	f01b fd44 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   22ebe:	4831      	ldr	r0, [pc, #196]	; (22f84 <buttons_scan_fn+0x1b4>)
   22ec0:	f017 fba4 	bl	3a60c <z_spin_lock_set_owner>
		switch (state) {
   22ec4:	4b34      	ldr	r3, [pc, #208]	; (22f98 <buttons_scan_fn+0x1c8>)
   22ec6:	781a      	ldrb	r2, [r3, #0]
   22ec8:	2a01      	cmp	r2, #1
   22eca:	d138      	bne.n	22f3e <buttons_scan_fn+0x16e>
			state = STATE_WAITING;
   22ecc:	2200      	movs	r2, #0
   22ece:	701a      	strb	r2, [r3, #0]
			  button_pins[i].number);
   22ed0:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
			err = gpio_pin_enable_callback(button_devs[i],
   22ed4:	f856 0b04 	ldr.w	r0, [r6], #4
   22ed8:	791a      	ldrb	r2, [r3, #4]
	if (api->enable_callback == NULL) {
   22eda:	6843      	ldr	r3, [r0, #4]
   22edc:	691b      	ldr	r3, [r3, #16]
   22ede:	b35b      	cbz	r3, 22f38 <buttons_scan_fn+0x168>
	return api->enable_callback(port, access_op, pin);
   22ee0:	2100      	movs	r1, #0
   22ee2:	4798      	blx	r3
   22ee4:	4605      	mov	r5, r0
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   22ee6:	3401      	adds	r4, #1
   22ee8:	2c04      	cmp	r4, #4
   22eea:	d001      	beq.n	22ef0 <buttons_scan_fn+0x120>
   22eec:	2d00      	cmp	r5, #0
   22eee:	d0ef      	beq.n	22ed0 <buttons_scan_fn+0x100>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   22ef0:	4824      	ldr	r0, [pc, #144]	; (22f84 <buttons_scan_fn+0x1b4>)
   22ef2:	f017 fb7b 	bl	3a5ec <z_spin_unlock_valid>
   22ef6:	b960      	cbnz	r0, 22f12 <buttons_scan_fn+0x142>
   22ef8:	4928      	ldr	r1, [pc, #160]	; (22f9c <buttons_scan_fn+0x1cc>)
   22efa:	2372      	movs	r3, #114	; 0x72
   22efc:	4a23      	ldr	r2, [pc, #140]	; (22f8c <buttons_scan_fn+0x1bc>)
   22efe:	4824      	ldr	r0, [pc, #144]	; (22f90 <buttons_scan_fn+0x1c0>)
   22f00:	f01b fd14 	bl	3e92c <printk>
   22f04:	4826      	ldr	r0, [pc, #152]	; (22fa0 <buttons_scan_fn+0x1d0>)
   22f06:	f01b fd11 	bl	3e92c <printk>
   22f0a:	2172      	movs	r1, #114	; 0x72
   22f0c:	481f      	ldr	r0, [pc, #124]	; (22f8c <buttons_scan_fn+0x1bc>)
   22f0e:	f01b fd1a 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   22f12:	f388 8811 	msr	BASEPRI, r8
   22f16:	f3bf 8f6f 	isb	sy
		if (err) {
   22f1a:	2d00      	cmp	r5, #0
   22f1c:	d0a7      	beq.n	22e6e <buttons_scan_fn+0x9e>
			LOG_ERR("Cannot enable callbacks");
   22f1e:	2301      	movs	r3, #1
   22f20:	f04f 0000 	mov.w	r0, #0
   22f24:	4a0d      	ldr	r2, [pc, #52]	; (22f5c <buttons_scan_fn+0x18c>)
   22f26:	f363 0007 	bfi	r0, r3, #0, #8
   22f2a:	4b0d      	ldr	r3, [pc, #52]	; (22f60 <buttons_scan_fn+0x190>)
   22f2c:	491d      	ldr	r1, [pc, #116]	; (22fa4 <buttons_scan_fn+0x1d4>)
   22f2e:	1a9b      	subs	r3, r3, r2
   22f30:	08db      	lsrs	r3, r3, #3
   22f32:	f363 108f 	bfi	r0, r3, #6, #10
   22f36:	e798      	b.n	22e6a <buttons_scan_fn+0x9a>
		return -ENOTSUP;
   22f38:	f06f 0585 	mvn.w	r5, #133	; 0x85
   22f3c:	e7d3      	b.n	22ee6 <buttons_scan_fn+0x116>
			__ASSERT_NO_MSG(false);
   22f3e:	2398      	movs	r3, #152	; 0x98
   22f40:	4a19      	ldr	r2, [pc, #100]	; (22fa8 <buttons_scan_fn+0x1d8>)
   22f42:	491a      	ldr	r1, [pc, #104]	; (22fac <buttons_scan_fn+0x1dc>)
   22f44:	4812      	ldr	r0, [pc, #72]	; (22f90 <buttons_scan_fn+0x1c0>)
   22f46:	f01b fcf1 	bl	3e92c <printk>
   22f4a:	2198      	movs	r1, #152	; 0x98
   22f4c:	4816      	ldr	r0, [pc, #88]	; (22fa8 <buttons_scan_fn+0x1d8>)
   22f4e:	f01b fcfa 	bl	3e946 <assert_post_action>
		int err = 0;
   22f52:	2500      	movs	r5, #0
			break;
   22f54:	e7cc      	b.n	22ef0 <buttons_scan_fn+0x120>
   22f56:	bf00      	nop
   22f58:	20023a88 	.word	0x20023a88
   22f5c:	00042314 	.word	0x00042314
   22f60:	00042364 	.word	0x00042364
   22f64:	00046124 	.word	0x00046124
   22f68:	20023ae4 	.word	0x20023ae4
   22f6c:	20031498 	.word	0x20031498
   22f70:	20023ac8 	.word	0x20023ac8
   22f74:	20023a98 	.word	0x20023a98
   22f78:	20023a9c 	.word	0x20023a9c
   22f7c:	2002a25c 	.word	0x2002a25c
   22f80:	00046139 	.word	0x00046139
   22f84:	20023ae0 	.word	0x20023ae0
   22f88:	00044e5a 	.word	0x00044e5a
   22f8c:	00044e3b 	.word	0x00044e3b
   22f90:	00044643 	.word	0x00044643
   22f94:	00044e6f 	.word	0x00044e6f
   22f98:	2002a371 	.word	0x2002a371
   22f9c:	00044e84 	.word	0x00044e84
   22fa0:	00044e9b 	.word	0x00044e9b
   22fa4:	00046156 	.word	0x00046156
   22fa8:	000460cb 	.word	0x000460cb
   22fac:	00049224 	.word	0x00049224
   22fb0:	00042844 	.word	0x00042844

00022fb4 <dk_leds_init>:
{
   22fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   22fb6:	2500      	movs	r5, #0
   22fb8:	4c1d      	ldr	r4, [pc, #116]	; (23030 <dk_leds_init+0x7c>)
   22fba:	4f1e      	ldr	r7, [pc, #120]	; (23034 <dk_leds_init+0x80>)
		led_devs[i] = device_get_binding(led_pins[i].port);
   22fbc:	6820      	ldr	r0, [r4, #0]
   22fbe:	f015 f96f 	bl	382a0 <z_impl_device_get_binding>
   22fc2:	f847 0b04 	str.w	r0, [r7], #4
		if (!led_devs[i]) {
   22fc6:	b988      	cbnz	r0, 22fec <dk_leds_init+0x38>
			LOG_ERR("Cannot bind gpio device");
   22fc8:	2301      	movs	r3, #1
   22fca:	f04f 0000 	mov.w	r0, #0
   22fce:	4a1a      	ldr	r2, [pc, #104]	; (23038 <dk_leds_init+0x84>)
   22fd0:	f363 0007 	bfi	r0, r3, #0, #8
   22fd4:	4b19      	ldr	r3, [pc, #100]	; (2303c <dk_leds_init+0x88>)
   22fd6:	491a      	ldr	r1, [pc, #104]	; (23040 <dk_leds_init+0x8c>)
   22fd8:	1a9b      	subs	r3, r3, r2
   22fda:	08db      	lsrs	r3, r3, #3
   22fdc:	f363 108f 	bfi	r0, r3, #6, #10
   22fe0:	f01b fcc1 	bl	3e966 <log_string_sync>
			return -ENODEV;
   22fe4:	f06f 0612 	mvn.w	r6, #18
}
   22fe8:	4630      	mov	r0, r6
   22fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   22fec:	7922      	ldrb	r2, [r4, #4]
	return api->config(port, access_op, pin, flags);
   22fee:	6843      	ldr	r3, [r0, #4]
   22ff0:	2100      	movs	r1, #0
   22ff2:	681e      	ldr	r6, [r3, #0]
   22ff4:	2301      	movs	r3, #1
   22ff6:	47b0      	blx	r6
		if (err) {
   22ff8:	4606      	mov	r6, r0
   22ffa:	b170      	cbz	r0, 2301a <dk_leds_init+0x66>
			LOG_ERR("Cannot configure LED gpio");
   22ffc:	2301      	movs	r3, #1
   22ffe:	f04f 0000 	mov.w	r0, #0
   23002:	4a0d      	ldr	r2, [pc, #52]	; (23038 <dk_leds_init+0x84>)
   23004:	f363 0007 	bfi	r0, r3, #0, #8
   23008:	4b0c      	ldr	r3, [pc, #48]	; (2303c <dk_leds_init+0x88>)
   2300a:	490e      	ldr	r1, [pc, #56]	; (23044 <dk_leds_init+0x90>)
   2300c:	1a9b      	subs	r3, r3, r2
   2300e:	08db      	lsrs	r3, r3, #3
   23010:	f363 108f 	bfi	r0, r3, #6, #10
   23014:	f01b fca7 	bl	3e966 <log_string_sync>
			return err;
   23018:	e7e6      	b.n	22fe8 <dk_leds_init+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   2301a:	3501      	adds	r5, #1
   2301c:	2d04      	cmp	r5, #4
   2301e:	f104 0408 	add.w	r4, r4, #8
   23022:	d1cb      	bne.n	22fbc <dk_leds_init+0x8>
}
   23024:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   23028:	210f      	movs	r1, #15
   2302a:	f7ff be03 	b.w	22c34 <dk_set_leds_state.part.0>
   2302e:	bf00      	nop
   23030:	00042864 	.word	0x00042864
   23034:	20023ad0 	.word	0x20023ad0
   23038:	00042314 	.word	0x00042314
   2303c:	00042364 	.word	0x00042364
   23040:	000461d4 	.word	0x000461d4
   23044:	000461ec 	.word	0x000461ec

00023048 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23048:	4b05      	ldr	r3, [pc, #20]	; (23060 <dk_read_buttons+0x18>)
   2304a:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   2304e:	b100      	cbz	r0, 23052 <dk_read_buttons+0xa>
		*button_state = current_state;
   23050:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   23052:	4804      	ldr	r0, [pc, #16]	; (23064 <dk_read_buttons+0x1c>)
   23054:	b111      	cbz	r1, 2305c <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   23056:	6802      	ldr	r2, [r0, #0]
   23058:	405a      	eors	r2, r3
   2305a:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   2305c:	6003      	str	r3, [r0, #0]
}
   2305e:	4770      	bx	lr
   23060:	20023ae4 	.word	0x20023ae4
   23064:	20023acc 	.word	0x20023acc

00023068 <dk_buttons_init>:
{
   23068:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2306c:	4d64      	ldr	r5, [pc, #400]	; (23200 <dk_buttons_init+0x198>)
   2306e:	4f65      	ldr	r7, [pc, #404]	; (23204 <dk_buttons_init+0x19c>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   23070:	2600      	movs	r6, #0
	button_handler_cb = button_handler;
   23072:	46b9      	mov	r9, r7
   23074:	46a8      	mov	r8, r5
   23076:	4b64      	ldr	r3, [pc, #400]	; (23208 <dk_buttons_init+0x1a0>)
   23078:	6018      	str	r0, [r3, #0]
		button_devs[i] = device_get_binding(button_pins[i].port);
   2307a:	6828      	ldr	r0, [r5, #0]
   2307c:	f015 f910 	bl	382a0 <z_impl_device_get_binding>
   23080:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   23084:	b990      	cbnz	r0, 230ac <dk_buttons_init+0x44>
			LOG_ERR("Cannot bind gpio device");
   23086:	2301      	movs	r3, #1
   23088:	f04f 0000 	mov.w	r0, #0
   2308c:	4a5f      	ldr	r2, [pc, #380]	; (2320c <dk_buttons_init+0x1a4>)
   2308e:	f363 0007 	bfi	r0, r3, #0, #8
   23092:	4b5f      	ldr	r3, [pc, #380]	; (23210 <dk_buttons_init+0x1a8>)
   23094:	495f      	ldr	r1, [pc, #380]	; (23214 <dk_buttons_init+0x1ac>)
   23096:	1a9b      	subs	r3, r3, r2
   23098:	08db      	lsrs	r3, r3, #3
   2309a:	f363 108f 	bfi	r0, r3, #6, #10
   2309e:	f01b fc62 	bl	3e966 <log_string_sync>
			return -ENODEV;
   230a2:	f06f 0412 	mvn.w	r4, #18
}
   230a6:	4620      	mov	r0, r4
   230a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   230ac:	792a      	ldrb	r2, [r5, #4]
   230ae:	6843      	ldr	r3, [r0, #4]
   230b0:	2100      	movs	r1, #0
   230b2:	681c      	ldr	r4, [r3, #0]
   230b4:	f44f 7380 	mov.w	r3, #256	; 0x100
   230b8:	47a0      	blx	r4
		if (err) {
   230ba:	4604      	mov	r4, r0
   230bc:	b170      	cbz	r0, 230dc <dk_buttons_init+0x74>
			LOG_ERR("Cannot configure button gpio");
   230be:	2301      	movs	r3, #1
   230c0:	f04f 0000 	mov.w	r0, #0
   230c4:	4a51      	ldr	r2, [pc, #324]	; (2320c <dk_buttons_init+0x1a4>)
   230c6:	f363 0007 	bfi	r0, r3, #0, #8
   230ca:	4b51      	ldr	r3, [pc, #324]	; (23210 <dk_buttons_init+0x1a8>)
   230cc:	4952      	ldr	r1, [pc, #328]	; (23218 <dk_buttons_init+0x1b0>)
   230ce:	1a9b      	subs	r3, r3, r2
   230d0:	08db      	lsrs	r3, r3, #3
   230d2:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Cannot add work to workqueue");
   230d6:	f01b fc46 	bl	3e966 <log_string_sync>
		return err;
   230da:	e7e4      	b.n	230a6 <dk_buttons_init+0x3e>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   230dc:	3601      	adds	r6, #1
   230de:	2e04      	cmp	r6, #4
   230e0:	f105 0508 	add.w	r5, r5, #8
   230e4:	d1c9      	bne.n	2307a <dk_buttons_init+0x12>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   230e6:	4605      	mov	r5, r0
   230e8:	4e46      	ldr	r6, [pc, #280]	; (23204 <dk_buttons_init+0x19c>)
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   230ea:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
   230ee:	f856 0b04 	ldr.w	r0, [r6], #4
   230f2:	791a      	ldrb	r2, [r3, #4]
   230f4:	6843      	ldr	r3, [r0, #4]
   230f6:	2100      	movs	r1, #0
   230f8:	681c      	ldr	r4, [r3, #0]
   230fa:	f44f 7381 	mov.w	r3, #258	; 0x102
   230fe:	47a0      	blx	r4
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   23100:	3501      	adds	r5, #1
   23102:	2d04      	cmp	r5, #4
   23104:	4604      	mov	r4, r0
   23106:	d00e      	beq.n	23126 <dk_buttons_init+0xbe>
   23108:	2800      	cmp	r0, #0
   2310a:	d0ee      	beq.n	230ea <dk_buttons_init+0x82>
		LOG_ERR("Cannot set interrupt mode");
   2310c:	2301      	movs	r3, #1
   2310e:	f04f 0000 	mov.w	r0, #0
   23112:	4a3e      	ldr	r2, [pc, #248]	; (2320c <dk_buttons_init+0x1a4>)
   23114:	f363 0007 	bfi	r0, r3, #0, #8
   23118:	4b3d      	ldr	r3, [pc, #244]	; (23210 <dk_buttons_init+0x1a8>)
   2311a:	4940      	ldr	r1, [pc, #256]	; (2321c <dk_buttons_init+0x1b4>)
   2311c:	1a9b      	subs	r3, r3, r2
   2311e:	08db      	lsrs	r3, r3, #3
   23120:	f363 108f 	bfi	r0, r3, #6, #10
   23124:	e7d7      	b.n	230d6 <dk_buttons_init+0x6e>
	if (err) {
   23126:	2800      	cmp	r0, #0
   23128:	d1f0      	bne.n	2310c <dk_buttons_init+0xa4>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2312a:	4605      	mov	r5, r0
	u32_t pin_mask = 0;
   2312c:	4681      	mov	r9, r0
		pin_mask |= BIT(button_pins[i].number);
   2312e:	f04f 0b01 	mov.w	fp, #1
   23132:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 23204 <dk_buttons_init+0x19c>
			button_pins[i].number);
   23136:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
		err = gpio_pin_disable_callback(button_devs[i],
   2313a:	f85a 0b04 	ldr.w	r0, [sl], #4
			button_pins[i].number);
   2313e:	791e      	ldrb	r6, [r3, #4]
	if (api->disable_callback == NULL) {
   23140:	6843      	ldr	r3, [r0, #4]
   23142:	695b      	ldr	r3, [r3, #20]
   23144:	b18b      	cbz	r3, 2316a <dk_buttons_init+0x102>
	return api->disable_callback(port, access_op, pin);
   23146:	4632      	mov	r2, r6
   23148:	2100      	movs	r1, #0
   2314a:	4798      	blx	r3
		if (err) {
   2314c:	4604      	mov	r4, r0
   2314e:	b178      	cbz	r0, 23170 <dk_buttons_init+0x108>
			LOG_ERR("Cannot disable callbacks()");
   23150:	2301      	movs	r3, #1
   23152:	f04f 0000 	mov.w	r0, #0
   23156:	4a2d      	ldr	r2, [pc, #180]	; (2320c <dk_buttons_init+0x1a4>)
   23158:	f363 0007 	bfi	r0, r3, #0, #8
   2315c:	4b2c      	ldr	r3, [pc, #176]	; (23210 <dk_buttons_init+0x1a8>)
   2315e:	4930      	ldr	r1, [pc, #192]	; (23220 <dk_buttons_init+0x1b8>)
   23160:	1a9b      	subs	r3, r3, r2
   23162:	08db      	lsrs	r3, r3, #3
   23164:	f363 108f 	bfi	r0, r3, #6, #10
   23168:	e7b5      	b.n	230d6 <dk_buttons_init+0x6e>
		return -ENOTSUP;
   2316a:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2316e:	e7ef      	b.n	23150 <dk_buttons_init+0xe8>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   23170:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   23172:	fa0b f606 	lsl.w	r6, fp, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   23176:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   23178:	ea49 0906 	orr.w	r9, r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2317c:	d1db      	bne.n	23136 <dk_buttons_init+0xce>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2317e:	4606      	mov	r6, r0
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   23180:	4d28      	ldr	r5, [pc, #160]	; (23224 <dk_buttons_init+0x1bc>)
   23182:	4b29      	ldr	r3, [pc, #164]	; (23228 <dk_buttons_init+0x1c0>)
	callback->pin_mask = pin_mask;
   23184:	e9c5 3901 	strd	r3, r9, [r5, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   23188:	f857 0b04 	ldr.w	r0, [r7], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
   2318c:	6843      	ldr	r3, [r0, #4]
   2318e:	68db      	ldr	r3, [r3, #12]
   23190:	b18b      	cbz	r3, 231b6 <dk_buttons_init+0x14e>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   23192:	2201      	movs	r2, #1
   23194:	4629      	mov	r1, r5
   23196:	4798      	blx	r3
		if (err) {
   23198:	4604      	mov	r4, r0
   2319a:	b178      	cbz	r0, 231bc <dk_buttons_init+0x154>
			LOG_ERR("Cannot add callback");
   2319c:	2301      	movs	r3, #1
   2319e:	f04f 0000 	mov.w	r0, #0
   231a2:	4a1a      	ldr	r2, [pc, #104]	; (2320c <dk_buttons_init+0x1a4>)
   231a4:	f363 0007 	bfi	r0, r3, #0, #8
   231a8:	4b19      	ldr	r3, [pc, #100]	; (23210 <dk_buttons_init+0x1a8>)
   231aa:	4920      	ldr	r1, [pc, #128]	; (2322c <dk_buttons_init+0x1c4>)
   231ac:	1a9b      	subs	r3, r3, r2
   231ae:	08db      	lsrs	r3, r3, #3
   231b0:	f363 108f 	bfi	r0, r3, #6, #10
   231b4:	e78f      	b.n	230d6 <dk_buttons_init+0x6e>
		return -ENOTSUP;
   231b6:	f06f 0485 	mvn.w	r4, #133	; 0x85
   231ba:	e7ef      	b.n	2319c <dk_buttons_init+0x134>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   231bc:	3601      	adds	r6, #1
   231be:	2e04      	cmp	r6, #4
   231c0:	d1e2      	bne.n	23188 <dk_buttons_init+0x120>
	k_delayed_work_init(&buttons_scan, buttons_scan_fn);
   231c2:	491b      	ldr	r1, [pc, #108]	; (23230 <dk_buttons_init+0x1c8>)
   231c4:	481b      	ldr	r0, [pc, #108]	; (23234 <dk_buttons_init+0x1cc>)
   231c6:	f01d fd39 	bl	40c3c <k_delayed_work_init>
	state = STATE_SCANNING;
   231ca:	2201      	movs	r2, #1
   231cc:	4b1a      	ldr	r3, [pc, #104]	; (23238 <dk_buttons_init+0x1d0>)
   231ce:	4919      	ldr	r1, [pc, #100]	; (23234 <dk_buttons_init+0x1cc>)
   231d0:	701a      	strb	r2, [r3, #0]
   231d2:	481a      	ldr	r0, [pc, #104]	; (2323c <dk_buttons_init+0x1d4>)
   231d4:	4622      	mov	r2, r4
   231d6:	f017 fc59 	bl	3aa8c <k_delayed_work_submit_to_queue>
	if (err) {
   231da:	4604      	mov	r4, r0
   231dc:	b160      	cbz	r0, 231f8 <dk_buttons_init+0x190>
		LOG_ERR("Cannot add work to workqueue");
   231de:	2301      	movs	r3, #1
   231e0:	f04f 0000 	mov.w	r0, #0
   231e4:	4a09      	ldr	r2, [pc, #36]	; (2320c <dk_buttons_init+0x1a4>)
   231e6:	f363 0007 	bfi	r0, r3, #0, #8
   231ea:	4b09      	ldr	r3, [pc, #36]	; (23210 <dk_buttons_init+0x1a8>)
   231ec:	4914      	ldr	r1, [pc, #80]	; (23240 <dk_buttons_init+0x1d8>)
   231ee:	1a9b      	subs	r3, r3, r2
   231f0:	08db      	lsrs	r3, r3, #3
   231f2:	f363 108f 	bfi	r0, r3, #6, #10
   231f6:	e76e      	b.n	230d6 <dk_buttons_init+0x6e>
	dk_read_buttons(NULL, NULL);
   231f8:	4601      	mov	r1, r0
   231fa:	f7ff ff25 	bl	23048 <dk_read_buttons>
	return 0;
   231fe:	e752      	b.n	230a6 <dk_buttons_init+0x3e>
   23200:	00042844 	.word	0x00042844
   23204:	20023a88 	.word	0x20023a88
   23208:	20023a98 	.word	0x20023a98
   2320c:	00042314 	.word	0x00042314
   23210:	00042364 	.word	0x00042364
   23214:	000461d4 	.word	0x000461d4
   23218:	0004616e 	.word	0x0004616e
   2321c:	0004618b 	.word	0x0004618b
   23220:	000461a5 	.word	0x000461a5
   23224:	20023abc 	.word	0x20023abc
   23228:	00022cb1 	.word	0x00022cb1
   2322c:	000461c0 	.word	0x000461c0
   23230:	00022dd1 	.word	0x00022dd1
   23234:	20023a9c 	.word	0x20023a9c
   23238:	2002a371 	.word	0x2002a371
   2323c:	2002a25c 	.word	0x2002a25c
   23240:	00046139 	.word	0x00046139

00023244 <dk_get_buttons>:
   23244:	4b01      	ldr	r3, [pc, #4]	; (2324c <dk_get_buttons+0x8>)
   23246:	e8d3 0faf 	lda	r0, [r3]
}
   2324a:	4770      	bx	lr
   2324c:	20023ae4 	.word	0x20023ae4

00023250 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   23250:	4b0b      	ldr	r3, [pc, #44]	; (23280 <find_node+0x30>)
{
   23252:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   23254:	681b      	ldr	r3, [r3, #0]
   23256:	b153      	cbz	r3, 2326e <find_node+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   23258:	2500      	movs	r5, #0
   2325a:	461c      	mov	r4, r3
   2325c:	681b      	ldr	r3, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   2325e:	6866      	ldr	r6, [r4, #4]
   23260:	428e      	cmp	r6, r1
   23262:	d106      	bne.n	23272 <find_node+0x22>
   23264:	68a6      	ldr	r6, [r4, #8]
   23266:	4296      	cmp	r6, r2
   23268:	d103      	bne.n	23272 <find_node+0x22>
			*prev_out = prev;
			return curr;
   2326a:	4623      	mov	r3, r4
			*prev_out = prev;
   2326c:	6005      	str	r5, [r0, #0]
		}
		prev = curr;
	}
	return NULL;
}
   2326e:	4618      	mov	r0, r3
   23270:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   23272:	2b00      	cmp	r3, #0
   23274:	d0fb      	beq.n	2326e <find_node+0x1e>
   23276:	4625      	mov	r5, r4
   23278:	461c      	mov	r4, r3
   2327a:	681b      	ldr	r3, [r3, #0]
   2327c:	e7ef      	b.n	2325e <find_node+0xe>
   2327e:	bf00      	nop
   23280:	20023ae8 	.word	0x20023ae8

00023284 <module_init>:

	k_mutex_unlock(&list_mtx);
}

static int module_init(struct device *dev)
{
   23284:	b510      	push	{r4, lr}
	list->head = NULL;
   23286:	2400      	movs	r4, #0
   23288:	4b03      	ldr	r3, [pc, #12]	; (23298 <module_init+0x14>)
	ARG_UNUSED(dev);

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
   2328a:	4804      	ldr	r0, [pc, #16]	; (2329c <module_init+0x18>)
	list->tail = NULL;
   2328c:	e9c3 4400 	strd	r4, r4, [r3]
   23290:	f005 f866 	bl	28360 <at_cmd_set_notification_handler>
	return 0;
}
   23294:	4620      	mov	r0, r4
   23296:	bd10      	pop	{r4, pc}
   23298:	20023ae8 	.word	0x20023ae8
   2329c:	000232a1 	.word	0x000232a1

000232a0 <notif_dispatch>:
{
   232a0:	b538      	push	{r3, r4, r5, lr}
   232a2:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   232a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   232a8:	480a      	ldr	r0, [pc, #40]	; (232d4 <notif_dispatch+0x34>)
   232aa:	f015 fcfb 	bl	38ca4 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   232ae:	4b0a      	ldr	r3, [pc, #40]	; (232d8 <notif_dispatch+0x38>)
   232b0:	681b      	ldr	r3, [r3, #0]
   232b2:	b923      	cbnz	r3, 232be <notif_dispatch+0x1e>
}
   232b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_mutex_unlock(mutex);
   232b8:	4806      	ldr	r0, [pc, #24]	; (232d4 <notif_dispatch+0x34>)
   232ba:	f015 bdcd 	b.w	38e58 <z_impl_k_mutex_unlock>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   232be:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   232c0:	689a      	ldr	r2, [r3, #8]
   232c2:	4629      	mov	r1, r5
   232c4:	6858      	ldr	r0, [r3, #4]
   232c6:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   232c8:	2c00      	cmp	r4, #0
   232ca:	d0f3      	beq.n	232b4 <notif_dispatch+0x14>
   232cc:	4623      	mov	r3, r4
   232ce:	6824      	ldr	r4, [r4, #0]
   232d0:	e7f6      	b.n	232c0 <notif_dispatch+0x20>
   232d2:	bf00      	nop
   232d4:	20031638 	.word	0x20031638
   232d8:	20023ae8 	.word	0x20023ae8

000232dc <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   232dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   232de:	4606      	mov	r6, r0
	if (handler == NULL) {
   232e0:	460d      	mov	r5, r1
   232e2:	b361      	cbz	r1, 2333e <at_notif_register_handler+0x62>
	return z_impl_k_mutex_lock(mutex, timeout);
   232e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   232e8:	4816      	ldr	r0, [pc, #88]	; (23344 <at_notif_register_handler+0x68>)
   232ea:	f015 fcdb 	bl	38ca4 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   232ee:	462a      	mov	r2, r5
   232f0:	4631      	mov	r1, r6
   232f2:	a801      	add	r0, sp, #4
   232f4:	f7ff ffac 	bl	23250 <find_node>
   232f8:	4604      	mov	r4, r0
   232fa:	b120      	cbz	r0, 23306 <at_notif_register_handler+0x2a>
	z_impl_k_mutex_unlock(mutex);
   232fc:	4811      	ldr	r0, [pc, #68]	; (23344 <at_notif_register_handler+0x68>)
   232fe:	f015 fdab 	bl	38e58 <z_impl_k_mutex_unlock>
	return 0;
   23302:	2000      	movs	r0, #0
		LOG_DBG("context=0x%08X, handler=0x%08X", (u32_t)context,
			(u32_t)handler);
		return -EINVAL;
	}
	return append_notif_handler(context, handler);
   23304:	e009      	b.n	2331a <at_notif_register_handler+0x3e>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   23306:	200c      	movs	r0, #12
   23308:	f015 fb64 	bl	389d4 <k_malloc>
   2330c:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   2330e:	b930      	cbnz	r0, 2331e <at_notif_register_handler+0x42>
   23310:	480c      	ldr	r0, [pc, #48]	; (23344 <at_notif_register_handler+0x68>)
   23312:	f015 fda1 	bl	38e58 <z_impl_k_mutex_unlock>
		return -ENOBUFS;
   23316:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   2331a:	b002      	add	sp, #8
   2331c:	bd70      	pop	{r4, r5, r6, pc}
__ssp_bos_icheck3(memset, void *, int)
   2331e:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   23320:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   23322:	4a09      	ldr	r2, [pc, #36]	; (23348 <at_notif_register_handler+0x6c>)
   23324:	6044      	str	r4, [r0, #4]
   23326:	6084      	str	r4, [r0, #8]
	parent->next = child;
   23328:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   2332a:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   2332c:	e9c3 6501 	strd	r6, r5, [r3, #4]
   23330:	b911      	cbnz	r1, 23338 <at_notif_register_handler+0x5c>
	list->head = node;
   23332:	e9c2 3300 	strd	r3, r3, [r2]
   23336:	e7e1      	b.n	232fc <at_notif_register_handler+0x20>
	parent->next = child;
   23338:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2333a:	6053      	str	r3, [r2, #4]
   2333c:	e7de      	b.n	232fc <at_notif_register_handler+0x20>
		return -EINVAL;
   2333e:	f06f 0015 	mvn.w	r0, #21
   23342:	e7ea      	b.n	2331a <at_notif_register_handler+0x3e>
   23344:	20031638 	.word	0x20031638
   23348:	20023ae8 	.word	0x20023ae8

0002334c <at_notif_deregister_handler>:

int at_notif_deregister_handler(void *context, at_notif_handler_t handler)
{
   2334c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2334e:	4605      	mov	r5, r0
	if (handler == NULL) {
   23350:	460c      	mov	r4, r1
   23352:	b359      	cbz	r1, 233ac <at_notif_deregister_handler+0x60>
	struct notif_handler *curr, *prev = NULL;
   23354:	2300      	movs	r3, #0
   23356:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   23358:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2335c:	4815      	ldr	r0, [pc, #84]	; (233b4 <at_notif_deregister_handler+0x68>)
   2335e:	f015 fca1 	bl	38ca4 <z_impl_k_mutex_lock>
	curr = find_node(&prev, ctx, handler);
   23362:	4622      	mov	r2, r4
   23364:	4629      	mov	r1, r5
   23366:	a801      	add	r0, sp, #4
   23368:	f7ff ff72 	bl	23250 <find_node>
	if (curr == NULL) {
   2336c:	b930      	cbnz	r0, 2337c <at_notif_deregister_handler+0x30>
	z_impl_k_mutex_unlock(mutex);
   2336e:	4811      	ldr	r0, [pc, #68]	; (233b4 <at_notif_deregister_handler+0x68>)
   23370:	f015 fd72 	bl	38e58 <z_impl_k_mutex_unlock>
		return -ENXIO;
   23374:	f06f 0005 	mvn.w	r0, #5
		LOG_DBG("context=0x%08X, handler=0x%08X", (u32_t)context,
			(u32_t)handler);
		return -EINVAL;
	}
	return remove_notif_handler(context, handler);
}
   23378:	b003      	add	sp, #12
   2337a:	bd30      	pop	{r4, r5, pc}
	sys_slist_remove(&handler_list, &prev->node, &curr->node);
   2337c:	9a01      	ldr	r2, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   2337e:	6801      	ldr	r1, [r0, #0]
   23380:	4b0d      	ldr	r3, [pc, #52]	; (233b8 <at_notif_deregister_handler+0x6c>)
   23382:	b96a      	cbnz	r2, 233a0 <at_notif_deregister_handler+0x54>
   23384:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   23386:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   23388:	4290      	cmp	r0, r2
   2338a:	d100      	bne.n	2338e <at_notif_deregister_handler+0x42>
	list->tail = node;
   2338c:	6059      	str	r1, [r3, #4]
	parent->next = child;
   2338e:	2400      	movs	r4, #0
   23390:	6004      	str	r4, [r0, #0]
	k_free(curr);
   23392:	f01d fb4e 	bl	40a32 <k_free>
   23396:	4807      	ldr	r0, [pc, #28]	; (233b4 <at_notif_deregister_handler+0x68>)
   23398:	f015 fd5e 	bl	38e58 <z_impl_k_mutex_unlock>
	return 0;
   2339c:	4620      	mov	r0, r4
	return remove_notif_handler(context, handler);
   2339e:	e7eb      	b.n	23378 <at_notif_deregister_handler+0x2c>
   233a0:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   233a2:	6859      	ldr	r1, [r3, #4]
   233a4:	4288      	cmp	r0, r1
	list->tail = node;
   233a6:	bf08      	it	eq
   233a8:	605a      	streq	r2, [r3, #4]
   233aa:	e7f0      	b.n	2338e <at_notif_deregister_handler+0x42>
		return -EINVAL;
   233ac:	f06f 0015 	mvn.w	r0, #21
   233b0:	e7e2      	b.n	23378 <at_notif_deregister_handler+0x2c>
   233b2:	bf00      	nop
   233b4:	20031638 	.word	0x20031638
   233b8:	20023ae8 	.word	0x20023ae8

000233bc <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(char *str)
{
   233bc:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   233be:	4d05      	ldr	r5, [pc, #20]	; (233d4 <write_uart_string+0x18>)
   233c0:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   233c2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   233c6:	b901      	cbnz	r1, 233ca <write_uart_string+0xe>
	}
}
   233c8:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   233ca:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
   233cc:	6843      	ldr	r3, [r0, #4]
   233ce:	685b      	ldr	r3, [r3, #4]
   233d0:	4798      	blx	r3
   233d2:	e7f6      	b.n	233c2 <write_uart_string+0x6>
   233d4:	20023bc4 	.word	0x20023bc4

000233d8 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   233d8:	b500      	push	{lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   233da:	4923      	ldr	r1, [pc, #140]	; (23468 <cmd_send+0x90>)
{
   233dc:	b089      	sub	sp, #36	; 0x24
	err = at_cmd_write(at_buf, at_buf,
   233de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   233e2:	f10d 030b 	add.w	r3, sp, #11
   233e6:	4608      	mov	r0, r1
   233e8:	f004 ff98 	bl	2831c <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   233ec:	1e02      	subs	r2, r0, #0
   233ee:	da12      	bge.n	23416 <cmd_send+0x3e>
		LOG_ERR("Error while processing AT command: %d", err);
   233f0:	2301      	movs	r3, #1
   233f2:	f04f 0000 	mov.w	r0, #0
   233f6:	491d      	ldr	r1, [pc, #116]	; (2346c <cmd_send+0x94>)
   233f8:	f363 0007 	bfi	r0, r3, #0, #8
   233fc:	4b1c      	ldr	r3, [pc, #112]	; (23470 <cmd_send+0x98>)
   233fe:	1a5b      	subs	r3, r3, r1
   23400:	08db      	lsrs	r3, r3, #3
   23402:	f363 108f 	bfi	r0, r3, #6, #10
   23406:	491b      	ldr	r1, [pc, #108]	; (23474 <cmd_send+0x9c>)
   23408:	f01b faad 	bl	3e966 <log_string_sync>
		state = AT_CMD_ERROR;
   2340c:	2301      	movs	r3, #1
   2340e:	f88d 300b 	strb.w	r3, [sp, #11]
	case AT_CMD_OK:
		write_uart_string(at_buf);
		write_uart_string(OK_STR);
		break;
	case AT_CMD_ERROR:
		write_uart_string(ERROR_STR);
   23412:	4819      	ldr	r0, [pc, #100]	; (23478 <cmd_send+0xa0>)
   23414:	e012      	b.n	2343c <cmd_send+0x64>
	switch (state) {
   23416:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2341a:	2b03      	cmp	r3, #3
   2341c:	d810      	bhi.n	23440 <cmd_send+0x68>
   2341e:	a101      	add	r1, pc, #4	; (adr r1, 23424 <cmd_send+0x4c>)
   23420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   23424:	00023435 	.word	0x00023435
   23428:	00023413 	.word	0x00023413
   2342c:	0002344f 	.word	0x0002344f
   23430:	00023461 	.word	0x00023461
		write_uart_string(at_buf);
   23434:	480c      	ldr	r0, [pc, #48]	; (23468 <cmd_send+0x90>)
   23436:	f7ff ffc1 	bl	233bc <write_uart_string>
		write_uart_string(OK_STR);
   2343a:	4810      	ldr	r0, [pc, #64]	; (2347c <cmd_send+0xa4>)
		sprintf(str, "+CMS: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME: %d\r\n", err);
		write_uart_string(str);
   2343c:	f7ff ffbe 	bl	233bc <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   23440:	4b0f      	ldr	r3, [pc, #60]	; (23480 <cmd_send+0xa8>)
   23442:	6818      	ldr	r0, [r3, #0]
		z_arch_syscall_invoke1(*(u32_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   23444:	f01c ffbb 	bl	403be <z_impl_uart_irq_rx_enable>
}
   23448:	b009      	add	sp, #36	; 0x24
   2344a:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str, "+CMS: %d\r\n", err);
   2344e:	4b0d      	ldr	r3, [pc, #52]	; (23484 <cmd_send+0xac>)
   23450:	9200      	str	r2, [sp, #0]
		sprintf(str, "+CME: %d\r\n", err);
   23452:	2213      	movs	r2, #19
   23454:	2100      	movs	r1, #0
   23456:	a803      	add	r0, sp, #12
   23458:	f01d fddb 	bl	41012 <__sprintf_chk>
		write_uart_string(str);
   2345c:	a803      	add	r0, sp, #12
   2345e:	e7ed      	b.n	2343c <cmd_send+0x64>
		sprintf(str, "+CME: %d\r\n", err);
   23460:	9200      	str	r2, [sp, #0]
   23462:	4b09      	ldr	r3, [pc, #36]	; (23488 <cmd_send+0xb0>)
   23464:	e7f5      	b.n	23452 <cmd_send+0x7a>
   23466:	bf00      	nop
   23468:	2002a372 	.word	0x2002a372
   2346c:	00042314 	.word	0x00042314
   23470:	0004231c 	.word	0x0004231c
   23474:	000462be 	.word	0x000462be
   23478:	000462e9 	.word	0x000462e9
   2347c:	000462e4 	.word	0x000462e4
   23480:	20023bc4 	.word	0x20023bc4
   23484:	000462f1 	.word	0x000462f1
   23488:	000462fc 	.word	0x000462fc

0002348c <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(struct device *dev)
{
   2348c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   23490:	4605      	mov	r5, r0
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
   23492:	6843      	ldr	r3, [r0, #4]
   23494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   23496:	b103      	cbz	r3, 2349a <isr+0xe>
		return api->irq_update(dev);
   23498:	4798      	blx	r3
	if (api->irq_rx_ready) {
   2349a:	686b      	ldr	r3, [r5, #4]
   2349c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2349e:	b1c3      	cbz	r3, 234d2 <isr+0x46>
		return api->irq_rx_ready(dev);
   234a0:	4628      	mov	r0, r5
   234a2:	4798      	blx	r3
	u8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   234a4:	b1a8      	cbz	r0, 234d2 <isr+0x46>
   234a6:	f8df 913c 	ldr.w	r9, [pc, #316]	; 235e4 <isr+0x158>
   234aa:	4e43      	ldr	r6, [pc, #268]	; (235b8 <isr+0x12c>)
   234ac:	46c8      	mov	r8, r9
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   234ae:	4b43      	ldr	r3, [pc, #268]	; (235bc <isr+0x130>)
		if (at_cmd_len > 0) {
   234b0:	4c43      	ldr	r4, [pc, #268]	; (235c0 <isr+0x134>)
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   234b2:	1af6      	subs	r6, r6, r3
   234b4:	f3c6 06c9 	ubfx	r6, r6, #3, #10
   234b8:	e8d9 3faf 	lda	r3, [r9]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   234bc:	07db      	lsls	r3, r3, #31
   234be:	d408      	bmi.n	234d2 <isr+0x46>
	if (api->fifo_read) {
   234c0:	686b      	ldr	r3, [r5, #4]
   234c2:	699b      	ldr	r3, [r3, #24]
   234c4:	b12b      	cbz	r3, 234d2 <isr+0x46>
		return api->fifo_read(dev, rx_data, size);
   234c6:	2201      	movs	r2, #1
   234c8:	f10d 0107 	add.w	r1, sp, #7
   234cc:	4628      	mov	r0, r5
   234ce:	4798      	blx	r3
   234d0:	b910      	cbnz	r0, 234d8 <isr+0x4c>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   234d2:	b003      	add	sp, #12
   234d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uart_rx_handler(character);
   234d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
	switch (character) {
   234dc:	2a08      	cmp	r2, #8
   234de:	d001      	beq.n	234e4 <isr+0x58>
   234e0:	2a7f      	cmp	r2, #127	; 0x7f
   234e2:	d105      	bne.n	234f0 <isr+0x64>
		if (at_cmd_len > 0) {
   234e4:	6823      	ldr	r3, [r4, #0]
   234e6:	2b00      	cmp	r3, #0
   234e8:	d0e6      	beq.n	234b8 <isr+0x2c>
			at_cmd_len--;
   234ea:	3b01      	subs	r3, #1
   234ec:	6023      	str	r3, [r4, #0]
   234ee:	e7e3      	b.n	234b8 <isr+0x2c>
	if (!inside_quotes) {
   234f0:	4934      	ldr	r1, [pc, #208]	; (235c4 <isr+0x138>)
   234f2:	780b      	ldrb	r3, [r1, #0]
   234f4:	2b00      	cmp	r3, #0
   234f6:	d140      	bne.n	2357a <isr+0xee>
		switch (character) {
   234f8:	2a0a      	cmp	r2, #10
   234fa:	d031      	beq.n	23560 <isr+0xd4>
   234fc:	2a0d      	cmp	r2, #13
   234fe:	d025      	beq.n	2354c <isr+0xc0>
   23500:	2a00      	cmp	r2, #0
   23502:	d138      	bne.n	23576 <isr+0xea>
			if (term_mode == MODE_NULL_TERM) {
   23504:	4b30      	ldr	r3, [pc, #192]	; (235c8 <isr+0x13c>)
   23506:	781b      	ldrb	r3, [r3, #0]
   23508:	2b00      	cmp	r3, #0
   2350a:	d1d5      	bne.n	234b8 <isr+0x2c>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   2350c:	2300      	movs	r3, #0
   2350e:	6822      	ldr	r2, [r4, #0]
   23510:	482e      	ldr	r0, [pc, #184]	; (235cc <isr+0x140>)
	inside_quotes = false;
   23512:	700b      	strb	r3, [r1, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   23514:	5483      	strb	r3, [r0, r2]
	cr_state = false;
   23516:	4a2e      	ldr	r2, [pc, #184]	; (235d0 <isr+0x144>)
	at_cmd_len = 0;
   23518:	6023      	str	r3, [r4, #0]
	cr_state = false;
   2351a:	7013      	strb	r3, [r2, #0]
	if (at_buf[0]) {
   2351c:	7803      	ldrb	r3, [r0, #0]
   2351e:	2b00      	cmp	r3, #0
   23520:	d0ca      	beq.n	234b8 <isr+0x2c>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   23522:	4b2c      	ldr	r3, [pc, #176]	; (235d4 <isr+0x148>)
   23524:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   23526:	6843      	ldr	r3, [r0, #4]
   23528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2352a:	b103      	cbz	r3, 2352e <isr+0xa2>
		api->irq_rx_disable(dev);
   2352c:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2352e:	e8d8 3fef 	ldaex	r3, [r8]
   23532:	f043 0201 	orr.w	r2, r3, #1
   23536:	e8c8 2fe1 	stlex	r1, r2, [r8]
   2353a:	2900      	cmp	r1, #0
   2353c:	d1f7      	bne.n	2352e <isr+0xa2>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2353e:	07da      	lsls	r2, r3, #31
   23540:	d4ba      	bmi.n	234b8 <isr+0x2c>
		k_queue_append(&work_q->queue, work);
   23542:	4925      	ldr	r1, [pc, #148]	; (235d8 <isr+0x14c>)
   23544:	4825      	ldr	r0, [pc, #148]	; (235dc <isr+0x150>)
   23546:	f01d faa9 	bl	40a9c <k_queue_append>
   2354a:	e7b5      	b.n	234b8 <isr+0x2c>
			if (term_mode == MODE_CR) {
   2354c:	4b1e      	ldr	r3, [pc, #120]	; (235c8 <isr+0x13c>)
   2354e:	781b      	ldrb	r3, [r3, #0]
   23550:	2b01      	cmp	r3, #1
   23552:	d0db      	beq.n	2350c <isr+0x80>
			if (term_mode == MODE_CR_LF) {
   23554:	2b03      	cmp	r3, #3
   23556:	d1af      	bne.n	234b8 <isr+0x2c>
				cr_state = true;
   23558:	2201      	movs	r2, #1
   2355a:	4b1d      	ldr	r3, [pc, #116]	; (235d0 <isr+0x144>)
   2355c:	701a      	strb	r2, [r3, #0]
   2355e:	e7ab      	b.n	234b8 <isr+0x2c>
			if (term_mode == MODE_LF) {
   23560:	4b19      	ldr	r3, [pc, #100]	; (235c8 <isr+0x13c>)
   23562:	781b      	ldrb	r3, [r3, #0]
   23564:	2b02      	cmp	r3, #2
   23566:	d0d1      	beq.n	2350c <isr+0x80>
			if (term_mode == MODE_CR_LF && cr_state) {
   23568:	2b03      	cmp	r3, #3
   2356a:	d1a5      	bne.n	234b8 <isr+0x2c>
   2356c:	4b18      	ldr	r3, [pc, #96]	; (235d0 <isr+0x144>)
   2356e:	781b      	ldrb	r3, [r3, #0]
   23570:	2b00      	cmp	r3, #0
   23572:	d1cb      	bne.n	2350c <isr+0x80>
   23574:	e7a0      	b.n	234b8 <isr+0x2c>
		cr_state = false;
   23576:	4816      	ldr	r0, [pc, #88]	; (235d0 <isr+0x144>)
   23578:	7003      	strb	r3, [r0, #0]
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   2357a:	f8d4 c000 	ldr.w	ip, [r4]
   2357e:	f10c 0001 	add.w	r0, ip, #1
   23582:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   23586:	d30c      	bcc.n	235a2 <isr+0x116>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   23588:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   2358c:	f043 0301 	orr.w	r3, r3, #1
   23590:	f363 0707 	bfi	r7, r3, #0, #8
   23594:	f366 178f 	bfi	r7, r6, #6, #10
   23598:	4911      	ldr	r1, [pc, #68]	; (235e0 <isr+0x154>)
   2359a:	4638      	mov	r0, r7
   2359c:	f01b f9e3 	bl	3e966 <log_string_sync>
		return;
   235a0:	e78a      	b.n	234b8 <isr+0x2c>
	at_buf[at_cmd_len] = character;
   235a2:	f8df e028 	ldr.w	lr, [pc, #40]	; 235cc <isr+0x140>
	if (character == '"') {
   235a6:	2a22      	cmp	r2, #34	; 0x22
	at_buf[at_cmd_len] = character;
   235a8:	f80e 200c 	strb.w	r2, [lr, ip]
	at_cmd_len++;
   235ac:	6020      	str	r0, [r4, #0]
	if (character == '"') {
   235ae:	d183      	bne.n	234b8 <isr+0x2c>
	if (!inside_quotes) {
   235b0:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   235b4:	700b      	strb	r3, [r1, #0]
   235b6:	e77f      	b.n	234b8 <isr+0x2c>
   235b8:	0004231c 	.word	0x0004231c
   235bc:	00042314 	.word	0x00042314
   235c0:	20023af0 	.word	0x20023af0
   235c4:	2002b373 	.word	0x2002b373
   235c8:	2002b374 	.word	0x2002b374
   235cc:	2002a372 	.word	0x2002a372
   235d0:	2002b372 	.word	0x2002b372
   235d4:	20023bc4 	.word	0x20023bc4
   235d8:	20023bb8 	.word	0x20023bb8
   235dc:	20023af4 	.word	0x20023af4
   235e0:	00046307 	.word	0x00046307
   235e4:	20023bc0 	.word	0x20023bc0

000235e8 <at_host_init>:

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   235e8:	2201      	movs	r2, #1
   235ea:	4b43      	ldr	r3, [pc, #268]	; (236f8 <at_host_init+0x110>)
{
   235ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   235f0:	4942      	ldr	r1, [pc, #264]	; (236fc <at_host_init+0x114>)
   235f2:	2000      	movs	r0, #0
		term_mode = mode;
   235f4:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
   235f6:	f7ff fe71 	bl	232dc <at_notif_register_handler>
	if (err != 0) {
   235fa:	4c41      	ldr	r4, [pc, #260]	; (23700 <at_host_init+0x118>)
   235fc:	4b41      	ldr	r3, [pc, #260]	; (23704 <at_host_init+0x11c>)
   235fe:	4606      	mov	r6, r0
   23600:	1ae4      	subs	r4, r4, r3
   23602:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   23606:	b170      	cbz	r0, 23626 <at_host_init+0x3e>
		LOG_ERR("Can't register handler err=%d", err);
   23608:	f04f 0000 	mov.w	r0, #0
   2360c:	2301      	movs	r3, #1
   2360e:	f363 0007 	bfi	r0, r3, #0, #8
   23612:	f364 108f 	bfi	r0, r4, #6, #10
   23616:	4632      	mov	r2, r6
   23618:	493b      	ldr	r1, [pc, #236]	; (23708 <at_host_init+0x120>)
   2361a:	f01b f9a4 	bl	3e966 <log_string_sync>
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   2361e:	4630      	mov	r0, r6
   23620:	b002      	add	sp, #8
   23622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23626:	4839      	ldr	r0, [pc, #228]	; (2370c <at_host_init+0x124>)
   23628:	f014 fe3a 	bl	382a0 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   2362c:	4d38      	ldr	r5, [pc, #224]	; (23710 <at_host_init+0x128>)
   2362e:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
   23630:	b9b8      	cbnz	r0, 23662 <at_host_init+0x7a>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   23632:	2301      	movs	r3, #1
   23634:	f363 0007 	bfi	r0, r3, #0, #8
   23638:	4a34      	ldr	r2, [pc, #208]	; (2370c <at_host_init+0x124>)
   2363a:	f364 108f 	bfi	r0, r4, #6, #10
   2363e:	4935      	ldr	r1, [pc, #212]	; (23714 <at_host_init+0x12c>)
   23640:	f01b f991 	bl	3e966 <log_string_sync>
		return -EINVAL;
   23644:	f06f 0215 	mvn.w	r2, #21
		LOG_ERR("UART could not be initialized: %d", err);
   23648:	2301      	movs	r3, #1
   2364a:	f04f 0000 	mov.w	r0, #0
   2364e:	f363 0007 	bfi	r0, r3, #0, #8
   23652:	f364 108f 	bfi	r0, r4, #6, #10
   23656:	4930      	ldr	r1, [pc, #192]	; (23718 <at_host_init+0x130>)
   23658:	f01b f985 	bl	3e966 <log_string_sync>
		return -EFAULT;
   2365c:	f06f 060d 	mvn.w	r6, #13
   23660:	e7dd      	b.n	2361e <at_host_init+0x36>
	return z_impl_k_uptime_get();
   23662:	f01d faf7 	bl	40c54 <z_impl_k_uptime_get>
   23666:	4680      	mov	r8, r0
			LOG_ERR("UART check failed: %d. "
   23668:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 23730 <at_host_init+0x148>
		err = uart_err_check(uart_dev);
   2366c:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
   2366e:	6843      	ldr	r3, [r0, #4]
   23670:	689b      	ldr	r3, [r3, #8]
   23672:	b343      	cbz	r3, 236c6 <at_host_init+0xde>
		return api->err_check(dev);
   23674:	4798      	blx	r3
		if (err) {
   23676:	4682      	mov	sl, r0
   23678:	b328      	cbz	r0, 236c6 <at_host_init+0xde>
   2367a:	f01d faeb 	bl	40c54 <z_impl_k_uptime_get>
			if (k_uptime_get_32() - start_time >
   2367e:	eba0 0008 	sub.w	r0, r0, r8
   23682:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   23686:	d81b      	bhi.n	236c0 <at_host_init+0xd8>
			LOG_ERR("UART check failed: %d. "
   23688:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   2368c:	f043 0301 	orr.w	r3, r3, #1
   23690:	f363 0707 	bfi	r7, r3, #0, #8
   23694:	f364 178f 	bfi	r7, r4, #6, #10
   23698:	4652      	mov	r2, sl
   2369a:	4649      	mov	r1, r9
   2369c:	4638      	mov	r0, r7
   2369e:	f01b f962 	bl	3e966 <log_string_sync>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   236a2:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
   236a4:	6843      	ldr	r3, [r0, #4]
   236a6:	699b      	ldr	r3, [r3, #24]
   236a8:	b91b      	cbnz	r3, 236b2 <at_host_init+0xca>
	return z_impl_k_sleep(ms);
   236aa:	200a      	movs	r0, #10
   236ac:	f01d fa43 	bl	40b36 <z_impl_k_sleep>
   236b0:	e7dc      	b.n	2366c <at_host_init+0x84>
		return api->fifo_read(dev, rx_data, size);
   236b2:	2201      	movs	r2, #1
   236b4:	f10d 0107 	add.w	r1, sp, #7
   236b8:	4798      	blx	r3
   236ba:	2800      	cmp	r0, #0
   236bc:	d1f1      	bne.n	236a2 <at_host_init+0xba>
   236be:	e7f4      	b.n	236aa <at_host_init+0xc2>
	if (err) {
   236c0:	f06f 0204 	mvn.w	r2, #4
   236c4:	e7c0      	b.n	23648 <at_host_init+0x60>
	uart_irq_callback_set(uart_dev, isr);
   236c6:	682a      	ldr	r2, [r5, #0]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
   236c8:	6853      	ldr	r3, [r2, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   236ca:	b123      	cbz	r3, 236d6 <at_host_init+0xee>
   236cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   236ce:	b113      	cbz	r3, 236d6 <at_host_init+0xee>
		api->irq_callback_set(dev, cb, user_data);
   236d0:	4912      	ldr	r1, [pc, #72]	; (2371c <at_host_init+0x134>)
   236d2:	4610      	mov	r0, r2
   236d4:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   236d6:	2200      	movs	r2, #0
   236d8:	4b11      	ldr	r3, [pc, #68]	; (23720 <at_host_init+0x138>)
   236da:	4912      	ldr	r1, [pc, #72]	; (23724 <at_host_init+0x13c>)
   236dc:	601a      	str	r2, [r3, #0]
   236de:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   236e2:	4811      	ldr	r0, [pc, #68]	; (23728 <at_host_init+0x140>)
   236e4:	230a      	movs	r3, #10
   236e6:	f44f 7200 	mov.w	r2, #512	; 0x200
   236ea:	4910      	ldr	r1, [pc, #64]	; (2372c <at_host_init+0x144>)
   236ec:	f017 f9aa 	bl	3aa44 <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   236f0:	6828      	ldr	r0, [r5, #0]
   236f2:	f01c fe64 	bl	403be <z_impl_uart_irq_rx_enable>
	return err;
   236f6:	e792      	b.n	2361e <at_host_init+0x36>
   236f8:	2002b374 	.word	0x2002b374
   236fc:	000403c9 	.word	0x000403c9
   23700:	0004231c 	.word	0x0004231c
   23704:	00042314 	.word	0x00042314
   23708:	00046239 	.word	0x00046239
   2370c:	000450ee 	.word	0x000450ee
   23710:	20023bc4 	.word	0x20023bc4
   23714:	00046257 	.word	0x00046257
   23718:	0004629c 	.word	0x0004629c
   2371c:	0002348d 	.word	0x0002348d
   23720:	20023bb8 	.word	0x20023bb8
   23724:	000233d9 	.word	0x000233d9
   23728:	20023af4 	.word	0x20023af4
   2372c:	2002bfb8 	.word	0x2002bfb8
   23730:	00046267 	.word	0x00046267

00023734 <at_parse_process_element>:
}

static int at_parse_process_element(const char **str,
				    int index,
				    struct at_param_list *const list)
{
   23734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   23738:	6804      	ldr	r4, [r0, #0]
{
   2373a:	b0a3      	sub	sp, #140	; 0x8c
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2373c:	7823      	ldrb	r3, [r4, #0]
   2373e:	4680      	mov	r8, r0
   23740:	460f      	mov	r7, r1
   23742:	4616      	mov	r6, r2
   23744:	2b00      	cmp	r3, #0
   23746:	f000 8099 	beq.w	2387c <at_parse_process_element+0x148>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   2374a:	4b4e      	ldr	r3, [pc, #312]	; (23884 <at_parse_process_element+0x150>)
   2374c:	781d      	ldrb	r5, [r3, #0]
   2374e:	2d05      	cmp	r5, #5
   23750:	d116      	bne.n	23780 <at_parse_process_element+0x4c>
	chr = toupper(chr);
   23752:	484d      	ldr	r0, [pc, #308]	; (23888 <at_parse_process_element+0x154>)
		const char *start_ptr = tmpstr++;
   23754:	1c62      	adds	r2, r4, #1
   23756:	4615      	mov	r5, r2

		while (is_valid_notification_char(*tmpstr)) {
   23758:	f812 3b01 	ldrb.w	r3, [r2], #1
   2375c:	5cc1      	ldrb	r1, [r0, r3]
   2375e:	f001 0103 	and.w	r1, r1, #3
   23762:	2902      	cmp	r1, #2
   23764:	bf08      	it	eq
   23766:	3b20      	subeq	r3, #32
	if ((chr >= 'A') && (chr <= 'Z')) {
   23768:	3b41      	subs	r3, #65	; 0x41
   2376a:	b2db      	uxtb	r3, r3
   2376c:	2b19      	cmp	r3, #25
   2376e:	d9f2      	bls.n	23756 <at_parse_process_element+0x22>

		while (isxdigit(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list,
   23770:	1b2b      	subs	r3, r5, r4
   23772:	4622      	mov	r2, r4
   23774:	4639      	mov	r1, r7
   23776:	4630      	mov	r0, r6
   23778:	f01c fe88 	bl	4048c <at_params_string_put>
   2377c:	462c      	mov	r4, r5
   2377e:	e004      	b.n	2378a <at_parse_process_element+0x56>
	} else if (state == OPTIONAL) {
   23780:	2d06      	cmp	r5, #6
   23782:	d108      	bne.n	23796 <at_parse_process_element+0x62>
		at_params_empty_put(list, index);
   23784:	4610      	mov	r0, r2
   23786:	f01c fe58 	bl	4043a <at_params_empty_put>
				     index,
				     start_ptr, tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   2378a:	2000      	movs	r0, #0
	*str = tmpstr;
   2378c:	f8c8 4000 	str.w	r4, [r8]
}
   23790:	b023      	add	sp, #140	; 0x8c
   23792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (state == STRING) {
   23796:	2d02      	cmp	r5, #2
   23798:	d115      	bne.n	237c6 <at_parse_process_element+0x92>
   2379a:	4622      	mov	r2, r4
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2379c:	f242 4101 	movw	r1, #9217	; 0x2401
   237a0:	4615      	mov	r5, r2
		while (!is_dblquote(*tmpstr) &&
   237a2:	f812 3b01 	ldrb.w	r3, [r2], #1
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   237a6:	2b22      	cmp	r3, #34	; 0x22
   237a8:	d005      	beq.n	237b6 <at_parse_process_element+0x82>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   237aa:	2b0d      	cmp	r3, #13
   237ac:	d8f8      	bhi.n	237a0 <at_parse_process_element+0x6c>
   237ae:	fa21 f303 	lsr.w	r3, r1, r3
   237b2:	07db      	lsls	r3, r3, #31
   237b4:	d5f4      	bpl.n	237a0 <at_parse_process_element+0x6c>
		at_params_string_put(list,
   237b6:	1b2b      	subs	r3, r5, r4
   237b8:	4622      	mov	r2, r4
   237ba:	4639      	mov	r1, r7
   237bc:	4630      	mov	r0, r6
   237be:	f01c fe65 	bl	4048c <at_params_string_put>
		tmpstr++;
   237c2:	1c6c      	adds	r4, r5, #1
   237c4:	e7e1      	b.n	2378a <at_parse_process_element+0x56>
	} else if (state == ARRAY) {
   237c6:	2d01      	cmp	r5, #1
   237c8:	d135      	bne.n	23836 <at_parse_process_element+0x102>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   237ca:	4620      	mov	r0, r4
   237cc:	220a      	movs	r2, #10
   237ce:	a901      	add	r1, sp, #4
   237d0:	f019 fa46 	bl	3cc60 <strtoul>
		tmpstr = next;
   237d4:	9c01      	ldr	r4, [sp, #4]
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   237d6:	9002      	str	r0, [sp, #8]
		while (!is_array_stop(*tmpstr) &&
   237d8:	7823      	ldrb	r3, [r4, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   237da:	2b29      	cmp	r3, #41	; 0x29
   237dc:	d020      	beq.n	23820 <at_parse_process_element+0xec>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   237de:	b1fb      	cbz	r3, 23820 <at_parse_process_element+0xec>
	if ((chr == AT_PARAM_SEPARATOR) ||
   237e0:	2b2c      	cmp	r3, #44	; 0x2c
   237e2:	f104 0401 	add.w	r4, r4, #1
   237e6:	d001      	beq.n	237ec <at_parse_process_element+0xb8>
   237e8:	2b3a      	cmp	r3, #58	; 0x3a
   237ea:	d121      	bne.n	23830 <at_parse_process_element+0xfc>
				      (u32_t)strtoul(++tmpstr, &next, 10);
   237ec:	220a      	movs	r2, #10
   237ee:	a901      	add	r1, sp, #4
   237f0:	4620      	mov	r0, r4
   237f2:	f019 fa35 	bl	3cc60 <strtoul>
				tmparray[i++] =
   237f6:	ab22      	add	r3, sp, #136	; 0x88
   237f8:	f105 0901 	add.w	r9, r5, #1
   237fc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   23800:	f845 0c80 	str.w	r0, [r5, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   23804:	4620      	mov	r0, r4
   23806:	f7f6 fbbd 	bl	19f84 <strlen>
   2380a:	4605      	mov	r5, r0
   2380c:	9801      	ldr	r0, [sp, #4]
   2380e:	f7f6 fbb9 	bl	19f84 <strlen>
   23812:	4285      	cmp	r5, r0
   23814:	d003      	beq.n	2381e <at_parse_process_element+0xea>
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   23816:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   2381a:	9c01      	ldr	r4, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   2381c:	d109      	bne.n	23832 <at_parse_process_element+0xfe>
   2381e:	464d      	mov	r5, r9
		at_params_array_put(list, index,
   23820:	00ab      	lsls	r3, r5, #2
   23822:	aa02      	add	r2, sp, #8
   23824:	4639      	mov	r1, r7
   23826:	4630      	mov	r0, r6
   23828:	f01c fe56 	bl	404d8 <at_params_array_put>
		tmpstr++;
   2382c:	3401      	adds	r4, #1
   2382e:	e7ac      	b.n	2378a <at_parse_process_element+0x56>
   23830:	46a9      	mov	r9, r5
   23832:	464d      	mov	r5, r9
   23834:	e7d0      	b.n	237d8 <at_parse_process_element+0xa4>
	} else if (state == NUMBER) {
   23836:	2d03      	cmp	r5, #3
   23838:	d114      	bne.n	23864 <at_parse_process_element+0x130>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   2383a:	220a      	movs	r2, #10
   2383c:	4620      	mov	r0, r4
   2383e:	a902      	add	r1, sp, #8
   23840:	f019 fa0e 	bl	3cc60 <strtoul>
		if (value <= USHRT_MAX) {
   23844:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   23848:	4602      	mov	r2, r0
		tmpstr = next;
   2384a:	9c02      	ldr	r4, [sp, #8]
		if (value <= USHRT_MAX) {
   2384c:	da05      	bge.n	2385a <at_parse_process_element+0x126>
			at_params_short_put(list, index, (u16_t)value);
   2384e:	b282      	uxth	r2, r0
   23850:	4639      	mov	r1, r7
   23852:	4630      	mov	r0, r6
   23854:	f01c fddc 	bl	40410 <at_params_short_put>
   23858:	e797      	b.n	2378a <at_parse_process_element+0x56>
			at_params_int_put(list, index, value);
   2385a:	4639      	mov	r1, r7
   2385c:	4630      	mov	r0, r6
   2385e:	f01c fe00 	bl	40462 <at_params_int_put>
   23862:	e792      	b.n	2378a <at_parse_process_element+0x56>
	} else if (state == SMS_PDU) {
   23864:	2d04      	cmp	r5, #4
   23866:	d190      	bne.n	2378a <at_parse_process_element+0x56>
   23868:	4623      	mov	r3, r4
		while (isxdigit(*tmpstr)) {
   2386a:	4907      	ldr	r1, [pc, #28]	; (23888 <at_parse_process_element+0x154>)
   2386c:	461d      	mov	r5, r3
   2386e:	782a      	ldrb	r2, [r5, #0]
   23870:	3301      	adds	r3, #1
   23872:	5c52      	ldrb	r2, [r2, r1]
   23874:	f012 0f44 	tst.w	r2, #68	; 0x44
   23878:	d1f8      	bne.n	2386c <at_parse_process_element+0x138>
   2387a:	e779      	b.n	23770 <at_parse_process_element+0x3c>
		return -1;
   2387c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23880:	e786      	b.n	23790 <at_parse_process_element+0x5c>
   23882:	bf00      	nop
   23884:	2002b375 	.word	0x2002b375
   23888:	000496aa 	.word	0x000496aa

0002388c <at_parse_detect_type>:
{
   2388c:	b510      	push	{r4, lr}
	const char *tmpstr = *str;
   2388e:	6802      	ldr	r2, [r0, #0]
	if ((index == 0) &&
   23890:	2900      	cmp	r1, #0
   23892:	7813      	ldrb	r3, [r2, #0]
   23894:	d109      	bne.n	238aa <at_parse_detect_type+0x1e>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   23896:	2b2b      	cmp	r3, #43	; 0x2b
   23898:	4924      	ldr	r1, [pc, #144]	; (2392c <at_parse_detect_type+0xa0>)
   2389a:	d001      	beq.n	238a0 <at_parse_detect_type+0x14>
   2389c:	2b25      	cmp	r3, #37	; 0x25
   2389e:	d102      	bne.n	238a6 <at_parse_detect_type+0x1a>
	state = new_state;
   238a0:	2305      	movs	r3, #5
   238a2:	700b      	strb	r3, [r1, #0]
   238a4:	e01f      	b.n	238e6 <at_parse_detect_type+0x5a>
   238a6:	2302      	movs	r3, #2
   238a8:	e7fb      	b.n	238a2 <at_parse_detect_type+0x16>
	} else if ((index > 0) &&
   238aa:	dd03      	ble.n	238b4 <at_parse_detect_type+0x28>
   238ac:	2b2b      	cmp	r3, #43	; 0x2b
   238ae:	d030      	beq.n	23912 <at_parse_detect_type+0x86>
   238b0:	2b25      	cmp	r3, #37	; 0x25
   238b2:	d02e      	beq.n	23912 <at_parse_detect_type+0x86>
 * @retval true  If character is number character
 * @retval false If character is something else
 */
static inline bool is_number(char chr)
{
	if (isdigit(chr) ||
   238b4:	491e      	ldr	r1, [pc, #120]	; (23930 <at_parse_detect_type+0xa4>)
   238b6:	5c59      	ldrb	r1, [r3, r1]
   238b8:	0749      	lsls	r1, r1, #29
   238ba:	d403      	bmi.n	238c4 <at_parse_detect_type+0x38>
   238bc:	2b2d      	cmp	r3, #45	; 0x2d
   238be:	d001      	beq.n	238c4 <at_parse_detect_type+0x38>
	    (chr == '-') ||
   238c0:	2b2b      	cmp	r3, #43	; 0x2b
   238c2:	d103      	bne.n	238cc <at_parse_detect_type+0x40>
	state = new_state;
   238c4:	2103      	movs	r1, #3
   238c6:	4b19      	ldr	r3, [pc, #100]	; (2392c <at_parse_detect_type+0xa0>)
   238c8:	7019      	strb	r1, [r3, #0]
   238ca:	e00c      	b.n	238e6 <at_parse_detect_type+0x5a>
	if (chr == '"') {
   238cc:	2b22      	cmp	r3, #34	; 0x22
   238ce:	d006      	beq.n	238de <at_parse_detect_type+0x52>
	if (chr == '(') {
   238d0:	2b28      	cmp	r3, #40	; 0x28
   238d2:	d10b      	bne.n	238ec <at_parse_detect_type+0x60>
   238d4:	2101      	movs	r1, #1
   238d6:	4b15      	ldr	r3, [pc, #84]	; (2392c <at_parse_detect_type+0xa0>)
		tmpstr++;
   238d8:	440a      	add	r2, r1
	state = new_state;
   238da:	7019      	strb	r1, [r3, #0]
		tmpstr++;
   238dc:	e003      	b.n	238e6 <at_parse_detect_type+0x5a>
	state = new_state;
   238de:	2102      	movs	r1, #2
   238e0:	4b12      	ldr	r3, [pc, #72]	; (2392c <at_parse_detect_type+0xa0>)
		tmpstr++;
   238e2:	3201      	adds	r2, #1
	state = new_state;
   238e4:	7019      	strb	r1, [r3, #0]
	*str = tmpstr;
   238e6:	6002      	str	r2, [r0, #0]
	return 0;
   238e8:	2000      	movs	r0, #0
}
   238ea:	bd10      	pop	{r4, pc}
	if ((chr == '\r') ||
   238ec:	2b0d      	cmp	r3, #13
   238ee:	d001      	beq.n	238f4 <at_parse_detect_type+0x68>
   238f0:	2b0a      	cmp	r3, #10
   238f2:	d113      	bne.n	2391c <at_parse_detect_type+0x90>
		  (state == NUMBER)) {
   238f4:	490d      	ldr	r1, [pc, #52]	; (2392c <at_parse_detect_type+0xa0>)
   238f6:	780c      	ldrb	r4, [r1, #0]
	} else if (is_lfcr(*tmpstr) &&
   238f8:	2c03      	cmp	r4, #3
   238fa:	d10d      	bne.n	23918 <at_parse_detect_type+0x8c>
   238fc:	4614      	mov	r4, r2
		while (is_lfcr(*tmpstr)) {
   238fe:	7823      	ldrb	r3, [r4, #0]
   23900:	4622      	mov	r2, r4
   23902:	2b0d      	cmp	r3, #13
   23904:	f104 0401 	add.w	r4, r4, #1
   23908:	d0f9      	beq.n	238fe <at_parse_detect_type+0x72>
   2390a:	2b0a      	cmp	r3, #10
   2390c:	d0f7      	beq.n	238fe <at_parse_detect_type+0x72>
	state = new_state;
   2390e:	2304      	movs	r3, #4
   23910:	e7c7      	b.n	238a2 <at_parse_detect_type+0x16>
		return -1;
   23912:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23916:	e7e8      	b.n	238ea <at_parse_detect_type+0x5e>
	} else if (is_lfcr(*tmpstr) &&
   23918:	2c06      	cmp	r4, #6
   2391a:	d0e4      	beq.n	238e6 <at_parse_detect_type+0x5a>
	if ((chr == AT_PARAM_SEPARATOR) ||
   2391c:	2b2c      	cmp	r3, #44	; 0x2c
   2391e:	d001      	beq.n	23924 <at_parse_detect_type+0x98>
   23920:	2b3a      	cmp	r3, #58	; 0x3a
   23922:	d1f6      	bne.n	23912 <at_parse_detect_type+0x86>
	state = new_state;
   23924:	4b01      	ldr	r3, [pc, #4]	; (2392c <at_parse_detect_type+0xa0>)
   23926:	2106      	movs	r1, #6
   23928:	e7ce      	b.n	238c8 <at_parse_detect_type+0x3c>
   2392a:	bf00      	nop
   2392c:	2002b375 	.word	0x2002b375
   23930:	000496aa 	.word	0x000496aa

00023934 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list * const list,
				  size_t max_params_count)
{
   23934:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   23938:	4688      	mov	r8, r1
   2393a:	4616      	mov	r6, r2
   2393c:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL ||
   2393e:	4604      	mov	r4, r0
   23940:	2800      	cmp	r0, #0
   23942:	d079      	beq.n	23a38 <at_parser_max_params_from_str+0x104>
   23944:	2a00      	cmp	r2, #0
   23946:	d077      	beq.n	23a38 <at_parser_max_params_from_str+0x104>
	    list == NULL || list->params == NULL) {
   23948:	6853      	ldr	r3, [r2, #4]
   2394a:	2b00      	cmp	r3, #0
   2394c:	d074      	beq.n	23a38 <at_parser_max_params_from_str+0x104>
	state      = IDLE;
   2394e:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   23950:	4610      	mov	r0, r2
   23952:	f000 f8e5 	bl	23b20 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   23956:	6832      	ldr	r2, [r6, #0]
	const char *str = *at_params_str;
   23958:	9401      	str	r4, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   2395a:	4297      	cmp	r7, r2
   2395c:	bf28      	it	cs
   2395e:	4617      	movcs	r7, r2
	int index = 0;
   23960:	462c      	mov	r4, r5
	state      = IDLE;
   23962:	4b37      	ldr	r3, [pc, #220]	; (23a40 <at_parser_max_params_from_str+0x10c>)
		if (isspace(*str)) {
   23964:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 23a44 <at_parser_max_params_from_str+0x110>
	state      = IDLE;
   23968:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) &&
   2396a:	9b01      	ldr	r3, [sp, #4]
   2396c:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2396e:	2a00      	cmp	r2, #0
   23970:	d046      	beq.n	23a00 <at_parser_max_params_from_str+0xcc>
   23972:	42a7      	cmp	r7, r4
   23974:	d944      	bls.n	23a00 <at_parser_max_params_from_str+0xcc>
		if (isspace(*str)) {
   23976:	f812 2009 	ldrb.w	r2, [r2, r9]
		if (at_parse_detect_type(&str, index) == -1) {
   2397a:	4621      	mov	r1, r4
		if (isspace(*str)) {
   2397c:	0712      	lsls	r2, r2, #28
			str++;
   2397e:	bf48      	it	mi
   23980:	3301      	addmi	r3, #1
		if (at_parse_detect_type(&str, index) == -1) {
   23982:	a801      	add	r0, sp, #4
			str++;
   23984:	bf48      	it	mi
   23986:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   23988:	f7ff ff80 	bl	2388c <at_parse_detect_type>
   2398c:	1c43      	adds	r3, r0, #1
   2398e:	d037      	beq.n	23a00 <at_parser_max_params_from_str+0xcc>
		if (at_parse_process_element(&str, index, list) == -1) {
   23990:	4621      	mov	r1, r4
   23992:	4632      	mov	r2, r6
   23994:	a801      	add	r0, sp, #4
   23996:	f7ff fecd 	bl	23734 <at_parse_process_element>
   2399a:	1c41      	adds	r1, r0, #1
   2399c:	d030      	beq.n	23a00 <at_parser_max_params_from_str+0xcc>
		if (is_separator(*str)) {
   2399e:	9b01      	ldr	r3, [sp, #4]
   239a0:	781a      	ldrb	r2, [r3, #0]
	if ((chr == AT_PARAM_SEPARATOR) ||
   239a2:	2a2c      	cmp	r2, #44	; 0x2c
   239a4:	d001      	beq.n	239aa <at_parser_max_params_from_str+0x76>
   239a6:	2a3a      	cmp	r2, #58	; 0x3a
   239a8:	d117      	bne.n	239da <at_parser_max_params_from_str+0xa6>
			if (is_lfcr(*(str+1))) {
   239aa:	785b      	ldrb	r3, [r3, #1]
	if ((chr == '\r') ||
   239ac:	2b0d      	cmp	r3, #13
   239ae:	d001      	beq.n	239b4 <at_parser_max_params_from_str+0x80>
   239b0:	2b0a      	cmp	r3, #10
   239b2:	d10f      	bne.n	239d4 <at_parser_max_params_from_str+0xa0>
				index++;
   239b4:	3401      	adds	r4, #1
				if (index == max_params) {
   239b6:	42bc      	cmp	r4, r7
   239b8:	d039      	beq.n	23a2e <at_parser_max_params_from_str+0xfa>
				if (at_parse_detect_type(&str, index) == -1) {
   239ba:	4621      	mov	r1, r4
   239bc:	a801      	add	r0, sp, #4
   239be:	f7ff ff65 	bl	2388c <at_parse_detect_type>
   239c2:	1c42      	adds	r2, r0, #1
   239c4:	d01c      	beq.n	23a00 <at_parser_max_params_from_str+0xcc>
				if (at_parse_process_element(&str,
   239c6:	4632      	mov	r2, r6
   239c8:	4621      	mov	r1, r4
   239ca:	a801      	add	r0, sp, #4
   239cc:	f7ff feb2 	bl	23734 <at_parse_process_element>
   239d0:	1c43      	adds	r3, r0, #1
   239d2:	d015      	beq.n	23a00 <at_parser_max_params_from_str+0xcc>
			str++;
   239d4:	9b01      	ldr	r3, [sp, #4]
   239d6:	3301      	adds	r3, #1
   239d8:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   239da:	9a01      	ldr	r2, [sp, #4]
   239dc:	7813      	ldrb	r3, [r2, #0]
   239de:	2b0d      	cmp	r3, #13
   239e0:	d11e      	bne.n	23a20 <at_parser_max_params_from_str+0xec>
   239e2:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   239e4:	7813      	ldrb	r3, [r2, #0]
   239e6:	4611      	mov	r1, r2
   239e8:	2b0d      	cmp	r3, #13
   239ea:	f102 0201 	add.w	r2, r2, #1
   239ee:	d0f9      	beq.n	239e4 <at_parser_max_params_from_str+0xb0>
   239f0:	2b0a      	cmp	r3, #10
   239f2:	d0f7      	beq.n	239e4 <at_parser_max_params_from_str+0xb0>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   239f4:	b11b      	cbz	r3, 239fe <at_parser_max_params_from_str+0xca>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   239f6:	2b2b      	cmp	r3, #43	; 0x2b
   239f8:	d001      	beq.n	239fe <at_parser_max_params_from_str+0xca>
   239fa:	2b25      	cmp	r3, #37	; 0x25
   239fc:	d112      	bne.n	23a24 <at_parser_max_params_from_str+0xf0>
				str += i;
   239fe:	9101      	str	r1, [sp, #4]
	*at_params_str = str;
   23a00:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   23a02:	b9b5      	cbnz	r5, 23a32 <at_parser_max_params_from_str+0xfe>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   23a04:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   23a06:	2a00      	cmp	r2, #0
   23a08:	bf0c      	ite	eq
   23a0a:	2000      	moveq	r0, #0
   23a0c:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   23a10:	f1b8 0f00 	cmp.w	r8, #0
   23a14:	d001      	beq.n	23a1a <at_parser_max_params_from_str+0xe6>
		*next_param_str = (char *)at_params_str;
   23a16:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   23a1a:	b003      	add	sp, #12
   23a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ((chr == '\r') ||
   23a20:	2b0a      	cmp	r3, #10
   23a22:	d0de      	beq.n	239e2 <at_parser_max_params_from_str+0xae>
		index++;
   23a24:	3401      	adds	r4, #1
			oversized = true;
   23a26:	42bc      	cmp	r4, r7
   23a28:	bf08      	it	eq
   23a2a:	2501      	moveq	r5, #1
   23a2c:	e79d      	b.n	2396a <at_parser_max_params_from_str+0x36>
					oversized = true;
   23a2e:	2501      	movs	r5, #1
   23a30:	e7e6      	b.n	23a00 <at_parser_max_params_from_str+0xcc>
		return -E2BIG;
   23a32:	f06f 0006 	mvn.w	r0, #6
   23a36:	e7eb      	b.n	23a10 <at_parser_max_params_from_str+0xdc>
		return -EINVAL;
   23a38:	f06f 0015 	mvn.w	r0, #21
   23a3c:	e7ed      	b.n	23a1a <at_parser_max_params_from_str+0xe6>
   23a3e:	bf00      	nop
   23a40:	2002b375 	.word	0x2002b375
   23a44:	000496aa 	.word	0x000496aa

00023a48 <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   23a48:	b538      	push	{r3, r4, r5, lr}
   23a4a:	460c      	mov	r4, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   23a4c:	4605      	mov	r5, r0
   23a4e:	b960      	cbnz	r0, 23a6a <at_params_get+0x22>
   23a50:	490a      	ldr	r1, [pc, #40]	; (23a7c <at_params_get+0x34>)
   23a52:	232b      	movs	r3, #43	; 0x2b
   23a54:	4a0a      	ldr	r2, [pc, #40]	; (23a80 <at_params_get+0x38>)
   23a56:	480b      	ldr	r0, [pc, #44]	; (23a84 <at_params_get+0x3c>)
   23a58:	f01a ff68 	bl	3e92c <printk>
   23a5c:	480a      	ldr	r0, [pc, #40]	; (23a88 <at_params_get+0x40>)
   23a5e:	f01a ff65 	bl	3e92c <printk>
   23a62:	212b      	movs	r1, #43	; 0x2b
   23a64:	4806      	ldr	r0, [pc, #24]	; (23a80 <at_params_get+0x38>)
   23a66:	f01a ff6e 	bl	3e946 <assert_post_action>

	if (index >= list->param_count) {
   23a6a:	682b      	ldr	r3, [r5, #0]
   23a6c:	42a3      	cmp	r3, r4
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   23a6e:	bf85      	ittet	hi
   23a70:	230c      	movhi	r3, #12
   23a72:	6868      	ldrhi	r0, [r5, #4]
		return NULL;
   23a74:	2000      	movls	r0, #0
	return &param[index];
   23a76:	fb03 0004 	mlahi	r0, r3, r4, r0
}
   23a7a:	bd38      	pop	{r3, r4, r5, pc}
   23a7c:	000463a9 	.word	0x000463a9
   23a80:	00046360 	.word	0x00046360
   23a84:	00044643 	.word	0x00044643
   23a88:	000463bd 	.word	0x000463bd

00023a8c <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   23a8c:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   23a8e:	4604      	mov	r4, r0
   23a90:	b960      	cbnz	r0, 23aac <at_param_size+0x20>
   23a92:	490e      	ldr	r1, [pc, #56]	; (23acc <at_param_size+0x40>)
   23a94:	2339      	movs	r3, #57	; 0x39
   23a96:	4a0e      	ldr	r2, [pc, #56]	; (23ad0 <at_param_size+0x44>)
   23a98:	480e      	ldr	r0, [pc, #56]	; (23ad4 <at_param_size+0x48>)
   23a9a:	f01a ff47 	bl	3e92c <printk>
   23a9e:	480e      	ldr	r0, [pc, #56]	; (23ad8 <at_param_size+0x4c>)
   23aa0:	f01a ff44 	bl	3e92c <printk>
   23aa4:	2139      	movs	r1, #57	; 0x39
   23aa6:	480a      	ldr	r0, [pc, #40]	; (23ad0 <at_param_size+0x44>)
   23aa8:	f01a ff4d 	bl	3e946 <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   23aac:	7823      	ldrb	r3, [r4, #0]
   23aae:	2b01      	cmp	r3, #1
   23ab0:	d006      	beq.n	23ac0 <at_param_size+0x34>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   23ab2:	2b02      	cmp	r3, #2
   23ab4:	d006      	beq.n	23ac4 <at_param_size+0x38>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   23ab6:	3b03      	subs	r3, #3
   23ab8:	2b01      	cmp	r3, #1
   23aba:	d805      	bhi.n	23ac8 <at_param_size+0x3c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   23abc:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   23abe:	bd10      	pop	{r4, pc}
		return sizeof(u16_t);
   23ac0:	2002      	movs	r0, #2
   23ac2:	e7fc      	b.n	23abe <at_param_size+0x32>
		return sizeof(u32_t);
   23ac4:	2004      	movs	r0, #4
   23ac6:	e7fa      	b.n	23abe <at_param_size+0x32>
	return 0;
   23ac8:	2000      	movs	r0, #0
   23aca:	e7f8      	b.n	23abe <at_param_size+0x32>
   23acc:	0004632f 	.word	0x0004632f
   23ad0:	00046360 	.word	0x00046360
   23ad4:	00044643 	.word	0x00044643
   23ad8:	00046344 	.word	0x00046344

00023adc <at_param_clear>:
{
   23adc:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   23ade:	4604      	mov	r4, r0
   23ae0:	b960      	cbnz	r0, 23afc <at_param_clear+0x20>
   23ae2:	490b      	ldr	r1, [pc, #44]	; (23b10 <at_param_clear+0x34>)
   23ae4:	231d      	movs	r3, #29
   23ae6:	4a0b      	ldr	r2, [pc, #44]	; (23b14 <at_param_clear+0x38>)
   23ae8:	480b      	ldr	r0, [pc, #44]	; (23b18 <at_param_clear+0x3c>)
   23aea:	f01a ff1f 	bl	3e92c <printk>
   23aee:	480b      	ldr	r0, [pc, #44]	; (23b1c <at_param_clear+0x40>)
   23af0:	f01a ff1c 	bl	3e92c <printk>
   23af4:	211d      	movs	r1, #29
   23af6:	4807      	ldr	r0, [pc, #28]	; (23b14 <at_param_clear+0x38>)
   23af8:	f01a ff25 	bl	3e946 <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   23afc:	7823      	ldrb	r3, [r4, #0]
   23afe:	3b03      	subs	r3, #3
   23b00:	2b01      	cmp	r3, #1
   23b02:	d802      	bhi.n	23b0a <at_param_clear+0x2e>
		k_free(param->value.str_val);
   23b04:	68a0      	ldr	r0, [r4, #8]
   23b06:	f01c ff94 	bl	40a32 <k_free>
	param->value.int_val = 0;
   23b0a:	2300      	movs	r3, #0
   23b0c:	60a3      	str	r3, [r4, #8]
}
   23b0e:	bd10      	pop	{r4, pc}
   23b10:	0004632f 	.word	0x0004632f
   23b14:	00046360 	.word	0x00046360
   23b18:	00044643 	.word	0x00044643
   23b1c:	00046344 	.word	0x00046344

00023b20 <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   23b20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (list == NULL || list->params == NULL) {
   23b24:	4605      	mov	r5, r0
   23b26:	b158      	cbz	r0, 23b40 <at_params_list_clear+0x20>
   23b28:	6843      	ldr	r3, [r0, #4]
   23b2a:	b14b      	cbz	r3, 23b40 <at_params_list_clear+0x20>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   23b2c:	2400      	movs	r4, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   23b2e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 23b84 <at_params_list_clear+0x64>
   23b32:	f8df a054 	ldr.w	sl, [pc, #84]	; 23b88 <at_params_list_clear+0x68>
   23b36:	f8df b054 	ldr.w	fp, [pc, #84]	; 23b8c <at_params_list_clear+0x6c>
	for (size_t i = 0; i < list->param_count; ++i) {
   23b3a:	682b      	ldr	r3, [r5, #0]
   23b3c:	429c      	cmp	r4, r3
   23b3e:	d301      	bcc.n	23b44 <at_params_list_clear+0x24>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   23b40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		at_param_clear(&params[i]);
   23b44:	270c      	movs	r7, #12
   23b46:	4367      	muls	r7, r4
   23b48:	f8d5 9004 	ldr.w	r9, [r5, #4]
   23b4c:	eb09 0607 	add.w	r6, r9, r7
   23b50:	4630      	mov	r0, r6
   23b52:	f7ff ffc3 	bl	23adc <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   23b56:	b966      	cbnz	r6, 23b72 <at_params_list_clear+0x52>
   23b58:	4651      	mov	r1, sl
   23b5a:	2314      	movs	r3, #20
   23b5c:	4642      	mov	r2, r8
   23b5e:	4658      	mov	r0, fp
   23b60:	f01a fee4 	bl	3e92c <printk>
   23b64:	4806      	ldr	r0, [pc, #24]	; (23b80 <at_params_list_clear+0x60>)
   23b66:	f01a fee1 	bl	3e92c <printk>
   23b6a:	2114      	movs	r1, #20
   23b6c:	4640      	mov	r0, r8
   23b6e:	f01a feea 	bl	3e946 <assert_post_action>
   23b72:	2300      	movs	r3, #0
	for (size_t i = 0; i < list->param_count; ++i) {
   23b74:	3401      	adds	r4, #1
   23b76:	f849 3007 	str.w	r3, [r9, r7]
   23b7a:	6073      	str	r3, [r6, #4]
   23b7c:	60b3      	str	r3, [r6, #8]
   23b7e:	e7dc      	b.n	23b3a <at_params_list_clear+0x1a>
   23b80:	00046344 	.word	0x00046344
   23b84:	00046360 	.word	0x00046360
   23b88:	0004632f 	.word	0x0004632f
   23b8c:	00044643 	.word	0x00044643

00023b90 <modem_info_parse.isra.0>:
		buf[i] = next_char;
		buf[i + 1] = current_char;
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
   23b90:	b538      	push	{r3, r4, r5, lr}
   23b92:	4605      	mov	r5, r0
			    const char *buf)
{
	int err;
	u32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   23b94:	4a08      	ldr	r2, [pc, #32]	; (23bb8 <modem_info_parse.isra.0+0x28>)
static int modem_info_parse(const struct modem_info_data *modem_data,
   23b96:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   23b98:	782b      	ldrb	r3, [r5, #0]
   23b9a:	2100      	movs	r1, #0
   23b9c:	f7ff feca 	bl	23934 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err != 0) {
   23ba0:	4604      	mov	r4, r0
   23ba2:	b938      	cbnz	r0, 23bb4 <modem_info_parse.isra.0+0x24>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   23ba4:	4804      	ldr	r0, [pc, #16]	; (23bb8 <modem_info_parse.isra.0+0x28>)
   23ba6:	f01c fd11 	bl	405cc <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   23baa:	782b      	ldrb	r3, [r5, #0]
		return -EAGAIN;
   23bac:	4298      	cmp	r0, r3
   23bae:	bf88      	it	hi
   23bb0:	f06f 040a 	mvnhi.w	r4, #10
	}

	return err;
}
   23bb4:	4620      	mov	r0, r4
   23bb6:	bd38      	pop	{r3, r4, r5, pc}
   23bb8:	20023bc8 	.word	0x20023bc8

00023bbc <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(void *context, char *response)
{
   23bbc:	b513      	push	{r0, r1, r4, lr}
   23bbe:	460c      	mov	r4, r1
	ARG_UNUSED(context);

	u16_t param_value;
	int err;

	if (!is_cesq_notification(response, strlen(response))) {
   23bc0:	4608      	mov	r0, r1
   23bc2:	f7f6 f9df 	bl	19f84 <strlen>
	return strstr(buf, AT_CMD_CESQ_RESP) ? true : false;
   23bc6:	491b      	ldr	r1, [pc, #108]	; (23c34 <modem_info_rsrp_subscribe_handler+0x78>)
   23bc8:	4620      	mov	r0, r4
   23bca:	f01d facb 	bl	41164 <strstr>
	if (!is_cesq_notification(response, strlen(response))) {
   23bce:	b198      	cbz	r0, 23bf8 <modem_info_rsrp_subscribe_handler+0x3c>
		return;
	}

	err = modem_info_parse(modem_data[MODEM_INFO_RSRP],
   23bd0:	4621      	mov	r1, r4
   23bd2:	4819      	ldr	r0, [pc, #100]	; (23c38 <modem_info_rsrp_subscribe_handler+0x7c>)
   23bd4:	f7ff ffdc 	bl	23b90 <modem_info_parse.isra.0>
			       response);
	if (err != 0) {
   23bd8:	4602      	mov	r2, r0
   23bda:	b178      	cbz	r0, 23bfc <modem_info_rsrp_subscribe_handler+0x40>
		LOG_ERR("modem_info_parse failed to parse "
   23bdc:	2301      	movs	r3, #1
   23bde:	f04f 0000 	mov.w	r0, #0
   23be2:	4916      	ldr	r1, [pc, #88]	; (23c3c <modem_info_rsrp_subscribe_handler+0x80>)
   23be4:	f363 0007 	bfi	r0, r3, #0, #8
   23be8:	4b15      	ldr	r3, [pc, #84]	; (23c40 <modem_info_rsrp_subscribe_handler+0x84>)
   23bea:	1a5b      	subs	r3, r3, r1
   23bec:	08db      	lsrs	r3, r3, #3
   23bee:	4915      	ldr	r1, [pc, #84]	; (23c44 <modem_info_rsrp_subscribe_handler+0x88>)
   23bf0:	f363 108f 	bfi	r0, r3, #6, #10

	err = at_params_short_get(&m_param_list,
				  modem_data[MODEM_INFO_RSRP]->param_index,
				  &param_value);
	if (err != 0) {
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   23bf4:	f01a feb7 	bl	3e966 <log_string_sync>
		return;
	}

	modem_info_rsrp_cb(param_value);
}
   23bf8:	b002      	add	sp, #8
   23bfa:	bd10      	pop	{r4, pc}
	err = at_params_short_get(&m_param_list,
   23bfc:	f10d 0206 	add.w	r2, sp, #6
   23c00:	2101      	movs	r1, #1
   23c02:	4811      	ldr	r0, [pc, #68]	; (23c48 <modem_info_rsrp_subscribe_handler+0x8c>)
   23c04:	f01c fc8e 	bl	40524 <at_params_short_get>
	if (err != 0) {
   23c08:	4602      	mov	r2, r0
   23c0a:	b160      	cbz	r0, 23c26 <modem_info_rsrp_subscribe_handler+0x6a>
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   23c0c:	2301      	movs	r3, #1
   23c0e:	f04f 0000 	mov.w	r0, #0
   23c12:	490a      	ldr	r1, [pc, #40]	; (23c3c <modem_info_rsrp_subscribe_handler+0x80>)
   23c14:	f363 0007 	bfi	r0, r3, #0, #8
   23c18:	4b09      	ldr	r3, [pc, #36]	; (23c40 <modem_info_rsrp_subscribe_handler+0x84>)
   23c1a:	1a5b      	subs	r3, r3, r1
   23c1c:	08db      	lsrs	r3, r3, #3
   23c1e:	f363 108f 	bfi	r0, r3, #6, #10
   23c22:	490a      	ldr	r1, [pc, #40]	; (23c4c <modem_info_rsrp_subscribe_handler+0x90>)
   23c24:	e7e6      	b.n	23bf4 <modem_info_rsrp_subscribe_handler+0x38>
	modem_info_rsrp_cb(param_value);
   23c26:	4b0a      	ldr	r3, [pc, #40]	; (23c50 <modem_info_rsrp_subscribe_handler+0x94>)
   23c28:	f89d 0006 	ldrb.w	r0, [sp, #6]
   23c2c:	681b      	ldr	r3, [r3, #0]
   23c2e:	4798      	blx	r3
   23c30:	e7e2      	b.n	23bf8 <modem_info_rsrp_subscribe_handler+0x3c>
   23c32:	bf00      	nop
   23c34:	00046405 	.word	0x00046405
   23c38:	000429b9 	.word	0x000429b9
   23c3c:	00042314 	.word	0x00042314
   23c40:	0004239c 	.word	0x0004239c
   23c44:	0004640b 	.word	0x0004640b
   23c48:	20023bc8 	.word	0x20023bc8
   23c4c:	00046442 	.word	0x00046442
   23c50:	20023bd0 	.word	0x20023bd0

00023c54 <modem_info_type_get>:
	if (info_type >= MODEM_INFO_COUNT) {
   23c54:	2814      	cmp	r0, #20
	return modem_data[info_type]->data_type;
   23c56:	bf9d      	ittte	ls
   23c58:	4b02      	ldrls	r3, [pc, #8]	; (23c64 <modem_info_type_get+0x10>)
   23c5a:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   23c5e:	7a98      	ldrbls	r0, [r3, #10]
		return -EINVAL;
   23c60:	20ea      	movhi	r0, #234	; 0xea
}
   23c62:	4770      	bx	lr
   23c64:	00042944 	.word	0x00042944

00023c68 <modem_info_name_get>:
{
   23c68:	b570      	push	{r4, r5, r6, lr}
	if (name == NULL) {
   23c6a:	460d      	mov	r5, r1
   23c6c:	b919      	cbnz	r1, 23c76 <modem_info_name_get+0xe>
		return -EINVAL;
   23c6e:	f06f 0415 	mvn.w	r4, #21
}
   23c72:	4620      	mov	r0, r4
   23c74:	bd70      	pop	{r4, r5, r6, pc}
	len = strlen(modem_data[info]->data_name);
   23c76:	4b07      	ldr	r3, [pc, #28]	; (23c94 <modem_info_name_get+0x2c>)
   23c78:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   23c7c:	6870      	ldr	r0, [r6, #4]
   23c7e:	f7f6 f981 	bl	19f84 <strlen>
	if (len <= 0) {
   23c82:	1e04      	subs	r4, r0, #0
   23c84:	ddf3      	ble.n	23c6e <modem_info_name_get+0x6>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   23c86:	4622      	mov	r2, r4
   23c88:	6871      	ldr	r1, [r6, #4]
   23c8a:	4628      	mov	r0, r5
   23c8c:	f01d f868 	bl	40d60 <memcpy>
   23c90:	e7ef      	b.n	23c72 <modem_info_name_get+0xa>
   23c92:	bf00      	nop
   23c94:	00042944 	.word	0x00042944

00023c98 <modem_info_short_get>:
{
   23c98:	b530      	push	{r4, r5, lr}
   23c9a:	460d      	mov	r5, r1
   23c9c:	b0a1      	sub	sp, #132	; 0x84
   23c9e:	4604      	mov	r4, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   23ca0:	2280      	movs	r2, #128	; 0x80
   23ca2:	2100      	movs	r1, #0
   23ca4:	4668      	mov	r0, sp
   23ca6:	f01d f87b 	bl	40da0 <memset>
	if (buf == NULL) {
   23caa:	b1e5      	cbz	r5, 23ce6 <modem_info_short_get+0x4e>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   23cac:	4b11      	ldr	r3, [pc, #68]	; (23cf4 <modem_info_short_get+0x5c>)
   23cae:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   23cb2:	7aa3      	ldrb	r3, [r4, #10]
   23cb4:	2b03      	cmp	r3, #3
   23cb6:	d016      	beq.n	23ce6 <modem_info_short_get+0x4e>
	err = at_cmd_write(modem_data[info]->cmd,
   23cb8:	2300      	movs	r3, #0
   23cba:	2280      	movs	r2, #128	; 0x80
   23cbc:	4669      	mov	r1, sp
   23cbe:	6820      	ldr	r0, [r4, #0]
   23cc0:	f004 fb2c 	bl	2831c <at_cmd_write>
	if (err != 0) {
   23cc4:	b990      	cbnz	r0, 23cec <modem_info_short_get+0x54>
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_length]);
   23cc6:	4669      	mov	r1, sp
   23cc8:	f104 0009 	add.w	r0, r4, #9
   23ccc:	f7ff ff60 	bl	23b90 <modem_info_parse.isra.0>
	if (err) {
   23cd0:	b938      	cbnz	r0, 23ce2 <modem_info_short_get+0x4a>
	err = at_params_short_get(&m_param_list,
   23cd2:	462a      	mov	r2, r5
   23cd4:	7a21      	ldrb	r1, [r4, #8]
   23cd6:	4808      	ldr	r0, [pc, #32]	; (23cf8 <modem_info_short_get+0x60>)
   23cd8:	f01c fc24 	bl	40524 <at_params_short_get>
	return sizeof(u16_t);
   23cdc:	2800      	cmp	r0, #0
   23cde:	bf08      	it	eq
   23ce0:	2002      	moveq	r0, #2
}
   23ce2:	b021      	add	sp, #132	; 0x84
   23ce4:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   23ce6:	f06f 0015 	mvn.w	r0, #21
   23cea:	e7fa      	b.n	23ce2 <modem_info_short_get+0x4a>
		return -EIO;
   23cec:	f06f 0004 	mvn.w	r0, #4
   23cf0:	e7f7      	b.n	23ce2 <modem_info_short_get+0x4a>
   23cf2:	bf00      	nop
   23cf4:	00042944 	.word	0x00042944
   23cf8:	20023bc8 	.word	0x20023bc8

00023cfc <modem_info_string_get>:
{
   23cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t len = 0;
   23cfe:	2400      	movs	r4, #0
{
   23d00:	460d      	mov	r5, r1
   23d02:	b0a3      	sub	sp, #140	; 0x8c
   23d04:	4607      	mov	r7, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   23d06:	2280      	movs	r2, #128	; 0x80
   23d08:	4621      	mov	r1, r4
   23d0a:	a802      	add	r0, sp, #8
	size_t len = 0;
   23d0c:	9401      	str	r4, [sp, #4]
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   23d0e:	f01d f847 	bl	40da0 <memset>
	if (buf == NULL) {
   23d12:	2d00      	cmp	r5, #0
   23d14:	d068      	beq.n	23de8 <modem_info_string_get+0xec>
	err = at_cmd_write(modem_data[info]->cmd,
   23d16:	4b37      	ldr	r3, [pc, #220]	; (23df4 <modem_info_string_get+0xf8>)
   23d18:	2280      	movs	r2, #128	; 0x80
   23d1a:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
   23d1e:	a902      	add	r1, sp, #8
   23d20:	4623      	mov	r3, r4
   23d22:	6830      	ldr	r0, [r6, #0]
   23d24:	f004 fafa 	bl	2831c <at_cmd_write>
	if (err != 0) {
   23d28:	2800      	cmp	r0, #0
   23d2a:	d160      	bne.n	23dee <modem_info_string_get+0xf2>
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_length]);
   23d2c:	a902      	add	r1, sp, #8
   23d2e:	f106 0009 	add.w	r0, r6, #9
   23d32:	f7ff ff2d 	bl	23b90 <modem_info_parse.isra.0>
	if (err) {
   23d36:	4604      	mov	r4, r0
   23d38:	b188      	cbz	r0, 23d5e <modem_info_string_get+0x62>
		LOG_ERR("Unable to parse data: %d", err);
   23d3a:	2301      	movs	r3, #1
   23d3c:	f04f 0000 	mov.w	r0, #0
   23d40:	4a2d      	ldr	r2, [pc, #180]	; (23df8 <modem_info_string_get+0xfc>)
   23d42:	f363 0007 	bfi	r0, r3, #0, #8
   23d46:	4b2d      	ldr	r3, [pc, #180]	; (23dfc <modem_info_string_get+0x100>)
   23d48:	492d      	ldr	r1, [pc, #180]	; (23e00 <modem_info_string_get+0x104>)
   23d4a:	1a9b      	subs	r3, r3, r2
   23d4c:	4622      	mov	r2, r4
   23d4e:	08db      	lsrs	r3, r3, #3
   23d50:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Unable to obtain short: %d", err);
   23d54:	f01a fe07 	bl	3e966 <log_string_sync>
}
   23d58:	4620      	mov	r0, r4
   23d5a:	b023      	add	sp, #140	; 0x8c
   23d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_SHORT) {
   23d5e:	7ab3      	ldrb	r3, [r6, #10]
   23d60:	2b01      	cmp	r3, #1
   23d62:	d12c      	bne.n	23dbe <modem_info_string_get+0xc2>
		err = at_params_short_get(&m_param_list,
   23d64:	f10d 0202 	add.w	r2, sp, #2
   23d68:	7a31      	ldrb	r1, [r6, #8]
   23d6a:	4826      	ldr	r0, [pc, #152]	; (23e04 <modem_info_string_get+0x108>)
   23d6c:	f01c fbda 	bl	40524 <at_params_short_get>
		if (err) {
   23d70:	4604      	mov	r4, r0
   23d72:	b168      	cbz	r0, 23d90 <modem_info_string_get+0x94>
			LOG_ERR("Unable to obtain short: %d", err);
   23d74:	2301      	movs	r3, #1
   23d76:	f04f 0000 	mov.w	r0, #0
   23d7a:	4a1f      	ldr	r2, [pc, #124]	; (23df8 <modem_info_string_get+0xfc>)
   23d7c:	f363 0007 	bfi	r0, r3, #0, #8
   23d80:	4b1e      	ldr	r3, [pc, #120]	; (23dfc <modem_info_string_get+0x100>)
   23d82:	4921      	ldr	r1, [pc, #132]	; (23e08 <modem_info_string_get+0x10c>)
   23d84:	1a9b      	subs	r3, r3, r2
   23d86:	08db      	lsrs	r3, r3, #3
   23d88:	f363 108f 	bfi	r0, r3, #6, #10
   23d8c:	4622      	mov	r2, r4
   23d8e:	e7e1      	b.n	23d54 <modem_info_string_get+0x58>
		err = snprintf(buf, MODEM_INFO_MAX_RESPONSE_SIZE,
   23d90:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   23d94:	4a1d      	ldr	r2, [pc, #116]	; (23e0c <modem_info_string_get+0x110>)
   23d96:	2164      	movs	r1, #100	; 0x64
   23d98:	4628      	mov	r0, r5
   23d9a:	f018 fe01 	bl	3c9a0 <sniprintf>
	if (info == MODEM_INFO_ICCID) {
   23d9e:	2f0e      	cmp	r7, #14
   23da0:	d107      	bne.n	23db2 <modem_info_string_get+0xb6>
   23da2:	462c      	mov	r4, r5
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   23da4:	4628      	mov	r0, r5
   23da6:	f7f6 f8ed 	bl	19f84 <strlen>
   23daa:	1ca3      	adds	r3, r4, #2
   23dac:	1b64      	subs	r4, r4, r5
   23dae:	42a0      	cmp	r0, r4
   23db0:	d810      	bhi.n	23dd4 <modem_info_string_get+0xd8>
	return len <= 0 ? -ENOTSUP : len;
   23db2:	9c01      	ldr	r4, [sp, #4]
   23db4:	2c00      	cmp	r4, #0
   23db6:	bf08      	it	eq
   23db8:	f06f 0485 	mvneq.w	r4, #133	; 0x85
   23dbc:	e7cc      	b.n	23d58 <modem_info_string_get+0x5c>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   23dbe:	2b03      	cmp	r3, #3
   23dc0:	d1ed      	bne.n	23d9e <modem_info_string_get+0xa2>
		len = MODEM_INFO_MAX_RESPONSE_SIZE;
   23dc2:	2364      	movs	r3, #100	; 0x64
		err = at_params_string_get(&m_param_list,
   23dc4:	462a      	mov	r2, r5
		len = MODEM_INFO_MAX_RESPONSE_SIZE;
   23dc6:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&m_param_list,
   23dc8:	7a31      	ldrb	r1, [r6, #8]
   23dca:	ab01      	add	r3, sp, #4
   23dcc:	480d      	ldr	r0, [pc, #52]	; (23e04 <modem_info_string_get+0x108>)
   23dce:	f01c fbd6 	bl	4057e <at_params_string_get>
   23dd2:	e7e4      	b.n	23d9e <modem_info_string_get+0xa2>
		current_char = buf[i];
   23dd4:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   23dd8:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   23ddc:	461c      	mov	r4, r3
		buf[i] = next_char;
   23dde:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   23de2:	f803 2c01 	strb.w	r2, [r3, #-1]
   23de6:	e7dd      	b.n	23da4 <modem_info_string_get+0xa8>
		return -EINVAL;
   23de8:	f06f 0415 	mvn.w	r4, #21
   23dec:	e7b4      	b.n	23d58 <modem_info_string_get+0x5c>
		return -EIO;
   23dee:	f06f 0404 	mvn.w	r4, #4
   23df2:	e7b1      	b.n	23d58 <modem_info_string_get+0x5c>
   23df4:	00042944 	.word	0x00042944
   23df8:	00042314 	.word	0x00042314
   23dfc:	0004239c 	.word	0x0004239c
   23e00:	00046462 	.word	0x00046462
   23e04:	20023bc8 	.word	0x20023bc8
   23e08:	0004647b 	.word	0x0004647b
   23e0c:	00047204 	.word	0x00047204

00023e10 <modem_info_rsrp_register>:

int modem_info_rsrp_register(rsrp_cb_t cb)
{
	modem_info_rsrp_cb = cb;
   23e10:	4b12      	ldr	r3, [pc, #72]	; (23e5c <modem_info_rsrp_register+0x4c>)
{
   23e12:	b510      	push	{r4, lr}

	int rc = at_notif_register_handler(NULL,
   23e14:	4912      	ldr	r1, [pc, #72]	; (23e60 <modem_info_rsrp_register+0x50>)
	modem_info_rsrp_cb = cb;
   23e16:	6018      	str	r0, [r3, #0]
	int rc = at_notif_register_handler(NULL,
   23e18:	2000      	movs	r0, #0
   23e1a:	f7ff fa5f 	bl	232dc <at_notif_register_handler>
		modem_info_rsrp_subscribe_handler);
	if (rc != 0) {
   23e1e:	4604      	mov	r4, r0
   23e20:	b180      	cbz	r0, 23e44 <modem_info_rsrp_register+0x34>
		LOG_ERR("Can't register handler rc=%d", rc);
   23e22:	2301      	movs	r3, #1
   23e24:	f04f 0000 	mov.w	r0, #0
   23e28:	4a0e      	ldr	r2, [pc, #56]	; (23e64 <modem_info_rsrp_register+0x54>)
   23e2a:	f363 0007 	bfi	r0, r3, #0, #8
   23e2e:	4b0e      	ldr	r3, [pc, #56]	; (23e68 <modem_info_rsrp_register+0x58>)
   23e30:	490e      	ldr	r1, [pc, #56]	; (23e6c <modem_info_rsrp_register+0x5c>)
   23e32:	1a9b      	subs	r3, r3, r2
   23e34:	08db      	lsrs	r3, r3, #3
   23e36:	f363 108f 	bfi	r0, r3, #6, #10
   23e3a:	4622      	mov	r2, r4
   23e3c:	f01a fd93 	bl	3e966 <log_string_sync>
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
		return -EIO;
	}

	return 0;
}
   23e40:	4620      	mov	r0, r4
   23e42:	bd10      	pop	{r4, pc}
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
   23e44:	4603      	mov	r3, r0
   23e46:	4602      	mov	r2, r0
   23e48:	4601      	mov	r1, r0
   23e4a:	4809      	ldr	r0, [pc, #36]	; (23e70 <modem_info_rsrp_register+0x60>)
   23e4c:	f004 fa66 	bl	2831c <at_cmd_write>
   23e50:	1e04      	subs	r4, r0, #0
		return -EIO;
   23e52:	bf18      	it	ne
   23e54:	f06f 0404 	mvnne.w	r4, #4
   23e58:	e7f2      	b.n	23e40 <modem_info_rsrp_register+0x30>
   23e5a:	bf00      	nop
   23e5c:	20023bd0 	.word	0x20023bd0
   23e60:	00023bbd 	.word	0x00023bbd
   23e64:	00042314 	.word	0x00042314
   23e68:	0004239c 	.word	0x0004239c
   23e6c:	000463de 	.word	0x000463de
   23e70:	000463fb 	.word	0x000463fb

00023e74 <modem_info_init>:

int modem_info_init(void)
{
	/* Init at_cmd_parser storage module */
	int err = at_params_list_init(&m_param_list,
   23e74:	210a      	movs	r1, #10
   23e76:	4801      	ldr	r0, [pc, #4]	; (23e7c <modem_info_init+0x8>)
   23e78:	f01c baa9 	b.w	403ce <at_params_list_init>
   23e7c:	20023bc8 	.word	0x20023bc8

00023e80 <modem_data_get>:

	return 0;
}

static int modem_data_get(struct lte_param *param)
{
   23e80:	b538      	push	{r3, r4, r5, lr}
   23e82:	4605      	mov	r5, r0
	enum at_param_type data_type;
	int ret;

	data_type = modem_info_type_get(param->type);
   23e84:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
   23e88:	f7ff fee4 	bl	23c54 <modem_info_type_get>

	if (data_type < 0) {
		return -EINVAL;
	}

	if (data_type == AT_PARAM_TYPE_STRING) {
   23e8c:	2803      	cmp	r0, #3
   23e8e:	d11b      	bne.n	23ec8 <modem_data_get+0x48>
		ret = modem_info_string_get(param->type, param->value_string);
   23e90:	1ca9      	adds	r1, r5, #2
   23e92:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   23e96:	f7ff ff31 	bl	23cfc <modem_info_string_get>
		if (ret < 0) {
   23e9a:	1e04      	subs	r4, r0, #0
   23e9c:	db02      	blt.n	23ea4 <modem_data_get+0x24>
			LOG_ERR("Link data not obtained: %d", ret);
			return ret;
		}
	}

	return 0;
   23e9e:	2400      	movs	r4, #0
}
   23ea0:	4620      	mov	r0, r4
   23ea2:	bd38      	pop	{r3, r4, r5, pc}
			LOG_ERR("Link data not obtained: %d %d", param->type, ret);
   23ea4:	2301      	movs	r3, #1
   23ea6:	f04f 0000 	mov.w	r0, #0
   23eaa:	4a14      	ldr	r2, [pc, #80]	; (23efc <modem_data_get+0x7c>)
   23eac:	f363 0007 	bfi	r0, r3, #0, #8
   23eb0:	4b13      	ldr	r3, [pc, #76]	; (23f00 <modem_data_get+0x80>)
   23eb2:	4914      	ldr	r1, [pc, #80]	; (23f04 <modem_data_get+0x84>)
   23eb4:	1a9b      	subs	r3, r3, r2
   23eb6:	08db      	lsrs	r3, r3, #3
   23eb8:	f363 108f 	bfi	r0, r3, #6, #10
   23ebc:	f895 206c 	ldrb.w	r2, [r5, #108]	; 0x6c
   23ec0:	4623      	mov	r3, r4
   23ec2:	f01a fd50 	bl	3e966 <log_string_sync>
			return ret;
   23ec6:	e7eb      	b.n	23ea0 <modem_data_get+0x20>
	} else if (data_type == AT_PARAM_TYPE_NUM_SHORT) {
   23ec8:	2801      	cmp	r0, #1
   23eca:	d1e8      	bne.n	23e9e <modem_data_get+0x1e>
		ret = modem_info_short_get(param->type, &param->value);
   23ecc:	4629      	mov	r1, r5
   23ece:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   23ed2:	f7ff fee1 	bl	23c98 <modem_info_short_get>
		if (ret < 0) {
   23ed6:	1e04      	subs	r4, r0, #0
   23ed8:	dae1      	bge.n	23e9e <modem_data_get+0x1e>
			LOG_ERR("Link data not obtained: %d", ret);
   23eda:	2301      	movs	r3, #1
   23edc:	f04f 0000 	mov.w	r0, #0
   23ee0:	4a06      	ldr	r2, [pc, #24]	; (23efc <modem_data_get+0x7c>)
   23ee2:	f363 0007 	bfi	r0, r3, #0, #8
   23ee6:	4b06      	ldr	r3, [pc, #24]	; (23f00 <modem_data_get+0x80>)
   23ee8:	4907      	ldr	r1, [pc, #28]	; (23f08 <modem_data_get+0x88>)
   23eea:	1a9b      	subs	r3, r3, r2
   23eec:	08db      	lsrs	r3, r3, #3
   23eee:	f363 108f 	bfi	r0, r3, #6, #10
   23ef2:	4622      	mov	r2, r4
   23ef4:	f01a fd37 	bl	3e966 <log_string_sync>
			return ret;
   23ef8:	e7d2      	b.n	23ea0 <modem_data_get+0x20>
   23efa:	bf00      	nop
   23efc:	00042314 	.word	0x00042314
   23f00:	000423ac 	.word	0x000423ac
   23f04:	000465e3 	.word	0x000465e3
   23f08:	00046601 	.word	0x00046601

00023f0c <modem_info_params_init>:
	if (modem == NULL) {
   23f0c:	2800      	cmp	r0, #0
   23f0e:	d043      	beq.n	23f98 <modem_info_params_init+0x8c>
	modem->network.current_band.type	= MODEM_INFO_CUR_BAND;
   23f10:	2301      	movs	r3, #1
   23f12:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
	modem->network.sup_band.type		= MODEM_INFO_SUP_BAND;
   23f16:	2302      	movs	r3, #2
   23f18:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
	modem->network.area_code.type		= MODEM_INFO_AREA_CODE;
   23f1c:	2303      	movs	r3, #3
   23f1e:	f880 314c 	strb.w	r3, [r0, #332]	; 0x14c
	modem->network.current_operator.type	= MODEM_INFO_OPERATOR;
   23f22:	2305      	movs	r3, #5
   23f24:	f880 31bc 	strb.w	r3, [r0, #444]	; 0x1bc
	modem->network.mcc.type			= MODEM_INFO_MCC;
   23f28:	2306      	movs	r3, #6
   23f2a:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
	modem->network.mnc.type			= MODEM_INFO_MNC;
   23f2e:	2307      	movs	r3, #7
   23f30:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
	modem->network.cellid_hex.type		= MODEM_INFO_CELLID;
   23f34:	2308      	movs	r3, #8
   23f36:	f880 330c 	strb.w	r3, [r0, #780]	; 0x30c
	modem->network.ip_address.type		= MODEM_INFO_IP_ADDRESS;
   23f3a:	2309      	movs	r3, #9
   23f3c:	f880 337c 	strb.w	r3, [r0, #892]	; 0x37c
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   23f40:	2304      	movs	r3, #4
   23f42:	f880 33ec 	strb.w	r3, [r0, #1004]	; 0x3ec
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   23f46:	230f      	movs	r3, #15
   23f48:	f880 345c 	strb.w	r3, [r0, #1116]	; 0x45c
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   23f4c:	2310      	movs	r3, #16
   23f4e:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   23f52:	2311      	movs	r3, #17
   23f54:	f880 353c 	strb.w	r3, [r0, #1340]	; 0x53c
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   23f58:	2314      	movs	r3, #20
   23f5a:	f880 35ac 	strb.w	r3, [r0, #1452]	; 0x5ac
	modem->sim.uicc.type			= MODEM_INFO_UICC;
   23f5e:	230a      	movs	r3, #10
   23f60:	f880 3634 	strb.w	r3, [r0, #1588]	; 0x634
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   23f64:	230e      	movs	r3, #14
   23f66:	f880 36a4 	strb.w	r3, [r0, #1700]	; 0x6a4
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   23f6a:	2312      	movs	r3, #18
   23f6c:	f880 3714 	strb.w	r3, [r0, #1812]	; 0x714
	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   23f70:	230d      	movs	r3, #13
   23f72:	f880 3784 	strb.w	r3, [r0, #1924]	; 0x784
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   23f76:	230b      	movs	r3, #11
   23f78:	f880 37f4 	strb.w	r3, [r0, #2036]	; 0x7f4
	modem->device.imei.type			= MODEM_INFO_IMEI;
   23f7c:	2313      	movs	r3, #19
   23f7e:	f880 3864 	strb.w	r3, [r0, #2148]	; 0x864
	modem->device.board			= CONFIG_BOARD;
   23f82:	4b07      	ldr	r3, [pc, #28]	; (23fa0 <modem_info_params_init+0x94>)
   23f84:	f8c0 3868 	str.w	r3, [r0, #2152]	; 0x868
	modem->device.app_version		= STRINGIFY(APP_VERSION);
   23f88:	4b06      	ldr	r3, [pc, #24]	; (23fa4 <modem_info_params_init+0x98>)
   23f8a:	f8c0 386c 	str.w	r3, [r0, #2156]	; 0x86c
	modem->device.app_name			= STRINGIFY(PROJECT_NAME);
   23f8e:	4b06      	ldr	r3, [pc, #24]	; (23fa8 <modem_info_params_init+0x9c>)
   23f90:	f8c0 3870 	str.w	r3, [r0, #2160]	; 0x870
	return 0;
   23f94:	2000      	movs	r0, #0
   23f96:	4770      	bx	lr
		return -EINVAL;
   23f98:	f06f 0015 	mvn.w	r0, #21
}
   23f9c:	4770      	bx	lr
   23f9e:	bf00      	nop
   23fa0:	00046671 	.word	0x00046671
   23fa4:	00046682 	.word	0x00046682
   23fa8:	0004669e 	.word	0x0004669e

00023fac <modem_info_params_get>:

int modem_info_params_get(struct modem_param_info *modem)
{
   23fac:	b570      	push	{r4, r5, r6, lr}
	int ret;

	if (modem == NULL) {
   23fae:	4604      	mov	r4, r0
   23fb0:	2800      	cmp	r0, #0
   23fb2:	f000 80b9 	beq.w	24128 <modem_info_params_get+0x17c>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK)) {
		ret = modem_data_get(&modem->network.current_band);
   23fb6:	f7ff ff63 	bl	23e80 <modem_data_get>
   23fba:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->network.sup_band);
   23fbc:	f104 0070 	add.w	r0, r4, #112	; 0x70
   23fc0:	f7ff ff5e 	bl	23e80 <modem_data_get>
   23fc4:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ip_address);
   23fc6:	f504 7044 	add.w	r0, r4, #784	; 0x310
   23fca:	f7ff ff59 	bl	23e80 <modem_data_get>
   23fce:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ue_mode);
   23fd0:	f504 7060 	add.w	r0, r4, #896	; 0x380
   23fd4:	f7ff ff54 	bl	23e80 <modem_data_get>
   23fd8:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.current_operator);
   23fda:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   23fde:	f7ff ff4f 	bl	23e80 <modem_data_get>
   23fe2:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.cellid_hex);
   23fe4:	f504 7028 	add.w	r0, r4, #672	; 0x2a0
   23fe8:	f7ff ff4a 	bl	23e80 <modem_data_get>
   23fec:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.area_code);
   23fee:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   23ff2:	f7ff ff45 	bl	23e80 <modem_data_get>
   23ff6:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.lte_mode);
   23ff8:	f504 707c 	add.w	r0, r4, #1008	; 0x3f0
   23ffc:	f7ff ff40 	bl	23e80 <modem_data_get>
   24000:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.nbiot_mode);
   24002:	f504 608c 	add.w	r0, r4, #1120	; 0x460
   24006:	f7ff ff3b 	bl	23e80 <modem_data_get>
   2400a:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.gps_mode);
   2400c:	f504 609a 	add.w	r0, r4, #1232	; 0x4d0
   24010:	f7ff ff36 	bl	23e80 <modem_data_get>
   24014:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.date_time);
   24016:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
   2401a:	f7ff ff31 	bl	23e80 <modem_data_get>
   2401e:	f8b4 2152 	ldrh.w	r2, [r4, #338]	; 0x152
   24022:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   24026:	4405      	add	r5, r0
	memcpy(mcc->value_string, current_operator->value_string, 3);
   24028:	f504 70e1 	add.w	r0, r4, #450	; 0x1c2
   2402c:	f8a4 21c2 	strh.w	r2, [r4, #450]	; 0x1c2
   24030:	7083      	strb	r3, [r0, #2]
   24032:	f894 3157 	ldrb.w	r3, [r4, #343]	; 0x157
   24036:	f8b4 2155 	ldrh.w	r2, [r4, #341]	; 0x155
   2403a:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
   2403e:	f8a4 2232 	strh.w	r2, [r4, #562]	; 0x232
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   24042:	2100      	movs	r1, #0
   24044:	220a      	movs	r2, #10
   24046:	f018 fd8d 	bl	3cb64 <strtol>
		memcpy(&mnc->value_string, &current_operator->value_string[3], 3);
   2404a:	f204 2632 	addw	r6, r4, #562	; 0x232
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   2404e:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   24052:	220a      	movs	r2, #10
   24054:	2100      	movs	r1, #0
   24056:	4630      	mov	r0, r6
   24058:	f018 fd84 	bl	3cb64 <strtol>
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   2405c:	2210      	movs	r2, #16
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   2405e:	f8a4 0230 	strh.w	r0, [r4, #560]	; 0x230
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   24062:	2100      	movs	r1, #0
   24064:	f204 20a2 	addw	r0, r4, #674	; 0x2a2
   24068:	f018 fd7c 	bl	3cb64 <strtol>
   2406c:	f7f4 fb2a 	bl	186c4 <__aeabi_i2d>
   24070:	f504 66b6 	add.w	r6, r4, #1456	; 0x5b0
   24074:	e9c6 0100 	strd	r0, r1, [r6]
	area_code->value_string[4] = '\0';
   24078:	2100      	movs	r1, #0
	area_code->value = strtol(area_code->value_string, NULL, 16);
   2407a:	2210      	movs	r2, #16
	area_code->value_string[4] = '\0';
   2407c:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	area_code->value = strtol(area_code->value_string, NULL, 16);
   24080:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
   24084:	f018 fd6e 	bl	3cb64 <strtol>
   24088:	f8a4 00e0 	strh.w	r0, [r4, #224]	; 0xe0
				&modem->network.mcc,
				&modem->network.mnc);
		ret += cellid_to_dec(&modem->network.cellid_hex,
				&modem->network.cellid_dec);
		ret += area_code_parse(&modem->network.area_code);
		if (ret) {
   2408c:	b195      	cbz	r5, 240b4 <modem_info_params_get+0x108>
			LOG_ERR("Network data not obtained: %d", ret);
   2408e:	2301      	movs	r3, #1
   24090:	f04f 0000 	mov.w	r0, #0
   24094:	4a26      	ldr	r2, [pc, #152]	; (24130 <modem_info_params_get+0x184>)
   24096:	f363 0007 	bfi	r0, r3, #0, #8
   2409a:	4b26      	ldr	r3, [pc, #152]	; (24134 <modem_info_params_get+0x188>)
   2409c:	4926      	ldr	r1, [pc, #152]	; (24138 <modem_info_params_get+0x18c>)
   2409e:	1a9b      	subs	r3, r3, r2
   240a0:	462a      	mov	r2, r5
   240a2:	08db      	lsrs	r3, r3, #3
   240a4:	f363 108f 	bfi	r0, r3, #6, #10
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE)) {
		ret = modem_data_get(&modem->device.modem_fw);
		ret += modem_data_get(&modem->device.battery);
		ret += modem_data_get(&modem->device.imei);
		if (ret) {
			LOG_ERR("Device data not obtained: %d", ret);
   240a8:	f01a fc5d 	bl	3e966 <log_string_sync>
			return -EAGAIN;
   240ac:	f06f 020a 	mvn.w	r2, #10
		}
	}

	return 0;
}
   240b0:	4610      	mov	r0, r2
   240b2:	bd70      	pop	{r4, r5, r6, pc}
		ret = modem_data_get(&modem->sim.uicc);
   240b4:	f504 60b9 	add.w	r0, r4, #1480	; 0x5c8
   240b8:	f7ff fee2 	bl	23e80 <modem_data_get>
   240bc:	4605      	mov	r5, r0
			ret += modem_data_get(&modem->sim.iccid);
   240be:	f504 60c7 	add.w	r0, r4, #1592	; 0x638
   240c2:	f7ff fedd 	bl	23e80 <modem_data_get>
   240c6:	4405      	add	r5, r0
			ret += modem_data_get(&modem->sim.imsi);
   240c8:	f504 60d5 	add.w	r0, r4, #1704	; 0x6a8
   240cc:	f7ff fed8 	bl	23e80 <modem_data_get>
		if (ret) {
   240d0:	182a      	adds	r2, r5, r0
   240d2:	d00c      	beq.n	240ee <modem_info_params_get+0x142>
			LOG_ERR("Sim data not obtained: %d", ret);
   240d4:	2301      	movs	r3, #1
   240d6:	f04f 0000 	mov.w	r0, #0
   240da:	4915      	ldr	r1, [pc, #84]	; (24130 <modem_info_params_get+0x184>)
   240dc:	f363 0007 	bfi	r0, r3, #0, #8
   240e0:	4b14      	ldr	r3, [pc, #80]	; (24134 <modem_info_params_get+0x188>)
   240e2:	1a5b      	subs	r3, r3, r1
   240e4:	08db      	lsrs	r3, r3, #3
   240e6:	f363 108f 	bfi	r0, r3, #6, #10
   240ea:	4914      	ldr	r1, [pc, #80]	; (2413c <modem_info_params_get+0x190>)
   240ec:	e7dc      	b.n	240a8 <modem_info_params_get+0xfc>
		ret = modem_data_get(&modem->device.modem_fw);
   240ee:	f504 60e3 	add.w	r0, r4, #1816	; 0x718
   240f2:	f7ff fec5 	bl	23e80 <modem_data_get>
   240f6:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->device.battery);
   240f8:	f504 60f1 	add.w	r0, r4, #1928	; 0x788
   240fc:	f7ff fec0 	bl	23e80 <modem_data_get>
   24100:	4405      	add	r5, r0
		ret += modem_data_get(&modem->device.imei);
   24102:	f504 60ff 	add.w	r0, r4, #2040	; 0x7f8
   24106:	f7ff febb 	bl	23e80 <modem_data_get>
		if (ret) {
   2410a:	182a      	adds	r2, r5, r0
   2410c:	d0d0      	beq.n	240b0 <modem_info_params_get+0x104>
			LOG_ERR("Device data not obtained: %d", ret);
   2410e:	2301      	movs	r3, #1
   24110:	f04f 0000 	mov.w	r0, #0
   24114:	4906      	ldr	r1, [pc, #24]	; (24130 <modem_info_params_get+0x184>)
   24116:	f363 0007 	bfi	r0, r3, #0, #8
   2411a:	4b06      	ldr	r3, [pc, #24]	; (24134 <modem_info_params_get+0x188>)
   2411c:	1a5b      	subs	r3, r3, r1
   2411e:	08db      	lsrs	r3, r3, #3
   24120:	f363 108f 	bfi	r0, r3, #6, #10
   24124:	4906      	ldr	r1, [pc, #24]	; (24140 <modem_info_params_get+0x194>)
   24126:	e7bf      	b.n	240a8 <modem_info_params_get+0xfc>
		return -EINVAL;
   24128:	f06f 0215 	mvn.w	r2, #21
   2412c:	e7c0      	b.n	240b0 <modem_info_params_get+0x104>
   2412e:	bf00      	nop
   24130:	00042314 	.word	0x00042314
   24134:	000423ac 	.word	0x000423ac
   24138:	0004661c 	.word	0x0004661c
   2413c:	0004663a 	.word	0x0004663a
   24140:	00046654 	.word	0x00046654

00024144 <network_data_add>:

	return total_len;
}

static int network_data_add(struct network_param *network, cJSON *json_obj)
{
   24144:	b570      	push	{r4, r5, r6, lr}
   24146:	460e      	mov	r6, r1
   24148:	b09a      	sub	sp, #104	; 0x68

	static const char lte_string[]	 = "LTE-M";
	static const char nbiot_string[] = "NB-IoT";
	static const char gps_string[]	 = " GPS";

	if (network == NULL || json_obj == NULL) {
   2414a:	4605      	mov	r5, r0
   2414c:	2800      	cmp	r0, #0
   2414e:	d065      	beq.n	2421c <network_data_add+0xd8>
   24150:	2900      	cmp	r1, #0
   24152:	d063      	beq.n	2421c <network_data_add+0xd8>
		return -EINVAL;
	}

	total_len = json_add_data(&network->current_band, json_obj);
   24154:	f01c fa67 	bl	40626 <json_add_data>
	total_len += json_add_data(&network->sup_band, json_obj);
   24158:	4631      	mov	r1, r6
	total_len = json_add_data(&network->current_band, json_obj);
   2415a:	4604      	mov	r4, r0
	total_len += json_add_data(&network->sup_band, json_obj);
   2415c:	f105 0070 	add.w	r0, r5, #112	; 0x70
   24160:	f01c fa61 	bl	40626 <json_add_data>
	total_len += json_add_data(&network->area_code, json_obj);
   24164:	4631      	mov	r1, r6
	total_len += json_add_data(&network->sup_band, json_obj);
   24166:	4404      	add	r4, r0
	total_len += json_add_data(&network->area_code, json_obj);
   24168:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
   2416c:	f01c fa5b 	bl	40626 <json_add_data>
	total_len += json_add_data(&network->current_operator, json_obj);
   24170:	4631      	mov	r1, r6
	total_len += json_add_data(&network->area_code, json_obj);
   24172:	4404      	add	r4, r0
	total_len += json_add_data(&network->current_operator, json_obj);
   24174:	f505 70a8 	add.w	r0, r5, #336	; 0x150
   24178:	f01c fa55 	bl	40626 <json_add_data>
	total_len += json_add_data(&network->ip_address, json_obj);
   2417c:	4631      	mov	r1, r6
	total_len += json_add_data(&network->current_operator, json_obj);
   2417e:	4404      	add	r4, r0
	total_len += json_add_data(&network->ip_address, json_obj);
   24180:	f505 7044 	add.w	r0, r5, #784	; 0x310
   24184:	f01c fa4f 	bl	40626 <json_add_data>
	total_len += json_add_data(&network->ue_mode, json_obj);
   24188:	4631      	mov	r1, r6
	total_len += json_add_data(&network->ip_address, json_obj);
   2418a:	4404      	add	r4, r0
	total_len += json_add_data(&network->ue_mode, json_obj);
   2418c:	f505 7060 	add.w	r0, r5, #896	; 0x380
   24190:	f01c fa49 	bl	40626 <json_add_data>

	len = modem_info_name_get(network->cellid_hex.type, data_name);
   24194:	a901      	add	r1, sp, #4
	total_len += json_add_data(&network->ue_mode, json_obj);
   24196:	4404      	add	r4, r0
	len = modem_info_name_get(network->cellid_hex.type, data_name);
   24198:	f895 030c 	ldrb.w	r0, [r5, #780]	; 0x30c
   2419c:	f7ff fd64 	bl	23c68 <modem_info_name_get>
	data_name[len] =  '\0';
   241a0:	ab1a      	add	r3, sp, #104	; 0x68
   241a2:	4418      	add	r0, r3
   241a4:	2300      	movs	r3, #0
   241a6:	f800 3c64 	strb.w	r3, [r0, #-100]
	ret = json_add_num(json_obj, data_name, network->cellid_dec);
   241aa:	f505 63b6 	add.w	r3, r5, #1456	; 0x5b0
	json_num = cJSON_CreateNumber(num);
   241ae:	ed93 0b00 	vldr	d0, [r3]
   241b2:	f7f6 f969 	bl	1a488 <cJSON_CreateNumber>
	if (json_num == NULL) {
   241b6:	4602      	mov	r2, r0
   241b8:	b120      	cbz	r0, 241c4 <network_data_add+0x80>
	cJSON_AddItemToObject(parent, str, item);
   241ba:	a901      	add	r1, sp, #4
   241bc:	4630      	mov	r0, r6
   241be:	f01b fcef 	bl	3fba0 <cJSON_AddItemToObject>

	if (ret) {
		LOG_DBG("Unable to add the cell ID.");
	} else {
		total_len += sizeof(double);
   241c2:	3408      	adds	r4, #8
	}

	if (network->lte_mode.value == 1) {
   241c4:	f8b5 33f0 	ldrh.w	r3, [r5, #1008]	; 0x3f0
   241c8:	f505 62b7 	add.w	r2, r5, #1464	; 0x5b8
   241cc:	2b01      	cmp	r3, #1
   241ce:	d11a      	bne.n	24206 <network_data_add+0xc2>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
   241d0:	4610      	mov	r0, r2
   241d2:	4914      	ldr	r1, [pc, #80]	; (24224 <network_data_add+0xe0>)
   241d4:	f01c ff7c 	bl	410d0 <strcat>
   241d8:	4602      	mov	r2, r0
		strcat(network->network_mode, lte_string);
		total_len += sizeof(lte_string);
   241da:	3406      	adds	r4, #6
	} else if (network->nbiot_mode.value == 1) {
		strcat(network->network_mode, nbiot_string);
		total_len += sizeof(nbiot_string);
	}

	if (network->gps_mode.value == 1) {
   241dc:	f8b5 34d0 	ldrh.w	r3, [r5, #1232]	; 0x4d0
   241e0:	2b01      	cmp	r3, #1
   241e2:	d105      	bne.n	241f0 <network_data_add+0xac>
   241e4:	4610      	mov	r0, r2
   241e6:	4910      	ldr	r1, [pc, #64]	; (24228 <network_data_add+0xe4>)
   241e8:	f01c ff72 	bl	410d0 <strcat>
   241ec:	4602      	mov	r2, r0
		strcat(network->network_mode, gps_string);
		total_len += sizeof(gps_string);
   241ee:	3405      	adds	r4, #5
	}

	ret = json_add_str(json_obj, "networkMode", network->network_mode);
   241f0:	490e      	ldr	r1, [pc, #56]	; (2422c <network_data_add+0xe8>)
   241f2:	4630      	mov	r0, r6
   241f4:	f01c fa01 	bl	405fa <json_add_str>

	if (ret) {
   241f8:	b110      	cbz	r0, 24200 <network_data_add+0xbc>
		printk("Unable to add the network mode");
   241fa:	480d      	ldr	r0, [pc, #52]	; (24230 <network_data_add+0xec>)
   241fc:	f01a fb96 	bl	3e92c <printk>
	}

	return total_len;
}
   24200:	4620      	mov	r0, r4
   24202:	b01a      	add	sp, #104	; 0x68
   24204:	bd70      	pop	{r4, r5, r6, pc}
	} else if (network->nbiot_mode.value == 1) {
   24206:	f8b5 3460 	ldrh.w	r3, [r5, #1120]	; 0x460
   2420a:	2b01      	cmp	r3, #1
   2420c:	d1e6      	bne.n	241dc <network_data_add+0x98>
   2420e:	4610      	mov	r0, r2
   24210:	4908      	ldr	r1, [pc, #32]	; (24234 <network_data_add+0xf0>)
   24212:	f01c ff5d 	bl	410d0 <strcat>
		total_len += sizeof(nbiot_string);
   24216:	3407      	adds	r4, #7
   24218:	4602      	mov	r2, r0
   2421a:	e7df      	b.n	241dc <network_data_add+0x98>
		return -EINVAL;
   2421c:	f06f 0415 	mvn.w	r4, #21
   24220:	e7ee      	b.n	24200 <network_data_add+0xbc>
   24222:	bf00      	nop
   24224:	000466dc 	.word	0x000466dc
   24228:	000466d7 	.word	0x000466d7
   2422c:	00046708 	.word	0x00046708
   24230:	00046714 	.word	0x00046714
   24234:	00046701 	.word	0x00046701

00024238 <device_data_add>:

	return total_len;
}

static int device_data_add(struct device_param *device, cJSON *json_obj)
{
   24238:	b570      	push	{r4, r5, r6, lr}
   2423a:	460d      	mov	r5, r1
	int total_len;

	if (device == NULL || json_obj == NULL) {
   2423c:	4606      	mov	r6, r0
   2423e:	b328      	cbz	r0, 2428c <device_data_add+0x54>
   24240:	b321      	cbz	r1, 2428c <device_data_add+0x54>
		return -EINVAL;
	}

	total_len = json_add_data(&device->modem_fw, json_obj);
   24242:	f01c f9f0 	bl	40626 <json_add_data>
	total_len += json_add_data(&device->battery, json_obj);
   24246:	4629      	mov	r1, r5
	total_len = json_add_data(&device->modem_fw, json_obj);
   24248:	4604      	mov	r4, r0
	total_len += json_add_data(&device->battery, json_obj);
   2424a:	f106 0070 	add.w	r0, r6, #112	; 0x70
   2424e:	f01c f9ea 	bl	40626 <json_add_data>
	total_len += json_add_data(&device->imei, json_obj);
   24252:	4629      	mov	r1, r5
	total_len += json_add_data(&device->battery, json_obj);
   24254:	4404      	add	r4, r0
	total_len += json_add_data(&device->imei, json_obj);
   24256:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
   2425a:	f01c f9e4 	bl	40626 <json_add_data>
	total_len += json_add_str(json_obj, "board", device->board);
   2425e:	f8d6 2150 	ldr.w	r2, [r6, #336]	; 0x150
	total_len += json_add_data(&device->imei, json_obj);
   24262:	4404      	add	r4, r0
	total_len += json_add_str(json_obj, "board", device->board);
   24264:	490b      	ldr	r1, [pc, #44]	; (24294 <device_data_add+0x5c>)
   24266:	4628      	mov	r0, r5
   24268:	f01c f9c7 	bl	405fa <json_add_str>
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   2426c:	f8d6 2154 	ldr.w	r2, [r6, #340]	; 0x154
	total_len += json_add_str(json_obj, "board", device->board);
   24270:	4404      	add	r4, r0
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   24272:	4909      	ldr	r1, [pc, #36]	; (24298 <device_data_add+0x60>)
   24274:	4628      	mov	r0, r5
   24276:	f01c f9c0 	bl	405fa <json_add_str>
	total_len += json_add_str(json_obj, "appName", device->app_name);
   2427a:	f8d6 2158 	ldr.w	r2, [r6, #344]	; 0x158
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   2427e:	4404      	add	r4, r0
	total_len += json_add_str(json_obj, "appName", device->app_name);
   24280:	4906      	ldr	r1, [pc, #24]	; (2429c <device_data_add+0x64>)
   24282:	4628      	mov	r0, r5
   24284:	f01c f9b9 	bl	405fa <json_add_str>
   24288:	4420      	add	r0, r4

	return total_len;
}
   2428a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2428c:	f06f 0015 	mvn.w	r0, #21
   24290:	e7fb      	b.n	2428a <device_data_add+0x52>
   24292:	bf00      	nop
   24294:	000466be 	.word	0x000466be
   24298:	000466c4 	.word	0x000466c4
   2429c:	000466cf 	.word	0x000466cf

000242a0 <modem_info_json_object_encode>:

int modem_info_json_object_encode(struct modem_param_info *modem,
				  cJSON *root_obj)
{
   242a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   242a4:	4681      	mov	r9, r0
	if (root_obj == NULL || modem == NULL) {
   242a6:	460d      	mov	r5, r1
   242a8:	2900      	cmp	r1, #0
   242aa:	d04f      	beq.n	2434c <modem_info_json_object_encode+0xac>
   242ac:	2800      	cmp	r0, #0
   242ae:	d04d      	beq.n	2434c <modem_info_json_object_encode+0xac>
		return -EINVAL;
	}

	int obj_count = cJSON_GetArraySize(root_obj);
   242b0:	4608      	mov	r0, r1
   242b2:	f01b fc68 	bl	3fb86 <cJSON_GetArraySize>
   242b6:	4604      	mov	r4, r0

	cJSON *network_obj	= cJSON_CreateObject();
   242b8:	f7fe fa20 	bl	226fc <cJSON_CreateObject>
   242bc:	4680      	mov	r8, r0
	cJSON *sim_obj		= cJSON_CreateObject();
   242be:	f7fe fa1d 	bl	226fc <cJSON_CreateObject>
   242c2:	4607      	mov	r7, r0
	cJSON *device_obj	= cJSON_CreateObject();
   242c4:	f7fe fa1a 	bl	226fc <cJSON_CreateObject>
   242c8:	4606      	mov	r6, r0

	if (network_obj == NULL || sim_obj == NULL || device_obj == NULL) {
   242ca:	f1b8 0f00 	cmp.w	r8, #0
   242ce:	d03a      	beq.n	24346 <modem_info_json_object_encode+0xa6>
   242d0:	b3cf      	cbz	r7, 24346 <modem_info_json_object_encode+0xa6>
   242d2:	b3c0      	cbz	r0, 24346 <modem_info_json_object_encode+0xa6>
		obj_count = -ENOMEM;
		goto delete_object;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
	    (network_data_add(&modem->network, network_obj) > 0)) {
   242d4:	4641      	mov	r1, r8
   242d6:	4648      	mov	r0, r9
   242d8:	f7ff ff34 	bl	24144 <network_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
   242dc:	2800      	cmp	r0, #0
   242de:	dd06      	ble.n	242ee <modem_info_json_object_encode+0x4e>
	cJSON_AddItemToObject(parent, str, item);
   242e0:	4642      	mov	r2, r8
   242e2:	491c      	ldr	r1, [pc, #112]	; (24354 <modem_info_json_object_encode+0xb4>)
   242e4:	4628      	mov	r0, r5
   242e6:	f01b fc5b 	bl	3fba0 <cJSON_AddItemToObject>

		json_add_obj(root_obj, "networkInfo", network_obj);
		network_obj = NULL;
   242ea:	f04f 0800 	mov.w	r8, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
	    (sim_data_add(&modem->sim, sim_obj) > 0)) {
   242ee:	4639      	mov	r1, r7
   242f0:	f509 60b9 	add.w	r0, r9, #1480	; 0x5c8
   242f4:	f01c f9db 	bl	406ae <sim_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
   242f8:	2800      	cmp	r0, #0
   242fa:	dd05      	ble.n	24308 <modem_info_json_object_encode+0x68>
	cJSON_AddItemToObject(parent, str, item);
   242fc:	463a      	mov	r2, r7
   242fe:	4916      	ldr	r1, [pc, #88]	; (24358 <modem_info_json_object_encode+0xb8>)
   24300:	4628      	mov	r0, r5
   24302:	f01b fc4d 	bl	3fba0 <cJSON_AddItemToObject>

		json_add_obj(root_obj, "simInfo", sim_obj);
		sim_obj = NULL;
   24306:	2700      	movs	r7, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
	    (device_data_add(&modem->device, device_obj) > 0)) {
   24308:	4631      	mov	r1, r6
   2430a:	f509 60e3 	add.w	r0, r9, #1816	; 0x718
   2430e:	f7ff ff93 	bl	24238 <device_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
   24312:	2800      	cmp	r0, #0
   24314:	dd05      	ble.n	24322 <modem_info_json_object_encode+0x82>
	cJSON_AddItemToObject(parent, str, item);
   24316:	4632      	mov	r2, r6
   24318:	4910      	ldr	r1, [pc, #64]	; (2435c <modem_info_json_object_encode+0xbc>)
   2431a:	4628      	mov	r0, r5
   2431c:	f01b fc40 	bl	3fba0 <cJSON_AddItemToObject>

		json_add_obj(root_obj, "deviceInfo", device_obj);
		device_obj = NULL;
   24320:	2600      	movs	r6, #0
	}

delete_object:
	cJSON_Delete(network_obj);
   24322:	4640      	mov	r0, r8
   24324:	f7fe f926 	bl	22574 <cJSON_Delete>
	cJSON_Delete(sim_obj);
   24328:	4638      	mov	r0, r7
   2432a:	f7fe f923 	bl	22574 <cJSON_Delete>
	cJSON_Delete(device_obj);
   2432e:	4630      	mov	r0, r6
   24330:	f7fe f920 	bl	22574 <cJSON_Delete>

	if (obj_count >= 0) {
   24334:	2c00      	cmp	r4, #0
   24336:	db03      	blt.n	24340 <modem_info_json_object_encode+0xa0>
		obj_count = cJSON_GetArraySize(root_obj) - obj_count;
   24338:	4628      	mov	r0, r5
   2433a:	f01b fc24 	bl	3fb86 <cJSON_GetArraySize>
   2433e:	1b04      	subs	r4, r0, r4
	}

	return obj_count;
}
   24340:	4620      	mov	r0, r4
   24342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		obj_count = -ENOMEM;
   24346:	f06f 040b 	mvn.w	r4, #11
   2434a:	e7ea      	b.n	24322 <modem_info_json_object_encode+0x82>
		return -EINVAL;
   2434c:	f06f 0415 	mvn.w	r4, #21
   24350:	e7f6      	b.n	24340 <modem_info_json_object_encode+0xa0>
   24352:	bf00      	nop
   24354:	000466e2 	.word	0x000466e2
   24358:	000466ee 	.word	0x000466ee
   2435c:	000466f6 	.word	0x000466f6

00024360 <cloud_get_binding>:

extern struct cloud_backend __cloud_backends_start[0];
extern struct cloud_backend __cloud_backends_end[0];

struct cloud_backend *cloud_get_binding(const char *name)
{
   24360:	b570      	push	{r4, r5, r6, lr}
   24362:	4606      	mov	r6, r0
	struct cloud_backend *info;

	for (info = __cloud_backends_start; info != __cloud_backends_end;
   24364:	4c09      	ldr	r4, [pc, #36]	; (2438c <cloud_get_binding+0x2c>)
   24366:	4d0a      	ldr	r5, [pc, #40]	; (24390 <cloud_get_binding+0x30>)
   24368:	42ac      	cmp	r4, r5
   2436a:	d101      	bne.n	24370 <cloud_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   2436c:	2400      	movs	r4, #0
   2436e:	e00a      	b.n	24386 <cloud_get_binding+0x26>
		if (info->api == NULL) {
   24370:	6823      	ldr	r3, [r4, #0]
   24372:	b90b      	cbnz	r3, 24378 <cloud_get_binding+0x18>
	     info++) {
   24374:	3408      	adds	r4, #8
   24376:	e7f7      	b.n	24368 <cloud_get_binding+0x8>
		if (strcmp(name, info->config->name) == 0) {
   24378:	6863      	ldr	r3, [r4, #4]
   2437a:	4630      	mov	r0, r6
   2437c:	6819      	ldr	r1, [r3, #0]
   2437e:	f7f5 fdf7 	bl	19f70 <strcmp>
   24382:	2800      	cmp	r0, #0
   24384:	d1f6      	bne.n	24374 <cloud_get_binding+0x14>
}
   24386:	4620      	mov	r0, r4
   24388:	bd70      	pop	{r4, r5, r6, pc}
   2438a:	bf00      	nop
   2438c:	0004a2c8 	.word	0x0004a2c8
   24390:	0004a2d0 	.word	0x0004a2d0

00024394 <uninit>:

	return nrf_cloud_init(&params);
}

static int uninit(const struct cloud_backend *const backend)
{
   24394:	b508      	push	{r3, lr}
	LOG_INF("uninit() is not implemented");
   24396:	f04f 0000 	mov.w	r0, #0
   2439a:	2303      	movs	r3, #3
   2439c:	4a06      	ldr	r2, [pc, #24]	; (243b8 <uninit+0x24>)
   2439e:	f363 0007 	bfi	r0, r3, #0, #8
   243a2:	4b06      	ldr	r3, [pc, #24]	; (243bc <uninit+0x28>)
   243a4:	4906      	ldr	r1, [pc, #24]	; (243c0 <uninit+0x2c>)
   243a6:	1a9b      	subs	r3, r3, r2
   243a8:	08db      	lsrs	r3, r3, #3
   243aa:	f363 108f 	bfi	r0, r3, #6, #10
   243ae:	f01a fada 	bl	3e966 <log_string_sync>

	return 0;
}
   243b2:	2000      	movs	r0, #0
   243b4:	bd08      	pop	{r3, pc}
   243b6:	bf00      	nop
   243b8:	00042314 	.word	0x00042314
   243bc:	000423cc 	.word	0x000423cc
   243c0:	00046951 	.word	0x00046951

000243c4 <event_handler>:
{
   243c4:	b570      	push	{r4, r5, r6, lr}
   243c6:	4606      	mov	r6, r0
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   243c8:	4c63      	ldr	r4, [pc, #396]	; (24558 <event_handler+0x194>)
{
   243ca:	b088      	sub	sp, #32
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   243cc:	6823      	ldr	r3, [r4, #0]
	struct cloud_event evt = { 0 };
   243ce:	221c      	movs	r2, #28
   243d0:	2100      	movs	r1, #0
   243d2:	a801      	add	r0, sp, #4
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   243d4:	685d      	ldr	r5, [r3, #4]
	struct cloud_event evt = { 0 };
   243d6:	f01c fce3 	bl	40da0 <memset>
	switch (nrf_cloud_evt->type) {
   243da:	7833      	ldrb	r3, [r6, #0]
   243dc:	4a5f      	ldr	r2, [pc, #380]	; (2455c <event_handler+0x198>)
   243de:	4960      	ldr	r1, [pc, #384]	; (24560 <event_handler+0x19c>)
   243e0:	2b05      	cmp	r3, #5
   243e2:	eba2 0201 	sub.w	r2, r2, r1
   243e6:	f3c2 02c9 	ubfx	r2, r2, #3, #10
   243ea:	d079      	beq.n	244e0 <event_handler+0x11c>
   243ec:	d821      	bhi.n	24432 <event_handler+0x6e>
   243ee:	2b02      	cmp	r3, #2
   243f0:	d05c      	beq.n	244ac <event_handler+0xe8>
   243f2:	d80d      	bhi.n	24410 <event_handler+0x4c>
   243f4:	2b01      	cmp	r3, #1
   243f6:	d04a      	beq.n	2448e <event_handler+0xca>
		LOG_DBG("Unknown event type: %d", nrf_cloud_evt->type);
   243f8:	2104      	movs	r1, #4
   243fa:	f04f 0000 	mov.w	r0, #0
   243fe:	f361 0007 	bfi	r0, r1, #0, #8
   24402:	f362 108f 	bfi	r0, r2, #6, #10
   24406:	4957      	ldr	r1, [pc, #348]	; (24564 <event_handler+0x1a0>)
   24408:	4a57      	ldr	r2, [pc, #348]	; (24568 <event_handler+0x1a4>)
   2440a:	f01a faac 	bl	3e966 <log_string_sync>
}
   2440e:	e072      	b.n	244f6 <event_handler+0x132>
	switch (nrf_cloud_evt->type) {
   24410:	2b03      	cmp	r3, #3
   24412:	d058      	beq.n	244c6 <event_handler+0x102>
   24414:	2b04      	cmp	r3, #4
   24416:	d1ef      	bne.n	243f8 <event_handler+0x34>
		LOG_DBG("NRF_CLOUD_EVT_READY");
   24418:	2304      	movs	r3, #4
   2441a:	f04f 0000 	mov.w	r0, #0
   2441e:	f363 0007 	bfi	r0, r3, #0, #8
   24422:	f362 108f 	bfi	r0, r2, #6, #10
   24426:	4951      	ldr	r1, [pc, #324]	; (2456c <event_handler+0x1a8>)
   24428:	4a4f      	ldr	r2, [pc, #316]	; (24568 <event_handler+0x1a4>)
   2442a:	f01a fa9c 	bl	3e966 <log_string_sync>
		evt.type = CLOUD_EVT_READY;
   2442e:	2302      	movs	r3, #2
   24430:	e039      	b.n	244a6 <event_handler+0xe2>
	switch (nrf_cloud_evt->type) {
   24432:	2b08      	cmp	r3, #8
   24434:	d061      	beq.n	244fa <event_handler+0x136>
   24436:	d818      	bhi.n	2446a <event_handler+0xa6>
   24438:	2b06      	cmp	r3, #6
   2443a:	d06b      	beq.n	24514 <event_handler+0x150>
   2443c:	2b07      	cmp	r3, #7
   2443e:	d1db      	bne.n	243f8 <event_handler+0x34>
		LOG_DBG("NRF_CLOUD_EVT_SENSOR_DATA_ACK");
   24440:	2304      	movs	r3, #4
   24442:	f04f 0000 	mov.w	r0, #0
   24446:	f363 0007 	bfi	r0, r3, #0, #8
   2444a:	f362 108f 	bfi	r0, r2, #6, #10
   2444e:	4948      	ldr	r1, [pc, #288]	; (24570 <event_handler+0x1ac>)
   24450:	4a45      	ldr	r2, [pc, #276]	; (24568 <event_handler+0x1a4>)
   24452:	f01a fa88 	bl	3e966 <log_string_sync>
		evt.type = CLOUD_EVT_DATA_SENT;
   24456:	2304      	movs	r3, #4
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   24458:	68ea      	ldr	r2, [r5, #12]
		evt.type = CLOUD_EVT_DATA_SENT;
   2445a:	f88d 3004 	strb.w	r3, [sp, #4]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2445e:	eb0d 0103 	add.w	r1, sp, r3
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   24462:	6820      	ldr	r0, [r4, #0]
   24464:	f01c f93b 	bl	406de <cloud_notify_event>
		break;
   24468:	e045      	b.n	244f6 <event_handler+0x132>
	switch (nrf_cloud_evt->type) {
   2446a:	2b09      	cmp	r3, #9
   2446c:	d067      	beq.n	2453e <event_handler+0x17a>
   2446e:	2bff      	cmp	r3, #255	; 0xff
   24470:	d1c2      	bne.n	243f8 <event_handler+0x34>
		LOG_DBG("NRF_CLOUD_EVT_ERROR: %d", nrf_cloud_evt->status);
   24472:	2304      	movs	r3, #4
   24474:	f04f 0000 	mov.w	r0, #0
   24478:	f363 0007 	bfi	r0, r3, #0, #8
   2447c:	f362 108f 	bfi	r0, r2, #6, #10
   24480:	6873      	ldr	r3, [r6, #4]
   24482:	4a39      	ldr	r2, [pc, #228]	; (24568 <event_handler+0x1a4>)
   24484:	493b      	ldr	r1, [pc, #236]	; (24574 <event_handler+0x1b0>)
   24486:	f01a fa6e 	bl	3e966 <log_string_sync>
		evt.type = CLOUD_EVT_ERROR;
   2448a:	2303      	movs	r3, #3
   2448c:	e00b      	b.n	244a6 <event_handler+0xe2>
		LOG_DBG("NRF_CLOUD_EVT_TRANSPORT_CONNECTED");
   2448e:	2304      	movs	r3, #4
   24490:	f04f 0000 	mov.w	r0, #0
   24494:	f363 0007 	bfi	r0, r3, #0, #8
   24498:	f362 108f 	bfi	r0, r2, #6, #10
   2449c:	4936      	ldr	r1, [pc, #216]	; (24578 <event_handler+0x1b4>)
   2449e:	4a32      	ldr	r2, [pc, #200]	; (24568 <event_handler+0x1a4>)
   244a0:	f01a fa61 	bl	3e966 <log_string_sync>
		evt.type = CLOUD_EVT_CONNECTED;
   244a4:	2300      	movs	r3, #0
		evt.type = CLOUD_EVT_FOTA_DONE;
   244a6:	f88d 3004 	strb.w	r3, [sp, #4]
   244aa:	e045      	b.n	24538 <event_handler+0x174>
		LOG_DBG("NRF_CLOUD_EVT_USER_ASSOCIATION_REQUEST");
   244ac:	2304      	movs	r3, #4
   244ae:	f04f 0000 	mov.w	r0, #0
   244b2:	f363 0007 	bfi	r0, r3, #0, #8
   244b6:	f362 108f 	bfi	r0, r2, #6, #10
   244ba:	4930      	ldr	r1, [pc, #192]	; (2457c <event_handler+0x1b8>)
   244bc:	4a2a      	ldr	r2, [pc, #168]	; (24568 <event_handler+0x1a4>)
   244be:	f01a fa52 	bl	3e966 <log_string_sync>
		evt.type = CLOUD_EVT_PAIR_REQUEST;
   244c2:	2306      	movs	r3, #6
   244c4:	e7ef      	b.n	244a6 <event_handler+0xe2>
		LOG_DBG("NRF_CLOUD_EVT_USER_ASSOCIATED");
   244c6:	2304      	movs	r3, #4
   244c8:	f04f 0000 	mov.w	r0, #0
   244cc:	f363 0007 	bfi	r0, r3, #0, #8
   244d0:	f362 108f 	bfi	r0, r2, #6, #10
   244d4:	492a      	ldr	r1, [pc, #168]	; (24580 <event_handler+0x1bc>)
   244d6:	4a24      	ldr	r2, [pc, #144]	; (24568 <event_handler+0x1a4>)
   244d8:	f01a fa45 	bl	3e966 <log_string_sync>
		evt.type = CLOUD_EVT_PAIR_DONE;
   244dc:	2307      	movs	r3, #7
   244de:	e7e2      	b.n	244a6 <event_handler+0xe2>
		LOG_DBG("NRF_CLOUD_EVT_SENSOR_ATTACHED");
   244e0:	f04f 0000 	mov.w	r0, #0
   244e4:	2304      	movs	r3, #4
   244e6:	f363 0007 	bfi	r0, r3, #0, #8
   244ea:	f362 108f 	bfi	r0, r2, #6, #10
   244ee:	4925      	ldr	r1, [pc, #148]	; (24584 <event_handler+0x1c0>)
   244f0:	4a1d      	ldr	r2, [pc, #116]	; (24568 <event_handler+0x1a4>)
   244f2:	f01a fa38 	bl	3e966 <log_string_sync>
}
   244f6:	b008      	add	sp, #32
   244f8:	bd70      	pop	{r4, r5, r6, pc}
		LOG_DBG("NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED");
   244fa:	2304      	movs	r3, #4
   244fc:	f04f 0000 	mov.w	r0, #0
   24500:	f363 0007 	bfi	r0, r3, #0, #8
   24504:	f362 108f 	bfi	r0, r2, #6, #10
   24508:	491f      	ldr	r1, [pc, #124]	; (24588 <event_handler+0x1c4>)
   2450a:	4a17      	ldr	r2, [pc, #92]	; (24568 <event_handler+0x1a4>)
   2450c:	f01a fa2b 	bl	3e966 <log_string_sync>
		evt.type = CLOUD_EVT_DISCONNECTED;
   24510:	2301      	movs	r3, #1
   24512:	e7c8      	b.n	244a6 <event_handler+0xe2>
		LOG_DBG("NRF_CLOUD_EVT_RX_DATA");
   24514:	2304      	movs	r3, #4
   24516:	f04f 0000 	mov.w	r0, #0
   2451a:	f363 0007 	bfi	r0, r3, #0, #8
   2451e:	f362 108f 	bfi	r0, r2, #6, #10
   24522:	491a      	ldr	r1, [pc, #104]	; (2458c <event_handler+0x1c8>)
   24524:	4a10      	ldr	r2, [pc, #64]	; (24568 <event_handler+0x1a4>)
   24526:	f01a fa1e 	bl	3e966 <log_string_sync>
		evt.type = CLOUD_EVT_DATA_RECEIVED;
   2452a:	2305      	movs	r3, #5
   2452c:	f88d 3004 	strb.w	r3, [sp, #4]
		evt.data.msg.buf = (char *)nrf_cloud_evt->data.ptr;
   24530:	68f3      	ldr	r3, [r6, #12]
   24532:	9302      	str	r3, [sp, #8]
		evt.data.msg.len = nrf_cloud_evt->data.len;
   24534:	68b3      	ldr	r3, [r6, #8]
   24536:	9303      	str	r3, [sp, #12]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   24538:	68ea      	ldr	r2, [r5, #12]
   2453a:	a901      	add	r1, sp, #4
   2453c:	e791      	b.n	24462 <event_handler+0x9e>
		LOG_DBG("NRF_CLOUD_EVT_FOTA_DONE");
   2453e:	2304      	movs	r3, #4
   24540:	f04f 0000 	mov.w	r0, #0
   24544:	f363 0007 	bfi	r0, r3, #0, #8
   24548:	f362 108f 	bfi	r0, r2, #6, #10
   2454c:	4910      	ldr	r1, [pc, #64]	; (24590 <event_handler+0x1cc>)
   2454e:	4a06      	ldr	r2, [pc, #24]	; (24568 <event_handler+0x1a4>)
   24550:	f01a fa09 	bl	3e966 <log_string_sync>
		evt.type = CLOUD_EVT_FOTA_DONE;
   24554:	2308      	movs	r3, #8
   24556:	e7a6      	b.n	244a6 <event_handler+0xe2>
   24558:	20023bd8 	.word	0x20023bd8
   2455c:	000423cc 	.word	0x000423cc
   24560:	00042314 	.word	0x00042314
   24564:	000468c2 	.word	0x000468c2
   24568:	00046765 	.word	0x00046765
   2456c:	000467eb 	.word	0x000467eb
   24570:	00046825 	.word	0x00046825
   24574:	00046870 	.word	0x00046870
   24578:	00046778 	.word	0x00046778
   2457c:	0004679e 	.word	0x0004679e
   24580:	000467c9 	.word	0x000467c9
   24584:	00046803 	.word	0x00046803
   24588:	00046847 	.word	0x00046847
   2458c:	0004688c 	.word	0x0004688c
   24590:	000468a6 	.word	0x000468a6

00024594 <send>:
	return nrf_cloud_disconnect();
}

static int send(const struct cloud_backend *const backend,
		const struct cloud_msg *const msg)
{
   24594:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err = 0;

	if (msg->endpoint.len != 0) {
   24596:	694c      	ldr	r4, [r1, #20]
   24598:	2c00      	cmp	r4, #0
   2459a:	d156      	bne.n	2464a <send+0xb6>
		/* Unsupported case where topic is not the default. */
		return -ENOTSUP;
	}

	switch (msg->endpoint.type) {
   2459c:	7b0b      	ldrb	r3, [r1, #12]
   2459e:	b18b      	cbz	r3, 245c4 <send+0x30>
   245a0:	2b01      	cmp	r3, #1
   245a2:	d034      	beq.n	2460e <send+0x7a>
			return err;
		}
		break;
	}
	default:
		LOG_DBG("Unknown cloud endpoint type: %d", msg->endpoint.type);
   245a4:	2204      	movs	r2, #4
   245a6:	f04f 0000 	mov.w	r0, #0
   245aa:	4929      	ldr	r1, [pc, #164]	; (24650 <send+0xbc>)
   245ac:	f362 0007 	bfi	r0, r2, #0, #8
   245b0:	4a28      	ldr	r2, [pc, #160]	; (24654 <send+0xc0>)
   245b2:	1a52      	subs	r2, r2, r1
   245b4:	08d2      	lsrs	r2, r2, #3
   245b6:	f362 108f 	bfi	r0, r2, #6, #10
   245ba:	4927      	ldr	r1, [pc, #156]	; (24658 <send+0xc4>)
   245bc:	4a27      	ldr	r2, [pc, #156]	; (2465c <send+0xc8>)
   245be:	f01a f9d2 	bl	3e966 <log_string_sync>
		break;
	}

	if (err) {
   245c2:	e00a      	b.n	245da <send+0x46>
		const struct nct_dc_data buf = {
   245c4:	9302      	str	r3, [sp, #8]
   245c6:	684b      	ldr	r3, [r1, #4]
   245c8:	9300      	str	r3, [sp, #0]
   245ca:	680b      	ldr	r3, [r1, #0]
   245cc:	9301      	str	r3, [sp, #4]
		if (msg->qos == CLOUD_QOS_AT_MOST_ONCE) {
   245ce:	7a0b      	ldrb	r3, [r1, #8]
   245d0:	b933      	cbnz	r3, 245e0 <send+0x4c>
			err = nct_dc_stream(&buf);
   245d2:	4668      	mov	r0, sp
   245d4:	f01c f975 	bl	408c2 <nct_dc_stream>
			err = nct_dc_send(&buf);
   245d8:	4604      	mov	r4, r0
		return err;
	}

	return 0;
}
   245da:	4620      	mov	r0, r4
   245dc:	b004      	add	sp, #16
   245de:	bd10      	pop	{r4, pc}
		} else if (msg->qos == CLOUD_QOS_AT_LEAST_ONCE) {
   245e0:	2b01      	cmp	r3, #1
   245e2:	d103      	bne.n	245ec <send+0x58>
			err = nct_dc_send(&buf);
   245e4:	4668      	mov	r0, sp
   245e6:	f01c f969 	bl	408bc <nct_dc_send>
   245ea:	e7f5      	b.n	245d8 <send+0x44>
			LOG_ERR("Unsupported QoS setting.");
   245ec:	2301      	movs	r3, #1
   245ee:	f04f 0000 	mov.w	r0, #0
   245f2:	4a17      	ldr	r2, [pc, #92]	; (24650 <send+0xbc>)
   245f4:	f363 0007 	bfi	r0, r3, #0, #8
   245f8:	4b16      	ldr	r3, [pc, #88]	; (24654 <send+0xc0>)
   245fa:	4919      	ldr	r1, [pc, #100]	; (24660 <send+0xcc>)
   245fc:	1a9b      	subs	r3, r3, r2
   245fe:	08db      	lsrs	r3, r3, #3
   24600:	f363 108f 	bfi	r0, r3, #6, #10
   24604:	f01a f9af 	bl	3e966 <log_string_sync>
			return err;
   24608:	f06f 0415 	mvn.w	r4, #21
   2460c:	e7e5      	b.n	245da <send+0x46>
		struct nct_cc_data shadow_data = {
   2460e:	684a      	ldr	r2, [r1, #4]
		err = nct_cc_send(&shadow_data);
   24610:	4668      	mov	r0, sp
		struct nct_cc_data shadow_data = {
   24612:	9200      	str	r2, [sp, #0]
   24614:	680a      	ldr	r2, [r1, #0]
   24616:	e9cd 4402 	strd	r4, r4, [sp, #8]
   2461a:	9201      	str	r2, [sp, #4]
   2461c:	f88d 300c 	strb.w	r3, [sp, #12]
		err = nct_cc_send(&shadow_data);
   24620:	f001 f938 	bl	25894 <nct_cc_send>
		if (err) {
   24624:	4604      	mov	r4, r0
   24626:	2800      	cmp	r0, #0
   24628:	d0d7      	beq.n	245da <send+0x46>
			LOG_ERR("nct_cc_send failed, error: %d\n", err);
   2462a:	2301      	movs	r3, #1
   2462c:	f04f 0000 	mov.w	r0, #0
   24630:	4a07      	ldr	r2, [pc, #28]	; (24650 <send+0xbc>)
   24632:	f363 0007 	bfi	r0, r3, #0, #8
   24636:	4b07      	ldr	r3, [pc, #28]	; (24654 <send+0xc0>)
   24638:	490a      	ldr	r1, [pc, #40]	; (24664 <send+0xd0>)
   2463a:	1a9b      	subs	r3, r3, r2
   2463c:	08db      	lsrs	r3, r3, #3
   2463e:	f363 108f 	bfi	r0, r3, #6, #10
   24642:	4622      	mov	r2, r4
   24644:	f01a f98f 	bl	3e966 <log_string_sync>
			return err;
   24648:	e7c7      	b.n	245da <send+0x46>
		return -ENOTSUP;
   2464a:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2464e:	e7c4      	b.n	245da <send+0x46>
   24650:	00042314 	.word	0x00042314
   24654:	000423cc 	.word	0x000423cc
   24658:	00046923 	.word	0x00046923
   2465c:	00046773 	.word	0x00046773
   24660:	000468eb 	.word	0x000468eb
   24664:	00046904 	.word	0x00046904

00024668 <nfsm_get_current_state>:
	return m_current_state;
   24668:	4b01      	ldr	r3, [pc, #4]	; (24670 <nfsm_get_current_state+0x8>)
   2466a:	7818      	ldrb	r0, [r3, #0]
}
   2466c:	4770      	bx	lr
   2466e:	bf00      	nop
   24670:	2002b376 	.word	0x2002b376

00024674 <nfsm_set_current_state_and_notify>:
{
   24674:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("state: %d", state);
   24676:	2304      	movs	r3, #4
{
   24678:	4605      	mov	r5, r0
	LOG_DBG("state: %d", state);
   2467a:	f04f 0000 	mov.w	r0, #0
   2467e:	4a0c      	ldr	r2, [pc, #48]	; (246b0 <nfsm_set_current_state_and_notify+0x3c>)
   24680:	f363 0007 	bfi	r0, r3, #0, #8
   24684:	4b0b      	ldr	r3, [pc, #44]	; (246b4 <nfsm_set_current_state_and_notify+0x40>)
{
   24686:	460c      	mov	r4, r1
   24688:	1a9b      	subs	r3, r3, r2
   2468a:	08db      	lsrs	r3, r3, #3
	LOG_DBG("state: %d", state);
   2468c:	f363 108f 	bfi	r0, r3, #6, #10
   24690:	4a09      	ldr	r2, [pc, #36]	; (246b8 <nfsm_set_current_state_and_notify+0x44>)
   24692:	462b      	mov	r3, r5
   24694:	4909      	ldr	r1, [pc, #36]	; (246bc <nfsm_set_current_state_and_notify+0x48>)
   24696:	f01a f966 	bl	3e966 <log_string_sync>
	m_current_state = state;
   2469a:	4b09      	ldr	r3, [pc, #36]	; (246c0 <nfsm_set_current_state_and_notify+0x4c>)
   2469c:	701d      	strb	r5, [r3, #0]
	if ((m_event_handler != NULL) && (evt != NULL)) {
   2469e:	4b09      	ldr	r3, [pc, #36]	; (246c4 <nfsm_set_current_state_and_notify+0x50>)
   246a0:	681b      	ldr	r3, [r3, #0]
   246a2:	b123      	cbz	r3, 246ae <nfsm_set_current_state_and_notify+0x3a>
   246a4:	b11c      	cbz	r4, 246ae <nfsm_set_current_state_and_notify+0x3a>
		m_event_handler(evt);
   246a6:	4620      	mov	r0, r4
}
   246a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		m_event_handler(evt);
   246ac:	4718      	bx	r3
}
   246ae:	bd70      	pop	{r4, r5, r6, pc}
   246b0:	00042314 	.word	0x00042314
   246b4:	000423cc 	.word	0x000423cc
   246b8:	00046743 	.word	0x00046743
   246bc:	000468dd 	.word	0x000468dd
   246c0:	2002b376 	.word	0x2002b376
   246c4:	20023bd4 	.word	0x20023bd4

000246c8 <nrf_cloud_init>:
{
   246c8:	b538      	push	{r3, r4, r5, lr}
	if (m_current_state != STATE_IDLE) {
   246ca:	4c0d      	ldr	r4, [pc, #52]	; (24700 <nrf_cloud_init+0x38>)
{
   246cc:	4605      	mov	r5, r0
	if (m_current_state != STATE_IDLE) {
   246ce:	7823      	ldrb	r3, [r4, #0]
   246d0:	b983      	cbnz	r3, 246f4 <nrf_cloud_init+0x2c>
	if (param->event_handler == NULL) {
   246d2:	6803      	ldr	r3, [r0, #0]
   246d4:	b18b      	cbz	r3, 246fa <nrf_cloud_init+0x32>
	err = nfsm_init();
   246d6:	f01c f8ef 	bl	408b8 <nfsm_init>
	if (err) {
   246da:	b950      	cbnz	r0, 246f2 <nrf_cloud_init+0x2a>
	err = nrf_codec_init();
   246dc:	f01c f864 	bl	407a8 <nrf_codec_init>
	if (err) {
   246e0:	b938      	cbnz	r0, 246f2 <nrf_cloud_init+0x2a>
	err = nct_init();
   246e2:	f000 fea7 	bl	25434 <nct_init>
	if (err) {
   246e6:	b920      	cbnz	r0, 246f2 <nrf_cloud_init+0x2a>
	m_event_handler = param->event_handler;
   246e8:	4b06      	ldr	r3, [pc, #24]	; (24704 <nrf_cloud_init+0x3c>)
   246ea:	682a      	ldr	r2, [r5, #0]
   246ec:	601a      	str	r2, [r3, #0]
	m_current_state = STATE_INITIALIZED;
   246ee:	2301      	movs	r3, #1
   246f0:	7023      	strb	r3, [r4, #0]
}
   246f2:	bd38      	pop	{r3, r4, r5, pc}
		return -EACCES;
   246f4:	f06f 000c 	mvn.w	r0, #12
   246f8:	e7fb      	b.n	246f2 <nrf_cloud_init+0x2a>
		return -EINVAL;
   246fa:	f06f 0015 	mvn.w	r0, #21
   246fe:	e7f8      	b.n	246f2 <nrf_cloud_init+0x2a>
   24700:	2002b376 	.word	0x2002b376
   24704:	20023bd4 	.word	0x20023bd4

00024708 <init>:
{
   24708:	b507      	push	{r0, r1, r2, lr}
	const struct nrf_cloud_init_param params = {
   2470a:	4b06      	ldr	r3, [pc, #24]	; (24724 <init+0x1c>)
   2470c:	9301      	str	r3, [sp, #4]
	backend->config->handler = handler;
   2470e:	6843      	ldr	r3, [r0, #4]
   24710:	6059      	str	r1, [r3, #4]
	nrf_cloud_backend = (struct cloud_backend *)backend;
   24712:	4b05      	ldr	r3, [pc, #20]	; (24728 <init+0x20>)
   24714:	6018      	str	r0, [r3, #0]
	return nrf_cloud_init(&params);
   24716:	a801      	add	r0, sp, #4
   24718:	f7ff ffd6 	bl	246c8 <nrf_cloud_init>
}
   2471c:	b003      	add	sp, #12
   2471e:	f85d fb04 	ldr.w	pc, [sp], #4
   24722:	bf00      	nop
   24724:	000243c5 	.word	0x000243c5
   24728:	20023bd8 	.word	0x20023bd8

0002472c <nrf_cloud_connect>:
	if (NOT_VALID_STATE(STATE_INITIALIZED)) {
   2472c:	4b04      	ldr	r3, [pc, #16]	; (24740 <nrf_cloud_connect+0x14>)
   2472e:	781b      	ldrb	r3, [r3, #0]
   24730:	2b01      	cmp	r3, #1
   24732:	d801      	bhi.n	24738 <nrf_cloud_connect+0xc>
	return nct_connect();
   24734:	f000 bfd2 	b.w	256dc <nct_connect>
}
   24738:	f06f 000c 	mvn.w	r0, #12
   2473c:	4770      	bx	lr
   2473e:	bf00      	nop
   24740:	2002b376 	.word	0x2002b376

00024744 <nrf_cloud_disconnect>:
	if (NOT_VALID_STATE(STATE_DC_CONNECTED)) {
   24744:	4b04      	ldr	r3, [pc, #16]	; (24758 <nrf_cloud_disconnect+0x14>)
   24746:	781b      	ldrb	r3, [r3, #0]
   24748:	2b09      	cmp	r3, #9
   2474a:	d801      	bhi.n	24750 <nrf_cloud_disconnect+0xc>
	return nct_disconnect();
   2474c:	f001 b9e2 	b.w	25b14 <nct_disconnect>
}
   24750:	f06f 000c 	mvn.w	r0, #12
   24754:	4770      	bx	lr
   24756:	bf00      	nop
   24758:	2002b376 	.word	0x2002b376

0002475c <nct_input>:
	return nfsm_handle_incoming_event(evt, m_current_state);
   2475c:	4b01      	ldr	r3, [pc, #4]	; (24764 <nct_input+0x8>)
   2475e:	7819      	ldrb	r1, [r3, #0]
   24760:	f000 bbd2 	b.w	24f08 <nfsm_handle_incoming_event>
   24764:	2002b376 	.word	0x2002b376

00024768 <nct_apply_update>:
	m_event_handler(&evt);
   24768:	4b01      	ldr	r3, [pc, #4]	; (24770 <nct_apply_update+0x8>)
   2476a:	4802      	ldr	r0, [pc, #8]	; (24774 <nct_apply_update+0xc>)
   2476c:	681b      	ldr	r3, [r3, #0]
   2476e:	4718      	bx	r3
   24770:	20023bd4 	.word	0x20023bd4
   24774:	000429d4 	.word	0x000429d4

00024778 <nrf_cloud_decode_requested_state>:
	return 0;
}

int nrf_cloud_decode_requested_state(const struct nrf_cloud_data *input,
				     enum nfsm_state *requested_state)
{
   24778:	b570      	push	{r4, r5, r6, lr}
   2477a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(requested_state != NULL);
   2477c:	460e      	mov	r6, r1
   2477e:	b949      	cbnz	r1, 24794 <nrf_cloud_decode_requested_state+0x1c>
   24780:	494f      	ldr	r1, [pc, #316]	; (248c0 <nrf_cloud_decode_requested_state+0x148>)
   24782:	4850      	ldr	r0, [pc, #320]	; (248c4 <nrf_cloud_decode_requested_state+0x14c>)
   24784:	23ba      	movs	r3, #186	; 0xba
   24786:	4a50      	ldr	r2, [pc, #320]	; (248c8 <nrf_cloud_decode_requested_state+0x150>)
   24788:	f01a f8d0 	bl	3e92c <printk>
   2478c:	21ba      	movs	r1, #186	; 0xba
   2478e:	484e      	ldr	r0, [pc, #312]	; (248c8 <nrf_cloud_decode_requested_state+0x150>)
   24790:	f01a f8d9 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   24794:	b94c      	cbnz	r4, 247aa <nrf_cloud_decode_requested_state+0x32>
   24796:	494d      	ldr	r1, [pc, #308]	; (248cc <nrf_cloud_decode_requested_state+0x154>)
   24798:	484a      	ldr	r0, [pc, #296]	; (248c4 <nrf_cloud_decode_requested_state+0x14c>)
   2479a:	23bb      	movs	r3, #187	; 0xbb
   2479c:	4a4a      	ldr	r2, [pc, #296]	; (248c8 <nrf_cloud_decode_requested_state+0x150>)
   2479e:	f01a f8c5 	bl	3e92c <printk>
   247a2:	21bb      	movs	r1, #187	; 0xbb
   247a4:	4848      	ldr	r0, [pc, #288]	; (248c8 <nrf_cloud_decode_requested_state+0x150>)
   247a6:	f01a f8ce 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   247aa:	6863      	ldr	r3, [r4, #4]
   247ac:	b94b      	cbnz	r3, 247c2 <nrf_cloud_decode_requested_state+0x4a>
   247ae:	4948      	ldr	r1, [pc, #288]	; (248d0 <nrf_cloud_decode_requested_state+0x158>)
   247b0:	4844      	ldr	r0, [pc, #272]	; (248c4 <nrf_cloud_decode_requested_state+0x14c>)
   247b2:	23bc      	movs	r3, #188	; 0xbc
   247b4:	4a44      	ldr	r2, [pc, #272]	; (248c8 <nrf_cloud_decode_requested_state+0x150>)
   247b6:	f01a f8b9 	bl	3e92c <printk>
   247ba:	21bc      	movs	r1, #188	; 0xbc
   247bc:	4842      	ldr	r0, [pc, #264]	; (248c8 <nrf_cloud_decode_requested_state+0x150>)
   247be:	f01a f8c2 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   247c2:	6823      	ldr	r3, [r4, #0]
   247c4:	b94b      	cbnz	r3, 247da <nrf_cloud_decode_requested_state+0x62>
   247c6:	4943      	ldr	r1, [pc, #268]	; (248d4 <nrf_cloud_decode_requested_state+0x15c>)
   247c8:	483e      	ldr	r0, [pc, #248]	; (248c4 <nrf_cloud_decode_requested_state+0x14c>)
   247ca:	23bd      	movs	r3, #189	; 0xbd
   247cc:	4a3e      	ldr	r2, [pc, #248]	; (248c8 <nrf_cloud_decode_requested_state+0x150>)
   247ce:	f01a f8ad 	bl	3e92c <printk>
   247d2:	21bd      	movs	r1, #189	; 0xbd
   247d4:	483c      	ldr	r0, [pc, #240]	; (248c8 <nrf_cloud_decode_requested_state+0x150>)
   247d6:	f01a f8b6 	bl	3e946 <assert_post_action>
	cJSON *desired_obj;
	cJSON *pairing_obj;
	cJSON *pairing_state_obj;
	cJSON *topic_prefix_obj;

	root_obj = cJSON_Parse(input->ptr);
   247da:	6860      	ldr	r0, [r4, #4]
   247dc:	f01b f9cc 	bl	3fb78 <cJSON_Parse>
	if (root_obj == NULL) {
   247e0:	4605      	mov	r5, r0
   247e2:	b9a8      	cbnz	r0, 24810 <nrf_cloud_decode_requested_state+0x98>
		LOG_ERR("cJSON_Parse failed: %s",
   247e4:	2301      	movs	r3, #1
   247e6:	f04f 0500 	mov.w	r5, #0
   247ea:	4a3b      	ldr	r2, [pc, #236]	; (248d8 <nrf_cloud_decode_requested_state+0x160>)
   247ec:	f363 0507 	bfi	r5, r3, #0, #8
   247f0:	4b3a      	ldr	r3, [pc, #232]	; (248dc <nrf_cloud_decode_requested_state+0x164>)
   247f2:	6860      	ldr	r0, [r4, #4]
   247f4:	1a9b      	subs	r3, r3, r2
   247f6:	08db      	lsrs	r3, r3, #3
   247f8:	f363 158f 	bfi	r5, r3, #6, #10
   247fc:	f01a f8c5 	bl	3e98a <log_strdup>
   24800:	4937      	ldr	r1, [pc, #220]	; (248e0 <nrf_cloud_decode_requested_state+0x168>)
   24802:	4602      	mov	r2, r0
   24804:	4628      	mov	r0, r5
   24806:	f01a f8ae 	bl	3e966 <log_string_sync>
	pairing_state_obj = json_object_decode(pairing_obj, "state");

	if (!pairing_state_obj || pairing_state_obj->type != cJSON_String) {
		LOG_DBG("No valid state found!");
		cJSON_Delete(root_obj);
		return -ENOENT;
   2480a:	f06f 0401 	mvn.w	r4, #1
   2480e:	e012      	b.n	24836 <nrf_cloud_decode_requested_state+0xbe>
	state_obj = json_object_decode(root_obj, "state");
   24810:	4934      	ldr	r1, [pc, #208]	; (248e4 <nrf_cloud_decode_requested_state+0x16c>)
   24812:	f01b ff96 	bl	40742 <json_object_decode>
		desired_obj = json_object_decode(root_obj, "desired");
   24816:	4934      	ldr	r1, [pc, #208]	; (248e8 <nrf_cloud_decode_requested_state+0x170>)
	if (state_obj == NULL) {
   24818:	b900      	cbnz	r0, 2481c <nrf_cloud_decode_requested_state+0xa4>
		desired_obj = json_object_decode(root_obj, "desired");
   2481a:	4628      	mov	r0, r5
		desired_obj = json_object_decode(state_obj, "desired");
   2481c:	f01b ff91 	bl	40742 <json_object_decode>
	topic_prefix_obj = json_object_decode(desired_obj,
   24820:	4932      	ldr	r1, [pc, #200]	; (248ec <nrf_cloud_decode_requested_state+0x174>)
		desired_obj = json_object_decode(state_obj, "desired");
   24822:	4604      	mov	r4, r0
	topic_prefix_obj = json_object_decode(desired_obj,
   24824:	f01b ff8d 	bl	40742 <json_object_decode>
	if (topic_prefix_obj != NULL) {
   24828:	b138      	cbz	r0, 2483a <nrf_cloud_decode_requested_state+0xc2>
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   2482a:	2307      	movs	r3, #7
		cJSON_Delete(root_obj);
   2482c:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   2482e:	7033      	strb	r3, [r6, #0]
		cJSON_Delete(root_obj);
   24830:	f7fd fea0 	bl	22574 <cJSON_Delete>
		return 0;
   24834:	2400      	movs	r4, #0
	}

	cJSON_Delete(root_obj);

	return 0;
}
   24836:	4620      	mov	r0, r4
   24838:	bd70      	pop	{r4, r5, r6, pc}
	pairing_obj = json_object_decode(desired_obj, "pairing");
   2483a:	492d      	ldr	r1, [pc, #180]	; (248f0 <nrf_cloud_decode_requested_state+0x178>)
   2483c:	4620      	mov	r0, r4
   2483e:	f01b ff80 	bl	40742 <json_object_decode>
	pairing_state_obj = json_object_decode(pairing_obj, "state");
   24842:	4928      	ldr	r1, [pc, #160]	; (248e4 <nrf_cloud_decode_requested_state+0x16c>)
   24844:	f01b ff7d 	bl	40742 <json_object_decode>
	if (!pairing_state_obj || pairing_state_obj->type != cJSON_String) {
   24848:	b110      	cbz	r0, 24850 <nrf_cloud_decode_requested_state+0xd8>
   2484a:	68c3      	ldr	r3, [r0, #12]
   2484c:	2b10      	cmp	r3, #16
   2484e:	d012      	beq.n	24876 <nrf_cloud_decode_requested_state+0xfe>
		LOG_DBG("No valid state found!");
   24850:	2304      	movs	r3, #4
   24852:	f04f 0000 	mov.w	r0, #0
   24856:	4a20      	ldr	r2, [pc, #128]	; (248d8 <nrf_cloud_decode_requested_state+0x160>)
   24858:	f363 0007 	bfi	r0, r3, #0, #8
   2485c:	4b1f      	ldr	r3, [pc, #124]	; (248dc <nrf_cloud_decode_requested_state+0x164>)
   2485e:	4925      	ldr	r1, [pc, #148]	; (248f4 <nrf_cloud_decode_requested_state+0x17c>)
   24860:	1a9b      	subs	r3, r3, r2
   24862:	08db      	lsrs	r3, r3, #3
   24864:	f363 108f 	bfi	r0, r3, #6, #10
   24868:	4a23      	ldr	r2, [pc, #140]	; (248f8 <nrf_cloud_decode_requested_state+0x180>)
   2486a:	f01a f87c 	bl	3e966 <log_string_sync>
		cJSON_Delete(root_obj);
   2486e:	4628      	mov	r0, r5
   24870:	f7fd fe80 	bl	22574 <cJSON_Delete>
   24874:	e7c9      	b.n	2480a <nrf_cloud_decode_requested_state+0x92>
	const char *state_str = pairing_state_obj->valuestring;
   24876:	6904      	ldr	r4, [r0, #16]
	return !strncmp(s1, s2, strlen(s2));
   24878:	4820      	ldr	r0, [pc, #128]	; (248fc <nrf_cloud_decode_requested_state+0x184>)
   2487a:	f7f5 fb83 	bl	19f84 <strlen>
   2487e:	491f      	ldr	r1, [pc, #124]	; (248fc <nrf_cloud_decode_requested_state+0x184>)
   24880:	4602      	mov	r2, r0
   24882:	4620      	mov	r0, r4
   24884:	f01c fc49 	bl	4111a <strncmp>
	if (compare(state_str, DUA_PIN_STR)) {
   24888:	4604      	mov	r4, r0
   2488a:	b928      	cbnz	r0, 24898 <nrf_cloud_decode_requested_state+0x120>
			(*requested_state) = STATE_UA_PIN_WAIT;
   2488c:	2306      	movs	r3, #6
	cJSON_Delete(root_obj);
   2488e:	4628      	mov	r0, r5
			(*requested_state) = STATE_UA_PIN_WAIT;
   24890:	7033      	strb	r3, [r6, #0]
	cJSON_Delete(root_obj);
   24892:	f7fd fe6f 	bl	22574 <cJSON_Delete>
	return 0;
   24896:	e7ce      	b.n	24836 <nrf_cloud_decode_requested_state+0xbe>
		LOG_ERR("Deprecated state. Delete device "
   24898:	2301      	movs	r3, #1
   2489a:	f04f 0000 	mov.w	r0, #0
   2489e:	4a0e      	ldr	r2, [pc, #56]	; (248d8 <nrf_cloud_decode_requested_state+0x160>)
   248a0:	f363 0007 	bfi	r0, r3, #0, #8
   248a4:	4b0d      	ldr	r3, [pc, #52]	; (248dc <nrf_cloud_decode_requested_state+0x164>)
   248a6:	4916      	ldr	r1, [pc, #88]	; (24900 <nrf_cloud_decode_requested_state+0x188>)
   248a8:	1a9b      	subs	r3, r3, r2
   248aa:	08db      	lsrs	r3, r3, #3
   248ac:	f363 108f 	bfi	r0, r3, #6, #10
   248b0:	f01a f859 	bl	3e966 <log_string_sync>
		cJSON_Delete(root_obj);
   248b4:	4628      	mov	r0, r5
   248b6:	f7fd fe5d 	bl	22574 <cJSON_Delete>
		return -ENOTSUP;
   248ba:	f06f 0485 	mvn.w	r4, #133	; 0x85
   248be:	e7ba      	b.n	24836 <nrf_cloud_decode_requested_state+0xbe>
   248c0:	000469c4 	.word	0x000469c4
   248c4:	00044643 	.word	0x00044643
   248c8:	00046ae5 	.word	0x00046ae5
   248cc:	000469e3 	.word	0x000469e3
   248d0:	000469f8 	.word	0x000469f8
   248d4:	00046a12 	.word	0x00046a12
   248d8:	00042314 	.word	0x00042314
   248dc:	000423d4 	.word	0x000423d4
   248e0:	00046a22 	.word	0x00046a22
   248e4:	00044a4c 	.word	0x00044a4c
   248e8:	00046a39 	.word	0x00046a39
   248ec:	00046a41 	.word	0x00046a41
   248f0:	00046a5c 	.word	0x00046a5c
   248f4:	00046a64 	.word	0x00046a64
   248f8:	0004696d 	.word	0x0004696d
   248fc:	00046a7e 	.word	0x00046a7e
   24900:	00046a8d 	.word	0x00046a8d

00024904 <nrf_cloud_encode_state>:

int nrf_cloud_encode_state(u32_t reported_state, struct nrf_cloud_data *output)
{
   24904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24908:	4604      	mov	r4, r0
   2490a:	b086      	sub	sp, #24
	int ret;

	__ASSERT_NO_MSG(output != NULL);
   2490c:	4689      	mov	r9, r1
   2490e:	b949      	cbnz	r1, 24924 <nrf_cloud_encode_state+0x20>
   24910:	4959      	ldr	r1, [pc, #356]	; (24a78 <nrf_cloud_encode_state+0x174>)
   24912:	485a      	ldr	r0, [pc, #360]	; (24a7c <nrf_cloud_encode_state+0x178>)
   24914:	23fc      	movs	r3, #252	; 0xfc
   24916:	4a5a      	ldr	r2, [pc, #360]	; (24a80 <nrf_cloud_encode_state+0x17c>)
   24918:	f01a f808 	bl	3e92c <printk>
   2491c:	21fc      	movs	r1, #252	; 0xfc
   2491e:	4858      	ldr	r0, [pc, #352]	; (24a80 <nrf_cloud_encode_state+0x17c>)
   24920:	f01a f811 	bl	3e946 <assert_post_action>

	cJSON *root_obj = cJSON_CreateObject();
   24924:	f7fd feea 	bl	226fc <cJSON_CreateObject>
   24928:	4607      	mov	r7, r0
	cJSON *state_obj = cJSON_CreateObject();
   2492a:	f7fd fee7 	bl	226fc <cJSON_CreateObject>
   2492e:	4680      	mov	r8, r0
	cJSON *reported_obj = cJSON_CreateObject();
   24930:	f7fd fee4 	bl	226fc <cJSON_CreateObject>
   24934:	4606      	mov	r6, r0
	cJSON *pairing_obj = cJSON_CreateObject();
   24936:	f7fd fee1 	bl	226fc <cJSON_CreateObject>
   2493a:	4605      	mov	r5, r0

	if ((root_obj  == NULL) || (state_obj == NULL) ||
   2493c:	b127      	cbz	r7, 24948 <nrf_cloud_encode_state+0x44>
   2493e:	f1b8 0f00 	cmp.w	r8, #0
   24942:	d001      	beq.n	24948 <nrf_cloud_encode_state+0x44>
   24944:	b106      	cbz	r6, 24948 <nrf_cloud_encode_state+0x44>
	    (reported_obj == NULL) || (pairing_obj == NULL)) {
   24946:	b970      	cbnz	r0, 24966 <nrf_cloud_encode_state+0x62>

		/* Report pairing topics. */
		cJSON *topics_obj = cJSON_CreateObject();

		if (topics_obj == NULL) {
			cJSON_Delete(root_obj);
   24948:	4638      	mov	r0, r7
	ret += json_add_obj(state_obj, "reported", reported_obj);
	ret += json_add_obj(root_obj, "state", state_obj);

	if (ret != 0) {

		cJSON_Delete(root_obj);
   2494a:	f7fd fe13 	bl	22574 <cJSON_Delete>
		cJSON_Delete(state_obj);
   2494e:	4640      	mov	r0, r8
   24950:	f7fd fe10 	bl	22574 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   24954:	4630      	mov	r0, r6
   24956:	f7fd fe0d 	bl	22574 <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   2495a:	4628      	mov	r0, r5
   2495c:	f7fd fe0a 	bl	22574 <cJSON_Delete>

	buffer = cJSON_PrintUnformatted(root_obj);
	cJSON_Delete(root_obj);

	if (buffer == NULL) {
		return -ENOMEM;
   24960:	f06f 040b 	mvn.w	r4, #11
   24964:	e011      	b.n	2498a <nrf_cloud_encode_state+0x86>
	switch (reported_state) {
   24966:	2c06      	cmp	r4, #6
   24968:	d013      	beq.n	24992 <nrf_cloud_encode_state+0x8e>
   2496a:	2c07      	cmp	r4, #7
   2496c:	d04c      	beq.n	24a08 <nrf_cloud_encode_state+0x104>
		cJSON_Delete(root_obj);
   2496e:	4638      	mov	r0, r7
   24970:	f7fd fe00 	bl	22574 <cJSON_Delete>
		cJSON_Delete(state_obj);
   24974:	4640      	mov	r0, r8
   24976:	f7fd fdfd 	bl	22574 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   2497a:	4630      	mov	r0, r6
   2497c:	f7fd fdfa 	bl	22574 <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   24980:	4628      	mov	r0, r5
   24982:	f7fd fdf7 	bl	22574 <cJSON_Delete>
		return -ENOTSUP;
   24986:	f06f 0485 	mvn.w	r4, #133	; 0x85

	output->ptr = buffer;
	output->len = strlen(buffer);

	return 0;
}
   2498a:	4620      	mov	r0, r4
   2498c:	b006      	add	sp, #24
   2498e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ret += json_add_str(pairing_obj, "state", DUA_PIN_STR);
   24992:	4a3c      	ldr	r2, [pc, #240]	; (24a84 <nrf_cloud_encode_state+0x180>)
   24994:	493c      	ldr	r1, [pc, #240]	; (24a88 <nrf_cloud_encode_state+0x184>)
   24996:	f01b fec3 	bl	40720 <json_add_str>
		ret += json_add_null(pairing_obj, "topics");
   2499a:	493c      	ldr	r1, [pc, #240]	; (24a8c <nrf_cloud_encode_state+0x188>)
		ret += json_add_str(pairing_obj, "state", DUA_PIN_STR);
   2499c:	4604      	mov	r4, r0
		ret += json_add_null(pairing_obj, "topics");
   2499e:	4628      	mov	r0, r5
   249a0:	f01b fed3 	bl	4074a <json_add_null>
		ret += json_add_null(pairing_obj, "config");
   249a4:	493a      	ldr	r1, [pc, #232]	; (24a90 <nrf_cloud_encode_state+0x18c>)
		ret += json_add_null(pairing_obj, "topics");
   249a6:	4404      	add	r4, r0
		ret += json_add_null(pairing_obj, "config");
   249a8:	4628      	mov	r0, r5
   249aa:	f01b fece 	bl	4074a <json_add_null>
		ret += json_add_null(reported_obj, "stage");
   249ae:	4939      	ldr	r1, [pc, #228]	; (24a94 <nrf_cloud_encode_state+0x190>)
		ret += json_add_null(pairing_obj, "config");
   249b0:	4404      	add	r4, r0
		ret += json_add_null(reported_obj, "stage");
   249b2:	4630      	mov	r0, r6
   249b4:	f01b fec9 	bl	4074a <json_add_null>
		ret += json_add_null(reported_obj,
   249b8:	4937      	ldr	r1, [pc, #220]	; (24a98 <nrf_cloud_encode_state+0x194>)
		ret += json_add_null(reported_obj, "stage");
   249ba:	4404      	add	r4, r0
		ret += json_add_null(reported_obj,
   249bc:	4630      	mov	r0, r6
   249be:	f01b fec4 	bl	4074a <json_add_null>
   249c2:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   249c4:	462a      	mov	r2, r5
   249c6:	4935      	ldr	r1, [pc, #212]	; (24a9c <nrf_cloud_encode_state+0x198>)
   249c8:	4630      	mov	r0, r6
   249ca:	f01b f8e9 	bl	3fba0 <cJSON_AddItemToObject>
   249ce:	4632      	mov	r2, r6
   249d0:	4933      	ldr	r1, [pc, #204]	; (24aa0 <nrf_cloud_encode_state+0x19c>)
   249d2:	4640      	mov	r0, r8
   249d4:	f01b f8e4 	bl	3fba0 <cJSON_AddItemToObject>
   249d8:	4638      	mov	r0, r7
   249da:	4642      	mov	r2, r8
   249dc:	492a      	ldr	r1, [pc, #168]	; (24a88 <nrf_cloud_encode_state+0x184>)
   249de:	f01b f8df 	bl	3fba0 <cJSON_AddItemToObject>
		cJSON_Delete(root_obj);
   249e2:	4638      	mov	r0, r7
	if (ret != 0) {
   249e4:	2c00      	cmp	r4, #0
   249e6:	d1b0      	bne.n	2494a <nrf_cloud_encode_state+0x46>
	buffer = cJSON_PrintUnformatted(root_obj);
   249e8:	f01b f8ca 	bl	3fb80 <cJSON_PrintUnformatted>
   249ec:	4605      	mov	r5, r0
	cJSON_Delete(root_obj);
   249ee:	4638      	mov	r0, r7
   249f0:	f7fd fdc0 	bl	22574 <cJSON_Delete>
	if (buffer == NULL) {
   249f4:	2d00      	cmp	r5, #0
   249f6:	d0b3      	beq.n	24960 <nrf_cloud_encode_state+0x5c>
	output->ptr = buffer;
   249f8:	f8c9 5004 	str.w	r5, [r9, #4]
	output->len = strlen(buffer);
   249fc:	4628      	mov	r0, r5
   249fe:	f7f5 fac1 	bl	19f84 <strlen>
   24a02:	f8c9 0000 	str.w	r0, [r9]
	return 0;
   24a06:	e7c0      	b.n	2498a <nrf_cloud_encode_state+0x86>
		nct_dc_endpoint_get(&tx_endp, &rx_endp, &m_endp);
   24a08:	aa04      	add	r2, sp, #16
   24a0a:	4669      	mov	r1, sp
   24a0c:	a802      	add	r0, sp, #8
   24a0e:	f000 fff3 	bl	259f8 <nct_dc_endpoint_get>
		ret += json_add_str(reported_obj, "nrfcloud_mqtt_topic_prefix",
   24a12:	9a05      	ldr	r2, [sp, #20]
   24a14:	4920      	ldr	r1, [pc, #128]	; (24a98 <nrf_cloud_encode_state+0x194>)
   24a16:	4630      	mov	r0, r6
   24a18:	f01b fe82 	bl	40720 <json_add_str>
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   24a1c:	4a21      	ldr	r2, [pc, #132]	; (24aa4 <nrf_cloud_encode_state+0x1a0>)
		ret += json_add_str(reported_obj, "nrfcloud_mqtt_topic_prefix",
   24a1e:	4604      	mov	r4, r0
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   24a20:	4919      	ldr	r1, [pc, #100]	; (24a88 <nrf_cloud_encode_state+0x184>)
   24a22:	4628      	mov	r0, r5
   24a24:	f01b fe7c 	bl	40720 <json_add_str>
		ret += json_add_null(pairing_obj, "config");
   24a28:	4919      	ldr	r1, [pc, #100]	; (24a90 <nrf_cloud_encode_state+0x18c>)
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   24a2a:	4404      	add	r4, r0
		ret += json_add_null(pairing_obj, "config");
   24a2c:	4628      	mov	r0, r5
   24a2e:	f01b fe8c 	bl	4074a <json_add_null>
		ret += json_add_null(reported_obj, "pairingStatus");
   24a32:	491d      	ldr	r1, [pc, #116]	; (24aa8 <nrf_cloud_encode_state+0x1a4>)
		ret += json_add_null(pairing_obj, "config");
   24a34:	4404      	add	r4, r0
		ret += json_add_null(reported_obj, "pairingStatus");
   24a36:	4630      	mov	r0, r6
   24a38:	f01b fe87 	bl	4074a <json_add_null>
   24a3c:	4404      	add	r4, r0
		cJSON *topics_obj = cJSON_CreateObject();
   24a3e:	f7fd fe5d 	bl	226fc <cJSON_CreateObject>
		if (topics_obj == NULL) {
   24a42:	4682      	mov	sl, r0
   24a44:	2800      	cmp	r0, #0
   24a46:	f43f af7f 	beq.w	24948 <nrf_cloud_encode_state+0x44>
		ret += json_add_str(topics_obj, "d2c", tx_endp.ptr);
   24a4a:	9a03      	ldr	r2, [sp, #12]
   24a4c:	4917      	ldr	r1, [pc, #92]	; (24aac <nrf_cloud_encode_state+0x1a8>)
   24a4e:	f01b fe67 	bl	40720 <json_add_str>
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   24a52:	9a01      	ldr	r2, [sp, #4]
		ret += json_add_str(topics_obj, "d2c", tx_endp.ptr);
   24a54:	4404      	add	r4, r0
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   24a56:	4916      	ldr	r1, [pc, #88]	; (24ab0 <nrf_cloud_encode_state+0x1ac>)
   24a58:	4650      	mov	r0, sl
   24a5a:	f01b fe61 	bl	40720 <json_add_str>
	cJSON_AddItemToObject(parent, str, item);
   24a5e:	4652      	mov	r2, sl
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   24a60:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   24a62:	490a      	ldr	r1, [pc, #40]	; (24a8c <nrf_cloud_encode_state+0x188>)
   24a64:	4628      	mov	r0, r5
   24a66:	f01b f89b 	bl	3fba0 <cJSON_AddItemToObject>
		if (ret != 0) {
   24a6a:	2c00      	cmp	r4, #0
   24a6c:	d0aa      	beq.n	249c4 <nrf_cloud_encode_state+0xc0>
			cJSON_Delete(topics_obj);
   24a6e:	4650      	mov	r0, sl
   24a70:	f7fd fd80 	bl	22574 <cJSON_Delete>
		break;
   24a74:	e7a6      	b.n	249c4 <nrf_cloud_encode_state+0xc0>
   24a76:	bf00      	nop
   24a78:	00044a26 	.word	0x00044a26
   24a7c:	00044643 	.word	0x00044643
   24a80:	00046ae5 	.word	0x00046ae5
   24a84:	00046a7e 	.word	0x00046a7e
   24a88:	00044a4c 	.word	0x00044a4c
   24a8c:	00046b8b 	.word	0x00046b8b
   24a90:	00046b92 	.word	0x00046b92
   24a94:	00046b99 	.word	0x00046b99
   24a98:	00046a41 	.word	0x00046a41
   24a9c:	00046a5c 	.word	0x00046a5c
   24aa0:	00044a43 	.word	0x00044a43
   24aa4:	00046b9f 	.word	0x00046b9f
   24aa8:	00046ba6 	.word	0x00046ba6
   24aac:	00046bb4 	.word	0x00046bb4
   24ab0:	00046bb8 	.word	0x00046bb8

00024ab4 <nrf_cloud_decode_data_endpoint>:
 */
int nrf_cloud_decode_data_endpoint(const struct nrf_cloud_data *input,
				   struct nrf_cloud_data *tx_endpoint,
				   struct nrf_cloud_data *rx_endpoint,
				   struct nrf_cloud_data *m_endpoint)
{
   24ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24ab8:	4689      	mov	r9, r1
   24aba:	4690      	mov	r8, r2
   24abc:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(input != NULL);
   24abe:	4604      	mov	r4, r0
   24ac0:	b958      	cbnz	r0, 24ada <nrf_cloud_decode_data_endpoint+0x26>
   24ac2:	4951      	ldr	r1, [pc, #324]	; (24c08 <nrf_cloud_decode_data_endpoint+0x154>)
   24ac4:	4851      	ldr	r0, [pc, #324]	; (24c0c <nrf_cloud_decode_data_endpoint+0x158>)
   24ac6:	f240 136f 	movw	r3, #367	; 0x16f
   24aca:	4a51      	ldr	r2, [pc, #324]	; (24c10 <nrf_cloud_decode_data_endpoint+0x15c>)
   24acc:	f019 ff2e 	bl	3e92c <printk>
   24ad0:	f240 116f 	movw	r1, #367	; 0x16f
   24ad4:	484e      	ldr	r0, [pc, #312]	; (24c10 <nrf_cloud_decode_data_endpoint+0x15c>)
   24ad6:	f019 ff36 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   24ada:	6863      	ldr	r3, [r4, #4]
   24adc:	b95b      	cbnz	r3, 24af6 <nrf_cloud_decode_data_endpoint+0x42>
   24ade:	494d      	ldr	r1, [pc, #308]	; (24c14 <nrf_cloud_decode_data_endpoint+0x160>)
   24ae0:	484a      	ldr	r0, [pc, #296]	; (24c0c <nrf_cloud_decode_data_endpoint+0x158>)
   24ae2:	f44f 73b8 	mov.w	r3, #368	; 0x170
   24ae6:	4a4a      	ldr	r2, [pc, #296]	; (24c10 <nrf_cloud_decode_data_endpoint+0x15c>)
   24ae8:	f019 ff20 	bl	3e92c <printk>
   24aec:	f44f 71b8 	mov.w	r1, #368	; 0x170
   24af0:	4847      	ldr	r0, [pc, #284]	; (24c10 <nrf_cloud_decode_data_endpoint+0x15c>)
   24af2:	f019 ff28 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   24af6:	6823      	ldr	r3, [r4, #0]
   24af8:	b95b      	cbnz	r3, 24b12 <nrf_cloud_decode_data_endpoint+0x5e>
   24afa:	4947      	ldr	r1, [pc, #284]	; (24c18 <nrf_cloud_decode_data_endpoint+0x164>)
   24afc:	4843      	ldr	r0, [pc, #268]	; (24c0c <nrf_cloud_decode_data_endpoint+0x158>)
   24afe:	f240 1371 	movw	r3, #369	; 0x171
   24b02:	4a43      	ldr	r2, [pc, #268]	; (24c10 <nrf_cloud_decode_data_endpoint+0x15c>)
   24b04:	f019 ff12 	bl	3e92c <printk>
   24b08:	f240 1171 	movw	r1, #369	; 0x171
   24b0c:	4840      	ldr	r0, [pc, #256]	; (24c10 <nrf_cloud_decode_data_endpoint+0x15c>)
   24b0e:	f019 ff1a 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(tx_endpoint != NULL);
   24b12:	f1b9 0f00 	cmp.w	r9, #0
   24b16:	d10b      	bne.n	24b30 <nrf_cloud_decode_data_endpoint+0x7c>
   24b18:	4940      	ldr	r1, [pc, #256]	; (24c1c <nrf_cloud_decode_data_endpoint+0x168>)
   24b1a:	483c      	ldr	r0, [pc, #240]	; (24c0c <nrf_cloud_decode_data_endpoint+0x158>)
   24b1c:	f44f 73b9 	mov.w	r3, #370	; 0x172
   24b20:	4a3b      	ldr	r2, [pc, #236]	; (24c10 <nrf_cloud_decode_data_endpoint+0x15c>)
   24b22:	f019 ff03 	bl	3e92c <printk>
   24b26:	f44f 71b9 	mov.w	r1, #370	; 0x172
   24b2a:	4839      	ldr	r0, [pc, #228]	; (24c10 <nrf_cloud_decode_data_endpoint+0x15c>)
   24b2c:	f019 ff0b 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(rx_endpoint != NULL);
   24b30:	f1b8 0f00 	cmp.w	r8, #0
   24b34:	d10b      	bne.n	24b4e <nrf_cloud_decode_data_endpoint+0x9a>
   24b36:	493a      	ldr	r1, [pc, #232]	; (24c20 <nrf_cloud_decode_data_endpoint+0x16c>)
   24b38:	4834      	ldr	r0, [pc, #208]	; (24c0c <nrf_cloud_decode_data_endpoint+0x158>)
   24b3a:	f240 1373 	movw	r3, #371	; 0x173
   24b3e:	4a34      	ldr	r2, [pc, #208]	; (24c10 <nrf_cloud_decode_data_endpoint+0x15c>)
   24b40:	f019 fef4 	bl	3e92c <printk>
   24b44:	f240 1173 	movw	r1, #371	; 0x173
   24b48:	4831      	ldr	r0, [pc, #196]	; (24c10 <nrf_cloud_decode_data_endpoint+0x15c>)
   24b4a:	f019 fefc 	bl	3e946 <assert_post_action>
	cJSON *root_obj;
	cJSON *m_endpoint_obj = NULL;
	cJSON *state_obj;
	cJSON *parent_obj;

	root_obj = cJSON_Parse(input->ptr);
   24b4e:	6860      	ldr	r0, [r4, #4]
   24b50:	f01b f812 	bl	3fb78 <cJSON_Parse>
	if (root_obj == NULL) {
   24b54:	4605      	mov	r5, r0
   24b56:	b330      	cbz	r0, 24ba6 <nrf_cloud_decode_data_endpoint+0xf2>
		return -ENOENT;
	}

	state_obj = json_object_decode(root_obj, "state");
   24b58:	4932      	ldr	r1, [pc, #200]	; (24c24 <nrf_cloud_decode_data_endpoint+0x170>)
   24b5a:	f01b fdf2 	bl	40742 <json_object_decode>
	if (state_obj == NULL) {
		parent_obj = json_object_decode(root_obj, "desired");
   24b5e:	4932      	ldr	r1, [pc, #200]	; (24c28 <nrf_cloud_decode_data_endpoint+0x174>)
	if (state_obj == NULL) {
   24b60:	b900      	cbnz	r0, 24b64 <nrf_cloud_decode_data_endpoint+0xb0>
		parent_obj = json_object_decode(root_obj, "desired");
   24b62:	4628      	mov	r0, r5
	} else {
		parent_obj = json_object_decode(state_obj, "desired");
   24b64:	f01b fded 	bl	40742 <json_object_decode>
   24b68:	4606      	mov	r6, r0
	}

	if (m_endpoint != NULL) {
   24b6a:	b1ff      	cbz	r7, 24bac <nrf_cloud_decode_data_endpoint+0xf8>
		m_endpoint_obj = json_object_decode(parent_obj,
   24b6c:	492f      	ldr	r1, [pc, #188]	; (24c2c <nrf_cloud_decode_data_endpoint+0x178>)
   24b6e:	f01b fde8 	bl	40742 <json_object_decode>
   24b72:	4604      	mov	r4, r0
						  "nrfcloud_mqtt_topic_prefix");
	}

	cJSON *pairing_obj = json_object_decode(parent_obj, "pairing");
   24b74:	492e      	ldr	r1, [pc, #184]	; (24c30 <nrf_cloud_decode_data_endpoint+0x17c>)
   24b76:	4630      	mov	r0, r6
   24b78:	f01b fde3 	bl	40742 <json_object_decode>
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   24b7c:	4929      	ldr	r1, [pc, #164]	; (24c24 <nrf_cloud_decode_data_endpoint+0x170>)
	cJSON *pairing_obj = json_object_decode(parent_obj, "pairing");
   24b7e:	4606      	mov	r6, r0
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   24b80:	f01b fddf 	bl	40742 <json_object_decode>
	cJSON *topic_obj = json_object_decode(pairing_obj, "topics");
   24b84:	492b      	ldr	r1, [pc, #172]	; (24c34 <nrf_cloud_decode_data_endpoint+0x180>)
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   24b86:	4682      	mov	sl, r0
	cJSON *topic_obj = json_object_decode(pairing_obj, "topics");
   24b88:	4630      	mov	r0, r6
   24b8a:	f01b fdda 	bl	40742 <json_object_decode>
   24b8e:	4606      	mov	r6, r0

	if ((pairing_state_obj == NULL) || (topic_obj == NULL) ||
   24b90:	f1ba 0f00 	cmp.w	sl, #0
   24b94:	d004      	beq.n	24ba0 <nrf_cloud_decode_data_endpoint+0xec>
   24b96:	b118      	cbz	r0, 24ba0 <nrf_cloud_decode_data_endpoint+0xec>
   24b98:	f8da 300c 	ldr.w	r3, [sl, #12]
   24b9c:	2b10      	cmp	r3, #16
   24b9e:	d007      	beq.n	24bb0 <nrf_cloud_decode_data_endpoint+0xfc>
	}

	const char *state_str = pairing_state_obj->valuestring;

	if (!compare(state_str, PAIRED_STR)) {
		cJSON_Delete(root_obj);
   24ba0:	4628      	mov	r0, r5
   24ba2:	f7fd fce7 	bl	22574 <cJSON_Delete>
		return -ENOENT;
   24ba6:	f06f 0401 	mvn.w	r4, #1
   24baa:	e017      	b.n	24bdc <nrf_cloud_decode_data_endpoint+0x128>
	cJSON *m_endpoint_obj = NULL;
   24bac:	463c      	mov	r4, r7
   24bae:	e7e1      	b.n	24b74 <nrf_cloud_decode_data_endpoint+0xc0>
	return !strncmp(s1, s2, strlen(s2));
   24bb0:	4821      	ldr	r0, [pc, #132]	; (24c38 <nrf_cloud_decode_data_endpoint+0x184>)
	const char *state_str = pairing_state_obj->valuestring;
   24bb2:	f8da a010 	ldr.w	sl, [sl, #16]
	return !strncmp(s1, s2, strlen(s2));
   24bb6:	f7f5 f9e5 	bl	19f84 <strlen>
   24bba:	491f      	ldr	r1, [pc, #124]	; (24c38 <nrf_cloud_decode_data_endpoint+0x184>)
   24bbc:	4602      	mov	r2, r0
   24bbe:	4650      	mov	r0, sl
   24bc0:	f01c faab 	bl	4111a <strncmp>
	if (!compare(state_str, PAIRED_STR)) {
   24bc4:	2800      	cmp	r0, #0
   24bc6:	d1eb      	bne.n	24ba0 <nrf_cloud_decode_data_endpoint+0xec>
		return -ENOENT;
	}

	if (m_endpoint_obj != NULL) {
   24bc8:	b15c      	cbz	r4, 24be2 <nrf_cloud_decode_data_endpoint+0x12e>
		err = json_decode_and_alloc(m_endpoint_obj, m_endpoint);
   24bca:	4620      	mov	r0, r4
   24bcc:	4639      	mov	r1, r7
   24bce:	f01b fdcc 	bl	4076a <json_decode_and_alloc>
		if (err) {
   24bd2:	4604      	mov	r4, r0
   24bd4:	b128      	cbz	r0, 24be2 <nrf_cloud_decode_data_endpoint+0x12e>

	cJSON *rx_obj = json_object_decode(topic_obj, "c2d");

	err = json_decode_and_alloc(rx_obj, rx_endpoint);
	if (err) {
		cJSON_Delete(root_obj);
   24bd6:	4628      	mov	r0, r5
		return err;
	}

	cJSON_Delete(root_obj);
   24bd8:	f7fd fccc 	bl	22574 <cJSON_Delete>

	return err;
}
   24bdc:	4620      	mov	r0, r4
   24bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cJSON *tx_obj = json_object_decode(topic_obj, "d2c");
   24be2:	4916      	ldr	r1, [pc, #88]	; (24c3c <nrf_cloud_decode_data_endpoint+0x188>)
   24be4:	4630      	mov	r0, r6
   24be6:	f01b fdac 	bl	40742 <json_object_decode>
	err = json_decode_and_alloc(tx_obj, tx_endpoint);
   24bea:	4649      	mov	r1, r9
   24bec:	f01b fdbd 	bl	4076a <json_decode_and_alloc>
	if (err) {
   24bf0:	4604      	mov	r4, r0
   24bf2:	2800      	cmp	r0, #0
   24bf4:	d1ef      	bne.n	24bd6 <nrf_cloud_decode_data_endpoint+0x122>
	cJSON *rx_obj = json_object_decode(topic_obj, "c2d");
   24bf6:	4912      	ldr	r1, [pc, #72]	; (24c40 <nrf_cloud_decode_data_endpoint+0x18c>)
   24bf8:	4630      	mov	r0, r6
   24bfa:	f01b fda2 	bl	40742 <json_object_decode>
	err = json_decode_and_alloc(rx_obj, rx_endpoint);
   24bfe:	4641      	mov	r1, r8
   24c00:	f01b fdb3 	bl	4076a <json_decode_and_alloc>
	if (err) {
   24c04:	4604      	mov	r4, r0
   24c06:	e7e6      	b.n	24bd6 <nrf_cloud_decode_data_endpoint+0x122>
   24c08:	000469e3 	.word	0x000469e3
   24c0c:	00044643 	.word	0x00044643
   24c10:	00046ae5 	.word	0x00046ae5
   24c14:	000469f8 	.word	0x000469f8
   24c18:	00046a12 	.word	0x00046a12
   24c1c:	0004698e 	.word	0x0004698e
   24c20:	000469a9 	.word	0x000469a9
   24c24:	00044a4c 	.word	0x00044a4c
   24c28:	00046a39 	.word	0x00046a39
   24c2c:	00046a41 	.word	0x00046a41
   24c30:	00046a5c 	.word	0x00046a5c
   24c34:	00046b8b 	.word	0x00046b8b
   24c38:	00046b9f 	.word	0x00046b9f
   24c3c:	00046bb4 	.word	0x00046bb4
   24c40:	00046bb8 	.word	0x00046bb8

00024c44 <state_ua_pin_wait>:

	return err;
}

static int state_ua_pin_wait(void)
{
   24c44:	b510      	push	{r4, lr}
   24c46:	b088      	sub	sp, #32
	int err;
	struct nct_cc_data msg = {
   24c48:	2210      	movs	r2, #16
   24c4a:	2100      	movs	r1, #0
   24c4c:	4668      	mov	r0, sp
   24c4e:	f01c f8a7 	bl	40da0 <memset>
   24c52:	2301      	movs	r3, #1
		.opcode = NCT_CC_OPCODE_UPDATE_REQ,
		.id = DEFAULT_REPORT_ID,
	};

	/* Publish report to the cloud on current status. */
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   24c54:	4669      	mov	r1, sp
   24c56:	2006      	movs	r0, #6
	struct nct_cc_data msg = {
   24c58:	9302      	str	r3, [sp, #8]
   24c5a:	f88d 300c 	strb.w	r3, [sp, #12]
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   24c5e:	f7ff fe51 	bl	24904 <nrf_cloud_encode_state>
	if (err) {
   24c62:	4604      	mov	r4, r0
   24c64:	b188      	cbz	r0, 24c8a <state_ua_pin_wait+0x46>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   24c66:	2301      	movs	r3, #1
   24c68:	f04f 0000 	mov.w	r0, #0
   24c6c:	4a1b      	ldr	r2, [pc, #108]	; (24cdc <state_ua_pin_wait+0x98>)
   24c6e:	f363 0007 	bfi	r0, r3, #0, #8
   24c72:	4b1b      	ldr	r3, [pc, #108]	; (24ce0 <state_ua_pin_wait+0x9c>)
   24c74:	491b      	ldr	r1, [pc, #108]	; (24ce4 <state_ua_pin_wait+0xa0>)
   24c76:	1a9b      	subs	r3, r3, r2
   24c78:	08db      	lsrs	r3, r3, #3
   24c7a:	f363 108f 	bfi	r0, r3, #6, #10
   24c7e:	4622      	mov	r2, r4
   24c80:	f019 fe71 	bl	3e966 <log_string_sync>
	};

	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);

	return 0;
}
   24c84:	4620      	mov	r0, r4
   24c86:	b008      	add	sp, #32
   24c88:	bd10      	pop	{r4, pc}
	err = nct_cc_send(&msg);
   24c8a:	4668      	mov	r0, sp
   24c8c:	f000 fe02 	bl	25894 <nct_cc_send>
	if (err) {
   24c90:	4604      	mov	r4, r0
   24c92:	b190      	cbz	r0, 24cba <state_ua_pin_wait+0x76>
		LOG_ERR("nct_cc_send failed %d", err);
   24c94:	2301      	movs	r3, #1
   24c96:	f04f 0000 	mov.w	r0, #0
   24c9a:	4a10      	ldr	r2, [pc, #64]	; (24cdc <state_ua_pin_wait+0x98>)
   24c9c:	f363 0007 	bfi	r0, r3, #0, #8
   24ca0:	4b0f      	ldr	r3, [pc, #60]	; (24ce0 <state_ua_pin_wait+0x9c>)
   24ca2:	4911      	ldr	r1, [pc, #68]	; (24ce8 <state_ua_pin_wait+0xa4>)
   24ca4:	1a9b      	subs	r3, r3, r2
   24ca6:	08db      	lsrs	r3, r3, #3
   24ca8:	f363 108f 	bfi	r0, r3, #6, #10
   24cac:	4622      	mov	r2, r4
   24cae:	f019 fe5a 	bl	3e966 <log_string_sync>
		nrf_cloud_free((void *)msg.data.ptr);
   24cb2:	9801      	ldr	r0, [sp, #4]
   24cb4:	f01b febd 	bl	40a32 <k_free>
		return err;
   24cb8:	e7e4      	b.n	24c84 <state_ua_pin_wait+0x40>
	nrf_cloud_free((void *)msg.data.ptr);
   24cba:	9801      	ldr	r0, [sp, #4]
   24cbc:	f01b feb9 	bl	40a32 <k_free>
	struct nrf_cloud_evt evt = {
   24cc0:	2210      	movs	r2, #16
   24cc2:	4621      	mov	r1, r4
   24cc4:	eb0d 0002 	add.w	r0, sp, r2
   24cc8:	f01c f86a 	bl	40da0 <memset>
   24ccc:	2302      	movs	r3, #2
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   24cce:	a904      	add	r1, sp, #16
   24cd0:	2006      	movs	r0, #6
	struct nrf_cloud_evt evt = {
   24cd2:	f88d 3010 	strb.w	r3, [sp, #16]
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   24cd6:	f7ff fccd 	bl	24674 <nfsm_set_current_state_and_notify>
	return 0;
   24cda:	e7d3      	b.n	24c84 <state_ua_pin_wait+0x40>
   24cdc:	00042314 	.word	0x00042314
   24ce0:	000423dc 	.word	0x000423dc
   24ce4:	00046cf4 	.word	0x00046cf4
   24ce8:	00046d15 	.word	0x00046d15

00024cec <initiate_cmd_handler>:
	}
	}
}

static int initiate_cmd_handler(const struct nct_evt *nct_evt)
{
   24cec:	b513      	push	{r0, r1, r4, lr}
	int err;
	enum nfsm_state expected_state;
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;

	err = nrf_cloud_decode_requested_state(payload, &expected_state);
   24cee:	6840      	ldr	r0, [r0, #4]
   24cf0:	f10d 0107 	add.w	r1, sp, #7
   24cf4:	f7ff fd40 	bl	24778 <nrf_cloud_decode_requested_state>
	if (err) {
   24cf8:	4604      	mov	r4, r0
   24cfa:	b188      	cbz	r0, 24d20 <initiate_cmd_handler+0x34>
		LOG_ERR("nrf_cloud_decode_requested_state Failed %d", err);
   24cfc:	2301      	movs	r3, #1
   24cfe:	f04f 0000 	mov.w	r0, #0
   24d02:	4a0b      	ldr	r2, [pc, #44]	; (24d30 <initiate_cmd_handler+0x44>)
   24d04:	f363 0007 	bfi	r0, r3, #0, #8
   24d08:	4b0a      	ldr	r3, [pc, #40]	; (24d34 <initiate_cmd_handler+0x48>)
   24d0a:	490b      	ldr	r1, [pc, #44]	; (24d38 <initiate_cmd_handler+0x4c>)
   24d0c:	1a9b      	subs	r3, r3, r2
   24d0e:	08db      	lsrs	r3, r3, #3
   24d10:	f363 108f 	bfi	r0, r3, #6, #10
   24d14:	4622      	mov	r2, r4
   24d16:	f019 fe26 	bl	3e966 <log_string_sync>
		return state_ua_pin_wait();
	}

	/* Any other state is ignored. */
	return 0;
}
   24d1a:	4620      	mov	r0, r4
   24d1c:	b002      	add	sp, #8
   24d1e:	bd10      	pop	{r4, pc}
	if (expected_state == STATE_UA_PIN_WAIT) {
   24d20:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24d24:	2b06      	cmp	r3, #6
   24d26:	d1f8      	bne.n	24d1a <initiate_cmd_handler+0x2e>
		return state_ua_pin_wait();
   24d28:	f7ff ff8c 	bl	24c44 <state_ua_pin_wait>
   24d2c:	4604      	mov	r4, r0
   24d2e:	e7f4      	b.n	24d1a <initiate_cmd_handler+0x2e>
   24d30:	00042314 	.word	0x00042314
   24d34:	000423dc 	.word	0x000423dc
   24d38:	00046bcc 	.word	0x00046bcc

00024d3c <initiate_n_complete_request_handler>:
{
   24d3c:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
   24d3e:	6846      	ldr	r6, [r0, #4]
{
   24d40:	b090      	sub	sp, #64	; 0x40
	err = nrf_cloud_decode_requested_state(payload, &expected_state);
   24d42:	f10d 0107 	add.w	r1, sp, #7
   24d46:	4630      	mov	r0, r6
   24d48:	f7ff fd16 	bl	24778 <nrf_cloud_decode_requested_state>
	if (err) {
   24d4c:	4604      	mov	r4, r0
   24d4e:	b178      	cbz	r0, 24d70 <initiate_n_complete_request_handler+0x34>
		LOG_ERR("nrf_cloud_decode_requested_state failed %d", err);
   24d50:	2301      	movs	r3, #1
   24d52:	f04f 0000 	mov.w	r0, #0
   24d56:	4a3e      	ldr	r2, [pc, #248]	; (24e50 <initiate_n_complete_request_handler+0x114>)
   24d58:	f363 0007 	bfi	r0, r3, #0, #8
   24d5c:	4b3d      	ldr	r3, [pc, #244]	; (24e54 <initiate_n_complete_request_handler+0x118>)
   24d5e:	493e      	ldr	r1, [pc, #248]	; (24e58 <initiate_n_complete_request_handler+0x11c>)
   24d60:	1a9b      	subs	r3, r3, r2
   24d62:	4622      	mov	r2, r4
   24d64:	08db      	lsrs	r3, r3, #3
   24d66:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   24d6a:	f019 fdfc 	bl	3e966 <log_string_sync>
		return err;
   24d6e:	e005      	b.n	24d7c <initiate_n_complete_request_handler+0x40>
	switch (expected_state) {
   24d70:	f89d 5007 	ldrb.w	r5, [sp, #7]
   24d74:	2d06      	cmp	r5, #6
   24d76:	d004      	beq.n	24d82 <initiate_n_complete_request_handler+0x46>
   24d78:	2d07      	cmp	r5, #7
   24d7a:	d006      	beq.n	24d8a <initiate_n_complete_request_handler+0x4e>
}
   24d7c:	4620      	mov	r0, r4
   24d7e:	b010      	add	sp, #64	; 0x40
   24d80:	bd70      	pop	{r4, r5, r6, pc}
		return state_ua_pin_wait();
   24d82:	f7ff ff5f 	bl	24c44 <state_ua_pin_wait>
   24d86:	4604      	mov	r4, r0
   24d88:	e7f8      	b.n	24d7c <initiate_n_complete_request_handler+0x40>
		err = nrf_cloud_decode_data_endpoint(payload, &tx, &rx,
   24d8a:	ab06      	add	r3, sp, #24
   24d8c:	aa02      	add	r2, sp, #8
   24d8e:	a904      	add	r1, sp, #16
   24d90:	4630      	mov	r0, r6
   24d92:	f7ff fe8f 	bl	24ab4 <nrf_cloud_decode_data_endpoint>
		if (err) {
   24d96:	4604      	mov	r4, r0
   24d98:	b168      	cbz	r0, 24db6 <initiate_n_complete_request_handler+0x7a>
			LOG_ERR("nrf_cloud_decode_data_endpoint failed %d",
   24d9a:	2301      	movs	r3, #1
   24d9c:	f04f 0000 	mov.w	r0, #0
   24da0:	4a2b      	ldr	r2, [pc, #172]	; (24e50 <initiate_n_complete_request_handler+0x114>)
   24da2:	f363 0007 	bfi	r0, r3, #0, #8
   24da6:	4b2b      	ldr	r3, [pc, #172]	; (24e54 <initiate_n_complete_request_handler+0x118>)
   24da8:	492c      	ldr	r1, [pc, #176]	; (24e5c <initiate_n_complete_request_handler+0x120>)
   24daa:	1a9b      	subs	r3, r3, r2
   24dac:	08db      	lsrs	r3, r3, #3
   24dae:	f363 108f 	bfi	r0, r3, #6, #10
   24db2:	4622      	mov	r2, r4
   24db4:	e7d9      	b.n	24d6a <initiate_n_complete_request_handler+0x2e>
		nct_dc_endpoint_set(&tx, &rx, &m_endpoint);
   24db6:	aa06      	add	r2, sp, #24
   24db8:	a902      	add	r1, sp, #8
   24dba:	a804      	add	r0, sp, #16
   24dbc:	f000 fde8 	bl	25990 <nct_dc_endpoint_set>
	struct nct_cc_data msg = {
   24dc0:	4621      	mov	r1, r4
   24dc2:	2210      	movs	r2, #16
   24dc4:	a808      	add	r0, sp, #32
   24dc6:	f01b ffeb 	bl	40da0 <memset>
   24dca:	f641 63d2 	movw	r3, #7890	; 0x1ed2
   24dce:	930a      	str	r3, [sp, #40]	; 0x28
   24dd0:	2301      	movs	r3, #1
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   24dd2:	a908      	add	r1, sp, #32
   24dd4:	4628      	mov	r0, r5
	struct nct_cc_data msg = {
   24dd6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   24dda:	f7ff fd93 	bl	24904 <nrf_cloud_encode_state>
	if (err) {
   24dde:	4604      	mov	r4, r0
   24de0:	b168      	cbz	r0, 24dfe <initiate_n_complete_request_handler+0xc2>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   24de2:	2301      	movs	r3, #1
   24de4:	f04f 0000 	mov.w	r0, #0
   24de8:	4a19      	ldr	r2, [pc, #100]	; (24e50 <initiate_n_complete_request_handler+0x114>)
   24dea:	f363 0007 	bfi	r0, r3, #0, #8
   24dee:	4b19      	ldr	r3, [pc, #100]	; (24e54 <initiate_n_complete_request_handler+0x118>)
   24df0:	491b      	ldr	r1, [pc, #108]	; (24e60 <initiate_n_complete_request_handler+0x124>)
   24df2:	1a9b      	subs	r3, r3, r2
   24df4:	08db      	lsrs	r3, r3, #3
   24df6:	f363 108f 	bfi	r0, r3, #6, #10
   24dfa:	4622      	mov	r2, r4
   24dfc:	e7b5      	b.n	24d6a <initiate_n_complete_request_handler+0x2e>
	err = nct_cc_send(&msg);
   24dfe:	a808      	add	r0, sp, #32
   24e00:	f000 fd48 	bl	25894 <nct_cc_send>
	if (err) {
   24e04:	4604      	mov	r4, r0
   24e06:	b190      	cbz	r0, 24e2e <initiate_n_complete_request_handler+0xf2>
		LOG_ERR("nct_cc_send failed %d", err);
   24e08:	2301      	movs	r3, #1
   24e0a:	f04f 0000 	mov.w	r0, #0
   24e0e:	4a10      	ldr	r2, [pc, #64]	; (24e50 <initiate_n_complete_request_handler+0x114>)
   24e10:	f363 0007 	bfi	r0, r3, #0, #8
   24e14:	4b0f      	ldr	r3, [pc, #60]	; (24e54 <initiate_n_complete_request_handler+0x118>)
   24e16:	4913      	ldr	r1, [pc, #76]	; (24e64 <initiate_n_complete_request_handler+0x128>)
   24e18:	1a9b      	subs	r3, r3, r2
   24e1a:	08db      	lsrs	r3, r3, #3
   24e1c:	f363 108f 	bfi	r0, r3, #6, #10
   24e20:	4622      	mov	r2, r4
   24e22:	f019 fda0 	bl	3e966 <log_string_sync>
		nrf_cloud_free((void *)msg.data.ptr);
   24e26:	9809      	ldr	r0, [sp, #36]	; 0x24
   24e28:	f01b fe03 	bl	40a32 <k_free>
		return err;
   24e2c:	e7a6      	b.n	24d7c <initiate_n_complete_request_handler+0x40>
	nrf_cloud_free((void *)msg.data.ptr);
   24e2e:	9809      	ldr	r0, [sp, #36]	; 0x24
   24e30:	f01b fdff 	bl	40a32 <k_free>
	struct nrf_cloud_evt evt = {
   24e34:	4621      	mov	r1, r4
   24e36:	2210      	movs	r2, #16
   24e38:	a80c      	add	r0, sp, #48	; 0x30
   24e3a:	f01b ffb1 	bl	40da0 <memset>
   24e3e:	2303      	movs	r3, #3
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   24e40:	a90c      	add	r1, sp, #48	; 0x30
   24e42:	4628      	mov	r0, r5
	struct nrf_cloud_evt evt = {
   24e44:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   24e48:	f7ff fc14 	bl	24674 <nfsm_set_current_state_and_notify>
		return state_ua_pin_complete();
   24e4c:	e796      	b.n	24d7c <initiate_n_complete_request_handler+0x40>
   24e4e:	bf00      	nop
   24e50:	00042314 	.word	0x00042314
   24e54:	000423dc 	.word	0x000423dc
   24e58:	00046bf7 	.word	0x00046bf7
   24e5c:	00046c22 	.word	0x00046c22
   24e60:	00046cf4 	.word	0x00046cf4
   24e64:	00046d15 	.word	0x00046d15

00024e68 <cc_connection_handler>:
{
   24e68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   24e6a:	4604      	mov	r4, r0
	const struct nrf_cloud_evt evt = {
   24e6c:	2100      	movs	r1, #0
   24e6e:	2210      	movs	r2, #16
   24e70:	4668      	mov	r0, sp
   24e72:	f01b ff95 	bl	40da0 <memset>
   24e76:	23ff      	movs	r3, #255	; 0xff
	if (nct_evt->status != 0) {
   24e78:	6821      	ldr	r1, [r4, #0]
	const struct nrf_cloud_evt evt = {
   24e7a:	f88d 3000 	strb.w	r3, [sp]
	if (nct_evt->status != 0) {
   24e7e:	b139      	cbz	r1, 24e90 <cc_connection_handler+0x28>
		nfsm_set_current_state_and_notify(STATE_ERROR, &evt);
   24e80:	4669      	mov	r1, sp
   24e82:	200c      	movs	r0, #12
   24e84:	f7ff fbf6 	bl	24674 <nfsm_set_current_state_and_notify>
		return 0;
   24e88:	2400      	movs	r4, #0
}
   24e8a:	4620      	mov	r0, r4
   24e8c:	b004      	add	sp, #16
   24e8e:	bd10      	pop	{r4, pc}
	nfsm_set_current_state_and_notify(STATE_CC_CONNECTED, NULL);
   24e90:	2004      	movs	r0, #4
   24e92:	f7ff fbef 	bl	24674 <nfsm_set_current_state_and_notify>
	err = nct_cc_send(&get_request);
   24e96:	4806      	ldr	r0, [pc, #24]	; (24eb0 <cc_connection_handler+0x48>)
   24e98:	f000 fcfc 	bl	25894 <nct_cc_send>
	if (err) {
   24e9c:	4604      	mov	r4, r0
   24e9e:	b120      	cbz	r0, 24eaa <cc_connection_handler+0x42>
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   24ea0:	4669      	mov	r1, sp
   24ea2:	2002      	movs	r0, #2
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   24ea4:	f7ff fbe6 	bl	24674 <nfsm_set_current_state_and_notify>
	return 0;
   24ea8:	e7ef      	b.n	24e8a <cc_connection_handler+0x22>
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   24eaa:	4601      	mov	r1, r0
   24eac:	2005      	movs	r0, #5
   24eae:	e7f9      	b.n	24ea4 <cc_connection_handler+0x3c>
   24eb0:	00042af4 	.word	0x00042af4

00024eb4 <initiate_cmd_in_dc_conn_handler>:

static int initiate_cmd_in_dc_conn_handler(const struct nct_evt *nct_evt)
{
   24eb4:	b513      	push	{r0, r1, r4, lr}
	int err;
	enum nfsm_state expected_state;
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;

	err = nrf_cloud_decode_requested_state(payload, &expected_state);
   24eb6:	6840      	ldr	r0, [r0, #4]
   24eb8:	f10d 0107 	add.w	r1, sp, #7
   24ebc:	f7ff fc5c 	bl	24778 <nrf_cloud_decode_requested_state>
	if (err) {
   24ec0:	4604      	mov	r4, r0
   24ec2:	b188      	cbz	r0, 24ee8 <initiate_cmd_in_dc_conn_handler+0x34>
		LOG_ERR("nrf_cloud_decode_requested_state Failed %d", err);
   24ec4:	2301      	movs	r3, #1
   24ec6:	f04f 0000 	mov.w	r0, #0
   24eca:	4a0c      	ldr	r2, [pc, #48]	; (24efc <initiate_cmd_in_dc_conn_handler+0x48>)
   24ecc:	f363 0007 	bfi	r0, r3, #0, #8
   24ed0:	4b0b      	ldr	r3, [pc, #44]	; (24f00 <initiate_cmd_in_dc_conn_handler+0x4c>)
   24ed2:	490c      	ldr	r1, [pc, #48]	; (24f04 <initiate_cmd_in_dc_conn_handler+0x50>)
   24ed4:	1a9b      	subs	r3, r3, r2
   24ed6:	08db      	lsrs	r3, r3, #3
   24ed8:	f363 108f 	bfi	r0, r3, #6, #10
   24edc:	4622      	mov	r2, r4
   24ede:	f019 fd42 	bl	3e966 <log_string_sync>
		return state_ua_pin_wait();
	}

	/* Any other state is ignored. */
	return 0;
}
   24ee2:	4620      	mov	r0, r4
   24ee4:	b002      	add	sp, #8
   24ee6:	bd10      	pop	{r4, pc}
	if (expected_state == STATE_UA_PIN_WAIT) {
   24ee8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24eec:	2b06      	cmp	r3, #6
   24eee:	d1f8      	bne.n	24ee2 <initiate_cmd_in_dc_conn_handler+0x2e>
		(void) nct_dc_disconnect();
   24ef0:	f000 fde6 	bl	25ac0 <nct_dc_disconnect>
		return state_ua_pin_wait();
   24ef4:	f7ff fea6 	bl	24c44 <state_ua_pin_wait>
   24ef8:	4604      	mov	r4, r0
   24efa:	e7f2      	b.n	24ee2 <initiate_cmd_in_dc_conn_handler+0x2e>
   24efc:	00042314 	.word	0x00042314
   24f00:	000423dc 	.word	0x000423dc
   24f04:	00046bcc 	.word	0x00046bcc

00024f08 <nfsm_handle_incoming_event>:
{
   24f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24f0a:	460d      	mov	r5, r1
	if ((nct_evt == NULL) || (nct_evt->type >= NCT_EVT_TOTAL) ||
   24f0c:	4607      	mov	r7, r0
   24f0e:	b120      	cbz	r0, 24f1a <nfsm_handle_incoming_event+0x12>
   24f10:	7a06      	ldrb	r6, [r0, #8]
   24f12:	2e09      	cmp	r6, #9
   24f14:	d801      	bhi.n	24f1a <nfsm_handle_incoming_event+0x12>
   24f16:	290c      	cmp	r1, #12
   24f18:	d90d      	bls.n	24f36 <nfsm_handle_incoming_event+0x2e>
		__ASSERT_NO_MSG(false);
   24f1a:	2386      	movs	r3, #134	; 0x86
   24f1c:	4a1c      	ldr	r2, [pc, #112]	; (24f90 <nfsm_handle_incoming_event+0x88>)
   24f1e:	491d      	ldr	r1, [pc, #116]	; (24f94 <nfsm_handle_incoming_event+0x8c>)
   24f20:	481d      	ldr	r0, [pc, #116]	; (24f98 <nfsm_handle_incoming_event+0x90>)
   24f22:	f019 fd03 	bl	3e92c <printk>
   24f26:	2186      	movs	r1, #134	; 0x86
   24f28:	4819      	ldr	r0, [pc, #100]	; (24f90 <nfsm_handle_incoming_event+0x88>)
   24f2a:	f019 fd0c 	bl	3e946 <assert_post_action>
		return -EINVAL;
   24f2e:	f06f 0415 	mvn.w	r4, #21
}
   24f32:	4620      	mov	r0, r4
   24f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ( state_event_handlers[state][nct_evt->type] != NULL ) {
   24f36:	4b19      	ldr	r3, [pc, #100]	; (24f9c <nfsm_handle_incoming_event+0x94>)
   24f38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   24f3c:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   24f40:	b1a4      	cbz	r4, 24f6c <nfsm_handle_incoming_event+0x64>
		err = state_event_handlers[state][nct_evt->type](nct_evt);
   24f42:	47a0      	blx	r4
		if (err) {
   24f44:	4604      	mov	r4, r0
   24f46:	2800      	cmp	r0, #0
   24f48:	d0f3      	beq.n	24f32 <nfsm_handle_incoming_event+0x2a>
			LOG_ERR("Handler failed! state: %d, type: %d",
   24f4a:	2301      	movs	r3, #1
   24f4c:	f04f 0000 	mov.w	r0, #0
   24f50:	4a13      	ldr	r2, [pc, #76]	; (24fa0 <nfsm_handle_incoming_event+0x98>)
   24f52:	f363 0007 	bfi	r0, r3, #0, #8
   24f56:	4b13      	ldr	r3, [pc, #76]	; (24fa4 <nfsm_handle_incoming_event+0x9c>)
   24f58:	4913      	ldr	r1, [pc, #76]	; (24fa8 <nfsm_handle_incoming_event+0xa0>)
   24f5a:	1a9b      	subs	r3, r3, r2
   24f5c:	462a      	mov	r2, r5
   24f5e:	08db      	lsrs	r3, r3, #3
   24f60:	f363 108f 	bfi	r0, r3, #6, #10
   24f64:	7a3b      	ldrb	r3, [r7, #8]
	LOG_ERR("Dropping FSM transition %d, current state %d",
   24f66:	f019 fcfe 	bl	3e966 <log_string_sync>
	return 0;
   24f6a:	e7e2      	b.n	24f32 <nfsm_handle_incoming_event+0x2a>
	LOG_ERR("Dropping FSM transition %d, current state %d",
   24f6c:	2301      	movs	r3, #1
   24f6e:	f04f 0500 	mov.w	r5, #0
   24f72:	4a0b      	ldr	r2, [pc, #44]	; (24fa0 <nfsm_handle_incoming_event+0x98>)
   24f74:	f363 0507 	bfi	r5, r3, #0, #8
   24f78:	4b0a      	ldr	r3, [pc, #40]	; (24fa4 <nfsm_handle_incoming_event+0x9c>)
   24f7a:	1a9b      	subs	r3, r3, r2
   24f7c:	08db      	lsrs	r3, r3, #3
   24f7e:	f363 158f 	bfi	r5, r3, #6, #10
   24f82:	f7ff fb71 	bl	24668 <nfsm_get_current_state>
   24f86:	4632      	mov	r2, r6
   24f88:	4603      	mov	r3, r0
   24f8a:	4908      	ldr	r1, [pc, #32]	; (24fac <nfsm_handle_incoming_event+0xa4>)
   24f8c:	4628      	mov	r0, r5
   24f8e:	e7ea      	b.n	24f66 <nfsm_handle_incoming_event+0x5e>
   24f90:	00046c4b 	.word	0x00046c4b
   24f94:	00049224 	.word	0x00049224
   24f98:	00044643 	.word	0x00044643
   24f9c:	00042b54 	.word	0x00042b54
   24fa0:	00042314 	.word	0x00042314
   24fa4:	000423dc 	.word	0x000423dc
   24fa8:	00046ca3 	.word	0x00046ca3
   24fac:	00046cc7 	.word	0x00046cc7

00024fb0 <dc_endpoint_reset>:
};

/* Internal routine to reset data endpoint information. */
static void dc_endpoint_reset(void)
{
	nct.dc_rx_endp.utf8 = NULL;
   24fb0:	2200      	movs	r2, #0
   24fb2:	4b04      	ldr	r3, [pc, #16]	; (24fc4 <dc_endpoint_reset+0x14>)
	nct.dc_rx_endp.size = 0;
   24fb4:	e9c3 222c 	strd	r2, r2, [r3, #176]	; 0xb0

	nct.dc_tx_endp.utf8 = NULL;
	nct.dc_tx_endp.size = 0;
   24fb8:	e9c3 222a 	strd	r2, r2, [r3, #168]	; 0xa8

	nct.dc_m_endp.utf8 = NULL;
	nct.dc_m_endp.size = 0;
   24fbc:	e9c3 222e 	strd	r2, r2, [r3, #184]	; 0xb8
}
   24fc0:	4770      	bx	lr
   24fc2:	bf00      	nop
   24fc4:	20023be0 	.word	0x20023be0

00024fc8 <dc_send>:
	}
	dc_endpoint_reset();
}

static u32_t dc_send(const struct nct_dc_data *dc_data, u8_t qos)
{
   24fc8:	b530      	push	{r4, r5, lr}
   24fca:	460d      	mov	r5, r1
   24fcc:	b087      	sub	sp, #28
	if (dc_data == NULL) {
   24fce:	4604      	mov	r4, r0
   24fd0:	b368      	cbz	r0, 2502e <dc_send+0x66>
		return -EINVAL;
	}

	struct mqtt_publish_param publish = {
   24fd2:	2210      	movs	r2, #16
   24fd4:	2100      	movs	r1, #0
   24fd6:	a802      	add	r0, sp, #8
   24fd8:	f01b fee2 	bl	40da0 <memset>
		.message.topic.qos = qos,
		.message.topic.topic.size = nct.dc_tx_endp.size,
		.message.topic.topic.utf8 = nct.dc_tx_endp.utf8,
   24fdc:	4b15      	ldr	r3, [pc, #84]	; (25034 <dc_send+0x6c>)
	struct mqtt_publish_param publish = {
   24fde:	f88d 5008 	strb.w	r5, [sp, #8]
   24fe2:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
   24fe6:	9200      	str	r2, [sp, #0]
   24fe8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
   24fec:	9201      	str	r2, [sp, #4]
	};

	/* Populate payload. */
	if ((dc_data->data.len != 0) && (dc_data->data.ptr != NULL)) {
   24fee:	6822      	ldr	r2, [r4, #0]
   24ff0:	b11a      	cbz	r2, 24ffa <dc_send+0x32>
   24ff2:	6861      	ldr	r1, [r4, #4]
   24ff4:	b109      	cbz	r1, 24ffa <dc_send+0x32>
		publish.message.payload.data = (u8_t *)dc_data->data.ptr;
		publish.message.payload.len = dc_data->data.len;
   24ff6:	e9cd 1203 	strd	r1, r2, [sp, #12]
	}

	if (dc_data->id != 0) {
   24ffa:	68a2      	ldr	r2, [r4, #8]
   24ffc:	b13a      	cbz	r2, 2500e <dc_send+0x46>
		publish.message_id = dc_data->id;
   24ffe:	f8ad 2014 	strh.w	r2, [sp, #20]
	} else {
		publish.message_id = dc_get_next_message_id();
	}

	return mqtt_publish(&nct.client, &publish);
   25002:	4669      	mov	r1, sp
   25004:	480c      	ldr	r0, [pc, #48]	; (25038 <dc_send+0x70>)
   25006:	f01a fa21 	bl	3f44c <mqtt_publish>
}
   2500a:	b007      	add	sp, #28
   2500c:	bd30      	pop	{r4, r5, pc}
	nct.message_id++;
   2500e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   25012:	1c51      	adds	r1, r2, #1
	if ((u16_t)nct.message_id == 0) {
   25014:	b288      	uxth	r0, r1
   25016:	b130      	cbz	r0, 25026 <dc_send+0x5e>
	nct.message_id++;
   25018:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		publish.message_id = dc_get_next_message_id();
   2501c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   25020:	f8ad 3014 	strh.w	r3, [sp, #20]
   25024:	e7ed      	b.n	25002 <dc_send+0x3a>
		nct.message_id++;
   25026:	3202      	adds	r2, #2
   25028:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
   2502c:	e7f6      	b.n	2501c <dc_send+0x54>
		return -EINVAL;
   2502e:	f06f 0015 	mvn.w	r0, #21
   25032:	e7ea      	b.n	2500a <dc_send+0x42>
   25034:	20023be0 	.word	0x20023be0
   25038:	20023bf8 	.word	0x20023bf8

0002503c <dc_endpoint_free>:
{
   2503c:	b510      	push	{r4, lr}
	if (nct.dc_rx_endp.utf8 != NULL) {
   2503e:	4c0a      	ldr	r4, [pc, #40]	; (25068 <dc_endpoint_free+0x2c>)
   25040:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   25044:	b108      	cbz	r0, 2504a <dc_endpoint_free+0xe>
		nrf_cloud_free(nct.dc_rx_endp.utf8);
   25046:	f01b fcf4 	bl	40a32 <k_free>
	if (nct.dc_tx_endp.utf8 != NULL) {
   2504a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   2504e:	b108      	cbz	r0, 25054 <dc_endpoint_free+0x18>
		nrf_cloud_free(nct.dc_tx_endp.utf8);
   25050:	f01b fcef 	bl	40a32 <k_free>
	if (nct.dc_m_endp.utf8 != NULL) {
   25054:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   25058:	b108      	cbz	r0, 2505e <dc_endpoint_free+0x22>
		nrf_cloud_free(nct.dc_m_endp.utf8);
   2505a:	f01b fcea 	bl	40a32 <k_free>
}
   2505e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dc_endpoint_reset();
   25062:	f7ff bfa5 	b.w	24fb0 <dc_endpoint_reset>
   25066:	bf00      	nop
   25068:	20023be0 	.word	0x20023be0

0002506c <aws_fota_cb_handler>:
}

#if defined(CONFIG_AWS_FOTA)
/* Handle AWS FOTA events */
static void aws_fota_cb_handler(enum aws_fota_evt_id evt)
{
   2506c:	b508      	push	{r3, lr}
	switch (evt) {
   2506e:	b110      	cbz	r0, 25076 <aws_fota_cb_handler+0xa>
   25070:	2801      	cmp	r0, #1
   25072:	d013      	beq.n	2509c <aws_fota_cb_handler+0x30>

	case AWS_FOTA_EVT_ERROR:
		LOG_ERR("AWS_FOTA_EVT_ERROR");
		break;
	}
}
   25074:	bd08      	pop	{r3, pc}
		LOG_DBG("AWS_FOTA_EVT_DONE, rebooting to apply update.");
   25076:	2304      	movs	r3, #4
   25078:	f04f 0000 	mov.w	r0, #0
   2507c:	4a0f      	ldr	r2, [pc, #60]	; (250bc <aws_fota_cb_handler+0x50>)
   2507e:	f363 0007 	bfi	r0, r3, #0, #8
   25082:	4b0f      	ldr	r3, [pc, #60]	; (250c0 <aws_fota_cb_handler+0x54>)
   25084:	490f      	ldr	r1, [pc, #60]	; (250c4 <aws_fota_cb_handler+0x58>)
   25086:	1a9b      	subs	r3, r3, r2
   25088:	08db      	lsrs	r3, r3, #3
   2508a:	f363 108f 	bfi	r0, r3, #6, #10
   2508e:	4a0e      	ldr	r2, [pc, #56]	; (250c8 <aws_fota_cb_handler+0x5c>)
   25090:	f019 fc69 	bl	3e966 <log_string_sync>
}
   25094:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		nct_apply_update();
   25098:	f7ff bb66 	b.w	24768 <nct_apply_update>
		LOG_ERR("AWS_FOTA_EVT_ERROR");
   2509c:	2301      	movs	r3, #1
   2509e:	f04f 0000 	mov.w	r0, #0
   250a2:	4a06      	ldr	r2, [pc, #24]	; (250bc <aws_fota_cb_handler+0x50>)
   250a4:	f363 0007 	bfi	r0, r3, #0, #8
   250a8:	4b05      	ldr	r3, [pc, #20]	; (250c0 <aws_fota_cb_handler+0x54>)
   250aa:	4908      	ldr	r1, [pc, #32]	; (250cc <aws_fota_cb_handler+0x60>)
   250ac:	1a9b      	subs	r3, r3, r2
   250ae:	08db      	lsrs	r3, r3, #3
   250b0:	f363 108f 	bfi	r0, r3, #6, #10
}
   250b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("AWS_FOTA_EVT_ERROR");
   250b8:	f019 bc55 	b.w	3e966 <log_string_sync>
   250bc:	00042314 	.word	0x00042314
   250c0:	000423e4 	.word	0x000423e4
   250c4:	00046e07 	.word	0x00046e07
   250c8:	00046d5f 	.word	0x00046d5f
   250cc:	00046e39 	.word	0x00046e39

000250d0 <nct_mqtt_evt_handler>:
/* Handle MQTT events. */
static void nct_mqtt_evt_handler(struct mqtt_client *const mqtt_client,
				 const struct mqtt_evt *_mqtt_evt)
{
	int err;
	struct nct_evt evt = {
   250d0:	2300      	movs	r3, #0
{
   250d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   250d4:	b08f      	sub	sp, #60	; 0x3c
	struct nct_evt evt = {
   250d6:	e9cd 3305 	strd	r3, r3, [sp, #20]
   250da:	69cb      	ldr	r3, [r1, #28]
{
   250dc:	4607      	mov	r7, r0
   250de:	460c      	mov	r4, r1
	struct nct_evt evt = {
   250e0:	9304      	str	r3, [sp, #16]
	struct nct_cc_data cc;
	struct nct_dc_data dc;
	bool event_notify = false;

#if defined(CONFIG_AWS_FOTA)
	err = aws_fota_mqtt_evt_handler(mqtt_client, _mqtt_evt);
   250e2:	f001 ff4d 	bl	26f80 <aws_fota_mqtt_evt_handler>
	if (err > 0) {
   250e6:	1e02      	subs	r2, r0, #0
   250e8:	dc74      	bgt.n	251d4 <nct_mqtt_evt_handler+0x104>
		/* Event handled by FOTA library so we can skip it */
		return;
	} else if (err < 0) {
   250ea:	d028      	beq.n	2513e <nct_mqtt_evt_handler+0x6e>
		LOG_ERR("aws_fota_mqtt_evt_handler: Failed! %d", err);
   250ec:	2301      	movs	r3, #1
   250ee:	f04f 0000 	mov.w	r0, #0
   250f2:	4d91      	ldr	r5, [pc, #580]	; (25338 <nct_mqtt_evt_handler+0x268>)
   250f4:	f363 0007 	bfi	r0, r3, #0, #8
   250f8:	4b90      	ldr	r3, [pc, #576]	; (2533c <nct_mqtt_evt_handler+0x26c>)
   250fa:	4991      	ldr	r1, [pc, #580]	; (25340 <nct_mqtt_evt_handler+0x270>)
   250fc:	1aed      	subs	r5, r5, r3
   250fe:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   25102:	f365 108f 	bfi	r0, r5, #6, #10
   25106:	f019 fc2e 	bl	3e966 <log_string_sync>
		LOG_DBG("Disconnecting MQTT client...");
   2510a:	2304      	movs	r3, #4
   2510c:	f04f 0000 	mov.w	r0, #0
   25110:	f363 0007 	bfi	r0, r3, #0, #8
   25114:	4a8b      	ldr	r2, [pc, #556]	; (25344 <nct_mqtt_evt_handler+0x274>)
   25116:	f365 108f 	bfi	r0, r5, #6, #10
   2511a:	498b      	ldr	r1, [pc, #556]	; (25348 <nct_mqtt_evt_handler+0x278>)
   2511c:	f019 fc23 	bl	3e966 <log_string_sync>

		err = mqtt_disconnect(mqtt_client);
   25120:	4638      	mov	r0, r7
   25122:	f01a f9e8 	bl	3f4f6 <mqtt_disconnect>
		if (err) {
   25126:	4602      	mov	r2, r0
   25128:	b148      	cbz	r0, 2513e <nct_mqtt_evt_handler+0x6e>
			LOG_ERR("Could not disconnect: %d", err);
   2512a:	2101      	movs	r1, #1
   2512c:	f04f 0000 	mov.w	r0, #0
   25130:	f361 0007 	bfi	r0, r1, #0, #8
   25134:	f365 108f 	bfi	r0, r5, #6, #10
   25138:	4984      	ldr	r1, [pc, #528]	; (2534c <nct_mqtt_evt_handler+0x27c>)
   2513a:	f019 fc14 	bl	3e966 <log_string_sync>
		}
	}
#endif /* defined(CONFIG_AWS_FOTA) */

	switch (_mqtt_evt->type) {
   2513e:	7823      	ldrb	r3, [r4, #0]
   25140:	2b08      	cmp	r3, #8
   25142:	d847      	bhi.n	251d4 <nct_mqtt_evt_handler+0x104>
   25144:	e8df f013 	tbh	[pc, r3, lsl #1]
   25148:	00de0009 	.word	0x00de0009
   2514c:	00c6001c 	.word	0x00c6001c
   25150:	00460046 	.word	0x00460046
   25154:	00970046 	.word	0x00970046
   25158:	00b0      	.short	0x00b0
	case MQTT_EVT_CONNACK: {
		LOG_DBG("MQTT_EVT_CONNACK");
   2515a:	2304      	movs	r3, #4
   2515c:	f04f 0000 	mov.w	r0, #0
   25160:	4a76      	ldr	r2, [pc, #472]	; (2533c <nct_mqtt_evt_handler+0x26c>)
   25162:	f363 0007 	bfi	r0, r3, #0, #8
   25166:	4b74      	ldr	r3, [pc, #464]	; (25338 <nct_mqtt_evt_handler+0x268>)
   25168:	4979      	ldr	r1, [pc, #484]	; (25350 <nct_mqtt_evt_handler+0x280>)
   2516a:	1a9b      	subs	r3, r3, r2
   2516c:	08db      	lsrs	r3, r3, #3
   2516e:	f363 108f 	bfi	r0, r3, #6, #10
   25172:	4a74      	ldr	r2, [pc, #464]	; (25344 <nct_mqtt_evt_handler+0x274>)
   25174:	f019 fbf7 	bl	3e966 <log_string_sync>

		evt.type = NCT_EVT_CONNECTED;
   25178:	2300      	movs	r3, #0
		break;
	}
	case MQTT_EVT_DISCONNECT: {
		LOG_DBG("MQTT_EVT_DISCONNECT: result=%d", _mqtt_evt->result);

		evt.type = NCT_EVT_DISCONNECTED;
   2517a:	f88d 3018 	strb.w	r3, [sp, #24]
	}
	default:
		break;
	}

	if (event_notify) {
   2517e:	e055      	b.n	2522c <nct_mqtt_evt_handler+0x15c>
		LOG_DBG("MQTT_EVT_PUBLISH: id=%d len=%d ",
   25180:	2304      	movs	r3, #4
   25182:	f04f 0000 	mov.w	r0, #0
   25186:	4a6d      	ldr	r2, [pc, #436]	; (2533c <nct_mqtt_evt_handler+0x26c>)
   25188:	f363 0007 	bfi	r0, r3, #0, #8
   2518c:	4b6a      	ldr	r3, [pc, #424]	; (25338 <nct_mqtt_evt_handler+0x268>)
   2518e:	4971      	ldr	r1, [pc, #452]	; (25354 <nct_mqtt_evt_handler+0x284>)
   25190:	1a9b      	subs	r3, r3, r2
   25192:	f3c3 05c9 	ubfx	r5, r3, #3, #10
   25196:	6963      	ldr	r3, [r4, #20]
   25198:	4a6a      	ldr	r2, [pc, #424]	; (25344 <nct_mqtt_evt_handler+0x274>)
   2519a:	9300      	str	r3, [sp, #0]
   2519c:	f365 108f 	bfi	r0, r5, #6, #10
   251a0:	8b23      	ldrh	r3, [r4, #24]
   251a2:	f019 fbe0 	bl	3e966 <log_string_sync>
		int err = publish_get_payload(mqtt_client,
   251a6:	6962      	ldr	r2, [r4, #20]
	if (length > sizeof(nct.payload_buf)) {
   251a8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   251ac:	d814      	bhi.n	251d8 <nct_mqtt_evt_handler+0x108>
	return mqtt_readall_publish_payload(client, nct.payload_buf, length);
   251ae:	496a      	ldr	r1, [pc, #424]	; (25358 <nct_mqtt_evt_handler+0x288>)
   251b0:	4638      	mov	r0, r7
   251b2:	f01a fa8c 	bl	3f6ce <mqtt_readall_publish_payload>
		if (err < 0) {
   251b6:	1e02      	subs	r2, r0, #0
   251b8:	da11      	bge.n	251de <nct_mqtt_evt_handler+0x10e>
			LOG_ERR("publish_get_payload: failed %d", err);
   251ba:	2301      	movs	r3, #1
   251bc:	f04f 0000 	mov.w	r0, #0
   251c0:	f363 0007 	bfi	r0, r3, #0, #8
   251c4:	f365 108f 	bfi	r0, r5, #6, #10
   251c8:	4964      	ldr	r1, [pc, #400]	; (2535c <nct_mqtt_evt_handler+0x28c>)
   251ca:	f019 fbcc 	bl	3e966 <log_string_sync>
			mqtt_disconnect(mqtt_client);
   251ce:	4638      	mov	r0, r7
   251d0:	f01a f991 	bl	3f4f6 <mqtt_disconnect>

		if (err != 0) {
			LOG_ERR("nct_input: failed %d", err);
		}
	}
}
   251d4:	b00f      	add	sp, #60	; 0x3c
   251d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   251d8:	f06f 0279 	mvn.w	r2, #121	; 0x79
   251dc:	e7ed      	b.n	251ba <nct_mqtt_evt_handler+0xea>
	for (u32_t index = 0; index < list_size; index++) {
   251de:	2500      	movs	r5, #0
   251e0:	4e5f      	ldr	r6, [pc, #380]	; (25360 <nct_mqtt_evt_handler+0x290>)
	return (strncmp(s1, s2, MIN(s1_len, s2_len))) ? false : true;
   251e2:	68a2      	ldr	r2, [r4, #8]
   251e4:	6873      	ldr	r3, [r6, #4]
   251e6:	6831      	ldr	r1, [r6, #0]
   251e8:	429a      	cmp	r2, r3
   251ea:	bf28      	it	cs
   251ec:	461a      	movcs	r2, r3
   251ee:	6860      	ldr	r0, [r4, #4]
   251f0:	f01b ff93 	bl	4111a <strncmp>
		if (strings_compare(
   251f4:	2800      	cmp	r0, #0
   251f6:	d12e      	bne.n	25256 <nct_mqtt_evt_handler+0x186>
			*opcode = nct_cc_rx_opcode_map[index];
   251f8:	4b5a      	ldr	r3, [pc, #360]	; (25364 <nct_mqtt_evt_handler+0x294>)
   251fa:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   251fe:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
			cc.id = p->message_id;
   25202:	8b23      	ldrh	r3, [r4, #24]
   25204:	930c      	str	r3, [sp, #48]	; 0x30
			cc.data.ptr = nct.payload_buf;
   25206:	4b54      	ldr	r3, [pc, #336]	; (25358 <nct_mqtt_evt_handler+0x288>)
   25208:	930b      	str	r3, [sp, #44]	; 0x2c
			cc.data.len = p->message.payload.len;
   2520a:	6963      	ldr	r3, [r4, #20]
   2520c:	930a      	str	r3, [sp, #40]	; 0x28
			evt.type = NCT_EVT_CC_RX_DATA;
   2520e:	2303      	movs	r3, #3
   25210:	f88d 3018 	strb.w	r3, [sp, #24]
			evt.param.cc = &cc;
   25214:	ab0a      	add	r3, sp, #40	; 0x28
			evt.param.dc = &dc;
   25216:	9305      	str	r3, [sp, #20]
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   25218:	7b23      	ldrb	r3, [r4, #12]
   2521a:	2b01      	cmp	r3, #1
   2521c:	d106      	bne.n	2522c <nct_mqtt_evt_handler+0x15c>
			const struct mqtt_puback_param ack = {
   2521e:	8b23      	ldrh	r3, [r4, #24]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   25220:	a903      	add	r1, sp, #12
   25222:	4638      	mov	r0, r7
			const struct mqtt_puback_param ack = {
   25224:	f8ad 300c 	strh.w	r3, [sp, #12]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   25228:	f01a f93e 	bl	3f4a8 <mqtt_publish_qos1_ack>
		err = nct_input(&evt);
   2522c:	a804      	add	r0, sp, #16
   2522e:	f7ff fa95 	bl	2475c <nct_input>
		if (err != 0) {
   25232:	4602      	mov	r2, r0
   25234:	2800      	cmp	r0, #0
   25236:	d0cd      	beq.n	251d4 <nct_mqtt_evt_handler+0x104>
			LOG_ERR("nct_input: failed %d", err);
   25238:	2301      	movs	r3, #1
   2523a:	f04f 0000 	mov.w	r0, #0
   2523e:	493f      	ldr	r1, [pc, #252]	; (2533c <nct_mqtt_evt_handler+0x26c>)
   25240:	f363 0007 	bfi	r0, r3, #0, #8
   25244:	4b3c      	ldr	r3, [pc, #240]	; (25338 <nct_mqtt_evt_handler+0x268>)
   25246:	1a5b      	subs	r3, r3, r1
   25248:	08db      	lsrs	r3, r3, #3
   2524a:	f363 108f 	bfi	r0, r3, #6, #10
   2524e:	4946      	ldr	r1, [pc, #280]	; (25368 <nct_mqtt_evt_handler+0x298>)
   25250:	f019 fb89 	bl	3e966 <log_string_sync>
   25254:	e7be      	b.n	251d4 <nct_mqtt_evt_handler+0x104>
	for (u32_t index = 0; index < list_size; index++) {
   25256:	3501      	adds	r5, #1
   25258:	2d03      	cmp	r5, #3
   2525a:	f106 060c 	add.w	r6, r6, #12
   2525e:	d1c0      	bne.n	251e2 <nct_mqtt_evt_handler+0x112>
			dc.id = p->message_id;
   25260:	8b23      	ldrh	r3, [r4, #24]
   25262:	9309      	str	r3, [sp, #36]	; 0x24
			dc.data.ptr = p->message.payload.data;
   25264:	6923      	ldr	r3, [r4, #16]
   25266:	9308      	str	r3, [sp, #32]
			dc.data.len = p->message.payload.len;
   25268:	6963      	ldr	r3, [r4, #20]
   2526a:	9307      	str	r3, [sp, #28]
			evt.type = NCT_EVT_DC_RX_DATA;
   2526c:	2305      	movs	r3, #5
   2526e:	f88d 3018 	strb.w	r3, [sp, #24]
			evt.param.dc = &dc;
   25272:	ab07      	add	r3, sp, #28
   25274:	e7cf      	b.n	25216 <nct_mqtt_evt_handler+0x146>
		LOG_DBG("MQTT_EVT_SUBACK: id=%d result=%d",
   25276:	2304      	movs	r3, #4
   25278:	f04f 0000 	mov.w	r0, #0
   2527c:	4a2f      	ldr	r2, [pc, #188]	; (2533c <nct_mqtt_evt_handler+0x26c>)
   2527e:	f363 0007 	bfi	r0, r3, #0, #8
   25282:	4b2d      	ldr	r3, [pc, #180]	; (25338 <nct_mqtt_evt_handler+0x268>)
   25284:	4939      	ldr	r1, [pc, #228]	; (2536c <nct_mqtt_evt_handler+0x29c>)
   25286:	1a9b      	subs	r3, r3, r2
   25288:	08db      	lsrs	r3, r3, #3
   2528a:	f363 108f 	bfi	r0, r3, #6, #10
   2528e:	69e3      	ldr	r3, [r4, #28]
   25290:	4a2c      	ldr	r2, [pc, #176]	; (25344 <nct_mqtt_evt_handler+0x274>)
   25292:	9300      	str	r3, [sp, #0]
   25294:	88a3      	ldrh	r3, [r4, #4]
   25296:	f019 fb66 	bl	3e966 <log_string_sync>
		if (_mqtt_evt->param.suback.message_id == NCT_CC_SUBSCRIBE_ID) {
   2529a:	f240 42d2 	movw	r2, #1234	; 0x4d2
   2529e:	88a3      	ldrh	r3, [r4, #4]
   252a0:	4293      	cmp	r3, r2
   252a2:	d141      	bne.n	25328 <nct_mqtt_evt_handler+0x258>
			evt.type = NCT_EVT_CC_CONNECTED;
   252a4:	2301      	movs	r3, #1
   252a6:	e768      	b.n	2517a <nct_mqtt_evt_handler+0xaa>
		LOG_DBG("MQTT_EVT_UNSUBACK");
   252a8:	2304      	movs	r3, #4
   252aa:	f04f 0000 	mov.w	r0, #0
   252ae:	4a23      	ldr	r2, [pc, #140]	; (2533c <nct_mqtt_evt_handler+0x26c>)
   252b0:	f363 0007 	bfi	r0, r3, #0, #8
   252b4:	4b20      	ldr	r3, [pc, #128]	; (25338 <nct_mqtt_evt_handler+0x268>)
   252b6:	492e      	ldr	r1, [pc, #184]	; (25370 <nct_mqtt_evt_handler+0x2a0>)
   252b8:	1a9b      	subs	r3, r3, r2
   252ba:	08db      	lsrs	r3, r3, #3
   252bc:	f363 108f 	bfi	r0, r3, #6, #10
   252c0:	4a20      	ldr	r2, [pc, #128]	; (25344 <nct_mqtt_evt_handler+0x274>)
   252c2:	f019 fb50 	bl	3e966 <log_string_sync>
		if (_mqtt_evt->param.suback.message_id == NCT_CC_SUBSCRIBE_ID) {
   252c6:	f240 43d2 	movw	r3, #1234	; 0x4d2
   252ca:	88a2      	ldrh	r2, [r4, #4]
   252cc:	429a      	cmp	r2, r3
   252ce:	d181      	bne.n	251d4 <nct_mqtt_evt_handler+0x104>
			evt.type = NCT_EVT_CC_DISCONNECTED;
   252d0:	2307      	movs	r3, #7
   252d2:	e752      	b.n	2517a <nct_mqtt_evt_handler+0xaa>
		LOG_DBG("MQTT_EVT_PUBACK: id=%d result=%d",
   252d4:	2304      	movs	r3, #4
   252d6:	f04f 0000 	mov.w	r0, #0
   252da:	4a18      	ldr	r2, [pc, #96]	; (2533c <nct_mqtt_evt_handler+0x26c>)
   252dc:	f363 0007 	bfi	r0, r3, #0, #8
   252e0:	4b15      	ldr	r3, [pc, #84]	; (25338 <nct_mqtt_evt_handler+0x268>)
   252e2:	4924      	ldr	r1, [pc, #144]	; (25374 <nct_mqtt_evt_handler+0x2a4>)
   252e4:	1a9b      	subs	r3, r3, r2
   252e6:	08db      	lsrs	r3, r3, #3
   252e8:	f363 108f 	bfi	r0, r3, #6, #10
   252ec:	69e3      	ldr	r3, [r4, #28]
   252ee:	4a15      	ldr	r2, [pc, #84]	; (25344 <nct_mqtt_evt_handler+0x274>)
   252f0:	9300      	str	r3, [sp, #0]
   252f2:	88a3      	ldrh	r3, [r4, #4]
   252f4:	f019 fb37 	bl	3e966 <log_string_sync>
		evt.type = NCT_EVT_CC_TX_DATA_ACK;
   252f8:	2304      	movs	r3, #4
   252fa:	f88d 3018 	strb.w	r3, [sp, #24]
		evt.param.data_id = _mqtt_evt->param.puback.message_id;
   252fe:	88a3      	ldrh	r3, [r4, #4]
   25300:	9305      	str	r3, [sp, #20]
	if (event_notify) {
   25302:	e793      	b.n	2522c <nct_mqtt_evt_handler+0x15c>
		LOG_DBG("MQTT_EVT_DISCONNECT: result=%d", _mqtt_evt->result);
   25304:	2304      	movs	r3, #4
   25306:	f04f 0000 	mov.w	r0, #0
   2530a:	4a0c      	ldr	r2, [pc, #48]	; (2533c <nct_mqtt_evt_handler+0x26c>)
   2530c:	f363 0007 	bfi	r0, r3, #0, #8
   25310:	4b09      	ldr	r3, [pc, #36]	; (25338 <nct_mqtt_evt_handler+0x268>)
   25312:	4919      	ldr	r1, [pc, #100]	; (25378 <nct_mqtt_evt_handler+0x2a8>)
   25314:	1a9b      	subs	r3, r3, r2
   25316:	08db      	lsrs	r3, r3, #3
   25318:	f363 108f 	bfi	r0, r3, #6, #10
   2531c:	4a09      	ldr	r2, [pc, #36]	; (25344 <nct_mqtt_evt_handler+0x274>)
   2531e:	69e3      	ldr	r3, [r4, #28]
   25320:	f019 fb21 	bl	3e966 <log_string_sync>
		evt.type = NCT_EVT_DISCONNECTED;
   25324:	2309      	movs	r3, #9
   25326:	e728      	b.n	2517a <nct_mqtt_evt_handler+0xaa>
		if (_mqtt_evt->param.suback.message_id == NCT_DC_SUBSCRIBE_ID) {
   25328:	f242 223d 	movw	r2, #8765	; 0x223d
   2532c:	4293      	cmp	r3, r2
   2532e:	f47f af51 	bne.w	251d4 <nct_mqtt_evt_handler+0x104>
			evt.type = NCT_EVT_DC_CONNECTED;
   25332:	2302      	movs	r3, #2
   25334:	e721      	b.n	2517a <nct_mqtt_evt_handler+0xaa>
   25336:	bf00      	nop
   25338:	000423e4 	.word	0x000423e4
   2533c:	00042314 	.word	0x00042314
   25340:	000471e1 	.word	0x000471e1
   25344:	00046d73 	.word	0x00046d73
   25348:	00047207 	.word	0x00047207
   2534c:	00047228 	.word	0x00047228
   25350:	00047241 	.word	0x00047241
   25354:	00047256 	.word	0x00047256
   25358:	20023ea4 	.word	0x20023ea4
   2535c:	0004727a 	.word	0x0004727a
   25360:	00042bb0 	.word	0x00042bb0
   25364:	00042bd4 	.word	0x00042bd4
   25368:	0004731c 	.word	0x0004731c
   2536c:	00047299 	.word	0x00047299
   25370:	000472be 	.word	0x000472be
   25374:	000472d4 	.word	0x000472d4
   25378:	000472f9 	.word	0x000472f9

0002537c <nct_mqtt_connect>:
{
   2537c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	mqtt_client_init(&nct.client);
   2537e:	4c25      	ldr	r4, [pc, #148]	; (25414 <nct_mqtt_connect+0x98>)
   25380:	f104 0018 	add.w	r0, r4, #24
   25384:	f01a f80b 	bl	3f39e <mqtt_client_init>
	nct.client.evt_cb = nct_mqtt_evt_handler;
   25388:	4b23      	ldr	r3, [pc, #140]	; (25418 <nct_mqtt_connect+0x9c>)
	nct.client.client_id.utf8 = (u8_t *)client_id_buf;
   2538a:	4824      	ldr	r0, [pc, #144]	; (2541c <nct_mqtt_connect+0xa0>)
	nct.client.broker = (struct sockaddr *)&nct.broker;
   2538c:	f104 0790 	add.w	r7, r4, #144	; 0x90
	nct.client.evt_cb = nct_mqtt_evt_handler;
   25390:	67a3      	str	r3, [r4, #120]	; 0x78
	nct.client.broker = (struct sockaddr *)&nct.broker;
   25392:	6667      	str	r7, [r4, #100]	; 0x64
	nct.client.client_id.utf8 = (u8_t *)client_id_buf;
   25394:	65e0      	str	r0, [r4, #92]	; 0x5c
	nct.client.client_id.size = strlen(client_id_buf);
   25396:	f7f4 fdf5 	bl	19f84 <strlen>
	nct.client.protocol_version = MQTT_VERSION_3_1_1;
   2539a:	2304      	movs	r3, #4
   2539c:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	nct.client.password = NULL;
   253a0:	2300      	movs	r3, #0
	nct.client.user_name = NULL;
   253a2:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
	nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   253a6:	2301      	movs	r3, #1
   253a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	nct.client.rx_buf = nct.rx_buf;
   253ac:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
   253b0:	67e3      	str	r3, [r4, #124]	; 0x7c
   253b2:	4626      	mov	r6, r4
	nct.client.rx_buf_size = sizeof(nct.rx_buf);
   253b4:	f44f 7380 	mov.w	r3, #256	; 0x100
	nct.client.tx_buf = nct.tx_buf;
   253b8:	f504 72e2 	add.w	r2, r4, #452	; 0x1c4
   253bc:	f104 0544 	add.w	r5, r4, #68	; 0x44
	nct.client.client_id.size = strlen(client_id_buf);
   253c0:	6620      	str	r0, [r4, #96]	; 0x60
	nct.client.rx_buf_size = sizeof(nct.rx_buf);
   253c2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	nct.client.tx_buf_size = sizeof(nct.tx_buf);
   253c6:	e9c4 2321 	strd	r2, r3, [r4, #132]	; 0x84
	memcpy(tls_config, &nct.tls_config, sizeof(struct mqtt_sec_config));
   253ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   253cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   253ce:	e896 0003 	ldmia.w	r6, {r0, r1}
	int err = aws_fota_init(&nct.client, STRINGIFY(APP_VERSION),
   253d2:	4a13      	ldr	r2, [pc, #76]	; (25420 <nct_mqtt_connect+0xa4>)
   253d4:	e885 0003 	stmia.w	r5, {r0, r1}
   253d8:	4912      	ldr	r1, [pc, #72]	; (25424 <nct_mqtt_connect+0xa8>)
   253da:	f104 0018 	add.w	r0, r4, #24
   253de:	f002 f81b 	bl	27418 <aws_fota_init>
	if (err != 0) {
   253e2:	4605      	mov	r5, r0
   253e4:	b928      	cbnz	r0, 253f2 <nct_mqtt_connect+0x76>
	return mqtt_connect(&nct.client);
   253e6:	f104 0018 	add.w	r0, r4, #24
}
   253ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return mqtt_connect(&nct.client);
   253ee:	f019 bfeb 	b.w	3f3c8 <mqtt_connect>
		LOG_ERR("ERROR: aws_fota_init %d", err);
   253f2:	2301      	movs	r3, #1
   253f4:	f04f 0000 	mov.w	r0, #0
   253f8:	4a0b      	ldr	r2, [pc, #44]	; (25428 <nct_mqtt_connect+0xac>)
   253fa:	f363 0007 	bfi	r0, r3, #0, #8
   253fe:	4b0b      	ldr	r3, [pc, #44]	; (2542c <nct_mqtt_connect+0xb0>)
   25400:	490b      	ldr	r1, [pc, #44]	; (25430 <nct_mqtt_connect+0xb4>)
   25402:	1a9b      	subs	r3, r3, r2
   25404:	08db      	lsrs	r3, r3, #3
   25406:	f363 108f 	bfi	r0, r3, #6, #10
   2540a:	462a      	mov	r2, r5
   2540c:	f019 faab 	bl	3e966 <log_string_sync>
}
   25410:	4628      	mov	r0, r5
   25412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25414:	20023be0 	.word	0x20023be0
   25418:	000250d1 	.word	0x000250d1
   2541c:	2002b39f 	.word	0x2002b39f
   25420:	0002506d 	.word	0x0002506d
   25424:	00046682 	.word	0x00046682
   25428:	00042314 	.word	0x00042314
   2542c:	000423e4 	.word	0x000423e4
   25430:	000471c9 	.word	0x000471c9

00025434 <nct_init>:

int nct_init(void)
{
   25434:	b530      	push	{r4, r5, lr}
   25436:	b085      	sub	sp, #20
	int err;

	dc_endpoint_reset();
   25438:	f7ff fdba 	bl	24fb0 <dc_endpoint_reset>
	at_socket_fd = nrf_socket(NRF_AF_LTE, 0, NRF_PROTO_AT);
   2543c:	f240 2201 	movw	r2, #513	; 0x201
   25440:	2100      	movs	r1, #0
   25442:	2066      	movs	r0, #102	; 0x66
   25444:	f005 f954 	bl	2a6f0 <nrf_socket>
	__ASSERT_NO_MSG(at_socket_fd >= 0);
   25448:	1e04      	subs	r4, r0, #0
   2544a:	da0b      	bge.n	25464 <nct_init+0x30>
   2544c:	4980      	ldr	r1, [pc, #512]	; (25650 <nct_init+0x21c>)
   2544e:	4881      	ldr	r0, [pc, #516]	; (25654 <nct_init+0x220>)
   25450:	f240 1309 	movw	r3, #265	; 0x109
   25454:	4a80      	ldr	r2, [pc, #512]	; (25658 <nct_init+0x224>)
   25456:	f019 fa69 	bl	3e92c <printk>
   2545a:	f240 1109 	movw	r1, #265	; 0x109
   2545e:	487e      	ldr	r0, [pc, #504]	; (25658 <nct_init+0x224>)
   25460:	f019 fa71 	bl	3e946 <assert_post_action>
	bytes_written = nrf_write(at_socket_fd, "AT+CGSN", 7);
   25464:	2207      	movs	r2, #7
   25466:	497d      	ldr	r1, [pc, #500]	; (2565c <nct_init+0x228>)
   25468:	4620      	mov	r0, r4
   2546a:	f005 f997 	bl	2a79c <nrf_write>
	__ASSERT_NO_MSG(bytes_written == 7);
   2546e:	2807      	cmp	r0, #7
   25470:	d00b      	beq.n	2548a <nct_init+0x56>
   25472:	497b      	ldr	r1, [pc, #492]	; (25660 <nct_init+0x22c>)
   25474:	4877      	ldr	r0, [pc, #476]	; (25654 <nct_init+0x220>)
   25476:	f44f 7386 	mov.w	r3, #268	; 0x10c
   2547a:	4a77      	ldr	r2, [pc, #476]	; (25658 <nct_init+0x224>)
   2547c:	f019 fa56 	bl	3e92c <printk>
   25480:	f44f 7186 	mov.w	r1, #268	; 0x10c
   25484:	4874      	ldr	r0, [pc, #464]	; (25658 <nct_init+0x224>)
   25486:	f019 fa5e 	bl	3e946 <assert_post_action>
	bytes_read = nrf_read(at_socket_fd, imei_buf, NRF_IMEI_LEN);
   2548a:	220f      	movs	r2, #15
   2548c:	4669      	mov	r1, sp
   2548e:	4620      	mov	r0, r4
   25490:	f005 f9d0 	bl	2a834 <nrf_read>
	__ASSERT_NO_MSG(bytes_read == NRF_IMEI_LEN);
   25494:	280f      	cmp	r0, #15
   25496:	d00b      	beq.n	254b0 <nct_init+0x7c>
   25498:	4972      	ldr	r1, [pc, #456]	; (25664 <nct_init+0x230>)
   2549a:	486e      	ldr	r0, [pc, #440]	; (25654 <nct_init+0x220>)
   2549c:	f240 130f 	movw	r3, #271	; 0x10f
   254a0:	4a6d      	ldr	r2, [pc, #436]	; (25658 <nct_init+0x224>)
   254a2:	f019 fa43 	bl	3e92c <printk>
   254a6:	f240 110f 	movw	r1, #271	; 0x10f
   254aa:	486b      	ldr	r0, [pc, #428]	; (25658 <nct_init+0x224>)
   254ac:	f019 fa4b 	bl	3e946 <assert_post_action>
	imei_buf[NRF_IMEI_LEN] = 0;
   254b0:	2300      	movs	r3, #0
	snprintf(id, NRF_CLOUD_CLIENT_ID_LEN + 1, "nrf-%s", imei_buf);
   254b2:	4a6d      	ldr	r2, [pc, #436]	; (25668 <nct_init+0x234>)
	imei_buf[NRF_IMEI_LEN] = 0;
   254b4:	f88d 300f 	strb.w	r3, [sp, #15]
	snprintf(id, NRF_CLOUD_CLIENT_ID_LEN + 1, "nrf-%s", imei_buf);
   254b8:	2114      	movs	r1, #20
   254ba:	466b      	mov	r3, sp
   254bc:	486b      	ldr	r0, [pc, #428]	; (2566c <nct_init+0x238>)
   254be:	f017 fa6f 	bl	3c9a0 <sniprintf>
	ret = nrf_close(at_socket_fd);
   254c2:	4620      	mov	r0, r4
   254c4:	f005 f926 	bl	2a714 <nrf_close>
	__ASSERT_NO_MSG(ret == 0);
   254c8:	b158      	cbz	r0, 254e2 <nct_init+0xae>
   254ca:	4969      	ldr	r1, [pc, #420]	; (25670 <nct_init+0x23c>)
   254cc:	4861      	ldr	r0, [pc, #388]	; (25654 <nct_init+0x220>)
   254ce:	f240 1315 	movw	r3, #277	; 0x115
   254d2:	4a61      	ldr	r2, [pc, #388]	; (25658 <nct_init+0x224>)
   254d4:	f019 fa2a 	bl	3e92c <printk>
   254d8:	f240 1115 	movw	r1, #277	; 0x115
   254dc:	485e      	ldr	r0, [pc, #376]	; (25658 <nct_init+0x224>)
   254de:	f019 fa32 	bl	3e946 <assert_post_action>
	LOG_DBG("client_id = %s", log_strdup(id));
   254e2:	2304      	movs	r3, #4
   254e4:	f04f 0500 	mov.w	r5, #0
   254e8:	4c62      	ldr	r4, [pc, #392]	; (25674 <nct_init+0x240>)
   254ea:	f363 0507 	bfi	r5, r3, #0, #8
   254ee:	4b62      	ldr	r3, [pc, #392]	; (25678 <nct_init+0x244>)
   254f0:	485e      	ldr	r0, [pc, #376]	; (2566c <nct_init+0x238>)
   254f2:	1ae4      	subs	r4, r4, r3
   254f4:	f019 fa49 	bl	3e98a <log_strdup>
   254f8:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   254fc:	f364 158f 	bfi	r5, r4, #6, #10
   25500:	4603      	mov	r3, r0
   25502:	4a5e      	ldr	r2, [pc, #376]	; (2567c <nct_init+0x248>)
   25504:	495e      	ldr	r1, [pc, #376]	; (25680 <nct_init+0x24c>)
   25506:	4628      	mov	r0, r5
   25508:	f019 fa2d 	bl	3e966 <log_string_sync>
	ret = snprintf(shadow_base_topic, sizeof(shadow_base_topic),
   2550c:	4b57      	ldr	r3, [pc, #348]	; (2566c <nct_init+0x238>)
   2550e:	4a5d      	ldr	r2, [pc, #372]	; (25684 <nct_init+0x250>)
   25510:	2127      	movs	r1, #39	; 0x27
   25512:	485d      	ldr	r0, [pc, #372]	; (25688 <nct_init+0x254>)
   25514:	f017 fa44 	bl	3c9a0 <sniprintf>
	if (ret != NCT_SHADOW_BASE_TOPIC_LEN) {
   25518:	2826      	cmp	r0, #38	; 0x26
   2551a:	d003      	beq.n	25524 <nct_init+0xf0>
		return -ENOMEM;
   2551c:	f06f 000b 	mvn.w	r0, #11
	if (err) {
		return err;
	}

	return nct_provision();
}
   25520:	b005      	add	sp, #20
   25522:	bd30      	pop	{r4, r5, pc}
	LOG_DBG("shadow_base_topic: %s", log_strdup(shadow_base_topic));
   25524:	2304      	movs	r3, #4
   25526:	f04f 0500 	mov.w	r5, #0
   2552a:	4857      	ldr	r0, [pc, #348]	; (25688 <nct_init+0x254>)
   2552c:	f363 0507 	bfi	r5, r3, #0, #8
   25530:	f019 fa2b 	bl	3e98a <log_strdup>
   25534:	f364 158f 	bfi	r5, r4, #6, #10
   25538:	4603      	mov	r3, r0
   2553a:	4a54      	ldr	r2, [pc, #336]	; (2568c <nct_init+0x258>)
   2553c:	4954      	ldr	r1, [pc, #336]	; (25690 <nct_init+0x25c>)
   2553e:	4628      	mov	r0, r5
   25540:	f019 fa11 	bl	3e966 <log_string_sync>
	ret = snprintf(accepted_topic, sizeof(accepted_topic),
   25544:	4b49      	ldr	r3, [pc, #292]	; (2566c <nct_init+0x238>)
   25546:	4a53      	ldr	r2, [pc, #332]	; (25694 <nct_init+0x260>)
   25548:	2128      	movs	r1, #40	; 0x28
   2554a:	4853      	ldr	r0, [pc, #332]	; (25698 <nct_init+0x264>)
   2554c:	f017 fa28 	bl	3c9a0 <sniprintf>
	if (ret != NCT_ACCEPTED_TOPIC_LEN) {
   25550:	2827      	cmp	r0, #39	; 0x27
   25552:	d1e3      	bne.n	2551c <nct_init+0xe8>
	LOG_DBG("accepted_topic: %s", log_strdup(accepted_topic));
   25554:	2304      	movs	r3, #4
   25556:	f04f 0500 	mov.w	r5, #0
   2555a:	484f      	ldr	r0, [pc, #316]	; (25698 <nct_init+0x264>)
   2555c:	f363 0507 	bfi	r5, r3, #0, #8
   25560:	f019 fa13 	bl	3e98a <log_strdup>
   25564:	f364 158f 	bfi	r5, r4, #6, #10
   25568:	4603      	mov	r3, r0
   2556a:	4a48      	ldr	r2, [pc, #288]	; (2568c <nct_init+0x258>)
   2556c:	494b      	ldr	r1, [pc, #300]	; (2569c <nct_init+0x268>)
   2556e:	4628      	mov	r0, r5
   25570:	f019 f9f9 	bl	3e966 <log_string_sync>
	ret = snprintf(rejected_topic, sizeof(rejected_topic),
   25574:	4b3d      	ldr	r3, [pc, #244]	; (2566c <nct_init+0x238>)
   25576:	4a4a      	ldr	r2, [pc, #296]	; (256a0 <nct_init+0x26c>)
   25578:	2134      	movs	r1, #52	; 0x34
   2557a:	484a      	ldr	r0, [pc, #296]	; (256a4 <nct_init+0x270>)
   2557c:	f017 fa10 	bl	3c9a0 <sniprintf>
	if (ret != NCT_REJECTED_TOPIC_LEN) {
   25580:	2833      	cmp	r0, #51	; 0x33
   25582:	d1cb      	bne.n	2551c <nct_init+0xe8>
	LOG_DBG("rejected_topic: %s", log_strdup(rejected_topic));
   25584:	2304      	movs	r3, #4
   25586:	f04f 0500 	mov.w	r5, #0
   2558a:	4846      	ldr	r0, [pc, #280]	; (256a4 <nct_init+0x270>)
   2558c:	f363 0507 	bfi	r5, r3, #0, #8
   25590:	f019 f9fb 	bl	3e98a <log_strdup>
   25594:	f364 158f 	bfi	r5, r4, #6, #10
   25598:	4603      	mov	r3, r0
   2559a:	4a3c      	ldr	r2, [pc, #240]	; (2568c <nct_init+0x258>)
   2559c:	4942      	ldr	r1, [pc, #264]	; (256a8 <nct_init+0x274>)
   2559e:	4628      	mov	r0, r5
   255a0:	f019 f9e1 	bl	3e966 <log_string_sync>
	ret = snprintf(update_delta_topic, sizeof(update_delta_topic),
   255a4:	4b31      	ldr	r3, [pc, #196]	; (2566c <nct_init+0x238>)
   255a6:	4a41      	ldr	r2, [pc, #260]	; (256ac <nct_init+0x278>)
   255a8:	2134      	movs	r1, #52	; 0x34
   255aa:	4841      	ldr	r0, [pc, #260]	; (256b0 <nct_init+0x27c>)
   255ac:	f017 f9f8 	bl	3c9a0 <sniprintf>
	if (ret != NCT_UPDATE_DELTA_TOPIC_LEN) {
   255b0:	2833      	cmp	r0, #51	; 0x33
   255b2:	d1b3      	bne.n	2551c <nct_init+0xe8>
	LOG_DBG("update_delta_topic: %s", log_strdup(update_delta_topic));
   255b4:	2304      	movs	r3, #4
   255b6:	f04f 0500 	mov.w	r5, #0
   255ba:	483d      	ldr	r0, [pc, #244]	; (256b0 <nct_init+0x27c>)
   255bc:	f363 0507 	bfi	r5, r3, #0, #8
   255c0:	f019 f9e3 	bl	3e98a <log_strdup>
   255c4:	f364 158f 	bfi	r5, r4, #6, #10
   255c8:	4603      	mov	r3, r0
   255ca:	4a30      	ldr	r2, [pc, #192]	; (2568c <nct_init+0x258>)
   255cc:	4939      	ldr	r1, [pc, #228]	; (256b4 <nct_init+0x280>)
   255ce:	4628      	mov	r0, r5
   255d0:	f019 f9c9 	bl	3e966 <log_string_sync>
	ret = snprintf(update_topic, sizeof(update_topic),
   255d4:	4b25      	ldr	r3, [pc, #148]	; (2566c <nct_init+0x238>)
   255d6:	4a38      	ldr	r2, [pc, #224]	; (256b8 <nct_init+0x284>)
   255d8:	212e      	movs	r1, #46	; 0x2e
   255da:	4838      	ldr	r0, [pc, #224]	; (256bc <nct_init+0x288>)
   255dc:	f017 f9e0 	bl	3c9a0 <sniprintf>
	if (ret != NCT_UPDATE_TOPIC_LEN) {
   255e0:	282d      	cmp	r0, #45	; 0x2d
   255e2:	d19b      	bne.n	2551c <nct_init+0xe8>
	LOG_DBG("update_topic: %s", log_strdup(update_topic));
   255e4:	2304      	movs	r3, #4
   255e6:	f04f 0500 	mov.w	r5, #0
   255ea:	4834      	ldr	r0, [pc, #208]	; (256bc <nct_init+0x288>)
   255ec:	f363 0507 	bfi	r5, r3, #0, #8
   255f0:	f019 f9cb 	bl	3e98a <log_strdup>
   255f4:	f364 158f 	bfi	r5, r4, #6, #10
   255f8:	4603      	mov	r3, r0
   255fa:	4a24      	ldr	r2, [pc, #144]	; (2568c <nct_init+0x258>)
   255fc:	4930      	ldr	r1, [pc, #192]	; (256c0 <nct_init+0x28c>)
   255fe:	4628      	mov	r0, r5
   25600:	f019 f9b1 	bl	3e966 <log_string_sync>
	ret = snprintf(shadow_get_topic, sizeof(shadow_get_topic),
   25604:	4b19      	ldr	r3, [pc, #100]	; (2566c <nct_init+0x238>)
   25606:	4a2f      	ldr	r2, [pc, #188]	; (256c4 <nct_init+0x290>)
   25608:	212b      	movs	r1, #43	; 0x2b
   2560a:	482f      	ldr	r0, [pc, #188]	; (256c8 <nct_init+0x294>)
   2560c:	f017 f9c8 	bl	3c9a0 <sniprintf>
	if (ret != NCT_SHADOW_GET_LEN) {
   25610:	282a      	cmp	r0, #42	; 0x2a
   25612:	d183      	bne.n	2551c <nct_init+0xe8>
	LOG_DBG("shadow_get_topic: %s", log_strdup(shadow_get_topic));
   25614:	2304      	movs	r3, #4
   25616:	f04f 0500 	mov.w	r5, #0
   2561a:	482b      	ldr	r0, [pc, #172]	; (256c8 <nct_init+0x294>)
   2561c:	f363 0507 	bfi	r5, r3, #0, #8
   25620:	f019 f9b3 	bl	3e98a <log_strdup>
   25624:	f364 158f 	bfi	r5, r4, #6, #10
   25628:	4603      	mov	r3, r0
   2562a:	4a18      	ldr	r2, [pc, #96]	; (2568c <nct_init+0x258>)
   2562c:	4628      	mov	r0, r5
   2562e:	4927      	ldr	r1, [pc, #156]	; (256cc <nct_init+0x298>)
   25630:	f019 f999 	bl	3e966 <log_string_sync>
	nct.tls_config.cipher_count = 0;
   25634:	2202      	movs	r2, #2
   25636:	2000      	movs	r0, #0
	nct.tls_config.peer_verify = 2;
   25638:	4b25      	ldr	r3, [pc, #148]	; (256d0 <nct_init+0x29c>)
	nct.tls_config.cipher_count = 0;
   2563a:	e9c3 2000 	strd	r2, r0, [r3]
	nct.tls_config.sec_tag_count = ARRAY_SIZE(sec_tag_list);
   2563e:	2201      	movs	r2, #1
   25640:	60da      	str	r2, [r3, #12]
	nct.tls_config.sec_tag_list = sec_tag_list;
   25642:	4a24      	ldr	r2, [pc, #144]	; (256d4 <nct_init+0x2a0>)
	nct.tls_config.cipher_list = NULL;
   25644:	6098      	str	r0, [r3, #8]
	nct.tls_config.sec_tag_list = sec_tag_list;
   25646:	611a      	str	r2, [r3, #16]
	nct.tls_config.hostname = NRF_CLOUD_HOSTNAME;
   25648:	4a23      	ldr	r2, [pc, #140]	; (256d8 <nct_init+0x2a4>)
   2564a:	615a      	str	r2, [r3, #20]
	return nct_provision();
   2564c:	e768      	b.n	25520 <nct_init+0xec>
   2564e:	bf00      	nop
   25650:	0004700f 	.word	0x0004700f
   25654:	00044643 	.word	0x00044643
   25658:	00046fb1 	.word	0x00046fb1
   2565c:	000464a8 	.word	0x000464a8
   25660:	00047021 	.word	0x00047021
   25664:	00047034 	.word	0x00047034
   25668:	00047045 	.word	0x00047045
   2566c:	2002b39f 	.word	0x2002b39f
   25670:	00045e13 	.word	0x00045e13
   25674:	000423e4 	.word	0x000423e4
   25678:	00042314 	.word	0x00042314
   2567c:	00046d39 	.word	0x00046d39
   25680:	0004704c 	.word	0x0004704c
   25684:	0004705f 	.word	0x0004705f
   25688:	2002b3e7 	.word	0x2002b3e7
   2568c:	00046d4b 	.word	0x00046d4b
   25690:	00047075 	.word	0x00047075
   25694:	0004708f 	.word	0x0004708f
   25698:	2002b377 	.word	0x2002b377
   2569c:	000470a6 	.word	0x000470a6
   256a0:	000470bd 	.word	0x000470bd
   256a4:	2002b3b3 	.word	0x2002b3b3
   256a8:	000470e0 	.word	0x000470e0
   256ac:	000470f7 	.word	0x000470f7
   256b0:	2002b439 	.word	0x2002b439
   256b4:	0004711a 	.word	0x0004711a
   256b8:	00047135 	.word	0x00047135
   256bc:	2002b46d 	.word	0x2002b46d
   256c0:	00047152 	.word	0x00047152
   256c4:	00047167 	.word	0x00047167
   256c8:	2002b40e 	.word	0x2002b40e
   256cc:	00047181 	.word	0x00047181
   256d0:	20023be0 	.word	0x20023be0
   256d4:	20031288 	.word	0x20031288
   256d8:	0004719a 	.word	0x0004719a

000256dc <nct_connect>:

	return err;
}
#else
int nct_connect(void)
{
   256dc:	b570      	push	{r4, r5, r6, lr}
   256de:	b08c      	sub	sp, #48	; 0x30
	int err;
	struct addrinfo *result;
	struct addrinfo *addr;
	struct addrinfo hints = {
   256e0:	2220      	movs	r2, #32
   256e2:	2100      	movs	r1, #0
   256e4:	a804      	add	r0, sp, #16
   256e6:	f01b fb5b 	bl	40da0 <memset>
   256ea:	2301      	movs	r3, #1

static inline int getaddrinfo(const char *node, const char *service,
			      const struct addrinfo *hints,
			      struct addrinfo **res)
{
	__ASSERT_NO_MSG(socket_ops);
   256ec:	4c45      	ldr	r4, [pc, #276]	; (25804 <nct_connect+0x128>)
   256ee:	e9cd 3305 	strd	r3, r3, [sp, #20]
   256f2:	6823      	ldr	r3, [r4, #0]
   256f4:	b94b      	cbnz	r3, 2570a <nct_connect+0x2e>
   256f6:	4944      	ldr	r1, [pc, #272]	; (25808 <nct_connect+0x12c>)
   256f8:	4844      	ldr	r0, [pc, #272]	; (2580c <nct_connect+0x130>)
   256fa:	2393      	movs	r3, #147	; 0x93
   256fc:	4a44      	ldr	r2, [pc, #272]	; (25810 <nct_connect+0x134>)
   256fe:	f019 f915 	bl	3e92c <printk>
   25702:	2193      	movs	r1, #147	; 0x93
   25704:	4842      	ldr	r0, [pc, #264]	; (25810 <nct_connect+0x134>)
   25706:	f019 f91e 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);
   2570a:	6823      	ldr	r3, [r4, #0]
   2570c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2570e:	b94b      	cbnz	r3, 25724 <nct_connect+0x48>
   25710:	4940      	ldr	r1, [pc, #256]	; (25814 <nct_connect+0x138>)
   25712:	483e      	ldr	r0, [pc, #248]	; (2580c <nct_connect+0x130>)
   25714:	2394      	movs	r3, #148	; 0x94
   25716:	4a3e      	ldr	r2, [pc, #248]	; (25810 <nct_connect+0x134>)
   25718:	f019 f908 	bl	3e92c <printk>
   2571c:	2194      	movs	r1, #148	; 0x94
   2571e:	483c      	ldr	r0, [pc, #240]	; (25810 <nct_connect+0x134>)
   25720:	f019 f911 	bl	3e946 <assert_post_action>

	return socket_ops->getaddrinfo(node, service, hints, res);
   25724:	6823      	ldr	r3, [r4, #0]
   25726:	aa04      	add	r2, sp, #16
   25728:	6b5d      	ldr	r5, [r3, #52]	; 0x34
   2572a:	2100      	movs	r1, #0
   2572c:	ab03      	add	r3, sp, #12
   2572e:	483a      	ldr	r0, [pc, #232]	; (25818 <nct_connect+0x13c>)
   25730:	47a8      	blx	r5
		.ai_family = NRF_CLOUD_AF_FAMILY,
		.ai_socktype = SOCK_STREAM
	};

	err = getaddrinfo(NRF_CLOUD_HOSTNAME, NULL, &hints, &result);
	if (err) {
   25732:	4605      	mov	r5, r0
   25734:	b190      	cbz	r0, 2575c <nct_connect+0x80>
		LOG_DBG("getaddrinfo failed %d", err);
   25736:	2304      	movs	r3, #4
   25738:	f04f 0000 	mov.w	r0, #0
   2573c:	4a37      	ldr	r2, [pc, #220]	; (2581c <nct_connect+0x140>)
   2573e:	f363 0007 	bfi	r0, r3, #0, #8
   25742:	4b37      	ldr	r3, [pc, #220]	; (25820 <nct_connect+0x144>)
   25744:	4937      	ldr	r1, [pc, #220]	; (25824 <nct_connect+0x148>)
   25746:	1a9b      	subs	r3, r3, r2
   25748:	08db      	lsrs	r3, r3, #3
   2574a:	f363 108f 	bfi	r0, r3, #6, #10
   2574e:	4a36      	ldr	r2, [pc, #216]	; (25828 <nct_connect+0x14c>)
   25750:	462b      	mov	r3, r5
   25752:	f019 f908 	bl	3e966 <log_string_sync>

	/* Free the address. */
	freeaddrinfo(result);

	return err;
}
   25756:	4628      	mov	r0, r5
   25758:	b00c      	add	sp, #48	; 0x30
   2575a:	bd70      	pop	{r4, r5, r6, pc}
	addr = result;
   2575c:	9903      	ldr	r1, [sp, #12]
	while (addr != NULL) {
   2575e:	2900      	cmp	r1, #0
   25760:	d04c      	beq.n	257fc <nct_connect+0x120>
		if ((addr->ai_addrlen == sizeof(struct sockaddr_in)) &&
   25762:	690b      	ldr	r3, [r1, #16]
   25764:	4a2e      	ldr	r2, [pc, #184]	; (25820 <nct_connect+0x144>)
   25766:	482d      	ldr	r0, [pc, #180]	; (2581c <nct_connect+0x140>)
   25768:	2b08      	cmp	r3, #8
   2576a:	eba2 0200 	sub.w	r2, r2, r0
   2576e:	f3c2 02c9 	ubfx	r2, r2, #3, #10
   25772:	d134      	bne.n	257de <nct_connect+0x102>
				->sin_addr.s_addr;
   25774:	694b      	ldr	r3, [r1, #20]
			broker->sin_family = AF_INET;
   25776:	482d      	ldr	r0, [pc, #180]	; (2582c <nct_connect+0x150>)
				->sin_addr.s_addr;
   25778:	685b      	ldr	r3, [r3, #4]
			broker->sin_addr.s_addr =
   2577a:	492d      	ldr	r1, [pc, #180]	; (25830 <nct_connect+0x154>)
   2577c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
			broker->sin_family = AF_INET;
   25780:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
			LOG_DBG("IPv4 Address 0x%08x", broker->sin_addr.s_addr);
   25784:	2104      	movs	r1, #4
   25786:	f04f 0000 	mov.w	r0, #0
   2578a:	f361 0007 	bfi	r0, r1, #0, #8
   2578e:	f362 108f 	bfi	r0, r2, #6, #10
   25792:	4928      	ldr	r1, [pc, #160]	; (25834 <nct_connect+0x158>)
   25794:	4a24      	ldr	r2, [pc, #144]	; (25828 <nct_connect+0x14c>)
   25796:	f019 f8e6 	bl	3e966 <log_string_sync>
			err = nct_mqtt_connect();
   2579a:	f7ff fdef 	bl	2537c <nct_mqtt_connect>
   2579e:	4605      	mov	r5, r0
}

static inline void freeaddrinfo(struct addrinfo *res)
{
	__ASSERT_NO_MSG(socket_ops);
   257a0:	6823      	ldr	r3, [r4, #0]
	freeaddrinfo(result);
   257a2:	9e03      	ldr	r6, [sp, #12]
   257a4:	b94b      	cbnz	r3, 257ba <nct_connect+0xde>
   257a6:	4918      	ldr	r1, [pc, #96]	; (25808 <nct_connect+0x12c>)
   257a8:	4818      	ldr	r0, [pc, #96]	; (2580c <nct_connect+0x130>)
   257aa:	239b      	movs	r3, #155	; 0x9b
   257ac:	4a18      	ldr	r2, [pc, #96]	; (25810 <nct_connect+0x134>)
   257ae:	f019 f8bd 	bl	3e92c <printk>
   257b2:	219b      	movs	r1, #155	; 0x9b
   257b4:	4816      	ldr	r0, [pc, #88]	; (25810 <nct_connect+0x134>)
   257b6:	f019 f8c6 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);
   257ba:	6823      	ldr	r3, [r4, #0]
   257bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   257be:	b94b      	cbnz	r3, 257d4 <nct_connect+0xf8>
   257c0:	491d      	ldr	r1, [pc, #116]	; (25838 <nct_connect+0x15c>)
   257c2:	4812      	ldr	r0, [pc, #72]	; (2580c <nct_connect+0x130>)
   257c4:	239c      	movs	r3, #156	; 0x9c
   257c6:	4a12      	ldr	r2, [pc, #72]	; (25810 <nct_connect+0x134>)
   257c8:	f019 f8b0 	bl	3e92c <printk>
   257cc:	219c      	movs	r1, #156	; 0x9c
   257ce:	4810      	ldr	r0, [pc, #64]	; (25810 <nct_connect+0x134>)
   257d0:	f019 f8b9 	bl	3e946 <assert_post_action>

	return socket_ops->freeaddrinfo(res);
   257d4:	6823      	ldr	r3, [r4, #0]
   257d6:	4630      	mov	r0, r6
   257d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   257da:	4798      	blx	r3
   257dc:	e7bb      	b.n	25756 <nct_connect+0x7a>
			LOG_DBG("ai_addrlen = %u should be %u or %u",
   257de:	2104      	movs	r1, #4
   257e0:	f04f 0000 	mov.w	r0, #0
   257e4:	f361 0007 	bfi	r0, r1, #0, #8
   257e8:	f362 108f 	bfi	r0, r2, #6, #10
   257ec:	2118      	movs	r1, #24
   257ee:	2208      	movs	r2, #8
   257f0:	e9cd 2100 	strd	r2, r1, [sp]
   257f4:	4a0c      	ldr	r2, [pc, #48]	; (25828 <nct_connect+0x14c>)
   257f6:	4911      	ldr	r1, [pc, #68]	; (2583c <nct_connect+0x160>)
   257f8:	f019 f8b5 	bl	3e966 <log_string_sync>
	err = -ENOENT;
   257fc:	f06f 0501 	mvn.w	r5, #1
   25800:	e7ce      	b.n	257a0 <nct_connect+0xc4>
   25802:	bf00      	nop
   25804:	20023990 	.word	0x20023990
   25808:	0004476f 	.word	0x0004476f
   2580c:	00044643 	.word	0x00044643
   25810:	00044746 	.word	0x00044746
   25814:	00046ebb 	.word	0x00046ebb
   25818:	0004719a 	.word	0x0004719a
   2581c:	00042314 	.word	0x00042314
   25820:	000423e4 	.word	0x000423e4
   25824:	00046ed3 	.word	0x00046ed3
   25828:	00046d88 	.word	0x00046d88
   2582c:	b3220001 	.word	0xb3220001
   25830:	20023be0 	.word	0x20023be0
   25834:	00046eed 	.word	0x00046eed
   25838:	00046f2c 	.word	0x00046f2c
   2583c:	00046f05 	.word	0x00046f05

00025840 <nct_cc_connect>:
#endif /* defined(CONFIG_NRF_CLOUD_STATIC_IPV4) */

int nct_cc_connect(void)
{
   25840:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("nct_cc_connect");
   25842:	2304      	movs	r3, #4
   25844:	f04f 0000 	mov.w	r0, #0
   25848:	4a0b      	ldr	r2, [pc, #44]	; (25878 <nct_cc_connect+0x38>)
   2584a:	f363 0007 	bfi	r0, r3, #0, #8
   2584e:	4b0b      	ldr	r3, [pc, #44]	; (2587c <nct_cc_connect+0x3c>)
   25850:	490b      	ldr	r1, [pc, #44]	; (25880 <nct_cc_connect+0x40>)
   25852:	1a9b      	subs	r3, r3, r2
   25854:	08db      	lsrs	r3, r3, #3
   25856:	f363 108f 	bfi	r0, r3, #6, #10
   2585a:	4a0a      	ldr	r2, [pc, #40]	; (25884 <nct_cc_connect+0x44>)
   2585c:	f019 f883 	bl	3e966 <log_string_sync>

	const struct mqtt_subscription_list subscription_list = {
   25860:	4b09      	ldr	r3, [pc, #36]	; (25888 <nct_cc_connect+0x48>)
		.list = (struct mqtt_topic *)&nct_cc_rx_list,
		.list_count = ARRAY_SIZE(nct_cc_rx_list),
		.message_id = NCT_CC_SUBSCRIBE_ID
	};

	return mqtt_subscribe(&nct.client, &subscription_list);
   25862:	4669      	mov	r1, sp
	const struct mqtt_subscription_list subscription_list = {
   25864:	9300      	str	r3, [sp, #0]
   25866:	4b09      	ldr	r3, [pc, #36]	; (2588c <nct_cc_connect+0x4c>)
	return mqtt_subscribe(&nct.client, &subscription_list);
   25868:	4809      	ldr	r0, [pc, #36]	; (25890 <nct_cc_connect+0x50>)
	const struct mqtt_subscription_list subscription_list = {
   2586a:	9301      	str	r3, [sp, #4]
	return mqtt_subscribe(&nct.client, &subscription_list);
   2586c:	f019 fe6a 	bl	3f544 <mqtt_subscribe>
}
   25870:	b003      	add	sp, #12
   25872:	f85d fb04 	ldr.w	pc, [sp], #4
   25876:	bf00      	nop
   25878:	00042314 	.word	0x00042314
   2587c:	000423e4 	.word	0x000423e4
   25880:	00046e4c 	.word	0x00046e4c
   25884:	00046d94 	.word	0x00046d94
   25888:	00042bb0 	.word	0x00042bb0
   2588c:	04d20003 	.word	0x04d20003
   25890:	20023bf8 	.word	0x20023bf8

00025894 <nct_cc_send>:

int nct_cc_send(const struct nct_cc_data *cc_data)
{
   25894:	b570      	push	{r4, r5, r6, lr}
   25896:	4b34      	ldr	r3, [pc, #208]	; (25968 <nct_cc_send+0xd4>)
   25898:	4c34      	ldr	r4, [pc, #208]	; (2596c <nct_cc_send+0xd8>)
   2589a:	b088      	sub	sp, #32
   2589c:	1ae4      	subs	r4, r4, r3
   2589e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	static u32_t msg_id;

	if (cc_data == NULL) {
   258a2:	4605      	mov	r5, r0
   258a4:	b970      	cbnz	r0, 258c4 <nct_cc_send+0x30>
		LOG_ERR("cc_data == NULL");
   258a6:	2301      	movs	r3, #1
   258a8:	f04f 0000 	mov.w	r0, #0
   258ac:	f363 0007 	bfi	r0, r3, #0, #8
   258b0:	f364 108f 	bfi	r0, r4, #6, #10
   258b4:	492e      	ldr	r1, [pc, #184]	; (25970 <nct_cc_send+0xdc>)
   258b6:	f019 f856 	bl	3e966 <log_string_sync>
		return -EINVAL;
   258ba:	f06f 0515 	mvn.w	r5, #21
	if (err) {
		LOG_ERR("mqtt_publish failed %d", err);
	}

	return err;
}
   258be:	4628      	mov	r0, r5
   258c0:	b008      	add	sp, #32
   258c2:	bd70      	pop	{r4, r5, r6, pc}
	if (cc_data->opcode >= ARRAY_SIZE(nct_cc_tx_list)) {
   258c4:	7b06      	ldrb	r6, [r0, #12]
   258c6:	2e01      	cmp	r6, #1
   258c8:	d90d      	bls.n	258e6 <nct_cc_send+0x52>
		LOG_ERR("opcode = %d", cc_data->opcode);
   258ca:	2301      	movs	r3, #1
   258cc:	f04f 0000 	mov.w	r0, #0
   258d0:	f363 0007 	bfi	r0, r3, #0, #8
   258d4:	f364 108f 	bfi	r0, r4, #6, #10
   258d8:	4632      	mov	r2, r6
   258da:	4926      	ldr	r1, [pc, #152]	; (25974 <nct_cc_send+0xe0>)
   258dc:	f019 f843 	bl	3e966 <log_string_sync>
		return -ENOTSUP;
   258e0:	f06f 0585 	mvn.w	r5, #133	; 0x85
   258e4:	e7eb      	b.n	258be <nct_cc_send+0x2a>
	struct mqtt_publish_param publish = {
   258e6:	2210      	movs	r2, #16
   258e8:	2100      	movs	r1, #0
   258ea:	eb0d 0002 	add.w	r0, sp, r2
   258ee:	f01b fa57 	bl	40da0 <memset>
			nct_cc_tx_list[cc_data->opcode].topic.utf8,
   258f2:	230c      	movs	r3, #12
   258f4:	4373      	muls	r3, r6
   258f6:	4920      	ldr	r1, [pc, #128]	; (25978 <nct_cc_send+0xe4>)
   258f8:	18ca      	adds	r2, r1, r3
	struct mqtt_publish_param publish = {
   258fa:	58cb      	ldr	r3, [r1, r3]
   258fc:	9302      	str	r3, [sp, #8]
   258fe:	6853      	ldr	r3, [r2, #4]
   25900:	9303      	str	r3, [sp, #12]
   25902:	7a13      	ldrb	r3, [r2, #8]
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   25904:	682a      	ldr	r2, [r5, #0]
	struct mqtt_publish_param publish = {
   25906:	f88d 3010 	strb.w	r3, [sp, #16]
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   2590a:	b11a      	cbz	r2, 25914 <nct_cc_send+0x80>
   2590c:	686b      	ldr	r3, [r5, #4]
   2590e:	b10b      	cbz	r3, 25914 <nct_cc_send+0x80>
		publish.message.payload.len = cc_data->data.len;
   25910:	e9cd 3205 	strd	r3, r2, [sp, #20]
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   25914:	68ab      	ldr	r3, [r5, #8]
   25916:	b313      	cbz	r3, 2595e <nct_cc_send+0xca>
	LOG_DBG("mqtt_publish: id=%d opcode=%d len=%d",
   25918:	2104      	movs	r1, #4
   2591a:	f04f 0000 	mov.w	r0, #0
   2591e:	f361 0007 	bfi	r0, r1, #0, #8
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   25922:	b29b      	uxth	r3, r3
	LOG_DBG("mqtt_publish: id=%d opcode=%d len=%d",
   25924:	f364 108f 	bfi	r0, r4, #6, #10
   25928:	e9cd 6200 	strd	r6, r2, [sp]
   2592c:	4913      	ldr	r1, [pc, #76]	; (2597c <nct_cc_send+0xe8>)
   2592e:	4a14      	ldr	r2, [pc, #80]	; (25980 <nct_cc_send+0xec>)
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   25930:	f8ad 301c 	strh.w	r3, [sp, #28]
	LOG_DBG("mqtt_publish: id=%d opcode=%d len=%d",
   25934:	f019 f817 	bl	3e966 <log_string_sync>
	int err = mqtt_publish(&nct.client, &publish);
   25938:	a902      	add	r1, sp, #8
   2593a:	4812      	ldr	r0, [pc, #72]	; (25984 <nct_cc_send+0xf0>)
   2593c:	f019 fd86 	bl	3f44c <mqtt_publish>
	if (err) {
   25940:	4605      	mov	r5, r0
   25942:	2800      	cmp	r0, #0
   25944:	d0bb      	beq.n	258be <nct_cc_send+0x2a>
		LOG_ERR("mqtt_publish failed %d", err);
   25946:	2301      	movs	r3, #1
   25948:	f04f 0000 	mov.w	r0, #0
   2594c:	f363 0007 	bfi	r0, r3, #0, #8
   25950:	f364 108f 	bfi	r0, r4, #6, #10
   25954:	462a      	mov	r2, r5
   25956:	490c      	ldr	r1, [pc, #48]	; (25988 <nct_cc_send+0xf4>)
   25958:	f019 f805 	bl	3e966 <log_string_sync>
   2595c:	e7af      	b.n	258be <nct_cc_send+0x2a>
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   2595e:	490b      	ldr	r1, [pc, #44]	; (2598c <nct_cc_send+0xf8>)
   25960:	680b      	ldr	r3, [r1, #0]
   25962:	3301      	adds	r3, #1
   25964:	600b      	str	r3, [r1, #0]
   25966:	e7d7      	b.n	25918 <nct_cc_send+0x84>
   25968:	00042314 	.word	0x00042314
   2596c:	000423e4 	.word	0x000423e4
   25970:	00046e5f 	.word	0x00046e5f
   25974:	00046e6f 	.word	0x00046e6f
   25978:	00042be0 	.word	0x00042be0
   2597c:	00046e7b 	.word	0x00046e7b
   25980:	00046da3 	.word	0x00046da3
   25984:	20023bf8 	.word	0x20023bf8
   25988:	00046ea4 	.word	0x00046ea4
   2598c:	20023bdc 	.word	0x20023bdc

00025990 <nct_dc_endpoint_set>:
}

void nct_dc_endpoint_set(const struct nrf_cloud_data *tx_endp,
			 const struct nrf_cloud_data *rx_endp,
			 const struct nrf_cloud_data *m_endp)
{
   25990:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("nct_dc_endpoint_set");
   25992:	2304      	movs	r3, #4
{
   25994:	4606      	mov	r6, r0
	LOG_DBG("nct_dc_endpoint_set");
   25996:	f04f 0000 	mov.w	r0, #0
{
   2599a:	460d      	mov	r5, r1
   2599c:	4614      	mov	r4, r2
	LOG_DBG("nct_dc_endpoint_set");
   2599e:	f363 0007 	bfi	r0, r3, #0, #8
   259a2:	4a10      	ldr	r2, [pc, #64]	; (259e4 <nct_dc_endpoint_set+0x54>)
   259a4:	4b10      	ldr	r3, [pc, #64]	; (259e8 <nct_dc_endpoint_set+0x58>)
   259a6:	4911      	ldr	r1, [pc, #68]	; (259ec <nct_dc_endpoint_set+0x5c>)
   259a8:	1a9b      	subs	r3, r3, r2
   259aa:	08db      	lsrs	r3, r3, #3
   259ac:	f363 108f 	bfi	r0, r3, #6, #10
   259b0:	4a0f      	ldr	r2, [pc, #60]	; (259f0 <nct_dc_endpoint_set+0x60>)
   259b2:	f018 ffd8 	bl	3e966 <log_string_sync>

	/* In case the endpoint was previous set, free and reset
	 * before copying new one.
	 */
	dc_endpoint_free();
   259b6:	f7ff fb41 	bl	2503c <dc_endpoint_free>

	nct.dc_tx_endp.utf8 = (u8_t *)tx_endp->ptr;
   259ba:	6872      	ldr	r2, [r6, #4]
   259bc:	4b0d      	ldr	r3, [pc, #52]	; (259f4 <nct_dc_endpoint_set+0x64>)
   259be:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	nct.dc_tx_endp.size = tx_endp->len;
   259c2:	6832      	ldr	r2, [r6, #0]
   259c4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	nct.dc_rx_endp.utf8 = (u8_t *)rx_endp->ptr;
   259c8:	686a      	ldr	r2, [r5, #4]
   259ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	nct.dc_rx_endp.size = rx_endp->len;
   259ce:	682a      	ldr	r2, [r5, #0]
   259d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	if (m_endp != NULL) {
   259d4:	b12c      	cbz	r4, 259e2 <nct_dc_endpoint_set+0x52>
		nct.dc_m_endp.utf8 = (u8_t *)m_endp->ptr;
   259d6:	6862      	ldr	r2, [r4, #4]
   259d8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		nct.dc_m_endp.size = m_endp->len;
   259dc:	6822      	ldr	r2, [r4, #0]
   259de:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	}
}
   259e2:	bd70      	pop	{r4, r5, r6, pc}
   259e4:	00042314 	.word	0x00042314
   259e8:	000423e4 	.word	0x000423e4
   259ec:	00046f86 	.word	0x00046f86
   259f0:	00046daf 	.word	0x00046daf
   259f4:	20023be0 	.word	0x20023be0

000259f8 <nct_dc_endpoint_get>:

void nct_dc_endpoint_get(struct nrf_cloud_data *const tx_endp,
			 struct nrf_cloud_data *const rx_endp,
			 struct nrf_cloud_data *const m_endp)
{
   259f8:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("nct_dc_endpoint_get");
   259fa:	2304      	movs	r3, #4
{
   259fc:	4606      	mov	r6, r0
	LOG_DBG("nct_dc_endpoint_get");
   259fe:	f04f 0000 	mov.w	r0, #0
{
   25a02:	460d      	mov	r5, r1
   25a04:	4614      	mov	r4, r2
	LOG_DBG("nct_dc_endpoint_get");
   25a06:	f363 0007 	bfi	r0, r3, #0, #8
   25a0a:	4a0f      	ldr	r2, [pc, #60]	; (25a48 <nct_dc_endpoint_get+0x50>)
   25a0c:	4b0f      	ldr	r3, [pc, #60]	; (25a4c <nct_dc_endpoint_get+0x54>)
   25a0e:	4910      	ldr	r1, [pc, #64]	; (25a50 <nct_dc_endpoint_get+0x58>)
   25a10:	1a9b      	subs	r3, r3, r2
   25a12:	08db      	lsrs	r3, r3, #3
   25a14:	f363 108f 	bfi	r0, r3, #6, #10
   25a18:	4a0e      	ldr	r2, [pc, #56]	; (25a54 <nct_dc_endpoint_get+0x5c>)
   25a1a:	f018 ffa4 	bl	3e966 <log_string_sync>

	tx_endp->ptr = nct.dc_tx_endp.utf8;
   25a1e:	4b0e      	ldr	r3, [pc, #56]	; (25a58 <nct_dc_endpoint_get+0x60>)
   25a20:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
   25a24:	6072      	str	r2, [r6, #4]
	tx_endp->len = nct.dc_tx_endp.size;
   25a26:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
   25a2a:	6032      	str	r2, [r6, #0]

	rx_endp->ptr = nct.dc_rx_endp.utf8;
   25a2c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
   25a30:	606a      	str	r2, [r5, #4]
	rx_endp->len = nct.dc_rx_endp.size;
   25a32:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   25a36:	602a      	str	r2, [r5, #0]

	if (m_endp != NULL) {
   25a38:	b12c      	cbz	r4, 25a46 <nct_dc_endpoint_get+0x4e>
		m_endp->ptr = nct.dc_m_endp.utf8;
   25a3a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
		m_endp->len = nct.dc_m_endp.size;
   25a3e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
		m_endp->ptr = nct.dc_m_endp.utf8;
   25a42:	6062      	str	r2, [r4, #4]
		m_endp->len = nct.dc_m_endp.size;
   25a44:	6023      	str	r3, [r4, #0]
	}
}
   25a46:	bd70      	pop	{r4, r5, r6, pc}
   25a48:	00042314 	.word	0x00042314
   25a4c:	000423e4 	.word	0x000423e4
   25a50:	00046f6e 	.word	0x00046f6e
   25a54:	00046dc3 	.word	0x00046dc3
   25a58:	20023be0 	.word	0x20023be0

00025a5c <nct_dc_connect>:

int nct_dc_connect(void)
{
   25a5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("nct_dc_connect");
   25a5e:	2304      	movs	r3, #4
   25a60:	f04f 0000 	mov.w	r0, #0
   25a64:	4a10      	ldr	r2, [pc, #64]	; (25aa8 <nct_dc_connect+0x4c>)
   25a66:	f363 0007 	bfi	r0, r3, #0, #8
   25a6a:	4b10      	ldr	r3, [pc, #64]	; (25aac <nct_dc_connect+0x50>)
   25a6c:	4910      	ldr	r1, [pc, #64]	; (25ab0 <nct_dc_connect+0x54>)
   25a6e:	1a9b      	subs	r3, r3, r2
   25a70:	08db      	lsrs	r3, r3, #3
   25a72:	f363 108f 	bfi	r0, r3, #6, #10
   25a76:	4a0f      	ldr	r2, [pc, #60]	; (25ab4 <nct_dc_connect+0x58>)
   25a78:	f018 ff75 	bl	3e966 <log_string_sync>

	struct mqtt_topic subscribe_topic = {
		.topic = {
			.utf8 = nct.dc_rx_endp.utf8,
   25a7c:	480e      	ldr	r0, [pc, #56]	; (25ab8 <nct_dc_connect+0x5c>)
		.list = &subscribe_topic,
		.list_count = 1,
		.message_id = NCT_DC_SUBSCRIBE_ID
	};

	return mqtt_subscribe(&nct.client, &subscription_list);
   25a7e:	a901      	add	r1, sp, #4
	struct mqtt_topic subscribe_topic = {
   25a80:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
	return mqtt_subscribe(&nct.client, &subscription_list);
   25a84:	3018      	adds	r0, #24
	struct mqtt_topic subscribe_topic = {
   25a86:	9303      	str	r3, [sp, #12]
   25a88:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   25a8c:	9304      	str	r3, [sp, #16]
   25a8e:	2301      	movs	r3, #1
   25a90:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct mqtt_subscription_list subscription_list = {
   25a94:	ab03      	add	r3, sp, #12
   25a96:	9301      	str	r3, [sp, #4]
   25a98:	4b08      	ldr	r3, [pc, #32]	; (25abc <nct_dc_connect+0x60>)
   25a9a:	9302      	str	r3, [sp, #8]
	return mqtt_subscribe(&nct.client, &subscription_list);
   25a9c:	f019 fd52 	bl	3f544 <mqtt_subscribe>
}
   25aa0:	b007      	add	sp, #28
   25aa2:	f85d fb04 	ldr.w	pc, [sp], #4
   25aa6:	bf00      	nop
   25aa8:	00042314 	.word	0x00042314
   25aac:	000423e4 	.word	0x000423e4
   25ab0:	00046f45 	.word	0x00046f45
   25ab4:	00046dd7 	.word	0x00046dd7
   25ab8:	20023be0 	.word	0x20023be0
   25abc:	223d0001 	.word	0x223d0001

00025ac0 <nct_dc_disconnect>:
{
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
}

int nct_dc_disconnect(void)
{
   25ac0:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("nct_dc_disconnect");
   25ac2:	2304      	movs	r3, #4
   25ac4:	f04f 0000 	mov.w	r0, #0
   25ac8:	4a0c      	ldr	r2, [pc, #48]	; (25afc <nct_dc_disconnect+0x3c>)
   25aca:	f363 0007 	bfi	r0, r3, #0, #8
   25ace:	4b0c      	ldr	r3, [pc, #48]	; (25b00 <nct_dc_disconnect+0x40>)
   25ad0:	490c      	ldr	r1, [pc, #48]	; (25b04 <nct_dc_disconnect+0x44>)
   25ad2:	1a9b      	subs	r3, r3, r2
   25ad4:	08db      	lsrs	r3, r3, #3
   25ad6:	f363 108f 	bfi	r0, r3, #6, #10
   25ada:	4a0b      	ldr	r2, [pc, #44]	; (25b08 <nct_dc_disconnect+0x48>)
   25adc:	f018 ff43 	bl	3e966 <log_string_sync>

	const struct mqtt_subscription_list subscription_list = {
   25ae0:	480a      	ldr	r0, [pc, #40]	; (25b0c <nct_dc_disconnect+0x4c>)
		.list = (struct mqtt_topic *)&nct.dc_rx_endp,
		.list_count = 1,
		.message_id = NCT_DC_SUBSCRIBE_ID
	};

	return mqtt_unsubscribe(&nct.client, &subscription_list);
   25ae2:	4669      	mov	r1, sp
	const struct mqtt_subscription_list subscription_list = {
   25ae4:	f100 03b0 	add.w	r3, r0, #176	; 0xb0
   25ae8:	9300      	str	r3, [sp, #0]
   25aea:	4b09      	ldr	r3, [pc, #36]	; (25b10 <nct_dc_disconnect+0x50>)
	return mqtt_unsubscribe(&nct.client, &subscription_list);
   25aec:	3018      	adds	r0, #24
	const struct mqtt_subscription_list subscription_list = {
   25aee:	9301      	str	r3, [sp, #4]
	return mqtt_unsubscribe(&nct.client, &subscription_list);
   25af0:	f019 fd4f 	bl	3f592 <mqtt_unsubscribe>
}
   25af4:	b003      	add	sp, #12
   25af6:	f85d fb04 	ldr.w	pc, [sp], #4
   25afa:	bf00      	nop
   25afc:	00042314 	.word	0x00042314
   25b00:	000423e4 	.word	0x000423e4
   25b04:	00046f58 	.word	0x00046f58
   25b08:	00046de6 	.word	0x00046de6
   25b0c:	20023be0 	.word	0x20023be0
   25b10:	223d0001 	.word	0x223d0001

00025b14 <nct_disconnect>:

int nct_disconnect(void)
{
   25b14:	b508      	push	{r3, lr}
	LOG_DBG("nct_disconnect");
   25b16:	f04f 0000 	mov.w	r0, #0
   25b1a:	2304      	movs	r3, #4
   25b1c:	4a09      	ldr	r2, [pc, #36]	; (25b44 <nct_disconnect+0x30>)
   25b1e:	f363 0007 	bfi	r0, r3, #0, #8
   25b22:	4b09      	ldr	r3, [pc, #36]	; (25b48 <nct_disconnect+0x34>)
   25b24:	4909      	ldr	r1, [pc, #36]	; (25b4c <nct_disconnect+0x38>)
   25b26:	1a9b      	subs	r3, r3, r2
   25b28:	08db      	lsrs	r3, r3, #3
   25b2a:	f363 108f 	bfi	r0, r3, #6, #10
   25b2e:	4a08      	ldr	r2, [pc, #32]	; (25b50 <nct_disconnect+0x3c>)
   25b30:	f018 ff19 	bl	3e966 <log_string_sync>

	dc_endpoint_free();
   25b34:	f7ff fa82 	bl	2503c <dc_endpoint_free>
	return mqtt_disconnect(&nct.client);
}
   25b38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return mqtt_disconnect(&nct.client);
   25b3c:	4805      	ldr	r0, [pc, #20]	; (25b54 <nct_disconnect+0x40>)
   25b3e:	f019 bcda 	b.w	3f4f6 <mqtt_disconnect>
   25b42:	bf00      	nop
   25b44:	00042314 	.word	0x00042314
   25b48:	000423e4 	.word	0x000423e4
   25b4c:	00046f9e 	.word	0x00046f9e
   25b50:	00046df8 	.word	0x00046df8
   25b54:	20023bf8 	.word	0x20023bf8

00025b58 <nct_process>:

void nct_process(void)
{
   25b58:	b510      	push	{r4, lr}
	mqtt_input(&nct.client);
   25b5a:	4c04      	ldr	r4, [pc, #16]	; (25b6c <nct_process+0x14>)
   25b5c:	4620      	mov	r0, r4
   25b5e:	f019 fd8a 	bl	3f676 <mqtt_input>
	mqtt_live(&nct.client);
   25b62:	4620      	mov	r0, r4
}
   25b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mqtt_live(&nct.client);
   25b68:	f019 bd5e 	b.w	3f628 <mqtt_live>
   25b6c:	20023bf8 	.word	0x20023bf8

00025b70 <nct_socket_get>:

int nct_socket_get(void)
{
	return nct.client.transport.tls.sock;
}
   25b70:	4b01      	ldr	r3, [pc, #4]	; (25b78 <nct_socket_get+0x8>)
   25b72:	6c18      	ldr	r0, [r3, #64]	; 0x40
   25b74:	4770      	bx	lr
   25b76:	bf00      	nop
   25b78:	20023be0 	.word	0x20023be0

00025b7c <setsockopt>:
{
   25b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT_NO_MSG(socket_ops);
   25b80:	4c15      	ldr	r4, [pc, #84]	; (25bd8 <setsockopt+0x5c>)
{
   25b82:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   25b84:	6823      	ldr	r3, [r4, #0]
{
   25b86:	4605      	mov	r5, r0
   25b88:	460e      	mov	r6, r1
   25b8a:	4617      	mov	r7, r2
   25b8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
	__ASSERT_NO_MSG(socket_ops);
   25b90:	b94b      	cbnz	r3, 25ba6 <setsockopt+0x2a>
   25b92:	4912      	ldr	r1, [pc, #72]	; (25bdc <setsockopt+0x60>)
   25b94:	4812      	ldr	r0, [pc, #72]	; (25be0 <setsockopt+0x64>)
   25b96:	2357      	movs	r3, #87	; 0x57
   25b98:	4a12      	ldr	r2, [pc, #72]	; (25be4 <setsockopt+0x68>)
   25b9a:	f018 fec7 	bl	3e92c <printk>
   25b9e:	2157      	movs	r1, #87	; 0x57
   25ba0:	4810      	ldr	r0, [pc, #64]	; (25be4 <setsockopt+0x68>)
   25ba2:	f018 fed0 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->setsockopt);
   25ba6:	6823      	ldr	r3, [r4, #0]
   25ba8:	69db      	ldr	r3, [r3, #28]
   25baa:	b94b      	cbnz	r3, 25bc0 <setsockopt+0x44>
   25bac:	490e      	ldr	r1, [pc, #56]	; (25be8 <setsockopt+0x6c>)
   25bae:	480c      	ldr	r0, [pc, #48]	; (25be0 <setsockopt+0x64>)
   25bb0:	2358      	movs	r3, #88	; 0x58
   25bb2:	4a0c      	ldr	r2, [pc, #48]	; (25be4 <setsockopt+0x68>)
   25bb4:	f018 feba 	bl	3e92c <printk>
   25bb8:	2158      	movs	r1, #88	; 0x58
   25bba:	480a      	ldr	r0, [pc, #40]	; (25be4 <setsockopt+0x68>)
   25bbc:	f018 fec3 	bl	3e946 <assert_post_action>
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   25bc0:	6823      	ldr	r3, [r4, #0]
   25bc2:	f8cd 9020 	str.w	r9, [sp, #32]
   25bc6:	69dc      	ldr	r4, [r3, #28]
   25bc8:	463a      	mov	r2, r7
   25bca:	4643      	mov	r3, r8
   25bcc:	4631      	mov	r1, r6
   25bce:	4628      	mov	r0, r5
   25bd0:	46a4      	mov	ip, r4
}
   25bd2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   25bd6:	4760      	bx	ip
   25bd8:	20023990 	.word	0x20023990
   25bdc:	0004476f 	.word	0x0004476f
   25be0:	00044643 	.word	0x00044643
   25be4:	00044746 	.word	0x00044746
   25be8:	00045e3e 	.word	0x00045e3e

00025bec <close>:
{
   25bec:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   25bee:	4c10      	ldr	r4, [pc, #64]	; (25c30 <close+0x44>)
{
   25bf0:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   25bf2:	6823      	ldr	r3, [r4, #0]
   25bf4:	b94b      	cbnz	r3, 25c0a <close+0x1e>
   25bf6:	490f      	ldr	r1, [pc, #60]	; (25c34 <close+0x48>)
   25bf8:	480f      	ldr	r0, [pc, #60]	; (25c38 <close+0x4c>)
   25bfa:	2321      	movs	r3, #33	; 0x21
   25bfc:	4a0f      	ldr	r2, [pc, #60]	; (25c3c <close+0x50>)
   25bfe:	f018 fe95 	bl	3e92c <printk>
   25c02:	2121      	movs	r1, #33	; 0x21
   25c04:	480d      	ldr	r0, [pc, #52]	; (25c3c <close+0x50>)
   25c06:	f018 fe9e 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   25c0a:	6823      	ldr	r3, [r4, #0]
   25c0c:	685b      	ldr	r3, [r3, #4]
   25c0e:	b94b      	cbnz	r3, 25c24 <close+0x38>
   25c10:	490b      	ldr	r1, [pc, #44]	; (25c40 <close+0x54>)
   25c12:	4809      	ldr	r0, [pc, #36]	; (25c38 <close+0x4c>)
   25c14:	2322      	movs	r3, #34	; 0x22
   25c16:	4a09      	ldr	r2, [pc, #36]	; (25c3c <close+0x50>)
   25c18:	f018 fe88 	bl	3e92c <printk>
   25c1c:	2122      	movs	r1, #34	; 0x22
   25c1e:	4807      	ldr	r0, [pc, #28]	; (25c3c <close+0x50>)
   25c20:	f018 fe91 	bl	3e946 <assert_post_action>
	return socket_ops->close(sock);
   25c24:	6823      	ldr	r3, [r4, #0]
   25c26:	4628      	mov	r0, r5
}
   25c28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   25c2c:	685b      	ldr	r3, [r3, #4]
   25c2e:	4718      	bx	r3
   25c30:	20023990 	.word	0x20023990
   25c34:	0004476f 	.word	0x0004476f
   25c38:	00044643 	.word	0x00044643
   25c3c:	00044746 	.word	0x00044746
   25c40:	00045d6e 	.word	0x00045d6e

00025c44 <get_request_send>:

	return 0;
}

static int get_request_send(struct download_client *client)
{
   25c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int err;
	int len;
	size_t off;

	__ASSERT_NO_MSG(client);
   25c48:	4605      	mov	r5, r0
{
   25c4a:	b087      	sub	sp, #28
	__ASSERT_NO_MSG(client);
   25c4c:	b948      	cbnz	r0, 25c62 <get_request_send+0x1e>
   25c4e:	4954      	ldr	r1, [pc, #336]	; (25da0 <get_request_send+0x15c>)
   25c50:	4854      	ldr	r0, [pc, #336]	; (25da4 <get_request_send+0x160>)
   25c52:	23f2      	movs	r3, #242	; 0xf2
   25c54:	4a54      	ldr	r2, [pc, #336]	; (25da8 <get_request_send+0x164>)
   25c56:	f018 fe69 	bl	3e92c <printk>
   25c5a:	21f2      	movs	r1, #242	; 0xf2
   25c5c:	4852      	ldr	r0, [pc, #328]	; (25da8 <get_request_send+0x164>)
   25c5e:	f018 fe72 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(client->host);
   25c62:	f241 0314 	movw	r3, #4116	; 0x1014
   25c66:	58eb      	ldr	r3, [r5, r3]
   25c68:	b94b      	cbnz	r3, 25c7e <get_request_send+0x3a>
   25c6a:	4950      	ldr	r1, [pc, #320]	; (25dac <get_request_send+0x168>)
   25c6c:	484d      	ldr	r0, [pc, #308]	; (25da4 <get_request_send+0x160>)
   25c6e:	23f3      	movs	r3, #243	; 0xf3
   25c70:	4a4d      	ldr	r2, [pc, #308]	; (25da8 <get_request_send+0x164>)
   25c72:	f018 fe5b 	bl	3e92c <printk>
   25c76:	21f3      	movs	r1, #243	; 0xf3
   25c78:	484b      	ldr	r0, [pc, #300]	; (25da8 <get_request_send+0x164>)
   25c7a:	f018 fe64 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(client->file);
   25c7e:	f241 0318 	movw	r3, #4120	; 0x1018
   25c82:	58eb      	ldr	r3, [r5, r3]
   25c84:	b94b      	cbnz	r3, 25c9a <get_request_send+0x56>
   25c86:	494a      	ldr	r1, [pc, #296]	; (25db0 <get_request_send+0x16c>)
   25c88:	4846      	ldr	r0, [pc, #280]	; (25da4 <get_request_send+0x160>)
   25c8a:	23f4      	movs	r3, #244	; 0xf4
   25c8c:	4a46      	ldr	r2, [pc, #280]	; (25da8 <get_request_send+0x164>)
   25c8e:	f018 fe4d 	bl	3e92c <printk>
   25c92:	21f4      	movs	r1, #244	; 0xf4
   25c94:	4844      	ldr	r0, [pc, #272]	; (25da8 <get_request_send+0x164>)
   25c96:	f018 fe56 	bl	3e946 <assert_post_action>

	/* Offset of last byte in range (Content-Range) */
	off = client->progress + CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE - 1;
   25c9a:	f241 030c 	movw	r3, #4108	; 0x100c

	if (client->file_size != 0) {
   25c9e:	f241 0108 	movw	r1, #4104	; 0x1008
	off = client->progress + CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE - 1;
   25ca2:	58ea      	ldr	r2, [r5, r3]
	if (client->file_size != 0) {
   25ca4:	5869      	ldr	r1, [r5, r1]
	off = client->progress + CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE - 1;
   25ca6:	f602 73ff 	addw	r3, r2, #4095	; 0xfff
	if (client->file_size != 0) {
   25caa:	b111      	cbz	r1, 25cb2 <get_request_send+0x6e>
		/* Don't request bytes past the end of file */
		off = MIN(off, client->file_size);
   25cac:	428b      	cmp	r3, r1
   25cae:	bf28      	it	cs
   25cb0:	460b      	movcs	r3, r1
	}

	len = snprintf(client->buf, CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE,
   25cb2:	e9cd 2301 	strd	r2, r3, [sp, #4]
   25cb6:	f241 0314 	movw	r3, #4116	; 0x1014
   25cba:	58eb      	ldr	r3, [r5, r3]
   25cbc:	f105 0904 	add.w	r9, r5, #4
   25cc0:	9300      	str	r3, [sp, #0]
   25cc2:	f241 0318 	movw	r3, #4120	; 0x1018
   25cc6:	4a3b      	ldr	r2, [pc, #236]	; (25db4 <get_request_send+0x170>)
   25cc8:	58eb      	ldr	r3, [r5, r3]
   25cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   25cce:	4648      	mov	r0, r9
   25cd0:	f016 fe66 	bl	3c9a0 <sniprintf>
		       GET_TEMPLATE, client->file, client->host,
		       client->progress, off);

	if (len < 0 || len > CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE) {
   25cd4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	len = snprintf(client->buf, CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE,
   25cd8:	4604      	mov	r4, r0
	if (len < 0 || len > CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE) {
   25cda:	d945      	bls.n	25d68 <get_request_send+0x124>
		LOG_ERR("Cannot create GET request, buffer too small");
   25cdc:	2301      	movs	r3, #1
   25cde:	f04f 0000 	mov.w	r0, #0
   25ce2:	4a35      	ldr	r2, [pc, #212]	; (25db8 <get_request_send+0x174>)
   25ce4:	f363 0007 	bfi	r0, r3, #0, #8
   25ce8:	4b34      	ldr	r3, [pc, #208]	; (25dbc <get_request_send+0x178>)
   25cea:	4935      	ldr	r1, [pc, #212]	; (25dc0 <get_request_send+0x17c>)
   25cec:	1a9b      	subs	r3, r3, r2
   25cee:	08db      	lsrs	r3, r3, #3
   25cf0:	f363 108f 	bfi	r0, r3, #6, #10
   25cf4:	f018 fe37 	bl	3e966 <log_string_sync>
		return -ENOMEM;
   25cf8:	f06f 000b 	mvn.w	r0, #11
		LOG_ERR("Failed to send HTTP request, errno %d", errno);
		return err;
	}

	return 0;
}
   25cfc:	b007      	add	sp, #28
   25cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sent = send(client->fd, client->buf + off, len, 0);
   25d02:	9b05      	ldr	r3, [sp, #20]
   25d04:	f8d5 a000 	ldr.w	sl, [r5]
   25d08:	eb09 0b03 	add.w	fp, r9, r3
	__ASSERT_NO_MSG(socket_ops);
   25d0c:	f8d8 3000 	ldr.w	r3, [r8]
   25d10:	b94b      	cbnz	r3, 25d26 <get_request_send+0xe2>
   25d12:	492c      	ldr	r1, [pc, #176]	; (25dc4 <get_request_send+0x180>)
   25d14:	4823      	ldr	r0, [pc, #140]	; (25da4 <get_request_send+0x160>)
   25d16:	237e      	movs	r3, #126	; 0x7e
   25d18:	4632      	mov	r2, r6
   25d1a:	f018 fe07 	bl	3e92c <printk>
   25d1e:	217e      	movs	r1, #126	; 0x7e
   25d20:	4630      	mov	r0, r6
   25d22:	f018 fe10 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   25d26:	f8d8 3000 	ldr.w	r3, [r8]
   25d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   25d2c:	b94b      	cbnz	r3, 25d42 <get_request_send+0xfe>
   25d2e:	4926      	ldr	r1, [pc, #152]	; (25dc8 <get_request_send+0x184>)
   25d30:	481c      	ldr	r0, [pc, #112]	; (25da4 <get_request_send+0x160>)
   25d32:	237f      	movs	r3, #127	; 0x7f
   25d34:	4632      	mov	r2, r6
   25d36:	f018 fdf9 	bl	3e92c <printk>
   25d3a:	217f      	movs	r1, #127	; 0x7f
   25d3c:	4630      	mov	r0, r6
   25d3e:	f018 fe02 	bl	3e946 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   25d42:	f8d8 3000 	ldr.w	r3, [r8]
   25d46:	4622      	mov	r2, r4
   25d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   25d4a:	4659      	mov	r1, fp
   25d4c:	461f      	mov	r7, r3
   25d4e:	4650      	mov	r0, sl
   25d50:	2300      	movs	r3, #0
   25d52:	47b8      	blx	r7
		if (sent <= 0) {
   25d54:	2800      	cmp	r0, #0
   25d56:	dd0d      	ble.n	25d74 <get_request_send+0x130>
		off += sent;
   25d58:	9b05      	ldr	r3, [sp, #20]
		len -= sent;
   25d5a:	1a24      	subs	r4, r4, r0
		off += sent;
   25d5c:	4403      	add	r3, r0
   25d5e:	9305      	str	r3, [sp, #20]
	while (len) {
   25d60:	2c00      	cmp	r4, #0
   25d62:	d1ce      	bne.n	25d02 <get_request_send+0xbe>
	return 0;
   25d64:	4620      	mov	r0, r4
   25d66:	e7c9      	b.n	25cfc <get_request_send+0xb8>
	size_t off = 0;
   25d68:	2300      	movs	r3, #0
	__ASSERT_NO_MSG(socket_ops);
   25d6a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 25dd4 <get_request_send+0x190>
   25d6e:	9305      	str	r3, [sp, #20]
   25d70:	4e16      	ldr	r6, [pc, #88]	; (25dcc <get_request_send+0x188>)
   25d72:	e7f5      	b.n	25d60 <get_request_send+0x11c>
		LOG_ERR("Failed to send HTTP request, errno %d", errno);
   25d74:	2301      	movs	r3, #1
   25d76:	f04f 0400 	mov.w	r4, #0
   25d7a:	4a0f      	ldr	r2, [pc, #60]	; (25db8 <get_request_send+0x174>)
   25d7c:	f363 0407 	bfi	r4, r3, #0, #8
   25d80:	4b0e      	ldr	r3, [pc, #56]	; (25dbc <get_request_send+0x178>)
   25d82:	1a9b      	subs	r3, r3, r2
   25d84:	08db      	lsrs	r3, r3, #3
   25d86:	f363 148f 	bfi	r4, r3, #6, #10
   25d8a:	f018 ffc2 	bl	3ed12 <__errno>
   25d8e:	4910      	ldr	r1, [pc, #64]	; (25dd0 <get_request_send+0x18c>)
   25d90:	6802      	ldr	r2, [r0, #0]
   25d92:	4620      	mov	r0, r4
   25d94:	f018 fde7 	bl	3e966 <log_string_sync>
			return -EIO;
   25d98:	f06f 0004 	mvn.w	r0, #4
		return err;
   25d9c:	e7ae      	b.n	25cfc <get_request_send+0xb8>
   25d9e:	bf00      	nop
   25da0:	0004777c 	.word	0x0004777c
   25da4:	00044643 	.word	0x00044643
   25da8:	0004764d 	.word	0x0004764d
   25dac:	000476ad 	.word	0x000476ad
   25db0:	000476ba 	.word	0x000476ba
   25db4:	000476c7 	.word	0x000476c7
   25db8:	00042314 	.word	0x00042314
   25dbc:	0004236c 	.word	0x0004236c
   25dc0:	00047712 	.word	0x00047712
   25dc4:	0004476f 	.word	0x0004476f
   25dc8:	00045db8 	.word	0x00045db8
   25dcc:	00044746 	.word	0x00044746
   25dd0:	0004773e 	.word	0x0004773e
   25dd4:	20023990 	.word	0x20023990

00025dd8 <download_client_init>:
	goto restart_and_suspend;
}

int download_client_init(struct download_client *const client,
			 download_client_callback_t callback)
{
   25dd8:	b530      	push	{r4, r5, lr}
	if (client == NULL || callback == NULL) {
   25dda:	4605      	mov	r5, r0
{
   25ddc:	b087      	sub	sp, #28
	if (client == NULL || callback == NULL) {
   25dde:	b1f8      	cbz	r0, 25e20 <download_client_init+0x48>
   25de0:	b1f1      	cbz	r1, 25e20 <download_client_init+0x48>
		return -EINVAL;
	}

	client->fd = -1;
   25de2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25de6:	6003      	str	r3, [r0, #0]
	client->callback = callback;
   25de8:	f242 03d8 	movw	r3, #8408	; 0x20d8
   25dec:	50c1      	str	r1, [r0, r3]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   25dee:	2400      	movs	r4, #0
   25df0:	230e      	movs	r3, #14
   25df2:	e9cd 0400 	strd	r0, r4, [sp]
   25df6:	f500 5186 	add.w	r1, r0, #4288	; 0x10c0
   25dfa:	f500 5081 	add.w	r0, r0, #4128	; 0x1020
   25dfe:	e9cd 4302 	strd	r4, r3, [sp, #8]
   25e02:	e9cd 4404 	strd	r4, r4, [sp, #16]
   25e06:	4b08      	ldr	r3, [pc, #32]	; (25e28 <download_client_init+0x50>)
   25e08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   25e0c:	3118      	adds	r1, #24
   25e0e:	3008      	adds	r0, #8
   25e10:	f014 fc5a 	bl	3a6c8 <z_impl_k_thread_create>

	/* The thread is spawned now, but it will suspend itself;
	 * it is resumed when the download is started via the API.
	 */
	client->tid =
   25e14:	f241 0324 	movw	r3, #4132	; 0x1024
   25e18:	50e8      	str	r0, [r5, r3]
		k_thread_create(&client->thread, client->thread_stack,
				K_THREAD_STACK_SIZEOF(client->thread_stack),
				download_thread, client, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);

	return 0;
   25e1a:	4620      	mov	r0, r4
}
   25e1c:	b007      	add	sp, #28
   25e1e:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   25e20:	f06f 0015 	mvn.w	r0, #21
   25e24:	e7fa      	b.n	25e1c <download_client_init+0x44>
   25e26:	bf00      	nop
   25e28:	00026241 	.word	0x00026241

00025e2c <download_client_connect>:

int download_client_connect(struct download_client *client, const char *host,
			    const struct download_client_cfg *config)
{
   25e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25e30:	b0a1      	sub	sp, #132	; 0x84
   25e32:	9104      	str	r1, [sp, #16]
   25e34:	4690      	mov	r8, r2
	int err;

	if (client == NULL || host == NULL || config == NULL) {
   25e36:	4606      	mov	r6, r0
   25e38:	b928      	cbnz	r0, 25e46 <download_client_connect+0x1a>
		client->fd =
			resolve_and_connect(AF_INET, host, config);
	}

	if (client->fd < 0) {
		return -EINVAL;
   25e3a:	f06f 0715 	mvn.w	r7, #21
	if (err) {
		return err;
	}

	return 0;
}
   25e3e:	4638      	mov	r0, r7
   25e40:	b021      	add	sp, #132	; 0x84
   25e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (client == NULL || host == NULL || config == NULL) {
   25e46:	9b04      	ldr	r3, [sp, #16]
   25e48:	2b00      	cmp	r3, #0
   25e4a:	d0f6      	beq.n	25e3a <download_client_connect+0xe>
   25e4c:	2a00      	cmp	r2, #0
   25e4e:	d0f4      	beq.n	25e3a <download_client_connect+0xe>
		if (config->sec_tag != -1) {
   25e50:	6813      	ldr	r3, [r2, #0]
   25e52:	3301      	adds	r3, #1
   25e54:	d1f1      	bne.n	25e3a <download_client_connect+0xe>
	if (client->fd != -1) {
   25e56:	6807      	ldr	r7, [r0, #0]
   25e58:	1c7b      	adds	r3, r7, #1
   25e5a:	f040 8170 	bne.w	2613e <download_client_connect+0x312>
	struct addrinfo hints = {
   25e5e:	2220      	movs	r2, #32
   25e60:	2100      	movs	r1, #0
   25e62:	eb0d 0002 	add.w	r0, sp, r2
   25e66:	f01a ff9b 	bl	40da0 <memset>
   25e6a:	2301      	movs	r3, #1
   25e6c:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   25e70:	2306      	movs	r3, #6
	__ASSERT_NO_MSG(socket_ops);
   25e72:	4cb4      	ldr	r4, [pc, #720]	; (26144 <download_client_connect+0x318>)
   25e74:	930b      	str	r3, [sp, #44]	; 0x2c
   25e76:	f8d8 3004 	ldr.w	r3, [r8, #4]
   25e7a:	930e      	str	r3, [sp, #56]	; 0x38
   25e7c:	6823      	ldr	r3, [r4, #0]
   25e7e:	b94b      	cbnz	r3, 25e94 <download_client_connect+0x68>
   25e80:	49b1      	ldr	r1, [pc, #708]	; (26148 <download_client_connect+0x31c>)
   25e82:	48b2      	ldr	r0, [pc, #712]	; (2614c <download_client_connect+0x320>)
   25e84:	2393      	movs	r3, #147	; 0x93
   25e86:	4ab2      	ldr	r2, [pc, #712]	; (26150 <download_client_connect+0x324>)
   25e88:	f018 fd50 	bl	3e92c <printk>
   25e8c:	2193      	movs	r1, #147	; 0x93
   25e8e:	48b0      	ldr	r0, [pc, #704]	; (26150 <download_client_connect+0x324>)
   25e90:	f018 fd59 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);
   25e94:	6823      	ldr	r3, [r4, #0]
   25e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   25e98:	b94b      	cbnz	r3, 25eae <download_client_connect+0x82>
   25e9a:	49ae      	ldr	r1, [pc, #696]	; (26154 <download_client_connect+0x328>)
   25e9c:	48ab      	ldr	r0, [pc, #684]	; (2614c <download_client_connect+0x320>)
   25e9e:	2394      	movs	r3, #148	; 0x94
   25ea0:	4aab      	ldr	r2, [pc, #684]	; (26150 <download_client_connect+0x324>)
   25ea2:	f018 fd43 	bl	3e92c <printk>
   25ea6:	2194      	movs	r1, #148	; 0x94
   25ea8:	48a9      	ldr	r0, [pc, #676]	; (26150 <download_client_connect+0x324>)
   25eaa:	f018 fd4c 	bl	3e946 <assert_post_action>
	return socket_ops->getaddrinfo(node, service, hints, res);
   25eae:	6823      	ldr	r3, [r4, #0]
   25eb0:	aa08      	add	r2, sp, #32
   25eb2:	6b5d      	ldr	r5, [r3, #52]	; 0x34
   25eb4:	2100      	movs	r1, #0
   25eb6:	ab07      	add	r3, sp, #28
   25eb8:	9804      	ldr	r0, [sp, #16]
   25eba:	47a8      	blx	r5
	if (err) {
   25ebc:	4da6      	ldr	r5, [pc, #664]	; (26158 <download_client_connect+0x32c>)
   25ebe:	4ba7      	ldr	r3, [pc, #668]	; (2615c <download_client_connect+0x330>)
   25ec0:	1aed      	subs	r5, r5, r3
   25ec2:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   25ec6:	b198      	cbz	r0, 25ef0 <download_client_connect+0xc4>
		LOG_WRN("Failed to resolve hostname %s on %s", log_strdup(host),
   25ec8:	2302      	movs	r3, #2
   25eca:	f04f 0400 	mov.w	r4, #0
   25ece:	9804      	ldr	r0, [sp, #16]
   25ed0:	f363 0407 	bfi	r4, r3, #0, #8
   25ed4:	f018 fd59 	bl	3e98a <log_strdup>
   25ed8:	f365 148f 	bfi	r4, r5, #6, #10
   25edc:	4602      	mov	r2, r0
   25ede:	4ba0      	ldr	r3, [pc, #640]	; (26160 <download_client_connect+0x334>)
   25ee0:	49a0      	ldr	r1, [pc, #640]	; (26164 <download_client_connect+0x338>)
   25ee2:	4620      	mov	r0, r4
   25ee4:	f018 fd3f 	bl	3e966 <log_string_sync>
		client->fd =
   25ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25eec:	6033      	str	r3, [r6, #0]
   25eee:	e7a4      	b.n	25e3a <download_client_connect+0xe>
	LOG_INF("Attempting to connect over %s",
   25ef0:	2303      	movs	r3, #3
   25ef2:	f04f 0a00 	mov.w	sl, #0
   25ef6:	489a      	ldr	r0, [pc, #616]	; (26160 <download_client_connect+0x334>)
   25ef8:	f363 0a07 	bfi	sl, r3, #0, #8
   25efc:	f018 fd45 	bl	3e98a <log_strdup>
   25f00:	f365 1a8f 	bfi	sl, r5, #6, #10
   25f04:	4602      	mov	r2, r0
   25f06:	4998      	ldr	r1, [pc, #608]	; (26168 <download_client_connect+0x33c>)
   25f08:	4650      	mov	r0, sl
   25f0a:	f018 fd2c 	bl	3e966 <log_string_sync>
	__ASSERT_NO_MSG(socket_ops);
   25f0e:	6823      	ldr	r3, [r4, #0]
   25f10:	b94b      	cbnz	r3, 25f26 <download_client_connect+0xfa>
   25f12:	498d      	ldr	r1, [pc, #564]	; (26148 <download_client_connect+0x31c>)
   25f14:	488d      	ldr	r0, [pc, #564]	; (2614c <download_client_connect+0x320>)
   25f16:	2319      	movs	r3, #25
   25f18:	4a8d      	ldr	r2, [pc, #564]	; (26150 <download_client_connect+0x324>)
   25f1a:	f018 fd07 	bl	3e92c <printk>
   25f1e:	2119      	movs	r1, #25
   25f20:	488b      	ldr	r0, [pc, #556]	; (26150 <download_client_connect+0x324>)
   25f22:	f018 fd10 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   25f26:	6823      	ldr	r3, [r4, #0]
   25f28:	681b      	ldr	r3, [r3, #0]
   25f2a:	b94b      	cbnz	r3, 25f40 <download_client_connect+0x114>
   25f2c:	498f      	ldr	r1, [pc, #572]	; (2616c <download_client_connect+0x340>)
   25f2e:	4887      	ldr	r0, [pc, #540]	; (2614c <download_client_connect+0x320>)
   25f30:	231a      	movs	r3, #26
   25f32:	4a87      	ldr	r2, [pc, #540]	; (26150 <download_client_connect+0x324>)
   25f34:	f018 fcfa 	bl	3e92c <printk>
   25f38:	211a      	movs	r1, #26
   25f3a:	4885      	ldr	r0, [pc, #532]	; (26150 <download_client_connect+0x324>)
   25f3c:	f018 fd03 	bl	3e946 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   25f40:	2101      	movs	r1, #1
   25f42:	6823      	ldr	r3, [r4, #0]
   25f44:	2206      	movs	r2, #6
   25f46:	681b      	ldr	r3, [r3, #0]
   25f48:	4608      	mov	r0, r1
   25f4a:	4798      	blx	r3
	if (fd < 0) {
   25f4c:	1e03      	subs	r3, r0, #0
   25f4e:	9303      	str	r3, [sp, #12]
   25f50:	da34      	bge.n	25fbc <download_client_connect+0x190>
		LOG_ERR("Failed to create socket, errno %d", errno);
   25f52:	2301      	movs	r3, #1
   25f54:	f04f 0700 	mov.w	r7, #0
   25f58:	f363 0707 	bfi	r7, r3, #0, #8
   25f5c:	f018 fed9 	bl	3ed12 <__errno>
   25f60:	f365 178f 	bfi	r7, r5, #6, #10
   25f64:	6802      	ldr	r2, [r0, #0]
   25f66:	4982      	ldr	r1, [pc, #520]	; (26170 <download_client_connect+0x344>)
   25f68:	4638      	mov	r0, r7
   25f6a:	f018 fcfc 	bl	3e966 <log_string_sync>
	err = getaddrinfo(host, NULL, &hints, &info);
   25f6e:	2700      	movs	r7, #0
	__ASSERT_NO_MSG(socket_ops);
   25f70:	6823      	ldr	r3, [r4, #0]
	freeaddrinfo(info);
   25f72:	f8dd 901c 	ldr.w	r9, [sp, #28]
   25f76:	b94b      	cbnz	r3, 25f8c <download_client_connect+0x160>
   25f78:	4973      	ldr	r1, [pc, #460]	; (26148 <download_client_connect+0x31c>)
   25f7a:	4874      	ldr	r0, [pc, #464]	; (2614c <download_client_connect+0x320>)
   25f7c:	239b      	movs	r3, #155	; 0x9b
   25f7e:	4a74      	ldr	r2, [pc, #464]	; (26150 <download_client_connect+0x324>)
   25f80:	f018 fcd4 	bl	3e92c <printk>
   25f84:	219b      	movs	r1, #155	; 0x9b
   25f86:	4872      	ldr	r0, [pc, #456]	; (26150 <download_client_connect+0x324>)
   25f88:	f018 fcdd 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);
   25f8c:	6823      	ldr	r3, [r4, #0]
   25f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   25f90:	b94b      	cbnz	r3, 25fa6 <download_client_connect+0x17a>
   25f92:	4978      	ldr	r1, [pc, #480]	; (26174 <download_client_connect+0x348>)
   25f94:	486d      	ldr	r0, [pc, #436]	; (2614c <download_client_connect+0x320>)
   25f96:	239c      	movs	r3, #156	; 0x9c
   25f98:	4a6d      	ldr	r2, [pc, #436]	; (26150 <download_client_connect+0x324>)
   25f9a:	f018 fcc7 	bl	3e92c <printk>
   25f9e:	219c      	movs	r1, #156	; 0x9c
   25fa0:	486b      	ldr	r0, [pc, #428]	; (26150 <download_client_connect+0x324>)
   25fa2:	f018 fcd0 	bl	3e946 <assert_post_action>
	return socket_ops->freeaddrinfo(res);
   25fa6:	6823      	ldr	r3, [r4, #0]
   25fa8:	4648      	mov	r0, r9
   25faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   25fac:	4798      	blx	r3
	if (err) {
   25fae:	2f00      	cmp	r7, #0
   25fb0:	f000 80a5 	beq.w	260fe <download_client_connect+0x2d2>
		close(fd);
   25fb4:	9803      	ldr	r0, [sp, #12]
   25fb6:	f7ff fe19 	bl	25bec <close>
   25fba:	e795      	b.n	25ee8 <download_client_connect+0xbc>
	if (cfg->apn != NULL) {
   25fbc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   25fc0:	2800      	cmp	r0, #0
   25fc2:	d052      	beq.n	2606a <download_client_connect+0x23e>
		LOG_INF("Setting up APN: %s", log_strdup(cfg->apn));
   25fc4:	2303      	movs	r3, #3
   25fc6:	f04f 0a00 	mov.w	sl, #0
   25fca:	f363 0a07 	bfi	sl, r3, #0, #8
   25fce:	f018 fcdc 	bl	3e98a <log_strdup>
   25fd2:	f365 1a8f 	bfi	sl, r5, #6, #10
   25fd6:	4602      	mov	r2, r0
   25fd8:	4967      	ldr	r1, [pc, #412]	; (26178 <download_client_connect+0x34c>)
   25fda:	4650      	mov	r0, sl
   25fdc:	f018 fcc3 	bl	3e966 <log_string_sync>
	struct ifreq ifr = {0};
   25fe0:	2240      	movs	r2, #64	; 0x40
		err = socket_apn_set(fd, cfg->apn);
   25fe2:	f8d8 b004 	ldr.w	fp, [r8, #4]
	struct ifreq ifr = {0};
   25fe6:	2100      	movs	r1, #0
   25fe8:	eb0d 0002 	add.w	r0, sp, r2
   25fec:	f01a fed8 	bl	40da0 <memset>
	__ASSERT_NO_MSG(apn);
   25ff0:	f1bb 0f00 	cmp.w	fp, #0
   25ff4:	d109      	bne.n	2600a <download_client_connect+0x1de>
   25ff6:	4961      	ldr	r1, [pc, #388]	; (2617c <download_client_connect+0x350>)
   25ff8:	4854      	ldr	r0, [pc, #336]	; (2614c <download_client_connect+0x320>)
   25ffa:	2362      	movs	r3, #98	; 0x62
   25ffc:	4a60      	ldr	r2, [pc, #384]	; (26180 <download_client_connect+0x354>)
   25ffe:	f018 fc95 	bl	3e92c <printk>
   26002:	2162      	movs	r1, #98	; 0x62
   26004:	485e      	ldr	r0, [pc, #376]	; (26180 <download_client_connect+0x354>)
   26006:	f018 fc9e 	bl	3e946 <assert_post_action>
	len = strlen(apn);
   2600a:	4658      	mov	r0, fp
   2600c:	f7f3 ffba 	bl	19f84 <strlen>
	if (len >= sizeof(ifr.ifr_name)) {
   26010:	283f      	cmp	r0, #63	; 0x3f
	len = strlen(apn);
   26012:	4682      	mov	sl, r0
	if (len >= sizeof(ifr.ifr_name)) {
   26014:	d90a      	bls.n	2602c <download_client_connect+0x200>
		LOG_ERR("Access point name is too long.");
   26016:	2301      	movs	r3, #1
   26018:	f04f 0000 	mov.w	r0, #0
   2601c:	f363 0007 	bfi	r0, r3, #0, #8
   26020:	f365 108f 	bfi	r0, r5, #6, #10
   26024:	4957      	ldr	r1, [pc, #348]	; (26184 <download_client_connect+0x358>)
   26026:	f018 fc9e 	bl	3e966 <log_string_sync>
		if (err) {
   2602a:	e7a1      	b.n	25f70 <download_client_connect+0x144>
	memcpy(ifr.ifr_name, apn, len);
   2602c:	2340      	movs	r3, #64	; 0x40
   2602e:	4602      	mov	r2, r0
   26030:	4659      	mov	r1, fp
   26032:	eb0d 0003 	add.w	r0, sp, r3
   26036:	f01a fea0 	bl	40d7a <__memcpy_chk>
	err = setsockopt(fd, SOL_SOCKET, SO_BINDTODEVICE, &ifr, len);
   2603a:	f8cd a000 	str.w	sl, [sp]
   2603e:	ab10      	add	r3, sp, #64	; 0x40
   26040:	2219      	movs	r2, #25
   26042:	2101      	movs	r1, #1
   26044:	9803      	ldr	r0, [sp, #12]
   26046:	f7ff fd99 	bl	25b7c <setsockopt>
	if (err) {
   2604a:	b170      	cbz	r0, 2606a <download_client_connect+0x23e>
		LOG_ERR("Failed to bind socket, errno %d", errno);
   2604c:	2301      	movs	r3, #1
   2604e:	f04f 0900 	mov.w	r9, #0
   26052:	f363 0907 	bfi	r9, r3, #0, #8
   26056:	f018 fe5c 	bl	3ed12 <__errno>
   2605a:	f365 198f 	bfi	r9, r5, #6, #10
   2605e:	6802      	ldr	r2, [r0, #0]
   26060:	4949      	ldr	r1, [pc, #292]	; (26188 <download_client_connect+0x35c>)
   26062:	4648      	mov	r0, r9
   26064:	f018 fc7f 	bl	3e966 <log_string_sync>
		if (err) {
   26068:	e782      	b.n	25f70 <download_client_connect+0x144>
	for (addr = info; addr != NULL; addr = addr->ai_next) {
   2606a:	f8dd a01c 	ldr.w	sl, [sp, #28]
	__ASSERT_NO_MSG(socket_ops);
   2606e:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 26150 <download_client_connect+0x324>
   26072:	f1ba 0f00 	cmp.w	sl, #0
   26076:	f43f af7b 	beq.w	25f70 <download_client_connect+0x144>
		struct sockaddr * const sa = addr->ai_addr;
   2607a:	f8da 7014 	ldr.w	r7, [sl, #20]
		switch (sa->sa_family) {
   2607e:	883b      	ldrh	r3, [r7, #0]
   26080:	2b01      	cmp	r3, #1
   26082:	d001      	beq.n	26088 <download_client_connect+0x25c>
   26084:	2b02      	cmp	r3, #2
   26086:	d102      	bne.n	2608e <download_client_connect+0x262>
			((struct sockaddr_in *)sa)->sin_port = port;
   26088:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
   2608c:	807b      	strh	r3, [r7, #2]
		err = connect(fd, sa, addr->ai_addrlen);
   2608e:	f8da 3010 	ldr.w	r3, [sl, #16]
   26092:	9305      	str	r3, [sp, #20]
   26094:	6823      	ldr	r3, [r4, #0]
   26096:	b94b      	cbnz	r3, 260ac <download_client_connect+0x280>
   26098:	492b      	ldr	r1, [pc, #172]	; (26148 <download_client_connect+0x31c>)
   2609a:	482c      	ldr	r0, [pc, #176]	; (2614c <download_client_connect+0x320>)
   2609c:	2345      	movs	r3, #69	; 0x45
   2609e:	465a      	mov	r2, fp
   260a0:	f018 fc44 	bl	3e92c <printk>
   260a4:	2145      	movs	r1, #69	; 0x45
   260a6:	4658      	mov	r0, fp
   260a8:	f018 fc4d 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->connect);
   260ac:	6823      	ldr	r3, [r4, #0]
   260ae:	695b      	ldr	r3, [r3, #20]
   260b0:	b94b      	cbnz	r3, 260c6 <download_client_connect+0x29a>
   260b2:	4936      	ldr	r1, [pc, #216]	; (2618c <download_client_connect+0x360>)
   260b4:	4825      	ldr	r0, [pc, #148]	; (2614c <download_client_connect+0x320>)
   260b6:	2346      	movs	r3, #70	; 0x46
   260b8:	465a      	mov	r2, fp
   260ba:	f018 fc37 	bl	3e92c <printk>
   260be:	2146      	movs	r1, #70	; 0x46
   260c0:	4658      	mov	r0, fp
   260c2:	f018 fc40 	bl	3e946 <assert_post_action>
	return socket_ops->connect(sock, addr, addrlen);
   260c6:	6823      	ldr	r3, [r4, #0]
   260c8:	4639      	mov	r1, r7
   260ca:	695b      	ldr	r3, [r3, #20]
   260cc:	9a05      	ldr	r2, [sp, #20]
   260ce:	9803      	ldr	r0, [sp, #12]
   260d0:	4798      	blx	r3
		if (err) {
   260d2:	4607      	mov	r7, r0
   260d4:	2800      	cmp	r0, #0
   260d6:	f43f af4b 	beq.w	25f70 <download_client_connect+0x144>
			LOG_ERR("Unable to connect, errno %d", errno);
   260da:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   260de:	f043 0301 	orr.w	r3, r3, #1
   260e2:	f363 0907 	bfi	r9, r3, #0, #8
   260e6:	f018 fe14 	bl	3ed12 <__errno>
   260ea:	f365 198f 	bfi	r9, r5, #6, #10
   260ee:	6802      	ldr	r2, [r0, #0]
   260f0:	4927      	ldr	r1, [pc, #156]	; (26190 <download_client_connect+0x364>)
   260f2:	4648      	mov	r0, r9
   260f4:	f018 fc37 	bl	3e966 <log_string_sync>
	for (addr = info; addr != NULL; addr = addr->ai_next) {
   260f8:	f8da a01c 	ldr.w	sl, [sl, #28]
   260fc:	e7b9      	b.n	26072 <download_client_connect+0x246>
		client->fd =
   260fe:	9b03      	ldr	r3, [sp, #12]
	if (client->fd < 0) {
   26100:	2b00      	cmp	r3, #0
		client->fd =
   26102:	6033      	str	r3, [r6, #0]
	if (client->fd < 0) {
   26104:	f6ff ae99 	blt.w	25e3a <download_client_connect+0xe>
	client->config = *config;
   26108:	e898 0003 	ldmia.w	r8, {r0, r1}
	client->host = host;
   2610c:	f241 0314 	movw	r3, #4116	; 0x1014
   26110:	9a04      	ldr	r2, [sp, #16]
	LOG_INF("Connected to %s", log_strdup(host));
   26112:	f04f 0400 	mov.w	r4, #0
	client->host = host;
   26116:	50f2      	str	r2, [r6, r3]
	LOG_INF("Connected to %s", log_strdup(host));
   26118:	2303      	movs	r3, #3
	client->config = *config;
   2611a:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
   2611e:	361c      	adds	r6, #28
   26120:	e886 0003 	stmia.w	r6, {r0, r1}
	LOG_INF("Connected to %s", log_strdup(host));
   26124:	4610      	mov	r0, r2
   26126:	f363 0407 	bfi	r4, r3, #0, #8
   2612a:	f018 fc2e 	bl	3e98a <log_strdup>
   2612e:	f365 148f 	bfi	r4, r5, #6, #10
   26132:	4602      	mov	r2, r0
   26134:	4917      	ldr	r1, [pc, #92]	; (26194 <download_client_connect+0x368>)
   26136:	4620      	mov	r0, r4
   26138:	f018 fc15 	bl	3e966 <log_string_sync>
	if (err) {
   2613c:	e67f      	b.n	25e3e <download_client_connect+0x12>
		return 0;
   2613e:	2700      	movs	r7, #0
   26140:	e67d      	b.n	25e3e <download_client_connect+0x12>
   26142:	bf00      	nop
   26144:	20023990 	.word	0x20023990
   26148:	0004476f 	.word	0x0004476f
   2614c:	00044643 	.word	0x00044643
   26150:	00044746 	.word	0x00044746
   26154:	00046ebb 	.word	0x00046ebb
   26158:	0004236c 	.word	0x0004236c
   2615c:	00042314 	.word	0x00042314
   26160:	00047345 	.word	0x00047345
   26164:	0004734a 	.word	0x0004734a
   26168:	0004736e 	.word	0x0004736e
   2616c:	00045d80 	.word	0x00045d80
   26170:	0004738c 	.word	0x0004738c
   26174:	00046f2c 	.word	0x00046f2c
   26178:	000473ae 	.word	0x000473ae
   2617c:	000473c1 	.word	0x000473c1
   26180:	0004764d 	.word	0x0004764d
   26184:	000473c5 	.word	0x000473c5
   26188:	000473e4 	.word	0x000473e4
   2618c:	00045d93 	.word	0x00045d93
   26190:	00047404 	.word	0x00047404
   26194:	00047420 	.word	0x00047420

00026198 <download_client_disconnect>:

int download_client_disconnect(struct download_client *const client)
{
   26198:	b510      	push	{r4, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   2619a:	4604      	mov	r4, r0
   2619c:	b300      	cbz	r0, 261e0 <download_client_disconnect+0x48>
   2619e:	6800      	ldr	r0, [r0, #0]
   261a0:	2800      	cmp	r0, #0
   261a2:	db1d      	blt.n	261e0 <download_client_disconnect+0x48>
		return -EINVAL;
	}

	err = close(client->fd);
   261a4:	f7ff fd22 	bl	25bec <close>
	if (err) {
   261a8:	b1b0      	cbz	r0, 261d8 <download_client_disconnect+0x40>
		LOG_ERR("Failed to close socket, errno %d", errno);
   261aa:	2301      	movs	r3, #1
   261ac:	f04f 0400 	mov.w	r4, #0
   261b0:	4a0d      	ldr	r2, [pc, #52]	; (261e8 <download_client_disconnect+0x50>)
   261b2:	f363 0407 	bfi	r4, r3, #0, #8
   261b6:	4b0d      	ldr	r3, [pc, #52]	; (261ec <download_client_disconnect+0x54>)
   261b8:	1a9b      	subs	r3, r3, r2
   261ba:	08db      	lsrs	r3, r3, #3
   261bc:	f363 148f 	bfi	r4, r3, #6, #10
   261c0:	f018 fda7 	bl	3ed12 <__errno>
   261c4:	490a      	ldr	r1, [pc, #40]	; (261f0 <download_client_disconnect+0x58>)
   261c6:	6802      	ldr	r2, [r0, #0]
   261c8:	4620      	mov	r0, r4
   261ca:	f018 fbcc 	bl	3e966 <log_string_sync>
		return -errno;
   261ce:	f018 fda0 	bl	3ed12 <__errno>
   261d2:	6800      	ldr	r0, [r0, #0]
   261d4:	4240      	negs	r0, r0
	}

	client->fd = -1;

	return 0;
}
   261d6:	bd10      	pop	{r4, pc}
	client->fd = -1;
   261d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   261dc:	6023      	str	r3, [r4, #0]
	return 0;
   261de:	e7fa      	b.n	261d6 <download_client_disconnect+0x3e>
		return -EINVAL;
   261e0:	f06f 0015 	mvn.w	r0, #21
   261e4:	e7f7      	b.n	261d6 <download_client_disconnect+0x3e>
   261e6:	bf00      	nop
   261e8:	00042314 	.word	0x00042314
   261ec:	0004236c 	.word	0x0004236c
   261f0:	00047430 	.word	0x00047430

000261f4 <reconnect>:
{
   261f4:	b510      	push	{r4, lr}
	LOG_INF("Reconnecting..");
   261f6:	2303      	movs	r3, #3
{
   261f8:	4604      	mov	r4, r0
	LOG_INF("Reconnecting..");
   261fa:	f04f 0000 	mov.w	r0, #0
   261fe:	4a0d      	ldr	r2, [pc, #52]	; (26234 <reconnect+0x40>)
   26200:	f363 0007 	bfi	r0, r3, #0, #8
   26204:	4b0c      	ldr	r3, [pc, #48]	; (26238 <reconnect+0x44>)
   26206:	490d      	ldr	r1, [pc, #52]	; (2623c <reconnect+0x48>)
   26208:	1a9b      	subs	r3, r3, r2
   2620a:	08db      	lsrs	r3, r3, #3
   2620c:	f363 108f 	bfi	r0, r3, #6, #10
   26210:	f018 fba9 	bl	3e966 <log_string_sync>
	err = download_client_disconnect(dl);
   26214:	4620      	mov	r0, r4
   26216:	f7ff ffbf 	bl	26198 <download_client_disconnect>
	if (err) {
   2621a:	b950      	cbnz	r0, 26232 <reconnect+0x3e>
	err = download_client_connect(dl, dl->host, &dl->config);
   2621c:	f241 0314 	movw	r3, #4116	; 0x1014
   26220:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
   26224:	58e1      	ldr	r1, [r4, r3]
   26226:	4620      	mov	r0, r4
}
   26228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = download_client_connect(dl, dl->host, &dl->config);
   2622c:	321c      	adds	r2, #28
   2622e:	f7ff bdfd 	b.w	25e2c <download_client_connect>
}
   26232:	bd10      	pop	{r4, pc}
   26234:	00042314 	.word	0x00042314
   26238:	0004236c 	.word	0x0004236c
   2623c:	00047764 	.word	0x00047764

00026240 <download_thread>:
{
   26240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26244:	4604      	mov	r4, r0
   26246:	4b82      	ldr	r3, [pc, #520]	; (26450 <download_thread+0x210>)
		LOG_WRN("Peer closed connection, will attempt to re-connect");
   26248:	4a82      	ldr	r2, [pc, #520]	; (26454 <download_thread+0x214>)
{
   2624a:	b091      	sub	sp, #68	; 0x44
		LOG_WRN("Peer closed connection, will attempt to re-connect");
   2624c:	1a9b      	subs	r3, r3, r2
   2624e:	f3c3 0bc9 	ubfx	fp, r3, #3, #10
	k_thread_suspend(dl->tid);
   26252:	f500 5381 	add.w	r3, r0, #4128	; 0x1020
   26256:	3304      	adds	r3, #4
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   26258:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
	k_thread_suspend(dl->tid);
   2625c:	930a      	str	r3, [sp, #40]	; 0x28
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   2625e:	3504      	adds	r5, #4
	k_thread_suspend(dl->tid);
   26260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26262:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_suspend(thread);
   26264:	f014 fb16 	bl	3a894 <z_impl_k_thread_suspend>
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   26268:	682b      	ldr	r3, [r5, #0]
   2626a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   2626e:	d30e      	bcc.n	2628e <download_thread+0x4e>
   26270:	4979      	ldr	r1, [pc, #484]	; (26458 <download_thread+0x218>)
   26272:	f240 139b 	movw	r3, #411	; 0x19b
   26276:	4a79      	ldr	r2, [pc, #484]	; (2645c <download_thread+0x21c>)
   26278:	4879      	ldr	r0, [pc, #484]	; (26460 <download_thread+0x220>)
   2627a:	f018 fb57 	bl	3e92c <printk>
   2627e:	4879      	ldr	r0, [pc, #484]	; (26464 <download_thread+0x224>)
   26280:	f018 fb54 	bl	3e92c <printk>
   26284:	f240 119b 	movw	r1, #411	; 0x19b
   26288:	4874      	ldr	r0, [pc, #464]	; (2645c <download_thread+0x21c>)
   2628a:	f018 fb5c 	bl	3e946 <assert_post_action>
		len = recv(dl->fd, dl->buf + dl->offset,
   2628e:	4626      	mov	r6, r4
	__ASSERT_NO_MSG(socket_ops);
   26290:	f8df 8200 	ldr.w	r8, [pc, #512]	; 26494 <download_thread+0x254>
   26294:	f856 3b04 	ldr.w	r3, [r6], #4
   26298:	682f      	ldr	r7, [r5, #0]
   2629a:	930b      	str	r3, [sp, #44]	; 0x2c
   2629c:	f8d8 3000 	ldr.w	r3, [r8]
   262a0:	eb06 0907 	add.w	r9, r6, r7
   262a4:	f5c7 5780 	rsb	r7, r7, #4096	; 0x1000
   262a8:	b94b      	cbnz	r3, 262be <download_thread+0x7e>
   262aa:	496f      	ldr	r1, [pc, #444]	; (26468 <download_thread+0x228>)
   262ac:	486c      	ldr	r0, [pc, #432]	; (26460 <download_thread+0x220>)
   262ae:	2369      	movs	r3, #105	; 0x69
   262b0:	4a6e      	ldr	r2, [pc, #440]	; (2646c <download_thread+0x22c>)
   262b2:	f018 fb3b 	bl	3e92c <printk>
   262b6:	2169      	movs	r1, #105	; 0x69
   262b8:	486c      	ldr	r0, [pc, #432]	; (2646c <download_thread+0x22c>)
   262ba:	f018 fb44 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   262be:	f8d8 3000 	ldr.w	r3, [r8]
   262c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   262c4:	b94b      	cbnz	r3, 262da <download_thread+0x9a>
   262c6:	496a      	ldr	r1, [pc, #424]	; (26470 <download_thread+0x230>)
   262c8:	4865      	ldr	r0, [pc, #404]	; (26460 <download_thread+0x220>)
   262ca:	236a      	movs	r3, #106	; 0x6a
   262cc:	4a67      	ldr	r2, [pc, #412]	; (2646c <download_thread+0x22c>)
   262ce:	f018 fb2d 	bl	3e92c <printk>
   262d2:	216a      	movs	r1, #106	; 0x6a
   262d4:	4865      	ldr	r0, [pc, #404]	; (2646c <download_thread+0x22c>)
   262d6:	f018 fb36 	bl	3e946 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   262da:	f8d8 3000 	ldr.w	r3, [r8]
   262de:	4649      	mov	r1, r9
   262e0:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   262e4:	463a      	mov	r2, r7
   262e6:	2300      	movs	r3, #0
   262e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   262ea:	47c0      	blx	r8
		if (len == -1) {
   262ec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   262f0:	4681      	mov	r9, r0
   262f2:	d133      	bne.n	2635c <download_thread+0x11c>
			LOG_ERR("Error reading from socket, errno %d", errno);
   262f4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   262f8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   262fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   26300:	f043 0301 	orr.w	r3, r3, #1
   26304:	f363 0207 	bfi	r2, r3, #0, #8
   26308:	b293      	uxth	r3, r2
   2630a:	f36b 138f 	bfi	r3, fp, #6, #10
   2630e:	f8ad 3018 	strh.w	r3, [sp, #24]
   26312:	f018 fcfe 	bl	3ed12 <__errno>
   26316:	4957      	ldr	r1, [pc, #348]	; (26474 <download_thread+0x234>)
   26318:	6802      	ldr	r2, [r0, #0]
   2631a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   2631e:	f018 fb22 	bl	3e966 <log_string_sync>
			rc = error_evt_send(dl, ENOTCONN);
   26322:	2180      	movs	r1, #128	; 0x80
			rc = error_evt_send(dl, ECONNRESET);
   26324:	f504 5003 	add.w	r0, r4, #8384	; 0x20c0
   26328:	3018      	adds	r0, #24
   2632a:	f01a facd 	bl	408c8 <error_evt_send.isra.1>
			if (rc) {
   2632e:	2800      	cmp	r0, #0
   26330:	d196      	bne.n	26260 <download_thread+0x20>
			reconnect(dl);
   26332:	4620      	mov	r0, r4
   26334:	f7ff ff5e 	bl	261f4 <reconnect>
			rc = error_evt_send(dl, ECONNRESET);
   26338:	f504 5603 	add.w	r6, r4, #8384	; 0x20c0
   2633c:	3618      	adds	r6, #24
		rc = get_request_send(dl);
   2633e:	4620      	mov	r0, r4
   26340:	f7ff fc80 	bl	25c44 <get_request_send>
		if (rc) {
   26344:	2800      	cmp	r0, #0
   26346:	d08f      	beq.n	26268 <download_thread+0x28>
			rc = error_evt_send(dl, ECONNRESET);
   26348:	2168      	movs	r1, #104	; 0x68
   2634a:	4630      	mov	r0, r6
   2634c:	f01a fabc 	bl	408c8 <error_evt_send.isra.1>
			if (rc) {
   26350:	2800      	cmp	r0, #0
   26352:	d185      	bne.n	26260 <download_thread+0x20>
			reconnect(dl);
   26354:	4620      	mov	r0, r4
   26356:	f7ff ff4d 	bl	261f4 <reconnect>
			goto send_again;
   2635a:	e7f0      	b.n	2633e <download_thread+0xfe>
		if (len == 0) {
   2635c:	b9a0      	cbnz	r0, 26388 <download_thread+0x148>
			LOG_WRN("Peer closed connection!");
   2635e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   26362:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   26366:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2636a:	f043 0302 	orr.w	r3, r3, #2
   2636e:	f363 0207 	bfi	r2, r3, #0, #8
   26372:	b293      	uxth	r3, r2
   26374:	f36b 138f 	bfi	r3, fp, #6, #10
   26378:	493f      	ldr	r1, [pc, #252]	; (26478 <download_thread+0x238>)
   2637a:	b298      	uxth	r0, r3
   2637c:	f8ad 301c 	strh.w	r3, [sp, #28]
   26380:	f018 faf1 	bl	3e966 <log_string_sync>
			rc = error_evt_send(dl, ECONNRESET);
   26384:	2168      	movs	r1, #104	; 0x68
   26386:	e7cd      	b.n	26324 <download_thread+0xe4>
		dl->offset += len;
   26388:	682b      	ldr	r3, [r5, #0]
   2638a:	4403      	add	r3, r0
   2638c:	602b      	str	r3, [r5, #0]
		if (!dl->has_header) {
   2638e:	f241 0310 	movw	r3, #4112	; 0x1010
   26392:	5ce3      	ldrb	r3, [r4, r3]
   26394:	2b00      	cmp	r3, #0
   26396:	f040 80c5 	bne.w	26524 <download_thread+0x2e4>
	p = strstr(client->buf, "\r\n\r\n");
   2639a:	4938      	ldr	r1, [pc, #224]	; (2647c <download_thread+0x23c>)
   2639c:	4630      	mov	r0, r6
   2639e:	f01a fee1 	bl	41164 <strstr>
	if (!p) {
   263a2:	4607      	mov	r7, r0
   263a4:	2800      	cmp	r0, #0
   263a6:	f43f af5f 	beq.w	26268 <download_thread+0x28>
	hdr = p + strlen("\r\n\r\n") - client->buf;
   263aa:	4834      	ldr	r0, [pc, #208]	; (2647c <download_thread+0x23c>)
   263ac:	f7f3 fdea 	bl	19f84 <strlen>
   263b0:	183b      	adds	r3, r7, r0
   263b2:	1b9f      	subs	r7, r3, r6
	__ASSERT(hdr < sizeof(client->buf), "Buffer overflow");
   263b4:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
	hdr = p + strlen("\r\n\r\n") - client->buf;
   263b8:	930b      	str	r3, [sp, #44]	; 0x2c
	__ASSERT(hdr < sizeof(client->buf), "Buffer overflow");
   263ba:	d30e      	bcc.n	263da <download_thread+0x19a>
   263bc:	4930      	ldr	r1, [pc, #192]	; (26480 <download_thread+0x240>)
   263be:	f240 1329 	movw	r3, #297	; 0x129
   263c2:	4a26      	ldr	r2, [pc, #152]	; (2645c <download_thread+0x21c>)
   263c4:	4826      	ldr	r0, [pc, #152]	; (26460 <download_thread+0x220>)
   263c6:	f018 fab1 	bl	3e92c <printk>
   263ca:	4826      	ldr	r0, [pc, #152]	; (26464 <download_thread+0x224>)
   263cc:	f018 faae 	bl	3e92c <printk>
   263d0:	f240 1129 	movw	r1, #297	; 0x129
   263d4:	4821      	ldr	r0, [pc, #132]	; (2645c <download_thread+0x21c>)
   263d6:	f018 fab6 	bl	3e946 <assert_post_action>
	if (client->file_size == 0) {
   263da:	f241 0808 	movw	r8, #4104	; 0x1008
   263de:	f854 3008 	ldr.w	r3, [r4, r8]
   263e2:	2b00      	cmp	r3, #0
   263e4:	d15d      	bne.n	264a2 <download_thread+0x262>
		p = strstr(client->buf, "Content-Range: bytes");
   263e6:	4927      	ldr	r1, [pc, #156]	; (26484 <download_thread+0x244>)
   263e8:	4630      	mov	r0, r6
   263ea:	f01a febb 	bl	41164 <strstr>
		if (!p) {
   263ee:	b9c8      	cbnz	r0, 26424 <download_thread+0x1e4>
			LOG_ERR("Server did not send "
   263f0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   263f4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   263f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   263fc:	f043 0301 	orr.w	r3, r3, #1
   26400:	f363 0207 	bfi	r2, r3, #0, #8
   26404:	b293      	uxth	r3, r2
   26406:	f36b 138f 	bfi	r3, fp, #6, #10
   2640a:	491f      	ldr	r1, [pc, #124]	; (26488 <download_thread+0x248>)
   2640c:	f8ad 3008 	strh.w	r3, [sp, #8]
			LOG_ERR("Server did not send file size in response");
   26410:	b298      	uxth	r0, r3
   26412:	f018 faa8 	bl	3e966 <log_string_sync>
				error_evt_send(dl, EBADMSG);
   26416:	f504 5003 	add.w	r0, r4, #8384	; 0x20c0
   2641a:	214d      	movs	r1, #77	; 0x4d
   2641c:	3018      	adds	r0, #24
   2641e:	f01a fa53 	bl	408c8 <error_evt_send.isra.1>
				break;
   26422:	e71d      	b.n	26260 <download_thread+0x20>
		p = strstr(p, "/");
   26424:	4919      	ldr	r1, [pc, #100]	; (2648c <download_thread+0x24c>)
   26426:	f01a fe9d 	bl	41164 <strstr>
		if (!p) {
   2642a:	bba8      	cbnz	r0, 26498 <download_thread+0x258>
			LOG_ERR("Server did not send file size in response");
   2642c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   26430:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   26434:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   26438:	f043 0301 	orr.w	r3, r3, #1
   2643c:	f363 0207 	bfi	r2, r3, #0, #8
   26440:	b293      	uxth	r3, r2
   26442:	f36b 138f 	bfi	r3, fp, #6, #10
   26446:	f8ad 300c 	strh.w	r3, [sp, #12]
   2644a:	4911      	ldr	r1, [pc, #68]	; (26490 <download_thread+0x250>)
   2644c:	e7e0      	b.n	26410 <download_thread+0x1d0>
   2644e:	bf00      	nop
   26450:	0004236c 	.word	0x0004236c
   26454:	00042314 	.word	0x00042314
   26458:	00047466 	.word	0x00047466
   2645c:	0004764d 	.word	0x0004764d
   26460:	00044643 	.word	0x00044643
   26464:	00047483 	.word	0x00047483
   26468:	0004476f 	.word	0x0004476f
   2646c:	00044746 	.word	0x00044746
   26470:	00045da7 	.word	0x00045da7
   26474:	00047495 	.word	0x00047495
   26478:	000474b9 	.word	0x000474b9
   2647c:	0004770d 	.word	0x0004770d
   26480:	000474d1 	.word	0x000474d1
   26484:	000474eb 	.word	0x000474eb
   26488:	00047500 	.word	0x00047500
   2648c:	00047530 	.word	0x00047530
   26490:	00047532 	.word	0x00047532
   26494:	20023990 	.word	0x20023990
		client->file_size = atoi(p + 1);
   26498:	3001      	adds	r0, #1
   2649a:	f01a fc41 	bl	40d20 <atoi>
   2649e:	f844 0008 	str.w	r0, [r4, r8]
	p = strstr(client->buf, "Connection: close");
   264a2:	4970      	ldr	r1, [pc, #448]	; (26664 <download_thread+0x424>)
   264a4:	4630      	mov	r0, r6
   264a6:	f01a fe5d 	bl	41164 <strstr>
	if (p) {
   264aa:	b1b0      	cbz	r0, 264da <download_thread+0x29a>
		LOG_WRN("Peer closed connection, will attempt to re-connect");
   264ac:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   264b0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   264b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   264b8:	f043 0302 	orr.w	r3, r3, #2
   264bc:	f363 0207 	bfi	r2, r3, #0, #8
   264c0:	b293      	uxth	r3, r2
   264c2:	f36b 138f 	bfi	r3, fp, #6, #10
   264c6:	b298      	uxth	r0, r3
   264c8:	4967      	ldr	r1, [pc, #412]	; (26668 <download_thread+0x428>)
   264ca:	f8ad 3010 	strh.w	r3, [sp, #16]
   264ce:	f018 fa4a 	bl	3e966 <log_string_sync>
		client->connection_close = true;
   264d2:	f241 0311 	movw	r3, #4113	; 0x1011
   264d6:	2201      	movs	r2, #1
   264d8:	54e2      	strb	r2, [r4, r3]
	if (client->offset != hdr) {
   264da:	682a      	ldr	r2, [r5, #0]
   264dc:	4297      	cmp	r7, r2
   264de:	f000 8095 	beq.w	2660c <download_thread+0x3cc>
		LOG_WRN("Copying %u payload bytes", client->offset - hdr);
   264e2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   264e6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   264ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   264ee:	f043 0302 	orr.w	r3, r3, #2
   264f2:	f363 0107 	bfi	r1, r3, #0, #8
   264f6:	b28b      	uxth	r3, r1
   264f8:	f36b 138f 	bfi	r3, fp, #6, #10
   264fc:	b298      	uxth	r0, r3
   264fe:	1bd2      	subs	r2, r2, r7
   26500:	495a      	ldr	r1, [pc, #360]	; (2666c <download_thread+0x42c>)
   26502:	f8ad 3014 	strh.w	r3, [sp, #20]
   26506:	f018 fa2e 	bl	3e966 <log_string_sync>
		memcpy(client->buf, client->buf + hdr, client->offset - hdr);
   2650a:	682a      	ldr	r2, [r5, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2650c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2650e:	1bd2      	subs	r2, r2, r7
   26510:	4630      	mov	r0, r6
   26512:	f01a fc25 	bl	40d60 <memcpy>
		client->offset -= hdr;
   26516:	682b      	ldr	r3, [r5, #0]
   26518:	1bdf      	subs	r7, r3, r7
   2651a:	602f      	str	r7, [r5, #0]
			dl->has_header = true;
   2651c:	2301      	movs	r3, #1
   2651e:	f241 0210 	movw	r2, #4112	; 0x1010
   26522:	54a3      	strb	r3, [r4, r2]
		dl->progress += MIN(dl->offset, len);
   26524:	f241 070c 	movw	r7, #4108	; 0x100c
   26528:	6829      	ldr	r1, [r5, #0]
   2652a:	59e2      	ldr	r2, [r4, r7]
   2652c:	f241 0808 	movw	r8, #4104	; 0x1008
   26530:	4549      	cmp	r1, r9
   26532:	bf94      	ite	ls
   26534:	1852      	addls	r2, r2, r1
   26536:	444a      	addhi	r2, r9
		if ((dl->offset < CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE) &&
   26538:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
		dl->progress += MIN(dl->offset, len);
   2653c:	51e2      	str	r2, [r4, r7]
		if ((dl->offset < CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE) &&
   2653e:	f854 3008 	ldr.w	r3, [r4, r8]
   26542:	d202      	bcs.n	2654a <download_thread+0x30a>
   26544:	429a      	cmp	r2, r3
   26546:	f47f ae8f 	bne.w	26268 <download_thread+0x28>
		LOG_INF("Downloaded %u/%u bytes (%d%%)", dl->progress,
   2654a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   2654e:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   26552:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
   26556:	f041 0103 	orr.w	r1, r1, #3
   2655a:	f361 0007 	bfi	r0, r1, #0, #8
   2655e:	b281      	uxth	r1, r0
   26560:	f36b 118f 	bfi	r1, fp, #6, #10
   26564:	f8ad 1020 	strh.w	r1, [sp, #32]
   26568:	2164      	movs	r1, #100	; 0x64
   2656a:	4351      	muls	r1, r2
   2656c:	fbb1 f1f3 	udiv	r1, r1, r3
   26570:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   26574:	9100      	str	r1, [sp, #0]
   26576:	493e      	ldr	r1, [pc, #248]	; (26670 <download_thread+0x430>)
   26578:	f018 f9f5 	bl	3e966 <log_string_sync>
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_MAX_FRAGMENT_SIZE,
   2657c:	682b      	ldr	r3, [r5, #0]
   2657e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   26582:	d921      	bls.n	265c8 <download_thread+0x388>
   26584:	f44f 73b1 	mov.w	r3, #354	; 0x162
   26588:	4a3a      	ldr	r2, [pc, #232]	; (26674 <download_thread+0x434>)
   2658a:	493b      	ldr	r1, [pc, #236]	; (26678 <download_thread+0x438>)
   2658c:	483b      	ldr	r0, [pc, #236]	; (2667c <download_thread+0x43c>)
   2658e:	f018 f9cd 	bl	3e92c <printk>
   26592:	483b      	ldr	r0, [pc, #236]	; (26680 <download_thread+0x440>)
   26594:	f018 f9ca 	bl	3e92c <printk>
   26598:	f44f 71b1 	mov.w	r1, #354	; 0x162
   2659c:	4835      	ldr	r0, [pc, #212]	; (26674 <download_thread+0x434>)
   2659e:	f018 f9d2 	bl	3e946 <assert_post_action>
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE,
   265a2:	682b      	ldr	r3, [r5, #0]
   265a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   265a8:	d90e      	bls.n	265c8 <download_thread+0x388>
   265aa:	4933      	ldr	r1, [pc, #204]	; (26678 <download_thread+0x438>)
   265ac:	f240 1365 	movw	r3, #357	; 0x165
   265b0:	4a30      	ldr	r2, [pc, #192]	; (26674 <download_thread+0x434>)
   265b2:	4832      	ldr	r0, [pc, #200]	; (2667c <download_thread+0x43c>)
   265b4:	f018 f9ba 	bl	3e92c <printk>
   265b8:	4832      	ldr	r0, [pc, #200]	; (26684 <download_thread+0x444>)
   265ba:	f018 f9b7 	bl	3e92c <printk>
   265be:	f240 1165 	movw	r1, #357	; 0x165
   265c2:	482c      	ldr	r0, [pc, #176]	; (26674 <download_thread+0x434>)
   265c4:	f018 f9bf 	bl	3e946 <assert_post_action>
	const struct download_client_evt evt = {
   265c8:	2300      	movs	r3, #0
   265ca:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   265ce:	682b      	ldr	r3, [r5, #0]
   265d0:	960e      	str	r6, [sp, #56]	; 0x38
   265d2:	930f      	str	r3, [sp, #60]	; 0x3c
	return client->callback(&evt);
   265d4:	f242 03d8 	movw	r3, #8408	; 0x20d8
   265d8:	a80d      	add	r0, sp, #52	; 0x34
   265da:	18e6      	adds	r6, r4, r3
   265dc:	58e3      	ldr	r3, [r4, r3]
   265de:	4798      	blx	r3
		if (rc) {
   265e0:	4681      	mov	r9, r0
   265e2:	b1b0      	cbz	r0, 26612 <download_thread+0x3d2>
			LOG_INF("Fragment refused, download stopped.");
   265e4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   265e8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   265ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   265f0:	f043 0303 	orr.w	r3, r3, #3
   265f4:	f363 0207 	bfi	r2, r3, #0, #8
   265f8:	b293      	uxth	r3, r2
   265fa:	f36b 138f 	bfi	r3, fp, #6, #10
   265fe:	4922      	ldr	r1, [pc, #136]	; (26688 <download_thread+0x448>)
   26600:	b298      	uxth	r0, r3
   26602:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
   26606:	f018 f9ae 	bl	3e966 <log_string_sync>
   2660a:	e629      	b.n	26260 <download_thread+0x20>
		client->offset = 0;
   2660c:	2300      	movs	r3, #0
   2660e:	602b      	str	r3, [r5, #0]
			if (rc > 0) {
   26610:	e784      	b.n	2651c <download_thread+0x2dc>
		if (dl->progress == dl->file_size) {
   26612:	59e2      	ldr	r2, [r4, r7]
   26614:	f854 3008 	ldr.w	r3, [r4, r8]
   26618:	429a      	cmp	r2, r3
   2661a:	d116      	bne.n	2664a <download_thread+0x40a>
			LOG_INF("Download complete");
   2661c:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   26620:	f043 0303 	orr.w	r3, r3, #3
   26624:	f363 0a07 	bfi	sl, r3, #0, #8
   26628:	f36b 1a8f 	bfi	sl, fp, #6, #10
   2662c:	4650      	mov	r0, sl
   2662e:	4917      	ldr	r1, [pc, #92]	; (2668c <download_thread+0x44c>)
   26630:	f018 f999 	bl	3e966 <log_string_sync>
			const struct download_client_evt evt = {
   26634:	2302      	movs	r3, #2
   26636:	e9cd 990d 	strd	r9, r9, [sp, #52]	; 0x34
   2663a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   2663e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
			dl->callback(&evt);
   26642:	a80d      	add	r0, sp, #52	; 0x34
   26644:	6833      	ldr	r3, [r6, #0]
   26646:	4798      	blx	r3
			break;
   26648:	e60a      	b.n	26260 <download_thread+0x20>
		dl->has_header = false;
   2664a:	f241 0310 	movw	r3, #4112	; 0x1010
		dl->offset = 0;
   2664e:	6028      	str	r0, [r5, #0]
		dl->has_header = false;
   26650:	54e0      	strb	r0, [r4, r3]
		if (dl->connection_close) {
   26652:	f241 0311 	movw	r3, #4113	; 0x1011
   26656:	5ce2      	ldrb	r2, [r4, r3]
   26658:	2a00      	cmp	r2, #0
   2665a:	f43f ae6d 	beq.w	26338 <download_thread+0xf8>
			dl->connection_close = false;
   2665e:	54e0      	strb	r0, [r4, r3]
   26660:	e667      	b.n	26332 <download_thread+0xf2>
   26662:	bf00      	nop
   26664:	0004755c 	.word	0x0004755c
   26668:	0004756e 	.word	0x0004756e
   2666c:	000475a1 	.word	0x000475a1
   26670:	000475ba 	.word	0x000475ba
   26674:	0004764d 	.word	0x0004764d
   26678:	000475d8 	.word	0x000475d8
   2667c:	00044643 	.word	0x00044643
   26680:	000475ef 	.word	0x000475ef
   26684:	00047604 	.word	0x00047604
   26688:	00047617 	.word	0x00047617
   2668c:	0004763b 	.word	0x0004763b

00026690 <download_client_start>:

int download_client_start(struct download_client *client, const char *file,
			  size_t from)
{
   26690:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   26692:	4604      	mov	r4, r0
   26694:	b390      	cbz	r0, 266fc <download_client_start+0x6c>
   26696:	6803      	ldr	r3, [r0, #0]
   26698:	2b00      	cmp	r3, #0
   2669a:	db2f      	blt.n	266fc <download_client_start+0x6c>
		return -EINVAL;
	}

	client->file = file;
   2669c:	f241 0318 	movw	r3, #4120	; 0x1018
	client->file_size = 0;
	client->progress = from;
   266a0:	f241 060c 	movw	r6, #4108	; 0x100c
	client->file = file;
   266a4:	50c1      	str	r1, [r0, r3]
	client->file_size = 0;
   266a6:	2300      	movs	r3, #0
   266a8:	f241 0008 	movw	r0, #4104	; 0x1008
   266ac:	5023      	str	r3, [r4, r0]
	client->progress = from;
   266ae:	51a2      	str	r2, [r4, r6]

	client->offset = 0;
   266b0:	f241 0204 	movw	r2, #4100	; 0x1004
   266b4:	50a3      	str	r3, [r4, r2]
	client->has_header = false;
   266b6:	f241 0210 	movw	r2, #4112	; 0x1010

	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   266ba:	f04f 0500 	mov.w	r5, #0
	client->has_header = false;
   266be:	54a3      	strb	r3, [r4, r2]
	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   266c0:	2303      	movs	r3, #3
   266c2:	4a10      	ldr	r2, [pc, #64]	; (26704 <download_client_start+0x74>)
   266c4:	f363 0507 	bfi	r5, r3, #0, #8
   266c8:	4b0f      	ldr	r3, [pc, #60]	; (26708 <download_client_start+0x78>)
   266ca:	4608      	mov	r0, r1
   266cc:	1a9b      	subs	r3, r3, r2
   266ce:	08db      	lsrs	r3, r3, #3
   266d0:	f363 158f 	bfi	r5, r3, #6, #10
   266d4:	f018 f959 	bl	3e98a <log_strdup>
   266d8:	59a3      	ldr	r3, [r4, r6]
   266da:	4602      	mov	r2, r0
   266dc:	490b      	ldr	r1, [pc, #44]	; (2670c <download_client_start+0x7c>)
   266de:	4628      	mov	r0, r5
   266e0:	f018 f941 	bl	3e966 <log_string_sync>
		client->progress);

	err = get_request_send(client);
   266e4:	4620      	mov	r0, r4
   266e6:	f7ff faad 	bl	25c44 <get_request_send>
	if (err) {
   266ea:	4605      	mov	r5, r0
   266ec:	b920      	cbnz	r0, 266f8 <download_client_start+0x68>
		return err;
	}

	/* Let the thread run */
	k_thread_resume(client->tid);
   266ee:	f241 0324 	movw	r3, #4132	; 0x1024
   266f2:	58e0      	ldr	r0, [r4, r3]
	z_impl_k_thread_resume(thread);
   266f4:	f014 f920 	bl	3a938 <z_impl_k_thread_resume>

	return 0;
}
   266f8:	4628      	mov	r0, r5
   266fa:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   266fc:	f06f 0515 	mvn.w	r5, #21
   26700:	e7fa      	b.n	266f8 <download_client_start+0x68>
   26702:	bf00      	nop
   26704:	00042314 	.word	0x00042314
   26708:	0004236c 	.word	0x0004236c
   2670c:	00047451 	.word	0x00047451

00026710 <download_with_offset>:

	return 0;
}

static void download_with_offset(struct k_work *unused)
{
   26710:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int offset;
	int err = dfu_target_offset_get(&offset);
   26712:	a801      	add	r0, sp, #4
   26714:	f000 ff3e 	bl	27594 <dfu_target_offset_get>

	err = download_client_start(&dlc, dlc.file, offset);
   26718:	f241 0318 	movw	r3, #4120	; 0x1018
   2671c:	4812      	ldr	r0, [pc, #72]	; (26768 <download_with_offset+0x58>)
   2671e:	9a01      	ldr	r2, [sp, #4]
   26720:	58c1      	ldr	r1, [r0, r3]
   26722:	f7ff ffb5 	bl	26690 <download_client_start>

	LOG_INF("Downloading from offset: 0x%x", offset);
   26726:	2303      	movs	r3, #3
	err = download_client_start(&dlc, dlc.file, offset);
   26728:	4605      	mov	r5, r0
	LOG_INF("Downloading from offset: 0x%x", offset);
   2672a:	f04f 0000 	mov.w	r0, #0
   2672e:	4c0f      	ldr	r4, [pc, #60]	; (2676c <download_with_offset+0x5c>)
   26730:	f363 0007 	bfi	r0, r3, #0, #8
   26734:	4b0e      	ldr	r3, [pc, #56]	; (26770 <download_with_offset+0x60>)
   26736:	9a01      	ldr	r2, [sp, #4]
   26738:	1ae4      	subs	r4, r4, r3
   2673a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2673e:	f364 108f 	bfi	r0, r4, #6, #10
   26742:	490c      	ldr	r1, [pc, #48]	; (26774 <download_with_offset+0x64>)
   26744:	f018 f90f 	bl	3e966 <log_string_sync>
	if (err != 0) {
   26748:	b15d      	cbz	r5, 26762 <download_with_offset+0x52>
		LOG_ERR("%s failed with error %d", __func__, err);
   2674a:	2301      	movs	r3, #1
   2674c:	f04f 0000 	mov.w	r0, #0
   26750:	f363 0007 	bfi	r0, r3, #0, #8
   26754:	f364 108f 	bfi	r0, r4, #6, #10
   26758:	462b      	mov	r3, r5
   2675a:	4a07      	ldr	r2, [pc, #28]	; (26778 <download_with_offset+0x68>)
   2675c:	4907      	ldr	r1, [pc, #28]	; (2677c <download_with_offset+0x6c>)
   2675e:	f018 f902 	bl	3e966 <log_string_sync>
	}
}
   26762:	b003      	add	sp, #12
   26764:	bd30      	pop	{r4, r5, pc}
   26766:	bf00      	nop
   26768:	20020988 	.word	0x20020988
   2676c:	00042374 	.word	0x00042374
   26770:	00042314 	.word	0x00042314
   26774:	0004788b 	.word	0x0004788b
   26778:	00047783 	.word	0x00047783
   2677c:	000478a9 	.word	0x000478a9

00026780 <download_client_callback>:
{
   26780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (event == NULL) {
   26782:	4605      	mov	r5, r0
   26784:	2800      	cmp	r0, #0
   26786:	f000 80dc 	beq.w	26942 <download_client_callback+0x1c2>
	switch (event->id) {
   2678a:	7803      	ldrb	r3, [r0, #0]
   2678c:	2b01      	cmp	r3, #1
   2678e:	f000 8097 	beq.w	268c0 <download_client_callback+0x140>
   26792:	b11b      	cbz	r3, 2679c <download_client_callback+0x1c>
   26794:	2b02      	cmp	r3, #2
   26796:	d06f      	beq.n	26878 <download_client_callback+0xf8>
	return 0;
   26798:	2400      	movs	r4, #0
			socket_retries_left--;
   2679a:	e02c      	b.n	267f6 <download_client_callback+0x76>
		if (first_fragment) {
   2679c:	4e6a      	ldr	r6, [pc, #424]	; (26948 <download_client_callback+0x1c8>)
   2679e:	7833      	ldrb	r3, [r6, #0]
   267a0:	2b00      	cmp	r3, #0
   267a2:	d04e      	beq.n	26842 <download_client_callback+0xc2>
			err = download_client_file_size_get(&dlc, &file_size);
   267a4:	4669      	mov	r1, sp
   267a6:	4869      	ldr	r0, [pc, #420]	; (2694c <download_client_callback+0x1cc>)
   267a8:	f01a f89d 	bl	408e6 <download_client_file_size_get>
			if (err != 0) {
   267ac:	4604      	mov	r4, r0
   267ae:	b120      	cbz	r0, 267ba <download_client_callback+0x3a>
			callback(FOTA_DOWNLOAD_EVT_ERROR);
   267b0:	4b67      	ldr	r3, [pc, #412]	; (26950 <download_client_callback+0x1d0>)
   267b2:	681b      	ldr	r3, [r3, #0]
   267b4:	2001      	movs	r0, #1
   267b6:	4798      	blx	r3
			return err;
   267b8:	e01d      	b.n	267f6 <download_client_callback+0x76>
			first_fragment = false;
   267ba:	7030      	strb	r0, [r6, #0]
			int img_type = dfu_target_img_type(event->fragment.buf,
   267bc:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   267c0:	f000 fe8e 	bl	274e0 <dfu_target_img_type>
			err = dfu_target_init(img_type, file_size);
   267c4:	9900      	ldr	r1, [sp, #0]
   267c6:	f000 feb3 	bl	27530 <dfu_target_init>
			if ((err < 0) && (err != -EBUSY)) {
   267ca:	4e62      	ldr	r6, [pc, #392]	; (26954 <download_client_callback+0x1d4>)
   267cc:	4b62      	ldr	r3, [pc, #392]	; (26958 <download_client_callback+0x1d8>)
   267ce:	1e04      	subs	r4, r0, #0
   267d0:	eba6 0603 	sub.w	r6, r6, r3
   267d4:	f3c6 06c9 	ubfx	r6, r6, #3, #10
   267d8:	da10      	bge.n	267fc <download_client_callback+0x7c>
   267da:	f114 0f10 	cmn.w	r4, #16
   267de:	d00d      	beq.n	267fc <download_client_callback+0x7c>
				LOG_ERR("dfu_target_init error %d", err);
   267e0:	f04f 0000 	mov.w	r0, #0
   267e4:	2301      	movs	r3, #1
   267e6:	f363 0007 	bfi	r0, r3, #0, #8
   267ea:	f366 108f 	bfi	r0, r6, #6, #10
   267ee:	4622      	mov	r2, r4
   267f0:	495a      	ldr	r1, [pc, #360]	; (2695c <download_client_callback+0x1dc>)
   267f2:	f018 f8b8 	bl	3e966 <log_string_sync>
}
   267f6:	4620      	mov	r0, r4
   267f8:	b003      	add	sp, #12
   267fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = dfu_target_offset_get(&offset);
   267fc:	a801      	add	r0, sp, #4
   267fe:	f000 fec9 	bl	27594 <dfu_target_offset_get>
			LOG_INF("Offset: 0x%x", offset);
   26802:	2303      	movs	r3, #3
   26804:	f04f 0000 	mov.w	r0, #0
   26808:	f363 0007 	bfi	r0, r3, #0, #8
   2680c:	f366 108f 	bfi	r0, r6, #6, #10
   26810:	9a01      	ldr	r2, [sp, #4]
   26812:	4953      	ldr	r1, [pc, #332]	; (26960 <download_client_callback+0x1e0>)
   26814:	f018 f8a7 	bl	3e966 <log_string_sync>
			if (offset != 0) {
   26818:	9b01      	ldr	r3, [sp, #4]
   2681a:	b193      	cbz	r3, 26842 <download_client_callback+0xc2>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2681c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26820:	4950      	ldr	r1, [pc, #320]	; (26964 <download_client_callback+0x1e4>)
   26822:	4851      	ldr	r0, [pc, #324]	; (26968 <download_client_callback+0x1e8>)
   26824:	f014 f932 	bl	3aa8c <k_delayed_work_submit_to_queue>
				LOG_INF("Refuse fragment, restart with offset");
   26828:	2303      	movs	r3, #3
   2682a:	f04f 0000 	mov.w	r0, #0
   2682e:	f363 0007 	bfi	r0, r3, #0, #8
   26832:	f366 108f 	bfi	r0, r6, #6, #10
   26836:	494d      	ldr	r1, [pc, #308]	; (2696c <download_client_callback+0x1ec>)
   26838:	f018 f895 	bl	3e966 <log_string_sync>
				return -1;
   2683c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   26840:	e7d9      	b.n	267f6 <download_client_callback+0x76>
		err = dfu_target_write(event->fragment.buf,
   26842:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   26846:	f000 feaf 	bl	275a8 <dfu_target_write>
		if (err != 0) {
   2684a:	4604      	mov	r4, r0
   2684c:	2800      	cmp	r0, #0
   2684e:	d0d2      	beq.n	267f6 <download_client_callback+0x76>
			LOG_ERR("dfu_target_write error %d", err);
   26850:	2301      	movs	r3, #1
   26852:	f04f 0000 	mov.w	r0, #0
   26856:	4a40      	ldr	r2, [pc, #256]	; (26958 <download_client_callback+0x1d8>)
   26858:	f363 0007 	bfi	r0, r3, #0, #8
   2685c:	4b3d      	ldr	r3, [pc, #244]	; (26954 <download_client_callback+0x1d4>)
   2685e:	4944      	ldr	r1, [pc, #272]	; (26970 <download_client_callback+0x1f0>)
   26860:	1a9b      	subs	r3, r3, r2
   26862:	08db      	lsrs	r3, r3, #3
   26864:	f363 108f 	bfi	r0, r3, #6, #10
   26868:	4622      	mov	r2, r4
   2686a:	f018 f87c 	bl	3e966 <log_string_sync>
			err = download_client_disconnect(&dlc);
   2686e:	4837      	ldr	r0, [pc, #220]	; (2694c <download_client_callback+0x1cc>)
   26870:	f7ff fc92 	bl	26198 <download_client_disconnect>
   26874:	4604      	mov	r4, r0
   26876:	e79b      	b.n	267b0 <download_client_callback+0x30>
		err = dfu_target_done(true);
   26878:	2001      	movs	r0, #1
   2687a:	f000 fea1 	bl	275c0 <dfu_target_done>
		if (err != 0) {
   2687e:	4d34      	ldr	r5, [pc, #208]	; (26950 <download_client_callback+0x1d0>)
   26880:	4604      	mov	r4, r0
   26882:	b180      	cbz	r0, 268a6 <download_client_callback+0x126>
			LOG_ERR("dfu_target_done error: %d", err);
   26884:	2301      	movs	r3, #1
   26886:	f04f 0000 	mov.w	r0, #0
   2688a:	4a33      	ldr	r2, [pc, #204]	; (26958 <download_client_callback+0x1d8>)
   2688c:	f363 0007 	bfi	r0, r3, #0, #8
   26890:	4b30      	ldr	r3, [pc, #192]	; (26954 <download_client_callback+0x1d4>)
   26892:	4938      	ldr	r1, [pc, #224]	; (26974 <download_client_callback+0x1f4>)
   26894:	1a9b      	subs	r3, r3, r2
   26896:	08db      	lsrs	r3, r3, #3
   26898:	f363 108f 	bfi	r0, r3, #6, #10
   2689c:	4622      	mov	r2, r4
   2689e:	f018 f862 	bl	3e966 <log_string_sync>
			callback(FOTA_DOWNLOAD_EVT_ERROR);
   268a2:	682b      	ldr	r3, [r5, #0]
   268a4:	e786      	b.n	267b4 <download_client_callback+0x34>
		err = download_client_disconnect(&dlc);
   268a6:	4829      	ldr	r0, [pc, #164]	; (2694c <download_client_callback+0x1cc>)
   268a8:	f7ff fc76 	bl	26198 <download_client_disconnect>
			callback(FOTA_DOWNLOAD_EVT_ERROR);
   268ac:	682b      	ldr	r3, [r5, #0]
		if (err != 0) {
   268ae:	4604      	mov	r4, r0
   268b0:	2800      	cmp	r0, #0
   268b2:	f47f af7f 	bne.w	267b4 <download_client_callback+0x34>
		callback(FOTA_DOWNLOAD_EVT_FINISHED);
   268b6:	4798      	blx	r3
		first_fragment = true;
   268b8:	2201      	movs	r2, #1
   268ba:	4b23      	ldr	r3, [pc, #140]	; (26948 <download_client_callback+0x1c8>)
   268bc:	701a      	strb	r2, [r3, #0]
		break;
   268be:	e79a      	b.n	267f6 <download_client_callback+0x76>
		if ((socket_retries_left) && ((event->error == -ENOTCONN) ||
   268c0:	4e2d      	ldr	r6, [pc, #180]	; (26978 <download_client_callback+0x1f8>)
   268c2:	4c24      	ldr	r4, [pc, #144]	; (26954 <download_client_callback+0x1d4>)
   268c4:	6832      	ldr	r2, [r6, #0]
   268c6:	4f24      	ldr	r7, [pc, #144]	; (26958 <download_client_callback+0x1d8>)
   268c8:	b1aa      	cbz	r2, 268f6 <download_client_callback+0x176>
   268ca:	6843      	ldr	r3, [r0, #4]
   268cc:	f113 0f80 	cmn.w	r3, #128	; 0x80
   268d0:	d001      	beq.n	268d6 <download_client_callback+0x156>
   268d2:	3368      	adds	r3, #104	; 0x68
   268d4:	d10f      	bne.n	268f6 <download_client_callback+0x176>
			LOG_WRN("Download socket error. %d retries left...",
   268d6:	2302      	movs	r3, #2
   268d8:	f04f 0000 	mov.w	r0, #0
   268dc:	1be4      	subs	r4, r4, r7
   268de:	f363 0007 	bfi	r0, r3, #0, #8
   268e2:	08e4      	lsrs	r4, r4, #3
   268e4:	f364 108f 	bfi	r0, r4, #6, #10
   268e8:	4924      	ldr	r1, [pc, #144]	; (2697c <download_client_callback+0x1fc>)
   268ea:	f018 f83c 	bl	3e966 <log_string_sync>
			socket_retries_left--;
   268ee:	6833      	ldr	r3, [r6, #0]
   268f0:	3b01      	subs	r3, #1
   268f2:	6033      	str	r3, [r6, #0]
   268f4:	e750      	b.n	26798 <download_client_callback+0x18>
			download_client_disconnect(&dlc);
   268f6:	4815      	ldr	r0, [pc, #84]	; (2694c <download_client_callback+0x1cc>)
   268f8:	f7ff fc4e 	bl	26198 <download_client_disconnect>
			LOG_ERR("Download client error");
   268fc:	2301      	movs	r3, #1
   268fe:	f04f 0000 	mov.w	r0, #0
   26902:	1be4      	subs	r4, r4, r7
   26904:	f363 0007 	bfi	r0, r3, #0, #8
   26908:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2690c:	f364 108f 	bfi	r0, r4, #6, #10
   26910:	491b      	ldr	r1, [pc, #108]	; (26980 <download_client_callback+0x200>)
   26912:	f018 f828 	bl	3e966 <log_string_sync>
			err = dfu_target_done(false);
   26916:	2000      	movs	r0, #0
   26918:	f000 fe52 	bl	275c0 <dfu_target_done>
			if (err != 0) {
   2691c:	b148      	cbz	r0, 26932 <download_client_callback+0x1b2>
				LOG_ERR("Unable to deinitialze resources "
   2691e:	f04f 0000 	mov.w	r0, #0
   26922:	2301      	movs	r3, #1
   26924:	f363 0007 	bfi	r0, r3, #0, #8
   26928:	f364 108f 	bfi	r0, r4, #6, #10
   2692c:	4915      	ldr	r1, [pc, #84]	; (26984 <download_client_callback+0x204>)
   2692e:	f018 f81a 	bl	3e966 <log_string_sync>
			first_fragment = true;
   26932:	2001      	movs	r0, #1
   26934:	4b04      	ldr	r3, [pc, #16]	; (26948 <download_client_callback+0x1c8>)
   26936:	7018      	strb	r0, [r3, #0]
			callback(FOTA_DOWNLOAD_EVT_ERROR);
   26938:	4b05      	ldr	r3, [pc, #20]	; (26950 <download_client_callback+0x1d0>)
   2693a:	681b      	ldr	r3, [r3, #0]
   2693c:	4798      	blx	r3
			return event->error;
   2693e:	686c      	ldr	r4, [r5, #4]
   26940:	e759      	b.n	267f6 <download_client_callback+0x76>
		return -EINVAL;
   26942:	f06f 0415 	mvn.w	r4, #21
   26946:	e756      	b.n	267f6 <download_client_callback+0x76>
   26948:	20031499 	.word	0x20031499
   2694c:	20020988 	.word	0x20020988
   26950:	200246a4 	.word	0x200246a4
   26954:	00042374 	.word	0x00042374
   26958:	00042314 	.word	0x00042314
   2695c:	00047798 	.word	0x00047798
   26960:	000477b1 	.word	0x000477b1
   26964:	200246a8 	.word	0x200246a8
   26968:	2002a25c 	.word	0x2002a25c
   2696c:	000477be 	.word	0x000477be
   26970:	000477e3 	.word	0x000477e3
   26974:	000477fd 	.word	0x000477fd
   26978:	200246c8 	.word	0x200246c8
   2697c:	00047817 	.word	0x00047817
   26980:	00047841 	.word	0x00047841
   26984:	00047857 	.word	0x00047857

00026988 <fota_download_start>:

int fota_download_start(char *host, char *file)
{
   26988:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err = -1;

	struct download_client_cfg config = {
   2698a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2698e:	2200      	movs	r2, #0
{
   26990:	460d      	mov	r5, r1
	struct download_client_cfg config = {
   26992:	e9cd 3200 	strd	r3, r2, [sp]
		.sec_tag = -1, /* HTTP */
	};

	if (host == NULL || file == NULL || callback == NULL) {
   26996:	4601      	mov	r1, r0
   26998:	b1c8      	cbz	r0, 269ce <fota_download_start+0x46>
   2699a:	b1c5      	cbz	r5, 269ce <fota_download_start+0x46>
   2699c:	4b0d      	ldr	r3, [pc, #52]	; (269d4 <fota_download_start+0x4c>)
   2699e:	681b      	ldr	r3, [r3, #0]
   269a0:	b1ab      	cbz	r3, 269ce <fota_download_start+0x46>
		return -EINVAL;
	}

	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   269a2:	2202      	movs	r2, #2
   269a4:	4b0c      	ldr	r3, [pc, #48]	; (269d8 <fota_download_start+0x50>)
		LOG_INF("B1 update, selected file:\n%s", update);
		file = update;
	}
#endif /* PM_S1_ADDRESS */

	err = download_client_connect(&dlc, host, &config);
   269a6:	480d      	ldr	r0, [pc, #52]	; (269dc <fota_download_start+0x54>)
	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   269a8:	601a      	str	r2, [r3, #0]
	err = download_client_connect(&dlc, host, &config);
   269aa:	466a      	mov	r2, sp
   269ac:	f7ff fa3e 	bl	25e2c <download_client_connect>
	if (err != 0) {
   269b0:	4604      	mov	r4, r0
   269b2:	b948      	cbnz	r0, 269c8 <fota_download_start+0x40>
		return err;
	}


	err = download_client_start(&dlc, file, 0);
   269b4:	4602      	mov	r2, r0
   269b6:	4629      	mov	r1, r5
   269b8:	4808      	ldr	r0, [pc, #32]	; (269dc <fota_download_start+0x54>)
   269ba:	f7ff fe69 	bl	26690 <download_client_start>
	if (err != 0) {
   269be:	4604      	mov	r4, r0
   269c0:	b110      	cbz	r0, 269c8 <fota_download_start+0x40>
		download_client_disconnect(&dlc);
   269c2:	4806      	ldr	r0, [pc, #24]	; (269dc <fota_download_start+0x54>)
   269c4:	f7ff fbe8 	bl	26198 <download_client_disconnect>
		return err;
	}

	return 0;
}
   269c8:	4620      	mov	r0, r4
   269ca:	b003      	add	sp, #12
   269cc:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   269ce:	f06f 0415 	mvn.w	r4, #21
   269d2:	e7f9      	b.n	269c8 <fota_download_start+0x40>
   269d4:	200246a4 	.word	0x200246a4
   269d8:	200246c8 	.word	0x200246c8
   269dc:	20020988 	.word	0x20020988

000269e0 <fota_download_init>:

int fota_download_init(fota_download_callback_t client_callback)
{
   269e0:	b508      	push	{r3, lr}
	if (client_callback == NULL) {
   269e2:	b158      	cbz	r0, 269fc <fota_download_init+0x1c>
		return -EINVAL;
	}

	callback = client_callback;
   269e4:	4b07      	ldr	r3, [pc, #28]	; (26a04 <fota_download_init+0x24>)

	k_delayed_work_init(&dlc_with_offset_work, download_with_offset);
   269e6:	4908      	ldr	r1, [pc, #32]	; (26a08 <fota_download_init+0x28>)
	callback = client_callback;
   269e8:	6018      	str	r0, [r3, #0]
	k_delayed_work_init(&dlc_with_offset_work, download_with_offset);
   269ea:	4808      	ldr	r0, [pc, #32]	; (26a0c <fota_download_init+0x2c>)
   269ec:	f01a f926 	bl	40c3c <k_delayed_work_init>
	if (err != 0) {
		return err;
	}

	return 0;
}
   269f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	int err = download_client_init(&dlc, download_client_callback);
   269f4:	4906      	ldr	r1, [pc, #24]	; (26a10 <fota_download_init+0x30>)
   269f6:	4807      	ldr	r0, [pc, #28]	; (26a14 <fota_download_init+0x34>)
   269f8:	f7ff b9ee 	b.w	25dd8 <download_client_init>
}
   269fc:	f06f 0015 	mvn.w	r0, #21
   26a00:	bd08      	pop	{r3, pc}
   26a02:	bf00      	nop
   26a04:	200246a4 	.word	0x200246a4
   26a08:	00026711 	.word	0x00026711
   26a0c:	200246a8 	.word	0x200246a8
   26a10:	00026781 	.word	0x00026781
   26a14:	20020988 	.word	0x20020988

00026a18 <construct_topic>:
 */
#define TOPIC_TEMPLATE "$aws/things/%s/jobs/%s%s%s%s"
static int construct_topic(const u8_t *client_id, const u8_t *job_id,
			   const struct topic_conf *conf, u8_t *out_buf,
			   struct mqtt_topic *topic, bool remove_suffix)
{
   26a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   26a1c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   26a1e:	4688      	mov	r8, r1
   26a20:	4615      	mov	r5, r2
   26a22:	461f      	mov	r7, r3
	if (client_id == NULL || job_id == NULL || conf == NULL ||
   26a24:	4681      	mov	r9, r0
   26a26:	2800      	cmp	r0, #0
   26a28:	d05d      	beq.n	26ae6 <construct_topic+0xce>
   26a2a:	2900      	cmp	r1, #0
   26a2c:	d05b      	beq.n	26ae6 <construct_topic+0xce>
   26a2e:	6853      	ldr	r3, [r2, #4]
   26a30:	2b00      	cmp	r3, #0
   26a32:	d058      	beq.n	26ae6 <construct_topic+0xce>
	    conf->name == NULL || conf->suffix == NULL ||
   26a34:	6894      	ldr	r4, [r2, #8]
   26a36:	2c00      	cmp	r4, #0
   26a38:	d055      	beq.n	26ae6 <construct_topic+0xce>
   26a3a:	2f00      	cmp	r7, #0
   26a3c:	d053      	beq.n	26ae6 <construct_topic+0xce>
	    out_buf == NULL || topic == NULL) {
		return -EINVAL;
	}

	const char *suffix = remove_suffix  ? "" : conf->suffix;
   26a3e:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   26a42:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 26b04 <construct_topic+0xec>
	const char *slash_after_job_id = strlen(job_id) > 0 ? "/" : "";
   26a46:	4608      	mov	r0, r1
	const char *suffix = remove_suffix  ? "" : conf->suffix;
   26a48:	2b00      	cmp	r3, #0
   26a4a:	bf18      	it	ne
   26a4c:	4654      	movne	r4, sl
	const char *slash_after_job_id = strlen(job_id) > 0 ? "/" : "";
   26a4e:	f7f3 fa99 	bl	19f84 <strlen>
   26a52:	4a26      	ldr	r2, [pc, #152]	; (26aec <construct_topic+0xd4>)
	int ret = snprintf(out_buf, AWS_JOBS_TOPIC_MAX_LEN, TOPIC_TEMPLATE,
   26a54:	686b      	ldr	r3, [r5, #4]
	const char *slash_after_job_id = strlen(job_id) > 0 ? "/" : "";
   26a56:	2800      	cmp	r0, #0
   26a58:	bf14      	ite	ne
   26a5a:	4610      	movne	r0, r2
   26a5c:	4650      	moveq	r0, sl
	int ret = snprintf(out_buf, AWS_JOBS_TOPIC_MAX_LEN, TOPIC_TEMPLATE,
   26a5e:	9403      	str	r4, [sp, #12]
   26a60:	e9cd 0301 	strd	r0, r3, [sp, #4]
   26a64:	f8cd 8000 	str.w	r8, [sp]
   26a68:	464b      	mov	r3, r9
   26a6a:	4a21      	ldr	r2, [pc, #132]	; (26af0 <construct_topic+0xd8>)
   26a6c:	2195      	movs	r1, #149	; 0x95
   26a6e:	4638      	mov	r0, r7
   26a70:	f015 ff96 	bl	3c9a0 <sniprintf>
			client_id, job_id, slash_after_job_id, conf->name,
			suffix);

	if (ret >= AWS_JOBS_TOPIC_MAX_LEN) {
   26a74:	2894      	cmp	r0, #148	; 0x94
	int ret = snprintf(out_buf, AWS_JOBS_TOPIC_MAX_LEN, TOPIC_TEMPLATE,
   26a76:	4604      	mov	r4, r0
	if (ret >= AWS_JOBS_TOPIC_MAX_LEN) {
   26a78:	dd18      	ble.n	26aac <construct_topic+0x94>
		LOG_ERR("Unable to fit formated string into to allocate "
   26a7a:	2301      	movs	r3, #1
   26a7c:	f04f 0400 	mov.w	r4, #0
   26a80:	4a1c      	ldr	r2, [pc, #112]	; (26af4 <construct_topic+0xdc>)
   26a82:	f363 0407 	bfi	r4, r3, #0, #8
   26a86:	4b1c      	ldr	r3, [pc, #112]	; (26af8 <construct_topic+0xe0>)
   26a88:	6868      	ldr	r0, [r5, #4]
   26a8a:	1a9b      	subs	r3, r3, r2
   26a8c:	08db      	lsrs	r3, r3, #3
   26a8e:	f363 148f 	bfi	r4, r3, #6, #10
   26a92:	f017 ff7a 	bl	3e98a <log_strdup>
   26a96:	4919      	ldr	r1, [pc, #100]	; (26afc <construct_topic+0xe4>)
   26a98:	4602      	mov	r2, r0
   26a9a:	4620      	mov	r0, r4
   26a9c:	f017 ff63 	bl	3e966 <log_string_sync>
			"memory for %s", log_strdup(conf->name));
		return -ENOMEM;
   26aa0:	f06f 040b 	mvn.w	r4, #11

	topic->topic.size = ret;
	topic->topic.utf8 = out_buf;
	topic->qos = MQTT_QOS_1_AT_LEAST_ONCE;
	return 0;
}
   26aa4:	4620      	mov	r0, r4
   26aa6:	b004      	add	sp, #16
   26aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (ret < 0) {
   26aac:	2800      	cmp	r0, #0
   26aae:	da14      	bge.n	26ada <construct_topic+0xc2>
		LOG_ERR("Output error for %s was encountered with return value "
   26ab0:	2301      	movs	r3, #1
   26ab2:	f04f 0600 	mov.w	r6, #0
   26ab6:	4a0f      	ldr	r2, [pc, #60]	; (26af4 <construct_topic+0xdc>)
   26ab8:	f363 0607 	bfi	r6, r3, #0, #8
   26abc:	4b0e      	ldr	r3, [pc, #56]	; (26af8 <construct_topic+0xe0>)
   26abe:	6868      	ldr	r0, [r5, #4]
   26ac0:	1a9b      	subs	r3, r3, r2
   26ac2:	08db      	lsrs	r3, r3, #3
   26ac4:	f363 168f 	bfi	r6, r3, #6, #10
   26ac8:	f017 ff5f 	bl	3e98a <log_strdup>
   26acc:	4623      	mov	r3, r4
   26ace:	4602      	mov	r2, r0
   26ad0:	490b      	ldr	r1, [pc, #44]	; (26b00 <construct_topic+0xe8>)
   26ad2:	4630      	mov	r0, r6
   26ad4:	f017 ff47 	bl	3e966 <log_string_sync>
		return ret;
   26ad8:	e7e4      	b.n	26aa4 <construct_topic+0x8c>
	topic->qos = MQTT_QOS_1_AT_LEAST_ONCE;
   26ada:	2301      	movs	r3, #1
	topic->topic.utf8 = out_buf;
   26adc:	e9c6 7000 	strd	r7, r0, [r6]
	topic->qos = MQTT_QOS_1_AT_LEAST_ONCE;
   26ae0:	7233      	strb	r3, [r6, #8]
	return 0;
   26ae2:	2400      	movs	r4, #0
   26ae4:	e7de      	b.n	26aa4 <construct_topic+0x8c>
		return -EINVAL;
   26ae6:	f06f 0415 	mvn.w	r4, #21
   26aea:	e7db      	b.n	26aa4 <construct_topic+0x8c>
   26aec:	00047530 	.word	0x00047530
   26af0:	00047984 	.word	0x00047984
   26af4:	00042314 	.word	0x00042314
   26af8:	00042334 	.word	0x00042334
   26afc:	000479a1 	.word	0x000479a1
   26b00:	000479de 	.word	0x000479de
   26b04:	000490e1 	.word	0x000490e1

00026b08 <reg_topic>:

static int reg_topic(struct mqtt_client *const client, u8_t *topic_buf,
		     struct topic_conf const *conf, const u8_t *job_id,
		     bool subscribe)
{
   26b08:	b5f0      	push	{r4, r5, r6, r7, lr}
   26b0a:	b089      	sub	sp, #36	; 0x24
   26b0c:	468c      	mov	ip, r1
   26b0e:	4617      	mov	r7, r2
   26b10:	4619      	mov	r1, r3
   26b12:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
	if (client == NULL) {
   26b16:	4604      	mov	r4, r0
   26b18:	2800      	cmp	r0, #0
   26b1a:	d036      	beq.n	26b8a <reg_topic+0x82>
		return -EINVAL;
	}

	struct mqtt_topic topic;
	int err = construct_topic(client->client_id.utf8, job_id, conf,
   26b1c:	2300      	movs	r3, #0
   26b1e:	ad05      	add	r5, sp, #20
   26b20:	9301      	str	r3, [sp, #4]
   26b22:	9500      	str	r5, [sp, #0]
   26b24:	4663      	mov	r3, ip
   26b26:	6c40      	ldr	r0, [r0, #68]	; 0x44
   26b28:	f7ff ff76 	bl	26a18 <construct_topic>
				  topic_buf, &topic, false);

	const struct mqtt_subscription_list subscription_list = {
   26b2c:	2301      	movs	r3, #1
   26b2e:	f8ad 3010 	strh.w	r3, [sp, #16]
   26b32:	683b      	ldr	r3, [r7, #0]
   26b34:	9503      	str	r5, [sp, #12]
   26b36:	f8ad 3012 	strh.w	r3, [sp, #18]
		.list = &topic,
		.list_count = 1,
		.message_id = conf->msg_id
	};

	if (err) {
   26b3a:	b9c0      	cbnz	r0, 26b6e <reg_topic+0x66>
		return err;
	}

	if (subscribe) {
   26b3c:	4a14      	ldr	r2, [pc, #80]	; (26b90 <reg_topic+0x88>)
   26b3e:	4b15      	ldr	r3, [pc, #84]	; (26b94 <reg_topic+0x8c>)
		LOG_INF("Subscribe: %s", log_strdup(topic.topic.utf8));
   26b40:	f04f 0500 	mov.w	r5, #0
   26b44:	1a9b      	subs	r3, r3, r2
   26b46:	2203      	movs	r2, #3
   26b48:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   26b4c:	f362 0507 	bfi	r5, r2, #0, #8
   26b50:	9805      	ldr	r0, [sp, #20]
   26b52:	f363 158f 	bfi	r5, r3, #6, #10
	if (subscribe) {
   26b56:	b166      	cbz	r6, 26b72 <reg_topic+0x6a>
		LOG_INF("Subscribe: %s", log_strdup(topic.topic.utf8));
   26b58:	f017 ff17 	bl	3e98a <log_strdup>
   26b5c:	490e      	ldr	r1, [pc, #56]	; (26b98 <reg_topic+0x90>)
   26b5e:	4602      	mov	r2, r0
   26b60:	4628      	mov	r0, r5
   26b62:	f017 ff00 	bl	3e966 <log_string_sync>
		return mqtt_subscribe(client, &subscription_list);
   26b66:	a903      	add	r1, sp, #12
   26b68:	4620      	mov	r0, r4
   26b6a:	f018 fceb 	bl	3f544 <mqtt_subscribe>
	}

	LOG_INF("Unsubscribe: %s", log_strdup(topic.topic.utf8));
	return mqtt_unsubscribe(client, &subscription_list);
}
   26b6e:	b009      	add	sp, #36	; 0x24
   26b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INF("Unsubscribe: %s", log_strdup(topic.topic.utf8));
   26b72:	f017 ff0a 	bl	3e98a <log_strdup>
   26b76:	4909      	ldr	r1, [pc, #36]	; (26b9c <reg_topic+0x94>)
   26b78:	4602      	mov	r2, r0
   26b7a:	4628      	mov	r0, r5
   26b7c:	f017 fef3 	bl	3e966 <log_string_sync>
	return mqtt_unsubscribe(client, &subscription_list);
   26b80:	a903      	add	r1, sp, #12
   26b82:	4620      	mov	r0, r4
   26b84:	f018 fd05 	bl	3f592 <mqtt_unsubscribe>
   26b88:	e7f1      	b.n	26b6e <reg_topic+0x66>
		return -EINVAL;
   26b8a:	f06f 0015 	mvn.w	r0, #21
   26b8e:	e7ee      	b.n	26b6e <reg_topic+0x66>
   26b90:	00042314 	.word	0x00042314
   26b94:	00042334 	.word	0x00042334
   26b98:	00047a3c 	.word	0x00047a3c
   26b9c:	00047a4a 	.word	0x00047a4a

00026ba0 <publish>:
}

static int publish(struct mqtt_client *const client, const u8_t *job_id,
		   const struct topic_conf *conf, u8_t *payload_data,
		   size_t payload_data_len, u8_t *topic_buf)
{
   26ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26ba4:	461f      	mov	r7, r3
	struct mqtt_topic topic;

	int ret = construct_topic(client->client_id.utf8, job_id, conf,
   26ba6:	2301      	movs	r3, #1
{
   26ba8:	b08c      	sub	sp, #48	; 0x30
	int ret = construct_topic(client->client_id.utf8, job_id, conf,
   26baa:	ad03      	add	r5, sp, #12
   26bac:	9301      	str	r3, [sp, #4]
   26bae:	9500      	str	r5, [sp, #0]
{
   26bb0:	4606      	mov	r6, r0
	int ret = construct_topic(client->client_id.utf8, job_id, conf,
   26bb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   26bb4:	6c40      	ldr	r0, [r0, #68]	; 0x44
   26bb6:	f7ff ff2f 	bl	26a18 <construct_topic>
				  topic_buf, &topic, true);

	if (ret) {
   26bba:	2800      	cmp	r0, #0
   26bbc:	d138      	bne.n	26c30 <publish+0x90>
		return ret;
	}

	LOG_INF("Publish topic: %s", log_strdup(topic.topic.utf8));
   26bbe:	2303      	movs	r3, #3
   26bc0:	f04f 0800 	mov.w	r8, #0
   26bc4:	4c1c      	ldr	r4, [pc, #112]	; (26c38 <publish+0x98>)
   26bc6:	f363 0807 	bfi	r8, r3, #0, #8
   26bca:	4b1c      	ldr	r3, [pc, #112]	; (26c3c <publish+0x9c>)
   26bcc:	9803      	ldr	r0, [sp, #12]
   26bce:	1ae4      	subs	r4, r4, r3
   26bd0:	f017 fedb 	bl	3e98a <log_strdup>
   26bd4:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   26bd8:	f364 188f 	bfi	r8, r4, #6, #10
   26bdc:	4602      	mov	r2, r0
   26bde:	4918      	ldr	r1, [pc, #96]	; (26c40 <publish+0xa0>)
   26be0:	4640      	mov	r0, r8
   26be2:	f017 fec0 	bl	3e966 <log_string_sync>
	LOG_INF("Publish payload %s", log_strdup(payload_data));
   26be6:	f04f 0800 	mov.w	r8, #0
   26bea:	2303      	movs	r3, #3
   26bec:	4638      	mov	r0, r7
   26bee:	f363 0807 	bfi	r8, r3, #0, #8
   26bf2:	f017 feca 	bl	3e98a <log_strdup>
   26bf6:	f364 188f 	bfi	r8, r4, #6, #10
   26bfa:	4602      	mov	r2, r0
   26bfc:	4911      	ldr	r1, [pc, #68]	; (26c44 <publish+0xa4>)
   26bfe:	4640      	mov	r0, r8
   26c00:	f017 feb1 	bl	3e966 <log_string_sync>

	struct mqtt_publish_param param = {
   26c04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   26c08:	9b12      	ldr	r3, [sp, #72]	; 0x48
   26c0a:	ac06      	add	r4, sp, #24
   26c0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   26c10:	930a      	str	r3, [sp, #40]	; 0x28
   26c12:	9709      	str	r7, [sp, #36]	; 0x24
		.message.topic = topic,
		.message.payload.data = payload_data,
		.message.payload.len = payload_data_len,
		.message_id = sys_rand32_get(),
   26c14:	f7f8 fc72 	bl	1f4fc <sys_rand32_get>
	struct mqtt_publish_param param = {
   26c18:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
   26c1c:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
   26c20:	f023 0303 	bic.w	r3, r3, #3
		.dup_flag = 0,
		.retain_flag = 0,
	};

	return mqtt_publish(client, &param);
   26c24:	4621      	mov	r1, r4
   26c26:	4630      	mov	r0, r6
	struct mqtt_publish_param param = {
   26c28:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	return mqtt_publish(client, &param);
   26c2c:	f018 fc0e 	bl	3f44c <mqtt_publish>
}
   26c30:	b00c      	add	sp, #48	; 0x30
   26c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26c36:	bf00      	nop
   26c38:	00042334 	.word	0x00042334
   26c3c:	00042314 	.word	0x00042314
   26c40:	00047a17 	.word	0x00047a17
   26c44:	00047a29 	.word	0x00047a29

00026c48 <aws_jobs_subscribe_topic_notify_next>:
	return reg_topic(client, topic_buf, &TOPIC_NOTIFY_NEXT_CONF, "", true);
   26c48:	2301      	movs	r3, #1
{
   26c4a:	b507      	push	{r0, r1, r2, lr}
	return reg_topic(client, topic_buf, &TOPIC_NOTIFY_NEXT_CONF, "", true);
   26c4c:	4a03      	ldr	r2, [pc, #12]	; (26c5c <aws_jobs_subscribe_topic_notify_next+0x14>)
   26c4e:	9300      	str	r3, [sp, #0]
   26c50:	4b03      	ldr	r3, [pc, #12]	; (26c60 <aws_jobs_subscribe_topic_notify_next+0x18>)
   26c52:	f7ff ff59 	bl	26b08 <reg_topic>
}
   26c56:	b003      	add	sp, #12
   26c58:	f85d fb04 	ldr.w	pc, [sp], #4
   26c5c:	00042c04 	.word	0x00042c04
   26c60:	000490e1 	.word	0x000490e1

00026c64 <aws_jobs_unsubscribe_topic_notify_next>:
	return reg_topic(client, topic_buf, &TOPIC_NOTIFY_NEXT_CONF, "", false);
   26c64:	2300      	movs	r3, #0
{
   26c66:	b507      	push	{r0, r1, r2, lr}
	return reg_topic(client, topic_buf, &TOPIC_NOTIFY_NEXT_CONF, "", false);
   26c68:	4a03      	ldr	r2, [pc, #12]	; (26c78 <aws_jobs_unsubscribe_topic_notify_next+0x14>)
   26c6a:	9300      	str	r3, [sp, #0]
   26c6c:	4b03      	ldr	r3, [pc, #12]	; (26c7c <aws_jobs_unsubscribe_topic_notify_next+0x18>)
   26c6e:	f7ff ff4b 	bl	26b08 <reg_topic>
}
   26c72:	b003      	add	sp, #12
   26c74:	f85d fb04 	ldr.w	pc, [sp], #4
   26c78:	00042c04 	.word	0x00042c04
   26c7c:	000490e1 	.word	0x000490e1

00026c80 <aws_jobs_subscribe_topic_get>:
{
   26c80:	b513      	push	{r0, r1, r4, lr}
	return reg_topic(client, topic_buf, &TOPIC_GET_CONF, job_id, true);
   26c82:	2301      	movs	r3, #1
{
   26c84:	4614      	mov	r4, r2
	return reg_topic(client, topic_buf, &TOPIC_GET_CONF, job_id, true);
   26c86:	9300      	str	r3, [sp, #0]
   26c88:	4a03      	ldr	r2, [pc, #12]	; (26c98 <aws_jobs_subscribe_topic_get+0x18>)
   26c8a:	460b      	mov	r3, r1
   26c8c:	4621      	mov	r1, r4
   26c8e:	f7ff ff3b 	bl	26b08 <reg_topic>
}
   26c92:	b002      	add	sp, #8
   26c94:	bd10      	pop	{r4, pc}
   26c96:	bf00      	nop
   26c98:	00042bf8 	.word	0x00042bf8

00026c9c <aws_jobs_subscribe_topic_update>:
{
   26c9c:	b513      	push	{r0, r1, r4, lr}
	return reg_topic(client, topic_buf, &TOPIC_UPDATE_CONF, job_id, true);
   26c9e:	2301      	movs	r3, #1
{
   26ca0:	4614      	mov	r4, r2
	return reg_topic(client, topic_buf, &TOPIC_UPDATE_CONF, job_id, true);
   26ca2:	9300      	str	r3, [sp, #0]
   26ca4:	4a03      	ldr	r2, [pc, #12]	; (26cb4 <aws_jobs_subscribe_topic_update+0x18>)
   26ca6:	460b      	mov	r3, r1
   26ca8:	4621      	mov	r1, r4
   26caa:	f7ff ff2d 	bl	26b08 <reg_topic>
}
   26cae:	b002      	add	sp, #8
   26cb0:	bd10      	pop	{r4, pc}
   26cb2:	bf00      	nop
   26cb4:	00042c10 	.word	0x00042c10

00026cb8 <aws_jobs_update_job_execution>:
				  const u8_t *job_id,
				  enum execution_status status,
				  const u8_t *status_details,
				  int expected_version,
				  const u8_t *client_token, u8_t *topic_buf)
{
   26cb8:	b570      	push	{r4, r5, r6, lr}
   26cba:	f5ad 6dab 	sub.w	sp, sp, #1368	; 0x558
   26cbe:	460e      	mov	r6, r1
   26cc0:	4605      	mov	r5, r0
   26cc2:	f8dd 156c 	ldr.w	r1, [sp, #1388]	; 0x56c
	/* The rest of the parameters are checked later */
	if (status_details == NULL || client_token == NULL) {
   26cc6:	2b00      	cmp	r3, #0
   26cc8:	d046      	beq.n	26d58 <aws_jobs_update_job_execution+0xa0>
   26cca:	2900      	cmp	r1, #0
   26ccc:	d044      	beq.n	26d58 <aws_jobs_update_job_execution+0xa0>
	 * is actually 32kb set it to what is the limiting factor which is the
	 * MQTT buffer size for reception.
	 */
	u8_t update_job_payload[CONFIG_UPDATE_JOB_PAYLOAD_LEN];

	int ret = snprintf(update_job_payload, sizeof(update_job_payload),
   26cce:	9102      	str	r1, [sp, #8]
   26cd0:	f8dd 1568 	ldr.w	r1, [sp, #1384]	; 0x568
   26cd4:	a804      	add	r0, sp, #16
   26cd6:	e9cd 3100 	strd	r3, r1, [sp]
   26cda:	4b21      	ldr	r3, [pc, #132]	; (26d60 <aws_jobs_update_job_execution+0xa8>)
   26cdc:	f240 5146 	movw	r1, #1350	; 0x546
   26ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   26ce4:	4a1f      	ldr	r2, [pc, #124]	; (26d64 <aws_jobs_update_job_execution+0xac>)
   26ce6:	f015 fe5b 	bl	3c9a0 <sniprintf>
			   UPDATE_JOB_PAYLOAD, execution_status_strings[status],
			   status_details, expected_version, client_token);

	if (ret >= CONFIG_UPDATE_JOB_PAYLOAD_LEN) {
   26cea:	f240 5345 	movw	r3, #1349	; 0x545
   26cee:	4298      	cmp	r0, r3
	int ret = snprintf(update_job_payload, sizeof(update_job_payload),
   26cf0:	4604      	mov	r4, r0
	if (ret >= CONFIG_UPDATE_JOB_PAYLOAD_LEN) {
   26cf2:	dd13      	ble.n	26d1c <aws_jobs_update_job_execution+0x64>
		LOG_ERR("Unable to fit formated string in provided buffer.");
   26cf4:	2301      	movs	r3, #1
   26cf6:	f04f 0000 	mov.w	r0, #0
   26cfa:	4a1b      	ldr	r2, [pc, #108]	; (26d68 <aws_jobs_update_job_execution+0xb0>)
   26cfc:	f363 0007 	bfi	r0, r3, #0, #8
   26d00:	4b1a      	ldr	r3, [pc, #104]	; (26d6c <aws_jobs_update_job_execution+0xb4>)
   26d02:	491b      	ldr	r1, [pc, #108]	; (26d70 <aws_jobs_update_job_execution+0xb8>)
   26d04:	1a9b      	subs	r3, r3, r2
   26d06:	08db      	lsrs	r3, r3, #3
   26d08:	f363 108f 	bfi	r0, r3, #6, #10
   26d0c:	f017 fe2b 	bl	3e966 <log_string_sync>
		return -ENOMEM;
   26d10:	f06f 040b 	mvn.w	r4, #11
	}

	return publish(client, job_id, &TOPIC_UPDATE_CONF, update_job_payload,
		       ret, topic_buf);

}
   26d14:	4620      	mov	r0, r4
   26d16:	f50d 6dab 	add.w	sp, sp, #1368	; 0x558
   26d1a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (ret < 0) {
   26d1c:	2800      	cmp	r0, #0
   26d1e:	da0f      	bge.n	26d40 <aws_jobs_update_job_execution+0x88>
		LOG_ERR("Error when creating payload %d", ret);
   26d20:	2301      	movs	r3, #1
   26d22:	f04f 0000 	mov.w	r0, #0
   26d26:	4a10      	ldr	r2, [pc, #64]	; (26d68 <aws_jobs_update_job_execution+0xb0>)
   26d28:	f363 0007 	bfi	r0, r3, #0, #8
   26d2c:	4b0f      	ldr	r3, [pc, #60]	; (26d6c <aws_jobs_update_job_execution+0xb4>)
   26d2e:	4911      	ldr	r1, [pc, #68]	; (26d74 <aws_jobs_update_job_execution+0xbc>)
   26d30:	1a9b      	subs	r3, r3, r2
   26d32:	08db      	lsrs	r3, r3, #3
   26d34:	f363 108f 	bfi	r0, r3, #6, #10
   26d38:	4622      	mov	r2, r4
   26d3a:	f017 fe14 	bl	3e966 <log_string_sync>
		return ret;
   26d3e:	e7e9      	b.n	26d14 <aws_jobs_update_job_execution+0x5c>
	return publish(client, job_id, &TOPIC_UPDATE_CONF, update_job_payload,
   26d40:	f8dd 3570 	ldr.w	r3, [sp, #1392]	; 0x570
   26d44:	4a0c      	ldr	r2, [pc, #48]	; (26d78 <aws_jobs_update_job_execution+0xc0>)
   26d46:	e9cd 0300 	strd	r0, r3, [sp]
   26d4a:	4631      	mov	r1, r6
   26d4c:	ab04      	add	r3, sp, #16
   26d4e:	4628      	mov	r0, r5
   26d50:	f7ff ff26 	bl	26ba0 <publish>
   26d54:	4604      	mov	r4, r0
   26d56:	e7dd      	b.n	26d14 <aws_jobs_update_job_execution+0x5c>
		return -EINVAL;
   26d58:	f06f 0415 	mvn.w	r4, #21
   26d5c:	e7da      	b.n	26d14 <aws_jobs_update_job_execution+0x5c>
   26d5e:	bf00      	nop
   26d60:	00042c1c 	.word	0x00042c1c
   26d64:	000478e3 	.word	0x000478e3
   26d68:	00042314 	.word	0x00042314
   26d6c:	00042334 	.word	0x00042334
   26d70:	00047933 	.word	0x00047933
   26d74:	00047965 	.word	0x00047965
   26d78:	00042c10 	.word	0x00042c10

00026d7c <aws_jobs_get_job_execution>:

#define JOB_ID_GET_PAYLOAD "{\"clientToken\": \"\"}"
int aws_jobs_get_job_execution(struct mqtt_client *const client,
			       const char *job_id, u8_t *topic_buf)
{
   26d7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return publish(client, job_id, &TOPIC_GET_CONF, JOB_ID_GET_PAYLOAD,
   26d7e:	4c08      	ldr	r4, [pc, #32]	; (26da0 <aws_jobs_get_job_execution+0x24>)
{
   26d80:	4605      	mov	r5, r0
	return publish(client, job_id, &TOPIC_GET_CONF, JOB_ID_GET_PAYLOAD,
   26d82:	4620      	mov	r0, r4
{
   26d84:	4617      	mov	r7, r2
   26d86:	460e      	mov	r6, r1
	return publish(client, job_id, &TOPIC_GET_CONF, JOB_ID_GET_PAYLOAD,
   26d88:	f7f3 f8fc 	bl	19f84 <strlen>
   26d8c:	4623      	mov	r3, r4
   26d8e:	e9cd 0700 	strd	r0, r7, [sp]
   26d92:	4a04      	ldr	r2, [pc, #16]	; (26da4 <aws_jobs_get_job_execution+0x28>)
   26d94:	4631      	mov	r1, r6
   26d96:	4628      	mov	r0, r5
   26d98:	f7ff ff02 	bl	26ba0 <publish>
		       strlen(JOB_ID_GET_PAYLOAD), topic_buf);
}
   26d9c:	b003      	add	sp, #12
   26d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26da0:	000478cf 	.word	0x000478cf
   26da4:	00042bf8 	.word	0x00042bf8

00026da8 <update_job_execution.constprop.0>:

#define AWS_FOTA_STATUS_DETAILS_TEMPLATE "{\"nextState\":\"%s\"}"
#define STATUS_DETAILS_MAX_LEN  (sizeof("{\"nextState\":\"\"}") \
				+ (sizeof("download_firmware") + 2))

static int update_job_execution(struct mqtt_client *const client,
   26da8:	b5f0      	push	{r4, r5, r6, r7, lr}
   26daa:	461f      	mov	r7, r3
				enum fota_status next_state,
				int version_number,
				const char *client_token)
{
	char status_details[STATUS_DETAILS_MAX_LEN + 1];
	int ret = snprintf(status_details,
   26dac:	4b25      	ldr	r3, [pc, #148]	; (26e44 <update_job_execution.constprop.0+0x9c>)
static int update_job_execution(struct mqtt_client *const client,
   26dae:	b08f      	sub	sp, #60	; 0x3c
	int ret = snprintf(status_details,
   26db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
static int update_job_execution(struct mqtt_client *const client,
   26db4:	4605      	mov	r5, r0
   26db6:	460e      	mov	r6, r1
	int ret = snprintf(status_details,
   26db8:	4a23      	ldr	r2, [pc, #140]	; (26e48 <update_job_execution.constprop.0+0xa0>)
   26dba:	2126      	movs	r1, #38	; 0x26
   26dbc:	a804      	add	r0, sp, #16
   26dbe:	f015 fdef 	bl	3c9a0 <sniprintf>
			   sizeof(status_details),
			   AWS_FOTA_STATUS_DETAILS_TEMPLATE,
			   fota_status_strings[next_state]);
	__ASSERT(ret >= 0, "snprintf returned error %d\n", ret);
   26dc2:	1e04      	subs	r4, r0, #0
   26dc4:	da1c      	bge.n	26e00 <update_job_execution.constprop.0+0x58>
   26dc6:	2361      	movs	r3, #97	; 0x61
   26dc8:	4a20      	ldr	r2, [pc, #128]	; (26e4c <update_job_execution.constprop.0+0xa4>)
   26dca:	4921      	ldr	r1, [pc, #132]	; (26e50 <update_job_execution.constprop.0+0xa8>)
   26dcc:	4821      	ldr	r0, [pc, #132]	; (26e54 <update_job_execution.constprop.0+0xac>)
   26dce:	f017 fdad 	bl	3e92c <printk>
   26dd2:	4621      	mov	r1, r4
   26dd4:	4820      	ldr	r0, [pc, #128]	; (26e58 <update_job_execution.constprop.0+0xb0>)
   26dd6:	f017 fda9 	bl	3e92c <printk>
   26dda:	2161      	movs	r1, #97	; 0x61
   26ddc:	481b      	ldr	r0, [pc, #108]	; (26e4c <update_job_execution.constprop.0+0xa4>)
   26dde:	f017 fdb2 	bl	3e946 <assert_post_action>
	__ASSERT(ret < STATUS_DETAILS_MAX_LEN,
   26de2:	2363      	movs	r3, #99	; 0x63
   26de4:	4a19      	ldr	r2, [pc, #100]	; (26e4c <update_job_execution.constprop.0+0xa4>)
   26de6:	491d      	ldr	r1, [pc, #116]	; (26e5c <update_job_execution.constprop.0+0xb4>)
   26de8:	481a      	ldr	r0, [pc, #104]	; (26e54 <update_job_execution.constprop.0+0xac>)
   26dea:	f017 fd9f 	bl	3e92c <printk>
   26dee:	1c61      	adds	r1, r4, #1
   26df0:	481b      	ldr	r0, [pc, #108]	; (26e60 <update_job_execution.constprop.0+0xb8>)
   26df2:	f017 fd9b 	bl	3e92c <printk>
   26df6:	2163      	movs	r1, #99	; 0x63
   26df8:	4814      	ldr	r0, [pc, #80]	; (26e4c <update_job_execution.constprop.0+0xa4>)
   26dfa:	f017 fda4 	bl	3e946 <assert_post_action>
   26dfe:	e001      	b.n	26e04 <update_job_execution.constprop.0+0x5c>
   26e00:	2c24      	cmp	r4, #36	; 0x24
   26e02:	dcee      	bgt.n	26de2 <update_job_execution.constprop.0+0x3a>
		"Not enough space for status, need %d bytes\n", ret+1);

	ret =  aws_jobs_update_job_execution(client, job_id, state,
   26e04:	4b17      	ldr	r3, [pc, #92]	; (26e64 <update_job_execution.constprop.0+0xbc>)
   26e06:	4632      	mov	r2, r6
   26e08:	9302      	str	r3, [sp, #8]
   26e0a:	4b17      	ldr	r3, [pc, #92]	; (26e68 <update_job_execution.constprop.0+0xc0>)
   26e0c:	4917      	ldr	r1, [pc, #92]	; (26e6c <update_job_execution.constprop.0+0xc4>)
   26e0e:	e9cd 7300 	strd	r7, r3, [sp]
   26e12:	4628      	mov	r0, r5
   26e14:	ab04      	add	r3, sp, #16
   26e16:	f7ff ff4f 	bl	26cb8 <aws_jobs_update_job_execution>
					     status_details, version_number,
					     client_token, update_topic);

	if (ret < 0) {
   26e1a:	1e04      	subs	r4, r0, #0
   26e1c:	da0e      	bge.n	26e3c <update_job_execution.constprop.0+0x94>
		LOG_ERR("aws_jobs_update_job_execution failed: %d", ret);
   26e1e:	2301      	movs	r3, #1
   26e20:	f04f 0000 	mov.w	r0, #0
   26e24:	4a12      	ldr	r2, [pc, #72]	; (26e70 <update_job_execution.constprop.0+0xc8>)
   26e26:	f363 0007 	bfi	r0, r3, #0, #8
   26e2a:	4b12      	ldr	r3, [pc, #72]	; (26e74 <update_job_execution.constprop.0+0xcc>)
   26e2c:	4912      	ldr	r1, [pc, #72]	; (26e78 <update_job_execution.constprop.0+0xd0>)
   26e2e:	1a9b      	subs	r3, r3, r2
   26e30:	08db      	lsrs	r3, r3, #3
   26e32:	f363 108f 	bfi	r0, r3, #6, #10
   26e36:	4622      	mov	r2, r4
   26e38:	f017 fd95 	bl	3e966 <log_string_sync>
	}

	return ret;
}
   26e3c:	4620      	mov	r0, r4
   26e3e:	b00f      	add	sp, #60	; 0x3c
   26e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26e42:	bf00      	nop
   26e44:	00042c3c 	.word	0x00042c3c
   26e48:	00047dff 	.word	0x00047dff
   26e4c:	00047e12 	.word	0x00047e12
   26e50:	00047e64 	.word	0x00047e64
   26e54:	00044643 	.word	0x00044643
   26e58:	00047e6d 	.word	0x00047e6d
   26e5c:	00047e8b 	.word	0x00047e8b
   26e60:	00047ed6 	.word	0x00047ed6
   26e64:	2002bd4c 	.word	0x2002bd4c
   26e68:	000490e1 	.word	0x000490e1
   26e6c:	2002b730 	.word	0x2002b730
   26e70:	00042314 	.word	0x00042314
   26e74:	0004232c 	.word	0x0004232c
   26e78:	00047f04 	.word	0x00047f04

00026e7c <http_fota_handler>:
	}
	return 0;
}

static void http_fota_handler(enum fota_download_evt_id evt)
{
   26e7c:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(c != NULL);
   26e7e:	4c25      	ldr	r4, [pc, #148]	; (26f14 <http_fota_handler+0x98>)
{
   26e80:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(c != NULL);
   26e82:	6823      	ldr	r3, [r4, #0]
   26e84:	b95b      	cbnz	r3, 26e9e <http_fota_handler+0x22>
   26e86:	4924      	ldr	r1, [pc, #144]	; (26f18 <http_fota_handler+0x9c>)
   26e88:	4824      	ldr	r0, [pc, #144]	; (26f1c <http_fota_handler+0xa0>)
   26e8a:	f240 1355 	movw	r3, #341	; 0x155
   26e8e:	4a24      	ldr	r2, [pc, #144]	; (26f20 <http_fota_handler+0xa4>)
   26e90:	f017 fd4c 	bl	3e92c <printk>
   26e94:	f240 1155 	movw	r1, #341	; 0x155
   26e98:	4821      	ldr	r0, [pc, #132]	; (26f20 <http_fota_handler+0xa4>)
   26e9a:	f017 fd54 	bl	3e946 <assert_post_action>

	int err = 0;

	switch (evt) {
   26e9e:	b115      	cbz	r5, 26ea6 <http_fota_handler+0x2a>
   26ea0:	2d01      	cmp	r5, #1
   26ea2:	d01f      	beq.n	26ee4 <http_fota_handler+0x68>
				     fota_state, doc_version_number, "");
		callback(AWS_FOTA_EVT_ERROR);
		break;
	}

}
   26ea4:	bd70      	pop	{r4, r5, r6, pc}
		LOG_INF("FOTA download completed evt recived");
   26ea6:	2303      	movs	r3, #3
   26ea8:	f04f 0000 	mov.w	r0, #0
   26eac:	4a1d      	ldr	r2, [pc, #116]	; (26f24 <http_fota_handler+0xa8>)
   26eae:	f363 0007 	bfi	r0, r3, #0, #8
   26eb2:	4b1d      	ldr	r3, [pc, #116]	; (26f28 <http_fota_handler+0xac>)
   26eb4:	491d      	ldr	r1, [pc, #116]	; (26f2c <http_fota_handler+0xb0>)
   26eb6:	1a9b      	subs	r3, r3, r2
   26eb8:	08db      	lsrs	r3, r3, #3
   26eba:	f363 108f 	bfi	r0, r3, #6, #10
   26ebe:	f017 fd52 	bl	3e966 <log_string_sync>
		fota_state = APPLY_UPDATE;
   26ec2:	2202      	movs	r2, #2
   26ec4:	4b1a      	ldr	r3, [pc, #104]	; (26f30 <http_fota_handler+0xb4>)
		err = update_job_execution(c, job_id, AWS_JOBS_IN_PROGRESS,
   26ec6:	2101      	movs	r1, #1
		fota_state = APPLY_UPDATE;
   26ec8:	701a      	strb	r2, [r3, #0]
		err = update_job_execution(c, job_id, AWS_JOBS_IN_PROGRESS,
   26eca:	4b1a      	ldr	r3, [pc, #104]	; (26f34 <http_fota_handler+0xb8>)
   26ecc:	6820      	ldr	r0, [r4, #0]
   26ece:	681b      	ldr	r3, [r3, #0]
   26ed0:	f7ff ff6a 	bl	26da8 <update_job_execution.constprop.0>
		if (err != 0) {
   26ed4:	2800      	cmp	r0, #0
   26ed6:	d0e5      	beq.n	26ea4 <http_fota_handler+0x28>
}
   26ed8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			callback(AWS_FOTA_EVT_ERROR);
   26edc:	4b16      	ldr	r3, [pc, #88]	; (26f38 <http_fota_handler+0xbc>)
   26ede:	2001      	movs	r0, #1
   26ee0:	681b      	ldr	r3, [r3, #0]
   26ee2:	4718      	bx	r3
		LOG_ERR("FOTA download failed, report back");
   26ee4:	2301      	movs	r3, #1
   26ee6:	f04f 0000 	mov.w	r0, #0
   26eea:	4a0e      	ldr	r2, [pc, #56]	; (26f24 <http_fota_handler+0xa8>)
   26eec:	f363 0007 	bfi	r0, r3, #0, #8
   26ef0:	4b0d      	ldr	r3, [pc, #52]	; (26f28 <http_fota_handler+0xac>)
   26ef2:	4912      	ldr	r1, [pc, #72]	; (26f3c <http_fota_handler+0xc0>)
   26ef4:	1a9b      	subs	r3, r3, r2
   26ef6:	08db      	lsrs	r3, r3, #3
   26ef8:	f363 108f 	bfi	r0, r3, #6, #10
   26efc:	f017 fd33 	bl	3e966 <log_string_sync>
		(void) update_job_execution(c, job_id, AWS_JOBS_FAILED,
   26f00:	4b0c      	ldr	r3, [pc, #48]	; (26f34 <http_fota_handler+0xb8>)
   26f02:	4a0b      	ldr	r2, [pc, #44]	; (26f30 <http_fota_handler+0xb4>)
   26f04:	681b      	ldr	r3, [r3, #0]
   26f06:	7812      	ldrb	r2, [r2, #0]
   26f08:	2103      	movs	r1, #3
   26f0a:	6820      	ldr	r0, [r4, #0]
   26f0c:	f7ff ff4c 	bl	26da8 <update_job_execution.constprop.0>
		callback(AWS_FOTA_EVT_ERROR);
   26f10:	e7e2      	b.n	26ed8 <http_fota_handler+0x5c>
   26f12:	bf00      	nop
   26f14:	200246cc 	.word	0x200246cc
   26f18:	00047d7b 	.word	0x00047d7b
   26f1c:	00044643 	.word	0x00044643
   26f20:	00047e12 	.word	0x00047e12
   26f24:	00042314 	.word	0x00042314
   26f28:	0004232c 	.word	0x0004232c
   26f2c:	00047d8c 	.word	0x00047d8c
   26f30:	2002b59b 	.word	0x2002b59b
   26f34:	2003128c 	.word	0x2003128c
   26f38:	200246d0 	.word	0x200246d0
   26f3c:	00047db0 	.word	0x00047db0

00026f40 <get_published_payload.constprop.1>:
	if (length > sizeof(payload_buf)) {
   26f40:	f240 5346 	movw	r3, #1350	; 0x546
static int get_published_payload(struct mqtt_client *client, u8_t *write_buf,
   26f44:	b570      	push	{r4, r5, r6, lr}
	u8_t *end = buf + length;
   26f46:	4c0d      	ldr	r4, [pc, #52]	; (26f7c <get_published_payload.constprop.1+0x3c>)
	if (length > sizeof(payload_buf)) {
   26f48:	4299      	cmp	r1, r3
static int get_published_payload(struct mqtt_client *client, u8_t *write_buf,
   26f4a:	4606      	mov	r6, r0
	u8_t *end = buf + length;
   26f4c:	eb04 0501 	add.w	r5, r4, r1
	if (length > sizeof(payload_buf)) {
   26f50:	d80d      	bhi.n	26f6e <get_published_payload.constprop.1+0x2e>
	while (buf < end) {
   26f52:	42a5      	cmp	r5, r4
   26f54:	d801      	bhi.n	26f5a <get_published_payload.constprop.1+0x1a>
	return 0;
   26f56:	2000      	movs	r0, #0
}
   26f58:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buf, end - buf);
   26f5a:	1b2a      	subs	r2, r5, r4
   26f5c:	4621      	mov	r1, r4
   26f5e:	4630      	mov	r0, r6
   26f60:	f018 fbb2 	bl	3f6c8 <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   26f64:	2800      	cmp	r0, #0
   26f66:	dbf7      	blt.n	26f58 <get_published_payload.constprop.1+0x18>
		} else if (ret == 0) {
   26f68:	d004      	beq.n	26f74 <get_published_payload.constprop.1+0x34>
		buf += ret;
   26f6a:	4404      	add	r4, r0
   26f6c:	e7f1      	b.n	26f52 <get_published_payload.constprop.1+0x12>
		return -EMSGSIZE;
   26f6e:	f06f 0079 	mvn.w	r0, #121	; 0x79
   26f72:	e7f1      	b.n	26f58 <get_published_payload.constprop.1+0x18>
			return -EIO;
   26f74:	f06f 0004 	mvn.w	r0, #4
   26f78:	e7ee      	b.n	26f58 <get_published_payload.constprop.1+0x18>
   26f7a:	bf00      	nop
   26f7c:	2002b806 	.word	0x2002b806

00026f80 <aws_fota_mqtt_evt_handler>:
{
   26f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (evt->type) {
   26f84:	780b      	ldrb	r3, [r1, #0]
{
   26f86:	b085      	sub	sp, #20
   26f88:	4606      	mov	r6, r0
   26f8a:	460f      	mov	r7, r1
	switch (evt->type) {
   26f8c:	2b07      	cmp	r3, #7
   26f8e:	f200 818a 	bhi.w	272a6 <aws_fota_mqtt_evt_handler+0x326>
   26f92:	e8df f013 	tbh	[pc, r3, lsl #1]
   26f96:	0008      	.short	0x0008
   26f98:	00380188 	.word	0x00380188
   26f9c:	018801dd 	.word	0x018801dd
   26fa0:	01880188 	.word	0x01880188
   26fa4:	01ef      	.short	0x01ef
		if (evt->result != 0) {
   26fa6:	69cb      	ldr	r3, [r1, #28]
   26fa8:	2b00      	cmp	r3, #0
   26faa:	f040 817c 	bne.w	272a6 <aws_fota_mqtt_evt_handler+0x326>
		err = aws_jobs_subscribe_topic_notify_next(client,
   26fae:	49c5      	ldr	r1, [pc, #788]	; (272c4 <aws_fota_mqtt_evt_handler+0x344>)
   26fb0:	f7ff fe4a 	bl	26c48 <aws_jobs_subscribe_topic_notify_next>
		if (err) {
   26fb4:	4604      	mov	r4, r0
   26fb6:	b188      	cbz	r0, 26fdc <aws_fota_mqtt_evt_handler+0x5c>
			LOG_ERR("Unable to subscribe to notify-next topic");
   26fb8:	2301      	movs	r3, #1
   26fba:	f04f 0000 	mov.w	r0, #0
   26fbe:	4ac2      	ldr	r2, [pc, #776]	; (272c8 <aws_fota_mqtt_evt_handler+0x348>)
   26fc0:	f363 0007 	bfi	r0, r3, #0, #8
   26fc4:	4bc1      	ldr	r3, [pc, #772]	; (272cc <aws_fota_mqtt_evt_handler+0x34c>)
   26fc6:	49c2      	ldr	r1, [pc, #776]	; (272d0 <aws_fota_mqtt_evt_handler+0x350>)
   26fc8:	1a9b      	subs	r3, r3, r2
   26fca:	08db      	lsrs	r3, r3, #3
   26fcc:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Unable to subscribe to jobs/$next/get");
   26fd0:	f017 fcc9 	bl	3e966 <log_string_sync>
}
   26fd4:	4620      	mov	r0, r4
   26fd6:	b005      	add	sp, #20
   26fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = aws_jobs_subscribe_topic_get(client, "$next", get_topic);
   26fdc:	4abd      	ldr	r2, [pc, #756]	; (272d4 <aws_fota_mqtt_evt_handler+0x354>)
   26fde:	49be      	ldr	r1, [pc, #760]	; (272d8 <aws_fota_mqtt_evt_handler+0x358>)
   26fe0:	4630      	mov	r0, r6
   26fe2:	f7ff fe4d 	bl	26c80 <aws_jobs_subscribe_topic_get>
		if (err) {
   26fe6:	4604      	mov	r4, r0
   26fe8:	2800      	cmp	r0, #0
   26fea:	d0f3      	beq.n	26fd4 <aws_fota_mqtt_evt_handler+0x54>
			LOG_ERR("Unable to subscribe to jobs/$next/get");
   26fec:	2301      	movs	r3, #1
   26fee:	f04f 0000 	mov.w	r0, #0
   26ff2:	4ab5      	ldr	r2, [pc, #724]	; (272c8 <aws_fota_mqtt_evt_handler+0x348>)
   26ff4:	f363 0007 	bfi	r0, r3, #0, #8
   26ff8:	4bb4      	ldr	r3, [pc, #720]	; (272cc <aws_fota_mqtt_evt_handler+0x34c>)
   26ffa:	49b8      	ldr	r1, [pc, #736]	; (272dc <aws_fota_mqtt_evt_handler+0x35c>)
   26ffc:	1a9b      	subs	r3, r3, r2
   26ffe:	08db      	lsrs	r3, r3, #3
   27000:	f363 108f 	bfi	r0, r3, #6, #10
   27004:	e7e4      	b.n	26fd0 <aws_fota_mqtt_evt_handler+0x50>
	LOG_INF("Received topic: %s", log_strdup(topic));
   27006:	2303      	movs	r3, #3
		err = aws_fota_on_publish_evt(client,
   27008:	e9d1 4901 	ldrd	r4, r9, [r1, #4]
	LOG_INF("Received topic: %s", log_strdup(topic));
   2700c:	f04f 0a00 	mov.w	sl, #0
   27010:	4dae      	ldr	r5, [pc, #696]	; (272cc <aws_fota_mqtt_evt_handler+0x34c>)
   27012:	f363 0a07 	bfi	sl, r3, #0, #8
   27016:	4bac      	ldr	r3, [pc, #688]	; (272c8 <aws_fota_mqtt_evt_handler+0x348>)
   27018:	4620      	mov	r0, r4
   2701a:	1aed      	subs	r5, r5, r3
		err = aws_fota_on_publish_evt(client,
   2701c:	f8d1 8014 	ldr.w	r8, [r1, #20]
	LOG_INF("Received topic: %s", log_strdup(topic));
   27020:	f017 fcb3 	bl	3e98a <log_strdup>
   27024:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   27028:	f365 1a8f 	bfi	sl, r5, #6, #10
   2702c:	4602      	mov	r2, r0
   2702e:	49ac      	ldr	r1, [pc, #688]	; (272e0 <aws_fota_mqtt_evt_handler+0x360>)
   27030:	4650      	mov	r0, sl
   27032:	f017 fc98 	bl	3e966 <log_string_sync>
	bool is_get_next_topic = aws_jobs_cmp(get_topic, topic, topic_len, "");
   27036:	4bab      	ldr	r3, [pc, #684]	; (272e4 <aws_fota_mqtt_evt_handler+0x364>)
   27038:	464a      	mov	r2, r9
   2703a:	4621      	mov	r1, r4
   2703c:	48a5      	ldr	r0, [pc, #660]	; (272d4 <aws_fota_mqtt_evt_handler+0x354>)
   2703e:	f019 fc5d 	bl	408fc <aws_jobs_cmp>
	bool is_notify_next_topic = aws_jobs_cmp(notify_next_topic, topic,
   27042:	4ba8      	ldr	r3, [pc, #672]	; (272e4 <aws_fota_mqtt_evt_handler+0x364>)
	bool is_get_next_topic = aws_jobs_cmp(get_topic, topic, topic_len, "");
   27044:	4682      	mov	sl, r0
	bool is_notify_next_topic = aws_jobs_cmp(notify_next_topic, topic,
   27046:	464a      	mov	r2, r9
   27048:	4621      	mov	r1, r4
   2704a:	489e      	ldr	r0, [pc, #632]	; (272c4 <aws_fota_mqtt_evt_handler+0x344>)
   2704c:	f019 fc56 	bl	408fc <aws_jobs_cmp>
	if (is_notify_next_topic || is_get_next_topic) {
   27050:	b910      	cbnz	r0, 27058 <aws_fota_mqtt_evt_handler+0xd8>
   27052:	f1ba 0f00 	cmp.w	sl, #0
   27056:	d063      	beq.n	27120 <aws_fota_mqtt_evt_handler+0x1a0>
		err = get_published_payload(client, payload_buf, payload_len);
   27058:	4641      	mov	r1, r8
   2705a:	4630      	mov	r0, r6
   2705c:	f7ff ff70 	bl	26f40 <get_published_payload.constprop.1>
		if (err) {
   27060:	4604      	mov	r4, r0
   27062:	b148      	cbz	r0, 27078 <aws_fota_mqtt_evt_handler+0xf8>
			LOG_ERR("Error when getting the payload: %d", err);
   27064:	f04f 0000 	mov.w	r0, #0
   27068:	2301      	movs	r3, #1
   2706a:	f363 0007 	bfi	r0, r3, #0, #8
   2706e:	f365 108f 	bfi	r0, r5, #6, #10
   27072:	4622      	mov	r2, r4
   27074:	499c      	ldr	r1, [pc, #624]	; (272e8 <aws_fota_mqtt_evt_handler+0x368>)
   27076:	e03b      	b.n	270f0 <aws_fota_mqtt_evt_handler+0x170>
		err = aws_fota_parse_notify_next_document(payload_buf,
   27078:	4b9c      	ldr	r3, [pc, #624]	; (272ec <aws_fota_mqtt_evt_handler+0x36c>)
   2707a:	4a9d      	ldr	r2, [pc, #628]	; (272f0 <aws_fota_mqtt_evt_handler+0x370>)
   2707c:	9300      	str	r3, [sp, #0]
   2707e:	4641      	mov	r1, r8
   27080:	4b9c      	ldr	r3, [pc, #624]	; (272f4 <aws_fota_mqtt_evt_handler+0x374>)
   27082:	489d      	ldr	r0, [pc, #628]	; (272f8 <aws_fota_mqtt_evt_handler+0x378>)
   27084:	f000 fa08 	bl	27498 <aws_fota_parse_notify_next_document>
		if (err < 0) {
   27088:	1e04      	subs	r4, r0, #0
   2708a:	da0b      	bge.n	270a4 <aws_fota_mqtt_evt_handler+0x124>
			LOG_ERR("Error when parsing the json: %d", err);
   2708c:	2301      	movs	r3, #1
   2708e:	f04f 0000 	mov.w	r0, #0
   27092:	f363 0007 	bfi	r0, r3, #0, #8
   27096:	f365 108f 	bfi	r0, r5, #6, #10
   2709a:	4622      	mov	r2, r4
   2709c:	4997      	ldr	r1, [pc, #604]	; (272fc <aws_fota_mqtt_evt_handler+0x37c>)
   2709e:	f017 fc62 	bl	3e966 <log_string_sync>
		if (err < 1) {
   270a2:	e797      	b.n	26fd4 <aws_fota_mqtt_evt_handler+0x54>
		} else  if (err == 1) {
   270a4:	2c01      	cmp	r4, #1
   270a6:	d114      	bne.n	270d2 <aws_fota_mqtt_evt_handler+0x152>
			LOG_INF("Got only one field: %s",
   270a8:	2303      	movs	r3, #3
   270aa:	f04f 0400 	mov.w	r4, #0
   270ae:	4892      	ldr	r0, [pc, #584]	; (272f8 <aws_fota_mqtt_evt_handler+0x378>)
   270b0:	f363 0407 	bfi	r4, r3, #0, #8
   270b4:	f017 fc69 	bl	3e98a <log_strdup>
   270b8:	f365 148f 	bfi	r4, r5, #6, #10
   270bc:	4602      	mov	r2, r0
   270be:	4990      	ldr	r1, [pc, #576]	; (27300 <aws_fota_mqtt_evt_handler+0x380>)
   270c0:	4620      	mov	r0, r4
   270c2:	f017 fc50 	bl	3e966 <log_string_sync>
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   270c6:	7b3b      	ldrb	r3, [r7, #12]
   270c8:	2b01      	cmp	r3, #1
   270ca:	f000 80ee 	beq.w	272aa <aws_fota_mqtt_evt_handler+0x32a>
		return 1;
   270ce:	2401      	movs	r4, #1
   270d0:	e780      	b.n	26fd4 <aws_fota_mqtt_evt_handler+0x54>
		err = aws_jobs_unsubscribe_topic_notify_next(client,
   270d2:	497c      	ldr	r1, [pc, #496]	; (272c4 <aws_fota_mqtt_evt_handler+0x344>)
   270d4:	4630      	mov	r0, r6
   270d6:	f7ff fdc5 	bl	26c64 <aws_jobs_unsubscribe_topic_notify_next>
		if (err) {
   270da:	4604      	mov	r4, r0
   270dc:	b158      	cbz	r0, 270f6 <aws_fota_mqtt_evt_handler+0x176>
			LOG_ERR("Error when unsubscribing notify_next_topic: "
   270de:	f04f 0000 	mov.w	r0, #0
   270e2:	2301      	movs	r3, #1
   270e4:	4622      	mov	r2, r4
   270e6:	f363 0007 	bfi	r0, r3, #0, #8
   270ea:	4986      	ldr	r1, [pc, #536]	; (27304 <aws_fota_mqtt_evt_handler+0x384>)
   270ec:	f365 108f 	bfi	r0, r5, #6, #10
			LOG_ERR("Error when getting the payload: %d", err);
   270f0:	f017 fc39 	bl	3e966 <log_string_sync>
			return err;
   270f4:	e084      	b.n	27200 <aws_fota_mqtt_evt_handler+0x280>
		err = aws_jobs_subscribe_topic_update(client, job_id,
   270f6:	4a84      	ldr	r2, [pc, #528]	; (27308 <aws_fota_mqtt_evt_handler+0x388>)
   270f8:	497d      	ldr	r1, [pc, #500]	; (272f0 <aws_fota_mqtt_evt_handler+0x370>)
   270fa:	4630      	mov	r0, r6
   270fc:	f7ff fdce 	bl	26c9c <aws_jobs_subscribe_topic_update>
		if (err) {
   27100:	4604      	mov	r4, r0
   27102:	b148      	cbz	r0, 27118 <aws_fota_mqtt_evt_handler+0x198>
			LOG_ERR("Error when subscribing job_id_update: "
   27104:	f04f 0000 	mov.w	r0, #0
   27108:	2301      	movs	r3, #1
   2710a:	f363 0007 	bfi	r0, r3, #0, #8
   2710e:	f365 108f 	bfi	r0, r5, #6, #10
   27112:	4622      	mov	r2, r4
   27114:	497d      	ldr	r1, [pc, #500]	; (2730c <aws_fota_mqtt_evt_handler+0x38c>)
   27116:	e7eb      	b.n	270f0 <aws_fota_mqtt_evt_handler+0x170>
		fota_state = DOWNLOAD_FIRMWARE;
   27118:	2201      	movs	r2, #1
   2711a:	4b7d      	ldr	r3, [pc, #500]	; (27310 <aws_fota_mqtt_evt_handler+0x390>)
   2711c:	701a      	strb	r2, [r3, #0]
		if (err < 1) {
   2711e:	e7d2      	b.n	270c6 <aws_fota_mqtt_evt_handler+0x146>
	} else if (aws_jobs_cmp(update_topic, topic, topic_len, "accepted")) {
   27120:	4b7c      	ldr	r3, [pc, #496]	; (27314 <aws_fota_mqtt_evt_handler+0x394>)
   27122:	464a      	mov	r2, r9
   27124:	4621      	mov	r1, r4
   27126:	4878      	ldr	r0, [pc, #480]	; (27308 <aws_fota_mqtt_evt_handler+0x388>)
   27128:	f019 fbe8 	bl	408fc <aws_jobs_cmp>
   2712c:	2800      	cmp	r0, #0
   2712e:	f000 808b 	beq.w	27248 <aws_fota_mqtt_evt_handler+0x2c8>
		LOG_DBG("Job document update was accepted");
   27132:	2304      	movs	r3, #4
   27134:	f04f 0000 	mov.w	r0, #0
   27138:	f363 0007 	bfi	r0, r3, #0, #8
   2713c:	f365 108f 	bfi	r0, r5, #6, #10
   27140:	4a75      	ldr	r2, [pc, #468]	; (27318 <aws_fota_mqtt_evt_handler+0x398>)
   27142:	4976      	ldr	r1, [pc, #472]	; (2731c <aws_fota_mqtt_evt_handler+0x39c>)
   27144:	f017 fc0f 	bl	3e966 <log_string_sync>
		err = get_published_payload(client, payload_buf, payload_len);
   27148:	4641      	mov	r1, r8
   2714a:	4630      	mov	r0, r6
   2714c:	f7ff fef8 	bl	26f40 <get_published_payload.constprop.1>
		if (err) {
   27150:	4604      	mov	r4, r0
   27152:	2800      	cmp	r0, #0
   27154:	d154      	bne.n	27200 <aws_fota_mqtt_evt_handler+0x280>
		doc_version_number++;
   27156:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 27348 <aws_fota_mqtt_evt_handler+0x3c8>
		if (fota_state == DOWNLOAD_FIRMWARE) {
   2715a:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 27310 <aws_fota_mqtt_evt_handler+0x390>
		doc_version_number++;
   2715e:	f8d9 3000 	ldr.w	r3, [r9]
		if (fota_state == DOWNLOAD_FIRMWARE) {
   27162:	f89b 8000 	ldrb.w	r8, [fp]
		doc_version_number++;
   27166:	3301      	adds	r3, #1
		if (fota_state == DOWNLOAD_FIRMWARE) {
   27168:	f1b8 0f01 	cmp.w	r8, #1
		doc_version_number++;
   2716c:	f8c9 3000 	str.w	r3, [r9]
		if (fota_state == DOWNLOAD_FIRMWARE) {
   27170:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 2734c <aws_fota_mqtt_evt_handler+0x3cc>
   27174:	d124      	bne.n	271c0 <aws_fota_mqtt_evt_handler+0x240>
			LOG_INF("Start downloading firmware from %s%s",
   27176:	2303      	movs	r3, #3
   27178:	485e      	ldr	r0, [pc, #376]	; (272f4 <aws_fota_mqtt_evt_handler+0x374>)
   2717a:	f363 0407 	bfi	r4, r3, #0, #8
			execution_state = AWS_JOBS_IN_PROGRESS;
   2717e:	f88a 8000 	strb.w	r8, [sl]
			LOG_INF("Start downloading firmware from %s%s",
   27182:	f017 fc02 	bl	3e98a <log_strdup>
   27186:	4606      	mov	r6, r0
   27188:	4858      	ldr	r0, [pc, #352]	; (272ec <aws_fota_mqtt_evt_handler+0x36c>)
   2718a:	f017 fbfe 	bl	3e98a <log_strdup>
   2718e:	f365 148f 	bfi	r4, r5, #6, #10
   27192:	4603      	mov	r3, r0
   27194:	4632      	mov	r2, r6
   27196:	4620      	mov	r0, r4
   27198:	4961      	ldr	r1, [pc, #388]	; (27320 <aws_fota_mqtt_evt_handler+0x3a0>)
   2719a:	f017 fbe4 	bl	3e966 <log_string_sync>
			err = fota_download_start(hostname, file_path);
   2719e:	4953      	ldr	r1, [pc, #332]	; (272ec <aws_fota_mqtt_evt_handler+0x36c>)
   271a0:	4854      	ldr	r0, [pc, #336]	; (272f4 <aws_fota_mqtt_evt_handler+0x374>)
   271a2:	f7ff fbf1 	bl	26988 <fota_download_start>
			if (err) {
   271a6:	4604      	mov	r4, r0
   271a8:	2800      	cmp	r0, #0
   271aa:	d08c      	beq.n	270c6 <aws_fota_mqtt_evt_handler+0x146>
				LOG_ERR("Error when trying to start firmware"
   271ac:	f04f 0000 	mov.w	r0, #0
   271b0:	2301      	movs	r3, #1
   271b2:	f363 0007 	bfi	r0, r3, #0, #8
   271b6:	f365 108f 	bfi	r0, r5, #6, #10
   271ba:	4622      	mov	r2, r4
   271bc:	4959      	ldr	r1, [pc, #356]	; (27324 <aws_fota_mqtt_evt_handler+0x3a4>)
   271be:	e797      	b.n	270f0 <aws_fota_mqtt_evt_handler+0x170>
		} else if (execution_state == AWS_JOBS_IN_PROGRESS &&
   271c0:	f89a 3000 	ldrb.w	r3, [sl]
   271c4:	2b01      	cmp	r3, #1
   271c6:	d11f      	bne.n	27208 <aws_fota_mqtt_evt_handler+0x288>
   271c8:	f1b8 0f02 	cmp.w	r8, #2
   271cc:	f47f af7b 	bne.w	270c6 <aws_fota_mqtt_evt_handler+0x146>
			LOG_INF("Firmware download completed");
   271d0:	2303      	movs	r3, #3
   271d2:	f04f 0000 	mov.w	r0, #0
   271d6:	f363 0007 	bfi	r0, r3, #0, #8
   271da:	f365 108f 	bfi	r0, r5, #6, #10
   271de:	4952      	ldr	r1, [pc, #328]	; (27328 <aws_fota_mqtt_evt_handler+0x3a8>)
   271e0:	f017 fbc1 	bl	3e966 <log_string_sync>
			err = update_job_execution(client, job_id,
   271e4:	f8d9 3000 	ldr.w	r3, [r9]
   271e8:	f89b 2000 	ldrb.w	r2, [fp]
   271ec:	4641      	mov	r1, r8
   271ee:	4630      	mov	r0, r6
			execution_state = AWS_JOBS_SUCCEEDED;
   271f0:	f88a 8000 	strb.w	r8, [sl]
			err = update_job_execution(client, job_id,
   271f4:	f7ff fdd8 	bl	26da8 <update_job_execution.constprop.0>
			if (err) {
   271f8:	4604      	mov	r4, r0
   271fa:	2800      	cmp	r0, #0
   271fc:	f43f af63 	beq.w	270c6 <aws_fota_mqtt_evt_handler+0x146>
		if (err < 1) {
   27200:	2c00      	cmp	r4, #0
   27202:	f73f af60 	bgt.w	270c6 <aws_fota_mqtt_evt_handler+0x146>
   27206:	e6e5      	b.n	26fd4 <aws_fota_mqtt_evt_handler+0x54>
		} else if (execution_state == AWS_JOBS_SUCCEEDED &&
   27208:	2b02      	cmp	r3, #2
   2720a:	f47f af5c 	bne.w	270c6 <aws_fota_mqtt_evt_handler+0x146>
   2720e:	f1b8 0f02 	cmp.w	r8, #2
   27212:	f47f af58 	bne.w	270c6 <aws_fota_mqtt_evt_handler+0x146>
			LOG_INF("Job document updated with SUCCEDED");
   27216:	2303      	movs	r3, #3
   27218:	f04f 0000 	mov.w	r0, #0
   2721c:	f363 0007 	bfi	r0, r3, #0, #8
   27220:	f365 108f 	bfi	r0, r5, #6, #10
   27224:	4941      	ldr	r1, [pc, #260]	; (2732c <aws_fota_mqtt_evt_handler+0x3ac>)
   27226:	f017 fb9e 	bl	3e966 <log_string_sync>
			LOG_INF("Ready to reboot");
   2722a:	2303      	movs	r3, #3
   2722c:	f04f 0000 	mov.w	r0, #0
   27230:	f363 0007 	bfi	r0, r3, #0, #8
   27234:	f365 108f 	bfi	r0, r5, #6, #10
   27238:	493d      	ldr	r1, [pc, #244]	; (27330 <aws_fota_mqtt_evt_handler+0x3b0>)
   2723a:	f017 fb94 	bl	3e966 <log_string_sync>
			callback(AWS_FOTA_EVT_DONE);
   2723e:	4b3d      	ldr	r3, [pc, #244]	; (27334 <aws_fota_mqtt_evt_handler+0x3b4>)
   27240:	4620      	mov	r0, r4
   27242:	681b      	ldr	r3, [r3, #0]
   27244:	4798      	blx	r3
		if (err < 1) {
   27246:	e73e      	b.n	270c6 <aws_fota_mqtt_evt_handler+0x146>
	} else if (aws_jobs_cmp(update_topic, topic, topic_len, "rejected")) {
   27248:	4b3b      	ldr	r3, [pc, #236]	; (27338 <aws_fota_mqtt_evt_handler+0x3b8>)
   2724a:	464a      	mov	r2, r9
   2724c:	4621      	mov	r1, r4
   2724e:	482e      	ldr	r0, [pc, #184]	; (27308 <aws_fota_mqtt_evt_handler+0x388>)
   27250:	f019 fb54 	bl	408fc <aws_jobs_cmp>
   27254:	b1c0      	cbz	r0, 27288 <aws_fota_mqtt_evt_handler+0x308>
		LOG_ERR("Job document update was rejected");
   27256:	2301      	movs	r3, #1
   27258:	f04f 0000 	mov.w	r0, #0
   2725c:	f363 0007 	bfi	r0, r3, #0, #8
   27260:	f365 108f 	bfi	r0, r5, #6, #10
   27264:	4935      	ldr	r1, [pc, #212]	; (2733c <aws_fota_mqtt_evt_handler+0x3bc>)
   27266:	f017 fb7e 	bl	3e966 <log_string_sync>
		err = get_published_payload(client, payload_buf, payload_len);
   2726a:	4641      	mov	r1, r8
   2726c:	4630      	mov	r0, r6
   2726e:	f7ff fe67 	bl	26f40 <get_published_payload.constprop.1>
		if (err) {
   27272:	4604      	mov	r4, r0
   27274:	2800      	cmp	r0, #0
   27276:	f47f aef5 	bne.w	27064 <aws_fota_mqtt_evt_handler+0xe4>
		callback(AWS_FOTA_EVT_ERROR);
   2727a:	4b2e      	ldr	r3, [pc, #184]	; (27334 <aws_fota_mqtt_evt_handler+0x3b4>)
   2727c:	2001      	movs	r0, #1
   2727e:	681b      	ldr	r3, [r3, #0]
   27280:	4798      	blx	r3
		return -EFAULT;
   27282:	f06f 040d 	mvn.w	r4, #13
   27286:	e6a5      	b.n	26fd4 <aws_fota_mqtt_evt_handler+0x54>
	LOG_INF("Recived an unhandled MQTT publish event on topic: %s",
   27288:	2303      	movs	r3, #3
   2728a:	f04f 0600 	mov.w	r6, #0
   2728e:	4620      	mov	r0, r4
   27290:	f363 0607 	bfi	r6, r3, #0, #8
   27294:	f017 fb79 	bl	3e98a <log_strdup>
   27298:	f365 168f 	bfi	r6, r5, #6, #10
   2729c:	4602      	mov	r2, r0
   2729e:	4630      	mov	r0, r6
   272a0:	4927      	ldr	r1, [pc, #156]	; (27340 <aws_fota_mqtt_evt_handler+0x3c0>)
			LOG_ERR("MQTT PUBACK error %d", evt->result);
   272a2:	f017 fb60 	bl	3e966 <log_string_sync>
			return 0;
   272a6:	2400      	movs	r4, #0
   272a8:	e694      	b.n	26fd4 <aws_fota_mqtt_evt_handler+0x54>
			const struct mqtt_puback_param ack = {
   272aa:	8b3b      	ldrh	r3, [r7, #24]
			err = mqtt_publish_qos1_ack(c, &ack);
   272ac:	a903      	add	r1, sp, #12
			const struct mqtt_puback_param ack = {
   272ae:	f8ad 300c 	strh.w	r3, [sp, #12]
			err = mqtt_publish_qos1_ack(c, &ack);
   272b2:	4b24      	ldr	r3, [pc, #144]	; (27344 <aws_fota_mqtt_evt_handler+0x3c4>)
   272b4:	6818      	ldr	r0, [r3, #0]
   272b6:	f018 f8f7 	bl	3f4a8 <mqtt_publish_qos1_ack>
		return 1;
   272ba:	1e04      	subs	r4, r0, #0
   272bc:	bf08      	it	eq
   272be:	2401      	moveq	r4, #1
   272c0:	e688      	b.n	26fd4 <aws_fota_mqtt_evt_handler+0x54>
   272c2:	bf00      	nop
   272c4:	2002b771 	.word	0x2002b771
   272c8:	00042314 	.word	0x00042314
   272cc:	0004232c 	.word	0x0004232c
   272d0:	00047af5 	.word	0x00047af5
   272d4:	2002b59c 	.word	0x2002b59c
   272d8:	00047b1e 	.word	0x00047b1e
   272dc:	00047b24 	.word	0x00047b24
   272e0:	00047b4a 	.word	0x00047b4a
   272e4:	000490e1 	.word	0x000490e1
   272e8:	00047b5d 	.word	0x00047b5d
   272ec:	2002b49c 	.word	0x2002b49c
   272f0:	2002b730 	.word	0x2002b730
   272f4:	2002b631 	.word	0x2002b631
   272f8:	2002b806 	.word	0x2002b806
   272fc:	00047b80 	.word	0x00047b80
   27300:	00047ba0 	.word	0x00047ba0
   27304:	00047bb7 	.word	0x00047bb7
   27308:	2002bd4c 	.word	0x2002bd4c
   2730c:	00047be6 	.word	0x00047be6
   27310:	2002b59b 	.word	0x2002b59b
   27314:	00047c2b 	.word	0x00047c2b
   27318:	00047ac1 	.word	0x00047ac1
   2731c:	00047c0f 	.word	0x00047c0f
   27320:	00047c34 	.word	0x00047c34
   27324:	00047c59 	.word	0x00047c59
   27328:	00047c89 	.word	0x00047c89
   2732c:	00047ca5 	.word	0x00047ca5
   27330:	00047cc8 	.word	0x00047cc8
   27334:	200246d0 	.word	0x200246d0
   27338:	00047cf0 	.word	0x00047cf0
   2733c:	00047cd8 	.word	0x00047cd8
   27340:	00047cf9 	.word	0x00047cf9
   27344:	200246cc 	.word	0x200246cc
   27348:	2003128c 	.word	0x2003128c
   2734c:	2002b49b 	.word	0x2002b49b
		if (evt->result != 0) {
   27350:	69cc      	ldr	r4, [r1, #28]
   27352:	2c00      	cmp	r4, #0
   27354:	f43f ae3e 	beq.w	26fd4 <aws_fota_mqtt_evt_handler+0x54>
			LOG_ERR("MQTT PUBACK error %d", evt->result);
   27358:	2301      	movs	r3, #1
   2735a:	f04f 0000 	mov.w	r0, #0
   2735e:	4a25      	ldr	r2, [pc, #148]	; (273f4 <aws_fota_mqtt_evt_handler+0x474>)
   27360:	f363 0007 	bfi	r0, r3, #0, #8
   27364:	4b24      	ldr	r3, [pc, #144]	; (273f8 <aws_fota_mqtt_evt_handler+0x478>)
   27366:	4925      	ldr	r1, [pc, #148]	; (273fc <aws_fota_mqtt_evt_handler+0x47c>)
   27368:	1a9b      	subs	r3, r3, r2
   2736a:	08db      	lsrs	r3, r3, #3
   2736c:	f363 108f 	bfi	r0, r3, #6, #10
   27370:	4622      	mov	r2, r4
   27372:	e796      	b.n	272a2 <aws_fota_mqtt_evt_handler+0x322>
		if (evt->result != 0) {
   27374:	69cc      	ldr	r4, [r1, #28]
   27376:	2c00      	cmp	r4, #0
   27378:	d195      	bne.n	272a6 <aws_fota_mqtt_evt_handler+0x326>
		if (evt->param.suback.message_id == SUBSCRIBE_NOTIFY_NEXT) {
   2737a:	888b      	ldrh	r3, [r1, #4]
   2737c:	f5b3 6f04 	cmp.w	r3, #2112	; 0x840
   27380:	d117      	bne.n	273b2 <aws_fota_mqtt_evt_handler+0x432>
			LOG_INF("subscribed to notify-next topic");
   27382:	2303      	movs	r3, #3
   27384:	f04f 0000 	mov.w	r0, #0
   27388:	4a1a      	ldr	r2, [pc, #104]	; (273f4 <aws_fota_mqtt_evt_handler+0x474>)
   2738a:	f363 0007 	bfi	r0, r3, #0, #8
   2738e:	4b1a      	ldr	r3, [pc, #104]	; (273f8 <aws_fota_mqtt_evt_handler+0x478>)
   27390:	491b      	ldr	r1, [pc, #108]	; (27400 <aws_fota_mqtt_evt_handler+0x480>)
   27392:	1a9b      	subs	r3, r3, r2
   27394:	08db      	lsrs	r3, r3, #3
   27396:	f363 108f 	bfi	r0, r3, #6, #10
   2739a:	f017 fae4 	bl	3e966 <log_string_sync>
			err = aws_jobs_get_job_execution(client, "$next",
   2739e:	4a19      	ldr	r2, [pc, #100]	; (27404 <aws_fota_mqtt_evt_handler+0x484>)
   273a0:	4919      	ldr	r1, [pc, #100]	; (27408 <aws_fota_mqtt_evt_handler+0x488>)
   273a2:	4630      	mov	r0, r6
   273a4:	f7ff fcea 	bl	26d7c <aws_jobs_get_job_execution>
			if (err) {
   273a8:	4604      	mov	r4, r0
   273aa:	2800      	cmp	r0, #0
   273ac:	f43f ae8f 	beq.w	270ce <aws_fota_mqtt_evt_handler+0x14e>
   273b0:	e610      	b.n	26fd4 <aws_fota_mqtt_evt_handler+0x54>
		if (evt->param.suback.message_id == SUBSCRIBE_GET) {
   273b2:	f640 0241 	movw	r2, #2113	; 0x841
   273b6:	4293      	cmp	r3, r2
   273b8:	d10c      	bne.n	273d4 <aws_fota_mqtt_evt_handler+0x454>
			LOG_INF("subscribed to get topic");
   273ba:	2303      	movs	r3, #3
   273bc:	f04f 0000 	mov.w	r0, #0
   273c0:	4a0c      	ldr	r2, [pc, #48]	; (273f4 <aws_fota_mqtt_evt_handler+0x474>)
   273c2:	f363 0007 	bfi	r0, r3, #0, #8
   273c6:	4b0c      	ldr	r3, [pc, #48]	; (273f8 <aws_fota_mqtt_evt_handler+0x478>)
   273c8:	4910      	ldr	r1, [pc, #64]	; (2740c <aws_fota_mqtt_evt_handler+0x48c>)
   273ca:	1a9b      	subs	r3, r3, r2
   273cc:	08db      	lsrs	r3, r3, #3
   273ce:	f363 108f 	bfi	r0, r3, #6, #10
   273d2:	e5fd      	b.n	26fd0 <aws_fota_mqtt_evt_handler+0x50>
		if ((fota_state == DOWNLOAD_FIRMWARE) &&
   273d4:	4a0e      	ldr	r2, [pc, #56]	; (27410 <aws_fota_mqtt_evt_handler+0x490>)
   273d6:	7812      	ldrb	r2, [r2, #0]
   273d8:	2a01      	cmp	r2, #1
   273da:	f47f adfb 	bne.w	26fd4 <aws_fota_mqtt_evt_handler+0x54>
   273de:	f640 0143 	movw	r1, #2115	; 0x843
   273e2:	428b      	cmp	r3, r1
   273e4:	f47f adf6 	bne.w	26fd4 <aws_fota_mqtt_evt_handler+0x54>
			err = update_job_execution(client, job_id,
   273e8:	4b0a      	ldr	r3, [pc, #40]	; (27414 <aws_fota_mqtt_evt_handler+0x494>)
   273ea:	4611      	mov	r1, r2
   273ec:	681b      	ldr	r3, [r3, #0]
   273ee:	f7ff fcdb 	bl	26da8 <update_job_execution.constprop.0>
   273f2:	e7d9      	b.n	273a8 <aws_fota_mqtt_evt_handler+0x428>
   273f4:	00042314 	.word	0x00042314
   273f8:	0004232c 	.word	0x0004232c
   273fc:	00047d2e 	.word	0x00047d2e
   27400:	00047d43 	.word	0x00047d43
   27404:	2002b59c 	.word	0x2002b59c
   27408:	00047b1e 	.word	0x00047b1e
   2740c:	00047d63 	.word	0x00047d63
   27410:	2002b59b 	.word	0x2002b59b
   27414:	2003128c 	.word	0x2003128c

00027418 <aws_fota_init>:

int aws_fota_init(struct mqtt_client *const client,
		  const char *app_version,
		  aws_fota_callback_t evt_handler)
{
   27418:	b570      	push	{r4, r5, r6, lr}
   2741a:	460d      	mov	r5, r1
   2741c:	4614      	mov	r4, r2
	int err;

	if (client == NULL || app_version == NULL || evt_handler == NULL) {
   2741e:	4606      	mov	r6, r0
   27420:	b918      	cbnz	r0, 2742a <aws_fota_init+0x12>
		return -EINVAL;
   27422:	f06f 0415 	mvn.w	r4, #21
	}

	strncpy(version, app_version, CONFIG_AWS_FOTA_VERSION_STRING_MAX_LEN);

	return 0;
}
   27426:	4620      	mov	r0, r4
   27428:	bd70      	pop	{r4, r5, r6, pc}
	if (client == NULL || app_version == NULL || evt_handler == NULL) {
   2742a:	2900      	cmp	r1, #0
   2742c:	d0f9      	beq.n	27422 <aws_fota_init+0xa>
   2742e:	2a00      	cmp	r2, #0
   27430:	d0f7      	beq.n	27422 <aws_fota_init+0xa>
	if (strlen(app_version) >= CONFIG_AWS_FOTA_VERSION_STRING_MAX_LEN) {
   27432:	4608      	mov	r0, r1
   27434:	f7f2 fda6 	bl	19f84 <strlen>
   27438:	287f      	cmp	r0, #127	; 0x7f
   2743a:	d8f2      	bhi.n	27422 <aws_fota_init+0xa>
	c = client;
   2743c:	4b0f      	ldr	r3, [pc, #60]	; (2747c <aws_fota_init+0x64>)
	err = fota_download_init(http_fota_handler);
   2743e:	4810      	ldr	r0, [pc, #64]	; (27480 <aws_fota_init+0x68>)
	c = client;
   27440:	601e      	str	r6, [r3, #0]
	callback = evt_handler;
   27442:	4b10      	ldr	r3, [pc, #64]	; (27484 <aws_fota_init+0x6c>)
   27444:	601c      	str	r4, [r3, #0]
	err = fota_download_init(http_fota_handler);
   27446:	f7ff facb 	bl	269e0 <fota_download_init>
	if (err != 0) {
   2744a:	4604      	mov	r4, r0
   2744c:	b178      	cbz	r0, 2746e <aws_fota_init+0x56>
		LOG_ERR("fota_download_init error %d", err);
   2744e:	2301      	movs	r3, #1
   27450:	f04f 0000 	mov.w	r0, #0
   27454:	4a0c      	ldr	r2, [pc, #48]	; (27488 <aws_fota_init+0x70>)
   27456:	f363 0007 	bfi	r0, r3, #0, #8
   2745a:	4b0c      	ldr	r3, [pc, #48]	; (2748c <aws_fota_init+0x74>)
   2745c:	490c      	ldr	r1, [pc, #48]	; (27490 <aws_fota_init+0x78>)
   2745e:	1a9b      	subs	r3, r3, r2
   27460:	08db      	lsrs	r3, r3, #3
   27462:	f363 108f 	bfi	r0, r3, #6, #10
   27466:	4622      	mov	r2, r4
   27468:	f017 fa7d 	bl	3e966 <log_string_sync>
		return err;
   2746c:	e7db      	b.n	27426 <aws_fota_init+0xe>
	strncpy(version, app_version, CONFIG_AWS_FOTA_VERSION_STRING_MAX_LEN);
   2746e:	2280      	movs	r2, #128	; 0x80
   27470:	4629      	mov	r1, r5
   27472:	4808      	ldr	r0, [pc, #32]	; (27494 <aws_fota_init+0x7c>)
   27474:	f019 fe63 	bl	4113e <strncpy>
	return 0;
   27478:	e7d5      	b.n	27426 <aws_fota_init+0xe>
   2747a:	bf00      	nop
   2747c:	200246cc 	.word	0x200246cc
   27480:	00026e7d 	.word	0x00026e7d
   27484:	200246d0 	.word	0x200246d0
   27488:	00042314 	.word	0x00042314
   2748c:	0004232c 	.word	0x0004232c
   27490:	00047ad9 	.word	0x00047ad9
   27494:	2002bde1 	.word	0x2002bde1

00027498 <aws_fota_parse_notify_next_document>:
}

int aws_fota_parse_notify_next_document(char *job_document,
		u32_t payload_len, char *job_id_buf, char *hostname_buf,
		char *file_path_buf)
{
   27498:	b570      	push	{r4, r5, r6, lr}
   2749a:	b090      	sub	sp, #64	; 0x40
   2749c:	461d      	mov	r5, r3
	struct notify_next_obj job;
	struct job_document_obj *job_doc_obj;

	int ret = json_obj_parse(job_document,
   2749e:	ab03      	add	r3, sp, #12
   274a0:	9300      	str	r3, [sp, #0]
{
   274a2:	4616      	mov	r6, r2
	int ret = json_obj_parse(job_document,
   274a4:	2302      	movs	r3, #2
   274a6:	4a0d      	ldr	r2, [pc, #52]	; (274dc <aws_fota_parse_notify_next_document+0x44>)
   274a8:	f7f7 fb64 	bl	1eb74 <json_obj_parse>
				 ARRAY_SIZE(notify_next_obj_descr),
				 &job);
	job_doc_obj = &job.execution.job_document;

	/* Check if the execution field of the object has been parsed */
	if (ret & 0x02) {
   274ac:	0783      	lsls	r3, r0, #30
	int ret = json_obj_parse(job_document,
   274ae:	4604      	mov	r4, r0
	if (ret & 0x02) {
   274b0:	d511      	bpl.n	274d6 <aws_fota_parse_notify_next_document+0x3e>
		if (job.execution.job_id != 0) {
   274b2:	9904      	ldr	r1, [sp, #16]
   274b4:	b119      	cbz	r1, 274be <aws_fota_parse_notify_next_document+0x26>
			strncpy_nullterm(job_id_buf, job.execution.job_id,
   274b6:	2241      	movs	r2, #65	; 0x41
   274b8:	4630      	mov	r0, r6
   274ba:	f019 fa54 	bl	40966 <strncpy_nullterm>
				      AWS_JOBS_JOB_ID_MAX_LEN);
		}
		if (job_doc_obj->location.host != 0) {
   274be:	990e      	ldr	r1, [sp, #56]	; 0x38
   274c0:	b119      	cbz	r1, 274ca <aws_fota_parse_notify_next_document+0x32>
			strncpy_nullterm(hostname_buf,
   274c2:	22ff      	movs	r2, #255	; 0xff
   274c4:	4628      	mov	r0, r5
   274c6:	f019 fa4e 	bl	40966 <strncpy_nullterm>
					 job_doc_obj->location.host,
					 CONFIG_AWS_FOTA_HOSTNAME_MAX_LEN);
		}
		if (job_doc_obj->location.path != 0) {
   274ca:	990f      	ldr	r1, [sp, #60]	; 0x3c
   274cc:	b119      	cbz	r1, 274d6 <aws_fota_parse_notify_next_document+0x3e>
			strncpy_nullterm(file_path_buf,
   274ce:	22ff      	movs	r2, #255	; 0xff
   274d0:	9814      	ldr	r0, [sp, #80]	; 0x50
   274d2:	f019 fa48 	bl	40966 <strncpy_nullterm>
					  CONFIG_AWS_FOTA_FILE_PATH_MAX_LEN);
		}

	}
	return ret;
}
   274d6:	4620      	mov	r0, r4
   274d8:	b010      	add	sp, #64	; 0x40
   274da:	bd70      	pop	{r4, r5, r6, pc}
   274dc:	00042d28 	.word	0x00042d28

000274e0 <dfu_target_img_type>:
LOG_MODULE_REGISTER(dfu_target, CONFIG_DFU_TARGET_LOG_LEVEL);

static const struct dfu_target *current_target;

int dfu_target_img_type(const void *const buf, size_t len)
{
   274e0:	b538      	push	{r3, r4, r5, lr}
   274e2:	4605      	mov	r5, r0
   274e4:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_DFU_TARGET_MCUBOOT) &&
	    dfu_target_mcuboot_identify(buf)) {
   274e6:	f000 fb95 	bl	27c14 <dfu_target_mcuboot_identify>
	if (IS_ENABLED(CONFIG_DFU_TARGET_MCUBOOT) &&
   274ea:	b9a0      	cbnz	r0, 27516 <dfu_target_img_type+0x36>
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
	}

	if (IS_ENABLED(CONFIG_DFU_TARGET_MODEM) &&
	    dfu_target_modem_identify(buf)) {
   274ec:	4628      	mov	r0, r5
   274ee:	f000 f99b 	bl	27828 <dfu_target_modem_identify>
	if (IS_ENABLED(CONFIG_DFU_TARGET_MODEM) &&
   274f2:	b990      	cbnz	r0, 2751a <dfu_target_img_type+0x3a>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
	}

	if (len < MIN_SIZE_IDENTIFY_BUF) {
   274f4:	2c1f      	cmp	r4, #31
   274f6:	d912      	bls.n	2751e <dfu_target_img_type+0x3e>
		return -EAGAIN;
	}

	LOG_ERR("No supported image type found");
   274f8:	2301      	movs	r3, #1
   274fa:	4a0a      	ldr	r2, [pc, #40]	; (27524 <dfu_target_img_type+0x44>)
   274fc:	f363 0007 	bfi	r0, r3, #0, #8
   27500:	4b09      	ldr	r3, [pc, #36]	; (27528 <dfu_target_img_type+0x48>)
   27502:	490a      	ldr	r1, [pc, #40]	; (2752c <dfu_target_img_type+0x4c>)
   27504:	1a9b      	subs	r3, r3, r2
   27506:	08db      	lsrs	r3, r3, #3
   27508:	f363 108f 	bfi	r0, r3, #6, #10
   2750c:	f017 fa2b 	bl	3e966 <log_string_sync>
	return -ENOTSUP;
   27510:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   27514:	bd38      	pop	{r3, r4, r5, pc}
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
   27516:	2001      	movs	r0, #1
   27518:	e7fc      	b.n	27514 <dfu_target_img_type+0x34>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
   2751a:	2002      	movs	r0, #2
   2751c:	e7fa      	b.n	27514 <dfu_target_img_type+0x34>
		return -EAGAIN;
   2751e:	f06f 000a 	mvn.w	r0, #10
   27522:	e7f7      	b.n	27514 <dfu_target_img_type+0x34>
   27524:	00042314 	.word	0x00042314
   27528:	0004234c 	.word	0x0004234c
   2752c:	00048005 	.word	0x00048005

00027530 <dfu_target_init>:

int dfu_target_init(int img_type, size_t file_size)
{
	const struct dfu_target *new_target = NULL;

	if (IS_ENABLED(CONFIG_BOOTLOADER_MCUBOOT) &&
   27530:	2801      	cmp	r0, #1
{
   27532:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_BOOTLOADER_MCUBOOT) &&
   27534:	d008      	beq.n	27548 <dfu_target_init+0x18>
	    img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
		new_target = &dfu_target_mcuboot;
	} else if (IS_ENABLED(CONFIG_DFU_TARGET_MODEM) &&
   27536:	2802      	cmp	r0, #2
   27538:	d108      	bne.n	2754c <dfu_target_init+0x1c>
		   img_type == DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
		new_target = &dfu_target_modem;
   2753a:	4b10      	ldr	r3, [pc, #64]	; (2757c <dfu_target_init+0x4c>)

	/* The user is re-initializing with an previously aborted target.
	 * Avoid re-initializing to ensure that the download can continue where
	 * it left off.
	 */
	if (new_target == current_target) {
   2753c:	4a10      	ldr	r2, [pc, #64]	; (27580 <dfu_target_init+0x50>)
   2753e:	6810      	ldr	r0, [r2, #0]
   27540:	4283      	cmp	r3, r0
   27542:	d114      	bne.n	2756e <dfu_target_init+0x3e>
		return 0;
   27544:	2000      	movs	r0, #0
   27546:	e011      	b.n	2756c <dfu_target_init+0x3c>
		new_target = &dfu_target_mcuboot;
   27548:	4b0e      	ldr	r3, [pc, #56]	; (27584 <dfu_target_init+0x54>)
   2754a:	e7f7      	b.n	2753c <dfu_target_init+0xc>
		LOG_ERR("Unknown image type");
   2754c:	2301      	movs	r3, #1
   2754e:	f04f 0000 	mov.w	r0, #0
   27552:	4a0d      	ldr	r2, [pc, #52]	; (27588 <dfu_target_init+0x58>)
   27554:	f363 0007 	bfi	r0, r3, #0, #8
   27558:	4b0c      	ldr	r3, [pc, #48]	; (2758c <dfu_target_init+0x5c>)
   2755a:	490d      	ldr	r1, [pc, #52]	; (27590 <dfu_target_init+0x60>)
   2755c:	1a9b      	subs	r3, r3, r2
   2755e:	08db      	lsrs	r3, r3, #3
   27560:	f363 108f 	bfi	r0, r3, #6, #10
   27564:	f017 f9ff 	bl	3e966 <log_string_sync>
		return -ENOTSUP;
   27568:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	current_target = new_target;

	return current_target->init(file_size);
}
   2756c:	bd10      	pop	{r4, pc}
	current_target = new_target;
   2756e:	6013      	str	r3, [r2, #0]
	return current_target->init(file_size);
   27570:	4608      	mov	r0, r1
}
   27572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return current_target->init(file_size);
   27576:	681b      	ldr	r3, [r3, #0]
   27578:	4718      	bx	r3
   2757a:	bf00      	nop
   2757c:	00042d58 	.word	0x00042d58
   27580:	200246d4 	.word	0x200246d4
   27584:	00042d48 	.word	0x00042d48
   27588:	00042314 	.word	0x00042314
   2758c:	0004234c 	.word	0x0004234c
   27590:	00048023 	.word	0x00048023

00027594 <dfu_target_offset_get>:

int dfu_target_offset_get(size_t *offset)
{
	if (current_target == NULL) {
   27594:	4b03      	ldr	r3, [pc, #12]	; (275a4 <dfu_target_offset_get+0x10>)
   27596:	681b      	ldr	r3, [r3, #0]
   27598:	b10b      	cbz	r3, 2759e <dfu_target_offset_get+0xa>
		return -EACCES;
	}

	return current_target->offset_get(offset);
   2759a:	685b      	ldr	r3, [r3, #4]
   2759c:	4718      	bx	r3
}
   2759e:	f06f 000c 	mvn.w	r0, #12
   275a2:	4770      	bx	lr
   275a4:	200246d4 	.word	0x200246d4

000275a8 <dfu_target_write>:

int dfu_target_write(const void *const buf, size_t len)
{
	if (current_target == NULL || buf == NULL) {
   275a8:	4b04      	ldr	r3, [pc, #16]	; (275bc <dfu_target_write+0x14>)
   275aa:	681b      	ldr	r3, [r3, #0]
   275ac:	b113      	cbz	r3, 275b4 <dfu_target_write+0xc>
   275ae:	b108      	cbz	r0, 275b4 <dfu_target_write+0xc>
		return -EACCES;
	}

	return current_target->write(buf, len);
   275b0:	689b      	ldr	r3, [r3, #8]
   275b2:	4718      	bx	r3
}
   275b4:	f06f 000c 	mvn.w	r0, #12
   275b8:	4770      	bx	lr
   275ba:	bf00      	nop
   275bc:	200246d4 	.word	0x200246d4

000275c0 <dfu_target_done>:

int dfu_target_done(bool successful)
{
   275c0:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (current_target == NULL) {
   275c2:	4d0f      	ldr	r5, [pc, #60]	; (27600 <dfu_target_done+0x40>)
{
   275c4:	4606      	mov	r6, r0
	if (current_target == NULL) {
   275c6:	682b      	ldr	r3, [r5, #0]
   275c8:	b1b3      	cbz	r3, 275f8 <dfu_target_done+0x38>
		return -EACCES;
	}

	err = current_target->done(successful);
   275ca:	68db      	ldr	r3, [r3, #12]
   275cc:	4798      	blx	r3
   275ce:	4604      	mov	r4, r0

	if (successful) {
   275d0:	b10e      	cbz	r6, 275d6 <dfu_target_done+0x16>
		current_target = NULL;
   275d2:	2300      	movs	r3, #0
   275d4:	602b      	str	r3, [r5, #0]
	}

	if (err != 0) {
   275d6:	b16c      	cbz	r4, 275f4 <dfu_target_done+0x34>
		LOG_ERR("Unable to clean up dfu_target");
   275d8:	2301      	movs	r3, #1
   275da:	f04f 0000 	mov.w	r0, #0
   275de:	4a09      	ldr	r2, [pc, #36]	; (27604 <dfu_target_done+0x44>)
   275e0:	f363 0007 	bfi	r0, r3, #0, #8
   275e4:	4b08      	ldr	r3, [pc, #32]	; (27608 <dfu_target_done+0x48>)
   275e6:	4909      	ldr	r1, [pc, #36]	; (2760c <dfu_target_done+0x4c>)
   275e8:	1a9b      	subs	r3, r3, r2
   275ea:	08db      	lsrs	r3, r3, #3
   275ec:	f363 108f 	bfi	r0, r3, #6, #10
   275f0:	f017 f9b9 	bl	3e966 <log_string_sync>
		return err;
	}

	return 0;
}
   275f4:	4620      	mov	r0, r4
   275f6:	bd70      	pop	{r4, r5, r6, pc}
		return -EACCES;
   275f8:	f06f 040c 	mvn.w	r4, #12
   275fc:	e7fa      	b.n	275f4 <dfu_target_done+0x34>
   275fe:	bf00      	nop
   27600:	200246d4 	.word	0x200246d4
   27604:	00042314 	.word	0x00042314
   27608:	0004234c 	.word	0x0004234c
   2760c:	00047fe7 	.word	0x00047fe7

00027610 <getsockopt.constprop.2>:
static inline int getsockopt(int sock, int level, int optname,
   27610:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   27614:	4c15      	ldr	r4, [pc, #84]	; (2766c <getsockopt.constprop.2+0x5c>)
static inline int getsockopt(int sock, int level, int optname,
   27616:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   27618:	6823      	ldr	r3, [r4, #0]
static inline int getsockopt(int sock, int level, int optname,
   2761a:	4605      	mov	r5, r0
   2761c:	460e      	mov	r6, r1
   2761e:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(socket_ops);
   27620:	b94b      	cbnz	r3, 27636 <getsockopt.constprop.2+0x26>
   27622:	4913      	ldr	r1, [pc, #76]	; (27670 <getsockopt.constprop.2+0x60>)
   27624:	4813      	ldr	r0, [pc, #76]	; (27674 <getsockopt.constprop.2+0x64>)
   27626:	2360      	movs	r3, #96	; 0x60
   27628:	4a13      	ldr	r2, [pc, #76]	; (27678 <getsockopt.constprop.2+0x68>)
   2762a:	f017 f97f 	bl	3e92c <printk>
   2762e:	2160      	movs	r1, #96	; 0x60
   27630:	4811      	ldr	r0, [pc, #68]	; (27678 <getsockopt.constprop.2+0x68>)
   27632:	f017 f988 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->getsockopt);
   27636:	6823      	ldr	r3, [r4, #0]
   27638:	6a1b      	ldr	r3, [r3, #32]
   2763a:	b94b      	cbnz	r3, 27650 <getsockopt.constprop.2+0x40>
   2763c:	490f      	ldr	r1, [pc, #60]	; (2767c <getsockopt.constprop.2+0x6c>)
   2763e:	480d      	ldr	r0, [pc, #52]	; (27674 <getsockopt.constprop.2+0x64>)
   27640:	2361      	movs	r3, #97	; 0x61
   27642:	4a0d      	ldr	r2, [pc, #52]	; (27678 <getsockopt.constprop.2+0x68>)
   27644:	f017 f972 	bl	3e92c <printk>
   27648:	2161      	movs	r1, #97	; 0x61
   2764a:	480b      	ldr	r0, [pc, #44]	; (27678 <getsockopt.constprop.2+0x68>)
   2764c:	f017 f97b 	bl	3e946 <assert_post_action>
	return socket_ops->getsockopt(sock, level, optname, optval, optlen);
   27650:	6823      	ldr	r3, [r4, #0]
   27652:	f8cd 8000 	str.w	r8, [sp]
   27656:	6a1c      	ldr	r4, [r3, #32]
   27658:	4632      	mov	r2, r6
   2765a:	463b      	mov	r3, r7
   2765c:	f240 2103 	movw	r1, #515	; 0x203
   27660:	4628      	mov	r0, r5
   27662:	47a0      	blx	r4
}
   27664:	b002      	add	sp, #8
   27666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2766a:	bf00      	nop
   2766c:	20023990 	.word	0x20023990
   27670:	0004476f 	.word	0x0004476f
   27674:	00044643 	.word	0x00044643
   27678:	00044746 	.word	0x00044746
   2767c:	00048277 	.word	0x00048277

00027680 <get_modem_error>:
{
	int rc;
	int err = 0;
	socklen_t len;

	len = sizeof(err);
   27680:	2200      	movs	r2, #0
   27682:	2304      	movs	r3, #4
{
   27684:	b513      	push	{r0, r1, r4, lr}
	rc = getsockopt(fd, SOL_DFU, SO_DFU_ERROR, &err, &len);
   27686:	480f      	ldr	r0, [pc, #60]	; (276c4 <get_modem_error+0x44>)
	len = sizeof(err);
   27688:	e9cd 2300 	strd	r2, r3, [sp]
	rc = getsockopt(fd, SOL_DFU, SO_DFU_ERROR, &err, &len);
   2768c:	2114      	movs	r1, #20
   2768e:	446b      	add	r3, sp
   27690:	466a      	mov	r2, sp
   27692:	6800      	ldr	r0, [r0, #0]
   27694:	f7ff ffbc 	bl	27610 <getsockopt.constprop.2>
	if (rc) {
   27698:	b188      	cbz	r0, 276be <get_modem_error+0x3e>
		LOG_ERR("Unable to fetch modem error, errno %d", errno);
   2769a:	2301      	movs	r3, #1
   2769c:	f04f 0400 	mov.w	r4, #0
   276a0:	4a09      	ldr	r2, [pc, #36]	; (276c8 <get_modem_error+0x48>)
   276a2:	f363 0407 	bfi	r4, r3, #0, #8
   276a6:	4b09      	ldr	r3, [pc, #36]	; (276cc <get_modem_error+0x4c>)
   276a8:	1a9b      	subs	r3, r3, r2
   276aa:	08db      	lsrs	r3, r3, #3
   276ac:	f363 148f 	bfi	r4, r3, #6, #10
   276b0:	f017 fb2f 	bl	3ed12 <__errno>
   276b4:	4906      	ldr	r1, [pc, #24]	; (276d0 <get_modem_error+0x50>)
   276b6:	6802      	ldr	r2, [r0, #0]
   276b8:	4620      	mov	r0, r4
   276ba:	f017 f954 	bl	3e966 <log_string_sync>
	}

	return err;
}
   276be:	9800      	ldr	r0, [sp, #0]
   276c0:	b002      	add	sp, #8
   276c2:	bd10      	pop	{r4, pc}
   276c4:	200246d8 	.word	0x200246d8
   276c8:	00042314 	.word	0x00042314
   276cc:	0004235c 	.word	0x0004235c
   276d0:	00048251 	.word	0x00048251

000276d4 <setsockopt.constprop.3>:
static inline int setsockopt(int sock, int level, int optname,
   276d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   276d8:	4c15      	ldr	r4, [pc, #84]	; (27730 <setsockopt.constprop.3+0x5c>)
static inline int setsockopt(int sock, int level, int optname,
   276da:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   276dc:	6823      	ldr	r3, [r4, #0]
static inline int setsockopt(int sock, int level, int optname,
   276de:	4605      	mov	r5, r0
   276e0:	460e      	mov	r6, r1
   276e2:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(socket_ops);
   276e4:	b94b      	cbnz	r3, 276fa <setsockopt.constprop.3+0x26>
   276e6:	4913      	ldr	r1, [pc, #76]	; (27734 <setsockopt.constprop.3+0x60>)
   276e8:	4813      	ldr	r0, [pc, #76]	; (27738 <setsockopt.constprop.3+0x64>)
   276ea:	2357      	movs	r3, #87	; 0x57
   276ec:	4a13      	ldr	r2, [pc, #76]	; (2773c <setsockopt.constprop.3+0x68>)
   276ee:	f017 f91d 	bl	3e92c <printk>
   276f2:	2157      	movs	r1, #87	; 0x57
   276f4:	4811      	ldr	r0, [pc, #68]	; (2773c <setsockopt.constprop.3+0x68>)
   276f6:	f017 f926 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->setsockopt);
   276fa:	6823      	ldr	r3, [r4, #0]
   276fc:	69db      	ldr	r3, [r3, #28]
   276fe:	b94b      	cbnz	r3, 27714 <setsockopt.constprop.3+0x40>
   27700:	490f      	ldr	r1, [pc, #60]	; (27740 <setsockopt.constprop.3+0x6c>)
   27702:	480d      	ldr	r0, [pc, #52]	; (27738 <setsockopt.constprop.3+0x64>)
   27704:	2358      	movs	r3, #88	; 0x58
   27706:	4a0d      	ldr	r2, [pc, #52]	; (2773c <setsockopt.constprop.3+0x68>)
   27708:	f017 f910 	bl	3e92c <printk>
   2770c:	2158      	movs	r1, #88	; 0x58
   2770e:	480b      	ldr	r0, [pc, #44]	; (2773c <setsockopt.constprop.3+0x68>)
   27710:	f017 f919 	bl	3e946 <assert_post_action>
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   27714:	6823      	ldr	r3, [r4, #0]
   27716:	f8cd 8000 	str.w	r8, [sp]
   2771a:	69dc      	ldr	r4, [r3, #28]
   2771c:	4632      	mov	r2, r6
   2771e:	463b      	mov	r3, r7
   27720:	f240 2103 	movw	r1, #515	; 0x203
   27724:	4628      	mov	r0, r5
   27726:	47a0      	blx	r4
}
   27728:	b002      	add	sp, #8
   2772a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2772e:	bf00      	nop
   27730:	20023990 	.word	0x20023990
   27734:	0004476f 	.word	0x0004476f
   27738:	00044643 	.word	0x00044643
   2773c:	00044746 	.word	0x00044746
   27740:	00045e3e 	.word	0x00045e3e

00027744 <delete_banked_modem_fw>:
}

static int delete_banked_modem_fw(void)
{
	int err;
	socklen_t len = sizeof(offset);
   27744:	2304      	movs	r3, #4
{
   27746:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	LOG_INF("Deleting firmware image, this can take several minutes");
   2774a:	f04f 0000 	mov.w	r0, #0
	socklen_t len = sizeof(offset);
   2774e:	9301      	str	r3, [sp, #4]
	LOG_INF("Deleting firmware image, this can take several minutes");
   27750:	2303      	movs	r3, #3
   27752:	4c2d      	ldr	r4, [pc, #180]	; (27808 <delete_banked_modem_fw+0xc4>)
   27754:	f363 0007 	bfi	r0, r3, #0, #8
   27758:	4b2c      	ldr	r3, [pc, #176]	; (2780c <delete_banked_modem_fw+0xc8>)
   2775a:	492d      	ldr	r1, [pc, #180]	; (27810 <delete_banked_modem_fw+0xcc>)
   2775c:	1ae4      	subs	r4, r4, r3
   2775e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   27762:	f364 108f 	bfi	r0, r4, #6, #10
   27766:	f017 f8fe 	bl	3e966 <log_string_sync>
	err = setsockopt(fd, SOL_DFU, SO_DFU_BACKUP_DELETE, NULL, 0);
   2776a:	2300      	movs	r3, #0
   2776c:	4e29      	ldr	r6, [pc, #164]	; (27814 <delete_banked_modem_fw+0xd0>)
   2776e:	461a      	mov	r2, r3
   27770:	2106      	movs	r1, #6
   27772:	6830      	ldr	r0, [r6, #0]
   27774:	f7ff ffae 	bl	276d4 <setsockopt.constprop.3>
	if (err < 0) {
   27778:	2800      	cmp	r0, #0
   2777a:	db26      	blt.n	277ca <delete_banked_modem_fw+0x86>
		LOG_ERR("Failed to delete backup, errno %d", errno);
		return -EFAULT;
	}

	while (true) {
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   2777c:	4f26      	ldr	r7, [pc, #152]	; (27818 <delete_banked_modem_fw+0xd4>)
		if (err < 0) {
			if (errno == ENOEXEC) {
				err = get_modem_error();
				if (err != DFU_ERASE_PENDING) {
					LOG_ERR("DFU error: %d", err);
   2777e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 27824 <delete_banked_modem_fw+0xe0>
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   27782:	ab01      	add	r3, sp, #4
   27784:	463a      	mov	r2, r7
   27786:	2107      	movs	r1, #7
   27788:	6830      	ldr	r0, [r6, #0]
   2778a:	f7ff ff41 	bl	27610 <getsockopt.constprop.2>
		if (err < 0) {
   2778e:	2800      	cmp	r0, #0
   27790:	da2e      	bge.n	277f0 <delete_banked_modem_fw+0xac>
			if (errno == ENOEXEC) {
   27792:	f017 fabe 	bl	3ed12 <__errno>
   27796:	6803      	ldr	r3, [r0, #0]
   27798:	2b08      	cmp	r3, #8
   2779a:	d1f2      	bne.n	27782 <delete_banked_modem_fw+0x3e>
				err = get_modem_error();
   2779c:	f7ff ff70 	bl	27680 <get_modem_error>
				if (err != DFU_ERASE_PENDING) {
   277a0:	f110 0f11 	cmn.w	r0, #17
				err = get_modem_error();
   277a4:	4602      	mov	r2, r0
				if (err != DFU_ERASE_PENDING) {
   277a6:	d00b      	beq.n	277c0 <delete_banked_modem_fw+0x7c>
					LOG_ERR("DFU error: %d", err);
   277a8:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
   277ac:	f043 0301 	orr.w	r3, r3, #1
   277b0:	f363 0507 	bfi	r5, r3, #0, #8
   277b4:	f364 158f 	bfi	r5, r4, #6, #10
   277b8:	4641      	mov	r1, r8
   277ba:	4628      	mov	r0, r5
   277bc:	f017 f8d3 	bl	3e966 <log_string_sync>
	return z_impl_k_sleep(ms);
   277c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   277c4:	f019 f9b7 	bl	40b36 <z_impl_k_sleep>
   277c8:	e7db      	b.n	27782 <delete_banked_modem_fw+0x3e>
		LOG_ERR("Failed to delete backup, errno %d", errno);
   277ca:	2301      	movs	r3, #1
   277cc:	f04f 0500 	mov.w	r5, #0
   277d0:	f363 0507 	bfi	r5, r3, #0, #8
   277d4:	f017 fa9d 	bl	3ed12 <__errno>
   277d8:	f364 158f 	bfi	r5, r4, #6, #10
   277dc:	6802      	ldr	r2, [r0, #0]
   277de:	490f      	ldr	r1, [pc, #60]	; (2781c <delete_banked_modem_fw+0xd8>)
   277e0:	4628      	mov	r0, r5
   277e2:	f017 f8c0 	bl	3e966 <log_string_sync>
		return -EFAULT;
   277e6:	f06f 000d 	mvn.w	r0, #13
			break;
		}
	}

	return 0;
}
   277ea:	b002      	add	sp, #8
   277ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_INF("Modem FW delete complete");
   277f0:	2303      	movs	r3, #3
   277f2:	f04f 0000 	mov.w	r0, #0
   277f6:	f363 0007 	bfi	r0, r3, #0, #8
   277fa:	f364 108f 	bfi	r0, r4, #6, #10
   277fe:	4908      	ldr	r1, [pc, #32]	; (27820 <delete_banked_modem_fw+0xdc>)
   27800:	f017 f8b1 	bl	3e966 <log_string_sync>
	return 0;
   27804:	2000      	movs	r0, #0
   27806:	e7f0      	b.n	277ea <delete_banked_modem_fw+0xa6>
   27808:	0004235c 	.word	0x0004235c
   2780c:	00042314 	.word	0x00042314
   27810:	00048036 	.word	0x00048036
   27814:	200246d8 	.word	0x200246d8
   27818:	200246dc 	.word	0x200246dc
   2781c:	0004806d 	.word	0x0004806d
   27820:	0004809d 	.word	0x0004809d
   27824:	0004808f 	.word	0x0004808f

00027828 <dfu_target_modem_identify>:
	return err;
}

bool dfu_target_modem_identify(const void *const buf)
{
	return ((const struct modem_delta_header *)buf)->magic == MODEM_MAGIC;
   27828:	6840      	ldr	r0, [r0, #4]

}
   2782a:	4b02      	ldr	r3, [pc, #8]	; (27834 <dfu_target_modem_identify+0xc>)
   2782c:	1ac3      	subs	r3, r0, r3
   2782e:	4258      	negs	r0, r3
   27830:	4158      	adcs	r0, r3
   27832:	4770      	bx	lr
   27834:	7544656d 	.word	0x7544656d

00027838 <dfu_target_modem_init>:
	/* We have no way of checking the amount of flash available in the modem
	 * with the current API
	 */
	ARG_UNUSED(file_size);
	int err;
	socklen_t len = sizeof(offset);
   27838:	2304      	movs	r3, #4
{
   2783a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   2783e:	4c62      	ldr	r4, [pc, #392]	; (279c8 <dfu_target_modem_init+0x190>)
   27840:	b098      	sub	sp, #96	; 0x60
	socklen_t len = sizeof(offset);
   27842:	9303      	str	r3, [sp, #12]
   27844:	6823      	ldr	r3, [r4, #0]
   27846:	b94b      	cbnz	r3, 2785c <dfu_target_modem_init+0x24>
   27848:	4960      	ldr	r1, [pc, #384]	; (279cc <dfu_target_modem_init+0x194>)
   2784a:	4861      	ldr	r0, [pc, #388]	; (279d0 <dfu_target_modem_init+0x198>)
   2784c:	2319      	movs	r3, #25
   2784e:	4a61      	ldr	r2, [pc, #388]	; (279d4 <dfu_target_modem_init+0x19c>)
   27850:	f017 f86c 	bl	3e92c <printk>
   27854:	2119      	movs	r1, #25
   27856:	485f      	ldr	r0, [pc, #380]	; (279d4 <dfu_target_modem_init+0x19c>)
   27858:	f017 f875 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   2785c:	6823      	ldr	r3, [r4, #0]
   2785e:	681b      	ldr	r3, [r3, #0]
   27860:	b94b      	cbnz	r3, 27876 <dfu_target_modem_init+0x3e>
   27862:	495d      	ldr	r1, [pc, #372]	; (279d8 <dfu_target_modem_init+0x1a0>)
   27864:	485a      	ldr	r0, [pc, #360]	; (279d0 <dfu_target_modem_init+0x198>)
   27866:	231a      	movs	r3, #26
   27868:	4a5a      	ldr	r2, [pc, #360]	; (279d4 <dfu_target_modem_init+0x19c>)
   2786a:	f017 f85f 	bl	3e92c <printk>
   2786e:	211a      	movs	r1, #26
   27870:	4858      	ldr	r0, [pc, #352]	; (279d4 <dfu_target_modem_init+0x19c>)
   27872:	f017 f868 	bl	3e946 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   27876:	6823      	ldr	r3, [r4, #0]
   27878:	f240 2203 	movw	r2, #515	; 0x203
   2787c:	681b      	ldr	r3, [r3, #0]
   2787e:	2101      	movs	r1, #1
   27880:	2067      	movs	r0, #103	; 0x67
   27882:	4798      	blx	r3
   27884:	4c55      	ldr	r4, [pc, #340]	; (279dc <dfu_target_modem_init+0x1a4>)
   27886:	4b56      	ldr	r3, [pc, #344]	; (279e0 <dfu_target_modem_init+0x1a8>)
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   27888:	4d56      	ldr	r5, [pc, #344]	; (279e4 <dfu_target_modem_init+0x1ac>)
   2788a:	1ae4      	subs	r4, r4, r3
	if (fd < 0) {
   2788c:	2800      	cmp	r0, #0
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   2788e:	6028      	str	r0, [r5, #0]
	if (fd < 0) {
   27890:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   27894:	462e      	mov	r6, r5
		LOG_ERR("Failed to open Modem DFU socket.");
   27896:	f04f 0000 	mov.w	r0, #0
	if (fd < 0) {
   2789a:	da2f      	bge.n	278fc <dfu_target_modem_init+0xc4>
		LOG_ERR("Failed to open Modem DFU socket.");
   2789c:	2301      	movs	r3, #1
   2789e:	f363 0007 	bfi	r0, r3, #0, #8
   278a2:	f364 108f 	bfi	r0, r4, #6, #10
   278a6:	4950      	ldr	r1, [pc, #320]	; (279e8 <dfu_target_modem_init+0x1b0>)
   278a8:	f017 f85d 	bl	3e966 <log_string_sync>
		return fd;
   278ac:	6828      	ldr	r0, [r5, #0]

	err = modem_dfu_socket_init();
	if (err < 0) {
   278ae:	2800      	cmp	r0, #0
   278b0:	db48      	blt.n	27944 <dfu_target_modem_init+0x10c>
		return err;
	}

	/* Check offset, store to local variable */
	err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   278b2:	ab03      	add	r3, sp, #12
   278b4:	4a4d      	ldr	r2, [pc, #308]	; (279ec <dfu_target_modem_init+0x1b4>)
   278b6:	2107      	movs	r1, #7
   278b8:	6830      	ldr	r0, [r6, #0]
   278ba:	f7ff fea9 	bl	27610 <getsockopt.constprop.2>
	if (err < 0) {
   278be:	2800      	cmp	r0, #0
   278c0:	da13      	bge.n	278ea <dfu_target_modem_init+0xb2>
		if (errno == ENOEXEC) {
   278c2:	f017 fa26 	bl	3ed12 <__errno>
   278c6:	6803      	ldr	r3, [r0, #0]
			LOG_ERR("Modem error: %d", get_modem_error());
   278c8:	f04f 0500 	mov.w	r5, #0
		if (errno == ENOEXEC) {
   278cc:	2b08      	cmp	r3, #8
			LOG_ERR("Modem error: %d", get_modem_error());
   278ce:	f04f 0301 	mov.w	r3, #1
   278d2:	f363 0507 	bfi	r5, r3, #0, #8
   278d6:	f364 158f 	bfi	r5, r4, #6, #10
		if (errno == ENOEXEC) {
   278da:	d14e      	bne.n	2797a <dfu_target_modem_init+0x142>
			LOG_ERR("Modem error: %d", get_modem_error());
   278dc:	f7ff fed0 	bl	27680 <get_modem_error>
   278e0:	4602      	mov	r2, r0
   278e2:	4943      	ldr	r1, [pc, #268]	; (279f0 <dfu_target_modem_init+0x1b8>)
		} else {
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   278e4:	4628      	mov	r0, r5
   278e6:	f017 f83e 	bl	3e966 <log_string_sync>
		}
	}

	if (offset == DIRTY_IMAGE) {
   278ea:	4d40      	ldr	r5, [pc, #256]	; (279ec <dfu_target_modem_init+0x1b4>)
   278ec:	682a      	ldr	r2, [r5, #0]
   278ee:	f5b2 1f20 	cmp.w	r2, #2621440	; 0x280000
   278f2:	d147      	bne.n	27984 <dfu_target_modem_init+0x14c>
		delete_banked_modem_fw();
   278f4:	f7ff ff26 	bl	27744 <delete_banked_modem_fw>
		if (err != 0) {
			LOG_INF("Error while setting offset: %d", offset);
		}
	}

	return 0;
   278f8:	2000      	movs	r0, #0
   278fa:	e023      	b.n	27944 <dfu_target_modem_init+0x10c>
	LOG_INF("Modem DFU Socket created");
   278fc:	2303      	movs	r3, #3
	len = sizeof(version);
   278fe:	2724      	movs	r7, #36	; 0x24
	LOG_INF("Modem DFU Socket created");
   27900:	f363 0007 	bfi	r0, r3, #0, #8
   27904:	f364 108f 	bfi	r0, r4, #6, #10
   27908:	493a      	ldr	r1, [pc, #232]	; (279f4 <dfu_target_modem_init+0x1bc>)
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   2790a:	f10d 0814 	add.w	r8, sp, #20
	LOG_INF("Modem DFU Socket created");
   2790e:	f017 f82a 	bl	3e966 <log_string_sync>
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   27912:	ab04      	add	r3, sp, #16
   27914:	4642      	mov	r2, r8
   27916:	2101      	movs	r1, #1
   27918:	6828      	ldr	r0, [r5, #0]
	len = sizeof(version);
   2791a:	9704      	str	r7, [sp, #16]
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   2791c:	f7ff fe78 	bl	27610 <getsockopt.constprop.2>
	if (err < 0) {
   27920:	2800      	cmp	r0, #0
   27922:	da12      	bge.n	2794a <dfu_target_modem_init+0x112>
		LOG_ERR("Firmware version request failed, errno %d", errno);
   27924:	2301      	movs	r3, #1
   27926:	f04f 0500 	mov.w	r5, #0
   2792a:	f363 0507 	bfi	r5, r3, #0, #8
   2792e:	f017 f9f0 	bl	3ed12 <__errno>
   27932:	f364 158f 	bfi	r5, r4, #6, #10
   27936:	6802      	ldr	r2, [r0, #0]
   27938:	492f      	ldr	r1, [pc, #188]	; (279f8 <dfu_target_modem_init+0x1c0>)
   2793a:	4628      	mov	r0, r5
   2793c:	f017 f813 	bl	3e966 <log_string_sync>
		return -1;
   27940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   27944:	b018      	add	sp, #96	; 0x60
   27946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	snprintf(version_string, sizeof(version_string), "%.*s",
   2794a:	463b      	mov	r3, r7
   2794c:	4a2b      	ldr	r2, [pc, #172]	; (279fc <dfu_target_modem_init+0x1c4>)
   2794e:	2125      	movs	r1, #37	; 0x25
   27950:	f8cd 8000 	str.w	r8, [sp]
   27954:	a80e      	add	r0, sp, #56	; 0x38
   27956:	f015 f823 	bl	3c9a0 <sniprintf>
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));
   2795a:	f04f 0500 	mov.w	r5, #0
   2795e:	2303      	movs	r3, #3
   27960:	a80e      	add	r0, sp, #56	; 0x38
   27962:	f363 0507 	bfi	r5, r3, #0, #8
   27966:	f017 f810 	bl	3e98a <log_strdup>
   2796a:	f364 158f 	bfi	r5, r4, #6, #10
   2796e:	4602      	mov	r2, r0
   27970:	4923      	ldr	r1, [pc, #140]	; (27a00 <dfu_target_modem_init+0x1c8>)
   27972:	4628      	mov	r0, r5
   27974:	f016 fff7 	bl	3e966 <log_string_sync>
	if (err < 0) {
   27978:	e79b      	b.n	278b2 <dfu_target_modem_init+0x7a>
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2797a:	f017 f9ca 	bl	3ed12 <__errno>
   2797e:	4921      	ldr	r1, [pc, #132]	; (27a04 <dfu_target_modem_init+0x1cc>)
   27980:	6802      	ldr	r2, [r0, #0]
   27982:	e7af      	b.n	278e4 <dfu_target_modem_init+0xac>
	} else if (offset != 0) {
   27984:	2a00      	cmp	r2, #0
   27986:	d0b7      	beq.n	278f8 <dfu_target_modem_init+0xc0>
		LOG_INF("Setting offset to 0x%x", offset);
   27988:	2303      	movs	r3, #3
   2798a:	f04f 0000 	mov.w	r0, #0
   2798e:	f363 0007 	bfi	r0, r3, #0, #8
   27992:	f364 108f 	bfi	r0, r4, #6, #10
   27996:	491c      	ldr	r1, [pc, #112]	; (27a08 <dfu_target_modem_init+0x1d0>)
   27998:	f016 ffe5 	bl	3e966 <log_string_sync>
		len = sizeof(offset);
   2799c:	2304      	movs	r3, #4
		err = setsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, len);
   2799e:	462a      	mov	r2, r5
   279a0:	2107      	movs	r1, #7
   279a2:	6830      	ldr	r0, [r6, #0]
		len = sizeof(offset);
   279a4:	9303      	str	r3, [sp, #12]
		err = setsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, len);
   279a6:	f7ff fe95 	bl	276d4 <setsockopt.constprop.3>
		if (err != 0) {
   279aa:	2800      	cmp	r0, #0
   279ac:	d0a4      	beq.n	278f8 <dfu_target_modem_init+0xc0>
			LOG_INF("Error while setting offset: %d", offset);
   279ae:	2303      	movs	r3, #3
   279b0:	f04f 0000 	mov.w	r0, #0
   279b4:	f363 0007 	bfi	r0, r3, #0, #8
   279b8:	f364 108f 	bfi	r0, r4, #6, #10
   279bc:	682a      	ldr	r2, [r5, #0]
   279be:	4913      	ldr	r1, [pc, #76]	; (27a0c <dfu_target_modem_init+0x1d4>)
   279c0:	f016 ffd1 	bl	3e966 <log_string_sync>
   279c4:	e798      	b.n	278f8 <dfu_target_modem_init+0xc0>
   279c6:	bf00      	nop
   279c8:	20023990 	.word	0x20023990
   279cc:	0004476f 	.word	0x0004476f
   279d0:	00044643 	.word	0x00044643
   279d4:	00044746 	.word	0x00044746
   279d8:	00045d80 	.word	0x00045d80
   279dc:	0004235c 	.word	0x0004235c
   279e0:	00042314 	.word	0x00042314
   279e4:	200246d8 	.word	0x200246d8
   279e8:	00048142 	.word	0x00048142
   279ec:	200246dc 	.word	0x200246dc
   279f0:	000481c6 	.word	0x000481c6
   279f4:	00048163 	.word	0x00048163
   279f8:	0004817c 	.word	0x0004817c
   279fc:	000481a6 	.word	0x000481a6
   27a00:	000481ab 	.word	0x000481ab
   27a04:	000481d6 	.word	0x000481d6
   27a08:	000481f3 	.word	0x000481f3
   27a0c:	0004820a 	.word	0x0004820a

00027a10 <dfu_target_modem_offset_get>:

int dfu_target_modem_offset_get(size_t *out)
{
	*out = offset;
   27a10:	4b02      	ldr	r3, [pc, #8]	; (27a1c <dfu_target_modem_offset_get+0xc>)
   27a12:	681b      	ldr	r3, [r3, #0]
   27a14:	6003      	str	r3, [r0, #0]
	return 0;
}
   27a16:	2000      	movs	r0, #0
   27a18:	4770      	bx	lr
   27a1a:	bf00      	nop
   27a1c:	200246dc 	.word	0x200246dc

00027a20 <dfu_target_modem_write>:

int dfu_target_modem_write(const void *const buf, size_t len)
{
   27a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err = 0;
	int sent = 0;
	int modem_error = 0;

	sent = send(fd, buf, len, 0);
   27a22:	4b2e      	ldr	r3, [pc, #184]	; (27adc <dfu_target_modem_write+0xbc>)
	__ASSERT_NO_MSG(socket_ops);
   27a24:	4c2e      	ldr	r4, [pc, #184]	; (27ae0 <dfu_target_modem_write+0xc0>)
   27a26:	681f      	ldr	r7, [r3, #0]
   27a28:	6823      	ldr	r3, [r4, #0]
{
   27a2a:	4605      	mov	r5, r0
   27a2c:	460e      	mov	r6, r1
   27a2e:	b94b      	cbnz	r3, 27a44 <dfu_target_modem_write+0x24>
   27a30:	492c      	ldr	r1, [pc, #176]	; (27ae4 <dfu_target_modem_write+0xc4>)
   27a32:	482d      	ldr	r0, [pc, #180]	; (27ae8 <dfu_target_modem_write+0xc8>)
   27a34:	237e      	movs	r3, #126	; 0x7e
   27a36:	4a2d      	ldr	r2, [pc, #180]	; (27aec <dfu_target_modem_write+0xcc>)
   27a38:	f016 ff78 	bl	3e92c <printk>
   27a3c:	217e      	movs	r1, #126	; 0x7e
   27a3e:	482b      	ldr	r0, [pc, #172]	; (27aec <dfu_target_modem_write+0xcc>)
   27a40:	f016 ff81 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   27a44:	6823      	ldr	r3, [r4, #0]
   27a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27a48:	b94b      	cbnz	r3, 27a5e <dfu_target_modem_write+0x3e>
   27a4a:	4929      	ldr	r1, [pc, #164]	; (27af0 <dfu_target_modem_write+0xd0>)
   27a4c:	4826      	ldr	r0, [pc, #152]	; (27ae8 <dfu_target_modem_write+0xc8>)
   27a4e:	237f      	movs	r3, #127	; 0x7f
   27a50:	4a26      	ldr	r2, [pc, #152]	; (27aec <dfu_target_modem_write+0xcc>)
   27a52:	f016 ff6b 	bl	3e92c <printk>
   27a56:	217f      	movs	r1, #127	; 0x7f
   27a58:	4824      	ldr	r0, [pc, #144]	; (27aec <dfu_target_modem_write+0xcc>)
   27a5a:	f016 ff74 	bl	3e946 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   27a5e:	6823      	ldr	r3, [r4, #0]
   27a60:	4632      	mov	r2, r6
   27a62:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   27a64:	4629      	mov	r1, r5
   27a66:	2300      	movs	r3, #0
   27a68:	4638      	mov	r0, r7
   27a6a:	47a0      	blx	r4
	if (sent > 0) {
   27a6c:	2800      	cmp	r0, #0
   27a6e:	dc2c      	bgt.n	27aca <dfu_target_modem_write+0xaa>
		return 0;
	}

	if (errno != ENOEXEC) {
   27a70:	f017 f94f 	bl	3ed12 <__errno>
   27a74:	6803      	ldr	r3, [r0, #0]
   27a76:	2b08      	cmp	r3, #8
   27a78:	d129      	bne.n	27ace <dfu_target_modem_write+0xae>
		return -EFAULT;
	}

	modem_error = get_modem_error();
   27a7a:	f7ff fe01 	bl	27680 <get_modem_error>
	LOG_ERR("send failed, modem errno %d, dfu err %d", errno, modem_error);
   27a7e:	f04f 0700 	mov.w	r7, #0
   27a82:	2301      	movs	r3, #1
   27a84:	4a1b      	ldr	r2, [pc, #108]	; (27af4 <dfu_target_modem_write+0xd4>)
   27a86:	f363 0707 	bfi	r7, r3, #0, #8
   27a8a:	4b1b      	ldr	r3, [pc, #108]	; (27af8 <dfu_target_modem_write+0xd8>)
	modem_error = get_modem_error();
   27a8c:	4604      	mov	r4, r0
   27a8e:	1a9b      	subs	r3, r3, r2
   27a90:	08db      	lsrs	r3, r3, #3
	LOG_ERR("send failed, modem errno %d, dfu err %d", errno, modem_error);
   27a92:	f363 178f 	bfi	r7, r3, #6, #10
   27a96:	f017 f93c 	bl	3ed12 <__errno>
   27a9a:	4623      	mov	r3, r4
   27a9c:	6802      	ldr	r2, [r0, #0]
   27a9e:	4917      	ldr	r1, [pc, #92]	; (27afc <dfu_target_modem_write+0xdc>)
   27aa0:	4638      	mov	r0, r7
   27aa2:	f016 ff60 	bl	3e966 <log_string_sync>
	switch (modem_error) {
   27aa6:	f114 0f0e 	cmn.w	r4, #14
   27aaa:	d006      	beq.n	27aba <dfu_target_modem_write+0x9a>
		} else {
			return 0;
		}
	}

	return -EFAULT;
   27aac:	3409      	adds	r4, #9
   27aae:	bf0c      	ite	eq
   27ab0:	f06f 0015 	mvneq.w	r0, #21
   27ab4:	f06f 000d 	mvnne.w	r0, #13
}
   27ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		delete_banked_modem_fw();
   27aba:	f7ff fe43 	bl	27744 <delete_banked_modem_fw>
		err = dfu_target_modem_write(buf, len);
   27abe:	4631      	mov	r1, r6
   27ac0:	4628      	mov	r0, r5
   27ac2:	f7ff ffad 	bl	27a20 <dfu_target_modem_write>
		if (err < 0) {
   27ac6:	2800      	cmp	r0, #0
   27ac8:	db04      	blt.n	27ad4 <dfu_target_modem_write+0xb4>
			return 0;
   27aca:	2000      	movs	r0, #0
   27acc:	e7f4      	b.n	27ab8 <dfu_target_modem_write+0x98>
		return -EFAULT;
   27ace:	f06f 000d 	mvn.w	r0, #13
   27ad2:	e7f1      	b.n	27ab8 <dfu_target_modem_write+0x98>
			return -EINVAL;
   27ad4:	f06f 0015 	mvn.w	r0, #21
   27ad8:	e7ee      	b.n	27ab8 <dfu_target_modem_write+0x98>
   27ada:	bf00      	nop
   27adc:	200246d8 	.word	0x200246d8
   27ae0:	20023990 	.word	0x20023990
   27ae4:	0004476f 	.word	0x0004476f
   27ae8:	00044643 	.word	0x00044643
   27aec:	00044746 	.word	0x00044746
   27af0:	00045db8 	.word	0x00045db8
   27af4:	00042314 	.word	0x00042314
   27af8:	0004235c 	.word	0x0004235c
   27afc:	00048229 	.word	0x00048229

00027b00 <dfu_target_modem_done>:

int dfu_target_modem_done(bool successful)
{
   27b00:	b570      	push	{r4, r5, r6, lr}
   27b02:	4b38      	ldr	r3, [pc, #224]	; (27be4 <dfu_target_modem_done+0xe4>)
   27b04:	4c38      	ldr	r4, [pc, #224]	; (27be8 <dfu_target_modem_done+0xe8>)
   27b06:	4e39      	ldr	r6, [pc, #228]	; (27bec <dfu_target_modem_done+0xec>)
   27b08:	1ae4      	subs	r4, r4, r3
   27b0a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	int err = 0;

	if (successful) {
   27b0e:	2800      	cmp	r0, #0
   27b10:	d05b      	beq.n	27bca <dfu_target_modem_done+0xca>
	LOG_INF("Scheduling modem firmware upgrade at next boot");
   27b12:	2303      	movs	r3, #3
   27b14:	f04f 0000 	mov.w	r0, #0
   27b18:	f363 0007 	bfi	r0, r3, #0, #8
   27b1c:	f364 108f 	bfi	r0, r4, #6, #10
   27b20:	4933      	ldr	r1, [pc, #204]	; (27bf0 <dfu_target_modem_done+0xf0>)
   27b22:	f016 ff20 	bl	3e966 <log_string_sync>
	err = setsockopt(fd, SOL_DFU, SO_DFU_APPLY, NULL, 0);
   27b26:	2300      	movs	r3, #0
   27b28:	2104      	movs	r1, #4
   27b2a:	461a      	mov	r2, r3
   27b2c:	6830      	ldr	r0, [r6, #0]
   27b2e:	f7ff fdd1 	bl	276d4 <setsockopt.constprop.3>
	if (err < 0) {
   27b32:	1e05      	subs	r5, r0, #0
   27b34:	da12      	bge.n	27b5c <dfu_target_modem_done+0x5c>
		if (errno == ENOEXEC) {
   27b36:	f017 f8ec 	bl	3ed12 <__errno>
   27b3a:	6803      	ldr	r3, [r0, #0]
   27b3c:	2b08      	cmp	r3, #8
   27b3e:	d13a      	bne.n	27bb6 <dfu_target_modem_done+0xb6>
			LOG_ERR("SO_DFU_APPLY failed, modem error %d",
   27b40:	2301      	movs	r3, #1
   27b42:	f04f 0500 	mov.w	r5, #0
   27b46:	f363 0507 	bfi	r5, r3, #0, #8
   27b4a:	f7ff fd99 	bl	27680 <get_modem_error>
   27b4e:	f364 158f 	bfi	r5, r4, #6, #10
   27b52:	4602      	mov	r2, r0
   27b54:	4628      	mov	r0, r5
   27b56:	4927      	ldr	r1, [pc, #156]	; (27bf4 <dfu_target_modem_done+0xf4>)
			LOG_ERR("SO_DFU_APPLY failed, modem error %d", err);
   27b58:	f016 ff05 	bl	3e966 <log_string_sync>
	__ASSERT_NO_MSG(socket_ops);
   27b5c:	4d26      	ldr	r5, [pc, #152]	; (27bf8 <dfu_target_modem_done+0xf8>)
	} else {
		LOG_INF("Modem upgrade aborted.");
	}


	err = close(fd);
   27b5e:	6836      	ldr	r6, [r6, #0]
   27b60:	682b      	ldr	r3, [r5, #0]
   27b62:	b94b      	cbnz	r3, 27b78 <dfu_target_modem_done+0x78>
   27b64:	4925      	ldr	r1, [pc, #148]	; (27bfc <dfu_target_modem_done+0xfc>)
   27b66:	4826      	ldr	r0, [pc, #152]	; (27c00 <dfu_target_modem_done+0x100>)
   27b68:	2321      	movs	r3, #33	; 0x21
   27b6a:	4a26      	ldr	r2, [pc, #152]	; (27c04 <dfu_target_modem_done+0x104>)
   27b6c:	f016 fede 	bl	3e92c <printk>
   27b70:	2121      	movs	r1, #33	; 0x21
   27b72:	4824      	ldr	r0, [pc, #144]	; (27c04 <dfu_target_modem_done+0x104>)
   27b74:	f016 fee7 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   27b78:	682b      	ldr	r3, [r5, #0]
   27b7a:	685b      	ldr	r3, [r3, #4]
   27b7c:	b94b      	cbnz	r3, 27b92 <dfu_target_modem_done+0x92>
   27b7e:	4922      	ldr	r1, [pc, #136]	; (27c08 <dfu_target_modem_done+0x108>)
   27b80:	481f      	ldr	r0, [pc, #124]	; (27c00 <dfu_target_modem_done+0x100>)
   27b82:	2322      	movs	r3, #34	; 0x22
   27b84:	4a1f      	ldr	r2, [pc, #124]	; (27c04 <dfu_target_modem_done+0x104>)
   27b86:	f016 fed1 	bl	3e92c <printk>
   27b8a:	2122      	movs	r1, #34	; 0x22
   27b8c:	481d      	ldr	r0, [pc, #116]	; (27c04 <dfu_target_modem_done+0x104>)
   27b8e:	f016 feda 	bl	3e946 <assert_post_action>
	return socket_ops->close(sock);
   27b92:	682b      	ldr	r3, [r5, #0]
   27b94:	4630      	mov	r0, r6
   27b96:	685b      	ldr	r3, [r3, #4]
   27b98:	4798      	blx	r3
	if (err < 0) {
   27b9a:	1e05      	subs	r5, r0, #0
   27b9c:	da20      	bge.n	27be0 <dfu_target_modem_done+0xe0>
		LOG_ERR("Failed to close modem DFU socket.");
   27b9e:	f04f 0000 	mov.w	r0, #0
   27ba2:	2301      	movs	r3, #1
   27ba4:	f363 0007 	bfi	r0, r3, #0, #8
   27ba8:	f364 108f 	bfi	r0, r4, #6, #10
   27bac:	4917      	ldr	r1, [pc, #92]	; (27c0c <dfu_target_modem_done+0x10c>)
   27bae:	f016 feda 	bl	3e966 <log_string_sync>
		return err;
	}

	return 0;
}
   27bb2:	4628      	mov	r0, r5
   27bb4:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("SO_DFU_APPLY failed, modem error %d", err);
   27bb6:	f04f 0000 	mov.w	r0, #0
   27bba:	2301      	movs	r3, #1
   27bbc:	f363 0007 	bfi	r0, r3, #0, #8
   27bc0:	f364 108f 	bfi	r0, r4, #6, #10
   27bc4:	462a      	mov	r2, r5
   27bc6:	490b      	ldr	r1, [pc, #44]	; (27bf4 <dfu_target_modem_done+0xf4>)
   27bc8:	e7c6      	b.n	27b58 <dfu_target_modem_done+0x58>
		LOG_INF("Modem upgrade aborted.");
   27bca:	2303      	movs	r3, #3
   27bcc:	f04f 0000 	mov.w	r0, #0
   27bd0:	f363 0007 	bfi	r0, r3, #0, #8
   27bd4:	f364 108f 	bfi	r0, r4, #6, #10
   27bd8:	490d      	ldr	r1, [pc, #52]	; (27c10 <dfu_target_modem_done+0x110>)
   27bda:	f016 fec4 	bl	3e966 <log_string_sync>
   27bde:	e7bd      	b.n	27b5c <dfu_target_modem_done+0x5c>
	return 0;
   27be0:	2500      	movs	r5, #0
   27be2:	e7e6      	b.n	27bb2 <dfu_target_modem_done+0xb2>
   27be4:	00042314 	.word	0x00042314
   27be8:	0004235c 	.word	0x0004235c
   27bec:	200246d8 	.word	0x200246d8
   27bf0:	000480b6 	.word	0x000480b6
   27bf4:	000480e5 	.word	0x000480e5
   27bf8:	20023990 	.word	0x20023990
   27bfc:	0004476f 	.word	0x0004476f
   27c00:	00044643 	.word	0x00044643
   27c04:	00044746 	.word	0x00044746
   27c08:	00045d6e 	.word	0x00045d6e
   27c0c:	00048120 	.word	0x00048120
   27c10:	00048109 	.word	0x00048109

00027c14 <dfu_target_mcuboot_identify>:
}

bool dfu_target_mcuboot_identify(const void *const buf)
{
	/* MCUBoot headers starts with 4 byte magic word */
	return *((const u32_t *)buf) == MCUBOOT_HEADER_MAGIC;
   27c14:	6800      	ldr	r0, [r0, #0]
}
   27c16:	4b02      	ldr	r3, [pc, #8]	; (27c20 <dfu_target_mcuboot_identify+0xc>)
   27c18:	1ac3      	subs	r3, r0, r3
   27c1a:	4258      	negs	r0, r3
   27c1c:	4158      	adcs	r0, r3
   27c1e:	4770      	bx	lr
   27c20:	96f3b83d 	.word	0x96f3b83d

00027c24 <dfu_target_mcuboot_init>:

int dfu_target_mcuboot_init(size_t file_size)
{
   27c24:	b538      	push	{r3, r4, r5, lr}
   27c26:	4605      	mov	r5, r0
	int err = flash_img_init(&flash_img);
   27c28:	4816      	ldr	r0, [pc, #88]	; (27c84 <dfu_target_mcuboot_init+0x60>)
   27c2a:	f016 ff57 	bl	3eadc <flash_img_init>

	if (file_size > PM_MCUBOOT_SECONDARY_SIZE) {
   27c2e:	f5b5 2fd2 	cmp.w	r5, #430080	; 0x69000
	int err = flash_img_init(&flash_img);
   27c32:	4604      	mov	r4, r0
	if (file_size > PM_MCUBOOT_SECONDARY_SIZE) {
   27c34:	d911      	bls.n	27c5a <dfu_target_mcuboot_init+0x36>
		LOG_ERR("Requested file too big to fit in flash");
   27c36:	2301      	movs	r3, #1
   27c38:	f04f 0000 	mov.w	r0, #0
   27c3c:	4a12      	ldr	r2, [pc, #72]	; (27c88 <dfu_target_mcuboot_init+0x64>)
   27c3e:	f363 0007 	bfi	r0, r3, #0, #8
   27c42:	4b12      	ldr	r3, [pc, #72]	; (27c8c <dfu_target_mcuboot_init+0x68>)
   27c44:	4912      	ldr	r1, [pc, #72]	; (27c90 <dfu_target_mcuboot_init+0x6c>)
   27c46:	1a9b      	subs	r3, r3, r2
   27c48:	08db      	lsrs	r3, r3, #3
   27c4a:	f363 108f 	bfi	r0, r3, #6, #10
   27c4e:	f016 fe8a 	bl	3e966 <log_string_sync>
		return -EFBIG;
   27c52:	f06f 041a 	mvn.w	r4, #26
	}

	offset = 0;

	return 0;
}
   27c56:	4620      	mov	r0, r4
   27c58:	bd38      	pop	{r3, r4, r5, pc}
	if (err != 0) {
   27c5a:	b178      	cbz	r0, 27c7c <dfu_target_mcuboot_init+0x58>
		LOG_ERR("flash_img_init error %d", err);
   27c5c:	2301      	movs	r3, #1
   27c5e:	f04f 0000 	mov.w	r0, #0
   27c62:	4a09      	ldr	r2, [pc, #36]	; (27c88 <dfu_target_mcuboot_init+0x64>)
   27c64:	f363 0007 	bfi	r0, r3, #0, #8
   27c68:	4b08      	ldr	r3, [pc, #32]	; (27c8c <dfu_target_mcuboot_init+0x68>)
   27c6a:	490a      	ldr	r1, [pc, #40]	; (27c94 <dfu_target_mcuboot_init+0x70>)
   27c6c:	1a9b      	subs	r3, r3, r2
   27c6e:	08db      	lsrs	r3, r3, #3
   27c70:	f363 108f 	bfi	r0, r3, #6, #10
   27c74:	4622      	mov	r2, r4
   27c76:	f016 fe76 	bl	3e966 <log_string_sync>
		return err;
   27c7a:	e7ec      	b.n	27c56 <dfu_target_mcuboot_init+0x32>
	offset = 0;
   27c7c:	4b06      	ldr	r3, [pc, #24]	; (27c98 <dfu_target_mcuboot_init+0x74>)
   27c7e:	6018      	str	r0, [r3, #0]
	return 0;
   27c80:	e7e9      	b.n	27c56 <dfu_target_mcuboot_init+0x32>
   27c82:	bf00      	nop
   27c84:	200246e0 	.word	0x200246e0
   27c88:	00042314 	.word	0x00042314
   27c8c:	00042354 	.word	0x00042354
   27c90:	00048317 	.word	0x00048317
   27c94:	0004833e 	.word	0x0004833e
   27c98:	200248ec 	.word	0x200248ec

00027c9c <dfu_target_mcuboot_offset_get>:

int dfu_target_mcuboot_offset_get(size_t *out)
{
	*out = offset;
   27c9c:	4b02      	ldr	r3, [pc, #8]	; (27ca8 <dfu_target_mcuboot_offset_get+0xc>)
   27c9e:	681b      	ldr	r3, [r3, #0]
   27ca0:	6003      	str	r3, [r0, #0]
	return 0;
}
   27ca2:	2000      	movs	r0, #0
   27ca4:	4770      	bx	lr
   27ca6:	bf00      	nop
   27ca8:	200248ec 	.word	0x200248ec

00027cac <dfu_target_mcuboot_write>:

int dfu_target_mcuboot_write(const void *const buf, size_t len)
{
   27cac:	b538      	push	{r3, r4, r5, lr}
	int err = flash_img_buffered_write(&flash_img, (u8_t *)buf, len, false);
   27cae:	460a      	mov	r2, r1
{
   27cb0:	460d      	mov	r5, r1
	int err = flash_img_buffered_write(&flash_img, (u8_t *)buf, len, false);
   27cb2:	2300      	movs	r3, #0
   27cb4:	4601      	mov	r1, r0
   27cb6:	480d      	ldr	r0, [pc, #52]	; (27cec <dfu_target_mcuboot_write+0x40>)
   27cb8:	f016 fecf 	bl	3ea5a <flash_img_buffered_write>

	if (err != 0) {
   27cbc:	4604      	mov	r4, r0
   27cbe:	b180      	cbz	r0, 27ce2 <dfu_target_mcuboot_write+0x36>
		LOG_ERR("flash_img_buffered_write error %d", err);
   27cc0:	2301      	movs	r3, #1
   27cc2:	f04f 0000 	mov.w	r0, #0
   27cc6:	4a0a      	ldr	r2, [pc, #40]	; (27cf0 <dfu_target_mcuboot_write+0x44>)
   27cc8:	f363 0007 	bfi	r0, r3, #0, #8
   27ccc:	4b09      	ldr	r3, [pc, #36]	; (27cf4 <dfu_target_mcuboot_write+0x48>)
   27cce:	490a      	ldr	r1, [pc, #40]	; (27cf8 <dfu_target_mcuboot_write+0x4c>)
   27cd0:	1a9b      	subs	r3, r3, r2
   27cd2:	08db      	lsrs	r3, r3, #3
   27cd4:	f363 108f 	bfi	r0, r3, #6, #10
   27cd8:	4622      	mov	r2, r4
   27cda:	f016 fe44 	bl	3e966 <log_string_sync>
	}

	offset += len;

	return 0;
}
   27cde:	4620      	mov	r0, r4
   27ce0:	bd38      	pop	{r3, r4, r5, pc}
	offset += len;
   27ce2:	4b06      	ldr	r3, [pc, #24]	; (27cfc <dfu_target_mcuboot_write+0x50>)
   27ce4:	6819      	ldr	r1, [r3, #0]
   27ce6:	4429      	add	r1, r5
   27ce8:	6019      	str	r1, [r3, #0]
	return 0;
   27cea:	e7f8      	b.n	27cde <dfu_target_mcuboot_write+0x32>
   27cec:	200246e0 	.word	0x200246e0
   27cf0:	00042314 	.word	0x00042314
   27cf4:	00042354 	.word	0x00042354
   27cf8:	00048356 	.word	0x00048356
   27cfc:	200248ec 	.word	0x200248ec

00027d00 <dfu_target_mcuboot_done>:

int dfu_target_mcuboot_done(bool successful)
{
   27d00:	b538      	push	{r3, r4, r5, lr}
   27d02:	4d1e      	ldr	r5, [pc, #120]	; (27d7c <dfu_target_mcuboot_done+0x7c>)
   27d04:	4b1e      	ldr	r3, [pc, #120]	; (27d80 <dfu_target_mcuboot_done+0x80>)
	if (successful) {
   27d06:	4604      	mov	r4, r0
   27d08:	1aed      	subs	r5, r5, r3
   27d0a:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   27d0e:	b358      	cbz	r0, 27d68 <dfu_target_mcuboot_done+0x68>
		int err = flash_img_buffered_write(&flash_img, NULL, 0, true);
   27d10:	2200      	movs	r2, #0
   27d12:	2301      	movs	r3, #1
   27d14:	4611      	mov	r1, r2
   27d16:	481b      	ldr	r0, [pc, #108]	; (27d84 <dfu_target_mcuboot_done+0x84>)
   27d18:	f016 fe9f 	bl	3ea5a <flash_img_buffered_write>

		if (err != 0) {
   27d1c:	4604      	mov	r4, r0
   27d1e:	b160      	cbz	r0, 27d3a <dfu_target_mcuboot_done+0x3a>
			LOG_ERR("flash_img_buffered_write error %d", err);
   27d20:	f04f 0000 	mov.w	r0, #0
   27d24:	2301      	movs	r3, #1
   27d26:	4622      	mov	r2, r4
   27d28:	f363 0007 	bfi	r0, r3, #0, #8
   27d2c:	4916      	ldr	r1, [pc, #88]	; (27d88 <dfu_target_mcuboot_done+0x88>)
   27d2e:	f365 108f 	bfi	r0, r5, #6, #10
			return err;
		}

		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
		if (err != 0) {
			LOG_ERR("boot_request_upgrade error %d", err);
   27d32:	f016 fe18 	bl	3e966 <log_string_sync>
	} else {
		LOG_INF("MCUBoot image upgrade aborted.");
	}

	return 0;
}
   27d36:	4620      	mov	r0, r4
   27d38:	bd38      	pop	{r3, r4, r5, pc}
		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
   27d3a:	f7f7 fb03 	bl	1f344 <boot_request_upgrade>
		if (err != 0) {
   27d3e:	4604      	mov	r4, r0
			LOG_ERR("boot_request_upgrade error %d", err);
   27d40:	f04f 0000 	mov.w	r0, #0
		if (err != 0) {
   27d44:	b13c      	cbz	r4, 27d56 <dfu_target_mcuboot_done+0x56>
			LOG_ERR("boot_request_upgrade error %d", err);
   27d46:	2301      	movs	r3, #1
   27d48:	f363 0007 	bfi	r0, r3, #0, #8
   27d4c:	f365 108f 	bfi	r0, r5, #6, #10
   27d50:	4622      	mov	r2, r4
   27d52:	490e      	ldr	r1, [pc, #56]	; (27d8c <dfu_target_mcuboot_done+0x8c>)
   27d54:	e7ed      	b.n	27d32 <dfu_target_mcuboot_done+0x32>
		LOG_INF("MCUBoot image upgrade scheduled. Reset the device to "
   27d56:	2303      	movs	r3, #3
   27d58:	490d      	ldr	r1, [pc, #52]	; (27d90 <dfu_target_mcuboot_done+0x90>)
   27d5a:	f363 0007 	bfi	r0, r3, #0, #8
   27d5e:	f365 108f 	bfi	r0, r5, #6, #10
		LOG_INF("MCUBoot image upgrade aborted.");
   27d62:	f016 fe00 	bl	3e966 <log_string_sync>
   27d66:	e7e6      	b.n	27d36 <dfu_target_mcuboot_done+0x36>
   27d68:	f04f 0000 	mov.w	r0, #0
   27d6c:	2303      	movs	r3, #3
   27d6e:	f363 0007 	bfi	r0, r3, #0, #8
   27d72:	f365 108f 	bfi	r0, r5, #6, #10
   27d76:	4907      	ldr	r1, [pc, #28]	; (27d94 <dfu_target_mcuboot_done+0x94>)
   27d78:	e7f3      	b.n	27d62 <dfu_target_mcuboot_done+0x62>
   27d7a:	bf00      	nop
   27d7c:	00042354 	.word	0x00042354
   27d80:	00042314 	.word	0x00042314
   27d84:	200246e0 	.word	0x200246e0
   27d88:	00048356 	.word	0x00048356
   27d8c:	0004829f 	.word	0x0004829f
   27d90:	000482bd 	.word	0x000482bd
   27d94:	000482f8 	.word	0x000482f8

00027d98 <abi_getter>:
extern const struct fw_info_abi * const _ext_abis_start[];
extern const u32_t _ext_abis_size;
__noinit fw_info_abi_getter abi_getter_in;

int abi_getter(u32_t id, u32_t index, const struct fw_info_abi **abi)
{
   27d98:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!abi) {
   27d9a:	b1da      	cbz	r2, 27dd4 <abi_getter+0x3c>
		return -EFAULT;
	}

	bool id_found = false;

	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   27d9c:	2300      	movs	r3, #0
	bool id_found = false;
   27d9e:	461c      	mov	r4, r3
   27da0:	4d0e      	ldr	r5, [pc, #56]	; (27ddc <abi_getter+0x44>)
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   27da2:	4f0f      	ldr	r7, [pc, #60]	; (27de0 <abi_getter+0x48>)
   27da4:	42bb      	cmp	r3, r7
   27da6:	d306      	bcc.n	27db6 <abi_getter+0x1e>
				*abi = ext_abi;
				return 0;
			}
		}
	}
	return id_found ? -EBADF : -ENOENT;
   27da8:	2c00      	cmp	r4, #0
   27daa:	bf14      	ite	ne
   27dac:	f06f 0008 	mvnne.w	r0, #8
   27db0:	f06f 0001 	mvneq.w	r0, #1
   27db4:	e009      	b.n	27dca <abi_getter+0x32>
		const struct fw_info_abi *ext_abi = _ext_abis_start[i];
   27db6:	f855 6b04 	ldr.w	r6, [r5], #4
		if (ext_abi->abi_id == id) {
   27dba:	f8d6 c00c 	ldr.w	ip, [r6, #12]
   27dbe:	4560      	cmp	r0, ip
   27dc0:	d106      	bne.n	27dd0 <abi_getter+0x38>
			if (index-- == 0) {
   27dc2:	1e4c      	subs	r4, r1, #1
   27dc4:	b911      	cbnz	r1, 27dcc <abi_getter+0x34>
				return 0;
   27dc6:	4608      	mov	r0, r1
				*abi = ext_abi;
   27dc8:	6016      	str	r6, [r2, #0]
}
   27dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (index-- == 0) {
   27dcc:	4621      	mov	r1, r4
			id_found = true;
   27dce:	2401      	movs	r4, #1
	for (u32_t i = 0; i < (u32_t)&_ext_abis_size; i++) {
   27dd0:	3301      	adds	r3, #1
   27dd2:	e7e7      	b.n	27da4 <abi_getter+0xc>
		return -EFAULT;
   27dd4:	f06f 000d 	mvn.w	r0, #13
   27dd8:	e7f7      	b.n	27dca <abi_getter+0x32>
   27dda:	bf00      	nop
   27ddc:	00049848 	.word	0x00049848
   27de0:	00000000 	.word	0x00000000

00027de4 <close>:
{
   27de4:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   27de6:	4c10      	ldr	r4, [pc, #64]	; (27e28 <close+0x44>)
{
   27de8:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   27dea:	6823      	ldr	r3, [r4, #0]
   27dec:	b94b      	cbnz	r3, 27e02 <close+0x1e>
   27dee:	490f      	ldr	r1, [pc, #60]	; (27e2c <close+0x48>)
   27df0:	480f      	ldr	r0, [pc, #60]	; (27e30 <close+0x4c>)
   27df2:	2321      	movs	r3, #33	; 0x21
   27df4:	4a0f      	ldr	r2, [pc, #60]	; (27e34 <close+0x50>)
   27df6:	f016 fd99 	bl	3e92c <printk>
   27dfa:	2121      	movs	r1, #33	; 0x21
   27dfc:	480d      	ldr	r0, [pc, #52]	; (27e34 <close+0x50>)
   27dfe:	f016 fda2 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   27e02:	6823      	ldr	r3, [r4, #0]
   27e04:	685b      	ldr	r3, [r3, #4]
   27e06:	b94b      	cbnz	r3, 27e1c <close+0x38>
   27e08:	490b      	ldr	r1, [pc, #44]	; (27e38 <close+0x54>)
   27e0a:	4809      	ldr	r0, [pc, #36]	; (27e30 <close+0x4c>)
   27e0c:	2322      	movs	r3, #34	; 0x22
   27e0e:	4a09      	ldr	r2, [pc, #36]	; (27e34 <close+0x50>)
   27e10:	f016 fd8c 	bl	3e92c <printk>
   27e14:	2122      	movs	r1, #34	; 0x22
   27e16:	4807      	ldr	r0, [pc, #28]	; (27e34 <close+0x50>)
   27e18:	f016 fd95 	bl	3e946 <assert_post_action>
	return socket_ops->close(sock);
   27e1c:	6823      	ldr	r3, [r4, #0]
   27e1e:	4628      	mov	r0, r5
}
   27e20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   27e24:	685b      	ldr	r3, [r3, #4]
   27e26:	4718      	bx	r3
   27e28:	20023990 	.word	0x20023990
   27e2c:	0004476f 	.word	0x0004476f
   27e30:	00044643 	.word	0x00044643
   27e34:	00044746 	.word	0x00044746
   27e38:	00045d6e 	.word	0x00045d6e

00027e3c <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   27e3c:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   27e3e:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   27e40:	b118      	cbz	r0, 27e4a <callback_worker+0xe>
		data->callback(data->data);
   27e42:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   27e46:	300c      	adds	r0, #12
   27e48:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   27e4a:	a901      	add	r1, sp, #4
   27e4c:	4802      	ldr	r0, [pc, #8]	; (27e58 <callback_worker+0x1c>)
   27e4e:	f010 fc67 	bl	38720 <k_mem_slab_free>
}
   27e52:	b003      	add	sp, #12
   27e54:	f85d fb04 	ldr.w	pc, [sp], #4
   27e58:	200315a4 	.word	0x200315a4

00027e5c <open_socket>:
{
   27e5c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(socket_ops);
   27e5e:	4c16      	ldr	r4, [pc, #88]	; (27eb8 <open_socket+0x5c>)
   27e60:	6823      	ldr	r3, [r4, #0]
   27e62:	b94b      	cbnz	r3, 27e78 <open_socket+0x1c>
   27e64:	4915      	ldr	r1, [pc, #84]	; (27ebc <open_socket+0x60>)
   27e66:	4816      	ldr	r0, [pc, #88]	; (27ec0 <open_socket+0x64>)
   27e68:	2319      	movs	r3, #25
   27e6a:	4a16      	ldr	r2, [pc, #88]	; (27ec4 <open_socket+0x68>)
   27e6c:	f016 fd5e 	bl	3e92c <printk>
   27e70:	2119      	movs	r1, #25
   27e72:	4814      	ldr	r0, [pc, #80]	; (27ec4 <open_socket+0x68>)
   27e74:	f016 fd67 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   27e78:	6823      	ldr	r3, [r4, #0]
   27e7a:	681b      	ldr	r3, [r3, #0]
   27e7c:	b94b      	cbnz	r3, 27e92 <open_socket+0x36>
   27e7e:	4912      	ldr	r1, [pc, #72]	; (27ec8 <open_socket+0x6c>)
   27e80:	480f      	ldr	r0, [pc, #60]	; (27ec0 <open_socket+0x64>)
   27e82:	231a      	movs	r3, #26
   27e84:	4a0f      	ldr	r2, [pc, #60]	; (27ec4 <open_socket+0x68>)
   27e86:	f016 fd51 	bl	3e92c <printk>
   27e8a:	211a      	movs	r1, #26
   27e8c:	480d      	ldr	r0, [pc, #52]	; (27ec4 <open_socket+0x68>)
   27e8e:	f016 fd5a 	bl	3e946 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   27e92:	6823      	ldr	r3, [r4, #0]
   27e94:	f240 2201 	movw	r2, #513	; 0x201
   27e98:	681b      	ldr	r3, [r3, #0]
   27e9a:	2100      	movs	r1, #0
   27e9c:	2066      	movs	r0, #102	; 0x66
   27e9e:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, 0, NPROTO_AT);
   27ea0:	4b0a      	ldr	r3, [pc, #40]	; (27ecc <open_socket+0x70>)
   27ea2:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   27ea4:	3001      	adds	r0, #1
   27ea6:	d104      	bne.n	27eb2 <open_socket+0x56>
		return -errno;
   27ea8:	f016 ff33 	bl	3ed12 <__errno>
   27eac:	6800      	ldr	r0, [r0, #0]
   27eae:	4240      	negs	r0, r0
}
   27eb0:	bd10      	pop	{r4, pc}
	return 0;
   27eb2:	2000      	movs	r0, #0
   27eb4:	e7fc      	b.n	27eb0 <open_socket+0x54>
   27eb6:	bf00      	nop
   27eb8:	20023990 	.word	0x20023990
   27ebc:	0004476f 	.word	0x0004476f
   27ec0:	00044643 	.word	0x00044643
   27ec4:	00044746 	.word	0x00044746
   27ec8:	00045d80 	.word	0x00045d80
   27ecc:	200248f0 	.word	0x200248f0

00027ed0 <at_write>:
		}
	}
}

static inline int at_write(const char *const cmd, enum at_cmd_state *state)
{
   27ed0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   27ed4:	4680      	mov	r8, r0
   27ed6:	460d      	mov	r5, r1
	int bytes_sent;
	int bytes_to_send = strlen(cmd);
   27ed8:	f7f2 f854 	bl	19f84 <strlen>
	__ASSERT_NO_MSG(socket_ops);
   27edc:	4c30      	ldr	r4, [pc, #192]	; (27fa0 <at_write+0xd0>)
	struct return_state_object ret;

	LOG_DBG("Sending command %s", log_strdup(cmd));

	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   27ede:	4b31      	ldr	r3, [pc, #196]	; (27fa4 <at_write+0xd4>)
	int bytes_to_send = strlen(cmd);
   27ee0:	4606      	mov	r6, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   27ee2:	681f      	ldr	r7, [r3, #0]
   27ee4:	6823      	ldr	r3, [r4, #0]
   27ee6:	b94b      	cbnz	r3, 27efc <at_write+0x2c>
   27ee8:	492f      	ldr	r1, [pc, #188]	; (27fa8 <at_write+0xd8>)
   27eea:	4830      	ldr	r0, [pc, #192]	; (27fac <at_write+0xdc>)
   27eec:	237e      	movs	r3, #126	; 0x7e
   27eee:	4a30      	ldr	r2, [pc, #192]	; (27fb0 <at_write+0xe0>)
   27ef0:	f016 fd1c 	bl	3e92c <printk>
   27ef4:	217e      	movs	r1, #126	; 0x7e
   27ef6:	482e      	ldr	r0, [pc, #184]	; (27fb0 <at_write+0xe0>)
   27ef8:	f016 fd25 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   27efc:	6823      	ldr	r3, [r4, #0]
   27efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27f00:	b94b      	cbnz	r3, 27f16 <at_write+0x46>
   27f02:	492c      	ldr	r1, [pc, #176]	; (27fb4 <at_write+0xe4>)
   27f04:	4829      	ldr	r0, [pc, #164]	; (27fac <at_write+0xdc>)
   27f06:	237f      	movs	r3, #127	; 0x7f
   27f08:	4a29      	ldr	r2, [pc, #164]	; (27fb0 <at_write+0xe0>)
   27f0a:	f016 fd0f 	bl	3e92c <printk>
   27f0e:	217f      	movs	r1, #127	; 0x7f
   27f10:	4827      	ldr	r0, [pc, #156]	; (27fb0 <at_write+0xe0>)
   27f12:	f016 fd18 	bl	3e946 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   27f16:	6823      	ldr	r3, [r4, #0]
   27f18:	4632      	mov	r2, r6
   27f1a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   27f1c:	4641      	mov	r1, r8
   27f1e:	2300      	movs	r3, #0
   27f20:	4638      	mov	r0, r7
   27f22:	47a0      	blx	r4

	if (bytes_sent == -1) {
   27f24:	1c43      	adds	r3, r0, #1
   27f26:	4604      	mov	r4, r0
   27f28:	d121      	bne.n	27f6e <at_write+0x9e>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   27f2a:	2301      	movs	r3, #1
   27f2c:	f04f 0400 	mov.w	r4, #0
   27f30:	4a21      	ldr	r2, [pc, #132]	; (27fb8 <at_write+0xe8>)
   27f32:	f363 0407 	bfi	r4, r3, #0, #8
   27f36:	4b21      	ldr	r3, [pc, #132]	; (27fbc <at_write+0xec>)
   27f38:	1a9b      	subs	r3, r3, r2
   27f3a:	08db      	lsrs	r3, r3, #3
   27f3c:	f363 148f 	bfi	r4, r3, #6, #10
   27f40:	f016 fee7 	bl	3ed12 <__errno>
   27f44:	491e      	ldr	r1, [pc, #120]	; (27fc0 <at_write+0xf0>)
   27f46:	6802      	ldr	r2, [r0, #0]
   27f48:	4620      	mov	r0, r4
   27f4a:	f016 fd0c 	bl	3e966 <log_string_sync>
		ret.code  = -errno;
   27f4e:	f016 fee0 	bl	3ed12 <__errno>
   27f52:	6803      	ldr	r3, [r0, #0]
   27f54:	425b      	negs	r3, r3
   27f56:	9300      	str	r3, [sp, #0]
		ret.state = AT_CMD_ERROR;
   27f58:	2301      	movs	r3, #1
   27f5a:	f88d 3004 	strb.w	r3, [sp, #4]
				"same as expected (%d)",
				bytes_sent, bytes_to_send);
		}
	}

	if (state) {
   27f5e:	b115      	cbz	r5, 27f66 <at_write+0x96>
		*state = ret.state;
   27f60:	f89d 3004 	ldrb.w	r3, [sp, #4]
   27f64:	702b      	strb	r3, [r5, #0]
	}

	return ret.code;
}
   27f66:	9800      	ldr	r0, [sp, #0]
   27f68:	b002      	add	sp, #8
   27f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (z_syscall_trap()) {
		return (int) z_arch_syscall_invoke3(*(u32_t *)&q, *(u32_t *)&data, *(u32_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(q, data, timeout);
   27f6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27f72:	4669      	mov	r1, sp
   27f74:	4813      	ldr	r0, [pc, #76]	; (27fc4 <at_write+0xf4>)
   27f76:	f010 fde3 	bl	38b40 <z_impl_k_msgq_get>
		if (bytes_sent != bytes_to_send) {
   27f7a:	42a6      	cmp	r6, r4
   27f7c:	d0ef      	beq.n	27f5e <at_write+0x8e>
			LOG_ERR("Bytes sent (%d) was not the "
   27f7e:	2301      	movs	r3, #1
   27f80:	f04f 0000 	mov.w	r0, #0
   27f84:	4a0c      	ldr	r2, [pc, #48]	; (27fb8 <at_write+0xe8>)
   27f86:	f363 0007 	bfi	r0, r3, #0, #8
   27f8a:	4b0c      	ldr	r3, [pc, #48]	; (27fbc <at_write+0xec>)
   27f8c:	490e      	ldr	r1, [pc, #56]	; (27fc8 <at_write+0xf8>)
   27f8e:	1a9b      	subs	r3, r3, r2
   27f90:	08db      	lsrs	r3, r3, #3
   27f92:	f363 108f 	bfi	r0, r3, #6, #10
   27f96:	4622      	mov	r2, r4
   27f98:	4633      	mov	r3, r6
   27f9a:	f016 fce4 	bl	3e966 <log_string_sync>
   27f9e:	e7de      	b.n	27f5e <at_write+0x8e>
   27fa0:	20023990 	.word	0x20023990
   27fa4:	200248f0 	.word	0x200248f0
   27fa8:	0004476f 	.word	0x0004476f
   27fac:	00044643 	.word	0x00044643
   27fb0:	00044746 	.word	0x00044746
   27fb4:	00045db8 	.word	0x00045db8
   27fb8:	00042314 	.word	0x00042314
   27fbc:	00042314 	.word	0x00042314
   27fc0:	000483ad 	.word	0x000483ad
   27fc4:	2003164c 	.word	0x2003164c
   27fc8:	000483d0 	.word	0x000483d0

00027fcc <socket_thread_fn>:
{
   27fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
					LOG_ERR("Response buffer not large "
   27fd0:	4b9e      	ldr	r3, [pc, #632]	; (2824c <socket_thread_fn+0x280>)
   27fd2:	4c9f      	ldr	r4, [pc, #636]	; (28250 <socket_thread_fn+0x284>)
{
   27fd4:	b087      	sub	sp, #28
					LOG_ERR("Response buffer not large "
   27fd6:	1ae4      	subs	r4, r4, r3
   27fd8:	f3c4 04c9 	ubfx	r4, r4, #3, #10
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   27fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27fe0:	a903      	add	r1, sp, #12
   27fe2:	489c      	ldr	r0, [pc, #624]	; (28254 <socket_thread_fn+0x288>)
   27fe4:	f010 fb3a 	bl	3865c <k_mem_slab_alloc>
		ret.code  = 0;
   27fe8:	2300      	movs	r3, #0
		item->callback = NULL;
   27fea:	9d03      	ldr	r5, [sp, #12]
		ret.code  = 0;
   27fec:	9304      	str	r3, [sp, #16]
		item->callback = NULL;
   27fee:	f8c5 3a98 	str.w	r3, [r5, #2712]	; 0xa98
		ret.state = AT_CMD_OK;
   27ff2:	f88d 3014 	strb.w	r3, [sp, #20]
	__ASSERT_NO_MSG(socket_ops);
   27ff6:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 282ac <socket_thread_fn+0x2e0>
		bytes_read = recv(common_socket_fd, item->data,
   27ffa:	4b97      	ldr	r3, [pc, #604]	; (28258 <socket_thread_fn+0x28c>)
   27ffc:	350c      	adds	r5, #12
   27ffe:	f8d3 b000 	ldr.w	fp, [r3]
   28002:	f8da 3000 	ldr.w	r3, [sl]
   28006:	b94b      	cbnz	r3, 2801c <socket_thread_fn+0x50>
   28008:	4994      	ldr	r1, [pc, #592]	; (2825c <socket_thread_fn+0x290>)
   2800a:	4895      	ldr	r0, [pc, #596]	; (28260 <socket_thread_fn+0x294>)
   2800c:	2369      	movs	r3, #105	; 0x69
   2800e:	4a95      	ldr	r2, [pc, #596]	; (28264 <socket_thread_fn+0x298>)
   28010:	f016 fc8c 	bl	3e92c <printk>
   28014:	2169      	movs	r1, #105	; 0x69
   28016:	4893      	ldr	r0, [pc, #588]	; (28264 <socket_thread_fn+0x298>)
   28018:	f016 fc95 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   2801c:	f8da 3000 	ldr.w	r3, [sl]
   28020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28022:	b94b      	cbnz	r3, 28038 <socket_thread_fn+0x6c>
   28024:	4990      	ldr	r1, [pc, #576]	; (28268 <socket_thread_fn+0x29c>)
   28026:	488e      	ldr	r0, [pc, #568]	; (28260 <socket_thread_fn+0x294>)
   28028:	236a      	movs	r3, #106	; 0x6a
   2802a:	4a8e      	ldr	r2, [pc, #568]	; (28264 <socket_thread_fn+0x298>)
   2802c:	f016 fc7e 	bl	3e92c <printk>
   28030:	216a      	movs	r1, #106	; 0x6a
   28032:	488c      	ldr	r0, [pc, #560]	; (28264 <socket_thread_fn+0x298>)
   28034:	f016 fc87 	bl	3e946 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   28038:	f8da 3000 	ldr.w	r3, [sl]
   2803c:	f640 228c 	movw	r2, #2700	; 0xa8c
   28040:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   28044:	4629      	mov	r1, r5
   28046:	2300      	movs	r3, #0
   28048:	4658      	mov	r0, fp
   2804a:	47d0      	blx	sl
		if (bytes_read < 0) {
   2804c:	1e02      	subs	r2, r0, #0
   2804e:	da58      	bge.n	28102 <socket_thread_fn+0x136>
			LOG_ERR("AT socket recv failed with err %d",
   28050:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   28054:	f043 0301 	orr.w	r3, r3, #1
   28058:	f363 0607 	bfi	r6, r3, #0, #8
   2805c:	f364 168f 	bfi	r6, r4, #6, #10
   28060:	4630      	mov	r0, r6
   28062:	4982      	ldr	r1, [pc, #520]	; (2826c <socket_thread_fn+0x2a0>)
   28064:	f016 fc7f 	bl	3e966 <log_string_sync>
			if ((close(common_socket_fd) == 0) &&
   28068:	4b7b      	ldr	r3, [pc, #492]	; (28258 <socket_thread_fn+0x28c>)
   2806a:	6818      	ldr	r0, [r3, #0]
   2806c:	f7ff feba 	bl	27de4 <close>
   28070:	2800      	cmp	r0, #0
   28072:	d131      	bne.n	280d8 <socket_thread_fn+0x10c>
			    (open_socket() == 0)) {
   28074:	f7ff fef2 	bl	27e5c <open_socket>
			if ((close(common_socket_fd) == 0) &&
   28078:	bb70      	cbnz	r0, 280d8 <socket_thread_fn+0x10c>
				LOG_INF("AT socket recovered");
   2807a:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   2807e:	f043 0303 	orr.w	r3, r3, #3
   28082:	f363 0707 	bfi	r7, r3, #0, #8
   28086:	f364 178f 	bfi	r7, r4, #6, #10
   2808a:	4979      	ldr	r1, [pc, #484]	; (28270 <socket_thread_fn+0x2a4>)
   2808c:	4638      	mov	r0, r7
   2808e:	f016 fc6a 	bl	3e966 <log_string_sync>
				ret.state = AT_CMD_ERROR;
   28092:	2301      	movs	r3, #1
   28094:	f88d 3014 	strb.w	r3, [sp, #20]
				ret.code  = -errno;
   28098:	f016 fe3b 	bl	3ed12 <__errno>
   2809c:	6803      	ldr	r3, [r0, #0]
   2809e:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   280a0:	9304      	str	r3, [sp, #16]
		if (item->callback == NULL) {
   280a2:	9903      	ldr	r1, [sp, #12]
   280a4:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   280a8:	2b00      	cmp	r3, #0
   280aa:	f040 80a5 	bne.w	281f8 <socket_thread_fn+0x22c>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   280ae:	a903      	add	r1, sp, #12
   280b0:	4868      	ldr	r0, [pc, #416]	; (28254 <socket_thread_fn+0x288>)
   280b2:	f010 fb35 	bl	38720 <k_mem_slab_free>
	return z_impl_k_sem_count_get(sem);
   280b6:	4b6f      	ldr	r3, [pc, #444]	; (28274 <socket_thread_fn+0x2a8>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   280b8:	689b      	ldr	r3, [r3, #8]
   280ba:	2b00      	cmp	r3, #0
   280bc:	d18e      	bne.n	27fdc <socket_thread_fn+0x10>
   280be:	f89d 2014 	ldrb.w	r2, [sp, #20]
   280c2:	2a04      	cmp	r2, #4
   280c4:	d08a      	beq.n	27fdc <socket_thread_fn+0x10>
			current_cmd_handler = NULL;
   280c6:	4a6c      	ldr	r2, [pc, #432]	; (28278 <socket_thread_fn+0x2ac>)
   280c8:	6013      	str	r3, [r2, #0]
	return z_impl_k_msgq_put(q, data, timeout);
   280ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   280ce:	a904      	add	r1, sp, #16
   280d0:	486a      	ldr	r0, [pc, #424]	; (2827c <socket_thread_fn+0x2b0>)
   280d2:	f010 fc8f 	bl	389f4 <z_impl_k_msgq_put>
   280d6:	e781      	b.n	27fdc <socket_thread_fn+0x10>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   280d8:	2301      	movs	r3, #1
   280da:	f04f 0500 	mov.w	r5, #0
   280de:	f363 0507 	bfi	r5, r3, #0, #8
   280e2:	f016 fe16 	bl	3ed12 <__errno>
   280e6:	f364 158f 	bfi	r5, r4, #6, #10
   280ea:	6802      	ldr	r2, [r0, #0]
   280ec:	4964      	ldr	r1, [pc, #400]	; (28280 <socket_thread_fn+0x2b4>)
   280ee:	4628      	mov	r0, r5
   280f0:	f016 fc39 	bl	3e966 <log_string_sync>
			close(common_socket_fd);
   280f4:	4b58      	ldr	r3, [pc, #352]	; (28258 <socket_thread_fn+0x28c>)
   280f6:	6818      	ldr	r0, [r3, #0]
   280f8:	f7ff fe74 	bl	27de4 <close>
}
   280fc:	b007      	add	sp, #28
   280fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (bytes_read == sizeof(item->data) ||
   28102:	f640 238c 	movw	r3, #2700	; 0xa8c
   28106:	429a      	cmp	r2, r3
   28108:	d004      	beq.n	28114 <socket_thread_fn+0x148>
			   item->data[bytes_read - 1] != '\0') {
   2810a:	f8dd a00c 	ldr.w	sl, [sp, #12]
   2810e:	4452      	add	r2, sl
		} else if (bytes_read == sizeof(item->data) ||
   28110:	7ad3      	ldrb	r3, [r2, #11]
   28112:	b173      	cbz	r3, 28132 <socket_thread_fn+0x166>
			LOG_ERR("AT message to large for reception buffer or "
   28114:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   28118:	f043 0301 	orr.w	r3, r3, #1
   2811c:	f363 0807 	bfi	r8, r3, #0, #8
   28120:	f364 188f 	bfi	r8, r4, #6, #10
   28124:	4957      	ldr	r1, [pc, #348]	; (28284 <socket_thread_fn+0x2b8>)
   28126:	4640      	mov	r0, r8
   28128:	f016 fc1d 	bl	3e966 <log_string_sync>
			ret.code  = -ENOBUFS;
   2812c:	f06f 0368 	mvn.w	r3, #104	; 0x68
   28130:	e7b6      	b.n	280a0 <socket_thread_fn+0xd4>
	ret->state = AT_CMD_NOTIFICATION;
   28132:	2204      	movs	r2, #4
		payload_len = get_return_code(item->data, &ret);
   28134:	f10a 050c 	add.w	r5, sl, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   28138:	4953      	ldr	r1, [pc, #332]	; (28288 <socket_thread_fn+0x2bc>)
   2813a:	4628      	mov	r0, r5
   2813c:	9301      	str	r3, [sp, #4]
	ret->state = AT_CMD_NOTIFICATION;
   2813e:	f88d 2014 	strb.w	r2, [sp, #20]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   28142:	f019 f80f 	bl	41164 <strstr>
		if (tmpstr) {
   28146:	4683      	mov	fp, r0
   28148:	b310      	cbz	r0, 28190 <socket_thread_fn+0x1c4>
			ret->state = AT_CMD_OK;
   2814a:	9b01      	ldr	r3, [sp, #4]
   2814c:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code  = -ENOEXEC;
   28150:	9304      	str	r3, [sp, #16]
		buf[new_len++] = '\0';
   28152:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   28154:	ebab 0205 	sub.w	r2, fp, r5
		buf[new_len++] = '\0';
   28158:	3201      	adds	r2, #1
   2815a:	f88b 3000 	strb.w	r3, [fp]
		if (ret.state != AT_CMD_NOTIFICATION) {
   2815e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   28162:	2b04      	cmp	r3, #4
   28164:	d05e      	beq.n	28224 <socket_thread_fn+0x258>
			if ((response_buf_len > 0) &&
   28166:	f8df a148 	ldr.w	sl, [pc, #328]	; 282b0 <socket_thread_fn+0x2e4>
   2816a:	f8da 3000 	ldr.w	r3, [sl]
   2816e:	2b00      	cmp	r3, #0
   28170:	d061      	beq.n	28236 <socket_thread_fn+0x26a>
			    (response_buf != NULL)) {
   28172:	4d46      	ldr	r5, [pc, #280]	; (2828c <socket_thread_fn+0x2c0>)
   28174:	6828      	ldr	r0, [r5, #0]
			if ((response_buf_len > 0) &&
   28176:	2800      	cmp	r0, #0
   28178:	d05d      	beq.n	28236 <socket_thread_fn+0x26a>
				if (response_buf_len > payload_len) {
   2817a:	4293      	cmp	r3, r2
   2817c:	d92c      	bls.n	281d8 <socket_thread_fn+0x20c>
   2817e:	9903      	ldr	r1, [sp, #12]
   28180:	310c      	adds	r1, #12
   28182:	f018 fded 	bl	40d60 <memcpy>
				response_buf_len = 0;
   28186:	2300      	movs	r3, #0
   28188:	f8ca 3000 	str.w	r3, [sl]
				response_buf     = NULL;
   2818c:	602b      	str	r3, [r5, #0]
				goto next;
   2818e:	e788      	b.n	280a2 <socket_thread_fn+0xd6>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   28190:	493f      	ldr	r1, [pc, #252]	; (28290 <socket_thread_fn+0x2c4>)
   28192:	4628      	mov	r0, r5
   28194:	f018 ffe6 	bl	41164 <strstr>
		if (tmpstr) {
   28198:	4683      	mov	fp, r0
   2819a:	b128      	cbz	r0, 281a8 <socket_thread_fn+0x1dc>
			ret->state = AT_CMD_ERROR;
   2819c:	2301      	movs	r3, #1
   2819e:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code  = -ENOEXEC;
   281a2:	f06f 0307 	mvn.w	r3, #7
   281a6:	e7d3      	b.n	28150 <socket_thread_fn+0x184>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   281a8:	493a      	ldr	r1, [pc, #232]	; (28294 <socket_thread_fn+0x2c8>)
   281aa:	4628      	mov	r0, r5
   281ac:	f018 ffda 	bl	41164 <strstr>
		if (tmpstr) {
   281b0:	4683      	mov	fp, r0
   281b2:	b140      	cbz	r0, 281c6 <socket_thread_fn+0x1fa>
			ret->state = AT_CMD_ERROR_CMS;
   281b4:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   281b6:	f10a 0011 	add.w	r0, sl, #17
			ret->state = AT_CMD_ERROR_CME;
   281ba:	f88d 3014 	strb.w	r3, [sp, #20]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   281be:	f018 fdaf 	bl	40d20 <atoi>
   281c2:	9004      	str	r0, [sp, #16]
			break;
   281c4:	e7c5      	b.n	28152 <socket_thread_fn+0x186>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   281c6:	4934      	ldr	r1, [pc, #208]	; (28298 <socket_thread_fn+0x2cc>)
   281c8:	4628      	mov	r0, r5
   281ca:	f018 ffcb 	bl	41164 <strstr>
		if (tmpstr) {
   281ce:	4683      	mov	fp, r0
   281d0:	2800      	cmp	r0, #0
   281d2:	d035      	beq.n	28240 <socket_thread_fn+0x274>
			ret->state = AT_CMD_ERROR_CME;
   281d4:	2303      	movs	r3, #3
   281d6:	e7ee      	b.n	281b6 <socket_thread_fn+0x1ea>
					LOG_ERR("Response buffer not large "
   281d8:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   281dc:	f043 0301 	orr.w	r3, r3, #1
   281e0:	f363 0907 	bfi	r9, r3, #0, #8
   281e4:	f364 198f 	bfi	r9, r4, #6, #10
   281e8:	492c      	ldr	r1, [pc, #176]	; (2829c <socket_thread_fn+0x2d0>)
   281ea:	4648      	mov	r0, r9
   281ec:	f016 fbbb 	bl	3e966 <log_string_sync>
					ret.code  = -EMSGSIZE;
   281f0:	f06f 0379 	mvn.w	r3, #121	; 0x79
   281f4:	9304      	str	r3, [sp, #16]
   281f6:	e7c6      	b.n	28186 <socket_thread_fn+0x1ba>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   281f8:	4b29      	ldr	r3, [pc, #164]	; (282a0 <socket_thread_fn+0x2d4>)
   281fa:	2200      	movs	r2, #0
   281fc:	604b      	str	r3, [r1, #4]
   281fe:	460b      	mov	r3, r1
   28200:	600a      	str	r2, [r1, #0]
   28202:	f843 2f08 	str.w	r2, [r3, #8]!
   28206:	e8d3 2fef 	ldaex	r2, [r3]
   2820a:	f042 0001 	orr.w	r0, r2, #1
   2820e:	e8c3 0fe5 	stlex	r5, r0, [r3]
   28212:	2d00      	cmp	r5, #0
   28214:	d1f7      	bne.n	28206 <socket_thread_fn+0x23a>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   28216:	07d3      	lsls	r3, r2, #31
   28218:	f53f af4d 	bmi.w	280b6 <socket_thread_fn+0xea>
		k_queue_append(&work_q->queue, work);
   2821c:	4821      	ldr	r0, [pc, #132]	; (282a4 <socket_thread_fn+0x2d8>)
   2821e:	f018 fc3d 	bl	40a9c <k_queue_append>
   28222:	e748      	b.n	280b6 <socket_thread_fn+0xea>
		if (payload_len == 0) {
   28224:	2a00      	cmp	r2, #0
   28226:	f43f af3c 	beq.w	280a2 <socket_thread_fn+0xd6>
			item->callback = notification_handler;
   2822a:	4b1f      	ldr	r3, [pc, #124]	; (282a8 <socket_thread_fn+0x2dc>)
			item->callback = current_cmd_handler;
   2822c:	681a      	ldr	r2, [r3, #0]
   2822e:	9b03      	ldr	r3, [sp, #12]
   28230:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
   28234:	e735      	b.n	280a2 <socket_thread_fn+0xd6>
		if (payload_len == 0) {
   28236:	2a00      	cmp	r2, #0
   28238:	f43f af33 	beq.w	280a2 <socket_thread_fn+0xd6>
			item->callback = current_cmd_handler;
   2823c:	4b0e      	ldr	r3, [pc, #56]	; (28278 <socket_thread_fn+0x2ac>)
   2823e:	e7f5      	b.n	2822c <socket_thread_fn+0x260>
		new_len = strlen(buf) + 1;
   28240:	4628      	mov	r0, r5
   28242:	f7f1 fe9f 	bl	19f84 <strlen>
   28246:	1c42      	adds	r2, r0, #1
   28248:	e789      	b.n	2815e <socket_thread_fn+0x192>
   2824a:	bf00      	nop
   2824c:	00042314 	.word	0x00042314
   28250:	00042314 	.word	0x00042314
   28254:	200315a4 	.word	0x200315a4
   28258:	200248f0 	.word	0x200248f0
   2825c:	0004476f 	.word	0x0004476f
   28260:	00044643 	.word	0x00044643
   28264:	00044746 	.word	0x00044746
   28268:	00045da7 	.word	0x00045da7
   2826c:	00048402 	.word	0x00048402
   28270:	00048424 	.word	0x00048424
   28274:	200315f4 	.word	0x200315f4
   28278:	200248f4 	.word	0x200248f4
   2827c:	2003164c 	.word	0x2003164c
   28280:	00048438 	.word	0x00048438
   28284:	0004846f 	.word	0x0004846f
   28288:	000484b9 	.word	0x000484b9
   2828c:	200248fc 	.word	0x200248fc
   28290:	00046e46 	.word	0x00046e46
   28294:	000484bc 	.word	0x000484bc
   28298:	000484c2 	.word	0x000484c2
   2829c:	000484c8 	.word	0x000484c8
   282a0:	00027e3d 	.word	0x00027e3d
   282a4:	2002a25c 	.word	0x2002a25c
   282a8:	200248f8 	.word	0x200248f8
   282ac:	20023990 	.word	0x20023990
   282b0:	20024900 	.word	0x20024900

000282b4 <at_cmd_driver_init>:

	k_sem_give(&cmd_pending);
}

static int at_cmd_driver_init(struct device *dev)
{
   282b4:	b510      	push	{r4, lr}
   282b6:	b086      	sub	sp, #24
	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   282b8:	f7ff fdd0 	bl	27e5c <open_socket>
	if (err) {
   282bc:	4604      	mov	r4, r0
   282be:	b188      	cbz	r0, 282e4 <at_cmd_driver_init+0x30>
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   282c0:	2301      	movs	r3, #1
   282c2:	f04f 0000 	mov.w	r0, #0
   282c6:	4a0f      	ldr	r2, [pc, #60]	; (28304 <at_cmd_driver_init+0x50>)
   282c8:	f363 0007 	bfi	r0, r3, #0, #8
   282cc:	4b0e      	ldr	r3, [pc, #56]	; (28308 <at_cmd_driver_init+0x54>)
   282ce:	490f      	ldr	r1, [pc, #60]	; (2830c <at_cmd_driver_init+0x58>)
   282d0:	1a9b      	subs	r3, r3, r2
   282d2:	08db      	lsrs	r3, r3, #3
   282d4:	f363 108f 	bfi	r0, r3, #6, #10
   282d8:	4622      	mov	r2, r4
   282da:	f016 fb44 	bl	3e966 <log_string_sync>
			THREAD_PRIORITY, 0, K_NO_WAIT);

	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   282de:	4620      	mov	r0, r4
   282e0:	b006      	add	sp, #24
   282e2:	bd10      	pop	{r4, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   282e4:	230a      	movs	r3, #10
   282e6:	e9cd 0004 	strd	r0, r0, [sp, #16]
   282ea:	e9cd 0302 	strd	r0, r3, [sp, #8]
   282ee:	e9cd 0000 	strd	r0, r0, [sp]
   282f2:	4b07      	ldr	r3, [pc, #28]	; (28310 <at_cmd_driver_init+0x5c>)
   282f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   282f8:	4906      	ldr	r1, [pc, #24]	; (28314 <at_cmd_driver_init+0x60>)
   282fa:	4807      	ldr	r0, [pc, #28]	; (28318 <at_cmd_driver_init+0x64>)
   282fc:	f012 f9e4 	bl	3a6c8 <z_impl_k_thread_create>
	return 0;
   28300:	e7ed      	b.n	282de <at_cmd_driver_init+0x2a>
   28302:	bf00      	nop
   28304:	00042314 	.word	0x00042314
   28308:	00042314 	.word	0x00042314
   2830c:	0004838b 	.word	0x0004838b
   28310:	00027fcd 	.word	0x00027fcd
   28314:	2002c1b8 	.word	0x2002c1b8
   28318:	20024904 	.word	0x20024904

0002831c <at_cmd_write>:
{
   2831c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28320:	4605      	mov	r5, r0
   28322:	4688      	mov	r8, r1
   28324:	4617      	mov	r7, r2
   28326:	461e      	mov	r6, r3
	return z_impl_k_sem_take(sem, timeout);
   28328:	4c0a      	ldr	r4, [pc, #40]	; (28354 <at_cmd_write+0x38>)
   2832a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2832e:	4620      	mov	r0, r4
   28330:	f012 f886 	bl	3a440 <z_impl_k_sem_take>
	response_buf     = buf;
   28334:	4b08      	ldr	r3, [pc, #32]	; (28358 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   28336:	4631      	mov	r1, r6
	response_buf     = buf;
   28338:	f8c3 8000 	str.w	r8, [r3]
	response_buf_len = buf_len;
   2833c:	4b07      	ldr	r3, [pc, #28]	; (2835c <at_cmd_write+0x40>)
	int return_code = at_write(cmd, state);
   2833e:	4628      	mov	r0, r5
	response_buf_len = buf_len;
   28340:	601f      	str	r7, [r3, #0]
	int return_code = at_write(cmd, state);
   28342:	f7ff fdc5 	bl	27ed0 <at_write>
   28346:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   28348:	4620      	mov	r0, r4
   2834a:	f012 f831 	bl	3a3b0 <z_impl_k_sem_give>
}
   2834e:	4628      	mov	r0, r5
   28350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28354:	200315f4 	.word	0x200315f4
   28358:	200248fc 	.word	0x200248fc
   2835c:	20024900 	.word	0x20024900

00028360 <at_cmd_set_notification_handler>:
{
   28360:	b538      	push	{r3, r4, r5, lr}
   28362:	4605      	mov	r5, r0
	return z_impl_k_sem_take(sem, timeout);
   28364:	4c06      	ldr	r4, [pc, #24]	; (28380 <at_cmd_set_notification_handler+0x20>)
   28366:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2836a:	4620      	mov	r0, r4
   2836c:	f012 f868 	bl	3a440 <z_impl_k_sem_take>
	notification_handler = handler;
   28370:	4b04      	ldr	r3, [pc, #16]	; (28384 <at_cmd_set_notification_handler+0x24>)
   28372:	601d      	str	r5, [r3, #0]
	z_impl_k_sem_give(sem);
   28374:	4620      	mov	r0, r4
}
   28376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2837a:	f012 b819 	b.w	3a3b0 <z_impl_k_sem_give>
   2837e:	bf00      	nop
   28380:	200315f4 	.word	0x200315f4
   28384:	200248f8 	.word	0x200248f8

00028388 <w_lte_lc_init>:
		k_sem_give(&link);
	}
}

static int w_lte_lc_init(void)
{
   28388:	b508      	push	{r3, lr}
#if defined(CONFIG_BSD_LIBRARY_TRACE_ENABLED)
	if (at_cmd_write(mdm_trace, NULL, 0, NULL) != 0) {
		return -EIO;
	}
#endif
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   2838a:	2300      	movs	r3, #0
   2838c:	4804      	ldr	r0, [pc, #16]	; (283a0 <w_lte_lc_init+0x18>)
   2838e:	461a      	mov	r2, r3
   28390:	4619      	mov	r1, r3
   28392:	f7ff ffc3 	bl	2831c <at_cmd_write>
   28396:	2800      	cmp	r0, #0
	}
	LOG_INF("PDN Auth: %s", log_strdup(cgauth));
#endif

	return 0;
}
   28398:	bf18      	it	ne
   2839a:	f06f 0004 	mvnne.w	r0, #4
   2839e:	bd08      	pop	{r3, pc}
   283a0:	00048577 	.word	0x00048577

000283a4 <parse_nw_reg_status>:
 */
static int parse_nw_reg_status(const char *at_response,
			       enum lte_lc_nw_reg_status *status)
{
	int err, reg_status;
	struct at_param_list resp_list = {0};
   283a4:	2300      	movs	r3, #0
{
   283a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   283a8:	b087      	sub	sp, #28
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   283aa:	9302      	str	r3, [sp, #8]
	struct at_param_list resp_list = {0};
   283ac:	e9cd 3304 	strd	r3, r3, [sp, #16]
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   283b0:	f8cd 300b 	str.w	r3, [sp, #11]
	size_t response_prefix_len = sizeof(response_prefix);
   283b4:	2307      	movs	r3, #7
{
   283b6:	460e      	mov	r6, r1
	size_t response_prefix_len = sizeof(response_prefix);
   283b8:	9301      	str	r3, [sp, #4]

	if ((at_response == NULL) || (status == NULL)) {
   283ba:	4607      	mov	r7, r0
   283bc:	2800      	cmp	r0, #0
   283be:	f000 8088 	beq.w	284d2 <parse_nw_reg_status+0x12e>
   283c2:	2900      	cmp	r1, #0
   283c4:	f000 8085 	beq.w	284d2 <parse_nw_reg_status+0x12e>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT);
   283c8:	210a      	movs	r1, #10
   283ca:	a804      	add	r0, sp, #16
   283cc:	f017 ffff 	bl	403ce <at_params_list_init>
	if (err) {
   283d0:	4d41      	ldr	r5, [pc, #260]	; (284d8 <parse_nw_reg_status+0x134>)
   283d2:	4b42      	ldr	r3, [pc, #264]	; (284dc <parse_nw_reg_status+0x138>)
   283d4:	4604      	mov	r4, r0
   283d6:	1aed      	subs	r5, r5, r3
   283d8:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   283dc:	b168      	cbz	r0, 283fa <parse_nw_reg_status+0x56>
		LOG_ERR("Could not init AT params list, error: %d", err);
   283de:	f04f 0000 	mov.w	r0, #0
   283e2:	2301      	movs	r3, #1
   283e4:	f363 0007 	bfi	r0, r3, #0, #8
   283e8:	f365 108f 	bfi	r0, r5, #6, #10
   283ec:	4622      	mov	r2, r4
   283ee:	493c      	ldr	r1, [pc, #240]	; (284e0 <parse_nw_reg_status+0x13c>)
   283f0:	f016 fab9 	bl	3e966 <log_string_sync>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   283f4:	4620      	mov	r0, r4
   283f6:	b007      	add	sp, #28
   283f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_max_params_from_str(at_response,
   283fa:	4601      	mov	r1, r0
   283fc:	230a      	movs	r3, #10
   283fe:	aa04      	add	r2, sp, #16
   28400:	4638      	mov	r0, r7
   28402:	f7fb fa97 	bl	23934 <at_parser_max_params_from_str>
	if (err) {
   28406:	4604      	mov	r4, r0
   28408:	b170      	cbz	r0, 28428 <parse_nw_reg_status+0x84>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   2840a:	f04f 0000 	mov.w	r0, #0
   2840e:	2301      	movs	r3, #1
   28410:	4622      	mov	r2, r4
   28412:	f363 0007 	bfi	r0, r3, #0, #8
   28416:	4933      	ldr	r1, [pc, #204]	; (284e4 <parse_nw_reg_status+0x140>)
   28418:	f365 108f 	bfi	r0, r5, #6, #10
		LOG_ERR("Could not get response prefix, error: %d", err);
   2841c:	f016 faa3 	bl	3e966 <log_string_sync>
	at_params_list_free(&resp_list);
   28420:	a804      	add	r0, sp, #16
   28422:	f017 ffe7 	bl	403f4 <at_params_list_free>
	return err;
   28426:	e7e5      	b.n	283f4 <parse_nw_reg_status+0x50>
	err = at_params_string_get(&resp_list,
   28428:	4601      	mov	r1, r0
   2842a:	ab01      	add	r3, sp, #4
   2842c:	aa02      	add	r2, sp, #8
   2842e:	a804      	add	r0, sp, #16
   28430:	f018 f8a5 	bl	4057e <at_params_string_get>
	if (err) {
   28434:	4604      	mov	r4, r0
   28436:	b148      	cbz	r0, 2844c <parse_nw_reg_status+0xa8>
		LOG_ERR("Could not get response prefix, error: %d", err);
   28438:	f04f 0000 	mov.w	r0, #0
   2843c:	2301      	movs	r3, #1
   2843e:	f363 0007 	bfi	r0, r3, #0, #8
   28442:	f365 108f 	bfi	r0, r5, #6, #10
   28446:	4622      	mov	r2, r4
   28448:	4927      	ldr	r1, [pc, #156]	; (284e8 <parse_nw_reg_status+0x144>)
   2844a:	e7e7      	b.n	2841c <parse_nw_reg_status+0x78>
	if (!response_is_valid(response_prefix, response_prefix_len,
   2844c:	4a27      	ldr	r2, [pc, #156]	; (284ec <parse_nw_reg_status+0x148>)
   2844e:	9901      	ldr	r1, [sp, #4]
   28450:	a802      	add	r0, sp, #8
   28452:	f018 fa9f 	bl	40994 <response_is_valid>
   28456:	b950      	cbnz	r0, 2846e <parse_nw_reg_status+0xca>
		LOG_ERR("Invalid CEREG response");
   28458:	2301      	movs	r3, #1
   2845a:	f363 0007 	bfi	r0, r3, #0, #8
   2845e:	f365 108f 	bfi	r0, r5, #6, #10
   28462:	4923      	ldr	r1, [pc, #140]	; (284f0 <parse_nw_reg_status+0x14c>)
   28464:	f016 fa7f 	bl	3e966 <log_string_sync>
		err = -EIO;
   28468:	f06f 0404 	mvn.w	r4, #4
   2846c:	e7d8      	b.n	28420 <parse_nw_reg_status+0x7c>
	err = at_params_int_get(&resp_list, AT_CEREG_REG_STATUS_INDEX,
   2846e:	466a      	mov	r2, sp
   28470:	2101      	movs	r1, #1
   28472:	a804      	add	r0, sp, #16
   28474:	f018 f86c 	bl	40550 <at_params_int_get>
	if (err) {
   28478:	4604      	mov	r4, r0
   2847a:	b148      	cbz	r0, 28490 <parse_nw_reg_status+0xec>
		LOG_ERR("Could not get registration status, error: %d", err);
   2847c:	f04f 0000 	mov.w	r0, #0
   28480:	2301      	movs	r3, #1
   28482:	f363 0007 	bfi	r0, r3, #0, #8
   28486:	f365 108f 	bfi	r0, r5, #6, #10
   2848a:	4622      	mov	r2, r4
   2848c:	4919      	ldr	r1, [pc, #100]	; (284f4 <parse_nw_reg_status+0x150>)
   2848e:	e7c5      	b.n	2841c <parse_nw_reg_status+0x78>
	switch (reg_status) {
   28490:	9b00      	ldr	r3, [sp, #0]
   28492:	2b08      	cmp	r3, #8
   28494:	d002      	beq.n	2849c <parse_nw_reg_status+0xf8>
   28496:	dc0e      	bgt.n	284b6 <parse_nw_reg_status+0x112>
   28498:	2b05      	cmp	r3, #5
   2849a:	d80e      	bhi.n	284ba <parse_nw_reg_status+0x116>
		LOG_DBG("Network registration status: %d", reg_status);
   2849c:	2204      	movs	r2, #4
   2849e:	f04f 0000 	mov.w	r0, #0
   284a2:	f362 0007 	bfi	r0, r2, #0, #8
		*status = reg_status;
   284a6:	7033      	strb	r3, [r6, #0]
		LOG_DBG("Network registration status: %d", reg_status);
   284a8:	f365 108f 	bfi	r0, r5, #6, #10
   284ac:	4a12      	ldr	r2, [pc, #72]	; (284f8 <parse_nw_reg_status+0x154>)
   284ae:	4913      	ldr	r1, [pc, #76]	; (284fc <parse_nw_reg_status+0x158>)
   284b0:	f016 fa59 	bl	3e966 <log_string_sync>
   284b4:	e7b4      	b.n	28420 <parse_nw_reg_status+0x7c>
	switch (reg_status) {
   284b6:	2b5a      	cmp	r3, #90	; 0x5a
   284b8:	d0f0      	beq.n	2849c <parse_nw_reg_status+0xf8>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   284ba:	2201      	movs	r2, #1
   284bc:	f04f 0000 	mov.w	r0, #0
   284c0:	f362 0007 	bfi	r0, r2, #0, #8
   284c4:	f365 108f 	bfi	r0, r5, #6, #10
   284c8:	461a      	mov	r2, r3
   284ca:	490d      	ldr	r1, [pc, #52]	; (28500 <parse_nw_reg_status+0x15c>)
   284cc:	f016 fa4b 	bl	3e966 <log_string_sync>
   284d0:	e7ca      	b.n	28468 <parse_nw_reg_status+0xc4>
		return -EINVAL;
   284d2:	f06f 0415 	mvn.w	r4, #21
   284d6:	e78d      	b.n	283f4 <parse_nw_reg_status+0x50>
   284d8:	00042394 	.word	0x00042394
   284dc:	00042314 	.word	0x00042314
   284e0:	000485c4 	.word	0x000485c4
   284e4:	000485ed 	.word	0x000485ed
   284e8:	0004861a 	.word	0x0004861a
   284ec:	00048643 	.word	0x00048643
   284f0:	0004864a 	.word	0x0004864a
   284f4:	00048661 	.word	0x00048661
   284f8:	0004850c 	.word	0x0004850c
   284fc:	0004868e 	.word	0x0004868e
   28500:	000486b2 	.word	0x000486b2

00028504 <at_handler>:
{
   28504:	b573      	push	{r0, r1, r4, r5, r6, lr}
   28506:	4b1e      	ldr	r3, [pc, #120]	; (28580 <at_handler+0x7c>)
   28508:	4c1e      	ldr	r4, [pc, #120]	; (28584 <at_handler+0x80>)
	if (response == NULL) {
   2850a:	460d      	mov	r5, r1
   2850c:	1ae4      	subs	r4, r4, r3
   2850e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   28512:	b959      	cbnz	r1, 2852c <at_handler+0x28>
		LOG_ERR("Response buffer is NULL-pointer");
   28514:	f04f 0000 	mov.w	r0, #0
   28518:	2301      	movs	r3, #1
   2851a:	491b      	ldr	r1, [pc, #108]	; (28588 <at_handler+0x84>)
   2851c:	f363 0007 	bfi	r0, r3, #0, #8
   28520:	f364 108f 	bfi	r0, r4, #6, #10
		LOG_ERR("Could not get network registration status");
   28524:	f016 fa1f 	bl	3e966 <log_string_sync>
}
   28528:	b002      	add	sp, #8
   2852a:	bd70      	pop	{r4, r5, r6, pc}
	LOG_DBG("recv: %s", log_strdup(response));
   2852c:	2304      	movs	r3, #4
   2852e:	f04f 0600 	mov.w	r6, #0
   28532:	4608      	mov	r0, r1
   28534:	f363 0607 	bfi	r6, r3, #0, #8
   28538:	f016 fa27 	bl	3e98a <log_strdup>
   2853c:	f364 168f 	bfi	r6, r4, #6, #10
   28540:	4603      	mov	r3, r0
   28542:	4912      	ldr	r1, [pc, #72]	; (2858c <at_handler+0x88>)
   28544:	4630      	mov	r0, r6
   28546:	4a12      	ldr	r2, [pc, #72]	; (28590 <at_handler+0x8c>)
   28548:	f016 fa0d 	bl	3e966 <log_string_sync>
	err = parse_nw_reg_status(response, &status);
   2854c:	f10d 0107 	add.w	r1, sp, #7
   28550:	4628      	mov	r0, r5
   28552:	f7ff ff27 	bl	283a4 <parse_nw_reg_status>
	if (err) {
   28556:	b140      	cbz	r0, 2856a <at_handler+0x66>
		LOG_ERR("Could not get network registration status");
   28558:	f04f 0000 	mov.w	r0, #0
   2855c:	2301      	movs	r3, #1
   2855e:	f363 0007 	bfi	r0, r3, #0, #8
   28562:	f364 108f 	bfi	r0, r4, #6, #10
   28566:	490b      	ldr	r1, [pc, #44]	; (28594 <at_handler+0x90>)
   28568:	e7dc      	b.n	28524 <at_handler+0x20>
	if ((status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   2856a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2856e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28572:	2b01      	cmp	r3, #1
   28574:	d1d8      	bne.n	28528 <at_handler+0x24>
   28576:	4808      	ldr	r0, [pc, #32]	; (28598 <at_handler+0x94>)
   28578:	f011 ff1a 	bl	3a3b0 <z_impl_k_sem_give>
   2857c:	e7d4      	b.n	28528 <at_handler+0x24>
   2857e:	bf00      	nop
   28580:	00042314 	.word	0x00042314
   28584:	00042394 	.word	0x00042394
   28588:	00048520 	.word	0x00048520
   2858c:	00048540 	.word	0x00048540
   28590:	000484f0 	.word	0x000484f0
   28594:	0004854d 	.word	0x0004854d
   28598:	200249b4 	.word	0x200249b4

0002859c <w_lte_lc_connect>:
{
   2859c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_impl_k_sem_init(sem, initial_count, limit);
   285a0:	2201      	movs	r2, #1
   285a2:	2100      	movs	r1, #0
   285a4:	4841      	ldr	r0, [pc, #260]	; (286ac <w_lte_lc_connect+0x110>)
   285a6:	f011 fecd 	bl	3a344 <z_impl_k_sem_init>
	rc = at_notif_register_handler(NULL, at_handler);
   285aa:	4941      	ldr	r1, [pc, #260]	; (286b0 <w_lte_lc_connect+0x114>)
   285ac:	2000      	movs	r0, #0
   285ae:	f7fa fe95 	bl	232dc <at_notif_register_handler>
	if (rc != 0) {
   285b2:	4c40      	ldr	r4, [pc, #256]	; (286b4 <w_lte_lc_connect+0x118>)
   285b4:	4b40      	ldr	r3, [pc, #256]	; (286b8 <w_lte_lc_connect+0x11c>)
   285b6:	4682      	mov	sl, r0
   285b8:	1ae4      	subs	r4, r4, r3
   285ba:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   285be:	b168      	cbz	r0, 285dc <w_lte_lc_connect+0x40>
		LOG_ERR("Can't register handler rc=%d", rc);
   285c0:	2201      	movs	r2, #1
   285c2:	f04f 0000 	mov.w	r0, #0
   285c6:	f362 0007 	bfi	r0, r2, #0, #8
   285ca:	4652      	mov	r2, sl
   285cc:	493b      	ldr	r1, [pc, #236]	; (286bc <w_lte_lc_connect+0x120>)
   285ce:	f364 108f 	bfi	r0, r4, #6, #10
		LOG_ERR("Can't de-register handler rc=%d", rc);
   285d2:	f016 f9c8 	bl	3e966 <log_string_sync>
}
   285d6:	4650      	mov	r0, sl
   285d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   285dc:	f04f 0902 	mov.w	r9, #2
	const char *current_network_mode = nw_mode_preferred;
   285e0:	4d37      	ldr	r5, [pc, #220]	; (286c0 <w_lte_lc_connect+0x124>)
		if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   285e2:	f8df b100 	ldr.w	fp, [pc, #256]	; 286e4 <w_lte_lc_connect+0x148>
		LOG_DBG("Network mode: %s", log_strdup(current_network_mode));
   285e6:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   285ea:	f043 0304 	orr.w	r3, r3, #4
   285ee:	4628      	mov	r0, r5
   285f0:	f363 0707 	bfi	r7, r3, #0, #8
   285f4:	f016 f9c9 	bl	3e98a <log_strdup>
   285f8:	f364 178f 	bfi	r7, r4, #6, #10
   285fc:	4603      	mov	r3, r0
   285fe:	4a31      	ldr	r2, [pc, #196]	; (286c4 <w_lte_lc_connect+0x128>)
   28600:	4931      	ldr	r1, [pc, #196]	; (286c8 <w_lte_lc_connect+0x12c>)
   28602:	4638      	mov	r0, r7
   28604:	f016 f9af 	bl	3e966 <log_string_sync>
		if (at_cmd_write(current_network_mode, NULL, 0, NULL) != 0) {
   28608:	2300      	movs	r3, #0
   2860a:	4628      	mov	r0, r5
   2860c:	461a      	mov	r2, r3
   2860e:	4619      	mov	r1, r3
   28610:	f7ff fe84 	bl	2831c <at_cmd_write>
   28614:	4603      	mov	r3, r0
   28616:	bba0      	cbnz	r0, 28682 <w_lte_lc_connect+0xe6>
		if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   28618:	4602      	mov	r2, r0
   2861a:	4601      	mov	r1, r0
   2861c:	4658      	mov	r0, fp
   2861e:	f7ff fe7d 	bl	2831c <at_cmd_write>
   28622:	4605      	mov	r5, r0
   28624:	bb68      	cbnz	r0, 28682 <w_lte_lc_connect+0xe6>
	return z_impl_k_sem_take(sem, timeout);
   28626:	4929      	ldr	r1, [pc, #164]	; (286cc <w_lte_lc_connect+0x130>)
   28628:	4820      	ldr	r0, [pc, #128]	; (286ac <w_lte_lc_connect+0x110>)
   2862a:	f011 ff09 	bl	3a440 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   2862e:	f110 0f0b 	cmn.w	r0, #11
   28632:	4682      	mov	sl, r0
   28634:	d127      	bne.n	28686 <w_lte_lc_connect+0xea>
			LOG_INF("Network connection attempt timed out");
   28636:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   2863a:	f043 0303 	orr.w	r3, r3, #3
   2863e:	f363 0807 	bfi	r8, r3, #0, #8
   28642:	f364 188f 	bfi	r8, r4, #6, #10
   28646:	4922      	ldr	r1, [pc, #136]	; (286d0 <w_lte_lc_connect+0x134>)
   28648:	4640      	mov	r0, r8
   2864a:	f016 f98c 	bl	3e966 <log_string_sync>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   2864e:	f1b9 0f01 	cmp.w	r9, #1
   28652:	d028      	beq.n	286a6 <w_lte_lc_connect+0x10a>
				if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   28654:	462b      	mov	r3, r5
   28656:	462a      	mov	r2, r5
   28658:	4629      	mov	r1, r5
   2865a:	481e      	ldr	r0, [pc, #120]	; (286d4 <w_lte_lc_connect+0x138>)
   2865c:	f7ff fe5e 	bl	2831c <at_cmd_write>
   28660:	b978      	cbnz	r0, 28682 <w_lte_lc_connect+0xe6>
				LOG_INF("Using fallback network mode");
   28662:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   28666:	f043 0303 	orr.w	r3, r3, #3
   2866a:	f363 0607 	bfi	r6, r3, #0, #8
   2866e:	f364 168f 	bfi	r6, r4, #6, #10
   28672:	4919      	ldr	r1, [pc, #100]	; (286d8 <w_lte_lc_connect+0x13c>)
   28674:	4630      	mov	r0, r6
   28676:	f016 f976 	bl	3e966 <log_string_sync>
				current_network_mode = nw_mode_fallback;
   2867a:	4d18      	ldr	r5, [pc, #96]	; (286dc <w_lte_lc_connect+0x140>)
   2867c:	f04f 0901 	mov.w	r9, #1
   28680:	e7b1      	b.n	285e6 <w_lte_lc_connect+0x4a>
			err = -EIO;
   28682:	f06f 0a04 	mvn.w	sl, #4
	rc = at_notif_deregister_handler(NULL, at_handler);
   28686:	490a      	ldr	r1, [pc, #40]	; (286b0 <w_lte_lc_connect+0x114>)
   28688:	2000      	movs	r0, #0
   2868a:	f7fa fe5f 	bl	2334c <at_notif_deregister_handler>
	if (rc != 0) {
   2868e:	4602      	mov	r2, r0
   28690:	2800      	cmp	r0, #0
   28692:	d0a0      	beq.n	285d6 <w_lte_lc_connect+0x3a>
		LOG_ERR("Can't de-register handler rc=%d", rc);
   28694:	2101      	movs	r1, #1
   28696:	f04f 0000 	mov.w	r0, #0
   2869a:	f361 0007 	bfi	r0, r1, #0, #8
   2869e:	f364 108f 	bfi	r0, r4, #6, #10
   286a2:	490f      	ldr	r1, [pc, #60]	; (286e0 <w_lte_lc_connect+0x144>)
   286a4:	e795      	b.n	285d2 <w_lte_lc_connect+0x36>
				err = -ETIMEDOUT;
   286a6:	f06f 0a73 	mvn.w	sl, #115	; 0x73
   286aa:	e7ec      	b.n	28686 <w_lte_lc_connect+0xea>
   286ac:	200249b4 	.word	0x200249b4
   286b0:	00028505 	.word	0x00028505
   286b4:	00042394 	.word	0x00042394
   286b8:	00042314 	.word	0x00042314
   286bc:	000463de 	.word	0x000463de
   286c0:	000485a3 	.word	0x000485a3
   286c4:	000484fb 	.word	0x000484fb
   286c8:	00048718 	.word	0x00048718
   286cc:	000927c0 	.word	0x000927c0
   286d0:	0004872d 	.word	0x0004872d
   286d4:	000485ba 	.word	0x000485ba
   286d8:	00048752 	.word	0x00048752
   286dc:	0004858c 	.word	0x0004858c
   286e0:	0004876e 	.word	0x0004876e
   286e4:	00048582 	.word	0x00048582

000286e8 <lte_lc_power_off>:
{
   286e8:	b508      	push	{r3, lr}
	if (at_cmd_write(power_off, NULL, 0, NULL) != 0) {
   286ea:	2300      	movs	r3, #0
   286ec:	4804      	ldr	r0, [pc, #16]	; (28700 <lte_lc_power_off+0x18>)
   286ee:	461a      	mov	r2, r3
   286f0:	4619      	mov	r1, r3
   286f2:	f7ff fe13 	bl	2831c <at_cmd_write>
   286f6:	2800      	cmp	r0, #0
}
   286f8:	bf18      	it	ne
   286fa:	f06f 0004 	mvnne.w	r0, #4
   286fe:	bd08      	pop	{r3, pc}
   28700:	000486da 	.word	0x000486da

00028704 <lte_lc_psm_req>:
{
   28704:	b538      	push	{r3, r4, r5, lr}
	if (at_cmd_write(enable ? psm_req : psm_disable,
   28706:	2300      	movs	r3, #0
   28708:	4d07      	ldr	r5, [pc, #28]	; (28728 <lte_lc_psm_req+0x24>)
   2870a:	4c08      	ldr	r4, [pc, #32]	; (2872c <lte_lc_psm_req+0x28>)
   2870c:	461a      	mov	r2, r3
   2870e:	4298      	cmp	r0, r3
   28710:	bf14      	ite	ne
   28712:	4628      	movne	r0, r5
   28714:	4620      	moveq	r0, r4
   28716:	4619      	mov	r1, r3
   28718:	f7ff fe00 	bl	2831c <at_cmd_write>
   2871c:	2800      	cmp	r0, #0
}
   2871e:	bf18      	it	ne
   28720:	f06f 0004 	mvnne.w	r0, #4
   28724:	bd38      	pop	{r3, r4, r5, pc}
   28726:	bf00      	nop
   28728:	000486ee 	.word	0x000486ee
   2872c:	000486e4 	.word	0x000486e4

00028730 <sensor_sim_channel_get>:

static int sensor_sim_channel_get(struct device *dev,
				  enum sensor_channel chan,
				  struct sensor_value *sample)
{
   28730:	b538      	push	{r3, r4, r5, lr}
   28732:	4614      	mov	r4, r2
	switch (chan) {
   28734:	2910      	cmp	r1, #16
   28736:	d82f      	bhi.n	28798 <sensor_sim_channel_get+0x68>
   28738:	e8df f001 	tbb	[pc, r1]
   2873c:	18140d09 	.word	0x18140d09
   28740:	2e2e2e2e 	.word	0x2e2e2e2e
   28744:	2e2e2e2e 	.word	0x2e2e2e2e
   28748:	2e2c282e 	.word	0x2e2c282e
   2874c:	2a          	.byte	0x2a
   2874d:	00          	.byte	0x00
	case SENSOR_CHAN_ACCEL_X:
		double_to_sensor_value(accel_samples[0], sample);
   2874e:	4b14      	ldr	r3, [pc, #80]	; (287a0 <sensor_sim_channel_get+0x70>)
		break;
	case SENSOR_CHAN_HUMIDITY:
		double_to_sensor_value(humidity_sample, sample);
		break;
	case SENSOR_CHAN_PRESS:
		double_to_sensor_value(pressure_sample, sample);
   28750:	e9d3 0100 	ldrd	r0, r1, [r3]
   28754:	e002      	b.n	2875c <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(accel_samples[1], sample);
   28756:	4b12      	ldr	r3, [pc, #72]	; (287a0 <sensor_sim_channel_get+0x70>)
   28758:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
		double_to_sensor_value(pressure_sample, sample);
   2875c:	f7f1 fec8 	bl	1a4f0 <double_to_sensor_value>
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
   28760:	2000      	movs	r0, #0
}
   28762:	bd38      	pop	{r3, r4, r5, pc}
		double_to_sensor_value(accel_samples[2], sample);
   28764:	4b0e      	ldr	r3, [pc, #56]	; (287a0 <sensor_sim_channel_get+0x70>)
   28766:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   2876a:	e7f7      	b.n	2875c <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(accel_samples[0], sample);
   2876c:	4d0c      	ldr	r5, [pc, #48]	; (287a0 <sensor_sim_channel_get+0x70>)
   2876e:	e9d5 0100 	ldrd	r0, r1, [r5]
   28772:	f7f1 febd 	bl	1a4f0 <double_to_sensor_value>
		double_to_sensor_value(accel_samples[1], ++sample);
   28776:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
   2877a:	f104 0208 	add.w	r2, r4, #8
   2877e:	f7f1 feb7 	bl	1a4f0 <double_to_sensor_value>
		double_to_sensor_value(accel_samples[2], ++sample);
   28782:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
   28786:	f104 0210 	add.w	r2, r4, #16
   2878a:	e7e7      	b.n	2875c <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(temp_sample, sample);
   2878c:	4b05      	ldr	r3, [pc, #20]	; (287a4 <sensor_sim_channel_get+0x74>)
   2878e:	e7df      	b.n	28750 <sensor_sim_channel_get+0x20>
		double_to_sensor_value(humidity_sample, sample);
   28790:	4b05      	ldr	r3, [pc, #20]	; (287a8 <sensor_sim_channel_get+0x78>)
   28792:	e7dd      	b.n	28750 <sensor_sim_channel_get+0x20>
		double_to_sensor_value(pressure_sample, sample);
   28794:	4b05      	ldr	r3, [pc, #20]	; (287ac <sensor_sim_channel_get+0x7c>)
   28796:	e7db      	b.n	28750 <sensor_sim_channel_get+0x20>
		return -ENOTSUP;
   28798:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2879c:	e7e1      	b.n	28762 <sensor_sim_channel_get+0x32>
   2879e:	bf00      	nop
   287a0:	20022a68 	.word	0x20022a68
   287a4:	20022d78 	.word	0x20022d78
   287a8:	20022a80 	.word	0x20022a80
   287ac:	20022a88 	.word	0x20022a88

000287b0 <sensor_sim_trigger_set>:
{
   287b0:	b508      	push	{r3, lr}
	struct sensor_sim_data *drv_data = dev->driver_data;
   287b2:	6883      	ldr	r3, [r0, #8]
	switch (trig->type) {
   287b4:	8808      	ldrh	r0, [r1, #0]
   287b6:	2801      	cmp	r0, #1
   287b8:	d104      	bne.n	287c4 <sensor_sim_trigger_set+0x14>
		drv_data->drdy_trigger = *trig;
   287ba:	6808      	ldr	r0, [r1, #0]
		drv_data->drdy_handler = handler;
   287bc:	631a      	str	r2, [r3, #48]	; 0x30
		drv_data->drdy_trigger = *trig;
   287be:	6358      	str	r0, [r3, #52]	; 0x34
	int ret = 0;
   287c0:	2000      	movs	r0, #0
}
   287c2:	bd08      	pop	{r3, pc}
		LOG_ERR("Unsupported sensor trigger");
   287c4:	2301      	movs	r3, #1
   287c6:	f04f 0000 	mov.w	r0, #0
   287ca:	4a07      	ldr	r2, [pc, #28]	; (287e8 <sensor_sim_trigger_set+0x38>)
   287cc:	f363 0007 	bfi	r0, r3, #0, #8
   287d0:	4b06      	ldr	r3, [pc, #24]	; (287ec <sensor_sim_trigger_set+0x3c>)
   287d2:	4907      	ldr	r1, [pc, #28]	; (287f0 <sensor_sim_trigger_set+0x40>)
   287d4:	1a9b      	subs	r3, r3, r2
   287d6:	08db      	lsrs	r3, r3, #3
   287d8:	f363 108f 	bfi	r0, r3, #6, #10
   287dc:	f016 f8c3 	bl	3e966 <log_string_sync>
	return ret;
   287e0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   287e4:	e7ed      	b.n	287c2 <sensor_sim_trigger_set+0x12>
   287e6:	bf00      	nop
   287e8:	00042314 	.word	0x00042314
   287ec:	000423fc 	.word	0x000423fc
   287f0:	0004878e 	.word	0x0004878e

000287f4 <generate_sine.constprop.2>:
static double generate_sine(double offset, double amplitude)
   287f4:	b508      	push	{r3, lr}
	return z_impl_k_uptime_get();
   287f6:	f018 fa2d 	bl	40c54 <z_impl_k_uptime_get>
	return offset + amplitude * sin(time % 65535);
   287fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   287fe:	fbb0 f3f3 	udiv	r3, r0, r3
   28802:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
   28806:	1ac0      	subs	r0, r0, r3
   28808:	f7ef ff4c 	bl	186a4 <__aeabi_ui2d>
   2880c:	ec41 0b10 	vmov	d0, r0, r1
   28810:	f7f3 fad6 	bl	1bdc0 <sin>
   28814:	2200      	movs	r2, #0
   28816:	4b05      	ldr	r3, [pc, #20]	; (2882c <generate_sine.constprop.2+0x38>)
   28818:	ec51 0b10 	vmov	r0, r1, d0
   2881c:	f7ef ffbc 	bl	18798 <__aeabi_dmul>
   28820:	2200      	movs	r2, #0
   28822:	2300      	movs	r3, #0
   28824:	f7ef fe02 	bl	1842c <__adddf3>
}
   28828:	bd08      	pop	{r3, pc}
   2882a:	bf00      	nop
   2882c:	40340000 	.word	0x40340000

00028830 <sensor_sim_init>:
{
   28830:	b530      	push	{r4, r5, lr}
	struct sensor_sim_data *drv_data = dev->driver_data;
   28832:	6885      	ldr	r5, [r0, #8]
{
   28834:	b087      	sub	sp, #28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   28836:	2400      	movs	r4, #0
   28838:	f06f 0305 	mvn.w	r3, #5
   2883c:	f44f 7200 	mov.w	r2, #512	; 0x200
   28840:	f105 0138 	add.w	r1, r5, #56	; 0x38
   28844:	e9cd 4302 	strd	r4, r3, [sp, #8]
   28848:	e9cd 0400 	strd	r0, r4, [sp]
   2884c:	4b06      	ldr	r3, [pc, #24]	; (28868 <sensor_sim_init+0x38>)
   2884e:	e9cd 4404 	strd	r4, r4, [sp, #16]
   28852:	f505 700e 	add.w	r0, r5, #568	; 0x238
   28856:	f011 ff37 	bl	3a6c8 <z_impl_k_thread_create>
   2885a:	f7f7 f927 	bl	1faac <z_timer_cycle_get_32>
	srand(k_cycle_get_32());
   2885e:	f014 f82f 	bl	3c8c0 <srand>
}
   28862:	4620      	mov	r0, r4
   28864:	b007      	add	sp, #28
   28866:	bd30      	pop	{r4, r5, pc}
   28868:	000409d3 	.word	0x000409d3

0002886c <start>:
	return err;
}
#endif

static int start(struct device *dev)
{
   2886c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int retval;
	struct gps_drv_data *drv_data = dev->driver_data;
	nrf_gnss_fix_retry_t    fix_retry    = 0;
   2886e:	2400      	movs	r4, #0
	nrf_gnss_fix_interval_t fix_interval = 1;
   28870:	2301      	movs	r3, #1
{
   28872:	b0a1      	sub	sp, #132	; 0x84
	struct gps_drv_data *drv_data = dev->driver_data;
   28874:	6887      	ldr	r7, [r0, #8]
	char buf[50] = {0};
   28876:	2232      	movs	r2, #50	; 0x32
   28878:	4621      	mov	r1, r4
   2887a:	a813      	add	r0, sp, #76	; 0x4c
	nrf_gnss_fix_interval_t fix_interval = 1;
   2887c:	f8ad 3012 	strh.w	r3, [sp, #18]
#endif
#ifdef CONFIG_NRF9160_GPS_NMEA_GLL
	nmea_mask |= NRF_GNSS_NMEA_GLL_MASK;
#endif
#ifdef CONFIG_NRF9160_GPS_NMEA_GGA
	nmea_mask |= NRF_GNSS_NMEA_GGA_MASK;
   28880:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_gnss_fix_retry_t    fix_retry    = 0;
   28884:	f8ad 4010 	strh.w	r4, [sp, #16]
	nrf_gnss_delete_mask_t  delete_mask  = 0;
   28888:	9406      	str	r4, [sp, #24]
	char buf[50] = {0};
   2888a:	f018 fa89 	bl	40da0 <memset>
	err = at_params_list_init(&at_resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   2888e:	2105      	movs	r1, #5
   28890:	a807      	add	r0, sp, #28
	struct at_param_list at_resp_list = {0};
   28892:	e9cd 4407 	strd	r4, r4, [sp, #28]
	err = at_params_list_init(&at_resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   28896:	f017 fd9a 	bl	403ce <at_params_list_init>
	if (err) {
   2889a:	4ec3      	ldr	r6, [pc, #780]	; (28ba8 <start+0x33c>)
   2889c:	4bc3      	ldr	r3, [pc, #780]	; (28bac <start+0x340>)
   2889e:	1af6      	subs	r6, r6, r3
   288a0:	f3c6 06c9 	ubfx	r6, r6, #3, #10
   288a4:	4603      	mov	r3, r0
   288a6:	b1a8      	cbz	r0, 288d4 <start+0x68>
		LOG_ERR("Could init AT params list, error: %d", err);
   288a8:	2201      	movs	r2, #1
   288aa:	f04f 0000 	mov.w	r0, #0
   288ae:	f362 0007 	bfi	r0, r2, #0, #8
   288b2:	f366 108f 	bfi	r0, r6, #6, #10
   288b6:	461a      	mov	r2, r3
   288b8:	49bd      	ldr	r1, [pc, #756]	; (28bb0 <start+0x344>)
   288ba:	f016 f854 	bl	3e966 <log_string_sync>
	nmea_mask |= NRF_GNSS_NMEA_RMC_MASK;
#endif

#ifdef CONFIG_NRF9160_GPS_HANDLE_MODEM_CONFIGURATION
	if (enable_gps(dev) != 0) {
		LOG_ERR("Failed to enable GPS");
   288be:	f04f 0000 	mov.w	r0, #0
   288c2:	2301      	movs	r3, #1
   288c4:	49bb      	ldr	r1, [pc, #748]	; (28bb4 <start+0x348>)
   288c6:	f363 0007 	bfi	r0, r3, #0, #8
   288ca:	f366 108f 	bfi	r0, r6, #6, #10
				NRF_SO_GNSS_START,
				&delete_mask,
				sizeof(delete_mask));

	if (retval != 0) {
		LOG_ERR("Failed to start GPS");
   288ce:	f016 f84a 	bl	3e966 <log_string_sync>
   288d2:	e13d      	b.n	28b50 <start+0x2e4>
	err = at_cmd_write(AT_XSYSTEMMODE_REQUEST, buf, sizeof(buf), NULL);
   288d4:	a913      	add	r1, sp, #76	; 0x4c
   288d6:	2232      	movs	r2, #50	; 0x32
   288d8:	48b7      	ldr	r0, [pc, #732]	; (28bb8 <start+0x34c>)
   288da:	f7ff fd1f 	bl	2831c <at_cmd_write>
	if (err) {
   288de:	4601      	mov	r1, r0
   288e0:	2800      	cmp	r0, #0
   288e2:	d03e      	beq.n	28962 <start+0xf6>
		LOG_ERR("Could not get modem's system mode");
   288e4:	2301      	movs	r3, #1
   288e6:	f04f 0000 	mov.w	r0, #0
   288ea:	f363 0007 	bfi	r0, r3, #0, #8
   288ee:	f366 108f 	bfi	r0, r6, #6, #10
   288f2:	49b2      	ldr	r1, [pc, #712]	; (28bbc <start+0x350>)
   288f4:	f016 f837 	bl	3e966 <log_string_sync>
		err = -EIO;
   288f8:	f06f 0404 	mvn.w	r4, #4
	at_params_list_free(&at_resp_list);
   288fc:	a807      	add	r0, sp, #28
   288fe:	f017 fd79 	bl	403f4 <at_params_list_free>
	if (enable_gps(dev) != 0) {
   28902:	2c00      	cmp	r4, #0
   28904:	d1db      	bne.n	288be <start+0x52>
	if (drv_data->socket < 0) {
   28906:	6a3b      	ldr	r3, [r7, #32]
   28908:	2b00      	cmp	r3, #0
   2890a:	da15      	bge.n	28938 <start+0xcc>
		drv_data->socket = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM,
   2890c:	f44f 7201 	mov.w	r2, #516	; 0x204
   28910:	2102      	movs	r1, #2
   28912:	2001      	movs	r0, #1
   28914:	f001 feec 	bl	2a6f0 <nrf_socket>
   28918:	4602      	mov	r2, r0
		if (drv_data->socket >= 0) {
   2891a:	2a00      	cmp	r2, #0
		drv_data->socket = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM,
   2891c:	6238      	str	r0, [r7, #32]
			LOG_DBG("GPS socket created");
   2891e:	f04f 0000 	mov.w	r0, #0
		if (drv_data->socket >= 0) {
   28922:	f2c0 810d 	blt.w	28b40 <start+0x2d4>
			LOG_DBG("GPS socket created");
   28926:	2304      	movs	r3, #4
   28928:	f363 0007 	bfi	r0, r3, #0, #8
   2892c:	f366 108f 	bfi	r0, r6, #6, #10
   28930:	4aa3      	ldr	r2, [pc, #652]	; (28bc0 <start+0x354>)
   28932:	49a4      	ldr	r1, [pc, #656]	; (28bc4 <start+0x358>)
   28934:	f016 f817 	bl	3e966 <log_string_sync>
	retval = nrf_setsockopt(drv_data->socket,
   28938:	2402      	movs	r4, #2
   2893a:	9400      	str	r4, [sp, #0]
   2893c:	ab04      	add	r3, sp, #16
   2893e:	4622      	mov	r2, r4
   28940:	f44f 7101 	mov.w	r1, #516	; 0x204
   28944:	6a38      	ldr	r0, [r7, #32]
   28946:	f001 ffd5 	bl	2a8f4 <nrf_setsockopt>
	if (retval != 0) {
   2894a:	2800      	cmp	r0, #0
   2894c:	f000 8105 	beq.w	28b5a <start+0x2ee>
		LOG_ERR("Failed to set fix retry value");
   28950:	f04f 0000 	mov.w	r0, #0
   28954:	2301      	movs	r3, #1
   28956:	f363 0007 	bfi	r0, r3, #0, #8
   2895a:	f366 108f 	bfi	r0, r6, #6, #10
   2895e:	499a      	ldr	r1, [pc, #616]	; (28bc8 <start+0x35c>)
   28960:	e7b5      	b.n	288ce <start+0x62>
	err = at_parser_max_params_from_str(buf,
   28962:	2305      	movs	r3, #5
   28964:	aa07      	add	r2, sp, #28
   28966:	a813      	add	r0, sp, #76	; 0x4c
   28968:	f7fa ffe4 	bl	23934 <at_parser_max_params_from_str>
	if (err) {
   2896c:	4604      	mov	r4, r0
   2896e:	b158      	cbz	r0, 28988 <start+0x11c>
		LOG_ERR("Could not parse AT response, error: %d", err);
   28970:	f04f 0000 	mov.w	r0, #0
   28974:	2301      	movs	r3, #1
   28976:	4622      	mov	r2, r4
   28978:	f363 0007 	bfi	r0, r3, #0, #8
   2897c:	4993      	ldr	r1, [pc, #588]	; (28bcc <start+0x360>)
   2897e:	f366 108f 	bfi	r0, r6, #6, #10
		LOG_ERR("Could not get GPS mode state, error: %d", err);
   28982:	f015 fff0 	bl	3e966 <log_string_sync>
		goto enable_gps_clean_exit;
   28986:	e7b9      	b.n	288fc <start+0x90>
	err = at_params_short_get(&at_resp_list,
   28988:	f10d 0216 	add.w	r2, sp, #22
   2898c:	2103      	movs	r1, #3
   2898e:	a807      	add	r0, sp, #28
   28990:	f017 fdc8 	bl	40524 <at_params_short_get>
	if (err) {
   28994:	4604      	mov	r4, r0
   28996:	b148      	cbz	r0, 289ac <start+0x140>
		LOG_ERR("Could not get GPS mode state, error: %d", err);
   28998:	f04f 0000 	mov.w	r0, #0
   2899c:	2301      	movs	r3, #1
   2899e:	f363 0007 	bfi	r0, r3, #0, #8
   289a2:	f366 108f 	bfi	r0, r6, #6, #10
   289a6:	4622      	mov	r2, r4
   289a8:	4989      	ldr	r1, [pc, #548]	; (28bd0 <start+0x364>)
   289aa:	e7ea      	b.n	28982 <start+0x116>
	if (gps_param_value != 1) {
   289ac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   289b0:	2b01      	cmp	r3, #1
   289b2:	d04c      	beq.n	28a4e <start+0x1e2>
		u16_t values[AT_XSYSTEMMODE_PARAMS_COUNT] = {0};
   289b4:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
   289b8:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
		LOG_DBG("GPS mode is not enabled, attempting to enable it");
   289bc:	2304      	movs	r3, #4
   289be:	f04f 0000 	mov.w	r0, #0
   289c2:	f363 0007 	bfi	r0, r3, #0, #8
   289c6:	f366 108f 	bfi	r0, r6, #6, #10
   289ca:	4a82      	ldr	r2, [pc, #520]	; (28bd4 <start+0x368>)
   289cc:	4982      	ldr	r1, [pc, #520]	; (28bd8 <start+0x36c>)
   289ce:	f015 ffca 	bl	3e966 <log_string_sync>
		for (size_t i = 0; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   289d2:	ad09      	add	r5, sp, #36	; 0x24
			at_params_short_get(&at_resp_list, i, &values[i]);
   289d4:	462a      	mov	r2, r5
   289d6:	4621      	mov	r1, r4
   289d8:	a807      	add	r0, sp, #28
		for (size_t i = 0; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   289da:	3401      	adds	r4, #1
			at_params_short_get(&at_resp_list, i, &values[i]);
   289dc:	f017 fda2 	bl	40524 <at_params_short_get>
		for (size_t i = 0; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   289e0:	2c05      	cmp	r4, #5
   289e2:	f105 0502 	add.w	r5, r5, #2
   289e6:	d1f5      	bne.n	289d4 <start+0x168>
		values[AT_XSYSTEMMODE_GPS_PARAM_INDEX] = 1;
   289e8:	2301      	movs	r3, #1
   289ea:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		len = snprintf(cmd, sizeof(cmd), AT_XSYSTEMMODE_PROTO,
   289ee:	9302      	str	r3, [sp, #8]
   289f0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   289f4:	4a79      	ldr	r2, [pc, #484]	; (28bdc <start+0x370>)
   289f6:	9301      	str	r3, [sp, #4]
   289f8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   289fc:	211c      	movs	r1, #28
   289fe:	9300      	str	r3, [sp, #0]
   28a00:	a80c      	add	r0, sp, #48	; 0x30
   28a02:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   28a06:	f013 ffcb 	bl	3c9a0 <sniprintf>
		LOG_DBG("Sending AT command: %s", log_strdup(cmd));
   28a0a:	f04f 0400 	mov.w	r4, #0
   28a0e:	2304      	movs	r3, #4
   28a10:	a80c      	add	r0, sp, #48	; 0x30
   28a12:	f363 0407 	bfi	r4, r3, #0, #8
   28a16:	f015 ffb8 	bl	3e98a <log_strdup>
   28a1a:	f366 148f 	bfi	r4, r6, #6, #10
   28a1e:	4603      	mov	r3, r0
   28a20:	4a6c      	ldr	r2, [pc, #432]	; (28bd4 <start+0x368>)
   28a22:	4620      	mov	r0, r4
   28a24:	496e      	ldr	r1, [pc, #440]	; (28be0 <start+0x374>)
   28a26:	f015 ff9e 	bl	3e966 <log_string_sync>
		err = at_cmd_write(cmd, NULL, 0, NULL);
   28a2a:	2300      	movs	r3, #0
   28a2c:	a80c      	add	r0, sp, #48	; 0x30
   28a2e:	461a      	mov	r2, r3
   28a30:	4619      	mov	r1, r3
   28a32:	f7ff fc73 	bl	2831c <at_cmd_write>
		if (err) {
   28a36:	4604      	mov	r4, r0
   28a38:	b148      	cbz	r0, 28a4e <start+0x1e2>
			LOG_ERR("Could not enable GPS mode, error: %d", err);
   28a3a:	f04f 0000 	mov.w	r0, #0
   28a3e:	2301      	movs	r3, #1
   28a40:	f363 0007 	bfi	r0, r3, #0, #8
   28a44:	f366 108f 	bfi	r0, r6, #6, #10
   28a48:	4622      	mov	r2, r4
   28a4a:	4966      	ldr	r1, [pc, #408]	; (28be4 <start+0x378>)
   28a4c:	e799      	b.n	28982 <start+0x116>
	LOG_DBG("GPS mode is enabled");
   28a4e:	2304      	movs	r3, #4
   28a50:	f04f 0000 	mov.w	r0, #0
   28a54:	f363 0007 	bfi	r0, r3, #0, #8
   28a58:	f366 108f 	bfi	r0, r6, #6, #10
   28a5c:	4a5d      	ldr	r2, [pc, #372]	; (28bd4 <start+0x368>)
   28a5e:	4962      	ldr	r1, [pc, #392]	; (28be8 <start+0x37c>)
   28a60:	f015 ff81 	bl	3e966 <log_string_sync>
	err = at_cmd_write(AT_CFUN_REQUEST, buf, sizeof(buf), NULL);
   28a64:	2300      	movs	r3, #0
   28a66:	2232      	movs	r2, #50	; 0x32
   28a68:	a913      	add	r1, sp, #76	; 0x4c
   28a6a:	4860      	ldr	r0, [pc, #384]	; (28bec <start+0x380>)
   28a6c:	f7ff fc56 	bl	2831c <at_cmd_write>
	if (err) {
   28a70:	4604      	mov	r4, r0
   28a72:	b148      	cbz	r0, 28a88 <start+0x21c>
		LOG_ERR("Could not get functional mode, error: %d", err);
   28a74:	f04f 0000 	mov.w	r0, #0
   28a78:	2301      	movs	r3, #1
   28a7a:	f363 0007 	bfi	r0, r3, #0, #8
   28a7e:	f366 108f 	bfi	r0, r6, #6, #10
   28a82:	4622      	mov	r2, r4
   28a84:	495a      	ldr	r1, [pc, #360]	; (28bf0 <start+0x384>)
   28a86:	e77c      	b.n	28982 <start+0x116>
	err = at_parser_max_params_from_str(buf,
   28a88:	4601      	mov	r1, r0
   28a8a:	2302      	movs	r3, #2
   28a8c:	aa07      	add	r2, sp, #28
   28a8e:	a813      	add	r0, sp, #76	; 0x4c
   28a90:	f7fa ff50 	bl	23934 <at_parser_max_params_from_str>
	if (err) {
   28a94:	4604      	mov	r4, r0
   28a96:	b148      	cbz	r0, 28aac <start+0x240>
		LOG_ERR("Could not parse functional mode response, error: %d",
   28a98:	f04f 0000 	mov.w	r0, #0
   28a9c:	2301      	movs	r3, #1
   28a9e:	f363 0007 	bfi	r0, r3, #0, #8
   28aa2:	f366 108f 	bfi	r0, r6, #6, #10
   28aa6:	4622      	mov	r2, r4
   28aa8:	4952      	ldr	r1, [pc, #328]	; (28bf4 <start+0x388>)
   28aaa:	e76a      	b.n	28982 <start+0x116>
	err = at_params_short_get(&at_resp_list, 1, &functional_mode);
   28aac:	aa0c      	add	r2, sp, #48	; 0x30
   28aae:	2101      	movs	r1, #1
   28ab0:	a807      	add	r0, sp, #28
   28ab2:	f017 fd37 	bl	40524 <at_params_short_get>
	if (err) {
   28ab6:	4604      	mov	r4, r0
		LOG_ERR("Could not get value of functional mode, error: %d",
   28ab8:	f04f 0000 	mov.w	r0, #0
	if (err) {
   28abc:	b13c      	cbz	r4, 28ace <start+0x262>
		LOG_ERR("Could not get value of functional mode, error: %d",
   28abe:	2301      	movs	r3, #1
   28ac0:	f363 0007 	bfi	r0, r3, #0, #8
   28ac4:	f366 108f 	bfi	r0, r6, #6, #10
   28ac8:	4622      	mov	r2, r4
   28aca:	494b      	ldr	r1, [pc, #300]	; (28bf8 <start+0x38c>)
   28acc:	e759      	b.n	28982 <start+0x116>
	LOG_DBG("Functional mode: %d", functional_mode);
   28ace:	2304      	movs	r3, #4
   28ad0:	f363 0007 	bfi	r0, r3, #0, #8
   28ad4:	f366 108f 	bfi	r0, r6, #6, #10
   28ad8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   28adc:	4a3d      	ldr	r2, [pc, #244]	; (28bd4 <start+0x368>)
   28ade:	4947      	ldr	r1, [pc, #284]	; (28bfc <start+0x390>)
   28ae0:	f015 ff41 	bl	3e966 <log_string_sync>
	if (functional_mode != FUNCTIONAL_MODE_ENABLED) {
   28ae4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   28ae8:	2b01      	cmp	r3, #1
   28aea:	f43f af07 	beq.w	288fc <start+0x90>
		LOG_DBG("Functional mode was %d, attemping to set to %d",
   28aee:	2204      	movs	r2, #4
   28af0:	f04f 0000 	mov.w	r0, #0
   28af4:	2501      	movs	r5, #1
   28af6:	f362 0007 	bfi	r0, r2, #0, #8
   28afa:	f366 108f 	bfi	r0, r6, #6, #10
   28afe:	4a35      	ldr	r2, [pc, #212]	; (28bd4 <start+0x368>)
   28b00:	493f      	ldr	r1, [pc, #252]	; (28c00 <start+0x394>)
   28b02:	9500      	str	r5, [sp, #0]
   28b04:	f015 ff2f 	bl	3e966 <log_string_sync>
		err = at_cmd_write(AT_CFUN_1, NULL, 0, NULL);
   28b08:	4623      	mov	r3, r4
   28b0a:	4622      	mov	r2, r4
   28b0c:	4621      	mov	r1, r4
   28b0e:	483d      	ldr	r0, [pc, #244]	; (28c04 <start+0x398>)
   28b10:	f7ff fc04 	bl	2831c <at_cmd_write>
		if (err) {
   28b14:	4604      	mov	r4, r0
			LOG_ERR("Could not set functional mode to %d",
   28b16:	f04f 0000 	mov.w	r0, #0
		if (err) {
   28b1a:	b134      	cbz	r4, 28b2a <start+0x2be>
			LOG_ERR("Could not set functional mode to %d",
   28b1c:	f365 0007 	bfi	r0, r5, #0, #8
   28b20:	f366 108f 	bfi	r0, r6, #6, #10
   28b24:	462a      	mov	r2, r5
   28b26:	4938      	ldr	r1, [pc, #224]	; (28c08 <start+0x39c>)
   28b28:	e72b      	b.n	28982 <start+0x116>
		LOG_DBG("Functional mode set to %d", FUNCTIONAL_MODE_ENABLED);
   28b2a:	2304      	movs	r3, #4
   28b2c:	f363 0007 	bfi	r0, r3, #0, #8
   28b30:	f366 108f 	bfi	r0, r6, #6, #10
   28b34:	462b      	mov	r3, r5
   28b36:	4a27      	ldr	r2, [pc, #156]	; (28bd4 <start+0x368>)
   28b38:	4934      	ldr	r1, [pc, #208]	; (28c0c <start+0x3a0>)
   28b3a:	f015 ff14 	bl	3e966 <log_string_sync>
   28b3e:	e6dd      	b.n	288fc <start+0x90>
			LOG_ERR("Could not init socket (err: %d)",
   28b40:	2101      	movs	r1, #1
   28b42:	f361 0007 	bfi	r0, r1, #0, #8
   28b46:	f366 108f 	bfi	r0, r6, #6, #10
   28b4a:	4931      	ldr	r1, [pc, #196]	; (28c10 <start+0x3a4>)
   28b4c:	f015 ff0b 	bl	3e966 <log_string_sync>
		return -EIO;
   28b50:	f06f 0404 	mvn.w	r4, #4
	k_sem_give(&drv_data->thread_run_sem);

	LOG_DBG("GPS operational");

	return retval;
}
   28b54:	4620      	mov	r0, r4
   28b56:	b021      	add	sp, #132	; 0x84
   28b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	retval = nrf_setsockopt(drv_data->socket,
   28b5a:	9400      	str	r4, [sp, #0]
   28b5c:	f10d 0312 	add.w	r3, sp, #18
   28b60:	2201      	movs	r2, #1
   28b62:	f44f 7101 	mov.w	r1, #516	; 0x204
   28b66:	6a38      	ldr	r0, [r7, #32]
   28b68:	f001 fec4 	bl	2a8f4 <nrf_setsockopt>
	if (retval != 0) {
   28b6c:	b140      	cbz	r0, 28b80 <start+0x314>
		LOG_ERR("Failed to set fix interval value");
   28b6e:	f04f 0000 	mov.w	r0, #0
   28b72:	2301      	movs	r3, #1
   28b74:	f363 0007 	bfi	r0, r3, #0, #8
   28b78:	f366 108f 	bfi	r0, r6, #6, #10
   28b7c:	4925      	ldr	r1, [pc, #148]	; (28c14 <start+0x3a8>)
   28b7e:	e6a6      	b.n	288ce <start+0x62>
	retval = nrf_setsockopt(drv_data->socket,
   28b80:	9400      	str	r4, [sp, #0]
   28b82:	ab05      	add	r3, sp, #20
   28b84:	2204      	movs	r2, #4
   28b86:	f44f 7101 	mov.w	r1, #516	; 0x204
   28b8a:	6a38      	ldr	r0, [r7, #32]
   28b8c:	f001 feb2 	bl	2a8f4 <nrf_setsockopt>
	if (retval != 0) {
   28b90:	2800      	cmp	r0, #0
   28b92:	d043      	beq.n	28c1c <start+0x3b0>
		LOG_ERR("Failed to set nmea mask");
   28b94:	f04f 0000 	mov.w	r0, #0
   28b98:	2301      	movs	r3, #1
   28b9a:	f363 0007 	bfi	r0, r3, #0, #8
   28b9e:	f366 108f 	bfi	r0, r6, #6, #10
   28ba2:	491d      	ldr	r1, [pc, #116]	; (28c18 <start+0x3ac>)
   28ba4:	e693      	b.n	288ce <start+0x62>
   28ba6:	bf00      	nop
   28ba8:	000423c4 	.word	0x000423c4
   28bac:	00042314 	.word	0x00042314
   28bb0:	00048996 	.word	0x00048996
   28bb4:	00048c04 	.word	0x00048c04
   28bb8:	000464c2 	.word	0x000464c2
   28bbc:	000489bb 	.word	0x000489bb
   28bc0:	000487e0 	.word	0x000487e0
   28bc4:	00048c19 	.word	0x00048c19
   28bc8:	00048c50 	.word	0x00048c50
   28bcc:	000489dd 	.word	0x000489dd
   28bd0:	00048a04 	.word	0x00048a04
   28bd4:	000487d5 	.word	0x000487d5
   28bd8:	00048a2c 	.word	0x00048a2c
   28bdc:	00048a61 	.word	0x00048a61
   28be0:	00048a7d 	.word	0x00048a7d
   28be4:	00048a98 	.word	0x00048a98
   28be8:	00048abd 	.word	0x00048abd
   28bec:	00048ad5 	.word	0x00048ad5
   28bf0:	00048ade 	.word	0x00048ade
   28bf4:	00048b07 	.word	0x00048b07
   28bf8:	00048b3b 	.word	0x00048b3b
   28bfc:	00048b6d 	.word	0x00048b6d
   28c00:	00048b85 	.word	0x00048b85
   28c04:	00048bb8 	.word	0x00048bb8
   28c08:	00048bc2 	.word	0x00048bc2
   28c0c:	00048be6 	.word	0x00048be6
   28c10:	00048c30 	.word	0x00048c30
   28c14:	00048c6e 	.word	0x00048c6e
   28c18:	00048c8f 	.word	0x00048c8f
	retval = nrf_setsockopt(drv_data->socket,
   28c1c:	2304      	movs	r3, #4
   28c1e:	9300      	str	r3, [sp, #0]
   28c20:	2207      	movs	r2, #7
   28c22:	ab06      	add	r3, sp, #24
   28c24:	f44f 7101 	mov.w	r1, #516	; 0x204
   28c28:	6a38      	ldr	r0, [r7, #32]
   28c2a:	f001 fe63 	bl	2a8f4 <nrf_setsockopt>
	if (retval != 0) {
   28c2e:	4604      	mov	r4, r0
   28c30:	b140      	cbz	r0, 28c44 <start+0x3d8>
		LOG_ERR("Failed to start GPS");
   28c32:	f04f 0000 	mov.w	r0, #0
   28c36:	2301      	movs	r3, #1
   28c38:	f363 0007 	bfi	r0, r3, #0, #8
   28c3c:	f366 108f 	bfi	r0, r6, #6, #10
   28c40:	490d      	ldr	r1, [pc, #52]	; (28c78 <start+0x40c>)
   28c42:	e644      	b.n	288ce <start+0x62>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   28c44:	2201      	movs	r2, #1
   28c46:	f107 031c 	add.w	r3, r7, #28
   28c4a:	e8d3 1fef 	ldaex	r1, [r3]
   28c4e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   28c52:	2800      	cmp	r0, #0
   28c54:	d1f9      	bne.n	28c4a <start+0x3de>
	z_impl_k_sem_give(sem);
   28c56:	f607 00d8 	addw	r0, r7, #2264	; 0x8d8
   28c5a:	f011 fba9 	bl	3a3b0 <z_impl_k_sem_give>
	LOG_DBG("GPS operational");
   28c5e:	2304      	movs	r3, #4
   28c60:	f04f 0000 	mov.w	r0, #0
   28c64:	f363 0007 	bfi	r0, r3, #0, #8
   28c68:	f366 108f 	bfi	r0, r6, #6, #10
   28c6c:	4a03      	ldr	r2, [pc, #12]	; (28c7c <start+0x410>)
   28c6e:	4904      	ldr	r1, [pc, #16]	; (28c80 <start+0x414>)
   28c70:	f015 fe79 	bl	3e966 <log_string_sync>
	return retval;
   28c74:	e76e      	b.n	28b54 <start+0x2e8>
   28c76:	bf00      	nop
   28c78:	00048ca7 	.word	0x00048ca7
   28c7c:	000487e0 	.word	0x000487e0
   28c80:	00048cbb 	.word	0x00048cbb

00028c84 <channel_get>:
	return 0;
}

static int channel_get(struct device *dev, enum gps_channel chan,
		       struct gps_data *sample)
{
   28c84:	b570      	push	{r4, r5, r6, lr}
   28c86:	4615      	mov	r5, r2
	switch (chan) {
   28c88:	b121      	cbz	r1, 28c94 <channel_get+0x10>
   28c8a:	2901      	cmp	r1, #1
   28c8c:	d011      	beq.n	28cb2 <channel_get+0x2e>
		break;
	case GPS_CHAN_PVT:
		memcpy(sample, &fresh_pvt, sizeof(struct gps_data));
		break;
	default:
		return -ENOTSUP;
   28c8e:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	return 0;
}
   28c92:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(sample->nmea.buf, fresh_nmea.nmea.buf,
   28c94:	4e0a      	ldr	r6, [pc, #40]	; (28cc0 <channel_get+0x3c>)
   28c96:	f105 0008 	add.w	r0, r5, #8
   28c9a:	f896 205b 	ldrb.w	r2, [r6, #91]	; 0x5b
   28c9e:	f106 0108 	add.w	r1, r6, #8
   28ca2:	f018 f85d 	bl	40d60 <memcpy>
		sample->nmea.len = fresh_nmea.nmea.len;
   28ca6:	f896 305b 	ldrb.w	r3, [r6, #91]	; 0x5b
   28caa:	f885 305b 	strb.w	r3, [r5, #91]	; 0x5b
   28cae:	2000      	movs	r0, #0
   28cb0:	e7ef      	b.n	28c92 <channel_get+0xe>
   28cb2:	22c0      	movs	r2, #192	; 0xc0
   28cb4:	4903      	ldr	r1, [pc, #12]	; (28cc4 <channel_get+0x40>)
   28cb6:	4628      	mov	r0, r5
   28cb8:	f018 f852 	bl	40d60 <memcpy>
   28cbc:	e7f7      	b.n	28cae <channel_get+0x2a>
   28cbe:	bf00      	nop
   28cc0:	20022d88 	.word	0x20022d88
   28cc4:	20022e48 	.word	0x20022e48

00028cc8 <trigger_set>:
}

static int trigger_set(struct device *dev,
			       const struct gps_trigger *trig,
			       gps_trigger_handler_t handler)
{
   28cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int ret = 0;
	struct gps_drv_data *drv_data = dev->driver_data;
	(void)drv_data;

	switch (trig->type) {
   28cca:	780b      	ldrb	r3, [r1, #0]
{
   28ccc:	460e      	mov	r6, r1
	switch (trig->type) {
   28cce:	3b01      	subs	r3, #1
   28cd0:	2b01      	cmp	r3, #1
{
   28cd2:	4617      	mov	r7, r2
	struct gps_drv_data *drv_data = dev->driver_data;
   28cd4:	6884      	ldr	r4, [r0, #8]
	switch (trig->type) {
   28cd6:	d80e      	bhi.n	28cf6 <trigger_set+0x2e>
	case GPS_TRIG_DATA_READY:
	case GPS_TRIG_FIX:
		k_mutex_lock(&drv_data->trigger_mutex, K_FOREVER);
   28cd8:	f104 0508 	add.w	r5, r4, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   28cdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   28ce0:	4628      	mov	r0, r5
   28ce2:	f00f ffdf 	bl	38ca4 <z_impl_k_mutex_lock>
		drv_data->trigger_handler = handler;
		drv_data->trigger = *trig;
   28ce6:	8833      	ldrh	r3, [r6, #0]
		drv_data->trigger_handler = handler;
   28ce8:	6027      	str	r7, [r4, #0]
		drv_data->trigger = *trig;
   28cea:	80a3      	strh	r3, [r4, #4]
	z_impl_k_mutex_unlock(mutex);
   28cec:	4628      	mov	r0, r5
   28cee:	f010 f8b3 	bl	38e58 <z_impl_k_mutex_unlock>
	int ret = 0;
   28cf2:	2000      	movs	r0, #0
		ret = -ENOTSUP;
		break;
	}

	return ret;
}
   28cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("Unsupported GPS trigger");
   28cf6:	2301      	movs	r3, #1
   28cf8:	f04f 0000 	mov.w	r0, #0
   28cfc:	4a06      	ldr	r2, [pc, #24]	; (28d18 <trigger_set+0x50>)
   28cfe:	f363 0007 	bfi	r0, r3, #0, #8
   28d02:	4b06      	ldr	r3, [pc, #24]	; (28d1c <trigger_set+0x54>)
   28d04:	4906      	ldr	r1, [pc, #24]	; (28d20 <trigger_set+0x58>)
   28d06:	1a9b      	subs	r3, r3, r2
   28d08:	08db      	lsrs	r3, r3, #3
   28d0a:	f363 108f 	bfi	r0, r3, #6, #10
   28d0e:	f015 fe2a 	bl	3e966 <log_string_sync>
	return ret;
   28d12:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28d16:	e7ed      	b.n	28cf4 <trigger_set+0x2c>
   28d18:	00042314 	.word	0x00042314
   28d1c:	000423c4 	.word	0x000423c4
   28d20:	00048cff 	.word	0x00048cff

00028d24 <gps_thread>:
{
   28d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28d28:	4b4e      	ldr	r3, [pc, #312]	; (28e64 <gps_thread+0x140>)
				LOG_DBG("NMEA data ready");
   28d2a:	4a4f      	ldr	r2, [pc, #316]	; (28e68 <gps_thread+0x144>)
{
   28d2c:	b0c3      	sub	sp, #268	; 0x10c
				LOG_DBG("NMEA data ready");
   28d2e:	1a9b      	subs	r3, r3, r2
   28d30:	f3c3 03c9 	ubfx	r3, r3, #3, #10
	struct gps_drv_data *drv_data = dev->driver_data;
   28d34:	f8d0 b008 	ldr.w	fp, [r0, #8]
{
   28d38:	900b      	str	r0, [sp, #44]	; 0x2c
				LOG_DBG("NMEA data ready");
   28d3a:	9303      	str	r3, [sp, #12]
	return z_impl_k_sem_take(sem, timeout);
   28d3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   28d40:	f60b 00d8 	addw	r0, fp, #2264	; 0x8d8
   28d44:	f011 fb7c 	bl	3a440 <z_impl_k_sem_take>
	__ASSERT_NO_MSG(socket_ops);
   28d48:	4b48      	ldr	r3, [pc, #288]	; (28e6c <gps_thread+0x148>)
		len = recv(drv_data->socket, &raw_gps_data,
   28d4a:	f8db 5020 	ldr.w	r5, [fp, #32]
   28d4e:	681b      	ldr	r3, [r3, #0]
   28d50:	b94b      	cbnz	r3, 28d66 <gps_thread+0x42>
   28d52:	4947      	ldr	r1, [pc, #284]	; (28e70 <gps_thread+0x14c>)
   28d54:	4847      	ldr	r0, [pc, #284]	; (28e74 <gps_thread+0x150>)
   28d56:	2369      	movs	r3, #105	; 0x69
   28d58:	4a47      	ldr	r2, [pc, #284]	; (28e78 <gps_thread+0x154>)
   28d5a:	f015 fde7 	bl	3e92c <printk>
   28d5e:	2169      	movs	r1, #105	; 0x69
   28d60:	4845      	ldr	r0, [pc, #276]	; (28e78 <gps_thread+0x154>)
   28d62:	f015 fdf0 	bl	3e946 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   28d66:	4b41      	ldr	r3, [pc, #260]	; (28e6c <gps_thread+0x148>)
   28d68:	681b      	ldr	r3, [r3, #0]
   28d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28d6c:	b94b      	cbnz	r3, 28d82 <gps_thread+0x5e>
   28d6e:	4943      	ldr	r1, [pc, #268]	; (28e7c <gps_thread+0x158>)
   28d70:	4840      	ldr	r0, [pc, #256]	; (28e74 <gps_thread+0x150>)
   28d72:	236a      	movs	r3, #106	; 0x6a
   28d74:	4a40      	ldr	r2, [pc, #256]	; (28e78 <gps_thread+0x154>)
   28d76:	f015 fdd9 	bl	3e92c <printk>
   28d7a:	216a      	movs	r1, #106	; 0x6a
   28d7c:	483e      	ldr	r0, [pc, #248]	; (28e78 <gps_thread+0x154>)
   28d7e:	f015 fde2 	bl	3e946 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   28d82:	4b3a      	ldr	r3, [pc, #232]	; (28e6c <gps_thread+0x148>)
   28d84:	22d8      	movs	r2, #216	; 0xd8
   28d86:	681b      	ldr	r3, [r3, #0]
   28d88:	a90c      	add	r1, sp, #48	; 0x30
   28d8a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   28d8c:	4628      	mov	r0, r5
   28d8e:	2300      	movs	r3, #0
   28d90:	47a0      	blx	r4
		if (len <= 0) {
   28d92:	1e02      	subs	r2, r0, #0
   28d94:	dc13      	bgt.n	28dbe <gps_thread+0x9a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28d96:	f10b 031c 	add.w	r3, fp, #28
   28d9a:	e8d3 3faf 	lda	r3, [r3]
			if (!atomic_get(&drv_data->gps_is_active)) {
   28d9e:	2b00      	cmp	r3, #0
   28da0:	d0cc      	beq.n	28d3c <gps_thread+0x18>
			LOG_ERR("recv() returned error: %d", len);
   28da2:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   28da6:	f043 0301 	orr.w	r3, r3, #1
   28daa:	f363 0607 	bfi	r6, r3, #0, #8
   28dae:	9b03      	ldr	r3, [sp, #12]
   28db0:	4933      	ldr	r1, [pc, #204]	; (28e80 <gps_thread+0x15c>)
   28db2:	f363 168f 	bfi	r6, r3, #6, #10
   28db6:	4630      	mov	r0, r6
   28db8:	f015 fdd5 	bl	3e966 <log_string_sync>
			continue;
   28dbc:	e7c4      	b.n	28d48 <gps_thread+0x24>
		switch (raw_gps_data.data_id) {
   28dbe:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   28dc2:	2b01      	cmp	r3, #1
   28dc4:	d068      	beq.n	28e98 <gps_thread+0x174>
   28dc6:	2b02      	cmp	r3, #2
   28dc8:	d1be      	bne.n	28d48 <gps_thread+0x24>
			memcpy(fresh_nmea.nmea.buf, raw_gps_data.nmea, len);
   28dca:	4c2e      	ldr	r4, [pc, #184]	; (28e84 <gps_thread+0x160>)
   28dcc:	23b8      	movs	r3, #184	; 0xb8
   28dce:	a90e      	add	r1, sp, #56	; 0x38
   28dd0:	f104 0008 	add.w	r0, r4, #8
   28dd4:	f017 ffd1 	bl	40d7a <__memcpy_chk>
			fresh_nmea.nmea.len = strlen(raw_gps_data.nmea);
   28dd8:	a80e      	add	r0, sp, #56	; 0x38
   28dda:	f7f1 f8d3 	bl	19f84 <strlen>
   28dde:	f884 005b 	strb.w	r0, [r4, #91]	; 0x5b
			if ((drv_data->trigger.chan == GPS_CHAN_NMEA) &&
   28de2:	f8bb 4004 	ldrh.w	r4, [fp, #4]
   28de6:	2c01      	cmp	r4, #1
   28de8:	f040 816a 	bne.w	290c0 <gps_thread+0x39c>
				LOG_DBG("NMEA data ready");
   28dec:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   28df0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   28df4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   28df8:	f043 0304 	orr.w	r3, r3, #4
   28dfc:	f363 0207 	bfi	r2, r3, #0, #8
   28e00:	b293      	uxth	r3, r2
   28e02:	9a03      	ldr	r2, [sp, #12]
   28e04:	4920      	ldr	r1, [pc, #128]	; (28e88 <gps_thread+0x164>)
   28e06:	f362 138f 	bfi	r3, r2, #6, #10
   28e0a:	b298      	uxth	r0, r3
   28e0c:	4a1f      	ldr	r2, [pc, #124]	; (28e8c <gps_thread+0x168>)
   28e0e:	f8ad 3014 	strh.w	r3, [sp, #20]
   28e12:	f015 fda8 	bl	3e966 <log_string_sync>
			if ((drv_data->trigger.type == GPS_TRIG_FIX)
   28e16:	f89b 3004 	ldrb.w	r3, [fp, #4]
   28e1a:	2b02      	cmp	r3, #2
   28e1c:	f040 8139 	bne.w	29092 <gps_thread+0x36e>
			    && is_fix(&fresh_pvt.pvt)) {
   28e20:	4b1b      	ldr	r3, [pc, #108]	; (28e90 <gps_thread+0x16c>)
   28e22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   28e26:	07db      	lsls	r3, r3, #31
   28e28:	f140 8133 	bpl.w	29092 <gps_thread+0x36e>
				if (drv_data->trigger.chan == GPS_CHAN_NMEA) {
   28e2c:	f89b 3005 	ldrb.w	r3, [fp, #5]
				LOG_DBG("NMEA: Position fix");
   28e30:	f8bd 2018 	ldrh.w	r2, [sp, #24]
					trigger_send = true;
   28e34:	2b00      	cmp	r3, #0
				LOG_DBG("NMEA: Position fix");
   28e36:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   28e3a:	4916      	ldr	r1, [pc, #88]	; (28e94 <gps_thread+0x170>)
   28e3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   28e40:	f043 0304 	orr.w	r3, r3, #4
   28e44:	f363 0207 	bfi	r2, r3, #0, #8
   28e48:	b293      	uxth	r3, r2
   28e4a:	9a03      	ldr	r2, [sp, #12]
					trigger_send = true;
   28e4c:	bf08      	it	eq
   28e4e:	2401      	moveq	r4, #1
				LOG_DBG("NMEA: Position fix");
   28e50:	f362 138f 	bfi	r3, r2, #6, #10
   28e54:	b298      	uxth	r0, r3
   28e56:	4a0d      	ldr	r2, [pc, #52]	; (28e8c <gps_thread+0x168>)
   28e58:	f8ad 3018 	strh.w	r3, [sp, #24]
   28e5c:	f015 fd83 	bl	3e966 <log_string_sync>
   28e60:	e117      	b.n	29092 <gps_thread+0x36e>
   28e62:	bf00      	nop
   28e64:	000423c4 	.word	0x000423c4
   28e68:	00042314 	.word	0x00042314
   28e6c:	20023990 	.word	0x20023990
   28e70:	0004476f 	.word	0x0004476f
   28e74:	00044643 	.word	0x00044643
   28e78:	00044746 	.word	0x00044746
   28e7c:	00045da7 	.word	0x00045da7
   28e80:	0004881a 	.word	0x0004881a
   28e84:	20022d88 	.word	0x20022d88
   28e88:	000488c2 	.word	0x000488c2
   28e8c:	000487ca 	.word	0x000487ca
   28e90:	20022e48 	.word	0x20022e48
   28e94:	000488d6 	.word	0x000488d6
	u8_t  n_unhealthy = 0;
   28e98:	2500      	movs	r5, #0
	u8_t  n_tracked = 0;
   28e9a:	e9cd 5508 	strd	r5, r5, [sp, #32]
   28e9e:	ac0c      	add	r4, sp, #48	; 0x30
		switch (raw_gps_data.data_id) {
   28ea0:	9407      	str	r4, [sp, #28]
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
   28ea2:	950a      	str	r5, [sp, #40]	; 0x28
		u8_t sv = pvt_data->pvt.sv[i].sv;
   28ea4:	9b07      	ldr	r3, [sp, #28]
   28ea6:	f893 c046 	ldrb.w	ip, [r3, #70]	; 0x46
		if (sv) { /* SV number 0 indicates no satellite */
   28eaa:	f1bc 0f00 	cmp.w	ip, #0
   28eae:	d02d      	beq.n	28f0c <gps_thread+0x1e8>
			n_tracked++;
   28eb0:	9808      	ldr	r0, [sp, #32]
			     NRF_GNSS_SV_FLAG_USED_IN_FIX) ? true : false;
   28eb2:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
			n_tracked++;
   28eb6:	3001      	adds	r0, #1
   28eb8:	b2c3      	uxtb	r3, r0
			     NRF_GNSS_SV_FLAG_USED_IN_FIX) ? true : false;
   28eba:	f3c2 0140 	ubfx	r1, r2, #1, #1
			n_tracked++;
   28ebe:	9308      	str	r3, [sp, #32]
			if (used) {
   28ec0:	b119      	cbz	r1, 28eca <gps_thread+0x1a6>
				n_used++;
   28ec2:	9809      	ldr	r0, [sp, #36]	; 0x24
   28ec4:	3001      	adds	r0, #1
   28ec6:	b2c3      	uxtb	r3, r0
   28ec8:	9309      	str	r3, [sp, #36]	; 0x24
				  NRF_GNSS_SV_FLAG_UNHEALTHY) ? true : false;
   28eca:	f3c2 02c0 	ubfx	r2, r2, #3, #1
			if (unhealthy) {
   28ece:	b10a      	cbz	r2, 28ed4 <gps_thread+0x1b0>
				n_unhealthy++;
   28ed0:	3501      	adds	r5, #1
   28ed2:	b2ed      	uxtb	r5, r5
			LOG_DBG("Tracking SV %2u: %s, %s", sv,
   28ed4:	f029 003f 	bic.w	r0, r9, #63	; 0x3f
   28ed8:	f040 0004 	orr.w	r0, r0, #4
   28edc:	9b03      	ldr	r3, [sp, #12]
   28ede:	f360 0907 	bfi	r9, r0, #0, #8
   28ee2:	f363 198f 	bfi	r9, r3, #6, #10
   28ee6:	4877      	ldr	r0, [pc, #476]	; (290c4 <gps_thread+0x3a0>)
   28ee8:	4b77      	ldr	r3, [pc, #476]	; (290c8 <gps_thread+0x3a4>)
   28eea:	2900      	cmp	r1, #0
   28eec:	bf08      	it	eq
   28eee:	4618      	moveq	r0, r3
   28ef0:	4b76      	ldr	r3, [pc, #472]	; (290cc <gps_thread+0x3a8>)
   28ef2:	4601      	mov	r1, r0
   28ef4:	4876      	ldr	r0, [pc, #472]	; (290d0 <gps_thread+0x3ac>)
   28ef6:	2a00      	cmp	r2, #0
   28ef8:	bf08      	it	eq
   28efa:	4603      	moveq	r3, r0
   28efc:	4a75      	ldr	r2, [pc, #468]	; (290d4 <gps_thread+0x3b0>)
   28efe:	e9cd 1300 	strd	r1, r3, [sp]
   28f02:	4648      	mov	r0, r9
   28f04:	4663      	mov	r3, ip
   28f06:	4974      	ldr	r1, [pc, #464]	; (290d8 <gps_thread+0x3b4>)
   28f08:	f015 fd2d 	bl	3e966 <log_string_sync>
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
   28f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28f0e:	3301      	adds	r3, #1
   28f10:	930a      	str	r3, [sp, #40]	; 0x28
   28f12:	9b07      	ldr	r3, [sp, #28]
   28f14:	330c      	adds	r3, #12
   28f16:	9307      	str	r3, [sp, #28]
   28f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28f1a:	2b0c      	cmp	r3, #12
   28f1c:	d1c2      	bne.n	28ea4 <gps_thread+0x180>
	LOG_DBG("Tracking: %d Using: %d Unhealthy: %d", n_tracked,
   28f1e:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   28f22:	f043 0304 	orr.w	r3, r3, #4
   28f26:	f363 0807 	bfi	r8, r3, #0, #8
   28f2a:	9b03      	ldr	r3, [sp, #12]
   28f2c:	9501      	str	r5, [sp, #4]
   28f2e:	f363 188f 	bfi	r8, r3, #6, #10
   28f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
   28f34:	4a67      	ldr	r2, [pc, #412]	; (290d4 <gps_thread+0x3b0>)
   28f36:	9300      	str	r3, [sp, #0]
   28f38:	4968      	ldr	r1, [pc, #416]	; (290dc <gps_thread+0x3b8>)
   28f3a:	9b08      	ldr	r3, [sp, #32]
   28f3c:	4640      	mov	r0, r8
   28f3e:	f015 fd12 	bl	3e966 <log_string_sync>
	LOG_DBG("Seconds since last fix %lld",
   28f42:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   28f46:	f043 0304 	orr.w	r3, r3, #4
   28f4a:	f363 0707 	bfi	r7, r3, #0, #8
   28f4e:	9b03      	ldr	r3, [sp, #12]
   28f50:	f363 178f 	bfi	r7, r3, #6, #10
	return z_impl_k_uptime_get();
   28f54:	f017 fe7e 	bl	40c54 <z_impl_k_uptime_get>
   28f58:	4b61      	ldr	r3, [pc, #388]	; (290e0 <gps_thread+0x3bc>)
   28f5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28f5e:	e9d3 5c00 	ldrd	r5, ip, [r3]
   28f62:	1b40      	subs	r0, r0, r5
   28f64:	f04f 0300 	mov.w	r3, #0
   28f68:	eb61 010c 	sbc.w	r1, r1, ip
   28f6c:	f7ef ff26 	bl	18dbc <__aeabi_uldivmod>
   28f70:	4a58      	ldr	r2, [pc, #352]	; (290d4 <gps_thread+0x3b0>)
   28f72:	e9cd 0100 	strd	r0, r1, [sp]
   28f76:	495b      	ldr	r1, [pc, #364]	; (290e4 <gps_thread+0x3c0>)
   28f78:	4638      	mov	r0, r7
   28f7a:	f015 fcf4 	bl	3e966 <log_string_sync>
	dest->latitude = src->latitude;
   28f7e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   28f82:	4b59      	ldr	r3, [pc, #356]	; (290e8 <gps_thread+0x3c4>)
	dest->altitude = src->altitude;
   28f84:	9a12      	ldr	r2, [sp, #72]	; 0x48
	dest->latitude = src->latitude;
   28f86:	e9c3 0102 	strd	r0, r1, [r3, #8]
	dest->longitude = src->longitude;
   28f8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
	dest->altitude = src->altitude;
   28f8e:	619a      	str	r2, [r3, #24]
	dest->accuracy = src->accuracy;
   28f90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
	dest->longitude = src->longitude;
   28f92:	e9c3 0104 	strd	r0, r1, [r3, #16]
	dest->accuracy = src->accuracy;
   28f96:	61da      	str	r2, [r3, #28]
	dest->speed = src->speed;
   28f98:	9a14      	ldr	r2, [sp, #80]	; 0x50
	dest->datetime.year = src->datetime.year;
   28f9a:	f8bd 1058 	ldrh.w	r1, [sp, #88]	; 0x58
	dest->speed = src->speed;
   28f9e:	621a      	str	r2, [r3, #32]
	dest->heading = src->heading;
   28fa0:	9a15      	ldr	r2, [sp, #84]	; 0x54
	dest->datetime.year = src->datetime.year;
   28fa2:	8759      	strh	r1, [r3, #58]	; 0x3a
	dest->heading = src->heading;
   28fa4:	625a      	str	r2, [r3, #36]	; 0x24
	dest->flags = src->flags;
   28fa6:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
	dest->datetime.month = src->datetime.month;
   28faa:	f8bd 105a 	ldrh.w	r1, [sp, #90]	; 0x5a
	dest->flags = src->flags;
   28fae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dest->datetime.seconds = src->datetime.seconds;
   28fb2:	f89d 205e 	ldrb.w	r2, [sp, #94]	; 0x5e
	dest->datetime.month = src->datetime.month;
   28fb6:	8799      	strh	r1, [r3, #60]	; 0x3c
	dest->datetime.seconds = src->datetime.seconds;
   28fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	dest->datetime.ms = src->datetime.ms;
   28fbc:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
	dest->datetime.hour = src->datetime.hour;
   28fc0:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
	dest->datetime.ms = src->datetime.ms;
   28fc4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	dest->pdop = src->pdop;
   28fc8:	9a19      	ldr	r2, [sp, #100]	; 0x64
	dest->datetime.hour = src->datetime.hour;
   28fca:	87d9      	strh	r1, [r3, #62]	; 0x3e
	dest->pdop = src->pdop;
   28fcc:	629a      	str	r2, [r3, #40]	; 0x28
	dest->hdop = src->hdop;
   28fce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   28fd0:	62da      	str	r2, [r3, #44]	; 0x2c
	dest->vdop = src->vdop;
   28fd2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   28fd4:	631a      	str	r2, [r3, #48]	; 0x30
	dest->tdop = src->tdop;
   28fd6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   28fd8:	635a      	str	r2, [r3, #52]	; 0x34
	for (size_t i = 0;
   28fda:	2200      	movs	r2, #0
		dest->sv[i].sv = src->sv[i].sv;
   28fdc:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
	     i < MIN(NRF_GNSS_MAX_SATELLITES, GPS_MAX_SATELLITES); i++) {
   28fe0:	3201      	adds	r2, #1
		dest->sv[i].sv = src->sv[i].sv;
   28fe2:	f8a3 1044 	strh.w	r1, [r3, #68]	; 0x44
		dest->sv[i].cn0 = src->sv[i].cn0;
   28fe6:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
	for (size_t i = 0;
   28fea:	2a0c      	cmp	r2, #12
		dest->sv[i].cn0 = src->sv[i].cn0;
   28fec:	f8a3 1046 	strh.w	r1, [r3, #70]	; 0x46
		dest->sv[i].elevation = src->sv[i].elevation;
   28ff0:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
   28ff4:	f103 030a 	add.w	r3, r3, #10
   28ff8:	87d9      	strh	r1, [r3, #62]	; 0x3e
		dest->sv[i].azimuth = src->sv[i].azimuth;
   28ffa:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
   28ffe:	f104 040c 	add.w	r4, r4, #12
   29002:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
		dest->sv[i].flags = src->sv[i].flags;
   29006:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
   2900a:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
		dest->sv[i].signal = src->sv[i].signal;
   2900e:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
   29012:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	for (size_t i = 0;
   29016:	d1e1      	bne.n	28fdc <gps_thread+0x2b8>
			if ((drv_data->trigger.chan == GPS_CHAN_PVT)
   29018:	f240 1301 	movw	r3, #257	; 0x101
   2901c:	f8bb 2004 	ldrh.w	r2, [fp, #4]
   29020:	429a      	cmp	r2, r3
   29022:	d14b      	bne.n	290bc <gps_thread+0x398>
				LOG_DBG("PVT data ready");
   29024:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   29028:	f043 0304 	orr.w	r3, r3, #4
   2902c:	f363 0a07 	bfi	sl, r3, #0, #8
   29030:	9b03      	ldr	r3, [sp, #12]
   29032:	4a2e      	ldr	r2, [pc, #184]	; (290ec <gps_thread+0x3c8>)
   29034:	f363 1a8f 	bfi	sl, r3, #6, #10
   29038:	492d      	ldr	r1, [pc, #180]	; (290f0 <gps_thread+0x3cc>)
   2903a:	4650      	mov	r0, sl
   2903c:	f015 fc93 	bl	3e966 <log_string_sync>
				trigger_send = true;
   29040:	2401      	movs	r4, #1
			if ((drv_data->trigger.type == GPS_TRIG_FIX) &&
   29042:	f89b 3004 	ldrb.w	r3, [fp, #4]
   29046:	2b02      	cmp	r3, #2
   29048:	d123      	bne.n	29092 <gps_thread+0x36e>
			    is_fix(&fresh_pvt.pvt)) {
   2904a:	4b27      	ldr	r3, [pc, #156]	; (290e8 <gps_thread+0x3c4>)
			if ((drv_data->trigger.type == GPS_TRIG_FIX) &&
   2904c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   29050:	07da      	lsls	r2, r3, #31
   29052:	d51e      	bpl.n	29092 <gps_thread+0x36e>
				if (drv_data->trigger.chan == GPS_CHAN_PVT) {
   29054:	f89b 3005 	ldrb.w	r3, [fp, #5]
				LOG_DBG("PVT: Position fix");
   29058:	f8bd 2010 	ldrh.w	r2, [sp, #16]
					trigger_send = true;
   2905c:	2b01      	cmp	r3, #1
				LOG_DBG("PVT: Position fix");
   2905e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   29062:	4924      	ldr	r1, [pc, #144]	; (290f4 <gps_thread+0x3d0>)
   29064:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   29068:	f043 0304 	orr.w	r3, r3, #4
   2906c:	f363 0207 	bfi	r2, r3, #0, #8
   29070:	b293      	uxth	r3, r2
   29072:	9a03      	ldr	r2, [sp, #12]
					trigger_send = true;
   29074:	bf08      	it	eq
   29076:	2401      	moveq	r4, #1
				LOG_DBG("PVT: Position fix");
   29078:	f362 138f 	bfi	r3, r2, #6, #10
   2907c:	b298      	uxth	r0, r3
   2907e:	4a1b      	ldr	r2, [pc, #108]	; (290ec <gps_thread+0x3c8>)
   29080:	f8ad 3010 	strh.w	r3, [sp, #16]
   29084:	f015 fc6f 	bl	3e966 <log_string_sync>
   29088:	f017 fde4 	bl	40c54 <z_impl_k_uptime_get>
				fix_timestamp = k_uptime_get();
   2908c:	4b14      	ldr	r3, [pc, #80]	; (290e0 <gps_thread+0x3bc>)
   2908e:	e9c3 0100 	strd	r0, r1, [r3]
		if (!trigger_send) {
   29092:	2c00      	cmp	r4, #0
   29094:	f43f ae58 	beq.w	28d48 <gps_thread+0x24>
		k_mutex_lock(&drv_data->trigger_mutex, K_FOREVER);
   29098:	f10b 0408 	add.w	r4, fp, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   2909c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   290a0:	4620      	mov	r0, r4
   290a2:	f00f fdff 	bl	38ca4 <z_impl_k_mutex_lock>
		if (drv_data->trigger_handler != NULL) {
   290a6:	f8db 3000 	ldr.w	r3, [fp]
   290aa:	b11b      	cbz	r3, 290b4 <gps_thread+0x390>
			drv_data->trigger_handler(dev, &drv_data->trigger);
   290ac:	f10b 0104 	add.w	r1, fp, #4
   290b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   290b2:	4798      	blx	r3
	z_impl_k_mutex_unlock(mutex);
   290b4:	4620      	mov	r0, r4
   290b6:	f00f fecf 	bl	38e58 <z_impl_k_mutex_unlock>
   290ba:	e645      	b.n	28d48 <gps_thread+0x24>
   290bc:	2400      	movs	r4, #0
   290be:	e7c0      	b.n	29042 <gps_thread+0x31e>
   290c0:	2400      	movs	r4, #0
   290c2:	e6a8      	b.n	28e16 <gps_thread+0xf2>
   290c4:	000487f0 	.word	0x000487f0
   290c8:	000487f9 	.word	0x000487f9
   290cc:	00048802 	.word	0x00048802
   290d0:	0004880e 	.word	0x0004880e
   290d4:	000487b4 	.word	0x000487b4
   290d8:	00048834 	.word	0x00048834
   290dc:	00048850 	.word	0x00048850
   290e0:	20022d80 	.word	0x20022d80
   290e4:	00048879 	.word	0x00048879
   290e8:	20022e48 	.word	0x20022e48
   290ec:	000487ca 	.word	0x000487ca
   290f0:	00048899 	.word	0x00048899
   290f4:	000488ac 	.word	0x000488ac

000290f8 <stop>:
{
   290f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	LOG_DBG("Stopping GPS");
   290fa:	2304      	movs	r3, #4
	struct gps_drv_data *drv_data = dev->driver_data;
   290fc:	6885      	ldr	r5, [r0, #8]
	LOG_DBG("Stopping GPS");
   290fe:	f04f 0000 	mov.w	r0, #0
   29102:	4c16      	ldr	r4, [pc, #88]	; (2915c <stop+0x64>)
   29104:	f363 0007 	bfi	r0, r3, #0, #8
   29108:	4b15      	ldr	r3, [pc, #84]	; (29160 <stop+0x68>)
   2910a:	4a16      	ldr	r2, [pc, #88]	; (29164 <stop+0x6c>)
   2910c:	1ae4      	subs	r4, r4, r3
   2910e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   29112:	f364 108f 	bfi	r0, r4, #6, #10
   29116:	4914      	ldr	r1, [pc, #80]	; (29168 <stop+0x70>)
   29118:	f015 fc25 	bl	3e966 <log_string_sync>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2911c:	2300      	movs	r3, #0
   2911e:	f105 021c 	add.w	r2, r5, #28
   29122:	e8d2 1fef 	ldaex	r1, [r2]
   29126:	e8c2 3fe0 	stlex	r0, r3, [r2]
   2912a:	2800      	cmp	r0, #0
   2912c:	d1f9      	bne.n	29122 <stop+0x2a>
	retval = nrf_setsockopt(drv_data->socket,
   2912e:	9300      	str	r3, [sp, #0]
   29130:	2208      	movs	r2, #8
   29132:	f44f 7101 	mov.w	r1, #516	; 0x204
   29136:	6a28      	ldr	r0, [r5, #32]
   29138:	f001 fbdc 	bl	2a8f4 <nrf_setsockopt>
	if (retval != 0) {
   2913c:	b158      	cbz	r0, 29156 <stop+0x5e>
		LOG_ERR("Failed to stop GPS");
   2913e:	2301      	movs	r3, #1
   29140:	f04f 0000 	mov.w	r0, #0
   29144:	f363 0007 	bfi	r0, r3, #0, #8
   29148:	f364 108f 	bfi	r0, r4, #6, #10
   2914c:	4907      	ldr	r1, [pc, #28]	; (2916c <stop+0x74>)
   2914e:	f015 fc0a 	bl	3e966 <log_string_sync>
		return -EIO;
   29152:	f06f 0004 	mvn.w	r0, #4
}
   29156:	b003      	add	sp, #12
   29158:	bd30      	pop	{r4, r5, pc}
   2915a:	bf00      	nop
   2915c:	000423c4 	.word	0x000423c4
   29160:	00042314 	.word	0x00042314
   29164:	000487eb 	.word	0x000487eb
   29168:	00048ccf 	.word	0x00048ccf
   2916c:	00048ce0 	.word	0x00048ce0

00029170 <init>:
	drv_data->socket = -1;
   29170:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
   29174:	b570      	push	{r4, r5, r6, lr}
   29176:	4606      	mov	r6, r0
   29178:	2400      	movs	r4, #0
	struct gps_drv_data *drv_data = dev->driver_data;
   2917a:	6885      	ldr	r5, [r0, #8]
{
   2917c:	b086      	sub	sp, #24
	drv_data->socket = -1;
   2917e:	622b      	str	r3, [r5, #32]
   29180:	f105 031c 	add.w	r3, r5, #28
   29184:	e8d3 2fef 	ldaex	r2, [r3]
   29188:	e8c3 4fe1 	stlex	r1, r4, [r3]
   2918c:	2900      	cmp	r1, #0
   2918e:	d1f9      	bne.n	29184 <init+0x14>
	z_impl_k_sem_init(sem, initial_count, limit);
   29190:	2201      	movs	r2, #1
   29192:	4621      	mov	r1, r4
   29194:	f605 00d8 	addw	r0, r5, #2264	; 0x8d8
   29198:	f011 f8d4 	bl	3a344 <z_impl_k_sem_init>
	z_impl_k_mutex_init(mutex);
   2919c:	f105 0008 	add.w	r0, r5, #8
   291a0:	f017 fc61 	bl	40a66 <z_impl_k_mutex_init>
	struct gps_drv_data *drv_data = dev->driver_data;
   291a4:	68b0      	ldr	r0, [r6, #8]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   291a6:	230a      	movs	r3, #10
   291a8:	f100 0128 	add.w	r1, r0, #40	; 0x28
   291ac:	e9cd 4302 	strd	r4, r3, [sp, #8]
   291b0:	e9cd 4404 	strd	r4, r4, [sp, #16]
   291b4:	e9cd 6400 	strd	r6, r4, [sp]
   291b8:	4b2a      	ldr	r3, [pc, #168]	; (29264 <init+0xf4>)
   291ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
   291be:	f600 0028 	addw	r0, r0, #2088	; 0x828
   291c2:	f011 fa81 	bl	3a6c8 <z_impl_k_thread_create>
		err = at_cmd_write(CONFIG_NRF9160_GPS_MAGPIO_STRING,
   291c6:	4623      	mov	r3, r4
   291c8:	4622      	mov	r2, r4
   291ca:	4621      	mov	r1, r4
   291cc:	4826      	ldr	r0, [pc, #152]	; (29268 <init+0xf8>)
   291ce:	f7ff f8a5 	bl	2831c <at_cmd_write>
		if (err) {
   291d2:	4c26      	ldr	r4, [pc, #152]	; (2926c <init+0xfc>)
   291d4:	4b26      	ldr	r3, [pc, #152]	; (29270 <init+0x100>)
   291d6:	4605      	mov	r5, r0
   291d8:	1ae4      	subs	r4, r4, r3
   291da:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   291de:	b168      	cbz	r0, 291fc <init+0x8c>
			LOG_ERR("Could not confiugure MAGPIO, error: %d", err);
   291e0:	f04f 0000 	mov.w	r0, #0
   291e4:	2301      	movs	r3, #1
   291e6:	462a      	mov	r2, r5
   291e8:	f363 0007 	bfi	r0, r3, #0, #8
   291ec:	4921      	ldr	r1, [pc, #132]	; (29274 <init+0x104>)
   291ee:	f364 108f 	bfi	r0, r4, #6, #10
			LOG_ERR("Could not confiugure COEX0, error: %d", err);
   291f2:	f015 fbb8 	bl	3e966 <log_string_sync>
}
   291f6:	4628      	mov	r0, r5
   291f8:	b006      	add	sp, #24
   291fa:	bd70      	pop	{r4, r5, r6, pc}
		LOG_DBG("MAGPIO set: %s",
   291fc:	2304      	movs	r3, #4
   291fe:	f04f 0600 	mov.w	r6, #0
   29202:	4819      	ldr	r0, [pc, #100]	; (29268 <init+0xf8>)
   29204:	f363 0607 	bfi	r6, r3, #0, #8
   29208:	f015 fbbf 	bl	3e98a <log_strdup>
   2920c:	f364 168f 	bfi	r6, r4, #6, #10
   29210:	4603      	mov	r3, r0
   29212:	4a19      	ldr	r2, [pc, #100]	; (29278 <init+0x108>)
   29214:	4919      	ldr	r1, [pc, #100]	; (2927c <init+0x10c>)
   29216:	4630      	mov	r0, r6
   29218:	f015 fba5 	bl	3e966 <log_string_sync>
		err = at_cmd_write(CONFIG_NRF9160_GPS_COEX0_STRING,
   2921c:	462b      	mov	r3, r5
   2921e:	462a      	mov	r2, r5
   29220:	4629      	mov	r1, r5
   29222:	4817      	ldr	r0, [pc, #92]	; (29280 <init+0x110>)
   29224:	f7ff f87a 	bl	2831c <at_cmd_write>
		if (err) {
   29228:	4605      	mov	r5, r0
   2922a:	b148      	cbz	r0, 29240 <init+0xd0>
			LOG_ERR("Could not confiugure COEX0, error: %d", err);
   2922c:	f04f 0000 	mov.w	r0, #0
   29230:	2301      	movs	r3, #1
   29232:	f363 0007 	bfi	r0, r3, #0, #8
   29236:	f364 108f 	bfi	r0, r4, #6, #10
   2923a:	462a      	mov	r2, r5
   2923c:	4911      	ldr	r1, [pc, #68]	; (29284 <init+0x114>)
   2923e:	e7d8      	b.n	291f2 <init+0x82>
		LOG_DBG("COEX0 set: %s",
   29240:	2304      	movs	r3, #4
   29242:	f04f 0600 	mov.w	r6, #0
   29246:	480e      	ldr	r0, [pc, #56]	; (29280 <init+0x110>)
   29248:	f363 0607 	bfi	r6, r3, #0, #8
   2924c:	f015 fb9d 	bl	3e98a <log_strdup>
   29250:	f364 168f 	bfi	r6, r4, #6, #10
   29254:	4603      	mov	r3, r0
   29256:	4a08      	ldr	r2, [pc, #32]	; (29278 <init+0x108>)
   29258:	490b      	ldr	r1, [pc, #44]	; (29288 <init+0x118>)
   2925a:	4630      	mov	r0, r6
   2925c:	f015 fb83 	bl	3e966 <log_string_sync>
	return 0;
   29260:	e7c9      	b.n	291f6 <init+0x86>
   29262:	bf00      	nop
   29264:	00028d25 	.word	0x00028d25
   29268:	000488ed 	.word	0x000488ed
   2926c:	000423c4 	.word	0x000423c4
   29270:	00042314 	.word	0x00042314
   29274:	0004890c 	.word	0x0004890c
   29278:	000487e6 	.word	0x000487e6
   2927c:	00048933 	.word	0x00048933
   29280:	00048946 	.word	0x00048946
   29284:	0004895e 	.word	0x0004895e
   29288:	00048984 	.word	0x00048984

0002928c <ip_client_event_handler>:
   2928c:	1b08f850 	.word	0x1b08f850
   29290:	f0060c09 	.word	0xf0060c09
   29294:	bf00bc4d 	.word	0xbf00bc4d

00029298 <rpc_ip_client_init>:
   29298:	f00b4801 	.word	0xf00b4801
   2929c:	bf00bc01 	.word	0xbf00bc01
   292a0:	00042d8c 	.word	0x00042d8c

000292a4 <rpc_ip_client_request_alloc>:
   292a4:	b5102300 	.word	0xb5102300
   292a8:	9301b082 	.word	0x9301b082
   292ac:	4604b158 	.word	0x4604b158
   292b0:	2004aa01 	.word	0x2004aa01
   292b4:	fe2cf00b 	.word	0xfe2cf00b
   292b8:	9b01b918 	.word	0x9b01b918
   292bc:	3308b10b 	.word	0x3308b10b
   292c0:	b0026023 	.word	0xb0026023
   292c4:	2007bd10 	.word	0x2007bd10
   292c8:	bd10b002 	.word	0xbd10b002

000292cc <rpc_ip_client_request_send>:
   292cc:	4370f401 	.word	0x4370f401
   292d0:	4fe0f5b3 	.word	0x4fe0f5b3
   292d4:	b160d10b 	.word	0xb160d10b
   292d8:	f8304603 	.word	0xf8304603
   292dc:	20042c08 	.word	0x20042c08
   292e0:	4101ea42 	.word	0x4101ea42
   292e4:	1d08f843 	.word	0x1d08f843
   292e8:	f00b4619 	.word	0xf00b4619
   292ec:	200fbdf9 	.word	0x200fbdf9
   292f0:	20074770 	.word	0x20074770
   292f4:	bf004770 	.word	0xbf004770

000292f8 <rpc_ip_client_message_free>:
   292f8:	f1a0b120 	.word	0xf1a0b120
   292fc:	20040108 	.word	0x20040108
   29300:	be38f00b 	.word	0xbe38f00b
   29304:	47702007 	.word	0x47702007

00029308 <rpc_ip_client_data_free>:
   29308:	4601b118 	.word	0x4601b118
   2930c:	f00b2004 	.word	0xf00b2004
   29310:	2007bf43 	.word	0x2007bf43
   29314:	bf004770 	.word	0xbf004770

00029318 <symbol_0001c77>:
   29318:	4603b430 	.word	0x4603b430
   2931c:	f5b26800 	.word	0xf5b26800
   29320:	eba03f80 	.word	0xeba03f80
   29324:	d2140101 	.word	0xd2140101
   29328:	dd512902 	.word	0xdd512902
   2932c:	60191e41 	.word	0x60191e41
   29330:	2c01f800 	.word	0x2c01f800
   29334:	24826819 	.word	0x24826819
   29338:	60181e48 	.word	0x60181e48
   2933c:	0a122003 	.word	0x0a122003
   29340:	2c01f801 	.word	0x2c01f801
   29344:	1e51681a 	.word	0x1e51681a
   29348:	f8026019 	.word	0xf8026019
   2934c:	bc304c01 	.word	0xbc304c01
   29350:	f1b24770 	.word	0xf1b24770
   29354:	d21a7f80 	.word	0xd21a7f80
   29358:	dd392903 	.word	0xdd392903
   2935c:	1e412483 	.word	0x1e412483
   29360:	f8006019 	.word	0xf8006019
   29364:	68192c01 	.word	0x68192c01
   29368:	1e4d0a10 	.word	0x1e4d0a10
   2936c:	f801601d 	.word	0xf801601d
   29370:	68190c01 	.word	0x68190c01
   29374:	1e480c12 	.word	0x1e480c12
   29378:	f8016018 	.word	0xf8016018
   2937c:	681a2c01 	.word	0x681a2c01
   29380:	1e512004 	.word	0x1e512004
   29384:	f8026019 	.word	0xf8026019
   29388:	bc304c01 	.word	0xbc304c01
   2938c:	29044770 	.word	0x29044770
   29390:	2484dd1e 	.word	0x2484dd1e
   29394:	60191e41 	.word	0x60191e41
   29398:	2c01f800 	.word	0x2c01f800
   2939c:	0a106819 	.word	0x0a106819
   293a0:	601d1e4d 	.word	0x601d1e4d
   293a4:	0c01f801 	.word	0x0c01f801
   293a8:	0c106819 	.word	0x0c106819
   293ac:	601d1e4d 	.word	0x601d1e4d
   293b0:	0c01f801 	.word	0x0c01f801
   293b4:	0e126819 	.word	0x0e126819
   293b8:	60181e48 	.word	0x60181e48
   293bc:	2c01f801 	.word	0x2c01f801
   293c0:	2005681a 	.word	0x2005681a
   293c4:	60191e51 	.word	0x60191e51
   293c8:	4c01f802 	.word	0x4c01f802
   293cc:	4770bc30 	.word	0x4770bc30
   293d0:	006bf06f 	.word	0x006bf06f
   293d4:	bf00e7bb 	.word	0xbf00e7bb

000293d8 <symbol_000646e>:
   293d8:	6804b430 	.word	0x6804b430
   293dc:	46032a7f 	.word	0x46032a7f
   293e0:	0101eba4 	.word	0x0101eba4
   293e4:	2900d808 	.word	0x2900d808
   293e8:	1e61dd6c 	.word	0x1e61dd6c
   293ec:	20016001 	.word	0x20016001
   293f0:	2c01f804 	.word	0x2c01f804
   293f4:	4770bc30 	.word	0x4770bc30
   293f8:	d80e2aff 	.word	0xd80e2aff
   293fc:	dd612901 	.word	0xdd612901
   29400:	1e602181 	.word	0x1e602181
   29404:	f8046018 	.word	0xf8046018
   29408:	681a2c01 	.word	0x681a2c01
   2940c:	1e542002 	.word	0x1e542002
   29410:	f802601c 	.word	0xf802601c
   29414:	bc301c01 	.word	0xbc301c01
   29418:	f5b24770 	.word	0xf5b24770
   2941c:	d31c3f80 	.word	0xd31c3f80
   29420:	7f80f1b2 	.word	0x7f80f1b2
   29424:	2903d22e 	.word	0x2903d22e
   29428:	2583dd4c 	.word	0x2583dd4c
   2942c:	60011e61 	.word	0x60011e61
   29430:	2c01f804 	.word	0x2c01f804
   29434:	0a106801 	.word	0x0a106801
   29438:	601c1e4c 	.word	0x601c1e4c
   2943c:	0c01f801 	.word	0x0c01f801
   29440:	0c126819 	.word	0x0c126819
   29444:	60181e48 	.word	0x60181e48
   29448:	2c01f801 	.word	0x2c01f801
   2944c:	2004681a 	.word	0x2004681a
   29450:	60191e51 	.word	0x60191e51
   29454:	5c01f802 	.word	0x5c01f802
   29458:	2902e7cc 	.word	0x2902e7cc
   2945c:	2582dd32 	.word	0x2582dd32
   29460:	60011e61 	.word	0x60011e61
   29464:	2c01f804 	.word	0x2c01f804
   29468:	0a126801 	.word	0x0a126801
   2946c:	60181e48 	.word	0x60181e48
   29470:	2c01f801 	.word	0x2c01f801
   29474:	2003681a 	.word	0x2003681a
   29478:	60191e51 	.word	0x60191e51
   2947c:	5c01f802 	.word	0x5c01f802
   29480:	4770bc30 	.word	0x4770bc30
   29484:	dd1d2904 	.word	0xdd1d2904
   29488:	1e612584 	.word	0x1e612584
   2948c:	f8046001 	.word	0xf8046001
   29490:	68012c01 	.word	0x68012c01
   29494:	1e4c0a10 	.word	0x1e4c0a10
   29498:	f801601c 	.word	0xf801601c
   2949c:	68190c01 	.word	0x68190c01
   294a0:	1e4c0c10 	.word	0x1e4c0c10
   294a4:	f801601c 	.word	0xf801601c
   294a8:	68190c01 	.word	0x68190c01
   294ac:	1e480e12 	.word	0x1e480e12
   294b0:	f8016018 	.word	0xf8016018
   294b4:	681a2c01 	.word	0x681a2c01
   294b8:	1e512005 	.word	0x1e512005
   294bc:	f8026019 	.word	0xf8026019
   294c0:	e7975c01 	.word	0xe7975c01
   294c4:	006bf06f 	.word	0x006bf06f
   294c8:	bf00e794 	.word	0xbf00e794

000294cc <symbol_00036c0>:
   294cc:	1a596803 	.word	0x1a596803
   294d0:	dd052900 	.word	0xdd052900
   294d4:	60011e59 	.word	0x60011e59
   294d8:	f8032001 	.word	0xf8032001
   294dc:	47702c01 	.word	0x47702c01
   294e0:	006bf06f 	.word	0x006bf06f
   294e4:	bf004770 	.word	0xbf004770

000294e8 <symbol_0008475>:
   294e8:	6805b5f8 	.word	0x6805b5f8
   294ec:	d83f42a9 	.word	0xd83f42a9
   294f0:	1a69460f 	.word	0x1a69460f
   294f4:	d83b428b 	.word	0xd83b428b
   294f8:	461c4606 	.word	0x461c4606
   294fc:	46111ae8 	.word	0x46111ae8
   29500:	461a6030 	.word	0x461a6030
   29504:	fc2cf017 	.word	0xfc2cf017
   29508:	46202c00 	.word	0x46202c00
   2950c:	2c7fdb15 	.word	0x2c7fdb15
   29510:	6833d814 	.word	0x6833d814
   29514:	2a001bda 	.word	0x2a001bda
   29518:	2001dd2a 	.word	0x2001dd2a
   2951c:	60321e5a 	.word	0x60321e5a
   29520:	4c01f803 	.word	0x4c01f803
   29524:	34016833 	.word	0x34016833
   29528:	2f001bdf 	.word	0x2f001bdf
   2952c:	2206dd20 	.word	0x2206dd20
   29530:	60311e59 	.word	0x60311e59
   29534:	f8034420 	.word	0xf8034420
   29538:	bdf82c01 	.word	0xbdf82c01
   2953c:	d80f2cff 	.word	0xd80f2cff
   29540:	1bda6833 	.word	0x1bda6833
   29544:	dd132a01 	.word	0xdd132a01
   29548:	1e592281 	.word	0x1e592281
   2954c:	f8036031 	.word	0xf8036031
   29550:	68334c01 	.word	0x68334c01
   29554:	1e592002 	.word	0x1e592002
   29558:	f8036031 	.word	0xf8036031
   2955c:	e7e12c01 	.word	0xe7e12c01
   29560:	46394622 	.word	0x46394622
   29564:	f7ff4630 	.word	0xf7ff4630
   29568:	2800fed7 	.word	0x2800fed7
   2956c:	bdf8dada 	.word	0xbdf8dada
   29570:	006bf06f 	.word	0x006bf06f
   29574:	bf00bdf8 	.word	0xbf00bdf8

00029578 <symbol_0002662>:
   29578:	41f0e92d 	.word	0x41f0e92d
   2957c:	8018f8dd 	.word	0x8018f8dd
   29580:	f1b86805 	.word	0xf1b86805
   29584:	d1130f00 	.word	0xd1130f00
   29588:	2c001a6c 	.word	0x2c001a6c
   2958c:	8087f340 	.word	0x8087f340
   29590:	60041e6c 	.word	0x60041e6c
   29594:	8c01f805 	.word	0x8c01f805
   29598:	1a656804 	.word	0x1a656804
   2959c:	dd7e2d00 	.word	0xdd7e2d00
   295a0:	f04f2505 	.word	0xf04f2505
   295a4:	1e660802 	.word	0x1e660802
   295a8:	f8046006 	.word	0xf8046006
   295ac:	68055c01 	.word	0x68055c01
   295b0:	d87442a9 	.word	0xd87442a9
   295b4:	42a31a6c 	.word	0x42a31a6c
   295b8:	4606d871 	.word	0x4606d871
   295bc:	1ae8461c 	.word	0x1ae8461c
   295c0:	6030460f 	.word	0x6030460f
   295c4:	461a4611 	.word	0x461a4611
   295c8:	fbcaf017 	.word	0xfbcaf017
   295cc:	46202c00 	.word	0x46202c00
   295d0:	2c7fdb2f 	.word	0x2c7fdb2f
   295d4:	6833d841 	.word	0x6833d841
   295d8:	2a001bda 	.word	0x2a001bda
   295dc:	2001dd5f 	.word	0x2001dd5f
   295e0:	60321e5a 	.word	0x60321e5a
   295e4:	4c01f803 	.word	0x4c01f803
   295e8:	34016833 	.word	0x34016833
   295ec:	2a001bda 	.word	0x2a001bda
   295f0:	2206dd55 	.word	0x2206dd55
   295f4:	1e594404 	.word	0x1e594404
   295f8:	60312c00 	.word	0x60312c00
   295fc:	f8034620 	.word	0xf8034620
   29600:	db162c01 	.word	0xdb162c01
   29604:	2c7f4444 	.word	0x2c7f4444
   29608:	6833d815 	.word	0x6833d815
   2960c:	2a001bda 	.word	0x2a001bda
   29610:	2001dd45 	.word	0x2001dd45
   29614:	60321e5a 	.word	0x60321e5a
   29618:	4c01f803 	.word	0x4c01f803
   2961c:	34016833 	.word	0x34016833
   29620:	2f001bdf 	.word	0x2f001bdf
   29624:	2230dd3b 	.word	0x2230dd3b
   29628:	60311e59 	.word	0x60311e59
   2962c:	f8034420 	.word	0xf8034420
   29630:	e8bd2c01 	.word	0xe8bd2c01
   29634:	2cff81f0 	.word	0x2cff81f0
   29638:	6833d821 	.word	0x6833d821
   2963c:	2a011bda 	.word	0x2a011bda
   29640:	2281dd2d 	.word	0x2281dd2d
   29644:	60311e59 	.word	0x60311e59
   29648:	4c01f803 	.word	0x4c01f803
   2964c:	20026833 	.word	0x20026833
   29650:	60311e59 	.word	0x60311e59
   29654:	2c01f803 	.word	0x2c01f803
   29658:	2cffe7e0 	.word	0x2cffe7e0
   2965c:	6833d817 	.word	0x6833d817
   29660:	2a011bda 	.word	0x2a011bda
   29664:	2281dd1b 	.word	0x2281dd1b
   29668:	60311e59 	.word	0x60311e59
   2966c:	4c01f803 	.word	0x4c01f803
   29670:	20026833 	.word	0x20026833
   29674:	60311e59 	.word	0x60311e59
   29678:	2c01f803 	.word	0x2c01f803
   2967c:	4622e7b4 	.word	0x4622e7b4
   29680:	46304639 	.word	0x46304639
   29684:	fe48f7ff 	.word	0xfe48f7ff
   29688:	dbd22800 	.word	0xdbd22800
   2968c:	4622e7c6 	.word	0x4622e7c6
   29690:	46304639 	.word	0x46304639
   29694:	fe40f7ff 	.word	0xfe40f7ff
   29698:	daa52800 	.word	0xdaa52800
   2969c:	f06fe7c9 	.word	0xf06fe7c9
   296a0:	e7c6006b 	.word	0xe7c6006b

000296a4 <symbol_0005bf5>:
   296a4:	4ff0e92d 	.word	0x4ff0e92d
   296a8:	b0d72400 	.word	0xb0d72400
   296ac:	73abf50d 	.word	0x73abf50d
   296b0:	46914688 	.word	0x46914688
   296b4:	4306e9cd 	.word	0x4306e9cd
   296b8:	f0014607 	.word	0xf0014607
   296bc:	2802f9a9 	.word	0x2802f9a9
   296c0:	2385d159 	.word	0x2385d159
   296c4:	ae0b6878 	.word	0xae0b6878
   296c8:	46229301 	.word	0x46229301
   296cc:	0188f100 	.word	0x0188f100
   296d0:	ab0a9600 	.word	0xab0a9600
   296d4:	f004940a 	.word	0xf004940a
   296d8:	ad2dfca7 	.word	0xad2dfca7
   296dc:	b9684604 	.word	0xb9684604
   296e0:	42a89807 	.word	0x42a89807
   296e4:	9a0ad37f 	.word	0x9a0ad37f
   296e8:	42931b43 	.word	0x42931b43
   296ec:	1a83d37b 	.word	0x1a83d37b
   296f0:	46314618 	.word	0x46314618
   296f4:	f0179307 	.word	0xf0179307
   296f8:	9c0afb33 	.word	0x9c0afb33
   296fc:	db312c00 	.word	0xdb312c00
   29700:	1b5a9b07 	.word	0x1b5a9b07
   29704:	dd6e2a00 	.word	0xdd6e2a00
   29708:	1e5a2100 	.word	0x1e5a2100
   2970c:	0a01f104 	.word	0x0a01f104
   29710:	a8079207 	.word	0xa8079207
   29714:	1c01f803 	.word	0x1c01f803
   29718:	46294652 	.word	0x46294652
   2971c:	fe5cf7ff 	.word	0xfe5cf7ff
   29720:	db1f1e04 	.word	0xdb1f1e04
   29724:	46292203 	.word	0x46292203
   29728:	f7ffa807 	.word	0xf7ffa807
   2972c:	f1b0fecf 	.word	0xf1b0fecf
   29730:	db1b0b00 	.word	0xdb1b0b00
   29734:	f0014638 	.word	0xf0014638
   29738:	aa08f96b 	.word	0xaa08f96b
   2973c:	f00ba909 	.word	0xf00ba909
   29740:	4603fe3b 	.word	0x4603fe3b
   29744:	2b00b1c8 	.word	0x2b00b1c8
   29748:	f1c3db50 	.word	0xf1c3db50
   2974c:	a90602a2 	.word	0xa90602a2
   29750:	9101e9cd 	.word	0x9101e9cd
   29754:	8000f8cd 	.word	0x8000f8cd
   29758:	4925442a 	.word	0x4925442a
   2975c:	f0054825 	.word	0xf0054825
   29760:	4604f8b1 	.word	0x4604f8b1
   29764:	b0574620 	.word	0xb0574620
   29768:	8ff0e8bd 	.word	0x8ff0e8bd
   2976c:	4620465c 	.word	0x4620465c
   29770:	e8bdb057 	.word	0xe8bdb057
   29774:	4c208ff0 	.word	0x4c208ff0
   29778:	9005e7f4 	.word	0x9005e7f4
   2977c:	f0014638 	.word	0xf0014638
   29780:	2802f947 	.word	0x2802f947
   29784:	d01d9b05 	.word	0xd01d9b05
   29788:	e9dd4618 	.word	0xe9dd4618
   2978c:	90003208 	.word	0x90003208
   29790:	a8074629 	.word	0xa8074629
   29794:	fef0f7ff 	.word	0xfef0f7ff
   29798:	db222800 	.word	0xdb222800
   2979c:	44a34454 	.word	0x44a34454
   297a0:	465a4483 	.word	0x465a4483
   297a4:	a8074629 	.word	0xa8074629
   297a8:	fe16f7ff 	.word	0xfe16f7ff
   297ac:	dbd91e04 	.word	0xdbd91e04
   297b0:	2230a807 	.word	0x2230a807
   297b4:	f7ff4629 	.word	0xf7ff4629
   297b8:	1e03fe89 	.word	0x1e03fe89
   297bc:	44a3db16 	.word	0x44a3db16
   297c0:	e7c0445b 	.word	0xe7c0445b
   297c4:	4632687b 	.word	0x4632687b
   297c8:	a90a7818 	.word	0xa90a7818
   297cc:	fe10f00b 	.word	0xfe10f00b
   297d0:	6833b928 	.word	0x6833b928
   297d4:	46299a0a 	.word	0x46299a0a
   297d8:	f7ffa807 	.word	0xf7ffa807
   297dc:	2800fe85 	.word	0x2800fe85
   297e0:	4604dad3 	.word	0x4604dad3
   297e4:	f06fe7be 	.word	0xf06fe7be
   297e8:	e7bb046b 	.word	0xe7bb046b
   297ec:	e7b9461c 	.word	0xe7b9461c
   297f0:	00042d9c 	.word	0x00042d9c
   297f4:	00042db8 	.word	0x00042db8
   297f8:	ffffc680 	.word	0xffffc680

000297fc <authenticated_atcmd_init>:
   297fc:	4c3bb5f0 	.word	0x4c3bb5f0
   29800:	6826b0c7 	.word	0x6826b0c7
   29804:	2701bb16 	.word	0x2701bb16
   29808:	60274839 	.word	0x60274839
   2980c:	fbbaf7f0 	.word	0xfbbaf7f0
   29810:	f5c04605 	.word	0xf5c04605
   29814:	46317380 	.word	0x46317380
   29818:	7280f44f 	.word	0x7280f44f
   2981c:	9302a806 	.word	0x9302a806
   29820:	fabef017 	.word	0xfabef017
   29824:	4932462a 	.word	0x4932462a
   29828:	f017a806 	.word	0xf017a806
   2982c:	aa06fa99 	.word	0xaa06fa99
   29830:	ab029700 	.word	0xab029700
   29834:	2120442a 	.word	0x2120442a
   29838:	f00b482e 	.word	0xf00b482e
   2983c:	4606f839 	.word	0x4606f839
   29840:	2300b138 	.word	0x2300b138
   29844:	60232023 	.word	0x60232023
   29848:	bdf0b047 	.word	0xbdf0b047
   2984c:	b047200e 	.word	0xb047200e
   29850:	2022bdf0 	.word	0x2022bdf0
   29854:	60279b02 	.word	0x60279b02
   29858:	af06441d 	.word	0xaf06441d
   2985c:	5578ab06 	.word	0x5578ab06
   29860:	f240442b 	.word	0xf240442b
   29864:	21022201 	.word	0x21022201
   29868:	705e2066 	.word	0x705e2066
   2986c:	f9c6f000 	.word	0xf9c6f000
   29870:	dbe61e07 	.word	0xdbe61e07
   29874:	f7f04820 	.word	0xf7f04820
   29878:	4633fb85 	.word	0x4633fb85
   2987c:	491e4602 	.word	0x491e4602
   29880:	6600e9cd 	.word	0x6600e9cd
   29884:	f0004638 	.word	0xf0004638
   29888:	3502f963 	.word	0x3502f963
   2988c:	4633a903 	.word	0x4633a903
   29890:	e9cd220a 	.word	0xe9cd220a
   29894:	46386600 	.word	0x46386600
   29898:	fa42f000 	.word	0xfa42f000
   2989c:	6600e9cd 	.word	0x6600e9cd
   298a0:	462aa906 	.word	0x462aa906
   298a4:	46384633 	.word	0x46384633
   298a8:	f952f000 	.word	0xf952f000
   298ac:	d00342a8 	.word	0xd00342a8
   298b0:	f0004638 	.word	0xf0004638
   298b4:	e7c4f9ed 	.word	0xe7c4f9ed
   298b8:	6600e9cd 	.word	0x6600e9cd
   298bc:	220a4633 	.word	0x220a4633
   298c0:	4638a903 	.word	0x4638a903
   298c4:	fa2cf000 	.word	0xfa2cf000
   298c8:	ddf12801 	.word	0xddf12801
   298cc:	2202a803 	.word	0x2202a803
   298d0:	f017490a 	.word	0xf017490a
   298d4:	4605fc22 	.word	0x4605fc22
   298d8:	d1e92800 	.word	0xd1e92800
   298dc:	46382302 	.word	0x46382302
   298e0:	f0006023 	.word	0xf0006023
   298e4:	4628f9d5 	.word	0x4628f9d5
   298e8:	bf00e7ae 	.word	0xbf00e7ae
   298ec:	200249cc 	.word	0x200249cc
   298f0:	00042dd4 	.word	0x00042dd4
   298f4:	2002be68 	.word	0x2002be68
   298f8:	00042de4 	.word	0x00042de4
   298fc:	00042df4 	.word	0x00042df4

00029900 <authenticated_atcmd_shutdown>:
   29900:	4b012200 	.word	0x4b012200
   29904:	4770601a 	.word	0x4770601a
   29908:	200249cc 	.word	0x200249cc

0002990c <gnss_client_event_handler>:
   2990c:	1b08f850 	.word	0x1b08f850
   29910:	f0060c09 	.word	0xf0060c09
   29914:	bf00bee9 	.word	0xbf00bee9

00029918 <rpc_gnss_client_init>:
   29918:	f00b4801 	.word	0xf00b4801
   2991c:	bf00b8c1 	.word	0xbf00b8c1
   29920:	00042e7c 	.word	0x00042e7c

00029924 <rpc_gnss_client_request_alloc>:
   29924:	b5102300 	.word	0xb5102300
   29928:	9301b082 	.word	0x9301b082
   2992c:	4604b158 	.word	0x4604b158
   29930:	2007aa01 	.word	0x2007aa01
   29934:	faecf00b 	.word	0xfaecf00b
   29938:	9b01b918 	.word	0x9b01b918
   2993c:	3308b10b 	.word	0x3308b10b
   29940:	b0026023 	.word	0xb0026023
   29944:	2007bd10 	.word	0x2007bd10
   29948:	bd10b002 	.word	0xbd10b002

0002994c <rpc_gnss_client_request_send>:
   2994c:	4370f401 	.word	0x4370f401
   29950:	5f80f5b3 	.word	0x5f80f5b3
   29954:	b160d10b 	.word	0xb160d10b
   29958:	f8304603 	.word	0xf8304603
   2995c:	20072c08 	.word	0x20072c08
   29960:	4101ea42 	.word	0x4101ea42
   29964:	1d08f843 	.word	0x1d08f843
   29968:	f00b4619 	.word	0xf00b4619
   2996c:	200fbab9 	.word	0x200fbab9
   29970:	20074770 	.word	0x20074770
   29974:	bf004770 	.word	0xbf004770

00029978 <rpc_gnss_client_message_free>:
   29978:	f1a0b120 	.word	0xf1a0b120
   2997c:	20070108 	.word	0x20070108
   29980:	baf8f00b 	.word	0xbaf8f00b
   29984:	47702007 	.word	0x47702007

00029988 <rpc_gnss_client_data_free>:
   29988:	4601b118 	.word	0x4601b118
   2998c:	f00b2007 	.word	0xf00b2007
   29990:	2007bc03 	.word	0x2007bc03
   29994:	bf004770 	.word	0xbf004770

00029998 <eckey_can_do>:
   29998:	28023802 	.word	0x28023802
   2999c:	2000bf8c 	.word	0x2000bf8c
   299a0:	47702001 	.word	0x47702001

000299a4 <eckey_get_bitlen>:
   299a4:	47706d80 	.word	0x47706d80

000299a8 <eckey_debug>:
   299a8:	4b032202 	.word	0x4b032202
   299ac:	60883088 	.word	0x60883088
   299b0:	604b700a 	.word	0x604b700a
   299b4:	bf004770 	.word	0xbf004770
   299b8:	00042e8c 	.word	0x00042e8c

000299bc <eckeydh_can_do>:
   299bc:	28013802 	.word	0x28013802
   299c0:	2000bf8c 	.word	0x2000bf8c
   299c4:	47702001 	.word	0x47702001

000299c8 <eckey_free_wrap>:
   299c8:	4604b510 	.word	0x4604b510
   299cc:	fd24f003 	.word	0xfd24f003
   299d0:	e8bd4620 	.word	0xe8bd4620
   299d4:	f00c4010 	.word	0xf00c4010
   299d8:	bf00b947 	.word	0xbf00b947

000299dc <eckey_alloc_wrap>:
   299dc:	21acb510 	.word	0x21acb510
   299e0:	f00c2001 	.word	0xf00c2001
   299e4:	4604f92d 	.word	0x4604f92d
   299e8:	f003b108 	.word	0xf003b108
   299ec:	4620fcaf 	.word	0x4620fcaf
   299f0:	bf00bd10 	.word	0xbf00bd10

000299f4 <eckey_check_pair>:
   299f4:	bc88f004 	.word	0xbc88f004

000299f8 <symbol_0005c7f>:
   299f8:	4ff0e92d 	.word	0x4ff0e92d
   299fc:	c024f8dd 	.word	0xc024f8dd
   29a00:	0f00f1bc 	.word	0x0f00f1bc
   29a04:	4c42d065 	.word	0x4c42d065
   29a08:	540cfba4 	.word	0x540cfba4
   29a0c:	eb040864 	.word	0xeb040864
   29a10:	45c40844 	.word	0x45c40844
   29a14:	3401bf18 	.word	0x3401bf18
   29a18:	4f80f1b4 	.word	0x4f80f1b4
   29a1c:	00a4d271 	.word	0x00a4d271
   29a20:	428c3401 	.word	0x428c3401
   29a24:	2800d869 	.word	0x2800d869
   29a28:	f1b8d067 	.word	0xf1b8d067
   29a2c:	d0610f00 	.word	0xd0610f00
   29a30:	27004686 	.word	0x27004686
   29a34:	1cdc4e37 	.word	0x1cdc4e37
   29a38:	f8142500 	.word	0xf8142500
   29a3c:	f8141c03 	.word	0xf8141c03
   29a40:	f8143c02 	.word	0xf8143c02
   29a44:	ea4fbc01 	.word	0xea4fbc01
   29a48:	010909a1 	.word	0x010909a1
   29a4c:	0130f001 	.word	0x0130f001
   29a50:	1a13eb06 	.word	0x1a13eb06
   29a54:	9009f816 	.word	0x9009f816
   29a58:	f81a009b 	.word	0xf81a009b
   29a5c:	f003a001 	.word	0xf003a001
   29a60:	eb06013c 	.word	0xeb06013c
   29a64:	5c59139b 	.word	0x5c59139b
   29a68:	0507f369 	.word	0x0507f369
   29a6c:	033ff00b 	.word	0x033ff00b
   29a70:	f36a5cf3 	.word	0xf36a5cf3
   29a74:	f361250f 	.word	0xf361250f
   29a78:	37034517 	.word	0x37034517
   29a7c:	651ff363 	.word	0x651ff363
   29a80:	0104f10e 	.word	0x0104f10e
   29a84:	f8ce45b8 	.word	0xf8ce45b8
   29a88:	46235000 	.word	0x46235000
   29a8c:	f104468e 	.word	0xf104468e
   29a90:	d8d10403 	.word	0xd8d10403
   29a94:	d91445bc 	.word	0xd91445bc
   29a98:	4d1e781c 	.word	0x4d1e781c
   29a9c:	10a63701 	.word	0x10a63701
   29aa0:	ea4f4567 	.word	0xea4f4567
   29aa4:	f0041404 	.word	0xf0041404
   29aa8:	f8150430 	.word	0xf8150430
   29aac:	d315e006 	.word	0xd315e006
   29ab0:	5d2b263d 	.word	0x5d2b263d
   29ab4:	e000f881 	.word	0xe000f881
   29ab8:	233d704b 	.word	0x233d704b
   29abc:	70cb708e 	.word	0x70cb708e
   29ac0:	23003104 	.word	0x23003104
   29ac4:	1a08469c 	.word	0x1a08469c
   29ac8:	700b6010 	.word	0x700b6010
   29acc:	e8bd4660 	.word	0xe8bd4660
   29ad0:	f8c28ff0 	.word	0xf8c28ff0
   29ad4:	4660c000 	.word	0x4660c000
   29ad8:	8ff0e8bd 	.word	0x8ff0e8bd
   29adc:	f881785b 	.word	0xf881785b
   29ae0:	eb05e000 	.word	0xeb05e000
   29ae4:	5d341613 	.word	0x5d341613
   29ae8:	f003009b 	.word	0xf003009b
   29aec:	704c033c 	.word	0x704c033c
   29af0:	e7e25cee 	.word	0xe7e25cee
   29af4:	46014647 	.word	0x46014647
   29af8:	6014e7cc 	.word	0x6014e7cc
   29afc:	0c29f06f 	.word	0x0c29f06f
   29b00:	f04fe7e4 	.word	0xf04fe7e4
   29b04:	f06f33ff 	.word	0xf06f33ff
   29b08:	60130c29 	.word	0x60130c29
   29b0c:	bf00e7de 	.word	0xbf00e7de
   29b10:	aaaaaaab 	.word	0xaaaaaaab
   29b14:	00042ef4 	.word	0x00042ef4

00029b18 <packet_free_cb>:
   29b18:	f0006800 	.word	0xf0006800
   29b1c:	bf00b9eb 	.word	0xbf00b9eb

00029b20 <packet_free_cb>:
   29b20:	4604b510 	.word	0x4604b510
   29b24:	f0066800 	.word	0xf0066800
   29b28:	68a0faaf 	.word	0x68a0faaf
   29b2c:	e8bdb118 	.word	0xe8bdb118
   29b30:	f00c4010 	.word	0xf00c4010
   29b34:	bd10b899 	.word	0xbd10b899

00029b38 <packet_free_cb>:
   29b38:	4604b510 	.word	0x4604b510
   29b3c:	f7ff6800 	.word	0xf7ff6800
   29b40:	68a0ff23 	.word	0x68a0ff23
   29b44:	e8bdb118 	.word	0xe8bdb118
   29b48:	f00c4010 	.word	0xf00c4010
   29b4c:	bd10b88d 	.word	0xbd10b88d

00029b50 <at_interface_write>:
   29b50:	b083b5f0 	.word	0xb083b5f0
   29b54:	4615460f 	.word	0x4615460f
   29b58:	f0044606 	.word	0xf0044606
   29b5c:	2800fdcf 	.word	0x2800fdcf
   29b60:	6803d047 	.word	0x6803d047
   29b64:	039b4604 	.word	0x039b4604
   29b68:	6803d543 	.word	0x6803d543
   29b6c:	f4234629 	.word	0xf4234629
   29b70:	60033300 	.word	0x60033300
   29b74:	a8016803 	.word	0xa8016803
   29b78:	1300f443 	.word	0x1300f443
   29b7c:	f0006023 	.word	0xf0006023
   29b80:	bba0f98f 	.word	0xbba0f98f
   29b84:	9b012204 	.word	0x9b012204
   29b88:	7258721a 	.word	0x7258721a
   29b8c:	72d87298 	.word	0x72d87298
   29b90:	b98560de 	.word	0xb98560de
   29b94:	21014618 	.word	0x21014618
   29b98:	f996f000 	.word	0xf996f000
   29b9c:	f44fb9d0 	.word	0xf44fb9d0
   29ba0:	46303200 	.word	0x46303200
   29ba4:	f04f4611 	.word	0xf04f4611
   29ba8:	f00433ff 	.word	0xf00433ff
   29bac:	b9a8fd3b 	.word	0xb9a8fd3b
   29bb0:	b0034628 	.word	0xb0034628
   29bb4:	4639bdf0 	.word	0x4639bdf0
   29bb8:	462a6818 	.word	0x462a6818
   29bbc:	f8d0f017 	.word	0xf8d0f017
   29bc0:	98012101 	.word	0x98012101
   29bc4:	f980f000 	.word	0xf980f000
   29bc8:	d0e82800 	.word	0xd0e82800
   29bcc:	68189b01 	.word	0x68189b01
   29bd0:	f990f000 	.word	0xf990f000
   29bd4:	f0009801 	.word	0xf0009801
   29bd8:	2023f985 	.word	0x2023f985
   29bdc:	f4436823 	.word	0xf4436823
   29be0:	60233300 	.word	0x60233300
   29be4:	fe92f7f8 	.word	0xfe92f7f8
   29be8:	30fff04f 	.word	0x30fff04f
   29bec:	200ce7e1 	.word	0x200ce7e1
   29bf0:	2016e7f4 	.word	0x2016e7f4
   29bf4:	bf00e7f6 	.word	0xbf00e7f6

00029bf8 <at_interface_init>:
   29bf8:	b94cf000 	.word	0xb94cf000

00029bfc <at_interface_open>:
   29bfc:	41f0e92d 	.word	0x41f0e92d
   29c00:	b0822500 	.word	0xb0822500
   29c04:	f843ab02 	.word	0xf843ab02
   29c08:	46805d08 	.word	0x46805d08
   29c0c:	4618460f 	.word	0x4618460f
   29c10:	21024616 	.word	0x21024616
   29c14:	f0044a1d 	.word	0xf0044a1d
   29c18:	9b00fc61 	.word	0x9b00fc61
   29c1c:	b30b4604 	.word	0xb30b4604
   29c20:	8703e9c3 	.word	0x8703e9c3
   29c24:	4629615e 	.word	0x4629615e
   29c28:	f000a801 	.word	0xf000a801
   29c2c:	b9e8f939 	.word	0xb9e8f939
   29c30:	9b012204 	.word	0x9b012204
   29c34:	72582105 	.word	0x72582105
   29c38:	72d87298 	.word	0x72d87298
   29c3c:	60dc721a 	.word	0x60dc721a
   29c40:	f0004618 	.word	0xf0004618
   29c44:	b9d8f941 	.word	0xb9d8f941
   29c48:	f04f2202 	.word	0xf04f2202
   29c4c:	461133ff 	.word	0x461133ff
   29c50:	f0044620 	.word	0xf0044620
   29c54:	4605fce7 	.word	0x4605fce7
   29c58:	9a00b948 	.word	0x9a00b948
   29c5c:	f4436813 	.word	0xf4436813
   29c60:	60133300 	.word	0x60133300
   29c64:	b0024620 	.word	0xb0024620
   29c68:	81f0e8bd 	.word	0x81f0e8bd
   29c6c:	4620250c 	.word	0x4620250c
   29c70:	fc8af004 	.word	0xfc8af004
   29c74:	f7f84628 	.word	0xf7f84628
   29c78:	f04ffe49 	.word	0xf04ffe49
   29c7c:	e7f134ff 	.word	0xe7f134ff
   29c80:	f0009801 	.word	0xf0009801
   29c84:	2523f92f 	.word	0x2523f92f
   29c88:	bf00e7f1 	.word	0xbf00e7f1
   29c8c:	00029b19 	.word	0x00029b19

00029c90 <at_interface_close>:
   29c90:	b083b5f0 	.word	0xb083b5f0
   29c94:	f0044606 	.word	0xf0044606
   29c98:	2800fd31 	.word	0x2800fd31
   29c9c:	230dd03d 	.word	0x230dd03d
   29ca0:	60036807 	.word	0x60036807
   29ca4:	46046803 	.word	0x46046803
   29ca8:	d41f039b 	.word	0xd41f039b
   29cac:	a8012100 	.word	0xa8012100
   29cb0:	f8f6f000 	.word	0xf8f6f000
   29cb4:	2204bb20 	.word	0x2204bb20
   29cb8:	21069b01 	.word	0x21069b01
   29cbc:	72987258 	.word	0x72987258
   29cc0:	721a72d8 	.word	0x721a72d8
   29cc4:	461860de 	.word	0x461860de
   29cc8:	f8fef000 	.word	0xf8fef000
   29ccc:	220eb9d0 	.word	0x220eb9d0
   29cd0:	33fff04f 	.word	0x33fff04f
   29cd4:	46304611 	.word	0x46304611
   29cd8:	fca4f004 	.word	0xfca4f004
   29cdc:	b9a84605 	.word	0xb9a84605
   29ce0:	f0044630 	.word	0xf0044630
   29ce4:	4628fc51 	.word	0x4628fc51
   29ce8:	bdf0b003 	.word	0xbdf0b003
   29cec:	21006803 	.word	0x21006803
   29cf0:	3300f423 	.word	0x3300f423
   29cf4:	a8016003 	.word	0xa8016003
   29cf8:	f8d2f000 	.word	0xf8d2f000
   29cfc:	d0da2800 	.word	0xd0da2800
   29d00:	e003250c 	.word	0xe003250c
   29d04:	f0009801 	.word	0xf0009801
   29d08:	2523f8ed 	.word	0x2523f8ed
   29d0c:	46286027 	.word	0x46286027
   29d10:	fdfcf7f8 	.word	0xfdfcf7f8
   29d14:	35fff04f 	.word	0x35fff04f
   29d18:	2516e7e5 	.word	0x2516e7e5
   29d1c:	bf00e7f7 	.word	0xbf00e7f7

00029d20 <at_interface_read>:
   29d20:	41f0e92d 	.word	0x41f0e92d
   29d24:	4688b084 	.word	0x4688b084
   29d28:	461e4615 	.word	0x461e4615
   29d2c:	f0044607 	.word	0xf0044607
   29d30:	2800fce5 	.word	0x2800fce5
   29d34:	2300d049 	.word	0x2300d049
   29d38:	8500e9cd 	.word	0x8500e9cd
   29d3c:	0502f016 	.word	0x0502f016
   29d40:	e9cd4604 	.word	0xe9cd4604
   29d44:	d00e3302 	.word	0xd00e3302
   29d48:	2d00e01e 	.word	0x2d00e01e
   29d4c:	f44fd133 	.word	0xf44fd133
   29d50:	6a233280 	.word	0x6a233280
   29d54:	2b004611 	.word	0x2b004611
   29d58:	f04fbf08 	.word	0xf04fbf08
   29d5c:	463833ff 	.word	0x463833ff
   29d60:	fc60f004 	.word	0xfc60f004
   29d64:	68234605 	.word	0x68234605
   29d68:	f42369e0 	.word	0xf42369e0
   29d6c:	60233380 	.word	0x60233380
   29d70:	46326803 	.word	0x46326803
   29d74:	4669689b 	.word	0x4669689b
   29d78:	f1b04798 	.word	0xf1b04798
   29d7c:	dbe40800 	.word	0xdbe40800
   29d80:	b0044640 	.word	0xb0044640
   29d84:	81f0e8bd 	.word	0x81f0e8bd
   29d88:	69c06803 	.word	0x69c06803
   29d8c:	3380f423 	.word	0x3380f423
   29d90:	68036023 	.word	0x68036023
   29d94:	689b4632 	.word	0x689b4632
   29d98:	47984669 	.word	0x47984669
   29d9c:	0800f1b0 	.word	0x0800f1b0
   29da0:	f1b8daee 	.word	0xf1b8daee
   29da4:	d1eb3fff 	.word	0xd1eb3fff
   29da8:	f7f82023 	.word	0xf7f82023
   29dac:	4640fdaf 	.word	0x4640fdaf
   29db0:	e8bdb004 	.word	0xe8bdb004
   29db4:	f1b881f0 	.word	0xf1b881f0
   29db8:	d1e13fff 	.word	0xd1e13fff
   29dbc:	f7f84628 	.word	0xf7f84628
   29dc0:	4640fda5 	.word	0x4640fda5
   29dc4:	e8bdb004 	.word	0xe8bdb004
   29dc8:	201681f0 	.word	0x201681f0
   29dcc:	fd9ef7f8 	.word	0xfd9ef7f8
   29dd0:	38fff04f 	.word	0x38fff04f
   29dd4:	bf00e7d4 	.word	0xbf00e7d4

00029dd8 <at_interface_getopt>:
   29dd8:	bceef004 	.word	0xbceef004

00029ddc <at_interface_setopt>:
   29ddc:	bcb6f004 	.word	0xbcb6f004

00029de0 <rpc_at_event_handler>:
   29de0:	4606b570 	.word	0x4606b570
   29de4:	68c0b084 	.word	0x68c0b084
   29de8:	f004460d 	.word	0xf004460d
   29dec:	4604fc87 	.word	0x4604fc87
   29df0:	6803b348 	.word	0x6803b348
   29df4:	2b01b29b 	.word	0x2b01b29b
   29df8:	6803d01f 	.word	0x6803d01f
   29dfc:	2b0db29b 	.word	0x2b0db29b
   29e00:	6803d029 	.word	0x6803d029
   29e04:	2b02b29b 	.word	0x2b02b29b
   29e08:	3d03d02d 	.word	0x3d03d02d
   29e0c:	d8172d01 	.word	0xd8172d01
   29e10:	68732500 	.word	0x68732500
   29e14:	e9cd6832 	.word	0xe9cd6832
   29e18:	e9cd5502 	.word	0xe9cd5502
   29e1c:	69e02300 	.word	0x69e02300
   29e20:	68034669 	.word	0x68034669
   29e24:	4798685b 	.word	0x4798685b
   29e28:	d0193001 	.word	0xd0193001
   29e2c:	68234628 	.word	0x68234628
   29e30:	3380f443 	.word	0x3380f443
   29e34:	b0046023 	.word	0xb0046023
   29e38:	2d02bd70 	.word	0x2d02bd70
   29e3c:	6005d1e5 	.word	0x6005d1e5
   29e40:	b0042000 	.word	0xb0042000
   29e44:	6830bd70 	.word	0x6830bd70
   29e48:	d0f92800 	.word	0xd0f92800
   29e4c:	f852f000 	.word	0xf852f000
   29e50:	b0044620 	.word	0xb0044620
   29e54:	2d02bd70 	.word	0x2d02bd70
   29e58:	230ed1d7 	.word	0x230ed1d7
   29e5c:	e7ef6003 	.word	0xe7ef6003
   29e60:	b0042002 	.word	0xb0042002
   29e64:	6803bd70 	.word	0x6803bd70
   29e68:	d5ce029b 	.word	0xd5ce029b
   29e6c:	d1cc2d02 	.word	0xd1cc2d02
   29e70:	f4236803 	.word	0xf4236803
   29e74:	60031300 	.word	0x60031300
   29e78:	f4436803 	.word	0xf4436803
   29e7c:	60033300 	.word	0x60033300
   29e80:	bf00e7de 	.word	0xbf00e7de

00029e84 <at_client_evt_handler>:
   29e84:	f850b120 	.word	0xf850b120
   29e88:	0c091b08 	.word	0x0c091b08
   29e8c:	bfa8f7ff 	.word	0xbfa8f7ff
   29e90:	bf004770 	.word	0xbf004770

00029e94 <rpc_at_client_init>:
   29e94:	f00a4801 	.word	0xf00a4801
   29e98:	bf00be03 	.word	0xbf00be03
   29e9c:	00042f34 	.word	0x00042f34

00029ea0 <rpc_at_client_request_alloc>:
   29ea0:	2300b180 	.word	0x2300b180
   29ea4:	b082b510 	.word	0xb082b510
   29ea8:	4604aa02 	.word	0x4604aa02
   29eac:	3d04f842 	.word	0x3d04f842
   29eb0:	f00b2003 	.word	0xf00b2003
   29eb4:	b918f82d 	.word	0xb918f82d
   29eb8:	b10b9b01 	.word	0xb10b9b01
   29ebc:	60233308 	.word	0x60233308
   29ec0:	bd10b002 	.word	0xbd10b002
   29ec4:	4770200e 	.word	0x4770200e

00029ec8 <rpc_at_client_request_send>:
   29ec8:	4603b150 	.word	0x4603b150
   29ecc:	2c08f830 	.word	0x2c08f830
   29ed0:	ea422003 	.word	0xea422003
   29ed4:	f8434101 	.word	0xf8434101
   29ed8:	46191d08 	.word	0x46191d08
   29edc:	b800f00b 	.word	0xb800f00b
   29ee0:	4770200e 	.word	0x4770200e

00029ee4 <rpc_at_client_message_free>:
   29ee4:	f1a0b120 	.word	0xf1a0b120
   29ee8:	20030108 	.word	0x20030108
   29eec:	b842f00b 	.word	0xb842f00b
   29ef0:	4770200e 	.word	0x4770200e

00029ef4 <rpc_at_client_data_free>:
   29ef4:	4601b118 	.word	0x4601b118
   29ef8:	f00b2003 	.word	0xf00b2003
   29efc:	200eb94d 	.word	0x200eb94d
   29f00:	bf004770 	.word	0xbf004770

00029f04 <logobj_event_handler>:
   29f04:	4b3bb530 	.word	0x4b3bb530
   29f08:	681db085 	.word	0x681db085
   29f0c:	d04c2d00 	.word	0xd04c2d00
   29f10:	0302f248 	.word	0x0302f248
   29f14:	d0534299 	.word	0xd0534299
   29f18:	f248d91c 	.word	0xf248d91c
   29f1c:	42990303 	.word	0x42990303
   29f20:	f249d05a 	.word	0xf249d05a
   29f24:	42990301 	.word	0x42990301
   29f28:	2400d147 	.word	0x2400d147
   29f2c:	68026843 	.word	0x68026843
   29f30:	4402e9cd 	.word	0x4402e9cd
   29f34:	2300e9cd 	.word	0x2300e9cd
   29f38:	466969e8 	.word	0x466969e8
   29f3c:	685b6803 	.word	0x685b6803
   29f40:	30014798 	.word	0x30014798
   29f44:	4620d04e 	.word	0x4620d04e
   29f48:	f443682b 	.word	0xf443682b
   29f4c:	602b3380 	.word	0x602b3380
   29f50:	bd30b005 	.word	0xbd30b005
   29f54:	0301f248 	.word	0x0301f248
   29f58:	d12e4299 	.word	0xd12e4299
   29f5c:	2b0068c3 	.word	0x2b0068c3
   29f60:	6828d135 	.word	0x6828d135
   29f64:	0080f410 	.word	0x0080f410
   29f68:	682bd03e 	.word	0x682bd03e
   29f6c:	2b01b29b 	.word	0x2b01b29b
   29f70:	682bd105 	.word	0x682bd105
   29f74:	041b0c1b 	.word	0x041b0c1b
   29f78:	0302f043 	.word	0x0302f043
   29f7c:	4b1e602b 	.word	0x4b1e602b
   29f80:	f002781a 	.word	0xf002781a
   29f84:	2a0001ff 	.word	0x2a0001ff
   29f88:	4a1cd031 	.word	0x4a1cd031
   29f8c:	b9097811 	.word	0xb9097811
   29f90:	70112101 	.word	0x70112101
   29f94:	70182000 	.word	0x70182000
   29f98:	f423682b 	.word	0xf423682b
   29f9c:	602b0380 	.word	0x602b0380
   29fa0:	f443682b 	.word	0xf443682b
   29fa4:	602b0300 	.word	0x602b0300
   29fa8:	6800e7d2 	.word	0x6800e7d2
   29fac:	d0cf2800 	.word	0xd0cf2800
   29fb0:	f86af006 	.word	0xf86af006
   29fb4:	b0054628 	.word	0xb0054628
   29fb8:	2000bd30 	.word	0x2000bd30
   29fbc:	bd30b005 	.word	0xbd30b005
   29fc0:	f413682b 	.word	0xf413682b
   29fc4:	d00b0380 	.word	0xd00b0380
   29fc8:	280068c0 	.word	0x280068c0
   29fcc:	230ed0e4 	.word	0x230ed0e4
   29fd0:	606b2000 	.word	0x606b2000
   29fd4:	bd30b005 	.word	0xbd30b005
   29fd8:	2b0168c3 	.word	0x2b0168c3
   29fdc:	e7f6d1a5 	.word	0xe7f6d1a5
   29fe0:	e7b54618 	.word	0xe7b54618
   29fe4:	e7b32002 	.word	0xe7b32002
   29fe8:	606b230e 	.word	0x606b230e
   29fec:	4a03e7b0 	.word	0x4a03e7b0
   29ff0:	e7cf7011 	.word	0xe7cf7011
   29ff4:	200249d4 	.word	0x200249d4
   29ff8:	2002be61 	.word	0x2002be61
   29ffc:	2002be62 	.word	0x2002be62

0002a000 <logobj_interface_init>:
   2a000:	b5102300 	.word	0xb5102300
   2a004:	4a084907 	.word	0x4a084907
   2a008:	48094c08 	.word	0x48094c08
   2a00c:	60037023 	.word	0x60037023
   2a010:	6013700b 	.word	0x6013700b
   2a014:	fffcf005 	.word	0xfffcf005
   2a018:	bf183000 	.word	0xbf183000
   2a01c:	42402001 	.word	0x42402001
   2a020:	bf00bd10 	.word	0xbf00bd10
   2a024:	2002be61 	.word	0x2002be61
   2a028:	200249d0 	.word	0x200249d0
   2a02c:	2002be62 	.word	0x2002be62
   2a030:	200249d4 	.word	0x200249d4

0002a034 <logobj_interface_open>:
   2a034:	e92d2300 	.word	0xe92d2300
   2a038:	286647f0 	.word	0x286647f0
   2a03c:	9300b082 	.word	0x9300b082
   2a040:	2902d172 	.word	0x2902d172
   2a044:	d16f4689 	.word	0xd16f4689
   2a048:	2305f240 	.word	0x2305f240
   2a04c:	4692429a 	.word	0x4692429a
   2a050:	4f48d16a 	.word	0x4f48d16a
   2a054:	2d00683d 	.word	0x2d00683d
   2a058:	4680d17c 	.word	0x4680d17c
   2a05c:	46684a46 	.word	0x46684a46
   2a060:	fa3cf004 	.word	0xfa3cf004
   2a064:	46069b00 	.word	0x46069b00
   2a068:	d07d2b00 	.word	0xd07d2b00
   2a06c:	22044629 	.word	0x22044629
   2a070:	603b4842 	.word	0x603b4842
   2a074:	fe94f016 	.word	0xfe94f016
   2a078:	46299c00 	.word	0x46299c00
   2a07c:	8903e9c4 	.word	0x8903e9c4
   2a080:	a014f8c4 	.word	0xa014f8c4
   2a084:	f005a801 	.word	0xf005a801
   2a088:	2800ffc9 	.word	0x2800ffc9
   2a08c:	2201d13c 	.word	0x2201d13c
   2a090:	9b012104 	.word	0x9b012104
   2a094:	73584d3a 	.word	0x73584d3a
   2a098:	73d87398 	.word	0x73d87398
   2a09c:	72987258 	.word	0x72987258
   2a0a0:	721972d8 	.word	0x721972d8
   2a0a4:	731a702a 	.word	0x731a702a
   2a0a8:	46186822 	.word	0x46186822
   2a0ac:	0280f442 	.word	0x0280f442
   2a0b0:	f2476022 	.word	0xf2476022
   2a0b4:	f0050101 	.word	0xf0050101
   2a0b8:	bb38ffc9 	.word	0xbb38ffc9
   2a0bc:	0200f44f 	.word	0x0200f44f
   2a0c0:	33fff04f 	.word	0x33fff04f
   2a0c4:	46304611 	.word	0x46304611
   2a0c8:	faacf004 	.word	0xfaacf004
   2a0cc:	b3104604 	.word	0xb3104604
   2a0d0:	2e009a00 	.word	0x2e009a00
   2a0d4:	f4436813 	.word	0xf4436813
   2a0d8:	60133300 	.word	0x60133300
   2a0dc:	68139a00 	.word	0x68139a00
   2a0e0:	0380f423 	.word	0x0380f423
   2a0e4:	9a006013 	.word	0x9a006013
   2a0e8:	f4236813 	.word	0xf4236813
   2a0ec:	60130300 	.word	0x60130300
   2a0f0:	2300da36 	.word	0x2300da36
   2a0f4:	603b4620 	.word	0x603b4620
   2a0f8:	36fff04f 	.word	0x36fff04f
   2a0fc:	fc06f7f8 	.word	0xfc06f7f8
   2a100:	b0024630 	.word	0xb0024630
   2a104:	87f0e8bd 	.word	0x87f0e8bd
   2a108:	e7e1240c 	.word	0xe7e1240c
   2a10c:	f0059801 	.word	0xf0059801
   2a110:	2405ffb3 	.word	0x2405ffb3
   2a114:	4630e7dc 	.word	0x4630e7dc
   2a118:	faf0f004 	.word	0xfaf0f004
   2a11c:	6844b150 	.word	0x6844b150
   2a120:	2300b144 	.word	0x2300b144
   2a124:	e7d36043 	.word	0xe7d36043
   2a128:	f7f82016 	.word	0xf7f82016
   2a12c:	f04ffbef 	.word	0xf04ffbef
   2a130:	e7e536ff 	.word	0xe7e536ff
   2a134:	68139a00 	.word	0x68139a00
   2a138:	3300f443 	.word	0x3300f443
   2a13c:	9a006013 	.word	0x9a006013
   2a140:	f4236813 	.word	0xf4236813
   2a144:	60130380 	.word	0x60130380
   2a148:	68139a00 	.word	0x68139a00
   2a14c:	0300f423 	.word	0x0300f423
   2a150:	e7d56013 	.word	0xe7d56013
   2a154:	f7f82001 	.word	0xf7f82001
   2a158:	f04ffbd9 	.word	0xf04ffbd9
   2a15c:	e7cf36ff 	.word	0xe7cf36ff
   2a160:	f0044630 	.word	0xf0044630
   2a164:	e7c4fa11 	.word	0xe7c4fa11
   2a168:	f7f82018 	.word	0xf7f82018
   2a16c:	f04ffbcf 	.word	0xf04ffbcf
   2a170:	e7c536ff 	.word	0xe7c536ff
   2a174:	200249d4 	.word	0x200249d4
   2a178:	00029b21 	.word	0x00029b21
   2a17c:	200249d0 	.word	0x200249d0
   2a180:	2002be61 	.word	0x2002be61

0002a184 <logobj_interface_read>:
   2a184:	43f0e92d 	.word	0x43f0e92d
   2a188:	2900b085 	.word	0x2900b085
   2a18c:	2a00d05e 	.word	0x2a00d05e
   2a190:	dd5b4616 	.word	0xdd5b4616
   2a194:	4680461f 	.word	0x4680461f
   2a198:	f004460d 	.word	0xf004460d
   2a19c:	4604faaf 	.word	0x4604faaf
   2a1a0:	d0592800 	.word	0xd0592800
   2a1a4:	07ba69c0 	.word	0x07ba69c0
   2a1a8:	68db6803 	.word	0x68db6803
   2a1ac:	4798d524 	.word	0x4798d524
   2a1b0:	d03b3001 	.word	0xd03b3001
   2a1b4:	69e06823 	.word	0x69e06823
   2a1b8:	3380f413 	.word	0x3380f413
   2a1bc:	2100d038 	.word	0x2100d038
   2a1c0:	463a6823 	.word	0x463a6823
   2a1c4:	3380f423 	.word	0x3380f423
   2a1c8:	e9cd6023 	.word	0xe9cd6023
   2a1cc:	e9cd1102 	.word	0xe9cd1102
   2a1d0:	68035600 	.word	0x68035600
   2a1d4:	689b4669 	.word	0x689b4669
   2a1d8:	46054798 	.word	0x46054798
   2a1dc:	680369e0 	.word	0x680369e0
   2a1e0:	479868db 	.word	0x479868db
   2a1e4:	d0033001 	.word	0xd0033001
   2a1e8:	f4436823 	.word	0xf4436823
   2a1ec:	60233380 	.word	0x60233380
   2a1f0:	b0054628 	.word	0xb0054628
   2a1f4:	83f0e8bd 	.word	0x83f0e8bd
   2a1f8:	f0126822 	.word	0xf0126822
   2a1fc:	d1d65980 	.word	0xd1d65980
   2a200:	1c434798 	.word	0x1c434798
   2a204:	f44fd1d6 	.word	0xf44fd1d6
   2a208:	6a233280 	.word	0x6a233280
   2a20c:	2b004611 	.word	0x2b004611
   2a210:	4603bf08 	.word	0x4603bf08
   2a214:	f0044640 	.word	0xf0044640
   2a218:	b158fa05 	.word	0xb158fa05
   2a21c:	35fff04f 	.word	0x35fff04f
   2a220:	fb74f7f8 	.word	0xfb74f7f8
   2a224:	b0054628 	.word	0xb0054628
   2a228:	83f0e8bd 	.word	0x83f0e8bd
   2a22c:	e7f52023 	.word	0xe7f52023
   2a230:	e7d4461d 	.word	0xe7d4461d
   2a234:	f0044640 	.word	0xf0044640
   2a238:	4603fa61 	.word	0x4603fa61
   2a23c:	d0b92800 	.word	0xd0b92800
   2a240:	28006840 	.word	0x28006840
   2a244:	f8c3d0b6 	.word	0xf8c3d0b6
   2a248:	e7e79004 	.word	0xe7e79004
   2a24c:	f7f82016 	.word	0xf7f82016
   2a250:	f04ffb5d 	.word	0xf04ffb5d
   2a254:	e7cb35ff 	.word	0xe7cb35ff
   2a258:	f7f82009 	.word	0xf7f82009
   2a25c:	f04ffb57 	.word	0xf04ffb57
   2a260:	e7c535ff 	.word	0xe7c535ff

0002a264 <logobj_interface_write>:
   2a264:	41f0e92d 	.word	0x41f0e92d
   2a268:	2900b082 	.word	0x2900b082
   2a26c:	2a04d05b 	.word	0x2a04d05b
   2a270:	461ed159 	.word	0x461ed159
   2a274:	460d4607 	.word	0x460d4607
   2a278:	fa40f004 	.word	0xfa40f004
   2a27c:	28004604 	.word	0x28004604
   2a280:	07b0d067 	.word	0x07b0d067
   2a284:	6823d526 	.word	0x6823d526
   2a288:	d55e039b 	.word	0xd55e039b
   2a28c:	68232600 	.word	0x68232600
   2a290:	f4232100 	.word	0xf4232100
   2a294:	60233300 	.word	0x60233300
   2a298:	f8d5a801 	.word	0xf8d5a801
   2a29c:	f0058000 	.word	0xf0058000
   2a2a0:	b9f8febd 	.word	0xb9f8febd
   2a2a4:	9b012504 	.word	0x9b012504
   2a2a8:	0103f247 	.word	0x0103f247
   2a2ac:	800cf8c3 	.word	0x800cf8c3
   2a2b0:	72987258 	.word	0x72987258
   2a2b4:	721d72d8 	.word	0x721d72d8
   2a2b8:	f0054618 	.word	0xf0054618
   2a2bc:	4680fec7 	.word	0x4680fec7
   2a2c0:	b9cebb40 	.word	0xb9cebb40
   2a2c4:	68234628 	.word	0x68234628
   2a2c8:	3300f443 	.word	0x3300f443
   2a2cc:	b0026023 	.word	0xb0026023
   2a2d0:	81f0e8bd 	.word	0x81f0e8bd
   2a2d4:	00d96823 	.word	0x00d96823
   2a2d8:	6823d4d5 	.word	0x6823d4d5
   2a2dc:	d536039a 	.word	0xd536039a
   2a2e0:	e7d42601 	.word	0xe7d42601
   2a2e4:	6823200c 	.word	0x6823200c
   2a2e8:	3300f443 	.word	0x3300f443
   2a2ec:	f7f86023 	.word	0xf7f86023
   2a2f0:	f04ffb0d 	.word	0xf04ffb0d
   2a2f4:	e7ea30ff 	.word	0xe7ea30ff
   2a2f8:	3280f44f 	.word	0x3280f44f
   2a2fc:	33fff04f 	.word	0x33fff04f
   2a300:	46384611 	.word	0x46384611
   2a304:	f98ef004 	.word	0xf98ef004
   2a308:	6823b198 	.word	0x6823b198
   2a30c:	3300f443 	.word	0x3300f443
   2a310:	e7ec6023 	.word	0xe7ec6023
   2a314:	f0059801 	.word	0xf0059801
   2a318:	6823feaf 	.word	0x6823feaf
   2a31c:	f4432005 	.word	0xf4432005
   2a320:	60233300 	.word	0x60233300
   2a324:	2016e7e3 	.word	0x2016e7e3
   2a328:	faf0f7f8 	.word	0xfaf0f7f8
   2a32c:	30fff04f 	.word	0x30fff04f
   2a330:	4638e7cd 	.word	0x4638e7cd
   2a334:	f9e2f004 	.word	0xf9e2f004
   2a338:	28004603 	.word	0x28004603
   2a33c:	6840d0c2 	.word	0x6840d0c2
   2a340:	d0bf2800 	.word	0xd0bf2800
   2a344:	8004f8c3 	.word	0x8004f8c3
   2a348:	2073e7df 	.word	0x2073e7df
   2a34c:	2009e7cf 	.word	0x2009e7cf
   2a350:	2009e7cd 	.word	0x2009e7cd
   2a354:	fadaf7f8 	.word	0xfadaf7f8
   2a358:	30fff04f 	.word	0x30fff04f
   2a35c:	bf00e7b7 	.word	0xbf00e7b7

0002a360 <logobj_interface_setopt>:
   2a360:	2901b5f0 	.word	0x2901b5f0
   2a364:	d068b085 	.word	0xd068b085
   2a368:	f240461e 	.word	0xf240461e
   2a36c:	42992305 	.word	0x42992305
   2a370:	8095f040 	.word	0x8095f040
   2a374:	46154607 	.word	0x46154607
   2a378:	f9c0f004 	.word	0xf9c0f004
   2a37c:	28004604 	.word	0x28004604
   2a380:	80b2f000 	.word	0x80b2f000
   2a384:	d0192d01 	.word	0xd0192d01
   2a388:	d0102d02 	.word	0xd0102d02
   2a38c:	6803252a 	.word	0x6803252a
   2a390:	0380f423 	.word	0x0380f423
   2a394:	68236023 	.word	0x68236023
   2a398:	f4234628 	.word	0xf4234628
   2a39c:	60230300 	.word	0x60230300
   2a3a0:	fab4f7f8 	.word	0xfab4f7f8
   2a3a4:	35fff04f 	.word	0x35fff04f
   2a3a8:	b0054628 	.word	0xb0054628
   2a3ac:	b116bdf0 	.word	0xb116bdf0
   2a3b0:	2b019b0a 	.word	0x2b019b0a
   2a3b4:	6823d049 	.word	0x6823d049
   2a3b8:	e7e92516 	.word	0xe7e92516
   2a3bc:	d0fa2e00 	.word	0xd0fa2e00
   2a3c0:	2b049b0a 	.word	0x2b049b0a
   2a3c4:	2100d1f7 	.word	0x2100d1f7
   2a3c8:	f005a803 	.word	0xf005a803
   2a3cc:	4605fe27 	.word	0x4605fe27
   2a3d0:	d16a2800 	.word	0xd16a2800
   2a3d4:	22089803 	.word	0x22089803
   2a3d8:	300c4629 	.word	0x300c4629
   2a3dc:	fce0f016 	.word	0xfce0f016
   2a3e0:	46319803 	.word	0x46319803
   2a3e4:	300c9a0a 	.word	0x300c9a0a
   2a3e8:	fcbaf016 	.word	0xfcbaf016
   2a3ec:	98032308 	.word	0x98032308
   2a3f0:	0102f247 	.word	0x0102f247
   2a3f4:	72457203 	.word	0x72457203
   2a3f8:	72c57285 	.word	0x72c57285
   2a3fc:	f4436823 	.word	0xf4436823
   2a400:	60230380 	.word	0x60230380
   2a404:	fe22f005 	.word	0xfe22f005
   2a408:	d1512800 	.word	0xd1512800
   2a40c:	0200f44f 	.word	0x0200f44f
   2a410:	33fff04f 	.word	0x33fff04f
   2a414:	46384611 	.word	0x46384611
   2a418:	f904f004 	.word	0xf904f004
   2a41c:	28004605 	.word	0x28004605
   2a420:	4638d13b 	.word	0x4638d13b
   2a424:	f96af004 	.word	0xf96af004
   2a428:	d04f2800 	.word	0xd04f2800
   2a42c:	2b006843 	.word	0x2b006843
   2a430:	2200d04c 	.word	0x2200d04c
   2a434:	6042461d 	.word	0x6042461d
   2a438:	9c0ae02f 	.word	0x9c0ae02f
   2a43c:	f0049400 	.word	0xf0049400
   2a440:	4605f985 	.word	0x4605f985
   2a444:	b0054628 	.word	0xb0054628
   2a448:	2100bdf0 	.word	0x2100bdf0
   2a44c:	7835a803 	.word	0x7835a803
   2a450:	fde4f005 	.word	0xfde4f005
   2a454:	2d01bb48 	.word	0x2d01bb48
   2a458:	4b26bf08 	.word	0x4b26bf08
   2a45c:	0204f04f 	.word	0x0204f04f
   2a460:	701dbf08 	.word	0x701dbf08
   2a464:	98032300 	.word	0x98032300
   2a468:	0101f247 	.word	0x0101f247
   2a46c:	60c57243 	.word	0x60c57243
   2a470:	72c37283 	.word	0x72c37283
   2a474:	68237202 	.word	0x68237202
   2a478:	0380f443 	.word	0x0380f443
   2a47c:	f0056023 	.word	0xf0056023
   2a480:	4606fde5 	.word	0x4606fde5
   2a484:	f44fb9a0 	.word	0xf44fb9a0
   2a488:	f04f0200 	.word	0xf04f0200
   2a48c:	461133ff 	.word	0x461133ff
   2a490:	f0044638 	.word	0xf0044638
   2a494:	4605f8c7 	.word	0x4605f8c7
   2a498:	6823b180 	.word	0x6823b180
   2a49c:	202ae778 	.word	0x202ae778
   2a4a0:	fa34f7f8 	.word	0xfa34f7f8
   2a4a4:	35fff04f 	.word	0x35fff04f
   2a4a8:	6823e77e 	.word	0x6823e77e
   2a4ac:	e76f250c 	.word	0xe76f250c
   2a4b0:	f0059803 	.word	0xf0059803
   2a4b4:	2505fde1 	.word	0x2505fde1
   2a4b8:	e7696823 	.word	0xe7696823
   2a4bc:	f0044638 	.word	0xf0044638
   2a4c0:	b140f91d 	.word	0xb140f91d
   2a4c4:	b1356845 	.word	0xb1356845
   2a4c8:	e7e66046 	.word	0xe7e66046
   2a4cc:	22044631 	.word	0x22044631
   2a4d0:	f0164809 	.word	0xf0164809
   2a4d4:	6823fc45 	.word	0x6823fc45
   2a4d8:	0380f423 	.word	0x0380f423
   2a4dc:	68236023 	.word	0x68236023
   2a4e0:	0300f423 	.word	0x0300f423
   2a4e4:	e75f6023 	.word	0xe75f6023
   2a4e8:	f7f82009 	.word	0xf7f82009
   2a4ec:	f04ffa0f 	.word	0xf04ffa0f
   2a4f0:	e75935ff 	.word	0xe75935ff
   2a4f4:	2002be61 	.word	0x2002be61
   2a4f8:	200249d0 	.word	0x200249d0

0002a4fc <logobj_interface_getopt>:
   2a4fc:	2901b5f0 	.word	0x2901b5f0
   2a500:	9e08b083 	.word	0x9e08b083
   2a504:	461fd030 	.word	0x461fd030
   2a508:	2305f240 	.word	0x2305f240
   2a50c:	d1344299 	.word	0xd1344299
   2a510:	f0044615 	.word	0xf0044615
   2a514:	2800f8f3 	.word	0x2800f8f3
   2a518:	2d01d037 	.word	0x2d01d037
   2a51c:	2d02d015 	.word	0x2d02d015
   2a520:	b387d10b 	.word	0xb387d10b
   2a524:	b3736833 	.word	0xb3736833
   2a528:	22012300 	.word	0x22012300
   2a52c:	491a4618 	.word	0x491a4618
   2a530:	70397809 	.word	0x70397809
   2a534:	b0036032 	.word	0xb0036032
   2a538:	2009bdf0 	.word	0x2009bdf0
   2a53c:	f9e6f7f8 	.word	0xf9e6f7f8
   2a540:	33fff04f 	.word	0x33fff04f
   2a544:	b0034618 	.word	0xb0034618
   2a548:	b1e7bdf0 	.word	0xb1e7bdf0
   2a54c:	2b036833 	.word	0x2b036833
   2a550:	4638d919 	.word	0x4638d919
   2a554:	49112204 	.word	0x49112204
   2a558:	fc02f016 	.word	0xfc02f016
   2a55c:	22042300 	.word	0x22042300
   2a560:	60324618 	.word	0x60324618
   2a564:	bdf0b003 	.word	0xbdf0b003
   2a568:	f0049600 	.word	0xf0049600
   2a56c:	4603f925 	.word	0x4603f925
   2a570:	d1e32800 	.word	0xd1e32800
   2a574:	b0034618 	.word	0xb0034618
   2a578:	202abdf0 	.word	0x202abdf0
   2a57c:	f9c6f7f8 	.word	0xf9c6f7f8
   2a580:	33fff04f 	.word	0x33fff04f
   2a584:	2016e7de 	.word	0x2016e7de
   2a588:	2009e7d8 	.word	0x2009e7d8
   2a58c:	f9bef7f8 	.word	0xf9bef7f8
   2a590:	33fff04f 	.word	0x33fff04f
   2a594:	bf00e7d6 	.word	0xbf00e7d6
   2a598:	2002be62 	.word	0x2002be62
   2a59c:	200249d0 	.word	0x200249d0

0002a5a0 <logobj_interface_close>:
   2a5a0:	4604b510 	.word	0x4604b510
   2a5a4:	f8aaf004 	.word	0xf8aaf004
   2a5a8:	4620b138 	.word	0x4620b138
   2a5ac:	ffecf003 	.word	0xffecf003
   2a5b0:	4a052300 	.word	0x4a052300
   2a5b4:	60134618 	.word	0x60134618
   2a5b8:	2009bd10 	.word	0x2009bd10
   2a5bc:	f9a6f7f8 	.word	0xf9a6f7f8
   2a5c0:	30fff04f 	.word	0x30fff04f
   2a5c4:	bf00bd10 	.word	0xbf00bd10
   2a5c8:	200249d4 	.word	0x200249d4

0002a5cc <transport_reset>:
   2a5cc:	47702000 	.word	0x47702000

0002a5d0 <transport_data_free>:
   2a5d0:	e9d34b0b 	.word	0xe9d34b0b
   2a5d4:	44132300 	.word	0x44132300
   2a5d8:	d20d4298 	.word	0xd20d4298
   2a5dc:	d80b4282 	.word	0xd80b4282
   2a5e0:	4604b510 	.word	0x4604b510
   2a5e4:	fff6f005 	.word	0xfff6f005
   2a5e8:	4a06b140 	.word	0x4a06b140
   2a5ec:	60026084 	.word	0x60026084
   2a5f0:	4010e8bd 	.word	0x4010e8bd
   2a5f4:	bf36f005 	.word	0xbf36f005
   2a5f8:	bb4cf00b 	.word	0xbb4cf00b
   2a5fc:	bf00bd10 	.word	0xbf00bd10
   2a600:	200249d8 	.word	0x200249d8
   2a604:	00020001 	.word	0x00020001

0002a608 <rpc_transport_ipc_init>:
   2a608:	d02b2800 	.word	0xd02b2800
   2a60c:	b089b530 	.word	0xb089b530
   2a610:	4669aa01 	.word	0x4669aa01
   2a614:	f0054604 	.word	0xf0054604
   2a618:	4603fe3b 	.word	0x4603fe3b
   2a61c:	4a13b140 	.word	0x4a13b140
   2a620:	0028f104 	.word	0x0028f104
   2a624:	e882c803 	.word	0xe882c803
   2a628:	46180003 	.word	0x46180003
   2a62c:	bd30b009 	.word	0xbd30b009
   2a630:	1200e9dd 	.word	0x1200e9dd
   2a634:	f0004620 	.word	0xf0004620
   2a638:	4603f9f1 	.word	0x4603f9f1
   2a63c:	d1ee2800 	.word	0xd1ee2800
   2a640:	490c4b0b 	.word	0x490c4b0b
   2a644:	4a0d480c 	.word	0x4a0d480c
   2a648:	4d0d9303 	.word	0x4d0d9303
   2a64c:	91044b0d 	.word	0x91044b0d
   2a650:	490d9005 	.word	0x490d9005
   2a654:	9307a802 	.word	0x9307a802
   2a658:	92029506 	.word	0x92029506
   2a65c:	fb98f00a 	.word	0xfb98f00a
   2a660:	e7dc4603 	.word	0xe7dc4603
   2a664:	4618230e 	.word	0x4618230e
   2a668:	bf004770 	.word	0xbf004770
   2a66c:	200249d8 	.word	0x200249d8
   2a670:	00030565 	.word	0x00030565
   2a674:	00030635 	.word	0x00030635
   2a678:	0002b039 	.word	0x0002b039
   2a67c:	00030465 	.word	0x00030465
   2a680:	0002a5d1 	.word	0x0002a5d1
   2a684:	0002a5cd 	.word	0x0002a5cd
   2a688:	200249e0 	.word	0x200249e0

0002a68c <rpc_transport_rx_handle>:
   2a68c:	b508b160 	.word	0xb508b160
   2a690:	b2db6843 	.word	0xb2db6843
   2a694:	d00e2b02 	.word	0xd00e2b02
   2a698:	0c1b6803 	.word	0x0c1b6803
   2a69c:	d0052b02 	.word	0xd0052b02
   2a6a0:	d00e2b04 	.word	0xd00e2b04
   2a6a4:	bd082000 	.word	0xbd082000
   2a6a8:	47702000 	.word	0x47702000
   2a6ac:	f00b6880 	.word	0xf00b6880
   2a6b0:	2000faf1 	.word	0x2000faf1
   2a6b4:	4601bd08 	.word	0x4601bd08
   2a6b8:	4008e8bd 	.word	0x4008e8bd
   2a6bc:	f00a4803 	.word	0xf00a4803
   2a6c0:	4802ba59 	.word	0x4802ba59
   2a6c4:	fbc4f00a 	.word	0xfbc4f00a
   2a6c8:	bd082000 	.word	0xbd082000
   2a6cc:	200249e0 	.word	0x200249e0
   2a6d0:	bf004770 	.word	0xbf004770

0002a6d4 <rpc_transport_ipc_fault_handler>:
   2a6d4:	b94ef000 	.word	0xb94ef000

0002a6d8 <rpc_transport_ipc_shutdown>:
   2a6d8:	f005b508 	.word	0xf005b508
   2a6dc:	f000ffb5 	.word	0xf000ffb5
   2a6e0:	f005fce1 	.word	0xf005fce1
   2a6e4:	e8bdffb7 	.word	0xe8bdffb7
   2a6e8:	f0004008 	.word	0xf0004008
   2a6ec:	bf00bcfb 	.word	0xbf00bcfb

0002a6f0 <nrf_socket>:
   2a6f0:	4604b570 	.word	0x4604b570
   2a6f4:	4616460d 	.word	0x4616460d
   2a6f8:	fa02f007 	.word	0xfa02f007
   2a6fc:	6803b130 	.word	0x6803b130
   2a700:	46294632 	.word	0x46294632
   2a704:	e8bd4620 	.word	0xe8bd4620
   2a708:	47184070 	.word	0x47184070
   2a70c:	30fff04f 	.word	0x30fff04f
   2a710:	bf00bd70 	.word	0xbf00bd70

0002a714 <nrf_close>:
   2a714:	4604b510 	.word	0x4604b510
   2a718:	fa46f007 	.word	0xfa46f007
   2a71c:	6843b120 	.word	0x6843b120
   2a720:	e8bd4620 	.word	0xe8bd4620
   2a724:	47184010 	.word	0x47184010
   2a728:	30fff04f 	.word	0x30fff04f
   2a72c:	bf00bd10 	.word	0xbf00bd10

0002a730 <nrf_sendto>:
   2a730:	47f0e92d 	.word	0x47f0e92d
   2a734:	e9dd460d 	.word	0xe9dd460d
   2a738:	46168908 	.word	0x46168908
   2a73c:	4604461f 	.word	0x4604461f
   2a740:	fa32f007 	.word	0xfa32f007
   2a744:	e9cdb158 	.word	0xe9cdb158
   2a748:	f8d08908 	.word	0xf8d08908
   2a74c:	463be008 	.word	0x463be008
   2a750:	46294632 	.word	0x46294632
   2a754:	46f44620 	.word	0x46f44620
   2a758:	47f0e8bd 	.word	0x47f0e8bd
   2a75c:	f04f4760 	.word	0xf04f4760
   2a760:	e8bd30ff 	.word	0xe8bd30ff
   2a764:	bf0087f0 	.word	0xbf0087f0

0002a768 <nrf_send>:
   2a768:	41f0e92d 	.word	0x41f0e92d
   2a76c:	460eb082 	.word	0x460eb082
   2a770:	46984617 	.word	0x46984617
   2a774:	f0074605 	.word	0xf0074605
   2a778:	b160fa17 	.word	0xb160fa17
   2a77c:	20004604 	.word	0x20004604
   2a780:	0000e9cd 	.word	0x0000e9cd
   2a784:	463a4643 	.word	0x463a4643
   2a788:	46284631 	.word	0x46284631
   2a78c:	47a068a4 	.word	0x47a068a4
   2a790:	e8bdb002 	.word	0xe8bdb002
   2a794:	f04f81f0 	.word	0xf04f81f0
   2a798:	e7f930ff 	.word	0xe7f930ff

0002a79c <nrf_write>:
   2a79c:	b083b5f0 	.word	0xb083b5f0
   2a7a0:	4617460e 	.word	0x4617460e
   2a7a4:	f0074605 	.word	0xf0074605
   2a7a8:	b150f9ff 	.word	0xb150f9ff
   2a7ac:	46042300 	.word	0x46042300
   2a7b0:	3300e9cd 	.word	0x3300e9cd
   2a7b4:	4631463a 	.word	0x4631463a
   2a7b8:	68a44628 	.word	0x68a44628
   2a7bc:	b00347a0 	.word	0xb00347a0
   2a7c0:	f04fbdf0 	.word	0xf04fbdf0
   2a7c4:	e7fa30ff 	.word	0xe7fa30ff

0002a7c8 <nrf_recvfrom>:
   2a7c8:	47f0e92d 	.word	0x47f0e92d
   2a7cc:	e9dd460d 	.word	0xe9dd460d
   2a7d0:	46168908 	.word	0x46168908
   2a7d4:	4604461f 	.word	0x4604461f
   2a7d8:	f9e6f007 	.word	0xf9e6f007
   2a7dc:	e9cdb158 	.word	0xe9cdb158
   2a7e0:	f8d08908 	.word	0xf8d08908
   2a7e4:	463be00c 	.word	0x463be00c
   2a7e8:	46294632 	.word	0x46294632
   2a7ec:	46f44620 	.word	0x46f44620
   2a7f0:	47f0e8bd 	.word	0x47f0e8bd
   2a7f4:	f04f4760 	.word	0xf04f4760
   2a7f8:	e8bd30ff 	.word	0xe8bd30ff
   2a7fc:	bf0087f0 	.word	0xbf0087f0

0002a800 <nrf_recv>:
   2a800:	41f0e92d 	.word	0x41f0e92d
   2a804:	460eb082 	.word	0x460eb082
   2a808:	46984617 	.word	0x46984617
   2a80c:	f0074605 	.word	0xf0074605
   2a810:	b160f9cb 	.word	0xb160f9cb
   2a814:	20004604 	.word	0x20004604
   2a818:	0000e9cd 	.word	0x0000e9cd
   2a81c:	463a4643 	.word	0x463a4643
   2a820:	46284631 	.word	0x46284631
   2a824:	47a068e4 	.word	0x47a068e4
   2a828:	e8bdb002 	.word	0xe8bdb002
   2a82c:	f04f81f0 	.word	0xf04f81f0
   2a830:	e7f930ff 	.word	0xe7f930ff

0002a834 <nrf_read>:
   2a834:	b083b5f0 	.word	0xb083b5f0
   2a838:	4617460e 	.word	0x4617460e
   2a83c:	f0074605 	.word	0xf0074605
   2a840:	b150f9b3 	.word	0xb150f9b3
   2a844:	46042300 	.word	0x46042300
   2a848:	3300e9cd 	.word	0x3300e9cd
   2a84c:	4631463a 	.word	0x4631463a
   2a850:	68e44628 	.word	0x68e44628
   2a854:	b00347a0 	.word	0xb00347a0
   2a858:	f04fbdf0 	.word	0xf04fbdf0
   2a85c:	e7fa30ff 	.word	0xe7fa30ff

0002a860 <nrf_connect>:
   2a860:	460db570 	.word	0x460db570
   2a864:	46044616 	.word	0x46044616
   2a868:	f99ef007 	.word	0xf99ef007
   2a86c:	6943b130 	.word	0x6943b130
   2a870:	46294632 	.word	0x46294632
   2a874:	e8bd4620 	.word	0xe8bd4620
   2a878:	47184070 	.word	0x47184070
   2a87c:	30fff04f 	.word	0x30fff04f
   2a880:	bf00bd70 	.word	0xbf00bd70

0002a884 <nrf_listen>:
   2a884:	460db570 	.word	0x460db570
   2a888:	f0074604 	.word	0xf0074604
   2a88c:	b128f98d 	.word	0xb128f98d
   2a890:	46296983 	.word	0x46296983
   2a894:	e8bd4620 	.word	0xe8bd4620
   2a898:	47184070 	.word	0x47184070
   2a89c:	30fff04f 	.word	0x30fff04f
   2a8a0:	bf00bd70 	.word	0xbf00bd70

0002a8a4 <nrf_accept>:
   2a8a4:	41f0e92d 	.word	0x41f0e92d
   2a8a8:	4616460d 	.word	0x4616460d
   2a8ac:	f0074604 	.word	0xf0074604
   2a8b0:	b140f97b 	.word	0xb140f97b
   2a8b4:	463269c7 	.word	0x463269c7
   2a8b8:	46204629 	.word	0x46204629
   2a8bc:	e8bd46bc 	.word	0xe8bd46bc
   2a8c0:	230041f0 	.word	0x230041f0
   2a8c4:	f04f4760 	.word	0xf04f4760
   2a8c8:	e8bd30ff 	.word	0xe8bd30ff
   2a8cc:	bf0081f0 	.word	0xbf0081f0

0002a8d0 <nrf_bind>:
   2a8d0:	460db570 	.word	0x460db570
   2a8d4:	46044616 	.word	0x46044616
   2a8d8:	f966f007 	.word	0xf966f007
   2a8dc:	6903b130 	.word	0x6903b130
   2a8e0:	46294632 	.word	0x46294632
   2a8e4:	e8bd4620 	.word	0xe8bd4620
   2a8e8:	47184070 	.word	0x47184070
   2a8ec:	30fff04f 	.word	0x30fff04f
   2a8f0:	bf00bd70 	.word	0xbf00bd70

0002a8f4 <nrf_setsockopt>:
   2a8f4:	41f0e92d 	.word	0x41f0e92d
   2a8f8:	8018f8dd 	.word	0x8018f8dd
   2a8fc:	4616460d 	.word	0x4616460d
   2a900:	4604461f 	.word	0x4604461f
   2a904:	f950f007 	.word	0xf950f007
   2a908:	f8cdb158 	.word	0xf8cdb158
   2a90c:	f8d08018 	.word	0xf8d08018
   2a910:	463be020 	.word	0x463be020
   2a914:	46294632 	.word	0x46294632
   2a918:	46f44620 	.word	0x46f44620
   2a91c:	41f0e8bd 	.word	0x41f0e8bd
   2a920:	f04f4760 	.word	0xf04f4760
   2a924:	e8bd30ff 	.word	0xe8bd30ff
   2a928:	bf0081f0 	.word	0xbf0081f0

0002a92c <nrf_getsockopt>:
   2a92c:	41f0e92d 	.word	0x41f0e92d
   2a930:	8018f8dd 	.word	0x8018f8dd
   2a934:	4616460d 	.word	0x4616460d
   2a938:	4604461f 	.word	0x4604461f
   2a93c:	f934f007 	.word	0xf934f007
   2a940:	f8cdb158 	.word	0xf8cdb158
   2a944:	f8d08018 	.word	0xf8d08018
   2a948:	463be024 	.word	0x463be024
   2a94c:	46294632 	.word	0x46294632
   2a950:	46f44620 	.word	0x46f44620
   2a954:	41f0e8bd 	.word	0x41f0e8bd
   2a958:	f04f4760 	.word	0xf04f4760
   2a95c:	e8bd30ff 	.word	0xe8bd30ff
   2a960:	bf0081f0 	.word	0xbf0081f0

0002a964 <nrf_getaddrinfo>:
   2a964:	ba1ef00d 	.word	0xba1ef00d

0002a968 <nrf_freeaddrinfo>:
   2a968:	ba1ef00d 	.word	0xba1ef00d

0002a96c <nrf_poll>:
   2a96c:	ba1ef00d 	.word	0xba1ef00d

0002a970 <nrf_fcntl>:
   2a970:	ba76f00d 	.word	0xba76f00d

0002a974 <bsd_platform_error_handler>:
   2a974:	f013b508 	.word	0xf013b508
   2a978:	bd08fb9b 	.word	0xbd08fb9b

0002a97c <bsd_init>:
   2a97c:	4c06b510 	.word	0x4c06b510
   2a980:	b92b7823 	.word	0xb92b7823
   2a984:	f844f007 	.word	0xf844f007
   2a988:	2301b908 	.word	0x2301b908
   2a98c:	bd107023 	.word	0xbd107023
   2a990:	30fff04f 	.word	0x30fff04f
   2a994:	bf00bd10 	.word	0xbf00bd10
   2a998:	2002be63 	.word	0x2002be63

0002a99c <bsd_shutdown>:
   2a99c:	4c05b510 	.word	0x4c05b510
   2a9a0:	b1237823 	.word	0xb1237823
   2a9a4:	f8a0f007 	.word	0xf8a0f007
   2a9a8:	7020b900 	.word	0x7020b900
   2a9ac:	f04fbd10 	.word	0xf04fbd10
   2a9b0:	bd1030ff 	.word	0xbd1030ff
   2a9b4:	2002be63 	.word	0x2002be63

0002a9b8 <symbol_000fa2a>:
   2a9b8:	2300b110 	.word	0x2300b110
   2a9bc:	3300e9c0 	.word	0x3300e9c0
   2a9c0:	bf004770 	.word	0xbf004770

0002a9c4 <symbol_00066b4>:
   2a9c4:	d0052802 	.word	0xd0052802
   2a9c8:	28034b03 	.word	0x28034b03
   2a9cc:	4618bf0c 	.word	0x4618bf0c
   2a9d0:	47702000 	.word	0x47702000
   2a9d4:	47704801 	.word	0x47704801
   2a9d8:	00042ec4 	.word	0x00042ec4
   2a9dc:	00042e94 	.word	0x00042e94

0002a9e0 <symbol_000194a>:
   2a9e0:	b159b160 	.word	0xb159b160
   2a9e4:	6806b570 	.word	0x6806b570
   2a9e8:	6a4bb966 	.word	0x6a4bb966
   2a9ec:	460d4604 	.word	0x460d4604
   2a9f0:	60604798 	.word	0x60604798
   2a9f4:	6025b120 	.word	0x6025b120
   2a9f8:	bd704630 	.word	0xbd704630
   2a9fc:	47704802 	.word	0x47704802
   2aa00:	bd704802 	.word	0xbd704802
   2aa04:	bd704800 	.word	0xbd704800
   2aa08:	ffffc180 	.word	0xffffc180
   2aa0c:	ffffc080 	.word	0xffffc080

0002aa10 <symbol_00005ae>:
   2aa10:	6800b110 	.word	0x6800b110
   2aa14:	7800b100 	.word	0x7800b100
   2aa18:	bf004770 	.word	0xbf004770

0002aa1c <rpc_transport_ipc_rx_init>:
   2aa1c:	f0002800 	.word	0xf0002800
   2aa20:	e92d80ff 	.word	0xe92d80ff
   2aa24:	68054ff0 	.word	0x68054ff0
   2aa28:	2d00b095 	.word	0x2d00b095
   2aa2c:	80eef000 	.word	0x80eef000
   2aa30:	2b006883 	.word	0x2b006883
   2aa34:	80eaf000 	.word	0x80eaf000
   2aa38:	2f006907 	.word	0x2f006907
   2aa3c:	80e6f000 	.word	0x80e6f000
   2aa40:	2c006a84 	.word	0x2c006a84
   2aa44:	80e2f000 	.word	0x80e2f000
   2aa48:	2c1b6844 	.word	0x2c1b6844
   2aa4c:	80e3f240 	.word	0x80e3f240
   2aa50:	2c0b68c4 	.word	0x2c0b68c4
   2aa54:	80dff240 	.word	0x80dff240
   2aa58:	e014f8d0 	.word	0xe014f8d0
   2aa5c:	0f17f1be 	.word	0x0f17f1be
   2aa60:	80d9f240 	.word	0x80d9f240
   2aa64:	46042600 	.word	0x46042600
   2aa68:	e9cd486f 	.word	0xe9cd486f
   2aa6c:	f8df1200 	.word	0xf8df1200
   2aa70:	496ea1d8 	.word	0x496ea1d8
   2aa74:	6ba08006 	.word	0x6ba08006
   2aa78:	c1d0f8df 	.word	0xc1d0f8df
   2aa7c:	81d0f8df 	.word	0x81d0f8df
   2aa80:	b1d0f8df 	.word	0xb1d0f8df
   2aa84:	91d0f8df 	.word	0x91d0f8df
   2aa88:	600e4672 	.word	0x600e4672
   2aa8c:	0000f8ca 	.word	0x0000f8ca
   2aa90:	46384631 	.word	0x46384631
   2aa94:	6000f8cc 	.word	0x6000f8cc
   2aa98:	3000f8cb 	.word	0x3000f8cb
   2aa9c:	6000f8c8 	.word	0x6000f8c8
   2aaa0:	6000f8c9 	.word	0x6000f8c9
   2aaa4:	f97cf016 	.word	0xf97cf016
   2aaa8:	463869e3 	.word	0x463869e3
   2aaac:	69a3603b 	.word	0x69a3603b
   2aab0:	f001607b 	.word	0xf001607b
   2aab4:	2201fddb 	.word	0x2201fddb
   2aab8:	0c04f04f 	.word	0x0c04f04f
   2aabc:	495d4b5c 	.word	0x495d4b5c
   2aac0:	5610f8c3 	.word	0x5610f8c3
   2aac4:	20806809 	.word	0x20806809
   2aac8:	495b9104 	.word	0x495b9104
   2aacc:	e010f8dd 	.word	0xe010f8dd
   2aad0:	6614f8c3 	.word	0x6614f8c3
   2aad4:	702e6809 	.word	0x702e6809
   2aad8:	706e9103 	.word	0x706e9103
   2aadc:	70aa70ee 	.word	0x70aa70ee
   2aae0:	6aa19903 	.word	0x6aa19903
   2aae4:	e000f8db 	.word	0xe000f8db
   2aae8:	6ae16069 	.word	0x6ae16069
   2aaec:	60a99c01 	.word	0x60a99c01
   2aaf0:	9c0060ec 	.word	0x9c0060ec
   2aaf4:	61af4951 	.word	0x61af4951
   2aaf8:	e014f8c5 	.word	0xe014f8c5
   2aafc:	f8c3612c 	.word	0xf8c3612c
   2ab00:	680c2590 	.word	0x680c2590
   2ab04:	6192f5a1 	.word	0x6192f5a1
   2ab08:	9c059405 	.word	0x9c059405
   2ab0c:	c598f8c3 	.word	0xc598f8c3
   2ab10:	4498f8d1 	.word	0x4498f8d1
   2ab14:	6780f44f 	.word	0x6780f44f
   2ab18:	9c069406 	.word	0x9c069406
   2ab1c:	f8c32410 	.word	0xf8c32410
   2ab20:	f8d145a0 	.word	0xf8d145a0
   2ab24:	4d4644a0 	.word	0x4d4644a0
   2ab28:	9c079407 	.word	0x9c079407
   2ab2c:	f8c32440 	.word	0xf8c32440
   2ab30:	f8d145a8 	.word	0xf8d145a8
   2ab34:	940844a8 	.word	0x940844a8
   2ab38:	f8c39c08 	.word	0xf8c39c08
   2ab3c:	f8d105ac 	.word	0xf8d105ac
   2ab40:	900904ac 	.word	0x900904ac
   2ab44:	f8c39809 	.word	0xf8c39809
   2ab48:	68086100 	.word	0x68086100
   2ab4c:	980a900a 	.word	0x980a900a
   2ab50:	6108f8c3 	.word	0x6108f8c3
   2ab54:	900b6888 	.word	0x900b6888
   2ab58:	f8c3980b 	.word	0xf8c3980b
   2ab5c:	69086110 	.word	0x69086110
   2ab60:	980c900c 	.word	0x980c900c
   2ab64:	6118f8c3 	.word	0x6118f8c3
   2ab68:	900d6988 	.word	0x900d6988
   2ab6c:	f8c3980d 	.word	0xf8c3980d
   2ab70:	69c8611c 	.word	0x69c8611c
   2ab74:	7101f501 	.word	0x7101f501
   2ab78:	980e900e 	.word	0x980e900e
   2ab7c:	0304f8d3 	.word	0x0304f8d3
   2ab80:	f8c34310 	.word	0xf8c34310
   2ab84:	680c0304 	.word	0x680c0304
   2ab88:	940f482e 	.word	0x940f482e
   2ab8c:	f8d39c0f 	.word	0xf8d39c0f
   2ab90:	ea444304 	.word	0xea444304
   2ab94:	f8c3040c 	.word	0xf8c3040c
   2ab98:	680c4304 	.word	0x680c4304
   2ab9c:	9c109410 	.word	0x9c109410
   2aba0:	4304f8d3 	.word	0x4304f8d3
   2aba4:	0410f044 	.word	0x0410f044
   2aba8:	4304f8c3 	.word	0x4304f8c3
   2abac:	9411680c 	.word	0x9411680c
   2abb0:	f8d39c11 	.word	0xf8d39c11
   2abb4:	f0444304 	.word	0xf0444304
   2abb8:	f8c30440 	.word	0xf8c30440
   2abbc:	680c4304 	.word	0x680c4304
   2abc0:	9c129412 	.word	0x9c129412
   2abc4:	4304f8d3 	.word	0x4304f8d3
   2abc8:	0480f044 	.word	0x0480f044
   2abcc:	4304f8c3 	.word	0x4304f8c3
   2abd0:	3000f8da 	.word	0x3000f8da
   2abd4:	015b6809 	.word	0x015b6809
   2abd8:	b2db9113 	.word	0xb2db9113
   2abdc:	f8c89913 	.word	0xf8c89913
   2abe0:	f8802000 	.word	0xf8802000
   2abe4:	f8c0332a 	.word	0xf8c0332a
   2abe8:	60477184 	.word	0x60477184
   2abec:	f8c59602 	.word	0xf8c59602
   2abf0:	f8d56610 	.word	0xf8d56610
   2abf4:	93023610 	.word	0x93023610
   2abf8:	f8d89b02 	.word	0xf8d89b02
   2abfc:	2b013000 	.word	0x2b013000
   2ac00:	f8d9d0fb 	.word	0xf8d9d0fb
   2ac04:	b0150000 	.word	0xb0150000
   2ac08:	8ff0e8bd 	.word	0x8ff0e8bd
   2ac0c:	000ef24c 	.word	0x000ef24c
   2ac10:	e8bdb015 	.word	0xe8bdb015
   2ac14:	f24c8ff0 	.word	0xf24c8ff0
   2ac18:	b0150009 	.word	0xb0150009
   2ac1c:	8ff0e8bd 	.word	0x8ff0e8bd
   2ac20:	000ef24c 	.word	0x000ef24c
   2ac24:	bf004770 	.word	0xbf004770
   2ac28:	2002a33e 	.word	0x2002a33e
   2ac2c:	200249f0 	.word	0x200249f0
   2ac30:	4002a000 	.word	0x4002a000
   2ac34:	4002a610 	.word	0x4002a610
   2ac38:	4002a614 	.word	0x4002a614
   2ac3c:	4002a590 	.word	0x4002a590
   2ac40:	40005000 	.word	0x40005000
   2ac44:	e000e100 	.word	0xe000e100
   2ac48:	200249e8 	.word	0x200249e8
   2ac4c:	200249f4 	.word	0x200249f4
   2ac50:	200249ec 	.word	0x200249ec
   2ac54:	200249f8 	.word	0x200249f8
   2ac58:	200249e4 	.word	0x200249e4

0002ac5c <IPC_IRQHandler>:
   2ac5c:	4ff0e92d 	.word	0x4ff0e92d
   2ac60:	6580f44f 	.word	0x6580f44f
   2ac64:	b0874ca7 	.word	0xb0874ca7
   2ac68:	5084f8c4 	.word	0x5084f8c4
   2ac6c:	8f4ff3bf 	.word	0x8f4ff3bf
   2ac70:	8f6ff3bf 	.word	0x8f6ff3bf
   2ac74:	f8c44ea4 	.word	0xf8c44ea4
   2ac78:	f8d65184 	.word	0xf8d65184
   2ac7c:	061f330c 	.word	0x061f330c
   2ac80:	80c8f100 	.word	0x80c8f100
   2ac84:	f8d34ba0 	.word	0xf8d34ba0
   2ac88:	07d0230c 	.word	0x07d0230c
   2ac8c:	80d4f100 	.word	0x80d4f100
   2ac90:	230cf8d3 	.word	0x230cf8d3
   2ac94:	0240f012 	.word	0x0240f012
   2ac98:	80b6f040 	.word	0x80b6f040
   2ac9c:	130cf8d3 	.word	0x130cf8d3
   2aca0:	f1000749 	.word	0xf1000749
   2aca4:	f8d380e6 	.word	0xf8d380e6
   2aca8:	06da330c 	.word	0x06da330c
   2acac:	809df140 	.word	0x809df140
   2acb0:	4a952100 	.word	0x4a952100
   2acb4:	f8c24b95 	.word	0xf8c24b95
   2acb8:	681b1110 	.word	0x681b1110
   2acbc:	9b049304 	.word	0x9b049304
   2acc0:	8270f8df 	.word	0x8270f8df
   2acc4:	f8df4f92 	.word	0xf8df4f92
   2acc8:	f8d89270 	.word	0xf8d89270
   2accc:	f8daa000 	.word	0xf8daa000
   2acd0:	29001000 	.word	0x29001000
   2acd4:	2200d03f 	.word	0x2200d03f
   2acd8:	e0024614 	.word	0xe0024614
   2acdc:	428c3401 	.word	0x428c3401
   2ace0:	eb0ad227 	.word	0xeb0ad227
   2ace4:	68ab05c4 	.word	0x68ab05c4
   2ace8:	d0f72b00 	.word	0xd0f72b00
   2acec:	b2f6686e 	.word	0xb2f6686e
   2acf0:	d1f32e01 	.word	0xd1f32e01
   2acf4:	f8b96868 	.word	0xf8b96868
   2acf8:	ebb33000 	.word	0xebb33000
   2acfc:	d1ed4f10 	.word	0xd1ed4f10
   2ad00:	3301686a 	.word	0x3301686a
   2ad04:	02fff022 	.word	0x02fff022
   2ad08:	0202f042 	.word	0x0202f042
   2ad0c:	68a8606a 	.word	0x68a8606a
   2ad10:	3000f8a9 	.word	0x3000f8a9
   2ad14:	fcbaf7ff 	.word	0xfcbaf7ff
   2ad18:	b9284632 	.word	0xb9284632
   2ad1c:	f023686b 	.word	0xf023686b
   2ad20:	f04303ff 	.word	0xf04303ff
   2ad24:	606b0303 	.word	0x606b0303
   2ad28:	1000f8da 	.word	0x1000f8da
   2ad2c:	428c3401 	.word	0x428c3401
   2ad30:	2a00d3d7 	.word	0x2a00d3d7
   2ad34:	b171d1cd 	.word	0xb171d1cd
   2ad38:	eb0a4613 	.word	0xeb0a4613
   2ad3c:	689002c3 	.word	0x689002c3
   2ad40:	b1303301 	.word	0xb1303301
   2ad44:	b004f8d2 	.word	0xb004f8d2
   2ad48:	fb8bfa5f 	.word	0xfb8bfa5f
   2ad4c:	0f01f1bb 	.word	0x0f01f1bb
   2ad50:	428bd003 	.word	0x428bd003
   2ad54:	f04fd1f1 	.word	0xf04fd1f1
   2ad58:	f8d70b00 	.word	0xf8d70b00
   2ad5c:	f8daa000 	.word	0xf8daa000
   2ad60:	2a002000 	.word	0x2a002000
   2ad64:	2100d03d 	.word	0x2100d03d
   2ad68:	e002460c 	.word	0xe002460c
   2ad6c:	42943401 	.word	0x42943401
   2ad70:	eb0ad227 	.word	0xeb0ad227
   2ad74:	68ab05c4 	.word	0x68ab05c4
   2ad78:	d0f72b00 	.word	0xd0f72b00
   2ad7c:	b2f6686e 	.word	0xb2f6686e
   2ad80:	d1f32e01 	.word	0xd1f32e01
   2ad84:	f8b96868 	.word	0xf8b96868
   2ad88:	ebb33000 	.word	0xebb33000
   2ad8c:	d1ed4f10 	.word	0xd1ed4f10
   2ad90:	3301686a 	.word	0x3301686a
   2ad94:	02fff022 	.word	0x02fff022
   2ad98:	0202f042 	.word	0x0202f042
   2ad9c:	68a8606a 	.word	0x68a8606a
   2ada0:	3000f8a9 	.word	0x3000f8a9
   2ada4:	fc72f7ff 	.word	0xfc72f7ff
   2ada8:	b9284631 	.word	0xb9284631
   2adac:	f022686a 	.word	0xf022686a
   2adb0:	f04303ff 	.word	0xf04303ff
   2adb4:	606b0303 	.word	0x606b0303
   2adb8:	2000f8da 	.word	0x2000f8da
   2adbc:	42943401 	.word	0x42943401
   2adc0:	2900d3d7 	.word	0x2900d3d7
   2adc4:	b162d1cd 	.word	0xb162d1cd
   2adc8:	eb0a460b 	.word	0xeb0a460b
   2adcc:	688801c3 	.word	0x688801c3
   2add0:	b1203301 	.word	0xb1203301
   2add4:	b2c96849 	.word	0xb2c96849
   2add8:	f43f2901 	.word	0xf43f2901
   2addc:	4293af76 	.word	0x4293af76
   2ade0:	f1bbd1f3 	.word	0xf1bbd1f3
   2ade4:	f47f0f00 	.word	0xf47f0f00
   2ade8:	f44faf70 	.word	0xf44faf70
   2adec:	4b496180 	.word	0x4b496180
   2adf0:	681b4a44 	.word	0x681b4a44
   2adf4:	b2db015b 	.word	0xb2db015b
   2adf8:	332af882 	.word	0x332af882
   2adfc:	1184f8c2 	.word	0x1184f8c2
   2ae00:	b0076051 	.word	0xb0076051
   2ae04:	8ff0e8bd 	.word	0x8ff0e8bd
   2ae08:	4b432206 	.word	0x4b432206
   2ae0c:	b007601a 	.word	0xb007601a
   2ae10:	8ff0e8bd 	.word	0x8ff0e8bd
   2ae14:	fd12f001 	.word	0xfd12f001
   2ae18:	fe7ef001 	.word	0xfe7ef001
   2ae1c:	d1492800 	.word	0xd1492800
   2ae20:	f8c64b3e 	.word	0xf8c64b3e
   2ae24:	681b011c 	.word	0x681b011c
   2ae28:	9b019301 	.word	0x9b019301
   2ae2c:	f8d34b36 	.word	0xf8d34b36
   2ae30:	07d0230c 	.word	0x07d0230c
   2ae34:	af2cf57f 	.word	0xaf2cf57f
   2ae38:	f2482000 	.word	0xf2482000
   2ae3c:	49380202 	.word	0x49380202
   2ae40:	0100f8c3 	.word	0x0100f8c3
   2ae44:	91026809 	.word	0x91026809
   2ae48:	f8d39902 	.word	0xf8d39902
   2ae4c:	42933614 	.word	0x42933614
   2ae50:	d81ed040 	.word	0xd81ed040
   2ae54:	d04f2b00 	.word	0xd04f2b00
   2ae58:	d9422b02 	.word	0xd9422b02
   2ae5c:	0201f248 	.word	0x0201f248
   2ae60:	d1494293 	.word	0xd1494293
   2ae64:	22072003 	.word	0x22072003
   2ae68:	4b2e492b 	.word	0x4b2e492b
   2ae6c:	601a6008 	.word	0x601a6008
   2ae70:	4d29e7cd 	.word	0x4d29e7cd
   2ae74:	f8c36829 	.word	0xf8c36829
   2ae78:	29012108 	.word	0x29012108
   2ae7c:	d05d492a 	.word	0xd05d492a
   2ae80:	9203680a 	.word	0x9203680a
   2ae84:	f8d39a03 	.word	0xf8d39a03
   2ae88:	06db330c 	.word	0x06db330c
   2ae8c:	af10f53f 	.word	0xaf10f53f
   2ae90:	4a26e716 	.word	0x4a26e716
   2ae94:	d8144293 	.word	0xd8144293
   2ae98:	6f88f1b3 	.word	0x6f88f1b3
   2ae9c:	f248d814 	.word	0xf248d814
   2aea0:	42930203 	.word	0x42930203
   2aea4:	2003d128 	.word	0x2003d128
   2aea8:	491b2204 	.word	0x491b2204
   2aeac:	60084b1d 	.word	0x60084b1d
   2aeb0:	e7ac601a 	.word	0xe7ac601a
   2aeb4:	f88423e0 	.word	0xf88423e0
   2aeb8:	6065332a 	.word	0x6065332a
   2aebc:	e8bdb007 	.word	0xe8bdb007
   2aec0:	4a1b8ff0 	.word	0x4a1b8ff0
   2aec4:	d1174293 	.word	0xd1174293
   2aec8:	49132003 	.word	0x49132003
   2aecc:	60084a15 	.word	0x60084a15
   2aed0:	e79c6013 	.word	0xe79c6013
   2aed4:	22062003 	.word	0x22062003
   2aed8:	4b12490f 	.word	0x4b12490f
   2aedc:	601a6008 	.word	0x601a6008
   2aee0:	2303e795 	.word	0x2303e795
   2aee4:	490c4618 	.word	0x490c4618
   2aee8:	600b4a0e 	.word	0x600b4a0e
   2aeec:	b0076013 	.word	0xb0076013
   2aef0:	4ff0e8bd 	.word	0x4ff0e8bd
   2aef4:	bbeef7ff 	.word	0xbbeef7ff
   2aef8:	49072303 	.word	0x49072303
   2aefc:	600b4a09 	.word	0x600b4a09
   2af00:	e7846013 	.word	0xe7846013
   2af04:	e000e100 	.word	0xe000e100
   2af08:	4002a000 	.word	0x4002a000
   2af0c:	4002a110 	.word	0x4002a110
   2af10:	200249f0 	.word	0x200249f0
   2af14:	200249e8 	.word	0x200249e8
   2af18:	200249ec 	.word	0x200249ec
   2af1c:	4002a11c 	.word	0x4002a11c
   2af20:	4002a100 	.word	0x4002a100
   2af24:	200249e4 	.word	0x200249e4
   2af28:	4002a108 	.word	0x4002a108
   2af2c:	04400004 	.word	0x04400004
   2af30:	05500001 	.word	0x05500001
   2af34:	200249f4 	.word	0x200249f4
   2af38:	2002a33e 	.word	0x2002a33e
   2af3c:	680b4a37 	.word	0x680b4a37
   2af40:	93056812 	.word	0x93056812
   2af44:	48366893 	.word	0x48366893
   2af48:	60034936 	.word	0x60034936
   2af4c:	9a056854 	.word	0x9a056854
   2af50:	b16b600c 	.word	0xb16b600c
   2af54:	681bb164 	.word	0x681bb164
   2af58:	d8022b10 	.word	0xd8022b10
   2af5c:	2a106822 	.word	0x2a106822
   2af60:	2103d90c 	.word	0x2103d90c
   2af64:	0206f24c 	.word	0x0206f24c
   2af68:	60294b2f 	.word	0x60294b2f
   2af6c:	e74e601a 	.word	0xe74e601a
   2af70:	22102103 	.word	0x22102103
   2af74:	60294b2c 	.word	0x60294b2c
   2af78:	e748601a 	.word	0xe748601a
   2af7c:	80b4f8df 	.word	0x80b4f8df
   2af80:	d0422a00 	.word	0xd0422a00
   2af84:	f1042300 	.word	0xf1042300
   2af88:	461e0904 	.word	0x461e0904
   2af8c:	3601e002 	.word	0x3601e002
   2af90:	d22a4296 	.word	0xd22a4296
   2af94:	19e100f7 	.word	0x19e100f7
   2af98:	28006888 	.word	0x28006888
   2af9c:	f8d1d0f7 	.word	0xf8d1d0f7
   2afa0:	fa5fa004 	.word	0xfa5fa004
   2afa4:	f1bafa8a 	.word	0xf1bafa8a
   2afa8:	d1f00f01 	.word	0xd1f00f01
   2afac:	c004f8d1 	.word	0xc004f8d1
   2afb0:	0000f8b8 	.word	0x0000f8b8
   2afb4:	4f1cebb0 	.word	0x4f1cebb0
   2afb8:	684bd1e9 	.word	0x684bd1e9
   2afbc:	f0231c42 	.word	0xf0231c42
   2afc0:	f04303ff 	.word	0xf04303ff
   2afc4:	604b0302 	.word	0x604b0302
   2afc8:	f8a86888 	.word	0xf8a86888
   2afcc:	f7ff2000 	.word	0xf7ff2000
   2afd0:	4653fb5d 	.word	0x4653fb5d
   2afd4:	f859b938 	.word	0xf859b938
   2afd8:	f0222007 	.word	0xf0222007
   2afdc:	f04202ff 	.word	0xf04202ff
   2afe0:	f8490203 	.word	0xf8490203
   2afe4:	68222007 	.word	0x68222007
   2afe8:	2b00e7d1 	.word	0x2b00e7d1
   2afec:	b912d1c8 	.word	0xb912d1c8
   2aff0:	4293e00b 	.word	0x4293e00b
   2aff4:	eb04d009 	.word	0xeb04d009
   2aff8:	688801c3 	.word	0x688801c3
   2affc:	28003301 	.word	0x28003301
   2b000:	6849d0f7 	.word	0x6849d0f7
   2b004:	2901b2c9 	.word	0x2901b2c9
   2b008:	2002d1f3 	.word	0x2002d1f3
   2b00c:	f44f4b07 	.word	0xf44f4b07
   2b010:	4a076180 	.word	0x4a076180
   2b014:	6028681b 	.word	0x6028681b
   2b018:	bf00e6ec 	.word	0xbf00e6ec
   2b01c:	200249f8 	.word	0x200249f8
   2b020:	200249f4 	.word	0x200249f4
   2b024:	200249f0 	.word	0x200249f0
   2b028:	200249e4 	.word	0x200249e4
   2b02c:	200249e8 	.word	0x200249e8
   2b030:	e000e100 	.word	0xe000e100
   2b034:	2002a33e 	.word	0x2002a33e

0002b038 <rpc_transport_msg_free>:
   2b038:	4b18b430 	.word	0x4b18b430
   2b03c:	6825681c 	.word	0x6825681c
   2b040:	68a3b16d 	.word	0x68a3b16d
   2b044:	d0274283 	.word	0xd0274283
   2b048:	e0022300 	.word	0xe0022300
   2b04c:	42816889 	.word	0x42816889
   2b050:	3301d019 	.word	0x3301d019
   2b054:	42ab00da 	.word	0x42ab00da
   2b058:	0102eb04 	.word	0x0102eb04
   2b05c:	4b10d1f6 	.word	0x4b10d1f6
   2b060:	6825681c 	.word	0x6825681c
   2b064:	68a3b16d 	.word	0x68a3b16d
   2b068:	d0154283 	.word	0xd0154283
   2b06c:	e0022300 	.word	0xe0022300
   2b070:	42816889 	.word	0x42816889
   2b074:	3301d007 	.word	0x3301d007
   2b078:	429d00da 	.word	0x429d00da
   2b07c:	0102eb04 	.word	0x0102eb04
   2b080:	bc30d1f6 	.word	0xbc30d1f6
   2b084:	32044770 	.word	0x32044770
   2b088:	f02358a3 	.word	0xf02358a3
   2b08c:	f04303ff 	.word	0xf04303ff
   2b090:	50a30303 	.word	0x50a30303
   2b094:	4770bc30 	.word	0x4770bc30
   2b098:	e7f52204 	.word	0xe7f52204
   2b09c:	200249f4 	.word	0x200249f4
   2b0a0:	200249f0 	.word	0x200249f0

0002b0a4 <rpc_transport_ipc_rx_suspend>:
   2b0a4:	2400b410 	.word	0x2400b410
   2b0a8:	22042010 	.word	0x22042010
   2b0ac:	490b4b0a 	.word	0x490b4b0a
   2b0b0:	45a0f8c3 	.word	0x45a0f8c3
   2b0b4:	b083680c 	.word	0xb083680c
   2b0b8:	9c019401 	.word	0x9c019401
   2b0bc:	7126f5a1 	.word	0x7126f5a1
   2b0c0:	0308f8c3 	.word	0x0308f8c3
   2b0c4:	4b066809 	.word	0x4b066809
   2b0c8:	99009100 	.word	0x99009100
   2b0cc:	b003601a 	.word	0xb003601a
   2b0d0:	4b04f85d 	.word	0x4b04f85d
   2b0d4:	bf004770 	.word	0xbf004770
   2b0d8:	4002a000 	.word	0x4002a000
   2b0dc:	4002a5a0 	.word	0x4002a5a0
   2b0e0:	200249ec 	.word	0x200249ec

0002b0e4 <rpc_transport_ipc_rx_shutdown>:
   2b0e4:	4a32b4f0 	.word	0x4a32b4f0
   2b0e8:	6813b08c 	.word	0x6813b08c
   2b0ec:	d1fc2b06 	.word	0xd1fc2b06
   2b0f0:	22012000 	.word	0x22012000
   2b0f4:	4b2f210a 	.word	0x4b2f210a
   2b0f8:	f8c39000 	.word	0xf8c39000
   2b0fc:	f8d32610 	.word	0xf8d32610
   2b100:	90000610 	.word	0x90000610
   2b104:	f8c39800 	.word	0xf8c39800
   2b108:	91012614 	.word	0x91012614
   2b10c:	b12b9b01 	.word	0xb12b9b01
   2b110:	3b019b01 	.word	0x3b019b01
   2b114:	9b019301 	.word	0x9b019301
   2b118:	d1f92b00 	.word	0xd1f92b00
   2b11c:	26012200 	.word	0x26012200
   2b120:	24102504 	.word	0x24102504
   2b124:	4b244923 	.word	0x4b244923
   2b128:	2614f8c1 	.word	0x2614f8c1
   2b12c:	3115f501 	.word	0x3115f501
   2b130:	2590f8c3 	.word	0x2590f8c3
   2b134:	71c8f501 	.word	0x71c8f501
   2b138:	20406809 	.word	0x20406809
   2b13c:	491f9102 	.word	0x491f9102
   2b140:	f8c39f02 	.word	0xf8c39f02
   2b144:	680f2598 	.word	0x680f2598
   2b148:	97032180 	.word	0x97032180
   2b14c:	f8dd4f1c 	.word	0xf8dd4f1c
   2b150:	f8c3c00c 	.word	0xf8c3c00c
   2b154:	683f25a0 	.word	0x683f25a0
   2b158:	4f1a9704 	.word	0x4f1a9704
   2b15c:	c010f8dd 	.word	0xc010f8dd
   2b160:	25a8f8c3 	.word	0x25a8f8c3
   2b164:	9705683f 	.word	0x9705683f
   2b168:	f8c39f05 	.word	0xf8c39f05
   2b16c:	4a1625ac 	.word	0x4a1625ac
   2b170:	92066812 	.word	0x92066812
   2b174:	9f064a15 	.word	0x9f064a15
   2b178:	6308f8c3 	.word	0x6308f8c3
   2b17c:	96076816 	.word	0x96076816
   2b180:	f8c39e07 	.word	0xf8c39e07
   2b184:	68155308 	.word	0x68155308
   2b188:	9d089508 	.word	0x9d089508
   2b18c:	4308f8c3 	.word	0x4308f8c3
   2b190:	94096814 	.word	0x94096814
   2b194:	f8c39c09 	.word	0xf8c39c09
   2b198:	68100308 	.word	0x68100308
   2b19c:	980a900a 	.word	0x980a900a
   2b1a0:	1308f8c3 	.word	0x1308f8c3
   2b1a4:	930b6813 	.word	0x930b6813
   2b1a8:	b00c9b0b 	.word	0xb00c9b0b
   2b1ac:	4770bcf0 	.word	0x4770bcf0
   2b1b0:	200249ec 	.word	0x200249ec
   2b1b4:	40005000 	.word	0x40005000
   2b1b8:	4002a000 	.word	0x4002a000
   2b1bc:	4002a598 	.word	0x4002a598
   2b1c0:	4002a5a0 	.word	0x4002a5a0
   2b1c4:	4002a5a8 	.word	0x4002a5a8
   2b1c8:	4002a5ac 	.word	0x4002a5ac
   2b1cc:	4002a308 	.word	0x4002a308

0002b1d0 <block_cipher_df>:
   2b1d0:	4ff0e92d 	.word	0x4ff0e92d
   2b1d4:	7fc0f5b2 	.word	0x7fc0f5b2
   2b1d8:	7d49f5ad 	.word	0x7d49f5ad
   2b1dc:	8119f200 	.word	0x8119f200
   2b1e0:	460c4692 	.word	0x460c4692
   2b1e4:	72d0f44f 	.word	0x72d0f44f
   2b1e8:	46812100 	.word	0x46812100
   2b1ec:	f015a860 	.word	0xf015a860
   2b1f0:	a81afdd7 	.word	0xa81afdd7
   2b1f4:	fd5af00a 	.word	0xfd5af00a
   2b1f8:	23302000 	.word	0x23302000
   2b1fc:	ea4fad66 	.word	0xea4fad66
   2b200:	f8ad221a 	.word	0xf8ad221a
   2b204:	f88d0190 	.word	0xf88d0190
   2b208:	46212192 	.word	0x46212192
   2b20c:	46284652 	.word	0x46284652
   2b210:	3197f88d 	.word	0x3197f88d
   2b214:	a193f88d 	.word	0xa193f88d
   2b218:	f015ae06 	.word	0xf015ae06
   2b21c:	2280fda1 	.word	0x2280fda1
   2b220:	f8054633 	.word	0xf8054633
   2b224:	af0e200a 	.word	0xaf0e200a
   2b228:	f8031b99 	.word	0xf8031b99
   2b22c:	429f1b01 	.word	0x429f1b01
   2b230:	f44fd1fa 	.word	0xf44fd1fa
   2b234:	46317280 	.word	0x46317280
   2b238:	f00aa81a 	.word	0xf00aa81a
   2b23c:	4683fd43 	.word	0x4683fd43
   2b240:	f0402800 	.word	0xf0402800
   2b244:	900180c8 	.word	0x900180c8
   2b248:	0a19f10a 	.word	0x0a19f10a
   2b24c:	2210ac02 	.word	0x2210ac02
   2b250:	46202100 	.word	0x46202100
   2b254:	fda4f015 	.word	0xfda4f015
   2b258:	ad6446d0 	.word	0xad6446d0
   2b25c:	f8157822 	.word	0xf8157822
   2b260:	f8943c10 	.word	0xf8943c10
   2b264:	f815c001 	.word	0xf815c001
   2b268:	78a01c0f 	.word	0x78a01c0f
   2b26c:	f8154053 	.word	0xf8154053
   2b270:	ea8c2c0e 	.word	0xea8c2c0e
   2b274:	40500c01 	.word	0x40500c01
   2b278:	f81578e1 	.word	0xf81578e1
   2b27c:	f8942c0d 	.word	0xf8942c0d
   2b280:	4051e004 	.word	0x4051e004
   2b284:	2c0cf815 	.word	0x2c0cf815
   2b288:	ea8e7023 	.word	0xea8e7023
   2b28c:	f8150202 	.word	0xf8150202
   2b290:	f8943c0b 	.word	0xf8943c0b
   2b294:	f884e005 	.word	0xf884e005
   2b298:	ea8ec001 	.word	0xea8ec001
   2b29c:	f8150303 	.word	0xf8150303
   2b2a0:	f894cc0a 	.word	0xf894cc0a
   2b2a4:	70a0e006 	.word	0x70a0e006
   2b2a8:	0c0cea8e 	.word	0x0c0cea8e
   2b2ac:	0c09f815 	.word	0x0c09f815
   2b2b0:	e007f894 	.word	0xe007f894
   2b2b4:	ea8e70e1 	.word	0xea8e70e1
   2b2b8:	f8150000 	.word	0xf8150000
   2b2bc:	f8941c08 	.word	0xf8941c08
   2b2c0:	7122e008 	.word	0x7122e008
   2b2c4:	0101ea8e 	.word	0x0101ea8e
   2b2c8:	2c07f815 	.word	0x2c07f815
   2b2cc:	e009f894 	.word	0xe009f894
   2b2d0:	ea8e7163 	.word	0xea8e7163
   2b2d4:	7aa30202 	.word	0x7aa30202
   2b2d8:	ec06f815 	.word	0xec06f815
   2b2dc:	c006f884 	.word	0xc006f884
   2b2e0:	030eea83 	.word	0x030eea83
   2b2e4:	722171e0 	.word	0x722171e0
   2b2e8:	72a37262 	.word	0x72a37262
   2b2ec:	f8157ae1 	.word	0xf8157ae1
   2b2f0:	f8943c05 	.word	0xf8943c05
   2b2f4:	7b60c00c 	.word	0x7b60c00c
   2b2f8:	f815404b 	.word	0xf815404b
   2b2fc:	f8152c04 	.word	0xf8152c04
   2b300:	ea8c1c03 	.word	0xea8c1c03
   2b304:	40410202 	.word	0x40410202
   2b308:	c00ef894 	.word	0xc00ef894
   2b30c:	0c02f815 	.word	0x0c02f815
   2b310:	e00ff894 	.word	0xe00ff894
   2b314:	0000ea8c 	.word	0x0000ea8c
   2b318:	cc01f815 	.word	0xcc01f815
   2b31c:	ea8e72e3 	.word	0xea8e72e3
   2b320:	73220c0c 	.word	0x73220c0c
   2b324:	73a07361 	.word	0x73a07361
   2b328:	46224623 	.word	0x46224623
   2b32c:	a81a2101 	.word	0xa81a2101
   2b330:	c00ff884 	.word	0xc00ff884
   2b334:	fc44f00b 	.word	0xfc44f00b
   2b338:	0f10f1b8 	.word	0x0f10f1b8
   2b33c:	bf944683 	.word	0xbf944683
   2b340:	0808eba8 	.word	0x0808eba8
   2b344:	0810f1a8 	.word	0x0810f1a8
   2b348:	d1452800 	.word	0xd1452800
   2b34c:	f1b83510 	.word	0xf1b83510
   2b350:	d1830f00 	.word	0xd1830f00
   2b354:	22109d01 	.word	0x22109d01
   2b358:	19784621 	.word	0x19784621
   2b35c:	fd00f015 	.word	0xfd00f015
   2b360:	3183f89d 	.word	0x3183f89d
   2b364:	0210f105 	.word	0x0210f105
   2b368:	2a303301 	.word	0x2a303301
   2b36c:	f88d9201 	.word	0xf88d9201
   2b370:	f47f3183 	.word	0xf47f3183
   2b374:	f44faf6c 	.word	0xf44faf6c
   2b378:	46397280 	.word	0x46397280
   2b37c:	f00aa81a 	.word	0xf00aa81a
   2b380:	4683fca1 	.word	0x4683fca1
   2b384:	464dbb40 	.word	0x464dbb40
   2b388:	0830f109 	.word	0x0830f109
   2b38c:	461aab16 	.word	0x461aab16
   2b390:	a81a2101 	.word	0xa81a2101
   2b394:	fc14f00b 	.word	0xfc14f00b
   2b398:	b9e84683 	.word	0xb9e84683
   2b39c:	46282210 	.word	0x46282210
   2b3a0:	4415a916 	.word	0x4415a916
   2b3a4:	fcdcf015 	.word	0xfcdcf015
   2b3a8:	d1ef4545 	.word	0xd1ef4545
   2b3ac:	f00aa81a 	.word	0xf00aa81a
   2b3b0:	a860fc83 	.word	0xa860fc83
   2b3b4:	71d0f44f 	.word	0x71d0f44f
   2b3b8:	fcbaf006 	.word	0xfcbaf006
   2b3bc:	21304638 	.word	0x21304638
   2b3c0:	fcb6f006 	.word	0xfcb6f006
   2b3c4:	21204630 	.word	0x21204630
   2b3c8:	fcb2f006 	.word	0xfcb2f006
   2b3cc:	21104620 	.word	0x21104620
   2b3d0:	fcaef006 	.word	0xfcaef006
   2b3d4:	ac02e018 	.word	0xac02e018
   2b3d8:	f00aa81a 	.word	0xf00aa81a
   2b3dc:	a860fc6d 	.word	0xa860fc6d
   2b3e0:	71d0f44f 	.word	0x71d0f44f
   2b3e4:	fca4f006 	.word	0xfca4f006
   2b3e8:	21304638 	.word	0x21304638
   2b3ec:	fca0f006 	.word	0xfca0f006
   2b3f0:	21204630 	.word	0x21204630
   2b3f4:	fc9cf006 	.word	0xfc9cf006
   2b3f8:	21104620 	.word	0x21104620
   2b3fc:	fc98f006 	.word	0xfc98f006
   2b400:	21304648 	.word	0x21304648
   2b404:	fc94f006 	.word	0xfc94f006
   2b408:	f50d4658 	.word	0xf50d4658
   2b40c:	e8bd7d49 	.word	0xe8bd7d49
   2b410:	f06f8ff0 	.word	0xf06f8ff0
   2b414:	e7f70b37 	.word	0xe7f70b37

0002b418 <symbol_000078b>:
   2b418:	72a0f44f 	.word	0x72a0f44f
   2b41c:	f0152100 	.word	0xf0152100
   2b420:	bf00bcbf 	.word	0xbf00bcbf

0002b424 <symbol_0001c64>:
   2b424:	b510b158 	.word	0xb510b158
   2b428:	30204604 	.word	0x30204604
   2b42c:	fc44f00a 	.word	0xfc44f00a
   2b430:	e8bd4620 	.word	0xe8bd4620
   2b434:	f44f4010 	.word	0xf44f4010
   2b438:	f00671a0 	.word	0xf00671a0
   2b43c:	4770bc79 	.word	0x4770bc79

0002b440 <symbol_000ccf0>:
   2b440:	6983b5f0 	.word	0x6983b5f0
   2b444:	f5b3b0ed 	.word	0xf5b3b0ed
   2b448:	f2007fc0 	.word	0xf2007fc0
   2b44c:	f5c380e1 	.word	0xf5c380e1
   2b450:	429373c0 	.word	0x429373c0
   2b454:	80dcf0c0 	.word	0x80dcf0c0
   2b458:	46154604 	.word	0x46154604
   2b45c:	f44f460e 	.word	0xf44f460e
   2b460:	210072c0 	.word	0x210072c0
   2b464:	f015a80c 	.word	0xf015a80c
   2b468:	a90cfc9b 	.word	0xa90cfc9b
   2b46c:	3138f8d4 	.word	0x3138f8d4
   2b470:	f8d469a2 	.word	0xf8d469a2
   2b474:	4798013c 	.word	0x4798013c
   2b478:	f0402800 	.word	0xf0402800
   2b47c:	69a780cc 	.word	0x69a780cc
   2b480:	b94db106 	.word	0xb94db106
   2b484:	463aa90c 	.word	0x463aa90c
   2b488:	f7ff4608 	.word	0xf7ff4608
   2b48c:	4605fea1 	.word	0x4605fea1
   2b490:	4628b188 	.word	0x4628b188
   2b494:	bdf0b06d 	.word	0xbdf0b06d
   2b498:	462aab0c 	.word	0x462aab0c
   2b49c:	463119d8 	.word	0x463119d8
   2b4a0:	fc5ef015 	.word	0xfc5ef015
   2b4a4:	a90c442f 	.word	0xa90c442f
   2b4a8:	4608463a 	.word	0x4608463a
   2b4ac:	fe90f7ff 	.word	0xfe90f7ff
   2b4b0:	28004605 	.word	0x28004605
   2b4b4:	4668d1ed 	.word	0x4668d1ed
   2b4b8:	46292230 	.word	0x46292230
   2b4bc:	fc70f015 	.word	0xfc70f015
   2b4c0:	f104462e 	.word	0xf104462e
   2b4c4:	7be20720 	.word	0x7be20720
   2b4c8:	0306eb0d 	.word	0x0306eb0d
   2b4cc:	b2d23201 	.word	0xb2d23201
   2b4d0:	2a0073e2 	.word	0x2a0073e2
   2b4d4:	7ba2d14d 	.word	0x7ba2d14d
   2b4d8:	b2d23201 	.word	0xb2d23201
   2b4dc:	2a0073a2 	.word	0x2a0073a2
   2b4e0:	7b62d147 	.word	0x7b62d147
   2b4e4:	b2d23201 	.word	0xb2d23201
   2b4e8:	2a007362 	.word	0x2a007362
   2b4ec:	7b22d141 	.word	0x7b22d141
   2b4f0:	b2d23201 	.word	0xb2d23201
   2b4f4:	2a007322 	.word	0x2a007322
   2b4f8:	7ae2d13b 	.word	0x7ae2d13b
   2b4fc:	b2d23201 	.word	0xb2d23201
   2b500:	2a0072e2 	.word	0x2a0072e2
   2b504:	7aa2d135 	.word	0x7aa2d135
   2b508:	b2d23201 	.word	0xb2d23201
   2b50c:	2a0072a2 	.word	0x2a0072a2
   2b510:	7a62d12f 	.word	0x7a62d12f
   2b514:	b2d23201 	.word	0xb2d23201
   2b518:	bb527262 	.word	0xbb527262
   2b51c:	32017a22 	.word	0x32017a22
   2b520:	7222b2d2 	.word	0x7222b2d2
   2b524:	79e2bb2a 	.word	0x79e2bb2a
   2b528:	b2d23201 	.word	0xb2d23201
   2b52c:	bb0271e2 	.word	0xbb0271e2
   2b530:	320179a2 	.word	0x320179a2
   2b534:	71a2b2d2 	.word	0x71a2b2d2
   2b538:	7962b9da 	.word	0x7962b9da
   2b53c:	b2d23201 	.word	0xb2d23201
   2b540:	b9b27162 	.word	0xb9b27162
   2b544:	32017922 	.word	0x32017922
   2b548:	7122b2d2 	.word	0x7122b2d2
   2b54c:	78e2b98a 	.word	0x78e2b98a
   2b550:	b2d23201 	.word	0xb2d23201
   2b554:	b96270e2 	.word	0xb96270e2
   2b558:	320178a2 	.word	0x320178a2
   2b55c:	70a2b2d2 	.word	0x70a2b2d2
   2b560:	7862b93a 	.word	0x7862b93a
   2b564:	b2d23201 	.word	0xb2d23201
   2b568:	b9127062 	.word	0xb9127062
   2b56c:	32017822 	.word	0x32017822
   2b570:	46227022 	.word	0x46227022
   2b574:	46382101 	.word	0x46382101
   2b578:	fb22f00b 	.word	0xfb22f00b
   2b57c:	28004605 	.word	0x28004605
   2b580:	3610d187 	.word	0x3610d187
   2b584:	d19e2e30 	.word	0xd19e2e30
   2b588:	9b0c9901 	.word	0x9b0c9901
   2b58c:	9a0d9800 	.word	0x9a0d9800
   2b590:	404a4058 	.word	0x404a4058
   2b594:	99029b0e 	.word	0x99029b0e
   2b598:	40599000 	.word	0x40599000
   2b59c:	9b0f9803 	.word	0x9b0f9803
   2b5a0:	40439201 	.word	0x40439201
   2b5a4:	98049a10 	.word	0x98049a10
   2b5a8:	40509102 	.word	0x40509102
   2b5ac:	9a119905 	.word	0x9a119905
   2b5b0:	40519303 	.word	0x40519303
   2b5b4:	9a069b12 	.word	0x9a069b12
   2b5b8:	405a9004 	.word	0x405a9004
   2b5bc:	9b139807 	.word	0x9b139807
   2b5c0:	40589105 	.word	0x40589105
   2b5c4:	9b149908 	.word	0x9b149908
   2b5c8:	40599206 	.word	0x40599206
   2b5cc:	9b159a09 	.word	0x9b159a09
   2b5d0:	405a9007 	.word	0x405a9007
   2b5d4:	9b16980a 	.word	0x9b16980a
   2b5d8:	40439108 	.word	0x40439108
   2b5dc:	2309e9cd 	.word	0x2309e9cd
   2b5e0:	9b179a0b 	.word	0x9b179a0b
   2b5e4:	40534638 	.word	0x40534638
   2b5e8:	f44f4669 	.word	0xf44f4669
   2b5ec:	930b7280 	.word	0x930b7280
   2b5f0:	fb68f00a 	.word	0xfb68f00a
   2b5f4:	28004605 	.word	0x28004605
   2b5f8:	af4bf47f 	.word	0xaf4bf47f
   2b5fc:	a9082210 	.word	0xa9082210
   2b600:	f0154620 	.word	0xf0154620
   2b604:	2301fbad 	.word	0x2301fbad
   2b608:	61234628 	.word	0x61234628
   2b60c:	bdf0b06d 	.word	0xbdf0b06d
   2b610:	0537f06f 	.word	0x0537f06f
   2b614:	f06fe73d 	.word	0xf06fe73d
   2b618:	e73a0533 	.word	0xe73a0533

0002b61c <symbol_0001e1e>:
   2b61c:	41f0e92d 	.word	0x41f0e92d
   2b620:	46164604 	.word	0x46164604
   2b624:	b0882220 	.word	0xb0882220
   2b628:	460f18a5 	.word	0x460f18a5
   2b62c:	21004668 	.word	0x21004668
   2b630:	f0154698 	.word	0xf0154698
   2b634:	4628fbb5 	.word	0x4628fbb5
   2b638:	fb38f00a 	.word	0xfb38f00a
   2b63c:	f2422220 	.word	0xf2422220
   2b640:	f8c47310 	.word	0xf8c47310
   2b644:	e9c47138 	.word	0xe9c47138
   2b648:	46282306 	.word	0x46282306
   2b64c:	613cf8c4 	.word	0x613cf8c4
   2b650:	f44f4669 	.word	0xf44f4669
   2b654:	f00a7280 	.word	0xf00a7280
   2b658:	b920fb35 	.word	0xb920fb35
   2b65c:	46204641 	.word	0x46204641
   2b660:	f7ff9a0e 	.word	0xf7ff9a0e
   2b664:	b008feed 	.word	0xb008feed
   2b668:	81f0e8bd 	.word	0x81f0e8bd

0002b66c <symbol_000268c>:
   2b66c:	4ff0e92d 	.word	0x4ff0e92d
   2b670:	6f80f5b2 	.word	0x6f80f5b2
   2b674:	f200b0f9 	.word	0xf200b0f9
   2b678:	46048226 	.word	0x46048226
   2b67c:	460f4615 	.word	0x460f4615
   2b680:	46682230 	.word	0x46682230
   2b684:	f0152100 	.word	0xf0152100
   2b688:	6922fb8b 	.word	0x6922fb8b
   2b68c:	429a69e3 	.word	0x429a69e3
   2b690:	6963dc01 	.word	0x6963dc01
   2b694:	69a3b313 	.word	0x69a3b313
   2b698:	7fc0f5b3 	.word	0x7fc0f5b3
   2b69c:	8216f200 	.word	0x8216f200
   2b6a0:	0a60f10d 	.word	0x0a60f10d
   2b6a4:	72c0f44f 	.word	0x72c0f44f
   2b6a8:	46502100 	.word	0x46502100
   2b6ac:	fb78f015 	.word	0xfb78f015
   2b6b0:	f8d44651 	.word	0xf8d44651
   2b6b4:	69a23138 	.word	0x69a23138
   2b6b8:	013cf8d4 	.word	0x013cf8d4
   2b6bc:	f06f4798 	.word	0xf06f4798
   2b6c0:	b9380933 	.word	0xb9380933
   2b6c4:	465169a2 	.word	0x465169a2
   2b6c8:	f7ff4650 	.word	0xf7ff4650
   2b6cc:	4681fd81 	.word	0x4681fd81
   2b6d0:	d0772800 	.word	0xd0772800
   2b6d4:	b0794648 	.word	0xb0794648
   2b6d8:	8ff0e8bd 	.word	0x8ff0e8bd
   2b6dc:	0820f104 	.word	0x0820f104
   2b6e0:	f0002d00 	.word	0xf0002d00
   2b6e4:	ae0c812b 	.word	0xae0c812b
   2b6e8:	2d10e00e 	.word	0x2d10e00e
   2b6ec:	bf2846a9 	.word	0xbf2846a9
   2b6f0:	0910f04f 	.word	0x0910f04f
   2b6f4:	46314638 	.word	0x46314638
   2b6f8:	f015464a 	.word	0xf015464a
   2b6fc:	ebb5fb31 	.word	0xebb5fb31
   2b700:	444f0509 	.word	0x444f0509
   2b704:	811af000 	.word	0x811af000
   2b708:	33017be3 	.word	0x33017be3
   2b70c:	73e3b2db 	.word	0x73e3b2db
   2b710:	d14d2b00 	.word	0xd14d2b00
   2b714:	33017ba3 	.word	0x33017ba3
   2b718:	73a3b2db 	.word	0x73a3b2db
   2b71c:	d1472b00 	.word	0xd1472b00
   2b720:	33017b63 	.word	0x33017b63
   2b724:	7363b2db 	.word	0x7363b2db
   2b728:	d1412b00 	.word	0xd1412b00
   2b72c:	33017b23 	.word	0x33017b23
   2b730:	7323b2db 	.word	0x7323b2db
   2b734:	d13b2b00 	.word	0xd13b2b00
   2b738:	33017ae3 	.word	0x33017ae3
   2b73c:	72e3b2db 	.word	0x72e3b2db
   2b740:	d1352b00 	.word	0xd1352b00
   2b744:	33017aa3 	.word	0x33017aa3
   2b748:	72a3b2db 	.word	0x72a3b2db
   2b74c:	d12f2b00 	.word	0xd12f2b00
   2b750:	33017a63 	.word	0x33017a63
   2b754:	7263b2db 	.word	0x7263b2db
   2b758:	7a23bb53 	.word	0x7a23bb53
   2b75c:	b2db3301 	.word	0xb2db3301
   2b760:	bb2b7223 	.word	0xbb2b7223
   2b764:	330179e3 	.word	0x330179e3
   2b768:	71e3b2db 	.word	0x71e3b2db
   2b76c:	79a3bb03 	.word	0x79a3bb03
   2b770:	b2db3301 	.word	0xb2db3301
   2b774:	b9db71a3 	.word	0xb9db71a3
   2b778:	33017963 	.word	0x33017963
   2b77c:	7163b2db 	.word	0x7163b2db
   2b780:	7923b9b3 	.word	0x7923b9b3
   2b784:	b2db3301 	.word	0xb2db3301
   2b788:	b98b7123 	.word	0xb98b7123
   2b78c:	330178e3 	.word	0x330178e3
   2b790:	70e3b2db 	.word	0x70e3b2db
   2b794:	78a3b963 	.word	0x78a3b963
   2b798:	b2db3301 	.word	0xb2db3301
   2b79c:	b93b70a3 	.word	0xb93b70a3
   2b7a0:	33017863 	.word	0x33017863
   2b7a4:	7063b2db 	.word	0x7063b2db
   2b7a8:	7823b913 	.word	0x7823b913
   2b7ac:	70233301 	.word	0x70233301
   2b7b0:	46224633 	.word	0x46224633
   2b7b4:	46402101 	.word	0x46402101
   2b7b8:	fa02f00b 	.word	0xfa02f00b
   2b7bc:	28004681 	.word	0x28004681
   2b7c0:	e787d093 	.word	0xe787d093
   2b7c4:	4630ae0c 	.word	0x4630ae0c
   2b7c8:	46492230 	.word	0x46492230
   2b7cc:	fae8f015 	.word	0xfae8f015
   2b7d0:	f10446cb 	.word	0xf10446cb
   2b7d4:	7be20820 	.word	0x7be20820
   2b7d8:	030beb06 	.word	0x030beb06
   2b7dc:	b2d23201 	.word	0xb2d23201
   2b7e0:	2a0073e2 	.word	0x2a0073e2
   2b7e4:	7ba2d14d 	.word	0x7ba2d14d
   2b7e8:	b2d23201 	.word	0xb2d23201
   2b7ec:	2a0073a2 	.word	0x2a0073a2
   2b7f0:	7b62d147 	.word	0x7b62d147
   2b7f4:	b2d23201 	.word	0xb2d23201
   2b7f8:	2a007362 	.word	0x2a007362
   2b7fc:	7b22d141 	.word	0x7b22d141
   2b800:	b2d23201 	.word	0xb2d23201
   2b804:	2a007322 	.word	0x2a007322
   2b808:	7ae2d13b 	.word	0x7ae2d13b
   2b80c:	b2d23201 	.word	0xb2d23201
   2b810:	2a0072e2 	.word	0x2a0072e2
   2b814:	7aa2d135 	.word	0x7aa2d135
   2b818:	b2d23201 	.word	0xb2d23201
   2b81c:	2a0072a2 	.word	0x2a0072a2
   2b820:	7a62d12f 	.word	0x7a62d12f
   2b824:	b2d23201 	.word	0xb2d23201
   2b828:	bb527262 	.word	0xbb527262
   2b82c:	32017a22 	.word	0x32017a22
   2b830:	7222b2d2 	.word	0x7222b2d2
   2b834:	79e2bb2a 	.word	0x79e2bb2a
   2b838:	b2d23201 	.word	0xb2d23201
   2b83c:	bb0271e2 	.word	0xbb0271e2
   2b840:	320179a2 	.word	0x320179a2
   2b844:	71a2b2d2 	.word	0x71a2b2d2
   2b848:	7962b9da 	.word	0x7962b9da
   2b84c:	b2d23201 	.word	0xb2d23201
   2b850:	b9b27162 	.word	0xb9b27162
   2b854:	32017922 	.word	0x32017922
   2b858:	7122b2d2 	.word	0x7122b2d2
   2b85c:	78e2b98a 	.word	0x78e2b98a
   2b860:	b2d23201 	.word	0xb2d23201
   2b864:	b96270e2 	.word	0xb96270e2
   2b868:	320178a2 	.word	0x320178a2
   2b86c:	70a2b2d2 	.word	0x70a2b2d2
   2b870:	7862b93a 	.word	0x7862b93a
   2b874:	b2d23201 	.word	0xb2d23201
   2b878:	b9127062 	.word	0xb9127062
   2b87c:	32017822 	.word	0x32017822
   2b880:	46227022 	.word	0x46227022
   2b884:	46402101 	.word	0x46402101
   2b888:	f99af00b 	.word	0xf99af00b
   2b88c:	28004681 	.word	0x28004681
   2b890:	af20f47f 	.word	0xaf20f47f
   2b894:	0b10f10b 	.word	0x0b10f10b
   2b898:	0f30f1bb 	.word	0x0f30f1bb
   2b89c:	6870d19b 	.word	0x6870d19b
   2b8a0:	3000f8da 	.word	0x3000f8da
   2b8a4:	f8da6831 	.word	0xf8da6831
   2b8a8:	40592004 	.word	0x40592004
   2b8ac:	f8da4042 	.word	0xf8da4042
   2b8b0:	68b03008 	.word	0x68b03008
   2b8b4:	ea836031 	.word	0xea836031
   2b8b8:	f8da0100 	.word	0xf8da0100
   2b8bc:	68f0300c 	.word	0x68f0300c
   2b8c0:	40586072 	.word	0x40586072
   2b8c4:	f8da6932 	.word	0xf8da6932
   2b8c8:	60b13010 	.word	0x60b13010
   2b8cc:	f8da4053 	.word	0xf8da4053
   2b8d0:	69721014 	.word	0x69721014
   2b8d4:	404a60f0 	.word	0x404a60f0
   2b8d8:	f8da69b0 	.word	0xf8da69b0
   2b8dc:	61331018 	.word	0x61331018
   2b8e0:	f8da4048 	.word	0xf8da4048
   2b8e4:	69f1301c 	.word	0x69f1301c
   2b8e8:	404b6172 	.word	0x404b6172
   2b8ec:	f8da6a32 	.word	0xf8da6a32
   2b8f0:	61b01020 	.word	0x61b01020
   2b8f4:	6a704051 	.word	0x6a704051
   2b8f8:	2024f8da 	.word	0x2024f8da
   2b8fc:	405061f3 	.word	0x405061f3
   2b900:	3028f8da 	.word	0x3028f8da
   2b904:	62316ab2 	.word	0x62316ab2
   2b908:	e9c64053 	.word	0xe9c64053
   2b90c:	6af20309 	.word	0x6af20309
   2b910:	302cf8da 	.word	0x302cf8da
   2b914:	40534631 	.word	0x40534631
   2b918:	f44f4640 	.word	0xf44f4640
   2b91c:	62f37280 	.word	0x62f37280
   2b920:	f9d0f00a 	.word	0xf9d0f00a
   2b924:	28004681 	.word	0x28004681
   2b928:	aed4f47f 	.word	0xaed4f47f
   2b92c:	a9142210 	.word	0xa9142210
   2b930:	f0154620 	.word	0xf0154620
   2b934:	2301fa15 	.word	0x2301fa15
   2b938:	e6d16123 	.word	0xe6d16123
   2b93c:	0a60f10d 	.word	0x0a60f10d
   2b940:	22304650 	.word	0x22304650
   2b944:	f0152100 	.word	0xf0152100
   2b948:	2500fa2b 	.word	0x2500fa2b
   2b94c:	eb0a7be2 	.word	0xeb0a7be2
   2b950:	32010305 	.word	0x32010305
   2b954:	73e2b2d2 	.word	0x73e2b2d2
   2b958:	d14d2a00 	.word	0xd14d2a00
   2b95c:	32017ba2 	.word	0x32017ba2
   2b960:	73a2b2d2 	.word	0x73a2b2d2
   2b964:	d1472a00 	.word	0xd1472a00
   2b968:	32017b62 	.word	0x32017b62
   2b96c:	7362b2d2 	.word	0x7362b2d2
   2b970:	d1412a00 	.word	0xd1412a00
   2b974:	32017b22 	.word	0x32017b22
   2b978:	7322b2d2 	.word	0x7322b2d2
   2b97c:	d13b2a00 	.word	0xd13b2a00
   2b980:	32017ae2 	.word	0x32017ae2
   2b984:	72e2b2d2 	.word	0x72e2b2d2
   2b988:	d1352a00 	.word	0xd1352a00
   2b98c:	32017aa2 	.word	0x32017aa2
   2b990:	72a2b2d2 	.word	0x72a2b2d2
   2b994:	d12f2a00 	.word	0xd12f2a00
   2b998:	32017a62 	.word	0x32017a62
   2b99c:	7262b2d2 	.word	0x7262b2d2
   2b9a0:	7a22bb52 	.word	0x7a22bb52
   2b9a4:	b2d23201 	.word	0xb2d23201
   2b9a8:	bb2a7222 	.word	0xbb2a7222
   2b9ac:	320179e2 	.word	0x320179e2
   2b9b0:	71e2b2d2 	.word	0x71e2b2d2
   2b9b4:	79a2bb02 	.word	0x79a2bb02
   2b9b8:	b2d23201 	.word	0xb2d23201
   2b9bc:	b9da71a2 	.word	0xb9da71a2
   2b9c0:	32017962 	.word	0x32017962
   2b9c4:	7162b2d2 	.word	0x7162b2d2
   2b9c8:	7922b9b2 	.word	0x7922b9b2
   2b9cc:	b2d23201 	.word	0xb2d23201
   2b9d0:	b98a7122 	.word	0xb98a7122
   2b9d4:	320178e2 	.word	0x320178e2
   2b9d8:	70e2b2d2 	.word	0x70e2b2d2
   2b9dc:	78a2b962 	.word	0x78a2b962
   2b9e0:	b2d23201 	.word	0xb2d23201
   2b9e4:	b93a70a2 	.word	0xb93a70a2
   2b9e8:	32017862 	.word	0x32017862
   2b9ec:	7062b2d2 	.word	0x7062b2d2
   2b9f0:	7822b912 	.word	0x7822b912
   2b9f4:	70223201 	.word	0x70223201
   2b9f8:	21014622 	.word	0x21014622
   2b9fc:	f00b4640 	.word	0xf00b4640
   2ba00:	4681f8df 	.word	0x4681f8df
   2ba04:	f47f2800 	.word	0xf47f2800
   2ba08:	3510ae65 	.word	0x3510ae65
   2ba0c:	d19d2d30 	.word	0xd19d2d30
   2ba10:	1200e9da 	.word	0x1200e9da
   2ba14:	98019b00 	.word	0x98019b00
   2ba18:	40424059 	.word	0x40424059
   2ba1c:	3008f8da 	.word	0x3008f8da
   2ba20:	f8ca9802 	.word	0xf8ca9802
   2ba24:	ea831000 	.word	0xea831000
   2ba28:	f8da0100 	.word	0xf8da0100
   2ba2c:	9803300c 	.word	0x9803300c
   2ba30:	2004f8ca 	.word	0x2004f8ca
   2ba34:	9a044058 	.word	0x9a044058
   2ba38:	3010f8da 	.word	0x3010f8da
   2ba3c:	1008f8ca 	.word	0x1008f8ca
   2ba40:	99054053 	.word	0x99054053
   2ba44:	2014f8da 	.word	0x2014f8da
   2ba48:	000cf8ca 	.word	0x000cf8ca
   2ba4c:	9806404a 	.word	0x9806404a
   2ba50:	1018f8da 	.word	0x1018f8da
   2ba54:	3010f8ca 	.word	0x3010f8ca
   2ba58:	9b074048 	.word	0x9b074048
   2ba5c:	101cf8da 	.word	0x101cf8da
   2ba60:	2014f8ca 	.word	0x2014f8ca
   2ba64:	f8da404b 	.word	0xf8da404b
   2ba68:	99082020 	.word	0x99082020
   2ba6c:	0018f8ca 	.word	0x0018f8ca
   2ba70:	f8da4051 	.word	0xf8da4051
   2ba74:	9a090024 	.word	0x9a090024
   2ba78:	301cf8ca 	.word	0x301cf8ca
   2ba7c:	f8da4050 	.word	0xf8da4050
   2ba80:	9a0a3028 	.word	0x9a0a3028
   2ba84:	1020f8ca 	.word	0x1020f8ca
   2ba88:	e9ca4053 	.word	0xe9ca4053
   2ba8c:	9a0b0309 	.word	0x9a0b0309
   2ba90:	302cf8da 	.word	0x302cf8da
   2ba94:	40534640 	.word	0x40534640
   2ba98:	f44f4651 	.word	0xf44f4651
   2ba9c:	f8ca7280 	.word	0xf8ca7280
   2baa0:	f00a302c 	.word	0xf00a302c
   2baa4:	4681f90f 	.word	0x4681f90f
   2baa8:	f47f2800 	.word	0xf47f2800
   2baac:	2210ae13 	.word	0x2210ae13
   2bab0:	4620a920 	.word	0x4620a920
   2bab4:	f954f015 	.word	0xf954f015
   2bab8:	69234648 	.word	0x69234648
   2babc:	61233301 	.word	0x61233301
   2bac0:	e8bdb079 	.word	0xe8bdb079
   2bac4:	f06f8ff0 	.word	0xf06f8ff0
   2bac8:	e6030935 	.word	0xe6030935
   2bacc:	0937f06f 	.word	0x0937f06f
   2bad0:	bf00e600 	.word	0xbf00e600

0002bad4 <packet_handler_create>:
   2bad4:	b5382801 	.word	0xb5382801
   2bad8:	4614460d 	.word	0x4614460d
   2badc:	db11d00d 	.word	0xdb11d00d
   2bae0:	dc0f2803 	.word	0xdc0f2803
   2bae4:	f00a2010 	.word	0xf00a2010
   2bae8:	2218f8a1 	.word	0x2218f8a1
   2baec:	4b08b120 	.word	0x4b08b120
   2baf0:	44136045 	.word	0x44136045
   2baf4:	60036084 	.word	0x60036084
   2baf8:	2014bd38 	.word	0x2014bd38
   2bafc:	f896f00a 	.word	0xf896f00a
   2bb00:	e7f32230 	.word	0xe7f32230
   2bb04:	f00a200c 	.word	0xf00a200c
   2bb08:	2200f891 	.word	0x2200f891
   2bb0c:	bf00e7ee 	.word	0xbf00e7ee
   2bb10:	00042f44 	.word	0x00042f44

0002bb14 <packet_handler_delete>:
   2bb14:	4604b510 	.word	0x4604b510
   2bb18:	691b6803 	.word	0x691b6803
   2bb1c:	68234798 	.word	0x68234798
   2bb20:	695b4620 	.word	0x695b4620
   2bb24:	46204798 	.word	0x46204798
   2bb28:	4010e8bd 	.word	0x4010e8bd
   2bb2c:	b89cf00a 	.word	0xb89cf00a

0002bb30 <symbol_0002469>:
   2bb30:	460db570 	.word	0x460db570
   2bb34:	f0014604 	.word	0xf0014604
   2bb38:	2d03fc23 	.word	0x2d03fc23
   2bb3c:	d1257025 	.word	0xd1257025
   2bb40:	25012308 	.word	0x25012308
   2bb44:	49154a14 	.word	0x49154a14
   2bb48:	622360a3 	.word	0x622360a3
   2bb4c:	62e36523 	.word	0x62e36523
   2bb50:	60e263a3 	.word	0x60e263a3
   2bb54:	4a134b12 	.word	0x4a134b12
   2bb58:	48144e13 	.word	0x48144e13
   2bb5c:	65606321 	.word	0x65606321
   2bb60:	64a363e2 	.word	0x64a363e2
   2bb64:	61e56065 	.word	0x61e56065
   2bb68:	62a564e5 	.word	0x62a564e5
   2bb6c:	e9c46365 	.word	0xe9c46365
   2bb70:	62665510 	.word	0x62665510
   2bb74:	f0061d20 	.word	0xf0061d20
   2bb78:	65a0fe69 	.word	0x65a0fe69
   2bb7c:	004cf104 	.word	0x004cf104
   2bb80:	fe64f006 	.word	0xfe64f006
   2bb84:	0517e9c4 	.word	0x0517e9c4
   2bb88:	bd702000 	.word	0xbd702000
   2bb8c:	f0014620 	.word	0xf0014620
   2bb90:	4807fbf7 	.word	0x4807fbf7
   2bb94:	bf00bd70 	.word	0xbf00bd70
   2bb98:	0004300c 	.word	0x0004300c
   2bb9c:	00042fac 	.word	0x00042fac
   2bba0:	20031294 	.word	0x20031294
   2bba4:	00042fcc 	.word	0x00042fcc
   2bba8:	00042f8c 	.word	0x00042f8c
   2bbac:	00042fec 	.word	0x00042fec
   2bbb0:	ffffb180 	.word	0xffffb180

0002bbb4 <secure_client_socket>:
   2bbb4:	41f0e92d 	.word	0x41f0e92d
   2bbb8:	680b460c 	.word	0x680b460c
   2bbbc:	f4236989 	.word	0xf4236989
   2bbc0:	60233300 	.word	0x60233300
   2bbc4:	23006822 	.word	0x23006822
   2bbc8:	1280f422 	.word	0x1280f422
   2bbcc:	f2476022 	.word	0xf2476022
   2bbd0:	68270281 	.word	0x68270281
   2bbd4:	f0024606 	.word	0xf0024606
   2bbd8:	2800ff09 	.word	0x2800ff09
   2bbdc:	4605d03b 	.word	0x4605d03b
   2bbe0:	eb064b28 	.word	0xeb064b28
   2bbe4:	eb0301c6 	.word	0xeb0301c6
   2bbe8:	22240181 	.word	0x22240181
   2bbec:	f0153014 	.word	0xf0153014
   2bbf0:	68abf8b7 	.word	0x68abf8b7
   2bbf4:	8090f8df 	.word	0x8090f8df
   2bbf8:	60ab3324 	.word	0x60ab3324
   2bbfc:	46296823 	.word	0x46296823
   2bc00:	0308ea03 	.word	0x0308ea03
   2bc04:	030af043 	.word	0x030af043
   2bc08:	f2476023 	.word	0xf2476023
   2bc0c:	463b0281 	.word	0x463b0281
   2bc10:	f0024620 	.word	0xf0024620
   2bc14:	b960ff0b 	.word	0xb960ff0b
   2bc18:	00db6823 	.word	0x00db6823
   2bc1c:	f04fd40b 	.word	0xf04fd40b
   2bc20:	f64f33ff 	.word	0xf64f33ff
   2bc24:	210b72ff 	.word	0x210b72ff
   2bc28:	f0024630 	.word	0xf0024630
   2bc2c:	b128ff13 	.word	0xb128ff13
   2bc30:	e8bd6027 	.word	0xe8bd6027
   2bc34:	207381f0 	.word	0x207381f0
   2bc38:	81f0e8bd 	.word	0x81f0e8bd
   2bc3c:	6280f04f 	.word	0x6280f04f
   2bc40:	46114630 	.word	0x46114630
   2bc44:	33fff04f 	.word	0x33fff04f
   2bc48:	ff04f002 	.word	0xff04f002
   2bc4c:	2873b130 	.word	0x2873b130
   2bc50:	6027d0ef 	.word	0x6027d0ef
   2bc54:	200ce7ed 	.word	0x200ce7ed
   2bc58:	81f0e8bd 	.word	0x81f0e8bd
   2bc5c:	f0236823 	.word	0xf0236823
   2bc60:	60236380 	.word	0x60236380
   2bc64:	ea036823 	.word	0xea036823
   2bc68:	f0480808 	.word	0xf0480808
   2bc6c:	6023030c 	.word	0x6023030c
   2bc70:	f4436823 	.word	0xf4436823
   2bc74:	60233300 	.word	0x60233300
   2bc78:	f4436823 	.word	0xf4436823
   2bc7c:	60231380 	.word	0x60231380
   2bc80:	81f0e8bd 	.word	0x81f0e8bd
   2bc84:	200249fc 	.word	0x200249fc
   2bc88:	ffff0000 	.word	0xffff0000

0002bc8c <tls_interface_init>:
   2bc8c:	47702000 	.word	0x47702000

0002bc90 <tls_interface_open>:
   2bc90:	f020b538 	.word	0xf020b538
   2bc94:	2b020308 	.word	0x2b020308
   2bc98:	202fd006 	.word	0x202fd006
   2bc9c:	fe36f7f6 	.word	0xfe36f7f6
   2bca0:	35fff04f 	.word	0x35fff04f
   2bca4:	bd384628 	.word	0xbd384628
   2bca8:	1e4a4614 	.word	0x1e4a4614
   2bcac:	d8282a01 	.word	0xd8282a01
   2bcb0:	2901bb14 	.word	0x2901bb14
   2bcb4:	2301bf06 	.word	0x2301bf06
   2bcb8:	7482f44f 	.word	0x7482f44f
   2bcbc:	7487f44f 	.word	0x7487f44f
   2bcc0:	f002461a 	.word	0xf002461a
   2bcc4:	1e05fef3 	.word	0x1e05fef3
   2bcc8:	4b15db26 	.word	0x4b15db26
   2bccc:	00c5eb05 	.word	0x00c5eb05
   2bcd0:	0080eb03 	.word	0x0080eb03
   2bcd4:	49132224 	.word	0x49132224
   2bcd8:	f842f015 	.word	0xf842f015
   2bcdc:	f0024628 	.word	0xf0024628
   2bce0:	6803fd0d 	.word	0x6803fd0d
   2bce4:	f4236144 	.word	0xf4236144
   2bce8:	60031380 	.word	0x60031380
   2bcec:	f4236803 	.word	0xf4236803
   2bcf0:	60033300 	.word	0x60033300
   2bcf4:	bd384628 	.word	0xbd384628
   2bcf8:	d0082901 	.word	0xd0082901
   2bcfc:	7f87f5b4 	.word	0x7f87f5b4
   2bd00:	2016d0de 	.word	0x2016d0de
   2bd04:	fe02f7f6 	.word	0xfe02f7f6
   2bd08:	35fff04f 	.word	0x35fff04f
   2bd0c:	f5b4e7ca 	.word	0xf5b4e7ca
   2bd10:	d1f67f82 	.word	0xd1f67f82
   2bd14:	e7d3460b 	.word	0xe7d3460b
   2bd18:	35fff04f 	.word	0x35fff04f
   2bd1c:	bf00e7c2 	.word	0xbf00e7c2
   2bd20:	200249fc 	.word	0x200249fc
   2bd24:	0004302c 	.word	0x0004302c

0002bd28 <tls_interface_close>:
   2bd28:	4604b510 	.word	0x4604b510
   2bd2c:	fce6f002 	.word	0xfce6f002
   2bd30:	4620b120 	.word	0x4620b120
   2bd34:	4010e8bd 	.word	0x4010e8bd
   2bd38:	bf64f002 	.word	0xbf64f002
   2bd3c:	f7f62009 	.word	0xf7f62009
   2bd40:	f04ffde5 	.word	0xf04ffde5
   2bd44:	bd1030ff 	.word	0xbd1030ff

0002bd48 <tls_interface_sendto>:
   2bd48:	47f0e92d 	.word	0x47f0e92d
   2bd4c:	e9dd460d 	.word	0xe9dd460d
   2bd50:	46168908 	.word	0x46168908
   2bd54:	4604461f 	.word	0x4604461f
   2bd58:	fcd0f002 	.word	0xfcd0f002
   2bd5c:	d03b2800 	.word	0xd03b2800
   2bd60:	b29b6803 	.word	0xb29b6803
   2bd64:	d0392b0c 	.word	0xd0392b0c
   2bd68:	b29b6803 	.word	0xb29b6803
   2bd6c:	d1112b0b 	.word	0xd1112b0b
   2bd70:	eb044b20 	.word	0xeb044b20
   2bd74:	f81304c4 	.word	0xf81304c4
   2bd78:	2b023024 	.word	0x2b023024
   2bd7c:	6903d038 	.word	0x6903d038
   2bd80:	bf142b01 	.word	0xbf142b01
   2bd84:	202a2039 	.word	0x202a2039
   2bd88:	fdc0f7f6 	.word	0xfdc0f7f6
   2bd8c:	30fff04f 	.word	0x30fff04f
   2bd90:	87f0e8bd 	.word	0x87f0e8bd
   2bd94:	2b016903 	.word	0x2b016903
   2bd98:	2b02d00b 	.word	0x2b02d00b
   2bd9c:	2039d001 	.word	0x2039d001
   2bda0:	6803e7f2 	.word	0x6803e7f2
   2bda4:	2b02b29b 	.word	0x2b02b29b
   2bda8:	6803d007 	.word	0x6803d007
   2bdac:	2b04b29b 	.word	0x2b04b29b
   2bdb0:	6803d003 	.word	0x6803d003
   2bdb4:	2b05b29b 	.word	0x2b05b29b
   2bdb8:	4b0ed1f1 	.word	0x4b0ed1f1
   2bdbc:	02c4eb04 	.word	0x02c4eb04
   2bdc0:	3022f813 	.word	0x3022f813
   2bdc4:	d1ea2b02 	.word	0xd1ea2b02
   2bdc8:	46204601 	.word	0x46204601
   2bdcc:	fef2f7ff 	.word	0xfef2f7ff
   2bdd0:	d0032800 	.word	0xd0032800
   2bdd4:	e7d9dcd8 	.word	0xe7d9dcd8
   2bdd8:	e7d52009 	.word	0xe7d52009
   2bddc:	8908e9cd 	.word	0x8908e9cd
   2bde0:	4632463b 	.word	0x4632463b
   2bde4:	46204629 	.word	0x46204629
   2bde8:	47f0e8bd 	.word	0x47f0e8bd
   2bdec:	bf7af002 	.word	0xbf7af002
   2bdf0:	e7c92023 	.word	0xe7c92023
   2bdf4:	200249fc 	.word	0x200249fc

0002bdf8 <tls_interface_recvfrom>:
   2bdf8:	47f0e92d 	.word	0x47f0e92d
   2bdfc:	e9dd460d 	.word	0xe9dd460d
   2be00:	46168908 	.word	0x46168908
   2be04:	4604461f 	.word	0x4604461f
   2be08:	fc78f002 	.word	0xfc78f002
   2be0c:	d0382800 	.word	0xd0382800
   2be10:	b29b6803 	.word	0xb29b6803
   2be14:	d00f2b0c 	.word	0xd00f2b0c
   2be18:	b29b6803 	.word	0xb29b6803
   2be1c:	d00b2b0d 	.word	0xd00b2b0d
   2be20:	2b016903 	.word	0x2b016903
   2be24:	2b02d01a 	.word	0x2b02d01a
   2be28:	2023d010 	.word	0x2023d010
   2be2c:	fd6ef7f6 	.word	0xfd6ef7f6
   2be30:	30fff04f 	.word	0x30fff04f
   2be34:	87f0e8bd 	.word	0x87f0e8bd
   2be38:	8908e9cd 	.word	0x8908e9cd
   2be3c:	4632463b 	.word	0x4632463b
   2be40:	46204629 	.word	0x46204629
   2be44:	47f0e8bd 	.word	0x47f0e8bd
   2be48:	b886f003 	.word	0xb886f003
   2be4c:	b29b6803 	.word	0xb29b6803
   2be50:	d0072b02 	.word	0xd0072b02
   2be54:	b29b6803 	.word	0xb29b6803
   2be58:	d0032b04 	.word	0xd0032b04
   2be5c:	b29b6803 	.word	0xb29b6803
   2be60:	d1e22b05 	.word	0xd1e22b05
   2be64:	eb044b08 	.word	0xeb044b08
   2be68:	f81302c4 	.word	0xf81302c4
   2be6c:	2b023022 	.word	0x2b023022
   2be70:	4601d1db 	.word	0x4601d1db
   2be74:	f7ff4620 	.word	0xf7ff4620
   2be78:	2800fe9d 	.word	0x2800fe9d
   2be7c:	dcd5d0dc 	.word	0xdcd5d0dc
   2be80:	2009e7d6 	.word	0x2009e7d6
   2be84:	bf00e7d2 	.word	0xbf00e7d2
   2be88:	200249fc 	.word	0x200249fc

0002be8c <tls_interface_bind>:
   2be8c:	43f8e92d 	.word	0x43f8e92d
   2be90:	4617460c 	.word	0x4617460c
   2be94:	f0024606 	.word	0xf0024606
   2be98:	2800fc31 	.word	0x2800fc31
   2be9c:	6803d04c 	.word	0x6803d04c
   2bea0:	b29b4605 	.word	0xb29b4605
   2bea4:	d1502b02 	.word	0xd1502b02
   2bea8:	463a4621 	.word	0x463a4621
   2beac:	f0034630 	.word	0xf0034630
   2beb0:	4604fa29 	.word	0x4604fa29
   2beb4:	2c00b120 	.word	0x2c00b120
   2beb8:	4620dc3f 	.word	0x4620dc3f
   2bebc:	83f8e8bd 	.word	0x83f8e8bd
   2bec0:	07c6eb06 	.word	0x07c6eb06
   2bec4:	8094f8df 	.word	0x8094f8df
   2bec8:	f81800bf 	.word	0xf81800bf
   2becc:	2b013007 	.word	0x2b013007
   2bed0:	4603d1f3 	.word	0x4603d1f3
   2bed4:	0281f247 	.word	0x0281f247
   2bed8:	463069a9 	.word	0x463069a9
   2bedc:	fd86f002 	.word	0xfd86f002
   2bee0:	b3b04681 	.word	0xb3b04681
   2bee4:	0107eb08 	.word	0x0107eb08
   2bee8:	30142224 	.word	0x30142224
   2beec:	ff38f014 	.word	0xff38f014
   2bef0:	3008f8d9 	.word	0x3008f8d9
   2bef4:	33244649 	.word	0x33244649
   2bef8:	3008f8c9 	.word	0x3008f8c9
   2befc:	2304682a 	.word	0x2304682a
   2bf00:	04120c12 	.word	0x04120c12
   2bf04:	020af042 	.word	0x020af042
   2bf08:	4628602a 	.word	0x4628602a
   2bf0c:	0281f247 	.word	0x0281f247
   2bf10:	fd8cf002 	.word	0xfd8cf002
   2bf14:	682bb9f8 	.word	0x682bb9f8
   2bf18:	d41800db 	.word	0xd41800db
   2bf1c:	f04f4630 	.word	0xf04f4630
   2bf20:	f64f33ff 	.word	0xf64f33ff
   2bf24:	210b72ff 	.word	0x210b72ff
   2bf28:	fd94f002 	.word	0xfd94f002
   2bf2c:	d0c42800 	.word	0xd0c42800
   2bf30:	46042304 	.word	0x46042304
   2bf34:	e7be602b 	.word	0xe7be602b
   2bf38:	46202409 	.word	0x46202409
   2bf3c:	34fff04f 	.word	0x34fff04f
   2bf40:	fce4f7f6 	.word	0xfce4f7f6
   2bf44:	e8bd4620 	.word	0xe8bd4620
   2bf48:	242d83f8 	.word	0x242d83f8
   2bf4c:	2473e7f5 	.word	0x2473e7f5
   2bf50:	240ce7f3 	.word	0x240ce7f3
   2bf54:	4604e7f1 	.word	0x4604e7f1
   2bf58:	bf00e7ad 	.word	0xbf00e7ad
   2bf5c:	200249fc 	.word	0x200249fc

0002bf60 <tls_interface_connect>:
   2bf60:	460eb5f8 	.word	0x460eb5f8
   2bf64:	46044617 	.word	0x46044617
   2bf68:	fbc8f002 	.word	0xfbc8f002
   2bf6c:	4b13b1e8 	.word	0x4b13b1e8
   2bf70:	02c4eb04 	.word	0x02c4eb04
   2bf74:	3022f813 	.word	0x3022f813
   2bf78:	d11c2b02 	.word	0xd11c2b02
   2bf7c:	46056803 	.word	0x46056803
   2bf80:	2b02b29b 	.word	0x2b02b29b
   2bf84:	6803d003 	.word	0x6803d003
   2bf88:	2b04b29b 	.word	0x2b04b29b
   2bf8c:	463ad113 	.word	0x463ad113
   2bf90:	46204631 	.word	0x46204631
   2bf94:	f90cf003 	.word	0xf90cf003
   2bf98:	2800b110 	.word	0x2800b110
   2bf9c:	bdf8dc06 	.word	0xbdf8dc06
   2bfa0:	46204629 	.word	0x46204629
   2bfa4:	fe06f7ff 	.word	0xfe06f7ff
   2bfa8:	2009e7f7 	.word	0x2009e7f7
   2bfac:	fcaef7f6 	.word	0xfcaef7f6
   2bfb0:	30fff04f 	.word	0x30fff04f
   2bfb4:	202dbdf8 	.word	0x202dbdf8
   2bfb8:	bf00e7f8 	.word	0xbf00e7f8
   2bfbc:	200249fc 	.word	0x200249fc

0002bfc0 <tls_interface_listen>:
   2bfc0:	47f0e92d 	.word	0x47f0e92d
   2bfc4:	4606460f 	.word	0x4606460f
   2bfc8:	fb98f002 	.word	0xfb98f002
   2bfcc:	d06b2800 	.word	0xd06b2800
   2bfd0:	46046903 	.word	0x46046903
   2bfd4:	d1652b01 	.word	0xd1652b01
   2bfd8:	b29b6803 	.word	0xb29b6803
   2bfdc:	d0562b04 	.word	0xd0562b04
   2bfe0:	b29b6823 	.word	0xb29b6823
   2bfe4:	d15d2b0b 	.word	0xd15d2b0b
   2bfe8:	f8df00f3 	.word	0xf8df00f3
   2bfec:	199a90c0 	.word	0x199a90c0
   2bff0:	2022f819 	.word	0x2022f819
   2bff4:	d1552a01 	.word	0xd1552a01
   2bff8:	44332201 	.word	0x44332201
   2bffc:	f809009d 	.word	0xf809009d
   2c000:	69a12005 	.word	0x69a12005
   2c004:	f2472300 	.word	0xf2472300
   2c008:	46300281 	.word	0x46300281
   2c00c:	8000f8d4 	.word	0x8000f8d4
   2c010:	fcecf002 	.word	0xfcecf002
   2c014:	28004682 	.word	0x28004682
   2c018:	eb09d042 	.word	0xeb09d042
   2c01c:	22240105 	.word	0x22240105
   2c020:	f0143014 	.word	0xf0143014
   2c024:	f8dafe9d 	.word	0xf8dafe9d
   2c028:	46513008 	.word	0x46513008
   2c02c:	f8ca3324 	.word	0xf8ca3324
   2c030:	68223008 	.word	0x68223008
   2c034:	0c124643 	.word	0x0c124643
   2c038:	f0420412 	.word	0xf0420412
   2c03c:	6022020a 	.word	0x6022020a
   2c040:	f2474620 	.word	0xf2474620
   2c044:	f0020281 	.word	0xf0020281
   2c048:	b9e0fcf1 	.word	0xb9e0fcf1
   2c04c:	00db6823 	.word	0x00db6823
   2c050:	f04fd40e 	.word	0xf04fd40e
   2c054:	f64f33ff 	.word	0xf64f33ff
   2c058:	210b72ff 	.word	0x210b72ff
   2c05c:	f0024630 	.word	0xf0024630
   2c060:	b160fcf9 	.word	0xb160fcf9
   2c064:	f8c42800 	.word	0xf8c42800
   2c068:	dc028000 	.word	0xdc028000
   2c06c:	87f0e8bd 	.word	0x87f0e8bd
   2c070:	f7f62073 	.word	0xf7f62073
   2c074:	f04ffc4b 	.word	0xf04ffc4b
   2c078:	e8bd30ff 	.word	0xe8bd30ff
   2c07c:	463987f0 	.word	0x463987f0
   2c080:	f0034630 	.word	0xf0034630
   2c084:	2800f9d5 	.word	0x2800f9d5
   2c088:	e8bddcf3 	.word	0xe8bddcf3
   2c08c:	00f387f0 	.word	0x00f387f0
   2c090:	9018f8df 	.word	0x9018f8df
   2c094:	f819199a 	.word	0xf819199a
   2c098:	2a022022 	.word	0x2a022022
   2c09c:	e7abd1a0 	.word	0xe7abd1a0
   2c0a0:	e7e6200c 	.word	0xe7e6200c
   2c0a4:	e7e4202d 	.word	0xe7e4202d
   2c0a8:	e7e22009 	.word	0xe7e22009
   2c0ac:	200249fc 	.word	0x200249fc

0002c0b0 <tls_interface_accept>:
   2c0b0:	460cb5f8 	.word	0x460cb5f8
   2c0b4:	461f4616 	.word	0x461f4616
   2c0b8:	f0024605 	.word	0xf0024605
   2c0bc:	2800fb1f 	.word	0x2800fb1f
   2c0c0:	6800d03b 	.word	0x6800d03b
   2c0c4:	2806b280 	.word	0x2806b280
   2c0c8:	4621d137 	.word	0x4621d137
   2c0cc:	4632463b 	.word	0x4632463b
   2c0d0:	f0034628 	.word	0xf0034628
   2c0d4:	4604fa23 	.word	0x4604fa23
   2c0d8:	2c00b118 	.word	0x2c00b118
   2c0dc:	4620dc2e 	.word	0x4620dc2e
   2c0e0:	4628bdf8 	.word	0x4628bdf8
   2c0e4:	fb0af002 	.word	0xfb0af002
   2c0e8:	4f186803 	.word	0x4f186803
   2c0ec:	3300f423 	.word	0x3300f423
   2c0f0:	68036003 	.word	0x68036003
   2c0f4:	05c5eb05 	.word	0x05c5eb05
   2c0f8:	1380f423 	.word	0x1380f423
   2c0fc:	60034606 	.word	0x60034606
   2c100:	0185eb07 	.word	0x0185eb07
   2c104:	46382224 	.word	0x46382224
   2c108:	fe2af014 	.word	0xfe2af014
   2c10c:	703b2302 	.word	0x703b2302
   2c110:	46206833 	.word	0x46206833
   2c114:	041b0c1b 	.word	0x041b0c1b
   2c118:	030bf043 	.word	0x030bf043
   2c11c:	f64f6033 	.word	0xf64f6033
   2c120:	f04f72ff 	.word	0xf04f72ff
   2c124:	210c33ff 	.word	0x210c33ff
   2c128:	fc94f002 	.word	0xfc94f002
   2c12c:	28004604 	.word	0x28004604
   2c130:	2000d0d5 	.word	0x2000d0d5
   2c134:	fd66f002 	.word	0xfd66f002
   2c138:	2409e7cf 	.word	0x2409e7cf
   2c13c:	f04f4620 	.word	0xf04f4620
   2c140:	f7f634ff 	.word	0xf7f634ff
   2c144:	4620fbe3 	.word	0x4620fbe3
   2c148:	bf00bdf8 	.word	0xbf00bdf8
   2c14c:	200249fc 	.word	0x200249fc

0002c150 <tls_interface_setopt>:
   2c150:	41f0e92d 	.word	0x41f0e92d
   2c154:	7f8df5b1 	.word	0x7f8df5b1
   2c158:	d11d9f06 	.word	0xd11d9f06
   2c15c:	b1c3461c 	.word	0xb1c3461c
   2c160:	4605b1bf 	.word	0x4605b1bf
   2c164:	f0024616 	.word	0xf0024616
   2c168:	b1c8fac9 	.word	0xb1c8fac9
   2c16c:	b29b6803 	.word	0xb29b6803
   2c170:	d0072b02 	.word	0xd0072b02
   2c174:	b29b6803 	.word	0xb29b6803
   2c178:	d0032b04 	.word	0xd0032b04
   2c17c:	b29b6803 	.word	0xb29b6803
   2c180:	d10d2b05 	.word	0xd10d2b05
   2c184:	2e033e01 	.word	0x2e033e01
   2c188:	e8dfd851 	.word	0xe8dfd851
   2c18c:	3225f006 	.word	0x3225f006
   2c190:	200e0b18 	.word	0x200e0b18
   2c194:	81f0e8bd 	.word	0x81f0e8bd
   2c198:	41f0e8bd 	.word	0x41f0e8bd
   2c19c:	baf6f003 	.word	0xbaf6f003
   2c1a0:	e7f72009 	.word	0xe7f72009
   2c1a4:	d1392f04 	.word	0xd1392f04
   2c1a8:	2b026823 	.word	0x2b026823
   2c1ac:	4a21d836 	.word	0x4a21d836
   2c1b0:	05c5eb05 	.word	0x05c5eb05
   2c1b4:	0585eb02 	.word	0x0585eb02
   2c1b8:	200070ab 	.word	0x200070ab
   2c1bc:	2f01e7ea 	.word	0x2f01e7ea
   2c1c0:	7823d12c 	.word	0x7823d12c
   2c1c4:	d8292b01 	.word	0xd8292b01
   2c1c8:	eb054a1a 	.word	0xeb054a1a
   2c1cc:	eb0205c5 	.word	0xeb0205c5
   2c1d0:	70530285 	.word	0x70530285
   2c1d4:	e7dd2000 	.word	0xe7dd2000
   2c1d8:	d11f2f04 	.word	0xd11f2f04
   2c1dc:	b1f86820 	.word	0xb1f86820
   2c1e0:	d11b2801 	.word	0xd11b2801
   2c1e4:	eb054b13 	.word	0xeb054b13
   2c1e8:	f80305c5 	.word	0xf80305c5
   2c1ec:	20000025 	.word	0x20000025
   2c1f0:	ea5fe7d0 	.word	0xea5fe7d0
   2c1f4:	d0110c97 	.word	0xd0110c97
   2c1f8:	0603f017 	.word	0x0603f017
   2c1fc:	eb05d10e 	.word	0xeb05d10e
   2c200:	00ad05c5 	.word	0x00ad05c5
   2c204:	1d284b0b 	.word	0x1d284b0b
   2c208:	442b4418 	.word	0x442b4418
   2c20c:	4621463a 	.word	0x4621463a
   2c210:	c003f883 	.word	0xc003f883
   2c214:	fda4f014 	.word	0xfda4f014
   2c218:	e7bb4630 	.word	0xe7bb4630
   2c21c:	e7b92016 	.word	0xe7b92016
   2c220:	4b042202 	.word	0x4b042202
   2c224:	05c5eb05 	.word	0x05c5eb05
   2c228:	2025f803 	.word	0x2025f803
   2c22c:	202ae7b2 	.word	0x202ae7b2
   2c230:	bf00e7b0 	.word	0xbf00e7b0
   2c234:	200249fc 	.word	0x200249fc

0002c238 <tls_interface_getopt>:
   2c238:	41f0e92d 	.word	0x41f0e92d
   2c23c:	7f8df5b1 	.word	0x7f8df5b1
   2c240:	d1129f06 	.word	0xd1129f06
   2c244:	b16b461d 	.word	0xb16b461d
   2c248:	4606b167 	.word	0x4606b167
   2c24c:	f0024614 	.word	0xf0024614
   2c250:	2800fa55 	.word	0x2800fa55
   2c254:	3c01d04f 	.word	0x3c01d04f
   2c258:	d8522c03 	.word	0xd8522c03
   2c25c:	f004e8df 	.word	0xf004e8df
   2c260:	09152139 	.word	0x09152139
   2c264:	e8bd200e 	.word	0xe8bd200e
   2c268:	e8bd81f0 	.word	0xe8bd81f0
   2c26c:	f00341f0 	.word	0xf00341f0
   2c270:	683bbb49 	.word	0x683bbb49
   2c274:	d13c2b04 	.word	0xd13c2b04
   2c278:	eb064b23 	.word	0xeb064b23
   2c27c:	eb0306c6 	.word	0xeb0306c6
   2c280:	78b30686 	.word	0x78b30686
   2c284:	602b2000 	.word	0x602b2000
   2c288:	683be7ed 	.word	0x683be7ed
   2c28c:	d1302b04 	.word	0xd1302b04
   2c290:	eb064b1d 	.word	0xeb064b1d
   2c294:	eb0306c6 	.word	0xeb0306c6
   2c298:	78730686 	.word	0x78730686
   2c29c:	602b2000 	.word	0x602b2000
   2c2a0:	eb06e7e1 	.word	0xeb06e7e1
   2c2a4:	491806c6 	.word	0x491806c6
   2c2a8:	00b6683b 	.word	0x00b6683b
   2c2ac:	f013198a 	.word	0xf013198a
   2c2b0:	78d00403 	.word	0x78d00403
   2c2b4:	089bd121 	.word	0x089bd121
   2c2b8:	bf284283 	.word	0xbf284283
   2c2bc:	009a4603 	.word	0x009a4603
   2c2c0:	3604b1db 	.word	0x3604b1db
   2c2c4:	603a4431 	.word	0x603a4431
   2c2c8:	f0144628 	.word	0xf0144628
   2c2cc:	4620fd49 	.word	0x4620fd49
   2c2d0:	683be7c9 	.word	0x683be7c9
   2c2d4:	d10c2b04 	.word	0xd10c2b04
   2c2d8:	eb064b0b 	.word	0xeb064b0b
   2c2dc:	f81306c6 	.word	0xf81306c6
   2c2e0:	20003026 	.word	0x20003026
   2c2e4:	0301f1a3 	.word	0x0301f1a3
   2c2e8:	f383fab3 	.word	0xf383fab3
   2c2ec:	602b095b 	.word	0x602b095b
   2c2f0:	2016e7b9 	.word	0x2016e7b9
   2c2f4:	2009e7b7 	.word	0x2009e7b7
   2c2f8:	2800e7b5 	.word	0x2800e7b5
   2c2fc:	6038d1f9 	.word	0x6038d1f9
   2c300:	202ae7b1 	.word	0x202ae7b1
   2c304:	bf00e7af 	.word	0xbf00e7af
   2c308:	200249fc 	.word	0x200249fc

0002c30c <tls_rpc_ip_event_handler>:
   2c30c:	f248b538 	.word	0xf248b538
   2c310:	42ab0581 	.word	0x42ab0581
   2c314:	d053460c 	.word	0xd053460c
   2c318:	0182f249 	.word	0x0182f249
   2c31c:	d02d428b 	.word	0xd02d428b
   2c320:	0102f248 	.word	0x0102f248
   2c324:	d001428b 	.word	0xd001428b
   2c328:	bd382001 	.word	0xbd382001
   2c32c:	d0fb2c00 	.word	0xd0fb2c00
   2c330:	f5b36963 	.word	0xf5b36963
   2c334:	d0027f82 	.word	0xd0027f82
   2c338:	7f87f5b3 	.word	0x7f87f5b3
   2c33c:	6823d1f4 	.word	0x6823d1f4
   2c340:	5300f023 	.word	0x5300f023
   2c344:	69556023 	.word	0x69556023
   2c348:	d1482d00 	.word	0xd1482d00
   2c34c:	0c1b6823 	.word	0x0c1b6823
   2c350:	f043041b 	.word	0xf043041b
   2c354:	60230305 	.word	0x60230305
   2c358:	00da6823 	.word	0x00da6823
   2c35c:	4b25d50c 	.word	0x4b25d50c
   2c360:	02c0eb00 	.word	0x02c0eb00
   2c364:	3022f813 	.word	0x3022f813
   2c368:	d1052b02 	.word	0xd1052b02
   2c36c:	f7ff4621 	.word	0xf7ff4621
   2c370:	b108fc21 	.word	0xb108fc21
   2c374:	d1352873 	.word	0xd1352873
   2c378:	bd382000 	.word	0xbd382000
   2c37c:	d0fb2c00 	.word	0xd0fb2c00
   2c380:	b29b6823 	.word	0xb29b6823
   2c384:	d1f72b0b 	.word	0xd1f72b0b
   2c388:	bb486910 	.word	0xbb486910
   2c38c:	f0436823 	.word	0xf0436823
   2c390:	60236380 	.word	0x60236380
   2c394:	00db6823 	.word	0x00db6823
   2c398:	6823d5ee 	.word	0x6823d5ee
   2c39c:	6380f023 	.word	0x6380f023
   2c3a0:	68236023 	.word	0x68236023
   2c3a4:	041b0c1b 	.word	0x041b0c1b
   2c3a8:	030cf043 	.word	0x030cf043
   2c3ac:	68236023 	.word	0x68236023
   2c3b0:	3300f443 	.word	0x3300f443
   2c3b4:	68236023 	.word	0x68236023
   2c3b8:	1380f443 	.word	0x1380f443
   2c3bc:	bd386023 	.word	0xbd386023
   2c3c0:	d0d92900 	.word	0xd0d92900
   2c3c4:	b29b680b 	.word	0xb29b680b
   2c3c8:	d1d52b0a 	.word	0xd1d52b0a
   2c3cc:	b9386950 	.word	0xb9386950
   2c3d0:	0c1b680b 	.word	0x0c1b680b
   2c3d4:	f043041b 	.word	0xf043041b
   2c3d8:	600b030b 	.word	0x600b030b
   2c3dc:	4628bd38 	.word	0x4628bd38
   2c3e0:	fafaf002 	.word	0xfafaf002
   2c3e4:	68236060 	.word	0x68236060
   2c3e8:	f4432000 	.word	0xf4432000
   2c3ec:	60232380 	.word	0x60232380
   2c3f0:	bf00bd38 	.word	0xbf00bd38
   2c3f4:	200249fc 	.word	0x200249fc

0002c3f8 <rpc_gnss_serialize_utc>:
   2c3f8:	b1d84603 	.word	0xb1d84603
   2c3fc:	2000b1d1 	.word	0x2000b1d1
   2c400:	70482201 	.word	0x70482201
   2c404:	685a700a 	.word	0x685a700a
   2c408:	f8c12010 	.word	0xf8c12010
   2c40c:	681a2006 	.word	0x681a2006
   2c410:	2002f8c1 	.word	0x2002f8c1
   2c414:	200af993 	.word	0x200af993
   2c418:	f993730a 	.word	0xf993730a
   2c41c:	73ca200d 	.word	0x73ca200d
   2c420:	200cf993 	.word	0x200cf993
   2c424:	7a1a738a 	.word	0x7a1a738a
   2c428:	7ada728a 	.word	0x7ada728a
   2c42c:	7a5b734a 	.word	0x7a5b734a
   2c430:	477072cb 	.word	0x477072cb
   2c434:	30fff04f 	.word	0x30fff04f
   2c438:	bf004770 	.word	0xbf004770

0002c43c <rpc_gnss_serialize_ephe>:
   2c43c:	28004603 	.word	0x28004603
   2c440:	2900d04b 	.word	0x2900d04b
   2c444:	2000d049 	.word	0x2000d049
   2c448:	70482202 	.word	0x70482202
   2c44c:	68da700a 	.word	0x68da700a
   2c450:	f8c12040 	.word	0xf8c12040
   2c454:	f9b3200b 	.word	0xf9b3200b
   2c458:	f8a12008 	.word	0xf8a12008
   2c45c:	f9932009 	.word	0xf9932009
   2c460:	720a2006 	.word	0x720a2006
   2c464:	2044f9b3 	.word	0x2044f9b3
   2c468:	f9b3878a 	.word	0xf9b3878a
   2c46c:	86ca203e 	.word	0x86ca203e
   2c470:	2042f9b3 	.word	0x2042f9b3
   2c474:	f9b3874a 	.word	0xf9b3874a
   2c478:	868a203c 	.word	0x868a203c
   2c47c:	2046f9b3 	.word	0x2046f9b3
   2c480:	f9b387ca 	.word	0xf9b387ca
   2c484:	870a2040 	.word	0x870a2040
   2c488:	201cf9b3 	.word	0x201cf9b3
   2c48c:	6a9a830a 	.word	0x6a9a830a
   2c490:	2022f8c1 	.word	0x2022f8c1
   2c494:	744a7c9a 	.word	0x744a7c9a
   2c498:	70ca785a 	.word	0x70ca785a
   2c49c:	62ca6b5a 	.word	0x62ca6b5a
   2c4a0:	202cf9b3 	.word	0x202cf9b3
   2c4a4:	885a84ca 	.word	0x885a84ca
   2c4a8:	6a1a808a 	.word	0x6a1a808a
   2c4ac:	201af8c1 	.word	0x201af8c1
   2c4b0:	630a6b9a 	.word	0x630a6b9a
   2c4b4:	f8c16a5a 	.word	0xf8c16a5a
   2c4b8:	6b1a201e 	.word	0x6b1a201e
   2c4bc:	781a628a 	.word	0x781a628a
   2c4c0:	f993708a 	.word	0xf993708a
   2c4c4:	73ca2010 	.word	0x73ca2010
   2c4c8:	80ca889a 	.word	0x80ca889a
   2c4cc:	824a8a9a 	.word	0x824a8a9a
   2c4d0:	740a7c5a 	.word	0x740a7c5a
   2c4d4:	614b699b 	.word	0x614b699b
   2c4d8:	f04f4770 	.word	0xf04f4770
   2c4dc:	477030ff 	.word	0x477030ff

0002c4e0 <rpc_gnss_serialize_alm>:
   2c4e0:	b3604603 	.word	0xb3604603
   2c4e4:	2000b359 	.word	0x2000b359
   2c4e8:	70482203 	.word	0x70482203
   2c4ec:	f9b3700a 	.word	0xf9b3700a
   2c4f0:	2021201c 	.word	0x2021201c
   2c4f4:	201df8a1 	.word	0x201df8a1
   2c4f8:	201ef9b3 	.word	0x201ef9b3
   2c4fc:	201ff8a1 	.word	0x201ff8a1
   2c500:	2006f9b3 	.word	0x2006f9b3
   2c504:	889a810a 	.word	0x889a810a
   2c508:	78da80ca 	.word	0x78da80ca
   2c50c:	699a714a 	.word	0x699a714a
   2c510:	2019f8c1 	.word	0x2019f8c1
   2c514:	f8c1691a 	.word	0xf8c1691a
   2c518:	f9b32011 	.word	0xf9b32011
   2c51c:	814a2008 	.word	0x814a2008
   2c520:	f8c168da 	.word	0xf8c168da
   2c524:	7a9a200d 	.word	0x7a9a200d
   2c528:	781a730a 	.word	0x781a730a
   2c52c:	789a708a 	.word	0x789a708a
   2c530:	695a710a 	.word	0x695a710a
   2c534:	2015f8c1 	.word	0x2015f8c1
   2c538:	70cb785b 	.word	0x70cb785b
   2c53c:	f04f4770 	.word	0xf04f4770
   2c540:	477030ff 	.word	0x477030ff

0002c544 <rpc_gnss_serialize_klob>:
   2c544:	b1f04603 	.word	0xb1f04603
   2c548:	2000b1e9 	.word	0x2000b1e9
   2c54c:	70482204 	.word	0x70482204
   2c550:	f993700a 	.word	0xf993700a
   2c554:	200a2000 	.word	0x200a2000
   2c558:	f993708a 	.word	0xf993708a
   2c55c:	70ca2001 	.word	0x70ca2001
   2c560:	2002f993 	.word	0x2002f993
   2c564:	f993710a 	.word	0xf993710a
   2c568:	714a2003 	.word	0x714a2003
   2c56c:	2004f993 	.word	0x2004f993
   2c570:	f993718a 	.word	0xf993718a
   2c574:	71ca2005 	.word	0x71ca2005
   2c578:	2006f993 	.word	0x2006f993
   2c57c:	f993720a 	.word	0xf993720a
   2c580:	724b3007 	.word	0x724b3007
   2c584:	f04f4770 	.word	0xf04f4770
   2c588:	477030ff 	.word	0x477030ff

0002c58c <rpc_gnss_serialize_nequick>:
   2c58c:	b1984603 	.word	0xb1984603
   2c590:	2000b191 	.word	0x2000b191
   2c594:	70482205 	.word	0x70482205
   2c598:	f9b3700a 	.word	0xf9b3700a
   2c59c:	200a2000 	.word	0x200a2000
   2c5a0:	f9b3804a 	.word	0xf9b3804a
   2c5a4:	808a2002 	.word	0x808a2002
   2c5a8:	2004f9b3 	.word	0x2004f9b3
   2c5ac:	799a80ca 	.word	0x799a80ca
   2c5b0:	79db720a 	.word	0x79db720a
   2c5b4:	4770724b 	.word	0x4770724b
   2c5b8:	30fff04f 	.word	0x30fff04f
   2c5bc:	bf004770 	.word	0xbf004770

0002c5c0 <rpc_gnss_serialize_time_and_sv_tow>:
   2c5c0:	b309b310 	.word	0xb309b310
   2c5c4:	2500b470 	.word	0x2500b470
   2c5c8:	460c2606 	.word	0x460c2606
   2c5cc:	700e704d 	.word	0x700e704d
   2c5d0:	8805462b 	.word	0x8805462b
   2c5d4:	804d4602 	.word	0x804d4602
   2c5d8:	f8c168c5 	.word	0xf8c168c5
   2c5dc:	8905500a 	.word	0x8905500a
   2c5e0:	6840810d 	.word	0x6840810d
   2c5e4:	8a156048 	.word	0x8a156048
   2c5e8:	0043eb03 	.word	0x0043eb03
   2c5ec:	81c54408 	.word	0x81c54408
   2c5f0:	33017c90 	.word	0x33017c90
   2c5f4:	74202b20 	.word	0x74202b20
   2c5f8:	0204f102 	.word	0x0204f102
   2c5fc:	0403f104 	.word	0x0403f104
   2c600:	206ed1f1 	.word	0x206ed1f1
   2c604:	4770bc70 	.word	0x4770bc70
   2c608:	30fff04f 	.word	0x30fff04f
   2c60c:	bf004770 	.word	0xbf004770

0002c610 <rpc_gnss_serialize_location>:
   2c610:	b1c84603 	.word	0xb1c84603
   2c614:	2000b1c1 	.word	0x2000b1c1
   2c618:	70482207 	.word	0x70482207
   2c61c:	f9b3700a 	.word	0xf9b3700a
   2c620:	20112008 	.word	0x20112008
   2c624:	7b9a814a 	.word	0x7b9a814a
   2c628:	681a740a 	.word	0x681a740a
   2c62c:	2002f8c1 	.word	0x2002f8c1
   2c630:	f8c1685a 	.word	0xf8c1685a
   2c634:	7b1a2006 	.word	0x7b1a2006
   2c638:	7b5a738a 	.word	0x7b5a738a
   2c63c:	7a9a73ca 	.word	0x7a9a73ca
   2c640:	7adb730a 	.word	0x7adb730a
   2c644:	4770734b 	.word	0x4770734b
   2c648:	30fff04f 	.word	0x30fff04f
   2c64c:	bf004770 	.word	0xbf004770

0002c650 <rpc_gnss_serialize_integrity>:
   2c650:	b141b148 	.word	0xb141b148
   2c654:	23082200 	.word	0x23082200
   2c658:	700b704a 	.word	0x700b704a
   2c65c:	20066803 	.word	0x20066803
   2c660:	3002f8c1 	.word	0x3002f8c1
   2c664:	f04f4770 	.word	0xf04f4770
   2c668:	477030ff 	.word	0x477030ff

0002c66c <ipc_trace_init>:
   2c66c:	60184b01 	.word	0x60184b01
   2c670:	bf004770 	.word	0xbf004770
   2c674:	20024b28 	.word	0x20024b28

0002c678 <bsd_os_trace_irq_handler>:
   2c678:	4b6cb5f0 	.word	0x4b6cb5f0
   2c67c:	781bb083 	.word	0x781bb083
   2c680:	f0002b00 	.word	0xf0002b00
   2c684:	4b6a80ad 	.word	0x4b6a80ad
   2c688:	68a2681c 	.word	0x68a2681c
   2c68c:	429a6863 	.word	0x429a6863
   2c690:	f64bd02d 	.word	0xf64bd02d
   2c694:	f8ad63ef 	.word	0xf8ad63ef
   2c698:	78233000 	.word	0x78233000
   2c69c:	f88d466e 	.word	0xf88d466e
   2c6a0:	68633004 	.word	0x68633004
   2c6a4:	429a2105 	.word	0x429a2105
   2c6a8:	6927bf2a 	.word	0x6927bf2a
   2c6ac:	1abf1a9f 	.word	0x1abf1a9f
   2c6b0:	bf94429a 	.word	0xbf94429a
   2c6b4:	68e52500 	.word	0x68e52500
   2c6b8:	bf88b2bf 	.word	0xbf88b2bf
   2c6bc:	46301b5b 	.word	0x46301b5b
   2c6c0:	b29dbf88 	.word	0xb29dbf88
   2c6c4:	7002f8ad 	.word	0x7002f8ad
   2c6c8:	faaef013 	.word	0xfaaef013
   2c6cc:	1002f8bd 	.word	0x1002f8bd
   2c6d0:	f01368a0 	.word	0xf01368a0
   2c6d4:	68a3faa9 	.word	0x68a3faa9
   2c6d8:	441f6922 	.word	0x441f6922
   2c6dc:	bf084297 	.word	0xbf084297
   2c6e0:	60a768e3 	.word	0x60a768e3
   2c6e4:	60a3bf08 	.word	0x60a3bf08
   2c6e8:	f0402d00 	.word	0xf0402d00
   2c6ec:	4b51808d 	.word	0x4b51808d
   2c6f0:	68a2681c 	.word	0x68a2681c
   2c6f4:	429a6863 	.word	0x429a6863
   2c6f8:	f64bd02c 	.word	0xf64bd02c
   2c6fc:	f8ad63ef 	.word	0xf8ad63ef
   2c700:	78233000 	.word	0x78233000
   2c704:	f88d466e 	.word	0xf88d466e
   2c708:	68633004 	.word	0x68633004
   2c70c:	429a2105 	.word	0x429a2105
   2c710:	6927bf2a 	.word	0x6927bf2a
   2c714:	1abf1a9f 	.word	0x1abf1a9f
   2c718:	bf94429a 	.word	0xbf94429a
   2c71c:	68e52500 	.word	0x68e52500
   2c720:	bf88b2bf 	.word	0xbf88b2bf
   2c724:	46301b5b 	.word	0x46301b5b
   2c728:	b29dbf88 	.word	0xb29dbf88
   2c72c:	7002f8ad 	.word	0x7002f8ad
   2c730:	fa7af013 	.word	0xfa7af013
   2c734:	1002f8bd 	.word	0x1002f8bd
   2c738:	f01368a0 	.word	0xf01368a0
   2c73c:	68a3fa75 	.word	0x68a3fa75
   2c740:	441f6922 	.word	0x441f6922
   2c744:	bf084297 	.word	0xbf084297
   2c748:	60a768e3 	.word	0x60a768e3
   2c74c:	60a3bf08 	.word	0x60a3bf08
   2c750:	d1482d00 	.word	0xd1482d00
   2c754:	681c4b38 	.word	0x681c4b38
   2c758:	686368a2 	.word	0x686368a2
   2c75c:	d02b429a 	.word	0xd02b429a
   2c760:	63eff64b 	.word	0x63eff64b
   2c764:	3000f8ad 	.word	0x3000f8ad
   2c768:	466e7823 	.word	0x466e7823
   2c76c:	3004f88d 	.word	0x3004f88d
   2c770:	21056863 	.word	0x21056863
   2c774:	bf2a429a 	.word	0xbf2a429a
   2c778:	1a9f6927 	.word	0x1a9f6927
   2c77c:	429a1abf 	.word	0x429a1abf
   2c780:	2500bf94 	.word	0x2500bf94
   2c784:	b2bf68e5 	.word	0xb2bf68e5
   2c788:	1b5bbf88 	.word	0x1b5bbf88
   2c78c:	bf884630 	.word	0xbf884630
   2c790:	f8adb29d 	.word	0xf8adb29d
   2c794:	f0137002 	.word	0xf0137002
   2c798:	f8bdfa47 	.word	0xf8bdfa47
   2c79c:	68a01002 	.word	0x68a01002
   2c7a0:	fa42f013 	.word	0xfa42f013
   2c7a4:	692268a3 	.word	0x692268a3
   2c7a8:	4297441f 	.word	0x4297441f
   2c7ac:	68e3bf08 	.word	0x68e3bf08
   2c7b0:	bf0860a7 	.word	0xbf0860a7
   2c7b4:	b90d60a3 	.word	0xb90d60a3
   2c7b8:	bdf0b003 	.word	0xbdf0b003
   2c7bc:	21054630 	.word	0x21054630
   2c7c0:	5002f8ad 	.word	0x5002f8ad
   2c7c4:	fa30f013 	.word	0xfa30f013
   2c7c8:	1002f8bd 	.word	0x1002f8bd
   2c7cc:	f01368e0 	.word	0xf01368e0
   2c7d0:	f8bdfa2b 	.word	0xf8bdfa2b
   2c7d4:	68e32002 	.word	0x68e32002
   2c7d8:	60a34413 	.word	0x60a34413
   2c7dc:	bdf0b003 	.word	0xbdf0b003
   2c7e0:	f996f7f6 	.word	0xf996f7f6
   2c7e4:	2105e74f 	.word	0x2105e74f
   2c7e8:	f8ad4630 	.word	0xf8ad4630
   2c7ec:	f0135002 	.word	0xf0135002
   2c7f0:	f8bdfa1b 	.word	0xf8bdfa1b
   2c7f4:	68e01002 	.word	0x68e01002
   2c7f8:	fa16f013 	.word	0xfa16f013
   2c7fc:	2002f8bd 	.word	0x2002f8bd
   2c800:	441368e3 	.word	0x441368e3
   2c804:	e7a560a3 	.word	0xe7a560a3
   2c808:	46302105 	.word	0x46302105
   2c80c:	5002f8ad 	.word	0x5002f8ad
   2c810:	fa0af013 	.word	0xfa0af013
   2c814:	1002f8bd 	.word	0x1002f8bd
   2c818:	f01368e0 	.word	0xf01368e0
   2c81c:	f8bdfa05 	.word	0xf8bdfa05
   2c820:	68e32002 	.word	0x68e32002
   2c824:	60a34413 	.word	0x60a34413
   2c828:	bf00e761 	.word	0xbf00e761
   2c82c:	2002be64 	.word	0x2002be64
   2c830:	20024b24 	.word	0x20024b24
   2c834:	20024b1c 	.word	0x20024b1c
   2c838:	20024b20 	.word	0x20024b20

0002c83c <ipc_trace_handle>:
   2c83c:	e92d2200 	.word	0xe92d2200
   2c840:	4bb04ff0 	.word	0x4bb04ff0
   2c844:	681bb083 	.word	0x681bb083
   2c848:	695c6919 	.word	0x695c6919
   2c84c:	741a7c18 	.word	0x741a7c18
   2c850:	745a7c58 	.word	0x745a7c58
   2c854:	749a7c98 	.word	0x749a7c98
   2c858:	74da7cd8 	.word	0x74da7cd8
   2c85c:	751a7d18 	.word	0x751a7d18
   2c860:	755a7d58 	.word	0x755a7d58
   2c864:	759a7d98 	.word	0x759a7d98
   2c868:	75da7dd8 	.word	0x75da7dd8
   2c86c:	3901b1b9 	.word	0x3901b1b9
   2c870:	d8142903 	.word	0xd8142903
   2c874:	f011e8df 	.word	0xf011e8df
   2c878:	010300d6 	.word	0x010300d6
   2c87c:	00160004 	.word	0x00160004
   2c880:	20032501 	.word	0x20032501
   2c884:	f06f2200 	.word	0xf06f2200
   2c888:	4c9f015f 	.word	0x4c9f015f
   2c88c:	7a1c7025 	.word	0x7a1c7025
   2c890:	7a587218 	.word	0x7a587218
   2c894:	7a98725a 	.word	0x7a98725a
   2c898:	7ada729a 	.word	0x7ada729a
   2c89c:	b00372d9 	.word	0xb00372d9
   2c8a0:	8ff0e8bd 	.word	0x8ff0e8bd
   2c8a4:	22002104 	.word	0x22002104
   2c8a8:	005ff06f 	.word	0x005ff06f
   2c8ac:	72197a1c 	.word	0x72197a1c
   2c8b0:	725a7a59 	.word	0x725a7a59
   2c8b4:	7a9c4994 	.word	0x7a9c4994
   2c8b8:	7adc729a 	.word	0x7adc729a
   2c8bc:	700a72d8 	.word	0x700a72d8
   2c8c0:	2b00780b 	.word	0x2b00780b
   2c8c4:	8117f000 	.word	0x8117f000
   2c8c8:	681c4b90 	.word	0x681c4b90
   2c8cc:	686368a2 	.word	0x686368a2
   2c8d0:	d02d429a 	.word	0xd02d429a
   2c8d4:	63eff64b 	.word	0x63eff64b
   2c8d8:	3000f8ad 	.word	0x3000f8ad
   2c8dc:	466e7823 	.word	0x466e7823
   2c8e0:	3004f88d 	.word	0x3004f88d
   2c8e4:	21056863 	.word	0x21056863
   2c8e8:	bf2a429a 	.word	0xbf2a429a
   2c8ec:	1a9f6927 	.word	0x1a9f6927
   2c8f0:	429a1abf 	.word	0x429a1abf
   2c8f4:	2500bf94 	.word	0x2500bf94
   2c8f8:	b2bf68e5 	.word	0xb2bf68e5
   2c8fc:	1b5bbf88 	.word	0x1b5bbf88
   2c900:	bf884630 	.word	0xbf884630
   2c904:	f8adb29d 	.word	0xf8adb29d
   2c908:	f0137002 	.word	0xf0137002
   2c90c:	f8bdf98d 	.word	0xf8bdf98d
   2c910:	68a01002 	.word	0x68a01002
   2c914:	f988f013 	.word	0xf988f013
   2c918:	692268a3 	.word	0x692268a3
   2c91c:	4297441f 	.word	0x4297441f
   2c920:	68e3bf08 	.word	0x68e3bf08
   2c924:	bf0860a7 	.word	0xbf0860a7
   2c928:	2d0060a3 	.word	0x2d0060a3
   2c92c:	80d2f040 	.word	0x80d2f040
   2c930:	681c4b77 	.word	0x681c4b77
   2c934:	686368a2 	.word	0x686368a2
   2c938:	d02d429a 	.word	0xd02d429a
   2c93c:	63eff64b 	.word	0x63eff64b
   2c940:	3000f8ad 	.word	0x3000f8ad
   2c944:	466e7823 	.word	0x466e7823
   2c948:	3004f88d 	.word	0x3004f88d
   2c94c:	21056863 	.word	0x21056863
   2c950:	bf2a429a 	.word	0xbf2a429a
   2c954:	1a9f6927 	.word	0x1a9f6927
   2c958:	429a1abf 	.word	0x429a1abf
   2c95c:	2500bf94 	.word	0x2500bf94
   2c960:	b2bf68e5 	.word	0xb2bf68e5
   2c964:	1b5bbf88 	.word	0x1b5bbf88
   2c968:	bf884630 	.word	0xbf884630
   2c96c:	f8adb29d 	.word	0xf8adb29d
   2c970:	f0137002 	.word	0xf0137002
   2c974:	f8bdf959 	.word	0xf8bdf959
   2c978:	68a01002 	.word	0x68a01002
   2c97c:	f954f013 	.word	0xf954f013
   2c980:	692268a3 	.word	0x692268a3
   2c984:	4297441f 	.word	0x4297441f
   2c988:	68e3bf08 	.word	0x68e3bf08
   2c98c:	bf0860a7 	.word	0xbf0860a7
   2c990:	2d0060a3 	.word	0x2d0060a3
   2c994:	808df040 	.word	0x808df040
   2c998:	681c4b5e 	.word	0x681c4b5e
   2c99c:	686368a2 	.word	0x686368a2
   2c9a0:	f43f429a 	.word	0xf43f429a
   2c9a4:	f64baf7c 	.word	0xf64baf7c
   2c9a8:	f8ad63ef 	.word	0xf8ad63ef
   2c9ac:	78233000 	.word	0x78233000
   2c9b0:	f88d466e 	.word	0xf88d466e
   2c9b4:	68633004 	.word	0x68633004
   2c9b8:	429a2105 	.word	0x429a2105
   2c9bc:	6927bf2a 	.word	0x6927bf2a
   2c9c0:	1abf1a9f 	.word	0x1abf1a9f
   2c9c4:	bf94429a 	.word	0xbf94429a
   2c9c8:	68e52500 	.word	0x68e52500
   2c9cc:	bf88b2bf 	.word	0xbf88b2bf
   2c9d0:	46301b5b 	.word	0x46301b5b
   2c9d4:	b29dbf88 	.word	0xb29dbf88
   2c9d8:	7002f8ad 	.word	0x7002f8ad
   2c9dc:	f924f013 	.word	0xf924f013
   2c9e0:	1002f8bd 	.word	0x1002f8bd
   2c9e4:	f01368a0 	.word	0xf01368a0
   2c9e8:	68a3f91f 	.word	0x68a3f91f
   2c9ec:	441f6922 	.word	0x441f6922
   2c9f0:	bf084297 	.word	0xbf084297
   2c9f4:	60a768e3 	.word	0x60a768e3
   2c9f8:	60a3bf08 	.word	0x60a3bf08
   2c9fc:	f43f2d00 	.word	0xf43f2d00
   2ca00:	2105af4e 	.word	0x2105af4e
   2ca04:	f8ad4630 	.word	0xf8ad4630
   2ca08:	f0135002 	.word	0xf0135002
   2ca0c:	f8bdf90d 	.word	0xf8bdf90d
   2ca10:	68e01002 	.word	0x68e01002
   2ca14:	f908f013 	.word	0xf908f013
   2ca18:	2002f8bd 	.word	0x2002f8bd
   2ca1c:	441368e3 	.word	0x441368e3
   2ca20:	e73c60a3 	.word	0xe73c60a3
   2ca24:	78114a38 	.word	0x78114a38
   2ca28:	2100b109 	.word	0x2100b109
   2ca2c:	68a57011 	.word	0x68a57011
   2ca30:	d0392d00 	.word	0xd0392d00
   2ca34:	0c00f04f 	.word	0x0c00f04f
   2ca38:	a0d4f8df 	.word	0xa0d4f8df
   2ca3c:	b0ccf8df 	.word	0xb0ccf8df
   2ca40:	46e14934 	.word	0x46e14934
   2ca44:	46624666 	.word	0x46624666
   2ca48:	e000f8d1 	.word	0xe000f8d1
   2ca4c:	8000f8da 	.word	0x8000f8da
   2ca50:	7000f8db 	.word	0x7000f8db
   2ca54:	2963e008 	.word	0x2963e008
   2ca58:	2961d016 	.word	0x2961d016
   2ca5c:	4607bf04 	.word	0x4607bf04
   2ca60:	32012601 	.word	0x32012601
   2ca64:	d01342aa 	.word	0xd01342aa
   2ca68:	eb041c91 	.word	0xeb041c91
   2ca6c:	68480181 	.word	0x68480181
   2ca70:	29627801 	.word	0x29627801
   2ca74:	4680d1ef 	.word	0x4680d1ef
   2ca78:	0901f04f 	.word	0x0901f04f
   2ca7c:	f7f6e7f1 	.word	0xf7f6e7f1
   2ca80:	b003f83f 	.word	0xb003f83f
   2ca84:	8ff0e8bd 	.word	0x8ff0e8bd
   2ca88:	f04f4686 	.word	0xf04f4686
   2ca8c:	e7e80c01 	.word	0xe7e80c01
   2ca90:	f1b9bba6 	.word	0xf1b9bba6
   2ca94:	d0010f00 	.word	0xd0010f00
   2ca98:	8000f8ca 	.word	0x8000f8ca
   2ca9c:	0f00f1bc 	.word	0x0f00f1bc
   2caa0:	4a1cd002 	.word	0x4a1cd002
   2caa4:	e000f8c2 	.word	0xe000f8c2
   2caa8:	22002001 	.word	0x22002001
   2caac:	015ff06f 	.word	0x015ff06f
   2cab0:	2105e6ed 	.word	0x2105e6ed
   2cab4:	f8ad4630 	.word	0xf8ad4630
   2cab8:	f0135002 	.word	0xf0135002
   2cabc:	f8bdf8b5 	.word	0xf8bdf8b5
   2cac0:	68e01002 	.word	0x68e01002
   2cac4:	f8b0f013 	.word	0xf8b0f013
   2cac8:	2002f8bd 	.word	0x2002f8bd
   2cacc:	441368e3 	.word	0x441368e3
   2cad0:	e76160a3 	.word	0xe76160a3
   2cad4:	46302105 	.word	0x46302105
   2cad8:	5002f8ad 	.word	0x5002f8ad
   2cadc:	f8a4f013 	.word	0xf8a4f013
   2cae0:	1002f8bd 	.word	0x1002f8bd
   2cae4:	f01368e0 	.word	0xf01368e0
   2cae8:	f8bdf89f 	.word	0xf8bdf89f
   2caec:	68e32002 	.word	0x68e32002
   2caf0:	60a34413 	.word	0x60a34413
   2caf4:	f7f6e71c 	.word	0xf7f6e71c
   2caf8:	e6e5f80b 	.word	0xe6e5f80b
   2cafc:	7000f8cb 	.word	0x7000f8cb
   2cb00:	bf00e7c7 	.word	0xbf00e7c7
   2cb04:	20024b28 	.word	0x20024b28
   2cb08:	2002be64 	.word	0x2002be64
   2cb0c:	20024b24 	.word	0x20024b24
   2cb10:	20024b1c 	.word	0x20024b1c
   2cb14:	20024b20 	.word	0x20024b20

0002cb18 <rpc_trace_coredump_in_progress>:
   2cb18:	78184b01 	.word	0x78184b01
   2cb1c:	bf004770 	.word	0xbf004770
   2cb20:	2002be64 	.word	0x2002be64

0002cb24 <ecp_modp>:
   2cb24:	6e4bb570 	.word	0x6e4bb570
   2cb28:	2b004604 	.word	0x2b004604
   2cb2c:	6803d03d 	.word	0x6803d03d
   2cb30:	2b00460d 	.word	0x2b00460d
   2cb34:	4620db2f 	.word	0x4620db2f
   2cb38:	fe88f005 	.word	0xfe88f005
   2cb3c:	ebb06dab 	.word	0xebb06dab
   2cb40:	d82d0f43 	.word	0xd82d0f43
   2cb44:	46206e6b 	.word	0x46206e6b
   2cb48:	46064798 	.word	0x46064798
   2cb4c:	3504bb08 	.word	0x3504bb08
   2cb50:	2100e00a 	.word	0x2100e00a
   2cb54:	f0064620 	.word	0xf0064620
   2cb58:	b1a0f949 	.word	0xb1a0f949
   2cb5c:	4621462a 	.word	0x4621462a
   2cb60:	f0064620 	.word	0xf0064620
   2cb64:	b9e8fafb 	.word	0xb9e8fafb
   2cb68:	2b006823 	.word	0x2b006823
   2cb6c:	4629dbf1 	.word	0x4629dbf1
   2cb70:	f0064620 	.word	0xf0064620
   2cb74:	2800f8d3 	.word	0x2800f8d3
   2cb78:	462adb0b 	.word	0x462adb0b
   2cb7c:	46204621 	.word	0x46204621
   2cb80:	fa2cf006 	.word	0xfa2cf006
   2cb84:	4629b970 	.word	0x4629b970
   2cb88:	f0064620 	.word	0xf0064620
   2cb8c:	2800f8c7 	.word	0x2800f8c7
   2cb90:	4630daf3 	.word	0x4630daf3
   2cb94:	2100bd70 	.word	0x2100bd70
   2cb98:	f928f006 	.word	0xf928f006
   2cb9c:	d0ca2800 	.word	0xd0ca2800
   2cba0:	e7f64e05 	.word	0xe7f64e05
   2cba4:	46304606 	.word	0x46304606
   2cba8:	1d0abd70 	.word	0x1d0abd70
   2cbac:	4070e8bd 	.word	0x4070e8bd
   2cbb0:	f0074601 	.word	0xf0074601
   2cbb4:	bf00b8cf 	.word	0xbf00b8cf
   2cbb8:	ffffb080 	.word	0xffffb080

0002cbbc <ecp_double_jac>:
   2cbbc:	43f0e92d 	.word	0x43f0e92d
   2cbc0:	b08d4606 	.word	0xb08d4606
   2cbc4:	46884668 	.word	0x46884668
   2cbc8:	f0054615 	.word	0xf0054615
   2cbcc:	a803fbe5 	.word	0xa803fbe5
   2cbd0:	fbe2f005 	.word	0xfbe2f005
   2cbd4:	f005a806 	.word	0xf005a806
   2cbd8:	a809fbdf 	.word	0xa809fbdf
   2cbdc:	fbdcf005 	.word	0xfbdcf005
   2cbe0:	2b0069b3 	.word	0x2b0069b3
   2cbe4:	80b2f000 	.word	0x80b2f000
   2cbe8:	4629462a 	.word	0x4629462a
   2cbec:	f006a803 	.word	0xf006a803
   2cbf0:	4604fbe9 	.word	0x4604fbe9
   2cbf4:	4668b178 	.word	0x4668b178
   2cbf8:	fbd6f005 	.word	0xfbd6f005
   2cbfc:	f005a803 	.word	0xf005a803
   2cc00:	a806fbd3 	.word	0xa806fbd3
   2cc04:	fbd0f005 	.word	0xfbd0f005
   2cc08:	f005a809 	.word	0xf005a809
   2cc0c:	4620fbcd 	.word	0x4620fbcd
   2cc10:	e8bdb00d 	.word	0xe8bdb00d
   2cc14:	463183f0 	.word	0x463183f0
   2cc18:	f7ffa803 	.word	0xf7ffa803
   2cc1c:	4604ff83 	.word	0x4604ff83
   2cc20:	d1e82800 	.word	0xd1e82800
   2cc24:	a9032203 	.word	0xa9032203
   2cc28:	f0064668 	.word	0xf0064668
   2cc2c:	4604fcc3 	.word	0x4604fcc3
   2cc30:	d1e02800 	.word	0xd1e02800
   2cc34:	e0071d37 	.word	0xe0071d37
   2cc38:	4669463a 	.word	0x4669463a
   2cc3c:	f0064668 	.word	0xf0064668
   2cc40:	4604f9cd 	.word	0x4604f9cd
   2cc44:	d1d62800 	.word	0xd1d62800
   2cc48:	46684639 	.word	0x46684639
   2cc4c:	f866f006 	.word	0xf866f006
   2cc50:	daf12800 	.word	0xdaf12800
   2cc54:	0910f106 	.word	0x0910f106
   2cc58:	21004648 	.word	0x21004648
   2cc5c:	f8c6f006 	.word	0xf8c6f006
   2cc60:	f0402800 	.word	0xf0402800
   2cc64:	f10580e2 	.word	0xf10580e2
   2cc68:	464a090c 	.word	0x464a090c
   2cc6c:	a8064649 	.word	0xa8064649
   2cc70:	fba8f006 	.word	0xfba8f006
   2cc74:	28004604 	.word	0x28004604
   2cc78:	4631d1bd 	.word	0x4631d1bd
   2cc7c:	f7ffa806 	.word	0xf7ffa806
   2cc80:	4604ff51 	.word	0x4604ff51
   2cc84:	d1b62800 	.word	0xd1b62800
   2cc88:	a8062101 	.word	0xa8062101
   2cc8c:	ff20f005 	.word	0xff20f005
   2cc90:	b1404604 	.word	0xb1404604
   2cc94:	a906e7af 	.word	0xa906e7af
   2cc98:	4608463a 	.word	0x4608463a
   2cc9c:	f99ef006 	.word	0xf99ef006
   2cca0:	28004604 	.word	0x28004604
   2cca4:	4639d1a7 	.word	0x4639d1a7
   2cca8:	f006a806 	.word	0xf006a806
   2ccac:	2800f837 	.word	0x2800f837
   2ccb0:	aa06daf1 	.word	0xaa06daf1
   2ccb4:	a8034629 	.word	0xa8034629
   2ccb8:	fb84f006 	.word	0xfb84f006
   2ccbc:	28004604 	.word	0x28004604
   2ccc0:	4631d199 	.word	0x4631d199
   2ccc4:	f7ffa803 	.word	0xf7ffa803
   2ccc8:	4604ff2d 	.word	0x4604ff2d
   2cccc:	d1922800 	.word	0xd1922800
   2ccd0:	a8032101 	.word	0xa8032101
   2ccd4:	fefcf005 	.word	0xfefcf005
   2ccd8:	b1404604 	.word	0xb1404604
   2ccdc:	a903e78b 	.word	0xa903e78b
   2cce0:	4608463a 	.word	0x4608463a
   2cce4:	f97af006 	.word	0xf97af006
   2cce8:	28004604 	.word	0x28004604
   2ccec:	4639d183 	.word	0x4639d183
   2ccf0:	f006a803 	.word	0xf006a803
   2ccf4:	2800f813 	.word	0x2800f813
   2ccf8:	aa06daf1 	.word	0xaa06daf1
   2ccfc:	a8094611 	.word	0xa8094611
   2cd00:	fb60f006 	.word	0xfb60f006
   2cd04:	28004604 	.word	0x28004604
   2cd08:	af75f47f 	.word	0xaf75f47f
   2cd0c:	a8094631 	.word	0xa8094631
   2cd10:	ff08f7ff 	.word	0xff08f7ff
   2cd14:	28004604 	.word	0x28004604
   2cd18:	af6df47f 	.word	0xaf6df47f
   2cd1c:	a8092101 	.word	0xa8092101
   2cd20:	fed6f005 	.word	0xfed6f005
   2cd24:	28004604 	.word	0x28004604
   2cd28:	af65f47f 	.word	0xaf65f47f
   2cd2c:	a8094639 	.word	0xa8094639
   2cd30:	fff4f005 	.word	0xfff4f005
   2cd34:	f2c02800 	.word	0xf2c02800
   2cd38:	a90980c5 	.word	0xa90980c5
   2cd3c:	4608463a 	.word	0x4608463a
   2cd40:	f94cf006 	.word	0xf94cf006
   2cd44:	28004604 	.word	0x28004604
   2cd48:	e754d0f0 	.word	0xe754d0f0
   2cd4c:	0218f105 	.word	0x0218f105
   2cd50:	a8034611 	.word	0xa8034611
   2cd54:	fb36f006 	.word	0xfb36f006
   2cd58:	28004604 	.word	0x28004604
   2cd5c:	af4bf47f 	.word	0xaf4bf47f
   2cd60:	a8034631 	.word	0xa8034631
   2cd64:	fedef7ff 	.word	0xfedef7ff
   2cd68:	28004604 	.word	0x28004604
   2cd6c:	af43f47f 	.word	0xaf43f47f
   2cd70:	4629aa03 	.word	0x4629aa03
   2cd74:	f006a806 	.word	0xf006a806
   2cd78:	4604f9f1 	.word	0x4604f9f1
   2cd7c:	f47f2800 	.word	0xf47f2800
   2cd80:	1d37af3a 	.word	0x1d37af3a
   2cd84:	a906e008 	.word	0xa906e008
   2cd88:	4608463a 	.word	0x4608463a
   2cd8c:	f926f006 	.word	0xf926f006
   2cd90:	28004604 	.word	0x28004604
   2cd94:	af2ff47f 	.word	0xaf2ff47f
   2cd98:	a8064639 	.word	0xa8064639
   2cd9c:	ffbef005 	.word	0xffbef005
   2cda0:	daf02800 	.word	0xdaf02800
   2cda4:	4629aa03 	.word	0x4629aa03
   2cda8:	f006a809 	.word	0xf006a809
   2cdac:	4604fa4b 	.word	0x4604fa4b
   2cdb0:	e720b170 	.word	0xe720b170
   2cdb4:	a8092100 	.word	0xa8092100
   2cdb8:	f818f006 	.word	0xf818f006
   2cdbc:	a909b158 	.word	0xa909b158
   2cdc0:	4608463a 	.word	0x4608463a
   2cdc4:	f9caf006 	.word	0xf9caf006
   2cdc8:	28004604 	.word	0x28004604
   2cdcc:	af13f47f 	.word	0xaf13f47f
   2cdd0:	2b009b09 	.word	0x2b009b09
   2cdd4:	aa09dbee 	.word	0xaa09dbee
   2cdd8:	a803a906 	.word	0xa803a906
   2cddc:	faf2f006 	.word	0xfaf2f006
   2cde0:	28004604 	.word	0x28004604
   2cde4:	af07f47f 	.word	0xaf07f47f
   2cde8:	a8034631 	.word	0xa8034631
   2cdec:	fe9af7ff 	.word	0xfe9af7ff
   2cdf0:	28004604 	.word	0x28004604
   2cdf4:	aefff47f 	.word	0xaefff47f
   2cdf8:	a9032203 	.word	0xa9032203
   2cdfc:	f0064668 	.word	0xf0064668
   2ce00:	4604fbd9 	.word	0x4604fbd9
   2ce04:	f47f2800 	.word	0xf47f2800
   2ce08:	4639aef6 	.word	0x4639aef6
   2ce0c:	f0054668 	.word	0xf0054668
   2ce10:	2800ff85 	.word	0x2800ff85
   2ce14:	af27f6ff 	.word	0xaf27f6ff
   2ce18:	4669463a 	.word	0x4669463a
   2ce1c:	f0064668 	.word	0xf0064668
   2ce20:	4604f8dd 	.word	0x4604f8dd
   2ce24:	d0f02800 	.word	0xd0f02800
   2ce28:	f105e6e5 	.word	0xf105e6e5
   2ce2c:	46110218 	.word	0x46110218
   2ce30:	f006a803 	.word	0xf006a803
   2ce34:	4604fac7 	.word	0x4604fac7
   2ce38:	f47f2800 	.word	0xf47f2800
   2ce3c:	4631aedc 	.word	0x4631aedc
   2ce40:	f7ffa803 	.word	0xf7ffa803
   2ce44:	4604fe6f 	.word	0x4604fe6f
   2ce48:	f47f2800 	.word	0xf47f2800
   2ce4c:	aa03aed4 	.word	0xaa03aed4
   2ce50:	a8064611 	.word	0xa8064611
   2ce54:	fab6f006 	.word	0xfab6f006
   2ce58:	28004604 	.word	0x28004604
   2ce5c:	aecbf47f 	.word	0xaecbf47f
   2ce60:	a8064631 	.word	0xa8064631
   2ce64:	fe5ef7ff 	.word	0xfe5ef7ff
   2ce68:	28004604 	.word	0x28004604
   2ce6c:	aec3f47f 	.word	0xaec3f47f
   2ce70:	a906464a 	.word	0xa906464a
   2ce74:	f006a803 	.word	0xf006a803
   2ce78:	4604faa5 	.word	0x4604faa5
   2ce7c:	f47f2800 	.word	0xf47f2800
   2ce80:	4631aeba 	.word	0x4631aeba
   2ce84:	f7ffa803 	.word	0xf7ffa803
   2ce88:	4604fe4d 	.word	0x4604fe4d
   2ce8c:	f47f2800 	.word	0xf47f2800
   2ce90:	aa03aeb2 	.word	0xaa03aeb2
   2ce94:	46684669 	.word	0x46684669
   2ce98:	f960f006 	.word	0xf960f006
   2ce9c:	28004604 	.word	0x28004604
   2cea0:	aea9f47f 	.word	0xaea9f47f
   2cea4:	46684639 	.word	0x46684639
   2cea8:	ff38f005 	.word	0xff38f005
   2ceac:	f6ff2800 	.word	0xf6ff2800
   2ceb0:	463aaeda 	.word	0x463aaeda
   2ceb4:	46684669 	.word	0x46684669
   2ceb8:	f890f006 	.word	0xf890f006
   2cebc:	28004604 	.word	0x28004604
   2cec0:	e698d0f0 	.word	0xe698d0f0
   2cec4:	4669466a 	.word	0x4669466a
   2cec8:	f006a806 	.word	0xf006a806
   2cecc:	4604fa7b 	.word	0x4604fa7b
   2ced0:	f47f2800 	.word	0xf47f2800
   2ced4:	4631ae90 	.word	0x4631ae90
   2ced8:	f7ffa806 	.word	0xf7ffa806
   2cedc:	4604fe23 	.word	0x4604fe23
   2cee0:	f47f2800 	.word	0xf47f2800
   2cee4:	a906ae88 	.word	0xa906ae88
   2cee8:	4608aa03 	.word	0x4608aa03
   2ceec:	f9aaf006 	.word	0xf9aaf006
   2cef0:	28004604 	.word	0x28004604
   2cef4:	ae7ff47f 	.word	0xae7ff47f
   2cef8:	2b009b06 	.word	0x2b009b06
   2cefc:	2100da0d 	.word	0x2100da0d
   2cf00:	f005a806 	.word	0xf005a806
   2cf04:	b140ff73 	.word	0xb140ff73
   2cf08:	463aa906 	.word	0x463aa906
   2cf0c:	f0064608 	.word	0xf0064608
   2cf10:	4604f925 	.word	0x4604f925
   2cf14:	d0ef2800 	.word	0xd0ef2800
   2cf18:	a906e66d 	.word	0xa906e66d
   2cf1c:	4608aa03 	.word	0x4608aa03
   2cf20:	f990f006 	.word	0xf990f006
   2cf24:	28004604 	.word	0x28004604
   2cf28:	ae65f47f 	.word	0xae65f47f
   2cf2c:	2b009b06 	.word	0x2b009b06
   2cf30:	2100da0d 	.word	0x2100da0d
   2cf34:	f005a806 	.word	0xf005a806
   2cf38:	b140ff59 	.word	0xb140ff59
   2cf3c:	463aa906 	.word	0x463aa906
   2cf40:	f0064608 	.word	0xf0064608
   2cf44:	4604f90b 	.word	0x4604f90b
   2cf48:	d0ef2800 	.word	0xd0ef2800
   2cf4c:	a903e653 	.word	0xa903e653
   2cf50:	4608aa06 	.word	0x4608aa06
   2cf54:	f976f006 	.word	0xf976f006
   2cf58:	28004604 	.word	0x28004604
   2cf5c:	ae4bf47f 	.word	0xae4bf47f
   2cf60:	2b009b03 	.word	0x2b009b03
   2cf64:	2100da0d 	.word	0x2100da0d
   2cf68:	f005a803 	.word	0xf005a803
   2cf6c:	b140ff3f 	.word	0xb140ff3f
   2cf70:	463aa903 	.word	0x463aa903
   2cf74:	f0064608 	.word	0xf0064608
   2cf78:	4604f8f1 	.word	0x4604f8f1
   2cf7c:	d0ef2800 	.word	0xd0ef2800
   2cf80:	a903e639 	.word	0xa903e639
   2cf84:	4608466a 	.word	0x4608466a
   2cf88:	fa1cf006 	.word	0xfa1cf006
   2cf8c:	28004604 	.word	0x28004604
   2cf90:	ae31f47f 	.word	0xae31f47f
   2cf94:	a8034631 	.word	0xa8034631
   2cf98:	fdc4f7ff 	.word	0xfdc4f7ff
   2cf9c:	28004604 	.word	0x28004604
   2cfa0:	ae29f47f 	.word	0xae29f47f
   2cfa4:	aa09a903 	.word	0xaa09a903
   2cfa8:	f0064608 	.word	0xf0064608
   2cfac:	4604f94b 	.word	0x4604f94b
   2cfb0:	f47f2800 	.word	0xf47f2800
   2cfb4:	9b03ae20 	.word	0x9b03ae20
   2cfb8:	da0d2b00 	.word	0xda0d2b00
   2cfbc:	a8032100 	.word	0xa8032100
   2cfc0:	ff14f005 	.word	0xff14f005
   2cfc4:	a903b140 	.word	0xa903b140
   2cfc8:	4608463a 	.word	0x4608463a
   2cfcc:	f8c6f006 	.word	0xf8c6f006
   2cfd0:	28004604 	.word	0x28004604
   2cfd4:	e60ed0ef 	.word	0xe60ed0ef
   2cfd8:	0218f105 	.word	0x0218f105
   2cfdc:	a8094649 	.word	0xa8094649
   2cfe0:	f9f0f006 	.word	0xf9f0f006
   2cfe4:	28004604 	.word	0x28004604
   2cfe8:	ae05f47f 	.word	0xae05f47f
   2cfec:	a8094631 	.word	0xa8094631
   2cff0:	fd98f7ff 	.word	0xfd98f7ff
   2cff4:	28004604 	.word	0x28004604
   2cff8:	adfdf47f 	.word	0xadfdf47f
   2cffc:	a8092101 	.word	0xa8092101
   2d000:	fd66f005 	.word	0xfd66f005
   2d004:	28004604 	.word	0x28004604
   2d008:	adf5f47f 	.word	0xadf5f47f
   2d00c:	a8094639 	.word	0xa8094639
   2d010:	fe84f005 	.word	0xfe84f005
   2d014:	db082800 	.word	0xdb082800
   2d018:	463aa909 	.word	0x463aa909
   2d01c:	f0054608 	.word	0xf0054608
   2d020:	4604ffdd 	.word	0x4604ffdd
   2d024:	d0f12800 	.word	0xd0f12800
   2d028:	a906e5e5 	.word	0xa906e5e5
   2d02c:	f0054640 	.word	0xf0054640
   2d030:	4604fa37 	.word	0x4604fa37
   2d034:	f47f2800 	.word	0xf47f2800
   2d038:	a903adde 	.word	0xa903adde
   2d03c:	000cf108 	.word	0x000cf108
   2d040:	fa2ef005 	.word	0xfa2ef005
   2d044:	28004604 	.word	0x28004604
   2d048:	add5f47f 	.word	0xadd5f47f
   2d04c:	0018f108 	.word	0x0018f108
   2d050:	f005a909 	.word	0xf005a909
   2d054:	4604fa25 	.word	0x4604fa25
   2d058:	bf00e5cd 	.word	0xbf00e5cd

0002d05c <ecp_normalize_jac>:
   2d05c:	f101b5f0 	.word	0xf101b5f0
   2d060:	b0870518 	.word	0xb0870518
   2d064:	4607460e 	.word	0x4607460e
   2d068:	46282100 	.word	0x46282100
   2d06c:	febef005 	.word	0xfebef005
   2d070:	4604b918 	.word	0x4604b918
   2d074:	b0074620 	.word	0xb0074620
   2d078:	4668bdf0 	.word	0x4668bdf0
   2d07c:	f98cf005 	.word	0xf98cf005
   2d080:	f005a803 	.word	0xf005a803
   2d084:	4668f989 	.word	0x4668f989
   2d088:	46291d3a 	.word	0x46291d3a
   2d08c:	f9b8f007 	.word	0xf9b8f007
   2d090:	b1404604 	.word	0xb1404604
   2d094:	f0054668 	.word	0xf0054668
   2d098:	a803f987 	.word	0xa803f987
   2d09c:	f984f005 	.word	0xf984f005
   2d0a0:	b0074620 	.word	0xb0074620
   2d0a4:	466abdf0 	.word	0x466abdf0
   2d0a8:	a8034669 	.word	0xa8034669
   2d0ac:	f98af006 	.word	0xf98af006
   2d0b0:	28004604 	.word	0x28004604
   2d0b4:	4639d1ee 	.word	0x4639d1ee
   2d0b8:	f7ffa803 	.word	0xf7ffa803
   2d0bc:	4604fd33 	.word	0x4604fd33
   2d0c0:	d1e72800 	.word	0xd1e72800
   2d0c4:	4631aa03 	.word	0x4631aa03
   2d0c8:	f0064630 	.word	0xf0064630
   2d0cc:	4604f97b 	.word	0x4604f97b
   2d0d0:	d1df2800 	.word	0xd1df2800
   2d0d4:	46304639 	.word	0x46304639
   2d0d8:	fd24f7ff 	.word	0xfd24f7ff
   2d0dc:	28004604 	.word	0x28004604
   2d0e0:	360cd1d8 	.word	0x360cd1d8
   2d0e4:	46304631 	.word	0x46304631
   2d0e8:	f006aa03 	.word	0xf006aa03
   2d0ec:	4604f96b 	.word	0x4604f96b
   2d0f0:	d1cf2800 	.word	0xd1cf2800
   2d0f4:	46304639 	.word	0x46304639
   2d0f8:	fd14f7ff 	.word	0xfd14f7ff
   2d0fc:	28004604 	.word	0x28004604
   2d100:	466ad1c8 	.word	0x466ad1c8
   2d104:	46304631 	.word	0x46304631
   2d108:	f95cf006 	.word	0xf95cf006
   2d10c:	28004604 	.word	0x28004604
   2d110:	4639d1c0 	.word	0x4639d1c0
   2d114:	f7ff4630 	.word	0xf7ff4630
   2d118:	4604fd05 	.word	0x4604fd05
   2d11c:	d1b92800 	.word	0xd1b92800
   2d120:	21014628 	.word	0x21014628
   2d124:	fb48f005 	.word	0xfb48f005
   2d128:	e7b34604 	.word	0xe7b34604

0002d12c <ecp_normalize_jac_many.part.3>:
   2d12c:	4ff0e92d 	.word	0x4ff0e92d
   2d130:	b08b4682 	.word	0xb08b4682
   2d134:	4610468b 	.word	0x4610468b
   2d138:	4616210c 	.word	0x4616210c
   2d13c:	fd80f008 	.word	0xfd80f008
   2d140:	f0002800 	.word	0xf0002800
   2d144:	468080fe 	.word	0x468080fe
   2d148:	f005a801 	.word	0xf005a801
   2d14c:	a804f925 	.word	0xa804f925
   2d150:	f922f005 	.word	0xf922f005
   2d154:	f005a807 	.word	0xf005a807
   2d158:	f8dbf91f 	.word	0xf8dbf91f
   2d15c:	46401000 	.word	0x46401000
   2d160:	f0053118 	.word	0xf0053118
   2d164:	4604f99d 	.word	0x4604f99d
   2d168:	2e01bb60 	.word	0x2e01bb60
   2d16c:	46d9d946 	.word	0x46d9d946
   2d170:	f1082701 	.word	0xf1082701
   2d174:	e008050c 	.word	0xe008050c
   2d178:	46514628 	.word	0x46514628
   2d17c:	fcd2f7ff 	.word	0xfcd2f7ff
   2d180:	4604350c 	.word	0x4604350c
   2d184:	42beb968 	.word	0x42beb968
   2d188:	f859d038 	.word	0xf859d038
   2d18c:	f1a52f04 	.word	0xf1a52f04
   2d190:	3218010c 	.word	0x3218010c
   2d194:	f0064628 	.word	0xf0064628
   2d198:	3701f915 	.word	0x3701f915
   2d19c:	28004604 	.word	0x28004604
   2d1a0:	a801d0ea 	.word	0xa801d0ea
   2d1a4:	f900f005 	.word	0xf900f005
   2d1a8:	f005a804 	.word	0xf005a804
   2d1ac:	a807f8fd 	.word	0xa807f8fd
   2d1b0:	f8faf005 	.word	0xf8faf005
   2d1b4:	a901e010 	.word	0xa901e010
   2d1b8:	f005a804 	.word	0xf005a804
   2d1bc:	4604f971 	.word	0x4604f971
   2d1c0:	d0532800 	.word	0xd0532800
   2d1c4:	f005a801 	.word	0xf005a801
   2d1c8:	a804f8ef 	.word	0xa804f8ef
   2d1cc:	f8ecf005 	.word	0xf8ecf005
   2d1d0:	f005a807 	.word	0xf005a807
   2d1d4:	b156f8e9 	.word	0xb156f8e9
   2d1d8:	eb064645 	.word	0xeb064645
   2d1dc:	eb080646 	.word	0xeb080646
   2d1e0:	46280686 	.word	0x46280686
   2d1e4:	f005350c 	.word	0xf005350c
   2d1e8:	42b5f8df 	.word	0x42b5f8df
   2d1ec:	4640d1f9 	.word	0x4640d1f9
   2d1f0:	fd3af008 	.word	0xfd3af008
   2d1f4:	b00b4620 	.word	0xb00b4620
   2d1f8:	8ff0e8bd 	.word	0x8ff0e8bd
   2d1fc:	0546eb06 	.word	0x0546eb06
   2d200:	f1a500ad 	.word	0xf1a500ad
   2d204:	4441010c 	.word	0x4441010c
   2d208:	0204f10a 	.word	0x0204f10a
   2d20c:	f007a801 	.word	0xf007a801
   2d210:	4604f8f7 	.word	0x4604f8f7
   2d214:	d1d52800 	.word	0xd1d52800
   2d218:	4380f106 	.word	0x4380f106
   2d21c:	3b013d18 	.word	0x3b013d18
   2d220:	eb0b4445 	.word	0xeb0b4445
   2d224:	1e770b83 	.word	0x1e770b83
   2d228:	d0c42f00 	.word	0xd0c42f00
   2d22c:	a901462a 	.word	0xa901462a
   2d230:	f006a804 	.word	0xf006a804
   2d234:	4604f8c7 	.word	0x4604f8c7
   2d238:	d1c32800 	.word	0xd1c32800
   2d23c:	a8044651 	.word	0xa8044651
   2d240:	fc70f7ff 	.word	0xfc70f7ff
   2d244:	28004604 	.word	0x28004604
   2d248:	f8dbd1bc 	.word	0xf8dbd1bc
   2d24c:	a9012000 	.word	0xa9012000
   2d250:	46083218 	.word	0x46083218
   2d254:	f8b6f006 	.word	0xf8b6f006
   2d258:	28004604 	.word	0x28004604
   2d25c:	4651d1b2 	.word	0x4651d1b2
   2d260:	f7ffa801 	.word	0xf7ffa801
   2d264:	4604fc5f 	.word	0x4604fc5f
   2d268:	d1ab2800 	.word	0xd1ab2800
   2d26c:	4611aa04 	.word	0x4611aa04
   2d270:	f006a807 	.word	0xf006a807
   2d274:	4604f8a7 	.word	0x4604f8a7
   2d278:	d1a32800 	.word	0xd1a32800
   2d27c:	a8074651 	.word	0xa8074651
   2d280:	fc50f7ff 	.word	0xfc50f7ff
   2d284:	28004604 	.word	0x28004604
   2d288:	f8dbd19c 	.word	0xf8dbd19c
   2d28c:	aa071000 	.word	0xaa071000
   2d290:	f0064608 	.word	0xf0064608
   2d294:	4604f897 	.word	0x4604f897
   2d298:	d1932800 	.word	0xd1932800
   2d29c:	f8db4651 	.word	0xf8db4651
   2d2a0:	f7ff0000 	.word	0xf7ff0000
   2d2a4:	4604fc3f 	.word	0x4604fc3f
   2d2a8:	d18b2800 	.word	0xd18b2800
   2d2ac:	1000f8db 	.word	0x1000f8db
   2d2b0:	310caa07 	.word	0x310caa07
   2d2b4:	f0064608 	.word	0xf0064608
   2d2b8:	4604f885 	.word	0x4604f885
   2d2bc:	d1812800 	.word	0xd1812800
   2d2c0:	0000f8db 	.word	0x0000f8db
   2d2c4:	300c4651 	.word	0x300c4651
   2d2c8:	fc2cf7ff 	.word	0xfc2cf7ff
   2d2cc:	28004604 	.word	0x28004604
   2d2d0:	af78f47f 	.word	0xaf78f47f
   2d2d4:	1000f8db 	.word	0x1000f8db
   2d2d8:	310caa04 	.word	0x310caa04
   2d2dc:	f0064608 	.word	0xf0064608
   2d2e0:	4604f871 	.word	0x4604f871
   2d2e4:	f47f2800 	.word	0xf47f2800
   2d2e8:	f8dbaf6d 	.word	0xf8dbaf6d
   2d2ec:	46510000 	.word	0x46510000
   2d2f0:	f7ff300c 	.word	0xf7ff300c
   2d2f4:	4604fc17 	.word	0x4604fc17
   2d2f8:	f47f2800 	.word	0xf47f2800
   2d2fc:	f8daaf63 	.word	0xf8daaf63
   2d300:	f8db1008 	.word	0xf8db1008
   2d304:	f0050000 	.word	0xf0050000
   2d308:	4604f869 	.word	0x4604f869
   2d30c:	f47f2800 	.word	0xf47f2800
   2d310:	f8dbaf59 	.word	0xf8dbaf59
   2d314:	f8da0000 	.word	0xf8da0000
   2d318:	300c1008 	.word	0x300c1008
   2d31c:	f85ef005 	.word	0xf85ef005
   2d320:	28004604 	.word	0x28004604
   2d324:	af4ef47f 	.word	0xaf4ef47f
   2d328:	0000f8db 	.word	0x0000f8db
   2d32c:	30183d0c 	.word	0x30183d0c
   2d330:	0b04f1ab 	.word	0x0b04f1ab
   2d334:	f838f005 	.word	0xf838f005
   2d338:	f43f2f00 	.word	0xf43f2f00
   2d33c:	3f01af43 	.word	0x3f01af43
   2d340:	4c01e772 	.word	0x4c01e772
   2d344:	bf00e756 	.word	0xbf00e756
   2d348:	ffffb280 	.word	0xffffb280

0002d34c <symbol_0002b14>:
   2d34c:	b510b1b8 	.word	0xb510b1b8
   2d350:	227c4604 	.word	0x227c4604
   2d354:	f0132100 	.word	0xf0132100
   2d358:	f104fd23 	.word	0xf104fd23
   2d35c:	f005007c 	.word	0xf005007c
   2d360:	f104f81b 	.word	0xf104f81b
   2d364:	f0050088 	.word	0xf0050088
   2d368:	f104f817 	.word	0xf104f817
   2d36c:	f0050094 	.word	0xf0050094
   2d370:	f104f813 	.word	0xf104f813
   2d374:	e8bd00a0 	.word	0xe8bd00a0
   2d378:	f0054010 	.word	0xf0054010
   2d37c:	4770b80d 	.word	0x4770b80d

0002d380 <symbol_0000ef7>:
   2d380:	d0482800 	.word	0xd0482800
   2d384:	6e03b570 	.word	0x6e03b570
   2d388:	2b014604 	.word	0x2b014604
   2d38c:	6f60d123 	.word	0x6f60d123
   2d390:	6fa2b1c8 	.word	0x6fa2b1c8
   2d394:	2600b1aa 	.word	0x2600b1aa
   2d398:	03c6eb06 	.word	0x03c6eb06
   2d39c:	0583eb10 	.word	0x0583eb10
   2d3a0:	4628d035 	.word	0x4628d035
   2d3a4:	f800f005 	.word	0xf800f005
   2d3a8:	000cf105 	.word	0x000cf105
   2d3ac:	fffcf004 	.word	0xfffcf004
   2d3b0:	0018f105 	.word	0x0018f105
   2d3b4:	fff8f004 	.word	0xfff8f004
   2d3b8:	36016fa2 	.word	0x36016fa2
   2d3bc:	6f604296 	.word	0x6f604296
   2d3c0:	f008d3ea 	.word	0xf008d3ea
   2d3c4:	2200fc51 	.word	0x2200fc51
   2d3c8:	037cf104 	.word	0x037cf104
   2d3cc:	34017022 	.word	0x34017022
   2d3d0:	d1fb429c 	.word	0xd1fb429c
   2d3d4:	3004bd70 	.word	0x3004bd70
   2d3d8:	ffe6f004 	.word	0xffe6f004
   2d3dc:	0010f104 	.word	0x0010f104
   2d3e0:	ffe2f004 	.word	0xffe2f004
   2d3e4:	001cf104 	.word	0x001cf104
   2d3e8:	ffdef004 	.word	0xffdef004
   2d3ec:	0028f104 	.word	0x0028f104
   2d3f0:	ffdaf004 	.word	0xffdaf004
   2d3f4:	0034f104 	.word	0x0034f104
   2d3f8:	ffd6f004 	.word	0xffd6f004
   2d3fc:	0040f104 	.word	0x0040f104
   2d400:	ffd2f004 	.word	0xffd2f004
   2d404:	004cf104 	.word	0x004cf104
   2d408:	ffcef004 	.word	0xffcef004
   2d40c:	3601e7bf 	.word	0x3601e7bf
   2d410:	d3c14296 	.word	0xd3c14296
   2d414:	4770e7d5 	.word	0x4770e7d5

0002d418 <symbol_0001d5f>:
   2d418:	b510b1a8 	.word	0xb510b1a8
   2d41c:	f7ff4604 	.word	0xf7ff4604
   2d420:	f104ffaf 	.word	0xf104ffaf
   2d424:	f004007c 	.word	0xf004007c
   2d428:	f104ffbf 	.word	0xf104ffbf
   2d42c:	f0040088 	.word	0xf0040088
   2d430:	f104ffbb 	.word	0xf104ffbb
   2d434:	f0040094 	.word	0xf0040094
   2d438:	f104ffb7 	.word	0xf104ffb7
   2d43c:	e8bd00a0 	.word	0xe8bd00a0
   2d440:	f0044010 	.word	0xf0044010
   2d444:	4770bfb1 	.word	0x4770bfb1

0002d448 <symbol_000d41f>:
   2d448:	2101b510 	.word	0x2101b510
   2d44c:	f0054604 	.word	0xf0054604
   2d450:	b100f9b3 	.word	0xb100f9b3
   2d454:	2101bd10 	.word	0x2101bd10
   2d458:	000cf104 	.word	0x000cf104
   2d45c:	f9acf005 	.word	0xf9acf005
   2d460:	d1f72800 	.word	0xd1f72800
   2d464:	f1044601 	.word	0xf1044601
   2d468:	e8bd0018 	.word	0xe8bd0018
   2d46c:	f0054010 	.word	0xf0054010
   2d470:	bf00b9a3 	.word	0xbf00b9a3

0002d474 <ecp_add_mixed>:
   2d474:	47f0e92d 	.word	0x47f0e92d
   2d478:	0518f102 	.word	0x0518f102
   2d47c:	4681b096 	.word	0x4681b096
   2d480:	46284688 	.word	0x46284688
   2d484:	46172100 	.word	0x46172100
   2d488:	f005461e 	.word	0xf005461e
   2d48c:	2800fcaf 	.word	0x2800fcaf
   2d490:	6a33d048 	.word	0x6a33d048
   2d494:	f106b18b 	.word	0xf106b18b
   2d498:	46200418 	.word	0x46200418
   2d49c:	f0052100 	.word	0xf0052100
   2d4a0:	2800fca5 	.word	0x2800fca5
   2d4a4:	80d7f000 	.word	0x80d7f000
   2d4a8:	b1336a33 	.word	0xb1336a33
   2d4ac:	21014620 	.word	0x21014620
   2d4b0:	fc9cf005 	.word	0xfc9cf005
   2d4b4:	f0402800 	.word	0xf0402800
   2d4b8:	a80180e7 	.word	0xa80180e7
   2d4bc:	ff6cf004 	.word	0xff6cf004
   2d4c0:	f004a804 	.word	0xf004a804
   2d4c4:	a807ff69 	.word	0xa807ff69
   2d4c8:	ff66f004 	.word	0xff66f004
   2d4cc:	f004a80a 	.word	0xf004a80a
   2d4d0:	a80dff63 	.word	0xa80dff63
   2d4d4:	ff60f004 	.word	0xff60f004
   2d4d8:	f004a810 	.word	0xf004a810
   2d4dc:	a813ff5d 	.word	0xa813ff5d
   2d4e0:	ff5af004 	.word	0xff5af004
   2d4e4:	4629462a 	.word	0x4629462a
   2d4e8:	f005a801 	.word	0xf005a801
   2d4ec:	4604ff6b 	.word	0x4604ff6b
   2d4f0:	a801b380 	.word	0xa801b380
   2d4f4:	ff58f004 	.word	0xff58f004
   2d4f8:	f004a804 	.word	0xf004a804
   2d4fc:	a807ff55 	.word	0xa807ff55
   2d500:	ff52f004 	.word	0xff52f004
   2d504:	f004a80a 	.word	0xf004a80a
   2d508:	a80dff4f 	.word	0xa80dff4f
   2d50c:	ff4cf004 	.word	0xff4cf004
   2d510:	f004a810 	.word	0xf004a810
   2d514:	a813ff49 	.word	0xa813ff49
   2d518:	ff46f004 	.word	0xff46f004
   2d51c:	b0164620 	.word	0xb0164620
   2d520:	87f0e8bd 	.word	0x87f0e8bd
   2d524:	46404631 	.word	0x46404631
   2d528:	ffbaf004 	.word	0xffbaf004
   2d52c:	28004604 	.word	0x28004604
   2d530:	f106d1f4 	.word	0xf106d1f4
   2d534:	f108010c 	.word	0xf108010c
   2d538:	f004000c 	.word	0xf004000c
   2d53c:	4604ffb1 	.word	0x4604ffb1
   2d540:	d1eb2800 	.word	0xd1eb2800
   2d544:	0118f106 	.word	0x0118f106
   2d548:	0018f108 	.word	0x0018f108
   2d54c:	ffa8f004 	.word	0xffa8f004
   2d550:	e7e34604 	.word	0xe7e34604
   2d554:	a8014649 	.word	0xa8014649
   2d558:	fae4f7ff 	.word	0xfae4f7ff
   2d55c:	28004604 	.word	0x28004604
   2d560:	462ad1c7 	.word	0x462ad1c7
   2d564:	a804a901 	.word	0xa804a901
   2d568:	ff2cf005 	.word	0xff2cf005
   2d56c:	28004604 	.word	0x28004604
   2d570:	4649d1bf 	.word	0x4649d1bf
   2d574:	f7ffa804 	.word	0xf7ffa804
   2d578:	4604fad5 	.word	0x4604fad5
   2d57c:	d1b82800 	.word	0xd1b82800
   2d580:	4632a901 	.word	0x4632a901
   2d584:	f0054608 	.word	0xf0054608
   2d588:	4604ff1d 	.word	0x4604ff1d
   2d58c:	d1b02800 	.word	0xd1b02800
   2d590:	a8014649 	.word	0xa8014649
   2d594:	fac6f7ff 	.word	0xfac6f7ff
   2d598:	28004604 	.word	0x28004604
   2d59c:	a904d1a9 	.word	0xa904d1a9
   2d5a0:	020cf106 	.word	0x020cf106
   2d5a4:	f0054608 	.word	0xf0054608
   2d5a8:	4604ff0d 	.word	0x4604ff0d
   2d5ac:	d1a02800 	.word	0xd1a02800
   2d5b0:	a8044649 	.word	0xa8044649
   2d5b4:	fab6f7ff 	.word	0xfab6f7ff
   2d5b8:	28004604 	.word	0x28004604
   2d5bc:	a901d199 	.word	0xa901d199
   2d5c0:	4608463a 	.word	0x4608463a
   2d5c4:	fe3ef005 	.word	0xfe3ef005
   2d5c8:	28004604 	.word	0x28004604
   2d5cc:	f109d191 	.word	0xf109d191
   2d5d0:	e00c0604 	.word	0xe00c0604
   2d5d4:	a8012100 	.word	0xa8012100
   2d5d8:	fc08f005 	.word	0xfc08f005
   2d5dc:	a901b150 	.word	0xa901b150
   2d5e0:	46084632 	.word	0x46084632
   2d5e4:	fdbaf005 	.word	0xfdbaf005
   2d5e8:	28004604 	.word	0x28004604
   2d5ec:	9b01d181 	.word	0x9b01d181
   2d5f0:	dbef2b00 	.word	0xdbef2b00
   2d5f4:	f107a904 	.word	0xf107a904
   2d5f8:	4632060c 	.word	0x4632060c
   2d5fc:	f0054608 	.word	0xf0054608
   2d600:	4604fe21 	.word	0x4604fe21
   2d604:	f47f2800 	.word	0xf47f2800
   2d608:	f109af74 	.word	0xf109af74
   2d60c:	e00d0a04 	.word	0xe00d0a04
   2d610:	a8042100 	.word	0xa8042100
   2d614:	fbeaf005 	.word	0xfbeaf005
   2d618:	a904b158 	.word	0xa904b158
   2d61c:	46084652 	.word	0x46084652
   2d620:	fd9cf005 	.word	0xfd9cf005
   2d624:	28004604 	.word	0x28004604
   2d628:	af63f47f 	.word	0xaf63f47f
   2d62c:	2b009b04 	.word	0x2b009b04
   2d630:	2100dbee 	.word	0x2100dbee
   2d634:	f005a801 	.word	0xf005a801
   2d638:	4601fbd9 	.word	0x4601fbd9
   2d63c:	a804bb30 	.word	0xa804bb30
   2d640:	fbd4f005 	.word	0xfbd4f005
   2d644:	d17f2800 	.word	0xd17f2800
   2d648:	4641463a 	.word	0x4641463a
   2d64c:	f7ff4648 	.word	0xf7ff4648
   2d650:	4604fab5 	.word	0x4604fab5
   2d654:	4639e74d 	.word	0x4639e74d
   2d658:	f0044640 	.word	0xf0044640
   2d65c:	4604ff21 	.word	0x4604ff21
   2d660:	f47f2800 	.word	0xf47f2800
   2d664:	f107af5b 	.word	0xf107af5b
   2d668:	f108010c 	.word	0xf108010c
   2d66c:	f004000c 	.word	0xf004000c
   2d670:	4604ff17 	.word	0x4604ff17
   2d674:	f47f2800 	.word	0xf47f2800
   2d678:	4629af51 	.word	0x4629af51
   2d67c:	0018f108 	.word	0x0018f108
   2d680:	ff0ef004 	.word	0xff0ef004
   2d684:	e7494604 	.word	0xe7494604
   2d688:	e7474c8b 	.word	0xe7474c8b
   2d68c:	aa014629 	.word	0xaa014629
   2d690:	f005a813 	.word	0xf005a813
   2d694:	4604fe97 	.word	0x4604fe97
   2d698:	f47f2800 	.word	0xf47f2800
   2d69c:	4649af2a 	.word	0x4649af2a
   2d6a0:	f7ffa813 	.word	0xf7ffa813
   2d6a4:	4604fa3f 	.word	0x4604fa3f
   2d6a8:	f47f2800 	.word	0xf47f2800
   2d6ac:	aa01af22 	.word	0xaa01af22
   2d6b0:	a8074611 	.word	0xa8074611
   2d6b4:	fe86f005 	.word	0xfe86f005
   2d6b8:	28004604 	.word	0x28004604
   2d6bc:	af19f47f 	.word	0xaf19f47f
   2d6c0:	a8074649 	.word	0xa8074649
   2d6c4:	fa2ef7ff 	.word	0xfa2ef7ff
   2d6c8:	28004604 	.word	0x28004604
   2d6cc:	af11f47f 	.word	0xaf11f47f
   2d6d0:	a907aa01 	.word	0xa907aa01
   2d6d4:	f005a80a 	.word	0xf005a80a
   2d6d8:	4604fe75 	.word	0x4604fe75
   2d6dc:	f47f2800 	.word	0xf47f2800
   2d6e0:	4649af08 	.word	0x4649af08
   2d6e4:	f7ffa80a 	.word	0xf7ffa80a
   2d6e8:	4604fa1d 	.word	0x4604fa1d
   2d6ec:	f47f2800 	.word	0xf47f2800
   2d6f0:	a907af00 	.word	0xa907af00
   2d6f4:	4608463a 	.word	0x4608463a
   2d6f8:	fe64f005 	.word	0xfe64f005
   2d6fc:	28004604 	.word	0x28004604
   2d700:	aef7f47f 	.word	0xaef7f47f
   2d704:	a8074649 	.word	0xa8074649
   2d708:	fa0cf7ff 	.word	0xfa0cf7ff
   2d70c:	28004604 	.word	0x28004604
   2d710:	aeeff47f 	.word	0xaeeff47f
   2d714:	a9072202 	.word	0xa9072202
   2d718:	f005a801 	.word	0xf005a801
   2d71c:	4604ff4b 	.word	0x4604ff4b
   2d720:	f47f2800 	.word	0xf47f2800
   2d724:	f109aee6 	.word	0xf109aee6
   2d728:	46290504 	.word	0x46290504
   2d72c:	f005a801 	.word	0xf005a801
   2d730:	2800faf5 	.word	0x2800faf5
   2d734:	a901db0d 	.word	0xa901db0d
   2d738:	4608462a 	.word	0x4608462a
   2d73c:	fc4ef005 	.word	0xfc4ef005
   2d740:	28004604 	.word	0x28004604
   2d744:	e6d4d0f1 	.word	0xe6d4d0f1
   2d748:	f7ff4640 	.word	0xf7ff4640
   2d74c:	4604fe7d 	.word	0x4604fe7d
   2d750:	aa04e6cf 	.word	0xaa04e6cf
   2d754:	a80d4611 	.word	0xa80d4611
   2d758:	fe34f005 	.word	0xfe34f005
   2d75c:	28004604 	.word	0x28004604
   2d760:	aec7f47f 	.word	0xaec7f47f
   2d764:	a80d4649 	.word	0xa80d4649
   2d768:	f9dcf7ff 	.word	0xf9dcf7ff
   2d76c:	28004604 	.word	0x28004604
   2d770:	aebff47f 	.word	0xaebff47f
   2d774:	aa01a90d 	.word	0xaa01a90d
   2d778:	f0054608 	.word	0xf0054608
   2d77c:	4604fd63 	.word	0x4604fd63
   2d780:	f47f2800 	.word	0xf47f2800
   2d784:	9b0daeb6 	.word	0x9b0daeb6
   2d788:	da0d2b00 	.word	0xda0d2b00
   2d78c:	a80d2100 	.word	0xa80d2100
   2d790:	fb2cf005 	.word	0xfb2cf005
   2d794:	a90db140 	.word	0xa90db140
   2d798:	4608462a 	.word	0x4608462a
   2d79c:	fcdef005 	.word	0xfcdef005
   2d7a0:	28004604 	.word	0x28004604
   2d7a4:	e6a4d0ef 	.word	0xe6a4d0ef
   2d7a8:	aa0aa90d 	.word	0xaa0aa90d
   2d7ac:	f0054608 	.word	0xf0054608
   2d7b0:	4604fd49 	.word	0x4604fd49
   2d7b4:	f47f2800 	.word	0xf47f2800
   2d7b8:	9b0dae9c 	.word	0x9b0dae9c
   2d7bc:	da0d2b00 	.word	0xda0d2b00
   2d7c0:	a80d2100 	.word	0xa80d2100
   2d7c4:	fb12f005 	.word	0xfb12f005
   2d7c8:	a90db140 	.word	0xa90db140
   2d7cc:	4608462a 	.word	0x4608462a
   2d7d0:	fcc4f005 	.word	0xfcc4f005
   2d7d4:	28004604 	.word	0x28004604
   2d7d8:	e68ad0ef 	.word	0xe68ad0ef
   2d7dc:	aa0da907 	.word	0xaa0da907
   2d7e0:	f0054608 	.word	0xf0054608
   2d7e4:	4604fd2f 	.word	0x4604fd2f
   2d7e8:	f47f2800 	.word	0xf47f2800
   2d7ec:	9b07ae82 	.word	0x9b07ae82
   2d7f0:	da0d2b00 	.word	0xda0d2b00
   2d7f4:	a8072100 	.word	0xa8072100
   2d7f8:	faf8f005 	.word	0xfaf8f005
   2d7fc:	a907b140 	.word	0xa907b140
   2d800:	4608462a 	.word	0x4608462a
   2d804:	fcaaf005 	.word	0xfcaaf005
   2d808:	28004604 	.word	0x28004604
   2d80c:	e670d0ef 	.word	0xe670d0ef
   2d810:	aa04a907 	.word	0xaa04a907
   2d814:	f0054608 	.word	0xf0054608
   2d818:	4604fdd5 	.word	0x4604fdd5
   2d81c:	f47f2800 	.word	0xf47f2800
   2d820:	4649ae68 	.word	0x4649ae68
   2d824:	f7ffa807 	.word	0xf7ffa807
   2d828:	4604f97d 	.word	0x4604f97d
   2d82c:	f47f2800 	.word	0xf47f2800
   2d830:	a90aae60 	.word	0xa90aae60
   2d834:	46084632 	.word	0x46084632
   2d838:	fdc4f005 	.word	0xfdc4f005
   2d83c:	28004604 	.word	0x28004604
   2d840:	ae57f47f 	.word	0xae57f47f
   2d844:	a80a4649 	.word	0xa80a4649
   2d848:	f96cf7ff 	.word	0xf96cf7ff
   2d84c:	28004604 	.word	0x28004604
   2d850:	ae4ff47f 	.word	0xae4ff47f
   2d854:	a907aa0a 	.word	0xa907aa0a
   2d858:	f005a810 	.word	0xf005a810
   2d85c:	4604fcf3 	.word	0x4604fcf3
   2d860:	f47f2800 	.word	0xf47f2800
   2d864:	9b10ae46 	.word	0x9b10ae46
   2d868:	da0d2b00 	.word	0xda0d2b00
   2d86c:	a8102100 	.word	0xa8102100
   2d870:	fabcf005 	.word	0xfabcf005
   2d874:	a910b140 	.word	0xa910b140
   2d878:	4608462a 	.word	0x4608462a
   2d87c:	fc6ef005 	.word	0xfc6ef005
   2d880:	28004604 	.word	0x28004604
   2d884:	e634d0ef 	.word	0xe634d0ef
   2d888:	4640a90d 	.word	0x4640a90d
   2d88c:	fe08f004 	.word	0xfe08f004
   2d890:	28004604 	.word	0x28004604
   2d894:	ae2df47f 	.word	0xae2df47f
   2d898:	f108a910 	.word	0xf108a910
   2d89c:	f004000c 	.word	0xf004000c
   2d8a0:	4604fdff 	.word	0x4604fdff
   2d8a4:	f47f2800 	.word	0xf47f2800
   2d8a8:	f108ae24 	.word	0xf108ae24
   2d8ac:	a9130018 	.word	0xa9130018
   2d8b0:	fdf6f004 	.word	0xfdf6f004
   2d8b4:	e61c4604 	.word	0xe61c4604
   2d8b8:	ffffb080 	.word	0xffffb080

0002d8bc <ecp_mul_comb>:
   2d8bc:	4ff0e92d 	.word	0x4ff0e92d
   2d8c0:	46984605 	.word	0x46984605
   2d8c4:	034cf105 	.word	0x034cf105
   2d8c8:	b0e5461c 	.word	0xb0e5461c
   2d8cc:	9104a80d 	.word	0x9104a80d
   2d8d0:	93084617 	.word	0x93084617
   2d8d4:	fd60f004 	.word	0xfd60f004
   2d8d8:	f004a810 	.word	0xf004a810
   2d8dc:	4620fd5d 	.word	0x4620fd5d
   2d8e0:	f0042100 	.word	0xf0042100
   2d8e4:	2801ffa3 	.word	0x2801ffa3
   2d8e8:	f0409007 	.word	0xf0409007
   2d8ec:	6deb81c9 	.word	0x6deb81c9
   2d8f0:	090cf108 	.word	0x090cf108
   2d8f4:	7fc0f5b3 	.word	0x7fc0f5b3
   2d8f8:	2605bf2c 	.word	0x2605bf2c
   2d8fc:	46482604 	.word	0x46482604
   2d900:	0134f105 	.word	0x0134f105
   2d904:	f04fbf2c 	.word	0xf04fbf2c
   2d908:	f04f0a06 	.word	0xf04f0a06
   2d90c:	46b30a05 	.word	0x46b30a05
   2d910:	fa04f005 	.word	0xfa04f005
   2d914:	d0722800 	.word	0xd0722800
   2d918:	42a66dec 	.word	0x42a66dec
   2d91c:	2301d245 	.word	0x2301d245
   2d920:	32fff10b 	.word	0x32fff10b
   2d924:	93024093 	.word	0x93024093
   2d928:	b2db4434 	.word	0xb2db4434
   2d92c:	93033c01 	.word	0x93033c01
   2d930:	fbb42300 	.word	0xfbb42300
   2d934:	9802f4f6 	.word	0x9802f4f6
   2d938:	93059206 	.word	0x93059206
   2d93c:	f0082124 	.word	0xf0082124
   2d940:	9001f97f 	.word	0x9001f97f
   2d944:	d0402800 	.word	0xd0402800
   2d948:	f0044641 	.word	0xf0044641
   2d94c:	f8ddfda9 	.word	0xf8ddfda9
   2d950:	4683a004 	.word	0x4683a004
   2d954:	f0002800 	.word	0xf0002800
   2d958:	9b058086 	.word	0x9b058086
   2d95c:	d17b2b00 	.word	0xd17b2b00
   2d960:	9c012500 	.word	0x9c012500
   2d964:	35019e03 	.word	0x35019e03
   2d968:	4620b154 	.word	0x4620b154
   2d96c:	fd1cf004 	.word	0xfd1cf004
   2d970:	000cf104 	.word	0x000cf104
   2d974:	fd18f004 	.word	0xfd18f004
   2d978:	0018f104 	.word	0x0018f104
   2d97c:	fd14f004 	.word	0xfd14f004
   2d980:	429eb2eb 	.word	0x429eb2eb
   2d984:	0424f104 	.word	0x0424f104
   2d988:	9801d8ed 	.word	0x9801d8ed
   2d98c:	f96cf008 	.word	0xf96cf008
   2d990:	f004a80d 	.word	0xf004a80d
   2d994:	a810fd09 	.word	0xa810fd09
   2d998:	fd06f004 	.word	0xfd06f004
   2d99c:	0f00f1bb 	.word	0x0f00f1bb
   2d9a0:	4658d11b 	.word	0x4658d11b
   2d9a4:	e8bdb065 	.word	0xe8bdb065
   2d9a8:	26028ff0 	.word	0x26028ff0
   2d9ac:	22012300 	.word	0x22012300
   2d9b0:	21244630 	.word	0x21244630
   2d9b4:	6602e9cd 	.word	0x6602e9cd
   2d9b8:	3205e9cd 	.word	0x3205e9cd
   2d9bc:	f940f008 	.word	0xf940f008
   2d9c0:	08643401 	.word	0x08643401
   2d9c4:	28009001 	.word	0x28009001
   2d9c8:	a80dd1be 	.word	0xa80dd1be
   2d9cc:	fcecf004 	.word	0xfcecf004
   2d9d0:	f004a810 	.word	0xf004a810
   2d9d4:	f8dffce9 	.word	0xf8dffce9
   2d9d8:	9c04b644 	.word	0x9c04b644
   2d9dc:	d0e02c00 	.word	0xd0e02c00
   2d9e0:	f0044620 	.word	0xf0044620
   2d9e4:	f104fce1 	.word	0xf104fce1
   2d9e8:	f004000c 	.word	0xf004000c
   2d9ec:	f104fcdd 	.word	0xf104fcdd
   2d9f0:	f0040018 	.word	0xf0040018
   2d9f4:	4658fcd9 	.word	0x4658fcd9
   2d9f8:	e8bdb065 	.word	0xe8bdb065
   2d9fc:	f1058ff0 	.word	0xf1058ff0
   2da00:	46400128 	.word	0x46400128
   2da04:	f98af005 	.word	0xf98af005
   2da08:	d1852800 	.word	0xd1852800
   2da0c:	459a6deb 	.word	0x459a6deb
   2da10:	82f4f0c0 	.word	0x82f4f0c0
   2da14:	1c5c2602 	.word	0x1c5c2602
   2da18:	e9cd2301 	.word	0xe9cd2301
   2da1c:	08646602 	.word	0x08646602
   2da20:	6f6b9306 	.word	0x6f6b9306
   2da24:	2b009301 	.word	0x2b009301
   2da28:	80eaf000 	.word	0x80eaf000
   2da2c:	46382100 	.word	0x46382100
   2da30:	fefcf004 	.word	0xfefcf004
   2da34:	46804639 	.word	0x46804639
   2da38:	f004a80d 	.word	0xf004a80d
   2da3c:	4683fd31 	.word	0x4683fd31
   2da40:	463ab950 	.word	0x463ab950
   2da44:	a8109908 	.word	0xa8109908
   2da48:	fbfcf005 	.word	0xfbfcf005
   2da4c:	28004683 	.word	0x28004683
   2da50:	9b07d036 	.word	0x9b07d036
   2da54:	d0832b00 	.word	0xd0832b00
   2da58:	f004a80d 	.word	0xf004a80d
   2da5c:	a810fca5 	.word	0xa810fca5
   2da60:	fca2f004 	.word	0xfca2f004
   2da64:	4649e7b9 	.word	0x4649e7b9
   2da68:	000cf10a 	.word	0x000cf10a
   2da6c:	fd18f004 	.word	0xfd18f004
   2da70:	28004683 	.word	0x28004683
   2da74:	af71f47f 	.word	0xaf71f47f
   2da78:	f1089b01 	.word	0xf1089b01
   2da7c:	f1030118 	.word	0xf1030118
   2da80:	f0040018 	.word	0xf0040018
   2da84:	4683fd0d 	.word	0x4683fd0d
   2da88:	f47f2800 	.word	0xf47f2800
   2da8c:	462aaf66 	.word	0x462aaf66
   2da90:	0901f04f 	.word	0x0901f04f
   2da94:	46254651 	.word	0x46254651
   2da98:	464c4682 	.word	0x464c4682
   2da9c:	96094690 	.word	0x96094690
   2daa0:	9e06970a 	.word	0x9e06970a
   2daa4:	eb049f01 	.word	0xeb049f01
   2daa8:	eb0704c4 	.word	0xeb0704c4
   2daac:	46200484 	.word	0x46200484
   2dab0:	fcf6f004 	.word	0xfcf6f004
   2dab4:	f0002800 	.word	0xf0002800
   2dab8:	468380a7 	.word	0x468380a7
   2dabc:	e74d9b05 	.word	0xe74d9b05
   2dac0:	33fff118 	.word	0x33fff118
   2dac4:	2301bf18 	.word	0x2301bf18
   2dac8:	461aa910 	.word	0x461aa910
   2dacc:	9302a80d 	.word	0x9302a80d
   2dad0:	fe14f004 	.word	0xfe14f004
   2dad4:	28004683 	.word	0x28004683
   2dad8:	a822d1bb 	.word	0xa822d1bb
   2dadc:	46591c62 	.word	0x46591c62
   2dae0:	f95ef013 	.word	0xf95ef013
   2dae4:	f10db3d4 	.word	0xf10db3d4
   2dae8:	46d80988 	.word	0x46d80988
   2daec:	46c246cb 	.word	0x46c246cb
   2daf0:	46512700 	.word	0x46512700
   2daf4:	f004a80d 	.word	0xf004a80d
   2daf8:	f89bfe99 	.word	0xf89bfe99
   2dafc:	40b83000 	.word	0x40b83000
   2db00:	43033701 	.word	0x43033701
   2db04:	44a242b7 	.word	0x44a242b7
   2db08:	3000f88b 	.word	0x3000f88b
   2db0c:	f108d1f1 	.word	0xf108d1f1
   2db10:	45a00801 	.word	0x45a00801
   2db14:	0b01f10b 	.word	0x0b01f10b
   2db18:	2300d1e9 	.word	0x2300d1e9
   2db1c:	0c01f04f 	.word	0x0c01f04f
   2db20:	1088f89d 	.word	0x1088f89d
   2db24:	6f01f819 	.word	0x6f01f819
   2db28:	0c01f10c 	.word	0x0c01f10c
   2db2c:	0203ea86 	.word	0x0203ea86
   2db30:	f00043d0 	.word	0xf00043d0
   2db34:	fb000001 	.word	0xfb000001
   2db38:	b252f701 	.word	0xb252f701
   2db3c:	4033b27f 	.word	0x4033b27f
   2db40:	0607ea02 	.word	0x0607ea02
   2db44:	ea41407a 	.word	0xea41407a
   2db48:	433310c0 	.word	0x433310c0
   2db4c:	45e0b2d1 	.word	0x45e0b2d1
   2db50:	0c01f809 	.word	0x0c01f809
   2db54:	f889b2db 	.word	0xf889b2db
   2db58:	d2e31000 	.word	0xd2e31000
   2db5c:	a8192600 	.word	0xa8192600
   2db60:	fc1af004 	.word	0xfc1af004
   2db64:	f004a81c 	.word	0xf004a81c
   2db68:	a81ffc17 	.word	0xa81ffc17
   2db6c:	fc14f004 	.word	0xfc14f004
   2db70:	f813ab22 	.word	0xf813ab22
   2db74:	44239004 	.word	0x44239004
   2db78:	9b049306 	.word	0x9b049306
   2db7c:	469b4632 	.word	0x469b4632
   2db80:	95059f01 	.word	0x95059f01
   2db84:	9f03463d 	.word	0x9f03463d
   2db88:	0845f3c9 	.word	0x0845f3c9
   2db8c:	0a0cf103 	.word	0x0a0cf103
   2db90:	0408eba2 	.word	0x0408eba2
   2db94:	f484fab4 	.word	0xf484fab4
   2db98:	46290964 	.word	0x46290964
   2db9c:	46584622 	.word	0x46584622
   2dba0:	fdacf004 	.word	0xfdacf004
   2dba4:	f1053601 	.word	0xf1053601
   2dba8:	3524010c 	.word	0x3524010c
   2dbac:	d16a2800 	.word	0xd16a2800
   2dbb0:	46504622 	.word	0x46504622
   2dbb4:	fda2f004 	.word	0xfda2f004
   2dbb8:	2800b2f2 	.word	0x2800b2f2
   2dbbc:	42bad163 	.word	0x42bad163
   2dbc0:	9d05d3e6 	.word	0x9d05d3e6
   2dbc4:	1d2ba816 	.word	0x1d2ba816
   2dbc8:	9308461c 	.word	0x9308461c
   2dbcc:	fbe4f004 	.word	0xfbe4f004
   2dbd0:	4621a816 	.word	0x4621a816
   2dbd4:	f0054652 	.word	0xf0054652
   2dbd8:	4683fb35 	.word	0x4683fb35
   2dbdc:	f0002800 	.word	0xf0002800
   2dbe0:	a81680c3 	.word	0xa81680c3
   2dbe4:	fbe0f004 	.word	0xfbe0f004
   2dbe8:	f004a819 	.word	0xf004a819
   2dbec:	a81cfbdd 	.word	0xa81cfbdd
   2dbf0:	fbdaf004 	.word	0xfbdaf004
   2dbf4:	f004a81f 	.word	0xf004a81f
   2dbf8:	9b07fbd7 	.word	0x9b07fbd7
   2dbfc:	e6ac9305 	.word	0xe6ac9305
   2dc00:	98022301 	.word	0x98022301
   2dc04:	e6999305 	.word	0xe6999305
   2dc08:	0b59ea4f 	.word	0x0b59ea4f
   2dc0c:	0bcbeb0b 	.word	0x0bcbeb0b
   2dc10:	0b8beb07 	.word	0x0b8beb07
   2dc14:	010cf10b 	.word	0x010cf10b
   2dc18:	000cf104 	.word	0x000cf104
   2dc1c:	fc40f004 	.word	0xfc40f004
   2dc20:	f47f2800 	.word	0xf47f2800
   2dc24:	f10baf4a 	.word	0xf10baf4a
   2dc28:	f1040118 	.word	0xf1040118
   2dc2c:	f0040018 	.word	0xf0040018
   2dc30:	2800fc37 	.word	0x2800fc37
   2dc34:	af41f47f 	.word	0xaf41f47f
   2dc38:	4683b165 	.word	0x4683b165
   2dc3c:	46214622 	.word	0x46214622
   2dc40:	f7fe4640 	.word	0xf7fe4640
   2dc44:	f10bffbb 	.word	0xf10bffbb
   2dc48:	28000b01 	.word	0x28000b01
   2dc4c:	af35f47f 	.word	0xaf35f47f
   2dc50:	d1f345ab 	.word	0xd1f345ab
   2dc54:	0949ea4f 	.word	0x0949ea4f
   2dc58:	f989fa5f 	.word	0xf989fa5f
   2dc5c:	0301f10a 	.word	0x0301f10a
   2dc60:	f842aa22 	.word	0xf842aa22
   2dc64:	fa5f402a 	.word	0xfa5f402a
   2dc68:	fa39fa83 	.word	0xfa39fa83
   2dc6c:	464cf306 	.word	0x464cf306
   2dc70:	ea4fd10b 	.word	0xea4fd10b
   2dc74:	eb010159 	.word	0xeb010159
   2dc78:	eb0701c1 	.word	0xeb0701c1
   2dc7c:	e7120181 	.word	0xe7120181
   2dc80:	b39cf8df 	.word	0xb39cf8df
   2dc84:	4683e68d 	.word	0x4683e68d
   2dc88:	4652e7ae 	.word	0x4652e7ae
   2dc8c:	462c2a01 	.word	0x462c2a01
   2dc90:	46459e09 	.word	0x46459e09
   2dc94:	d9619f0a 	.word	0xd9619f0a
   2dc98:	4640a922 	.word	0x4640a922
   2dc9c:	fa46f7ff 	.word	0xfa46f7ff
   2dca0:	f1bb4683 	.word	0xf1bb4683
   2dca4:	f47f0f00 	.word	0xf47f0f00
   2dca8:	2301ae58 	.word	0x2301ae58
   2dcac:	46da9a01 	.word	0x46da9a01
   2dcb0:	970b3a24 	.word	0x970b3a24
   2dcb4:	461f4693 	.word	0x461f4693
   2dcb8:	4609e9cd 	.word	0x4609e9cd
   2dcbc:	eb03b303 	.word	0xeb03b303
   2dcc0:	ea4f03c3 	.word	0xea4f03c3
   2dcc4:	9b010883 	.word	0x9b010883
   2dcc8:	0424f1a8 	.word	0x0424f1a8
   2dccc:	eb03441c 	.word	0xeb03441c
   2dcd0:	e0050908 	.word	0xe0050908
   2dcd4:	45a3aa22 	.word	0x45a3aa22
   2dcd8:	602af842 	.word	0x602af842
   2dcdc:	d00f469a 	.word	0xd00f469a
   2dce0:	0604eb08 	.word	0x0604eb08
   2dce4:	4622464b 	.word	0x4622464b
   2dce8:	46284631 	.word	0x46284631
   2dcec:	fbc2f7ff 	.word	0xfbc2f7ff
   2dcf0:	0301f10a 	.word	0x0301f10a
   2dcf4:	b2db3c24 	.word	0xb2db3c24
   2dcf8:	d0eb2800 	.word	0xd0eb2800
   2dcfc:	e6dd4683 	.word	0xe6dd4683
   2dd00:	9a06007b 	.word	0x9a06007b
   2dd04:	fa37b2df 	.word	0xfa37b2df
   2dd08:	463bf202 	.word	0x463bf202
   2dd0c:	f1bad0d6 	.word	0xf1bad0d6
   2dd10:	e9dd0f01 	.word	0xe9dd0f01
   2dd14:	9f0b4609 	.word	0x9f0b4609
   2dd18:	8167f240 	.word	0x8167f240
   2dd1c:	a9224652 	.word	0xa9224652
   2dd20:	f7ff4628 	.word	0xf7ff4628
   2dd24:	4683fa03 	.word	0x4683fa03
   2dd28:	f1bb9b05 	.word	0xf1bb9b05
   2dd2c:	f47f0f00 	.word	0xf47f0f00
   2dd30:	b123ae15 	.word	0xb123ae15
   2dd34:	676b9b01 	.word	0x676b9b01
   2dd38:	67ab9b02 	.word	0x67ab9b02
   2dd3c:	4619e676 	.word	0x4619e676
   2dd40:	f0044638 	.word	0xf0044638
   2dd44:	4639fd73 	.word	0x4639fd73
   2dd48:	a80d4680 	.word	0xa80d4680
   2dd4c:	fba8f004 	.word	0xfba8f004
   2dd50:	28004683 	.word	0x28004683
   2dd54:	ae04f47f 	.word	0xae04f47f
   2dd58:	e6729007 	.word	0xe6729007
   2dd5c:	46289922 	.word	0x46289922
   2dd60:	f97cf7ff 	.word	0xf97cf7ff
   2dd64:	e79c4683 	.word	0xe79c4683
   2dd68:	46504601 	.word	0x46504601
   2dd6c:	f83ef005 	.word	0xf83ef005
   2dd70:	bf181c02 	.word	0xbf181c02
   2dd74:	a9162201 	.word	0xa9162201
   2dd78:	12d9ea02 	.word	0x12d9ea02
   2dd7c:	f0044650 	.word	0xf0044650
   2dd80:	4683fcbd 	.word	0x4683fcbd
   2dd84:	f004a816 	.word	0xf004a816
   2dd88:	f1bbfb0f 	.word	0xf1bbfb0f
   2dd8c:	f47f0f00 	.word	0xf47f0f00
   2dd90:	9b04af2b 	.word	0x9b04af2b
   2dd94:	f1032101 	.word	0xf1032101
   2dd98:	46200418 	.word	0x46200418
   2dd9c:	fd0cf004 	.word	0xfd0cf004
   2dda0:	28004683 	.word	0x28004683
   2dda4:	af20f47f 	.word	0xaf20f47f
   2dda8:	2b009b6e 	.word	0x2b009b6e
   2ddac:	8082f000 	.word	0x8082f000
   2ddb0:	6dab260c 	.word	0x6dab260c
   2ddb4:	3307a813 	.word	0x3307a813
   2ddb8:	f00408df 	.word	0xf00408df
   2ddbc:	a816faed 	.word	0xa816faed
   2ddc0:	faeaf004 	.word	0xfaeaf004
   2ddc4:	8020f8dd 	.word	0x8020f8dd
   2ddc8:	9a6e9b6f 	.word	0x9a6e9b6f
   2ddcc:	a8134639 	.word	0xa8134639
   2ddd0:	fa64f006 	.word	0xfa64f006
   2ddd4:	2101e006 	.word	0x2101e006
   2ddd8:	f004a813 	.word	0xf004a813
   2dddc:	2800ff2f 	.word	0x2800ff2f
   2dde0:	80c8f040 	.word	0x80c8f040
   2dde4:	a8134641 	.word	0xa8134641
   2dde8:	ff98f004 	.word	0xff98f004
   2ddec:	daf22800 	.word	0xdaf22800
   2ddf0:	f0003e01 	.word	0xf0003e01
   2ddf4:	21018100 	.word	0x21018100
   2ddf8:	f004a813 	.word	0xf004a813
   2ddfc:	2800fff7 	.word	0x2800fff7
   2de00:	aa13dde2 	.word	0xaa13dde2
   2de04:	46204621 	.word	0x46204621
   2de08:	fadcf005 	.word	0xfadcf005
   2de0c:	b1304683 	.word	0xb1304683
   2de10:	f004a813 	.word	0xf004a813
   2de14:	a816fac9 	.word	0xa816fac9
   2de18:	fac6f004 	.word	0xfac6f004
   2de1c:	4620e6e4 	.word	0x4620e6e4
   2de20:	f7fe4629 	.word	0xf7fe4629
   2de24:	4683fe7f 	.word	0x4683fe7f
   2de28:	d1f12800 	.word	0xd1f12800
   2de2c:	4611aa13 	.word	0x4611aa13
   2de30:	f005a816 	.word	0xf005a816
   2de34:	4683fac7 	.word	0x4683fac7
   2de38:	d1e92800 	.word	0xd1e92800
   2de3c:	a8164629 	.word	0xa8164629
   2de40:	fe70f7fe 	.word	0xfe70f7fe
   2de44:	28004683 	.word	0x28004683
   2de48:	9804d1e2 	.word	0x9804d1e2
   2de4c:	4601aa16 	.word	0x4601aa16
   2de50:	fab8f005 	.word	0xfab8f005
   2de54:	28004683 	.word	0x28004683
   2de58:	4629d1da 	.word	0x4629d1da
   2de5c:	f7fe9804 	.word	0xf7fe9804
   2de60:	4683fe61 	.word	0x4683fe61
   2de64:	d1d32800 	.word	0xd1d32800
   2de68:	aa13a916 	.word	0xaa13a916
   2de6c:	f0054608 	.word	0xf0054608
   2de70:	4683faa9 	.word	0x4683faa9
   2de74:	d1cb2800 	.word	0xd1cb2800
   2de78:	a8164629 	.word	0xa8164629
   2de7c:	fe52f7fe 	.word	0xfe52f7fe
   2de80:	28004683 	.word	0x28004683
   2de84:	aa16d1c4 	.word	0xaa16d1c4
   2de88:	46504651 	.word	0x46504651
   2de8c:	fa9af005 	.word	0xfa9af005
   2de90:	28004683 	.word	0x28004683
   2de94:	4629d1bc 	.word	0x4629d1bc
   2de98:	f7fe4650 	.word	0xf7fe4650
   2de9c:	4683fe43 	.word	0x4683fe43
   2dea0:	f004a813 	.word	0xf004a813
   2dea4:	a816fa81 	.word	0xa816fa81
   2dea8:	fa7ef004 	.word	0xfa7ef004
   2deac:	0f00f1bb 	.word	0x0f00f1bb
   2deb0:	ae9af47f 	.word	0xae9af47f
   2deb4:	f8dd46ab 	.word	0xf8dd46ab
   2deb8:	f8dd8018 	.word	0xf8dd8018
   2debc:	f8cd900c 	.word	0xf8cd900c
   2dec0:	f8dda018 	.word	0xf8dda018
   2dec4:	ab22a010 	.word	0xab22a010
   2dec8:	d0554543 	.word	0xd0554543
   2decc:	46514652 	.word	0x46514652
   2ded0:	f7fe4658 	.word	0xf7fe4658
   2ded4:	4602fe73 	.word	0x4602fe73
   2ded8:	d1492800 	.word	0xd1492800
   2dedc:	46044606 	.word	0x46044606
   2dee0:	3d01f818 	.word	0x3d01f818
   2dee4:	93059d01 	.word	0x93059d01
   2dee8:	0745f3c3 	.word	0x0745f3c3
   2deec:	fab41be4 	.word	0xfab41be4
   2def0:	0964f484 	.word	0x0964f484
   2def4:	46224629 	.word	0x46224629
   2def8:	f004a819 	.word	0xf004a819
   2defc:	3601fbff 	.word	0x3601fbff
   2df00:	010cf105 	.word	0x010cf105
   2df04:	28003524 	.word	0x28003524
   2df08:	aebdf47f 	.word	0xaebdf47f
   2df0c:	a81c4622 	.word	0xa81c4622
   2df10:	fbf4f004 	.word	0xfbf4f004
   2df14:	2800b2f4 	.word	0x2800b2f4
   2df18:	aeb5f47f 	.word	0xaeb5f47f
   2df1c:	d8e545a1 	.word	0xd8e545a1
   2df20:	f004a816 	.word	0xf004a816
   2df24:	aa1cfa39 	.word	0xaa1cfa39
   2df28:	a8169908 	.word	0xa8169908
   2df2c:	f98af005 	.word	0xf98af005
   2df30:	4683b108 	.word	0x4683b108
   2df34:	4601e655 	.word	0x4601e655
   2df38:	f004a81c 	.word	0xf004a81c
   2df3c:	1c02ff57 	.word	0x1c02ff57
   2df40:	2201bf18 	.word	0x2201bf18
   2df44:	a9169b05 	.word	0xa9169b05
   2df48:	12d3ea02 	.word	0x12d3ea02
   2df4c:	f004a81c 	.word	0xf004a81c
   2df50:	9005fbd5 	.word	0x9005fbd5
   2df54:	f004a816 	.word	0xf004a816
   2df58:	9a05fa27 	.word	0x9a05fa27
   2df5c:	4652b942 	.word	0x4652b942
   2df60:	4651ab19 	.word	0x4651ab19
   2df64:	f7ff4658 	.word	0xf7ff4658
   2df68:	4602fa85 	.word	0x4602fa85
   2df6c:	d0aa2800 	.word	0xd0aa2800
   2df70:	e6394693 	.word	0xe6394693
   2df74:	e74b4683 	.word	0xe74b4683
   2df78:	f8dda819 	.word	0xf8dda819
   2df7c:	f004a018 	.word	0xf004a018
   2df80:	a81cfa13 	.word	0xa81cfa13
   2df84:	fa10f004 	.word	0xfa10f004
   2df88:	f004a81f 	.word	0xf004a81f
   2df8c:	a819fa0d 	.word	0xa819fa0d
   2df90:	fa02f004 	.word	0xfa02f004
   2df94:	99084652 	.word	0x99084652
   2df98:	f005a819 	.word	0xf005a819
   2df9c:	465df953 	.word	0x465df953
   2dfa0:	b1184683 	.word	0xb1184683
   2dfa4:	f004a819 	.word	0xf004a819
   2dfa8:	e552f9ff 	.word	0xe552f9ff
   2dfac:	46504659 	.word	0x46504659
   2dfb0:	ff1cf004 	.word	0xff1cf004
   2dfb4:	a9199b02 	.word	0xa9199b02
   2dfb8:	bf082800 	.word	0xbf082800
   2dfbc:	46502300 	.word	0x46502300
   2dfc0:	f004461a 	.word	0xf004461a
   2dfc4:	4683fb9b 	.word	0x4683fb9b
   2dfc8:	f004a819 	.word	0xf004a819
   2dfcc:	f1bbf9ed 	.word	0xf1bbf9ed
   2dfd0:	f47f0f00 	.word	0xf47f0f00
   2dfd4:	4628ad3e 	.word	0x4628ad3e
   2dfd8:	f7ff9904 	.word	0xf7ff9904
   2dfdc:	9b07f83f 	.word	0x9b07f83f
   2dfe0:	2b004683 	.word	0x2b004683
   2dfe4:	acd4f47f 	.word	0xacd4f47f
   2dfe8:	9922e4ba 	.word	0x9922e4ba
   2dfec:	f7ff4628 	.word	0xf7ff4628
   2dff0:	4683f835 	.word	0x4683f835
   2dff4:	f8dfe698 	.word	0xf8dfe698
   2dff8:	e5f5b02c 	.word	0xe5f5b02c
   2dffc:	f10a2201 	.word	0xf10a2201
   2e000:	eb0a31ff 	.word	0xeb0a31ff
   2e004:	fa020403 	.word	0xfa020403
   2e008:	3c01f301 	.word	0x3c01f301
   2e00c:	b2db9302 	.word	0xb2db9302
   2e010:	fbb49106 	.word	0xfbb49106
   2e014:	4656f4fa 	.word	0x4656f4fa
   2e018:	e5029303 	.word	0xe5029303
   2e01c:	ffffb280 	.word	0xffffb280
   2e020:	ffffb080 	.word	0xffffb080
   2e024:	ffffb300 	.word	0xffffb300

0002e028 <symbol_000637b>:
   2e028:	43f8e92d 	.word	0x43f8e92d
   2e02c:	e9dd2a01 	.word	0xe9dd2a01
   2e030:	d8437808 	.word	0xd8437808
   2e034:	4681460d 	.word	0x4681460d
   2e038:	f1052100 	.word	0xf1052100
   2e03c:	461e0018 	.word	0x461e0018
   2e040:	f0044614 	.word	0xf0044614
   2e044:	b938fed3 	.word	0xb938fed3
   2e048:	0f00f1b8 	.word	0x0f00f1b8
   2e04c:	2301d038 	.word	0x2301d038
   2e050:	60337038 	.word	0x60337038
   2e054:	83f8e8bd 	.word	0x83f8e8bd
   2e058:	0004f109 	.word	0x0004f109
   2e05c:	fc24f004 	.word	0xfc24f004
   2e060:	b9c44681 	.word	0xb9c44681
   2e064:	33010043 	.word	0x33010043
   2e068:	60334598 	.word	0x60334598
   2e06c:	2304d328 	.word	0x2304d328
   2e070:	46024639 	.word	0x46024639
   2e074:	3b01f801 	.word	0x3b01f801
   2e078:	f0044628 	.word	0xf0044628
   2e07c:	2800fcd7 	.word	0x2800fcd7
   2e080:	f109d1e8 	.word	0xf109d1e8
   2e084:	f1050101 	.word	0xf1050101
   2e088:	4439000c 	.word	0x4439000c
   2e08c:	e8bd464a 	.word	0xe8bd464a
   2e090:	f00443f8 	.word	0xf00443f8
   2e094:	1c43bccb 	.word	0x1c43bccb
   2e098:	60334598 	.word	0x60334598
   2e09c:	2100d310 	.word	0x2100d310
   2e0a0:	000cf105 	.word	0x000cf105
   2e0a4:	fbc2f004 	.word	0xfbc2f004
   2e0a8:	30024639 	.word	0x30024639
   2e0ac:	0b01f801 	.word	0x0b01f801
   2e0b0:	4628464a 	.word	0x4628464a
   2e0b4:	43f8e8bd 	.word	0x43f8e8bd
   2e0b8:	bcb8f004 	.word	0xbcb8f004
   2e0bc:	e7c94801 	.word	0xe7c94801
   2e0c0:	e7c74801 	.word	0xe7c74801
   2e0c4:	ffffb080 	.word	0xffffb080
   2e0c8:	ffffb100 	.word	0xffffb100

0002e0cc <symbol_0007a22>:
   2e0cc:	d0412b00 	.word	0xd0412b00
   2e0d0:	461eb5f8 	.word	0x461eb5f8
   2e0d4:	46147813 	.word	0x46147813
   2e0d8:	b9ab460d 	.word	0xb9ab460d
   2e0dc:	d1352e01 	.word	0xd1352e01
   2e0e0:	46284631 	.word	0x46284631
   2e0e4:	fb68f004 	.word	0xfb68f004
   2e0e8:	bdf8b100 	.word	0xbdf8b100
   2e0ec:	f1054631 	.word	0xf1054631
   2e0f0:	f004000c 	.word	0xf004000c
   2e0f4:	2800fb61 	.word	0x2800fb61
   2e0f8:	4601d1f7 	.word	0x4601d1f7
   2e0fc:	0018f105 	.word	0x0018f105
   2e100:	40f8e8bd 	.word	0x40f8e8bd
   2e104:	bb58f004 	.word	0xbb58f004
   2e108:	f0043004 	.word	0xf0043004
   2e10c:	7823fbcd 	.word	0x7823fbcd
   2e110:	2b044607 	.word	0x2b044607
   2e114:	0043d11c 	.word	0x0043d11c
   2e118:	429e3301 	.word	0x429e3301
   2e11c:	4602d116 	.word	0x4602d116
   2e120:	46281c61 	.word	0x46281c61
   2e124:	fbf0f004 	.word	0xfbf0f004
   2e128:	d1de2800 	.word	0xd1de2800
   2e12c:	44211c79 	.word	0x44211c79
   2e130:	f105463a 	.word	0xf105463a
   2e134:	f004000c 	.word	0xf004000c
   2e138:	2800fbe7 	.word	0x2800fbe7
   2e13c:	f105d1d5 	.word	0xf105d1d5
   2e140:	21010018 	.word	0x21010018
   2e144:	40f8e8bd 	.word	0x40f8e8bd
   2e148:	bb36f004 	.word	0xbb36f004
   2e14c:	bdf84802 	.word	0xbdf84802
   2e150:	bdf84802 	.word	0xbdf84802
   2e154:	47704800 	.word	0x47704800
   2e158:	ffffb080 	.word	0xffffb080
   2e15c:	ffffb180 	.word	0xffffb180

0002e160 <symbol_000e8bc>:
   2e160:	41f0e92d 	.word	0x41f0e92d
   2e164:	b086460c 	.word	0xb086460c
   2e168:	21014605 	.word	0x21014605
   2e16c:	0018f104 	.word	0x0018f104
   2e170:	fe3cf004 	.word	0xfe3cf004
   2e174:	f0402800 	.word	0xf0402800
   2e178:	6b2b809f 	.word	0x6b2b809f
   2e17c:	f0002b00 	.word	0xf0002b00
   2e180:	6beb80a0 	.word	0x6beb80a0
   2e184:	f0002b00 	.word	0xf0002b00
   2e188:	4601809c 	.word	0x4601809c
   2e18c:	46204606 	.word	0x46204606
   2e190:	fe2cf004 	.word	0xfe2cf004
   2e194:	f2c02800 	.word	0xf2c02800
   2e198:	f104808f 	.word	0xf104808f
   2e19c:	4631070c 	.word	0x4631070c
   2e1a0:	f0044638 	.word	0xf0044638
   2e1a4:	2800fe23 	.word	0x2800fe23
   2e1a8:	8086f2c0 	.word	0x8086f2c0
   2e1ac:	0804f105 	.word	0x0804f105
   2e1b0:	46204641 	.word	0x46204641
   2e1b4:	fdb2f004 	.word	0xfdb2f004
   2e1b8:	da7d2800 	.word	0xda7d2800
   2e1bc:	46384641 	.word	0x46384641
   2e1c0:	fdacf004 	.word	0xfdacf004
   2e1c4:	da772800 	.word	0xda772800
   2e1c8:	f0044668 	.word	0xf0044668
   2e1cc:	a803f8e5 	.word	0xa803f8e5
   2e1d0:	f8e2f004 	.word	0xf8e2f004
   2e1d4:	4639463a 	.word	0x4639463a
   2e1d8:	f0054668 	.word	0xf0054668
   2e1dc:	4606f8f3 	.word	0x4606f8f3
   2e1e0:	4668b148 	.word	0x4668b148
   2e1e4:	f8e0f004 	.word	0xf8e0f004
   2e1e8:	f004a803 	.word	0xf004a803
   2e1ec:	4630f8dd 	.word	0x4630f8dd
   2e1f0:	e8bdb006 	.word	0xe8bdb006
   2e1f4:	462981f0 	.word	0x462981f0
   2e1f8:	f7fe4668 	.word	0xf7fe4668
   2e1fc:	4606fc93 	.word	0x4606fc93
   2e200:	d1ee2800 	.word	0xd1ee2800
   2e204:	46214622 	.word	0x46214622
   2e208:	f005a803 	.word	0xf005a803
   2e20c:	4606f8db 	.word	0x4606f8db
   2e210:	d1e62800 	.word	0xd1e62800
   2e214:	a8034629 	.word	0xa8034629
   2e218:	fc84f7fe 	.word	0xfc84f7fe
   2e21c:	28004606 	.word	0x28004606
   2e220:	69abd1df 	.word	0x69abd1df
   2e224:	d04e2b00 	.word	0xd04e2b00
   2e228:	f105a903 	.word	0xf105a903
   2e22c:	46080210 	.word	0x46080210
   2e230:	ff94f004 	.word	0xff94f004
   2e234:	28004606 	.word	0x28004606
   2e238:	e007d1d3 	.word	0xe007d1d3
   2e23c:	4642a903 	.word	0x4642a903
   2e240:	f0044608 	.word	0xf0044608
   2e244:	4606fecb 	.word	0x4606fecb
   2e248:	d1ca2800 	.word	0xd1ca2800
   2e24c:	a8034641 	.word	0xa8034641
   2e250:	fd64f004 	.word	0xfd64f004
   2e254:	daf12800 	.word	0xdaf12800
   2e258:	4622a903 	.word	0x4622a903
   2e25c:	f0054608 	.word	0xf0054608
   2e260:	4606f8b1 	.word	0x4606f8b1
   2e264:	d1bc2800 	.word	0xd1bc2800
   2e268:	a8034629 	.word	0xa8034629
   2e26c:	fc5af7fe 	.word	0xfc5af7fe
   2e270:	28004606 	.word	0x28004606
   2e274:	a903d1b5 	.word	0xa903d1b5
   2e278:	021cf105 	.word	0x021cf105
   2e27c:	f0044608 	.word	0xf0044608
   2e280:	4606ff6d 	.word	0x4606ff6d
   2e284:	d1ac2800 	.word	0xd1ac2800
   2e288:	a903e007 	.word	0xa903e007
   2e28c:	46084642 	.word	0x46084642
   2e290:	fea4f004 	.word	0xfea4f004
   2e294:	28004606 	.word	0x28004606
   2e298:	4641d1a3 	.word	0x4641d1a3
   2e29c:	f004a803 	.word	0xf004a803
   2e2a0:	2800fd3d 	.word	0x2800fd3d
   2e2a4:	a903daf1 	.word	0xa903daf1
   2e2a8:	f0044668 	.word	0xf0044668
   2e2ac:	4e14fd37 	.word	0x4e14fd37
   2e2b0:	bf082800 	.word	0xbf082800
   2e2b4:	e7942600 	.word	0xe7942600
   2e2b8:	46304e11 	.word	0x46304e11
   2e2bc:	e8bdb006 	.word	0xe8bdb006
   2e2c0:	4e1081f0 	.word	0x4e1081f0
   2e2c4:	a903e793 	.word	0xa903e793
   2e2c8:	46082203 	.word	0x46082203
   2e2cc:	f82ef005 	.word	0xf82ef005
   2e2d0:	28004606 	.word	0x28004606
   2e2d4:	e00ed185 	.word	0xe00ed185
   2e2d8:	a8032100 	.word	0xa8032100
   2e2dc:	fd86f004 	.word	0xfd86f004
   2e2e0:	d0b92800 	.word	0xd0b92800
   2e2e4:	4642a903 	.word	0x4642a903
   2e2e8:	f0044608 	.word	0xf0044608
   2e2ec:	4606ff37 	.word	0x4606ff37
   2e2f0:	f47f2800 	.word	0xf47f2800
   2e2f4:	9b03af76 	.word	0x9b03af76
   2e2f8:	dbed2b00 	.word	0xdbed2b00
   2e2fc:	bf00e7ac 	.word	0xbf00e7ac
   2e300:	ffffb380 	.word	0xffffb380
   2e304:	ffffb080 	.word	0xffffb080

0002e308 <symbol_0001f66>:
   2e308:	43f0e92d 	.word	0x43f0e92d
   2e30c:	b0ab7803 	.word	0xb0ab7803
   2e310:	f0002b00 	.word	0xf0002b00
   2e314:	780a80c4 	.word	0x780a80c4
   2e318:	f040429a 	.word	0xf040429a
   2e31c:	f10180c0 	.word	0xf10180c0
   2e320:	460c0788 	.word	0x460c0788
   2e324:	46394605 	.word	0x46394605
   2e328:	f0043088 	.word	0xf0043088
   2e32c:	2800fcf7 	.word	0x2800fcf7
   2e330:	80b5f040 	.word	0x80b5f040
   2e334:	0994f104 	.word	0x0994f104
   2e338:	f1054649 	.word	0xf1054649
   2e33c:	f0040094 	.word	0xf0040094
   2e340:	2800fced 	.word	0x2800fced
   2e344:	80abf040 	.word	0x80abf040
   2e348:	08a0f104 	.word	0x08a0f104
   2e34c:	00a0f105 	.word	0x00a0f105
   2e350:	f0044641 	.word	0xf0044641
   2e354:	4606fce3 	.word	0x4606fce3
   2e358:	f0402800 	.word	0xf0402800
   2e35c:	462580a0 	.word	0x462580a0
   2e360:	f004a802 	.word	0xf004a802
   2e364:	a805f819 	.word	0xa805f819
   2e368:	f816f004 	.word	0xf816f004
   2e36c:	f004a808 	.word	0xf004a808
   2e370:	4631f813 	.word	0x4631f813
   2e374:	a80b227c 	.word	0xa80b227c
   2e378:	fd12f012 	.word	0xfd12f012
   2e37c:	1b7cf815 	.word	0x1b7cf815
   2e380:	f7fda80b 	.word	0xf7fda80b
   2e384:	f104fbd5 	.word	0xf104fbd5
   2e388:	21010040 	.word	0x21010040
   2e38c:	f0043428 	.word	0xf0043428
   2e390:	2800fd2d 	.word	0x2800fd2d
   2e394:	8081f040 	.word	0x8081f040
   2e398:	2b009b17 	.word	0x2b009b17
   2e39c:	9b1ad07d 	.word	0x9b1ad07d
   2e3a0:	d07a2b00 	.word	0xd07a2b00
   2e3a4:	46282101 	.word	0x46282101
   2e3a8:	fd20f004 	.word	0xfd20f004
   2e3ac:	f2c02800 	.word	0xf2c02800
   2e3b0:	a91e8083 	.word	0xa91e8083
   2e3b4:	f0044628 	.word	0xf0044628
   2e3b8:	2800fcb1 	.word	0x2800fcb1
   2e3bc:	4621da7c 	.word	0x4621da7c
   2e3c0:	f7ffa80b 	.word	0xf7ffa80b
   2e3c4:	4606fecd 	.word	0x4606fecd
   2e3c8:	9b17b980 	.word	0x9b17b980
   2e3cc:	d0642b00 	.word	0xd0642b00
   2e3d0:	2b009b1a 	.word	0x2b009b1a
   2e3d4:	e9cdd061 	.word	0xe9cdd061
   2e3d8:	46230000 	.word	0x46230000
   2e3dc:	a902462a 	.word	0xa902462a
   2e3e0:	f7ffa80b 	.word	0xf7ffa80b
   2e3e4:	4606fa6b 	.word	0x4606fa6b
   2e3e8:	d04c2800 	.word	0xd04c2800
   2e3ec:	f003a802 	.word	0xf003a802
   2e3f0:	a805ffdb 	.word	0xa805ffdb
   2e3f4:	ffd8f003 	.word	0xffd8f003
   2e3f8:	f003a808 	.word	0xf003a808
   2e3fc:	9b23ffd5 	.word	0x9b23ffd5
   2e400:	d1262b01 	.word	0xd1262b01
   2e404:	b1c89828 	.word	0xb1c89828
   2e408:	b1aa9a29 	.word	0xb1aa9a29
   2e40c:	eb052500 	.word	0xeb052500
   2e410:	eb1003c5 	.word	0xeb1003c5
   2e414:	d0320483 	.word	0xd0320483
   2e418:	f0034620 	.word	0xf0034620
   2e41c:	f104ffc5 	.word	0xf104ffc5
   2e420:	f003000c 	.word	0xf003000c
   2e424:	f104ffc1 	.word	0xf104ffc1
   2e428:	f0030018 	.word	0xf0030018
   2e42c:	9a29ffbd 	.word	0x9a29ffbd
   2e430:	42953501 	.word	0x42953501
   2e434:	d3ea9828 	.word	0xd3ea9828
   2e438:	fc16f007 	.word	0xfc16f007
   2e43c:	ab0b2200 	.word	0xab0b2200
   2e440:	a92a701a 	.word	0xa92a701a
   2e444:	428b3301 	.word	0x428b3301
   2e448:	4630d1fa 	.word	0x4630d1fa
   2e44c:	e8bdb02b 	.word	0xe8bdb02b
   2e450:	a80c83f0 	.word	0xa80c83f0
   2e454:	ffa8f003 	.word	0xffa8f003
   2e458:	f003a80f 	.word	0xf003a80f
   2e45c:	a812ffa5 	.word	0xa812ffa5
   2e460:	ffa2f003 	.word	0xffa2f003
   2e464:	f003a815 	.word	0xf003a815
   2e468:	a818ff9f 	.word	0xa818ff9f
   2e46c:	ff9cf003 	.word	0xff9cf003
   2e470:	f003a81b 	.word	0xf003a81b
   2e474:	a81eff99 	.word	0xa81eff99
   2e478:	ff96f003 	.word	0xff96f003
   2e47c:	3501e7c2 	.word	0x3501e7c2
   2e480:	d3c44295 	.word	0xd3c44295
   2e484:	4639e7d8 	.word	0x4639e7d8
   2e488:	f004a802 	.word	0xf004a802
   2e48c:	b920fc47 	.word	0xb920fc47
   2e490:	a8054649 	.word	0xa8054649
   2e494:	fc42f004 	.word	0xfc42f004
   2e498:	4e08b130 	.word	0x4e08b130
   2e49c:	4e07e7a6 	.word	0x4e07e7a6
   2e4a0:	b02b4630 	.word	0xb02b4630
   2e4a4:	83f0e8bd 	.word	0x83f0e8bd
   2e4a8:	a8084641 	.word	0xa8084641
   2e4ac:	fc36f004 	.word	0xfc36f004
   2e4b0:	28004606 	.word	0x28004606
   2e4b4:	e7f0d09a 	.word	0xe7f0d09a
   2e4b8:	e7974e01 	.word	0xe7974e01
   2e4bc:	ffffb080 	.word	0xffffb080
   2e4c0:	ffffb380 	.word	0xffffb380

0002e4c4 <interface_init>:
   2e4c4:	f44fb508 	.word	0xf44fb508
   2e4c8:	21007290 	.word	0x21007290
   2e4cc:	f0124802 	.word	0xf0124802
   2e4d0:	2000fc67 	.word	0x2000fc67
   2e4d4:	bf00bd08 	.word	0xbf00bd08
   2e4d8:	2002be88 	.word	0x2002be88

0002e4dc <interface_socket_allocate>:
   2e4dc:	4b29b5f8 	.word	0x4b29b5f8
   2e4e0:	681d4606 	.word	0x681d4606
   2e4e4:	b1e54608 	.word	0xb1e54608
   2e4e8:	2c006a5c 	.word	0x2c006a5c
   2e4ec:	6c9cd03d 	.word	0x6c9cd03d
   2e4f0:	d03c2c00 	.word	0xd03c2c00
   2e4f4:	2c006edc 	.word	0x2c006edc
   2e4f8:	f8d3d03b 	.word	0xf8d3d03b
   2e4fc:	b1791090 	.word	0xb1791090
   2e500:	10b4f8d3 	.word	0x10b4f8d3
   2e504:	f8d3b3b9 	.word	0xf8d3b3b9
   2e508:	b3b110d8 	.word	0xb3b110d8
   2e50c:	10fcf8d3 	.word	0x10fcf8d3
   2e510:	f04fb3a9 	.word	0xf04fb3a9
   2e514:	200c35ff 	.word	0x200c35ff
   2e518:	f9f8f7f4 	.word	0xf9f8f7f4
   2e51c:	bdf84628 	.word	0xbdf84628
   2e520:	f04f2504 	.word	0xf04f2504
   2e524:	f04f0c01 	.word	0xf04f0c01
   2e528:	eb0537ff 	.word	0xeb0537ff
   2e52c:	00a404c5 	.word	0x00a404c5
   2e530:	c004f843 	.word	0xc004f843
   2e534:	4611441c 	.word	0x4611441c
   2e538:	462261a7 	.word	0x462261a7
   2e53c:	facaf7fd 	.word	0xfacaf7fd
   2e540:	61e04603 	.word	0x61e04603
   2e544:	681bb158 	.word	0x681bb158
   2e548:	4798681b 	.word	0x4798681b
   2e54c:	6034b910 	.word	0x6034b910
   2e550:	bdf84628 	.word	0xbdf84628
   2e554:	f7fd69e0 	.word	0xf7fd69e0
   2e558:	2300fadd 	.word	0x2300fadd
   2e55c:	462061e3 	.word	0x462061e3
   2e560:	21002224 	.word	0x21002224
   2e564:	fc1cf012 	.word	0xfc1cf012
   2e568:	2501e7d3 	.word	0x2501e7d3
   2e56c:	2502e7d9 	.word	0x2502e7d9
   2e570:	2503e7d7 	.word	0x2503e7d7
   2e574:	2505e7d5 	.word	0x2505e7d5
   2e578:	2506e7d3 	.word	0x2506e7d3
   2e57c:	2507e7d1 	.word	0x2507e7d1
   2e580:	bf00e7cf 	.word	0xbf00e7cf
   2e584:	2002be88 	.word	0x2002be88

0002e588 <interface_socket_free>:
   2e588:	d9002807 	.word	0xd9002807
   2e58c:	b5104770 	.word	0xb5104770
   2e590:	eb004c07 	.word	0xeb004c07
   2e594:	eb0400c0 	.word	0xeb0400c0
   2e598:	69e00480 	.word	0x69e00480
   2e59c:	f7fdb108 	.word	0xf7fdb108
   2e5a0:	4620fab9 	.word	0x4620fab9
   2e5a4:	4010e8bd 	.word	0x4010e8bd
   2e5a8:	21002224 	.word	0x21002224
   2e5ac:	bbf8f012 	.word	0xbbf8f012
   2e5b0:	2002be88 	.word	0x2002be88

0002e5b4 <interface_socket_packet_handler_update>:
   2e5b4:	e92d2807 	.word	0xe92d2807
   2e5b8:	d81e43f8 	.word	0xd81e43f8
   2e5bc:	08c0ea4f 	.word	0x08c0ea4f
   2e5c0:	eb084e17 	.word	0xeb084e17
   2e5c4:	009b0300 	.word	0x009b0300
   2e5c8:	18f558f4 	.word	0x18f558f4
   2e5cc:	460bb1ac 	.word	0x460bb1ac
   2e5d0:	46114604 	.word	0x46114604
   2e5d4:	462a4618 	.word	0x462a4618
   2e5d8:	901cf8d5 	.word	0x901cf8d5
   2e5dc:	fa7af7fd 	.word	0xfa7af7fd
   2e5e0:	b1d061e8 	.word	0xb1d061e8
   2e5e4:	681b6803 	.word	0x681b6803
   2e5e8:	46074798 	.word	0x46074798
   2e5ec:	4648b948 	.word	0x4648b948
   2e5f0:	fa90f7fd 	.word	0xfa90f7fd
   2e5f4:	e8bd4638 	.word	0xe8bd4638
   2e5f8:	270583f8 	.word	0x270583f8
   2e5fc:	e8bd4638 	.word	0xe8bd4638
   2e600:	69e883f8 	.word	0x69e883f8
   2e604:	fa86f7fd 	.word	0xfa86f7fd
   2e608:	0004eb08 	.word	0x0004eb08
   2e60c:	0680eb06 	.word	0x0680eb06
   2e610:	901cf8c6 	.word	0x901cf8c6
   2e614:	e8bd4638 	.word	0xe8bd4638
   2e618:	270483f8 	.word	0x270483f8
   2e61c:	bf00e7f4 	.word	0xbf00e7f4
   2e620:	2002be88 	.word	0x2002be88

0002e624 <interface_socket_wait>:
   2e624:	eb00b5f0 	.word	0xeb00b5f0
   2e628:	4c0e00c0 	.word	0x4c0e00c0
   2e62c:	58250080 	.word	0x58250080
   2e630:	4015b083 	.word	0x4015b083
   2e634:	9301428d 	.word	0x9301428d
   2e638:	d0104404 	.word	0xd0104404
   2e63c:	b9736863 	.word	0xb9736863
   2e640:	4616460f 	.word	0x4616460f
   2e644:	e0064625 	.word	0xe0064625
   2e648:	b943686b 	.word	0xb943686b
   2e64c:	4620a901 	.word	0x4620a901
   2e650:	f8c8f7f4 	.word	0xf8c8f7f4
   2e654:	682bb920 	.word	0x682bb920
   2e658:	42bb4033 	.word	0x42bb4033
   2e65c:	2000d1f4 	.word	0x2000d1f4
   2e660:	bdf0b003 	.word	0xbdf0b003
   2e664:	2002be88 	.word	0x2002be88

0002e668 <interface_from_internal_id_search>:
   2e668:	681a4b23 	.word	0x681a4b23
   2e66c:	699ab112 	.word	0x699ab112
   2e670:	d0324282 	.word	0xd0324282
   2e674:	b1126a5a 	.word	0xb1126a5a
   2e678:	42826bda 	.word	0x42826bda
   2e67c:	6c9ad02f 	.word	0x6c9ad02f
   2e680:	6e1ab112 	.word	0x6e1ab112
   2e684:	d02c4282 	.word	0xd02c4282
   2e688:	b11a6eda 	.word	0xb11a6eda
   2e68c:	2084f8d3 	.word	0x2084f8d3
   2e690:	d0284282 	.word	0xd0284282
   2e694:	2090f8d3 	.word	0x2090f8d3
   2e698:	f8d3b11a 	.word	0xf8d3b11a
   2e69c:	428220a8 	.word	0x428220a8
   2e6a0:	f8d3d023 	.word	0xf8d3d023
   2e6a4:	b11a20b4 	.word	0xb11a20b4
   2e6a8:	20ccf8d3 	.word	0x20ccf8d3
   2e6ac:	d01e4282 	.word	0xd01e4282
   2e6b0:	20d8f8d3 	.word	0x20d8f8d3
   2e6b4:	f8d3b11a 	.word	0xf8d3b11a
   2e6b8:	428220f0 	.word	0x428220f0
   2e6bc:	f8d3d019 	.word	0xf8d3d019
   2e6c0:	b13a20fc 	.word	0xb13a20fc
   2e6c4:	3114f8d3 	.word	0x3114f8d3
   2e6c8:	bf144283 	.word	0xbf144283
   2e6cc:	30fff04f 	.word	0x30fff04f
   2e6d0:	47702007 	.word	0x47702007
   2e6d4:	30fff04f 	.word	0x30fff04f
   2e6d8:	20004770 	.word	0x20004770
   2e6dc:	20014770 	.word	0x20014770
   2e6e0:	20024770 	.word	0x20024770
   2e6e4:	20034770 	.word	0x20034770
   2e6e8:	20044770 	.word	0x20044770
   2e6ec:	20054770 	.word	0x20054770
   2e6f0:	20064770 	.word	0x20064770
   2e6f4:	bf004770 	.word	0xbf004770
   2e6f8:	2002be88 	.word	0x2002be88

0002e6fc <interface_socket_from_handle_get>:
   2e6fc:	d8072807 	.word	0xd8072807
   2e700:	00c0eb00 	.word	0x00c0eb00
   2e704:	00804b03 	.word	0x00804b03
   2e708:	b10a581a 	.word	0xb10a581a
   2e70c:	47704418 	.word	0x47704418
   2e710:	47702000 	.word	0x47702000
   2e714:	2002be88 	.word	0x2002be88

0002e718 <interface_socket_event_get>:
   2e718:	2807b119 	.word	0x2807b119
   2e71c:	2310d902 	.word	0x2310d902
   2e720:	4770600b 	.word	0x4770600b
   2e724:	00c0eb00 	.word	0x00c0eb00
   2e728:	00804b07 	.word	0x00804b07
   2e72c:	2a00581a 	.word	0x2a00581a
   2e730:	581bd0f5 	.word	0x581bd0f5
   2e734:	f0030c1b 	.word	0xf0030c1b
   2e738:	2a0a020a 	.word	0x2a0a020a
   2e73c:	f003bf14 	.word	0xf003bf14
   2e740:	f003030f 	.word	0xf003030f
   2e744:	e7eb030d 	.word	0xe7eb030d
   2e748:	2002be88 	.word	0x2002be88

0002e74c <interface_socket_setopt>:
   2e74c:	b5702807 	.word	0xb5702807
   2e750:	eb00d827 	.word	0xeb00d827
   2e754:	4c1600c0 	.word	0x4c1600c0
   2e758:	58250080 	.word	0x58250080
   2e75c:	2901b30d 	.word	0x2901b30d
   2e760:	2a14d119 	.word	0x2a14d119
   2e764:	b183d117 	.word	0xb183d117
   2e768:	2a089a04 	.word	0x2a089a04
   2e76c:	f44fd10d 	.word	0xf44fd10d
   2e770:	685a757a 	.word	0x685a757a
   2e774:	68194e0f 	.word	0x68194e0f
   2e778:	2302fba6 	.word	0x2302fba6
   2e77c:	fb05099b 	.word	0xfb05099b
   2e780:	44203301 	.word	0x44203301
   2e784:	20006203 	.word	0x20006203
   2e788:	2016bd70 	.word	0x2016bd70
   2e78c:	f8bef7f4 	.word	0xf8bef7f4
   2e790:	30fff04f 	.word	0x30fff04f
   2e794:	202abd70 	.word	0x202abd70
   2e798:	f8b8f7f4 	.word	0xf8b8f7f4
   2e79c:	30fff04f 	.word	0x30fff04f
   2e7a0:	2009bd70 	.word	0x2009bd70
   2e7a4:	f8b2f7f4 	.word	0xf8b2f7f4
   2e7a8:	30fff04f 	.word	0x30fff04f
   2e7ac:	bf00bd70 	.word	0xbf00bd70
   2e7b0:	2002be88 	.word	0x2002be88
   2e7b4:	10624dd3 	.word	0x10624dd3

0002e7b8 <interface_socket_getopt>:
   2e7b8:	2807b570 	.word	0x2807b570
   2e7bc:	d8219d04 	.word	0xd8219d04
   2e7c0:	eb004c13 	.word	0xeb004c13
   2e7c4:	008000c0 	.word	0x008000c0
   2e7c8:	44045826 	.word	0x44045826
   2e7cc:	2901b1d6 	.word	0x2901b1d6
   2e7d0:	2a04d112 	.word	0x2a04d112
   2e7d4:	b14bd110 	.word	0xb14bd110
   2e7d8:	682ab145 	.word	0x682ab145
   2e7dc:	d1052a04 	.word	0xd1052a04
   2e7e0:	68612200 	.word	0x68612200
   2e7e4:	60194610 	.word	0x60194610
   2e7e8:	bd706062 	.word	0xbd706062
   2e7ec:	f7f42016 	.word	0xf7f42016
   2e7f0:	f04ff88d 	.word	0xf04ff88d
   2e7f4:	bd7030ff 	.word	0xbd7030ff
   2e7f8:	f7f4202a 	.word	0xf7f4202a
   2e7fc:	f04ff887 	.word	0xf04ff887
   2e800:	bd7030ff 	.word	0xbd7030ff
   2e804:	f7f42009 	.word	0xf7f42009
   2e808:	f04ff881 	.word	0xf04ff881
   2e80c:	bd7030ff 	.word	0xbd7030ff
   2e810:	2002be88 	.word	0x2002be88

0002e814 <interface_shutdown>:
   2e814:	681a4b15 	.word	0x681a4b15
   2e818:	2270b10a 	.word	0x2270b10a
   2e81c:	6a5a605a 	.word	0x6a5a605a
   2e820:	2270b10a 	.word	0x2270b10a
   2e824:	6c9a629a 	.word	0x6c9a629a
   2e828:	2270b10a 	.word	0x2270b10a
   2e82c:	6eda64da 	.word	0x6eda64da
   2e830:	2270b10a 	.word	0x2270b10a
   2e834:	f8d3671a 	.word	0xf8d3671a
   2e838:	b1122090 	.word	0xb1122090
   2e83c:	f8c32270 	.word	0xf8c32270
   2e840:	f8d32094 	.word	0xf8d32094
   2e844:	b11220b4 	.word	0xb11220b4
   2e848:	f8c32270 	.word	0xf8c32270
   2e84c:	f8d320b8 	.word	0xf8d320b8
   2e850:	b11220d8 	.word	0xb11220d8
   2e854:	f8c32270 	.word	0xf8c32270
   2e858:	f8d320dc 	.word	0xf8d320dc
   2e85c:	b11220fc 	.word	0xb11220fc
   2e860:	f8c32270 	.word	0xf8c32270
   2e864:	20002100 	.word	0x20002100
   2e868:	bf004770 	.word	0xbf004770
   2e86c:	2002be88 	.word	0x2002be88

0002e870 <interface_socket_fcntl>:
   2e870:	b5102807 	.word	0xb5102807
   2e874:	eb00d818 	.word	0xeb00d818
   2e878:	4c1100c0 	.word	0x4c1100c0
   2e87c:	58e00083 	.word	0x58e00083
   2e880:	2901b190 	.word	0x2901b190
   2e884:	2902d005 	.word	0x2902d005
   2e888:	58e0d114 	.word	0x58e0d114
   2e88c:	7000f3c0 	.word	0x7000f3c0
   2e890:	f012bd10 	.word	0xf012bd10
   2e894:	58e20001 	.word	0x58e20001
   2e898:	2000bf1a 	.word	0x2000bf1a
   2e89c:	5280f042 	.word	0x5280f042
   2e8a0:	5280f022 	.word	0x5280f022
   2e8a4:	bd1050e2 	.word	0xbd1050e2
   2e8a8:	f7f42009 	.word	0xf7f42009
   2e8ac:	f04ff82f 	.word	0xf04ff82f
   2e8b0:	bd1030ff 	.word	0xbd1030ff
   2e8b4:	f7f42016 	.word	0xf7f42016
   2e8b8:	f04ff829 	.word	0xf04ff829
   2e8bc:	bd1030ff 	.word	0xbd1030ff
   2e8c0:	2002be88 	.word	0x2002be88

0002e8c4 <symbol_00026c2>:
   2e8c4:	4ff0e92d 	.word	0x4ff0e92d
   2e8c8:	2100460e 	.word	0x2100460e
   2e8cc:	b0854605 	.word	0xb0854605
   2e8d0:	93004608 	.word	0x93004608
   2e8d4:	461c4617 	.word	0x461c4617
   2e8d8:	aa034613 	.word	0xaa034613
   2e8dc:	9038f8dd 	.word	0x9038f8dd
   2e8e0:	f88af7fb 	.word	0xf88af7fb
   2e8e4:	f7eb4628 	.word	0xf7eb4628
   2e8e8:	4682fb4d 	.word	0x4682fb4d
   2e8ec:	f7eb4630 	.word	0xf7eb4630
   2e8f0:	9903fb49 	.word	0x9903fb49
   2e8f4:	eb031c4b 	.word	0xeb031c4b
   2e8f8:	44531391 	.word	0x44531391
   2e8fc:	9b0f4418 	.word	0x9b0f4418
   2e900:	d8534298 	.word	0xd8534298
   2e904:	f0072001 	.word	0xf0072001
   2e908:	4682f99b 	.word	0x4682f99b
   2e90c:	d0522800 	.word	0xd0522800
   2e910:	94009903 	.word	0x94009903
   2e914:	aa03463b 	.word	0xaa03463b
   2e918:	f86ef7fb 	.word	0xf86ef7fb
   2e91c:	28004680 	.word	0x28004680
   2e920:	4628d13d 	.word	0x4628d13d
   2e924:	fb2ef7eb 	.word	0xfb2ef7eb
   2e928:	46024629 	.word	0x46024629
   2e92c:	f0124648 	.word	0xf0124648
   2e930:	4628fa17 	.word	0x4628fa17
   2e934:	fb26f7eb 	.word	0xfb26f7eb
   2e938:	eb099b03 	.word	0xeb099b03
   2e93c:	b19b0400 	.word	0xb19b0400
   2e940:	270a46d3 	.word	0x270a46d3
   2e944:	bf282b40 	.word	0xbf282b40
   2e948:	461d2340 	.word	0x461d2340
   2e94c:	461a4659 	.word	0x461a4659
   2e950:	f0124620 	.word	0xf0124620
   2e954:	9b03fa05 	.word	0x9b03fa05
   2e958:	1b5b442c 	.word	0x1b5b442c
   2e95c:	44ab7027 	.word	0x44ab7027
   2e960:	93033401 	.word	0x93033401
   2e964:	d1ed2b00 	.word	0xd1ed2b00
   2e968:	f7eb4630 	.word	0xf7eb4630
   2e96c:	4631fb0b 	.word	0x4631fb0b
   2e970:	46204602 	.word	0x46204602
   2e974:	f9f4f012 	.word	0xf9f4f012
   2e978:	f7eb4630 	.word	0xf7eb4630
   2e97c:	2100fb03 	.word	0x2100fb03
   2e980:	18234602 	.word	0x18234602
   2e984:	330154a1 	.word	0x330154a1
   2e988:	eba39a10 	.word	0xeba39a10
   2e98c:	46500309 	.word	0x46500309
   2e990:	f0076013 	.word	0xf0076013
   2e994:	4640f969 	.word	0x4640f969
   2e998:	e8bdb005 	.word	0xe8bdb005
   2e99c:	46508ff0 	.word	0x46508ff0
   2e9a0:	f962f007 	.word	0xf962f007
   2e9a4:	b0054640 	.word	0xb0054640
   2e9a8:	8ff0e8bd 	.word	0x8ff0e8bd
   2e9ac:	f06f9b10 	.word	0xf06f9b10
   2e9b0:	60180829 	.word	0x60180829
   2e9b4:	f8dfe7ef 	.word	0xf8dfe7ef
   2e9b8:	e7ec8004 	.word	0xe7ec8004
   2e9bc:	ffffee80 	.word	0xffffee80

0002e9c0 <ip_recvd_packet_free_cb>:
   2e9c0:	4604b510 	.word	0x4604b510
   2e9c4:	f7fa6800 	.word	0xf7fa6800
   2e9c8:	68a0fc9f 	.word	0x68a0fc9f
   2e9cc:	e8bdb118 	.word	0xe8bdb118
   2e9d0:	f0074010 	.word	0xf0074010
   2e9d4:	bd10b949 	.word	0xbd10b949

0002e9d8 <rpc_error_to_nrf_bsd_error>:
   2e9d8:	bf9a2810 	.word	0xbf9a2810
   2e9dc:	f8534b02 	.word	0xf8534b02
   2e9e0:	202d0020 	.word	0x202d0020
   2e9e4:	bf004770 	.word	0xbf004770
   2e9e8:	00043050 	.word	0x00043050

0002e9ec <ip_interface_request_create>:
   2e9ec:	2500b570 	.word	0x2500b570
   2e9f0:	ac02b082 	.word	0xac02b082
   2e9f4:	5d04f844 	.word	0x5d04f844
   2e9f8:	460d4606 	.word	0x460d4606
   2e9fc:	46194620 	.word	0x46194620
   2ea00:	f7fa4614 	.word	0xf7fa4614
   2ea04:	b960fc4f 	.word	0xb960fc4f
   2ea08:	22089b01 	.word	0x22089b01
   2ea0c:	72987258 	.word	0x72987258
   2ea10:	461872d8 	.word	0x461872d8
   2ea14:	4406ea44 	.word	0x4406ea44
   2ea18:	611d60dc 	.word	0x611d60dc
   2ea1c:	b002721a 	.word	0xb002721a
   2ea20:	9b01bd70 	.word	0x9b01bd70
   2ea24:	b0024618 	.word	0xb0024618
   2ea28:	bf00bd70 	.word	0xbf00bd70

0002ea2c <ip_interface_request_send>:
   2ea2c:	460cb570 	.word	0x460cb570
   2ea30:	46114605 	.word	0x46114605
   2ea34:	461e4620 	.word	0x461e4620
   2ea38:	fc48f7fa 	.word	0xfc48f7fa
   2ea3c:	bd70b900 	.word	0xbd70b900
   2ea40:	b1086820 	.word	0xb1086820
   2ea44:	fc60f7fa 	.word	0xfc60f7fa
   2ea48:	f7fa4620 	.word	0xf7fa4620
   2ea4c:	602efc55 	.word	0x602efc55
   2ea50:	bd702023 	.word	0xbd702023

0002ea54 <ip_interface_wait>:
   2ea54:	4605b538 	.word	0x4605b538
   2ea58:	fde4f7ff 	.word	0xfde4f7ff
   2ea5c:	b1084604 	.word	0xb1084604
   2ea60:	bd384620 	.word	0xbd384620
   2ea64:	f7ff4628 	.word	0xf7ff4628
   2ea68:	2800fe49 	.word	0x2800fe49
   2ea6c:	6844d0f8 	.word	0x6844d0f8
   2ea70:	d0f52c00 	.word	0xd0f52c00
   2ea74:	60432300 	.word	0x60432300
   2ea78:	bd384620 	.word	0xbd384620

0002ea7c <ip_interface_init>:
   2ea7c:	2300b538 	.word	0x2300b538
   2ea80:	4c084d07 	.word	0x4c084d07
   2ea84:	22204619 	.word	0x22204619
   2ea88:	602b4807 	.word	0x602b4807
   2ea8c:	f0126023 	.word	0xf0126023
   2ea90:	f7faf987 	.word	0xf7faf987
   2ea94:	3000fc01 	.word	0x3000fc01
   2ea98:	2001bf18 	.word	0x2001bf18
   2ea9c:	bd384240 	.word	0xbd384240
   2eaa0:	20024b3c 	.word	0x20024b3c
   2eaa4:	20024b38 	.word	0x20024b38
   2eaa8:	20024b44 	.word	0x20024b44

0002eaac <ip_interface_open>:
   2eaac:	41f0e92d 	.word	0x41f0e92d
   2eab0:	20004606 	.word	0x20004606
   2eab4:	0308f026 	.word	0x0308f026
   2eab8:	2b02b082 	.word	0x2b02b082
   2eabc:	4617460c 	.word	0x4617460c
   2eac0:	d0029000 	.word	0xd0029000
   2eac4:	f0402e05 	.word	0xf0402e05
   2eac8:	1e638084 	.word	0x1e638084
   2eacc:	d85c2b02 	.word	0xd85c2b02
   2ead0:	d1542f00 	.word	0xd1542f00
   2ead4:	d0672c01 	.word	0xd0672c01
   2ead8:	bf182c03 	.word	0xbf182c03
   2eadc:	4a482702 	.word	0x4a482702
   2eae0:	46684621 	.word	0x46684621
   2eae4:	fcfaf7ff 	.word	0xfcfaf7ff
   2eae8:	46809b00 	.word	0x46809b00
   2eaec:	d0592b00 	.word	0xd0592b00
   2eaf0:	a8022100 	.word	0xa8022100
   2eaf4:	1d04f840 	.word	0x1d04f840
   2eaf8:	6403e9c3 	.word	0x6403e9c3
   2eafc:	f7fa615f 	.word	0xf7fa615f
   2eb00:	2800fbd1 	.word	0x2800fbd1
   2eb04:	f247d14b 	.word	0xf247d14b
   2eb08:	f04f0201 	.word	0xf04f0201
   2eb0c:	210833ff 	.word	0x210833ff
   2eb10:	ea429d01 	.word	0xea429d01
   2eb14:	60ea4208 	.word	0x60ea4208
   2eb18:	72a87268 	.word	0x72a87268
   2eb1c:	722972e8 	.word	0x722972e8
   2eb20:	746b742b 	.word	0x746b742b
   2eb24:	74eb74ab 	.word	0x74eb74ab
   2eb28:	2e0568ab 	.word	0x2e0568ab
   2eb2c:	030cf103 	.word	0x030cf103
   2eb30:	d00360ab 	.word	0xd00360ab
   2eb34:	bf142e0a 	.word	0xbf142e0a
   2eb38:	26022601 	.word	0x26022601
   2eb3c:	61ef616e 	.word	0x61ef616e
   2eb40:	f24761ac 	.word	0xf24761ac
   2eb44:	46280101 	.word	0x46280101
   2eb48:	f7fa9f00 	.word	0xf7fa9f00
   2eb4c:	4606fbbf 	.word	0x4606fbbf
   2eb50:	6828b360 	.word	0x6828b360
   2eb54:	f7fab108 	.word	0xf7fab108
   2eb58:	4628fbd7 	.word	0x4628fbd7
   2eb5c:	fbccf7fa 	.word	0xfbccf7fa
   2eb60:	25232301 	.word	0x25232301
   2eb64:	4640603b 	.word	0x4640603b
   2eb68:	fd0ef7ff 	.word	0xfd0ef7ff
   2eb6c:	f7f34628 	.word	0xf7f34628
   2eb70:	f04ffecd 	.word	0xf04ffecd
   2eb74:	464038ff 	.word	0x464038ff
   2eb78:	e8bdb002 	.word	0xe8bdb002
   2eb7c:	2c0181f0 	.word	0x2c0181f0
   2eb80:	2c02d009 	.word	0x2c02d009
   2eb84:	2f02d109 	.word	0x2f02d109
   2eb88:	2016d0a9 	.word	0x2016d0a9
   2eb8c:	febef7f3 	.word	0xfebef7f3
   2eb90:	38fff04f 	.word	0x38fff04f
   2eb94:	2f01e7ef 	.word	0x2f01e7ef
   2eb98:	2702d1f7 	.word	0x2702d1f7
   2eb9c:	9d01e79f 	.word	0x9d01e79f
   2eba0:	d1c12d00 	.word	0xd1c12d00
   2eba4:	e7de250c 	.word	0xe7de250c
   2eba8:	e7984627 	.word	0xe7984627
   2ebac:	33fff04f 	.word	0x33fff04f
   2ebb0:	72fff64f 	.word	0x72fff64f
   2ebb4:	46402102 	.word	0x46402102
   2ebb8:	fd34f7ff 	.word	0xfd34f7ff
   2ebbc:	28004605 	.word	0x28004605
   2ebc0:	4640d1d1 	.word	0x4640d1d1
   2ebc4:	fd9af7ff 	.word	0xfd9af7ff
   2ebc8:	6845b148 	.word	0x6845b148
   2ebcc:	6046b13d 	.word	0x6046b13d
   2ebd0:	202fe7c9 	.word	0x202fe7c9
   2ebd4:	fe9af7f3 	.word	0xfe9af7f3
   2ebd8:	38fff04f 	.word	0x38fff04f
   2ebdc:	3c02e7cb 	.word	0x3c02e7cb
   2ebe0:	d8c82c01 	.word	0xd8c82c01
   2ebe4:	9b004640 	.word	0x9b004640
   2ebe8:	f442681a 	.word	0xf442681a
   2ebec:	601a3200 	.word	0x601a3200
   2ebf0:	f442681a 	.word	0xf442681a
   2ebf4:	601a1280 	.word	0x601a1280
   2ebf8:	e8bdb002 	.word	0xe8bdb002
   2ebfc:	bf0081f0 	.word	0xbf0081f0
   2ec00:	0002e9c1 	.word	0x0002e9c1

0002ec04 <ip_interface_close>:
   2ec04:	41f0e92d 	.word	0x41f0e92d
   2ec08:	4606b082 	.word	0x4606b082
   2ec0c:	fd76f7ff 	.word	0xfd76f7ff
   2ec10:	d0632800 	.word	0xd0632800
   2ec14:	21004604 	.word	0x21004604
   2ec18:	6827a802 	.word	0x6827a802
   2ec1c:	1d04f840 	.word	0x1d04f840
   2ec20:	8018f8d4 	.word	0x8018f8d4
   2ec24:	fb3ef7fa 	.word	0xfb3ef7fa
   2ec28:	d13a2800 	.word	0xd13a2800
   2ec2c:	0309f247 	.word	0x0309f247
   2ec30:	9d012208 	.word	0x9d012208
   2ec34:	4306ea43 	.word	0x4306ea43
   2ec38:	f8c560eb 	.word	0xf8c560eb
   2ec3c:	72688010 	.word	0x72688010
   2ec40:	72e872a8 	.word	0x72e872a8
   2ec44:	6823722a 	.word	0x6823722a
   2ec48:	0109f247 	.word	0x0109f247
   2ec4c:	041b0c1b 	.word	0x041b0c1b
   2ec50:	030df043 	.word	0x030df043
   2ec54:	68236023 	.word	0x68236023
   2ec58:	f4234628 	.word	0xf4234628
   2ec5c:	60233300 	.word	0x60233300
   2ec60:	f4236823 	.word	0xf4236823
   2ec64:	60231380 	.word	0x60231380
   2ec68:	fb30f7fa 	.word	0xfb30f7fa
   2ec6c:	f04fbb40 	.word	0xf04fbb40
   2ec70:	f64f33ff 	.word	0xf64f33ff
   2ec74:	210e72ff 	.word	0x210e72ff
   2ec78:	f7ff4630 	.word	0xf7ff4630
   2ec7c:	4604fcd3 	.word	0x4604fcd3
   2ec80:	4c17b1a0 	.word	0x4c17b1a0
   2ec84:	0026f854 	.word	0x0026f854
   2ec88:	f7fab120 	.word	0xf7fab120
   2ec8c:	2300fb35 	.word	0x2300fb35
   2ec90:	3026f844 	.word	0x3026f844
   2ec94:	f7ff4630 	.word	0xf7ff4630
   2ec98:	2000fc77 	.word	0x2000fc77
   2ec9c:	e8bdb002 	.word	0xe8bdb002
   2eca0:	9d0181f0 	.word	0x9d0181f0
   2eca4:	2d00200c 	.word	0x2d00200c
   2eca8:	e012d1cd 	.word	0xe012d1cd
   2ecac:	f7ff4630 	.word	0xf7ff4630
   2ecb0:	2800fd25 	.word	0x2800fd25
   2ecb4:	6843d0e5 	.word	0x6843d0e5
   2ecb8:	d0e22b00 	.word	0xd0e22b00
   2ecbc:	e7e06044 	.word	0xe7e06044
   2ecc0:	b1086828 	.word	0xb1086828
   2ecc4:	fb20f7fa 	.word	0xfb20f7fa
   2ecc8:	f7fa4628 	.word	0xf7fa4628
   2eccc:	2023fb15 	.word	0x2023fb15
   2ecd0:	f7f36027 	.word	0xf7f36027
   2ecd4:	f04ffe1b 	.word	0xf04ffe1b
   2ecd8:	e7df30ff 	.word	0xe7df30ff
   2ecdc:	e7f82009 	.word	0xe7f82009
   2ece0:	20024b44 	.word	0x20024b44

0002ece4 <ip_interface_sendto>:
   2ece4:	4ff0e92d 	.word	0x4ff0e92d
   2ece8:	b0892500 	.word	0xb0892500
   2ecec:	46149103 	.word	0x46149103
   2ecf0:	95079301 	.word	0x95079301
   2ecf4:	9e124607 	.word	0x9e124607
   2ecf8:	fd00f7ff 	.word	0xfd00f7ff
   2ecfc:	f0002800 	.word	0xf0002800
   2ed00:	f5b48124 	.word	0xf5b48124
   2ed04:	f3005f80 	.word	0xf3005f80
   2ed08:	69038118 	.word	0x69038118
   2ed0c:	2b014605 	.word	0x2b014605
   2ed10:	80d1f000 	.word	0x80d1f000
   2ed14:	0390682a 	.word	0x0390682a
   2ed18:	682ad423 	.word	0x682ad423
   2ed1c:	d4060091 	.word	0xd4060091
   2ed20:	f0002b01 	.word	0xf0002b01
   2ed24:	682b80ed 	.word	0x682b80ed
   2ed28:	f140031a 	.word	0xf140031a
   2ed2c:	682b8102 	.word	0x682b8102
   2ed30:	f140031b 	.word	0xf140031b
   2ed34:	68a88106 	.word	0x68a88106
   2ed38:	9218f8df 	.word	0x9218f8df
   2ed3c:	f0402800 	.word	0xf0402800
   2ed40:	682b8096 	.word	0x682b8096
   2ed44:	f1400118 	.word	0xf1400118
   2ed48:	682b8082 	.word	0x682b8082
   2ed4c:	6300f023 	.word	0x6300f023
   2ed50:	f859602b 	.word	0xf859602b
   2ed54:	28000027 	.word	0x28000027
   2ed58:	4620d17c 	.word	0x4620d17c
   2ed5c:	e8bdb009 	.word	0xe8bdb009
   2ed60:	f2478ff0 	.word	0xf2478ff0
   2ed64:	f04f0806 	.word	0xf04f0806
   2ed68:	043b0a0c 	.word	0x043b0a0c
   2ed6c:	91e4f8df 	.word	0x91e4f8df
   2ed70:	46219304 	.word	0x46219304
   2ed74:	f7faa807 	.word	0xf7faa807
   2ed78:	2804fa95 	.word	0x2804fa95
   2ed7c:	2800d0f9 	.word	0x2800d0f9
   2ed80:	9b07d171 	.word	0x9b07d171
   2ed84:	a008f883 	.word	0xa008f883
   2ed88:	72987258 	.word	0x72987258
   2ed8c:	b33e72d8 	.word	0xb33e72d8
   2ed90:	687168ea 	.word	0x687168ea
   2ed94:	d10a428a 	.word	0xd10a428a
   2ed98:	f1032a02 	.word	0xf1032a02
   2ed9c:	7831001c 	.word	0x7831001c
   2eda0:	8090f000 	.word	0x8090f000
   2eda4:	d1022a0a 	.word	0xd1022a0a
   2eda8:	f0002924 	.word	0xf0002924
   2edac:	681880af 	.word	0x681880af
   2edb0:	f7fab110 	.word	0xf7fab110
   2edb4:	9b07faa9 	.word	0x9b07faa9
   2edb8:	f7fa4618 	.word	0xf7fa4618
   2edbc:	2016fa9d 	.word	0x2016fa9d
   2edc0:	031a682b 	.word	0x031a682b
   2edc4:	682bd453 	.word	0x682bd453
   2edc8:	2b0db29b 	.word	0x2b0db29b
   2edcc:	682bd0b6 	.word	0x682bd0b6
   2edd0:	1300f423 	.word	0x1300f423
   2edd4:	682b602b 	.word	0x682b602b
   2edd8:	3300f443 	.word	0x3300f443
   2eddc:	e7ad602b 	.word	0xe7ad602b
   2ede0:	99014642 	.word	0x99014642
   2ede4:	69a96159 	.word	0x69a96159
   2ede8:	61199804 	.word	0x61199804
   2edec:	43029903 	.word	0x43029903
   2edf0:	605c60da 	.word	0x605c60da
   2edf4:	6818b119 	.word	0x6818b119
   2edf8:	f0114622 	.word	0xf0114622
   2edfc:	682bffb1 	.word	0x682bffb1
   2ee00:	93054641 	.word	0x93054641
   2ee04:	f423682b 	.word	0xf423682b
   2ee08:	602b3300 	.word	0x602b3300
   2ee0c:	f443682b 	.word	0xf443682b
   2ee10:	602b1300 	.word	0x602b1300
   2ee14:	46189b07 	.word	0x46189b07
   2ee18:	f7fa9302 	.word	0xf7fa9302
   2ee1c:	9b02fa57 	.word	0x9b02fa57
   2ee20:	bb584683 	.word	0xbb584683
   2ee24:	3200f44f 	.word	0x3200f44f
   2ee28:	33fff04f 	.word	0x33fff04f
   2ee2c:	46384611 	.word	0x46384611
   2ee30:	fbf8f7ff 	.word	0xfbf8f7ff
   2ee34:	682bb370 	.word	0x682bb370
   2ee38:	d4370319 	.word	0xd4370319
   2ee3c:	d1bf280c 	.word	0xd1bf280c
   2ee40:	0027f859 	.word	0x0027f859
   2ee44:	d0942800 	.word	0xd0942800
   2ee48:	fa56f7fa 	.word	0xfa56f7fa
   2ee4c:	f859e791 	.word	0xf859e791
   2ee50:	69840027 	.word	0x69840027
   2ee54:	fa50f7fa 	.word	0xfa50f7fa
   2ee58:	46202300 	.word	0x46202300
   2ee5c:	3027f849 	.word	0x3027f849
   2ee60:	e8bdb009 	.word	0xe8bdb009
   2ee64:	682b8ff0 	.word	0x682b8ff0
   2ee68:	031a200c 	.word	0x031a200c
   2ee6c:	f7f3d5ab 	.word	0xf7f3d5ab
   2ee70:	f04ffd4d 	.word	0xf04ffd4d
   2ee74:	f85934ff 	.word	0xf85934ff
   2ee78:	e76c0027 	.word	0xe76c0027
   2ee7c:	469b6818 	.word	0x469b6818
   2ee80:	f7fab108 	.word	0xf7fab108
   2ee84:	4658fa41 	.word	0x4658fa41
   2ee88:	fa36f7fa 	.word	0xfa36f7fa
   2ee8c:	20239b05 	.word	0x20239b05
   2ee90:	e795602b 	.word	0xe795602b
   2ee94:	f7ff4638 	.word	0xf7ff4638
   2ee98:	4603fc31 	.word	0x4603fc31
   2ee9c:	6840b1f0 	.word	0x6840b1f0
   2eea0:	f8c3b1e0 	.word	0xf8c3b1e0
   2eea4:	682bb004 	.word	0x682bb004
   2eea8:	d5c70319 	.word	0xd5c70319
   2eeac:	682b68a8 	.word	0x682b68a8
   2eeb0:	d588031e 	.word	0xd588031e
   2eeb4:	2e00e742 	.word	0x2e00e742
   2eeb8:	af2cf43f 	.word	0xaf2cf43f
   2eebc:	f8df2016 	.word	0xf8df2016
   2eec0:	e7d49094 	.word	0xe7d49094
   2eec4:	f47f2910 	.word	0xf47f2910
   2eec8:	2204af72 	.word	0x2204af72
   2eecc:	835a8931 	.word	0x835a8931
   2eed0:	f1068319 	.word	0xf1068319
   2eed4:	f011010c 	.word	0xf011010c
   2eed8:	e01eff43 	.word	0xe01eff43
   2eedc:	031b682b 	.word	0x031b682b
   2eee0:	af2ff53f 	.word	0xaf2ff53f
   2eee4:	b29b682b 	.word	0xb29b682b
   2eee8:	f43f2b0d 	.word	0xf43f2b0d
   2eeec:	682baf2a 	.word	0x682baf2a
   2eef0:	1300f423 	.word	0x1300f423
   2eef4:	682b602b 	.word	0x682b602b
   2eef8:	3300f443 	.word	0x3300f443
   2eefc:	e720602b 	.word	0xe720602b
   2ef00:	b29b682b 	.word	0xb29b682b
   2ef04:	f47f2b05 	.word	0xf47f2b05
   2ef08:	e70caf12 	.word	0xe70caf12
   2ef0c:	89312210 	.word	0x89312210
   2ef10:	8319835a 	.word	0x8319835a
   2ef14:	f01118b1 	.word	0xf01118b1
   2ef18:	f247ff23 	.word	0xf247ff23
   2ef1c:	9b070207 	.word	0x9b070207
   2ef20:	68994690 	.word	0x68994690
   2ef24:	31048b58 	.word	0x31048b58
   2ef28:	98014401 	.word	0x98014401
   2ef2c:	61586099 	.word	0x61586099
   2ef30:	2023e759 	.word	0x2023e759
   2ef34:	901cf8df 	.word	0x901cf8df
   2ef38:	2028e799 	.word	0x2028e799
   2ef3c:	9014f8df 	.word	0x9014f8df
   2ef40:	2039e795 	.word	0x2039e795
   2ef44:	900cf8df 	.word	0x900cf8df
   2ef48:	2009e791 	.word	0x2009e791
   2ef4c:	9004f8df 	.word	0x9004f8df
   2ef50:	bf00e78d 	.word	0xbf00e78d
   2ef54:	20024b44 	.word	0x20024b44

0002ef58 <ip_interface_recvfrom>:
   2ef58:	4ff0e92d 	.word	0x4ff0e92d
   2ef5c:	2a00b085 	.word	0x2a00b085
   2ef60:	8110f000 	.word	0x8110f000
   2ef64:	4699468a 	.word	0x4699468a
   2ef68:	46164607 	.word	0x46164607
   2ef6c:	fbc6f7ff 	.word	0xfbc6f7ff
   2ef70:	28004604 	.word	0x28004604
   2ef74:	810df000 	.word	0x810df000
   2ef78:	02d96803 	.word	0x02d96803
   2ef7c:	f019d565 	.word	0xf019d565
   2ef80:	bf180f02 	.word	0xbf180f02
   2ef84:	0800f04f 	.word	0x0800f04f
   2ef88:	3bfff04f 	.word	0x3bfff04f
   2ef8c:	6803bf08 	.word	0x6803bf08
   2ef90:	0510f009 	.word	0x0510f009
   2ef94:	f083bf04 	.word	0xf083bf04
   2ef98:	f3c85880 	.word	0xf3c85880
   2ef9c:	68237800 	.word	0x68237800
   2efa0:	d56d03da 	.word	0xd56d03da
   2efa4:	69e06823 	.word	0x69e06823
   2efa8:	3380f423 	.word	0x3380f423
   2efac:	68036023 	.word	0x68036023
   2efb0:	479868db 	.word	0x479868db
   2efb4:	3ffff1b0 	.word	0x3ffff1b0
   2efb8:	f0004683 	.word	0xf0004683
   2efbc:	42868081 	.word	0x42868081
   2efc0:	6923dd03 	.word	0x6923dd03
   2efc4:	f0002b01 	.word	0xf0002b01
   2efc8:	250080a7 	.word	0x250080a7
   2efcc:	9b0f69e0 	.word	0x9b0f69e0
   2efd0:	681bb103 	.word	0x681bb103
   2efd4:	e9cd9a0e 	.word	0xe9cd9a0e
   2efd8:	e9cda600 	.word	0xe9cda600
   2efdc:	68032302 	.word	0x68032302
   2efe0:	689b464a 	.word	0x689b464a
   2efe4:	47984669 	.word	0x47984669
   2efe8:	69e04683 	.word	0x69e04683
   2efec:	3ffff1bb 	.word	0x3ffff1bb
   2eff0:	bf186803 	.word	0xbf186803
   2eff4:	68db2601 	.word	0x68db2601
   2eff8:	2600bf0a 	.word	0x2600bf0a
   2effc:	0800f04f 	.word	0x0800f04f
   2f000:	0823f04f 	.word	0x0823f04f
   2f004:	30014798 	.word	0x30014798
   2f008:	2d00d135 	.word	0x2d00d135
   2f00c:	80b6f000 	.word	0x80b6f000
   2f010:	f0002e00 	.word	0xf0002e00
   2f014:	682380a6 	.word	0x682380a6
   2f018:	d5060319 	.word	0xd5060319
   2f01c:	b29b6823 	.word	0xb29b6823
   2f020:	d0022b0d 	.word	0xd0022b0d
   2f024:	2b016923 	.word	0x2b016923
   2f028:	6823d025 	.word	0x6823d025
   2f02c:	4f80f013 	.word	0x4f80f013
   2f030:	f0406823 	.word	0xf0406823
   2f034:	031a80b1 	.word	0x031a80b1
   2f038:	f1b8d475 	.word	0xf1b8d475
   2f03c:	f0400f00 	.word	0xf0400f00
   2f040:	4658808a 	.word	0x4658808a
   2f044:	e8bdb005 	.word	0xe8bdb005
   2f048:	68038ff0 	.word	0x68038ff0
   2f04c:	2b06b29b 	.word	0x2b06b29b
   2f050:	6803d073 	.word	0x6803d073
   2f054:	2b07b29b 	.word	0x2b07b29b
   2f058:	f04fbf0c 	.word	0xf04fbf0c
   2f05c:	f04f0809 	.word	0xf04f0809
   2f060:	69e00839 	.word	0x69e00839
   2f064:	68db6803 	.word	0x68db6803
   2f068:	f1b04798 	.word	0xf1b04798
   2f06c:	46833fff 	.word	0x46833fff
   2f070:	f04fd0db 	.word	0xf04fd0db
   2f074:	68233bff 	.word	0x68233bff
   2f078:	3380f443 	.word	0x3380f443
   2f07c:	e7dc6023 	.word	0xe7dc6023
   2f080:	0f00f1b8 	.word	0x0f00f1b8
   2f084:	8081f000 	.word	0x8081f000
   2f088:	3280f44f 	.word	0x3280f44f
   2f08c:	46116a23 	.word	0x46116a23
   2f090:	bf082b00 	.word	0xbf082b00
   2f094:	33fff04f 	.word	0x33fff04f
   2f098:	f7ff4638 	.word	0xf7ff4638
   2f09c:	4680fac3 	.word	0x4680fac3
   2f0a0:	6823b358 	.word	0x6823b358
   2f0a4:	031b69e0 	.word	0x031b69e0
   2f0a8:	6823d521 	.word	0x6823d521
   2f0ac:	2b0db29b 	.word	0x2b0db29b
   2f0b0:	6925d01d 	.word	0x6925d01d
   2f0b4:	0501f1a5 	.word	0x0501f1a5
   2f0b8:	f585fab5 	.word	0xf585fab5
   2f0bc:	e786096d 	.word	0xe786096d
   2f0c0:	03186823 	.word	0x03186823
   2f0c4:	6823d5dc 	.word	0x6823d5dc
   2f0c8:	2b0db29b 	.word	0x2b0db29b
   2f0cc:	6923d0d8 	.word	0x6923d0d8
   2f0d0:	2b0169e0 	.word	0x2b0169e0
   2f0d4:	f04fd034 	.word	0xf04fd034
   2f0d8:	68230839 	.word	0x68230839
   2f0dc:	041b0c1b 	.word	0x041b0c1b
   2f0e0:	030df043 	.word	0x030df043
   2f0e4:	68236023 	.word	0x68236023
   2f0e8:	1380f423 	.word	0x1380f423
   2f0ec:	68036023 	.word	0x68036023
   2f0f0:	479868db 	.word	0x479868db
   2f0f4:	d1be3001 	.word	0xd1be3001
   2f0f8:	4638e797 	.word	0x4638e797
   2f0fc:	fafef7ff 	.word	0xfafef7ff
   2f100:	f8d0b138 	.word	0xf8d0b138
   2f104:	f1b88004 	.word	0xf1b88004
   2f108:	d0020f00 	.word	0xd0020f00
   2f10c:	60432300 	.word	0x60432300
   2f110:	f04fe7c7 	.word	0xf04fe7c7
   2f114:	e7420801 	.word	0xe7420801
   2f118:	6823b11d 	.word	0x6823b11d
   2f11c:	d5b300db 	.word	0xd5b300db
   2f120:	69e0e753 	.word	0x69e0e753
   2f124:	6823e753 	.word	0x6823e753
   2f128:	2b0db29b 	.word	0x2b0db29b
   2f12c:	68a3d185 	.word	0x68a3d185
   2f130:	d0822b00 	.word	0xd0822b00
   2f134:	8008f8d4 	.word	0x8008f8d4
   2f138:	f04fe77f 	.word	0xf04fe77f
   2f13c:	e7900809 	.word	0xe7900809
   2f140:	68db6803 	.word	0x68db6803
   2f144:	30014798 	.word	0x30014798
   2f148:	f04fd00b 	.word	0xf04fd00b
   2f14c:	68230823 	.word	0x68230823
   2f150:	3380f443 	.word	0x3380f443
   2f154:	46406023 	.word	0x46406023
   2f158:	fbd8f7f3 	.word	0xfbd8f7f3
   2f15c:	3bfff04f 	.word	0x3bfff04f
   2f160:	6823e76f 	.word	0x6823e76f
   2f164:	0b00f04f 	.word	0x0b00f04f
   2f168:	041b0c1b 	.word	0x041b0c1b
   2f16c:	030df043 	.word	0x030df043
   2f170:	68236023 	.word	0x68236023
   2f174:	1380f423 	.word	0x1380f423
   2f178:	e7626023 	.word	0xe7626023
   2f17c:	f47f2e00 	.word	0xf47f2e00
   2f180:	e752af4a 	.word	0xe752af4a
   2f184:	0816f04f 	.word	0x0816f04f
   2f188:	f04fe7e5 	.word	0xf04fe7e5
   2f18c:	69e00823 	.word	0x69e00823
   2f190:	f04fe7ad 	.word	0xf04fe7ad
   2f194:	e7de0809 	.word	0xe7de0809
   2f198:	4380f023 	.word	0x4380f023
   2f19c:	68236023 	.word	0x68236023
   2f1a0:	0869f04f 	.word	0x0869f04f
   2f1a4:	041b0c1b 	.word	0x041b0c1b
   2f1a8:	030df043 	.word	0x030df043
   2f1ac:	e7d26023 	.word	0xe7d26023

0002f1b0 <ip_interface_connect>:
   2f1b0:	41f0e92d 	.word	0x41f0e92d
   2f1b4:	2900b082 	.word	0x2900b082
   2f1b8:	2a00d044 	.word	0x2a00d044
   2f1bc:	4606d042 	.word	0x4606d042
   2f1c0:	f7ff460f 	.word	0xf7ff460f
   2f1c4:	4605fa9b 	.word	0x4605fa9b
   2f1c8:	f0002800 	.word	0xf0002800
   2f1cc:	68038096 	.word	0x68038096
   2f1d0:	2b02b29b 	.word	0x2b02b29b
   2f1d4:	6803d004 	.word	0x6803d004
   2f1d8:	2b04b29b 	.word	0x2b04b29b
   2f1dc:	808df040 	.word	0x808df040
   2f1e0:	f0116829 	.word	0xf0116829
   2f1e4:	f0405100 	.word	0xf0405100
   2f1e8:	a8028084 	.word	0xa8028084
   2f1ec:	1d04f840 	.word	0x1d04f840
   2f1f0:	8018f8d5 	.word	0x8018f8d5
   2f1f4:	f856f7fa 	.word	0xf856f7fa
   2f1f8:	2108bb70 	.word	0x2108bb70
   2f1fc:	9c010433 	.word	0x9c010433
   2f200:	42e0f443 	.word	0x42e0f443
   2f204:	0202f042 	.word	0x0202f042
   2f208:	f8c460e2 	.word	0xf8c460e2
   2f20c:	72608010 	.word	0x72608010
   2f210:	72e072a0 	.word	0x72e072a0
   2f214:	f4437221 	.word	0xf4437221
   2f218:	f04343e0 	.word	0xf04343e0
   2f21c:	60e30302 	.word	0x60e30302
   2f220:	69aa68a3 	.word	0x69aa68a3
   2f224:	61223304 	.word	0x61223304
   2f228:	68eb60a3 	.word	0x68eb60a3
   2f22c:	4293687a 	.word	0x4293687a
   2f230:	2b02d108 	.word	0x2b02d108
   2f234:	0018f104 	.word	0x0018f104
   2f238:	d03a783a 	.word	0xd03a783a
   2f23c:	d1012b0a 	.word	0xd1012b0a
   2f240:	d00e2a24 	.word	0xd00e2a24
   2f244:	46202416 	.word	0x46202416
   2f248:	fb60f7f3 	.word	0xfb60f7f3
   2f24c:	34fff04f 	.word	0x34fff04f
   2f250:	b0024620 	.word	0xb0024620
   2f254:	81f0e8bd 	.word	0x81f0e8bd
   2f258:	2c009c01 	.word	0x2c009c01
   2f25c:	0433d04f 	.word	0x0433d04f
   2f260:	2210e7d9 	.word	0x2210e7d9
   2f264:	18b9893b 	.word	0x18b9893b
   2f268:	82a382e2 	.word	0x82a382e2
   2f26c:	fd78f011 	.word	0xfd78f011
   2f270:	8ae268a3 	.word	0x8ae268a3
   2f274:	0102f247 	.word	0x0102f247
   2f278:	60a34413 	.word	0x60a34413
   2f27c:	682b682f 	.word	0x682b682f
   2f280:	f0434620 	.word	0xf0434620
   2f284:	602b5300 	.word	0x602b5300
   2f288:	f820f7fa 	.word	0xf820f7fa
   2f28c:	682bb9e0 	.word	0x682bb9e0
   2f290:	5880f013 	.word	0x5880f013
   2f294:	f04fd12f 	.word	0xf04fd12f
   2f298:	f64f33ff 	.word	0xf64f33ff
   2f29c:	210572ff 	.word	0x210572ff
   2f2a0:	f7ff4630 	.word	0xf7ff4630
   2f2a4:	4604f9bf 	.word	0x4604f9bf
   2f2a8:	2c73b1c0 	.word	0x2c73b1c0
   2f2ac:	602fd0cb 	.word	0x602fd0cb
   2f2b0:	2a10e7c9 	.word	0x2a10e7c9
   2f2b4:	2204d1c6 	.word	0x2204d1c6
   2f2b8:	f107893b 	.word	0xf107893b
   2f2bc:	82e2010c 	.word	0x82e2010c
   2f2c0:	f01182a3 	.word	0xf01182a3
   2f2c4:	e7d3fd4d 	.word	0xe7d3fd4d
   2f2c8:	b1086820 	.word	0xb1086820
   2f2cc:	f81cf7fa 	.word	0xf81cf7fa
   2f2d0:	f7fa4620 	.word	0xf7fa4620
   2f2d4:	2423f811 	.word	0x2423f811
   2f2d8:	e7b4602f 	.word	0xe7b4602f
   2f2dc:	f7ff4630 	.word	0xf7ff4630
   2f2e0:	2800fa0d 	.word	0x2800fa0d
   2f2e4:	6844d0b4 	.word	0x6844d0b4
   2f2e8:	d0b12c00 	.word	0xd0b12c00
   2f2ec:	8004f8c0 	.word	0x8004f8c0
   2f2f0:	2472e7db 	.word	0x2472e7db
   2f2f4:	2473e7a7 	.word	0x2473e7a7
   2f2f8:	2409e7a5 	.word	0x2409e7a5
   2f2fc:	240ce7a3 	.word	0x240ce7a3
   2f300:	bf00e7a1 	.word	0xbf00e7a1

0002f304 <ip_interface_bind>:
   2f304:	41f0e92d 	.word	0x41f0e92d
   2f308:	b389b082 	.word	0xb389b082
   2f30c:	4607b382 	.word	0x4607b382
   2f310:	f7ff460e 	.word	0xf7ff460e
   2f314:	4605f9f3 	.word	0x4605f9f3
   2f318:	d07b2800 	.word	0xd07b2800
   2f31c:	b29b6803 	.word	0xb29b6803
   2f320:	d1772b02 	.word	0xd1772b02
   2f324:	a8022100 	.word	0xa8022100
   2f328:	1d04f840 	.word	0x1d04f840
   2f32c:	8018f8d5 	.word	0x8018f8d5
   2f330:	ffb8f7f9 	.word	0xffb8f7f9
   2f334:	f247bb30 	.word	0xf247bb30
   2f338:	22080305 	.word	0x22080305
   2f33c:	ea439c01 	.word	0xea439c01
   2f340:	60e34307 	.word	0x60e34307
   2f344:	8010f8c4 	.word	0x8010f8c4
   2f348:	72a07260 	.word	0x72a07260
   2f34c:	722272e0 	.word	0x722272e0
   2f350:	330468a3 	.word	0x330468a3
   2f354:	68eb60a3 	.word	0x68eb60a3
   2f358:	42936872 	.word	0x42936872
   2f35c:	2b02d108 	.word	0x2b02d108
   2f360:	0018f104 	.word	0x0018f104
   2f364:	d03c7832 	.word	0xd03c7832
   2f368:	d1012b0a 	.word	0xd1012b0a
   2f36c:	d00e2a24 	.word	0xd00e2a24
   2f370:	46202416 	.word	0x46202416
   2f374:	facaf7f3 	.word	0xfacaf7f3
   2f378:	34fff04f 	.word	0x34fff04f
   2f37c:	b0024620 	.word	0xb0024620
   2f380:	81f0e8bd 	.word	0x81f0e8bd
   2f384:	2c009c01 	.word	0x2c009c01
   2f388:	240cd1e2 	.word	0x240cd1e2
   2f38c:	2210e7f1 	.word	0x2210e7f1
   2f390:	18b18933 	.word	0x18b18933
   2f394:	82a382e2 	.word	0x82a382e2
   2f398:	fce2f011 	.word	0xfce2f011
   2f39c:	8ae268a3 	.word	0x8ae268a3
   2f3a0:	0105f247 	.word	0x0105f247
   2f3a4:	60a34413 	.word	0x60a34413
   2f3a8:	4620682b 	.word	0x4620682b
   2f3ac:	041b0c1b 	.word	0x041b0c1b
   2f3b0:	0303f043 	.word	0x0303f043
   2f3b4:	682e602b 	.word	0x682e602b
   2f3b8:	ff88f7f9 	.word	0xff88f7f9
   2f3bc:	b9d84680 	.word	0xb9d84680
   2f3c0:	33fff04f 	.word	0x33fff04f
   2f3c4:	72fff64f 	.word	0x72fff64f
   2f3c8:	46382104 	.word	0x46382104
   2f3cc:	f92af7ff 	.word	0xf92af7ff
   2f3d0:	b3084604 	.word	0xb3084604
   2f3d4:	0c1b682b 	.word	0x0c1b682b
   2f3d8:	f043041b 	.word	0xf043041b
   2f3dc:	602b0302 	.word	0x602b0302
   2f3e0:	2a10e7c7 	.word	0x2a10e7c7
   2f3e4:	2204d1c4 	.word	0x2204d1c4
   2f3e8:	f1068933 	.word	0xf1068933
   2f3ec:	82e2010c 	.word	0x82e2010c
   2f3f0:	f01182a3 	.word	0xf01182a3
   2f3f4:	e7d1fcb5 	.word	0xe7d1fcb5
   2f3f8:	b1086820 	.word	0xb1086820
   2f3fc:	ff84f7f9 	.word	0xff84f7f9
   2f400:	04360c36 	.word	0x04360c36
   2f404:	f0464620 	.word	0xf0464620
   2f408:	f7f90602 	.word	0xf7f90602
   2f40c:	2423ff75 	.word	0x2423ff75
   2f410:	e7ae602e 	.word	0xe7ae602e
   2f414:	e7ac2409 	.word	0xe7ac2409
   2f418:	f7ff4638 	.word	0xf7ff4638
   2f41c:	2800f96f 	.word	0x2800f96f
   2f420:	6844d0ac 	.word	0x6844d0ac
   2f424:	d0a92c00 	.word	0xd0a92c00
   2f428:	8004f8c0 	.word	0x8004f8c0
   2f42c:	bf00e7d2 	.word	0xbf00e7d2

0002f430 <ip_interface_listen>:
   2f430:	41f0e92d 	.word	0x41f0e92d
   2f434:	4606b082 	.word	0x4606b082
   2f438:	f960f7ff 	.word	0xf960f7ff
   2f43c:	d0672800 	.word	0xd0672800
   2f440:	46056803 	.word	0x46056803
   2f444:	2b04b29b 	.word	0x2b04b29b
   2f448:	2100d162 	.word	0x2100d162
   2f44c:	46304a32 	.word	0x46304a32
   2f450:	f8b0f7ff 	.word	0xf8b0f7ff
   2f454:	28004601 	.word	0x28004601
   2f458:	a802d15c 	.word	0xa802d15c
   2f45c:	1d04f840 	.word	0x1d04f840
   2f460:	f7f969af 	.word	0xf7f969af
   2f464:	bba8ff1f 	.word	0xbba8ff1f
   2f468:	0308f247 	.word	0x0308f247
   2f46c:	9c012208 	.word	0x9c012208
   2f470:	4306ea43 	.word	0x4306ea43
   2f474:	612760e3 	.word	0x612760e3
   2f478:	72a07260 	.word	0x72a07260
   2f47c:	722272e0 	.word	0x722272e0
   2f480:	f24768a3 	.word	0xf24768a3
   2f484:	33040108 	.word	0x33040108
   2f488:	682b60a3 	.word	0x682b60a3
   2f48c:	0c1b4620 	.word	0x0c1b4620
   2f490:	f043041b 	.word	0xf043041b
   2f494:	602b0306 	.word	0x602b0306
   2f498:	f7f9682f 	.word	0xf7f9682f
   2f49c:	4680ff17 	.word	0x4680ff17
   2f4a0:	f04fb9e8 	.word	0xf04fb9e8
   2f4a4:	f64f33ff 	.word	0xf64f33ff
   2f4a8:	210772ff 	.word	0x210772ff
   2f4ac:	f7ff4630 	.word	0xf7ff4630
   2f4b0:	4604f8b9 	.word	0x4604f8b9
   2f4b4:	682bb308 	.word	0x682bb308
   2f4b8:	041b0c1b 	.word	0x041b0c1b
   2f4bc:	0304f043 	.word	0x0304f043
   2f4c0:	4620602b 	.word	0x4620602b
   2f4c4:	fa22f7f3 	.word	0xfa22f7f3
   2f4c8:	34fff04f 	.word	0x34fff04f
   2f4cc:	b0024620 	.word	0xb0024620
   2f4d0:	81f0e8bd 	.word	0x81f0e8bd
   2f4d4:	2c009c01 	.word	0x2c009c01
   2f4d8:	240cd1d2 	.word	0x240cd1d2
   2f4dc:	6820e7f1 	.word	0x6820e7f1
   2f4e0:	f7f9b108 	.word	0xf7f9b108
   2f4e4:	0c3fff11 	.word	0x0c3fff11
   2f4e8:	4620043f 	.word	0x4620043f
   2f4ec:	0704f047 	.word	0x0704f047
   2f4f0:	ff02f7f9 	.word	0xff02f7f9
   2f4f4:	602f2423 	.word	0x602f2423
   2f4f8:	4630e7e3 	.word	0x4630e7e3
   2f4fc:	f8fef7ff 	.word	0xf8fef7ff
   2f500:	d0e32800 	.word	0xd0e32800
   2f504:	2c006844 	.word	0x2c006844
   2f508:	f8c0d0e0 	.word	0xf8c0d0e0
   2f50c:	e7d28004 	.word	0xe7d28004
   2f510:	e7d62409 	.word	0xe7d62409
   2f514:	e7d42423 	.word	0xe7d42423
   2f518:	0002e9c1 	.word	0x0002e9c1

0002f51c <ip_interface_accept>:
   2f51c:	4ff0e92d 	.word	0x4ff0e92d
   2f520:	b0852500 	.word	0xb0852500
   2f524:	4690460f 	.word	0x4690460f
   2f528:	46069502 	.word	0x46069502
   2f52c:	f8e6f7ff 	.word	0xf8e6f7ff
   2f530:	28004604 	.word	0x28004604
   2f534:	811cf000 	.word	0x811cf000
   2f538:	b29b6803 	.word	0xb29b6803
   2f53c:	d10a2b07 	.word	0xd10a2b07
   2f540:	68056803 	.word	0x68056803
   2f544:	d41600db 	.word	0xd41600db
   2f548:	3580f415 	.word	0x3580f415
   2f54c:	6805d019 	.word	0x6805d019
   2f550:	3580f415 	.word	0x3580f415
   2f554:	f04fd124 	.word	0xf04fd124
   2f558:	9b020909 	.word	0x9b020909
   2f55c:	4628b113 	.word	0x4628b113
   2f560:	f812f7ff 	.word	0xf812f7ff
   2f564:	f04f4648 	.word	0xf04f4648
   2f568:	f7f339ff 	.word	0xf7f339ff
   2f56c:	4648f9cf 	.word	0x4648f9cf
   2f570:	e8bdb005 	.word	0xe8bdb005
   2f574:	f4158ff0 	.word	0xf4158ff0
   2f578:	d16d3580 	.word	0xd16d3580
   2f57c:	0923f04f 	.word	0x0923f04f
   2f580:	f44fe7eb 	.word	0xf44fe7eb
   2f584:	f04f3280 	.word	0xf04f3280
   2f588:	461133ff 	.word	0x461133ff
   2f58c:	f7ff4630 	.word	0xf7ff4630
   2f590:	4681f849 	.word	0x4681f849
   2f594:	d07e2800 	.word	0xd07e2800
   2f598:	f4156825 	.word	0xf4156825
   2f59c:	d0dc3580 	.word	0xd0dc3580
   2f5a0:	30fff04f 	.word	0x30fff04f
   2f5a4:	e9cd2300 	.word	0xe9cd2300
   2f5a8:	4a750300 	.word	0x4a750300
   2f5ac:	a8026921 	.word	0xa8026921
   2f5b0:	ff94f7fe 	.word	0xff94f7fe
   2f5b4:	46059b02 	.word	0x46059b02
   2f5b8:	f0002b00 	.word	0xf0002b00
   2f5bc:	210080dd 	.word	0x210080dd
   2f5c0:	a8046962 	.word	0xa8046962
   2f5c4:	68e2615a 	.word	0x68e2615a
   2f5c8:	1d04f840 	.word	0x1d04f840
   2f5cc:	692260da 	.word	0x692260da
   2f5d0:	f8d4611a 	.word	0xf8d4611a
   2f5d4:	f7f99018 	.word	0xf7f99018
   2f5d8:	2800fe65 	.word	0x2800fe65
   2f5dc:	f247d143 	.word	0xf247d143
   2f5e0:	2108030c 	.word	0x2108030c
   2f5e4:	b00cf8dd 	.word	0xb00cf8dd
   2f5e8:	4306ea43 	.word	0x4306ea43
   2f5ec:	300cf8cb 	.word	0x300cf8cb
   2f5f0:	9010f8cb 	.word	0x9010f8cb
   2f5f4:	0009f88b 	.word	0x0009f88b
   2f5f8:	000af88b 	.word	0x000af88b
   2f5fc:	000bf88b 	.word	0x000bf88b
   2f600:	1008f88b 	.word	0x1008f88b
   2f604:	f2476823 	.word	0xf2476823
   2f608:	0c1b010c 	.word	0x0c1b010c
   2f60c:	f043041b 	.word	0xf043041b
   2f610:	60230308 	.word	0x60230308
   2f614:	f8d44658 	.word	0xf8d44658
   2f618:	f7f99000 	.word	0xf7f99000
   2f61c:	4682fe57 	.word	0x4682fe57
   2f620:	6822bb48 	.word	0x6822bb48
   2f624:	f04f9900 	.word	0xf04f9900
   2f628:	400a33ff 	.word	0x400a33ff
   2f62c:	21096022 	.word	0x21096022
   2f630:	72fff64f 	.word	0x72fff64f
   2f634:	f7fe4630 	.word	0xf7fe4630
   2f638:	4681fff5 	.word	0x4681fff5
   2f63c:	f0002800 	.word	0xf0002800
   2f640:	68238085 	.word	0x68238085
   2f644:	431a9a01 	.word	0x431a9a01
   2f648:	68236022 	.word	0x68236022
   2f64c:	041b0c1b 	.word	0x041b0c1b
   2f650:	0307f043 	.word	0x0307f043
   2f654:	e7806023 	.word	0xe7806023
   2f658:	5280f06f 	.word	0x5280f06f
   2f65c:	5380f04f 	.word	0x5380f04f
   2f660:	2300e9cd 	.word	0x2300e9cd
   2f664:	f8dde7a1 	.word	0xf8dde7a1
   2f668:	f04fb00c 	.word	0xf04fb00c
   2f66c:	f1bb090c 	.word	0xf1bb090c
   2f670:	d1c70f00 	.word	0xd1c70f00
   2f674:	f8dbe771 	.word	0xf8dbe771
   2f678:	b1080000 	.word	0xb1080000
   2f67c:	fe44f7f9 	.word	0xfe44f7f9
   2f680:	4919ea4f 	.word	0x4919ea4f
   2f684:	ea4f4658 	.word	0xea4f4658
   2f688:	f7f94909 	.word	0xf7f94909
   2f68c:	f049fe35 	.word	0xf049fe35
   2f690:	60230307 	.word	0x60230307
   2f694:	4630e772 	.word	0x4630e772
   2f698:	f830f7ff 	.word	0xf830f7ff
   2f69c:	f8d0b130 	.word	0xf8d0b130
   2f6a0:	f1b99004 	.word	0xf1b99004
   2f6a4:	d0010f00 	.word	0xd0010f00
   2f6a8:	e7756045 	.word	0xe7756045
   2f6ac:	03d96823 	.word	0x03d96823
   2f6b0:	af76f53f 	.word	0xaf76f53f
   2f6b4:	99024d33 	.word	0x99024d33
   2f6b8:	3026f855 	.word	0x3026f855
   2f6bc:	618b699b 	.word	0x618b699b
   2f6c0:	68cbb147 	.word	0x68cbb147
   2f6c4:	d0242b0a 	.word	0xd0242b0a
   2f6c8:	d1032b02 	.word	0xd1032b02
   2f6cc:	2000f8d8 	.word	0x2000f8d8
   2f6d0:	d0322a10 	.word	0xd0322a10
   2f6d4:	482c680a 	.word	0x482c680a
   2f6d8:	f0424002 	.word	0xf0424002
   2f6dc:	600a0205 	.word	0x600a0205
   2f6e0:	68119a02 	.word	0x68119a02
   2f6e4:	3100f441 	.word	0x3100f441
   2f6e8:	68116011 	.word	0x68116011
   2f6ec:	1180f441 	.word	0x1180f441
   2f6f0:	68236011 	.word	0x68236011
   2f6f4:	f0434003 	.word	0xf0434003
   2f6f8:	60230307 	.word	0x60230307
   2f6fc:	0026f855 	.word	0x0026f855
   2f700:	fdfaf7f9 	.word	0xfdfaf7f9
   2f704:	46482300 	.word	0x46482300
   2f708:	3026f845 	.word	0x3026f845
   2f70c:	e8bdb005 	.word	0xe8bdb005
   2f710:	f8d88ff0 	.word	0xf8d88ff0
   2f714:	2a242000 	.word	0x2a242000
   2f718:	703ad1dc 	.word	0x703ad1dc
   2f71c:	607b2210 	.word	0x607b2210
   2f720:	3026f855 	.word	0x3026f855
   2f724:	0010f107 	.word	0x0010f107
   2f728:	813b8b9b 	.word	0x813b8b9b
   2f72c:	1026f855 	.word	0x1026f855
   2f730:	f0113120 	.word	0xf0113120
   2f734:	9902fb15 	.word	0x9902fb15
   2f738:	703ae7cc 	.word	0x703ae7cc
   2f73c:	f855607b 	.word	0xf855607b
   2f740:	f1073026 	.word	0xf1073026
   2f744:	8b9b000c 	.word	0x8b9b000c
   2f748:	e7ee2204 	.word	0xe7ee2204
   2f74c:	f7fe4630 	.word	0xf7fe4630
   2f750:	b138ffd5 	.word	0xb138ffd5
   2f754:	9004f8d0 	.word	0x9004f8d0
   2f758:	0f00f1b9 	.word	0x0f00f1b9
   2f75c:	f8c0d002 	.word	0xf8c0d002
   2f760:	e76ea004 	.word	0xe76ea004
   2f764:	9a016823 	.word	0x9a016823
   2f768:	431346a9 	.word	0x431346a9
   2f76c:	e7a16023 	.word	0xe7a16023
   2f770:	f04f4605 	.word	0xf04f4605
   2f774:	e6f00909 	.word	0xe6f00909
   2f778:	090cf04f 	.word	0x090cf04f
   2f77c:	bf00e6f2 	.word	0xbf00e6f2
   2f780:	0002e9c1 	.word	0x0002e9c1
   2f784:	20024b44 	.word	0x20024b44
   2f788:	ffff0000 	.word	0xffff0000

0002f78c <ip_interface_setopt>:
   2f78c:	41f0e92d 	.word	0x41f0e92d
   2f790:	b0842901 	.word	0xb0842901
   2f794:	809cf040 	.word	0x809cf040
   2f798:	4690460e 	.word	0x4690460e
   2f79c:	4607461d 	.word	0x4607461d
   2f7a0:	ffacf7fe 	.word	0xffacf7fe
   2f7a4:	28004604 	.word	0x28004604
   2f7a8:	80a5f000 	.word	0x80a5f000
   2f7ac:	0f19f1b8 	.word	0x0f19f1b8
   2f7b0:	2d00d16e 	.word	0x2d00d16e
   2f7b4:	8092f000 	.word	0x8092f000
   2f7b8:	f7ea4628 	.word	0xf7ea4628
   2f7bc:	9b0afbe3 	.word	0x9b0afbe3
   2f7c0:	f0404298 	.word	0xf0404298
   2f7c4:	6823808b 	.word	0x6823808b
   2f7c8:	2b02b29b 	.word	0x2b02b29b
   2f7cc:	4629d173 	.word	0x4629d173
   2f7d0:	f00768e0 	.word	0xf00768e0
   2f7d4:	9002ff0d 	.word	0x9002ff0d
   2f7d8:	bf083001 	.word	0xbf083001
   2f7dc:	d04e2516 	.word	0xd04e2516
   2f7e0:	025b6823 	.word	0x025b6823
   2f7e4:	6823d44a 	.word	0x6823d44a
   2f7e8:	0300f413 	.word	0x0300f413
   2f7ec:	6826d146 	.word	0x6826d146
   2f7f0:	a8046822 	.word	0xa8046822
   2f7f4:	0280f442 	.word	0x0280f442
   2f7f8:	21046022 	.word	0x21046022
   2f7fc:	3d04f840 	.word	0x3d04f840
   2f800:	8018f8d4 	.word	0x8018f8d4
   2f804:	fd4ef7f9 	.word	0xfd4ef7f9
   2f808:	d14e2800 	.word	0xd14e2800
   2f80c:	0203f247 	.word	0x0203f247
   2f810:	21082300 	.word	0x21082300
   2f814:	ea429d03 	.word	0xea429d03
   2f818:	60ea4207 	.word	0x60ea4207
   2f81c:	8010f8c5 	.word	0x8010f8c5
   2f820:	726b7229 	.word	0x726b7229
   2f824:	72eb72ab 	.word	0x72eb72ab
   2f828:	0c08f04f 	.word	0x0c08f04f
   2f82c:	20102300 	.word	0x20102300
   2f830:	68aa2130 	.word	0x68aa2130
   2f834:	4462756b 	.word	0x4462756b
   2f838:	75ab60aa 	.word	0x75ab60aa
   2f83c:	76ab75eb 	.word	0x76ab75eb
   2f840:	f88576eb 	.word	0xf88576eb
   2f844:	7628c014 	.word	0x7628c014
   2f848:	22047669 	.word	0x22047669
   2f84c:	010ceb0d 	.word	0x010ceb0d
   2f850:	f0116828 	.word	0xf0116828
   2f854:	f247fa85 	.word	0xf247fa85
   2f858:	46280103 	.word	0x46280103
   2f85c:	fd36f7f9 	.word	0xfd36f7f9
   2f860:	bb504680 	.word	0xbb504680
   2f864:	0200f44f 	.word	0x0200f44f
   2f868:	33fff04f 	.word	0x33fff04f
   2f86c:	46384611 	.word	0x46384611
   2f870:	fed8f7fe 	.word	0xfed8f7fe
   2f874:	b3984605 	.word	0xb3984605
   2f878:	e0006026 	.word	0xe0006026
   2f87c:	46282523 	.word	0x46282523
   2f880:	f844f7f3 	.word	0xf844f7f3
   2f884:	35fff04f 	.word	0x35fff04f
   2f888:	b0044628 	.word	0xb0044628
   2f88c:	81f0e8bd 	.word	0x81f0e8bd
   2f890:	46429b0a 	.word	0x46429b0a
   2f894:	46319300 	.word	0x46319300
   2f898:	4638462b 	.word	0x4638462b
   2f89c:	ff56f7fe 	.word	0xff56f7fe
   2f8a0:	46284605 	.word	0x46284605
   2f8a4:	e8bdb004 	.word	0xe8bdb004
   2f8a8:	9d0381f0 	.word	0x9d0381f0
   2f8ac:	d1bb2d00 	.word	0xd1bb2d00
   2f8b0:	250c6026 	.word	0x250c6026
   2f8b4:	2509e7e3 	.word	0x2509e7e3
   2f8b8:	6828e7e1 	.word	0x6828e7e1
   2f8bc:	f7f9b108 	.word	0xf7f9b108
   2f8c0:	4628fd23 	.word	0x4628fd23
   2f8c4:	fd18f7f9 	.word	0xfd18f7f9
   2f8c8:	60262523 	.word	0x60262523
   2f8cc:	e7d66026 	.word	0xe7d66026
   2f8d0:	f7f3202a 	.word	0xf7f3202a
   2f8d4:	f04ff81b 	.word	0xf04ff81b
   2f8d8:	e7d535ff 	.word	0xe7d535ff
   2f8dc:	e7ce250e 	.word	0xe7ce250e
   2f8e0:	f7fe4638 	.word	0xf7fe4638
   2f8e4:	b120ff0b 	.word	0xb120ff0b
   2f8e8:	b1156845 	.word	0xb1156845
   2f8ec:	8004f8c0 	.word	0x8004f8c0
   2f8f0:	6026e7c2 	.word	0x6026e7c2
   2f8f4:	2009e7c8 	.word	0x2009e7c8
   2f8f8:	f808f7f3 	.word	0xf808f7f3
   2f8fc:	35fff04f 	.word	0x35fff04f
   2f900:	bf00e7c2 	.word	0xbf00e7c2

0002f904 <ip_interface_getopt>:
   2f904:	bf58f7fe 	.word	0xbf58f7fe

0002f908 <ip_interface_getaddrinfo>:
   2f908:	4ff0e92d 	.word	0x4ff0e92d
   2f90c:	0c00f04f 	.word	0x0c00f04f
   2f910:	4e722401 	.word	0x4e722401
   2f914:	a1d0f8df 	.word	0xa1d0f8df
   2f918:	91d0f8df 	.word	0x91d0f8df
   2f91c:	4607b085 	.word	0x4607b085
   2f920:	93014615 	.word	0x93014615
   2f924:	c000f8a6 	.word	0xc000f8a6
   2f928:	4000f8ca 	.word	0x4000f8ca
   2f92c:	4000f8c9 	.word	0x4000f8c9
   2f930:	4608b171 	.word	0x4608b171
   2f934:	4661220a 	.word	0x4661220a
   2f938:	f914f00d 	.word	0xf914f00d
   2f93c:	73fef64f 	.word	0x73fef64f
   2f940:	429a1e42 	.word	0x429a1e42
   2f944:	8083f200 	.word	0x8083f200
   2f948:	ea430203 	.word	0xea430203
   2f94c:	80302020 	.word	0x80302020
   2f950:	819cf8df 	.word	0x819cf8df
   2f954:	3000f8d8 	.word	0x3000f8d8
   2f958:	d1742b00 	.word	0xd1742b00
   2f95c:	60134a60 	.word	0x60134a60
   2f960:	60134a60 	.word	0x60134a60
   2f964:	d0622f00 	.word	0xd0622f00
   2f968:	f7ea4638 	.word	0xf7ea4638
   2f96c:	4683fb0b 	.word	0x4683fb0b
   2f970:	69eab125 	.word	0x69eab125
   2f974:	6851b112 	.word	0x6851b112
   2f978:	d06c2966 	.word	0xd06c2966
   2f97c:	32fff04f 	.word	0x32fff04f
   2f980:	ae042100 	.word	0xae042100
   2f984:	1d04f846 	.word	0x1d04f846
   2f988:	46594630 	.word	0x46594630
   2f98c:	f7f99200 	.word	0xf7f99200
   2f990:	9a00fc89 	.word	0x9a00fc89
   2f994:	d14c2800 	.word	0xd14c2800
   2f998:	010df247 	.word	0x010df247
   2f99c:	0c08f04f 	.word	0x0c08f04f
   2f9a0:	ea419c03 	.word	0xea419c03
   2f9a4:	60e14102 	.word	0x60e14102
   2f9a8:	72606122 	.word	0x72606122
   2f9ac:	72e072a0 	.word	0x72e072a0
   2f9b0:	c008f884 	.word	0xc008f884
   2f9b4:	d0762d00 	.word	0xd0762d00
   2f9b8:	f022686a 	.word	0xf022686a
   2f9bc:	29020108 	.word	0x29020108
   2f9c0:	2a05d05c 	.word	0x2a05d05c
   2f9c4:	68a9d178 	.word	0x68a9d178
   2f9c8:	f8c92902 	.word	0xf8c92902
   2f9cc:	d0611000 	.word	0xd0611000
   2f9d0:	68ea61a2 	.word	0x68ea61a2
   2f9d4:	68aa6222 	.word	0x68aa6222
   2f9d8:	682a61e2 	.word	0x682a61e2
   2f9dc:	68a26162 	.word	0x68a26162
   2f9e0:	60a23210 	.word	0x60a23210
   2f9e4:	6820b12f 	.word	0x6820b12f
   2f9e8:	465ab118 	.word	0x465ab118
   2f9ec:	f0114639 	.word	0xf0114639
   2f9f0:	2301f9b7 	.word	0x2301f9b7
   2f9f4:	010df247 	.word	0x010df247
   2f9f8:	f8c84620 	.word	0xf8c84620
   2f9fc:	f7f93000 	.word	0xf7f93000
   2fa00:	2800fc65 	.word	0x2800fc65
   2fa04:	f04fd156 	.word	0xf04fd156
   2fa08:	930333ff 	.word	0x930333ff
   2fa0c:	46204631 	.word	0x46204631
   2fa10:	fee8f7f2 	.word	0xfee8f7f2
   2fa14:	3000f8d8 	.word	0x3000f8d8
   2fa18:	d0f72b01 	.word	0xd0f72b01
   2fa1c:	68184b31 	.word	0x68184b31
   2fa20:	d13b2800 	.word	0xd13b2800
   2fa24:	9a014b2e 	.word	0x9a014b2e
   2fa28:	6013681b 	.word	0x6013681b
   2fa2c:	46bbe00c 	.word	0x46bbe00c
   2fa30:	9c03e79e 	.word	0x9c03e79e
   2fa34:	d1bd2c00 	.word	0xd1bd2c00
   2fa38:	2300200c 	.word	0x2300200c
   2fa3c:	3000f8c8 	.word	0x3000f8c8
   2fa40:	e8bdb005 	.word	0xe8bdb005
   2fa44:	20738ff0 	.word	0x20738ff0
   2fa48:	e8bdb005 	.word	0xe8bdb005
   2fa4c:	20168ff0 	.word	0x20168ff0
   2fa50:	e8bdb005 	.word	0xe8bdb005
   2fa54:	68918ff0 	.word	0x68918ff0
   2fa58:	7f00f5b1 	.word	0x7f00f5b1
   2fa5c:	f240d18e 	.word	0xf240d18e
   2fa60:	68d02102 	.word	0x68d02102
   2fa64:	d1894288 	.word	0xd1894288
   2fa68:	29006991 	.word	0x29006991
   2fa6c:	6868d086 	.word	0x6868d086
   2fa70:	fdbef007 	.word	0xfdbef007
   2fa74:	d0811c43 	.word	0xd0811c43
   2fa78:	e7814602 	.word	0xe7814602
   2fa7c:	290268a9 	.word	0x290268a9
   2fa80:	1000f8c9 	.word	0x1000f8c9
   2fa84:	2a05d006 	.word	0x2a05d006
   2fa88:	2a0ad0a2 	.word	0x2a0ad0a2
   2fa8c:	2201bf14 	.word	0x2201bf14
   2fa90:	e79d2202 	.word	0xe79d2202
   2fa94:	f8ca2102 	.word	0xf8ca2102
   2fa98:	e7f41000 	.word	0xe7f41000
   2fa9c:	68184b11 	.word	0x68184b11
   2faa0:	d0d12800 	.word	0xd0d12800
   2faa4:	4629e7c9 	.word	0x4629e7c9
   2faa8:	f1042210 	.word	0xf1042210
   2faac:	f0110014 	.word	0xf0110014
   2fab0:	e794f977 	.word	0xe794f977
   2fab4:	e7c02023 	.word	0xe7c02023
   2fab8:	f7f2202f 	.word	0xf7f2202f
   2fabc:	68a2ff27 	.word	0x68a2ff27
   2fac0:	60a23210 	.word	0x60a23210
   2fac4:	f04fb917 	.word	0xf04fb917
   2fac8:	e7b630ff 	.word	0xe7b630ff
   2facc:	28006820 	.word	0x28006820
   2fad0:	465ad0f9 	.word	0x465ad0f9
   2fad4:	f0114639 	.word	0xf0114639
   2fad8:	e7f4f943 	.word	0xe7f4f943
   2fadc:	2002a340 	.word	0x2002a340
   2fae0:	20024b3c 	.word	0x20024b3c
   2fae4:	20024b34 	.word	0x20024b34
   2fae8:	20024b2c 	.word	0x20024b2c
   2faec:	20024b30 	.word	0x20024b30
   2faf0:	20024b38 	.word	0x20024b38

0002faf4 <ip_interface_freeaddrinfo>:
   2faf4:	4c0bb538 	.word	0x4c0bb538
   2faf8:	2b026823 	.word	0x2b026823
   2fafc:	bd38d000 	.word	0xbd38d000
   2fb00:	4605b130 	.word	0x4605b130
   2fb04:	f0066940 	.word	0xf0066940
   2fb08:	4628f8af 	.word	0x4628f8af
   2fb0c:	f8acf006 	.word	0xf8acf006
   2fb10:	4a052300 	.word	0x4a052300
   2fb14:	60234905 	.word	0x60234905
   2fb18:	68086013 	.word	0x68086013
   2fb1c:	4038e8bd 	.word	0x4038e8bd
   2fb20:	bbf2f7f9 	.word	0xbbf2f7f9
   2fb24:	20024b38 	.word	0x20024b38
   2fb28:	20024b34 	.word	0x20024b34
   2fb2c:	20024b40 	.word	0x20024b40

0002fb30 <rpc_ip_event_handler>:
   2fb30:	4ff0e92d 	.word	0x4ff0e92d
   2fb34:	4310f401 	.word	0x4310f401
   2fb38:	4f10f5b3 	.word	0x4f10f5b3
   2fb3c:	b0894605 	.word	0xb0894605
   2fb40:	68c0460e 	.word	0x68c0460e
   2fb44:	0c04d05e 	.word	0x0c04d05e
   2fb48:	f7fe4620 	.word	0xf7fe4620
   2fb4c:	f248fdd7 	.word	0xf248fdd7
   2fb50:	429e030d 	.word	0x429e030d
   2fb54:	46a04607 	.word	0x46a04607
   2fb58:	2f00d041 	.word	0x2f00d041
   2fb5c:	4640d04e 	.word	0x4640d04e
   2fb60:	462a4633 	.word	0x462a4633
   2fb64:	f7fc4639 	.word	0xf7fc4639
   2fb68:	2800fbd1 	.word	0x2800fbd1
   2fb6c:	f248d042 	.word	0xf248d042
   2fb70:	429e0307 	.word	0x429e0307
   2fb74:	f248d961 	.word	0xf248d961
   2fb78:	429e030c 	.word	0x429e030c
   2fb7c:	816bf000 	.word	0x816bf000
   2fb80:	8106f240 	.word	0x8106f240
   2fb84:	0302f249 	.word	0x0302f249
   2fb88:	f000429e 	.word	0xf000429e
   2fb8c:	f249808c 	.word	0xf249808c
   2fb90:	429e0303 	.word	0x429e0303
   2fb94:	8180f000 	.word	0x8180f000
   2fb98:	0301f249 	.word	0x0301f249
   2fb9c:	d12d429e 	.word	0xd12d429e
   2fba0:	f414683c 	.word	0xf414683c
   2fba4:	f0001480 	.word	0xf0001480
   2fba8:	68ab81c3 	.word	0x68ab81c3
   2fbac:	f2002b04 	.word	0xf2002b04
   2fbb0:	240081eb 	.word	0x240081eb
   2fbb4:	68294626 	.word	0x68294626
   2fbb8:	e9cd686a 	.word	0xe9cd686a
   2fbbc:	e9cd6406 	.word	0xe9cd6406
   2fbc0:	69f81204 	.word	0x69f81204
   2fbc4:	6803a904 	.word	0x6803a904
   2fbc8:	4798685b 	.word	0x4798685b
   2fbcc:	f0003001 	.word	0xf0003001
   2fbd0:	683b81cc 	.word	0x683b81cc
   2fbd4:	f4432000 	.word	0xf4432000
   2fbd8:	603b3380 	.word	0x603b3380
   2fbdc:	f8dfe00b 	.word	0xf8dfe00b
   2fbe0:	682f9344 	.word	0x682f9344
   2fbe4:	3000f8d9 	.word	0x3000f8d9
   2fbe8:	d0152b01 	.word	0xd0152b01
   2fbec:	4638b117 	.word	0x4638b117
   2fbf0:	fb8af7f9 	.word	0xfb8af7f9
   2fbf4:	b0092000 	.word	0xb0092000
   2fbf8:	8ff0e8bd 	.word	0x8ff0e8bd
   2fbfc:	28006828 	.word	0x28006828
   2fc00:	e7f7d1f6 	.word	0xe7f7d1f6
   2fc04:	fd30f7fe 	.word	0xfd30f7fe
   2fc08:	f7fe4680 	.word	0xf7fe4680
   2fc0c:	4607fd77 	.word	0x4607fd77
   2fc10:	2f004644 	.word	0x2f004644
   2fc14:	e7f1d1a3 	.word	0xe7f1d1a3
   2fc18:	2b00696b 	.word	0x2b00696b
   2fc1c:	2b10d048 	.word	0x2b10d048
   2fc20:	4ababf96 	.word	0x4ababf96
   2fc24:	f852212d 	.word	0xf852212d
   2fc28:	23021023 	.word	0x23021023
   2fc2c:	60114ab8 	.word	0x60114ab8
   2fc30:	3000f8c9 	.word	0x3000f8c9
   2fc34:	d1da2f00 	.word	0xd1da2f00
   2fc38:	f248e7dc 	.word	0xf248e7dc
   2fc3c:	429e0306 	.word	0x429e0306
   2fc40:	80e6f080 	.word	0x80e6f080
   2fc44:	0302f248 	.word	0x0302f248
   2fc48:	f000429e 	.word	0xf000429e
   2fc4c:	d91880c8 	.word	0xd91880c8
   2fc50:	0303f248 	.word	0x0303f248
   2fc54:	f000429e 	.word	0xf000429e
   2fc58:	f2488112 	.word	0xf2488112
   2fc5c:	429e0305 	.word	0x429e0305
   2fc60:	683bd1cc 	.word	0x683bd1cc
   2fc64:	2b03b29b 	.word	0x2b03b29b
   2fc68:	696bd1c4 	.word	0x696bd1c4
   2fc6c:	f0002b00 	.word	0xf0002b00
   2fc70:	2b10817e 	.word	0x2b10817e
   2fc74:	813bf200 	.word	0x813bf200
   2fc78:	f8524aa4 	.word	0xf8524aa4
   2fc7c:	607b3023 	.word	0x607b3023
   2fc80:	f248e7b8 	.word	0xf248e7b8
   2fc84:	429e0301 	.word	0x429e0301
   2fc88:	683bd1b8 	.word	0x683bd1b8
   2fc8c:	d1b12b01 	.word	0xd1b12b01
   2fc90:	28006968 	.word	0x28006968
   2fc94:	8173f000 	.word	0x8173f000
   2fc98:	f2002810 	.word	0xf2002810
   2fc9c:	4b9b8128 	.word	0x4b9b8128
   2fca0:	3020f853 	.word	0x3020f853
   2fca4:	683be7eb 	.word	0x683be7eb
   2fca8:	2b07b29b 	.word	0x2b07b29b
   2fcac:	e790d1a2 	.word	0xe790d1a2
   2fcb0:	601f4b98 	.word	0x601f4b98
   2fcb4:	016369ac 	.word	0x016369ac
   2fcb8:	93034618 	.word	0x93034618
   2fcbc:	ffb6f005 	.word	0xffb6f005
   2fcc0:	28009002 	.word	0x28009002
   2fcc4:	8103f000 	.word	0x8103f000
   2fcc8:	192800e5 	.word	0x192800e5
   2fccc:	f0050080 	.word	0xf0050080
   2fcd0:	2800ffad 	.word	0x2800ffad
   2fcd4:	810df000 	.word	0x810df000
   2fcd8:	d0782c00 	.word	0xd0782c00
   2fcdc:	0210f105 	.word	0x0210f105
   2fce0:	93011883 	.word	0x93011883
   2fce4:	24049b02 	.word	0x24049b02
   2fce8:	a23cf8df 	.word	0xa23cf8df
   2fcec:	b23cf8df 	.word	0xb23cf8df
   2fcf0:	0810f100 	.word	0x0810f100
   2fcf4:	0620f103 	.word	0x0620f103
   2fcf8:	220ae01d 	.word	0x220ae01d
   2fcfc:	2c0cf848 	.word	0x2c0cf848
   2fd00:	0224f04f 	.word	0x0224f04f
   2fd04:	f8084640 	.word	0xf8084640
   2fd08:	f8282c10 	.word	0xf8282c10
   2fd0c:	f8563c08 	.word	0xf8563c08
   2fd10:	f0112c10 	.word	0xf0112c10
   2fd14:	f856f825 	.word	0xf856f825
   2fd18:	f1083c10 	.word	0xf1083c10
   2fd1c:	441c0808 	.word	0x441c0808
   2fd20:	f846193b 	.word	0xf846193b
   2fd24:	9b013c08 	.word	0x9b013c08
   2fd28:	6c04f846 	.word	0x6c04f846
   2fd2c:	442c4598 	.word	0x442c4598
   2fd30:	0620f106 	.word	0x0620f106
   2fd34:	593bd045 	.word	0x593bd045
   2fd38:	f846193a 	.word	0xf846193a
   2fd3c:	68533c20 	.word	0x68533c20
   2fd40:	1000f8da 	.word	0x1000f8da
   2fd44:	bf142b02 	.word	0xbf142b02
   2fd48:	200a2002 	.word	0x200a2002
   2fd4c:	3000f8db 	.word	0x3000f8db
   2fd50:	0107e946 	.word	0x0107e946
   2fd54:	3c14f846 	.word	0x3c14f846
   2fd58:	f1a88a10 	.word	0xf1a88a10
   2fd5c:	f8460310 	.word	0xf8460310
   2fd60:	8a550c10 	.word	0x8a550c10
   2fd64:	3c0cf846 	.word	0x3c0cf846
   2fd68:	34144b6b 	.word	0x34144b6b
   2fd6c:	eb072804 	.word	0xeb072804
   2fd70:	881b0104 	.word	0x881b0104
   2fd74:	2210d1c1 	.word	0x2210d1c1
   2fd78:	f8282002 	.word	0xf8282002
   2fd7c:	f8483c08 	.word	0xf8483c08
   2fd80:	f8080c0c 	.word	0xf8080c0c
   2fd84:	f8562c10 	.word	0xf8562c10
   2fd88:	f1a82c10 	.word	0xf1a82c10
   2fd8c:	e7c00004 	.word	0xe7c00004
   2fd90:	0308f248 	.word	0x0308f248
   2fd94:	d04e429e 	.word	0xd04e429e
   2fd98:	0309f248 	.word	0x0309f248
   2fd9c:	f47f429e 	.word	0xf47f429e
   2fda0:	683baf2d 	.word	0x683baf2d
   2fda4:	2b0db29b 	.word	0x2b0db29b
   2fda8:	af24f47f 	.word	0xaf24f47f
   2fdac:	28006968 	.word	0x28006968
   2fdb0:	af72f47f 	.word	0xaf72f47f
   2fdb4:	0c1b683b 	.word	0x0c1b683b
   2fdb8:	f043041b 	.word	0xf043041b
   2fdbc:	603b030e 	.word	0x603b030e
   2fdc0:	2200e719 	.word	0x2200e719
   2fdc4:	1302e9dd 	.word	0x1302e9dd
   2fdc8:	f843440b 	.word	0xf843440b
   2fdcc:	22022c04 	.word	0x22022c04
   2fdd0:	f8c94b52 	.word	0xf8c94b52
   2fdd4:	9a022000 	.word	0x9a022000
   2fdd8:	601a2000 	.word	0x601a2000
   2fddc:	683be70b 	.word	0x683be70b
   2fde0:	f57f0099 	.word	0xf57f0099
   2fde4:	683baf07 	.word	0x683baf07
   2fde8:	5300f023 	.word	0x5300f023
   2fdec:	6968603b 	.word	0x6968603b
   2fdf0:	f0002800 	.word	0xf0002800
   2fdf4:	281080a2 	.word	0x281080a2
   2fdf8:	232dbf8e 	.word	0x232dbf8e
   2fdfc:	f8534b43 	.word	0xf8534b43
   2fe00:	20003020 	.word	0x20003020
   2fe04:	683b607b 	.word	0x683b607b
   2fe08:	2380f443 	.word	0x2380f443
   2fe0c:	e6f2603b 	.word	0xe6f2603b
   2fe10:	029a683b 	.word	0x029a683b
   2fe14:	aeeef57f 	.word	0xaeeef57f
   2fe18:	2b00696b 	.word	0x2b00696b
   2fe1c:	809cf000 	.word	0x809cf000
   2fe20:	f47f2b6b 	.word	0xf47f2b6b
   2fe24:	693baf26 	.word	0x693baf26
   2fe28:	f0002b01 	.word	0xf0002b01
   2fe2c:	230c80b1 	.word	0x230c80b1
   2fe30:	607b2000 	.word	0x607b2000
   2fe34:	683be6df 	.word	0x683be6df
   2fe38:	2b06b29b 	.word	0x2b06b29b
   2fe3c:	aedaf47f 	.word	0xaedaf47f
   2fe40:	28006968 	.word	0x28006968
   2fe44:	af28f47f 	.word	0xaf28f47f
   2fe48:	0c1b683b 	.word	0x0c1b683b
   2fe4c:	f043041b 	.word	0xf043041b
   2fe50:	603b0307 	.word	0x603b0307
   2fe54:	683be6cf 	.word	0x683be6cf
   2fe58:	2b08b29b 	.word	0x2b08b29b
   2fe5c:	aecaf47f 	.word	0xaecaf47f
   2fe60:	2b00696b 	.word	0x2b00696b
   2fe64:	af05f47f 	.word	0xaf05f47f
   2fe68:	20014b2d 	.word	0x20014b2d
   2fe6c:	5024f843 	.word	0x5024f843
   2fe70:	0c1b683b 	.word	0x0c1b683b
   2fe74:	f043041b 	.word	0xf043041b
   2fe78:	603b0309 	.word	0x603b0309
   2fe7c:	683be6bb 	.word	0x683be6bb
   2fe80:	f57f025b 	.word	0xf57f025b
   2fe84:	6968aeb7 	.word	0x6968aeb7
   2fe88:	f47f2800 	.word	0xf47f2800
   2fe8c:	683baf05 	.word	0x683baf05
   2fe90:	0300f443 	.word	0x0300f443
   2fe94:	e6ae603b 	.word	0xe6ae603b
   2fe98:	f443683b 	.word	0xf443683b
   2fe9c:	603b2300 	.word	0x603b2300
   2fea0:	f423683b 	.word	0xf423683b
   2fea4:	603b1300 	.word	0x603b1300
   2fea8:	f423683b 	.word	0xf423683b
   2feac:	603b3300 	.word	0x603b3300
   2feb0:	2b6c692b 	.word	0x2b6c692b
   2feb4:	2b10d021 	.word	0x2b10d021
   2feb8:	232dbf8c 	.word	0x232dbf8c
   2febc:	f04f4a13 	.word	0xf04f4a13
   2fec0:	bf980000 	.word	0xbf980000
   2fec4:	3023f852 	.word	0x3023f852
   2fec8:	60bb607b 	.word	0x60bb607b
   2fecc:	f005e693 	.word	0xf005e693
   2fed0:	200cfecb 	.word	0x200cfecb
   2fed4:	490e2302 	.word	0x490e2302
   2fed8:	60084a10 	.word	0x60084a10
   2fedc:	9902682f 	.word	0x9902682f
   2fee0:	f8c96011 	.word	0xf8c96011
   2fee4:	2f003000 	.word	0x2f003000
   2fee8:	ae81f47f 	.word	0xae81f47f
   2feec:	232de682 	.word	0x232de682
   2fef0:	220ce6c5 	.word	0x220ce6c5
   2fef4:	601a4b06 	.word	0x601a4b06
   2fef8:	2239e769 	.word	0x2239e769
   2fefc:	2000683b 	.word	0x2000683b
   2ff00:	4380f043 	.word	0x4380f043
   2ff04:	607a603b 	.word	0x607a603b
   2ff08:	e67460ba 	.word	0xe67460ba
   2ff0c:	00043050 	.word	0x00043050
   2ff10:	20024b34 	.word	0x20024b34
   2ff14:	20024b40 	.word	0x20024b40
   2ff18:	2002a340 	.word	0x2002a340
   2ff1c:	20024b3c 	.word	0x20024b3c
   2ff20:	20024b44 	.word	0x20024b44
   2ff24:	20024b38 	.word	0x20024b38
   2ff28:	20024b30 	.word	0x20024b30
   2ff2c:	20024b2c 	.word	0x20024b2c
   2ff30:	f7f96828 	.word	0xf7f96828
   2ff34:	4620f9e9 	.word	0x4620f9e9
   2ff38:	683be65d 	.word	0x683be65d
   2ff3c:	3300f443 	.word	0x3300f443
   2ff40:	683b603b 	.word	0x683b603b
   2ff44:	1380f443 	.word	0x1380f443
   2ff48:	683b603b 	.word	0x683b603b
   2ff4c:	041b0c1b 	.word	0x041b0c1b
   2ff50:	0305f043 	.word	0x0305f043
   2ff54:	e64e603b 	.word	0xe64e603b
   2ff58:	4a28683b 	.word	0x4a28683b
   2ff5c:	3300f443 	.word	0x3300f443
   2ff60:	2001603b 	.word	0x2001603b
   2ff64:	5024f842 	.word	0x5024f842
   2ff68:	2002e645 	.word	0x2002e645
   2ff6c:	683be643 	.word	0x683be643
   2ff70:	0c1b2000 	.word	0x0c1b2000
   2ff74:	f043041b 	.word	0xf043041b
   2ff78:	603b0304 	.word	0x603b0304
   2ff7c:	2302e63b 	.word	0x2302e63b
   2ff80:	69ab603b 	.word	0x69ab603b
   2ff84:	e63661bb 	.word	0xe63661bb
   2ff88:	b94c8a6c 	.word	0xb94c8a6c
   2ff8c:	e6124626 	.word	0xe6124626
   2ff90:	683b220c 	.word	0x683b220c
   2ff94:	f0432000 	.word	0xf0432000
   2ff98:	603b6300 	.word	0x603b6300
   2ff9c:	e62a607a 	.word	0xe62a607a
   2ffa0:	f0052024 	.word	0xf0052024
   2ffa4:	4606fe43 	.word	0x4606fe43
   2ffa8:	8a6ab158 	.word	0x8a6ab158
   2ffac:	d0182a10 	.word	0xd0182a10
   2ffb0:	d00a2a04 	.word	0xd00a2a04
   2ffb4:	f7f96828 	.word	0xf7f96828
   2ffb8:	4630f9a7 	.word	0x4630f9a7
   2ffbc:	fe54f005 	.word	0xfe54f005
   2ffc0:	6828e618 	.word	0x6828e618
   2ffc4:	f9a0f7f9 	.word	0xf9a0f7f9
   2ffc8:	2302e614 	.word	0x2302e614
   2ffcc:	60432410 	.word	0x60432410
   2ffd0:	8a2b7004 	.word	0x8a2b7004
   2ffd4:	0114f105 	.word	0x0114f105
   2ffd8:	300c8103 	.word	0x300c8103
   2ffdc:	fec0f010 	.word	0xfec0f010
   2ffe0:	230ae5e9 	.word	0x230ae5e9
   2ffe4:	60432424 	.word	0x60432424
   2ffe8:	8a2b7004 	.word	0x8a2b7004
   2ffec:	0114f105 	.word	0x0114f105
   2fff0:	30108103 	.word	0x30108103
   2fff4:	feb4f010 	.word	0xfeb4f010
   2fff8:	bf00e5dd 	.word	0xbf00e5dd
   2fffc:	20024b44 	.word	0x20024b44

00030000 <rpc_logobj_client_evt_handler>:
   30000:	f850b120 	.word	0xf850b120
   30004:	0c091b08 	.word	0x0c091b08
   30008:	bf7cf7f9 	.word	0xbf7cf7f9
   3000c:	bf004770 	.word	0xbf004770

00030010 <rpc_logobj_client_init>:
   30010:	f0044801 	.word	0xf0044801
   30014:	bf00bd45 	.word	0xbf00bd45
   30018:	00043094 	.word	0x00043094

0003001c <rpc_logobj_client_request_alloc>:
   3001c:	b5102300 	.word	0xb5102300
   30020:	9301b082 	.word	0x9301b082
   30024:	b170b961 	.word	0xb170b961
   30028:	aa014604 	.word	0xaa014604
   3002c:	f0042009 	.word	0xf0042009
   30030:	b918ff6f 	.word	0xb918ff6f
   30034:	b10b9b01 	.word	0xb10b9b01
   30038:	60233308 	.word	0x60233308
   3003c:	bd10b002 	.word	0xbd10b002
   30040:	b002200f 	.word	0xb002200f
   30044:	200ebd10 	.word	0x200ebd10
   30048:	bd10b002 	.word	0xbd10b002

0003004c <rpc_logobj_client_request_send>:
   3004c:	4370f401 	.word	0x4370f401
   30050:	4fe0f5b3 	.word	0x4fe0f5b3
   30054:	b160d10b 	.word	0xb160d10b
   30058:	f8304603 	.word	0xf8304603
   3005c:	20092c08 	.word	0x20092c08
   30060:	4101ea42 	.word	0x4101ea42
   30064:	1d08f843 	.word	0x1d08f843
   30068:	f0044619 	.word	0xf0044619
   3006c:	200fbf39 	.word	0x200fbf39
   30070:	200e4770 	.word	0x200e4770
   30074:	bf004770 	.word	0xbf004770

00030078 <rpc_logobj_client_message_free>:
   30078:	f1a0b120 	.word	0xf1a0b120
   3007c:	20090108 	.word	0x20090108
   30080:	bf78f004 	.word	0xbf78f004
   30084:	4770200e 	.word	0x4770200e

00030088 <rpc_logobj_client_data_free>:
   30088:	4601b118 	.word	0x4601b118
   3008c:	f0052009 	.word	0xf0052009
   30090:	200eb883 	.word	0x200eb883
   30094:	bf004770 	.word	0xbf004770

00030098 <datagram_handler_init>:
   30098:	4604b510 	.word	0x4604b510
   3009c:	f005200c 	.word	0xf005200c
   300a0:	60e0fdc5 	.word	0x60e0fdc5
   300a4:	e8bdb118 	.word	0xe8bdb118
   300a8:	f0004010 	.word	0xf0004010
   300ac:	2004b8bd 	.word	0x2004b8bd
   300b0:	bf00bd10 	.word	0xbf00bd10

000300b4 <datagram_handler_put>:
   300b4:	4606b570 	.word	0x4606b570
   300b8:	460d2014 	.word	0x460d2014
   300bc:	fdb6f005 	.word	0xfdb6f005
   300c0:	682bb178 	.word	0x682bb178
   300c4:	60434604 	.word	0x60434604
   300c8:	4601686b 	.word	0x4601686b
   300cc:	68eb6083 	.word	0x68eb6083
   300d0:	68ab60c3 	.word	0x68ab60c3
   300d4:	68f06103 	.word	0x68f06103
   300d8:	f8b0f000 	.word	0xf8b0f000
   300dc:	6868b920 	.word	0x6868b920
   300e0:	f04fbd70 	.word	0xf04fbd70
   300e4:	bd7030ff 	.word	0xbd7030ff
   300e8:	f0054620 	.word	0xf0054620
   300ec:	f04ffdbd 	.word	0xf04ffdbd
   300f0:	bd7030ff 	.word	0xbd7030ff

000300f4 <datagram_handler_get>:
   300f4:	4606b5f0 	.word	0x4606b5f0
   300f8:	68c0b085 	.word	0x68c0b085
   300fc:	4617460c 	.word	0x4617460c
   30100:	f8bcf000 	.word	0xf8bcf000
   30104:	d0372800 	.word	0xd0372800
   30108:	46056882 	.word	0x46056882
   3010c:	0300e9d4 	.word	0x0300e9d4
   30110:	bf28429a 	.word	0xbf28429a
   30114:	6062461a 	.word	0x6062461a
   30118:	6869b110 	.word	0x6869b110
   3011c:	fe20f010 	.word	0xfe20f010
   30120:	b11868a0 	.word	0xb11868a0
   30124:	b10b692b 	.word	0xb10b692b
   30128:	b9e268ea 	.word	0xb9e268ea
   3012c:	60e32300 	.word	0x60e32300
   30130:	d502073b 	.word	0xd502073b
   30134:	b0056860 	.word	0xb0056860
   30138:	68f0bdf0 	.word	0x68f0bdf0
   3013c:	f894f000 	.word	0xf894f000
   30140:	28004605 	.word	0x28004605
   30144:	e9d0d0f6 	.word	0xe9d0d0f6
   30148:	69023101 	.word	0x69023101
   3014c:	68c39300 	.word	0x68c39300
   30150:	1201e9cd 	.word	0x1201e9cd
   30154:	46689303 	.word	0x46689303
   30158:	3101e9d6 	.word	0x3101e9d6
   3015c:	46284798 	.word	0x46284798
   30160:	fd82f005 	.word	0xfd82f005
   30164:	68e3e7e6 	.word	0x68e3e7e6
   30168:	bf28429a 	.word	0xbf28429a
   3016c:	60e2461a 	.word	0x60e2461a
   30170:	f0106929 	.word	0xf0106929
   30174:	e7dbfdf5 	.word	0xe7dbfdf5
   30178:	30fff04f 	.word	0x30fff04f
   3017c:	bf00e7db 	.word	0xbf00e7db

00030180 <datagram_handler_available>:
   30180:	68c0b508 	.word	0x68c0b508
   30184:	f87af000 	.word	0xf87af000
   30188:	6880b108 	.word	0x6880b108
   3018c:	f04fbd08 	.word	0xf04fbd08
   30190:	bd0830ff 	.word	0xbd0830ff

00030194 <datagram_handler_flush>:
   30194:	4605b530 	.word	0x4605b530
   30198:	b08568c0 	.word	0xb08568c0
   3019c:	e01ab9a8 	.word	0xe01ab9a8
   301a0:	f00068e8 	.word	0xf00068e8
   301a4:	4604f861 	.word	0x4604f861
   301a8:	e9d0b170 	.word	0xe9d0b170
   301ac:	e9d40101 	.word	0xe9d40101
   301b0:	e9cd3203 	.word	0xe9cd3203
   301b4:	e9cd0100 	.word	0xe9cd0100
   301b8:	e9d52302 	.word	0xe9d52302
   301bc:	46683101 	.word	0x46683101
   301c0:	46204798 	.word	0x46204798
   301c4:	fd50f005 	.word	0xfd50f005
   301c8:	f00068e8 	.word	0xf00068e8
   301cc:	2800f85d 	.word	0x2800f85d
   301d0:	b005d1e6 	.word	0xb005d1e6
   301d4:	2008bd30 	.word	0x2008bd30
   301d8:	bd30b005 	.word	0xbd30b005

000301dc <datagram_handler_free>:
   301dc:	4605b530 	.word	0x4605b530
   301e0:	b08568c0 	.word	0xb08568c0
   301e4:	e01cb9a0 	.word	0xe01cb9a0
   301e8:	f83ef000 	.word	0xf83ef000
   301ec:	b1704604 	.word	0xb1704604
   301f0:	0101e9d0 	.word	0x0101e9d0
   301f4:	3203e9d4 	.word	0x3203e9d4
   301f8:	0100e9cd 	.word	0x0100e9cd
   301fc:	2302e9cd 	.word	0x2302e9cd
   30200:	3101e9d5 	.word	0x3101e9d5
   30204:	47984668 	.word	0x47984668
   30208:	f0054620 	.word	0xf0054620
   3020c:	68e8fd2d 	.word	0x68e8fd2d
   30210:	f83af000 	.word	0xf83af000
   30214:	68e84604 	.word	0x68e84604
   30218:	d1e52c00 	.word	0xd1e52c00
   3021c:	fd24f005 	.word	0xfd24f005
   30220:	b00560ec 	.word	0xb00560ec
   30224:	bf00bd30 	.word	0xbf00bd30

00030228 <linked_list_init>:
   30228:	2300b128 	.word	0x2300b128
   3022c:	e9c06003 	.word	0xe9c06003
   30230:	46183301 	.word	0x46183301
   30234:	20074770 	.word	0x20074770
   30238:	bf004770 	.word	0xbf004770

0003023c <linked_list_push>:
   3023c:	46036802 	.word	0x46036802
   30240:	d00e3201 	.word	0xd00e3201
   30244:	600a2200 	.word	0x600a2200
   30248:	b13a6802 	.word	0xb13a6802
   3024c:	60116882 	.word	0x60116882
   30250:	681a6081 	.word	0x681a6081
   30254:	32012000 	.word	0x32012000
   30258:	4770601a 	.word	0x4770601a
   3025c:	1101e9c0 	.word	0x1101e9c0
   30260:	2004e7f7 	.word	0x2004e7f7
   30264:	bf004770 	.word	0xbf004770

00030268 <linked_list_pop>:
   30268:	68004603 	.word	0x68004603
   3026c:	6858b128 	.word	0x6858b128
   30270:	6801681a 	.word	0x6801681a
   30274:	60593a01 	.word	0x60593a01
   30278:	4770601a 	.word	0x4770601a

0003027c <linked_list_peek>:
   3027c:	b10b6803 	.word	0xb10b6803
   30280:	47706840 	.word	0x47706840
   30284:	47704618 	.word	0x47704618

00030288 <linked_list_size_get>:
   30288:	47706800 	.word	0x47706800

0003028c <linked_list_get_next>:
   3028c:	47706800 	.word	0x47706800

00030290 <rpc_transport_ipc_tx_init>:
   30290:	f0002800 	.word	0xf0002800
   30294:	290080b8 	.word	0x290080b8
   30298:	80b5f000 	.word	0x80b5f000
   3029c:	f0002a00 	.word	0xf0002a00
   302a0:	e92d80b2 	.word	0xe92d80b2
   302a4:	6a044ff0 	.word	0x6a044ff0
   302a8:	2c00b085 	.word	0x2c00b085
   302ac:	80a6f000 	.word	0x80a6f000
   302b0:	28006a40 	.word	0x28006a40
   302b4:	80a2f000 	.word	0x80a2f000
   302b8:	4587f642 	.word	0x4587f642
   302bc:	0a00f04f 	.word	0x0a00f04f
   302c0:	42a84e55 	.word	0x42a84e55
   302c4:	a000f886 	.word	0xa000f886
   302c8:	80a0f240 	.word	0x80a0f240
   302cc:	f8df2708 	.word	0xf8df2708
   302d0:	46209180 	.word	0x46209180
   302d4:	460d4616 	.word	0x460d4616
   302d8:	46512244 	.word	0x46512244
   302dc:	4000f8c9 	.word	0x4000f8c9
   302e0:	fd5ef010 	.word	0xfd5ef010
   302e4:	2000f8d9 	.word	0x2000f8d9
   302e8:	0344f104 	.word	0x0344f104
   302ec:	8164f8df 	.word	0x8164f8df
   302f0:	a001f882 	.word	0xa001f882
   302f4:	a002f882 	.word	0xa002f882
   302f8:	a003f882 	.word	0xa003f882
   302fc:	46187017 	.word	0x46187017
   30300:	46512244 	.word	0x46512244
   30304:	3000f8c8 	.word	0x3000f8c8
   30308:	fd4af010 	.word	0xfd4af010
   3030c:	2000f8d8 	.word	0x2000f8d8
   30310:	0388f104 	.word	0x0388f104
   30314:	b140f8df 	.word	0xb140f8df
   30318:	f8827017 	.word	0xf8827017
   3031c:	f882a001 	.word	0xf882a001
   30320:	f882a002 	.word	0xf882a002
   30324:	4618a003 	.word	0x4618a003
   30328:	7200f44f 	.word	0x7200f44f
   3032c:	f8cb4651 	.word	0xf8cb4651
   30330:	f0103000 	.word	0xf0103000
   30334:	4b39fd35 	.word	0x4b39fd35
   30338:	7c22f504 	.word	0x7c22f504
   3033c:	c000f8c3 	.word	0xc000f8c3
   30340:	46604651 	.word	0x46604651
   30344:	7200f44f 	.word	0x7200f44f
   30348:	fd2af010 	.word	0xfd2af010
   3034c:	5c20f44f 	.word	0x5c20f44f
   30350:	f04f2106 	.word	0xf04f2106
   30354:	f44f0e01 	.word	0xf44f0e01
   30358:	f44f3001 	.word	0xf44f3001
   3035c:	4b303288 	.word	0x4b303288
   30360:	6491f504 	.word	0x6491f504
   30364:	4c2f605c 	.word	0x4c2f605c
   30368:	c008f8c3 	.word	0xc008f8c3
   3036c:	f8a38199 	.word	0xf8a38199
   30370:	4619e000 	.word	0x4619e000
   30374:	4b2c611c 	.word	0x4b2c611c
   30378:	c0e0f8df 	.word	0xc0e0f8df
   3037c:	482b6120 	.word	0x482b6120
   30380:	f5036063 	.word	0xf5036063
   30384:	60a073c0 	.word	0x60a073c0
   30388:	c000f8c4 	.word	0xc000f8c4
   3038c:	60e34828 	.word	0x60e34828
   30390:	f0056162 	.word	0xf0056162
   30394:	2800fb31 	.word	0x2800fb31
   30398:	f04fd132 	.word	0xf04fd132
   3039c:	24200c02 	.word	0x24200c02
   303a0:	1000f8d9 	.word	0x1000f8d9
   303a4:	2000f8db 	.word	0x2000f8db
   303a8:	4b1c6029 	.word	0x4b1c6029
   303ac:	1000f8d8 	.word	0x1000f8d8
   303b0:	e0acf8df 	.word	0xe0acf8df
   303b4:	60314d1f 	.word	0x60314d1f
   303b8:	2000f8ce 	.word	0x2000f8ce
   303bc:	491e681b 	.word	0x491e681b
   303c0:	7200f502 	.word	0x7200f502
   303c4:	4e1d602a 	.word	0x4e1d602a
   303c8:	4d1e4a1d 	.word	0x4d1e4a1d
   303cc:	f503600b 	.word	0xf503600b
   303d0:	491d7300 	.word	0x491d7300
   303d4:	80286033 	.word	0x80286033
   303d8:	c514f8c2 	.word	0xc514f8c2
   303dc:	4b1b6809 	.word	0x4b1b6809
   303e0:	99039103 	.word	0x99039103
   303e4:	751cf8c2 	.word	0x751cf8c2
   303e8:	443b6819 	.word	0x443b6819
   303ec:	99029102 	.word	0x99029102
   303f0:	4524f8c2 	.word	0x4524f8c2
   303f4:	9301681b 	.word	0x9301681b
   303f8:	e0019b01 	.word	0xe0019b01
   303fc:	0007f24c 	.word	0x0007f24c
   30400:	e8bdb005 	.word	0xe8bdb005
   30404:	f24c8ff0 	.word	0xf24c8ff0
   30408:	4770000e 	.word	0x4770000e
   3040c:	0004f24c 	.word	0x0004f24c
   30410:	e8bdb005 	.word	0xe8bdb005
   30414:	bf008ff0 	.word	0xbf008ff0
   30418:	2002be65 	.word	0x2002be65
   3041c:	20024b94 	.word	0x20024b94
   30420:	20024b80 	.word	0x20024b80
   30424:	20024ba4 	.word	0x20024ba4
   30428:	00040080 	.word	0x00040080
   3042c:	00040100 	.word	0x00040100
   30430:	20024b6c 	.word	0x20024b6c
   30434:	20024b78 	.word	0x20024b78
   30438:	20024b74 	.word	0x20024b74
   3043c:	20024b70 	.word	0x20024b70
   30440:	4002a000 	.word	0x4002a000
   30444:	2002a342 	.word	0x2002a342
   30448:	4002a514 	.word	0x4002a514
   3044c:	4002a51c 	.word	0x4002a51c
   30450:	20024ba0 	.word	0x20024ba0
   30454:	20024b98 	.word	0x20024b98
   30458:	20024b9c 	.word	0x20024b9c
   3045c:	00080040 	.word	0x00080040
   30460:	20024b7c 	.word	0x20024b7c

00030464 <rpc_transport_ipc_tx_send>:
   30464:	d05f2800 	.word	0xd05f2800
   30468:	4b33b470 	.word	0x4b33b470
   3046c:	681ab083 	.word	0x681ab083
   30470:	42824b32 	.word	0x42824b32
   30474:	681bd81e 	.word	0x681bd81e
   30478:	42834931 	.word	0x42834931
   3047c:	d8036809 	.word	0xd8036809
   30480:	68244c30 	.word	0x68244c30
   30484:	d8474284 	.word	0xd8474284
   30488:	d90e4281 	.word	0xd90e4281
   3048c:	781b4b2e 	.word	0x781b4b2e
   30490:	d14c2b00 	.word	0xd14c2b00
   30494:	492d1a83 	.word	0x492d1a83
   30498:	069b099e 	.word	0x069b099e
   3049c:	4c2c680a 	.word	0x4c2c680a
   304a0:	0103f04f 	.word	0x0103f04f
   304a4:	0502f04f 	.word	0x0502f04f
   304a8:	f24cd014 	.word	0xf24cd014
   304ac:	b0030010 	.word	0xb0030010
   304b0:	4770bc70 	.word	0x4770bc70
   304b4:	4298681b 	.word	0x4298681b
   304b8:	4a22d3f7 	.word	0x4a22d3f7
   304bc:	42906812 	.word	0x42906812
   304c0:	2101d2f3 	.word	0x2101d2f3
   304c4:	4a231ac3 	.word	0x4a231ac3
   304c8:	069b099e 	.word	0x069b099e
   304cc:	6812460d 	.word	0x6812460d
   304d0:	d1ea4c21 	.word	0xd1ea4c21
   304d4:	b2db6843 	.word	0xb2db6843
   304d8:	d120429d 	.word	0xd120429d
   304dc:	eb022020 	.word	0xeb022020
   304e0:	4d1e02c6 	.word	0x4d1e02c6
   304e4:	882e6853 	.word	0x882e6853
   304e8:	ea43b29b 	.word	0xea43b29b
   304ec:	f0234306 	.word	0xf0234306
   304f0:	f04303ff 	.word	0xf04303ff
   304f4:	60530301 	.word	0x60530301
   304f8:	3801bf00 	.word	0x3801bf00
   304fc:	2201d1fc 	.word	0x2201d1fc
   30500:	f8434b17 	.word	0xf8434b17
   30504:	68222021 	.word	0x68222021
   30508:	9201882b 	.word	0x9201882b
   3050c:	33019a01 	.word	0x33019a01
   30510:	b003802b 	.word	0xb003802b
   30514:	4770bc70 	.word	0x4770bc70
   30518:	d9d24281 	.word	0xd9d24281
   3051c:	f24ce7b6 	.word	0xf24ce7b6
   30520:	b0030007 	.word	0xb0030007
   30524:	4770bc70 	.word	0x4770bc70
   30528:	000ef24c 	.word	0x000ef24c
   3052c:	f24c4770 	.word	0xf24c4770
   30530:	b003000f 	.word	0xb003000f
   30534:	4770bc70 	.word	0x4770bc70
   30538:	20024b7c 	.word	0x20024b7c
   3053c:	20024b74 	.word	0x20024b74
   30540:	20024b78 	.word	0x20024b78
   30544:	20024b70 	.word	0x20024b70
   30548:	2002be65 	.word	0x2002be65
   3054c:	20024ba0 	.word	0x20024ba0
   30550:	4002a00c 	.word	0x4002a00c
   30554:	20024b98 	.word	0x20024b98
   30558:	4002a004 	.word	0x4002a004
   3055c:	2002a342 	.word	0x2002a342
   30560:	4002a000 	.word	0x4002a000

00030564 <rpc_transport_ipc_tx_rpc_data_alloc>:
   30564:	781b4b18 	.word	0x781b4b18
   30568:	b4f0bb63 	.word	0xb4f0bb63
   3056c:	f0034a17 	.word	0xf0034a17
   30570:	681400ff 	.word	0x681400ff
   30574:	68254b16 	.word	0x68254b16
   30578:	b1a5681e 	.word	0xb1a5681e
   3057c:	00c14607 	.word	0x00c14607
   30580:	685a1863 	.word	0x685a1863
   30584:	2a03b2d2 	.word	0x2a03b2d2
   30588:	609fd104 	.word	0x609fd104
   3058c:	f022685a 	.word	0xf022685a
   30590:	605a02ff 	.word	0x605a02ff
   30594:	f012685a 	.word	0xf012685a
   30598:	d1010fff 	.word	0xd1010fff
   3059c:	b12b689b 	.word	0xb12b689b
   305a0:	42a83001 	.word	0x42a83001
   305a4:	2000d1eb 	.word	0x2000d1eb
   305a8:	4770bcf0 	.word	0x4770bcf0
   305ac:	1080eb06 	.word	0x1080eb06
   305b0:	60884421 	.word	0x60884421
   305b4:	f0236843 	.word	0xf0236843
   305b8:	f04303ff 	.word	0xf04303ff
   305bc:	60430302 	.word	0x60430302
   305c0:	4770bcf0 	.word	0x4770bcf0
   305c4:	47702000 	.word	0x47702000
   305c8:	2002be65 	.word	0x2002be65
   305cc:	20024ba0 	.word	0x20024ba0
   305d0:	20024b9c 	.word	0x20024b9c

000305d4 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   305d4:	4a15b4f0 	.word	0x4a15b4f0
   305d8:	68144b15 	.word	0x68144b15
   305dc:	6825681e 	.word	0x6825681e
   305e0:	2000b1ad 	.word	0x2000b1ad
   305e4:	00c14607 	.word	0x00c14607
   305e8:	685a1863 	.word	0x685a1863
   305ec:	2a03b2d2 	.word	0x2a03b2d2
   305f0:	609fd104 	.word	0x609fd104
   305f4:	f022685a 	.word	0xf022685a
   305f8:	605a02ff 	.word	0x605a02ff
   305fc:	f012685a 	.word	0xf012685a
   30600:	d1010fff 	.word	0xd1010fff
   30604:	b12b689b 	.word	0xb12b689b
   30608:	42853001 	.word	0x42853001
   3060c:	2000d1eb 	.word	0x2000d1eb
   30610:	4770bcf0 	.word	0x4770bcf0
   30614:	1080eb06 	.word	0x1080eb06
   30618:	60884421 	.word	0x60884421
   3061c:	f0236843 	.word	0xf0236843
   30620:	f04303ff 	.word	0xf04303ff
   30624:	60430301 	.word	0x60430301
   30628:	4770bcf0 	.word	0x4770bcf0
   3062c:	20024b98 	.word	0x20024b98
   30630:	20024b94 	.word	0x20024b94

00030634 <rpc_transport_ipc_tx_data_alloc>:
   30634:	781b4b03 	.word	0x781b4b03
   30638:	f005b90b 	.word	0xf005b90b
   3063c:	2000bb21 	.word	0x2000bb21
   30640:	bf004770 	.word	0xbf004770
   30644:	2002be65 	.word	0x2002be65

00030648 <rpc_transport_ipc_tx_suspend>:
   30648:	4b012201 	.word	0x4b012201
   3064c:	4770701a 	.word	0x4770701a
   30650:	2002be65 	.word	0x2002be65

00030654 <rpc_transport_ipc_tx_shutdown>:
   30654:	4a16b4f0 	.word	0x4a16b4f0
   30658:	68144b16 	.word	0x68144b16
   3065c:	6825681e 	.word	0x6825681e
   30660:	2200b1ad 	.word	0x2200b1ad
   30664:	00d04617 	.word	0x00d04617
   30668:	68591823 	.word	0x68591823
   3066c:	2903b2c9 	.word	0x2903b2c9
   30670:	609fd104 	.word	0x609fd104
   30674:	f0216859 	.word	0xf0216859
   30678:	605901ff 	.word	0x605901ff
   3067c:	f0116859 	.word	0xf0116859
   30680:	d1010fff 	.word	0xd1010fff
   30684:	b123689b 	.word	0xb123689b
   30688:	42aa3201 	.word	0x42aa3201
   3068c:	bcf0d1eb 	.word	0xbcf0d1eb
   30690:	01924770 	.word	0x01924770
   30694:	18b04404 	.word	0x18b04404
   30698:	684360a0 	.word	0x684360a0
   3069c:	f0234906 	.word	0xf0234906
   306a0:	f04303ff 	.word	0xf04303ff
   306a4:	60430301 	.word	0x60430301
   306a8:	bcf050b1 	.word	0xbcf050b1
   306ac:	bedaf7ff 	.word	0xbedaf7ff
   306b0:	20024b98 	.word	0x20024b98
   306b4:	20024b94 	.word	0x20024b94
   306b8:	00030001 	.word	0x00030001

000306bc <null_handler_init>:
   306bc:	47702000 	.word	0x47702000

000306c0 <null_handler_put>:
   306c0:	460cb510 	.word	0x460cb510
   306c4:	3101e9d0 	.word	0x3101e9d0
   306c8:	47984620 	.word	0x47984620
   306cc:	bd106860 	.word	0xbd106860

000306d0 <null_handler_get>:
   306d0:	30fff04f 	.word	0x30fff04f
   306d4:	bf004770 	.word	0xbf004770

000306d8 <null_handler_available>:
   306d8:	30fff04f 	.word	0x30fff04f
   306dc:	bf004770 	.word	0xbf004770

000306e0 <null_handler_flush>:
   306e0:	47702000 	.word	0x47702000

000306e4 <null_handler_free>:
   306e4:	bf004770 	.word	0xbf004770

000306e8 <rpc_gnss_event_handler>:
   306e8:	4b5db5f0 	.word	0x4b5db5f0
   306ec:	68004606 	.word	0x68004606
   306f0:	6802881b 	.word	0x6802881b
   306f4:	ebb34c5b 	.word	0xebb34c5b
   306f8:	b0854f12 	.word	0xb0854f12
   306fc:	6020460d 	.word	0x6020460d
   30700:	f505d033 	.word	0xf505d033
   30704:	33ff433f 	.word	0x33ff433f
   30708:	2b02b29b 	.word	0x2b02b29b
   3070c:	4c56d80e 	.word	0x4c56d80e
   30710:	075a6823 	.word	0x075a6823
   30714:	6823d40d 	.word	0x6823d40d
   30718:	d503079b 	.word	0xd503079b
   3071c:	0303f244 	.word	0x0303f244
   30720:	d006429d 	.word	0xd006429d
   30724:	b1086830 	.word	0xb1086830
   30728:	f92ef7f9 	.word	0xf92ef7f9
   3072c:	b0052000 	.word	0xb0052000
   30730:	2002bdf0 	.word	0x2002bdf0
   30734:	fa7af005 	.word	0xfa7af005
   30738:	28004607 	.word	0x28004607
   3073c:	2302d0f2 	.word	0x2302d0f2
   30740:	68318005 	.word	0x68318005
   30744:	48496872 	.word	0x48496872
   30748:	0086e88d 	.word	0x0086e88d
   3074c:	93036800 	.word	0x93036800
   30750:	46696803 	.word	0x46696803
   30754:	4798685b 	.word	0x4798685b
   30758:	d06d3001 	.word	0xd06d3001
   3075c:	68232000 	.word	0x68232000
   30760:	3380f443 	.word	0x3380f443
   30764:	b0056023 	.word	0xb0056023
   30768:	4c3fbdf0 	.word	0x4c3fbdf0
   3076c:	01da6823 	.word	0x01da6823
   30770:	f242d523 	.word	0xf242d523
   30774:	42991302 	.word	0x42991302
   30778:	6843d11f 	.word	0x6843d11f
   3077c:	6823b91b 	.word	0x6823b91b
   30780:	7300f043 	.word	0x7300f043
   30784:	68236023 	.word	0x68236023
   30788:	7380f023 	.word	0x7380f023
   3078c:	68236023 	.word	0x68236023
   30790:	d430025b 	.word	0xd430025b
   30794:	0305f242 	.word	0x0305f242
   30798:	d12c429d 	.word	0xd12c429d
   3079c:	02996823 	.word	0x02996823
   307a0:	6843d529 	.word	0x6843d529
   307a4:	d1552b00 	.word	0xd1552b00
   307a8:	f4236823 	.word	0xf4236823
   307ac:	60231300 	.word	0x60231300
   307b0:	f4436823 	.word	0xf4436823
   307b4:	60233300 	.word	0x60233300
   307b8:	6823e01d 	.word	0x6823e01d
   307bc:	d50e025f 	.word	0xd50e025f
   307c0:	1303f242 	.word	0x1303f242
   307c4:	d10a429d 	.word	0xd10a429d
   307c8:	b91b6843 	.word	0xb91b6843
   307cc:	f4436823 	.word	0xf4436823
   307d0:	60230300 	.word	0x60230300
   307d4:	f4236823 	.word	0xf4236823
   307d8:	60230380 	.word	0x60230380
   307dc:	f242e00b 	.word	0xf242e00b
   307e0:	429d0301 	.word	0x429d0301
   307e4:	6843d10a 	.word	0x6843d10a
   307e8:	6823b92b 	.word	0x6823b92b
   307ec:	041b0c1b 	.word	0x041b0c1b
   307f0:	0302f043 	.word	0x0302f043
   307f4:	f7f96023 	.word	0xf7f96023
   307f8:	e782f8c7 	.word	0xe782f8c7
   307fc:	0304f242 	.word	0x0304f242
   30800:	d1c7429d 	.word	0xd1c7429d
   30804:	b9936843 	.word	0xb9936843
   30808:	f4436823 	.word	0xf4436823
   3080c:	60230300 	.word	0x60230300
   30810:	b29b6823 	.word	0xb29b6823
   30814:	68232b03 	.word	0x68232b03
   30818:	b29bd016 	.word	0xb29bd016
   3081c:	d1d92b04 	.word	0xd1d92b04
   30820:	0c1b6823 	.word	0x0c1b6823
   30824:	f043041b 	.word	0xf043041b
   30828:	60230302 	.word	0x60230302
   3082c:	6823e7d2 	.word	0x6823e7d2
   30830:	2b03b29b 	.word	0x2b03b29b
   30834:	e7f3d1ce 	.word	0xe7f3d1ce
   30838:	f0054638 	.word	0xf0054638
   3083c:	6830fa15 	.word	0x6830fa15
   30840:	f47f2800 	.word	0xf47f2800
   30844:	e771af71 	.word	0xe771af71
   30848:	041b0c1b 	.word	0x041b0c1b
   3084c:	0304f043 	.word	0x0304f043
   30850:	e7bf6023 	.word	0xe7bf6023
   30854:	f4236823 	.word	0xf4236823
   30858:	60231300 	.word	0x60231300
   3085c:	bf00e7cb 	.word	0xbf00e7cb
   30860:	2002a344 	.word	0x2002a344
   30864:	20024b64 	.word	0x20024b64
   30868:	20024bbc 	.word	0x20024bbc
   3086c:	20024bc0 	.word	0x20024bc0

00030870 <gnss_interface_write>:
   30870:	43f0e92d 	.word	0x43f0e92d
   30874:	b09f4a75 	.word	0xb09f4a75
   30878:	9d264290 	.word	0x9d264290
   3087c:	80d3f040 	.word	0x80d3f040
   30880:	f0002900 	.word	0xf0002900
   30884:	2d0080c8 	.word	0x2d0080c8
   30888:	80c5f000 	.word	0x80c5f000
   3088c:	2a029a27 	.word	0x2a029a27
   30890:	80c1f040 	.word	0x80c1f040
   30894:	68224c6e 	.word	0x68224c6e
   30898:	2a02b292 	.word	0x2a02b292
   3089c:	6822d004 	.word	0x6822d004
   308a0:	2a04b292 	.word	0x2a04b292
   308a4:	80c5f040 	.word	0x80c5f040
   308a8:	f1000798 	.word	0xf1000798
   308ac:	682080c8 	.word	0x682080c8
   308b0:	3000f410 	.word	0x3000f410
   308b4:	6822d065 	.word	0x6822d065
   308b8:	f422882b 	.word	0xf422882b
   308bc:	60223200 	.word	0x60223200
   308c0:	3b016822 	.word	0x3b016822
   308c4:	1200f442 	.word	0x1200f442
   308c8:	2b076022 	.word	0x2b076022
   308cc:	80a3f200 	.word	0x80a3f200
   308d0:	f003e8df 	.word	0xf003e8df
   308d4:	696e7378 	.word	0x696e7378
   308d8:	045f5a64 	.word	0x045f5a64
   308dc:	a9024608 	.word	0xa9024608
   308e0:	feb6f7fb 	.word	0xfeb6f7fb
   308e4:	46682172 	.word	0x46682172
   308e8:	f81cf7f9 	.word	0xf81cf7f9
   308ec:	98004605 	.word	0x98004605
   308f0:	d16c2d00 	.word	0xd16c2d00
   308f4:	d06a2800 	.word	0xd06a2800
   308f8:	0605f241 	.word	0x0605f241
   308fc:	0c49f04f 	.word	0x0c49f04f
   30900:	f04f2272 	.word	0xf04f2272
   30904:	f04f0e76 	.word	0xf04f0e76
   30908:	f04f0943 	.word	0xf04f0943
   3090c:	4f510854 	.word	0x4f510854
   30910:	883ba91e 	.word	0x883ba91e
   30914:	c00ff880 	.word	0xc00ff880
   30918:	b29b3301 	.word	0xb29b3301
   3091c:	4c03ea46 	.word	0x4c03ea46
   30920:	cd74f841 	.word	0xcd74f841
   30924:	71857145 	.word	0x71857145
   30928:	720571c5 	.word	0x720571c5
   3092c:	72857245 	.word	0x72857245
   30930:	710272c5 	.word	0x710272c5
   30934:	900cf880 	.word	0x900cf880
   30938:	800df880 	.word	0x800df880
   3093c:	e00ef880 	.word	0xe00ef880
   30940:	803b6800 	.word	0x803b6800
   30944:	fa0cf010 	.word	0xfa0cf010
   30948:	46314b43 	.word	0x46314b43
   3094c:	601d9800 	.word	0x601d9800
   30950:	fffcf7f8 	.word	0xfffcf7f8
   30954:	d1472800 	.word	0xd1472800
   30958:	02996823 	.word	0x02996823
   3095c:	4e3fd50d 	.word	0x4e3fd50d
   30960:	e0014d3a 	.word	0xe0014d3a
   30964:	d14f2800 	.word	0xd14f2800
   30968:	46284631 	.word	0x46284631
   3096c:	ff3af7f1 	.word	0xff3af7f1
   30970:	029a6823 	.word	0x029a6823
   30974:	2800d4f6 	.word	0x2800d4f6
   30978:	6823d146 	.word	0x6823d146
   3097c:	d53e039b 	.word	0xd53e039b
   30980:	b01f2000 	.word	0xb01f2000
   30984:	83f0e8bd 	.word	0x83f0e8bd
   30988:	a9024608 	.word	0xa9024608
   3098c:	fe18f7fb 	.word	0xfe18f7fb
   30990:	4608e7a8 	.word	0x4608e7a8
   30994:	f7fba902 	.word	0xf7fba902
   30998:	e7a3fe3b 	.word	0xe7a3fe3b
   3099c:	a9024608 	.word	0xa9024608
   309a0:	fdf4f7fb 	.word	0xfdf4f7fb
   309a4:	4608e79e 	.word	0x4608e79e
   309a8:	f7fba902 	.word	0xf7fba902
   309ac:	e799fdcb 	.word	0xe799fdcb
   309b0:	a9024608 	.word	0xa9024608
   309b4:	fd94f7fb 	.word	0xfd94f7fb
   309b8:	4608e794 	.word	0x4608e794
   309bc:	f7fba902 	.word	0xf7fba902
   309c0:	e78ffd3d 	.word	0xe78ffd3d
   309c4:	a9024608 	.word	0xa9024608
   309c8:	fd16f7fb 	.word	0xfd16f7fb
   309cc:	6803e78a 	.word	0x6803e78a
   309d0:	4618b11b 	.word	0x4618b11b
   309d4:	ffd8f7f8 	.word	0xffd8f7f8
   309d8:	f7f89800 	.word	0xf7f89800
   309dc:	2023ffcd 	.word	0x2023ffcd
   309e0:	ff94f7f1 	.word	0xff94f7f1
   309e4:	30fff04f 	.word	0x30fff04f
   309e8:	f4236823 	.word	0xf4236823
   309ec:	60231300 	.word	0x60231300
   309f0:	f4436823 	.word	0xf4436823
   309f4:	60233300 	.word	0x60233300
   309f8:	e8bdb01f 	.word	0xe8bdb01f
   309fc:	200583f0 	.word	0x200583f0
   30a00:	f4436823 	.word	0xf4436823
   30a04:	60233300 	.word	0x60233300
   30a08:	ff80f7f1 	.word	0xff80f7f1
   30a0c:	30fff04f 	.word	0x30fff04f
   30a10:	e8bdb01f 	.word	0xe8bdb01f
   30a14:	201683f0 	.word	0x201683f0
   30a18:	ff78f7f1 	.word	0xff78f7f1
   30a1c:	30fff04f 	.word	0x30fff04f
   30a20:	e8bdb01f 	.word	0xe8bdb01f
   30a24:	200983f0 	.word	0x200983f0
   30a28:	ff70f7f1 	.word	0xff70f7f1
   30a2c:	30fff04f 	.word	0x30fff04f
   30a30:	2039e7a7 	.word	0x2039e7a7
   30a34:	ff6af7f1 	.word	0xff6af7f1
   30a38:	30fff04f 	.word	0x30fff04f
   30a3c:	202de7a1 	.word	0x202de7a1
   30a40:	ff64f7f1 	.word	0xff64f7f1
   30a44:	30fff04f 	.word	0x30fff04f
   30a48:	bf00e79b 	.word	0xbf00e79b
   30a4c:	49765443 	.word	0x49765443
   30a50:	20024bbc 	.word	0x20024bbc
   30a54:	2002a344 	.word	0x2002a344
   30a58:	20024b64 	.word	0x20024b64
   30a5c:	20031298 	.word	0x20031298

00030a60 <gnss_interface_read>:
   30a60:	4ff0e92d 	.word	0x4ff0e92d
   30a64:	b0b74c4a 	.word	0xb0b74c4a
   30a68:	f04042a0 	.word	0xf04042a0
   30a6c:	468881ec 	.word	0x468881ec
   30a70:	f0002900 	.word	0xf0002900
   30a74:	2ad781e2 	.word	0x2ad781e2
   30a78:	81dff240 	.word	0x81dff240
   30a7c:	46994d45 	.word	0x46994d45
   30a80:	b29b682b 	.word	0xb29b682b
   30a84:	d0042b04 	.word	0xd0042b04
   30a88:	b29b682b 	.word	0xb29b682b
   30a8c:	f0402b02 	.word	0xf0402b02
   30a90:	210281e0 	.word	0x210281e0
   30a94:	240020b6 	.word	0x240020b6
   30a98:	f10d682b 	.word	0xf10d682b
   30a9c:	f423020e 	.word	0xf423020e
   30aa0:	602b3380 	.word	0x602b3380
   30aa4:	a0f4f8df 	.word	0xa0f4f8df
   30aa8:	4f3bab08 	.word	0x4f3bab08
   30aac:	90054e38 	.word	0x90054e38
   30ab0:	93049107 	.word	0x93049107
   30ab4:	ea099206 	.word	0xea099206
   30ab8:	f8da0b01 	.word	0xf8da0b01
   30abc:	464a0000 	.word	0x464a0000
   30ac0:	a9046803 	.word	0xa9046803
   30ac4:	4798689b 	.word	0x4798689b
   30ac8:	da112800 	.word	0xda112800
   30acc:	0f00f1bb 	.word	0x0f00f1bb
   30ad0:	682bd138 	.word	0x682bd138
   30ad4:	d4f003d8 	.word	0xd4f003d8
   30ad8:	e7eeb10c 	.word	0xe7eeb10c
   30adc:	4639b930 	.word	0x4639b930
   30ae0:	f7f14630 	.word	0xf7f14630
   30ae4:	682bfe7f 	.word	0x682bfe7f
   30ae8:	d5f703d9 	.word	0xd5f703d9
   30aec:	e7e44604 	.word	0xe7e44604
   30af0:	0202f244 	.word	0x0202f244
   30af4:	300ef8bd 	.word	0x300ef8bd
   30af8:	d0394293 	.word	0xd0394293
   30afc:	0201f244 	.word	0x0201f244
   30b00:	d04d4293 	.word	0xd04d4293
   30b04:	0203f244 	.word	0x0203f244
   30b08:	f0404293 	.word	0xf0404293
   30b0c:	22018196 	.word	0x22018196
   30b10:	9b082414 	.word	0x9b082414
   30b14:	2000f888 	.word	0x2000f888
   30b18:	f8c89a09 	.word	0xf8c89a09
   30b1c:	f8bd3008 	.word	0xf8bd3008
   30b20:	e9c83028 	.word	0xe9c83028
   30b24:	f8da2303 	.word	0xf8da2303
   30b28:	68030000 	.word	0x68030000
   30b2c:	479868db 	.word	0x479868db
   30b30:	dd032800 	.word	0xdd032800
   30b34:	f443682b 	.word	0xf443682b
   30b38:	602b3380 	.word	0x602b3380
   30b3c:	b0374620 	.word	0xb0374620
   30b40:	8ff0e8bd 	.word	0x8ff0e8bd
   30b44:	46031c42 	.word	0x46031c42
   30b48:	b93cd1d2 	.word	0xb93cd1d2
   30b4c:	2023461c 	.word	0x2023461c
   30b50:	fedcf7f1 	.word	0xfedcf7f1
   30b54:	b0374620 	.word	0xb0374620
   30b58:	8ff0e8bd 	.word	0x8ff0e8bd
   30b5c:	46209001 	.word	0x46209001
   30b60:	fed4f7f1 	.word	0xfed4f7f1
   30b64:	461c9b01 	.word	0x461c9b01
   30b68:	b0374620 	.word	0xb0374620
   30b6c:	8ff0e8bd 	.word	0x8ff0e8bd
   30b70:	f7e9a808 	.word	0xf7e9a808
   30b74:	2302fa07 	.word	0x2302fa07
   30b78:	b2a41c44 	.word	0xb2a41c44
   30b7c:	3b08f808 	.word	0x3b08f808
   30b80:	a9084622 	.word	0xa9084622
   30b84:	f0104640 	.word	0xf0104640
   30b88:	3408f8eb 	.word	0x3408f8eb
   30b8c:	bf00e7cb 	.word	0xbf00e7cb
   30b90:	49765443 	.word	0x49765443
   30b94:	20024bbc 	.word	0x20024bbc
   30b98:	20031298 	.word	0x20031298
   30b9c:	20024bc0 	.word	0x20024bc0
   30ba0:	a8092401 	.word	0xa8092401
   30ba4:	e9c8c80f 	.word	0xe9c8c80f
   30ba8:	e9c80102 	.word	0xe9c80102
   30bac:	990d2304 	.word	0x990d2304
   30bb0:	f8889a0e 	.word	0xf8889a0e
   30bb4:	9b0f4000 	.word	0x9b0f4000
   30bb8:	1018f8c8 	.word	0x1018f8c8
   30bbc:	f8c89910 	.word	0xf8c89910
   30bc0:	f8c8201c 	.word	0xf8c8201c
   30bc4:	f89d3020 	.word	0xf89d3020
   30bc8:	f8dd205d 	.word	0xf8dd205d
   30bcc:	f8c8304d 	.word	0xf8c8304d
   30bd0:	f8dd1024 	.word	0xf8dd1024
   30bd4:	f8881051 	.word	0xf8881051
   30bd8:	f8dd2044 	.word	0xf8dd2044
   30bdc:	f8c82055 	.word	0xf8c82055
   30be0:	f8dd3034 	.word	0xf8dd3034
   30be4:	f8c83059 	.word	0xf8c83059
   30be8:	f8bd1038 	.word	0xf8bd1038
   30bec:	f8c81044 	.word	0xf8c81044
   30bf0:	f8c8203c 	.word	0xf8c8203c
   30bf4:	f8dd3040 	.word	0xf8dd3040
   30bf8:	f89d2046 	.word	0xf89d2046
   30bfc:	f8a8304a 	.word	0xf8a8304a
   30c00:	f8881028 	.word	0xf8881028
   30c04:	f8c8302e 	.word	0xf8c8302e
   30c08:	f89d202a 	.word	0xf89d202a
   30c0c:	f89d004b 	.word	0xf89d004b
   30c10:	9b18204c 	.word	0x9b18204c
   30c14:	406cf89d 	.word	0x406cf89d
   30c18:	2002ea40 	.word	0x2002ea40
   30c1c:	206bf89d 	.word	0x206bf89d
   30c20:	210ff3c3 	.word	0x210ff3c3
   30c24:	ea429b1d 	.word	0xea429b1d
   30c28:	f8a82204 	.word	0xf8a82204
   30c2c:	f8a80030 	.word	0xf8a80030
   30c30:	f8bd104a 	.word	0xf8bd104a
   30c34:	f3c3105e 	.word	0xf3c3105e
   30c38:	f8a8230f 	.word	0xf8a8230f
   30c3c:	f89d2056 	.word	0xf89d2056
   30c40:	f8a82060 	.word	0xf8a82060
   30c44:	f8dd3062 	.word	0xf8dd3062
   30c48:	f8a83063 	.word	0xf8a83063
   30c4c:	f8881046 	.word	0xf8881046
   30c50:	f8bd2048 	.word	0xf8bd2048
   30c54:	f89d2068 	.word	0xf89d2068
   30c58:	f8c81067 	.word	0xf8c81067
   30c5c:	f89d304c 	.word	0xf89d304c
   30c60:	f888306a 	.word	0xf888306a
   30c64:	f8a81050 	.word	0xf8a81050
   30c68:	f8882052 	.word	0xf8882052
   30c6c:	f8bd3054 	.word	0xf8bd3054
   30c70:	f8dd3072 	.word	0xf8dd3072
   30c74:	f89d106d 	.word	0xf89d106d
   30c78:	f8c82071 	.word	0xf8c82071
   30c7c:	f8881058 	.word	0xf8881058
   30c80:	f89d205c 	.word	0xf89d205c
   30c84:	f8dd1074 	.word	0xf8dd1074
   30c88:	f8a82077 	.word	0xf8a82077
   30c8c:	f89d305e 	.word	0xf89d305e
   30c90:	f888307b 	.word	0xf888307b
   30c94:	f8c81060 	.word	0xf8c81060
   30c98:	f8882064 	.word	0xf8882064
   30c9c:	f89d3068 	.word	0xf89d3068
   30ca0:	f89d3080 	.word	0xf89d3080
   30ca4:	9a22107f 	.word	0x9a22107f
   30ca8:	0094f89d 	.word	0x0094f89d
   30cac:	2103ea41 	.word	0x2103ea41
   30cb0:	3093f89d 	.word	0x3093f89d
   30cb4:	220ff3c2 	.word	0x220ff3c2
   30cb8:	106ef8a8 	.word	0x106ef8a8
   30cbc:	107cf8bd 	.word	0x107cf8bd
   30cc0:	2300ea43 	.word	0x2300ea43
   30cc4:	207af8a8 	.word	0x207af8a8
   30cc8:	207ef89d 	.word	0x207ef89d
   30ccc:	3086f8a8 	.word	0x3086f8a8
   30cd0:	3081f8dd 	.word	0x3081f8dd
   30cd4:	106af8a8 	.word	0x106af8a8
   30cd8:	206cf888 	.word	0x206cf888
   30cdc:	2086f8bd 	.word	0x2086f8bd
   30ce0:	1085f89d 	.word	0x1085f89d
   30ce4:	3070f8c8 	.word	0x3070f8c8
   30ce8:	3088f89d 	.word	0x3088f89d
   30cec:	1074f888 	.word	0x1074f888
   30cf0:	2076f8a8 	.word	0x2076f8a8
   30cf4:	3078f888 	.word	0x3078f888
   30cf8:	3090f8bd 	.word	0x3090f8bd
   30cfc:	108bf8dd 	.word	0x108bf8dd
   30d00:	208ff89d 	.word	0x208ff89d
   30d04:	107cf8c8 	.word	0x107cf8c8
   30d08:	2080f888 	.word	0x2080f888
   30d0c:	1092f89d 	.word	0x1092f89d
   30d10:	2095f8dd 	.word	0x2095f8dd
   30d14:	3082f8a8 	.word	0x3082f8a8
   30d18:	3099f89d 	.word	0x3099f89d
   30d1c:	1084f888 	.word	0x1084f888
   30d20:	2088f8c8 	.word	0x2088f8c8
   30d24:	308cf888 	.word	0x308cf888
   30d28:	009af8bd 	.word	0x009af8bd
   30d2c:	f89d9b27 	.word	0xf89d9b27
   30d30:	f89d40a8 	.word	0xf89d40a8
   30d34:	f3c320a7 	.word	0xf3c320a7
   30d38:	9b2c210f 	.word	0x9b2c210f
   30d3c:	2204ea42 	.word	0x2204ea42
   30d40:	1092f8a8 	.word	0x1092f8a8
   30d44:	109cf89d 	.word	0x109cf89d
   30d48:	209ef8a8 	.word	0x209ef8a8
   30d4c:	230ff3c3 	.word	0x230ff3c3
   30d50:	209ff8dd 	.word	0x209ff8dd
   30d54:	008ef8a8 	.word	0x008ef8a8
   30d58:	30aaf8a8 	.word	0x30aaf8a8
   30d5c:	1090f888 	.word	0x1090f888
   30d60:	30a3f89d 	.word	0x30a3f89d
   30d64:	10a4f8bd 	.word	0x10a4f8bd
   30d68:	2094f8c8 	.word	0x2094f8c8
   30d6c:	20a6f89d 	.word	0x20a6f89d
   30d70:	3098f888 	.word	0x3098f888
   30d74:	30a9f8dd 	.word	0x30a9f8dd
   30d78:	109af8a8 	.word	0x109af8a8
   30d7c:	209cf888 	.word	0x209cf888
   30d80:	20aef8bd 	.word	0x20aef8bd
   30d84:	10adf89d 	.word	0x10adf89d
   30d88:	30a0f8c8 	.word	0x30a0f8c8
   30d8c:	30b0f89d 	.word	0x30b0f89d
   30d90:	10a4f888 	.word	0x10a4f888
   30d94:	20a6f8a8 	.word	0x20a6f8a8
   30d98:	30a8f888 	.word	0x30a8f888
   30d9c:	30b8f8bd 	.word	0x30b8f8bd
   30da0:	10b3f8dd 	.word	0x10b3f8dd
   30da4:	20b7f89d 	.word	0x20b7f89d
   30da8:	10acf8c8 	.word	0x10acf8c8
   30dac:	20b0f888 	.word	0x20b0f888
   30db0:	30b2f8a8 	.word	0x30b2f8a8
   30db4:	30bcf89d 	.word	0x30bcf89d
   30db8:	10bbf89d 	.word	0x10bbf89d
   30dbc:	00d0f89d 	.word	0x00d0f89d
   30dc0:	ea419a31 	.word	0xea419a31
   30dc4:	f89d2103 	.word	0xf89d2103
   30dc8:	f89d30cf 	.word	0xf89d30cf
   30dcc:	ea4340ba 	.word	0xea4340ba
   30dd0:	f3c22300 	.word	0xf3c22300
   30dd4:	f8a8220f 	.word	0xf8a8220f
   30dd8:	f8a810b6 	.word	0xf8a810b6
   30ddc:	f88830ce 	.word	0xf88830ce
   30de0:	f8a840b4 	.word	0xf8a840b4
   30de4:	f8bd20c2 	.word	0xf8bd20c2
   30de8:	f89d20c2 	.word	0xf89d20c2
   30dec:	f89d10c1 	.word	0xf89d10c1
   30df0:	f8dd30c4 	.word	0xf8dd30c4
   30df4:	f88800bd 	.word	0xf88800bd
   30df8:	f8a810bc 	.word	0xf8a810bc
   30dfc:	f8c820be 	.word	0xf8c820be
   30e00:	f88800b8 	.word	0xf88800b8
   30e04:	f8bd30c0 	.word	0xf8bd30c0
   30e08:	f8dd30cc 	.word	0xf8dd30cc
   30e0c:	f89d10c7 	.word	0xf89d10c7
   30e10:	f8c820cb 	.word	0xf8c820cb
   30e14:	f88810c4 	.word	0xf88810c4
   30e18:	f89d20c8 	.word	0xf89d20c8
   30e1c:	f8dd10ce 	.word	0xf8dd10ce
   30e20:	f8a820d1 	.word	0xf8a820d1
   30e24:	f89d30ca 	.word	0xf89d30ca
   30e28:	f88830d5 	.word	0xf88830d5
   30e2c:	f8c810cc 	.word	0xf8c810cc
   30e30:	f88820d0 	.word	0xf88820d0
   30e34:	24d830d4 	.word	0x24d830d4
   30e38:	2016e675 	.word	0x2016e675
   30e3c:	fd66f7f1 	.word	0xfd66f7f1
   30e40:	34fff04f 	.word	0x34fff04f
   30e44:	2009e67a 	.word	0x2009e67a
   30e48:	fd60f7f1 	.word	0xfd60f7f1
   30e4c:	34fff04f 	.word	0x34fff04f
   30e50:	2039e674 	.word	0x2039e674
   30e54:	fd5af7f1 	.word	0xfd5af7f1
   30e58:	34fff04f 	.word	0x34fff04f
   30e5c:	bf00e66e 	.word	0xbf00e66e

00030e60 <gnss_interface_setopt>:
   30e60:	47f0e92d 	.word	0x47f0e92d
   30e64:	1402f241 	.word	0x1402f241
   30e68:	b0864222 	.word	0xb0864222
   30e6c:	d0044d9b 	.word	0xd0044d9b
   30e70:	b2a4682c 	.word	0xb2a4682c
   30e74:	f0402c02 	.word	0xf0402c02
   30e78:	682c8104 	.word	0x682c8104
   30e7c:	f1000264 	.word	0xf1000264
   30e80:	f5b18127 	.word	0xf5b18127
   30e84:	f0407f01 	.word	0xf0407f01
   30e88:	4995811d 	.word	0x4995811d
   30e8c:	f0404288 	.word	0xf0404288
   30e90:	3a018113 	.word	0x3a018113
   30e94:	f2002a08 	.word	0xf2002a08
   30e98:	e8df80ec 	.word	0xe8df80ec
   30e9c:	0075f012 	.word	0x0075f012
   30ea0:	00c200d8 	.word	0x00c200d8
   30ea4:	008100cc 	.word	0x008100cc
   30ea8:	0098008c 	.word	0x0098008c
   30eac:	000900af 	.word	0x000900af
   30eb0:	2a019a0e 	.word	0x2a019a0e
   30eb4:	80ddf040 	.word	0x80ddf040
   30eb8:	1603f241 	.word	0x1603f241
   30ebc:	46372240 	.word	0x46372240
   30ec0:	9202781b 	.word	0x9202781b
   30ec4:	3015f88d 	.word	0x3015f88d
   30ec8:	2112682b 	.word	0x2112682b
   30ecc:	0380f443 	.word	0x0380f443
   30ed0:	602b4668 	.word	0x602b4668
   30ed4:	fd26f7f8 	.word	0xfd26f7f8
   30ed8:	98004604 	.word	0x98004604
   30edc:	f0402c00 	.word	0xf0402c00
   30ee0:	280080d6 	.word	0x280080d6
   30ee4:	80d3f000 	.word	0x80d3f000
   30ee8:	f04f2212 	.word	0xf04f2212
   30eec:	f04f0876 	.word	0xf04f0876
   30ef0:	f04f0e49 	.word	0xf04f0e49
   30ef4:	f04f0a43 	.word	0xf04f0a43
   30ef8:	f8df0954 	.word	0xf8df0954
   30efc:	a906c1ec 	.word	0xa906c1ec
   30f00:	3000f8bc 	.word	0x3000f8bc
   30f04:	800ef880 	.word	0x800ef880
   30f08:	b29b3301 	.word	0xb29b3301
   30f0c:	4603ea46 	.word	0x4603ea46
   30f10:	6d14f841 	.word	0x6d14f841
   30f14:	71847144 	.word	0x71847144
   30f18:	720471c4 	.word	0x720471c4
   30f1c:	72847244 	.word	0x72847244
   30f20:	710272c4 	.word	0x710272c4
   30f24:	a00cf880 	.word	0xa00cf880
   30f28:	900df880 	.word	0x900df880
   30f2c:	e00ff880 	.word	0xe00ff880
   30f30:	81b8f8df 	.word	0x81b8f8df
   30f34:	f8ac6800 	.word	0xf8ac6800
   30f38:	f00f3000 	.word	0xf00f3000
   30f3c:	4639ff11 	.word	0x4639ff11
   30f40:	f8c89800 	.word	0xf8c89800
   30f44:	f7f84000 	.word	0xf7f84000
   30f48:	2800fd01 	.word	0x2800fd01
   30f4c:	80aaf040 	.word	0x80aaf040
   30f50:	4e634f64 	.word	0x4e634f64
   30f54:	46304639 	.word	0x46304639
   30f58:	fc44f7f1 	.word	0xfc44f7f1
   30f5c:	f414682c 	.word	0xf414682c
   30f60:	d1f70480 	.word	0xd1f70480
   30f64:	0000f8d8 	.word	0x0000f8d8
   30f68:	f7f8b118 	.word	0xf7f8b118
   30f6c:	f8c8fd0d 	.word	0xf8c8fd0d
   30f70:	682b4000 	.word	0x682b4000
   30f74:	d576021b 	.word	0xd576021b
   30f78:	682b2000 	.word	0x682b2000
   30f7c:	0300f423 	.word	0x0300f423
   30f80:	b006602b 	.word	0xb006602b
   30f84:	87f0e8bd 	.word	0x87f0e8bd
   30f88:	2a029a0e 	.word	0x2a029a0e
   30f8c:	2208d171 	.word	0x2208d171
   30f90:	1603f241 	.word	0x1603f241
   30f94:	9202881b 	.word	0x9202881b
   30f98:	300ff8ad 	.word	0x300ff8ad
   30f9c:	e7934637 	.word	0xe7934637
   30fa0:	2a019a0e 	.word	0x2a019a0e
   30fa4:	f241d165 	.word	0xf241d165
   30fa8:	781b1603 	.word	0x781b1603
   30fac:	f88d9202 	.word	0xf88d9202
   30fb0:	4637300c 	.word	0x4637300c
   30fb4:	9a0ee788 	.word	0x9a0ee788
   30fb8:	d15a2a01 	.word	0xd15a2a01
   30fbc:	f2412202 	.word	0xf2412202
   30fc0:	781b1603 	.word	0x781b1603
   30fc4:	f88d9202 	.word	0xf88d9202
   30fc8:	4637300d 	.word	0x4637300d
   30fcc:	682ae77c 	.word	0x682ae77c
   30fd0:	2a02b292 	.word	0x2a02b292
   30fd4:	9a0ed155 	.word	0x9a0ed155
   30fd8:	d14a2a04 	.word	0xd14a2a04
   30fdc:	f2412101 	.word	0xf2412101
   30fe0:	682a0604 	.word	0x682a0604
   30fe4:	0c136818 	.word	0x0c136818
   30fe8:	f043041b 	.word	0xf043041b
   30fec:	f8cd0303 	.word	0xf8cd0303
   30ff0:	602b0009 	.word	0x602b0009
   30ff4:	1008f88d 	.word	0x1008f88d
   30ff8:	e7654637 	.word	0xe7654637
   30ffc:	b29b682b 	.word	0xb29b682b
   31000:	d13e2b04 	.word	0xd13e2b04
   31004:	f2412300 	.word	0xf2412300
   31008:	f88d0604 	.word	0xf88d0604
   3100c:	f88d3008 	.word	0xf88d3008
   31010:	f88d3009 	.word	0xf88d3009
   31014:	f88d300a 	.word	0xf88d300a
   31018:	f88d300b 	.word	0xf88d300b
   3101c:	4637300c 	.word	0x4637300c
   31020:	9a0ee752 	.word	0x9a0ee752
   31024:	d1242a01 	.word	0xd1242a01
   31028:	2b01781b 	.word	0x2b01781b
   3102c:	f241d121 	.word	0xf241d121
   31030:	46371603 	.word	0x46371603
   31034:	9a0ee748 	.word	0x9a0ee748
   31038:	d11a2a02 	.word	0xd11a2a02
   3103c:	f2412220 	.word	0xf2412220
   31040:	881b1603 	.word	0x881b1603
   31044:	f8ad9202 	.word	0xf8ad9202
   31048:	46373013 	.word	0x46373013
   3104c:	9a0ee73c 	.word	0x9a0ee73c
   31050:	d10e2a02 	.word	0xd10e2a02
   31054:	f2412210 	.word	0xf2412210
   31058:	881b1603 	.word	0x881b1603
   3105c:	f8ad9202 	.word	0xf8ad9202
   31060:	46373011 	.word	0x46373011
   31064:	200ee730 	.word	0x200ee730
   31068:	fc50f7f1 	.word	0xfc50f7f1
   3106c:	30fff04f 	.word	0x30fff04f
   31070:	2016e783 	.word	0x2016e783
   31074:	fc4af7f1 	.word	0xfc4af7f1
   31078:	30fff04f 	.word	0x30fff04f
   3107c:	e8bdb006 	.word	0xe8bdb006
   31080:	200e87f0 	.word	0x200e87f0
   31084:	fc42f7f1 	.word	0xfc42f7f1
   31088:	30fff04f 	.word	0x30fff04f
   3108c:	6803e779 	.word	0x6803e779
   31090:	4618b11b 	.word	0x4618b11b
   31094:	fc78f7f8 	.word	0xfc78f7f8
   31098:	f7f89800 	.word	0xf7f89800
   3109c:	2023fc6d 	.word	0x2023fc6d
   310a0:	fc34f7f1 	.word	0xfc34f7f1
   310a4:	200e682b 	.word	0x200e682b
   310a8:	0380f423 	.word	0x0380f423
   310ac:	f7f1602b 	.word	0xf7f1602b
   310b0:	f04ffc2d 	.word	0xf04ffc2d
   310b4:	e76430ff 	.word	0xe76430ff
   310b8:	f7f12009 	.word	0xf7f12009
   310bc:	f04ffc27 	.word	0xf04ffc27
   310c0:	e75e30ff 	.word	0xe75e30ff
   310c4:	f7f1202a 	.word	0xf7f1202a
   310c8:	f04ffc21 	.word	0xf04ffc21
   310cc:	e75830ff 	.word	0xe75830ff
   310d0:	f7f12073 	.word	0xf7f12073
   310d4:	f04ffc1b 	.word	0xf04ffc1b
   310d8:	e75230ff 	.word	0xe75230ff
   310dc:	20024bbc 	.word	0x20024bbc
   310e0:	49765443 	.word	0x49765443
   310e4:	20031298 	.word	0x20031298
   310e8:	2002a344 	.word	0x2002a344
   310ec:	20024b64 	.word	0x20024b64

000310f0 <gnss_interface_getopt>:
   310f0:	4ff0e92d 	.word	0x4ff0e92d
   310f4:	b0874c81 	.word	0xb0874c81
   310f8:	46986825 	.word	0x46986825
   310fc:	2d02b2ad 	.word	0x2d02b2ad
   31100:	f0409b10 	.word	0xf0409b10
   31104:	682580dc 	.word	0x682580dc
   31108:	f10003ee 	.word	0xf10003ee
   3110c:	682580f0 	.word	0x682580f0
   31110:	f10001ed 	.word	0xf10001ed
   31114:	f5b180e6 	.word	0xf5b180e6
   31118:	f0407f01 	.word	0xf0407f01
   3111c:	497880d6 	.word	0x497880d6
   31120:	f0404288 	.word	0xf0404288
   31124:	f1b880d8 	.word	0xf1b880d8
   31128:	d00b0f00 	.word	0xd00b0f00
   3112c:	1e57b153 	.word	0x1e57b153
   31130:	d8072f05 	.word	0xd8072f05
   31134:	f007e8df 	.word	0xf007e8df
   31138:	0f030f0f 	.word	0x0f030f0f
   3113c:	681b0303 	.word	0x681b0303
   31140:	d00b2b01 	.word	0xd00b2b01
   31144:	f7f12016 	.word	0xf7f12016
   31148:	f04ffbe1 	.word	0xf04ffbe1
   3114c:	462835ff 	.word	0x462835ff
   31150:	e8bdb007 	.word	0xe8bdb007
   31154:	681b8ff0 	.word	0x681b8ff0
   31158:	d1f32b02 	.word	0xd1f32b02
   3115c:	22126823 	.word	0x22126823
   31160:	7380f043 	.word	0x7380f043
   31164:	a8012100 	.word	0xa8012100
   31168:	f00f6023 	.word	0xf00f6023
   3116c:	2112fe19 	.word	0x2112fe19
   31170:	f7f84668 	.word	0xf7f84668
   31174:	4605fbd7 	.word	0x4605fbd7
   31178:	2d009800 	.word	0x2d009800
   3117c:	808af040 	.word	0x808af040
   31180:	f0002800 	.word	0xf0002800
   31184:	f2418087 	.word	0xf2418087
   31188:	f04f1602 	.word	0xf04f1602
   3118c:	22120e49 	.word	0x22120e49
   31190:	0976f04f 	.word	0x0976f04f
   31194:	0b43f04f 	.word	0x0b43f04f
   31198:	0a54f04f 	.word	0x0a54f04f
   3119c:	c168f8df 	.word	0xc168f8df
   311a0:	e00ff880 	.word	0xe00ff880
   311a4:	3000f8bc 	.word	0x3000f8bc
   311a8:	900ef880 	.word	0x900ef880
   311ac:	b29b3301 	.word	0xb29b3301
   311b0:	4e03ea46 	.word	0x4e03ea46
   311b4:	e004f8cd 	.word	0xe004f8cd
   311b8:	71857145 	.word	0x71857145
   311bc:	720571c5 	.word	0x720571c5
   311c0:	72857245 	.word	0x72857245
   311c4:	a90172c5 	.word	0xa90172c5
   311c8:	f8807102 	.word	0xf8807102
   311cc:	f880b00c 	.word	0xf880b00c
   311d0:	f8dfa00d 	.word	0xf8dfa00d
   311d4:	68009138 	.word	0x68009138
   311d8:	3000f8ac 	.word	0x3000f8ac
   311dc:	fdc0f00f 	.word	0xfdc0f00f
   311e0:	98004631 	.word	0x98004631
   311e4:	5000f8c9 	.word	0x5000f8c9
   311e8:	fbb0f7f8 	.word	0xfbb0f7f8
   311ec:	d15c2800 	.word	0xd15c2800
   311f0:	4d434e44 	.word	0x4d434e44
   311f4:	46284631 	.word	0x46284631
   311f8:	faf4f7f1 	.word	0xfaf4f7f1
   311fc:	01db6823 	.word	0x01db6823
   31200:	f8d9d4f8 	.word	0xf8d9d4f8
   31204:	b1d80000 	.word	0xb1d80000
   31208:	f0156825 	.word	0xf0156825
   3120c:	d00f7500 	.word	0xd00f7500
   31210:	d8372f05 	.word	0xd8372f05
   31214:	f007e8df 	.word	0xf007e8df
   31218:	2b26201a 	.word	0x2b26201a
   3121c:	25000331 	.word	0x25000331
   31220:	f8887b43 	.word	0xf8887b43
   31224:	f7f83000 	.word	0xf7f83000
   31228:	2300fbaf 	.word	0x2300fbaf
   3122c:	3000f8c9 	.word	0x3000f8c9
   31230:	f0236823 	.word	0xf0236823
   31234:	60237300 	.word	0x60237300
   31238:	b0074628 	.word	0xb0074628
   3123c:	8ff0e8bd 	.word	0x8ff0e8bd
   31240:	46056823 	.word	0x46056823
   31244:	7300f023 	.word	0x7300f023
   31248:	e7f56023 	.word	0xe7f56023
   3124c:	300ff8b0 	.word	0x300ff8b0
   31250:	f8a82500 	.word	0xf8a82500
   31254:	e7e63000 	.word	0xe7e63000
   31258:	3011f8b0 	.word	0x3011f8b0
   3125c:	f8a82500 	.word	0xf8a82500
   31260:	e7e03000 	.word	0xe7e03000
   31264:	25007b83 	.word	0x25007b83
   31268:	3000f888 	.word	0x3000f888
   3126c:	f8b0e7db 	.word	0xf8b0e7db
   31270:	25003013 	.word	0x25003013
   31274:	3000f8a8 	.word	0x3000f8a8
   31278:	7b03e7d5 	.word	0x7b03e7d5
   3127c:	f8882500 	.word	0xf8882500
   31280:	e7d03000 	.word	0xe7d03000
   31284:	f7f12016 	.word	0xf7f12016
   31288:	f04ffb41 	.word	0xf04ffb41
   3128c:	f8d935ff 	.word	0xf8d935ff
   31290:	e7c80000 	.word	0xe7c80000
   31294:	b11b6803 	.word	0xb11b6803
   31298:	f7f84618 	.word	0xf7f84618
   3129c:	9800fb75 	.word	0x9800fb75
   312a0:	fb6af7f8 	.word	0xfb6af7f8
   312a4:	f7f12023 	.word	0xf7f12023
   312a8:	6823fb31 	.word	0x6823fb31
   312ac:	f023200e 	.word	0xf023200e
   312b0:	60237380 	.word	0x60237380
   312b4:	35fff04f 	.word	0x35fff04f
   312b8:	fb28f7f1 	.word	0xfb28f7f1
   312bc:	200ee747 	.word	0x200ee747
   312c0:	fb24f7f1 	.word	0xfb24f7f1
   312c4:	35fff04f 	.word	0x35fff04f
   312c8:	202ae741 	.word	0x202ae741
   312cc:	fb1ef7f1 	.word	0xfb1ef7f1
   312d0:	35fff04f 	.word	0x35fff04f
   312d4:	2009e73b 	.word	0x2009e73b
   312d8:	fb18f7f1 	.word	0xfb18f7f1
   312dc:	35fff04f 	.word	0x35fff04f
   312e0:	2073e735 	.word	0x2073e735
   312e4:	fb12f7f1 	.word	0xfb12f7f1
   312e8:	35fff04f 	.word	0x35fff04f
   312ec:	2005e72f 	.word	0x2005e72f
   312f0:	fb0cf7f1 	.word	0xfb0cf7f1
   312f4:	35fff04f 	.word	0x35fff04f
   312f8:	bf00e729 	.word	0xbf00e729
   312fc:	20024bbc 	.word	0x20024bbc
   31300:	49765443 	.word	0x49765443
   31304:	20031298 	.word	0x20031298
   31308:	2002a344 	.word	0x2002a344
   3130c:	20024b64 	.word	0x20024b64

00031310 <gnss_interface_init>:
   31310:	b5382100 	.word	0xb5382100
   31314:	4d0a4c09 	.word	0x4d0a4c09
   31318:	480a6822 	.word	0x480a6822
   3131c:	402a4b0a 	.word	0x402a4b0a
   31320:	80016022 	.word	0x80016022
   31324:	f7f86019 	.word	0xf7f86019
   31328:	b928faf7 	.word	0xb928faf7
   3132c:	402b6823 	.word	0x402b6823
   31330:	0301f043 	.word	0x0301f043
   31334:	bd386023 	.word	0xbd386023
   31338:	bd382003 	.word	0xbd382003
   3133c:	20024bbc 	.word	0x20024bbc
   31340:	ffff0000 	.word	0xffff0000
   31344:	2002a344 	.word	0x2002a344
   31348:	20024b64 	.word	0x20024b64

0003134c <gnss_interface_open>:
   3134c:	b5102801 	.word	0xb5102801
   31350:	f5b2d120 	.word	0xf5b2d120
   31354:	d11d7f01 	.word	0xd11d7f01
   31358:	d11b2902 	.word	0xd11b2902
   3135c:	68234c13 	.word	0x68234c13
   31360:	2b01b29b 	.word	0x2b01b29b
   31364:	6823d11c 	.word	0x6823d11c
   31368:	0c1b4608 	.word	0x0c1b4608
   3136c:	f043041b 	.word	0xf043041b
   31370:	22000302 	.word	0x22000302
   31374:	6023490e 	.word	0x6023490e
   31378:	fbacf7fa 	.word	0xfbacf7fa
   3137c:	60104a0d 	.word	0x60104a0d
   31380:	6823b170 	.word	0x6823b170
   31384:	f4436802 	.word	0xf4436802
   31388:	68123300 	.word	0x68123300
   3138c:	47906023 	.word	0x47906023
   31390:	bd104809 	.word	0xbd104809
   31394:	f7f12016 	.word	0xf7f12016
   31398:	f04ffab9 	.word	0xf04ffab9
   3139c:	bd1030ff 	.word	0xbd1030ff
   313a0:	f7f1200e 	.word	0xf7f1200e
   313a4:	f04ffab3 	.word	0xf04ffab3
   313a8:	bd1030ff 	.word	0xbd1030ff
   313ac:	20024bbc 	.word	0x20024bbc
   313b0:	00029b39 	.word	0x00029b39
   313b4:	20024bc0 	.word	0x20024bc0
   313b8:	49765443 	.word	0x49765443

000313bc <gnss_interface_close>:
   313bc:	4b13b530 	.word	0x4b13b530
   313c0:	4298b083 	.word	0x4298b083
   313c4:	4c12d11c 	.word	0x4c12d11c
   313c8:	b29b6823 	.word	0xb29b6823
   313cc:	d00f2b04 	.word	0xd00f2b04
   313d0:	68284d10 	.word	0x68284d10
   313d4:	f7fab118 	.word	0xf7fab118
   313d8:	2300fb9d 	.word	0x2300fb9d
   313dc:	2000602b 	.word	0x2000602b
   313e0:	0c1b6823 	.word	0x0c1b6823
   313e4:	f043041b 	.word	0xf043041b
   313e8:	60230301 	.word	0x60230301
   313ec:	bd30b003 	.word	0xbd30b003
   313f0:	22082300 	.word	0x22082300
   313f4:	f44f9300 	.word	0xf44f9300
   313f8:	f7f97101 	.word	0xf7f97101
   313fc:	e7e7fa7b 	.word	0xe7e7fa7b
   31400:	f7f12009 	.word	0xf7f12009
   31404:	f04ffa83 	.word	0xf04ffa83
   31408:	e7ef30ff 	.word	0xe7ef30ff
   3140c:	49765443 	.word	0x49765443
   31410:	20024bbc 	.word	0x20024bbc
   31414:	20024bc0 	.word	0x20024bc0

00031418 <rpc_dfu_event_handler>:
   31418:	4a08b508 	.word	0x4a08b508
   3141c:	881268c1 	.word	0x881268c1
   31420:	ebb24603 	.word	0xebb24603
   31424:	d0054f11 	.word	0xd0054f11
   31428:	b1106800 	.word	0xb1106800
   3142c:	f838f004 	.word	0xf838f004
   31430:	bd082000 	.word	0xbd082000
   31434:	20014a02 	.word	0x20014a02
   31438:	bd086013 	.word	0xbd086013
   3143c:	2002a346 	.word	0x2002a346
   31440:	20024b68 	.word	0x20024b68

00031444 <mfu_interface_init>:
   31444:	b5102300 	.word	0xb5102300
   31448:	49094808 	.word	0x49094808
   3144c:	4c0a4a09 	.word	0x4c0a4a09
   31450:	600b8003 	.word	0x600b8003
   31454:	60236013 	.word	0x60236013
   31458:	ffecf003 	.word	0xffecf003
   3145c:	2301b910 	.word	0x2301b910
   31460:	bd106023 	.word	0xbd106023
   31464:	30fff04f 	.word	0x30fff04f
   31468:	bf00bd10 	.word	0xbf00bd10
   3146c:	2002a346 	.word	0x2002a346
   31470:	20024b68 	.word	0x20024b68
   31474:	20024bcc 	.word	0x20024bcc
   31478:	20024bc4 	.word	0x20024bc4

0003147c <mfu_interface_open>:
   3147c:	b5082801 	.word	0xb5082801
   31480:	f240d10b 	.word	0xf240d10b
   31484:	429a2303 	.word	0x429a2303
   31488:	4b09d107 	.word	0x4b09d107
   3148c:	2a01681a 	.word	0x2a01681a
   31490:	2202d109 	.word	0x2202d109
   31494:	4807601a 	.word	0x4807601a
   31498:	2016bd08 	.word	0x2016bd08
   3149c:	fa36f7f1 	.word	0xfa36f7f1
   314a0:	30fff04f 	.word	0x30fff04f
   314a4:	f7f1bd08 	.word	0xf7f1bd08
   314a8:	f04ffa31 	.word	0xf04ffa31
   314ac:	bd0830ff 	.word	0xbd0830ff
   314b0:	20024bc4 	.word	0x20024bc4
   314b4:	49765432 	.word	0x49765432

000314b8 <mfu_interface_close>:
   314b8:	4c32b5f0 	.word	0x4c32b5f0
   314bc:	6823b083 	.word	0x6823b083
   314c0:	2a011e9a 	.word	0x2a011e9a
   314c4:	2b03d857 	.word	0x2b03d857
   314c8:	2301d004 	.word	0x2301d004
   314cc:	60232000 	.word	0x60232000
   314d0:	bdf0b003 	.word	0xbdf0b003
   314d4:	46682100 	.word	0x46682100
   314d8:	ffb2f003 	.word	0xffb2f003
   314dc:	28004603 	.word	0x28004603
   314e0:	2104d13d 	.word	0x2104d13d
   314e4:	98004e28 	.word	0x98004e28
   314e8:	72018832 	.word	0x72018832
   314ec:	b2923201 	.word	0xb2923201
   314f0:	f0410411 	.word	0xf0410411
   314f4:	4d250106 	.word	0x4d250106
   314f8:	710360c1 	.word	0x710360c1
   314fc:	71837143 	.word	0x71837143
   31500:	724371c3 	.word	0x724371c3
   31504:	72c37283 	.word	0x72c37283
   31508:	80322106 	.word	0x80322106
   3150c:	f003602b 	.word	0xf003602b
   31510:	b9d8ffab 	.word	0xb9d8ffab
   31514:	33fff04f 	.word	0x33fff04f
   31518:	4627ae02 	.word	0x4627ae02
   3151c:	3d04f846 	.word	0x3d04f846
   31520:	4631e004 	.word	0x4631e004
   31524:	f7f14638 	.word	0xf7f14638
   31528:	b9f0f95d 	.word	0xb9f0f95d
   3152c:	28006828 	.word	0x28006828
   31530:	6905d0f7 	.word	0x6905d0f7
   31534:	ffacf003 	.word	0xffacf003
   31538:	d0c62d00 	.word	0xd0c62d00
   3153c:	20084b14 	.word	0x20084b14
   31540:	f7f1601d 	.word	0xf7f1601d
   31544:	f04ff9e3 	.word	0xf04ff9e3
   31548:	e7c130ff 	.word	0xe7c130ff
   3154c:	68039800 	.word	0x68039800
   31550:	4618b11b 	.word	0x4618b11b
   31554:	ffa4f003 	.word	0xffa4f003
   31558:	f0039800 	.word	0xf0039800
   3155c:	200cff99 	.word	0x200cff99
   31560:	f9d4f7f1 	.word	0xf9d4f7f1
   31564:	30fff04f 	.word	0x30fff04f
   31568:	203ce7b2 	.word	0x203ce7b2
   3156c:	f9cef7f1 	.word	0xf9cef7f1
   31570:	30fff04f 	.word	0x30fff04f
   31574:	2001e7ac 	.word	0x2001e7ac
   31578:	f9c8f7f1 	.word	0xf9c8f7f1
   3157c:	30fff04f 	.word	0x30fff04f
   31580:	bf00e7a6 	.word	0xbf00e7a6
   31584:	20024bc4 	.word	0x20024bc4
   31588:	2002a346 	.word	0x2002a346
   3158c:	20024b68 	.word	0x20024b68
   31590:	20024bc8 	.word	0x20024bc8

00031594 <mfu_interface_sendto>:
   31594:	47f0e92d 	.word	0x47f0e92d
   31598:	46154e5a 	.word	0x46154e5a
   3159c:	b0826833 	.word	0xb0826833
   315a0:	2a011e9a 	.word	0x2a011e9a
   315a4:	80a7f200 	.word	0x80a7f200
   315a8:	2900460f 	.word	0x2900460f
   315ac:	809df000 	.word	0x809df000
   315b0:	f0002d00 	.word	0xf0002d00
   315b4:	2b02809a 	.word	0x2b02809a
   315b8:	d04e46e8 	.word	0xd04e46e8
   315bc:	46294640 	.word	0x46294640
   315c0:	ff3ef003 	.word	0xff3ef003
   315c4:	b1404606 	.word	0xb1404606
   315c8:	f7f1200c 	.word	0xf7f1200c
   315cc:	f04ff99f 	.word	0xf04ff99f
   315d0:	462835ff 	.word	0x462835ff
   315d4:	e8bdb002 	.word	0xe8bdb002
   315d8:	9b0087f0 	.word	0x9b0087f0
   315dc:	68184639 	.word	0x68184639
   315e0:	f00f462a 	.word	0xf00f462a
   315e4:	2104fbbd 	.word	0x2104fbbd
   315e8:	98004c47 	.word	0x98004c47
   315ec:	60458823 	.word	0x60458823
   315f0:	b29b3301 	.word	0xb29b3301
   315f4:	8023041a 	.word	0x8023041a
   315f8:	4c44430a 	.word	0x4c44430a
   315fc:	724660c2 	.word	0x724660c2
   31600:	72c67286 	.word	0x72c67286
   31604:	60267201 	.word	0x60267201
   31608:	ff2ef003 	.word	0xff2ef003
   3160c:	d1622800 	.word	0xd1622800
   31610:	33fff04f 	.word	0x33fff04f
   31614:	4f3bae02 	.word	0x4f3bae02
   31618:	3d04f846 	.word	0x3d04f846
   3161c:	4631e004 	.word	0x4631e004
   31620:	f7f14638 	.word	0xf7f14638
   31624:	b978f8df 	.word	0xb978f8df
   31628:	28006820 	.word	0x28006820
   3162c:	6904d0f7 	.word	0x6904d0f7
   31630:	ff2ef003 	.word	0xff2ef003
   31634:	d0cc2c00 	.word	0xd0cc2c00
   31638:	20084b35 	.word	0x20084b35
   3163c:	f04f601c 	.word	0xf04f601c
   31640:	f7f135ff 	.word	0xf7f135ff
   31644:	e7c4f963 	.word	0xe7c4f963
   31648:	35fff04f 	.word	0x35fff04f
   3164c:	f7f1203c 	.word	0xf7f1203c
   31650:	4628f95d 	.word	0x4628f95d
   31654:	e8bdb002 	.word	0xe8bdb002
   31658:	464087f0 	.word	0x464087f0
   3165c:	f0032100 	.word	0xf0032100
   31660:	4602feef 	.word	0x4602feef
   31664:	d1af2800 	.word	0xd1af2800
   31668:	0c08f04f 	.word	0x0c08f04f
   3166c:	48294926 	.word	0x48294926
   31670:	6804880b 	.word	0x6804880b
   31674:	98003301 	.word	0x98003301
   31678:	800bb29b 	.word	0x800bb29b
   3167c:	f043041b 	.word	0xf043041b
   31680:	61040303 	.word	0x61040303
   31684:	60c34c21 	.word	0x60c34c21
   31688:	71427102 	.word	0x71427102
   3168c:	71c27182 	.word	0x71c27182
   31690:	72827242 	.word	0x72827242
   31694:	f88072c2 	.word	0xf88072c2
   31698:	2103c008 	.word	0x2103c008
   3169c:	f0036022 	.word	0xf0036022
   316a0:	b9c0fee3 	.word	0xb9c0fee3
   316a4:	33fff04f 	.word	0x33fff04f
   316a8:	0908f10d 	.word	0x0908f10d
   316ac:	3d04f849 	.word	0x3d04f849
   316b0:	e00546b2 	.word	0xe00546b2
   316b4:	46504649 	.word	0x46504649
   316b8:	f894f7f1 	.word	0xf894f7f1
   316bc:	d1c32800 	.word	0xd1c32800
   316c0:	28006820 	.word	0x28006820
   316c4:	6904d0f6 	.word	0x6904d0f6
   316c8:	fee2f003 	.word	0xfee2f003
   316cc:	d1b32c00 	.word	0xd1b32c00
   316d0:	60332303 	.word	0x60332303
   316d4:	9800e772 	.word	0x9800e772
   316d8:	b11b6803 	.word	0xb11b6803
   316dc:	f0034618 	.word	0xf0034618
   316e0:	9800fedf 	.word	0x9800fedf
   316e4:	fed4f003 	.word	0xfed4f003
   316e8:	2016e76e 	.word	0x2016e76e
   316ec:	f90ef7f1 	.word	0xf90ef7f1
   316f0:	35fff04f 	.word	0x35fff04f
   316f4:	2001e76d 	.word	0x2001e76d
   316f8:	f908f7f1 	.word	0xf908f7f1
   316fc:	35fff04f 	.word	0x35fff04f
   31700:	bf00e767 	.word	0xbf00e767
   31704:	20024bc4 	.word	0x20024bc4
   31708:	2002a346 	.word	0x2002a346
   3170c:	20024b68 	.word	0x20024b68
   31710:	20024bc8 	.word	0x20024bc8
   31714:	20024bcc 	.word	0x20024bcc

00031718 <mfu_interface_setopt>:
   31718:	4846b5f0 	.word	0x4846b5f0
   3171c:	6800b083 	.word	0x6800b083
   31720:	28013802 	.word	0x28013802
   31724:	f240d877 	.word	0xf240d877
   31728:	42812003 	.word	0x42812003
   3172c:	3a04d16d 	.word	0x3a04d16d
   31730:	d85c2a03 	.word	0xd85c2a03
   31734:	f002e8df 	.word	0xf002e8df
   31738:	514e024b 	.word	0x514e024b
   3173c:	46252407 	.word	0x46252407
   31740:	46682100 	.word	0x46682100
   31744:	fe7cf003 	.word	0xfe7cf003
   31748:	28004603 	.word	0x28004603
   3174c:	2704d138 	.word	0x2704d138
   31750:	98004e39 	.word	0x98004e39
   31754:	46298832 	.word	0x46298832
   31758:	b2923201 	.word	0xb2923201
   3175c:	4502ea44 	.word	0x4502ea44
   31760:	60c54c36 	.word	0x60c54c36
   31764:	71437103 	.word	0x71437103
   31768:	71c37183 	.word	0x71c37183
   3176c:	72837243 	.word	0x72837243
   31770:	720772c3 	.word	0x720772c3
   31774:	60238032 	.word	0x60238032
   31778:	fe76f003 	.word	0xfe76f003
   3177c:	f04fb9b8 	.word	0xf04fb9b8
   31780:	ad0233ff 	.word	0xad0233ff
   31784:	f8454e2b 	.word	0xf8454e2b
   31788:	e0053d04 	.word	0xe0053d04
   3178c:	46304629 	.word	0x46304629
   31790:	f828f7f1 	.word	0xf828f7f1
   31794:	d1312800 	.word	0xd1312800
   31798:	28006820 	.word	0x28006820
   3179c:	6904d0f6 	.word	0x6904d0f6
   317a0:	fe76f003 	.word	0xfe76f003
   317a4:	d13c2c00 	.word	0xd13c2c00
   317a8:	b0034620 	.word	0xb0034620
   317ac:	9800bdf0 	.word	0x9800bdf0
   317b0:	b11b6803 	.word	0xb11b6803
   317b4:	f0034618 	.word	0xf0034618
   317b8:	9800fe73 	.word	0x9800fe73
   317bc:	fe68f003 	.word	0xfe68f003
   317c0:	f7f1200c 	.word	0xf7f1200c
   317c4:	f04ff8a3 	.word	0xf04ff8a3
   317c8:	b00330ff 	.word	0xb00330ff
   317cc:	2405bdf0 	.word	0x2405bdf0
   317d0:	e7b54625 	.word	0xe7b54625
   317d4:	46252408 	.word	0x46252408
   317d8:	b1b3e7b2 	.word	0xb1b3e7b2
   317dc:	2a049a08 	.word	0x2a049a08
   317e0:	2000d113 	.word	0x2000d113
   317e4:	4b16681a 	.word	0x4b16681a
   317e8:	b003601a 	.word	0xb003601a
   317ec:	202abdf0 	.word	0x202abdf0
   317f0:	f88cf7f1 	.word	0xf88cf7f1
   317f4:	30fff04f 	.word	0x30fff04f
   317f8:	bdf0b003 	.word	0xbdf0b003
   317fc:	f7f1203c 	.word	0xf7f1203c
   31800:	f04ff885 	.word	0xf04ff885
   31804:	b00330ff 	.word	0xb00330ff
   31808:	2016bdf0 	.word	0x2016bdf0
   3180c:	f87ef7f1 	.word	0xf87ef7f1
   31810:	30fff04f 	.word	0x30fff04f
   31814:	2001e7c9 	.word	0x2001e7c9
   31818:	f878f7f1 	.word	0xf878f7f1
   3181c:	30fff04f 	.word	0x30fff04f
   31820:	4b08e7c3 	.word	0x4b08e7c3
   31824:	601c2008 	.word	0x601c2008
   31828:	f870f7f1 	.word	0xf870f7f1
   3182c:	30fff04f 	.word	0x30fff04f
   31830:	bf00e7bb 	.word	0xbf00e7bb
   31834:	20024bc4 	.word	0x20024bc4
   31838:	2002a346 	.word	0x2002a346
   3183c:	20024b68 	.word	0x20024b68
   31840:	20024bcc 	.word	0x20024bcc
   31844:	20024bc8 	.word	0x20024bc8

00031848 <mfu_interface_getopt>:
   31848:	2003f240 	.word	0x2003f240
   3184c:	41f0e92d 	.word	0x41f0e92d
   31850:	b0824281 	.word	0xb0824281
   31854:	f0409e08 	.word	0xf0409e08
   31858:	461d80ae 	.word	0x461d80ae
   3185c:	f0002b00 	.word	0xf0002b00
   31860:	2e0080aa 	.word	0x2e0080aa
   31864:	80a7f000 	.word	0x80a7f000
   31868:	681b4b5e 	.word	0x681b4b5e
   3186c:	2b013b02 	.word	0x2b013b02
   31870:	80a7f200 	.word	0x80a7f200
   31874:	2a133a01 	.word	0x2a133a01
   31878:	e8dfd879 	.word	0xe8dfd879
   3187c:	5f17f002 	.word	0x5f17f002
   31880:	78787878 	.word	0x78787878
   31884:	78787872 	.word	0x78787872
   31888:	78787878 	.word	0x78787878
   3188c:	78787878 	.word	0x78787878
   31890:	68330a78 	.word	0x68330a78
   31894:	f0402b04 	.word	0xf0402b04
   31898:	2200808e 	.word	0x2200808e
   3189c:	4b524610 	.word	0x4b524610
   318a0:	601a6819 	.word	0x601a6819
   318a4:	b0026029 	.word	0xb0026029
   318a8:	81f0e8bd 	.word	0x81f0e8bd
   318ac:	2b246833 	.word	0x2b246833
   318b0:	8081f040 	.word	0x8081f040
   318b4:	46a02401 	.word	0x46a02401
   318b8:	46682100 	.word	0x46682100
   318bc:	fdc0f003 	.word	0xfdc0f003
   318c0:	d1462800 	.word	0xd1462800
   318c4:	9b004949 	.word	0x9b004949
   318c8:	f1b8880a 	.word	0xf1b8880a
   318cc:	f1020f03 	.word	0xf1020f03
   318d0:	b2920201 	.word	0xb2920201
   318d4:	4402ea44 	.word	0x4402ea44
   318d8:	800a7118 	.word	0x800a7118
   318dc:	715860dc 	.word	0x715860dc
   318e0:	71d87198 	.word	0x71d87198
   318e4:	2104d04b 	.word	0x2104d04b
   318e8:	4f412200 	.word	0x4f412200
   318ec:	46186099 	.word	0x46186099
   318f0:	603a4641 	.word	0x603a4641
   318f4:	fdb8f003 	.word	0xfdb8f003
   318f8:	d14d2800 	.word	0xd14d2800
   318fc:	33fff04f 	.word	0x33fff04f
   31900:	f844ac02 	.word	0xf844ac02
   31904:	f8df3d04 	.word	0xf8df3d04
   31908:	e00580dc 	.word	0xe00580dc
   3190c:	46404621 	.word	0x46404621
   31910:	ff68f7f0 	.word	0xff68f7f0
   31914:	d1372800 	.word	0xd1372800
   31918:	29006839 	.word	0x29006839
   3191c:	690cd0f6 	.word	0x690cd0f6
   31920:	d1542c00 	.word	0xd1542c00
   31924:	31146832 	.word	0x31146832
   31928:	f00f4628 	.word	0xf00f4628
   3192c:	6838fa19 	.word	0x6838fa19
   31930:	fdaef003 	.word	0xfdaef003
   31934:	b0024620 	.word	0xb0024620
   31938:	81f0e8bd 	.word	0x81f0e8bd
   3193c:	2b046833 	.word	0x2b046833
   31940:	2402d139 	.word	0x2402d139
   31944:	46682100 	.word	0x46682100
   31948:	f00346a0 	.word	0xf00346a0
   3194c:	2800fd79 	.word	0x2800fd79
   31950:	200cd0b8 	.word	0x200cd0b8
   31954:	ffdaf7f0 	.word	0xffdaf7f0
   31958:	30fff04f 	.word	0x30fff04f
   3195c:	e8bdb002 	.word	0xe8bdb002
   31960:	683381f0 	.word	0x683381f0
   31964:	d1262b04 	.word	0xd1262b04
   31968:	46a02409 	.word	0x46a02409
   3196c:	202ae7a4 	.word	0x202ae7a4
   31970:	ffccf7f0 	.word	0xffccf7f0
   31974:	30fff04f 	.word	0x30fff04f
   31978:	e8bdb002 	.word	0xe8bdb002
   3197c:	4a1d81f0 	.word	0x4a1d81f0
   31980:	68122108 	.word	0x68122108
   31984:	e7af611a 	.word	0xe7af611a
   31988:	f7f0203c 	.word	0xf7f0203c
   3198c:	f04fffbf 	.word	0xf04fffbf
   31990:	b00230ff 	.word	0xb00230ff
   31994:	81f0e8bd 	.word	0x81f0e8bd
   31998:	68039800 	.word	0x68039800
   3199c:	4618b11b 	.word	0x4618b11b
   319a0:	fd7ef003 	.word	0xfd7ef003
   319a4:	f0039800 	.word	0xf0039800
   319a8:	200cfd73 	.word	0x200cfd73
   319ac:	ffaef7f0 	.word	0xffaef7f0
   319b0:	30fff04f 	.word	0x30fff04f
   319b4:	2016e7d2 	.word	0x2016e7d2
   319b8:	ffa8f7f0 	.word	0xffa8f7f0
   319bc:	30fff04f 	.word	0x30fff04f
   319c0:	2001e771 	.word	0x2001e771
   319c4:	ffa2f7f0 	.word	0xffa2f7f0
   319c8:	30fff04f 	.word	0x30fff04f
   319cc:	4b06e76b 	.word	0x4b06e76b
   319d0:	601c2008 	.word	0x601c2008
   319d4:	ff9af7f0 	.word	0xff9af7f0
   319d8:	f0036838 	.word	0xf0036838
   319dc:	f04ffd59 	.word	0xf04ffd59
   319e0:	e76030ff 	.word	0xe76030ff
   319e4:	20024bc4 	.word	0x20024bc4
   319e8:	20024bc8 	.word	0x20024bc8
   319ec:	2002a346 	.word	0x2002a346
   319f0:	20024b68 	.word	0x20024b68
   319f4:	20024bcc 	.word	0x20024bcc

000319f8 <unimplemented_method>:
   319f8:	b508b40f 	.word	0xb508b40f
   319fc:	f7f0202d 	.word	0xf7f0202d
   31a00:	e8bdff85 	.word	0xe8bdff85
   31a04:	f04f4008 	.word	0xf04f4008
   31a08:	b00430ff 	.word	0xb00430ff
   31a0c:	bf004770 	.word	0xbf004770

00031a10 <bsd_platform_init>:
   31a10:	b093b5f0 	.word	0xb093b5f0
   31a14:	ff7cf003 	.word	0xff7cf003
   31a18:	d1522800 	.word	0xd1522800
   31a1c:	a801492b 	.word	0xa801492b
   31a20:	ffeaf003 	.word	0xffeaf003
   31a24:	d14c2800 	.word	0xd14c2800
   31a28:	f87af7f1 	.word	0xf87af7f1
   31a2c:	f82ef003 	.word	0xf82ef003
   31a30:	d1462800 	.word	0xd1462800
   31a34:	f44f2320 	.word	0xf44f2320
   31a38:	22084180 	.word	0x22084180
   31a3c:	5c40f44f 	.word	0x5c40f44f
   31a40:	4e244f23 	.word	0x4e244f23
   31a44:	93059303 	.word	0x93059303
   31a48:	4d239307 	.word	0x4d239307
   31a4c:	910d9109 	.word	0x910d9109
   31a50:	49234c22 	.word	0x49234c22
   31a54:	e9cd4b23 	.word	0xe9cd4b23
   31a58:	eb0d0010 	.word	0xeb0d0010
   31a5c:	f8cd0002 	.word	0xf8cd0002
   31a60:	e9cdc02c 	.word	0xe9cdc02c
   31a64:	9702220e 	.word	0x9702220e
   31a68:	95069604 	.word	0x95069604
   31a6c:	910a9408 	.word	0x910a9408
   31a70:	f7f8930c 	.word	0xf7f8930c
   31a74:	b108fdc9 	.word	0xb108fdc9
   31a78:	bdf0b013 	.word	0xbdf0b013
   31a7c:	fd22f7fc 	.word	0xfd22f7fc
   31a80:	f7f8b9f8 	.word	0xf7f8b9f8
   31a84:	b9e0f8b9 	.word	0xb9e0f8b9
   31a88:	fff8f7fc 	.word	0xfff8f7fc
   31a8c:	f7fab9c8 	.word	0xf7fab9c8
   31a90:	b9b0f8fd 	.word	0xb9b0f8fd
   31a94:	fcd6f7ff 	.word	0xfcd6f7ff
   31a98:	f7f7b998 	.word	0xf7f7b998
   31a9c:	b980feaf 	.word	0xb980feaf
   31aa0:	f8f2f000 	.word	0xf8f2f000
   31aa4:	f005b968 	.word	0xf005b968
   31aa8:	b950f929 	.word	0xb950f929
   31aac:	fc30f7ff 	.word	0xfc30f7ff
   31ab0:	f7f8b938 	.word	0xf7f8b938
   31ab4:	3000faa5 	.word	0x3000faa5
   31ab8:	2001bf18 	.word	0x2001bf18
   31abc:	b0134240 	.word	0xb0134240
   31ac0:	f04fbdf0 	.word	0xf04fbdf0
   31ac4:	b01330ff 	.word	0xb01330ff
   31ac8:	bf00bdf0 	.word	0xbf00bdf0
   31acc:	00043200 	.word	0x00043200
   31ad0:	20010000 	.word	0x20010000
   31ad4:	20010040 	.word	0x20010040
   31ad8:	20010020 	.word	0x20010020
   31adc:	20017060 	.word	0x20017060
   31ae0:	20010060 	.word	0x20010060
   31ae4:	20013060 	.word	0x20013060

00031ae8 <bsd_platform_shutdown>:
   31ae8:	f000b508 	.word	0xf000b508
   31aec:	f7f7f913 	.word	0xf7f7f913
   31af0:	f7fcff07 	.word	0xf7fcff07
   31af4:	f7f8fe8f 	.word	0xf7f8fe8f
   31af8:	2000fdef 	.word	0x2000fdef
   31afc:	bf00bd08 	.word	0xbf00bd08

00031b00 <bsd_platform_af_method_table_get>:
   31b00:	d02a2805 	.word	0xd02a2805
   31b04:	d914b508 	.word	0xd914b508
   31b08:	d016280a 	.word	0xd016280a
   31b0c:	d10b2866 	.word	0xd10b2866
   31b10:	2302f240 	.word	0x2302f240
   31b14:	d032429a 	.word	0xd032429a
   31b18:	2305f240 	.word	0x2305f240
   31b1c:	d032429a 	.word	0xd032429a
   31b20:	2301f240 	.word	0x2301f240
   31b24:	d02c429a 	.word	0xd02c429a
   31b28:	f7f02016 	.word	0xf7f02016
   31b2c:	2000feef 	.word	0x2000feef
   31b30:	2801bd08 	.word	0x2801bd08
   31b34:	2802d016 	.word	0x2802d016
   31b38:	f5a2d1f6 	.word	0xf5a2d1f6
   31b3c:	2a0a7282 	.word	0x2a0a7282
   31b40:	2301d819 	.word	0x2301d819
   31b44:	4103f240 	.word	0x4103f240
   31b48:	fa034810 	.word	0xfa034810
   31b4c:	420af202 	.word	0x420af202
   31b50:	0328f100 	.word	0x0328f100
   31b54:	4618bf18 	.word	0x4618bf18
   31b58:	2903bd08 	.word	0x2903bd08
   31b5c:	bf18480c 	.word	0xbf18480c
   31b60:	47702000 	.word	0x47702000
   31b64:	2303f240 	.word	0x2303f240
   31b68:	d006429a 	.word	0xd006429a
   31b6c:	7f01f5b2 	.word	0x7f01f5b2
   31b70:	4808d1da 	.word	0x4808d1da
   31b74:	4805bd08 	.word	0x4805bd08
   31b78:	4807bd08 	.word	0x4807bd08
   31b7c:	4807bd08 	.word	0x4807bd08
   31b80:	4807bd08 	.word	0x4807bd08
   31b84:	4807bd08 	.word	0x4807bd08
   31b88:	bf00bd08 	.word	0xbf00bd08
   31b8c:	000430cc 	.word	0x000430cc
   31b90:	000431bc 	.word	0x000431bc
   31b94:	0004316c 	.word	0x0004316c
   31b98:	0004311c 	.word	0x0004311c
   31b9c:	00043144 	.word	0x00043144
   31ba0:	000430a4 	.word	0x000430a4
   31ba4:	00043194 	.word	0x00043194

00031ba8 <bsd_platform_fd_method_table_get>:
   31ba8:	4605b538 	.word	0x4605b538
   31bac:	fda6f7fc 	.word	0xfda6f7fc
   31bb0:	b9504604 	.word	0xb9504604
   31bb4:	43ab4b2a 	.word	0x43ab4b2a
   31bb8:	4b2ad032 	.word	0x4b2ad032
   31bbc:	d04343ab 	.word	0xd04343ab
   31bc0:	43ab4b29 	.word	0x43ab4b29
   31bc4:	4829d146 	.word	0x4829d146
   31bc8:	68c3bd38 	.word	0x68c3bd38
   31bcc:	2b056942 	.word	0x2b056942
   31bd0:	d911d034 	.word	0xd911d034
   31bd4:	d0132b0a 	.word	0xd0132b0a
   31bd8:	d12a2b66 	.word	0xd12a2b66
   31bdc:	2302f240 	.word	0x2302f240
   31be0:	d031429a 	.word	0xd031429a
   31be4:	2305f240 	.word	0x2305f240
   31be8:	d031429a 	.word	0xd031429a
   31bec:	2301f240 	.word	0x2301f240
   31bf0:	d11e429a 	.word	0xd11e429a
   31bf4:	bd38481e 	.word	0xbd38481e
   31bf8:	d0132b01 	.word	0xd0132b01
   31bfc:	d1182b02 	.word	0xd1182b02
   31c00:	7282f5a2 	.word	0x7282f5a2
   31c04:	d8212a0a 	.word	0xd8212a0a
   31c08:	f2402301 	.word	0xf2402301
   31c0c:	48194103 	.word	0x48194103
   31c10:	f202fa03 	.word	0xf202fa03
   31c14:	f100420a 	.word	0xf100420a
   31c18:	bf180428 	.word	0xbf180428
   31c1c:	bd384620 	.word	0xbd384620
   31c20:	bd384815 	.word	0xbd384815
   31c24:	2303f240 	.word	0x2303f240
   31c28:	d0f9429a 	.word	0xd0f9429a
   31c2c:	7f01f5b2 	.word	0x7f01f5b2
   31c30:	2016d0c9 	.word	0x2016d0c9
   31c34:	fe6af7f0 	.word	0xfe6af7f0
   31c38:	bd382000 	.word	0xbd382000
   31c3c:	480f6903 	.word	0x480f6903
   31c40:	bf182b03 	.word	0xbf182b03
   31c44:	bd382000 	.word	0xbd382000
   31c48:	bd38480d 	.word	0xbd38480d
   31c4c:	bd384809 	.word	0xbd384809
   31c50:	bd38480c 	.word	0xbd38480c
   31c54:	f7f02009 	.word	0xf7f02009
   31c58:	4620fe59 	.word	0x4620fe59
   31c5c:	bf00bd38 	.word	0xbf00bd38
   31c60:	49765432 	.word	0x49765432
   31c64:	789a0000 	.word	0x789a0000
   31c68:	49765443 	.word	0x49765443
   31c6c:	0004316c 	.word	0x0004316c
   31c70:	000430a4 	.word	0x000430a4
   31c74:	000430cc 	.word	0x000430cc
   31c78:	0004311c 	.word	0x0004311c
   31c7c:	000431bc 	.word	0x000431bc
   31c80:	00043144 	.word	0x00043144
   31c84:	00043194 	.word	0x00043194

00031c88 <nrf_inbuilt_key_init>:
   31c88:	b086b570 	.word	0xb086b570
   31c8c:	a802491d 	.word	0xa802491d
   31c90:	feb2f003 	.word	0xfeb2f003
   31c94:	4601bb00 	.word	0x4601bb00
   31c98:	f2404604 	.word	0xf2404604
   31c9c:	20662201 	.word	0x20662201
   31ca0:	ffacf7f7 	.word	0xffacf7f7
   31ca4:	28004e18 	.word	0x28004e18
   31ca8:	60304605 	.word	0x60304605
   31cac:	4817db10 	.word	0x4817db10
   31cb0:	f968f7e8 	.word	0xf968f7e8
   31cb4:	46024623 	.word	0x46024623
   31cb8:	46284914 	.word	0x46284914
   31cbc:	94009401 	.word	0x94009401
   31cc0:	ff46f7f7 	.word	0xff46f7f7
   31cc4:	48114605 	.word	0x48114605
   31cc8:	f95cf7e8 	.word	0xf95cf7e8
   31ccc:	d00742a8 	.word	0xd00742a8
   31cd0:	46202405 	.word	0x46202405
   31cd4:	bd70b006 	.word	0xbd70b006
   31cd8:	46202469 	.word	0x46202469
   31cdc:	bd70b006 	.word	0xbd70b006
   31ce0:	e9cd6830 	.word	0xe9cd6830
   31ce4:	a9034400 	.word	0xa9034400
   31ce8:	220a4623 	.word	0x220a4623
   31cec:	f818f7f8 	.word	0xf818f7f8
   31cf0:	dded2801 	.word	0xdded2801
   31cf4:	2202a803 	.word	0x2202a803
   31cf8:	f00f4905 	.word	0xf00f4905
   31cfc:	2800fa0e 	.word	0x2800fa0e
   31d00:	e7e5d0e7 	.word	0xe7e5d0e7
   31d04:	200312a0 	.word	0x200312a0
   31d08:	2003129c 	.word	0x2003129c
   31d0c:	00043214 	.word	0x00043214
   31d10:	00042df4 	.word	0x00042df4

00031d14 <nrf_inbuilt_key_deinit>:
   31d14:	4c05b510 	.word	0x4c05b510
   31d18:	28006820 	.word	0x28006820
   31d1c:	f7f7db01 	.word	0xf7f7db01
   31d20:	f04fffb7 	.word	0xf04fffb7
   31d24:	200033ff 	.word	0x200033ff
   31d28:	bd106023 	.word	0xbd106023
   31d2c:	2003129c 	.word	0x2003129c

00031d30 <symbol_0005436>:
   31d30:	460a4b02 	.word	0x460a4b02
   31d34:	2100681b 	.word	0x2100681b
   31d38:	bf004718 	.word	0xbf004718
   31d3c:	200312b4 	.word	0x200312b4

00031d40 <mpi_mul_hlp>:
   31d40:	e92d280f 	.word	0xe92d280f
   31d44:	46864ff0 	.word	0x46864ff0
   31d48:	82e0f240 	.word	0x82e0f240
   31d4c:	0800f04f 	.word	0x0800f04f
   31d50:	f1014684 	.word	0xf1014684
   31d54:	f1020440 	.word	0xf1020440
   31d58:	f8540040 	.word	0xf8540040
   31d5c:	f8506c40 	.word	0xf8506c40
   31d60:	fba35c40 	.word	0xfba35c40
   31d64:	eb186706 	.word	0xeb186706
   31d68:	bf2c0806 	.word	0xbf2c0806
   31d6c:	0901f04f 	.word	0x0901f04f
   31d70:	0900f04f 	.word	0x0900f04f
   31d74:	0508eb15 	.word	0x0508eb15
   31d78:	f04f444f 	.word	0xf04f444f
   31d7c:	bf280900 	.word	0xbf280900
   31d80:	0901f04f 	.word	0x0901f04f
   31d84:	5c40f840 	.word	0x5c40f840
   31d88:	6c3cf854 	.word	0x6c3cf854
   31d8c:	fba344b9 	.word	0xfba344b9
   31d90:	eb19ab06 	.word	0xeb19ab06
   31d94:	bf2c090a 	.word	0xbf2c090a
   31d98:	0801f04f 	.word	0x0801f04f
   31d9c:	0800f04f 	.word	0x0800f04f
   31da0:	6c3cf850 	.word	0x6c3cf850
   31da4:	050beb08 	.word	0x050beb08
   31da8:	0609eb16 	.word	0x0609eb16
   31dac:	0800f04f 	.word	0x0800f04f
   31db0:	f04fbf28 	.word	0xf04fbf28
   31db4:	f8400801 	.word	0xf8400801
   31db8:	f8546c3c 	.word	0xf8546c3c
   31dbc:	44a86c38 	.word	0x44a86c38
   31dc0:	6706fba3 	.word	0x6706fba3
   31dc4:	0806eb18 	.word	0x0806eb18
   31dc8:	f04fbf2c 	.word	0xf04fbf2c
   31dcc:	f04f0901 	.word	0xf04f0901
   31dd0:	f8500900 	.word	0xf8500900
   31dd4:	444f5c38 	.word	0x444f5c38
   31dd8:	0508eb15 	.word	0x0508eb15
   31ddc:	0900f04f 	.word	0x0900f04f
   31de0:	f04fbf28 	.word	0xf04fbf28
   31de4:	f8400901 	.word	0xf8400901
   31de8:	f8545c38 	.word	0xf8545c38
   31dec:	44b96c34 	.word	0x44b96c34
   31df0:	ab06fba3 	.word	0xab06fba3
   31df4:	090aeb19 	.word	0x090aeb19
   31df8:	f04fbf2c 	.word	0xf04fbf2c
   31dfc:	f04f0801 	.word	0xf04f0801
   31e00:	f8500800 	.word	0xf8500800
   31e04:	eb086c34 	.word	0xeb086c34
   31e08:	eb16050b 	.word	0xeb16050b
   31e0c:	f04f0609 	.word	0xf04f0609
   31e10:	bf280800 	.word	0xbf280800
   31e14:	0801f04f 	.word	0x0801f04f
   31e18:	6c34f840 	.word	0x6c34f840
   31e1c:	6c30f854 	.word	0x6c30f854
   31e20:	fba344a8 	.word	0xfba344a8
   31e24:	eb186706 	.word	0xeb186706
   31e28:	bf2c0806 	.word	0xbf2c0806
   31e2c:	0901f04f 	.word	0x0901f04f
   31e30:	0900f04f 	.word	0x0900f04f
   31e34:	5c30f850 	.word	0x5c30f850
   31e38:	eb15444f 	.word	0xeb15444f
   31e3c:	f04f0508 	.word	0xf04f0508
   31e40:	bf280900 	.word	0xbf280900
   31e44:	0901f04f 	.word	0x0901f04f
   31e48:	5c30f840 	.word	0x5c30f840
   31e4c:	6c2cf854 	.word	0x6c2cf854
   31e50:	fba344b9 	.word	0xfba344b9
   31e54:	eb19ab06 	.word	0xeb19ab06
   31e58:	bf2c090a 	.word	0xbf2c090a
   31e5c:	0801f04f 	.word	0x0801f04f
   31e60:	0800f04f 	.word	0x0800f04f
   31e64:	6c2cf850 	.word	0x6c2cf850
   31e68:	050beb08 	.word	0x050beb08
   31e6c:	0609eb16 	.word	0x0609eb16
   31e70:	0800f04f 	.word	0x0800f04f
   31e74:	f04fbf28 	.word	0xf04fbf28
   31e78:	f8400801 	.word	0xf8400801
   31e7c:	f8546c2c 	.word	0xf8546c2c
   31e80:	44a86c28 	.word	0x44a86c28
   31e84:	6706fba3 	.word	0x6706fba3
   31e88:	0806eb18 	.word	0x0806eb18
   31e8c:	f04fbf2c 	.word	0xf04fbf2c
   31e90:	f04f0901 	.word	0xf04f0901
   31e94:	f8500900 	.word	0xf8500900
   31e98:	444f5c28 	.word	0x444f5c28
   31e9c:	0508eb15 	.word	0x0508eb15
   31ea0:	0900f04f 	.word	0x0900f04f
   31ea4:	f04fbf28 	.word	0xf04fbf28
   31ea8:	f8400901 	.word	0xf8400901
   31eac:	f8545c28 	.word	0xf8545c28
   31eb0:	44b96c24 	.word	0x44b96c24
   31eb4:	ab06fba3 	.word	0xab06fba3
   31eb8:	090aeb19 	.word	0x090aeb19
   31ebc:	f04fbf2c 	.word	0xf04fbf2c
   31ec0:	f04f0801 	.word	0xf04f0801
   31ec4:	f8500800 	.word	0xf8500800
   31ec8:	eb086c24 	.word	0xeb086c24
   31ecc:	eb16050b 	.word	0xeb16050b
   31ed0:	f04f0609 	.word	0xf04f0609
   31ed4:	bf280800 	.word	0xbf280800
   31ed8:	0801f04f 	.word	0x0801f04f
   31edc:	6c24f840 	.word	0x6c24f840
   31ee0:	6c20f854 	.word	0x6c20f854
   31ee4:	fba344a8 	.word	0xfba344a8
   31ee8:	eb186706 	.word	0xeb186706
   31eec:	bf2c0806 	.word	0xbf2c0806
   31ef0:	0901f04f 	.word	0x0901f04f
   31ef4:	0900f04f 	.word	0x0900f04f
   31ef8:	5c20f850 	.word	0x5c20f850
   31efc:	eb15444f 	.word	0xeb15444f
   31f00:	f04f0508 	.word	0xf04f0508
   31f04:	bf280900 	.word	0xbf280900
   31f08:	0901f04f 	.word	0x0901f04f
   31f0c:	5c20f840 	.word	0x5c20f840
   31f10:	6c1cf854 	.word	0x6c1cf854
   31f14:	fba344b9 	.word	0xfba344b9
   31f18:	eb19ab06 	.word	0xeb19ab06
   31f1c:	bf2c090a 	.word	0xbf2c090a
   31f20:	0801f04f 	.word	0x0801f04f
   31f24:	0800f04f 	.word	0x0800f04f
   31f28:	6c1cf850 	.word	0x6c1cf850
   31f2c:	050beb08 	.word	0x050beb08
   31f30:	0609eb16 	.word	0x0609eb16
   31f34:	0800f04f 	.word	0x0800f04f
   31f38:	f04fbf28 	.word	0xf04fbf28
   31f3c:	f8400801 	.word	0xf8400801
   31f40:	f8546c1c 	.word	0xf8546c1c
   31f44:	44a86c18 	.word	0x44a86c18
   31f48:	6706fba3 	.word	0x6706fba3
   31f4c:	0806eb18 	.word	0x0806eb18
   31f50:	f04fbf2c 	.word	0xf04fbf2c
   31f54:	f04f0901 	.word	0xf04f0901
   31f58:	f8500900 	.word	0xf8500900
   31f5c:	444f5c18 	.word	0x444f5c18
   31f60:	0508eb15 	.word	0x0508eb15
   31f64:	0900f04f 	.word	0x0900f04f
   31f68:	f04fbf28 	.word	0xf04fbf28
   31f6c:	f8400901 	.word	0xf8400901
   31f70:	f8545c18 	.word	0xf8545c18
   31f74:	44b96c14 	.word	0x44b96c14
   31f78:	ab06fba3 	.word	0xab06fba3
   31f7c:	090aeb19 	.word	0x090aeb19
   31f80:	f04fbf2c 	.word	0xf04fbf2c
   31f84:	f04f0801 	.word	0xf04f0801
   31f88:	f8500800 	.word	0xf8500800
   31f8c:	eb086c14 	.word	0xeb086c14
   31f90:	eb16050b 	.word	0xeb16050b
   31f94:	f04f0609 	.word	0xf04f0609
   31f98:	bf280800 	.word	0xbf280800
   31f9c:	0801f04f 	.word	0x0801f04f
   31fa0:	6c14f840 	.word	0x6c14f840
   31fa4:	6c10f854 	.word	0x6c10f854
   31fa8:	fba344a8 	.word	0xfba344a8
   31fac:	eb186706 	.word	0xeb186706
   31fb0:	bf2c0806 	.word	0xbf2c0806
   31fb4:	0901f04f 	.word	0x0901f04f
   31fb8:	0900f04f 	.word	0x0900f04f
   31fbc:	5c10f850 	.word	0x5c10f850
   31fc0:	eb15444f 	.word	0xeb15444f
   31fc4:	f04f0508 	.word	0xf04f0508
   31fc8:	bf280900 	.word	0xbf280900
   31fcc:	0901f04f 	.word	0x0901f04f
   31fd0:	5c10f840 	.word	0x5c10f840
   31fd4:	6c0cf854 	.word	0x6c0cf854
   31fd8:	fba344b9 	.word	0xfba344b9
   31fdc:	eb19ab06 	.word	0xeb19ab06
   31fe0:	bf2c090a 	.word	0xbf2c090a
   31fe4:	0801f04f 	.word	0x0801f04f
   31fe8:	0800f04f 	.word	0x0800f04f
   31fec:	6c0cf850 	.word	0x6c0cf850
   31ff0:	050beb08 	.word	0x050beb08
   31ff4:	0609eb16 	.word	0x0609eb16
   31ff8:	0800f04f 	.word	0x0800f04f
   31ffc:	f04fbf28 	.word	0xf04fbf28
   32000:	f8400801 	.word	0xf8400801
   32004:	f8546c0c 	.word	0xf8546c0c
   32008:	44a86c08 	.word	0x44a86c08
   3200c:	6706fba3 	.word	0x6706fba3
   32010:	0806eb18 	.word	0x0806eb18
   32014:	f04fbf2c 	.word	0xf04fbf2c
   32018:	f04f0901 	.word	0xf04f0901
   3201c:	f8500900 	.word	0xf8500900
   32020:	444f5c08 	.word	0x444f5c08
   32024:	0508eb15 	.word	0x0508eb15
   32028:	0900f04f 	.word	0x0900f04f
   3202c:	f04fbf28 	.word	0xf04fbf28
   32030:	f8400901 	.word	0xf8400901
   32034:	f8545c08 	.word	0xf8545c08
   32038:	44b96c04 	.word	0x44b96c04
   3203c:	ab06fba3 	.word	0xab06fba3
   32040:	090aeb19 	.word	0x090aeb19
   32044:	f04fbf2c 	.word	0xf04fbf2c
   32048:	f04f0801 	.word	0xf04f0801
   3204c:	f8500800 	.word	0xf8500800
   32050:	eb086c04 	.word	0xeb086c04
   32054:	eb16050b 	.word	0xeb16050b
   32058:	f04f0609 	.word	0xf04f0609
   3205c:	bf280800 	.word	0xbf280800
   32060:	0801f04f 	.word	0x0801f04f
   32064:	0c10f1ac 	.word	0x0c10f1ac
   32068:	0f0ff1bc 	.word	0x0f0ff1bc
   3206c:	6c04f840 	.word	0x6c04f840
   32070:	f10444a8 	.word	0xf10444a8
   32074:	f1000440 	.word	0xf1000440
   32078:	f63f0040 	.word	0xf63f0040
   3207c:	f1aeae6e 	.word	0xf1aeae6e
   32080:	09000010 	.word	0x09000010
   32084:	01803001 	.word	0x01803001
   32088:	44024401 	.word	0x44024401
   3208c:	000ff00e 	.word	0x000ff00e
   32090:	68172807 	.word	0x68172807
   32094:	8092f240 	.word	0x8092f240
   32098:	6856680c 	.word	0x6856680c
   3209c:	9a04fba3 	.word	0x9a04fba3
   320a0:	0809eb18 	.word	0x0809eb18
   320a4:	f04fbf2c 	.word	0xf04fbf2c
   320a8:	f04f0c01 	.word	0xf04f0c01
   320ac:	eb170c00 	.word	0xeb170c00
   320b0:	bf2c0708 	.word	0xbf2c0708
   320b4:	24002401 	.word	0x24002401
   320b8:	684f6017 	.word	0x684f6017
   320bc:	050ceb0a 	.word	0x050ceb0a
   320c0:	8907fba3 	.word	0x8907fba3
   320c4:	eb14442c 	.word	0xeb14442c
   320c8:	bf2c0408 	.word	0xbf2c0408
   320cc:	25002501 	.word	0x25002501
   320d0:	eb0519a6 	.word	0xeb0519a6
   320d4:	f04f0709 	.word	0xf04f0709
   320d8:	bf280500 	.word	0xbf280500
   320dc:	60562501 	.word	0x60562501
   320e0:	443d688e 	.word	0x443d688e
   320e4:	7806fba3 	.word	0x7806fba3
   320e8:	bf2c19ed 	.word	0xbf2c19ed
   320ec:	24002401 	.word	0x24002401
   320f0:	eb086896 	.word	0xeb086896
   320f4:	19ad0704 	.word	0x19ad0704
   320f8:	0400f04f 	.word	0x0400f04f
   320fc:	2401bf28 	.word	0x2401bf28
   32100:	68ce6095 	.word	0x68ce6095
   32104:	fba3443c 	.word	0xfba3443c
   32108:	19e47806 	.word	0x19e47806
   3210c:	2501bf2c 	.word	0x2501bf2c
   32110:	68d62500 	.word	0x68d62500
   32114:	0705eb08 	.word	0x0705eb08
   32118:	f04f19a4 	.word	0xf04f19a4
   3211c:	bf280500 	.word	0xbf280500
   32120:	60d42501 	.word	0x60d42501
   32124:	443d690e 	.word	0x443d690e
   32128:	7806fba3 	.word	0x7806fba3
   3212c:	bf2c19ed 	.word	0xbf2c19ed
   32130:	24002401 	.word	0x24002401
   32134:	eb086916 	.word	0xeb086916
   32138:	19ad0704 	.word	0x19ad0704
   3213c:	0400f04f 	.word	0x0400f04f
   32140:	2401bf28 	.word	0x2401bf28
   32144:	694e6115 	.word	0x694e6115
   32148:	fba3443c 	.word	0xfba3443c
   3214c:	19e47806 	.word	0x19e47806
   32150:	2501bf2c 	.word	0x2501bf2c
   32154:	69562500 	.word	0x69562500
   32158:	0705eb08 	.word	0x0705eb08
   3215c:	f04f19a4 	.word	0xf04f19a4
   32160:	bf280500 	.word	0xbf280500
   32164:	61542501 	.word	0x61542501
   32168:	443d698e 	.word	0x443d698e
   3216c:	7806fba3 	.word	0x7806fba3
   32170:	bf2c19ed 	.word	0xbf2c19ed
   32174:	24002401 	.word	0x24002401
   32178:	eb086996 	.word	0xeb086996
   3217c:	19ad0704 	.word	0x19ad0704
   32180:	0400f04f 	.word	0x0400f04f
   32184:	2401bf28 	.word	0x2401bf28
   32188:	69ce6195 	.word	0x69ce6195
   3218c:	fba3443c 	.word	0xfba3443c
   32190:	eb149a06 	.word	0xeb149a06
   32194:	bf2c0409 	.word	0xbf2c0409
   32198:	0801f04f 	.word	0x0801f04f
   3219c:	0800f04f 	.word	0x0800f04f
   321a0:	eb0869d6 	.word	0xeb0869d6
   321a4:	19a4050a 	.word	0x19a4050a
   321a8:	0800f04f 	.word	0x0800f04f
   321ac:	f04fbf28 	.word	0xf04fbf28
   321b0:	61d40801 	.word	0x61d40801
   321b4:	44a83120 	.word	0x44a83120
   321b8:	32203808 	.word	0x32203808
   321bc:	f0002800 	.word	0xf0002800
   321c0:	680c8097 	.word	0x680c8097
   321c4:	fba36816 	.word	0xfba36816
   321c8:	eb199a04 	.word	0xeb199a04
   321cc:	bf2c0808 	.word	0xbf2c0808
   321d0:	24002401 	.word	0x24002401
   321d4:	0608eb16 	.word	0x0608eb16
   321d8:	0500f04f 	.word	0x0500f04f
   321dc:	2501bf28 	.word	0x2501bf28
   321e0:	28014454 	.word	0x28014454
   321e4:	0804eb05 	.word	0x0804eb05
   321e8:	d07f6016 	.word	0xd07f6016
   321ec:	6856684c 	.word	0x6856684c
   321f0:	9a04fba3 	.word	0x9a04fba3
   321f4:	0808eb19 	.word	0x0808eb19
   321f8:	2401bf2c 	.word	0x2401bf2c
   321fc:	eb162400 	.word	0xeb162400
   32200:	f04f0608 	.word	0xf04f0608
   32204:	bf280500 	.word	0xbf280500
   32208:	44542501 	.word	0x44542501
   3220c:	eb052802 	.word	0xeb052802
   32210:	60560804 	.word	0x60560804
   32214:	688cd06a 	.word	0x688cd06a
   32218:	fba36896 	.word	0xfba36896
   3221c:	eb199a04 	.word	0xeb199a04
   32220:	bf2c0808 	.word	0xbf2c0808
   32224:	24002401 	.word	0x24002401
   32228:	0608eb16 	.word	0x0608eb16
   3222c:	0500f04f 	.word	0x0500f04f
   32230:	2501bf28 	.word	0x2501bf28
   32234:	28034454 	.word	0x28034454
   32238:	0804eb05 	.word	0x0804eb05
   3223c:	d0556096 	.word	0xd0556096
   32240:	68d668cc 	.word	0x68d668cc
   32244:	9a04fba3 	.word	0x9a04fba3
   32248:	0808eb19 	.word	0x0808eb19
   3224c:	2401bf2c 	.word	0x2401bf2c
   32250:	eb162400 	.word	0xeb162400
   32254:	f04f0608 	.word	0xf04f0608
   32258:	bf280500 	.word	0xbf280500
   3225c:	44542501 	.word	0x44542501
   32260:	eb052804 	.word	0xeb052804
   32264:	60d60804 	.word	0x60d60804
   32268:	690cd040 	.word	0x690cd040
   3226c:	fba36916 	.word	0xfba36916
   32270:	eb199a04 	.word	0xeb199a04
   32274:	bf2c0408 	.word	0xbf2c0408
   32278:	0801f04f 	.word	0x0801f04f
   3227c:	0800f04f 	.word	0x0800f04f
   32280:	eb0a19a6 	.word	0xeb0a19a6
   32284:	f04f0508 	.word	0xf04f0508
   32288:	bf280800 	.word	0xbf280800
   3228c:	0801f04f 	.word	0x0801f04f
   32290:	44a82805 	.word	0x44a82805
   32294:	d0296116 	.word	0xd0296116
   32298:	6956694c 	.word	0x6956694c
   3229c:	9a04fba3 	.word	0x9a04fba3
   322a0:	0409eb18 	.word	0x0409eb18
   322a4:	f04fbf2c 	.word	0xf04fbf2c
   322a8:	f04f0801 	.word	0xf04f0801
   322ac:	19a60800 	.word	0x19a60800
   322b0:	0508eb0a 	.word	0x0508eb0a
   322b4:	0800f04f 	.word	0x0800f04f
   322b8:	f04fbf28 	.word	0xf04fbf28
   322bc:	28060801 	.word	0x28060801
   322c0:	615644a8 	.word	0x615644a8
   322c4:	698cd012 	.word	0x698cd012
   322c8:	fba36991 	.word	0xfba36991
   322cc:	eb144504 	.word	0xeb144504
   322d0:	bf2c0808 	.word	0xbf2c0808
   322d4:	23002301 	.word	0x23002301
   322d8:	0108eb11 	.word	0x0108eb11
   322dc:	0400f04f 	.word	0x0400f04f
   322e0:	2401bf28 	.word	0x2401bf28
   322e4:	eb04442b 	.word	0xeb04442b
   322e8:	61910803 	.word	0x61910803
   322ec:	0280eb02 	.word	0x0280eb02
   322f0:	23006815 	.word	0x23006815
   322f4:	0508eb15 	.word	0x0508eb15
   322f8:	2301bf28 	.word	0x2301bf28
   322fc:	5b04f842 	.word	0x5b04f842
   32300:	0801f04f 	.word	0x0801f04f
   32304:	d1f32b00 	.word	0xd1f32b00
   32308:	8ff0e8bd 	.word	0x8ff0e8bd
   3230c:	0800f04f 	.word	0x0800f04f
   32310:	bf00e6be 	.word	0xbf00e6be

00032314 <symbol_0002616>:
   32314:	2b006843 	.word	0x2b006843
   32318:	b430d033 	.word	0xb430d033
   3231c:	4280f103 	.word	0x4280f103
   32320:	3a016885 	.word	0x3a016885
   32324:	4022f855 	.word	0x4022f855
   32328:	0282eb05 	.word	0x0282eb05
   3232c:	e009b11c 	.word	0xe009b11c
   32330:	4d04f852 	.word	0x4d04f852
   32334:	3b01b934 	.word	0x3b01b934
   32338:	688bd1fa 	.word	0x688bd1fa
   3233c:	b9d06818 	.word	0xb9d06818
   32340:	4770bc30 	.word	0x4770bc30
   32344:	6812688a 	.word	0x6812688a
   32348:	2b01b192 	.word	0x2b01b192
   3234c:	6800d810 	.word	0x6800d810
   32350:	2800680b 	.word	0x2800680b
   32354:	2b00dd01 	.word	0x2b00dd01
   32358:	2b00db11 	.word	0x2b00db11
   3235c:	2800dd01 	.word	0x2800dd01
   32360:	682bdb16 	.word	0x682bdb16
   32364:	d8eb4293 	.word	0xd8eb4293
   32368:	bc30d306 	.word	0xbc30d306
   3236c:	47702000 	.word	0x47702000
   32370:	bc306800 	.word	0xbc306800
   32374:	68084770 	.word	0x68084770
   32378:	bc304240 	.word	0xbc304240
   3237c:	20014770 	.word	0x20014770
   32380:	688be7de 	.word	0x688be7de
   32384:	b9006818 	.word	0xb9006818
   32388:	68084770 	.word	0x68084770
   3238c:	e7fb4240 	.word	0xe7fb4240
   32390:	30fff04f 	.word	0x30fff04f
   32394:	bf00e7d4 	.word	0xbf00e7d4

00032398 <symbol_00038d0>:
   32398:	2300b120 	.word	0x2300b120
   3239c:	e9c02201 	.word	0xe9c02201
   323a0:	60832300 	.word	0x60832300
   323a4:	bf004770 	.word	0xbf004770

000323a8 <symbol_000fb6e>:
   323a8:	b510b1b0 	.word	0xb510b1b0
   323ac:	68804604 	.word	0x68804604
   323b0:	6862b160 	.word	0x6862b160
   323b4:	b13a1e53 	.word	0xb13a1e53
   323b8:	3b012200 	.word	0x3b012200
   323bc:	60021c59 	.word	0x60021c59
   323c0:	0004f100 	.word	0x0004f100
   323c4:	68a0d1f9 	.word	0x68a0d1f9
   323c8:	fc4ef003 	.word	0xfc4ef003
   323cc:	22012300 	.word	0x22012300
   323d0:	2300e9c4 	.word	0x2300e9c4
   323d4:	bd1060a3 	.word	0xbd1060a3
   323d8:	bf004770 	.word	0xbf004770

000323dc <symbol_0006423>:
   323dc:	6842b570 	.word	0x6842b570
   323e0:	428a4605 	.word	0x428a4605
   323e4:	d807460c 	.word	0xd807460c
   323e8:	7310f242 	.word	0x7310f242
   323ec:	d8514299 	.word	0xd8514299
   323f0:	d335428a 	.word	0xd335428a
   323f4:	bd702000 	.word	0xbd702000
   323f8:	d0101e51 	.word	0xd0101e51
   323fc:	f8536883 	.word	0xf8536883
   32400:	28000021 	.word	0x28000021
   32404:	f102d149 	.word	0xf102d149
   32408:	3a014280 	.word	0x3a014280
   3240c:	0382eb03 	.word	0x0382eb03
   32410:	f853e003 	.word	0xf853e003
   32414:	b9180d04 	.word	0xb9180d04
   32418:	1e4a4611 	.word	0x1e4a4611
   3241c:	2101d1f9 	.word	0x2101d1f9
   32420:	bf38428c 	.word	0xbf38428c
   32424:	2104460c 	.word	0x2104460c
   32428:	f0034620 	.word	0xf0034620
   3242c:	4606fc09 	.word	0x4606fc09
   32430:	68a9b380 	.word	0x68a9b380
   32434:	00a2b181 	.word	0x00a2b181
   32438:	fc92f00e 	.word	0xfc92f00e
   3243c:	2001e9d5 	.word	0x2001e9d5
   32440:	b13a1e53 	.word	0xb13a1e53
   32444:	3b012200 	.word	0x3b012200
   32448:	60021c59 	.word	0x60021c59
   3244c:	0004f100 	.word	0x0004f100
   32450:	68a8d1f9 	.word	0x68a8d1f9
   32454:	fc08f003 	.word	0xfc08f003
   32458:	4601e9c5 	.word	0x4601e9c5
   3245c:	bd702000 	.word	0xbd702000
   32460:	46202104 	.word	0x46202104
   32464:	fbecf003 	.word	0xfbecf003
   32468:	b1984606 	.word	0xb1984606
   3246c:	290068a9 	.word	0x290068a9
   32470:	686ad0f2 	.word	0x686ad0f2
   32474:	f00e0092 	.word	0xf00e0092
   32478:	e9d5fc73 	.word	0xe9d5fc73
   3247c:	1e532001 	.word	0x1e532001
   32480:	d0e72a00 	.word	0xd0e72a00
   32484:	3b012200 	.word	0x3b012200
   32488:	60021c59 	.word	0x60021c59
   3248c:	0004f100 	.word	0x0004f100
   32490:	e7ded1f9 	.word	0xe7ded1f9
   32494:	000ff06f 	.word	0x000ff06f
   32498:	4611bd70 	.word	0x4611bd70
   3249c:	bf00e7c0 	.word	0xbf00e7c0

000324a0 <symbol_00084df>:
   324a0:	d0524288 	.word	0xd0524288
   324a4:	688ab5f8 	.word	0x688ab5f8
   324a8:	4605460e 	.word	0x4605460e
   324ac:	d04e2a00 	.word	0xd04e2a00
   324b0:	1e4b6849 	.word	0x1e4b6849
   324b4:	f852d00e 	.word	0xf852d00e
   324b8:	28000023 	.word	0x28000023
   324bc:	f101d13b 	.word	0xf101d13b
   324c0:	39014180 	.word	0x39014180
   324c4:	0281eb02 	.word	0x0281eb02
   324c8:	f852e002 	.word	0xf852e002
   324cc:	bb900d04 	.word	0xbb900d04
   324d0:	d1fa3b01 	.word	0xd1fa3b01
   324d4:	68332401 	.word	0x68332401
   324d8:	686a602b 	.word	0x686a602b
   324dc:	d30c42a2 	.word	0xd30c42a2
   324e0:	009268af 	.word	0x009268af
   324e4:	46382100 	.word	0x46382100
   324e8:	fc5af00e 	.word	0xfc5af00e
   324ec:	68b100a2 	.word	0x68b100a2
   324f0:	f00e68a8 	.word	0xf00e68a8
   324f4:	2000fc35 	.word	0x2000fc35
   324f8:	2104bdf8 	.word	0x2104bdf8
   324fc:	f0034620 	.word	0xf0034620
   32500:	4607fb9f 	.word	0x4607fb9f
   32504:	68a9b1f0 	.word	0x68a9b1f0
   32508:	686ab189 	.word	0x686ab189
   3250c:	f00e0092 	.word	0xf00e0092
   32510:	e9d5fc27 	.word	0xe9d5fc27
   32514:	1e532001 	.word	0x1e532001
   32518:	2200b13a 	.word	0x2200b13a
   3251c:	1c593b01 	.word	0x1c593b01
   32520:	f1006002 	.word	0xf1006002
   32524:	d1f90004 	.word	0xd1f90004
   32528:	f00368a8 	.word	0xf00368a8
   3252c:	4622fb9d 	.word	0x4622fb9d
   32530:	4701e9c5 	.word	0x4701e9c5
   32534:	f242e7d5 	.word	0xf242e7d5
   32538:	68317210 	.word	0x68317210
   3253c:	42941c5c 	.word	0x42941c5c
   32540:	d9ca6029 	.word	0xd9ca6029
   32544:	000ff06f 	.word	0x000ff06f
   32548:	2000bdf8 	.word	0x2000bdf8
   3254c:	28004770 	.word	0x28004770
   32550:	6880d0d1 	.word	0x6880d0d1
   32554:	6869b158 	.word	0x6869b158
   32558:	b1311e4b 	.word	0xb1311e4b
   3255c:	1c5c3b01 	.word	0x1c5c3b01
   32560:	f1006002 	.word	0xf1006002
   32564:	d1f90004 	.word	0xd1f90004
   32568:	f00368a8 	.word	0xf00368a8
   3256c:	2000fb7d 	.word	0x2000fb7d
   32570:	e9c52301 	.word	0xe9c52301
   32574:	60a83000 	.word	0x60a83000
   32578:	bf00bdf8 	.word	0xbf00bdf8

0003257c <symbol_000fa6b>:
   3257c:	684bb5f0 	.word	0x684bb5f0
   32580:	b085460d 	.word	0xb085460d
   32584:	46064614 	.word	0x46064614
   32588:	b17b6851 	.word	0xb17b6851
   3258c:	f10368a8 	.word	0xf10368a8
   32590:	3a014280 	.word	0x3a014280
   32594:	7022f850 	.word	0x7022f850
   32598:	0082eb00 	.word	0x0082eb00
   3259c:	e04fb127 	.word	0xe04fb127
   325a0:	2d04f850 	.word	0x2d04f850
   325a4:	d14b2a00 	.word	0xd14b2a00
   325a8:	d1f93b01 	.word	0xd1f93b01
   325ac:	f101b189 	.word	0xf101b189
   325b0:	68a74080 	.word	0x68a74080
   325b4:	f8573801 	.word	0xf8573801
   325b8:	2a002020 	.word	0x2a002020
   325bc:	8099f040 	.word	0x8099f040
   325c0:	0080eb07 	.word	0x0080eb07
   325c4:	f850e003 	.word	0xf850e003
   325c8:	2a002d04 	.word	0x2a002d04
   325cc:	3901d142 	.word	0x3901d142
   325d0:	2300d1f9 	.word	0x2300d1f9
   325d4:	42b42201 	.word	0x42b42201
   325d8:	2301e9cd 	.word	0x2301e9cd
   325dc:	d07f9303 	.word	0xd07f9303
   325e0:	d00542b5 	.word	0xd00542b5
   325e4:	46304629 	.word	0x46304629
   325e8:	ff5af7ff 	.word	0xff5af7ff
   325ec:	b9a84607 	.word	0xb9a84607
   325f0:	60332301 	.word	0x60332301
   325f4:	b1806860 	.word	0xb1806860
   325f8:	c008f8d4 	.word	0xc008f8d4
   325fc:	4380f100 	.word	0x4380f100
   32600:	f85c3b01 	.word	0xf85c3b01
   32604:	eb0c2023 	.word	0xeb0c2023
   32608:	b1220383 	.word	0xb1220383
   3260c:	f853e042 	.word	0xf853e042
   32610:	2a002d04 	.word	0x2a002d04
   32614:	3801d13e 	.word	0x3801d13e
   32618:	2700d1f9 	.word	0x2700d1f9
   3261c:	b1609803 	.word	0xb1609803
   32620:	1e539a02 	.word	0x1e539a02
   32624:	2200b13a 	.word	0x2200b13a
   32628:	1c593b01 	.word	0x1c593b01
   3262c:	f1006002 	.word	0xf1006002
   32630:	d1f90004 	.word	0xd1f90004
   32634:	f0039803 	.word	0xf0039803
   32638:	4638fb17 	.word	0x4638fb17
   3263c:	bdf0b005 	.word	0xbdf0b005
   32640:	d0c62900 	.word	0xd0c62900
   32644:	4080f101 	.word	0x4080f101
   32648:	380168a7 	.word	0x380168a7
   3264c:	2020f857 	.word	0x2020f857
   32650:	d0b52a00 	.word	0xd0b52a00
   32654:	d8bc428b 	.word	0xd8bc428b
   32658:	2b00d34b 	.word	0x2b00d34b
   3265c:	68a8d0b9 	.word	0x68a8d0b9
   32660:	4180f103 	.word	0x4180f103
   32664:	f8503901 	.word	0xf8503901
   32668:	f857c021 	.word	0xf857c021
   3266c:	0089e021 	.word	0x0089e021
   32670:	440845e6 	.word	0x440845e6
   32674:	0201eb07 	.word	0x0201eb07
   32678:	d83ad3ab 	.word	0xd83ad3ab
   3267c:	e0064601 	.word	0xe0064601
   32680:	7d04f851 	.word	0x7d04f851
   32684:	0d04f852 	.word	0x0d04f852
   32688:	d8a24287 	.word	0xd8a24287
   3268c:	3b01d331 	.word	0x3b01d331
   32690:	e79ed1f6 	.word	0xe79ed1f6
   32694:	462b2500 	.word	0x462b2500
   32698:	f85168b1 	.word	0xf85168b1
   3269c:	35016b04 	.word	0x35016b04
   326a0:	f8411af2 	.word	0xf8411af2
   326a4:	f85c2c04 	.word	0xf85c2c04
   326a8:	460c7b04 	.word	0x460c7b04
   326ac:	bf2c42ba 	.word	0xbf2c42ba
   326b0:	0e00f04f 	.word	0x0e00f04f
   326b4:	0e01f04f 	.word	0x0e01f04f
   326b8:	429e1bd2 	.word	0x429e1bd2
   326bc:	4673bf2c 	.word	0x4673bf2c
   326c0:	0301f10e 	.word	0x0301f10e
   326c4:	f8414285 	.word	0xf8414285
   326c8:	d3e62c04 	.word	0xd3e62c04
   326cc:	e7a4b90b 	.word	0xe7a4b90b
   326d0:	68222301 	.word	0x68222301
   326d4:	429a1ad1 	.word	0x429a1ad1
   326d8:	1b04f844 	.word	0x1b04f844
   326dc:	e79cd3f8 	.word	0xe79cd3f8
   326e0:	a8014621 	.word	0xa8014621
   326e4:	fedcf7ff 	.word	0xfedcf7ff
   326e8:	28004607 	.word	0x28004607
   326ec:	ac01d196 	.word	0xac01d196
   326f0:	f06fe776 	.word	0xf06fe776
   326f4:	46380709 	.word	0x46380709
   326f8:	bdf0b005 	.word	0xbdf0b005

000326fc <symbol_0006ccd>:
   326fc:	7310f242 	.word	0x7310f242
   32700:	41f0e92d 	.word	0x41f0e92d
   32704:	4256684f 	.word	0x4256684f
   32708:	429f4316 	.word	0x429f4316
   3270c:	16c0f3c6 	.word	0x16c0f3c6
   32710:	6842d84f 	.word	0x6842d84f
   32714:	42974604 	.word	0x42974604
   32718:	d82c460d 	.word	0xd82c460d
   3271c:	68236829 	.word	0x68236829
   32720:	f106fb01 	.word	0xf106fb01
   32724:	0701f1c6 	.word	0x0701f1c6
   32728:	1307fb03 	.word	0x1307fb03
   3272c:	686b6023 	.word	0x686b6023
   32730:	2300b18b 	.word	0x2300b18b
   32734:	68aa68a1 	.word	0x68aa68a1
   32738:	0023f851 	.word	0x0023f851
   3273c:	2023f852 	.word	0x2023f852
   32740:	f007fb00 	.word	0xf007fb00
   32744:	0206fb02 	.word	0x0206fb02
   32748:	2023f841 	.word	0x2023f841
   3274c:	3301686a 	.word	0x3301686a
   32750:	d8ef429a 	.word	0xd8ef429a
   32754:	42936862 	.word	0x42936862
   32758:	009ad20a 	.word	0x009ad20a
   3275c:	330168a0 	.word	0x330168a0
   32760:	fb075881 	.word	0xfb075881
   32764:	5081f101 	.word	0x5081f101
   32768:	32046861 	.word	0x32046861
   3276c:	d8f54299 	.word	0xd8f54299
   32770:	e8bd2000 	.word	0xe8bd2000
   32774:	210481f0 	.word	0x210481f0
   32778:	f0034638 	.word	0xf0034638
   3277c:	4680fa61 	.word	0x4680fa61
   32780:	68a1b1b8 	.word	0x68a1b1b8
   32784:	6862b189 	.word	0x6862b189
   32788:	f00e0092 	.word	0xf00e0092
   3278c:	e9d4fae9 	.word	0xe9d4fae9
   32790:	1e532001 	.word	0x1e532001
   32794:	2200b13a 	.word	0x2200b13a
   32798:	1c593b01 	.word	0x1c593b01
   3279c:	f1006002 	.word	0xf1006002
   327a0:	d1f90004 	.word	0xd1f90004
   327a4:	f00368a0 	.word	0xf00368a0
   327a8:	463afa5f 	.word	0x463afa5f
   327ac:	7801e9c4 	.word	0x7801e9c4
   327b0:	f06fe7b4 	.word	0xf06fe7b4
   327b4:	e7dc000f 	.word	0xe7dc000f

000327b8 <symbol_000b345>:
   327b8:	6845b5f8 	.word	0x6845b5f8
   327bc:	460e4604 	.word	0x460e4604
   327c0:	6887b19d 	.word	0x6887b19d
   327c4:	463800aa 	.word	0x463800aa
   327c8:	f00e2100 	.word	0xf00e2100
   327cc:	2e00fae9 	.word	0x2e00fae9
   327d0:	2301bfac 	.word	0x2301bfac
   327d4:	33fff04f 	.word	0x33fff04f
   327d8:	71e6ea86 	.word	0x71e6ea86
   327dc:	eba168a2 	.word	0xeba168a2
   327e0:	601171e6 	.word	0x601171e6
   327e4:	20006023 	.word	0x20006023
   327e8:	2104bdf8 	.word	0x2104bdf8
   327ec:	f0032001 	.word	0xf0032001
   327f0:	4607fa27 	.word	0x4607fa27
   327f4:	68a1b1b8 	.word	0x68a1b1b8
   327f8:	6862b181 	.word	0x6862b181
   327fc:	f00e0092 	.word	0xf00e0092
   32800:	e9d4faaf 	.word	0xe9d4faaf
   32804:	1e532001 	.word	0x1e532001
   32808:	3b01b132 	.word	0x3b01b132
   3280c:	60051c5a 	.word	0x60051c5a
   32810:	0004f100 	.word	0x0004f100
   32814:	68a0d1f9 	.word	0x68a0d1f9
   32818:	fa26f003 	.word	0xfa26f003
   3281c:	22042301 	.word	0x22042301
   32820:	3701e9c4 	.word	0x3701e9c4
   32824:	f06fe7cf 	.word	0xf06fe7cf
   32828:	bdf8000f 	.word	0xbdf8000f

0003282c <symbol_0007f0f>:
   3282c:	ebb16843 	.word	0xebb16843
   32830:	d2091f43 	.word	0xd2091f43
   32834:	094a6883 	.word	0x094a6883
   32838:	0022f853 	.word	0x0022f853
   3283c:	011ff001 	.word	0x011ff001
   32840:	f00040c8 	.word	0xf00040c8
   32844:	47700001 	.word	0x47700001
   32848:	47702000 	.word	0x47702000

0003284c <symbol_00030c0>:
   3284c:	b3136843 	.word	0xb3136843
   32850:	6882b410 	.word	0x6882b410
   32854:	d0241e58 	.word	0xd0241e58
   32858:	1020f852 	.word	0x1020f852
   3285c:	f103b9e9 	.word	0xf103b9e9
   32860:	3b014380 	.word	0x3b014380
   32864:	0383eb02 	.word	0x0383eb02
   32868:	f853e002 	.word	0xf853e002
   3286c:	b9a11d04 	.word	0xb9a11d04
   32870:	d1fa3801 	.word	0xd1fa3801
   32874:	68112420 	.word	0x68112420
   32878:	f04f2200 	.word	0xf04f2200
   3287c:	e0024300 	.word	0xe0024300
   32880:	2a203201 	.word	0x2a203201
   32884:	420bd004 	.word	0x420bd004
   32888:	0353ea4f 	.word	0x0353ea4f
   3288c:	1aa0d0f8 	.word	0x1aa0d0f8
   32890:	4b04f85d 	.word	0x4b04f85d
   32894:	46184770 	.word	0x46184770
   32898:	01404770 	.word	0x01404770
   3289c:	0420f100 	.word	0x0420f100
   328a0:	6811e7ea 	.word	0x6811e7ea
   328a4:	e7e72420 	.word	0xe7e72420

000328a8 <symbol_000b7da>:
   328a8:	b3236843 	.word	0xb3236843
   328ac:	6882b410 	.word	0x6882b410
   328b0:	d0261e58 	.word	0xd0261e58
   328b4:	1020f852 	.word	0x1020f852
   328b8:	f103b9f9 	.word	0xf103b9f9
   328bc:	3b014380 	.word	0x3b014380
   328c0:	0383eb02 	.word	0x0383eb02
   328c4:	f853e002 	.word	0xf853e002
   328c8:	b9b11d04 	.word	0xb9b11d04
   328cc:	d1fa3801 	.word	0xd1fa3801
   328d0:	68112420 	.word	0x68112420
   328d4:	f04f2200 	.word	0xf04f2200
   328d8:	e0024300 	.word	0xe0024300
   328dc:	2a203201 	.word	0x2a203201
   328e0:	420bd004 	.word	0x420bd004
   328e4:	0353ea4f 	.word	0x0353ea4f
   328e8:	1aa0d0f8 	.word	0x1aa0d0f8
   328ec:	08c03007 	.word	0x08c03007
   328f0:	4b04f85d 	.word	0x4b04f85d
   328f4:	46184770 	.word	0x46184770
   328f8:	01404770 	.word	0x01404770
   328fc:	0420f100 	.word	0x0420f100
   32900:	6811e7e8 	.word	0x6811e7e8
   32904:	e7e52420 	.word	0xe7e52420

00032908 <symbol_000eaf4>:
   32908:	43f8e92d 	.word	0x43f8e92d
   3290c:	460f4605 	.word	0x460f4605
   32910:	2a004616 	.word	0x2a004616
   32914:	780cd07e 	.word	0x780cd07e
   32918:	b124460b 	.word	0xb124460b
   3291c:	f813e07e 	.word	0xf813e07e
   32920:	2a002f01 	.word	0x2a002f01
   32924:	3401d146 	.word	0x3401d146
   32928:	d1f842a6 	.word	0xd1f842a6
   3292c:	8004f8d5 	.word	0x8004f8d5
   32930:	0f00f1b8 	.word	0x0f00f1b8
   32934:	2104d169 	.word	0x2104d169
   32938:	f0032001 	.word	0xf0032001
   3293c:	4681f981 	.word	0x4681f981
   32940:	d06d2800 	.word	0xd06d2800
   32944:	b18968a9 	.word	0xb18968a9
   32948:	0092686a 	.word	0x0092686a
   3294c:	fa08f00e 	.word	0xfa08f00e
   32950:	2001e9d5 	.word	0x2001e9d5
   32954:	b13a1e53 	.word	0xb13a1e53
   32958:	3b014642 	.word	0x3b014642
   3295c:	60021c59 	.word	0x60021c59
   32960:	0004f100 	.word	0x0004f100
   32964:	68a8d1f9 	.word	0x68a8d1f9
   32968:	f97ef003 	.word	0xf97ef003
   3296c:	22042301 	.word	0x22042301
   32970:	3901e9c5 	.word	0x3901e9c5
   32974:	46482100 	.word	0x46482100
   32978:	fa12f00e 	.word	0xfa12f00e
   3297c:	22012300 	.word	0x22012300
   32980:	42a668a9 	.word	0x42a668a9
   32984:	602a600b 	.word	0x602a600b
   32988:	eb07d911 	.word	0xeb07d911
   3298c:	1b340c06 	.word	0x1b340c06
   32990:	f02368ae 	.word	0xf02368ae
   32994:	00df0103 	.word	0x00df0103
   32998:	0d01f81c 	.word	0x0d01f81c
   3299c:	f0075872 	.word	0xf0075872
   329a0:	40b80718 	.word	0x40b80718
   329a4:	43023301 	.word	0x43023301
   329a8:	507242a3 	.word	0x507242a3
   329ac:	2000d1f0 	.word	0x2000d1f0
   329b0:	83f8e8bd 	.word	0x83f8e8bd
   329b4:	f0121b32 	.word	0xf0121b32
   329b8:	bf180803 	.word	0xbf180803
   329bc:	0801f04f 	.word	0x0801f04f
   329c0:	7310f242 	.word	0x7310f242
   329c4:	0892eb08 	.word	0x0892eb08
   329c8:	d8294598 	.word	0xd8294598
   329cc:	4598686b 	.word	0x4598686b
   329d0:	2104d929 	.word	0x2104d929
   329d4:	f0034640 	.word	0xf0034640
   329d8:	4681f933 	.word	0x4681f933
   329dc:	68a9b300 	.word	0x68a9b300
   329e0:	686ab189 	.word	0x686ab189
   329e4:	f00e0092 	.word	0xf00e0092
   329e8:	e9d5f9bb 	.word	0xe9d5f9bb
   329ec:	1e532001 	.word	0x1e532001
   329f0:	2200b13a 	.word	0x2200b13a
   329f4:	1c593b01 	.word	0x1c593b01
   329f8:	f1006002 	.word	0xf1006002
   329fc:	d1f90004 	.word	0xd1f90004
   32a00:	f00368a8 	.word	0xf00368a8
   32a04:	e9c5f931 	.word	0xe9c5f931
   32a08:	ea4f8901 	.word	0xea4f8901
   32a0c:	f8d50288 	.word	0xf8d50288
   32a10:	e7af9008 	.word	0xe7af9008
   32a14:	8004f8d0 	.word	0x8004f8d0
   32a18:	e7894614 	.word	0xe7894614
   32a1c:	e7ca2400 	.word	0xe7ca2400
   32a20:	000ff06f 	.word	0x000ff06f
   32a24:	4698e7c4 	.word	0x4698e7c4
   32a28:	bf00e782 	.word	0xbf00e782

00032a2c <symbol_000116e>:
   32a2c:	41f0e92d 	.word	0x41f0e92d
   32a30:	46886844 	.word	0x46886844
   32a34:	d03e2c00 	.word	0xd03e2c00
   32a38:	1e624615 	.word	0x1e624615
   32a3c:	68804607 	.word	0x68804607
   32a40:	f850d040 	.word	0xf850d040
   32a44:	bb991022 	.word	0xbb991022
   32a48:	4380f104 	.word	0x4380f104
   32a4c:	eb003b01 	.word	0xeb003b01
   32a50:	e0020383 	.word	0xe0020383
   32a54:	1d04f853 	.word	0x1d04f853
   32a58:	3a01bb51 	.word	0x3a01bb51
   32a5c:	2627d1fa 	.word	0x2627d1fa
   32a60:	22006801 	.word	0x22006801
   32a64:	4300f04f 	.word	0x4300f04f
   32a68:	3201e002 	.word	0x3201e002
   32a6c:	d0032a20 	.word	0xd0032a20
   32a70:	ea4f420b 	.word	0xea4f420b
   32a74:	d0f80353 	.word	0xd0f80353
   32a78:	08f61ab6 	.word	0x08f61ab6
   32a7c:	d32442b5 	.word	0xd32442b5
   32a80:	2100462a 	.word	0x2100462a
   32a84:	f00e4640 	.word	0xf00e4640
   32a88:	b176f98b 	.word	0xb176f98b
   32a8c:	44a82300 	.word	0x44a82300
   32a90:	f02368b9 	.word	0xf02368b9
   32a94:	588c0203 	.word	0x588c0203
   32a98:	f00500dd 	.word	0xf00500dd
   32a9c:	33010518 	.word	0x33010518
   32aa0:	42b340ec 	.word	0x42b340ec
   32aa4:	4d01f808 	.word	0x4d01f808
   32aa8:	2000d1f2 	.word	0x2000d1f2
   32aac:	81f0e8bd 	.word	0x81f0e8bd
   32ab0:	36270156 	.word	0x36270156
   32ab4:	4608e7d5 	.word	0x4608e7d5
   32ab8:	f00e4621 	.word	0xf00e4621
   32abc:	4620f971 	.word	0x4620f971
   32ac0:	81f0e8bd 	.word	0x81f0e8bd
   32ac4:	26276801 	.word	0x26276801
   32ac8:	f06fe7cb 	.word	0xf06fe7cb
   32acc:	e7ed0007 	.word	0xe7ed0007

00032ad0 <symbol_0004fb7>:
   32ad0:	41f0e92d 	.word	0x41f0e92d
   32ad4:	46046843 	.word	0x46046843
   32ad8:	f001094d 	.word	0xf001094d
   32adc:	b343061f 	.word	0xb343061f
   32ae0:	f8d01e5a 	.word	0xf8d01e5a
   32ae4:	f000e008 	.word	0xf000e008
   32ae8:	f85e8099 	.word	0xf85e8099
   32aec:	f1bcc022 	.word	0xf1bcc022
   32af0:	f0400f00 	.word	0xf0400f00
   32af4:	f103809c 	.word	0xf103809c
   32af8:	38014080 	.word	0x38014080
   32afc:	0080eb0e 	.word	0x0080eb0e
   32b00:	f850e003 	.word	0xf850e003
   32b04:	2f007d04 	.word	0x2f007d04
   32b08:	3a01d15e 	.word	0x3a01d15e
   32b0c:	f04fd1f9 	.word	0xf04fd1f9
   32b10:	f8de0820 	.word	0xf8de0820
   32b14:	20007000 	.word	0x20007000
   32b18:	4200f04f 	.word	0x4200f04f
   32b1c:	3001e002 	.word	0x3001e002
   32b20:	d0052820 	.word	0xd0052820
   32b24:	ea4f423a 	.word	0xea4f423a
   32b28:	d0f80252 	.word	0xd0f80252
   32b2c:	0c00eba8 	.word	0x0c00eba8
   32b30:	ebb14461 	.word	0xebb14461
   32b34:	d90b1f43 	.word	0xd90b1f43
   32b38:	021ff011 	.word	0x021ff011
   32b3c:	2201bf18 	.word	0x2201bf18
   32b40:	7010f242 	.word	0x7010f242
   32b44:	1751eb02 	.word	0x1751eb02
   32b48:	d86d4287 	.word	0xd86d4287
   32b4c:	d840429f 	.word	0xd840429f
   32b50:	429db1f5 	.word	0x429db1f5
   32b54:	f06fd25d 	.word	0xf06fd25d
   32b58:	1b7f4740 	.word	0x1b7f4740
   32b5c:	ebc719da 	.word	0xebc719da
   32b60:	00927787 	.word	0x00927787
   32b64:	68a000bf 	.word	0x68a000bf
   32b68:	19c13b01 	.word	0x19c13b01
   32b6c:	44115880 	.word	0x44115880
   32b70:	f841429d 	.word	0xf841429d
   32b74:	f1a20c04 	.word	0xf1a20c04
   32b78:	d1f40204 	.word	0xd1f40204
   32b7c:	f1032100 	.word	0xf1032100
   32b80:	3b014380 	.word	0x3b014380
   32b84:	68a2009b 	.word	0x68a2009b
   32b88:	3b0450d1 	.word	0x3b0450d1
   32b8c:	d1fa1d1a 	.word	0xd1fa1d1a
   32b90:	6863b1be 	.word	0x6863b1be
   32b94:	d214429d 	.word	0xd214429d
   32b98:	f1c62700 	.word	0xf1c62700
   32b9c:	00ab0c20 	.word	0x00ab0c20
   32ba0:	350168a0 	.word	0x350168a0
   32ba4:	fa0158c1 	.word	0xfa0158c1
   32ba8:	50c2f206 	.word	0x50c2f206
   32bac:	58c268a0 	.word	0x58c268a0
   32bb0:	50c2433a 	.word	0x50c2433a
   32bb4:	fa216862 	.word	0xfa216862
   32bb8:	42aaf70c 	.word	0x42aaf70c
   32bbc:	0304f103 	.word	0x0304f103
   32bc0:	2000d8ee 	.word	0x2000d8ee
   32bc4:	81f0e8bd 	.word	0x81f0e8bd
   32bc8:	1c42ea4f 	.word	0x1c42ea4f
   32bcc:	0820f10c 	.word	0x0820f10c
   32bd0:	2104e7a1 	.word	0x2104e7a1
   32bd4:	f0034638 	.word	0xf0034638
   32bd8:	4680f833 	.word	0x4680f833
   32bdc:	68a1b320 	.word	0x68a1b320
   32be0:	6862b189 	.word	0x6862b189
   32be4:	f00e0092 	.word	0xf00e0092
   32be8:	e9d4f8bb 	.word	0xe9d4f8bb
   32bec:	1e532001 	.word	0x1e532001
   32bf0:	2200b13a 	.word	0x2200b13a
   32bf4:	1c593b01 	.word	0x1c593b01
   32bf8:	f1006002 	.word	0xf1006002
   32bfc:	d1f90004 	.word	0xd1f90004
   32c00:	f00368a0 	.word	0xf00368a0
   32c04:	463bf831 	.word	0x463bf831
   32c08:	7801e9c4 	.word	0x7801e9c4
   32c0c:	d0bf2d00 	.word	0xd0bf2d00
   32c10:	2b00e79f 	.word	0x2b00e79f
   32c14:	2e00d1b2 	.word	0x2e00d1b2
   32c18:	e7d2d1bb 	.word	0xe7d2d1bb
   32c1c:	7000f8de 	.word	0x7000f8de
   32c20:	f04f4694 	.word	0xf04f4694
   32c24:	e7760820 	.word	0xe7760820
   32c28:	000ff06f 	.word	0x000ff06f
   32c2c:	0152e7ca 	.word	0x0152e7ca
   32c30:	f1024667 	.word	0xf1024667
   32c34:	46940820 	.word	0x46940820
   32c38:	bf00e76d 	.word	0xbf00e76d

00032c3c <symbol_0000994>:
   32c3c:	6844b5f8 	.word	0x6844b5f8
   32c40:	42ac094d 	.word	0x42ac094d
   32c44:	f001d33a 	.word	0xf001d33a
   32c48:	d032011f 	.word	0xd032011f
   32c4c:	2300b1b5 	.word	0x2300b1b5
   32c50:	688400aa 	.word	0x688400aa
   32c54:	320458a6 	.word	0x320458a6
   32c58:	6023f844 	.word	0x6023f844
   32c5c:	33016844 	.word	0x33016844
   32c60:	429e1b66 	.word	0x429e1b66
   32c64:	429cd8f5 	.word	0x429cd8f5
   32c68:	2500d908 	.word	0x2500d908
   32c6c:	6884009a 	.word	0x6884009a
   32c70:	50a53301 	.word	0x50a53301
   32c74:	32046844 	.word	0x32046844
   32c78:	d8f8429c 	.word	0xd8f8429c
   32c7c:	b1b4b1b9 	.word	0xb1b4b1b9
   32c80:	f1042700 	.word	0xf1042700
   32c84:	3b014380 	.word	0x3b014380
   32c88:	f1c1009b 	.word	0xf1c1009b
   32c8c:	68860c20 	.word	0x68860c20
   32c90:	58f53c01 	.word	0x58f53c01
   32c94:	f201fa25 	.word	0xf201fa25
   32c98:	688650f2 	.word	0x688650f2
   32c9c:	ea4258f2 	.word	0xea4258f2
   32ca0:	50f20207 	.word	0x50f20207
   32ca4:	f70cfa05 	.word	0xf70cfa05
   32ca8:	0304f1a3 	.word	0x0304f1a3
   32cac:	2000d1ef 	.word	0x2000d1ef
   32cb0:	b919bdf8 	.word	0xb919bdf8
   32cb4:	d0fa2c00 	.word	0xd0fa2c00
   32cb8:	e7d6460b 	.word	0xe7d6460b
   32cbc:	b1644605 	.word	0xb1644605
   32cc0:	00a26886 	.word	0x00a26886
   32cc4:	21004630 	.word	0x21004630
   32cc8:	f86af00e 	.word	0xf86af00e
   32ccc:	22012300 	.word	0x22012300
   32cd0:	461868a9 	.word	0x461868a9
   32cd4:	602a600b 	.word	0x602a600b
   32cd8:	2104bdf8 	.word	0x2104bdf8
   32cdc:	f0022001 	.word	0xf0022001
   32ce0:	4606ffaf 	.word	0x4606ffaf
   32ce4:	68a9b1b8 	.word	0x68a9b1b8
   32ce8:	686ab181 	.word	0x686ab181
   32cec:	f00e0092 	.word	0xf00e0092
   32cf0:	e9d5f837 	.word	0xe9d5f837
   32cf4:	1e532001 	.word	0x1e532001
   32cf8:	3b01b132 	.word	0x3b01b132
   32cfc:	60041c5a 	.word	0x60041c5a
   32d00:	0004f100 	.word	0x0004f100
   32d04:	68a8d1f9 	.word	0x68a8d1f9
   32d08:	ffaef002 	.word	0xffaef002
   32d0c:	22042301 	.word	0x22042301
   32d10:	3601e9c5 	.word	0x3601e9c5
   32d14:	f06fe7d6 	.word	0xf06fe7d6
   32d18:	bdf8000f 	.word	0xbdf8000f

00032d1c <symbol_000242f>:
   32d1c:	6843b470 	.word	0x6843b470
   32d20:	b173684a 	.word	0xb173684a
   32d24:	f1036884 	.word	0xf1036884
   32d28:	3d014580 	.word	0x3d014580
   32d2c:	6025f854 	.word	0x6025f854
   32d30:	0485eb04 	.word	0x0485eb04
   32d34:	e01ab11e 	.word	0xe01ab11e
   32d38:	5d04f854 	.word	0x5d04f854
   32d3c:	3b01b9bd 	.word	0x3b01b9bd
   32d40:	b18ad1fa 	.word	0xb18ad1fa
   32d44:	4480f102 	.word	0x4480f102
   32d48:	3c01688e 	.word	0x3c01688e
   32d4c:	5024f856 	.word	0x5024f856
   32d50:	eb06b9cd 	.word	0xeb06b9cd
   32d54:	e0020484 	.word	0xe0020484
   32d58:	5d04f854 	.word	0x5d04f854
   32d5c:	3a01b98d 	.word	0x3a01b98d
   32d60:	2b00d1fa 	.word	0x2b00d1fa
   32d64:	6802d037 	.word	0x6802d037
   32d68:	bc704610 	.word	0xbc704610
   32d6c:	2a004770 	.word	0x2a004770
   32d70:	f102d0f9 	.word	0xf102d0f9
   32d74:	688e4480 	.word	0x688e4480
   32d78:	f8563c01 	.word	0xf8563c01
   32d7c:	2d005024 	.word	0x2d005024
   32d80:	4293d0e7 	.word	0x4293d0e7
   32d84:	4293d8ef 	.word	0x4293d8ef
   32d88:	d2036809 	.word	0xd2036809
   32d8c:	424abc70 	.word	0x424abc70
   32d90:	47704610 	.word	0x47704610
   32d94:	2a006802 	.word	0x2a006802
   32d98:	2900dd01 	.word	0x2900dd01
   32d9c:	2900db24 	.word	0x2900db24
   32da0:	2a00dd01 	.word	0x2a00dd01
   32da4:	b1b3db1d 	.word	0xb1b3db1d
   32da8:	f1036884 	.word	0xf1036884
   32dac:	39014180 	.word	0x39014180
   32db0:	5021f854 	.word	0x5021f854
   32db4:	0021f856 	.word	0x0021f856
   32db8:	42850089 	.word	0x42850089
   32dbc:	4431440c 	.word	0x4431440c
   32dc0:	d30cd8d2 	.word	0xd30cd8d2
   32dc4:	d0063b01 	.word	0xd0063b01
   32dc8:	5d04f854 	.word	0x5d04f854
   32dcc:	0d04f851 	.word	0x0d04f851
   32dd0:	d9f64285 	.word	0xd9f64285
   32dd4:	461ae7c8 	.word	0x461ae7c8
   32dd8:	4610bc70 	.word	0x4610bc70
   32ddc:	42524770 	.word	0x42524770
   32de0:	f04fe7c2 	.word	0xf04fe7c2
   32de4:	e7bf32ff 	.word	0xe7bf32ff
   32de8:	e7bd2201 	.word	0xe7bd2201

00032dec <symbol_000ccad>:
   32dec:	2900b4f0 	.word	0x2900b4f0
   32df0:	68434605 	.word	0x68434605
   32df4:	2b00db32 	.word	0x2b00db32
   32df8:	6886d042 	.word	0x6886d042
   32dfc:	4280f103 	.word	0x4280f103
   32e00:	f8563a01 	.word	0xf8563a01
   32e04:	eb060022 	.word	0xeb060022
   32e08:	b9680282 	.word	0xb9680282
   32e0c:	30fff04f 	.word	0x30fff04f
   32e10:	e0022701 	.word	0xe0022701
   32e14:	4d04f852 	.word	0x4d04f852
   32e18:	3b01b93c 	.word	0x3b01b93c
   32e1c:	2900d1fa 	.word	0x2900d1fa
   32e20:	2000bf08 	.word	0x2000bf08
   32e24:	4770bcf0 	.word	0x4770bcf0
   32e28:	b1a12701 	.word	0xb1a12701
   32e2c:	d8122b01 	.word	0xd8122b01
   32e30:	28006828 	.word	0x28006828
   32e34:	1c7bdd01 	.word	0x1c7bdd01
   32e38:	2f01d01e 	.word	0x2f01d01e
   32e3c:	2800d101 	.word	0x2800d101
   32e40:	2900db24 	.word	0x2900db24
   32e44:	bfb86833 	.word	0xbfb86833
   32e48:	42994249 	.word	0x42994249
   32e4c:	d815d3ea 	.word	0xd815d3ea
   32e50:	2000bcf0 	.word	0x2000bcf0
   32e54:	68284770 	.word	0x68284770
   32e58:	4770bcf0 	.word	0x4770bcf0
   32e5c:	6886b163 	.word	0x6886b163
   32e60:	4280f103 	.word	0x4280f103
   32e64:	f8563a01 	.word	0xf8563a01
   32e68:	eb060022 	.word	0xeb060022
   32e6c:	b9500282 	.word	0xb9500282
   32e70:	f04f2001 	.word	0xf04f2001
   32e74:	e7d037ff 	.word	0xe7d037ff
   32e78:	e7d32001 	.word	0xe7d32001
   32e7c:	e7d14240 	.word	0xe7d14240
   32e80:	30fff04f 	.word	0x30fff04f
   32e84:	f04fe7cb 	.word	0xf04fe7cb
   32e88:	e7cf37ff 	.word	0xe7cf37ff
   32e8c:	30fff04f 	.word	0x30fff04f
   32e90:	bf00e7c8 	.word	0xbf00e7c8

00032e94 <symbol_000c914>:
   32e94:	e92d4290 	.word	0xe92d4290
   32e98:	460747f0 	.word	0x460747f0
   32e9c:	d006460c 	.word	0xd006460c
   32ea0:	46154288 	.word	0x46154288
   32ea4:	f7ffd002 	.word	0xf7ffd002
   32ea8:	b9a0fafb 	.word	0xb9a0fafb
   32eac:	2301462c 	.word	0x2301462c
   32eb0:	6865603b 	.word	0x6865603b
   32eb4:	68a3b175 	.word	0x68a3b175
   32eb8:	4280f105 	.word	0x4280f105
   32ebc:	f8533a01 	.word	0xf8533a01
   32ec0:	eb031022 	.word	0xeb031022
   32ec4:	b1190282 	.word	0xb1190282
   32ec8:	f852e007 	.word	0xf852e007
   32ecc:	b9211d04 	.word	0xb9211d04
   32ed0:	d1fa3d01 	.word	0xd1fa3d01
   32ed4:	e8bd2000 	.word	0xe8bd2000
   32ed8:	f24287f0 	.word	0xf24287f0
   32edc:	42957210 	.word	0x42957210
   32ee0:	687ad875 	.word	0x687ad875
   32ee4:	d27642aa 	.word	0xd27642aa
   32ee8:	46282104 	.word	0x46282104
   32eec:	fea8f002 	.word	0xfea8f002
   32ef0:	28004606 	.word	0x28004606
   32ef4:	68b9d06b 	.word	0x68b9d06b
   32ef8:	687ab189 	.word	0x687ab189
   32efc:	f00d0092 	.word	0xf00d0092
   32f00:	e9d7ff2f 	.word	0xe9d7ff2f
   32f04:	1e532001 	.word	0x1e532001
   32f08:	2200b13a 	.word	0x2200b13a
   32f0c:	1c593b01 	.word	0x1c593b01
   32f10:	f1006002 	.word	0xf1006002
   32f14:	d1f90004 	.word	0xd1f90004
   32f18:	f00268b8 	.word	0xf00268b8
   32f1c:	e9c7fea5 	.word	0xe9c7fea5
   32f20:	68a35601 	.word	0x68a35601
   32f24:	ea4f2400 	.word	0xea4f2400
   32f28:	f1a30a85 	.word	0xf1a30a85
   32f2c:	eb060c04 	.word	0xeb060c04
   32f30:	2200000a 	.word	0x2200000a
   32f34:	f10c6833 	.word	0xf10c6833
   32f38:	f8dc0c04 	.word	0xf8dc0c04
   32f3c:	191b1000 	.word	0x191b1000
   32f40:	bf284614 	.word	0xbf284614
   32f44:	185b2201 	.word	0x185b2201
   32f48:	2401bf28 	.word	0x2401bf28
   32f4c:	3b04f846 	.word	0x3b04f846
   32f50:	44144286 	.word	0x44144286
   32f54:	2c00d1ed 	.word	0x2c00d1ed
   32f58:	f242d0bc 	.word	0xf242d0bc
   32f5c:	f04f7810 	.word	0xf04f7810
   32f60:	e00f0900 	.word	0xe00f0900
   32f64:	eb0568bd 	.word	0xeb0568bd
   32f68:	6803000a 	.word	0x6803000a
   32f6c:	191c2200 	.word	0x191c2200
   32f70:	2201bf28 	.word	0x2201bf28
   32f74:	4b04f840 	.word	0x4b04f840
   32f78:	0a04f10a 	.word	0x0a04f10a
   32f7c:	24014635 	.word	0x24014635
   32f80:	d0a72a00 	.word	0xd0a72a00
   32f84:	1c6e687b 	.word	0x1c6e687b
   32f88:	d8ee42ab 	.word	0xd8ee42ab
   32f8c:	d81e4546 	.word	0xd81e4546
   32f90:	d2e742b3 	.word	0xd2e742b3
   32f94:	46302104 	.word	0x46302104
   32f98:	fe52f002 	.word	0xfe52f002
   32f9c:	b1b04605 	.word	0xb1b04605
   32fa0:	b18968b9 	.word	0xb18968b9
   32fa4:	0092687a 	.word	0x0092687a
   32fa8:	fedaf00d 	.word	0xfedaf00d
   32fac:	2001e9d7 	.word	0x2001e9d7
   32fb0:	b13a1e53 	.word	0xb13a1e53
   32fb4:	1c5a3b01 	.word	0x1c5a3b01
   32fb8:	9000f8c0 	.word	0x9000f8c0
   32fbc:	0004f100 	.word	0x0004f100
   32fc0:	68b8d1f8 	.word	0x68b8d1f8
   32fc4:	fe50f002 	.word	0xfe50f002
   32fc8:	6501e9c7 	.word	0x6501e9c7
   32fcc:	f06fe7cb 	.word	0xf06fe7cb
   32fd0:	e8bd000f 	.word	0xe8bd000f
   32fd4:	68be87f0 	.word	0x68be87f0
   32fd8:	bf00e7a4 	.word	0xbf00e7a4

00032fdc <symbol_0004fdf>:
   32fdc:	684bb5f0 	.word	0x684bb5f0
   32fe0:	b085460d 	.word	0xb085460d
   32fe4:	46064614 	.word	0x46064614
   32fe8:	b17b6851 	.word	0xb17b6851
   32fec:	f10368a8 	.word	0xf10368a8
   32ff0:	3a014280 	.word	0x3a014280
   32ff4:	7022f850 	.word	0x7022f850
   32ff8:	0082eb00 	.word	0x0082eb00
   32ffc:	e04fb127 	.word	0xe04fb127
   33000:	2d04f850 	.word	0x2d04f850
   33004:	d14b2a00 	.word	0xd14b2a00
   33008:	d1f93b01 	.word	0xd1f93b01
   3300c:	f101b189 	.word	0xf101b189
   33010:	68a74080 	.word	0x68a74080
   33014:	f8573801 	.word	0xf8573801
   33018:	2a002020 	.word	0x2a002020
   3301c:	8099f040 	.word	0x8099f040
   33020:	0080eb07 	.word	0x0080eb07
   33024:	f850e003 	.word	0xf850e003
   33028:	2a002d04 	.word	0x2a002d04
   3302c:	3901d142 	.word	0x3901d142
   33030:	2300d1f9 	.word	0x2300d1f9
   33034:	42b42201 	.word	0x42b42201
   33038:	2301e9cd 	.word	0x2301e9cd
   3303c:	d07f9303 	.word	0xd07f9303
   33040:	d00542b5 	.word	0xd00542b5
   33044:	46304629 	.word	0x46304629
   33048:	fa2af7ff 	.word	0xfa2af7ff
   3304c:	b9a84607 	.word	0xb9a84607
   33050:	60332301 	.word	0x60332301
   33054:	b1806860 	.word	0xb1806860
   33058:	c008f8d4 	.word	0xc008f8d4
   3305c:	4380f100 	.word	0x4380f100
   33060:	f85c3b01 	.word	0xf85c3b01
   33064:	eb0c2023 	.word	0xeb0c2023
   33068:	b1220383 	.word	0xb1220383
   3306c:	f853e042 	.word	0xf853e042
   33070:	2a002d04 	.word	0x2a002d04
   33074:	3801d13e 	.word	0x3801d13e
   33078:	2700d1f9 	.word	0x2700d1f9
   3307c:	b1609803 	.word	0xb1609803
   33080:	1e539a02 	.word	0x1e539a02
   33084:	2200b13a 	.word	0x2200b13a
   33088:	1c593b01 	.word	0x1c593b01
   3308c:	f1006002 	.word	0xf1006002
   33090:	d1f90004 	.word	0xd1f90004
   33094:	f0029803 	.word	0xf0029803
   33098:	4638fde7 	.word	0x4638fde7
   3309c:	bdf0b005 	.word	0xbdf0b005
   330a0:	d0c62900 	.word	0xd0c62900
   330a4:	4080f101 	.word	0x4080f101
   330a8:	380168a7 	.word	0x380168a7
   330ac:	2020f857 	.word	0x2020f857
   330b0:	d0b52a00 	.word	0xd0b52a00
   330b4:	d8bc428b 	.word	0xd8bc428b
   330b8:	2b00d34b 	.word	0x2b00d34b
   330bc:	68a8d0b9 	.word	0x68a8d0b9
   330c0:	4180f103 	.word	0x4180f103
   330c4:	f8503901 	.word	0xf8503901
   330c8:	f857c021 	.word	0xf857c021
   330cc:	0089e021 	.word	0x0089e021
   330d0:	440845e6 	.word	0x440845e6
   330d4:	0201eb07 	.word	0x0201eb07
   330d8:	d83ad3ab 	.word	0xd83ad3ab
   330dc:	e0064601 	.word	0xe0064601
   330e0:	7d04f851 	.word	0x7d04f851
   330e4:	0d04f852 	.word	0x0d04f852
   330e8:	d8a24287 	.word	0xd8a24287
   330ec:	3b01d331 	.word	0x3b01d331
   330f0:	e79ed1f6 	.word	0xe79ed1f6
   330f4:	462b2500 	.word	0x462b2500
   330f8:	f85168b1 	.word	0xf85168b1
   330fc:	35016b04 	.word	0x35016b04
   33100:	f8411af2 	.word	0xf8411af2
   33104:	f85c2c04 	.word	0xf85c2c04
   33108:	460c7b04 	.word	0x460c7b04
   3310c:	bf2c42ba 	.word	0xbf2c42ba
   33110:	0e00f04f 	.word	0x0e00f04f
   33114:	0e01f04f 	.word	0x0e01f04f
   33118:	429e1bd2 	.word	0x429e1bd2
   3311c:	4673bf2c 	.word	0x4673bf2c
   33120:	0301f10e 	.word	0x0301f10e
   33124:	f8414285 	.word	0xf8414285
   33128:	d3e62c04 	.word	0xd3e62c04
   3312c:	e7a4b90b 	.word	0xe7a4b90b
   33130:	68222301 	.word	0x68222301
   33134:	429a1ad1 	.word	0x429a1ad1
   33138:	1b04f844 	.word	0x1b04f844
   3313c:	e79cd3f8 	.word	0xe79cd3f8
   33140:	a8014621 	.word	0xa8014621
   33144:	f9acf7ff 	.word	0xf9acf7ff
   33148:	28004607 	.word	0x28004607
   3314c:	ac01d196 	.word	0xac01d196
   33150:	f06fe776 	.word	0xf06fe776
   33154:	46380709 	.word	0x46380709
   33158:	bdf0b005 	.word	0xbdf0b005

0003315c <symbol_0005cc7>:
   3315c:	41f0e92d 	.word	0x41f0e92d
   33160:	6813680c 	.word	0x6813680c
   33164:	fb034605 	.word	0xfb034605
   33168:	2b00f304 	.word	0x2b00f304
   3316c:	684bda39 	.word	0x684bda39
   33170:	460e4617 	.word	0x460e4617
   33174:	b1836852 	.word	0xb1836852
   33178:	f1036889 	.word	0xf1036889
   3317c:	38014080 	.word	0x38014080
   33180:	c020f851 	.word	0xc020f851
   33184:	0180eb01 	.word	0x0180eb01
   33188:	0f00f1bc 	.word	0x0f00f1bc
   3318c:	e02ed003 	.word	0xe02ed003
   33190:	0d04f851 	.word	0x0d04f851
   33194:	3b01bb58 	.word	0x3b01bb58
   33198:	b17ad1fa 	.word	0xb17ad1fa
   3319c:	4180f102 	.word	0x4180f102
   331a0:	c008f8d7 	.word	0xc008f8d7
   331a4:	f85c3901 	.word	0xf85c3901
   331a8:	b9780021 	.word	0xb9780021
   331ac:	0181eb0c 	.word	0x0181eb0c
   331b0:	f851e002 	.word	0xf851e002
   331b4:	bb280d04 	.word	0xbb280d04
   331b8:	d1fa3a01 	.word	0xd1fa3a01
   331bc:	4631463a 	.word	0x4631463a
   331c0:	f7ff4628 	.word	0xf7ff4628
   331c4:	b148ff0b 	.word	0xb148ff0b
   331c8:	81f0e8bd 	.word	0x81f0e8bd
   331cc:	46394632 	.word	0x46394632
   331d0:	f7ff4628 	.word	0xf7ff4628
   331d4:	2800ff03 	.word	0x2800ff03
   331d8:	4264d1f6 	.word	0x4264d1f6
   331dc:	e8bd602c 	.word	0xe8bd602c
   331e0:	f7ff81f0 	.word	0xf7ff81f0
   331e4:	2800fe57 	.word	0x2800fe57
   331e8:	602cd1ee 	.word	0x602cd1ee
   331ec:	2a00e7f7 	.word	0x2a00e7f7
   331f0:	f102d0e4 	.word	0xf102d0e4
   331f4:	f8d74180 	.word	0xf8d74180
   331f8:	3901c008 	.word	0x3901c008
   331fc:	0021f85c 	.word	0x0021f85c
   33200:	d0d32800 	.word	0xd0d32800
   33204:	d8d94293 	.word	0xd8d94293
   33208:	2b00d3e0 	.word	0x2b00d3e0
   3320c:	68b0d0d6 	.word	0x68b0d0d6
   33210:	4180f103 	.word	0x4180f103
   33214:	f8503901 	.word	0xf8503901
   33218:	f85c8021 	.word	0xf85c8021
   3321c:	0089e021 	.word	0x0089e021
   33220:	440845f0 	.word	0x440845f0
   33224:	0201eb0c 	.word	0x0201eb0c
   33228:	d3cfd8c8 	.word	0xd3cfd8c8
   3322c:	e0064601 	.word	0xe0064601
   33230:	cd04f851 	.word	0xcd04f851
   33234:	0d04f852 	.word	0x0d04f852
   33238:	d8bf4584 	.word	0xd8bf4584
   3323c:	3b01d3c6 	.word	0x3b01d3c6
   33240:	e7bbd1f6 	.word	0xe7bbd1f6

00033244 <symbol_000d773>:
   33244:	41f0e92d 	.word	0x41f0e92d
   33248:	6813680c 	.word	0x6813680c
   3324c:	fb034605 	.word	0xfb034605
   33250:	2b00f304 	.word	0x2b00f304
   33254:	684bdd64 	.word	0x684bdd64
   33258:	460e4617 	.word	0x460e4617
   3325c:	b1836852 	.word	0xb1836852
   33260:	f1036889 	.word	0xf1036889
   33264:	38014080 	.word	0x38014080
   33268:	c020f851 	.word	0xc020f851
   3326c:	0180eb01 	.word	0x0180eb01
   33270:	0f00f1bc 	.word	0x0f00f1bc
   33274:	e01fd003 	.word	0xe01fd003
   33278:	0d04f851 	.word	0x0d04f851
   3327c:	3b01b9e0 	.word	0x3b01b9e0
   33280:	b182d1fa 	.word	0xb182d1fa
   33284:	4180f102 	.word	0x4180f102
   33288:	c008f8d7 	.word	0xc008f8d7
   3328c:	f85c3901 	.word	0xf85c3901
   33290:	28000021 	.word	0x28000021
   33294:	eb0cd13b 	.word	0xeb0cd13b
   33298:	e0020181 	.word	0xe0020181
   3329c:	0d04f851 	.word	0x0d04f851
   332a0:	3a01b9a8 	.word	0x3a01b9a8
   332a4:	463ad1fa 	.word	0x463ad1fa
   332a8:	46284631 	.word	0x46284631
   332ac:	fe96f7ff 	.word	0xfe96f7ff
   332b0:	602cb900 	.word	0x602cb900
   332b4:	81f0e8bd 	.word	0x81f0e8bd
   332b8:	d0f42a00 	.word	0xd0f42a00
   332bc:	4180f102 	.word	0x4180f102
   332c0:	c008f8d7 	.word	0xc008f8d7
   332c4:	f85c3901 	.word	0xf85c3901
   332c8:	28000021 	.word	0x28000021
   332cc:	4293d0e3 	.word	0x4293d0e3
   332d0:	d31cd8e9 	.word	0xd31cd8e9
   332d4:	d0e62b00 	.word	0xd0e62b00
   332d8:	f10368b0 	.word	0xf10368b0
   332dc:	39014180 	.word	0x39014180
   332e0:	8021f850 	.word	0x8021f850
   332e4:	e021f85c 	.word	0xe021f85c
   332e8:	45f00089 	.word	0x45f00089
   332ec:	eb0c4408 	.word	0xeb0c4408
   332f0:	d8d80201 	.word	0xd8d80201
   332f4:	4601d30b 	.word	0x4601d30b
   332f8:	f851e006 	.word	0xf851e006
   332fc:	f852cd04 	.word	0xf852cd04
   33300:	45840d04 	.word	0x45840d04
   33304:	d302d8cf 	.word	0xd302d8cf
   33308:	d1f63b01 	.word	0xd1f63b01
   3330c:	4632e7cb 	.word	0x4632e7cb
   33310:	46284639 	.word	0x46284639
   33314:	fe62f7ff 	.word	0xfe62f7ff
   33318:	d1cb2800 	.word	0xd1cb2800
   3331c:	e7c84264 	.word	0xe7c84264
   33320:	fdb8f7ff 	.word	0xfdb8f7ff
   33324:	d0c42800 	.word	0xd0c42800
   33328:	81f0e8bd 	.word	0x81f0e8bd

0003332c <symbol_000f268>:
   3332c:	bfac2a00 	.word	0xbfac2a00
   33330:	f04f2301 	.word	0xf04f2301
   33334:	b5f033ff 	.word	0xb5f033ff
   33338:	680d2601 	.word	0x680d2601
   3333c:	7ce2ea82 	.word	0x7ce2ea82
   33340:	f703fb05 	.word	0xf703fb05
   33344:	ebacb085 	.word	0xebacb085
   33348:	2f007ce2 	.word	0x2f007ce2
   3334c:	e9cd9602 	.word	0xe9cd9602
   33350:	f8cdc300 	.word	0xf8cdc300
   33354:	4606d00c 	.word	0x4606d00c
   33358:	684bdd2c 	.word	0x684bdd2c
   3335c:	b173460c 	.word	0xb173460c
   33360:	f10368a7 	.word	0xf10368a7
   33364:	39014180 	.word	0x39014180
   33368:	0021f857 	.word	0x0021f857
   3336c:	0181eb07 	.word	0x0181eb07
   33370:	e00eb118 	.word	0xe00eb118
   33374:	0d04f851 	.word	0x0d04f851
   33378:	3b01b958 	.word	0x3b01b958
   3337c:	b982d1fa 	.word	0xb982d1fa
   33380:	aa014621 	.word	0xaa014621
   33384:	f7ff4630 	.word	0xf7ff4630
   33388:	b900f8f9 	.word	0xb900f8f9
   3338c:	b0056035 	.word	0xb0056035
   33390:	2a00bdf0 	.word	0x2a00bdf0
   33394:	2b01d0f4 	.word	0x2b01d0f4
   33398:	683bd8f2 	.word	0x683bd8f2
   3339c:	d3ef459c 	.word	0xd3ef459c
   333a0:	4622d9ee 	.word	0x4622d9ee
   333a4:	4630a901 	.word	0x4630a901
   333a8:	fe18f7ff 	.word	0xfe18f7ff
   333ac:	d1ee2800 	.word	0xd1ee2800
   333b0:	e7eb426d 	.word	0xe7eb426d
   333b4:	f7ffaa01 	.word	0xf7ffaa01
   333b8:	2800fd6d 	.word	0x2800fd6d
   333bc:	b005d0e6 	.word	0xb005d0e6
   333c0:	bf00bdf0 	.word	0xbf00bdf0

000333c4 <symbol_000b923>:
   333c4:	47f0e92d 	.word	0x47f0e92d
   333c8:	23004606 	.word	0x23004606
   333cc:	b0862001 	.word	0xb0862001
   333d0:	4690428e 	.word	0x4690428e
   333d4:	90039000 	.word	0x90039000
   333d8:	3301e9cd 	.word	0x3301e9cd
   333dc:	3304e9cd 	.word	0x3304e9cd
   333e0:	80d1f000 	.word	0x80d1f000
   333e4:	4546460f 	.word	0x4546460f
   333e8:	80d5f000 	.word	0x80d5f000
   333ec:	b185687d 	.word	0xb185687d
   333f0:	f10568bb 	.word	0xf10568bb
   333f4:	3a014280 	.word	0x3a014280
   333f8:	1022f853 	.word	0x1022f853
   333fc:	0382eb03 	.word	0x0382eb03
   33400:	e0bab129 	.word	0xe0bab129
   33404:	2d04f853 	.word	0x2d04f853
   33408:	f0402a00 	.word	0xf0402a00
   3340c:	3d0180b6 	.word	0x3d0180b6
   33410:	f8d8d1f8 	.word	0xf8d8d1f8
   33414:	25004004 	.word	0x25004004
   33418:	d03d2c00 	.word	0xd03d2c00
   3341c:	3008f8d8 	.word	0x3008f8d8
   33420:	4280f104 	.word	0x4280f104
   33424:	f8533a01 	.word	0xf8533a01
   33428:	eb031022 	.word	0xeb031022
   3342c:	b1190382 	.word	0xb1190382
   33430:	f853e004 	.word	0xf853e004
   33434:	b90a2d04 	.word	0xb90a2d04
   33438:	d1fa3c01 	.word	0xd1fa3c01
   3343c:	7310f242 	.word	0x7310f242
   33440:	0905eb04 	.word	0x0905eb04
   33444:	f2004599 	.word	0xf2004599
   33448:	f8d680b0 	.word	0xf8d680b0
   3344c:	45d1a004 	.word	0x45d1a004
   33450:	2104d925 	.word	0x2104d925
   33454:	f0024648 	.word	0xf0024648
   33458:	4682fbf3 	.word	0x4682fbf3
   3345c:	f0002800 	.word	0xf0002800
   33460:	68b180a4 	.word	0x68b180a4
   33464:	6872b189 	.word	0x6872b189
   33468:	f00d0092 	.word	0xf00d0092
   3346c:	e9d6fc79 	.word	0xe9d6fc79
   33470:	1e532001 	.word	0x1e532001
   33474:	2200b13a 	.word	0x2200b13a
   33478:	1c593b01 	.word	0x1c593b01
   3347c:	f1006002 	.word	0xf1006002
   33480:	d1f90004 	.word	0xd1f90004
   33484:	f00268b0 	.word	0xf00268b0
   33488:	e9c6fbef 	.word	0xe9c6fbef
   3348c:	ea4f9a01 	.word	0xea4f9a01
   33490:	f8d60289 	.word	0xf8d60289
   33494:	e0259008 	.word	0xe0259008
   33498:	f8d64625 	.word	0xf8d64625
   3349c:	f1baa004 	.word	0xf1baa004
   334a0:	f0400f00 	.word	0xf0400f00
   334a4:	21048085 	.word	0x21048085
   334a8:	f0022001 	.word	0xf0022001
   334ac:	4681fbc9 	.word	0x4681fbc9
   334b0:	d07a2800 	.word	0xd07a2800
   334b4:	b18968b1 	.word	0xb18968b1
   334b8:	00926872 	.word	0x00926872
   334bc:	fc50f00d 	.word	0xfc50f00d
   334c0:	2001e9d6 	.word	0x2001e9d6
   334c4:	b13a1e53 	.word	0xb13a1e53
   334c8:	3b014652 	.word	0x3b014652
   334cc:	60021c59 	.word	0x60021c59
   334d0:	0004f100 	.word	0x0004f100
   334d4:	68b0d1f9 	.word	0x68b0d1f9
   334d8:	fbc6f002 	.word	0xfbc6f002
   334dc:	22042301 	.word	0x22042301
   334e0:	3901e9c6 	.word	0x3901e9c6
   334e4:	46482100 	.word	0x46482100
   334e8:	fc5af00d 	.word	0xfc5af00d
   334ec:	23012100 	.word	0x23012100
   334f0:	601168b2 	.word	0x601168b2
   334f4:	b19c6033 	.word	0xb19c6033
   334f8:	4980f104 	.word	0x4980f104
   334fc:	39fff109 	.word	0x39fff109
   33500:	0989ea4f 	.word	0x0989ea4f
   33504:	3008f8d8 	.word	0x3008f8d8
   33508:	f85368b2 	.word	0xf85368b2
   3350c:	444a3009 	.word	0x444a3009
   33510:	462868b9 	.word	0x462868b9
   33514:	fc14f7fe 	.word	0xfc14f7fe
   33518:	f1a93c01 	.word	0xf1a93c01
   3351c:	d1f10904 	.word	0xd1f10904
   33520:	683a2400 	.word	0x683a2400
   33524:	3000f8d8 	.word	0x3000f8d8
   33528:	f302fb03 	.word	0xf302fb03
   3352c:	98056033 	.word	0x98056033
   33530:	9a04b160 	.word	0x9a04b160
   33534:	b13a1e53 	.word	0xb13a1e53
   33538:	3b012200 	.word	0x3b012200
   3353c:	60021c5d 	.word	0x60021c5d
   33540:	0004f100 	.word	0x0004f100
   33544:	9805d1f9 	.word	0x9805d1f9
   33548:	fb8ef002 	.word	0xfb8ef002
   3354c:	23012200 	.word	0x23012200
   33550:	e9cd9802 	.word	0xe9cd9802
   33554:	92053203 	.word	0x92053203
   33558:	9901b158 	.word	0x9901b158
   3355c:	b1311e4b 	.word	0xb1311e4b
   33560:	1c593b01 	.word	0x1c593b01
   33564:	f1006002 	.word	0xf1006002
   33568:	d1f90004 	.word	0xd1f90004
   3356c:	f0029802 	.word	0xf0029802
   33570:	4620fb7b 	.word	0x4620fb7b
   33574:	e8bdb006 	.word	0xe8bdb006
   33578:	f8d887f0 	.word	0xf8d887f0
   3357c:	2c004004 	.word	0x2c004004
   33580:	af4cf47f 	.word	0xaf4cf47f
   33584:	4668e75a 	.word	0x4668e75a
   33588:	ff8af7fe 	.word	0xff8af7fe
   3358c:	28004604 	.word	0x28004604
   33590:	466fd1cd 	.word	0x466fd1cd
   33594:	a803e727 	.word	0xa803e727
   33598:	f7fe4631 	.word	0xf7fe4631
   3359c:	4604ff81 	.word	0x4604ff81
   335a0:	d1c42800 	.word	0xd1c42800
   335a4:	080cf10d 	.word	0x080cf10d
   335a8:	f06fe720 	.word	0xf06fe720
   335ac:	e7be040f 	.word	0xe7be040f
   335b0:	e76c46d1 	.word	0xe76c46d1

000335b4 <symbol_0008c0f>:
   335b4:	b5002301 	.word	0xb5002301
   335b8:	9200b085 	.word	0x9200b085
   335bc:	e9cdaa01 	.word	0xe9cdaa01
   335c0:	f8cd3301 	.word	0xf8cd3301
   335c4:	f7ffd00c 	.word	0xf7ffd00c
   335c8:	b005fefd 	.word	0xb005fefd
   335cc:	fb04f85d 	.word	0xfb04f85d

000335d0 <symbol_0007bb0>:
   335d0:	4ff0e92d 	.word	0x4ff0e92d
   335d4:	b0a3685e 	.word	0xb0a3685e
   335d8:	f8d3b196 	.word	0xf8d3b196
   335dc:	f1068008 	.word	0xf1068008
   335e0:	f1094980 	.word	0xf1094980
   335e4:	f85839ff 	.word	0xf85839ff
   335e8:	eb085029 	.word	0xeb085029
   335ec:	b96d0e89 	.word	0xb96d0e89
   335f0:	463746f4 	.word	0x463746f4
   335f4:	f85ce002 	.word	0xf85ce002
   335f8:	b93c4d04 	.word	0xb93c4d04
   335fc:	d1fa3f01 	.word	0xd1fa3f01
   33600:	060bf06f 	.word	0x060bf06f
   33604:	b0234630 	.word	0xb0234630
   33608:	8ff0e8bd 	.word	0x8ff0e8bd
   3360c:	2d00681d 	.word	0x2d00681d
   33610:	4614d0f6 	.word	0x4614d0f6
   33614:	2200468a 	.word	0x2200468a
   33618:	469b2101 	.word	0x469b2101
   3361c:	46056863 	.word	0x46056863
   33620:	91139110 	.word	0x91139110
   33624:	91199116 	.word	0x91199116
   33628:	e9cd911c 	.word	0xe9cd911c
   3362c:	e9cd2211 	.word	0xe9cd2211
   33630:	e9cd2214 	.word	0xe9cd2214
   33634:	e9cd2217 	.word	0xe9cd2217
   33638:	e9cd221a 	.word	0xe9cd221a
   3363c:	2b00221d 	.word	0x2b00221d
   33640:	821af000 	.word	0x821af000
   33644:	f10368a2 	.word	0xf10368a2
   33648:	39014180 	.word	0x39014180
   3364c:	0021f852 	.word	0x0021f852
   33650:	0281eb02 	.word	0x0281eb02
   33654:	e07bb120 	.word	0xe07bb120
   33658:	1d04f852 	.word	0x1d04f852
   3365c:	d1772900 	.word	0xd1772900
   33660:	d1f93b01 	.word	0xd1f93b01
   33664:	2029f858 	.word	0x2029f858
   33668:	d1772a00 	.word	0xd1772a00
   3366c:	e0034672 	.word	0xe0034672
   33670:	1d04f852 	.word	0x1d04f852
   33674:	d16f2900 	.word	0xd16f2900
   33678:	d1f93e01 	.word	0xd1f93e01
   3367c:	4621a810 	.word	0x4621a810
   33680:	ff0ef7fe 	.word	0xff0ef7fe
   33684:	28004606 	.word	0x28004606
   33688:	8092f000 	.word	0x8092f000
   3368c:	98122700 	.word	0x98122700
   33690:	9a11b160 	.word	0x9a11b160
   33694:	b13a1e53 	.word	0xb13a1e53
   33698:	3b012200 	.word	0x3b012200
   3369c:	60021c5c 	.word	0x60021c5c
   336a0:	0004f100 	.word	0x0004f100
   336a4:	9812d1f9 	.word	0x9812d1f9
   336a8:	fadef002 	.word	0xfadef002
   336ac:	23012200 	.word	0x23012200
   336b0:	e9cd9815 	.word	0xe9cd9815
   336b4:	92123210 	.word	0x92123210
   336b8:	9914b158 	.word	0x9914b158
   336bc:	b1311e4b 	.word	0xb1311e4b
   336c0:	1c593b01 	.word	0x1c593b01
   336c4:	f1006002 	.word	0xf1006002
   336c8:	d1f90004 	.word	0xd1f90004
   336cc:	f0029815 	.word	0xf0029815
   336d0:	2200facb 	.word	0x2200facb
   336d4:	98182301 	.word	0x98182301
   336d8:	3213e9cd 	.word	0x3213e9cd
   336dc:	b1589215 	.word	0xb1589215
   336e0:	1e4b9917 	.word	0x1e4b9917
   336e4:	3b01b131 	.word	0x3b01b131
   336e8:	60021c5d 	.word	0x60021c5d
   336ec:	0004f100 	.word	0x0004f100
   336f0:	9818d1f9 	.word	0x9818d1f9
   336f4:	fab8f002 	.word	0xfab8f002
   336f8:	23012200 	.word	0x23012200
   336fc:	e9cd981b 	.word	0xe9cd981b
   33700:	92183216 	.word	0x92183216
   33704:	991ab158 	.word	0x991ab158
   33708:	b1311e4b 	.word	0xb1311e4b
   3370c:	1c5c3b01 	.word	0x1c5c3b01
   33710:	f1006002 	.word	0xf1006002
   33714:	d1f90004 	.word	0xd1f90004
   33718:	f002981b 	.word	0xf002981b
   3371c:	2100faa5 	.word	0x2100faa5
   33720:	911b2301 	.word	0x911b2301
   33724:	3119e9cd 	.word	0x3119e9cd
   33728:	f43f2f00 	.word	0xf43f2f00
   3372c:	9a1daf6b 	.word	0x9a1daf6b
   33730:	b1321e53 	.word	0xb1321e53
   33734:	3b01463a 	.word	0x3b01463a
   33738:	60111c58 	.word	0x60111c58
   3373c:	0204f102 	.word	0x0204f102
   33740:	4638d1f9 	.word	0x4638d1f9
   33744:	fa90f002 	.word	0xfa90f002
   33748:	b0234630 	.word	0xb0234630
   3374c:	8ff0e8bd 	.word	0x8ff0e8bd
   33750:	2029f858 	.word	0x2029f858
   33754:	d0892a00 	.word	0xd0892a00
   33758:	d38f429e 	.word	0xd38f429e
   3375c:	f200429e 	.word	0xf200429e
   33760:	2b008190 	.word	0x2b008190
   33764:	68a1d08a 	.word	0x68a1d08a
   33768:	4280f103 	.word	0x4280f103
   3376c:	f8513a01 	.word	0xf8513a01
   33770:	f8580022 	.word	0xf8580022
   33774:	00926022 	.word	0x00926022
   33778:	44114286 	.word	0x44114286
   3377c:	f4ff4490 	.word	0xf4ff4490
   33780:	f200af7d 	.word	0xf200af7d
   33784:	460a817e 	.word	0x460a817e
   33788:	f852e008 	.word	0xf852e008
   3378c:	f8580d04 	.word	0xf8580d04
   33790:	42881d04 	.word	0x42881d04
   33794:	af72f63f 	.word	0xaf72f63f
   33798:	8173f0c0 	.word	0x8173f0c0
   3379c:	d1f43b01 	.word	0xd1f43b01
   337a0:	4621a810 	.word	0x4621a810
   337a4:	fe7cf7fe 	.word	0xfe7cf7fe
   337a8:	28004606 	.word	0x28004606
   337ac:	af6ef47f 	.word	0xaf6ef47f
   337b0:	4659a813 	.word	0x4659a813
   337b4:	fe74f7fe 	.word	0xfe74f7fe
   337b8:	28004606 	.word	0x28004606
   337bc:	af66f47f 	.word	0xaf66f47f
   337c0:	7210f242 	.word	0x7210f242
   337c4:	68672301 	.word	0x68672301
   337c8:	37029313 	.word	0x37029313
   337cc:	93104297 	.word	0x93104297
   337d0:	8193f200 	.word	0x8193f200
   337d4:	805cf8dd 	.word	0x805cf8dd
   337d8:	d91d4547 	.word	0xd91d4547
   337dc:	46382104 	.word	0x46382104
   337e0:	fa2ef002 	.word	0xfa2ef002
   337e4:	28004681 	.word	0x28004681
   337e8:	8187f000 	.word	0x8187f000
   337ec:	b1819918 	.word	0xb1819918
   337f0:	00929a17 	.word	0x00929a17
   337f4:	fab4f00d 	.word	0xfab4f00d
   337f8:	2017e9dd 	.word	0x2017e9dd
   337fc:	b1321e53 	.word	0xb1321e53
   33800:	1c5a3b01 	.word	0x1c5a3b01
   33804:	f1006006 	.word	0xf1006006
   33808:	d1f90004 	.word	0xd1f90004
   3380c:	f0029818 	.word	0xf0029818
   33810:	46b8fa2b 	.word	0x46b8fa2b
   33814:	7917e9cd 	.word	0x7917e9cd
   33818:	0f00f1b8 	.word	0x0f00f1b8
   3381c:	8171f000 	.word	0x8171f000
   33820:	ea4f9e18 	.word	0xea4f9e18
   33824:	27000288 	.word	0x27000288
   33828:	46394630 	.word	0x46394630
   3382c:	fab8f00d 	.word	0xfab8f00d
   33830:	9b182201 	.word	0x9b182201
   33834:	9b1a601f 	.word	0x9b1a601f
   33838:	42939216 	.word	0x42939216
   3383c:	81b2f240 	.word	0x81b2f240
   33840:	20032104 	.word	0x20032104
   33844:	f9fcf002 	.word	0xf9fcf002
   33848:	28004607 	.word	0x28004607
   3384c:	8155f000 	.word	0x8155f000
   33850:	9a142303 	.word	0x9a142303
   33854:	301de9cd 	.word	0x301de9cd
   33858:	2a009203 	.word	0x2a009203
   3385c:	8171f000 	.word	0x8171f000
   33860:	0901f1b2 	.word	0x0901f1b2
   33864:	f0009915 	.word	0xf0009915
   33868:	f85181cf 	.word	0xf85181cf
   3386c:	28000029 	.word	0x28000029
   33870:	81c5f040 	.word	0x81c5f040
   33874:	4280f102 	.word	0x4280f102
   33878:	464b3a01 	.word	0x464b3a01
   3387c:	0282eb01 	.word	0x0282eb01
   33880:	f852e004 	.word	0xf852e004
   33884:	28000d04 	.word	0x28000d04
   33888:	81aef040 	.word	0x81aef040
   3388c:	d1f83b01 	.word	0xd1f83b01
   33890:	68082620 	.word	0x68082620
   33894:	f04f2200 	.word	0xf04f2200
   33898:	e0024100 	.word	0xe0024100
   3389c:	2a203201 	.word	0x2a203201
   338a0:	4201d004 	.word	0x4201d004
   338a4:	0151ea4f 	.word	0x0151ea4f
   338a8:	1ab3d0f8 	.word	0x1ab3d0f8
   338ac:	031ff003 	.word	0x031ff003
   338b0:	f0402b1f 	.word	0xf0402b1f
   338b4:	2300819f 	.word	0x2300819f
   338b8:	9b119302 	.word	0x9b119302
   338bc:	9304a813 	.word	0x9304a813
   338c0:	eba33b01 	.word	0xeba33b01
   338c4:	93010809 	.word	0x93010809
   338c8:	1348ea4f 	.word	0x1348ea4f
   338cc:	93054619 	.word	0x93054619
   338d0:	f8fef7ff 	.word	0xf8fef7ff
   338d4:	28004606 	.word	0x28004606
   338d8:	aed9f47f 	.word	0xaed9f47f
   338dc:	0888ea4f 	.word	0x0888ea4f
   338e0:	9818e00d 	.word	0x9818e00d
   338e4:	f850a910 	.word	0xf850a910
   338e8:	aa133008 	.word	0xaa133008
   338ec:	f8403301 	.word	0xf8403301
   338f0:	46083008 	.word	0x46083008
   338f4:	fca6f7ff 	.word	0xfca6f7ff
   338f8:	f0402800 	.word	0xf0402800
   338fc:	a9138179 	.word	0xa9138179
   33900:	f7ffa810 	.word	0xf7ffa810
   33904:	2800fa0b 	.word	0x2800fa0b
   33908:	9905daeb 	.word	0x9905daeb
   3390c:	f7ffa813 	.word	0xf7ffa813
   33910:	4606f995 	.word	0x4606f995
   33914:	f47f2800 	.word	0xf47f2800
   33918:	f06faeba 	.word	0xf06faeba
   3391c:	9a030303 	.word	0x9a030303
   33920:	b508e9cd 	.word	0xb508e9cd
   33924:	4780f102 	.word	0x4780f102
   33928:	fb039a04 	.word	0xfb039a04
   3392c:	f102f309 	.word	0xf102f309
   33930:	3a024280 	.word	0x3a024280
   33934:	46150092 	.word	0x46150092
   33938:	ea4f9305 	.word	0xea4f9305
   3393c:	93030389 	.word	0x93030389
   33940:	63c9ebc9 	.word	0x63c9ebc9
   33944:	e9cd3f02 	.word	0xe9cd3f02
   33948:	e9cd3006 	.word	0xe9cd3006
   3394c:	00b9a40a 	.word	0x00b9a40a
   33950:	9b019104 	.word	0x9b019104
   33954:	f240454b 	.word	0xf240454b
   33958:	98038173 	.word	0x98038173
   3395c:	9a159912 	.word	0x9a159912
   33960:	0a04f105 	.word	0x0a04f105
   33964:	f8515812 	.word	0xf8515812
   33968:	9805300a 	.word	0x9805300a
   3396c:	eb004293 	.word	0xeb004293
   33970:	9e180405 	.word	0x9e180405
   33974:	814cf0c0 	.word	0x814cf0c0
   33978:	33fff04f 	.word	0x33fff04f
   3397c:	26015133 	.word	0x26015133
   33980:	9f1e9a18 	.word	0x9f1e9a18
   33984:	f1a55913 	.word	0xf1a55913
   33988:	44330b04 	.word	0x44330b04
   3398c:	e04b5113 	.word	0xe04b5113
   33990:	806cf8dd 	.word	0x806cf8dd
   33994:	46400092 	.word	0x46400092
   33998:	f00d2100 	.word	0xf00d2100
   3399c:	2200fa01 	.word	0x2200fa01
   339a0:	601a9b1b 	.word	0x601a9b1b
   339a4:	f1b99619 	.word	0xf1b99619
   339a8:	f0000f00 	.word	0xf0000f00
   339ac:	9b1580f9 	.word	0x9b1580f9
   339b0:	589b9a04 	.word	0x589b9a04
   339b4:	99039a1b 	.word	0x99039a1b
   339b8:	9a156013 	.word	0x9a156013
   339bc:	58529b1b 	.word	0x58529b1b
   339c0:	605aa919 	.word	0x605aa919
   339c4:	f10d9b18 	.word	0xf10d9b18
   339c8:	591b083c 	.word	0x591b083c
   339cc:	4608aa1f 	.word	0x4608aa1f
   339d0:	e9cd930f 	.word	0xe9cd930f
   339d4:	f8cd661f 	.word	0xf8cd661f
   339d8:	f7ff8084 	.word	0xf7ff8084
   339dc:	2800fcf3 	.word	0x2800fcf3
   339e0:	8106f040 	.word	0x8106f040
   339e4:	2a009a1d 	.word	0x2a009a1d
   339e8:	80c2f000 	.word	0x80c2f000
   339ec:	21000092 	.word	0x21000092
   339f0:	f00d4638 	.word	0xf00d4638
   339f4:	2300f9d5 	.word	0x2300f9d5
   339f8:	9b01603b 	.word	0x9b01603b
   339fc:	2b01961c 	.word	0x2b01961c
   33a00:	9b12a91c 	.word	0x9b12a91c
   33a04:	80edf000 	.word	0x80edf000
   33a08:	300bf853 	.word	0x300bf853
   33a0c:	603ba819 	.word	0x603ba819
   33a10:	595b9b12 	.word	0x595b9b12
   33a14:	9b12607b 	.word	0x9b12607b
   33a18:	300af853 	.word	0x300af853
   33a1c:	f7ff60bb 	.word	0xf7ff60bb
   33a20:	2800f97d 	.word	0x2800f97d
   33a24:	811cf340 	.word	0x811cf340
   33a28:	59139a18 	.word	0x59139a18
   33a2c:	51133b01 	.word	0x51133b01
   33a30:	2a009a1a 	.word	0x2a009a1a
   33a34:	2104d1ac 	.word	0x2104d1ac
   33a38:	f0022001 	.word	0xf0022001
   33a3c:	4680f901 	.word	0x4680f901
   33a40:	f0002800 	.word	0xf0002800
   33a44:	991b8140 	.word	0x991b8140
   33a48:	9a1ab191 	.word	0x9a1ab191
   33a4c:	f00d0092 	.word	0xf00d0092
   33a50:	e9ddf987 	.word	0xe9ddf987
   33a54:	4602101a 	.word	0x4602101a
   33a58:	b1391e4b 	.word	0xb1391e4b
   33a5c:	3b012100 	.word	0x3b012100
   33a60:	1c596011 	.word	0x1c596011
   33a64:	0204f102 	.word	0x0204f102
   33a68:	981bd1f8 	.word	0x981bd1f8
   33a6c:	f8fcf002 	.word	0xf8fcf002
   33a70:	e9cd2204 	.word	0xe9cd2204
   33a74:	e78e681a 	.word	0xe78e681a
   33a78:	2029f858 	.word	0x2029f858
   33a7c:	f43f2a00 	.word	0xf43f2a00
   33a80:	b355adf5 	.word	0xb355adf5
   33a84:	b9ee686e 	.word	0xb9ee686e
   33a88:	20012104 	.word	0x20012104
   33a8c:	f8d8f002 	.word	0xf8d8f002
   33a90:	b3904607 	.word	0xb3904607
   33a94:	b18168a9 	.word	0xb18168a9
   33a98:	0092686a 	.word	0x0092686a
   33a9c:	f960f00d 	.word	0xf960f00d
   33aa0:	2001e9d5 	.word	0x2001e9d5
   33aa4:	b1321e53 	.word	0xb1321e53
   33aa8:	1c593b01 	.word	0x1c593b01
   33aac:	f1006006 	.word	0xf1006006
   33ab0:	d1f90004 	.word	0xd1f90004
   33ab4:	f00268a8 	.word	0xf00268a8
   33ab8:	2301f8d7 	.word	0x2301f8d7
   33abc:	e9c52204 	.word	0xe9c52204
   33ac0:	e0013701 	.word	0xe0013701
   33ac4:	00b268af 	.word	0x00b268af
   33ac8:	46382100 	.word	0x46382100
   33acc:	f968f00d 	.word	0xf968f00d
   33ad0:	23012100 	.word	0x23012100
   33ad4:	601168aa 	.word	0x601168aa
   33ad8:	f1ba602b 	.word	0xf1ba602b
   33adc:	d0070f00 	.word	0xd0070f00
   33ae0:	46504621 	.word	0x46504621
   33ae4:	fcdcf7fe 	.word	0xfcdcf7fe
   33ae8:	28004606 	.word	0x28004606
   33aec:	adcef47f 	.word	0xadcef47f
   33af0:	46302600 	.word	0x46302600
   33af4:	e8bdb023 	.word	0xe8bdb023
   33af8:	27008ff0 	.word	0x27008ff0
   33afc:	060ff06f 	.word	0x060ff06f
   33b00:	2104e5c5 	.word	0x2104e5c5
   33b04:	f0022001 	.word	0xf0022001
   33b08:	4606f89b 	.word	0x4606f89b
   33b0c:	d0f42800 	.word	0xd0f42800
   33b10:	b1899918 	.word	0xb1899918
   33b14:	00929a17 	.word	0x00929a17
   33b18:	f922f00d 	.word	0xf922f00d
   33b1c:	3017e9dd 	.word	0x3017e9dd
   33b20:	b13b1e5a 	.word	0xb13b1e5a
   33b24:	3a014643 	.word	0x3a014643
   33b28:	60031c57 	.word	0x60031c57
   33b2c:	0004f100 	.word	0x0004f100
   33b30:	9818d1f9 	.word	0x9818d1f9
   33b34:	f898f002 	.word	0xf898f002
   33b38:	22042301 	.word	0x22042301
   33b3c:	3617e9cd 	.word	0x3617e9cd
   33b40:	231fe671 	.word	0x231fe671
   33b44:	93024619 	.word	0x93024619
   33b48:	f7fea810 	.word	0xf7fea810
   33b4c:	4606ffc1 	.word	0x4606ffc1
   33b50:	f47f2800 	.word	0xf47f2800
   33b54:	9902ad9c 	.word	0x9902ad9c
   33b58:	f7fea813 	.word	0xf7fea813
   33b5c:	4606ffb9 	.word	0x4606ffb9
   33b60:	f47f2800 	.word	0xf47f2800
   33b64:	9b14ad94 	.word	0x9b14ad94
   33b68:	f1039303 	.word	0xf1039303
   33b6c:	e6a439ff 	.word	0xe6a439ff
   33b70:	20012104 	.word	0x20012104
   33b74:	f002920d 	.word	0xf002920d
   33b78:	4603f863 	.word	0x4603f863
   33b7c:	f0002800 	.word	0xf0002800
   33b80:	b14780a2 	.word	0xb14780a2
   33b84:	46399a0d 	.word	0x46399a0d
   33b88:	f00d900c 	.word	0xf00d900c
   33b8c:	4638f8e9 	.word	0x4638f8e9
   33b90:	f86af002 	.word	0xf86af002
   33b94:	461f9b0c 	.word	0x461f9b0c
   33b98:	e9cd2204 	.word	0xe9cd2204
   33b9c:	e726631d 	.word	0xe726631d
   33ba0:	e707464b 	.word	0xe707464b
   33ba4:	20022104 	.word	0x20022104
   33ba8:	f84af002 	.word	0xf84af002
   33bac:	28004606 	.word	0x28004606
   33bb0:	991bd0a3 	.word	0x991bd0a3
   33bb4:	9a1ab189 	.word	0x9a1ab189
   33bb8:	f00d0092 	.word	0xf00d0092
   33bbc:	e9ddf8d1 	.word	0xe9ddf8d1
   33bc0:	4618131a 	.word	0x4618131a
   33bc4:	b1311e4a 	.word	0xb1311e4a
   33bc8:	1c503a01 	.word	0x1c503a01
   33bcc:	f103601f 	.word	0xf103601f
   33bd0:	d1f90304 	.word	0xd1f90304
   33bd4:	f002981b 	.word	0xf002981b
   33bd8:	2302f847 	.word	0x2302f847
   33bdc:	361ae9cd 	.word	0x361ae9cd
   33be0:	595be62e 	.word	0x595be62e
   33be4:	e715a819 	.word	0xe715a819
   33be8:	f103015b 	.word	0xf103015b
   33bec:	e6510620 	.word	0xe6510620
   33bf0:	e54c4606 	.word	0xe54c4606
   33bf4:	031ff1c3 	.word	0x031ff1c3
   33bf8:	46199302 	.word	0x46199302
   33bfc:	ea4fe7a4 	.word	0xea4fe7a4
   33c00:	f1031349 	.word	0xf1031349
   33c04:	e6450620 	.word	0xe6450620
   33c08:	26206808 	.word	0x26206808
   33c0c:	e641464b 	.word	0xe641464b
   33c10:	b192594f 	.word	0xb192594f
   33c14:	f04f469c 	.word	0xf04f469c
   33c18:	46610b00 	.word	0x46610b00
   33c1c:	ea4b465b 	.word	0xea4b465b
   33c20:	f7e50007 	.word	0xf7e50007
   33c24:	2300f8cb 	.word	0x2300f8cb
   33c28:	32fff04f 	.word	0x32fff04f
   33c2c:	bf08428b 	.word	0xbf08428b
   33c30:	d2004282 	.word	0xd2004282
   33c34:	51304610 	.word	0x51304610
   33c38:	f04fe6a1 	.word	0xf04fe6a1
   33c3c:	e7fa30ff 	.word	0xe7fa30ff
   33c40:	6b07e9dd 	.word	0x6b07e9dd
   33c44:	5a09e9dd 	.word	0x5a09e9dd
   33c48:	2d009c0b 	.word	0x2d009c0b
   33c4c:	a916d05f 	.word	0xa916d05f
   33c50:	f7fe4628 	.word	0xf7fe4628
   33c54:	2800fc25 	.word	0x2800fc25
   33c58:	4606d053 	.word	0x4606d053
   33c5c:	e5169f1e 	.word	0xe5169f1e
   33c60:	9b182501 	.word	0x9b182501
   33c64:	591baa1f 	.word	0x591baa1f
   33c68:	a819a913 	.word	0xa819a913
   33c6c:	f8cd930f 	.word	0xf8cd930f
   33c70:	e9cd8084 	.word	0xe9cd8084
   33c74:	f7ff551f 	.word	0xf7ff551f
   33c78:	2800fba5 	.word	0x2800fba5
   33c7c:	9b06d1b8 	.word	0x9b06d1b8
   33c80:	f1039a01 	.word	0xf1039a01
   33c84:	3b016300 	.word	0x3b016300
   33c88:	015e4413 	.word	0x015e4413
   33c8c:	a8194631 	.word	0xa8194631
   33c90:	ff1ef7fe 	.word	0xff1ef7fe
   33c94:	d1ab2800 	.word	0xd1ab2800
   33c98:	aa19a910 	.word	0xaa19a910
   33c9c:	f7ff4608 	.word	0xf7ff4608
   33ca0:	4603fad1 	.word	0x4603fad1
   33ca4:	a91fbb58 	.word	0xa91fbb58
   33ca8:	930fa810 	.word	0x930fa810
   33cac:	551fe9cd 	.word	0x551fe9cd
   33cb0:	8084f8cd 	.word	0x8084f8cd
   33cb4:	fb2ef7fe 	.word	0xfb2ef7fe
   33cb8:	db072800 	.word	0xdb072800
   33cbc:	465d9b01 	.word	0x465d9b01
   33cc0:	93013b01 	.word	0x93013b01
   33cc4:	f06fe645 	.word	0xf06fe645
   33cc8:	e4e0060f 	.word	0xe4e0060f
   33ccc:	a819a913 	.word	0xa819a913
   33cd0:	fbe6f7fe 	.word	0xfbe6f7fe
   33cd4:	d18b2800 	.word	0xd18b2800
   33cd8:	a8194631 	.word	0xa8194631
   33cdc:	fef8f7fe 	.word	0xfef8f7fe
   33ce0:	d1852800 	.word	0xd1852800
   33ce4:	aa19a910 	.word	0xaa19a910
   33ce8:	f7ff4608 	.word	0xf7ff4608
   33cec:	2800fa37 	.word	0x2800fa37
   33cf0:	af7ef47f 	.word	0xaf7ef47f
   33cf4:	59139a18 	.word	0x59139a18
   33cf8:	51133b01 	.word	0x51133b01
   33cfc:	4606e7de 	.word	0x4606e7de
   33d00:	f8dbe4c5 	.word	0xf8dbe4c5
   33d04:	68223000 	.word	0x68223000
   33d08:	f302fb03 	.word	0xf302fb03
   33d0c:	f1ba602b 	.word	0xf1ba602b
   33d10:	d0050f00 	.word	0xd0050f00
   33d14:	a8109902 	.word	0xa8109902
   33d18:	ff90f7fe 	.word	0xff90f7fe
   33d1c:	b1084606 	.word	0xb1084606
   33d20:	e4b49f1e 	.word	0xe4b49f1e
   33d24:	a9106823 	.word	0xa9106823
   33d28:	93104650 	.word	0x93104650
   33d2c:	fbb8f7fe 	.word	0xfbb8f7fe
   33d30:	28004606 	.word	0x28004606
   33d34:	2401d1f4 	.word	0x2401d1f4
   33d38:	a91fab0f 	.word	0xa91fab0f
   33d3c:	960f4650 	.word	0x960f4650
   33d40:	441fe9cd 	.word	0x441fe9cd
   33d44:	f7fe9321 	.word	0xf7fe9321
   33d48:	2800fae5 	.word	0x2800fae5
   33d4c:	f8cad1e8 	.word	0xf8cad1e8
   33d50:	e7e54000 	.word	0xe7e54000

00033d54 <symbol_000dbba>:
   33d54:	41f0e92d 	.word	0x41f0e92d
   33d58:	46176853 	.word	0x46176853
   33d5c:	6894b183 	.word	0x6894b183
   33d60:	4580f103 	.word	0x4580f103
   33d64:	f8543d01 	.word	0xf8543d01
   33d68:	eb042025 	.word	0xeb042025
   33d6c:	b12a0485 	.word	0xb12a0485
   33d70:	f854e11a 	.word	0xf854e11a
   33d74:	2d005d04 	.word	0x2d005d04
   33d78:	8116f040 	.word	0x8116f040
   33d7c:	d1f83b01 	.word	0xd1f83b01
   33d80:	4606460a 	.word	0x4606460a
   33d84:	463b4601 	.word	0x463b4601
   33d88:	f7ff2000 	.word	0xf7ff2000
   33d8c:	2800fc21 	.word	0x2800fc21
   33d90:	f06fd151 	.word	0xf06fd151
   33d94:	68714840 	.word	0x68714840
   33d98:	68b0b191 	.word	0x68b0b191
   33d9c:	0308eb01 	.word	0x0308eb01
   33da0:	c023f850 	.word	0xc023f850
   33da4:	0283eb00 	.word	0x0283eb00
   33da8:	0f00f1bc 	.word	0x0f00f1bc
   33dac:	4614d156 	.word	0x4614d156
   33db0:	e003460b 	.word	0xe003460b
   33db4:	5d04f854 	.word	0x5d04f854
   33db8:	d14f2d00 	.word	0xd14f2d00
   33dbc:	d1f93b01 	.word	0xd1f93b01
   33dc0:	4440f06f 	.word	0x4440f06f
   33dc4:	46304639 	.word	0x46304639
   33dc8:	ffa8f7fe 	.word	0xffa8f7fe
   33dcc:	db422800 	.word	0xdb422800
   33dd0:	683b6835 	.word	0x683b6835
   33dd4:	f305fb03 	.word	0xf305fb03
   33dd8:	dd2e2b00 	.word	0xdd2e2b00
   33ddc:	687a6873 	.word	0x687a6873
   33de0:	68b1b183 	.word	0x68b1b183
   33de4:	f8511918 	.word	0xf8511918
   33de8:	eb01c020 	.word	0xeb01c020
   33dec:	f1bc0180 	.word	0xf1bc0180
   33df0:	d0050f00 	.word	0xd0050f00
   33df4:	f851e090 	.word	0xf851e090
   33df8:	28000d04 	.word	0x28000d04
   33dfc:	808cf040 	.word	0x808cf040
   33e00:	d1f83b01 	.word	0xd1f83b01
   33e04:	f8d7b18a 	.word	0xf8d7b18a
   33e08:	1911c008 	.word	0x1911c008
   33e0c:	0021f85c 	.word	0x0021f85c
   33e10:	f0402800 	.word	0xf0402800
   33e14:	eb0c80be 	.word	0xeb0c80be
   33e18:	e0040181 	.word	0xe0040181
   33e1c:	0d04f851 	.word	0x0d04f851
   33e20:	f0402800 	.word	0xf0402800
   33e24:	3a018083 	.word	0x3a018083
   33e28:	463ad1f8 	.word	0x463ad1f8
   33e2c:	46304631 	.word	0x46304631
   33e30:	f8d4f7ff 	.word	0xf8d4f7ff
   33e34:	e8bdb140 	.word	0xe8bdb140
   33e38:	463a81f0 	.word	0x463a81f0
   33e3c:	46304631 	.word	0x46304631
   33e40:	f828f7ff 	.word	0xf828f7ff
   33e44:	d1f62800 	.word	0xd1f62800
   33e48:	46396035 	.word	0x46396035
   33e4c:	f7fe4630 	.word	0xf7fe4630
   33e50:	2800ff65 	.word	0x2800ff65
   33e54:	2000dabc 	.word	0x2000dabc
   33e58:	81f0e8bd 	.word	0x81f0e8bd
   33e5c:	2c006834 	.word	0x2c006834
   33e60:	683bdaae 	.word	0x683bdaae
   33e64:	f304fb03 	.word	0xf304fb03
   33e68:	da232b00 	.word	0xda232b00
   33e6c:	0f00f1bc 	.word	0x0f00f1bc
   33e70:	4613d129 	.word	0x4613d129
   33e74:	f853e002 	.word	0xf853e002
   33e78:	bb222d04 	.word	0xbb222d04
   33e7c:	d1fa3901 	.word	0xd1fa3901
   33e80:	b173687b 	.word	0xb173687b
   33e84:	c008f8d7 	.word	0xc008f8d7
   33e88:	0208eb03 	.word	0x0208eb03
   33e8c:	5022f85c 	.word	0x5022f85c
   33e90:	0282eb0c 	.word	0x0282eb0c
   33e94:	e071b11d 	.word	0xe071b11d
   33e98:	5d04f852 	.word	0x5d04f852
   33e9c:	3b01bb05 	.word	0x3b01bb05
   33ea0:	463ad1fa 	.word	0x463ad1fa
   33ea4:	46304631 	.word	0x46304631
   33ea8:	f898f7ff 	.word	0xf898f7ff
   33eac:	d1c22800 	.word	0xd1c22800
   33eb0:	e7706034 	.word	0xe7706034
   33eb4:	4631463a 	.word	0x4631463a
   33eb8:	f7fe4630 	.word	0xf7fe4630
   33ebc:	2800ffeb 	.word	0x2800ffeb
   33ec0:	e8bdd0f6 	.word	0xe8bdd0f6
   33ec4:	687b81f0 	.word	0x687b81f0
   33ec8:	d0ea2b00 	.word	0xd0ea2b00
   33ecc:	c008f8d7 	.word	0xc008f8d7
   33ed0:	0208eb03 	.word	0x0208eb03
   33ed4:	5022f85c 	.word	0x5022f85c
   33ed8:	0282eb0c 	.word	0x0282eb0c
   33edc:	d0de2d00 	.word	0xd0de2d00
   33ee0:	d8de4299 	.word	0xd8de4299
   33ee4:	2900d34a 	.word	0x2900d34a
   33ee8:	eb01d0db 	.word	0xeb01d0db
   33eec:	f8500308 	.word	0xf8500308
   33ef0:	f85c2023 	.word	0xf85c2023
   33ef4:	009b5023 	.word	0x009b5023
   33ef8:	44184295 	.word	0x44184295
   33efc:	d3d04463 	.word	0xd3d04463
   33f00:	e03bd907 	.word	0xe03bd907
   33f04:	5d04f850 	.word	0x5d04f850
   33f08:	2d04f853 	.word	0x2d04f853
   33f0c:	d8c84295 	.word	0xd8c84295
   33f10:	3901d334 	.word	0x3901d334
   33f14:	e7c4d1f6 	.word	0xe7c4d1f6
   33f18:	d0862a00 	.word	0xd0862a00
   33f1c:	c008f8d7 	.word	0xc008f8d7
   33f20:	f85c1911 	.word	0xf85c1911
   33f24:	28000021 	.word	0x28000021
   33f28:	af75f43f 	.word	0xaf75f43f
   33f2c:	f63f4293 	.word	0xf63f4293
   33f30:	d32eaf7c 	.word	0xd32eaf7c
   33f34:	f43f2b00 	.word	0xf43f2b00
   33f38:	68b1af78 	.word	0x68b1af78
   33f3c:	f851191a 	.word	0xf851191a
   33f40:	f85c0022 	.word	0xf85c0022
   33f44:	0092e022 	.word	0x0092e022
   33f48:	44114586 	.word	0x44114586
   33f4c:	f4ff4462 	.word	0xf4ff4462
   33f50:	d908af6c 	.word	0xd908af6c
   33f54:	f851e01d 	.word	0xf851e01d
   33f58:	f852cd04 	.word	0xf852cd04
   33f5c:	45840d04 	.word	0x45840d04
   33f60:	af63f63f 	.word	0xaf63f63f
   33f64:	3b01d315 	.word	0x3b01d315
   33f68:	463ad1f5 	.word	0x463ad1f5
   33f6c:	46304631 	.word	0x46304631
   33f70:	f834f7ff 	.word	0xf834f7ff
   33f74:	f47f2800 	.word	0xf47f2800
   33f78:	e765af5e 	.word	0xe765af5e
   33f7c:	46394632 	.word	0x46394632
   33f80:	f7ff4630 	.word	0xf7ff4630
   33f84:	2800f82b 	.word	0x2800f82b
   33f88:	af55f47f 	.word	0xaf55f47f
   33f8c:	60344264 	.word	0x60344264
   33f90:	4632e701 	.word	0x4632e701
   33f94:	46304639 	.word	0x46304639
   33f98:	f820f7ff 	.word	0xf820f7ff
   33f9c:	f47f2800 	.word	0xf47f2800
   33fa0:	426daf4a 	.word	0x426daf4a
   33fa4:	e70d6035 	.word	0xe70d6035
   33fa8:	2b00683b 	.word	0x2b00683b
   33fac:	aee8f6bf 	.word	0xaee8f6bf
   33fb0:	0009f06f 	.word	0x0009f06f
   33fb4:	bf00e73f 	.word	0xbf00e73f

00033fb8 <symbol_0005f38>:
   33fb8:	41f0e92d 	.word	0x41f0e92d
   33fbc:	2501460f 	.word	0x2501460f
   33fc0:	68bb2100 	.word	0x68bb2100
   33fc4:	4604b086 	.word	0x4604b086
   33fc8:	95004616 	.word	0x95004616
   33fcc:	e9cd9503 	.word	0xe9cd9503
   33fd0:	e9cd1101 	.word	0xe9cd1101
   33fd4:	2b001104 	.word	0x2b001104
   33fd8:	6879d040 	.word	0x6879d040
   33fdc:	d0111e4a 	.word	0xd0111e4a
   33fe0:	0022f853 	.word	0x0022f853
   33fe4:	f0402800 	.word	0xf0402800
   33fe8:	f10180c4 	.word	0xf10180c4
   33fec:	39014180 	.word	0x39014180
   33ff0:	0381eb03 	.word	0x0381eb03
   33ff4:	f853e004 	.word	0xf853e004
   33ff8:	29001d04 	.word	0x29001d04
   33ffc:	80b9f040 	.word	0x80b9f040
   34000:	d1f83a01 	.word	0xd1f83a01
   34004:	683b2501 	.word	0x683b2501
   34008:	21049300 	.word	0x21049300
   3400c:	f0014628 	.word	0xf0014628
   34010:	4680fe17 	.word	0x4680fe17
   34014:	f0002800 	.word	0xf0002800
   34018:	9902813c 	.word	0x9902813c
   3401c:	9a01b189 	.word	0x9a01b189
   34020:	f00c0092 	.word	0xf00c0092
   34024:	e9ddfe9d 	.word	0xe9ddfe9d
   34028:	1e532001 	.word	0x1e532001
   3402c:	2200b13a 	.word	0x2200b13a
   34030:	1c593b01 	.word	0x1c593b01
   34034:	f1006002 	.word	0xf1006002
   34038:	d1f90004 	.word	0xd1f90004
   3403c:	f0019802 	.word	0xf0019802
   34040:	e9cdfe13 	.word	0xe9cdfe13
   34044:	00ad5801 	.word	0x00ad5801
   34048:	2100462a 	.word	0x2100462a
   3404c:	f00c4640 	.word	0xf00c4640
   34050:	462afea7 	.word	0x462afea7
   34054:	980268b9 	.word	0x980268b9
   34058:	fe82f00c 	.word	0xfe82f00c
   3405c:	a8034631 	.word	0xa8034631
   34060:	fa1ef7fe 	.word	0xfa1ef7fe
   34064:	28004607 	.word	0x28004607
   34068:	9e01d15d 	.word	0x9e01d15d
   3406c:	f0002e00 	.word	0xf0002e00
   34070:	4601810e 	.word	0x4601810e
   34074:	3d049d02 	.word	0x3d049d02
   34078:	f8552200 	.word	0xf8552200
   3407c:	e0040f04 	.word	0xe0040f04
   34080:	f1012a20 	.word	0xf1012a20
   34084:	f0000101 	.word	0xf0000101
   34088:	fa208081 	.word	0xfa208081
   3408c:	f013f302 	.word	0xf013f302
   34090:	f1020301 	.word	0xf1020301
   34094:	d0f30201 	.word	0xd0f30201
   34098:	b1b59d04 	.word	0xb1b59d04
   3409c:	46842000 	.word	0x46842000
   340a0:	3f049f05 	.word	0x3f049f05
   340a4:	f8572200 	.word	0xf8572200
   340a8:	e0036f04 	.word	0xe0036f04
   340ac:	f1002a20 	.word	0xf1002a20
   340b0:	d0710001 	.word	0xd0710001
   340b4:	f302fa26 	.word	0xf302fa26
   340b8:	0301f013 	.word	0x0301f013
   340bc:	0201f102 	.word	0x0201f102
   340c0:	4281d0f4 	.word	0x4281d0f4
   340c4:	4601bf28 	.word	0x4601bf28
   340c8:	4668460d 	.word	0x4668460d
   340cc:	f7fe4629 	.word	0xf7fe4629
   340d0:	4607fdb5 	.word	0x4607fdb5
   340d4:	4629bb38 	.word	0x4629bb38
   340d8:	f7fea803 	.word	0xf7fea803
   340dc:	4607fdaf 	.word	0x4607fdaf
   340e0:	2301bb08 	.word	0x2301bb08
   340e4:	4640f06f 	.word	0x4640f06f
   340e8:	93009303 	.word	0x93009303
   340ec:	b17f9f01 	.word	0xb17f9f01
   340f0:	19ba9802 	.word	0x19ba9802
   340f4:	3022f850 	.word	0x3022f850
   340f8:	0282eb00 	.word	0x0282eb00
   340fc:	d1512b00 	.word	0xd1512b00
   34100:	e003463b 	.word	0xe003463b
   34104:	1d04f852 	.word	0x1d04f852
   34108:	d14b2900 	.word	0xd14b2900
   3410c:	d1f93b01 	.word	0xd1f93b01
   34110:	a8034629 	.word	0xa8034629
   34114:	fcdcf7fe 	.word	0xfcdcf7fe
   34118:	b9204607 	.word	0xb9204607
   3411c:	4620a903 	.word	0x4620a903
   34120:	f9bef7fe 	.word	0xf9bef7fe
   34124:	98024607 	.word	0x98024607
   34128:	9a01b160 	.word	0x9a01b160
   3412c:	b13a1e53 	.word	0xb13a1e53
   34130:	3b012200 	.word	0x3b012200
   34134:	60021c5c 	.word	0x60021c5c
   34138:	0004f100 	.word	0x0004f100
   3413c:	9802d1f9 	.word	0x9802d1f9
   34140:	fd92f001 	.word	0xfd92f001
   34144:	23012200 	.word	0x23012200
   34148:	e9cd9805 	.word	0xe9cd9805
   3414c:	92023200 	.word	0x92023200
   34150:	9904b158 	.word	0x9904b158
   34154:	b1311e4b 	.word	0xb1311e4b
   34158:	1c593b01 	.word	0x1c593b01
   3415c:	f1006002 	.word	0xf1006002
   34160:	d1f90004 	.word	0xd1f90004
   34164:	f0019805 	.word	0xf0019805
   34168:	4638fd7f 	.word	0x4638fd7f
   3416c:	e8bdb006 	.word	0xe8bdb006
   34170:	f24281f0 	.word	0xf24281f0
   34174:	68397310 	.word	0x68397310
   34178:	429d1c55 	.word	0x429d1c55
   3417c:	f2009100 	.word	0xf2009100
   34180:	2d008083 	.word	0x2d008083
   34184:	af41f47f 	.word	0xaf41f47f
   34188:	e75d46a8 	.word	0xe75d46a8
   3418c:	42be3701 	.word	0x42be3701
   34190:	af72f47f 	.word	0xaf72f47f
   34194:	e77f4619 	.word	0xe77f4619
   34198:	0c01f10c 	.word	0x0c01f10c
   3419c:	d18145ac 	.word	0xd18145ac
   341a0:	e792461d 	.word	0xe792461d
   341a4:	2b009b00 	.word	0x2b009b00
   341a8:	2100d0b2 	.word	0x2100d0b2
   341ac:	f1a0468e 	.word	0xf1a0468e
   341b0:	22000c04 	.word	0x22000c04
   341b4:	0f04f85c 	.word	0x0f04f85c
   341b8:	2a20e003 	.word	0x2a20e003
   341bc:	0101f101 	.word	0x0101f101
   341c0:	fa20d042 	.word	0xfa20d042
   341c4:	f013f302 	.word	0xf013f302
   341c8:	f1020301 	.word	0xf1020301
   341cc:	d0f40201 	.word	0xd0f40201
   341d0:	f7fe4668 	.word	0xf7fe4668
   341d4:	4607fd33 	.word	0x4607fd33
   341d8:	d1a42800 	.word	0xd1a42800
   341dc:	c010f8dd 	.word	0xc010f8dd
   341e0:	0f00f1bc 	.word	0x0f00f1bc
   341e4:	4601d04e 	.word	0x4601d04e
   341e8:	9f054686 	.word	0x9f054686
   341ec:	22003f04 	.word	0x22003f04
   341f0:	0f04f857 	.word	0x0f04f857
   341f4:	2a20e003 	.word	0x2a20e003
   341f8:	0101f101 	.word	0x0101f101
   341fc:	fa20d02a 	.word	0xfa20d02a
   34200:	f013f302 	.word	0xf013f302
   34204:	f1020301 	.word	0xf1020301
   34208:	d0f40201 	.word	0xd0f40201
   3420c:	f7fea803 	.word	0xf7fea803
   34210:	4607fd15 	.word	0x4607fd15
   34214:	d1862800 	.word	0xd1862800
   34218:	4668a903 	.word	0x4668a903
   3421c:	fd7ef7fe 	.word	0xfd7ef7fe
   34220:	db1d2800 	.word	0xdb1d2800
   34224:	4669aa03 	.word	0x4669aa03
   34228:	f7fe4668 	.word	0xf7fe4668
   3422c:	4607fed7 	.word	0x4607fed7
   34230:	f47f2800 	.word	0xf47f2800
   34234:	2101af78 	.word	0x2101af78
   34238:	f7fe4668 	.word	0xf7fe4668
   3423c:	4607fcff 	.word	0x4607fcff
   34240:	f43f2800 	.word	0xf43f2800
   34244:	e76eaf53 	.word	0xe76eaf53
   34248:	0e01f10e 	.word	0x0e01f10e
   3424c:	d1b045be 	.word	0xd1b045be
   34250:	e7bd4619 	.word	0xe7bd4619
   34254:	0e01f10e 	.word	0x0e01f10e
   34258:	d1c845e6 	.word	0xd1c845e6
   3425c:	e7d54619 	.word	0xe7d54619
   34260:	466aa903 	.word	0x466aa903
   34264:	f7fe4608 	.word	0xf7fe4608
   34268:	4607feb9 	.word	0x4607feb9
   3426c:	f47f2800 	.word	0xf47f2800
   34270:	2101af5a 	.word	0x2101af5a
   34274:	f7fea803 	.word	0xf7fea803
   34278:	4607fce1 	.word	0x4607fce1
   3427c:	f43f2800 	.word	0xf43f2800
   34280:	e750af35 	.word	0xe750af35
   34284:	e7c14661 	.word	0xe7c14661
   34288:	070ff06f 	.word	0x070ff06f
   3428c:	4631e75a 	.word	0x4631e75a
   34290:	9802e702 	.word	0x9802e702
   34294:	070ff06f 	.word	0x070ff06f
   34298:	bf00e746 	.word	0xbf00e746

0003429c <symbol_000644e>:
   3429c:	43f0e92d 	.word	0x43f0e92d
   342a0:	6f80f5b1 	.word	0x6f80f5b1
   342a4:	4d04f2ad 	.word	0x4d04f2ad
   342a8:	80a5f200 	.word	0x80a5f200
   342ac:	4617460d 	.word	0x4617460d
   342b0:	46694606 	.word	0x46694606
   342b4:	462a4618 	.word	0x462a4618
   342b8:	460747b8 	.word	0x460747b8
   342bc:	4638b120 	.word	0x4638b120
   342c0:	4d04f20d 	.word	0x4d04f20d
   342c4:	83f0e8bd 	.word	0x83f0e8bd
   342c8:	f0002d00 	.word	0xf0002d00
   342cc:	f89d808a 	.word	0xf89d808a
   342d0:	2b003000 	.word	0x2b003000
   342d4:	8089f040 	.word	0x8089f040
   342d8:	4604466b 	.word	0x4604466b
   342dc:	f813e003 	.word	0xf813e003
   342e0:	2a002f01 	.word	0x2a002f01
   342e4:	3401d14d 	.word	0x3401d14d
   342e8:	d1f842a5 	.word	0xd1f842a5
   342ec:	8004f8d6 	.word	0x8004f8d6
   342f0:	0f00f1b8 	.word	0x0f00f1b8
   342f4:	2104d170 	.word	0x2104d170
   342f8:	f0012001 	.word	0xf0012001
   342fc:	4681fca1 	.word	0x4681fca1
   34300:	d0752800 	.word	0xd0752800
   34304:	b18968b1 	.word	0xb18968b1
   34308:	00926872 	.word	0x00926872
   3430c:	fd28f00c 	.word	0xfd28f00c
   34310:	2001e9d6 	.word	0x2001e9d6
   34314:	b13a1e53 	.word	0xb13a1e53
   34318:	3b014642 	.word	0x3b014642
   3431c:	60021c59 	.word	0x60021c59
   34320:	0004f100 	.word	0x0004f100
   34324:	68b0d1f9 	.word	0x68b0d1f9
   34328:	fc9ef001 	.word	0xfc9ef001
   3432c:	22042301 	.word	0x22042301
   34330:	3901e9c6 	.word	0x3901e9c6
   34334:	46482100 	.word	0x46482100
   34338:	fd32f00c 	.word	0xfd32f00c
   3433c:	22012300 	.word	0x22012300
   34340:	42a568b1 	.word	0x42a568b1
   34344:	6032600b 	.word	0x6032600b
   34348:	eb0dd9b9 	.word	0xeb0dd9b9
   3434c:	1b2c0205 	.word	0x1b2c0205
   34350:	f02368b1 	.word	0xf02368b1
   34354:	ea4f0803 	.word	0xea4f0803
   34358:	f8120ec3 	.word	0xf8120ec3
   3435c:	f851cd01 	.word	0xf851cd01
   34360:	f00e0008 	.word	0xf00e0008
   34364:	fa0c0e18 	.word	0xfa0c0e18
   34368:	3301fc0e 	.word	0x3301fc0e
   3436c:	000cea40 	.word	0x000cea40
   34370:	f84142a3 	.word	0xf84142a3
   34374:	d1eb0008 	.word	0xd1eb0008
   34378:	f20d4638 	.word	0xf20d4638
   3437c:	e8bd4d04 	.word	0xe8bd4d04
   34380:	1b2a83f0 	.word	0x1b2a83f0
   34384:	0803f012 	.word	0x0803f012
   34388:	f04fbf18 	.word	0xf04fbf18
   3438c:	f2420801 	.word	0xf2420801
   34390:	eb087310 	.word	0xeb087310
   34394:	45980892 	.word	0x45980892
   34398:	6873d82a 	.word	0x6873d82a
   3439c:	d92d4598 	.word	0xd92d4598
   343a0:	46402104 	.word	0x46402104
   343a4:	fc4cf001 	.word	0xfc4cf001
   343a8:	b3084681 	.word	0xb3084681
   343ac:	b18968b1 	.word	0xb18968b1
   343b0:	00926872 	.word	0x00926872
   343b4:	fcd4f00c 	.word	0xfcd4f00c
   343b8:	2001e9d6 	.word	0x2001e9d6
   343bc:	b13a1e53 	.word	0xb13a1e53
   343c0:	3b012200 	.word	0x3b012200
   343c4:	60021c59 	.word	0x60021c59
   343c8:	0004f100 	.word	0x0004f100
   343cc:	68b0d1f9 	.word	0x68b0d1f9
   343d0:	fc4af001 	.word	0xfc4af001
   343d4:	8901e9c6 	.word	0x8901e9c6
   343d8:	0288ea4f 	.word	0x0288ea4f
   343dc:	9008f8d6 	.word	0x9008f8d6
   343e0:	f8d6e7a8 	.word	0xf8d6e7a8
   343e4:	462c8004 	.word	0x462c8004
   343e8:	462ae782 	.word	0x462ae782
   343ec:	e7c94604 	.word	0xe7c94604
   343f0:	070ff06f 	.word	0x070ff06f
   343f4:	f06fe763 	.word	0xf06fe763
   343f8:	e7600703 	.word	0xe7600703
   343fc:	e7774698 	.word	0xe7774698

00034400 <symbol_0004482>:
   34400:	43f0e92d 	.word	0x43f0e92d
   34404:	b0a16853 	.word	0xb0a16853
   34408:	6894b17b 	.word	0x6894b17b
   3440c:	4c80f103 	.word	0x4c80f103
   34410:	3cfff10c 	.word	0x3cfff10c
   34414:	502cf854 	.word	0x502cf854
   34418:	048ceb04 	.word	0x048ceb04
   3441c:	e00ab11d 	.word	0xe00ab11d
   34420:	5d04f854 	.word	0x5d04f854
   34424:	3b01b93d 	.word	0x3b01b93d
   34428:	f06fd1fa 	.word	0xf06fd1fa
   3442c:	46200403 	.word	0x46200403
   34430:	e8bdb021 	.word	0xe8bdb021
   34434:	681383f0 	.word	0x681383f0
   34438:	ddf62b00 	.word	0xddf62b00
   3443c:	23002401 	.word	0x23002401
   34440:	a8024606 	.word	0xa8024606
   34444:	94089405 	.word	0x94089405
   34448:	940e940b 	.word	0x940e940b
   3444c:	94119402 	.word	0x94119402
   34450:	94179414 	.word	0x94179414
   34454:	460f941a 	.word	0x460f941a
   34458:	e9cd4615 	.word	0xe9cd4615
   3445c:	e9cd3306 	.word	0xe9cd3306
   34460:	e9cd3309 	.word	0xe9cd3309
   34464:	e9cd330c 	.word	0xe9cd330c
   34468:	e9cd330f 	.word	0xe9cd330f
   3446c:	e9cd3303 	.word	0xe9cd3303
   34470:	e9cd3312 	.word	0xe9cd3312
   34474:	e9cd3315 	.word	0xe9cd3315
   34478:	e9cd3318 	.word	0xe9cd3318
   3447c:	f7ff331b 	.word	0xf7ff331b
   34480:	4604fd9b 	.word	0x4604fd9b
   34484:	9b03b9a0 	.word	0x9b03b9a0
   34488:	9904b183 	.word	0x9904b183
   3448c:	4480f103 	.word	0x4480f103
   34490:	f8513c01 	.word	0xf8513c01
   34494:	eb012024 	.word	0xeb012024
   34498:	b12a0484 	.word	0xb12a0484
   3449c:	f854e0b5 	.word	0xf854e0b5
   344a0:	2a002d04 	.word	0x2a002d04
   344a4:	80b1f040 	.word	0x80b1f040
   344a8:	d1f83b01 	.word	0xd1f83b01
   344ac:	040df06f 	.word	0x040df06f
   344b0:	b1609807 	.word	0xb1609807
   344b4:	1e539a06 	.word	0x1e539a06
   344b8:	2200b13a 	.word	0x2200b13a
   344bc:	1c593b01 	.word	0x1c593b01
   344c0:	f1006002 	.word	0xf1006002
   344c4:	d1f90004 	.word	0xd1f90004
   344c8:	f0019807 	.word	0xf0019807
   344cc:	2200fbcd 	.word	0x2200fbcd
   344d0:	980a2301 	.word	0x980a2301
   344d4:	3205e9cd 	.word	0x3205e9cd
   344d8:	b1589207 	.word	0xb1589207
   344dc:	1e4b9909 	.word	0x1e4b9909
   344e0:	3b01b131 	.word	0x3b01b131
   344e4:	60021c5f 	.word	0x60021c5f
   344e8:	0004f100 	.word	0x0004f100
   344ec:	980ad1f9 	.word	0x980ad1f9
   344f0:	fbbaf001 	.word	0xfbbaf001
   344f4:	23012200 	.word	0x23012200
   344f8:	e9cd980d 	.word	0xe9cd980d
   344fc:	920a3208 	.word	0x920a3208
   34500:	990cb158 	.word	0x990cb158
   34504:	b1311e4b 	.word	0xb1311e4b
   34508:	1c5e3b01 	.word	0x1c5e3b01
   3450c:	f1006002 	.word	0xf1006002
   34510:	d1f90004 	.word	0xd1f90004
   34514:	f001980d 	.word	0xf001980d
   34518:	2200fba7 	.word	0x2200fba7
   3451c:	98102301 	.word	0x98102301
   34520:	320be9cd 	.word	0x320be9cd
   34524:	b158920d 	.word	0xb158920d
   34528:	1e4b990f 	.word	0x1e4b990f
   3452c:	3b01b131 	.word	0x3b01b131
   34530:	60021c5d 	.word	0x60021c5d
   34534:	0004f100 	.word	0x0004f100
   34538:	9810d1f9 	.word	0x9810d1f9
   3453c:	fb94f001 	.word	0xfb94f001
   34540:	23012200 	.word	0x23012200
   34544:	e9cd9804 	.word	0xe9cd9804
   34548:	9210320e 	.word	0x9210320e
   3454c:	9903b158 	.word	0x9903b158
   34550:	b1311e4b 	.word	0xb1311e4b
   34554:	1c593b01 	.word	0x1c593b01
   34558:	f1006002 	.word	0xf1006002
   3455c:	d1f90004 	.word	0xd1f90004
   34560:	f0019804 	.word	0xf0019804
   34564:	2200fb81 	.word	0x2200fb81
   34568:	98132301 	.word	0x98132301
   3456c:	3202e9cd 	.word	0x3202e9cd
   34570:	b1589204 	.word	0xb1589204
   34574:	1e4b9912 	.word	0x1e4b9912
   34578:	3b01b131 	.word	0x3b01b131
   3457c:	60021c5f 	.word	0x60021c5f
   34580:	0004f100 	.word	0x0004f100
   34584:	9813d1f9 	.word	0x9813d1f9
   34588:	fb6ef001 	.word	0xfb6ef001
   3458c:	23012200 	.word	0x23012200
   34590:	e9cd9816 	.word	0xe9cd9816
   34594:	92133211 	.word	0x92133211
   34598:	9915b158 	.word	0x9915b158
   3459c:	b1311e4b 	.word	0xb1311e4b
   345a0:	1c5e3b01 	.word	0x1c5e3b01
   345a4:	f1006002 	.word	0xf1006002
   345a8:	d1f90004 	.word	0xd1f90004
   345ac:	f0019816 	.word	0xf0019816
   345b0:	2200fb5b 	.word	0x2200fb5b
   345b4:	98192301 	.word	0x98192301
   345b8:	3214e9cd 	.word	0x3214e9cd
   345bc:	b1589216 	.word	0xb1589216
   345c0:	1e4b9918 	.word	0x1e4b9918
   345c4:	3b01b131 	.word	0x3b01b131
   345c8:	60021c5d 	.word	0x60021c5d
   345cc:	0004f100 	.word	0x0004f100
   345d0:	9819d1f9 	.word	0x9819d1f9
   345d4:	fb48f001 	.word	0xfb48f001
   345d8:	23012200 	.word	0x23012200
   345dc:	e9cd981c 	.word	0xe9cd981c
   345e0:	92193217 	.word	0x92193217
   345e4:	f43f2800 	.word	0xf43f2800
   345e8:	991baf22 	.word	0x991baf22
   345ec:	b1311e4b 	.word	0xb1311e4b
   345f0:	1c593b01 	.word	0x1c593b01
   345f4:	f1006002 	.word	0xf1006002
   345f8:	d1f90004 	.word	0xd1f90004
   345fc:	f001981c 	.word	0xf001981c
   34600:	4620fb33 	.word	0x4620fb33
   34604:	e8bdb021 	.word	0xe8bdb021
   34608:	2b0183f0 	.word	0x2b0183f0
   3460c:	d96b9a02 	.word	0xd96b9a02
   34610:	f47f2a00 	.word	0xf47f2a00
   34614:	4639af4b 	.word	0x4639af4b
   34618:	462aa805 	.word	0x462aa805
   3461c:	fb9af7ff 	.word	0xfb9af7ff
   34620:	28004604 	.word	0x28004604
   34624:	af44f47f 	.word	0xaf44f47f
   34628:	a905a808 	.word	0xa905a808
   3462c:	ff38f7fd 	.word	0xff38f7fd
   34630:	28004604 	.word	0x28004604
   34634:	af3cf47f 	.word	0xaf3cf47f
   34638:	4629a811 	.word	0x4629a811
   3463c:	ff30f7fd 	.word	0xff30f7fd
   34640:	28004604 	.word	0x28004604
   34644:	af34f47f 	.word	0xaf34f47f
   34648:	4629a814 	.word	0x4629a814
   3464c:	ff28f7fd 	.word	0xff28f7fd
   34650:	28004604 	.word	0x28004604
   34654:	af2cf47f 	.word	0xaf2cf47f
   34658:	2101a80b 	.word	0x2101a80b
   3465c:	f8acf7fe 	.word	0xf8acf7fe
   34660:	28004604 	.word	0x28004604
   34664:	af24f47f 	.word	0xaf24f47f
   34668:	a80e4601 	.word	0xa80e4601
   3466c:	f8a4f7fe 	.word	0xf8a4f7fe
   34670:	28004604 	.word	0x28004604
   34674:	af1cf47f 	.word	0xaf1cf47f
   34678:	a8174601 	.word	0xa8174601
   3467c:	f89cf7fe 	.word	0xf89cf7fe
   34680:	28004604 	.word	0x28004604
   34684:	af14f47f 	.word	0xaf14f47f
   34688:	2101a81a 	.word	0x2101a81a
   3468c:	f894f7fe 	.word	0xf894f7fe
   34690:	28004604 	.word	0x28004604
   34694:	af0cf47f 	.word	0xaf0cf47f
   34698:	f04f4681 	.word	0xf04f4681
   3469c:	af010801 	.word	0xaf010801
   346a0:	681b9b0a 	.word	0x681b9b0a
   346a4:	d42c07da 	.word	0xd42c07da
   346a8:	a8082101 	.word	0xa8082101
   346ac:	fac6f7fe 	.word	0xfac6f7fe
   346b0:	28004604 	.word	0x28004604
   346b4:	aefcf47f 	.word	0xaefcf47f
   346b8:	681b9b0d 	.word	0x681b9b0d
   346bc:	d44407d8 	.word	0xd44407d8
   346c0:	681b9b10 	.word	0x681b9b10
   346c4:	d44007d9 	.word	0xd44007d9
   346c8:	a80b2101 	.word	0xa80b2101
   346cc:	fab6f7fe 	.word	0xfab6f7fe
   346d0:	28004604 	.word	0x28004604
   346d4:	aeecf47f 	.word	0xaeecf47f
   346d8:	a80e2101 	.word	0xa80e2101
   346dc:	faaef7fe 	.word	0xfaaef7fe
   346e0:	28004604 	.word	0x28004604
   346e4:	e6e3d0dc 	.word	0xe6e3d0dc
   346e8:	f6ff2a00 	.word	0xf6ff2a00
   346ec:	680baedf 	.word	0x680baedf
   346f0:	d88d2b01 	.word	0xd88d2b01
   346f4:	d18e2b00 	.word	0xd18e2b00
   346f8:	2a004252 	.word	0x2a004252
   346fc:	aed6f47f 	.word	0xaed6f47f
   34700:	9b16e789 	.word	0x9b16e789
   34704:	07d8681b 	.word	0x07d8681b
   34708:	2101d443 	.word	0x2101d443
   3470c:	f7fea814 	.word	0xf7fea814
   34710:	4604fa95 	.word	0x4604fa95
   34714:	f47f2800 	.word	0xf47f2800
   34718:	9b19aecb 	.word	0x9b19aecb
   3471c:	07db681b 	.word	0x07db681b
   34720:	9b1cd425 	.word	0x9b1cd425
   34724:	07dc681b 	.word	0x07dc681b
   34728:	2101d421 	.word	0x2101d421
   3472c:	f7fea817 	.word	0xf7fea817
   34730:	4604fa85 	.word	0x4604fa85
   34734:	f47f2800 	.word	0xf47f2800
   34738:	2101aebb 	.word	0x2101aebb
   3473c:	f7fea81a 	.word	0xf7fea81a
   34740:	4604fa7d 	.word	0x4604fa7d
   34744:	d0dc2800 	.word	0xd0dc2800
   34748:	a90be6b2 	.word	0xa90be6b2
   3474c:	4608aa11 	.word	0x4608aa11
   34750:	fd04f7fe 	.word	0xfd04f7fe
   34754:	28004604 	.word	0x28004604
   34758:	aeaaf47f 	.word	0xaeaaf47f
   3475c:	aa05a90e 	.word	0xaa05a90e
   34760:	f7fe4608 	.word	0xf7fe4608
   34764:	4604fd6f 	.word	0x4604fd6f
   34768:	d0ad2800 	.word	0xd0ad2800
   3476c:	a917e6a0 	.word	0xa917e6a0
   34770:	4608aa11 	.word	0x4608aa11
   34774:	fcf2f7fe 	.word	0xfcf2f7fe
   34778:	28004604 	.word	0x28004604
   3477c:	ae98f47f 	.word	0xae98f47f
   34780:	aa05a91a 	.word	0xaa05a91a
   34784:	f7fe4608 	.word	0xf7fe4608
   34788:	4604fd5d 	.word	0x4604fd5d
   3478c:	d0cc2800 	.word	0xd0cc2800
   34790:	a914e68e 	.word	0xa914e68e
   34794:	f7fea808 	.word	0xf7fea808
   34798:	2800fac1 	.word	0x2800fac1
   3479c:	a908db3d 	.word	0xa908db3d
   347a0:	4608aa14 	.word	0x4608aa14
   347a4:	fd4ef7fe 	.word	0xfd4ef7fe
   347a8:	28004604 	.word	0x28004604
   347ac:	ae80f47f 	.word	0xae80f47f
   347b0:	aa17a90b 	.word	0xaa17a90b
   347b4:	f7fe4608 	.word	0xf7fe4608
   347b8:	4604fd45 	.word	0x4604fd45
   347bc:	f47f2800 	.word	0xf47f2800
   347c0:	a90eae77 	.word	0xa90eae77
   347c4:	4608aa1a 	.word	0x4608aa1a
   347c8:	fd3cf7fe 	.word	0xfd3cf7fe
   347cc:	28004604 	.word	0x28004604
   347d0:	ae6ef47f 	.word	0xae6ef47f
   347d4:	a808a91d 	.word	0xa808a91d
   347d8:	9004f8cd 	.word	0x9004f8cd
   347dc:	881de9cd 	.word	0x881de9cd
   347e0:	f7fd971f 	.word	0xf7fd971f
   347e4:	2800fd97 	.word	0x2800fd97
   347e8:	af5af47f 	.word	0xaf5af47f
   347ec:	f04f4680 	.word	0xf04f4680
   347f0:	a91d0901 	.word	0xa91d0901
   347f4:	f8cda817 	.word	0xf8cda817
   347f8:	e9cd8004 	.word	0xe9cd8004
   347fc:	971f991d 	.word	0x971f991d
   34800:	fd88f7fd 	.word	0xfd88f7fd
   34804:	da232800 	.word	0xda232800
   34808:	462aa917 	.word	0x462aa917
   3480c:	f7fe4608 	.word	0xf7fe4608
   34810:	4604fca5 	.word	0x4604fca5
   34814:	d0ec2800 	.word	0xd0ec2800
   34818:	a914e64a 	.word	0xa914e64a
   3481c:	4608aa08 	.word	0x4608aa08
   34820:	fd10f7fe 	.word	0xfd10f7fe
   34824:	28004604 	.word	0x28004604
   34828:	ae42f47f 	.word	0xae42f47f
   3482c:	aa0ba917 	.word	0xaa0ba917
   34830:	f7fe4608 	.word	0xf7fe4608
   34834:	4604fd07 	.word	0x4604fd07
   34838:	f47f2800 	.word	0xf47f2800
   3483c:	a91aae39 	.word	0xa91aae39
   34840:	4608aa0e 	.word	0x4608aa0e
   34844:	fcfef7fe 	.word	0xfcfef7fe
   34848:	28004604 	.word	0x28004604
   3484c:	e62fd0c2 	.word	0xe62fd0c2
   34850:	a8174629 	.word	0xa8174629
   34854:	fa62f7fe 	.word	0xfa62f7fe
   34858:	db082800 	.word	0xdb082800
   3485c:	462aa917 	.word	0x462aa917
   34860:	f7fe4608 	.word	0xf7fe4608
   34864:	4604fcef 	.word	0x4604fcef
   34868:	d0f12800 	.word	0xd0f12800
   3486c:	a917e620 	.word	0xa917e620
   34870:	f7fd4630 	.word	0xf7fd4630
   34874:	4604fe15 	.word	0x4604fe15
   34878:	bf00e61a 	.word	0xbf00e61a

0003487c <entropy_callback>:
   3487c:	4c0ab538 	.word	0x4c0ab538
   34880:	78254b0a 	.word	0x78254b0a
   34884:	bf282a07 	.word	0xbf282a07
   34888:	46082207 	.word	0x46082207
   3488c:	1145eb03 	.word	0x1145eb03
   34890:	fa66f00c 	.word	0xfa66f00c
   34894:	20007823 	.word	0x20007823
   34898:	b2db3301 	.word	0xb2db3301
   3489c:	bf082b07 	.word	0xbf082b07
   348a0:	70232300 	.word	0x70232300
   348a4:	bf00bd38 	.word	0xbf00bd38
   348a8:	2002be66 	.word	0x2002be66
   348ac:	00043220 	.word	0x00043220

000348b0 <es256_key_generate>:
   348b0:	b0e5b5f0 	.word	0xb0e5b5f0
   348b4:	71a8f89d 	.word	0x71a8f89d
   348b8:	b152b158 	.word	0xb152b158
   348bc:	291fb14b 	.word	0x291fb14b
   348c0:	6819d907 	.word	0x6819d907
   348c4:	d904293f 	.word	0xd904293f
   348c8:	2955b13f 	.word	0x2955b13f
   348cc:	240cd805 	.word	0x240cd805
   348d0:	2416e000 	.word	0x2416e000
   348d4:	b0654620 	.word	0xb0654620
   348d8:	461dbdf0 	.word	0x461dbdf0
   348dc:	21002304 	.word	0x21002304
   348e0:	46164604 	.word	0x46164604
   348e4:	f44fa814 	.word	0xf44fa814
   348e8:	f88d72a0 	.word	0xf88d72a0
   348ec:	f00c300c 	.word	0xf00c300c
   348f0:	a814fa57 	.word	0xa814fa57
   348f4:	fd90f7f6 	.word	0xfd90f7f6
   348f8:	49292300 	.word	0x49292300
   348fc:	a814461a 	.word	0xa814461a
   34900:	f7f69300 	.word	0xf7f69300
   34904:	a814fe8b 	.word	0xa814fe8b
   34908:	46212220 	.word	0x46212220
   3490c:	feaef7f6 	.word	0xfeaef7f6
   34910:	a814b9b8 	.word	0xa814b9b8
   34914:	fd86f7f6 	.word	0xfd86f7f6
   34918:	f10d4621 	.word	0xf10d4621
   3491c:	f006000d 	.word	0xf006000d
   34920:	4604ff8b 	.word	0x4604ff8b
   34924:	b1c7b9b8 	.word	0xb1c7b9b8
   34928:	f7f6a814 	.word	0xf7f6a814
   3492c:	2002f845 	.word	0x2002f845
   34930:	f848f7f6 	.word	0xf848f7f6
   34934:	a8144601 	.word	0xa8144601
   34938:	f852f7f6 	.word	0xf852f7f6
   3493c:	240eb1a8 	.word	0x240eb1a8
   34940:	4a18e7c8 	.word	0x4a18e7c8
   34944:	78114b18 	.word	0x78114b18
   34948:	22074620 	.word	0x22074620
   3494c:	1141eb03 	.word	0x1141eb03
   34950:	fa06f00c 	.word	0xfa06f00c
   34954:	2423e7dd 	.word	0x2423e7dd
   34958:	a903e7bc 	.word	0xa903e7bc
   3495c:	22401c70 	.word	0x22401c70
   34960:	f9fef00c 	.word	0xf9fef00c
   34964:	602b2341 	.word	0x602b2341
   34968:	2103e7b4 	.word	0x2103e7b4
   3496c:	f7f79815 	.word	0xf7f79815
   34970:	2800f8df 	.word	0x2800f8df
   34974:	9815d1e3 	.word	0x9815d1e3
   34978:	f100aa03 	.word	0xf100aa03
   3497c:	23410188 	.word	0x23410188
   34980:	fba4f7f9 	.word	0xfba4f7f9
   34984:	d1da2800 	.word	0xd1da2800
   34988:	a8144631 	.word	0xa8144631
   3498c:	f7f4682a 	.word	0xf7f4682a
   34990:	23b2fe89 	.word	0x23b2fe89
   34994:	602b4604 	.word	0x602b4604
   34998:	d09b2800 	.word	0xd09b2800
   3499c:	bf00e7cf 	.word	0xbf00e7cf
   349a0:	0003487d 	.word	0x0003487d
   349a4:	2002be66 	.word	0x2002be66
   349a8:	00043220 	.word	0x00043220

000349ac <bsd_os_application_irq_handler>:
   349ac:	41f0e92d 	.word	0x41f0e92d
   349b0:	f7ee4c33 	.word	0xf7ee4c33
   349b4:	f04ff89d 	.word	0xf04ff89d
   349b8:	4d320803 	.word	0x4d320803
   349bc:	f1044f32 	.word	0xf1044f32
   349c0:	e0040680 	.word	0xe0040680
   349c4:	d0062b04 	.word	0xd0062b04
   349c8:	42b43408 	.word	0x42b43408
   349cc:	f814d03b 	.word	0xf814d03b
   349d0:	2b023c04 	.word	0x2b023c04
   349d4:	6820d1f6 	.word	0x6820d1f6
   349d8:	6803882a 	.word	0x6803882a
   349dc:	429ab29b 	.word	0x429ab29b
   349e0:	8a2ad033 	.word	0x8a2ad033
   349e4:	d032429a 	.word	0xd032429a
   349e8:	429a8c2a 	.word	0x429a8c2a
   349ec:	8e2ad031 	.word	0x8e2ad031
   349f0:	d030429a 	.word	0xd030429a
   349f4:	2040f8b5 	.word	0x2040f8b5
   349f8:	d036429a 	.word	0xd036429a
   349fc:	2050f8b5 	.word	0x2050f8b5
   34a00:	d034429a 	.word	0xd034429a
   34a04:	2060f8b5 	.word	0x2060f8b5
   34a08:	d032429a 	.word	0xd032429a
   34a0c:	2070f8b5 	.word	0x2070f8b5
   34a10:	d030429a 	.word	0xd030429a
   34a14:	2080f8b5 	.word	0x2080f8b5
   34a18:	d02e429a 	.word	0xd02e429a
   34a1c:	2090f8b5 	.word	0x2090f8b5
   34a20:	bf08429a 	.word	0xbf08429a
   34a24:	d1cf2309 	.word	0xd1cf2309
   34a28:	1303eb05 	.word	0x1303eb05
   34a2c:	68d9685a 	.word	0x68d9685a
   34a30:	b9904790 	.word	0xb9904790
   34a34:	68202201 	.word	0x68202201
   34a38:	2c04f804 	.word	0x2c04f804
   34a3c:	340868fb 	.word	0x340868fb
   34a40:	42b44798 	.word	0x42b44798
   34a44:	e8bdd1c3 	.word	0xe8bdd1c3
   34a48:	230081f0 	.word	0x230081f0
   34a4c:	2301e7ec 	.word	0x2301e7ec
   34a50:	2302e7ea 	.word	0x2302e7ea
   34a54:	2303e7e8 	.word	0x2303e7e8
   34a58:	2802e7e6 	.word	0x2802e7e6
   34a5c:	2304bf0a 	.word	0x2304bf0a
   34a60:	8c04f804 	.word	0x8c04f804
   34a64:	3c04f804 	.word	0x3c04f804
   34a68:	2304e7ae 	.word	0x2304e7ae
   34a6c:	2305e7dc 	.word	0x2305e7dc
   34a70:	2306e7da 	.word	0x2306e7da
   34a74:	2307e7d8 	.word	0x2307e7d8
   34a78:	2308e7d6 	.word	0x2308e7d6
   34a7c:	bf00e7d4 	.word	0xbf00e7d4
   34a80:	20025d0c 	.word	0x20025d0c
   34a84:	20025bd0 	.word	0x20025bd0
   34a88:	20025c70 	.word	0x20025c70

00034a8c <rpc_framework_init>:
   34a8c:	22a0b508 	.word	0x22a0b508
   34a90:	48022100 	.word	0x48022100
   34a94:	f984f00c 	.word	0xf984f00c
   34a98:	bd082000 	.word	0xbd082000
   34a9c:	20025bd0 	.word	0x20025bd0

00034aa0 <rpc_client_register>:
   34aa0:	2b008803 	.word	0x2b008803
   34aa4:	6842d045 	.word	0x6842d045
   34aa8:	2a004601 	.word	0x2a004601
   34aac:	4a30d050 	.word	0x4a30d050
   34ab0:	42838810 	.word	0x42838810
   34ab4:	e92dd03d 	.word	0xe92dd03d
   34ab8:	8a1447f0 	.word	0x8a1447f0
   34abc:	d03542a3 	.word	0xd03542a3
   34ac0:	42ab8c15 	.word	0x42ab8c15
   34ac4:	8e16d032 	.word	0x8e16d032
   34ac8:	d02f42b3 	.word	0xd02f42b3
   34acc:	7040f8b2 	.word	0x7040f8b2
   34ad0:	d02b42bb 	.word	0xd02b42bb
   34ad4:	c050f8b2 	.word	0xc050f8b2
   34ad8:	d0274563 	.word	0xd0274563
   34adc:	e060f8b2 	.word	0xe060f8b2
   34ae0:	d0234573 	.word	0xd0234573
   34ae4:	8070f8b2 	.word	0x8070f8b2
   34ae8:	d01f4543 	.word	0xd01f4543
   34aec:	9080f8b2 	.word	0x9080f8b2
   34af0:	d01b454b 	.word	0xd01b454b
   34af4:	a090f8b2 	.word	0xa090f8b2
   34af8:	d0174553 	.word	0xd0174553
   34afc:	b35cb1e0 	.word	0xb35cb1e0
   34b00:	b36eb365 	.word	0xb36eb365
   34b04:	f1bcb377 	.word	0xf1bcb377
   34b08:	d02d0f00 	.word	0xd02d0f00
   34b0c:	0f00f1be 	.word	0x0f00f1be
   34b10:	f1b8d020 	.word	0xf1b8d020
   34b14:	d0290f00 	.word	0xd0290f00
   34b18:	0f00f1b9 	.word	0x0f00f1b9
   34b1c:	2009d00b 	.word	0x2009d00b
   34b20:	0f00f1ba 	.word	0x0f00f1ba
   34b24:	2004d008 	.word	0x2004d008
   34b28:	87f0e8bd 	.word	0x87f0e8bd
   34b2c:	e8bd2007 	.word	0xe8bd2007
   34b30:	200787f0 	.word	0x200787f0
   34b34:	20084770 	.word	0x20084770
   34b38:	52130100 	.word	0x52130100
   34b3c:	4402684b 	.word	0x4402684b
   34b40:	688b6053 	.word	0x688b6053
   34b44:	60932000 	.word	0x60932000
   34b48:	60d368cb 	.word	0x60d368cb
   34b4c:	87f0e8bd 	.word	0x87f0e8bd
   34b50:	4770200e 	.word	0x4770200e
   34b54:	e7ef2006 	.word	0xe7ef2006
   34b58:	e7ed2001 	.word	0xe7ed2001
   34b5c:	e7eb2002 	.word	0xe7eb2002
   34b60:	e7e92003 	.word	0xe7e92003
   34b64:	e7e72004 	.word	0xe7e72004
   34b68:	e7e52005 	.word	0xe7e52005
   34b6c:	e7e32007 	.word	0xe7e32007
   34b70:	20025bd0 	.word	0x20025bd0

00034b74 <rpc_transport_input>:
   34b74:	4a82b538 	.word	0x4a82b538
   34b78:	8810680b 	.word	0x8810680b
   34b7c:	4298b29b 	.word	0x4298b29b
   34b80:	8a10d027 	.word	0x8a10d027
   34b84:	d0244298 	.word	0xd0244298
   34b88:	42988c10 	.word	0x42988c10
   34b8c:	8e10d021 	.word	0x8e10d021
   34b90:	d01e4298 	.word	0xd01e4298
   34b94:	0040f8b2 	.word	0x0040f8b2
   34b98:	d01a4298 	.word	0xd01a4298
   34b9c:	0050f8b2 	.word	0x0050f8b2
   34ba0:	d0164298 	.word	0xd0164298
   34ba4:	0060f8b2 	.word	0x0060f8b2
   34ba8:	d0124298 	.word	0xd0124298
   34bac:	0070f8b2 	.word	0x0070f8b2
   34bb0:	d00e4298 	.word	0xd00e4298
   34bb4:	0080f8b2 	.word	0x0080f8b2
   34bb8:	d00a4298 	.word	0xd00a4298
   34bbc:	2090f8b2 	.word	0x2090f8b2
   34bc0:	d006429a 	.word	0xd006429a
   34bc4:	b1186888 	.word	0xb1186888
   34bc8:	691b4b6e 	.word	0x691b4b6e
   34bcc:	20004798 	.word	0x20004798
   34bd0:	6888bd38 	.word	0x6888bd38
   34bd4:	f0002800 	.word	0xf0002800
   34bd8:	4a6b8098 	.word	0x4a6b8098
   34bdc:	2c006814 	.word	0x2c006814
   34be0:	6894d03c 	.word	0x6894d03c
   34be4:	f0002c00 	.word	0xf0002c00
   34be8:	6914809a 	.word	0x6914809a
   34bec:	f0002c00 	.word	0xf0002c00
   34bf0:	6994809a 	.word	0x6994809a
   34bf4:	f0002c00 	.word	0xf0002c00
   34bf8:	6a14809a 	.word	0x6a14809a
   34bfc:	f0002c00 	.word	0xf0002c00
   34c00:	6a94809a 	.word	0x6a94809a
   34c04:	f0002c00 	.word	0xf0002c00
   34c08:	6b148084 	.word	0x6b148084
   34c0c:	f0002c00 	.word	0xf0002c00
   34c10:	6b948098 	.word	0x6b948098
   34c14:	f0002c00 	.word	0xf0002c00
   34c18:	6c148096 	.word	0x6c148096
   34c1c:	f0002c00 	.word	0xf0002c00
   34c20:	6c948096 	.word	0x6c948096
   34c24:	f0002c00 	.word	0xf0002c00
   34c28:	6d148096 	.word	0x6d148096
   34c2c:	f0002c00 	.word	0xf0002c00
   34c30:	6d948096 	.word	0x6d948096
   34c34:	f0002c00 	.word	0xf0002c00
   34c38:	6e148098 	.word	0x6e148098
   34c3c:	f0002c00 	.word	0xf0002c00
   34c40:	6e948098 	.word	0x6e948098
   34c44:	f0002c00 	.word	0xf0002c00
   34c48:	6f148096 	.word	0x6f148096
   34c4c:	f0002c00 	.word	0xf0002c00
   34c50:	6f948094 	.word	0x6f948094
   34c54:	2001b10c 	.word	0x2001b10c
   34c58:	240fbd38 	.word	0x240fbd38
   34c5c:	05c4eb02 	.word	0x05c4eb02
   34c60:	0034f842 	.word	0x0034f842
   34c64:	4b4980ab 	.word	0x4b4980ab
   34c68:	2a01781a 	.word	0x2a01781a
   34c6c:	7a1ad053 	.word	0x7a1ad053
   34c70:	d0412a01 	.word	0xd0412a01
   34c74:	2a017c1a 	.word	0x2a017c1a
   34c78:	7e1ad04f 	.word	0x7e1ad04f
   34c7c:	d0502a01 	.word	0xd0502a01
   34c80:	2020f893 	.word	0x2020f893
   34c84:	d0502a01 	.word	0xd0502a01
   34c88:	2028f893 	.word	0x2028f893
   34c8c:	d0502a01 	.word	0xd0502a01
   34c90:	2030f893 	.word	0x2030f893
   34c94:	d03a2a01 	.word	0xd03a2a01
   34c98:	2038f893 	.word	0x2038f893
   34c9c:	d04c2a01 	.word	0xd04c2a01
   34ca0:	2040f893 	.word	0x2040f893
   34ca4:	d04a2a01 	.word	0xd04a2a01
   34ca8:	2048f893 	.word	0x2048f893
   34cac:	d04c2a01 	.word	0xd04c2a01
   34cb0:	2050f893 	.word	0x2050f893
   34cb4:	d04c2a01 	.word	0xd04c2a01
   34cb8:	2058f893 	.word	0x2058f893
   34cbc:	d04c2a01 	.word	0xd04c2a01
   34cc0:	2060f893 	.word	0x2060f893
   34cc4:	d04c2a01 	.word	0xd04c2a01
   34cc8:	2068f893 	.word	0x2068f893
   34ccc:	d04a2a01 	.word	0xd04a2a01
   34cd0:	2070f893 	.word	0x2070f893
   34cd4:	d04a2a01 	.word	0xd04a2a01
   34cd8:	2078f893 	.word	0x2078f893
   34cdc:	d00a2a01 	.word	0xd00a2a01
   34ce0:	d0b82c10 	.word	0xd0b82c10
   34ce4:	4b282200 	.word	0x4b282200
   34ce8:	eb032001 	.word	0xeb032001
   34cec:	808a01c4 	.word	0x808a01c4
   34cf0:	2034f843 	.word	0x2034f843
   34cf4:	220fbd38 	.word	0x220fbd38
   34cf8:	eb032402 	.word	0xeb032402
   34cfc:	f80300c2 	.word	0xf80300c2
   34d00:	60414032 	.word	0x60414032
   34d04:	feecf7ed 	.word	0xfeecf7ed
   34d08:	2410e7a5 	.word	0x2410e7a5
   34d0c:	2206e7ab 	.word	0x2206e7ab
   34d10:	2405e7f2 	.word	0x2405e7f2
   34d14:	2200e7a2 	.word	0x2200e7a2
   34d18:	2202e7ee 	.word	0x2202e7ee
   34d1c:	2401e7ec 	.word	0x2401e7ec
   34d20:	2203e79c 	.word	0x2203e79c
   34d24:	2402e7e8 	.word	0x2402e7e8
   34d28:	2204e798 	.word	0x2204e798
   34d2c:	2403e7e4 	.word	0x2403e7e4
   34d30:	2205e794 	.word	0x2205e794
   34d34:	2404e7e0 	.word	0x2404e7e0
   34d38:	2207e790 	.word	0x2207e790
   34d3c:	2208e7dc 	.word	0x2208e7dc
   34d40:	2406e7da 	.word	0x2406e7da
   34d44:	2407e78a 	.word	0x2407e78a
   34d48:	2209e788 	.word	0x2209e788
   34d4c:	2408e7d4 	.word	0x2408e7d4
   34d50:	220ae784 	.word	0x220ae784
   34d54:	2409e7d0 	.word	0x2409e7d0
   34d58:	220be780 	.word	0x220be780
   34d5c:	240ae7cc 	.word	0x240ae7cc
   34d60:	220ce77c 	.word	0x220ce77c
   34d64:	220de7c8 	.word	0x220de7c8
   34d68:	240be7c6 	.word	0x240be7c6
   34d6c:	220ee776 	.word	0x220ee776
   34d70:	240ce7c2 	.word	0x240ce7c2
   34d74:	240de772 	.word	0x240de772
   34d78:	240ee770 	.word	0x240ee770
   34d7c:	bf00e76e 	.word	0xbf00e76e
   34d80:	20025bd0 	.word	0x20025bd0
   34d84:	20025c70 	.word	0x20025c70
   34d88:	20025c88 	.word	0x20025c88
   34d8c:	20025d08 	.word	0x20025d08

00034d90 <rpc_transport_register>:
   34d90:	2900b4f0 	.word	0x2900b4f0
   34d94:	2800d052 	.word	0x2800d052
   34d98:	6883d050 	.word	0x6883d050
   34d9c:	d04d2b00 	.word	0xd04d2b00
   34da0:	2b006903 	.word	0x2b006903
   34da4:	6843d04a 	.word	0x6843d04a
   34da8:	d0472b00 	.word	0xd0472b00
   34dac:	2b0068c3 	.word	0x2b0068c3
   34db0:	6803d044 	.word	0x6803d044
   34db4:	d0412b00 	.word	0xd0412b00
   34db8:	2b006943 	.word	0x2b006943
   34dbc:	2601d03e 	.word	0x2601d03e
   34dc0:	46042500 	.word	0x46042500
   34dc4:	4a1f460f 	.word	0x4a1f460f
   34dc8:	f8df4b1f 	.word	0xf8df4b1f
   34dcc:	7416c080 	.word	0x7416c080
   34dd0:	f8827616 	.word	0xf8827616
   34dd4:	f8826020 	.word	0xf8826020
   34dd8:	f8826028 	.word	0xf8826028
   34ddc:	f8826030 	.word	0xf8826030
   34de0:	f8826038 	.word	0xf8826038
   34de4:	f8826040 	.word	0xf8826040
   34de8:	f8826048 	.word	0xf8826048
   34dec:	f8826050 	.word	0xf8826050
   34df0:	f8826058 	.word	0xf8826058
   34df4:	f8826060 	.word	0xf8826060
   34df8:	f8826068 	.word	0xf8826068
   34dfc:	f8826070 	.word	0xf8826070
   34e00:	611d6078 	.word	0x611d6078
   34e04:	621d619d 	.word	0x621d619d
   34e08:	631d629d 	.word	0x631d629d
   34e0c:	641d639d 	.word	0x641d639d
   34e10:	651d649d 	.word	0x651d649d
   34e14:	661d659d 	.word	0x661d659d
   34e18:	671d669d 	.word	0x671d669d
   34e1c:	7016679d 	.word	0x7016679d
   34e20:	601d7216 	.word	0x601d7216
   34e24:	cc0f609d 	.word	0xcc0f609d
   34e28:	000fe8ac 	.word	0x000fe8ac
   34e2c:	0003e894 	.word	0x0003e894
   34e30:	0003e88c 	.word	0x0003e88c
   34e34:	4628603e 	.word	0x4628603e
   34e38:	4770bcf0 	.word	0x4770bcf0
   34e3c:	4628250e 	.word	0x4628250e
   34e40:	4770bcf0 	.word	0x4770bcf0
   34e44:	20025d08 	.word	0x20025d08
   34e48:	20025c88 	.word	0x20025c88
   34e4c:	20025c70 	.word	0x20025c70

00034e50 <rpc_transport_unregister>:
   34e50:	d03a2800 	.word	0xd03a2800
   34e54:	47f0e92d 	.word	0x47f0e92d
   34e58:	4c1d4680 	.word	0x4c1d4680
   34e5c:	05a0f104 	.word	0x05a0f104
   34e60:	341068a3 	.word	0x341068a3
   34e64:	4798b103 	.word	0x4798b103
   34e68:	d1f942ac 	.word	0xd1f942ac
   34e6c:	0901f04f 	.word	0x0901f04f
   34e70:	4c182600 	.word	0x4c182600
   34e74:	f8df4d18 	.word	0xf8df4d18
   34e78:	f104a064 	.word	0xf104a064
   34e7c:	f8140780 	.word	0xf8140780
   34e80:	2b013c04 	.word	0x2b013c04
   34e84:	f8dad005 	.word	0xf8dad005
   34e88:	6820300c 	.word	0x6820300c
   34e8c:	f8044798 	.word	0xf8044798
   34e90:	f8559c04 	.word	0xf8559c04
   34e94:	34080c04 	.word	0x34080c04
   34e98:	f8dab128 	.word	0xf8dab128
   34e9c:	47983010 	.word	0x47983010
   34ea0:	f845802e 	.word	0xf845802e
   34ea4:	42bc6c04 	.word	0x42bc6c04
   34ea8:	0508f105 	.word	0x0508f105
   34eac:	f8d8d1e7 	.word	0xf8d8d1e7
   34eb0:	22180000 	.word	0x22180000
   34eb4:	eb003801 	.word	0xeb003801
   34eb8:	eb0a0040 	.word	0xeb0a0040
   34ebc:	210000c0 	.word	0x210000c0
   34ec0:	ff6ef00b 	.word	0xff6ef00b
   34ec4:	e8bd2000 	.word	0xe8bd2000
   34ec8:	200e87f0 	.word	0x200e87f0
   34ecc:	bf004770 	.word	0xbf004770
   34ed0:	20025bd0 	.word	0x20025bd0
   34ed4:	20025d0c 	.word	0x20025d0c
   34ed8:	20025c8c 	.word	0x20025c8c
   34edc:	20025c70 	.word	0x20025c70

00034ee0 <rpc_message_send>:
   34ee0:	b171b168 	.word	0xb171b168
   34ee4:	68534a09 	.word	0x68534a09
   34ee8:	684bb16b 	.word	0x684bb16b
   34eec:	f0238008 	.word	0xf0238008
   34ef0:	f04303ff 	.word	0xf04303ff
   34ef4:	68120302 	.word	0x68120302
   34ef8:	4608604b 	.word	0x4608604b
   34efc:	20074710 	.word	0x20074710
   34f00:	200e4770 	.word	0x200e4770
   34f04:	20084770 	.word	0x20084770
   34f08:	bf004770 	.word	0xbf004770
   34f0c:	20025c70 	.word	0x20025c70

00034f10 <rpc_message_alloc>:
   34f10:	b330b35a 	.word	0xb330b35a
   34f14:	e92d2300 	.word	0xe92d2300
   34f18:	4f1541f0 	.word	0x4f1541f0
   34f1c:	687b6013 	.word	0x687b6013
   34f20:	4615b30b 	.word	0x4615b30b
   34f24:	4606460c 	.word	0x4606460c
   34f28:	4798b959 	.word	0x4798b959
   34f2c:	b1a84603 	.word	0xb1a84603
   34f30:	60dc46a0 	.word	0x60dc46a0
   34f34:	8008f8c3 	.word	0x8008f8c3
   34f38:	602b801e 	.word	0x602b801e
   34f3c:	e8bd2000 	.word	0xe8bd2000
   34f40:	68bb81f0 	.word	0x68bb81f0
   34f44:	47984608 	.word	0x47984608
   34f48:	b1384680 	.word	0xb1384680
   34f4c:	4798687b 	.word	0x4798687b
   34f50:	28004603 	.word	0x28004603
   34f54:	693bd1ed 	.word	0x693bd1ed
   34f58:	47984640 	.word	0x47984640
   34f5c:	e8bd2004 	.word	0xe8bd2004
   34f60:	200781f0 	.word	0x200781f0
   34f64:	20084770 	.word	0x20084770
   34f68:	200ee7f9 	.word	0x200ee7f9
   34f6c:	bf004770 	.word	0xbf004770
   34f70:	20025c70 	.word	0x20025c70

00034f74 <rpc_message_free>:
   34f74:	f0002800 	.word	0xf0002800
   34f78:	2900808c 	.word	0x2900808c
   34f7c:	80e9f000 	.word	0x80e9f000
   34f80:	4a83b538 	.word	0x4a83b538
   34f84:	2b006853 	.word	0x2b006853
   34f88:	8085f000 	.word	0x8085f000
   34f8c:	46084c81 	.word	0x46084c81
   34f90:	42996863 	.word	0x42996863
   34f94:	8085f000 	.word	0x8085f000
   34f98:	429868e3 	.word	0x429868e3
   34f9c:	808ef000 	.word	0x808ef000
   34fa0:	42986963 	.word	0x42986963
   34fa4:	8090f000 	.word	0x8090f000
   34fa8:	429869e3 	.word	0x429869e3
   34fac:	8092f000 	.word	0x8092f000
   34fb0:	42986a63 	.word	0x42986a63
   34fb4:	8095f000 	.word	0x8095f000
   34fb8:	42986ae3 	.word	0x42986ae3
   34fbc:	8098f000 	.word	0x8098f000
   34fc0:	42986b63 	.word	0x42986b63
   34fc4:	809bf000 	.word	0x809bf000
   34fc8:	42986be3 	.word	0x42986be3
   34fcc:	809ef000 	.word	0x809ef000
   34fd0:	42986c63 	.word	0x42986c63
   34fd4:	80a1f000 	.word	0x80a1f000
   34fd8:	42986ce3 	.word	0x42986ce3
   34fdc:	80a4f000 	.word	0x80a4f000
   34fe0:	42986d63 	.word	0x42986d63
   34fe4:	80a7f000 	.word	0x80a7f000
   34fe8:	42986de3 	.word	0x42986de3
   34fec:	80aaf000 	.word	0x80aaf000
   34ff0:	42986e63 	.word	0x42986e63
   34ff4:	80aff000 	.word	0x80aff000
   34ff8:	42986ee3 	.word	0x42986ee3
   34ffc:	80b2f000 	.word	0x80b2f000
   35000:	42986f63 	.word	0x42986f63
   35004:	80b5f000 	.word	0x80b5f000
   35008:	42836fe3 	.word	0x42836fe3
   3500c:	80b8f000 	.word	0x80b8f000
   35010:	479868d3 	.word	0x479868d3
   35014:	2b047823 	.word	0x2b047823
   35018:	7a23d03f 	.word	0x7a23d03f
   3501c:	d03c2b04 	.word	0xd03c2b04
   35020:	2b047c23 	.word	0x2b047c23
   35024:	7e23d039 	.word	0x7e23d039
   35028:	d0362b04 	.word	0xd0362b04
   3502c:	3020f894 	.word	0x3020f894
   35030:	d0322b04 	.word	0xd0322b04
   35034:	3028f894 	.word	0x3028f894
   35038:	d02e2b04 	.word	0xd02e2b04
   3503c:	3030f894 	.word	0x3030f894
   35040:	d02a2b04 	.word	0xd02a2b04
   35044:	3038f894 	.word	0x3038f894
   35048:	d0262b04 	.word	0xd0262b04
   3504c:	3040f894 	.word	0x3040f894
   35050:	d0222b04 	.word	0xd0222b04
   35054:	3048f894 	.word	0x3048f894
   35058:	d01e2b04 	.word	0xd01e2b04
   3505c:	3050f894 	.word	0x3050f894
   35060:	d01a2b04 	.word	0xd01a2b04
   35064:	3058f894 	.word	0x3058f894
   35068:	d0162b04 	.word	0xd0162b04
   3506c:	3060f894 	.word	0x3060f894
   35070:	d0122b04 	.word	0xd0122b04
   35074:	3068f894 	.word	0x3068f894
   35078:	d00e2b04 	.word	0xd00e2b04
   3507c:	3070f894 	.word	0x3070f894
   35080:	d00a2b04 	.word	0xd00a2b04
   35084:	3078f894 	.word	0x3078f894
   35088:	bf182b04 	.word	0xbf182b04
   3508c:	d0042000 	.word	0xd0042000
   35090:	2007bd38 	.word	0x2007bd38
   35094:	20084770 	.word	0x20084770
   35098:	f7edbd38 	.word	0xf7edbd38
   3509c:	2000fd21 	.word	0x2000fd21
   350a0:	7821bd38 	.word	0x7821bd38
   350a4:	f47f2903 	.word	0xf47f2903
   350a8:	2100af77 	.word	0x2100af77
   350ac:	46182501 	.word	0x46182501
   350b0:	f80468d2 	.word	0xf80468d2
   350b4:	47905031 	.word	0x47905031
   350b8:	bd382000 	.word	0xbd382000
   350bc:	29037a21 	.word	0x29037a21
   350c0:	af6ef47f 	.word	0xaf6ef47f
   350c4:	e7f12101 	.word	0xe7f12101
   350c8:	29037c21 	.word	0x29037c21
   350cc:	af6cf47f 	.word	0xaf6cf47f
   350d0:	e7eb2102 	.word	0xe7eb2102
   350d4:	29037e21 	.word	0x29037e21
   350d8:	6a63d0e8 	.word	0x6a63d0e8
   350dc:	f47f4298 	.word	0xf47f4298
   350e0:	f894af6b 	.word	0xf894af6b
   350e4:	29031020 	.word	0x29031020
   350e8:	af66f47f 	.word	0xaf66f47f
   350ec:	e7dd2104 	.word	0xe7dd2104
   350f0:	1028f894 	.word	0x1028f894
   350f4:	f47f2903 	.word	0xf47f2903
   350f8:	2105af63 	.word	0x2105af63
   350fc:	f894e7d6 	.word	0xf894e7d6
   35100:	29031030 	.word	0x29031030
   35104:	af60f47f 	.word	0xaf60f47f
   35108:	e7cf2106 	.word	0xe7cf2106
   3510c:	1038f894 	.word	0x1038f894
   35110:	f47f2903 	.word	0xf47f2903
   35114:	2107af5d 	.word	0x2107af5d
   35118:	f894e7c8 	.word	0xf894e7c8
   3511c:	29031040 	.word	0x29031040
   35120:	af5af47f 	.word	0xaf5af47f
   35124:	e7c12108 	.word	0xe7c12108
   35128:	1048f894 	.word	0x1048f894
   3512c:	f47f2903 	.word	0xf47f2903
   35130:	2109af57 	.word	0x2109af57
   35134:	f894e7ba 	.word	0xf894e7ba
   35138:	29031050 	.word	0x29031050
   3513c:	af54f47f 	.word	0xaf54f47f
   35140:	e7b3210a 	.word	0xe7b3210a
   35144:	1058f894 	.word	0x1058f894
   35148:	f47f2903 	.word	0xf47f2903
   3514c:	210baf51 	.word	0x210baf51
   35150:	200ee7ac 	.word	0x200ee7ac
   35154:	f8944770 	.word	0xf8944770
   35158:	29031060 	.word	0x29031060
   3515c:	af4cf47f 	.word	0xaf4cf47f
   35160:	e7a3210c 	.word	0xe7a3210c
   35164:	1068f894 	.word	0x1068f894
   35168:	f47f2903 	.word	0xf47f2903
   3516c:	210daf49 	.word	0x210daf49
   35170:	f894e79c 	.word	0xf894e79c
   35174:	29031070 	.word	0x29031070
   35178:	af46f47f 	.word	0xaf46f47f
   3517c:	e795210e 	.word	0xe795210e
   35180:	3078f894 	.word	0x3078f894
   35184:	f47f2b03 	.word	0xf47f2b03
   35188:	4603af43 	.word	0x4603af43
   3518c:	e78d210f 	.word	0xe78d210f
   35190:	20025c70 	.word	0x20025c70
   35194:	20025d08 	.word	0x20025d08

00035198 <rpc_message_data_free>:
   35198:	f0002800 	.word	0xf0002800
   3519c:	29008091 	.word	0x29008091
   351a0:	80e4f000 	.word	0x80e4f000
   351a4:	4a81b538 	.word	0x4a81b538
   351a8:	2b006853 	.word	0x2b006853
   351ac:	808af000 	.word	0x808af000
   351b0:	681c4b7f 	.word	0x681c4b7f
   351b4:	f00042a1 	.word	0xf00042a1
   351b8:	689c8087 	.word	0x689c8087
   351bc:	f00042a1 	.word	0xf00042a1
   351c0:	691c808f 	.word	0x691c808f
   351c4:	f00042a1 	.word	0xf00042a1
   351c8:	699c8091 	.word	0x699c8091
   351cc:	f00042a1 	.word	0xf00042a1
   351d0:	6a1c8093 	.word	0x6a1c8093
   351d4:	f00042a1 	.word	0xf00042a1
   351d8:	6a9c8095 	.word	0x6a9c8095
   351dc:	f00042a1 	.word	0xf00042a1
   351e0:	6b1c8097 	.word	0x6b1c8097
   351e4:	f00042a1 	.word	0xf00042a1
   351e8:	6b9c8099 	.word	0x6b9c8099
   351ec:	f00042a1 	.word	0xf00042a1
   351f0:	6c1c809b 	.word	0x6c1c809b
   351f4:	f00042a1 	.word	0xf00042a1
   351f8:	6c9c809d 	.word	0x6c9c809d
   351fc:	f00042a1 	.word	0xf00042a1
   35200:	6d1c80a0 	.word	0x6d1c80a0
   35204:	f00042a1 	.word	0xf00042a1
   35208:	6d9c80a3 	.word	0x6d9c80a3
   3520c:	f00042a1 	.word	0xf00042a1
   35210:	6e1c80a6 	.word	0x6e1c80a6
   35214:	f00042a1 	.word	0xf00042a1
   35218:	6e9c80ab 	.word	0x6e9c80ab
   3521c:	f00042a1 	.word	0xf00042a1
   35220:	6f1c80ae 	.word	0x6f1c80ae
   35224:	f00042a1 	.word	0xf00042a1
   35228:	6f9c80b1 	.word	0x6f9c80b1
   3522c:	f000428c 	.word	0xf000428c
   35230:	691380b4 	.word	0x691380b4
   35234:	47984608 	.word	0x47984608
   35238:	781a4b5e 	.word	0x781a4b5e
   3523c:	d03b2a04 	.word	0xd03b2a04
   35240:	2a047a1a 	.word	0x2a047a1a
   35244:	7c1ad038 	.word	0x7c1ad038
   35248:	d0352a04 	.word	0xd0352a04
   3524c:	2a047e1a 	.word	0x2a047e1a
   35250:	f893d032 	.word	0xf893d032
   35254:	2a042020 	.word	0x2a042020
   35258:	f893d02e 	.word	0xf893d02e
   3525c:	2a042028 	.word	0x2a042028
   35260:	f893d02a 	.word	0xf893d02a
   35264:	2a042030 	.word	0x2a042030
   35268:	f893d026 	.word	0xf893d026
   3526c:	2a042038 	.word	0x2a042038
   35270:	f893d022 	.word	0xf893d022
   35274:	2a042040 	.word	0x2a042040
   35278:	f893d01e 	.word	0xf893d01e
   3527c:	2a042048 	.word	0x2a042048
   35280:	f893d01a 	.word	0xf893d01a
   35284:	2a042050 	.word	0x2a042050
   35288:	f893d016 	.word	0xf893d016
   3528c:	2a042058 	.word	0x2a042058
   35290:	f893d012 	.word	0xf893d012
   35294:	2a042060 	.word	0x2a042060
   35298:	f893d00e 	.word	0xf893d00e
   3529c:	2a042068 	.word	0x2a042068
   352a0:	f893d00a 	.word	0xf893d00a
   352a4:	2a042070 	.word	0x2a042070
   352a8:	f893d006 	.word	0xf893d006
   352ac:	2b043078 	.word	0x2b043078
   352b0:	2000bf18 	.word	0x2000bf18
   352b4:	bd38d000 	.word	0xbd38d000
   352b8:	fc12f7ed 	.word	0xfc12f7ed
   352bc:	bd382000 	.word	0xbd382000
   352c0:	47702007 	.word	0x47702007
   352c4:	bd382008 	.word	0xbd382008
   352c8:	4284889c 	.word	0x4284889c
   352cc:	af75f47f 	.word	0xaf75f47f
   352d0:	20002400 	.word	0x20002400
   352d4:	05c4eb03 	.word	0x05c4eb03
   352d8:	0034f843 	.word	0x0034f843
   352dc:	e7a880a8 	.word	0xe7a880a8
   352e0:	4284899c 	.word	0x4284899c
   352e4:	af6df47f 	.word	0xaf6df47f
   352e8:	e7f22401 	.word	0xe7f22401
   352ec:	42848a9c 	.word	0x42848a9c
   352f0:	af6bf47f 	.word	0xaf6bf47f
   352f4:	e7ec2402 	.word	0xe7ec2402
   352f8:	42848b9c 	.word	0x42848b9c
   352fc:	af69f47f 	.word	0xaf69f47f
   35300:	e7e62403 	.word	0xe7e62403
   35304:	42848c9c 	.word	0x42848c9c
   35308:	af67f47f 	.word	0xaf67f47f
   3530c:	e7e02404 	.word	0xe7e02404
   35310:	42848d9c 	.word	0x42848d9c
   35314:	af65f47f 	.word	0xaf65f47f
   35318:	e7da2405 	.word	0xe7da2405
   3531c:	42848e9c 	.word	0x42848e9c
   35320:	af63f47f 	.word	0xaf63f47f
   35324:	e7d42406 	.word	0xe7d42406
   35328:	42848f9c 	.word	0x42848f9c
   3532c:	af61f47f 	.word	0xaf61f47f
   35330:	e7ce2407 	.word	0xe7ce2407
   35334:	4044f8b3 	.word	0x4044f8b3
   35338:	f47f4284 	.word	0xf47f4284
   3533c:	2408af5e 	.word	0x2408af5e
   35340:	f8b3e7c7 	.word	0xf8b3e7c7
   35344:	4284404c 	.word	0x4284404c
   35348:	af5bf47f 	.word	0xaf5bf47f
   3534c:	e7c02409 	.word	0xe7c02409
   35350:	4054f8b3 	.word	0x4054f8b3
   35354:	f47f4284 	.word	0xf47f4284
   35358:	240aaf58 	.word	0x240aaf58
   3535c:	f8b3e7b9 	.word	0xf8b3e7b9
   35360:	4284405c 	.word	0x4284405c
   35364:	af55f47f 	.word	0xaf55f47f
   35368:	e7b2240b 	.word	0xe7b2240b
   3536c:	4770200e 	.word	0x4770200e
   35370:	4064f8b3 	.word	0x4064f8b3
   35374:	f47f4284 	.word	0xf47f4284
   35378:	240caf50 	.word	0x240caf50
   3537c:	f8b3e7a9 	.word	0xf8b3e7a9
   35380:	4284406c 	.word	0x4284406c
   35384:	af4df47f 	.word	0xaf4df47f
   35388:	e7a2240d 	.word	0xe7a2240d
   3538c:	4074f8b3 	.word	0x4074f8b3
   35390:	f47f4284 	.word	0xf47f4284
   35394:	240eaf4a 	.word	0x240eaf4a
   35398:	f8b3e79b 	.word	0xf8b3e79b
   3539c:	4284407c 	.word	0x4284407c
   353a0:	240fbf08 	.word	0x240fbf08
   353a4:	af45f47f 	.word	0xaf45f47f
   353a8:	bf00e793 	.word	0xbf00e793
   353ac:	20025c70 	.word	0x20025c70
   353b0:	20025c88 	.word	0x20025c88
   353b4:	20025d08 	.word	0x20025d08

000353b8 <symbol_000fb79>:
   353b8:	b4302801 	.word	0xb4302801
   353bc:	d1034b0a 	.word	0xd1034b0a
   353c0:	7c1de00a 	.word	0x7c1de00a
   353c4:	d0084285 	.word	0xd0084285
   353c8:	4f14f853 	.word	0x4f14f853
   353cc:	d1f82c00 	.word	0xd1f82c00
   353d0:	002df06f 	.word	0x002df06f
   353d4:	4770bc30 	.word	0x4770bc30
   353d8:	600c4c04 	.word	0x600c4c04
   353dc:	2000685b 	.word	0x2000685b
   353e0:	6013bc30 	.word	0x6013bc30
   353e4:	bf004770 	.word	0xbf004770
   353e8:	00043340 	.word	0x00043340
   353ec:	0004330c 	.word	0x0004330c

000353f0 <symbol_000494c>:
   353f0:	b4302803 	.word	0xb4302803
   353f4:	d1034b0a 	.word	0xd1034b0a
   353f8:	7c1de00a 	.word	0x7c1de00a
   353fc:	d0084285 	.word	0xd0084285
   35400:	4f14f853 	.word	0x4f14f853
   35404:	d1f82c00 	.word	0xd1f82c00
   35408:	002df06f 	.word	0x002df06f
   3540c:	4770bc30 	.word	0x4770bc30
   35410:	600c4c04 	.word	0x600c4c04
   35414:	2000685b 	.word	0x2000685b
   35418:	6013bc30 	.word	0x6013bc30
   3541c:	bf004770 	.word	0xbf004770
   35420:	00043318 	.word	0x00043318
   35424:	00043300 	.word	0x00043300

00035428 <dfu_client_event_handler>:
   35428:	1b08f850 	.word	0x1b08f850
   3542c:	f7fb0c09 	.word	0xf7fb0c09
   35430:	bf00bff3 	.word	0xbf00bff3

00035434 <rpc_dfu_client_init>:
   35434:	f7ff4801 	.word	0xf7ff4801
   35438:	bf00bb33 	.word	0xbf00bb33
   3543c:	00043390 	.word	0x00043390

00035440 <rpc_dfu_client_request_alloc>:
   35440:	b5102300 	.word	0xb5102300
   35444:	9301b082 	.word	0x9301b082
   35448:	4604b158 	.word	0x4604b158
   3544c:	2006aa01 	.word	0x2006aa01
   35450:	fd5ef7ff 	.word	0xfd5ef7ff
   35454:	9b01b918 	.word	0x9b01b918
   35458:	3308b10b 	.word	0x3308b10b
   3545c:	b0026023 	.word	0xb0026023
   35460:	2007bd10 	.word	0x2007bd10
   35464:	bd10b002 	.word	0xbd10b002

00035468 <rpc_dfu_client_request_send>:
   35468:	4f70f411 	.word	0x4f70f411
   3546c:	b160d10b 	.word	0xb160d10b
   35470:	f8304603 	.word	0xf8304603
   35474:	20062c08 	.word	0x20062c08
   35478:	4101ea42 	.word	0x4101ea42
   3547c:	1d08f843 	.word	0x1d08f843
   35480:	f7ff4619 	.word	0xf7ff4619
   35484:	200fbd2d 	.word	0x200fbd2d
   35488:	20074770 	.word	0x20074770
   3548c:	bf004770 	.word	0xbf004770

00035490 <rpc_dfu_client_message_free>:
   35490:	f1a0b120 	.word	0xf1a0b120
   35494:	20060108 	.word	0x20060108
   35498:	bd6cf7ff 	.word	0xbd6cf7ff
   3549c:	47702007 	.word	0x47702007

000354a0 <rpc_dfu_client_data_free>:
   354a0:	4601b118 	.word	0x4601b118
   354a4:	f7ff2006 	.word	0xf7ff2006
   354a8:	2007be77 	.word	0x2007be77
   354ac:	bf004770 	.word	0xbf004770

000354b0 <mem_free>:
   354b0:	4ff0e92d 	.word	0x4ff0e92d
   354b4:	c0ccf8df 	.word	0xc0ccf8df
   354b8:	9000b083 	.word	0x9000b083
   354bc:	0b3cf10c 	.word	0x0b3cf10c
   354c0:	3008f8dc 	.word	0x3008f8dc
   354c4:	f8dcb12b 	.word	0xf8dcb12b
   354c8:	9c002000 	.word	0x9c002000
   354cc:	42a07810 	.word	0x42a07810
   354d0:	f10cd006 	.word	0xf10cd006
   354d4:	45e30c0c 	.word	0x45e30c0c
   354d8:	b003d1f2 	.word	0xb003d1f2
   354dc:	8ff0e8bd 	.word	0x8ff0e8bd
   354e0:	a004f8dc 	.word	0xa004f8dc
   354e4:	080aeb03 	.word	0x080aeb03
   354e8:	d2f245c2 	.word	0xd2f245c2
   354ec:	f8cd6853 	.word	0xf8cd6853
   354f0:	46d6c004 	.word	0x46d6c004
   354f4:	f8d2469c 	.word	0xf8d2469c
   354f8:	89979010 	.word	0x89979010
   354fc:	000aebae 	.word	0x000aebae
   35500:	f8b9b3df 	.word	0xf8b9b3df
   35504:	42902002 	.word	0x42902002
   35508:	4665d31c 	.word	0x4665d31c
   3550c:	f1092400 	.word	0xf1092400
   35510:	e0030304 	.word	0xe0030304
   35514:	3304885a 	.word	0x3304885a
   35518:	d8154282 	.word	0xd8154282
   3551c:	6c04f833 	.word	0x6c04f833
   35520:	42a73401 	.word	0x42a73401
   35524:	5506fb02 	.word	0x5506fb02
   35528:	0002eba0 	.word	0x0002eba0
   3552c:	d1f1461e 	.word	0xd1f1461e
   35530:	42812000 	.word	0x42812000
   35534:	f10ed00d 	.word	0xf10ed00d
   35538:	45f00e01 	.word	0x45f00e01
   3553c:	f8ddd1de 	.word	0xf8ddd1de
   35540:	e7c6c004 	.word	0xe7c6c004
   35544:	464e4665 	.word	0x464e4665
   35548:	fb008833 	.word	0xfb008833
   3554c:	42815003 	.word	0x42815003
   35550:	f5bed1f1 	.word	0xf5bed1f1
   35554:	f8dd7f00 	.word	0xf8dd7f00
   35558:	d0bac004 	.word	0xd0bac004
   3555c:	4a082301 	.word	0x4a082301
   35560:	115eea4f 	.word	0x115eea4f
   35564:	0021f852 	.word	0x0021f852
   35568:	0e1ff00e 	.word	0x0e1ff00e
   3556c:	fe0efa03 	.word	0xfe0efa03
   35570:	0000ea4e 	.word	0x0000ea4e
   35574:	0021f842 	.word	0x0021f842
   35578:	4638e7af 	.word	0x4638e7af
   3557c:	bf00e7d9 	.word	0xbf00e7d9
   35580:	20025d88 	.word	0x20025d88
   35584:	20025dcc 	.word	0x20025dcc

00035588 <mem_alloc.constprop.5>:
   35588:	d0502800 	.word	0xd0502800
   3558c:	f8d34b6d 	.word	0xf8d34b6d
   35590:	42902088 	.word	0x42902088
   35594:	e92dd84b 	.word	0xe92dd84b
   35598:	f8d34ff0 	.word	0xf8d34ff0
   3559c:	b083b08c 	.word	0xb083b08c
   355a0:	0f00f1bb 	.word	0x0f00f1bb
   355a4:	f10bd054 	.word	0xf10bd054
   355a8:	469132ff 	.word	0x469132ff
   355ac:	f04f2600 	.word	0xf04f2600
   355b0:	4f650812 	.word	0x4f650812
   355b4:	f10b9201 	.word	0xf10b9201
   355b8:	eb060e11 	.word	0xeb060e11
   355bc:	f8530209 	.word	0xf8530209
   355c0:	32014038 	.word	0x32014038
   355c4:	eb040852 	.word	0xeb040852
   355c8:	f1020c44 	.word	0xf1020c44
   355cc:	f8530112 	.word	0xf8530112
   355d0:	f8575031 	.word	0xf8575031
   355d4:	f853a02c 	.word	0xf853a02c
   355d8:	eb03403e 	.word	0xeb03403e
   355dc:	f8dc0cc8 	.word	0xf8dc0cc8
   355e0:	eb05c004 	.word	0xeb05c004
   355e4:	eb040545 	.word	0xeb040545
   355e8:	f8da0444 	.word	0xf8da0444
   355ec:	f857a010 	.word	0xf857a010
   355f0:	f8575025 	.word	0xf8575025
   355f4:	f83a4024 	.word	0xf83a4024
   355f8:	eb03a02c 	.word	0xeb03a02c
   355fc:	eb0301c1 	.word	0xeb0301c1
   35600:	68490cce 	.word	0x68490cce
   35604:	6924692d 	.word	0x6924692d
   35608:	c004f8dc 	.word	0xc004f8dc
   3560c:	f8354550 	.word	0xf8354550
   35610:	f8345021 	.word	0xf8345021
   35614:	d915102c 	.word	0xd915102c
   35618:	d2114288 	.word	0xd2114288
   3561c:	d90842a8 	.word	0xd90842a8
   35620:	45b11c56 	.word	0x45b11c56
   35624:	8087f0c0 	.word	0x8087f0c0
   35628:	0813f102 	.word	0x0813f102
   3562c:	2000e7c5 	.word	0x2000e7c5
   35630:	f1024770 	.word	0xf1024770
   35634:	454e39ff 	.word	0x454e39ff
   35638:	f102d87d 	.word	0xf102d87d
   3563c:	e7bc0e11 	.word	0xe7bc0e11
   35640:	0601f109 	.word	0x0601f109
   35644:	d00745b3 	.word	0xd00745b3
   35648:	d0012e10 	.word	0xd0012e10
   3564c:	d80845b3 	.word	0xd80845b3
   35650:	b0032000 	.word	0xb0032000
   35654:	8ff0e8bd 	.word	0x8ff0e8bd
   35658:	2a109a01 	.word	0x2a109a01
   3565c:	4616bf18 	.word	0x4616bf18
   35660:	f8dfd0f6 	.word	0xf8dfd0f6
   35664:	eb03c0e8 	.word	0xeb03c0e8
   35668:	e9d808c6 	.word	0xe9d808c6
   3566c:	eb022424 	.word	0xeb022424
   35670:	f8570242 	.word	0xf8570242
   35674:	eb073022 	.word	0xeb073022
   35678:	f8d20282 	.word	0xf8d20282
   3567c:	691de004 	.word	0x691de004
   35680:	d0562c00 	.word	0xd0562c00
   35684:	4670462a 	.word	0x4670462a
   35688:	eb0500a4 	.word	0xeb0500a4
   3568c:	88510904 	.word	0x88510904
   35690:	45913204 	.word	0x45913204
   35694:	d1fa4408 	.word	0xd1fa4408
   35698:	f8b11929 	.word	0xf8b11929
   3569c:	4482a002 	.word	0x4482a002
   356a0:	d9184582 	.word	0xd9184582
   356a4:	f85c0941 	.word	0xf85c0941
   356a8:	f0002021 	.word	0xf0002021
   356ac:	fa22041f 	.word	0xfa22041f
   356b0:	f019f904 	.word	0xf019f904
   356b4:	d0070f01 	.word	0xd0070f01
   356b8:	f85ce013 	.word	0xf85ce013
   356bc:	fa222021 	.word	0xfa222021
   356c0:	f019f904 	.word	0xf019f904
   356c4:	d10c0f01 	.word	0xd10c0f01
   356c8:	45823001 	.word	0x45823001
   356cc:	1150ea4f 	.word	0x1150ea4f
   356d0:	041ff000 	.word	0x041ff000
   356d4:	3601d1f1 	.word	0x3601d1f1
   356d8:	f108455e 	.word	0xf108455e
   356dc:	d3c40808 	.word	0xd3c40808
   356e0:	2601e7b6 	.word	0x2601e7b6
   356e4:	f404fa06 	.word	0xf404fa06
   356e8:	ea22899e 	.word	0xea22899e
   356ec:	eba00204 	.word	0xeba00204
   356f0:	f84c000e 	.word	0xf84c000e
   356f4:	685c2021 	.word	0x685c2021
   356f8:	d0a92e00 	.word	0xd0a92e00
   356fc:	4282886a 	.word	0x4282886a
   35700:	2100d811 	.word	0x2100d811
   35704:	e0031d2b 	.word	0xe0031d2b
   35708:	3304885a 	.word	0x3304885a
   3570c:	d80a4282 	.word	0xd80a4282
   35710:	5c04f833 	.word	0x5c04f833
   35714:	428e3101 	.word	0x428e3101
   35718:	4405fb02 	.word	0x4405fb02
   3571c:	0002eba0 	.word	0x0002eba0
   35720:	d1f1461d 	.word	0xd1f1461d
   35724:	882be794 	.word	0x882be794
   35728:	4003fb00 	.word	0x4003fb00
   3572c:	e8bdb003 	.word	0xe8bdb003
   35730:	46708ff0 	.word	0x46708ff0
   35734:	f1bbe7b0 	.word	0xf1bbe7b0
   35738:	bf080f10 	.word	0xbf080f10
   3573c:	d090260f 	.word	0xd090260f
   35740:	bf00e786 	.word	0xbf00e786
   35744:	20025e08 	.word	0x20025e08
   35748:	20025dcc 	.word	0x20025dcc
   3574c:	20025d88 	.word	0x20025d88

00035750 <mem_alloc.constprop.4>:
   35750:	d04c2800 	.word	0xd04c2800
   35754:	681a4b6b 	.word	0x681a4b6b
   35758:	d8484290 	.word	0xd8484290
   3575c:	4ff0e92d 	.word	0x4ff0e92d
   35760:	b083685f 	.word	0xb083685f
   35764:	2f009700 	.word	0x2f009700
   35768:	1e7ad051 	.word	0x1e7ad051
   3576c:	21004696 	.word	0x21004696
   35770:	0c01f04f 	.word	0x0c01f04f
   35774:	92014c64 	.word	0x92014c64
   35778:	020eeb01 	.word	0x020eeb01
   3577c:	f8533201 	.word	0xf8533201
   35780:	0852503c 	.word	0x0852503c
   35784:	0801f102 	.word	0x0801f102
   35788:	0545eb05 	.word	0x0545eb05
   3578c:	9037f853 	.word	0x9037f853
   35790:	a025f854 	.word	0xa025f854
   35794:	6038f853 	.word	0x6038f853
   35798:	0549eb09 	.word	0x0549eb09
   3579c:	09cceb03 	.word	0x09cceb03
   357a0:	9004f8d9 	.word	0x9004f8d9
   357a4:	0646eb06 	.word	0x0646eb06
   357a8:	a010f8da 	.word	0xa010f8da
   357ac:	6026f854 	.word	0x6026f854
   357b0:	5025f854 	.word	0x5025f854
   357b4:	a029f83a 	.word	0xa029f83a
   357b8:	0bc8eb03 	.word	0x0bc8eb03
   357bc:	09c7eb03 	.word	0x09c7eb03
   357c0:	f8db6936 	.word	0xf8db6936
   357c4:	692db004 	.word	0x692db004
   357c8:	9004f8d9 	.word	0x9004f8d9
   357cc:	f8364550 	.word	0xf8364550
   357d0:	f835602b 	.word	0xf835602b
   357d4:	d9135029 	.word	0xd9135029
   357d8:	d21042a8 	.word	0xd21042a8
   357dc:	d90842b0 	.word	0xd90842b0
   357e0:	464145c6 	.word	0x464145c6
   357e4:	8087f0c0 	.word	0x8087f0c0
   357e8:	0c01f108 	.word	0x0c01f108
   357ec:	2000e7c4 	.word	0x2000e7c4
   357f0:	f1024770 	.word	0xf1024770
   357f4:	45713eff 	.word	0x45713eff
   357f8:	4617d87d 	.word	0x4617d87d
   357fc:	4639e7bc 	.word	0x4639e7bc
   35800:	428a9a00 	.word	0x428a9a00
   35804:	2910d007 	.word	0x2910d007
   35808:	428ad001 	.word	0x428ad001
   3580c:	2000d808 	.word	0x2000d808
   35810:	e8bdb003 	.word	0xe8bdb003
   35814:	9a018ff0 	.word	0x9a018ff0
   35818:	bf182a10 	.word	0xbf182a10
   3581c:	d0f64611 	.word	0xd0f64611
   35820:	c0e8f8df 	.word	0xc0e8f8df
   35824:	9000f8dd 	.word	0x9000f8dd
   35828:	08c1eb03 	.word	0x08c1eb03
   3582c:	2602e9d8 	.word	0x2602e9d8
   35830:	0242eb02 	.word	0x0242eb02
   35834:	3022f854 	.word	0x3022f854
   35838:	0282eb04 	.word	0x0282eb04
   3583c:	e004f8d2 	.word	0xe004f8d2
   35840:	2e00691f 	.word	0x2e00691f
   35844:	463ad055 	.word	0x463ad055
   35848:	00b64670 	.word	0x00b64670
   3584c:	0a06eb07 	.word	0x0a06eb07
   35850:	32048855 	.word	0x32048855
   35854:	44284592 	.word	0x44284592
   35858:	19bdd1fa 	.word	0x19bdd1fa
   3585c:	b002f8b5 	.word	0xb002f8b5
   35860:	45834483 	.word	0x45834483
   35864:	0945d918 	.word	0x0945d918
   35868:	2025f85c 	.word	0x2025f85c
   3586c:	061ff000 	.word	0x061ff000
   35870:	fa06fa22 	.word	0xfa06fa22
   35874:	0f01f01a 	.word	0x0f01f01a
   35878:	e013d007 	.word	0xe013d007
   3587c:	2025f85c 	.word	0x2025f85c
   35880:	fa06fa22 	.word	0xfa06fa22
   35884:	0f01f01a 	.word	0x0f01f01a
   35888:	3001d10c 	.word	0x3001d10c
   3588c:	ea4f4583 	.word	0xea4f4583
   35890:	f0001550 	.word	0xf0001550
   35894:	d1f1061f 	.word	0xd1f1061f
   35898:	45493101 	.word	0x45493101
   3589c:	0808f108 	.word	0x0808f108
   358a0:	e7b4d3c4 	.word	0xe7b4d3c4
   358a4:	40b12101 	.word	0x40b12101
   358a8:	ea22899e 	.word	0xea22899e
   358ac:	eba00201 	.word	0xeba00201
   358b0:	f84c000e 	.word	0xf84c000e
   358b4:	685c2025 	.word	0x685c2025
   358b8:	d0a82e00 	.word	0xd0a82e00
   358bc:	4282887a 	.word	0x4282887a
   358c0:	2100d811 	.word	0x2100d811
   358c4:	e0031d3b 	.word	0xe0031d3b
   358c8:	3304885a 	.word	0x3304885a
   358cc:	d80a4282 	.word	0xd80a4282
   358d0:	5c04f833 	.word	0x5c04f833
   358d4:	428e3101 	.word	0x428e3101
   358d8:	0002eba0 	.word	0x0002eba0
   358dc:	4405fb02 	.word	0x4405fb02
   358e0:	d1f1461f 	.word	0xd1f1461f
   358e4:	883be793 	.word	0x883be793
   358e8:	4003fb00 	.word	0x4003fb00
   358ec:	e8bdb003 	.word	0xe8bdb003
   358f0:	46708ff0 	.word	0x46708ff0
   358f4:	9a00e7b1 	.word	0x9a00e7b1
   358f8:	bf082a10 	.word	0xbf082a10
   358fc:	d08f210f 	.word	0xd08f210f
   35900:	bf00e785 	.word	0xbf00e785
   35904:	20025e08 	.word	0x20025e08
   35908:	20025dcc 	.word	0x20025dcc
   3590c:	20025d88 	.word	0x20025d88

00035910 <nrf_mem_init>:
   35910:	2200b570 	.word	0x2200b570
   35914:	48332501 	.word	0x48332501
   35918:	f8500951 	.word	0xf8500951
   3591c:	f0024021 	.word	0xf0024021
   35920:	fa05031f 	.word	0xfa05031f
   35924:	3201f303 	.word	0x3201f303
   35928:	f5b24323 	.word	0xf5b24323
   3592c:	f8407f00 	.word	0xf8407f00
   35930:	d1f13021 	.word	0xd1f13021
   35934:	4b2c2400 	.word	0x4b2c2400
   35938:	223c4621 	.word	0x223c4621
   3593c:	601c482b 	.word	0x601c482b
   35940:	fa2ef00b 	.word	0xfa2ef00b
   35944:	22052110 	.word	0x22052110
   35948:	4e2a4b29 	.word	0x4e2a4b29
   3594c:	4400e9c3 	.word	0x4400e9c3
   35950:	615960d9 	.word	0x615960d9
   35954:	625961d9 	.word	0x625961d9
   35958:	635962d9 	.word	0x635962d9
   3595c:	645963d9 	.word	0x645963d9
   35960:	655964d9 	.word	0x655964d9
   35964:	665965d9 	.word	0x665965d9
   35968:	675966d9 	.word	0x675966d9
   3596c:	609a67d9 	.word	0x609a67d9
   35970:	619a611a 	.word	0x619a611a
   35974:	629a621a 	.word	0x629a621a
   35978:	639a631a 	.word	0x639a631a
   3597c:	649a641a 	.word	0x649a641a
   35980:	659a651a 	.word	0x659a651a
   35984:	669a661a 	.word	0x669a661a
   35988:	679a671a 	.word	0x679a671a
   3598c:	2120e9c3 	.word	0x2120e9c3
   35990:	4422e9c3 	.word	0x4422e9c3
   35994:	2124e9c3 	.word	0x2124e9c3
   35998:	2126e9c3 	.word	0x2126e9c3
   3599c:	2128e9c3 	.word	0x2128e9c3
   359a0:	212ae9c3 	.word	0x212ae9c3
   359a4:	212ce9c3 	.word	0x212ce9c3
   359a8:	212ee9c3 	.word	0x212ee9c3
   359ac:	2130e9c3 	.word	0x2130e9c3
   359b0:	2132e9c3 	.word	0x2132e9c3
   359b4:	2134e9c3 	.word	0x2134e9c3
   359b8:	2136e9c3 	.word	0x2136e9c3
   359bc:	2138e9c3 	.word	0x2138e9c3
   359c0:	213ae9c3 	.word	0x213ae9c3
   359c4:	213ce9c3 	.word	0x213ce9c3
   359c8:	213ee9c3 	.word	0x213ee9c3
   359cc:	1104f8c3 	.word	0x1104f8c3
   359d0:	2100f8c3 	.word	0x2100f8c3
   359d4:	110cf8c3 	.word	0x110cf8c3
   359d8:	2108f8c3 	.word	0x2108f8c3
   359dc:	70354620 	.word	0x70354620
   359e0:	bf00bd70 	.word	0xbf00bd70
   359e4:	20025d88 	.word	0x20025d88
   359e8:	20025dc8 	.word	0x20025dc8
   359ec:	20025dcc 	.word	0x20025dcc
   359f0:	20025e08 	.word	0x20025e08
   359f4:	2002be67 	.word	0x2002be67

000359f8 <nrf_mem_register>:
   359f8:	4ff0e92d 	.word	0x4ff0e92d
   359fc:	b0874b87 	.word	0xb0874b87
   35a00:	2b00781b 	.word	0x2b00781b
   35a04:	808cf000 	.word	0x808cf000
   35a08:	b321b328 	.word	0xb321b328
   35a0c:	f8df780b 	.word	0xf8df780b
   35a10:	eb038218 	.word	0xeb038218
   35a14:	eb081303 	.word	0xeb081303
   35a18:	685b03c3 	.word	0x685b03c3
   35a1c:	c00cf8b1 	.word	0xc00cf8b1
   35a20:	2b104463 	.word	0x2b104463
   35a24:	f04fd811 	.word	0xf04fd811
   35a28:	46890a00 	.word	0x46890a00
   35a2c:	4f7d4b7c 	.word	0x4f7d4b7c
   35a30:	ea4f681b 	.word	0xea4f681b
   35a34:	93000e8c 	.word	0x93000e8c
   35a38:	b19168b9 	.word	0xb19168b9
   35a3c:	0a01f10a 	.word	0x0a01f10a
   35a40:	0f05f1ba 	.word	0x0f05f1ba
   35a44:	070cf107 	.word	0x070cf107
   35a48:	f248d1f6 	.word	0xf248d1f6
   35a4c:	46581b07 	.word	0x46581b07
   35a50:	e8bdb007 	.word	0xe8bdb007
   35a54:	f2488ff0 	.word	0xf2488ff0
   35a58:	46581b0e 	.word	0x46581b0e
   35a5c:	e8bdb007 	.word	0xe8bdb007
   35a60:	f1bc8ff0 	.word	0xf1bc8ff0
   35a64:	d0610f00 	.word	0xd0610f00
   35a68:	460c460d 	.word	0x460c460d
   35a6c:	3010f8d9 	.word	0x3010f8d9
   35a70:	0b03eb0e 	.word	0x0b03eb0e
   35a74:	f833885a 	.word	0xf833885a
   35a78:	44156b04 	.word	0x44156b04
   35a7c:	fb02459b 	.word	0xfb02459b
   35a80:	d1f74406 	.word	0xd1f74406
   35a84:	3008f8d9 	.word	0x3008f8d9
   35a88:	d3d742a3 	.word	0xd3d742a3
   35a8c:	442b9b00 	.word	0x442b9b00
   35a90:	7f00f5b3 	.word	0x7f00f5b3
   35a94:	4c63d2d2 	.word	0x4c63d2d2
   35a98:	024aeb0a 	.word	0x024aeb0a
   35a9c:	f8c00092 	.word	0xf8c00092
   35aa0:	18a0a000 	.word	0x18a0a000
   35aa4:	9002f844 	.word	0x9002f844
   35aa8:	468b9a00 	.word	0x468b9a00
   35aac:	2501e9c0 	.word	0x2501e9c0
   35ab0:	2001f899 	.word	0x2001f899
   35ab4:	2a01485a 	.word	0x2a01485a
   35ab8:	d0c86003 	.word	0xd0c86003
   35abc:	300cf8b9 	.word	0x300cf8b9
   35ac0:	d0c42b00 	.word	0xd0c42b00
   35ac4:	f8cd2500 	.word	0xf8cd2500
   35ac8:	f8cd9004 	.word	0xf8cd9004
   35acc:	f8cda00c 	.word	0xf8cda00c
   35ad0:	9b01b014 	.word	0x9b01b014
   35ad4:	691a781f 	.word	0x691a781f
   35ad8:	eb03013b 	.word	0xeb03013b
   35adc:	93000907 	.word	0x93000907
   35ae0:	03c9eb08 	.word	0x03c9eb08
   35ae4:	f8326859 	.word	0xf8326859
   35ae8:	91024025 	.word	0x91024025
   35aec:	9a03bb39 	.word	0x9a03bb39
   35af0:	609a60dd 	.word	0x609a60dd
   35af4:	443b9b00 	.word	0x443b9b00
   35af8:	eb08461f 	.word	0xeb08461f
   35afc:	684b01c3 	.word	0x684b01c3
   35b00:	2037f858 	.word	0x2037f858
   35b04:	42943301 	.word	0x42943301
   35b08:	d912604b 	.word	0xd912604b
   35b0c:	f8489b01 	.word	0xf8489b01
   35b10:	899b4037 	.word	0x899b4037
   35b14:	429d3501 	.word	0x429d3501
   35b18:	f8ddd3db 	.word	0xf8ddd3db
   35b1c:	e796b014 	.word	0xe796b014
   35b20:	1b08f248 	.word	0x1b08f248
   35b24:	b0074658 	.word	0xb0074658
   35b28:	8ff0e8bd 	.word	0x8ff0e8bd
   35b2c:	46659b00 	.word	0x46659b00
   35b30:	9b01e7ae 	.word	0x9b01e7ae
   35b34:	899b3501 	.word	0x899b3501
   35b38:	d8ca42ab 	.word	0xd8ca42ab
   35b3c:	2600e7ed 	.word	0x2600e7ed
   35b40:	3afff101 	.word	0x3afff101
   35b44:	eb069504 	.word	0xeb069504
   35b48:	eb09000a 	.word	0xeb09000a
   35b4c:	32010206 	.word	0x32010206
   35b50:	f8583001 	.word	0xf8583001
   35b54:	0840c032 	.word	0x0840c032
   35b58:	eb094d32 	.word	0xeb094d32
   35b5c:	eb090100 	.word	0xeb090100
   35b60:	3101030a 	.word	0x3101030a
   35b64:	eb0c3301 	.word	0xeb0c3301
   35b68:	f8580c4c 	.word	0xf8580c4c
   35b6c:	f855e031 	.word	0xf855e031
   35b70:	f858b02c 	.word	0xf858b02c
   35b74:	eb08c033 	.word	0xeb08c033
   35b78:	eb0e02c2 	.word	0xeb0e02c2
   35b7c:	eb0c0e4e 	.word	0xeb0c0e4e
   35b80:	f8db0c4c 	.word	0xf8db0c4c
   35b84:	6852b010 	.word	0x6852b010
   35b88:	e02ef855 	.word	0xe02ef855
   35b8c:	c02cf855 	.word	0xc02cf855
   35b90:	01c1eb08 	.word	0x01c1eb08
   35b94:	03c3eb08 	.word	0x03c3eb08
   35b98:	2022f83b 	.word	0x2022f83b
   35b9c:	e010f8de 	.word	0xe010f8de
   35ba0:	f8dc6849 	.word	0xf8dc6849
   35ba4:	685bc010 	.word	0x685bc010
   35ba8:	f83e4294 	.word	0xf83e4294
   35bac:	f83c1021 	.word	0xf83c1021
   35bb0:	d92d3023 	.word	0xd92d3023
   35bb4:	d22d429c 	.word	0xd22d429c
   35bb8:	d924428c 	.word	0xd924428c
   35bbc:	45b21c46 	.word	0x45b21c46
   35bc0:	2610d2c1 	.word	0x2610d2c1
   35bc4:	9a029d04 	.word	0x9a029d04
   35bc8:	d91142b2 	.word	0xd91142b2
   35bcc:	443b9b00 	.word	0x443b9b00
   35bd0:	4433441a 	.word	0x4433441a
   35bd4:	0ac2eb08 	.word	0x0ac2eb08
   35bd8:	09c3eb08 	.word	0x09c3eb08
   35bdc:	46512208 	.word	0x46512208
   35be0:	0002eb0a 	.word	0x0002eb0a
   35be4:	0a08f1aa 	.word	0x0a08f1aa
   35be8:	f8baf00b 	.word	0xf8baf00b
   35bec:	d1f545d1 	.word	0xd1f545d1
   35bf0:	99039b00 	.word	0x99039b00
   35bf4:	4433443b 	.word	0x4433443b
   35bf8:	eb083301 	.word	0xeb083301
   35bfc:	f84802c3 	.word	0xf84802c3
   35c00:	60551033 	.word	0x60551033
   35c04:	f100e776 	.word	0xf100e776
   35c08:	45563aff 	.word	0x45563aff
   35c0c:	e7d8d99b 	.word	0xe7d8d99b
   35c10:	e7d89d04 	.word	0xe7d89d04
   35c14:	f10a9d04 	.word	0xf10a9d04
   35c18:	e7d40601 	.word	0xe7d40601
   35c1c:	2002be67 	.word	0x2002be67
   35c20:	20025dc8 	.word	0x20025dc8
   35c24:	20025dcc 	.word	0x20025dcc
   35c28:	20025e08 	.word	0x20025e08

00035c2c <nrf_malloc>:
   35c2c:	781b4b03 	.word	0x781b4b03
   35c30:	f7ffb10b 	.word	0xf7ffb10b
   35c34:	4618bd8d 	.word	0x4618bd8d
   35c38:	bf004770 	.word	0xbf004770
   35c3c:	2002be67 	.word	0x2002be67

00035c40 <nrf_calloc>:
   35c40:	4b08b538 	.word	0x4b08b538
   35c44:	b155781d 	.word	0xb155781d
   35c48:	f400fb01 	.word	0xf400fb01
   35c4c:	f7ff4620 	.word	0xf7ff4620
   35c50:	4605fd7f 	.word	0x4605fd7f
   35c54:	4622b118 	.word	0x4622b118
   35c58:	f00b2100 	.word	0xf00b2100
   35c5c:	4628f8a1 	.word	0x4628f8a1
   35c60:	bf00bd38 	.word	0xbf00bd38
   35c64:	2002be67 	.word	0x2002be67

00035c68 <nrf_free>:
   35c68:	781b4b04 	.word	0x781b4b04
   35c6c:	b118b123 	.word	0xb118b123
   35c70:	20004601 	.word	0x20004601
   35c74:	bc1cf7ff 	.word	0xbc1cf7ff
   35c78:	bf004770 	.word	0xbf004770
   35c7c:	2002be67 	.word	0x2002be67

00035c80 <nrf_shared_malloc>:
   35c80:	781b4b03 	.word	0x781b4b03
   35c84:	f7ffb10b 	.word	0xf7ffb10b
   35c88:	4618bc7f 	.word	0x4618bc7f
   35c8c:	bf004770 	.word	0xbf004770
   35c90:	2002be67 	.word	0x2002be67

00035c94 <nrf_shared_free>:
   35c94:	781b4b04 	.word	0x781b4b04
   35c98:	b118b123 	.word	0xb118b123
   35c9c:	20014601 	.word	0x20014601
   35ca0:	bc06f7ff 	.word	0xbc06f7ff
   35ca4:	bf004770 	.word	0xbf004770
   35ca8:	2002be67 	.word	0x2002be67

00035cac <symbol_0003897>:
   35cac:	728cf44f 	.word	0x728cf44f
   35cb0:	f00b2100 	.word	0xf00b2100
   35cb4:	bf00b875 	.word	0xbf00b875

00035cb8 <symbol_0006f61>:
   35cb8:	f44fb118 	.word	0xf44fb118
   35cbc:	f7fc718c 	.word	0xf7fc718c
   35cc0:	4770b837 	.word	0x4770b837

00035cc4 <symbol_000468b>:
   35cc4:	f0002ac0 	.word	0xf0002ac0
   35cc8:	f5b28184 	.word	0xf5b28184
   35ccc:	f0007f80 	.word	0xf0007f80
   35cd0:	2a80817d 	.word	0x2a80817d
   35cd4:	f06fd002 	.word	0xf06fd002
   35cd8:	4770001f 	.word	0x4770001f
   35cdc:	6003230a 	.word	0x6003230a
   35ce0:	4ff0e92d 	.word	0x4ff0e92d
   35ce4:	f04f4607 	.word	0xf04f4607
   35ce8:	f1000c00 	.word	0xf1000c00
   35cec:	b0850408 	.word	0xb0850408
   35cf0:	f8470952 	.word	0xf8470952
   35cf4:	788b4f04 	.word	0x788b4f04
   35cf8:	780e784d 	.word	0x780e784d
   35cfc:	ea43041b 	.word	0xea43041b
   35d00:	78cd2305 	.word	0x78cd2305
   35d04:	f10c4333 	.word	0xf10c4333
   35d08:	ea430c01 	.word	0xea430c01
   35d0c:	45946305 	.word	0x45946305
   35d10:	3f04f847 	.word	0x3f04f847
   35d14:	0104f101 	.word	0x0104f101
   35d18:	6803d3ed 	.word	0x6803d3ed
   35d1c:	f0002b0c 	.word	0xf0002b0c
   35d20:	2b0e81bf 	.word	0x2b0e81bf
   35d24:	8158f000 	.word	0x8158f000
   35d28:	f0402b0a 	.word	0xf0402b0a
   35d2c:	6944814b 	.word	0x6944814b
   35d30:	f3c44bd8 	.word	0xf3c44bd8
   35d34:	68812207 	.word	0x68812207
   35d38:	0e255c9a 	.word	0x0e255c9a
   35d3c:	f0815d5e 	.word	0xf0815d5e
   35d40:	b2e50101 	.word	0xb2e50101
   35d44:	404a5d5d 	.word	0x404a5d5d
   35d48:	4107f3c4 	.word	0x4107f3c4
   35d4c:	4206ea82 	.word	0x4206ea82
   35d50:	ea825c5e 	.word	0xea825c5e
   35d54:	68c16505 	.word	0x68c16505
   35d58:	2206ea85 	.word	0x2206ea85
   35d5c:	40516907 	.word	0x40516907
   35d60:	0907ea81 	.word	0x0907ea81
   35d64:	0404ea89 	.word	0x0404ea89
   35d68:	2507f3c4 	.word	0x2507f3c4
   35d6c:	0e265d5d 	.word	0x0e265d5d
   35d70:	f0825d9e 	.word	0xf0825d9e
   35d74:	ea850c02 	.word	0xea850c02
   35d78:	ea85050c 	.word	0xea85050c
   35d7c:	b2e64506 	.word	0xb2e64506
   35d80:	c006f813 	.word	0xc006f813
   35d84:	4607f3c4 	.word	0x4607f3c4
   35d88:	ea855d9e 	.word	0xea855d9e
   35d8c:	ea85650c 	.word	0xea85650c
   35d90:	406f2506 	.word	0x406f2506
   35d94:	0c04ea87 	.word	0x0c04ea87
   35d98:	2607f3cc 	.word	0x2607f3cc
   35d9c:	ea4f5d9e 	.word	0xea4f5d9e
   35da0:	f8136e1c 	.word	0xf8136e1c
   35da4:	f085e00e 	.word	0xf085e00e
   35da8:	ea860804 	.word	0xea860804
   35dac:	ea860608 	.word	0xea860608
   35db0:	fa5f460e 	.word	0xfa5f460e
   35db4:	f813fe8c 	.word	0xf813fe8c
   35db8:	6182e00e 	.word	0x6182e00e
   35dbc:	4207f3cc 	.word	0x4207f3cc
   35dc0:	660eea86 	.word	0x660eea86
   35dc4:	e002f813 	.word	0xe002f813
   35dc8:	0201ea85 	.word	0x0201ea85
   35dcc:	260eea86 	.word	0x260eea86
   35dd0:	0802ea86 	.word	0x0802ea86
   35dd4:	0e04ea88 	.word	0x0e04ea88
   35dd8:	f3ce61c1 	.word	0xf3ce61c1
   35ddc:	5c592107 	.word	0x5c592107
   35de0:	6a1eea4f 	.word	0x6a1eea4f
   35de4:	a00af813 	.word	0xa00af813
   35de8:	0b08f086 	.word	0x0b08f086
   35dec:	010bea81 	.word	0x010bea81
   35df0:	410aea81 	.word	0x410aea81
   35df4:	fa8efa5f 	.word	0xfa8efa5f
   35df8:	a00af813 	.word	0xa00af813
   35dfc:	f3ce6244 	.word	0xf3ce6244
   35e00:	5d1c4407 	.word	0x5d1c4407
   35e04:	610aea81 	.word	0x610aea81
   35e08:	2104ea81 	.word	0x2104ea81
   35e0c:	0a07ea81 	.word	0x0a07ea81
   35e10:	040eea8a 	.word	0x040eea8a
   35e14:	630762c2 	.word	0x630762c2
   35e18:	2207f3c4 	.word	0x2207f3c4
   35e1c:	0707ea88 	.word	0x0707ea88
   35e20:	680ee9c0 	.word	0x680ee9c0
   35e24:	9020f8c0 	.word	0x9020f8c0
   35e28:	f8c06285 	.word	0xf8c06285
   35e2c:	f8c0c034 	.word	0xf8c0c034
   35e30:	6407e044 	.word	0x6407e044
   35e34:	f8136481 	.word	0xf8136481
   35e38:	0e22c002 	.word	0x0e22c002
   35e3c:	f0815c9a 	.word	0xf0815c9a
   35e40:	ea8c0510 	.word	0xea8c0510
   35e44:	ea8c0c05 	.word	0xea8c0c05
   35e48:	b2e24c02 	.word	0xb2e24c02
   35e4c:	f3c45c9d 	.word	0xf3c45c9d
   35e50:	5c9a4207 	.word	0x5c9a4207
   35e54:	6c05ea8c 	.word	0x6c05ea8c
   35e58:	2c02ea8c 	.word	0x2c02ea8c
   35e5c:	0108ea81 	.word	0x0108ea81
   35e60:	090cea81 	.word	0x090cea81
   35e64:	0209ea8e 	.word	0x0209ea8e
   35e68:	2507f3c2 	.word	0x2507f3c2
   35e6c:	0e155d5e 	.word	0x0e155d5e
   35e70:	f08c5d5d 	.word	0xf08c5d5d
   35e74:	407e0720 	.word	0x407e0720
   35e78:	4605ea86 	.word	0x4605ea86
   35e7c:	5d5db2d5 	.word	0x5d5db2d5
   35e80:	f3c264c1 	.word	0xf3c264c1
   35e84:	5c594107 	.word	0x5c594107
   35e88:	6605ea86 	.word	0x6605ea86
   35e8c:	2601ea86 	.word	0x2601ea86
   35e90:	0e06ea8a 	.word	0x0e06ea8a
   35e94:	080eea82 	.word	0x080eea82
   35e98:	2107f3c8 	.word	0x2107f3c8
   35e9c:	ea4f5c5f 	.word	0xea4f5c5f
   35ea0:	5c596118 	.word	0x5c596118
   35ea4:	0540f086 	.word	0x0540f086
   35ea8:	ea87406f 	.word	0xea87406f
   35eac:	fa5f4701 	.word	0xfa5f4701
   35eb0:	5c59f188 	.word	0x5c59f188
   35eb4:	0509ea8a 	.word	0x0509ea8a
   35eb8:	6701ea87 	.word	0x6701ea87
   35ebc:	4107f3c8 	.word	0x4107f3c8
   35ec0:	f8c05c59 	.word	0xf8c05c59
   35ec4:	ea87a050 	.word	0xea87a050
   35ec8:	ea892701 	.word	0xea892701
   35ecc:	66050a06 	.word	0x66050a06
   35ed0:	0507ea8a 	.word	0x0507ea8a
   35ed4:	0105ea82 	.word	0x0105ea82
   35ed8:	f3c16544 	.word	0xf3c16544
   35edc:	5d1c2407 	.word	0x5d1c2407
   35ee0:	6b11ea4f 	.word	0x6b11ea4f
   35ee4:	b00bf813 	.word	0xb00bf813
   35ee8:	f0876642 	.word	0xf0876642
   35eec:	40620280 	.word	0x40620280
   35ef0:	ea82b2cc 	.word	0xea82b2cc
   35ef4:	f813420b 	.word	0xf813420b
   35ef8:	f3c1b004 	.word	0xf3c1b004
   35efc:	5d1c4407 	.word	0x5d1c4407
   35f00:	620bea82 	.word	0x620bea82
   35f04:	2204ea82 	.word	0x2204ea82
   35f08:	0402ea8e 	.word	0x0402ea8e
   35f0c:	c058f8c0 	.word	0xc058f8c0
   35f10:	0c04ea81 	.word	0x0c04ea81
   35f14:	67c56686 	.word	0x67c56686
   35f18:	0605ea8e 	.word	0x0605ea8e
   35f1c:	40556787 	.word	0x40556787
   35f20:	2707f3cc 	.word	0x2707f3cc
   35f24:	ae1be9c0 	.word	0xae1be9c0
   35f28:	1084f8c0 	.word	0x1084f8c0
   35f2c:	2088f8c0 	.word	0x2088f8c0
   35f30:	6080f8c0 	.word	0x6080f8c0
   35f34:	905cf8c0 	.word	0x905cf8c0
   35f38:	8074f8c0 	.word	0x8074f8c0
   35f3c:	508cf8c0 	.word	0x508cf8c0
   35f40:	f0825dde 	.word	0xf0825dde
   35f44:	ea4f021b 	.word	0xea4f021b
   35f48:	f813671c 	.word	0xf813671c
   35f4c:	4056e007 	.word	0x4056e007
   35f50:	f28cfa5f 	.word	0xf28cfa5f
   35f54:	f3cc5c9f 	.word	0xf3cc5c9f
   35f58:	5c9a4207 	.word	0x5c9a4207
   35f5c:	460eea86 	.word	0x460eea86
   35f60:	6607ea86 	.word	0x6607ea86
   35f64:	2602ea86 	.word	0x2602ea86
   35f68:	40694075 	.word	0x40694075
   35f6c:	2207f3c1 	.word	0x2207f3c1
   35f70:	0e0f5c9a 	.word	0x0e0f5c9a
   35f74:	f0865ddf 	.word	0xf0865ddf
   35f78:	ea820e36 	.word	0xea820e36
   35f7c:	ea82020e 	.word	0xea82020e
   35f80:	b2cf4207 	.word	0xb2cf4207
   35f84:	e007f813 	.word	0xe007f813
   35f88:	4707f3c1 	.word	0x4707f3c1
   35f8c:	ea825ddf 	.word	0xea825ddf
   35f90:	ea83630e 	.word	0xea83630e
   35f94:	ea832307 	.word	0xea832307
   35f98:	ea820204 	.word	0xea820204
   35f9c:	e9c00e01 	.word	0xe9c00e01
   35fa0:	e9c06526 	.word	0xe9c06526
   35fa4:	f8c02e2c 	.word	0xf8c02e2c
   35fa8:	ea834090 	.word	0xea834090
   35fac:	406c0705 	.word	0x406c0705
   35fb0:	c094f8c0 	.word	0xc094f8c0
   35fb4:	10a4f8c0 	.word	0x10a4f8c0
   35fb8:	30a8f8c0 	.word	0x30a8f8c0
   35fbc:	70acf8c0 	.word	0x70acf8c0
   35fc0:	40a0f8c0 	.word	0x40a0f8c0
   35fc4:	b0052000 	.word	0xb0052000
   35fc8:	8ff0e8bd 	.word	0x8ff0e8bd
   35fcc:	6003230e 	.word	0x6003230e
   35fd0:	230ce686 	.word	0x230ce686
   35fd4:	e6836003 	.word	0xe6836003
   35fd8:	ce03e9d0 	.word	0xce03e9d0
   35fdc:	8907e9d0 	.word	0x8907e9d0
   35fe0:	7205e9d0 	.word	0x7205e9d0
   35fe4:	68836a46 	.word	0x68836a46
   35fe8:	f8df4670 	.word	0xf8df4670
   35fec:	4d29a0b0 	.word	0x4d29a0b0
   35ff0:	c000f8cd 	.word	0xc000f8cd
   35ff4:	bf04f85a 	.word	0xbf04f85a
   35ff8:	2c07f3c6 	.word	0x2c07f3c6
   35ffc:	e00cf815 	.word	0xe00cf815
   36000:	6c16ea4f 	.word	0x6c16ea4f
   36004:	030bea83 	.word	0x030bea83
   36008:	b00cf815 	.word	0xb00cf815
   3600c:	fc86fa5f 	.word	0xfc86fa5f
   36010:	0303ea8e 	.word	0x0303ea8e
   36014:	c00cf815 	.word	0xc00cf815
   36018:	4e07f3c6 	.word	0x4e07f3c6
   3601c:	430bea83 	.word	0x430bea83
   36020:	e00ef815 	.word	0xe00ef815
   36024:	630cea83 	.word	0x630cea83
   36028:	ea839900 	.word	0xea839900
   3602c:	4059230e 	.word	0x4059230e
   36030:	40474048 	.word	0x40474048
   36034:	fc87fa5f 	.word	0xfc87fa5f
   36038:	e00cf815 	.word	0xe00cf815
   3603c:	6c17ea4f 	.word	0x6c17ea4f
   36040:	b00cf815 	.word	0xb00cf815
   36044:	2c07f3c7 	.word	0x2c07f3c7
   36048:	0202ea8e 	.word	0x0202ea8e
   3604c:	c00cf815 	.word	0xc00cf815
   36050:	4e07f3c7 	.word	0x4e07f3c7
   36054:	620bea82 	.word	0x620bea82
   36058:	e00ef815 	.word	0xe00ef815
   3605c:	220cea82 	.word	0x220cea82
   36060:	420eea82 	.word	0x420eea82
   36064:	0802ea88 	.word	0x0802ea88
   36068:	3108e9c4 	.word	0x3108e9c4
   3606c:	490a9100 	.word	0x490a9100
   36070:	0908ea89 	.word	0x0908ea89
   36074:	0609ea86 	.word	0x0609ea86
   36078:	e9c4458a 	.word	0xe9c4458a
   3607c:	e9c4070a 	.word	0xe9c4070a
   36080:	e9c4960e 	.word	0xe9c4960e
   36084:	f104280c 	.word	0xf104280c
   36088:	d1b30420 	.word	0xd1b30420
   3608c:	b0052000 	.word	0xb0052000
   36090:	8ff0e8bd 	.word	0x8ff0e8bd
   36094:	000433a0 	.word	0x000433a0
   36098:	000438b8 	.word	0x000438b8
   3609c:	0004389c 	.word	0x0004389c
   360a0:	4bb269c2 	.word	0x4bb269c2
   360a4:	2407f3c2 	.word	0x2407f3c2
   360a8:	5d1d6881 	.word	0x5d1d6881
   360ac:	5d1e0e14 	.word	0x5d1e0e14
   360b0:	0101f081 	.word	0x0101f081
   360b4:	5d1cb2d4 	.word	0x5d1cb2d4
   360b8:	f3c2404d 	.word	0xf3c2404d
   360bc:	5c594107 	.word	0x5c594107
   360c0:	4506ea85 	.word	0x4506ea85
   360c4:	ea8568c7 	.word	0xea8568c7
   360c8:	ea856504 	.word	0xea856504
   360cc:	69012501 	.word	0x69012501
   360d0:	6946406f 	.word	0x6946406f
   360d4:	0907ea81 	.word	0x0907ea81
   360d8:	ea866984 	.word	0xea866984
   360dc:	ea840609 	.word	0xea840609
   360e0:	ea820806 	.word	0xea820806
   360e4:	f3c20208 	.word	0xf3c20208
   360e8:	f8132407 	.word	0xf8132407
   360ec:	ea4fe004 	.word	0xea4fe004
   360f0:	f8136c12 	.word	0xf8136c12
   360f4:	f085a00c 	.word	0xf085a00c
   360f8:	fa5f0402 	.word	0xfa5f0402
   360fc:	ea8efc82 	.word	0xea8efc82
   36100:	f8130404 	.word	0xf8130404
   36104:	f3c2e00c 	.word	0xf3c2e00c
   36108:	f8134c07 	.word	0xf8134c07
   3610c:	ea84c00c 	.word	0xea84c00c
   36110:	ea84440a 	.word	0xea84440a
   36114:	ea84640e 	.word	0xea84640e
   36118:	4061240c 	.word	0x4061240c
   3611c:	460c9401 	.word	0x460c9401
   36120:	62056981 	.word	0x62056981
   36124:	ea824061 	.word	0xea824061
   36128:	91030c01 	.word	0x91030c01
   3612c:	2e07f3cc 	.word	0x2e07f3cc
   36130:	f8139901 	.word	0xf8139901
   36134:	ea4fe00e 	.word	0xea4fe00e
   36138:	f8136a1c 	.word	0xf8136a1c
   3613c:	f081a00a 	.word	0xf081a00a
   36140:	ea8e0b04 	.word	0xea8e0b04
   36144:	ea8e0e0b 	.word	0xea8e0e0b
   36148:	fa5f4a0a 	.word	0xfa5f4a0a
   3614c:	f813fe8c 	.word	0xf813fe8c
   36150:	e9c0e00e 	.word	0xe9c0e00e
   36154:	ea8a960a 	.word	0xea8a960a
   36158:	f3cc650e 	.word	0xf3cc650e
   3615c:	f8134e07 	.word	0xf8134e07
   36160:	ea87e00e 	.word	0xea87e00e
   36164:	ea850a01 	.word	0xea850a01
   36168:	ea8a250e 	.word	0xea8a250e
   3616c:	ea860e05 	.word	0xea860e05
   36170:	9100010e 	.word	0x9100010e
   36174:	ea864621 	.word	0xea864621
   36178:	9c000904 	.word	0x9c000904
   3617c:	820ce9c0 	.word	0x820ce9c0
   36180:	0604ea82 	.word	0x0604ea82
   36184:	f8c06247 	.word	0xf8c06247
   36188:	9102a03c 	.word	0x9102a03c
   3618c:	9f036401 	.word	0x9f036401
   36190:	2407f3c6 	.word	0x2407f3c6
   36194:	080eea81 	.word	0x080eea81
   36198:	7c12e9c0 	.word	0x7c12e9c0
   3619c:	ea4f5d1c 	.word	0xea4f5d1c
   361a0:	e9c06c16 	.word	0xe9c06c16
   361a4:	f8c05e14 	.word	0xf8c05e14
   361a8:	f0858058 	.word	0xf0858058
   361ac:	f8130508 	.word	0xf8130508
   361b0:	fa5f800c 	.word	0xfa5f800c
   361b4:	9901fc86 	.word	0x9901fc86
   361b8:	c00cf813 	.word	0xc00cf813
   361bc:	f3c64065 	.word	0xf3c64065
   361c0:	5d1c4407 	.word	0x5d1c4407
   361c4:	4508ea85 	.word	0x4508ea85
   361c8:	ea856381 	.word	0xea856381
   361cc:	9902650c 	.word	0x9902650c
   361d0:	2504ea85 	.word	0x2504ea85
   361d4:	91014069 	.word	0x91014069
   361d8:	69844639 	.word	0x69844639
   361dc:	9044f8c0 	.word	0x9044f8c0
   361e0:	0805ea84 	.word	0x0805ea84
   361e4:	0908ea86 	.word	0x0908ea86
   361e8:	2407f3c9 	.word	0x2407f3c9
   361ec:	a004f813 	.word	0xa004f813
   361f0:	6419ea4f 	.word	0x6419ea4f
   361f4:	f0855d1c 	.word	0xf0855d1c
   361f8:	ea8a0c10 	.word	0xea8a0c10
   361fc:	fa5f0c0c 	.word	0xfa5f0c0c
   36200:	f813fa89 	.word	0xf813fa89
   36204:	ea8ca00a 	.word	0xea8ca00a
   36208:	f3c94c04 	.word	0xf3c94c04
   3620c:	5d1c4407 	.word	0x5d1c4407
   36210:	6c0aea8c 	.word	0x6c0aea8c
   36214:	0e05ea8e 	.word	0x0e05ea8e
   36218:	2c04ea8c 	.word	0x2c04ea8c
   3621c:	040cea8e 	.word	0x040cea8e
   36220:	f8c04062 	.word	0xf8c04062
   36224:	f3c2e06c 	.word	0xf3c2e06c
   36228:	f8132e07 	.word	0xf8132e07
   3622c:	ea4fe00e 	.word	0xea4fe00e
   36230:	f8136a12 	.word	0xf8136a12
   36234:	f08ca00a 	.word	0xf08ca00a
   36238:	ea8e0b20 	.word	0xea8e0b20
   3623c:	ea8e0e0b 	.word	0xea8e0e0b
   36240:	fa5f4a0a 	.word	0xfa5f4a0a
   36244:	f813fe82 	.word	0xf813fe82
   36248:	9f00e00e 	.word	0x9f00e00e
   3624c:	6a0eea8a 	.word	0x6a0eea8a
   36250:	4e07f3c2 	.word	0x4e07f3c2
   36254:	b00ef813 	.word	0xb00ef813
   36258:	0e07ea81 	.word	0x0e07ea81
   3625c:	ea8a9901 	.word	0xea8a9901
   36260:	ea812b0b 	.word	0xea812b0b
   36264:	9f000a0b 	.word	0x9f000a0b
   36268:	e060f8c0 	.word	0xe060f8c0
   3626c:	0e0aea88 	.word	0x0e0aea88
   36270:	664665c7 	.word	0x664665c7
   36274:	907cf8c0 	.word	0x907cf8c0
   36278:	060eea82 	.word	0x060eea82
   3627c:	ea876701 	.word	0xea876701
   36280:	404f0904 	.word	0x404f0904
   36284:	66854061 	.word	0x66854061
   36288:	1088f8c0 	.word	0x1088f8c0
   3628c:	2507f3c6 	.word	0x2507f3c6
   36290:	0109ea88 	.word	0x0109ea88
   36294:	1090f8c0 	.word	0x1090f8c0
   36298:	0e315d5d 	.word	0x0e315d5d
   3629c:	f8c05c59 	.word	0xf8c05c59
   362a0:	f8c04084 	.word	0xf8c04084
   362a4:	ea84b098 	.word	0xea84b098
   362a8:	6747040b 	.word	0x6747040b
   362ac:	0b40f08b 	.word	0x0b40f08b
   362b0:	5ddfb2f7 	.word	0x5ddfb2f7
   362b4:	60acf8c0 	.word	0x60acf8c0
   362b8:	050bea85 	.word	0x050bea85
   362bc:	4607f3c6 	.word	0x4607f3c6
   362c0:	4501ea85 	.word	0x4501ea85
   362c4:	ea855d99 	.word	0xea855d99
   362c8:	ea856507 	.word	0xea856507
   362cc:	f8c02501 	.word	0xf8c02501
   362d0:	406c409c 	.word	0x406c409c
   362d4:	0604ea89 	.word	0x0604ea89
   362d8:	2094f8c0 	.word	0x2094f8c0
   362dc:	f3c24072 	.word	0xf3c24072
   362e0:	f8c02107 	.word	0xf8c02107
   362e4:	5c59c080 	.word	0x5c59c080
   362e8:	0c0aea89 	.word	0x0c0aea89
   362ec:	f8c00e17 	.word	0xf8c00e17
   362f0:	f8c0908c 	.word	0xf8c0908c
   362f4:	f813c0a4 	.word	0xf813c0a4
   362f8:	f0859007 	.word	0xf0859007
   362fc:	b2d70c80 	.word	0xb2d70c80
   36300:	010cea81 	.word	0x010cea81
   36304:	c007f813 	.word	0xc007f813
   36308:	4707f3c2 	.word	0x4707f3c2
   3630c:	ea815ddf 	.word	0xea815ddf
   36310:	ea814109 	.word	0xea814109
   36314:	ea83630c 	.word	0xea83630c
   36318:	f8c02307 	.word	0xf8c02307
   3631c:	ea838078 	.word	0xea838078
   36320:	ea830c0a 	.word	0xea830c0a
   36324:	f8c00808 	.word	0xf8c00808
   36328:	ea8ee0a8 	.word	0xea8ee0a8
   3632c:	ea880706 	.word	0xea880706
   36330:	ea8c0b02 	.word	0xea8c0b02
   36334:	ea830906 	.word	0xea830906
   36338:	ea8a0e04 	.word	0xea8a0e04
   3633c:	f8c00104 	.word	0xf8c00104
   36340:	e9c0a0a0 	.word	0xe9c0a0a0
   36344:	f8c07230 	.word	0xf8c07230
   36348:	e9c060bc 	.word	0xe9c060bc
   3634c:	e9c0542c 	.word	0xe9c0542c
   36350:	f8c08b36 	.word	0xf8c08b36
   36354:	e9c030c8 	.word	0xe9c030c8
   36358:	f8c0c934 	.word	0xf8c0c934
   3635c:	f8c0e0cc 	.word	0xf8c0e0cc
   36360:	200010b8 	.word	0x200010b8
   36364:	e8bdb005 	.word	0xe8bdb005
   36368:	bf008ff0 	.word	0xbf008ff0
   3636c:	000433a0 	.word	0x000433a0

00036370 <symbol_000e9b3>:
   36370:	4ff0e92d 	.word	0x4ff0e92d
   36374:	0400e9d0 	.word	0x0400e9d0
   36378:	46061040 	.word	0x46061040
   3637c:	f8d16823 	.word	0xf8d16823
   36380:	b089a000 	.word	0xb089a000
   36384:	0a03ea8a 	.word	0x0a03ea8a
   36388:	800cf8d1 	.word	0x800cf8d1
   3638c:	3e0168e3 	.word	0x3e0168e3
   36390:	68659006 	.word	0x68659006
   36394:	68a0684f 	.word	0x68a0684f
   36398:	688a9205 	.word	0x688a9205
   3639c:	0803ea88 	.word	0x0803ea88
   363a0:	f1042e00 	.word	0xf1042e00
   363a4:	96010310 	.word	0x96010310
   363a8:	0507ea85 	.word	0x0507ea85
   363ac:	0200ea82 	.word	0x0200ea82
   363b0:	f8df9304 	.word	0xf8df9304
   363b4:	f340b3e8 	.word	0xf340b3e8
   363b8:	462b80db 	.word	0x462b80db
   363bc:	0930f104 	.word	0x0930f104
   363c0:	f18afa5f 	.word	0xf18afa5f
   363c4:	f788fa5f 	.word	0xf788fa5f
   363c8:	b2d4b2de 	.word	0xb2d4b2de
   363cc:	0021f85b 	.word	0x0021f85b
   363d0:	5027f85b 	.word	0x5027f85b
   363d4:	7026f85b 	.word	0x7026f85b
   363d8:	6024f85b 	.word	0x6024f85b
   363dc:	4c20f859 	.word	0x4c20f859
   363e0:	6118ea4f 	.word	0x6118ea4f
   363e4:	0c04ea80 	.word	0x0c04ea80
   363e8:	0c14f859 	.word	0x0c14f859
   363ec:	1021f85b 	.word	0x1021f85b
   363f0:	0e00ea85 	.word	0x0e00ea85
   363f4:	f85b0e10 	.word	0xf85b0e10
   363f8:	f3c35020 	.word	0xf3c35020
   363fc:	ea8c2407 	.word	0xea8c2407
   36400:	f3c22c31 	.word	0xf3c22c31
   36404:	f3c24107 	.word	0xf3c24107
   36408:	f85b2207 	.word	0xf85b2207
   3640c:	f85b4024 	.word	0xf85b4024
   36410:	ea8e0022 	.word	0xea8e0022
   36414:	0e1d2235 	.word	0x0e1d2235
   36418:	4307f3c3 	.word	0x4307f3c3
   3641c:	3023f85b 	.word	0x3023f85b
   36420:	6c34ea8c 	.word	0x6c34ea8c
   36424:	4c18f859 	.word	0x4c18f859
   36428:	f85b9302 	.word	0xf85b9302
   3642c:	f8595025 	.word	0xf8595025
   36430:	ea4f3c1c 	.word	0xea4f3c1c
   36434:	f85b6e1a 	.word	0xf85b6e1a
   36438:	4066e02e 	.word	0x4066e02e
   3643c:	f3ca405f 	.word	0xf3ca405f
   36440:	ea862407 	.word	0xea862407
   36444:	f3c82635 	.word	0xf3c82635
   36448:	f3c82507 	.word	0xf3c82507
   3644c:	ea874807 	.word	0xea874807
   36450:	f85b273e 	.word	0xf85b273e
   36454:	f85b4024 	.word	0xf85b4024
   36458:	f85be025 	.word	0xf85be025
   3645c:	9b025028 	.word	0x9b025028
   36460:	6030ea87 	.word	0x6030ea87
   36464:	4035ea80 	.word	0x4035ea80
   36468:	1021f85b 	.word	0x1021f85b
   3646c:	6434ea82 	.word	0x6434ea82
   36470:	4433ea84 	.word	0x4433ea84
   36474:	ea8cb2c3 	.word	0xea8cb2c3
   36478:	f85b4131 	.word	0xf85b4131
   3647c:	f3ca3023 	.word	0xf3ca3023
   36480:	f85b4a07 	.word	0xf85b4a07
   36484:	b2ca702a 	.word	0xb2ca702a
   36488:	6c14ea4f 	.word	0x6c14ea4f
   3648c:	2022f85b 	.word	0x2022f85b
   36490:	663eea86 	.word	0x663eea86
   36494:	f8599302 	.word	0xf8599302
   36498:	ea863c10 	.word	0xea863c10
   3649c:	f85b4637 	.word	0xf85b4637
   364a0:	f3c0e02c 	.word	0xf3c0e02c
   364a4:	f85b2707 	.word	0xf85b2707
   364a8:	ea82c027 	.word	0xea82c027
   364ac:	f3c60a03 	.word	0xf3c60a03
   364b0:	f3c64507 	.word	0xf3c64507
   364b4:	f85b2207 	.word	0xf85b2207
   364b8:	f85b3022 	.word	0xf85b3022
   364bc:	ea8a5025 	.word	0xea8a5025
   364c0:	f3c42a3e 	.word	0xf3c42a3e
   364c4:	0e0f4207 	.word	0x0e0f4207
   364c8:	6a3cea8a 	.word	0x6a3cea8a
   364cc:	7027f85b 	.word	0x7027f85b
   364d0:	ea8a9303 	.word	0xea8a9303
   364d4:	f85b4a35 	.word	0xf85b4a35
   364d8:	f8598022 	.word	0xf8598022
   364dc:	9b025c0c 	.word	0x9b025c0c
   364e0:	406bb2f2 	.word	0x406bb2f2
   364e4:	2022f85b 	.word	0x2022f85b
   364e8:	2337ea83 	.word	0x2337ea83
   364ec:	7c08f859 	.word	0x7c08f859
   364f0:	fc84fa5f 	.word	0xfc84fa5f
   364f4:	2407f3c4 	.word	0x2407f3c4
   364f8:	502cf85b 	.word	0x502cf85b
   364fc:	0e364057 	.word	0x0e364057
   36500:	2024f85b 	.word	0x2024f85b
   36504:	4c04f859 	.word	0x4c04f859
   36508:	6e10ea4f 	.word	0x6e10ea4f
   3650c:	6026f85b 	.word	0x6026f85b
   36510:	f85b406c 	.word	0xf85b406c
   36514:	ea84e02e 	.word	0xea84e02e
   36518:	f3c12636 	.word	0xf3c12636
   3651c:	f3c12407 	.word	0xf3c12407
   36520:	f85b4107 	.word	0xf85b4107
   36524:	ea871021 	.word	0xea871021
   36528:	ea8e2e3e 	.word	0xea8e2e3e
   3652c:	f3c06232 	.word	0xf3c06232
   36530:	f85b4007 	.word	0xf85b4007
   36534:	9d034024 	.word	0x9d034024
   36538:	4231ea82 	.word	0x4231ea82
   3653c:	f85b9901 	.word	0xf85b9901
   36540:	ea830020 	.word	0xea830020
   36544:	ea866335 	.word	0xea866335
   36548:	39016634 	.word	0x39016634
   3654c:	4338ea83 	.word	0x4338ea83
   36550:	0920f109 	.word	0x0920f109
   36554:	4830ea86 	.word	0x4830ea86
   36558:	f47f9101 	.word	0xf47f9101
   3655c:	461daf31 	.word	0x461daf31
   36560:	99049b06 	.word	0x99049b06
   36564:	6300f103 	.word	0x6300f103
   36568:	eb013b01 	.word	0xeb013b01
   3656c:	93041343 	.word	0x93041343
   36570:	fa5f2400 	.word	0xfa5f2400
   36574:	f85bf38a 	.word	0xf85bf38a
   36578:	9b047023 	.word	0x9b047023
   3657c:	fa5f46a1 	.word	0xfa5f46a1
   36580:	6819fc85 	.word	0x6819fc85
   36584:	6318ea4f 	.word	0x6318ea4f
   36588:	46a69407 	.word	0x46a69407
   3658c:	402cf85b 	.word	0x402cf85b
   36590:	c023f85b 	.word	0xc023f85b
   36594:	f3c54079 	.word	0xf3c54079
   36598:	f85b2307 	.word	0xf85b2307
   3659c:	f3c23023 	.word	0xf3c23023
   365a0:	ea814707 	.word	0xea814707
   365a4:	fa5f213c 	.word	0xfa5f213c
   365a8:	f85bfc82 	.word	0xf85bfc82
   365ac:	f85b002c 	.word	0xf85b002c
   365b0:	ea817027 	.word	0xea817027
   365b4:	90036133 	.word	0x90036133
   365b8:	4037ea81 	.word	0x4037ea81
   365bc:	fa5f9f04 	.word	0xfa5f9f04
   365c0:	f85bf688 	.word	0xf85bf688
   365c4:	68fb6026 	.word	0x68fb6026
   365c8:	40739001 	.word	0x40739001
   365cc:	f85b0e16 	.word	0xf85b0e16
   365d0:	98046026 	.word	0x98046026
   365d4:	2636ea83 	.word	0x2636ea83
   365d8:	f85b0e2b 	.word	0xf85b0e2b
   365dc:	f3c53023 	.word	0xf3c53023
   365e0:	496d4507 	.word	0x496d4507
   365e4:	7025f85b 	.word	0x7025f85b
   365e8:	f89d9306 	.word	0xf89d9306
   365ec:	6843c004 	.word	0x6843c004
   365f0:	651aea4f 	.word	0x651aea4f
   365f4:	5025f85b 	.word	0x5025f85b
   365f8:	2207f3c2 	.word	0x2207f3c2
   365fc:	2022f85b 	.word	0x2022f85b
   36600:	c00cf811 	.word	0xc00cf811
   36604:	69044063 	.word	0x69044063
   36608:	2535ea83 	.word	0x2535ea83
   3660c:	2307f3ca 	.word	0x2307f3ca
   36610:	3023f85b 	.word	0x3023f85b
   36614:	0c04ea8c 	.word	0x0c04ea8c
   36618:	6532ea85 	.word	0x6532ea85
   3661c:	68829c03 	.word	0x68829c03
   36620:	6633ea86 	.word	0x6633ea86
   36624:	f3c84660 	.word	0xf3c84660
   36628:	ea842307 	.word	0xea842307
   3662c:	9c060c02 	.word	0x9c060c02
   36630:	3023f85b 	.word	0x3023f85b
   36634:	4a07f3ca 	.word	0x4a07f3ca
   36638:	202af85b 	.word	0x202af85b
   3663c:	2c34ea8c 	.word	0x2c34ea8c
   36640:	4807f3c8 	.word	0x4807f3c8
   36644:	4637ea86 	.word	0x4637ea86
   36648:	6c33ea8c 	.word	0x6c33ea8c
   3664c:	7028f85b 	.word	0x7028f85b
   36650:	4232ea8c 	.word	0x4232ea8c
   36654:	4537ea85 	.word	0x4537ea85
   36658:	4c07f3c2 	.word	0x4c07f3c2
   3665c:	5ccb0e33 	.word	0x5ccb0e33
   36660:	a00cf811 	.word	0xa00cf811
   36664:	fc85fa5f 	.word	0xfc85fa5f
   36668:	400cf811 	.word	0x400cf811
   3666c:	2707f3c5 	.word	0x2707f3c5
   36670:	464c9403 	.word	0x464c9403
   36674:	ea805dcf 	.word	0xea805dcf
   36678:	98016303 	.word	0x98016303
   3667c:	2307ea83 	.word	0x2307ea83
   36680:	fb82fa5f 	.word	0xfb82fa5f
   36684:	430aea83 	.word	0x430aea83
   36688:	b00bf811 	.word	0xb00bf811
   3668c:	6c10ea4f 	.word	0x6c10ea4f
   36690:	f3639804 	.word	0xf3639804
   36694:	f8110407 	.word	0xf8110407
   36698:	f8cd800c 	.word	0xf8cd800c
   3669c:	9402b018 	.word	0x9402b018
   366a0:	2c07f3c2 	.word	0x2c07f3c2
   366a4:	ea4f9c03 	.word	0xea4f9c03
   366a8:	69426b12 	.word	0x69426b12
   366ac:	c00cf811 	.word	0xc00cf811
   366b0:	f3c64062 	.word	0xf3c64062
   366b4:	5dcf4707 	.word	0x5dcf4707
   366b8:	6808ea82 	.word	0x6808ea82
   366bc:	6a15ea4f 	.word	0x6a15ea4f
   366c0:	ea886982 	.word	0xea886982
   366c4:	9c062c0c 	.word	0x9c062c0c
   366c8:	f886fa5f 	.word	0xf886fa5f
   366cc:	4707ea8c 	.word	0x4707ea8c
   366d0:	8008f811 	.word	0x8008f811
   366d4:	c00af811 	.word	0xc00af811
   366d8:	a01cf8d0 	.word	0xa01cf8d0
   366dc:	40629801 	.word	0x40629801
   366e0:	0a0aea88 	.word	0x0a0aea88
   366e4:	620cea82 	.word	0x620cea82
   366e8:	4807f3c0 	.word	0x4807f3c0
   366ec:	2c07f3c0 	.word	0x2c07f3c0
   366f0:	f8112000 	.word	0xf8112000
   366f4:	f3c6b00b 	.word	0xf3c6b00b
   366f8:	5d8e2607 	.word	0x5d8e2607
   366fc:	6b0bea8a 	.word	0x6b0bea8a
   36700:	4507f3c5 	.word	0x4507f3c5
   36704:	a00cf811 	.word	0xa00cf811
   36708:	f8115d4d 	.word	0xf8115d4d
   3670c:	ea821008 	.word	0xea821008
   36710:	ea8b2606 	.word	0xea8b2606
   36714:	9c022b0a 	.word	0x9c022b0a
   36718:	4b05ea8b 	.word	0x4b05ea8b
   3671c:	4601ea86 	.word	0x4601ea86
   36720:	2c13ea4f 	.word	0x2c13ea4f
   36724:	ea4f0a31 	.word	0xea4f0a31
   36728:	f366221b 	.word	0xf366221b
   3672c:	f36b0e07 	.word	0xf36b0e07
   36730:	f36c0007 	.word	0xf36c0007
   36734:	ea4f240f 	.word	0xea4f240f
   36738:	f3624c13 	.word	0xf3624c13
   3673c:	f361200f 	.word	0xf361200f
   36740:	f36c2e0f 	.word	0xf36c2e0f
   36744:	0c314417 	.word	0x0c314417
   36748:	4e17f361 	.word	0x4e17f361
   3674c:	46204601 	.word	0x46204601
   36750:	f3630e1b 	.word	0xf3630e1b
   36754:	9b05601f 	.word	0x9b05601f
   36758:	60180a3d 	.word	0x60180a3d
   3675c:	f3672000 	.word	0xf3672000
   36760:	ea4f0907 	.word	0xea4f0907
   36764:	f365421b 	.word	0xf365421b
   36768:	0c3d290f 	.word	0x0c3d290f
   3676c:	4917f365 	.word	0x4917f365
   36770:	0e360e3f 	.word	0x0e360e3f
   36774:	4117f362 	.word	0x4117f362
   36778:	6b1bea4f 	.word	0x6b1bea4f
   3677c:	691ff367 	.word	0x691ff367
   36780:	6e1ff366 	.word	0x6e1ff366
   36784:	611ff36b 	.word	0x611ff36b
   36788:	9004f8c3 	.word	0x9004f8c3
   3678c:	e008f8c3 	.word	0xe008f8c3
   36790:	b00960d9 	.word	0xb00960d9
   36794:	8ff0e8bd 	.word	0x8ff0e8bd
   36798:	000433a0 	.word	0x000433a0
   3679c:	000434a0 	.word	0x000434a0

000367a0 <symbol_000e471>:
   367a0:	4ff0e92d 	.word	0x4ff0e92d
   367a4:	3500e9d0 	.word	0x3500e9d0
   367a8:	682fb089 	.word	0x682fb089
   367ac:	f8d1105b 	.word	0xf8d1105b
   367b0:	9306a000 	.word	0x9306a000
   367b4:	684c3b01 	.word	0x684c3b01
   367b8:	ea8a9301 	.word	0xea8a9301
   367bc:	68eb0a07 	.word	0x68eb0a07
   367c0:	68c9688f 	.word	0x68c9688f
   367c4:	40596868 	.word	0x40596868
   367c8:	68ae9b01 	.word	0x68ae9b01
   367cc:	2b009205 	.word	0x2b009205
   367d0:	0210f105 	.word	0x0210f105
   367d4:	0004ea80 	.word	0x0004ea80
   367d8:	0706ea87 	.word	0x0706ea87
   367dc:	f8df9204 	.word	0xf8df9204
   367e0:	f340b3dc 	.word	0xf340b3dc
   367e4:	46d180d7 	.word	0x46d180d7
   367e8:	0830f105 	.word	0x0830f105
   367ec:	f489fa5f 	.word	0xf489fa5f
   367f0:	5024f85b 	.word	0x5024f85b
   367f4:	6c20f858 	.word	0x6c20f858
   367f8:	fc80fa5f 	.word	0xfc80fa5f
   367fc:	f85b0e04 	.word	0xf85b0e04
   36800:	f85bc02c 	.word	0xf85bc02c
   36804:	406e4024 	.word	0x406e4024
   36808:	5c1cf858 	.word	0x5c1cf858
   3680c:	2e07f3c1 	.word	0x2e07f3c1
   36810:	a02ef85b 	.word	0xa02ef85b
   36814:	0505ea8c 	.word	0x0505ea8c
   36818:	2e34ea86 	.word	0x2e34ea86
   3681c:	b2fbb2ca 	.word	0xb2fbb2ca
   36820:	6c17ea4f 	.word	0x6c17ea4f
   36824:	4407f3c7 	.word	0x4407f3c7
   36828:	2707f3c7 	.word	0x2707f3c7
   3682c:	6027f85b 	.word	0x6027f85b
   36830:	2022f85b 	.word	0x2022f85b
   36834:	7c14f858 	.word	0x7c14f858
   36838:	3023f85b 	.word	0x3023f85b
   3683c:	ea4f407a 	.word	0xea4f407a
   36840:	f85b6719 	.word	0xf85b6719
   36844:	f85b7027 	.word	0xf85b7027
   36848:	ea82c02c 	.word	0xea82c02c
   3684c:	ea822237 	.word	0xea822237
   36850:	f8586636 	.word	0xf8586636
   36854:	ea852c18 	.word	0xea852c18
   36858:	ea8e2c3c 	.word	0xea8e2c3c
   3685c:	0e0d6e3a 	.word	0x0e0d6e3a
   36860:	0a02ea83 	.word	0x0a02ea83
   36864:	2307f3c9 	.word	0x2307f3c9
   36868:	3023f85b 	.word	0x3023f85b
   3686c:	5025f85b 	.word	0x5025f85b
   36870:	4107f3c1 	.word	0x4107f3c1
   36874:	1021f85b 	.word	0x1021f85b
   36878:	2707f3c0 	.word	0x2707f3c0
   3687c:	2535ea8a 	.word	0x2535ea8a
   36880:	4a07f3c0 	.word	0x4a07f3c0
   36884:	6033ea8c 	.word	0x6033ea8c
   36888:	4031ea80 	.word	0x4031ea80
   3688c:	4024f85b 	.word	0x4024f85b
   36890:	ea8e0e03 	.word	0xea8e0e03
   36894:	f85b4434 	.word	0xf85b4434
   36898:	b2e13023 	.word	0xb2e13023
   3689c:	f3c99302 	.word	0xf3c99302
   368a0:	f8584907 	.word	0xf8584907
   368a4:	f85b3c10 	.word	0xf85b3c10
   368a8:	f85b1021 	.word	0xf85b1021
   368ac:	f3c42029 	.word	0xf3c42029
   368b0:	f85b2c07 	.word	0xf85b2c07
   368b4:	f85b9027 	.word	0xf85b9027
   368b8:	4059702a 	.word	0x4059702a
   368bc:	302cf85b 	.word	0x302cf85b
   368c0:	4637ea86 	.word	0x4637ea86
   368c4:	6539ea85 	.word	0x6539ea85
   368c8:	4532ea85 	.word	0x4532ea85
   368cc:	2707f3c6 	.word	0x2707f3c6
   368d0:	9b029303 	.word	0x9b029303
   368d4:	4e07f3c5 	.word	0x4e07f3c5
   368d8:	7027f85b 	.word	0x7027f85b
   368dc:	902ef85b 	.word	0x902ef85b
   368e0:	4c07f3c6 	.word	0x4c07f3c6
   368e4:	ea4fb2c2 	.word	0xea4fb2c2
   368e8:	ea816e15 	.word	0xea816e15
   368ec:	b2e92333 	.word	0xb2e92333
   368f0:	a02cf85b 	.word	0xa02cf85b
   368f4:	6337ea83 	.word	0x6337ea83
   368f8:	2022f85b 	.word	0x2022f85b
   368fc:	e02ef85b 	.word	0xe02ef85b
   36900:	1021f85b 	.word	0x1021f85b
   36904:	7c0cf858 	.word	0x7c0cf858
   36908:	6c16ea4f 	.word	0x6c16ea4f
   3690c:	b2f6407a 	.word	0xb2f6407a
   36910:	2e3eea82 	.word	0x2e3eea82
   36914:	2026f85b 	.word	0x2026f85b
   36918:	6c08f858 	.word	0x6c08f858
   3691c:	4939ea83 	.word	0x4939ea83
   36920:	40710e23 	.word	0x40710e23
   36924:	6023f85b 	.word	0x6023f85b
   36928:	3c04f858 	.word	0x3c04f858
   3692c:	702cf85b 	.word	0x702cf85b
   36930:	f3c54053 	.word	0xf3c54053
   36934:	ea832507 	.word	0xea832507
   36938:	f85b2636 	.word	0xf85b2636
   3693c:	f3c05025 	.word	0xf3c05025
   36940:	f3c02307 	.word	0xf3c02307
   36944:	ea814007 	.word	0xea814007
   36948:	f85b2137 	.word	0xf85b2137
   3694c:	f85b7023 	.word	0xf85b7023
   36950:	ea863020 	.word	0xea863020
   36954:	ea816635 	.word	0xea816635
   36958:	f3c46737 	.word	0xf3c46737
   3695c:	9a034407 	.word	0x9a034407
   36960:	4133ea86 	.word	0x4133ea86
   36964:	f85b9b01 	.word	0xf85b9b01
   36968:	ea8e4024 	.word	0xea8e4024
   3696c:	3b016e32 	.word	0x3b016e32
   36970:	403aea8e 	.word	0x403aea8e
   36974:	4734ea87 	.word	0x4734ea87
   36978:	0820f108 	.word	0x0820f108
   3697c:	f47f9301 	.word	0xf47f9301
   36980:	46caaf35 	.word	0x46caaf35
   36984:	9a049b06 	.word	0x9a049b06
   36988:	6300f103 	.word	0x6300f103
   3698c:	eb023b01 	.word	0xeb023b01
   36990:	93041343 	.word	0x93041343
   36994:	f38afa5f 	.word	0xf38afa5f
   36998:	5023f85b 	.word	0x5023f85b
   3699c:	fa5f9b04 	.word	0xfa5f9b04
   369a0:	681cf881 	.word	0x681cf881
   369a4:	f85b0e03 	.word	0xf85b0e03
   369a8:	f85b2028 	.word	0xf85b2028
   369ac:	f3c18023 	.word	0xf3c18023
   369b0:	f85b2307 	.word	0xf85b2307
   369b4:	406c3023 	.word	0x406c3023
   369b8:	4507f3c7 	.word	0x4507f3c7
   369bc:	5025f85b 	.word	0x5025f85b
   369c0:	2438ea84 	.word	0x2438ea84
   369c4:	f887fa5f 	.word	0xf887fa5f
   369c8:	6028f85b 	.word	0x6028f85b
   369cc:	6433ea84 	.word	0x6433ea84
   369d0:	4535ea84 	.word	0x4535ea84
   369d4:	462e9602 	.word	0x462e9602
   369d8:	fa5f9c04 	.word	0xfa5f9c04
   369dc:	f85bf980 	.word	0xf85bf980
   369e0:	68639029 	.word	0x68639029
   369e4:	f85b0e3c 	.word	0xf85b0e3c
   369e8:	96014024 	.word	0x96014024
   369ec:	0303ea89 	.word	0x0303ea89
   369f0:	ea839e04 	.word	0xea839e04
   369f4:	f3c72434 	.word	0xf3c72434
   369f8:	0e0b2707 	.word	0x0e0b2707
   369fc:	f85b4d6e 	.word	0xf85b4d6e
   36a00:	f89d9027 	.word	0xf89d9027
   36a04:	f85b8004 	.word	0xf85b8004
   36a08:	68f37023 	.word	0x68f37023
   36a0c:	0e00f04f 	.word	0x0e00f04f
   36a10:	8008f815 	.word	0x8008f815
   36a14:	69324053 	.word	0x69324053
   36a18:	4107f3c1 	.word	0x4107f3c1
   36a1c:	0802ea88 	.word	0x0802ea88
   36a20:	97034642 	.word	0x97034642
   36a24:	7021f85b 	.word	0x7021f85b
   36a28:	611aea4f 	.word	0x611aea4f
   36a2c:	1021f85b 	.word	0x1021f85b
   36a30:	e018f8cd 	.word	0xe018f8cd
   36a34:	2331ea83 	.word	0x2331ea83
   36a38:	6939ea83 	.word	0x6939ea83
   36a3c:	2307f3ca 	.word	0x2307f3ca
   36a40:	3023f85b 	.word	0x3023f85b
   36a44:	9e0268b1 	.word	0x9e0268b1
   36a48:	6333ea84 	.word	0x6333ea84
   36a4c:	4737ea83 	.word	0x4737ea83
   36a50:	0801ea86 	.word	0x0801ea86
   36a54:	2307f3c0 	.word	0x2307f3c0
   36a58:	f3ca9e03 	.word	0xf3ca9e03
   36a5c:	f3c04a07 	.word	0xf3c04a07
   36a60:	f85b4007 	.word	0xf85b4007
   36a64:	f85b102a 	.word	0xf85b102a
   36a68:	f8cd4023 	.word	0xf8cd4023
   36a6c:	f85be01c 	.word	0xf85be01c
   36a70:	0e383020 	.word	0x0e383020
   36a74:	ea885c28 	.word	0xea885c28
   36a78:	ea892836 	.word	0xea892836
   36a7c:	ea884933 	.word	0xea884933
   36a80:	ea886834 	.word	0xea886834
   36a84:	f3c94131 	.word	0xf3c94131
   36a88:	ea822407 	.word	0xea822407
   36a8c:	9a016000 	.word	0x9a016000
   36a90:	8004f815 	.word	0x8004f815
   36a94:	4307f3c1 	.word	0x4307f3c1
   36a98:	6a11ea4f 	.word	0x6a11ea4f
   36a9c:	f8155cec 	.word	0xf8155cec
   36aa0:	f3c2b00a 	.word	0xf3c2b00a
   36aa4:	9a042a07 	.word	0x9a042a07
   36aa8:	ea80b2fb 	.word	0xea80b2fb
   36aac:	ea802008 	.word	0xea802008
   36ab0:	5ceb4004 	.word	0x5ceb4004
   36ab4:	f8156954 	.word	0xf8156954
   36ab8:	f3c9a00a 	.word	0xf3c9a00a
   36abc:	40634807 	.word	0x40634807
   36ac0:	6008f815 	.word	0x6008f815
   36ac4:	6b0bea83 	.word	0x6b0bea83
   36ac8:	2b0aea8b 	.word	0x2b0aea8b
   36acc:	4b06ea8b 	.word	0x4b06ea8b
   36ad0:	260046f4 	.word	0x260046f4
   36ad4:	f881fa5f 	.word	0xf881fa5f
   36ad8:	f8156994 	.word	0xf8156994
   36adc:	ea4f8008 	.word	0xea4f8008
   36ae0:	f8d26319 	.word	0xf8d26319
   36ae4:	5ceba01c 	.word	0x5ceba01c
   36ae8:	fa5f9a01 	.word	0xfa5f9a01
   36aec:	f815f989 	.word	0xf815f989
   36af0:	ea889009 	.word	0xea889009
   36af4:	ea880804 	.word	0xea880804
   36af8:	0e136803 	.word	0x0e136803
   36afc:	090aea89 	.word	0x090aea89
   36b00:	a003f815 	.word	0xa003f815
   36b04:	4307f3c2 	.word	0x4307f3c2
   36b08:	f3c75cec 	.word	0xf3c75cec
   36b0c:	5ceb2307 	.word	0x5ceb2307
   36b10:	2107f3c1 	.word	0x2107f3c1
   36b14:	ea885c69 	.word	0xea885c69
   36b18:	ea882803 	.word	0xea882803
   36b1c:	ea894804 	.word	0xea894804
   36b20:	ea4f690a 	.word	0xea4f690a
   36b24:	ea89241b 	.word	0xea89241b
   36b28:	f36b2901 	.word	0xf36b2901
   36b2c:	ea4f0c07 	.word	0xea4f0c07
   36b30:	f3682118 	.word	0xf3682118
   36b34:	22000607 	.word	0x22000607
   36b38:	260ff361 	.word	0x260ff361
   36b3c:	2c0ff364 	.word	0x2c0ff364
   36b40:	441bea4f 	.word	0x441bea4f
   36b44:	4c17f364 	.word	0x4c17f364
   36b48:	f3c74634 	.word	0xf3c74634
   36b4c:	5ded4707 	.word	0x5ded4707
   36b50:	0e07f360 	.word	0x0e07f360
   36b54:	4905ea89 	.word	0x4905ea89
   36b58:	2319ea4f 	.word	0x2319ea4f
   36b5c:	f3690a05 	.word	0xf3690a05
   36b60:	ea4f0207 	.word	0xea4f0207
   36b64:	f3634118 	.word	0xf3634118
   36b68:	f365220f 	.word	0xf365220f
   36b6c:	0c052e0f 	.word	0x0c052e0f
   36b70:	4417f361 	.word	0x4417f361
   36b74:	4e17f365 	.word	0x4e17f365
   36b78:	46110e00 	.word	0x46110e00
   36b7c:	6e1ff360 	.word	0x6e1ff360
   36b80:	ea4f4620 	.word	0xea4f4620
   36b84:	ea4f4319 	.word	0xea4f4319
   36b88:	f3636818 	.word	0xf3636818
   36b8c:	9b054117 	.word	0x9b054117
   36b90:	601ff368 	.word	0x601ff368
   36b94:	20006098 	.word	0x20006098
   36b98:	6b1bea4f 	.word	0x6b1bea4f
   36b9c:	6919ea4f 	.word	0x6919ea4f
   36ba0:	6c1ff36b 	.word	0x6c1ff36b
   36ba4:	611ff369 	.word	0x611ff369
   36ba8:	e000f8c3 	.word	0xe000f8c3
   36bac:	c004f8c3 	.word	0xc004f8c3
   36bb0:	b00960d9 	.word	0xb00960d9
   36bb4:	8ff0e8bd 	.word	0x8ff0e8bd
   36bb8:	000438c8 	.word	0x000438c8
   36bbc:	000439c8 	.word	0x000439c8

00036bc0 <symbol_0005bab>:
   36bc0:	4614b410 	.word	0x4614b410
   36bc4:	461a2901 	.word	0x461a2901
   36bc8:	d0034621 	.word	0xd0034621
   36bcc:	4b04f85d 	.word	0x4b04f85d
   36bd0:	bde6f7ff 	.word	0xbde6f7ff
   36bd4:	4b04f85d 	.word	0x4b04f85d
   36bd8:	bbcaf7ff 	.word	0xbbcaf7ff

00036bdc <ok_rsp_parser>:
   36bdc:	47702000 	.word	0x47702000

00036be0 <pdn_state_get_parser>:
   36be0:	b5702200 	.word	0xb5702200
   36be4:	b084780b 	.word	0xb084780b
   36be8:	e9cd460e 	.word	0xe9cd460e
   36bec:	e9cd2200 	.word	0xe9cd2200
   36bf0:	b3232202 	.word	0xb3232202
   36bf4:	2b20460c 	.word	0x2b20460c
   36bf8:	d01b460d 	.word	0xd01b460d
   36bfc:	3201700b 	.word	0x3201700b
   36c00:	3f01f814 	.word	0x3f01f814
   36c04:	460d18b1 	.word	0x460d18b1
   36c08:	d1f42b00 	.word	0xd1f42b00
   36c0c:	4b0d2200 	.word	0x4b0d2200
   36c10:	f853702a 	.word	0xf853702a
   36c14:	4a0c3020 	.word	0x4a0c3020
   36c18:	2110681b 	.word	0x2110681b
   36c1c:	f0054668 	.word	0xf0054668
   36c20:	4669febf 	.word	0x4669febf
   36c24:	f00a4630 	.word	0xf00a4630
   36c28:	3000fa9d 	.word	0x3000fa9d
   36c2c:	2001bf18 	.word	0x2001bf18
   36c30:	bd70b004 	.word	0xbd70b004
   36c34:	3f01f814 	.word	0x3f01f814
   36c38:	d1dc2b00 	.word	0xd1dc2b00
   36c3c:	460de7e6 	.word	0x460de7e6
   36c40:	bf00e7e4 	.word	0xbf00e7e4
   36c44:	2002601c 	.word	0x2002601c
   36c48:	00043e6c 	.word	0x00043e6c

00036c4c <pdn_id_get_parser>:
   36c4c:	780bb570 	.word	0x780bb570
   36c50:	b3134606 	.word	0xb3134606
   36c54:	24004608 	.word	0x24004608
   36c58:	2b20460a 	.word	0x2b20460a
   36c5c:	d0174615 	.word	0xd0174615
   36c60:	34017013 	.word	0x34017013
   36c64:	3f01f810 	.word	0x3f01f810
   36c68:	4615190a 	.word	0x4615190a
   36c6c:	d1f42b00 	.word	0xd1f42b00
   36c70:	46082300 	.word	0x46082300
   36c74:	213a702b 	.word	0x213a702b
   36c78:	fa3af00a 	.word	0xfa3af00a
   36c7c:	3001b130 	.word	0x3001b130
   36c80:	f84ef00a 	.word	0xf84ef00a
   36c84:	f8534b06 	.word	0xf8534b06
   36c88:	60583026 	.word	0x60583026
   36c8c:	bd702000 	.word	0xbd702000
   36c90:	3f01f810 	.word	0x3f01f810
   36c94:	d1e02b00 	.word	0xd1e02b00
   36c98:	460de7ea 	.word	0x460de7ea
   36c9c:	bf00e7e8 	.word	0xbf00e7e8
   36ca0:	2002601c 	.word	0x2002601c

00036ca4 <context_create_parser>:
   36ca4:	780bb570 	.word	0x780bb570
   36ca8:	b3134606 	.word	0xb3134606
   36cac:	24004608 	.word	0x24004608
   36cb0:	2b20460a 	.word	0x2b20460a
   36cb4:	d0174615 	.word	0xd0174615
   36cb8:	34017013 	.word	0x34017013
   36cbc:	3f01f810 	.word	0x3f01f810
   36cc0:	4615190a 	.word	0x4615190a
   36cc4:	d1f42b00 	.word	0xd1f42b00
   36cc8:	46082300 	.word	0x46082300
   36ccc:	213a702b 	.word	0x213a702b
   36cd0:	fa0ef00a 	.word	0xfa0ef00a
   36cd4:	4b08b130 	.word	0x4b08b130
   36cd8:	f8533001 	.word	0xf8533001
   36cdc:	f00a4026 	.word	0xf00a4026
   36ce0:	6020f81f 	.word	0x6020f81f
   36ce4:	bd702000 	.word	0xbd702000
   36ce8:	3f01f810 	.word	0x3f01f810
   36cec:	d1e02b00 	.word	0xd1e02b00
   36cf0:	460de7ea 	.word	0x460de7ea
   36cf4:	bf00e7e8 	.word	0xbf00e7e8
   36cf8:	2002601c 	.word	0x2002601c

00036cfc <pdn_interface_init>:
   36cfc:	33fff04f 	.word	0x33fff04f
   36d00:	4c09b510 	.word	0x4c09b510
   36d04:	21002228 	.word	0x21002228
   36d08:	60234808 	.word	0x60234808
   36d0c:	f848f00a 	.word	0xf848f00a
   36d10:	2201f240 	.word	0x2201f240
   36d14:	20662100 	.word	0x20662100
   36d18:	ff70f7f2 	.word	0xff70f7f2
   36d1c:	60202800 	.word	0x60202800
   36d20:	2003bfb4 	.word	0x2003bfb4
   36d24:	bd102000 	.word	0xbd102000
   36d28:	20025f18 	.word	0x20025f18
   36d2c:	2002601c 	.word	0x2002601c

00036d30 <pdn_interface_open>:
   36d30:	43f0e92d 	.word	0x43f0e92d
   36d34:	b0832866 	.word	0xb0832866
   36d38:	80bcf040 	.word	0x80bcf040
   36d3c:	7f00f5b1 	.word	0x7f00f5b1
   36d40:	80aaf040 	.word	0x80aaf040
   36d44:	2302f240 	.word	0x2302f240
   36d48:	f040429a 	.word	0xf040429a
   36d4c:	4c6280a5 	.word	0x4c6280a5
   36d50:	b34d6825 	.word	0xb34d6825
   36d54:	2b006863 	.word	0x2b006863
   36d58:	8098f000 	.word	0x8098f000
   36d5c:	2b0068a3 	.word	0x2b0068a3
   36d60:	8096f000 	.word	0x8096f000
   36d64:	2b0068e3 	.word	0x2b0068e3
   36d68:	8094f000 	.word	0x8094f000
   36d6c:	2b006923 	.word	0x2b006923
   36d70:	8098f000 	.word	0x8098f000
   36d74:	2b006963 	.word	0x2b006963
   36d78:	8098f000 	.word	0x8098f000
   36d7c:	2b0069a3 	.word	0x2b0069a3
   36d80:	8096f000 	.word	0x8096f000
   36d84:	2b0069e3 	.word	0x2b0069e3
   36d88:	808ef000 	.word	0x808ef000
   36d8c:	b1536a23 	.word	0xb1536a23
   36d90:	25096a63 	.word	0x25096a63
   36d94:	200cb143 	.word	0x200cb143
   36d98:	fdb8f7eb 	.word	0xfdb8f7eb
   36d9c:	30fff04f 	.word	0x30fff04f
   36da0:	e8bdb003 	.word	0xe8bdb003
   36da4:	250883f0 	.word	0x250883f0
   36da8:	f7fe2074 	.word	0xf7fe2074
   36dac:	f844ff3f 	.word	0xf844ff3f
   36db0:	28000025 	.word	0x28000025
   36db4:	2274d0ef 	.word	0x2274d0ef
   36db8:	f0092100 	.word	0xf0092100
   36dbc:	2101fff1 	.word	0x2101fff1
   36dc0:	f04f2003 	.word	0xf04f2003
   36dc4:	f85437ff 	.word	0xf85437ff
   36dc8:	4a443025 	.word	0x4a443025
   36dcc:	f8546099 	.word	0xf8546099
   36dd0:	f44f3025 	.word	0xf44f3025
   36dd4:	67187180 	.word	0x67187180
   36dd8:	4841605f 	.word	0x4841605f
   36ddc:	810cf8df 	.word	0x810cf8df
   36de0:	fddef005 	.word	0xfddef005
   36de4:	f8d8483e 	.word	0xf8d8483e
   36de8:	26009000 	.word	0x26009000
   36dec:	f8caf7e3 	.word	0xf8caf7e3
   36df0:	46024633 	.word	0x46024633
   36df4:	4648493a 	.word	0x4648493a
   36df8:	96009601 	.word	0x96009601
   36dfc:	fea8f7f2 	.word	0xfea8f7f2
   36e00:	48374681 	.word	0x48374681
   36e04:	f8bef7e3 	.word	0xf8bef7e3
   36e08:	d1594548 	.word	0xd1594548
   36e0c:	e9cd4633 	.word	0xe9cd4633
   36e10:	f44f6600 	.word	0xf44f6600
   36e14:	49327280 	.word	0x49327280
   36e18:	0000f8d8 	.word	0x0000f8d8
   36e1c:	ff80f7f2 	.word	0xff80f7f2
   36e20:	48304606 	.word	0x48304606
   36e24:	f8aef7e3 	.word	0xf8aef7e3
   36e28:	db154286 	.word	0xdb154286
   36e2c:	492c4602 	.word	0x492c4602
   36e30:	f00a482c 	.word	0xf00a482c
   36e34:	b978f972 	.word	0xb978f972
   36e38:	46284929 	.word	0x46284929
   36e3c:	ff32f7ff 	.word	0xff32f7ff
   36e40:	2202b9b0 	.word	0x2202b9b0
   36e44:	3025f854 	.word	0x3025f854
   36e48:	40f1f045 	.word	0x40f1f045
   36e4c:	10d0f440 	.word	0x10d0f440
   36e50:	b003609a 	.word	0xb003609a
   36e54:	83f0e8bd 	.word	0x83f0e8bd
   36e58:	f7e34823 	.word	0xf7e34823
   36e5c:	4920f893 	.word	0x4920f893
   36e60:	48214602 	.word	0x48214602
   36e64:	f959f00a 	.word	0xf959f00a
   36e68:	2008b960 	.word	0x2008b960
   36e6c:	fd4ef7eb 	.word	0xfd4ef7eb
   36e70:	0025f854 	.word	0x0025f854
   36e74:	fef8f7fe 	.word	0xfef8f7fe
   36e78:	f04f2300 	.word	0xf04f2300
   36e7c:	f84430ff 	.word	0xf84430ff
   36e80:	e78d3025 	.word	0xe78d3025
   36e84:	f7eb2005 	.word	0xf7eb2005
   36e88:	e7f1fd41 	.word	0xe7f1fd41
   36e8c:	e78b2501 	.word	0xe78b2501
   36e90:	e7892502 	.word	0xe7892502
   36e94:	e7872503 	.word	0xe7872503
   36e98:	f7eb2016 	.word	0xf7eb2016
   36e9c:	f04ffd37 	.word	0xf04ffd37
   36ea0:	e77d30ff 	.word	0xe77d30ff
   36ea4:	e77f2504 	.word	0xe77f2504
   36ea8:	e77d2507 	.word	0xe77d2507
   36eac:	e77b2505 	.word	0xe77b2505
   36eb0:	e7792506 	.word	0xe7792506
   36eb4:	f7eb202f 	.word	0xf7eb202f
   36eb8:	f04ffd29 	.word	0xf04ffd29
   36ebc:	e76f30ff 	.word	0xe76f30ff
   36ec0:	f7eb2005 	.word	0xf7eb2005
   36ec4:	f854fd23 	.word	0xf854fd23
   36ec8:	f7fe0025 	.word	0xf7fe0025
   36ecc:	f844fecd 	.word	0xf844fecd
   36ed0:	46386025 	.word	0x46386025
   36ed4:	bf00e764 	.word	0xbf00e764
   36ed8:	2002601c 	.word	0x2002601c
   36edc:	00043e48 	.word	0x00043e48
   36ee0:	20025f1c 	.word	0x20025f1c
   36ee4:	00043e58 	.word	0x00043e58
   36ee8:	00043e64 	.word	0x00043e64
   36eec:	20025f18 	.word	0x20025f18

00036ef0 <pdn_interface_connect>:
   36ef0:	4ff0e92d 	.word	0x4ff0e92d
   36ef4:	2900b083 	.word	0x2900b083
   36ef8:	813ef000 	.word	0x813ef000
   36efc:	46912a64 	.word	0x46912a64
   36f00:	813af200 	.word	0x813af200
   36f04:	46084605 	.word	0x46084605
   36f08:	f7e34688 	.word	0xf7e34688
   36f0c:	2864f83b 	.word	0x2864f83b
   36f10:	8132f200 	.word	0x8132f200
   36f14:	43ab4ba5 	.word	0x43ab4ba5
   36f18:	8125f040 	.word	0x8125f040
   36f1c:	45f1f025 	.word	0x45f1f025
   36f20:	15d0f425 	.word	0x15d0f425
   36f24:	f3002d09 	.word	0xf3002d09
   36f28:	4fa1811e 	.word	0x4fa1811e
   36f2c:	3025f857 	.word	0x3025f857
   36f30:	f0002b00 	.word	0xf0002b00
   36f34:	689a8118 	.word	0x689a8118
   36f38:	f0002a00 	.word	0xf0002a00
   36f3c:	2d008114 	.word	0x2d008114
   36f40:	8111f2c0 	.word	0x8111f2c0
   36f44:	2b02689b 	.word	0x2b02689b
   36f48:	810df040 	.word	0x810df040
   36f4c:	4a9a4e99 	.word	0x4a9a4e99
   36f50:	7180f44f 	.word	0x7180f44f
   36f54:	f0054630 	.word	0xf0054630
   36f58:	f857fd23 	.word	0xf857fd23
   36f5c:	46043025 	.word	0x46043025
   36f60:	7180f5c0 	.word	0x7180f5c0
   36f64:	4a95681b 	.word	0x4a95681b
   36f68:	f0051830 	.word	0xf0051830
   36f6c:	f857fd19 	.word	0xf857fd19
   36f70:	44043025 	.word	0x44043025
   36f74:	f0036f1b 	.word	0xf0036f1b
   36f78:	2a030203 	.word	0x2a030203
   36f7c:	80eaf000 	.word	0x80eaf000
   36f80:	eb06079b 	.word	0xeb06079b
   36f84:	f5c40004 	.word	0xf5c40004
   36f88:	bf4c7180 	.word	0xbf4c7180
   36f8c:	4b8d4b8c 	.word	0x4b8d4b8c
   36f90:	f0054a8d 	.word	0xf0054a8d
   36f94:	4404fd05 	.word	0x4404fd05
   36f98:	4a8c4643 	.word	0x4a8c4643
   36f9c:	7180f5c4 	.word	0x7180f5c4
   36fa0:	f0051930 	.word	0xf0051930
   36fa4:	4420fcfd 	.word	0x4420fcfd
   36fa8:	7f80f5b0 	.word	0x7f80f5b0
   36fac:	80f7f300 	.word	0x80f7f300
   36fb0:	a238f8df 	.word	0xa238f8df
   36fb4:	f8da487f 	.word	0xf8da487f
   36fb8:	2400b000 	.word	0x2400b000
   36fbc:	ffe2f7e2 	.word	0xffe2f7e2
   36fc0:	46024623 	.word	0x46024623
   36fc4:	4658497b 	.word	0x4658497b
   36fc8:	94009401 	.word	0x94009401
   36fcc:	fdc0f7f2 	.word	0xfdc0f7f2
   36fd0:	48784683 	.word	0x48784683
   36fd4:	ffd6f7e2 	.word	0xffd6f7e2
   36fd8:	d0084558 	.word	0xd0084558
   36fdc:	f7eb2005 	.word	0xf7eb2005
   36fe0:	f04ffc95 	.word	0xf04ffc95
   36fe4:	462034ff 	.word	0x462034ff
   36fe8:	e8bdb003 	.word	0xe8bdb003
   36fec:	46238ff0 	.word	0x46238ff0
   36ff0:	4400e9cd 	.word	0x4400e9cd
   36ff4:	7280f44f 	.word	0x7280f44f
   36ff8:	f8da496e 	.word	0xf8da496e
   36ffc:	f7f20000 	.word	0xf7f20000
   37000:	4604fe8f 	.word	0x4604fe8f
   37004:	f7e24872 	.word	0xf7e24872
   37008:	4284ffbd 	.word	0x4284ffbd
   3700c:	8091f2c0 	.word	0x8091f2c0
   37010:	49684602 	.word	0x49684602
   37014:	f00a486e 	.word	0xf00a486e
   37018:	2800f880 	.word	0x2800f880
   3701c:	8089f040 	.word	0x8089f040
   37020:	46284964 	.word	0x46284964
   37024:	fddaf7ff 	.word	0xfddaf7ff
   37028:	28004604 	.word	0x28004604
   3702c:	4a69d1db 	.word	0x4a69d1db
   37030:	7180f44f 	.word	0x7180f44f
   37034:	f005485f 	.word	0xf005485f
   37038:	f857fcb3 	.word	0xf857fcb3
   3703c:	f5c03025 	.word	0xf5c03025
   37040:	681b7180 	.word	0x681b7180
   37044:	44304a64 	.word	0x44304a64
   37048:	fcaaf005 	.word	0xfcaaf005
   3704c:	f8da4859 	.word	0xf8da4859
   37050:	f7e2b000 	.word	0xf7e2b000
   37054:	4623ff97 	.word	0x4623ff97
   37058:	49564602 	.word	0x49564602
   3705c:	94014658 	.word	0x94014658
   37060:	f7f29400 	.word	0xf7f29400
   37064:	4683fd75 	.word	0x4683fd75
   37068:	f7e24852 	.word	0xf7e24852
   3706c:	4558ff8b 	.word	0x4558ff8b
   37070:	4623d1b4 	.word	0x4623d1b4
   37074:	7280f44f 	.word	0x7280f44f
   37078:	f8da494e 	.word	0xf8da494e
   3707c:	e9cd0000 	.word	0xe9cd0000
   37080:	f7f24400 	.word	0xf7f24400
   37084:	4683fe4d 	.word	0x4683fe4d
   37088:	f7e24851 	.word	0xf7e24851
   3708c:	4583ff7b 	.word	0x4583ff7b
   37090:	4602db4f 	.word	0x4602db4f
   37094:	484e4947 	.word	0x484e4947
   37098:	f83ff00a 	.word	0xf83ff00a
   3709c:	d1482800 	.word	0xd1482800
   370a0:	f8572103 	.word	0xf8572103
   370a4:	464a3025 	.word	0x464a3025
   370a8:	f8576099 	.word	0xf8576099
   370ac:	46410025 	.word	0x46410025
   370b0:	f009300c 	.word	0xf009300c
   370b4:	4a49fe55 	.word	0x4a49fe55
   370b8:	7180f44f 	.word	0x7180f44f
   370bc:	f005483d 	.word	0xf005483d
   370c0:	4601fc6f 	.word	0x4601fc6f
   370c4:	3025f857 	.word	0x3025f857
   370c8:	7180f5c1 	.word	0x7180f5c1
   370cc:	4a42681b 	.word	0x4a42681b
   370d0:	f0051830 	.word	0xf0051830
   370d4:	4837fc65 	.word	0x4837fc65
   370d8:	6000f8da 	.word	0x6000f8da
   370dc:	ff52f7e2 	.word	0xff52f7e2
   370e0:	46024623 	.word	0x46024623
   370e4:	46304933 	.word	0x46304933
   370e8:	94009401 	.word	0x94009401
   370ec:	fd30f7f2 	.word	0xfd30f7f2
   370f0:	48304606 	.word	0x48304606
   370f4:	ff46f7e2 	.word	0xff46f7e2
   370f8:	d15342b0 	.word	0xd15342b0
   370fc:	f44f4623 	.word	0xf44f4623
   37100:	492c7280 	.word	0x492c7280
   37104:	0000f8da 	.word	0x0000f8da
   37108:	4400e9cd 	.word	0x4400e9cd
   3710c:	fe08f7f2 	.word	0xfe08f7f2
   37110:	48334606 	.word	0x48334606
   37114:	ff36f7e2 	.word	0xff36f7e2
   37118:	db334286 	.word	0xdb334286
   3711c:	49254602 	.word	0x49254602
   37120:	f009482f 	.word	0xf009482f
   37124:	bb68fffa 	.word	0xbb68fffa
   37128:	49224628 	.word	0x49224628
   3712c:	fd8ef7ff 	.word	0xfd8ef7ff
   37130:	482ce759 	.word	0x482ce759
   37134:	ff26f7e2 	.word	0xff26f7e2
   37138:	4602491e 	.word	0x4602491e
   3713c:	f0094829 	.word	0xf0094829
   37140:	2800ffec 	.word	0x2800ffec
   37144:	af4af47f 	.word	0xaf4af47f
   37148:	f7eb2008 	.word	0xf7eb2008
   3714c:	f04ffbdf 	.word	0xf04ffbdf
   37150:	e74834ff 	.word	0xe74834ff
   37154:	7180f5c4 	.word	0x7180f5c4
   37158:	4b231930 	.word	0x4b231930
   3715c:	f0054a1a 	.word	0xf0054a1a
   37160:	4404fc1f 	.word	0x4404fc1f
   37164:	f04fe718 	.word	0xf04fe718
   37168:	200934ff 	.word	0x200934ff
   3716c:	fbcef7eb 	.word	0xfbcef7eb
   37170:	b0034620 	.word	0xb0034620
   37174:	8ff0e8bd 	.word	0x8ff0e8bd
   37178:	f7eb2016 	.word	0xf7eb2016
   3717c:	f04ffbc7 	.word	0xf04ffbc7
   37180:	e73034ff 	.word	0xe73034ff
   37184:	f7e24817 	.word	0xf7e24817
   37188:	490afefd 	.word	0x490afefd
   3718c:	48154602 	.word	0x48154602
   37190:	ffc3f009 	.word	0xffc3f009
   37194:	2008b930 	.word	0x2008b930
   37198:	fbb8f7eb 	.word	0xfbb8f7eb
   3719c:	f04fe723 	.word	0xf04fe723
   371a0:	e72034ff 	.word	0xe72034ff
   371a4:	f7eb2005 	.word	0xf7eb2005
   371a8:	e71cfbb1 	.word	0xe71cfbb1
   371ac:	789a0000 	.word	0x789a0000
   371b0:	2002601c 	.word	0x2002601c
   371b4:	20025f1c 	.word	0x20025f1c
   371b8:	00043dd4 	.word	0x00043dd4
   371bc:	00043de0 	.word	0x00043de0
   371c0:	00043df4 	.word	0x00043df4
   371c4:	00043dfc 	.word	0x00043dfc
   371c8:	00043dec 	.word	0x00043dec
   371cc:	00043e2c 	.word	0x00043e2c
   371d0:	00042df4 	.word	0x00042df4
   371d4:	00043e00 	.word	0x00043e00
   371d8:	00043e0c 	.word	0x00043e0c
   371dc:	00043e10 	.word	0x00043e10
   371e0:	00043e20 	.word	0x00043e20
   371e4:	00043e64 	.word	0x00043e64
   371e8:	00043de4 	.word	0x00043de4
   371ec:	20025f18 	.word	0x20025f18

000371f0 <pdn_interface_close>:
   371f0:	43f0e92d 	.word	0x43f0e92d
   371f4:	b0834b63 	.word	0xb0834b63
   371f8:	f0404383 	.word	0xf0404383
   371fc:	f020809d 	.word	0xf020809d
   37200:	f42444f1 	.word	0xf42444f1
   37204:	2c0914d0 	.word	0x2c0914d0
   37208:	8096f300 	.word	0x8096f300
   3720c:	f8554d5e 	.word	0xf8554d5e
   37210:	28000024 	.word	0x28000024
   37214:	8090f000 	.word	0x8090f000
   37218:	2b006883 	.word	0x2b006883
   3721c:	808cf000 	.word	0x808cf000
   37220:	2b036883 	.word	0x2b036883
   37224:	f7fed008 	.word	0xf7fed008
   37228:	2300fd1f 	.word	0x2300fd1f
   3722c:	f8454618 	.word	0xf8454618
   37230:	b0033024 	.word	0xb0033024
   37234:	83f0e8bd 	.word	0x83f0e8bd
   37238:	4a554e54 	.word	0x4a554e54
   3723c:	7180f44f 	.word	0x7180f44f
   37240:	f0054630 	.word	0xf0054630
   37244:	f855fbad 	.word	0xf855fbad
   37248:	f5c03024 	.word	0xf5c03024
   3724c:	681b7180 	.word	0x681b7180
   37250:	44304a50 	.word	0x44304a50
   37254:	814cf8df 	.word	0x814cf8df
   37258:	fba2f005 	.word	0xfba2f005
   3725c:	f8d84630 	.word	0xf8d84630
   37260:	27009000 	.word	0x27009000
   37264:	fe8ef7e2 	.word	0xfe8ef7e2
   37268:	46024631 	.word	0x46024631
   3726c:	4648463b 	.word	0x4648463b
   37270:	97009701 	.word	0x97009701
   37274:	fc6cf7f2 	.word	0xfc6cf7f2
   37278:	46304681 	.word	0x46304681
   3727c:	fe82f7e2 	.word	0xfe82f7e2
   37280:	d1764548 	.word	0xd1764548
   37284:	e9cd463b 	.word	0xe9cd463b
   37288:	f44f7700 	.word	0xf44f7700
   3728c:	46317280 	.word	0x46317280
   37290:	0000f8d8 	.word	0x0000f8d8
   37294:	fd44f7f2 	.word	0xfd44f7f2
   37298:	483f4607 	.word	0x483f4607
   3729c:	fe72f7e2 	.word	0xfe72f7e2
   372a0:	da4f4287 	.word	0xda4f4287
   372a4:	f7e2483d 	.word	0xf7e2483d
   372a8:	4938fe6d 	.word	0x4938fe6d
   372ac:	483b4602 	.word	0x483b4602
   372b0:	ff33f009 	.word	0xff33f009
   372b4:	d15c2800 	.word	0xd15c2800
   372b8:	f7eb2008 	.word	0xf7eb2008
   372bc:	4a38fb27 	.word	0x4a38fb27
   372c0:	7180f44f 	.word	0x7180f44f
   372c4:	f0054831 	.word	0xf0054831
   372c8:	4601fb6b 	.word	0x4601fb6b
   372cc:	3024f855 	.word	0x3024f855
   372d0:	7180f5c1 	.word	0x7180f5c1
   372d4:	4a2f681b 	.word	0x4a2f681b
   372d8:	f0051830 	.word	0xf0051830
   372dc:	482bfb61 	.word	0x482bfb61
   372e0:	7000f8d8 	.word	0x7000f8d8
   372e4:	f7e22600 	.word	0xf7e22600
   372e8:	4633fe4d 	.word	0x4633fe4d
   372ec:	49274602 	.word	0x49274602
   372f0:	96014638 	.word	0x96014638
   372f4:	f7f29600 	.word	0xf7f29600
   372f8:	4607fc2b 	.word	0x4607fc2b
   372fc:	f7e24823 	.word	0xf7e24823
   37300:	42b8fe41 	.word	0x42b8fe41
   37304:	4633d139 	.word	0x4633d139
   37308:	6600e9cd 	.word	0x6600e9cd
   3730c:	7280f44f 	.word	0x7280f44f
   37310:	f8d8491e 	.word	0xf8d8491e
   37314:	f7f20000 	.word	0xf7f20000
   37318:	4606fd03 	.word	0x4606fd03
   3731c:	f7e2481e 	.word	0xf7e2481e
   37320:	4286fe31 	.word	0x4286fe31
   37324:	4602db16 	.word	0x4602db16
   37328:	481b4918 	.word	0x481b4918
   3732c:	fef5f009 	.word	0xfef5f009
   37330:	f855b980 	.word	0xf855b980
   37334:	e7760024 	.word	0xe7760024
   37338:	f7eb2009 	.word	0xf7eb2009
   3733c:	f04ffae7 	.word	0xf04ffae7
   37340:	e77630ff 	.word	0xe77630ff
   37344:	46314602 	.word	0x46314602
   37348:	f0094813 	.word	0xf0094813
   3734c:	2800fee6 	.word	0x2800fee6
   37350:	e7a7d0b5 	.word	0xe7a7d0b5
   37354:	f7e24811 	.word	0xf7e24811
   37358:	490cfe15 	.word	0x490cfe15
   3735c:	480f4602 	.word	0x480f4602
   37360:	fedbf009 	.word	0xfedbf009
   37364:	2008b948 	.word	0x2008b948
   37368:	fad0f7eb 	.word	0xfad0f7eb
   3736c:	0024f855 	.word	0x0024f855
   37370:	2005e759 	.word	0x2005e759
   37374:	facaf7eb 	.word	0xfacaf7eb
   37378:	2005e7a1 	.word	0x2005e7a1
   3737c:	fac6f7eb 	.word	0xfac6f7eb
   37380:	bf00e7d7 	.word	0xbf00e7d7
   37384:	789a0000 	.word	0x789a0000
   37388:	2002601c 	.word	0x2002601c
   3738c:	20025f1c 	.word	0x20025f1c
   37390:	00043dc8 	.word	0x00043dc8
   37394:	00043e0c 	.word	0x00043e0c
   37398:	00042df4 	.word	0x00042df4
   3739c:	00043e64 	.word	0x00043e64
   373a0:	00043dd4 	.word	0x00043dd4
   373a4:	20025f18 	.word	0x20025f18

000373a8 <pdn_interface_setopt>:
   373a8:	f240b510 	.word	0xf240b510
   373ac:	42a12402 	.word	0x42a12402
   373b0:	b153d10b 	.word	0xb153d10b
   373b4:	b1419902 	.word	0xb1419902
   373b8:	43814925 	.word	0x43814925
   373bc:	2009d00b 	.word	0x2009d00b
   373c0:	faa4f7eb 	.word	0xfaa4f7eb
   373c4:	30fff04f 	.word	0x30fff04f
   373c8:	2016bd10 	.word	0x2016bd10
   373cc:	fa9ef7eb 	.word	0xfa9ef7eb
   373d0:	30fff04f 	.word	0x30fff04f
   373d4:	f020bd10 	.word	0xf020bd10
   373d8:	f42040f1 	.word	0xf42040f1
   373dc:	280910d0 	.word	0x280910d0
   373e0:	491cdced 	.word	0x491cdced
   373e4:	1020f851 	.word	0x1020f851
   373e8:	d0e82900 	.word	0xd0e82900
   373ec:	2c00688c 	.word	0x2c00688c
   373f0:	2800d0e5 	.word	0x2800d0e5
   373f4:	2a01dbe3 	.word	0x2a01dbe3
   373f8:	202dd001 	.word	0x202dd001
   373fc:	688ae7e6 	.word	0x688ae7e6
   37400:	688ab1fa 	.word	0x688ab1fa
   37404:	d01c2a03 	.word	0xd01c2a03
   37408:	2a04688a 	.word	0x2a04688a
   3740c:	9a02d019 	.word	0x9a02d019
   37410:	1e420890 	.word	0x1e420890
   37414:	d8d82a01 	.word	0xd8d82a01
   37418:	07929a02 	.word	0x07929a02
   3741c:	681ad1d5 	.word	0x681ad1d5
   37420:	d0102a02 	.word	0xd0102a02
   37424:	d1d02a0a 	.word	0xd1d02a0a
   37428:	28022202 	.word	0x28022202
   3742c:	685bd106 	.word	0x685bd106
   37430:	d00a2b02 	.word	0xd00a2b02
   37434:	d1c82b0a 	.word	0xd1c82b0a
   37438:	0202f042 	.word	0x0202f042
   3743c:	2000670a 	.word	0x2000670a
   37440:	200ee7c4 	.word	0x200ee7c4
   37444:	2201e7c2 	.word	0x2201e7c2
   37448:	f042e7ef 	.word	0xf042e7ef
   3744c:	e7f50201 	.word	0xe7f50201
   37450:	789a0000 	.word	0x789a0000
   37454:	2002601c 	.word	0x2002601c

00037458 <pdn_interface_getopt>:
   37458:	43f0e92d 	.word	0x43f0e92d
   3745c:	2402f240 	.word	0x2402f240
   37460:	42a1b083 	.word	0x42a1b083
   37464:	f0409d0a 	.word	0xf0409d0a
   37468:	461e80a9 	.word	0x461e80a9
   3746c:	f0002b00 	.word	0xf0002b00
   37470:	2d0080a5 	.word	0x2d0080a5
   37474:	80a2f000 	.word	0x80a2f000
   37478:	43834b56 	.word	0x43834b56
   3747c:	8084f040 	.word	0x8084f040
   37480:	44f1f020 	.word	0x44f1f020
   37484:	14d0f424 	.word	0x14d0f424
   37488:	dc7d2c09 	.word	0xdc7d2c09
   3748c:	f8534b52 	.word	0xf8534b52
   37490:	2b003024 	.word	0x2b003024
   37494:	6899d078 	.word	0x6899d078
   37498:	d0752900 	.word	0xd0752900
   3749c:	db732c00 	.word	0xdb732c00
   374a0:	d00e2a02 	.word	0xd00e2a02
   374a4:	d0082a03 	.word	0xd0082a03
   374a8:	d0152a01 	.word	0xd0152a01
   374ac:	f7eb202d 	.word	0xf7eb202d
   374b0:	2000fa2d 	.word	0x2000fa2d
   374b4:	e8bdb003 	.word	0xe8bdb003
   374b8:	682b83f0 	.word	0x682b83f0
   374bc:	2016bb23 	.word	0x2016bb23
   374c0:	682ae7f5 	.word	0x682ae7f5
   374c4:	d0fa2a00 	.word	0xd0fa2a00
   374c8:	20002201 	.word	0x20002201
   374cc:	7033681b 	.word	0x7033681b
   374d0:	b003602a 	.word	0xb003602a
   374d4:	83f0e8bd 	.word	0x83f0e8bd
   374d8:	2a00689a 	.word	0x2a00689a
   374dc:	689ad052 	.word	0x689ad052
   374e0:	d04f2a04 	.word	0xd04f2a04
   374e4:	2a07682a 	.word	0x2a07682a
   374e8:	f012d9e9 	.word	0xf012d9e9
   374ec:	d1e60203 	.word	0xd1e60203
   374f0:	07996f1b 	.word	0x07996f1b
   374f4:	2104d45d 	.word	0x2104d45d
   374f8:	d50207db 	.word	0xd50207db
   374fc:	50b32302 	.word	0x50b32302
   37500:	602a460a 	.word	0x602a460a
   37504:	e7d52000 	.word	0xe7d52000
   37508:	f44f4a34 	.word	0xf44f4a34
   3750c:	48347180 	.word	0x48347180
   37510:	80d8f8df 	.word	0x80d8f8df
   37514:	fa44f005 	.word	0xfa44f005
   37518:	f8d84831 	.word	0xf8d84831
   3751c:	27009000 	.word	0x27009000
   37520:	fd30f7e2 	.word	0xfd30f7e2
   37524:	4602463b 	.word	0x4602463b
   37528:	4648492d 	.word	0x4648492d
   3752c:	97009701 	.word	0x97009701
   37530:	fb0ef7f2 	.word	0xfb0ef7f2
   37534:	482a4681 	.word	0x482a4681
   37538:	fd24f7e2 	.word	0xfd24f7e2
   3753c:	d1434548 	.word	0xd1434548
   37540:	e9cd463b 	.word	0xe9cd463b
   37544:	f44f7700 	.word	0xf44f7700
   37548:	49257280 	.word	0x49257280
   3754c:	0000f8d8 	.word	0x0000f8d8
   37550:	fbe6f7f2 	.word	0xfbe6f7f2
   37554:	48234607 	.word	0x48234607
   37558:	fd14f7e2 	.word	0xfd14f7e2
   3755c:	db194287 	.word	0xdb194287
   37560:	491f4602 	.word	0x491f4602
   37564:	f009481f 	.word	0xf009481f
   37568:	4607fdd8 	.word	0x4607fdd8
   3756c:	4620b990 	.word	0x4620b990
   37570:	f7ff491b 	.word	0xf7ff491b
   37574:	2800fb35 	.word	0x2800fb35
   37578:	2301db99 	.word	0x2301db99
   3757c:	46387030 	.word	0x46387030
   37580:	e797602b 	.word	0xe797602b
   37584:	e792200e 	.word	0xe792200e
   37588:	f7eb2009 	.word	0xf7eb2009
   3758c:	f04ff9bf 	.word	0xf04ff9bf
   37590:	e78f30ff 	.word	0xe78f30ff
   37594:	f7e24814 	.word	0xf7e24814
   37598:	4911fcf5 	.word	0x4911fcf5
   3759c:	48124602 	.word	0x48124602
   375a0:	fdbbf009 	.word	0xfdbbf009
   375a4:	2008b980 	.word	0x2008b980
   375a8:	f9b0f7eb 	.word	0xf9b0f7eb
   375ac:	30fff04f 	.word	0x30fff04f
   375b0:	220ae77d 	.word	0x220ae77d
   375b4:	60322108 	.word	0x60322108
   375b8:	e79d2204 	.word	0xe79d2204
   375bc:	f7eb2016 	.word	0xf7eb2016
   375c0:	f04ff9a5 	.word	0xf04ff9a5
   375c4:	e77530ff 	.word	0xe77530ff
   375c8:	f7eb2005 	.word	0xf7eb2005
   375cc:	f04ff99f 	.word	0xf04ff99f
   375d0:	e76c30ff 	.word	0xe76c30ff
   375d4:	789a0000 	.word	0x789a0000
   375d8:	2002601c 	.word	0x2002601c
   375dc:	00043e34 	.word	0x00043e34
   375e0:	20025f1c 	.word	0x20025f1c
   375e4:	00043e40 	.word	0x00043e40
   375e8:	00043e64 	.word	0x00043e64
   375ec:	20025f18 	.word	0x20025f18

000375f0 <pdn_interface_pdn_id_get>:
   375f0:	f0002900 	.word	0xf0002900
   375f4:	e92d83b9 	.word	0xe92d83b9
   375f8:	4ca343f0 	.word	0x4ca343f0
   375fc:	b0832802 	.word	0xb0832802
   37600:	6823460d 	.word	0x6823460d
   37604:	8094f000 	.word	0x8094f000
   37608:	d03f280a 	.word	0xd03f280a
   3760c:	689bb11b 	.word	0x689bb11b
   37610:	f0002b03 	.word	0xf0002b03
   37614:	68638127 	.word	0x68638127
   37618:	689bb11b 	.word	0x689bb11b
   3761c:	f0002b03 	.word	0xf0002b03
   37620:	68a38110 	.word	0x68a38110
   37624:	689bb11b 	.word	0x689bb11b
   37628:	f0002b03 	.word	0xf0002b03
   3762c:	68e380f9 	.word	0x68e380f9
   37630:	689bb11b 	.word	0x689bb11b
   37634:	f0002b03 	.word	0xf0002b03
   37638:	692380e2 	.word	0x692380e2
   3763c:	689bb11b 	.word	0x689bb11b
   37640:	f0002b03 	.word	0xf0002b03
   37644:	69638123 	.word	0x69638123
   37648:	689bb11b 	.word	0x689bb11b
   3764c:	f0002b03 	.word	0xf0002b03
   37650:	69a38161 	.word	0x69a38161
   37654:	689bb11b 	.word	0x689bb11b
   37658:	f0002b03 	.word	0xf0002b03
   3765c:	69e3814a 	.word	0x69e3814a
   37660:	689bb11b 	.word	0x689bb11b
   37664:	f0002b03 	.word	0xf0002b03
   37668:	6a238133 	.word	0x6a238133
   3766c:	689bb11b 	.word	0x689bb11b
   37670:	f0002b03 	.word	0xf0002b03
   37674:	6a63811c 	.word	0x6a63811c
   37678:	689bb11b 	.word	0x689bb11b
   3767c:	f0002b03 	.word	0xf0002b03
   37680:	f04f80ad 	.word	0xf04f80ad
   37684:	b00330ff 	.word	0xb00330ff
   37688:	83f0e8bd 	.word	0x83f0e8bd
   3768c:	689bb11b 	.word	0x689bb11b
   37690:	f0002b03 	.word	0xf0002b03
   37694:	68638335 	.word	0x68638335
   37698:	689bb11b 	.word	0x689bb11b
   3769c:	f0002b03 	.word	0xf0002b03
   376a0:	68a382fd 	.word	0x68a382fd
   376a4:	689bb11b 	.word	0x689bb11b
   376a8:	f0002b03 	.word	0xf0002b03
   376ac:	68e382d5 	.word	0x68e382d5
   376b0:	689eb11b 	.word	0x689eb11b
   376b4:	f0002e03 	.word	0xf0002e03
   376b8:	692381f0 	.word	0x692381f0
   376bc:	689bb11b 	.word	0x689bb11b
   376c0:	f0002b03 	.word	0xf0002b03
   376c4:	69638203 	.word	0x69638203
   376c8:	689bb11b 	.word	0x689bb11b
   376cc:	f0002b03 	.word	0xf0002b03
   376d0:	69a38215 	.word	0x69a38215
   376d4:	689bb11b 	.word	0x689bb11b
   376d8:	f0002b03 	.word	0xf0002b03
   376dc:	69e38227 	.word	0x69e38227
   376e0:	689bb11b 	.word	0x689bb11b
   376e4:	f0002b03 	.word	0xf0002b03
   376e8:	6a238239 	.word	0x6a238239
   376ec:	689bb11b 	.word	0x689bb11b
   376f0:	f0002b03 	.word	0xf0002b03
   376f4:	6a63824d 	.word	0x6a63824d
   376f8:	d0c22b00 	.word	0xd0c22b00
   376fc:	2b03689b 	.word	0x2b03689b
   37700:	4628d1bf 	.word	0x4628d1bf
   37704:	fc3ef7e2 	.word	0xfc3ef7e2
   37708:	6a604606 	.word	0x6a604606
   3770c:	f7e2300c 	.word	0xf7e2300c
   37710:	42b0fc39 	.word	0x42b0fc39
   37714:	6a61d1b5 	.word	0x6a61d1b5
   37718:	310c4628 	.word	0x310c4628
   3771c:	fc28f7e2 	.word	0xfc28f7e2
   37720:	d1ae2800 	.word	0xd1ae2800
   37724:	6f1a6a63 	.word	0x6f1a6a63
   37728:	d5aa0792 	.word	0xd5aa0792
   3772c:	e11a2609 	.word	0xe11a2609
   37730:	689bb11b 	.word	0x689bb11b
   37734:	f0002b03 	.word	0xf0002b03
   37738:	686382fd 	.word	0x686382fd
   3773c:	689bb11b 	.word	0x689bb11b
   37740:	f0002b03 	.word	0xf0002b03
   37744:	68a382c5 	.word	0x68a382c5
   37748:	689bb11b 	.word	0x689bb11b
   3774c:	f0002b03 	.word	0xf0002b03
   37750:	68e38269 	.word	0x68e38269
   37754:	689eb11b 	.word	0x689eb11b
   37758:	f0002e03 	.word	0xf0002e03
   3775c:	692380ec 	.word	0x692380ec
   37760:	689bb11b 	.word	0x689bb11b
   37764:	f0002b03 	.word	0xf0002b03
   37768:	6963814a 	.word	0x6963814a
   3776c:	689bb11b 	.word	0x689bb11b
   37770:	f0002b03 	.word	0xf0002b03
   37774:	69a3815e 	.word	0x69a3815e
   37778:	689bb11b 	.word	0x689bb11b
   3777c:	f0002b03 	.word	0xf0002b03
   37780:	69e38172 	.word	0x69e38172
   37784:	689bb11b 	.word	0x689bb11b
   37788:	f0002b03 	.word	0xf0002b03
   3778c:	6a23821b 	.word	0x6a23821b
   37790:	689bb11b 	.word	0x689bb11b
   37794:	f0002b03 	.word	0xf0002b03
   37798:	6a63822d 	.word	0x6a63822d
   3779c:	f43f2b00 	.word	0xf43f2b00
   377a0:	689baf70 	.word	0x689baf70
   377a4:	f47f2b03 	.word	0xf47f2b03
   377a8:	4628af6c 	.word	0x4628af6c
   377ac:	fbeaf7e2 	.word	0xfbeaf7e2
   377b0:	6a604606 	.word	0x6a604606
   377b4:	f7e2300c 	.word	0xf7e2300c
   377b8:	4286fbe5 	.word	0x4286fbe5
   377bc:	af61f47f 	.word	0xaf61f47f
   377c0:	46286a61 	.word	0x46286a61
   377c4:	f7e2310c 	.word	0xf7e2310c
   377c8:	2800fbd3 	.word	0x2800fbd3
   377cc:	af59f47f 	.word	0xaf59f47f
   377d0:	6f1a6a63 	.word	0x6f1a6a63
   377d4:	f57f07d2 	.word	0xf57f07d2
   377d8:	e7a7af54 	.word	0xe7a7af54
   377dc:	f7e24628 	.word	0xf7e24628
   377e0:	4606fbd1 	.word	0x4606fbd1
   377e4:	300c6a60 	.word	0x300c6a60
   377e8:	fbccf7e2 	.word	0xfbccf7e2
   377ec:	f47f42b0 	.word	0xf47f42b0
   377f0:	6a61af48 	.word	0x6a61af48
   377f4:	310c4628 	.word	0x310c4628
   377f8:	fbbaf7e2 	.word	0xfbbaf7e2
   377fc:	4628e741 	.word	0x4628e741
   37800:	fbc0f7e2 	.word	0xfbc0f7e2
   37804:	68e04606 	.word	0x68e04606
   37808:	f7e2300c 	.word	0xf7e2300c
   3780c:	4286fbbb 	.word	0x4286fbbb
   37810:	af13f47f 	.word	0xaf13f47f
   37814:	462868e1 	.word	0x462868e1
   37818:	f7e2310c 	.word	0xf7e2310c
   3781c:	e70cfba9 	.word	0xe70cfba9
   37820:	f7e24628 	.word	0xf7e24628
   37824:	4606fbaf 	.word	0x4606fbaf
   37828:	300c68a0 	.word	0x300c68a0
   3782c:	fbaaf7e2 	.word	0xfbaaf7e2
   37830:	f47f4286 	.word	0xf47f4286
   37834:	68a1aefc 	.word	0x68a1aefc
   37838:	310c4628 	.word	0x310c4628
   3783c:	fb98f7e2 	.word	0xfb98f7e2
   37840:	4628e6f5 	.word	0x4628e6f5
   37844:	fb9ef7e2 	.word	0xfb9ef7e2
   37848:	68604606 	.word	0x68604606
   3784c:	f7e2300c 	.word	0xf7e2300c
   37850:	4286fb99 	.word	0x4286fb99
   37854:	aee5f47f 	.word	0xaee5f47f
   37858:	46286861 	.word	0x46286861
   3785c:	f7e2310c 	.word	0xf7e2310c
   37860:	e6defb87 	.word	0xe6defb87
   37864:	f7e24608 	.word	0xf7e24608
   37868:	4606fb8d 	.word	0x4606fb8d
   3786c:	300c6820 	.word	0x300c6820
   37870:	fb88f7e2 	.word	0xfb88f7e2
   37874:	f47f4286 	.word	0xf47f4286
   37878:	6821aece 	.word	0x6821aece
   3787c:	310c4628 	.word	0x310c4628
   37880:	fb76f7e2 	.word	0xfb76f7e2
   37884:	bf00e6c7 	.word	0xbf00e6c7
   37888:	2002601c 	.word	0x2002601c
   3788c:	f7e24628 	.word	0xf7e24628
   37890:	4606fb79 	.word	0x4606fb79
   37894:	300c6920 	.word	0x300c6920
   37898:	fb74f7e2 	.word	0xfb74f7e2
   3789c:	f47f4286 	.word	0xf47f4286
   378a0:	6921aed2 	.word	0x6921aed2
   378a4:	310c4628 	.word	0x310c4628
   378a8:	fb62f7e2 	.word	0xfb62f7e2
   378ac:	4628e6cb 	.word	0x4628e6cb
   378b0:	fb68f7e2 	.word	0xfb68f7e2
   378b4:	6a204606 	.word	0x6a204606
   378b8:	f7e2300c 	.word	0xf7e2300c
   378bc:	4286fb63 	.word	0x4286fb63
   378c0:	aed9f47f 	.word	0xaed9f47f
   378c4:	46286a21 	.word	0x46286a21
   378c8:	f7e2310c 	.word	0xf7e2310c
   378cc:	e6d2fb51 	.word	0xe6d2fb51
   378d0:	f7e24628 	.word	0xf7e24628
   378d4:	4606fb57 	.word	0x4606fb57
   378d8:	300c69e0 	.word	0x300c69e0
   378dc:	fb52f7e2 	.word	0xfb52f7e2
   378e0:	f47f4286 	.word	0xf47f4286
   378e4:	69e1aec2 	.word	0x69e1aec2
   378e8:	310c4628 	.word	0x310c4628
   378ec:	fb40f7e2 	.word	0xfb40f7e2
   378f0:	4628e6bb 	.word	0x4628e6bb
   378f4:	fb46f7e2 	.word	0xfb46f7e2
   378f8:	69a04606 	.word	0x69a04606
   378fc:	f7e2300c 	.word	0xf7e2300c
   37900:	4286fb41 	.word	0x4286fb41
   37904:	aeabf47f 	.word	0xaeabf47f
   37908:	462869a1 	.word	0x462869a1
   3790c:	f7e2310c 	.word	0xf7e2310c
   37910:	e6a4fb2f 	.word	0xe6a4fb2f
   37914:	f7e24628 	.word	0xf7e24628
   37918:	4606fb35 	.word	0x4606fb35
   3791c:	300c6960 	.word	0x300c6960
   37920:	fb30f7e2 	.word	0xfb30f7e2
   37924:	f47f4286 	.word	0xf47f4286
   37928:	6961ae94 	.word	0x6961ae94
   3792c:	310c4628 	.word	0x310c4628
   37930:	fb1ef7e2 	.word	0xfb1ef7e2
   37934:	4628e68d 	.word	0x4628e68d
   37938:	fb24f7e2 	.word	0xfb24f7e2
   3793c:	68e04607 	.word	0x68e04607
   37940:	f7e2300c 	.word	0xf7e2300c
   37944:	4287fb1f 	.word	0x4287fb1f
   37948:	af09f47f 	.word	0xaf09f47f
   3794c:	462868e1 	.word	0x462868e1
   37950:	f7e2310c 	.word	0xf7e2310c
   37954:	2800fb0d 	.word	0x2800fb0d
   37958:	af01f47f 	.word	0xaf01f47f
   3795c:	6f1a68e3 	.word	0x6f1a68e3
   37960:	f57f07d1 	.word	0xf57f07d1
   37964:	6858aefc 	.word	0x6858aefc
   37968:	f47f1c43 	.word	0xf47f1c43
   3796c:	4dc6ae8c 	.word	0x4dc6ae8c
   37970:	f44f4ac6 	.word	0xf44f4ac6
   37974:	46287180 	.word	0x46287180
   37978:	f812f005 	.word	0xf812f005
   3797c:	3026f854 	.word	0x3026f854
   37980:	7180f5c0 	.word	0x7180f5c0
   37984:	4ac2681b 	.word	0x4ac2681b
   37988:	f8df4428 	.word	0xf8df4428
   3798c:	f005830c 	.word	0xf005830c
   37990:	4628f807 	.word	0x4628f807
   37994:	9000f8d8 	.word	0x9000f8d8
   37998:	f7e22700 	.word	0xf7e22700
   3799c:	4629faf3 	.word	0x4629faf3
   379a0:	463b4602 	.word	0x463b4602
   379a4:	97014648 	.word	0x97014648
   379a8:	f7f29700 	.word	0xf7f29700
   379ac:	4681f8d1 	.word	0x4681f8d1
   379b0:	f7e24628 	.word	0xf7e24628
   379b4:	4548fae7 	.word	0x4548fae7
   379b8:	81e9f040 	.word	0x81e9f040
   379bc:	f44f463b 	.word	0xf44f463b
   379c0:	e9cd7280 	.word	0xe9cd7280
   379c4:	46297700 	.word	0x46297700
   379c8:	0000f8d8 	.word	0x0000f8d8
   379cc:	f9a8f7f2 	.word	0xf9a8f7f2
   379d0:	48b04607 	.word	0x48b04607
   379d4:	fad6f7e2 	.word	0xfad6f7e2
   379d8:	46024287 	.word	0x46024287
   379dc:	81c7f2c0 	.word	0x81c7f2c0
   379e0:	48ac4629 	.word	0x48ac4629
   379e4:	fb99f009 	.word	0xfb99f009
   379e8:	f0402800 	.word	0xf0402800
   379ec:	462981c0 	.word	0x462981c0
   379f0:	f7ff4630 	.word	0xf7ff4630
   379f4:	f854f92b 	.word	0xf854f92b
   379f8:	68583026 	.word	0x68583026
   379fc:	4628e643 	.word	0x4628e643
   37a00:	fac0f7e2 	.word	0xfac0f7e2
   37a04:	69204606 	.word	0x69204606
   37a08:	f7e2300c 	.word	0xf7e2300c
   37a0c:	4286fabb 	.word	0x4286fabb
   37a10:	aeabf47f 	.word	0xaeabf47f
   37a14:	46286921 	.word	0x46286921
   37a18:	f7e2310c 	.word	0xf7e2310c
   37a1c:	2800faa9 	.word	0x2800faa9
   37a20:	aea3f47f 	.word	0xaea3f47f
   37a24:	6f1a6923 	.word	0x6f1a6923
   37a28:	f57f07d2 	.word	0xf57f07d2
   37a2c:	2604ae9e 	.word	0x2604ae9e
   37a30:	4628e799 	.word	0x4628e799
   37a34:	faa6f7e2 	.word	0xfaa6f7e2
   37a38:	69604606 	.word	0x69604606
   37a3c:	f7e2300c 	.word	0xf7e2300c
   37a40:	4286faa1 	.word	0x4286faa1
   37a44:	ae97f47f 	.word	0xae97f47f
   37a48:	46286961 	.word	0x46286961
   37a4c:	f7e2310c 	.word	0xf7e2310c
   37a50:	2800fa8f 	.word	0x2800fa8f
   37a54:	ae8ff47f 	.word	0xae8ff47f
   37a58:	6f1a6963 	.word	0x6f1a6963
   37a5c:	f57f07d7 	.word	0xf57f07d7
   37a60:	2605ae8a 	.word	0x2605ae8a
   37a64:	4628e77f 	.word	0x4628e77f
   37a68:	fa8cf7e2 	.word	0xfa8cf7e2
   37a6c:	69a04606 	.word	0x69a04606
   37a70:	f7e2300c 	.word	0xf7e2300c
   37a74:	4286fa87 	.word	0x4286fa87
   37a78:	ae83f47f 	.word	0xae83f47f
   37a7c:	462869a1 	.word	0x462869a1
   37a80:	f7e2310c 	.word	0xf7e2310c
   37a84:	2800fa75 	.word	0x2800fa75
   37a88:	ae7bf47f 	.word	0xae7bf47f
   37a8c:	6f1a69a3 	.word	0x6f1a69a3
   37a90:	f57f07d6 	.word	0xf57f07d6
   37a94:	2606ae76 	.word	0x2606ae76
   37a98:	4628e765 	.word	0x4628e765
   37a9c:	fa72f7e2 	.word	0xfa72f7e2
   37aa0:	68e04607 	.word	0x68e04607
   37aa4:	f7e2300c 	.word	0xf7e2300c
   37aa8:	4287fa6d 	.word	0x4287fa6d
   37aac:	ae05f47f 	.word	0xae05f47f
   37ab0:	462868e1 	.word	0x462868e1
   37ab4:	f7e2310c 	.word	0xf7e2310c
   37ab8:	2800fa5b 	.word	0x2800fa5b
   37abc:	adfdf47f 	.word	0xadfdf47f
   37ac0:	6f1a68e3 	.word	0x6f1a68e3
   37ac4:	f53f0791 	.word	0xf53f0791
   37ac8:	e5f6af4e 	.word	0xe5f6af4e
   37acc:	f7e24628 	.word	0xf7e24628
   37ad0:	4606fa59 	.word	0x4606fa59
   37ad4:	300c6920 	.word	0x300c6920
   37ad8:	fa54f7e2 	.word	0xfa54f7e2
   37adc:	f47f4286 	.word	0xf47f4286
   37ae0:	6921adf2 	.word	0x6921adf2
   37ae4:	310c4628 	.word	0x310c4628
   37ae8:	fa42f7e2 	.word	0xfa42f7e2
   37aec:	f47f2800 	.word	0xf47f2800
   37af0:	6923adea 	.word	0x6923adea
   37af4:	07926f1a 	.word	0x07926f1a
   37af8:	e5e4d499 	.word	0xe5e4d499
   37afc:	f7e24628 	.word	0xf7e24628
   37b00:	4606fa41 	.word	0x4606fa41
   37b04:	300c6960 	.word	0x300c6960
   37b08:	fa3cf7e2 	.word	0xfa3cf7e2
   37b0c:	f47f4286 	.word	0xf47f4286
   37b10:	6961ade0 	.word	0x6961ade0
   37b14:	310c4628 	.word	0x310c4628
   37b18:	fa2af7e2 	.word	0xfa2af7e2
   37b1c:	f47f2800 	.word	0xf47f2800
   37b20:	6963add8 	.word	0x6963add8
   37b24:	07976f1a 	.word	0x07976f1a
   37b28:	e5d2d49b 	.word	0xe5d2d49b
   37b2c:	f7e24628 	.word	0xf7e24628
   37b30:	4606fa29 	.word	0x4606fa29
   37b34:	300c69a0 	.word	0x300c69a0
   37b38:	fa24f7e2 	.word	0xfa24f7e2
   37b3c:	f47f4286 	.word	0xf47f4286
   37b40:	69a1adce 	.word	0x69a1adce
   37b44:	310c4628 	.word	0x310c4628
   37b48:	fa12f7e2 	.word	0xfa12f7e2
   37b4c:	f47f2800 	.word	0xf47f2800
   37b50:	69a3adc6 	.word	0x69a3adc6
   37b54:	07966f1a 	.word	0x07966f1a
   37b58:	e5c0d49d 	.word	0xe5c0d49d
   37b5c:	f7e24628 	.word	0xf7e24628
   37b60:	4606fa11 	.word	0x4606fa11
   37b64:	300c69e0 	.word	0x300c69e0
   37b68:	fa0cf7e2 	.word	0xfa0cf7e2
   37b6c:	f47f4286 	.word	0xf47f4286
   37b70:	69e1adbc 	.word	0x69e1adbc
   37b74:	310c4628 	.word	0x310c4628
   37b78:	f9faf7e2 	.word	0xf9faf7e2
   37b7c:	f47f2800 	.word	0xf47f2800
   37b80:	69e3adb4 	.word	0x69e3adb4
   37b84:	07906f1a 	.word	0x07906f1a
   37b88:	adaff57f 	.word	0xadaff57f
   37b8c:	e6ea2607 	.word	0xe6ea2607
   37b90:	f7e24628 	.word	0xf7e24628
   37b94:	4606f9f7 	.word	0x4606f9f7
   37b98:	300c6a20 	.word	0x300c6a20
   37b9c:	f9f2f7e2 	.word	0xf9f2f7e2
   37ba0:	f47f4286 	.word	0xf47f4286
   37ba4:	6a21ada8 	.word	0x6a21ada8
   37ba8:	310c4628 	.word	0x310c4628
   37bac:	f9e0f7e2 	.word	0xf9e0f7e2
   37bb0:	f47f2800 	.word	0xf47f2800
   37bb4:	6a23ada0 	.word	0x6a23ada0
   37bb8:	07916f1a 	.word	0x07916f1a
   37bbc:	ad9bf57f 	.word	0xad9bf57f
   37bc0:	e6d02608 	.word	0xe6d02608
   37bc4:	f7e24628 	.word	0xf7e24628
   37bc8:	4606f9dd 	.word	0x4606f9dd
   37bcc:	300c69e0 	.word	0x300c69e0
   37bd0:	f9d8f7e2 	.word	0xf9d8f7e2
   37bd4:	f47f4286 	.word	0xf47f4286
   37bd8:	69e1adda 	.word	0x69e1adda
   37bdc:	310c4628 	.word	0x310c4628
   37be0:	f9c6f7e2 	.word	0xf9c6f7e2
   37be4:	f47f2800 	.word	0xf47f2800
   37be8:	69e3add2 	.word	0x69e3add2
   37bec:	07d06f1a 	.word	0x07d06f1a
   37bf0:	e5ccd4cc 	.word	0xe5ccd4cc
   37bf4:	f7e24628 	.word	0xf7e24628
   37bf8:	4606f9c5 	.word	0x4606f9c5
   37bfc:	300c6a20 	.word	0x300c6a20
   37c00:	f9c0f7e2 	.word	0xf9c0f7e2
   37c04:	f47f4286 	.word	0xf47f4286
   37c08:	6a21adc8 	.word	0x6a21adc8
   37c0c:	310c4628 	.word	0x310c4628
   37c10:	f9aef7e2 	.word	0xf9aef7e2
   37c14:	f47f2800 	.word	0xf47f2800
   37c18:	6a23adc0 	.word	0x6a23adc0
   37c1c:	07d16f1a 	.word	0x07d16f1a
   37c20:	e5bad4ce 	.word	0xe5bad4ce
   37c24:	f7e24628 	.word	0xf7e24628
   37c28:	4606f9ad 	.word	0x4606f9ad
   37c2c:	300c68a0 	.word	0x300c68a0
   37c30:	f9a8f7e2 	.word	0xf9a8f7e2
   37c34:	f47f4286 	.word	0xf47f4286
   37c38:	68a1ad8c 	.word	0x68a1ad8c
   37c3c:	310c4628 	.word	0x310c4628
   37c40:	f996f7e2 	.word	0xf996f7e2
   37c44:	f47f2800 	.word	0xf47f2800
   37c48:	68a3ad84 	.word	0x68a3ad84
   37c4c:	07d06f1a 	.word	0x07d06f1a
   37c50:	ad7ff57f 	.word	0xad7ff57f
   37c54:	e6862602 	.word	0xe6862602
   37c58:	f7e24628 	.word	0xf7e24628
   37c5c:	4606f993 	.word	0x4606f993
   37c60:	300c68a0 	.word	0x300c68a0
   37c64:	f98ef7e2 	.word	0xf98ef7e2
   37c68:	f47f4286 	.word	0xf47f4286
   37c6c:	68a1ad20 	.word	0x68a1ad20
   37c70:	310c4628 	.word	0x310c4628
   37c74:	f97cf7e2 	.word	0xf97cf7e2
   37c78:	f47f2800 	.word	0xf47f2800
   37c7c:	68a3ad18 	.word	0x68a3ad18
   37c80:	07906f1a 	.word	0x07906f1a
   37c84:	e512d4e6 	.word	0xe512d4e6
   37c88:	20025f1c 	.word	0x20025f1c
   37c8c:	00043e10 	.word	0x00043e10
   37c90:	00043e0c 	.word	0x00043e0c
   37c94:	00043e20 	.word	0x00043e20
   37c98:	20025f18 	.word	0x20025f18
   37c9c:	f7e24628 	.word	0xf7e24628
   37ca0:	4606f971 	.word	0x4606f971
   37ca4:	300c6860 	.word	0x300c6860
   37ca8:	f96cf7e2 	.word	0xf96cf7e2
   37cac:	f47f4286 	.word	0xf47f4286
   37cb0:	6861acf8 	.word	0x6861acf8
   37cb4:	310c4628 	.word	0x310c4628
   37cb8:	f95af7e2 	.word	0xf95af7e2
   37cbc:	f47f2800 	.word	0xf47f2800
   37cc0:	6863acf0 	.word	0x6863acf0
   37cc4:	07966f1a 	.word	0x07966f1a
   37cc8:	acebf57f 	.word	0xacebf57f
   37ccc:	e64a2601 	.word	0xe64a2601
   37cd0:	f7e24628 	.word	0xf7e24628
   37cd4:	4606f957 	.word	0x4606f957
   37cd8:	300c6860 	.word	0x300c6860
   37cdc:	f952f7e2 	.word	0xf952f7e2
   37ce0:	f47f4286 	.word	0xf47f4286
   37ce4:	6861ad30 	.word	0x6861ad30
   37ce8:	310c4628 	.word	0x310c4628
   37cec:	f940f7e2 	.word	0xf940f7e2
   37cf0:	f47f2800 	.word	0xf47f2800
   37cf4:	6863ad28 	.word	0x6863ad28
   37cf8:	07d66f1a 	.word	0x07d66f1a
   37cfc:	e522d4e6 	.word	0xe522d4e6
   37d00:	f7e24608 	.word	0xf7e24608
   37d04:	4606f93f 	.word	0x4606f93f
   37d08:	300c6820 	.word	0x300c6820
   37d0c:	f93af7e2 	.word	0xf93af7e2
   37d10:	f47f4286 	.word	0xf47f4286
   37d14:	6821acc0 	.word	0x6821acc0
   37d18:	310c4628 	.word	0x310c4628
   37d1c:	f928f7e2 	.word	0xf928f7e2
   37d20:	28004606 	.word	0x28004606
   37d24:	acb7f47f 	.word	0xacb7f47f
   37d28:	6f1a6823 	.word	0x6f1a6823
   37d2c:	f53f0797 	.word	0xf53f0797
   37d30:	e4b0ae1a 	.word	0xe4b0ae1a
   37d34:	f7e24608 	.word	0xf7e24608
   37d38:	4606f925 	.word	0x4606f925
   37d3c:	300c6820 	.word	0x300c6820
   37d40:	f920f7e2 	.word	0xf920f7e2
   37d44:	f47f4286 	.word	0xf47f4286
   37d48:	6821acf8 	.word	0x6821acf8
   37d4c:	310c4628 	.word	0x310c4628
   37d50:	f90ef7e2 	.word	0xf90ef7e2
   37d54:	28004606 	.word	0x28004606
   37d58:	aceff47f 	.word	0xaceff47f
   37d5c:	6f1a6823 	.word	0x6f1a6823
   37d60:	f53f07d7 	.word	0xf53f07d7
   37d64:	e4e8ae00 	.word	0xe4e8ae00
   37d68:	30fff04f 	.word	0x30fff04f
   37d6c:	480b4770 	.word	0x480b4770
   37d70:	f908f7e2 	.word	0xf908f7e2
   37d74:	4602490a 	.word	0x4602490a
   37d78:	f0094808 	.word	0xf0094808
   37d7c:	b930f9ce 	.word	0xb930f9ce
   37d80:	f7ea2008 	.word	0xf7ea2008
   37d84:	f854fdc3 	.word	0xf854fdc3
   37d88:	68583026 	.word	0x68583026
   37d8c:	2005e47b 	.word	0x2005e47b
   37d90:	fdbcf7ea 	.word	0xfdbcf7ea
   37d94:	3026f854 	.word	0x3026f854
   37d98:	e4746858 	.word	0xe4746858
   37d9c:	00043e64 	.word	0x00043e64
   37da0:	20025f1c 	.word	0x20025f1c

00037da4 <bsd_platform_getaddrinfo>:
   37da4:	bdb0f7f7 	.word	0xbdb0f7f7

00037da8 <bsd_platform_freeaddrinfo>:
   37da8:	bea4f7f7 	.word	0xbea4f7f7

00037dac <bsd_platform_poll>:
   37dac:	43f0e92d 	.word	0x43f0e92d
   37db0:	72e2ea42 	.word	0x72e2ea42
   37db4:	9200b083 	.word	0x9200b083
   37db8:	d0482800 	.word	0xd0482800
   37dbc:	2b071e4b 	.word	0x2b071e4b
   37dc0:	4680d845 	.word	0x4680d845
   37dc4:	24004605 	.word	0x24004605
   37dc8:	07c1eb00 	.word	0x07c1eb00
   37dcc:	682888ab 	.word	0x682888ab
   37dd0:	0303f003 	.word	0x0303f003
   37dd4:	f043a901 	.word	0xf043a901
   37dd8:	f7f6061c 	.word	0xf7f6061c
   37ddc:	9b01fc9d 	.word	0x9b01fc9d
   37de0:	40333508 	.word	0x40333508
   37de4:	3c02f825 	.word	0x3c02f825
   37de8:	3401b103 	.word	0x3401b103
   37dec:	d1ed42af 	.word	0xd1ed42af
   37df0:	4669bb9c 	.word	0x4669bb9c
   37df4:	f7ea4640 	.word	0xf7ea4640
   37df8:	4607fcf5 	.word	0x4607fcf5
   37dfc:	283cb108 	.word	0x283cb108
   37e00:	46c1d11d 	.word	0x46c1d11d
   37e04:	f8b92600 	.word	0xf8b92600
   37e08:	f8d93004 	.word	0xf8d93004
   37e0c:	f0030000 	.word	0xf0030000
   37e10:	a9010303 	.word	0xa9010303
   37e14:	041cf043 	.word	0x041cf043
   37e18:	fc7ef7f6 	.word	0xfc7ef7f6
   37e1c:	f1099b01 	.word	0xf1099b01
   37e20:	40230908 	.word	0x40230908
   37e24:	3c02f829 	.word	0x3c02f829
   37e28:	3601b103 	.word	0x3601b103
   37e2c:	d1ea454d 	.word	0xd1ea454d
   37e30:	2f00b90e 	.word	0x2f00b90e
   37e34:	4630d0dd 	.word	0x4630d0dd
   37e38:	e8bdb003 	.word	0xe8bdb003
   37e3c:	202383f0 	.word	0x202383f0
   37e40:	fd64f7ea 	.word	0xfd64f7ea
   37e44:	30fff04f 	.word	0x30fff04f
   37e48:	e8bdb003 	.word	0xe8bdb003
   37e4c:	201683f0 	.word	0x201683f0
   37e50:	fd5cf7ea 	.word	0xfd5cf7ea
   37e54:	30fff04f 	.word	0x30fff04f
   37e58:	4620e7ee 	.word	0x4620e7ee
   37e5c:	bf00e7ec 	.word	0xbf00e7ec

00037e60 <bsd_platform_fcntl>:
   37e60:	4b06b508 	.word	0x4b06b508
   37e64:	d0034383 	.word	0xd0034383
   37e68:	4008e8bd 	.word	0x4008e8bd
   37e6c:	bd00f7f6 	.word	0xbd00f7f6
   37e70:	f7ea202d 	.word	0xf7ea202d
   37e74:	f04ffd4b 	.word	0xf04ffd4b
   37e78:	bd0830ff 	.word	0xbd0830ff
   37e7c:	49765432 	.word	0x49765432

00037e80 <stream_handler_init>:
   37e80:	4604b510 	.word	0x4604b510
   37e84:	f7fd200c 	.word	0xf7fd200c
   37e88:	60e0fed1 	.word	0x60e0fed1
   37e8c:	2300b128 	.word	0x2300b128
   37e90:	e8bd6123 	.word	0xe8bd6123
   37e94:	f7f84010 	.word	0xf7f84010
   37e98:	2004b9c7 	.word	0x2004b9c7
   37e9c:	bf00bd10 	.word	0xbf00bd10

00037ea0 <stream_handler_put>:
   37ea0:	4606b570 	.word	0x4606b570
   37ea4:	460d2014 	.word	0x460d2014
   37ea8:	fec0f7fd 	.word	0xfec0f7fd
   37eac:	682bb178 	.word	0x682bb178
   37eb0:	60434604 	.word	0x60434604
   37eb4:	4601686b 	.word	0x4601686b
   37eb8:	68eb6083 	.word	0x68eb6083
   37ebc:	68ab60c3 	.word	0x68ab60c3
   37ec0:	68f06103 	.word	0x68f06103
   37ec4:	f9baf7f8 	.word	0xf9baf7f8
   37ec8:	6868b920 	.word	0x6868b920
   37ecc:	f04fbd70 	.word	0xf04fbd70
   37ed0:	bd7030ff 	.word	0xbd7030ff
   37ed4:	f7fd4620 	.word	0xf7fd4620
   37ed8:	f04ffec7 	.word	0xf04ffec7
   37edc:	bd7030ff 	.word	0xbd7030ff

00037ee0 <stream_handler_get>:
   37ee0:	4ff0e92d 	.word	0x4ff0e92d
   37ee4:	b0874682 	.word	0xb0874682
   37ee8:	468968c0 	.word	0x468968c0
   37eec:	f7f84693 	.word	0xf7f84693
   37ef0:	2800f9c5 	.word	0x2800f9c5
   37ef4:	4605d072 	.word	0x4605d072
   37ef8:	0008f8d9 	.word	0x0008f8d9
   37efc:	692bb120 	.word	0x692bb120
   37f00:	68eab113 	.word	0x68eab113
   37f04:	d15c2a00 	.word	0xd15c2a00
   37f08:	f8c92300 	.word	0xf8c92300
   37f0c:	f8d9300c 	.word	0xf8d9300c
   37f10:	f8d92000 	.word	0xf8d92000
   37f14:	f8da8004 	.word	0xf8da8004
   37f18:	92011010 	.word	0x92011010
   37f1c:	0f00f1b8 	.word	0x0f00f1b8
   37f20:	f00bd05a 	.word	0xf00bd05a
   37f24:	24000308 	.word	0x24000308
   37f28:	e0109300 	.word	0xe0109300
   37f2c:	3010f8da 	.word	0x3010f8da
   37f30:	f8ca443b 	.word	0xf8ca443b
   37f34:	46283010 	.word	0x46283010
   37f38:	f9a8f7f8 	.word	0xf9a8f7f8
   37f3c:	4605443c 	.word	0x4605443c
   37f40:	d0382800 	.word	0xd0382800
   37f44:	d93645a0 	.word	0xd93645a0
   37f48:	f8d92100 	.word	0xf8d92100
   37f4c:	68ae2000 	.word	0x68ae2000
   37f50:	0b04eba8 	.word	0x0b04eba8
   37f54:	455e1a76 	.word	0x455e1a76
   37f58:	bf284637 	.word	0xbf284637
   37f5c:	b132465f 	.word	0xb132465f
   37f60:	9b016868 	.word	0x9b016868
   37f64:	463a4401 	.word	0x463a4401
   37f68:	f0081918 	.word	0xf0081918
   37f6c:	9b00fef9 	.word	0x9b00fef9
   37f70:	d1e02b00 	.word	0xd1e02b00
   37f74:	d8d9455e 	.word	0xd8d9455e
   37f78:	000cf8da 	.word	0x000cf8da
   37f7c:	f974f7f8 	.word	0xf974f7f8
   37f80:	b1704606 	.word	0xb1704606
   37f84:	2301e9d0 	.word	0x2301e9d0
   37f88:	0103e9d0 	.word	0x0103e9d0
   37f8c:	2302e9cd 	.word	0x2302e9cd
   37f90:	1004e9cd 	.word	0x1004e9cd
   37f94:	3101e9da 	.word	0x3101e9da
   37f98:	4798a802 	.word	0x4798a802
   37f9c:	f7fd4630 	.word	0xf7fd4630
   37fa0:	2300fe63 	.word	0x2300fe63
   37fa4:	f8ca4628 	.word	0xf8ca4628
   37fa8:	f7f83010 	.word	0xf7f83010
   37fac:	443cf96f 	.word	0x443cf96f
   37fb0:	28004605 	.word	0x28004605
   37fb4:	4620d1c6 	.word	0x4620d1c6
   37fb8:	4004f8c9 	.word	0x4004f8c9
   37fbc:	e8bdb007 	.word	0xe8bdb007
   37fc0:	f8d98ff0 	.word	0xf8d98ff0
   37fc4:	429a300c 	.word	0x429a300c
   37fc8:	461abf28 	.word	0x461abf28
   37fcc:	200cf8c9 	.word	0x200cf8c9
   37fd0:	f0086929 	.word	0xf0086929
   37fd4:	e79afec5 	.word	0xe79afec5
   37fd8:	e7ec4644 	.word	0xe7ec4644
   37fdc:	30fff04f 	.word	0x30fff04f
   37fe0:	bf00e7ec 	.word	0xbf00e7ec

00037fe4 <stream_handler_available>:
   37fe4:	4604b510 	.word	0x4604b510
   37fe8:	f7f868c0 	.word	0xf7f868c0
   37fec:	b150f947 	.word	0xb150f947
   37ff0:	42646924 	.word	0x42646924
   37ff4:	441c6883 	.word	0x441c6883
   37ff8:	f948f7f8 	.word	0xf948f7f8
   37ffc:	d1f92800 	.word	0xd1f92800
   38000:	70e4ea24 	.word	0x70e4ea24
   38004:	f04fbd10 	.word	0xf04fbd10
   38008:	bd1030ff 	.word	0xbd1030ff

0003800c <stream_handler_flush>:
   3800c:	4605b530 	.word	0x4605b530
   38010:	b08568c0 	.word	0xb08568c0
   38014:	e01ab9a8 	.word	0xe01ab9a8
   38018:	f7f868e8 	.word	0xf7f868e8
   3801c:	4604f925 	.word	0x4604f925
   38020:	e9d0b170 	.word	0xe9d0b170
   38024:	e9d40101 	.word	0xe9d40101
   38028:	e9cd3203 	.word	0xe9cd3203
   3802c:	e9cd0100 	.word	0xe9cd0100
   38030:	e9d52302 	.word	0xe9d52302
   38034:	46683101 	.word	0x46683101
   38038:	46204798 	.word	0x46204798
   3803c:	fe14f7fd 	.word	0xfe14f7fd
   38040:	f7f868e8 	.word	0xf7f868e8
   38044:	2800f921 	.word	0x2800f921
   38048:	b005d1e6 	.word	0xb005d1e6
   3804c:	2008bd30 	.word	0x2008bd30
   38050:	bd30b005 	.word	0xbd30b005

00038054 <stream_handler_free>:
   38054:	4605b530 	.word	0x4605b530
   38058:	b08568c0 	.word	0xb08568c0
   3805c:	e01cb9a0 	.word	0xe01cb9a0
   38060:	f902f7f8 	.word	0xf902f7f8
   38064:	b1704604 	.word	0xb1704604
   38068:	0101e9d0 	.word	0x0101e9d0
   3806c:	3203e9d4 	.word	0x3203e9d4
   38070:	0100e9cd 	.word	0x0100e9cd
   38074:	2302e9cd 	.word	0x2302e9cd
   38078:	3101e9d5 	.word	0x3101e9d5
   3807c:	47984668 	.word	0x47984668
   38080:	f7fd4620 	.word	0xf7fd4620
   38084:	68e8fdf1 	.word	0x68e8fdf1
   38088:	f8fef7f8 	.word	0xf8fef7f8
   3808c:	68e84604 	.word	0x68e84604
   38090:	d1e52c00 	.word	0xd1e52c00
   38094:	fde8f7fd 	.word	0xfde8f7fd
   38098:	b00560ec 	.word	0xb00560ec
   3809c:	bf00bd30 	.word	0xbf00bd30

000380a0 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   380a0:	4a07      	ldr	r2, [pc, #28]	; (380c0 <SystemInit+0x20>)
   380a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   380a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   380aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   380ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   380b2:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   380b6:	4b03      	ldr	r3, [pc, #12]	; (380c4 <SystemInit+0x24>)
   380b8:	4a03      	ldr	r2, [pc, #12]	; (380c8 <SystemInit+0x28>)
   380ba:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   380bc:	4770      	bx	lr
   380be:	bf00      	nop
   380c0:	e000ed00 	.word	0xe000ed00
   380c4:	200312b8 	.word	0x200312b8
   380c8:	03d09000 	.word	0x03d09000

000380cc <nvmc_word_write>:
}

#if defined(NVMC_READYNEXT_READYNEXT_Msk)
__STATIC_INLINE bool nrf_nvmc_write_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   380cc:	4a04      	ldr	r2, [pc, #16]	; (380e0 <nvmc_word_write+0x14>)
   380ce:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   380d2:	07db      	lsls	r3, r3, #31
   380d4:	d5fb      	bpl.n	380ce <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
   380d6:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   380d8:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   380dc:	4770      	bx	lr
   380de:	bf00      	nop
   380e0:	40039000 	.word	0x40039000

000380e4 <partial_word_create>:
{
   380e4:	b507      	push	{r0, r1, r2, lr}
    byte_shift = addr % NVMC_BYTES_IN_WORD;
   380e6:	f000 0003 	and.w	r0, r0, #3
    NRFX_ASSERT(bytes_count <= (NVMC_BYTES_IN_WORD - byte_shift));
   380ea:	f1c0 0304 	rsb	r3, r0, #4
   380ee:	4293      	cmp	r3, r2
   380f0:	d205      	bcs.n	380fe <partial_word_create+0x1a>
   380f2:	4b0b      	ldr	r3, [pc, #44]	; (38120 <partial_word_create+0x3c>)
   380f4:	4a0b      	ldr	r2, [pc, #44]	; (38124 <partial_word_create+0x40>)
   380f6:	2192      	movs	r1, #146	; 0x92
   380f8:	480b      	ldr	r0, [pc, #44]	; (38128 <partial_word_create+0x44>)
   380fa:	f003 fe93 	bl	3be24 <__assert_func>
    value32 = 0xFFFFFFFF;
   380fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   38102:	9301      	str	r3, [sp, #4]
    for (uint32_t i = 0; i < bytes_count; i++)
   38104:	ab01      	add	r3, sp, #4
   38106:	4418      	add	r0, r3
   38108:	440a      	add	r2, r1
   3810a:	4291      	cmp	r1, r2
   3810c:	d103      	bne.n	38116 <partial_word_create+0x32>
}
   3810e:	9801      	ldr	r0, [sp, #4]
   38110:	b003      	add	sp, #12
   38112:	f85d fb04 	ldr.w	pc, [sp], #4
        ((uint8_t *)&value32)[byte_shift] = bytes[i];
   38116:	f811 3b01 	ldrb.w	r3, [r1], #1
   3811a:	f800 3b01 	strb.w	r3, [r0], #1
        byte_shift++;
   3811e:	e7f4      	b.n	3810a <partial_word_create+0x26>
   38120:	00048db2 	.word	0x00048db2
   38124:	00048d17 	.word	0x00048d17
   38128:	00048dd2 	.word	0x00048dd2

0003812c <nrfx_nvmc_page_erase>:
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(addr < flash_total_size_get());
   3812c:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   38130:	b508      	push	{r3, lr}
    NRFX_ASSERT(addr < flash_total_size_get());
   38132:	d305      	bcc.n	38140 <nrfx_nvmc_page_erase+0x14>
   38134:	4b0d      	ldr	r3, [pc, #52]	; (3816c <nrfx_nvmc_page_erase+0x40>)
   38136:	4a0e      	ldr	r2, [pc, #56]	; (38170 <nrfx_nvmc_page_erase+0x44>)
   38138:	21d1      	movs	r1, #209	; 0xd1
   3813a:	480e      	ldr	r0, [pc, #56]	; (38174 <nrfx_nvmc_page_erase+0x48>)
   3813c:	f003 fe72 	bl	3be24 <__assert_func>
    return !(addr % flash_page_size_get());
   38140:	f3c0 030b 	ubfx	r3, r0, #0, #12

    if (!is_page_aligned_check(addr))
   38144:	b97b      	cbnz	r3, 38166 <nrfx_nvmc_page_erase+0x3a>

#if defined(NVMC_CONFIGNS_WEN_Msk)
__STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                 nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   38146:	2202      	movs	r2, #2
   38148:	4b0b      	ldr	r3, [pc, #44]	; (38178 <nrfx_nvmc_page_erase+0x4c>)
   3814a:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   3814e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   38152:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   38154:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   38158:	07d2      	lsls	r2, r2, #31
   3815a:	d5fb      	bpl.n	38154 <nrfx_nvmc_page_erase+0x28>
    p_reg->CONFIGNS = (uint32_t)mode;
   3815c:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   3815e:	4807      	ldr	r0, [pc, #28]	; (3817c <nrfx_nvmc_page_erase+0x50>)
   38160:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   38164:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
   38166:	4806      	ldr	r0, [pc, #24]	; (38180 <nrfx_nvmc_page_erase+0x54>)
   38168:	e7fc      	b.n	38164 <nrfx_nvmc_page_erase+0x38>
   3816a:	bf00      	nop
   3816c:	00048d6b 	.word	0x00048d6b
   38170:	00048d2b 	.word	0x00048d2b
   38174:	00048dd2 	.word	0x00048dd2
   38178:	40039000 	.word	0x40039000
   3817c:	0bad0000 	.word	0x0bad0000
   38180:	0bad000a 	.word	0x0bad000a

00038184 <nrfx_nvmc_word_write>:
    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, &value, 1));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    NRFX_ASSERT(addr < flash_total_size_get());
   38184:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   38188:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(addr < flash_total_size_get());
   3818a:	d306      	bcc.n	3819a <nrfx_nvmc_word_write+0x16>
   3818c:	f240 1141 	movw	r1, #321	; 0x141
   38190:	4b0a      	ldr	r3, [pc, #40]	; (381bc <nrfx_nvmc_word_write+0x38>)
   38192:	4a0b      	ldr	r2, [pc, #44]	; (381c0 <nrfx_nvmc_word_write+0x3c>)
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   38194:	480b      	ldr	r0, [pc, #44]	; (381c4 <nrfx_nvmc_word_write+0x40>)
   38196:	f003 fe45 	bl	3be24 <__assert_func>
   3819a:	f010 0403 	ands.w	r4, r0, #3
   3819e:	d004      	beq.n	381aa <nrfx_nvmc_word_write+0x26>
   381a0:	4b09      	ldr	r3, [pc, #36]	; (381c8 <nrfx_nvmc_word_write+0x44>)
   381a2:	4a07      	ldr	r2, [pc, #28]	; (381c0 <nrfx_nvmc_word_write+0x3c>)
   381a4:	f44f 71a1 	mov.w	r1, #322	; 0x142
   381a8:	e7f4      	b.n	38194 <nrfx_nvmc_word_write+0x10>
   381aa:	2301      	movs	r3, #1
   381ac:	4d07      	ldr	r5, [pc, #28]	; (381cc <nrfx_nvmc_word_write+0x48>)
   381ae:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   381b2:	f7ff ff8b 	bl	380cc <nvmc_word_write>
   381b6:	f8c5 4584 	str.w	r4, [r5, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   381ba:	bd38      	pop	{r3, r4, r5, pc}
   381bc:	00048d6b 	.word	0x00048d6b
   381c0:	00048d40 	.word	0x00048d40
   381c4:	00048dd2 	.word	0x00048dd2
   381c8:	00048d89 	.word	0x00048d89
   381cc:	40039000 	.word	0x40039000

000381d0 <nrfx_nvmc_bytes_write>:

void nrfx_nvmc_bytes_write(uint32_t addr, void const * src, uint32_t num_bytes)
{
    NRFX_ASSERT(addr < flash_total_size_get());
   381d0:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   381d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   381d8:	4604      	mov	r4, r0
   381da:	460e      	mov	r6, r1
   381dc:	4615      	mov	r5, r2
    NRFX_ASSERT(addr < flash_total_size_get());
   381de:	d306      	bcc.n	381ee <nrfx_nvmc_bytes_write+0x1e>
   381e0:	4b20      	ldr	r3, [pc, #128]	; (38264 <nrfx_nvmc_bytes_write+0x94>)
   381e2:	4a21      	ldr	r2, [pc, #132]	; (38268 <nrfx_nvmc_bytes_write+0x98>)
   381e4:	f240 114d 	movw	r1, #333	; 0x14d
   381e8:	4820      	ldr	r0, [pc, #128]	; (3826c <nrfx_nvmc_bytes_write+0x9c>)
   381ea:	f003 fe1b 	bl	3be24 <__assert_func>
   381ee:	2201      	movs	r2, #1
   381f0:	4b1f      	ldr	r3, [pc, #124]	; (38270 <nrfx_nvmc_bytes_write+0xa0>)
   381f2:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nvmc_write_mode_set();

    uint8_t const * bytes_src = (uint8_t const *)src;

    uint32_t unaligned_bytes = addr % NVMC_BYTES_IN_WORD;
    if (unaligned_bytes != 0)
   381f6:	f010 0303 	ands.w	r3, r0, #3
   381fa:	d010      	beq.n	3821e <nrfx_nvmc_bytes_write+0x4e>
    {
        uint32_t leading_bytes = NVMC_BYTES_IN_WORD - unaligned_bytes;
   381fc:	f1c3 0704 	rsb	r7, r3, #4
        if (leading_bytes > num_bytes)
   38200:	42af      	cmp	r7, r5
   38202:	bf28      	it	cs
   38204:	462f      	movcs	r7, r5
        {
            leading_bytes = num_bytes;
        }

        nvmc_word_write(addr - unaligned_bytes,
   38206:	463a      	mov	r2, r7
   38208:	eba0 0803 	sub.w	r8, r0, r3
   3820c:	f7ff ff6a 	bl	380e4 <partial_word_create>
   38210:	4601      	mov	r1, r0
   38212:	4640      	mov	r0, r8
   38214:	f7ff ff5a 	bl	380cc <nvmc_word_write>
                        partial_word_create(addr, bytes_src, leading_bytes));
        num_bytes -= leading_bytes;
   38218:	1bed      	subs	r5, r5, r7
        addr      += leading_bytes;
   3821a:	443c      	add	r4, r7
        bytes_src += leading_bytes;
   3821c:	443e      	add	r6, r7
        }
    }
    else
#endif
    {
        uint32_t word_count = num_bytes / NVMC_BYTES_IN_WORD;
   3821e:	4637      	mov	r7, r6
   38220:	f025 0803 	bic.w	r8, r5, #3
   38224:	44b0      	add	r8, r6
   38226:	eba4 0906 	sub.w	r9, r4, r6
    for (uint32_t i = 0; i < num_words; i++)
   3822a:	45b8      	cmp	r8, r7
   3822c:	d113      	bne.n	38256 <nrfx_nvmc_bytes_write+0x86>
        addr += word_count * NVMC_BYTES_IN_WORD;
        bytes_src += word_count * NVMC_BYTES_IN_WORD;
    }

    uint32_t trailing_bytes = num_bytes % NVMC_BYTES_IN_WORD;
    if (trailing_bytes != 0)
   3822e:	f015 0203 	ands.w	r2, r5, #3
   38232:	d00a      	beq.n	3824a <nrfx_nvmc_bytes_write+0x7a>
        addr += word_count * NVMC_BYTES_IN_WORD;
   38234:	f025 0103 	bic.w	r1, r5, #3
   38238:	440c      	add	r4, r1
    {
        nvmc_word_write(addr, partial_word_create(addr, bytes_src, trailing_bytes));
   3823a:	4620      	mov	r0, r4
   3823c:	4431      	add	r1, r6
   3823e:	f7ff ff51 	bl	380e4 <partial_word_create>
   38242:	4601      	mov	r1, r0
   38244:	4620      	mov	r0, r4
   38246:	f7ff ff41 	bl	380cc <nvmc_word_write>
   3824a:	2200      	movs	r2, #0
   3824c:	4b08      	ldr	r3, [pc, #32]	; (38270 <nrfx_nvmc_bytes_write+0xa0>)
   3824e:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    }

    nvmc_readonly_mode_set();
}
   38252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
   38256:	eb09 0007 	add.w	r0, r9, r7
   3825a:	f857 1b04 	ldr.w	r1, [r7], #4
   3825e:	f7ff ff35 	bl	380cc <nvmc_word_write>
   38262:	e7e2      	b.n	3822a <nrfx_nvmc_bytes_write+0x5a>
   38264:	00048d6b 	.word	0x00048d6b
   38268:	00048d55 	.word	0x00048d55
   3826c:	00048dd2 	.word	0x00048dd2
   38270:	40039000 	.word	0x40039000

00038274 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   38274:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   38276:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   38278:	4b08      	ldr	r3, [pc, #32]	; (3829c <z_sys_device_do_config_level+0x28>)
   3827a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   3827e:	3001      	adds	r0, #1
   38280:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   38284:	42a5      	cmp	r5, r4
   38286:	d800      	bhi.n	3828a <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   38288:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   3828a:	6823      	ldr	r3, [r4, #0]
   3828c:	4620      	mov	r0, r4
   3828e:	685b      	ldr	r3, [r3, #4]
   38290:	4798      	blx	r3
		if (retval != 0) {
   38292:	b100      	cbz	r0, 38296 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   38294:	6066      	str	r6, [r4, #4]
								info++) {
   38296:	340c      	adds	r4, #12
   38298:	e7f4      	b.n	38284 <z_sys_device_do_config_level+0x10>
   3829a:	bf00      	nop
   3829c:	00043e78 	.word	0x00043e78

000382a0 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   382a0:	4b10      	ldr	r3, [pc, #64]	; (382e4 <z_impl_device_get_binding+0x44>)
{
   382a2:	b570      	push	{r4, r5, r6, lr}
   382a4:	4605      	mov	r5, r0
   382a6:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   382a8:	4c0f      	ldr	r4, [pc, #60]	; (382e8 <z_impl_device_get_binding+0x48>)
   382aa:	429c      	cmp	r4, r3
   382ac:	d104      	bne.n	382b8 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   382ae:	4c0e      	ldr	r4, [pc, #56]	; (382e8 <z_impl_device_get_binding+0x48>)
   382b0:	42b4      	cmp	r4, r6
   382b2:	d109      	bne.n	382c8 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   382b4:	2400      	movs	r4, #0
   382b6:	e012      	b.n	382de <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   382b8:	6862      	ldr	r2, [r4, #4]
   382ba:	b11a      	cbz	r2, 382c4 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   382bc:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   382be:	6812      	ldr	r2, [r2, #0]
   382c0:	42aa      	cmp	r2, r5
   382c2:	d00c      	beq.n	382de <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   382c4:	340c      	adds	r4, #12
   382c6:	e7f0      	b.n	382aa <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   382c8:	6863      	ldr	r3, [r4, #4]
   382ca:	b90b      	cbnz	r3, 382d0 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   382cc:	340c      	adds	r4, #12
   382ce:	e7ef      	b.n	382b0 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   382d0:	6823      	ldr	r3, [r4, #0]
   382d2:	4628      	mov	r0, r5
   382d4:	6819      	ldr	r1, [r3, #0]
   382d6:	f7e1 fe4b 	bl	19f70 <strcmp>
   382da:	2800      	cmp	r0, #0
   382dc:	d1f6      	bne.n	382cc <z_impl_device_get_binding+0x2c>
}
   382de:	4620      	mov	r0, r4
   382e0:	bd70      	pop	{r4, r5, r6, pc}
   382e2:	bf00      	nop
   382e4:	200315a4 	.word	0x200315a4
   382e8:	2003149c 	.word	0x2003149c

000382ec <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   382ec:	4b01      	ldr	r3, [pc, #4]	; (382f4 <z_impl_z_errno+0x8>)
   382ee:	6898      	ldr	r0, [r3, #8]
}
   382f0:	3054      	adds	r0, #84	; 0x54
   382f2:	4770      	bx	lr
   382f4:	2002a214 	.word	0x2002a214

000382f8 <z_fatal_error>:
	z_arch_system_halt(reason);
}
/* LCOV_EXCL_STOP */

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   382f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   382fc:	4605      	mov	r5, r0
   382fe:	460f      	mov	r7, r1
	return z_impl_k_current_get();
   38300:	f002 f81a 	bl	3a338 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s", reason, reason_to_str(reason));
   38304:	2301      	movs	r3, #1
   38306:	4606      	mov	r6, r0
   38308:	f04f 0000 	mov.w	r0, #0
   3830c:	4c2b      	ldr	r4, [pc, #172]	; (383bc <z_fatal_error+0xc4>)
   3830e:	f363 0007 	bfi	r0, r3, #0, #8
   38312:	4b2b      	ldr	r3, [pc, #172]	; (383c0 <z_fatal_error+0xc8>)
   38314:	2d04      	cmp	r5, #4
   38316:	eba4 0403 	sub.w	r4, r4, r3
   3831a:	bf98      	it	ls
   3831c:	4b29      	ldrls	r3, [pc, #164]	; (383c4 <z_fatal_error+0xcc>)
   3831e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   38322:	bf94      	ite	ls
   38324:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   38328:	4b27      	ldrhi	r3, [pc, #156]	; (383c8 <z_fatal_error+0xd0>)
   3832a:	f364 108f 	bfi	r0, r4, #6, #10
   3832e:	462a      	mov	r2, r5
   38330:	4926      	ldr	r1, [pc, #152]	; (383cc <z_fatal_error+0xd4>)
   38332:	f006 fb18 	bl	3e966 <log_string_sync>
	 * if (k_is_in_isr()) {
	 *     LOG_ERR("Fault during interrupt handling\n");
	 * }
	 */

	LOG_ERR("Current thread: %p (%s)", thread,
   38336:	f04f 0800 	mov.w	r8, #0
   3833a:	2301      	movs	r3, #1
	const char *thread_name = k_thread_name_get(thread);
   3833c:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
   3833e:	f363 0807 	bfi	r8, r3, #0, #8
   38342:	f364 188f 	bfi	r8, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   38346:	f008 fc1b 	bl	40b80 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   3834a:	2800      	cmp	r0, #0
   3834c:	d034      	beq.n	383b8 <z_fatal_error+0xc0>
   3834e:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   38350:	4b1f      	ldr	r3, [pc, #124]	; (383d0 <z_fatal_error+0xd8>)
   38352:	2a00      	cmp	r2, #0
   38354:	bf08      	it	eq
   38356:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   38358:	f006 fb17 	bl	3e98a <log_strdup>
   3835c:	4632      	mov	r2, r6
   3835e:	4603      	mov	r3, r0
   38360:	491c      	ldr	r1, [pc, #112]	; (383d4 <z_fatal_error+0xdc>)
   38362:	4640      	mov	r0, r8
   38364:	f006 faff 	bl	3e966 <log_string_sync>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   38368:	4639      	mov	r1, r7
   3836a:	4628      	mov	r0, r5
   3836c:	f7e5 f84a 	bl	1d404 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   38370:	2d04      	cmp	r5, #4
   38372:	d10c      	bne.n	3838e <z_fatal_error+0x96>
   38374:	4918      	ldr	r1, [pc, #96]	; (383d8 <z_fatal_error+0xe0>)
   38376:	2373      	movs	r3, #115	; 0x73
   38378:	4a18      	ldr	r2, [pc, #96]	; (383dc <z_fatal_error+0xe4>)
   3837a:	4819      	ldr	r0, [pc, #100]	; (383e0 <z_fatal_error+0xe8>)
   3837c:	f006 fad6 	bl	3e92c <printk>
   38380:	4818      	ldr	r0, [pc, #96]	; (383e4 <z_fatal_error+0xec>)
   38382:	f006 fad3 	bl	3e92c <printk>
   38386:	2173      	movs	r1, #115	; 0x73
   38388:	4814      	ldr	r0, [pc, #80]	; (383dc <z_fatal_error+0xe4>)
   3838a:	f006 fadc 	bl	3e946 <assert_post_action>
			 "Attempted to recover from a kernel panic condition");
		/* FIXME: #17656 */
		__ASSERT(!k_is_in_isr(),
   3838e:	f002 f8f7 	bl	3a580 <k_is_in_isr>
   38392:	b160      	cbz	r0, 383ae <z_fatal_error+0xb6>
   38394:	4914      	ldr	r1, [pc, #80]	; (383e8 <z_fatal_error+0xf0>)
   38396:	2376      	movs	r3, #118	; 0x76
   38398:	4a10      	ldr	r2, [pc, #64]	; (383dc <z_fatal_error+0xe4>)
   3839a:	4811      	ldr	r0, [pc, #68]	; (383e0 <z_fatal_error+0xe8>)
   3839c:	f006 fac6 	bl	3e92c <printk>
   383a0:	4812      	ldr	r0, [pc, #72]	; (383ec <z_fatal_error+0xf4>)
   383a2:	f006 fac3 	bl	3e92c <printk>
   383a6:	2176      	movs	r1, #118	; 0x76
   383a8:	480c      	ldr	r0, [pc, #48]	; (383dc <z_fatal_error+0xe4>)
   383aa:	f006 facc 	bl	3e946 <assert_post_action>
	z_impl_k_thread_abort(thread);
   383ae:	4630      	mov	r0, r6
			 "Attempted to recover from a fatal error in ISR");
	}
	k_thread_abort(thread);
}
   383b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   383b4:	f7e8 b910 	b.w	205d8 <z_impl_k_thread_abort>
		thread_name = "unknown";
   383b8:	4805      	ldr	r0, [pc, #20]	; (383d0 <z_fatal_error+0xd8>)
   383ba:	e7cd      	b.n	38358 <z_fatal_error+0x60>
   383bc:	000423ec 	.word	0x000423ec
   383c0:	00042314 	.word	0x00042314
   383c4:	00043e90 	.word	0x00043e90
   383c8:	00048e73 	.word	0x00048e73
   383cc:	00048e89 	.word	0x00048e89
   383d0:	00048e81 	.word	0x00048e81
   383d4:	00048ea7 	.word	0x00048ea7
   383d8:	00048eda 	.word	0x00048eda
   383dc:	00048ebf 	.word	0x00048ebf
   383e0:	00044643 	.word	0x00044643
   383e4:	00048ef7 	.word	0x00048ef7
   383e8:	00048f2c 	.word	0x00048f2c
   383ec:	00048f3b 	.word	0x00048f3b

000383f0 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   383f0:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   383f2:	4d0b      	ldr	r5, [pc, #44]	; (38420 <idle+0x30>)
	__asm__ volatile(
   383f4:	f04f 0220 	mov.w	r2, #32
   383f8:	f3ef 8311 	mrs	r3, BASEPRI
   383fc:	f382 8811 	msr	BASEPRI, r2
   38400:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   38404:	f002 fd44 	bl	3ae90 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   38408:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   3840a:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   3840c:	2802      	cmp	r0, #2
   3840e:	bfd8      	it	le
   38410:	4608      	movle	r0, r1
   38412:	f002 fd83 	bl	3af1c <z_set_timeout_expiry>
	_kernel.idle = ticks;
   38416:	622c      	str	r4, [r5, #32]
	z_arch_cpu_idle();
   38418:	f7e7 fd0a 	bl	1fe30 <z_arch_cpu_idle>
   3841c:	e7ea      	b.n	383f4 <idle+0x4>
   3841e:	bf00      	nop
   38420:	2002a214 	.word	0x2002a214

00038424 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   38424:	4802      	ldr	r0, [pc, #8]	; (38430 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   38426:	4a03      	ldr	r2, [pc, #12]	; (38434 <z_bss_zero+0x10>)
   38428:	2100      	movs	r1, #0
   3842a:	1a12      	subs	r2, r2, r0
   3842c:	f008 bcb8 	b.w	40da0 <memset>
   38430:	20020000 	.word	0x20020000
   38434:	2002bfb8 	.word	0x2002bfb8

00038438 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   38438:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3843a:	4806      	ldr	r0, [pc, #24]	; (38454 <z_data_copy+0x1c>)
   3843c:	4a06      	ldr	r2, [pc, #24]	; (38458 <z_data_copy+0x20>)
   3843e:	4907      	ldr	r1, [pc, #28]	; (3845c <z_data_copy+0x24>)
   38440:	1a12      	subs	r2, r2, r0
   38442:	f008 fc8d 	bl	40d60 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   38446:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3844a:	4a05      	ldr	r2, [pc, #20]	; (38460 <z_data_copy+0x28>)
   3844c:	4905      	ldr	r1, [pc, #20]	; (38464 <z_data_copy+0x2c>)
   3844e:	4806      	ldr	r0, [pc, #24]	; (38468 <z_data_copy+0x30>)
   38450:	f008 bc86 	b.w	40d60 <memcpy>
   38454:	20030c40 	.word	0x20030c40
   38458:	200316bc 	.word	0x200316bc
   3845c:	0004984c 	.word	0x0004984c
   38460:	00000000 	.word	0x00000000
   38464:	00049848 	.word	0x00049848
   38468:	20020000 	.word	0x20020000

0003846c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   3846c:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   3846e:	2002      	movs	r0, #2
   38470:	f7ff ff00 	bl	38274 <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   38474:	4807      	ldr	r0, [pc, #28]	; (38494 <bg_thread_main+0x28>)
   38476:	f006 fa59 	bl	3e92c <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   3847a:	2003      	movs	r0, #3
   3847c:	f7ff fefa 	bl	38274 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   38480:	f002 f97e 	bl	3a780 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   38484:	f7e5 fa46 	bl	1d914 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   38488:	4a03      	ldr	r2, [pc, #12]	; (38498 <bg_thread_main+0x2c>)
   3848a:	7b13      	ldrb	r3, [r2, #12]
   3848c:	f023 0301 	bic.w	r3, r3, #1
   38490:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   38492:	bd08      	pop	{r3, pc}
   38494:	00048f6c 	.word	0x00048f6c
   38498:	200260f4 	.word	0x200260f4

0003849c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   3849c:	b580      	push	{r7, lr}
   3849e:	b0b2      	sub	sp, #200	; 0xc8
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   384a0:	f7e6 fc44 	bl	1ed2c <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   384a4:	4b36      	ldr	r3, [pc, #216]	; (38580 <z_cstart+0xe4>)
   384a6:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   384aa:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   384ae:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   384b2:	2400      	movs	r4, #0
   384b4:	23e0      	movs	r3, #224	; 0xe0
   384b6:	4d33      	ldr	r5, [pc, #204]	; (38584 <z_cstart+0xe8>)

	/* perform any architecture-specific initialization */
	z_arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   384b8:	2701      	movs	r7, #1
   384ba:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   384be:	77ec      	strb	r4, [r5, #31]
   384c0:	762c      	strb	r4, [r5, #24]
   384c2:	766c      	strb	r4, [r5, #25]
   384c4:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   384c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   384c8:	4e2f      	ldr	r6, [pc, #188]	; (38588 <z_cstart+0xec>)
   384ca:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   384ce:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void z_arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   384d0:	f7e8 f858 	bl	20584 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   384d4:	f7e7 fca6 	bl	1fe24 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   384d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   384dc:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   384de:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   384e0:	ab06      	add	r3, sp, #24
   384e2:	22b0      	movs	r2, #176	; 0xb0
   384e4:	4621      	mov	r1, r4
   384e6:	4618      	mov	r0, r3
   384e8:	f008 fc5a 	bl	40da0 <memset>
	_current = &dummy_thread;
   384ec:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   384ee:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   384f0:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   384f4:	f7ff febe 	bl	38274 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   384f8:	4638      	mov	r0, r7
   384fa:	f7ff febb 	bl	38274 <z_sys_device_do_config_level>
	z_sched_init();
   384fe:	f001 fdc1 	bl	3a084 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   38502:	4b22      	ldr	r3, [pc, #136]	; (3858c <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
   38504:	4d22      	ldr	r5, [pc, #136]	; (38590 <z_cstart+0xf4>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
   38506:	e9cd 7304 	strd	r7, r3, [sp, #16]
   3850a:	2307      	movs	r3, #7
   3850c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   38510:	e9cd 4302 	strd	r4, r3, [sp, #8]
   38514:	e9cd 4400 	strd	r4, r4, [sp]
   38518:	4b1e      	ldr	r3, [pc, #120]	; (38594 <z_cstart+0xf8>)
   3851a:	491f      	ldr	r1, [pc, #124]	; (38598 <z_cstart+0xfc>)
   3851c:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   3851e:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   38520:	f002 f83e 	bl	3a5a0 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   38524:	7b6b      	ldrb	r3, [r5, #13]
   38526:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3852a:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3852e:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   38530:	d104      	bne.n	3853c <z_cstart+0xa0>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   38532:	69ab      	ldr	r3, [r5, #24]
   38534:	b913      	cbnz	r3, 3853c <z_cstart+0xa0>
		z_add_thread_to_ready_q(thread);
   38536:	4628      	mov	r0, r5
   38538:	f001 f9ae 	bl	39898 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
   3853c:	4b17      	ldr	r3, [pc, #92]	; (3859c <z_cstart+0x100>)
   3853e:	2201      	movs	r2, #1
   38540:	9305      	str	r3, [sp, #20]
   38542:	230f      	movs	r3, #15
   38544:	e9cd 3203 	strd	r3, r2, [sp, #12]
   38548:	2300      	movs	r3, #0
   3854a:	4d15      	ldr	r5, [pc, #84]	; (385a0 <z_cstart+0x104>)
   3854c:	e9cd 3301 	strd	r3, r3, [sp, #4]
   38550:	9300      	str	r3, [sp, #0]
   38552:	f44f 72a0 	mov.w	r2, #320	; 0x140
   38556:	4b13      	ldr	r3, [pc, #76]	; (385a4 <z_cstart+0x108>)
   38558:	4913      	ldr	r1, [pc, #76]	; (385a8 <z_cstart+0x10c>)
   3855a:	4628      	mov	r0, r5
   3855c:	f002 f820 	bl	3a5a0 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   38560:	7b6b      	ldrb	r3, [r5, #13]
	z_arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   38562:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   38566:	f023 0304 	bic.w	r3, r3, #4
   3856a:	736b      	strb	r3, [r5, #13]
	list->head = (sys_dnode_t *)list;
   3856c:	4b0f      	ldr	r3, [pc, #60]	; (385ac <z_cstart+0x110>)
   3856e:	490a      	ldr	r1, [pc, #40]	; (38598 <z_cstart+0xfc>)
	list->tail = (sys_dnode_t *)list;
   38570:	e9c6 3306 	strd	r3, r3, [r6, #24]
   38574:	4806      	ldr	r0, [pc, #24]	; (38590 <z_cstart+0xf4>)
   38576:	4b07      	ldr	r3, [pc, #28]	; (38594 <z_cstart+0xf8>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   38578:	60f5      	str	r5, [r6, #12]
	z_arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   3857a:	f7e7 fc25 	bl	1fdc8 <z_arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   3857e:	bf00      	nop
   38580:	2002e6f8 	.word	0x2002e6f8
   38584:	e000ed00 	.word	0xe000ed00
   38588:	2002a214 	.word	0x2002a214
   3858c:	00048fb5 	.word	0x00048fb5
   38590:	200260f4 	.word	0x200260f4
   38594:	0003846d 	.word	0x0003846d
   38598:	2002c5b8 	.word	0x2002c5b8
   3859c:	00048fba 	.word	0x00048fba
   385a0:	20026044 	.word	0x20026044
   385a4:	000383f1 	.word	0x000383f1
   385a8:	2002e5b8 	.word	0x2002e5b8
   385ac:	2002a22c 	.word	0x2002a22c

000385b0 <create_free_list>:
{
	u32_t j;
	char *p;

	/* blocks must be word aligned */
	__ASSERT(((slab->block_size | (uintptr_t)slab->buffer)
   385b0:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   385b4:	4313      	orrs	r3, r2
   385b6:	079b      	lsls	r3, r3, #30
{
   385b8:	b510      	push	{r4, lr}
   385ba:	4604      	mov	r4, r0
	__ASSERT(((slab->block_size | (uintptr_t)slab->buffer)
   385bc:	d00d      	beq.n	385da <create_free_list+0x2a>
   385be:	2327      	movs	r3, #39	; 0x27
   385c0:	4a0d      	ldr	r2, [pc, #52]	; (385f8 <create_free_list+0x48>)
   385c2:	490e      	ldr	r1, [pc, #56]	; (385fc <create_free_list+0x4c>)
   385c4:	480e      	ldr	r0, [pc, #56]	; (38600 <create_free_list+0x50>)
   385c6:	f006 f9b1 	bl	3e92c <printk>
   385ca:	4621      	mov	r1, r4
   385cc:	480d      	ldr	r0, [pc, #52]	; (38604 <create_free_list+0x54>)
   385ce:	f006 f9ad 	bl	3e92c <printk>
   385d2:	2127      	movs	r1, #39	; 0x27
   385d4:	4808      	ldr	r0, [pc, #32]	; (385f8 <create_free_list+0x48>)
   385d6:	f006 f9b6 	bl	3e946 <assert_post_action>
					& (sizeof(void *) - 1)) == 0,
		 "slab at %p not word aligned", slab);

	slab->free_list = NULL;
   385da:	2300      	movs	r3, #0
	p = slab->buffer;
   385dc:	6922      	ldr	r2, [r4, #16]

	for (j = 0U; j < slab->num_blocks; j++) {
   385de:	68a1      	ldr	r1, [r4, #8]
	slab->free_list = NULL;
   385e0:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   385e2:	4299      	cmp	r1, r3
   385e4:	d100      	bne.n	385e8 <create_free_list+0x38>
		*(char **)p = slab->free_list;
		slab->free_list = p;
		p += slab->block_size;
	}
}
   385e6:	bd10      	pop	{r4, pc}
		*(char **)p = slab->free_list;
   385e8:	6960      	ldr	r0, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   385ea:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   385ec:	6010      	str	r0, [r2, #0]
		p += slab->block_size;
   385ee:	68e0      	ldr	r0, [r4, #12]
		slab->free_list = p;
   385f0:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   385f2:	4402      	add	r2, r0
   385f4:	e7f5      	b.n	385e2 <create_free_list+0x32>
   385f6:	bf00      	nop
   385f8:	00048fbf 	.word	0x00048fbf
   385fc:	00048fdd 	.word	0x00048fdd
   38600:	00044643 	.word	0x00044643
   38604:	00049028 	.word	0x00049028

00038608 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   38608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   3860a:	4d0e      	ldr	r5, [pc, #56]	; (38644 <init_mem_slab_module+0x3c>)
   3860c:	4c0e      	ldr	r4, [pc, #56]	; (38648 <init_mem_slab_module+0x40>)
   3860e:	462f      	mov	r7, r5
   38610:	4e0e      	ldr	r6, [pc, #56]	; (3864c <init_mem_slab_module+0x44>)
   38612:	42ac      	cmp	r4, r5
   38614:	d90c      	bls.n	38630 <init_mem_slab_module+0x28>
   38616:	490e      	ldr	r1, [pc, #56]	; (38650 <init_mem_slab_module+0x48>)
   38618:	233e      	movs	r3, #62	; 0x3e
   3861a:	4632      	mov	r2, r6
   3861c:	480d      	ldr	r0, [pc, #52]	; (38654 <init_mem_slab_module+0x4c>)
   3861e:	f006 f985 	bl	3e92c <printk>
   38622:	480d      	ldr	r0, [pc, #52]	; (38658 <init_mem_slab_module+0x50>)
   38624:	f006 f982 	bl	3e92c <printk>
   38628:	213e      	movs	r1, #62	; 0x3e
   3862a:	4630      	mov	r0, r6
   3862c:	f006 f98b 	bl	3e946 <assert_post_action>
   38630:	42bc      	cmp	r4, r7
   38632:	d301      	bcc.n	38638 <init_mem_slab_module+0x30>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
   38634:	2000      	movs	r0, #0
   38636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		create_free_list(slab);
   38638:	4620      	mov	r0, r4
   3863a:	f7ff ffb9 	bl	385b0 <create_free_list>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   3863e:	341c      	adds	r4, #28
   38640:	e7e7      	b.n	38612 <init_mem_slab_module+0xa>
   38642:	bf00      	nop
   38644:	200315c0 	.word	0x200315c0
   38648:	200315a4 	.word	0x200315a4
   3864c:	00048fbf 	.word	0x00048fbf
   38650:	00049046 	.word	0x00049046
   38654:	00044643 	.word	0x00044643
   38658:	00049063 	.word	0x00049063

0003865c <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   3865c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3865e:	4604      	mov	r4, r0
   38660:	460d      	mov	r5, r1
   38662:	4616      	mov	r6, r2
   38664:	f04f 0320 	mov.w	r3, #32
   38668:	f3ef 8711 	mrs	r7, BASEPRI
   3866c:	f383 8811 	msr	BASEPRI, r3
   38670:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   38674:	4822      	ldr	r0, [pc, #136]	; (38700 <k_mem_slab_alloc+0xa4>)
   38676:	f001 ffab 	bl	3a5d0 <z_spin_lock_valid>
   3867a:	b960      	cbnz	r0, 38696 <k_mem_slab_alloc+0x3a>
   3867c:	4921      	ldr	r1, [pc, #132]	; (38704 <k_mem_slab_alloc+0xa8>)
   3867e:	235f      	movs	r3, #95	; 0x5f
   38680:	4a21      	ldr	r2, [pc, #132]	; (38708 <k_mem_slab_alloc+0xac>)
   38682:	4822      	ldr	r0, [pc, #136]	; (3870c <k_mem_slab_alloc+0xb0>)
   38684:	f006 f952 	bl	3e92c <printk>
   38688:	4821      	ldr	r0, [pc, #132]	; (38710 <k_mem_slab_alloc+0xb4>)
   3868a:	f006 f94f 	bl	3e92c <printk>
   3868e:	215f      	movs	r1, #95	; 0x5f
   38690:	481d      	ldr	r0, [pc, #116]	; (38708 <k_mem_slab_alloc+0xac>)
   38692:	f006 f958 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   38696:	481a      	ldr	r0, [pc, #104]	; (38700 <k_mem_slab_alloc+0xa4>)
   38698:	f001 ffb8 	bl	3a60c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   3869c:	6963      	ldr	r3, [r4, #20]
   3869e:	b1e3      	cbz	r3, 386da <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
   386a0:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   386a2:	681b      	ldr	r3, [r3, #0]
   386a4:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   386a6:	69a3      	ldr	r3, [r4, #24]
   386a8:	3301      	adds	r3, #1
   386aa:	61a3      	str	r3, [r4, #24]
		result = 0;
   386ac:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   386ae:	4814      	ldr	r0, [pc, #80]	; (38700 <k_mem_slab_alloc+0xa4>)
   386b0:	f001 ff9c 	bl	3a5ec <z_spin_unlock_valid>
   386b4:	b960      	cbnz	r0, 386d0 <k_mem_slab_alloc+0x74>
   386b6:	4917      	ldr	r1, [pc, #92]	; (38714 <k_mem_slab_alloc+0xb8>)
   386b8:	2372      	movs	r3, #114	; 0x72
   386ba:	4a13      	ldr	r2, [pc, #76]	; (38708 <k_mem_slab_alloc+0xac>)
   386bc:	4813      	ldr	r0, [pc, #76]	; (3870c <k_mem_slab_alloc+0xb0>)
   386be:	f006 f935 	bl	3e92c <printk>
   386c2:	4815      	ldr	r0, [pc, #84]	; (38718 <k_mem_slab_alloc+0xbc>)
   386c4:	f006 f932 	bl	3e92c <printk>
   386c8:	2172      	movs	r1, #114	; 0x72
   386ca:	480f      	ldr	r0, [pc, #60]	; (38708 <k_mem_slab_alloc+0xac>)
   386cc:	f006 f93b 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   386d0:	f387 8811 	msr	BASEPRI, r7
   386d4:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   386d8:	e010      	b.n	386fc <k_mem_slab_alloc+0xa0>
	} else if (timeout == K_NO_WAIT) {
   386da:	b91e      	cbnz	r6, 386e4 <k_mem_slab_alloc+0x88>
		*mem = NULL;
   386dc:	602e      	str	r6, [r5, #0]
		result = -ENOMEM;
   386de:	f06f 040b 	mvn.w	r4, #11
   386e2:	e7e4      	b.n	386ae <k_mem_slab_alloc+0x52>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   386e4:	4622      	mov	r2, r4
   386e6:	4633      	mov	r3, r6
   386e8:	4639      	mov	r1, r7
   386ea:	4805      	ldr	r0, [pc, #20]	; (38700 <k_mem_slab_alloc+0xa4>)
   386ec:	f001 fb84 	bl	39df8 <z_pend_curr>
		if (result == 0) {
   386f0:	4604      	mov	r4, r0
   386f2:	b918      	cbnz	r0, 386fc <k_mem_slab_alloc+0xa0>
			*mem = _current->base.swap_data;
   386f4:	4b09      	ldr	r3, [pc, #36]	; (3871c <k_mem_slab_alloc+0xc0>)
   386f6:	689b      	ldr	r3, [r3, #8]
   386f8:	695b      	ldr	r3, [r3, #20]
   386fa:	602b      	str	r3, [r5, #0]
}
   386fc:	4620      	mov	r0, r4
   386fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38700:	200261a4 	.word	0x200261a4
   38704:	00044e5a 	.word	0x00044e5a
   38708:	00044e3b 	.word	0x00044e3b
   3870c:	00044643 	.word	0x00044643
   38710:	00044e6f 	.word	0x00044e6f
   38714:	00044e84 	.word	0x00044e84
   38718:	00044e9b 	.word	0x00044e9b
   3871c:	2002a214 	.word	0x2002a214

00038720 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   38720:	b570      	push	{r4, r5, r6, lr}
   38722:	4604      	mov	r4, r0
   38724:	460d      	mov	r5, r1
	__asm__ volatile(
   38726:	f04f 0320 	mov.w	r3, #32
   3872a:	f3ef 8611 	mrs	r6, BASEPRI
   3872e:	f383 8811 	msr	BASEPRI, r3
   38732:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   38736:	4823      	ldr	r0, [pc, #140]	; (387c4 <k_mem_slab_free+0xa4>)
   38738:	f001 ff4a 	bl	3a5d0 <z_spin_lock_valid>
   3873c:	b960      	cbnz	r0, 38758 <k_mem_slab_free+0x38>
   3873e:	4922      	ldr	r1, [pc, #136]	; (387c8 <k_mem_slab_free+0xa8>)
   38740:	235f      	movs	r3, #95	; 0x5f
   38742:	4a22      	ldr	r2, [pc, #136]	; (387cc <k_mem_slab_free+0xac>)
   38744:	4822      	ldr	r0, [pc, #136]	; (387d0 <k_mem_slab_free+0xb0>)
   38746:	f006 f8f1 	bl	3e92c <printk>
   3874a:	4822      	ldr	r0, [pc, #136]	; (387d4 <k_mem_slab_free+0xb4>)
   3874c:	f006 f8ee 	bl	3e92c <printk>
   38750:	215f      	movs	r1, #95	; 0x5f
   38752:	481e      	ldr	r0, [pc, #120]	; (387cc <k_mem_slab_free+0xac>)
   38754:	f006 f8f7 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   38758:	481a      	ldr	r0, [pc, #104]	; (387c4 <k_mem_slab_free+0xa4>)
   3875a:	f001 ff57 	bl	3a60c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   3875e:	4620      	mov	r0, r4
   38760:	f001 fc04 	bl	39f6c <z_unpend_first_thread>

	if (pending_thread != NULL) {
   38764:	b180      	cbz	r0, 38788 <k_mem_slab_free+0x68>
}

static ALWAYS_INLINE void
z_arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   38766:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   38768:	682a      	ldr	r2, [r5, #0]
   3876a:	6681      	str	r1, [r0, #104]	; 0x68
	thread->base.swap_data = data;
   3876c:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3876e:	7b42      	ldrb	r2, [r0, #13]
   38770:	06d2      	lsls	r2, r2, #27
   38772:	d103      	bne.n	3877c <k_mem_slab_free+0x5c>
	if (z_is_thread_ready(thread)) {
   38774:	6983      	ldr	r3, [r0, #24]
   38776:	b90b      	cbnz	r3, 3877c <k_mem_slab_free+0x5c>
		z_add_thread_to_ready_q(thread);
   38778:	f001 f88e 	bl	39898 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   3877c:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   3877e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   38782:	4810      	ldr	r0, [pc, #64]	; (387c4 <k_mem_slab_free+0xa4>)
   38784:	f000 be94 	b.w	394b0 <z_reschedule>
		**(char ***)mem = slab->free_list;
   38788:	682b      	ldr	r3, [r5, #0]
   3878a:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3878c:	480d      	ldr	r0, [pc, #52]	; (387c4 <k_mem_slab_free+0xa4>)
   3878e:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   38790:	682b      	ldr	r3, [r5, #0]
   38792:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   38794:	69a3      	ldr	r3, [r4, #24]
   38796:	3b01      	subs	r3, #1
   38798:	61a3      	str	r3, [r4, #24]
   3879a:	f001 ff27 	bl	3a5ec <z_spin_unlock_valid>
   3879e:	b960      	cbnz	r0, 387ba <k_mem_slab_free+0x9a>
   387a0:	490d      	ldr	r1, [pc, #52]	; (387d8 <k_mem_slab_free+0xb8>)
   387a2:	2372      	movs	r3, #114	; 0x72
   387a4:	4a09      	ldr	r2, [pc, #36]	; (387cc <k_mem_slab_free+0xac>)
   387a6:	480a      	ldr	r0, [pc, #40]	; (387d0 <k_mem_slab_free+0xb0>)
   387a8:	f006 f8c0 	bl	3e92c <printk>
   387ac:	480b      	ldr	r0, [pc, #44]	; (387dc <k_mem_slab_free+0xbc>)
   387ae:	f006 f8bd 	bl	3e92c <printk>
   387b2:	2172      	movs	r1, #114	; 0x72
   387b4:	4805      	ldr	r0, [pc, #20]	; (387cc <k_mem_slab_free+0xac>)
   387b6:	f006 f8c6 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   387ba:	f386 8811 	msr	BASEPRI, r6
   387be:	f3bf 8f6f 	isb	sy
}
   387c2:	bd70      	pop	{r4, r5, r6, pc}
   387c4:	200261a4 	.word	0x200261a4
   387c8:	00044e5a 	.word	0x00044e5a
   387cc:	00044e3b 	.word	0x00044e3b
   387d0:	00044643 	.word	0x00044643
   387d4:	00044e6f 	.word	0x00044e6f
   387d8:	00044e84 	.word	0x00044e84
   387dc:	00044e9b 	.word	0x00044e9b

000387e0 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   387e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   387e2:	4d10      	ldr	r5, [pc, #64]	; (38824 <init_static_pools+0x44>)
   387e4:	4c10      	ldr	r4, [pc, #64]	; (38828 <init_static_pools+0x48>)
   387e6:	462f      	mov	r7, r5
   387e8:	4e10      	ldr	r6, [pc, #64]	; (3882c <init_static_pools+0x4c>)
   387ea:	42ac      	cmp	r4, r5
   387ec:	d90c      	bls.n	38808 <init_static_pools+0x28>
   387ee:	4910      	ldr	r1, [pc, #64]	; (38830 <init_static_pools+0x50>)
   387f0:	2328      	movs	r3, #40	; 0x28
   387f2:	4632      	mov	r2, r6
   387f4:	480f      	ldr	r0, [pc, #60]	; (38834 <init_static_pools+0x54>)
   387f6:	f006 f899 	bl	3e92c <printk>
   387fa:	480f      	ldr	r0, [pc, #60]	; (38838 <init_static_pools+0x58>)
   387fc:	f006 f896 	bl	3e92c <printk>
   38800:	2128      	movs	r1, #40	; 0x28
   38802:	4630      	mov	r0, r6
   38804:	f006 f89f 	bl	3e946 <assert_post_action>
   38808:	42bc      	cmp	r4, r7
   3880a:	d301      	bcc.n	38810 <init_static_pools+0x30>
		k_mem_pool_init(p);
	}

	return 0;
}
   3880c:	2000      	movs	r0, #0
   3880e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   38810:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   38814:	4620      	mov	r0, r4
   38816:	e9c4 3305 	strd	r3, r3, [r4, #20]
   3881a:	f005 fccf 	bl	3e1bc <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   3881e:	341c      	adds	r4, #28
   38820:	e7e3      	b.n	387ea <init_static_pools+0xa>
   38822:	bf00      	nop
   38824:	200315dc 	.word	0x200315dc
   38828:	200315c0 	.word	0x200315c0
   3882c:	00049082 	.word	0x00049082
   38830:	0004909f 	.word	0x0004909f
   38834:	00044643 	.word	0x00044643
   38838:	00049063 	.word	0x00049063

0003883c <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   3883c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38840:	4607      	mov	r7, r0
   38842:	b085      	sub	sp, #20
   38844:	460d      	mov	r5, r1
   38846:	4692      	mov	sl, r2
   38848:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3884a:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   3884e:	2b0d      	cmp	r3, #13
   38850:	d805      	bhi.n	3885e <k_mem_pool_alloc+0x22>
   38852:	2b00      	cmp	r3, #0
   38854:	d04c      	beq.n	388f0 <k_mem_pool_alloc+0xb4>
   38856:	4b2a      	ldr	r3, [pc, #168]	; (38900 <k_mem_pool_alloc+0xc4>)
   38858:	685b      	ldr	r3, [r3, #4]
   3885a:	051a      	lsls	r2, r3, #20
   3885c:	d448      	bmi.n	388f0 <k_mem_pool_alloc+0xb4>
	int ret;
	s64_t end = 0;

	__ASSERT(!(z_arch_is_in_isr() && timeout != K_NO_WAIT), "");
   3885e:	2c00      	cmp	r4, #0
   38860:	d139      	bne.n	388d6 <k_mem_pool_alloc+0x9a>
	s64_t end = 0;
   38862:	f04f 0800 	mov.w	r8, #0
	return pool - &_k_mem_pool_list_start[0];
   38866:	4b27      	ldr	r3, [pc, #156]	; (38904 <k_mem_pool_alloc+0xc8>)
   38868:	4e27      	ldr	r6, [pc, #156]	; (38908 <k_mem_pool_alloc+0xcc>)
   3886a:	1afb      	subs	r3, r7, r3
   3886c:	109b      	asrs	r3, r3, #2
   3886e:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   38870:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   38874:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   38876:	ab03      	add	r3, sp, #12
   38878:	aa02      	add	r2, sp, #8
   3887a:	9500      	str	r5, [sp, #0]
   3887c:	4651      	mov	r1, sl
   3887e:	4638      	mov	r0, r7
   38880:	f005 fce2 	bl	3e248 <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   38884:	796b      	ldrb	r3, [r5, #5]
   38886:	9a02      	ldr	r2, [sp, #8]
		block->id.pool = pool_id(p);
   38888:	712e      	strb	r6, [r5, #4]
		block->id.level = level_num;
   3888a:	f362 0303 	bfi	r3, r2, #0, #4
   3888e:	716b      	strb	r3, [r5, #5]
		block->id.block = block_num;
   38890:	686b      	ldr	r3, [r5, #4]
   38892:	9a03      	ldr	r2, [sp, #12]
   38894:	f362 331f 	bfi	r3, r2, #12, #20
   38898:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   3889a:	b1c8      	cbz	r0, 388d0 <k_mem_pool_alloc+0x94>
   3889c:	b1c4      	cbz	r4, 388d0 <k_mem_pool_alloc+0x94>
   3889e:	f110 0f0c 	cmn.w	r0, #12
   388a2:	d115      	bne.n	388d0 <k_mem_pool_alloc+0x94>
	__asm__ volatile(
   388a4:	f04f 0320 	mov.w	r3, #32
   388a8:	f3ef 8011 	mrs	r0, BASEPRI
   388ac:	f383 8811 	msr	BASEPRI, r3
   388b0:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(z_arch_irq_lock(), wait_q, timeout);
   388b4:	4622      	mov	r2, r4
   388b6:	4659      	mov	r1, fp
   388b8:	f001 fa46 	bl	39d48 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   388bc:	1c63      	adds	r3, r4, #1
   388be:	d0da      	beq.n	38876 <k_mem_pool_alloc+0x3a>
	return z_impl_k_uptime_get();
   388c0:	f008 f9c8 	bl	40c54 <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   388c4:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   388c8:	2c00      	cmp	r4, #0
   388ca:	dcd4      	bgt.n	38876 <k_mem_pool_alloc+0x3a>
				break;
			}
		}
	}

	return -EAGAIN;
   388cc:	f06f 000a 	mvn.w	r0, #10
}
   388d0:	b005      	add	sp, #20
   388d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT(!(z_arch_is_in_isr() && timeout != K_NO_WAIT), "");
   388d6:	490d      	ldr	r1, [pc, #52]	; (3890c <k_mem_pool_alloc+0xd0>)
   388d8:	2337      	movs	r3, #55	; 0x37
   388da:	4a0d      	ldr	r2, [pc, #52]	; (38910 <k_mem_pool_alloc+0xd4>)
   388dc:	480d      	ldr	r0, [pc, #52]	; (38914 <k_mem_pool_alloc+0xd8>)
   388de:	f006 f825 	bl	3e92c <printk>
   388e2:	480d      	ldr	r0, [pc, #52]	; (38918 <k_mem_pool_alloc+0xdc>)
   388e4:	f006 f822 	bl	3e92c <printk>
   388e8:	2137      	movs	r1, #55	; 0x37
   388ea:	4809      	ldr	r0, [pc, #36]	; (38910 <k_mem_pool_alloc+0xd4>)
   388ec:	f006 f82b 	bl	3e946 <assert_post_action>
	if (timeout > 0) {
   388f0:	2c00      	cmp	r4, #0
   388f2:	ddb6      	ble.n	38862 <k_mem_pool_alloc+0x26>
   388f4:	f008 f9ae 	bl	40c54 <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   388f8:	eb10 0804 	adds.w	r8, r0, r4
   388fc:	e7b3      	b.n	38866 <k_mem_pool_alloc+0x2a>
   388fe:	bf00      	nop
   38900:	e000ed00 	.word	0xe000ed00
   38904:	200315c0 	.word	0x200315c0
   38908:	b6db6db7 	.word	0xb6db6db7
   3890c:	000490b9 	.word	0x000490b9
   38910:	00049082 	.word	0x00049082
   38914:	00044643 	.word	0x00044643
   38918:	000490df 	.word	0x000490df

0003891c <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
   3891c:	b570      	push	{r4, r5, r6, lr}
   3891e:	7804      	ldrb	r4, [r0, #0]
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   38920:	6802      	ldr	r2, [r0, #0]
   38922:	7841      	ldrb	r1, [r0, #1]
   38924:	4d23      	ldr	r5, [pc, #140]	; (389b4 <k_mem_pool_free_id+0x98>)
   38926:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   3892a:	00a4      	lsls	r4, r4, #2
   3892c:	0b12      	lsrs	r2, r2, #12
   3892e:	f001 010f 	and.w	r1, r1, #15
   38932:	1928      	adds	r0, r5, r4
   38934:	f7e5 fea0 	bl	1e678 <z_sys_mem_pool_block_free>
   38938:	f04f 0320 	mov.w	r3, #32
   3893c:	f3ef 8611 	mrs	r6, BASEPRI
   38940:	f383 8811 	msr	BASEPRI, r3
   38944:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   38948:	481b      	ldr	r0, [pc, #108]	; (389b8 <k_mem_pool_free_id+0x9c>)
   3894a:	f001 fe41 	bl	3a5d0 <z_spin_lock_valid>
   3894e:	b960      	cbnz	r0, 3896a <k_mem_pool_free_id+0x4e>
   38950:	491a      	ldr	r1, [pc, #104]	; (389bc <k_mem_pool_free_id+0xa0>)
   38952:	235f      	movs	r3, #95	; 0x5f
   38954:	4a1a      	ldr	r2, [pc, #104]	; (389c0 <k_mem_pool_free_id+0xa4>)
   38956:	481b      	ldr	r0, [pc, #108]	; (389c4 <k_mem_pool_free_id+0xa8>)
   38958:	f005 ffe8 	bl	3e92c <printk>
   3895c:	481a      	ldr	r0, [pc, #104]	; (389c8 <k_mem_pool_free_id+0xac>)
   3895e:	f005 ffe5 	bl	3e92c <printk>
   38962:	215f      	movs	r1, #95	; 0x5f
   38964:	4816      	ldr	r0, [pc, #88]	; (389c0 <k_mem_pool_free_id+0xa4>)
   38966:	f005 ffee 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   3896a:	4813      	ldr	r0, [pc, #76]	; (389b8 <k_mem_pool_free_id+0x9c>)
   3896c:	f001 fe4e 	bl	3a60c <z_spin_lock_set_owner>
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   38970:	f104 0014 	add.w	r0, r4, #20
   38974:	4428      	add	r0, r5
   38976:	f008 f8c8 	bl	40b0a <z_unpend_all>

	if (need_sched != 0) {
   3897a:	b128      	cbz	r0, 38988 <k_mem_pool_free_id+0x6c>
		z_reschedule(&lock, key);
   3897c:	4631      	mov	r1, r6
	} else {
		k_spin_unlock(&lock, key);
	}
}
   3897e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   38982:	480d      	ldr	r0, [pc, #52]	; (389b8 <k_mem_pool_free_id+0x9c>)
   38984:	f000 bd94 	b.w	394b0 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   38988:	480b      	ldr	r0, [pc, #44]	; (389b8 <k_mem_pool_free_id+0x9c>)
   3898a:	f001 fe2f 	bl	3a5ec <z_spin_unlock_valid>
   3898e:	b960      	cbnz	r0, 389aa <k_mem_pool_free_id+0x8e>
   38990:	490e      	ldr	r1, [pc, #56]	; (389cc <k_mem_pool_free_id+0xb0>)
   38992:	2372      	movs	r3, #114	; 0x72
   38994:	4a0a      	ldr	r2, [pc, #40]	; (389c0 <k_mem_pool_free_id+0xa4>)
   38996:	480b      	ldr	r0, [pc, #44]	; (389c4 <k_mem_pool_free_id+0xa8>)
   38998:	f005 ffc8 	bl	3e92c <printk>
   3899c:	480c      	ldr	r0, [pc, #48]	; (389d0 <k_mem_pool_free_id+0xb4>)
   3899e:	f005 ffc5 	bl	3e92c <printk>
   389a2:	2172      	movs	r1, #114	; 0x72
   389a4:	4806      	ldr	r0, [pc, #24]	; (389c0 <k_mem_pool_free_id+0xa4>)
   389a6:	f005 ffce 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   389aa:	f386 8811 	msr	BASEPRI, r6
   389ae:	f3bf 8f6f 	isb	sy
}
   389b2:	bd70      	pop	{r4, r5, r6, pc}
   389b4:	200315c0 	.word	0x200315c0
   389b8:	2002a20c 	.word	0x2002a20c
   389bc:	00044e5a 	.word	0x00044e5a
   389c0:	00044e3b 	.word	0x00044e3b
   389c4:	00044643 	.word	0x00044643
   389c8:	00044e6f 	.word	0x00044e6f
   389cc:	00044e84 	.word	0x00044e84
   389d0:	00044e9b 	.word	0x00044e9b

000389d4 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   389d4:	4601      	mov	r1, r0
   389d6:	4801      	ldr	r0, [pc, #4]	; (389dc <k_malloc+0x8>)
   389d8:	f008 b818 	b.w	40a0c <k_mem_pool_malloc>
   389dc:	200315c0 	.word	0x200315c0

000389e0 <z_thread_malloc>:

void *z_thread_malloc(size_t size)
{
	void *ret;

	if (_current->resource_pool != NULL) {
   389e0:	4b03      	ldr	r3, [pc, #12]	; (389f0 <z_thread_malloc+0x10>)
{
   389e2:	4601      	mov	r1, r0
	if (_current->resource_pool != NULL) {
   389e4:	689b      	ldr	r3, [r3, #8]
   389e6:	6e18      	ldr	r0, [r3, #96]	; 0x60
   389e8:	b108      	cbz	r0, 389ee <z_thread_malloc+0xe>
		ret = k_mem_pool_malloc(_current->resource_pool, size);
   389ea:	f008 b80f 	b.w	40a0c <k_mem_pool_malloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   389ee:	4770      	bx	lr
   389f0:	2002a214 	.word	0x2002a214

000389f4 <z_impl_k_msgq_put>:
	}
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
   389f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   389f8:	4604      	mov	r4, r0
   389fa:	4688      	mov	r8, r1
   389fc:	4615      	mov	r5, r2
   389fe:	f3ef 8305 	mrs	r3, IPSR
   38a02:	2b0d      	cmp	r3, #13
   38a04:	d804      	bhi.n	38a10 <z_impl_k_msgq_put+0x1c>
   38a06:	b18b      	cbz	r3, 38a2c <z_impl_k_msgq_put+0x38>
   38a08:	4b42      	ldr	r3, [pc, #264]	; (38b14 <z_impl_k_msgq_put+0x120>)
   38a0a:	685b      	ldr	r3, [r3, #4]
   38a0c:	051a      	lsls	r2, r3, #20
   38a0e:	d40d      	bmi.n	38a2c <z_impl_k_msgq_put+0x38>
	__ASSERT(!z_arch_is_in_isr() || timeout == K_NO_WAIT, "");
   38a10:	b165      	cbz	r5, 38a2c <z_impl_k_msgq_put+0x38>
   38a12:	4941      	ldr	r1, [pc, #260]	; (38b18 <z_impl_k_msgq_put+0x124>)
   38a14:	2371      	movs	r3, #113	; 0x71
   38a16:	4a41      	ldr	r2, [pc, #260]	; (38b1c <z_impl_k_msgq_put+0x128>)
   38a18:	4841      	ldr	r0, [pc, #260]	; (38b20 <z_impl_k_msgq_put+0x12c>)
   38a1a:	f005 ff87 	bl	3e92c <printk>
   38a1e:	4841      	ldr	r0, [pc, #260]	; (38b24 <z_impl_k_msgq_put+0x130>)
   38a20:	f005 ff84 	bl	3e92c <printk>
   38a24:	2171      	movs	r1, #113	; 0x71
   38a26:	483d      	ldr	r0, [pc, #244]	; (38b1c <z_impl_k_msgq_put+0x128>)
   38a28:	f005 ff8d 	bl	3e946 <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   38a2c:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   38a30:	f04f 0320 	mov.w	r3, #32
   38a34:	f3ef 8711 	mrs	r7, BASEPRI
   38a38:	f383 8811 	msr	BASEPRI, r3
   38a3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   38a40:	4630      	mov	r0, r6
   38a42:	f001 fdc5 	bl	3a5d0 <z_spin_lock_valid>
   38a46:	b960      	cbnz	r0, 38a62 <z_impl_k_msgq_put+0x6e>
   38a48:	4937      	ldr	r1, [pc, #220]	; (38b28 <z_impl_k_msgq_put+0x134>)
   38a4a:	235f      	movs	r3, #95	; 0x5f
   38a4c:	4a37      	ldr	r2, [pc, #220]	; (38b2c <z_impl_k_msgq_put+0x138>)
   38a4e:	4834      	ldr	r0, [pc, #208]	; (38b20 <z_impl_k_msgq_put+0x12c>)
   38a50:	f005 ff6c 	bl	3e92c <printk>
   38a54:	4836      	ldr	r0, [pc, #216]	; (38b30 <z_impl_k_msgq_put+0x13c>)
   38a56:	f005 ff69 	bl	3e92c <printk>
   38a5a:	215f      	movs	r1, #95	; 0x5f
   38a5c:	4833      	ldr	r0, [pc, #204]	; (38b2c <z_impl_k_msgq_put+0x138>)
   38a5e:	f005 ff72 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   38a62:	4630      	mov	r0, r6
   38a64:	f001 fdd2 	bl	3a60c <z_spin_lock_set_owner>

	if (msgq->used_msgs < msgq->max_msgs) {
   38a68:	6a62      	ldr	r2, [r4, #36]	; 0x24
   38a6a:	6923      	ldr	r3, [r4, #16]
   38a6c:	429a      	cmp	r2, r3
   38a6e:	d241      	bcs.n	38af4 <z_impl_k_msgq_put+0x100>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   38a70:	4620      	mov	r0, r4
   38a72:	f001 fa7b 	bl	39f6c <z_unpend_first_thread>
		if (pending_thread != NULL) {
   38a76:	68e2      	ldr	r2, [r4, #12]
   38a78:	4605      	mov	r5, r0
   38a7a:	4641      	mov	r1, r8
   38a7c:	b1a0      	cbz	r0, 38aa8 <z_impl_k_msgq_put+0xb4>
   38a7e:	6940      	ldr	r0, [r0, #20]
   38a80:	f008 f96e 	bl	40d60 <memcpy>
   38a84:	2300      	movs	r3, #0
   38a86:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   38a88:	7b6b      	ldrb	r3, [r5, #13]
   38a8a:	06db      	lsls	r3, r3, #27
   38a8c:	d104      	bne.n	38a98 <z_impl_k_msgq_put+0xa4>
	if (z_is_thread_ready(thread)) {
   38a8e:	69ab      	ldr	r3, [r5, #24]
   38a90:	b913      	cbnz	r3, 38a98 <z_impl_k_msgq_put+0xa4>
		z_add_thread_to_ready_q(thread);
   38a92:	4628      	mov	r0, r5
   38a94:	f000 ff00 	bl	39898 <z_add_thread_to_ready_q>
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			z_arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   38a98:	4639      	mov	r1, r7
   38a9a:	4630      	mov	r0, r6
   38a9c:	f000 fd08 	bl	394b0 <z_reschedule>
			return 0;
   38aa0:	2400      	movs	r4, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   38aa2:	4620      	mov	r0, r4
   38aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   38aa8:	6a20      	ldr	r0, [r4, #32]
   38aaa:	f008 f959 	bl	40d60 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   38aae:	6a23      	ldr	r3, [r4, #32]
   38ab0:	68e2      	ldr	r2, [r4, #12]
   38ab2:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   38ab4:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   38ab6:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   38ab8:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   38aba:	bf04      	itt	eq
   38abc:	6963      	ldreq	r3, [r4, #20]
   38abe:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   38ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   38ac2:	3301      	adds	r3, #1
   38ac4:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
   38ac6:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   38ac8:	4630      	mov	r0, r6
   38aca:	f001 fd8f 	bl	3a5ec <z_spin_unlock_valid>
   38ace:	b960      	cbnz	r0, 38aea <z_impl_k_msgq_put+0xf6>
   38ad0:	4918      	ldr	r1, [pc, #96]	; (38b34 <z_impl_k_msgq_put+0x140>)
   38ad2:	2372      	movs	r3, #114	; 0x72
   38ad4:	4a15      	ldr	r2, [pc, #84]	; (38b2c <z_impl_k_msgq_put+0x138>)
   38ad6:	4812      	ldr	r0, [pc, #72]	; (38b20 <z_impl_k_msgq_put+0x12c>)
   38ad8:	f005 ff28 	bl	3e92c <printk>
   38adc:	4816      	ldr	r0, [pc, #88]	; (38b38 <z_impl_k_msgq_put+0x144>)
   38ade:	f005 ff25 	bl	3e92c <printk>
   38ae2:	2172      	movs	r1, #114	; 0x72
   38ae4:	4811      	ldr	r0, [pc, #68]	; (38b2c <z_impl_k_msgq_put+0x138>)
   38ae6:	f005 ff2e 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   38aea:	f387 8811 	msr	BASEPRI, r7
   38aee:	f3bf 8f6f 	isb	sy
	return result;
   38af2:	e7d6      	b.n	38aa2 <z_impl_k_msgq_put+0xae>
	} else if (timeout == K_NO_WAIT) {
   38af4:	b15d      	cbz	r5, 38b0e <z_impl_k_msgq_put+0x11a>
		_current->base.swap_data = data;
   38af6:	4b11      	ldr	r3, [pc, #68]	; (38b3c <z_impl_k_msgq_put+0x148>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   38af8:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   38afa:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   38afc:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   38afe:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   38b02:	4630      	mov	r0, r6
   38b04:	462b      	mov	r3, r5
}
   38b06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   38b0a:	f001 b975 	b.w	39df8 <z_pend_curr>
		result = -ENOMSG;
   38b0e:	f06f 0422 	mvn.w	r4, #34	; 0x22
   38b12:	e7d9      	b.n	38ac8 <z_impl_k_msgq_put+0xd4>
   38b14:	e000ed00 	.word	0xe000ed00
   38b18:	00049128 	.word	0x00049128
   38b1c:	000490e2 	.word	0x000490e2
   38b20:	00044643 	.word	0x00044643
   38b24:	000490df 	.word	0x000490df
   38b28:	00044e5a 	.word	0x00044e5a
   38b2c:	00044e3b 	.word	0x00044e3b
   38b30:	00044e6f 	.word	0x00044e6f
   38b34:	00044e84 	.word	0x00044e84
   38b38:	00044e9b 	.word	0x00044e9b
   38b3c:	2002a214 	.word	0x2002a214

00038b40 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
   38b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38b44:	4604      	mov	r4, r0
   38b46:	4688      	mov	r8, r1
   38b48:	4615      	mov	r5, r2
   38b4a:	f3ef 8305 	mrs	r3, IPSR
   38b4e:	2b0d      	cmp	r3, #13
   38b50:	d804      	bhi.n	38b5c <z_impl_k_msgq_get+0x1c>
   38b52:	b18b      	cbz	r3, 38b78 <z_impl_k_msgq_get+0x38>
   38b54:	4b48      	ldr	r3, [pc, #288]	; (38c78 <z_impl_k_msgq_get+0x138>)
   38b56:	685b      	ldr	r3, [r3, #4]
   38b58:	051a      	lsls	r2, r3, #20
   38b5a:	d40d      	bmi.n	38b78 <z_impl_k_msgq_get+0x38>
	__ASSERT(!z_arch_is_in_isr() || timeout == K_NO_WAIT, "");
   38b5c:	b165      	cbz	r5, 38b78 <z_impl_k_msgq_get+0x38>
   38b5e:	4947      	ldr	r1, [pc, #284]	; (38c7c <z_impl_k_msgq_get+0x13c>)
   38b60:	23bc      	movs	r3, #188	; 0xbc
   38b62:	4a47      	ldr	r2, [pc, #284]	; (38c80 <z_impl_k_msgq_get+0x140>)
   38b64:	4847      	ldr	r0, [pc, #284]	; (38c84 <z_impl_k_msgq_get+0x144>)
   38b66:	f005 fee1 	bl	3e92c <printk>
   38b6a:	4847      	ldr	r0, [pc, #284]	; (38c88 <z_impl_k_msgq_get+0x148>)
   38b6c:	f005 fede 	bl	3e92c <printk>
   38b70:	21bc      	movs	r1, #188	; 0xbc
   38b72:	4843      	ldr	r0, [pc, #268]	; (38c80 <z_impl_k_msgq_get+0x140>)
   38b74:	f005 fee7 	bl	3e946 <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   38b78:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   38b7c:	f04f 0320 	mov.w	r3, #32
   38b80:	f3ef 8711 	mrs	r7, BASEPRI
   38b84:	f383 8811 	msr	BASEPRI, r3
   38b88:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   38b8c:	4630      	mov	r0, r6
   38b8e:	f001 fd1f 	bl	3a5d0 <z_spin_lock_valid>
   38b92:	b960      	cbnz	r0, 38bae <z_impl_k_msgq_get+0x6e>
   38b94:	493d      	ldr	r1, [pc, #244]	; (38c8c <z_impl_k_msgq_get+0x14c>)
   38b96:	235f      	movs	r3, #95	; 0x5f
   38b98:	4a3d      	ldr	r2, [pc, #244]	; (38c90 <z_impl_k_msgq_get+0x150>)
   38b9a:	483a      	ldr	r0, [pc, #232]	; (38c84 <z_impl_k_msgq_get+0x144>)
   38b9c:	f005 fec6 	bl	3e92c <printk>
   38ba0:	483c      	ldr	r0, [pc, #240]	; (38c94 <z_impl_k_msgq_get+0x154>)
   38ba2:	f005 fec3 	bl	3e92c <printk>
   38ba6:	215f      	movs	r1, #95	; 0x5f
   38ba8:	4839      	ldr	r0, [pc, #228]	; (38c90 <z_impl_k_msgq_get+0x150>)
   38baa:	f005 fecc 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   38bae:	4630      	mov	r0, r6
   38bb0:	f001 fd2c 	bl	3a60c <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0) {
   38bb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   38bb6:	2b00      	cmp	r3, #0
   38bb8:	d039      	beq.n	38c2e <z_impl_k_msgq_get+0xee>
   38bba:	68e2      	ldr	r2, [r4, #12]
   38bbc:	69e1      	ldr	r1, [r4, #28]
   38bbe:	4640      	mov	r0, r8
   38bc0:	f008 f8ce 	bl	40d60 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   38bc4:	69e3      	ldr	r3, [r4, #28]
   38bc6:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   38bc8:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   38bca:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   38bcc:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   38bce:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   38bd0:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   38bd2:	bf04      	itt	eq
   38bd4:	6963      	ldreq	r3, [r4, #20]
   38bd6:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   38bd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   38bda:	3b01      	subs	r3, #1
   38bdc:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   38bde:	f001 f9c5 	bl	39f6c <z_unpend_first_thread>
		if (pending_thread != NULL) {
   38be2:	4605      	mov	r5, r0
   38be4:	2800      	cmp	r0, #0
   38be6:	d031      	beq.n	38c4c <z_impl_k_msgq_get+0x10c>
   38be8:	68e2      	ldr	r2, [r4, #12]
   38bea:	6941      	ldr	r1, [r0, #20]
   38bec:	6a20      	ldr	r0, [r4, #32]
   38bee:	f008 f8b7 	bl	40d60 <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   38bf2:	6a23      	ldr	r3, [r4, #32]
   38bf4:	68e2      	ldr	r2, [r4, #12]
   38bf6:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   38bf8:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   38bfa:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   38bfc:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   38bfe:	bf04      	itt	eq
   38c00:	6963      	ldreq	r3, [r4, #20]
   38c02:	6223      	streq	r3, [r4, #32]
			}
			msgq->used_msgs++;
   38c04:	6a63      	ldr	r3, [r4, #36]	; 0x24
   38c06:	3301      	adds	r3, #1
   38c08:	6263      	str	r3, [r4, #36]	; 0x24
   38c0a:	2300      	movs	r3, #0
   38c0c:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   38c0e:	7b6b      	ldrb	r3, [r5, #13]
   38c10:	06db      	lsls	r3, r3, #27
   38c12:	d104      	bne.n	38c1e <z_impl_k_msgq_get+0xde>
	if (z_is_thread_ready(thread)) {
   38c14:	69ab      	ldr	r3, [r5, #24]
   38c16:	b913      	cbnz	r3, 38c1e <z_impl_k_msgq_get+0xde>
		z_add_thread_to_ready_q(thread);
   38c18:	4628      	mov	r0, r5
   38c1a:	f000 fe3d 	bl	39898 <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			z_arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   38c1e:	4639      	mov	r1, r7
   38c20:	4630      	mov	r0, r6
   38c22:	f000 fc45 	bl	394b0 <z_reschedule>
			return 0;
   38c26:	2500      	movs	r5, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   38c28:	4628      	mov	r0, r5
   38c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   38c2e:	b15d      	cbz	r5, 38c48 <z_impl_k_msgq_get+0x108>
		_current->base.swap_data = data;
   38c30:	4b19      	ldr	r3, [pc, #100]	; (38c98 <z_impl_k_msgq_get+0x158>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   38c32:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   38c34:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   38c36:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   38c38:	f8c3 8014 	str.w	r8, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   38c3c:	4630      	mov	r0, r6
   38c3e:	462b      	mov	r3, r5
}
   38c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   38c44:	f001 b8d8 	b.w	39df8 <z_pend_curr>
		result = -ENOMSG;
   38c48:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   38c4c:	4630      	mov	r0, r6
   38c4e:	f001 fccd 	bl	3a5ec <z_spin_unlock_valid>
   38c52:	b960      	cbnz	r0, 38c6e <z_impl_k_msgq_get+0x12e>
   38c54:	4911      	ldr	r1, [pc, #68]	; (38c9c <z_impl_k_msgq_get+0x15c>)
   38c56:	2372      	movs	r3, #114	; 0x72
   38c58:	4a0d      	ldr	r2, [pc, #52]	; (38c90 <z_impl_k_msgq_get+0x150>)
   38c5a:	480a      	ldr	r0, [pc, #40]	; (38c84 <z_impl_k_msgq_get+0x144>)
   38c5c:	f005 fe66 	bl	3e92c <printk>
   38c60:	480f      	ldr	r0, [pc, #60]	; (38ca0 <z_impl_k_msgq_get+0x160>)
   38c62:	f005 fe63 	bl	3e92c <printk>
   38c66:	2172      	movs	r1, #114	; 0x72
   38c68:	4809      	ldr	r0, [pc, #36]	; (38c90 <z_impl_k_msgq_get+0x150>)
   38c6a:	f005 fe6c 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   38c6e:	f387 8811 	msr	BASEPRI, r7
   38c72:	f3bf 8f6f 	isb	sy
	return result;
   38c76:	e7d7      	b.n	38c28 <z_impl_k_msgq_get+0xe8>
   38c78:	e000ed00 	.word	0xe000ed00
   38c7c:	00049128 	.word	0x00049128
   38c80:	000490e2 	.word	0x000490e2
   38c84:	00044643 	.word	0x00044643
   38c88:	000490df 	.word	0x000490df
   38c8c:	00044e5a 	.word	0x00044e5a
   38c90:	00044e3b 	.word	0x00044e3b
   38c94:	00044e6f 	.word	0x00044e6f
   38c98:	2002a214 	.word	0x2002a214
   38c9c:	00044e84 	.word	0x00044e84
   38ca0:	00044e9b 	.word	0x00044e9b

00038ca4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   38ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38ca6:	4604      	mov	r4, r0
   38ca8:	460e      	mov	r6, r1
	__asm__ volatile(
   38caa:	f04f 0320 	mov.w	r3, #32
   38cae:	f3ef 8511 	mrs	r5, BASEPRI
   38cb2:	f383 8811 	msr	BASEPRI, r3
   38cb6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   38cba:	485f      	ldr	r0, [pc, #380]	; (38e38 <z_impl_k_mutex_lock+0x194>)
   38cbc:	f001 fc88 	bl	3a5d0 <z_spin_lock_valid>
   38cc0:	b960      	cbnz	r0, 38cdc <z_impl_k_mutex_lock+0x38>
   38cc2:	495e      	ldr	r1, [pc, #376]	; (38e3c <z_impl_k_mutex_lock+0x198>)
   38cc4:	235f      	movs	r3, #95	; 0x5f
   38cc6:	4a5e      	ldr	r2, [pc, #376]	; (38e40 <z_impl_k_mutex_lock+0x19c>)
   38cc8:	485e      	ldr	r0, [pc, #376]	; (38e44 <z_impl_k_mutex_lock+0x1a0>)
   38cca:	f005 fe2f 	bl	3e92c <printk>
   38cce:	485e      	ldr	r0, [pc, #376]	; (38e48 <z_impl_k_mutex_lock+0x1a4>)
   38cd0:	f005 fe2c 	bl	3e92c <printk>
   38cd4:	215f      	movs	r1, #95	; 0x5f
   38cd6:	485a      	ldr	r0, [pc, #360]	; (38e40 <z_impl_k_mutex_lock+0x19c>)
   38cd8:	f005 fe35 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   38cdc:	4856      	ldr	r0, [pc, #344]	; (38e38 <z_impl_k_mutex_lock+0x194>)
   38cde:	f001 fc95 	bl	3a60c <z_spin_lock_set_owner>
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   38ce2:	68e3      	ldr	r3, [r4, #12]
   38ce4:	4a59      	ldr	r2, [pc, #356]	; (38e4c <z_impl_k_mutex_lock+0x1a8>)
   38ce6:	b1eb      	cbz	r3, 38d24 <z_impl_k_mutex_lock+0x80>
   38ce8:	68a0      	ldr	r0, [r4, #8]
   38cea:	6891      	ldr	r1, [r2, #8]
   38cec:	4288      	cmp	r0, r1
   38cee:	d038      	beq.n	38d62 <z_impl_k_mutex_lock+0xbe>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   38cf0:	2e00      	cmp	r6, #0
   38cf2:	d138      	bne.n	38d66 <z_impl_k_mutex_lock+0xc2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   38cf4:	4850      	ldr	r0, [pc, #320]	; (38e38 <z_impl_k_mutex_lock+0x194>)
   38cf6:	f001 fc79 	bl	3a5ec <z_spin_unlock_valid>
   38cfa:	b960      	cbnz	r0, 38d16 <z_impl_k_mutex_lock+0x72>
   38cfc:	4954      	ldr	r1, [pc, #336]	; (38e50 <z_impl_k_mutex_lock+0x1ac>)
   38cfe:	2372      	movs	r3, #114	; 0x72
   38d00:	4a4f      	ldr	r2, [pc, #316]	; (38e40 <z_impl_k_mutex_lock+0x19c>)
   38d02:	4850      	ldr	r0, [pc, #320]	; (38e44 <z_impl_k_mutex_lock+0x1a0>)
   38d04:	f005 fe12 	bl	3e92c <printk>
   38d08:	4852      	ldr	r0, [pc, #328]	; (38e54 <z_impl_k_mutex_lock+0x1b0>)
   38d0a:	f005 fe0f 	bl	3e92c <printk>
   38d0e:	2172      	movs	r1, #114	; 0x72
   38d10:	484b      	ldr	r0, [pc, #300]	; (38e40 <z_impl_k_mutex_lock+0x19c>)
   38d12:	f005 fe18 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   38d16:	f385 8811 	msr	BASEPRI, r5
   38d1a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   38d1e:	f06f 000f 	mvn.w	r0, #15
   38d22:	e01d      	b.n	38d60 <z_impl_k_mutex_lock+0xbc>
					_current->base.prio :
   38d24:	6891      	ldr	r1, [r2, #8]
   38d26:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   38d2a:	3301      	adds	r3, #1
   38d2c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   38d2e:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   38d30:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   38d32:	60a3      	str	r3, [r4, #8]
   38d34:	4840      	ldr	r0, [pc, #256]	; (38e38 <z_impl_k_mutex_lock+0x194>)
   38d36:	f001 fc59 	bl	3a5ec <z_spin_unlock_valid>
   38d3a:	b960      	cbnz	r0, 38d56 <z_impl_k_mutex_lock+0xb2>
   38d3c:	4944      	ldr	r1, [pc, #272]	; (38e50 <z_impl_k_mutex_lock+0x1ac>)
   38d3e:	2372      	movs	r3, #114	; 0x72
   38d40:	4a3f      	ldr	r2, [pc, #252]	; (38e40 <z_impl_k_mutex_lock+0x19c>)
   38d42:	4840      	ldr	r0, [pc, #256]	; (38e44 <z_impl_k_mutex_lock+0x1a0>)
   38d44:	f005 fdf2 	bl	3e92c <printk>
   38d48:	4842      	ldr	r0, [pc, #264]	; (38e54 <z_impl_k_mutex_lock+0x1b0>)
   38d4a:	f005 fdef 	bl	3e92c <printk>
   38d4e:	2172      	movs	r1, #114	; 0x72
   38d50:	483b      	ldr	r0, [pc, #236]	; (38e40 <z_impl_k_mutex_lock+0x19c>)
   38d52:	f005 fdf8 	bl	3e946 <assert_post_action>
   38d56:	f385 8811 	msr	BASEPRI, r5
   38d5a:	f3bf 8f6f 	isb	sy
		return 0;
   38d5e:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   38d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   38d62:	6921      	ldr	r1, [r4, #16]
   38d64:	e7e1      	b.n	38d2a <z_impl_k_mutex_lock+0x86>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   38d66:	f990 300e 	ldrsb.w	r3, [r0, #14]
   38d6a:	f991 100e 	ldrsb.w	r1, [r1, #14]
   38d6e:	4299      	cmp	r1, r3
   38d70:	bfa8      	it	ge
   38d72:	4619      	movge	r1, r3
   38d74:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   38d78:	4299      	cmp	r1, r3
   38d7a:	da3f      	bge.n	38dfc <z_impl_k_mutex_lock+0x158>
		return z_set_prio(mutex->owner, new_prio);
   38d7c:	f001 f86a 	bl	39e54 <z_set_prio>
   38d80:	4607      	mov	r7, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   38d82:	4633      	mov	r3, r6
   38d84:	4622      	mov	r2, r4
   38d86:	4629      	mov	r1, r5
   38d88:	482b      	ldr	r0, [pc, #172]	; (38e38 <z_impl_k_mutex_lock+0x194>)
   38d8a:	f001 f835 	bl	39df8 <z_pend_curr>
	if (got_mutex == 0) {
   38d8e:	2800      	cmp	r0, #0
   38d90:	d0e6      	beq.n	38d60 <z_impl_k_mutex_lock+0xbc>
	__asm__ volatile(
   38d92:	f04f 0320 	mov.w	r3, #32
   38d96:	f3ef 8511 	mrs	r5, BASEPRI
   38d9a:	f383 8811 	msr	BASEPRI, r3
   38d9e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   38da2:	4825      	ldr	r0, [pc, #148]	; (38e38 <z_impl_k_mutex_lock+0x194>)
   38da4:	f001 fc14 	bl	3a5d0 <z_spin_lock_valid>
   38da8:	b960      	cbnz	r0, 38dc4 <z_impl_k_mutex_lock+0x120>
   38daa:	4924      	ldr	r1, [pc, #144]	; (38e3c <z_impl_k_mutex_lock+0x198>)
   38dac:	235f      	movs	r3, #95	; 0x5f
   38dae:	4a24      	ldr	r2, [pc, #144]	; (38e40 <z_impl_k_mutex_lock+0x19c>)
   38db0:	4824      	ldr	r0, [pc, #144]	; (38e44 <z_impl_k_mutex_lock+0x1a0>)
   38db2:	f005 fdbb 	bl	3e92c <printk>
   38db6:	4824      	ldr	r0, [pc, #144]	; (38e48 <z_impl_k_mutex_lock+0x1a4>)
   38db8:	f005 fdb8 	bl	3e92c <printk>
   38dbc:	215f      	movs	r1, #95	; 0x5f
   38dbe:	4820      	ldr	r0, [pc, #128]	; (38e40 <z_impl_k_mutex_lock+0x19c>)
   38dc0:	f005 fdc1 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   38dc4:	481c      	ldr	r0, [pc, #112]	; (38e38 <z_impl_k_mutex_lock+0x194>)
   38dc6:	f001 fc21 	bl	3a60c <z_spin_lock_set_owner>
	return list->head == list;
   38dca:	6823      	ldr	r3, [r4, #0]
   38dcc:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38dce:	429c      	cmp	r4, r3
   38dd0:	d007      	beq.n	38de2 <z_impl_k_mutex_lock+0x13e>
		new_prio_for_inheritance(waiter->base.prio, new_prio) :
   38dd2:	b133      	cbz	r3, 38de2 <z_impl_k_mutex_lock+0x13e>
   38dd4:	f993 300e 	ldrsb.w	r3, [r3, #14]
   38dd8:	4299      	cmp	r1, r3
   38dda:	bfa8      	it	ge
   38ddc:	4619      	movge	r1, r3
   38dde:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   38de2:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   38de4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   38de8:	4299      	cmp	r1, r3
   38dea:	d109      	bne.n	38e00 <z_impl_k_mutex_lock+0x15c>
	if (resched) {
   38dec:	b16f      	cbz	r7, 38e0a <z_impl_k_mutex_lock+0x166>
		z_reschedule(&lock, key);
   38dee:	4629      	mov	r1, r5
   38df0:	4811      	ldr	r0, [pc, #68]	; (38e38 <z_impl_k_mutex_lock+0x194>)
   38df2:	f000 fb5d 	bl	394b0 <z_reschedule>
	return -EAGAIN;
   38df6:	f06f 000a 	mvn.w	r0, #10
   38dfa:	e7b1      	b.n	38d60 <z_impl_k_mutex_lock+0xbc>
	bool resched = false;
   38dfc:	2700      	movs	r7, #0
   38dfe:	e7c0      	b.n	38d82 <z_impl_k_mutex_lock+0xde>
		return z_set_prio(mutex->owner, new_prio);
   38e00:	f001 f828 	bl	39e54 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   38e04:	2800      	cmp	r0, #0
   38e06:	d1f2      	bne.n	38dee <z_impl_k_mutex_lock+0x14a>
   38e08:	e7f0      	b.n	38dec <z_impl_k_mutex_lock+0x148>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   38e0a:	480b      	ldr	r0, [pc, #44]	; (38e38 <z_impl_k_mutex_lock+0x194>)
   38e0c:	f001 fbee 	bl	3a5ec <z_spin_unlock_valid>
   38e10:	b960      	cbnz	r0, 38e2c <z_impl_k_mutex_lock+0x188>
   38e12:	490f      	ldr	r1, [pc, #60]	; (38e50 <z_impl_k_mutex_lock+0x1ac>)
   38e14:	2372      	movs	r3, #114	; 0x72
   38e16:	4a0a      	ldr	r2, [pc, #40]	; (38e40 <z_impl_k_mutex_lock+0x19c>)
   38e18:	480a      	ldr	r0, [pc, #40]	; (38e44 <z_impl_k_mutex_lock+0x1a0>)
   38e1a:	f005 fd87 	bl	3e92c <printk>
   38e1e:	480d      	ldr	r0, [pc, #52]	; (38e54 <z_impl_k_mutex_lock+0x1b0>)
   38e20:	f005 fd84 	bl	3e92c <printk>
   38e24:	2172      	movs	r1, #114	; 0x72
   38e26:	4806      	ldr	r0, [pc, #24]	; (38e40 <z_impl_k_mutex_lock+0x19c>)
   38e28:	f005 fd8d 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   38e2c:	f385 8811 	msr	BASEPRI, r5
   38e30:	f3bf 8f6f 	isb	sy
   38e34:	e7df      	b.n	38df6 <z_impl_k_mutex_lock+0x152>
   38e36:	bf00      	nop
   38e38:	2002a210 	.word	0x2002a210
   38e3c:	00044e5a 	.word	0x00044e5a
   38e40:	00044e3b 	.word	0x00044e3b
   38e44:	00044643 	.word	0x00044643
   38e48:	00044e6f 	.word	0x00044e6f
   38e4c:	2002a214 	.word	0x2002a214
   38e50:	00044e84 	.word	0x00044e84
   38e54:	00044e9b 	.word	0x00044e9b

00038e58 <z_impl_k_mutex_unlock>:

void z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
	struct k_thread *new_owner;

	__ASSERT(mutex->lock_count > 0U, "");
   38e58:	68c3      	ldr	r3, [r0, #12]
{
   38e5a:	b570      	push	{r4, r5, r6, lr}
   38e5c:	4604      	mov	r4, r0
	__ASSERT(mutex->lock_count > 0U, "");
   38e5e:	b963      	cbnz	r3, 38e7a <z_impl_k_mutex_unlock+0x22>
   38e60:	495c      	ldr	r1, [pc, #368]	; (38fd4 <z_impl_k_mutex_unlock+0x17c>)
   38e62:	23d2      	movs	r3, #210	; 0xd2
   38e64:	4a5c      	ldr	r2, [pc, #368]	; (38fd8 <z_impl_k_mutex_unlock+0x180>)
   38e66:	485d      	ldr	r0, [pc, #372]	; (38fdc <z_impl_k_mutex_unlock+0x184>)
   38e68:	f005 fd60 	bl	3e92c <printk>
   38e6c:	485c      	ldr	r0, [pc, #368]	; (38fe0 <z_impl_k_mutex_unlock+0x188>)
   38e6e:	f005 fd5d 	bl	3e92c <printk>
   38e72:	21d2      	movs	r1, #210	; 0xd2
   38e74:	4858      	ldr	r0, [pc, #352]	; (38fd8 <z_impl_k_mutex_unlock+0x180>)
   38e76:	f005 fd66 	bl	3e946 <assert_post_action>
	__ASSERT(mutex->owner == _current, "");
   38e7a:	4d5a      	ldr	r5, [pc, #360]	; (38fe4 <z_impl_k_mutex_unlock+0x18c>)
   38e7c:	68a2      	ldr	r2, [r4, #8]
   38e7e:	68ab      	ldr	r3, [r5, #8]
   38e80:	429a      	cmp	r2, r3
   38e82:	d00c      	beq.n	38e9e <z_impl_k_mutex_unlock+0x46>
   38e84:	4958      	ldr	r1, [pc, #352]	; (38fe8 <z_impl_k_mutex_unlock+0x190>)
   38e86:	23d3      	movs	r3, #211	; 0xd3
   38e88:	4a53      	ldr	r2, [pc, #332]	; (38fd8 <z_impl_k_mutex_unlock+0x180>)
   38e8a:	4854      	ldr	r0, [pc, #336]	; (38fdc <z_impl_k_mutex_unlock+0x184>)
   38e8c:	f005 fd4e 	bl	3e92c <printk>
   38e90:	4853      	ldr	r0, [pc, #332]	; (38fe0 <z_impl_k_mutex_unlock+0x188>)
   38e92:	f005 fd4b 	bl	3e92c <printk>
   38e96:	21d3      	movs	r1, #211	; 0xd3
   38e98:	484f      	ldr	r0, [pc, #316]	; (38fd8 <z_impl_k_mutex_unlock+0x180>)
   38e9a:	f005 fd54 	bl	3e946 <assert_post_action>
   38e9e:	f3ef 8305 	mrs	r3, IPSR
   38ea2:	2b0d      	cmp	r3, #13
   38ea4:	d804      	bhi.n	38eb0 <z_impl_k_mutex_unlock+0x58>
   38ea6:	b193      	cbz	r3, 38ece <z_impl_k_mutex_unlock+0x76>
   38ea8:	4b50      	ldr	r3, [pc, #320]	; (38fec <z_impl_k_mutex_unlock+0x194>)
   38eaa:	685b      	ldr	r3, [r3, #4]
   38eac:	051a      	lsls	r2, r3, #20
   38eae:	d40e      	bmi.n	38ece <z_impl_k_mutex_unlock+0x76>
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!z_arch_is_in_isr(), "");
   38eb0:	494f      	ldr	r1, [pc, #316]	; (38ff0 <z_impl_k_mutex_unlock+0x198>)
   38eb2:	f44f 7386 	mov.w	r3, #268	; 0x10c
   38eb6:	4a4f      	ldr	r2, [pc, #316]	; (38ff4 <z_impl_k_mutex_unlock+0x19c>)
   38eb8:	4848      	ldr	r0, [pc, #288]	; (38fdc <z_impl_k_mutex_unlock+0x184>)
   38eba:	f005 fd37 	bl	3e92c <printk>
   38ebe:	4848      	ldr	r0, [pc, #288]	; (38fe0 <z_impl_k_mutex_unlock+0x188>)
   38ec0:	f005 fd34 	bl	3e92c <printk>
   38ec4:	f44f 7186 	mov.w	r1, #268	; 0x10c
   38ec8:	484a      	ldr	r0, [pc, #296]	; (38ff4 <z_impl_k_mutex_unlock+0x19c>)
   38eca:	f005 fd3c 	bl	3e946 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   38ece:	68ab      	ldr	r3, [r5, #8]
   38ed0:	7bdb      	ldrb	r3, [r3, #15]
   38ed2:	2b01      	cmp	r3, #1
   38ed4:	d10e      	bne.n	38ef4 <z_impl_k_mutex_unlock+0x9c>
   38ed6:	4948      	ldr	r1, [pc, #288]	; (38ff8 <z_impl_k_mutex_unlock+0x1a0>)
   38ed8:	f240 130d 	movw	r3, #269	; 0x10d
   38edc:	4a45      	ldr	r2, [pc, #276]	; (38ff4 <z_impl_k_mutex_unlock+0x19c>)
   38ede:	483f      	ldr	r0, [pc, #252]	; (38fdc <z_impl_k_mutex_unlock+0x184>)
   38ee0:	f005 fd24 	bl	3e92c <printk>
   38ee4:	483e      	ldr	r0, [pc, #248]	; (38fe0 <z_impl_k_mutex_unlock+0x188>)
   38ee6:	f005 fd21 	bl	3e92c <printk>
   38eea:	f240 110d 	movw	r1, #269	; 0x10d
   38eee:	4841      	ldr	r0, [pc, #260]	; (38ff4 <z_impl_k_mutex_unlock+0x19c>)
   38ef0:	f005 fd29 	bl	3e946 <assert_post_action>

	--_current->base.sched_locked;
   38ef4:	68aa      	ldr	r2, [r5, #8]
   38ef6:	7bd3      	ldrb	r3, [r2, #15]
   38ef8:	3b01      	subs	r3, #1
   38efa:	73d3      	strb	r3, [r2, #15]
	sys_trace_void(SYS_TRACE_ID_MUTEX_UNLOCK);
	z_sched_lock();

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count - 1U != 0U) {
   38efc:	68e3      	ldr	r3, [r4, #12]
   38efe:	2b01      	cmp	r3, #1
   38f00:	d005      	beq.n	38f0e <z_impl_k_mutex_unlock+0xb6>
		mutex->lock_count--;
   38f02:	3b01      	subs	r3, #1
   38f04:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	k_sched_unlock();
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);
}
   38f06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   38f0a:	f000 bc43 	b.w	39794 <k_sched_unlock>
	__asm__ volatile(
   38f0e:	f04f 0320 	mov.w	r3, #32
   38f12:	f3ef 8611 	mrs	r6, BASEPRI
   38f16:	f383 8811 	msr	BASEPRI, r3
   38f1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   38f1e:	4837      	ldr	r0, [pc, #220]	; (38ffc <z_impl_k_mutex_unlock+0x1a4>)
   38f20:	f001 fb56 	bl	3a5d0 <z_spin_lock_valid>
   38f24:	b960      	cbnz	r0, 38f40 <z_impl_k_mutex_unlock+0xe8>
   38f26:	4936      	ldr	r1, [pc, #216]	; (39000 <z_impl_k_mutex_unlock+0x1a8>)
   38f28:	235f      	movs	r3, #95	; 0x5f
   38f2a:	4a36      	ldr	r2, [pc, #216]	; (39004 <z_impl_k_mutex_unlock+0x1ac>)
   38f2c:	482b      	ldr	r0, [pc, #172]	; (38fdc <z_impl_k_mutex_unlock+0x184>)
   38f2e:	f005 fcfd 	bl	3e92c <printk>
   38f32:	4835      	ldr	r0, [pc, #212]	; (39008 <z_impl_k_mutex_unlock+0x1b0>)
   38f34:	f005 fcfa 	bl	3e92c <printk>
   38f38:	215f      	movs	r1, #95	; 0x5f
   38f3a:	4832      	ldr	r0, [pc, #200]	; (39004 <z_impl_k_mutex_unlock+0x1ac>)
   38f3c:	f005 fd03 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   38f40:	482e      	ldr	r0, [pc, #184]	; (38ffc <z_impl_k_mutex_unlock+0x1a4>)
   38f42:	f001 fb63 	bl	3a60c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   38f46:	68a0      	ldr	r0, [r4, #8]
   38f48:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   38f4a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   38f4e:	4299      	cmp	r1, r3
   38f50:	d001      	beq.n	38f56 <z_impl_k_mutex_unlock+0xfe>
		return z_set_prio(mutex->owner, new_prio);
   38f52:	f000 ff7f 	bl	39e54 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   38f56:	4620      	mov	r0, r4
   38f58:	f001 f808 	bl	39f6c <z_unpend_first_thread>
   38f5c:	4605      	mov	r5, r0
	mutex->owner = new_owner;
   38f5e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   38f60:	b308      	cbz	r0, 38fa6 <z_impl_k_mutex_unlock+0x14e>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   38f62:	7b43      	ldrb	r3, [r0, #13]
   38f64:	06db      	lsls	r3, r3, #27
   38f66:	d103      	bne.n	38f70 <z_impl_k_mutex_unlock+0x118>
	if (z_is_thread_ready(thread)) {
   38f68:	6983      	ldr	r3, [r0, #24]
   38f6a:	b90b      	cbnz	r3, 38f70 <z_impl_k_mutex_unlock+0x118>
		z_add_thread_to_ready_q(thread);
   38f6c:	f000 fc94 	bl	39898 <z_add_thread_to_ready_q>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   38f70:	4822      	ldr	r0, [pc, #136]	; (38ffc <z_impl_k_mutex_unlock+0x1a4>)
   38f72:	f001 fb3b 	bl	3a5ec <z_spin_unlock_valid>
   38f76:	b960      	cbnz	r0, 38f92 <z_impl_k_mutex_unlock+0x13a>
   38f78:	4924      	ldr	r1, [pc, #144]	; (3900c <z_impl_k_mutex_unlock+0x1b4>)
   38f7a:	2372      	movs	r3, #114	; 0x72
   38f7c:	4a21      	ldr	r2, [pc, #132]	; (39004 <z_impl_k_mutex_unlock+0x1ac>)
   38f7e:	4817      	ldr	r0, [pc, #92]	; (38fdc <z_impl_k_mutex_unlock+0x184>)
   38f80:	f005 fcd4 	bl	3e92c <printk>
   38f84:	4822      	ldr	r0, [pc, #136]	; (39010 <z_impl_k_mutex_unlock+0x1b8>)
   38f86:	f005 fcd1 	bl	3e92c <printk>
   38f8a:	2172      	movs	r1, #114	; 0x72
   38f8c:	481d      	ldr	r0, [pc, #116]	; (39004 <z_impl_k_mutex_unlock+0x1ac>)
   38f8e:	f005 fcda 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   38f92:	f386 8811 	msr	BASEPRI, r6
   38f96:	f3bf 8f6f 	isb	sy
   38f9a:	2300      	movs	r3, #0
   38f9c:	66ab      	str	r3, [r5, #104]	; 0x68
		mutex->owner_orig_prio = new_owner->base.prio;
   38f9e:	f995 300e 	ldrsb.w	r3, [r5, #14]
   38fa2:	6123      	str	r3, [r4, #16]
   38fa4:	e7af      	b.n	38f06 <z_impl_k_mutex_unlock+0xae>
		mutex->lock_count = 0U;
   38fa6:	60e0      	str	r0, [r4, #12]
   38fa8:	4814      	ldr	r0, [pc, #80]	; (38ffc <z_impl_k_mutex_unlock+0x1a4>)
   38faa:	f001 fb1f 	bl	3a5ec <z_spin_unlock_valid>
   38fae:	b960      	cbnz	r0, 38fca <z_impl_k_mutex_unlock+0x172>
   38fb0:	4916      	ldr	r1, [pc, #88]	; (3900c <z_impl_k_mutex_unlock+0x1b4>)
   38fb2:	2372      	movs	r3, #114	; 0x72
   38fb4:	4a13      	ldr	r2, [pc, #76]	; (39004 <z_impl_k_mutex_unlock+0x1ac>)
   38fb6:	4809      	ldr	r0, [pc, #36]	; (38fdc <z_impl_k_mutex_unlock+0x184>)
   38fb8:	f005 fcb8 	bl	3e92c <printk>
   38fbc:	4814      	ldr	r0, [pc, #80]	; (39010 <z_impl_k_mutex_unlock+0x1b8>)
   38fbe:	f005 fcb5 	bl	3e92c <printk>
   38fc2:	2172      	movs	r1, #114	; 0x72
   38fc4:	480f      	ldr	r0, [pc, #60]	; (39004 <z_impl_k_mutex_unlock+0x1ac>)
   38fc6:	f005 fcbe 	bl	3e946 <assert_post_action>
   38fca:	f386 8811 	msr	BASEPRI, r6
   38fce:	f3bf 8f6f 	isb	sy
   38fd2:	e798      	b.n	38f06 <z_impl_k_mutex_unlock+0xae>
   38fd4:	00049167 	.word	0x00049167
   38fd8:	0004914c 	.word	0x0004914c
   38fdc:	00044643 	.word	0x00044643
   38fe0:	000490df 	.word	0x000490df
   38fe4:	2002a214 	.word	0x2002a214
   38fe8:	0004917e 	.word	0x0004917e
   38fec:	e000ed00 	.word	0xe000ed00
   38ff0:	000491c2 	.word	0x000491c2
   38ff4:	0004919e 	.word	0x0004919e
   38ff8:	000491d6 	.word	0x000491d6
   38ffc:	2002a210 	.word	0x2002a210
   39000:	00044e5a 	.word	0x00044e5a
   39004:	00044e3b 	.word	0x00044e3b
   39008:	00044e6f 	.word	0x00044e6f
   3900c:	00044e84 	.word	0x00044e84
   39010:	00044e9b 	.word	0x00044e9b

00039014 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   39014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   39018:	4604      	mov	r4, r0
   3901a:	460e      	mov	r6, r1
   3901c:	4690      	mov	r8, r2
   3901e:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   39020:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   39024:	f04f 0320 	mov.w	r3, #32
   39028:	f3ef 8711 	mrs	r7, BASEPRI
   3902c:	f383 8811 	msr	BASEPRI, r3
   39030:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   39034:	4628      	mov	r0, r5
   39036:	f001 facb 	bl	3a5d0 <z_spin_lock_valid>
   3903a:	b960      	cbnz	r0, 39056 <queue_insert+0x42>
   3903c:	4932      	ldr	r1, [pc, #200]	; (39108 <queue_insert+0xf4>)
   3903e:	235f      	movs	r3, #95	; 0x5f
   39040:	4a32      	ldr	r2, [pc, #200]	; (3910c <queue_insert+0xf8>)
   39042:	4833      	ldr	r0, [pc, #204]	; (39110 <queue_insert+0xfc>)
   39044:	f005 fc72 	bl	3e92c <printk>
   39048:	4832      	ldr	r0, [pc, #200]	; (39114 <queue_insert+0x100>)
   3904a:	f005 fc6f 	bl	3e92c <printk>
   3904e:	215f      	movs	r1, #95	; 0x5f
   39050:	482e      	ldr	r0, [pc, #184]	; (3910c <queue_insert+0xf8>)
   39052:	f005 fc78 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   39056:	4628      	mov	r0, r5
   39058:	f001 fad8 	bl	3a60c <z_spin_lock_set_owner>
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   3905c:	f1b9 0f00 	cmp.w	r9, #0
   39060:	d02c      	beq.n	390bc <queue_insert+0xa8>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   39062:	2008      	movs	r0, #8
   39064:	f7ff fcbc 	bl	389e0 <z_thread_malloc>
		if (anode == NULL) {
   39068:	b9c0      	cbnz	r0, 3909c <queue_insert+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3906a:	4628      	mov	r0, r5
   3906c:	f001 fabe 	bl	3a5ec <z_spin_unlock_valid>
   39070:	b960      	cbnz	r0, 3908c <queue_insert+0x78>
   39072:	4929      	ldr	r1, [pc, #164]	; (39118 <queue_insert+0x104>)
   39074:	2372      	movs	r3, #114	; 0x72
   39076:	4a25      	ldr	r2, [pc, #148]	; (3910c <queue_insert+0xf8>)
   39078:	4825      	ldr	r0, [pc, #148]	; (39110 <queue_insert+0xfc>)
   3907a:	f005 fc57 	bl	3e92c <printk>
   3907e:	4827      	ldr	r0, [pc, #156]	; (3911c <queue_insert+0x108>)
   39080:	f005 fc54 	bl	3e92c <printk>
   39084:	2172      	movs	r1, #114	; 0x72
   39086:	4821      	ldr	r0, [pc, #132]	; (3910c <queue_insert+0xf8>)
   39088:	f005 fc5d 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   3908c:	f387 8811 	msr	BASEPRI, r7
   39090:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   39094:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   39098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   3909c:	2301      	movs	r3, #1
		anode->data = data;
   3909e:	f8c0 8004 	str.w	r8, [r0, #4]
   390a2:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   390a4:	6803      	ldr	r3, [r0, #0]
   390a6:	f003 0203 	and.w	r2, r3, #3
   390aa:	b95e      	cbnz	r6, 390c4 <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   390ac:	6823      	ldr	r3, [r4, #0]
   390ae:	4313      	orrs	r3, r2
   390b0:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   390b2:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   390b4:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   390b6:	b973      	cbnz	r3, 390d6 <queue_insert+0xc2>
	list->tail = node;
   390b8:	6060      	str	r0, [r4, #4]
   390ba:	e00c      	b.n	390d6 <queue_insert+0xc2>
	node->next_and_flags = flags;
   390bc:	f8c8 9000 	str.w	r9, [r8]
   390c0:	4640      	mov	r0, r8
   390c2:	e7ef      	b.n	390a4 <queue_insert+0x90>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   390c4:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   390c6:	f033 0303 	bics.w	r3, r3, #3
   390ca:	d115      	bne.n	390f8 <queue_insert+0xe4>
	parent->next_and_flags = cur_flags | (unative_t)child;
   390cc:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   390ce:	6862      	ldr	r2, [r4, #4]
   390d0:	b962      	cbnz	r2, 390ec <queue_insert+0xd8>
	list->head = node;
   390d2:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   390d6:	2104      	movs	r1, #4
   390d8:	f104 000c 	add.w	r0, r4, #12
   390dc:	f007 fe11 	bl	40d02 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   390e0:	4628      	mov	r0, r5
   390e2:	4639      	mov	r1, r7
   390e4:	f000 f9e4 	bl	394b0 <z_reschedule>
	return 0;
   390e8:	2000      	movs	r0, #0
   390ea:	e7d5      	b.n	39098 <queue_insert+0x84>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   390ec:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   390ee:	f003 0303 	and.w	r3, r3, #3
   390f2:	4303      	orrs	r3, r0
   390f4:	6013      	str	r3, [r2, #0]
   390f6:	e7df      	b.n	390b8 <queue_insert+0xa4>
   390f8:	4313      	orrs	r3, r2
   390fa:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   390fc:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   390fe:	f003 0303 	and.w	r3, r3, #3
   39102:	4318      	orrs	r0, r3
   39104:	6030      	str	r0, [r6, #0]
   39106:	e7e6      	b.n	390d6 <queue_insert+0xc2>
   39108:	00044e5a 	.word	0x00044e5a
   3910c:	00044e3b 	.word	0x00044e3b
   39110:	00044643 	.word	0x00044643
   39114:	00044e6f 	.word	0x00044e6f
   39118:	00044e84 	.word	0x00044e84
   3911c:	00044e9b 	.word	0x00044e9b

00039120 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   39120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39124:	4605      	mov	r5, r0
   39126:	b089      	sub	sp, #36	; 0x24
   39128:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   3912a:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   3912e:	f04f 0320 	mov.w	r3, #32
   39132:	f3ef 8811 	mrs	r8, BASEPRI
   39136:	f383 8811 	msr	BASEPRI, r3
   3913a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3913e:	4630      	mov	r0, r6
   39140:	f001 fa46 	bl	3a5d0 <z_spin_lock_valid>
   39144:	b960      	cbnz	r0, 39160 <z_impl_k_queue_get+0x40>
   39146:	495d      	ldr	r1, [pc, #372]	; (392bc <z_impl_k_queue_get+0x19c>)
   39148:	235f      	movs	r3, #95	; 0x5f
   3914a:	4a5d      	ldr	r2, [pc, #372]	; (392c0 <z_impl_k_queue_get+0x1a0>)
   3914c:	485d      	ldr	r0, [pc, #372]	; (392c4 <z_impl_k_queue_get+0x1a4>)
   3914e:	f005 fbed 	bl	3e92c <printk>
   39152:	485d      	ldr	r0, [pc, #372]	; (392c8 <z_impl_k_queue_get+0x1a8>)
   39154:	f005 fbea 	bl	3e92c <printk>
   39158:	215f      	movs	r1, #95	; 0x5f
   3915a:	4859      	ldr	r0, [pc, #356]	; (392c0 <z_impl_k_queue_get+0x1a0>)
   3915c:	f005 fbf3 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   39160:	4630      	mov	r0, r6
   39162:	f001 fa53 	bl	3a60c <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   39166:	682c      	ldr	r4, [r5, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   39168:	b32c      	cbz	r4, 391b6 <z_impl_k_queue_get+0x96>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3916a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   3916c:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3916e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   39172:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   39174:	4620      	mov	r0, r4
	list->head = node;
   39176:	602b      	str	r3, [r5, #0]
	list->tail = node;
   39178:	bf08      	it	eq
   3917a:	606b      	streq	r3, [r5, #4]
   3917c:	2101      	movs	r1, #1
   3917e:	f007 fc78 	bl	40a72 <z_queue_node_peek>
   39182:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   39184:	4630      	mov	r0, r6
   39186:	f001 fa31 	bl	3a5ec <z_spin_unlock_valid>
   3918a:	b960      	cbnz	r0, 391a6 <z_impl_k_queue_get+0x86>
   3918c:	494f      	ldr	r1, [pc, #316]	; (392cc <z_impl_k_queue_get+0x1ac>)
   3918e:	2372      	movs	r3, #114	; 0x72
   39190:	4a4b      	ldr	r2, [pc, #300]	; (392c0 <z_impl_k_queue_get+0x1a0>)
   39192:	484c      	ldr	r0, [pc, #304]	; (392c4 <z_impl_k_queue_get+0x1a4>)
   39194:	f005 fbca 	bl	3e92c <printk>
   39198:	484d      	ldr	r0, [pc, #308]	; (392d0 <z_impl_k_queue_get+0x1b0>)
   3919a:	f005 fbc7 	bl	3e92c <printk>
   3919e:	2172      	movs	r1, #114	; 0x72
   391a0:	4847      	ldr	r0, [pc, #284]	; (392c0 <z_impl_k_queue_get+0x1a0>)
   391a2:	f005 fbd0 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   391a6:	f388 8811 	msr	BASEPRI, r8
   391aa:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   391ae:	4620      	mov	r0, r4
   391b0:	b009      	add	sp, #36	; 0x24
   391b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   391b6:	4630      	mov	r0, r6
	if (timeout == K_NO_WAIT) {
   391b8:	2f00      	cmp	r7, #0
   391ba:	d0e4      	beq.n	39186 <z_impl_k_queue_get+0x66>
   391bc:	f001 fa16 	bl	3a5ec <z_spin_unlock_valid>
   391c0:	b960      	cbnz	r0, 391dc <z_impl_k_queue_get+0xbc>
   391c2:	4942      	ldr	r1, [pc, #264]	; (392cc <z_impl_k_queue_get+0x1ac>)
   391c4:	2372      	movs	r3, #114	; 0x72
   391c6:	4a3e      	ldr	r2, [pc, #248]	; (392c0 <z_impl_k_queue_get+0x1a0>)
   391c8:	483e      	ldr	r0, [pc, #248]	; (392c4 <z_impl_k_queue_get+0x1a4>)
   391ca:	f005 fbaf 	bl	3e92c <printk>
   391ce:	4840      	ldr	r0, [pc, #256]	; (392d0 <z_impl_k_queue_get+0x1b0>)
   391d0:	f005 fbac 	bl	3e92c <printk>
   391d4:	2172      	movs	r1, #114	; 0x72
   391d6:	483a      	ldr	r0, [pc, #232]	; (392c0 <z_impl_k_queue_get+0x1a0>)
   391d8:	f005 fbb5 	bl	3e946 <assert_post_action>
   391dc:	f388 8811 	msr	BASEPRI, r8
   391e0:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   391e4:	2200      	movs	r2, #0
   391e6:	462b      	mov	r3, r5
   391e8:	2104      	movs	r1, #4
   391ea:	a803      	add	r0, sp, #12
   391ec:	f002 f9ca 	bl	3b584 <k_poll_event_init>
	if (timeout != K_FOREVER) {
   391f0:	1c7a      	adds	r2, r7, #1
   391f2:	d002      	beq.n	391fa <z_impl_k_queue_get+0xda>
   391f4:	f007 fd2e 	bl	40c54 <z_impl_k_uptime_get>
   391f8:	4683      	mov	fp, r0
{
   391fa:	f04f 0900 	mov.w	r9, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   391fe:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 392c0 <z_impl_k_queue_get+0x1a0>
   39202:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 392c4 <z_impl_k_queue_get+0x1a4>
		event.state = K_POLL_STATE_NOT_READY;
   39206:	9b06      	ldr	r3, [sp, #24]
   39208:	f36f 3310 	bfc	r3, #12, #5
   3920c:	9306      	str	r3, [sp, #24]
	if (z_syscall_trap()) {
		return (int) z_arch_syscall_invoke3(*(u32_t *)&events, *(u32_t *)&num_events, *(u32_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   3920e:	2101      	movs	r1, #1
   39210:	eba7 0209 	sub.w	r2, r7, r9
   39214:	a803      	add	r0, sp, #12
   39216:	f002 fa07 	bl	3b628 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   3921a:	b118      	cbz	r0, 39224 <z_impl_k_queue_get+0x104>
   3921c:	300b      	adds	r0, #11
   3921e:	d001      	beq.n	39224 <z_impl_k_queue_get+0x104>
			return NULL;
   39220:	2400      	movs	r4, #0
   39222:	e7c4      	b.n	391ae <z_impl_k_queue_get+0x8e>
	__asm__ volatile(
   39224:	f04f 0320 	mov.w	r3, #32
   39228:	f3ef 8211 	mrs	r2, BASEPRI
   3922c:	f383 8811 	msr	BASEPRI, r3
   39230:	f3bf 8f6f 	isb	sy
   39234:	4630      	mov	r0, r6
   39236:	9201      	str	r2, [sp, #4]
   39238:	f001 f9ca 	bl	3a5d0 <z_spin_lock_valid>
   3923c:	b960      	cbnz	r0, 39258 <z_impl_k_queue_get+0x138>
   3923e:	491f      	ldr	r1, [pc, #124]	; (392bc <z_impl_k_queue_get+0x19c>)
   39240:	235f      	movs	r3, #95	; 0x5f
   39242:	4642      	mov	r2, r8
   39244:	4650      	mov	r0, sl
   39246:	f005 fb71 	bl	3e92c <printk>
   3924a:	481f      	ldr	r0, [pc, #124]	; (392c8 <z_impl_k_queue_get+0x1a8>)
   3924c:	f005 fb6e 	bl	3e92c <printk>
   39250:	215f      	movs	r1, #95	; 0x5f
   39252:	4640      	mov	r0, r8
   39254:	f005 fb77 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   39258:	4630      	mov	r0, r6
   3925a:	f001 f9d7 	bl	3a60c <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   3925e:	6828      	ldr	r0, [r5, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   39260:	b138      	cbz	r0, 39272 <z_impl_k_queue_get+0x152>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   39262:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   39264:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   39266:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   3926a:	4290      	cmp	r0, r2
	list->head = node;
   3926c:	602b      	str	r3, [r5, #0]
	list->tail = node;
   3926e:	bf08      	it	eq
   39270:	606b      	streq	r3, [r5, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   39272:	2101      	movs	r1, #1
   39274:	f007 fbfd 	bl	40a72 <z_queue_node_peek>
   39278:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3927a:	4630      	mov	r0, r6
   3927c:	f001 f9b6 	bl	3a5ec <z_spin_unlock_valid>
   39280:	b960      	cbnz	r0, 3929c <z_impl_k_queue_get+0x17c>
   39282:	4912      	ldr	r1, [pc, #72]	; (392cc <z_impl_k_queue_get+0x1ac>)
   39284:	2372      	movs	r3, #114	; 0x72
   39286:	4642      	mov	r2, r8
   39288:	4650      	mov	r0, sl
   3928a:	f005 fb4f 	bl	3e92c <printk>
   3928e:	4810      	ldr	r0, [pc, #64]	; (392d0 <z_impl_k_queue_get+0x1b0>)
   39290:	f005 fb4c 	bl	3e92c <printk>
   39294:	2172      	movs	r1, #114	; 0x72
   39296:	4640      	mov	r0, r8
   39298:	f005 fb55 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   3929c:	9b01      	ldr	r3, [sp, #4]
   3929e:	f383 8811 	msr	BASEPRI, r3
   392a2:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   392a6:	2c00      	cmp	r4, #0
   392a8:	d181      	bne.n	391ae <z_impl_k_queue_get+0x8e>
   392aa:	1c7b      	adds	r3, r7, #1
   392ac:	d0ab      	beq.n	39206 <z_impl_k_queue_get+0xe6>
	return z_impl_k_uptime_get();
   392ae:	f007 fcd1 	bl	40c54 <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   392b2:	eba0 090b 	sub.w	r9, r0, fp
	} while (!val && !done);
   392b6:	454f      	cmp	r7, r9
   392b8:	daa5      	bge.n	39206 <z_impl_k_queue_get+0xe6>
   392ba:	e7b1      	b.n	39220 <z_impl_k_queue_get+0x100>
   392bc:	00044e5a 	.word	0x00044e5a
   392c0:	00044e3b 	.word	0x00044e3b
   392c4:	00044643 	.word	0x00044643
   392c8:	00044e6f 	.word	0x00044e6f
   392cc:	00044e84 	.word	0x00044e84
   392d0:	00044e9b 	.word	0x00044e9b

000392d4 <resched.part.15>:
   392d4:	f3ef 8005 	mrs	r0, IPSR
   392d8:	280d      	cmp	r0, #13
   392da:	d809      	bhi.n	392f0 <resched.part.15+0x1c>
   392dc:	b128      	cbz	r0, 392ea <resched.part.15+0x16>
   392de:	4b05      	ldr	r3, [pc, #20]	; (392f4 <resched.part.15+0x20>)
   392e0:	6858      	ldr	r0, [r3, #4]
   392e2:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   392e6:	f3c0 20c0 	ubfx	r0, r0, #11, #1
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
}
   392ea:	f080 0001 	eor.w	r0, r0, #1
   392ee:	4770      	bx	lr
   392f0:	2001      	movs	r0, #1
   392f2:	e7fa      	b.n	392ea <resched.part.15+0x16>
   392f4:	e000ed00 	.word	0xe000ed00

000392f8 <pended_on.isra.16>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   392f8:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   392fa:	b510      	push	{r4, lr}
   392fc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   392fe:	b95b      	cbnz	r3, 39318 <pended_on.isra.16+0x20>
   39300:	4906      	ldr	r1, [pc, #24]	; (3931c <pended_on.isra.16+0x24>)
   39302:	4807      	ldr	r0, [pc, #28]	; (39320 <pended_on.isra.16+0x28>)
   39304:	f240 1383 	movw	r3, #387	; 0x183
   39308:	4a06      	ldr	r2, [pc, #24]	; (39324 <pended_on.isra.16+0x2c>)
   3930a:	f005 fb0f 	bl	3e92c <printk>
   3930e:	f240 1183 	movw	r1, #387	; 0x183
   39312:	4804      	ldr	r0, [pc, #16]	; (39324 <pended_on.isra.16+0x2c>)
   39314:	f005 fb17 	bl	3e946 <assert_post_action>
}
   39318:	6820      	ldr	r0, [r4, #0]
   3931a:	bd10      	pop	{r4, pc}
   3931c:	00049241 	.word	0x00049241
   39320:	00044643 	.word	0x00044643
   39324:	00049226 	.word	0x00049226

00039328 <z_reset_time_slice>:
{
   39328:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   3932a:	4c08      	ldr	r4, [pc, #32]	; (3934c <z_reset_time_slice+0x24>)
   3932c:	6823      	ldr	r3, [r4, #0]
   3932e:	b15b      	cbz	r3, 39348 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   39330:	f7e6 fb6e 	bl	1fa10 <z_clock_elapsed>
   39334:	6823      	ldr	r3, [r4, #0]
   39336:	4a06      	ldr	r2, [pc, #24]	; (39350 <z_reset_time_slice+0x28>)
   39338:	4418      	add	r0, r3
   3933a:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   3933c:	2100      	movs	r1, #0
}
   3933e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   39342:	4618      	mov	r0, r3
   39344:	f001 bdea 	b.w	3af1c <z_set_timeout_expiry>
}
   39348:	bd10      	pop	{r4, pc}
   3934a:	bf00      	nop
   3934c:	2002a254 	.word	0x2002a254
   39350:	2002a214 	.word	0x2002a214

00039354 <k_sched_time_slice_set>:
{
   39354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39356:	4607      	mov	r7, r0
   39358:	460d      	mov	r5, r1
	__asm__ volatile(
   3935a:	f04f 0320 	mov.w	r3, #32
   3935e:	f3ef 8411 	mrs	r4, BASEPRI
   39362:	f383 8811 	msr	BASEPRI, r3
   39366:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3936a:	481f      	ldr	r0, [pc, #124]	; (393e8 <k_sched_time_slice_set+0x94>)
   3936c:	f001 f930 	bl	3a5d0 <z_spin_lock_valid>
   39370:	b960      	cbnz	r0, 3938c <k_sched_time_slice_set+0x38>
   39372:	491e      	ldr	r1, [pc, #120]	; (393ec <k_sched_time_slice_set+0x98>)
   39374:	235f      	movs	r3, #95	; 0x5f
   39376:	4a1e      	ldr	r2, [pc, #120]	; (393f0 <k_sched_time_slice_set+0x9c>)
   39378:	481e      	ldr	r0, [pc, #120]	; (393f4 <k_sched_time_slice_set+0xa0>)
   3937a:	f005 fad7 	bl	3e92c <printk>
   3937e:	481e      	ldr	r0, [pc, #120]	; (393f8 <k_sched_time_slice_set+0xa4>)
   39380:	f005 fad4 	bl	3e92c <printk>
   39384:	215f      	movs	r1, #95	; 0x5f
   39386:	481a      	ldr	r0, [pc, #104]	; (393f0 <k_sched_time_slice_set+0x9c>)
   39388:	f005 fadd 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   3938c:	4816      	ldr	r0, [pc, #88]	; (393e8 <k_sched_time_slice_set+0x94>)
   3938e:	f001 f93d 	bl	3a60c <z_spin_lock_set_owner>

#ifdef _NEED_PRECISE_TICK_MS_CONVERSION
	int cyc = sys_clock_hw_cycles_per_sec();

	/* use 64-bit math to keep precision */
	return (s32_t)ceiling_fraction((s64_t)ms * cyc,
   39392:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   39396:	2200      	movs	r2, #0
   39398:	f240 30e7 	movw	r0, #999	; 0x3e7
   3939c:	2100      	movs	r1, #0
   3939e:	4b17      	ldr	r3, [pc, #92]	; (393fc <k_sched_time_slice_set+0xa8>)
   393a0:	fbc6 0107 	smlal	r0, r1, r6, r7
   393a4:	611a      	str	r2, [r3, #16]
   393a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   393aa:	2300      	movs	r3, #0
   393ac:	f7df fcb6 	bl	18d1c <__aeabi_ldivmod>
   393b0:	4b13      	ldr	r3, [pc, #76]	; (39400 <k_sched_time_slice_set+0xac>)
   393b2:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   393b4:	4b13      	ldr	r3, [pc, #76]	; (39404 <k_sched_time_slice_set+0xb0>)
   393b6:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   393b8:	f7ff ffb6 	bl	39328 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   393bc:	480a      	ldr	r0, [pc, #40]	; (393e8 <k_sched_time_slice_set+0x94>)
   393be:	f001 f915 	bl	3a5ec <z_spin_unlock_valid>
   393c2:	b960      	cbnz	r0, 393de <k_sched_time_slice_set+0x8a>
   393c4:	4910      	ldr	r1, [pc, #64]	; (39408 <k_sched_time_slice_set+0xb4>)
   393c6:	2372      	movs	r3, #114	; 0x72
   393c8:	4a09      	ldr	r2, [pc, #36]	; (393f0 <k_sched_time_slice_set+0x9c>)
   393ca:	480a      	ldr	r0, [pc, #40]	; (393f4 <k_sched_time_slice_set+0xa0>)
   393cc:	f005 faae 	bl	3e92c <printk>
   393d0:	480e      	ldr	r0, [pc, #56]	; (3940c <k_sched_time_slice_set+0xb8>)
   393d2:	f005 faab 	bl	3e92c <printk>
   393d6:	2172      	movs	r1, #114	; 0x72
   393d8:	4805      	ldr	r0, [pc, #20]	; (393f0 <k_sched_time_slice_set+0x9c>)
   393da:	f005 fab4 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   393de:	f384 8811 	msr	BASEPRI, r4
   393e2:	f3bf 8f6f 	isb	sy
}
   393e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   393e8:	2002a24c 	.word	0x2002a24c
   393ec:	00044e5a 	.word	0x00044e5a
   393f0:	00044e3b 	.word	0x00044e3b
   393f4:	00044643 	.word	0x00044643
   393f8:	00044e6f 	.word	0x00044e6f
   393fc:	2002a214 	.word	0x2002a214
   39400:	2002a254 	.word	0x2002a254
   39404:	2002a250 	.word	0x2002a250
   39408:	00044e84 	.word	0x00044e84
   3940c:	00044e9b 	.word	0x00044e9b

00039410 <z_unpend_thread_no_timeout>:
{
   39410:	b538      	push	{r3, r4, r5, lr}
   39412:	4604      	mov	r4, r0
	__asm__ volatile(
   39414:	f04f 0320 	mov.w	r3, #32
   39418:	f3ef 8511 	mrs	r5, BASEPRI
   3941c:	f383 8811 	msr	BASEPRI, r3
   39420:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   39424:	481b      	ldr	r0, [pc, #108]	; (39494 <z_unpend_thread_no_timeout+0x84>)
   39426:	f001 f8d3 	bl	3a5d0 <z_spin_lock_valid>
   3942a:	b960      	cbnz	r0, 39446 <z_unpend_thread_no_timeout+0x36>
   3942c:	491a      	ldr	r1, [pc, #104]	; (39498 <z_unpend_thread_no_timeout+0x88>)
   3942e:	235f      	movs	r3, #95	; 0x5f
   39430:	4a1a      	ldr	r2, [pc, #104]	; (3949c <z_unpend_thread_no_timeout+0x8c>)
   39432:	481b      	ldr	r0, [pc, #108]	; (394a0 <z_unpend_thread_no_timeout+0x90>)
   39434:	f005 fa7a 	bl	3e92c <printk>
   39438:	481a      	ldr	r0, [pc, #104]	; (394a4 <z_unpend_thread_no_timeout+0x94>)
   3943a:	f005 fa77 	bl	3e92c <printk>
   3943e:	215f      	movs	r1, #95	; 0x5f
   39440:	4816      	ldr	r0, [pc, #88]	; (3949c <z_unpend_thread_no_timeout+0x8c>)
   39442:	f005 fa80 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   39446:	4813      	ldr	r0, [pc, #76]	; (39494 <z_unpend_thread_no_timeout+0x84>)
   39448:	f001 f8e0 	bl	3a60c <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   3944c:	f104 0008 	add.w	r0, r4, #8
   39450:	f7ff ff52 	bl	392f8 <pended_on.isra.16>
   39454:	4621      	mov	r1, r4
   39456:	f000 f8e5 	bl	39624 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   3945a:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3945c:	480d      	ldr	r0, [pc, #52]	; (39494 <z_unpend_thread_no_timeout+0x84>)
   3945e:	f023 0302 	bic.w	r3, r3, #2
   39462:	7363      	strb	r3, [r4, #13]
   39464:	f001 f8c2 	bl	3a5ec <z_spin_unlock_valid>
   39468:	b960      	cbnz	r0, 39484 <z_unpend_thread_no_timeout+0x74>
   3946a:	490f      	ldr	r1, [pc, #60]	; (394a8 <z_unpend_thread_no_timeout+0x98>)
   3946c:	2372      	movs	r3, #114	; 0x72
   3946e:	4a0b      	ldr	r2, [pc, #44]	; (3949c <z_unpend_thread_no_timeout+0x8c>)
   39470:	480b      	ldr	r0, [pc, #44]	; (394a0 <z_unpend_thread_no_timeout+0x90>)
   39472:	f005 fa5b 	bl	3e92c <printk>
   39476:	480d      	ldr	r0, [pc, #52]	; (394ac <z_unpend_thread_no_timeout+0x9c>)
   39478:	f005 fa58 	bl	3e92c <printk>
   3947c:	2172      	movs	r1, #114	; 0x72
   3947e:	4807      	ldr	r0, [pc, #28]	; (3949c <z_unpend_thread_no_timeout+0x8c>)
   39480:	f005 fa61 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   39484:	f385 8811 	msr	BASEPRI, r5
   39488:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   3948c:	2300      	movs	r3, #0
   3948e:	60a3      	str	r3, [r4, #8]
}
   39490:	bd38      	pop	{r3, r4, r5, pc}
   39492:	bf00      	nop
   39494:	2002a24c 	.word	0x2002a24c
   39498:	00044e5a 	.word	0x00044e5a
   3949c:	00044e3b 	.word	0x00044e3b
   394a0:	00044643 	.word	0x00044643
   394a4:	00044e6f 	.word	0x00044e6f
   394a8:	00044e84 	.word	0x00044e84
   394ac:	00044e9b 	.word	0x00044e9b

000394b0 <z_reschedule>:

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   394b0:	b510      	push	{r4, lr}
   394b2:	4602      	mov	r2, r0
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
   394b4:	460c      	mov	r4, r1
   394b6:	b9c1      	cbnz	r1, 394ea <z_reschedule+0x3a>
   394b8:	f7ff ff0c 	bl	392d4 <resched.part.15>
	if (resched(key.key)) {
   394bc:	b1a8      	cbz	r0, 394ea <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   394be:	4610      	mov	r0, r2
   394c0:	f001 f894 	bl	3a5ec <z_spin_unlock_valid>
   394c4:	b960      	cbnz	r0, 394e0 <z_reschedule+0x30>
   394c6:	4914      	ldr	r1, [pc, #80]	; (39518 <z_reschedule+0x68>)
   394c8:	2389      	movs	r3, #137	; 0x89
   394ca:	4a14      	ldr	r2, [pc, #80]	; (3951c <z_reschedule+0x6c>)
   394cc:	4814      	ldr	r0, [pc, #80]	; (39520 <z_reschedule+0x70>)
   394ce:	f005 fa2d 	bl	3e92c <printk>
   394d2:	4814      	ldr	r0, [pc, #80]	; (39524 <z_reschedule+0x74>)
   394d4:	f005 fa2a 	bl	3e92c <printk>
   394d8:	2189      	movs	r1, #137	; 0x89
   394da:	4810      	ldr	r0, [pc, #64]	; (3951c <z_reschedule+0x6c>)
   394dc:	f005 fa33 	bl	3e946 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   394e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   394e4:	2000      	movs	r0, #0
   394e6:	f7e6 bb3f 	b.w	1fb68 <z_arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   394ea:	4610      	mov	r0, r2
   394ec:	f001 f87e 	bl	3a5ec <z_spin_unlock_valid>
   394f0:	b960      	cbnz	r0, 3950c <z_reschedule+0x5c>
   394f2:	4909      	ldr	r1, [pc, #36]	; (39518 <z_reschedule+0x68>)
   394f4:	2372      	movs	r3, #114	; 0x72
   394f6:	4a09      	ldr	r2, [pc, #36]	; (3951c <z_reschedule+0x6c>)
   394f8:	4809      	ldr	r0, [pc, #36]	; (39520 <z_reschedule+0x70>)
   394fa:	f005 fa17 	bl	3e92c <printk>
   394fe:	4809      	ldr	r0, [pc, #36]	; (39524 <z_reschedule+0x74>)
   39500:	f005 fa14 	bl	3e92c <printk>
   39504:	2172      	movs	r1, #114	; 0x72
   39506:	4805      	ldr	r0, [pc, #20]	; (3951c <z_reschedule+0x6c>)
   39508:	f005 fa1d 	bl	3e946 <assert_post_action>
   3950c:	f384 8811 	msr	BASEPRI, r4
   39510:	f3bf 8f6f 	isb	sy
   39514:	bd10      	pop	{r4, pc}
   39516:	bf00      	nop
   39518:	00044e84 	.word	0x00044e84
   3951c:	00044e3b 	.word	0x00044e3b
   39520:	00044643 	.word	0x00044643
   39524:	00044e9b 	.word	0x00044e9b

00039528 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   39528:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   3952a:	f04f 0320 	mov.w	r3, #32
   3952e:	f3ef 8511 	mrs	r5, BASEPRI
   39532:	f383 8811 	msr	BASEPRI, r3
   39536:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3953a:	482d      	ldr	r0, [pc, #180]	; (395f0 <k_sched_lock+0xc8>)
   3953c:	f001 f848 	bl	3a5d0 <z_spin_lock_valid>
   39540:	b960      	cbnz	r0, 3955c <k_sched_lock+0x34>
   39542:	492c      	ldr	r1, [pc, #176]	; (395f4 <k_sched_lock+0xcc>)
   39544:	235f      	movs	r3, #95	; 0x5f
   39546:	4a2c      	ldr	r2, [pc, #176]	; (395f8 <k_sched_lock+0xd0>)
   39548:	482c      	ldr	r0, [pc, #176]	; (395fc <k_sched_lock+0xd4>)
   3954a:	f005 f9ef 	bl	3e92c <printk>
   3954e:	482c      	ldr	r0, [pc, #176]	; (39600 <k_sched_lock+0xd8>)
   39550:	f005 f9ec 	bl	3e92c <printk>
   39554:	215f      	movs	r1, #95	; 0x5f
   39556:	4828      	ldr	r0, [pc, #160]	; (395f8 <k_sched_lock+0xd0>)
   39558:	f005 f9f5 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   3955c:	4824      	ldr	r0, [pc, #144]	; (395f0 <k_sched_lock+0xc8>)
   3955e:	f001 f855 	bl	3a60c <z_spin_lock_set_owner>
   39562:	f3ef 8305 	mrs	r3, IPSR
   39566:	2b0d      	cmp	r3, #13
   39568:	d804      	bhi.n	39574 <k_sched_lock+0x4c>
   3956a:	b193      	cbz	r3, 39592 <k_sched_lock+0x6a>
   3956c:	4b25      	ldr	r3, [pc, #148]	; (39604 <k_sched_lock+0xdc>)
   3956e:	685b      	ldr	r3, [r3, #4]
   39570:	051b      	lsls	r3, r3, #20
   39572:	d40e      	bmi.n	39592 <k_sched_lock+0x6a>
	__ASSERT(!z_arch_is_in_isr(), "");
   39574:	4924      	ldr	r1, [pc, #144]	; (39608 <k_sched_lock+0xe0>)
   39576:	f44f 7386 	mov.w	r3, #268	; 0x10c
   3957a:	4a24      	ldr	r2, [pc, #144]	; (3960c <k_sched_lock+0xe4>)
   3957c:	481f      	ldr	r0, [pc, #124]	; (395fc <k_sched_lock+0xd4>)
   3957e:	f005 f9d5 	bl	3e92c <printk>
   39582:	4823      	ldr	r0, [pc, #140]	; (39610 <k_sched_lock+0xe8>)
   39584:	f005 f9d2 	bl	3e92c <printk>
   39588:	f44f 7186 	mov.w	r1, #268	; 0x10c
   3958c:	481f      	ldr	r0, [pc, #124]	; (3960c <k_sched_lock+0xe4>)
   3958e:	f005 f9da 	bl	3e946 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   39592:	4c20      	ldr	r4, [pc, #128]	; (39614 <k_sched_lock+0xec>)
   39594:	68a2      	ldr	r2, [r4, #8]
   39596:	7bd2      	ldrb	r2, [r2, #15]
   39598:	2a01      	cmp	r2, #1
   3959a:	d10e      	bne.n	395ba <k_sched_lock+0x92>
   3959c:	491e      	ldr	r1, [pc, #120]	; (39618 <k_sched_lock+0xf0>)
   3959e:	f240 130d 	movw	r3, #269	; 0x10d
   395a2:	4a1a      	ldr	r2, [pc, #104]	; (3960c <k_sched_lock+0xe4>)
   395a4:	4815      	ldr	r0, [pc, #84]	; (395fc <k_sched_lock+0xd4>)
   395a6:	f005 f9c1 	bl	3e92c <printk>
   395aa:	4819      	ldr	r0, [pc, #100]	; (39610 <k_sched_lock+0xe8>)
   395ac:	f005 f9be 	bl	3e92c <printk>
   395b0:	f240 110d 	movw	r1, #269	; 0x10d
   395b4:	4815      	ldr	r0, [pc, #84]	; (3960c <k_sched_lock+0xe4>)
   395b6:	f005 f9c6 	bl	3e946 <assert_post_action>
	--_current->base.sched_locked;
   395ba:	68a2      	ldr	r2, [r4, #8]
   395bc:	7bd3      	ldrb	r3, [r2, #15]
   395be:	3b01      	subs	r3, #1
   395c0:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   395c2:	480b      	ldr	r0, [pc, #44]	; (395f0 <k_sched_lock+0xc8>)
   395c4:	f001 f812 	bl	3a5ec <z_spin_unlock_valid>
   395c8:	b960      	cbnz	r0, 395e4 <k_sched_lock+0xbc>
   395ca:	4914      	ldr	r1, [pc, #80]	; (3961c <k_sched_lock+0xf4>)
   395cc:	2372      	movs	r3, #114	; 0x72
   395ce:	4a0a      	ldr	r2, [pc, #40]	; (395f8 <k_sched_lock+0xd0>)
   395d0:	480a      	ldr	r0, [pc, #40]	; (395fc <k_sched_lock+0xd4>)
   395d2:	f005 f9ab 	bl	3e92c <printk>
   395d6:	4812      	ldr	r0, [pc, #72]	; (39620 <k_sched_lock+0xf8>)
   395d8:	f005 f9a8 	bl	3e92c <printk>
   395dc:	2172      	movs	r1, #114	; 0x72
   395de:	4806      	ldr	r0, [pc, #24]	; (395f8 <k_sched_lock+0xd0>)
   395e0:	f005 f9b1 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   395e4:	f385 8811 	msr	BASEPRI, r5
   395e8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   395ec:	bd38      	pop	{r3, r4, r5, pc}
   395ee:	bf00      	nop
   395f0:	2002a24c 	.word	0x2002a24c
   395f4:	00044e5a 	.word	0x00044e5a
   395f8:	00044e3b 	.word	0x00044e3b
   395fc:	00044643 	.word	0x00044643
   39600:	00044e6f 	.word	0x00044e6f
   39604:	e000ed00 	.word	0xe000ed00
   39608:	000491c2 	.word	0x000491c2
   3960c:	0004919e 	.word	0x0004919e
   39610:	000490df 	.word	0x000490df
   39614:	2002a214 	.word	0x2002a214
   39618:	000491d6 	.word	0x000491d6
   3961c:	00044e84 	.word	0x00044e84
   39620:	00044e9b 	.word	0x00044e9b

00039624 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   39624:	4b11      	ldr	r3, [pc, #68]	; (3966c <z_priq_dumb_remove+0x48>)
{
   39626:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   39628:	f103 0228 	add.w	r2, r3, #40	; 0x28
   3962c:	4282      	cmp	r2, r0
{
   3962e:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   39630:	d105      	bne.n	3963e <z_priq_dumb_remove+0x1a>
   39632:	689b      	ldr	r3, [r3, #8]
   39634:	428b      	cmp	r3, r1
   39636:	d102      	bne.n	3963e <z_priq_dumb_remove+0x1a>
   39638:	7b4b      	ldrb	r3, [r1, #13]
   3963a:	06db      	lsls	r3, r3, #27
   3963c:	d115      	bne.n	3966a <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3963e:	4b0c      	ldr	r3, [pc, #48]	; (39670 <z_priq_dumb_remove+0x4c>)
   39640:	429c      	cmp	r4, r3
   39642:	d10b      	bne.n	3965c <z_priq_dumb_remove+0x38>
   39644:	490b      	ldr	r1, [pc, #44]	; (39674 <z_priq_dumb_remove+0x50>)
   39646:	480c      	ldr	r0, [pc, #48]	; (39678 <z_priq_dumb_remove+0x54>)
   39648:	f44f 7325 	mov.w	r3, #660	; 0x294
   3964c:	4a0b      	ldr	r2, [pc, #44]	; (3967c <z_priq_dumb_remove+0x58>)
   3964e:	f005 f96d 	bl	3e92c <printk>
   39652:	f44f 7125 	mov.w	r1, #660	; 0x294
   39656:	4809      	ldr	r0, [pc, #36]	; (3967c <z_priq_dumb_remove+0x58>)
   39658:	f005 f975 	bl	3e946 <assert_post_action>
	node->prev->next = node->next;
   3965c:	e9d4 3200 	ldrd	r3, r2, [r4]
   39660:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   39662:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   39664:	2300      	movs	r3, #0
	node->prev = NULL;
   39666:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   3966a:	bd10      	pop	{r4, pc}
   3966c:	2002a214 	.word	0x2002a214
   39670:	20026044 	.word	0x20026044
   39674:	00049277 	.word	0x00049277
   39678:	00044643 	.word	0x00044643
   3967c:	00049226 	.word	0x00049226

00039680 <z_unpend_thread>:
{
   39680:	b538      	push	{r3, r4, r5, lr}
   39682:	4604      	mov	r4, r0
	__asm__ volatile(
   39684:	f04f 0320 	mov.w	r3, #32
   39688:	f3ef 8511 	mrs	r5, BASEPRI
   3968c:	f383 8811 	msr	BASEPRI, r3
   39690:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   39694:	481d      	ldr	r0, [pc, #116]	; (3970c <z_unpend_thread+0x8c>)
   39696:	f000 ff9b 	bl	3a5d0 <z_spin_lock_valid>
   3969a:	b960      	cbnz	r0, 396b6 <z_unpend_thread+0x36>
   3969c:	491c      	ldr	r1, [pc, #112]	; (39710 <z_unpend_thread+0x90>)
   3969e:	235f      	movs	r3, #95	; 0x5f
   396a0:	4a1c      	ldr	r2, [pc, #112]	; (39714 <z_unpend_thread+0x94>)
   396a2:	481d      	ldr	r0, [pc, #116]	; (39718 <z_unpend_thread+0x98>)
   396a4:	f005 f942 	bl	3e92c <printk>
   396a8:	481c      	ldr	r0, [pc, #112]	; (3971c <z_unpend_thread+0x9c>)
   396aa:	f005 f93f 	bl	3e92c <printk>
   396ae:	215f      	movs	r1, #95	; 0x5f
   396b0:	4818      	ldr	r0, [pc, #96]	; (39714 <z_unpend_thread+0x94>)
   396b2:	f005 f948 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   396b6:	4815      	ldr	r0, [pc, #84]	; (3970c <z_unpend_thread+0x8c>)
   396b8:	f000 ffa8 	bl	3a60c <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   396bc:	f104 0008 	add.w	r0, r4, #8
   396c0:	f7ff fe1a 	bl	392f8 <pended_on.isra.16>
   396c4:	4621      	mov	r1, r4
   396c6:	f7ff ffad 	bl	39624 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   396ca:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   396cc:	480f      	ldr	r0, [pc, #60]	; (3970c <z_unpend_thread+0x8c>)
   396ce:	f023 0302 	bic.w	r3, r3, #2
   396d2:	7363      	strb	r3, [r4, #13]
   396d4:	f000 ff8a 	bl	3a5ec <z_spin_unlock_valid>
   396d8:	b960      	cbnz	r0, 396f4 <z_unpend_thread+0x74>
   396da:	4911      	ldr	r1, [pc, #68]	; (39720 <z_unpend_thread+0xa0>)
   396dc:	2372      	movs	r3, #114	; 0x72
   396de:	4a0d      	ldr	r2, [pc, #52]	; (39714 <z_unpend_thread+0x94>)
   396e0:	480d      	ldr	r0, [pc, #52]	; (39718 <z_unpend_thread+0x98>)
   396e2:	f005 f923 	bl	3e92c <printk>
   396e6:	480f      	ldr	r0, [pc, #60]	; (39724 <z_unpend_thread+0xa4>)
   396e8:	f005 f920 	bl	3e92c <printk>
   396ec:	2172      	movs	r1, #114	; 0x72
   396ee:	4809      	ldr	r0, [pc, #36]	; (39714 <z_unpend_thread+0x94>)
   396f0:	f005 f929 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   396f4:	f385 8811 	msr	BASEPRI, r5
   396f8:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   396fc:	2300      	movs	r3, #0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   396fe:	f104 0018 	add.w	r0, r4, #24
   39702:	60a3      	str	r3, [r4, #8]
}
   39704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   39708:	f001 bb76 	b.w	3adf8 <z_abort_timeout>
   3970c:	2002a24c 	.word	0x2002a24c
   39710:	00044e5a 	.word	0x00044e5a
   39714:	00044e3b 	.word	0x00044e3b
   39718:	00044643 	.word	0x00044643
   3971c:	00044e6f 	.word	0x00044e6f
   39720:	00044e84 	.word	0x00044e84
   39724:	00044e9b 	.word	0x00044e9b

00039728 <update_cache>:
{
   39728:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   3972a:	4c15      	ldr	r4, [pc, #84]	; (39780 <update_cache+0x58>)
{
   3972c:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
   3972e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   39732:	f007 f9e4 	bl	40afe <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
   39736:	4605      	mov	r5, r0
   39738:	b900      	cbnz	r0, 3973c <update_cache+0x14>
   3973a:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   3973c:	b9ca      	cbnz	r2, 39772 <update_cache+0x4a>
	__ASSERT(_current != NULL, "");
   3973e:	68a3      	ldr	r3, [r4, #8]
   39740:	b963      	cbnz	r3, 3975c <update_cache+0x34>
   39742:	4910      	ldr	r1, [pc, #64]	; (39784 <update_cache+0x5c>)
   39744:	2375      	movs	r3, #117	; 0x75
   39746:	4a10      	ldr	r2, [pc, #64]	; (39788 <update_cache+0x60>)
   39748:	4810      	ldr	r0, [pc, #64]	; (3978c <update_cache+0x64>)
   3974a:	f005 f8ef 	bl	3e92c <printk>
   3974e:	4810      	ldr	r0, [pc, #64]	; (39790 <update_cache+0x68>)
   39750:	f005 f8ec 	bl	3e92c <printk>
   39754:	2175      	movs	r1, #117	; 0x75
   39756:	480c      	ldr	r0, [pc, #48]	; (39788 <update_cache+0x60>)
   39758:	f005 f8f5 	bl	3e946 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   3975c:	68a3      	ldr	r3, [r4, #8]
   3975e:	7b5a      	ldrb	r2, [r3, #13]
   39760:	06d2      	lsls	r2, r2, #27
   39762:	d106      	bne.n	39772 <update_cache+0x4a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   39764:	69aa      	ldr	r2, [r5, #24]
   39766:	b922      	cbnz	r2, 39772 <update_cache+0x4a>
	if (is_preempt(_current) || is_metairq(th)) {
   39768:	89da      	ldrh	r2, [r3, #14]
   3976a:	2a7f      	cmp	r2, #127	; 0x7f
   3976c:	d901      	bls.n	39772 <update_cache+0x4a>
		_kernel.ready_q.cache = _current;
   3976e:	6263      	str	r3, [r4, #36]	; 0x24
}
   39770:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
   39772:	68a3      	ldr	r3, [r4, #8]
   39774:	42ab      	cmp	r3, r5
   39776:	d001      	beq.n	3977c <update_cache+0x54>
			z_reset_time_slice();
   39778:	f7ff fdd6 	bl	39328 <z_reset_time_slice>
		_kernel.ready_q.cache = th;
   3977c:	6265      	str	r5, [r4, #36]	; 0x24
}
   3977e:	e7f7      	b.n	39770 <update_cache+0x48>
   39780:	2002a214 	.word	0x2002a214
   39784:	00049258 	.word	0x00049258
   39788:	00049226 	.word	0x00049226
   3978c:	00044643 	.word	0x00044643
   39790:	000490df 	.word	0x000490df

00039794 <k_sched_unlock>:
{
   39794:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current->base.sched_locked != 0, "");
   39796:	4c33      	ldr	r4, [pc, #204]	; (39864 <k_sched_unlock+0xd0>)
   39798:	68a2      	ldr	r2, [r4, #8]
   3979a:	7bd2      	ldrb	r2, [r2, #15]
   3979c:	b972      	cbnz	r2, 397bc <k_sched_unlock+0x28>
   3979e:	4932      	ldr	r1, [pc, #200]	; (39868 <k_sched_unlock+0xd4>)
   397a0:	f240 232d 	movw	r3, #557	; 0x22d
   397a4:	4a31      	ldr	r2, [pc, #196]	; (3986c <k_sched_unlock+0xd8>)
   397a6:	4832      	ldr	r0, [pc, #200]	; (39870 <k_sched_unlock+0xdc>)
   397a8:	f005 f8c0 	bl	3e92c <printk>
   397ac:	4831      	ldr	r0, [pc, #196]	; (39874 <k_sched_unlock+0xe0>)
   397ae:	f005 f8bd 	bl	3e92c <printk>
   397b2:	f240 212d 	movw	r1, #557	; 0x22d
   397b6:	482d      	ldr	r0, [pc, #180]	; (3986c <k_sched_unlock+0xd8>)
   397b8:	f005 f8c5 	bl	3e946 <assert_post_action>
   397bc:	f3ef 8305 	mrs	r3, IPSR
   397c0:	2b0d      	cmp	r3, #13
   397c2:	d804      	bhi.n	397ce <k_sched_unlock+0x3a>
   397c4:	b193      	cbz	r3, 397ec <k_sched_unlock+0x58>
   397c6:	4b2c      	ldr	r3, [pc, #176]	; (39878 <k_sched_unlock+0xe4>)
   397c8:	685b      	ldr	r3, [r3, #4]
   397ca:	051b      	lsls	r3, r3, #20
   397cc:	d40e      	bmi.n	397ec <k_sched_unlock+0x58>
	__ASSERT(!z_arch_is_in_isr(), "");
   397ce:	492b      	ldr	r1, [pc, #172]	; (3987c <k_sched_unlock+0xe8>)
   397d0:	f240 232e 	movw	r3, #558	; 0x22e
   397d4:	4a25      	ldr	r2, [pc, #148]	; (3986c <k_sched_unlock+0xd8>)
   397d6:	4826      	ldr	r0, [pc, #152]	; (39870 <k_sched_unlock+0xdc>)
   397d8:	f005 f8a8 	bl	3e92c <printk>
   397dc:	4825      	ldr	r0, [pc, #148]	; (39874 <k_sched_unlock+0xe0>)
   397de:	f005 f8a5 	bl	3e92c <printk>
   397e2:	f240 212e 	movw	r1, #558	; 0x22e
   397e6:	4821      	ldr	r0, [pc, #132]	; (3986c <k_sched_unlock+0xd8>)
   397e8:	f005 f8ad 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   397ec:	f04f 0320 	mov.w	r3, #32
   397f0:	f3ef 8511 	mrs	r5, BASEPRI
   397f4:	f383 8811 	msr	BASEPRI, r3
   397f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   397fc:	4820      	ldr	r0, [pc, #128]	; (39880 <k_sched_unlock+0xec>)
   397fe:	f000 fee7 	bl	3a5d0 <z_spin_lock_valid>
   39802:	b960      	cbnz	r0, 3981e <k_sched_unlock+0x8a>
   39804:	491f      	ldr	r1, [pc, #124]	; (39884 <k_sched_unlock+0xf0>)
   39806:	235f      	movs	r3, #95	; 0x5f
   39808:	4a1f      	ldr	r2, [pc, #124]	; (39888 <k_sched_unlock+0xf4>)
   3980a:	4819      	ldr	r0, [pc, #100]	; (39870 <k_sched_unlock+0xdc>)
   3980c:	f005 f88e 	bl	3e92c <printk>
   39810:	481e      	ldr	r0, [pc, #120]	; (3988c <k_sched_unlock+0xf8>)
   39812:	f005 f88b 	bl	3e92c <printk>
   39816:	215f      	movs	r1, #95	; 0x5f
   39818:	481b      	ldr	r0, [pc, #108]	; (39888 <k_sched_unlock+0xf4>)
   3981a:	f005 f894 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   3981e:	4818      	ldr	r0, [pc, #96]	; (39880 <k_sched_unlock+0xec>)
   39820:	f000 fef4 	bl	3a60c <z_spin_lock_set_owner>
		++_current->base.sched_locked;
   39824:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   39826:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   39828:	7bd3      	ldrb	r3, [r2, #15]
   3982a:	3301      	adds	r3, #1
   3982c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   3982e:	f7ff ff7b 	bl	39728 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   39832:	4813      	ldr	r0, [pc, #76]	; (39880 <k_sched_unlock+0xec>)
   39834:	f000 feda 	bl	3a5ec <z_spin_unlock_valid>
   39838:	b960      	cbnz	r0, 39854 <k_sched_unlock+0xc0>
   3983a:	4915      	ldr	r1, [pc, #84]	; (39890 <k_sched_unlock+0xfc>)
   3983c:	2372      	movs	r3, #114	; 0x72
   3983e:	4a12      	ldr	r2, [pc, #72]	; (39888 <k_sched_unlock+0xf4>)
   39840:	480b      	ldr	r0, [pc, #44]	; (39870 <k_sched_unlock+0xdc>)
   39842:	f005 f873 	bl	3e92c <printk>
   39846:	4813      	ldr	r0, [pc, #76]	; (39894 <k_sched_unlock+0x100>)
   39848:	f005 f870 	bl	3e92c <printk>
   3984c:	2172      	movs	r1, #114	; 0x72
   3984e:	480e      	ldr	r0, [pc, #56]	; (39888 <k_sched_unlock+0xf4>)
   39850:	f005 f879 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   39854:	f385 8811 	msr	BASEPRI, r5
   39858:	f3bf 8f6f 	isb	sy
}
   3985c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   39860:	f007 b943 	b.w	40aea <z_reschedule_unlocked>
   39864:	2002a214 	.word	0x2002a214
   39868:	000491fe 	.word	0x000491fe
   3986c:	00049226 	.word	0x00049226
   39870:	00044643 	.word	0x00044643
   39874:	000490df 	.word	0x000490df
   39878:	e000ed00 	.word	0xe000ed00
   3987c:	000491c2 	.word	0x000491c2
   39880:	2002a24c 	.word	0x2002a24c
   39884:	00044e5a 	.word	0x00044e5a
   39888:	00044e3b 	.word	0x00044e3b
   3988c:	00044e6f 	.word	0x00044e6f
   39890:	00044e84 	.word	0x00044e84
   39894:	00044e9b 	.word	0x00044e9b

00039898 <z_add_thread_to_ready_q>:
{
   39898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3989a:	4604      	mov	r4, r0
	__asm__ volatile(
   3989c:	f04f 0320 	mov.w	r3, #32
   398a0:	f3ef 8511 	mrs	r5, BASEPRI
   398a4:	f383 8811 	msr	BASEPRI, r3
   398a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   398ac:	482e      	ldr	r0, [pc, #184]	; (39968 <z_add_thread_to_ready_q+0xd0>)
   398ae:	f000 fe8f 	bl	3a5d0 <z_spin_lock_valid>
   398b2:	b960      	cbnz	r0, 398ce <z_add_thread_to_ready_q+0x36>
   398b4:	492d      	ldr	r1, [pc, #180]	; (3996c <z_add_thread_to_ready_q+0xd4>)
   398b6:	235f      	movs	r3, #95	; 0x5f
   398b8:	4a2d      	ldr	r2, [pc, #180]	; (39970 <z_add_thread_to_ready_q+0xd8>)
   398ba:	482e      	ldr	r0, [pc, #184]	; (39974 <z_add_thread_to_ready_q+0xdc>)
   398bc:	f005 f836 	bl	3e92c <printk>
   398c0:	482d      	ldr	r0, [pc, #180]	; (39978 <z_add_thread_to_ready_q+0xe0>)
   398c2:	f005 f833 	bl	3e92c <printk>
   398c6:	215f      	movs	r1, #95	; 0x5f
   398c8:	4829      	ldr	r0, [pc, #164]	; (39970 <z_add_thread_to_ready_q+0xd8>)
   398ca:	f005 f83c 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   398ce:	4826      	ldr	r0, [pc, #152]	; (39968 <z_add_thread_to_ready_q+0xd0>)
   398d0:	f000 fe9c 	bl	3a60c <z_spin_lock_set_owner>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   398d4:	4b29      	ldr	r3, [pc, #164]	; (3997c <z_add_thread_to_ready_q+0xe4>)
   398d6:	429c      	cmp	r4, r3
   398d8:	d10b      	bne.n	398f2 <z_add_thread_to_ready_q+0x5a>
   398da:	4929      	ldr	r1, [pc, #164]	; (39980 <z_add_thread_to_ready_q+0xe8>)
   398dc:	4825      	ldr	r0, [pc, #148]	; (39974 <z_add_thread_to_ready_q+0xdc>)
   398de:	f240 237e 	movw	r3, #638	; 0x27e
   398e2:	4a28      	ldr	r2, [pc, #160]	; (39984 <z_add_thread_to_ready_q+0xec>)
   398e4:	f005 f822 	bl	3e92c <printk>
   398e8:	f240 217e 	movw	r1, #638	; 0x27e
   398ec:	4825      	ldr	r0, [pc, #148]	; (39984 <z_add_thread_to_ready_q+0xec>)
   398ee:	f005 f82a 	bl	3e946 <assert_post_action>
	return list->head == list;
   398f2:	4a25      	ldr	r2, [pc, #148]	; (39988 <z_add_thread_to_ready_q+0xf0>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   398f4:	f102 0128 	add.w	r1, r2, #40	; 0x28
   398f8:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   398fc:	428b      	cmp	r3, r1
   398fe:	d02d      	beq.n	3995c <z_add_thread_to_ready_q+0xc4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   39900:	b363      	cbz	r3, 3995c <z_add_thread_to_ready_q+0xc4>
	if (t1->base.prio < t2->base.prio) {
   39902:	f994 600e 	ldrsb.w	r6, [r4, #14]
   39906:	f993 700e 	ldrsb.w	r7, [r3, #14]
   3990a:	42b7      	cmp	r7, r6
   3990c:	dd21      	ble.n	39952 <z_add_thread_to_ready_q+0xba>
	node->prev = successor->prev;
   3990e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   39910:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   39914:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   39916:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   39918:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   3991a:	2000      	movs	r0, #0
   3991c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   39920:	7363      	strb	r3, [r4, #13]
   39922:	f7ff ff01 	bl	39728 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   39926:	4810      	ldr	r0, [pc, #64]	; (39968 <z_add_thread_to_ready_q+0xd0>)
   39928:	f000 fe60 	bl	3a5ec <z_spin_unlock_valid>
   3992c:	b960      	cbnz	r0, 39948 <z_add_thread_to_ready_q+0xb0>
   3992e:	4917      	ldr	r1, [pc, #92]	; (3998c <z_add_thread_to_ready_q+0xf4>)
   39930:	2372      	movs	r3, #114	; 0x72
   39932:	4a0f      	ldr	r2, [pc, #60]	; (39970 <z_add_thread_to_ready_q+0xd8>)
   39934:	480f      	ldr	r0, [pc, #60]	; (39974 <z_add_thread_to_ready_q+0xdc>)
   39936:	f004 fff9 	bl	3e92c <printk>
   3993a:	4815      	ldr	r0, [pc, #84]	; (39990 <z_add_thread_to_ready_q+0xf8>)
   3993c:	f004 fff6 	bl	3e92c <printk>
   39940:	2172      	movs	r1, #114	; 0x72
   39942:	480b      	ldr	r0, [pc, #44]	; (39970 <z_add_thread_to_ready_q+0xd8>)
   39944:	f004 ffff 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   39948:	f385 8811 	msr	BASEPRI, r5
   3994c:	f3bf 8f6f 	isb	sy
}
   39950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   39952:	4298      	cmp	r0, r3
   39954:	d002      	beq.n	3995c <z_add_thread_to_ready_q+0xc4>
   39956:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   39958:	2b00      	cmp	r3, #0
   3995a:	d1d4      	bne.n	39906 <z_add_thread_to_ready_q+0x6e>
	node->prev = list->tail;
   3995c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   39960:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   39962:	601c      	str	r4, [r3, #0]
	list->tail = node;
   39964:	62d4      	str	r4, [r2, #44]	; 0x2c
   39966:	e7d7      	b.n	39918 <z_add_thread_to_ready_q+0x80>
   39968:	2002a24c 	.word	0x2002a24c
   3996c:	00044e5a 	.word	0x00044e5a
   39970:	00044e3b 	.word	0x00044e3b
   39974:	00044643 	.word	0x00044643
   39978:	00044e6f 	.word	0x00044e6f
   3997c:	20026044 	.word	0x20026044
   39980:	00049277 	.word	0x00049277
   39984:	00049226 	.word	0x00049226
   39988:	2002a214 	.word	0x2002a214
   3998c:	00044e84 	.word	0x00044e84
   39990:	00044e9b 	.word	0x00044e9b

00039994 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
   39994:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   39998:	b570      	push	{r4, r5, r6, lr}
   3999a:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
   3999c:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
   399a0:	2b00      	cmp	r3, #0
   399a2:	d040      	beq.n	39a26 <z_thread_timeout+0x92>
	__asm__ volatile(
   399a4:	f04f 0320 	mov.w	r3, #32
   399a8:	f3ef 8611 	mrs	r6, BASEPRI
   399ac:	f383 8811 	msr	BASEPRI, r3
   399b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   399b4:	4824      	ldr	r0, [pc, #144]	; (39a48 <z_thread_timeout+0xb4>)
   399b6:	f000 fe0b 	bl	3a5d0 <z_spin_lock_valid>
   399ba:	b960      	cbnz	r0, 399d6 <z_thread_timeout+0x42>
   399bc:	4923      	ldr	r1, [pc, #140]	; (39a4c <z_thread_timeout+0xb8>)
   399be:	235f      	movs	r3, #95	; 0x5f
   399c0:	4a23      	ldr	r2, [pc, #140]	; (39a50 <z_thread_timeout+0xbc>)
   399c2:	4824      	ldr	r0, [pc, #144]	; (39a54 <z_thread_timeout+0xc0>)
   399c4:	f004 ffb2 	bl	3e92c <printk>
   399c8:	4823      	ldr	r0, [pc, #140]	; (39a58 <z_thread_timeout+0xc4>)
   399ca:	f004 ffaf 	bl	3e92c <printk>
   399ce:	215f      	movs	r1, #95	; 0x5f
   399d0:	481f      	ldr	r0, [pc, #124]	; (39a50 <z_thread_timeout+0xbc>)
   399d2:	f004 ffb8 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   399d6:	481c      	ldr	r0, [pc, #112]	; (39a48 <z_thread_timeout+0xb4>)
   399d8:	f000 fe18 	bl	3a60c <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   399dc:	f1a4 0010 	sub.w	r0, r4, #16
   399e0:	f7ff fc8a 	bl	392f8 <pended_on.isra.16>
   399e4:	4629      	mov	r1, r5
   399e6:	f7ff fe1d 	bl	39624 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   399ea:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   399ee:	4816      	ldr	r0, [pc, #88]	; (39a48 <z_thread_timeout+0xb4>)
   399f0:	f023 0302 	bic.w	r3, r3, #2
   399f4:	f804 3c0b 	strb.w	r3, [r4, #-11]
   399f8:	f000 fdf8 	bl	3a5ec <z_spin_unlock_valid>
   399fc:	b960      	cbnz	r0, 39a18 <z_thread_timeout+0x84>
   399fe:	4917      	ldr	r1, [pc, #92]	; (39a5c <z_thread_timeout+0xc8>)
   39a00:	2372      	movs	r3, #114	; 0x72
   39a02:	4a13      	ldr	r2, [pc, #76]	; (39a50 <z_thread_timeout+0xbc>)
   39a04:	4813      	ldr	r0, [pc, #76]	; (39a54 <z_thread_timeout+0xc0>)
   39a06:	f004 ff91 	bl	3e92c <printk>
   39a0a:	4815      	ldr	r0, [pc, #84]	; (39a60 <z_thread_timeout+0xcc>)
   39a0c:	f004 ff8e 	bl	3e92c <printk>
   39a10:	2172      	movs	r1, #114	; 0x72
   39a12:	480f      	ldr	r0, [pc, #60]	; (39a50 <z_thread_timeout+0xbc>)
   39a14:	f004 ff97 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   39a18:	f386 8811 	msr	BASEPRI, r6
   39a1c:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   39a20:	2300      	movs	r3, #0
   39a22:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   39a26:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   39a2a:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   39a2c:	f023 0314 	bic.w	r3, r3, #20
   39a30:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   39a34:	f007 f837 	bl	40aa6 <z_is_thread_ready>
   39a38:	b120      	cbz	r0, 39a44 <z_thread_timeout+0xb0>
		z_add_thread_to_ready_q(thread);
   39a3a:	4628      	mov	r0, r5
}
   39a3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   39a40:	f7ff bf2a 	b.w	39898 <z_add_thread_to_ready_q>
   39a44:	bd70      	pop	{r4, r5, r6, pc}
   39a46:	bf00      	nop
   39a48:	2002a24c 	.word	0x2002a24c
   39a4c:	00044e5a 	.word	0x00044e5a
   39a50:	00044e3b 	.word	0x00044e3b
   39a54:	00044643 	.word	0x00044643
   39a58:	00044e6f 	.word	0x00044e6f
   39a5c:	00044e84 	.word	0x00044e84
   39a60:	00044e9b 	.word	0x00044e9b

00039a64 <z_move_thread_to_end_of_prio_q>:
{
   39a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39a66:	4604      	mov	r4, r0
	__asm__ volatile(
   39a68:	f04f 0320 	mov.w	r3, #32
   39a6c:	f3ef 8511 	mrs	r5, BASEPRI
   39a70:	f383 8811 	msr	BASEPRI, r3
   39a74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   39a78:	4834      	ldr	r0, [pc, #208]	; (39b4c <z_move_thread_to_end_of_prio_q+0xe8>)
   39a7a:	f000 fda9 	bl	3a5d0 <z_spin_lock_valid>
   39a7e:	b960      	cbnz	r0, 39a9a <z_move_thread_to_end_of_prio_q+0x36>
   39a80:	4933      	ldr	r1, [pc, #204]	; (39b50 <z_move_thread_to_end_of_prio_q+0xec>)
   39a82:	235f      	movs	r3, #95	; 0x5f
   39a84:	4a33      	ldr	r2, [pc, #204]	; (39b54 <z_move_thread_to_end_of_prio_q+0xf0>)
   39a86:	4834      	ldr	r0, [pc, #208]	; (39b58 <z_move_thread_to_end_of_prio_q+0xf4>)
   39a88:	f004 ff50 	bl	3e92c <printk>
   39a8c:	4833      	ldr	r0, [pc, #204]	; (39b5c <z_move_thread_to_end_of_prio_q+0xf8>)
   39a8e:	f004 ff4d 	bl	3e92c <printk>
   39a92:	215f      	movs	r1, #95	; 0x5f
   39a94:	482f      	ldr	r0, [pc, #188]	; (39b54 <z_move_thread_to_end_of_prio_q+0xf0>)
   39a96:	f004 ff56 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   39a9a:	482c      	ldr	r0, [pc, #176]	; (39b4c <z_move_thread_to_end_of_prio_q+0xe8>)
   39a9c:	f000 fdb6 	bl	3a60c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   39aa0:	7b63      	ldrb	r3, [r4, #13]
   39aa2:	065a      	lsls	r2, r3, #25
   39aa4:	d503      	bpl.n	39aae <z_move_thread_to_end_of_prio_q+0x4a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   39aa6:	4621      	mov	r1, r4
   39aa8:	482d      	ldr	r0, [pc, #180]	; (39b60 <z_move_thread_to_end_of_prio_q+0xfc>)
   39aaa:	f7ff fdbb 	bl	39624 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   39aae:	4b2d      	ldr	r3, [pc, #180]	; (39b64 <z_move_thread_to_end_of_prio_q+0x100>)
   39ab0:	429c      	cmp	r4, r3
   39ab2:	d10b      	bne.n	39acc <z_move_thread_to_end_of_prio_q+0x68>
   39ab4:	492c      	ldr	r1, [pc, #176]	; (39b68 <z_move_thread_to_end_of_prio_q+0x104>)
   39ab6:	4828      	ldr	r0, [pc, #160]	; (39b58 <z_move_thread_to_end_of_prio_q+0xf4>)
   39ab8:	f240 237e 	movw	r3, #638	; 0x27e
   39abc:	4a2b      	ldr	r2, [pc, #172]	; (39b6c <z_move_thread_to_end_of_prio_q+0x108>)
   39abe:	f004 ff35 	bl	3e92c <printk>
   39ac2:	f240 217e 	movw	r1, #638	; 0x27e
   39ac6:	4829      	ldr	r0, [pc, #164]	; (39b6c <z_move_thread_to_end_of_prio_q+0x108>)
   39ac8:	f004 ff3d 	bl	3e946 <assert_post_action>
	return list->head == list;
   39acc:	4a28      	ldr	r2, [pc, #160]	; (39b70 <z_move_thread_to_end_of_prio_q+0x10c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   39ace:	f102 0128 	add.w	r1, r2, #40	; 0x28
   39ad2:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   39ad6:	428b      	cmp	r3, r1
   39ad8:	d031      	beq.n	39b3e <z_move_thread_to_end_of_prio_q+0xda>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   39ada:	2b00      	cmp	r3, #0
   39adc:	d02f      	beq.n	39b3e <z_move_thread_to_end_of_prio_q+0xda>
	if (t1->base.prio < t2->base.prio) {
   39ade:	f994 600e 	ldrsb.w	r6, [r4, #14]
   39ae2:	f993 700e 	ldrsb.w	r7, [r3, #14]
   39ae6:	42b7      	cmp	r7, r6
   39ae8:	dd24      	ble.n	39b34 <z_move_thread_to_end_of_prio_q+0xd0>
	node->prev = successor->prev;
   39aea:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   39aec:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   39af0:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   39af2:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   39af4:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   39af6:	6890      	ldr	r0, [r2, #8]
   39af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   39afc:	7363      	strb	r3, [r4, #13]
   39afe:	1b03      	subs	r3, r0, r4
   39b00:	4258      	negs	r0, r3
   39b02:	4158      	adcs	r0, r3
   39b04:	f7ff fe10 	bl	39728 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   39b08:	4810      	ldr	r0, [pc, #64]	; (39b4c <z_move_thread_to_end_of_prio_q+0xe8>)
   39b0a:	f000 fd6f 	bl	3a5ec <z_spin_unlock_valid>
   39b0e:	b960      	cbnz	r0, 39b2a <z_move_thread_to_end_of_prio_q+0xc6>
   39b10:	4918      	ldr	r1, [pc, #96]	; (39b74 <z_move_thread_to_end_of_prio_q+0x110>)
   39b12:	2372      	movs	r3, #114	; 0x72
   39b14:	4a0f      	ldr	r2, [pc, #60]	; (39b54 <z_move_thread_to_end_of_prio_q+0xf0>)
   39b16:	4810      	ldr	r0, [pc, #64]	; (39b58 <z_move_thread_to_end_of_prio_q+0xf4>)
   39b18:	f004 ff08 	bl	3e92c <printk>
   39b1c:	4816      	ldr	r0, [pc, #88]	; (39b78 <z_move_thread_to_end_of_prio_q+0x114>)
   39b1e:	f004 ff05 	bl	3e92c <printk>
   39b22:	2172      	movs	r1, #114	; 0x72
   39b24:	480b      	ldr	r0, [pc, #44]	; (39b54 <z_move_thread_to_end_of_prio_q+0xf0>)
   39b26:	f004 ff0e 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   39b2a:	f385 8811 	msr	BASEPRI, r5
   39b2e:	f3bf 8f6f 	isb	sy
}
   39b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   39b34:	4298      	cmp	r0, r3
   39b36:	d002      	beq.n	39b3e <z_move_thread_to_end_of_prio_q+0xda>
   39b38:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   39b3a:	2b00      	cmp	r3, #0
   39b3c:	d1d1      	bne.n	39ae2 <z_move_thread_to_end_of_prio_q+0x7e>
	node->prev = list->tail;
   39b3e:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   39b42:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   39b44:	601c      	str	r4, [r3, #0]
	list->tail = node;
   39b46:	62d4      	str	r4, [r2, #44]	; 0x2c
   39b48:	e7d4      	b.n	39af4 <z_move_thread_to_end_of_prio_q+0x90>
   39b4a:	bf00      	nop
   39b4c:	2002a24c 	.word	0x2002a24c
   39b50:	00044e5a 	.word	0x00044e5a
   39b54:	00044e3b 	.word	0x00044e3b
   39b58:	00044643 	.word	0x00044643
   39b5c:	00044e6f 	.word	0x00044e6f
   39b60:	2002a23c 	.word	0x2002a23c
   39b64:	20026044 	.word	0x20026044
   39b68:	00049277 	.word	0x00049277
   39b6c:	00049226 	.word	0x00049226
   39b70:	2002a214 	.word	0x2002a214
   39b74:	00044e84 	.word	0x00044e84
   39b78:	00044e9b 	.word	0x00044e9b

00039b7c <z_time_slice>:
	if (pending_current == _current) {
   39b7c:	4a15      	ldr	r2, [pc, #84]	; (39bd4 <z_time_slice+0x58>)
   39b7e:	4916      	ldr	r1, [pc, #88]	; (39bd8 <z_time_slice+0x5c>)
{
   39b80:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   39b82:	680c      	ldr	r4, [r1, #0]
   39b84:	6893      	ldr	r3, [r2, #8]
   39b86:	42a3      	cmp	r3, r4
   39b88:	4614      	mov	r4, r2
   39b8a:	d103      	bne.n	39b94 <z_time_slice+0x18>
}
   39b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   39b90:	f7ff bbca 	b.w	39328 <z_reset_time_slice>
	pending_current = NULL;
   39b94:	2500      	movs	r5, #0
   39b96:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
   39b98:	4910      	ldr	r1, [pc, #64]	; (39bdc <z_time_slice+0x60>)
   39b9a:	6809      	ldr	r1, [r1, #0]
   39b9c:	b1b9      	cbz	r1, 39bce <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   39b9e:	89d9      	ldrh	r1, [r3, #14]
   39ba0:	297f      	cmp	r1, #127	; 0x7f
   39ba2:	d814      	bhi.n	39bce <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
   39ba4:	490e      	ldr	r1, [pc, #56]	; (39be0 <z_time_slice+0x64>)
   39ba6:	f993 500e 	ldrsb.w	r5, [r3, #14]
   39baa:	6809      	ldr	r1, [r1, #0]
   39bac:	428d      	cmp	r5, r1
   39bae:	db0e      	blt.n	39bce <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
   39bb0:	490c      	ldr	r1, [pc, #48]	; (39be4 <z_time_slice+0x68>)
   39bb2:	428b      	cmp	r3, r1
   39bb4:	d00b      	beq.n	39bce <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
   39bb6:	6999      	ldr	r1, [r3, #24]
   39bb8:	b949      	cbnz	r1, 39bce <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   39bba:	6911      	ldr	r1, [r2, #16]
   39bbc:	4281      	cmp	r1, r0
   39bbe:	dc03      	bgt.n	39bc8 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   39bc0:	4618      	mov	r0, r3
   39bc2:	f7ff ff4f 	bl	39a64 <z_move_thread_to_end_of_prio_q>
   39bc6:	e7e1      	b.n	39b8c <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
   39bc8:	1a09      	subs	r1, r1, r0
   39bca:	6111      	str	r1, [r2, #16]
}
   39bcc:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   39bce:	2300      	movs	r3, #0
   39bd0:	6123      	str	r3, [r4, #16]
   39bd2:	e7fb      	b.n	39bcc <z_time_slice+0x50>
   39bd4:	2002a214 	.word	0x2002a214
   39bd8:	2002a248 	.word	0x2002a248
   39bdc:	2002a254 	.word	0x2002a254
   39be0:	2002a250 	.word	0x2002a250
   39be4:	20026044 	.word	0x20026044

00039be8 <z_remove_thread_from_ready_q>:
{
   39be8:	b538      	push	{r3, r4, r5, lr}
   39bea:	4604      	mov	r4, r0
	__asm__ volatile(
   39bec:	f04f 0320 	mov.w	r3, #32
   39bf0:	f3ef 8511 	mrs	r5, BASEPRI
   39bf4:	f383 8811 	msr	BASEPRI, r3
   39bf8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   39bfc:	481d      	ldr	r0, [pc, #116]	; (39c74 <z_remove_thread_from_ready_q+0x8c>)
   39bfe:	f000 fce7 	bl	3a5d0 <z_spin_lock_valid>
   39c02:	b960      	cbnz	r0, 39c1e <z_remove_thread_from_ready_q+0x36>
   39c04:	491c      	ldr	r1, [pc, #112]	; (39c78 <z_remove_thread_from_ready_q+0x90>)
   39c06:	235f      	movs	r3, #95	; 0x5f
   39c08:	4a1c      	ldr	r2, [pc, #112]	; (39c7c <z_remove_thread_from_ready_q+0x94>)
   39c0a:	481d      	ldr	r0, [pc, #116]	; (39c80 <z_remove_thread_from_ready_q+0x98>)
   39c0c:	f004 fe8e 	bl	3e92c <printk>
   39c10:	481c      	ldr	r0, [pc, #112]	; (39c84 <z_remove_thread_from_ready_q+0x9c>)
   39c12:	f004 fe8b 	bl	3e92c <printk>
   39c16:	215f      	movs	r1, #95	; 0x5f
   39c18:	4818      	ldr	r0, [pc, #96]	; (39c7c <z_remove_thread_from_ready_q+0x94>)
   39c1a:	f004 fe94 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   39c1e:	4815      	ldr	r0, [pc, #84]	; (39c74 <z_remove_thread_from_ready_q+0x8c>)
   39c20:	f000 fcf4 	bl	3a60c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   39c24:	7b63      	ldrb	r3, [r4, #13]
   39c26:	065a      	lsls	r2, r3, #25
   39c28:	d507      	bpl.n	39c3a <z_remove_thread_from_ready_q+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   39c2a:	4621      	mov	r1, r4
   39c2c:	4816      	ldr	r0, [pc, #88]	; (39c88 <z_remove_thread_from_ready_q+0xa0>)
   39c2e:	f7ff fcf9 	bl	39624 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   39c32:	7b63      	ldrb	r3, [r4, #13]
   39c34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   39c38:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   39c3a:	4b14      	ldr	r3, [pc, #80]	; (39c8c <z_remove_thread_from_ready_q+0xa4>)
   39c3c:	6898      	ldr	r0, [r3, #8]
   39c3e:	1b03      	subs	r3, r0, r4
   39c40:	4258      	negs	r0, r3
   39c42:	4158      	adcs	r0, r3
   39c44:	f7ff fd70 	bl	39728 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   39c48:	480a      	ldr	r0, [pc, #40]	; (39c74 <z_remove_thread_from_ready_q+0x8c>)
   39c4a:	f000 fccf 	bl	3a5ec <z_spin_unlock_valid>
   39c4e:	b960      	cbnz	r0, 39c6a <z_remove_thread_from_ready_q+0x82>
   39c50:	490f      	ldr	r1, [pc, #60]	; (39c90 <z_remove_thread_from_ready_q+0xa8>)
   39c52:	2372      	movs	r3, #114	; 0x72
   39c54:	4a09      	ldr	r2, [pc, #36]	; (39c7c <z_remove_thread_from_ready_q+0x94>)
   39c56:	480a      	ldr	r0, [pc, #40]	; (39c80 <z_remove_thread_from_ready_q+0x98>)
   39c58:	f004 fe68 	bl	3e92c <printk>
   39c5c:	480d      	ldr	r0, [pc, #52]	; (39c94 <z_remove_thread_from_ready_q+0xac>)
   39c5e:	f004 fe65 	bl	3e92c <printk>
   39c62:	2172      	movs	r1, #114	; 0x72
   39c64:	4805      	ldr	r0, [pc, #20]	; (39c7c <z_remove_thread_from_ready_q+0x94>)
   39c66:	f004 fe6e 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   39c6a:	f385 8811 	msr	BASEPRI, r5
   39c6e:	f3bf 8f6f 	isb	sy
}
   39c72:	bd38      	pop	{r3, r4, r5, pc}
   39c74:	2002a24c 	.word	0x2002a24c
   39c78:	00044e5a 	.word	0x00044e5a
   39c7c:	00044e3b 	.word	0x00044e3b
   39c80:	00044643 	.word	0x00044643
   39c84:	00044e6f 	.word	0x00044e6f
   39c88:	2002a23c 	.word	0x2002a23c
   39c8c:	2002a214 	.word	0x2002a214
   39c90:	00044e84 	.word	0x00044e84
   39c94:	00044e9b 	.word	0x00044e9b

00039c98 <pend>:
{
   39c98:	b570      	push	{r4, r5, r6, lr}
   39c9a:	4604      	mov	r4, r0
   39c9c:	460d      	mov	r5, r1
   39c9e:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   39ca0:	f7ff ffa2 	bl	39be8 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   39ca4:	7b63      	ldrb	r3, [r4, #13]
   39ca6:	f043 0302 	orr.w	r3, r3, #2
   39caa:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   39cac:	b1f5      	cbz	r5, 39cec <pend+0x54>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   39cae:	4b21      	ldr	r3, [pc, #132]	; (39d34 <pend+0x9c>)
		thread->base.pended_on = wait_q;
   39cb0:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   39cb2:	429c      	cmp	r4, r3
   39cb4:	d10b      	bne.n	39cce <pend+0x36>
   39cb6:	4920      	ldr	r1, [pc, #128]	; (39d38 <pend+0xa0>)
   39cb8:	4820      	ldr	r0, [pc, #128]	; (39d3c <pend+0xa4>)
   39cba:	f240 237e 	movw	r3, #638	; 0x27e
   39cbe:	4a20      	ldr	r2, [pc, #128]	; (39d40 <pend+0xa8>)
   39cc0:	f004 fe34 	bl	3e92c <printk>
   39cc4:	f240 217e 	movw	r1, #638	; 0x27e
   39cc8:	481d      	ldr	r0, [pc, #116]	; (39d40 <pend+0xa8>)
   39cca:	f004 fe3c 	bl	3e946 <assert_post_action>
	return list->head == list;
   39cce:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   39cd0:	429d      	cmp	r5, r3
   39cd2:	d027      	beq.n	39d24 <pend+0x8c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   39cd4:	b333      	cbz	r3, 39d24 <pend+0x8c>
	if (t1->base.prio < t2->base.prio) {
   39cd6:	f994 200e 	ldrsb.w	r2, [r4, #14]
   39cda:	f993 100e 	ldrsb.w	r1, [r3, #14]
   39cde:	4291      	cmp	r1, r2
   39ce0:	dd1a      	ble.n	39d18 <pend+0x80>
	node->prev = successor->prev;
   39ce2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   39ce4:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   39ce8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   39cea:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   39cec:	1c73      	adds	r3, r6, #1
   39cee:	d020      	beq.n	39d32 <pend+0x9a>
   39cf0:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   39cf4:	f240 30e7 	movw	r0, #999	; 0x3e7
   39cf8:	2100      	movs	r1, #0
   39cfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   39cfe:	fbc5 0106 	smlal	r0, r1, r5, r6
   39d02:	2300      	movs	r3, #0
   39d04:	f7df f80a 	bl	18d1c <__aeabi_ldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   39d08:	490e      	ldr	r1, [pc, #56]	; (39d44 <pend+0xac>)
   39d0a:	1c42      	adds	r2, r0, #1
   39d0c:	f104 0018 	add.w	r0, r4, #24
}
   39d10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   39d14:	f000 bfcc 	b.w	3acb0 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   39d18:	6869      	ldr	r1, [r5, #4]
   39d1a:	428b      	cmp	r3, r1
   39d1c:	d002      	beq.n	39d24 <pend+0x8c>
   39d1e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   39d20:	2b00      	cmp	r3, #0
   39d22:	d1da      	bne.n	39cda <pend+0x42>
	node->prev = list->tail;
   39d24:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   39d26:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   39d28:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   39d2a:	686b      	ldr	r3, [r5, #4]
   39d2c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   39d2e:	606c      	str	r4, [r5, #4]
   39d30:	e7dc      	b.n	39cec <pend+0x54>
}
   39d32:	bd70      	pop	{r4, r5, r6, pc}
   39d34:	20026044 	.word	0x20026044
   39d38:	00049277 	.word	0x00049277
   39d3c:	00044643 	.word	0x00044643
   39d40:	00049226 	.word	0x00049226
   39d44:	00039995 	.word	0x00039995

00039d48 <z_pend_curr_irqlock>:
{
   39d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39d4a:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   39d4c:	4d21      	ldr	r5, [pc, #132]	; (39dd4 <z_pend_curr_irqlock+0x8c>)
	pending_current = _current;
   39d4e:	4c22      	ldr	r4, [pc, #136]	; (39dd8 <z_pend_curr_irqlock+0x90>)
	pend(_current, wait_q, timeout);
   39d50:	68a8      	ldr	r0, [r5, #8]
   39d52:	f7ff ffa1 	bl	39c98 <pend>
	pending_current = _current;
   39d56:	68ab      	ldr	r3, [r5, #8]
   39d58:	4630      	mov	r0, r6
   39d5a:	6023      	str	r3, [r4, #0]
   39d5c:	f7e5 ff04 	bl	1fb68 <z_arch_swap>
   39d60:	4606      	mov	r6, r0
	__asm__ volatile(
   39d62:	f04f 0320 	mov.w	r3, #32
   39d66:	f3ef 8711 	mrs	r7, BASEPRI
   39d6a:	f383 8811 	msr	BASEPRI, r3
   39d6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   39d72:	481a      	ldr	r0, [pc, #104]	; (39ddc <z_pend_curr_irqlock+0x94>)
   39d74:	f000 fc2c 	bl	3a5d0 <z_spin_lock_valid>
   39d78:	b960      	cbnz	r0, 39d94 <z_pend_curr_irqlock+0x4c>
   39d7a:	4919      	ldr	r1, [pc, #100]	; (39de0 <z_pend_curr_irqlock+0x98>)
   39d7c:	235f      	movs	r3, #95	; 0x5f
   39d7e:	4a19      	ldr	r2, [pc, #100]	; (39de4 <z_pend_curr_irqlock+0x9c>)
   39d80:	4819      	ldr	r0, [pc, #100]	; (39de8 <z_pend_curr_irqlock+0xa0>)
   39d82:	f004 fdd3 	bl	3e92c <printk>
   39d86:	4819      	ldr	r0, [pc, #100]	; (39dec <z_pend_curr_irqlock+0xa4>)
   39d88:	f004 fdd0 	bl	3e92c <printk>
   39d8c:	215f      	movs	r1, #95	; 0x5f
   39d8e:	4815      	ldr	r0, [pc, #84]	; (39de4 <z_pend_curr_irqlock+0x9c>)
   39d90:	f004 fdd9 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   39d94:	4811      	ldr	r0, [pc, #68]	; (39ddc <z_pend_curr_irqlock+0x94>)
   39d96:	f000 fc39 	bl	3a60c <z_spin_lock_set_owner>
		if (pending_current == _current) {
   39d9a:	6823      	ldr	r3, [r4, #0]
   39d9c:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   39d9e:	480f      	ldr	r0, [pc, #60]	; (39ddc <z_pend_curr_irqlock+0x94>)
   39da0:	429a      	cmp	r2, r3
			pending_current = NULL;
   39da2:	bf04      	itt	eq
   39da4:	2300      	moveq	r3, #0
   39da6:	6023      	streq	r3, [r4, #0]
   39da8:	f000 fc20 	bl	3a5ec <z_spin_unlock_valid>
   39dac:	b960      	cbnz	r0, 39dc8 <z_pend_curr_irqlock+0x80>
   39dae:	4910      	ldr	r1, [pc, #64]	; (39df0 <z_pend_curr_irqlock+0xa8>)
   39db0:	2372      	movs	r3, #114	; 0x72
   39db2:	4a0c      	ldr	r2, [pc, #48]	; (39de4 <z_pend_curr_irqlock+0x9c>)
   39db4:	480c      	ldr	r0, [pc, #48]	; (39de8 <z_pend_curr_irqlock+0xa0>)
   39db6:	f004 fdb9 	bl	3e92c <printk>
   39dba:	480e      	ldr	r0, [pc, #56]	; (39df4 <z_pend_curr_irqlock+0xac>)
   39dbc:	f004 fdb6 	bl	3e92c <printk>
   39dc0:	2172      	movs	r1, #114	; 0x72
   39dc2:	4808      	ldr	r0, [pc, #32]	; (39de4 <z_pend_curr_irqlock+0x9c>)
   39dc4:	f004 fdbf 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   39dc8:	f387 8811 	msr	BASEPRI, r7
   39dcc:	f3bf 8f6f 	isb	sy
}
   39dd0:	4630      	mov	r0, r6
   39dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   39dd4:	2002a214 	.word	0x2002a214
   39dd8:	2002a248 	.word	0x2002a248
   39ddc:	2002a24c 	.word	0x2002a24c
   39de0:	00044e5a 	.word	0x00044e5a
   39de4:	00044e3b 	.word	0x00044e3b
   39de8:	00044643 	.word	0x00044643
   39dec:	00044e6f 	.word	0x00044e6f
   39df0:	00044e84 	.word	0x00044e84
   39df4:	00044e9b 	.word	0x00044e9b

00039df8 <z_pend_curr>:
{
   39df8:	b538      	push	{r3, r4, r5, lr}
   39dfa:	4605      	mov	r5, r0
   39dfc:	460c      	mov	r4, r1
   39dfe:	4611      	mov	r1, r2
	pending_current = _current;
   39e00:	4a0e      	ldr	r2, [pc, #56]	; (39e3c <z_pend_curr+0x44>)
   39e02:	6890      	ldr	r0, [r2, #8]
   39e04:	4a0e      	ldr	r2, [pc, #56]	; (39e40 <z_pend_curr+0x48>)
   39e06:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   39e08:	461a      	mov	r2, r3
   39e0a:	f7ff ff45 	bl	39c98 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   39e0e:	4628      	mov	r0, r5
   39e10:	f000 fbec 	bl	3a5ec <z_spin_unlock_valid>
   39e14:	b960      	cbnz	r0, 39e30 <z_pend_curr+0x38>
   39e16:	490b      	ldr	r1, [pc, #44]	; (39e44 <z_pend_curr+0x4c>)
   39e18:	2389      	movs	r3, #137	; 0x89
   39e1a:	4a0b      	ldr	r2, [pc, #44]	; (39e48 <z_pend_curr+0x50>)
   39e1c:	480b      	ldr	r0, [pc, #44]	; (39e4c <z_pend_curr+0x54>)
   39e1e:	f004 fd85 	bl	3e92c <printk>
   39e22:	480b      	ldr	r0, [pc, #44]	; (39e50 <z_pend_curr+0x58>)
   39e24:	f004 fd82 	bl	3e92c <printk>
   39e28:	2189      	movs	r1, #137	; 0x89
   39e2a:	4807      	ldr	r0, [pc, #28]	; (39e48 <z_pend_curr+0x50>)
   39e2c:	f004 fd8b 	bl	3e946 <assert_post_action>
   39e30:	4620      	mov	r0, r4
}
   39e32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   39e36:	f7e5 be97 	b.w	1fb68 <z_arch_swap>
   39e3a:	bf00      	nop
   39e3c:	2002a214 	.word	0x2002a214
   39e40:	2002a248 	.word	0x2002a248
   39e44:	00044e84 	.word	0x00044e84
   39e48:	00044e3b 	.word	0x00044e3b
   39e4c:	00044643 	.word	0x00044643
   39e50:	00044e9b 	.word	0x00044e9b

00039e54 <z_set_prio>:
{
   39e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39e56:	4604      	mov	r4, r0
   39e58:	460d      	mov	r5, r1
	__asm__ volatile(
   39e5a:	f04f 0320 	mov.w	r3, #32
   39e5e:	f3ef 8611 	mrs	r6, BASEPRI
   39e62:	f383 8811 	msr	BASEPRI, r3
   39e66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   39e6a:	4834      	ldr	r0, [pc, #208]	; (39f3c <z_set_prio+0xe8>)
   39e6c:	f000 fbb0 	bl	3a5d0 <z_spin_lock_valid>
   39e70:	b960      	cbnz	r0, 39e8c <z_set_prio+0x38>
   39e72:	4933      	ldr	r1, [pc, #204]	; (39f40 <z_set_prio+0xec>)
   39e74:	235f      	movs	r3, #95	; 0x5f
   39e76:	4a33      	ldr	r2, [pc, #204]	; (39f44 <z_set_prio+0xf0>)
   39e78:	4833      	ldr	r0, [pc, #204]	; (39f48 <z_set_prio+0xf4>)
   39e7a:	f004 fd57 	bl	3e92c <printk>
   39e7e:	4833      	ldr	r0, [pc, #204]	; (39f4c <z_set_prio+0xf8>)
   39e80:	f004 fd54 	bl	3e92c <printk>
   39e84:	215f      	movs	r1, #95	; 0x5f
   39e86:	482f      	ldr	r0, [pc, #188]	; (39f44 <z_set_prio+0xf0>)
   39e88:	f004 fd5d 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   39e8c:	482b      	ldr	r0, [pc, #172]	; (39f3c <z_set_prio+0xe8>)
   39e8e:	f000 fbbd 	bl	3a60c <z_spin_lock_set_owner>
		need_sched = z_is_thread_ready(thread);
   39e92:	4620      	mov	r0, r4
   39e94:	f006 fe07 	bl	40aa6 <z_is_thread_ready>
		if (need_sched) {
   39e98:	b26d      	sxtb	r5, r5
   39e9a:	4607      	mov	r7, r0
   39e9c:	2800      	cmp	r0, #0
   39e9e:	d04b      	beq.n	39f38 <z_set_prio+0xe4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   39ea0:	4621      	mov	r1, r4
   39ea2:	482b      	ldr	r0, [pc, #172]	; (39f50 <z_set_prio+0xfc>)
   39ea4:	f7ff fbbe 	bl	39624 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   39ea8:	4b2a      	ldr	r3, [pc, #168]	; (39f54 <z_set_prio+0x100>)
				thread->base.prio = prio;
   39eaa:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   39eac:	429c      	cmp	r4, r3
   39eae:	d10b      	bne.n	39ec8 <z_set_prio+0x74>
   39eb0:	4929      	ldr	r1, [pc, #164]	; (39f58 <z_set_prio+0x104>)
   39eb2:	4825      	ldr	r0, [pc, #148]	; (39f48 <z_set_prio+0xf4>)
   39eb4:	f240 237e 	movw	r3, #638	; 0x27e
   39eb8:	4a28      	ldr	r2, [pc, #160]	; (39f5c <z_set_prio+0x108>)
   39eba:	f004 fd37 	bl	3e92c <printk>
   39ebe:	f240 217e 	movw	r1, #638	; 0x27e
   39ec2:	4826      	ldr	r0, [pc, #152]	; (39f5c <z_set_prio+0x108>)
   39ec4:	f004 fd3f 	bl	3e946 <assert_post_action>
	return list->head == list;
   39ec8:	4a25      	ldr	r2, [pc, #148]	; (39f60 <z_set_prio+0x10c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   39eca:	f102 0128 	add.w	r1, r2, #40	; 0x28
   39ece:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   39ed2:	428b      	cmp	r3, r1
   39ed4:	d02a      	beq.n	39f2c <z_set_prio+0xd8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   39ed6:	b34b      	cbz	r3, 39f2c <z_set_prio+0xd8>
	if (t1->base.prio < t2->base.prio) {
   39ed8:	f994 500e 	ldrsb.w	r5, [r4, #14]
   39edc:	f993 c00e 	ldrsb.w	ip, [r3, #14]
   39ee0:	45ac      	cmp	ip, r5
   39ee2:	dd1e      	ble.n	39f22 <z_set_prio+0xce>
	node->prev = successor->prev;
   39ee4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   39ee6:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   39eea:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   39eec:	605c      	str	r4, [r3, #4]
			update_cache(1);
   39eee:	2001      	movs	r0, #1
   39ef0:	f7ff fc1a 	bl	39728 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   39ef4:	4811      	ldr	r0, [pc, #68]	; (39f3c <z_set_prio+0xe8>)
   39ef6:	f000 fb79 	bl	3a5ec <z_spin_unlock_valid>
   39efa:	b960      	cbnz	r0, 39f16 <z_set_prio+0xc2>
   39efc:	4919      	ldr	r1, [pc, #100]	; (39f64 <z_set_prio+0x110>)
   39efe:	2372      	movs	r3, #114	; 0x72
   39f00:	4a10      	ldr	r2, [pc, #64]	; (39f44 <z_set_prio+0xf0>)
   39f02:	4811      	ldr	r0, [pc, #68]	; (39f48 <z_set_prio+0xf4>)
   39f04:	f004 fd12 	bl	3e92c <printk>
   39f08:	4817      	ldr	r0, [pc, #92]	; (39f68 <z_set_prio+0x114>)
   39f0a:	f004 fd0f 	bl	3e92c <printk>
   39f0e:	2172      	movs	r1, #114	; 0x72
   39f10:	480c      	ldr	r0, [pc, #48]	; (39f44 <z_set_prio+0xf0>)
   39f12:	f004 fd18 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   39f16:	f386 8811 	msr	BASEPRI, r6
   39f1a:	f3bf 8f6f 	isb	sy
}
   39f1e:	4638      	mov	r0, r7
   39f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   39f22:	4298      	cmp	r0, r3
   39f24:	d002      	beq.n	39f2c <z_set_prio+0xd8>
   39f26:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   39f28:	2b00      	cmp	r3, #0
   39f2a:	d1d7      	bne.n	39edc <z_set_prio+0x88>
	node->prev = list->tail;
   39f2c:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   39f30:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   39f32:	601c      	str	r4, [r3, #0]
	list->tail = node;
   39f34:	62d4      	str	r4, [r2, #44]	; 0x2c
   39f36:	e7da      	b.n	39eee <z_set_prio+0x9a>
			thread->base.prio = prio;
   39f38:	73a5      	strb	r5, [r4, #14]
   39f3a:	e7db      	b.n	39ef4 <z_set_prio+0xa0>
   39f3c:	2002a24c 	.word	0x2002a24c
   39f40:	00044e5a 	.word	0x00044e5a
   39f44:	00044e3b 	.word	0x00044e3b
   39f48:	00044643 	.word	0x00044643
   39f4c:	00044e6f 	.word	0x00044e6f
   39f50:	2002a23c 	.word	0x2002a23c
   39f54:	20026044 	.word	0x20026044
   39f58:	00049277 	.word	0x00049277
   39f5c:	00049226 	.word	0x00049226
   39f60:	2002a214 	.word	0x2002a214
   39f64:	00044e84 	.word	0x00044e84
   39f68:	00044e9b 	.word	0x00044e9b

00039f6c <z_unpend_first_thread>:
{
   39f6c:	b538      	push	{r3, r4, r5, lr}
   39f6e:	4604      	mov	r4, r0
	__asm__ volatile(
   39f70:	f04f 0320 	mov.w	r3, #32
   39f74:	f3ef 8511 	mrs	r5, BASEPRI
   39f78:	f383 8811 	msr	BASEPRI, r3
   39f7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   39f80:	4839      	ldr	r0, [pc, #228]	; (3a068 <z_unpend_first_thread+0xfc>)
   39f82:	f000 fb25 	bl	3a5d0 <z_spin_lock_valid>
   39f86:	b960      	cbnz	r0, 39fa2 <z_unpend_first_thread+0x36>
   39f88:	4938      	ldr	r1, [pc, #224]	; (3a06c <z_unpend_first_thread+0x100>)
   39f8a:	235f      	movs	r3, #95	; 0x5f
   39f8c:	4a38      	ldr	r2, [pc, #224]	; (3a070 <z_unpend_first_thread+0x104>)
   39f8e:	4839      	ldr	r0, [pc, #228]	; (3a074 <z_unpend_first_thread+0x108>)
   39f90:	f004 fccc 	bl	3e92c <printk>
   39f94:	4838      	ldr	r0, [pc, #224]	; (3a078 <z_unpend_first_thread+0x10c>)
   39f96:	f004 fcc9 	bl	3e92c <printk>
   39f9a:	215f      	movs	r1, #95	; 0x5f
   39f9c:	4834      	ldr	r0, [pc, #208]	; (3a070 <z_unpend_first_thread+0x104>)
   39f9e:	f004 fcd2 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   39fa2:	4831      	ldr	r0, [pc, #196]	; (3a068 <z_unpend_first_thread+0xfc>)
   39fa4:	f000 fb32 	bl	3a60c <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   39fa8:	4620      	mov	r0, r4
   39faa:	f006 fda8 	bl	40afe <z_priq_dumb_best>
   39fae:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   39fb0:	482d      	ldr	r0, [pc, #180]	; (3a068 <z_unpend_first_thread+0xfc>)
   39fb2:	f000 fb1b 	bl	3a5ec <z_spin_unlock_valid>
   39fb6:	b960      	cbnz	r0, 39fd2 <z_unpend_first_thread+0x66>
   39fb8:	4930      	ldr	r1, [pc, #192]	; (3a07c <z_unpend_first_thread+0x110>)
   39fba:	2372      	movs	r3, #114	; 0x72
   39fbc:	4a2c      	ldr	r2, [pc, #176]	; (3a070 <z_unpend_first_thread+0x104>)
   39fbe:	482d      	ldr	r0, [pc, #180]	; (3a074 <z_unpend_first_thread+0x108>)
   39fc0:	f004 fcb4 	bl	3e92c <printk>
   39fc4:	482e      	ldr	r0, [pc, #184]	; (3a080 <z_unpend_first_thread+0x114>)
   39fc6:	f004 fcb1 	bl	3e92c <printk>
   39fca:	2172      	movs	r1, #114	; 0x72
   39fcc:	4828      	ldr	r0, [pc, #160]	; (3a070 <z_unpend_first_thread+0x104>)
   39fce:	f004 fcba 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   39fd2:	f385 8811 	msr	BASEPRI, r5
   39fd6:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   39fda:	2c00      	cmp	r4, #0
   39fdc:	d041      	beq.n	3a062 <z_unpend_first_thread+0xf6>
	__asm__ volatile(
   39fde:	f04f 0320 	mov.w	r3, #32
   39fe2:	f3ef 8511 	mrs	r5, BASEPRI
   39fe6:	f383 8811 	msr	BASEPRI, r3
   39fea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   39fee:	481e      	ldr	r0, [pc, #120]	; (3a068 <z_unpend_first_thread+0xfc>)
   39ff0:	f000 faee 	bl	3a5d0 <z_spin_lock_valid>
   39ff4:	b960      	cbnz	r0, 3a010 <z_unpend_first_thread+0xa4>
   39ff6:	491d      	ldr	r1, [pc, #116]	; (3a06c <z_unpend_first_thread+0x100>)
   39ff8:	235f      	movs	r3, #95	; 0x5f
   39ffa:	4a1d      	ldr	r2, [pc, #116]	; (3a070 <z_unpend_first_thread+0x104>)
   39ffc:	481d      	ldr	r0, [pc, #116]	; (3a074 <z_unpend_first_thread+0x108>)
   39ffe:	f004 fc95 	bl	3e92c <printk>
   3a002:	481d      	ldr	r0, [pc, #116]	; (3a078 <z_unpend_first_thread+0x10c>)
   3a004:	f004 fc92 	bl	3e92c <printk>
   3a008:	215f      	movs	r1, #95	; 0x5f
   3a00a:	4819      	ldr	r0, [pc, #100]	; (3a070 <z_unpend_first_thread+0x104>)
   3a00c:	f004 fc9b 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   3a010:	4815      	ldr	r0, [pc, #84]	; (3a068 <z_unpend_first_thread+0xfc>)
   3a012:	f000 fafb 	bl	3a60c <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   3a016:	f104 0008 	add.w	r0, r4, #8
   3a01a:	f7ff f96d 	bl	392f8 <pended_on.isra.16>
   3a01e:	4621      	mov	r1, r4
   3a020:	f7ff fb00 	bl	39624 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   3a024:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3a026:	4810      	ldr	r0, [pc, #64]	; (3a068 <z_unpend_first_thread+0xfc>)
   3a028:	f023 0302 	bic.w	r3, r3, #2
   3a02c:	7363      	strb	r3, [r4, #13]
   3a02e:	f000 fadd 	bl	3a5ec <z_spin_unlock_valid>
   3a032:	b960      	cbnz	r0, 3a04e <z_unpend_first_thread+0xe2>
   3a034:	4911      	ldr	r1, [pc, #68]	; (3a07c <z_unpend_first_thread+0x110>)
   3a036:	2372      	movs	r3, #114	; 0x72
   3a038:	4a0d      	ldr	r2, [pc, #52]	; (3a070 <z_unpend_first_thread+0x104>)
   3a03a:	480e      	ldr	r0, [pc, #56]	; (3a074 <z_unpend_first_thread+0x108>)
   3a03c:	f004 fc76 	bl	3e92c <printk>
   3a040:	480f      	ldr	r0, [pc, #60]	; (3a080 <z_unpend_first_thread+0x114>)
   3a042:	f004 fc73 	bl	3e92c <printk>
   3a046:	2172      	movs	r1, #114	; 0x72
   3a048:	4809      	ldr	r0, [pc, #36]	; (3a070 <z_unpend_first_thread+0x104>)
   3a04a:	f004 fc7c 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   3a04e:	f385 8811 	msr	BASEPRI, r5
   3a052:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   3a056:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   3a058:	f104 0018 	add.w	r0, r4, #24
   3a05c:	60a3      	str	r3, [r4, #8]
   3a05e:	f000 fecb 	bl	3adf8 <z_abort_timeout>
}
   3a062:	4620      	mov	r0, r4
   3a064:	bd38      	pop	{r3, r4, r5, pc}
   3a066:	bf00      	nop
   3a068:	2002a24c 	.word	0x2002a24c
   3a06c:	00044e5a 	.word	0x00044e5a
   3a070:	00044e3b 	.word	0x00044e3b
   3a074:	00044643 	.word	0x00044643
   3a078:	00044e6f 	.word	0x00044e6f
   3a07c:	00044e84 	.word	0x00044e84
   3a080:	00044e9b 	.word	0x00044e9b

0003a084 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   3a084:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   3a086:	4b04      	ldr	r3, [pc, #16]	; (3a098 <z_sched_init+0x14>)
   3a088:	4608      	mov	r0, r1
   3a08a:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   3a08e:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   3a092:	f7ff b95f 	b.w	39354 <k_sched_time_slice_set>
   3a096:	bf00      	nop
   3a098:	2002a214 	.word	0x2002a214

0003a09c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   3a09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a09e:	f3ef 8305 	mrs	r3, IPSR
   3a0a2:	2b0d      	cmp	r3, #13
   3a0a4:	d804      	bhi.n	3a0b0 <z_impl_k_yield+0x14>
   3a0a6:	b193      	cbz	r3, 3a0ce <z_impl_k_yield+0x32>
   3a0a8:	4b46      	ldr	r3, [pc, #280]	; (3a1c4 <z_impl_k_yield+0x128>)
   3a0aa:	685b      	ldr	r3, [r3, #4]
   3a0ac:	051b      	lsls	r3, r3, #20
   3a0ae:	d40e      	bmi.n	3a0ce <z_impl_k_yield+0x32>
	__ASSERT(!z_arch_is_in_isr(), "");
   3a0b0:	4945      	ldr	r1, [pc, #276]	; (3a1c8 <z_impl_k_yield+0x12c>)
   3a0b2:	f44f 7362 	mov.w	r3, #904	; 0x388
   3a0b6:	4a45      	ldr	r2, [pc, #276]	; (3a1cc <z_impl_k_yield+0x130>)
   3a0b8:	4845      	ldr	r0, [pc, #276]	; (3a1d0 <z_impl_k_yield+0x134>)
   3a0ba:	f004 fc37 	bl	3e92c <printk>
   3a0be:	4845      	ldr	r0, [pc, #276]	; (3a1d4 <z_impl_k_yield+0x138>)
   3a0c0:	f004 fc34 	bl	3e92c <printk>
   3a0c4:	f44f 7162 	mov.w	r1, #904	; 0x388
   3a0c8:	4840      	ldr	r0, [pc, #256]	; (3a1cc <z_impl_k_yield+0x130>)
   3a0ca:	f004 fc3c 	bl	3e946 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   3a0ce:	4c42      	ldr	r4, [pc, #264]	; (3a1d8 <z_impl_k_yield+0x13c>)
   3a0d0:	4e42      	ldr	r6, [pc, #264]	; (3a1dc <z_impl_k_yield+0x140>)
   3a0d2:	68a2      	ldr	r2, [r4, #8]
   3a0d4:	42b2      	cmp	r2, r6
   3a0d6:	d05d      	beq.n	3a194 <z_impl_k_yield+0xf8>
	__asm__ volatile(
   3a0d8:	f04f 0320 	mov.w	r3, #32
   3a0dc:	f3ef 8711 	mrs	r7, BASEPRI
   3a0e0:	f383 8811 	msr	BASEPRI, r3
   3a0e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3a0e8:	483d      	ldr	r0, [pc, #244]	; (3a1e0 <z_impl_k_yield+0x144>)
   3a0ea:	f000 fa71 	bl	3a5d0 <z_spin_lock_valid>
   3a0ee:	b960      	cbnz	r0, 3a10a <z_impl_k_yield+0x6e>
   3a0f0:	493c      	ldr	r1, [pc, #240]	; (3a1e4 <z_impl_k_yield+0x148>)
   3a0f2:	235f      	movs	r3, #95	; 0x5f
   3a0f4:	4a3c      	ldr	r2, [pc, #240]	; (3a1e8 <z_impl_k_yield+0x14c>)
   3a0f6:	4836      	ldr	r0, [pc, #216]	; (3a1d0 <z_impl_k_yield+0x134>)
   3a0f8:	f004 fc18 	bl	3e92c <printk>
   3a0fc:	483b      	ldr	r0, [pc, #236]	; (3a1ec <z_impl_k_yield+0x150>)
   3a0fe:	f004 fc15 	bl	3e92c <printk>
   3a102:	215f      	movs	r1, #95	; 0x5f
   3a104:	4838      	ldr	r0, [pc, #224]	; (3a1e8 <z_impl_k_yield+0x14c>)
   3a106:	f004 fc1e 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   3a10a:	4835      	ldr	r0, [pc, #212]	; (3a1e0 <z_impl_k_yield+0x144>)
   3a10c:	f000 fa7e 	bl	3a60c <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   3a110:	68a1      	ldr	r1, [r4, #8]
   3a112:	4837      	ldr	r0, [pc, #220]	; (3a1f0 <z_impl_k_yield+0x154>)
   3a114:	f7ff fa86 	bl	39624 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   3a118:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3a11a:	42b5      	cmp	r5, r6
   3a11c:	d10b      	bne.n	3a136 <z_impl_k_yield+0x9a>
   3a11e:	4935      	ldr	r1, [pc, #212]	; (3a1f4 <z_impl_k_yield+0x158>)
   3a120:	482b      	ldr	r0, [pc, #172]	; (3a1d0 <z_impl_k_yield+0x134>)
   3a122:	f240 237e 	movw	r3, #638	; 0x27e
   3a126:	4a29      	ldr	r2, [pc, #164]	; (3a1cc <z_impl_k_yield+0x130>)
   3a128:	f004 fc00 	bl	3e92c <printk>
   3a12c:	f240 217e 	movw	r1, #638	; 0x27e
   3a130:	4826      	ldr	r0, [pc, #152]	; (3a1cc <z_impl_k_yield+0x130>)
   3a132:	f004 fc08 	bl	3e946 <assert_post_action>
	return list->head == list;
   3a136:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3a13a:	4a2d      	ldr	r2, [pc, #180]	; (3a1f0 <z_impl_k_yield+0x154>)
   3a13c:	4293      	cmp	r3, r2
   3a13e:	d03a      	beq.n	3a1b6 <z_impl_k_yield+0x11a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3a140:	2b00      	cmp	r3, #0
   3a142:	d038      	beq.n	3a1b6 <z_impl_k_yield+0x11a>
	if (t1->base.prio < t2->base.prio) {
   3a144:	f995 000e 	ldrsb.w	r0, [r5, #14]
   3a148:	f993 600e 	ldrsb.w	r6, [r3, #14]
   3a14c:	4286      	cmp	r6, r0
   3a14e:	dd2d      	ble.n	3a1ac <z_impl_k_yield+0x110>
	node->prev = successor->prev;
   3a150:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3a152:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   3a156:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   3a158:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   3a15a:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   3a15c:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   3a15e:	7b53      	ldrb	r3, [r2, #13]
   3a160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3a164:	7353      	strb	r3, [r2, #13]
   3a166:	f7ff fadf 	bl	39728 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3a16a:	481d      	ldr	r0, [pc, #116]	; (3a1e0 <z_impl_k_yield+0x144>)
   3a16c:	f000 fa3e 	bl	3a5ec <z_spin_unlock_valid>
   3a170:	b960      	cbnz	r0, 3a18c <z_impl_k_yield+0xf0>
   3a172:	4921      	ldr	r1, [pc, #132]	; (3a1f8 <z_impl_k_yield+0x15c>)
   3a174:	2372      	movs	r3, #114	; 0x72
   3a176:	4a1c      	ldr	r2, [pc, #112]	; (3a1e8 <z_impl_k_yield+0x14c>)
   3a178:	4815      	ldr	r0, [pc, #84]	; (3a1d0 <z_impl_k_yield+0x134>)
   3a17a:	f004 fbd7 	bl	3e92c <printk>
   3a17e:	481f      	ldr	r0, [pc, #124]	; (3a1fc <z_impl_k_yield+0x160>)
   3a180:	f004 fbd4 	bl	3e92c <printk>
   3a184:	2172      	movs	r1, #114	; 0x72
   3a186:	4818      	ldr	r0, [pc, #96]	; (3a1e8 <z_impl_k_yield+0x14c>)
   3a188:	f004 fbdd 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   3a18c:	f387 8811 	msr	BASEPRI, r7
   3a190:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   3a194:	f04f 0320 	mov.w	r3, #32
   3a198:	f3ef 8011 	mrs	r0, BASEPRI
   3a19c:	f383 8811 	msr	BASEPRI, r3
   3a1a0:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   3a1a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   3a1a8:	f7e5 bcde 	b.w	1fb68 <z_arch_swap>
	return (node == list->tail) ? NULL : node->next;
   3a1ac:	428b      	cmp	r3, r1
   3a1ae:	d002      	beq.n	3a1b6 <z_impl_k_yield+0x11a>
   3a1b0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3a1b2:	2b00      	cmp	r3, #0
   3a1b4:	d1c8      	bne.n	3a148 <z_impl_k_yield+0xac>
	node->prev = list->tail;
   3a1b6:	e9c5 2100 	strd	r2, r1, [r5]
	list->tail->next = node;
   3a1ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   3a1bc:	601d      	str	r5, [r3, #0]
	list->tail = node;
   3a1be:	62e5      	str	r5, [r4, #44]	; 0x2c
   3a1c0:	e7cb      	b.n	3a15a <z_impl_k_yield+0xbe>
   3a1c2:	bf00      	nop
   3a1c4:	e000ed00 	.word	0xe000ed00
   3a1c8:	000491c2 	.word	0x000491c2
   3a1cc:	00049226 	.word	0x00049226
   3a1d0:	00044643 	.word	0x00044643
   3a1d4:	000490df 	.word	0x000490df
   3a1d8:	2002a214 	.word	0x2002a214
   3a1dc:	20026044 	.word	0x20026044
   3a1e0:	2002a24c 	.word	0x2002a24c
   3a1e4:	00044e5a 	.word	0x00044e5a
   3a1e8:	00044e3b 	.word	0x00044e3b
   3a1ec:	00044e6f 	.word	0x00044e6f
   3a1f0:	2002a23c 	.word	0x2002a23c
   3a1f4:	00049277 	.word	0x00049277
   3a1f8:	00044e84 	.word	0x00044e84
   3a1fc:	00044e9b 	.word	0x00044e9b

0003a200 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
{
   3a200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3a202:	4604      	mov	r4, r0
   3a204:	f3ef 8305 	mrs	r3, IPSR
   3a208:	2b0d      	cmp	r3, #13
   3a20a:	d804      	bhi.n	3a216 <z_tick_sleep+0x16>
   3a20c:	b193      	cbz	r3, 3a234 <z_tick_sleep+0x34>
   3a20e:	4b3c      	ldr	r3, [pc, #240]	; (3a300 <z_tick_sleep+0x100>)
   3a210:	685b      	ldr	r3, [r3, #4]
   3a212:	051a      	lsls	r2, r3, #20
   3a214:	d40e      	bmi.n	3a234 <z_tick_sleep+0x34>
#ifdef CONFIG_MULTITHREADING
	u32_t expected_wakeup_time;

	__ASSERT(!z_arch_is_in_isr(), "");
   3a216:	493b      	ldr	r1, [pc, #236]	; (3a304 <z_tick_sleep+0x104>)
   3a218:	f240 33a6 	movw	r3, #934	; 0x3a6
   3a21c:	4a3a      	ldr	r2, [pc, #232]	; (3a308 <z_tick_sleep+0x108>)
   3a21e:	483b      	ldr	r0, [pc, #236]	; (3a30c <z_tick_sleep+0x10c>)
   3a220:	f004 fb84 	bl	3e92c <printk>
   3a224:	483a      	ldr	r0, [pc, #232]	; (3a310 <z_tick_sleep+0x110>)
   3a226:	f004 fb81 	bl	3e92c <printk>
   3a22a:	f240 31a6 	movw	r1, #934	; 0x3a6
   3a22e:	4836      	ldr	r0, [pc, #216]	; (3a308 <z_tick_sleep+0x108>)
   3a230:	f004 fb89 	bl	3e946 <assert_post_action>

	K_DEBUG("thread %p for %d ticks\n", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   3a234:	b924      	cbnz	r4, 3a240 <z_tick_sleep+0x40>
	z_impl_k_yield();
   3a236:	f7ff ff31 	bl	3a09c <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   3a23a:	4620      	mov	r0, r4
   3a23c:	b003      	add	sp, #12
   3a23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   3a240:	f006 fd04 	bl	40c4c <z_tick_get_32>
	struct k_spinlock local_lock = {};
   3a244:	2300      	movs	r3, #0
	ticks += _TICK_ALIGN;
   3a246:	1c66      	adds	r6, r4, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   3a248:	1834      	adds	r4, r6, r0
	struct k_spinlock local_lock = {};
   3a24a:	9301      	str	r3, [sp, #4]
   3a24c:	f04f 0320 	mov.w	r3, #32
   3a250:	f3ef 8711 	mrs	r7, BASEPRI
   3a254:	f383 8811 	msr	BASEPRI, r3
   3a258:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3a25c:	a801      	add	r0, sp, #4
   3a25e:	f000 f9b7 	bl	3a5d0 <z_spin_lock_valid>
   3a262:	b960      	cbnz	r0, 3a27e <z_tick_sleep+0x7e>
   3a264:	492b      	ldr	r1, [pc, #172]	; (3a314 <z_tick_sleep+0x114>)
   3a266:	235f      	movs	r3, #95	; 0x5f
   3a268:	4a2b      	ldr	r2, [pc, #172]	; (3a318 <z_tick_sleep+0x118>)
   3a26a:	4828      	ldr	r0, [pc, #160]	; (3a30c <z_tick_sleep+0x10c>)
   3a26c:	f004 fb5e 	bl	3e92c <printk>
   3a270:	482a      	ldr	r0, [pc, #168]	; (3a31c <z_tick_sleep+0x11c>)
   3a272:	f004 fb5b 	bl	3e92c <printk>
   3a276:	215f      	movs	r1, #95	; 0x5f
   3a278:	4827      	ldr	r0, [pc, #156]	; (3a318 <z_tick_sleep+0x118>)
   3a27a:	f004 fb64 	bl	3e946 <assert_post_action>
	pending_current = _current;
   3a27e:	4d28      	ldr	r5, [pc, #160]	; (3a320 <z_tick_sleep+0x120>)
	z_spin_lock_set_owner(l);
   3a280:	a801      	add	r0, sp, #4
   3a282:	f000 f9c3 	bl	3a60c <z_spin_lock_set_owner>
   3a286:	4b27      	ldr	r3, [pc, #156]	; (3a324 <z_tick_sleep+0x124>)
   3a288:	68a8      	ldr	r0, [r5, #8]
   3a28a:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
   3a28c:	f7ff fcac 	bl	39be8 <z_remove_thread_from_ready_q>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   3a290:	68a8      	ldr	r0, [r5, #8]
   3a292:	4632      	mov	r2, r6
   3a294:	3018      	adds	r0, #24
   3a296:	4924      	ldr	r1, [pc, #144]	; (3a328 <z_tick_sleep+0x128>)
   3a298:	f000 fd0a 	bl	3acb0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   3a29c:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3a29e:	a801      	add	r0, sp, #4
	thread->base.thread_state |= _THREAD_SUSPENDED;
   3a2a0:	7b53      	ldrb	r3, [r2, #13]
   3a2a2:	f043 0310 	orr.w	r3, r3, #16
   3a2a6:	7353      	strb	r3, [r2, #13]
   3a2a8:	f000 f9a0 	bl	3a5ec <z_spin_unlock_valid>
   3a2ac:	b960      	cbnz	r0, 3a2c8 <z_tick_sleep+0xc8>
   3a2ae:	491f      	ldr	r1, [pc, #124]	; (3a32c <z_tick_sleep+0x12c>)
   3a2b0:	2389      	movs	r3, #137	; 0x89
   3a2b2:	4a19      	ldr	r2, [pc, #100]	; (3a318 <z_tick_sleep+0x118>)
   3a2b4:	4815      	ldr	r0, [pc, #84]	; (3a30c <z_tick_sleep+0x10c>)
   3a2b6:	f004 fb39 	bl	3e92c <printk>
   3a2ba:	481d      	ldr	r0, [pc, #116]	; (3a330 <z_tick_sleep+0x130>)
   3a2bc:	f004 fb36 	bl	3e92c <printk>
   3a2c0:	2189      	movs	r1, #137	; 0x89
   3a2c2:	4815      	ldr	r0, [pc, #84]	; (3a318 <z_tick_sleep+0x118>)
   3a2c4:	f004 fb3f 	bl	3e946 <assert_post_action>
   3a2c8:	4638      	mov	r0, r7
   3a2ca:	f7e5 fc4d 	bl	1fb68 <z_arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   3a2ce:	68ab      	ldr	r3, [r5, #8]
   3a2d0:	7b5b      	ldrb	r3, [r3, #13]
   3a2d2:	06db      	lsls	r3, r3, #27
   3a2d4:	d50e      	bpl.n	3a2f4 <z_tick_sleep+0xf4>
   3a2d6:	4917      	ldr	r1, [pc, #92]	; (3a334 <z_tick_sleep+0x134>)
   3a2d8:	f240 33c3 	movw	r3, #963	; 0x3c3
   3a2dc:	4a0a      	ldr	r2, [pc, #40]	; (3a308 <z_tick_sleep+0x108>)
   3a2de:	480b      	ldr	r0, [pc, #44]	; (3a30c <z_tick_sleep+0x10c>)
   3a2e0:	f004 fb24 	bl	3e92c <printk>
   3a2e4:	480a      	ldr	r0, [pc, #40]	; (3a310 <z_tick_sleep+0x110>)
   3a2e6:	f004 fb21 	bl	3e92c <printk>
   3a2ea:	f240 31c3 	movw	r1, #963	; 0x3c3
   3a2ee:	4806      	ldr	r0, [pc, #24]	; (3a308 <z_tick_sleep+0x108>)
   3a2f0:	f004 fb29 	bl	3e946 <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   3a2f4:	f006 fcaa 	bl	40c4c <z_tick_get_32>
   3a2f8:	1a24      	subs	r4, r4, r0
   3a2fa:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   3a2fe:	e79c      	b.n	3a23a <z_tick_sleep+0x3a>
   3a300:	e000ed00 	.word	0xe000ed00
   3a304:	000491c2 	.word	0x000491c2
   3a308:	00049226 	.word	0x00049226
   3a30c:	00044643 	.word	0x00044643
   3a310:	000490df 	.word	0x000490df
   3a314:	00044e5a 	.word	0x00044e5a
   3a318:	00044e3b 	.word	0x00044e3b
   3a31c:	00044e6f 	.word	0x00044e6f
   3a320:	2002a214 	.word	0x2002a214
   3a324:	2002a248 	.word	0x2002a248
   3a328:	00039995 	.word	0x00039995
   3a32c:	00044e84 	.word	0x00044e84
   3a330:	00044e9b 	.word	0x00044e9b
   3a334:	00049298 	.word	0x00049298

0003a338 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   3a338:	4b01      	ldr	r3, [pc, #4]	; (3a340 <z_impl_k_current_get+0x8>)
   3a33a:	6898      	ldr	r0, [r3, #8]
   3a33c:	4770      	bx	lr
   3a33e:	bf00      	nop
   3a340:	2002a214 	.word	0x2002a214

0003a344 <z_impl_k_sem_init>:

#endif /* CONFIG_OBJECT_TRACING */

void z_impl_k_sem_init(struct k_sem *sem, unsigned int initial_count,
		      unsigned int limit)
{
   3a344:	b570      	push	{r4, r5, r6, lr}
   3a346:	4604      	mov	r4, r0
   3a348:	460e      	mov	r6, r1
	__ASSERT(limit != 0U, "limit cannot be zero");
   3a34a:	4615      	mov	r5, r2
   3a34c:	b962      	cbnz	r2, 3a368 <z_impl_k_sem_init+0x24>
   3a34e:	4912      	ldr	r1, [pc, #72]	; (3a398 <z_impl_k_sem_init+0x54>)
   3a350:	2341      	movs	r3, #65	; 0x41
   3a352:	4a12      	ldr	r2, [pc, #72]	; (3a39c <z_impl_k_sem_init+0x58>)
   3a354:	4812      	ldr	r0, [pc, #72]	; (3a3a0 <z_impl_k_sem_init+0x5c>)
   3a356:	f004 fae9 	bl	3e92c <printk>
   3a35a:	4812      	ldr	r0, [pc, #72]	; (3a3a4 <z_impl_k_sem_init+0x60>)
   3a35c:	f004 fae6 	bl	3e92c <printk>
   3a360:	2141      	movs	r1, #65	; 0x41
   3a362:	480e      	ldr	r0, [pc, #56]	; (3a39c <z_impl_k_sem_init+0x58>)
   3a364:	f004 faef 	bl	3e946 <assert_post_action>
	__ASSERT(initial_count <= limit, "count cannot be greater than limit");
   3a368:	42b5      	cmp	r5, r6
   3a36a:	d20c      	bcs.n	3a386 <z_impl_k_sem_init+0x42>
   3a36c:	490e      	ldr	r1, [pc, #56]	; (3a3a8 <z_impl_k_sem_init+0x64>)
   3a36e:	2342      	movs	r3, #66	; 0x42
   3a370:	4a0a      	ldr	r2, [pc, #40]	; (3a39c <z_impl_k_sem_init+0x58>)
   3a372:	480b      	ldr	r0, [pc, #44]	; (3a3a0 <z_impl_k_sem_init+0x5c>)
   3a374:	f004 fada 	bl	3e92c <printk>
   3a378:	480c      	ldr	r0, [pc, #48]	; (3a3ac <z_impl_k_sem_init+0x68>)
   3a37a:	f004 fad7 	bl	3e92c <printk>
   3a37e:	2142      	movs	r1, #66	; 0x42
   3a380:	4806      	ldr	r0, [pc, #24]	; (3a39c <z_impl_k_sem_init+0x58>)
   3a382:	f004 fae0 	bl	3e946 <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SEMA_INIT);
	sem->count = initial_count;
	sem->limit = limit;
	z_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   3a386:	f104 0310 	add.w	r3, r4, #16
	sem->limit = limit;
   3a38a:	e9c4 6502 	strd	r6, r5, [r4, #8]
	list->tail = (sys_dnode_t *)list;
   3a38e:	e9c4 4400 	strd	r4, r4, [r4]
   3a392:	e9c4 3304 	strd	r3, r3, [r4, #16]

	SYS_TRACING_OBJ_INIT(k_sem, sem);

	z_object_init(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_INIT);
}
   3a396:	bd70      	pop	{r4, r5, r6, pc}
   3a398:	000492e9 	.word	0x000492e9
   3a39c:	000492d0 	.word	0x000492d0
   3a3a0:	00044643 	.word	0x00044643
   3a3a4:	000492f5 	.word	0x000492f5
   3a3a8:	0004930c 	.word	0x0004930c
   3a3ac:	00049323 	.word	0x00049323

0003a3b0 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   3a3b0:	b570      	push	{r4, r5, r6, lr}
   3a3b2:	4604      	mov	r4, r0
   3a3b4:	f04f 0320 	mov.w	r3, #32
   3a3b8:	f3ef 8611 	mrs	r6, BASEPRI
   3a3bc:	f383 8811 	msr	BASEPRI, r3
   3a3c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3a3c4:	4819      	ldr	r0, [pc, #100]	; (3a42c <z_impl_k_sem_give+0x7c>)
   3a3c6:	f000 f903 	bl	3a5d0 <z_spin_lock_valid>
   3a3ca:	b960      	cbnz	r0, 3a3e6 <z_impl_k_sem_give+0x36>
   3a3cc:	4918      	ldr	r1, [pc, #96]	; (3a430 <z_impl_k_sem_give+0x80>)
   3a3ce:	235f      	movs	r3, #95	; 0x5f
   3a3d0:	4a18      	ldr	r2, [pc, #96]	; (3a434 <z_impl_k_sem_give+0x84>)
   3a3d2:	4819      	ldr	r0, [pc, #100]	; (3a438 <z_impl_k_sem_give+0x88>)
   3a3d4:	f004 faaa 	bl	3e92c <printk>
   3a3d8:	4818      	ldr	r0, [pc, #96]	; (3a43c <z_impl_k_sem_give+0x8c>)
   3a3da:	f004 faa7 	bl	3e92c <printk>
   3a3de:	215f      	movs	r1, #95	; 0x5f
   3a3e0:	4814      	ldr	r0, [pc, #80]	; (3a434 <z_impl_k_sem_give+0x84>)
   3a3e2:	f004 fab0 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   3a3e6:	4811      	ldr	r0, [pc, #68]	; (3a42c <z_impl_k_sem_give+0x7c>)
   3a3e8:	f000 f910 	bl	3a60c <z_spin_lock_set_owner>
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   3a3ec:	4620      	mov	r0, r4
   3a3ee:	f7ff fdbd 	bl	39f6c <z_unpend_first_thread>
	if (thread != NULL) {
   3a3f2:	4605      	mov	r5, r0
   3a3f4:	b170      	cbz	r0, 3a414 <z_impl_k_sem_give+0x64>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3a3f6:	7b43      	ldrb	r3, [r0, #13]
   3a3f8:	06db      	lsls	r3, r3, #27
   3a3fa:	d103      	bne.n	3a404 <z_impl_k_sem_give+0x54>
	if (z_is_thread_ready(thread)) {
   3a3fc:	6983      	ldr	r3, [r0, #24]
   3a3fe:	b90b      	cbnz	r3, 3a404 <z_impl_k_sem_give+0x54>
		z_add_thread_to_ready_q(thread);
   3a400:	f7ff fa4a 	bl	39898 <z_add_thread_to_ready_q>
   3a404:	2300      	movs	r3, #0
   3a406:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   3a408:	4631      	mov	r1, r6
}
   3a40a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   3a40e:	4807      	ldr	r0, [pc, #28]	; (3a42c <z_impl_k_sem_give+0x7c>)
   3a410:	f7ff b84e 	b.w	394b0 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   3a414:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   3a418:	429a      	cmp	r2, r3
   3a41a:	bf18      	it	ne
   3a41c:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   3a41e:	2102      	movs	r1, #2
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
   3a420:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   3a422:	f104 0010 	add.w	r0, r4, #16
   3a426:	f006 fc6c 	bl	40d02 <z_handle_obj_poll_events>
   3a42a:	e7ed      	b.n	3a408 <z_impl_k_sem_give+0x58>
   3a42c:	2002a258 	.word	0x2002a258
   3a430:	00044e5a 	.word	0x00044e5a
   3a434:	00044e3b 	.word	0x00044e3b
   3a438:	00044643 	.word	0x00044643
   3a43c:	00044e6f 	.word	0x00044e6f

0003a440 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   3a440:	b570      	push	{r4, r5, r6, lr}
   3a442:	4605      	mov	r5, r0
   3a444:	460e      	mov	r6, r1
   3a446:	f3ef 8305 	mrs	r3, IPSR
   3a44a:	2b0d      	cmp	r3, #13
   3a44c:	d804      	bhi.n	3a458 <z_impl_k_sem_take+0x18>
   3a44e:	b18b      	cbz	r3, 3a474 <z_impl_k_sem_take+0x34>
   3a450:	4b34      	ldr	r3, [pc, #208]	; (3a524 <z_impl_k_sem_take+0xe4>)
   3a452:	685b      	ldr	r3, [r3, #4]
   3a454:	051b      	lsls	r3, r3, #20
   3a456:	d40d      	bmi.n	3a474 <z_impl_k_sem_take+0x34>
	__ASSERT(((z_arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");
   3a458:	b166      	cbz	r6, 3a474 <z_impl_k_sem_take+0x34>
   3a45a:	4933      	ldr	r1, [pc, #204]	; (3a528 <z_impl_k_sem_take+0xe8>)
   3a45c:	238d      	movs	r3, #141	; 0x8d
   3a45e:	4a33      	ldr	r2, [pc, #204]	; (3a52c <z_impl_k_sem_take+0xec>)
   3a460:	4833      	ldr	r0, [pc, #204]	; (3a530 <z_impl_k_sem_take+0xf0>)
   3a462:	f004 fa63 	bl	3e92c <printk>
   3a466:	4833      	ldr	r0, [pc, #204]	; (3a534 <z_impl_k_sem_take+0xf4>)
   3a468:	f004 fa60 	bl	3e92c <printk>
   3a46c:	218d      	movs	r1, #141	; 0x8d
   3a46e:	482f      	ldr	r0, [pc, #188]	; (3a52c <z_impl_k_sem_take+0xec>)
   3a470:	f004 fa69 	bl	3e946 <assert_post_action>
   3a474:	f04f 0320 	mov.w	r3, #32
   3a478:	f3ef 8411 	mrs	r4, BASEPRI
   3a47c:	f383 8811 	msr	BASEPRI, r3
   3a480:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3a484:	482c      	ldr	r0, [pc, #176]	; (3a538 <z_impl_k_sem_take+0xf8>)
   3a486:	f000 f8a3 	bl	3a5d0 <z_spin_lock_valid>
   3a48a:	b960      	cbnz	r0, 3a4a6 <z_impl_k_sem_take+0x66>
   3a48c:	492b      	ldr	r1, [pc, #172]	; (3a53c <z_impl_k_sem_take+0xfc>)
   3a48e:	235f      	movs	r3, #95	; 0x5f
   3a490:	4a2b      	ldr	r2, [pc, #172]	; (3a540 <z_impl_k_sem_take+0x100>)
   3a492:	4827      	ldr	r0, [pc, #156]	; (3a530 <z_impl_k_sem_take+0xf0>)
   3a494:	f004 fa4a 	bl	3e92c <printk>
   3a498:	482a      	ldr	r0, [pc, #168]	; (3a544 <z_impl_k_sem_take+0x104>)
   3a49a:	f004 fa47 	bl	3e92c <printk>
   3a49e:	215f      	movs	r1, #95	; 0x5f
   3a4a0:	4827      	ldr	r0, [pc, #156]	; (3a540 <z_impl_k_sem_take+0x100>)
   3a4a2:	f004 fa50 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   3a4a6:	4824      	ldr	r0, [pc, #144]	; (3a538 <z_impl_k_sem_take+0xf8>)
   3a4a8:	f000 f8b0 	bl	3a60c <z_spin_lock_set_owner>

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   3a4ac:	68ab      	ldr	r3, [r5, #8]
   3a4ae:	b1c3      	cbz	r3, 3a4e2 <z_impl_k_sem_take+0xa2>
		sem->count--;
   3a4b0:	3b01      	subs	r3, #1
   3a4b2:	60ab      	str	r3, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3a4b4:	4820      	ldr	r0, [pc, #128]	; (3a538 <z_impl_k_sem_take+0xf8>)
   3a4b6:	f000 f899 	bl	3a5ec <z_spin_unlock_valid>
   3a4ba:	b960      	cbnz	r0, 3a4d6 <z_impl_k_sem_take+0x96>
   3a4bc:	4922      	ldr	r1, [pc, #136]	; (3a548 <z_impl_k_sem_take+0x108>)
   3a4be:	2372      	movs	r3, #114	; 0x72
   3a4c0:	4a1f      	ldr	r2, [pc, #124]	; (3a540 <z_impl_k_sem_take+0x100>)
   3a4c2:	481b      	ldr	r0, [pc, #108]	; (3a530 <z_impl_k_sem_take+0xf0>)
   3a4c4:	f004 fa32 	bl	3e92c <printk>
   3a4c8:	4820      	ldr	r0, [pc, #128]	; (3a54c <z_impl_k_sem_take+0x10c>)
   3a4ca:	f004 fa2f 	bl	3e92c <printk>
   3a4ce:	2172      	movs	r1, #114	; 0x72
   3a4d0:	481b      	ldr	r0, [pc, #108]	; (3a540 <z_impl_k_sem_take+0x100>)
   3a4d2:	f004 fa38 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   3a4d6:	f384 8811 	msr	BASEPRI, r4
   3a4da:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
   3a4de:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
   3a4e0:	bd70      	pop	{r4, r5, r6, pc}
	if (timeout == K_NO_WAIT) {
   3a4e2:	b9be      	cbnz	r6, 3a514 <z_impl_k_sem_take+0xd4>
   3a4e4:	4814      	ldr	r0, [pc, #80]	; (3a538 <z_impl_k_sem_take+0xf8>)
   3a4e6:	f000 f881 	bl	3a5ec <z_spin_unlock_valid>
   3a4ea:	b960      	cbnz	r0, 3a506 <z_impl_k_sem_take+0xc6>
   3a4ec:	4916      	ldr	r1, [pc, #88]	; (3a548 <z_impl_k_sem_take+0x108>)
   3a4ee:	2372      	movs	r3, #114	; 0x72
   3a4f0:	4a13      	ldr	r2, [pc, #76]	; (3a540 <z_impl_k_sem_take+0x100>)
   3a4f2:	480f      	ldr	r0, [pc, #60]	; (3a530 <z_impl_k_sem_take+0xf0>)
   3a4f4:	f004 fa1a 	bl	3e92c <printk>
   3a4f8:	4814      	ldr	r0, [pc, #80]	; (3a54c <z_impl_k_sem_take+0x10c>)
   3a4fa:	f004 fa17 	bl	3e92c <printk>
   3a4fe:	2172      	movs	r1, #114	; 0x72
   3a500:	480f      	ldr	r0, [pc, #60]	; (3a540 <z_impl_k_sem_take+0x100>)
   3a502:	f004 fa20 	bl	3e946 <assert_post_action>
   3a506:	f384 8811 	msr	BASEPRI, r4
   3a50a:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   3a50e:	f06f 000f 	mvn.w	r0, #15
   3a512:	e7e5      	b.n	3a4e0 <z_impl_k_sem_take+0xa0>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   3a514:	4633      	mov	r3, r6
   3a516:	462a      	mov	r2, r5
   3a518:	4621      	mov	r1, r4
}
   3a51a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   3a51e:	4806      	ldr	r0, [pc, #24]	; (3a538 <z_impl_k_sem_take+0xf8>)
   3a520:	f7ff bc6a 	b.w	39df8 <z_pend_curr>
   3a524:	e000ed00 	.word	0xe000ed00
   3a528:	00049348 	.word	0x00049348
   3a52c:	000492d0 	.word	0x000492d0
   3a530:	00044643 	.word	0x00044643
   3a534:	000490df 	.word	0x000490df
   3a538:	2002a258 	.word	0x2002a258
   3a53c:	00044e5a 	.word	0x00044e5a
   3a540:	00044e3b 	.word	0x00044e3b
   3a544:	00044e6f 	.word	0x00044e6f
   3a548:	00044e84 	.word	0x00044e84
   3a54c:	00044e9b 	.word	0x00044e9b

0003a550 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   3a550:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   3a552:	4c08      	ldr	r4, [pc, #32]	; (3a574 <k_sys_work_q_init+0x24>)
   3a554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3a558:	f44f 6200 	mov.w	r2, #2048	; 0x800
   3a55c:	4906      	ldr	r1, [pc, #24]	; (3a578 <k_sys_work_q_init+0x28>)
   3a55e:	4620      	mov	r0, r4
   3a560:	f000 fa70 	bl	3aa44 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   3a564:	4905      	ldr	r1, [pc, #20]	; (3a57c <k_sys_work_q_init+0x2c>)
   3a566:	f104 0014 	add.w	r0, r4, #20
   3a56a:	f006 fb06 	bl	40b7a <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   3a56e:	2000      	movs	r0, #0
   3a570:	bd10      	pop	{r4, pc}
   3a572:	bf00      	nop
   3a574:	2002a25c 	.word	0x2002a25c
   3a578:	2002eef8 	.word	0x2002eef8
   3a57c:	00049376 	.word	0x00049376

0003a580 <k_is_in_isr>:
   3a580:	f3ef 8005 	mrs	r0, IPSR
   3a584:	280d      	cmp	r0, #13
   3a586:	d807      	bhi.n	3a598 <k_is_in_isr+0x18>
   3a588:	b138      	cbz	r0, 3a59a <k_is_in_isr+0x1a>
   3a58a:	4b04      	ldr	r3, [pc, #16]	; (3a59c <k_is_in_isr+0x1c>)
   3a58c:	6858      	ldr	r0, [r3, #4]
   3a58e:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   3a592:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   3a596:	4770      	bx	lr
   3a598:	2001      	movs	r0, #1
}

bool k_is_in_isr(void)
{
	return z_arch_is_in_isr();
}
   3a59a:	4770      	bx	lr
   3a59c:	e000ed00 	.word	0xe000ed00

0003a5a0 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   3a5a0:	b530      	push	{r4, r5, lr}
   3a5a2:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	z_arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   3a5a4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   3a5a6:	4604      	mov	r4, r0
	z_arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   3a5a8:	9504      	str	r5, [sp, #16]
   3a5aa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   3a5ac:	9503      	str	r5, [sp, #12]
   3a5ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   3a5b0:	9502      	str	r5, [sp, #8]
   3a5b2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   3a5b4:	9501      	str	r5, [sp, #4]
   3a5b6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   3a5b8:	9500      	str	r5, [sp, #0]
   3a5ba:	f7e5 fbb1 	bl	1fd20 <z_arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   3a5be:	4b03      	ldr	r3, [pc, #12]	; (3a5cc <z_setup_new_thread+0x2c>)
   3a5c0:	689b      	ldr	r3, [r3, #8]
   3a5c2:	b103      	cbz	r3, 3a5c6 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   3a5c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3a5c6:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   3a5c8:	b007      	add	sp, #28
   3a5ca:	bd30      	pop	{r4, r5, pc}
   3a5cc:	2002a214 	.word	0x2002a214

0003a5d0 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   3a5d0:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   3a5d2:	b138      	cbz	r0, 3a5e4 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   3a5d4:	4b04      	ldr	r3, [pc, #16]	; (3a5e8 <z_spin_lock_valid+0x18>)
   3a5d6:	f000 0003 	and.w	r0, r0, #3
   3a5da:	7d1b      	ldrb	r3, [r3, #20]
   3a5dc:	1ac0      	subs	r0, r0, r3
   3a5de:	bf18      	it	ne
   3a5e0:	2001      	movne	r0, #1
   3a5e2:	4770      	bx	lr
			return false;
		}
	}
	return true;
   3a5e4:	2001      	movs	r0, #1
}
   3a5e6:	4770      	bx	lr
   3a5e8:	2002a214 	.word	0x2002a214

0003a5ec <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   3a5ec:	4a06      	ldr	r2, [pc, #24]	; (3a608 <z_spin_unlock_valid+0x1c>)
   3a5ee:	7d11      	ldrb	r1, [r2, #20]
   3a5f0:	6893      	ldr	r3, [r2, #8]
   3a5f2:	6802      	ldr	r2, [r0, #0]
   3a5f4:	430b      	orrs	r3, r1
   3a5f6:	429a      	cmp	r2, r3
   3a5f8:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   3a5fc:	bf06      	itte	eq
   3a5fe:	6003      	streq	r3, [r0, #0]
	return true;
   3a600:	2001      	moveq	r0, #1
		return false;
   3a602:	4618      	movne	r0, r3
}
   3a604:	4770      	bx	lr
   3a606:	bf00      	nop
   3a608:	2002a214 	.word	0x2002a214

0003a60c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   3a60c:	4a02      	ldr	r2, [pc, #8]	; (3a618 <z_spin_lock_set_owner+0xc>)
   3a60e:	7d11      	ldrb	r1, [r2, #20]
   3a610:	6893      	ldr	r3, [r2, #8]
   3a612:	430b      	orrs	r3, r1
   3a614:	6003      	str	r3, [r0, #0]
}
   3a616:	4770      	bx	lr
   3a618:	2002a214 	.word	0x2002a214

0003a61c <z_impl_k_thread_start>:
{
   3a61c:	b538      	push	{r3, r4, r5, lr}
   3a61e:	4604      	mov	r4, r0
	__asm__ volatile(
   3a620:	f04f 0320 	mov.w	r3, #32
   3a624:	f3ef 8511 	mrs	r5, BASEPRI
   3a628:	f383 8811 	msr	BASEPRI, r3
   3a62c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3a630:	481e      	ldr	r0, [pc, #120]	; (3a6ac <z_impl_k_thread_start+0x90>)
   3a632:	f7ff ffcd 	bl	3a5d0 <z_spin_lock_valid>
   3a636:	b960      	cbnz	r0, 3a652 <z_impl_k_thread_start+0x36>
   3a638:	491d      	ldr	r1, [pc, #116]	; (3a6b0 <z_impl_k_thread_start+0x94>)
   3a63a:	235f      	movs	r3, #95	; 0x5f
   3a63c:	4a1d      	ldr	r2, [pc, #116]	; (3a6b4 <z_impl_k_thread_start+0x98>)
   3a63e:	481e      	ldr	r0, [pc, #120]	; (3a6b8 <z_impl_k_thread_start+0x9c>)
   3a640:	f004 f974 	bl	3e92c <printk>
   3a644:	481d      	ldr	r0, [pc, #116]	; (3a6bc <z_impl_k_thread_start+0xa0>)
   3a646:	f004 f971 	bl	3e92c <printk>
   3a64a:	215f      	movs	r1, #95	; 0x5f
   3a64c:	4819      	ldr	r0, [pc, #100]	; (3a6b4 <z_impl_k_thread_start+0x98>)
   3a64e:	f004 f97a 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   3a652:	4816      	ldr	r0, [pc, #88]	; (3a6ac <z_impl_k_thread_start+0x90>)
   3a654:	f7ff ffda 	bl	3a60c <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   3a658:	7b63      	ldrb	r3, [r4, #13]
   3a65a:	075a      	lsls	r2, r3, #29
   3a65c:	d415      	bmi.n	3a68a <z_impl_k_thread_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3a65e:	4813      	ldr	r0, [pc, #76]	; (3a6ac <z_impl_k_thread_start+0x90>)
   3a660:	f7ff ffc4 	bl	3a5ec <z_spin_unlock_valid>
   3a664:	b960      	cbnz	r0, 3a680 <z_impl_k_thread_start+0x64>
   3a666:	4916      	ldr	r1, [pc, #88]	; (3a6c0 <z_impl_k_thread_start+0xa4>)
   3a668:	2372      	movs	r3, #114	; 0x72
   3a66a:	4a12      	ldr	r2, [pc, #72]	; (3a6b4 <z_impl_k_thread_start+0x98>)
   3a66c:	4812      	ldr	r0, [pc, #72]	; (3a6b8 <z_impl_k_thread_start+0x9c>)
   3a66e:	f004 f95d 	bl	3e92c <printk>
   3a672:	4814      	ldr	r0, [pc, #80]	; (3a6c4 <z_impl_k_thread_start+0xa8>)
   3a674:	f004 f95a 	bl	3e92c <printk>
   3a678:	2172      	movs	r1, #114	; 0x72
   3a67a:	480e      	ldr	r0, [pc, #56]	; (3a6b4 <z_impl_k_thread_start+0x98>)
   3a67c:	f004 f963 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   3a680:	f385 8811 	msr	BASEPRI, r5
   3a684:	f3bf 8f6f 	isb	sy
}
   3a688:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3a68a:	f023 0304 	bic.w	r3, r3, #4
   3a68e:	7363      	strb	r3, [r4, #13]
	if (z_is_thread_ready(thread)) {
   3a690:	4620      	mov	r0, r4
   3a692:	f006 fa69 	bl	40b68 <z_is_thread_ready>
   3a696:	b110      	cbz	r0, 3a69e <z_impl_k_thread_start+0x82>
		z_add_thread_to_ready_q(thread);
   3a698:	4620      	mov	r0, r4
   3a69a:	f7ff f8fd 	bl	39898 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   3a69e:	4629      	mov	r1, r5
}
   3a6a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   3a6a4:	4801      	ldr	r0, [pc, #4]	; (3a6ac <z_impl_k_thread_start+0x90>)
   3a6a6:	f7fe bf03 	b.w	394b0 <z_reschedule>
   3a6aa:	bf00      	nop
   3a6ac:	2002a320 	.word	0x2002a320
   3a6b0:	00044e5a 	.word	0x00044e5a
   3a6b4:	00044e3b 	.word	0x00044e3b
   3a6b8:	00044643 	.word	0x00044643
   3a6bc:	00044e6f 	.word	0x00044e6f
   3a6c0:	00044e84 	.word	0x00044e84
   3a6c4:	00044e9b 	.word	0x00044e9b

0003a6c8 <z_impl_k_thread_create>:
{
   3a6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3a6cc:	b086      	sub	sp, #24
   3a6ce:	4604      	mov	r4, r0
   3a6d0:	460e      	mov	r6, r1
   3a6d2:	4617      	mov	r7, r2
   3a6d4:	4698      	mov	r8, r3
   3a6d6:	9d11      	ldr	r5, [sp, #68]	; 0x44
   3a6d8:	f3ef 8305 	mrs	r3, IPSR
   3a6dc:	2b0d      	cmp	r3, #13
   3a6de:	d804      	bhi.n	3a6ea <z_impl_k_thread_create+0x22>
   3a6e0:	b193      	cbz	r3, 3a708 <z_impl_k_thread_create+0x40>
   3a6e2:	4b21      	ldr	r3, [pc, #132]	; (3a768 <z_impl_k_thread_create+0xa0>)
   3a6e4:	685b      	ldr	r3, [r3, #4]
   3a6e6:	051a      	lsls	r2, r3, #20
   3a6e8:	d40e      	bmi.n	3a708 <z_impl_k_thread_create+0x40>
	__ASSERT(!z_arch_is_in_isr(), "Threads may not be created in ISRs");
   3a6ea:	4920      	ldr	r1, [pc, #128]	; (3a76c <z_impl_k_thread_create+0xa4>)
   3a6ec:	f240 2315 	movw	r3, #533	; 0x215
   3a6f0:	4a1f      	ldr	r2, [pc, #124]	; (3a770 <z_impl_k_thread_create+0xa8>)
   3a6f2:	4820      	ldr	r0, [pc, #128]	; (3a774 <z_impl_k_thread_create+0xac>)
   3a6f4:	f004 f91a 	bl	3e92c <printk>
   3a6f8:	481f      	ldr	r0, [pc, #124]	; (3a778 <z_impl_k_thread_create+0xb0>)
   3a6fa:	f004 f917 	bl	3e92c <printk>
   3a6fe:	f240 2115 	movw	r1, #533	; 0x215
   3a702:	481b      	ldr	r0, [pc, #108]	; (3a770 <z_impl_k_thread_create+0xa8>)
   3a704:	f004 f91f 	bl	3e946 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   3a708:	2300      	movs	r3, #0
   3a70a:	9305      	str	r3, [sp, #20]
   3a70c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3a70e:	463a      	mov	r2, r7
   3a710:	9304      	str	r3, [sp, #16]
   3a712:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3a714:	4631      	mov	r1, r6
   3a716:	9303      	str	r3, [sp, #12]
   3a718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a71a:	4620      	mov	r0, r4
   3a71c:	9302      	str	r3, [sp, #8]
   3a71e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3a720:	9301      	str	r3, [sp, #4]
   3a722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   3a724:	9300      	str	r3, [sp, #0]
   3a726:	4643      	mov	r3, r8
   3a728:	f7ff ff3a 	bl	3a5a0 <z_setup_new_thread>
	if (delay != K_FOREVER) {
   3a72c:	1c6b      	adds	r3, r5, #1
   3a72e:	d003      	beq.n	3a738 <z_impl_k_thread_create+0x70>
	if (delay == 0) {
   3a730:	b935      	cbnz	r5, 3a740 <z_impl_k_thread_create+0x78>
	z_impl_k_thread_start(thread);
   3a732:	4620      	mov	r0, r4
   3a734:	f7ff ff72 	bl	3a61c <z_impl_k_thread_start>
}
   3a738:	4620      	mov	r0, r4
   3a73a:	b006      	add	sp, #24
   3a73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3a740:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   3a744:	f240 30e7 	movw	r0, #999	; 0x3e7
   3a748:	2100      	movs	r1, #0
   3a74a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3a74e:	2300      	movs	r3, #0
   3a750:	fbc6 0105 	smlal	r0, r1, r6, r5
   3a754:	f7de fae2 	bl	18d1c <__aeabi_ldivmod>
   3a758:	4908      	ldr	r1, [pc, #32]	; (3a77c <z_impl_k_thread_create+0xb4>)
   3a75a:	1c42      	adds	r2, r0, #1
   3a75c:	f104 0018 	add.w	r0, r4, #24
   3a760:	f000 faa6 	bl	3acb0 <z_add_timeout>
   3a764:	e7e8      	b.n	3a738 <z_impl_k_thread_create+0x70>
   3a766:	bf00      	nop
   3a768:	e000ed00 	.word	0xe000ed00
   3a76c:	000491c2 	.word	0x000491c2
   3a770:	0004937f 	.word	0x0004937f
   3a774:	00044643 	.word	0x00044643
   3a778:	0004939b 	.word	0x0004939b
   3a77c:	00039995 	.word	0x00039995

0003a780 <z_init_static_threads>:
{
   3a780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   3a784:	4f3c      	ldr	r7, [pc, #240]	; (3a878 <z_init_static_threads+0xf8>)
   3a786:	4d3d      	ldr	r5, [pc, #244]	; (3a87c <z_init_static_threads+0xfc>)
   3a788:	463e      	mov	r6, r7
   3a78a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 3a88c <z_init_static_threads+0x10c>
{
   3a78e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   3a790:	42bd      	cmp	r5, r7
   3a792:	d90e      	bls.n	3a7b2 <z_init_static_threads+0x32>
   3a794:	493a      	ldr	r1, [pc, #232]	; (3a880 <z_init_static_threads+0x100>)
   3a796:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   3a79a:	4642      	mov	r2, r8
   3a79c:	4839      	ldr	r0, [pc, #228]	; (3a884 <z_init_static_threads+0x104>)
   3a79e:	f004 f8c5 	bl	3e92c <printk>
   3a7a2:	4839      	ldr	r0, [pc, #228]	; (3a888 <z_init_static_threads+0x108>)
   3a7a4:	f004 f8c2 	bl	3e92c <printk>
   3a7a8:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   3a7ac:	4640      	mov	r0, r8
   3a7ae:	f004 f8ca 	bl	3e946 <assert_post_action>
   3a7b2:	42b5      	cmp	r5, r6
   3a7b4:	f105 0430 	add.w	r4, r5, #48	; 0x30
   3a7b8:	d31f      	bcc.n	3a7fa <z_init_static_threads+0x7a>
	k_sched_lock();
   3a7ba:	f7fe feb5 	bl	39528 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   3a7be:	4c2f      	ldr	r4, [pc, #188]	; (3a87c <z_init_static_threads+0xfc>)
   3a7c0:	4d32      	ldr	r5, [pc, #200]	; (3a88c <z_init_static_threads+0x10c>)
   3a7c2:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 3a880 <z_init_static_threads+0x100>
   3a7c6:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 3a884 <z_init_static_threads+0x104>
   3a7ca:	42b4      	cmp	r4, r6
   3a7cc:	d90e      	bls.n	3a7ec <z_init_static_threads+0x6c>
   3a7ce:	4641      	mov	r1, r8
   3a7d0:	f240 23f3 	movw	r3, #755	; 0x2f3
   3a7d4:	462a      	mov	r2, r5
   3a7d6:	4648      	mov	r0, r9
   3a7d8:	f004 f8a8 	bl	3e92c <printk>
   3a7dc:	482a      	ldr	r0, [pc, #168]	; (3a888 <z_init_static_threads+0x108>)
   3a7de:	f004 f8a5 	bl	3e92c <printk>
   3a7e2:	f240 21f3 	movw	r1, #755	; 0x2f3
   3a7e6:	4628      	mov	r0, r5
   3a7e8:	f004 f8ad 	bl	3e946 <assert_post_action>
   3a7ec:	42b4      	cmp	r4, r6
   3a7ee:	d321      	bcc.n	3a834 <z_init_static_threads+0xb4>
}
   3a7f0:	b007      	add	sp, #28
   3a7f2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   3a7f6:	f7fe bfcd 	b.w	39794 <k_sched_unlock>
		z_setup_new_thread(
   3a7fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3a7fe:	9305      	str	r3, [sp, #20]
   3a800:	f854 3c10 	ldr.w	r3, [r4, #-16]
   3a804:	9304      	str	r3, [sp, #16]
   3a806:	f854 3c14 	ldr.w	r3, [r4, #-20]
   3a80a:	9303      	str	r3, [sp, #12]
   3a80c:	f854 3c18 	ldr.w	r3, [r4, #-24]
   3a810:	9302      	str	r3, [sp, #8]
   3a812:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   3a816:	9301      	str	r3, [sp, #4]
   3a818:	f854 3c20 	ldr.w	r3, [r4, #-32]
   3a81c:	9300      	str	r3, [sp, #0]
   3a81e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   3a822:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   3a826:	f7ff febb 	bl	3a5a0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   3a82a:	f854 3c30 	ldr.w	r3, [r4, #-48]
   3a82e:	64dd      	str	r5, [r3, #76]	; 0x4c
   3a830:	4625      	mov	r5, r4
   3a832:	e7ad      	b.n	3a790 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_FOREVER) {
   3a834:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   3a838:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
   3a83c:	d006      	beq.n	3a84c <z_init_static_threads+0xcc>
			schedule_new_thread(thread_data->init_thread,
   3a83e:	6827      	ldr	r7, [r4, #0]
	if (delay == 0) {
   3a840:	f1bc 0f00 	cmp.w	ip, #0
   3a844:	d104      	bne.n	3a850 <z_init_static_threads+0xd0>
   3a846:	4638      	mov	r0, r7
   3a848:	f7ff fee8 	bl	3a61c <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   3a84c:	3430      	adds	r4, #48	; 0x30
   3a84e:	e7bc      	b.n	3a7ca <z_init_static_threads+0x4a>
   3a850:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   3a854:	f240 30e7 	movw	r0, #999	; 0x3e7
   3a858:	2100      	movs	r1, #0
   3a85a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3a85e:	2300      	movs	r3, #0
   3a860:	fbce 010c 	smlal	r0, r1, lr, ip
   3a864:	f7de fa5a 	bl	18d1c <__aeabi_ldivmod>
   3a868:	4909      	ldr	r1, [pc, #36]	; (3a890 <z_init_static_threads+0x110>)
   3a86a:	1c42      	adds	r2, r0, #1
   3a86c:	f107 0018 	add.w	r0, r7, #24
   3a870:	f000 fa1e 	bl	3acb0 <z_add_timeout>
   3a874:	e7ea      	b.n	3a84c <z_init_static_threads+0xcc>
   3a876:	bf00      	nop
   3a878:	200315a4 	.word	0x200315a4
   3a87c:	200315a4 	.word	0x200315a4
   3a880:	000493c0 	.word	0x000493c0
   3a884:	00044643 	.word	0x00044643
   3a888:	00049063 	.word	0x00049063
   3a88c:	0004937f 	.word	0x0004937f
   3a890:	00039995 	.word	0x00039995

0003a894 <z_impl_k_thread_suspend>:
{
   3a894:	b538      	push	{r3, r4, r5, lr}
   3a896:	4605      	mov	r5, r0
	__asm__ volatile(
   3a898:	f04f 0320 	mov.w	r3, #32
   3a89c:	f3ef 8411 	mrs	r4, BASEPRI
   3a8a0:	f383 8811 	msr	BASEPRI, r3
   3a8a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3a8a8:	481b      	ldr	r0, [pc, #108]	; (3a918 <z_impl_k_thread_suspend+0x84>)
   3a8aa:	f7ff fe91 	bl	3a5d0 <z_spin_lock_valid>
   3a8ae:	b960      	cbnz	r0, 3a8ca <z_impl_k_thread_suspend+0x36>
   3a8b0:	491a      	ldr	r1, [pc, #104]	; (3a91c <z_impl_k_thread_suspend+0x88>)
   3a8b2:	235f      	movs	r3, #95	; 0x5f
   3a8b4:	4a1a      	ldr	r2, [pc, #104]	; (3a920 <z_impl_k_thread_suspend+0x8c>)
   3a8b6:	481b      	ldr	r0, [pc, #108]	; (3a924 <z_impl_k_thread_suspend+0x90>)
   3a8b8:	f004 f838 	bl	3e92c <printk>
   3a8bc:	481a      	ldr	r0, [pc, #104]	; (3a928 <z_impl_k_thread_suspend+0x94>)
   3a8be:	f004 f835 	bl	3e92c <printk>
   3a8c2:	215f      	movs	r1, #95	; 0x5f
   3a8c4:	4816      	ldr	r0, [pc, #88]	; (3a920 <z_impl_k_thread_suspend+0x8c>)
   3a8c6:	f004 f83e 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   3a8ca:	4813      	ldr	r0, [pc, #76]	; (3a918 <z_impl_k_thread_suspend+0x84>)
   3a8cc:	f7ff fe9e 	bl	3a60c <z_spin_lock_set_owner>
	z_thread_single_suspend(thread);
   3a8d0:	4628      	mov	r0, r5
   3a8d2:	f006 f957 	bl	40b84 <z_thread_single_suspend>
	if (thread == _current) {
   3a8d6:	4b15      	ldr	r3, [pc, #84]	; (3a92c <z_impl_k_thread_suspend+0x98>)
   3a8d8:	689b      	ldr	r3, [r3, #8]
   3a8da:	42ab      	cmp	r3, r5
   3a8dc:	d105      	bne.n	3a8ea <z_impl_k_thread_suspend+0x56>
		z_reschedule(&lock, key);
   3a8de:	4621      	mov	r1, r4
}
   3a8e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   3a8e4:	480c      	ldr	r0, [pc, #48]	; (3a918 <z_impl_k_thread_suspend+0x84>)
   3a8e6:	f7fe bde3 	b.w	394b0 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3a8ea:	480b      	ldr	r0, [pc, #44]	; (3a918 <z_impl_k_thread_suspend+0x84>)
   3a8ec:	f7ff fe7e 	bl	3a5ec <z_spin_unlock_valid>
   3a8f0:	b960      	cbnz	r0, 3a90c <z_impl_k_thread_suspend+0x78>
   3a8f2:	490f      	ldr	r1, [pc, #60]	; (3a930 <z_impl_k_thread_suspend+0x9c>)
   3a8f4:	2372      	movs	r3, #114	; 0x72
   3a8f6:	4a0a      	ldr	r2, [pc, #40]	; (3a920 <z_impl_k_thread_suspend+0x8c>)
   3a8f8:	480a      	ldr	r0, [pc, #40]	; (3a924 <z_impl_k_thread_suspend+0x90>)
   3a8fa:	f004 f817 	bl	3e92c <printk>
   3a8fe:	480d      	ldr	r0, [pc, #52]	; (3a934 <z_impl_k_thread_suspend+0xa0>)
   3a900:	f004 f814 	bl	3e92c <printk>
   3a904:	2172      	movs	r1, #114	; 0x72
   3a906:	4806      	ldr	r0, [pc, #24]	; (3a920 <z_impl_k_thread_suspend+0x8c>)
   3a908:	f004 f81d 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   3a90c:	f384 8811 	msr	BASEPRI, r4
   3a910:	f3bf 8f6f 	isb	sy
}
   3a914:	bd38      	pop	{r3, r4, r5, pc}
   3a916:	bf00      	nop
   3a918:	2002a320 	.word	0x2002a320
   3a91c:	00044e5a 	.word	0x00044e5a
   3a920:	00044e3b 	.word	0x00044e3b
   3a924:	00044643 	.word	0x00044643
   3a928:	00044e6f 	.word	0x00044e6f
   3a92c:	2002a214 	.word	0x2002a214
   3a930:	00044e84 	.word	0x00044e84
   3a934:	00044e9b 	.word	0x00044e9b

0003a938 <z_impl_k_thread_resume>:
{
   3a938:	b538      	push	{r3, r4, r5, lr}
   3a93a:	4605      	mov	r5, r0
	__asm__ volatile(
   3a93c:	f04f 0320 	mov.w	r3, #32
   3a940:	f3ef 8411 	mrs	r4, BASEPRI
   3a944:	f383 8811 	msr	BASEPRI, r3
   3a948:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3a94c:	480e      	ldr	r0, [pc, #56]	; (3a988 <z_impl_k_thread_resume+0x50>)
   3a94e:	f7ff fe3f 	bl	3a5d0 <z_spin_lock_valid>
   3a952:	b960      	cbnz	r0, 3a96e <z_impl_k_thread_resume+0x36>
   3a954:	490d      	ldr	r1, [pc, #52]	; (3a98c <z_impl_k_thread_resume+0x54>)
   3a956:	235f      	movs	r3, #95	; 0x5f
   3a958:	4a0d      	ldr	r2, [pc, #52]	; (3a990 <z_impl_k_thread_resume+0x58>)
   3a95a:	480e      	ldr	r0, [pc, #56]	; (3a994 <z_impl_k_thread_resume+0x5c>)
   3a95c:	f003 ffe6 	bl	3e92c <printk>
   3a960:	480d      	ldr	r0, [pc, #52]	; (3a998 <z_impl_k_thread_resume+0x60>)
   3a962:	f003 ffe3 	bl	3e92c <printk>
   3a966:	215f      	movs	r1, #95	; 0x5f
   3a968:	4809      	ldr	r0, [pc, #36]	; (3a990 <z_impl_k_thread_resume+0x58>)
   3a96a:	f003 ffec 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   3a96e:	4806      	ldr	r0, [pc, #24]	; (3a988 <z_impl_k_thread_resume+0x50>)
   3a970:	f7ff fe4c 	bl	3a60c <z_spin_lock_set_owner>
	z_thread_single_resume(thread);
   3a974:	4628      	mov	r0, r5
   3a976:	f006 f912 	bl	40b9e <z_thread_single_resume>
	z_reschedule(&lock, key);
   3a97a:	4621      	mov	r1, r4
}
   3a97c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   3a980:	4801      	ldr	r0, [pc, #4]	; (3a988 <z_impl_k_thread_resume+0x50>)
   3a982:	f7fe bd95 	b.w	394b0 <z_reschedule>
   3a986:	bf00      	nop
   3a988:	2002a320 	.word	0x2002a320
   3a98c:	00044e5a 	.word	0x00044e5a
   3a990:	00044e3b 	.word	0x00044e3b
   3a994:	00044643 	.word	0x00044643
   3a998:	00044e6f 	.word	0x00044e6f

0003a99c <work_cancel>:
	work->work_q = NULL;
}

static int work_cancel(struct k_delayed_work *work)
{
	__ASSERT(work->work_q != NULL, "");
   3a99c:	69c3      	ldr	r3, [r0, #28]
{
   3a99e:	b570      	push	{r4, r5, r6, lr}
   3a9a0:	4604      	mov	r4, r0
	__ASSERT(work->work_q != NULL, "");
   3a9a2:	b963      	cbnz	r3, 3a9be <work_cancel+0x22>
   3a9a4:	4923      	ldr	r1, [pc, #140]	; (3aa34 <work_cancel+0x98>)
   3a9a6:	2339      	movs	r3, #57	; 0x39
   3a9a8:	4a23      	ldr	r2, [pc, #140]	; (3aa38 <work_cancel+0x9c>)
   3a9aa:	4824      	ldr	r0, [pc, #144]	; (3aa3c <work_cancel+0xa0>)
   3a9ac:	f003 ffbe 	bl	3e92c <printk>
   3a9b0:	4823      	ldr	r0, [pc, #140]	; (3aa40 <work_cancel+0xa4>)
   3a9b2:	f003 ffbb 	bl	3e92c <printk>
   3a9b6:	2139      	movs	r1, #57	; 0x39
   3a9b8:	481f      	ldr	r0, [pc, #124]	; (3aa38 <work_cancel+0x9c>)
   3a9ba:	f003 ffc4 	bl	3e946 <assert_post_action>
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   3a9be:	f104 0508 	add.w	r5, r4, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3a9c2:	e8d5 3faf 	lda	r3, [r5]

	if (k_work_pending(&work->work)) {
   3a9c6:	07db      	lsls	r3, r3, #31
   3a9c8:	d52f      	bpl.n	3aa2a <work_cancel+0x8e>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   3a9ca:	2100      	movs	r1, #0
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   3a9cc:	69e2      	ldr	r2, [r4, #28]
   3a9ce:	6813      	ldr	r3, [r2, #0]
   3a9d0:	b913      	cbnz	r3, 3a9d8 <work_cancel+0x3c>
			return -EINVAL;
   3a9d2:	f06f 0015 	mvn.w	r0, #21
	work->work_q = NULL;

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);

	return 0;
}
   3a9d6:	bd70      	pop	{r4, r5, r6, pc}
   3a9d8:	429c      	cmp	r4, r3
   3a9da:	d121      	bne.n	3aa20 <work_cancel+0x84>
Z_GENLIST_REMOVE(sflist, sfnode)
   3a9dc:	6823      	ldr	r3, [r4, #0]
   3a9de:	6856      	ldr	r6, [r2, #4]
   3a9e0:	f023 0003 	bic.w	r0, r3, #3
   3a9e4:	b991      	cbnz	r1, 3aa0c <work_cancel+0x70>
   3a9e6:	42b4      	cmp	r4, r6
	list->head = node;
   3a9e8:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   3a9ea:	d100      	bne.n	3a9ee <work_cancel+0x52>
	list->tail = node;
   3a9ec:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3a9ee:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3a9f0:	f003 0303 	and.w	r3, r3, #3
   3a9f4:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   3a9f6:	2000      	movs	r0, #0
   3a9f8:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3a9fa:	e8d5 3fef 	ldaex	r3, [r5]
   3a9fe:	f023 0301 	bic.w	r3, r3, #1
   3aa02:	e8c5 3fe2 	stlex	r2, r3, [r5]
   3aa06:	2a00      	cmp	r2, #0
   3aa08:	d0e5      	beq.n	3a9d6 <work_cancel+0x3a>
   3aa0a:	e7f6      	b.n	3a9fa <work_cancel+0x5e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3aa0c:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   3aa0e:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   3aa10:	f003 0303 	and.w	r3, r3, #3
   3aa14:	ea43 0300 	orr.w	r3, r3, r0
   3aa18:	600b      	str	r3, [r1, #0]
	list->tail = node;
   3aa1a:	bf08      	it	eq
   3aa1c:	6051      	streq	r1, [r2, #4]
   3aa1e:	e7e6      	b.n	3a9ee <work_cancel+0x52>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3aa20:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   3aa22:	4619      	mov	r1, r3
   3aa24:	f020 0303 	bic.w	r3, r0, #3
   3aa28:	e7d2      	b.n	3a9d0 <work_cancel+0x34>
		(void)z_abort_timeout(&work->timeout);
   3aa2a:	f104 000c 	add.w	r0, r4, #12
   3aa2e:	f000 f9e3 	bl	3adf8 <z_abort_timeout>
   3aa32:	e7e0      	b.n	3a9f6 <work_cancel+0x5a>
   3aa34:	00049409 	.word	0x00049409
   3aa38:	000493ed 	.word	0x000493ed
   3aa3c:	00044643 	.word	0x00044643
   3aa40:	000490df 	.word	0x000490df

0003aa44 <k_work_q_start>:
{
   3aa44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3aa48:	4605      	mov	r5, r0
   3aa4a:	b086      	sub	sp, #24
   3aa4c:	460e      	mov	r6, r1
   3aa4e:	4617      	mov	r7, r2
   3aa50:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   3aa52:	f006 f81a 	bl	40a8a <z_impl_k_queue_init>
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   3aa56:	f105 0414 	add.w	r4, r5, #20
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   3aa5a:	2000      	movs	r0, #0
   3aa5c:	4b09      	ldr	r3, [pc, #36]	; (3aa84 <k_work_q_start+0x40>)
   3aa5e:	e9cd 0004 	strd	r0, r0, [sp, #16]
   3aa62:	e9cd 0802 	strd	r0, r8, [sp, #8]
   3aa66:	e9cd 5000 	strd	r5, r0, [sp]
   3aa6a:	463a      	mov	r2, r7
   3aa6c:	4631      	mov	r1, r6
   3aa6e:	4620      	mov	r0, r4
   3aa70:	f7ff fe2a 	bl	3a6c8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   3aa74:	4620      	mov	r0, r4
   3aa76:	4904      	ldr	r1, [pc, #16]	; (3aa88 <k_work_q_start+0x44>)
}
   3aa78:	b006      	add	sp, #24
   3aa7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3aa7e:	f006 b87c 	b.w	40b7a <z_impl_k_thread_name_set>
   3aa82:	bf00      	nop
   3aa84:	0003e3e9 	.word	0x0003e3e9
   3aa88:	0004614c 	.word	0x0004614c

0003aa8c <k_delayed_work_submit_to_queue>:

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
   3aa8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3aa90:	4606      	mov	r6, r0
   3aa92:	460d      	mov	r5, r1
   3aa94:	4690      	mov	r8, r2
   3aa96:	f04f 0320 	mov.w	r3, #32
   3aa9a:	f3ef 8711 	mrs	r7, BASEPRI
   3aa9e:	f383 8811 	msr	BASEPRI, r3
   3aaa2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3aaa6:	4836      	ldr	r0, [pc, #216]	; (3ab80 <k_delayed_work_submit_to_queue+0xf4>)
   3aaa8:	f7ff fd92 	bl	3a5d0 <z_spin_lock_valid>
   3aaac:	b960      	cbnz	r0, 3aac8 <k_delayed_work_submit_to_queue+0x3c>
   3aaae:	4935      	ldr	r1, [pc, #212]	; (3ab84 <k_delayed_work_submit_to_queue+0xf8>)
   3aab0:	235f      	movs	r3, #95	; 0x5f
   3aab2:	4a35      	ldr	r2, [pc, #212]	; (3ab88 <k_delayed_work_submit_to_queue+0xfc>)
   3aab4:	4835      	ldr	r0, [pc, #212]	; (3ab8c <k_delayed_work_submit_to_queue+0x100>)
   3aab6:	f003 ff39 	bl	3e92c <printk>
   3aaba:	4835      	ldr	r0, [pc, #212]	; (3ab90 <k_delayed_work_submit_to_queue+0x104>)
   3aabc:	f003 ff36 	bl	3e92c <printk>
   3aac0:	215f      	movs	r1, #95	; 0x5f
   3aac2:	4831      	ldr	r0, [pc, #196]	; (3ab88 <k_delayed_work_submit_to_queue+0xfc>)
   3aac4:	f003 ff3f 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   3aac8:	482d      	ldr	r0, [pc, #180]	; (3ab80 <k_delayed_work_submit_to_queue+0xf4>)
   3aaca:	f7ff fd9f 	bl	3a60c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   3aace:	69ec      	ldr	r4, [r5, #28]
   3aad0:	b1e4      	cbz	r4, 3ab0c <k_delayed_work_submit_to_queue+0x80>
   3aad2:	42b4      	cmp	r4, r6
   3aad4:	d150      	bne.n	3ab78 <k_delayed_work_submit_to_queue+0xec>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   3aad6:	4628      	mov	r0, r5
   3aad8:	f7ff ff60 	bl	3a99c <work_cancel>
		if (err < 0) {
   3aadc:	1e04      	subs	r4, r0, #0
   3aade:	da17      	bge.n	3ab10 <k_delayed_work_submit_to_queue+0x84>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3aae0:	4827      	ldr	r0, [pc, #156]	; (3ab80 <k_delayed_work_submit_to_queue+0xf4>)
   3aae2:	f7ff fd83 	bl	3a5ec <z_spin_unlock_valid>
   3aae6:	b960      	cbnz	r0, 3ab02 <k_delayed_work_submit_to_queue+0x76>
   3aae8:	492a      	ldr	r1, [pc, #168]	; (3ab94 <k_delayed_work_submit_to_queue+0x108>)
   3aaea:	2372      	movs	r3, #114	; 0x72
   3aaec:	4a26      	ldr	r2, [pc, #152]	; (3ab88 <k_delayed_work_submit_to_queue+0xfc>)
   3aaee:	4827      	ldr	r0, [pc, #156]	; (3ab8c <k_delayed_work_submit_to_queue+0x100>)
   3aaf0:	f003 ff1c 	bl	3e92c <printk>
   3aaf4:	4828      	ldr	r0, [pc, #160]	; (3ab98 <k_delayed_work_submit_to_queue+0x10c>)
   3aaf6:	f003 ff19 	bl	3e92c <printk>
   3aafa:	2172      	movs	r1, #114	; 0x72
   3aafc:	4822      	ldr	r0, [pc, #136]	; (3ab88 <k_delayed_work_submit_to_queue+0xfc>)
   3aafe:	f003 ff22 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   3ab02:	f387 8811 	msr	BASEPRI, r7
   3ab06:	f3bf 8f6f 	isb	sy
	z_add_timeout(&work->timeout, work_timeout,
		     _TICK_ALIGN + z_ms_to_ticks(delay));

done:
	k_spin_unlock(&lock, key);
	return err;
   3ab0a:	e01f      	b.n	3ab4c <k_delayed_work_submit_to_queue+0xc0>
	if (work->work_q == work_q) {
   3ab0c:	2e00      	cmp	r6, #0
   3ab0e:	d0e2      	beq.n	3aad6 <k_delayed_work_submit_to_queue+0x4a>
	work->work_q = work_q;
   3ab10:	61ee      	str	r6, [r5, #28]
	if (delay == 0) {
   3ab12:	f1b8 0f00 	cmp.w	r8, #0
   3ab16:	d11c      	bne.n	3ab52 <k_delayed_work_submit_to_queue+0xc6>
   3ab18:	4819      	ldr	r0, [pc, #100]	; (3ab80 <k_delayed_work_submit_to_queue+0xf4>)
   3ab1a:	f7ff fd67 	bl	3a5ec <z_spin_unlock_valid>
   3ab1e:	b960      	cbnz	r0, 3ab3a <k_delayed_work_submit_to_queue+0xae>
   3ab20:	491c      	ldr	r1, [pc, #112]	; (3ab94 <k_delayed_work_submit_to_queue+0x108>)
   3ab22:	2372      	movs	r3, #114	; 0x72
   3ab24:	4a18      	ldr	r2, [pc, #96]	; (3ab88 <k_delayed_work_submit_to_queue+0xfc>)
   3ab26:	4819      	ldr	r0, [pc, #100]	; (3ab8c <k_delayed_work_submit_to_queue+0x100>)
   3ab28:	f003 ff00 	bl	3e92c <printk>
   3ab2c:	481a      	ldr	r0, [pc, #104]	; (3ab98 <k_delayed_work_submit_to_queue+0x10c>)
   3ab2e:	f003 fefd 	bl	3e92c <printk>
   3ab32:	2172      	movs	r1, #114	; 0x72
   3ab34:	4814      	ldr	r0, [pc, #80]	; (3ab88 <k_delayed_work_submit_to_queue+0xfc>)
   3ab36:	f003 ff06 	bl	3e946 <assert_post_action>
   3ab3a:	f387 8811 	msr	BASEPRI, r7
   3ab3e:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   3ab42:	4629      	mov	r1, r5
   3ab44:	4630      	mov	r0, r6
   3ab46:	f006 f860 	bl	40c0a <k_work_submit_to_queue>
		return 0;
   3ab4a:	2400      	movs	r4, #0
}
   3ab4c:	4620      	mov	r0, r4
   3ab4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3ab52:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   3ab56:	f240 30e7 	movw	r0, #999	; 0x3e7
   3ab5a:	2100      	movs	r1, #0
   3ab5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3ab60:	2300      	movs	r3, #0
   3ab62:	fbc6 0108 	smlal	r0, r1, r6, r8
   3ab66:	f7de f8d9 	bl	18d1c <__aeabi_ldivmod>
	z_add_timeout(&work->timeout, work_timeout,
   3ab6a:	490c      	ldr	r1, [pc, #48]	; (3ab9c <k_delayed_work_submit_to_queue+0x110>)
   3ab6c:	1c42      	adds	r2, r0, #1
   3ab6e:	f105 000c 	add.w	r0, r5, #12
   3ab72:	f000 f89d 	bl	3acb0 <z_add_timeout>
   3ab76:	e7b3      	b.n	3aae0 <k_delayed_work_submit_to_queue+0x54>
		err = -EADDRINUSE;
   3ab78:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   3ab7c:	e7b0      	b.n	3aae0 <k_delayed_work_submit_to_queue+0x54>
   3ab7e:	bf00      	nop
   3ab80:	2002a324 	.word	0x2002a324
   3ab84:	00044e5a 	.word	0x00044e5a
   3ab88:	00044e3b 	.word	0x00044e3b
   3ab8c:	00044643 	.word	0x00044643
   3ab90:	00044e6f 	.word	0x00044e6f
   3ab94:	00044e84 	.word	0x00044e84
   3ab98:	00044e9b 	.word	0x00044e9b
   3ab9c:	00040c33 	.word	0x00040c33

0003aba0 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   3aba0:	b538      	push	{r3, r4, r5, lr}
	if (!work->work_q) {
   3aba2:	69c3      	ldr	r3, [r0, #28]
{
   3aba4:	4604      	mov	r4, r0
	if (!work->work_q) {
   3aba6:	2b00      	cmp	r3, #0
   3aba8:	d036      	beq.n	3ac18 <k_delayed_work_cancel+0x78>
	__asm__ volatile(
   3abaa:	f04f 0320 	mov.w	r3, #32
   3abae:	f3ef 8511 	mrs	r5, BASEPRI
   3abb2:	f383 8811 	msr	BASEPRI, r3
   3abb6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3abba:	4819      	ldr	r0, [pc, #100]	; (3ac20 <k_delayed_work_cancel+0x80>)
   3abbc:	f7ff fd08 	bl	3a5d0 <z_spin_lock_valid>
   3abc0:	b960      	cbnz	r0, 3abdc <k_delayed_work_cancel+0x3c>
   3abc2:	4918      	ldr	r1, [pc, #96]	; (3ac24 <k_delayed_work_cancel+0x84>)
   3abc4:	235f      	movs	r3, #95	; 0x5f
   3abc6:	4a18      	ldr	r2, [pc, #96]	; (3ac28 <k_delayed_work_cancel+0x88>)
   3abc8:	4818      	ldr	r0, [pc, #96]	; (3ac2c <k_delayed_work_cancel+0x8c>)
   3abca:	f003 feaf 	bl	3e92c <printk>
   3abce:	4818      	ldr	r0, [pc, #96]	; (3ac30 <k_delayed_work_cancel+0x90>)
   3abd0:	f003 feac 	bl	3e92c <printk>
   3abd4:	215f      	movs	r1, #95	; 0x5f
   3abd6:	4814      	ldr	r0, [pc, #80]	; (3ac28 <k_delayed_work_cancel+0x88>)
   3abd8:	f003 feb5 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   3abdc:	4810      	ldr	r0, [pc, #64]	; (3ac20 <k_delayed_work_cancel+0x80>)
   3abde:	f7ff fd15 	bl	3a60c <z_spin_lock_set_owner>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   3abe2:	4620      	mov	r0, r4
   3abe4:	f7ff feda 	bl	3a99c <work_cancel>
   3abe8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3abea:	480d      	ldr	r0, [pc, #52]	; (3ac20 <k_delayed_work_cancel+0x80>)
   3abec:	f7ff fcfe 	bl	3a5ec <z_spin_unlock_valid>
   3abf0:	b960      	cbnz	r0, 3ac0c <k_delayed_work_cancel+0x6c>
   3abf2:	4910      	ldr	r1, [pc, #64]	; (3ac34 <k_delayed_work_cancel+0x94>)
   3abf4:	2372      	movs	r3, #114	; 0x72
   3abf6:	4a0c      	ldr	r2, [pc, #48]	; (3ac28 <k_delayed_work_cancel+0x88>)
   3abf8:	480c      	ldr	r0, [pc, #48]	; (3ac2c <k_delayed_work_cancel+0x8c>)
   3abfa:	f003 fe97 	bl	3e92c <printk>
   3abfe:	480e      	ldr	r0, [pc, #56]	; (3ac38 <k_delayed_work_cancel+0x98>)
   3ac00:	f003 fe94 	bl	3e92c <printk>
   3ac04:	2172      	movs	r1, #114	; 0x72
   3ac06:	4808      	ldr	r0, [pc, #32]	; (3ac28 <k_delayed_work_cancel+0x88>)
   3ac08:	f003 fe9d 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   3ac0c:	f385 8811 	msr	BASEPRI, r5
   3ac10:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   3ac14:	4620      	mov	r0, r4
   3ac16:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3ac18:	f06f 0415 	mvn.w	r4, #21
   3ac1c:	e7fa      	b.n	3ac14 <k_delayed_work_cancel+0x74>
   3ac1e:	bf00      	nop
   3ac20:	2002a324 	.word	0x2002a324
   3ac24:	00044e5a 	.word	0x00044e5a
   3ac28:	00044e3b 	.word	0x00044e3b
   3ac2c:	00044643 	.word	0x00044643
   3ac30:	00044e6f 	.word	0x00044e6f
   3ac34:	00044e84 	.word	0x00044e84
   3ac38:	00044e9b 	.word	0x00044e9b

0003ac3c <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   3ac3c:	4b03      	ldr	r3, [pc, #12]	; (3ac4c <elapsed+0x10>)
   3ac3e:	681b      	ldr	r3, [r3, #0]
   3ac40:	b90b      	cbnz	r3, 3ac46 <elapsed+0xa>
   3ac42:	f7e4 bee5 	b.w	1fa10 <z_clock_elapsed>
}
   3ac46:	2000      	movs	r0, #0
   3ac48:	4770      	bx	lr
   3ac4a:	bf00      	nop
   3ac4c:	2002a328 	.word	0x2002a328

0003ac50 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3ac50:	6803      	ldr	r3, [r0, #0]
   3ac52:	b140      	cbz	r0, 3ac66 <remove_timeout+0x16>
   3ac54:	4a07      	ldr	r2, [pc, #28]	; (3ac74 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   3ac56:	6852      	ldr	r2, [r2, #4]
   3ac58:	4290      	cmp	r0, r2
   3ac5a:	d004      	beq.n	3ac66 <remove_timeout+0x16>
	if (next(t) != NULL) {
   3ac5c:	b11b      	cbz	r3, 3ac66 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   3ac5e:	689a      	ldr	r2, [r3, #8]
   3ac60:	6881      	ldr	r1, [r0, #8]
   3ac62:	440a      	add	r2, r1
   3ac64:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   3ac66:	6842      	ldr	r2, [r0, #4]
   3ac68:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3ac6a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3ac6c:	2300      	movs	r3, #0
	node->prev = NULL;
   3ac6e:	e9c0 3300 	strd	r3, r3, [r0]
}
   3ac72:	4770      	bx	lr
   3ac74:	200312bc 	.word	0x200312bc

0003ac78 <next_timeout>:
	return list->head == list;
   3ac78:	4b0b      	ldr	r3, [pc, #44]	; (3aca8 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   3ac7a:	b510      	push	{r4, lr}
   3ac7c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3ac7e:	429c      	cmp	r4, r3
   3ac80:	bf08      	it	eq
   3ac82:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   3ac84:	f7ff ffda 	bl	3ac3c <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   3ac88:	b154      	cbz	r4, 3aca0 <next_timeout+0x28>
   3ac8a:	68a3      	ldr	r3, [r4, #8]
   3ac8c:	1a18      	subs	r0, r3, r0
   3ac8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   3ac92:	4b06      	ldr	r3, [pc, #24]	; (3acac <next_timeout+0x34>)
   3ac94:	691b      	ldr	r3, [r3, #16]
   3ac96:	b113      	cbz	r3, 3ac9e <next_timeout+0x26>
   3ac98:	4298      	cmp	r0, r3
   3ac9a:	bfa8      	it	ge
   3ac9c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   3ac9e:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   3aca0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   3aca4:	e7f5      	b.n	3ac92 <next_timeout+0x1a>
   3aca6:	bf00      	nop
   3aca8:	200312bc 	.word	0x200312bc
   3acac:	2002a214 	.word	0x2002a214

0003acb0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   3acb0:	6803      	ldr	r3, [r0, #0]
{
   3acb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3acb6:	4604      	mov	r4, r0
   3acb8:	460e      	mov	r6, r1
   3acba:	4615      	mov	r5, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   3acbc:	b163      	cbz	r3, 3acd8 <z_add_timeout+0x28>
   3acbe:	4942      	ldr	r1, [pc, #264]	; (3adc8 <z_add_timeout+0x118>)
   3acc0:	2356      	movs	r3, #86	; 0x56
   3acc2:	4a42      	ldr	r2, [pc, #264]	; (3adcc <z_add_timeout+0x11c>)
   3acc4:	4842      	ldr	r0, [pc, #264]	; (3add0 <z_add_timeout+0x120>)
   3acc6:	f003 fe31 	bl	3e92c <printk>
   3acca:	4842      	ldr	r0, [pc, #264]	; (3add4 <z_add_timeout+0x124>)
   3accc:	f003 fe2e 	bl	3e92c <printk>
   3acd0:	2156      	movs	r1, #86	; 0x56
   3acd2:	483e      	ldr	r0, [pc, #248]	; (3adcc <z_add_timeout+0x11c>)
   3acd4:	f003 fe37 	bl	3e946 <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   3acd8:	2d01      	cmp	r5, #1
   3acda:	bfb8      	it	lt
   3acdc:	2501      	movlt	r5, #1
	to->fn = fn;
   3acde:	60e6      	str	r6, [r4, #12]
	__asm__ volatile(
   3ace0:	f04f 0320 	mov.w	r3, #32
   3ace4:	f3ef 8811 	mrs	r8, BASEPRI
   3ace8:	f383 8811 	msr	BASEPRI, r3
   3acec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3acf0:	4839      	ldr	r0, [pc, #228]	; (3add8 <z_add_timeout+0x128>)
   3acf2:	f7ff fc6d 	bl	3a5d0 <z_spin_lock_valid>
   3acf6:	b960      	cbnz	r0, 3ad12 <z_add_timeout+0x62>
   3acf8:	4938      	ldr	r1, [pc, #224]	; (3addc <z_add_timeout+0x12c>)
   3acfa:	235f      	movs	r3, #95	; 0x5f
   3acfc:	4a38      	ldr	r2, [pc, #224]	; (3ade0 <z_add_timeout+0x130>)
   3acfe:	4834      	ldr	r0, [pc, #208]	; (3add0 <z_add_timeout+0x120>)
   3ad00:	f003 fe14 	bl	3e92c <printk>
   3ad04:	4837      	ldr	r0, [pc, #220]	; (3ade4 <z_add_timeout+0x134>)
   3ad06:	f003 fe11 	bl	3e92c <printk>
   3ad0a:	215f      	movs	r1, #95	; 0x5f
   3ad0c:	4834      	ldr	r0, [pc, #208]	; (3ade0 <z_add_timeout+0x130>)
   3ad0e:	f003 fe1a 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   3ad12:	4831      	ldr	r0, [pc, #196]	; (3add8 <z_add_timeout+0x128>)
   3ad14:	f7ff fc7a 	bl	3a60c <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   3ad18:	f7ff ff90 	bl	3ac3c <elapsed>
   3ad1c:	4428      	add	r0, r5
	return list->head == list;
   3ad1e:	4d32      	ldr	r5, [pc, #200]	; (3ade8 <z_add_timeout+0x138>)
   3ad20:	60a0      	str	r0, [r4, #8]
   3ad22:	682e      	ldr	r6, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3ad24:	42ae      	cmp	r6, r5
   3ad26:	d005      	beq.n	3ad34 <z_add_timeout+0x84>
		for (t = first(); t != NULL; t = next(t)) {
			__ASSERT(t->dticks >= 0, "");
   3ad28:	4f28      	ldr	r7, [pc, #160]	; (3adcc <z_add_timeout+0x11c>)
   3ad2a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 3adf4 <z_add_timeout+0x144>
   3ad2e:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 3add0 <z_add_timeout+0x120>
		for (t = first(); t != NULL; t = next(t)) {
   3ad32:	b936      	cbnz	r6, 3ad42 <z_add_timeout+0x92>
	node->prev = list->tail;
   3ad34:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   3ad36:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   3ad38:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   3ad3a:	686b      	ldr	r3, [r5, #4]
   3ad3c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3ad3e:	606c      	str	r4, [r5, #4]
   3ad40:	e01a      	b.n	3ad78 <z_add_timeout+0xc8>
			__ASSERT(t->dticks >= 0, "");
   3ad42:	68b3      	ldr	r3, [r6, #8]
   3ad44:	2b00      	cmp	r3, #0
   3ad46:	da0c      	bge.n	3ad62 <z_add_timeout+0xb2>
   3ad48:	4649      	mov	r1, r9
   3ad4a:	235f      	movs	r3, #95	; 0x5f
   3ad4c:	463a      	mov	r2, r7
   3ad4e:	4650      	mov	r0, sl
   3ad50:	f003 fdec 	bl	3e92c <printk>
   3ad54:	481f      	ldr	r0, [pc, #124]	; (3add4 <z_add_timeout+0x124>)
   3ad56:	f003 fde9 	bl	3e92c <printk>
   3ad5a:	215f      	movs	r1, #95	; 0x5f
   3ad5c:	4638      	mov	r0, r7
   3ad5e:	f003 fdf2 	bl	3e946 <assert_post_action>

			if (t->dticks > to->dticks) {
   3ad62:	68b2      	ldr	r2, [r6, #8]
   3ad64:	68a3      	ldr	r3, [r4, #8]
   3ad66:	429a      	cmp	r2, r3
   3ad68:	dd27      	ble.n	3adba <z_add_timeout+0x10a>
				t->dticks -= to->dticks;
   3ad6a:	1ad3      	subs	r3, r2, r3
   3ad6c:	60b3      	str	r3, [r6, #8]
	node->prev = successor->prev;
   3ad6e:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   3ad70:	e9c4 6300 	strd	r6, r3, [r4]
	successor->prev->next = node;
   3ad74:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   3ad76:	6074      	str	r4, [r6, #4]
	return list->head == list;
   3ad78:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3ad7a:	42ab      	cmp	r3, r5
   3ad7c:	d006      	beq.n	3ad8c <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   3ad7e:	429c      	cmp	r4, r3
   3ad80:	d104      	bne.n	3ad8c <z_add_timeout+0xdc>
			z_clock_set_timeout(next_timeout(), false);
   3ad82:	f7ff ff79 	bl	3ac78 <next_timeout>
   3ad86:	2100      	movs	r1, #0
   3ad88:	f7e4 fdc0 	bl	1f90c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3ad8c:	4812      	ldr	r0, [pc, #72]	; (3add8 <z_add_timeout+0x128>)
   3ad8e:	f7ff fc2d 	bl	3a5ec <z_spin_unlock_valid>
   3ad92:	b960      	cbnz	r0, 3adae <z_add_timeout+0xfe>
   3ad94:	4915      	ldr	r1, [pc, #84]	; (3adec <z_add_timeout+0x13c>)
   3ad96:	2372      	movs	r3, #114	; 0x72
   3ad98:	4a11      	ldr	r2, [pc, #68]	; (3ade0 <z_add_timeout+0x130>)
   3ad9a:	480d      	ldr	r0, [pc, #52]	; (3add0 <z_add_timeout+0x120>)
   3ad9c:	f003 fdc6 	bl	3e92c <printk>
   3ada0:	4813      	ldr	r0, [pc, #76]	; (3adf0 <z_add_timeout+0x140>)
   3ada2:	f003 fdc3 	bl	3e92c <printk>
   3ada6:	2172      	movs	r1, #114	; 0x72
   3ada8:	480d      	ldr	r0, [pc, #52]	; (3ade0 <z_add_timeout+0x130>)
   3adaa:	f003 fdcc 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   3adae:	f388 8811 	msr	BASEPRI, r8
   3adb2:	f3bf 8f6f 	isb	sy
		}
	}
}
   3adb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			to->dticks -= t->dticks;
   3adba:	1a9b      	subs	r3, r3, r2
   3adbc:	60a3      	str	r3, [r4, #8]
	return (node == list->tail) ? NULL : node->next;
   3adbe:	686b      	ldr	r3, [r5, #4]
   3adc0:	429e      	cmp	r6, r3
   3adc2:	d0b7      	beq.n	3ad34 <z_add_timeout+0x84>
   3adc4:	6836      	ldr	r6, [r6, #0]
   3adc6:	e7b4      	b.n	3ad32 <z_add_timeout+0x82>
   3adc8:	00049442 	.word	0x00049442
   3adcc:	00049425 	.word	0x00049425
   3add0:	00044643 	.word	0x00044643
   3add4:	000490df 	.word	0x000490df
   3add8:	2002a32c 	.word	0x2002a32c
   3addc:	00044e5a 	.word	0x00044e5a
   3ade0:	00044e3b 	.word	0x00044e3b
   3ade4:	00044e6f 	.word	0x00044e6f
   3ade8:	200312bc 	.word	0x200312bc
   3adec:	00044e84 	.word	0x00044e84
   3adf0:	00044e9b 	.word	0x00044e9b
   3adf4:	00049462 	.word	0x00049462

0003adf8 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   3adf8:	b538      	push	{r3, r4, r5, lr}
   3adfa:	4604      	mov	r4, r0
	__asm__ volatile(
   3adfc:	f04f 0320 	mov.w	r3, #32
   3ae00:	f3ef 8511 	mrs	r5, BASEPRI
   3ae04:	f383 8811 	msr	BASEPRI, r3
   3ae08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3ae0c:	4819      	ldr	r0, [pc, #100]	; (3ae74 <z_abort_timeout+0x7c>)
   3ae0e:	f7ff fbdf 	bl	3a5d0 <z_spin_lock_valid>
   3ae12:	b960      	cbnz	r0, 3ae2e <z_abort_timeout+0x36>
   3ae14:	4918      	ldr	r1, [pc, #96]	; (3ae78 <z_abort_timeout+0x80>)
   3ae16:	235f      	movs	r3, #95	; 0x5f
   3ae18:	4a18      	ldr	r2, [pc, #96]	; (3ae7c <z_abort_timeout+0x84>)
   3ae1a:	4819      	ldr	r0, [pc, #100]	; (3ae80 <z_abort_timeout+0x88>)
   3ae1c:	f003 fd86 	bl	3e92c <printk>
   3ae20:	4818      	ldr	r0, [pc, #96]	; (3ae84 <z_abort_timeout+0x8c>)
   3ae22:	f003 fd83 	bl	3e92c <printk>
   3ae26:	215f      	movs	r1, #95	; 0x5f
   3ae28:	4814      	ldr	r0, [pc, #80]	; (3ae7c <z_abort_timeout+0x84>)
   3ae2a:	f003 fd8c 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   3ae2e:	4811      	ldr	r0, [pc, #68]	; (3ae74 <z_abort_timeout+0x7c>)
   3ae30:	f7ff fbec 	bl	3a60c <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   3ae34:	6823      	ldr	r3, [r4, #0]
   3ae36:	b1d3      	cbz	r3, 3ae6e <z_abort_timeout+0x76>
			remove_timeout(to);
   3ae38:	4620      	mov	r0, r4
   3ae3a:	f7ff ff09 	bl	3ac50 <remove_timeout>
			ret = 0;
   3ae3e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3ae40:	480c      	ldr	r0, [pc, #48]	; (3ae74 <z_abort_timeout+0x7c>)
   3ae42:	f7ff fbd3 	bl	3a5ec <z_spin_unlock_valid>
   3ae46:	b960      	cbnz	r0, 3ae62 <z_abort_timeout+0x6a>
   3ae48:	490f      	ldr	r1, [pc, #60]	; (3ae88 <z_abort_timeout+0x90>)
   3ae4a:	2372      	movs	r3, #114	; 0x72
   3ae4c:	4a0b      	ldr	r2, [pc, #44]	; (3ae7c <z_abort_timeout+0x84>)
   3ae4e:	480c      	ldr	r0, [pc, #48]	; (3ae80 <z_abort_timeout+0x88>)
   3ae50:	f003 fd6c 	bl	3e92c <printk>
   3ae54:	480d      	ldr	r0, [pc, #52]	; (3ae8c <z_abort_timeout+0x94>)
   3ae56:	f003 fd69 	bl	3e92c <printk>
   3ae5a:	2172      	movs	r1, #114	; 0x72
   3ae5c:	4807      	ldr	r0, [pc, #28]	; (3ae7c <z_abort_timeout+0x84>)
   3ae5e:	f003 fd72 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   3ae62:	f385 8811 	msr	BASEPRI, r5
   3ae66:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   3ae6a:	4620      	mov	r0, r4
   3ae6c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   3ae6e:	f06f 0415 	mvn.w	r4, #21
   3ae72:	e7e5      	b.n	3ae40 <z_abort_timeout+0x48>
   3ae74:	2002a32c 	.word	0x2002a32c
   3ae78:	00044e5a 	.word	0x00044e5a
   3ae7c:	00044e3b 	.word	0x00044e3b
   3ae80:	00044643 	.word	0x00044643
   3ae84:	00044e6f 	.word	0x00044e6f
   3ae88:	00044e84 	.word	0x00044e84
   3ae8c:	00044e9b 	.word	0x00044e9b

0003ae90 <z_get_next_timeout_expiry>:

	return ticks - elapsed();
}

s32_t z_get_next_timeout_expiry(void)
{
   3ae90:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   3ae92:	f04f 0320 	mov.w	r3, #32
   3ae96:	f3ef 8511 	mrs	r5, BASEPRI
   3ae9a:	f383 8811 	msr	BASEPRI, r3
   3ae9e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3aea2:	4817      	ldr	r0, [pc, #92]	; (3af00 <z_get_next_timeout_expiry+0x70>)
   3aea4:	f7ff fb94 	bl	3a5d0 <z_spin_lock_valid>
   3aea8:	b960      	cbnz	r0, 3aec4 <z_get_next_timeout_expiry+0x34>
   3aeaa:	4916      	ldr	r1, [pc, #88]	; (3af04 <z_get_next_timeout_expiry+0x74>)
   3aeac:	235f      	movs	r3, #95	; 0x5f
   3aeae:	4a16      	ldr	r2, [pc, #88]	; (3af08 <z_get_next_timeout_expiry+0x78>)
   3aeb0:	4816      	ldr	r0, [pc, #88]	; (3af0c <z_get_next_timeout_expiry+0x7c>)
   3aeb2:	f003 fd3b 	bl	3e92c <printk>
   3aeb6:	4816      	ldr	r0, [pc, #88]	; (3af10 <z_get_next_timeout_expiry+0x80>)
   3aeb8:	f003 fd38 	bl	3e92c <printk>
   3aebc:	215f      	movs	r1, #95	; 0x5f
   3aebe:	4812      	ldr	r0, [pc, #72]	; (3af08 <z_get_next_timeout_expiry+0x78>)
   3aec0:	f003 fd41 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   3aec4:	480e      	ldr	r0, [pc, #56]	; (3af00 <z_get_next_timeout_expiry+0x70>)
   3aec6:	f7ff fba1 	bl	3a60c <z_spin_lock_set_owner>
	s32_t ret = K_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   3aeca:	f7ff fed5 	bl	3ac78 <next_timeout>
   3aece:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3aed0:	480b      	ldr	r0, [pc, #44]	; (3af00 <z_get_next_timeout_expiry+0x70>)
   3aed2:	f7ff fb8b 	bl	3a5ec <z_spin_unlock_valid>
   3aed6:	b960      	cbnz	r0, 3aef2 <z_get_next_timeout_expiry+0x62>
   3aed8:	490e      	ldr	r1, [pc, #56]	; (3af14 <z_get_next_timeout_expiry+0x84>)
   3aeda:	2372      	movs	r3, #114	; 0x72
   3aedc:	4a0a      	ldr	r2, [pc, #40]	; (3af08 <z_get_next_timeout_expiry+0x78>)
   3aede:	480b      	ldr	r0, [pc, #44]	; (3af0c <z_get_next_timeout_expiry+0x7c>)
   3aee0:	f003 fd24 	bl	3e92c <printk>
   3aee4:	480c      	ldr	r0, [pc, #48]	; (3af18 <z_get_next_timeout_expiry+0x88>)
   3aee6:	f003 fd21 	bl	3e92c <printk>
   3aeea:	2172      	movs	r1, #114	; 0x72
   3aeec:	4806      	ldr	r0, [pc, #24]	; (3af08 <z_get_next_timeout_expiry+0x78>)
   3aeee:	f003 fd2a 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   3aef2:	f385 8811 	msr	BASEPRI, r5
   3aef6:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   3aefa:	4620      	mov	r0, r4
   3aefc:	bd38      	pop	{r3, r4, r5, pc}
   3aefe:	bf00      	nop
   3af00:	2002a32c 	.word	0x2002a32c
   3af04:	00044e5a 	.word	0x00044e5a
   3af08:	00044e3b 	.word	0x00044e3b
   3af0c:	00044643 	.word	0x00044643
   3af10:	00044e6f 	.word	0x00044e6f
   3af14:	00044e84 	.word	0x00044e84
   3af18:	00044e9b 	.word	0x00044e9b

0003af1c <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
   3af1c:	b570      	push	{r4, r5, r6, lr}
   3af1e:	4604      	mov	r4, r0
   3af20:	460e      	mov	r6, r1
	__asm__ volatile(
   3af22:	f04f 0320 	mov.w	r3, #32
   3af26:	f3ef 8511 	mrs	r5, BASEPRI
   3af2a:	f383 8811 	msr	BASEPRI, r3
   3af2e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3af32:	481a      	ldr	r0, [pc, #104]	; (3af9c <z_set_timeout_expiry+0x80>)
   3af34:	f7ff fb4c 	bl	3a5d0 <z_spin_lock_valid>
   3af38:	b960      	cbnz	r0, 3af54 <z_set_timeout_expiry+0x38>
   3af3a:	4919      	ldr	r1, [pc, #100]	; (3afa0 <z_set_timeout_expiry+0x84>)
   3af3c:	235f      	movs	r3, #95	; 0x5f
   3af3e:	4a19      	ldr	r2, [pc, #100]	; (3afa4 <z_set_timeout_expiry+0x88>)
   3af40:	4819      	ldr	r0, [pc, #100]	; (3afa8 <z_set_timeout_expiry+0x8c>)
   3af42:	f003 fcf3 	bl	3e92c <printk>
   3af46:	4819      	ldr	r0, [pc, #100]	; (3afac <z_set_timeout_expiry+0x90>)
   3af48:	f003 fcf0 	bl	3e92c <printk>
   3af4c:	215f      	movs	r1, #95	; 0x5f
   3af4e:	4815      	ldr	r0, [pc, #84]	; (3afa4 <z_set_timeout_expiry+0x88>)
   3af50:	f003 fcf9 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   3af54:	4811      	ldr	r0, [pc, #68]	; (3af9c <z_set_timeout_expiry+0x80>)
   3af56:	f7ff fb59 	bl	3a60c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next = next_timeout();
   3af5a:	f7ff fe8d 	bl	3ac78 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   3af5e:	2801      	cmp	r0, #1
   3af60:	dd05      	ble.n	3af6e <z_set_timeout_expiry+0x52>
   3af62:	42a0      	cmp	r0, r4
   3af64:	dd03      	ble.n	3af6e <z_set_timeout_expiry+0x52>
			z_clock_set_timeout(ticks, idle);
   3af66:	4631      	mov	r1, r6
   3af68:	4620      	mov	r0, r4
   3af6a:	f7e4 fccf 	bl	1f90c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3af6e:	480b      	ldr	r0, [pc, #44]	; (3af9c <z_set_timeout_expiry+0x80>)
   3af70:	f7ff fb3c 	bl	3a5ec <z_spin_unlock_valid>
   3af74:	b960      	cbnz	r0, 3af90 <z_set_timeout_expiry+0x74>
   3af76:	490e      	ldr	r1, [pc, #56]	; (3afb0 <z_set_timeout_expiry+0x94>)
   3af78:	2372      	movs	r3, #114	; 0x72
   3af7a:	4a0a      	ldr	r2, [pc, #40]	; (3afa4 <z_set_timeout_expiry+0x88>)
   3af7c:	480a      	ldr	r0, [pc, #40]	; (3afa8 <z_set_timeout_expiry+0x8c>)
   3af7e:	f003 fcd5 	bl	3e92c <printk>
   3af82:	480c      	ldr	r0, [pc, #48]	; (3afb4 <z_set_timeout_expiry+0x98>)
   3af84:	f003 fcd2 	bl	3e92c <printk>
   3af88:	2172      	movs	r1, #114	; 0x72
   3af8a:	4806      	ldr	r0, [pc, #24]	; (3afa4 <z_set_timeout_expiry+0x88>)
   3af8c:	f003 fcdb 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   3af90:	f385 8811 	msr	BASEPRI, r5
   3af94:	f3bf 8f6f 	isb	sy
		}
	}
}
   3af98:	bd70      	pop	{r4, r5, r6, pc}
   3af9a:	bf00      	nop
   3af9c:	2002a32c 	.word	0x2002a32c
   3afa0:	00044e5a 	.word	0x00044e5a
   3afa4:	00044e3b 	.word	0x00044e3b
   3afa8:	00044643 	.word	0x00044643
   3afac:	00044e6f 	.word	0x00044e6f
   3afb0:	00044e84 	.word	0x00044e84
   3afb4:	00044e9b 	.word	0x00044e9b

0003afb8 <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
   3afb8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   3afbc:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   3afbe:	f7fe fddd 	bl	39b7c <z_time_slice>
	__asm__ volatile(
   3afc2:	f04f 0320 	mov.w	r3, #32
   3afc6:	f3ef 8511 	mrs	r5, BASEPRI
   3afca:	f383 8811 	msr	BASEPRI, r3
   3afce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3afd2:	4846      	ldr	r0, [pc, #280]	; (3b0ec <z_clock_announce+0x134>)
   3afd4:	f7ff fafc 	bl	3a5d0 <z_spin_lock_valid>
   3afd8:	b960      	cbnz	r0, 3aff4 <z_clock_announce+0x3c>
   3afda:	4945      	ldr	r1, [pc, #276]	; (3b0f0 <z_clock_announce+0x138>)
   3afdc:	235f      	movs	r3, #95	; 0x5f
   3afde:	4a45      	ldr	r2, [pc, #276]	; (3b0f4 <z_clock_announce+0x13c>)
   3afe0:	4845      	ldr	r0, [pc, #276]	; (3b0f8 <z_clock_announce+0x140>)
   3afe2:	f003 fca3 	bl	3e92c <printk>
   3afe6:	4845      	ldr	r0, [pc, #276]	; (3b0fc <z_clock_announce+0x144>)
   3afe8:	f003 fca0 	bl	3e92c <printk>
   3afec:	215f      	movs	r1, #95	; 0x5f
   3afee:	4841      	ldr	r0, [pc, #260]	; (3b0f4 <z_clock_announce+0x13c>)
   3aff0:	f003 fca9 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   3aff4:	4f42      	ldr	r7, [pc, #264]	; (3b100 <z_clock_announce+0x148>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   3aff6:	4e43      	ldr	r6, [pc, #268]	; (3b104 <z_clock_announce+0x14c>)
   3aff8:	46b9      	mov	r9, r7
   3affa:	483c      	ldr	r0, [pc, #240]	; (3b0ec <z_clock_announce+0x134>)
	return list->head == list;
   3affc:	f8df 8110 	ldr.w	r8, [pc, #272]	; 3b110 <z_clock_announce+0x158>
   3b000:	f7ff fb04 	bl	3a60c <z_spin_lock_set_owner>
   3b004:	6034      	str	r4, [r6, #0]
   3b006:	f8d8 4000 	ldr.w	r4, [r8]
   3b00a:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3b00c:	4544      	cmp	r4, r8
   3b00e:	e9d7 bc00 	ldrd	fp, ip, [r7]
   3b012:	d005      	beq.n	3b020 <z_clock_announce+0x68>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   3b014:	b124      	cbz	r4, 3b020 <z_clock_announce+0x68>
   3b016:	68a3      	ldr	r3, [r4, #8]
   3b018:	4293      	cmp	r3, r2
   3b01a:	dd25      	ble.n	3b068 <z_clock_announce+0xb0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   3b01c:	1a9b      	subs	r3, r3, r2
   3b01e:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   3b020:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   3b022:	eb1b 0002 	adds.w	r0, fp, r2
   3b026:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
   3b02a:	e9c9 0100 	strd	r0, r1, [r9]
	announce_remaining = 0;
   3b02e:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   3b030:	f7ff fe22 	bl	3ac78 <next_timeout>
   3b034:	4621      	mov	r1, r4
   3b036:	f7e4 fc69 	bl	1f90c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3b03a:	482c      	ldr	r0, [pc, #176]	; (3b0ec <z_clock_announce+0x134>)
   3b03c:	f7ff fad6 	bl	3a5ec <z_spin_unlock_valid>
   3b040:	b960      	cbnz	r0, 3b05c <z_clock_announce+0xa4>
   3b042:	4931      	ldr	r1, [pc, #196]	; (3b108 <z_clock_announce+0x150>)
   3b044:	2372      	movs	r3, #114	; 0x72
   3b046:	4a2b      	ldr	r2, [pc, #172]	; (3b0f4 <z_clock_announce+0x13c>)
   3b048:	482b      	ldr	r0, [pc, #172]	; (3b0f8 <z_clock_announce+0x140>)
   3b04a:	f003 fc6f 	bl	3e92c <printk>
   3b04e:	482f      	ldr	r0, [pc, #188]	; (3b10c <z_clock_announce+0x154>)
   3b050:	f003 fc6c 	bl	3e92c <printk>
   3b054:	2172      	movs	r1, #114	; 0x72
   3b056:	4827      	ldr	r0, [pc, #156]	; (3b0f4 <z_clock_announce+0x13c>)
   3b058:	f003 fc75 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   3b05c:	f385 8811 	msr	BASEPRI, r5
   3b060:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   3b064:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
   3b068:	eb1b 0003 	adds.w	r0, fp, r3
   3b06c:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
   3b070:	1ad3      	subs	r3, r2, r3
   3b072:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   3b074:	2300      	movs	r3, #0
		curr_tick += dt;
   3b076:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   3b07a:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   3b07c:	4620      	mov	r0, r4
   3b07e:	f7ff fde7 	bl	3ac50 <remove_timeout>
   3b082:	481a      	ldr	r0, [pc, #104]	; (3b0ec <z_clock_announce+0x134>)
   3b084:	f7ff fab2 	bl	3a5ec <z_spin_unlock_valid>
   3b088:	b960      	cbnz	r0, 3b0a4 <z_clock_announce+0xec>
   3b08a:	491f      	ldr	r1, [pc, #124]	; (3b108 <z_clock_announce+0x150>)
   3b08c:	2372      	movs	r3, #114	; 0x72
   3b08e:	4a19      	ldr	r2, [pc, #100]	; (3b0f4 <z_clock_announce+0x13c>)
   3b090:	4819      	ldr	r0, [pc, #100]	; (3b0f8 <z_clock_announce+0x140>)
   3b092:	f003 fc4b 	bl	3e92c <printk>
   3b096:	481d      	ldr	r0, [pc, #116]	; (3b10c <z_clock_announce+0x154>)
   3b098:	f003 fc48 	bl	3e92c <printk>
   3b09c:	2172      	movs	r1, #114	; 0x72
   3b09e:	4815      	ldr	r0, [pc, #84]	; (3b0f4 <z_clock_announce+0x13c>)
   3b0a0:	f003 fc51 	bl	3e946 <assert_post_action>
   3b0a4:	f385 8811 	msr	BASEPRI, r5
   3b0a8:	f3bf 8f6f 	isb	sy
		t->fn(t);
   3b0ac:	68e3      	ldr	r3, [r4, #12]
   3b0ae:	4620      	mov	r0, r4
   3b0b0:	4798      	blx	r3
	__asm__ volatile(
   3b0b2:	f04f 0320 	mov.w	r3, #32
   3b0b6:	f3ef 8511 	mrs	r5, BASEPRI
   3b0ba:	f383 8811 	msr	BASEPRI, r3
   3b0be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3b0c2:	480a      	ldr	r0, [pc, #40]	; (3b0ec <z_clock_announce+0x134>)
   3b0c4:	f7ff fa84 	bl	3a5d0 <z_spin_lock_valid>
   3b0c8:	b960      	cbnz	r0, 3b0e4 <z_clock_announce+0x12c>
   3b0ca:	4909      	ldr	r1, [pc, #36]	; (3b0f0 <z_clock_announce+0x138>)
   3b0cc:	235f      	movs	r3, #95	; 0x5f
   3b0ce:	4a09      	ldr	r2, [pc, #36]	; (3b0f4 <z_clock_announce+0x13c>)
   3b0d0:	4809      	ldr	r0, [pc, #36]	; (3b0f8 <z_clock_announce+0x140>)
   3b0d2:	f003 fc2b 	bl	3e92c <printk>
   3b0d6:	4809      	ldr	r0, [pc, #36]	; (3b0fc <z_clock_announce+0x144>)
   3b0d8:	f003 fc28 	bl	3e92c <printk>
   3b0dc:	215f      	movs	r1, #95	; 0x5f
   3b0de:	4805      	ldr	r0, [pc, #20]	; (3b0f4 <z_clock_announce+0x13c>)
   3b0e0:	f003 fc31 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   3b0e4:	4801      	ldr	r0, [pc, #4]	; (3b0ec <z_clock_announce+0x134>)
   3b0e6:	f7ff fa91 	bl	3a60c <z_spin_lock_set_owner>
	return k;
   3b0ea:	e78c      	b.n	3b006 <z_clock_announce+0x4e>
   3b0ec:	2002a32c 	.word	0x2002a32c
   3b0f0:	00044e5a 	.word	0x00044e5a
   3b0f4:	00044e3b 	.word	0x00044e3b
   3b0f8:	00044643 	.word	0x00044643
   3b0fc:	00044e6f 	.word	0x00044e6f
   3b100:	200237f8 	.word	0x200237f8
   3b104:	2002a328 	.word	0x2002a328
   3b108:	00044e84 	.word	0x00044e84
   3b10c:	00044e9b 	.word	0x00044e9b
   3b110:	200312bc 	.word	0x200312bc

0003b114 <z_tick_get>:

s64_t z_tick_get(void)
{
   3b114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b118:	f04f 0320 	mov.w	r3, #32
   3b11c:	f3ef 8611 	mrs	r6, BASEPRI
   3b120:	f383 8811 	msr	BASEPRI, r3
   3b124:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3b128:	481a      	ldr	r0, [pc, #104]	; (3b194 <z_tick_get+0x80>)
   3b12a:	f7ff fa51 	bl	3a5d0 <z_spin_lock_valid>
   3b12e:	b960      	cbnz	r0, 3b14a <z_tick_get+0x36>
   3b130:	4919      	ldr	r1, [pc, #100]	; (3b198 <z_tick_get+0x84>)
   3b132:	235f      	movs	r3, #95	; 0x5f
   3b134:	4a19      	ldr	r2, [pc, #100]	; (3b19c <z_tick_get+0x88>)
   3b136:	481a      	ldr	r0, [pc, #104]	; (3b1a0 <z_tick_get+0x8c>)
   3b138:	f003 fbf8 	bl	3e92c <printk>
   3b13c:	4819      	ldr	r0, [pc, #100]	; (3b1a4 <z_tick_get+0x90>)
   3b13e:	f003 fbf5 	bl	3e92c <printk>
   3b142:	215f      	movs	r1, #95	; 0x5f
   3b144:	4815      	ldr	r0, [pc, #84]	; (3b19c <z_tick_get+0x88>)
   3b146:	f003 fbfe 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   3b14a:	4812      	ldr	r0, [pc, #72]	; (3b194 <z_tick_get+0x80>)
   3b14c:	f7ff fa5e 	bl	3a60c <z_spin_lock_set_owner>
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   3b150:	f7e4 fc5e 	bl	1fa10 <z_clock_elapsed>
   3b154:	4b14      	ldr	r3, [pc, #80]	; (3b1a8 <z_tick_get+0x94>)
   3b156:	e9d3 4500 	ldrd	r4, r5, [r3]
   3b15a:	1827      	adds	r7, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3b15c:	480d      	ldr	r0, [pc, #52]	; (3b194 <z_tick_get+0x80>)
   3b15e:	f145 0800 	adc.w	r8, r5, #0
   3b162:	f7ff fa43 	bl	3a5ec <z_spin_unlock_valid>
   3b166:	b960      	cbnz	r0, 3b182 <z_tick_get+0x6e>
   3b168:	4910      	ldr	r1, [pc, #64]	; (3b1ac <z_tick_get+0x98>)
   3b16a:	2372      	movs	r3, #114	; 0x72
   3b16c:	4a0b      	ldr	r2, [pc, #44]	; (3b19c <z_tick_get+0x88>)
   3b16e:	480c      	ldr	r0, [pc, #48]	; (3b1a0 <z_tick_get+0x8c>)
   3b170:	f003 fbdc 	bl	3e92c <printk>
   3b174:	480e      	ldr	r0, [pc, #56]	; (3b1b0 <z_tick_get+0x9c>)
   3b176:	f003 fbd9 	bl	3e92c <printk>
   3b17a:	2172      	movs	r1, #114	; 0x72
   3b17c:	4807      	ldr	r0, [pc, #28]	; (3b19c <z_tick_get+0x88>)
   3b17e:	f003 fbe2 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   3b182:	f386 8811 	msr	BASEPRI, r6
   3b186:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   3b18a:	4638      	mov	r0, r7
   3b18c:	4641      	mov	r1, r8
   3b18e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3b192:	bf00      	nop
   3b194:	2002a32c 	.word	0x2002a32c
   3b198:	00044e5a 	.word	0x00044e5a
   3b19c:	00044e3b 	.word	0x00044e3b
   3b1a0:	00044643 	.word	0x00044643
   3b1a4:	00044e6f 	.word	0x00044e6f
   3b1a8:	200237f8 	.word	0x200237f8
   3b1ac:	00044e84 	.word	0x00044e84
   3b1b0:	00044e9b 	.word	0x00044e9b

0003b1b4 <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, u32_t state)
{
   3b1b4:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   3b1b6:	6883      	ldr	r3, [r0, #8]
{
   3b1b8:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   3b1ba:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   3b1bc:	b964      	cbnz	r4, 3b1d8 <k_poll_poller_cb+0x24>
   3b1be:	4915      	ldr	r1, [pc, #84]	; (3b214 <k_poll_poller_cb+0x60>)
   3b1c0:	23e0      	movs	r3, #224	; 0xe0
   3b1c2:	4a15      	ldr	r2, [pc, #84]	; (3b218 <k_poll_poller_cb+0x64>)
   3b1c4:	4815      	ldr	r0, [pc, #84]	; (3b21c <k_poll_poller_cb+0x68>)
   3b1c6:	f003 fbb1 	bl	3e92c <printk>
   3b1ca:	4815      	ldr	r0, [pc, #84]	; (3b220 <k_poll_poller_cb+0x6c>)
   3b1cc:	f003 fbae 	bl	3e92c <printk>
   3b1d0:	21e0      	movs	r1, #224	; 0xe0
   3b1d2:	4811      	ldr	r0, [pc, #68]	; (3b218 <k_poll_poller_cb+0x64>)
   3b1d4:	f003 fbb7 	bl	3e946 <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   3b1d8:	7b63      	ldrb	r3, [r4, #13]
   3b1da:	079a      	lsls	r2, r3, #30
   3b1dc:	d401      	bmi.n	3b1e2 <k_poll_poller_cb+0x2e>
		return 0;
   3b1de:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   3b1e0:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   3b1e2:	6a23      	ldr	r3, [r4, #32]
   3b1e4:	3302      	adds	r3, #2
   3b1e6:	d012      	beq.n	3b20e <k_poll_poller_cb+0x5a>
	z_unpend_thread(thread);
   3b1e8:	4620      	mov	r0, r4
   3b1ea:	f7fe fa49 	bl	39680 <z_unpend_thread>
	z_arch_thread_return_value_set(thread,
   3b1ee:	2d08      	cmp	r5, #8
   3b1f0:	bf0c      	ite	eq
   3b1f2:	f06f 0303 	mvneq.w	r3, #3
   3b1f6:	2300      	movne	r3, #0
   3b1f8:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3b1fa:	7b63      	ldrb	r3, [r4, #13]
   3b1fc:	06db      	lsls	r3, r3, #27
   3b1fe:	d1ee      	bne.n	3b1de <k_poll_poller_cb+0x2a>
	if (!z_is_thread_ready(thread)) {
   3b200:	69a5      	ldr	r5, [r4, #24]
   3b202:	2d00      	cmp	r5, #0
   3b204:	d1eb      	bne.n	3b1de <k_poll_poller_cb+0x2a>
		z_add_thread_to_ready_q(thread);
   3b206:	4620      	mov	r0, r4
   3b208:	f7fe fb46 	bl	39898 <z_add_thread_to_ready_q>
	return 0;
   3b20c:	e7e7      	b.n	3b1de <k_poll_poller_cb+0x2a>
		return -EAGAIN;
   3b20e:	f06f 000a 	mvn.w	r0, #10
   3b212:	e7e5      	b.n	3b1e0 <k_poll_poller_cb+0x2c>
   3b214:	000495d8 	.word	0x000495d8
   3b218:	000495be 	.word	0x000495be
   3b21c:	00044643 	.word	0x00044643
   3b220:	000495ee 	.word	0x000495ee

0003b224 <clear_event_registrations>:
{
   3b224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3b228:	2414      	movs	r4, #20
   3b22a:	4680      	mov	r8, r0
   3b22c:	4617      	mov	r7, r2
	while (num_events--) {
   3b22e:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   3b232:	4d47      	ldr	r5, [pc, #284]	; (3b350 <clear_event_registrations+0x12c>)
   3b234:	f8df 9154 	ldr.w	r9, [pc, #340]	; 3b38c <clear_event_registrations+0x168>
   3b238:	4e46      	ldr	r6, [pc, #280]	; (3b354 <clear_event_registrations+0x130>)
	while (num_events--) {
   3b23a:	4544      	cmp	r4, r8
   3b23c:	d101      	bne.n	3b242 <clear_event_registrations+0x1e>
}
   3b23e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   3b242:	2300      	movs	r3, #0
   3b244:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   3b248:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   3b24c:	f003 030f 	and.w	r3, r3, #15
   3b250:	2b04      	cmp	r3, #4
   3b252:	d83d      	bhi.n	3b2d0 <clear_event_registrations+0xac>
   3b254:	e8df f003 	tbb	[pc, r3]
   3b258:	3c032d49 	.word	0x3c032d49
   3b25c:	1e          	.byte	0x1e
   3b25d:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3b25e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3b262:	b963      	cbnz	r3, 3b27e <clear_event_registrations+0x5a>
   3b264:	493c      	ldr	r1, [pc, #240]	; (3b358 <clear_event_registrations+0x134>)
   3b266:	2396      	movs	r3, #150	; 0x96
   3b268:	462a      	mov	r2, r5
   3b26a:	4630      	mov	r0, r6
   3b26c:	f003 fb5e 	bl	3e92c <printk>
   3b270:	483a      	ldr	r0, [pc, #232]	; (3b35c <clear_event_registrations+0x138>)
   3b272:	f003 fb5b 	bl	3e92c <printk>
   3b276:	2196      	movs	r1, #150	; 0x96
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3b278:	4628      	mov	r0, r5
   3b27a:	f003 fb64 	bl	3e946 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   3b27e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   3b282:	b393      	cbz	r3, 3b2ea <clear_event_registrations+0xc6>
	node->prev->next = node->next;
   3b284:	f854 2c10 	ldr.w	r2, [r4, #-16]
   3b288:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3b28a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3b28c:	2300      	movs	r3, #0
	node->prev = NULL;
   3b28e:	e944 3305 	strd	r3, r3, [r4, #-20]
   3b292:	e02a      	b.n	3b2ea <clear_event_registrations+0xc6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   3b294:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3b298:	2b00      	cmp	r3, #0
   3b29a:	d1f0      	bne.n	3b27e <clear_event_registrations+0x5a>
   3b29c:	4930      	ldr	r1, [pc, #192]	; (3b360 <clear_event_registrations+0x13c>)
   3b29e:	239a      	movs	r3, #154	; 0x9a
   3b2a0:	462a      	mov	r2, r5
   3b2a2:	4630      	mov	r0, r6
   3b2a4:	f003 fb42 	bl	3e92c <printk>
   3b2a8:	482e      	ldr	r0, [pc, #184]	; (3b364 <clear_event_registrations+0x140>)
   3b2aa:	f003 fb3f 	bl	3e92c <printk>
   3b2ae:	219a      	movs	r1, #154	; 0x9a
   3b2b0:	e7e2      	b.n	3b278 <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3b2b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3b2b6:	2b00      	cmp	r3, #0
   3b2b8:	d1e1      	bne.n	3b27e <clear_event_registrations+0x5a>
   3b2ba:	492b      	ldr	r1, [pc, #172]	; (3b368 <clear_event_registrations+0x144>)
   3b2bc:	239e      	movs	r3, #158	; 0x9e
   3b2be:	462a      	mov	r2, r5
   3b2c0:	4630      	mov	r0, r6
   3b2c2:	f003 fb33 	bl	3e92c <printk>
   3b2c6:	4829      	ldr	r0, [pc, #164]	; (3b36c <clear_event_registrations+0x148>)
   3b2c8:	f003 fb30 	bl	3e92c <printk>
   3b2cc:	219e      	movs	r1, #158	; 0x9e
   3b2ce:	e7d3      	b.n	3b278 <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   3b2d0:	4649      	mov	r1, r9
   3b2d2:	23a5      	movs	r3, #165	; 0xa5
   3b2d4:	462a      	mov	r2, r5
   3b2d6:	4630      	mov	r0, r6
   3b2d8:	f003 fb28 	bl	3e92c <printk>
   3b2dc:	4824      	ldr	r0, [pc, #144]	; (3b370 <clear_event_registrations+0x14c>)
   3b2de:	f003 fb25 	bl	3e92c <printk>
   3b2e2:	21a5      	movs	r1, #165	; 0xa5
   3b2e4:	4628      	mov	r0, r5
   3b2e6:	f003 fb2e 	bl	3e946 <assert_post_action>
   3b2ea:	4822      	ldr	r0, [pc, #136]	; (3b374 <clear_event_registrations+0x150>)
   3b2ec:	f7ff f97e 	bl	3a5ec <z_spin_unlock_valid>
   3b2f0:	b960      	cbnz	r0, 3b30c <clear_event_registrations+0xe8>
   3b2f2:	4921      	ldr	r1, [pc, #132]	; (3b378 <clear_event_registrations+0x154>)
   3b2f4:	2372      	movs	r3, #114	; 0x72
   3b2f6:	4a21      	ldr	r2, [pc, #132]	; (3b37c <clear_event_registrations+0x158>)
   3b2f8:	4630      	mov	r0, r6
   3b2fa:	f003 fb17 	bl	3e92c <printk>
   3b2fe:	4820      	ldr	r0, [pc, #128]	; (3b380 <clear_event_registrations+0x15c>)
   3b300:	f003 fb14 	bl	3e92c <printk>
   3b304:	2172      	movs	r1, #114	; 0x72
   3b306:	481d      	ldr	r0, [pc, #116]	; (3b37c <clear_event_registrations+0x158>)
   3b308:	f003 fb1d 	bl	3e946 <assert_post_action>
   3b30c:	f387 8811 	msr	BASEPRI, r7
   3b310:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   3b314:	f04f 0320 	mov.w	r3, #32
   3b318:	f3ef 8711 	mrs	r7, BASEPRI
   3b31c:	f383 8811 	msr	BASEPRI, r3
   3b320:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3b324:	4813      	ldr	r0, [pc, #76]	; (3b374 <clear_event_registrations+0x150>)
   3b326:	f7ff f953 	bl	3a5d0 <z_spin_lock_valid>
   3b32a:	b960      	cbnz	r0, 3b346 <clear_event_registrations+0x122>
   3b32c:	4915      	ldr	r1, [pc, #84]	; (3b384 <clear_event_registrations+0x160>)
   3b32e:	235f      	movs	r3, #95	; 0x5f
   3b330:	4a12      	ldr	r2, [pc, #72]	; (3b37c <clear_event_registrations+0x158>)
   3b332:	4630      	mov	r0, r6
   3b334:	f003 fafa 	bl	3e92c <printk>
   3b338:	4813      	ldr	r0, [pc, #76]	; (3b388 <clear_event_registrations+0x164>)
   3b33a:	f003 faf7 	bl	3e92c <printk>
   3b33e:	215f      	movs	r1, #95	; 0x5f
   3b340:	480e      	ldr	r0, [pc, #56]	; (3b37c <clear_event_registrations+0x158>)
   3b342:	f003 fb00 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   3b346:	480b      	ldr	r0, [pc, #44]	; (3b374 <clear_event_registrations+0x150>)
   3b348:	f7ff f960 	bl	3a60c <z_spin_lock_set_owner>
	return k;
   3b34c:	3c14      	subs	r4, #20
   3b34e:	e774      	b.n	3b23a <clear_event_registrations+0x16>
   3b350:	000495be 	.word	0x000495be
   3b354:	00044643 	.word	0x00044643
   3b358:	00049471 	.word	0x00049471
   3b35c:	0004948b 	.word	0x0004948b
   3b360:	000494a0 	.word	0x000494a0
   3b364:	000494bc 	.word	0x000494bc
   3b368:	000494cd 	.word	0x000494cd
   3b36c:	000494ea 	.word	0x000494ea
   3b370:	00049501 	.word	0x00049501
   3b374:	2002a330 	.word	0x2002a330
   3b378:	00044e84 	.word	0x00044e84
   3b37c:	00044e3b 	.word	0x00044e3b
   3b380:	00044e9b 	.word	0x00044e9b
   3b384:	00044e5a 	.word	0x00044e5a
   3b388:	00044e6f 	.word	0x00044e6f
   3b38c:	00049224 	.word	0x00049224

0003b390 <register_events>:
{
   3b390:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   3b394:	2600      	movs	r6, #0
{
   3b396:	468a      	mov	sl, r1
   3b398:	4615      	mov	r5, r2
   3b39a:	4604      	mov	r4, r0
	int events_registered = 0;
   3b39c:	46b0      	mov	r8, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3b39e:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 3b580 <register_events+0x1f0>
   3b3a2:	4f67      	ldr	r7, [pc, #412]	; (3b540 <register_events+0x1b0>)
{
   3b3a4:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   3b3a6:	4556      	cmp	r6, sl
   3b3a8:	db03      	blt.n	3b3b2 <register_events+0x22>
}
   3b3aa:	4640      	mov	r0, r8
   3b3ac:	b003      	add	sp, #12
   3b3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b3b2:	f04f 0320 	mov.w	r3, #32
   3b3b6:	f3ef 8b11 	mrs	fp, BASEPRI
   3b3ba:	f383 8811 	msr	BASEPRI, r3
   3b3be:	f3bf 8f6f 	isb	sy
   3b3c2:	4648      	mov	r0, r9
   3b3c4:	f7ff f904 	bl	3a5d0 <z_spin_lock_valid>
   3b3c8:	b960      	cbnz	r0, 3b3e4 <register_events+0x54>
   3b3ca:	495e      	ldr	r1, [pc, #376]	; (3b544 <register_events+0x1b4>)
   3b3cc:	235f      	movs	r3, #95	; 0x5f
   3b3ce:	463a      	mov	r2, r7
   3b3d0:	485d      	ldr	r0, [pc, #372]	; (3b548 <register_events+0x1b8>)
   3b3d2:	f003 faab 	bl	3e92c <printk>
   3b3d6:	485d      	ldr	r0, [pc, #372]	; (3b54c <register_events+0x1bc>)
   3b3d8:	f003 faa8 	bl	3e92c <printk>
   3b3dc:	215f      	movs	r1, #95	; 0x5f
   3b3de:	4638      	mov	r0, r7
   3b3e0:	f003 fab1 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   3b3e4:	4648      	mov	r0, r9
   3b3e6:	f7ff f911 	bl	3a60c <z_spin_lock_set_owner>
	switch (event->type) {
   3b3ea:	7b63      	ldrb	r3, [r4, #13]
   3b3ec:	f003 030f 	and.w	r3, r3, #15
   3b3f0:	2b04      	cmp	r3, #4
   3b3f2:	d843      	bhi.n	3b47c <register_events+0xec>
   3b3f4:	e8df f003 	tbb	[pc, r3]
   3b3f8:	42033c2c 	.word	0x42033c2c
   3b3fc:	29          	.byte	0x29
   3b3fd:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   3b3fe:	6923      	ldr	r3, [r4, #16]
   3b400:	689b      	ldr	r3, [r3, #8]
   3b402:	b32b      	cbz	r3, 3b450 <register_events+0xc0>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   3b404:	2202      	movs	r2, #2
	event->poller = NULL;
   3b406:	2100      	movs	r1, #0
	event->state |= state;
   3b408:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   3b40a:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   3b40c:	f3c3 3004 	ubfx	r0, r3, #12, #5
   3b410:	4302      	orrs	r2, r0
   3b412:	f362 3310 	bfi	r3, r2, #12, #5
   3b416:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   3b418:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3b41a:	4648      	mov	r0, r9
   3b41c:	f7ff f8e6 	bl	3a5ec <z_spin_unlock_valid>
   3b420:	b960      	cbnz	r0, 3b43c <register_events+0xac>
   3b422:	494b      	ldr	r1, [pc, #300]	; (3b550 <register_events+0x1c0>)
   3b424:	2372      	movs	r3, #114	; 0x72
   3b426:	463a      	mov	r2, r7
   3b428:	4847      	ldr	r0, [pc, #284]	; (3b548 <register_events+0x1b8>)
   3b42a:	f003 fa7f 	bl	3e92c <printk>
   3b42e:	4849      	ldr	r0, [pc, #292]	; (3b554 <register_events+0x1c4>)
   3b430:	f003 fa7c 	bl	3e92c <printk>
   3b434:	2172      	movs	r1, #114	; 0x72
   3b436:	4638      	mov	r0, r7
   3b438:	f003 fa85 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   3b43c:	f38b 8811 	msr	BASEPRI, fp
   3b440:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   3b444:	3601      	adds	r6, #1
   3b446:	3414      	adds	r4, #20
   3b448:	e7ad      	b.n	3b3a6 <register_events+0x16>
		if (!k_queue_is_empty(event->queue)) {
   3b44a:	6923      	ldr	r3, [r4, #16]
   3b44c:	681b      	ldr	r3, [r3, #0]
   3b44e:	bb33      	cbnz	r3, 3b49e <register_events+0x10e>
		} else if (!just_check && poller->is_polling) {
   3b450:	9b01      	ldr	r3, [sp, #4]
   3b452:	2b00      	cmp	r3, #0
   3b454:	d1e1      	bne.n	3b41a <register_events+0x8a>
   3b456:	782b      	ldrb	r3, [r5, #0]
   3b458:	2b00      	cmp	r3, #0
   3b45a:	d0de      	beq.n	3b41a <register_events+0x8a>
	switch (event->type) {
   3b45c:	7b63      	ldrb	r3, [r4, #13]
   3b45e:	f003 030f 	and.w	r3, r3, #15
   3b462:	2b04      	cmp	r3, #4
   3b464:	d85d      	bhi.n	3b522 <register_events+0x192>
   3b466:	e8df f003 	tbb	[pc, r3]
   3b46a:	4931      	.short	0x4931
   3b46c:	5c1c      	.short	0x5c1c
   3b46e:	35          	.byte	0x35
   3b46f:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   3b470:	6923      	ldr	r3, [r4, #16]
   3b472:	689b      	ldr	r3, [r3, #8]
   3b474:	2b00      	cmp	r3, #0
   3b476:	d0eb      	beq.n	3b450 <register_events+0xc0>
			*state = K_POLL_STATE_SIGNALED;
   3b478:	2201      	movs	r2, #1
   3b47a:	e7c4      	b.n	3b406 <register_events+0x76>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   3b47c:	2350      	movs	r3, #80	; 0x50
   3b47e:	4a36      	ldr	r2, [pc, #216]	; (3b558 <register_events+0x1c8>)
   3b480:	4936      	ldr	r1, [pc, #216]	; (3b55c <register_events+0x1cc>)
   3b482:	4831      	ldr	r0, [pc, #196]	; (3b548 <register_events+0x1b8>)
   3b484:	f003 fa52 	bl	3e92c <printk>
   3b488:	7b61      	ldrb	r1, [r4, #13]
   3b48a:	4835      	ldr	r0, [pc, #212]	; (3b560 <register_events+0x1d0>)
   3b48c:	f001 010f 	and.w	r1, r1, #15
   3b490:	f003 fa4c 	bl	3e92c <printk>
   3b494:	2150      	movs	r1, #80	; 0x50
   3b496:	4830      	ldr	r0, [pc, #192]	; (3b558 <register_events+0x1c8>)
   3b498:	f003 fa55 	bl	3e946 <assert_post_action>
		break;
   3b49c:	e7d8      	b.n	3b450 <register_events+0xc0>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   3b49e:	2204      	movs	r2, #4
   3b4a0:	e7b1      	b.n	3b406 <register_events+0x76>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3b4a2:	6923      	ldr	r3, [r4, #16]
   3b4a4:	b963      	cbnz	r3, 3b4c0 <register_events+0x130>
   3b4a6:	492f      	ldr	r1, [pc, #188]	; (3b564 <register_events+0x1d4>)
   3b4a8:	2375      	movs	r3, #117	; 0x75
   3b4aa:	4a2b      	ldr	r2, [pc, #172]	; (3b558 <register_events+0x1c8>)
   3b4ac:	4826      	ldr	r0, [pc, #152]	; (3b548 <register_events+0x1b8>)
   3b4ae:	f003 fa3d 	bl	3e92c <printk>
   3b4b2:	482d      	ldr	r0, [pc, #180]	; (3b568 <register_events+0x1d8>)
   3b4b4:	f003 fa3a 	bl	3e92c <printk>
   3b4b8:	2175      	movs	r1, #117	; 0x75
   3b4ba:	4827      	ldr	r0, [pc, #156]	; (3b558 <register_events+0x1c8>)
   3b4bc:	f003 fa43 	bl	3e946 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   3b4c0:	462a      	mov	r2, r5
   3b4c2:	4621      	mov	r1, r4
   3b4c4:	6920      	ldr	r0, [r4, #16]
   3b4c6:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   3b4c8:	f005 fbed 	bl	40ca6 <add_event>
	event->poller = poller;
   3b4cc:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   3b4ce:	f108 0801 	add.w	r8, r8, #1
   3b4d2:	e7a2      	b.n	3b41a <register_events+0x8a>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   3b4d4:	6923      	ldr	r3, [r4, #16]
   3b4d6:	b963      	cbnz	r3, 3b4f2 <register_events+0x162>
   3b4d8:	4924      	ldr	r1, [pc, #144]	; (3b56c <register_events+0x1dc>)
   3b4da:	2379      	movs	r3, #121	; 0x79
   3b4dc:	4a1e      	ldr	r2, [pc, #120]	; (3b558 <register_events+0x1c8>)
   3b4de:	481a      	ldr	r0, [pc, #104]	; (3b548 <register_events+0x1b8>)
   3b4e0:	f003 fa24 	bl	3e92c <printk>
   3b4e4:	4822      	ldr	r0, [pc, #136]	; (3b570 <register_events+0x1e0>)
   3b4e6:	f003 fa21 	bl	3e92c <printk>
   3b4ea:	2179      	movs	r1, #121	; 0x79
   3b4ec:	481a      	ldr	r0, [pc, #104]	; (3b558 <register_events+0x1c8>)
   3b4ee:	f003 fa2a 	bl	3e946 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   3b4f2:	6920      	ldr	r0, [r4, #16]
   3b4f4:	462a      	mov	r2, r5
   3b4f6:	4621      	mov	r1, r4
   3b4f8:	300c      	adds	r0, #12
   3b4fa:	e7e5      	b.n	3b4c8 <register_events+0x138>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3b4fc:	6923      	ldr	r3, [r4, #16]
   3b4fe:	b963      	cbnz	r3, 3b51a <register_events+0x18a>
   3b500:	491c      	ldr	r1, [pc, #112]	; (3b574 <register_events+0x1e4>)
   3b502:	237d      	movs	r3, #125	; 0x7d
   3b504:	4a14      	ldr	r2, [pc, #80]	; (3b558 <register_events+0x1c8>)
   3b506:	4810      	ldr	r0, [pc, #64]	; (3b548 <register_events+0x1b8>)
   3b508:	f003 fa10 	bl	3e92c <printk>
   3b50c:	481a      	ldr	r0, [pc, #104]	; (3b578 <register_events+0x1e8>)
   3b50e:	f003 fa0d 	bl	3e92c <printk>
   3b512:	217d      	movs	r1, #125	; 0x7d
   3b514:	4810      	ldr	r0, [pc, #64]	; (3b558 <register_events+0x1c8>)
   3b516:	f003 fa16 	bl	3e946 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   3b51a:	462a      	mov	r2, r5
   3b51c:	4621      	mov	r1, r4
   3b51e:	6920      	ldr	r0, [r4, #16]
   3b520:	e7d2      	b.n	3b4c8 <register_events+0x138>
		__ASSERT(false, "invalid event type\n");
   3b522:	2384      	movs	r3, #132	; 0x84
   3b524:	4a0c      	ldr	r2, [pc, #48]	; (3b558 <register_events+0x1c8>)
   3b526:	490d      	ldr	r1, [pc, #52]	; (3b55c <register_events+0x1cc>)
   3b528:	4807      	ldr	r0, [pc, #28]	; (3b548 <register_events+0x1b8>)
   3b52a:	f003 f9ff 	bl	3e92c <printk>
   3b52e:	4813      	ldr	r0, [pc, #76]	; (3b57c <register_events+0x1ec>)
   3b530:	f003 f9fc 	bl	3e92c <printk>
   3b534:	2184      	movs	r1, #132	; 0x84
   3b536:	4808      	ldr	r0, [pc, #32]	; (3b558 <register_events+0x1c8>)
   3b538:	f003 fa05 	bl	3e946 <assert_post_action>
		break;
   3b53c:	e7c6      	b.n	3b4cc <register_events+0x13c>
   3b53e:	bf00      	nop
   3b540:	00044e3b 	.word	0x00044e3b
   3b544:	00044e5a 	.word	0x00044e5a
   3b548:	00044643 	.word	0x00044643
   3b54c:	00044e6f 	.word	0x00044e6f
   3b550:	00044e84 	.word	0x00044e84
   3b554:	00044e9b 	.word	0x00044e9b
   3b558:	000495be 	.word	0x000495be
   3b55c:	00049224 	.word	0x00049224
   3b560:	0004960d 	.word	0x0004960d
   3b564:	00049471 	.word	0x00049471
   3b568:	0004948b 	.word	0x0004948b
   3b56c:	000494a0 	.word	0x000494a0
   3b570:	000494bc 	.word	0x000494bc
   3b574:	000494cd 	.word	0x000494cd
   3b578:	000494ea 	.word	0x000494ea
   3b57c:	00049501 	.word	0x00049501
   3b580:	2002a330 	.word	0x2002a330

0003b584 <k_poll_event_init>:
{
   3b584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b586:	4604      	mov	r4, r0
   3b588:	460f      	mov	r7, r1
   3b58a:	461d      	mov	r5, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   3b58c:	4616      	mov	r6, r2
   3b58e:	b162      	cbz	r2, 3b5aa <k_poll_event_init+0x26>
   3b590:	491c      	ldr	r1, [pc, #112]	; (3b604 <k_poll_event_init+0x80>)
   3b592:	232a      	movs	r3, #42	; 0x2a
   3b594:	4a1c      	ldr	r2, [pc, #112]	; (3b608 <k_poll_event_init+0x84>)
   3b596:	481d      	ldr	r0, [pc, #116]	; (3b60c <k_poll_event_init+0x88>)
   3b598:	f003 f9c8 	bl	3e92c <printk>
   3b59c:	481c      	ldr	r0, [pc, #112]	; (3b610 <k_poll_event_init+0x8c>)
   3b59e:	f003 f9c5 	bl	3e92c <printk>
   3b5a2:	212a      	movs	r1, #42	; 0x2a
   3b5a4:	4818      	ldr	r0, [pc, #96]	; (3b608 <k_poll_event_init+0x84>)
   3b5a6:	f003 f9ce 	bl	3e946 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   3b5aa:	2f0f      	cmp	r7, #15
   3b5ac:	d90c      	bls.n	3b5c8 <k_poll_event_init+0x44>
   3b5ae:	4919      	ldr	r1, [pc, #100]	; (3b614 <k_poll_event_init+0x90>)
   3b5b0:	232b      	movs	r3, #43	; 0x2b
   3b5b2:	4a15      	ldr	r2, [pc, #84]	; (3b608 <k_poll_event_init+0x84>)
   3b5b4:	4815      	ldr	r0, [pc, #84]	; (3b60c <k_poll_event_init+0x88>)
   3b5b6:	f003 f9b9 	bl	3e92c <printk>
   3b5ba:	4817      	ldr	r0, [pc, #92]	; (3b618 <k_poll_event_init+0x94>)
   3b5bc:	f003 f9b6 	bl	3e92c <printk>
   3b5c0:	212b      	movs	r1, #43	; 0x2b
   3b5c2:	4811      	ldr	r0, [pc, #68]	; (3b608 <k_poll_event_init+0x84>)
   3b5c4:	f003 f9bf 	bl	3e946 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   3b5c8:	b965      	cbnz	r5, 3b5e4 <k_poll_event_init+0x60>
   3b5ca:	4914      	ldr	r1, [pc, #80]	; (3b61c <k_poll_event_init+0x98>)
   3b5cc:	232c      	movs	r3, #44	; 0x2c
   3b5ce:	4a0e      	ldr	r2, [pc, #56]	; (3b608 <k_poll_event_init+0x84>)
   3b5d0:	480e      	ldr	r0, [pc, #56]	; (3b60c <k_poll_event_init+0x88>)
   3b5d2:	f003 f9ab 	bl	3e92c <printk>
   3b5d6:	4812      	ldr	r0, [pc, #72]	; (3b620 <k_poll_event_init+0x9c>)
   3b5d8:	f003 f9a8 	bl	3e92c <printk>
   3b5dc:	212c      	movs	r1, #44	; 0x2c
   3b5de:	480a      	ldr	r0, [pc, #40]	; (3b608 <k_poll_event_init+0x84>)
   3b5e0:	f003 f9b1 	bl	3e946 <assert_post_action>
	event->type = type;
   3b5e4:	7b63      	ldrb	r3, [r4, #13]
   3b5e6:	f367 0303 	bfi	r3, r7, #0, #4
   3b5ea:	7363      	strb	r3, [r4, #13]
	event->mode = mode;
   3b5ec:	7ba3      	ldrb	r3, [r4, #14]
   3b5ee:	f366 0341 	bfi	r3, r6, #1, #1
   3b5f2:	73a3      	strb	r3, [r4, #14]
	event->poller = NULL;
   3b5f4:	2300      	movs	r3, #0
	event->state = K_POLL_STATE_NOT_READY;
   3b5f6:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   3b5f8:	60a3      	str	r3, [r4, #8]
	event->state = K_POLL_STATE_NOT_READY;
   3b5fa:	4b0a      	ldr	r3, [pc, #40]	; (3b624 <k_poll_event_init+0xa0>)
   3b5fc:	4013      	ands	r3, r2
	event->obj = obj;
   3b5fe:	e9c4 3503 	strd	r3, r5, [r4, #12]
}
   3b602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b604:	00049517 	.word	0x00049517
   3b608:	000495be 	.word	0x000495be
   3b60c:	00044643 	.word	0x00044643
   3b610:	00049537 	.word	0x00049537
   3b614:	0004955d 	.word	0x0004955d
   3b618:	00049581 	.word	0x00049581
   3b61c:	00049591 	.word	0x00049591
   3b620:	000495a4 	.word	0x000495a4
   3b624:	00020fff 	.word	0x00020fff

0003b628 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   3b628:	2301      	movs	r3, #1
{
   3b62a:	b5f0      	push	{r4, r5, r6, r7, lr}
   3b62c:	b087      	sub	sp, #28
	struct _poller poller = { .is_polling = true,
   3b62e:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   3b632:	4b70      	ldr	r3, [pc, #448]	; (3b7f4 <z_impl_k_poll+0x1cc>)
{
   3b634:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   3b636:	689b      	ldr	r3, [r3, #8]
{
   3b638:	460d      	mov	r5, r1
	struct _poller poller = { .is_polling = true,
   3b63a:	9304      	str	r3, [sp, #16]
   3b63c:	4b6e      	ldr	r3, [pc, #440]	; (3b7f8 <z_impl_k_poll+0x1d0>)
{
   3b63e:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   3b640:	9305      	str	r3, [sp, #20]
   3b642:	f3ef 8305 	mrs	r3, IPSR
   3b646:	2b0d      	cmp	r3, #13
   3b648:	d804      	bhi.n	3b654 <z_impl_k_poll+0x2c>
   3b64a:	b183      	cbz	r3, 3b66e <z_impl_k_poll+0x46>
   3b64c:	4b6b      	ldr	r3, [pc, #428]	; (3b7fc <z_impl_k_poll+0x1d4>)
   3b64e:	685b      	ldr	r3, [r3, #4]
   3b650:	051b      	lsls	r3, r3, #20
   3b652:	d40c      	bmi.n	3b66e <z_impl_k_poll+0x46>
				  .cb         = k_poll_poller_cb };

	__ASSERT(!z_arch_is_in_isr(), "");
   3b654:	496a      	ldr	r1, [pc, #424]	; (3b800 <z_impl_k_poll+0x1d8>)
   3b656:	23ff      	movs	r3, #255	; 0xff
   3b658:	4a6a      	ldr	r2, [pc, #424]	; (3b804 <z_impl_k_poll+0x1dc>)
   3b65a:	486b      	ldr	r0, [pc, #428]	; (3b808 <z_impl_k_poll+0x1e0>)
   3b65c:	f003 f966 	bl	3e92c <printk>
   3b660:	486a      	ldr	r0, [pc, #424]	; (3b80c <z_impl_k_poll+0x1e4>)
   3b662:	f003 f963 	bl	3e92c <printk>
   3b666:	21ff      	movs	r1, #255	; 0xff
   3b668:	4866      	ldr	r0, [pc, #408]	; (3b804 <z_impl_k_poll+0x1dc>)
   3b66a:	f003 f96c 	bl	3e946 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   3b66e:	b974      	cbnz	r4, 3b68e <z_impl_k_poll+0x66>
   3b670:	4967      	ldr	r1, [pc, #412]	; (3b810 <z_impl_k_poll+0x1e8>)
   3b672:	f44f 7380 	mov.w	r3, #256	; 0x100
   3b676:	4a63      	ldr	r2, [pc, #396]	; (3b804 <z_impl_k_poll+0x1dc>)
   3b678:	4863      	ldr	r0, [pc, #396]	; (3b808 <z_impl_k_poll+0x1e0>)
   3b67a:	f003 f957 	bl	3e92c <printk>
   3b67e:	4865      	ldr	r0, [pc, #404]	; (3b814 <z_impl_k_poll+0x1ec>)
   3b680:	f003 f954 	bl	3e92c <printk>
   3b684:	f44f 7180 	mov.w	r1, #256	; 0x100
   3b688:	485e      	ldr	r0, [pc, #376]	; (3b804 <z_impl_k_poll+0x1dc>)
   3b68a:	f003 f95c 	bl	3e946 <assert_post_action>
	__ASSERT(num_events > 0, "zero events\n");
   3b68e:	2d00      	cmp	r5, #0
   3b690:	dc0e      	bgt.n	3b6b0 <z_impl_k_poll+0x88>
   3b692:	4961      	ldr	r1, [pc, #388]	; (3b818 <z_impl_k_poll+0x1f0>)
   3b694:	f240 1301 	movw	r3, #257	; 0x101
   3b698:	4a5a      	ldr	r2, [pc, #360]	; (3b804 <z_impl_k_poll+0x1dc>)
   3b69a:	485b      	ldr	r0, [pc, #364]	; (3b808 <z_impl_k_poll+0x1e0>)
   3b69c:	f003 f946 	bl	3e92c <printk>
   3b6a0:	485e      	ldr	r0, [pc, #376]	; (3b81c <z_impl_k_poll+0x1f4>)
   3b6a2:	f003 f943 	bl	3e92c <printk>
   3b6a6:	f240 1101 	movw	r1, #257	; 0x101
   3b6aa:	4856      	ldr	r0, [pc, #344]	; (3b804 <z_impl_k_poll+0x1dc>)
   3b6ac:	f003 f94b 	bl	3e946 <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   3b6b0:	fab6 f386 	clz	r3, r6
   3b6b4:	aa03      	add	r2, sp, #12
   3b6b6:	095b      	lsrs	r3, r3, #5
   3b6b8:	4629      	mov	r1, r5
   3b6ba:	4620      	mov	r0, r4
   3b6bc:	f7ff fe68 	bl	3b390 <register_events>
   3b6c0:	4607      	mov	r7, r0
	__asm__ volatile(
   3b6c2:	f04f 0320 	mov.w	r3, #32
   3b6c6:	f3ef 8511 	mrs	r5, BASEPRI
   3b6ca:	f383 8811 	msr	BASEPRI, r3
   3b6ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3b6d2:	4853      	ldr	r0, [pc, #332]	; (3b820 <z_impl_k_poll+0x1f8>)
   3b6d4:	f7fe ff7c 	bl	3a5d0 <z_spin_lock_valid>
   3b6d8:	b960      	cbnz	r0, 3b6f4 <z_impl_k_poll+0xcc>
   3b6da:	4952      	ldr	r1, [pc, #328]	; (3b824 <z_impl_k_poll+0x1fc>)
   3b6dc:	235f      	movs	r3, #95	; 0x5f
   3b6de:	4a52      	ldr	r2, [pc, #328]	; (3b828 <z_impl_k_poll+0x200>)
   3b6e0:	4849      	ldr	r0, [pc, #292]	; (3b808 <z_impl_k_poll+0x1e0>)
   3b6e2:	f003 f923 	bl	3e92c <printk>
   3b6e6:	4851      	ldr	r0, [pc, #324]	; (3b82c <z_impl_k_poll+0x204>)
   3b6e8:	f003 f920 	bl	3e92c <printk>
   3b6ec:	215f      	movs	r1, #95	; 0x5f
   3b6ee:	484e      	ldr	r0, [pc, #312]	; (3b828 <z_impl_k_poll+0x200>)
   3b6f0:	f003 f929 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   3b6f4:	484a      	ldr	r0, [pc, #296]	; (3b820 <z_impl_k_poll+0x1f8>)
   3b6f6:	f7fe ff89 	bl	3a60c <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   3b6fa:	f89d 300c 	ldrb.w	r3, [sp, #12]
   3b6fe:	b9eb      	cbnz	r3, 3b73c <z_impl_k_poll+0x114>
		clear_event_registrations(events, events_registered, key);
   3b700:	4620      	mov	r0, r4
   3b702:	462a      	mov	r2, r5
   3b704:	4639      	mov	r1, r7
   3b706:	f7ff fd8d 	bl	3b224 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3b70a:	4845      	ldr	r0, [pc, #276]	; (3b820 <z_impl_k_poll+0x1f8>)
   3b70c:	f7fe ff6e 	bl	3a5ec <z_spin_unlock_valid>
   3b710:	b960      	cbnz	r0, 3b72c <z_impl_k_poll+0x104>
   3b712:	4947      	ldr	r1, [pc, #284]	; (3b830 <z_impl_k_poll+0x208>)
   3b714:	2372      	movs	r3, #114	; 0x72
   3b716:	4a44      	ldr	r2, [pc, #272]	; (3b828 <z_impl_k_poll+0x200>)
   3b718:	483b      	ldr	r0, [pc, #236]	; (3b808 <z_impl_k_poll+0x1e0>)
   3b71a:	f003 f907 	bl	3e92c <printk>
   3b71e:	4845      	ldr	r0, [pc, #276]	; (3b834 <z_impl_k_poll+0x20c>)
   3b720:	f003 f904 	bl	3e92c <printk>
   3b724:	2172      	movs	r1, #114	; 0x72
   3b726:	4840      	ldr	r0, [pc, #256]	; (3b828 <z_impl_k_poll+0x200>)
   3b728:	f003 f90d 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   3b72c:	f385 8811 	msr	BASEPRI, r5
   3b730:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   3b734:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   3b736:	4628      	mov	r0, r5
   3b738:	b007      	add	sp, #28
   3b73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	poller.is_polling = false;
   3b73c:	2300      	movs	r3, #0
   3b73e:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   3b742:	b9be      	cbnz	r6, 3b774 <z_impl_k_poll+0x14c>
   3b744:	4836      	ldr	r0, [pc, #216]	; (3b820 <z_impl_k_poll+0x1f8>)
   3b746:	f7fe ff51 	bl	3a5ec <z_spin_unlock_valid>
   3b74a:	b960      	cbnz	r0, 3b766 <z_impl_k_poll+0x13e>
   3b74c:	4938      	ldr	r1, [pc, #224]	; (3b830 <z_impl_k_poll+0x208>)
   3b74e:	2372      	movs	r3, #114	; 0x72
   3b750:	4a35      	ldr	r2, [pc, #212]	; (3b828 <z_impl_k_poll+0x200>)
   3b752:	482d      	ldr	r0, [pc, #180]	; (3b808 <z_impl_k_poll+0x1e0>)
   3b754:	f003 f8ea 	bl	3e92c <printk>
   3b758:	4836      	ldr	r0, [pc, #216]	; (3b834 <z_impl_k_poll+0x20c>)
   3b75a:	f003 f8e7 	bl	3e92c <printk>
   3b75e:	2172      	movs	r1, #114	; 0x72
   3b760:	4831      	ldr	r0, [pc, #196]	; (3b828 <z_impl_k_poll+0x200>)
   3b762:	f003 f8f0 	bl	3e946 <assert_post_action>
   3b766:	f385 8811 	msr	BASEPRI, r5
   3b76a:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   3b76e:	f06f 050a 	mvn.w	r5, #10
   3b772:	e7e0      	b.n	3b736 <z_impl_k_poll+0x10e>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   3b774:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   3b776:	4629      	mov	r1, r5
   3b778:	4633      	mov	r3, r6
   3b77a:	4829      	ldr	r0, [pc, #164]	; (3b820 <z_impl_k_poll+0x1f8>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   3b77c:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   3b780:	f7fe fb3a 	bl	39df8 <z_pend_curr>
   3b784:	4605      	mov	r5, r0
	__asm__ volatile(
   3b786:	f04f 0320 	mov.w	r3, #32
   3b78a:	f3ef 8611 	mrs	r6, BASEPRI
   3b78e:	f383 8811 	msr	BASEPRI, r3
   3b792:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock");
   3b796:	4822      	ldr	r0, [pc, #136]	; (3b820 <z_impl_k_poll+0x1f8>)
   3b798:	f7fe ff1a 	bl	3a5d0 <z_spin_lock_valid>
   3b79c:	b960      	cbnz	r0, 3b7b8 <z_impl_k_poll+0x190>
   3b79e:	4921      	ldr	r1, [pc, #132]	; (3b824 <z_impl_k_poll+0x1fc>)
   3b7a0:	235f      	movs	r3, #95	; 0x5f
   3b7a2:	4a21      	ldr	r2, [pc, #132]	; (3b828 <z_impl_k_poll+0x200>)
   3b7a4:	4818      	ldr	r0, [pc, #96]	; (3b808 <z_impl_k_poll+0x1e0>)
   3b7a6:	f003 f8c1 	bl	3e92c <printk>
   3b7aa:	4820      	ldr	r0, [pc, #128]	; (3b82c <z_impl_k_poll+0x204>)
   3b7ac:	f003 f8be 	bl	3e92c <printk>
   3b7b0:	215f      	movs	r1, #95	; 0x5f
   3b7b2:	481d      	ldr	r0, [pc, #116]	; (3b828 <z_impl_k_poll+0x200>)
   3b7b4:	f003 f8c7 	bl	3e946 <assert_post_action>
	z_spin_lock_set_owner(l);
   3b7b8:	4819      	ldr	r0, [pc, #100]	; (3b820 <z_impl_k_poll+0x1f8>)
   3b7ba:	f7fe ff27 	bl	3a60c <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   3b7be:	4620      	mov	r0, r4
   3b7c0:	4632      	mov	r2, r6
   3b7c2:	4639      	mov	r1, r7
   3b7c4:	f7ff fd2e 	bl	3b224 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock!");
   3b7c8:	4815      	ldr	r0, [pc, #84]	; (3b820 <z_impl_k_poll+0x1f8>)
   3b7ca:	f7fe ff0f 	bl	3a5ec <z_spin_unlock_valid>
   3b7ce:	b960      	cbnz	r0, 3b7ea <z_impl_k_poll+0x1c2>
   3b7d0:	4917      	ldr	r1, [pc, #92]	; (3b830 <z_impl_k_poll+0x208>)
   3b7d2:	2372      	movs	r3, #114	; 0x72
   3b7d4:	4a14      	ldr	r2, [pc, #80]	; (3b828 <z_impl_k_poll+0x200>)
   3b7d6:	480c      	ldr	r0, [pc, #48]	; (3b808 <z_impl_k_poll+0x1e0>)
   3b7d8:	f003 f8a8 	bl	3e92c <printk>
   3b7dc:	4815      	ldr	r0, [pc, #84]	; (3b834 <z_impl_k_poll+0x20c>)
   3b7de:	f003 f8a5 	bl	3e92c <printk>
   3b7e2:	2172      	movs	r1, #114	; 0x72
   3b7e4:	4810      	ldr	r0, [pc, #64]	; (3b828 <z_impl_k_poll+0x200>)
   3b7e6:	f003 f8ae 	bl	3e946 <assert_post_action>
	__asm__ volatile(
   3b7ea:	f386 8811 	msr	BASEPRI, r6
   3b7ee:	f3bf 8f6f 	isb	sy
	return swap_rc;
   3b7f2:	e7a0      	b.n	3b736 <z_impl_k_poll+0x10e>
   3b7f4:	2002a214 	.word	0x2002a214
   3b7f8:	0003b1b5 	.word	0x0003b1b5
   3b7fc:	e000ed00 	.word	0xe000ed00
   3b800:	000491c2 	.word	0x000491c2
   3b804:	000495be 	.word	0x000495be
   3b808:	00044643 	.word	0x00044643
   3b80c:	000490df 	.word	0x000490df
   3b810:	0004962a 	.word	0x0004962a
   3b814:	00049640 	.word	0x00049640
   3b818:	0004964f 	.word	0x0004964f
   3b81c:	0004965e 	.word	0x0004965e
   3b820:	2002a330 	.word	0x2002a330
   3b824:	00044e5a 	.word	0x00044e5a
   3b828:	00044e3b 	.word	0x00044e3b
   3b82c:	00044e6f 	.word	0x00044e6f
   3b830:	00044e84 	.word	0x00044e84
   3b834:	00044e9b 	.word	0x00044e9b

0003b838 <ocrypto_ecdsa_p256_public_key>:
   3b838:	b530      	push	{r4, r5, lr}
   3b83a:	b099      	sub	sp, #100	; 0x64
   3b83c:	4605      	mov	r5, r0
   3b83e:	4668      	mov	r0, sp
   3b840:	f000 f8f2 	bl	3ba28 <ocrypto_sc_p256_from32bytes>
   3b844:	4669      	mov	r1, sp
   3b846:	a808      	add	r0, sp, #32
   3b848:	f000 fae6 	bl	3be18 <ocrypto_curve_p256_scalarmult_base>
   3b84c:	4604      	mov	r4, r0
   3b84e:	a908      	add	r1, sp, #32
   3b850:	4628      	mov	r0, r5
   3b852:	f000 fa21 	bl	3bc98 <ocrypto_curve_p256_to64bytes>
   3b856:	4620      	mov	r0, r4
   3b858:	b019      	add	sp, #100	; 0x64
   3b85a:	bd30      	pop	{r4, r5, pc}

0003b85c <ocrypto_mod_p256_cneg>:
   3b85c:	b570      	push	{r4, r5, r6, lr}
   3b85e:	b088      	sub	sp, #32
   3b860:	4604      	mov	r4, r0
   3b862:	460d      	mov	r5, r1
   3b864:	4668      	mov	r0, sp
   3b866:	2120      	movs	r1, #32
   3b868:	4616      	mov	r6, r2
   3b86a:	f7dd ffa0 	bl	197ae <ocrypto_constant_time_fill_zero>
   3b86e:	2300      	movs	r3, #0
   3b870:	4629      	mov	r1, r5
   3b872:	4620      	mov	r0, r4
   3b874:	2220      	movs	r2, #32
   3b876:	9300      	str	r3, [sp, #0]
   3b878:	f7dd ff92 	bl	197a0 <ocrypto_constant_time_copy>
   3b87c:	462a      	mov	r2, r5
   3b87e:	4669      	mov	r1, sp
   3b880:	4668      	mov	r0, sp
   3b882:	f7dd ffda 	bl	1983a <ocrypto_mod_p256_sub>
   3b886:	4632      	mov	r2, r6
   3b888:	4669      	mov	r1, sp
   3b88a:	4620      	mov	r0, r4
   3b88c:	f7dd fce5 	bl	1925a <ocrypto_bigint_cswap256>
   3b890:	b008      	add	sp, #32
   3b892:	bd70      	pop	{r4, r5, r6, pc}

0003b894 <ocrypto_mod_p256_toBytes>:
   3b894:	69cb      	ldr	r3, [r1, #28]
   3b896:	ba1b      	rev	r3, r3
   3b898:	6003      	str	r3, [r0, #0]
   3b89a:	698b      	ldr	r3, [r1, #24]
   3b89c:	ba1b      	rev	r3, r3
   3b89e:	6043      	str	r3, [r0, #4]
   3b8a0:	694b      	ldr	r3, [r1, #20]
   3b8a2:	ba1b      	rev	r3, r3
   3b8a4:	6083      	str	r3, [r0, #8]
   3b8a6:	690b      	ldr	r3, [r1, #16]
   3b8a8:	ba1b      	rev	r3, r3
   3b8aa:	60c3      	str	r3, [r0, #12]
   3b8ac:	68cb      	ldr	r3, [r1, #12]
   3b8ae:	ba1b      	rev	r3, r3
   3b8b0:	6103      	str	r3, [r0, #16]
   3b8b2:	688b      	ldr	r3, [r1, #8]
   3b8b4:	ba1b      	rev	r3, r3
   3b8b6:	6143      	str	r3, [r0, #20]
   3b8b8:	684b      	ldr	r3, [r1, #4]
   3b8ba:	ba1b      	rev	r3, r3
   3b8bc:	6183      	str	r3, [r0, #24]
   3b8be:	680b      	ldr	r3, [r1, #0]
   3b8c0:	ba1b      	rev	r3, r3
   3b8c2:	61c3      	str	r3, [r0, #28]
   3b8c4:	4770      	bx	lr
   3b8c6:	bf00      	nop

0003b8c8 <ocrypto_mod_p256_invert>:
   3b8c8:	b570      	push	{r4, r5, r6, lr}
   3b8ca:	460d      	mov	r5, r1
   3b8cc:	2405      	movs	r4, #5
   3b8ce:	b098      	sub	sp, #96	; 0x60
   3b8d0:	4606      	mov	r6, r0
   3b8d2:	a810      	add	r0, sp, #64	; 0x40
   3b8d4:	f7dd ffde 	bl	19894 <ocrypto_mod_p256_square>
   3b8d8:	462a      	mov	r2, r5
   3b8da:	a910      	add	r1, sp, #64	; 0x40
   3b8dc:	4668      	mov	r0, sp
   3b8de:	f7dd ffda 	bl	19896 <ocrypto_mod_p256_mul>
   3b8e2:	4669      	mov	r1, sp
   3b8e4:	a810      	add	r0, sp, #64	; 0x40
   3b8e6:	f7dd ffd5 	bl	19894 <ocrypto_mod_p256_square>
   3b8ea:	a910      	add	r1, sp, #64	; 0x40
   3b8ec:	4608      	mov	r0, r1
   3b8ee:	f7dd ffd1 	bl	19894 <ocrypto_mod_p256_square>
   3b8f2:	466a      	mov	r2, sp
   3b8f4:	a910      	add	r1, sp, #64	; 0x40
   3b8f6:	a808      	add	r0, sp, #32
   3b8f8:	f7dd ffcd 	bl	19896 <ocrypto_mod_p256_mul>
   3b8fc:	a908      	add	r1, sp, #32
   3b8fe:	a810      	add	r0, sp, #64	; 0x40
   3b900:	f7dd ffc8 	bl	19894 <ocrypto_mod_p256_square>
   3b904:	a910      	add	r1, sp, #64	; 0x40
   3b906:	4608      	mov	r0, r1
   3b908:	f7dd ffc4 	bl	19894 <ocrypto_mod_p256_square>
   3b90c:	a910      	add	r1, sp, #64	; 0x40
   3b90e:	4608      	mov	r0, r1
   3b910:	f7dd ffc0 	bl	19894 <ocrypto_mod_p256_square>
   3b914:	a910      	add	r1, sp, #64	; 0x40
   3b916:	4608      	mov	r0, r1
   3b918:	f7dd ffbc 	bl	19894 <ocrypto_mod_p256_square>
   3b91c:	a910      	add	r1, sp, #64	; 0x40
   3b91e:	aa08      	add	r2, sp, #32
   3b920:	4608      	mov	r0, r1
   3b922:	f7dd ffb8 	bl	19896 <ocrypto_mod_p256_mul>
   3b926:	a910      	add	r1, sp, #64	; 0x40
   3b928:	4608      	mov	r0, r1
   3b92a:	f7dd ffb3 	bl	19894 <ocrypto_mod_p256_square>
   3b92e:	a910      	add	r1, sp, #64	; 0x40
   3b930:	4608      	mov	r0, r1
   3b932:	f7dd ffaf 	bl	19894 <ocrypto_mod_p256_square>
   3b936:	a910      	add	r1, sp, #64	; 0x40
   3b938:	466a      	mov	r2, sp
   3b93a:	a808      	add	r0, sp, #32
   3b93c:	f7dd ffab 	bl	19896 <ocrypto_mod_p256_mul>
   3b940:	a908      	add	r1, sp, #32
   3b942:	a810      	add	r0, sp, #64	; 0x40
   3b944:	f7dd ffa6 	bl	19894 <ocrypto_mod_p256_square>
   3b948:	a910      	add	r1, sp, #64	; 0x40
   3b94a:	4608      	mov	r0, r1
   3b94c:	f7dd ffa2 	bl	19894 <ocrypto_mod_p256_square>
   3b950:	3c01      	subs	r4, #1
   3b952:	a910      	add	r1, sp, #64	; 0x40
   3b954:	d1f5      	bne.n	3b942 <ocrypto_mod_p256_invert+0x7a>
   3b956:	aa08      	add	r2, sp, #32
   3b958:	4608      	mov	r0, r1
   3b95a:	f7dd ff9c 	bl	19896 <ocrypto_mod_p256_mul>
   3b95e:	2405      	movs	r4, #5
   3b960:	a910      	add	r1, sp, #64	; 0x40
   3b962:	4608      	mov	r0, r1
   3b964:	f7dd ff96 	bl	19894 <ocrypto_mod_p256_square>
   3b968:	a910      	add	r1, sp, #64	; 0x40
   3b96a:	4608      	mov	r0, r1
   3b96c:	f7dd ff92 	bl	19894 <ocrypto_mod_p256_square>
   3b970:	3c01      	subs	r4, #1
   3b972:	d1f5      	bne.n	3b960 <ocrypto_mod_p256_invert+0x98>
   3b974:	a910      	add	r1, sp, #64	; 0x40
   3b976:	aa08      	add	r2, sp, #32
   3b978:	4608      	mov	r0, r1
   3b97a:	f7dd ff8c 	bl	19896 <ocrypto_mod_p256_mul>
   3b97e:	a910      	add	r1, sp, #64	; 0x40
   3b980:	a808      	add	r0, sp, #32
   3b982:	f7dd ff87 	bl	19894 <ocrypto_mod_p256_square>
   3b986:	a908      	add	r1, sp, #32
   3b988:	4608      	mov	r0, r1
   3b98a:	f7dd ff83 	bl	19894 <ocrypto_mod_p256_square>
   3b98e:	a908      	add	r1, sp, #32
   3b990:	466a      	mov	r2, sp
   3b992:	4668      	mov	r0, sp
   3b994:	f7dd ff7f 	bl	19896 <ocrypto_mod_p256_mul>
   3b998:	2410      	movs	r4, #16
   3b99a:	4669      	mov	r1, sp
   3b99c:	a810      	add	r0, sp, #64	; 0x40
   3b99e:	f7dd ff79 	bl	19894 <ocrypto_mod_p256_square>
   3b9a2:	a910      	add	r1, sp, #64	; 0x40
   3b9a4:	4608      	mov	r0, r1
   3b9a6:	f7dd ff75 	bl	19894 <ocrypto_mod_p256_square>
   3b9aa:	3c01      	subs	r4, #1
   3b9ac:	a910      	add	r1, sp, #64	; 0x40
   3b9ae:	d1f5      	bne.n	3b99c <ocrypto_mod_p256_invert+0xd4>
   3b9b0:	462a      	mov	r2, r5
   3b9b2:	4608      	mov	r0, r1
   3b9b4:	f7dd ff6f 	bl	19896 <ocrypto_mod_p256_mul>
   3b9b8:	2440      	movs	r4, #64	; 0x40
   3b9ba:	a910      	add	r1, sp, #64	; 0x40
   3b9bc:	4608      	mov	r0, r1
   3b9be:	f7dd ff69 	bl	19894 <ocrypto_mod_p256_square>
   3b9c2:	a910      	add	r1, sp, #64	; 0x40
   3b9c4:	4608      	mov	r0, r1
   3b9c6:	f7dd ff65 	bl	19894 <ocrypto_mod_p256_square>
   3b9ca:	3c01      	subs	r4, #1
   3b9cc:	d1f5      	bne.n	3b9ba <ocrypto_mod_p256_invert+0xf2>
   3b9ce:	a910      	add	r1, sp, #64	; 0x40
   3b9d0:	466a      	mov	r2, sp
   3b9d2:	4608      	mov	r0, r1
   3b9d4:	f7dd ff5f 	bl	19896 <ocrypto_mod_p256_mul>
   3b9d8:	2410      	movs	r4, #16
   3b9da:	a910      	add	r1, sp, #64	; 0x40
   3b9dc:	4608      	mov	r0, r1
   3b9de:	f7dd ff59 	bl	19894 <ocrypto_mod_p256_square>
   3b9e2:	a910      	add	r1, sp, #64	; 0x40
   3b9e4:	4608      	mov	r0, r1
   3b9e6:	f7dd ff55 	bl	19894 <ocrypto_mod_p256_square>
   3b9ea:	3c01      	subs	r4, #1
   3b9ec:	d1f5      	bne.n	3b9da <ocrypto_mod_p256_invert+0x112>
   3b9ee:	a910      	add	r1, sp, #64	; 0x40
   3b9f0:	466a      	mov	r2, sp
   3b9f2:	4608      	mov	r0, r1
   3b9f4:	f7dd ff4f 	bl	19896 <ocrypto_mod_p256_mul>
   3b9f8:	2410      	movs	r4, #16
   3b9fa:	a910      	add	r1, sp, #64	; 0x40
   3b9fc:	4608      	mov	r0, r1
   3b9fe:	f7dd ff49 	bl	19894 <ocrypto_mod_p256_square>
   3ba02:	a910      	add	r1, sp, #64	; 0x40
   3ba04:	4608      	mov	r0, r1
   3ba06:	f7dd ff45 	bl	19894 <ocrypto_mod_p256_square>
   3ba0a:	3c01      	subs	r4, #1
   3ba0c:	d1f5      	bne.n	3b9fa <ocrypto_mod_p256_invert+0x132>
   3ba0e:	a910      	add	r1, sp, #64	; 0x40
   3ba10:	aa08      	add	r2, sp, #32
   3ba12:	4608      	mov	r0, r1
   3ba14:	f7dd ff3f 	bl	19896 <ocrypto_mod_p256_mul>
   3ba18:	462a      	mov	r2, r5
   3ba1a:	a910      	add	r1, sp, #64	; 0x40
   3ba1c:	4630      	mov	r0, r6
   3ba1e:	f7dd ff3a 	bl	19896 <ocrypto_mod_p256_mul>
   3ba22:	b018      	add	sp, #96	; 0x60
   3ba24:	bd70      	pop	{r4, r5, r6, pc}
   3ba26:	bf00      	nop

0003ba28 <ocrypto_sc_p256_from32bytes>:
   3ba28:	b538      	push	{r3, r4, r5, lr}
   3ba2a:	460b      	mov	r3, r1
   3ba2c:	680a      	ldr	r2, [r1, #0]
   3ba2e:	4d12      	ldr	r5, [pc, #72]	; (3ba78 <ocrypto_sc_p256_from32bytes+0x50>)
   3ba30:	ba12      	rev	r2, r2
   3ba32:	61c2      	str	r2, [r0, #28]
   3ba34:	684a      	ldr	r2, [r1, #4]
   3ba36:	4601      	mov	r1, r0
   3ba38:	ba12      	rev	r2, r2
   3ba3a:	6182      	str	r2, [r0, #24]
   3ba3c:	689a      	ldr	r2, [r3, #8]
   3ba3e:	4604      	mov	r4, r0
   3ba40:	ba12      	rev	r2, r2
   3ba42:	6142      	str	r2, [r0, #20]
   3ba44:	68da      	ldr	r2, [r3, #12]
   3ba46:	ba12      	rev	r2, r2
   3ba48:	6102      	str	r2, [r0, #16]
   3ba4a:	691a      	ldr	r2, [r3, #16]
   3ba4c:	ba12      	rev	r2, r2
   3ba4e:	60c2      	str	r2, [r0, #12]
   3ba50:	695a      	ldr	r2, [r3, #20]
   3ba52:	ba12      	rev	r2, r2
   3ba54:	6082      	str	r2, [r0, #8]
   3ba56:	699a      	ldr	r2, [r3, #24]
   3ba58:	ba12      	rev	r2, r2
   3ba5a:	6042      	str	r2, [r0, #4]
   3ba5c:	69db      	ldr	r3, [r3, #28]
   3ba5e:	462a      	mov	r2, r5
   3ba60:	ba1b      	rev	r3, r3
   3ba62:	6003      	str	r3, [r0, #0]
   3ba64:	f7dd fb6e 	bl	19144 <ocrypto_bigint_sub256>
   3ba68:	4629      	mov	r1, r5
   3ba6a:	4602      	mov	r2, r0
   3ba6c:	4620      	mov	r0, r4
   3ba6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3ba72:	f7dd bb87 	b.w	19184 <ocrypto_bigint_cadd256>
   3ba76:	bf00      	nop
   3ba78:	00043ea4 	.word	0x00043ea4

0003ba7c <p256_zdblu>:
   3ba7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3ba80:	4607      	mov	r7, r0
   3ba82:	460d      	mov	r5, r1
   3ba84:	4690      	mov	r8, r2
   3ba86:	b088      	sub	sp, #32
   3ba88:	f102 0120 	add.w	r1, r2, #32
   3ba8c:	4668      	mov	r0, sp
   3ba8e:	f107 0620 	add.w	r6, r7, #32
   3ba92:	f7dd feff 	bl	19894 <ocrypto_mod_p256_square>
   3ba96:	466a      	mov	r2, sp
   3ba98:	4669      	mov	r1, sp
   3ba9a:	4668      	mov	r0, sp
   3ba9c:	f7dd fe8e 	bl	197bc <ocrypto_mod_p256_add>
   3baa0:	4630      	mov	r0, r6
   3baa2:	4669      	mov	r1, sp
   3baa4:	f7dd fef6 	bl	19894 <ocrypto_mod_p256_square>
   3baa8:	4632      	mov	r2, r6
   3baaa:	4631      	mov	r1, r6
   3baac:	4630      	mov	r0, r6
   3baae:	f105 0420 	add.w	r4, r5, #32
   3bab2:	f7dd fe83 	bl	197bc <ocrypto_mod_p256_add>
   3bab6:	466a      	mov	r2, sp
   3bab8:	4669      	mov	r1, sp
   3baba:	4668      	mov	r0, sp
   3babc:	f7dd fe7e 	bl	197bc <ocrypto_mod_p256_add>
   3bac0:	4620      	mov	r0, r4
   3bac2:	4641      	mov	r1, r8
   3bac4:	f7dd fee6 	bl	19894 <ocrypto_mod_p256_square>
   3bac8:	466a      	mov	r2, sp
   3baca:	4641      	mov	r1, r8
   3bacc:	4638      	mov	r0, r7
   3bace:	f7dd fee2 	bl	19896 <ocrypto_mod_p256_mul>
   3bad2:	4622      	mov	r2, r4
   3bad4:	4621      	mov	r1, r4
   3bad6:	4668      	mov	r0, sp
   3bad8:	f7dd fe70 	bl	197bc <ocrypto_mod_p256_add>
   3badc:	4622      	mov	r2, r4
   3bade:	4669      	mov	r1, sp
   3bae0:	4668      	mov	r0, sp
   3bae2:	f7dd fe6b 	bl	197bc <ocrypto_mod_p256_add>
   3bae6:	4669      	mov	r1, sp
   3bae8:	4668      	mov	r0, sp
   3baea:	4a11      	ldr	r2, [pc, #68]	; (3bb30 <p256_zdblu+0xb4>)
   3baec:	f7dd fe66 	bl	197bc <ocrypto_mod_p256_add>
   3baf0:	4669      	mov	r1, sp
   3baf2:	4628      	mov	r0, r5
   3baf4:	f7dd fece 	bl	19894 <ocrypto_mod_p256_square>
   3baf8:	463a      	mov	r2, r7
   3bafa:	4629      	mov	r1, r5
   3bafc:	4628      	mov	r0, r5
   3bafe:	f7dd fe9c 	bl	1983a <ocrypto_mod_p256_sub>
   3bb02:	463a      	mov	r2, r7
   3bb04:	4629      	mov	r1, r5
   3bb06:	4628      	mov	r0, r5
   3bb08:	f7dd fe97 	bl	1983a <ocrypto_mod_p256_sub>
   3bb0c:	462a      	mov	r2, r5
   3bb0e:	4639      	mov	r1, r7
   3bb10:	4620      	mov	r0, r4
   3bb12:	f7dd fe92 	bl	1983a <ocrypto_mod_p256_sub>
   3bb16:	466a      	mov	r2, sp
   3bb18:	4621      	mov	r1, r4
   3bb1a:	4620      	mov	r0, r4
   3bb1c:	f7dd febb 	bl	19896 <ocrypto_mod_p256_mul>
   3bb20:	4632      	mov	r2, r6
   3bb22:	4621      	mov	r1, r4
   3bb24:	4620      	mov	r0, r4
   3bb26:	f7dd fe88 	bl	1983a <ocrypto_mod_p256_sub>
   3bb2a:	b008      	add	sp, #32
   3bb2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3bb30:	00043f44 	.word	0x00043f44

0003bb34 <p256_zaddc>:
   3bb34:	b5f0      	push	{r4, r5, r6, r7, lr}
   3bb36:	4604      	mov	r4, r0
   3bb38:	460e      	mov	r6, r1
   3bb3a:	b099      	sub	sp, #100	; 0x64
   3bb3c:	460a      	mov	r2, r1
   3bb3e:	4601      	mov	r1, r0
   3bb40:	4668      	mov	r0, sp
   3bb42:	f7dd fe7a 	bl	1983a <ocrypto_mod_p256_sub>
   3bb46:	4669      	mov	r1, sp
   3bb48:	4668      	mov	r0, sp
   3bb4a:	f7dd fea3 	bl	19894 <ocrypto_mod_p256_square>
   3bb4e:	466a      	mov	r2, sp
   3bb50:	4621      	mov	r1, r4
   3bb52:	a808      	add	r0, sp, #32
   3bb54:	f106 0520 	add.w	r5, r6, #32
   3bb58:	f104 0720 	add.w	r7, r4, #32
   3bb5c:	f7dd fe9b 	bl	19896 <ocrypto_mod_p256_mul>
   3bb60:	466a      	mov	r2, sp
   3bb62:	4631      	mov	r1, r6
   3bb64:	4668      	mov	r0, sp
   3bb66:	f7dd fe96 	bl	19896 <ocrypto_mod_p256_mul>
   3bb6a:	4639      	mov	r1, r7
   3bb6c:	462a      	mov	r2, r5
   3bb6e:	a810      	add	r0, sp, #64	; 0x40
   3bb70:	f7dd fe24 	bl	197bc <ocrypto_mod_p256_add>
   3bb74:	462a      	mov	r2, r5
   3bb76:	4639      	mov	r1, r7
   3bb78:	4628      	mov	r0, r5
   3bb7a:	f7dd fe5e 	bl	1983a <ocrypto_mod_p256_sub>
   3bb7e:	4629      	mov	r1, r5
   3bb80:	4630      	mov	r0, r6
   3bb82:	f7dd fe87 	bl	19894 <ocrypto_mod_p256_square>
   3bb86:	466a      	mov	r2, sp
   3bb88:	a908      	add	r1, sp, #32
   3bb8a:	4620      	mov	r0, r4
   3bb8c:	f7dd fe16 	bl	197bc <ocrypto_mod_p256_add>
   3bb90:	4622      	mov	r2, r4
   3bb92:	4631      	mov	r1, r6
   3bb94:	4630      	mov	r0, r6
   3bb96:	f7dd fe50 	bl	1983a <ocrypto_mod_p256_sub>
   3bb9a:	466a      	mov	r2, sp
   3bb9c:	a908      	add	r1, sp, #32
   3bb9e:	4668      	mov	r0, sp
   3bba0:	f7dd fe4b 	bl	1983a <ocrypto_mod_p256_sub>
   3bba4:	466a      	mov	r2, sp
   3bba6:	4639      	mov	r1, r7
   3bba8:	4638      	mov	r0, r7
   3bbaa:	f7dd fe74 	bl	19896 <ocrypto_mod_p256_mul>
   3bbae:	4632      	mov	r2, r6
   3bbb0:	a908      	add	r1, sp, #32
   3bbb2:	4668      	mov	r0, sp
   3bbb4:	f7dd fe41 	bl	1983a <ocrypto_mod_p256_sub>
   3bbb8:	466a      	mov	r2, sp
   3bbba:	4629      	mov	r1, r5
   3bbbc:	4628      	mov	r0, r5
   3bbbe:	f7dd fe6a 	bl	19896 <ocrypto_mod_p256_mul>
   3bbc2:	463a      	mov	r2, r7
   3bbc4:	4629      	mov	r1, r5
   3bbc6:	4628      	mov	r0, r5
   3bbc8:	f7dd fe37 	bl	1983a <ocrypto_mod_p256_sub>
   3bbcc:	a910      	add	r1, sp, #64	; 0x40
   3bbce:	4668      	mov	r0, sp
   3bbd0:	f7dd fe60 	bl	19894 <ocrypto_mod_p256_square>
   3bbd4:	4622      	mov	r2, r4
   3bbd6:	4669      	mov	r1, sp
   3bbd8:	4620      	mov	r0, r4
   3bbda:	f7dd fe2e 	bl	1983a <ocrypto_mod_p256_sub>
   3bbde:	a908      	add	r1, sp, #32
   3bbe0:	4622      	mov	r2, r4
   3bbe2:	4608      	mov	r0, r1
   3bbe4:	f7dd fe29 	bl	1983a <ocrypto_mod_p256_sub>
   3bbe8:	a910      	add	r1, sp, #64	; 0x40
   3bbea:	aa08      	add	r2, sp, #32
   3bbec:	4608      	mov	r0, r1
   3bbee:	f7dd fe52 	bl	19896 <ocrypto_mod_p256_mul>
   3bbf2:	463a      	mov	r2, r7
   3bbf4:	a910      	add	r1, sp, #64	; 0x40
   3bbf6:	4638      	mov	r0, r7
   3bbf8:	f7dd fe1f 	bl	1983a <ocrypto_mod_p256_sub>
   3bbfc:	b019      	add	sp, #100	; 0x64
   3bbfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003bc00 <p256_zaddu>:
   3bc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3bc04:	460c      	mov	r4, r1
   3bc06:	4605      	mov	r5, r0
   3bc08:	4690      	mov	r8, r2
   3bc0a:	b088      	sub	sp, #32
   3bc0c:	4622      	mov	r2, r4
   3bc0e:	4601      	mov	r1, r0
   3bc10:	4668      	mov	r0, sp
   3bc12:	f7dd fe12 	bl	1983a <ocrypto_mod_p256_sub>
   3bc16:	4669      	mov	r1, sp
   3bc18:	4668      	mov	r0, sp
   3bc1a:	f7dd fe3b 	bl	19894 <ocrypto_mod_p256_square>
   3bc1e:	466a      	mov	r2, sp
   3bc20:	4629      	mov	r1, r5
   3bc22:	4628      	mov	r0, r5
   3bc24:	f104 0620 	add.w	r6, r4, #32
   3bc28:	f7dd fe35 	bl	19896 <ocrypto_mod_p256_mul>
   3bc2c:	f105 0720 	add.w	r7, r5, #32
   3bc30:	466a      	mov	r2, sp
   3bc32:	4621      	mov	r1, r4
   3bc34:	4668      	mov	r0, sp
   3bc36:	f7dd fe2e 	bl	19896 <ocrypto_mod_p256_mul>
   3bc3a:	4632      	mov	r2, r6
   3bc3c:	4630      	mov	r0, r6
   3bc3e:	4639      	mov	r1, r7
   3bc40:	f7dd fdfb 	bl	1983a <ocrypto_mod_p256_sub>
   3bc44:	4631      	mov	r1, r6
   3bc46:	4620      	mov	r0, r4
   3bc48:	f7dd fe24 	bl	19894 <ocrypto_mod_p256_square>
   3bc4c:	462a      	mov	r2, r5
   3bc4e:	4621      	mov	r1, r4
   3bc50:	4620      	mov	r0, r4
   3bc52:	f7dd fdf2 	bl	1983a <ocrypto_mod_p256_sub>
   3bc56:	466a      	mov	r2, sp
   3bc58:	4621      	mov	r1, r4
   3bc5a:	4620      	mov	r0, r4
   3bc5c:	f7dd fded 	bl	1983a <ocrypto_mod_p256_sub>
   3bc60:	466a      	mov	r2, sp
   3bc62:	4629      	mov	r1, r5
   3bc64:	4640      	mov	r0, r8
   3bc66:	f7dd fde8 	bl	1983a <ocrypto_mod_p256_sub>
   3bc6a:	4642      	mov	r2, r8
   3bc6c:	4639      	mov	r1, r7
   3bc6e:	4638      	mov	r0, r7
   3bc70:	f7dd fe11 	bl	19896 <ocrypto_mod_p256_mul>
   3bc74:	4622      	mov	r2, r4
   3bc76:	4629      	mov	r1, r5
   3bc78:	4668      	mov	r0, sp
   3bc7a:	f7dd fdde 	bl	1983a <ocrypto_mod_p256_sub>
   3bc7e:	466a      	mov	r2, sp
   3bc80:	4631      	mov	r1, r6
   3bc82:	4630      	mov	r0, r6
   3bc84:	f7dd fe07 	bl	19896 <ocrypto_mod_p256_mul>
   3bc88:	463a      	mov	r2, r7
   3bc8a:	4631      	mov	r1, r6
   3bc8c:	4630      	mov	r0, r6
   3bc8e:	f7dd fdd4 	bl	1983a <ocrypto_mod_p256_sub>
   3bc92:	b008      	add	sp, #32
   3bc94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003bc98 <ocrypto_curve_p256_to64bytes>:
   3bc98:	b538      	push	{r3, r4, r5, lr}
   3bc9a:	4604      	mov	r4, r0
   3bc9c:	460d      	mov	r5, r1
   3bc9e:	f7ff fdf9 	bl	3b894 <ocrypto_mod_p256_toBytes>
   3bca2:	f105 0120 	add.w	r1, r5, #32
   3bca6:	f104 0020 	add.w	r0, r4, #32
   3bcaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3bcae:	f7ff bdf1 	b.w	3b894 <ocrypto_mod_p256_toBytes>
   3bcb2:	bf00      	nop

0003bcb4 <ocrypto_curve_p256_scalarmult>:
   3bcb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3bcb8:	b0b8      	sub	sp, #224	; 0xe0
   3bcba:	468a      	mov	sl, r1
   3bcbc:	4681      	mov	r9, r0
   3bcbe:	4611      	mov	r1, r2
   3bcc0:	a810      	add	r0, sp, #64	; 0x40
   3bcc2:	4a51      	ldr	r2, [pc, #324]	; (3be08 <ocrypto_curve_p256_scalarmult+0x154>)
   3bcc4:	f7dd fa3e 	bl	19144 <ocrypto_bigint_sub256>
   3bcc8:	4950      	ldr	r1, [pc, #320]	; (3be0c <ocrypto_curve_p256_scalarmult+0x158>)
   3bcca:	4602      	mov	r2, r0
   3bccc:	a810      	add	r0, sp, #64	; 0x40
   3bcce:	f7dd fa59 	bl	19184 <ocrypto_bigint_cadd256>
   3bcd2:	4680      	mov	r8, r0
   3bcd4:	9f17      	ldr	r7, [sp, #92]	; 0x5c
   3bcd6:	494c      	ldr	r1, [pc, #304]	; (3be08 <ocrypto_curve_p256_scalarmult+0x154>)
   3bcd8:	ea08 77d7 	and.w	r7, r8, r7, lsr #31
   3bcdc:	f1c7 0201 	rsb	r2, r7, #1
   3bce0:	a810      	add	r0, sp, #64	; 0x40
   3bce2:	f7dd fa4f 	bl	19184 <ocrypto_bigint_cadd256>
   3bce6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   3bce8:	4652      	mov	r2, sl
   3bcea:	43ed      	mvns	r5, r5
   3bcec:	a928      	add	r1, sp, #160	; 0xa0
   3bcee:	a818      	add	r0, sp, #96	; 0x60
   3bcf0:	f7ff fec4 	bl	3ba7c <p256_zdblu>
   3bcf4:	0fed      	lsrs	r5, r5, #31
   3bcf6:	a920      	add	r1, sp, #128	; 0x80
   3bcf8:	f1c5 0201 	rsb	r2, r5, #1
   3bcfc:	4608      	mov	r0, r1
   3bcfe:	f7ff fdad 	bl	3b85c <ocrypto_mod_p256_cneg>
   3bd02:	26fe      	movs	r6, #254	; 0xfe
   3bd04:	f1c8 0801 	rsb	r8, r8, #1
   3bd08:	466a      	mov	r2, sp
   3bd0a:	a918      	add	r1, sp, #96	; 0x60
   3bd0c:	a828      	add	r0, sp, #160	; 0xa0
   3bd0e:	f7ff ff77 	bl	3bc00 <p256_zaddu>
   3bd12:	1173      	asrs	r3, r6, #5
   3bd14:	aa38      	add	r2, sp, #224	; 0xe0
   3bd16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   3bd1a:	f853 4ca0 	ldr.w	r4, [r3, #-160]
   3bd1e:	f006 031f 	and.w	r3, r6, #31
   3bd22:	40dc      	lsrs	r4, r3
   3bd24:	f004 0401 	and.w	r4, r4, #1
   3bd28:	4065      	eors	r5, r4
   3bd2a:	462a      	mov	r2, r5
   3bd2c:	a928      	add	r1, sp, #160	; 0xa0
   3bd2e:	a818      	add	r0, sp, #96	; 0x60
   3bd30:	f7dd fa93 	bl	1925a <ocrypto_bigint_cswap256>
   3bd34:	462a      	mov	r2, r5
   3bd36:	a930      	add	r1, sp, #192	; 0xc0
   3bd38:	a820      	add	r0, sp, #128	; 0x80
   3bd3a:	f7dd fa8e 	bl	1925a <ocrypto_bigint_cswap256>
   3bd3e:	3e01      	subs	r6, #1
   3bd40:	a928      	add	r1, sp, #160	; 0xa0
   3bd42:	a818      	add	r0, sp, #96	; 0x60
   3bd44:	f7ff fef6 	bl	3bb34 <p256_zaddc>
   3bd48:	1c73      	adds	r3, r6, #1
   3bd4a:	4625      	mov	r5, r4
   3bd4c:	d1dc      	bne.n	3bd08 <ocrypto_curve_p256_scalarmult+0x54>
   3bd4e:	f1c4 0201 	rsb	r2, r4, #1
   3bd52:	a808      	add	r0, sp, #32
   3bd54:	a920      	add	r1, sp, #128	; 0x80
   3bd56:	f7ff fd81 	bl	3b85c <ocrypto_mod_p256_cneg>
   3bd5a:	407d      	eors	r5, r7
   3bd5c:	466a      	mov	r2, sp
   3bd5e:	a918      	add	r1, sp, #96	; 0x60
   3bd60:	a828      	add	r0, sp, #160	; 0xa0
   3bd62:	f7ff ff4d 	bl	3bc00 <p256_zaddu>
   3bd66:	a928      	add	r1, sp, #160	; 0xa0
   3bd68:	462a      	mov	r2, r5
   3bd6a:	a818      	add	r0, sp, #96	; 0x60
   3bd6c:	f7dd fa75 	bl	1925a <ocrypto_bigint_cswap256>
   3bd70:	462a      	mov	r2, r5
   3bd72:	a930      	add	r1, sp, #192	; 0xc0
   3bd74:	a820      	add	r0, sp, #128	; 0x80
   3bd76:	f7dd fa70 	bl	1925a <ocrypto_bigint_cswap256>
   3bd7a:	a908      	add	r1, sp, #32
   3bd7c:	466a      	mov	r2, sp
   3bd7e:	4608      	mov	r0, r1
   3bd80:	f7dd fd89 	bl	19896 <ocrypto_mod_p256_mul>
   3bd84:	a908      	add	r1, sp, #32
   3bd86:	4608      	mov	r0, r1
   3bd88:	f7ff fd9e 	bl	3b8c8 <ocrypto_mod_p256_invert>
   3bd8c:	a908      	add	r1, sp, #32
   3bd8e:	f109 0420 	add.w	r4, r9, #32
   3bd92:	f10a 0220 	add.w	r2, sl, #32
   3bd96:	4608      	mov	r0, r1
   3bd98:	f7dd fd7d 	bl	19896 <ocrypto_mod_p256_mul>
   3bd9c:	a920      	add	r1, sp, #128	; 0x80
   3bd9e:	aa08      	add	r2, sp, #32
   3bda0:	4620      	mov	r0, r4
   3bda2:	f7dd fd78 	bl	19896 <ocrypto_mod_p256_mul>
   3bda6:	aa08      	add	r2, sp, #32
   3bda8:	a918      	add	r1, sp, #96	; 0x60
   3bdaa:	4668      	mov	r0, sp
   3bdac:	f7dd fd73 	bl	19896 <ocrypto_mod_p256_mul>
   3bdb0:	4669      	mov	r1, sp
   3bdb2:	4668      	mov	r0, sp
   3bdb4:	f7dd fd6e 	bl	19894 <ocrypto_mod_p256_square>
   3bdb8:	aa18      	add	r2, sp, #96	; 0x60
   3bdba:	4669      	mov	r1, sp
   3bdbc:	a808      	add	r0, sp, #32
   3bdbe:	f7dd fd6a 	bl	19896 <ocrypto_mod_p256_mul>
   3bdc2:	4621      	mov	r1, r4
   3bdc4:	4668      	mov	r0, sp
   3bdc6:	f7dd fd65 	bl	19894 <ocrypto_mod_p256_square>
   3bdca:	aa08      	add	r2, sp, #32
   3bdcc:	4669      	mov	r1, sp
   3bdce:	4610      	mov	r0, r2
   3bdd0:	f7dd fd33 	bl	1983a <ocrypto_mod_p256_sub>
   3bdd4:	a908      	add	r1, sp, #32
   3bdd6:	4a0e      	ldr	r2, [pc, #56]	; (3be10 <ocrypto_curve_p256_scalarmult+0x15c>)
   3bdd8:	4668      	mov	r0, sp
   3bdda:	f7dd fd2e 	bl	1983a <ocrypto_mod_p256_sub>
   3bdde:	4620      	mov	r0, r4
   3bde0:	2120      	movs	r1, #32
   3bde2:	f7dd fcd0 	bl	19786 <ocrypto_constant_time_is_zero>
   3bde6:	a908      	add	r1, sp, #32
   3bde8:	4243      	negs	r3, r0
   3bdea:	4602      	mov	r2, r0
   3bdec:	4668      	mov	r0, sp
   3bdee:	ea43 0808 	orr.w	r8, r3, r8
   3bdf2:	f7dd fa32 	bl	1925a <ocrypto_bigint_cswap256>
   3bdf6:	4648      	mov	r0, r9
   3bdf8:	4669      	mov	r1, sp
   3bdfa:	4a06      	ldr	r2, [pc, #24]	; (3be14 <ocrypto_curve_p256_scalarmult+0x160>)
   3bdfc:	f7dd fd4b 	bl	19896 <ocrypto_mod_p256_mul>
   3be00:	4640      	mov	r0, r8
   3be02:	b038      	add	sp, #224	; 0xe0
   3be04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3be08:	00043f84 	.word	0x00043f84
   3be0c:	00043f04 	.word	0x00043f04
   3be10:	00043f64 	.word	0x00043f64
   3be14:	00043f24 	.word	0x00043f24

0003be18 <ocrypto_curve_p256_scalarmult_base>:
   3be18:	460a      	mov	r2, r1
   3be1a:	4901      	ldr	r1, [pc, #4]	; (3be20 <ocrypto_curve_p256_scalarmult_base+0x8>)
   3be1c:	f7ff bf4a 	b.w	3bcb4 <ocrypto_curve_p256_scalarmult>
   3be20:	00043ec4 	.word	0x00043ec4

0003be24 <__assert_func>:
   3be24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   3be26:	461c      	mov	r4, r3
   3be28:	4b09      	ldr	r3, [pc, #36]	; (3be50 <__assert_func+0x2c>)
   3be2a:	4605      	mov	r5, r0
   3be2c:	681b      	ldr	r3, [r3, #0]
   3be2e:	68d8      	ldr	r0, [r3, #12]
   3be30:	b152      	cbz	r2, 3be48 <__assert_func+0x24>
   3be32:	4b08      	ldr	r3, [pc, #32]	; (3be54 <__assert_func+0x30>)
   3be34:	9100      	str	r1, [sp, #0]
   3be36:	4908      	ldr	r1, [pc, #32]	; (3be58 <__assert_func+0x34>)
   3be38:	e9cd 3201 	strd	r3, r2, [sp, #4]
   3be3c:	462b      	mov	r3, r5
   3be3e:	4622      	mov	r2, r4
   3be40:	f000 f80e 	bl	3be60 <fiprintf>
   3be44:	f005 f9f1 	bl	4122a <abort>
   3be48:	4b04      	ldr	r3, [pc, #16]	; (3be5c <__assert_func+0x38>)
   3be4a:	461a      	mov	r2, r3
   3be4c:	e7f2      	b.n	3be34 <__assert_func+0x10>
   3be4e:	bf00      	nop
   3be50:	200312c4 	.word	0x200312c4
   3be54:	0004966d 	.word	0x0004966d
   3be58:	0004967a 	.word	0x0004967a
   3be5c:	000490e1 	.word	0x000490e1

0003be60 <fiprintf>:
   3be60:	b40e      	push	{r1, r2, r3}
   3be62:	b503      	push	{r0, r1, lr}
   3be64:	ab03      	add	r3, sp, #12
   3be66:	4601      	mov	r1, r0
   3be68:	4805      	ldr	r0, [pc, #20]	; (3be80 <fiprintf+0x20>)
   3be6a:	f853 2b04 	ldr.w	r2, [r3], #4
   3be6e:	6800      	ldr	r0, [r0, #0]
   3be70:	9301      	str	r3, [sp, #4]
   3be72:	f000 f8bf 	bl	3bff4 <_vfiprintf_r>
   3be76:	b002      	add	sp, #8
   3be78:	f85d eb04 	ldr.w	lr, [sp], #4
   3be7c:	b003      	add	sp, #12
   3be7e:	4770      	bx	lr
   3be80:	200312c4 	.word	0x200312c4

0003be84 <malloc>:
   3be84:	4b02      	ldr	r3, [pc, #8]	; (3be90 <malloc+0xc>)
   3be86:	4601      	mov	r1, r0
   3be88:	6818      	ldr	r0, [r3, #0]
   3be8a:	f000 b859 	b.w	3bf40 <_malloc_r>
   3be8e:	bf00      	nop
   3be90:	200312c4 	.word	0x200312c4

0003be94 <free>:
   3be94:	4b02      	ldr	r3, [pc, #8]	; (3bea0 <free+0xc>)
   3be96:	4601      	mov	r1, r0
   3be98:	6818      	ldr	r0, [r3, #0]
   3be9a:	f000 b803 	b.w	3bea4 <_free_r>
   3be9e:	bf00      	nop
   3bea0:	200312c4 	.word	0x200312c4

0003bea4 <_free_r>:
   3bea4:	b538      	push	{r3, r4, r5, lr}
   3bea6:	4605      	mov	r5, r0
   3bea8:	2900      	cmp	r1, #0
   3beaa:	d045      	beq.n	3bf38 <_free_r+0x94>
   3beac:	f851 3c04 	ldr.w	r3, [r1, #-4]
   3beb0:	1f0c      	subs	r4, r1, #4
   3beb2:	2b00      	cmp	r3, #0
   3beb4:	bfb8      	it	lt
   3beb6:	18e4      	addlt	r4, r4, r3
   3beb8:	f001 fc08 	bl	3d6cc <__malloc_lock>
   3bebc:	4a1f      	ldr	r2, [pc, #124]	; (3bf3c <_free_r+0x98>)
   3bebe:	6813      	ldr	r3, [r2, #0]
   3bec0:	4610      	mov	r0, r2
   3bec2:	b933      	cbnz	r3, 3bed2 <_free_r+0x2e>
   3bec4:	6063      	str	r3, [r4, #4]
   3bec6:	6014      	str	r4, [r2, #0]
   3bec8:	4628      	mov	r0, r5
   3beca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3bece:	f001 bc03 	b.w	3d6d8 <__malloc_unlock>
   3bed2:	42a3      	cmp	r3, r4
   3bed4:	d90c      	bls.n	3bef0 <_free_r+0x4c>
   3bed6:	6821      	ldr	r1, [r4, #0]
   3bed8:	1862      	adds	r2, r4, r1
   3beda:	4293      	cmp	r3, r2
   3bedc:	bf02      	ittt	eq
   3bede:	681a      	ldreq	r2, [r3, #0]
   3bee0:	685b      	ldreq	r3, [r3, #4]
   3bee2:	1852      	addeq	r2, r2, r1
   3bee4:	6063      	str	r3, [r4, #4]
   3bee6:	bf08      	it	eq
   3bee8:	6022      	streq	r2, [r4, #0]
   3beea:	6004      	str	r4, [r0, #0]
   3beec:	e7ec      	b.n	3bec8 <_free_r+0x24>
   3beee:	4613      	mov	r3, r2
   3bef0:	685a      	ldr	r2, [r3, #4]
   3bef2:	b10a      	cbz	r2, 3bef8 <_free_r+0x54>
   3bef4:	42a2      	cmp	r2, r4
   3bef6:	d9fa      	bls.n	3beee <_free_r+0x4a>
   3bef8:	6819      	ldr	r1, [r3, #0]
   3befa:	1858      	adds	r0, r3, r1
   3befc:	42a0      	cmp	r0, r4
   3befe:	d10b      	bne.n	3bf18 <_free_r+0x74>
   3bf00:	6820      	ldr	r0, [r4, #0]
   3bf02:	4401      	add	r1, r0
   3bf04:	1858      	adds	r0, r3, r1
   3bf06:	6019      	str	r1, [r3, #0]
   3bf08:	4282      	cmp	r2, r0
   3bf0a:	d1dd      	bne.n	3bec8 <_free_r+0x24>
   3bf0c:	6810      	ldr	r0, [r2, #0]
   3bf0e:	6852      	ldr	r2, [r2, #4]
   3bf10:	4401      	add	r1, r0
   3bf12:	605a      	str	r2, [r3, #4]
   3bf14:	6019      	str	r1, [r3, #0]
   3bf16:	e7d7      	b.n	3bec8 <_free_r+0x24>
   3bf18:	d902      	bls.n	3bf20 <_free_r+0x7c>
   3bf1a:	230c      	movs	r3, #12
   3bf1c:	602b      	str	r3, [r5, #0]
   3bf1e:	e7d3      	b.n	3bec8 <_free_r+0x24>
   3bf20:	6820      	ldr	r0, [r4, #0]
   3bf22:	1821      	adds	r1, r4, r0
   3bf24:	428a      	cmp	r2, r1
   3bf26:	bf02      	ittt	eq
   3bf28:	6811      	ldreq	r1, [r2, #0]
   3bf2a:	6852      	ldreq	r2, [r2, #4]
   3bf2c:	1809      	addeq	r1, r1, r0
   3bf2e:	6062      	str	r2, [r4, #4]
   3bf30:	bf08      	it	eq
   3bf32:	6021      	streq	r1, [r4, #0]
   3bf34:	605c      	str	r4, [r3, #4]
   3bf36:	e7c7      	b.n	3bec8 <_free_r+0x24>
   3bf38:	bd38      	pop	{r3, r4, r5, pc}
   3bf3a:	bf00      	nop
   3bf3c:	2002a334 	.word	0x2002a334

0003bf40 <_malloc_r>:
   3bf40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3bf42:	1ccd      	adds	r5, r1, #3
   3bf44:	4606      	mov	r6, r0
   3bf46:	f025 0503 	bic.w	r5, r5, #3
   3bf4a:	3508      	adds	r5, #8
   3bf4c:	2d0c      	cmp	r5, #12
   3bf4e:	bf38      	it	cc
   3bf50:	250c      	movcc	r5, #12
   3bf52:	2d00      	cmp	r5, #0
   3bf54:	db01      	blt.n	3bf5a <_malloc_r+0x1a>
   3bf56:	42a9      	cmp	r1, r5
   3bf58:	d903      	bls.n	3bf62 <_malloc_r+0x22>
   3bf5a:	230c      	movs	r3, #12
   3bf5c:	6033      	str	r3, [r6, #0]
   3bf5e:	2000      	movs	r0, #0
   3bf60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3bf62:	f001 fbb3 	bl	3d6cc <__malloc_lock>
   3bf66:	4921      	ldr	r1, [pc, #132]	; (3bfec <_malloc_r+0xac>)
   3bf68:	680a      	ldr	r2, [r1, #0]
   3bf6a:	4614      	mov	r4, r2
   3bf6c:	b99c      	cbnz	r4, 3bf96 <_malloc_r+0x56>
   3bf6e:	4f20      	ldr	r7, [pc, #128]	; (3bff0 <_malloc_r+0xb0>)
   3bf70:	683b      	ldr	r3, [r7, #0]
   3bf72:	b923      	cbnz	r3, 3bf7e <_malloc_r+0x3e>
   3bf74:	4621      	mov	r1, r4
   3bf76:	4630      	mov	r0, r6
   3bf78:	f000 fd02 	bl	3c980 <_sbrk_r>
   3bf7c:	6038      	str	r0, [r7, #0]
   3bf7e:	4629      	mov	r1, r5
   3bf80:	4630      	mov	r0, r6
   3bf82:	f000 fcfd 	bl	3c980 <_sbrk_r>
   3bf86:	1c43      	adds	r3, r0, #1
   3bf88:	d123      	bne.n	3bfd2 <_malloc_r+0x92>
   3bf8a:	230c      	movs	r3, #12
   3bf8c:	4630      	mov	r0, r6
   3bf8e:	6033      	str	r3, [r6, #0]
   3bf90:	f001 fba2 	bl	3d6d8 <__malloc_unlock>
   3bf94:	e7e3      	b.n	3bf5e <_malloc_r+0x1e>
   3bf96:	6823      	ldr	r3, [r4, #0]
   3bf98:	1b5b      	subs	r3, r3, r5
   3bf9a:	d417      	bmi.n	3bfcc <_malloc_r+0x8c>
   3bf9c:	2b0b      	cmp	r3, #11
   3bf9e:	d903      	bls.n	3bfa8 <_malloc_r+0x68>
   3bfa0:	6023      	str	r3, [r4, #0]
   3bfa2:	441c      	add	r4, r3
   3bfa4:	6025      	str	r5, [r4, #0]
   3bfa6:	e004      	b.n	3bfb2 <_malloc_r+0x72>
   3bfa8:	6863      	ldr	r3, [r4, #4]
   3bfaa:	42a2      	cmp	r2, r4
   3bfac:	bf0c      	ite	eq
   3bfae:	600b      	streq	r3, [r1, #0]
   3bfb0:	6053      	strne	r3, [r2, #4]
   3bfb2:	4630      	mov	r0, r6
   3bfb4:	f001 fb90 	bl	3d6d8 <__malloc_unlock>
   3bfb8:	f104 000b 	add.w	r0, r4, #11
   3bfbc:	1d23      	adds	r3, r4, #4
   3bfbe:	f020 0007 	bic.w	r0, r0, #7
   3bfc2:	1ac2      	subs	r2, r0, r3
   3bfc4:	d0cc      	beq.n	3bf60 <_malloc_r+0x20>
   3bfc6:	1a1b      	subs	r3, r3, r0
   3bfc8:	50a3      	str	r3, [r4, r2]
   3bfca:	e7c9      	b.n	3bf60 <_malloc_r+0x20>
   3bfcc:	4622      	mov	r2, r4
   3bfce:	6864      	ldr	r4, [r4, #4]
   3bfd0:	e7cc      	b.n	3bf6c <_malloc_r+0x2c>
   3bfd2:	1cc4      	adds	r4, r0, #3
   3bfd4:	f024 0403 	bic.w	r4, r4, #3
   3bfd8:	42a0      	cmp	r0, r4
   3bfda:	d0e3      	beq.n	3bfa4 <_malloc_r+0x64>
   3bfdc:	1a21      	subs	r1, r4, r0
   3bfde:	4630      	mov	r0, r6
   3bfe0:	f000 fcce 	bl	3c980 <_sbrk_r>
   3bfe4:	3001      	adds	r0, #1
   3bfe6:	d1dd      	bne.n	3bfa4 <_malloc_r+0x64>
   3bfe8:	e7cf      	b.n	3bf8a <_malloc_r+0x4a>
   3bfea:	bf00      	nop
   3bfec:	2002a334 	.word	0x2002a334
   3bff0:	2002a338 	.word	0x2002a338

0003bff4 <_vfiprintf_r>:
   3bff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bff8:	460d      	mov	r5, r1
   3bffa:	b09d      	sub	sp, #116	; 0x74
   3bffc:	4614      	mov	r4, r2
   3bffe:	461e      	mov	r6, r3
   3c000:	4607      	mov	r7, r0
   3c002:	b118      	cbz	r0, 3c00c <_vfiprintf_r+0x18>
   3c004:	6983      	ldr	r3, [r0, #24]
   3c006:	b90b      	cbnz	r3, 3c00c <_vfiprintf_r+0x18>
   3c008:	f001 f86a 	bl	3d0e0 <__sinit>
   3c00c:	4b85      	ldr	r3, [pc, #532]	; (3c224 <_vfiprintf_r+0x230>)
   3c00e:	429d      	cmp	r5, r3
   3c010:	d11b      	bne.n	3c04a <_vfiprintf_r+0x56>
   3c012:	687d      	ldr	r5, [r7, #4]
   3c014:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3c016:	07d9      	lsls	r1, r3, #31
   3c018:	d405      	bmi.n	3c026 <_vfiprintf_r+0x32>
   3c01a:	89ab      	ldrh	r3, [r5, #12]
   3c01c:	059a      	lsls	r2, r3, #22
   3c01e:	d402      	bmi.n	3c026 <_vfiprintf_r+0x32>
   3c020:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3c022:	f005 fad1 	bl	415c8 <__retarget_lock_acquire_recursive>
   3c026:	89ab      	ldrh	r3, [r5, #12]
   3c028:	071b      	lsls	r3, r3, #28
   3c02a:	d501      	bpl.n	3c030 <_vfiprintf_r+0x3c>
   3c02c:	692b      	ldr	r3, [r5, #16]
   3c02e:	b9eb      	cbnz	r3, 3c06c <_vfiprintf_r+0x78>
   3c030:	4629      	mov	r1, r5
   3c032:	4638      	mov	r0, r7
   3c034:	f000 feb0 	bl	3cd98 <__swsetup_r>
   3c038:	b1c0      	cbz	r0, 3c06c <_vfiprintf_r+0x78>
   3c03a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3c03c:	07d8      	lsls	r0, r3, #31
   3c03e:	d50e      	bpl.n	3c05e <_vfiprintf_r+0x6a>
   3c040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c044:	b01d      	add	sp, #116	; 0x74
   3c046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c04a:	4b77      	ldr	r3, [pc, #476]	; (3c228 <_vfiprintf_r+0x234>)
   3c04c:	429d      	cmp	r5, r3
   3c04e:	d101      	bne.n	3c054 <_vfiprintf_r+0x60>
   3c050:	68bd      	ldr	r5, [r7, #8]
   3c052:	e7df      	b.n	3c014 <_vfiprintf_r+0x20>
   3c054:	4b75      	ldr	r3, [pc, #468]	; (3c22c <_vfiprintf_r+0x238>)
   3c056:	429d      	cmp	r5, r3
   3c058:	bf08      	it	eq
   3c05a:	68fd      	ldreq	r5, [r7, #12]
   3c05c:	e7da      	b.n	3c014 <_vfiprintf_r+0x20>
   3c05e:	89ab      	ldrh	r3, [r5, #12]
   3c060:	0599      	lsls	r1, r3, #22
   3c062:	d4ed      	bmi.n	3c040 <_vfiprintf_r+0x4c>
   3c064:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3c066:	f005 fab0 	bl	415ca <__retarget_lock_release_recursive>
   3c06a:	e7e9      	b.n	3c040 <_vfiprintf_r+0x4c>
   3c06c:	2300      	movs	r3, #0
   3c06e:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 3c230 <_vfiprintf_r+0x23c>
   3c072:	f04f 0a01 	mov.w	sl, #1
   3c076:	9603      	str	r6, [sp, #12]
   3c078:	9309      	str	r3, [sp, #36]	; 0x24
   3c07a:	2320      	movs	r3, #32
   3c07c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   3c080:	2330      	movs	r3, #48	; 0x30
   3c082:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   3c086:	4623      	mov	r3, r4
   3c088:	461e      	mov	r6, r3
   3c08a:	f813 2b01 	ldrb.w	r2, [r3], #1
   3c08e:	b10a      	cbz	r2, 3c094 <_vfiprintf_r+0xa0>
   3c090:	2a25      	cmp	r2, #37	; 0x25
   3c092:	d1f9      	bne.n	3c088 <_vfiprintf_r+0x94>
   3c094:	ebb6 0b04 	subs.w	fp, r6, r4
   3c098:	d00b      	beq.n	3c0b2 <_vfiprintf_r+0xbe>
   3c09a:	465b      	mov	r3, fp
   3c09c:	4622      	mov	r2, r4
   3c09e:	4629      	mov	r1, r5
   3c0a0:	4638      	mov	r0, r7
   3c0a2:	f004 fe9c 	bl	40dde <__sfputs_r>
   3c0a6:	3001      	adds	r0, #1
   3c0a8:	f000 80a3 	beq.w	3c1f2 <_vfiprintf_r+0x1fe>
   3c0ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3c0ae:	445b      	add	r3, fp
   3c0b0:	9309      	str	r3, [sp, #36]	; 0x24
   3c0b2:	7833      	ldrb	r3, [r6, #0]
   3c0b4:	2b00      	cmp	r3, #0
   3c0b6:	f000 809c 	beq.w	3c1f2 <_vfiprintf_r+0x1fe>
   3c0ba:	2300      	movs	r3, #0
   3c0bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3c0c0:	3601      	adds	r6, #1
   3c0c2:	9304      	str	r3, [sp, #16]
   3c0c4:	9307      	str	r3, [sp, #28]
   3c0c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   3c0ca:	931a      	str	r3, [sp, #104]	; 0x68
   3c0cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
   3c0d0:	4634      	mov	r4, r6
   3c0d2:	2205      	movs	r2, #5
   3c0d4:	4856      	ldr	r0, [pc, #344]	; (3c230 <_vfiprintf_r+0x23c>)
   3c0d6:	f814 1b01 	ldrb.w	r1, [r4], #1
   3c0da:	f004 fe25 	bl	40d28 <memchr>
   3c0de:	9b04      	ldr	r3, [sp, #16]
   3c0e0:	b9c0      	cbnz	r0, 3c114 <_vfiprintf_r+0x120>
   3c0e2:	06da      	lsls	r2, r3, #27
   3c0e4:	bf44      	itt	mi
   3c0e6:	2220      	movmi	r2, #32
   3c0e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   3c0ec:	0718      	lsls	r0, r3, #28
   3c0ee:	bf44      	itt	mi
   3c0f0:	222b      	movmi	r2, #43	; 0x2b
   3c0f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   3c0f6:	7832      	ldrb	r2, [r6, #0]
   3c0f8:	2a2a      	cmp	r2, #42	; 0x2a
   3c0fa:	d013      	beq.n	3c124 <_vfiprintf_r+0x130>
   3c0fc:	4634      	mov	r4, r6
   3c0fe:	9a07      	ldr	r2, [sp, #28]
   3c100:	2000      	movs	r0, #0
   3c102:	260a      	movs	r6, #10
   3c104:	4621      	mov	r1, r4
   3c106:	f811 3b01 	ldrb.w	r3, [r1], #1
   3c10a:	3b30      	subs	r3, #48	; 0x30
   3c10c:	2b09      	cmp	r3, #9
   3c10e:	d94b      	bls.n	3c1a8 <_vfiprintf_r+0x1b4>
   3c110:	b970      	cbnz	r0, 3c130 <_vfiprintf_r+0x13c>
   3c112:	e014      	b.n	3c13e <_vfiprintf_r+0x14a>
   3c114:	eba0 0009 	sub.w	r0, r0, r9
   3c118:	4626      	mov	r6, r4
   3c11a:	fa0a f000 	lsl.w	r0, sl, r0
   3c11e:	4318      	orrs	r0, r3
   3c120:	9004      	str	r0, [sp, #16]
   3c122:	e7d5      	b.n	3c0d0 <_vfiprintf_r+0xdc>
   3c124:	9a03      	ldr	r2, [sp, #12]
   3c126:	1d11      	adds	r1, r2, #4
   3c128:	6812      	ldr	r2, [r2, #0]
   3c12a:	2a00      	cmp	r2, #0
   3c12c:	9103      	str	r1, [sp, #12]
   3c12e:	db01      	blt.n	3c134 <_vfiprintf_r+0x140>
   3c130:	9207      	str	r2, [sp, #28]
   3c132:	e004      	b.n	3c13e <_vfiprintf_r+0x14a>
   3c134:	4252      	negs	r2, r2
   3c136:	f043 0302 	orr.w	r3, r3, #2
   3c13a:	9207      	str	r2, [sp, #28]
   3c13c:	9304      	str	r3, [sp, #16]
   3c13e:	7823      	ldrb	r3, [r4, #0]
   3c140:	2b2e      	cmp	r3, #46	; 0x2e
   3c142:	d10c      	bne.n	3c15e <_vfiprintf_r+0x16a>
   3c144:	7863      	ldrb	r3, [r4, #1]
   3c146:	2b2a      	cmp	r3, #42	; 0x2a
   3c148:	d133      	bne.n	3c1b2 <_vfiprintf_r+0x1be>
   3c14a:	9b03      	ldr	r3, [sp, #12]
   3c14c:	3402      	adds	r4, #2
   3c14e:	1d1a      	adds	r2, r3, #4
   3c150:	681b      	ldr	r3, [r3, #0]
   3c152:	2b00      	cmp	r3, #0
   3c154:	9203      	str	r2, [sp, #12]
   3c156:	bfb8      	it	lt
   3c158:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   3c15c:	9305      	str	r3, [sp, #20]
   3c15e:	4e35      	ldr	r6, [pc, #212]	; (3c234 <_vfiprintf_r+0x240>)
   3c160:	2203      	movs	r2, #3
   3c162:	7821      	ldrb	r1, [r4, #0]
   3c164:	4630      	mov	r0, r6
   3c166:	f004 fddf 	bl	40d28 <memchr>
   3c16a:	b138      	cbz	r0, 3c17c <_vfiprintf_r+0x188>
   3c16c:	2340      	movs	r3, #64	; 0x40
   3c16e:	1b80      	subs	r0, r0, r6
   3c170:	3401      	adds	r4, #1
   3c172:	fa03 f000 	lsl.w	r0, r3, r0
   3c176:	9b04      	ldr	r3, [sp, #16]
   3c178:	4303      	orrs	r3, r0
   3c17a:	9304      	str	r3, [sp, #16]
   3c17c:	f814 1b01 	ldrb.w	r1, [r4], #1
   3c180:	2206      	movs	r2, #6
   3c182:	482d      	ldr	r0, [pc, #180]	; (3c238 <_vfiprintf_r+0x244>)
   3c184:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   3c188:	f004 fdce 	bl	40d28 <memchr>
   3c18c:	2800      	cmp	r0, #0
   3c18e:	d03f      	beq.n	3c210 <_vfiprintf_r+0x21c>
   3c190:	4b2a      	ldr	r3, [pc, #168]	; (3c23c <_vfiprintf_r+0x248>)
   3c192:	bb13      	cbnz	r3, 3c1da <_vfiprintf_r+0x1e6>
   3c194:	9b03      	ldr	r3, [sp, #12]
   3c196:	3307      	adds	r3, #7
   3c198:	f023 0307 	bic.w	r3, r3, #7
   3c19c:	3308      	adds	r3, #8
   3c19e:	9303      	str	r3, [sp, #12]
   3c1a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3c1a2:	4443      	add	r3, r8
   3c1a4:	9309      	str	r3, [sp, #36]	; 0x24
   3c1a6:	e76e      	b.n	3c086 <_vfiprintf_r+0x92>
   3c1a8:	fb06 3202 	mla	r2, r6, r2, r3
   3c1ac:	2001      	movs	r0, #1
   3c1ae:	460c      	mov	r4, r1
   3c1b0:	e7a8      	b.n	3c104 <_vfiprintf_r+0x110>
   3c1b2:	2300      	movs	r3, #0
   3c1b4:	3401      	adds	r4, #1
   3c1b6:	260a      	movs	r6, #10
   3c1b8:	4619      	mov	r1, r3
   3c1ba:	9305      	str	r3, [sp, #20]
   3c1bc:	4620      	mov	r0, r4
   3c1be:	f810 2b01 	ldrb.w	r2, [r0], #1
   3c1c2:	3a30      	subs	r2, #48	; 0x30
   3c1c4:	2a09      	cmp	r2, #9
   3c1c6:	d903      	bls.n	3c1d0 <_vfiprintf_r+0x1dc>
   3c1c8:	2b00      	cmp	r3, #0
   3c1ca:	d0c8      	beq.n	3c15e <_vfiprintf_r+0x16a>
   3c1cc:	9105      	str	r1, [sp, #20]
   3c1ce:	e7c6      	b.n	3c15e <_vfiprintf_r+0x16a>
   3c1d0:	fb06 2101 	mla	r1, r6, r1, r2
   3c1d4:	2301      	movs	r3, #1
   3c1d6:	4604      	mov	r4, r0
   3c1d8:	e7f0      	b.n	3c1bc <_vfiprintf_r+0x1c8>
   3c1da:	ab03      	add	r3, sp, #12
   3c1dc:	462a      	mov	r2, r5
   3c1de:	a904      	add	r1, sp, #16
   3c1e0:	4638      	mov	r0, r7
   3c1e2:	9300      	str	r3, [sp, #0]
   3c1e4:	4b16      	ldr	r3, [pc, #88]	; (3c240 <_vfiprintf_r+0x24c>)
   3c1e6:	f000 f82d 	bl	3c244 <_printf_float>
   3c1ea:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   3c1ee:	4680      	mov	r8, r0
   3c1f0:	d1d6      	bne.n	3c1a0 <_vfiprintf_r+0x1ac>
   3c1f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3c1f4:	07d9      	lsls	r1, r3, #31
   3c1f6:	d405      	bmi.n	3c204 <_vfiprintf_r+0x210>
   3c1f8:	89ab      	ldrh	r3, [r5, #12]
   3c1fa:	059a      	lsls	r2, r3, #22
   3c1fc:	d402      	bmi.n	3c204 <_vfiprintf_r+0x210>
   3c1fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3c200:	f005 f9e3 	bl	415ca <__retarget_lock_release_recursive>
   3c204:	89ab      	ldrh	r3, [r5, #12]
   3c206:	065b      	lsls	r3, r3, #25
   3c208:	f53f af1a 	bmi.w	3c040 <_vfiprintf_r+0x4c>
   3c20c:	9809      	ldr	r0, [sp, #36]	; 0x24
   3c20e:	e719      	b.n	3c044 <_vfiprintf_r+0x50>
   3c210:	ab03      	add	r3, sp, #12
   3c212:	462a      	mov	r2, r5
   3c214:	a904      	add	r1, sp, #16
   3c216:	4638      	mov	r0, r7
   3c218:	9300      	str	r3, [sp, #0]
   3c21a:	4b09      	ldr	r3, [pc, #36]	; (3c240 <_vfiprintf_r+0x24c>)
   3c21c:	f000 fa3c 	bl	3c698 <_printf_i>
   3c220:	e7e3      	b.n	3c1ea <_vfiprintf_r+0x1f6>
   3c222:	bf00      	nop
   3c224:	00043ff0 	.word	0x00043ff0
   3c228:	00044010 	.word	0x00044010
   3c22c:	00043fd0 	.word	0x00043fd0
   3c230:	000497aa 	.word	0x000497aa
   3c234:	000497b0 	.word	0x000497b0
   3c238:	000497b4 	.word	0x000497b4
   3c23c:	0003c245 	.word	0x0003c245
   3c240:	00040ddf 	.word	0x00040ddf

0003c244 <_printf_float>:
   3c244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c248:	b08d      	sub	sp, #52	; 0x34
   3c24a:	460c      	mov	r4, r1
   3c24c:	4616      	mov	r6, r2
   3c24e:	461f      	mov	r7, r3
   3c250:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   3c254:	4605      	mov	r5, r0
   3c256:	f001 f9e3 	bl	3d620 <_localeconv_r>
   3c25a:	6803      	ldr	r3, [r0, #0]
   3c25c:	4618      	mov	r0, r3
   3c25e:	9306      	str	r3, [sp, #24]
   3c260:	f7dd fe90 	bl	19f84 <strlen>
   3c264:	2300      	movs	r3, #0
   3c266:	9007      	str	r0, [sp, #28]
   3c268:	930a      	str	r3, [sp, #40]	; 0x28
   3c26a:	f8d8 3000 	ldr.w	r3, [r8]
   3c26e:	f894 a018 	ldrb.w	sl, [r4, #24]
   3c272:	3307      	adds	r3, #7
   3c274:	f8d4 b000 	ldr.w	fp, [r4]
   3c278:	f023 0307 	bic.w	r3, r3, #7
   3c27c:	f103 0208 	add.w	r2, r3, #8
   3c280:	f8c8 2000 	str.w	r2, [r8]
   3c284:	e9d3 2300 	ldrd	r2, r3, [r3]
   3c288:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   3c28c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
   3c290:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3c294:	ed8d 7b04 	vstr	d7, [sp, #16]
   3c298:	e9dd 8304 	ldrd	r8, r3, [sp, #16]
   3c29c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
   3c2a0:	4640      	mov	r0, r8
   3c2a2:	4ba6      	ldr	r3, [pc, #664]	; (3c53c <_printf_float+0x2f8>)
   3c2a4:	4649      	mov	r1, r9
   3c2a6:	f7dd fdf7 	bl	19e98 <__aeabi_dcmpun>
   3c2aa:	bb70      	cbnz	r0, 3c30a <_printf_float+0xc6>
   3c2ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3c2b0:	4ba2      	ldr	r3, [pc, #648]	; (3c53c <_printf_float+0x2f8>)
   3c2b2:	4640      	mov	r0, r8
   3c2b4:	4649      	mov	r1, r9
   3c2b6:	f7dc fceb 	bl	18c90 <__aeabi_dcmple>
   3c2ba:	bb30      	cbnz	r0, 3c30a <_printf_float+0xc6>
   3c2bc:	2200      	movs	r2, #0
   3c2be:	2300      	movs	r3, #0
   3c2c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   3c2c4:	f7dc fcda 	bl	18c7c <__aeabi_dcmplt>
   3c2c8:	b110      	cbz	r0, 3c2d0 <_printf_float+0x8c>
   3c2ca:	232d      	movs	r3, #45	; 0x2d
   3c2cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3c2d0:	4a9b      	ldr	r2, [pc, #620]	; (3c540 <_printf_float+0x2fc>)
   3c2d2:	4b9c      	ldr	r3, [pc, #624]	; (3c544 <_printf_float+0x300>)
   3c2d4:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   3c2d8:	bf94      	ite	ls
   3c2da:	4690      	movls	r8, r2
   3c2dc:	4698      	movhi	r8, r3
   3c2de:	f04f 0900 	mov.w	r9, #0
   3c2e2:	2303      	movs	r3, #3
   3c2e4:	f02b 0204 	bic.w	r2, fp, #4
   3c2e8:	6123      	str	r3, [r4, #16]
   3c2ea:	6022      	str	r2, [r4, #0]
   3c2ec:	9700      	str	r7, [sp, #0]
   3c2ee:	4633      	mov	r3, r6
   3c2f0:	aa0b      	add	r2, sp, #44	; 0x2c
   3c2f2:	4621      	mov	r1, r4
   3c2f4:	4628      	mov	r0, r5
   3c2f6:	f004 fe14 	bl	40f22 <_printf_common>
   3c2fa:	3001      	adds	r0, #1
   3c2fc:	f040 808c 	bne.w	3c418 <_printf_float+0x1d4>
   3c300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c304:	b00d      	add	sp, #52	; 0x34
   3c306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c30a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   3c30e:	4610      	mov	r0, r2
   3c310:	4619      	mov	r1, r3
   3c312:	f7dd fdc1 	bl	19e98 <__aeabi_dcmpun>
   3c316:	b140      	cbz	r0, 3c32a <_printf_float+0xe6>
   3c318:	9b05      	ldr	r3, [sp, #20]
   3c31a:	4a8b      	ldr	r2, [pc, #556]	; (3c548 <_printf_float+0x304>)
   3c31c:	2b00      	cmp	r3, #0
   3c31e:	bfbc      	itt	lt
   3c320:	232d      	movlt	r3, #45	; 0x2d
   3c322:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   3c326:	4b89      	ldr	r3, [pc, #548]	; (3c54c <_printf_float+0x308>)
   3c328:	e7d4      	b.n	3c2d4 <_printf_float+0x90>
   3c32a:	6863      	ldr	r3, [r4, #4]
   3c32c:	f00a 09df 	and.w	r9, sl, #223	; 0xdf
   3c330:	1c5a      	adds	r2, r3, #1
   3c332:	d13e      	bne.n	3c3b2 <_printf_float+0x16e>
   3c334:	2306      	movs	r3, #6
   3c336:	6063      	str	r3, [r4, #4]
   3c338:	2300      	movs	r3, #0
   3c33a:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
   3c33e:	6861      	ldr	r1, [r4, #4]
   3c340:	4628      	mov	r0, r5
   3c342:	9303      	str	r3, [sp, #12]
   3c344:	ab0a      	add	r3, sp, #40	; 0x28
   3c346:	6022      	str	r2, [r4, #0]
   3c348:	e9cd a301 	strd	sl, r3, [sp, #4]
   3c34c:	ab09      	add	r3, sp, #36	; 0x24
   3c34e:	ed9d 0b04 	vldr	d0, [sp, #16]
   3c352:	9300      	str	r3, [sp, #0]
   3c354:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   3c358:	f004 fd53 	bl	40e02 <__cvt>
   3c35c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   3c360:	4680      	mov	r8, r0
   3c362:	9909      	ldr	r1, [sp, #36]	; 0x24
   3c364:	d108      	bne.n	3c378 <_printf_float+0x134>
   3c366:	1cc8      	adds	r0, r1, #3
   3c368:	db02      	blt.n	3c370 <_printf_float+0x12c>
   3c36a:	6863      	ldr	r3, [r4, #4]
   3c36c:	4299      	cmp	r1, r3
   3c36e:	dd41      	ble.n	3c3f4 <_printf_float+0x1b0>
   3c370:	f1aa 0a02 	sub.w	sl, sl, #2
   3c374:	fa5f fa8a 	uxtb.w	sl, sl
   3c378:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   3c37c:	d820      	bhi.n	3c3c0 <_printf_float+0x17c>
   3c37e:	3901      	subs	r1, #1
   3c380:	4652      	mov	r2, sl
   3c382:	f104 0050 	add.w	r0, r4, #80	; 0x50
   3c386:	9109      	str	r1, [sp, #36]	; 0x24
   3c388:	f004 fd98 	bl	40ebc <__exponent>
   3c38c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3c38e:	4681      	mov	r9, r0
   3c390:	1813      	adds	r3, r2, r0
   3c392:	2a01      	cmp	r2, #1
   3c394:	6123      	str	r3, [r4, #16]
   3c396:	dc02      	bgt.n	3c39e <_printf_float+0x15a>
   3c398:	6822      	ldr	r2, [r4, #0]
   3c39a:	07d2      	lsls	r2, r2, #31
   3c39c:	d501      	bpl.n	3c3a2 <_printf_float+0x15e>
   3c39e:	3301      	adds	r3, #1
   3c3a0:	6123      	str	r3, [r4, #16]
   3c3a2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   3c3a6:	2b00      	cmp	r3, #0
   3c3a8:	d0a0      	beq.n	3c2ec <_printf_float+0xa8>
   3c3aa:	232d      	movs	r3, #45	; 0x2d
   3c3ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3c3b0:	e79c      	b.n	3c2ec <_printf_float+0xa8>
   3c3b2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   3c3b6:	d1bf      	bne.n	3c338 <_printf_float+0xf4>
   3c3b8:	2b00      	cmp	r3, #0
   3c3ba:	d1bd      	bne.n	3c338 <_printf_float+0xf4>
   3c3bc:	2301      	movs	r3, #1
   3c3be:	e7ba      	b.n	3c336 <_printf_float+0xf2>
   3c3c0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   3c3c4:	d118      	bne.n	3c3f8 <_printf_float+0x1b4>
   3c3c6:	2900      	cmp	r1, #0
   3c3c8:	6863      	ldr	r3, [r4, #4]
   3c3ca:	dd0b      	ble.n	3c3e4 <_printf_float+0x1a0>
   3c3cc:	6121      	str	r1, [r4, #16]
   3c3ce:	b913      	cbnz	r3, 3c3d6 <_printf_float+0x192>
   3c3d0:	6822      	ldr	r2, [r4, #0]
   3c3d2:	07d0      	lsls	r0, r2, #31
   3c3d4:	d502      	bpl.n	3c3dc <_printf_float+0x198>
   3c3d6:	3301      	adds	r3, #1
   3c3d8:	440b      	add	r3, r1
   3c3da:	6123      	str	r3, [r4, #16]
   3c3dc:	65a1      	str	r1, [r4, #88]	; 0x58
   3c3de:	f04f 0900 	mov.w	r9, #0
   3c3e2:	e7de      	b.n	3c3a2 <_printf_float+0x15e>
   3c3e4:	b913      	cbnz	r3, 3c3ec <_printf_float+0x1a8>
   3c3e6:	6822      	ldr	r2, [r4, #0]
   3c3e8:	07d2      	lsls	r2, r2, #31
   3c3ea:	d501      	bpl.n	3c3f0 <_printf_float+0x1ac>
   3c3ec:	3302      	adds	r3, #2
   3c3ee:	e7f4      	b.n	3c3da <_printf_float+0x196>
   3c3f0:	2301      	movs	r3, #1
   3c3f2:	e7f2      	b.n	3c3da <_printf_float+0x196>
   3c3f4:	f04f 0a67 	mov.w	sl, #103	; 0x67
   3c3f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3c3fa:	4299      	cmp	r1, r3
   3c3fc:	db05      	blt.n	3c40a <_printf_float+0x1c6>
   3c3fe:	6823      	ldr	r3, [r4, #0]
   3c400:	6121      	str	r1, [r4, #16]
   3c402:	07d8      	lsls	r0, r3, #31
   3c404:	d5ea      	bpl.n	3c3dc <_printf_float+0x198>
   3c406:	1c4b      	adds	r3, r1, #1
   3c408:	e7e7      	b.n	3c3da <_printf_float+0x196>
   3c40a:	2900      	cmp	r1, #0
   3c40c:	bfd4      	ite	le
   3c40e:	f1c1 0202 	rsble	r2, r1, #2
   3c412:	2201      	movgt	r2, #1
   3c414:	4413      	add	r3, r2
   3c416:	e7e0      	b.n	3c3da <_printf_float+0x196>
   3c418:	6823      	ldr	r3, [r4, #0]
   3c41a:	055a      	lsls	r2, r3, #21
   3c41c:	d407      	bmi.n	3c42e <_printf_float+0x1ea>
   3c41e:	6923      	ldr	r3, [r4, #16]
   3c420:	4642      	mov	r2, r8
   3c422:	4631      	mov	r1, r6
   3c424:	4628      	mov	r0, r5
   3c426:	47b8      	blx	r7
   3c428:	3001      	adds	r0, #1
   3c42a:	d12b      	bne.n	3c484 <_printf_float+0x240>
   3c42c:	e768      	b.n	3c300 <_printf_float+0xbc>
   3c42e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   3c432:	f240 80dc 	bls.w	3c5ee <_printf_float+0x3aa>
   3c436:	2200      	movs	r2, #0
   3c438:	2300      	movs	r3, #0
   3c43a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3c43e:	f7dc fc13 	bl	18c68 <__aeabi_dcmpeq>
   3c442:	2800      	cmp	r0, #0
   3c444:	d033      	beq.n	3c4ae <_printf_float+0x26a>
   3c446:	2301      	movs	r3, #1
   3c448:	4a41      	ldr	r2, [pc, #260]	; (3c550 <_printf_float+0x30c>)
   3c44a:	4631      	mov	r1, r6
   3c44c:	4628      	mov	r0, r5
   3c44e:	47b8      	blx	r7
   3c450:	3001      	adds	r0, #1
   3c452:	f43f af55 	beq.w	3c300 <_printf_float+0xbc>
   3c456:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3c45a:	429a      	cmp	r2, r3
   3c45c:	db02      	blt.n	3c464 <_printf_float+0x220>
   3c45e:	6823      	ldr	r3, [r4, #0]
   3c460:	07d8      	lsls	r0, r3, #31
   3c462:	d50f      	bpl.n	3c484 <_printf_float+0x240>
   3c464:	4631      	mov	r1, r6
   3c466:	4628      	mov	r0, r5
   3c468:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3c46c:	47b8      	blx	r7
   3c46e:	3001      	adds	r0, #1
   3c470:	f43f af46 	beq.w	3c300 <_printf_float+0xbc>
   3c474:	f04f 0800 	mov.w	r8, #0
   3c478:	f104 091a 	add.w	r9, r4, #26
   3c47c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3c47e:	3b01      	subs	r3, #1
   3c480:	4543      	cmp	r3, r8
   3c482:	dc09      	bgt.n	3c498 <_printf_float+0x254>
   3c484:	6823      	ldr	r3, [r4, #0]
   3c486:	079b      	lsls	r3, r3, #30
   3c488:	f100 8101 	bmi.w	3c68e <_printf_float+0x44a>
   3c48c:	68e0      	ldr	r0, [r4, #12]
   3c48e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3c490:	4298      	cmp	r0, r3
   3c492:	bfb8      	it	lt
   3c494:	4618      	movlt	r0, r3
   3c496:	e735      	b.n	3c304 <_printf_float+0xc0>
   3c498:	2301      	movs	r3, #1
   3c49a:	464a      	mov	r2, r9
   3c49c:	4631      	mov	r1, r6
   3c49e:	4628      	mov	r0, r5
   3c4a0:	47b8      	blx	r7
   3c4a2:	3001      	adds	r0, #1
   3c4a4:	f43f af2c 	beq.w	3c300 <_printf_float+0xbc>
   3c4a8:	f108 0801 	add.w	r8, r8, #1
   3c4ac:	e7e6      	b.n	3c47c <_printf_float+0x238>
   3c4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3c4b0:	2b00      	cmp	r3, #0
   3c4b2:	dc2b      	bgt.n	3c50c <_printf_float+0x2c8>
   3c4b4:	2301      	movs	r3, #1
   3c4b6:	4a26      	ldr	r2, [pc, #152]	; (3c550 <_printf_float+0x30c>)
   3c4b8:	4631      	mov	r1, r6
   3c4ba:	4628      	mov	r0, r5
   3c4bc:	47b8      	blx	r7
   3c4be:	3001      	adds	r0, #1
   3c4c0:	f43f af1e 	beq.w	3c300 <_printf_float+0xbc>
   3c4c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3c4c8:	4313      	orrs	r3, r2
   3c4ca:	d102      	bne.n	3c4d2 <_printf_float+0x28e>
   3c4cc:	6823      	ldr	r3, [r4, #0]
   3c4ce:	07d9      	lsls	r1, r3, #31
   3c4d0:	d5d8      	bpl.n	3c484 <_printf_float+0x240>
   3c4d2:	4631      	mov	r1, r6
   3c4d4:	4628      	mov	r0, r5
   3c4d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3c4da:	47b8      	blx	r7
   3c4dc:	3001      	adds	r0, #1
   3c4de:	f43f af0f 	beq.w	3c300 <_printf_float+0xbc>
   3c4e2:	f04f 0900 	mov.w	r9, #0
   3c4e6:	f104 0a1a 	add.w	sl, r4, #26
   3c4ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3c4ec:	425b      	negs	r3, r3
   3c4ee:	454b      	cmp	r3, r9
   3c4f0:	dc01      	bgt.n	3c4f6 <_printf_float+0x2b2>
   3c4f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3c4f4:	e794      	b.n	3c420 <_printf_float+0x1dc>
   3c4f6:	2301      	movs	r3, #1
   3c4f8:	4652      	mov	r2, sl
   3c4fa:	4631      	mov	r1, r6
   3c4fc:	4628      	mov	r0, r5
   3c4fe:	47b8      	blx	r7
   3c500:	3001      	adds	r0, #1
   3c502:	f43f aefd 	beq.w	3c300 <_printf_float+0xbc>
   3c506:	f109 0901 	add.w	r9, r9, #1
   3c50a:	e7ee      	b.n	3c4ea <_printf_float+0x2a6>
   3c50c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3c50e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   3c510:	429a      	cmp	r2, r3
   3c512:	bfa8      	it	ge
   3c514:	461a      	movge	r2, r3
   3c516:	2a00      	cmp	r2, #0
   3c518:	4691      	mov	r9, r2
   3c51a:	dd07      	ble.n	3c52c <_printf_float+0x2e8>
   3c51c:	4613      	mov	r3, r2
   3c51e:	4631      	mov	r1, r6
   3c520:	4642      	mov	r2, r8
   3c522:	4628      	mov	r0, r5
   3c524:	47b8      	blx	r7
   3c526:	3001      	adds	r0, #1
   3c528:	f43f aeea 	beq.w	3c300 <_printf_float+0xbc>
   3c52c:	f104 031a 	add.w	r3, r4, #26
   3c530:	f04f 0b00 	mov.w	fp, #0
   3c534:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3c538:	9304      	str	r3, [sp, #16]
   3c53a:	e015      	b.n	3c568 <_printf_float+0x324>
   3c53c:	7fefffff 	.word	0x7fefffff
   3c540:	000497bb 	.word	0x000497bb
   3c544:	000450d0 	.word	0x000450d0
   3c548:	000497bf 	.word	0x000497bf
   3c54c:	000497c3 	.word	0x000497c3
   3c550:	00049224 	.word	0x00049224
   3c554:	2301      	movs	r3, #1
   3c556:	9a04      	ldr	r2, [sp, #16]
   3c558:	4631      	mov	r1, r6
   3c55a:	4628      	mov	r0, r5
   3c55c:	47b8      	blx	r7
   3c55e:	3001      	adds	r0, #1
   3c560:	f43f aece 	beq.w	3c300 <_printf_float+0xbc>
   3c564:	f10b 0b01 	add.w	fp, fp, #1
   3c568:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   3c56c:	ebaa 0309 	sub.w	r3, sl, r9
   3c570:	455b      	cmp	r3, fp
   3c572:	dcef      	bgt.n	3c554 <_printf_float+0x310>
   3c574:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3c578:	429a      	cmp	r2, r3
   3c57a:	db1b      	blt.n	3c5b4 <_printf_float+0x370>
   3c57c:	6823      	ldr	r3, [r4, #0]
   3c57e:	07da      	lsls	r2, r3, #31
   3c580:	d418      	bmi.n	3c5b4 <_printf_float+0x370>
   3c582:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3c586:	4592      	cmp	sl, r2
   3c588:	db1c      	blt.n	3c5c4 <_printf_float+0x380>
   3c58a:	eba3 090a 	sub.w	r9, r3, sl
   3c58e:	f1b9 0f00 	cmp.w	r9, #0
   3c592:	dd08      	ble.n	3c5a6 <_printf_float+0x362>
   3c594:	464b      	mov	r3, r9
   3c596:	eb08 020a 	add.w	r2, r8, sl
   3c59a:	4631      	mov	r1, r6
   3c59c:	4628      	mov	r0, r5
   3c59e:	47b8      	blx	r7
   3c5a0:	3001      	adds	r0, #1
   3c5a2:	f43f aead 	beq.w	3c300 <_printf_float+0xbc>
   3c5a6:	f04f 0800 	mov.w	r8, #0
   3c5aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3c5ae:	f104 0a1a 	add.w	sl, r4, #26
   3c5b2:	e014      	b.n	3c5de <_printf_float+0x39a>
   3c5b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3c5b8:	4631      	mov	r1, r6
   3c5ba:	4628      	mov	r0, r5
   3c5bc:	47b8      	blx	r7
   3c5be:	3001      	adds	r0, #1
   3c5c0:	d1df      	bne.n	3c582 <_printf_float+0x33e>
   3c5c2:	e69d      	b.n	3c300 <_printf_float+0xbc>
   3c5c4:	eba3 0902 	sub.w	r9, r3, r2
   3c5c8:	e7e1      	b.n	3c58e <_printf_float+0x34a>
   3c5ca:	2301      	movs	r3, #1
   3c5cc:	4652      	mov	r2, sl
   3c5ce:	4631      	mov	r1, r6
   3c5d0:	4628      	mov	r0, r5
   3c5d2:	47b8      	blx	r7
   3c5d4:	3001      	adds	r0, #1
   3c5d6:	f43f ae93 	beq.w	3c300 <_printf_float+0xbc>
   3c5da:	f108 0801 	add.w	r8, r8, #1
   3c5de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3c5e2:	1a9b      	subs	r3, r3, r2
   3c5e4:	eba3 0309 	sub.w	r3, r3, r9
   3c5e8:	4543      	cmp	r3, r8
   3c5ea:	dcee      	bgt.n	3c5ca <_printf_float+0x386>
   3c5ec:	e74a      	b.n	3c484 <_printf_float+0x240>
   3c5ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3c5f0:	2a01      	cmp	r2, #1
   3c5f2:	dc01      	bgt.n	3c5f8 <_printf_float+0x3b4>
   3c5f4:	07db      	lsls	r3, r3, #31
   3c5f6:	d537      	bpl.n	3c668 <_printf_float+0x424>
   3c5f8:	2301      	movs	r3, #1
   3c5fa:	4642      	mov	r2, r8
   3c5fc:	4631      	mov	r1, r6
   3c5fe:	4628      	mov	r0, r5
   3c600:	47b8      	blx	r7
   3c602:	3001      	adds	r0, #1
   3c604:	f43f ae7c 	beq.w	3c300 <_printf_float+0xbc>
   3c608:	4631      	mov	r1, r6
   3c60a:	4628      	mov	r0, r5
   3c60c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3c610:	47b8      	blx	r7
   3c612:	3001      	adds	r0, #1
   3c614:	f43f ae74 	beq.w	3c300 <_printf_float+0xbc>
   3c618:	2200      	movs	r2, #0
   3c61a:	2300      	movs	r3, #0
   3c61c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3c620:	f7dc fb22 	bl	18c68 <__aeabi_dcmpeq>
   3c624:	b9d8      	cbnz	r0, 3c65e <_printf_float+0x41a>
   3c626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3c628:	f108 0201 	add.w	r2, r8, #1
   3c62c:	3b01      	subs	r3, #1
   3c62e:	4631      	mov	r1, r6
   3c630:	4628      	mov	r0, r5
   3c632:	47b8      	blx	r7
   3c634:	3001      	adds	r0, #1
   3c636:	d10e      	bne.n	3c656 <_printf_float+0x412>
   3c638:	e662      	b.n	3c300 <_printf_float+0xbc>
   3c63a:	2301      	movs	r3, #1
   3c63c:	4652      	mov	r2, sl
   3c63e:	4631      	mov	r1, r6
   3c640:	4628      	mov	r0, r5
   3c642:	47b8      	blx	r7
   3c644:	3001      	adds	r0, #1
   3c646:	f43f ae5b 	beq.w	3c300 <_printf_float+0xbc>
   3c64a:	f108 0801 	add.w	r8, r8, #1
   3c64e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3c650:	3b01      	subs	r3, #1
   3c652:	4543      	cmp	r3, r8
   3c654:	dcf1      	bgt.n	3c63a <_printf_float+0x3f6>
   3c656:	464b      	mov	r3, r9
   3c658:	f104 0250 	add.w	r2, r4, #80	; 0x50
   3c65c:	e6e1      	b.n	3c422 <_printf_float+0x1de>
   3c65e:	f04f 0800 	mov.w	r8, #0
   3c662:	f104 0a1a 	add.w	sl, r4, #26
   3c666:	e7f2      	b.n	3c64e <_printf_float+0x40a>
   3c668:	2301      	movs	r3, #1
   3c66a:	4642      	mov	r2, r8
   3c66c:	e7df      	b.n	3c62e <_printf_float+0x3ea>
   3c66e:	2301      	movs	r3, #1
   3c670:	464a      	mov	r2, r9
   3c672:	4631      	mov	r1, r6
   3c674:	4628      	mov	r0, r5
   3c676:	47b8      	blx	r7
   3c678:	3001      	adds	r0, #1
   3c67a:	f43f ae41 	beq.w	3c300 <_printf_float+0xbc>
   3c67e:	f108 0801 	add.w	r8, r8, #1
   3c682:	68e3      	ldr	r3, [r4, #12]
   3c684:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   3c686:	1a9b      	subs	r3, r3, r2
   3c688:	4543      	cmp	r3, r8
   3c68a:	dcf0      	bgt.n	3c66e <_printf_float+0x42a>
   3c68c:	e6fe      	b.n	3c48c <_printf_float+0x248>
   3c68e:	f04f 0800 	mov.w	r8, #0
   3c692:	f104 0919 	add.w	r9, r4, #25
   3c696:	e7f4      	b.n	3c682 <_printf_float+0x43e>

0003c698 <_printf_i>:
   3c698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3c69c:	4606      	mov	r6, r0
   3c69e:	460c      	mov	r4, r1
   3c6a0:	f101 0043 	add.w	r0, r1, #67	; 0x43
   3c6a4:	7e09      	ldrb	r1, [r1, #24]
   3c6a6:	b085      	sub	sp, #20
   3c6a8:	4698      	mov	r8, r3
   3c6aa:	296e      	cmp	r1, #110	; 0x6e
   3c6ac:	4617      	mov	r7, r2
   3c6ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   3c6b0:	f000 80ba 	beq.w	3c828 <_printf_i+0x190>
   3c6b4:	d824      	bhi.n	3c700 <_printf_i+0x68>
   3c6b6:	2963      	cmp	r1, #99	; 0x63
   3c6b8:	d039      	beq.n	3c72e <_printf_i+0x96>
   3c6ba:	d80a      	bhi.n	3c6d2 <_printf_i+0x3a>
   3c6bc:	2900      	cmp	r1, #0
   3c6be:	f000 80c3 	beq.w	3c848 <_printf_i+0x1b0>
   3c6c2:	2958      	cmp	r1, #88	; 0x58
   3c6c4:	f000 8091 	beq.w	3c7ea <_printf_i+0x152>
   3c6c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
   3c6cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
   3c6d0:	e035      	b.n	3c73e <_printf_i+0xa6>
   3c6d2:	2964      	cmp	r1, #100	; 0x64
   3c6d4:	d001      	beq.n	3c6da <_printf_i+0x42>
   3c6d6:	2969      	cmp	r1, #105	; 0x69
   3c6d8:	d1f6      	bne.n	3c6c8 <_printf_i+0x30>
   3c6da:	6825      	ldr	r5, [r4, #0]
   3c6dc:	681a      	ldr	r2, [r3, #0]
   3c6de:	f015 0f80 	tst.w	r5, #128	; 0x80
   3c6e2:	f102 0104 	add.w	r1, r2, #4
   3c6e6:	d02c      	beq.n	3c742 <_printf_i+0xaa>
   3c6e8:	6812      	ldr	r2, [r2, #0]
   3c6ea:	6019      	str	r1, [r3, #0]
   3c6ec:	2a00      	cmp	r2, #0
   3c6ee:	da03      	bge.n	3c6f8 <_printf_i+0x60>
   3c6f0:	232d      	movs	r3, #45	; 0x2d
   3c6f2:	4252      	negs	r2, r2
   3c6f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3c6f8:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 3c8b8 <_printf_i+0x220>
   3c6fc:	230a      	movs	r3, #10
   3c6fe:	e03f      	b.n	3c780 <_printf_i+0xe8>
   3c700:	2973      	cmp	r1, #115	; 0x73
   3c702:	f000 80a5 	beq.w	3c850 <_printf_i+0x1b8>
   3c706:	d808      	bhi.n	3c71a <_printf_i+0x82>
   3c708:	296f      	cmp	r1, #111	; 0x6f
   3c70a:	d021      	beq.n	3c750 <_printf_i+0xb8>
   3c70c:	2970      	cmp	r1, #112	; 0x70
   3c70e:	d1db      	bne.n	3c6c8 <_printf_i+0x30>
   3c710:	6822      	ldr	r2, [r4, #0]
   3c712:	f042 0220 	orr.w	r2, r2, #32
   3c716:	6022      	str	r2, [r4, #0]
   3c718:	e003      	b.n	3c722 <_printf_i+0x8a>
   3c71a:	2975      	cmp	r1, #117	; 0x75
   3c71c:	d018      	beq.n	3c750 <_printf_i+0xb8>
   3c71e:	2978      	cmp	r1, #120	; 0x78
   3c720:	d1d2      	bne.n	3c6c8 <_printf_i+0x30>
   3c722:	2278      	movs	r2, #120	; 0x78
   3c724:	f8df c194 	ldr.w	ip, [pc, #404]	; 3c8bc <_printf_i+0x224>
   3c728:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
   3c72c:	e061      	b.n	3c7f2 <_printf_i+0x15a>
   3c72e:	681a      	ldr	r2, [r3, #0]
   3c730:	f104 0542 	add.w	r5, r4, #66	; 0x42
   3c734:	1d11      	adds	r1, r2, #4
   3c736:	6019      	str	r1, [r3, #0]
   3c738:	6813      	ldr	r3, [r2, #0]
   3c73a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   3c73e:	2301      	movs	r3, #1
   3c740:	e093      	b.n	3c86a <_printf_i+0x1d2>
   3c742:	6812      	ldr	r2, [r2, #0]
   3c744:	f015 0f40 	tst.w	r5, #64	; 0x40
   3c748:	6019      	str	r1, [r3, #0]
   3c74a:	bf18      	it	ne
   3c74c:	b212      	sxthne	r2, r2
   3c74e:	e7cd      	b.n	3c6ec <_printf_i+0x54>
   3c750:	f8d4 c000 	ldr.w	ip, [r4]
   3c754:	681a      	ldr	r2, [r3, #0]
   3c756:	f01c 0f80 	tst.w	ip, #128	; 0x80
   3c75a:	f102 0504 	add.w	r5, r2, #4
   3c75e:	601d      	str	r5, [r3, #0]
   3c760:	d001      	beq.n	3c766 <_printf_i+0xce>
   3c762:	6812      	ldr	r2, [r2, #0]
   3c764:	e003      	b.n	3c76e <_printf_i+0xd6>
   3c766:	f01c 0f40 	tst.w	ip, #64	; 0x40
   3c76a:	d0fa      	beq.n	3c762 <_printf_i+0xca>
   3c76c:	8812      	ldrh	r2, [r2, #0]
   3c76e:	296f      	cmp	r1, #111	; 0x6f
   3c770:	f8df c144 	ldr.w	ip, [pc, #324]	; 3c8b8 <_printf_i+0x220>
   3c774:	bf0c      	ite	eq
   3c776:	2308      	moveq	r3, #8
   3c778:	230a      	movne	r3, #10
   3c77a:	2100      	movs	r1, #0
   3c77c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   3c780:	6865      	ldr	r5, [r4, #4]
   3c782:	2d00      	cmp	r5, #0
   3c784:	60a5      	str	r5, [r4, #8]
   3c786:	bfa2      	ittt	ge
   3c788:	6821      	ldrge	r1, [r4, #0]
   3c78a:	f021 0104 	bicge.w	r1, r1, #4
   3c78e:	6021      	strge	r1, [r4, #0]
   3c790:	b90a      	cbnz	r2, 3c796 <_printf_i+0xfe>
   3c792:	2d00      	cmp	r5, #0
   3c794:	d046      	beq.n	3c824 <_printf_i+0x18c>
   3c796:	4605      	mov	r5, r0
   3c798:	4293      	cmp	r3, r2
   3c79a:	fbb2 f1f3 	udiv	r1, r2, r3
   3c79e:	fb03 2e11 	mls	lr, r3, r1, r2
   3c7a2:	f81c e00e 	ldrb.w	lr, [ip, lr]
   3c7a6:	f805 ed01 	strb.w	lr, [r5, #-1]!
   3c7aa:	d939      	bls.n	3c820 <_printf_i+0x188>
   3c7ac:	2b08      	cmp	r3, #8
   3c7ae:	d10b      	bne.n	3c7c8 <_printf_i+0x130>
   3c7b0:	6823      	ldr	r3, [r4, #0]
   3c7b2:	07da      	lsls	r2, r3, #31
   3c7b4:	d508      	bpl.n	3c7c8 <_printf_i+0x130>
   3c7b6:	6923      	ldr	r3, [r4, #16]
   3c7b8:	6862      	ldr	r2, [r4, #4]
   3c7ba:	429a      	cmp	r2, r3
   3c7bc:	bfde      	ittt	le
   3c7be:	2330      	movle	r3, #48	; 0x30
   3c7c0:	f805 3c01 	strble.w	r3, [r5, #-1]
   3c7c4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
   3c7c8:	1b40      	subs	r0, r0, r5
   3c7ca:	6120      	str	r0, [r4, #16]
   3c7cc:	f8cd 8000 	str.w	r8, [sp]
   3c7d0:	463b      	mov	r3, r7
   3c7d2:	aa03      	add	r2, sp, #12
   3c7d4:	4621      	mov	r1, r4
   3c7d6:	4630      	mov	r0, r6
   3c7d8:	f004 fba3 	bl	40f22 <_printf_common>
   3c7dc:	3001      	adds	r0, #1
   3c7de:	d149      	bne.n	3c874 <_printf_i+0x1dc>
   3c7e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c7e4:	b005      	add	sp, #20
   3c7e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3c7ea:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 3c8b8 <_printf_i+0x220>
   3c7ee:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
   3c7f2:	681d      	ldr	r5, [r3, #0]
   3c7f4:	6821      	ldr	r1, [r4, #0]
   3c7f6:	f855 2b04 	ldr.w	r2, [r5], #4
   3c7fa:	601d      	str	r5, [r3, #0]
   3c7fc:	060d      	lsls	r5, r1, #24
   3c7fe:	d50b      	bpl.n	3c818 <_printf_i+0x180>
   3c800:	07cd      	lsls	r5, r1, #31
   3c802:	bf44      	itt	mi
   3c804:	f041 0120 	orrmi.w	r1, r1, #32
   3c808:	6021      	strmi	r1, [r4, #0]
   3c80a:	b91a      	cbnz	r2, 3c814 <_printf_i+0x17c>
   3c80c:	6823      	ldr	r3, [r4, #0]
   3c80e:	f023 0320 	bic.w	r3, r3, #32
   3c812:	6023      	str	r3, [r4, #0]
   3c814:	2310      	movs	r3, #16
   3c816:	e7b0      	b.n	3c77a <_printf_i+0xe2>
   3c818:	064b      	lsls	r3, r1, #25
   3c81a:	bf48      	it	mi
   3c81c:	b292      	uxthmi	r2, r2
   3c81e:	e7ef      	b.n	3c800 <_printf_i+0x168>
   3c820:	460a      	mov	r2, r1
   3c822:	e7b9      	b.n	3c798 <_printf_i+0x100>
   3c824:	4605      	mov	r5, r0
   3c826:	e7c1      	b.n	3c7ac <_printf_i+0x114>
   3c828:	681a      	ldr	r2, [r3, #0]
   3c82a:	f8d4 c000 	ldr.w	ip, [r4]
   3c82e:	1d15      	adds	r5, r2, #4
   3c830:	6961      	ldr	r1, [r4, #20]
   3c832:	f01c 0f80 	tst.w	ip, #128	; 0x80
   3c836:	601d      	str	r5, [r3, #0]
   3c838:	6813      	ldr	r3, [r2, #0]
   3c83a:	d001      	beq.n	3c840 <_printf_i+0x1a8>
   3c83c:	6019      	str	r1, [r3, #0]
   3c83e:	e003      	b.n	3c848 <_printf_i+0x1b0>
   3c840:	f01c 0f40 	tst.w	ip, #64	; 0x40
   3c844:	d0fa      	beq.n	3c83c <_printf_i+0x1a4>
   3c846:	8019      	strh	r1, [r3, #0]
   3c848:	2300      	movs	r3, #0
   3c84a:	4605      	mov	r5, r0
   3c84c:	6123      	str	r3, [r4, #16]
   3c84e:	e7bd      	b.n	3c7cc <_printf_i+0x134>
   3c850:	681a      	ldr	r2, [r3, #0]
   3c852:	1d11      	adds	r1, r2, #4
   3c854:	6019      	str	r1, [r3, #0]
   3c856:	2100      	movs	r1, #0
   3c858:	6815      	ldr	r5, [r2, #0]
   3c85a:	6862      	ldr	r2, [r4, #4]
   3c85c:	4628      	mov	r0, r5
   3c85e:	f004 fa63 	bl	40d28 <memchr>
   3c862:	b108      	cbz	r0, 3c868 <_printf_i+0x1d0>
   3c864:	1b40      	subs	r0, r0, r5
   3c866:	6060      	str	r0, [r4, #4]
   3c868:	6863      	ldr	r3, [r4, #4]
   3c86a:	6123      	str	r3, [r4, #16]
   3c86c:	2300      	movs	r3, #0
   3c86e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3c872:	e7ab      	b.n	3c7cc <_printf_i+0x134>
   3c874:	6923      	ldr	r3, [r4, #16]
   3c876:	462a      	mov	r2, r5
   3c878:	4639      	mov	r1, r7
   3c87a:	4630      	mov	r0, r6
   3c87c:	47c0      	blx	r8
   3c87e:	3001      	adds	r0, #1
   3c880:	d0ae      	beq.n	3c7e0 <_printf_i+0x148>
   3c882:	6823      	ldr	r3, [r4, #0]
   3c884:	079b      	lsls	r3, r3, #30
   3c886:	d413      	bmi.n	3c8b0 <_printf_i+0x218>
   3c888:	68e0      	ldr	r0, [r4, #12]
   3c88a:	9b03      	ldr	r3, [sp, #12]
   3c88c:	4298      	cmp	r0, r3
   3c88e:	bfb8      	it	lt
   3c890:	4618      	movlt	r0, r3
   3c892:	e7a7      	b.n	3c7e4 <_printf_i+0x14c>
   3c894:	2301      	movs	r3, #1
   3c896:	464a      	mov	r2, r9
   3c898:	4639      	mov	r1, r7
   3c89a:	4630      	mov	r0, r6
   3c89c:	47c0      	blx	r8
   3c89e:	3001      	adds	r0, #1
   3c8a0:	d09e      	beq.n	3c7e0 <_printf_i+0x148>
   3c8a2:	3501      	adds	r5, #1
   3c8a4:	68e3      	ldr	r3, [r4, #12]
   3c8a6:	9a03      	ldr	r2, [sp, #12]
   3c8a8:	1a9b      	subs	r3, r3, r2
   3c8aa:	42ab      	cmp	r3, r5
   3c8ac:	dcf2      	bgt.n	3c894 <_printf_i+0x1fc>
   3c8ae:	e7eb      	b.n	3c888 <_printf_i+0x1f0>
   3c8b0:	2500      	movs	r5, #0
   3c8b2:	f104 0919 	add.w	r9, r4, #25
   3c8b6:	e7f5      	b.n	3c8a4 <_printf_i+0x20c>
   3c8b8:	000497c7 	.word	0x000497c7
   3c8bc:	000497d8 	.word	0x000497d8

0003c8c0 <srand>:
   3c8c0:	b538      	push	{r3, r4, r5, lr}
   3c8c2:	4b0d      	ldr	r3, [pc, #52]	; (3c8f8 <srand+0x38>)
   3c8c4:	4605      	mov	r5, r0
   3c8c6:	681c      	ldr	r4, [r3, #0]
   3c8c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3c8ca:	b97b      	cbnz	r3, 3c8ec <srand+0x2c>
   3c8cc:	2018      	movs	r0, #24
   3c8ce:	f7ff fad9 	bl	3be84 <malloc>
   3c8d2:	4a0a      	ldr	r2, [pc, #40]	; (3c8fc <srand+0x3c>)
   3c8d4:	4b0a      	ldr	r3, [pc, #40]	; (3c900 <srand+0x40>)
   3c8d6:	63a0      	str	r0, [r4, #56]	; 0x38
   3c8d8:	e9c0 2300 	strd	r2, r3, [r0]
   3c8dc:	4b09      	ldr	r3, [pc, #36]	; (3c904 <srand+0x44>)
   3c8de:	2201      	movs	r2, #1
   3c8e0:	6083      	str	r3, [r0, #8]
   3c8e2:	230b      	movs	r3, #11
   3c8e4:	8183      	strh	r3, [r0, #12]
   3c8e6:	2300      	movs	r3, #0
   3c8e8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   3c8ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3c8ee:	2200      	movs	r2, #0
   3c8f0:	611d      	str	r5, [r3, #16]
   3c8f2:	615a      	str	r2, [r3, #20]
   3c8f4:	bd38      	pop	{r3, r4, r5, pc}
   3c8f6:	bf00      	nop
   3c8f8:	200312c4 	.word	0x200312c4
   3c8fc:	abcd330e 	.word	0xabcd330e
   3c900:	e66d1234 	.word	0xe66d1234
   3c904:	0005deec 	.word	0x0005deec

0003c908 <rand>:
   3c908:	4b13      	ldr	r3, [pc, #76]	; (3c958 <rand+0x50>)
   3c90a:	b510      	push	{r4, lr}
   3c90c:	681c      	ldr	r4, [r3, #0]
   3c90e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3c910:	b97b      	cbnz	r3, 3c932 <rand+0x2a>
   3c912:	2018      	movs	r0, #24
   3c914:	f7ff fab6 	bl	3be84 <malloc>
   3c918:	4a10      	ldr	r2, [pc, #64]	; (3c95c <rand+0x54>)
   3c91a:	4b11      	ldr	r3, [pc, #68]	; (3c960 <rand+0x58>)
   3c91c:	63a0      	str	r0, [r4, #56]	; 0x38
   3c91e:	e9c0 2300 	strd	r2, r3, [r0]
   3c922:	4b10      	ldr	r3, [pc, #64]	; (3c964 <rand+0x5c>)
   3c924:	2201      	movs	r2, #1
   3c926:	6083      	str	r3, [r0, #8]
   3c928:	230b      	movs	r3, #11
   3c92a:	8183      	strh	r3, [r0, #12]
   3c92c:	2300      	movs	r3, #0
   3c92e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   3c932:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   3c934:	480c      	ldr	r0, [pc, #48]	; (3c968 <rand+0x60>)
   3c936:	690a      	ldr	r2, [r1, #16]
   3c938:	694b      	ldr	r3, [r1, #20]
   3c93a:	4c0c      	ldr	r4, [pc, #48]	; (3c96c <rand+0x64>)
   3c93c:	4350      	muls	r0, r2
   3c93e:	fb04 0003 	mla	r0, r4, r3, r0
   3c942:	fba2 3404 	umull	r3, r4, r2, r4
   3c946:	1c5a      	adds	r2, r3, #1
   3c948:	4404      	add	r4, r0
   3c94a:	f144 0000 	adc.w	r0, r4, #0
   3c94e:	e9c1 2004 	strd	r2, r0, [r1, #16]
   3c952:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   3c956:	bd10      	pop	{r4, pc}
   3c958:	200312c4 	.word	0x200312c4
   3c95c:	abcd330e 	.word	0xabcd330e
   3c960:	e66d1234 	.word	0xe66d1234
   3c964:	0005deec 	.word	0x0005deec
   3c968:	5851f42d 	.word	0x5851f42d
   3c96c:	4c957f2d 	.word	0x4c957f2d

0003c970 <realloc>:
   3c970:	4b02      	ldr	r3, [pc, #8]	; (3c97c <realloc+0xc>)
   3c972:	460a      	mov	r2, r1
   3c974:	4601      	mov	r1, r0
   3c976:	6818      	ldr	r0, [r3, #0]
   3c978:	f005 b9bd 	b.w	41cf6 <_realloc_r>
   3c97c:	200312c4 	.word	0x200312c4

0003c980 <_sbrk_r>:
   3c980:	b538      	push	{r3, r4, r5, lr}
   3c982:	2300      	movs	r3, #0
   3c984:	4c05      	ldr	r4, [pc, #20]	; (3c99c <_sbrk_r+0x1c>)
   3c986:	4605      	mov	r5, r0
   3c988:	4608      	mov	r0, r1
   3c98a:	6023      	str	r3, [r4, #0]
   3c98c:	f7e4 f8f4 	bl	20b78 <_sbrk>
   3c990:	1c43      	adds	r3, r0, #1
   3c992:	d102      	bne.n	3c99a <_sbrk_r+0x1a>
   3c994:	6823      	ldr	r3, [r4, #0]
   3c996:	b103      	cbz	r3, 3c99a <_sbrk_r+0x1a>
   3c998:	602b      	str	r3, [r5, #0]
   3c99a:	bd38      	pop	{r3, r4, r5, pc}
   3c99c:	2002bfa8 	.word	0x2002bfa8

0003c9a0 <sniprintf>:
   3c9a0:	b40c      	push	{r2, r3}
   3c9a2:	4b18      	ldr	r3, [pc, #96]	; (3ca04 <sniprintf+0x64>)
   3c9a4:	b530      	push	{r4, r5, lr}
   3c9a6:	1e0c      	subs	r4, r1, #0
   3c9a8:	b09d      	sub	sp, #116	; 0x74
   3c9aa:	681d      	ldr	r5, [r3, #0]
   3c9ac:	da08      	bge.n	3c9c0 <sniprintf+0x20>
   3c9ae:	238b      	movs	r3, #139	; 0x8b
   3c9b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c9b4:	602b      	str	r3, [r5, #0]
   3c9b6:	b01d      	add	sp, #116	; 0x74
   3c9b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3c9bc:	b002      	add	sp, #8
   3c9be:	4770      	bx	lr
   3c9c0:	f44f 7302 	mov.w	r3, #520	; 0x208
   3c9c4:	9002      	str	r0, [sp, #8]
   3c9c6:	9006      	str	r0, [sp, #24]
   3c9c8:	a902      	add	r1, sp, #8
   3c9ca:	f8ad 3014 	strh.w	r3, [sp, #20]
   3c9ce:	bf14      	ite	ne
   3c9d0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   3c9d4:	4623      	moveq	r3, r4
   3c9d6:	9a20      	ldr	r2, [sp, #128]	; 0x80
   3c9d8:	4628      	mov	r0, r5
   3c9da:	9304      	str	r3, [sp, #16]
   3c9dc:	9307      	str	r3, [sp, #28]
   3c9de:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3c9e2:	f8ad 3016 	strh.w	r3, [sp, #22]
   3c9e6:	ab21      	add	r3, sp, #132	; 0x84
   3c9e8:	9301      	str	r3, [sp, #4]
   3c9ea:	f000 ff3d 	bl	3d868 <_svfiprintf_r>
   3c9ee:	1c43      	adds	r3, r0, #1
   3c9f0:	bfbc      	itt	lt
   3c9f2:	238b      	movlt	r3, #139	; 0x8b
   3c9f4:	602b      	strlt	r3, [r5, #0]
   3c9f6:	2c00      	cmp	r4, #0
   3c9f8:	d0dd      	beq.n	3c9b6 <sniprintf+0x16>
   3c9fa:	9b02      	ldr	r3, [sp, #8]
   3c9fc:	2200      	movs	r2, #0
   3c9fe:	701a      	strb	r2, [r3, #0]
   3ca00:	e7d9      	b.n	3c9b6 <sniprintf+0x16>
   3ca02:	bf00      	nop
   3ca04:	200312c4 	.word	0x200312c4

0003ca08 <siscanf>:
   3ca08:	b40e      	push	{r1, r2, r3}
   3ca0a:	b530      	push	{r4, r5, lr}
   3ca0c:	b09c      	sub	sp, #112	; 0x70
   3ca0e:	f44f 7201 	mov.w	r2, #516	; 0x204
   3ca12:	ac1f      	add	r4, sp, #124	; 0x7c
   3ca14:	f8ad 2014 	strh.w	r2, [sp, #20]
   3ca18:	9002      	str	r0, [sp, #8]
   3ca1a:	f854 5b04 	ldr.w	r5, [r4], #4
   3ca1e:	9006      	str	r0, [sp, #24]
   3ca20:	f7dd fab0 	bl	19f84 <strlen>
   3ca24:	4b0b      	ldr	r3, [pc, #44]	; (3ca54 <siscanf+0x4c>)
   3ca26:	462a      	mov	r2, r5
   3ca28:	9003      	str	r0, [sp, #12]
   3ca2a:	a902      	add	r1, sp, #8
   3ca2c:	930b      	str	r3, [sp, #44]	; 0x2c
   3ca2e:	2300      	movs	r3, #0
   3ca30:	9007      	str	r0, [sp, #28]
   3ca32:	930f      	str	r3, [sp, #60]	; 0x3c
   3ca34:	9314      	str	r3, [sp, #80]	; 0x50
   3ca36:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3ca3a:	4807      	ldr	r0, [pc, #28]	; (3ca58 <siscanf+0x50>)
   3ca3c:	f8ad 3016 	strh.w	r3, [sp, #22]
   3ca40:	4623      	mov	r3, r4
   3ca42:	6800      	ldr	r0, [r0, #0]
   3ca44:	9401      	str	r4, [sp, #4]
   3ca46:	f001 f807 	bl	3da58 <__ssvfiscanf_r>
   3ca4a:	b01c      	add	sp, #112	; 0x70
   3ca4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3ca50:	b003      	add	sp, #12
   3ca52:	4770      	bx	lr
   3ca54:	00041069 	.word	0x00041069
   3ca58:	200312c4 	.word	0x200312c4

0003ca5c <strtod>:
   3ca5c:	460a      	mov	r2, r1
   3ca5e:	4601      	mov	r1, r0
   3ca60:	4802      	ldr	r0, [pc, #8]	; (3ca6c <strtod+0x10>)
   3ca62:	4b03      	ldr	r3, [pc, #12]	; (3ca70 <strtod+0x14>)
   3ca64:	6800      	ldr	r0, [r0, #0]
   3ca66:	f7dd be2b 	b.w	1a6c0 <_strtod_l>
   3ca6a:	bf00      	nop
   3ca6c:	200312c4 	.word	0x200312c4
   3ca70:	20031328 	.word	0x20031328

0003ca74 <_strtol_l.isra.0>:
   3ca74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3ca78:	4686      	mov	lr, r0
   3ca7a:	4f39      	ldr	r7, [pc, #228]	; (3cb60 <_strtol_l.isra.0+0xec>)
   3ca7c:	4608      	mov	r0, r1
   3ca7e:	4605      	mov	r5, r0
   3ca80:	f815 4b01 	ldrb.w	r4, [r5], #1
   3ca84:	5de6      	ldrb	r6, [r4, r7]
   3ca86:	f016 0608 	ands.w	r6, r6, #8
   3ca8a:	d135      	bne.n	3caf8 <_strtol_l.isra.0+0x84>
   3ca8c:	2c2d      	cmp	r4, #45	; 0x2d
   3ca8e:	d135      	bne.n	3cafc <_strtol_l.isra.0+0x88>
   3ca90:	782c      	ldrb	r4, [r5, #0]
   3ca92:	f04f 0801 	mov.w	r8, #1
   3ca96:	1c85      	adds	r5, r0, #2
   3ca98:	2b00      	cmp	r3, #0
   3ca9a:	d05c      	beq.n	3cb56 <_strtol_l.isra.0+0xe2>
   3ca9c:	2b10      	cmp	r3, #16
   3ca9e:	d109      	bne.n	3cab4 <_strtol_l.isra.0+0x40>
   3caa0:	2c30      	cmp	r4, #48	; 0x30
   3caa2:	d107      	bne.n	3cab4 <_strtol_l.isra.0+0x40>
   3caa4:	7828      	ldrb	r0, [r5, #0]
   3caa6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   3caaa:	2858      	cmp	r0, #88	; 0x58
   3caac:	d14e      	bne.n	3cb4c <_strtol_l.isra.0+0xd8>
   3caae:	786c      	ldrb	r4, [r5, #1]
   3cab0:	2310      	movs	r3, #16
   3cab2:	3502      	adds	r5, #2
   3cab4:	f1b8 0f00 	cmp.w	r8, #0
   3cab8:	f04f 0700 	mov.w	r7, #0
   3cabc:	bf14      	ite	ne
   3cabe:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   3cac2:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   3cac6:	4638      	mov	r0, r7
   3cac8:	fbbc f9f3 	udiv	r9, ip, r3
   3cacc:	fb03 ca19 	mls	sl, r3, r9, ip
   3cad0:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   3cad4:	2e09      	cmp	r6, #9
   3cad6:	d817      	bhi.n	3cb08 <_strtol_l.isra.0+0x94>
   3cad8:	4634      	mov	r4, r6
   3cada:	42a3      	cmp	r3, r4
   3cadc:	dd23      	ble.n	3cb26 <_strtol_l.isra.0+0xb2>
   3cade:	1c7e      	adds	r6, r7, #1
   3cae0:	d007      	beq.n	3caf2 <_strtol_l.isra.0+0x7e>
   3cae2:	4581      	cmp	r9, r0
   3cae4:	d31c      	bcc.n	3cb20 <_strtol_l.isra.0+0xac>
   3cae6:	d101      	bne.n	3caec <_strtol_l.isra.0+0x78>
   3cae8:	45a2      	cmp	sl, r4
   3caea:	db19      	blt.n	3cb20 <_strtol_l.isra.0+0xac>
   3caec:	fb00 4003 	mla	r0, r0, r3, r4
   3caf0:	2701      	movs	r7, #1
   3caf2:	f815 4b01 	ldrb.w	r4, [r5], #1
   3caf6:	e7eb      	b.n	3cad0 <_strtol_l.isra.0+0x5c>
   3caf8:	4628      	mov	r0, r5
   3cafa:	e7c0      	b.n	3ca7e <_strtol_l.isra.0+0xa>
   3cafc:	2c2b      	cmp	r4, #43	; 0x2b
   3cafe:	46b0      	mov	r8, r6
   3cb00:	bf04      	itt	eq
   3cb02:	782c      	ldrbeq	r4, [r5, #0]
   3cb04:	1c85      	addeq	r5, r0, #2
   3cb06:	e7c7      	b.n	3ca98 <_strtol_l.isra.0+0x24>
   3cb08:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   3cb0c:	2e19      	cmp	r6, #25
   3cb0e:	d801      	bhi.n	3cb14 <_strtol_l.isra.0+0xa0>
   3cb10:	3c37      	subs	r4, #55	; 0x37
   3cb12:	e7e2      	b.n	3cada <_strtol_l.isra.0+0x66>
   3cb14:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   3cb18:	2e19      	cmp	r6, #25
   3cb1a:	d804      	bhi.n	3cb26 <_strtol_l.isra.0+0xb2>
   3cb1c:	3c57      	subs	r4, #87	; 0x57
   3cb1e:	e7dc      	b.n	3cada <_strtol_l.isra.0+0x66>
   3cb20:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   3cb24:	e7e5      	b.n	3caf2 <_strtol_l.isra.0+0x7e>
   3cb26:	1c7b      	adds	r3, r7, #1
   3cb28:	d106      	bne.n	3cb38 <_strtol_l.isra.0+0xc4>
   3cb2a:	2322      	movs	r3, #34	; 0x22
   3cb2c:	4660      	mov	r0, ip
   3cb2e:	f8ce 3000 	str.w	r3, [lr]
   3cb32:	b942      	cbnz	r2, 3cb46 <_strtol_l.isra.0+0xd2>
   3cb34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3cb38:	f1b8 0f00 	cmp.w	r8, #0
   3cb3c:	d000      	beq.n	3cb40 <_strtol_l.isra.0+0xcc>
   3cb3e:	4240      	negs	r0, r0
   3cb40:	2a00      	cmp	r2, #0
   3cb42:	d0f7      	beq.n	3cb34 <_strtol_l.isra.0+0xc0>
   3cb44:	b107      	cbz	r7, 3cb48 <_strtol_l.isra.0+0xd4>
   3cb46:	1e69      	subs	r1, r5, #1
   3cb48:	6011      	str	r1, [r2, #0]
   3cb4a:	e7f3      	b.n	3cb34 <_strtol_l.isra.0+0xc0>
   3cb4c:	2430      	movs	r4, #48	; 0x30
   3cb4e:	2b00      	cmp	r3, #0
   3cb50:	d1b0      	bne.n	3cab4 <_strtol_l.isra.0+0x40>
   3cb52:	2308      	movs	r3, #8
   3cb54:	e7ae      	b.n	3cab4 <_strtol_l.isra.0+0x40>
   3cb56:	2c30      	cmp	r4, #48	; 0x30
   3cb58:	d0a4      	beq.n	3caa4 <_strtol_l.isra.0+0x30>
   3cb5a:	230a      	movs	r3, #10
   3cb5c:	e7aa      	b.n	3cab4 <_strtol_l.isra.0+0x40>
   3cb5e:	bf00      	nop
   3cb60:	000496aa 	.word	0x000496aa

0003cb64 <strtol>:
   3cb64:	4613      	mov	r3, r2
   3cb66:	460a      	mov	r2, r1
   3cb68:	4601      	mov	r1, r0
   3cb6a:	4802      	ldr	r0, [pc, #8]	; (3cb74 <strtol+0x10>)
   3cb6c:	6800      	ldr	r0, [r0, #0]
   3cb6e:	f7ff bf81 	b.w	3ca74 <_strtol_l.isra.0>
   3cb72:	bf00      	nop
   3cb74:	200312c4 	.word	0x200312c4

0003cb78 <_strtoul_l.isra.0>:
   3cb78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3cb7c:	4686      	mov	lr, r0
   3cb7e:	4f37      	ldr	r7, [pc, #220]	; (3cc5c <_strtoul_l.isra.0+0xe4>)
   3cb80:	4608      	mov	r0, r1
   3cb82:	4605      	mov	r5, r0
   3cb84:	f815 4b01 	ldrb.w	r4, [r5], #1
   3cb88:	5de6      	ldrb	r6, [r4, r7]
   3cb8a:	f016 0608 	ands.w	r6, r6, #8
   3cb8e:	d131      	bne.n	3cbf4 <_strtoul_l.isra.0+0x7c>
   3cb90:	2c2d      	cmp	r4, #45	; 0x2d
   3cb92:	d131      	bne.n	3cbf8 <_strtoul_l.isra.0+0x80>
   3cb94:	782c      	ldrb	r4, [r5, #0]
   3cb96:	f04f 0801 	mov.w	r8, #1
   3cb9a:	1c85      	adds	r5, r0, #2
   3cb9c:	2b00      	cmp	r3, #0
   3cb9e:	d059      	beq.n	3cc54 <_strtoul_l.isra.0+0xdc>
   3cba0:	2b10      	cmp	r3, #16
   3cba2:	d109      	bne.n	3cbb8 <_strtoul_l.isra.0+0x40>
   3cba4:	2c30      	cmp	r4, #48	; 0x30
   3cba6:	d107      	bne.n	3cbb8 <_strtoul_l.isra.0+0x40>
   3cba8:	7828      	ldrb	r0, [r5, #0]
   3cbaa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   3cbae:	2858      	cmp	r0, #88	; 0x58
   3cbb0:	d14b      	bne.n	3cc4a <_strtoul_l.isra.0+0xd2>
   3cbb2:	786c      	ldrb	r4, [r5, #1]
   3cbb4:	2310      	movs	r3, #16
   3cbb6:	3502      	adds	r5, #2
   3cbb8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   3cbbc:	2600      	movs	r6, #0
   3cbbe:	fbbc fcf3 	udiv	ip, ip, r3
   3cbc2:	fb03 f90c 	mul.w	r9, r3, ip
   3cbc6:	4630      	mov	r0, r6
   3cbc8:	ea6f 0909 	mvn.w	r9, r9
   3cbcc:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   3cbd0:	2f09      	cmp	r7, #9
   3cbd2:	d817      	bhi.n	3cc04 <_strtoul_l.isra.0+0x8c>
   3cbd4:	463c      	mov	r4, r7
   3cbd6:	42a3      	cmp	r3, r4
   3cbd8:	dd23      	ble.n	3cc22 <_strtoul_l.isra.0+0xaa>
   3cbda:	2e00      	cmp	r6, #0
   3cbdc:	db1e      	blt.n	3cc1c <_strtoul_l.isra.0+0xa4>
   3cbde:	4584      	cmp	ip, r0
   3cbe0:	d31c      	bcc.n	3cc1c <_strtoul_l.isra.0+0xa4>
   3cbe2:	d101      	bne.n	3cbe8 <_strtoul_l.isra.0+0x70>
   3cbe4:	45a1      	cmp	r9, r4
   3cbe6:	db19      	blt.n	3cc1c <_strtoul_l.isra.0+0xa4>
   3cbe8:	fb00 4003 	mla	r0, r0, r3, r4
   3cbec:	2601      	movs	r6, #1
   3cbee:	f815 4b01 	ldrb.w	r4, [r5], #1
   3cbf2:	e7eb      	b.n	3cbcc <_strtoul_l.isra.0+0x54>
   3cbf4:	4628      	mov	r0, r5
   3cbf6:	e7c4      	b.n	3cb82 <_strtoul_l.isra.0+0xa>
   3cbf8:	2c2b      	cmp	r4, #43	; 0x2b
   3cbfa:	46b0      	mov	r8, r6
   3cbfc:	bf04      	itt	eq
   3cbfe:	782c      	ldrbeq	r4, [r5, #0]
   3cc00:	1c85      	addeq	r5, r0, #2
   3cc02:	e7cb      	b.n	3cb9c <_strtoul_l.isra.0+0x24>
   3cc04:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   3cc08:	2f19      	cmp	r7, #25
   3cc0a:	d801      	bhi.n	3cc10 <_strtoul_l.isra.0+0x98>
   3cc0c:	3c37      	subs	r4, #55	; 0x37
   3cc0e:	e7e2      	b.n	3cbd6 <_strtoul_l.isra.0+0x5e>
   3cc10:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   3cc14:	2f19      	cmp	r7, #25
   3cc16:	d804      	bhi.n	3cc22 <_strtoul_l.isra.0+0xaa>
   3cc18:	3c57      	subs	r4, #87	; 0x57
   3cc1a:	e7dc      	b.n	3cbd6 <_strtoul_l.isra.0+0x5e>
   3cc1c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   3cc20:	e7e5      	b.n	3cbee <_strtoul_l.isra.0+0x76>
   3cc22:	2e00      	cmp	r6, #0
   3cc24:	da07      	bge.n	3cc36 <_strtoul_l.isra.0+0xbe>
   3cc26:	2322      	movs	r3, #34	; 0x22
   3cc28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3cc2c:	f8ce 3000 	str.w	r3, [lr]
   3cc30:	b942      	cbnz	r2, 3cc44 <_strtoul_l.isra.0+0xcc>
   3cc32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3cc36:	f1b8 0f00 	cmp.w	r8, #0
   3cc3a:	d000      	beq.n	3cc3e <_strtoul_l.isra.0+0xc6>
   3cc3c:	4240      	negs	r0, r0
   3cc3e:	2a00      	cmp	r2, #0
   3cc40:	d0f7      	beq.n	3cc32 <_strtoul_l.isra.0+0xba>
   3cc42:	b106      	cbz	r6, 3cc46 <_strtoul_l.isra.0+0xce>
   3cc44:	1e69      	subs	r1, r5, #1
   3cc46:	6011      	str	r1, [r2, #0]
   3cc48:	e7f3      	b.n	3cc32 <_strtoul_l.isra.0+0xba>
   3cc4a:	2430      	movs	r4, #48	; 0x30
   3cc4c:	2b00      	cmp	r3, #0
   3cc4e:	d1b3      	bne.n	3cbb8 <_strtoul_l.isra.0+0x40>
   3cc50:	2308      	movs	r3, #8
   3cc52:	e7b1      	b.n	3cbb8 <_strtoul_l.isra.0+0x40>
   3cc54:	2c30      	cmp	r4, #48	; 0x30
   3cc56:	d0a7      	beq.n	3cba8 <_strtoul_l.isra.0+0x30>
   3cc58:	230a      	movs	r3, #10
   3cc5a:	e7ad      	b.n	3cbb8 <_strtoul_l.isra.0+0x40>
   3cc5c:	000496aa 	.word	0x000496aa

0003cc60 <strtoul>:
   3cc60:	4613      	mov	r3, r2
   3cc62:	460a      	mov	r2, r1
   3cc64:	4601      	mov	r1, r0
   3cc66:	4802      	ldr	r0, [pc, #8]	; (3cc70 <strtoul+0x10>)
   3cc68:	6800      	ldr	r0, [r0, #0]
   3cc6a:	f7ff bf85 	b.w	3cb78 <_strtoul_l.isra.0>
   3cc6e:	bf00      	nop
   3cc70:	200312c4 	.word	0x200312c4

0003cc74 <vsniprintf>:
   3cc74:	b507      	push	{r0, r1, r2, lr}
   3cc76:	9300      	str	r3, [sp, #0]
   3cc78:	4613      	mov	r3, r2
   3cc7a:	460a      	mov	r2, r1
   3cc7c:	4601      	mov	r1, r0
   3cc7e:	4803      	ldr	r0, [pc, #12]	; (3cc8c <vsniprintf+0x18>)
   3cc80:	6800      	ldr	r0, [r0, #0]
   3cc82:	f004 faa6 	bl	411d2 <_vsniprintf_r>
   3cc86:	b003      	add	sp, #12
   3cc88:	f85d fb04 	ldr.w	pc, [sp], #4
   3cc8c:	200312c4 	.word	0x200312c4

0003cc90 <_vsiprintf_r>:
   3cc90:	b500      	push	{lr}
   3cc92:	b09b      	sub	sp, #108	; 0x6c
   3cc94:	9100      	str	r1, [sp, #0]
   3cc96:	9104      	str	r1, [sp, #16]
   3cc98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   3cc9c:	9105      	str	r1, [sp, #20]
   3cc9e:	9102      	str	r1, [sp, #8]
   3cca0:	4905      	ldr	r1, [pc, #20]	; (3ccb8 <_vsiprintf_r+0x28>)
   3cca2:	9103      	str	r1, [sp, #12]
   3cca4:	4669      	mov	r1, sp
   3cca6:	f000 fddf 	bl	3d868 <_svfiprintf_r>
   3ccaa:	9b00      	ldr	r3, [sp, #0]
   3ccac:	2200      	movs	r2, #0
   3ccae:	701a      	strb	r2, [r3, #0]
   3ccb0:	b01b      	add	sp, #108	; 0x6c
   3ccb2:	f85d fb04 	ldr.w	pc, [sp], #4
   3ccb6:	bf00      	nop
   3ccb8:	ffff0208 	.word	0xffff0208

0003ccbc <vsiprintf>:
   3ccbc:	4613      	mov	r3, r2
   3ccbe:	460a      	mov	r2, r1
   3ccc0:	4601      	mov	r1, r0
   3ccc2:	4802      	ldr	r0, [pc, #8]	; (3cccc <vsiprintf+0x10>)
   3ccc4:	6800      	ldr	r0, [r0, #0]
   3ccc6:	f7ff bfe3 	b.w	3cc90 <_vsiprintf_r>
   3ccca:	bf00      	nop
   3cccc:	200312c4 	.word	0x200312c4

0003ccd0 <__swbuf_r>:
   3ccd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ccd2:	460e      	mov	r6, r1
   3ccd4:	4614      	mov	r4, r2
   3ccd6:	4605      	mov	r5, r0
   3ccd8:	b118      	cbz	r0, 3cce2 <__swbuf_r+0x12>
   3ccda:	6983      	ldr	r3, [r0, #24]
   3ccdc:	b90b      	cbnz	r3, 3cce2 <__swbuf_r+0x12>
   3ccde:	f000 f9ff 	bl	3d0e0 <__sinit>
   3cce2:	4b21      	ldr	r3, [pc, #132]	; (3cd68 <__swbuf_r+0x98>)
   3cce4:	429c      	cmp	r4, r3
   3cce6:	d12b      	bne.n	3cd40 <__swbuf_r+0x70>
   3cce8:	686c      	ldr	r4, [r5, #4]
   3ccea:	69a3      	ldr	r3, [r4, #24]
   3ccec:	60a3      	str	r3, [r4, #8]
   3ccee:	89a3      	ldrh	r3, [r4, #12]
   3ccf0:	071a      	lsls	r2, r3, #28
   3ccf2:	d52f      	bpl.n	3cd54 <__swbuf_r+0x84>
   3ccf4:	6923      	ldr	r3, [r4, #16]
   3ccf6:	b36b      	cbz	r3, 3cd54 <__swbuf_r+0x84>
   3ccf8:	6923      	ldr	r3, [r4, #16]
   3ccfa:	b2f6      	uxtb	r6, r6
   3ccfc:	6820      	ldr	r0, [r4, #0]
   3ccfe:	4637      	mov	r7, r6
   3cd00:	1ac0      	subs	r0, r0, r3
   3cd02:	6963      	ldr	r3, [r4, #20]
   3cd04:	4283      	cmp	r3, r0
   3cd06:	dc04      	bgt.n	3cd12 <__swbuf_r+0x42>
   3cd08:	4621      	mov	r1, r4
   3cd0a:	4628      	mov	r0, r5
   3cd0c:	f000 f96a 	bl	3cfe4 <_fflush_r>
   3cd10:	bb30      	cbnz	r0, 3cd60 <__swbuf_r+0x90>
   3cd12:	68a3      	ldr	r3, [r4, #8]
   3cd14:	3001      	adds	r0, #1
   3cd16:	3b01      	subs	r3, #1
   3cd18:	60a3      	str	r3, [r4, #8]
   3cd1a:	6823      	ldr	r3, [r4, #0]
   3cd1c:	1c5a      	adds	r2, r3, #1
   3cd1e:	6022      	str	r2, [r4, #0]
   3cd20:	701e      	strb	r6, [r3, #0]
   3cd22:	6963      	ldr	r3, [r4, #20]
   3cd24:	4283      	cmp	r3, r0
   3cd26:	d004      	beq.n	3cd32 <__swbuf_r+0x62>
   3cd28:	89a3      	ldrh	r3, [r4, #12]
   3cd2a:	07db      	lsls	r3, r3, #31
   3cd2c:	d506      	bpl.n	3cd3c <__swbuf_r+0x6c>
   3cd2e:	2e0a      	cmp	r6, #10
   3cd30:	d104      	bne.n	3cd3c <__swbuf_r+0x6c>
   3cd32:	4621      	mov	r1, r4
   3cd34:	4628      	mov	r0, r5
   3cd36:	f000 f955 	bl	3cfe4 <_fflush_r>
   3cd3a:	b988      	cbnz	r0, 3cd60 <__swbuf_r+0x90>
   3cd3c:	4638      	mov	r0, r7
   3cd3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3cd40:	4b0a      	ldr	r3, [pc, #40]	; (3cd6c <__swbuf_r+0x9c>)
   3cd42:	429c      	cmp	r4, r3
   3cd44:	d101      	bne.n	3cd4a <__swbuf_r+0x7a>
   3cd46:	68ac      	ldr	r4, [r5, #8]
   3cd48:	e7cf      	b.n	3ccea <__swbuf_r+0x1a>
   3cd4a:	4b09      	ldr	r3, [pc, #36]	; (3cd70 <__swbuf_r+0xa0>)
   3cd4c:	429c      	cmp	r4, r3
   3cd4e:	bf08      	it	eq
   3cd50:	68ec      	ldreq	r4, [r5, #12]
   3cd52:	e7ca      	b.n	3ccea <__swbuf_r+0x1a>
   3cd54:	4621      	mov	r1, r4
   3cd56:	4628      	mov	r0, r5
   3cd58:	f000 f81e 	bl	3cd98 <__swsetup_r>
   3cd5c:	2800      	cmp	r0, #0
   3cd5e:	d0cb      	beq.n	3ccf8 <__swbuf_r+0x28>
   3cd60:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   3cd64:	e7ea      	b.n	3cd3c <__swbuf_r+0x6c>
   3cd66:	bf00      	nop
   3cd68:	00043ff0 	.word	0x00043ff0
   3cd6c:	00044010 	.word	0x00044010
   3cd70:	00043fd0 	.word	0x00043fd0

0003cd74 <_write_r>:
   3cd74:	b538      	push	{r3, r4, r5, lr}
   3cd76:	4605      	mov	r5, r0
   3cd78:	4c06      	ldr	r4, [pc, #24]	; (3cd94 <_write_r+0x20>)
   3cd7a:	4608      	mov	r0, r1
   3cd7c:	4611      	mov	r1, r2
   3cd7e:	2200      	movs	r2, #0
   3cd80:	6022      	str	r2, [r4, #0]
   3cd82:	461a      	mov	r2, r3
   3cd84:	f001 ffb1 	bl	3ecea <_write>
   3cd88:	1c43      	adds	r3, r0, #1
   3cd8a:	d102      	bne.n	3cd92 <_write_r+0x1e>
   3cd8c:	6823      	ldr	r3, [r4, #0]
   3cd8e:	b103      	cbz	r3, 3cd92 <_write_r+0x1e>
   3cd90:	602b      	str	r3, [r5, #0]
   3cd92:	bd38      	pop	{r3, r4, r5, pc}
   3cd94:	2002bfa8 	.word	0x2002bfa8

0003cd98 <__swsetup_r>:
   3cd98:	4b32      	ldr	r3, [pc, #200]	; (3ce64 <__swsetup_r+0xcc>)
   3cd9a:	b570      	push	{r4, r5, r6, lr}
   3cd9c:	681d      	ldr	r5, [r3, #0]
   3cd9e:	4606      	mov	r6, r0
   3cda0:	460c      	mov	r4, r1
   3cda2:	b125      	cbz	r5, 3cdae <__swsetup_r+0x16>
   3cda4:	69ab      	ldr	r3, [r5, #24]
   3cda6:	b913      	cbnz	r3, 3cdae <__swsetup_r+0x16>
   3cda8:	4628      	mov	r0, r5
   3cdaa:	f000 f999 	bl	3d0e0 <__sinit>
   3cdae:	4b2e      	ldr	r3, [pc, #184]	; (3ce68 <__swsetup_r+0xd0>)
   3cdb0:	429c      	cmp	r4, r3
   3cdb2:	d10f      	bne.n	3cdd4 <__swsetup_r+0x3c>
   3cdb4:	686c      	ldr	r4, [r5, #4]
   3cdb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3cdba:	b29a      	uxth	r2, r3
   3cdbc:	0715      	lsls	r5, r2, #28
   3cdbe:	d42c      	bmi.n	3ce1a <__swsetup_r+0x82>
   3cdc0:	06d0      	lsls	r0, r2, #27
   3cdc2:	d411      	bmi.n	3cde8 <__swsetup_r+0x50>
   3cdc4:	2209      	movs	r2, #9
   3cdc6:	6032      	str	r2, [r6, #0]
   3cdc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3cdcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3cdd0:	81a3      	strh	r3, [r4, #12]
   3cdd2:	e03e      	b.n	3ce52 <__swsetup_r+0xba>
   3cdd4:	4b25      	ldr	r3, [pc, #148]	; (3ce6c <__swsetup_r+0xd4>)
   3cdd6:	429c      	cmp	r4, r3
   3cdd8:	d101      	bne.n	3cdde <__swsetup_r+0x46>
   3cdda:	68ac      	ldr	r4, [r5, #8]
   3cddc:	e7eb      	b.n	3cdb6 <__swsetup_r+0x1e>
   3cdde:	4b24      	ldr	r3, [pc, #144]	; (3ce70 <__swsetup_r+0xd8>)
   3cde0:	429c      	cmp	r4, r3
   3cde2:	bf08      	it	eq
   3cde4:	68ec      	ldreq	r4, [r5, #12]
   3cde6:	e7e6      	b.n	3cdb6 <__swsetup_r+0x1e>
   3cde8:	0751      	lsls	r1, r2, #29
   3cdea:	d512      	bpl.n	3ce12 <__swsetup_r+0x7a>
   3cdec:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3cdee:	b141      	cbz	r1, 3ce02 <__swsetup_r+0x6a>
   3cdf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3cdf4:	4299      	cmp	r1, r3
   3cdf6:	d002      	beq.n	3cdfe <__swsetup_r+0x66>
   3cdf8:	4630      	mov	r0, r6
   3cdfa:	f7ff f853 	bl	3bea4 <_free_r>
   3cdfe:	2300      	movs	r3, #0
   3ce00:	6363      	str	r3, [r4, #52]	; 0x34
   3ce02:	89a3      	ldrh	r3, [r4, #12]
   3ce04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   3ce08:	81a3      	strh	r3, [r4, #12]
   3ce0a:	2300      	movs	r3, #0
   3ce0c:	6063      	str	r3, [r4, #4]
   3ce0e:	6923      	ldr	r3, [r4, #16]
   3ce10:	6023      	str	r3, [r4, #0]
   3ce12:	89a3      	ldrh	r3, [r4, #12]
   3ce14:	f043 0308 	orr.w	r3, r3, #8
   3ce18:	81a3      	strh	r3, [r4, #12]
   3ce1a:	6923      	ldr	r3, [r4, #16]
   3ce1c:	b94b      	cbnz	r3, 3ce32 <__swsetup_r+0x9a>
   3ce1e:	89a3      	ldrh	r3, [r4, #12]
   3ce20:	f403 7320 	and.w	r3, r3, #640	; 0x280
   3ce24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   3ce28:	d003      	beq.n	3ce32 <__swsetup_r+0x9a>
   3ce2a:	4621      	mov	r1, r4
   3ce2c:	4630      	mov	r0, r6
   3ce2e:	f000 fc0d 	bl	3d64c <__smakebuf_r>
   3ce32:	89a2      	ldrh	r2, [r4, #12]
   3ce34:	f012 0301 	ands.w	r3, r2, #1
   3ce38:	d00c      	beq.n	3ce54 <__swsetup_r+0xbc>
   3ce3a:	2300      	movs	r3, #0
   3ce3c:	60a3      	str	r3, [r4, #8]
   3ce3e:	6963      	ldr	r3, [r4, #20]
   3ce40:	425b      	negs	r3, r3
   3ce42:	61a3      	str	r3, [r4, #24]
   3ce44:	6923      	ldr	r3, [r4, #16]
   3ce46:	b953      	cbnz	r3, 3ce5e <__swsetup_r+0xc6>
   3ce48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3ce4c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   3ce50:	d1ba      	bne.n	3cdc8 <__swsetup_r+0x30>
   3ce52:	bd70      	pop	{r4, r5, r6, pc}
   3ce54:	0792      	lsls	r2, r2, #30
   3ce56:	bf58      	it	pl
   3ce58:	6963      	ldrpl	r3, [r4, #20]
   3ce5a:	60a3      	str	r3, [r4, #8]
   3ce5c:	e7f2      	b.n	3ce44 <__swsetup_r+0xac>
   3ce5e:	2000      	movs	r0, #0
   3ce60:	e7f7      	b.n	3ce52 <__swsetup_r+0xba>
   3ce62:	bf00      	nop
   3ce64:	200312c4 	.word	0x200312c4
   3ce68:	00043ff0 	.word	0x00043ff0
   3ce6c:	00044010 	.word	0x00044010
   3ce70:	00043fd0 	.word	0x00043fd0

0003ce74 <__chk_fail>:
   3ce74:	b500      	push	{lr}
   3ce76:	b08d      	sub	sp, #52	; 0x34
   3ce78:	4b0f      	ldr	r3, [pc, #60]	; (3ceb8 <__chk_fail+0x44>)
   3ce7a:	466a      	mov	r2, sp
   3ce7c:	f103 0628 	add.w	r6, r3, #40	; 0x28
   3ce80:	4615      	mov	r5, r2
   3ce82:	6818      	ldr	r0, [r3, #0]
   3ce84:	3308      	adds	r3, #8
   3ce86:	f853 1c04 	ldr.w	r1, [r3, #-4]
   3ce8a:	4614      	mov	r4, r2
   3ce8c:	42b3      	cmp	r3, r6
   3ce8e:	c403      	stmia	r4!, {r0, r1}
   3ce90:	4622      	mov	r2, r4
   3ce92:	d1f6      	bne.n	3ce82 <__chk_fail+0xe>
   3ce94:	6818      	ldr	r0, [r3, #0]
   3ce96:	889b      	ldrh	r3, [r3, #4]
   3ce98:	6020      	str	r0, [r4, #0]
   3ce9a:	4628      	mov	r0, r5
   3ce9c:	80a3      	strh	r3, [r4, #4]
   3ce9e:	f7dd f871 	bl	19f84 <strlen>
   3cea2:	4629      	mov	r1, r5
   3cea4:	4602      	mov	r2, r0
   3cea6:	2002      	movs	r0, #2
   3cea8:	f001 ff1f 	bl	3ecea <_write>
   3ceac:	2006      	movs	r0, #6
   3ceae:	f001 f879 	bl	3dfa4 <raise>
   3ceb2:	207f      	movs	r0, #127	; 0x7f
   3ceb4:	f7e3 fe58 	bl	20b68 <_exit>
   3ceb8:	000497e9 	.word	0x000497e9

0003cebc <_close_r>:
   3cebc:	b538      	push	{r3, r4, r5, lr}
   3cebe:	2300      	movs	r3, #0
   3cec0:	4c05      	ldr	r4, [pc, #20]	; (3ced8 <_close_r+0x1c>)
   3cec2:	4605      	mov	r5, r0
   3cec4:	4608      	mov	r0, r1
   3cec6:	6023      	str	r3, [r4, #0]
   3cec8:	f001 ff13 	bl	3ecf2 <_close>
   3cecc:	1c43      	adds	r3, r0, #1
   3cece:	d102      	bne.n	3ced6 <_close_r+0x1a>
   3ced0:	6823      	ldr	r3, [r4, #0]
   3ced2:	b103      	cbz	r3, 3ced6 <_close_r+0x1a>
   3ced4:	602b      	str	r3, [r5, #0]
   3ced6:	bd38      	pop	{r3, r4, r5, pc}
   3ced8:	2002bfa8 	.word	0x2002bfa8

0003cedc <__sflush_r>:
   3cedc:	898a      	ldrh	r2, [r1, #12]
   3cede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3cee2:	4605      	mov	r5, r0
   3cee4:	0710      	lsls	r0, r2, #28
   3cee6:	460c      	mov	r4, r1
   3cee8:	d458      	bmi.n	3cf9c <__sflush_r+0xc0>
   3ceea:	684b      	ldr	r3, [r1, #4]
   3ceec:	2b00      	cmp	r3, #0
   3ceee:	dc05      	bgt.n	3cefc <__sflush_r+0x20>
   3cef0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   3cef2:	2b00      	cmp	r3, #0
   3cef4:	dc02      	bgt.n	3cefc <__sflush_r+0x20>
   3cef6:	2000      	movs	r0, #0
   3cef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3cefc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3cefe:	2e00      	cmp	r6, #0
   3cf00:	d0f9      	beq.n	3cef6 <__sflush_r+0x1a>
   3cf02:	2300      	movs	r3, #0
   3cf04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   3cf08:	682f      	ldr	r7, [r5, #0]
   3cf0a:	602b      	str	r3, [r5, #0]
   3cf0c:	d032      	beq.n	3cf74 <__sflush_r+0x98>
   3cf0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
   3cf10:	89a3      	ldrh	r3, [r4, #12]
   3cf12:	075a      	lsls	r2, r3, #29
   3cf14:	d505      	bpl.n	3cf22 <__sflush_r+0x46>
   3cf16:	6863      	ldr	r3, [r4, #4]
   3cf18:	1ac0      	subs	r0, r0, r3
   3cf1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3cf1c:	b10b      	cbz	r3, 3cf22 <__sflush_r+0x46>
   3cf1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   3cf20:	1ac0      	subs	r0, r0, r3
   3cf22:	2300      	movs	r3, #0
   3cf24:	4602      	mov	r2, r0
   3cf26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3cf28:	4628      	mov	r0, r5
   3cf2a:	6a21      	ldr	r1, [r4, #32]
   3cf2c:	47b0      	blx	r6
   3cf2e:	1c43      	adds	r3, r0, #1
   3cf30:	89a3      	ldrh	r3, [r4, #12]
   3cf32:	d106      	bne.n	3cf42 <__sflush_r+0x66>
   3cf34:	6829      	ldr	r1, [r5, #0]
   3cf36:	291d      	cmp	r1, #29
   3cf38:	d82c      	bhi.n	3cf94 <__sflush_r+0xb8>
   3cf3a:	4a29      	ldr	r2, [pc, #164]	; (3cfe0 <__sflush_r+0x104>)
   3cf3c:	40ca      	lsrs	r2, r1
   3cf3e:	07d6      	lsls	r6, r2, #31
   3cf40:	d528      	bpl.n	3cf94 <__sflush_r+0xb8>
   3cf42:	2200      	movs	r2, #0
   3cf44:	04d9      	lsls	r1, r3, #19
   3cf46:	6062      	str	r2, [r4, #4]
   3cf48:	6922      	ldr	r2, [r4, #16]
   3cf4a:	6022      	str	r2, [r4, #0]
   3cf4c:	d504      	bpl.n	3cf58 <__sflush_r+0x7c>
   3cf4e:	1c42      	adds	r2, r0, #1
   3cf50:	d101      	bne.n	3cf56 <__sflush_r+0x7a>
   3cf52:	682b      	ldr	r3, [r5, #0]
   3cf54:	b903      	cbnz	r3, 3cf58 <__sflush_r+0x7c>
   3cf56:	6560      	str	r0, [r4, #84]	; 0x54
   3cf58:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3cf5a:	602f      	str	r7, [r5, #0]
   3cf5c:	2900      	cmp	r1, #0
   3cf5e:	d0ca      	beq.n	3cef6 <__sflush_r+0x1a>
   3cf60:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3cf64:	4299      	cmp	r1, r3
   3cf66:	d002      	beq.n	3cf6e <__sflush_r+0x92>
   3cf68:	4628      	mov	r0, r5
   3cf6a:	f7fe ff9b 	bl	3bea4 <_free_r>
   3cf6e:	2000      	movs	r0, #0
   3cf70:	6360      	str	r0, [r4, #52]	; 0x34
   3cf72:	e7c1      	b.n	3cef8 <__sflush_r+0x1c>
   3cf74:	6a21      	ldr	r1, [r4, #32]
   3cf76:	2301      	movs	r3, #1
   3cf78:	4628      	mov	r0, r5
   3cf7a:	47b0      	blx	r6
   3cf7c:	1c41      	adds	r1, r0, #1
   3cf7e:	d1c7      	bne.n	3cf10 <__sflush_r+0x34>
   3cf80:	682b      	ldr	r3, [r5, #0]
   3cf82:	2b00      	cmp	r3, #0
   3cf84:	d0c4      	beq.n	3cf10 <__sflush_r+0x34>
   3cf86:	2b1d      	cmp	r3, #29
   3cf88:	d001      	beq.n	3cf8e <__sflush_r+0xb2>
   3cf8a:	2b16      	cmp	r3, #22
   3cf8c:	d101      	bne.n	3cf92 <__sflush_r+0xb6>
   3cf8e:	602f      	str	r7, [r5, #0]
   3cf90:	e7b1      	b.n	3cef6 <__sflush_r+0x1a>
   3cf92:	89a3      	ldrh	r3, [r4, #12]
   3cf94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3cf98:	81a3      	strh	r3, [r4, #12]
   3cf9a:	e7ad      	b.n	3cef8 <__sflush_r+0x1c>
   3cf9c:	690f      	ldr	r7, [r1, #16]
   3cf9e:	2f00      	cmp	r7, #0
   3cfa0:	d0a9      	beq.n	3cef6 <__sflush_r+0x1a>
   3cfa2:	0793      	lsls	r3, r2, #30
   3cfa4:	680e      	ldr	r6, [r1, #0]
   3cfa6:	600f      	str	r7, [r1, #0]
   3cfa8:	bf0c      	ite	eq
   3cfaa:	694b      	ldreq	r3, [r1, #20]
   3cfac:	2300      	movne	r3, #0
   3cfae:	eba6 0807 	sub.w	r8, r6, r7
   3cfb2:	608b      	str	r3, [r1, #8]
   3cfb4:	f1b8 0f00 	cmp.w	r8, #0
   3cfb8:	dd9d      	ble.n	3cef6 <__sflush_r+0x1a>
   3cfba:	4643      	mov	r3, r8
   3cfbc:	463a      	mov	r2, r7
   3cfbe:	6a21      	ldr	r1, [r4, #32]
   3cfc0:	4628      	mov	r0, r5
   3cfc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   3cfc4:	47b0      	blx	r6
   3cfc6:	2800      	cmp	r0, #0
   3cfc8:	dc06      	bgt.n	3cfd8 <__sflush_r+0xfc>
   3cfca:	89a3      	ldrh	r3, [r4, #12]
   3cfcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3cfd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3cfd4:	81a3      	strh	r3, [r4, #12]
   3cfd6:	e78f      	b.n	3cef8 <__sflush_r+0x1c>
   3cfd8:	4407      	add	r7, r0
   3cfda:	eba8 0800 	sub.w	r8, r8, r0
   3cfde:	e7e9      	b.n	3cfb4 <__sflush_r+0xd8>
   3cfe0:	20400001 	.word	0x20400001

0003cfe4 <_fflush_r>:
   3cfe4:	b538      	push	{r3, r4, r5, lr}
   3cfe6:	690b      	ldr	r3, [r1, #16]
   3cfe8:	4605      	mov	r5, r0
   3cfea:	460c      	mov	r4, r1
   3cfec:	b913      	cbnz	r3, 3cff4 <_fflush_r+0x10>
   3cfee:	2500      	movs	r5, #0
   3cff0:	4628      	mov	r0, r5
   3cff2:	bd38      	pop	{r3, r4, r5, pc}
   3cff4:	b118      	cbz	r0, 3cffe <_fflush_r+0x1a>
   3cff6:	6983      	ldr	r3, [r0, #24]
   3cff8:	b90b      	cbnz	r3, 3cffe <_fflush_r+0x1a>
   3cffa:	f000 f871 	bl	3d0e0 <__sinit>
   3cffe:	4b14      	ldr	r3, [pc, #80]	; (3d050 <_fflush_r+0x6c>)
   3d000:	429c      	cmp	r4, r3
   3d002:	d11b      	bne.n	3d03c <_fflush_r+0x58>
   3d004:	686c      	ldr	r4, [r5, #4]
   3d006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3d00a:	2b00      	cmp	r3, #0
   3d00c:	d0ef      	beq.n	3cfee <_fflush_r+0xa>
   3d00e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   3d010:	07d0      	lsls	r0, r2, #31
   3d012:	d404      	bmi.n	3d01e <_fflush_r+0x3a>
   3d014:	0599      	lsls	r1, r3, #22
   3d016:	d402      	bmi.n	3d01e <_fflush_r+0x3a>
   3d018:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3d01a:	f004 fad5 	bl	415c8 <__retarget_lock_acquire_recursive>
   3d01e:	4628      	mov	r0, r5
   3d020:	4621      	mov	r1, r4
   3d022:	f7ff ff5b 	bl	3cedc <__sflush_r>
   3d026:	6e63      	ldr	r3, [r4, #100]	; 0x64
   3d028:	4605      	mov	r5, r0
   3d02a:	07da      	lsls	r2, r3, #31
   3d02c:	d4e0      	bmi.n	3cff0 <_fflush_r+0xc>
   3d02e:	89a3      	ldrh	r3, [r4, #12]
   3d030:	059b      	lsls	r3, r3, #22
   3d032:	d4dd      	bmi.n	3cff0 <_fflush_r+0xc>
   3d034:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3d036:	f004 fac8 	bl	415ca <__retarget_lock_release_recursive>
   3d03a:	e7d9      	b.n	3cff0 <_fflush_r+0xc>
   3d03c:	4b05      	ldr	r3, [pc, #20]	; (3d054 <_fflush_r+0x70>)
   3d03e:	429c      	cmp	r4, r3
   3d040:	d101      	bne.n	3d046 <_fflush_r+0x62>
   3d042:	68ac      	ldr	r4, [r5, #8]
   3d044:	e7df      	b.n	3d006 <_fflush_r+0x22>
   3d046:	4b04      	ldr	r3, [pc, #16]	; (3d058 <_fflush_r+0x74>)
   3d048:	429c      	cmp	r4, r3
   3d04a:	bf08      	it	eq
   3d04c:	68ec      	ldreq	r4, [r5, #12]
   3d04e:	e7da      	b.n	3d006 <_fflush_r+0x22>
   3d050:	00043ff0 	.word	0x00043ff0
   3d054:	00044010 	.word	0x00044010
   3d058:	00043fd0 	.word	0x00043fd0

0003d05c <std>:
   3d05c:	2300      	movs	r3, #0
   3d05e:	b510      	push	{r4, lr}
   3d060:	4604      	mov	r4, r0
   3d062:	6083      	str	r3, [r0, #8]
   3d064:	8181      	strh	r1, [r0, #12]
   3d066:	4619      	mov	r1, r3
   3d068:	6643      	str	r3, [r0, #100]	; 0x64
   3d06a:	81c2      	strh	r2, [r0, #14]
   3d06c:	2208      	movs	r2, #8
   3d06e:	6183      	str	r3, [r0, #24]
   3d070:	e9c0 3300 	strd	r3, r3, [r0]
   3d074:	e9c0 3304 	strd	r3, r3, [r0, #16]
   3d078:	305c      	adds	r0, #92	; 0x5c
   3d07a:	f003 fe91 	bl	40da0 <memset>
   3d07e:	4b05      	ldr	r3, [pc, #20]	; (3d094 <std+0x38>)
   3d080:	6224      	str	r4, [r4, #32]
   3d082:	6263      	str	r3, [r4, #36]	; 0x24
   3d084:	4b04      	ldr	r3, [pc, #16]	; (3d098 <std+0x3c>)
   3d086:	62a3      	str	r3, [r4, #40]	; 0x28
   3d088:	4b04      	ldr	r3, [pc, #16]	; (3d09c <std+0x40>)
   3d08a:	62e3      	str	r3, [r4, #44]	; 0x2c
   3d08c:	4b04      	ldr	r3, [pc, #16]	; (3d0a0 <std+0x44>)
   3d08e:	6323      	str	r3, [r4, #48]	; 0x30
   3d090:	bd10      	pop	{r4, pc}
   3d092:	bf00      	nop
   3d094:	00041047 	.word	0x00041047
   3d098:	0004106d 	.word	0x0004106d
   3d09c:	000410a5 	.word	0x000410a5
   3d0a0:	000410c9 	.word	0x000410c9

0003d0a4 <_cleanup_r>:
   3d0a4:	4901      	ldr	r1, [pc, #4]	; (3d0ac <_cleanup_r+0x8>)
   3d0a6:	f004 b96b 	b.w	41380 <_fwalk_reent>
   3d0aa:	bf00      	nop
   3d0ac:	0003cfe5 	.word	0x0003cfe5

0003d0b0 <__sfp_lock_acquire>:
   3d0b0:	4801      	ldr	r0, [pc, #4]	; (3d0b8 <__sfp_lock_acquire+0x8>)
   3d0b2:	f004 ba89 	b.w	415c8 <__retarget_lock_acquire_recursive>
   3d0b6:	bf00      	nop
   3d0b8:	2002bfb4 	.word	0x2002bfb4

0003d0bc <__sfp_lock_release>:
   3d0bc:	4801      	ldr	r0, [pc, #4]	; (3d0c4 <__sfp_lock_release+0x8>)
   3d0be:	f004 ba84 	b.w	415ca <__retarget_lock_release_recursive>
   3d0c2:	bf00      	nop
   3d0c4:	2002bfb4 	.word	0x2002bfb4

0003d0c8 <__sinit_lock_acquire>:
   3d0c8:	4801      	ldr	r0, [pc, #4]	; (3d0d0 <__sinit_lock_acquire+0x8>)
   3d0ca:	f004 ba7d 	b.w	415c8 <__retarget_lock_acquire_recursive>
   3d0ce:	bf00      	nop
   3d0d0:	2002bfaf 	.word	0x2002bfaf

0003d0d4 <__sinit_lock_release>:
   3d0d4:	4801      	ldr	r0, [pc, #4]	; (3d0dc <__sinit_lock_release+0x8>)
   3d0d6:	f004 ba78 	b.w	415ca <__retarget_lock_release_recursive>
   3d0da:	bf00      	nop
   3d0dc:	2002bfaf 	.word	0x2002bfaf

0003d0e0 <__sinit>:
   3d0e0:	b510      	push	{r4, lr}
   3d0e2:	4604      	mov	r4, r0
   3d0e4:	f7ff fff0 	bl	3d0c8 <__sinit_lock_acquire>
   3d0e8:	69a3      	ldr	r3, [r4, #24]
   3d0ea:	b11b      	cbz	r3, 3d0f4 <__sinit+0x14>
   3d0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3d0f0:	f7ff bff0 	b.w	3d0d4 <__sinit_lock_release>
   3d0f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   3d0f8:	6523      	str	r3, [r4, #80]	; 0x50
   3d0fa:	4620      	mov	r0, r4
   3d0fc:	4b12      	ldr	r3, [pc, #72]	; (3d148 <__sinit+0x68>)
   3d0fe:	4a13      	ldr	r2, [pc, #76]	; (3d14c <__sinit+0x6c>)
   3d100:	681b      	ldr	r3, [r3, #0]
   3d102:	62a2      	str	r2, [r4, #40]	; 0x28
   3d104:	42a3      	cmp	r3, r4
   3d106:	bf04      	itt	eq
   3d108:	2301      	moveq	r3, #1
   3d10a:	61a3      	streq	r3, [r4, #24]
   3d10c:	f000 f820 	bl	3d150 <__sfp>
   3d110:	6060      	str	r0, [r4, #4]
   3d112:	4620      	mov	r0, r4
   3d114:	f000 f81c 	bl	3d150 <__sfp>
   3d118:	60a0      	str	r0, [r4, #8]
   3d11a:	4620      	mov	r0, r4
   3d11c:	f000 f818 	bl	3d150 <__sfp>
   3d120:	2200      	movs	r2, #0
   3d122:	60e0      	str	r0, [r4, #12]
   3d124:	2104      	movs	r1, #4
   3d126:	6860      	ldr	r0, [r4, #4]
   3d128:	f7ff ff98 	bl	3d05c <std>
   3d12c:	2201      	movs	r2, #1
   3d12e:	2109      	movs	r1, #9
   3d130:	68a0      	ldr	r0, [r4, #8]
   3d132:	f7ff ff93 	bl	3d05c <std>
   3d136:	2202      	movs	r2, #2
   3d138:	2112      	movs	r1, #18
   3d13a:	68e0      	ldr	r0, [r4, #12]
   3d13c:	f7ff ff8e 	bl	3d05c <std>
   3d140:	2301      	movs	r3, #1
   3d142:	61a3      	str	r3, [r4, #24]
   3d144:	e7d2      	b.n	3d0ec <__sinit+0xc>
   3d146:	bf00      	nop
   3d148:	00043fa4 	.word	0x00043fa4
   3d14c:	0003d0a5 	.word	0x0003d0a5

0003d150 <__sfp>:
   3d150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d152:	4607      	mov	r7, r0
   3d154:	f7ff ffac 	bl	3d0b0 <__sfp_lock_acquire>
   3d158:	4b1e      	ldr	r3, [pc, #120]	; (3d1d4 <__sfp+0x84>)
   3d15a:	681e      	ldr	r6, [r3, #0]
   3d15c:	69b3      	ldr	r3, [r6, #24]
   3d15e:	b913      	cbnz	r3, 3d166 <__sfp+0x16>
   3d160:	4630      	mov	r0, r6
   3d162:	f7ff ffbd 	bl	3d0e0 <__sinit>
   3d166:	3648      	adds	r6, #72	; 0x48
   3d168:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   3d16c:	3b01      	subs	r3, #1
   3d16e:	d503      	bpl.n	3d178 <__sfp+0x28>
   3d170:	6833      	ldr	r3, [r6, #0]
   3d172:	b30b      	cbz	r3, 3d1b8 <__sfp+0x68>
   3d174:	6836      	ldr	r6, [r6, #0]
   3d176:	e7f7      	b.n	3d168 <__sfp+0x18>
   3d178:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   3d17c:	b9d5      	cbnz	r5, 3d1b4 <__sfp+0x64>
   3d17e:	4b16      	ldr	r3, [pc, #88]	; (3d1d8 <__sfp+0x88>)
   3d180:	f104 0058 	add.w	r0, r4, #88	; 0x58
   3d184:	6665      	str	r5, [r4, #100]	; 0x64
   3d186:	60e3      	str	r3, [r4, #12]
   3d188:	f004 fa1d 	bl	415c6 <__retarget_lock_init_recursive>
   3d18c:	f7ff ff96 	bl	3d0bc <__sfp_lock_release>
   3d190:	6025      	str	r5, [r4, #0]
   3d192:	61a5      	str	r5, [r4, #24]
   3d194:	2208      	movs	r2, #8
   3d196:	4629      	mov	r1, r5
   3d198:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   3d19c:	e9c4 5501 	strd	r5, r5, [r4, #4]
   3d1a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
   3d1a4:	f003 fdfc 	bl	40da0 <memset>
   3d1a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   3d1ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   3d1b0:	4620      	mov	r0, r4
   3d1b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3d1b4:	3468      	adds	r4, #104	; 0x68
   3d1b6:	e7d9      	b.n	3d16c <__sfp+0x1c>
   3d1b8:	2104      	movs	r1, #4
   3d1ba:	4638      	mov	r0, r7
   3d1bc:	f004 f8ca 	bl	41354 <__sfmoreglue>
   3d1c0:	4604      	mov	r4, r0
   3d1c2:	6030      	str	r0, [r6, #0]
   3d1c4:	2800      	cmp	r0, #0
   3d1c6:	d1d5      	bne.n	3d174 <__sfp+0x24>
   3d1c8:	f7ff ff78 	bl	3d0bc <__sfp_lock_release>
   3d1cc:	230c      	movs	r3, #12
   3d1ce:	603b      	str	r3, [r7, #0]
   3d1d0:	e7ee      	b.n	3d1b0 <__sfp+0x60>
   3d1d2:	bf00      	nop
   3d1d4:	00043fa4 	.word	0x00043fa4
   3d1d8:	ffff0001 	.word	0xffff0001

0003d1dc <__gethex>:
   3d1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d1e0:	b08b      	sub	sp, #44	; 0x2c
   3d1e2:	468b      	mov	fp, r1
   3d1e4:	4690      	mov	r8, r2
   3d1e6:	9306      	str	r3, [sp, #24]
   3d1e8:	4bb5      	ldr	r3, [pc, #724]	; (3d4c0 <__gethex+0x2e4>)
   3d1ea:	9002      	str	r0, [sp, #8]
   3d1ec:	681b      	ldr	r3, [r3, #0]
   3d1ee:	4618      	mov	r0, r3
   3d1f0:	9303      	str	r3, [sp, #12]
   3d1f2:	f7dc fec7 	bl	19f84 <strlen>
   3d1f6:	9b03      	ldr	r3, [sp, #12]
   3d1f8:	f8db 2000 	ldr.w	r2, [fp]
   3d1fc:	4403      	add	r3, r0
   3d1fe:	9001      	str	r0, [sp, #4]
   3d200:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   3d204:	9307      	str	r3, [sp, #28]
   3d206:	1c93      	adds	r3, r2, #2
   3d208:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   3d20c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   3d210:	32fe      	adds	r2, #254	; 0xfe
   3d212:	eb02 0a03 	add.w	sl, r2, r3
   3d216:	461f      	mov	r7, r3
   3d218:	f813 0b01 	ldrb.w	r0, [r3], #1
   3d21c:	2830      	cmp	r0, #48	; 0x30
   3d21e:	d0f8      	beq.n	3d212 <__gethex+0x36>
   3d220:	f004 f906 	bl	41430 <__hexdig_fun>
   3d224:	4604      	mov	r4, r0
   3d226:	2800      	cmp	r0, #0
   3d228:	d167      	bne.n	3d2fa <__gethex+0x11e>
   3d22a:	9a01      	ldr	r2, [sp, #4]
   3d22c:	4638      	mov	r0, r7
   3d22e:	9903      	ldr	r1, [sp, #12]
   3d230:	f003 ff73 	bl	4111a <strncmp>
   3d234:	4605      	mov	r5, r0
   3d236:	2800      	cmp	r0, #0
   3d238:	d162      	bne.n	3d300 <__gethex+0x124>
   3d23a:	9b01      	ldr	r3, [sp, #4]
   3d23c:	5cf8      	ldrb	r0, [r7, r3]
   3d23e:	18fe      	adds	r6, r7, r3
   3d240:	f004 f8f6 	bl	41430 <__hexdig_fun>
   3d244:	2800      	cmp	r0, #0
   3d246:	d05d      	beq.n	3d304 <__gethex+0x128>
   3d248:	4633      	mov	r3, r6
   3d24a:	7818      	ldrb	r0, [r3, #0]
   3d24c:	461f      	mov	r7, r3
   3d24e:	3301      	adds	r3, #1
   3d250:	2830      	cmp	r0, #48	; 0x30
   3d252:	d0fa      	beq.n	3d24a <__gethex+0x6e>
   3d254:	f004 f8ec 	bl	41430 <__hexdig_fun>
   3d258:	fab0 f480 	clz	r4, r0
   3d25c:	4635      	mov	r5, r6
   3d25e:	f04f 0a01 	mov.w	sl, #1
   3d262:	0964      	lsrs	r4, r4, #5
   3d264:	463a      	mov	r2, r7
   3d266:	4616      	mov	r6, r2
   3d268:	3201      	adds	r2, #1
   3d26a:	7830      	ldrb	r0, [r6, #0]
   3d26c:	f004 f8e0 	bl	41430 <__hexdig_fun>
   3d270:	2800      	cmp	r0, #0
   3d272:	d1f8      	bne.n	3d266 <__gethex+0x8a>
   3d274:	9a01      	ldr	r2, [sp, #4]
   3d276:	4630      	mov	r0, r6
   3d278:	9903      	ldr	r1, [sp, #12]
   3d27a:	f003 ff4e 	bl	4111a <strncmp>
   3d27e:	b950      	cbnz	r0, 3d296 <__gethex+0xba>
   3d280:	b955      	cbnz	r5, 3d298 <__gethex+0xbc>
   3d282:	9b01      	ldr	r3, [sp, #4]
   3d284:	18f5      	adds	r5, r6, r3
   3d286:	462a      	mov	r2, r5
   3d288:	4616      	mov	r6, r2
   3d28a:	3201      	adds	r2, #1
   3d28c:	7830      	ldrb	r0, [r6, #0]
   3d28e:	f004 f8cf 	bl	41430 <__hexdig_fun>
   3d292:	2800      	cmp	r0, #0
   3d294:	d1f8      	bne.n	3d288 <__gethex+0xac>
   3d296:	b10d      	cbz	r5, 3d29c <__gethex+0xc0>
   3d298:	1bad      	subs	r5, r5, r6
   3d29a:	00ad      	lsls	r5, r5, #2
   3d29c:	7833      	ldrb	r3, [r6, #0]
   3d29e:	2b50      	cmp	r3, #80	; 0x50
   3d2a0:	d001      	beq.n	3d2a6 <__gethex+0xca>
   3d2a2:	2b70      	cmp	r3, #112	; 0x70
   3d2a4:	d13c      	bne.n	3d320 <__gethex+0x144>
   3d2a6:	7873      	ldrb	r3, [r6, #1]
   3d2a8:	2b2b      	cmp	r3, #43	; 0x2b
   3d2aa:	d02d      	beq.n	3d308 <__gethex+0x12c>
   3d2ac:	2b2d      	cmp	r3, #45	; 0x2d
   3d2ae:	d02f      	beq.n	3d310 <__gethex+0x134>
   3d2b0:	1c71      	adds	r1, r6, #1
   3d2b2:	f04f 0900 	mov.w	r9, #0
   3d2b6:	7808      	ldrb	r0, [r1, #0]
   3d2b8:	f004 f8ba 	bl	41430 <__hexdig_fun>
   3d2bc:	1e43      	subs	r3, r0, #1
   3d2be:	b2db      	uxtb	r3, r3
   3d2c0:	2b18      	cmp	r3, #24
   3d2c2:	d82d      	bhi.n	3d320 <__gethex+0x144>
   3d2c4:	f1a0 0210 	sub.w	r2, r0, #16
   3d2c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   3d2cc:	f004 f8b0 	bl	41430 <__hexdig_fun>
   3d2d0:	1e43      	subs	r3, r0, #1
   3d2d2:	b2db      	uxtb	r3, r3
   3d2d4:	2b18      	cmp	r3, #24
   3d2d6:	d91e      	bls.n	3d316 <__gethex+0x13a>
   3d2d8:	f1b9 0f00 	cmp.w	r9, #0
   3d2dc:	d000      	beq.n	3d2e0 <__gethex+0x104>
   3d2de:	4252      	negs	r2, r2
   3d2e0:	4415      	add	r5, r2
   3d2e2:	f8cb 1000 	str.w	r1, [fp]
   3d2e6:	b1ec      	cbz	r4, 3d324 <__gethex+0x148>
   3d2e8:	f1ba 0f00 	cmp.w	sl, #0
   3d2ec:	bf14      	ite	ne
   3d2ee:	2700      	movne	r7, #0
   3d2f0:	2706      	moveq	r7, #6
   3d2f2:	4638      	mov	r0, r7
   3d2f4:	b00b      	add	sp, #44	; 0x2c
   3d2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d2fa:	2400      	movs	r4, #0
   3d2fc:	4625      	mov	r5, r4
   3d2fe:	e7b1      	b.n	3d264 <__gethex+0x88>
   3d300:	463e      	mov	r6, r7
   3d302:	4625      	mov	r5, r4
   3d304:	2401      	movs	r4, #1
   3d306:	e7c9      	b.n	3d29c <__gethex+0xc0>
   3d308:	f04f 0900 	mov.w	r9, #0
   3d30c:	1cb1      	adds	r1, r6, #2
   3d30e:	e7d2      	b.n	3d2b6 <__gethex+0xda>
   3d310:	f04f 0901 	mov.w	r9, #1
   3d314:	e7fa      	b.n	3d30c <__gethex+0x130>
   3d316:	230a      	movs	r3, #10
   3d318:	fb03 0202 	mla	r2, r3, r2, r0
   3d31c:	3a10      	subs	r2, #16
   3d31e:	e7d3      	b.n	3d2c8 <__gethex+0xec>
   3d320:	4631      	mov	r1, r6
   3d322:	e7de      	b.n	3d2e2 <__gethex+0x106>
   3d324:	1bf3      	subs	r3, r6, r7
   3d326:	4621      	mov	r1, r4
   3d328:	3b01      	subs	r3, #1
   3d32a:	2b07      	cmp	r3, #7
   3d32c:	dc4f      	bgt.n	3d3ce <__gethex+0x1f2>
   3d32e:	9802      	ldr	r0, [sp, #8]
   3d330:	f04f 0b00 	mov.w	fp, #0
   3d334:	f004 f99a 	bl	4166c <_Balloc>
   3d338:	9b01      	ldr	r3, [sp, #4]
   3d33a:	f100 0914 	add.w	r9, r0, #20
   3d33e:	4604      	mov	r4, r0
   3d340:	f1c3 0301 	rsb	r3, r3, #1
   3d344:	46da      	mov	sl, fp
   3d346:	f8cd 9010 	str.w	r9, [sp, #16]
   3d34a:	9308      	str	r3, [sp, #32]
   3d34c:	42b7      	cmp	r7, r6
   3d34e:	d341      	bcc.n	3d3d4 <__gethex+0x1f8>
   3d350:	9804      	ldr	r0, [sp, #16]
   3d352:	f840 ab04 	str.w	sl, [r0], #4
   3d356:	eba0 0009 	sub.w	r0, r0, r9
   3d35a:	1080      	asrs	r0, r0, #2
   3d35c:	0147      	lsls	r7, r0, #5
   3d35e:	6120      	str	r0, [r4, #16]
   3d360:	4650      	mov	r0, sl
   3d362:	f004 fa49 	bl	417f8 <__hi0bits>
   3d366:	f8d8 6000 	ldr.w	r6, [r8]
   3d36a:	1a3f      	subs	r7, r7, r0
   3d36c:	42b7      	cmp	r7, r6
   3d36e:	dd63      	ble.n	3d438 <__gethex+0x25c>
   3d370:	1bbf      	subs	r7, r7, r6
   3d372:	4620      	mov	r0, r4
   3d374:	4639      	mov	r1, r7
   3d376:	f004 fc8f 	bl	41c98 <__any_on>
   3d37a:	4682      	mov	sl, r0
   3d37c:	b1a8      	cbz	r0, 3d3aa <__gethex+0x1ce>
   3d37e:	1e7b      	subs	r3, r7, #1
   3d380:	f04f 0a01 	mov.w	sl, #1
   3d384:	1159      	asrs	r1, r3, #5
   3d386:	f003 021f 	and.w	r2, r3, #31
   3d38a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   3d38e:	fa0a f202 	lsl.w	r2, sl, r2
   3d392:	420a      	tst	r2, r1
   3d394:	d009      	beq.n	3d3aa <__gethex+0x1ce>
   3d396:	4553      	cmp	r3, sl
   3d398:	dd05      	ble.n	3d3a6 <__gethex+0x1ca>
   3d39a:	1eb9      	subs	r1, r7, #2
   3d39c:	4620      	mov	r0, r4
   3d39e:	f004 fc7b 	bl	41c98 <__any_on>
   3d3a2:	2800      	cmp	r0, #0
   3d3a4:	d145      	bne.n	3d432 <__gethex+0x256>
   3d3a6:	f04f 0a02 	mov.w	sl, #2
   3d3aa:	443d      	add	r5, r7
   3d3ac:	4639      	mov	r1, r7
   3d3ae:	4620      	mov	r0, r4
   3d3b0:	f004 f804 	bl	413bc <rshift>
   3d3b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   3d3b8:	42ab      	cmp	r3, r5
   3d3ba:	da4b      	bge.n	3d454 <__gethex+0x278>
   3d3bc:	4621      	mov	r1, r4
   3d3be:	9802      	ldr	r0, [sp, #8]
   3d3c0:	f004 f988 	bl	416d4 <_Bfree>
   3d3c4:	2300      	movs	r3, #0
   3d3c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3d3c8:	27a3      	movs	r7, #163	; 0xa3
   3d3ca:	6013      	str	r3, [r2, #0]
   3d3cc:	e791      	b.n	3d2f2 <__gethex+0x116>
   3d3ce:	3101      	adds	r1, #1
   3d3d0:	105b      	asrs	r3, r3, #1
   3d3d2:	e7aa      	b.n	3d32a <__gethex+0x14e>
   3d3d4:	1e73      	subs	r3, r6, #1
   3d3d6:	9a07      	ldr	r2, [sp, #28]
   3d3d8:	9305      	str	r3, [sp, #20]
   3d3da:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   3d3de:	4293      	cmp	r3, r2
   3d3e0:	d017      	beq.n	3d412 <__gethex+0x236>
   3d3e2:	f1bb 0f20 	cmp.w	fp, #32
   3d3e6:	d106      	bne.n	3d3f6 <__gethex+0x21a>
   3d3e8:	9b04      	ldr	r3, [sp, #16]
   3d3ea:	f843 ab04 	str.w	sl, [r3], #4
   3d3ee:	f04f 0a00 	mov.w	sl, #0
   3d3f2:	9304      	str	r3, [sp, #16]
   3d3f4:	46d3      	mov	fp, sl
   3d3f6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   3d3fa:	f004 f819 	bl	41430 <__hexdig_fun>
   3d3fe:	f000 000f 	and.w	r0, r0, #15
   3d402:	9b05      	ldr	r3, [sp, #20]
   3d404:	fa00 f00b 	lsl.w	r0, r0, fp
   3d408:	f10b 0b04 	add.w	fp, fp, #4
   3d40c:	ea4a 0a00 	orr.w	sl, sl, r0
   3d410:	e00d      	b.n	3d42e <__gethex+0x252>
   3d412:	9b05      	ldr	r3, [sp, #20]
   3d414:	9a08      	ldr	r2, [sp, #32]
   3d416:	4413      	add	r3, r2
   3d418:	42bb      	cmp	r3, r7
   3d41a:	d3e2      	bcc.n	3d3e2 <__gethex+0x206>
   3d41c:	4618      	mov	r0, r3
   3d41e:	9a01      	ldr	r2, [sp, #4]
   3d420:	9903      	ldr	r1, [sp, #12]
   3d422:	9309      	str	r3, [sp, #36]	; 0x24
   3d424:	f003 fe79 	bl	4111a <strncmp>
   3d428:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3d42a:	2800      	cmp	r0, #0
   3d42c:	d1d9      	bne.n	3d3e2 <__gethex+0x206>
   3d42e:	461e      	mov	r6, r3
   3d430:	e78c      	b.n	3d34c <__gethex+0x170>
   3d432:	f04f 0a03 	mov.w	sl, #3
   3d436:	e7b8      	b.n	3d3aa <__gethex+0x1ce>
   3d438:	da09      	bge.n	3d44e <__gethex+0x272>
   3d43a:	1bf7      	subs	r7, r6, r7
   3d43c:	4621      	mov	r1, r4
   3d43e:	9802      	ldr	r0, [sp, #8]
   3d440:	463a      	mov	r2, r7
   3d442:	1bed      	subs	r5, r5, r7
   3d444:	f004 fac0 	bl	419c8 <__lshift>
   3d448:	4604      	mov	r4, r0
   3d44a:	f100 0914 	add.w	r9, r0, #20
   3d44e:	f04f 0a00 	mov.w	sl, #0
   3d452:	e7af      	b.n	3d3b4 <__gethex+0x1d8>
   3d454:	f8d8 3004 	ldr.w	r3, [r8, #4]
   3d458:	42ab      	cmp	r3, r5
   3d45a:	dd6d      	ble.n	3d538 <__gethex+0x35c>
   3d45c:	1b5d      	subs	r5, r3, r5
   3d45e:	42ae      	cmp	r6, r5
   3d460:	dc30      	bgt.n	3d4c4 <__gethex+0x2e8>
   3d462:	f8d8 300c 	ldr.w	r3, [r8, #12]
   3d466:	2b02      	cmp	r3, #2
   3d468:	d022      	beq.n	3d4b0 <__gethex+0x2d4>
   3d46a:	2b03      	cmp	r3, #3
   3d46c:	d024      	beq.n	3d4b8 <__gethex+0x2dc>
   3d46e:	2b01      	cmp	r3, #1
   3d470:	d115      	bne.n	3d49e <__gethex+0x2c2>
   3d472:	42ae      	cmp	r6, r5
   3d474:	d113      	bne.n	3d49e <__gethex+0x2c2>
   3d476:	2e01      	cmp	r6, #1
   3d478:	d10b      	bne.n	3d492 <__gethex+0x2b6>
   3d47a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   3d47e:	2762      	movs	r7, #98	; 0x62
   3d480:	9a06      	ldr	r2, [sp, #24]
   3d482:	6013      	str	r3, [r2, #0]
   3d484:	2301      	movs	r3, #1
   3d486:	6123      	str	r3, [r4, #16]
   3d488:	f8c9 3000 	str.w	r3, [r9]
   3d48c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   3d48e:	601c      	str	r4, [r3, #0]
   3d490:	e72f      	b.n	3d2f2 <__gethex+0x116>
   3d492:	1e71      	subs	r1, r6, #1
   3d494:	4620      	mov	r0, r4
   3d496:	f004 fbff 	bl	41c98 <__any_on>
   3d49a:	2800      	cmp	r0, #0
   3d49c:	d1ed      	bne.n	3d47a <__gethex+0x29e>
   3d49e:	4621      	mov	r1, r4
   3d4a0:	9802      	ldr	r0, [sp, #8]
   3d4a2:	f004 f917 	bl	416d4 <_Bfree>
   3d4a6:	2300      	movs	r3, #0
   3d4a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3d4aa:	2750      	movs	r7, #80	; 0x50
   3d4ac:	6013      	str	r3, [r2, #0]
   3d4ae:	e720      	b.n	3d2f2 <__gethex+0x116>
   3d4b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3d4b2:	2b00      	cmp	r3, #0
   3d4b4:	d1f3      	bne.n	3d49e <__gethex+0x2c2>
   3d4b6:	e7e0      	b.n	3d47a <__gethex+0x29e>
   3d4b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3d4ba:	2b00      	cmp	r3, #0
   3d4bc:	d1dd      	bne.n	3d47a <__gethex+0x29e>
   3d4be:	e7ee      	b.n	3d49e <__gethex+0x2c2>
   3d4c0:	00044030 	.word	0x00044030
   3d4c4:	1e6f      	subs	r7, r5, #1
   3d4c6:	f1ba 0f00 	cmp.w	sl, #0
   3d4ca:	d132      	bne.n	3d532 <__gethex+0x356>
   3d4cc:	b127      	cbz	r7, 3d4d8 <__gethex+0x2fc>
   3d4ce:	4639      	mov	r1, r7
   3d4d0:	4620      	mov	r0, r4
   3d4d2:	f004 fbe1 	bl	41c98 <__any_on>
   3d4d6:	4682      	mov	sl, r0
   3d4d8:	117a      	asrs	r2, r7, #5
   3d4da:	2301      	movs	r3, #1
   3d4dc:	f007 071f 	and.w	r7, r7, #31
   3d4e0:	4629      	mov	r1, r5
   3d4e2:	4620      	mov	r0, r4
   3d4e4:	1b76      	subs	r6, r6, r5
   3d4e6:	fa03 f707 	lsl.w	r7, r3, r7
   3d4ea:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
   3d4ee:	421f      	tst	r7, r3
   3d4f0:	f04f 0702 	mov.w	r7, #2
   3d4f4:	bf18      	it	ne
   3d4f6:	f04a 0a02 	orrne.w	sl, sl, #2
   3d4fa:	f003 ff5f 	bl	413bc <rshift>
   3d4fe:	f8d8 5004 	ldr.w	r5, [r8, #4]
   3d502:	f1ba 0f00 	cmp.w	sl, #0
   3d506:	d048      	beq.n	3d59a <__gethex+0x3be>
   3d508:	f8d8 300c 	ldr.w	r3, [r8, #12]
   3d50c:	2b02      	cmp	r3, #2
   3d50e:	d015      	beq.n	3d53c <__gethex+0x360>
   3d510:	2b03      	cmp	r3, #3
   3d512:	d017      	beq.n	3d544 <__gethex+0x368>
   3d514:	2b01      	cmp	r3, #1
   3d516:	d109      	bne.n	3d52c <__gethex+0x350>
   3d518:	f01a 0f02 	tst.w	sl, #2
   3d51c:	d006      	beq.n	3d52c <__gethex+0x350>
   3d51e:	f8d9 3000 	ldr.w	r3, [r9]
   3d522:	ea4a 0a03 	orr.w	sl, sl, r3
   3d526:	f01a 0f01 	tst.w	sl, #1
   3d52a:	d10e      	bne.n	3d54a <__gethex+0x36e>
   3d52c:	f047 0710 	orr.w	r7, r7, #16
   3d530:	e033      	b.n	3d59a <__gethex+0x3be>
   3d532:	f04f 0a01 	mov.w	sl, #1
   3d536:	e7cf      	b.n	3d4d8 <__gethex+0x2fc>
   3d538:	2701      	movs	r7, #1
   3d53a:	e7e2      	b.n	3d502 <__gethex+0x326>
   3d53c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3d53e:	f1c3 0301 	rsb	r3, r3, #1
   3d542:	9315      	str	r3, [sp, #84]	; 0x54
   3d544:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3d546:	2b00      	cmp	r3, #0
   3d548:	d0f0      	beq.n	3d52c <__gethex+0x350>
   3d54a:	f8d4 9010 	ldr.w	r9, [r4, #16]
   3d54e:	f104 0314 	add.w	r3, r4, #20
   3d552:	f04f 0c00 	mov.w	ip, #0
   3d556:	ea4f 0a89 	mov.w	sl, r9, lsl #2
   3d55a:	eb03 010a 	add.w	r1, r3, sl
   3d55e:	4618      	mov	r0, r3
   3d560:	f853 2b04 	ldr.w	r2, [r3], #4
   3d564:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   3d568:	d01c      	beq.n	3d5a4 <__gethex+0x3c8>
   3d56a:	3201      	adds	r2, #1
   3d56c:	6002      	str	r2, [r0, #0]
   3d56e:	2f02      	cmp	r7, #2
   3d570:	f104 0314 	add.w	r3, r4, #20
   3d574:	d138      	bne.n	3d5e8 <__gethex+0x40c>
   3d576:	f8d8 2000 	ldr.w	r2, [r8]
   3d57a:	3a01      	subs	r2, #1
   3d57c:	42b2      	cmp	r2, r6
   3d57e:	d10a      	bne.n	3d596 <__gethex+0x3ba>
   3d580:	1171      	asrs	r1, r6, #5
   3d582:	2201      	movs	r2, #1
   3d584:	f006 061f 	and.w	r6, r6, #31
   3d588:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   3d58c:	fa02 f606 	lsl.w	r6, r2, r6
   3d590:	421e      	tst	r6, r3
   3d592:	bf18      	it	ne
   3d594:	4617      	movne	r7, r2
   3d596:	f047 0720 	orr.w	r7, r7, #32
   3d59a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   3d59c:	601c      	str	r4, [r3, #0]
   3d59e:	9b06      	ldr	r3, [sp, #24]
   3d5a0:	601d      	str	r5, [r3, #0]
   3d5a2:	e6a6      	b.n	3d2f2 <__gethex+0x116>
   3d5a4:	4299      	cmp	r1, r3
   3d5a6:	f843 cc04 	str.w	ip, [r3, #-4]
   3d5aa:	d8d8      	bhi.n	3d55e <__gethex+0x382>
   3d5ac:	68a3      	ldr	r3, [r4, #8]
   3d5ae:	4599      	cmp	r9, r3
   3d5b0:	db12      	blt.n	3d5d8 <__gethex+0x3fc>
   3d5b2:	6861      	ldr	r1, [r4, #4]
   3d5b4:	9802      	ldr	r0, [sp, #8]
   3d5b6:	3101      	adds	r1, #1
   3d5b8:	f004 f858 	bl	4166c <_Balloc>
   3d5bc:	6922      	ldr	r2, [r4, #16]
   3d5be:	4683      	mov	fp, r0
   3d5c0:	f104 010c 	add.w	r1, r4, #12
   3d5c4:	3202      	adds	r2, #2
   3d5c6:	300c      	adds	r0, #12
   3d5c8:	0092      	lsls	r2, r2, #2
   3d5ca:	f003 fbc9 	bl	40d60 <memcpy>
   3d5ce:	4621      	mov	r1, r4
   3d5d0:	465c      	mov	r4, fp
   3d5d2:	9802      	ldr	r0, [sp, #8]
   3d5d4:	f004 f87e 	bl	416d4 <_Bfree>
   3d5d8:	6923      	ldr	r3, [r4, #16]
   3d5da:	1c5a      	adds	r2, r3, #1
   3d5dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   3d5e0:	6122      	str	r2, [r4, #16]
   3d5e2:	2201      	movs	r2, #1
   3d5e4:	615a      	str	r2, [r3, #20]
   3d5e6:	e7c2      	b.n	3d56e <__gethex+0x392>
   3d5e8:	6922      	ldr	r2, [r4, #16]
   3d5ea:	454a      	cmp	r2, r9
   3d5ec:	dd0b      	ble.n	3d606 <__gethex+0x42a>
   3d5ee:	2101      	movs	r1, #1
   3d5f0:	4620      	mov	r0, r4
   3d5f2:	f003 fee3 	bl	413bc <rshift>
   3d5f6:	3501      	adds	r5, #1
   3d5f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   3d5fc:	42ab      	cmp	r3, r5
   3d5fe:	f6ff aedd 	blt.w	3d3bc <__gethex+0x1e0>
   3d602:	2701      	movs	r7, #1
   3d604:	e7c7      	b.n	3d596 <__gethex+0x3ba>
   3d606:	f016 061f 	ands.w	r6, r6, #31
   3d60a:	d0fa      	beq.n	3d602 <__gethex+0x426>
   3d60c:	449a      	add	sl, r3
   3d60e:	f1c6 0620 	rsb	r6, r6, #32
   3d612:	f85a 0c04 	ldr.w	r0, [sl, #-4]
   3d616:	f004 f8ef 	bl	417f8 <__hi0bits>
   3d61a:	42b0      	cmp	r0, r6
   3d61c:	dbe7      	blt.n	3d5ee <__gethex+0x412>
   3d61e:	e7f0      	b.n	3d602 <__gethex+0x426>

0003d620 <_localeconv_r>:
   3d620:	4800      	ldr	r0, [pc, #0]	; (3d624 <_localeconv_r+0x4>)
   3d622:	4770      	bx	lr
   3d624:	20031418 	.word	0x20031418

0003d628 <_lseek_r>:
   3d628:	b538      	push	{r3, r4, r5, lr}
   3d62a:	4605      	mov	r5, r0
   3d62c:	4c06      	ldr	r4, [pc, #24]	; (3d648 <_lseek_r+0x20>)
   3d62e:	4608      	mov	r0, r1
   3d630:	4611      	mov	r1, r2
   3d632:	2200      	movs	r2, #0
   3d634:	6022      	str	r2, [r4, #0]
   3d636:	461a      	mov	r2, r3
   3d638:	f001 fb5e 	bl	3ecf8 <_lseek>
   3d63c:	1c43      	adds	r3, r0, #1
   3d63e:	d102      	bne.n	3d646 <_lseek_r+0x1e>
   3d640:	6823      	ldr	r3, [r4, #0]
   3d642:	b103      	cbz	r3, 3d646 <_lseek_r+0x1e>
   3d644:	602b      	str	r3, [r5, #0]
   3d646:	bd38      	pop	{r3, r4, r5, pc}
   3d648:	2002bfa8 	.word	0x2002bfa8

0003d64c <__smakebuf_r>:
   3d64c:	898b      	ldrh	r3, [r1, #12]
   3d64e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3d650:	079d      	lsls	r5, r3, #30
   3d652:	4606      	mov	r6, r0
   3d654:	460c      	mov	r4, r1
   3d656:	d507      	bpl.n	3d668 <__smakebuf_r+0x1c>
   3d658:	f104 0347 	add.w	r3, r4, #71	; 0x47
   3d65c:	6023      	str	r3, [r4, #0]
   3d65e:	6123      	str	r3, [r4, #16]
   3d660:	2301      	movs	r3, #1
   3d662:	6163      	str	r3, [r4, #20]
   3d664:	b002      	add	sp, #8
   3d666:	bd70      	pop	{r4, r5, r6, pc}
   3d668:	ab01      	add	r3, sp, #4
   3d66a:	466a      	mov	r2, sp
   3d66c:	f003 ffae 	bl	415cc <__swhatbuf_r>
   3d670:	9900      	ldr	r1, [sp, #0]
   3d672:	4605      	mov	r5, r0
   3d674:	4630      	mov	r0, r6
   3d676:	f7fe fc63 	bl	3bf40 <_malloc_r>
   3d67a:	b948      	cbnz	r0, 3d690 <__smakebuf_r+0x44>
   3d67c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3d680:	059a      	lsls	r2, r3, #22
   3d682:	d4ef      	bmi.n	3d664 <__smakebuf_r+0x18>
   3d684:	f023 0303 	bic.w	r3, r3, #3
   3d688:	f043 0302 	orr.w	r3, r3, #2
   3d68c:	81a3      	strh	r3, [r4, #12]
   3d68e:	e7e3      	b.n	3d658 <__smakebuf_r+0xc>
   3d690:	4b0d      	ldr	r3, [pc, #52]	; (3d6c8 <__smakebuf_r+0x7c>)
   3d692:	62b3      	str	r3, [r6, #40]	; 0x28
   3d694:	89a3      	ldrh	r3, [r4, #12]
   3d696:	6020      	str	r0, [r4, #0]
   3d698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3d69c:	6120      	str	r0, [r4, #16]
   3d69e:	81a3      	strh	r3, [r4, #12]
   3d6a0:	9b00      	ldr	r3, [sp, #0]
   3d6a2:	6163      	str	r3, [r4, #20]
   3d6a4:	9b01      	ldr	r3, [sp, #4]
   3d6a6:	b15b      	cbz	r3, 3d6c0 <__smakebuf_r+0x74>
   3d6a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   3d6ac:	4630      	mov	r0, r6
   3d6ae:	f000 fca5 	bl	3dffc <_isatty_r>
   3d6b2:	b128      	cbz	r0, 3d6c0 <__smakebuf_r+0x74>
   3d6b4:	89a3      	ldrh	r3, [r4, #12]
   3d6b6:	f023 0303 	bic.w	r3, r3, #3
   3d6ba:	f043 0301 	orr.w	r3, r3, #1
   3d6be:	81a3      	strh	r3, [r4, #12]
   3d6c0:	89a3      	ldrh	r3, [r4, #12]
   3d6c2:	431d      	orrs	r5, r3
   3d6c4:	81a5      	strh	r5, [r4, #12]
   3d6c6:	e7cd      	b.n	3d664 <__smakebuf_r+0x18>
   3d6c8:	0003d0a5 	.word	0x0003d0a5

0003d6cc <__malloc_lock>:
   3d6cc:	4801      	ldr	r0, [pc, #4]	; (3d6d4 <__malloc_lock+0x8>)
   3d6ce:	f003 bf7b 	b.w	415c8 <__retarget_lock_acquire_recursive>
   3d6d2:	bf00      	nop
   3d6d4:	2002bfb0 	.word	0x2002bfb0

0003d6d8 <__malloc_unlock>:
   3d6d8:	4801      	ldr	r0, [pc, #4]	; (3d6e0 <__malloc_unlock+0x8>)
   3d6da:	f003 bf76 	b.w	415ca <__retarget_lock_release_recursive>
   3d6de:	bf00      	nop
   3d6e0:	2002bfb0 	.word	0x2002bfb0

0003d6e4 <__pow5mult>:
   3d6e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3d6e8:	4615      	mov	r5, r2
   3d6ea:	f012 0203 	ands.w	r2, r2, #3
   3d6ee:	4606      	mov	r6, r0
   3d6f0:	460f      	mov	r7, r1
   3d6f2:	d007      	beq.n	3d704 <__pow5mult+0x20>
   3d6f4:	3a01      	subs	r2, #1
   3d6f6:	4c21      	ldr	r4, [pc, #132]	; (3d77c <__pow5mult+0x98>)
   3d6f8:	2300      	movs	r3, #0
   3d6fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   3d6fe:	f004 f800 	bl	41702 <__multadd>
   3d702:	4607      	mov	r7, r0
   3d704:	10ad      	asrs	r5, r5, #2
   3d706:	d035      	beq.n	3d774 <__pow5mult+0x90>
   3d708:	6a74      	ldr	r4, [r6, #36]	; 0x24
   3d70a:	b93c      	cbnz	r4, 3d71c <__pow5mult+0x38>
   3d70c:	2010      	movs	r0, #16
   3d70e:	f7fe fbb9 	bl	3be84 <malloc>
   3d712:	6270      	str	r0, [r6, #36]	; 0x24
   3d714:	6004      	str	r4, [r0, #0]
   3d716:	60c4      	str	r4, [r0, #12]
   3d718:	e9c0 4401 	strd	r4, r4, [r0, #4]
   3d71c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   3d720:	f8d8 4008 	ldr.w	r4, [r8, #8]
   3d724:	b94c      	cbnz	r4, 3d73a <__pow5mult+0x56>
   3d726:	f240 2171 	movw	r1, #625	; 0x271
   3d72a:	4630      	mov	r0, r6
   3d72c:	f004 f8b4 	bl	41898 <__i2b>
   3d730:	2300      	movs	r3, #0
   3d732:	4604      	mov	r4, r0
   3d734:	f8c8 0008 	str.w	r0, [r8, #8]
   3d738:	6003      	str	r3, [r0, #0]
   3d73a:	f04f 0800 	mov.w	r8, #0
   3d73e:	07eb      	lsls	r3, r5, #31
   3d740:	d50a      	bpl.n	3d758 <__pow5mult+0x74>
   3d742:	4639      	mov	r1, r7
   3d744:	4622      	mov	r2, r4
   3d746:	4630      	mov	r0, r6
   3d748:	f004 f8af 	bl	418aa <__multiply>
   3d74c:	4681      	mov	r9, r0
   3d74e:	4639      	mov	r1, r7
   3d750:	4630      	mov	r0, r6
   3d752:	464f      	mov	r7, r9
   3d754:	f003 ffbe 	bl	416d4 <_Bfree>
   3d758:	106d      	asrs	r5, r5, #1
   3d75a:	d00b      	beq.n	3d774 <__pow5mult+0x90>
   3d75c:	6820      	ldr	r0, [r4, #0]
   3d75e:	b938      	cbnz	r0, 3d770 <__pow5mult+0x8c>
   3d760:	4622      	mov	r2, r4
   3d762:	4621      	mov	r1, r4
   3d764:	4630      	mov	r0, r6
   3d766:	f004 f8a0 	bl	418aa <__multiply>
   3d76a:	6020      	str	r0, [r4, #0]
   3d76c:	f8c0 8000 	str.w	r8, [r0]
   3d770:	4604      	mov	r4, r0
   3d772:	e7e4      	b.n	3d73e <__pow5mult+0x5a>
   3d774:	4638      	mov	r0, r7
   3d776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3d77a:	bf00      	nop
   3d77c:	0004403c 	.word	0x0004403c

0003d780 <__ulp>:
   3d780:	4b10      	ldr	r3, [pc, #64]	; (3d7c4 <__ulp+0x44>)
   3d782:	ee10 2a90 	vmov	r2, s1
   3d786:	401a      	ands	r2, r3
   3d788:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   3d78c:	2b00      	cmp	r3, #0
   3d78e:	dd04      	ble.n	3d79a <__ulp+0x1a>
   3d790:	2000      	movs	r0, #0
   3d792:	4619      	mov	r1, r3
   3d794:	ec41 0b10 	vmov	d0, r0, r1
   3d798:	4770      	bx	lr
   3d79a:	425b      	negs	r3, r3
   3d79c:	2000      	movs	r0, #0
   3d79e:	2100      	movs	r1, #0
   3d7a0:	151b      	asrs	r3, r3, #20
   3d7a2:	2b13      	cmp	r3, #19
   3d7a4:	dc04      	bgt.n	3d7b0 <__ulp+0x30>
   3d7a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   3d7aa:	fa42 f103 	asr.w	r1, r2, r3
   3d7ae:	e7f1      	b.n	3d794 <__ulp+0x14>
   3d7b0:	3b14      	subs	r3, #20
   3d7b2:	2b1e      	cmp	r3, #30
   3d7b4:	bfd6      	itet	le
   3d7b6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   3d7ba:	2301      	movgt	r3, #1
   3d7bc:	fa22 f303 	lsrle.w	r3, r2, r3
   3d7c0:	4618      	mov	r0, r3
   3d7c2:	e7e7      	b.n	3d794 <__ulp+0x14>
   3d7c4:	7ff00000 	.word	0x7ff00000

0003d7c8 <__b2d>:
   3d7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d7ca:	6905      	ldr	r5, [r0, #16]
   3d7cc:	f100 0714 	add.w	r7, r0, #20
   3d7d0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   3d7d4:	f855 4c04 	ldr.w	r4, [r5, #-4]
   3d7d8:	1f2e      	subs	r6, r5, #4
   3d7da:	4620      	mov	r0, r4
   3d7dc:	f004 f80c 	bl	417f8 <__hi0bits>
   3d7e0:	f1c0 0320 	rsb	r3, r0, #32
   3d7e4:	280a      	cmp	r0, #10
   3d7e6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 3d864 <__b2d+0x9c>
   3d7ea:	600b      	str	r3, [r1, #0]
   3d7ec:	dc15      	bgt.n	3d81a <__b2d+0x52>
   3d7ee:	f1c0 0e0b 	rsb	lr, r0, #11
   3d7f2:	42b7      	cmp	r7, r6
   3d7f4:	f100 0015 	add.w	r0, r0, #21
   3d7f8:	fa24 f10e 	lsr.w	r1, r4, lr
   3d7fc:	fa04 f000 	lsl.w	r0, r4, r0
   3d800:	ea41 030c 	orr.w	r3, r1, ip
   3d804:	bf34      	ite	cc
   3d806:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   3d80a:	2100      	movcs	r1, #0
   3d80c:	fa21 f10e 	lsr.w	r1, r1, lr
   3d810:	ea40 0201 	orr.w	r2, r0, r1
   3d814:	ec43 2b10 	vmov	d0, r2, r3
   3d818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3d81a:	42b7      	cmp	r7, r6
   3d81c:	bf3a      	itte	cc
   3d81e:	f1a5 0608 	subcc.w	r6, r5, #8
   3d822:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   3d826:	2100      	movcs	r1, #0
   3d828:	380b      	subs	r0, #11
   3d82a:	d017      	beq.n	3d85c <__b2d+0x94>
   3d82c:	f1c0 0c20 	rsb	ip, r0, #32
   3d830:	fa04 f500 	lsl.w	r5, r4, r0
   3d834:	42be      	cmp	r6, r7
   3d836:	fa01 f000 	lsl.w	r0, r1, r0
   3d83a:	fa21 f40c 	lsr.w	r4, r1, ip
   3d83e:	ea45 0504 	orr.w	r5, r5, r4
   3d842:	bf8c      	ite	hi
   3d844:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   3d848:	2400      	movls	r4, #0
   3d84a:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   3d84e:	fa24 f40c 	lsr.w	r4, r4, ip
   3d852:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   3d856:	ea40 0204 	orr.w	r2, r0, r4
   3d85a:	e7db      	b.n	3d814 <__b2d+0x4c>
   3d85c:	ea44 030c 	orr.w	r3, r4, ip
   3d860:	460a      	mov	r2, r1
   3d862:	e7d7      	b.n	3d814 <__b2d+0x4c>
   3d864:	3ff00000 	.word	0x3ff00000

0003d868 <_svfiprintf_r>:
   3d868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d86c:	461e      	mov	r6, r3
   3d86e:	898b      	ldrh	r3, [r1, #12]
   3d870:	b09d      	sub	sp, #116	; 0x74
   3d872:	4607      	mov	r7, r0
   3d874:	061b      	lsls	r3, r3, #24
   3d876:	460d      	mov	r5, r1
   3d878:	4614      	mov	r4, r2
   3d87a:	d50e      	bpl.n	3d89a <_svfiprintf_r+0x32>
   3d87c:	690b      	ldr	r3, [r1, #16]
   3d87e:	b963      	cbnz	r3, 3d89a <_svfiprintf_r+0x32>
   3d880:	2140      	movs	r1, #64	; 0x40
   3d882:	f7fe fb5d 	bl	3bf40 <_malloc_r>
   3d886:	6028      	str	r0, [r5, #0]
   3d888:	6128      	str	r0, [r5, #16]
   3d88a:	b920      	cbnz	r0, 3d896 <_svfiprintf_r+0x2e>
   3d88c:	230c      	movs	r3, #12
   3d88e:	603b      	str	r3, [r7, #0]
   3d890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3d894:	e0c9      	b.n	3da2a <_svfiprintf_r+0x1c2>
   3d896:	2340      	movs	r3, #64	; 0x40
   3d898:	616b      	str	r3, [r5, #20]
   3d89a:	2300      	movs	r3, #0
   3d89c:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 3da44 <_svfiprintf_r+0x1dc>
   3d8a0:	f04f 0a01 	mov.w	sl, #1
   3d8a4:	9603      	str	r6, [sp, #12]
   3d8a6:	9309      	str	r3, [sp, #36]	; 0x24
   3d8a8:	2320      	movs	r3, #32
   3d8aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   3d8ae:	2330      	movs	r3, #48	; 0x30
   3d8b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   3d8b4:	4623      	mov	r3, r4
   3d8b6:	461e      	mov	r6, r3
   3d8b8:	f813 2b01 	ldrb.w	r2, [r3], #1
   3d8bc:	b10a      	cbz	r2, 3d8c2 <_svfiprintf_r+0x5a>
   3d8be:	2a25      	cmp	r2, #37	; 0x25
   3d8c0:	d1f9      	bne.n	3d8b6 <_svfiprintf_r+0x4e>
   3d8c2:	ebb6 0b04 	subs.w	fp, r6, r4
   3d8c6:	d00b      	beq.n	3d8e0 <_svfiprintf_r+0x78>
   3d8c8:	465b      	mov	r3, fp
   3d8ca:	4622      	mov	r2, r4
   3d8cc:	4629      	mov	r1, r5
   3d8ce:	4638      	mov	r0, r7
   3d8d0:	f004 fa37 	bl	41d42 <__ssputs_r>
   3d8d4:	3001      	adds	r0, #1
   3d8d6:	f000 80a3 	beq.w	3da20 <_svfiprintf_r+0x1b8>
   3d8da:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3d8dc:	445b      	add	r3, fp
   3d8de:	9309      	str	r3, [sp, #36]	; 0x24
   3d8e0:	7833      	ldrb	r3, [r6, #0]
   3d8e2:	2b00      	cmp	r3, #0
   3d8e4:	f000 809c 	beq.w	3da20 <_svfiprintf_r+0x1b8>
   3d8e8:	2300      	movs	r3, #0
   3d8ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3d8ee:	3601      	adds	r6, #1
   3d8f0:	9304      	str	r3, [sp, #16]
   3d8f2:	9307      	str	r3, [sp, #28]
   3d8f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   3d8f8:	931a      	str	r3, [sp, #104]	; 0x68
   3d8fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
   3d8fe:	4634      	mov	r4, r6
   3d900:	2205      	movs	r2, #5
   3d902:	4850      	ldr	r0, [pc, #320]	; (3da44 <_svfiprintf_r+0x1dc>)
   3d904:	f814 1b01 	ldrb.w	r1, [r4], #1
   3d908:	f003 fa0e 	bl	40d28 <memchr>
   3d90c:	9b04      	ldr	r3, [sp, #16]
   3d90e:	b9c0      	cbnz	r0, 3d942 <_svfiprintf_r+0xda>
   3d910:	06d9      	lsls	r1, r3, #27
   3d912:	bf44      	itt	mi
   3d914:	2220      	movmi	r2, #32
   3d916:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   3d91a:	071a      	lsls	r2, r3, #28
   3d91c:	bf44      	itt	mi
   3d91e:	222b      	movmi	r2, #43	; 0x2b
   3d920:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   3d924:	7832      	ldrb	r2, [r6, #0]
   3d926:	2a2a      	cmp	r2, #42	; 0x2a
   3d928:	d013      	beq.n	3d952 <_svfiprintf_r+0xea>
   3d92a:	4634      	mov	r4, r6
   3d92c:	9a07      	ldr	r2, [sp, #28]
   3d92e:	2000      	movs	r0, #0
   3d930:	260a      	movs	r6, #10
   3d932:	4621      	mov	r1, r4
   3d934:	f811 3b01 	ldrb.w	r3, [r1], #1
   3d938:	3b30      	subs	r3, #48	; 0x30
   3d93a:	2b09      	cmp	r3, #9
   3d93c:	d94b      	bls.n	3d9d6 <_svfiprintf_r+0x16e>
   3d93e:	b970      	cbnz	r0, 3d95e <_svfiprintf_r+0xf6>
   3d940:	e014      	b.n	3d96c <_svfiprintf_r+0x104>
   3d942:	eba0 0009 	sub.w	r0, r0, r9
   3d946:	4626      	mov	r6, r4
   3d948:	fa0a f000 	lsl.w	r0, sl, r0
   3d94c:	4318      	orrs	r0, r3
   3d94e:	9004      	str	r0, [sp, #16]
   3d950:	e7d5      	b.n	3d8fe <_svfiprintf_r+0x96>
   3d952:	9a03      	ldr	r2, [sp, #12]
   3d954:	1d11      	adds	r1, r2, #4
   3d956:	6812      	ldr	r2, [r2, #0]
   3d958:	2a00      	cmp	r2, #0
   3d95a:	9103      	str	r1, [sp, #12]
   3d95c:	db01      	blt.n	3d962 <_svfiprintf_r+0xfa>
   3d95e:	9207      	str	r2, [sp, #28]
   3d960:	e004      	b.n	3d96c <_svfiprintf_r+0x104>
   3d962:	4252      	negs	r2, r2
   3d964:	f043 0302 	orr.w	r3, r3, #2
   3d968:	9207      	str	r2, [sp, #28]
   3d96a:	9304      	str	r3, [sp, #16]
   3d96c:	7823      	ldrb	r3, [r4, #0]
   3d96e:	2b2e      	cmp	r3, #46	; 0x2e
   3d970:	d10c      	bne.n	3d98c <_svfiprintf_r+0x124>
   3d972:	7863      	ldrb	r3, [r4, #1]
   3d974:	2b2a      	cmp	r3, #42	; 0x2a
   3d976:	d133      	bne.n	3d9e0 <_svfiprintf_r+0x178>
   3d978:	9b03      	ldr	r3, [sp, #12]
   3d97a:	3402      	adds	r4, #2
   3d97c:	1d1a      	adds	r2, r3, #4
   3d97e:	681b      	ldr	r3, [r3, #0]
   3d980:	2b00      	cmp	r3, #0
   3d982:	9203      	str	r2, [sp, #12]
   3d984:	bfb8      	it	lt
   3d986:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   3d98a:	9305      	str	r3, [sp, #20]
   3d98c:	4e2e      	ldr	r6, [pc, #184]	; (3da48 <_svfiprintf_r+0x1e0>)
   3d98e:	2203      	movs	r2, #3
   3d990:	7821      	ldrb	r1, [r4, #0]
   3d992:	4630      	mov	r0, r6
   3d994:	f003 f9c8 	bl	40d28 <memchr>
   3d998:	b138      	cbz	r0, 3d9aa <_svfiprintf_r+0x142>
   3d99a:	2340      	movs	r3, #64	; 0x40
   3d99c:	1b80      	subs	r0, r0, r6
   3d99e:	3401      	adds	r4, #1
   3d9a0:	fa03 f000 	lsl.w	r0, r3, r0
   3d9a4:	9b04      	ldr	r3, [sp, #16]
   3d9a6:	4303      	orrs	r3, r0
   3d9a8:	9304      	str	r3, [sp, #16]
   3d9aa:	f814 1b01 	ldrb.w	r1, [r4], #1
   3d9ae:	2206      	movs	r2, #6
   3d9b0:	4826      	ldr	r0, [pc, #152]	; (3da4c <_svfiprintf_r+0x1e4>)
   3d9b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   3d9b6:	f003 f9b7 	bl	40d28 <memchr>
   3d9ba:	2800      	cmp	r0, #0
   3d9bc:	d038      	beq.n	3da30 <_svfiprintf_r+0x1c8>
   3d9be:	4b24      	ldr	r3, [pc, #144]	; (3da50 <_svfiprintf_r+0x1e8>)
   3d9c0:	bb13      	cbnz	r3, 3da08 <_svfiprintf_r+0x1a0>
   3d9c2:	9b03      	ldr	r3, [sp, #12]
   3d9c4:	3307      	adds	r3, #7
   3d9c6:	f023 0307 	bic.w	r3, r3, #7
   3d9ca:	3308      	adds	r3, #8
   3d9cc:	9303      	str	r3, [sp, #12]
   3d9ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3d9d0:	4443      	add	r3, r8
   3d9d2:	9309      	str	r3, [sp, #36]	; 0x24
   3d9d4:	e76e      	b.n	3d8b4 <_svfiprintf_r+0x4c>
   3d9d6:	fb06 3202 	mla	r2, r6, r2, r3
   3d9da:	2001      	movs	r0, #1
   3d9dc:	460c      	mov	r4, r1
   3d9de:	e7a8      	b.n	3d932 <_svfiprintf_r+0xca>
   3d9e0:	2300      	movs	r3, #0
   3d9e2:	3401      	adds	r4, #1
   3d9e4:	260a      	movs	r6, #10
   3d9e6:	4619      	mov	r1, r3
   3d9e8:	9305      	str	r3, [sp, #20]
   3d9ea:	4620      	mov	r0, r4
   3d9ec:	f810 2b01 	ldrb.w	r2, [r0], #1
   3d9f0:	3a30      	subs	r2, #48	; 0x30
   3d9f2:	2a09      	cmp	r2, #9
   3d9f4:	d903      	bls.n	3d9fe <_svfiprintf_r+0x196>
   3d9f6:	2b00      	cmp	r3, #0
   3d9f8:	d0c8      	beq.n	3d98c <_svfiprintf_r+0x124>
   3d9fa:	9105      	str	r1, [sp, #20]
   3d9fc:	e7c6      	b.n	3d98c <_svfiprintf_r+0x124>
   3d9fe:	fb06 2101 	mla	r1, r6, r1, r2
   3da02:	2301      	movs	r3, #1
   3da04:	4604      	mov	r4, r0
   3da06:	e7f0      	b.n	3d9ea <_svfiprintf_r+0x182>
   3da08:	ab03      	add	r3, sp, #12
   3da0a:	462a      	mov	r2, r5
   3da0c:	a904      	add	r1, sp, #16
   3da0e:	4638      	mov	r0, r7
   3da10:	9300      	str	r3, [sp, #0]
   3da12:	4b10      	ldr	r3, [pc, #64]	; (3da54 <_svfiprintf_r+0x1ec>)
   3da14:	f7fe fc16 	bl	3c244 <_printf_float>
   3da18:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   3da1c:	4680      	mov	r8, r0
   3da1e:	d1d6      	bne.n	3d9ce <_svfiprintf_r+0x166>
   3da20:	89ab      	ldrh	r3, [r5, #12]
   3da22:	065b      	lsls	r3, r3, #25
   3da24:	f53f af34 	bmi.w	3d890 <_svfiprintf_r+0x28>
   3da28:	9809      	ldr	r0, [sp, #36]	; 0x24
   3da2a:	b01d      	add	sp, #116	; 0x74
   3da2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3da30:	ab03      	add	r3, sp, #12
   3da32:	462a      	mov	r2, r5
   3da34:	a904      	add	r1, sp, #16
   3da36:	4638      	mov	r0, r7
   3da38:	9300      	str	r3, [sp, #0]
   3da3a:	4b06      	ldr	r3, [pc, #24]	; (3da54 <_svfiprintf_r+0x1ec>)
   3da3c:	f7fe fe2c 	bl	3c698 <_printf_i>
   3da40:	e7ea      	b.n	3da18 <_svfiprintf_r+0x1b0>
   3da42:	bf00      	nop
   3da44:	000497aa 	.word	0x000497aa
   3da48:	000497b0 	.word	0x000497b0
   3da4c:	000497b4 	.word	0x000497b4
   3da50:	0003c245 	.word	0x0003c245
   3da54:	00041d43 	.word	0x00041d43

0003da58 <__ssvfiscanf_r>:
   3da58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3da5c:	460c      	mov	r4, r1
   3da5e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
   3da62:	2100      	movs	r1, #0
   3da64:	4606      	mov	r6, r0
   3da66:	f10d 0804 	add.w	r8, sp, #4
   3da6a:	4f9b      	ldr	r7, [pc, #620]	; (3dcd8 <__ssvfiscanf_r+0x280>)
   3da6c:	f8df 9274 	ldr.w	r9, [pc, #628]	; 3dce4 <__ssvfiscanf_r+0x28c>
   3da70:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   3da74:	9300      	str	r3, [sp, #0]
   3da76:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   3da7a:	4998      	ldr	r1, [pc, #608]	; (3dcdc <__ssvfiscanf_r+0x284>)
   3da7c:	91a0      	str	r1, [sp, #640]	; 0x280
   3da7e:	4998      	ldr	r1, [pc, #608]	; (3dce0 <__ssvfiscanf_r+0x288>)
   3da80:	91a1      	str	r1, [sp, #644]	; 0x284
   3da82:	f892 a000 	ldrb.w	sl, [r2]
   3da86:	f1ba 0f00 	cmp.w	sl, #0
   3da8a:	f000 8122 	beq.w	3dcd2 <__ssvfiscanf_r+0x27a>
   3da8e:	f81a 3007 	ldrb.w	r3, [sl, r7]
   3da92:	1c55      	adds	r5, r2, #1
   3da94:	f013 0308 	ands.w	r3, r3, #8
   3da98:	d019      	beq.n	3dace <__ssvfiscanf_r+0x76>
   3da9a:	6863      	ldr	r3, [r4, #4]
   3da9c:	2b00      	cmp	r3, #0
   3da9e:	dd0f      	ble.n	3dac0 <__ssvfiscanf_r+0x68>
   3daa0:	6823      	ldr	r3, [r4, #0]
   3daa2:	781a      	ldrb	r2, [r3, #0]
   3daa4:	5cba      	ldrb	r2, [r7, r2]
   3daa6:	0712      	lsls	r2, r2, #28
   3daa8:	d401      	bmi.n	3daae <__ssvfiscanf_r+0x56>
   3daaa:	462a      	mov	r2, r5
   3daac:	e7e9      	b.n	3da82 <__ssvfiscanf_r+0x2a>
   3daae:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3dab0:	3301      	adds	r3, #1
   3dab2:	3201      	adds	r2, #1
   3dab4:	6023      	str	r3, [r4, #0]
   3dab6:	9245      	str	r2, [sp, #276]	; 0x114
   3dab8:	6862      	ldr	r2, [r4, #4]
   3daba:	3a01      	subs	r2, #1
   3dabc:	6062      	str	r2, [r4, #4]
   3dabe:	e7ec      	b.n	3da9a <__ssvfiscanf_r+0x42>
   3dac0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3dac2:	4621      	mov	r1, r4
   3dac4:	4630      	mov	r0, r6
   3dac6:	4798      	blx	r3
   3dac8:	2800      	cmp	r0, #0
   3daca:	d0e9      	beq.n	3daa0 <__ssvfiscanf_r+0x48>
   3dacc:	e7ed      	b.n	3daaa <__ssvfiscanf_r+0x52>
   3dace:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
   3dad2:	d17f      	bne.n	3dbd4 <__ssvfiscanf_r+0x17c>
   3dad4:	9341      	str	r3, [sp, #260]	; 0x104
   3dad6:	9343      	str	r3, [sp, #268]	; 0x10c
   3dad8:	7853      	ldrb	r3, [r2, #1]
   3dada:	2b2a      	cmp	r3, #42	; 0x2a
   3dadc:	bf04      	itt	eq
   3dade:	2310      	moveq	r3, #16
   3dae0:	1c95      	addeq	r5, r2, #2
   3dae2:	f04f 020a 	mov.w	r2, #10
   3dae6:	bf08      	it	eq
   3dae8:	9341      	streq	r3, [sp, #260]	; 0x104
   3daea:	46ab      	mov	fp, r5
   3daec:	f81b 1b01 	ldrb.w	r1, [fp], #1
   3daf0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   3daf4:	2b09      	cmp	r3, #9
   3daf6:	d921      	bls.n	3db3c <__ssvfiscanf_r+0xe4>
   3daf8:	2203      	movs	r2, #3
   3dafa:	487a      	ldr	r0, [pc, #488]	; (3dce4 <__ssvfiscanf_r+0x28c>)
   3dafc:	f003 f914 	bl	40d28 <memchr>
   3db00:	b138      	cbz	r0, 3db12 <__ssvfiscanf_r+0xba>
   3db02:	eba0 0309 	sub.w	r3, r0, r9
   3db06:	2001      	movs	r0, #1
   3db08:	465d      	mov	r5, fp
   3db0a:	4098      	lsls	r0, r3
   3db0c:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3db0e:	4318      	orrs	r0, r3
   3db10:	9041      	str	r0, [sp, #260]	; 0x104
   3db12:	f815 3b01 	ldrb.w	r3, [r5], #1
   3db16:	2b67      	cmp	r3, #103	; 0x67
   3db18:	d848      	bhi.n	3dbac <__ssvfiscanf_r+0x154>
   3db1a:	2b65      	cmp	r3, #101	; 0x65
   3db1c:	f080 809f 	bcs.w	3dc5e <__ssvfiscanf_r+0x206>
   3db20:	2b47      	cmp	r3, #71	; 0x47
   3db22:	d812      	bhi.n	3db4a <__ssvfiscanf_r+0xf2>
   3db24:	2b45      	cmp	r3, #69	; 0x45
   3db26:	f080 809a 	bcs.w	3dc5e <__ssvfiscanf_r+0x206>
   3db2a:	2b00      	cmp	r3, #0
   3db2c:	d06b      	beq.n	3dc06 <__ssvfiscanf_r+0x1ae>
   3db2e:	2b25      	cmp	r3, #37	; 0x25
   3db30:	d050      	beq.n	3dbd4 <__ssvfiscanf_r+0x17c>
   3db32:	2303      	movs	r3, #3
   3db34:	9347      	str	r3, [sp, #284]	; 0x11c
   3db36:	230a      	movs	r3, #10
   3db38:	9342      	str	r3, [sp, #264]	; 0x108
   3db3a:	e016      	b.n	3db6a <__ssvfiscanf_r+0x112>
   3db3c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   3db3e:	465d      	mov	r5, fp
   3db40:	fb02 1303 	mla	r3, r2, r3, r1
   3db44:	3b30      	subs	r3, #48	; 0x30
   3db46:	9343      	str	r3, [sp, #268]	; 0x10c
   3db48:	e7cf      	b.n	3daea <__ssvfiscanf_r+0x92>
   3db4a:	2b5b      	cmp	r3, #91	; 0x5b
   3db4c:	d067      	beq.n	3dc1e <__ssvfiscanf_r+0x1c6>
   3db4e:	d827      	bhi.n	3dba0 <__ssvfiscanf_r+0x148>
   3db50:	2b58      	cmp	r3, #88	; 0x58
   3db52:	d1ee      	bne.n	3db32 <__ssvfiscanf_r+0xda>
   3db54:	9a41      	ldr	r2, [sp, #260]	; 0x104
   3db56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   3db5a:	9241      	str	r2, [sp, #260]	; 0x104
   3db5c:	2210      	movs	r2, #16
   3db5e:	2b6f      	cmp	r3, #111	; 0x6f
   3db60:	9242      	str	r2, [sp, #264]	; 0x108
   3db62:	bf34      	ite	cc
   3db64:	2303      	movcc	r3, #3
   3db66:	2304      	movcs	r3, #4
   3db68:	9347      	str	r3, [sp, #284]	; 0x11c
   3db6a:	6863      	ldr	r3, [r4, #4]
   3db6c:	2b00      	cmp	r3, #0
   3db6e:	dd78      	ble.n	3dc62 <__ssvfiscanf_r+0x20a>
   3db70:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3db72:	0659      	lsls	r1, r3, #25
   3db74:	d404      	bmi.n	3db80 <__ssvfiscanf_r+0x128>
   3db76:	6823      	ldr	r3, [r4, #0]
   3db78:	781a      	ldrb	r2, [r3, #0]
   3db7a:	5cba      	ldrb	r2, [r7, r2]
   3db7c:	0712      	lsls	r2, r2, #28
   3db7e:	d477      	bmi.n	3dc70 <__ssvfiscanf_r+0x218>
   3db80:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   3db82:	2b02      	cmp	r3, #2
   3db84:	f300 8087 	bgt.w	3dc96 <__ssvfiscanf_r+0x23e>
   3db88:	466b      	mov	r3, sp
   3db8a:	4622      	mov	r2, r4
   3db8c:	a941      	add	r1, sp, #260	; 0x104
   3db8e:	4630      	mov	r0, r6
   3db90:	f000 f8ac 	bl	3dcec <_scanf_chars>
   3db94:	2801      	cmp	r0, #1
   3db96:	f000 809c 	beq.w	3dcd2 <__ssvfiscanf_r+0x27a>
   3db9a:	2802      	cmp	r0, #2
   3db9c:	d185      	bne.n	3daaa <__ssvfiscanf_r+0x52>
   3db9e:	e02f      	b.n	3dc00 <__ssvfiscanf_r+0x1a8>
   3dba0:	2b63      	cmp	r3, #99	; 0x63
   3dba2:	d047      	beq.n	3dc34 <__ssvfiscanf_r+0x1dc>
   3dba4:	2b64      	cmp	r3, #100	; 0x64
   3dba6:	d1c4      	bne.n	3db32 <__ssvfiscanf_r+0xda>
   3dba8:	220a      	movs	r2, #10
   3dbaa:	e7d8      	b.n	3db5e <__ssvfiscanf_r+0x106>
   3dbac:	2b70      	cmp	r3, #112	; 0x70
   3dbae:	d02d      	beq.n	3dc0c <__ssvfiscanf_r+0x1b4>
   3dbb0:	d808      	bhi.n	3dbc4 <__ssvfiscanf_r+0x16c>
   3dbb2:	2b6e      	cmp	r3, #110	; 0x6e
   3dbb4:	d044      	beq.n	3dc40 <__ssvfiscanf_r+0x1e8>
   3dbb6:	d82e      	bhi.n	3dc16 <__ssvfiscanf_r+0x1be>
   3dbb8:	2b69      	cmp	r3, #105	; 0x69
   3dbba:	d1ba      	bne.n	3db32 <__ssvfiscanf_r+0xda>
   3dbbc:	2300      	movs	r3, #0
   3dbbe:	9342      	str	r3, [sp, #264]	; 0x108
   3dbc0:	2303      	movs	r3, #3
   3dbc2:	e7d1      	b.n	3db68 <__ssvfiscanf_r+0x110>
   3dbc4:	2b75      	cmp	r3, #117	; 0x75
   3dbc6:	d0ef      	beq.n	3dba8 <__ssvfiscanf_r+0x150>
   3dbc8:	2b78      	cmp	r3, #120	; 0x78
   3dbca:	d0c3      	beq.n	3db54 <__ssvfiscanf_r+0xfc>
   3dbcc:	2b73      	cmp	r3, #115	; 0x73
   3dbce:	d1b0      	bne.n	3db32 <__ssvfiscanf_r+0xda>
   3dbd0:	2302      	movs	r3, #2
   3dbd2:	e7c9      	b.n	3db68 <__ssvfiscanf_r+0x110>
   3dbd4:	6863      	ldr	r3, [r4, #4]
   3dbd6:	2b00      	cmp	r3, #0
   3dbd8:	dd0c      	ble.n	3dbf4 <__ssvfiscanf_r+0x19c>
   3dbda:	6823      	ldr	r3, [r4, #0]
   3dbdc:	781a      	ldrb	r2, [r3, #0]
   3dbde:	4552      	cmp	r2, sl
   3dbe0:	d177      	bne.n	3dcd2 <__ssvfiscanf_r+0x27a>
   3dbe2:	3301      	adds	r3, #1
   3dbe4:	6862      	ldr	r2, [r4, #4]
   3dbe6:	6023      	str	r3, [r4, #0]
   3dbe8:	3a01      	subs	r2, #1
   3dbea:	9b45      	ldr	r3, [sp, #276]	; 0x114
   3dbec:	6062      	str	r2, [r4, #4]
   3dbee:	3301      	adds	r3, #1
   3dbf0:	9345      	str	r3, [sp, #276]	; 0x114
   3dbf2:	e75a      	b.n	3daaa <__ssvfiscanf_r+0x52>
   3dbf4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3dbf6:	4621      	mov	r1, r4
   3dbf8:	4630      	mov	r0, r6
   3dbfa:	4798      	blx	r3
   3dbfc:	2800      	cmp	r0, #0
   3dbfe:	d0ec      	beq.n	3dbda <__ssvfiscanf_r+0x182>
   3dc00:	9844      	ldr	r0, [sp, #272]	; 0x110
   3dc02:	2800      	cmp	r0, #0
   3dc04:	d15b      	bne.n	3dcbe <__ssvfiscanf_r+0x266>
   3dc06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3dc0a:	e05e      	b.n	3dcca <__ssvfiscanf_r+0x272>
   3dc0c:	9a41      	ldr	r2, [sp, #260]	; 0x104
   3dc0e:	f042 0220 	orr.w	r2, r2, #32
   3dc12:	9241      	str	r2, [sp, #260]	; 0x104
   3dc14:	e79e      	b.n	3db54 <__ssvfiscanf_r+0xfc>
   3dc16:	2308      	movs	r3, #8
   3dc18:	9342      	str	r3, [sp, #264]	; 0x108
   3dc1a:	2304      	movs	r3, #4
   3dc1c:	e7a4      	b.n	3db68 <__ssvfiscanf_r+0x110>
   3dc1e:	4629      	mov	r1, r5
   3dc20:	4640      	mov	r0, r8
   3dc22:	f004 f943 	bl	41eac <__sccl>
   3dc26:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3dc28:	4605      	mov	r5, r0
   3dc2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3dc2e:	9341      	str	r3, [sp, #260]	; 0x104
   3dc30:	2301      	movs	r3, #1
   3dc32:	e799      	b.n	3db68 <__ssvfiscanf_r+0x110>
   3dc34:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3dc36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3dc3a:	9341      	str	r3, [sp, #260]	; 0x104
   3dc3c:	2300      	movs	r3, #0
   3dc3e:	e793      	b.n	3db68 <__ssvfiscanf_r+0x110>
   3dc40:	9841      	ldr	r0, [sp, #260]	; 0x104
   3dc42:	06c3      	lsls	r3, r0, #27
   3dc44:	f53f af31 	bmi.w	3daaa <__ssvfiscanf_r+0x52>
   3dc48:	9b00      	ldr	r3, [sp, #0]
   3dc4a:	07c0      	lsls	r0, r0, #31
   3dc4c:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3dc4e:	f103 0104 	add.w	r1, r3, #4
   3dc52:	9100      	str	r1, [sp, #0]
   3dc54:	681b      	ldr	r3, [r3, #0]
   3dc56:	bf4c      	ite	mi
   3dc58:	801a      	strhmi	r2, [r3, #0]
   3dc5a:	601a      	strpl	r2, [r3, #0]
   3dc5c:	e725      	b.n	3daaa <__ssvfiscanf_r+0x52>
   3dc5e:	2305      	movs	r3, #5
   3dc60:	e782      	b.n	3db68 <__ssvfiscanf_r+0x110>
   3dc62:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3dc64:	4621      	mov	r1, r4
   3dc66:	4630      	mov	r0, r6
   3dc68:	4798      	blx	r3
   3dc6a:	2800      	cmp	r0, #0
   3dc6c:	d080      	beq.n	3db70 <__ssvfiscanf_r+0x118>
   3dc6e:	e7c7      	b.n	3dc00 <__ssvfiscanf_r+0x1a8>
   3dc70:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3dc72:	3201      	adds	r2, #1
   3dc74:	9245      	str	r2, [sp, #276]	; 0x114
   3dc76:	6862      	ldr	r2, [r4, #4]
   3dc78:	3a01      	subs	r2, #1
   3dc7a:	2a00      	cmp	r2, #0
   3dc7c:	6062      	str	r2, [r4, #4]
   3dc7e:	dd02      	ble.n	3dc86 <__ssvfiscanf_r+0x22e>
   3dc80:	3301      	adds	r3, #1
   3dc82:	6023      	str	r3, [r4, #0]
   3dc84:	e777      	b.n	3db76 <__ssvfiscanf_r+0x11e>
   3dc86:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3dc88:	4621      	mov	r1, r4
   3dc8a:	4630      	mov	r0, r6
   3dc8c:	4798      	blx	r3
   3dc8e:	2800      	cmp	r0, #0
   3dc90:	f43f af71 	beq.w	3db76 <__ssvfiscanf_r+0x11e>
   3dc94:	e7b4      	b.n	3dc00 <__ssvfiscanf_r+0x1a8>
   3dc96:	2b04      	cmp	r3, #4
   3dc98:	dc06      	bgt.n	3dca8 <__ssvfiscanf_r+0x250>
   3dc9a:	466b      	mov	r3, sp
   3dc9c:	4622      	mov	r2, r4
   3dc9e:	a941      	add	r1, sp, #260	; 0x104
   3dca0:	4630      	mov	r0, r6
   3dca2:	f000 f87b 	bl	3dd9c <_scanf_i>
   3dca6:	e775      	b.n	3db94 <__ssvfiscanf_r+0x13c>
   3dca8:	4b0f      	ldr	r3, [pc, #60]	; (3dce8 <__ssvfiscanf_r+0x290>)
   3dcaa:	2b00      	cmp	r3, #0
   3dcac:	f43f aefd 	beq.w	3daaa <__ssvfiscanf_r+0x52>
   3dcb0:	466b      	mov	r3, sp
   3dcb2:	4622      	mov	r2, r4
   3dcb4:	a941      	add	r1, sp, #260	; 0x104
   3dcb6:	4630      	mov	r0, r6
   3dcb8:	e000      	b.n	3dcbc <__ssvfiscanf_r+0x264>
   3dcba:	bf00      	nop
   3dcbc:	e76a      	b.n	3db94 <__ssvfiscanf_r+0x13c>
   3dcbe:	89a3      	ldrh	r3, [r4, #12]
   3dcc0:	f013 0f40 	tst.w	r3, #64	; 0x40
   3dcc4:	bf18      	it	ne
   3dcc6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   3dcca:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
   3dcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3dcd2:	9844      	ldr	r0, [sp, #272]	; 0x110
   3dcd4:	e7f9      	b.n	3dcca <__ssvfiscanf_r+0x272>
   3dcd6:	bf00      	nop
   3dcd8:	000496aa 	.word	0x000496aa
   3dcdc:	00041df9 	.word	0x00041df9
   3dce0:	00041e73 	.word	0x00041e73
   3dce4:	000497b0 	.word	0x000497b0
   3dce8:	00000000 	.word	0x00000000

0003dcec <_scanf_chars>:
   3dcec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3dcf0:	4615      	mov	r5, r2
   3dcf2:	688a      	ldr	r2, [r1, #8]
   3dcf4:	4680      	mov	r8, r0
   3dcf6:	460c      	mov	r4, r1
   3dcf8:	b932      	cbnz	r2, 3dd08 <_scanf_chars+0x1c>
   3dcfa:	698a      	ldr	r2, [r1, #24]
   3dcfc:	2a00      	cmp	r2, #0
   3dcfe:	bf0c      	ite	eq
   3dd00:	2201      	moveq	r2, #1
   3dd02:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   3dd06:	608a      	str	r2, [r1, #8]
   3dd08:	6822      	ldr	r2, [r4, #0]
   3dd0a:	2700      	movs	r7, #0
   3dd0c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 3dd98 <_scanf_chars+0xac>
   3dd10:	06d1      	lsls	r1, r2, #27
   3dd12:	bf5f      	itttt	pl
   3dd14:	681a      	ldrpl	r2, [r3, #0]
   3dd16:	1d11      	addpl	r1, r2, #4
   3dd18:	6019      	strpl	r1, [r3, #0]
   3dd1a:	6816      	ldrpl	r6, [r2, #0]
   3dd1c:	69a0      	ldr	r0, [r4, #24]
   3dd1e:	b188      	cbz	r0, 3dd44 <_scanf_chars+0x58>
   3dd20:	2801      	cmp	r0, #1
   3dd22:	d107      	bne.n	3dd34 <_scanf_chars+0x48>
   3dd24:	682b      	ldr	r3, [r5, #0]
   3dd26:	781a      	ldrb	r2, [r3, #0]
   3dd28:	6963      	ldr	r3, [r4, #20]
   3dd2a:	5c9b      	ldrb	r3, [r3, r2]
   3dd2c:	b953      	cbnz	r3, 3dd44 <_scanf_chars+0x58>
   3dd2e:	bb27      	cbnz	r7, 3dd7a <_scanf_chars+0x8e>
   3dd30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3dd34:	2802      	cmp	r0, #2
   3dd36:	d120      	bne.n	3dd7a <_scanf_chars+0x8e>
   3dd38:	682b      	ldr	r3, [r5, #0]
   3dd3a:	781b      	ldrb	r3, [r3, #0]
   3dd3c:	f813 3009 	ldrb.w	r3, [r3, r9]
   3dd40:	071b      	lsls	r3, r3, #28
   3dd42:	d41a      	bmi.n	3dd7a <_scanf_chars+0x8e>
   3dd44:	6823      	ldr	r3, [r4, #0]
   3dd46:	3701      	adds	r7, #1
   3dd48:	06da      	lsls	r2, r3, #27
   3dd4a:	bf5e      	ittt	pl
   3dd4c:	682b      	ldrpl	r3, [r5, #0]
   3dd4e:	781b      	ldrbpl	r3, [r3, #0]
   3dd50:	f806 3b01 	strbpl.w	r3, [r6], #1
   3dd54:	682a      	ldr	r2, [r5, #0]
   3dd56:	686b      	ldr	r3, [r5, #4]
   3dd58:	3201      	adds	r2, #1
   3dd5a:	3b01      	subs	r3, #1
   3dd5c:	602a      	str	r2, [r5, #0]
   3dd5e:	68a2      	ldr	r2, [r4, #8]
   3dd60:	606b      	str	r3, [r5, #4]
   3dd62:	3a01      	subs	r2, #1
   3dd64:	60a2      	str	r2, [r4, #8]
   3dd66:	b142      	cbz	r2, 3dd7a <_scanf_chars+0x8e>
   3dd68:	2b00      	cmp	r3, #0
   3dd6a:	dcd7      	bgt.n	3dd1c <_scanf_chars+0x30>
   3dd6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   3dd70:	4629      	mov	r1, r5
   3dd72:	4640      	mov	r0, r8
   3dd74:	4798      	blx	r3
   3dd76:	2800      	cmp	r0, #0
   3dd78:	d0d0      	beq.n	3dd1c <_scanf_chars+0x30>
   3dd7a:	6823      	ldr	r3, [r4, #0]
   3dd7c:	f013 0310 	ands.w	r3, r3, #16
   3dd80:	d105      	bne.n	3dd8e <_scanf_chars+0xa2>
   3dd82:	68e2      	ldr	r2, [r4, #12]
   3dd84:	3201      	adds	r2, #1
   3dd86:	60e2      	str	r2, [r4, #12]
   3dd88:	69a2      	ldr	r2, [r4, #24]
   3dd8a:	b102      	cbz	r2, 3dd8e <_scanf_chars+0xa2>
   3dd8c:	7033      	strb	r3, [r6, #0]
   3dd8e:	6923      	ldr	r3, [r4, #16]
   3dd90:	2000      	movs	r0, #0
   3dd92:	441f      	add	r7, r3
   3dd94:	6127      	str	r7, [r4, #16]
   3dd96:	e7cb      	b.n	3dd30 <_scanf_chars+0x44>
   3dd98:	000496aa 	.word	0x000496aa

0003dd9c <_scanf_i>:
   3dd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3dda0:	4699      	mov	r9, r3
   3dda2:	b087      	sub	sp, #28
   3dda4:	4b72      	ldr	r3, [pc, #456]	; (3df70 <_scanf_i+0x1d4>)
   3dda6:	460c      	mov	r4, r1
   3dda8:	4682      	mov	sl, r0
   3ddaa:	4616      	mov	r6, r2
   3ddac:	4627      	mov	r7, r4
   3ddae:	f04f 0b00 	mov.w	fp, #0
   3ddb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   3ddb6:	ab03      	add	r3, sp, #12
   3ddb8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   3ddbc:	4b6d      	ldr	r3, [pc, #436]	; (3df74 <_scanf_i+0x1d8>)
   3ddbe:	69a1      	ldr	r1, [r4, #24]
   3ddc0:	4a6d      	ldr	r2, [pc, #436]	; (3df78 <_scanf_i+0x1dc>)
   3ddc2:	2903      	cmp	r1, #3
   3ddc4:	bf18      	it	ne
   3ddc6:	461a      	movne	r2, r3
   3ddc8:	68a3      	ldr	r3, [r4, #8]
   3ddca:	9201      	str	r2, [sp, #4]
   3ddcc:	1e5a      	subs	r2, r3, #1
   3ddce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   3ddd2:	bf89      	itett	hi
   3ddd4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   3ddd8:	f04f 0800 	movls.w	r8, #0
   3dddc:	eb03 0805 	addhi.w	r8, r3, r5
   3dde0:	f240 135d 	movwhi	r3, #349	; 0x15d
   3dde4:	bf88      	it	hi
   3dde6:	60a3      	strhi	r3, [r4, #8]
   3dde8:	f857 3b1c 	ldr.w	r3, [r7], #28
   3ddec:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   3ddf0:	463d      	mov	r5, r7
   3ddf2:	6023      	str	r3, [r4, #0]
   3ddf4:	6831      	ldr	r1, [r6, #0]
   3ddf6:	ab03      	add	r3, sp, #12
   3ddf8:	2202      	movs	r2, #2
   3ddfa:	7809      	ldrb	r1, [r1, #0]
   3ddfc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   3de00:	f002 ff92 	bl	40d28 <memchr>
   3de04:	b328      	cbz	r0, 3de52 <_scanf_i+0xb6>
   3de06:	f1bb 0f01 	cmp.w	fp, #1
   3de0a:	d159      	bne.n	3dec0 <_scanf_i+0x124>
   3de0c:	6862      	ldr	r2, [r4, #4]
   3de0e:	b92a      	cbnz	r2, 3de1c <_scanf_i+0x80>
   3de10:	6822      	ldr	r2, [r4, #0]
   3de12:	2308      	movs	r3, #8
   3de14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   3de18:	6063      	str	r3, [r4, #4]
   3de1a:	6022      	str	r2, [r4, #0]
   3de1c:	6822      	ldr	r2, [r4, #0]
   3de1e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   3de22:	6022      	str	r2, [r4, #0]
   3de24:	68a2      	ldr	r2, [r4, #8]
   3de26:	1e51      	subs	r1, r2, #1
   3de28:	60a1      	str	r1, [r4, #8]
   3de2a:	b192      	cbz	r2, 3de52 <_scanf_i+0xb6>
   3de2c:	6832      	ldr	r2, [r6, #0]
   3de2e:	1c51      	adds	r1, r2, #1
   3de30:	6031      	str	r1, [r6, #0]
   3de32:	7812      	ldrb	r2, [r2, #0]
   3de34:	f805 2b01 	strb.w	r2, [r5], #1
   3de38:	6872      	ldr	r2, [r6, #4]
   3de3a:	3a01      	subs	r2, #1
   3de3c:	2a00      	cmp	r2, #0
   3de3e:	6072      	str	r2, [r6, #4]
   3de40:	dc07      	bgt.n	3de52 <_scanf_i+0xb6>
   3de42:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   3de46:	4631      	mov	r1, r6
   3de48:	4650      	mov	r0, sl
   3de4a:	4790      	blx	r2
   3de4c:	2800      	cmp	r0, #0
   3de4e:	f040 8085 	bne.w	3df5c <_scanf_i+0x1c0>
   3de52:	f10b 0b01 	add.w	fp, fp, #1
   3de56:	f1bb 0f03 	cmp.w	fp, #3
   3de5a:	d1cb      	bne.n	3ddf4 <_scanf_i+0x58>
   3de5c:	6863      	ldr	r3, [r4, #4]
   3de5e:	b90b      	cbnz	r3, 3de64 <_scanf_i+0xc8>
   3de60:	230a      	movs	r3, #10
   3de62:	6063      	str	r3, [r4, #4]
   3de64:	6863      	ldr	r3, [r4, #4]
   3de66:	f04f 0b00 	mov.w	fp, #0
   3de6a:	4944      	ldr	r1, [pc, #272]	; (3df7c <_scanf_i+0x1e0>)
   3de6c:	6960      	ldr	r0, [r4, #20]
   3de6e:	1ac9      	subs	r1, r1, r3
   3de70:	f004 f81c 	bl	41eac <__sccl>
   3de74:	68a3      	ldr	r3, [r4, #8]
   3de76:	6822      	ldr	r2, [r4, #0]
   3de78:	2b00      	cmp	r3, #0
   3de7a:	d03d      	beq.n	3def8 <_scanf_i+0x15c>
   3de7c:	6831      	ldr	r1, [r6, #0]
   3de7e:	6960      	ldr	r0, [r4, #20]
   3de80:	f891 c000 	ldrb.w	ip, [r1]
   3de84:	f810 000c 	ldrb.w	r0, [r0, ip]
   3de88:	2800      	cmp	r0, #0
   3de8a:	d035      	beq.n	3def8 <_scanf_i+0x15c>
   3de8c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   3de90:	d124      	bne.n	3dedc <_scanf_i+0x140>
   3de92:	0510      	lsls	r0, r2, #20
   3de94:	d522      	bpl.n	3dedc <_scanf_i+0x140>
   3de96:	f10b 0b01 	add.w	fp, fp, #1
   3de9a:	f1b8 0f00 	cmp.w	r8, #0
   3de9e:	d003      	beq.n	3dea8 <_scanf_i+0x10c>
   3dea0:	3301      	adds	r3, #1
   3dea2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   3dea6:	60a3      	str	r3, [r4, #8]
   3dea8:	6873      	ldr	r3, [r6, #4]
   3deaa:	3b01      	subs	r3, #1
   3deac:	2b00      	cmp	r3, #0
   3deae:	6073      	str	r3, [r6, #4]
   3deb0:	dd1b      	ble.n	3deea <_scanf_i+0x14e>
   3deb2:	6833      	ldr	r3, [r6, #0]
   3deb4:	3301      	adds	r3, #1
   3deb6:	6033      	str	r3, [r6, #0]
   3deb8:	68a3      	ldr	r3, [r4, #8]
   3deba:	3b01      	subs	r3, #1
   3debc:	60a3      	str	r3, [r4, #8]
   3debe:	e7d9      	b.n	3de74 <_scanf_i+0xd8>
   3dec0:	f1bb 0f02 	cmp.w	fp, #2
   3dec4:	d1ae      	bne.n	3de24 <_scanf_i+0x88>
   3dec6:	6822      	ldr	r2, [r4, #0]
   3dec8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   3decc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   3ded0:	d1bf      	bne.n	3de52 <_scanf_i+0xb6>
   3ded2:	2310      	movs	r3, #16
   3ded4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   3ded8:	6063      	str	r3, [r4, #4]
   3deda:	e7a2      	b.n	3de22 <_scanf_i+0x86>
   3dedc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   3dee0:	6022      	str	r2, [r4, #0]
   3dee2:	780b      	ldrb	r3, [r1, #0]
   3dee4:	f805 3b01 	strb.w	r3, [r5], #1
   3dee8:	e7de      	b.n	3dea8 <_scanf_i+0x10c>
   3deea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   3deee:	4631      	mov	r1, r6
   3def0:	4650      	mov	r0, sl
   3def2:	4798      	blx	r3
   3def4:	2800      	cmp	r0, #0
   3def6:	d0df      	beq.n	3deb8 <_scanf_i+0x11c>
   3def8:	6823      	ldr	r3, [r4, #0]
   3defa:	05d9      	lsls	r1, r3, #23
   3defc:	d50d      	bpl.n	3df1a <_scanf_i+0x17e>
   3defe:	42bd      	cmp	r5, r7
   3df00:	d909      	bls.n	3df16 <_scanf_i+0x17a>
   3df02:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   3df06:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   3df0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   3df0e:	4632      	mov	r2, r6
   3df10:	4645      	mov	r5, r8
   3df12:	4650      	mov	r0, sl
   3df14:	4798      	blx	r3
   3df16:	42bd      	cmp	r5, r7
   3df18:	d028      	beq.n	3df6c <_scanf_i+0x1d0>
   3df1a:	6822      	ldr	r2, [r4, #0]
   3df1c:	f012 0210 	ands.w	r2, r2, #16
   3df20:	d113      	bne.n	3df4a <_scanf_i+0x1ae>
   3df22:	702a      	strb	r2, [r5, #0]
   3df24:	4639      	mov	r1, r7
   3df26:	6863      	ldr	r3, [r4, #4]
   3df28:	4650      	mov	r0, sl
   3df2a:	9e01      	ldr	r6, [sp, #4]
   3df2c:	47b0      	blx	r6
   3df2e:	f8d9 3000 	ldr.w	r3, [r9]
   3df32:	6821      	ldr	r1, [r4, #0]
   3df34:	1d1a      	adds	r2, r3, #4
   3df36:	f011 0f20 	tst.w	r1, #32
   3df3a:	f8c9 2000 	str.w	r2, [r9]
   3df3e:	681b      	ldr	r3, [r3, #0]
   3df40:	d00f      	beq.n	3df62 <_scanf_i+0x1c6>
   3df42:	6018      	str	r0, [r3, #0]
   3df44:	68e3      	ldr	r3, [r4, #12]
   3df46:	3301      	adds	r3, #1
   3df48:	60e3      	str	r3, [r4, #12]
   3df4a:	1bed      	subs	r5, r5, r7
   3df4c:	2000      	movs	r0, #0
   3df4e:	44ab      	add	fp, r5
   3df50:	6925      	ldr	r5, [r4, #16]
   3df52:	445d      	add	r5, fp
   3df54:	6125      	str	r5, [r4, #16]
   3df56:	b007      	add	sp, #28
   3df58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3df5c:	f04f 0b00 	mov.w	fp, #0
   3df60:	e7ca      	b.n	3def8 <_scanf_i+0x15c>
   3df62:	07ca      	lsls	r2, r1, #31
   3df64:	bf4c      	ite	mi
   3df66:	8018      	strhmi	r0, [r3, #0]
   3df68:	6018      	strpl	r0, [r3, #0]
   3df6a:	e7eb      	b.n	3df44 <_scanf_i+0x1a8>
   3df6c:	2001      	movs	r0, #1
   3df6e:	e7f2      	b.n	3df56 <_scanf_i+0x1ba>
   3df70:	0004244c 	.word	0x0004244c
   3df74:	000411cf 	.word	0x000411cf
   3df78:	000411cb 	.word	0x000411cb
   3df7c:	0004983a 	.word	0x0004983a

0003df80 <_read_r>:
   3df80:	b538      	push	{r3, r4, r5, lr}
   3df82:	4605      	mov	r5, r0
   3df84:	4c06      	ldr	r4, [pc, #24]	; (3dfa0 <_read_r+0x20>)
   3df86:	4608      	mov	r0, r1
   3df88:	4611      	mov	r1, r2
   3df8a:	2200      	movs	r2, #0
   3df8c:	6022      	str	r2, [r4, #0]
   3df8e:	461a      	mov	r2, r3
   3df90:	f000 fea7 	bl	3ece2 <_read>
   3df94:	1c43      	adds	r3, r0, #1
   3df96:	d102      	bne.n	3df9e <_read_r+0x1e>
   3df98:	6823      	ldr	r3, [r4, #0]
   3df9a:	b103      	cbz	r3, 3df9e <_read_r+0x1e>
   3df9c:	602b      	str	r3, [r5, #0]
   3df9e:	bd38      	pop	{r3, r4, r5, pc}
   3dfa0:	2002bfa8 	.word	0x2002bfa8

0003dfa4 <raise>:
   3dfa4:	4b02      	ldr	r3, [pc, #8]	; (3dfb0 <raise+0xc>)
   3dfa6:	4601      	mov	r1, r0
   3dfa8:	6818      	ldr	r0, [r3, #0]
   3dfaa:	f003 bfb0 	b.w	41f0e <_raise_r>
   3dfae:	bf00      	nop
   3dfb0:	200312c4 	.word	0x200312c4

0003dfb4 <_kill_r>:
   3dfb4:	b538      	push	{r3, r4, r5, lr}
   3dfb6:	2300      	movs	r3, #0
   3dfb8:	4c06      	ldr	r4, [pc, #24]	; (3dfd4 <_kill_r+0x20>)
   3dfba:	4605      	mov	r5, r0
   3dfbc:	4608      	mov	r0, r1
   3dfbe:	4611      	mov	r1, r2
   3dfc0:	6023      	str	r3, [r4, #0]
   3dfc2:	f000 fe9d 	bl	3ed00 <_kill>
   3dfc6:	1c43      	adds	r3, r0, #1
   3dfc8:	d102      	bne.n	3dfd0 <_kill_r+0x1c>
   3dfca:	6823      	ldr	r3, [r4, #0]
   3dfcc:	b103      	cbz	r3, 3dfd0 <_kill_r+0x1c>
   3dfce:	602b      	str	r3, [r5, #0]
   3dfd0:	bd38      	pop	{r3, r4, r5, pc}
   3dfd2:	bf00      	nop
   3dfd4:	2002bfa8 	.word	0x2002bfa8

0003dfd8 <_fstat_r>:
   3dfd8:	b538      	push	{r3, r4, r5, lr}
   3dfda:	2300      	movs	r3, #0
   3dfdc:	4c06      	ldr	r4, [pc, #24]	; (3dff8 <_fstat_r+0x20>)
   3dfde:	4605      	mov	r5, r0
   3dfe0:	4608      	mov	r0, r1
   3dfe2:	4611      	mov	r1, r2
   3dfe4:	6023      	str	r3, [r4, #0]
   3dfe6:	f000 fe8f 	bl	3ed08 <_fstat>
   3dfea:	1c43      	adds	r3, r0, #1
   3dfec:	d102      	bne.n	3dff4 <_fstat_r+0x1c>
   3dfee:	6823      	ldr	r3, [r4, #0]
   3dff0:	b103      	cbz	r3, 3dff4 <_fstat_r+0x1c>
   3dff2:	602b      	str	r3, [r5, #0]
   3dff4:	bd38      	pop	{r3, r4, r5, pc}
   3dff6:	bf00      	nop
   3dff8:	2002bfa8 	.word	0x2002bfa8

0003dffc <_isatty_r>:
   3dffc:	b538      	push	{r3, r4, r5, lr}
   3dffe:	2300      	movs	r3, #0
   3e000:	4c05      	ldr	r4, [pc, #20]	; (3e018 <_isatty_r+0x1c>)
   3e002:	4605      	mov	r5, r0
   3e004:	4608      	mov	r0, r1
   3e006:	6023      	str	r3, [r4, #0]
   3e008:	f000 fe78 	bl	3ecfc <_isatty>
   3e00c:	1c43      	adds	r3, r0, #1
   3e00e:	d102      	bne.n	3e016 <_isatty_r+0x1a>
   3e010:	6823      	ldr	r3, [r4, #0]
   3e012:	b103      	cbz	r3, 3e016 <_isatty_r+0x1a>
   3e014:	602b      	str	r3, [r5, #0]
   3e016:	bd38      	pop	{r3, r4, r5, pc}
   3e018:	2002bfa8 	.word	0x2002bfa8

0003e01c <fabs>:
   3e01c:	ec51 0b10 	vmov	r0, r1, d0
   3e020:	ee10 2a10 	vmov	r2, s0
   3e024:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   3e028:	ec43 2b10 	vmov	d0, r2, r3
   3e02c:	4770      	bx	lr
   3e02e:	bf00      	nop

0003e030 <cloud_connect>:
	if (backend == NULL
   3e030:	b120      	cbz	r0, 3e03c <cloud_connect+0xc>
	    || backend->api == NULL
   3e032:	6803      	ldr	r3, [r0, #0]
   3e034:	b113      	cbz	r3, 3e03c <cloud_connect+0xc>
	    || backend->api->connect == NULL) {
   3e036:	689b      	ldr	r3, [r3, #8]
   3e038:	b103      	cbz	r3, 3e03c <cloud_connect+0xc>
	return backend->api->connect(backend);
   3e03a:	4718      	bx	r3
}
   3e03c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3e040:	4770      	bx	lr

0003e042 <cloud_send>:
	if (backend == NULL
   3e042:	b120      	cbz	r0, 3e04e <cloud_send+0xc>
	    || backend->api == NULL
   3e044:	6803      	ldr	r3, [r0, #0]
   3e046:	b113      	cbz	r3, 3e04e <cloud_send+0xc>
	    || backend->api->send == NULL) {
   3e048:	691b      	ldr	r3, [r3, #16]
   3e04a:	b103      	cbz	r3, 3e04e <cloud_send+0xc>
	return backend->api->send(backend, msg);
   3e04c:	4718      	bx	r3
}
   3e04e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3e052:	4770      	bx	lr

0003e054 <log_panic>:
		z_arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   3e054:	f7e0 bee6 	b.w	1ee24 <z_impl_log_panic>

0003e058 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3e058:	e8d0 0faf 	lda	r0, [r0]
}
   3e05c:	4770      	bx	lr

0003e05e <cloud_reboot_handler>:
	error_handler(ERROR_CLOUD, -ETIMEDOUT);
   3e05e:	f06f 0173 	mvn.w	r1, #115	; 0x73
   3e062:	2000      	movs	r0, #0
   3e064:	f7df b9a4 	b.w	1d3b0 <error_handler>

0003e068 <cloud_error_handler>:
	error_handler(ERROR_CLOUD, err);
   3e068:	4601      	mov	r1, r0
   3e06a:	2000      	movs	r0, #0
   3e06c:	f7df b9a0 	b.w	1d3b0 <error_handler>

0003e070 <cloud_cmd_handler>:
	if (cmd->recipient == CLOUD_RCPT_MODEM_INFO) {
   3e070:	7843      	ldrb	r3, [r0, #1]
   3e072:	2b03      	cmp	r3, #3
   3e074:	d105      	bne.n	3e082 <cloud_cmd_handler+0x12>
		if (cmd->type == CLOUD_CMD_READ) {
   3e076:	78c3      	ldrb	r3, [r0, #3]
   3e078:	2b04      	cmp	r3, #4
   3e07a:	d118      	bne.n	3e0ae <cloud_cmd_handler+0x3e>
			device_status_send(NULL);
   3e07c:	2000      	movs	r0, #0
   3e07e:	f7df ba0f 	b.w	1d4a0 <device_status_send>
	} else if (cmd->recipient == CLOUD_RCPT_UI) {
   3e082:	2b02      	cmp	r3, #2
   3e084:	d113      	bne.n	3e0ae <cloud_cmd_handler+0x3e>
		if (cmd->type == CLOUD_CMD_LED_RED) {
   3e086:	78c3      	ldrb	r3, [r0, #3]
   3e088:	2b07      	cmp	r3, #7
   3e08a:	d104      	bne.n	3e096 <cloud_cmd_handler+0x26>
			ui_led_set_color(127, 0, 0);
   3e08c:	2200      	movs	r2, #0
   3e08e:	207f      	movs	r0, #127	; 0x7f
   3e090:	4611      	mov	r1, r2
			ui_led_set_color(0, 0, 127);
   3e092:	f000 b815 	b.w	3e0c0 <ui_led_set_color>
		} else if (cmd->type == CLOUD_CMD_LED_GREEN) {
   3e096:	2b08      	cmp	r3, #8
   3e098:	d103      	bne.n	3e0a2 <cloud_cmd_handler+0x32>
			ui_led_set_color(0, 127, 0);
   3e09a:	2200      	movs	r2, #0
   3e09c:	217f      	movs	r1, #127	; 0x7f
   3e09e:	4610      	mov	r0, r2
   3e0a0:	e7f7      	b.n	3e092 <cloud_cmd_handler+0x22>
		} else if (cmd->type == CLOUD_CMD_LED_BLUE) {
   3e0a2:	2b09      	cmp	r3, #9
   3e0a4:	d103      	bne.n	3e0ae <cloud_cmd_handler+0x3e>
			ui_led_set_color(0, 0, 127);
   3e0a6:	2100      	movs	r1, #0
   3e0a8:	227f      	movs	r2, #127	; 0x7f
   3e0aa:	4608      	mov	r0, r1
   3e0ac:	e7f1      	b.n	3e092 <cloud_cmd_handler+0x22>
}
   3e0ae:	4770      	bx	lr

0003e0b0 <bsd_recoverable_error_handler>:
{
   3e0b0:	b508      	push	{r3, lr}
	LOG_PANIC();
   3e0b2:	f7ff ffcf 	bl	3e054 <log_panic>
}
   3e0b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_reboot(0);
   3e0ba:	2000      	movs	r0, #0
   3e0bc:	f7e1 ba90 	b.w	1f5e0 <sys_reboot>

0003e0c0 <ui_led_set_color>:
}
   3e0c0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3e0c4:	4770      	bx	lr

0003e0c6 <ui_button_is_active>:

bool ui_button_is_active(u32_t button)
{
   3e0c6:	b510      	push	{r4, lr}
   3e0c8:	4604      	mov	r4, r0
#if defined(CONFIG_DK_LIBRARY)
	return dk_get_buttons() & BIT((button - 1));
   3e0ca:	f7e5 f8bb 	bl	23244 <dk_get_buttons>
   3e0ce:	2301      	movs	r3, #1
   3e0d0:	3c01      	subs	r4, #1
   3e0d2:	40a3      	lsls	r3, r4
   3e0d4:	4203      	tst	r3, r0
#else
	return false;
#endif
}
   3e0d6:	bf14      	ite	ne
   3e0d8:	2001      	movne	r0, #1
   3e0da:	2000      	moveq	r0, #0
   3e0dc:	bd10      	pop	{r4, pc}

0003e0de <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   3e0de:	b108      	cbz	r0, 3e0e4 <json_object_decode+0x6>
   3e0e0:	f001 bd59 	b.w	3fb96 <cJSON_GetObjectItem>
}
   3e0e4:	4770      	bx	lr

0003e0e6 <add_array_obj>:
{
   3e0e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e0ea:	4681      	mov	r9, r0
   3e0ec:	4688      	mov	r8, r1
   3e0ee:	4617      	mov	r7, r2
	if ((obj == NULL) || (item_name == NULL)) {
   3e0f0:	461e      	mov	r6, r3
   3e0f2:	b32b      	cbz	r3, 3e140 <add_array_obj+0x5a>
	obj_to_add = cJSON_CreateArray();
   3e0f4:	f7e4 faf6 	bl	226e4 <cJSON_CreateArray>
	if (obj_to_add == NULL) {
   3e0f8:	4604      	mov	r4, r0
   3e0fa:	b1d0      	cbz	r0, 3e132 <add_array_obj+0x4c>
	for (u32_t cnt = 0; cnt < item_cnt; ++cnt) {
   3e0fc:	2500      	movs	r5, #0
   3e0fe:	4545      	cmp	r5, r8
   3e100:	d10d      	bne.n	3e11e <add_array_obj+0x38>
	if (cJSON_GetArraySize(obj_to_add) == 0) {
   3e102:	4620      	mov	r0, r4
   3e104:	f001 fd3f 	bl	3fb86 <cJSON_GetArraySize>
   3e108:	b908      	cbnz	r0, 3e10e <add_array_obj+0x28>
		obj_to_add->type = cJSON_NULL;
   3e10a:	2304      	movs	r3, #4
   3e10c:	60e3      	str	r3, [r4, #12]
	cJSON_AddItemToObject(obj, item_name, obj_to_add);
   3e10e:	4630      	mov	r0, r6
   3e110:	4622      	mov	r2, r4
   3e112:	4639      	mov	r1, r7
   3e114:	f001 fd44 	bl	3fba0 <cJSON_AddItemToObject>
	return 0;
   3e118:	2000      	movs	r0, #0
}
   3e11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (items[cnt] != NULL) {
   3e11e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
   3e122:	b158      	cbz	r0, 3e13c <add_array_obj+0x56>
			str = cJSON_CreateString(items[cnt]);
   3e124:	f7e4 fac6 	bl	226b4 <cJSON_CreateString>
			if (str == NULL) {
   3e128:	4601      	mov	r1, r0
				cJSON_Delete(obj_to_add);
   3e12a:	4620      	mov	r0, r4
			if (str == NULL) {
   3e12c:	b921      	cbnz	r1, 3e138 <add_array_obj+0x52>
				cJSON_Delete(obj_to_add);
   3e12e:	f7e4 fa21 	bl	22574 <cJSON_Delete>
		return -ENOMEM;
   3e132:	f06f 000b 	mvn.w	r0, #11
   3e136:	e7f0      	b.n	3e11a <add_array_obj+0x34>
			cJSON_AddItemToArray(obj_to_add, str);
   3e138:	f001 fd30 	bl	3fb9c <cJSON_AddItemToArray>
	for (u32_t cnt = 0; cnt < item_cnt; ++cnt) {
   3e13c:	3501      	adds	r5, #1
   3e13e:	e7de      	b.n	3e0fe <add_array_obj+0x18>
		return -EINVAL;
   3e140:	f06f 0015 	mvn.w	r0, #21
   3e144:	e7e9      	b.n	3e11a <add_array_obj+0x34>

0003e146 <atomic_set>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3e146:	e8d0 3fef 	ldaex	r3, [r0]
   3e14a:	e8c0 1fe2 	stlex	r2, r1, [r0]
   3e14e:	2a00      	cmp	r2, #0
   3e150:	d1f9      	bne.n	3e146 <atomic_set>
}
   3e152:	4618      	mov	r0, r3
   3e154:	4770      	bx	lr

0003e156 <env_sensors_get_air_quality>:

int env_sensors_get_air_quality(env_sensor_data_t *sensor_data)
{
	return -1;
}
   3e156:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3e15a:	4770      	bx	lr

0003e15c <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   3e15c:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   3e160:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   3e164:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   3e166:	bf08      	it	eq
   3e168:	f06f 0015 	mvneq.w	r0, #21
   3e16c:	4770      	bx	lr

0003e16e <get_bit_ptr>:
{
   3e16e:	b570      	push	{r4, r5, r6, lr}
   3e170:	250c      	movs	r5, #12
   3e172:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   3e174:	f990 000b 	ldrsb.w	r0, [r0, #11]
   3e178:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
   3e17a:	4288      	cmp	r0, r1
	*word = &bitarray[bn / 32];
   3e17c:	4610      	mov	r0, r2
   3e17e:	eb06 0405 	add.w	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   3e182:	bfb8      	it	lt
   3e184:	5974      	ldrlt	r4, [r6, r5]
	*word = &bitarray[bn / 32];
   3e186:	2a00      	cmp	r2, #0
   3e188:	bfb8      	it	lt
   3e18a:	f102 001f 	addlt.w	r0, r2, #31
   3e18e:	1140      	asrs	r0, r0, #5
   3e190:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   3e194:	6019      	str	r1, [r3, #0]
}
   3e196:	f002 001f 	and.w	r0, r2, #31
   3e19a:	bd70      	pop	{r4, r5, r6, pc}

0003e19c <pool_irq_lock.isra.2.part.3>:
	__asm__ volatile(
   3e19c:	f04f 0320 	mov.w	r3, #32
   3e1a0:	f3ef 8011 	mrs	r0, BASEPRI
   3e1a4:	f383 8811 	msr	BASEPRI, r3
   3e1a8:	f3bf 8f6f 	isb	sy
}
   3e1ac:	4770      	bx	lr

0003e1ae <pool_irq_unlock.isra.4>:
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   3e1ae:	07c3      	lsls	r3, r0, #31
   3e1b0:	d503      	bpl.n	3e1ba <pool_irq_unlock.isra.4+0xc>
	__asm__ volatile(
   3e1b2:	f381 8811 	msr	BASEPRI, r1
   3e1b6:	f3bf 8f6f 	isb	sy
}
   3e1ba:	4770      	bx	lr

0003e1bc <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   3e1bc:	23ff      	movs	r3, #255	; 0xff
{
   3e1be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   3e1c2:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
   3e1c4:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   3e1c6:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
   3e1c8:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
   3e1ca:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   3e1ce:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   3e1d0:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   3e1d2:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
   3e1d6:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   3e1da:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
   3e1dc:	4598      	cmp	r8, r3
   3e1de:	dc05      	bgt.n	3e1ec <z_sys_mem_pool_base_init+0x30>
   3e1e0:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   3e1e2:	4619      	mov	r1, r3
   3e1e4:	428f      	cmp	r7, r1
   3e1e6:	dc20      	bgt.n	3e22a <z_sys_mem_pool_base_init+0x6e>
}
   3e1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   3e1ec:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   3e1f0:	fb09 fe03 	mul.w	lr, r9, r3
   3e1f4:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   3e1f8:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
   3e1fa:	eb0a 040e 	add.w	r4, sl, lr
   3e1fe:	f104 0b04 	add.w	fp, r4, #4
	list->tail = (sys_dnode_t *)list;
   3e202:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   3e206:	d805      	bhi.n	3e214 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   3e208:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   3e20a:	0892      	lsrs	r2, r2, #2
   3e20c:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   3e210:	3301      	adds	r3, #1
   3e212:	e7e3      	b.n	3e1dc <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   3e214:	f115 041f 	adds.w	r4, r5, #31
   3e218:	bf48      	it	mi
   3e21a:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   3e21e:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   3e220:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   3e224:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   3e228:	e7ef      	b.n	3e20a <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   3e22a:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   3e22c:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   3e22e:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   3e232:	18ec      	adds	r4, r5, r3
	node->next = list;
   3e234:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   3e238:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   3e23a:	3101      	adds	r1, #1
   3e23c:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   3e23e:	6895      	ldr	r5, [r2, #8]
   3e240:	4433      	add	r3, r6
   3e242:	602c      	str	r4, [r5, #0]
	list->tail = node;
   3e244:	6094      	str	r4, [r2, #8]
   3e246:	e7cd      	b.n	3e1e4 <z_sys_mem_pool_base_init+0x28>

0003e248 <z_sys_mem_pool_block_alloc>:
{
   3e248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e24c:	b087      	sub	sp, #28
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   3e24e:	7a84      	ldrb	r4, [r0, #10]
{
   3e250:	af00      	add	r7, sp, #0
   3e252:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   3e256:	00a3      	lsls	r3, r4, #2
   3e258:	3307      	adds	r3, #7
   3e25a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   3e25e:	ebad 0d03 	sub.w	sp, sp, r3
   3e262:	46ea      	mov	sl, sp
	lsizes[0] = p->max_sz;
   3e264:	4653      	mov	r3, sl
   3e266:	6842      	ldr	r2, [r0, #4]
{
   3e268:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   3e26a:	f843 2904 	str.w	r2, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   3e26e:	2200      	movs	r2, #0
   3e270:	4294      	cmp	r4, r2
   3e272:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   3e276:	dd09      	ble.n	3e28c <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   3e278:	b122      	cbz	r2, 3e284 <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   3e27a:	6818      	ldr	r0, [r3, #0]
   3e27c:	0880      	lsrs	r0, r0, #2
   3e27e:	f020 0003 	bic.w	r0, r0, #3
   3e282:	6058      	str	r0, [r3, #4]
		if (lsizes[i] < size) {
   3e284:	f853 0f04 	ldr.w	r0, [r3, #4]!
   3e288:	4288      	cmp	r0, r1
   3e28a:	d208      	bcs.n	3e29e <z_sys_mem_pool_block_alloc+0x56>
	if (alloc_l < 0) {
   3e28c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   3e290:	d107      	bne.n	3e2a2 <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   3e292:	2300      	movs	r3, #0
   3e294:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   3e296:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
   3e298:	f06f 000b 	mvn.w	r0, #11
   3e29c:	e02c      	b.n	3e2f8 <z_sys_mem_pool_block_alloc+0xb0>
	for (i = 0; i < p->n_levels; i++) {
   3e29e:	3201      	adds	r2, #1
   3e2a0:	e7e6      	b.n	3e270 <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   3e2a2:	7c28      	ldrb	r0, [r5, #16]
   3e2a4:	f010 0001 	ands.w	r0, r0, #1
   3e2a8:	d001      	beq.n	3e2ae <z_sys_mem_pool_block_alloc+0x66>
   3e2aa:	f7ff ff77 	bl	3e19c <pool_irq_lock.isra.2.part.3>
   3e2ae:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
   3e2b0:	4680      	mov	r8, r0
	block = sys_dlist_get(&p->levels[l].free_list);
   3e2b2:	464e      	mov	r6, r9
   3e2b4:	68ea      	ldr	r2, [r5, #12]
   3e2b6:	fb03 2309 	mla	r3, r3, r9, r2
	return list->head == list;
   3e2ba:	461a      	mov	r2, r3
   3e2bc:	f852 4f04 	ldr.w	r4, [r2, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   3e2c0:	4294      	cmp	r4, r2
   3e2c2:	d11d      	bne.n	3e300 <z_sys_mem_pool_block_alloc+0xb8>
	for (i = alloc_l; i >= 0; i--) {
   3e2c4:	3e01      	subs	r6, #1
   3e2c6:	1c72      	adds	r2, r6, #1
   3e2c8:	f1a3 030c 	sub.w	r3, r3, #12
   3e2cc:	d1f5      	bne.n	3e2ba <z_sys_mem_pool_block_alloc+0x72>
   3e2ce:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
   3e2d0:	4641      	mov	r1, r8
   3e2d2:	7c28      	ldrb	r0, [r5, #16]
   3e2d4:	f7ff ff6b 	bl	3e1ae <pool_irq_unlock.isra.4>
	*data_p = data;
   3e2d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   3e2da:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   3e2dc:	2c00      	cmp	r4, #0
   3e2de:	d0db      	beq.n	3e298 <z_sys_mem_pool_block_alloc+0x50>
	*level_p = alloc_l;
   3e2e0:	68bb      	ldr	r3, [r7, #8]
	return 0;
   3e2e2:	2000      	movs	r0, #0
	*level_p = alloc_l;
   3e2e4:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   3e2e8:	682b      	ldr	r3, [r5, #0]
   3e2ea:	1ae4      	subs	r4, r4, r3
   3e2ec:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   3e2f0:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   3e2f4:	687b      	ldr	r3, [r7, #4]
   3e2f6:	601c      	str	r4, [r3, #0]
}
   3e2f8:	371c      	adds	r7, #28
   3e2fa:	46bd      	mov	sp, r7
   3e2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	node->prev->next = node->next;
   3e300:	e9d4 3200 	ldrd	r3, r2, [r4]
   3e304:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3e306:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3e308:	2300      	movs	r3, #0
	node->prev = NULL;
   3e30a:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   3e30e:	682b      	ldr	r3, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   3e310:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   3e314:	1ae2      	subs	r2, r4, r3
	int bit = get_bit_ptr(p, level, bn, &word);
   3e316:	f107 0b14 	add.w	fp, r7, #20
   3e31a:	fb92 f2f1 	sdiv	r2, r2, r1
   3e31e:	465b      	mov	r3, fp
   3e320:	4631      	mov	r1, r6
   3e322:	4628      	mov	r0, r5
   3e324:	f7ff ff23 	bl	3e16e <get_bit_ptr>
	*word |= (1<<bit);
   3e328:	2201      	movs	r2, #1
   3e32a:	6979      	ldr	r1, [r7, #20]
   3e32c:	fa02 f000 	lsl.w	r0, r2, r0
   3e330:	680b      	ldr	r3, [r1, #0]
   3e332:	603a      	str	r2, [r7, #0]
   3e334:	4303      	orrs	r3, r0
   3e336:	600b      	str	r3, [r1, #0]
			for (from_l = i; from_l < alloc_l; from_l++) {
   3e338:	454e      	cmp	r6, r9
   3e33a:	dac9      	bge.n	3e2d0 <z_sys_mem_pool_block_alloc+0x88>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   3e33c:	682a      	ldr	r2, [r5, #0]
   3e33e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
   3e342:	1aa2      	subs	r2, r4, r2
   3e344:	fb92 f2f3 	sdiv	r2, r2, r3
	set_alloc_bit(p, l + 1, 4*bn);
   3e348:	3601      	adds	r6, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   3e34a:	465b      	mov	r3, fp
   3e34c:	0092      	lsls	r2, r2, #2
   3e34e:	4631      	mov	r1, r6
   3e350:	4628      	mov	r0, r5
   3e352:	f7ff ff0c 	bl	3e16e <get_bit_ptr>
	*word |= (1<<bit);
   3e356:	697a      	ldr	r2, [r7, #20]
   3e358:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   3e35a:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   3e35c:	fa03 f000 	lsl.w	r0, r3, r0
   3e360:	6813      	ldr	r3, [r2, #0]
   3e362:	4303      	orrs	r3, r0
   3e364:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   3e366:	230c      	movs	r3, #12
   3e368:	2203      	movs	r2, #3
   3e36a:	fb03 1106 	mla	r1, r3, r6, r1
		int lsz = lsizes[l + 1];
   3e36e:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   3e372:	f101 0e04 	add.w	lr, r1, #4
   3e376:	1823      	adds	r3, r4, r0
   3e378:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
   3e37a:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   3e37c:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   3e380:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   3e382:	688a      	ldr	r2, [r1, #8]
   3e384:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   3e386:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
   3e388:	608b      	str	r3, [r1, #8]
   3e38a:	3a01      	subs	r2, #1
   3e38c:	4403      	add	r3, r0
   3e38e:	60fa      	str	r2, [r7, #12]
   3e390:	d1f3      	bne.n	3e37a <z_sys_mem_pool_block_alloc+0x132>
				pool_irq_unlock(p, key);
   3e392:	4641      	mov	r1, r8
   3e394:	7c28      	ldrb	r0, [r5, #16]
   3e396:	f7ff ff0a 	bl	3e1ae <pool_irq_unlock.isra.4>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   3e39a:	7c2b      	ldrb	r3, [r5, #16]
   3e39c:	07db      	lsls	r3, r3, #31
   3e39e:	d503      	bpl.n	3e3a8 <z_sys_mem_pool_block_alloc+0x160>
   3e3a0:	f7ff fefc 	bl	3e19c <pool_irq_lock.isra.2.part.3>
				key = pool_irq_lock(p);
   3e3a4:	4680      	mov	r8, r0
   3e3a6:	e7c7      	b.n	3e338 <z_sys_mem_pool_block_alloc+0xf0>
		return 0;
   3e3a8:	68f8      	ldr	r0, [r7, #12]
   3e3aa:	e7fb      	b.n	3e3a4 <z_sys_mem_pool_block_alloc+0x15c>

0003e3ac <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   3e3ac:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   3e3ae:	f7fb ffff 	bl	3a3b0 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   3e3b2:	2000      	movs	r0, #0
   3e3b4:	bd08      	pop	{r3, pc}

0003e3b6 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, s32_t timeout)
{
   3e3b6:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   3e3b8:	f7fc f842 	bl	3a440 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   3e3bc:	f110 0f0b 	cmn.w	r0, #11
   3e3c0:	d005      	beq.n	3e3ce <sys_sem_take+0x18>
   3e3c2:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   3e3c6:	bf08      	it	eq
   3e3c8:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   3e3cc:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   3e3ce:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   3e3d2:	e7fb      	b.n	3e3cc <sys_sem_take+0x16>

0003e3d4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   3e3d4:	4604      	mov	r4, r0
   3e3d6:	b508      	push	{r3, lr}
   3e3d8:	4608      	mov	r0, r1
   3e3da:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   3e3dc:	461a      	mov	r2, r3
   3e3de:	47a0      	blx	r4
	return z_impl_k_current_get();
   3e3e0:	f7fb ffaa 	bl	3a338 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   3e3e4:	f7e2 f8f8 	bl	205d8 <z_impl_k_thread_abort>

0003e3e8 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   3e3e8:	b510      	push	{r4, lr}
   3e3ea:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   3e3ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3e3f0:	4620      	mov	r0, r4
   3e3f2:	f7fa fe95 	bl	39120 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   3e3f6:	4603      	mov	r3, r0
   3e3f8:	2800      	cmp	r0, #0
   3e3fa:	d0f7      	beq.n	3e3ec <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   3e3fc:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3e3fe:	3308      	adds	r3, #8
   3e400:	e8d3 1fef 	ldaex	r1, [r3]
   3e404:	f021 0c01 	bic.w	ip, r1, #1
   3e408:	e8c3 cfee 	stlex	lr, ip, [r3]
   3e40c:	f1be 0f00 	cmp.w	lr, #0
   3e410:	d1f6      	bne.n	3e400 <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   3e412:	07cb      	lsls	r3, r1, #31
   3e414:	d500      	bpl.n	3e418 <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   3e416:	4790      	blx	r2
	z_impl_k_yield();
   3e418:	f7fb fe40 	bl	3a09c <z_impl_k_yield>
   3e41c:	e7e6      	b.n	3e3ec <z_work_q_main+0x4>

0003e41e <next>:
	if (lexer->pos >= lexer->end) {
   3e41e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   3e422:	429a      	cmp	r2, r3
	return *lexer->pos++;
   3e424:	bf35      	itete	cc
   3e426:	1c53      	addcc	r3, r2, #1
		lexer->pos = lexer->end + 1;
   3e428:	3301      	addcs	r3, #1
	return *lexer->pos++;
   3e42a:	6083      	strcc	r3, [r0, #8]
		lexer->pos = lexer->end + 1;
   3e42c:	6083      	strcs	r3, [r0, #8]
		return '\0';
   3e42e:	bf2c      	ite	cs
   3e430:	2000      	movcs	r0, #0
	return *lexer->pos++;
   3e432:	7810      	ldrbcc	r0, [r2, #0]
}
   3e434:	4770      	bx	lr

0003e436 <accept_run>:
{
   3e436:	b510      	push	{r4, lr}
   3e438:	4604      	mov	r4, r0
   3e43a:	3901      	subs	r1, #1
	for (; *run; run++) {
   3e43c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   3e440:	b900      	cbnz	r0, 3e444 <accept_run+0xe>
}
   3e442:	bd10      	pop	{r4, pc}
		if (next(lexer) != *run) {
   3e444:	4620      	mov	r0, r4
   3e446:	f7ff ffea 	bl	3e41e <next>
   3e44a:	780b      	ldrb	r3, [r1, #0]
   3e44c:	4298      	cmp	r0, r3
   3e44e:	d0f5      	beq.n	3e43c <accept_run+0x6>
			return -EINVAL;
   3e450:	f06f 0015 	mvn.w	r0, #21
   3e454:	e7f5      	b.n	3e442 <accept_run+0xc>

0003e456 <element_token>:
	switch (token) {
   3e456:	285b      	cmp	r0, #91	; 0x5b
   3e458:	d00e      	beq.n	3e478 <element_token+0x22>
   3e45a:	d807      	bhi.n	3e46c <element_token+0x16>
   3e45c:	2822      	cmp	r0, #34	; 0x22
   3e45e:	d00b      	beq.n	3e478 <element_token+0x22>
   3e460:	2830      	cmp	r0, #48	; 0x30
		return -EINVAL;
   3e462:	bf0c      	ite	eq
   3e464:	2000      	moveq	r0, #0
   3e466:	f06f 0015 	mvnne.w	r0, #21
   3e46a:	4770      	bx	lr
	switch (token) {
   3e46c:	2874      	cmp	r0, #116	; 0x74
   3e46e:	d003      	beq.n	3e478 <element_token+0x22>
   3e470:	287b      	cmp	r0, #123	; 0x7b
   3e472:	d001      	beq.n	3e478 <element_token+0x22>
   3e474:	2866      	cmp	r0, #102	; 0x66
   3e476:	e7f4      	b.n	3e462 <element_token+0xc>
		return 0;
   3e478:	2000      	movs	r0, #0
}
   3e47a:	4770      	bx	lr

0003e47c <get_elem_size>:
{
   3e47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e480:	4605      	mov	r5, r0
   3e482:	2701      	movs	r7, #1
	switch (descr->type) {
   3e484:	796b      	ldrb	r3, [r5, #5]
   3e486:	085b      	lsrs	r3, r3, #1
   3e488:	2b5b      	cmp	r3, #91	; 0x5b
   3e48a:	d02d      	beq.n	3e4e8 <get_elem_size+0x6c>
   3e48c:	d80b      	bhi.n	3e4a6 <get_elem_size+0x2a>
   3e48e:	2b22      	cmp	r3, #34	; 0x22
   3e490:	d02e      	beq.n	3e4f0 <get_elem_size+0x74>
		return -EINVAL;
   3e492:	2b30      	cmp	r3, #48	; 0x30
   3e494:	bf08      	it	eq
   3e496:	2404      	moveq	r4, #4
   3e498:	bf18      	it	ne
   3e49a:	f06f 0415 	mvnne.w	r4, #21
}
   3e49e:	fb07 f004 	mul.w	r0, r7, r4
   3e4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (descr->type) {
   3e4a6:	2b74      	cmp	r3, #116	; 0x74
   3e4a8:	d024      	beq.n	3e4f4 <get_elem_size+0x78>
   3e4aa:	2b7b      	cmp	r3, #123	; 0x7b
   3e4ac:	d003      	beq.n	3e4b6 <get_elem_size+0x3a>
		return -EINVAL;
   3e4ae:	2b66      	cmp	r3, #102	; 0x66
   3e4b0:	bf08      	it	eq
   3e4b2:	2401      	moveq	r4, #1
   3e4b4:	e7f0      	b.n	3e498 <get_elem_size+0x1c>
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   3e4b6:	2600      	movs	r6, #0
			total += ROUND_UP(s, 1 << descr->align_shift);
   3e4b8:	f04f 0901 	mov.w	r9, #1
		ptrdiff_t total = 0;
   3e4bc:	4634      	mov	r4, r6
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   3e4be:	f8d5 800c 	ldr.w	r8, [r5, #12]
   3e4c2:	45b0      	cmp	r8, r6
   3e4c4:	d0eb      	beq.n	3e49e <get_elem_size+0x22>
			ptrdiff_t s = get_elem_size(&descr->object.sub_descr[i]);
   3e4c6:	68a8      	ldr	r0, [r5, #8]
   3e4c8:	eb00 1006 	add.w	r0, r0, r6, lsl #4
   3e4cc:	f7ff ffd6 	bl	3e47c <get_elem_size>
			total += ROUND_UP(s, 1 << descr->align_shift);
   3e4d0:	792b      	ldrb	r3, [r5, #4]
		for (i = 0; i < descr->object.sub_descr_len; i++) {
   3e4d2:	3601      	adds	r6, #1
			total += ROUND_UP(s, 1 << descr->align_shift);
   3e4d4:	f003 0303 	and.w	r3, r3, #3
   3e4d8:	fa09 f303 	lsl.w	r3, r9, r3
   3e4dc:	1e5a      	subs	r2, r3, #1
   3e4de:	4410      	add	r0, r2
   3e4e0:	425b      	negs	r3, r3
   3e4e2:	4003      	ands	r3, r0
   3e4e4:	441c      	add	r4, r3
   3e4e6:	e7ec      	b.n	3e4c2 <get_elem_size+0x46>
		return descr->array.n_elements * get_elem_size(descr->array.element_descr);
   3e4e8:	e9d5 5302 	ldrd	r5, r3, [r5, #8]
   3e4ec:	435f      	muls	r7, r3
   3e4ee:	e7c9      	b.n	3e484 <get_elem_size+0x8>
		return sizeof(s32_t);
   3e4f0:	2404      	movs	r4, #4
   3e4f2:	e7d4      	b.n	3e49e <get_elem_size+0x22>
		return sizeof(bool);
   3e4f4:	2401      	movs	r4, #1
   3e4f6:	e7d2      	b.n	3e49e <get_elem_size+0x22>

0003e4f8 <lexer_next>:
{
   3e4f8:	b538      	push	{r3, r4, r5, lr}
   3e4fa:	4604      	mov	r4, r0
   3e4fc:	460d      	mov	r5, r1
	while (lexer->state) {
   3e4fe:	6823      	ldr	r3, [r4, #0]
   3e500:	7c20      	ldrb	r0, [r4, #16]
   3e502:	b933      	cbnz	r3, 3e512 <lexer_next+0x1a>
	if (lexer->token.type == empty_token) {
   3e504:	b1a0      	cbz	r0, 3e530 <lexer_next+0x38>
	*token = lexer->token;
   3e506:	f104 0210 	add.w	r2, r4, #16
   3e50a:	ca07      	ldmia	r2, {r0, r1, r2}
   3e50c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   3e510:	e00c      	b.n	3e52c <lexer_next+0x34>
	if (lexer->token.type == empty_token) {
   3e512:	285f      	cmp	r0, #95	; 0x5f
   3e514:	d103      	bne.n	3e51e <lexer_next+0x26>
		lexer->state = lexer->state(lexer);
   3e516:	4620      	mov	r0, r4
   3e518:	4798      	blx	r3
   3e51a:	6020      	str	r0, [r4, #0]
   3e51c:	e7ef      	b.n	3e4fe <lexer_next+0x6>
	*token = lexer->token;
   3e51e:	f104 0310 	add.w	r3, r4, #16
   3e522:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
	lexer->token.type = empty_token;
   3e526:	235f      	movs	r3, #95	; 0x5f
	*token = lexer->token;
   3e528:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	return true;
   3e52c:	2001      	movs	r0, #1
	lexer->token.type = empty_token;
   3e52e:	7423      	strb	r3, [r4, #16]
}
   3e530:	bd38      	pop	{r3, r4, r5, pc}

0003e532 <obj_parse>:
{
   3e532:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e536:	4607      	mov	r7, r0
   3e538:	468a      	mov	sl, r1
   3e53a:	469b      	mov	fp, r3
	s32_t decoded_fields = 0;
   3e53c:	2400      	movs	r4, #0
{
   3e53e:	b08d      	sub	sp, #52	; 0x34
   3e540:	9202      	str	r2, [sp, #8]
	if (!lexer_next(&json->lexer, &token)) {
   3e542:	ad04      	add	r5, sp, #16
	if (!lexer_next(&json->lexer, &kv->value)) {
   3e544:	f10d 0824 	add.w	r8, sp, #36	; 0x24
	if (!lexer_next(&json->lexer, &token)) {
   3e548:	4629      	mov	r1, r5
   3e54a:	4638      	mov	r0, r7
   3e54c:	f7ff ffd4 	bl	3e4f8 <lexer_next>
   3e550:	b938      	cbnz	r0, 3e562 <obj_parse+0x30>
	return -EINVAL;
   3e552:	f06f 0415 	mvn.w	r4, #21
}
   3e556:	4620      	mov	r0, r4
   3e558:	b00d      	add	sp, #52	; 0x34
   3e55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (i = 0; i < descr_len; i++) {
   3e55e:	3601      	adds	r6, #1
   3e560:	e02e      	b.n	3e5c0 <obj_parse+0x8e>
	switch (token.type) {
   3e562:	f89d 3010 	ldrb.w	r3, [sp, #16]
   3e566:	2b2c      	cmp	r3, #44	; 0x2c
   3e568:	d055      	beq.n	3e616 <obj_parse+0xe4>
   3e56a:	2b7d      	cmp	r3, #125	; 0x7d
   3e56c:	d01c      	beq.n	3e5a8 <obj_parse+0x76>
		if (token.type != JSON_TOK_STRING) {
   3e56e:	2b22      	cmp	r3, #34	; 0x22
   3e570:	d1ef      	bne.n	3e552 <obj_parse+0x20>
		kv->key = token.start;
   3e572:	9a05      	ldr	r2, [sp, #20]
		kv->key_len = (size_t)(token.end - token.start);
   3e574:	9b06      	ldr	r3, [sp, #24]
	if (!lexer_next(&json->lexer, &token)) {
   3e576:	4629      	mov	r1, r5
		kv->key_len = (size_t)(token.end - token.start);
   3e578:	1a9b      	subs	r3, r3, r2
	if (!lexer_next(&json->lexer, &token)) {
   3e57a:	4638      	mov	r0, r7
		kv->key = token.start;
   3e57c:	9207      	str	r2, [sp, #28]
		kv->key_len = (size_t)(token.end - token.start);
   3e57e:	9308      	str	r3, [sp, #32]
	if (!lexer_next(&json->lexer, &token)) {
   3e580:	f7ff ffba 	bl	3e4f8 <lexer_next>
   3e584:	2800      	cmp	r0, #0
   3e586:	d0e4      	beq.n	3e552 <obj_parse+0x20>
	if (token.type != JSON_TOK_COLON) {
   3e588:	f89d 3010 	ldrb.w	r3, [sp, #16]
   3e58c:	2b3a      	cmp	r3, #58	; 0x3a
   3e58e:	d1e0      	bne.n	3e552 <obj_parse+0x20>
	if (!lexer_next(&json->lexer, &kv->value)) {
   3e590:	4641      	mov	r1, r8
   3e592:	4638      	mov	r0, r7
   3e594:	f7ff ffb0 	bl	3e4f8 <lexer_next>
   3e598:	2800      	cmp	r0, #0
   3e59a:	d0da      	beq.n	3e552 <obj_parse+0x20>
	return element_token(kv->value.type);
   3e59c:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
   3e5a0:	f7ff ff59 	bl	3e456 <element_token>
	while (!obj_next(obj, &kv)) {
   3e5a4:	b138      	cbz	r0, 3e5b6 <obj_parse+0x84>
   3e5a6:	e7d4      	b.n	3e552 <obj_parse+0x20>
		kv->key = NULL;
   3e5a8:	2300      	movs	r3, #0
		kv->value = token;
   3e5aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   3e5ae:	e888 0007 	stmia.w	r8, {r0, r1, r2}
		kv->key_len = 0;
   3e5b2:	e9cd 3307 	strd	r3, r3, [sp, #28]
		if (kv.value.type == JSON_TOK_OBJECT_END) {
   3e5b6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   3e5ba:	2b7d      	cmp	r3, #125	; 0x7d
   3e5bc:	d0cb      	beq.n	3e556 <obj_parse+0x24>
		for (i = 0; i < descr_len; i++) {
   3e5be:	2600      	movs	r6, #0
   3e5c0:	9b02      	ldr	r3, [sp, #8]
   3e5c2:	429e      	cmp	r6, r3
   3e5c4:	d0c0      	beq.n	3e548 <obj_parse+0x16>
			if (decoded_fields & (1 << i)) {
   3e5c6:	fa44 f306 	asr.w	r3, r4, r6
   3e5ca:	07db      	lsls	r3, r3, #31
   3e5cc:	d4c7      	bmi.n	3e55e <obj_parse+0x2c>
   3e5ce:	0131      	lsls	r1, r6, #4
   3e5d0:	eb0a 0901 	add.w	r9, sl, r1
			if (kv.key_len != descr[i].field_name_len) {
   3e5d4:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   3e5d8:	9a08      	ldr	r2, [sp, #32]
   3e5da:	f3c3 0386 	ubfx	r3, r3, #2, #7
   3e5de:	429a      	cmp	r2, r3
   3e5e0:	d1bd      	bne.n	3e55e <obj_parse+0x2c>
			void *decode_field = (char *)val + descr[i].offset;
   3e5e2:	f8b9 3006 	ldrh.w	r3, [r9, #6]
			if (memcmp(kv.key, descr[i].field_name,
   3e5e6:	f85a 1001 	ldr.w	r1, [sl, r1]
   3e5ea:	9807      	ldr	r0, [sp, #28]
			void *decode_field = (char *)val + descr[i].offset;
   3e5ec:	9303      	str	r3, [sp, #12]
			if (memcmp(kv.key, descr[i].field_name,
   3e5ee:	f002 fba9 	bl	40d44 <memcmp>
   3e5f2:	2800      	cmp	r0, #0
   3e5f4:	d1b3      	bne.n	3e55e <obj_parse+0x2c>
			ret = decode_value(obj, &descr[i], &kv.value,
   3e5f6:	9b03      	ldr	r3, [sp, #12]
   3e5f8:	f8cd b000 	str.w	fp, [sp]
   3e5fc:	445b      	add	r3, fp
   3e5fe:	4642      	mov	r2, r8
   3e600:	4649      	mov	r1, r9
   3e602:	4638      	mov	r0, r7
   3e604:	f7e0 fa08 	bl	1ea18 <decode_value>
			if (ret < 0) {
   3e608:	2800      	cmp	r0, #0
   3e60a:	db0d      	blt.n	3e628 <obj_parse+0xf6>
			decoded_fields |= 1<<i;
   3e60c:	2301      	movs	r3, #1
   3e60e:	fa03 f606 	lsl.w	r6, r3, r6
   3e612:	4334      	orrs	r4, r6
			break;
   3e614:	e798      	b.n	3e548 <obj_parse+0x16>
		if (!lexer_next(&json->lexer, &token)) {
   3e616:	4629      	mov	r1, r5
   3e618:	4638      	mov	r0, r7
   3e61a:	f7ff ff6d 	bl	3e4f8 <lexer_next>
   3e61e:	2800      	cmp	r0, #0
   3e620:	d097      	beq.n	3e552 <obj_parse+0x20>
		if (token.type != JSON_TOK_STRING) {
   3e622:	f89d 3010 	ldrb.w	r3, [sp, #16]
   3e626:	e7a2      	b.n	3e56e <obj_parse+0x3c>
   3e628:	4604      	mov	r4, r0
   3e62a:	e794      	b.n	3e556 <obj_parse+0x24>

0003e62c <z_arch_printk_char_out>:
}
   3e62c:	2000      	movs	r0, #0
   3e62e:	4770      	bx	lr

0003e630 <print_err>:
{
   3e630:	b570      	push	{r4, r5, r6, lr}
   3e632:	460d      	mov	r5, r1
   3e634:	4604      	mov	r4, r0
	out('E', ctx);
   3e636:	2045      	movs	r0, #69	; 0x45
   3e638:	47a0      	blx	r4
	out('R', ctx);
   3e63a:	4629      	mov	r1, r5
   3e63c:	2052      	movs	r0, #82	; 0x52
   3e63e:	47a0      	blx	r4
	out('R', ctx);
   3e640:	4629      	mov	r1, r5
   3e642:	4623      	mov	r3, r4
}
   3e644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   3e648:	2052      	movs	r0, #82	; 0x52
   3e64a:	4718      	bx	r3

0003e64c <z_vprintk>:
{
   3e64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   3e650:	f04f 0800 	mov.w	r8, #0
{
   3e654:	4606      	mov	r6, r0
   3e656:	460f      	mov	r7, r1
	int min_width = -1;
   3e658:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   3e65c:	46c1      	mov	r9, r8
{
   3e65e:	b08b      	sub	sp, #44	; 0x2c
   3e660:	461c      	mov	r4, r3
	while (*fmt) {
   3e662:	1e53      	subs	r3, r2, #1
   3e664:	9302      	str	r3, [sp, #8]
			might_format = 0;
   3e666:	2500      	movs	r5, #0
					break;
   3e668:	e005      	b.n	3e676 <z_vprintk+0x2a>
		if (!might_format) {
   3e66a:	b96d      	cbnz	r5, 3e688 <z_vprintk+0x3c>
			if (*fmt != '%') {
   3e66c:	2825      	cmp	r0, #37	; 0x25
   3e66e:	f000 814f 	beq.w	3e910 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
   3e672:	4639      	mov	r1, r7
   3e674:	47b0      	blx	r6
	while (*fmt) {
   3e676:	9b02      	ldr	r3, [sp, #8]
   3e678:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   3e67c:	9302      	str	r3, [sp, #8]
   3e67e:	2800      	cmp	r0, #0
   3e680:	d1f3      	bne.n	3e66a <z_vprintk+0x1e>
}
   3e682:	b00b      	add	sp, #44	; 0x2c
   3e684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   3e688:	2864      	cmp	r0, #100	; 0x64
   3e68a:	d06e      	beq.n	3e76a <z_vprintk+0x11e>
   3e68c:	d81a      	bhi.n	3e6c4 <z_vprintk+0x78>
   3e68e:	2839      	cmp	r0, #57	; 0x39
   3e690:	d80a      	bhi.n	3e6a8 <z_vprintk+0x5c>
   3e692:	2831      	cmp	r0, #49	; 0x31
   3e694:	d260      	bcs.n	3e758 <z_vprintk+0x10c>
   3e696:	282d      	cmp	r0, #45	; 0x2d
   3e698:	f000 8140 	beq.w	3e91c <z_vprintk+0x2d0>
   3e69c:	2830      	cmp	r0, #48	; 0x30
   3e69e:	d04c      	beq.n	3e73a <z_vprintk+0xee>
   3e6a0:	2825      	cmp	r0, #37	; 0x25
   3e6a2:	d107      	bne.n	3e6b4 <z_vprintk+0x68>
				out((int)'%', ctx);
   3e6a4:	4639      	mov	r1, r7
   3e6a6:	e00b      	b.n	3e6c0 <z_vprintk+0x74>
			switch (*fmt) {
   3e6a8:	2858      	cmp	r0, #88	; 0x58
   3e6aa:	f000 80bb 	beq.w	3e824 <z_vprintk+0x1d8>
   3e6ae:	2863      	cmp	r0, #99	; 0x63
   3e6b0:	f000 812a 	beq.w	3e908 <z_vprintk+0x2bc>
					out((int)'%', ctx);
   3e6b4:	4639      	mov	r1, r7
   3e6b6:	2025      	movs	r0, #37	; 0x25
   3e6b8:	47b0      	blx	r6
					out((int)*fmt, ctx);
   3e6ba:	4639      	mov	r1, r7
   3e6bc:	9b02      	ldr	r3, [sp, #8]
   3e6be:	7818      	ldrb	r0, [r3, #0]
   3e6c0:	47b0      	blx	r6
   3e6c2:	e7d0      	b.n	3e666 <z_vprintk+0x1a>
			switch (*fmt) {
   3e6c4:	2870      	cmp	r0, #112	; 0x70
   3e6c6:	f000 80a3 	beq.w	3e810 <z_vprintk+0x1c4>
   3e6ca:	d811      	bhi.n	3e6f0 <z_vprintk+0xa4>
   3e6cc:	2869      	cmp	r0, #105	; 0x69
   3e6ce:	d04c      	beq.n	3e76a <z_vprintk+0x11e>
   3e6d0:	286c      	cmp	r0, #108	; 0x6c
   3e6d2:	d105      	bne.n	3e6e0 <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
   3e6d4:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   3e6d8:	d12a      	bne.n	3e730 <z_vprintk+0xe4>
					length_mod = 'L';
   3e6da:	f04f 084c 	mov.w	r8, #76	; 0x4c
   3e6de:	e7ca      	b.n	3e676 <z_vprintk+0x2a>
			switch (*fmt) {
   3e6e0:	2868      	cmp	r0, #104	; 0x68
   3e6e2:	d1e7      	bne.n	3e6b4 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   3e6e4:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   3e6e8:	d122      	bne.n	3e730 <z_vprintk+0xe4>
					length_mod = 'H';
   3e6ea:	f04f 0848 	mov.w	r8, #72	; 0x48
   3e6ee:	e7c2      	b.n	3e676 <z_vprintk+0x2a>
			switch (*fmt) {
   3e6f0:	2875      	cmp	r0, #117	; 0x75
   3e6f2:	d071      	beq.n	3e7d8 <z_vprintk+0x18c>
   3e6f4:	d818      	bhi.n	3e728 <z_vprintk+0xdc>
   3e6f6:	2873      	cmp	r0, #115	; 0x73
   3e6f8:	d1dc      	bne.n	3e6b4 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   3e6fa:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
   3e6fe:	46ab      	mov	fp, r5
   3e700:	465b      	mov	r3, fp
   3e702:	f81b 0b01 	ldrb.w	r0, [fp], #1
   3e706:	2800      	cmp	r0, #0
   3e708:	f040 80fb 	bne.w	3e902 <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
   3e70c:	f1b9 0f03 	cmp.w	r9, #3
   3e710:	f040 810a 	bne.w	3e928 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
   3e714:	1b5d      	subs	r5, r3, r5
   3e716:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
   3e71a:	2d00      	cmp	r5, #0
   3e71c:	dda3      	ble.n	3e666 <z_vprintk+0x1a>
						out(' ', ctx);
   3e71e:	4639      	mov	r1, r7
   3e720:	2020      	movs	r0, #32
   3e722:	47b0      	blx	r6
   3e724:	3d01      	subs	r5, #1
   3e726:	e7f8      	b.n	3e71a <z_vprintk+0xce>
			switch (*fmt) {
   3e728:	2878      	cmp	r0, #120	; 0x78
   3e72a:	d07b      	beq.n	3e824 <z_vprintk+0x1d8>
   3e72c:	287a      	cmp	r0, #122	; 0x7a
   3e72e:	d1c1      	bne.n	3e6b4 <z_vprintk+0x68>
				} else if (length_mod == 0) {
   3e730:	f1b8 0f00 	cmp.w	r8, #0
   3e734:	d1be      	bne.n	3e6b4 <z_vprintk+0x68>
   3e736:	4680      	mov	r8, r0
   3e738:	e79d      	b.n	3e676 <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
   3e73a:	f1ba 0f00 	cmp.w	sl, #0
   3e73e:	da0e      	bge.n	3e75e <z_vprintk+0x112>
   3e740:	f1b9 0f00 	cmp.w	r9, #0
   3e744:	f000 80ed 	beq.w	3e922 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
   3e748:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   3e74c:	f1b9 0f00 	cmp.w	r9, #0
   3e750:	bf08      	it	eq
   3e752:	f04f 0902 	moveq.w	r9, #2
   3e756:	e78e      	b.n	3e676 <z_vprintk+0x2a>
				if (min_width < 0) {
   3e758:	f1ba 0f00 	cmp.w	sl, #0
   3e75c:	dbf4      	blt.n	3e748 <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
   3e75e:	230a      	movs	r3, #10
   3e760:	fb03 0a0a 	mla	sl, r3, sl, r0
   3e764:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
   3e768:	e7f0      	b.n	3e74c <z_vprintk+0x100>
				if (length_mod == 'z') {
   3e76a:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   3e76e:	d102      	bne.n	3e776 <z_vprintk+0x12a>
					d = va_arg(ap, int);
   3e770:	f854 5b04 	ldr.w	r5, [r4], #4
   3e774:	e01f      	b.n	3e7b6 <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
   3e776:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   3e77a:	d0f9      	beq.n	3e770 <z_vprintk+0x124>
				} else if (length_mod == 'L') {
   3e77c:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   3e780:	d1f6      	bne.n	3e770 <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
   3e782:	3407      	adds	r4, #7
   3e784:	f024 0407 	bic.w	r4, r4, #7
   3e788:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
   3e78c:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   3e790:	9106      	str	r1, [sp, #24]
   3e792:	f143 0100 	adc.w	r1, r3, #0
   3e796:	9107      	str	r1, [sp, #28]
   3e798:	2100      	movs	r1, #0
   3e79a:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   3e79e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3e7a2:	4561      	cmp	r1, ip
   3e7a4:	bf08      	it	eq
   3e7a6:	4558      	cmpeq	r0, fp
   3e7a8:	d204      	bcs.n	3e7b4 <z_vprintk+0x168>
						print_err(out, ctx);
   3e7aa:	4639      	mov	r1, r7
   3e7ac:	4630      	mov	r0, r6
   3e7ae:	f7ff ff3f 	bl	3e630 <print_err>
						break;
   3e7b2:	e758      	b.n	3e666 <z_vprintk+0x1a>
					d = lld;
   3e7b4:	4615      	mov	r5, r2
				if (d < 0) {
   3e7b6:	2d00      	cmp	r5, #0
   3e7b8:	da05      	bge.n	3e7c6 <z_vprintk+0x17a>
					out((int)'-', ctx);
   3e7ba:	4639      	mov	r1, r7
   3e7bc:	202d      	movs	r0, #45	; 0x2d
   3e7be:	47b0      	blx	r6
					d = -d;
   3e7c0:	426d      	negs	r5, r5
					min_width--;
   3e7c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   3e7c6:	464b      	mov	r3, r9
   3e7c8:	462a      	mov	r2, r5
   3e7ca:	f8cd a000 	str.w	sl, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   3e7ce:	4639      	mov	r1, r7
   3e7d0:	4630      	mov	r0, r6
   3e7d2:	f7e0 fa09 	bl	1ebe8 <_printk_dec_ulong>
				break;
   3e7d6:	e746      	b.n	3e666 <z_vprintk+0x1a>
				if (length_mod == 'z') {
   3e7d8:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
   3e7dc:	d102      	bne.n	3e7e4 <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
   3e7de:	f854 2b04 	ldr.w	r2, [r4], #4
   3e7e2:	e011      	b.n	3e808 <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
   3e7e4:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   3e7e8:	d0f9      	beq.n	3e7de <z_vprintk+0x192>
				} else if (length_mod == 'L') {
   3e7ea:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   3e7ee:	d1f6      	bne.n	3e7de <z_vprintk+0x192>
					if (llu > ~0UL) {
   3e7f0:	2100      	movs	r1, #0
   3e7f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
   3e7f6:	3407      	adds	r4, #7
   3e7f8:	f024 0407 	bic.w	r4, r4, #7
   3e7fc:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   3e800:	4299      	cmp	r1, r3
   3e802:	bf08      	it	eq
   3e804:	4290      	cmpeq	r0, r2
   3e806:	d3d0      	bcc.n	3e7aa <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
   3e808:	f8cd a000 	str.w	sl, [sp]
   3e80c:	464b      	mov	r3, r9
   3e80e:	e7de      	b.n	3e7ce <z_vprintk+0x182>
				  out('0', ctx);
   3e810:	4639      	mov	r1, r7
   3e812:	2030      	movs	r0, #48	; 0x30
   3e814:	47b0      	blx	r6
				  out('x', ctx);
   3e816:	4639      	mov	r1, r7
   3e818:	2078      	movs	r0, #120	; 0x78
   3e81a:	47b0      	blx	r6
				  min_width = 8;
   3e81c:	f04f 0a08 	mov.w	sl, #8
				  padding = PAD_ZERO_BEFORE;
   3e820:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
   3e824:	9b02      	ldr	r3, [sp, #8]
   3e826:	781b      	ldrb	r3, [r3, #0]
   3e828:	2b70      	cmp	r3, #112	; 0x70
   3e82a:	d104      	bne.n	3e836 <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
   3e82c:	f854 3b04 	ldr.w	r3, [r4], #4
   3e830:	9304      	str	r3, [sp, #16]
   3e832:	2300      	movs	r3, #0
   3e834:	e00d      	b.n	3e852 <z_vprintk+0x206>
				} else if (length_mod == 'l') {
   3e836:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   3e83a:	d0f7      	beq.n	3e82c <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
   3e83c:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
   3e840:	d1f4      	bne.n	3e82c <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
   3e842:	3407      	adds	r4, #7
   3e844:	f024 0307 	bic.w	r3, r4, #7
   3e848:	461c      	mov	r4, r3
   3e84a:	f854 2b08 	ldr.w	r2, [r4], #8
   3e84e:	685b      	ldr	r3, [r3, #4]
   3e850:	9204      	str	r2, [sp, #16]
	int digits = 0;
   3e852:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   3e854:	2210      	movs	r2, #16
	int shift = sizeof(num) * 8;
   3e856:	f04f 0b40 	mov.w	fp, #64	; 0x40
	int digits = 0;
   3e85a:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
   3e85c:	9105      	str	r1, [sp, #20]
		shift -= 4;
   3e85e:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
   3e862:	9804      	ldr	r0, [sp, #16]
   3e864:	f1cb 0c20 	rsb	ip, fp, #32
   3e868:	f1ab 0120 	sub.w	r1, fp, #32
   3e86c:	fa20 f00b 	lsr.w	r0, r0, fp
   3e870:	fa03 fc0c 	lsl.w	ip, r3, ip
   3e874:	ea40 000c 	orr.w	r0, r0, ip
   3e878:	fa23 f101 	lsr.w	r1, r3, r1
   3e87c:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   3e87e:	f010 000f 	ands.w	r0, r0, #15
   3e882:	d106      	bne.n	3e892 <z_vprintk+0x246>
   3e884:	9905      	ldr	r1, [sp, #20]
   3e886:	b911      	cbnz	r1, 3e88e <z_vprintk+0x242>
   3e888:	f1bb 0f00 	cmp.w	fp, #0
   3e88c:	d122      	bne.n	3e8d4 <z_vprintk+0x288>
			nibble += nibble > 9 ? 87 : 48;
   3e88e:	2130      	movs	r1, #48	; 0x30
   3e890:	e003      	b.n	3e89a <z_vprintk+0x24e>
   3e892:	2809      	cmp	r0, #9
   3e894:	bf8c      	ite	hi
   3e896:	2157      	movhi	r1, #87	; 0x57
   3e898:	2130      	movls	r1, #48	; 0x30
   3e89a:	4408      	add	r0, r1
			out((int)nibble, ctx);
   3e89c:	b240      	sxtb	r0, r0
   3e89e:	4639      	mov	r1, r7
   3e8a0:	9308      	str	r3, [sp, #32]
   3e8a2:	9205      	str	r2, [sp, #20]
   3e8a4:	47b0      	blx	r6
			digits++;
   3e8a6:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
   3e8a8:	9a05      	ldr	r2, [sp, #20]
			digits++;
   3e8aa:	3301      	adds	r3, #1
   3e8ac:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
   3e8ae:	9b08      	ldr	r3, [sp, #32]
   3e8b0:	f1bb 0f00 	cmp.w	fp, #0
   3e8b4:	d123      	bne.n	3e8fe <z_vprintk+0x2b2>
	if (padding == PAD_SPACE_AFTER) {
   3e8b6:	f1b9 0f03 	cmp.w	r9, #3
   3e8ba:	f47f aed4 	bne.w	3e666 <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
   3e8be:	9b03      	ldr	r3, [sp, #12]
   3e8c0:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
   3e8c4:	2d00      	cmp	r5, #0
   3e8c6:	f77f aece 	ble.w	3e666 <z_vprintk+0x1a>
			out(' ', ctx);
   3e8ca:	4639      	mov	r1, r7
   3e8cc:	2020      	movs	r0, #32
   3e8ce:	47b0      	blx	r6
   3e8d0:	3d01      	subs	r5, #1
   3e8d2:	e7f7      	b.n	3e8c4 <z_vprintk+0x278>
		if (remaining-- <= min_width) {
   3e8d4:	1e51      	subs	r1, r2, #1
   3e8d6:	4592      	cmp	sl, r2
   3e8d8:	9108      	str	r1, [sp, #32]
   3e8da:	db07      	blt.n	3e8ec <z_vprintk+0x2a0>
			if (padding == PAD_ZERO_BEFORE) {
   3e8dc:	f1b9 0f01 	cmp.w	r9, #1
   3e8e0:	d106      	bne.n	3e8f0 <z_vprintk+0x2a4>
				out('0', ctx);
   3e8e2:	4639      	mov	r1, r7
   3e8e4:	2030      	movs	r0, #48	; 0x30
   3e8e6:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   3e8e8:	47b0      	blx	r6
   3e8ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
			nibble += nibble > 9 ? 87 : 48;
   3e8ec:	9a08      	ldr	r2, [sp, #32]
   3e8ee:	e7b6      	b.n	3e85e <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
   3e8f0:	f1b9 0f02 	cmp.w	r9, #2
   3e8f4:	d1fa      	bne.n	3e8ec <z_vprintk+0x2a0>
   3e8f6:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
   3e8f8:	4639      	mov	r1, r7
   3e8fa:	2020      	movs	r0, #32
   3e8fc:	e7f4      	b.n	3e8e8 <z_vprintk+0x29c>
			found_largest_digit = 1;
   3e8fe:	9505      	str	r5, [sp, #20]
   3e900:	e7ad      	b.n	3e85e <z_vprintk+0x212>
					out((int)(*s++), ctx);
   3e902:	4639      	mov	r1, r7
   3e904:	47b0      	blx	r6
   3e906:	e6fb      	b.n	3e700 <z_vprintk+0xb4>
				out(c, ctx);
   3e908:	4639      	mov	r1, r7
   3e90a:	f854 0b04 	ldr.w	r0, [r4], #4
   3e90e:	e6d7      	b.n	3e6c0 <z_vprintk+0x74>
				length_mod = 0;
   3e910:	46a8      	mov	r8, r5
				padding = PAD_NONE;
   3e912:	46a9      	mov	r9, r5
				min_width = -1;
   3e914:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
   3e918:	2501      	movs	r5, #1
   3e91a:	e6ac      	b.n	3e676 <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
   3e91c:	f04f 0903 	mov.w	r9, #3
   3e920:	e6a9      	b.n	3e676 <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
   3e922:	f04f 0901 	mov.w	r9, #1
   3e926:	e6a6      	b.n	3e676 <z_vprintk+0x2a>
			might_format = 0;
   3e928:	4605      	mov	r5, r0
		++fmt;
   3e92a:	e6a4      	b.n	3e676 <z_vprintk+0x2a>

0003e92c <printk>:
{
   3e92c:	b40f      	push	{r0, r1, r2, r3}
   3e92e:	b507      	push	{r0, r1, r2, lr}
   3e930:	a904      	add	r1, sp, #16
   3e932:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   3e936:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   3e938:	f7e0 f9a8 	bl	1ec8c <vprintk>
}
   3e93c:	b003      	add	sp, #12
   3e93e:	f85d eb04 	ldr.w	lr, [sp], #4
   3e942:	b004      	add	sp, #16
   3e944:	4770      	bx	lr

0003e946 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   3e946:	4040      	eors	r0, r0
   3e948:	f380 8811 	msr	BASEPRI, r0
   3e94c:	f04f 0004 	mov.w	r0, #4
   3e950:	df02      	svc	2

0003e952 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_BOOTLOADER_MCUBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   3e952:	4770      	bx	lr

0003e954 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   3e954:	f7f9 bba4 	b.w	380a0 <SystemInit>

0003e958 <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   3e958:	6843      	ldr	r3, [r0, #4]
}
   3e95a:	7958      	ldrb	r0, [r3, #5]
   3e95c:	4770      	bx	lr

0003e95e <k_cycle_get_32_wrapper>:
   3e95e:	f7e1 b8a5 	b.w	1faac <z_timer_cycle_get_32>

0003e962 <dummy_timestamp>:
   3e962:	2000      	movs	r0, #0
   3e964:	4770      	bx	lr

0003e966 <log_string_sync>:
{
   3e966:	b40e      	push	{r1, r2, r3}
   3e968:	b503      	push	{r0, r1, lr}
   3e96a:	aa03      	add	r2, sp, #12
   3e96c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   3e970:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap);
   3e972:	f7e0 f9ad 	bl	1ecd0 <log_generic>
}
   3e976:	b002      	add	sp, #8
   3e978:	f85d eb04 	ldr.w	lr, [sp], #4
   3e97c:	b003      	add	sp, #12
   3e97e:	4770      	bx	lr

0003e980 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
   3e980:	b508      	push	{r3, lr}
				K_THREAD_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
   3e982:	f7e0 fa1b 	bl	1edbc <log_init>
	}

	return 0;
}
   3e986:	2000      	movs	r0, #0
   3e988:	bd08      	pop	{r3, pc}

0003e98a <log_strdup>:
}
   3e98a:	4770      	bx	lr

0003e98c <buffer_write>:
{
   3e98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e98e:	4606      	mov	r6, r0
   3e990:	460d      	mov	r5, r1
   3e992:	4614      	mov	r4, r2
   3e994:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   3e996:	4621      	mov	r1, r4
   3e998:	4628      	mov	r0, r5
   3e99a:	463a      	mov	r2, r7
   3e99c:	47b0      	blx	r6
	} while (len != 0);
   3e99e:	1a24      	subs	r4, r4, r0
		buf += processed;
   3e9a0:	4405      	add	r5, r0
	} while (len != 0);
   3e9a2:	d1f8      	bne.n	3e996 <buffer_write+0xa>
}
   3e9a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003e9a6 <log_output_flush>:
		     log_output->control_block->offset,
   3e9a6:	6842      	ldr	r2, [r0, #4]
{
   3e9a8:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   3e9aa:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   3e9ae:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   3e9b0:	6881      	ldr	r1, [r0, #8]
   3e9b2:	6800      	ldr	r0, [r0, #0]
   3e9b4:	f7ff ffea 	bl	3e98c <buffer_write>
	log_output->control_block->offset = 0;
   3e9b8:	2200      	movs	r2, #0
   3e9ba:	6863      	ldr	r3, [r4, #4]
   3e9bc:	601a      	str	r2, [r3, #0]
}
   3e9be:	bd10      	pop	{r4, pc}

0003e9c0 <char_out>:
{
   3e9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e9c2:	460d      	mov	r5, r1
   3e9c4:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
   3e9c6:	4604      	mov	r4, r0
   3e9c8:	1847      	adds	r7, r0, r1
   3e9ca:	42bc      	cmp	r4, r7
   3e9cc:	d101      	bne.n	3e9d2 <char_out+0x12>
}
   3e9ce:	4628      	mov	r0, r5
   3e9d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   3e9d2:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   3e9d6:	6873      	ldr	r3, [r6, #4]
   3e9d8:	4630      	mov	r0, r6
   3e9da:	685b      	ldr	r3, [r3, #4]
   3e9dc:	4798      	blx	r3
   3e9de:	e7f4      	b.n	3e9ca <char_out+0xa>

0003e9e0 <boot_flag_read.constprop.6>:
static int boot_flag_read(int flag, u8_t bank_id)
   3e9e0:	b507      	push	{r0, r1, r2, lr}
	rc = flash_area_open(bank_id, &fa);
   3e9e2:	2002      	movs	r0, #2
   3e9e4:	a901      	add	r1, sp, #4
   3e9e6:	f7e0 fde7 	bl	1f5b8 <flash_area_open>
	if (rc) {
   3e9ea:	b950      	cbnz	r0, 3ea02 <boot_flag_read.constprop.6+0x22>
	rc = boot_flag_offs(flag, fa, &offs);
   3e9ec:	9801      	ldr	r0, [sp, #4]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   3e9ee:	2301      	movs	r3, #1
		*offs = IMAGE_OK_OFFS(fa);
   3e9f0:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   3e9f2:	f10d 0203 	add.w	r2, sp, #3
   3e9f6:	3918      	subs	r1, #24
   3e9f8:	f000 f87e 	bl	3eaf8 <flash_area_read>
	if (rc != 0) {
   3e9fc:	b908      	cbnz	r0, 3ea02 <boot_flag_read.constprop.6+0x22>
	return flag_val;
   3e9fe:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
   3ea02:	b003      	add	sp, #12
   3ea04:	f85d fb04 	ldr.w	pc, [sp], #4

0003ea08 <boot_flag_write.constprop.7>:
static int boot_flag_write(int flag, u8_t bank_id)
   3ea08:	b513      	push	{r0, r1, r4, lr}
	rc = flash_area_open(bank_id, &fa);
   3ea0a:	a901      	add	r1, sp, #4
   3ea0c:	f7e0 fdd4 	bl	1f5b8 <flash_area_open>
	if (rc) {
   3ea10:	4604      	mov	r4, r0
   3ea12:	b948      	cbnz	r0, 3ea28 <boot_flag_write.constprop.7+0x20>
	rc = boot_flag_offs(flag, fa, &offs);
   3ea14:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   3ea16:	2201      	movs	r2, #1
		*offs = IMAGE_OK_OFFS(fa);
   3ea18:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   3ea1a:	3918      	subs	r1, #24
   3ea1c:	f7e0 fc6a 	bl	1f2f4 <boot_write_trailer_byte>
   3ea20:	4604      	mov	r4, r0
	flash_area_close(fa);
   3ea22:	9801      	ldr	r0, [sp, #4]
   3ea24:	f000 f867 	bl	3eaf6 <flash_area_close>
}
   3ea28:	4620      	mov	r0, r4
   3ea2a:	b002      	add	sp, #8
   3ea2c:	bd10      	pop	{r4, pc}

0003ea2e <boot_write_img_confirmed>:
{
	return boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) == BOOT_FLAG_SET;
}

int boot_write_img_confirmed(void)
{
   3ea2e:	b513      	push	{r0, r1, r4, lr}
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   3ea30:	f7ff ffd6 	bl	3e9e0 <boot_flag_read.constprop.6>
	rc = flash_area_open(bank_id, &fa);
   3ea34:	a901      	add	r1, sp, #4
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   3ea36:	4604      	mov	r4, r0
	rc = flash_area_open(bank_id, &fa);
   3ea38:	2002      	movs	r0, #2
   3ea3a:	f7e0 fdbd 	bl	1f5b8 <flash_area_open>
	if (rc) {
   3ea3e:	2800      	cmp	r0, #0
		return -EINVAL;
   3ea40:	bf0c      	ite	eq
   3ea42:	23ff      	moveq	r3, #255	; 0xff
   3ea44:	f06f 0315 	mvnne.w	r3, #21
	int rc;

	if (boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) !=
   3ea48:	42a3      	cmp	r3, r4
   3ea4a:	d104      	bne.n	3ea56 <boot_write_img_confirmed+0x28>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   3ea4c:	2002      	movs	r0, #2
   3ea4e:	f7ff ffdb 	bl	3ea08 <boot_flag_write.constprop.7>
	}

	rc = boot_image_ok_write(FLASH_AREA_IMAGE_PRIMARY);

	return rc;
}
   3ea52:	b002      	add	sp, #8
   3ea54:	bd10      	pop	{r4, pc}
		return 0;
   3ea56:	2000      	movs	r0, #0
   3ea58:	e7fb      	b.n	3ea52 <boot_write_img_confirmed+0x24>

0003ea5a <flash_img_buffered_write>:

int flash_img_buffered_write(struct flash_img_context *ctx, u8_t *data,
			     size_t len, bool flush)
{
   3ea5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3ea5e:	4604      	mov	r4, r0
   3ea60:	4688      	mov	r8, r1
   3ea62:	4615      	mov	r5, r2
   3ea64:	461f      	mov	r7, r3
	int processed = 0;
   3ea66:	2600      	movs	r6, #0
	while ((len - processed) >=
	       (buf_empty_bytes = CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes)) {
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
		       buf_empty_bytes);

		ctx->buf_bytes = CONFIG_IMG_BLOCK_BUF_SIZE;
   3ea68:	f44f 7900 	mov.w	r9, #512	; 0x200
	       (buf_empty_bytes = CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes)) {
   3ea6c:	f8b4 0208 	ldrh.w	r0, [r4, #520]	; 0x208
	while ((len - processed) >=
   3ea70:	1baa      	subs	r2, r5, r6
	       (buf_empty_bytes = CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes)) {
   3ea72:	f5c0 7a00 	rsb	sl, r0, #512	; 0x200
	while ((len - processed) >=
   3ea76:	4552      	cmp	r2, sl
   3ea78:	d219      	bcs.n	3eaae <flash_img_buffered_write+0x54>

		processed += buf_empty_bytes;
	}

	/* place rest of the data into ctx->buf */
	if (processed < len) {
   3ea7a:	42ae      	cmp	r6, r5
   3ea7c:	d20a      	bcs.n	3ea94 <flash_img_buffered_write+0x3a>
   3ea7e:	eb08 0106 	add.w	r1, r8, r6
   3ea82:	4420      	add	r0, r4
   3ea84:	f002 f96c 	bl	40d60 <memcpy>
		memcpy(ctx->buf + ctx->buf_bytes,
		       data + processed, len - processed);
		ctx->buf_bytes += len - processed;
   3ea88:	f8b4 3208 	ldrh.w	r3, [r4, #520]	; 0x208
   3ea8c:	441d      	add	r5, r3
   3ea8e:	1bad      	subs	r5, r5, r6
   3ea90:	f8a4 5208 	strh.w	r5, [r4, #520]	; 0x208
	}

	if (!flush) {
   3ea94:	b307      	cbz	r7, 3ead8 <flash_img_buffered_write+0x7e>
		return rc;
	}

	if (ctx->buf_bytes > 0) {
   3ea96:	f8b4 3208 	ldrh.w	r3, [r4, #520]	; 0x208
   3ea9a:	b9bb      	cbnz	r3, 3eacc <flash_img_buffered_write+0x72>
	/* erase the image trailer area if it was not erased */
	flash_progressive_erase(ctx,
				BOOT_TRAILER_IMG_STATUS_OFFS(ctx->flash_area));
#endif

	flash_area_close(ctx->flash_area);
   3ea9c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
   3eaa0:	f000 f829 	bl	3eaf6 <flash_area_close>
	ctx->flash_area = NULL;
   3eaa4:	2000      	movs	r0, #0
   3eaa6:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200

	return rc;
}
   3eaaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3eaae:	4652      	mov	r2, sl
   3eab0:	eb08 0106 	add.w	r1, r8, r6
   3eab4:	4420      	add	r0, r4
   3eab6:	f002 f953 	bl	40d60 <memcpy>
		ctx->buf_bytes = CONFIG_IMG_BLOCK_BUF_SIZE;
   3eaba:	f8a4 9208 	strh.w	r9, [r4, #520]	; 0x208
		rc = flash_sync(ctx);
   3eabe:	4620      	mov	r0, r4
   3eac0:	f7e0 fc72 	bl	1f3a8 <flash_sync>
		if (rc) {
   3eac4:	2800      	cmp	r0, #0
   3eac6:	d1f0      	bne.n	3eaaa <flash_img_buffered_write+0x50>
		processed += buf_empty_bytes;
   3eac8:	4456      	add	r6, sl
   3eaca:	e7cf      	b.n	3ea6c <flash_img_buffered_write+0x12>
		rc = flash_sync(ctx);
   3eacc:	4620      	mov	r0, r4
   3eace:	f7e0 fc6b 	bl	1f3a8 <flash_sync>
		if (rc) {
   3ead2:	2800      	cmp	r0, #0
   3ead4:	d0e2      	beq.n	3ea9c <flash_img_buffered_write+0x42>
   3ead6:	e7e8      	b.n	3eaaa <flash_img_buffered_write+0x50>
   3ead8:	4638      	mov	r0, r7
   3eada:	e7e6      	b.n	3eaaa <flash_img_buffered_write+0x50>

0003eadc <flash_img_init>:
	return ctx->bytes_written;
}

int flash_img_init(struct flash_img_context *ctx)
{
	ctx->bytes_written = 0;
   3eadc:	2300      	movs	r3, #0
	ctx->buf_bytes = 0U;
#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	ctx->off_last = -1;
#endif
	return flash_area_open(FLASH_AREA_IMAGE_SECONDARY,
   3eade:	f500 7100 	add.w	r1, r0, #512	; 0x200
	ctx->bytes_written = 0;
   3eae2:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
	ctx->buf_bytes = 0U;
   3eae6:	f8a0 3208 	strh.w	r3, [r0, #520]	; 0x208
	return flash_area_open(FLASH_AREA_IMAGE_SECONDARY,
   3eaea:	2006      	movs	r0, #6
   3eaec:	f7e0 bd64 	b.w	1f5b8 <flash_area_open>

0003eaf0 <z_impl_flash_write_protection_set>:
static inline int z_impl_flash_write_protection_set(struct device *dev,
						   bool enable)
{
	const struct flash_driver_api *api = dev->driver_api;

	return api->write_protection(dev, enable);
   3eaf0:	6843      	ldr	r3, [r0, #4]
   3eaf2:	68db      	ldr	r3, [r3, #12]
   3eaf4:	4718      	bx	r3

0003eaf6 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   3eaf6:	4770      	bx	lr

0003eaf8 <flash_area_read>:
}
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   3eaf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3eafc:	461e      	mov	r6, r3
	struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   3eafe:	6883      	ldr	r3, [r0, #8]
{
   3eb00:	4605      	mov	r5, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3eb02:	428b      	cmp	r3, r1
{
   3eb04:	460c      	mov	r4, r1
   3eb06:	4617      	mov	r7, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3eb08:	d30f      	bcc.n	3eb2a <flash_area_read+0x32>
   3eb0a:	1872      	adds	r2, r6, r1
   3eb0c:	4293      	cmp	r3, r2
   3eb0e:	d30c      	bcc.n	3eb2a <flash_area_read+0x32>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   3eb10:	68c0      	ldr	r0, [r0, #12]
   3eb12:	f7f9 fbc5 	bl	382a0 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   3eb16:	6869      	ldr	r1, [r5, #4]
   3eb18:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   3eb1a:	6843      	ldr	r3, [r0, #4]
   3eb1c:	463a      	mov	r2, r7
   3eb1e:	681c      	ldr	r4, [r3, #0]
   3eb20:	4633      	mov	r3, r6
   3eb22:	46a4      	mov	ip, r4
}
   3eb24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3eb28:	4760      	bx	ip
   3eb2a:	f06f 0015 	mvn.w	r0, #21
   3eb2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003eb32 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   3eb32:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3eb36:	4698      	mov	r8, r3
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   3eb38:	6883      	ldr	r3, [r0, #8]
{
   3eb3a:	4607      	mov	r7, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3eb3c:	428b      	cmp	r3, r1
{
   3eb3e:	460d      	mov	r5, r1
   3eb40:	4691      	mov	r9, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3eb42:	d31c      	bcc.n	3eb7e <flash_area_write+0x4c>
   3eb44:	eb08 0201 	add.w	r2, r8, r1
   3eb48:	4293      	cmp	r3, r2
   3eb4a:	d318      	bcc.n	3eb7e <flash_area_write+0x4c>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   3eb4c:	68c0      	ldr	r0, [r0, #12]
   3eb4e:	f7f9 fba7 	bl	382a0 <z_impl_device_get_binding>
   3eb52:	4606      	mov	r6, r0
	if (z_syscall_trap()) {
		return (int) z_arch_syscall_invoke2(*(u32_t *)&dev, *(u32_t *)&enable, K_SYSCALL_FLASH_WRITE_PROTECTION_SET);
	}
#endif
	compiler_barrier();
	return z_impl_flash_write_protection_set(dev, enable);
   3eb54:	2100      	movs	r1, #0
   3eb56:	f7ff ffcb 	bl	3eaf0 <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   3eb5a:	4604      	mov	r4, r0
   3eb5c:	b960      	cbnz	r0, 3eb78 <flash_area_write+0x46>
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   3eb5e:	6879      	ldr	r1, [r7, #4]
   3eb60:	4429      	add	r1, r5
	return api->write(dev, offset, data, len);
   3eb62:	6873      	ldr	r3, [r6, #4]
   3eb64:	464a      	mov	r2, r9
   3eb66:	685c      	ldr	r4, [r3, #4]
   3eb68:	4630      	mov	r0, r6
   3eb6a:	4643      	mov	r3, r8
   3eb6c:	47a0      	blx	r4
   3eb6e:	4604      	mov	r4, r0
   3eb70:	2101      	movs	r1, #1
   3eb72:	4630      	mov	r0, r6
   3eb74:	f7ff ffbc 	bl	3eaf0 <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   3eb78:	4620      	mov	r0, r4
   3eb7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   3eb7e:	f06f 0415 	mvn.w	r4, #21
   3eb82:	e7f9      	b.n	3eb78 <flash_area_write+0x46>

0003eb84 <flash_area_align>:

	return rc;
}

u8_t flash_area_align(const struct flash_area *fa)
{
   3eb84:	b508      	push	{r3, lr}
	struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   3eb86:	68c0      	ldr	r0, [r0, #12]
   3eb88:	f7f9 fb8a 	bl	382a0 <z_impl_device_get_binding>

static inline size_t z_impl_flash_get_write_block_size(struct device *dev)
{
	const struct flash_driver_api *api = dev->driver_api;

	return api->write_block_size;
   3eb8c:	6843      	ldr	r3, [r0, #4]

	return flash_get_write_block_size(dev);
}
   3eb8e:	7d18      	ldrb	r0, [r3, #20]
   3eb90:	bd08      	pop	{r3, pc}

0003eb92 <uart_poll_out>:
   3eb92:	6843      	ldr	r3, [r0, #4]
   3eb94:	685b      	ldr	r3, [r3, #4]
   3eb96:	4718      	bx	r3

0003eb98 <debug_hook_out_nop>:
}
   3eb98:	2000      	movs	r0, #0
   3eb9a:	4770      	bx	lr

0003eb9c <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
   3eb9c:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
   3eb9e:	7a5a      	ldrb	r2, [r3, #9]
   3eba0:	b932      	cbnz	r2, 3ebb0 <get_status+0x14>
	if (data->ref > 0) {
   3eba2:	f993 0008 	ldrsb.w	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
   3eba6:	2800      	cmp	r0, #0
   3eba8:	bfcc      	ite	gt
   3ebaa:	2000      	movgt	r0, #0
   3ebac:	2001      	movle	r0, #1
   3ebae:	4770      	bx	lr
   3ebb0:	2002      	movs	r0, #2
}
   3ebb2:	4770      	bx	lr

0003ebb4 <clock_stop>:
	const struct nrf_clock_control_config *config =
   3ebb4:	6802      	ldr	r2, [r0, #0]
{
   3ebb6:	b570      	push	{r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
   3ebb8:	6896      	ldr	r6, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
   3ebba:	6884      	ldr	r4, [r0, #8]
	__asm__ volatile(
   3ebbc:	f04f 0320 	mov.w	r3, #32
   3ebc0:	f3ef 8511 	mrs	r5, BASEPRI
   3ebc4:	f383 8811 	msr	BASEPRI, r3
   3ebc8:	f3bf 8f6f 	isb	sy
	data->ref--;
   3ebcc:	7a23      	ldrb	r3, [r4, #8]
   3ebce:	3b01      	subs	r3, #1
   3ebd0:	b25b      	sxtb	r3, r3
	if (data->ref == 0) {
   3ebd2:	2b00      	cmp	r3, #0
	data->ref--;
   3ebd4:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
   3ebd6:	d11c      	bne.n	3ec12 <clock_stop+0x5e>
	list->tail = NULL;
   3ebd8:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
   3ebdc:	6873      	ldr	r3, [r6, #4]
				config->stop_handler(dev) : true;
   3ebde:	b9a3      	cbnz	r3, 3ec0a <clock_stop+0x56>
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + task)) = 0x1UL;
   3ebe0:	2201      	movs	r2, #1
   3ebe2:	7af3      	ldrb	r3, [r6, #11]
   3ebe4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3ebe8:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   3ebec:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)NRF_CLOCK + event)) = 0x0UL;
   3ebee:	2200      	movs	r2, #0
   3ebf0:	8933      	ldrh	r3, [r6, #8]
   3ebf2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3ebf6:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   3ebfa:	601a      	str	r2, [r3, #0]
		data->started = false;
   3ebfc:	2000      	movs	r0, #0
   3ebfe:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   3ec00:	f385 8811 	msr	BASEPRI, r5
   3ec04:	f3bf 8f6f 	isb	sy
}
   3ec08:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
   3ec0a:	4798      	blx	r3
   3ec0c:	2800      	cmp	r0, #0
   3ec0e:	d1e7      	bne.n	3ebe0 <clock_stop+0x2c>
   3ec10:	e7f4      	b.n	3ebfc <clock_stop+0x48>
	} else if (data->ref < 0) {
   3ec12:	f04f 0000 	mov.w	r0, #0
		data->ref = 0;
   3ec16:	bfbc      	itt	lt
   3ec18:	7220      	strblt	r0, [r4, #8]
		err = -EALREADY;
   3ec1a:	f06f 0077 	mvnlt.w	r0, #119	; 0x77
   3ec1e:	e7ef      	b.n	3ec00 <clock_stop+0x4c>

0003ec20 <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
   3ec20:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
   3ec22:	2000      	movs	r0, #0
	list->tail = NULL;
   3ec24:	e9c3 0000 	strd	r0, r0, [r3]
}
   3ec28:	4770      	bx	lr

0003ec2a <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   3ec2a:	2200      	movs	r2, #0
   3ec2c:	f7e0 bd3c 	b.w	1f6a8 <clock_async_start>

0003ec30 <clkstarted_handle>:
{
   3ec30:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
   3ec32:	6884      	ldr	r4, [r0, #8]
{
   3ec34:	4605      	mov	r5, r0
Z_GENLIST_IS_EMPTY(slist)
   3ec36:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   3ec38:	b12b      	cbz	r3, 3ec46 <clkstarted_handle+0x16>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   3ec3a:	6861      	ldr	r1, [r4, #4]
   3ec3c:	681a      	ldr	r2, [r3, #0]
   3ec3e:	428b      	cmp	r3, r1
	list->head = node;
   3ec40:	6022      	str	r2, [r4, #0]
	list->tail = node;
   3ec42:	bf08      	it	eq
   3ec44:	6062      	streq	r2, [r4, #4]
	data->started = true;
   3ec46:	2201      	movs	r2, #1
   3ec48:	7262      	strb	r2, [r4, #9]
	while (node != NULL) {
   3ec4a:	b903      	cbnz	r3, 3ec4e <clkstarted_handle+0x1e>
}
   3ec4c:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   3ec4e:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   3ec52:	4628      	mov	r0, r5
   3ec54:	4790      	blx	r2
Z_GENLIST_IS_EMPTY(slist)
   3ec56:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   3ec58:	2b00      	cmp	r3, #0
   3ec5a:	d0f7      	beq.n	3ec4c <clkstarted_handle+0x1c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   3ec5c:	6861      	ldr	r1, [r4, #4]
   3ec5e:	681a      	ldr	r2, [r3, #0]
   3ec60:	428b      	cmp	r3, r1
	list->head = node;
   3ec62:	6022      	str	r2, [r4, #0]
	list->tail = node;
   3ec64:	bf08      	it	eq
   3ec66:	6062      	streq	r2, [r4, #4]
   3ec68:	e7ef      	b.n	3ec4a <clkstarted_handle+0x1a>

0003ec6a <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   3ec6a:	4770      	bx	lr

0003ec6c <sys_clock_disable>:
   3ec6c:	4770      	bx	lr

0003ec6e <z_irq_spurious>:
	z_arm_reserved();
   3ec6e:	f7e1 b8e5 	b.w	1fe3c <z_arm_bus_fault>

0003ec72 <z_arch_isr_direct_header>:
#endif

void z_arch_isr_direct_header(void)
{
	sys_trace_isr_enter();
}
   3ec72:	4770      	bx	lr

0003ec74 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   3ec74:	6d83      	ldr	r3, [r0, #88]	; 0x58
   3ec76:	f383 880b 	msr	PSPLIM, r3
}
   3ec7a:	4770      	bx	lr

0003ec7c <z_do_kernel_oops>:

void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   3ec7c:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   3ec7e:	6800      	ldr	r0, [r0, #0]
   3ec80:	f7e1 b8ee 	b.w	1fe60 <z_arm_fatal_error>

0003ec84 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   3ec84:	b508      	push	{r3, lr}
	handler();
   3ec86:	f7e1 f97f 	bl	1ff88 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   3ec8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   3ec8e:	f7e0 bf5d 	b.w	1fb4c <z_arm_exc_exit>

0003ec92 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   3ec92:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   3ec94:	2100      	movs	r1, #0
   3ec96:	a801      	add	r0, sp, #4
   3ec98:	f7e1 fefa 	bl	20a90 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   3ec9c:	b003      	add	sp, #12
   3ec9e:	f85d fb04 	ldr.w	pc, [sp], #4

0003eca2 <mpu_configure_region>:
{
   3eca2:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   3eca4:	684b      	ldr	r3, [r1, #4]
{
   3eca6:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   3eca8:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   3ecaa:	f89d 2008 	ldrb.w	r2, [sp, #8]
   3ecae:	890d      	ldrh	r5, [r1, #8]
   3ecb0:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   3ecb2:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3ecb4:	f024 041f 	bic.w	r4, r4, #31
   3ecb8:	3b01      	subs	r3, #1
	p_attr->rbar = attr->rbar &
   3ecba:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3ecbe:	4423      	add	r3, r4
	p_attr->mair_idx = attr->mair_idx;
   3ecc0:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3ecc4:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   3ecc8:	4669      	mov	r1, sp
	p_attr->mair_idx = attr->mair_idx;
   3ecca:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3ecce:	9303      	str	r3, [sp, #12]
   3ecd0:	f7e1 fd02 	bl	206d8 <region_allocate_and_init>
}
   3ecd4:	b005      	add	sp, #20
   3ecd6:	bd30      	pop	{r4, r5, pc}

0003ecd8 <_stdout_hook_default>:
}
   3ecd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3ecdc:	4770      	bx	lr

0003ecde <_stdin_hook_default>:
}
   3ecde:	2000      	movs	r0, #0
   3ece0:	4770      	bx	lr

0003ece2 <_read>:
{
   3ece2:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   3ece4:	4611      	mov	r1, r2
   3ece6:	f7e1 bf13 	b.w	20b10 <z_impl_zephyr_read_stdin>

0003ecea <_write>:
{
   3ecea:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   3ecec:	4611      	mov	r1, r2
   3ecee:	f7e1 bf23 	b.w	20b38 <z_impl_zephyr_write_stdout>

0003ecf2 <_close>:
   3ecf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3ecf6:	4770      	bx	lr

0003ecf8 <_lseek>:
}
   3ecf8:	2000      	movs	r0, #0
   3ecfa:	4770      	bx	lr

0003ecfc <_isatty>:
}
   3ecfc:	2001      	movs	r0, #1
   3ecfe:	4770      	bx	lr

0003ed00 <_kill>:
}
   3ed00:	2000      	movs	r0, #0
   3ed02:	4770      	bx	lr

0003ed04 <_getpid>:
}
   3ed04:	2000      	movs	r0, #0
   3ed06:	4770      	bx	lr

0003ed08 <_fstat>:
	st->st_mode = S_IFCHR;
   3ed08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   3ed0c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   3ed0e:	604b      	str	r3, [r1, #4]
}
   3ed10:	4770      	bx	lr

0003ed12 <__errno>:
	if (z_syscall_trap()) {
		return (int *) z_arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   3ed12:	f7f9 baeb 	b.w	382ec <z_impl_z_errno>

0003ed16 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   3ed16:	b508      	push	{r3, lr}
	net_if_init();
   3ed18:	f7e1 ffc4 	bl	20ca4 <net_if_init>
	net_if_post_init();
   3ed1c:	f7e1 ffd6 	bl	20ccc <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   3ed20:	2000      	movs	r0, #0
   3ed22:	bd08      	pop	{r3, pc}

0003ed24 <l2_flags_get>:
	return iface->if_dev->l2;
   3ed24:	6803      	ldr	r3, [r0, #0]
   3ed26:	685b      	ldr	r3, [r3, #4]
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   3ed28:	b113      	cbz	r3, 3ed30 <l2_flags_get+0xc>
   3ed2a:	68db      	ldr	r3, [r3, #12]
   3ed2c:	b103      	cbz	r3, 3ed30 <l2_flags_get+0xc>
		flags = net_if_l2(iface)->get_flags(iface);
   3ed2e:	4718      	bx	r3
}
   3ed30:	2000      	movs	r0, #0
   3ed32:	4770      	bx	lr

0003ed34 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, u16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   3ed34:	e9d0 2300 	ldrd	r2, r3, [r0]
   3ed38:	1a9b      	subs	r3, r3, r2
   3ed3a:	2b01      	cmp	r3, #1
{
   3ed3c:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   3ed3e:	d90c      	bls.n	3ed5a <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   3ed40:	4614      	mov	r4, r2
   3ed42:	1c53      	adds	r3, r2, #1
   3ed44:	6003      	str	r3, [r0, #0]
   3ed46:	f814 3b02 	ldrb.w	r3, [r4], #2
   3ed4a:	021b      	lsls	r3, r3, #8
   3ed4c:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   3ed4e:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   3ed50:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   3ed52:	7852      	ldrb	r2, [r2, #1]
   3ed54:	4313      	orrs	r3, r2
   3ed56:	800b      	strh	r3, [r1, #0]
}
   3ed58:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3ed5a:	f06f 0015 	mvn.w	r0, #21
   3ed5e:	e7fb      	b.n	3ed58 <unpack_uint16+0x24>

0003ed60 <packet_length_decode>:
int packet_length_decode(struct buf_ctx *buf, u32_t *length)
{
	u8_t shift = 0U;
	u8_t bytes = 0U;

	*length = 0U;
   3ed60:	2300      	movs	r3, #0
{
   3ed62:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		if (bytes > MQTT_MAX_LENGTH_BYTES) {
			return -EINVAL;
		}

		if (buf->cur >= buf->end) {
   3ed64:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   3ed66:	600b      	str	r3, [r1, #0]
		if (buf->cur >= buf->end) {
   3ed68:	6804      	ldr	r4, [r0, #0]
   3ed6a:	42bc      	cmp	r4, r7
   3ed6c:	d215      	bcs.n	3ed9a <packet_length_decode+0x3a>
			return -EAGAIN;
		}

		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   3ed6e:	4625      	mov	r5, r4
   3ed70:	f815 2b01 	ldrb.w	r2, [r5], #1
   3ed74:	680e      	ldr	r6, [r1, #0]
   3ed76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
								<< shift;
   3ed7a:	409a      	lsls	r2, r3
		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   3ed7c:	4432      	add	r2, r6
   3ed7e:	600a      	str	r2, [r1, #0]
		shift += MQTT_LENGTH_SHIFT;
		bytes++;
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   3ed80:	6005      	str	r5, [r0, #0]
   3ed82:	f994 2000 	ldrsb.w	r2, [r4]
   3ed86:	2a00      	cmp	r2, #0
   3ed88:	db01      	blt.n	3ed8e <packet_length_decode+0x2e>

	MQTT_TRC("length:0x%08x", *length);

	return 0;
   3ed8a:	2000      	movs	r0, #0
}
   3ed8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (bytes > MQTT_MAX_LENGTH_BYTES) {
   3ed8e:	3307      	adds	r3, #7
   3ed90:	2b23      	cmp	r3, #35	; 0x23
   3ed92:	d1e9      	bne.n	3ed68 <packet_length_decode+0x8>
			return -EINVAL;
   3ed94:	f06f 0015 	mvn.w	r0, #21
   3ed98:	e7f8      	b.n	3ed8c <packet_length_decode+0x2c>
			return -EAGAIN;
   3ed9a:	f06f 000a 	mvn.w	r0, #10
   3ed9e:	e7f5      	b.n	3ed8c <packet_length_decode+0x2c>

0003eda0 <fixed_header_decode>:

int fixed_header_decode(struct buf_ctx *buf, u8_t *type_and_flags,
			u32_t *length)
{
   3eda0:	b430      	push	{r4, r5}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3eda2:	e9d0 3500 	ldrd	r3, r5, [r0]
   3eda6:	429d      	cmp	r5, r3
   3eda8:	d007      	beq.n	3edba <fixed_header_decode+0x1a>
	*val = *(buf->cur++);
   3edaa:	1c5d      	adds	r5, r3, #1
   3edac:	6005      	str	r5, [r0, #0]
   3edae:	781b      	ldrb	r3, [r3, #0]
   3edb0:	700b      	strb	r3, [r1, #0]
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   3edb2:	bc30      	pop	{r4, r5}
	return packet_length_decode(buf, length);
   3edb4:	4611      	mov	r1, r2
   3edb6:	f7ff bfd3 	b.w	3ed60 <packet_length_decode>
}
   3edba:	f06f 0015 	mvn.w	r0, #21
   3edbe:	bc30      	pop	{r4, r5}
   3edc0:	4770      	bx	lr

0003edc2 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   3edc2:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3edc4:	e9d1 3500 	ldrd	r3, r5, [r1]
   3edc8:	429d      	cmp	r5, r3
   3edca:	d102      	bne.n	3edd2 <connect_ack_decode+0x10>
		return -EINVAL;
   3edcc:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   3edd0:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   3edd2:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3edd4:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   3edd6:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3edd8:	d0f8      	beq.n	3edcc <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   3edda:	461d      	mov	r5, r3
   3eddc:	f815 4b02 	ldrb.w	r4, [r5], #2
   3ede0:	600d      	str	r5, [r1, #0]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   3ede2:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
	*val = *(buf->cur++);
   3ede6:	785b      	ldrb	r3, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   3ede8:	2904      	cmp	r1, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   3edea:	bf04      	itt	eq
   3edec:	f004 0401 	andeq.w	r4, r4, #1
		param->session_present_flag =
   3edf0:	7014      	strbeq	r4, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   3edf2:	7053      	strb	r3, [r2, #1]
	return 0;
   3edf4:	2000      	movs	r0, #0
   3edf6:	e7eb      	b.n	3edd0 <connect_ack_decode+0xe>

0003edf8 <publish_decode>:

int publish_decode(u8_t flags, u32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   3edf8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3edfc:	461c      	mov	r4, r3
	int err_code;
	u32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   3edfe:	7d9b      	ldrb	r3, [r3, #22]
{
   3ee00:	4688      	mov	r8, r1
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   3ee02:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   3ee06:	f360 0341 	bfi	r3, r0, #1, #1
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   3ee0a:	f3c0 0041 	ubfx	r0, r0, #1, #2
   3ee0e:	7220      	strb	r0, [r4, #8]
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   3ee10:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   3ee12:	f10d 0106 	add.w	r1, sp, #6
   3ee16:	4610      	mov	r0, r2
{
   3ee18:	4616      	mov	r6, r2
	err_code = unpack_uint16(buf, &utf8_strlen);
   3ee1a:	f7ff ff8b 	bl	3ed34 <unpack_uint16>
	if (err_code != 0) {
   3ee1e:	4607      	mov	r7, r0
   3ee20:	b940      	cbnz	r0, 3ee34 <publish_decode+0x3c>
	if ((buf->end - buf->cur) < utf8_strlen) {
   3ee22:	6833      	ldr	r3, [r6, #0]
   3ee24:	6872      	ldr	r2, [r6, #4]
   3ee26:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   3ee2a:	1ad2      	subs	r2, r2, r3
   3ee2c:	42aa      	cmp	r2, r5
   3ee2e:	da05      	bge.n	3ee3c <publish_decode+0x44>
		return -EINVAL;
   3ee30:	f06f 0715 	mvn.w	r7, #21

	param->message.payload.data = NULL;
	param->message.payload.len = var_length - var_header_length;

	return 0;
}
   3ee34:	4638      	mov	r0, r7
   3ee36:	b002      	add	sp, #8
   3ee38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	str->size = utf8_strlen;
   3ee3c:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   3ee3e:	b15d      	cbz	r5, 3ee58 <publish_decode+0x60>
		str->utf8 = buf->cur;
   3ee40:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   3ee42:	442b      	add	r3, r5
   3ee44:	6033      	str	r3, [r6, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   3ee46:	7a23      	ldrb	r3, [r4, #8]
   3ee48:	b943      	cbnz	r3, 3ee5c <publish_decode+0x64>
	var_header_length = param->message.topic.topic.size + sizeof(u16_t);
   3ee4a:	3502      	adds	r5, #2
	param->message.payload.data = NULL;
   3ee4c:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   3ee4e:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   3ee52:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   3ee54:	6125      	str	r5, [r4, #16]
	return 0;
   3ee56:	e7ed      	b.n	3ee34 <publish_decode+0x3c>
		str->utf8 = NULL;
   3ee58:	6025      	str	r5, [r4, #0]
	if (err_code != 0) {
   3ee5a:	e7f4      	b.n	3ee46 <publish_decode+0x4e>
		err_code = unpack_uint16(buf, &param->message_id);
   3ee5c:	f104 0114 	add.w	r1, r4, #20
   3ee60:	4630      	mov	r0, r6
   3ee62:	f7ff ff67 	bl	3ed34 <unpack_uint16>
		if (err_code != 0) {
   3ee66:	b908      	cbnz	r0, 3ee6c <publish_decode+0x74>
		var_header_length += sizeof(u16_t);
   3ee68:	3504      	adds	r5, #4
   3ee6a:	e7ef      	b.n	3ee4c <publish_decode+0x54>
   3ee6c:	4607      	mov	r7, r0
   3ee6e:	e7e1      	b.n	3ee34 <publish_decode+0x3c>

0003ee70 <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3ee70:	f7ff bf60 	b.w	3ed34 <unpack_uint16>

0003ee74 <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3ee74:	f7ff bf5e 	b.w	3ed34 <unpack_uint16>

0003ee78 <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3ee78:	f7ff bf5c 	b.w	3ed34 <unpack_uint16>

0003ee7c <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3ee7c:	f7ff bf5a 	b.w	3ed34 <unpack_uint16>

0003ee80 <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   3ee80:	b538      	push	{r3, r4, r5, lr}
   3ee82:	4605      	mov	r5, r0
   3ee84:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   3ee86:	f7ff ff55 	bl	3ed34 <unpack_uint16>
	if (err_code != 0) {
   3ee8a:	b930      	cbnz	r0, 3ee9a <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   3ee8c:	e9d5 2300 	ldrd	r2, r3, [r5]
   3ee90:	1a99      	subs	r1, r3, r2
	str->len = length;
   3ee92:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   3ee94:	b111      	cbz	r1, 3ee9c <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   3ee96:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   3ee98:	602b      	str	r3, [r5, #0]
}
   3ee9a:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   3ee9c:	6060      	str	r0, [r4, #4]
   3ee9e:	e7fc      	b.n	3ee9a <subscribe_ack_decode+0x1a>

0003eea0 <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3eea0:	f7ff bf48 	b.w	3ed34 <unpack_uint16>

0003eea4 <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   3eea4:	e9d1 3200 	ldrd	r3, r2, [r1]
   3eea8:	1ad2      	subs	r2, r2, r3
   3eeaa:	2a01      	cmp	r2, #1
   3eeac:	d909      	bls.n	3eec2 <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   3eeae:	1c5a      	adds	r2, r3, #1
   3eeb0:	600a      	str	r2, [r1, #0]
   3eeb2:	0a02      	lsrs	r2, r0, #8
   3eeb4:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   3eeb6:	680b      	ldr	r3, [r1, #0]
   3eeb8:	1c5a      	adds	r2, r3, #1
   3eeba:	600a      	str	r2, [r1, #0]
   3eebc:	7018      	strb	r0, [r3, #0]
	return 0;
   3eebe:	2000      	movs	r0, #0
   3eec0:	4770      	bx	lr
		return -ENOMEM;
   3eec2:	f06f 000b 	mvn.w	r0, #11
}
   3eec6:	4770      	bx	lr

0003eec8 <pack_utf8_str>:
{
   3eec8:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3eeca:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   3eece:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3eed0:	6840      	ldr	r0, [r0, #4]
   3eed2:	1a9b      	subs	r3, r3, r2
   3eed4:	1c82      	adds	r2, r0, #2
   3eed6:	4293      	cmp	r3, r2
{
   3eed8:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3eeda:	d30d      	bcc.n	3eef8 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   3eedc:	b280      	uxth	r0, r0
   3eede:	f7ff ffe1 	bl	3eea4 <pack_uint16>
   3eee2:	e9d5 1200 	ldrd	r1, r2, [r5]
   3eee6:	6820      	ldr	r0, [r4, #0]
   3eee8:	f001 ff3a 	bl	40d60 <memcpy>
	return 0;
   3eeec:	2000      	movs	r0, #0
	buf->cur += str->size;
   3eeee:	6823      	ldr	r3, [r4, #0]
   3eef0:	686a      	ldr	r2, [r5, #4]
   3eef2:	4413      	add	r3, r2
   3eef4:	6023      	str	r3, [r4, #0]
}
   3eef6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   3eef8:	f06f 000b 	mvn.w	r0, #11
   3eefc:	e7fb      	b.n	3eef6 <pack_utf8_str+0x2e>

0003eefe <mqtt_encode_fixed_header>:
{
   3eefe:	b570      	push	{r4, r5, r6, lr}
	u32_t length = buf->cur - start;
   3ef00:	6815      	ldr	r5, [r2, #0]
   3ef02:	1a6d      	subs	r5, r5, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   3ef04:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
   3ef08:	d227      	bcs.n	3ef5a <mqtt_encode_fixed_header+0x5c>
   3ef0a:	462c      	mov	r4, r5
   3ef0c:	2600      	movs	r6, #0
	} while (length > 0);
   3ef0e:	09e4      	lsrs	r4, r4, #7
   3ef10:	b2f3      	uxtb	r3, r6
		if (buf != NULL) {
   3ef12:	f106 0601 	add.w	r6, r6, #1
	} while (length > 0);
   3ef16:	d1fa      	bne.n	3ef0e <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(u8_t);
   3ef18:	3302      	adds	r3, #2
	buf->cur = start - fixed_header_length;
   3ef1a:	b2db      	uxtb	r3, r3
   3ef1c:	425b      	negs	r3, r3
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3ef1e:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   3ef20:	18cc      	adds	r4, r1, r3
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3ef22:	42b4      	cmp	r4, r6
	buf->cur = start - fixed_header_length;
   3ef24:	6014      	str	r4, [r2, #0]
	*(buf->cur++) = val;
   3ef26:	bf1e      	ittt	ne
   3ef28:	3401      	addne	r4, #1
   3ef2a:	6014      	strne	r4, [r2, #0]
   3ef2c:	54c8      	strbne	r0, [r1, r3]
	return 0;
   3ef2e:	4628      	mov	r0, r5
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   3ef30:	6811      	ldr	r1, [r2, #0]
   3ef32:	f000 047f 	and.w	r4, r0, #127	; 0x7f
   3ef36:	700c      	strb	r4, [r1, #0]
			if (length > 0) {
   3ef38:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   3ef3a:	bf1f      	itttt	ne
   3ef3c:	6814      	ldrne	r4, [r2, #0]
   3ef3e:	7821      	ldrbne	r1, [r4, #0]
   3ef40:	f061 017f 	ornne	r1, r1, #127	; 0x7f
   3ef44:	7021      	strbne	r1, [r4, #0]
			buf->cur++;
   3ef46:	6811      	ldr	r1, [r2, #0]
   3ef48:	3101      	adds	r1, #1
   3ef4a:	6011      	str	r1, [r2, #0]
	} while (length > 0);
   3ef4c:	2800      	cmp	r0, #0
   3ef4e:	d1ef      	bne.n	3ef30 <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   3ef50:	440b      	add	r3, r1
	buf->end = buf->cur + length + fixed_header_length;
   3ef52:	4429      	add	r1, r5
	buf->cur = buf->cur - fixed_header_length;
   3ef54:	6013      	str	r3, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   3ef56:	6051      	str	r1, [r2, #4]
}
   3ef58:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   3ef5a:	f06f 0079 	mvn.w	r0, #121	; 0x79
   3ef5e:	e7fb      	b.n	3ef58 <mqtt_encode_fixed_header+0x5a>

0003ef60 <mqtt_message_id_only_enc>:
{
   3ef60:	b570      	push	{r4, r5, r6, lr}
   3ef62:	4606      	mov	r6, r0
   3ef64:	4615      	mov	r5, r2
	if (message_id == 0U) {
   3ef66:	4608      	mov	r0, r1
   3ef68:	b169      	cbz	r1, 3ef86 <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3ef6a:	6814      	ldr	r4, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   3ef6c:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3ef6e:	3405      	adds	r4, #5
   3ef70:	6014      	str	r4, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   3ef72:	f7ff ff97 	bl	3eea4 <pack_uint16>
	if (err_code != 0) {
   3ef76:	b940      	cbnz	r0, 3ef8a <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3ef78:	462a      	mov	r2, r5
   3ef7a:	4621      	mov	r1, r4
   3ef7c:	4630      	mov	r0, r6
}
   3ef7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3ef82:	f7ff bfbc 	b.w	3eefe <mqtt_encode_fixed_header>
		return -EINVAL;
   3ef86:	f06f 0015 	mvn.w	r0, #21
}
   3ef8a:	bd70      	pop	{r4, r5, r6, pc}

0003ef8c <publish_encode>:
{
   3ef8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3ef90:	4607      	mov	r7, r0
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   3ef92:	7d80      	ldrb	r0, [r0, #22]
   3ef94:	7a3c      	ldrb	r4, [r7, #8]
{
   3ef96:	460d      	mov	r5, r1
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   3ef98:	f000 0801 	and.w	r8, r0, #1
   3ef9c:	f3c0 0940 	ubfx	r9, r0, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   3efa0:	b10c      	cbz	r4, 3efa6 <publish_encode+0x1a>
   3efa2:	8abb      	ldrh	r3, [r7, #20]
   3efa4:	b35b      	cbz	r3, 3effe <publish_encode+0x72>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3efa6:	682e      	ldr	r6, [r5, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3efa8:	4629      	mov	r1, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3efaa:	3605      	adds	r6, #5
   3efac:	602e      	str	r6, [r5, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3efae:	4638      	mov	r0, r7
   3efb0:	f7ff ff8a 	bl	3eec8 <pack_utf8_str>
	if (err_code != 0) {
   3efb4:	b9a8      	cbnz	r0, 3efe2 <publish_encode+0x56>
	if (param->message.topic.qos) {
   3efb6:	7a3b      	ldrb	r3, [r7, #8]
   3efb8:	b9ab      	cbnz	r3, 3efe6 <publish_encode+0x5a>
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   3efba:	0060      	lsls	r0, r4, #1
   3efbc:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   3efc0:	693a      	ldr	r2, [r7, #16]
   3efc2:	682b      	ldr	r3, [r5, #0]
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   3efc4:	ea40 0009 	orr.w	r0, r0, r9
   3efc8:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   3efcc:	4413      	add	r3, r2
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   3efce:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	buf->cur += param->message.payload.len;
   3efd2:	602b      	str	r3, [r5, #0]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   3efd4:	462a      	mov	r2, r5
   3efd6:	4631      	mov	r1, r6
   3efd8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3efdc:	f7ff ff8f 	bl	3eefe <mqtt_encode_fixed_header>
	if (err_code != 0) {
   3efe0:	b140      	cbz	r0, 3eff4 <publish_encode+0x68>
}
   3efe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   3efe6:	4629      	mov	r1, r5
   3efe8:	8ab8      	ldrh	r0, [r7, #20]
   3efea:	f7ff ff5b 	bl	3eea4 <pack_uint16>
		if (err_code != 0) {
   3efee:	2800      	cmp	r0, #0
   3eff0:	d0e3      	beq.n	3efba <publish_encode+0x2e>
   3eff2:	e7f6      	b.n	3efe2 <publish_encode+0x56>
	buf->end -= param->message.payload.len;
   3eff4:	686b      	ldr	r3, [r5, #4]
   3eff6:	693a      	ldr	r2, [r7, #16]
   3eff8:	1a9b      	subs	r3, r3, r2
   3effa:	606b      	str	r3, [r5, #4]
	return 0;
   3effc:	e7f1      	b.n	3efe2 <publish_encode+0x56>
		return -EINVAL;
   3effe:	f06f 0015 	mvn.w	r0, #21
   3f002:	e7ee      	b.n	3efe2 <publish_encode+0x56>

0003f004 <publish_ack_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   3f004:	460a      	mov	r2, r1
   3f006:	8801      	ldrh	r1, [r0, #0]
   3f008:	2040      	movs	r0, #64	; 0x40
   3f00a:	f7ff bfa9 	b.w	3ef60 <mqtt_message_id_only_enc>

0003f00e <subscribe_encode>:
{
   3f00e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3f012:	4607      	mov	r7, r0
	if (param->message_id == 0U) {
   3f014:	88c0      	ldrh	r0, [r0, #6]
{
   3f016:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   3f018:	b330      	cbz	r0, 3f068 <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3f01a:	680e      	ldr	r6, [r1, #0]
   3f01c:	3605      	adds	r6, #5
   3f01e:	600e      	str	r6, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   3f020:	f7ff ff40 	bl	3eea4 <pack_uint16>
	if (err_code != 0) {
   3f024:	4604      	mov	r4, r0
   3f026:	bb08      	cbnz	r0, 3f06c <subscribe_encode+0x5e>
   3f028:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < param->list_count; i++) {
   3f02c:	88bb      	ldrh	r3, [r7, #4]
   3f02e:	42a3      	cmp	r3, r4
   3f030:	dc06      	bgt.n	3f040 <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3f032:	462a      	mov	r2, r5
   3f034:	4631      	mov	r1, r6
}
   3f036:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3f03a:	2082      	movs	r0, #130	; 0x82
   3f03c:	f7ff bf5f 	b.w	3eefe <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3f040:	fb09 f804 	mul.w	r8, r9, r4
   3f044:	6838      	ldr	r0, [r7, #0]
   3f046:	4629      	mov	r1, r5
   3f048:	4440      	add	r0, r8
   3f04a:	f7ff ff3d 	bl	3eec8 <pack_utf8_str>
		if (err_code != 0) {
   3f04e:	b980      	cbnz	r0, 3f072 <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   3f050:	683b      	ldr	r3, [r7, #0]
   3f052:	4443      	add	r3, r8
   3f054:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   3f056:	e9d5 3100 	ldrd	r3, r1, [r5]
   3f05a:	4299      	cmp	r1, r3
   3f05c:	d00b      	beq.n	3f076 <subscribe_encode+0x68>
	*(buf->cur++) = val;
   3f05e:	1c59      	adds	r1, r3, #1
   3f060:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   3f062:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   3f064:	701a      	strb	r2, [r3, #0]
		if (err_code != 0) {
   3f066:	e7e1      	b.n	3f02c <subscribe_encode+0x1e>
		return -EINVAL;
   3f068:	f06f 0415 	mvn.w	r4, #21
}
   3f06c:	4620      	mov	r0, r4
   3f06e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3f072:	4604      	mov	r4, r0
   3f074:	e7fa      	b.n	3f06c <subscribe_encode+0x5e>
		return -ENOMEM;
   3f076:	f06f 040b 	mvn.w	r4, #11
   3f07a:	e7f7      	b.n	3f06c <subscribe_encode+0x5e>

0003f07c <unsubscribe_encode>:
{
   3f07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3f080:	680d      	ldr	r5, [r1, #0]
{
   3f082:	4607      	mov	r7, r0
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3f084:	3505      	adds	r5, #5
   3f086:	600d      	str	r5, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   3f088:	88c0      	ldrh	r0, [r0, #6]
{
   3f08a:	460e      	mov	r6, r1
	err_code = pack_uint16(param->message_id, buf);
   3f08c:	f7ff ff0a 	bl	3eea4 <pack_uint16>
	if (err_code != 0) {
   3f090:	4604      	mov	r4, r0
   3f092:	b9a8      	cbnz	r0, 3f0c0 <unsubscribe_encode+0x44>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3f094:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   3f098:	88bb      	ldrh	r3, [r7, #4]
   3f09a:	42a3      	cmp	r3, r4
   3f09c:	dc06      	bgt.n	3f0ac <unsubscribe_encode+0x30>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3f09e:	4632      	mov	r2, r6
   3f0a0:	4629      	mov	r1, r5
}
   3f0a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3f0a6:	20a2      	movs	r0, #162	; 0xa2
   3f0a8:	f7ff bf29 	b.w	3eefe <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3f0ac:	6838      	ldr	r0, [r7, #0]
   3f0ae:	4631      	mov	r1, r6
   3f0b0:	fb08 0004 	mla	r0, r8, r4, r0
   3f0b4:	f7ff ff08 	bl	3eec8 <pack_utf8_str>
		if (err_code != 0) {
   3f0b8:	b908      	cbnz	r0, 3f0be <unsubscribe_encode+0x42>
	for (i = 0; i < param->list_count; i++) {
   3f0ba:	3401      	adds	r4, #1
   3f0bc:	e7ec      	b.n	3f098 <unsubscribe_encode+0x1c>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3f0be:	4604      	mov	r4, r0
}
   3f0c0:	4620      	mov	r0, r4
   3f0c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003f0c6 <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, u32_t length)
{
   3f0c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3f0c8:	460d      	mov	r5, r1
	int len;

	/* Calculate how much data we need to read from the transport,
	 * given the already buffered data.
	 */
	remaining = length - (buf->end - buf->cur);
   3f0ca:	e9d1 4100 	ldrd	r4, r1, [r1]
   3f0ce:	1b0c      	subs	r4, r1, r4
   3f0d0:	1b14      	subs	r4, r2, r4
	if (remaining <= 0) {
   3f0d2:	2c00      	cmp	r4, #0
{
   3f0d4:	4606      	mov	r6, r0
	if (remaining <= 0) {
   3f0d6:	dd14      	ble.n	3f102 <mqtt_read_message_chunk+0x3c>
		return 0;
	}

	/* Check if read does not exceed the buffer. */
	if (buf->end + remaining > client->rx_buf + client->rx_buf_size) {
   3f0d8:	e9d0 3719 	ldrd	r3, r7, [r0, #100]	; 0x64
   3f0dc:	190a      	adds	r2, r1, r4
   3f0de:	443b      	add	r3, r7
   3f0e0:	429a      	cmp	r2, r3
   3f0e2:	d810      	bhi.n	3f106 <mqtt_read_message_chunk+0x40>
		MQTT_ERR("[CID %p]: Buffer too small to receive the message",
			 client);
		return -ENOMEM;
	}

	len = mqtt_transport_read(client, buf->end, remaining, false);
   3f0e4:	2300      	movs	r3, #0
   3f0e6:	4622      	mov	r2, r4
   3f0e8:	f7e1 ffdc 	bl	210a4 <mqtt_transport_read>
	if (len < 0) {
   3f0ec:	2800      	cmp	r0, #0
   3f0ee:	db09      	blt.n	3f104 <mqtt_read_message_chunk+0x3e>
		MQTT_TRC("[CID %p]: Transport read error: %d", client, len);
		return len;
	}

	if (len == 0) {
   3f0f0:	d00c      	beq.n	3f10c <mqtt_read_message_chunk+0x46>
		MQTT_TRC("[CID %p]: Connection closed.", client);
		return -ENOTCONN;
	}

	client->internal.rx_buf_datalen += len;
   3f0f2:	69f3      	ldr	r3, [r6, #28]
	buf->end += len;

	if (len < remaining) {
   3f0f4:	4284      	cmp	r4, r0
	client->internal.rx_buf_datalen += len;
   3f0f6:	4403      	add	r3, r0
   3f0f8:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   3f0fa:	686b      	ldr	r3, [r5, #4]
   3f0fc:	4403      	add	r3, r0
   3f0fe:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   3f100:	dc07      	bgt.n	3f112 <mqtt_read_message_chunk+0x4c>
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
   3f102:	2000      	movs	r0, #0
}
   3f104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOMEM;
   3f106:	f06f 000b 	mvn.w	r0, #11
   3f10a:	e7fb      	b.n	3f104 <mqtt_read_message_chunk+0x3e>
		return -ENOTCONN;
   3f10c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   3f110:	e7f8      	b.n	3f104 <mqtt_read_message_chunk+0x3e>
		return -EAGAIN;
   3f112:	f06f 000a 	mvn.w	r0, #10
   3f116:	e7f5      	b.n	3f104 <mqtt_read_message_chunk+0x3e>

0003f118 <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   3f118:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	u8_t type_and_flags;
	u32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   3f11a:	6e43      	ldr	r3, [r0, #100]	; 0x64
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3f11c:	69c2      	ldr	r2, [r0, #28]
{
   3f11e:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   3f120:	9302      	str	r3, [sp, #8]
{
   3f122:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3f124:	4413      	add	r3, r2
	u8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   3f126:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3f128:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   3f12a:	a902      	add	r1, sp, #8
   3f12c:	4628      	mov	r0, r5
   3f12e:	f7ff ffca 	bl	3f0c6 <mqtt_read_message_chunk>
		if (err_code < 0) {
   3f132:	1e04      	subs	r4, r0, #0
   3f134:	db2b      	blt.n	3f18e <mqtt_handle_rx+0x76>
		buf->cur = client->rx_buf;
   3f136:	6e6b      	ldr	r3, [r5, #100]	; 0x64
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3f138:	aa01      	add	r2, sp, #4
   3f13a:	f10d 0103 	add.w	r1, sp, #3
   3f13e:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   3f140:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3f142:	f7ff fe2d 	bl	3eda0 <fixed_header_decode>
	} while (err_code == -EAGAIN);
   3f146:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3f14a:	4604      	mov	r4, r0
		chunk_size = 1U;
   3f14c:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   3f150:	d0eb      	beq.n	3f12a <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   3f152:	2800      	cmp	r0, #0
   3f154:	db1f      	blt.n	3f196 <mqtt_handle_rx+0x7e>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   3f156:	f89d 6003 	ldrb.w	r6, [sp, #3]
   3f15a:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   3f15e:	2b30      	cmp	r3, #48	; 0x30
   3f160:	d11c      	bne.n	3f19c <mqtt_handle_rx+0x84>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(u16_t));
   3f162:	2202      	movs	r2, #2
   3f164:	a902      	add	r1, sp, #8
   3f166:	4628      	mov	r0, r5
   3f168:	f7ff ffad 	bl	3f0c6 <mqtt_read_message_chunk>
	if (err_code < 0) {
   3f16c:	1e04      	subs	r4, r0, #0
   3f16e:	db0e      	blt.n	3f18e <mqtt_handle_rx+0x76>
	variable_header_length = *buf->cur << 8; /* MSB */
   3f170:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   3f172:	f016 0f06 	tst.w	r6, #6
   3f176:	881a      	ldrh	r2, [r3, #0]
   3f178:	ba52      	rev16	r2, r2
   3f17a:	b292      	uxth	r2, r2
	variable_header_length += sizeof(u16_t);
   3f17c:	bf0c      	ite	eq
   3f17e:	3202      	addeq	r2, #2
		variable_header_length += sizeof(u16_t);
   3f180:	3204      	addne	r2, #4
		err_code = mqtt_read_publish_var_header(client, type_and_flags,
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   3f182:	a902      	add	r1, sp, #8
   3f184:	4628      	mov	r0, r5
   3f186:	f7ff ff9e 	bl	3f0c6 <mqtt_read_message_chunk>
	}

	if (err_code < 0) {
   3f18a:	1e04      	subs	r4, r0, #0
   3f18c:	da08      	bge.n	3f1a0 <mqtt_handle_rx+0x88>
		return (err_code == -EAGAIN) ? 0 : err_code;
   3f18e:	f114 0f0b 	cmn.w	r4, #11
   3f192:	d100      	bne.n	3f196 <mqtt_handle_rx+0x7e>
   3f194:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   3f196:	4620      	mov	r0, r4
   3f198:	b00c      	add	sp, #48	; 0x30
   3f19a:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   3f19c:	9a01      	ldr	r2, [sp, #4]
   3f19e:	e7f0      	b.n	3f182 <mqtt_handle_rx+0x6a>
	evt.result = 0;
   3f1a0:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   3f1a2:	f89d 0003 	ldrb.w	r0, [sp, #3]
   3f1a6:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   3f1a8:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   3f1ac:	2b50      	cmp	r3, #80	; 0x50
	evt.result = 0;
   3f1ae:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   3f1b0:	d04a      	beq.n	3f248 <mqtt_handle_rx+0x130>
   3f1b2:	d81e      	bhi.n	3f1f2 <mqtt_handle_rx+0xda>
   3f1b4:	2b30      	cmp	r3, #48	; 0x30
   3f1b6:	d031      	beq.n	3f21c <mqtt_handle_rx+0x104>
   3f1b8:	2b40      	cmp	r3, #64	; 0x40
   3f1ba:	d03b      	beq.n	3f234 <mqtt_handle_rx+0x11c>
   3f1bc:	2b20      	cmp	r3, #32
   3f1be:	d11d      	bne.n	3f1fc <mqtt_handle_rx+0xe4>
		evt.type = MQTT_EVT_CONNACK;
   3f1c0:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   3f1c4:	a902      	add	r1, sp, #8
   3f1c6:	aa05      	add	r2, sp, #20
   3f1c8:	4628      	mov	r0, r5
   3f1ca:	f7ff fdfa 	bl	3edc2 <connect_ack_decode>
		if (err_code == 0) {
   3f1ce:	4604      	mov	r4, r0
   3f1d0:	2800      	cmp	r0, #0
   3f1d2:	d137      	bne.n	3f244 <mqtt_handle_rx+0x12c>
			if (evt.param.connack.return_code ==
   3f1d4:	f89d 2015 	ldrb.w	r2, [sp, #21]
   3f1d8:	b91a      	cbnz	r2, 3f1e2 <mqtt_handle_rx+0xca>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   3f1da:	69ab      	ldr	r3, [r5, #24]
   3f1dc:	f043 0304 	orr.w	r3, r3, #4
   3f1e0:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   3f1e2:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   3f1e4:	a904      	add	r1, sp, #16
   3f1e6:	4628      	mov	r0, r5
   3f1e8:	f000 f869 	bl	3f2be <event_notify>
	if (err_code < 0) {
   3f1ec:	2c00      	cmp	r4, #0
   3f1ee:	da05      	bge.n	3f1fc <mqtt_handle_rx+0xe4>
   3f1f0:	e7d1      	b.n	3f196 <mqtt_handle_rx+0x7e>
	switch (type_and_flags & 0xF0) {
   3f1f2:	2b70      	cmp	r3, #112	; 0x70
   3f1f4:	d038      	beq.n	3f268 <mqtt_handle_rx+0x150>
   3f1f6:	d804      	bhi.n	3f202 <mqtt_handle_rx+0xea>
   3f1f8:	2b60      	cmp	r3, #96	; 0x60
   3f1fa:	d02d      	beq.n	3f258 <mqtt_handle_rx+0x140>
	client->internal.rx_buf_datalen = 0U;
   3f1fc:	2400      	movs	r4, #0
   3f1fe:	61ec      	str	r4, [r5, #28]
	return 0;
   3f200:	e7c9      	b.n	3f196 <mqtt_handle_rx+0x7e>
	switch (type_and_flags & 0xF0) {
   3f202:	2b90      	cmp	r3, #144	; 0x90
   3f204:	d038      	beq.n	3f278 <mqtt_handle_rx+0x160>
   3f206:	2bb0      	cmp	r3, #176	; 0xb0
   3f208:	d1f8      	bne.n	3f1fc <mqtt_handle_rx+0xe4>
		evt.type = MQTT_EVT_UNSUBACK;
   3f20a:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3f20c:	a905      	add	r1, sp, #20
   3f20e:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   3f212:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3f216:	f7ff fe43 	bl	3eea0 <unsubscribe_ack_decode>
   3f21a:	e012      	b.n	3f242 <mqtt_handle_rx+0x12a>
		evt.type = MQTT_EVT_PUBLISH;
   3f21c:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   3f21e:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   3f220:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   3f224:	ab05      	add	r3, sp, #20
   3f226:	f7ff fde7 	bl	3edf8 <publish_decode>
		client->internal.remaining_payload =
   3f22a:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   3f22c:	4604      	mov	r4, r0
		evt.result = err_code;
   3f22e:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   3f230:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   3f232:	e7d7      	b.n	3f1e4 <mqtt_handle_rx+0xcc>
		evt.type = MQTT_EVT_PUBACK;
   3f234:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   3f236:	a905      	add	r1, sp, #20
   3f238:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   3f23a:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   3f23e:	f7ff fe17 	bl	3ee70 <publish_ack_decode>
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3f242:	4604      	mov	r4, r0
		evt.result = err_code;
   3f244:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   3f246:	e7cd      	b.n	3f1e4 <mqtt_handle_rx+0xcc>
		evt.type = MQTT_EVT_PUBREC;
   3f248:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   3f24a:	a905      	add	r1, sp, #20
   3f24c:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   3f24e:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   3f252:	f7ff fe0f 	bl	3ee74 <publish_receive_decode>
   3f256:	e7f4      	b.n	3f242 <mqtt_handle_rx+0x12a>
		evt.type = MQTT_EVT_PUBREL;
   3f258:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   3f25a:	a905      	add	r1, sp, #20
   3f25c:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   3f25e:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   3f262:	f7ff fe09 	bl	3ee78 <publish_release_decode>
   3f266:	e7ec      	b.n	3f242 <mqtt_handle_rx+0x12a>
		evt.type = MQTT_EVT_PUBCOMP;
   3f268:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   3f26a:	a905      	add	r1, sp, #20
   3f26c:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   3f26e:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   3f272:	f7ff fe03 	bl	3ee7c <publish_complete_decode>
   3f276:	e7e4      	b.n	3f242 <mqtt_handle_rx+0x12a>
		evt.type = MQTT_EVT_SUBACK;
   3f278:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   3f27a:	a905      	add	r1, sp, #20
   3f27c:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   3f27e:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   3f282:	f7ff fdfd 	bl	3ee80 <subscribe_ack_decode>
   3f286:	e7dc      	b.n	3f242 <mqtt_handle_rx+0x12a>

0003f288 <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   3f288:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = close(client->transport.tcp.sock);
   3f28a:	6a80      	ldr	r0, [r0, #40]	; 0x28
   3f28c:	f7e1 fdd6 	bl	20e3c <close>
	if (ret < 0) {
   3f290:	2800      	cmp	r0, #0
   3f292:	da04      	bge.n	3f29e <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   3f294:	f7ff fd3d 	bl	3ed12 <__errno>
   3f298:	6800      	ldr	r0, [r0, #0]
   3f29a:	4240      	negs	r0, r0
	}

	return 0;
}
   3f29c:	bd08      	pop	{r3, pc}
	return 0;
   3f29e:	2000      	movs	r0, #0
   3f2a0:	e7fc      	b.n	3f29c <mqtt_client_tcp_disconnect+0x14>

0003f2a2 <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   3f2a2:	b538      	push	{r3, r4, r5, lr}
   3f2a4:	4604      	mov	r4, r0
   3f2a6:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   3f2a8:	6f02      	ldr	r2, [r0, #112]	; 0x70
   3f2aa:	2100      	movs	r1, #0
   3f2ac:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   3f2ae:	f001 fd77 	bl	40da0 <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   3f2b2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	buf->end = client->tx_buf + client->tx_buf_size;
   3f2b4:	6f22      	ldr	r2, [r4, #112]	; 0x70
	buf->cur = client->tx_buf;
   3f2b6:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   3f2b8:	4413      	add	r3, r2
   3f2ba:	606b      	str	r3, [r5, #4]
}
   3f2bc:	bd38      	pop	{r3, r4, r5, pc}

0003f2be <event_notify>:
	/* Reset internal state. */
	client_reset(client);
}

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   3f2be:	b538      	push	{r3, r4, r5, lr}
	if (client->evt_cb != NULL) {
   3f2c0:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
   3f2c2:	4604      	mov	r4, r0
   3f2c4:	460d      	mov	r5, r1
	if (client->evt_cb != NULL) {
   3f2c6:	b153      	cbz	r3, 3f2de <event_notify+0x20>
		mqtt_mutex_unlock(client);
   3f2c8:	f7e1 ff02 	bl	210d0 <mqtt_mutex_unlock>

		client->evt_cb(client, evt);
   3f2cc:	4620      	mov	r0, r4
   3f2ce:	6e23      	ldr	r3, [r4, #96]	; 0x60
   3f2d0:	4629      	mov	r1, r5
   3f2d2:	4798      	blx	r3

		mqtt_mutex_lock(client);
   3f2d4:	4620      	mov	r0, r4
	}
}
   3f2d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		mqtt_mutex_lock(client);
   3f2da:	f7e1 bf25 	b.w	21128 <mqtt_mutex_lock>
}
   3f2de:	bd38      	pop	{r3, r4, r5, pc}

0003f2e0 <client_disconnect>:

static void client_disconnect(struct mqtt_client *client, int result)
{
   3f2e0:	b530      	push	{r4, r5, lr}
   3f2e2:	4604      	mov	r4, r0
   3f2e4:	b089      	sub	sp, #36	; 0x24
   3f2e6:	460d      	mov	r5, r1
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   3f2e8:	f7e1 fee8 	bl	210bc <mqtt_transport_disconnect>
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED) ||
   3f2ec:	69a3      	ldr	r3, [r4, #24]
	event_notify(client, &evt);
   3f2ee:	4669      	mov	r1, sp
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED) ||
   3f2f0:	f013 030c 	ands.w	r3, r3, #12
		evt.type = MQTT_EVT_DISCONNECT;
   3f2f4:	bf12      	itee	ne
   3f2f6:	2301      	movne	r3, #1
		evt.type = MQTT_EVT_CONNACK;
   3f2f8:	f88d 3000 	strbeq.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   3f2fc:	f06f 036e 	mvneq.w	r3, #110	; 0x6e
	event_notify(client, &evt);
   3f300:	4620      	mov	r0, r4
		evt.type = MQTT_EVT_DISCONNECT;
   3f302:	bf16      	itet	ne
   3f304:	f88d 3000 	strbne.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   3f308:	9307      	streq	r3, [sp, #28]
		evt.result = result;
   3f30a:	9507      	strne	r5, [sp, #28]
	event_notify(client, &evt);
   3f30c:	f7ff ffd7 	bl	3f2be <event_notify>
	MQTT_STATE_INIT(client);
   3f310:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   3f312:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   3f316:	e9c4 3307 	strd	r3, r3, [r4, #28]
	if (err_code < 0) {
		MQTT_ERR("Failed to disconnect transport!");
	}

	disconnect_event_notify(client, result);
}
   3f31a:	b009      	add	sp, #36	; 0x24
   3f31c:	bd30      	pop	{r4, r5, pc}

0003f31e <client_write>:
	return err_code;
}

static int client_write(struct mqtt_client *client, const u8_t *data,
			u32_t datalen)
{
   3f31e:	b538      	push	{r3, r4, r5, lr}
   3f320:	4605      	mov	r5, r0
	int err_code;

	MQTT_TRC("[%p]: Transport writing %d bytes.", client, datalen);

	err_code = mqtt_transport_write(client, data, datalen);
   3f322:	f7e1 feb3 	bl	2108c <mqtt_transport_write>
	if (err_code < 0) {
   3f326:	1e04      	subs	r4, r0, #0
   3f328:	da05      	bge.n	3f336 <client_write+0x18>
		MQTT_TRC("TCP write failed, errno = %d, "
			 "closing connection", errno);
		client_disconnect(client, err_code);
   3f32a:	4621      	mov	r1, r4
   3f32c:	4628      	mov	r0, r5
   3f32e:	f7ff ffd7 	bl	3f2e0 <client_disconnect>

	MQTT_TRC("[%p]: Transport write complete.", client);
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();

	return 0;
}
   3f332:	4620      	mov	r0, r4
   3f334:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_uptime_get();
   3f336:	f001 fc8d 	bl	40c54 <z_impl_k_uptime_get>
	return 0;
   3f33a:	2400      	movs	r4, #0
	return (u32_t)k_uptime_get();
   3f33c:	6168      	str	r0, [r5, #20]
   3f33e:	e7f8      	b.n	3f332 <client_write+0x14>

0003f340 <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   3f340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3f344:	460f      	mov	r7, r1
   3f346:	4690      	mov	r8, r2
   3f348:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   3f34a:	4605      	mov	r5, r0
   3f34c:	b320      	cbz	r0, 3f398 <read_publish_payload+0x58>

	mqtt_mutex_lock(client);
   3f34e:	f7e1 feeb 	bl	21128 <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   3f352:	6a2c      	ldr	r4, [r5, #32]
   3f354:	b1b4      	cbz	r4, 3f384 <read_publish_payload+0x44>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   3f356:	4544      	cmp	r4, r8
   3f358:	4622      	mov	r2, r4
   3f35a:	4633      	mov	r3, r6
   3f35c:	bf28      	it	cs
   3f35e:	4642      	movcs	r2, r8
   3f360:	4639      	mov	r1, r7
   3f362:	4628      	mov	r0, r5
   3f364:	f7e1 fe9e 	bl	210a4 <mqtt_transport_read>
   3f368:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   3f36a:	b916      	cbnz	r6, 3f372 <read_publish_payload+0x32>
   3f36c:	f110 0f0b 	cmn.w	r0, #11
   3f370:	d008      	beq.n	3f384 <read_publish_payload+0x44>
		goto exit;
	}

	if (ret <= 0) {
   3f372:	2c00      	cmp	r4, #0
   3f374:	dc0c      	bgt.n	3f390 <read_publish_payload+0x50>
		if (ret == 0) {
			ret = -ENOTCONN;
   3f376:	bf08      	it	eq
   3f378:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret);
   3f37c:	4628      	mov	r0, r5
   3f37e:	4621      	mov	r1, r4
   3f380:	f7ff ffae 	bl	3f2e0 <client_disconnect>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   3f384:	4628      	mov	r0, r5
   3f386:	f7e1 fea3 	bl	210d0 <mqtt_mutex_unlock>

	return ret;
}
   3f38a:	4620      	mov	r0, r4
   3f38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	client->internal.remaining_payload -= ret;
   3f390:	6a2b      	ldr	r3, [r5, #32]
   3f392:	1b1b      	subs	r3, r3, r4
   3f394:	622b      	str	r3, [r5, #32]
   3f396:	e7f5      	b.n	3f384 <read_publish_payload+0x44>
	NULL_PARAM_CHECK(client);
   3f398:	f06f 0415 	mvn.w	r4, #21
   3f39c:	e7f5      	b.n	3f38a <read_publish_payload+0x4a>

0003f39e <mqtt_client_init>:
{
   3f39e:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   3f3a0:	4604      	mov	r4, r0
   3f3a2:	b180      	cbz	r0, 3f3c6 <mqtt_client_init+0x28>
   3f3a4:	2278      	movs	r2, #120	; 0x78
   3f3a6:	2100      	movs	r1, #0
   3f3a8:	f001 fcfa 	bl	40da0 <memset>
	MQTT_STATE_INIT(client);
   3f3ac:	2300      	movs	r3, #0
   3f3ae:	61a3      	str	r3, [r4, #24]
	z_impl_k_mutex_init(mutex);
   3f3b0:	4620      	mov	r0, r4
   3f3b2:	f001 fb58 	bl	40a66 <z_impl_k_mutex_init>
	client->keepalive = MQTT_KEEPALIVE;
   3f3b6:	6f63      	ldr	r3, [r4, #116]	; 0x74
   3f3b8:	f003 437d 	and.w	r3, r3, #4244635648	; 0xfd000000
   3f3bc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
   3f3c0:	f443 73b4 	orr.w	r3, r3, #360	; 0x168
   3f3c4:	6763      	str	r3, [r4, #116]	; 0x74
}
   3f3c6:	bd10      	pop	{r4, pc}

0003f3c8 <mqtt_connect>:
{
   3f3c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3f3ca:	4604      	mov	r4, r0
   3f3cc:	2800      	cmp	r0, #0
   3f3ce:	d03a      	beq.n	3f446 <mqtt_connect+0x7e>
	NULL_PARAM_CHECK(client->client_id.utf8);
   3f3d0:	6c43      	ldr	r3, [r0, #68]	; 0x44
   3f3d2:	2b00      	cmp	r3, #0
   3f3d4:	d037      	beq.n	3f446 <mqtt_connect+0x7e>
	mqtt_mutex_lock(client);
   3f3d6:	f7e1 fea7 	bl	21128 <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   3f3da:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   3f3dc:	b383      	cbz	r3, 3f440 <mqtt_connect+0x78>
   3f3de:	6e63      	ldr	r3, [r4, #100]	; 0x64
   3f3e0:	b373      	cbz	r3, 3f440 <mqtt_connect+0x78>
	err_code = mqtt_transport_connect(client);
   3f3e2:	4620      	mov	r0, r4
   3f3e4:	f7e1 fe4a 	bl	2107c <mqtt_transport_connect>
	if (err_code < 0) {
   3f3e8:	1e05      	subs	r5, r0, #0
   3f3ea:	db23      	blt.n	3f434 <mqtt_connect+0x6c>
	tx_buf_init(client, &packet);
   3f3ec:	4669      	mov	r1, sp
   3f3ee:	4620      	mov	r0, r4
   3f3f0:	f7ff ff57 	bl	3f2a2 <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3f3f4:	69a3      	ldr	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   3f3f6:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3f3f8:	f043 0302 	orr.w	r3, r3, #2
   3f3fc:	61a3      	str	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   3f3fe:	4620      	mov	r0, r4
   3f400:	f7e1 fc78 	bl	20cf4 <connect_request_encode>
	if (err_code < 0) {
   3f404:	1e05      	subs	r5, r0, #0
   3f406:	db11      	blt.n	3f42c <mqtt_connect+0x64>
	err_code = mqtt_transport_write(client, packet.cur,
   3f408:	e9dd 1200 	ldrd	r1, r2, [sp]
   3f40c:	4620      	mov	r0, r4
   3f40e:	1a52      	subs	r2, r2, r1
   3f410:	f7e1 fe3c 	bl	2108c <mqtt_transport_write>
	if (err_code < 0) {
   3f414:	1e05      	subs	r5, r0, #0
   3f416:	db09      	blt.n	3f42c <mqtt_connect+0x64>
	return z_impl_k_uptime_get();
   3f418:	f001 fc1c 	bl	40c54 <z_impl_k_uptime_get>
	return 0;
   3f41c:	2500      	movs	r5, #0
   3f41e:	6160      	str	r0, [r4, #20]
	mqtt_mutex_unlock(client);
   3f420:	4620      	mov	r0, r4
   3f422:	f7e1 fe55 	bl	210d0 <mqtt_mutex_unlock>
}
   3f426:	4628      	mov	r0, r5
   3f428:	b003      	add	sp, #12
   3f42a:	bd30      	pop	{r4, r5, pc}
	client_disconnect(client, err_code);
   3f42c:	4629      	mov	r1, r5
   3f42e:	4620      	mov	r0, r4
   3f430:	f7ff ff56 	bl	3f2e0 <client_disconnect>
	MQTT_STATE_INIT(client);
   3f434:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   3f436:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   3f43a:	e9c4 3307 	strd	r3, r3, [r4, #28]
   3f43e:	e7ef      	b.n	3f420 <mqtt_connect+0x58>
		err_code = -ENOMEM;
   3f440:	f06f 050b 	mvn.w	r5, #11
   3f444:	e7f6      	b.n	3f434 <mqtt_connect+0x6c>
	NULL_PARAM_CHECK(client);
   3f446:	f06f 0515 	mvn.w	r5, #21
   3f44a:	e7ec      	b.n	3f426 <mqtt_connect+0x5e>

0003f44c <mqtt_publish>:
{
   3f44c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3f44e:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   3f450:	4605      	mov	r5, r0
   3f452:	b330      	cbz	r0, 3f4a2 <mqtt_publish+0x56>
	NULL_PARAM_CHECK(param);
   3f454:	b329      	cbz	r1, 3f4a2 <mqtt_publish+0x56>
	mqtt_mutex_lock(client);
   3f456:	f7e1 fe67 	bl	21128 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3f45a:	4669      	mov	r1, sp
   3f45c:	4628      	mov	r0, r5
   3f45e:	f7ff ff20 	bl	3f2a2 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3f462:	69ab      	ldr	r3, [r5, #24]
   3f464:	075b      	lsls	r3, r3, #29
   3f466:	d519      	bpl.n	3f49c <mqtt_publish+0x50>
	err_code = publish_encode(param, &packet);
   3f468:	4669      	mov	r1, sp
   3f46a:	4630      	mov	r0, r6
   3f46c:	f7ff fd8e 	bl	3ef8c <publish_encode>
	if (err_code < 0) {
   3f470:	1e04      	subs	r4, r0, #0
   3f472:	db0d      	blt.n	3f490 <mqtt_publish+0x44>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3f474:	e9dd 1200 	ldrd	r1, r2, [sp]
   3f478:	4628      	mov	r0, r5
   3f47a:	1a52      	subs	r2, r2, r1
   3f47c:	f7ff ff4f 	bl	3f31e <client_write>
	if (err_code < 0) {
   3f480:	1e04      	subs	r4, r0, #0
   3f482:	db05      	blt.n	3f490 <mqtt_publish+0x44>
	err_code = client_write(client, param->message.payload.data,
   3f484:	e9d6 1203 	ldrd	r1, r2, [r6, #12]
   3f488:	4628      	mov	r0, r5
   3f48a:	f7ff ff48 	bl	3f31e <client_write>
   3f48e:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3f490:	4628      	mov	r0, r5
   3f492:	f7e1 fe1d 	bl	210d0 <mqtt_mutex_unlock>
}
   3f496:	4620      	mov	r0, r4
   3f498:	b002      	add	sp, #8
   3f49a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTCONN;
   3f49c:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3f4a0:	e7f6      	b.n	3f490 <mqtt_publish+0x44>
	NULL_PARAM_CHECK(client);
   3f4a2:	f06f 0415 	mvn.w	r4, #21
   3f4a6:	e7f6      	b.n	3f496 <mqtt_publish+0x4a>

0003f4a8 <mqtt_publish_qos1_ack>:
{
   3f4a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3f4aa:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   3f4ac:	4605      	mov	r5, r0
   3f4ae:	b1f8      	cbz	r0, 3f4f0 <mqtt_publish_qos1_ack+0x48>
	NULL_PARAM_CHECK(param);
   3f4b0:	b1f1      	cbz	r1, 3f4f0 <mqtt_publish_qos1_ack+0x48>
	mqtt_mutex_lock(client);
   3f4b2:	f7e1 fe39 	bl	21128 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3f4b6:	4669      	mov	r1, sp
   3f4b8:	4628      	mov	r0, r5
   3f4ba:	f7ff fef2 	bl	3f2a2 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3f4be:	69ab      	ldr	r3, [r5, #24]
   3f4c0:	075b      	lsls	r3, r3, #29
   3f4c2:	d512      	bpl.n	3f4ea <mqtt_publish_qos1_ack+0x42>
	err_code = publish_ack_encode(param, &packet);
   3f4c4:	4620      	mov	r0, r4
   3f4c6:	4669      	mov	r1, sp
   3f4c8:	f7ff fd9c 	bl	3f004 <publish_ack_encode>
	if (err_code < 0) {
   3f4cc:	1e04      	subs	r4, r0, #0
   3f4ce:	db06      	blt.n	3f4de <mqtt_publish_qos1_ack+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3f4d0:	e9dd 1200 	ldrd	r1, r2, [sp]
   3f4d4:	4628      	mov	r0, r5
   3f4d6:	1a52      	subs	r2, r2, r1
   3f4d8:	f7ff ff21 	bl	3f31e <client_write>
   3f4dc:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3f4de:	4628      	mov	r0, r5
   3f4e0:	f7e1 fdf6 	bl	210d0 <mqtt_mutex_unlock>
}
   3f4e4:	4620      	mov	r0, r4
   3f4e6:	b003      	add	sp, #12
   3f4e8:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3f4ea:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3f4ee:	e7f6      	b.n	3f4de <mqtt_publish_qos1_ack+0x36>
	NULL_PARAM_CHECK(client);
   3f4f0:	f06f 0415 	mvn.w	r4, #21
   3f4f4:	e7f6      	b.n	3f4e4 <mqtt_publish_qos1_ack+0x3c>

0003f4f6 <mqtt_disconnect>:
{
   3f4f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3f4f8:	4604      	mov	r4, r0
   3f4fa:	b300      	cbz	r0, 3f53e <mqtt_disconnect+0x48>
	mqtt_mutex_lock(client);
   3f4fc:	f7e1 fe14 	bl	21128 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3f500:	4669      	mov	r1, sp
   3f502:	4620      	mov	r0, r4
   3f504:	f7ff fecd 	bl	3f2a2 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3f508:	69a3      	ldr	r3, [r4, #24]
   3f50a:	075b      	lsls	r3, r3, #29
   3f50c:	d514      	bpl.n	3f538 <mqtt_disconnect+0x42>
	err_code = disconnect_encode(&packet);
   3f50e:	4668      	mov	r0, sp
   3f510:	f7e1 fc70 	bl	20df4 <disconnect_encode>
	if (err_code < 0) {
   3f514:	1e05      	subs	r5, r0, #0
   3f516:	db09      	blt.n	3f52c <mqtt_disconnect+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3f518:	e9dd 1200 	ldrd	r1, r2, [sp]
   3f51c:	4620      	mov	r0, r4
   3f51e:	1a52      	subs	r2, r2, r1
   3f520:	f7ff fefd 	bl	3f31e <client_write>
	if (err_code < 0) {
   3f524:	1e05      	subs	r5, r0, #0
   3f526:	db01      	blt.n	3f52c <mqtt_disconnect+0x36>
	MQTT_SET_STATE_EXCLUSIVE(client, MQTT_STATE_DISCONNECTING);
   3f528:	2308      	movs	r3, #8
   3f52a:	61a3      	str	r3, [r4, #24]
	mqtt_mutex_unlock(client);
   3f52c:	4620      	mov	r0, r4
   3f52e:	f7e1 fdcf 	bl	210d0 <mqtt_mutex_unlock>
}
   3f532:	4628      	mov	r0, r5
   3f534:	b003      	add	sp, #12
   3f536:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3f538:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   3f53c:	e7f6      	b.n	3f52c <mqtt_disconnect+0x36>
	NULL_PARAM_CHECK(client);
   3f53e:	f06f 0515 	mvn.w	r5, #21
   3f542:	e7f6      	b.n	3f532 <mqtt_disconnect+0x3c>

0003f544 <mqtt_subscribe>:
{
   3f544:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3f546:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   3f548:	4605      	mov	r5, r0
   3f54a:	b1f8      	cbz	r0, 3f58c <mqtt_subscribe+0x48>
	NULL_PARAM_CHECK(param);
   3f54c:	b1f1      	cbz	r1, 3f58c <mqtt_subscribe+0x48>
	mqtt_mutex_lock(client);
   3f54e:	f7e1 fdeb 	bl	21128 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3f552:	4669      	mov	r1, sp
   3f554:	4628      	mov	r0, r5
   3f556:	f7ff fea4 	bl	3f2a2 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3f55a:	69ab      	ldr	r3, [r5, #24]
   3f55c:	075b      	lsls	r3, r3, #29
   3f55e:	d512      	bpl.n	3f586 <mqtt_subscribe+0x42>
	err_code = subscribe_encode(param, &packet);
   3f560:	4620      	mov	r0, r4
   3f562:	4669      	mov	r1, sp
   3f564:	f7ff fd53 	bl	3f00e <subscribe_encode>
	if (err_code < 0) {
   3f568:	1e04      	subs	r4, r0, #0
   3f56a:	db06      	blt.n	3f57a <mqtt_subscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3f56c:	e9dd 1200 	ldrd	r1, r2, [sp]
   3f570:	4628      	mov	r0, r5
   3f572:	1a52      	subs	r2, r2, r1
   3f574:	f7ff fed3 	bl	3f31e <client_write>
   3f578:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3f57a:	4628      	mov	r0, r5
   3f57c:	f7e1 fda8 	bl	210d0 <mqtt_mutex_unlock>
}
   3f580:	4620      	mov	r0, r4
   3f582:	b003      	add	sp, #12
   3f584:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3f586:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3f58a:	e7f6      	b.n	3f57a <mqtt_subscribe+0x36>
	NULL_PARAM_CHECK(client);
   3f58c:	f06f 0415 	mvn.w	r4, #21
   3f590:	e7f6      	b.n	3f580 <mqtt_subscribe+0x3c>

0003f592 <mqtt_unsubscribe>:
{
   3f592:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3f594:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   3f596:	4605      	mov	r5, r0
   3f598:	b1f8      	cbz	r0, 3f5da <mqtt_unsubscribe+0x48>
	NULL_PARAM_CHECK(param);
   3f59a:	b1f1      	cbz	r1, 3f5da <mqtt_unsubscribe+0x48>
	mqtt_mutex_lock(client);
   3f59c:	f7e1 fdc4 	bl	21128 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3f5a0:	4669      	mov	r1, sp
   3f5a2:	4628      	mov	r0, r5
   3f5a4:	f7ff fe7d 	bl	3f2a2 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3f5a8:	69ab      	ldr	r3, [r5, #24]
   3f5aa:	075b      	lsls	r3, r3, #29
   3f5ac:	d512      	bpl.n	3f5d4 <mqtt_unsubscribe+0x42>
	err_code = unsubscribe_encode(param, &packet);
   3f5ae:	4620      	mov	r0, r4
   3f5b0:	4669      	mov	r1, sp
   3f5b2:	f7ff fd63 	bl	3f07c <unsubscribe_encode>
	if (err_code < 0) {
   3f5b6:	1e04      	subs	r4, r0, #0
   3f5b8:	db06      	blt.n	3f5c8 <mqtt_unsubscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3f5ba:	e9dd 1200 	ldrd	r1, r2, [sp]
   3f5be:	4628      	mov	r0, r5
   3f5c0:	1a52      	subs	r2, r2, r1
   3f5c2:	f7ff feac 	bl	3f31e <client_write>
   3f5c6:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3f5c8:	4628      	mov	r0, r5
   3f5ca:	f7e1 fd81 	bl	210d0 <mqtt_mutex_unlock>
}
   3f5ce:	4620      	mov	r0, r4
   3f5d0:	b003      	add	sp, #12
   3f5d2:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3f5d4:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3f5d8:	e7f6      	b.n	3f5c8 <mqtt_unsubscribe+0x36>
	NULL_PARAM_CHECK(client);
   3f5da:	f06f 0415 	mvn.w	r4, #21
   3f5de:	e7f6      	b.n	3f5ce <mqtt_unsubscribe+0x3c>

0003f5e0 <mqtt_ping>:
{
   3f5e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3f5e2:	4605      	mov	r5, r0
   3f5e4:	b1e8      	cbz	r0, 3f622 <mqtt_ping+0x42>
	mqtt_mutex_lock(client);
   3f5e6:	f7e1 fd9f 	bl	21128 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3f5ea:	4669      	mov	r1, sp
   3f5ec:	4628      	mov	r0, r5
   3f5ee:	f7ff fe58 	bl	3f2a2 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3f5f2:	69ab      	ldr	r3, [r5, #24]
   3f5f4:	075b      	lsls	r3, r3, #29
   3f5f6:	d511      	bpl.n	3f61c <mqtt_ping+0x3c>
	err_code = ping_request_encode(&packet);
   3f5f8:	4668      	mov	r0, sp
   3f5fa:	f7e1 fc0d 	bl	20e18 <ping_request_encode>
	if (err_code < 0) {
   3f5fe:	1e04      	subs	r4, r0, #0
   3f600:	db06      	blt.n	3f610 <mqtt_ping+0x30>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3f602:	e9dd 1200 	ldrd	r1, r2, [sp]
   3f606:	4628      	mov	r0, r5
   3f608:	1a52      	subs	r2, r2, r1
   3f60a:	f7ff fe88 	bl	3f31e <client_write>
   3f60e:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3f610:	4628      	mov	r0, r5
   3f612:	f7e1 fd5d 	bl	210d0 <mqtt_mutex_unlock>
}
   3f616:	4620      	mov	r0, r4
   3f618:	b003      	add	sp, #12
   3f61a:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3f61c:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3f620:	e7f6      	b.n	3f610 <mqtt_ping+0x30>
	NULL_PARAM_CHECK(client);
   3f622:	f06f 0415 	mvn.w	r4, #21
   3f626:	e7f6      	b.n	3f616 <mqtt_ping+0x36>

0003f628 <mqtt_live>:
{
   3f628:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3f62a:	4604      	mov	r4, r0
   3f62c:	b300      	cbz	r0, 3f670 <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   3f62e:	f7e1 fd7b 	bl	21128 <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_DISCONNECTING)) {
   3f632:	69a3      	ldr	r3, [r4, #24]
   3f634:	071b      	lsls	r3, r3, #28
   3f636:	d508      	bpl.n	3f64a <mqtt_live+0x22>
		client_disconnect(client, 0);
   3f638:	2100      	movs	r1, #0
   3f63a:	4620      	mov	r0, r4
   3f63c:	f7ff fe50 	bl	3f2e0 <client_disconnect>
	mqtt_mutex_unlock(client);
   3f640:	4620      	mov	r0, r4
   3f642:	f7e1 fd45 	bl	210d0 <mqtt_mutex_unlock>
	return 0;
   3f646:	2000      	movs	r0, #0
}
   3f648:	bd38      	pop	{r3, r4, r5, pc}
		elapsed_time = mqtt_elapsed_time_in_ms_get(
   3f64a:	6965      	ldr	r5, [r4, #20]
   3f64c:	f001 fb02 	bl	40c54 <z_impl_k_uptime_get>
		if ((client->keepalive > 0) &&
   3f650:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
 *
 * @retval Time elapsed since last_activity time.
 */
static inline u32_t mqtt_elapsed_time_in_ms_get(u32_t last_activity)
{
	s32_t diff = k_uptime_get_32() - last_activity;
   3f654:	1b40      	subs	r0, r0, r5

	if (diff < 0) {
		return 0;
   3f656:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   3f65a:	2a00      	cmp	r2, #0
   3f65c:	d0f0      	beq.n	3f640 <mqtt_live+0x18>
		    (elapsed_time >= (client->keepalive * 1000))) {
   3f65e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3f662:	4353      	muls	r3, r2
		if ((client->keepalive > 0) &&
   3f664:	4283      	cmp	r3, r0
   3f666:	d8eb      	bhi.n	3f640 <mqtt_live+0x18>
			(void)mqtt_ping(client);
   3f668:	4620      	mov	r0, r4
   3f66a:	f7ff ffb9 	bl	3f5e0 <mqtt_ping>
   3f66e:	e7e7      	b.n	3f640 <mqtt_live+0x18>
	NULL_PARAM_CHECK(client);
   3f670:	f06f 0015 	mvn.w	r0, #21
   3f674:	e7e8      	b.n	3f648 <mqtt_live+0x20>

0003f676 <mqtt_input>:
{
   3f676:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3f678:	4605      	mov	r5, r0
   3f67a:	b310      	cbz	r0, 3f6c2 <mqtt_input+0x4c>
	mqtt_mutex_lock(client);
   3f67c:	f7e1 fd54 	bl	21128 <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_DISCONNECTING)) {
   3f680:	69ab      	ldr	r3, [r5, #24]
   3f682:	071a      	lsls	r2, r3, #28
   3f684:	d509      	bpl.n	3f69a <mqtt_input+0x24>
		client_disconnect(client, 0);
   3f686:	2100      	movs	r1, #0
   3f688:	4628      	mov	r0, r5
   3f68a:	f7ff fe29 	bl	3f2e0 <client_disconnect>
	int err_code = 0;
   3f68e:	2400      	movs	r4, #0
	mqtt_mutex_unlock(client);
   3f690:	4628      	mov	r0, r5
   3f692:	f7e1 fd1d 	bl	210d0 <mqtt_mutex_unlock>
}
   3f696:	4620      	mov	r0, r4
   3f698:	bd38      	pop	{r3, r4, r5, pc}
	} else if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   3f69a:	079b      	lsls	r3, r3, #30
   3f69c:	d50b      	bpl.n	3f6b6 <mqtt_input+0x40>
	if (client->internal.remaining_payload > 0) {
   3f69e:	6a2b      	ldr	r3, [r5, #32]
   3f6a0:	b963      	cbnz	r3, 3f6bc <mqtt_input+0x46>
	err_code = mqtt_handle_rx(client);
   3f6a2:	4628      	mov	r0, r5
   3f6a4:	f7ff fd38 	bl	3f118 <mqtt_handle_rx>
	if (err_code < 0) {
   3f6a8:	1e04      	subs	r4, r0, #0
   3f6aa:	daf1      	bge.n	3f690 <mqtt_input+0x1a>
		client_disconnect(client, err_code);
   3f6ac:	4621      	mov	r1, r4
   3f6ae:	4628      	mov	r0, r5
   3f6b0:	f7ff fe16 	bl	3f2e0 <client_disconnect>
   3f6b4:	e7ec      	b.n	3f690 <mqtt_input+0x1a>
		err_code = -EACCES;
   3f6b6:	f06f 040c 	mvn.w	r4, #12
   3f6ba:	e7e9      	b.n	3f690 <mqtt_input+0x1a>
		return -EBUSY;
   3f6bc:	f06f 040f 	mvn.w	r4, #15
   3f6c0:	e7e6      	b.n	3f690 <mqtt_input+0x1a>
	NULL_PARAM_CHECK(client);
   3f6c2:	f06f 0415 	mvn.w	r4, #21
   3f6c6:	e7e6      	b.n	3f696 <mqtt_input+0x20>

0003f6c8 <mqtt_read_publish_payload_blocking>:
}

int mqtt_read_publish_payload_blocking(struct mqtt_client *client, void *buffer,
				       size_t length)
{
	return read_publish_payload(client, buffer, length, true);
   3f6c8:	2301      	movs	r3, #1
   3f6ca:	f7ff be39 	b.w	3f340 <read_publish_payload>

0003f6ce <mqtt_readall_publish_payload>:
}

int mqtt_readall_publish_payload(struct mqtt_client *client, u8_t *buffer,
				 size_t length)
{
   3f6ce:	b570      	push	{r4, r5, r6, lr}
   3f6d0:	4606      	mov	r6, r0
   3f6d2:	460c      	mov	r4, r1
	u8_t *end = buffer + length;
   3f6d4:	188d      	adds	r5, r1, r2

	while (buffer < end) {
   3f6d6:	42ac      	cmp	r4, r5
   3f6d8:	d301      	bcc.n	3f6de <mqtt_readall_publish_payload+0x10>
		}

		buffer += ret;
	}

	return 0;
   3f6da:	2000      	movs	r0, #0
}
   3f6dc:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buffer,
   3f6de:	1b2a      	subs	r2, r5, r4
   3f6e0:	4621      	mov	r1, r4
   3f6e2:	4630      	mov	r0, r6
   3f6e4:	f7ff fff0 	bl	3f6c8 <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   3f6e8:	2800      	cmp	r0, #0
   3f6ea:	dbf7      	blt.n	3f6dc <mqtt_readall_publish_payload+0xe>
		} else if (ret == 0) {
   3f6ec:	d001      	beq.n	3f6f2 <mqtt_readall_publish_payload+0x24>
		buffer += ret;
   3f6ee:	4404      	add	r4, r0
   3f6f0:	e7f1      	b.n	3f6d6 <mqtt_readall_publish_payload+0x8>
			return -EIO;
   3f6f2:	f06f 0004 	mvn.w	r0, #4
   3f6f6:	e7f1      	b.n	3f6dc <mqtt_readall_publish_payload+0xe>

0003f6f8 <mqtt_client_tls_disconnect>:

int mqtt_client_tls_disconnect(struct mqtt_client *client)
{
   3f6f8:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tls.sock);
	ret = close(client->transport.tls.sock);
   3f6fa:	6a80      	ldr	r0, [r0, #40]	; 0x28
   3f6fc:	f7e1 fd34 	bl	21168 <close>
	if (ret < 0) {
   3f700:	2800      	cmp	r0, #0
   3f702:	da04      	bge.n	3f70e <mqtt_client_tls_disconnect+0x16>
		return -errno;
   3f704:	f7ff fb05 	bl	3ed12 <__errno>
   3f708:	6800      	ldr	r0, [r0, #0]
   3f70a:	4240      	negs	r0, r0
	}

	return 0;
}
   3f70c:	bd08      	pop	{r3, pc}
	return 0;
   3f70e:	2000      	movs	r0, #0
   3f710:	e7fc      	b.n	3f70c <mqtt_client_tls_disconnect+0x14>

0003f712 <gpio_nrfx_write>:
{
   3f712:	b510      	push	{r4, lr}
	return port->config->config_info;
   3f714:	6804      	ldr	r4, [r0, #0]
   3f716:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3f718:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   3f71a:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3f71c:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   3f71e:	69c0      	ldr	r0, [r0, #28]
   3f720:	d103      	bne.n	3f72a <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   3f722:	4058      	eors	r0, r3
    p_reg->OUT = value;
   3f724:	6060      	str	r0, [r4, #4]
}
   3f726:	2000      	movs	r0, #0
   3f728:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   3f72a:	3300      	adds	r3, #0
   3f72c:	f04f 0101 	mov.w	r1, #1
   3f730:	bf18      	it	ne
   3f732:	2301      	movne	r3, #1
   3f734:	40d0      	lsrs	r0, r2
   3f736:	f000 0001 	and.w	r0, r0, #1
   3f73a:	4091      	lsls	r1, r2
   3f73c:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   3f73e:	bf14      	ite	ne
   3f740:	60a1      	strne	r1, [r4, #8]
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   3f742:	60e1      	streq	r1, [r4, #12]
   3f744:	e7ef      	b.n	3f726 <gpio_nrfx_write+0x14>

0003f746 <gpio_nrfx_read>:
{
   3f746:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
   3f748:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   3f74a:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3f74c:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   3f74e:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3f750:	6825      	ldr	r5, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   3f752:	2901      	cmp	r1, #1
    return p_reg->DIR;
   3f754:	696e      	ldr	r6, [r5, #20]
    return p_reg->IN;
   3f756:	692c      	ldr	r4, [r5, #16]
    return p_reg->OUT;
   3f758:	686d      	ldr	r5, [r5, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   3f75a:	ea80 0004 	eor.w	r0, r0, r4
   3f75e:	ea84 0405 	eor.w	r4, r4, r5
   3f762:	ea04 0406 	and.w	r4, r4, r6
   3f766:	ea80 0004 	eor.w	r0, r0, r4
		*value = (port_val & BIT(pin)) ? 1 : 0;
   3f76a:	bf1c      	itt	ne
   3f76c:	40d0      	lsrne	r0, r2
   3f76e:	f000 0001 	andne.w	r0, r0, #1
   3f772:	6018      	str	r0, [r3, #0]
}
   3f774:	2000      	movs	r0, #0
   3f776:	bd70      	pop	{r4, r5, r6, pc}

0003f778 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   3f778:	2901      	cmp	r1, #1
{
   3f77a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   3f77e:	bf18      	it	ne
   3f780:	b2d4      	uxtbne	r4, r2
{
   3f782:	4606      	mov	r6, r0
		to_pin   = pin;
   3f784:	bf12      	itee	ne
   3f786:	4625      	movne	r5, r4
		to_pin   = 31U;
   3f788:	251f      	moveq	r5, #31
		from_pin = 0U;
   3f78a:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   3f78c:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   3f790:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   3f792:	42ac      	cmp	r4, r5
   3f794:	d902      	bls.n	3f79c <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   3f796:	2000      	movs	r0, #0
}
   3f798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   3f79c:	68fb      	ldr	r3, [r7, #12]
   3f79e:	fa08 f204 	lsl.w	r2, r8, r4
   3f7a2:	ea23 0302 	bic.w	r3, r3, r2
   3f7a6:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   3f7a8:	4621      	mov	r1, r4
   3f7aa:	4630      	mov	r0, r6
   3f7ac:	f7e1 fee6 	bl	2157c <gpiote_pin_int_cfg>
		if (res != 0) {
   3f7b0:	2800      	cmp	r0, #0
   3f7b2:	d1f1      	bne.n	3f798 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   3f7b4:	3401      	adds	r4, #1
   3f7b6:	b2e4      	uxtb	r4, r4
   3f7b8:	e7eb      	b.n	3f792 <gpio_nrfx_pin_disable_callback+0x1a>

0003f7ba <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   3f7ba:	2901      	cmp	r1, #1
{
   3f7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   3f7c0:	bf18      	it	ne
   3f7c2:	b2d4      	uxtbne	r4, r2
{
   3f7c4:	4606      	mov	r6, r0
		to_pin   = pin;
   3f7c6:	bf12      	itee	ne
   3f7c8:	4625      	movne	r5, r4
		to_pin   = 31U;
   3f7ca:	251f      	moveq	r5, #31
		from_pin = 0U;
   3f7cc:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   3f7ce:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   3f7d2:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   3f7d4:	42ac      	cmp	r4, r5
   3f7d6:	d902      	bls.n	3f7de <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   3f7d8:	2000      	movs	r0, #0
}
   3f7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   3f7de:	68fb      	ldr	r3, [r7, #12]
   3f7e0:	fa08 f204 	lsl.w	r2, r8, r4
   3f7e4:	4313      	orrs	r3, r2
   3f7e6:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   3f7e8:	4621      	mov	r1, r4
   3f7ea:	4630      	mov	r0, r6
   3f7ec:	f7e1 fec6 	bl	2157c <gpiote_pin_int_cfg>
		if (res != 0) {
   3f7f0:	2800      	cmp	r0, #0
   3f7f2:	d1f2      	bne.n	3f7da <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   3f7f4:	3401      	adds	r4, #1
   3f7f6:	b2e4      	uxtb	r4, r4
   3f7f8:	e7ec      	b.n	3f7d4 <gpio_nrfx_pin_enable_callback+0x1a>

0003f7fa <is_regular_addr_valid>:
{
   3f7fa:	b538      	push	{r3, r4, r5, lr}
   3f7fc:	4604      	mov	r4, r0
   3f7fe:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   3f800:	f001 f8f9 	bl	409f6 <nrfx_nvmc_flash_size_get>
	if (addr >= DT_FLASH_BASE_ADDRESS + flash_size ||
   3f804:	4284      	cmp	r4, r0
   3f806:	d209      	bcs.n	3f81c <is_regular_addr_valid+0x22>
   3f808:	2c00      	cmp	r4, #0
   3f80a:	db07      	blt.n	3f81c <is_regular_addr_valid+0x22>
	    addr < DT_FLASH_BASE_ADDRESS ||
   3f80c:	42a8      	cmp	r0, r5
   3f80e:	d305      	bcc.n	3f81c <is_regular_addr_valid+0x22>
	    (addr - DT_FLASH_BASE_ADDRESS) + len > flash_size) {
   3f810:	442c      	add	r4, r5
	    len > flash_size ||
   3f812:	4284      	cmp	r4, r0
   3f814:	bf8c      	ite	hi
   3f816:	2000      	movhi	r0, #0
   3f818:	2001      	movls	r0, #1
}
   3f81a:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   3f81c:	2000      	movs	r0, #0
   3f81e:	e7fc      	b.n	3f81a <is_regular_addr_valid+0x20>

0003f820 <flash_nrf_read>:
{
   3f820:	b570      	push	{r4, r5, r6, lr}
   3f822:	460d      	mov	r5, r1
	return is_regular_addr_valid(addr, len) ||
   3f824:	4619      	mov	r1, r3
   3f826:	4628      	mov	r0, r5
{
   3f828:	4616      	mov	r6, r2
   3f82a:	461c      	mov	r4, r3
	return is_regular_addr_valid(addr, len) ||
   3f82c:	f7ff ffe5 	bl	3f7fa <is_regular_addr_valid>
	if (!is_addr_valid(addr, len)) {
   3f830:	b170      	cbz	r0, 3f850 <flash_nrf_read+0x30>
	if (!len) {
   3f832:	b184      	cbz	r4, 3f856 <flash_nrf_read+0x36>
	if (addr < PM_APP_ADDRESS) {
   3f834:	f5b5 3fc1 	cmp.w	r5, #98816	; 0x18200
		return spm_request_read(data, addr, len);
   3f838:	4622      	mov	r2, r4
   3f83a:	4629      	mov	r1, r5
   3f83c:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   3f83e:	da03      	bge.n	3f848 <flash_nrf_read+0x28>
}
   3f840:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return spm_request_read(data, addr, len);
   3f844:	f7d8 bbcc 	b.w	17fe0 <spm_request_read>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3f848:	f001 fa8a 	bl	40d60 <memcpy>
   3f84c:	2000      	movs	r0, #0
}
   3f84e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3f850:	f06f 0015 	mvn.w	r0, #21
   3f854:	e7fb      	b.n	3f84e <flash_nrf_read+0x2e>
		return 0;
   3f856:	4620      	mov	r0, r4
   3f858:	e7f9      	b.n	3f84e <flash_nrf_read+0x2e>

0003f85a <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   3f85a:	6883      	ldr	r3, [r0, #8]
   3f85c:	689b      	ldr	r3, [r3, #8]
   3f85e:	7b9a      	ldrb	r2, [r3, #14]
   3f860:	b172      	cbz	r2, 3f880 <uarte_nrfx_isr_int+0x26>
	return dev->config->config_info;
   3f862:	6802      	ldr	r2, [r0, #0]
	return config->uarte_regs;
   3f864:	6892      	ldr	r2, [r2, #8]
   3f866:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f868:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (data->int_driven->disable_tx_irq &&
   3f86c:	b141      	cbz	r1, 3f880 <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   3f86e:	f44f 7180 	mov.w	r1, #256	; 0x100
   3f872:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f876:	2101      	movs	r1, #1
   3f878:	60d1      	str	r1, [r2, #12]
		data->int_driven->disable_tx_irq = false;
   3f87a:	2200      	movs	r2, #0
   3f87c:	739a      	strb	r2, [r3, #14]
		return;
   3f87e:	4770      	bx	lr
	if (data->int_driven->cb) {
   3f880:	681a      	ldr	r2, [r3, #0]
   3f882:	b10a      	cbz	r2, 3f888 <uarte_nrfx_isr_int+0x2e>
		data->int_driven->cb(data->int_driven->cb_data);
   3f884:	6858      	ldr	r0, [r3, #4]
   3f886:	4710      	bx	r2
}
   3f888:	4770      	bx	lr

0003f88a <uarte_nrfx_config_get>:
{
   3f88a:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   3f88c:	6882      	ldr	r2, [r0, #8]
   3f88e:	e892 0003 	ldmia.w	r2, {r0, r1}
   3f892:	e883 0003 	stmia.w	r3, {r0, r1}
}
   3f896:	2000      	movs	r0, #0
   3f898:	4770      	bx	lr

0003f89a <uarte_nrfx_err_check>:
	return dev->config->config_info;
   3f89a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   3f89c:	689b      	ldr	r3, [r3, #8]
   3f89e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f8a0:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   3f8a4:	b118      	cbz	r0, 3f8ae <uarte_nrfx_err_check+0x14>
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   3f8a6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   3f8aa:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   3f8ae:	4770      	bx	lr

0003f8b0 <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   3f8b0:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   3f8b2:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   3f8b4:	689b      	ldr	r3, [r3, #8]
   3f8b6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f8b8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3f8bc:	b138      	cbz	r0, 3f8ce <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   3f8be:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f8c0:	2000      	movs	r0, #0
   3f8c2:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f8c4:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f8c6:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f8ca:	601a      	str	r2, [r3, #0]
	return 0;
   3f8cc:	4770      	bx	lr
		return -1;
   3f8ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   3f8d2:	4770      	bx	lr

0003f8d4 <uarte_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f8d4:	2200      	movs	r2, #0
	return dev->config->config_info;
   3f8d6:	6803      	ldr	r3, [r0, #0]
{
   3f8d8:	b082      	sub	sp, #8
	return config->uarte_regs;
   3f8da:	689b      	ldr	r3, [r3, #8]
{
   3f8dc:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   3f8e0:	681b      	ldr	r3, [r3, #0]
   3f8e2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3f8e6:	f10d 0207 	add.w	r2, sp, #7
   3f8ea:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3f8ee:	2201      	movs	r2, #1
   3f8f0:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f8f4:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f8f6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   3f8fa:	2900      	cmp	r1, #0
   3f8fc:	d0fb      	beq.n	3f8f6 <uarte_nrfx_poll_out+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f8fe:	60da      	str	r2, [r3, #12]
}
   3f900:	b002      	add	sp, #8
   3f902:	4770      	bx	lr

0003f904 <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   3f904:	6803      	ldr	r3, [r0, #0]
{
   3f906:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   3f908:	689b      	ldr	r3, [r3, #8]
   3f90a:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f90c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   3f910:	b1bb      	cbz	r3, 3f942 <uarte_nrfx_fifo_fill+0x3e>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   3f912:	6885      	ldr	r5, [r0, #8]
	if (len > data->int_driven->tx_buff_size) {
   3f914:	68ab      	ldr	r3, [r5, #8]
   3f916:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f918:	2300      	movs	r3, #0
   3f91a:	4290      	cmp	r0, r2
   3f91c:	bfa8      	it	ge
   3f91e:	4610      	movge	r0, r2
   3f920:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   3f924:	68aa      	ldr	r2, [r5, #8]
   3f926:	4283      	cmp	r3, r0
   3f928:	6892      	ldr	r2, [r2, #8]
   3f92a:	db06      	blt.n	3f93a <uarte_nrfx_fifo_fill+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f92c:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3f92e:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3f932:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f936:	60a3      	str	r3, [r4, #8]
}
   3f938:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   3f93a:	5cce      	ldrb	r6, [r1, r3]
   3f93c:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   3f93e:	3301      	adds	r3, #1
   3f940:	e7f0      	b.n	3f924 <uarte_nrfx_fifo_fill+0x20>
		return 0;
   3f942:	4618      	mov	r0, r3
   3f944:	e7f8      	b.n	3f938 <uarte_nrfx_fifo_fill+0x34>

0003f946 <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   3f946:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   3f948:	689b      	ldr	r3, [r3, #8]
   3f94a:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f94c:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3f950:	b143      	cbz	r3, 3f964 <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   3f952:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f954:	2000      	movs	r0, #0
   3f956:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f95a:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   3f95c:	7b1b      	ldrb	r3, [r3, #12]
   3f95e:	700b      	strb	r3, [r1, #0]
   3f960:	6010      	str	r0, [r2, #0]
   3f962:	4770      	bx	lr
	int num_rx = 0;
   3f964:	4618      	mov	r0, r3
}
   3f966:	4770      	bx	lr

0003f968 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   3f968:	2100      	movs	r1, #0
	return dev->config->config_info;
   3f96a:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   3f96c:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   3f96e:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   3f970:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   3f972:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   3f974:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   3f976:	f44f 7280 	mov.w	r2, #256	; 0x100
   3f97a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3f97e:	4770      	bx	lr

0003f980 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   3f980:	2201      	movs	r2, #1
   3f982:	6883      	ldr	r3, [r0, #8]
   3f984:	689b      	ldr	r3, [r3, #8]
   3f986:	739a      	strb	r2, [r3, #14]
}
   3f988:	4770      	bx	lr

0003f98a <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   3f98a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   3f98c:	689b      	ldr	r3, [r3, #8]
   3f98e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f990:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   3f994:	b118      	cbz	r0, 3f99e <uarte_nrfx_irq_tx_ready_complete+0x14>
    return (bool)(p_reg->INTENSET & mask);
   3f996:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   3f99a:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   3f99e:	4770      	bx	lr

0003f9a0 <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   3f9a0:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   3f9a2:	689b      	ldr	r3, [r3, #8]
   3f9a4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f9a6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   3f9aa:	3000      	adds	r0, #0
   3f9ac:	bf18      	it	ne
   3f9ae:	2001      	movne	r0, #1
   3f9b0:	4770      	bx	lr

0003f9b2 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   3f9b2:	2210      	movs	r2, #16
	return dev->config->config_info;
   3f9b4:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   3f9b6:	689b      	ldr	r3, [r3, #8]
   3f9b8:	681b      	ldr	r3, [r3, #0]
   3f9ba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3f9be:	4770      	bx	lr

0003f9c0 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   3f9c0:	2210      	movs	r2, #16
	return dev->config->config_info;
   3f9c2:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   3f9c4:	689b      	ldr	r3, [r3, #8]
   3f9c6:	681b      	ldr	r3, [r3, #0]
   3f9c8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   3f9cc:	4770      	bx	lr

0003f9ce <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   3f9ce:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   3f9d2:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   3f9d4:	689b      	ldr	r3, [r3, #8]
   3f9d6:	681b      	ldr	r3, [r3, #0]
   3f9d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3f9dc:	4770      	bx	lr

0003f9de <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   3f9de:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   3f9e2:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   3f9e4:	689b      	ldr	r3, [r3, #8]
   3f9e6:	681b      	ldr	r3, [r3, #0]
   3f9e8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   3f9ec:	4770      	bx	lr

0003f9ee <uarte_nrfx_irq_update>:
}
   3f9ee:	2001      	movs	r0, #1
   3f9f0:	4770      	bx	lr

0003f9f2 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   3f9f2:	6883      	ldr	r3, [r0, #8]
   3f9f4:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   3f9f6:	e9c3 1200 	strd	r1, r2, [r3]
}
   3f9fa:	4770      	bx	lr

0003f9fc <uarte_nrfx_irq_is_pending>:
{
   3f9fc:	b508      	push	{r3, lr}
	return dev->config->config_info;
   3f9fe:	6803      	ldr	r3, [r0, #0]
{
   3fa00:	4602      	mov	r2, r0
	return config->uarte_regs;
   3fa02:	689b      	ldr	r3, [r3, #8]
   3fa04:	6819      	ldr	r1, [r3, #0]
    return (bool)(p_reg->INTENSET & mask);
   3fa06:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   3fa0a:	05db      	lsls	r3, r3, #23
   3fa0c:	d405      	bmi.n	3fa1a <uarte_nrfx_irq_is_pending+0x1e>
   3fa0e:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   3fa12:	f010 0010 	ands.w	r0, r0, #16
   3fa16:	d106      	bne.n	3fa26 <uarte_nrfx_irq_is_pending+0x2a>
}
   3fa18:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   3fa1a:	f7ff ffb6 	bl	3f98a <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   3fa1e:	2800      	cmp	r0, #0
   3fa20:	d0f5      	beq.n	3fa0e <uarte_nrfx_irq_is_pending+0x12>
		||
   3fa22:	2001      	movs	r0, #1
   3fa24:	e7f8      	b.n	3fa18 <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   3fa26:	4610      	mov	r0, r2
   3fa28:	f7ff ffba 	bl	3f9a0 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   3fa2c:	3000      	adds	r0, #0
   3fa2e:	bf18      	it	ne
   3fa30:	2001      	movne	r0, #1
   3fa32:	e7f1      	b.n	3fa18 <uarte_nrfx_irq_is_pending+0x1c>

0003fa34 <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   3fa34:	2000      	movs	r0, #0
   3fa36:	4770      	bx	lr

0003fa38 <parse_hex4>:
    for (i = 0; i < 4; i++)
   3fa38:	2200      	movs	r2, #0
    unsigned int h = 0;
   3fa3a:	4613      	mov	r3, r2
{
   3fa3c:	b510      	push	{r4, lr}
        if ((input[i] >= '0') && (input[i] <= '9'))
   3fa3e:	5c81      	ldrb	r1, [r0, r2]
   3fa40:	f1a1 0430 	sub.w	r4, r1, #48	; 0x30
   3fa44:	2c09      	cmp	r4, #9
   3fa46:	d80a      	bhi.n	3fa5e <parse_hex4+0x26>
            h += (unsigned int) input[i] - '0';
   3fa48:	3b30      	subs	r3, #48	; 0x30
        if (i < 3)
   3fa4a:	2a03      	cmp	r2, #3
            h += (unsigned int) 10 + input[i] - 'a';
   3fa4c:	440b      	add	r3, r1
    for (i = 0; i < 4; i++)
   3fa4e:	f102 0201 	add.w	r2, r2, #1
            h = h << 4;
   3fa52:	bf18      	it	ne
   3fa54:	011b      	lslne	r3, r3, #4
    for (i = 0; i < 4; i++)
   3fa56:	2a04      	cmp	r2, #4
   3fa58:	d1f1      	bne.n	3fa3e <parse_hex4+0x6>
}
   3fa5a:	4618      	mov	r0, r3
   3fa5c:	bd10      	pop	{r4, pc}
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
   3fa5e:	f1a1 0441 	sub.w	r4, r1, #65	; 0x41
   3fa62:	2c05      	cmp	r4, #5
   3fa64:	d801      	bhi.n	3fa6a <parse_hex4+0x32>
            h += (unsigned int) 10 + input[i] - 'A';
   3fa66:	3b37      	subs	r3, #55	; 0x37
   3fa68:	e7ef      	b.n	3fa4a <parse_hex4+0x12>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
   3fa6a:	f1a1 0461 	sub.w	r4, r1, #97	; 0x61
   3fa6e:	2c05      	cmp	r4, #5
   3fa70:	d801      	bhi.n	3fa76 <parse_hex4+0x3e>
            h += (unsigned int) 10 + input[i] - 'a';
   3fa72:	3b57      	subs	r3, #87	; 0x57
   3fa74:	e7e9      	b.n	3fa4a <parse_hex4+0x12>
            return 0;
   3fa76:	2300      	movs	r3, #0
   3fa78:	e7ef      	b.n	3fa5a <parse_hex4+0x22>

0003fa7a <buffer_skip_whitespace>:
{
   3fa7a:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
   3fa7c:	b140      	cbz	r0, 3fa90 <buffer_skip_whitespace+0x16>
   3fa7e:	6801      	ldr	r1, [r0, #0]
   3fa80:	b171      	cbz	r1, 3faa0 <buffer_skip_whitespace+0x26>
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   3fa82:	6842      	ldr	r2, [r0, #4]
   3fa84:	6883      	ldr	r3, [r0, #8]
   3fa86:	4293      	cmp	r3, r2
   3fa88:	d206      	bcs.n	3fa98 <buffer_skip_whitespace+0x1e>
   3fa8a:	5ccc      	ldrb	r4, [r1, r3]
   3fa8c:	2c20      	cmp	r4, #32
   3fa8e:	d900      	bls.n	3fa92 <buffer_skip_whitespace+0x18>
}
   3fa90:	bd10      	pop	{r4, pc}
       buffer->offset++;
   3fa92:	3301      	adds	r3, #1
   3fa94:	6083      	str	r3, [r0, #8]
   3fa96:	e7f5      	b.n	3fa84 <buffer_skip_whitespace+0xa>
    if (buffer->offset == buffer->length)
   3fa98:	d1fa      	bne.n	3fa90 <buffer_skip_whitespace+0x16>
        buffer->offset--;
   3fa9a:	3a01      	subs	r2, #1
   3fa9c:	6082      	str	r2, [r0, #8]
   3fa9e:	e7f7      	b.n	3fa90 <buffer_skip_whitespace+0x16>
        return NULL;
   3faa0:	4608      	mov	r0, r1
   3faa2:	e7f5      	b.n	3fa90 <buffer_skip_whitespace+0x16>

0003faa4 <update_offset>:
{
   3faa4:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   3faa6:	4604      	mov	r4, r0
   3faa8:	b140      	cbz	r0, 3fabc <update_offset+0x18>
   3faaa:	6803      	ldr	r3, [r0, #0]
   3faac:	b133      	cbz	r3, 3fabc <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   3faae:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   3fab0:	4418      	add	r0, r3
   3fab2:	f7da fa67 	bl	19f84 <strlen>
   3fab6:	68a3      	ldr	r3, [r4, #8]
   3fab8:	4418      	add	r0, r3
   3faba:	60a0      	str	r0, [r4, #8]
}
   3fabc:	bd10      	pop	{r4, pc}

0003fabe <add_item_to_array>:
    if ((item == NULL) || (array == NULL))
   3fabe:	b161      	cbz	r1, 3fada <add_item_to_array+0x1c>
   3fac0:	b160      	cbz	r0, 3fadc <add_item_to_array+0x1e>
    child = array->child;
   3fac2:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   3fac4:	b91b      	cbnz	r3, 3face <add_item_to_array+0x10>
        array->child = item;
   3fac6:	6081      	str	r1, [r0, #8]
    item->prev = prev;
   3fac8:	2001      	movs	r0, #1
   3faca:	4770      	bx	lr
        while (child->next)
   3facc:	4613      	mov	r3, r2
   3face:	681a      	ldr	r2, [r3, #0]
   3fad0:	2a00      	cmp	r2, #0
   3fad2:	d1fb      	bne.n	3facc <add_item_to_array+0xe>
    prev->next = item;
   3fad4:	6019      	str	r1, [r3, #0]
    item->prev = prev;
   3fad6:	604b      	str	r3, [r1, #4]
   3fad8:	e7f6      	b.n	3fac8 <add_item_to_array+0xa>
        return false;
   3fada:	4608      	mov	r0, r1
}
   3fadc:	4770      	bx	lr

0003fade <cJSON_New_Item.isra.1>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   3fade:	b510      	push	{r4, lr}
   3fae0:	4603      	mov	r3, r0
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   3fae2:	2028      	movs	r0, #40	; 0x28
   3fae4:	4798      	blx	r3
    if (node)
   3fae6:	4604      	mov	r4, r0
   3fae8:	b118      	cbz	r0, 3faf2 <cJSON_New_Item.isra.1+0x14>
__ssp_bos_icheck3(memset, void *, int)
   3faea:	2228      	movs	r2, #40	; 0x28
   3faec:	2100      	movs	r1, #0
   3faee:	f001 f957 	bl	40da0 <memset>
}
   3faf2:	4620      	mov	r0, r4
   3faf4:	bd10      	pop	{r4, pc}

0003faf6 <ensure>:
{
   3faf6:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   3faf8:	4604      	mov	r4, r0
   3fafa:	b1b8      	cbz	r0, 3fb2c <ensure+0x36>
   3fafc:	6805      	ldr	r5, [r0, #0]
   3fafe:	b165      	cbz	r5, 3fb1a <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   3fb00:	6843      	ldr	r3, [r0, #4]
   3fb02:	b113      	cbz	r3, 3fb0a <ensure+0x14>
   3fb04:	6882      	ldr	r2, [r0, #8]
   3fb06:	4293      	cmp	r3, r2
   3fb08:	d910      	bls.n	3fb2c <ensure+0x36>
    if (needed > INT_MAX)
   3fb0a:	2900      	cmp	r1, #0
   3fb0c:	db0e      	blt.n	3fb2c <ensure+0x36>
    needed += p->offset + 1;
   3fb0e:	68a2      	ldr	r2, [r4, #8]
   3fb10:	1c4e      	adds	r6, r1, #1
   3fb12:	4416      	add	r6, r2
    if (needed <= p->length)
   3fb14:	42b3      	cmp	r3, r6
   3fb16:	d302      	bcc.n	3fb1e <ensure+0x28>
        return p->buffer + p->offset;
   3fb18:	4415      	add	r5, r2
}
   3fb1a:	4628      	mov	r0, r5
   3fb1c:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   3fb1e:	6923      	ldr	r3, [r4, #16]
   3fb20:	b923      	cbnz	r3, 3fb2c <ensure+0x36>
    if (needed > (INT_MAX / 2))
   3fb22:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
   3fb26:	d303      	bcc.n	3fb30 <ensure+0x3a>
        if (needed <= INT_MAX)
   3fb28:	2e00      	cmp	r6, #0
   3fb2a:	da0f      	bge.n	3fb4c <ensure+0x56>
        return NULL;
   3fb2c:	2500      	movs	r5, #0
   3fb2e:	e7f4      	b.n	3fb1a <ensure+0x24>
        newsize = needed * 2;
   3fb30:	0076      	lsls	r6, r6, #1
    if (p->hooks.reallocate != NULL)
   3fb32:	6a23      	ldr	r3, [r4, #32]
   3fb34:	b16b      	cbz	r3, 3fb52 <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   3fb36:	4628      	mov	r0, r5
   3fb38:	4631      	mov	r1, r6
   3fb3a:	4798      	blx	r3
        if (newbuffer == NULL)
   3fb3c:	4605      	mov	r5, r0
   3fb3e:	b9b0      	cbnz	r0, 3fb6e <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   3fb40:	69e3      	ldr	r3, [r4, #28]
   3fb42:	6820      	ldr	r0, [r4, #0]
   3fb44:	4798      	blx	r3
            p->buffer = NULL;
   3fb46:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   3fb4a:	e7e6      	b.n	3fb1a <ensure+0x24>
            newsize = INT_MAX;
   3fb4c:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   3fb50:	e7ef      	b.n	3fb32 <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   3fb52:	69a3      	ldr	r3, [r4, #24]
   3fb54:	4630      	mov	r0, r6
   3fb56:	4798      	blx	r3
        if (!newbuffer)
   3fb58:	4605      	mov	r5, r0
   3fb5a:	2800      	cmp	r0, #0
   3fb5c:	d0f0      	beq.n	3fb40 <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   3fb5e:	68a2      	ldr	r2, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3fb60:	6821      	ldr	r1, [r4, #0]
   3fb62:	3201      	adds	r2, #1
   3fb64:	f001 f8fc 	bl	40d60 <memcpy>
        p->hooks.deallocate(p->buffer);
   3fb68:	69e3      	ldr	r3, [r4, #28]
   3fb6a:	6820      	ldr	r0, [r4, #0]
   3fb6c:	4798      	blx	r3
    return newbuffer + p->offset;
   3fb6e:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   3fb70:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   3fb74:	441d      	add	r5, r3
   3fb76:	e7d0      	b.n	3fb1a <ensure+0x24>

0003fb78 <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
   3fb78:	2200      	movs	r2, #0
   3fb7a:	4611      	mov	r1, r2
   3fb7c:	f7e2 bd1e 	b.w	225bc <cJSON_ParseWithOpts>

0003fb80 <cJSON_PrintUnformatted>:
    return (char*)print(item, false, &global_hooks);
   3fb80:	2100      	movs	r1, #0
   3fb82:	f7e2 bc49 	b.w	22418 <print.constprop.14>

0003fb86 <cJSON_GetArraySize>:
    if (array == NULL)
   3fb86:	b110      	cbz	r0, 3fb8e <cJSON_GetArraySize+0x8>
    child = array->child;
   3fb88:	6883      	ldr	r3, [r0, #8]
    size_t size = 0;
   3fb8a:	2000      	movs	r0, #0
    while(child != NULL)
   3fb8c:	b903      	cbnz	r3, 3fb90 <cJSON_GetArraySize+0xa>
}
   3fb8e:	4770      	bx	lr
        size++;
   3fb90:	3001      	adds	r0, #1
        child = child->next;
   3fb92:	681b      	ldr	r3, [r3, #0]
   3fb94:	e7fa      	b.n	3fb8c <cJSON_GetArraySize+0x6>

0003fb96 <cJSON_GetObjectItem>:
    return get_object_item(object, string, false);
   3fb96:	2200      	movs	r2, #0
   3fb98:	f7e2 b9ce 	b.w	21f38 <get_object_item>

0003fb9c <cJSON_AddItemToArray>:
    add_item_to_array(array, item);
   3fb9c:	f7ff bf8f 	b.w	3fabe <add_item_to_array>

0003fba0 <cJSON_AddItemToObject>:
    add_item_to_object(object, string, item, &global_hooks, false);
   3fba0:	2300      	movs	r3, #0
   3fba2:	f7e2 bc9b 	b.w	224dc <add_item_to_object.constprop.12>

0003fba6 <free_fn_hook>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }
   3fba6:	f000 bf44 	b.w	40a32 <k_free>

0003fbaa <malloc_fn_hook>:
static void *malloc_fn_hook(size_t sz) { return k_malloc(sz); }
   3fbaa:	f7f8 bf13 	b.w	389d4 <k_malloc>

0003fbae <bsdlib_shutdown>:

int bsdlib_shutdown(void)
{
   3fbae:	b508      	push	{r3, lr}
	bsd_shutdown();
   3fbb0:	f7ea fef4 	bl	2a99c <bsd_shutdown>

	return 0;
}
   3fbb4:	2000      	movs	r0, #0
   3fbb6:	bd08      	pop	{r3, pc}

0003fbb8 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   3fbb8:	4668      	mov	r0, sp
   3fbba:	f020 0107 	bic.w	r1, r0, #7
   3fbbe:	468d      	mov	sp, r1
   3fbc0:	b501      	push	{r0, lr}
   3fbc2:	f7ff f856 	bl	3ec72 <z_arch_isr_direct_header>
	bsd_os_trace_irq_handler();
   3fbc6:	f7ec fd57 	bl	2c678 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   3fbca:	f7e0 f89b 	bl	1fd04 <_arch_isr_direct_pm>
   3fbce:	f7df ffbd 	bl	1fb4c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   3fbd2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3fbd6:	4685      	mov	sp, r0
   3fbd8:	4770      	bx	lr

0003fbda <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   3fbda:	4668      	mov	r0, sp
   3fbdc:	f020 0107 	bic.w	r1, r0, #7
   3fbe0:	468d      	mov	sp, r1
   3fbe2:	b501      	push	{r0, lr}
   3fbe4:	f7ff f845 	bl	3ec72 <z_arch_isr_direct_header>
	IPC_IRQHandler();
   3fbe8:	f7eb f838 	bl	2ac5c <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   3fbec:	f7e0 f88a 	bl	1fd04 <_arch_isr_direct_pm>
   3fbf0:	f7df ffac 	bl	1fb4c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   3fbf4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3fbf8:	4685      	mov	sp, r0
   3fbfa:	4770      	bx	lr

0003fbfc <trace_task_create>:
{
   3fbfc:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   3fbfe:	201d      	movs	r0, #29
   3fc00:	2200      	movs	r2, #0
   3fc02:	2106      	movs	r1, #6
   3fc04:	f7e0 f84c 	bl	1fca0 <z_arm_irq_priority_set>
}
   3fc08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   3fc0c:	201d      	movs	r0, #29
   3fc0e:	f7e0 b837 	b.w	1fc80 <z_arch_irq_enable>

0003fc12 <read_task_create>:
{
   3fc12:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   3fc14:	201c      	movs	r0, #28
   3fc16:	2200      	movs	r2, #0
   3fc18:	2106      	movs	r1, #6
   3fc1a:	f7e0 f841 	bl	1fca0 <z_arm_irq_priority_set>
}
   3fc1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   3fc22:	201c      	movs	r0, #28
   3fc24:	f7e0 b82c 	b.w	1fc80 <z_arch_irq_enable>

0003fc28 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   3fc28:	2000      	movs	r0, #0
   3fc2a:	4770      	bx	lr

0003fc2c <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   3fc2c:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   3fc30:	bf18      	it	ne
   3fc32:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   3fc34:	0782      	lsls	r2, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   3fc36:	bf48      	it	mi
   3fc38:	f043 0308 	orrmi.w	r3, r3, #8
}
   3fc3c:	4618      	mov	r0, r3
   3fc3e:	4770      	bx	lr

0003fc40 <z_to_nrf_family>:
	switch (z_family) {
   3fc40:	2803      	cmp	r0, #3
   3fc42:	d00f      	beq.n	3fc64 <z_to_nrf_family+0x24>
   3fc44:	d808      	bhi.n	3fc58 <z_to_nrf_family+0x18>
   3fc46:	2801      	cmp	r0, #1
   3fc48:	d00e      	beq.n	3fc68 <z_to_nrf_family+0x28>
   3fc4a:	2802      	cmp	r0, #2
		return -EAFNOSUPPORT;
   3fc4c:	bf08      	it	eq
   3fc4e:	200a      	moveq	r0, #10
   3fc50:	bf18      	it	ne
   3fc52:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   3fc56:	4770      	bx	lr
	switch (z_family) {
   3fc58:	2866      	cmp	r0, #102	; 0x66
   3fc5a:	d006      	beq.n	3fc6a <z_to_nrf_family+0x2a>
   3fc5c:	2867      	cmp	r0, #103	; 0x67
		return -EAFNOSUPPORT;
   3fc5e:	bf08      	it	eq
   3fc60:	2001      	moveq	r0, #1
   3fc62:	e7f5      	b.n	3fc50 <z_to_nrf_family+0x10>
		return NRF_AF_PACKET;
   3fc64:	2005      	movs	r0, #5
   3fc66:	4770      	bx	lr
		return NRF_AF_INET;
   3fc68:	2002      	movs	r0, #2
}
   3fc6a:	4770      	bx	lr

0003fc6c <z_to_nrf_protocol>:
	switch (proto) {
   3fc6c:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   3fc70:	d01d      	beq.n	3fcae <z_to_nrf_protocol+0x42>
   3fc72:	dc08      	bgt.n	3fc86 <z_to_nrf_protocol+0x1a>
   3fc74:	2806      	cmp	r0, #6
   3fc76:	d01d      	beq.n	3fcb4 <z_to_nrf_protocol+0x48>
   3fc78:	2811      	cmp	r0, #17
   3fc7a:	d01d      	beq.n	3fcb8 <z_to_nrf_protocol+0x4c>
   3fc7c:	2800      	cmp	r0, #0
		return -EPROTONOSUPPORT;
   3fc7e:	bf18      	it	ne
   3fc80:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   3fc84:	4770      	bx	lr
	switch (proto) {
   3fc86:	f240 2301 	movw	r3, #513	; 0x201
   3fc8a:	4298      	cmp	r0, r3
   3fc8c:	d015      	beq.n	3fcba <z_to_nrf_protocol+0x4e>
   3fc8e:	dc06      	bgt.n	3fc9e <z_to_nrf_protocol+0x32>
   3fc90:	f240 1311 	movw	r3, #273	; 0x111
   3fc94:	4298      	cmp	r0, r3
		return -EPROTONOSUPPORT;
   3fc96:	bf08      	it	eq
   3fc98:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   3fc9c:	e7ef      	b.n	3fc7e <z_to_nrf_protocol+0x12>
	switch (proto) {
   3fc9e:	f240 2302 	movw	r3, #514	; 0x202
   3fca2:	4298      	cmp	r0, r3
   3fca4:	d009      	beq.n	3fcba <z_to_nrf_protocol+0x4e>
   3fca6:	f240 2303 	movw	r3, #515	; 0x203
   3fcaa:	4298      	cmp	r0, r3
   3fcac:	e7e7      	b.n	3fc7e <z_to_nrf_protocol+0x12>
		return NRF_SPROTO_TLS1v2;
   3fcae:	f44f 7082 	mov.w	r0, #260	; 0x104
   3fcb2:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   3fcb4:	2001      	movs	r0, #1
   3fcb6:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   3fcb8:	2002      	movs	r0, #2
}
   3fcba:	4770      	bx	lr

0003fcbc <nrf91_bsdlib_socket_offload_init>:
}
   3fcbc:	2000      	movs	r0, #0
   3fcbe:	4770      	bx	lr

0003fcc0 <nrf91_socket_offload_freeaddrinfo>:
{
   3fcc0:	b538      	push	{r3, r4, r5, lr}
   3fcc2:	4604      	mov	r4, r0
	while (next != NULL) {
   3fcc4:	b904      	cbnz	r4, 3fcc8 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   3fcc6:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   3fcc8:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   3fcca:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   3fccc:	f000 feb1 	bl	40a32 <k_free>
		k_free(this);
   3fcd0:	4620      	mov	r0, r4
   3fcd2:	f000 feae 	bl	40a32 <k_free>
		next = next->ai_next;
   3fcd6:	462c      	mov	r4, r5
   3fcd8:	e7f4      	b.n	3fcc4 <nrf91_socket_offload_freeaddrinfo+0x4>

0003fcda <z_to_nrf_addrinfo_hints>:
{
   3fcda:	b538      	push	{r3, r4, r5, lr}
   3fcdc:	460c      	mov	r4, r1
   3fcde:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   3fce0:	221c      	movs	r2, #28
   3fce2:	2100      	movs	r1, #0
   3fce4:	1d20      	adds	r0, r4, #4
   3fce6:	f001 f85b 	bl	40da0 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   3fcea:	2300      	movs	r3, #0
   3fcec:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   3fcee:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   3fcf0:	2b03      	cmp	r3, #3
   3fcf2:	d003      	beq.n	3fcfc <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   3fcf4:	2b04      	cmp	r3, #4
   3fcf6:	bf08      	it	eq
   3fcf8:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   3fcfc:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   3fcfe:	88a8      	ldrh	r0, [r5, #4]
   3fd00:	f7ff ff9e 	bl	3fc40 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   3fd04:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   3fd08:	d00b      	beq.n	3fd22 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   3fd0a:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   3fd0c:	68e8      	ldr	r0, [r5, #12]
   3fd0e:	f7ff ffad 	bl	3fc6c <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   3fd12:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   3fd16:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   3fd18:	d003      	beq.n	3fd22 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   3fd1a:	69a8      	ldr	r0, [r5, #24]
   3fd1c:	b108      	cbz	r0, 3fd22 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   3fd1e:	61a0      	str	r0, [r4, #24]
	return 0;
   3fd20:	2000      	movs	r0, #0
}
   3fd22:	bd38      	pop	{r3, r4, r5, pc}

0003fd24 <nrf91_socket_offload_send>:
{
   3fd24:	b570      	push	{r4, r5, r6, lr}
   3fd26:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   3fd28:	4618      	mov	r0, r3
{
   3fd2a:	4615      	mov	r5, r2
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   3fd2c:	f7ff ff7e 	bl	3fc2c <z_to_nrf_flags>
   3fd30:	462a      	mov	r2, r5
   3fd32:	4603      	mov	r3, r0
   3fd34:	4620      	mov	r0, r4
}
   3fd36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   3fd3a:	f7ea bd15 	b.w	2a768 <nrf_send>

0003fd3e <nrf91_socket_offload_recv>:
{
   3fd3e:	b570      	push	{r4, r5, r6, lr}
   3fd40:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   3fd42:	4618      	mov	r0, r3
{
   3fd44:	4615      	mov	r5, r2
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   3fd46:	f7ff ff71 	bl	3fc2c <z_to_nrf_flags>
   3fd4a:	462a      	mov	r2, r5
   3fd4c:	4603      	mov	r3, r0
   3fd4e:	4620      	mov	r0, r4
}
   3fd50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   3fd54:	f7ea bd54 	b.w	2a800 <nrf_recv>

0003fd58 <nrf91_socket_offload_getsockopt>:
{
   3fd58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3fd5c:	461d      	mov	r5, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   3fd5e:	2300      	movs	r3, #0
{
   3fd60:	b086      	sub	sp, #24
   3fd62:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   3fd66:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   3fd6a:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   3fd6e:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   3fd72:	4607      	mov	r7, r0
   3fd74:	460c      	mov	r4, r1
   3fd76:	4616      	mov	r6, r2
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   3fd78:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   3fd7a:	d002      	beq.n	3fd82 <nrf91_socket_offload_getsockopt+0x2a>
   3fd7c:	dc2b      	bgt.n	3fdd6 <nrf91_socket_offload_getsockopt+0x7e>
   3fd7e:	2901      	cmp	r1, #1
   3fd80:	d13d      	bne.n	3fdfe <nrf91_socket_offload_getsockopt+0xa6>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   3fd82:	aa02      	add	r2, sp, #8
   3fd84:	4631      	mov	r1, r6
   3fd86:	4620      	mov	r0, r4
   3fd88:	f7e2 fee0 	bl	22b4c <z_to_nrf_optname>
   3fd8c:	2800      	cmp	r0, #0
   3fd8e:	db36      	blt.n	3fdfe <nrf91_socket_offload_getsockopt+0xa6>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   3fd90:	2c01      	cmp	r4, #1
   3fd92:	d128      	bne.n	3fde6 <nrf91_socket_offload_getsockopt+0x8e>
   3fd94:	2e14      	cmp	r6, #20
   3fd96:	d126      	bne.n	3fde6 <nrf91_socket_offload_getsockopt+0x8e>
		nrf_optlen = sizeof(struct nrf_timeval);
   3fd98:	2308      	movs	r3, #8
   3fd9a:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   3fd9c:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   3fd9e:	aa03      	add	r2, sp, #12
   3fda0:	9200      	str	r2, [sp, #0]
   3fda2:	4638      	mov	r0, r7
   3fda4:	9a02      	ldr	r2, [sp, #8]
   3fda6:	4621      	mov	r1, r4
   3fda8:	f7ea fdc0 	bl	2a92c <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   3fdac:	4607      	mov	r7, r0
   3fdae:	b970      	cbnz	r0, 3fdce <nrf91_socket_offload_getsockopt+0x76>
   3fdb0:	b16d      	cbz	r5, 3fdce <nrf91_socket_offload_getsockopt+0x76>
		*optlen = nrf_optlen;
   3fdb2:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   3fdb4:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   3fdb6:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   3fdba:	d108      	bne.n	3fdce <nrf91_socket_offload_getsockopt+0x76>
			if (optname == SO_ERROR) {
   3fdbc:	2e04      	cmp	r6, #4
   3fdbe:	d114      	bne.n	3fdea <nrf91_socket_offload_getsockopt+0x92>
				bsd_os_errno_set(*(int *)optval);
   3fdc0:	6828      	ldr	r0, [r5, #0]
   3fdc2:	f7e2 fda3 	bl	2290c <bsd_os_errno_set>
				*(int *)optval = errno;
   3fdc6:	f7fe ffa4 	bl	3ed12 <__errno>
   3fdca:	6803      	ldr	r3, [r0, #0]
   3fdcc:	602b      	str	r3, [r5, #0]
}
   3fdce:	4638      	mov	r0, r7
   3fdd0:	b006      	add	sp, #24
   3fdd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   3fdd6:	f240 2302 	movw	r3, #514	; 0x202
   3fdda:	4299      	cmp	r1, r3
   3fddc:	d0d1      	beq.n	3fd82 <nrf91_socket_offload_getsockopt+0x2a>
   3fdde:	f240 2303 	movw	r3, #515	; 0x203
   3fde2:	4299      	cmp	r1, r3
   3fde4:	e7cc      	b.n	3fd80 <nrf91_socket_offload_getsockopt+0x28>
   3fde6:	462b      	mov	r3, r5
   3fde8:	e7d9      	b.n	3fd9e <nrf91_socket_offload_getsockopt+0x46>
			} else if (optname == SO_RCVTIMEO) {
   3fdea:	2e14      	cmp	r6, #20
   3fdec:	d1ef      	bne.n	3fdce <nrf91_socket_offload_getsockopt+0x76>
				((struct timeval *)optval)->tv_sec =
   3fdee:	9b04      	ldr	r3, [sp, #16]
   3fdf0:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   3fdf2:	9b05      	ldr	r3, [sp, #20]
   3fdf4:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   3fdf6:	2308      	movs	r3, #8
   3fdf8:	f8c8 3000 	str.w	r3, [r8]
   3fdfc:	e7e7      	b.n	3fdce <nrf91_socket_offload_getsockopt+0x76>
	errno = ENOPROTOOPT;
   3fdfe:	f7fe ff88 	bl	3ed12 <__errno>
   3fe02:	236d      	movs	r3, #109	; 0x6d
	return retval;
   3fe04:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	errno = ENOPROTOOPT;
   3fe08:	6003      	str	r3, [r0, #0]
	return retval;
   3fe0a:	e7e0      	b.n	3fdce <nrf91_socket_offload_getsockopt+0x76>

0003fe0c <nrf91_socket_offload_poll>:
{
   3fe0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3fe0e:	b091      	sub	sp, #68	; 0x44
   3fe10:	4605      	mov	r5, r0
   3fe12:	460c      	mov	r4, r1
   3fe14:	4616      	mov	r6, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   3fe16:	2100      	movs	r1, #0
   3fe18:	2240      	movs	r2, #64	; 0x40
   3fe1a:	4668      	mov	r0, sp
   3fe1c:	f000 ffc0 	bl	40da0 <memset>
	for (int i = 0; i < nfds; i++) {
   3fe20:	466a      	mov	r2, sp
   3fe22:	2100      	movs	r1, #0
		if (fds[i].events & POLLIN) {
   3fe24:	1d2f      	adds	r7, r5, #4
	for (int i = 0; i < nfds; i++) {
   3fe26:	42a1      	cmp	r1, r4
   3fe28:	db0c      	blt.n	3fe44 <nrf91_socket_offload_poll+0x38>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   3fe2a:	4632      	mov	r2, r6
   3fe2c:	4621      	mov	r1, r4
   3fe2e:	4668      	mov	r0, sp
   3fe30:	f7ea fd9c 	bl	2a96c <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   3fe34:	2200      	movs	r2, #0
   3fe36:	462b      	mov	r3, r5
		fds[i].revents = 0;
   3fe38:	4616      	mov	r6, r2
			fds[i].revents |= POLLIN;
   3fe3a:	2701      	movs	r7, #1
	for (int i = 0; i < nfds; i++) {
   3fe3c:	42a2      	cmp	r2, r4
   3fe3e:	db1a      	blt.n	3fe76 <nrf91_socket_offload_poll+0x6a>
}
   3fe40:	b011      	add	sp, #68	; 0x44
   3fe42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   3fe44:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
		if (fds[i].events & POLLIN) {
   3fe48:	f837 0031 	ldrh.w	r0, [r7, r1, lsl #3]
		tmp[i].handle = fds[i].fd;
   3fe4c:	6013      	str	r3, [r2, #0]
		if (fds[i].events & POLLIN) {
   3fe4e:	07c3      	lsls	r3, r0, #31
			tmp[i].requested |= NRF_POLLIN;
   3fe50:	bf48      	it	mi
   3fe52:	8893      	ldrhmi	r3, [r2, #4]
	for (int i = 0; i < nfds; i++) {
   3fe54:	f101 0101 	add.w	r1, r1, #1
			tmp[i].requested |= NRF_POLLIN;
   3fe58:	bf44      	itt	mi
   3fe5a:	f043 0301 	orrmi.w	r3, r3, #1
   3fe5e:	8093      	strhmi	r3, [r2, #4]
		if (fds[i].events & POLLOUT) {
   3fe60:	0743      	lsls	r3, r0, #29
			tmp[i].requested |= NRF_POLLOUT;
   3fe62:	bf48      	it	mi
   3fe64:	8893      	ldrhmi	r3, [r2, #4]
   3fe66:	f102 0208 	add.w	r2, r2, #8
   3fe6a:	bf44      	itt	mi
   3fe6c:	f043 0302 	orrmi.w	r3, r3, #2
   3fe70:	f822 3c04 	strhmi.w	r3, [r2, #-4]
   3fe74:	e7d7      	b.n	3fe26 <nrf91_socket_offload_poll+0x1a>
		if (tmp[i].returned & NRF_POLLIN) {
   3fe76:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   3fe7a:	88c9      	ldrh	r1, [r1, #6]
		fds[i].revents = 0;
   3fe7c:	80de      	strh	r6, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   3fe7e:	07cd      	lsls	r5, r1, #31
			fds[i].revents |= POLLIN;
   3fe80:	bf48      	it	mi
   3fe82:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   3fe84:	078d      	lsls	r5, r1, #30
			fds[i].revents |= POLLOUT;
   3fe86:	bf48      	it	mi
   3fe88:	88dd      	ldrhmi	r5, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   3fe8a:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   3fe8e:	bf44      	itt	mi
   3fe90:	f045 0504 	orrmi.w	r5, r5, #4
   3fe94:	80dd      	strhmi	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   3fe96:	074d      	lsls	r5, r1, #29
			fds[i].revents |= POLLERR;
   3fe98:	bf48      	it	mi
   3fe9a:	88dd      	ldrhmi	r5, [r3, #6]
   3fe9c:	f103 0308 	add.w	r3, r3, #8
   3fea0:	bf44      	itt	mi
   3fea2:	f045 0508 	orrmi.w	r5, r5, #8
   3fea6:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   3feaa:	06cd      	lsls	r5, r1, #27
			fds[i].revents |= POLLNVAL;
   3feac:	bf42      	ittt	mi
   3feae:	f833 5c02 	ldrhmi.w	r5, [r3, #-2]
   3feb2:	f045 0520 	orrmi.w	r5, r5, #32
   3feb6:	f823 5c02 	strhmi.w	r5, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   3feba:	0709      	lsls	r1, r1, #28
			fds[i].revents |= POLLHUP;
   3febc:	bf42      	ittt	mi
   3febe:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   3fec2:	f041 0110 	orrmi.w	r1, r1, #16
   3fec6:	f823 1c02 	strhmi.w	r1, [r3, #-2]
   3feca:	e7b7      	b.n	3fe3c <nrf91_socket_offload_poll+0x30>

0003fecc <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   3fecc:	f7ea bcda 	b.w	2a884 <nrf_listen>

0003fed0 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   3fed0:	f7ea bc20 	b.w	2a714 <nrf_close>

0003fed4 <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   3fed4:	2903      	cmp	r1, #3
{
   3fed6:	b508      	push	{r3, lr}
	switch (cmd) {
   3fed8:	d00b      	beq.n	3fef2 <nrf91_socket_offload_fcntl+0x1e>
   3feda:	2904      	cmp	r1, #4
   3fedc:	d111      	bne.n	3ff02 <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   3fede:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   3fee0:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   3fee4:	d10d      	bne.n	3ff02 <nrf91_socket_offload_fcntl+0x2e>
}
   3fee6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   3feea:	1392      	asrs	r2, r2, #14
   3feec:	2101      	movs	r1, #1
   3feee:	f7ea bd3f 	b.w	2a970 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   3fef2:	2200      	movs	r2, #0
   3fef4:	2102      	movs	r1, #2
   3fef6:	f7ea fd3b 	bl	2a970 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   3fefa:	0380      	lsls	r0, r0, #14
   3fefc:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   3ff00:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   3ff02:	f7fe ff06 	bl	3ed12 <__errno>
   3ff06:	2316      	movs	r3, #22
   3ff08:	6003      	str	r3, [r0, #0]
	return retval;
   3ff0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3ff0e:	e7f7      	b.n	3ff00 <nrf91_socket_offload_fcntl+0x2c>

0003ff10 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   3ff10:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   3ff12:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   3ff14:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   3ff16:	4603      	mov	r3, r0
{
   3ff18:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   3ff1a:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3ff1e:	f101 0210 	add.w	r2, r1, #16
   3ff22:	f102 0410 	add.w	r4, r2, #16
   3ff26:	f852 5b04 	ldr.w	r5, [r2], #4
   3ff2a:	42a2      	cmp	r2, r4
   3ff2c:	f843 5b04 	str.w	r5, [r3], #4
   3ff30:	d1f9      	bne.n	3ff26 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   3ff32:	6a0b      	ldr	r3, [r1, #32]
   3ff34:	7503      	strb	r3, [r0, #20]
}
   3ff36:	bd30      	pop	{r4, r5, pc}

0003ff38 <nrf91_socket_offload_getaddrinfo>:
{
   3ff38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3ff3c:	4614      	mov	r4, r2
   3ff3e:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   3ff40:	2100      	movs	r1, #0
{
   3ff42:	b092      	sub	sp, #72	; 0x48
   3ff44:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   3ff46:	2220      	movs	r2, #32
   3ff48:	a802      	add	r0, sp, #8
{
   3ff4a:	4698      	mov	r8, r3
	struct nrf_addrinfo *nrf_res = NULL;
   3ff4c:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   3ff4e:	f000 ff27 	bl	40da0 <memset>
	if (hints != NULL) {
   3ff52:	b194      	cbz	r4, 3ff7a <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   3ff54:	a902      	add	r1, sp, #8
   3ff56:	4620      	mov	r0, r4
   3ff58:	f7ff febf 	bl	3fcda <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   3ff5c:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   3ff60:	f000 80af 	beq.w	400c2 <CONFIG_FLASH_LOAD_OFFSET+0xc2>
		} else if (error == -EAFNOSUPPORT) {
   3ff64:	306a      	adds	r0, #106	; 0x6a
   3ff66:	f000 80af 	beq.w	400c8 <CONFIG_FLASH_LOAD_OFFSET+0xc8>
		if (hints->ai_next != NULL) {
   3ff6a:	69e0      	ldr	r0, [r4, #28]
   3ff6c:	b120      	cbz	r0, 3ff78 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   3ff6e:	ac0a      	add	r4, sp, #40	; 0x28
   3ff70:	4621      	mov	r1, r4
   3ff72:	f7ff feb2 	bl	3fcda <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   3ff76:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   3ff78:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   3ff7a:	4631      	mov	r1, r6
   3ff7c:	4628      	mov	r0, r5
   3ff7e:	ab01      	add	r3, sp, #4
   3ff80:	4622      	mov	r2, r4
   3ff82:	f7ea fcef 	bl	2a964 <nrf_getaddrinfo>
	*res = NULL;
   3ff86:	2700      	movs	r7, #0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   3ff88:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   3ff8a:	f8c8 7000 	str.w	r7, [r8]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   3ff8e:	4605      	mov	r5, r0
   3ff90:	2800      	cmp	r0, #0
   3ff92:	d04a      	beq.n	4002a <CONFIG_FLASH_LOAD_OFFSET+0x2a>
		nrf91_socket_offload_freeaddrinfo(*res);
   3ff94:	f8d8 0000 	ldr.w	r0, [r8]
   3ff98:	f7ff fe92 	bl	3fcc0 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   3ff9c:	2300      	movs	r3, #0
   3ff9e:	f8c8 3000 	str.w	r3, [r8]
   3ffa2:	e044      	b.n	4002e <CONFIG_FLASH_LOAD_OFFSET+0x2e>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   3ffa4:	2020      	movs	r0, #32
   3ffa6:	f7f8 fd15 	bl	389d4 <k_malloc>
		if (next_z_res == NULL) {
   3ffaa:	4604      	mov	r4, r0
   3ffac:	2800      	cmp	r0, #0
   3ffae:	f000 8083 	beq.w	400b8 <CONFIG_FLASH_LOAD_OFFSET+0xb8>
	family = nrf_to_z_family(nrf_in->ai_family);
   3ffb2:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   3ffb4:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   3ffb6:	2a05      	cmp	r2, #5
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   3ffb8:	e9c0 5506 	strd	r5, r5, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   3ffbc:	6005      	str	r5, [r0, #0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   3ffbe:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   3ffc0:	d03c      	beq.n	4003c <CONFIG_FLASH_LOAD_OFFSET+0x3c>
   3ffc2:	dc09      	bgt.n	3ffd8 <nrf91_socket_offload_getaddrinfo+0xa0>
   3ffc4:	2a01      	cmp	r2, #1
   3ffc6:	d03b      	beq.n	40040 <CONFIG_FLASH_LOAD_OFFSET+0x40>
   3ffc8:	2a02      	cmp	r2, #2
   3ffca:	d03b      	beq.n	40044 <CONFIG_FLASH_LOAD_OFFSET+0x44>
			k_free(next_z_res);
   3ffcc:	4620      	mov	r0, r4
   3ffce:	f000 fd30 	bl	40a32 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   3ffd2:	f06f 0508 	mvn.w	r5, #8
   3ffd6:	e7dd      	b.n	3ff94 <nrf91_socket_offload_getaddrinfo+0x5c>
	switch (nrf_family) {
   3ffd8:	2a0a      	cmp	r2, #10
   3ffda:	d035      	beq.n	40048 <CONFIG_FLASH_LOAD_OFFSET+0x48>
   3ffdc:	2a66      	cmp	r2, #102	; 0x66
   3ffde:	d1f5      	bne.n	3ffcc <nrf91_socket_offload_getaddrinfo+0x94>
		return AF_LTE;
   3ffe0:	4613      	mov	r3, r2
	z_out->ai_family = family;
   3ffe2:	6063      	str	r3, [r4, #4]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   3ffe4:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   3ffe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   3ffea:	d04e      	beq.n	4008a <CONFIG_FLASH_LOAD_OFFSET+0x8a>
   3ffec:	dc2e      	bgt.n	4004c <CONFIG_FLASH_LOAD_OFFSET+0x4c>
   3ffee:	2b01      	cmp	r3, #1
   3fff0:	d050      	beq.n	40094 <CONFIG_FLASH_LOAD_OFFSET+0x94>
   3fff2:	2b02      	cmp	r3, #2
   3fff4:	d04c      	beq.n	40090 <CONFIG_FLASH_LOAD_OFFSET+0x90>
   3fff6:	2b00      	cmp	r3, #0
   3fff8:	d130      	bne.n	4005c <CONFIG_FLASH_LOAD_OFFSET+0x5c>
	if (nrf_in->ai_family == NRF_AF_INET) {
   3fffa:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   3fffc:	60e3      	str	r3, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   3fffe:	d14b      	bne.n	40098 <CONFIG_FLASH_LOAD_OFFSET+0x98>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   40000:	2008      	movs	r0, #8
   40002:	f7f8 fce7 	bl	389d4 <k_malloc>
   40006:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   40008:	2800      	cmp	r0, #0
   4000a:	d052      	beq.n	400b2 <CONFIG_FLASH_LOAD_OFFSET+0xb2>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   4000c:	2308      	movs	r3, #8
   4000e:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   40010:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   40012:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   40014:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   40016:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   40018:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   4001a:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   4001c:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   4001e:	2f00      	cmp	r7, #0
   40020:	d14d      	bne.n	400be <CONFIG_FLASH_LOAD_OFFSET+0xbe>
			*res = next_z_res;
   40022:	f8c8 4000 	str.w	r4, [r8]
		next_nrf_res = next_nrf_res->ai_next;
   40026:	4627      	mov	r7, r4
   40028:	69f6      	ldr	r6, [r6, #28]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   4002a:	2e00      	cmp	r6, #0
   4002c:	d1ba      	bne.n	3ffa4 <nrf91_socket_offload_getaddrinfo+0x6c>
	nrf_freeaddrinfo(nrf_res);
   4002e:	9801      	ldr	r0, [sp, #4]
   40030:	f7ea fc9a 	bl	2a968 <nrf_freeaddrinfo>
}
   40034:	4628      	mov	r0, r5
   40036:	b012      	add	sp, #72	; 0x48
   40038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return AF_PACKET;
   4003c:	2303      	movs	r3, #3
   4003e:	e7d0      	b.n	3ffe2 <nrf91_socket_offload_getaddrinfo+0xaa>
		return AF_LOCAL;
   40040:	2367      	movs	r3, #103	; 0x67
   40042:	e7ce      	b.n	3ffe2 <nrf91_socket_offload_getaddrinfo+0xaa>
		return AF_INET;
   40044:	2301      	movs	r3, #1
   40046:	e7cc      	b.n	3ffe2 <nrf91_socket_offload_getaddrinfo+0xaa>
		return AF_INET6;
   40048:	2302      	movs	r3, #2
   4004a:	e7ca      	b.n	3ffe2 <nrf91_socket_offload_getaddrinfo+0xaa>
	switch (proto) {
   4004c:	f240 2101 	movw	r1, #513	; 0x201
   40050:	428b      	cmp	r3, r1
   40052:	d0d2      	beq.n	3fffa <nrf91_socket_offload_getaddrinfo+0xc2>
   40054:	dc0d      	bgt.n	40072 <CONFIG_FLASH_LOAD_OFFSET+0x72>
   40056:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   4005a:	d013      	beq.n	40084 <CONFIG_FLASH_LOAD_OFFSET+0x84>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   4005c:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   40060:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   40062:	2300      	movs	r3, #0
   40064:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   40066:	4620      	mov	r0, r4
   40068:	f000 fce3 	bl	40a32 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   4006c:	f06f 0506 	mvn.w	r5, #6
   40070:	e790      	b.n	3ff94 <nrf91_socket_offload_getaddrinfo+0x5c>
	switch (proto) {
   40072:	f240 2102 	movw	r1, #514	; 0x202
   40076:	428b      	cmp	r3, r1
   40078:	d0bf      	beq.n	3fffa <nrf91_socket_offload_getaddrinfo+0xc2>
   4007a:	f240 2103 	movw	r1, #515	; 0x203
   4007e:	428b      	cmp	r3, r1
   40080:	d0bb      	beq.n	3fffa <nrf91_socket_offload_getaddrinfo+0xc2>
   40082:	e7eb      	b.n	4005c <CONFIG_FLASH_LOAD_OFFSET+0x5c>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   40084:	f240 1311 	movw	r3, #273	; 0x111
   40088:	e7b7      	b.n	3fffa <nrf91_socket_offload_getaddrinfo+0xc2>
   4008a:	f44f 7381 	mov.w	r3, #258	; 0x102
   4008e:	e7b4      	b.n	3fffa <nrf91_socket_offload_getaddrinfo+0xc2>
   40090:	2311      	movs	r3, #17
   40092:	e7b2      	b.n	3fffa <nrf91_socket_offload_getaddrinfo+0xc2>
   40094:	2306      	movs	r3, #6
   40096:	e7b0      	b.n	3fffa <nrf91_socket_offload_getaddrinfo+0xc2>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   40098:	2a0a      	cmp	r2, #10
   4009a:	d1e4      	bne.n	40066 <CONFIG_FLASH_LOAD_OFFSET+0x66>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   4009c:	2018      	movs	r0, #24
   4009e:	f7f8 fc99 	bl	389d4 <k_malloc>
   400a2:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   400a4:	b128      	cbz	r0, 400b2 <CONFIG_FLASH_LOAD_OFFSET+0xb2>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   400a6:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   400a8:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   400aa:	6123      	str	r3, [r4, #16]
		nrf_to_z_ipv6(z_out->ai_addr,
   400ac:	f7ff ff30 	bl	3ff10 <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   400b0:	e7b5      	b.n	4001e <CONFIG_FLASH_LOAD_OFFSET+0x1e>
			k_free(next_z_res);
   400b2:	4620      	mov	r0, r4
   400b4:	f000 fcbd 	bl	40a32 <k_free>
			retval = DNS_EAI_MEMORY;
   400b8:	f06f 0509 	mvn.w	r5, #9
   400bc:	e76a      	b.n	3ff94 <nrf91_socket_offload_getaddrinfo+0x5c>
			latest_z_res->ai_next = next_z_res;
   400be:	61fc      	str	r4, [r7, #28]
   400c0:	e7b1      	b.n	40026 <CONFIG_FLASH_LOAD_OFFSET+0x26>
			return DNS_EAI_SOCKTYPE;
   400c2:	f06f 0506 	mvn.w	r5, #6
   400c6:	e7b5      	b.n	40034 <CONFIG_FLASH_LOAD_OFFSET+0x34>
			return DNS_EAI_ADDRFAMILY;
   400c8:	f06f 0508 	mvn.w	r5, #8
   400cc:	e7b2      	b.n	40034 <CONFIG_FLASH_LOAD_OFFSET+0x34>

000400ce <z_to_nrf_ipv6>:
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   400ce:	2224      	movs	r2, #36	; 0x24
{
   400d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   400d2:	700a      	strb	r2, [r1, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   400d4:	8842      	ldrh	r2, [r0, #2]
{
   400d6:	4604      	mov	r4, r0
	nrf_out->sin6_port = ptr->sin6_port;
   400d8:	810a      	strh	r2, [r1, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   400da:	220a      	movs	r2, #10
{
   400dc:	460b      	mov	r3, r1
	nrf_out->sin6_family = NRF_AF_INET6;
   400de:	604a      	str	r2, [r1, #4]
   400e0:	f101 0610 	add.w	r6, r1, #16
   400e4:	1d02      	adds	r2, r0, #4
   400e6:	f100 0714 	add.w	r7, r0, #20
   400ea:	4635      	mov	r5, r6
   400ec:	6810      	ldr	r0, [r2, #0]
   400ee:	6851      	ldr	r1, [r2, #4]
   400f0:	3208      	adds	r2, #8
   400f2:	c503      	stmia	r5!, {r0, r1}
   400f4:	42ba      	cmp	r2, r7
   400f6:	462e      	mov	r6, r5
   400f8:	d1f7      	bne.n	400ea <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   400fa:	7d22      	ldrb	r2, [r4, #20]
   400fc:	621a      	str	r2, [r3, #32]
}
   400fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00040100 <nrf91_socket_offload_sendto>:
{
   40100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   40104:	b08d      	sub	sp, #52	; 0x34
   40106:	9c14      	ldr	r4, [sp, #80]	; 0x50
   40108:	4605      	mov	r5, r0
   4010a:	460e      	mov	r6, r1
   4010c:	4617      	mov	r7, r2
   4010e:	4698      	mov	r8, r3
	if (to == NULL) {
   40110:	b96c      	cbnz	r4, 4012e <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   40112:	4618      	mov	r0, r3
   40114:	f7ff fd8a 	bl	3fc2c <z_to_nrf_flags>
   40118:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   4011c:	4603      	mov	r3, r0
   4011e:	463a      	mov	r2, r7
   40120:	4631      	mov	r1, r6
   40122:	4628      	mov	r0, r5
   40124:	f7ea fb04 	bl	2a730 <nrf_sendto>
}
   40128:	b00d      	add	sp, #52	; 0x34
   4012a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   4012e:	8823      	ldrh	r3, [r4, #0]
   40130:	2b01      	cmp	r3, #1
   40132:	d110      	bne.n	40156 <nrf91_socket_offload_sendto+0x56>
	nrf_out->sin_port = ptr->sin_port;
   40134:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   40136:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   40138:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   4013c:	2302      	movs	r3, #2
   4013e:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   40140:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   40142:	4640      	mov	r0, r8
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   40144:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   40146:	f88d 100c 	strb.w	r1, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   4014a:	f7ff fd6f 	bl	3fc2c <z_to_nrf_flags>
   4014e:	ab03      	add	r3, sp, #12
   40150:	9101      	str	r1, [sp, #4]
   40152:	9300      	str	r3, [sp, #0]
   40154:	e7e2      	b.n	4011c <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   40156:	2b02      	cmp	r3, #2
   40158:	d10c      	bne.n	40174 <nrf91_socket_offload_sendto+0x74>
		z_to_nrf_ipv6(to, &ipv6);
   4015a:	f10d 090c 	add.w	r9, sp, #12
   4015e:	4649      	mov	r1, r9
   40160:	4620      	mov	r0, r4
   40162:	f7ff ffb4 	bl	400ce <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   40166:	4640      	mov	r0, r8
   40168:	f7ff fd60 	bl	3fc2c <z_to_nrf_flags>
   4016c:	2324      	movs	r3, #36	; 0x24
   4016e:	e9cd 9300 	strd	r9, r3, [sp]
   40172:	e7d3      	b.n	4011c <nrf91_socket_offload_sendto+0x1c>
	errno = ENOTSUP;
   40174:	f7fe fdcd 	bl	3ed12 <__errno>
   40178:	2386      	movs	r3, #134	; 0x86
   4017a:	6003      	str	r3, [r0, #0]
	return retval;
   4017c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   40180:	e7d2      	b.n	40128 <nrf91_socket_offload_sendto+0x28>

00040182 <nrf91_socket_offload_recvfrom>:
{
   40182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   40186:	4605      	mov	r5, r0
   40188:	b08c      	sub	sp, #48	; 0x30
   4018a:	4618      	mov	r0, r3
   4018c:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   40190:	4690      	mov	r8, r2
	if (from == NULL) {
   40192:	f7ff fd4b 	bl	3fc2c <z_to_nrf_flags>
   40196:	4603      	mov	r3, r0
   40198:	b954      	cbnz	r4, 401b0 <nrf91_socket_offload_recvfrom+0x2e>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   4019a:	4628      	mov	r0, r5
   4019c:	e9cd 4400 	strd	r4, r4, [sp]
   401a0:	4642      	mov	r2, r8
   401a2:	f7ea fb11 	bl	2a7c8 <nrf_recvfrom>
   401a6:	4605      	mov	r5, r0
}
   401a8:	4628      	mov	r0, r5
   401aa:	b00c      	add	sp, #48	; 0x30
   401ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   401b0:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   401b2:	af03      	add	r7, sp, #12
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   401b4:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   401b6:	aa02      	add	r2, sp, #8
   401b8:	9201      	str	r2, [sp, #4]
   401ba:	4628      	mov	r0, r5
   401bc:	9700      	str	r7, [sp, #0]
   401be:	4642      	mov	r2, r8
   401c0:	f7ea fb02 	bl	2a7c8 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   401c4:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   401c6:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   401c8:	2b02      	cmp	r3, #2
   401ca:	d109      	bne.n	401e0 <nrf91_socket_offload_recvfrom+0x5e>
	ptr->sin_port = nrf_in->sin_port;
   401cc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   401d0:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   401d2:	2301      	movs	r3, #1
   401d4:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   401d6:	9b06      	ldr	r3, [sp, #24]
   401d8:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   401da:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   401dc:	6033      	str	r3, [r6, #0]
	return retval;
   401de:	e7e3      	b.n	401a8 <nrf91_socket_offload_recvfrom+0x26>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   401e0:	2b0a      	cmp	r3, #10
   401e2:	d1e1      	bne.n	401a8 <nrf91_socket_offload_recvfrom+0x26>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   401e4:	4639      	mov	r1, r7
   401e6:	4620      	mov	r0, r4
   401e8:	f7ff fe92 	bl	3ff10 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   401ec:	2318      	movs	r3, #24
   401ee:	e7f5      	b.n	401dc <nrf91_socket_offload_recvfrom+0x5a>

000401f0 <nrf91_socket_offload_connect>:
{
   401f0:	b530      	push	{r4, r5, lr}
	if (addr->sa_family == AF_INET) {
   401f2:	880c      	ldrh	r4, [r1, #0]
{
   401f4:	b08b      	sub	sp, #44	; 0x2c
	if (addr->sa_family == AF_INET) {
   401f6:	2c01      	cmp	r4, #1
{
   401f8:	4605      	mov	r5, r0
   401fa:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   401fc:	d10e      	bne.n	4021c <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   401fe:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   40200:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   40202:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   40206:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   40208:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   4020a:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   4020c:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   40210:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   40212:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   40214:	f7ea fb24 	bl	2a860 <nrf_connect>
}
   40218:	b00b      	add	sp, #44	; 0x2c
   4021a:	bd30      	pop	{r4, r5, pc}
	} else if (addr->sa_family == AF_INET6) {
   4021c:	2c02      	cmp	r4, #2
   4021e:	d107      	bne.n	40230 <nrf91_socket_offload_connect+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   40220:	a901      	add	r1, sp, #4
   40222:	4618      	mov	r0, r3
   40224:	f7ff ff53 	bl	400ce <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   40228:	2224      	movs	r2, #36	; 0x24
   4022a:	a901      	add	r1, sp, #4
   4022c:	4628      	mov	r0, r5
   4022e:	e7f1      	b.n	40214 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   40230:	f7ea fb16 	bl	2a860 <nrf_connect>
		if (retval < 0) {
   40234:	2800      	cmp	r0, #0
   40236:	daef      	bge.n	40218 <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   40238:	f7fe fd6b 	bl	3ed12 <__errno>
   4023c:	2386      	movs	r3, #134	; 0x86
   4023e:	6003      	str	r3, [r0, #0]
   40240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   40244:	e7e8      	b.n	40218 <nrf91_socket_offload_connect+0x28>

00040246 <nrf91_socket_offload_accept>:
{
   40246:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   40248:	2708      	movs	r7, #8
{
   4024a:	b085      	sub	sp, #20
   4024c:	460c      	mov	r4, r1
   4024e:	4616      	mov	r6, r2
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   40250:	eb0d 0107 	add.w	r1, sp, r7
   40254:	aa01      	add	r2, sp, #4
	nrf_socklen_t nrf_addrlen = sizeof(nrf_addr);
   40256:	9701      	str	r7, [sp, #4]
	retval = nrf_accept(sd, &nrf_addr, &nrf_addrlen);
   40258:	f7ea fb24 	bl	2a8a4 <nrf_accept>
	if (retval < 0) {
   4025c:	1e05      	subs	r5, r0, #0
   4025e:	db1a      	blt.n	40296 <nrf91_socket_offload_accept+0x50>
	if (nrf_addr.sa_family == NRF_AF_INET) {
   40260:	9b03      	ldr	r3, [sp, #12]
   40262:	2b02      	cmp	r3, #2
   40264:	d10a      	bne.n	4027c <nrf91_socket_offload_accept+0x36>
	ptr->sin_port = nrf_in->sin_port;
   40266:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		*addrlen = sizeof(struct sockaddr_in);
   4026a:	6037      	str	r7, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   4026c:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   4026e:	2301      	movs	r3, #1
   40270:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   40272:	9b05      	ldr	r3, [sp, #20]
   40274:	6063      	str	r3, [r4, #4]
}
   40276:	4628      	mov	r0, r5
   40278:	b005      	add	sp, #20
   4027a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (nrf_addr.sa_family == NRF_AF_INET6) {
   4027c:	2b0a      	cmp	r3, #10
   4027e:	d106      	bne.n	4028e <nrf91_socket_offload_accept+0x48>
		*addrlen = sizeof(struct sockaddr_in6);
   40280:	2318      	movs	r3, #24
		nrf_to_z_ipv6(addr, (const struct nrf_sockaddr_in6 *)&nrf_addr);
   40282:	a902      	add	r1, sp, #8
		*addrlen = sizeof(struct sockaddr_in6);
   40284:	6033      	str	r3, [r6, #0]
		nrf_to_z_ipv6(addr, (const struct nrf_sockaddr_in6 *)&nrf_addr);
   40286:	4620      	mov	r0, r4
   40288:	f7ff fe42 	bl	3ff10 <nrf_to_z_ipv6>
   4028c:	e7f3      	b.n	40276 <nrf91_socket_offload_accept+0x30>
	errno = ENOTSUP;
   4028e:	f7fe fd40 	bl	3ed12 <__errno>
   40292:	2386      	movs	r3, #134	; 0x86
   40294:	6003      	str	r3, [r0, #0]
		return -1;
   40296:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   4029a:	e7ec      	b.n	40276 <nrf91_socket_offload_accept+0x30>

0004029c <nrf91_socket_offload_socket>:
{
   4029c:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   4029e:	b280      	uxth	r0, r0
   402a0:	f7ff fcce 	bl	3fc40 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   402a4:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   402a8:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   402aa:	d106      	bne.n	402ba <nrf91_socket_offload_socket+0x1e>
		errno = EAFNOSUPPORT;
   402ac:	f7fe fd31 	bl	3ed12 <__errno>
   402b0:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   402b2:	6003      	str	r3, [r0, #0]
}
   402b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   402b8:	bd10      	pop	{r4, pc}
	switch (socktype) {
   402ba:	2903      	cmp	r1, #3
   402bc:	d003      	beq.n	402c6 <nrf91_socket_offload_socket+0x2a>
		return NRF_SOCK_MGMT;
   402be:	2904      	cmp	r1, #4
   402c0:	bf08      	it	eq
   402c2:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   402c6:	4610      	mov	r0, r2
   402c8:	f7ff fcd0 	bl	3fc6c <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   402cc:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   402d0:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   402d2:	d103      	bne.n	402dc <nrf91_socket_offload_socket+0x40>
		errno = EPROTONOSUPPORT;
   402d4:	f7fe fd1d 	bl	3ed12 <__errno>
   402d8:	237b      	movs	r3, #123	; 0x7b
   402da:	e7ea      	b.n	402b2 <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   402dc:	4620      	mov	r0, r4
}
   402de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   402e2:	f7ea ba05 	b.w	2a6f0 <nrf_socket>

000402e6 <nrf91_socket_offload_setsockopt>:
{
   402e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   402ea:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   402ee:	b086      	sub	sp, #24
   402f0:	4680      	mov	r8, r0
   402f2:	460c      	mov	r4, r1
   402f4:	4617      	mov	r7, r2
   402f6:	461d      	mov	r5, r3
   402f8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	switch (z_in_level) {
   402fa:	d002      	beq.n	40302 <nrf91_socket_offload_setsockopt+0x1c>
   402fc:	dc1c      	bgt.n	40338 <nrf91_socket_offload_setsockopt+0x52>
   402fe:	2901      	cmp	r1, #1
   40300:	d122      	bne.n	40348 <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   40302:	aa03      	add	r2, sp, #12
   40304:	4639      	mov	r1, r7
   40306:	4620      	mov	r0, r4
   40308:	f7e2 fc20 	bl	22b4c <z_to_nrf_optname>
   4030c:	2800      	cmp	r0, #0
   4030e:	db1b      	blt.n	40348 <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   40310:	2c01      	cmp	r4, #1
   40312:	d107      	bne.n	40324 <nrf91_socket_offload_setsockopt+0x3e>
   40314:	2f14      	cmp	r7, #20
   40316:	d105      	bne.n	40324 <nrf91_socket_offload_setsockopt+0x3e>
		nrf_optlen = sizeof(struct nrf_timeval);
   40318:	2608      	movs	r6, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   4031a:	682b      	ldr	r3, [r5, #0]
   4031c:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   4031e:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   40320:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   40322:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   40324:	9600      	str	r6, [sp, #0]
   40326:	462b      	mov	r3, r5
   40328:	9a03      	ldr	r2, [sp, #12]
   4032a:	4621      	mov	r1, r4
   4032c:	4640      	mov	r0, r8
   4032e:	f7ea fae1 	bl	2a8f4 <nrf_setsockopt>
}
   40332:	b006      	add	sp, #24
   40334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   40338:	f240 2302 	movw	r3, #514	; 0x202
   4033c:	4299      	cmp	r1, r3
   4033e:	d0e0      	beq.n	40302 <nrf91_socket_offload_setsockopt+0x1c>
   40340:	f240 2303 	movw	r3, #515	; 0x203
   40344:	4299      	cmp	r1, r3
   40346:	e7db      	b.n	40300 <nrf91_socket_offload_setsockopt+0x1a>
	errno = ENOPROTOOPT;
   40348:	f7fe fce3 	bl	3ed12 <__errno>
   4034c:	236d      	movs	r3, #109	; 0x6d
   4034e:	6003      	str	r3, [r0, #0]
   40350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   40354:	e7ed      	b.n	40332 <nrf91_socket_offload_setsockopt+0x4c>

00040356 <nrf91_socket_offload_bind>:
{
   40356:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   40358:	880a      	ldrh	r2, [r1, #0]
{
   4035a:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   4035c:	2a01      	cmp	r2, #1
{
   4035e:	4604      	mov	r4, r0
   40360:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   40362:	d10e      	bne.n	40382 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   40364:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   40366:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   40368:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   4036c:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   4036e:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   40370:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   40372:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   40376:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   40378:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   4037a:	f7ea faa9 	bl	2a8d0 <nrf_bind>
}
   4037e:	b00a      	add	sp, #40	; 0x28
   40380:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   40382:	2a02      	cmp	r2, #2
   40384:	d107      	bne.n	40396 <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   40386:	a901      	add	r1, sp, #4
   40388:	4618      	mov	r0, r3
   4038a:	f7ff fea0 	bl	400ce <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   4038e:	2224      	movs	r2, #36	; 0x24
   40390:	a901      	add	r1, sp, #4
   40392:	4620      	mov	r0, r4
   40394:	e7f1      	b.n	4037a <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   40396:	f7fe fcbc 	bl	3ed12 <__errno>
   4039a:	2386      	movs	r3, #134	; 0x86
   4039c:	6003      	str	r3, [r0, #0]
   4039e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   403a2:	e7ec      	b.n	4037e <nrf91_socket_offload_bind+0x28>

000403a4 <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   403a4:	ea40 0301 	orr.w	r3, r0, r1
   403a8:	f033 030f 	bics.w	r3, r3, #15
   403ac:	d101      	bne.n	403b2 <dk_set_leds_state+0xe>
   403ae:	f7e2 bc41 	b.w	22c34 <dk_set_leds_state.part.0>
}
   403b2:	f06f 0015 	mvn.w	r0, #21
   403b6:	4770      	bx	lr

000403b8 <dk_set_leds>:
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
   403b8:	210f      	movs	r1, #15
   403ba:	f7ff bff3 	b.w	403a4 <dk_set_leds_state>

000403be <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   403be:	6843      	ldr	r3, [r0, #4]
   403c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   403c2:	b103      	cbz	r3, 403c6 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   403c4:	4718      	bx	r3
}
   403c6:	4770      	bx	lr

000403c8 <response_handler>:
	write_uart_string(response);
   403c8:	4608      	mov	r0, r1
   403ca:	f7e2 bff7 	b.w	233bc <write_uart_string>

000403ce <at_params_list_init>:
{
   403ce:	b538      	push	{r3, r4, r5, lr}
   403d0:	460d      	mov	r5, r1
	if (list == NULL) {
   403d2:	4604      	mov	r4, r0
   403d4:	b140      	cbz	r0, 403e8 <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   403d6:	210c      	movs	r1, #12
   403d8:	4628      	mov	r0, r5
   403da:	f000 fb2f 	bl	40a3c <k_calloc>
   403de:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   403e0:	b128      	cbz	r0, 403ee <at_params_list_init+0x20>
	return 0;
   403e2:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   403e4:	6025      	str	r5, [r4, #0]
}
   403e6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   403e8:	f06f 0015 	mvn.w	r0, #21
   403ec:	e7fb      	b.n	403e6 <at_params_list_init+0x18>
		return -ENOMEM;
   403ee:	f06f 000b 	mvn.w	r0, #11
   403f2:	e7f8      	b.n	403e6 <at_params_list_init+0x18>

000403f4 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   403f4:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   403f6:	4604      	mov	r4, r0
   403f8:	b148      	cbz	r0, 4040e <at_params_list_free+0x1a>
   403fa:	6843      	ldr	r3, [r0, #4]
   403fc:	b13b      	cbz	r3, 4040e <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   403fe:	2500      	movs	r5, #0
	at_params_list_clear(list);
   40400:	f7e3 fb8e 	bl	23b20 <at_params_list_clear>
	list->param_count = 0;
   40404:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   40406:	6860      	ldr	r0, [r4, #4]
   40408:	f000 fb13 	bl	40a32 <k_free>
	list->params = NULL;
   4040c:	6065      	str	r5, [r4, #4]
}
   4040e:	bd38      	pop	{r3, r4, r5, pc}

00040410 <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   40410:	b538      	push	{r3, r4, r5, lr}
   40412:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   40414:	b910      	cbnz	r0, 4041c <at_params_short_put+0xc>
		return -EINVAL;
   40416:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_SHORT;
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
}
   4041a:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   4041c:	6843      	ldr	r3, [r0, #4]
   4041e:	2b00      	cmp	r3, #0
   40420:	d0f9      	beq.n	40416 <at_params_short_put+0x6>
	struct at_param *param = at_params_get(list, index);
   40422:	f7e3 fb11 	bl	23a48 <at_params_get>
	if (param == NULL) {
   40426:	4604      	mov	r4, r0
   40428:	2800      	cmp	r0, #0
   4042a:	d0f4      	beq.n	40416 <at_params_short_put+0x6>
	at_param_clear(param);
   4042c:	f7e3 fb56 	bl	23adc <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   40430:	2301      	movs	r3, #1
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   40432:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   40434:	7023      	strb	r3, [r4, #0]
	return 0;
   40436:	2000      	movs	r0, #0
   40438:	e7ef      	b.n	4041a <at_params_short_put+0xa>

0004043a <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   4043a:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   4043c:	b910      	cbnz	r0, 40444 <at_params_empty_put+0xa>
		return -EINVAL;
   4043e:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   40442:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   40444:	6843      	ldr	r3, [r0, #4]
   40446:	2b00      	cmp	r3, #0
   40448:	d0f9      	beq.n	4043e <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   4044a:	f7e3 fafd 	bl	23a48 <at_params_get>
	if (param == NULL) {
   4044e:	4604      	mov	r4, r0
   40450:	2800      	cmp	r0, #0
   40452:	d0f4      	beq.n	4043e <at_params_empty_put+0x4>
	at_param_clear(param);
   40454:	f7e3 fb42 	bl	23adc <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   40458:	2305      	movs	r3, #5
	param->value.int_val = 0;
   4045a:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   4045c:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   4045e:	60a0      	str	r0, [r4, #8]
	return 0;
   40460:	e7ef      	b.n	40442 <at_params_empty_put+0x8>

00040462 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   40462:	b538      	push	{r3, r4, r5, lr}
   40464:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   40466:	b910      	cbnz	r0, 4046e <at_params_int_put+0xc>
		return -EINVAL;
   40468:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   4046c:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   4046e:	6843      	ldr	r3, [r0, #4]
   40470:	2b00      	cmp	r3, #0
   40472:	d0f9      	beq.n	40468 <at_params_int_put+0x6>
	struct at_param *param = at_params_get(list, index);
   40474:	f7e3 fae8 	bl	23a48 <at_params_get>
	if (param == NULL) {
   40478:	4604      	mov	r4, r0
   4047a:	2800      	cmp	r0, #0
   4047c:	d0f4      	beq.n	40468 <at_params_int_put+0x6>
	at_param_clear(param);
   4047e:	f7e3 fb2d 	bl	23adc <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   40482:	2302      	movs	r3, #2
	param->value.int_val = value;
   40484:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   40486:	7023      	strb	r3, [r4, #0]
	return 0;
   40488:	2000      	movs	r0, #0
   4048a:	e7ef      	b.n	4046c <at_params_int_put+0xa>

0004048c <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   4048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4048e:	4616      	mov	r6, r2
   40490:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   40492:	b910      	cbnz	r0, 4049a <at_params_string_put+0xe>
		return -EINVAL;
   40494:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   40498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   4049a:	6843      	ldr	r3, [r0, #4]
   4049c:	2b00      	cmp	r3, #0
   4049e:	d0f9      	beq.n	40494 <at_params_string_put+0x8>
   404a0:	2a00      	cmp	r2, #0
   404a2:	d0f7      	beq.n	40494 <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   404a4:	f7e3 fad0 	bl	23a48 <at_params_get>
	if (param == NULL) {
   404a8:	4604      	mov	r4, r0
   404aa:	2800      	cmp	r0, #0
   404ac:	d0f2      	beq.n	40494 <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   404ae:	1c68      	adds	r0, r5, #1
   404b0:	f7f8 fa90 	bl	389d4 <k_malloc>
	if (param_value == NULL) {
   404b4:	4607      	mov	r7, r0
   404b6:	b160      	cbz	r0, 404d2 <at_params_string_put+0x46>
   404b8:	462a      	mov	r2, r5
   404ba:	4631      	mov	r1, r6
   404bc:	f000 fc50 	bl	40d60 <memcpy>
	at_param_clear(param);
   404c0:	4620      	mov	r0, r4
   404c2:	f7e3 fb0b 	bl	23adc <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   404c6:	2303      	movs	r3, #3
	param->size = str_len;
   404c8:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   404ca:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   404cc:	60a7      	str	r7, [r4, #8]
	return 0;
   404ce:	2000      	movs	r0, #0
   404d0:	e7e2      	b.n	40498 <at_params_string_put+0xc>
		return -ENOMEM;
   404d2:	f06f 000b 	mvn.w	r0, #11
   404d6:	e7df      	b.n	40498 <at_params_string_put+0xc>

000404d8 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			 const u32_t *array, size_t array_len)
{
   404d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   404da:	4616      	mov	r6, r2
   404dc:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   404de:	b910      	cbnz	r0, 404e6 <at_params_array_put+0xe>
		return -EINVAL;
   404e0:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   404e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   404e6:	6843      	ldr	r3, [r0, #4]
   404e8:	2b00      	cmp	r3, #0
   404ea:	d0f9      	beq.n	404e0 <at_params_array_put+0x8>
   404ec:	2a00      	cmp	r2, #0
   404ee:	d0f7      	beq.n	404e0 <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   404f0:	f7e3 faaa 	bl	23a48 <at_params_get>
	if (param == NULL) {
   404f4:	4604      	mov	r4, r0
   404f6:	2800      	cmp	r0, #0
   404f8:	d0f2      	beq.n	404e0 <at_params_array_put+0x8>
	u32_t *param_value = (u32_t *)k_malloc(array_len);
   404fa:	4628      	mov	r0, r5
   404fc:	f7f8 fa6a 	bl	389d4 <k_malloc>
	if (param_value == NULL) {
   40500:	4607      	mov	r7, r0
   40502:	b160      	cbz	r0, 4051e <at_params_array_put+0x46>
   40504:	462a      	mov	r2, r5
   40506:	4631      	mov	r1, r6
   40508:	f000 fc2a 	bl	40d60 <memcpy>
	at_param_clear(param);
   4050c:	4620      	mov	r0, r4
   4050e:	f7e3 fae5 	bl	23adc <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   40512:	2304      	movs	r3, #4
	param->size = array_len;
   40514:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   40516:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   40518:	60a7      	str	r7, [r4, #8]
	return 0;
   4051a:	2000      	movs	r0, #0
   4051c:	e7e2      	b.n	404e4 <at_params_array_put+0xc>
		return -ENOMEM;
   4051e:	f06f 000b 	mvn.w	r0, #11
   40522:	e7df      	b.n	404e4 <at_params_array_put+0xc>

00040524 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			u16_t *value)
{
   40524:	b510      	push	{r4, lr}
   40526:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   40528:	b910      	cbnz	r0, 40530 <at_params_short_get+0xc>
		return -EINVAL;
   4052a:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (u16_t)param->value.int_val;
	return 0;
}
   4052e:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   40530:	6843      	ldr	r3, [r0, #4]
   40532:	2b00      	cmp	r3, #0
   40534:	d0f9      	beq.n	4052a <at_params_short_get+0x6>
   40536:	2a00      	cmp	r2, #0
   40538:	d0f7      	beq.n	4052a <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   4053a:	f7e3 fa85 	bl	23a48 <at_params_get>
	if (param == NULL) {
   4053e:	2800      	cmp	r0, #0
   40540:	d0f3      	beq.n	4052a <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   40542:	7803      	ldrb	r3, [r0, #0]
   40544:	2b01      	cmp	r3, #1
   40546:	d1f0      	bne.n	4052a <at_params_short_get+0x6>
	*value = (u16_t)param->value.int_val;
   40548:	6883      	ldr	r3, [r0, #8]
	return 0;
   4054a:	2000      	movs	r0, #0
	*value = (u16_t)param->value.int_val;
   4054c:	8023      	strh	r3, [r4, #0]
	return 0;
   4054e:	e7ee      	b.n	4052e <at_params_short_get+0xa>

00040550 <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      u32_t *value)
{
   40550:	b510      	push	{r4, lr}
   40552:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   40554:	b910      	cbnz	r0, 4055c <at_params_int_get+0xc>
		return -EINVAL;
   40556:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   4055a:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   4055c:	6843      	ldr	r3, [r0, #4]
   4055e:	2b00      	cmp	r3, #0
   40560:	d0f9      	beq.n	40556 <at_params_int_get+0x6>
   40562:	2a00      	cmp	r2, #0
   40564:	d0f7      	beq.n	40556 <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   40566:	f7e3 fa6f 	bl	23a48 <at_params_get>
	if (param == NULL) {
   4056a:	2800      	cmp	r0, #0
   4056c:	d0f3      	beq.n	40556 <at_params_int_get+0x6>
	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   4056e:	7803      	ldrb	r3, [r0, #0]
   40570:	3b01      	subs	r3, #1
   40572:	2b01      	cmp	r3, #1
   40574:	d8ef      	bhi.n	40556 <at_params_int_get+0x6>
	*value = param->value.int_val;
   40576:	6883      	ldr	r3, [r0, #8]
	return 0;
   40578:	2000      	movs	r0, #0
	*value = param->value.int_val;
   4057a:	6023      	str	r3, [r4, #0]
	return 0;
   4057c:	e7ed      	b.n	4055a <at_params_int_get+0xa>

0004057e <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   4057e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   40580:	4616      	mov	r6, r2
   40582:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   40584:	b910      	cbnz	r0, 4058c <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   40586:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   4058a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   4058c:	6843      	ldr	r3, [r0, #4]
   4058e:	2b00      	cmp	r3, #0
   40590:	d0f9      	beq.n	40586 <at_params_string_get+0x8>
   40592:	2a00      	cmp	r2, #0
   40594:	d0f7      	beq.n	40586 <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   40596:	2c00      	cmp	r4, #0
   40598:	d0f5      	beq.n	40586 <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   4059a:	f7e3 fa55 	bl	23a48 <at_params_get>
	if (param == NULL) {
   4059e:	4607      	mov	r7, r0
   405a0:	2800      	cmp	r0, #0
   405a2:	d0f0      	beq.n	40586 <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   405a4:	7803      	ldrb	r3, [r0, #0]
   405a6:	2b03      	cmp	r3, #3
   405a8:	d1ed      	bne.n	40586 <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   405aa:	f7e3 fa6f 	bl	23a8c <at_param_size>
	if (*len < param_len) {
   405ae:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   405b0:	4605      	mov	r5, r0
	if (*len < param_len) {
   405b2:	4283      	cmp	r3, r0
   405b4:	d307      	bcc.n	405c6 <at_params_string_get+0x48>
   405b6:	4602      	mov	r2, r0
   405b8:	68b9      	ldr	r1, [r7, #8]
   405ba:	4630      	mov	r0, r6
   405bc:	f000 fbd0 	bl	40d60 <memcpy>
	*len = param_len;
   405c0:	6025      	str	r5, [r4, #0]
	return 0;
   405c2:	2000      	movs	r0, #0
   405c4:	e7e1      	b.n	4058a <at_params_string_get+0xc>
		return -ENOMEM;
   405c6:	f06f 000b 	mvn.w	r0, #11
   405ca:	e7de      	b.n	4058a <at_params_string_get+0xc>

000405cc <at_params_valid_count_get>:

	return 0;
}

u32_t at_params_valid_count_get(const struct at_param_list *list)
{
   405cc:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   405ce:	4605      	mov	r5, r0
   405d0:	b180      	cbz	r0, 405f4 <at_params_valid_count_get+0x28>
   405d2:	6843      	ldr	r3, [r0, #4]
   405d4:	b173      	cbz	r3, 405f4 <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   405d6:	2100      	movs	r1, #0
   405d8:	f7e3 fa36 	bl	23a48 <at_params_get>
	size_t valid_i = 0;
   405dc:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   405de:	b108      	cbz	r0, 405e4 <at_params_valid_count_get+0x18>
   405e0:	7803      	ldrb	r3, [r0, #0]
   405e2:	b90b      	cbnz	r3, 405e8 <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   405e4:	4620      	mov	r0, r4
   405e6:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   405e8:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   405ea:	4621      	mov	r1, r4
   405ec:	4628      	mov	r0, r5
   405ee:	f7e3 fa2b 	bl	23a48 <at_params_get>
   405f2:	e7f4      	b.n	405de <at_params_valid_count_get+0x12>
		return -EINVAL;
   405f4:	f06f 0415 	mvn.w	r4, #21
   405f8:	e7f4      	b.n	405e4 <at_params_valid_count_get+0x18>

000405fa <json_add_str>:
{
   405fa:	b538      	push	{r3, r4, r5, lr}
   405fc:	460d      	mov	r5, r1
	if (parent == NULL || str == NULL || item == NULL) {
   405fe:	4604      	mov	r4, r0
   40600:	b158      	cbz	r0, 4061a <json_add_str+0x20>
   40602:	b152      	cbz	r2, 4061a <json_add_str+0x20>
	json_str = cJSON_CreateString(item);
   40604:	4610      	mov	r0, r2
   40606:	f7e2 f855 	bl	226b4 <cJSON_CreateString>
	if (json_str == NULL) {
   4060a:	4602      	mov	r2, r0
   4060c:	b140      	cbz	r0, 40620 <json_add_str+0x26>
	cJSON_AddItemToObject(parent, str, item);
   4060e:	4620      	mov	r0, r4
   40610:	4629      	mov	r1, r5
   40612:	f7ff fac5 	bl	3fba0 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   40616:	2000      	movs	r0, #0
}
   40618:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   4061a:	f06f 0015 	mvn.w	r0, #21
   4061e:	e7fb      	b.n	40618 <json_add_str+0x1e>
		return -ENOMEM;
   40620:	f06f 000b 	mvn.w	r0, #11
   40624:	e7f8      	b.n	40618 <json_add_str+0x1e>

00040626 <json_add_data>:
{
   40626:	b5f0      	push	{r4, r5, r6, r7, lr}
   40628:	4604      	mov	r4, r0
   4062a:	b09b      	sub	sp, #108	; 0x6c
	if (param == NULL || json_obj == NULL) {
   4062c:	460f      	mov	r7, r1
   4062e:	b921      	cbnz	r1, 4063a <json_add_data+0x14>
		return -EINVAL;
   40630:	f06f 0615 	mvn.w	r6, #21
}
   40634:	4630      	mov	r0, r6
   40636:	b01b      	add	sp, #108	; 0x6c
   40638:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(data_name, 0, MODEM_INFO_MAX_RESPONSE_SIZE);
   4063a:	2264      	movs	r2, #100	; 0x64
   4063c:	2100      	movs	r1, #0
   4063e:	a801      	add	r0, sp, #4
   40640:	f000 fbae 	bl	40da0 <memset>
	ret = modem_info_name_get(param->type,
   40644:	a901      	add	r1, sp, #4
   40646:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
   4064a:	f7e3 fb0d 	bl	23c68 <modem_info_name_get>
	if (ret < 0) {
   4064e:	1e05      	subs	r5, r0, #0
   40650:	dbee      	blt.n	40630 <json_add_data+0xa>
	data_type = modem_info_type_get(param->type);
   40652:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
   40656:	f7e3 fafd 	bl	23c54 <modem_info_type_get>
	if (data_type == AT_PARAM_TYPE_STRING &&
   4065a:	2803      	cmp	r0, #3
   4065c:	d113      	bne.n	40686 <json_add_data+0x60>
   4065e:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   40662:	2b03      	cmp	r3, #3
   40664:	d00f      	beq.n	40686 <json_add_data+0x60>
		total_len += strlen(param->value_string);
   40666:	3402      	adds	r4, #2
   40668:	4620      	mov	r0, r4
   4066a:	f7d9 fc8b 	bl	19f84 <strlen>
		ret += json_add_str(json_obj, data_name, param->value_string);
   4066e:	4622      	mov	r2, r4
		total_len += strlen(param->value_string);
   40670:	4606      	mov	r6, r0
		ret += json_add_str(json_obj, data_name, param->value_string);
   40672:	a901      	add	r1, sp, #4
   40674:	4638      	mov	r0, r7
   40676:	f7ff ffc0 	bl	405fa <json_add_str>
   4067a:	4428      	add	r0, r5
	if (ret < 0) {
   4067c:	ea36 0620 	bics.w	r6, r6, r0, asr #32
   40680:	bf28      	it	cs
   40682:	4606      	movcs	r6, r0
   40684:	e7d6      	b.n	40634 <json_add_data+0xe>
		ret += json_add_num(json_obj, data_name, param->value);
   40686:	8820      	ldrh	r0, [r4, #0]
   40688:	f7d8 f80c 	bl	186a4 <__aeabi_ui2d>
	json_num = cJSON_CreateNumber(num);
   4068c:	ec41 0b10 	vmov	d0, r0, r1
   40690:	f7d9 fefa 	bl	1a488 <cJSON_CreateNumber>
	if (json_num == NULL) {
   40694:	4602      	mov	r2, r0
   40696:	b138      	cbz	r0, 406a8 <json_add_data+0x82>
	cJSON_AddItemToObject(parent, str, item);
   40698:	4638      	mov	r0, r7
   4069a:	a901      	add	r1, sp, #4
   4069c:	f7ff fa80 	bl	3fba0 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_num);
   406a0:	2000      	movs	r0, #0
		ret += json_add_num(json_obj, data_name, param->value);
   406a2:	4428      	add	r0, r5
		total_len += sizeof(u16_t);
   406a4:	2602      	movs	r6, #2
   406a6:	e7e9      	b.n	4067c <json_add_data+0x56>
		return -ENOMEM;
   406a8:	f06f 000b 	mvn.w	r0, #11
   406ac:	e7f9      	b.n	406a2 <json_add_data+0x7c>

000406ae <sim_data_add>:
{
   406ae:	b570      	push	{r4, r5, r6, lr}
   406b0:	460d      	mov	r5, r1
	if (sim == NULL || json_obj == NULL) {
   406b2:	4606      	mov	r6, r0
   406b4:	b180      	cbz	r0, 406d8 <sim_data_add+0x2a>
   406b6:	b179      	cbz	r1, 406d8 <sim_data_add+0x2a>
	total_len = json_add_data(&sim->uicc, json_obj);
   406b8:	f7ff ffb5 	bl	40626 <json_add_data>
	total_len += json_add_data(&sim->iccid, json_obj);
   406bc:	4629      	mov	r1, r5
	total_len = json_add_data(&sim->uicc, json_obj);
   406be:	4604      	mov	r4, r0
	total_len += json_add_data(&sim->iccid, json_obj);
   406c0:	f106 0070 	add.w	r0, r6, #112	; 0x70
   406c4:	f7ff ffaf 	bl	40626 <json_add_data>
	total_len += json_add_data(&sim->imsi, json_obj);
   406c8:	4629      	mov	r1, r5
	total_len += json_add_data(&sim->iccid, json_obj);
   406ca:	4404      	add	r4, r0
	total_len += json_add_data(&sim->imsi, json_obj);
   406cc:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
   406d0:	f7ff ffa9 	bl	40626 <json_add_data>
   406d4:	4420      	add	r0, r4
}
   406d6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   406d8:	f06f 0015 	mvn.w	r0, #21
   406dc:	e7fb      	b.n	406d6 <sim_data_add+0x28>

000406de <cloud_notify_event>:
 */
static inline void cloud_notify_event(struct cloud_backend *backend,
			struct cloud_event *evt,
			void *user_data)
{
	if (backend->config->handler) {
   406de:	6843      	ldr	r3, [r0, #4]
   406e0:	685b      	ldr	r3, [r3, #4]
   406e2:	b103      	cbz	r3, 406e6 <cloud_notify_event+0x8>
		backend->config->handler(backend, evt, user_data);
   406e4:	4718      	bx	r3
	}
}
   406e6:	4770      	bx	lr

000406e8 <user_data_set>:
}

static int user_data_set(const struct cloud_backend *const backend,
			 void *user_data)
{
	backend->config->user_data = user_data;
   406e8:	6843      	ldr	r3, [r0, #4]

	return 0;
}
   406ea:	2000      	movs	r0, #0
	backend->config->user_data = user_data;
   406ec:	60d9      	str	r1, [r3, #12]
}
   406ee:	4770      	bx	lr

000406f0 <ping>:
{
   406f0:	b508      	push	{r3, lr}
	nct_process();
   406f2:	f7e5 fa31 	bl	25b58 <nct_process>
}
   406f6:	2000      	movs	r0, #0
   406f8:	bd08      	pop	{r3, pc}

000406fa <input>:
   406fa:	b508      	push	{r3, lr}
   406fc:	f7e5 fa2c 	bl	25b58 <nct_process>
   40700:	2000      	movs	r0, #0
   40702:	bd08      	pop	{r3, pc}

00040704 <connect>:
{
   40704:	b538      	push	{r3, r4, r5, lr}
   40706:	4605      	mov	r5, r0
	err = nrf_cloud_connect(NULL);
   40708:	2000      	movs	r0, #0
   4070a:	f7e4 f80f 	bl	2472c <nrf_cloud_connect>
	backend->config->socket = nct_socket_get();
   4070e:	686d      	ldr	r5, [r5, #4]
	err = nrf_cloud_connect(NULL);
   40710:	4604      	mov	r4, r0
	backend->config->socket = nct_socket_get();
   40712:	f7e5 fa2d 	bl	25b70 <nct_socket_get>
   40716:	60a8      	str	r0, [r5, #8]
}
   40718:	4620      	mov	r0, r4
   4071a:	bd38      	pop	{r3, r4, r5, pc}

0004071c <disconnect>:
	return nrf_cloud_disconnect();
   4071c:	f7e4 b812 	b.w	24744 <nrf_cloud_disconnect>

00040720 <json_add_str>:
{
   40720:	b538      	push	{r3, r4, r5, lr}
   40722:	4604      	mov	r4, r0
	json_str = cJSON_CreateString(item);
   40724:	4610      	mov	r0, r2
{
   40726:	460d      	mov	r5, r1
	json_str = cJSON_CreateString(item);
   40728:	f7e1 ffc4 	bl	226b4 <cJSON_CreateString>
	if (json_str == NULL) {
   4072c:	4602      	mov	r2, r0
   4072e:	b128      	cbz	r0, 4073c <json_add_str+0x1c>
	cJSON_AddItemToObject(parent, str, item);
   40730:	4620      	mov	r0, r4
   40732:	4629      	mov	r1, r5
   40734:	f7ff fa34 	bl	3fba0 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   40738:	2000      	movs	r0, #0
}
   4073a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   4073c:	f06f 000b 	mvn.w	r0, #11
   40740:	e7fb      	b.n	4073a <json_add_str+0x1a>

00040742 <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   40742:	b108      	cbz	r0, 40748 <json_object_decode+0x6>
   40744:	f7ff ba27 	b.w	3fb96 <cJSON_GetObjectItem>
}
   40748:	4770      	bx	lr

0004074a <json_add_null>:
{
   4074a:	b538      	push	{r3, r4, r5, lr}
   4074c:	4604      	mov	r4, r0
   4074e:	460d      	mov	r5, r1
	json_null = cJSON_CreateNull();
   40750:	f7e1 ffa4 	bl	2269c <cJSON_CreateNull>
	if (json_null == NULL) {
   40754:	4602      	mov	r2, r0
   40756:	b128      	cbz	r0, 40764 <json_add_null+0x1a>
	cJSON_AddItemToObject(parent, str, item);
   40758:	4620      	mov	r0, r4
   4075a:	4629      	mov	r1, r5
   4075c:	f7ff fa20 	bl	3fba0 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_null);
   40760:	2000      	movs	r0, #0
}
   40762:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   40764:	f06f 000b 	mvn.w	r0, #11
   40768:	e7fb      	b.n	40762 <json_add_null+0x18>

0004076a <json_decode_and_alloc>:
{
   4076a:	b538      	push	{r3, r4, r5, lr}
   4076c:	460d      	mov	r5, r1
	if (obj == NULL || (obj->type != cJSON_String)) {
   4076e:	4604      	mov	r4, r0
   40770:	b110      	cbz	r0, 40778 <json_decode_and_alloc+0xe>
   40772:	68c3      	ldr	r3, [r0, #12]
   40774:	2b10      	cmp	r3, #16
   40776:	d004      	beq.n	40782 <json_decode_and_alloc+0x18>
		data->ptr = NULL;
   40778:	2300      	movs	r3, #0
		return -ENOENT;
   4077a:	f06f 0001 	mvn.w	r0, #1
		data->ptr = NULL;
   4077e:	606b      	str	r3, [r5, #4]
}
   40780:	bd38      	pop	{r3, r4, r5, pc}
	data->len = strlen(obj->valuestring);
   40782:	6900      	ldr	r0, [r0, #16]
   40784:	f7d9 fbfe 	bl	19f84 <strlen>
   40788:	6028      	str	r0, [r5, #0]
	data->ptr = nrf_cloud_malloc(data->len + 1);
   4078a:	3001      	adds	r0, #1
   4078c:	f7f8 f922 	bl	389d4 <k_malloc>
   40790:	6068      	str	r0, [r5, #4]
	if (data->ptr == NULL) {
   40792:	b130      	cbz	r0, 407a2 <json_decode_and_alloc+0x38>
	strncpy((char *)data->ptr, obj->valuestring, data->len + 1);
   40794:	682a      	ldr	r2, [r5, #0]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   40796:	6921      	ldr	r1, [r4, #16]
   40798:	3201      	adds	r2, #1
   4079a:	f000 fcd0 	bl	4113e <strncpy>
	return 0;
   4079e:	2000      	movs	r0, #0
   407a0:	e7ee      	b.n	40780 <json_decode_and_alloc+0x16>
		return -ENOMEM;
   407a2:	f06f 000b 	mvn.w	r0, #11
   407a6:	e7eb      	b.n	40780 <json_decode_and_alloc+0x16>

000407a8 <nrf_codec_init>:
{
   407a8:	b508      	push	{r3, lr}
	cJSON_Init();
   407aa:	f7e1 ffb3 	bl	22714 <cJSON_Init>
}
   407ae:	2000      	movs	r0, #0
   407b0:	bd08      	pop	{r3, pc}

000407b2 <cc_disconnection_handler>:
}

static int cc_disconnection_handler(const struct nct_evt *nct_evt)
{
	return 0; /* Nothing to do */
}
   407b2:	2000      	movs	r0, #0
   407b4:	4770      	bx	lr

000407b6 <disconnection_handler>:
{
   407b6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct nrf_cloud_evt evt = {
   407b8:	2210      	movs	r2, #16
   407ba:	2100      	movs	r1, #0
   407bc:	4668      	mov	r0, sp
   407be:	f000 faef 	bl	40da0 <memset>
   407c2:	2308      	movs	r3, #8
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   407c4:	4669      	mov	r1, sp
   407c6:	2001      	movs	r0, #1
	const struct nrf_cloud_evt evt = {
   407c8:	f88d 3000 	strb.w	r3, [sp]
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   407cc:	f7e3 ff52 	bl	24674 <nfsm_set_current_state_and_notify>
}
   407d0:	2000      	movs	r0, #0
   407d2:	b005      	add	sp, #20
   407d4:	f85d fb04 	ldr.w	pc, [sp], #4

000407d8 <dc_rx_data_handler>:
	}
	return 0;
}

static int dc_rx_data_handler(const struct nct_evt *nct_evt)
{
   407d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct nrf_cloud_evt cloud_evt = {
   407da:	2400      	movs	r4, #0
   407dc:	2306      	movs	r3, #6
   407de:	e9cd 4400 	strd	r4, r4, [sp]
   407e2:	f88d 3000 	strb.w	r3, [sp]
   407e6:	6843      	ldr	r3, [r0, #4]
   407e8:	e893 0003 	ldmia.w	r3, {r0, r1}
   407ec:	ab04      	add	r3, sp, #16
   407ee:	e903 0003 	stmdb	r3, {r0, r1}
		.type = NRF_CLOUD_EVT_RX_DATA,
		.data = nct_evt->param.dc->data,
	};

	/* All data is forwared to the app */
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   407f2:	f7e3 ff39 	bl	24668 <nfsm_get_current_state>
   407f6:	4669      	mov	r1, sp
   407f8:	f7e3 ff3c 	bl	24674 <nfsm_set_current_state_and_notify>

	return 0;
}
   407fc:	4620      	mov	r0, r4
   407fe:	b004      	add	sp, #16
   40800:	bd10      	pop	{r4, pc}

00040802 <dc_connection_handler>:
{
   40802:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (nct_evt->status == 0) {
   40804:	6801      	ldr	r1, [r0, #0]
   40806:	b951      	cbnz	r1, 4081e <dc_connection_handler+0x1c>
		struct nrf_cloud_evt evt = {
   40808:	2210      	movs	r2, #16
   4080a:	4668      	mov	r0, sp
   4080c:	f000 fac8 	bl	40da0 <memset>
   40810:	2304      	movs	r3, #4
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   40812:	4669      	mov	r1, sp
   40814:	2009      	movs	r0, #9
		struct nrf_cloud_evt evt = {
   40816:	f88d 3000 	strb.w	r3, [sp]
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   4081a:	f7e3 ff2b 	bl	24674 <nfsm_set_current_state_and_notify>
}
   4081e:	2000      	movs	r0, #0
   40820:	b005      	add	sp, #20
   40822:	f85d fb04 	ldr.w	pc, [sp], #4

00040826 <cc_tx_ack_in_state_requested_handler>:
{
   40826:	b508      	push	{r3, lr}
	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   40828:	f241 632e 	movw	r3, #5678	; 0x162e
   4082c:	6842      	ldr	r2, [r0, #4]
   4082e:	429a      	cmp	r2, r3
   40830:	d103      	bne.n	4083a <cc_tx_ack_in_state_requested_handler+0x14>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   40832:	2100      	movs	r1, #0
   40834:	2005      	movs	r0, #5
   40836:	f7e3 ff1d 	bl	24674 <nfsm_set_current_state_and_notify>
}
   4083a:	2000      	movs	r0, #0
   4083c:	bd08      	pop	{r3, pc}

0004083e <cc_tx_ack_handler>:
	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   4083e:	f241 622e 	movw	r2, #5678	; 0x162e
   40842:	6843      	ldr	r3, [r0, #4]
{
   40844:	b510      	push	{r4, lr}
	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   40846:	4293      	cmp	r3, r2
   40848:	d105      	bne.n	40856 <cc_tx_ack_handler+0x18>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   4084a:	2100      	movs	r1, #0
   4084c:	2005      	movs	r0, #5
   4084e:	f7e3 ff11 	bl	24674 <nfsm_set_current_state_and_notify>
	return 0;
   40852:	2400      	movs	r4, #0
   40854:	e00b      	b.n	4086e <cc_tx_ack_handler+0x30>
	if (nct_evt->param.data_id == PAIRING_STATUS_REPORT_ID) {
   40856:	f641 62d2 	movw	r2, #7890	; 0x1ed2
   4085a:	4293      	cmp	r3, r2
   4085c:	d1f9      	bne.n	40852 <cc_tx_ack_handler+0x14>
		err = nct_dc_connect();
   4085e:	f7e5 f8fd 	bl	25a5c <nct_dc_connect>
		if (err) {
   40862:	4604      	mov	r4, r0
   40864:	b918      	cbnz	r0, 4086e <cc_tx_ack_handler+0x30>
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTING, NULL);
   40866:	4601      	mov	r1, r0
   40868:	2008      	movs	r0, #8
   4086a:	f7e3 ff03 	bl	24674 <nfsm_set_current_state_and_notify>
}
   4086e:	4620      	mov	r0, r4
   40870:	bd10      	pop	{r4, pc}

00040872 <connection_handler>:
{
   40872:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (nct_evt->status != 0) {
   40874:	6803      	ldr	r3, [r0, #0]
   40876:	b153      	cbz	r3, 4088e <connection_handler+0x1c>
		evt.type = NRF_CLOUD_EVT_ERROR;
   40878:	23ff      	movs	r3, #255	; 0xff
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   4087a:	4669      	mov	r1, sp
   4087c:	2002      	movs	r0, #2
		evt.type = NRF_CLOUD_EVT_ERROR;
   4087e:	f88d 3000 	strb.w	r3, [sp]
		return 0;
   40882:	2400      	movs	r4, #0
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   40884:	f7e3 fef6 	bl	24674 <nfsm_set_current_state_and_notify>
}
   40888:	4620      	mov	r0, r4
   4088a:	b004      	add	sp, #16
   4088c:	bd10      	pop	{r4, pc}
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   4088e:	2301      	movs	r3, #1
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   40890:	4669      	mov	r1, sp
   40892:	2002      	movs	r0, #2
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   40894:	f88d 3000 	strb.w	r3, [sp]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   40898:	f7e3 feec 	bl	24674 <nfsm_set_current_state_and_notify>
	err = nct_cc_connect();
   4089c:	f7e4 ffd0 	bl	25840 <nct_cc_connect>
	if (err) {
   408a0:	4604      	mov	r4, r0
   408a2:	2800      	cmp	r0, #0
   408a4:	d1f0      	bne.n	40888 <connection_handler+0x16>
	nfsm_set_current_state_and_notify(STATE_CC_CONNECTING, NULL);
   408a6:	4601      	mov	r1, r0
   408a8:	2003      	movs	r0, #3
   408aa:	f7e3 fee3 	bl	24674 <nfsm_set_current_state_and_notify>
	return 0;
   408ae:	e7eb      	b.n	40888 <connection_handler+0x16>

000408b0 <dc_disconnection_handler>:
   408b0:	2000      	movs	r0, #0
   408b2:	4770      	bx	lr

000408b4 <dc_tx_ack_handler>:
   408b4:	2000      	movs	r0, #0
   408b6:	4770      	bx	lr

000408b8 <nfsm_init>:
}
   408b8:	2000      	movs	r0, #0
   408ba:	4770      	bx	lr

000408bc <nct_dc_send>:
	return dc_send(dc_data, MQTT_QOS_1_AT_LEAST_ONCE);
   408bc:	2101      	movs	r1, #1
   408be:	f7e4 bb83 	b.w	24fc8 <dc_send>

000408c2 <nct_dc_stream>:
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
   408c2:	2100      	movs	r1, #0
   408c4:	f7e4 bb80 	b.w	24fc8 <dc_send>

000408c8 <error_evt_send.isra.1>:
static int error_evt_send(const struct download_client *dl, int error)
   408c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct download_client_evt evt = {
   408ca:	2300      	movs	r3, #0
   408cc:	9301      	str	r3, [sp, #4]
   408ce:	9303      	str	r3, [sp, #12]
   408d0:	2301      	movs	r3, #1
		.error = -error
   408d2:	4249      	negs	r1, r1
	const struct download_client_evt evt = {
   408d4:	f88d 3004 	strb.w	r3, [sp, #4]
   408d8:	9102      	str	r1, [sp, #8]
	return dl->callback(&evt);
   408da:	6803      	ldr	r3, [r0, #0]
   408dc:	a801      	add	r0, sp, #4
   408de:	4798      	blx	r3
}
   408e0:	b005      	add	sp, #20
   408e2:	f85d fb04 	ldr.w	pc, [sp], #4

000408e6 <download_client_file_size_get>:
	k_thread_resume(client->tid);
}

int download_client_file_size_get(struct download_client *client, size_t *size)
{
	if (!client || !size) {
   408e6:	b130      	cbz	r0, 408f6 <download_client_file_size_get+0x10>
   408e8:	b129      	cbz	r1, 408f6 <download_client_file_size_get+0x10>
		return -EINVAL;
	}

	*size = client->file_size;
   408ea:	f241 0308 	movw	r3, #4104	; 0x1008
   408ee:	58c3      	ldr	r3, [r0, r3]

	return 0;
   408f0:	2000      	movs	r0, #0
	*size = client->file_size;
   408f2:	600b      	str	r3, [r1, #0]
	return 0;
   408f4:	4770      	bx	lr
		return -EINVAL;
   408f6:	f06f 0015 	mvn.w	r0, #21
}
   408fa:	4770      	bx	lr

000408fc <aws_jobs_cmp>:

bool aws_jobs_cmp(const char *sub, const char *pub, size_t pub_len,
		 const u8_t *suffix)
{
   408fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   40900:	460c      	mov	r4, r1
   40902:	4690      	mov	r8, r2
   40904:	461d      	mov	r5, r3
	int ret;

	if (sub == NULL || pub == NULL || suffix == NULL ||
   40906:	4606      	mov	r6, r0
   40908:	b328      	cbz	r0, 40956 <aws_jobs_cmp+0x5a>
   4090a:	b331      	cbz	r1, 4095a <aws_jobs_cmp+0x5e>
   4090c:	b33b      	cbz	r3, 4095e <aws_jobs_cmp+0x62>
   4090e:	7803      	ldrb	r3, [r0, #0]
   40910:	b33b      	cbz	r3, 40962 <aws_jobs_cmp+0x66>
	    sub[0] == '\0' || pub[0] == '\0') {
   40912:	780b      	ldrb	r3, [r1, #0]
   40914:	b32b      	cbz	r3, 40962 <aws_jobs_cmp+0x66>
		return false;
	}

	size_t sub_len = strlen(sub);
   40916:	f7d9 fb35 	bl	19f84 <strlen>
   4091a:	4607      	mov	r7, r0
	size_t suff_len = strlen(suffix);
   4091c:	4628      	mov	r0, r5
   4091e:	f7d9 fb31 	bl	19f84 <strlen>

	if (sub[sub_len - 1] == '#') {
   40922:	19f3      	adds	r3, r6, r7
   40924:	f813 3c01 	ldrb.w	r3, [r3, #-1]
	size_t suff_len = strlen(suffix);
   40928:	4681      	mov	r9, r0
	if (sub[sub_len - 1] == '#') {
   4092a:	2b23      	cmp	r3, #35	; 0x23
		/* Strip trailing '/#' */
		sub_len -= 2;
   4092c:	bf08      	it	eq
   4092e:	3f02      	subeq	r7, #2
	}

	ret = strncmp(sub, pub, sub_len);
   40930:	463a      	mov	r2, r7
   40932:	4621      	mov	r1, r4
   40934:	4630      	mov	r0, r6
   40936:	f000 fbf0 	bl	4111a <strncmp>
	if (ret == 0 && suff_len > 0) {
   4093a:	b948      	cbnz	r0, 40950 <aws_jobs_cmp+0x54>
   4093c:	f1b9 0f00 	cmp.w	r9, #0
   40940:	d006      	beq.n	40950 <aws_jobs_cmp+0x54>
		/* Everything up until suffix is correct, check suffix */
		return strncmp(&pub[pub_len - suff_len], suffix, suff_len) == 0;
   40942:	eba8 0009 	sub.w	r0, r8, r9
   40946:	464a      	mov	r2, r9
   40948:	4629      	mov	r1, r5
   4094a:	4420      	add	r0, r4
   4094c:	f000 fbe5 	bl	4111a <strncmp>
	} else {
		return ret == 0;
   40950:	fab0 f080 	clz	r0, r0
   40954:	0940      	lsrs	r0, r0, #5
	}
}
   40956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return false;
   4095a:	4608      	mov	r0, r1
   4095c:	e7fb      	b.n	40956 <aws_jobs_cmp+0x5a>
   4095e:	4618      	mov	r0, r3
   40960:	e7f9      	b.n	40956 <aws_jobs_cmp+0x5a>
   40962:	4618      	mov	r0, r3
   40964:	e7f7      	b.n	40956 <aws_jobs_cmp+0x5a>

00040966 <strncpy_nullterm>:
{
   40966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   40968:	4604      	mov	r4, r0
	size_t len = strlen(src) + 1;
   4096a:	4608      	mov	r0, r1
{
   4096c:	4615      	mov	r5, r2
   4096e:	460f      	mov	r7, r1
	size_t len = strlen(src) + 1;
   40970:	f7d9 fb08 	bl	19f84 <strlen>
   40974:	1c46      	adds	r6, r0, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   40976:	42ae      	cmp	r6, r5
   40978:	4632      	mov	r2, r6
   4097a:	4620      	mov	r0, r4
   4097c:	bf28      	it	cs
   4097e:	462a      	movcs	r2, r5
   40980:	4639      	mov	r1, r7
   40982:	f000 f9ed 	bl	40d60 <memcpy>
	if (len > maxlen) {
   40986:	42ae      	cmp	r6, r5
		dst[maxlen - 1] = '\0';
   40988:	bf82      	ittt	hi
   4098a:	2300      	movhi	r3, #0
   4098c:	1964      	addhi	r4, r4, r5
   4098e:	f804 3c01 	strbhi.w	r3, [r4, #-1]
}
   40992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00040994 <response_is_valid>:
{
   40994:	b570      	push	{r4, r5, r6, lr}
   40996:	4606      	mov	r6, r0
	if ((response_len < strlen(check)) ||
   40998:	4610      	mov	r0, r2
{
   4099a:	460d      	mov	r5, r1
   4099c:	4614      	mov	r4, r2
	if ((response_len < strlen(check)) ||
   4099e:	f7d9 faf1 	bl	19f84 <strlen>
   409a2:	42a8      	cmp	r0, r5
   409a4:	d808      	bhi.n	409b8 <response_is_valid+0x24>
	    (memcmp(response, check, response_len) != 0)) {
   409a6:	462a      	mov	r2, r5
   409a8:	4621      	mov	r1, r4
   409aa:	4630      	mov	r0, r6
   409ac:	f000 f9ca 	bl	40d44 <memcmp>
	if ((response_len < strlen(check)) ||
   409b0:	fab0 f080 	clz	r0, r0
   409b4:	0940      	lsrs	r0, r0, #5
}
   409b6:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   409b8:	2000      	movs	r0, #0
   409ba:	e7fc      	b.n	409b6 <response_is_valid+0x22>

000409bc <lte_lc_init_and_connect>:
{
   409bc:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   409be:	f7e7 fce3 	bl	28388 <w_lte_lc_init>
	if (ret) {
   409c2:	b918      	cbnz	r0, 409cc <lte_lc_init_and_connect+0x10>
}
   409c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect();
   409c8:	f7e7 bde8 	b.w	2859c <w_lte_lc_connect>
}
   409cc:	bd08      	pop	{r3, pc}

000409ce <sensor_sim_attr_set>:
}
   409ce:	2000      	movs	r0, #0
   409d0:	4770      	bx	lr

000409d2 <sensor_sim_thread>:
{
   409d2:	b570      	push	{r4, r5, r6, lr}
   409d4:	4604      	mov	r4, r0
	struct sensor_sim_data *drv_data = dev->driver_data;
   409d6:	6885      	ldr	r5, [r0, #8]
			drv_data->drdy_handler(dev, &drv_data->drdy_trigger);
   409d8:	f105 0634 	add.w	r6, r5, #52	; 0x34
	return z_impl_k_sleep(ms);
   409dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   409e0:	f000 f8a9 	bl	40b36 <z_impl_k_sleep>
		if (drv_data->drdy_handler != NULL) {
   409e4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   409e6:	2b00      	cmp	r3, #0
   409e8:	d0f8      	beq.n	409dc <sensor_sim_thread+0xa>
			drv_data->drdy_handler(dev, &drv_data->drdy_trigger);
   409ea:	4631      	mov	r1, r6
   409ec:	4620      	mov	r0, r4
   409ee:	4798      	blx	r3
   409f0:	e7f4      	b.n	409dc <sensor_sim_thread+0xa>

000409f2 <sample_fetch>:
}
   409f2:	2000      	movs	r0, #0
   409f4:	4770      	bx	lr

000409f6 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   409f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   409fa:	4770      	bx	lr

000409fc <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   409fc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   40a00:	4770      	bx	lr

00040a02 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   40a02:	f44f 7080 	mov.w	r0, #256	; 0x100
   40a06:	4770      	bx	lr

00040a08 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   40a08:	f7fe b92f 	b.w	3ec6a <z_clock_idle_exit>

00040a0c <k_mem_pool_malloc>:
{
   40a0c:	b507      	push	{r0, r1, r2, lr}
   40a0e:	2204      	movs	r2, #4
   40a10:	188a      	adds	r2, r1, r2
   40a12:	d204      	bcs.n	40a1e <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   40a14:	2300      	movs	r3, #0
   40a16:	4669      	mov	r1, sp
   40a18:	f7f7 ff10 	bl	3883c <k_mem_pool_alloc>
   40a1c:	b118      	cbz	r0, 40a26 <k_mem_pool_malloc+0x1a>
		return NULL;
   40a1e:	2000      	movs	r0, #0
}
   40a20:	b003      	add	sp, #12
   40a22:	f85d fb04 	ldr.w	pc, [sp], #4
   40a26:	e9dd 3200 	ldrd	r3, r2, [sp]
   40a2a:	601a      	str	r2, [r3, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   40a2c:	9800      	ldr	r0, [sp, #0]
   40a2e:	3004      	adds	r0, #4
   40a30:	e7f6      	b.n	40a20 <k_mem_pool_malloc+0x14>

00040a32 <k_free>:
	if (ptr != NULL) {
   40a32:	b110      	cbz	r0, 40a3a <k_free+0x8>
		k_mem_pool_free_id(ptr);
   40a34:	3804      	subs	r0, #4
   40a36:	f7f7 bf71 	b.w	3891c <k_mem_pool_free_id>
}
   40a3a:	4770      	bx	lr

00040a3c <k_calloc>:
{
   40a3c:	b538      	push	{r3, r4, r5, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   40a3e:	fb01 f400 	mul.w	r4, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   40a42:	b118      	cbz	r0, 40a4c <k_calloc+0x10>
   40a44:	fbb4 f0f0 	udiv	r0, r4, r0
   40a48:	4281      	cmp	r1, r0
   40a4a:	d10a      	bne.n	40a62 <k_calloc+0x26>
	ret = k_malloc(bounds);
   40a4c:	4620      	mov	r0, r4
   40a4e:	f7f7 ffc1 	bl	389d4 <k_malloc>
	if (ret != NULL) {
   40a52:	4605      	mov	r5, r0
   40a54:	b118      	cbz	r0, 40a5e <k_calloc+0x22>
__ssp_bos_icheck3(memset, void *, int)
   40a56:	4622      	mov	r2, r4
   40a58:	2100      	movs	r1, #0
   40a5a:	f000 f9a1 	bl	40da0 <memset>
}
   40a5e:	4628      	mov	r0, r5
   40a60:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   40a62:	2500      	movs	r5, #0
   40a64:	e7fb      	b.n	40a5e <k_calloc+0x22>

00040a66 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   40a66:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   40a68:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   40a6c:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   40a70:	4770      	bx	lr

00040a72 <z_queue_node_peek>:
{
   40a72:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   40a74:	4604      	mov	r4, r0
   40a76:	b130      	cbz	r0, 40a86 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   40a78:	6802      	ldr	r2, [r0, #0]
   40a7a:	0793      	lsls	r3, r2, #30
   40a7c:	d003      	beq.n	40a86 <z_queue_node_peek+0x14>
		ret = anode->data;
   40a7e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   40a80:	b109      	cbz	r1, 40a86 <z_queue_node_peek+0x14>
			k_free(anode);
   40a82:	f7ff ffd6 	bl	40a32 <k_free>
}
   40a86:	4620      	mov	r0, r4
   40a88:	bd10      	pop	{r4, pc}

00040a8a <z_impl_k_queue_init>:
	list->head = NULL;
   40a8a:	2300      	movs	r3, #0
	list->tail = NULL;
   40a8c:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   40a90:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   40a92:	f100 030c 	add.w	r3, r0, #12
   40a96:	e9c0 3303 	strd	r3, r3, [r0, #12]
}
   40a9a:	4770      	bx	lr

00040a9c <k_queue_append>:
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   40a9c:	460a      	mov	r2, r1
   40a9e:	2300      	movs	r3, #0
   40aa0:	6841      	ldr	r1, [r0, #4]
   40aa2:	f7f8 bab7 	b.w	39014 <queue_insert>

00040aa6 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   40aa6:	7b43      	ldrb	r3, [r0, #13]
   40aa8:	06db      	lsls	r3, r3, #27
   40aaa:	bf03      	ittte	eq
   40aac:	6980      	ldreq	r0, [r0, #24]
   40aae:	fab0 f080 	clzeq	r0, r0
   40ab2:	0940      	lsreq	r0, r0, #5
   40ab4:	2000      	movne	r0, #0
}
   40ab6:	4770      	bx	lr

00040ab8 <z_is_t1_higher_prio_than_t2>:
	if (t1->base.prio < t2->base.prio) {
   40ab8:	f990 000e 	ldrsb.w	r0, [r0, #14]
   40abc:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   40ac0:	4298      	cmp	r0, r3
   40ac2:	bfac      	ite	ge
   40ac4:	2000      	movge	r0, #0
   40ac6:	2001      	movlt	r0, #1
   40ac8:	4770      	bx	lr

00040aca <z_reschedule_irqlock>:
{
   40aca:	b508      	push	{r3, lr}
	return z_arch_irq_unlocked(key) && !z_arch_is_in_isr();
   40acc:	4602      	mov	r2, r0
   40ace:	b938      	cbnz	r0, 40ae0 <z_reschedule_irqlock+0x16>
   40ad0:	f7f8 fc00 	bl	392d4 <resched.part.15>
	if (resched(key)) {
   40ad4:	b120      	cbz	r0, 40ae0 <z_reschedule_irqlock+0x16>
}
   40ad6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   40ada:	4610      	mov	r0, r2
   40adc:	f7df b844 	b.w	1fb68 <z_arch_swap>
   40ae0:	f382 8811 	msr	BASEPRI, r2
   40ae4:	f3bf 8f6f 	isb	sy
   40ae8:	bd08      	pop	{r3, pc}

00040aea <z_reschedule_unlocked>:
	__asm__ volatile(
   40aea:	f04f 0320 	mov.w	r3, #32
   40aee:	f3ef 8011 	mrs	r0, BASEPRI
   40af2:	f383 8811 	msr	BASEPRI, r3
   40af6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(z_arch_irq_lock());
   40afa:	f7ff bfe6 	b.w	40aca <z_reschedule_irqlock>

00040afe <z_priq_dumb_best>:
	return list->head == list;
   40afe:	6803      	ldr	r3, [r0, #0]
}
   40b00:	4298      	cmp	r0, r3
   40b02:	bf14      	ite	ne
   40b04:	4618      	movne	r0, r3
   40b06:	2000      	moveq	r0, #0
   40b08:	4770      	bx	lr

00040b0a <z_unpend_all>:
{
   40b0a:	b570      	push	{r4, r5, r6, lr}
   40b0c:	4606      	mov	r6, r0
	int need_sched = 0;
   40b0e:	2500      	movs	r5, #0
   40b10:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   40b12:	42a6      	cmp	r6, r4
   40b14:	d000      	beq.n	40b18 <z_unpend_all+0xe>
	while ((th = z_waitq_head(wait_q)) != NULL) {
   40b16:	b90c      	cbnz	r4, 40b1c <z_unpend_all+0x12>
}
   40b18:	4628      	mov	r0, r5
   40b1a:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(th);
   40b1c:	4620      	mov	r0, r4
   40b1e:	f7f8 fdaf 	bl	39680 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   40b22:	4620      	mov	r0, r4
   40b24:	f7ff ffbf 	bl	40aa6 <z_is_thread_ready>
		need_sched = 1;
   40b28:	2501      	movs	r5, #1
   40b2a:	2800      	cmp	r0, #0
   40b2c:	d0f0      	beq.n	40b10 <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   40b2e:	4620      	mov	r0, r4
   40b30:	f7f8 feb2 	bl	39898 <z_add_thread_to_ready_q>
   40b34:	e7ec      	b.n	40b10 <z_unpend_all+0x6>

00040b36 <z_impl_k_sleep>:
{
   40b36:	b538      	push	{r3, r4, r5, lr}
   40b38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   40b3c:	f240 34e7 	movw	r4, #999	; 0x3e7
   40b40:	2500      	movs	r5, #0
   40b42:	fbc1 4500 	smlal	r4, r5, r1, r0
   40b46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   40b4a:	2300      	movs	r3, #0
   40b4c:	4620      	mov	r0, r4
   40b4e:	4629      	mov	r1, r5
   40b50:	f7d8 f8e4 	bl	18d1c <__aeabi_ldivmod>
	ticks = z_tick_sleep(ticks);
   40b54:	f7f9 fb54 	bl	3a200 <z_tick_sleep>
}

static inline u64_t __ticks_to_ms(s64_t ticks)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	return (u64_t)ticks * MSEC_PER_SEC /
   40b58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   40b5c:	fb80 2302 	smull	r2, r3, r0, r2
   40b60:	0bd0      	lsrs	r0, r2, #15
}
   40b62:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   40b66:	bd38      	pop	{r3, r4, r5, pc}

00040b68 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   40b68:	7b43      	ldrb	r3, [r0, #13]
   40b6a:	06db      	lsls	r3, r3, #27
   40b6c:	bf03      	ittte	eq
   40b6e:	6980      	ldreq	r0, [r0, #24]
   40b70:	fab0 f080 	clzeq	r0, r0
   40b74:	0940      	lsreq	r0, r0, #5
   40b76:	2000      	movne	r0, #0
}
   40b78:	4770      	bx	lr

00040b7a <z_impl_k_thread_name_set>:
}
   40b7a:	f06f 0057 	mvn.w	r0, #87	; 0x57
   40b7e:	4770      	bx	lr

00040b80 <k_thread_name_get>:
}
   40b80:	2000      	movs	r0, #0
   40b82:	4770      	bx	lr

00040b84 <z_thread_single_suspend>:
{
   40b84:	b510      	push	{r4, lr}
   40b86:	4604      	mov	r4, r0
	if (z_is_thread_ready(thread)) {
   40b88:	f7ff ffee 	bl	40b68 <z_is_thread_ready>
   40b8c:	b110      	cbz	r0, 40b94 <z_thread_single_suspend+0x10>
		z_remove_thread_from_ready_q(thread);
   40b8e:	4620      	mov	r0, r4
   40b90:	f7f9 f82a 	bl	39be8 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   40b94:	7b63      	ldrb	r3, [r4, #13]
   40b96:	f043 0310 	orr.w	r3, r3, #16
   40b9a:	7363      	strb	r3, [r4, #13]
}
   40b9c:	bd10      	pop	{r4, pc}

00040b9e <z_thread_single_resume>:
{
   40b9e:	b508      	push	{r3, lr}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   40ba0:	7b43      	ldrb	r3, [r0, #13]
   40ba2:	4602      	mov	r2, r0
   40ba4:	f023 0310 	bic.w	r3, r3, #16
   40ba8:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
   40baa:	f7ff ffdd 	bl	40b68 <z_is_thread_ready>
   40bae:	b120      	cbz	r0, 40bba <z_thread_single_resume+0x1c>
}
   40bb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_add_thread_to_ready_q(thread);
   40bb4:	4610      	mov	r0, r2
   40bb6:	f7f8 be6f 	b.w	39898 <z_add_thread_to_ready_q>
   40bba:	bd08      	pop	{r3, pc}

00040bbc <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   40bbc:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   40bbe:	b510      	push	{r4, lr}
   40bc0:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   40bc2:	b103      	cbz	r3, 40bc6 <z_thread_single_abort+0xa>
		thread->fn_abort();
   40bc4:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
   40bc6:	4620      	mov	r0, r4
   40bc8:	f7ff ffce 	bl	40b68 <z_is_thread_ready>
   40bcc:	b138      	cbz	r0, 40bde <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
   40bce:	4620      	mov	r0, r4
   40bd0:	f7f9 f80a 	bl	39be8 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
   40bd4:	7b63      	ldrb	r3, [r4, #13]
   40bd6:	f043 0308 	orr.w	r3, r3, #8
   40bda:	7363      	strb	r3, [r4, #13]
}
   40bdc:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
   40bde:	7b63      	ldrb	r3, [r4, #13]
   40be0:	079b      	lsls	r3, r3, #30
   40be2:	d502      	bpl.n	40bea <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
   40be4:	4620      	mov	r0, r4
   40be6:	f7f8 fc13 	bl	39410 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
   40bea:	69a3      	ldr	r3, [r4, #24]
   40bec:	2b00      	cmp	r3, #0
   40bee:	d0f1      	beq.n	40bd4 <z_thread_single_abort+0x18>
	return z_abort_timeout(&thread->base.timeout);
   40bf0:	f104 0018 	add.w	r0, r4, #24
   40bf4:	f7fa f900 	bl	3adf8 <z_abort_timeout>
   40bf8:	e7ec      	b.n	40bd4 <z_thread_single_abort+0x18>

00040bfa <z_init_thread_base>:
	thread_base->user_options = (u8_t)options;
   40bfa:	7303      	strb	r3, [r0, #12]
	thread_base->sched_locked = 0U;
   40bfc:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   40bfe:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   40c00:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   40c02:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
   40c04:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
   40c08:	4770      	bx	lr

00040c0a <k_work_submit_to_queue>:
{
   40c0a:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   40c0c:	f101 0308 	add.w	r3, r1, #8
   40c10:	e8d3 2fef 	ldaex	r2, [r3]
   40c14:	f042 0c01 	orr.w	ip, r2, #1
   40c18:	e8c3 cfee 	stlex	lr, ip, [r3]
   40c1c:	f1be 0f00 	cmp.w	lr, #0
   40c20:	d1f6      	bne.n	40c10 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   40c22:	07d3      	lsls	r3, r2, #31
   40c24:	d403      	bmi.n	40c2e <k_work_submit_to_queue+0x24>
}
   40c26:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   40c2a:	f7ff bf37 	b.w	40a9c <k_queue_append>
}
   40c2e:	f85d fb04 	ldr.w	pc, [sp], #4

00040c32 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   40c32:	f1a0 010c 	sub.w	r1, r0, #12
   40c36:	6900      	ldr	r0, [r0, #16]
   40c38:	f7ff bfe7 	b.w	40c0a <k_work_submit_to_queue>

00040c3c <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   40c3c:	2300      	movs	r3, #0
   40c3e:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   40c42:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   40c46:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   40c48:	61c3      	str	r3, [r0, #28]
}
   40c4a:	4770      	bx	lr

00040c4c <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   40c4c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   40c4e:	f7fa fa61 	bl	3b114 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   40c52:	bd08      	pop	{r3, pc}

00040c54 <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   40c54:	b510      	push	{r4, lr}
	return __ticks_to_ms(z_tick_get());
   40c56:	f7fa fa5d 	bl	3b114 <z_tick_get>
   40c5a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   40c5e:	fba0 2304 	umull	r2, r3, r0, r4
   40c62:	fb04 3301 	mla	r3, r4, r1, r3
   40c66:	0bd0      	lsrs	r0, r2, #15
}
   40c68:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   40c6c:	0bd9      	lsrs	r1, r3, #15
   40c6e:	bd10      	pop	{r4, pc}

00040c70 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   40c70:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   40c72:	6884      	ldr	r4, [r0, #8]
{
   40c74:	4605      	mov	r5, r0
   40c76:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   40c78:	b19c      	cbz	r4, 40ca2 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   40c7a:	68a3      	ldr	r3, [r4, #8]
   40c7c:	b95b      	cbnz	r3, 40c96 <signal_poll_event+0x26>
	int retcode = 0;
   40c7e:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   40c80:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   40c82:	2300      	movs	r3, #0
   40c84:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   40c86:	68eb      	ldr	r3, [r5, #12]
   40c88:	f3c3 3204 	ubfx	r2, r3, #12, #5
   40c8c:	4316      	orrs	r6, r2
   40c8e:	f366 3310 	bfi	r3, r6, #12, #5
   40c92:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   40c94:	e004      	b.n	40ca0 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   40c96:	4798      	blx	r3
		poller->is_polling = false;
   40c98:	2300      	movs	r3, #0
		if (retcode < 0) {
   40c9a:	2800      	cmp	r0, #0
		poller->is_polling = false;
   40c9c:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   40c9e:	daf0      	bge.n	40c82 <signal_poll_event+0x12>
}
   40ca0:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   40ca2:	4620      	mov	r0, r4
   40ca4:	e7ed      	b.n	40c82 <signal_poll_event+0x12>

00040ca6 <add_event>:
{
   40ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   40ca8:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   40caa:	e9d0 2300 	ldrd	r2, r3, [r0]
   40cae:	4290      	cmp	r0, r2
   40cb0:	4604      	mov	r4, r0
   40cb2:	460d      	mov	r5, r1
   40cb4:	d106      	bne.n	40cc4 <add_event+0x1e>
	node->prev = list->tail;
   40cb6:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   40cb8:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   40cba:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   40cbc:	6863      	ldr	r3, [r4, #4]
   40cbe:	601d      	str	r5, [r3, #0]
	list->tail = node;
   40cc0:	6065      	str	r5, [r4, #4]
}
   40cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   40cc4:	2b00      	cmp	r3, #0
   40cc6:	d0f6      	beq.n	40cb6 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   40cc8:	689b      	ldr	r3, [r3, #8]
   40cca:	6879      	ldr	r1, [r7, #4]
   40ccc:	6858      	ldr	r0, [r3, #4]
   40cce:	f7ff fef3 	bl	40ab8 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   40cd2:	2800      	cmp	r0, #0
   40cd4:	d1ef      	bne.n	40cb6 <add_event+0x10>
	return list->head == list;
   40cd6:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   40cd8:	42b4      	cmp	r4, r6
   40cda:	d0ec      	beq.n	40cb6 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   40cdc:	2e00      	cmp	r6, #0
   40cde:	d0ea      	beq.n	40cb6 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   40ce0:	68b3      	ldr	r3, [r6, #8]
   40ce2:	6878      	ldr	r0, [r7, #4]
   40ce4:	6859      	ldr	r1, [r3, #4]
   40ce6:	f7ff fee7 	bl	40ab8 <z_is_t1_higher_prio_than_t2>
   40cea:	b128      	cbz	r0, 40cf8 <add_event+0x52>
	node->prev = successor->prev;
   40cec:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   40cee:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   40cf2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   40cf4:	6075      	str	r5, [r6, #4]
			return;
   40cf6:	e7e4      	b.n	40cc2 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   40cf8:	6863      	ldr	r3, [r4, #4]
   40cfa:	429e      	cmp	r6, r3
   40cfc:	d0db      	beq.n	40cb6 <add_event+0x10>
   40cfe:	6836      	ldr	r6, [r6, #0]
   40d00:	e7ec      	b.n	40cdc <add_event+0x36>

00040d02 <z_handle_obj_poll_events>:
	return list->head == list;
   40d02:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   40d04:	4298      	cmp	r0, r3
   40d06:	d009      	beq.n	40d1c <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   40d08:	e9d3 2000 	ldrd	r2, r0, [r3]
   40d0c:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   40d0e:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   40d10:	2200      	movs	r2, #0
{
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   40d12:	4618      	mov	r0, r3
	node->prev = NULL;
   40d14:	e9c3 2200 	strd	r2, r2, [r3]
   40d18:	f7ff bfaa 	b.w	40c70 <signal_poll_event>
	}
}
   40d1c:	4770      	bx	lr

00040d1e <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   40d1e:	4770      	bx	lr

00040d20 <atoi>:
   40d20:	220a      	movs	r2, #10
   40d22:	2100      	movs	r1, #0
   40d24:	f7fb bf1e 	b.w	3cb64 <strtol>

00040d28 <memchr>:
   40d28:	b2c9      	uxtb	r1, r1
   40d2a:	4402      	add	r2, r0
   40d2c:	b510      	push	{r4, lr}
   40d2e:	4290      	cmp	r0, r2
   40d30:	4603      	mov	r3, r0
   40d32:	d101      	bne.n	40d38 <memchr+0x10>
   40d34:	2300      	movs	r3, #0
   40d36:	e003      	b.n	40d40 <memchr+0x18>
   40d38:	781c      	ldrb	r4, [r3, #0]
   40d3a:	3001      	adds	r0, #1
   40d3c:	428c      	cmp	r4, r1
   40d3e:	d1f6      	bne.n	40d2e <memchr+0x6>
   40d40:	4618      	mov	r0, r3
   40d42:	bd10      	pop	{r4, pc}

00040d44 <memcmp>:
   40d44:	b530      	push	{r4, r5, lr}
   40d46:	3901      	subs	r1, #1
   40d48:	2400      	movs	r4, #0
   40d4a:	42a2      	cmp	r2, r4
   40d4c:	d101      	bne.n	40d52 <memcmp+0xe>
   40d4e:	2000      	movs	r0, #0
   40d50:	e005      	b.n	40d5e <memcmp+0x1a>
   40d52:	5d03      	ldrb	r3, [r0, r4]
   40d54:	3401      	adds	r4, #1
   40d56:	5d0d      	ldrb	r5, [r1, r4]
   40d58:	42ab      	cmp	r3, r5
   40d5a:	d0f6      	beq.n	40d4a <memcmp+0x6>
   40d5c:	1b58      	subs	r0, r3, r5
   40d5e:	bd30      	pop	{r4, r5, pc}

00040d60 <memcpy>:
   40d60:	440a      	add	r2, r1
   40d62:	1e43      	subs	r3, r0, #1
   40d64:	4291      	cmp	r1, r2
   40d66:	d100      	bne.n	40d6a <memcpy+0xa>
   40d68:	4770      	bx	lr
   40d6a:	b510      	push	{r4, lr}
   40d6c:	f811 4b01 	ldrb.w	r4, [r1], #1
   40d70:	4291      	cmp	r1, r2
   40d72:	f803 4f01 	strb.w	r4, [r3, #1]!
   40d76:	d1f9      	bne.n	40d6c <memcpy+0xc>
   40d78:	bd10      	pop	{r4, pc}

00040d7a <__memcpy_chk>:
   40d7a:	429a      	cmp	r2, r3
   40d7c:	b508      	push	{r3, lr}
   40d7e:	d901      	bls.n	40d84 <__memcpy_chk+0xa>
   40d80:	f7fc f878 	bl	3ce74 <__chk_fail>
   40d84:	4281      	cmp	r1, r0
   40d86:	d804      	bhi.n	40d92 <__memcpy_chk+0x18>
   40d88:	188b      	adds	r3, r1, r2
   40d8a:	4298      	cmp	r0, r3
   40d8c:	d3f8      	bcc.n	40d80 <__memcpy_chk+0x6>
   40d8e:	4281      	cmp	r1, r0
   40d90:	d102      	bne.n	40d98 <__memcpy_chk+0x1e>
   40d92:	1883      	adds	r3, r0, r2
   40d94:	4299      	cmp	r1, r3
   40d96:	d3f3      	bcc.n	40d80 <__memcpy_chk+0x6>
   40d98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   40d9c:	f7ff bfe0 	b.w	40d60 <memcpy>

00040da0 <memset>:
   40da0:	4402      	add	r2, r0
   40da2:	4603      	mov	r3, r0
   40da4:	4293      	cmp	r3, r2
   40da6:	d100      	bne.n	40daa <memset+0xa>
   40da8:	4770      	bx	lr
   40daa:	f803 1b01 	strb.w	r1, [r3], #1
   40dae:	e7f9      	b.n	40da4 <memset+0x4>

00040db0 <__sfputc_r>:
   40db0:	6893      	ldr	r3, [r2, #8]
   40db2:	3b01      	subs	r3, #1
   40db4:	2b00      	cmp	r3, #0
   40db6:	6093      	str	r3, [r2, #8]
   40db8:	b410      	push	{r4}
   40dba:	da08      	bge.n	40dce <__sfputc_r+0x1e>
   40dbc:	6994      	ldr	r4, [r2, #24]
   40dbe:	42a3      	cmp	r3, r4
   40dc0:	db01      	blt.n	40dc6 <__sfputc_r+0x16>
   40dc2:	290a      	cmp	r1, #10
   40dc4:	d103      	bne.n	40dce <__sfputc_r+0x1e>
   40dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
   40dca:	f7fb bf81 	b.w	3ccd0 <__swbuf_r>
   40dce:	6813      	ldr	r3, [r2, #0]
   40dd0:	1c58      	adds	r0, r3, #1
   40dd2:	6010      	str	r0, [r2, #0]
   40dd4:	4608      	mov	r0, r1
   40dd6:	7019      	strb	r1, [r3, #0]
   40dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
   40ddc:	4770      	bx	lr

00040dde <__sfputs_r>:
   40dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   40de0:	4606      	mov	r6, r0
   40de2:	460f      	mov	r7, r1
   40de4:	4614      	mov	r4, r2
   40de6:	18d5      	adds	r5, r2, r3
   40de8:	42ac      	cmp	r4, r5
   40dea:	d101      	bne.n	40df0 <__sfputs_r+0x12>
   40dec:	2000      	movs	r0, #0
   40dee:	e007      	b.n	40e00 <__sfputs_r+0x22>
   40df0:	463a      	mov	r2, r7
   40df2:	f814 1b01 	ldrb.w	r1, [r4], #1
   40df6:	4630      	mov	r0, r6
   40df8:	f7ff ffda 	bl	40db0 <__sfputc_r>
   40dfc:	1c43      	adds	r3, r0, #1
   40dfe:	d1f3      	bne.n	40de8 <__sfputs_r+0xa>
   40e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00040e02 <__cvt>:
   40e02:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   40e06:	ec55 4b10 	vmov	r4, r5, d0
   40e0a:	2d00      	cmp	r5, #0
   40e0c:	460e      	mov	r6, r1
   40e0e:	4691      	mov	r9, r2
   40e10:	4619      	mov	r1, r3
   40e12:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   40e16:	f04f 0200 	mov.w	r2, #0
   40e1a:	da03      	bge.n	40e24 <__cvt+0x22>
   40e1c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   40e20:	222d      	movs	r2, #45	; 0x2d
   40e22:	461d      	mov	r5, r3
   40e24:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   40e26:	700a      	strb	r2, [r1, #0]
   40e28:	f027 0720 	bic.w	r7, r7, #32
   40e2c:	2f46      	cmp	r7, #70	; 0x46
   40e2e:	d004      	beq.n	40e3a <__cvt+0x38>
   40e30:	2f45      	cmp	r7, #69	; 0x45
   40e32:	d100      	bne.n	40e36 <__cvt+0x34>
   40e34:	3601      	adds	r6, #1
   40e36:	2102      	movs	r1, #2
   40e38:	e000      	b.n	40e3c <__cvt+0x3a>
   40e3a:	2103      	movs	r1, #3
   40e3c:	ab03      	add	r3, sp, #12
   40e3e:	4632      	mov	r2, r6
   40e40:	9301      	str	r3, [sp, #4]
   40e42:	ab02      	add	r3, sp, #8
   40e44:	ec45 4b10 	vmov	d0, r4, r5
   40e48:	9300      	str	r3, [sp, #0]
   40e4a:	4653      	mov	r3, sl
   40e4c:	f7da fa00 	bl	1b250 <_dtoa_r>
   40e50:	2f47      	cmp	r7, #71	; 0x47
   40e52:	4680      	mov	r8, r0
   40e54:	d102      	bne.n	40e5c <__cvt+0x5a>
   40e56:	f019 0f01 	tst.w	r9, #1
   40e5a:	d022      	beq.n	40ea2 <__cvt+0xa0>
   40e5c:	2f46      	cmp	r7, #70	; 0x46
   40e5e:	eb08 0906 	add.w	r9, r8, r6
   40e62:	d111      	bne.n	40e88 <__cvt+0x86>
   40e64:	f898 3000 	ldrb.w	r3, [r8]
   40e68:	2b30      	cmp	r3, #48	; 0x30
   40e6a:	d10a      	bne.n	40e82 <__cvt+0x80>
   40e6c:	2200      	movs	r2, #0
   40e6e:	2300      	movs	r3, #0
   40e70:	4620      	mov	r0, r4
   40e72:	4629      	mov	r1, r5
   40e74:	f7d7 fef8 	bl	18c68 <__aeabi_dcmpeq>
   40e78:	b918      	cbnz	r0, 40e82 <__cvt+0x80>
   40e7a:	f1c6 0601 	rsb	r6, r6, #1
   40e7e:	f8ca 6000 	str.w	r6, [sl]
   40e82:	f8da 3000 	ldr.w	r3, [sl]
   40e86:	4499      	add	r9, r3
   40e88:	2200      	movs	r2, #0
   40e8a:	2300      	movs	r3, #0
   40e8c:	4620      	mov	r0, r4
   40e8e:	4629      	mov	r1, r5
   40e90:	f7d7 feea 	bl	18c68 <__aeabi_dcmpeq>
   40e94:	b108      	cbz	r0, 40e9a <__cvt+0x98>
   40e96:	f8cd 900c 	str.w	r9, [sp, #12]
   40e9a:	2230      	movs	r2, #48	; 0x30
   40e9c:	9b03      	ldr	r3, [sp, #12]
   40e9e:	454b      	cmp	r3, r9
   40ea0:	d308      	bcc.n	40eb4 <__cvt+0xb2>
   40ea2:	9b03      	ldr	r3, [sp, #12]
   40ea4:	4640      	mov	r0, r8
   40ea6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   40ea8:	eba3 0308 	sub.w	r3, r3, r8
   40eac:	6013      	str	r3, [r2, #0]
   40eae:	b004      	add	sp, #16
   40eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   40eb4:	1c59      	adds	r1, r3, #1
   40eb6:	9103      	str	r1, [sp, #12]
   40eb8:	701a      	strb	r2, [r3, #0]
   40eba:	e7ef      	b.n	40e9c <__cvt+0x9a>

00040ebc <__exponent>:
   40ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   40ebe:	2900      	cmp	r1, #0
   40ec0:	7002      	strb	r2, [r0, #0]
   40ec2:	bfba      	itte	lt
   40ec4:	4249      	neglt	r1, r1
   40ec6:	232d      	movlt	r3, #45	; 0x2d
   40ec8:	232b      	movge	r3, #43	; 0x2b
   40eca:	2909      	cmp	r1, #9
   40ecc:	7043      	strb	r3, [r0, #1]
   40ece:	dd22      	ble.n	40f16 <__exponent+0x5a>
   40ed0:	f10d 0307 	add.w	r3, sp, #7
   40ed4:	260a      	movs	r6, #10
   40ed6:	461f      	mov	r7, r3
   40ed8:	2963      	cmp	r1, #99	; 0x63
   40eda:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
   40ede:	fb91 f2f6 	sdiv	r2, r1, r6
   40ee2:	fb06 1412 	mls	r4, r6, r2, r1
   40ee6:	f104 0430 	add.w	r4, r4, #48	; 0x30
   40eea:	f803 4c01 	strb.w	r4, [r3, #-1]
   40eee:	dc0a      	bgt.n	40f06 <__exponent+0x4a>
   40ef0:	3230      	adds	r2, #48	; 0x30
   40ef2:	3b02      	subs	r3, #2
   40ef4:	f805 2c01 	strb.w	r2, [r5, #-1]
   40ef8:	1c82      	adds	r2, r0, #2
   40efa:	42bb      	cmp	r3, r7
   40efc:	4614      	mov	r4, r2
   40efe:	d305      	bcc.n	40f0c <__exponent+0x50>
   40f00:	1a20      	subs	r0, r4, r0
   40f02:	b003      	add	sp, #12
   40f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   40f06:	462b      	mov	r3, r5
   40f08:	4611      	mov	r1, r2
   40f0a:	e7e5      	b.n	40ed8 <__exponent+0x1c>
   40f0c:	f813 1b01 	ldrb.w	r1, [r3], #1
   40f10:	f802 1b01 	strb.w	r1, [r2], #1
   40f14:	e7f1      	b.n	40efa <__exponent+0x3e>
   40f16:	2330      	movs	r3, #48	; 0x30
   40f18:	1d04      	adds	r4, r0, #4
   40f1a:	4419      	add	r1, r3
   40f1c:	7083      	strb	r3, [r0, #2]
   40f1e:	70c1      	strb	r1, [r0, #3]
   40f20:	e7ee      	b.n	40f00 <__exponent+0x44>

00040f22 <_printf_common>:
   40f22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   40f26:	4691      	mov	r9, r2
   40f28:	461f      	mov	r7, r3
   40f2a:	688a      	ldr	r2, [r1, #8]
   40f2c:	4606      	mov	r6, r0
   40f2e:	690b      	ldr	r3, [r1, #16]
   40f30:	460c      	mov	r4, r1
   40f32:	f8dd 8020 	ldr.w	r8, [sp, #32]
   40f36:	4293      	cmp	r3, r2
   40f38:	bfb8      	it	lt
   40f3a:	4613      	movlt	r3, r2
   40f3c:	f8c9 3000 	str.w	r3, [r9]
   40f40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   40f44:	b112      	cbz	r2, 40f4c <_printf_common+0x2a>
   40f46:	3301      	adds	r3, #1
   40f48:	f8c9 3000 	str.w	r3, [r9]
   40f4c:	6823      	ldr	r3, [r4, #0]
   40f4e:	0699      	lsls	r1, r3, #26
   40f50:	bf42      	ittt	mi
   40f52:	f8d9 3000 	ldrmi.w	r3, [r9]
   40f56:	3302      	addmi	r3, #2
   40f58:	f8c9 3000 	strmi.w	r3, [r9]
   40f5c:	6825      	ldr	r5, [r4, #0]
   40f5e:	f015 0506 	ands.w	r5, r5, #6
   40f62:	d107      	bne.n	40f74 <_printf_common+0x52>
   40f64:	f104 0a19 	add.w	sl, r4, #25
   40f68:	68e3      	ldr	r3, [r4, #12]
   40f6a:	f8d9 2000 	ldr.w	r2, [r9]
   40f6e:	1a9b      	subs	r3, r3, r2
   40f70:	42ab      	cmp	r3, r5
   40f72:	dc2b      	bgt.n	40fcc <_printf_common+0xaa>
   40f74:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   40f78:	6822      	ldr	r2, [r4, #0]
   40f7a:	3300      	adds	r3, #0
   40f7c:	bf18      	it	ne
   40f7e:	2301      	movne	r3, #1
   40f80:	0692      	lsls	r2, r2, #26
   40f82:	d430      	bmi.n	40fe6 <_printf_common+0xc4>
   40f84:	f104 0243 	add.w	r2, r4, #67	; 0x43
   40f88:	4639      	mov	r1, r7
   40f8a:	4630      	mov	r0, r6
   40f8c:	47c0      	blx	r8
   40f8e:	3001      	adds	r0, #1
   40f90:	d023      	beq.n	40fda <_printf_common+0xb8>
   40f92:	6823      	ldr	r3, [r4, #0]
   40f94:	341a      	adds	r4, #26
   40f96:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   40f9a:	f003 0306 	and.w	r3, r3, #6
   40f9e:	f8d9 2000 	ldr.w	r2, [r9]
   40fa2:	f04f 0900 	mov.w	r9, #0
   40fa6:	2b04      	cmp	r3, #4
   40fa8:	f854 3c12 	ldr.w	r3, [r4, #-18]
   40fac:	bf08      	it	eq
   40fae:	1aad      	subeq	r5, r5, r2
   40fb0:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   40fb4:	bf14      	ite	ne
   40fb6:	2500      	movne	r5, #0
   40fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   40fbc:	4293      	cmp	r3, r2
   40fbe:	bfc4      	itt	gt
   40fc0:	1a9b      	subgt	r3, r3, r2
   40fc2:	18ed      	addgt	r5, r5, r3
   40fc4:	454d      	cmp	r5, r9
   40fc6:	d11a      	bne.n	40ffe <_printf_common+0xdc>
   40fc8:	2000      	movs	r0, #0
   40fca:	e008      	b.n	40fde <_printf_common+0xbc>
   40fcc:	2301      	movs	r3, #1
   40fce:	4652      	mov	r2, sl
   40fd0:	4639      	mov	r1, r7
   40fd2:	4630      	mov	r0, r6
   40fd4:	47c0      	blx	r8
   40fd6:	3001      	adds	r0, #1
   40fd8:	d103      	bne.n	40fe2 <_printf_common+0xc0>
   40fda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   40fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   40fe2:	3501      	adds	r5, #1
   40fe4:	e7c0      	b.n	40f68 <_printf_common+0x46>
   40fe6:	18e1      	adds	r1, r4, r3
   40fe8:	1c5a      	adds	r2, r3, #1
   40fea:	2030      	movs	r0, #48	; 0x30
   40fec:	3302      	adds	r3, #2
   40fee:	4422      	add	r2, r4
   40ff0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   40ff4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   40ff8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   40ffc:	e7c2      	b.n	40f84 <_printf_common+0x62>
   40ffe:	2301      	movs	r3, #1
   41000:	4622      	mov	r2, r4
   41002:	4639      	mov	r1, r7
   41004:	4630      	mov	r0, r6
   41006:	47c0      	blx	r8
   41008:	3001      	adds	r0, #1
   4100a:	d0e6      	beq.n	40fda <_printf_common+0xb8>
   4100c:	f109 0901 	add.w	r9, r9, #1
   41010:	e7d8      	b.n	40fc4 <_printf_common+0xa2>

00041012 <__sprintf_chk>:
   41012:	b408      	push	{r3}
   41014:	b517      	push	{r0, r1, r2, r4, lr}
   41016:	ab05      	add	r3, sp, #20
   41018:	1e14      	subs	r4, r2, #0
   4101a:	f853 1b04 	ldr.w	r1, [r3], #4
   4101e:	9301      	str	r3, [sp, #4]
   41020:	da07      	bge.n	41032 <__sprintf_chk+0x20>
   41022:	461a      	mov	r2, r3
   41024:	f7fb fe4a 	bl	3ccbc <vsiprintf>
   41028:	b003      	add	sp, #12
   4102a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   4102e:	b001      	add	sp, #4
   41030:	4770      	bx	lr
   41032:	460a      	mov	r2, r1
   41034:	4621      	mov	r1, r4
   41036:	f7fb fe1d 	bl	3cc74 <vsniprintf>
   4103a:	2800      	cmp	r0, #0
   4103c:	dbf4      	blt.n	41028 <__sprintf_chk+0x16>
   4103e:	42a0      	cmp	r0, r4
   41040:	d3f2      	bcc.n	41028 <__sprintf_chk+0x16>
   41042:	f7fb ff17 	bl	3ce74 <__chk_fail>

00041046 <__sread>:
   41046:	b510      	push	{r4, lr}
   41048:	460c      	mov	r4, r1
   4104a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   4104e:	f7fc ff97 	bl	3df80 <_read_r>
   41052:	2800      	cmp	r0, #0
   41054:	bfab      	itete	ge
   41056:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   41058:	89a3      	ldrhlt	r3, [r4, #12]
   4105a:	181b      	addge	r3, r3, r0
   4105c:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   41060:	bfac      	ite	ge
   41062:	6563      	strge	r3, [r4, #84]	; 0x54
   41064:	81a3      	strhlt	r3, [r4, #12]
   41066:	bd10      	pop	{r4, pc}

00041068 <__seofread>:
   41068:	2000      	movs	r0, #0
   4106a:	4770      	bx	lr

0004106c <__swrite>:
   4106c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41070:	461f      	mov	r7, r3
   41072:	898b      	ldrh	r3, [r1, #12]
   41074:	4605      	mov	r5, r0
   41076:	460c      	mov	r4, r1
   41078:	05db      	lsls	r3, r3, #23
   4107a:	4616      	mov	r6, r2
   4107c:	d505      	bpl.n	4108a <__swrite+0x1e>
   4107e:	2302      	movs	r3, #2
   41080:	2200      	movs	r2, #0
   41082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   41086:	f7fc facf 	bl	3d628 <_lseek_r>
   4108a:	89a3      	ldrh	r3, [r4, #12]
   4108c:	4632      	mov	r2, r6
   4108e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   41092:	4628      	mov	r0, r5
   41094:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   41098:	81a3      	strh	r3, [r4, #12]
   4109a:	463b      	mov	r3, r7
   4109c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   410a0:	f7fb be68 	b.w	3cd74 <_write_r>

000410a4 <__sseek>:
   410a4:	b510      	push	{r4, lr}
   410a6:	460c      	mov	r4, r1
   410a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   410ac:	f7fc fabc 	bl	3d628 <_lseek_r>
   410b0:	1c43      	adds	r3, r0, #1
   410b2:	89a3      	ldrh	r3, [r4, #12]
   410b4:	bf15      	itete	ne
   410b6:	6560      	strne	r0, [r4, #84]	; 0x54
   410b8:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   410bc:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   410c0:	81a3      	strheq	r3, [r4, #12]
   410c2:	bf18      	it	ne
   410c4:	81a3      	strhne	r3, [r4, #12]
   410c6:	bd10      	pop	{r4, pc}

000410c8 <__sclose>:
   410c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   410cc:	f7fb bef6 	b.w	3cebc <_close_r>

000410d0 <strcat>:
   410d0:	4603      	mov	r3, r0
   410d2:	b510      	push	{r4, lr}
   410d4:	461a      	mov	r2, r3
   410d6:	f812 4b01 	ldrb.w	r4, [r2], #1
   410da:	b93c      	cbnz	r4, 410ec <strcat+0x1c>
   410dc:	3b01      	subs	r3, #1
   410de:	f811 2b01 	ldrb.w	r2, [r1], #1
   410e2:	f803 2f01 	strb.w	r2, [r3, #1]!
   410e6:	2a00      	cmp	r2, #0
   410e8:	d1f9      	bne.n	410de <strcat+0xe>
   410ea:	bd10      	pop	{r4, pc}
   410ec:	4613      	mov	r3, r2
   410ee:	e7f1      	b.n	410d4 <strcat+0x4>

000410f0 <strchr>:
   410f0:	b2c9      	uxtb	r1, r1
   410f2:	4603      	mov	r3, r0
   410f4:	f810 2b01 	ldrb.w	r2, [r0], #1
   410f8:	b11a      	cbz	r2, 41102 <strchr+0x12>
   410fa:	428a      	cmp	r2, r1
   410fc:	d1f9      	bne.n	410f2 <strchr+0x2>
   410fe:	4618      	mov	r0, r3
   41100:	4770      	bx	lr
   41102:	2900      	cmp	r1, #0
   41104:	bf18      	it	ne
   41106:	2300      	movne	r3, #0
   41108:	e7f9      	b.n	410fe <strchr+0xe>

0004110a <strcpy>:
   4110a:	4603      	mov	r3, r0
   4110c:	f811 2b01 	ldrb.w	r2, [r1], #1
   41110:	f803 2b01 	strb.w	r2, [r3], #1
   41114:	2a00      	cmp	r2, #0
   41116:	d1f9      	bne.n	4110c <strcpy+0x2>
   41118:	4770      	bx	lr

0004111a <strncmp>:
   4111a:	b510      	push	{r4, lr}
   4111c:	b16a      	cbz	r2, 4113a <strncmp+0x20>
   4111e:	3901      	subs	r1, #1
   41120:	1884      	adds	r4, r0, r2
   41122:	f810 3b01 	ldrb.w	r3, [r0], #1
   41126:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   4112a:	4293      	cmp	r3, r2
   4112c:	d103      	bne.n	41136 <strncmp+0x1c>
   4112e:	42a0      	cmp	r0, r4
   41130:	d001      	beq.n	41136 <strncmp+0x1c>
   41132:	2b00      	cmp	r3, #0
   41134:	d1f5      	bne.n	41122 <strncmp+0x8>
   41136:	1a98      	subs	r0, r3, r2
   41138:	bd10      	pop	{r4, pc}
   4113a:	4610      	mov	r0, r2
   4113c:	e7fc      	b.n	41138 <strncmp+0x1e>

0004113e <strncpy>:
   4113e:	3901      	subs	r1, #1
   41140:	4603      	mov	r3, r0
   41142:	b510      	push	{r4, lr}
   41144:	b132      	cbz	r2, 41154 <strncpy+0x16>
   41146:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   4114a:	3a01      	subs	r2, #1
   4114c:	f803 4b01 	strb.w	r4, [r3], #1
   41150:	2c00      	cmp	r4, #0
   41152:	d1f7      	bne.n	41144 <strncpy+0x6>
   41154:	441a      	add	r2, r3
   41156:	2100      	movs	r1, #0
   41158:	4293      	cmp	r3, r2
   4115a:	d100      	bne.n	4115e <strncpy+0x20>
   4115c:	bd10      	pop	{r4, pc}
   4115e:	f803 1b01 	strb.w	r1, [r3], #1
   41162:	e7f9      	b.n	41158 <strncpy+0x1a>

00041164 <strstr>:
   41164:	b5f0      	push	{r4, r5, r6, r7, lr}
   41166:	780c      	ldrb	r4, [r1, #0]
   41168:	b164      	cbz	r4, 41184 <strstr+0x20>
   4116a:	4603      	mov	r3, r0
   4116c:	781a      	ldrb	r2, [r3, #0]
   4116e:	4618      	mov	r0, r3
   41170:	1c5e      	adds	r6, r3, #1
   41172:	b90a      	cbnz	r2, 41178 <strstr+0x14>
   41174:	4610      	mov	r0, r2
   41176:	e005      	b.n	41184 <strstr+0x20>
   41178:	4294      	cmp	r4, r2
   4117a:	d108      	bne.n	4118e <strstr+0x2a>
   4117c:	460d      	mov	r5, r1
   4117e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   41182:	b902      	cbnz	r2, 41186 <strstr+0x22>
   41184:	bdf0      	pop	{r4, r5, r6, r7, pc}
   41186:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   4118a:	4297      	cmp	r7, r2
   4118c:	d0f7      	beq.n	4117e <strstr+0x1a>
   4118e:	4633      	mov	r3, r6
   41190:	e7ec      	b.n	4116c <strstr+0x8>

00041192 <sulp>:
   41192:	b570      	push	{r4, r5, r6, lr}
   41194:	4604      	mov	r4, r0
   41196:	460d      	mov	r5, r1
   41198:	4616      	mov	r6, r2
   4119a:	ec45 4b10 	vmov	d0, r4, r5
   4119e:	f7fc faef 	bl	3d780 <__ulp>
   411a2:	ec51 0b10 	vmov	r0, r1, d0
   411a6:	b17e      	cbz	r6, 411c8 <sulp+0x36>
   411a8:	f3c5 530a 	ubfx	r3, r5, #20, #11
   411ac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   411b0:	2b00      	cmp	r3, #0
   411b2:	dd09      	ble.n	411c8 <sulp+0x36>
   411b4:	051b      	lsls	r3, r3, #20
   411b6:	2400      	movs	r4, #0
   411b8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   411bc:	4622      	mov	r2, r4
   411be:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   411c2:	462b      	mov	r3, r5
   411c4:	f7d7 fae8 	bl	18798 <__aeabi_dmul>
   411c8:	bd70      	pop	{r4, r5, r6, pc}

000411ca <_strtol_r>:
   411ca:	f7fb bc53 	b.w	3ca74 <_strtol_l.isra.0>

000411ce <_strtoul_r>:
   411ce:	f7fb bcd3 	b.w	3cb78 <_strtoul_l.isra.0>

000411d2 <_vsniprintf_r>:
   411d2:	b530      	push	{r4, r5, lr}
   411d4:	1e14      	subs	r4, r2, #0
   411d6:	4605      	mov	r5, r0
   411d8:	b09b      	sub	sp, #108	; 0x6c
   411da:	4618      	mov	r0, r3
   411dc:	da05      	bge.n	411ea <_vsniprintf_r+0x18>
   411de:	238b      	movs	r3, #139	; 0x8b
   411e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   411e4:	602b      	str	r3, [r5, #0]
   411e6:	b01b      	add	sp, #108	; 0x6c
   411e8:	bd30      	pop	{r4, r5, pc}
   411ea:	f44f 7302 	mov.w	r3, #520	; 0x208
   411ee:	9100      	str	r1, [sp, #0]
   411f0:	9104      	str	r1, [sp, #16]
   411f2:	4602      	mov	r2, r0
   411f4:	f8ad 300c 	strh.w	r3, [sp, #12]
   411f8:	bf14      	ite	ne
   411fa:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   411fe:	4623      	moveq	r3, r4
   41200:	4669      	mov	r1, sp
   41202:	4628      	mov	r0, r5
   41204:	9302      	str	r3, [sp, #8]
   41206:	9305      	str	r3, [sp, #20]
   41208:	f64f 73ff 	movw	r3, #65535	; 0xffff
   4120c:	f8ad 300e 	strh.w	r3, [sp, #14]
   41210:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   41212:	f7fc fb29 	bl	3d868 <_svfiprintf_r>
   41216:	1c43      	adds	r3, r0, #1
   41218:	bfbc      	itt	lt
   4121a:	238b      	movlt	r3, #139	; 0x8b
   4121c:	602b      	strlt	r3, [r5, #0]
   4121e:	2c00      	cmp	r4, #0
   41220:	d0e1      	beq.n	411e6 <_vsniprintf_r+0x14>
   41222:	9b00      	ldr	r3, [sp, #0]
   41224:	2200      	movs	r2, #0
   41226:	701a      	strb	r2, [r3, #0]
   41228:	e7dd      	b.n	411e6 <_vsniprintf_r+0x14>

0004122a <abort>:
   4122a:	b508      	push	{r3, lr}
   4122c:	2006      	movs	r0, #6
   4122e:	f7fc feb9 	bl	3dfa4 <raise>
   41232:	2001      	movs	r0, #1
   41234:	f7df fc98 	bl	20b68 <_exit>

00041238 <quorem>:
   41238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4123c:	6903      	ldr	r3, [r0, #16]
   4123e:	4680      	mov	r8, r0
   41240:	690c      	ldr	r4, [r1, #16]
   41242:	42a3      	cmp	r3, r4
   41244:	f2c0 8084 	blt.w	41350 <quorem+0x118>
   41248:	3c01      	subs	r4, #1
   4124a:	f108 0514 	add.w	r5, r8, #20
   4124e:	f101 0714 	add.w	r7, r1, #20
   41252:	00a0      	lsls	r0, r4, #2
   41254:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   41258:	182b      	adds	r3, r5, r0
   4125a:	eb07 0900 	add.w	r9, r7, r0
   4125e:	9301      	str	r3, [sp, #4]
   41260:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   41264:	3301      	adds	r3, #1
   41266:	429a      	cmp	r2, r3
   41268:	fbb2 f6f3 	udiv	r6, r2, r3
   4126c:	d333      	bcc.n	412d6 <quorem+0x9e>
   4126e:	f04f 0a00 	mov.w	sl, #0
   41272:	46bc      	mov	ip, r7
   41274:	46ae      	mov	lr, r5
   41276:	46d3      	mov	fp, sl
   41278:	f85c 2b04 	ldr.w	r2, [ip], #4
   4127c:	b293      	uxth	r3, r2
   4127e:	45e1      	cmp	r9, ip
   41280:	ea4f 4212 	mov.w	r2, r2, lsr #16
   41284:	fb06 a303 	mla	r3, r6, r3, sl
   41288:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   4128c:	b29b      	uxth	r3, r3
   4128e:	fb06 a202 	mla	r2, r6, r2, sl
   41292:	ebab 0303 	sub.w	r3, fp, r3
   41296:	f8de b000 	ldr.w	fp, [lr]
   4129a:	ea4f 4a12 	mov.w	sl, r2, lsr #16
   4129e:	fa1f fb8b 	uxth.w	fp, fp
   412a2:	445b      	add	r3, fp
   412a4:	fa1f fb82 	uxth.w	fp, r2
   412a8:	f8de 2000 	ldr.w	r2, [lr]
   412ac:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
   412b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
   412b4:	b29b      	uxth	r3, r3
   412b6:	ea4f 4b22 	mov.w	fp, r2, asr #16
   412ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   412be:	f84e 3b04 	str.w	r3, [lr], #4
   412c2:	d2d9      	bcs.n	41278 <quorem+0x40>
   412c4:	582b      	ldr	r3, [r5, r0]
   412c6:	b933      	cbnz	r3, 412d6 <quorem+0x9e>
   412c8:	9b01      	ldr	r3, [sp, #4]
   412ca:	3b04      	subs	r3, #4
   412cc:	429d      	cmp	r5, r3
   412ce:	461a      	mov	r2, r3
   412d0:	d332      	bcc.n	41338 <quorem+0x100>
   412d2:	f8c8 4010 	str.w	r4, [r8, #16]
   412d6:	4640      	mov	r0, r8
   412d8:	f000 fbc9 	bl	41a6e <__mcmp>
   412dc:	2800      	cmp	r0, #0
   412de:	db27      	blt.n	41330 <quorem+0xf8>
   412e0:	3601      	adds	r6, #1
   412e2:	4628      	mov	r0, r5
   412e4:	f04f 0c00 	mov.w	ip, #0
   412e8:	f857 1b04 	ldr.w	r1, [r7], #4
   412ec:	f8d0 e000 	ldr.w	lr, [r0]
   412f0:	b28b      	uxth	r3, r1
   412f2:	45b9      	cmp	r9, r7
   412f4:	fa1f f28e 	uxth.w	r2, lr
   412f8:	ebac 0303 	sub.w	r3, ip, r3
   412fc:	4413      	add	r3, r2
   412fe:	ea4f 4211 	mov.w	r2, r1, lsr #16
   41302:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   41306:	eb02 4223 	add.w	r2, r2, r3, asr #16
   4130a:	b29b      	uxth	r3, r3
   4130c:	ea4f 4c22 	mov.w	ip, r2, asr #16
   41310:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   41314:	f840 3b04 	str.w	r3, [r0], #4
   41318:	d2e6      	bcs.n	412e8 <quorem+0xb0>
   4131a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   4131e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   41322:	b92a      	cbnz	r2, 41330 <quorem+0xf8>
   41324:	3b04      	subs	r3, #4
   41326:	429d      	cmp	r5, r3
   41328:	461a      	mov	r2, r3
   4132a:	d30b      	bcc.n	41344 <quorem+0x10c>
   4132c:	f8c8 4010 	str.w	r4, [r8, #16]
   41330:	4630      	mov	r0, r6
   41332:	b003      	add	sp, #12
   41334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41338:	6812      	ldr	r2, [r2, #0]
   4133a:	3b04      	subs	r3, #4
   4133c:	2a00      	cmp	r2, #0
   4133e:	d1c8      	bne.n	412d2 <quorem+0x9a>
   41340:	3c01      	subs	r4, #1
   41342:	e7c3      	b.n	412cc <quorem+0x94>
   41344:	6812      	ldr	r2, [r2, #0]
   41346:	3b04      	subs	r3, #4
   41348:	2a00      	cmp	r2, #0
   4134a:	d1ef      	bne.n	4132c <quorem+0xf4>
   4134c:	3c01      	subs	r4, #1
   4134e:	e7ea      	b.n	41326 <quorem+0xee>
   41350:	2000      	movs	r0, #0
   41352:	e7ee      	b.n	41332 <quorem+0xfa>

00041354 <__sfmoreglue>:
   41354:	b570      	push	{r4, r5, r6, lr}
   41356:	1e4a      	subs	r2, r1, #1
   41358:	2568      	movs	r5, #104	; 0x68
   4135a:	460e      	mov	r6, r1
   4135c:	4355      	muls	r5, r2
   4135e:	f105 0174 	add.w	r1, r5, #116	; 0x74
   41362:	f7fa fded 	bl	3bf40 <_malloc_r>
   41366:	4604      	mov	r4, r0
   41368:	b140      	cbz	r0, 4137c <__sfmoreglue+0x28>
   4136a:	2100      	movs	r1, #0
   4136c:	f105 0268 	add.w	r2, r5, #104	; 0x68
   41370:	e9c0 1600 	strd	r1, r6, [r0]
   41374:	300c      	adds	r0, #12
   41376:	60a0      	str	r0, [r4, #8]
   41378:	f7ff fd12 	bl	40da0 <memset>
   4137c:	4620      	mov	r0, r4
   4137e:	bd70      	pop	{r4, r5, r6, pc}

00041380 <_fwalk_reent>:
   41380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   41384:	4680      	mov	r8, r0
   41386:	4689      	mov	r9, r1
   41388:	f100 0448 	add.w	r4, r0, #72	; 0x48
   4138c:	2600      	movs	r6, #0
   4138e:	b914      	cbnz	r4, 41396 <_fwalk_reent+0x16>
   41390:	4630      	mov	r0, r6
   41392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   41396:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
   4139a:	3f01      	subs	r7, #1
   4139c:	d501      	bpl.n	413a2 <_fwalk_reent+0x22>
   4139e:	6824      	ldr	r4, [r4, #0]
   413a0:	e7f5      	b.n	4138e <_fwalk_reent+0xe>
   413a2:	89ab      	ldrh	r3, [r5, #12]
   413a4:	2b01      	cmp	r3, #1
   413a6:	d907      	bls.n	413b8 <_fwalk_reent+0x38>
   413a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   413ac:	3301      	adds	r3, #1
   413ae:	d003      	beq.n	413b8 <_fwalk_reent+0x38>
   413b0:	4629      	mov	r1, r5
   413b2:	4640      	mov	r0, r8
   413b4:	47c8      	blx	r9
   413b6:	4306      	orrs	r6, r0
   413b8:	3568      	adds	r5, #104	; 0x68
   413ba:	e7ee      	b.n	4139a <_fwalk_reent+0x1a>

000413bc <rshift>:
   413bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   413be:	114b      	asrs	r3, r1, #5
   413c0:	6906      	ldr	r6, [r0, #16]
   413c2:	f100 0414 	add.w	r4, r0, #20
   413c6:	429e      	cmp	r6, r3
   413c8:	dd30      	ble.n	4142c <rshift+0x70>
   413ca:	f011 011f 	ands.w	r1, r1, #31
   413ce:	eb04 0686 	add.w	r6, r4, r6, lsl #2
   413d2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
   413d6:	d108      	bne.n	413ea <rshift+0x2e>
   413d8:	4621      	mov	r1, r4
   413da:	42b2      	cmp	r2, r6
   413dc:	460b      	mov	r3, r1
   413de:	d211      	bcs.n	41404 <rshift+0x48>
   413e0:	f852 3b04 	ldr.w	r3, [r2], #4
   413e4:	f841 3b04 	str.w	r3, [r1], #4
   413e8:	e7f7      	b.n	413da <rshift+0x1e>
   413ea:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
   413ee:	f1c1 0c20 	rsb	ip, r1, #32
   413f2:	3204      	adds	r2, #4
   413f4:	4623      	mov	r3, r4
   413f6:	40cd      	lsrs	r5, r1
   413f8:	4296      	cmp	r6, r2
   413fa:	4617      	mov	r7, r2
   413fc:	d80c      	bhi.n	41418 <rshift+0x5c>
   413fe:	601d      	str	r5, [r3, #0]
   41400:	b105      	cbz	r5, 41404 <rshift+0x48>
   41402:	3304      	adds	r3, #4
   41404:	1b1a      	subs	r2, r3, r4
   41406:	42a3      	cmp	r3, r4
   41408:	ea4f 02a2 	mov.w	r2, r2, asr #2
   4140c:	bf08      	it	eq
   4140e:	2300      	moveq	r3, #0
   41410:	6102      	str	r2, [r0, #16]
   41412:	bf08      	it	eq
   41414:	6143      	streq	r3, [r0, #20]
   41416:	bdf0      	pop	{r4, r5, r6, r7, pc}
   41418:	683f      	ldr	r7, [r7, #0]
   4141a:	fa07 f70c 	lsl.w	r7, r7, ip
   4141e:	433d      	orrs	r5, r7
   41420:	f843 5b04 	str.w	r5, [r3], #4
   41424:	f852 5b04 	ldr.w	r5, [r2], #4
   41428:	40cd      	lsrs	r5, r1
   4142a:	e7e5      	b.n	413f8 <rshift+0x3c>
   4142c:	4623      	mov	r3, r4
   4142e:	e7e9      	b.n	41404 <rshift+0x48>

00041430 <__hexdig_fun>:
   41430:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   41434:	2b09      	cmp	r3, #9
   41436:	d802      	bhi.n	4143e <__hexdig_fun+0xe>
   41438:	3820      	subs	r0, #32
   4143a:	b2c0      	uxtb	r0, r0
   4143c:	4770      	bx	lr
   4143e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   41442:	2b05      	cmp	r3, #5
   41444:	d801      	bhi.n	4144a <__hexdig_fun+0x1a>
   41446:	3847      	subs	r0, #71	; 0x47
   41448:	e7f7      	b.n	4143a <__hexdig_fun+0xa>
   4144a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   4144e:	2b05      	cmp	r3, #5
   41450:	d801      	bhi.n	41456 <__hexdig_fun+0x26>
   41452:	3827      	subs	r0, #39	; 0x27
   41454:	e7f1      	b.n	4143a <__hexdig_fun+0xa>
   41456:	2000      	movs	r0, #0
   41458:	4770      	bx	lr

0004145a <L_shift>:
   4145a:	f1c2 0208 	rsb	r2, r2, #8
   4145e:	0092      	lsls	r2, r2, #2
   41460:	b570      	push	{r4, r5, r6, lr}
   41462:	f1c2 0620 	rsb	r6, r2, #32
   41466:	6843      	ldr	r3, [r0, #4]
   41468:	6804      	ldr	r4, [r0, #0]
   4146a:	fa03 f506 	lsl.w	r5, r3, r6
   4146e:	40d3      	lsrs	r3, r2
   41470:	432c      	orrs	r4, r5
   41472:	6004      	str	r4, [r0, #0]
   41474:	f840 3f04 	str.w	r3, [r0, #4]!
   41478:	4288      	cmp	r0, r1
   4147a:	d3f4      	bcc.n	41466 <L_shift+0xc>
   4147c:	bd70      	pop	{r4, r5, r6, pc}

0004147e <__match>:
   4147e:	6803      	ldr	r3, [r0, #0]
   41480:	3301      	adds	r3, #1
   41482:	b530      	push	{r4, r5, lr}
   41484:	f811 4b01 	ldrb.w	r4, [r1], #1
   41488:	b914      	cbnz	r4, 41490 <__match+0x12>
   4148a:	6003      	str	r3, [r0, #0]
   4148c:	2001      	movs	r0, #1
   4148e:	bd30      	pop	{r4, r5, pc}
   41490:	f813 2b01 	ldrb.w	r2, [r3], #1
   41494:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   41498:	2d19      	cmp	r5, #25
   4149a:	bf98      	it	ls
   4149c:	3220      	addls	r2, #32
   4149e:	42a2      	cmp	r2, r4
   414a0:	d0f0      	beq.n	41484 <__match+0x6>
   414a2:	2000      	movs	r0, #0
   414a4:	e7f3      	b.n	4148e <__match+0x10>

000414a6 <__hexnan>:
   414a6:	680b      	ldr	r3, [r1, #0]
   414a8:	6801      	ldr	r1, [r0, #0]
   414aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   414ae:	115f      	asrs	r7, r3, #5
   414b0:	f013 031f 	ands.w	r3, r3, #31
   414b4:	f04f 0500 	mov.w	r5, #0
   414b8:	b087      	sub	sp, #28
   414ba:	eb02 0787 	add.w	r7, r2, r7, lsl #2
   414be:	4682      	mov	sl, r0
   414c0:	4690      	mov	r8, r2
   414c2:	46ab      	mov	fp, r5
   414c4:	bf18      	it	ne
   414c6:	3704      	addne	r7, #4
   414c8:	9301      	str	r3, [sp, #4]
   414ca:	9502      	str	r5, [sp, #8]
   414cc:	1f3e      	subs	r6, r7, #4
   414ce:	f847 5c04 	str.w	r5, [r7, #-4]
   414d2:	46b1      	mov	r9, r6
   414d4:	4634      	mov	r4, r6
   414d6:	1c4b      	adds	r3, r1, #1
   414d8:	784a      	ldrb	r2, [r1, #1]
   414da:	9303      	str	r3, [sp, #12]
   414dc:	b342      	cbz	r2, 41530 <__hexnan+0x8a>
   414de:	4610      	mov	r0, r2
   414e0:	9105      	str	r1, [sp, #20]
   414e2:	9204      	str	r2, [sp, #16]
   414e4:	f7ff ffa4 	bl	41430 <__hexdig_fun>
   414e8:	2800      	cmp	r0, #0
   414ea:	d143      	bne.n	41574 <__hexnan+0xce>
   414ec:	9a04      	ldr	r2, [sp, #16]
   414ee:	9905      	ldr	r1, [sp, #20]
   414f0:	2a20      	cmp	r2, #32
   414f2:	d818      	bhi.n	41526 <__hexnan+0x80>
   414f4:	9b02      	ldr	r3, [sp, #8]
   414f6:	459b      	cmp	fp, r3
   414f8:	dd13      	ble.n	41522 <__hexnan+0x7c>
   414fa:	454c      	cmp	r4, r9
   414fc:	d206      	bcs.n	4150c <__hexnan+0x66>
   414fe:	2d07      	cmp	r5, #7
   41500:	dc04      	bgt.n	4150c <__hexnan+0x66>
   41502:	462a      	mov	r2, r5
   41504:	4649      	mov	r1, r9
   41506:	4620      	mov	r0, r4
   41508:	f7ff ffa7 	bl	4145a <L_shift>
   4150c:	4544      	cmp	r4, r8
   4150e:	d943      	bls.n	41598 <__hexnan+0xf2>
   41510:	2300      	movs	r3, #0
   41512:	f1a4 0904 	sub.w	r9, r4, #4
   41516:	f8cd b008 	str.w	fp, [sp, #8]
   4151a:	f844 3c04 	str.w	r3, [r4, #-4]
   4151e:	461d      	mov	r5, r3
   41520:	464c      	mov	r4, r9
   41522:	9903      	ldr	r1, [sp, #12]
   41524:	e7d7      	b.n	414d6 <__hexnan+0x30>
   41526:	2a29      	cmp	r2, #41	; 0x29
   41528:	d149      	bne.n	415be <__hexnan+0x118>
   4152a:	3102      	adds	r1, #2
   4152c:	f8ca 1000 	str.w	r1, [sl]
   41530:	f1bb 0f00 	cmp.w	fp, #0
   41534:	d043      	beq.n	415be <__hexnan+0x118>
   41536:	454c      	cmp	r4, r9
   41538:	d206      	bcs.n	41548 <__hexnan+0xa2>
   4153a:	2d07      	cmp	r5, #7
   4153c:	dc04      	bgt.n	41548 <__hexnan+0xa2>
   4153e:	462a      	mov	r2, r5
   41540:	4649      	mov	r1, r9
   41542:	4620      	mov	r0, r4
   41544:	f7ff ff89 	bl	4145a <L_shift>
   41548:	4544      	cmp	r4, r8
   4154a:	d927      	bls.n	4159c <__hexnan+0xf6>
   4154c:	4643      	mov	r3, r8
   4154e:	f854 2b04 	ldr.w	r2, [r4], #4
   41552:	42a6      	cmp	r6, r4
   41554:	f843 2b04 	str.w	r2, [r3], #4
   41558:	d2f9      	bcs.n	4154e <__hexnan+0xa8>
   4155a:	2200      	movs	r2, #0
   4155c:	f843 2b04 	str.w	r2, [r3], #4
   41560:	429e      	cmp	r6, r3
   41562:	d2fb      	bcs.n	4155c <__hexnan+0xb6>
   41564:	6833      	ldr	r3, [r6, #0]
   41566:	b91b      	cbnz	r3, 41570 <__hexnan+0xca>
   41568:	4546      	cmp	r6, r8
   4156a:	d126      	bne.n	415ba <__hexnan+0x114>
   4156c:	2301      	movs	r3, #1
   4156e:	6033      	str	r3, [r6, #0]
   41570:	2005      	movs	r0, #5
   41572:	e025      	b.n	415c0 <__hexnan+0x11a>
   41574:	3501      	adds	r5, #1
   41576:	f10b 0b01 	add.w	fp, fp, #1
   4157a:	2d08      	cmp	r5, #8
   4157c:	dd05      	ble.n	4158a <__hexnan+0xe4>
   4157e:	4544      	cmp	r4, r8
   41580:	d9cf      	bls.n	41522 <__hexnan+0x7c>
   41582:	2300      	movs	r3, #0
   41584:	3c04      	subs	r4, #4
   41586:	2501      	movs	r5, #1
   41588:	6023      	str	r3, [r4, #0]
   4158a:	6822      	ldr	r2, [r4, #0]
   4158c:	f000 000f 	and.w	r0, r0, #15
   41590:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
   41594:	6020      	str	r0, [r4, #0]
   41596:	e7c4      	b.n	41522 <__hexnan+0x7c>
   41598:	2508      	movs	r5, #8
   4159a:	e7c2      	b.n	41522 <__hexnan+0x7c>
   4159c:	9b01      	ldr	r3, [sp, #4]
   4159e:	2b00      	cmp	r3, #0
   415a0:	d0e0      	beq.n	41564 <__hexnan+0xbe>
   415a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   415a6:	f1c3 0320 	rsb	r3, r3, #32
   415aa:	fa22 f303 	lsr.w	r3, r2, r3
   415ae:	f857 2c04 	ldr.w	r2, [r7, #-4]
   415b2:	401a      	ands	r2, r3
   415b4:	f847 2c04 	str.w	r2, [r7, #-4]
   415b8:	e7d4      	b.n	41564 <__hexnan+0xbe>
   415ba:	3e04      	subs	r6, #4
   415bc:	e7d2      	b.n	41564 <__hexnan+0xbe>
   415be:	2004      	movs	r0, #4
   415c0:	b007      	add	sp, #28
   415c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000415c6 <__retarget_lock_init_recursive>:
   415c6:	4770      	bx	lr

000415c8 <__retarget_lock_acquire_recursive>:
   415c8:	4770      	bx	lr

000415ca <__retarget_lock_release_recursive>:
   415ca:	4770      	bx	lr

000415cc <__swhatbuf_r>:
   415cc:	b570      	push	{r4, r5, r6, lr}
   415ce:	460e      	mov	r6, r1
   415d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   415d4:	b096      	sub	sp, #88	; 0x58
   415d6:	4614      	mov	r4, r2
   415d8:	2900      	cmp	r1, #0
   415da:	461d      	mov	r5, r3
   415dc:	da07      	bge.n	415ee <__swhatbuf_r+0x22>
   415de:	2300      	movs	r3, #0
   415e0:	602b      	str	r3, [r5, #0]
   415e2:	89b3      	ldrh	r3, [r6, #12]
   415e4:	061a      	lsls	r2, r3, #24
   415e6:	d410      	bmi.n	4160a <__swhatbuf_r+0x3e>
   415e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   415ec:	e00e      	b.n	4160c <__swhatbuf_r+0x40>
   415ee:	466a      	mov	r2, sp
   415f0:	f7fc fcf2 	bl	3dfd8 <_fstat_r>
   415f4:	2800      	cmp	r0, #0
   415f6:	dbf2      	blt.n	415de <__swhatbuf_r+0x12>
   415f8:	9a01      	ldr	r2, [sp, #4]
   415fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   415fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   41602:	425a      	negs	r2, r3
   41604:	415a      	adcs	r2, r3
   41606:	602a      	str	r2, [r5, #0]
   41608:	e7ee      	b.n	415e8 <__swhatbuf_r+0x1c>
   4160a:	2340      	movs	r3, #64	; 0x40
   4160c:	2000      	movs	r0, #0
   4160e:	6023      	str	r3, [r4, #0]
   41610:	b016      	add	sp, #88	; 0x58
   41612:	bd70      	pop	{r4, r5, r6, pc}

00041614 <__ascii_mbtowc>:
   41614:	b082      	sub	sp, #8
   41616:	b901      	cbnz	r1, 4161a <__ascii_mbtowc+0x6>
   41618:	a901      	add	r1, sp, #4
   4161a:	b142      	cbz	r2, 4162e <__ascii_mbtowc+0x1a>
   4161c:	b14b      	cbz	r3, 41632 <__ascii_mbtowc+0x1e>
   4161e:	7813      	ldrb	r3, [r2, #0]
   41620:	600b      	str	r3, [r1, #0]
   41622:	7812      	ldrb	r2, [r2, #0]
   41624:	1c10      	adds	r0, r2, #0
   41626:	bf18      	it	ne
   41628:	2001      	movne	r0, #1
   4162a:	b002      	add	sp, #8
   4162c:	4770      	bx	lr
   4162e:	4610      	mov	r0, r2
   41630:	e7fb      	b.n	4162a <__ascii_mbtowc+0x16>
   41632:	f06f 0001 	mvn.w	r0, #1
   41636:	e7f8      	b.n	4162a <__ascii_mbtowc+0x16>

00041638 <memmove>:
   41638:	4288      	cmp	r0, r1
   4163a:	eb01 0302 	add.w	r3, r1, r2
   4163e:	b510      	push	{r4, lr}
   41640:	d902      	bls.n	41648 <memmove+0x10>
   41642:	4283      	cmp	r3, r0
   41644:	461c      	mov	r4, r3
   41646:	d807      	bhi.n	41658 <memmove+0x20>
   41648:	1e42      	subs	r2, r0, #1
   4164a:	4299      	cmp	r1, r3
   4164c:	d008      	beq.n	41660 <memmove+0x28>
   4164e:	f811 4b01 	ldrb.w	r4, [r1], #1
   41652:	f802 4f01 	strb.w	r4, [r2, #1]!
   41656:	e7f8      	b.n	4164a <memmove+0x12>
   41658:	1883      	adds	r3, r0, r2
   4165a:	1a9a      	subs	r2, r3, r2
   4165c:	429a      	cmp	r2, r3
   4165e:	d100      	bne.n	41662 <memmove+0x2a>
   41660:	bd10      	pop	{r4, pc}
   41662:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   41666:	f803 1d01 	strb.w	r1, [r3, #-1]!
   4166a:	e7f7      	b.n	4165c <memmove+0x24>

0004166c <_Balloc>:
   4166c:	b570      	push	{r4, r5, r6, lr}
   4166e:	6a45      	ldr	r5, [r0, #36]	; 0x24
   41670:	4604      	mov	r4, r0
   41672:	460e      	mov	r6, r1
   41674:	b93d      	cbnz	r5, 41686 <_Balloc+0x1a>
   41676:	2010      	movs	r0, #16
   41678:	f7fa fc04 	bl	3be84 <malloc>
   4167c:	6260      	str	r0, [r4, #36]	; 0x24
   4167e:	6005      	str	r5, [r0, #0]
   41680:	60c5      	str	r5, [r0, #12]
   41682:	e9c0 5501 	strd	r5, r5, [r0, #4]
   41686:	6a65      	ldr	r5, [r4, #36]	; 0x24
   41688:	68eb      	ldr	r3, [r5, #12]
   4168a:	b183      	cbz	r3, 416ae <_Balloc+0x42>
   4168c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   4168e:	68db      	ldr	r3, [r3, #12]
   41690:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   41694:	b9b8      	cbnz	r0, 416c6 <_Balloc+0x5a>
   41696:	2101      	movs	r1, #1
   41698:	4620      	mov	r0, r4
   4169a:	fa01 f506 	lsl.w	r5, r1, r6
   4169e:	1d6a      	adds	r2, r5, #5
   416a0:	0092      	lsls	r2, r2, #2
   416a2:	f000 fb1a 	bl	41cda <_calloc_r>
   416a6:	b160      	cbz	r0, 416c2 <_Balloc+0x56>
   416a8:	e9c0 6501 	strd	r6, r5, [r0, #4]
   416ac:	e00e      	b.n	416cc <_Balloc+0x60>
   416ae:	2221      	movs	r2, #33	; 0x21
   416b0:	2104      	movs	r1, #4
   416b2:	4620      	mov	r0, r4
   416b4:	f000 fb11 	bl	41cda <_calloc_r>
   416b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   416ba:	60e8      	str	r0, [r5, #12]
   416bc:	68db      	ldr	r3, [r3, #12]
   416be:	2b00      	cmp	r3, #0
   416c0:	d1e4      	bne.n	4168c <_Balloc+0x20>
   416c2:	2000      	movs	r0, #0
   416c4:	bd70      	pop	{r4, r5, r6, pc}
   416c6:	6802      	ldr	r2, [r0, #0]
   416c8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   416cc:	2300      	movs	r3, #0
   416ce:	e9c0 3303 	strd	r3, r3, [r0, #12]
   416d2:	e7f7      	b.n	416c4 <_Balloc+0x58>

000416d4 <_Bfree>:
   416d4:	b570      	push	{r4, r5, r6, lr}
   416d6:	6a44      	ldr	r4, [r0, #36]	; 0x24
   416d8:	4606      	mov	r6, r0
   416da:	460d      	mov	r5, r1
   416dc:	b93c      	cbnz	r4, 416ee <_Bfree+0x1a>
   416de:	2010      	movs	r0, #16
   416e0:	f7fa fbd0 	bl	3be84 <malloc>
   416e4:	6270      	str	r0, [r6, #36]	; 0x24
   416e6:	6004      	str	r4, [r0, #0]
   416e8:	60c4      	str	r4, [r0, #12]
   416ea:	e9c0 4401 	strd	r4, r4, [r0, #4]
   416ee:	b13d      	cbz	r5, 41700 <_Bfree+0x2c>
   416f0:	6a73      	ldr	r3, [r6, #36]	; 0x24
   416f2:	686a      	ldr	r2, [r5, #4]
   416f4:	68db      	ldr	r3, [r3, #12]
   416f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   416fa:	6029      	str	r1, [r5, #0]
   416fc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   41700:	bd70      	pop	{r4, r5, r6, pc}

00041702 <__multadd>:
   41702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41706:	f101 0c14 	add.w	ip, r1, #20
   4170a:	461f      	mov	r7, r3
   4170c:	4606      	mov	r6, r0
   4170e:	460c      	mov	r4, r1
   41710:	690d      	ldr	r5, [r1, #16]
   41712:	2300      	movs	r3, #0
   41714:	f8dc 0000 	ldr.w	r0, [ip]
   41718:	3301      	adds	r3, #1
   4171a:	b281      	uxth	r1, r0
   4171c:	429d      	cmp	r5, r3
   4171e:	ea4f 4010 	mov.w	r0, r0, lsr #16
   41722:	fb02 7101 	mla	r1, r2, r1, r7
   41726:	ea4f 4711 	mov.w	r7, r1, lsr #16
   4172a:	b289      	uxth	r1, r1
   4172c:	fb02 7000 	mla	r0, r2, r0, r7
   41730:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   41734:	ea4f 4710 	mov.w	r7, r0, lsr #16
   41738:	f84c 1b04 	str.w	r1, [ip], #4
   4173c:	dcea      	bgt.n	41714 <__multadd+0x12>
   4173e:	b1d7      	cbz	r7, 41776 <__multadd+0x74>
   41740:	68a3      	ldr	r3, [r4, #8]
   41742:	42ab      	cmp	r3, r5
   41744:	dc12      	bgt.n	4176c <__multadd+0x6a>
   41746:	6861      	ldr	r1, [r4, #4]
   41748:	4630      	mov	r0, r6
   4174a:	3101      	adds	r1, #1
   4174c:	f7ff ff8e 	bl	4166c <_Balloc>
   41750:	6922      	ldr	r2, [r4, #16]
   41752:	4680      	mov	r8, r0
   41754:	f104 010c 	add.w	r1, r4, #12
   41758:	3202      	adds	r2, #2
   4175a:	300c      	adds	r0, #12
   4175c:	0092      	lsls	r2, r2, #2
   4175e:	f7ff faff 	bl	40d60 <memcpy>
   41762:	4621      	mov	r1, r4
   41764:	4644      	mov	r4, r8
   41766:	4630      	mov	r0, r6
   41768:	f7ff ffb4 	bl	416d4 <_Bfree>
   4176c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   41770:	3501      	adds	r5, #1
   41772:	615f      	str	r7, [r3, #20]
   41774:	6125      	str	r5, [r4, #16]
   41776:	4620      	mov	r0, r4
   41778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004177c <__s2b>:
   4177c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   41780:	4615      	mov	r5, r2
   41782:	461f      	mov	r7, r3
   41784:	2209      	movs	r2, #9
   41786:	3308      	adds	r3, #8
   41788:	460c      	mov	r4, r1
   4178a:	4606      	mov	r6, r0
   4178c:	2100      	movs	r1, #0
   4178e:	fb93 f3f2 	sdiv	r3, r3, r2
   41792:	2201      	movs	r2, #1
   41794:	429a      	cmp	r2, r3
   41796:	db20      	blt.n	417da <__s2b+0x5e>
   41798:	4630      	mov	r0, r6
   4179a:	f7ff ff67 	bl	4166c <_Balloc>
   4179e:	9b08      	ldr	r3, [sp, #32]
   417a0:	2d09      	cmp	r5, #9
   417a2:	6143      	str	r3, [r0, #20]
   417a4:	f04f 0301 	mov.w	r3, #1
   417a8:	6103      	str	r3, [r0, #16]
   417aa:	dd19      	ble.n	417e0 <__s2b+0x64>
   417ac:	f104 0909 	add.w	r9, r4, #9
   417b0:	442c      	add	r4, r5
   417b2:	46c8      	mov	r8, r9
   417b4:	f818 3b01 	ldrb.w	r3, [r8], #1
   417b8:	4601      	mov	r1, r0
   417ba:	220a      	movs	r2, #10
   417bc:	4630      	mov	r0, r6
   417be:	3b30      	subs	r3, #48	; 0x30
   417c0:	f7ff ff9f 	bl	41702 <__multadd>
   417c4:	45a0      	cmp	r8, r4
   417c6:	d1f5      	bne.n	417b4 <__s2b+0x38>
   417c8:	f1a5 0408 	sub.w	r4, r5, #8
   417cc:	444c      	add	r4, r9
   417ce:	1b2d      	subs	r5, r5, r4
   417d0:	1963      	adds	r3, r4, r5
   417d2:	42bb      	cmp	r3, r7
   417d4:	db07      	blt.n	417e6 <__s2b+0x6a>
   417d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   417da:	0052      	lsls	r2, r2, #1
   417dc:	3101      	adds	r1, #1
   417de:	e7d9      	b.n	41794 <__s2b+0x18>
   417e0:	340a      	adds	r4, #10
   417e2:	2509      	movs	r5, #9
   417e4:	e7f3      	b.n	417ce <__s2b+0x52>
   417e6:	f814 3b01 	ldrb.w	r3, [r4], #1
   417ea:	4601      	mov	r1, r0
   417ec:	220a      	movs	r2, #10
   417ee:	4630      	mov	r0, r6
   417f0:	3b30      	subs	r3, #48	; 0x30
   417f2:	f7ff ff86 	bl	41702 <__multadd>
   417f6:	e7eb      	b.n	417d0 <__s2b+0x54>

000417f8 <__hi0bits>:
   417f8:	0c02      	lsrs	r2, r0, #16
   417fa:	4603      	mov	r3, r0
   417fc:	0412      	lsls	r2, r2, #16
   417fe:	b9ca      	cbnz	r2, 41834 <__hi0bits+0x3c>
   41800:	0403      	lsls	r3, r0, #16
   41802:	2010      	movs	r0, #16
   41804:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   41808:	bf04      	itt	eq
   4180a:	021b      	lsleq	r3, r3, #8
   4180c:	3008      	addeq	r0, #8
   4180e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   41812:	bf04      	itt	eq
   41814:	011b      	lsleq	r3, r3, #4
   41816:	3004      	addeq	r0, #4
   41818:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   4181c:	bf04      	itt	eq
   4181e:	009b      	lsleq	r3, r3, #2
   41820:	3002      	addeq	r0, #2
   41822:	2b00      	cmp	r3, #0
   41824:	db05      	blt.n	41832 <__hi0bits+0x3a>
   41826:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   4182a:	f100 0001 	add.w	r0, r0, #1
   4182e:	bf08      	it	eq
   41830:	2020      	moveq	r0, #32
   41832:	4770      	bx	lr
   41834:	2000      	movs	r0, #0
   41836:	e7e5      	b.n	41804 <__hi0bits+0xc>

00041838 <__lo0bits>:
   41838:	6803      	ldr	r3, [r0, #0]
   4183a:	4601      	mov	r1, r0
   4183c:	f013 0207 	ands.w	r2, r3, #7
   41840:	d00b      	beq.n	4185a <__lo0bits+0x22>
   41842:	07da      	lsls	r2, r3, #31
   41844:	d424      	bmi.n	41890 <__lo0bits+0x58>
   41846:	0798      	lsls	r0, r3, #30
   41848:	bf47      	ittee	mi
   4184a:	085b      	lsrmi	r3, r3, #1
   4184c:	2001      	movmi	r0, #1
   4184e:	089b      	lsrpl	r3, r3, #2
   41850:	2002      	movpl	r0, #2
   41852:	bf4c      	ite	mi
   41854:	600b      	strmi	r3, [r1, #0]
   41856:	600b      	strpl	r3, [r1, #0]
   41858:	4770      	bx	lr
   4185a:	b298      	uxth	r0, r3
   4185c:	b9b0      	cbnz	r0, 4188c <__lo0bits+0x54>
   4185e:	0c1b      	lsrs	r3, r3, #16
   41860:	2010      	movs	r0, #16
   41862:	f013 0fff 	tst.w	r3, #255	; 0xff
   41866:	bf04      	itt	eq
   41868:	0a1b      	lsreq	r3, r3, #8
   4186a:	3008      	addeq	r0, #8
   4186c:	071a      	lsls	r2, r3, #28
   4186e:	bf04      	itt	eq
   41870:	091b      	lsreq	r3, r3, #4
   41872:	3004      	addeq	r0, #4
   41874:	079a      	lsls	r2, r3, #30
   41876:	bf04      	itt	eq
   41878:	089b      	lsreq	r3, r3, #2
   4187a:	3002      	addeq	r0, #2
   4187c:	07da      	lsls	r2, r3, #31
   4187e:	d403      	bmi.n	41888 <__lo0bits+0x50>
   41880:	085b      	lsrs	r3, r3, #1
   41882:	f100 0001 	add.w	r0, r0, #1
   41886:	d005      	beq.n	41894 <__lo0bits+0x5c>
   41888:	600b      	str	r3, [r1, #0]
   4188a:	4770      	bx	lr
   4188c:	4610      	mov	r0, r2
   4188e:	e7e8      	b.n	41862 <__lo0bits+0x2a>
   41890:	2000      	movs	r0, #0
   41892:	4770      	bx	lr
   41894:	2020      	movs	r0, #32
   41896:	4770      	bx	lr

00041898 <__i2b>:
   41898:	b510      	push	{r4, lr}
   4189a:	460c      	mov	r4, r1
   4189c:	2101      	movs	r1, #1
   4189e:	f7ff fee5 	bl	4166c <_Balloc>
   418a2:	2201      	movs	r2, #1
   418a4:	6144      	str	r4, [r0, #20]
   418a6:	6102      	str	r2, [r0, #16]
   418a8:	bd10      	pop	{r4, pc}

000418aa <__multiply>:
   418aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   418ae:	4690      	mov	r8, r2
   418b0:	690a      	ldr	r2, [r1, #16]
   418b2:	460c      	mov	r4, r1
   418b4:	f8d8 3010 	ldr.w	r3, [r8, #16]
   418b8:	429a      	cmp	r2, r3
   418ba:	bfbe      	ittt	lt
   418bc:	460b      	movlt	r3, r1
   418be:	4644      	movlt	r4, r8
   418c0:	4698      	movlt	r8, r3
   418c2:	6927      	ldr	r7, [r4, #16]
   418c4:	68a3      	ldr	r3, [r4, #8]
   418c6:	f8d8 9010 	ldr.w	r9, [r8, #16]
   418ca:	6861      	ldr	r1, [r4, #4]
   418cc:	eb07 0609 	add.w	r6, r7, r9
   418d0:	42b3      	cmp	r3, r6
   418d2:	bfb8      	it	lt
   418d4:	3101      	addlt	r1, #1
   418d6:	f7ff fec9 	bl	4166c <_Balloc>
   418da:	f100 0514 	add.w	r5, r0, #20
   418de:	2200      	movs	r2, #0
   418e0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
   418e4:	462b      	mov	r3, r5
   418e6:	4573      	cmp	r3, lr
   418e8:	d316      	bcc.n	41918 <__multiply+0x6e>
   418ea:	f104 0314 	add.w	r3, r4, #20
   418ee:	f108 0214 	add.w	r2, r8, #20
   418f2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   418f6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   418fa:	9300      	str	r3, [sp, #0]
   418fc:	9b00      	ldr	r3, [sp, #0]
   418fe:	9201      	str	r2, [sp, #4]
   41900:	4293      	cmp	r3, r2
   41902:	d80c      	bhi.n	4191e <__multiply+0x74>
   41904:	2e00      	cmp	r6, #0
   41906:	dd03      	ble.n	41910 <__multiply+0x66>
   41908:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
   4190c:	2b00      	cmp	r3, #0
   4190e:	d059      	beq.n	419c4 <__multiply+0x11a>
   41910:	6106      	str	r6, [r0, #16]
   41912:	b003      	add	sp, #12
   41914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41918:	f843 2b04 	str.w	r2, [r3], #4
   4191c:	e7e3      	b.n	418e6 <__multiply+0x3c>
   4191e:	f8b2 a000 	ldrh.w	sl, [r2]
   41922:	f1ba 0f00 	cmp.w	sl, #0
   41926:	d023      	beq.n	41970 <__multiply+0xc6>
   41928:	f104 0914 	add.w	r9, r4, #20
   4192c:	46ac      	mov	ip, r5
   4192e:	f04f 0800 	mov.w	r8, #0
   41932:	f859 1b04 	ldr.w	r1, [r9], #4
   41936:	f8dc b000 	ldr.w	fp, [ip]
   4193a:	b28b      	uxth	r3, r1
   4193c:	454f      	cmp	r7, r9
   4193e:	fa1f fb8b 	uxth.w	fp, fp
   41942:	fb0a b303 	mla	r3, sl, r3, fp
   41946:	ea4f 4b11 	mov.w	fp, r1, lsr #16
   4194a:	f8dc 1000 	ldr.w	r1, [ip]
   4194e:	4443      	add	r3, r8
   41950:	ea4f 4811 	mov.w	r8, r1, lsr #16
   41954:	fb0a 810b 	mla	r1, sl, fp, r8
   41958:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   4195c:	b29b      	uxth	r3, r3
   4195e:	ea4f 4811 	mov.w	r8, r1, lsr #16
   41962:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   41966:	f84c 3b04 	str.w	r3, [ip], #4
   4196a:	d8e2      	bhi.n	41932 <__multiply+0x88>
   4196c:	f8cc 8000 	str.w	r8, [ip]
   41970:	9b01      	ldr	r3, [sp, #4]
   41972:	3204      	adds	r2, #4
   41974:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   41978:	f1b9 0f00 	cmp.w	r9, #0
   4197c:	d020      	beq.n	419c0 <__multiply+0x116>
   4197e:	682b      	ldr	r3, [r5, #0]
   41980:	f104 0814 	add.w	r8, r4, #20
   41984:	46ac      	mov	ip, r5
   41986:	f04f 0a00 	mov.w	sl, #0
   4198a:	f8b8 1000 	ldrh.w	r1, [r8]
   4198e:	b29b      	uxth	r3, r3
   41990:	f8bc b002 	ldrh.w	fp, [ip, #2]
   41994:	fb09 b101 	mla	r1, r9, r1, fp
   41998:	448a      	add	sl, r1
   4199a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   4199e:	f84c 3b04 	str.w	r3, [ip], #4
   419a2:	f858 3b04 	ldr.w	r3, [r8], #4
   419a6:	f8bc 1000 	ldrh.w	r1, [ip]
   419aa:	0c1b      	lsrs	r3, r3, #16
   419ac:	4547      	cmp	r7, r8
   419ae:	fb09 1303 	mla	r3, r9, r3, r1
   419b2:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   419b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   419ba:	d8e6      	bhi.n	4198a <__multiply+0xe0>
   419bc:	f8cc 3000 	str.w	r3, [ip]
   419c0:	3504      	adds	r5, #4
   419c2:	e79b      	b.n	418fc <__multiply+0x52>
   419c4:	3e01      	subs	r6, #1
   419c6:	e79d      	b.n	41904 <__multiply+0x5a>

000419c8 <__lshift>:
   419c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   419cc:	460c      	mov	r4, r1
   419ce:	ea4f 1a62 	mov.w	sl, r2, asr #5
   419d2:	4607      	mov	r7, r0
   419d4:	4616      	mov	r6, r2
   419d6:	6923      	ldr	r3, [r4, #16]
   419d8:	6849      	ldr	r1, [r1, #4]
   419da:	eb0a 0903 	add.w	r9, sl, r3
   419de:	68a3      	ldr	r3, [r4, #8]
   419e0:	f109 0501 	add.w	r5, r9, #1
   419e4:	42ab      	cmp	r3, r5
   419e6:	db33      	blt.n	41a50 <__lshift+0x88>
   419e8:	4638      	mov	r0, r7
   419ea:	f7ff fe3f 	bl	4166c <_Balloc>
   419ee:	2300      	movs	r3, #0
   419f0:	4680      	mov	r8, r0
   419f2:	f100 0114 	add.w	r1, r0, #20
   419f6:	f100 0210 	add.w	r2, r0, #16
   419fa:	4618      	mov	r0, r3
   419fc:	4553      	cmp	r3, sl
   419fe:	db2a      	blt.n	41a56 <__lshift+0x8e>
   41a00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   41a04:	f104 0314 	add.w	r3, r4, #20
   41a08:	6920      	ldr	r0, [r4, #16]
   41a0a:	f016 021f 	ands.w	r2, r6, #31
   41a0e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   41a12:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   41a16:	d022      	beq.n	41a5e <__lshift+0x96>
   41a18:	f1c2 0e20 	rsb	lr, r2, #32
   41a1c:	2000      	movs	r0, #0
   41a1e:	681e      	ldr	r6, [r3, #0]
   41a20:	4096      	lsls	r6, r2
   41a22:	4330      	orrs	r0, r6
   41a24:	f841 0b04 	str.w	r0, [r1], #4
   41a28:	f853 0b04 	ldr.w	r0, [r3], #4
   41a2c:	459c      	cmp	ip, r3
   41a2e:	fa20 f00e 	lsr.w	r0, r0, lr
   41a32:	d8f4      	bhi.n	41a1e <__lshift+0x56>
   41a34:	6008      	str	r0, [r1, #0]
   41a36:	b108      	cbz	r0, 41a3c <__lshift+0x74>
   41a38:	f109 0502 	add.w	r5, r9, #2
   41a3c:	3d01      	subs	r5, #1
   41a3e:	4638      	mov	r0, r7
   41a40:	4621      	mov	r1, r4
   41a42:	f8c8 5010 	str.w	r5, [r8, #16]
   41a46:	f7ff fe45 	bl	416d4 <_Bfree>
   41a4a:	4640      	mov	r0, r8
   41a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   41a50:	3101      	adds	r1, #1
   41a52:	005b      	lsls	r3, r3, #1
   41a54:	e7c6      	b.n	419e4 <__lshift+0x1c>
   41a56:	f842 0f04 	str.w	r0, [r2, #4]!
   41a5a:	3301      	adds	r3, #1
   41a5c:	e7ce      	b.n	419fc <__lshift+0x34>
   41a5e:	3904      	subs	r1, #4
   41a60:	f853 2b04 	ldr.w	r2, [r3], #4
   41a64:	459c      	cmp	ip, r3
   41a66:	f841 2f04 	str.w	r2, [r1, #4]!
   41a6a:	d8f9      	bhi.n	41a60 <__lshift+0x98>
   41a6c:	e7e6      	b.n	41a3c <__lshift+0x74>

00041a6e <__mcmp>:
   41a6e:	6903      	ldr	r3, [r0, #16]
   41a70:	690a      	ldr	r2, [r1, #16]
   41a72:	1a9b      	subs	r3, r3, r2
   41a74:	b530      	push	{r4, r5, lr}
   41a76:	d10c      	bne.n	41a92 <__mcmp+0x24>
   41a78:	0092      	lsls	r2, r2, #2
   41a7a:	3014      	adds	r0, #20
   41a7c:	3114      	adds	r1, #20
   41a7e:	1884      	adds	r4, r0, r2
   41a80:	4411      	add	r1, r2
   41a82:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   41a86:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   41a8a:	4295      	cmp	r5, r2
   41a8c:	d003      	beq.n	41a96 <__mcmp+0x28>
   41a8e:	d305      	bcc.n	41a9c <__mcmp+0x2e>
   41a90:	2301      	movs	r3, #1
   41a92:	4618      	mov	r0, r3
   41a94:	bd30      	pop	{r4, r5, pc}
   41a96:	42a0      	cmp	r0, r4
   41a98:	d3f3      	bcc.n	41a82 <__mcmp+0x14>
   41a9a:	e7fa      	b.n	41a92 <__mcmp+0x24>
   41a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   41aa0:	e7f7      	b.n	41a92 <__mcmp+0x24>

00041aa2 <__mdiff>:
   41aa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   41aa6:	460d      	mov	r5, r1
   41aa8:	4607      	mov	r7, r0
   41aaa:	4611      	mov	r1, r2
   41aac:	4614      	mov	r4, r2
   41aae:	4628      	mov	r0, r5
   41ab0:	f7ff ffdd 	bl	41a6e <__mcmp>
   41ab4:	1e06      	subs	r6, r0, #0
   41ab6:	d108      	bne.n	41aca <__mdiff+0x28>
   41ab8:	4631      	mov	r1, r6
   41aba:	4638      	mov	r0, r7
   41abc:	f7ff fdd6 	bl	4166c <_Balloc>
   41ac0:	2301      	movs	r3, #1
   41ac2:	e9c0 3604 	strd	r3, r6, [r0, #16]
   41ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   41aca:	bfa3      	ittte	ge
   41acc:	4623      	movge	r3, r4
   41ace:	462c      	movge	r4, r5
   41ad0:	2600      	movge	r6, #0
   41ad2:	2601      	movlt	r6, #1
   41ad4:	bfa8      	it	ge
   41ad6:	461d      	movge	r5, r3
   41ad8:	6861      	ldr	r1, [r4, #4]
   41ada:	4638      	mov	r0, r7
   41adc:	f7ff fdc6 	bl	4166c <_Balloc>
   41ae0:	f105 0914 	add.w	r9, r5, #20
   41ae4:	60c6      	str	r6, [r0, #12]
   41ae6:	f104 0214 	add.w	r2, r4, #20
   41aea:	6926      	ldr	r6, [r4, #16]
   41aec:	f100 0114 	add.w	r1, r0, #20
   41af0:	692b      	ldr	r3, [r5, #16]
   41af2:	f04f 0e00 	mov.w	lr, #0
   41af6:	eb02 0786 	add.w	r7, r2, r6, lsl #2
   41afa:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   41afe:	f852 ab04 	ldr.w	sl, [r2], #4
   41b02:	f859 5b04 	ldr.w	r5, [r9], #4
   41b06:	fa1f f38a 	uxth.w	r3, sl
   41b0a:	4694      	mov	ip, r2
   41b0c:	b2ac      	uxth	r4, r5
   41b0e:	45c8      	cmp	r8, r9
   41b10:	4473      	add	r3, lr
   41b12:	eba3 0304 	sub.w	r3, r3, r4
   41b16:	ea4f 4415 	mov.w	r4, r5, lsr #16
   41b1a:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
   41b1e:	eb04 4423 	add.w	r4, r4, r3, asr #16
   41b22:	b29b      	uxth	r3, r3
   41b24:	ea4f 4e24 	mov.w	lr, r4, asr #16
   41b28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   41b2c:	f841 4b04 	str.w	r4, [r1], #4
   41b30:	d8e5      	bhi.n	41afe <__mdiff+0x5c>
   41b32:	45bc      	cmp	ip, r7
   41b34:	d304      	bcc.n	41b40 <__mdiff+0x9e>
   41b36:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   41b3a:	b183      	cbz	r3, 41b5e <__mdiff+0xbc>
   41b3c:	6106      	str	r6, [r0, #16]
   41b3e:	e7c2      	b.n	41ac6 <__mdiff+0x24>
   41b40:	f85c 4b04 	ldr.w	r4, [ip], #4
   41b44:	b2a2      	uxth	r2, r4
   41b46:	4472      	add	r2, lr
   41b48:	1413      	asrs	r3, r2, #16
   41b4a:	b292      	uxth	r2, r2
   41b4c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
   41b50:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   41b54:	ea4f 4e23 	mov.w	lr, r3, asr #16
   41b58:	f841 2b04 	str.w	r2, [r1], #4
   41b5c:	e7e9      	b.n	41b32 <__mdiff+0x90>
   41b5e:	3e01      	subs	r6, #1
   41b60:	e7e9      	b.n	41b36 <__mdiff+0x94>

00041b62 <__d2b>:
   41b62:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   41b66:	ec59 8b10 	vmov	r8, r9, d0
   41b6a:	f3c9 540a 	ubfx	r4, r9, #20, #11
   41b6e:	460e      	mov	r6, r1
   41b70:	2101      	movs	r1, #1
   41b72:	4615      	mov	r5, r2
   41b74:	f7ff fd7a 	bl	4166c <_Balloc>
   41b78:	f3c9 0313 	ubfx	r3, r9, #0, #20
   41b7c:	4607      	mov	r7, r0
   41b7e:	bb2c      	cbnz	r4, 41bcc <__d2b+0x6a>
   41b80:	9301      	str	r3, [sp, #4]
   41b82:	f1b8 0300 	subs.w	r3, r8, #0
   41b86:	d026      	beq.n	41bd6 <__d2b+0x74>
   41b88:	4668      	mov	r0, sp
   41b8a:	9300      	str	r3, [sp, #0]
   41b8c:	f7ff fe54 	bl	41838 <__lo0bits>
   41b90:	9900      	ldr	r1, [sp, #0]
   41b92:	b1f0      	cbz	r0, 41bd2 <__d2b+0x70>
   41b94:	9a01      	ldr	r2, [sp, #4]
   41b96:	f1c0 0320 	rsb	r3, r0, #32
   41b9a:	fa02 f303 	lsl.w	r3, r2, r3
   41b9e:	40c2      	lsrs	r2, r0
   41ba0:	430b      	orrs	r3, r1
   41ba2:	9201      	str	r2, [sp, #4]
   41ba4:	617b      	str	r3, [r7, #20]
   41ba6:	9b01      	ldr	r3, [sp, #4]
   41ba8:	2b00      	cmp	r3, #0
   41baa:	61bb      	str	r3, [r7, #24]
   41bac:	bf14      	ite	ne
   41bae:	2102      	movne	r1, #2
   41bb0:	2101      	moveq	r1, #1
   41bb2:	6139      	str	r1, [r7, #16]
   41bb4:	b1c4      	cbz	r4, 41be8 <__d2b+0x86>
   41bb6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   41bba:	4404      	add	r4, r0
   41bbc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   41bc0:	6034      	str	r4, [r6, #0]
   41bc2:	6028      	str	r0, [r5, #0]
   41bc4:	4638      	mov	r0, r7
   41bc6:	b003      	add	sp, #12
   41bc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   41bcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   41bd0:	e7d6      	b.n	41b80 <__d2b+0x1e>
   41bd2:	6179      	str	r1, [r7, #20]
   41bd4:	e7e7      	b.n	41ba6 <__d2b+0x44>
   41bd6:	a801      	add	r0, sp, #4
   41bd8:	f7ff fe2e 	bl	41838 <__lo0bits>
   41bdc:	9b01      	ldr	r3, [sp, #4]
   41bde:	2101      	movs	r1, #1
   41be0:	3020      	adds	r0, #32
   41be2:	617b      	str	r3, [r7, #20]
   41be4:	6139      	str	r1, [r7, #16]
   41be6:	e7e5      	b.n	41bb4 <__d2b+0x52>
   41be8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   41bec:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   41bf0:	6030      	str	r0, [r6, #0]
   41bf2:	6918      	ldr	r0, [r3, #16]
   41bf4:	f7ff fe00 	bl	417f8 <__hi0bits>
   41bf8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   41bfc:	e7e1      	b.n	41bc2 <__d2b+0x60>

00041bfe <__ratio>:
   41bfe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41c02:	4688      	mov	r8, r1
   41c04:	4681      	mov	r9, r0
   41c06:	4669      	mov	r1, sp
   41c08:	f7fb fdde 	bl	3d7c8 <__b2d>
   41c0c:	a901      	add	r1, sp, #4
   41c0e:	4640      	mov	r0, r8
   41c10:	ec57 6b10 	vmov	r6, r7, d0
   41c14:	f7fb fdd8 	bl	3d7c8 <__b2d>
   41c18:	f8d9 3010 	ldr.w	r3, [r9, #16]
   41c1c:	f8d8 2010 	ldr.w	r2, [r8, #16]
   41c20:	463d      	mov	r5, r7
   41c22:	4630      	mov	r0, r6
   41c24:	eba3 0c02 	sub.w	ip, r3, r2
   41c28:	e9dd 3200 	ldrd	r3, r2, [sp]
   41c2c:	ec5b ab10 	vmov	sl, fp, d0
   41c30:	1a9b      	subs	r3, r3, r2
   41c32:	4659      	mov	r1, fp
   41c34:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   41c38:	2b00      	cmp	r3, #0
   41c3a:	bfcd      	iteet	gt
   41c3c:	463a      	movgt	r2, r7
   41c3e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   41c42:	465a      	movle	r2, fp
   41c44:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
   41c48:	bfd8      	it	le
   41c4a:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
   41c4e:	ee10 2a10 	vmov	r2, s0
   41c52:	460b      	mov	r3, r1
   41c54:	4629      	mov	r1, r5
   41c56:	f7d6 fec9 	bl	189ec <__aeabi_ddiv>
   41c5a:	ec41 0b10 	vmov	d0, r0, r1
   41c5e:	b003      	add	sp, #12
   41c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00041c64 <__copybits>:
   41c64:	3901      	subs	r1, #1
   41c66:	f102 0314 	add.w	r3, r2, #20
   41c6a:	1149      	asrs	r1, r1, #5
   41c6c:	b510      	push	{r4, lr}
   41c6e:	3101      	adds	r1, #1
   41c70:	6914      	ldr	r4, [r2, #16]
   41c72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   41c76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   41c7a:	42a3      	cmp	r3, r4
   41c7c:	4602      	mov	r2, r0
   41c7e:	d303      	bcc.n	41c88 <__copybits+0x24>
   41c80:	2300      	movs	r3, #0
   41c82:	428a      	cmp	r2, r1
   41c84:	d305      	bcc.n	41c92 <__copybits+0x2e>
   41c86:	bd10      	pop	{r4, pc}
   41c88:	f853 2b04 	ldr.w	r2, [r3], #4
   41c8c:	f840 2b04 	str.w	r2, [r0], #4
   41c90:	e7f3      	b.n	41c7a <__copybits+0x16>
   41c92:	f842 3b04 	str.w	r3, [r2], #4
   41c96:	e7f4      	b.n	41c82 <__copybits+0x1e>

00041c98 <__any_on>:
   41c98:	f100 0214 	add.w	r2, r0, #20
   41c9c:	114b      	asrs	r3, r1, #5
   41c9e:	6900      	ldr	r0, [r0, #16]
   41ca0:	4298      	cmp	r0, r3
   41ca2:	b510      	push	{r4, lr}
   41ca4:	db11      	blt.n	41cca <__any_on+0x32>
   41ca6:	dd0a      	ble.n	41cbe <__any_on+0x26>
   41ca8:	f011 011f 	ands.w	r1, r1, #31
   41cac:	d007      	beq.n	41cbe <__any_on+0x26>
   41cae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   41cb2:	fa24 f001 	lsr.w	r0, r4, r1
   41cb6:	fa00 f101 	lsl.w	r1, r0, r1
   41cba:	428c      	cmp	r4, r1
   41cbc:	d10b      	bne.n	41cd6 <__any_on+0x3e>
   41cbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   41cc2:	4293      	cmp	r3, r2
   41cc4:	d803      	bhi.n	41cce <__any_on+0x36>
   41cc6:	2000      	movs	r0, #0
   41cc8:	bd10      	pop	{r4, pc}
   41cca:	4603      	mov	r3, r0
   41ccc:	e7f7      	b.n	41cbe <__any_on+0x26>
   41cce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   41cd2:	2900      	cmp	r1, #0
   41cd4:	d0f5      	beq.n	41cc2 <__any_on+0x2a>
   41cd6:	2001      	movs	r0, #1
   41cd8:	e7f6      	b.n	41cc8 <__any_on+0x30>

00041cda <_calloc_r>:
   41cda:	b538      	push	{r3, r4, r5, lr}
   41cdc:	fb02 f401 	mul.w	r4, r2, r1
   41ce0:	4621      	mov	r1, r4
   41ce2:	f7fa f92d 	bl	3bf40 <_malloc_r>
   41ce6:	4605      	mov	r5, r0
   41ce8:	b118      	cbz	r0, 41cf2 <_calloc_r+0x18>
   41cea:	4622      	mov	r2, r4
   41cec:	2100      	movs	r1, #0
   41cee:	f7ff f857 	bl	40da0 <memset>
   41cf2:	4628      	mov	r0, r5
   41cf4:	bd38      	pop	{r3, r4, r5, pc}

00041cf6 <_realloc_r>:
   41cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41cf8:	4607      	mov	r7, r0
   41cfa:	4614      	mov	r4, r2
   41cfc:	460e      	mov	r6, r1
   41cfe:	b921      	cbnz	r1, 41d0a <_realloc_r+0x14>
   41d00:	4611      	mov	r1, r2
   41d02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   41d06:	f7fa b91b 	b.w	3bf40 <_malloc_r>
   41d0a:	b922      	cbnz	r2, 41d16 <_realloc_r+0x20>
   41d0c:	4625      	mov	r5, r4
   41d0e:	f7fa f8c9 	bl	3bea4 <_free_r>
   41d12:	4628      	mov	r0, r5
   41d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   41d16:	f000 f968 	bl	41fea <_malloc_usable_size_r>
   41d1a:	42a0      	cmp	r0, r4
   41d1c:	d20f      	bcs.n	41d3e <_realloc_r+0x48>
   41d1e:	4621      	mov	r1, r4
   41d20:	4638      	mov	r0, r7
   41d22:	f7fa f90d 	bl	3bf40 <_malloc_r>
   41d26:	4605      	mov	r5, r0
   41d28:	2800      	cmp	r0, #0
   41d2a:	d0f2      	beq.n	41d12 <_realloc_r+0x1c>
   41d2c:	4631      	mov	r1, r6
   41d2e:	4622      	mov	r2, r4
   41d30:	f7ff f816 	bl	40d60 <memcpy>
   41d34:	4631      	mov	r1, r6
   41d36:	4638      	mov	r0, r7
   41d38:	f7fa f8b4 	bl	3bea4 <_free_r>
   41d3c:	e7e9      	b.n	41d12 <_realloc_r+0x1c>
   41d3e:	4635      	mov	r5, r6
   41d40:	e7e7      	b.n	41d12 <_realloc_r+0x1c>

00041d42 <__ssputs_r>:
   41d42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   41d46:	688e      	ldr	r6, [r1, #8]
   41d48:	4682      	mov	sl, r0
   41d4a:	460c      	mov	r4, r1
   41d4c:	4691      	mov	r9, r2
   41d4e:	429e      	cmp	r6, r3
   41d50:	4698      	mov	r8, r3
   41d52:	d838      	bhi.n	41dc6 <__ssputs_r+0x84>
   41d54:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   41d58:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   41d5c:	d031      	beq.n	41dc2 <__ssputs_r+0x80>
   41d5e:	6962      	ldr	r2, [r4, #20]
   41d60:	3301      	adds	r3, #1
   41d62:	6825      	ldr	r5, [r4, #0]
   41d64:	6909      	ldr	r1, [r1, #16]
   41d66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   41d6a:	1a6f      	subs	r7, r5, r1
   41d6c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   41d70:	443b      	add	r3, r7
   41d72:	1055      	asrs	r5, r2, #1
   41d74:	429d      	cmp	r5, r3
   41d76:	bf38      	it	cc
   41d78:	461d      	movcc	r5, r3
   41d7a:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   41d7e:	d030      	beq.n	41de2 <__ssputs_r+0xa0>
   41d80:	4629      	mov	r1, r5
   41d82:	f7fa f8dd 	bl	3bf40 <_malloc_r>
   41d86:	4606      	mov	r6, r0
   41d88:	b950      	cbnz	r0, 41da0 <__ssputs_r+0x5e>
   41d8a:	230c      	movs	r3, #12
   41d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   41d90:	f8ca 3000 	str.w	r3, [sl]
   41d94:	89a3      	ldrh	r3, [r4, #12]
   41d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   41d9a:	81a3      	strh	r3, [r4, #12]
   41d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   41da0:	463a      	mov	r2, r7
   41da2:	6921      	ldr	r1, [r4, #16]
   41da4:	f7fe ffdc 	bl	40d60 <memcpy>
   41da8:	89a3      	ldrh	r3, [r4, #12]
   41daa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   41dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   41db2:	81a3      	strh	r3, [r4, #12]
   41db4:	6126      	str	r6, [r4, #16]
   41db6:	443e      	add	r6, r7
   41db8:	6165      	str	r5, [r4, #20]
   41dba:	1bed      	subs	r5, r5, r7
   41dbc:	6026      	str	r6, [r4, #0]
   41dbe:	4646      	mov	r6, r8
   41dc0:	60a5      	str	r5, [r4, #8]
   41dc2:	4546      	cmp	r6, r8
   41dc4:	d900      	bls.n	41dc8 <__ssputs_r+0x86>
   41dc6:	4646      	mov	r6, r8
   41dc8:	4632      	mov	r2, r6
   41dca:	4649      	mov	r1, r9
   41dcc:	6820      	ldr	r0, [r4, #0]
   41dce:	f7ff fc33 	bl	41638 <memmove>
   41dd2:	68a3      	ldr	r3, [r4, #8]
   41dd4:	2000      	movs	r0, #0
   41dd6:	1b9b      	subs	r3, r3, r6
   41dd8:	60a3      	str	r3, [r4, #8]
   41dda:	6823      	ldr	r3, [r4, #0]
   41ddc:	441e      	add	r6, r3
   41dde:	6026      	str	r6, [r4, #0]
   41de0:	e7dc      	b.n	41d9c <__ssputs_r+0x5a>
   41de2:	462a      	mov	r2, r5
   41de4:	f7ff ff87 	bl	41cf6 <_realloc_r>
   41de8:	4606      	mov	r6, r0
   41dea:	2800      	cmp	r0, #0
   41dec:	d1e2      	bne.n	41db4 <__ssputs_r+0x72>
   41dee:	6921      	ldr	r1, [r4, #16]
   41df0:	4650      	mov	r0, sl
   41df2:	f7fa f857 	bl	3bea4 <_free_r>
   41df6:	e7c8      	b.n	41d8a <__ssputs_r+0x48>

00041df8 <_sungetc_r>:
   41df8:	b538      	push	{r3, r4, r5, lr}
   41dfa:	1c4b      	adds	r3, r1, #1
   41dfc:	4614      	mov	r4, r2
   41dfe:	d103      	bne.n	41e08 <_sungetc_r+0x10>
   41e00:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   41e04:	4628      	mov	r0, r5
   41e06:	bd38      	pop	{r3, r4, r5, pc}
   41e08:	8993      	ldrh	r3, [r2, #12]
   41e0a:	b2cd      	uxtb	r5, r1
   41e0c:	f023 0320 	bic.w	r3, r3, #32
   41e10:	8193      	strh	r3, [r2, #12]
   41e12:	6b63      	ldr	r3, [r4, #52]	; 0x34
   41e14:	6852      	ldr	r2, [r2, #4]
   41e16:	b18b      	cbz	r3, 41e3c <_sungetc_r+0x44>
   41e18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   41e1a:	4293      	cmp	r3, r2
   41e1c:	dd08      	ble.n	41e30 <_sungetc_r+0x38>
   41e1e:	6823      	ldr	r3, [r4, #0]
   41e20:	1e5a      	subs	r2, r3, #1
   41e22:	6022      	str	r2, [r4, #0]
   41e24:	f803 5c01 	strb.w	r5, [r3, #-1]
   41e28:	6863      	ldr	r3, [r4, #4]
   41e2a:	3301      	adds	r3, #1
   41e2c:	6063      	str	r3, [r4, #4]
   41e2e:	e7e9      	b.n	41e04 <_sungetc_r+0xc>
   41e30:	4621      	mov	r1, r4
   41e32:	f000 f896 	bl	41f62 <__submore>
   41e36:	2800      	cmp	r0, #0
   41e38:	d0f1      	beq.n	41e1e <_sungetc_r+0x26>
   41e3a:	e7e1      	b.n	41e00 <_sungetc_r+0x8>
   41e3c:	6921      	ldr	r1, [r4, #16]
   41e3e:	6823      	ldr	r3, [r4, #0]
   41e40:	b151      	cbz	r1, 41e58 <_sungetc_r+0x60>
   41e42:	4299      	cmp	r1, r3
   41e44:	d208      	bcs.n	41e58 <_sungetc_r+0x60>
   41e46:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   41e4a:	42a9      	cmp	r1, r5
   41e4c:	d104      	bne.n	41e58 <_sungetc_r+0x60>
   41e4e:	3b01      	subs	r3, #1
   41e50:	3201      	adds	r2, #1
   41e52:	6023      	str	r3, [r4, #0]
   41e54:	6062      	str	r2, [r4, #4]
   41e56:	e7d5      	b.n	41e04 <_sungetc_r+0xc>
   41e58:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   41e5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   41e60:	6363      	str	r3, [r4, #52]	; 0x34
   41e62:	2303      	movs	r3, #3
   41e64:	63a3      	str	r3, [r4, #56]	; 0x38
   41e66:	4623      	mov	r3, r4
   41e68:	f803 5f46 	strb.w	r5, [r3, #70]!
   41e6c:	6023      	str	r3, [r4, #0]
   41e6e:	2301      	movs	r3, #1
   41e70:	e7dc      	b.n	41e2c <_sungetc_r+0x34>

00041e72 <__ssrefill_r>:
   41e72:	b510      	push	{r4, lr}
   41e74:	460c      	mov	r4, r1
   41e76:	6b49      	ldr	r1, [r1, #52]	; 0x34
   41e78:	b169      	cbz	r1, 41e96 <__ssrefill_r+0x24>
   41e7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
   41e7e:	4299      	cmp	r1, r3
   41e80:	d001      	beq.n	41e86 <__ssrefill_r+0x14>
   41e82:	f7fa f80f 	bl	3bea4 <_free_r>
   41e86:	2000      	movs	r0, #0
   41e88:	6c23      	ldr	r3, [r4, #64]	; 0x40
   41e8a:	6360      	str	r0, [r4, #52]	; 0x34
   41e8c:	6063      	str	r3, [r4, #4]
   41e8e:	b113      	cbz	r3, 41e96 <__ssrefill_r+0x24>
   41e90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   41e92:	6023      	str	r3, [r4, #0]
   41e94:	bd10      	pop	{r4, pc}
   41e96:	6923      	ldr	r3, [r4, #16]
   41e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   41e9c:	6023      	str	r3, [r4, #0]
   41e9e:	2300      	movs	r3, #0
   41ea0:	6063      	str	r3, [r4, #4]
   41ea2:	89a3      	ldrh	r3, [r4, #12]
   41ea4:	f043 0320 	orr.w	r3, r3, #32
   41ea8:	81a3      	strh	r3, [r4, #12]
   41eaa:	e7f3      	b.n	41e94 <__ssrefill_r+0x22>

00041eac <__sccl>:
   41eac:	b570      	push	{r4, r5, r6, lr}
   41eae:	780b      	ldrb	r3, [r1, #0]
   41eb0:	1e44      	subs	r4, r0, #1
   41eb2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
   41eb6:	2b5e      	cmp	r3, #94	; 0x5e
   41eb8:	bf13      	iteet	ne
   41eba:	1c4a      	addne	r2, r1, #1
   41ebc:	1c8a      	addeq	r2, r1, #2
   41ebe:	784b      	ldrbeq	r3, [r1, #1]
   41ec0:	2100      	movne	r1, #0
   41ec2:	bf08      	it	eq
   41ec4:	2101      	moveq	r1, #1
   41ec6:	f804 1f01 	strb.w	r1, [r4, #1]!
   41eca:	42ac      	cmp	r4, r5
   41ecc:	d1fb      	bne.n	41ec6 <__sccl+0x1a>
   41ece:	b913      	cbnz	r3, 41ed6 <__sccl+0x2a>
   41ed0:	3a01      	subs	r2, #1
   41ed2:	4610      	mov	r0, r2
   41ed4:	bd70      	pop	{r4, r5, r6, pc}
   41ed6:	f081 0401 	eor.w	r4, r1, #1
   41eda:	1c51      	adds	r1, r2, #1
   41edc:	54c4      	strb	r4, [r0, r3]
   41ede:	f811 5c01 	ldrb.w	r5, [r1, #-1]
   41ee2:	1e4e      	subs	r6, r1, #1
   41ee4:	460a      	mov	r2, r1
   41ee6:	2d2d      	cmp	r5, #45	; 0x2d
   41ee8:	d006      	beq.n	41ef8 <__sccl+0x4c>
   41eea:	2d5d      	cmp	r5, #93	; 0x5d
   41eec:	d0f1      	beq.n	41ed2 <__sccl+0x26>
   41eee:	b90d      	cbnz	r5, 41ef4 <__sccl+0x48>
   41ef0:	4632      	mov	r2, r6
   41ef2:	e7ee      	b.n	41ed2 <__sccl+0x26>
   41ef4:	462b      	mov	r3, r5
   41ef6:	e7f0      	b.n	41eda <__sccl+0x2e>
   41ef8:	780e      	ldrb	r6, [r1, #0]
   41efa:	2e5d      	cmp	r6, #93	; 0x5d
   41efc:	d0fa      	beq.n	41ef4 <__sccl+0x48>
   41efe:	42b3      	cmp	r3, r6
   41f00:	dcf8      	bgt.n	41ef4 <__sccl+0x48>
   41f02:	3301      	adds	r3, #1
   41f04:	429e      	cmp	r6, r3
   41f06:	54c4      	strb	r4, [r0, r3]
   41f08:	dcfb      	bgt.n	41f02 <__sccl+0x56>
   41f0a:	3102      	adds	r1, #2
   41f0c:	e7e7      	b.n	41ede <__sccl+0x32>

00041f0e <_raise_r>:
   41f0e:	291f      	cmp	r1, #31
   41f10:	b538      	push	{r3, r4, r5, lr}
   41f12:	4604      	mov	r4, r0
   41f14:	460d      	mov	r5, r1
   41f16:	d904      	bls.n	41f22 <_raise_r+0x14>
   41f18:	2316      	movs	r3, #22
   41f1a:	6003      	str	r3, [r0, #0]
   41f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   41f20:	bd38      	pop	{r3, r4, r5, pc}
   41f22:	6c42      	ldr	r2, [r0, #68]	; 0x44
   41f24:	b112      	cbz	r2, 41f2c <_raise_r+0x1e>
   41f26:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   41f2a:	b94b      	cbnz	r3, 41f40 <_raise_r+0x32>
   41f2c:	4620      	mov	r0, r4
   41f2e:	f000 f816 	bl	41f5e <_getpid_r>
   41f32:	462a      	mov	r2, r5
   41f34:	4601      	mov	r1, r0
   41f36:	4620      	mov	r0, r4
   41f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   41f3c:	f7fc b83a 	b.w	3dfb4 <_kill_r>
   41f40:	2b01      	cmp	r3, #1
   41f42:	d00a      	beq.n	41f5a <_raise_r+0x4c>
   41f44:	1c59      	adds	r1, r3, #1
   41f46:	d103      	bne.n	41f50 <_raise_r+0x42>
   41f48:	2316      	movs	r3, #22
   41f4a:	6003      	str	r3, [r0, #0]
   41f4c:	2001      	movs	r0, #1
   41f4e:	e7e7      	b.n	41f20 <_raise_r+0x12>
   41f50:	2400      	movs	r4, #0
   41f52:	4628      	mov	r0, r5
   41f54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   41f58:	4798      	blx	r3
   41f5a:	2000      	movs	r0, #0
   41f5c:	e7e0      	b.n	41f20 <_raise_r+0x12>

00041f5e <_getpid_r>:
   41f5e:	f7fc bed1 	b.w	3ed04 <_getpid>

00041f62 <__submore>:
   41f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41f66:	460c      	mov	r4, r1
   41f68:	6b49      	ldr	r1, [r1, #52]	; 0x34
   41f6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
   41f6e:	4299      	cmp	r1, r3
   41f70:	d11a      	bne.n	41fa8 <__submore+0x46>
   41f72:	f44f 6180 	mov.w	r1, #1024	; 0x400
   41f76:	f7f9 ffe3 	bl	3bf40 <_malloc_r>
   41f7a:	b918      	cbnz	r0, 41f84 <__submore+0x22>
   41f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   41f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   41f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
   41f88:	6360      	str	r0, [r4, #52]	; 0x34
   41f8a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   41f8e:	63a3      	str	r3, [r4, #56]	; 0x38
   41f90:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   41f94:	7083      	strb	r3, [r0, #2]
   41f96:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   41f9a:	7043      	strb	r3, [r0, #1]
   41f9c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   41fa0:	7003      	strb	r3, [r0, #0]
   41fa2:	6020      	str	r0, [r4, #0]
   41fa4:	2000      	movs	r0, #0
   41fa6:	e7eb      	b.n	41f80 <__submore+0x1e>
   41fa8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   41faa:	0077      	lsls	r7, r6, #1
   41fac:	463a      	mov	r2, r7
   41fae:	f7ff fea2 	bl	41cf6 <_realloc_r>
   41fb2:	4605      	mov	r5, r0
   41fb4:	2800      	cmp	r0, #0
   41fb6:	d0e1      	beq.n	41f7c <__submore+0x1a>
   41fb8:	eb00 0806 	add.w	r8, r0, r6
   41fbc:	4601      	mov	r1, r0
   41fbe:	4632      	mov	r2, r6
   41fc0:	4640      	mov	r0, r8
   41fc2:	f7fe fecd 	bl	40d60 <memcpy>
   41fc6:	f8c4 8000 	str.w	r8, [r4]
   41fca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   41fce:	e7e9      	b.n	41fa4 <__submore+0x42>

00041fd0 <__ascii_wctomb>:
   41fd0:	b149      	cbz	r1, 41fe6 <__ascii_wctomb+0x16>
   41fd2:	2aff      	cmp	r2, #255	; 0xff
   41fd4:	bf8d      	iteet	hi
   41fd6:	238a      	movhi	r3, #138	; 0x8a
   41fd8:	700a      	strbls	r2, [r1, #0]
   41fda:	2001      	movls	r0, #1
   41fdc:	6003      	strhi	r3, [r0, #0]
   41fde:	bf88      	it	hi
   41fe0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   41fe4:	4770      	bx	lr
   41fe6:	4608      	mov	r0, r1
   41fe8:	4770      	bx	lr

00041fea <_malloc_usable_size_r>:
   41fea:	f851 3c04 	ldr.w	r3, [r1, #-4]
   41fee:	1f18      	subs	r0, r3, #4
   41ff0:	2b00      	cmp	r3, #0
   41ff2:	bfbc      	itt	lt
   41ff4:	580b      	ldrlt	r3, [r1, r0]
   41ff6:	18c0      	addlt	r0, r0, r3
   41ff8:	4770      	bx	lr
